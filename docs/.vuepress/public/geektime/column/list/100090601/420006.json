{"id":420006,"title":"04｜中间件：如何提高框架的可拓展性？","content":"<p>你好，我是轩脉刃。</p><p>到目前为止我们已经完成了Web框架的基础部分，使用net/http启动了一个Web服务，并且定义了自己的Context，可以控制请求超时。</p><p>之前在讲具体实现的时候，我们反复强调要注意代码的优化。那么如何优化呢？具体来说，很重要的一点就是封装。所以今天我们就回顾一下之前写的代码，看看如何通过封装来进一步提高代码扩展性。</p><p>在第二课，我们在业务文件夹中的controller.go的逻辑中设置了一个有超时时长的控制器：</p><pre><code class=\"language-go\">func FooControllerHandler(c *framework.Context) error {\n\t...\n    // 在业务逻辑处理前，创建有定时器功能的 context\n\tdurationCtx, cancel := context.WithTimeout(c.BaseContext(), time.Duration(1*time.Second))\n\tdefer cancel()\n\n\tgo func() {\n\t\t...\n\t\t// 执行具体的业务逻辑\n        \n\t\ttime.Sleep(10 * time.Second)\n        // ...\n              \n\t\tfinish &lt;- struct{}{}\n\t}()\n\t// 在业务逻辑处理后，操作输出逻辑...\n    select {\n\t...\n\tcase &lt;-finish:\n\t\tfmt.Println(\"finish\")\n\t...\n\t}\n\treturn nil\n}\n</code></pre><!-- [[[read_end]]] --><p>在正式执行业务逻辑之前，创建了一个具有定时器功能的 Context，然后开启一个 Goroutine 执行正式的业务逻辑，并且监听定时器和业务逻辑，哪个先完成，就先输出内容。</p><p>首先从代码功能分析，这个控制器像由两部分组成。</p><p>一部分是<strong>业务逻辑</strong>，也就是time.Sleep函数所代表的逻辑，在实际生产过程中，这里会有很重的业务逻辑代码；而另一部分是<strong>非业务逻辑</strong>，比如创建Context、通道等待finish信号等。很明显，这个非业务逻辑是非常通用的需求，可能在多个控制器中都会使用到。</p><p>而且考虑复用性，这里只是写了一个控制器，那如果有多个控制器呢，我们难道要为每个控制器都写上这么一段超时代码吗？那就非常冗余了。</p><p>所以，能不能设计一个机制，<strong>将这些非业务逻辑代码抽象出来，封装好，提供接口给控制器使用</strong>。这个机制的实现，就是我们今天要讲的中间件。</p><p>怎么实现这个中间件呢？我们再观察一下刚才的代码找找思路。</p><p>代码的组织顺序很清晰，先预处理请求，再处理业务逻辑，最后处理返回值，你发现没有这种顺序，其实很符合设计模式中的装饰器模式。装饰器模式，顾名思义，就是在核心处理模块的外层增加一个又一个的装饰，类似洋葱。<img src=\"https://static001.geekbang.org/resource/image/f9/2c/f94ccc78af2ca491afe1591e674e3f2c.jpg?wh=1920x912\" alt=\"\"></p><p>现在，抽象出中间件的思路是不是就很清晰了，把核心业务逻辑先封装起来，然后一层一层添加装饰，最终让所有请求正序一层层通过装饰器，进入核心处理模块，再反序退出装饰器。原理就是这么简单，不难理解，我们接着看该如何实现。</p><h2>使用函数嵌套方式实现中间件</h2><p>装饰器模式是一层一层的，所以具体实现其实也不难想到，就是使用函数嵌套。</p><p>首先，我们封装核心的业务逻辑。就是说，这个中间件的输入是一个核心的业务逻辑 ControllerHandler，输出也应该是一个 ControllerHandler。所以<strong>对于一个超时控制器，我们可以定义一个中间件为 TimeoutHandler</strong>。</p><p>在框架文件夹中，我们创建一个timeout.go文件来存放这个中间件。</p><pre><code class=\"language-go\">func TimeoutHandler(fun ControllerHandler, d time.Duration) ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *Context) error {\n\n\t\tfinish := make(chan struct{}, 1)\n\t\tpanicChan := make(chan interface{}, 1)\n\n\t\t// 执行业务逻辑前预操作：初始化超时 context\n\t\tdurationCtx, cancel := context.WithTimeout(c.BaseContext(), d)\n\t\tdefer cancel()\n\n\t\tc.request.WithContext(durationCtx)\n\n\t\tgo func() {\n\t\t\tdefer func() {\n\t\t\t\tif p := recover(); p != nil {\n\t\t\t\t\tpanicChan &lt;- p\n\t\t\t\t}\n\t\t\t}()\n\t\t\t// 执行具体的业务逻辑\n\t\t\tfun(c)\n\n\t\t\tfinish &lt;- struct{}{}\n\t\t}()\n\t\t// 执行业务逻辑后操作\n\t\tselect {\n\t\tcase p := &lt;-panicChan:\n\t\t\tlog.Println(p)\n\t\t\tc.responseWriter.WriteHeader(500)\n\t\tcase &lt;-finish:\n\t\t\tfmt.Println(\"finish\")\n\t\tcase &lt;-durationCtx.Done():\n\t\t\tc.SetHasTimeout()\n\t\t\tc.responseWriter.Write([]byte(\"time out\"))\n\t\t}\n\t\treturn nil\n\t}\n}\n</code></pre><p>仔细看下这段代码，中间件函数的返回值是一个匿名函数，这个匿名函数实现了ControllerHandler 函数结构，参数为Context，返回值为error。</p><p>在这个匿名函数中，我们先创建了一个定时器Context，然后开启一个Goroutine，在Goroutine中执行具体的业务逻辑。这个Goroutine会在业务逻辑执行结束后，通过一个finish的channel来传递结束信号；也会在业务出现异常的时候，通过panicChan来传递异常信号。</p><p>而在业务逻辑之外的主Goroutine中，会同时进行多个信号的监听操作，包括结束信号、异常信号、超时信号，耗时最短的信号到达后，请求结束。这样，我们就完成了设置业务超时的任务。</p><p>于是在业务文件夹route.go中，路由注册就可以修改为：</p><pre><code class=\"language-go\">// 在核心业务逻辑 UserLoginController 之外，封装一层 TimeoutHandler\ncore.Get(\"/user/login\", framework.TimeoutHandler(UserLoginController, time.Second))\n</code></pre><p>这种函数嵌套方式，让下层中间件是上层中间件的参数，通过一层层嵌套实现了中间件的装饰器模式。</p><p>但是你再想一步，就会发现，这样实现的中间件机制有两个问题：</p><ol>\n<li><strong>中间件是循环嵌套的</strong>，当有多个中间件的时候，整个嵌套长度就会非常长，非常不优雅的，比如：</li>\n</ol><pre><code class=\"language-go\">TimeoutHandler(LogHandler(recoveryHandler(UserLoginController)))\n</code></pre><ol start=\"2\">\n<li>刚才的实现，<strong>只能为单个业务控制器设置中间件，不能批量设置</strong>。上一课我们开发的路由是具有同前缀分组功能的（IGroup），需要批量为某个分组设置一个超时时长。</li>\n</ol><p>所以，我们要对刚才实现的简单中间件代码做一些改进。怎么做呢？</p><h2>使用 pipeline 思想改造中间件</h2><p>一层层嵌套不好用，如果我们将每个核心控制器所需要的中间件，使用一个数组链接（Chain）起来，形成一条流水线（Pipeline），就能完美解决这两个问题了。</p><p>请求流的流向如下图所示：<img src=\"https://static001.geekbang.org/resource/image/e1/2a/e1aa5937627e46c8b2b21e45426f342a.jpg?wh=1920x915\" alt=\"\"></p><p>这个Pipeline模型和前面的洋葱模型不一样的点在于，<strong>Middleware不再以下一层的ControllerHandler为参数了，它只需要返回有自身中间件逻辑的ControllerHandler</strong>。</p><p>也就是在框架文件夹中的timeout.go中，我们将Middleware的形式从刚才的：</p><pre><code class=\"language-go\">func TimeoutHandler(fun ControllerHandler, d time.Duration) ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *Context) error {\n   //...\n    }\n}\n</code></pre><p>变成这样：</p><pre><code class=\"language-go\">// 超时控制器参数中ControllerHandler结构已经去掉\nfunc Timeout(d time.Duration) framework.ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *framework.Context) error {\n      //...\n    }\n}\n</code></pre><p>但是在中间件注册的回调函数中，如何调用下一个ControllerHandler呢？在回调函数中，只有framework.Context 这个数据结构作为参数。</p><p>所以就需要我们在Context这个数据结构中想一些办法了。回顾下目前有的数据结构：Core、Context、Tree、Node、Group。<img src=\"https://static001.geekbang.org/resource/image/8e/7b/8ef582e74e9c5ca1c0f54e7c1d75a67b.jpg?wh=1920x1277\" alt=\"\"></p><p>它们基本上都是以 Core 为中心，在 Core 中设置路由 router，实现了 Tree 结构，在 Tree 结构中包含路由节点 node；在注册路由的时候，将对应的业务核心处理逻辑 handler ，放在 node 结构的 handler 属性中。</p><p>而 Core 中的 ServeHttp 方法会创建 Context 数据结构，然后ServeHttp方法再根据 Request-URI 查找指定 node，并且将 Context 结构和 node 中的控制器 ControllerHandler 结合起来执行具体的业务逻辑。</p><p>结构都梳理清楚了，怎么改造成流水线呢？</p><p>我们可以<strong>将每个中间件构造出来的 ControllerHandler 和最终的业务逻辑的 ControllerHandler 结合在一起</strong>，成为一个 ControllerHandler 数组，也就是控制器链。在最终执行业务代码的时候，能一个个调用控制器链路上的控制器。</p><p>这个想法其实是非常自然的，因为中间件中创造出来的ControllerHandler匿名函数，和最终的控制器业务逻辑ControllerHandler，都是<strong>同样的结构</strong>，<strong>所以我们可以选用Controllerhander的数组，来表示某个路由的业务逻辑</strong>。</p><p>对应到代码上，我们先搞清楚使用链路的方式，再看如何注册和构造链路。</p><h3>如何使用控制器链路</h3><p>首先，我们研究下如何使用这个控制器链路，即图中右边部分的改造。<br>\n<img src=\"https://static001.geekbang.org/resource/image/49/c8/49c2d50b26d48e338c3acd2e1374f4c8.jpg?wh=1920x1277\" alt=\"\"></p><p>第一步，我们需要修改路由节点node。</p><p>在node节点中将原先的Handler，替换为控制器链路Handlers。这样在寻找路由节点的时候，就能找到对应的控制器链路了。修改框架文件夹中存放trie树的trie.go文件：</p><pre><code class=\"language-go\">// 代表节点\ntype node struct {\n\t...\n\thandlers []ControllerHandler // 中间件+控制器 \n    ...\n}\n\n</code></pre><p>第二步，我们修改Context结构。</p><p>由于我们上文提到，在中间件注册的回调函数中，只有framework.Context 这个数据结构作为参数，所以在Context中也需要保存这个控制器链路(handlers)，并且要记录下当前执行到了哪个控制器（index）。修改框架文件夹的context.go文件：</p><pre><code class=\"language-go\">// Context代表当前请求上下文\ntype Context struct {\n\t...\n\n\t// 当前请求的handler链条\n\thandlers []ControllerHandler\n\tindex&nbsp; &nbsp; int // 当前请求调用到调用链的哪个节点\n}\n</code></pre><p>第三步，来实现链条调用方式。</p><p>为了控制实现链条的逐步调用，我们为Context实现一个Next方法。这个Next方法每调用一次，就将这个控制器链路的调用控制器，往后移动一步。继续在框架文件夹中的context.go文件里写：</p><pre><code class=\"language-go\">// 核心函数，调用context的下一个函数\nfunc (ctx *Context) Next() error {\n\tctx.index++\n\tif ctx.index &lt; len(ctx.handlers) {\n\t\tif err := ctx.handlers[ctx.index](ctx); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n</code></pre><p>这里我再啰嗦一下，Next() 函数是整个链路执行的重点，要好好理解，它通过维护Context中的一个下标，来控制链路移动，这个下标表示当前调用Next要执行的控制器序列。</p><p>Next() 函数会在框架的两个地方被调用：</p><ul>\n<li>第一个是在此次请求处理的入口处，即Core的ServeHttp；</li>\n<li>第二个是在每个中间件的逻辑代码中，用于调用下个中间件。<br>\n<img src=\"https://static001.geekbang.org/resource/image/73/3c/73a80752cf6d94b90febd2e23e80bc3c.jpg?wh=1920x915\" alt=\"\"></li>\n</ul><p>这里要注意，index下标表示当前调用Next要执行的控制器序列，它的<strong>初始值应该为-1，每次调用都会自增1</strong>，这样才能保证第一次调用的时候index为0，定位到控制器链条的下标为0的控制器，即第一个控制器。</p><p>在框架文件夹context.go的初始化Context函数中，代码如下：</p><pre><code class=\"language-go\">// NewContext 初始化一个Context\nfunc NewContext(r *http.Request, w http.ResponseWriter) *Context {\n\treturn &amp;Context{\n\t\t...\n\t\tindex:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -1,\n\t}\n}\n</code></pre><p>被调用的第一个地方，在入口处调用的代码，写在框架文件夹中的core.go文件中：</p><pre><code class=\"language-go\">// 所有请求都进入这个函数, 这个函数负责路由分发\nfunc (c *Core) ServeHTTP(response http.ResponseWriter, request *http.Request) {\n\n\t// 封装自定义context\n\tctx := NewContext(request, response)\n\n\t// 寻找路由\n\thandlers := c.FindRouteByRequest(request)\n\tif handlers == nil {\n\t\t// 如果没有找到，这里打印日志\n\t\tctx.Json(404, \"not found\")\n\t\treturn\n\t}\n\n    // 设置context中的handlers字段\n\tctx.SetHandlers(handlers)\n\n\t// 调用路由函数，如果返回err 代表存在内部错误，返回500状态码\n\tif err := ctx.Next(); err != nil {\n\t\tctx.Json(500, \"inner error\")\n\t\treturn\n\t}\n}\n</code></pre><p>被调用的第二个位置在中间件中，每个中间件都通过调用 context.Next 来调用下一个中间件。所以我们可以在框架文件夹中创建middleware目录，其中创建一个test.go存放我们的测试中间件：</p><pre><code class=\"language-go\">func Test1() framework.ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *framework.Context) error {\n\t\tfmt.Println(\"middleware pre test1\")\n\t\tc.Next()  // 调用Next往下调用，会自增contxt.index\n\t\tfmt.Println(\"middleware post test1\")\n\t\treturn nil\n\t}\n}\n\nfunc Test2() framework.ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *framework.Context) error {\n\t\tfmt.Println(\"middleware pre test2\")\n\t\tc.Next() // 调用Next往下调用，会自增contxt.index\n\t\tfmt.Println(\"middleware post test2\")\n\t\treturn nil\n\t}\n}\n\n</code></pre><h3>如何注册控制器链路</h3><p>如何使用控制器链路，我们就讲完了，再看控制器链路如何注册，就是之前UML图的左边部分。<img src=\"https://static001.geekbang.org/resource/image/3c/b5/3c2012fcfcabcfc0159e4ecec2fdb8b5.jpg?wh=1920x1277\" alt=\"\"></p><p>很明显，现有的函数没有包含注册中间件逻辑，所以我们需要为Group和Core两个结构增加注册中间件入口，要设计两个地方：</p><ul>\n<li>Core和Group单独设计一个Use函数，为其数据结构负责的路由批量设置中间件</li>\n<li>为Core和Group注册单个路由的 Get / Post / Put / Delete 函数，设置中间件</li>\n</ul><p>先看下批量设置中间件的Use函数，我们在框架文件夹中的core.go修改：</p><pre><code class=\"language-go\">// 注册中间件\nfunc (c *Core) Use(middlewares ...ControllerHandler) {\n   c.middlewares = append(c.middlewares, middlewares...)\n}\n</code></pre><p>和框架文件夹中的group.go中修改：</p><pre><code class=\"language-go\">// 注册中间件\nfunc (g *Group) Use(middlewares ...ControllerHandler) {\n   g.middlewares = append(g.middlewares, middlewares...)\n}\n</code></pre><p>注意下这里的参数，使用的是Golang的可变参数，<strong>这个可变参数代表，我可以传递0～n个ControllerHandler类型的参数</strong>，这个设计会增加函数的易用性。它在业务文件夹中使用起来的形式是这样的，在main.go中：</p><pre><code class=\"language-go\">// core中使用use注册中间件\ncore.Use(\n\t\tmiddleware.Test1(),\n\t\tmiddleware.Test2())\n\n// group中使用use注册中间件\nsubjectApi := core.Group(\"/subject\")\nsubjectApi.Use(middleware.Test3())\n</code></pre><p>再看单个路由设置中间件的函数，我们也使用可变参数，改造注册路由的函数（Get /Post /Delete /Put），继续在框架文件夹中的core.go里修改：</p><pre><code class=\"language-go\">// Core的Get方法进行改造\nfunc (c *Core) Get(url string, handlers ...ControllerHandler) {\n\t// 将core的middleware 和 handlers结合起来\n\tallHandlers := append(c.middlewares, handlers...)\n\tif err := c.router[\"GET\"].AddRouter(url, allHandlers); err != nil {\n\t\tlog.Fatal(\"add router error: \", err)\n\t}\n}\n... \n</code></pre><p>同时修改框架文件夹中的group.go：</p><pre><code class=\"language-go\">// 改造IGroup 的所有方法\ntype IGroup interface {\n\t// 实现HttpMethod方法\n\tGet(string, ...ControllerHandler)\n\tPost(string, ...ControllerHandler)\n\tPut(string, ...ControllerHandler)\n\tDelete(string, ...ControllerHandler)\n    //..\n}\n\n// 改造Group的Get方法\nfunc (g *Group) Get(uri string, handlers ...ControllerHandler) {\n\turi = g.getAbsolutePrefix() + uri\n\tallHandlers := append(g.getMiddlewares(), handlers...)\n\tg.core.Get(uri, allHandlers...)\n}\n\n...\n</code></pre><p>这样，回到业务文件夹中的router.go，我们注册路由的使用方法就可以变成如下形式：</p><pre><code class=\"language-go\">// 注册路由规则\nfunc registerRouter(core *framework.Core) {\n\t// 在core中使用middleware.Test3() 为单个路由增加中间件\n\tcore.Get(\"/user/login\", middleware.Test3(), UserLoginController)\n\n\t// 批量通用前缀\n\tsubjectApi := core.Group(\"/subject\")\n\t{\n        ...\n        // 在group中使用middleware.Test3() 为单个路由增加中间件\n\t\tsubjectApi.Get(\"/:id\", middleware.Test3(), SubjectGetController)\n\t}\n}\n</code></pre><p>不管是通过批量注册中间件，还是单个注册中间件，最终都要汇总到路由节点node中，所以这里我们调用了上一节课最终增加路由的函数Tree.AddRouter，把将这个请求对应的Core结构里的中间件和Group结构里的中间件，都聚合起来，成为最终路由节点的中间件。</p><p>聚合的逻辑在group.go和core.go中都有，实际上就是<strong>将Handler和Middleware一起放在一个数组中</strong>。</p><pre><code class=\"language-go\">// 获取某个group的middleware\n// 这里就是获取除了Get/Post/Put/Delete之外设置的middleware\nfunc (g *Group) getMiddlewares() []ControllerHandler {\n\tif g.parent == nil {\n\t\treturn g.middlewares\n\t}\n\n\treturn append(g.parent.getMiddlewares(), g.middlewares...)\n}\n\n// 实现Get方法\nfunc (g *Group) Get(uri string, handlers ...ControllerHandler) {\n\turi = g.getAbsolutePrefix() + uri\n\tallHandlers := append(g.getMiddlewares(), handlers...)\n\tg.core.Get(uri, allHandlers...)\n}\n</code></pre><p>在core.go文件夹里写：</p><pre><code class=\"language-go\">// 匹配GET 方法, 增加路由规则\nfunc (c *Core) Get(url string, handlers ...ControllerHandler) {\n\t// 将core的middleware 和 handlers结合起来\n\tallHandlers := append(c.middlewares, handlers...)\n\tif err := c.router[\"GET\"].AddRouter(url, allHandlers); err != nil {\n\t\tlog.Fatal(\"add router error: \", err)\n\t}\n}\n\n</code></pre><p>到这里，我们使用 pipeline 思想对中间件的改造就完成了, 最终的UML类图如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/7f/ab/7f26e60d79ec987dba10a1b5045aa2ab.jpg?wh=1920x1277\" alt=\"\"></p><p>让我们简要回顾下改造过程。</p><p>第一步使用控制器链路，我们<strong>改造了node和Context两个数据结构</strong>。为node增加了handlers，存放这个路由注册的所有中间件；Context也增加了handlers，在Core.ServeHttp的函数中，创建Context结构，寻找到请求对应的路由节点，然后把路由节点的handlers数组，复制到Context中的handlers。</p><p>为了实现真正的链路调用，需要在框架的<strong>两个地方调用Context.Next() 方法</strong>，一个是启动业务逻辑的地方，一个是每个中间件的调用。</p><p>第二步如何注册控制器链路，我们<strong>改造了Group和Core两个数据结构，为它们增加了注册中间件的入口</strong>，一处是批量增加中间件函数Use，一处是在注册单个路由的Get / Post / Delete / Put方法中，为单个路由设置中间件。在设计入口的时候，我们使用了可变参数的设计，提高注册入口的可用性。</p><h2>基本的中间件: Recovery</h2><p>我们现在已经将中间件机制搭建并运行起来了， 但是具体需要实现哪些中间件呢？这要根据不同需求进行不同的研发，是个长期话题。</p><p>这里我们演示一个最基本的中间件：Recovery。</p><p>中间件那么多，比如超时中间件、统计中间件、日志中间件，为什么我说Recovery是最基本的呢？给出我的想法之前，你可以先思考这个问题：在编写业务核心逻辑的时候，如果出现了一个panic，而且在业务核心逻辑函数中未捕获处理，会发生什么？</p><p>我们还是基于第一节课讲的net/http的主流程逻辑来思考，关键结论有一点是，<strong>每个HTTP连接都会开启一个Goroutine为其服务</strong>，所以很明显， net/http 的进程模型是单进程、多协程。<img src=\"https://static001.geekbang.org/resource/image/0f/ee/0fa86b64b6d1b1e96560420243ec6aee.jpg?wh=1920x1133\" alt=\"\"></p><p>在Golang的这种模型中，每个协程是独立且平等的，即使是创建子协程的父协程，在Goroutine 中也无法管理子协程。所以，<strong>每个协程需要自己保证不会外抛panic</strong>，一旦外抛panic了，整个进程就认为出现异常，会终止进程。</p><p>这一点搞清楚了，再看Recovery为什么必备就很简单。在net/http处理业务逻辑的协程中，要捕获在自己这个协程中抛出的panic，就必须自己实现 Recovery 机制。</p><p>而Recovery中间件就是用来为每个协程增加Recovery机制的。我们在框架的middleware文件夹中增加recovery.go存放这个中间件：</p><pre><code class=\"language-go\">// recovery机制，将协程中的函数异常进行捕获\nfunc Recovery() framework.ControllerHandler {\n\t// 使用函数回调\n\treturn func(c *framework.Context) error {\n\t\t// 核心在增加这个recover机制，捕获c.Next()出现的panic\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tc.Json(500, err)\n\t\t\t}\n\t\t}()\n\t\t// 使用next执行具体的业务逻辑\n\t\tc.Next()\n\n\t\treturn nil\n\t}\n}\n</code></pre><p>这个中间件就是在context.Next() 之前设置了defer 函数，这个函数的作用就是捕获c.Next()中抛出的异常panic。之后在业务文件夹中的main.go，我们就可以通过Core结构的Use方法，对所有的路由都设置这个中间件。</p><pre><code class=\"language-go\">core.Use(middleware.Recovery())\n</code></pre><p>今天所有代码的目录结构截图，我也贴在这里供你对比检查，代码放在GitHub上的 <a href=\"https://github.com/gohade/coredemo/tree/geekbang/04/framework\">04分支</a>里。<br>\n<img src=\"https://static001.geekbang.org/resource/image/b8/yy/b8a053e4650ec9560754383d0f3974yy.png?wh=784x1274\" alt=\"\"></p><h2>小结</h2><p>今天我们最终为自己的框架增加了中间件机制。中间件机制的本质就是装饰器模型，对核心的逻辑函数进行装饰、封装，所以一开始我们就使用函数嵌套的方式实现了中间件机制。</p><p>但是实现之后，我们发现函数嵌套的弊端：一是不优雅，二是无法批量设置中间件。所以我们<strong>引入了pipeline的思想，将所有中间件做成一个链条，通过这个链条的调用，来实现中间件机制</strong>。</p><p>最后，我们选了最基础的Recovery中间件演示如何具体实现，一方面作为中间件机制的示例，另一方面，也在功能上为我们的框架增强了健壮性。</p><p>中间件机制是我们必须要掌握的机制，很多Web框架中都有这个逻辑。<strong>在架构层面，中间件机制就相当于，在每个请求的横切面统一注入了一个逻辑</strong>。这种统一处理的逻辑是非常有用的，比如统一打印日志、统一打点到统计系统、统一做权限登录验证等。</p><h2>思考题</h2><p>现在希望能对每个请求都进行请求时长统计，所以想写一个请求时长统计的中间件，在日志中输出请求 URI、请求耗时。不知道你如何实现呢？</p><p>欢迎在留言区分享你的思考。如果你觉得今天的内容对你有所帮助，也欢迎分享给你身边的朋友，邀请他一起学习～</p>","comments":[{"had_liked":false,"id":313503,"user_name":"skyhackvip","can_delete":false,"product_type":"c1","uid":1083561,"ip_address":"","ucode":"05C7784736C97A","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/a9/789fc9b0.jpg","comment_is_top":false,"comment_ctime":1632469357,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31697240429","product_id":100090601,"comment_content":"core.go代码中添加中间件有些问题吧？<br>func (c *Core) Use(middlewares ...ControllerHandler) { c.middlewares = middlewares}<br>是否应该改为<br>func (c *Core) Use(middlewares ...ControllerHandler) { c.middlewares = append(c.middlewares, middlewares...)}<br>否则添加多个下面的会覆盖上面的。","like_count":7,"discussions":[{"author":{"id":1001257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/29/425a2030.jpg","nickname":"Groot","note":"","ucode":"D3919AFA300C79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397358,"discussion_content":"使用 append 之后需要注意一下 slice 扩容的问题\n\n假如每次调用 core.Use 只添加一个 middleware，且共调用了 3 次\n此时 c.middlewares 的 len 是 3，cap 是 4\n\n如果后续只 append 一个业务 controller 之后就写入 node 的话，slice 是不会扩容的，这样就会导致所有的 node.handlers 底层都共用同一个数组，所有 node.handlers 中的最后一环都是同一个业务 controller，也就是最后一个注册的路由的 controller\n\n避免这个问题的一种解决方案是，在调用 Tree.AddRouter() 之前 copy 一下 handlers 这个 slice，这样就不再共享底层数组\n\n但不知道这个性能怎么样，还有其他什么好的方法吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632591204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2446470,"avatar":"","nickname":"Geek_8585e5","note":"","ucode":"CEB57327AA2E0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/29/425a2030.jpg","nickname":"Groot","note":"","ucode":"D3919AFA300C79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581844,"discussion_content":"我理解即使多個node共用中间件也没啥问题吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659020529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397358,"ip_address":"陕西"},"score":581844,"extra":""}]}]},{"had_liked":false,"id":312914,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1632120184,"is_pvip":true,"replies":[{"id":"113609","content":"1 是的，中间件注册有顺序，所以recovery是需要放在第一个。<br>2 这个是可以考虑，但是分成两个函数和现在用一个函数区别就是有的变量是没有办法写到两个函数中的，参数传递比较麻烦，比如我要打印请求时长，有一个变量，start_time, 需要在preRequest中写，postRequest中读，现在的方式就比较简单。分成两个函数就需要在postRequest中用参数传递之类的。<br>preRequest() ctxParam<br>postRequest(ctxParam)<br><br>3 注释来表示装饰器，然后运行的时候读取注释来按需加载。这种方式也是行的，就是具体实现的时候需要读取“注释”来映射中间件，这里存在一个反射的逻辑，可能会降低效率。所以在golang中这种实现不多见。","user_name":"作者回复","comment_id":312914,"uid":"1069186","ip_address":"","utype":1,"ctime":1632622908,"user_name_real":"叶剑峰"}],"discussion_count":4,"race_medal":0,"score":"23106956664","product_id":100090601,"comment_content":"想到几个点：<br><br>* 中间件的注册是有顺序的。比如最后才注册Recovery的话，pipeline中在Recovery前面的中间件如果panic了还是没法recover的<br>* 中间件需要显式调用ctx.Next()，如果写中间件时忘记了的话pipeline就断了。或许可以把中间件进一步拆成preRequest()和postRequest()两部分<br>* 中间件本质是装饰器模式，如果能像Java&#47;Python里那样写装饰器标注的话可能意图更明显","like_count":5,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535093,"discussion_content":"个人感觉 写中间件的时候忘记 Next这个算是程序员自己的锅","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638350420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527158,"discussion_content":"1 是的，中间件注册有顺序，所以recovery是需要放在第一个。\n2 这个是可以考虑，但是分成两个函数和现在用一个函数区别就是有的变量是没有办法写到两个函数中的，参数传递比较麻烦，比如我要打印请求时长，有一个变量，start_time, 需要在preRequest中写，postRequest中读，现在的方式就比较简单。分成两个函数就需要在postRequest中用参数传递之类的。\npreRequest() ctxParam\npostRequest(ctxParam)\n\n3 注释来表示装饰器，然后运行的时候读取注释来按需加载。这种方式也是行的，就是具体实现的时候需要读取“注释”来映射中间件，这里存在一个反射的逻辑，可能会降低效率。所以在golang中这种实现不多见。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632622908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107540,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/54/86056001.jpg","nickname":"小马🐎","note":"","ucode":"8CA466A4004BDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589138,"discussion_content":"对的 一般框架都会有 pre和after的，没毛病 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664441651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398776,"discussion_content":"2的话，一个中间件就是一个struct，状态可以被struct中的方法共享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632841437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312891,"user_name":"liyanfeng","can_delete":false,"product_type":"c1","uid":1195376,"ip_address":"","ucode":"C8CC37F4CC02AE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3d/70/a2202898.jpg","comment_is_top":false,"comment_ctime":1632107450,"is_pvip":false,"replies":[{"id":"113508","content":"可用工具很多，draw.io 金山文档都能用","user_name":"作者回复","comment_id":312891,"uid":"2547771","ip_address":"","utype":1,"ctime":1632414857,"user_name_real":"多少"}],"discussion_count":1,"race_medal":0,"score":"14517009338","product_id":100090601,"comment_content":"请教一下老师的UML图是用哪个软件画的哈？","like_count":3,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527149,"discussion_content":"可用工具很多，draw.io 金山文档都能用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632414857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334346,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1644895479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10234830071","product_id":100090601,"comment_content":"日常使用的web框架，中间件是基本功能之一，通过自己实现一遍，明白其中的原理，加深印象，不错","like_count":2},{"had_liked":false,"id":328702,"user_name":"answer宫","can_delete":false,"product_type":"c1","uid":1114020,"ip_address":"","ucode":"54CA51DE2BE829","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/a4/55520286.jpg","comment_is_top":false,"comment_ctime":1640848392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10230782984","product_id":100090601,"comment_content":"看一遍有点晕,要多读几遍了,课程不错,是我的盲点","like_count":2},{"had_liked":false,"id":324267,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638351621,"is_pvip":false,"replies":[{"id":"118679","content":"之前确实是有问题的，已经修改过来了","user_name":"作者回复","comment_id":324267,"uid":"1069186","ip_address":"","utype":1,"ctime":1639619492,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10228286213","product_id":100090601,"comment_content":"我看大家都说 allHandlers := append(c.middlewares, handlers...) 的写法有问题。其实没问题 <br>因为每次扩容的时候 并没有赋值回去 即 :c.middwares  := append(c.middlewares, handlers...)<br>所以每次都是拿未扩容的数组来 并不会出现覆盖的情况 <br>","like_count":2,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539134,"discussion_content":"之前确实是有问题的，已经修改过来了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639619492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319802,"user_name":"Geek_8de965","can_delete":false,"product_type":"c1","uid":2831170,"ip_address":"","ucode":"75880FD1790C37","user_header":"","comment_is_top":false,"comment_ctime":1635949080,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10225883672","product_id":100090601,"comment_content":"自己写后碰到两个问题：<br>1.超时时间设置为2s，业务里也Sleep两秒，出现两个协程都访问了c.JSON，程序崩溃，在timeout那边加了c.WriterMux().Lock()好像没有作用<br>2.主协程通过setHasTimeout设置超时标记后，业务的那个协程还是读到的false,导致time out 和 ok 都输出了。<br><br>才学俩周Go,有说得不对的地方见谅","like_count":2,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535096,"discussion_content":"崩溃的错误信息是什么 可以看看嘛 如果加了锁也不行证明不是用的一个锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638350681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312890,"user_name":"liyanfeng","can_delete":false,"product_type":"c1","uid":1195376,"ip_address":"","ucode":"C8CC37F4CC02AE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3d/70/a2202898.jpg","comment_is_top":false,"comment_ctime":1632107360,"is_pvip":false,"replies":[{"id":"113507","content":"感谢支持，希望能帮助到你","user_name":"作者回复","comment_id":312890,"uid":"2547771","ip_address":"","utype":1,"ctime":1632414798,"user_name_real":"多少"}],"discussion_count":1,"race_medal":0,"score":"10222041952","product_id":100090601,"comment_content":"这么好的课，大家快来买😄，熟悉加意外的感觉，真好","like_count":2,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527148,"discussion_content":"感谢支持，希望能帮助到你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632414798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326160,"user_name":"那些年","can_delete":false,"product_type":"c1","uid":2786613,"ip_address":"","ucode":"849A9929601B2A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/85/35/0cfa2b84.jpg","comment_is_top":false,"comment_ctime":1639400758,"is_pvip":false,"replies":[{"id":"118643","content":"感谢！","user_name":"作者回复","comment_id":326160,"uid":"1069186","ip_address":"","utype":1,"ctime":1639584271,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5934368054","product_id":100090601,"comment_content":"支持！","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539067,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639584271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359913,"user_name":"Tal.Huang","can_delete":false,"product_type":"c1","uid":1070729,"ip_address":"广东","ucode":"9486C855060FAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/89/30c2f416.jpg","comment_is_top":false,"comment_ctime":1666058190,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666058190","product_id":100090601,"comment_content":"老师好，关于在core中存储middlewares<br>&#47;&#47; 注册中间件<br>func (c *Core) Use(middlewares ...ControllerHandler) {<br>\tfmt.Println(&quot;Core Use&quot;)<br>\tc.middlewares = append(c.middlewares, middlewares...)<br>\tfmt.Println(c.middlewares)<br>}<br><br>打印发现并没有使用到这个方法？<br>Group Use<br>core Get<br>core Get<br>middleware pre test3<br>middleware pre test3<br>middleware post test3<br>middleware post test3<br><br>不知道是什么原因？","like_count":0},{"had_liked":false,"id":358285,"user_name":"jayqiyoung","can_delete":false,"product_type":"c1","uid":3010811,"ip_address":"","ucode":"344AC280A3DBED","user_header":"","comment_is_top":false,"comment_ctime":1664171556,"is_pvip":false,"replies":[{"id":"130382","content":"后面有篇加餐，统一整理了一些作业题的思路，你可以看看～","user_name":"编辑回复","comment_id":358285,"uid":"2547771","ip_address":"","utype":2,"ctime":1664184467,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1664171556","product_id":100090601,"comment_content":"如果每一节课后面的提问，下一节能够给些解答就好了<br>","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588862,"discussion_content":"后面有篇加餐，统一整理了一些作业题的思路，你可以看看～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664184467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357496,"user_name":"airmy丶","can_delete":false,"product_type":"c1","uid":1299673,"ip_address":"广东","ucode":"41959C9F5B4B65","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/d9/c3296187.jpg","comment_is_top":false,"comment_ctime":1663313601,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663313601","product_id":100090601,"comment_content":"一遍跟着思路写代码，一遍看gin的源码，感觉这个课程不止在教你写框架，更是在带你阅读gin的源码","like_count":0},{"had_liked":false,"id":337007,"user_name":"Geek_065895","can_delete":false,"product_type":"c1","uid":2136069,"ip_address":"","ucode":"2E6FCCC78E5767","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rxz5aKicRkvqWmt6c6c7eayHvh577uibBTVQzcJKwSTqI9FaxZSRlx7NRVw4atWpqER8ncA5jErQb3wb4cPzZxlA/132","comment_is_top":false,"comment_ctime":1646547498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646547498","product_id":100090601,"comment_content":"请求时长统计的中间件实现：<br>func RecordRequsstTime() framework.ControllerHandler {<br>\t&#47;&#47; 使用函数回调<br>\treturn func(c *framework.Context) error {<br>\t\t&#47;&#47; 获取开始时间<br>\t\tstartT := time.Now()<br>\t\t&#47;&#47; 输出请求URI<br>\t\t<br>\t\t&#47;&#47; 执行其他中间件和函数处理<br>\t\tc.Next()<br>\t\t&#47;&#47; 获取处理时长<br>\t\ttc := time.Since(startT)<br>\t\tlog.Println(tc)<br>\t\treturn nil<br>\t}<br>}","like_count":0},{"had_liked":false,"id":327380,"user_name":"我在睡觉","can_delete":false,"product_type":"c1","uid":2179383,"ip_address":"","ucode":"6503B611151D3C","user_header":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","comment_is_top":false,"comment_ctime":1640090787,"is_pvip":false,"replies":[{"id":"119249","content":"这个主要是使用上的方便，链式方式。<br><br>我可以多层嵌套group","user_name":"作者回复","comment_id":327380,"uid":"1069186","ip_address":"","utype":1,"ctime":1640221658,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1640090787","product_id":100090601,"comment_content":"提一个问题，这里面 gourp机构题里面封装一个Group类型的parent链表有什么用意，我不需要这个parent字段也完全实现了同样的功能。","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540948,"discussion_content":"这个主要是使用上的方便，链式方式。\n\n我可以多层嵌套group","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640221658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2179383,"avatar":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","nickname":"我在睡觉","note":"","ucode":"6503B611151D3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540604,"discussion_content":"gourp机构题 -&gt; group结构体 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640092644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326330,"user_name":"我在睡觉","can_delete":false,"product_type":"c1","uid":2179383,"ip_address":"","ucode":"6503B611151D3C","user_header":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","comment_is_top":false,"comment_ctime":1639472386,"is_pvip":false,"replies":[{"id":"118639","content":"是这样的，这样设置的话，你可以在Test1的参数中带任何参数，然后在具体的ControllerHandler中使用这些参数，而如果你的Test1是ControllerHandler的话，参数就已经被固定了，后续扩展性就不是很好<br>","user_name":"作者回复","comment_id":326330,"uid":"1069186","ip_address":"","utype":1,"ctime":1639584077,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1639472386","product_id":100090601,"comment_content":"core.Use( middleware.Test1()）<br>老师你好。问一个问题， 为什么此处的Test1一定要定义成返回ControllerHandler匿名函数的函数，我实际直接把Test1定义成ControllerHandler类型的的函数执行起来也没有任何问题。","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539061,"discussion_content":"是这样的，这样设置的话，你可以在Test1的参数中带任何参数，然后在具体的ControllerHandler中使用这些参数，而如果你的Test1是ControllerHandler的话，参数就已经被固定了，后续扩展性就不是很好\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639584077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2179383,"avatar":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","nickname":"我在睡觉","note":"","ucode":"6503B611151D3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":539257,"discussion_content":"明白，也就是为以后利用函数的闭包特性预先准备着呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639649061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539061,"ip_address":""},"score":539257,"extra":""},{"author":{"id":1471109,"avatar":"https://static001.geekbang.org/account/avatar/00/16/72/85/c337e9a1.jpg","nickname":"老兵","note":"","ucode":"F004F8EC90E5B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":551955,"discussion_content":"请教叶老师，比如Timeout函数中的 d time.Duration如何可以在具体的ControllerHandler中获得呢？ 传到ctx中？ 还是再ctx.Next()调用时传入呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645187948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539061,"ip_address":""},"score":551955,"extra":""}]}]},{"had_liked":false,"id":324271,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638352430,"is_pvip":false,"replies":[{"id":"118680","content":"1 确实这里更严谨的写法是在所有中间件的c.Next() 都处理error<br>2 使用锁保证 responseWriter 只写一次肯定是可以的，但是我觉得这种只限制写一次反而也会有问题，会不会有场景有的控制器写内容，有的中间件写header头这种。这种限制可以加，但是加的时候估计要思考很清楚","user_name":"作者回复","comment_id":324271,"uid":"1069186","ip_address":"","utype":1,"ctime":1639619818,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638352430","product_id":100090601,"comment_content":"老师请问  c.Next是可以捕获error的 在整个链路中如果一处地方抛出了error  但是在最顶层 ServeHTTP中的那个next如果返回nil 那么整条链路中的error会被忽略掉<br>我们只在 timeout中加入了 锁这个概念 其实这个其实这个应该可以抽出来 统一加上不允许重复写responseWriter<br>","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539135,"discussion_content":"1 确实这里更严谨的写法是在所有中间件的c.Next() 都处理error\n2 使用锁保证 responseWriter 只写一次肯定是可以的，但是我觉得这种只限制写一次反而也会有问题，会不会有场景有的控制器写内容，有的中间件写header头这种。这种限制可以加，但是加的时候估计要思考很清楚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639619818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324045,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638270580,"is_pvip":false,"replies":[{"id":"119255","content":"～～","user_name":"作者回复","comment_id":324045,"uid":"1069186","ip_address":"","utype":1,"ctime":1640222902,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638270580","product_id":100090601,"comment_content":"还没开始看 ，但是记得context章节 把超时控制到写在了controller中 都得监听 貌似这章会优化 明天再战 休息一下","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540960,"discussion_content":"～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640222902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320835,"user_name":"void","can_delete":false,"product_type":"c1","uid":1145429,"ip_address":"","ucode":"502ED161F271B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/55/2f4055f6.jpg","comment_is_top":false,"comment_ctime":1636526910,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636526910","product_id":100090601,"comment_content":"core.Get方法里的<br>allHandlers := append(c.middlewares, handlers...)<br>是不对的，应当复制一份c.middlewares。切片底层共享数组空间，多次调用Get方法会有后边的handler覆盖前面handler的情况。比如:<br>core.Use(middleware.Test1(), middleware.Test2()) &#47;&#47; 此时c.middlewares len 2  cap 2<br>core.Get(&quot;&#47;user&#47;aa&quot;, SubjectDelController) &#47;&#47; c.middlewares len 3  cap 4<br>core.Get(&quot;&#47;user&#47;bb&quot;, UserLoginController) &#47;&#47; c.middlewares len 3  cap 4 这里会把c.middlewares[2]覆盖，导致这两个路由都指向了UserLoginController","like_count":0,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535099,"discussion_content":"第一次扩容并没有把middleware 赋值回去  所以每次都是未扩容的middleware","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638351552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314838,"user_name":"www","can_delete":false,"product_type":"c1","uid":1898338,"ip_address":"","ucode":"ADC9BC655EA16C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f7/62/947004d0.jpg","comment_is_top":false,"comment_ctime":1633492389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633492389","product_id":100090601,"comment_content":"中间件原来是这么实现的，了然了然，造一遍轮子还是最快的学习方法","like_count":0},{"had_liked":false,"id":313362,"user_name":"Groot","can_delete":false,"product_type":"c1","uid":1001257,"ip_address":"","ucode":"D3919AFA300C79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/29/425a2030.jpg","comment_is_top":false,"comment_ctime":1632390056,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1632390056","product_id":100090601,"comment_content":"Use 注册中间件是不是应该用 append() 追加 middlewares，否则只有最后一次调用才能注册上","like_count":0,"discussions":[{"author":{"id":1001257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/29/425a2030.jpg","nickname":"Groot","note":"","ucode":"D3919AFA300C79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397357,"discussion_content":"使用 append 之后需要注意一下 slice 扩容的问题\n\n假如每次调用 core.Use 只添加一个 middleware，且共调用了 3 次\n此时 c.middlewares 的 len 是 3，cap 是 4\n\n如果后续只 append 一个业务 controller 之后就写入 node 的话，slice 是不会扩容的，这样就会导致所有的 node.handlers 底层都共用同一个数组，所有 node.handlers 中的最后一环都是同一个业务 controller，也就是最后一个注册的路由的 controller\n\n避免这个问题的一种解决方案是，在调用 Tree.AddRouter() 之前 copy 一下 handlers 这个 slice，这样就不再共享底层数组\n\n但不知道这个性能怎么样，还有其他什么好的方法吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1632591187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1718011,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/36/fb/b480f2ac.jpg","nickname":"人间理想","note":"","ucode":"0D6A4C402D7CBD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/29/425a2030.jpg","nickname":"Groot","note":"","ucode":"D3919AFA300C79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575606,"discussion_content":"确实会出现这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654948781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397357,"ip_address":""},"score":575606,"extra":""}]}]}]}