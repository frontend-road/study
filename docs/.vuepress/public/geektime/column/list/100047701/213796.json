{"id":213796,"title":"09 | 数值计算：注意精度、舍入和溢出问题","content":"<p>你好，我是朱晔。今天，我要和你说说数值计算的精度、舍入和溢出问题。</p><p>之所以要单独分享数值计算，是因为很多时候我们习惯的或者说认为理所当然的计算，在计算器或计算机看来并不是那么回事儿。就比如前段时间爆出的一条新闻，说是手机计算器把10%+10%算成了0.11而不是0.2。</p><p>出现这种问题的原因在于，国外的计算程序使用的是单步计算法。在单步计算法中，a+b%代表的是a*(1+b%)。所以，手机计算器计算10%+10%时，其实计算的是10%*（1+10%），所以得到的是0.11而不是0.2。</p><p>在我看来，计算器或计算机会得到反直觉的计算结果的原因，可以归结为：</p><ul>\n<li>在人看来，浮点数只是具有小数点的数字，0.1和1都是一样精确的数字。但，计算机其实无法精确保存浮点数，因此浮点数的计算结果也不可能精确。</li>\n<li>在人看来，一个超大的数字只是位数多一点而已，多写几个1并不会让大脑死机。但，计算机是把数值保存在了变量中，不同类型的数值变量能保存的数值范围不同，当数值超过类型能表达的数值上限则会发生溢出问题。</li>\n</ul><p>接下来，我们就具体看看这些问题吧。</p><h2>“危险”的Double</h2><p>我们先从简单的反直觉的四则运算看起。对几个简单的浮点数进行加减乘除运算：</p><!-- [[[read_end]]] --><pre><code>System.out.println(0.1+0.2);\nSystem.out.println(1.0-0.8);\nSystem.out.println(4.015*100);\nSystem.out.println(123.3/100);\n\ndouble amount1 = 2.15;\ndouble amount2 = 1.10;\nif (amount1 - amount2 == 1.05)\n    System.out.println(&quot;OK&quot;);\n</code></pre><p>输出结果如下：</p><pre><code>0.30000000000000004\n0.19999999999999996\n401.49999999999994\n1.2329999999999999\n</code></pre><p>可以看到，输出结果和我们预期的很不一样。比如，0.1+0.2输出的不是0.3而是0.30000000000000004；再比如，对2.15-1.10和1.05判等，结果判等不成立。</p><p>出现这种问题的主要原因是，计算机是以二进制存储数值的，浮点数也不例外。Java采用了<a href=\"https://en.wikipedia.org/wiki/IEEE_754\">IEEE 754标准</a>实现浮点数的表达和运算，你可以通过<a href=\"http://www.binaryconvert.com/\">这里</a>查看数值转化为二进制的结果。</p><p>比如，0.1的二进制表示为0.0 0011 0011 0011… （0011 无限循环)，再转换为十进制就是0.1000000000000000055511151231257827021181583404541015625。<strong>对于计算机而言，0.1无法精确表达，这是浮点数计算造成精度损失的根源。</strong></p><p>你可能会说，以0.1为例，其十进制和二进制间转换后相差非常小，不会对计算产生什么影响。但，所谓积土成山，如果大量使用double来作大量的金钱计算，最终损失的精度就是大量的资金出入。比如，每天有一百万次交易，每次交易都差一分钱，一个月下来就差30万。这就不是小事儿了。那，如何解决这个问题呢？</p><p>我们大都听说过BigDecimal类型，浮点数精确表达和运算的场景，一定要使用这个类型。不过，在使用BigDecimal时有几个坑需要避开。我们用BigDecimal把之前的四则运算改一下：</p><pre><code>System.out.println(new BigDecimal(0.1).add(new BigDecimal(0.2)));\nSystem.out.println(new BigDecimal(1.0).subtract(new BigDecimal(0.8)));\nSystem.out.println(new BigDecimal(4.015).multiply(new BigDecimal(100)));\nSystem.out.println(new BigDecimal(123.3).divide(new BigDecimal(100)));\n</code></pre><p>输出如下：</p><pre><code>0.3000000000000000166533453693773481063544750213623046875\n0.1999999999999999555910790149937383830547332763671875\n401.49999999999996802557689079549163579940795898437500\n1.232999999999999971578290569595992565155029296875\n</code></pre><p>可以看到，运算结果还是不精确，只不过是精度高了而已。这里给出浮点数运算避坑第一原则：<strong>使用BigDecimal表示和计算浮点数，且务必使用字符串的构造方法来初始化BigDecimal</strong>：</p><pre><code>System.out.println(new BigDecimal(&quot;0.1&quot;).add(new BigDecimal(&quot;0.2&quot;)));\nSystem.out.println(new BigDecimal(&quot;1.0&quot;).subtract(new BigDecimal(&quot;0.8&quot;)));\nSystem.out.println(new BigDecimal(&quot;4.015&quot;).multiply(new BigDecimal(&quot;100&quot;)));\nSystem.out.println(new BigDecimal(&quot;123.3&quot;).divide(new BigDecimal(&quot;100&quot;)));\n</code></pre><p>改进后，就能得到我们想要的输出了：</p><pre><code>0.3\n0.2\n401.500\n1.233\n</code></pre><p>到这里，你可能会继续问，不能调用BigDecimal传入Double的构造方法，但手头只有一个Double，如何转换为精确表达的BigDecimal呢？</p><p>我们试试用Double.toString把double转换为字符串，看看行不行？</p><pre><code>System.out.println(new BigDecimal(&quot;4.015&quot;).multiply(new BigDecimal(Double.toString(100))));\n</code></pre><p>输出为401.5000。与上面字符串初始化100和4.015相乘得到的结果401.500相比，这里为什么多了1个0呢？原因就是，BigDecimal有scale和precision的概念，scale表示小数点右边的位数，而precision表示精度，也就是有效数字的长度。</p><p>调试一下可以发现，new BigDecimal(Double.toString(100))得到的BigDecimal的scale=1、precision=4；而new BigDecimal(“100”)得到的BigDecimal的scale=0、precision=3。对于BigDecimal乘法操作，返回值的scale是两个数的scale相加。所以，初始化100的两种不同方式，导致最后结果的scale分别是4和3：</p><pre><code>private static void testScale() {\n    BigDecimal bigDecimal1 = new BigDecimal(&quot;100&quot;);\n    BigDecimal bigDecimal2 = new BigDecimal(String.valueOf(100d));\n    BigDecimal bigDecimal3 = new BigDecimal(String.valueOf(100));\n    BigDecimal bigDecimal4 = BigDecimal.valueOf(100d);\n    BigDecimal bigDecimal5 = new BigDecimal(Double.toString(100));\n\n    print(bigDecimal1); //scale 0 precision 3 result 401.500\n    print(bigDecimal2); //scale 1 precision 4 result 401.5000\n    print(bigDecimal3); //scale 0 precision 3 result 401.500\n    print(bigDecimal4); //scale 1 precision 4 result 401.5000\n    print(bigDecimal5); //scale 1 precision 4 result 401.5000\n}\n\nprivate static void print(BigDecimal bigDecimal) {\n    log.info(&quot;scale {} precision {} result {}&quot;, bigDecimal.scale(), bigDecimal.precision(), bigDecimal.multiply(new BigDecimal(&quot;4.015&quot;)));\n}\n</code></pre><p>BigDecimal的toString方法得到的字符串和scale相关，又会引出了另一个问题：对于浮点数的字符串形式输出和格式化，我们应该考虑显式进行，通过格式化表达式或格式化工具来明确小数位数和舍入方式。接下来，我们就聊聊浮点数舍入和格式化。</p><h2>考虑浮点数舍入和格式化的方式</h2><p>除了使用Double保存浮点数可能带来精度问题外，更匪夷所思的是这种精度问题，加上String.format的格式化舍入方式，可能得到让人摸不着头脑的结果。</p><p>我们看一个例子吧。首先用double和float初始化两个3.35的浮点数，然后通过String.format使用%.1f来格式化这2个数字：</p><pre><code>double num1 = 3.35;\nfloat num2 = 3.35f;\nSystem.out.println(String.format(&quot;%.1f&quot;, num1));//四舍五入\nSystem.out.println(String.format(&quot;%.1f&quot;, num2));\n</code></pre><p>得到的结果居然是3.4和3.3。</p><p>这就是由精度问题和舍入方式共同导致的，double和float的3.35其实相当于3.350xxx和3.349xxx：</p><pre><code>3.350000000000000088817841970012523233890533447265625\n3.349999904632568359375\n</code></pre><p>String.format采用四舍五入的方式进行舍入，取1位小数，double的3.350四舍五入为3.4，而float的3.349四舍五入为3.3。</p><p><strong>我们看一下Formatter类的相关源码，可以发现使用的舍入模式是HALF_UP</strong>（代码第11行）：</p><pre><code>else if (c == Conversion.DECIMAL_FLOAT) {\n    // Create a new BigDecimal with the desired precision.\n    int prec = (precision == -1 ? 6 : precision);\n    int scale = value.scale();\n\n    if (scale &gt; prec) {\n        // more &quot;scale&quot; digits than the requested &quot;precision&quot;\n        int compPrec = value.precision();\n        if (compPrec &lt;= scale) {\n            // case of 0.xxxxxx\n            value = value.setScale(prec, RoundingMode.HALF_UP);\n        } else {\n            compPrec -= (scale - prec);\n            value = new BigDecimal(value.unscaledValue(),\n                                   scale,\n                                   new MathContext(compPrec));\n        }\n    }\n</code></pre><p>如果我们希望使用其他舍入方式来格式化字符串的话，可以设置DecimalFormat，如下代码所示：</p><pre><code>double num1 = 3.35;\nfloat num2 = 3.35f;\nDecimalFormat format = new DecimalFormat(&quot;#.##&quot;);\nformat.setRoundingMode(RoundingMode.DOWN);\nSystem.out.println(format.format(num1));\nformat.setRoundingMode(RoundingMode.DOWN);\nSystem.out.println(format.format(num2));\n</code></pre><p>当我们把这2个浮点数向下舍入取2位小数时，输出分别是3.35和3.34，还是我们之前说的浮点数无法精确存储的问题。</p><p>因此，即使通过DecimalFormat来精确控制舍入方式，double和float的问题也可能产生意想不到的结果，所以浮点数避坑第二原则：<strong>浮点数的字符串格式化也要通过BigDecimal进行。</strong></p><p>比如下面这段代码，使用BigDecimal来格式化数字3.35，分别使用向下舍入和四舍五入方式取1位小数进行格式化：</p><pre><code>BigDecimal num1 = new BigDecimal(&quot;3.35&quot;);\nBigDecimal num2 = num1.setScale(1, BigDecimal.ROUND_DOWN);\nSystem.out.println(num2);\nBigDecimal num3 = num1.setScale(1, BigDecimal.ROUND_HALF_UP);\nSystem.out.println(num3);\n</code></pre><p>这次得到的结果是3.3和3.4，符合预期。</p><h2>用equals做判等，就一定是对的吗？</h2><p>现在我们知道了，应该使用BigDecimal来进行浮点数的表示、计算、格式化。在上一讲介绍<a href=\"https://time.geekbang.org/column/article/213604\">判等问题</a>时，我提到一个原则：包装类的比较要通过equals进行，而不能使用==。那么，使用equals方法对两个BigDecimal判等，一定能得到我们想要的结果吗？</p><p>我们来看下面的例子。使用equals方法比较1.0和1这两个BigDecimal：</p><pre><code>System.out.println(new BigDecimal(&quot;1.0&quot;).equals(new BigDecimal(&quot;1&quot;)))\n</code></pre><p>你可能已经猜到我要说什么了，结果当然是false。BigDecimal的equals方法的注释中说明了原因，equals比较的是BigDecimal的value和scale，1.0的scale是1，1的scale是0，所以结果一定是false：</p><pre><code>/**\n * Compares this {@code BigDecimal} with the specified\n * {@code Object} for equality.  Unlike {@link\n * #compareTo(BigDecimal) compareTo}, this method considers two\n * {@code BigDecimal} objects equal only if they are equal in\n * value and scale (thus 2.0 is not equal to 2.00 when compared by\n * this method).\n *\n * @param  x {@code Object} to which this {@code BigDecimal} is\n *         to be compared.\n * @return {@code true} if and only if the specified {@code Object} is a\n *         {@code BigDecimal} whose value and scale are equal to this\n *         {@code BigDecimal}'s.\n * @see    #compareTo(java.math.BigDecimal)\n * @see    #hashCode\n */\n@Override\npublic boolean equals(Object x)\n</code></pre><p><strong>如果我们希望只比较BigDecimal的value，可以使用compareTo方法</strong>，修改后代码如下：</p><pre><code>System.out.println(new BigDecimal(&quot;1.0&quot;).compareTo(new BigDecimal(&quot;1&quot;))==0);\n</code></pre><p>学过上一讲，你可能会意识到BigDecimal的equals和hashCode方法会同时考虑value和scale，如果结合HashSet或HashMap使用的话就可能会出现麻烦。比如，我们把值为1.0的BigDecimal加入HashSet，然后判断其是否存在值为1的BigDecimal，得到的结果是false：</p><pre><code>Set&lt;BigDecimal&gt; hashSet1 = new HashSet&lt;&gt;();\nhashSet1.add(new BigDecimal(&quot;1.0&quot;));\nSystem.out.println(hashSet1.contains(new BigDecimal(&quot;1&quot;)));//返回false\n</code></pre><p>解决这个问题的办法有两个：</p><ul>\n<li>第一个方法是，使用TreeSet替换HashSet。TreeSet不使用hashCode方法，也不使用equals比较元素，而是使用compareTo方法，所以不会有问题。</li>\n</ul><pre><code>Set&lt;BigDecimal&gt; treeSet = new TreeSet&lt;&gt;();\ntreeSet.add(new BigDecimal(&quot;1.0&quot;));\nSystem.out.println(treeSet.contains(new BigDecimal(&quot;1&quot;)));//返回true\n</code></pre><ul>\n<li>第二个方法是，把BigDecimal存入HashSet或HashMap前，先使用stripTrailingZeros方法去掉尾部的零，比较的时候也去掉尾部的0，确保value相同的BigDecimal，scale也是一致的：</li>\n</ul><pre><code>Set&lt;BigDecimal&gt; hashSet2 = new HashSet&lt;&gt;();\nhashSet2.add(new BigDecimal(&quot;1.0&quot;).stripTrailingZeros());\nSystem.out.println(hashSet2.contains(new BigDecimal(&quot;1.000&quot;).stripTrailingZeros()));//返回true\n</code></pre><h2>小心数值溢出问题</h2><p>数值计算还有一个要小心的点是溢出，不管是int还是long，所有的基本数值类型都有超出表达范围的可能性。</p><p>比如，对Long的最大值进行+1操作：</p><pre><code>long l = Long.MAX_VALUE;\nSystem.out.println(l + 1);\nSystem.out.println(l + 1 == Long.MIN_VALUE);\n</code></pre><p>输出结果是一个负数，因为Long的最大值+1变为了Long的最小值：</p><pre><code>-9223372036854775808\ntrue\n</code></pre><p><strong>显然这是发生了溢出，而且是默默地溢出，并没有任何异常</strong>。这类问题非常容易被忽略，改进方式有下面2种。</p><p>方法一是，考虑使用Math类的addExact、subtractExact等xxExact方法进行数值运算，这些方法可以在数值溢出时主动抛出异常。我们来测试一下，使用Math.addExact对Long最大值做+1操作：</p><pre><code>try {\n    long l = Long.MAX_VALUE;\n    System.out.println(Math.addExact(l, 1));\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\n</code></pre><p>执行后，可以得到ArithmeticException，这是一个RuntimeException：</p><pre><code>java.lang.ArithmeticException: long overflow\n\tat java.lang.Math.addExact(Math.java:809)\n\tat org.geekbang.time.commonmistakes.numeralcalculations.demo3.CommonMistakesApplication.right2(CommonMistakesApplication.java:25)\n\tat org.geekbang.time.commonmistakes.numeralcalculations.demo3.CommonMistakesApplication.main(CommonMistakesApplication.java:13)\n</code></pre><p>方法二是，使用大数类BigInteger。BigDecimal是处理浮点数的专家，而BigInteger则是对大数进行科学计算的专家。</p><p>如下代码，使用BigInteger对Long最大值进行+1操作；如果希望把计算结果转换一个Long变量的话，可以使用BigInteger的longValueExact方法，在转换出现溢出时，同样会抛出ArithmeticException：</p><pre><code>BigInteger i = new BigInteger(String.valueOf(Long.MAX_VALUE));\nSystem.out.println(i.add(BigInteger.ONE).toString());\n\ntry {\n    long l = i.add(BigInteger.ONE).longValueExact();\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\n</code></pre><p>输出结果如下：</p><pre><code>9223372036854775808\njava.lang.ArithmeticException: BigInteger out of long range\n\tat java.math.BigInteger.longValueExact(BigInteger.java:4632)\n\tat org.geekbang.time.commonmistakes.numeralcalculations.demo3.CommonMistakesApplication.right1(CommonMistakesApplication.java:37)\n\tat org.geekbang.time.commonmistakes.numeralcalculations.demo3.CommonMistakesApplication.main(CommonMistakesApplication.java:11)\n</code></pre><p>可以看到，通过BigInteger对Long的最大值加1一点问题都没有，当尝试把结果转换为Long类型时，则会提示BigInteger out of long range。</p><h2>重点回顾</h2><p>今天，我与你分享了浮点数的表示、计算、舍入和格式化、溢出等涉及的一些坑。</p><p>第一，切记，要精确表示浮点数应该使用BigDecimal。并且，使用BigDecimal的Double入参的构造方法同样存在精度丢失问题，应该使用String入参的构造方法或者BigDecimal.valueOf方法来初始化。</p><p>第二，对浮点数做精确计算，参与计算的各种数值应该始终使用BigDecimal，所有的计算都要通过BigDecimal的方法进行，切勿只是让BigDecimal来走过场。任何一个环节出现精度损失，最后的计算结果可能都会出现误差。</p><p>第三，对于浮点数的格式化，如果使用String.format的话，需要认识到它使用的是四舍五入，可以考虑使用DecimalFormat来明确指定舍入方式。但考虑到精度问题，我更建议使用BigDecimal来表示浮点数，并使用其setScale方法指定舍入的位数和方式。</p><p>第四，进行数值运算时要小心溢出问题，虽然溢出后不会出现异常，但得到的计算结果是完全错误的。我们考虑使用Math.xxxExact方法来进行运算，在溢出时能抛出异常，更建议对于可能会出现溢出的大数运算使用BigInteger类。</p><p>总之，对于金融、科学计算等场景，请尽可能使用BigDecimal和BigInteger，避免由精度和溢出问题引发难以发现，但影响重大的Bug。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html\">BigDecimal</a>提供了8种舍入模式，你能通过一些例子说说它们的区别吗？</li>\n<li>数据库（比如MySQL）中的浮点数和整型数字，你知道应该怎样定义吗？又如何实现浮点数的准确计算呢？</li>\n</ol><p>针对数值运算，你还遇到过什么坑吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>","neighbors":{"left":{"article_title":"08 | 判等问题：程序里如何确定你就是你？","id":213604},"right":{"article_title":"10 | 集合类：坑满地的List列表操作","id":216778}},"comments":[{"had_liked":false,"id":197093,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1585357746,"is_pvip":true,"replies":[{"id":"74525","content":"👍🏻","user_name":"作者回复","comment_id":197093,"uid":"1001470","ip_address":"","utype":1,"ctime":1585362960,"user_name_real":"朱晔"}],"discussion_count":9,"race_medal":0,"score":"259283395506","product_id":100047701,"comment_content":"精度问题遇到的比较少，可能与从事非金融行业有关系，试着回答下问题<br>第一种问题<br>1、 ROUND_UP <br>舍入远离零的舍入模式。 <br>在丢弃非零部分之前始终增加数字（始终对非零舍弃部分前面的数字加1）。 <br>注意，此舍入模式始终不会减少计算值的大小。<br>2、ROUND_DOWN <br>接近零的舍入模式。 <br>在丢弃某部分之前始终不增加数字（从不对舍弃部分前面的数字加1，即截短）。 <br>注意，此舍入模式始终不会增加计算值的大小。<br>3、ROUND_CEILING <br>接近正无穷大的舍入模式。 <br>如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同； <br>如果为负，则舍入行为与 ROUND_DOWN 相同。 <br>注意，此舍入模式始终不会减少计算值。<br>4、ROUND_FLOOR <br>接近负无穷大的舍入模式。 <br>如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同； <br>如果为负，则舍入行为与 ROUND_UP 相同。 <br>注意，此舍入模式始终不会增加计算值。<br>5、ROUND_HALF_UP <br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。 <br>如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同。 <br>注意，这是我们大多数人在小学时就学过的舍入模式（四舍五入）。<br>6、ROUND_HALF_DOWN <br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。 <br>如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同（五舍六入）。<br>7、ROUND_HALF_EVEN <br>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。 <br>如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同； <br>如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。 <br>注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。 <br>此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。 <br>如果前一位为奇数，则入位，否则舍去。 <br>以下例子为保留小数点1位，那么这种舍入方式下的结果。  <br>1.15&gt;1.2 1.25&gt;1.2<br>8、ROUND_UNNECESSARY <br>断言请求的操作具有精确的结果，因此不需要舍入。 <br>如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。<br><br>第二个问题<br>在MySQL中，整数和浮点数的定义都是有多种类型，整数根据实际范围定义，浮点数语言指定整体长度和小数长度。浮点数类型包括单精度浮点数（float型）和双精度浮点数（double型）。定点数类型就是decimal型。定点数以字符串形式存储，因此，其精度比浮点数要高，而且浮点数会出现误差，这是浮点数一直存在的缺陷。如果要对数据的精度要求比较高，还是选择定点数decimal比较安全。","like_count":61,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489447,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585362960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228922,"discussion_content":"哇塞，课代表厉害","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586590665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484192,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/a0/e0cccf7e.jpg","nickname":"圆圆满满","note":"","ucode":"396E7A822014D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576432,"discussion_content":"浮点数的存储搞清楚后就完全明白了（https://www.jianshu.com/p/ae5e68051244）。对于精度要求比较高的场景，不能使用浮点数，要用BigDecimal。因为BigDecimal的存储跟浮点数完全不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655542664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2102268,"avatar":"https://static001.geekbang.org/account/avatar/00/20/13/fc/9fd984fd.jpg","nickname":"咖啡汪","note":"","ucode":"1D251123439D20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308049,"discussion_content":"每天进步一点点\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600830487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226124,"discussion_content":"看课代表的评论，是一种享受","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586423780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":227352,"discussion_content":"谢谢，大家一起跟着老师加油","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586485173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226124,"ip_address":""},"score":227352,"extra":""}]},{"author":{"id":1063307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8b/af74591f.jpg","nickname":"chun1123","note":"","ucode":"413C3A8722699F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219078,"discussion_content":"课代表来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585732172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1063307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8b/af74591f.jpg","nickname":"chun1123","note":"","ucode":"413C3A8722699F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":219252,"discussion_content":"😂😂😂，共同学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585747900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219078,"ip_address":""},"score":219252,"extra":""}]},{"author":{"id":1527473,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4e/b1/4b922c82.jpg","nickname":"EchosEcho","note":"","ucode":"993828BAC9B385","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216395,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585445621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197681,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1585391693,"is_pvip":false,"replies":[{"id":"74633","content":"用分存储是可以（解决精度问题），但是容易出错，万一读的时候忘记&#47;100或者是存的时候忘记*100，可能会引起重大问题，还是使用DECIMAL(13, 2) &#47;DECIMAL(13, 4) 存比较好。","user_name":"作者回复","comment_id":197681,"uid":"1001470","ip_address":"","utype":1,"ctime":1585401407,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"61714933837","product_id":100047701,"comment_content":"想请教一下。关于金额。<br>还存在 使用Long类型的分存储，以及封装的money对象存储的方式。这两种方式适合解决金额类的精度丢失问题嘛？","like_count":15,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489580,"discussion_content":"用分存储是可以（解决精度问题），但是容易出错，万一读的时候忘记/100或者是存的时候忘记*100，可能会引起重大问题，还是使用DECIMAL(13, 2) /DECIMAL(13, 4) 存比较好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585401407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003940,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/51/a4/80f32335.jpg","nickname":"bing1024","note":"","ucode":"9D7454473D8CB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352382,"discussion_content":"google play支付接口里面使用的金额单位为百万分之一","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614697250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2018275,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/cb/e3/a5cad724.jpg","nickname":"Lu","note":"","ucode":"DA2F82DB9437D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372104,"discussion_content":"饿了么似乎使用的是分存储，对接业务的时候需要需要注意下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620194059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199162,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1585480905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40240186569","product_id":100047701,"comment_content":"手机计算器把 10%+10% 算成了 0.11 而不是 0.2。<br>读到这里，吓得我赶快掏出安卓机算了下","like_count":10},{"had_liked":false,"id":201076,"user_name":"Jerry Wu","can_delete":false,"product_type":"c1","uid":1203567,"ip_address":"","ucode":"AD29B6942AAAA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","comment_is_top":false,"comment_ctime":1585712521,"is_pvip":false,"replies":[{"id":"75212","content":"赞","user_name":"作者回复","comment_id":201076,"uid":"1001470","ip_address":"","utype":1,"ctime":1585717452,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"35945450889","product_id":100047701,"comment_content":"感谢老师，看完这篇文章，改了BigDecimal工具类，避免了一个事故。","like_count":9,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490233,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585717452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596049,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5a/91/f26d17d4.jpg","nickname":"∫1/(x^4*√(1+x^2))dx","note":"","ucode":"E300E20E5AF0FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227045,"discussion_content":"涉及金额操作可以考虑使用Jada-Money去对金额进行包装","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586447198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1877862,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","nickname":"纵不朽","note":"","ucode":"DB2CA2C46B2EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1596049,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5a/91/f26d17d4.jpg","nickname":"∫1/(x^4*√(1+x^2))dx","note":"","ucode":"E300E20E5AF0FD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401925,"discussion_content":"这包18年就没更新了，star也少，能用不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633766603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":227045,"ip_address":""},"score":401925,"extra":""}]}]},{"had_liked":false,"id":198240,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1585428080,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27355231856","product_id":100047701,"comment_content":"用equals对两BigDecimal判等...之前就被坑了","like_count":7,"discussions":[{"author":{"id":1239696,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/90/95b862bc.jpg","nickname":"这是极客时间","note":"","ucode":"95EF3B568CAB7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388747,"discussion_content":"还好我习惯和0比较所以用过compare,不然也习惯compare了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628933724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312050,"discussion_content":"我也遇到过，测试测出来后才意识到可能需要用compareTo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602574667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197933,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1585404049,"is_pvip":false,"discussion_count":5,"race_medal":1,"score":"27355207825","product_id":100047701,"comment_content":"我们现在对金额的计算都是用分做单位处理","like_count":7,"discussions":[{"author":{"id":1024486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","nickname":"旭东(Frank)","note":"","ucode":"176FA629800062","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242912,"discussion_content":"只有在需要展示的地方才转换吧，单价都是分录取","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1587508842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1024486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","nickname":"旭东(Frank)","note":"","ucode":"176FA629800062","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242942,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587513064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":242912,"ip_address":""},"score":242942,"extra":""}]},{"author":{"id":2712078,"avatar":"https://static001.geekbang.org/account/avatar/00/29/62/0e/af82f76f.jpg","nickname":"咸鱼","note":"","ucode":"32C83B9B063541","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392057,"discussion_content":"一般这样也够了，但是如果上升到汇率的话，上升到分的方法就不能整了，不过不是金融公司的话也不会接触到这些的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630807846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378309,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4a/45/e048531a.jpg","nickname":"迪米乌格斯","note":"","ucode":"1D4393746DCBCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341115,"discussion_content":"+1,我司也是统一到分这个单位,有效解决小数不准确的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610293720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501593,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ5Hnw1tL9EWGdzhibCw89hibKjibwcyUBCSJsQWaxxfGu5AkBibibV0anaKqw3nf3ZP0UWy5BaEYyw2Q/132","nickname":"smilekaka","note":"","ucode":"C01D8020019FDC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295415,"discussion_content":"对的， 微信就是这么干的，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596188548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197940,"user_name":"","can_delete":false,"product_type":"c1","uid":1940109,"ip_address":"","ucode":"4AC9863870BEF7","user_header":"","comment_is_top":false,"comment_ctime":1585404253,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18765273437","product_id":100047701,"comment_content":"double\\float精度问题，会导致一些结果不是我们想要的。比如3.35 其实如果用double表示，则是3.34900000，如果用float表示，则是3.500000所以控制精度不能用他们。<br>浮点数的字符串格式化也要通过 BigDecimal 进行。<br><br>BigDecimal num1 = new BigDecimal(&quot;3.35&quot;);<br>BigDecimal num2 = num1.setScale(1, BigDecimal.ROUND_DOWN);<br>System.out.println(num2);<br>BigDecimal num3 = num1.setScale(1, BigDecimal.ROUND_HALF_UP);<br>System.out.println(num3);<br>使用 BigDecimal 表示和计算浮点数，且务必使用字符串的构造方法来初始化 BigDecimal<br>如果一定要用 Double 来初始化 BigDecimal 的话，可以使用 BigDecimal.valueOf 方法，以确保其表现和字符串形式的构造方法一致。<br>如果我们希望只比较 BigDecimal 的 value，可以使用 compareTo 方法<br>BigDecimal的equals方法是比较scale的所以1.0跟1就是不同的。我们如果要比较两个BigDecimal要用compareTo.<br><br>BigDecimal 的 equals 和 hashCode 方法会同时考虑 value 和 scale，如果结合 HashSet 或 HashMap 使用的话就可能会出现麻烦。比如，我们把值为 1.0 的 BigDecimal 加入 HashSet，然后判断其是否存在值为 1 的 BigDecimal，得到的结果是 false：<br><br>第一个方法是，使用 TreeSet 替换 HashSet。TreeSet 不使用 hashCode 方法，也不使用 equals 比较元素，而是使用 compareTo 方法，所以不会有问题。<br><br>Set&lt;BigDecimal&gt; treeSet = new TreeSet&lt;&gt;();<br>treeSet.add(new BigDecimal(&quot;1.0&quot;));<br>System.out.println(treeSet.contains(new BigDecimal(&quot;1&quot;)));&#47;&#47;返回true<br><br>第二个方法是，把 BigDecimal 存入 HashSet 或 HashMap 前，先使用 stripTrailingZeros 方法去掉尾部的零，比较的时候也去掉尾部的 0，确保 value 相同的 BigDecimal，scale 也是一致的：<br><br>Set&lt;BigDecimal&gt; hashSet2 = new HashSet&lt;&gt;();<br>hashSet2.add(new BigDecimal(&quot;1.0&quot;).stripTrailingZeros());<br>System.out.println(hashSet2.contains(new BigDecimal(&quot;1.000&quot;).stripTrailingZeros()));&#47;&#47;返回true<br><br>我们平时会忽略掉溢出的问题。<br>方法一是，考虑使用 Math 类的 addExact、subtractExact 等 xxExact 方法进行数值运算，这些方法可以在数值溢出时主动抛出异常.<br>\\方法二是，使用大数类 BigInteger。BigDecimal 是处理浮点数的专家，而 BigInteger 则是对大数进行科学计算的专家。","like_count":4,"discussions":[{"author":{"id":1012843,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/6b/a98162a1.jpg","nickname":"winner_0715","note":"","ucode":"A033A30539181F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558499,"discussion_content":"......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648350440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210188,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1587695583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177630175","product_id":100047701,"comment_content":"推荐money类","like_count":2},{"had_liked":false,"id":205284,"user_name":"👻","can_delete":false,"product_type":"c1","uid":1227789,"ip_address":"","ucode":"1648C82AC73C1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","comment_is_top":false,"comment_ctime":1586583196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176517788","product_id":100047701,"comment_content":"最好的办法就是写好测试用例","like_count":2},{"had_liked":false,"id":197500,"user_name":"hellojd","can_delete":false,"product_type":"c1","uid":1341697,"ip_address":"","ucode":"4E51807AE7E472","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/01/e71510dc.jpg","comment_is_top":false,"comment_ctime":1585382091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175316683","product_id":100047701,"comment_content":"还有 bigdecimal的值对比，也是问题","like_count":2},{"had_liked":false,"id":197499,"user_name":"hellojd","can_delete":false,"product_type":"c1","uid":1341697,"ip_address":"","ucode":"4E51807AE7E472","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/01/e71510dc.jpg","comment_is_top":false,"comment_ctime":1585382041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175316633","product_id":100047701,"comment_content":"对账时，涉及double求和 ,遇到了","like_count":2},{"had_liked":false,"id":197163,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1585361367,"is_pvip":false,"replies":[{"id":"74529","content":"👍🏻","user_name":"作者回复","comment_id":197163,"uid":"1001470","ip_address":"","utype":1,"ctime":1585364705,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"10175295959","product_id":100047701,"comment_content":"第一个问题，BigDecimal 的 8 中 Round模式，分别是 <br>1.ROUND_UP：向上取整，如 5.1 被格式化后为 6，如果是负数则与直观上不一致，如 -1.1 会变成 -2。2.ROUND_DOWN：向下取整，与 ROUND_UP 相反。<br>3.ROUND_CEILING：正负数分开版的取整，如果是正数，则与 ROUND_UP 一样，如果是负数则与 ROUND_DOWN 一样。<br>4.ROUND_FLOOR：正负数分开版的取整，与 ROUND_CEILING 相反。<br>5.ROUND_HALF_UP：四舍五入版取整，我们直观上最为理解的一种模式，如 5.4 小数部分小于 0.5，则舍位为 5，如果是 5.6 则进位变成 6，如果是负数，如 -5.4 =&gt; -5，-5.6 =&gt; -6。 <br>6.ROUND_HALF_DOWN：五舍六入版取整，必须大于 0.5 才可进位，其它与 ROUND_HALF_UP 一致。<br>7.ROUND_HALF_EVEN：奇偶版四舍五入取整，如果舍弃部分左边的数字为奇数，则作   ROUND_HALF_UP；如果它为偶数，则作ROUND_HALF_DOWN，会根据舍弃部分的奇偶性来选择进位的是四舍五入还是五舍六入。<br>8. ROUND_UNNECESSARY：要求传入的数必须是精确的，如 1 和 1.0 都是精确的，如果为 1.2 或者 1.6 之类的均会报 ArithmeticException 异常。<br><br>第二个问题，MySQL 是支持 bigint 和 bigdecimal 数据类型存储的，当然还有 numberic，numberic 的作用与 bigdecimal 一致，当然如果这些数据类型在数据库中计算我觉得是不妥的，应该查询后在代码层面中计算，当然如果有人补充一下如何在数据库中科学计算，也可让大家涨涨见识😄。","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489461,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585364705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221140,"user_name":"岳宜波","can_delete":false,"product_type":"c1","uid":1975581,"ip_address":"","ucode":"5043CA250FDCB1","user_header":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCnhAYmvAsNcYKyNLUJG5iax9BKgXAJzxypEJGRVwhibjZ53S5icgEDibn8uqrqwsKcxzEXfRRUXTdqjA/132","comment_is_top":false,"comment_ctime":1590415902,"is_pvip":false,"replies":[{"id":"81553","content":"👍🏻","user_name":"作者回复","comment_id":221140,"uid":"1001470","ip_address":"","utype":1,"ctime":1590417643,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"5885383198","product_id":100047701,"comment_content":"一般用的比较多的就是，向上取整，向下取整，四舍五入和舍位四种，在我们项目里因为有国际化，会有币种档案，在币种中定义金额精度和价格精度以及舍入方式，在商品的计量单位上定义数量精度以及舍入方式。","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496351,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590417643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203965,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1586313222,"is_pvip":false,"replies":[{"id":"76266","content":"可以比较一下，主要是要小心scale：<br><br>BigDecimal bigDecimal1 = new BigDecimal(&quot;100&quot;);<br>        BigDecimal bigDecimal2 = new BigDecimal(String.valueOf(100d));<br>        BigDecimal bigDecimal3 = BigDecimal.valueOf(100d);<br>        BigDecimal bigDecimal4 = new BigDecimal(Double.toString(100d));<br><br>        System.out.println(bigDecimal1.multiply(new BigDecimal(&quot;4.015&quot;)));<br>        System.out.println(bigDecimal2.multiply(new BigDecimal(&quot;4.015&quot;)));<br>        System.out.println(bigDecimal3.multiply(new BigDecimal(&quot;4.015&quot;)));<br>        System.out.println(bigDecimal4.multiply(new BigDecimal(&quot;4.015&quot;)));","user_name":"作者回复","comment_id":203965,"uid":"1001470","ip_address":"","utype":1,"ctime":1586318825,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"5881280518","product_id":100047701,"comment_content":"请教老师string.valueof替代bigdecimal.valueof可否呢","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491021,"discussion_content":"可以比较一下，主要是要小心scale：\n\nBigDecimal bigDecimal1 = new BigDecimal(&amp;quot;100&amp;quot;);\n        BigDecimal bigDecimal2 = new BigDecimal(String.valueOf(100d));\n        BigDecimal bigDecimal3 = BigDecimal.valueOf(100d);\n        BigDecimal bigDecimal4 = new BigDecimal(Double.toString(100d));\n\n        System.out.println(bigDecimal1.multiply(new BigDecimal(&amp;quot;4.015&amp;quot;)));\n        System.out.println(bigDecimal2.multiply(new BigDecimal(&amp;quot;4.015&amp;quot;)));\n        System.out.println(bigDecimal3.multiply(new BigDecimal(&amp;quot;4.015&amp;quot;)));\n        System.out.println(bigDecimal4.multiply(new BigDecimal(&amp;quot;4.015&amp;quot;)));","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586318825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198445,"user_name":"吴国帅","can_delete":false,"product_type":"c1","uid":1638035,"ip_address":"","ucode":"D2EBC0308CC361","user_header":"https://static001.geekbang.org/account/avatar/00/18/fe/93/8999259d.jpg","comment_is_top":false,"comment_ctime":1585451850,"is_pvip":false,"replies":[{"id":"74688","content":"觉得好可以多转发分享","user_name":"作者回复","comment_id":198445,"uid":"1001470","ip_address":"","utype":1,"ctime":1585457151,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"5880419146","product_id":100047701,"comment_content":"真棒 get到知识了！","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489704,"discussion_content":"觉得好可以多转发分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585457151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198093,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1585408867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880376163","product_id":100047701,"comment_content":"浮点数我印象很深刻的一个问题就是大数吃小数的问题","like_count":1},{"had_liked":false,"id":197121,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1585358885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880326181","product_id":100047701,"comment_content":"0.45和0.55也有这个问题。double a=0.45,可以输出0.45,double b =1-0.55=0.444444449","like_count":1},{"had_liked":false,"id":308083,"user_name":"chachae","can_delete":false,"product_type":"c1","uid":1669586,"ip_address":"","ucode":"F9FB01803C0F1F","user_header":"https://static001.geekbang.org/account/avatar/00/19/79/d2/a3fbad97.jpg","comment_is_top":false,"comment_ctime":1629383779,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629383779","product_id":100047701,"comment_content":"equal 这个确实很坑hhh","like_count":0},{"had_liked":false,"id":286307,"user_name":"JoJi","can_delete":false,"product_type":"c1","uid":2066986,"ip_address":"","ucode":"B88997A80E76AC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8a/2a/f94db4dc.jpg","comment_is_top":false,"comment_ctime":1617247222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617247222","product_id":100047701,"comment_content":"如果数据库里设置了BigDecimal小数点为2位，在存储方面BigDecimal格式化的问题(Double.toString那个例子)是不是就不影响了。","like_count":1},{"had_liked":false,"id":273780,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1610676224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610676224","product_id":100047701,"comment_content":"对于大数BigInteger，一定要使用longValueExact方法，如果是使用longValue的话，同样存在溢出问题","like_count":1},{"had_liked":false,"id":246116,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1599183573,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1599183573","product_id":100047701,"comment_content":"1、基础类型比较可以用==，非基础类型用equal（BigDecimal需要看场景）。<br>2、BigDecimal用字符作入参可保证精度，符点运算最好都用此类型，equal会比较value和scala，compareTo仅比较value，<br>四舍五入时可以明确指定舍入方式或是舍入位数。<br>3、HashXX是分离链接法实现，比较用hashCode定位到槽，用equal比较值。TreeXX是树实现，比较用compareTo。<br>4、大整数运算可以用BigInteger，转换类型如果有溢出时会抛异常，将问题暴露出来。","like_count":0},{"had_liked":false,"id":235470,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1595050026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595050026","product_id":100047701,"comment_content":"BigDecimal提供了 8 种舍入模式可以直接看源码,源码有注释例子","like_count":0},{"had_liked":false,"id":233583,"user_name":"珅珅君","can_delete":false,"product_type":"c1","uid":1069646,"ip_address":"","ucode":"3700048634C565","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/4e/5150a2ee.jpg","comment_is_top":false,"comment_ctime":1594360510,"is_pvip":false,"replies":[{"id":"86227","content":"不错","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1594375476,"ip_address":"","comment_id":233583,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594360510","product_id":100047701,"comment_content":"我想补充一点，之所以DecimalFormat也会导致精度的问题，是因为 format.format(num) 这个方法参数是double类型，传float会导致强转丢失精度。所以无论怎么样，浮点数的字符串格式化通过 BigDecimal 进行就行","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501095,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594375476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}