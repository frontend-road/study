{"id":560737,"title":"02｜触发器：如何构建事件源与函数计算的纽带？","content":"<p>你好，我是静远。</p><p>在上一节课里，我通过一个函数的开发和请求过程，给你介绍了函数计算的生命周期，让你从用户和平台两个视角，了解了函数计算各阶段的执行流程和基础要点。</p><p>细心的你应该能发现，上传到函数计算平台的云函数，一般是需要通过一个触发器来执行的，如果之前你没有接触过事件驱动模型和Serverless相关的知识，可能对触发器这个概念有一些陌生。</p><p>相信学完今天这节课的你，不仅能够了解触发器的概念和原理，更能对触发器相关的知识点，例如事件、调用等等都有一定的理解。最后，我也会带你实现一个自定义的触发器。</p><h2>初识触发器</h2><p>上节课，我们知道了函数托管在平台后一般需要有一个事件来触发才能真正地运行起来。那么在了解触发器之前，我们先了解一下事件。</p><h3>什么是事件？</h3><p>说得直白一点，事件，就是系统运行期间发生的动作或者发生的事情。而函数计算，提供了一种事件驱动的计算模型。针对这个概念，我们需要了解三件事。</p><p>第一，<strong>CNCF关于事件的定义和初衷</strong>。CloudEvents 期望通过一种通用的格式描述事件数据的规范，以提供跨服务、平台和系统的互操作性。那么，我们自身在开发一个函数计算平台的时候，就可以更多的<strong>以这个规范为准绳来设计</strong>；在选型一个开源框架、函数计算平台开发业务代码的时候，这个互操作性也可以<strong>作为技术选型的参考因素之一</strong>。</p><!-- [[[read_end]]] --><p>第二，<strong>国内云厂商的事件规范程度</strong>。目前各大第三方云厂商都希望推广落地CloudEvents规范，但在事件规范定义上，多多少少都有各自平台的一些特有属性和参数包含在里面。</p><p>如果你在其中一家云产品上开发了云函数，一般来说，需要做一些简单的适配才能迁移。庆幸的是，部分云厂商目前具备支持脚本迁移和适配的能力，你可以通过工单的形式跟他们取得联系，大大减少迁移成本。</p><p>第三，<strong>CNCF在哪些Serverless相关产品定义了规范</strong>。在函数计算中，会接触到单函数的事件触发、多个简单函数通过异步调用方式形成的事件触发、复杂场景下通过工作流（WorkFlow）的形式来进行编排的事件交互。</p><p>CNCF Serverless工作组针对函数和工作流均定义了相应的格式规范或原语。现在很多的传统企业、云厂商也都在尽量按照这个标准去执行——尤其是复杂的多函数交互的场景下。你在选型的时候可以关注一下是否兼容这个标准，便于函数和编排规则在各大平台迁移。</p><h3>什么是触发器？</h3><p>了解“事件”这个触发条件之后，我们再看函数运行起来之前的“触发”动作。我们通常把这种由事件驱动连接上下游服务的关系组合称为触发器，它是触发函数执行的主要方式之一。</p><p>我们知道，函数计算由云函数和触发器组成。对函数计算来说，触发器描述了一组关系和规则，包括事件源、目标函数、触发条件三大核心要素。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/6f/f03c60a3d2c8d8d8cb9a1c3af0f9296f.jpeg?wh=1580x827\" alt=\"图片\"></p><p>其中，事件源是事件的生产者，目标函数是事件的处理者。当触发条件满足时，就会通知函数计算引擎，调度对应的目标函数来执行。</p><p>触发器的元信息可以由服务方持久存储，也可以由函数托管平台和服务方共同持有。根据不同的集成和调用方式，触发器也有着不同的分类。</p><h3>触发器类型</h3><p>按照触发器集成原则，通常分为单向集成触发器、双向集成触发器和代理集成触发器。它们的区别在于事件源和事件的规则存储在哪里，以及从哪里触发。</p><p>我们在设计触发器的时候，主要考虑的是<strong>事件源和函数计算的上下游关系</strong>以及<strong>操作的便捷度</strong>。</p><p>例如，我们在云厂商看到的对象触发器，在存储对象和函数计算两个平台上都可以来创建和配置触发器，这种就是双向集成触发器。而对于消息的监听和触发场景，由于大部分情况是对异步消息的计算处理，加上函数计算按需启动执行的特性，我们通常就会设计成单向集成触发器，你直接在函数计算平台创建和配置触发器即可。</p><p>按照调用方式，我们又可以将触发器分为同步触发器和异步触发器。</p><p><strong>同步调用</strong>：触发事件被函数计算处理后直接返回结果。例如，公有云厂商提供的HTTP触发器、CDN触发器等，基本都是同步触发器。</p><p><strong>异步调用</strong>：触发事件请求函数计算后，函数计算服务返回一个接收成功的状态码，由函数计算来确保事件被可靠处理。例如，定时触发器、消息队列触发器等，均属于异步触发器。</p><p>在使用的时候，你也可以优先考虑自己的需求，从不同的分类里找到最适合的触发器类型。</p><p>到这里，相信你对触发器的认知已经不仅仅是基于上节课的一个感性轮廓了。下面，我们来体验一个简单的触发器，为自己动手实现触发器打下基础。</p><h2>动手体验</h2><p>我们以百度智能云的函数计算平台为底座来体验一下，假设我们已经创建了一个名叫test_geekbang的函数，接下来需要创建一个触发器。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/52/303e6b04b271fc2447282eea00954052.jpg?wh=652x437\" alt=\"图片\"></p><p>如图，我们创建了一个BOS触发器（BOS是百度智能云的对象存储服务），并设置了监听的目标对象是BOS下的一个Bucket（bos:/cfc-sns），事件类型是文件上传、追加上传等条件均可触发函数的执行。</p><p>创建好触发器后，我们就可以在BOS上传一个文件来测试了。由于我们没有设定额外的过滤规则，所以你上传任何一个文件，均可以触发云函数test_geekbang一次执行。</p><p>整体操作没有什么难度，你也可以参考百度智能云函数计算CFC的教程去体验其他细节设置。你会发现，触发器使得函数计算与外部服务的连接非常的快捷高效。</p><p>说到这里，估计你已经迫不及待地想知道这个连接的背后是如何实现的了。接下来，让我们一起来动手实现一个触发器，体会其中的原理。</p><h2>动手实现</h2><p>我们看不到云厂商的对象存储触发器中详细的实现，那么通过一个比较类似，且功能实现全面的开源存储服务来作为实现触发器的底座，也未尝不可。</p><p>这里，我选择了和百度智能云BOS类似的开源对象存储服务MinIO来演示。MinIO采用Golang实现，客户端有支持丰富的语言集成，如Golang、Java、Python、JavaScript等等，空闲的时候，你也可以用不同的语言尝试重现这次的实验。</p><p>假设我们需要满足这样一个功能场景：</p><blockquote>\n<p>通过监听MinIO的事件动作（MinIO存储对象的创建、访问、删除）来触发函数计算的执行。例如：当一个文件存储到MInIO的Bucket中时，监听服务监测到该事件发生，通过查询判断是否存在一组关系和规则，如果存在，触发函数执行既定的业务逻辑。</p>\n</blockquote><p>那么，针对这个功能诉求，你能拆分出一个实现流程吗？别着急回答，可以先暂停一会儿思考一下。</p><p>我将大致流程分为了5个步骤：</p><ol>\n<li>用户在函数计算平台上对相关云函数绑定自定义触发器，设定好事件源标识；</li>\n<li>MinIO发生某个动作，假设是上传（Upload）文件的一个动作，该动作关联唯一的一个Bucket下的一条路径，构成了一次触发事件 （Event）；</li>\n<li>事件监听器（Event Monitor Server）作为Deamon进程持续运行，会捕获到该事件；</li>\n<li>监听器通过“动作+Bucket+路径”构成的唯一标识，从数据库MySQL查询并获取相应的触发器；</li>\n<li>监听器对获取到的触发器进行逐个触发，对远端云函数进行触发调用。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/61/62/61d77bf23b6212bdbaf49c0aa96cb962.jpeg?wh=1632x1003\" alt=\"图片\"></p><p>接下来，我们就根据这个场景和流程来定义这个触发器。整体需要通过事件类型确定、事件协议定义、元数据存储约定、事件绑定四个步骤来完成。</p><h3>事件类型确定</h3><p>由于MinIO已经实现了事件监听的API，我们可以直接从MinIO API目前的事件类型中选出我们需要的三种，s3:ObjectCreated:* 、s3:ObjectRemoved:* 、s3:ObjectAccessed:*  满足针对一个对象的CRUD要求，并进行监听。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/12/28dee3aa467ae2e34f4d0fd1f0e99412.jpeg?wh=1530x589\" alt=\"图片\"></p><p>其中，第一种类型满足了通过不同方式来创建一个对象的需求；第二种事件类型，支持从存储的bucket中删除指定的对象；第三种事件类型是用来监听访问对象时才触发的情况。</p><p>选定好事件类型后，我们选取GitHub上封装好的<a href=\"https://github.com/minio/minio-go\">MinIO客户端</a>，简化我们的开发实现，通过引入mino-go，可以快速实现一个事件类型的监听动作。</p><pre><code class=\"language-java\">func (m * EventMonitor) work() error   {\n   &nbsp;&nbsp;&nbsp; miClient := m.miClient\n&nbsp;&nbsp;&nbsp; for miInfo := range   miClient.ListenNotification(context.Background(), \"\", \"\",   []string{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"s3:ObjectCreated:*\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"s3:ObjectAccessed:*\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"s3:ObjectRemoved:*\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //TODO：实现业务逻辑\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><h3>事件协议定义</h3><p>然后，我们就要定义事件协议，来传递MinIO和云函数之间的触发请求了。这里，我们采取HTTP+JSON的方式。你可以参考下面的事件格式定义方法：</p><pre><code class=\"language-java\">{\n&nbsp;&nbsp; &nbsp; \"eventId\" : \"事件id \",\n&nbsp;&nbsp; &nbsp; \"source\" : \"事件源，此案例标识来源MiniIO\",\n&nbsp;&nbsp; &nbsp; \"specversion\":   \"协议的版本\",\n&nbsp;&nbsp; &nbsp; \"type\" : \"事件类型 \",\n&nbsp;&nbsp; &nbsp; \"timestamp\" : \"请求时间戳\",\n&nbsp;&nbsp; &nbsp; \"target\": \"函数唯一标识\",\n&nbsp;&nbsp; &nbsp; \"data\" : {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 待处理数据\n&nbsp;&nbsp; &nbsp; }\n}\n</code></pre><p>不过，定义了协议，能够传递请求还不够，函数计算平台通常为了能够识别可信的事件源，当有触发器创建之后，还需要进行授权认证，确保服务请求的安全性。<br>\n接下来，我们来看一下接口设计。在这个案例情境下，我们需要创建四个功能来满足触发器的控制台操作需要，分别用于触发器的创建、修改、删除、查询，你也可以通过REST来构建如下的接口协议。</p><pre><code class=\"language-java\">func   OperateMinioTriggers(request *restful.Request, response *restful.Response)\n</code></pre><p>其中，request中包括action动作用来标识CRUD操作即可。</p><p>这里你需要注意一点，<strong>如果一个函数被删除，那么它对应的附属特征、附属触发器等都应该剔除干净</strong>。这也是我们初次设计时候很容易遗漏的地方。</p><h3>元数据存储约定</h3><p>按照通常的操作习惯来说，在MinIO和函数计算服务侧均可实现触发器的集成功能，还可以在配置Bucket的时候创建事件绑定规则，在创建一个函数的时候也能够创建好监听对象的请求事件。</p><p>而这两处的绑定创建过程，除了UI界面和本身创建时的平台校验参数不一样外，都很雷同。为了降低第一次尝试的难度，我们就选择在MinIO服务侧集成。</p><p>由MinIO作为事件源服务方通知触发云函数的执行。那么，相应的关系信息只需要在MinIO服务侧存储，鉴权和规则在函数计算平台侧存储，其中：</p><ul>\n<li>关系创建：确定具体的触发关系，如具体的Bucket、触发条件等；</li>\n<li>规则创建：确保触发源按照既定规则进行触发，如标识MiniIO的动作、触发形式等。</li>\n</ul><p>你可以根据上述的描述进行设计，这里，我也给出了简单的待存储对象的数据结构，你可以自行转换成数据库表来存储，通常多个关系可以共用一个规则。你可以就此创建两张表，一张规则表tb_rule，用于存储规则，一般存储在函数计算的平台侧，一张关系表tb_relation，依据触发器的类型存储在事件触发源侧。</p><p><strong>规则：</strong></p><pre><code class=\"language-go\">type Rule struct {\n&nbsp;&nbsp;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint\n&nbsp;&nbsp;&nbsp; Sid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;// 规则唯一ID\n&nbsp;&nbsp;&nbsp; Resource&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;// 函数标识\n    Source    string&nbsp;&nbsp;&nbsp;&nbsp;// 触发源\n    ……&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     // 可以根据业务复杂度增加字段，如创建时间、用户ID等信息\n}\n</code></pre><p><strong>关系：</strong></p><pre><code class=\"language-go\">type Relation struct{\n&nbsp;&nbsp;&nbsp; RelationId&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 关系ID\n&nbsp;&nbsp;&nbsp; RuleId&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;&nbsp;&nbsp;   //&nbsp;触发器关联的规则的id\n&nbsp;&nbsp;&nbsp; Source&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;触发源，可以具体到bucketName\n&nbsp;&nbsp;&nbsp; Target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;函数的唯一标识\n&nbsp;&nbsp;&nbsp; Condition&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;触发条件\n    ……&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //&nbsp;可以根据业务复杂度增加字段，如触发器自定义参数\n}\n</code></pre><h3>事件绑定</h3><p>根据上述的约定设计方案，我们来完成事件的绑定规程，从MinIO服务侧来绑定，需要3个步骤。</p><p>步骤1：请求上述定义好的MinIO接口，创建一个自定义的触发器配置，例如监听一个对象存储到bucket的动作。</p><p>步骤2：MinIO侧的服务（例如API-Server）在接收到请求后，将关系存储在数据库中，并同步通知函数计算平台，创建对应的规则。</p><p>步骤3：函数计算平台接收到MinIO侧服务的请求后，检查当前库里面是否已经存在同样的规则，如果存在直接返回响应成功；如果不存在，记录规则，用于触发时校验，最后返回通知MinIO侧绑定成功。</p><p>到这里，我们已经完成了MinIO作为事件源，函数计算平台作为处理方的事件关系的绑定过程。</p><h2>触发器的调用过程</h2><p>定义好触发器并绑定关系后，我们可以以上传一个文件为例，整体看一下MinIO的事件触发过程，也就是触发器的调用过程：</p><ul>\n<li>用户操作MinIO，上传了一个文件；</li>\n<li>MinIO侧事件监听服务（EventMonitorServer）对触发的事件进行捕获；</li>\n<li>EventMonitorServer从数据库关系表（tb_relation）中获取匹配该事件的触发关系；</li>\n<li>根据关系发起调用函数计算服务的请求；</li>\n<li>函数计算服务平台侧接收到请求后，进行鉴权和规则的验证，并执行相应的函数进行处理，最后根据异步或者同步约定方式，进行结果返回。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/bb/5a/bbf0c6a3d366516d26769c48c6b9355a.jpeg?wh=1622x1063\" alt=\"图片\"></p><p>到这里，我们已经定义好一个基于MInIO的对象存储触发器，并通过时序关系描述了调用时刻的交互过程。</p><p>如前所述，由于MinIO已经提供了相关的事件监听API，在本案例中，你只需要开发一个简单的服务，如事件监听服务EventMonitorServer，来监听这些API接口的变动即可。你可以按照此方法进一步实战演练。</p><p>如果需要上生产环境，你还<strong>需要根据性能、稳定性等相关的要求，增加缓存、重试机制等能力，来确保生产环境的SLA</strong>。</p><h2>小结</h2><p>今天，我给你介绍了事件源与函数计算的纽带——触发器，以及事件和触发器的相关知识，同时，也动手体验了云厂商的对象存储触发器。最后，我们也通过自己构建一个基于MinIO的对象存储触发器，深入了解了触发器的执行原理。</p><p>这其中，最重要的就是以MinIO为核心底座，来构建一个自定义的触发器，我希望你能够记住关于动手实现触发器的三点关键信息。</p><p>首先，我们选择MinIO来作为本次动手实现的初衷，是为了更好地了解云厂商关于对象存储的相关实现原理，在你之后遇到类似存储事件触发函数执行的时候，也可以用本节讲到的方法来去应对。</p><p>其次，触发器实现的来龙去脉，大致包含四个核心流程：事件类型确定、事件协议定义、元数据存储约定、事件绑定。</p><p>最后，今天我们引入的MinIO客户端，监听MinIO的三大事件类型，以及给出的代码示例，都可以即学即用，你也可以尝试快速上手实战，实现一个触发器。</p><p>希望通过以上的介绍，你能对触发器以及相关的事件、调用原理有一个比较深入的理解，在之后使用或者自定义触发器的时候，就可以“拿捏”得比较准了。</p><h2>思考题</h2><p>好了，这节课到这里也就结束了，最后我给你留了一个思考题。</p><p>在你的工作场景中，还发现哪些场景可以构造成触发器？改造过程中，我们通常需要注意哪些技术卡点？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。感谢你的阅读，也欢迎你把这节课分享给更多的朋友一起交流进步。</p><h2>延伸阅读</h2><ul>\n<li><a href=\"https://github.com/cloudevents/spec\">CloudEvents规范</a> 你可以通过这个链接来了解CNCF事件的定义和详解</li>\n<li><a href=\"https://github.com/minio/minio-go\">Minio-go</a> 这是我案例中使用的访问minio的一个封装库，供你参考</li>\n<li><a href=\"https://docs.min.io/docs/minio-bucket-notification-guide.html\">Minio支持的事件类型介绍</a> 这是MinIO官方的事件支持书册，感兴趣的话，可以了解一下</li>\n<li><a href=\"https://github.com/serverlessworkflow/specification/blob/main/specification.md\">Serverless Workflow Specification</a> 这个是关于工作流规范的描述，在构建函数和应用编排的时候，可以提前参考一下</li>\n</ul>","comments":[{"had_liked":false,"id":356221,"user_name":"初夏","can_delete":false,"product_type":"c1","uid":3050664,"ip_address":"上海","ucode":"9EB3DE8F74F325","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLmphicC0uibsr4fsbaZcjb7h4NmHLrpEFGibc1Jt7xv820ZQnAA79VgZRSK9jvL3dJgWMgVM1LkQQbw/132","comment_is_top":false,"comment_ctime":1662048624,"is_pvip":false,"replies":[{"id":129664,"content":"加油，一起成长，学习过程中有遇到困难的话，随时可以留言交流哦","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1662085847,"ip_address":"上海","comment_id":356221,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"之前总是不太理解这块的实现，学完这节课，我现在也会自己搞定一个触发器了，感谢老师的细致讲解！","like_count":4,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586268,"discussion_content":"加油，一起成长，学习过程中有遇到困难的话，随时可以留言交流哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662085847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358743,"user_name":"davad_dee","can_delete":false,"product_type":"c1","uid":1057604,"ip_address":"上海","ucode":"BF285239FE8A69","user_header":"https://static001.geekbang.org/account/avatar/00/10/23/44/ebfe7b27.jpg","comment_is_top":false,"comment_ctime":1664673776,"is_pvip":false,"replies":[{"id":130516,"content":"感谢认可哦^_^，在后续的课程中欢迎留言一起交流探讨","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1664727996,"ip_address":"上海","comment_id":358743,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"深入浅出，点赞","like_count":1,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589349,"discussion_content":"感谢认可哦^_^，在后续的课程中欢迎留言一起交流探讨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664727996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378941,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1691025452,"is_pvip":false,"replies":[{"id":138144,"content":"自己实现触发器，一般体验在私有化部署中，比如金融银行领域等，在私有化部署中，我们就需要自己来对接或者开发","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1691462226,"ip_address":"上海","comment_id":378941,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"老师，你好。在文中的例子中，如果是使用云厂商的对象存储服务，就包含了各种内置的监听，实现自己的监听逻辑就可以了。文中自己实现对MiniO的监听，这部分代码是部署在哪里的呢？","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625205,"discussion_content":"自己实现触发器，一般体验在私有化部署中，比如金融银行领域等，在私有化部署中，我们就需要自己来对接或者开发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691462226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378297,"user_name":"Geek_19464b","can_delete":false,"product_type":"c1","uid":3606322,"ip_address":"浙江","ucode":"E069B8FF1902D5","user_header":"","comment_is_top":false,"comment_ctime":1690039472,"is_pvip":false,"replies":[{"id":137993,"content":"通过触发器的方式，但要注意有没有设置权限验证，或者通过云厂商提供的SDK 或者API 也是可以的，操作教程的话，看更大云厂商的官方手册就行","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1690683229,"ip_address":"上海","comment_id":378297,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"怎么调用云平台上的函数？","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624540,"discussion_content":"通过触发器的方式，但要注意有没有设置权限验证，或者通过云厂商提供的SDK 或者API 也是可以的，操作教程的话，看更大云厂商的官方手册就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690683229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378296,"user_name":"Geek_19464b","can_delete":false,"product_type":"c1","uid":3606322,"ip_address":"浙江","ucode":"E069B8FF1902D5","user_header":"","comment_is_top":false,"comment_ctime":1690039424,"is_pvip":false,"replies":[{"id":137994,"content":"你可以先做一下课程中涉及的基础知识和依赖知识的熟悉，然后依次熟悉触发器的知识，最后再重点看四个核心流程哈，如果还有不明白的，可以通过联系加我联系方式交流哦。","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1690683447,"ip_address":"上海","comment_id":378296,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"太简洁了，导致我不知道具体怎么实践这堂课","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624541,"discussion_content":"你可以先做一下课程中涉及的基础知识和依赖知识的熟悉，然后依次熟悉触发器的知识，最后再重点看四个核心流程哈，如果还有不明白的，可以通过联系加我联系方式交流哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690683447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371709,"user_name":"Wang Yifei","can_delete":false,"product_type":"c1","uid":3234227,"ip_address":"德国","ucode":"4F0777E8D8E4D3","user_header":"","comment_is_top":false,"comment_ctime":1680225833,"is_pvip":false,"replies":[{"id":135649,"content":"元数据记录，除了检验和数据校对外，还可以作为双向触发器中的元数据获取，单向来源可以不必须","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1680498052,"ip_address":"上海","comment_id":371709,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"事件绑定中的步骤3是否一定是必须的？\n我理解认证授权是必须的，但“记录规则，用于触发时校验”的目的是什么？","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612036,"discussion_content":"元数据记录，除了检验和数据校对外，还可以作为双向触发器中的元数据获取，单向来源可以不必须","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680498052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363260,"user_name":"盛夏。","can_delete":false,"product_type":"c1","uid":1525029,"ip_address":"上海","ucode":"6A4E768A931258","user_header":"https://static001.geekbang.org/account/avatar/00/17/45/25/02e3a241.jpg","comment_is_top":false,"comment_ctime":1669431904,"is_pvip":false,"replies":[{"id":132106,"content":"好的建议，如果在阅读过程中有问题，可以随时提问哦","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1669648472,"ip_address":"上海","comment_id":363260,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"希望提供一个视频课程，这样对于初学者也比较友好","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595030,"discussion_content":"好的建议，如果在阅读过程中有问题，可以随时提问哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669648472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}