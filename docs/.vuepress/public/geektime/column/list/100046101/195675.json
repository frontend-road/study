{"id":195675,"title":"02 | CAP理论：分布式系统的PH试纸，用它来测酸碱度","content":"<p>你好，我是韩健。</p><p>很多同学可能都有这样的感觉，每次要开发分布式系统的时候，就会遇到一个非常棘手的问题，那就是如何根据业务特点，为系统设计合适的分区容错一致性模型，以实现集群能力。这个问题棘手在当发生分区错误时，应该如何保障系统稳定运行，不影响业务。</p><p>这和我之前经历的一件事比较像，当时，我负责自研InfluxDB系统的项目，接手这个项目后，<strong>我遇到的第一个问题就是，如何为单机开源版的InfluxDB设计分区容错一致性模型。</strong>因为InfluxDB有META和DATA两个节点，它们的功能和数据特点不同，所以我还需要考虑这两个逻辑单元的特点，然后分别设计分区容错一致性模型。</p><p>那个时候，我想到了CAP理论，并且在CAP理论的帮助下，成功地解决了问题。讲到这儿，你可能会问了：为什么CAP理论可以解决这个问题呢？</p><p>因为在我看来，CAP理论是一个很好的思考框架，它对分布式系统的特性做了高度抽象，比如抽象成了一致性、可用性和分区容错性，并对特性间的冲突（也就是CAP不可能三角）做了总结。一旦掌握它，你就像拥有了引路人，自然而然就能根据业务场景的特点进行权衡，设计出适合的分区容错一致性模型。</p><p>那么问题来了：我说的一致性、可用性和分区容错性是什么呢？它们之间有什么关系？你又该如何使用CAP理论来思考和设计分区容错一致性模型呢？这些问题就是我们本节课所要讲的重点了。我建议你集中注意力，认真学习内容，并学以致用，把CAP理论应用到日常工作中。</p><!-- [[[read_end]]] --><h2>CAP三指标</h2><p>我刚刚提到，CAP理论对分布式系统的特性做了高度抽象，形成了三个指标：</p><ul>\n<li>一致性（Consistency）</li>\n<li>可用性（Availability）</li>\n<li>分区容错性（Partition Tolerance）</li>\n</ul><p>一致性说的是客户端的每次读操作，不管访问哪个节点，要么读到的都是同一份最新写入的数据，要么读取失败。</p><p>你可以把一致性看作是分布式系统，对访问自己的客户端的一种承诺：不管你访问哪个节点，要么我给你返回的都是绝对一致的最新写入的数据，要么你读取失败。你可以看到，一致性强调的是数据正确。</p><p>为了帮你理解一致性这个指标，我给你举一个具体的例子。比如，2个节点的KV存储，原始的KV记录为“X = 1”。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/6d/5d666afe96731c95556ee7d5a1194d6d.jpg?wh=1142*627\" alt=\"\"></p><p>紧接着，客户端向节点1发送写请求“SET X = 2”。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/e7/58519857f8f6b3edf8ebe38d3c18ede7.jpg?wh=1142*655\" alt=\"\"></p><p>如果节点1收到写请求后，只将节点1的X值更新为2，然后返回成功给客户端。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/c4/56922def2471e194d3e5420ad006e1c4.jpg?wh=1142*632\" alt=\"\"></p><p>那么，此时如果客户端访问节点2执行读操作，就无法读到最新写入的X值，这就不满足一致性了。<br>\n<img src=\"https://static001.geekbang.org/resource/image/31/1f/31b628027351e4b5a6ffb31cdcba431f.jpg?wh=1142*545\" alt=\"\"></p><p>如果节点1收到写请求后，通过节点间的通讯，同时将节点1和节点2的X值都更新为2，然后返回成功给客户端。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/51/890b9890584a4f17306da88fedea3451.jpg?wh=1142*625\" alt=\"\"></p><p>那么在完成写请求后，不管客户端访问哪个节点，读取到的都是同一份最新写入的数据，这就叫一致性。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/c2/9bf9c133ad815219791f87799bee5cc2.jpg?wh=1142*717\" alt=\"\"></p><p>一致性这个指标，描述的是分布式系统非常重要的一个特性，强调的是数据正确。也就是说，对客户端而言，每次读都能读取到最新写入的数据。</p><p>不过集群毕竟不是单机，当发生分区故障的时候，有时不能仅仅因为节点间出现了通讯问题，无法响应最新写入的数据，之后在客户端查询数据时，就一直返回给客户端出错信息。这句话怎么理解呢？我来举个例子。</p><p>业务集群中的一些关键系统，比如名字路由系统（基于Raft算法的强一致性系统），如果仅仅因为发生了分区故障，无法响应最新数据（比如不满足“大多数”，没有了领导者），为了不破坏一致性，那么客户端查询相关路由信息时，系统就一直返回给客户端出错信息，此时相关的业务都将因为获取不到指定路由信息而不可用、瘫痪，这可以说是灾难性的故障了。</p><p>这个时候，我们就需要牺牲数据正确，每个节点使用本地数据来响应客户端请求，来保证服务可用，<strong>这就是我要说的另外一个指标，可用性。</strong></p><p>可用性说的是任何来自客户端的请求，不管访问哪个非故障节点，都能得到响应数据，但不保证是同一份最新数据。你也可以把可用性看作是分布式系统对访问本系统的客户端的另外一种承诺：我尽力给你返回数据，不会不响应你，但是我不保证每个节点给你的数据都是最新的。<strong>这个指标强调的是服务可用，但不保证数据正确。</strong></p><p>我还是用一个例子，帮助你理解一下。比如，用户可以选择向节点1或节点2 发起读操作，如果不管节点间的数据是否一致，只要节点服务器收到请求，就响应X的值，那么，2个节点的服务是满足可用性的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/a4/b27f4ff771fa8e9b671f5864c96d9aa4.jpg?wh=1142*841\" alt=\"\"></p><p>最后的分区容错性说的是，当节点间出现任意数量的消息丢失或高延迟的时候，系统仍然在继续工作。也就是说，分布式系统在告诉访问本系统的客户端：不管我的内部出现什么样的数据同步问题，我会一直运行。<strong>这个指标，强调的是集群对分区故障的容错能力。</strong></p><p>来看下面的图，当节点1和节点2通信出问题的时候，如果系统仍能继续工作，那么，2个节点是满足分区容错性的。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/65/a61a426bccbe27e48ca75db909ae8265.jpg?wh=1142*866\" alt=\"\"></p><p>因为分布式系统与单机系统不同，它涉及到多节点间的通讯和交互，节点间的分区故障是必然发生的，<strong>所以我要提醒你的是，在分布式系统中分区容错性是必须要考虑的。</strong></p><p>现在你了解了一致性、可用性和分区容错性，那么你在设计分布式系统时，是选择一致性？还是可用性？还是分区容错性？还是都可以选择呢？这三个特性有什么冲突么？这些问题就与我接下来要讲的“CAP不可能三角”有关了。</p><h2>CAP不可能三角</h2><p>CAP不可能三角说的是对于一个分布式系统而言，一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance）3个指标不可兼得，只能在3个指标中选择2个。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/48/67aa4a0e56dcc8ad34bf1b0232f12748.jpg?wh=1142*911\" alt=\"\"></p><p>CAP不能三角最初是埃里克·布鲁尔（Eric Brewer）基于自己的工程实践，提出的一个猜想，后被赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）证明，证明过程可以参考论文<a href=\"https://dl.acm.org/citation.cfm?id=564601\">《Brewer’s conjecture and the feasibility of consistent, available, partition-tolerant web services》</a>，你记住结论就好了。不过，为了帮你阅读论文，我补充一点：</p><p><strong>基于证明严谨性的考虑，赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）对指标的含义做了预设和限制，比如，将一致性限制为原子一致性。</strong></p><p>说了这么多，那么CAP理论是怎么解决我在开篇提到的问题呢？或者说，你要如何使用CAP理论来思考和设计分区容错一致性模型呢？</p><h2>如何使用CAP理论</h2><p>我们都知道，只要有网络交互就一定会有延迟和数据丢失，而这种状况我们必须接受，还必须保证系统不能挂掉。所以就像我上面提到的，节点间的分区故障是必然发生的。也就是说，分区容错性（P）是前提，是必须要保证的。</p><p>现在就只剩下一致性（C）和可用性（A）可以选择了：要么选择一致性，保证数据正确；要么选择可用性，保证服务可用。那么CP和AP的含义是什么呢？</p><ul>\n<li>当选择了一致性（C）的时候，一定会读到最新的数据，不会读到旧数据，但如果因为消息丢失、延迟过高发生了网络分区，那么这个时候，当集群节点接收到来自客户端的读请求时，为了不破坏一致性，可能会因为无法响应最新数据，而返回出错信息。</li>\n<li>当选择了可用性（A）的时候，系统将始终处理客户端的查询，返回特定信息，如果发生了网络分区，一些节点将无法返回最新的特定信息，它们将返回自己当前的相对新的信息。</li>\n</ul><p><strong>这里我想强调一点，大部分人对CAP理论有个误解，认为无论在什么情况下，分布式系统都只能在C和A中选择1个。</strong>其实，在不存在网络分区的情况下，也就是分布式系统正常运行时（这也是系统在绝大部分时候所处的状态），就是说在不需要P时，C和A能够同时保证。只有当发生分区故障的时候，也就是说需要P时，才会在C和A之间做出选择。而且如果读操作会读到旧数据，影响到了系统运行或业务运行（也就是说会有负面的影响），推荐选择C，否则选A。</p><p>那么我当时是怎么根据场景特点，进行CAP权衡，设计适合的分布式系统呢？为了便于你理解，我先来说说背景。</p><p>开源版的InfluxDB，缺乏集群能力和可用性，而且，InfluxDB是由META节点和DATA节点2个逻辑单元组成，这2个节点的功能和数据特点不同，需要我们分别为它们设计分区容错一致性模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/5d/9397c99a462d1dcb9ca69328ba34515d.jpg?wh=1142*812\" alt=\"\" title=\"InfluxDB程序的逻辑架构示意图\"></p><p>我具体是这么设计的：</p><ul>\n<li>\n<p><strong>作为分布式系统，分区容错性是必须要实现的，</strong>不能因为节点间出现了分区故障，而出现整个系统不工作的情况。</p>\n</li>\n<li>\n<p>考虑到META节点保存的是系统运行的关键元信息，比如数据库名、表名、保留策略信息等，所以必须实现一致性。也就是说，每次读，都要能读取到最新数据，这样才能避免因为查询不到指定的元信息，时序数据记录写入失败或者系统没办法正常运行。比如，创建了数据库telegraf之后，如果系统不能立刻读取到这条新的元信息，那么相关的时序数据记录，就会因为找不到指定数据库信息而写入失败，<strong>所以，我选择CAP理论中的C和P，采用CP架构。</strong></p>\n</li>\n<li>\n<p>DATA节点保存的是具体的时序数据记录，比如一条记录CPU负载的时序数据，“cpu_usage,host=server01,location=cn-sz user=23.0,system=57.0”。虽然这些数据不是系统运行相关的元信息，但服务会被访问频繁，水平扩展、性能、可用性等是关键，<strong>所以，我选择了CAP理论中的A和P，采用AP架构。</strong></p>\n</li>\n</ul><p>你看，我用CAP理论进行思考，并分别设计了InfluxDB的META节点和DATA节点的分区容错一致性模型，而你也可以采用类似的思考方法，设计出符合自己业务场景的分区容错一致性模型。</p><p>那么假设我当时没有受到CAP理论的影响，或者对CAP理论理解不深入，DATA节点不采用AP架构，而是直接使用了现在比较流行的共识算法，比如使用Raft算法，会有什么痛点呢？</p><ul>\n<li>受限于Raft的强领导者模型。所有写请求都在领导者节点上处理，整个集群的写性能等于单机性能。这样会造成集群接入性能低下，无法支撑海量或大数据量的时序数据。</li>\n<li>受限于强领导者模型，以及Raft的节点和副本一一对应的限制，无法实现水平扩展，分布式集群扩展了读性能，但写性能并没有提升。这样会出现写性能低下，和因为架构上的限制，无法提升写性能的问题。</li>\n</ul><p>关于Raft算法的一些细节（比如强领导模型），我会在07讲详细带你了解，这里你知道有这么回事儿就可以了。</p><p>那么在这里，我也想考考你：如果META节点采用AP架构，会有什么痛点呢？你可以思考一下。</p><h2>内容小结</h2><p>本节课我主要带你了解了CAP理论，以及CAP理论的应用，我希望你明确的重点如下：</p><ul>\n<li>\n<p>CA模型，在分布式系统中不存在。因为舍弃P，意味着舍弃分布式系统，就比如单机版关系型数据库MySQL，如果MySQL要考虑主备或集群部署时，它必须考虑P。</p>\n</li>\n<li>\n<p>CP模型，采用CP模型的分布式系统，舍弃了可用性，一定会读到最新数据，不会读到旧数据。一旦因为消息丢失、延迟过高发生了网络分区，就影响用户的体验和业务的可用性（比如基于Raft的强一致性系统，此时可能无法执行读操作和写操作）。典型的应用是Etcd，Consul和Hbase。</p>\n</li>\n<li>\n<p>AP模型，采用AP模型的分布式系统，舍弃了一致性，实现了服务的高可用。用户访问系统的时候，都能得到响应数据，不会出现响应错误，但会读到旧数据。典型应用就比如Cassandra和DynamoDB。</p>\n</li>\n</ul><p>在多年的开发实践中，我一直喜欢埃里克·布鲁尔的猜想，不是因为它是CAP理论的本源，意义重大，而是因为它源自高可用、高扩展大型互联网系统的实践，强调在数据一致性（ACID）和服务可用性（BASE）之间权衡妥协。在我看来，CAP理论像PH试纸一样，可以用来度量分布式系统的酸碱值，帮助我们思考如何设计合适的酸碱度，在一致性和可用性之间进行妥协折中，设计出满足场景特点的分布式系统。关于酸（Acid）和碱（Base），我会在03和04讲带你了解。</p><p>最后我想说的是，在当前分布式系统开发中，延迟是非常重要的一个指标，比如，在QQ后台的名字路由系统中，我们通过延迟评估服务可用性，进行负载均衡和容灾；再比如，在Hashicorp/Raft实现中，通过延迟评估领导者节点的服务可用性，以及决定是否发起领导者选举。所以，我希望你在分布式系统的开发中，也能意识到延迟的重要性，能通过延迟来衡量服务的可用性。</p><h2>课堂思考</h2><p>既然我提了CAP理论是一个很好的思考框架，能帮助我们思考，如何进行权衡，设计适合业务场景特性的分布式系统，那么你不妨思考一下，CP模型的KV存储和AP模型的KV存储，分别适合怎样的业务场景呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这节课让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"加餐  | 拜占庭将军问题：如何基于签名消息实现作战计划的一致性？","id":215640},"right":{"article_title":"03 | ACID理论：CAP的酸，追求一致性","id":199663}},"comments":[{"had_liked":false,"id":177261,"user_name":"Sinclairs","can_delete":false,"product_type":"c1","uid":1019373,"ip_address":"","ucode":"0042C53C86E3A2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/ed/ea2cbf3a.jpg","comment_is_top":false,"comment_ctime":1581335162,"is_pvip":false,"replies":[{"id":"68961","content":"加一颗星:)，能否容忍的可能的短暂的一致性延迟，是关键。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581443404,"ip_address":"","comment_id":177261,"utype":1}],"discussion_count":3,"race_medal":0,"score":"250689438330","product_id":100046101,"comment_content":"CP模型的KV存储，适合用于提供基础服务，保存少量数据，作用类似zookeeper。<br>AP模型的KV存储，适合查询量大的场景，不要求数据的强一致性，目前广泛应用于分布式缓存系统。<br>一点思考，不知道对不对？","like_count":58,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483366,"discussion_content":"加一颗星:)，能否容忍的可能的短暂的一致性延迟，是关键。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581443404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166191,"discussion_content":"嗯 我也是这样认为的 \nCP 模型KV存储 适合 事务、元数据信息存储\nAP 模型KV存储 适合 一致性要求不高的业务存储","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581350388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388507,"discussion_content":"那用zk来保存服务节点 以及 分布式锁 岂不是不行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628815480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177539,"user_name":"大漠胡萝卜","can_delete":false,"product_type":"c1","uid":1198953,"ip_address":"","ucode":"FBE51E4A13EF4F","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/69/c02eac91.jpg","comment_is_top":false,"comment_ctime":1581413838,"is_pvip":false,"replies":[{"id":"69216","content":"网络分区是指因为网络故障导致网络不连通，不同节点分布在不同的子网络中，各个子网络内网络正常。其实，你可以这么理解，节点之间的网络通讯出现了消息丢失、高延迟的问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581699685,"ip_address":"","comment_id":177539,"utype":1}],"discussion_count":2,"race_medal":0,"score":"134725400014","product_id":100046101,"comment_content":"网络分区，怎么理解？","like_count":32,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483456,"discussion_content":"网络分区是指因为网络故障导致网络不连通，不同节点分布在不同的子网络中，各个子网络内网络正常。其实，你可以这么理解，节点之间的网络通讯出现了消息丢失、高延迟的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581699685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507527,"avatar":"https://static001.geekbang.org/account/avatar/00/17/00/c7/da08a1f4.jpg","nickname":"俊","note":"","ucode":"57B6C6A1A5F6B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171116,"discussion_content":"两个机房或两台要通信的电脑网络断了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581692449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178420,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1581685023,"is_pvip":false,"replies":[{"id":"69217","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581699757,"ip_address":"","comment_id":178420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100365932831","product_id":100046101,"comment_content":"cp模型适合要求acid场景，比如银行转账。ap模型适合只要求base的场景，比如网页cdn场景，不知道理解得对不对。","like_count":23,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483812,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581699757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177625,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1581436320,"is_pvip":false,"replies":[{"id":"69229","content":"可以这么理解，分布式系统是必须要考虑分区容错性的，也就是说，出现分区错误时，比如节点间通讯丢消息了，系统要能运行，那么，这时候如何运行呢？是选择一致性呢，还是选择可用性呢。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581705262,"ip_address":"","comment_id":177625,"utype":1}],"discussion_count":27,"race_medal":0,"score":"87480782240","product_id":100046101,"comment_content":"还是不太明白分区容错性P和可用性A的区别，不都是随时可以提供服务吗？","like_count":20,"discussions":[{"author":{"id":1109559,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/37/d94534b1.jpg","nickname":"背包工程师","note":"","ucode":"4AE7C506DFD46B","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168971,"discussion_content":"!P:出现分区故障了，系统认为活不下去了，撂挑子。\nCP:出现分区故障了，首先我不能撂挑子，我更在乎各节点一致，那我就等等，等到他们一致吧。\nAP:出现分区故障了，我也不能撂挑子，我更关心系统的可用性，先不等各节点一致了，干活，错就错了。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1581599741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1311806,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqNKGqOqXlibicdsywqCDMV1IAiaUEibWufvRHQppFsHeZWIVOho02XLTxegcOoaOiarmvQwgl6VevC1VQ/132","nickname":"Safufu","note":"","ucode":"D59C3C136D356B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109559,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/37/d94534b1.jpg","nickname":"背包工程师","note":"","ucode":"4AE7C506DFD46B","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":176891,"discussion_content":"cap只能选二     但是 ! p下也没法实现ca    p有什么存在的意义呢..      直接叫ca模型不是更合理","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582047522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":168971,"ip_address":""},"score":176891,"extra":""},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109559,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/37/d94534b1.jpg","nickname":"背包工程师","note":"","ucode":"4AE7C506DFD46B","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":180913,"discussion_content":"所以作者的意思是：发生分区时，系统内部要能知道自己要干什么，但是否能对外提供正常服务，是由选择A还是C来决定的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582303045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":168971,"ip_address":""},"score":180913,"extra":""},{"author":{"id":1212766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELvicBrL9hpcov4BjmDB7OOicfRaB7icPBcS7KtM2TgawKTLz8V6eZdXwiaWibgD8ktanE4JXhIGOTlecg/132","nickname":"cocojia2000","note":"","ucode":"103D0866C7D846","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1311806,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqNKGqOqXlibicdsywqCDMV1IAiaUEibWufvRHQppFsHeZWIVOho02XLTxegcOoaOiarmvQwgl6VevC1VQ/132","nickname":"Safufu","note":"","ucode":"D59C3C136D356B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565368,"discussion_content":"同样的疑问 很久很久了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650453015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176891,"ip_address":""},"score":565368,"extra":""}]},{"author":{"id":1850369,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/01/29008d6a.jpg","nickname":"千城","note":"","ucode":"346A133059977D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179865,"discussion_content":"我是这么理解的，一套分布式系统，按多地容灾来配置，有中国区服务，有美国区服务，这里中国区和美国区就叫分区。当美国区挂了，还有中国区可以提供服务，这就叫可用性(即A)，可用性是现在整个分布式系统的视角说的;\n按照一致性原则，中国区和美国区应该所有时刻数据都是一致的，但是不一致是可能存在的，比如，某个时间，还没有完成同步，中国区的结果是1，美国区的结果是2，但是这个时候中国区和美国区都还能响应请求，这就叫分区容错性(即P)。但是这种情况下，到底能不能对外提供服务，那就取决于你的架构到底是AP(能)还是CP(不能)。\n不知道我这样理解的是否合适，请老师点拨一下。\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1582257686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1850369,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/01/29008d6a.jpg","nickname":"千城","note":"","ucode":"346A133059977D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245486,"discussion_content":"加一颗星:)，一般一个分布式系统，不会跨区域补充的，稳定性是问题。所以，关于分区错误，可以理解为丢失任意消息或者高延迟。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587662589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":179865,"ip_address":""},"score":245486,"extra":""}]},{"author":{"id":1755152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","nickname":"Info_E","note":"","ucode":"97207B2CC4C776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367574,"discussion_content":"P 是分区容忍性。就是系统在有网络故障，节点间不能通信时，依旧可以对外提供服务的性质； A是可用性，无关网络，指的是程序能对外提供服务。\nAP指的是，保证在系统有多个网络节点时（P），能对外提供服务(A)，但是不保证各个节点提供的服务返回的数据一样（C）；\nCP指的是，保证系统有多个网络节点时(P)，各个节点对外返回的数据一致(C)，这里的一致指相同的结果，如数据一样或者都返回系统错误。但是你看，有可能返回系统错误，这就不满足可用性（A）了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1618396899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236305,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/51/a7e82963.jpg","nickname":"波波","note":"","ucode":"847168EE0E7D44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181361,"discussion_content":"我的理解，没有了P那就是玩单机了，就不会有所谓的一致性和可用性之说，只要系统不挂，就能提供服务","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582365099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1236305,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/51/a7e82963.jpg","nickname":"波波","note":"","ucode":"847168EE0E7D44","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245484,"discussion_content":"加一颗星:)，是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587662324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":181361,"ip_address":""},"score":245484,"extra":""}]},{"author":{"id":1120350,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/5e/abb7bfe3.jpg","nickname":"哈哈哈哈哈哈哈哈","note":"","ucode":"8186E8CF7D39BE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178271,"discussion_content":"这个作者的回复真的没看懂，车轱辘话😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582130303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035366,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/66/9097dcd3.jpg","nickname":"张海峰","note":"","ucode":"72074A8D9FA66F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167510,"discussion_content":"P你可以理解为分布式的基础，都是单机了就没有什么分布式了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581504850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2215215,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL0KHoPPP9kEd9a5P4iaNAMbfe94LH5ZBOXO7nRwz8wFXoBzon4ml3XoBCttOmI7FJ8zfXhBDYdSgg/132","nickname":"Koliday","note":"","ucode":"C5EBA6C28BAA31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384275,"discussion_content":"不知道是不是可以这么理解，现有两个网络区域A和B，当客户端向区域A中的a节点写入数据，a需要复制给B区域的b节点，如果这时出现了网络分区，即区域A和B无法互通，日志复制时就会出现网络超时等现象，这时候就触发了CAP中的P，你需要决定这种情况下，节点a和b还要不要对外提供服务，如果你选择了要继续提供服务，你就必须在C和A中选一个\n如果选择了C，那么你就必须等到分区A和B网络恢复再对外继续提供对该数据的读写服务（只是阻塞该数据的读写，其他数据不阻塞，尽管其他数据的新写也会有同样的问题）\n如果选择了A，那么写入到a节点后就算成功了，下次客户端读数据既可能读到a节点的最新数据，也可能读到b节点的老数据，前提是客户端对是否要读最新数据不敏感，之后的时间a节点可能会每隔一段时间向b节点同步一次日志，直到同步成功，达到最终一致\n仅个人理解，可能有误","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1626451474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216881,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/71/0b16655d.jpg","nickname":"小麦","note":"","ucode":"55C7199A0D5659","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215775,"discussion_content":"对作者的评论，我理解是：P是前提，而CA是结果。也就是做一个分布式系统，必须考虑网络的问题，当出现网络分区时，我的系统必须正常提供服务，但是如何算正常地提供服务，这就是CA来决定的了，因为不同的系统有不同的有求。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585382093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1216881,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/71/0b16655d.jpg","nickname":"小麦","note":"","ucode":"55C7199A0D5659","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":245476,"discussion_content":"是的。其实，CAP定理虽然严谨正确，但有点脱离埃里克·布鲁尔的猜想的初心，针对当时ACID系统被广为接收，希望能引发大家对可用性的思考，也就是根据实际场景特点，在酸（Acid）和碱（Base）之间权衡折中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587660815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215775,"ip_address":""},"score":245476,"extra":""}]},{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483489,"discussion_content":"可以这么理解，分布式系统是必须要考虑分区容错性的，也就是说，出现分区错误时，比如节点间通讯丢消息了，系统要能运行，那么，这时候如何运行呢？是选择一致性呢，还是选择可用性呢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581705262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275690,"avatar":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","nickname":"cp★钊","note":"","ucode":"6B86D4D538BDF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200588,"discussion_content":"P是分区容忍，选择P，如果分区间网络出问题，需要继续提供服务能力（包括读和写）。\n选A是可以继续读写。\n选C是暂时不提供写，写会失败，但读还是可以提供的。\n如果P不选，那两个机器之间有个机器或者之间网络挂掉了就停止服务了，这和单机系统有什么区别。。没有网络这个问题进行困扰，自然也就一直是AC了。\n不知道我的理解是否正确~ 打算看看论文，希望能看懂。。这样能关注更多细节，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583684633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1275690,"avatar":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","nickname":"cp★钊","note":"","ucode":"6B86D4D538BDF7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245489,"discussion_content":"加一颗星:)，修正一点（关于C，之前的那句话，是按照最初的埃里克·布鲁尔的猜想，来解释的，C是ACID的C），更严谨的说法是，选择C，A肯定是不满足了，读、写，取决于具体实现，如果是基于2pc实现的ACID，那就不可写，数据依然可读，如果基于Raft实现，那么就可能既不可读、也不可写（比如没了领导者的情况）。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587666108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":200588,"ip_address":""},"score":245489,"extra":""}]},{"author":{"id":1307392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/00/01137172.jpg","nickname":"Bobo","note":"","ucode":"7D5D9D84359B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586393,"discussion_content":"分区容错性相当具有误导性，按《数据密集型应用系统设计》一书的说法，可以这样理解：分布式系统因为依赖于不可靠的网络，必然存在分区可能，这种情况下A和C不可兼得。不必过多纠结分区容错性的定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662182772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLniccwC1Mootc7IQsRGUTX3ZkkCKPc7lYV0g8CAqscWtAjd8xkHYcY3UFbYvicm42FXuAO5bZP6WQ/132","nickname":"Geek_417e74","note":"","ucode":"BEA8915879274D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548719,"discussion_content":"P：当出现网络分区时（比如主节点和某个从节点间网络短暂连接不上），集群不能把这个错误抛给客户端，集群内要自己解决这个错误（容错），不能因此整个集群不工作了，否则不如用单机，太容易出错了。当出现网络分区时，首先集群还要能工作(P),  集群对分区故障的处理方式为C（内部数据不一致，返回失败)；A（内部数据不一致，返回老数据）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643339923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125628,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/fc/0264d511.jpg","nickname":"creep","note":"","ucode":"9C6C185AB9CA21","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203528,"discussion_content":"“比如节点间通讯丢消息了，系统要能正常运行，那么，这时候如何运行呢？是选择一致性呢，还是选择可用性呢”\n咦节点间通讯丢消息了，如果选择一致性那么系统不是没法正常运行么，如果能正常运行那不是会查到不一致的数据么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584039128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1125628,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/fc/0264d511.jpg","nickname":"creep","note":"","ucode":"9C6C185AB9CA21","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":245481,"discussion_content":"加一颗星:)，CAP本质上，是P，发生了，只能在C和A之间二选一，按照CAP定理的预设和限制，这是能证明的，也很容易理解。那么，在实际系统中（比如基于2PC、Raft实现），如果我们选择了C，当无法返回最新数据时，会返回错误，这是一种运行行为；如果选择了A，会返回旧数据，这也是一种运行行为。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587661915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":203528,"ip_address":""},"score":245481,"extra":""},{"author":{"id":1318915,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2SjCeylLv0P3Glle5277kA4b8cAuxr1NrC0njPKEqzSpB8IEicHB29GicFFwG1qiaxs4hxRiaBmoibVw/132","nickname":"阳仔","note":"","ucode":"4907A3750CEAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":265608,"discussion_content":"那为啥不叫CA理论，加P感觉更混淆了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589420399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245481,"ip_address":""},"score":265608,"extra":""},{"author":{"id":1315062,"avatar":"https://static001.geekbang.org/account/avatar/00/14/10/f6/f8f90a5a.jpg","nickname":"去吹风","note":"","ucode":"21534AAC20A859","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1318915,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2SjCeylLv0P3Glle5277kA4b8cAuxr1NrC0njPKEqzSpB8IEicHB29GicFFwG1qiaxs4hxRiaBmoibVw/132","nickname":"阳仔","note":"","ucode":"4907A3750CEAD6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274405,"discussion_content":"加上p就表示分布式，分布式下选择a或者c, 如果要完全的ac，就只能是单机的，就不是p了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1590580158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265608,"ip_address":""},"score":274405,"extra":""}]},{"author":{"id":1000237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","nickname":"enjoylearning","note":"","ucode":"DCAF8538DEA277","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171827,"discussion_content":"这里的分区就是节点吗？或者不是一个概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581751641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","nickname":"enjoylearning","note":"","ucode":"DCAF8538DEA277","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174261,"discussion_content":"就是你集群下边的单个服务节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581902554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":171827,"ip_address":""},"score":174261,"extra":""}]}]},{"had_liked":false,"id":177279,"user_name":"zjm_tmac","can_delete":false,"product_type":"c1","uid":1849621,"ip_address":"","ucode":"5E1DE9A815A98B","user_header":"","comment_is_top":false,"comment_ctime":1581341059,"is_pvip":false,"replies":[{"id":"68962","content":"加一颗星:)。这里是简化表示，比如你可以理解成二阶段提交的事务。关于第一个“如果”，多节点的副本是无法做到完全同时完成提交的，但能保证写完成后，读取都是一致的；如果需要实现读取的严格一致性，比如，可以通过实现“Master-Slave”模型，读写只访问Master节点，实现读取的严格一致性；第二个“如果”，就是常见事务型系统的缺点。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581446505,"ip_address":"","comment_id":177279,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83185719683","product_id":100046101,"comment_content":"这里的节点1同步给节点2指的是日志复制还是等待节点2的事务提交完成？<br>如果是日志复制的话，会不会两边提交事务的时间不一致，造成读取不一致。<br>如果是等待事务提交的话，是不是变成了完全阻塞的，性能很低还有各种各样问题。","like_count":19,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483374,"discussion_content":"加一颗星:)。这里是简化表示，比如你可以理解成二阶段提交的事务。关于第一个“如果”，多节点的副本是无法做到完全同时完成提交的，但能保证写完成后，读取都是一致的；如果需要实现读取的严格一致性，比如，可以通过实现“Master-Slave”模型，读写只访问Master节点，实现读取的严格一致性；第二个“如果”，就是常见事务型系统的缺点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581446505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307793,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5WaRd8ibAozKXvIGWXKDq1CdxLhkdnRyyTKcgMDYaFDAaKqg2IpETOC3RacYoggGOhFMeMGicRXxA/132","nickname":"天机老人","note":"","ucode":"B553FBBF9DD41B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183740,"discussion_content":"针对第二个“如果”，能否改成三阶段提交去解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582512921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181078,"user_name":"iron_man","can_delete":false,"product_type":"c1","uid":1099883,"ip_address":"","ucode":"C0053A59442910","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/6b/0f3876ef.jpg","comment_is_top":false,"comment_ctime":1582471217,"is_pvip":false,"replies":[{"id":"70332","content":"前半部分的容忍性，其实指的的是可用性，做法是分区部署、增加数据缓存，提升可用性。分区容错性是一种行为，指的是分区错误发生时，系统依然能提高服务，这时可以提供的服务，有两种，一致性和可用性，需要注意的是，有些服务是要求一致性的，也就是说，增加集群副本数，是不能解决问题的。可用性，就比较好理解了，但在实际中，仅仅增加副本数或缓存是不够的，还需要全方位的监控能力、高灵敏的故障检测能力、全网的调度能力，等等。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582566435,"ip_address":"","comment_id":181078,"utype":1}],"discussion_count":4,"race_medal":0,"score":"74596915249","product_id":100046101,"comment_content":"知乎上看到的，与各位分享<br><br>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。<br><br>作者：邬江<br>链接：https:&#47;&#47;www.zhihu.com&#47;question&#47;54105974&#47;answer&#47;139037688<br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","like_count":17,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484909,"discussion_content":"前半部分的容忍性，其实指的的是可用性，做法是分区部署、增加数据缓存，提升可用性。分区容错性是一种行为，指的是分区错误发生时，系统依然能提高服务，这时可以提供的服务，有两种，一致性和可用性，需要注意的是，有些服务是要求一致性的，也就是说，增加集群副本数，是不能解决问题的。可用性，就比较好理解了，但在实际中，仅仅增加副本数或缓存是不够的，还需要全方位的监控能力、高灵敏的故障检测能力、全网的调度能力，等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582566435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388866,"discussion_content":"我觉得知乎这个关于分区容忍性的回答不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629020686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052901,"avatar":"","nickname":"soho","note":"","ucode":"E779124EC1E12C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327843,"discussion_content":"增加副本 不能解决问题是指什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605967028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2037282,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYAcOqrNNxmMuKsd6Dh69BzxiaXjJRh6IMnQlxOqBFiae1EMic32Wv6aFESWytliaL7uniaZ4DgNUwxg/132","nickname":"黄序","note":"","ucode":"C8C2749E2DE72B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052901,"avatar":"","nickname":"soho","note":"","ucode":"E779124EC1E12C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395815,"discussion_content":"作者的原话是：有些服务是要求一致性的，也就是说，增加集群副本数，是不能解决问题的。就像是要求严格ACID的强事务性任务，所有的节点数据必须一致，否则就会出现问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632358200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327843,"ip_address":""},"score":395815,"extra":""}]}]},{"had_liked":false,"id":185969,"user_name":"霹雳大仙pp","can_delete":false,"product_type":"c1","uid":1046893,"ip_address":"","ucode":"F654FD9AEC1D56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/6d/b623562a.jpg","comment_is_top":false,"comment_ctime":1583733991,"is_pvip":false,"replies":[{"id":"75878","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586105014,"ip_address":"","comment_id":185969,"utype":1}],"discussion_count":1,"race_medal":3,"score":"61713276135","product_id":100046101,"comment_content":"以阿里nacos来说，配置中心是cp，保证各节点配置强一致；注册中心是ap，保证了可用性，牺牲了强一致性。<br>","like_count":15,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486565,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586105014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180891,"user_name":"NICK","can_delete":false,"product_type":"c1","uid":1069035,"ip_address":"","ucode":"0B7A9C3DF8DED8","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/eb/3165ae4c.jpg","comment_is_top":false,"comment_ctime":1582437387,"is_pvip":false,"replies":[{"id":"70225","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582467019,"ip_address":"","comment_id":180891,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48827077643","product_id":100046101,"comment_content":"可不可以理解成在分布式场景下:<br>1.  如果业务需要强一致性，则只能牺牲可用性而选择CP模型。<br>2. 如果业务需要最终一致性即可，则优先满足可用性，选择AP模型？","like_count":11,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484835,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582467019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179822,"user_name":"longyi","can_delete":false,"product_type":"c1","uid":1318113,"ip_address":"","ucode":"204CC8D3E98AAC","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/e1/c99d1473.jpg","comment_is_top":false,"comment_ctime":1582104897,"is_pvip":false,"replies":[{"id":"69858","content":"加一颗星:)，是写请求，相比Raft，Multi-Raft是有改进的，但和最终一致性的方案相比，还是有差距。其实，Raft不适合时序数据场景，比如，如果即使采用multi-raft，因为时序数据，有时需要拉取一批数据，这时需要在外围，再实现分布式迭代器，工作量，还是蛮大的；另外，在Raft中，uncommitted的log，可能被丢弃了，也可能在后面被提交了，也就是说，当Raft返回给客户端超时错误时，数据是否会被提交，是个不确定状态，如果这时，客户端不重试，可能会丢数据，如果客户端重试，对于没有带时间戳的时序数据，会导致数据重复，当然，我们可以通过重新约定InfluxDB行为、实现冥等操作等，来解决这个问题，但这样做，不仅增加工作量和系统复杂度，还影响用户的体验；还有最后一点，也就是最最重要的，高性能的背后，是成本，是钱，这个经济效益，会在海量数据场景，被放大，性能是最核心的一个考虑因素。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582132241,"ip_address":"","comment_id":179822,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35941843265","product_id":100046101,"comment_content":"受限于 Raft 的强领导者模型。所有请求都在领导者节点上处理，整个集群的性能等于单机性能。这样会造成集群接入性能低下，无法支撑海量或大数据量的时序数据。<br>&#47;&#47;老师，这里应该是所有的写请求都在领导者节点上处理吧？<br>&#47;&#47;另外，如果采用multi-raft，每个raft分片都有自己的leader，这样请求将不限于节点，而是在分片的leader上，这样性能也没那么差，老师觉得呢？","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484416,"discussion_content":"加一颗星:)，是写请求，相比Raft，Multi-Raft是有改进的，但和最终一致性的方案相比，还是有差距。其实，Raft不适合时序数据场景，比如，如果即使采用multi-raft，因为时序数据，有时需要拉取一批数据，这时需要在外围，再实现分布式迭代器，工作量，还是蛮大的；另外，在Raft中，uncommitted的log，可能被丢弃了，也可能在后面被提交了，也就是说，当Raft返回给客户端超时错误时，数据是否会被提交，是个不确定状态，如果这时，客户端不重试，可能会丢数据，如果客户端重试，对于没有带时间戳的时序数据，会导致数据重复，当然，我们可以通过重新约定InfluxDB行为、实现冥等操作等，来解决这个问题，但这样做，不仅增加工作量和系统复杂度，还影响用户的体验；还有最后一点，也就是最最重要的，高性能的背后，是成本，是钱，这个经济效益，会在海量数据场景，被放大，性能是最核心的一个考虑因素。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582132241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065477,"avatar":"https://static001.geekbang.org/account/avatar/00/10/42/05/a7dd62b4.jpg","nickname":"北邙","note":"","ucode":"393F3CA7BEE5A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182463,"discussion_content":"所以TiDB和Tikv是分开架构的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582427710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177437,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1581392314,"is_pvip":false,"replies":[{"id":"69211","content":"这里，是从大家在日常实践中，最直观感受的角度，进行表述的，一致性，最直观的，是影响到写，可用性，最直观的，是还能读到相对新的数据。你可以这么理解，当发生分区错误是，选择了C，新数据，都无法写入了，那就可能也不能读取了；选择了A，新数据，在部分节点上，能写入，也能被业务读取。<br><br>另外，Raft是一个共识算法，“大多数的约定”赋予了它容错能力，也就是少部分节点故障时，集群是正常运营和写入的。但需要你注意的是，Raft实现的是大多数节点间的数据的共识，不是数据副本的强一致性，分布式事务是实现强一致性的，你可以想象下，分区错误了，分布式事务是无法提交的，也就是新数据，是无法写入的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581689393,"ip_address":"","comment_id":177437,"utype":1}],"discussion_count":10,"race_medal":0,"score":"31646163386","product_id":100046101,"comment_content":"有个问题想不通，求助一下》<br>在如何使用CAP理论一节，但就文中定义来说: 选择C时拒绝的是&quot;写入&quot;。选择A时，讨论的是&quot;返回&quot;相对新的信息。<br>请问，根据这样的定义，某些基于raft的系统中(比如consul)，在分区后，在少数分区一方的拒绝写入，就满足了C，而任何一个节点都支持读取陈旧的数据，又满足了A。CAP齐全，这不是矛盾了么？<br>我查阅了些资料包括维基百科，对C和A的定义也都如此。<br>我发现&lt;&lt;designing data-intensive applications&gt;&gt;这本书里有简单的用写入或读取这样的字样，而是一直用&quot;线性一致性&quot;（p336）。<br><br>CP的KV存储一般都被借助用于提供给次级应用做严格的一致性的保障。<br>AP的KV存储一般都被用于海量数据高并发需求下的数据操作，或者是多可用区高延迟的场景下的最终一致性保障。<br>","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483425,"discussion_content":"这里，是从大家在日常实践中，最直观感受的角度，进行表述的，一致性，最直观的，是影响到写，可用性，最直观的，是还能读到相对新的数据。你可以这么理解，当发生分区错误是，选择了C，新数据，都无法写入了，那就可能也不能读取了；选择了A，新数据，在部分节点上，能写入，也能被业务读取。\n\n另外，Raft是一个共识算法，“大多数的约定”赋予了它容错能力，也就是少部分节点故障时，集群是正常运营和写入的。但需要你注意的是，Raft实现的是大多数节点间的数据的共识，不是数据副本的强一致性，分布式事务是实现强一致性的，你可以想象下，分区错误了，分布式事务是无法提交的，也就是新数据，是无法写入的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581689393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175304,"discussion_content":"也有同样的疑问。C的时候新数据不能写入，但是这个时候读请求能处理吗？A的时候，能正常的读，也能正常的写吧，只不过数据有可能不一致罢了。(有时感觉钻牛角尖了)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581953368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1615247,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/8f/693e483e.jpg","nickname":"Undefined","note":"","ucode":"36DEBA64C297D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177698,"discussion_content":"老师说了能读，按分布式事务提交的方式来，没有完成全部同步就回滚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582119052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":175304,"ip_address":""},"score":177698,"extra":""}]},{"author":{"id":1035366,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/66/9097dcd3.jpg","nickname":"张海峰","note":"","ucode":"72074A8D9FA66F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167509,"discussion_content":"既然都拒绝写入了，当时是无法满足A了，本来是要写数据进去的，现在不让写了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581504802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035366,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/66/9097dcd3.jpg","nickname":"张海峰","note":"","ucode":"72074A8D9FA66F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167564,"discussion_content":"所以你也同意A的定义中要增加可写入？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581509986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":167509,"ip_address":""},"score":167564,"extra":""},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035366,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/66/9097dcd3.jpg","nickname":"张海峰","note":"","ucode":"72074A8D9FA66F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332445,"discussion_content":"拒绝写，但是没拒绝读吧...至少不会在浏览器中看到未响应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607222775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":167509,"ip_address":""},"score":332445,"extra":""}]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172115,"discussion_content":"我没提到分布式事务，咋回答里出现分布式事务了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581770341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617421,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ae/0d/3e89877b.jpg","nickname":"Phil","note":"","ucode":"CBD45271013B2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170539,"discussion_content":"raft读也会转发给leader来处理的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581679420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617421,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ae/0d/3e89877b.jpg","nickname":"Phil","note":"","ucode":"CBD45271013B2A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171993,"discussion_content":"我知道的一般都会给用户开放读取陈旧数据的功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581764679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":170539,"ip_address":""},"score":171993,"extra":""}]},{"author":{"id":1071466,"avatar":"https://static001.geekbang.org/account/avatar/00/10/59/6a/c51e95b9.jpg","nickname":"jin","note":"","ucode":"F4A81D2B35A358","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170159,"discussion_content":"同不明白，希望有人解惑一下😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581673012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178458,"user_name":"小跑","can_delete":false,"product_type":"c1","uid":1466991,"ip_address":"","ucode":"44680D76B8FE8E","user_header":"https://static001.geekbang.org/account/avatar/00/16/62/6f/7f8a3bdb.jpg","comment_is_top":false,"comment_ctime":1581693197,"is_pvip":false,"replies":[{"id":"69465","content":"Raft是具有容错能力的共识算法，可以用来实现一致性，比如，类似Google Chubby，读写操作都在领导者节点上执行。<br>可以这么理解，分布式事务实现的是一致性，不能容忍任何节点出问题；只要集群中有一个节点，都能继续提供服务，可以把这个理解为可用性。而Raft等共识算法，能容忍少数节点的故障，但通过读写操作都在领导者节点上执行，也能为业务提供一致性的数据服务，可以将共识算法理解为对分布式事务型算法的改进，既有容错能力，又能提供一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581870103,"ip_address":"","comment_id":178458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27351496973","product_id":100046101,"comment_content":"怎么觉得etcd-raft不是严格意义上的一致性，是线性的，只要满足大多数的情况下，哪怕个别节点挂掉，也能对外提供读写服务，所以从这个角度看，它其实一种ap模型吧。","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483829,"discussion_content":"Raft是具有容错能力的共识算法，可以用来实现一致性，比如，类似Google Chubby，读写操作都在领导者节点上执行。\n可以这么理解，分布式事务实现的是一致性，不能容忍任何节点出问题；只要集群中有一个节点，都能继续提供服务，可以把这个理解为可用性。而Raft等共识算法，能容忍少数节点的故障，但通过读写操作都在领导者节点上执行，也能为业务提供一致性的数据服务，可以将共识算法理解为对分布式事务型算法的改进，既有容错能力，又能提供一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581870103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210503,"user_name":"向前走","can_delete":false,"product_type":"c1","uid":1112651,"ip_address":"","ucode":"8956E92DCEFB60","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/4b/c385f755.jpg","comment_is_top":false,"comment_ctime":1587780381,"is_pvip":false,"replies":[{"id":"79323","content":"加一颗星:)，为了更好理解，我在内容上做了微调，避免了重复出现”提供服务“。分区容错性，说的是，出现分区错误时，系统要能继续运行，这时有两个选择，一致性和可用性。举个例子，2服务器节点，把网线剪断了，这时系统接收到来自客户端的读请求时，有2个选择：1，选择一致性，因不能响应最新数据，而返回出错给客户端；2，选择可用性，响应本地数据给客户端，也就是旧数据。此时，只能在C和A中，二选一。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588680331,"ip_address":"","comment_id":210503,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23062616861","product_id":100046101,"comment_content":"可用性和分区容错性理解上感觉有点类似，都是保证能提供服务，这两个主要的区别是什么呢，老师","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493038,"discussion_content":"加一颗星:)，为了更好理解，我在内容上做了微调，避免了重复出现”提供服务“。分区容错性，说的是，出现分区错误时，系统要能继续运行，这时有两个选择，一致性和可用性。举个例子，2服务器节点，把网线剪断了，这时系统接收到来自客户端的读请求时，有2个选择：1，选择一致性，因不能响应最新数据，而返回出错给客户端；2，选择可用性，响应本地数据给客户端，也就是旧数据。此时，只能在C和A中，二选一。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588680331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dc/65/3da02c30.jpg","nickname":"once","note":"","ucode":"7026094E0B99BF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587447,"discussion_content":"这个说的我终于理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663060417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179851,"user_name":"Skysper","can_delete":false,"product_type":"c1","uid":1058800,"ip_address":"","ucode":"164B3CAF81A7C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f0/06ecce19.jpg","comment_is_top":false,"comment_ctime":1582110945,"is_pvip":false,"replies":[{"id":"69982","content":"分布式系统是必须要考虑分区容错性的，也就是说，出现分区错误时，比如节点间通讯丢消息了，系统要能正常运行，那么，这时候如何运行呢？是选择一致性呢，还是选择可用性呢，满足P的时候，C和A是有矛盾的。<br>选择了CP，可以读，可以这么理解，网络分区时，读操作，不影响一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582213783,"ip_address":"","comment_id":179851,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23056947425","product_id":100046101,"comment_content":"文中说节点1和节点2通信异常的时候，仍然能够提供服务，是满足分区容错性的，那么这个仍然能够提供服务怎么理解？是不是同时体现了可用性（一个分区容错性体现了两个特性）？可用性与分区容错性是不是存在一定的边界？同样如果是满足CP的情况下，是不能写入，还可以读吗？或者都不可以，如果都不可以，是不是又不满足P了呢？","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484428,"discussion_content":"分布式系统是必须要考虑分区容错性的，也就是说，出现分区错误时，比如节点间通讯丢消息了，系统要能正常运行，那么，这时候如何运行呢？是选择一致性呢，还是选择可用性呢，满足P的时候，C和A是有矛盾的。\n选择了CP，可以读，可以这么理解，网络分区时，读操作，不影响一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582213783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058800,"avatar":"https://static001.geekbang.org/account/avatar/00/10/27/f0/06ecce19.jpg","nickname":"Skysper","note":"","ucode":"164B3CAF81A7C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181275,"discussion_content":"似乎理解了 CP 或者 CA是一个整体 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582353060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180915,"discussion_content":"所以 正常运行≠可用 是这样吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582303389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178683,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1581778809,"is_pvip":false,"replies":[{"id":"69469","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581870398,"ip_address":"","comment_id":178683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23056615289","product_id":100046101,"comment_content":"如果meta节点采用ap架构，在网络分隔的情况下，分隔的节点之间独立，各自接收到请求后自行处理，不会进行数据同步，导致不同meta节点上的元数据信息不一致。那么在数据请求的过程，可能会出现对不同节点发送请求有的可以成功有的不能成功的情况，这其实也会造成一种不可用的情况。<br>针对CP 模型的 KV 存储和 AP 模型的 KV 存储，分别适合怎样的业务场景呢？<br>针对cp模型的kv存储，适用于对数据的一致性以及可靠性要求比较高的情况；<br>针对ap模型的kv存储，适用于对延迟要求比较高，对数据一致性要求没有那么高的情况。","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483922,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581870398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220274,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1590219619,"is_pvip":false,"replies":[{"id":"86974","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595042704,"ip_address":"","comment_id":220274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14475121507","product_id":100046101,"comment_content":"12306抢票的时候的余票查询是一个AP模型，不管在哪里都能查询到票数，但是票数不一定和实际票数相匹配。<br>购买车票的时候就是一个CP模型，不管从哪里访问，能不能买到票都是一致的。<br>就导致明明查询余票的时候有票，但是真正买的时候没票的情况。","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496108,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595042704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207234,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1587030744,"is_pvip":false,"replies":[{"id":"77458","content":"加一颗星:)，多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587085157,"ip_address":"","comment_id":207234,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14471932632","product_id":100046101,"comment_content":"看完老师的例子感觉对cap又有新的认识和理解","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492051,"discussion_content":"加一颗星:)，多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587085157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184133,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1583233010,"is_pvip":false,"replies":[{"id":"78112","content":"加一颗星:)，这么理解，当发生分区错误时，系统在运行，那么如何运行呢？要在一致性和可用性中选择一个，这两个是不能同时满足的，如果选择了一致性，能一直读到新数据，但在分区错误发生时，可能因为系统无法响应最新数据，而读取数据失败；如果选择了可用性，每次读操作都会得到响应，但会读到旧数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587496104,"ip_address":"","comment_id":184133,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14468134898","product_id":100046101,"comment_content":"分区容错性和可用性。有点分不清，我感觉说的是一回事啊！都是对外提供可用的服务。","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485901,"discussion_content":"加一颗星:)，这么理解，当发生分区错误时，系统在运行，那么如何运行呢？要在一致性和可用性中选择一个，这两个是不能同时满足的，如果选择了一致性，能一直读到新数据，但在分区错误发生时，可能因为系统无法响应最新数据，而读取数据失败；如果选择了可用性，每次读操作都会得到响应，但会读到旧数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587496104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199779,"discussion_content":"分区容错是说集群中的网络断了，一个集群分成多个集群了信息无法同步情况下是否可以容纳这种错误。可用性是说是否返回合理结果而不是没有返回或出错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583625480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1126593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","nickname":"密码123456","note":"","ucode":"9889463CC0EA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199781,"discussion_content":"多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583625861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":199779,"ip_address":""},"score":199781,"extra":""}]}]},{"had_liked":false,"id":240782,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1597062052,"is_pvip":true,"replies":[{"id":"95930","content":"加一颗星:)，是的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606565536,"ip_address":"","comment_id":240782,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186996644","product_id":100046101,"comment_content":"假设meta节点选择了ap，有一种情况当data节点扩容的时候，因为要做机器间的数据平衡和迁移，那么元数据信息就会发生改变，如果meta节点是ap的时候，客户端读取数据就可能拿到不是最新的元信息，就会发生往data节点写入失败或者查找失败的问题，不知道我说的这种情况对不对? ","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503558,"discussion_content":"加一颗星:)，是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606565536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236179,"user_name":"Geek_9ad555","can_delete":false,"product_type":"c1","uid":2057627,"ip_address":"","ucode":"50852723A22788","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/c38aFXkgKzcaEnz56Zyib5yE88NvzKrnYpJFTe9aodn0cXR2CwA1vs1sP7luwFHeSXuoJlreBtkq3YAFPlmibdibw/132","comment_is_top":false,"comment_ctime":1595338800,"is_pvip":false,"replies":[{"id":"87373","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595436426,"ip_address":"","comment_id":236179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890306096","product_id":100046101,"comment_content":"打卡总结下：<br>1.要想分布式系统稳定运行，首先必须保证内部问题得到解决，不能出现多个山头，也就是分区容忍性。<br>2. 一致性 分为强一致性，弱一致性，和最终一致性。<br>       a. 强一致性 对错误零容忍，一点儿错就导致全部不可用<br>       b.弱一致性允许数据不准确 <br>       c.最终一致性允许在运行过程中不一致，但是最终必须一致<br>3. 可用性 <br>   ","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501973,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595436426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225995,"user_name":"funnyx","can_delete":false,"product_type":"c1","uid":1115049,"ip_address":"","ucode":"A9B8E27919AE4D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoZqcVJzUjfu5noOW6OPAh6ibrBicibLmicibnVyVLHdf7GwAzf2th5s1oQ9pUbLpmq2mlVBauUZn8QUnw/132","comment_is_top":false,"comment_ctime":1591925675,"is_pvip":false,"replies":[{"id":"87284","content":"加一颗星:)，节点的数据不一致，不是问题，因为我们可以通过实现相应的读操作，来实现一致性，比如，限制读操作只能在Raft的领导者节点上执行，来实现强一致性。再或者，主备架构，在故障切换后，实现双读，来保证一定能读取到最新的数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595348899,"ip_address":"","comment_id":225995,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5886892971","product_id":100046101,"comment_content":"老师您好，如果在保证分区容错的前提下，两个节点数据同步不及时，会产生数据不一致问题，那这种应该如何处理？是从客户端角度考虑还是从服务端架构重新考虑？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498073,"discussion_content":"加一颗星:)，节点的数据不一致，不是问题，因为我们可以通过实现相应的读操作，来实现一致性，比如，限制读操作只能在Raft的领导者节点上执行，来实现强一致性。再或者，主备架构，在故障切换后，实现双读，来保证一定能读取到最新的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595348899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1176599,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/17/fb769d42.jpg","nickname":"mateye","note":"","ucode":"C402E6E4590F72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351232,"discussion_content":"有一个问题，按照 CAP 理论，一般我们用到到 mysql 和 redis 主从架构，这种架构应该属于 AP 模型吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614182386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207903,"user_name":"vv","can_delete":false,"product_type":"c1","uid":1740778,"ip_address":"","ucode":"FA3AC16EB5845A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8f/ea/a92ed8a2.jpg","comment_is_top":false,"comment_ctime":1587211958,"is_pvip":false,"replies":[{"id":"78065","content":"加一颗星:)，是CP，首先这是个多副本主备模式的分布式系统，另外，读写都在leader上执行，是都能读取到最新数据的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587459328,"ip_address":"","comment_id":207903,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5882179254","product_id":100046101,"comment_content":"kafka的isr是ca模型吧","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492277,"discussion_content":"加一颗星:)，是CP，首先这是个多副本主备模式的分布式系统，另外，读写都在leader上执行，是都能读取到最新数据的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587459328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":551477,"discussion_content":"应该还要考虑到 acks 这个配置项。如果acks配置是ALL ，那就是cp模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645022923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":492277,"ip_address":""},"score":551477,"extra":""}]}]},{"had_liked":false,"id":200031,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1585534794,"is_pvip":false,"replies":[{"id":"75449","content":"加一颗星:)，一致性的强弱是关键。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585844056,"ip_address":"","comment_id":200031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880502090","product_id":100046101,"comment_content":"CP 模型的 KV 存储：对业务数据比较敏感，不允许出错。服务慢一点没关系，但是不能出错。比如金融业务<br>AP 模型的 KV 存储 :业务的可用性优先，可以允许数据有延迟。比如 ：日志数据","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489925,"discussion_content":"加一颗星:)，一致性的强弱是关键。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585844056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199945,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1585504509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880471805","product_id":100046101,"comment_content":"在P分区容错性，必然的前提下，我们的分布式系统设计在不同业务上，AP和CP有不同的侧重点，即当出现了分区错误的时候（节点网络问题），应该考虑选择CP还是AP。<br>    - 选择了CP模型，如果在某个节点写失败下，分布式系统会整体拒绝提供服务（读的话可以支持）；<br>    - 选择了AP模型，如果在某个节点写失败下，分布式系统整体还是保证可用的（可以事后补偿达到最终数据一致）；客户端对节点的读取操作，节点返回当前节点提供的信息，允许返回不一致的信息（可能不是最新的信息）。<br>","like_count":1},{"had_liked":false,"id":198693,"user_name":"哼歌儿李","can_delete":false,"product_type":"c1","uid":1357897,"ip_address":"","ucode":"D384DE36455A62","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/49/99ca2069.jpg","comment_is_top":false,"comment_ctime":1585464302,"is_pvip":false,"replies":[{"id":"75552","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585933931,"ip_address":"","comment_id":198693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880431598","product_id":100046101,"comment_content":"CAP 理论是一个很好的思考框架，它对分布式系统的特性做了高度抽象，比如抽象成了一致性、可用性和分区容错性，并对特性间的冲突做了总结","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489743,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585933931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185539,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1583625046,"is_pvip":false,"replies":[{"id":"77776","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587318823,"ip_address":"","comment_id":185539,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878592342","product_id":100046101,"comment_content":"先回答老师问题CP的KV存储肯定是无法容忍不一致的关键数据比如受理订单数据，宁愿出错暴露出来，不能不一致，不然处理错误的情况更麻烦，还有涉及到钱的转账等业务的。AP的KV可以用作不重要的系统比如日志查询系统或者不重要功能，比如查库存，只要真正购买的时候再做检验就行了.如果一旦分区就不可用体验很差","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486404,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587318823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179272,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1581949330,"is_pvip":false,"replies":[{"id":"70445","content":"可以加个Proxy层，基于指定主键做分片，在业务无感知的情况下，突破单机写性能瓶颈，分摊到多个节点上。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582684210,"ip_address":"","comment_id":179272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876916626","product_id":100046101,"comment_content":"您好，请教个问题。假设有这么种情况，当前单节点的mysql数据库有某张表因为写入量极大而导致写入延迟很高(暂时先忽略读的量)，现在想将其扩充为集群部署。但是扩充为集群后，这个写入要怎么做，因为只是单张表的写入量大，也没法拆分表，想问下业内现在对这种场景分布式下怎么进行数据写入的。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484176,"discussion_content":"可以加个Proxy层，基于指定主键做分片，在业务无感知的情况下，突破单机写性能瓶颈，分摊到多个节点上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582684210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179183,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1581932794,"is_pvip":false,"replies":[{"id":"69607","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966835,"ip_address":"","comment_id":179183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876900090","product_id":100046101,"comment_content":"CP要求强一致性场景，如各种金融银行等交易系统。分布式事务性比较强。<br>AP要求不断提供服务可用，现在感觉最贴切的就是12306购票了，在最后存储端才做一致性检验，还没抢到票。整体购票只要求最终一致性吧。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484129,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179102,"user_name":"Geek_bc461b","can_delete":false,"product_type":"c1","uid":1513600,"ip_address":"","ucode":"3F86688191CC3B","user_header":"https://static001.geekbang.org/account/avatar/00/17/18/80/741d9e98.jpg","comment_is_top":false,"comment_ctime":1581915688,"is_pvip":true,"replies":[{"id":"69608","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966930,"ip_address":"","comment_id":179102,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5876882984","product_id":100046101,"comment_content":"如果META节点采用AP的策略，假如出现网络通信故障导致多个META节点之间的元数据不一致的，这种情况下，如果外部系统访问这个集群，每次集群返回的结果可能都不一样。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484088,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177638,"user_name":"胡鹏","can_delete":false,"product_type":"c1","uid":1326455,"ip_address":"","ucode":"52644EC57FA4DB","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/77/45e5e06d.jpg","comment_is_top":false,"comment_ctime":1581441325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876408621","product_id":100046101,"comment_content":"大佬快更新","like_count":1},{"had_liked":false,"id":345463,"user_name":"ayi7664_","can_delete":false,"product_type":"c1","uid":2967743,"ip_address":"","ucode":"C80A21E7187BEE","user_header":"https://static001.geekbang.org/account/avatar/00/2d/48/bf/5c1018a2.jpg","comment_is_top":false,"comment_ctime":1652288264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652288264","product_id":100046101,"comment_content":"老师，请问，redis是cp还是ap啊","like_count":0},{"had_liked":false,"id":329886,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1641626404,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641626404","product_id":100046101,"comment_content":"CP适合对数据敏感的业务，比如钱财呀，物料呀，使用过程中可以慢，但一定要对。<br>AP适合对数据实时要求高，但是不敏感。比如实时电流对展现呀","like_count":0},{"had_liked":false,"id":325176,"user_name":"阿kai(aeo","can_delete":false,"product_type":"c1","uid":1147682,"ip_address":"","ucode":"6B1D650D9BFA4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/22/c3dae274.jpg","comment_is_top":false,"comment_ctime":1638850129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638850129","product_id":100046101,"comment_content":"总结的最后一段是PACELC理论的原因。","like_count":0},{"had_liked":false,"id":324058,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1638274033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638274033","product_id":100046101,"comment_content":"目前很多分布式系统来说，都是在一致性强弱上做取舍的，例如只要求主分片写入成功就可以了，有的要求所有分片半数以上写入成功等等，这样的要求取舍下，就是对repair逻辑的要求进行兜底了","like_count":0},{"had_liked":false,"id":320874,"user_name":"simple_孙","can_delete":false,"product_type":"c1","uid":1873629,"ip_address":"","ucode":"A77203E242D652","user_header":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","comment_is_top":false,"comment_ctime":1636535715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636535715","product_id":100046101,"comment_content":"CP模型也可以水平扩展吧，可以有多个接收写请求的分片，每个分片有多个副本，只不过分片挂了之后会出现暂时不可写，直到从它的副本选取一个升级为分片为止才恢复可写","like_count":0},{"had_liked":false,"id":309007,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1629888576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629888576","product_id":100046101,"comment_content":"分层加raft即可实现良好的水平扩展，可以参考tidb","like_count":0},{"had_liked":false,"id":306968,"user_name":"Geek_f4512f","can_delete":false,"product_type":"c1","uid":2733281,"ip_address":"","ucode":"3CB387D2943590","user_header":"","comment_is_top":false,"comment_ctime":1628815359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628815359","product_id":100046101,"comment_content":"关于使用 raft 痛点那块, 这里我有点奇怪啊, 既然选择了AP 和 CP 架构,总不能直接用嘴说说就架起来了吧,怎么也得说说 用什么技术 保证了AP CP 吧, 而且 raft算法 不也是 分布式中 高可用的算法吗?周期性选举,是有一个leader,但那也是为了同步数据的啊; 你得说明白啊! ","like_count":0},{"had_liked":false,"id":302625,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1626307839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626307839","product_id":100046101,"comment_content":"老师，看完感觉cap中的c和a区别就在于当发生故障时，c会反馈错误码，a会返回一个旧数据，那这个故障可以理解为集群中节点之间的任意故障吗，","like_count":0},{"had_liked":false,"id":296569,"user_name":"离境”","can_delete":false,"product_type":"c1","uid":1895314,"ip_address":"","ucode":"7186EF2BEF8956","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/STqKg1kLgvRuduQfo0R2E2osYBian7XrQAjSWmOwL9nyZVhq7vyLPnlGcgvguFV4aV7ToWLFiauEMKy96KWHKBVg/132","comment_is_top":false,"comment_ctime":1623049854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623049854","product_id":100046101,"comment_content":"从隔壁一个分布式课程过来的，发现解决了我很多疑惑点","like_count":0},{"had_liked":false,"id":283781,"user_name":"酱油丹","can_delete":false,"product_type":"c1","uid":1254020,"ip_address":"","ucode":"B334CF8A15F735","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/84/04453fed.jpg","comment_is_top":false,"comment_ctime":1615919121,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615919121","product_id":100046101,"comment_content":"老师，如果是针对离线的批跑任务（时间驱动的任务），CAP理论有什么不一样或扩充的吗？我想到的一个点是，以传统的实时服务相比，离线任务有一个特点是具备更大的“延迟的容忍度”","like_count":0},{"had_liked":false,"id":282942,"user_name":"曾泽浩","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1615470928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615470928","product_id":100046101,"comment_content":"谈谈我的理解<br>CAP理论的前提是P的客观存在，这里说的可用性应该是指的写操作，不管是CP或者AP都是可以进行读操作。<br>对于CP来说，因为P的客观存在，为了保证C，那么就会出现服务不可写的情况，也就是不可用A<br>对于AP来说，因为P的客观存在，服务可以正常进行写操作，不过不能保证其他节点也同步了写操作，这个时候就会出现一致性的问题。<br><br>请老师指点一下有没有理解错误。","like_count":0},{"had_liked":false,"id":277678,"user_name":"赵赟","can_delete":false,"product_type":"c1","uid":1164481,"ip_address":"","ucode":"B027E6F3449F9C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/c1/1118e24e.jpg","comment_is_top":false,"comment_ctime":1612514960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612514960","product_id":100046101,"comment_content":"当选择了一致性（C）的时候，一定会读到最新的数据，不会读到旧数据，但如果因为消息丢失、延迟过高发生了网络分区，那么这个时候，当集群节点接收到来自客户端的读请求时，为了不破坏一致性，可能会因为无法响应最新数据，而返回出错信息。<br><br>我认为这不一定，当选择 C 时，就算发生了 P，也可以通过让写失败，来保证读请求的 A 和 C，即任何节点都能响应读请求，而且返回最新的写入成功的数据。","like_count":0},{"had_liked":false,"id":275399,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1611502484,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1611502484","product_id":100046101,"comment_content":"CP 运用在讲求资料一致非常重要的业务逻辑，例如信用卡交易，转账等<br>AP 则是用在讲求用户体验上的逻辑，例如直播聊天室，并不会因为看不到谁的讯息有很大的影响，但发送不出去绝对很烦<br>其实就算银行逻辑也不一定真的非得用强一致性，如果设计的好，其实最终一致即可","like_count":0},{"had_liked":false,"id":243183,"user_name":"如果一切重来","can_delete":false,"product_type":"c1","uid":1539814,"ip_address":"","ucode":"82A8A45F9B989F","user_header":"https://static001.geekbang.org/account/avatar/00/17/7e/e6/8e9a4387.jpg","comment_is_top":false,"comment_ctime":1597985530,"is_pvip":false,"replies":[{"id":"90283","content":"加一颗星:)，是的，鱼和熊掌不可兼得，所以需要根据实际场景来妥协。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1598965664,"ip_address":"","comment_id":243183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597985530","product_id":100046101,"comment_content":"大佬你好，读横向扩展是在牺牲一致性的情况下实现的吧。因为目前来说，大部分节点确保写入成功，则系统就认为写入成功。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504213,"discussion_content":"加一颗星:)，是的，鱼和熊掌不可兼得，所以需要根据实际场景来妥协。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598965664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241730,"user_name":"李鑫磊","can_delete":false,"product_type":"c1","uid":1101615,"ip_address":"","ucode":"D06517CFCEEE00","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","comment_is_top":false,"comment_ctime":1597403903,"is_pvip":false,"replies":[{"id":"95953","content":"加一颗星:)，通讯时延，比如，发送请求到接收到响应之间的时长。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606574554,"ip_address":"","comment_id":241730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597403903","product_id":100046101,"comment_content":"文章最后说的延迟指的是什么？相应客户端的延迟？还是数据在副本之间复制的延迟？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503827,"discussion_content":"加一颗星:)，通讯时延，比如，发送请求到接收到响应之间的时长。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606574554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240902,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597113075,"is_pvip":false,"replies":[{"id":"95929","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606565499,"ip_address":"","comment_id":240902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597113075","product_id":100046101,"comment_content":"两者的偏向在上面的CAP三角中说明的很清晰了,就是在CP更加偏向于对于一致性的保证,而AP偏向于对可用性的保证,就好比淘宝发布一个商品,在这个商品发布过程中,我们肯定要保证用户能获取到商铺中的其他商品,保证可用性,但是再下单购买的时候,库存是否充足,就是要保证一致性,避免超卖问题","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503591,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606565499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240156,"user_name":"小宇子2B","can_delete":false,"product_type":"c1","uid":1254615,"ip_address":"","ucode":"E360188C65EAEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","comment_is_top":false,"comment_ctime":1596772150,"is_pvip":false,"replies":[{"id":"92469","content":"加一颗星:)，请求量大，性能可能是瓶颈的，这时可以采用一致哈希来分集群，突破性能的限制。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602600717,"ip_address":"","comment_id":240156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596772150","product_id":100046101,"comment_content":"针对公司内部所有的实例进行打标签（如服务器，数据库，应用等），用标签来管理所有的实例。比如要发布一个应用，会根据应用的标签去转换成应用的ip，然后进行发布。此时就需要设计一个标签转换系统，将标签转换具体的ip或者能够在物理上找到该实例的标示。这种情况是适合ap还是cp呢。个人考虑是cp，因为全网的实例管理都是依靠这个标签转换，如果出现数据不一致会有问题。但是这个系统请求量比较大，满足cp的话，性能会不会跟不上","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503356,"discussion_content":"加一颗星:)，请求量大，性能可能是瓶颈的，这时可以采用一致哈希来分集群，突破性能的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602600717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224948,"user_name":"Orain","can_delete":false,"product_type":"c1","uid":1344183,"ip_address":"","ucode":"44645BA48E61A6","user_header":"https://static001.geekbang.org/account/avatar/00/14/82/b7/002c7908.jpg","comment_is_top":false,"comment_ctime":1591600257,"is_pvip":false,"replies":[{"id":"87002","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595093408,"ip_address":"","comment_id":224948,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591600257","product_id":100046101,"comment_content":"个人见解如下：<br>CP模型的KV适合存储一些对值比较敏感的信息,例如账户余额,用户权益等信息,这些信息要求必须准确。<br>AP模型的KV则更适合存储一些非敏感信息,例如广告信息流,推荐信息流等,这些信息不一定要最新，即使是非具有时效性的，也能接受。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497664,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595093408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212424,"user_name":"被过去推开","can_delete":false,"product_type":"c1","uid":1276690,"ip_address":"","ucode":"8B4F34FE93FD5B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Cib5umA0W17N9pichI08pnrXAExdbyh7AVzH4nEhD6KN3FXuELk4LJJuqUPPD7xmIy9nq5Hjbgnzic7sVZG5BKiaUQ/132","comment_is_top":false,"comment_ctime":1588122244,"is_pvip":false,"replies":[{"id":"79078","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588277929,"ip_address":"","comment_id":212424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588122244","product_id":100046101,"comment_content":"cp模型适合交易类型的业务，ap模型适合辅助性的业务，只需要最后的数据达到一致性即可","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493500,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588277929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210836,"user_name":"JOHN","can_delete":false,"product_type":"c1","uid":1692942,"ip_address":"","ucode":"6936DE275AA543","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/0e/dae566c7.jpg","comment_is_top":false,"comment_ctime":1587832757,"is_pvip":false,"replies":[{"id":"79080","content":"加一颗星:)，这个取决于实现，比如基于Raft的强一致性系统，是既不能写、也不能读的，布鲁尔提到的ACID系统，是不能写入，但可以读。其实关于CAP理论，可以分2层来理解：1. 布鲁尔的猜想，强调的是在强一致性（ACID）和最终一致性（BASE）之间要妥协折中，按需实现系统，而不是全部是ACID；2. CAP定理，2个节点，你把网线剪短了，访问这2个节点读数据时，不可能同时满足强一致性（原子一致性）和可用性（非故障节点正常响应数据）的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588279493,"ip_address":"","comment_id":210836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587832757","product_id":100046101,"comment_content":"看完不是很透彻，得跟作者确认一下，我认为CP模式下在节点间发生分区故障的时候同时要保证强一致性，所以这个时候节点不能写入新数据，但是读是可用的，不知理解是否正确？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493121,"discussion_content":"加一颗星:)，这个取决于实现，比如基于Raft的强一致性系统，是既不能写、也不能读的，布鲁尔提到的ACID系统，是不能写入，但可以读。其实关于CAP理论，可以分2层来理解：1. 布鲁尔的猜想，强调的是在强一致性（ACID）和最终一致性（BASE）之间要妥协折中，按需实现系统，而不是全部是ACID；2. CAP定理，2个节点，你把网线剪短了，访问这2个节点读数据时，不可能同时满足强一致性（原子一致性）和可用性（非故障节点正常响应数据）的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588279493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208638,"user_name":"张俭","can_delete":false,"product_type":"c1","uid":1194527,"ip_address":"","ucode":"6A94534F11C4BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/1f/5b8f0d71.jpg","comment_is_top":false,"comment_ctime":1587394987,"is_pvip":false,"replies":[{"id":"77946","content":"加一颗星:)，会读到旧数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587397460,"ip_address":"","comment_id":208638,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587394987","product_id":100046101,"comment_content":"AP无法保证保序","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492555,"discussion_content":"加一颗星:)，会读到旧数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587397460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193022,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1584882397,"is_pvip":false,"replies":[{"id":"75704","content":"加一颗星:)，多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586018934,"ip_address":"","comment_id":193022,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584882397","product_id":100046101,"comment_content":"CAP还可以，比较好理解。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488499,"discussion_content":"加一颗星:)，多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586018934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190969,"user_name":"Geek_f22141","can_delete":false,"product_type":"c1","uid":1092686,"ip_address":"","ucode":"9B670196A74869","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/4e/16d01fe3.jpg","comment_is_top":false,"comment_ctime":1584714654,"is_pvip":false,"replies":[{"id":"77564","content":"不考虑P的话，就是单机系统，一般在对系统性能要求不高时使用，比如使用单机版MySQL系统来存放系统数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587156746,"ip_address":"","comment_id":190969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584714654","product_id":100046101,"comment_content":"能举个具体业务场景，权衡CA的例子吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488091,"discussion_content":"不考虑P的话，就是单机系统，一般在对系统性能要求不高时使用，比如使用单机版MySQL系统来存放系统数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587156746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185759,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1583676048,"is_pvip":false,"replies":[{"id":"75722","content":"加油！有问题多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586021237,"ip_address":"","comment_id":185759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583676048","product_id":100046101,"comment_content":"看懂一点点了，还需要多思考，总结","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486487,"discussion_content":"加油！有问题多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586021237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185692,"user_name":"X-C‘hong","can_delete":false,"product_type":"c1","uid":1767585,"ip_address":"","ucode":"7D60CE0126D59C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f8/a1/2d45ce7d.jpg","comment_is_top":false,"comment_ctime":1583664945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583664945","product_id":100046101,"comment_content":"CAP必须有p才算分布式系统，丢了p就相当于单体系统了。首先，可用性是指既可读也可以写；一致性是指所有节点数据都一致；容错性，是指允许部分节点出错。<br>当其中一个节点出错时，才需要考虑CA的选择。<br>某个节点出错后，那么前面就有两种选择，一，需要等所有节点数据一致才可以继续使用；要么可以使用，但是数据是不一致的。如果系统偏向不停机使用，也就是选择A的话，要么选择C","like_count":0},{"had_liked":false,"id":185541,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1583625341,"is_pvip":false,"replies":[{"id":"78113","content":"加一颗星:)，问题1：在CP模式下，如果出现分区错误，是可能会出现因系统无法响应最新数据，而读取失败。另外，“不可写入”是因为在实际系统中（比如共识算法），可用性出问题了，更直观的现象是，写入也出问题了。问题2：写入没问题，实现最终一致性，可以通过反熵。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587497382,"ip_address":"","comment_id":185541,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583625341","product_id":100046101,"comment_content":"问老师两个问题：在CP模式下，网络中断了，那根据理论不可写入，是否可以读取那？我理解是可以的断开之前数据一致的且断开后无写入。<br>第二个问题，在AP模式下，网络断了，读取可以只是数据不一致，那写入是否可以，如果可以写入后续想最终一致咋办，如果不能写入，和可用性的说法矛盾…<br>","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486405,"discussion_content":"加一颗星:)，问题1：在CP模式下，如果出现分区错误，是可能会出现因系统无法响应最新数据，而读取失败。另外，“不可写入”是因为在实际系统中（比如共识算法），可用性出问题了，更直观的现象是，写入也出问题了。问题2：写入没问题，实现最终一致性，可以通过反熵。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587497382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217268,"discussion_content":"我是这样理解的：可用性，我觉得可以分为，可读、可写。但是系统中状态的改变只能是通过写来改变。所以可用性，又可以简化为系统可写。在CP 模式下，网络出问题，就不可用（不可写），但是可以读（一种优化）。在AP 模式下面，网络出问题，节点之间不能同步数据。但是可用性优先，是可以写。这时候写，会出现数据不一致。应该是后续的一些补偿机制，来完成数据一致。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585535298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181414,"user_name":"longyi","can_delete":false,"product_type":"c1","uid":1318113,"ip_address":"","ucode":"204CC8D3E98AAC","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/e1/c99d1473.jpg","comment_is_top":false,"comment_ctime":1582536804,"is_pvip":false,"replies":[{"id":"70421","content":"可以这样实现，客户端访问领导者节点执行读操作，领导者在和大多数节点确认自己仍是领导者之后返回本地数据给客户端，否则返回错误给客户端。这时，客户端读到的都是最新数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582642616,"ip_address":"","comment_id":181414,"utype":1}],"discussion_count":0,"race_medal":0,"score":"1582536804","product_id":100046101,"comment_content":"我们以前在做一个分布式数据库项目的时候，下面的存储用的 是raft协议。如果有节点出现了同步延迟，而客户端的读操作正好落在这个落后的节点上，也不会读到不一致的数据。因为客户端会传最新的LSN下来，中间层判断错误后会切换到别的节点上进行读操作。这个是基于业务来处理的读不到数据的情况，请教一下老师，分布式系统里面有没有通用的处理方法来避免这种读到落后节点的情况？一般是怎么处理呢？","like_count":0},{"had_liked":false,"id":179423,"user_name":"Michael Tesla","can_delete":false,"product_type":"c1","uid":1033053,"ip_address":"","ucode":"C627F090293608","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/5d/ced9b5c2.jpg","comment_is_top":false,"comment_ctime":1582000781,"is_pvip":false,"replies":[{"id":"69734","content":"加一颗星:)。可以读取的，协议能保证的，比如分布式事务算法。是的，可以理解为发送请求和收到响应之间的时间间隔。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582039765,"ip_address":"","comment_id":179423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582000781","product_id":100046101,"comment_content":"您好，请教几个问题：<br>1. 采用 CP 模型的分布式系统，当发生网络分区时，允许客户端读取数据吗？有没有可能在数据同步时发生了网络分区，导致节点间数据不一致。此时，如果允许客户端读取数据，那么客户端就可能看到不同节点间的数据不一致了。<br>2. 在当前分布式系统开发中，延迟是非常重要的一个指标。这个“延迟”是指服务的响应时间吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484254,"discussion_content":"加一颗星:)。可以读取的，协议能保证的，比如分布式事务算法。是的，可以理解为发送请求和收到响应之间的时间间隔。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582039765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179397,"user_name":"Maybrittnelson","can_delete":false,"product_type":"c1","uid":1136881,"ip_address":"","ucode":"944C9AB458F479","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/f1/0e934ca8.jpg","comment_is_top":false,"comment_ctime":1581995878,"is_pvip":false,"replies":[{"id":"69738","content":"加一颗星:)。不是在META内部，是外部的专门的名字路由系统，比如，通过名字路由实现DATA节点的寻址和容灾，在DATA节点内部，通过分片路由，来实现副本的寻址和容灾。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582040433,"ip_address":"","comment_id":179397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581995878","product_id":100046101,"comment_content":"针对老师写的db提几点问题。写的过程是如下吗？先请求meta，meta里面应该还有个计算data节点可用性的逻辑吧（data部署逻辑是分rack多个副本吗，如果一个rack中有副本不可用就可写另外几个rack，但是读还是可以继续读这个rack的，因为你已经在meta做了处理，保证了这个rack不会有新数据的出现）","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484242,"discussion_content":"加一颗星:)。不是在META内部，是外部的专门的名字路由系统，比如，通过名字路由实现DATA节点的寻址和容灾，在DATA节点内部，通过分片路由，来实现副本的寻址和容灾。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582040433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178805,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581830444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581830444","product_id":100046101,"comment_content":"可以从常识去理解CAP理论，而不用过分拘泥于弄明白CAP理论的定义。","like_count":0},{"had_liked":false,"id":178593,"user_name":"lucky_joseph","can_delete":false,"product_type":"c1","uid":1867720,"ip_address":"","ucode":"02534B4FDFF009","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7f/c8/3aee3029.jpg","comment_is_top":false,"comment_ctime":1581754359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581754359","product_id":100046101,"comment_content":"下一篇什么时候更新，课程很好，通俗易懂。","like_count":0},{"had_liked":false,"id":178517,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1581732927,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1581732927","product_id":100046101,"comment_content":"适合使用CP模型的场景： 需要保持分布式系统中所有节点的一致性，比如文中influxDB的元信息。<br>适合使用AP模型的场景：那些服务会被访问频繁的信息，需要更关注系统的水平扩展、性能、可用性。","like_count":0},{"had_liked":false,"id":178361,"user_name":"此方彼方Francis","can_delete":false,"product_type":"c1","uid":1001390,"ip_address":"","ucode":"73E6C93CF1FE39","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/ae/0a5f7a56.jpg","comment_is_top":false,"comment_ctime":1581669181,"is_pvip":false,"replies":[{"id":"69199","content":"内部系统。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581685510,"ip_address":"","comment_id":178361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581669181","product_id":100046101,"comment_content":"老师自研的这个influxDB项目开源了吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483773,"discussion_content":"内部系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581685510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178286,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1581650228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581650228","product_id":100046101,"comment_content":"可用性应该是指在适当的时间返回客户端响应结果","like_count":0},{"had_liked":false,"id":178276,"user_name":"明才","can_delete":false,"product_type":"c1","uid":1098917,"ip_address":"","ucode":"17F5A9E7FB777C","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/a5/c8cb87cc.jpg","comment_is_top":false,"comment_ctime":1581649154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581649154","product_id":100046101,"comment_content":"坐等下一集","like_count":0},{"had_liked":false,"id":178234,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/c8680841.jpg","comment_is_top":false,"comment_ctime":1581636353,"is_pvip":false,"replies":[{"id":"69220","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581700215,"ip_address":"","comment_id":178234,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581636353","product_id":100046101,"comment_content":"这里C是指强一致性吧？用户无论写入到哪个节点，该节点要把数据变化同步到其它一定数目的节点，都成功后才给用户返回写入成功。如果同步过程失败，可用节点不够，那么直接给用户返回错误。一致性可以这么理解吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483717,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581700215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065477,"avatar":"https://static001.geekbang.org/account/avatar/00/10/42/05/a7dd62b4.jpg","nickname":"北邙","note":"","ucode":"393F3CA7BEE5A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170287,"discussion_content":"也可能只最终一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581678106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178196,"user_name":"Geek_eaa8cc","can_delete":false,"product_type":"c1","uid":1581897,"ip_address":"","ucode":"8FF509D581253E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aTnlMgdUuSFnBjQD7IlqaPdRJMMjMam2W4aKDhd06zibjrSNzgz9VSwCIMfKmkLuDuict2bugJEqULfBElZ599vw/132","comment_is_top":false,"comment_ctime":1581605368,"is_pvip":false,"replies":[{"id":"69222","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581700258,"ip_address":"","comment_id":178196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581605368","product_id":100046101,"comment_content":"cp模型的kv系统适合处理重要的业务数据，类比原来的关系型数据库。 ap模型的kv一般作为查询，大数据分析，监控之类","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483695,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581700258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177863,"user_name":"施耀南","can_delete":false,"product_type":"c1","uid":1634138,"ip_address":"","ucode":"480ECE7BA29606","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/5a/5d424d50.jpg","comment_is_top":false,"comment_ctime":1581517021,"is_pvip":false,"replies":[{"id":"69032","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581528063,"ip_address":"","comment_id":177863,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581517021","product_id":100046101,"comment_content":"Meta节点ap架构会出现老结构解析新数据的问题，解析失败或者错乱","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483570,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581528063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177345,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1581350589,"is_pvip":false,"replies":[{"id":"69035","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581528402,"ip_address":"","comment_id":177345,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581350589","product_id":100046101,"comment_content":"CP 模型KV存储 适合 事务信息、元数据存储<br>AP 模型KV存储 适合 一致性要求不高的业务缓存<br><br>不晓得对不对😲","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483395,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581528402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581897,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aTnlMgdUuSFnBjQD7IlqaPdRJMMjMam2W4aKDhd06zibjrSNzgz9VSwCIMfKmkLuDuict2bugJEqULfBElZ599vw/132","nickname":"Geek_eaa8cc","note":"","ucode":"8FF509D581253E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169249,"discussion_content":"很多缓存对一致性也有要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581605416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}