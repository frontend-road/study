{"id":633488,"title":"16｜Bit library（一）：如何利用新bit操作库释放编程生产力？","content":"<p>你好，我是卢誉声。</p><p>我们都知道，C++继承了C语言所有的底层操作能力，其中最重要的两个特性就是指针和位操作。对于指针，现代C++标准已经通过智能指针提出了较好的解决方案。</p><p>但是在C++20之前，C++的位操作支持还是很“基础”的。它缺乏安全性，而且不够灵活。因此，我们就围绕C++20对位操作能力的扩展这个话题，讨论一下全新的Bit library。</p><p>好，话不多说，就让我们从基本的C++位操作开始讲起（课程配套代码可以从<a href=\"https://github.com/samblg/cpp20-plus-indepth\">这里</a>获取）。</p><h2>C++位操作技术与不足</h2><p>C++提供的基础位操作技术与C语言一脉相承，主要通过位操作符对整数进行位操作。我对这些基本操作做了一个总结，你可以参考后面的表格回顾一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/50/c9d77bda455c87a90ce43e14e77af950.jpg?wh=2543x1437\" alt=\"\"></p><p>相比C语言，C++一直为C的底层能力提供一些高层次的安全化包装，比如为了解决裸指针的各种安全缺陷，提出了各类智能指针。</p><p>基于这种思路，C++也通过标准库提供了bitset，对二进制位串进行包装，可以在整数和bitset以及其字符串表示之间进行转换，并支持表格中的几个基础的位操作符。<br>\n但在C++20之前，C++的位操作支持还是很“基础”的，我们重点讨论几个比较明显的问题。</p><p><strong>首先，没有提供字节序的检测和转换能力</strong>。基于位进行二进制数据解析的时候，最大的问题就是不同CPU的大小端设计（比如 x86 体系结构是小端字节序，arm 支持采用大小端字节序任选其一）。</p><!-- [[[read_end]]] --><p>这就导致在不同体系结构下，编写位操作可能产生各种兼容性问题。C++不仅没有提供编译目标架构的字节序检测能力，也没有提供不同字节序之间的转换能力，所以这些基础设施我们只能自行实现。<br>\n<strong>其次，缺乏安全的强制类型转换手段</strong>。一些场景，比如对浮点类型的数值进行位操作需要先将浮点类型转换成对应宽度的无符号整数，就经常需要将一些数据强制转换为另一个类型，而不改变其二进制位的值。</p><p>C++仅提供了reinterpret_cast，执行指针类型的强制转换，但没有提供值的强制类型转换能力。虽然我们可以通过memcpy等手段实现，但这样也不够安全——编译器无法检测到可能发生的任何问题。</p><p><strong>最后，是移位操作问题</strong>。C++把移位的具体含义交给了具体实现。具体来说，就是移位操作分为“算术移位”和“逻辑移位”，算术移位需要考虑到有符号整数的符号问题，逻辑移位是直接补零，C++并没有定义有符号整数的具体实现方式，除了有符号整数的移位问题，C++和C一样，并没有提供循环移位的手段。</p><h2>C++20位操作库</h2><p>既然位操作的潜在问题这么多，C++是怎么解决的呢？</p><p>在C++20，C++标准终于开始思考解决这些基本的位操作问题了。为此提供了位操作库，具体实现在&lt;bit&gt;头文件中，我们分别来看看。</p><h3>字节序处理</h3><p>C++20提供了枚举类endian（这早就该标准化了嘛😄），用来定义字节序的大小端。具体定义如下所示：</p><pre><code class=\"language-c++\">enum class endian {\n&nbsp;&nbsp;&nbsp; little,\n&nbsp;&nbsp;&nbsp; big,\n&nbsp;&nbsp;&nbsp; native // = little/big\n};\n</code></pre><p>这里着重强调endian::native这一枚举值，它由编译器根据编译目标体系结构自动确定——这可太棒了！</p><p>我们结合实际例子来体会一下用法。</p><pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;bit&gt;\n#include &lt;cstdint&gt;\n#include &lt;concepts&gt;\n&nbsp;\ntemplate &lt;std::integral T&gt;\nT byteswap(T src) {\n&nbsp;&nbsp;&nbsp; T dest = 0;\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (uint8_t* pSrcByte = reinterpret_cast&lt;uint8_t*&gt;(&amp;src),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pDestByte = reinterpret_cast&lt;uint8_t*&gt;(&amp;dest) + sizeof(T) - 1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrcByte != reinterpret_cast&lt;uint8_t*&gt;(&amp;src) + sizeof(T);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++pSrcByte, --pDestByte) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pDestByte = *pSrcByte;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return dest;\n}\n&nbsp;\ntemplate &lt;std::integral T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::little)\nT consumeBigEndian(T src) {\n&nbsp;&nbsp;&nbsp; return byteswap(src);\n}\n&nbsp;\ntemplate &lt;std::integral T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::big)\nT consumeBigEndian(T src) {\n&nbsp;&nbsp;&nbsp; return src;\n}\n&nbsp;\nint main() {\n&nbsp;&nbsp;&nbsp; uint8_t networkBuffer[] {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, 2\n&nbsp;&nbsp;&nbsp; };\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 将从网络数据流中获取的值直接转换成uint16_t\n&nbsp;&nbsp;&nbsp; uint16_t networkValue = *(reinterpret_cast&lt;uint16_t*&gt;(networkBuffer));\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Original value: \" &lt;&lt; networkValue &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 无论如何都转换字节序\n&nbsp;&nbsp;&nbsp; uint16_t swappedValue = byteswap(networkValue);\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Swaped value: \" &lt;&lt; swappedValue &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 仅对字节序为大端的平台转换字节序\n&nbsp;&nbsp;&nbsp; uint16_t checkedValue = consumeBigEndian(networkValue);\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Checked value: \" &lt;&lt; checkedValue &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>这段代码的作用是检测目标平台的字节序，并将一个大端数据转换成小端数据。如果目标平台本身字节序就是大端，那么什么都不会执行。</p><p>C++23提供了byteswap帮助我们执行字节序转换，但C++20没有提供该特性，所以我们只能自己实现一个版本。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/63/b3c2fcecb1a7b9a5e5bc5a1181858963.jpg?wh=2600x1469\" alt=\"\"></p><p>这段代码定义了两个版本的consumeBigEndian，通过requires在编译时检测std::endian::native是否为std::endian::little，如果是就会通过byteswap转换字节序，否则返回原始值。</p><h3>强制类型转换</h3><p>事实上，C语言提供的强制类型转换有很多潜在的类型安全问题，为了避免大家使用C风格的强制类型转换，C++提供了static_cast、const_cast和reinterpret_cast，为不同场景的类型转换服务。</p><p>这些类型转换符都有自己的约束与类型安全检测，迫使开发者在进行类型转换时，要先弄清楚自己真的需要哪种转换。但是，它们都解决不了一个常见的场景——将一个值转换成二进制位数相同的另一个值。</p><p>为此，C++20通过&lt;bit&gt;头文件提供了bit_cast这个函数。后面是一段示例代码。</p><pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;bit&gt;\n#include &lt;cstdint&gt;\n&nbsp;\nint main() {\n&nbsp;&nbsp;&nbsp; float f32v = 784.513f;\n&nbsp;&nbsp;&nbsp; uint32_t u32v = std::bit_cast&lt;uint32_t&gt;(f32v);\n&nbsp;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"f32v: \" &lt;&lt; f32v &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"u32v: \" &lt;&lt; u32v &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; double f64v = 1123.11f;\n&nbsp;&nbsp;&nbsp; uint64_t u64v = std::bit_cast&lt;uint64_t&gt;(f64v);\n&nbsp;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"f64v: \" &lt;&lt; f64v &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"u64v: \" &lt;&lt; u64v &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 编译错误\n&nbsp;&nbsp;&nbsp; uint16_t u64v = std::bit_cast&lt;uint16_t&gt;(f64v);\n&nbsp;\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>在这段代码中，我们通过bit_cast将一个float类型变量转换为uint32_t，并将一个uint64_t类型变量转换为double，但是无法将float类型转换为uint16_t。</p><p>这样一来，我们就多了一个类型转换工具，还可以确保特定的类型安全，降低滥用C类型转换带来的风险。</p><h3>循环移位</h3><p>循环移位是另一个常见需求，循环移位与普通移位差别在于移位后的补位规则。举个例子，下图是对8位的二进制串，分别循环左移与逻辑左移2位的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/2f/c3693e933b7eb633ca54fe892d51e72f.jpg?wh=3958x2922\" alt=\"\"></p><p>逻辑左移会对“由移动产生”的位直接补零，而循环左移则会将移出的位串，直接循环移动到新值的末尾，形成一个循环。</p><p>C++20提供了用于循环左移的std::rotl，还有用于循环右移的std::rotr。后面是示例代码。</p><pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;bit&gt;\n#include &lt;bitset&gt;\n#include &lt;cstdint&gt;\n#include &lt;iomanip&gt;\n&nbsp;\nint main() {\n&nbsp;&nbsp;&nbsp; uint8_t value = 0b01011101;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::setw(16) &lt;&lt; std::left &lt;&lt; \"value\" &lt;&lt; \" = \" &lt;&lt; std::bitset&lt;8&gt;(value) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::setw(16) &lt;&lt; std::left &lt;&lt; \"rotl\" &lt;&lt; \" = \" &lt;&lt; std::bitset&lt;8&gt;(std::rotl(value, 2)) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::setw(16) &lt;&lt; std::left &lt;&lt; \"left logical\" &lt;&lt; \" = \" &lt;&lt; std::bitset&lt;8&gt;(static_cast&lt;uint8_t&gt;(value &lt;&lt; 2)) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::setw(16) &lt;&lt; std::left &lt;&lt; \"rotr\" &lt;&lt; \" = \" &lt;&lt; std::bitset&lt;8&gt;(std::rotr(value, 2)) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::setw(16) &lt;&lt; std::left &lt;&lt; \"right logical\" &lt;&lt; \" = \" &lt;&lt; std::bitset&lt;8&gt;(static_cast&lt;uint8_t&gt;(value &gt;&gt; 2)) &lt;&lt; std::endl;\n&nbsp;\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>在这段代码中，我们调用了rotl和rotr执行循环移位，同时调用了&lt;&lt;和&gt;&gt;。我们可以从执行结果中看出不同的移位方式之间的差别。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/c9/063a84b42afb2c1b85b1e545b0003dc9.jpg?wh=1043x193\" alt=\"\"></p><h3>其他位运算</h3><p>除了上述位操作支持，C++20还提供了一些其他简单的位操作函数，我用表格进行了总结。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/64/4a70454255216250393a995e3500d164.jpg?wh=2656x1682\" alt=\"\"></p><p>我为你简单演示一下这些函数的用法，代码是后面这样。</p><pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;bit&gt;\n#include &lt;bitset&gt;\n#include &lt;cstdint&gt;\n#include &lt;format&gt;\n&nbsp;\n// 测试has_single_bit\nvoid testHasSingleBit() {\n&nbsp;&nbsp;&nbsp; for (uint32_t value = 0; value &lt; 8u; ++value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"has_single_bit({}): {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;3&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::has_single_bit(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n}\n&nbsp;\n// 测试bit_ceil与bit_floor\nvoid testCeilFloor() {\n&nbsp;&nbsp;&nbsp; for (uint32_t value = 0; value &lt; 8u; ++value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"ceil({}): {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;4&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;4&gt;(std::ceil(value)).to_string()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (uint32_t value = 0; value &lt; 8u; ++value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"ceil({}): {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;4&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;4&gt;(std::floor(value)).to_string()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n}\n&nbsp;\n// 利用constexpr和bit_width自动计算bitset的模板参数\ntemplate &lt;std::uint64_t value&gt;\nstd::bitset&lt;std::bit_width(value)&gt; wbitset() {\n&nbsp;&nbsp;&nbsp; constexpr int bitWidth = std::bit_width(value);\n&nbsp;\n&nbsp;&nbsp;&nbsp; return std::bitset&lt;bitWidth&gt;(value);\n}\n&nbsp;\n// 测试bit_width\nvoid testBitWidth() {\n&nbsp;&nbsp;&nbsp; constexpr uint32_t value = 97u;\n&nbsp;&nbsp;&nbsp; constexpr uint32_t ceilValue = std::bit_ceil(value);\n&nbsp;&nbsp;&nbsp; constexpr uint32_t floorValue = std::bit_floor(value);\n&nbsp;\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"ceil({}): {}\\nfloor({}): {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;std::bit_width(value)&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;std::bit_width(ceilValue)&gt;(ceilValue).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wbitset&lt;value&gt;().to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wbitset&lt;floorValue&gt;().to_string()\n&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; \n}\n&nbsp;\n// 测试coutl_zero, countl_one, countr_zero, countr_one, popcount\nvoid testCounts() {\n&nbsp;&nbsp;&nbsp; for (const std::uint8_t value : { 0, 0b11111111, 0b11000000, 0b00000110 }) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"countl_zero({}) = {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;8&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::countl_zero(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (const std::uint8_t value : { 0, 0b11111111, 0b11000000, 0b00000110 }) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"countl_one({}) = {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;8&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::countl_one(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (const std::uint8_t value : { 0, 0b11111111, 0b11000000, 0b00000110 }) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"countr_zero({}) = {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;8&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::countr_zero(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (const std::uint8_t value : { 0, 0b11111111, 0b11000000, 0b00000111 }) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"countr_one({}) = {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;8&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::countr_one(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (const std::uint8_t value : { 0, 0b11111111, 0b11000000, 0b00000111 }) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; std::format(\"popcount({}) = {}\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::bitset&lt;8&gt;(value).to_string(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::popcount(value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp; }\n}\n&nbsp;\nint main() {\n&nbsp;&nbsp;&nbsp; testHasSingleBit();\n&nbsp;&nbsp;&nbsp; testCeilFloor();\n&nbsp;&nbsp;&nbsp; testBitWidth();\n&nbsp;&nbsp;&nbsp; testCounts();\n&nbsp;\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>这些都是简单的函数示例。下图是运行时输出，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/72/8e/7205f73090c39604bb2a9bab02405d8e.jpg?wh=964x926\" alt=\"\"></p><p>其中，36-41行的wbitset函数是一个比较巧妙的实现，我们一起做个分析。</p><p>bitset类型可以帮助我们快速将一个整数转换为二进制串，并将其转换为字符串。但是bitset需要通过模板参数指定位串的位数。因此，这种情况下我们需要自己来计算bitset的位数到底是多少——这太麻烦了。</p><p>为了解决这个问题，我们使用std::bit_width计算表示模板参数value的最小位数。由于bit_width是constexpr函数，因此，如果它的参数是编译时常量，那么就能直接用在模板参数里！这样就能确定bitset的最小位数了。</p><h2>总结</h2><p>C++20作为一个里程碑式的重要标准，终于开始解决基本的位操作问题，这其中包括：</p><p>1.字节序的检测和转换能力。<br>\n2.补充完善的安全的强制类型转换工具。<br>\n3.增强的移位操作。</p><p>这些新工具为我们实现位操作提供了更加完备的支持。同时，也为实现序列化和反序列化提供了标准化支持。</p><p>那么，新的位操作库到底是怎么帮助我们释放编程生产力的呢（特别是在序列化和反序列化方面）？下一讲，我将为你娓娓道来…</p><h2>课后思考</h2><p>C++20位操作库提供的函数，其实我们也能自己实现，请你思考bit_width和bit_floor这两个函数如何实现，可以把你能想到的最简洁的实现方式贴出来。</p><p>欢迎将你的方案与大家一起分享。我们一同交流。下一讲见！</p>","neighbors":{"left":{"article_title":"15｜Formatting实战：如何构建一个数据流处理实例？","id":631248},"right":{"article_title":"17｜Bit library（二）：如何利用新bit操作库释放编程生产力？","id":633504}},"comments":[{"had_liked":false,"id":386874,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1705748148,"is_pvip":false,"replies":[{"id":141119,"content":"赞～","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1706699702,"ip_address":"上海","comment_id":386874,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"分享一下我的思考题答案：\nconstexpr size_t MyBitWidth(uint64_t value){\n    auto valueCeil = std::bit_ceil(value);\n    size_t i = 0;\n    for (; valueCeil &gt;&gt; i; ++i);\n\n    return i - 1;\n}\n\nconstexpr auto MyBitFloor(uint64_t value) {\n    return std::bit_ceil(value) &gt;&gt; 1;\n}","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636674,"discussion_content":"赞～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706699702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369430,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1677544968,"is_pvip":false,"replies":[{"id":134889,"content":"1.\t对浮点数进行移位操作需要显示转换，而且不能static_cast，需要先reinterpret_cast变量指针到整型的指针，移位后再转换回去，非常麻烦。\n2.\t区分只能看编译器是如何定义的。\n3.\tC++20并不是支持序列化&#47;反序列化，而是在C++20中，标准库提供了大端小端判断、交换字节序之类的基础工具支持，我们可以基于标准库更容易构建序列化和反序列化库，C++20之前没有相关的任何支持。\n","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1678249463,"ip_address":"上海","comment_id":369430,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"请教老师几个问题：\nQ1：浮点数位操作的转换是隐式转换吗？\nC++20之前的浮点数位操作，需要先转换为整数，这个转换是隐式转换吗？还是需要写代码实现？（好久不用C++，有点忘记了）\nQ2：移位怎么区分算术移位和逻辑移位？\n文中提到，C++20之前的移位操作，移位的具体含义交给了具体实现。那么，具体怎么区分是算术移位还是逻辑移位？\nQ3：C++20支持序列化和反序列化吗？\n文中提到“这些新工具为我们实现位操作提供了更加完备的支持。同时，也为实现序列化和反序列化提供了标准化支持”，那么，C++20已经支持序列化和反序列化了吗？ （C++20之前的版本支持吗？）","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608071,"discussion_content":"1.\t对浮点数进行移位操作需要显示转换，而且不能static_cast，需要先reinterpret_cast变量指针到整型的指针，移位后再转换回去，非常麻烦。\n2.\t区分只能看编译器是如何定义的。\n3.\tC++20并不是支持序列化/反序列化，而是在C++20中，标准库提供了大端小端判断、交换字节序之类的基础工具支持，我们可以基于标准库更容易构建序列化和反序列化库，C++20之前没有相关的任何支持。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678249463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}