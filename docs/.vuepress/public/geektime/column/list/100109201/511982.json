{"id":511982,"title":"16｜概念重识：如何用3KU为端到端&验收测试赋能？","content":"<p>你好，我是柳胜。</p><p>看到这一讲标题里的“端到端测试”和“验收测试”，还有上一讲的“UI测试”，你可能还有点懵：在实践中，它们三个经常是一回事啊？</p><p>先给你理一理这三个概念。验收测试是指的客户视角，端到端的测试指的是测试方法，UI测试指的是测试发起的地方。听着不太一样，是吧？</p><p>可是我们为什么会觉得这些是一回事呢？因为在实践里，这三个测试概念常常指向同一个测试场景，即客户从UI端发起了一个对系统整体的可接受性测试。几年前的传统软件测试，这是成立的。但现在不一定了：客户不一定是UI用户，还有可能是API用户、SDK用户，端到端测试也不一定包括UI端。</p><p>这一讲，我们就用3KU法则重新审视一下这些测试概念，让我们的实践事半功倍。</p><h2>验收测试</h2><p>验收测试，相当于是一个契约履行。不同于建立在开发者之间的接口契约，验收契约建立在用户和系统之间。所以验收测试的前提条件有两条：第一，这个契约存在；第二，这个契约具有可测试性。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/502863\">第七讲</a>“单体应用测什么”的时候，已经把FoodCome的契约表达出来了，就是<strong>用Ghkerkin语法描述出来的用户使用场景</strong>。</p><pre><code class=\"language-plain\">Given a consumer\n  And a restaurant\n  And a delivery address/time that can be served by that restaurant\n  And an order total that meets the restaurant's order minimum\nWhen the consumer places an order for the restaurant\nThen consumer's credit card is authorized\n  And an order is created in the PENDING_ACCEPTANCE state\n  And the order is associated with the consumer\n</code></pre><!-- [[[read_end]]] --><p>这样一段描述写在一个名为placeOrder.feature文件里，只要满足了Given的条件，做了When中定义的操作，就会得到Then里的结果。这就是契约的内容。</p><p>我之前和你说过Gherkins语法的好处，它的表达在自然语言和技术语言之间，需求人员理解起来不吃力，往前走一步又能成为测试案例，甚至自动化测试代码。</p><p>今天咱们就接着说说，这件事儿怎么实现。我介绍一个BDD自动化测试框架，它就是Cucumber。</p><p>Cucumber是支持行为驱动开发的软件工具。Cucumber的核心是它的Gherkin语言解析器，能够根据Feature文件直接生成自动化测试代码。详细情况，你可以参考Cucumber的<a href=\"https://cucumber.io\">官方网站</a>。</p><p>下面，我们用一个例子来说明一下Cucumber怎么使用。</p><p>具体操作步骤如下：</p><p>第一步，我们先生成一个测试项目工程，Cucumber可以支持多种开发语言，Ruby，Java，Javascript，.NET等。我们这里以Java为例，使用mvn来生成一个模版项目：</p><pre><code class=\"language-java\">mvn archetype:generate                      \\\n   -DarchetypeGroupId=io.cucumber           \\\n   -DarchetypeArtifactId=cucumber-archetype \\\n   -DarchetypeVersion=2.3.1.2               \\\n   -DgroupId=foodcometest                  \\\n   -DartifactId=foodcometest               \\\n   -Dpackage=foodcome                 \\\n   -Dversion=1.0.0-SNAPSHOT                 \\\n   -DinteractiveMode=false\n</code></pre><p>运行上面的命令，会生成一个空的Java项目，里面包含了Cucumber所需要的Library文件。</p><p>第二步，把上面的Feature文件，添加到项目路径：src/test/resources/foodcometest/placeorder.feature</p><p>接着是第三步，运行mvn命令：</p><pre><code class=\"language-plain\">mvn test\n</code></pre><p>遵循输出的指示，最终就可以自动生成一个测试Class文件了。</p><pre><code class=\"language-plain\">public class PlaceOrderTest ...  {\n  ...\n  @Given(\"A valid consumer\")\n  public void useConsumer() { ... }\n  @Given(\"a valid restaurant\")\n  public void useRestaurant() { ... }\n  @Given(\"a valid address\")\n  public void validAddres(String address) { ... }\n  @Given(\"a valid order\")\n  public void validAddres(Order orderDetails) { ... }\n  @When(\"I place an order\")\n  public void placeOrder() { ... }\n  @Then(\"the credit card should be authorized\")\n  public void authorizeCreditCard(Long creditCardNo) { ... }\n  @Then(\"order shoudl be Created with pending status\")\n  public void orderCreatedInPendingStatus()  { ... }\n}\n</code></pre><p>在Feature文件里，使用Given，When，Then关键字描述的步骤，对应着PlaceOrderTest的一个个函数，你通过函数名上的注解就可以看到这个对应关系，但是函数体还是TODO，需要你去实现。等你实现了这些函数，再运行Cucumber，它会按照Given，When，Then这个顺序来执行契约的验证了！</p><p>你可以看到这样操作的好处，自动化测试代码是紧紧贴合Feature文件的，如果契约变化了，那可以重新运行mvn命令，同步自动化测试代码。那么同时也意味着，自动化测试成功了，就代表契约验证通过，验收测试通过。</p><p>当然，上面说的只是一个Feature的测试，验收测试里还有一个关键问题，验收测试的范围应该有多大？我的建议是，<strong>签订了多少契约，就做多少验收测试</strong>。也就是说，用户显式表达了多少需求，就应该以这个为基准来做验收。</p><p>你可能会问，有些需求不一定是显式的，但又确实存在。比如一些业务异常路径、边角案例，甚至性能指标，这些也需要整体测试，该怎么测呢？这就要说到端到端的测试。</p><h2>端到端测试</h2><p>为什么要做端到端测试呢？我们在单元测试验证了业务逻辑，在集成测试验证了接口，现在终于要真刀真枪，拉上战场了。所有服务都一起上线，要看是不是能匹配得上。</p><p>所以，端到端测试（End-to-end testing）指的是一个功能从开始到结束，贯穿了整个系统的A服务、B服务，一直到N服务。通常这个功能是从哪里发起的呢？一般是UI端。它又在哪里结束呢？在某个服务模块，比如是数据库。</p><p>但是，根据3KU测试金字塔，在UI执行测试是ROI最小的。有没有办法找到一种ROI较高的端到端测试方法呢？在<a href=\"https://time.geekbang.org/column/article/497405\">第二讲</a>里，我提到过“<strong>分层是追求整体ROI的结果</strong> ”，反过来也是成立的，如果为了追求更高的ROI，你甚至可以创建出一个新的分层。</p><p>当时我就在想，UI测试ROI小，但好处是业务可见性强。如果下沉到代码层和接口层，ROI上来了，但是业务又模糊了。所以在接口测试层和系统测试层的中间地带，有没有可能找到一个业务可见性也比较强、ROI也比较高的测试层呢？</p><p>我很惊喜地发现，业界还真有人跟我一样在考虑这个问题了。Martin Fowler在他的网站提出了一种新的测试方法，叫做Subcutaneous Test，中文叫做<strong>皮下测试</strong>。</p><p>皮下测试，顾名思义，是当你要做的端到端测试在UI上测试很难做，或者能做但是成本很高，所以，选择紧贴着UI测试的下一层发起测试。在3KU测试金字塔里，它是在集成测试和UI测试中又加入了一层。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/5b/4671cce5c9bb86fabc726016fa222b5b.jpg?wh=1920x1108\" alt=\"图片\"></p><h3>皮下测试</h3><p>要想实现皮下测试，首先要找到皮层在哪里，看看请求链路，肉眼可见的皮层就是Http request，手机APP是皮上层，后台的订单服务是皮下层。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/2e/c50744ea199518dcbdfc2a76d8d13a2e.jpg?wh=1920x986\" alt=\"图片\"></p><p>皮下测试就是模拟客户端发出的HTTP请求，直接发送到后端服务。这个用RestAssure测试框架就可以轻松做到：</p><pre><code class=\"language-java\">public class E2ERestTest {\n    @Test\n    public void shouldOrderBeCreated() throws Exception {\n        when()\n                .post(\"https://api.foodcome.com/api/v1/orders\", 443))\n        .then()\n                .statusCode(is(200))\n                .body(containsString(\"order created\"));\n    }\n}\n</code></pre><p>可以看出来，刚才做的皮下测试在执行方法上就是一个API测试。不过它跟正常的API测试相比，有两点不同：</p><p>第一，测试请求注入的地方是订单服务，也是UI端直接连接的入口，这个请求也贯穿了后端的服务A，服务B直到服务N，只是它绕过了ROI最小的UI端。</p><p>第二，发起的测试请求，目的是模拟UI端行为，而不是单纯地为了测试订单服务。</p><p>我给你分析一下，这个皮下测试的方法论原理：本来我们要端到端测试n个服务，但是由于第1个服务，也就是UI端的测试ROI非常低。在这里，怎么把复杂的问题简单化呢？可以利用动态规划的思维，我们把原先的测试工作量f(n)做了这样一个分解。</p><p>具体公式如下：<strong>f(n)=f(1)+f(n-1)</strong></p><p>f(n-1)因为绕过了UI，它的难度一下子降下来了。而f(1) 我们上一讲单独讲到了UI测试，可以用单元测试的方法降低UI测试的复杂度。所以，分而治之后，两部分难度都降下来了。皮下测试的价值也就出来了。</p><p>这里插一句提示，动态规划你不了解的话，可以通过后面<a href=\"https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408\">这个资料</a>了解一下。</p><p>我们说回正题，有哪些系统适合做皮下测试呢？ 刚才说到，自动化在UI层做不了，或者能做但是成本很大。比如一些带有画图功能的应用，在UI上有很多的曲线。像下面这样的，就适合皮下测试。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/89/6cfb23c331f5403bf4c1f2b559bac389.jpg?wh=1920x1138\" alt=\"图片\"></p><p>当然，皮下测试还有另外一个问题，就是这个离UI最近的这个“皮层”到底在哪里？</p><p>要找到这样一个合适的截面，需要结合你的项目而定。这个截面可能在网间请求，也可能就在客户端内部。但是原则就是，<strong>这个皮层离UI越近越好，能测试的逻辑最多越好，而且自动化实施的ROI越大越好</strong>。</p><h3>端到端测什么？</h3><p>皮下测试是一个准端到端的测试，本着3KU的原则，业务逻辑在单元测试已经验证过了，接口在集成测试也测过了，在端到端测试，我们的策略可以是 “Trust But Verify”，就是说信任前面阶段做的测试工作，但也要做一些基本的验证的工作。因此在策略上，端到端测试不会把全部的案例都走一遍。</p><p>那现在的端到端测什么？我们可以挑出一些测试案例，形成Workflow，作为端到端的测试案例。这个Workflow的选取原则可以参照集成测试的Happy Path。也就是说一个Workflow能够走过尽可能多的服务。</p><p>对FoodCome来说，客户下单-&gt;验证支付-&gt;餐馆接单-&gt;发送物流-&gt;通知客户，就是满足这样条件的一个Workflow。</p><h2>小结</h2><p>这一讲我们谈到了验收测试和端到端测试，这两种测试在业界经常被混在一起。还是那句话，如果它们是一回事，我们就没必要保留多余的概念。</p><p>经过我们的分析，实际上，这两者从测试角度和测试范围还是不一样的。验收测试是以客户视角，来验证是否按照契约交付，在这里我们用了Gherkins来表达契约，用Cucumber来生成测试代码，验收测试的范围是严格按照契约的内容来测试的。</p><p>对于端到端测试，我们依据3KU原则，提出了皮下测试的概念和实现方法，通过分析，这能够带来更高的ROI。</p><p>到这里，我们第二模块就结束了，我们把测试里的概念和策略都过了一遍，每种策略是什么样的，它在整体起到的什么作用。</p><p>你也可以看到，在3KU原则下，分层这个概念非常灵活：有的需求是在这个层测试，有的需求在那个层测试；甚至一个需求的一部分在这个层做，另外的部分在那个层做，只要ROI最高。</p><p>这就给自动化测试设计提出了挑战，原有的各层的测试方法就需要连接、兼容、打通，怎么做到呢？我们在第三模块设计篇，马上会引出微Job测试模型来解决这个问题。我们下一讲见吧。</p><h2><strong>思考题</strong></h2><p>UI测试、端到端测试还有验收测试的区别是什么？</p><p>欢迎你在留言区跟我交流互动，也推荐你把今天的内容分享给更多同事、朋友。</p>","neighbors":{"left":{"article_title":"15｜UI测试：如何让UI测试更轻快便捷？","id":510620},"right":{"article_title":"17｜元数据模型（一）：小Job模型构建大蓝图","id":512680}},"comments":[{"had_liked":false,"id":343464,"user_name":"听水的湖","can_delete":false,"product_type":"c1","uid":1501385,"ip_address":"","ucode":"B1759F90165D81","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","comment_is_top":true,"comment_ctime":1650862041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.223372038505599e+18","product_id":100109201,"comment_content":"大家好，我是这门课程的编辑小新～<br><br>最近老师出差去了海外，为了不影响你的学习体验，从这一讲起，后面的内容我们还是照常录制。录制的音频回音可能有点大，可以把音量稍微调低一点，特此说明，祝你学习愉快！","like_count":0},{"had_liked":false,"id":348253,"user_name":"dakangz","can_delete":false,"product_type":"c1","uid":1220265,"ip_address":"","ucode":"7AF90957FCCE16","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/a9/ee6c8c9d.jpg","comment_is_top":false,"comment_ctime":1654877034,"is_pvip":false,"replies":[{"id":"126909","content":"谢谢分享！希望其他同学能看到这个经验！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1654937996,"ip_address":"","comment_id":348253,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5949844330","product_id":100109201,"comment_content":"去年开始我们有的项目就在做皮下测试，通过前端F12查看所有操作的api请求，和ui用例做对应，分好模块，10分钟运行上千个请求，把之前的ui自动化都省掉了，然后再手动验证ui层核心功能即可，总共也就两小时搞定一个版本，上百个菜单和页面的回归","like_count":1,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575582,"discussion_content":"谢谢分享！希望其他同学能看到这个经验！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654937996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3095774,"avatar":"","nickname":"Geek_07ddee","note":"","ucode":"B4E3C60916A564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583366,"discussion_content":"希望可以具体分享下如何开展皮下测试，概念可以理解，但是对于如何落地实践，还是有不少疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660055214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353218,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"日本","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1659274105,"is_pvip":false,"replies":[{"id":"128650","content":"对。你的理解非常到位。带有画图的UI，自动化难操作，难验证，运行不稳定，ROI非常低，这是为什么要做“皮下测试”的原因。😄","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1659881065,"ip_address":"日本","comment_id":353218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659274105","product_id":100109201,"comment_content":"对于皮下测试，我理解得还是不够明白。想问下老师提到的：“带有画图功能的应用适合开展皮下测试”，能再具体说明一下，这种功能如何开展皮下测试。<br>我理解的是当一个需求从UI层面，用自动化测试的方式不容易发起，例如需要在UI上填很多信息or点击不稳定的按钮，可以直接找到UI层调用的API，使用这个API来作为测试的发起点。<br>带有画图功能的应用，个人认为难点是在结果的验证。没想明白这类应用为什么适合“皮下测试”。<br>还望老师再给我讲解一下。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583036,"discussion_content":"对。你的理解非常到位。带有画图的UI，自动化难操作，难验证，运行不稳定，ROI非常低，这是为什么要做“皮下测试”的原因。😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659881065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"日本"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350579,"user_name":"七禾叶","can_delete":false,"product_type":"c1","uid":1172706,"ip_address":"","ucode":"E86B4402DF94DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/e2/ea311979.jpg","comment_is_top":false,"comment_ctime":1657013317,"is_pvip":true,"replies":[{"id":"127892","content":"exactlly,  that is the correct thought process!","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1658065972,"ip_address":"","comment_id":350579,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657013317","product_id":100109201,"comment_content":"终于找到目前工作的意义了。<br>     1.At present, according to different roles and permissions of the whole system to find their Happy Path and Workflow。According to the Workflow，we could make sure which api we need。By simulating the user&#39;s operation to put different api together。<br>     2.Some core forms are submitted through the thin client mode。This method includes UI test and api test.We called &quot;皮下测试&quot;。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580292,"discussion_content":"exactlly,  that is the correct thought process!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658065972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343547,"user_name":"Sarah","can_delete":false,"product_type":"c1","uid":2391650,"ip_address":"","ucode":"2B35D90CE51B8C","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/62/48045bee.jpg","comment_is_top":false,"comment_ctime":1650900799,"is_pvip":false,"replies":[{"id":"125620","content":"很有悟性！把专栏传递给大家，如果团队头脑都对齐了，会推行更快！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1651228199,"ip_address":"","comment_id":343547,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650900799","product_id":100109201,"comment_content":"每一节听下来都有一种畅快感！老师讲到的这些，我在项目中也实践了近两年时间，基于ROI最高原则来选择每个需求的在各层的测试覆盖，这个自己实践起来还可以，但是要怎么教会其他人也用这样的方式来实践，我一直也没找到比较好的方式来阐述，老师总结得真好！感恩！<br>期待后续的更新，特别是怎么更好结合皮下测试和UI单元测试这部分，期待","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568791,"discussion_content":"很有悟性！把专栏传递给大家，如果团队头脑都对齐了，会推行更快！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651228199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}