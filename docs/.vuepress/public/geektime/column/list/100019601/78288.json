{"id":78288,"title":"08 | 写好声明的“八项纪律”","content":"<p>我们在前面讨论了该怎么取一个好名字。在编程语言里，我们使用标识符来表示不同的逻辑和对象。声明就是用来定义这些标识符的。标识符声明的地方，就是取名字和第一次使用名字的地方。这一次，我们聊一聊该怎么声明一个标识符。</p><p>“声明”是我们和标识符初次见面的地方，第一印象就显得特别重要。如果我们忘记了，回头能够清晰地找到它，也很重要。如果我们印象模糊了，回头能够重新认识它，对于我们阅读程序也有很大的帮助。</p><p>一个标识符，不仅仅只是一个名字。 像人分男女、高矮胖瘦一样，标识符也可以有附加信息，用来增强人们对它的认识。</p><p>一个声明，一般至少包含两个部分，一个是标识符的名字，一个是标识符的类型。 比如：</p><pre><code>int size;\n</code></pre><p>有的声明，还有修饰和限定部分，比如Java的访问控制修饰符（private，public等）：</p><pre><code>private int size;\n</code></pre><p>或者C语言的存储类别限定符（auto，extern等）：</p><pre><code>auto int size;\n</code></pre><p>写声明很简单，但写好声明也并非易事。我们以Java语言为例来讨论声明的编码风格。在Java语言里，声明可以用来定义类、方法、类变量、局部变量和常量。不同声明的语法有着巨大的差别，但是也有很多共通的地方，你可以把这些思路用在自己熟悉的语言上。</p><!-- [[[read_end]]] --><p>接下来，我会带你一起来学写好声明的“八项纪律”。</p><h2>取一个好名字</h2><p>既然是标识符，就涉及到取名字的问题。我们前面已经讨论过“怎么取好名字”这个话题了，你可以复习一下。</p><h2>一行一个声明</h2><p>我们在前面讨论过“一行一个行为”的代码整理规则。这一规则，同样适用于标识符的声明。不推荐在同一行里声明多个变量，即使这一行很短。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/7c/4228bf7f045d5962b6047035eea1247c.png?wh=622*87\" alt=\"\"><br>\n这样可以很方便地变更和维护代码。 比如，下面的两个代码变更，第二种格式更容易发现大意的错误。</p><pre><code>- int size;\n+ int size, length;\n</code></pre><pre><code>  int size;\n+ int length;\n</code></pre><p>下面这个代码变更例子，也是同理。</p><pre><code>- int size, length;\n+ int size;    // size of the list\n+ int length; \n</code></pre><pre><code>- int size;\n+ int size;    // size of the list\n  int length;   \n</code></pre><p>另外，不要在同一行声明不同类型的标识符。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/fb/bb3ac2546108163f635308d9a61d5efb.png?wh=622*87\" alt=\"\"><br>\n需要注意的是，表示数组的中括号“[]”是类型的一部分，而不是标识符的一部分。无论是Java语言，还是在C语言的代码中，我都建议把数组符号放在类型该在的地方。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/1d/4e288c08c438de096b4fb82b7acdbf1d.png?wh=625*68\" alt=\"\"></p><h2>局部变量需要时再声明</h2><p>标识符的声明应该和它的使用尽可能地靠近，特别是局部变量的标识符声明。这样在视觉上，标识符的定义和使用，可以方便我们阅读和记忆。</p><p>比如，在下面的例子中，GroceryStore的声明就太早了。如果代码再长一些，等我们读到代码的末尾时，前面声明的变量很可能都忘记了，如果还要返回来查看这个具体的声明，那就太麻烦了。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/8a/f6cefda34bfb97302b6fa13fbb92508a.jpg?wh=623*1027\" alt=\"\"></p><h2>类属性要集中声明</h2><p>同样是为了阅读和记忆，类变量的声明则要集中。因为类变量无论是私密变量，还是公开变量，在类的方法实现中，随时都可以调用。我们需要把这些变量放在一起，以便于修改和查找。</p><p>在下面的例子中，变量的声明散乱在类的代码块里。如果我们想要新加一个方法，或者调整方法声明的顺序，代码马上就会变得混乱不堪。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/d0/7ed641489967eee1fb1d865d04eefbd0.jpg?wh=624*946\" alt=\"\"></p><h2>声明时就初始化</h2><p>除非变量的初始值依赖于更多的条件，或者涉及到一定的计算，否则，声明时就应该完成初始化。声明时初始化，可以防止初始化的遗漏或者不必要的代码重复。</p><p>在下面的例子中，你可以设想一下，如果变量_isNegotiated_是后来加入的属性，哪一种编码方式更容易变更、更容易维护？</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/43/4dfa095cb5cf497c3475492e3afdf443.png?wh=623*744\" alt=\"\"></p><h2>尾随的花括号</h2><p>一般来说，类声明和方法声明后，要使用花括号把实现的代码包括进来。花括号的使用语法很随意。我不建议代码中混杂地使用不同的格式。我只推荐一种方法：</p><ol>\n<li>\n<p>左括号不要单独成行，要紧随在语句尾部，以一个空格隔开；</p>\n</li>\n<li>\n<p>右括号单独一行。</p>\n</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/a4/68/a4d1ff61709c798cb4c13f430a82f868.png?wh=622*499\" alt=\"\"></p><h2>靠紧的小括号</h2><p>小括号的使用语法也可以很随意。小括号一般用来识别一个标识符是不是方法标识符，所以建议小括号要紧靠着标识符，中间不要有空格。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/b9/ea7c2e84ea29dedb0495ffddf26ee9b9.png?wh=628*404\" alt=\"\"></p><h2>搜索优化的换行</h2><p>搜索优化是我们编写代码时要考虑的一个因素。搜索优化既包括针对搜索引擎的优化（SEO），也包括针对编辑器（vi, Netbeans）以及系统工具（grep）的搜索优化。</p><p>常见的搜索模式有：</p><ul>\n<li>\n<p>“public class”</p>\n</li>\n<li>\n<p>“abstract class”</p>\n</li>\n<li>\n<p>“class TheClassName”</p>\n</li>\n<li>\n<p>“extends TheClassName”</p>\n</li>\n<li>\n<p>“implements TheInterfaceName”</p>\n</li>\n<li>\n<p>“theMethodName(”</p>\n</li>\n</ul><p>这些常用的搜索模式给了我们一个很好的启示：语义相关的词语，常见的搜索模式，要尽量放在同一行。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/d9/2f84dcbcb1a3c1080417d0cda402cad9.png?wh=625*463\" alt=\"\"></p><h2>小结</h2><p>我们讲完了写好声明的八项原则，虽然相对来说比较细致，但基本的大原则主要有两个：</p><ul>\n<li>\n<p>取好名字</p>\n</li>\n<li>\n<p>容易识别</p>\n</li>\n</ul><p>掌握住这两条大原则，你会慢慢积累更多的最佳实践案例和纪律细节，让自己的代码声明越来越好读、越来越好用。</p><h2>一起来动手</h2><p>所以为了让你更好地实践，我找了一段Java代码。你来试试看，怎么把这段代码改得更漂亮？欢迎你把优化的代码公布在讨论区，我们一起来看看这段代码都有哪些可以改进的地方。</p><pre><code>import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    /**\n     * Return a list of the words in words that match the given pattern.\n     *\n     * A word matches the pattern if there exists a permutation of\n     * letters p so that after replacing every letter x in the pattern\n     * with p(x), we get the desired word.\n     *\n     * Example:\n     *     Input: words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;],\n     *            pattern = &quot;abb&quot;\n     *     Output: [&quot;mee&quot;,&quot;aqq&quot;]\n     *\n     *     Explanation: &quot;mee&quot; matches the pattern because there is\n     *         a permutation {a -&gt; m, b -&gt; e, ...}.\n     *\n     *        &quot;ccc&quot; does not match the pattern because\n     *        {a -&gt; c, b -&gt; c, ...} is not a permutation, since a\n     *        and b map to the same letter.\n     */\n    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {\n        List&lt;String&gt; ans = new ArrayList();\n        for (String word: words)\n            if (match(word, pattern))\n                ans.add(word);\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map&lt;Character, Character&gt; M = new HashMap();\n        for (int i = 0; i &lt; word.length(); ++i) {\n            char w = word.charAt(i);\n            char p = pattern.charAt(i);\n            if (!M.containsKey(w)) M.put(w, p);\n            if (M.get(w) != p) return false;\n        }\n        boolean[] seen = new boolean[26];\n        for (char p: M.values()) {\n            if (seen[p - 'a']) return false;\n            seen[p - 'a'] = true;\n        }\n        return true;\n    }\n}\n</code></pre><p>备注：代码选自<a href=\"https://leetcode.com/problems/find-and-replace-pattern/\">https://leetcode.com/problems/find-and-replace-pattern/</a></p><p><span class=\"orange\">欢迎你把这篇文章分享给你的朋友或者同事，一起来探讨吧！</span></p>","neighbors":{"left":{"article_title":"07 | 写好注释，真的是小菜一碟吗？","id":78086},"right":{"article_title":"09 | 怎么用好Java注解？","id":78674}},"comments":[{"had_liked":false,"id":64425,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1548773447,"is_pvip":true,"replies":[{"id":"22913","content":"刚注意到代码图片里的一些规范问题，手误。 看了下carbon，很不错的工具。 谢谢推荐！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548908768,"ip_address":"","comment_id":64425,"utype":1}],"discussion_count":2,"race_medal":1,"score":"27318577223","product_id":100019601,"comment_content":"代码图片建议用 carbon 美化下，可读性会更好：）<br><br>https:&#47;&#47;carbon.now.sh&#47;","like_count":7,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437993,"discussion_content":"刚注意到代码图片里的一些规范问题，手误。 看了下carbon，很不错的工具。 谢谢推荐！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548908768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32167,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571012968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62694,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1548134009,"is_pvip":false,"replies":[{"id":"22232","content":"找的都很棒！ ","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548204881,"ip_address":"","comment_id":62694,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14433035897","product_id":100019601,"comment_content":"第28，29，39，40，44行相对应带上大括号会更好<br>第39，40，44行属于一行表示多重行为，不便于观察和理解，换行会更好<br>第28，31，36，42，47行的代码与前面的代码没有很好的分块，构成不了视觉上面清晰的代码块，在前面加上空行会更好<br>第35行命名不够清晰，修改为Map&lt;Character, Character&gt; charMapping = new HashMap&lt;&gt;();<br>第29行，就像前面 @背着吉他的大漠狼 同学说的，if 里面的 match 函数其实表示的意义不太明确，读者需要去看 match 函数的大致实现，如果在此之前定义一个boolean isMatched = match(word, pattern); 再将 isMatched 放到 if 里面会好很多；而且把函数直接放在 if 语句里面其实也违反了我们之前提到的单行单一行为的原则，因为运行函数返回结果和表达式条件判断在概念上本就是两个完全不同的行为<br><br>能看到的就这些了，不足之处还请老师和大神们补充","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437308,"discussion_content":"找的都很棒！ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548204881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62328,"user_name":"allean","can_delete":false,"product_type":"c1","uid":1051470,"ip_address":"","ucode":"A0D2DB4F219EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","comment_is_top":false,"comment_ctime":1548033602,"is_pvip":false,"replies":[{"id":"22031","content":"质量的事是大事（追求），质量的事是小事（执行）。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548037689,"ip_address":"","comment_id":62328,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14432935490","product_id":100019601,"comment_content":"细节无小事，高手不是掌握了降龙十八掌，而是简单的事也能做到极致，学习了。","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437171,"discussion_content":"质量的事是大事（追求），质量的事是小事（执行）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548037689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64804,"user_name":"Lindroid","can_delete":false,"product_type":"c1","uid":1248230,"ip_address":"","ucode":"3AEFCC8A57EFD2","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/e6/b626aa9c.jpg","comment_is_top":false,"comment_ctime":1548915487,"is_pvip":false,"replies":[{"id":"22929","content":"赞这个发现！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548920041,"ip_address":"","comment_id":64804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10138850079","product_id":100019601,"comment_content":"length方法直接写在for循环语句中会不会不是很好呢？因为这样每次循环都会调用它去获取word字符的长度，所以我觉得可以在for循环直接声明一个变量，值就是word的字符长度：<br>        int wordLength = word.length();<br>        for (int i = 0; i &lt; wordLength; i++) {<br>           ……<br>        }","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438185,"discussion_content":"赞这个发现！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548920041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62376,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1548041371,"is_pvip":false,"replies":[{"id":"22103","content":"舒服很多就是收获了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548093134,"ip_address":"","comment_id":62376,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10137975963","product_id":100019601,"comment_content":"```<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>class Solution {<br>    &#47;**<br>     * Return a list of the words in words that match the given pattern.<br>     *<br>     * A word matches the pattern if there exists a permutation of<br>     * letters p so that after replacing every letter x in the pattern<br>     * with p(x), we get the desired word.<br>     *<br>     * Example:<br>     *     Input: words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;],<br>     *            pattern = &quot;abb&quot;<br>     *     Output: [&quot;mee&quot;,&quot;aqq&quot;]<br>     *<br>     *     Explanation: &quot;mee&quot; matches the pattern because there is<br>     *         a permutation {a -&gt; m, b -&gt; e, ...}.<br>     *<br>     *        &quot;ccc&quot; does not match the pattern because<br>     *        {a -&gt; c, b -&gt; c, ...} is not a permutation, since a<br>     *        and b map to the same letter.<br>     *&#47;<br>    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {<br>        List&lt;String&gt; ans = new ArrayList();<br>        for (String word : words) {<br>            if (match(word, pattern)) {<br>                ans.add(word);<br>            }<br>        }<br>        return ans;<br>    }<br><br>    public boolean match(String word, String pattern) {<br>        Map&lt;Character, Character&gt; M = new HashMap();<br>        for (int i = 0; i &lt; word.length(); ++i) {<br>            char w = word.charAt(i);<br>            char p = pattern.charAt(i);<br>            if (!M.containsKey(w)) {<br>                M.put(w, p);<br>            }<br>            if (M.get(w) != p) {<br>                return false;<br>            }<br>        }<br>        boolean[] seen = new boolean[26];<br>        for (char p : M.values()) {<br>            if (seen[p - &#39;a&#39;]) {<br>                return false;<br>            }<br>            seen[p - &#39;a&#39;] = true;<br>        }<br>        return true;<br>    }<br>}<br>```<br>改成我喜欢的格式,虽然不一定准确,但是自己看上去舒服很多 ","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437189,"discussion_content":"舒服很多就是收获了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548093134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67651,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1550217224,"is_pvip":false,"replies":[{"id":"24086","content":"和Java的惯例相比，道理是一样的。C语言，我更倾向于声明时就初始化一点。Java有固定的缺省的值，C语言的缺省值是随机的，一旦初始化遗漏，很多麻烦。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550344248,"ip_address":"","comment_id":67651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845184520","product_id":100019601,"comment_content":"还想问个问题就是c++得成员变量初始化可以再声明的时候初始化也可以在构造函数初始化，那哪种比较好呢","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439304,"discussion_content":"和Java的惯例相比，道理是一样的。C语言，我更倾向于声明时就初始化一点。Java有固定的缺省的值，C语言的缺省值是随机的，一旦初始化遗漏，很多麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550344248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62381,"user_name":"背着吉他的大漠狼","can_delete":false,"product_type":"c1","uid":1048796,"ip_address":"","ucode":"8ACC6661BAD396","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/dc/165a601f.jpg","comment_is_top":false,"comment_ctime":1548042194,"is_pvip":false,"replies":[{"id":"22104","content":"“if语句尽量不要涉及复杂的表达式”，这个经验很赞！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548093233,"ip_address":"","comment_id":62381,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5843009490","product_id":100019601,"comment_content":"1，if语句尽量不要涉及复杂的表达式，可以用局部变量申明出来<br>2，例子中有些许的不同语义的卸载了同一行，写没很好使用花括号<br>3，方法体内可以将申明部分与逻辑部分使用空行加强阅读理解","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437192,"discussion_content":"“if语句尽量不要涉及复杂的表达式”，这个经验很赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548093233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2976412,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/6a/9c/de8f9280.jpg","nickname":"刚毅坚卓","note":"","ucode":"6D16E587400F6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568350,"discussion_content":"如果碰到复杂的判断要怎么办","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651111361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62358,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1548038469,"is_pvip":false,"replies":[{"id":"22034","content":"要看情况，简单的声明优先声明时就初始化。但是也有很多声明，特别是涉及效率的时候，要延迟初始化。我们后面还会专门将延迟初始化。所以，那一段我有加一个这个原则的适用条件。<br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548041172,"ip_address":"","comment_id":62358,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5843005765","product_id":100019601,"comment_content":"老师，声明时就初始化，好像我定义那些实体Bean时候，并没有这么做，这个也要看情况吧？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437181,"discussion_content":"要看情况，简单的声明优先声明时就初始化。但是也有很多声明，特别是涉及效率的时候，要延迟初始化。我们后面还会专门将延迟初始化。所以，那一段我有加一个这个原则的适用条件。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548041172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351640,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658034893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658034893","product_id":100019601,"comment_content":"取好名字，容易识别--记下来","like_count":0},{"had_liked":false,"id":325815,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1639149302,"is_pvip":false,"replies":[{"id":"118207","content":"声明的时候直接初始化很常见。如果相同的变量在不同的初始化里值不一样，才需要放在构造函数里，或者初始化函数里。","user_name":"作者回复","user_name_real":"作者","uid":"1111315","ctime":1639242314,"ip_address":"","comment_id":325815,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639149302","product_id":100019601,"comment_content":"老师，请教您一个问题：<br>Java中类变量的初始化不是都放在构造函数或者初始化函数中吗？您的示例中是声明的时候直接初始化的，是不是有复杂逻辑（需要通过调用方法赋值）的才需要放在初始化函数中？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537920,"discussion_content":"声明的时候直接初始化很常见。如果相同的变量在不同的初始化里值不一样，才需要放在构造函数里，或者初始化函数里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639242315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":538071,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639320639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537920,"ip_address":""},"score":538071,"extra":""}]}]},{"had_liked":false,"id":292113,"user_name":"Mr.yu","can_delete":false,"product_type":"c1","uid":1181786,"ip_address":"","ucode":"830BDDDA52B578","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5a/d1c64d21.jpg","comment_is_top":false,"comment_ctime":1620696196,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620696196","product_id":100019601,"comment_content":"越来越发现技术好到一定程度的人，往往汉字也写的很好。","like_count":0},{"had_liked":false,"id":292112,"user_name":"Mr.yu","can_delete":false,"product_type":"c1","uid":1181786,"ip_address":"","ucode":"830BDDDA52B578","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5a/d1c64d21.jpg","comment_is_top":false,"comment_ctime":1620696106,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620696106","product_id":100019601,"comment_content":"package com.jikeshijian.fanxuelie;<br><br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>class Solution {<br><br>    &#47;**<br>     * Return a list of the words in words that match the given pattern.<br>     *<br>     * A word matches the pattern if there exists a permutation of letters p so that after replacing<br>     * every letter x in the pattern with p(x), we get the desired word.<br>     *<br>     * Example: Input: words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot; Output:<br>     * [&quot;mee&quot;,&quot;aqq&quot;]<br>     *<br>     * Explanation: &quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}.<br>     *<br>     * &quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation, since a<br>     * and b map to the same letter.<br>     *&#47;<br>    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {<br>        List&lt;String&gt; ans = new ArrayList();<br>        for (String word : words) {<br>            if (match(word, pattern)) {<br>                ans.add(word);<br>            }<br>        }<br>        return ans;<br>    }<br><br>    public boolean match(String word, String pattern) {<br>        Map&lt;Character, Character&gt; M = new HashMap();<br>        for (int i = 0; i &lt; word.length(); ++i) {<br>            char w = word.charAt(i);<br>            char p = pattern.charAt(i);<br>            if (!M.containsKey(w)) {<br>                M.put(w, p);<br>            }<br>            if (M.get(w) != p) {<br>                return false;<br>            }<br>        }<br>        boolean[] seen = new boolean[26];<br>        for (char p : M.values()) {<br>            if (seen[p - &#39;a&#39;]) {<br>                return false;<br>            }<br>            seen[p - &#39;a&#39;] = true;<br>        }<br>        return true;<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":246920,"user_name":"newtonker","can_delete":false,"product_type":"c1","uid":1155672,"ip_address":"","ucode":"F0A695544C73D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a2/58/d313b781.jpg","comment_is_top":false,"comment_ctime":1599531142,"is_pvip":false,"replies":[{"id":"91449","content":"如果没有这一行，视觉效果是不是稍差一点点？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1600572790,"ip_address":"","comment_id":246920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599531142","product_id":100019601,"comment_content":"emptyMethod的方法体里还需要加一行blank的注释吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505260,"discussion_content":"如果没有这一行，视觉效果是不是稍差一点点？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600572790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96637,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1558483066,"is_pvip":false,"replies":[{"id":"34707","content":"都是很好的经验！ 谢谢分享！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1558586099,"ip_address":"","comment_id":96637,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558483066","product_id":100019601,"comment_content":"声明包含命名规范和类型，命名规范之前的文章探讨过，我觉得这里更重要的是类型。文中提到很多格式上的注意，我补充一些类型上的探讨，使用类型上有很大学问，个人觉得 function 能解决的不用 class，不变的变量要使用 immutable 的类型，避免中间赋值的改变，整型能表达的不用浮点型，金钱等精确度要求高的变量转换成整型。<br><br>另外就是不同代码模块传参的时候，相同声明可能会造成误解，或者一些语言会出现不同 namespace 不可知的变量值改变。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450946,"discussion_content":"都是很好的经验！ 谢谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558586099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69719,"user_name":"拉格朗日的忧桑","can_delete":false,"product_type":"c1","uid":1312991,"ip_address":"","ucode":"5FCB2C6616E113","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/df/4e5c2b29.jpg","comment_is_top":false,"comment_ctime":1550817359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550817359","product_id":100019601,"comment_content":"import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>class Solution {<br><br>\tprivate static final char CHAR_VALUE = &#39;a&#39;;<br>\t<br>\t<br>    &#47;**<br>     * Return a list of the words in words that match the given pattern.<br>     *<br>     * A word matches the pattern if there exists a permutation of<br>     * letters p so that after replacing every letter x in the pattern<br>     * with p(x), we get the desired word.<br>     *<br>     * Example:<br>     *     Input: words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;],<br>     *            pattern = &quot;abb&quot;<br>     *     Output: [&quot;mee&quot;,&quot;aqq&quot;]<br>     *<br>     *     Explanation: &quot;mee&quot; matches the pattern because there is<br>     *         a permutation {a -&gt; m, b -&gt; e, ...}.<br>     *<br>     *        &quot;ccc&quot; does not match the pattern because<br>     *        {a -&gt; c, b -&gt; c, ...} is not a permutation, since a<br>     *        and b map to the same letter.<br>     *&#47;<br>    public List&lt;String&gt; findAndReplacePattern(String[] words, String pattern) {<br>        List&lt;String&gt; result = new ArrayList();<br>\t\t<br>        for (String word: words)<br>\t\t{<br>\t\t    if (match(word, pattern))<br>\t\t\t{<br>\t\t\t<br>\t\t\t    result.add(word);<br>\t\t\t}<br>                <br>\t\t}<br>            <br>        return result;<br>    }<br><br>    public boolean match(String word, String pattern) {<br>        Map&lt;Character, Character&gt; map = new HashMap();<br>\t\t<br>        for (int i = 0; i &lt; word.length(); ++i) {<br>\t\t<br>            char wordChar = word.charAt(i);<br>            char patternChar = pattern.charAt(i);<br>\t\t\t<br>            if (!map.containsKey(w))<br>\t\t\t{<br>\t\t\t    map.put(wordChar, patternChar);<br>\t\t\t}<br>            if (map.get(wordChar) != patternChar) <br>\t\t\t{<br>\t\t\t    return false;<br>\t\t\t}<br>\t\t\t<br>        }<br>\t\t<br>        boolean[] seen = new boolean[26];<br>\t\t<br>        for (char charPattern: map.values()) {<br>\t\t\t<br>            if (seen[charPattern - CHAR_VALUE]) <br>\t\t\t{<br>\t\t\t\treturn false;<br>\t\t\t}<br>\t\t\t<br>            seen[charPattern - CHAR_VALUE] = true;<br>        }<br>\t\t<br>        return true;<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":67648,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1550217116,"is_pvip":false,"replies":[{"id":"24089","content":"语言的设计一般要追求的灵活性，使用者就要规避灵活性带来的负面影响。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550345098,"ip_address":"","comment_id":67648,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550217116","product_id":100019601,"comment_content":"不明白为什么像这种int size, length;一行声明多个的形式要被设计出来，不让用不就得了，唉……<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439301,"discussion_content":"语言的设计一般要追求的灵活性，使用者就要规避灵活性带来的负面影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550345098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62331,"user_name":"王小豪","can_delete":false,"product_type":"c1","uid":1080126,"ip_address":"","ucode":"68446C1AB7451A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erTP9oVUWrHicg8korhaiakmWnskgZDQ4zLF91wLPrOrGicnCOiczIHqSceH4P2ZfdUfV9Tk13kbJfRTQ/132","comment_is_top":false,"comment_ctime":1548034091,"is_pvip":false,"replies":[{"id":"22028","content":"多出来的时间练练题吧😄","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548037362,"ip_address":"","comment_id":62331,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548034091","product_id":100019601,"comment_content":"很有用～就是感觉有点短呐😂","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437173,"discussion_content":"多出来的时间练练题吧😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548037362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}