{"id":193093,"title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","content":"<p>到今天为止，设计原则和思想已经全部讲完了，其中包括：面向对象、设计原则、规范与重构三个模块的内容。除此之外，我们还学习了贯穿整个专栏的代码质量评判标准。专栏的进度已经接近一半，马上就要进入设计模式内容的学习了。在此之前，我先带你一块来总结回顾一下，我们已经学过的所有知识点。</p><p>今天的内容比较多，有一万多字，但都是之前学过的，算是一个总结回顾，主要是想带你复习一下，温故而知新。如果你看了之后，感觉都有印象，那就说明学得还不错；如果还能在脑子里形成自己的知识架构，闭上眼睛都能回忆上来，那说明你学得很好；如果能有自己的理解，并且在项目开发中，开始思考代码质量问题，开始用已经学过的设计原则和思想来审视代码，那说明你已经掌握这些内容的精髓。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/d3/f3262ef8152517d3b11bfc3f2d2b12d3.png?wh=5013*3903\" alt=\"\"></p><h2>一、代码质量评判标准</h2><p><strong>如何评价代码质量的高低？</strong></p><p>代码质量的评价有很强的主观性，描述代码质量的词汇也有很多，比如可读性、可维护性、灵活、优雅、简洁。这些词汇是从不同的维度去评价代码质量的。它们之间有互相作用，并不是独立的，比如，代码的可读性好、可扩展性好就意味着代码的可维护性好。代码质量高低是一个综合各种因素得到的结论。我们并不能通过单一维度去评价一段代码的好坏。</p><p><strong>最常用的评价标准有哪几个？</strong></p><!-- [[[read_end]]] --><p>最常用到几个评判代码质量的标准有：可维护性、可读性、可扩展性、灵活性、简洁性、可复用性、可测试性。其中，可维护性、可读性、可扩展性又是提到最多的、最重要的三个评价标准。</p><p><strong>如何才能写出高质量的代码？</strong></p><p>要写出高质量代码，我们就需要掌握一些更加细化、更加能落地的编程方法论，这就包含面向对象设计思想、设计原则、设计模式、编码规范、重构技巧等。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/2b/34c51d1eb44ffc099d448ad10bcda82b.jpg?wh=2129*1309\" alt=\"\"></p><h2>二、面向对象</h2><h3>1.面向对象概述</h3><p>现在，主流的编程范式或者编程风格有三种，它们分别是面向过程、面向对象和函数式编程。面向对象这种编程风格又是这其中最主流的。现在比较流行的编程语言大部分都是面向对象编程语言。大部分项目也都是基于面向对象编程风格开发的。面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。</p><h3>2.面向对象四大特性</h3><p>封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方法来访问内部信息或者数据。它需要编程语言提供权限访问控制语法来支持，例如Java中的private、protected、public关键字。封装特性存在的意义，一方面是保护数据不被随意修改，提高代码的可维护性；另一方面是仅暴露有限的必要接口，提高类的易用性。</p><p>如果说封装主要讲如何隐藏信息、保护数据，那抽象就是讲如何隐藏方法的具体实现，让使用者只需要关心方法提供了哪些功能，不需要知道这些功能是如何实现的。抽象可以通过接口类或者抽象类来实现。抽象存在的意义，一方面是修改实现不需要改变定义；另一方面，它也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p><p>继承用来表示类之间的is-a关系，分为两种模式：单继承和多继承。单继承表示一个子类只继承一个父类，多继承表示一个子类可以继承多个父类。为了实现继承这个特性，编程语言需要提供特殊的语法机制来支持。继承主要是用来解决代码复用的问题。</p><p>多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。多态这种特性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。多态可以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。</p><h3>3.面向对象VS面向过程</h3><p>面向对象编程相比面向过程编程的优势主要有三个。</p><ul>\n<li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。</li>\n<li>面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。</li>\n<li>从编程语言跟机器打交道方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。</li>\n</ul><p>面向对象编程一般使用面向对象编程语言来进行，但是，不用面向对象编程语言，我们照样可以进行面向对象编程。反过来讲，即便我们使用面向对象编程语言，写出来的代码也不一定是面向对象编程风格的，也有可能是面向过程编程风格的。</p><p>面向对象和面向过程两种编程风格并不是非黑即白、完全对立的。在用面向对象编程语言开发的软件中，面向过程风格的代码并不少见，甚至在一些标准的开发库（比如JDK、Apache Commons、Google Guava）中，也有很多面向过程风格的代码。</p><p>不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。</p><h3>4.面向对象分析、设计与编程</h3><p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP），是面向对象开发的三个主要环节。简单点讲，面向对象分析就是要搞清楚做什么，面向对象设计就是要搞清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。</p><p>需求分析的过程实际上是一个不断迭代优化的过程。我们不要试图一下就给出一个完美的解决方案，而是先给出一个粗糙的、基础的方案，有一个迭代的基础，然后再慢慢优化。这样一个思考过程能让我们摆脱无从下手的窘境。</p><p>面向对象设计和实现要做的事情就是把合适的代码放到合适的类中。至于到底选择哪种划分方法，判定的标准是让代码尽量地满足“松耦合、高内聚”、单一职责、对扩展开放对修改关闭等我们之前讲到的各种设计原则和思想，尽量地做到代码可复用、易读、易扩展、易维护。</p><p>面向对象分析的产出是详细的需求描述。面向对象设计的产出是类。在面向对象设计这一环节中，我们将需求描述转化为具体的类的设计。这个环节的工作可以拆分为下面四个部分。</p><ul>\n<li>划分职责进而识别出有哪些类</li>\n</ul><p>根据需求描述，我们把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，可否归为同一个类。</p><ul>\n<li>定义类及其属性和方法</li>\n</ul><p>我们识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选出真正的方法，把功能点中涉及的名词，作为候选属性，然后同样再进行过滤筛选。</p><ul>\n<li>定义类与类之间的交互关系</li>\n</ul><p>UML统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、组合、依赖。我们从更加贴近编程的角度，对类与类之间的关系做了调整，保留了四个关系：泛化、实现、组合、依赖。</p><ul>\n<li>将类组装起来并提供执行入口</li>\n</ul><p>我们要将所有的类组装在一起，提供一个执行入口。这个入口可能是一个main()函数，也可能是一组给外部用的API接口。通过这个入口，我们能触发整个代码跑起来。</p><h3>5.接口VS抽象类</h3><p>抽象类不允许被实例化，只能被继承。它可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。接口不能包含属性（Java可以定义静态常量），只能声明方法，方法不能包含代码实现（Java8以后可以有默认实现）。类实现接口的时候，必须实现接口中声明的所有方法。</p><p>抽象类是对成员变量和方法的抽象，是一种is-a关系，是为了解决代码复用问题。接口仅仅是对方法的抽象，是一种has-a关系，表示具有某一组行为特性，是为了解决解耦问题，隔离接口和具体的实现，提高代码的扩展性。</p><p>什么时候该用抽象类？什么时候该用接口？实际上，判断的标准很简单。如果要表示一种is-a的关系，并且是为了解决代码复用问题，我们就用抽象类；如果要表示\b一种has-a关系，并且是为了解决抽象而非代码复用问题，那我们就用接口。</p><h3>6.基于接口而非实现编程</h3><p>应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。</p><p>实际上，“基于接口而非实现编程”这条原则的另一个表述方式是，“基于抽象而非实现编程”。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。</p><p>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。</p><h3>7.多用组合少用继承</h3><p><strong>为什么不推荐使用继承？</strong></p><p>继承是面向对象的四大特性之一，用来表示类之间的is-a关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。在这种情况下，我们应该尽量少用，甚至不用继承。</p><p><strong>组合相比继承有哪些优势？</strong></p><p>继承主要有三个作用：表示is-a关系、支持多态特性、代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成。除此之外，利用组合还能解决层次过深、过复杂的继承关系影响代码可维护性的问题。</p><p><strong>如何判断该用组合还是继承？</strong></p><p>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。在实际的项目开发中，我们还是要根据具体的情况，来选择该用继承还是组合。如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承或者组合。</p><h3>8.贫血模型VS充血模型</h3><p>我们平时做Web项目的业务开发，大部分都是基于贫血模型的MVC三层架构，在专栏中我把它称为传统的开发模式。之所以称之为“传统”，是相对于新兴的基于充血模型的DDD开发模式来说的。基于贫血模型的传统开发模式，是典型的面向过程的编程风格。相反，基于充血模型的DDD开发模式，是典型的面向对象的编程风格。</p><p>不过，DDD也并非银弹。对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的DDD开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的DDD开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。</p><p>基于充血模型的DDD开发模式跟基于贫血模型的传统开发模式相比，主要区别在Service层。在基于充血模型的开发模式下，我们将部分原来在Service类中的业务逻辑移动到了一个充血的Domain领域模型中，让Service类的实现依赖这个Domain类。不过，Service类并不会完全移除，而是负责一些不适合放在Domain类中的功能。比如，负责与Repository层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。</p><p>基于充血模型的DDD开发模式跟基于贫血模型的传统开发模式相比，Controller层和Repository层的代码基本上相同。这是因为，Repository层的Entity生命周期有限，Controller层的VO只是单纯作为一种DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在Service层。所以，Repository层和Controller层继续沿用贫血模型的设计思路是没有问题的。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/e7/f4ce06502a9782d200e8e10a90bf2ce7.jpg?wh=2419*3593\" alt=\"\"></p><h2>三、设计原则</h2><h3>1.SOLID原则：SRP单一职责原则</h3><p>一个类只负责完成一个职责或者功能。单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、松耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</p><p>不同的应用场景、不同阶段的需求背景、不同的业务层面，对同一个类的职责是否单一，可能会有不同的判定结果。实际上，一些侧面的判断指标更具有指导意义和可执行性，比如，出现下面这些情况就有可能说明这类的设计不满足单一职责原则：</p><ul>\n<li>类中的代码行数、函数或者属性过多；</li>\n<li>类依赖的其他类过多或者依赖类的其他类过多；</li>\n<li>私有方法过多；</li>\n<li>比较难给类起一个合适的名字；</li>\n<li>类中大量的方法都是集中操作类中的某几个属性。</li>\n</ul><h3>2.SOLID原则：OCP开闭原则</h3><p><strong>如何理解“对扩展开放、修改关闭”？</strong></p><p>添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。关于定义，我们有两点要注意。第一点是，开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。第二点是，同样的代码改动，在粗代码粒度下，可能被认定为“修改”；在细代码粒度下，可能又被认定为“扩展”。</p><p><strong>如何做到“对扩展开放、修改关闭”？</strong></p><p>我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上。</p><p>很多设计原则、设计思想、设计模式，都是以提高代码的扩展性为最终目的的。特别是23种经典设计模式，大部分都是为了解决代码的扩展性问题而总结出来的，都是以开闭原则为指导原则的。最常用来提高代码扩展性的方法有：多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式（比如，装饰、策略、模板、职责链、状态）。</p><h3>3.SOLID原则：LSP里式替换原则</h3><p>子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。</p><p>里式替换原则是用来指导继承关系中子类该如何设计的一个原则。理解里式替换原则，最核心的就是理解“design by contract，按照协议来设计”这几个字。父类定义了函数的“约定”（或者叫协议），那子类可以改变函数的内部实现逻辑，但不能改变函数的原有“约定”。这里的“约定”包括：函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明。</p><p>理解这个原则，我们还要弄明白，里式替换原则跟多态的区别。虽然从定义描述和代码实现上来看，多态和里式替换有点类似，但它们关注的角度是不一样的。多态是面向对象编程的一大特性，也是面向对象编程语言的一种语法。它是一种代码实现的思路。而里式替换是一种设计原则，用来指导继承关系中子类该如何设计，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑及不破坏原有程序的正确性。</p><h3>4.SOLID原则：ISP接口隔离原则</h3><p>接口隔离原则的描述是：客户端不应该强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。理解“接口隔离原则”的重点是理解其中的“接口”二字。这里有三种不同的理解。</p><p>如果把“接口”理解为一组接口集合，可以是某个微服务的接口，也可以是某个类库的接口等。如果部分接口只被部分调用者使用，我们就需要将这部分接口隔离出来，单独给这部分调用者使用，而不强迫其他调用者也依赖这部分不会被用到的接口。</p><p>如果把“接口”理解为单个API接口或函数，部分调用者只需要函数中的部分功能，那我们就需要把函数拆分成粒度更细的多个函数，让调用者只依赖它需要的那个细粒度函数。</p><p>如果把“接口”理解为OOP中的接口，也可以理解为面向对象编程语言中的接口语法。那接口的设计要尽量单一，不要让接口的实现类和调用者，依赖不需要的接口函数。</p><p>单一职责原则针对的是模块、类、接口的设计。接口隔离原则相对于单一职责原则，一方面更侧重于接口的设计，另一方面它的思考的角度也是不同的。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。</p><h3>5.SOLID原则：DIP依赖倒置原则</h3><p><strong>控制反转：</strong>实际上，控制反转是一个比较笼统的设计思想，并不是一种具体的实现方法，一般用来指导框架层面的设计。这里所说的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p><p><strong>依赖注入：</strong>依赖注入和控制反转恰恰相反，它是一种具体的编码技巧。我们不通过new的方式在类内部创建依赖类的对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或“注入”）给类来使用。</p><p><strong>依赖注入框架：</strong>我们通过依赖注入框架提供的扩展点，简单配置一下所有需要的类及其类与类之间的依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。</p><p><strong>依赖反转原则：</strong>依赖反转原则也叫作依赖倒置原则。这条原则跟控制反转有点类似，主要用来指导框架层面的设计。高层模块不依赖低层模块，它们共同依赖同一个抽象。抽象不需要依赖具体实现细节，具体实现细节依赖抽象。</p><h3>6.KISS、YAGNI原则</h3><p>KISS原则的中文描述是：尽量保持简单。KISS原则是保持代码可读和可维护的重要手段。KISS原则中的“简单“”并不是以代码行数来考量的。代码行数越少并不代表代码越简单，我们还要考虑逻辑复杂度、实现难度、代码的可读性等。而且，本身就复杂的问题，用复杂的方法解决，也并不违背KISS原则。除此之外，同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。</p><p>对于如何写出满足KISS原则的代码，我总结了下面几条指导原则：</p><ul>\n<li>不要使用同事可能不懂的技术来实现代码；</li>\n<li>不要重复造轮子，善于使用已经有的工具类库；</li>\n<li>不要过度优化。</li>\n</ul><p>YAGNI原则的英文全称是：You Ain’t Gonna Need It。直译就是：你不会需要它。这条原则也算是万金油了。当用在软件开发中的时候，它的意思是：不要去设计当前用不到的功能；不要去编写当前用不到的代码。实际上，这条原则的核心思想就是：不要做过度设计。</p><p>YAGNI原则跟KISS原则并非一回事儿。KISS原则讲的是“如何做”的问题（尽量保持简单），而YAGNI原则说的是“要不要做”的问题（当前不需要的就不要做）。</p><h3>7.DRY原则</h3><p>DRY原则中文描述是：不要重复自己，将它应用在编程中，可以理解为：不要写重复的代码。</p><p>专栏中讲到了三种代码重复的情况：实现逻辑重复、功能语义重复、代码执行重复。实现逻辑重复，但功能语义不重复的代码，并不违反DRY原则。实现逻辑不重复，但功能语义重复的代码，也算是违反DRY原则。而代码执行重复也算是违反DRY原则。</p><p>除此之外，我们还讲到了提高代码复用性的一些手段，包括：减少代码耦合、满足单一职责原则、模块化、业务与非业务逻辑分离、通用代码下沉、继承、多态、抽象、封装、应用模板等设计模式。复用意识也非常重要。在设计每个模块、类、函数的时候，要像设计一个外部API一样去思考它的复用性。</p><p>我们在第一次写代码的时候，如果当下没有复用的需求，而未来的复用需求也不是特别明确，并且开发可复用代码的成本比较高，那我们就不需要考虑代码的复用性。在之后开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。</p><p>相比于代码的可复用性，DRY原则适用性更强些。我们可以不写可复用的代码，但一定不能写重复的代码。</p><h3>8.LOD原则</h3><p><strong>如何理解“高内聚、松耦合”？</strong></p><p>“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。“高内聚”用来指导类本身的设计，“松耦合”用来指导类与类之间依赖关系的设计。所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一类中。相近的功能往往会被同时修改，放到同一个类中，修改会比较集中。所谓“松耦合”指的是，在代码中，类与类之间的依赖关系简单清晰。即使两个类有依赖关系，一个类的代码改动也不会或者很少导致依赖类的代码改动。</p><p><strong>如何理解“迪米特法则”？</strong></p><p>迪米特法则的描述为：不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。迪米特法则是希望减少类之间的耦合，让类越独立越好。每个类都应该少了解系统的其他部分。一旦发生变化，需要了解这一变化的类就会比较少。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/9f/fbf1ae0ce08d4ea890b80944c2b8309f.jpg?wh=2741*4067\" alt=\"\"></p><h2>四、规范与重构</h2><h3>1.重构概述</h3><p><strong>重构的目的：为什么重构（why）？</strong></p><p>对于项目来言，重构可以保持代码质量持续处于一个可控状态，不至于腐化到无可救药的地步。对于个人而言，重构非常锻炼一个人的代码能力，并且是一件非常有成就感的事情。它是我们学习的经典设计思想、原则、模式、编程规范等理论知识的练兵场。</p><p><strong>重构的对象：重构什么（what）？</strong></p><p>按照重构的规模，我们可以将重构大致分为大规模高层次的重构和小规模低层次的重构。大规模高层次重构包括对代码分层、模块化、解耦、梳理类之间的交互关系、抽象复用组件等等。这部分工作利用的更多的是比较抽象、比较顶层的设计思想、原则、模式。小规模低层次的重构包括规范命名、注释、修正函数参数过多、消除超大类、提取重复代码等编程细节问题，主要是针对类、函数级别的重构。小规模低层次的重构更多的是利用编码规范这一理论知识。</p><p><strong>重构的时机：什么时候重构（when）？</strong></p><p>我反复强调，我们一定要建立持续重构意识，把重构作为开发必不可少的部分融入到开发中，而不是等到代码出现很大问题的时候，再大刀阔斧地重构。</p><p><strong>重构的方法：如何重构（how）？</strong></p><p>大规模高层次的重构难度比较大，需要有组织、有计划地进行，分阶段地小步快跑，时刻保持代码处于一个可运行的状态。而小规模低层次的重构，因为影响范围小，改动耗时短，所以，只要你愿意并且有时间，随时随地都可以去做。</p><h3>2.单元测试</h3><p><strong>什么是单元测试？</strong></p><p>单元测试是代码层面的测试，用于测试“自己”编写的代码的逻辑正确性。单元测试顾名思义是测试一个“单元”，这个“单元”一般是类或函数，而不是模块或者系统。</p><p><strong>为什么要写单元测试？</strong></p><p>单元测试能有效地发现代码中的Bug、代码设计上的问题。写单元测试的过程本身就是代码重构的过程。单元测试是对集成测试的有力补充，能帮助我们快速熟悉代码，是TDD可落地执行的折中方案。</p><p><strong>如何编写单元测试？</strong></p><p>写单元测试就是针对代码设计覆盖各种输入、异常、边界条件的测试用例，并将其翻译成代码的过程。我们可以利用一些测试框架来简化测试代码的编写。对于单元测试，我们需要建立以下正确的认知：</p><ul>\n<li>编写单元测试尽管繁琐，但并不是太耗时；</li>\n<li>我们可以稍微放低单元测试的质量要求；</li>\n<li>覆盖率作为衡量单元测试好坏的唯一标准是不合理的；</li>\n<li>写单元测试一般不需要了解代码的实现逻辑；</li>\n<li>单元测试框架无法测试多半是代码的可测试性不好。</li>\n</ul><p><strong>单元测试为何难落地执行？</strong></p><p>一方面，写单元测试本身比较繁琐，技术挑战不大，很多程序员不愿意去写。另一方面，国内研发比较偏向“快糙猛”，容易因为开发进度紧，导致单元测试的执行虎头蛇尾，最后，没有建立对单元测试的正确认识，觉得可有可无，单靠督促很难执行得很好。</p><h3>3.代码的可测试性</h3><p><strong>什么是代码的可测试性？</strong></p><p>粗略地讲，所谓代码的可测试性，就是针对代码编写单元测试的难易程度。对于一段代码，如果很难为其编写单元测试，或者单元测试写起来很费劲，需要依靠单元测试框架很高级的特性，那往往就意味着代码设计得不够合理，代码的可测试性不好。</p><p><strong>编写可测试性代码的最有效手段</strong></p><p>依赖注入是编写可测试性代码的最有效手段。通过依赖注入，我们在编写单元测试代码的时候，可以通过mock的方法将不可控的依赖变得可控，这也是我们在编写单元测试的过程中最有技术挑战的地方。除了mock方式，我们还可以利用二次封装来解决某些代码行为不可控的情况。</p><p><strong>常见的Anti-Patterns</strong></p><p>典型的、常见的测试不友好的代码有下面这5种：</p><ul>\n<li>代码中包含未决行为逻辑；</li>\n<li>滥用可变全局变量；</li>\n<li>滥用静态方法；</li>\n<li>使用复杂的继承关系；</li>\n<li>高度耦合的代码。</li>\n</ul><h3>4.大型重构：解耦</h3><p><strong>“解耦”为何如此重要？</strong></p><p>过于复杂的代码往往在可读性、可维护性上都不友好。解耦，保证代码松耦合、高内聚，是控制代码复杂度的有效手段。如果代码高内聚、松耦合，也就是意味着，代码结构清晰、分层、模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。</p><p><strong>代码是否需要“解耦”？</strong></p><p>间接的衡量标准有很多，比如：改动一个模块或类的代码受影响的模块或类是否有很多、改动一个模块或者类的代码依赖的模块或者类是否需要改动、代码的可测试性是否好等等。直接的衡量标准是把模块与模块之间及其类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。</p><p><strong>如何给代码“解耦”？</strong></p><p>给代码解耦的方法有：封装与抽象、中间层、模块化，以及一些其他的设计思想与原则，比如：单一职责原则、基于接口而非实现编程、依赖注入、多用组合少用继承、迪米特法则。当然，还有一些设计模式，比如观察者模式。</p><h3>5.小型重构：编码规范</h3><p>前面我们讲了很多设计原则，后面还会讲到很多设计模式，利用好它们都可以有效地改善代码的质量。但是，这些知识的合理应用非常依赖个人经验，有时候用不好会适得其反。但是编码规范正好相反，大部分都简单明了，在代码的细节方面，能立竿见影地改善质量。除此之外，我们前面也讲到，持续低层次小规模重构依赖的基本上都是这些编码规范，也是改善代码可读性的有效手段。</p><p>根据我自己的开发经验，我总结罗列了20条我认为最应该关注、最好用的编码规范，分为三个大的方面：命名与注释（Naming and Comments）、代码风格（Code Style）、编程技巧（Coding Tips）。</p><p><strong>命名与注释</strong></p><ul>\n<li>命名的关键是能准确的达意。对于不同作用域的命名，我们可以适当的选择不同的长度，作用域小的命名，比如临时变量等，可以适当的选择短一些的命名方式。除此之外，命名中个也可以使用一些耳熟能详的缩写。</li>\n<li>我们借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。</li>\n<li>命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，也不要用些反直觉的命名。</li>\n<li>接口有两种命名方式。一种是在接口中带前缀\"I\"，另一种是在接口的实现类中带后缀“Impl”。两种命名方式都可以，关键是要在项目中统一。对于抽象类的命名，我们更倾向于带有前缀“Abstract”。</li>\n<li>注释的目的就是让代码更容易看懂，只要符合这个要求，你就可以写。总结一下的话，注释主要包含这样三个方面的内容：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。</li>\n<li>注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写的尽可能全面详细些，而函数内部的注释会相对少一些，一般都是靠好的命名和提炼函数、解释性变量、总结性注释来做到代码易读。</li>\n</ul><p><strong>代码风格</strong></p><p>代码风格都没有对错和优劣之分，不同的编程语言风格都不太一样，只要能在团队、项目中统一即可，不过，最好能跟业内推荐的风格、开源项目的代码风格相一致。所以，这里就不展开罗列了，你可以对照着自己熟悉的编程语言的代码风格，自己复习一下。</p><p><strong>编程技巧</strong></p><ul>\n<li>将复杂的逻辑提炼拆分成函数和类；</li>\n<li>通过拆分成多个函数的方式来处理参数过多的情况；</li>\n<li>通过将参数封装为对象来处理参数过多的情况；</li>\n<li>函数中不要使用参数来做代码执行逻辑的控制；</li>\n<li>移除过深的嵌套层次，方法包括：去掉多余的if或else语句，使用continue、break、return关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数；</li>\n<li>用字面常量取代魔法数；</li>\n<li>利用解释性变量来解释复杂表达式。</li>\n</ul><p><strong>统一编码规范</strong></p><p>除了细节的知识点之外，最后，还有一条非常重要的，那就是，项目、团队，甚至公司，一定要制定统一的编码规范，并且通过Code Review督促执行，这对提高代码质量有立竿见影的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/8a/fc56f7c2b348d324c93a09dd0dee538a.jpg?wh=2661*4764\" alt=\"\"></p><h2>课堂讨论</h2><p>不知不觉我们已经学了这么多内容，在复习完这部分内容之后，你可以在留言区说一说你的掌握程度，看自己符合我开篇中讲到的哪个层次。</p><p>如果有帮助，欢迎你收藏这篇文章，并且把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":174524,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1580266429,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"418192094141","product_id":100039001,"comment_content":"这篇看起来反而是最轻松的。<br>一直有每篇都用xmind做笔记的习惯，自问自答，wwh。<br>会结合工作中的代码去思考内容，审视代码，也在code review中和同事结合团队现状制定可行的checklist和编码规范<br>受益良多，也更期待后续","like_count":98,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474021,"discussion_content":"有的 看专栏目录就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573442285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183538,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1583061368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"315115673976","product_id":100039001,"comment_content":"终于坚持 原则和思想 这一模块了。<br>自己在毕业一年后就在公司开展了《设计模式和重构》的分享课，能够入选的原因是自己在小步快跑地重构了一个老旧项目的核心逻辑代码，为项目偿还了一部分技术债务。当初受启发最大的是 《重构》 这一本书，现在自己从维护旧项目到开发新项目，设计模式对自己来说就更加重要了。<br><br>在阅读这三十余篇的文章后，多次因为自己编写代码违反了文章中提及的原则感到愧疚。自己负责的新项目曾经一段时间陷入了代码质量问题和可维护的问题，自己编写的框架很多坑，同事在框架中开发也没说踩。真希望自己可以提前一年阅读到这个专栏，必定可以让我省下现在很多的烦恼。<br><br>我是为了提高项目 code review 的质量订阅专栏的，也通过专栏的原则发现了项目中大量不及格的设计，在和同事讨论的过程中有了原则和思想的指导，很快地就能达成小模块重构的方案。期待后面的具体的设计模式部分文章，相信一定会给我带来更多重构代码的思路。<br><br>受专栏设计思想和原则的启发（特别是贫血模型和充血模型部分的启发），我准备对项目公共模块进行一系列重构，编写测试用例，重新让项目回归到可维护甚至易维护的状态。<br><br>感谢老师的专栏文章！<br><br>","like_count":74},{"had_liked":false,"id":237971,"user_name":"sun","can_delete":false,"product_type":"c1","uid":1076100,"ip_address":"","ucode":"0358B9288D4018","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/84/d1e6eac9.jpg","comment_is_top":false,"comment_ctime":1596016689,"is_pvip":false,"replies":[{"id":"88019","content":"我扶你起来吧","user_name":"作者回复","comment_id":237971,"uid":"1190123","ip_address":"","utype":1,"ctime":1596108857,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"121855100977","product_id":100039001,"comment_content":"总结的太好了  我是跪着读完这篇的","like_count":29,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474010,"discussion_content":"接口也算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573435741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174652,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580308808,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"87479654728","product_id":100039001,"comment_content":"1. 学完了还是得用：自己业余时间写了一个小项目，然后尝试丰富功能，重构它。目前完成了最基本的功能，代码写的只能算是能用。基本每天都在使用这个小工具。下步打算利用课程中的知识来“盘他”！<br>2. 自己个人代码中加入了 FindBugs 和 Google code style。<br>3. Leetcode练习时注意逐步优化，想想也算是重构吧，不用ide写代码，注意编码规范。<br>4. 一个方法不要超过20行。<br>5. 注意代码的可测性，之前没有注意过这方面。重构前要先写测试。<br>6. 读完了一本《大话设计模式》，正在看《重构2》。<br>期待争哥下部分的课程！","like_count":21,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539731,"discussion_content":"方法的代码行数不超过20行就有点过分了吧。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639819107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564544,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/80/5069bb27.jpg","nickname":"杨通","note":"","ucode":"C037B82EE04DBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316139,"discussion_content":"不用ide写代码是为啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603365408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167434,"discussion_content":"我总结就是一句话：有则改之无则加勉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581494223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175752,"user_name":"Rayjun","can_delete":false,"product_type":"c1","uid":1002514,"ip_address":"","ucode":"61A3D1A3D03569","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/12/f0c145d4.jpg","comment_is_top":false,"comment_ctime":1580818462,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57415393310","product_id":100039001,"comment_content":"太厉害了，能把这么复杂的体系用这么简练的文字表达清楚，值得反复读。","like_count":13},{"had_liked":false,"id":246346,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1599290376,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35959028744","product_id":100039001,"comment_content":"王工确实总结的很好，但是目前国内对代码质量的重视氛围非常差，领导（包括高层领导）只要进度，堆砌业务，本人所在面领从单体服务到微服务的拆解阶段，本身之前单体服务已经非常混乱了，业务还一直向上面堆砌业务，bug多，工期还要求的很短，各种出问题，沙丘上建楼，而且据我观察国内这个行业大部分公司都是这个样子，包括所谓的一些大公司。真所谓代码写的再好，也要遇到像shit一样的项目代码需要你去面对在上面还要做新的业务，真的是很难，有没兄弟有同感的？","like_count":8,"discussions":[{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558520,"discussion_content":"有同感，我的领导从来没在代码设计上面有什么追求，更多是功能上是不是能满足业务要求，技术要求（平台、监控、配置），具体代码是咋样，都是你爱咋玩咋玩。有时候也挺纠结的，废力做了一些重构，除了和你一起的开发同事，别人，无论是领导还是别的团队是不能从中得到一点利益的，领导要是不支持你，那纯粹就成了工作不饱和在瞎折腾了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648366269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177630,"user_name":"will","can_delete":false,"product_type":"c1","uid":1156207,"ip_address":"","ucode":"7A7DBE3E0EEAEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/6f/672a27d4.jpg","comment_is_top":false,"comment_ctime":1581437795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35941176163","product_id":100039001,"comment_content":"这一篇总结了之前所有的知识点，只能说自己真的太菜了，看完又忘记大部分了，看来真的得沉下心来好好学习学习","like_count":8},{"had_liked":false,"id":230389,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1593359162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31658130234","product_id":100039001,"comment_content":"【设计模式笔记39】20200628<br>一、如何评判代码质量高低<br>评判标准有三个：可维护性、可读性、可扩展性，通过面向对象设计思想、设计原则、编码规范和重构技巧写出高质量代码<br><br>二、面向对象思想<br>四大特性：封装、继承、抽象、多态<br>封装的意义在于保护数据不被随意修改，提高代码可维护性；仅暴露有限接口，提高代码易用性<br>继承的意义在于解决代码复用问题<br>多态的意义在于让子类替换父类，可以灵活替换实现，提高代码的扩展性和复用性<br>抽象的意义在于修改实现不需要修改定义，同时也是复杂系统开发的有效手段<br><br>面向对象开发流程<br>面向对象分析（OOA）：搞清楚做什么，产出是详细的需求描述，怎么才算详细，我觉得至少应该包括以下几方面：背景、解决什么问题、怎么解决、涉及哪些模块以及这些模块分别要改什么<br>面向对象设计（OOD）：搞清楚怎么做，产出是类、类关系<br>面向对象编程（OOP）：将分析和设计的结果翻译为代码的过程，几个要点：接口和抽象类的使用、基于抽象而非实现编程、为什么不推荐使用继承，组合的好处是什么？贫血模型和充血模型的使用<br><br>三、设计原则<br>单一职责：怎么判断？函数或属性过多、依赖的类过多<br>开闭原则：我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上<br>里氏替换原则：用于知道子类如何设计，核心在于“design by contract”，父类定义了函数的约定，子类可以改变函数的内部逻辑，但是不能改变函数的“约定”：对输入、输出、抛出异常的约定。注意和多态的区别<br>接口隔离原则：客户端不应该墙皮依赖它不需要的接口。和单一职责原则的区别，后者针对的是模块、类和接口，前者侧重于接口的设计，并且告诉我们如何判断接口是否单一<br>依赖注入原则：将依赖的对象通过构造函数等方式传递给类使用。控制反转是指将程序的控制权交给框架，反转的控制权。扩展点包括：依赖抽象不依赖细节、高层模块依赖底层模块<br>KISS原则：尽量保持简单。要点有三：不要重复造轮子、不要过度优化、不要使用别人不懂的技术实现代码（如何做）<br>YAGNI原则：你不会需要它。核心是不要过度设计（要不要做）<br>DRY原则：不要重复你自己。包括实现逻辑重复、功能语义重复、代码执行重复。怎么解决？减少代码耦合、满足单一职责原则、模块化、业务与非业务逻辑分离、通用代码下沉、继承、多态、抽象、封装、应用模板等设计模式。复用意识也非常重要。在设计每个模块、类、函数的时候，要像设计一个外部 API 一样去思考它的复用性。<br>LOD原则：什么是高内聚？用于知道类的设计，相近功能的代码放在一个类中。什么是松耦合？知道类与类之间的关系，一个类的改动不会或者很少导致被依赖类的改动<br><br>四、编码规范<br>1、命名与注释：命名要准确达意、命名要可读可搜索；代码注释要包括做什么、为什么、怎么做、如何用<br>2、编程技巧：将复杂的函数拆分为类和函数、拆分函数来处理函数参数过多的场景、参数化对象、函数不要使用参数做逻辑控制、移除过深的函数嵌套、用字面量取代魔数、用解释性变量命名复杂表达式<br>","like_count":7},{"had_liked":false,"id":257562,"user_name":"蔡晓亮","can_delete":false,"product_type":"c1","uid":1501018,"ip_address":"","ucode":"48C043DE389595","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/5a/9578215e.jpg","comment_is_top":false,"comment_ctime":1604028060,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27373831836","product_id":100039001,"comment_content":"这个专栏讲的非常棒，是我看过最实在，接地气容易落地的设计模式。但是没有工作经验的同学或者工作不久，项目经验不多的同学就不容易产生共鸣。容易品尝不到其中的精髓，建议做几个项目了，看看开源项目代码了，再时不时来回看一下，你就知道其中的滋味了。","like_count":7,"discussions":[{"author":{"id":2430177,"avatar":"","nickname":"Geek_c08f40","note":"","ucode":"029C7D598FAE8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368373,"discussion_content":"现在都还不知道面向对象的代码是怎样写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618671372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266987,"avatar":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","nickname":"超超超超超帅耶🌴","note":"","ucode":"931E23DC0ACB04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352794,"discussion_content":"是的，刚工作的时候对于面向对象的特点还有依赖倒置这些只知其然不知其所以然，现在工作几年回头再看就很容易理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614851813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342226,"discussion_content":"实话","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610619346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174490,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580229594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350033370","product_id":100039001,"comment_content":"打卡，我是理解记忆，老师的原话我肯定记不住，我在老师理解的基础上有自己的理解！","like_count":6},{"had_liked":false,"id":250150,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1600952346,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14485854234","product_id":100039001,"comment_content":"我们公司比较重视业务，对技术要求不高，大领导总觉得随便找几个技术人员就能做。业务量庞大，不断堆砌业务代码，每次都是倒排工期，计划制定不合理，时间紧，任务重，排期每次都后延。通常一个功能从头到尾并不是一个人负责，因为是最初的负责人可能被抽调忙别的业务去了，不得不换个人在上面改bug或添加新的需求，最终能有四五个人参与修改，每个人用自己的风格添加代码，最后问起来这个功能到底是做什么的谁也说不清，只能自己忍着看代码了解。尽管如此但表面上做出来大屏或PC界面看着不错，政府为了完成任务又有采购需求就会去买，用不用再说。这就是国内大多数传统软件行业的现状，所以如果想让自己的技术有更高一层次的发展还是去互联网大厂，产品直接面向用户，用户数量及口碑直接反应产品好坏，为了做出更好的产品就会对技术有更高的要求，也就能给自己带来更高的挑战，倒逼自己去提高技术。","like_count":3},{"had_liked":false,"id":256802,"user_name":"erDuo","can_delete":false,"product_type":"c1","uid":1016135,"ip_address":"","ucode":"691E716E6D0E39","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/47/e5b206d9.jpg","comment_is_top":false,"comment_ctime":1603757040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193691632","product_id":100039001,"comment_content":"真不错，需要定期回顾，重构要伴随整个职业生涯","like_count":2},{"had_liked":false,"id":245681,"user_name":"小情绪","can_delete":false,"product_type":"c1","uid":1020311,"ip_address":"","ucode":"92D8081DB8DB45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","comment_is_top":false,"comment_ctime":1599026313,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10188960905","product_id":100039001,"comment_content":"争哥，请教一个问题，虽非本章内容，但也是代码层面的，还望不吝赐教：<br>public class LinkedList&lt;E&gt; extends ... implements...{<br>  private static class Node&lt;E&gt;{<br>    E item;<br>  }<br>  Node first;<br><br>  public E peek(){<br>   final Node&lt;E&gt; f = first;<br>   return (f == null) ? null : f.item<br>  }<br>}<br><br>上面的peek方法为啥不写成如下：<br>  public E peek(){<br>   return (first == null) ? null : first.item<br>  }<br>为啥非得用一个局部变量来接收，并且要用fianl修饰？","like_count":2,"discussions":[{"author":{"id":1059944,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","nickname":"天敌","note":"","ucode":"CD29A622197197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309823,"discussion_content":"小白猜测是保证线程安全，可能执行完first==null,链表就被清空了,然后就会抛出NPE。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601453577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243460,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1598140065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188074657","product_id":100039001,"comment_content":"这篇文章非常重要","like_count":2},{"had_liked":false,"id":239662,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1596609825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186544417","product_id":100039001,"comment_content":"我感觉一定要有自己理解 可以是在争哥理解的基础上 有自己理解  不能一味的是 争哥说什么就是什么  不然自己能力不会有很大提升","like_count":2},{"had_liked":false,"id":232129,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1593863659,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"10183798251","product_id":100039001,"comment_content":"学习了很多，感觉也忘了很多。有必要对前面的所有知识点在重新复习一遍了。 ","like_count":2},{"had_liked":false,"id":215452,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1588994333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178928925","product_id":100039001,"comment_content":"都快讲完了我才看到这 惭愧啊 <br>前面的设计思想和实现方式 用到了最近的需求代码中 感觉收获很大","like_count":2},{"had_liked":false,"id":272650,"user_name":"香","can_delete":false,"product_type":"c1","uid":1220273,"ip_address":"","ucode":"121D6CECECEEC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","comment_is_top":false,"comment_ctime":1610186377,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5905153673","product_id":100039001,"comment_content":"争哥简直是业界良心！不知道争哥后续是否会出类似于操作系统和编译原理这样的课程，如果有的话，非常期待！","like_count":1,"discussions":[{"author":{"id":1877862,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","nickname":"纵不朽","note":"","ucode":"DB2CA2C46B2EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357515,"discussion_content":"是的，特别是面对非科班的，最好整一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615816149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207025,"user_name":"賢","can_delete":false,"product_type":"c1","uid":1286884,"ip_address":"","ucode":"D837D27DFB4E2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/e4/47fd0f81.jpg","comment_is_top":false,"comment_ctime":1586998086,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5881965382","product_id":100039001,"comment_content":"为什么说私有方法过多不符合单一职责原则？如果类内部的职责逻辑处理过程复杂一些，拆分出了一些内部方法，不用暴露的所以封装为私有方法，这种不算不符合吧？","like_count":1,"discussions":[{"author":{"id":2920655,"avatar":"","nickname":"Geek_69090b","note":"","ucode":"758C05A4865E4F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553345,"discussion_content":"拆分的原因就是太复杂，太复杂就有功能不单一的风险","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645857477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176481,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581068602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876035898","product_id":100039001,"comment_content":"设计模式_38:<br>虽然每篇文章看几遍，但总体来说算是第一遍的学习，这一遍最重要，每一个细节都不放过，后面还需要多次的复习和实践，直到它们变成大脑皮层中物理性的神经回路。<br><br>另外，我个人热爱且敬佩认真做事的人，共勉之！","like_count":1},{"had_liked":false,"id":175882,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1580877821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875845117","product_id":100039001,"comment_content":"总结了前面所有的章节，可以座位自己的技能树，谢谢","like_count":1},{"had_liked":false,"id":174637,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580305126,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875272422","product_id":100039001,"comment_content":"想了几次，抽象并不是面向对象设计独有的特性，而是一个最基本的应对软件复杂性的思路，大型软件如果想活得好，抽象思维一定少不了。<br><br>之前教科书中都说面向对象是三大特性：封装、继承、多态，这里不知道老师是怎么看的","like_count":1},{"had_liked":false,"id":174489,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1580228741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875196037","product_id":100039001,"comment_content":"今天大年初五，抢占沙发！","like_count":1},{"had_liked":false,"id":349960,"user_name":"Geek_08a0f7","can_delete":false,"product_type":"c1","uid":3015503,"ip_address":"","ucode":"C2D78F6B714B88","user_header":"","comment_is_top":false,"comment_ctime":1656471887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656471887","product_id":100039001,"comment_content":"满满的干货，这得整2-3便才能完全吸收啊！<br>","like_count":0},{"had_liked":false,"id":347664,"user_name":"小杰同学","can_delete":false,"product_type":"c1","uid":2853072,"ip_address":"","ucode":"C6FC59D58F772C","user_header":"","comment_is_top":false,"comment_ctime":1654267361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654267361","product_id":100039001,"comment_content":"我自以为学会了  看了下这篇 才觉得学的如镜中水月 都忘记了","like_count":0},{"had_liked":false,"id":343032,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1145759,"ip_address":"","ucode":"D8A22815D8987C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/9f/da374651.jpg","comment_is_top":false,"comment_ctime":1650603295,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1650603295","product_id":100039001,"comment_content":"最近在设计开发一个公共框架，就用到了本专栏的设计原则，设计思想，设计模式，编码规范，可测试性等内容，感觉代码清爽了很多。","like_count":0},{"had_liked":false,"id":342329,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650197250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650197250","product_id":100039001,"comment_content":"我个人总结的高质量代码解决方案：<br>首先我们接到了产品需求，我们需要对需求进行评审和理解，将现实中的产品需求进行分析并转化为代码开发中的流程和对象(详细的需求描述)，这个过程就是面向对象分析(OOA)；然后我们将这些产品需求中的对象和流程，遵循一定的设计原则进行拆分、组合、抽象得出合适的类以及对应的属性和方法，这个过程就是面向对象设计(OOD)。最后我们再利用一些成熟的设计模式(如果需要的话)来辅助我们的代码开发，将设计过程中的类、类与类之间的交互、类的属性和方法输出成代码，这个过程就是面向对象编程(OOP)。<br><br>你觉得编程完之后就没事了吗？其实不是这样的，为了保证高质量的代码开发。我们在编程完之后还有一系列的后续工作，简称”编后服务“<br><br>开发完代码之后，我们首先通过代码质量检查点对代码进行审查。审查完之后的代码，我们会发现一些存在的问题。然后我们对代码进行重构和优化，最后对重构优化、审查过程中发现的问题进行反思和总结得到了编程的规范和经验。这些规范和经验将指导我们运用在未来的代码开发过程中，往复循环，迭代提升。最终产出我们的目标：高质量代码","like_count":0},{"had_liked":false,"id":328719,"user_name":"ddh","can_delete":false,"product_type":"c1","uid":2806043,"ip_address":"","ucode":"8E852375365F16","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","comment_is_top":false,"comment_ctime":1640852430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640852430","product_id":100039001,"comment_content":"贴合java语言的设计模式， 一些规则一些语言没有那种特性","like_count":0},{"had_liked":false,"id":324781,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1638618230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638618230","product_id":100039001,"comment_content":"感觉这一篇就是独孤九剑的总诀式👏👏👏优秀","like_count":0},{"had_liked":false,"id":316056,"user_name":"慕言","can_delete":false,"product_type":"c1","uid":2731028,"ip_address":"","ucode":"4918FA682F3895","user_header":"https://static001.geekbang.org/account/avatar/00/29/ac/14/a8ff8fec.jpg","comment_is_top":false,"comment_ctime":1634117364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634117364","product_id":100039001,"comment_content":"我自己的总结笔记：<br>一、如何评判代码质量<br>评判标准：可维护性、扩扩展性、可读性、简洁性、可测试性、灵活性、可复用性<br><br>二、面向对象<br>四大特性：继承、封装、抽象、多态<br>继承的意义：表示的是is-a的关系，为了解决代码复用的问题<br>封装的意义：保护数据不被随意修改，提高代码的可维护性，仅暴露有限的必要接口，提高类的易用性<br>抽象的意义：修改实现不需要改变定义，处理复杂系统的有效手段，过滤有必要关注的信息<br>多态的意义：子类替代父类，提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。<br><br>面向对象开发流程：<br>面向对象分析：搞清楚做什么，产出的是详细的需求描述<br>面向对象设计：搞清楚怎么做，将需求描述转化为具体的类，产出的是类<br>面向对象编程：将分析和设计的结果翻译成代码<br><br>面向对象VS面向过程<br><br>类与类的六种关系：<br>依赖、关联、聚合、组合、实现、泛化<br><br>接口VS抽象类：<br>区别：抽象类只能单继承、抽象类不能被实例化、接口不能包含成员属性、JDK1.8之后，接口可以有方法的默认实现<br>接口意义：表示的是has-a的关系，是为了解决抽象而非代码复用问题<br>抽象类意义：表示的是is-a的关系，是为了解决代码复用的问题<br><br>基于接口而非实现编程<br>将接口和实现分离，封装不稳定的实现，暴露稳定的接口<br><br>多用组合少用继承<br>继承的层次比较多时，维护难度大<br>组合能解决层次过深，过复杂的继承关系影响代码可维护性的问题<br><br>三、设计原则<br>SOLID原则：SRP 单一职责原则<br>一个类只负责完成一个职责或者功能<br>实现代码的高内聚低耦合<br>不符合的情况：类代码行数过多，类依赖其他类过多或者依赖类的其他类过多，私有方法过多，比较难给类起一个合适的名字。类中大量的方法都是集中操作某个几个属性<br><br>SOLID原则：OCP开闭原则<br>对扩展开发，对修改关闭<br>以最小修改代码的代价来完成新功能开发<br>实现方法：多态、依赖注入、基于接口而非实现编程、大部分设计模式<br><br>SOLID原则：LSP里式替换原则<br>子类可以替换父类出现的任何地方，保证程序逻辑不变<br>子类可以重写函数的具体实现，但不能改变函数的约定<br>注意与多态的区别，里式替换原则是指导继承关系中子类如何设计，多态是面向对象编程的一种语法，是一种代码实现思路<br><br>SOLID原则：ISP接口隔离原则<br>不能强制客户端依赖它所不需要依赖的接口<br>与单一职责原则的区别<br>单一职责原则针对的是模块、类、接口的设计<br>接口隔离原则提供通估计调用者如何使用接口来间接判定接口职责是否单一<br><br>SOLID原则：DIP依赖倒置原则<br>依赖注入：通过构造方法传参的方式把被依赖的对象在外部创建好之后传给依赖对象，依赖注入是提高代码可测试性的有效手段<br>控制反转：程序执行流程的控制权反转给框架<br>依赖反转：也叫依赖倒置原则，主要用来指导框架层面的设计<br><br>KISS原则<br>尽量保持简单，（怎么做）<br>保持代码可读、可维护的重要手段<br>实现：不要用同事可能不懂的技术、不要重复造轮子、不要过度设计<br><br>YAGNI原则<br>你不会用到它，核心思想是不要过度设计（要不要做）<br>不要去设计当前用不到的功能，不要去编写当前用不到的代码<br><br>DRY原则<br>不要重复自己，实现逻辑重复、功能语义重复、代码执行重复<br>有可能代码相似度很高，但语义不重复，也不违反DRY原则<br>有可能代码不重复，但语义重复，也违反DRY原则<br><br><br>LOD原则<br>高内聚低耦合<br>高内聚：指导类本身的设计，相近的功能应该放在同一个类中，不相近的功能不要放在同一个类中<br>松耦合：指导类与类之间依赖关系的设计，一个类的代码改动，不会或者很少导致依赖类代码的改动<br><br>迪米特法则<br>不该有直接依赖关系的类之间不要有依赖，有依赖关系的类之间只依赖必要的接口不依赖具体实现<br>减少类之间的耦合，让类越独立越好<br><br>四、规范和重构<br>为什么重构Why<br>重构是保持代码质量持续处于可控状态的有效手段<br><br>重构什么what<br>大规模重构，是使用设计原则、设计思想和设计模式，对分层结构、模块划分、解耦、梳理类之间的交互关系、抽象复用组件等<br>小规模重构，主要是应用编码规范对类、函数进行重构，规范命名、注释、修正函数参数过多，消除超大类、提取重复代码等<br><br>什么时候重构when<br>持续重构<br><br>怎么重构how<br>大规模重构，影响范围大，需要有组织有计划的进行，分阶段完成<br>小规模重构，影响范围小，在日常的迭代中持续进行","like_count":0},{"had_liked":false,"id":309250,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1630021885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630021885","product_id":100039001,"comment_content":"总结的特别好就是。梳理了下，还记得百分五十左右，其他细节还是没掌握牢靠。","like_count":0},{"had_liked":false,"id":308218,"user_name":"一叉树","can_delete":false,"product_type":"c1","uid":1623117,"ip_address":"","ucode":"BFC984403ACD1F","user_header":"https://static001.geekbang.org/account/avatar/00/18/c4/4d/85014aab.jpg","comment_is_top":false,"comment_ctime":1629454643,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629454643","product_id":100039001,"comment_content":"如果没有学过前面的课程，直接看这篇，感觉说的都是空洞无物流水账的废话。踏实跟着课程一节节学到这一课，看到这篇总结，简直感动到要跪下来了。<br><br>本篇真的是精华篇。<br><br>每一个原则、每一个规范，背后都有实际的考量，都经过时间的检验，都值得深刻理解和实际应用。","like_count":0},{"had_liked":false,"id":306905,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628769908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628769908","product_id":100039001,"comment_content":"刚开始懵懵懂懂，只是有一些印象，但是很多没有实践过，个人理解不深","like_count":0},{"had_liked":false,"id":302510,"user_name":"Jiantao","can_delete":false,"product_type":"c1","uid":1163504,"ip_address":"","ucode":"444580EC5EF109","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/f0/1aabc056.jpg","comment_is_top":false,"comment_ctime":1626245415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626245415","product_id":100039001,"comment_content":"学到很多，看到栏主的总结往往能产生共鸣和发现自己代码中的设计缺陷。","like_count":0},{"had_liked":false,"id":300508,"user_name":"砥砺奋进","can_delete":false,"product_type":"c1","uid":1608643,"ip_address":"","ucode":"2F12FD10F749AD","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/c3/bf036d99.jpg","comment_is_top":false,"comment_ctime":1625201229,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1625201229","product_id":100039001,"comment_content":"项目中实施有了依据","like_count":0},{"had_liked":false,"id":298477,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1624148842,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1624148842","product_id":100039001,"comment_content":"基于接口而非实现我还是没理解进去好处，相对文中所讲，基于实现也是调用的方法，只要方法名字，入参不变，内部实现变更也是无法影响到外部调用的","like_count":0},{"had_liked":false,"id":294849,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1622109045,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1622109045","product_id":100039001,"comment_content":"用思维导图的方式记录下，为什么，是什么，怎么做。实战的话就绘制图，多看多练，为什么要这样做？","like_count":0},{"had_liked":false,"id":292207,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1948762,"ip_address":"","ucode":"61A3ACB1D14CAF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/bc/5a/855160ca.jpg","comment_is_top":false,"comment_ctime":1620721327,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1620721327","product_id":100039001,"comment_content":"到作者说的第一阶段，受益匪浅。","like_count":0},{"had_liked":false,"id":283143,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1615586123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615586123","product_id":100039001,"comment_content":"赞！老师不仅是写程序的高手，同时也是传道解惑的高手，很难得！谢谢老师。","like_count":0},{"had_liked":false,"id":276909,"user_name":"snake","can_delete":false,"product_type":"c1","uid":2347137,"ip_address":"","ucode":"47BFFE4D048156","user_header":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","comment_is_top":false,"comment_ctime":1612172667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612172667","product_id":100039001,"comment_content":"自己看的时候也断断续续做了导图和笔记，但是看到这篇总结还是给大佬跪下了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510567,"discussion_content":"看后面的文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276804,"user_name":"火影.海诺","can_delete":false,"product_type":"c1","uid":2091565,"ip_address":"","ucode":"34729AFEE93B6D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ea/2d/34cb8e0a.jpg","comment_is_top":false,"comment_ctime":1612141720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612141720","product_id":100039001,"comment_content":"好像学了很多，却什么都没记住，明显的一个情况是：之前总觉得自己的代码以及同事的代码总有一种说不出的不协调感……学到这里最大的收获就是知道代码差在哪里了……并敢于着手重构","like_count":0},{"had_liked":false,"id":269622,"user_name":"吴月月鸟","can_delete":false,"product_type":"c1","uid":1115064,"ip_address":"","ucode":"2F068EDD166B49","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/b8/961a5342.jpg","comment_is_top":false,"comment_ctime":1608718162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608718162","product_id":100039001,"comment_content":"给跪了，前面自己做的xmind在这儿对比发现做xmind的差距。","like_count":0},{"had_liked":false,"id":261279,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605256438,"is_pvip":false,"replies":[{"id":"96151","content":"������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701502,"ip_address":"","comment_id":261279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605256438","product_id":100039001,"comment_content":"这节课把之前的内容都串起来了，并且靠后的章节与前面的一些设计规则表达的意思基本大同小异，把这些规则多应用就能形成自己的编码风格。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509439,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253699,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1602835444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602835444","product_id":100039001,"comment_content":"唉,将学到了用到项目中了,以前很多违反设计规范的,二刷记笔记,争取不止会用,还得会说","like_count":0},{"had_liked":false,"id":248156,"user_name":"大雁小鱼","can_delete":false,"product_type":"c1","uid":1101017,"ip_address":"","ucode":"44090581E59FDA","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/d9/20d4f7c2.jpg","comment_is_top":false,"comment_ctime":1600045658,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1600045658","product_id":100039001,"comment_content":"在之后开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。 ——这其实在实际开发中是做不到的，测试会跳出来说：“你为什么把以前的这段代码都修改了，这次迭代不需要改这段逻辑的”。为了少测试，最终开发妥协了，把代码还原回去了","like_count":0,"discussions":[{"author":{"id":2160379,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f6/fb/6c0e4ec5.jpg","nickname":"一林","note":"","ucode":"DBDE2FD654A5D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312006,"discussion_content":"争哥之前的文章有讲到，应该把重构当成开发流程的一部分，把它放到开发流程的某一步，所以测试人员就有责任去测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602560164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2160379,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f6/fb/6c0e4ec5.jpg","nickname":"一林","note":"","ucode":"DBDE2FD654A5D8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312856,"discussion_content":"测试并不一定认同,测试只想减少自己的工作,所有这些东西团队得达成共识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602835580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312006,"ip_address":""},"score":312856,"extra":""}]}]},{"had_liked":false,"id":247834,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1599881908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599881908","product_id":100039001,"comment_content":"真的很棒，重新再慢慢的品，争哥真棒","like_count":0},{"had_liked":false,"id":246915,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599529898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599529898","product_id":100039001,"comment_content":"想到一个事情，好的代码其实依托于好的骨架和架构的，就和“梦想改造家一样”，房子布局好，室内设计相对更轻松一点，房子布局奇葩，当然也可以有好的室内设计，但是付出的精力是巨大的。","like_count":0},{"had_liked":false,"id":235479,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1595056446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595056446","product_id":100039001,"comment_content":"总结复习的很是时候，好老师~","like_count":0},{"had_liked":false,"id":232441,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1594004638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594004638","product_id":100039001,"comment_content":"感觉每一阶段知识点之后来一篇这种总结性的文章非常好，也很有必要！","like_count":0},{"had_liked":false,"id":232429,"user_name":"被过去推开","can_delete":false,"product_type":"c1","uid":1276690,"ip_address":"","ucode":"8B4F34FE93FD5B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Cib5umA0W17N9pichI08pnrXAExdbyh7AVzH4nEhD6KN3FXuELk4LJJuqUPPD7xmIy9nq5Hjbgnzic7sVZG5BKiaUQ/132","comment_is_top":false,"comment_ctime":1594002437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594002437","product_id":100039001,"comment_content":"温故而知新，对学习真的有用。看完这篇文章后，对面向对象编程的理解更深入了。关于开闭原则，由于公司做的业务追求快猛糙，对这个原则没有多少理解。但是今天猛然想起 spring 的一个扩展点，spring的后置处理器就是运用了开闭原则，能够以最小的代码改动增加新功能。","like_count":0},{"had_liked":false,"id":231665,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1593744652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593744652","product_id":100039001,"comment_content":"PS:<br>--why: 为什么需要<br>--how: 怎么做<br><br>1.SOLID 原则：SRP 单一职责原则<br>--why：<br>  如果职责太多，七大姑八大姨都找上门来（各处被调用），一旦要改下功能（产品经理经常这么干），散布在各个文件的代码都要改。每出现一次，都要理解该出的上下文，工作量巨大，累不说，还容易出BUG。<br>  如果职责少，语义明确，返回的结果、错误简单明了，虽然它也可能在各处调用，但因为功能少，犯错的可能性就越少。<br>  相比之下，还是单一点好。<br><br>--how:<br>  &gt;&gt; 类中的代码行数、函数或者属性过多；<br>  &gt;&gt; 类依赖的其他类过多或者依赖类的其他类过多；<br>  &gt;&gt; 私有方法过多；<br>  &gt;&gt; 比较难给类起一个合适的名字；<br>  &gt;&gt; 类中大量的方法都是集中操作类中的某几个属性。<br><br>2.SOLID 原则：OCP 开闭原则<br>--why：<br>  加法简单，修改更难&#47;麻烦。<br>  <br>--how:<br>  使用多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式。<br><br>3.SOLID 原则：LSP 里式替换原则<br>--why：<br>  如果不遵循里氏替换原则，会使得多态的代码有更多的不确定性，容易出BUG。比如父类申请内存失败返回空，调用者判断为空则不操作指针；如果子类申请失败还瞎返回一个指针（虽然不太可能这样做），调用者去操作了，程序就偏离正常线路了。<br>  <br>--how:<br>  父类定义了函数的“约定”（或者叫协议），那子类可以改变函数的内部实现逻辑，但不能改变函数的原有“约定”。这里的“约定”包括：函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明。<br><br>4.SOLID 原则：ISP 接口隔离原则<br>--why：<br>  不要到处留情，不该给的也给了，总有一天有人掉坑里或者拿这个说事。比如不知情的同事调用了不该调的接口，如果不给出去，别人都调不了。<br>  <br>--how:<br>  能不给的尽量不给。","like_count":0},{"had_liked":false,"id":231156,"user_name":"向往的生活","can_delete":false,"product_type":"c1","uid":1397298,"ip_address":"","ucode":"0E8DB45357820F","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","comment_is_top":false,"comment_ctime":1593594798,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593594798","product_id":100039001,"comment_content":"这个总结太可以啦","like_count":0},{"had_liked":false,"id":226861,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1592219399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592219399","product_id":100039001,"comment_content":"【设计模式笔记38】这篇算是前面得精华总结，对于写出好代码一定要落地，形成团队内的开发规范，这也让知识得到传播和学习，形成统一的共识才能提高开发效率。对制定开发规范提供了很好参考，完全可以时不时拿出来翻一翻","like_count":0},{"had_liked":false,"id":222210,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590717286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590717286","product_id":100039001,"comment_content":"抽象是数学上讲的从特殊到一般的思维过程。把很多对象分类后，抽出出共性，如抽象类的属性和方法、接口。就是表示很多对象共有的属性和方法。使用接口和抽象类就是由一般到特殊的数学思维过程。<br>抽象类的属性，所有特殊类共有的属性，抽象类的方法，所有特殊类共有的方法，抽象函数，所有类共有的动作，但是具体怎么做不一样。接口方法更抽象更一般，直接没有任何实现，全由特殊类来实现。<br>抽象实现了特殊类的规范的统一。","like_count":0},{"had_liked":false,"id":222207,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590716709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590716709","product_id":100039001,"comment_content":"封装是通过函数访问数据：get、set函数来访问数据，实现数据访问保护，让数据的获取和设置实现逻辑拦截，如在set中编写数据校验逻辑，在get中提供输出格式转换。<br>封装是控制看见性： private、protected、public 。<br>封装是隐藏实现细节：为调用者提供简单的调用接口。把数据和动作封装为类、把动作封装为函数、把类封装为包。","like_count":0},{"had_liked":false,"id":212010,"user_name":"lukenc","can_delete":false,"product_type":"c1","uid":1312141,"ip_address":"","ucode":"E6B490234AF7F4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqX0cy8OczW1RMyENicKdXsEvhkOqlMCiczR4OS7532ZVCq5lCMVM9ctIOSx9df9O46MLbPzXUKspiaw/132","comment_is_top":false,"comment_ctime":1588045807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588045807","product_id":100039001,"comment_content":"偷懒了一阵 现在看完这篇文章 又捡回来了 <br>我觉得这之前的应该就是内功了。期待接下来的招数教学 哈哈哈哈","like_count":0},{"had_liked":false,"id":207624,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1587121452,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587121452","product_id":100039001,"comment_content":"干货满满，重要的是需要在工作中不断消化实践，形成自己的开发规范，最难的还是坚持","like_count":0},{"had_liked":false,"id":206702,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1586918583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586918583","product_id":100039001,"comment_content":"2. 通过这节课程的回顾，大部分的内容还有印象，对已经忘记的内容进行复习进行了加强<br>3. 记忆比较模糊的内容有：少用继承多用组合（继承主要有三个作用：表示 is-a 关系、支持多态特性、代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成）；复习了SOLID原则（对于其中包含的五种原则可以通过案例的方式进行记忆和回顾效率比较高，即，碰到每个原则的时候联想一下课程中列举的例子）；对于如何编写容易测试的代码进行回顾（其中的一条：函数中不要使用参数来做代码执行逻辑的控制。遇到这种情况可以将一个函数拆分成多个函数）<br>4. 好多内容不是看一遍就行了，即使是当时理解了，还存在大脑遗忘的问题，要经常性的复习和代码实战","like_count":0},{"had_liked":false,"id":203969,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586313776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586313776","product_id":100039001,"comment_content":"是应该做一下思维脑图<br><br>总结的内容，我都有印象，然后也能回忆大部分，看了我学习的还是不错的，可能要归功于我写留言的原因。感谢王争老师，虽然留言都很水，还是给我精选，增加了我的自信心。<br><br>我打算这两天做一下思维脑图来，重新学习一下。","like_count":0},{"had_liked":false,"id":202126,"user_name":"Geek_1d80ef","can_delete":false,"product_type":"c1","uid":1725343,"ip_address":"","ucode":"2695F603FE80E0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep0icNIl01hycNvkTKHFtLMcxtJ8Nr48KOicUBA7jdbOjx41l1pkoic3l0Xftib4RsgeIkPV4y4cA6MPw/132","comment_is_top":false,"comment_ctime":1585905838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585905838","product_id":100039001,"comment_content":"特意把五张总结图片打印出来，没事看看","like_count":0},{"had_liked":false,"id":197182,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1876764,"ip_address":"","ucode":"BAD602A7270306","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a3/1c/f947dd97.jpg","comment_is_top":false,"comment_ctime":1585362124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585362124","product_id":100039001,"comment_content":"打卡..","like_count":0},{"had_liked":false,"id":196670,"user_name":"infancy","can_delete":false,"product_type":"c1","uid":1063322,"ip_address":"","ucode":"F06708E5EA8D0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7icFGrBnjMnulAdrghQ72y5wGQKbztaMN7a3mzzwMBrzwz5pxdU7zib17d29niapsP0uGeYpsX2BJ5gMUjLuCnMUA/132","comment_is_top":false,"comment_ctime":1585301668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585301668","product_id":100039001,"comment_content":"刷了几遍，改变了我对软件设计的认知","like_count":0},{"had_liked":false,"id":194556,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1585066908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585066908","product_id":100039001,"comment_content":"承上启下，温故知新的一节。不少知识点是学校已经学过的，不少知识点也是工作中已经用到的，经过系统梳理后，脉络更加清晰明了。<br>现在担心的是代码过渡设计了，再加上本来就有看到不完美的代码就想做大重构的坏习惯……时间紧任务重的时候还是应该追求完成而不是完美的。","like_count":0},{"had_liked":false,"id":188537,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1584365828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584365828","product_id":100039001,"comment_content":"其中大部分都有印象，且能在代码检视时，关注到别人写的问题<br>但是ISP接口隔离原则有点记不清了，因此进行了重点回顾和学习。<br>接口隔离原则指的是客户端不应该强迫依赖他不需要的借口，比如如果一个函数中，一些调用者只需要一个函数的部分功能，则把函数再拆分成更细粒度的函数。","like_count":0},{"had_liked":false,"id":186249,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583807440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583807440","product_id":100039001,"comment_content":"掌握程度应该在1根2的之间。需要多加练习，和回顾理论知识。<br><br>以后要每写一个类，一行代码，就要反复推敲，是否可读，可扩展，可维护","like_count":0},{"had_liked":false,"id":185497,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1583593739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583593739","product_id":100039001,"comment_content":"打卡，收获良多。补充了很多理论知识。","like_count":0},{"had_liked":false,"id":185456,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583586285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583586285","product_id":100039001,"comment_content":"第一部分结束，准备下面的学习","like_count":0},{"had_liked":false,"id":184471,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583324234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583324234","product_id":100039001,"comment_content":"在听了老师这么多堂课之后，然后也在每一堂的课后讨论当中尽量留下自己的身影，现在在编写某个模块或者是写一些新代码的时候，会不由自觉的去想着如何去利用这些设计原则和思想去设计它，<br>在看到不好的代码时候也想着去顺手把它重构了，<br>但是仍然感觉学习过的时间很短，没有太深的印象,没有达到我想要的潜意识的思考，希望能够学完这个课程之后,有空的时候多回来翻翻几遍.","like_count":0},{"had_liked":false,"id":184176,"user_name":"一区","can_delete":false,"product_type":"c1","uid":1793770,"ip_address":"","ucode":"B5142A6276E490","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a2mRI7BYncHCL6QWfibe7g7MWc70fSsqQibu7o9PcHjicYwo5dSnAoUN75HDDRz4GXWJdpWw59yJsMwFv3t7zSiaJQ/132","comment_is_top":false,"comment_ctime":1583243344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583243344","product_id":100039001,"comment_content":"老师 有个问题，如果大量使用依赖注入来实现TDD，那其他调用者不就需要了解这个接口的内部实现了吗？","like_count":0},{"had_liked":false,"id":183544,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1583063212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583063212","product_id":100039001,"comment_content":"闭上眼睛也只能有个大概，不能完全清晰准确的形成整个大的框架，但是也能根据学到的知识思考现有代码中的问题，并且开展重构工作<br>纸上得来终觉浅，绝知此事要躬行。希望通过这种迭代式的方式逐渐的熟悉掌握，为我所用。","like_count":0},{"had_liked":false,"id":182728,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1181486,"ip_address":"","ucode":"E82C58AF2604ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/2e/878d3c92.jpg","comment_is_top":false,"comment_ctime":1582856628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582856628","product_id":100039001,"comment_content":"总结的很好，现在就觉得实践不够。","like_count":0},{"had_liked":false,"id":182206,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1582728844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582728844","product_id":100039001,"comment_content":"很棒，看的时候偶尔让我想起面试官问的相似的问题，哈哈","like_count":0},{"had_liked":false,"id":182076,"user_name":"沁塵","can_delete":false,"product_type":"c1","uid":1564002,"ip_address":"","ucode":"4AD780EF50882B","user_header":"https://static001.geekbang.org/account/avatar/00/17/dd/62/824e5e16.jpg","comment_is_top":false,"comment_ctime":1582703961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582703961","product_id":100039001,"comment_content":"分享一个心得：<br>看不懂、记不住不要紧，写上一两个项目，你且回过头来看它","like_count":0},{"had_liked":false,"id":180046,"user_name":"程晓擘","can_delete":false,"product_type":"c1","uid":1328354,"ip_address":"","ucode":"96986D5AE2B96C","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","comment_is_top":false,"comment_ctime":1582172239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582172239","product_id":100039001,"comment_content":"受益匪浅","like_count":0},{"had_liked":false,"id":178442,"user_name":"无名氏","can_delete":false,"product_type":"c1","uid":1001023,"ip_address":"","ucode":"D1F322E386430E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/3f/7825378a.jpg","comment_is_top":false,"comment_ctime":1581690577,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1581690577","product_id":100039001,"comment_content":"「KISS 原则中的“简单“”并不是以代码行数来考量的。」这句多了个引号。","like_count":0,"discussions":[{"author":{"id":1613665,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/61/c46b42f4.jpg","nickname":"talkyoung","note":"","ucode":"8D231FA9004B64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308868,"discussion_content":"。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601105158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177764,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1581494104,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581494104","product_id":100039001,"comment_content":"年前的课程帮我梳理了很多之前没有遇到过的方式，比如DDD这种，还有一些重构方面的实战；年后开始继续学习之后，看到这份总结，更加坚定了我刻意练习写更好代码的决心。<br><br>现在自己有的特点继续保持；对比这份精华总结，薄弱的部分跟上，这份课程对我来说就是 物有所值啦。","like_count":0},{"had_liked":false,"id":177581,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581428178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581428178","product_id":100039001,"comment_content":"这篇总结真的很棒，原来脑子里面还是形成不了结构。现在想起来就有开篇图的结构，知识点的话，看的时候还能想起来印象深刻的内容。还是需要自己绘制一下脑图加深印象。","like_count":0},{"had_liked":false,"id":176006,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1580909894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580909894","product_id":100039001,"comment_content":"打卡，现在是结合自己的理解记忆，好多细节都忘了，看着知识整理，能想起来些细节，最近写了个项目，结合专栏，优化重构","like_count":0},{"had_liked":false,"id":175953,"user_name":"RLH","can_delete":false,"product_type":"c1","uid":1524803,"ip_address":"","ucode":"44FE2D50EC7581","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/43/35ea4823.jpg","comment_is_top":false,"comment_ctime":1580891271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580891271","product_id":100039001,"comment_content":"这篇把完整知识总结了一遍，看来自己学的还不够透，很多知识都遗忘了，需要刻意练习～","like_count":0},{"had_liked":false,"id":175317,"user_name":"JamesPxy","can_delete":false,"product_type":"c1","uid":1320179,"ip_address":"","ucode":"558D707463589D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q2LT8JFWSghiaVbMMOkOkLnuibEqG2YOyEdCA5icEZH3Qpd9pL23mpzic9tWwyiciaBicE4YPMVnITOodulwG2SS75r2w/132","comment_is_top":false,"comment_ctime":1580653563,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580653563","product_id":100039001,"comment_content":"看了总结觉得很有必要复习一遍了，关键还是在于平常编码过程中的实践。","like_count":0},{"had_liked":false,"id":175125,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1580564984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580564984","product_id":100039001,"comment_content":"蓦然回首，发现原来已经学习了那么多的知识了，其实很多东西都是在日常工作中需要不断注意，思考，审视的内容，希望在以后的工作里，能够时刻提醒自己，注意代码质量，提高重构意识","like_count":0},{"had_liked":false,"id":174814,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580396767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580396767","product_id":100039001,"comment_content":"对于面向对象和设计原则的掌握程度要稍好一些, 对于单测,重构等章节学的不太认真.<br>感谢作者精心安排的课程,非常细,有作者自己的理解而不是洗书.<br>希望后面的具体设计模式会更精彩!","like_count":0},{"had_liked":false,"id":174738,"user_name":"Geek_27a248","can_delete":false,"product_type":"c1","uid":1542778,"ip_address":"","ucode":"6AC3AC42E6EEC9","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","comment_is_top":false,"comment_ctime":1580366773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580366773","product_id":100039001,"comment_content":"感觉差的好多，我感觉我现在还处在理解概念阶段，写代码时不能灵活使用","like_count":0},{"had_liked":false,"id":174685,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1580351216,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580351216","product_id":100039001,"comment_content":"需要长期练习，有切身体验能记住，没有的还是还给老师了。","like_count":0},{"had_liked":false,"id":174633,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1580303360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580303360","product_id":100039001,"comment_content":"今天学习了总结面向对象，设计原则，编码规范和重构相关的知识总结。<br>面向对象只是有一些概念更加熟悉了。<br>设计原则我觉得自己理解了。<br>编码规范和重构是我工作中一直在用的，这次看了专栏之后有了很多新的认识。<br>前面的课程要自己抽时间做个思维导图，争哥的导图做的很好，已经下载收藏。","like_count":0},{"had_liked":false,"id":174618,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1580297935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580297935","product_id":100039001,"comment_content":"基本是之前每篇的总结，读起来也较轻松，接下来需自己再总结一下。","like_count":0},{"had_liked":false,"id":174601,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580291184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580291184","product_id":100039001,"comment_content":"1.额。。刚好和这几天对这个专栏整理的xmind差不多。也建议大家自己写下xmind导图，对加深印象和理解很有帮助。串起来和零散的知识点，可记忆性和可理解性差很多。<br><br>2.很好奇怎么讲这些设计模式，期待再次被惊艳。我自己是扒spring对各种设计模式的应用后，才get到在什么场景用什么模式有什么好处这些点的。讲道理，单知道设计模式怎么实现，没太大用。因为没有结合应用就很容易忘记。知道却用不上，才是这块东西真正的难点。","like_count":0},{"had_liked":false,"id":174556,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580275317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580275317","product_id":100039001,"comment_content":"不同模块的掌握程度不一样：<br>1. 设计原则那块有些原则是只是有个印象，有些则是在项目中应用，整体上看这块还需要更多的复习和理解<br>2. 重构和编程规范这块在工作中一直持续在做，还不错<br>3. 面向对象部分也是有不错的知识结构，并且在工作中的项目里实践<br><br>在这门课程里收获的很多，最近在家宅着，准备再次从第一节课开始复习了🐶","like_count":0},{"had_liked":false,"id":174554,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1580274717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580274717","product_id":100039001,"comment_content":"有些具体的设计思想、原则概念性的问题有点含糊不清，不过现在写代码时会考虑代码的可读性、可维护、可扩展性等。真的很感谢老师出了这门课，之前每次写代码都纠结代码质量怎么保证，老师的这门课解答了我之前所有关于代码质量的疑问。","like_count":0},{"had_liked":false,"id":174548,"user_name":"六号先生117","can_delete":false,"product_type":"c1","uid":1005232,"ip_address":"","ucode":"F5AA9A6CE32EBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/b0/5f5ec445.jpg","comment_is_top":false,"comment_ctime":1580271279,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580271279","product_id":100039001,"comment_content":"老师真好，昨天正好开始复习，自己画思维导图，看到文中总结结构图真棒👍🏻","like_count":0},{"had_liked":false,"id":174545,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1580270332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580270332","product_id":100039001,"comment_content":"34分钟的音频,给力.不知不觉已经学习三个月了~","like_count":0},{"had_liked":false,"id":174544,"user_name":"Algo","can_delete":false,"product_type":"c1","uid":1119682,"ip_address":"","ucode":"D7B6D147F793E8","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/c2/cd8052c8.jpg","comment_is_top":false,"comment_ctime":1580269743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580269743","product_id":100039001,"comment_content":"打卡！ 前几天有自己将SOLID的内容总结一遍。今天更系统复习了第一遍。只是实际开发中怎样不会顾此失彼，全靠小跑重构么。","like_count":0},{"had_liked":false,"id":174524,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1580266429,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"418192094141","product_id":100039001,"comment_content":"这篇看起来反而是最轻松的。<br>一直有每篇都用xmind做笔记的习惯，自问自答，wwh。<br>会结合工作中的代码去思考内容，审视代码，也在code review中和同事结合团队现状制定可行的checklist和编码规范<br>受益良多，也更期待后续","like_count":98,"discussions":[{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382865,"discussion_content":"我只用TXT","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625748324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309605,"discussion_content":"做笔记使用Typora不是更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601364839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309879,"discussion_content":"各有侧重，都在用😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601476213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309605,"ip_address":""},"score":309879,"extra":""},{"author":{"id":1626651,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d2/1b/b07d5c9a.jpg","nickname":"caizqcode","note":"","ucode":"F1ECBC98E7AE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370016,"discussion_content":"可以使用vscode","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619253084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309605,"ip_address":""},"score":370016,"extra":""}]},{"author":{"id":1740368,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","nickname":"Geek_b6e449","note":"","ucode":"8296078ED23637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288940,"discussion_content":"你们总这样 让我这种情何以堪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593936677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183538,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1583061368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"315115673976","product_id":100039001,"comment_content":"终于坚持 原则和思想 这一模块了。<br>自己在毕业一年后就在公司开展了《设计模式和重构》的分享课，能够入选的原因是自己在小步快跑地重构了一个老旧项目的核心逻辑代码，为项目偿还了一部分技术债务。当初受启发最大的是 《重构》 这一本书，现在自己从维护旧项目到开发新项目，设计模式对自己来说就更加重要了。<br><br>在阅读这三十余篇的文章后，多次因为自己编写代码违反了文章中提及的原则感到愧疚。自己负责的新项目曾经一段时间陷入了代码质量问题和可维护的问题，自己编写的框架很多坑，同事在框架中开发也没说踩。真希望自己可以提前一年阅读到这个专栏，必定可以让我省下现在很多的烦恼。<br><br>我是为了提高项目 code review 的质量订阅专栏的，也通过专栏的原则发现了项目中大量不及格的设计，在和同事讨论的过程中有了原则和思想的指导，很快地就能达成小模块重构的方案。期待后面的具体的设计模式部分文章，相信一定会给我带来更多重构代码的思路。<br><br>受专栏设计思想和原则的启发（特别是贫血模型和充血模型部分的启发），我准备对项目公共模块进行一系列重构，编写测试用例，重新让项目回归到可维护甚至易维护的状态。<br><br>感谢老师的专栏文章！<br><br>","like_count":74},{"had_liked":false,"id":237971,"user_name":"sun","can_delete":false,"product_type":"c1","uid":1076100,"ip_address":"","ucode":"0358B9288D4018","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/84/d1e6eac9.jpg","comment_is_top":false,"comment_ctime":1596016689,"is_pvip":false,"replies":[{"id":"88019","content":"我扶你起来吧","user_name":"作者回复","comment_id":237971,"uid":"1190123","ip_address":"","utype":1,"ctime":1596108857,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"121855100977","product_id":100039001,"comment_content":"总结的太好了  我是跪着读完这篇的","like_count":29,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502603,"discussion_content":"我扶你起来吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596108857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":546769,"discussion_content":"别扶他","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642419566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":502603,"ip_address":""},"score":546769,"extra":""}]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542811,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640851977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351604,"discussion_content":"你为何总是跪着\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614340489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340873,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610186410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174652,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580308808,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"87479654728","product_id":100039001,"comment_content":"1. 学完了还是得用：自己业余时间写了一个小项目，然后尝试丰富功能，重构它。目前完成了最基本的功能，代码写的只能算是能用。基本每天都在使用这个小工具。下步打算利用课程中的知识来“盘他”！<br>2. 自己个人代码中加入了 FindBugs 和 Google code style。<br>3. Leetcode练习时注意逐步优化，想想也算是重构吧，不用ide写代码，注意编码规范。<br>4. 一个方法不要超过20行。<br>5. 注意代码的可测性，之前没有注意过这方面。重构前要先写测试。<br>6. 读完了一本《大话设计模式》，正在看《重构2》。<br>期待争哥下部分的课程！","like_count":21,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539731,"discussion_content":"方法的代码行数不超过20行就有点过分了吧。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639819107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564544,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/80/5069bb27.jpg","nickname":"杨通","note":"","ucode":"C037B82EE04DBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316139,"discussion_content":"不用ide写代码是为啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603365408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167434,"discussion_content":"我总结就是一句话：有则改之无则加勉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581494223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175752,"user_name":"Rayjun","can_delete":false,"product_type":"c1","uid":1002514,"ip_address":"","ucode":"61A3D1A3D03569","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/12/f0c145d4.jpg","comment_is_top":false,"comment_ctime":1580818462,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57415393310","product_id":100039001,"comment_content":"太厉害了，能把这么复杂的体系用这么简练的文字表达清楚，值得反复读。","like_count":13},{"had_liked":false,"id":246346,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1599290376,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35959028744","product_id":100039001,"comment_content":"王工确实总结的很好，但是目前国内对代码质量的重视氛围非常差，领导（包括高层领导）只要进度，堆砌业务，本人所在面领从单体服务到微服务的拆解阶段，本身之前单体服务已经非常混乱了，业务还一直向上面堆砌业务，bug多，工期还要求的很短，各种出问题，沙丘上建楼，而且据我观察国内这个行业大部分公司都是这个样子，包括所谓的一些大公司。真所谓代码写的再好，也要遇到像shit一样的项目代码需要你去面对在上面还要做新的业务，真的是很难，有没兄弟有同感的？","like_count":8,"discussions":[{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558520,"discussion_content":"有同感，我的领导从来没在代码设计上面有什么追求，更多是功能上是不是能满足业务要求，技术要求（平台、监控、配置），具体代码是咋样，都是你爱咋玩咋玩。有时候也挺纠结的，废力做了一些重构，除了和你一起的开发同事，别人，无论是领导还是别的团队是不能从中得到一点利益的，领导要是不支持你，那纯粹就成了工作不饱和在瞎折腾了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648366269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177630,"user_name":"will","can_delete":false,"product_type":"c1","uid":1156207,"ip_address":"","ucode":"7A7DBE3E0EEAEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/6f/672a27d4.jpg","comment_is_top":false,"comment_ctime":1581437795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35941176163","product_id":100039001,"comment_content":"这一篇总结了之前所有的知识点，只能说自己真的太菜了，看完又忘记大部分了，看来真的得沉下心来好好学习学习","like_count":8},{"had_liked":false,"id":230389,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1593359162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31658130234","product_id":100039001,"comment_content":"【设计模式笔记39】20200628<br>一、如何评判代码质量高低<br>评判标准有三个：可维护性、可读性、可扩展性，通过面向对象设计思想、设计原则、编码规范和重构技巧写出高质量代码<br><br>二、面向对象思想<br>四大特性：封装、继承、抽象、多态<br>封装的意义在于保护数据不被随意修改，提高代码可维护性；仅暴露有限接口，提高代码易用性<br>继承的意义在于解决代码复用问题<br>多态的意义在于让子类替换父类，可以灵活替换实现，提高代码的扩展性和复用性<br>抽象的意义在于修改实现不需要修改定义，同时也是复杂系统开发的有效手段<br><br>面向对象开发流程<br>面向对象分析（OOA）：搞清楚做什么，产出是详细的需求描述，怎么才算详细，我觉得至少应该包括以下几方面：背景、解决什么问题、怎么解决、涉及哪些模块以及这些模块分别要改什么<br>面向对象设计（OOD）：搞清楚怎么做，产出是类、类关系<br>面向对象编程（OOP）：将分析和设计的结果翻译为代码的过程，几个要点：接口和抽象类的使用、基于抽象而非实现编程、为什么不推荐使用继承，组合的好处是什么？贫血模型和充血模型的使用<br><br>三、设计原则<br>单一职责：怎么判断？函数或属性过多、依赖的类过多<br>开闭原则：我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上<br>里氏替换原则：用于知道子类如何设计，核心在于“design by contract”，父类定义了函数的约定，子类可以改变函数的内部逻辑，但是不能改变函数的“约定”：对输入、输出、抛出异常的约定。注意和多态的区别<br>接口隔离原则：客户端不应该墙皮依赖它不需要的接口。和单一职责原则的区别，后者针对的是模块、类和接口，前者侧重于接口的设计，并且告诉我们如何判断接口是否单一<br>依赖注入原则：将依赖的对象通过构造函数等方式传递给类使用。控制反转是指将程序的控制权交给框架，反转的控制权。扩展点包括：依赖抽象不依赖细节、高层模块依赖底层模块<br>KISS原则：尽量保持简单。要点有三：不要重复造轮子、不要过度优化、不要使用别人不懂的技术实现代码（如何做）<br>YAGNI原则：你不会需要它。核心是不要过度设计（要不要做）<br>DRY原则：不要重复你自己。包括实现逻辑重复、功能语义重复、代码执行重复。怎么解决？减少代码耦合、满足单一职责原则、模块化、业务与非业务逻辑分离、通用代码下沉、继承、多态、抽象、封装、应用模板等设计模式。复用意识也非常重要。在设计每个模块、类、函数的时候，要像设计一个外部 API 一样去思考它的复用性。<br>LOD原则：什么是高内聚？用于知道类的设计，相近功能的代码放在一个类中。什么是松耦合？知道类与类之间的关系，一个类的改动不会或者很少导致被依赖类的改动<br><br>四、编码规范<br>1、命名与注释：命名要准确达意、命名要可读可搜索；代码注释要包括做什么、为什么、怎么做、如何用<br>2、编程技巧：将复杂的函数拆分为类和函数、拆分函数来处理函数参数过多的场景、参数化对象、函数不要使用参数做逻辑控制、移除过深的函数嵌套、用字面量取代魔数、用解释性变量命名复杂表达式<br>","like_count":7},{"had_liked":false,"id":257562,"user_name":"蔡晓亮","can_delete":false,"product_type":"c1","uid":1501018,"ip_address":"","ucode":"48C043DE389595","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/5a/9578215e.jpg","comment_is_top":false,"comment_ctime":1604028060,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27373831836","product_id":100039001,"comment_content":"这个专栏讲的非常棒，是我看过最实在，接地气容易落地的设计模式。但是没有工作经验的同学或者工作不久，项目经验不多的同学就不容易产生共鸣。容易品尝不到其中的精髓，建议做几个项目了，看看开源项目代码了，再时不时来回看一下，你就知道其中的滋味了。","like_count":7,"discussions":[{"author":{"id":2430177,"avatar":"","nickname":"Geek_c08f40","note":"","ucode":"029C7D598FAE8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368373,"discussion_content":"现在都还不知道面向对象的代码是怎样写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618671372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266987,"avatar":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","nickname":"超超超超超帅耶🌴","note":"","ucode":"931E23DC0ACB04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352794,"discussion_content":"是的，刚工作的时候对于面向对象的特点还有依赖倒置这些只知其然不知其所以然，现在工作几年回头再看就很容易理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614851813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342226,"discussion_content":"实话","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610619346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174490,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580229594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350033370","product_id":100039001,"comment_content":"打卡，我是理解记忆，老师的原话我肯定记不住，我在老师理解的基础上有自己的理解！","like_count":6},{"had_liked":false,"id":250150,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1600952346,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14485854234","product_id":100039001,"comment_content":"我们公司比较重视业务，对技术要求不高，大领导总觉得随便找几个技术人员就能做。业务量庞大，不断堆砌业务代码，每次都是倒排工期，计划制定不合理，时间紧，任务重，排期每次都后延。通常一个功能从头到尾并不是一个人负责，因为是最初的负责人可能被抽调忙别的业务去了，不得不换个人在上面改bug或添加新的需求，最终能有四五个人参与修改，每个人用自己的风格添加代码，最后问起来这个功能到底是做什么的谁也说不清，只能自己忍着看代码了解。尽管如此但表面上做出来大屏或PC界面看着不错，政府为了完成任务又有采购需求就会去买，用不用再说。这就是国内大多数传统软件行业的现状，所以如果想让自己的技术有更高一层次的发展还是去互联网大厂，产品直接面向用户，用户数量及口碑直接反应产品好坏，为了做出更好的产品就会对技术有更高的要求，也就能给自己带来更高的挑战，倒逼自己去提高技术。","like_count":3},{"had_liked":false,"id":256802,"user_name":"erDuo","can_delete":false,"product_type":"c1","uid":1016135,"ip_address":"","ucode":"691E716E6D0E39","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/47/e5b206d9.jpg","comment_is_top":false,"comment_ctime":1603757040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193691632","product_id":100039001,"comment_content":"真不错，需要定期回顾，重构要伴随整个职业生涯","like_count":2},{"had_liked":false,"id":245681,"user_name":"小情绪","can_delete":false,"product_type":"c1","uid":1020311,"ip_address":"","ucode":"92D8081DB8DB45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","comment_is_top":false,"comment_ctime":1599026313,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10188960905","product_id":100039001,"comment_content":"争哥，请教一个问题，虽非本章内容，但也是代码层面的，还望不吝赐教：<br>public class LinkedList&lt;E&gt; extends ... implements...{<br>  private static class Node&lt;E&gt;{<br>    E item;<br>  }<br>  Node first;<br><br>  public E peek(){<br>   final Node&lt;E&gt; f = first;<br>   return (f == null) ? null : f.item<br>  }<br>}<br><br>上面的peek方法为啥不写成如下：<br>  public E peek(){<br>   return (first == null) ? null : first.item<br>  }<br>为啥非得用一个局部变量来接收，并且要用fianl修饰？","like_count":2,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305002,"discussion_content":"争哥，都说了是“尖子生”文化，就像科大的“少年班”，国内的互联网公司不具备这种“尖子生”文化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599736338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122024,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/e8/bd39a46f.jpg","nickname":"jimmy","note":"","ucode":"B79998AA16239D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378892,"discussion_content":"这样的公司，国内没几家","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623491954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243460,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1598140065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188074657","product_id":100039001,"comment_content":"这篇文章非常重要","like_count":2},{"had_liked":false,"id":239662,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1596609825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186544417","product_id":100039001,"comment_content":"我感觉一定要有自己理解 可以是在争哥理解的基础上 有自己理解  不能一味的是 争哥说什么就是什么  不然自己能力不会有很大提升","like_count":2},{"had_liked":false,"id":232129,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1593863659,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"10183798251","product_id":100039001,"comment_content":"学习了很多，感觉也忘了很多。有必要对前面的所有知识点在重新复习一遍了。 ","like_count":2},{"had_liked":false,"id":215452,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1588994333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178928925","product_id":100039001,"comment_content":"都快讲完了我才看到这 惭愧啊 <br>前面的设计思想和实现方式 用到了最近的需求代码中 感觉收获很大","like_count":2},{"had_liked":false,"id":272650,"user_name":"香","can_delete":false,"product_type":"c1","uid":1220273,"ip_address":"","ucode":"121D6CECECEEC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","comment_is_top":false,"comment_ctime":1610186377,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5905153673","product_id":100039001,"comment_content":"争哥简直是业界良心！不知道争哥后续是否会出类似于操作系统和编译原理这样的课程，如果有的话，非常期待！","like_count":1,"discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381654,"discussion_content":"言之有理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625152522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207025,"user_name":"賢","can_delete":false,"product_type":"c1","uid":1286884,"ip_address":"","ucode":"D837D27DFB4E2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/e4/47fd0f81.jpg","comment_is_top":false,"comment_ctime":1586998086,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5881965382","product_id":100039001,"comment_content":"为什么说私有方法过多不符合单一职责原则？如果类内部的职责逻辑处理过程复杂一些，拆分出了一些内部方法，不用暴露的所以封装为私有方法，这种不算不符合吧？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500980,"discussion_content":"我在Google的时候不怎么加班的，不过，晚上回去还是会学习到很晚，只不过不在公司磨洋工而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594387633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1732780,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","nickname":"面向百度编程","note":"","ucode":"8FE04A019D71D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316611,"discussion_content":"在家学什么啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603431302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176481,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581068602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876035898","product_id":100039001,"comment_content":"设计模式_38:<br>虽然每篇文章看几遍，但总体来说算是第一遍的学习，这一遍最重要，每一个细节都不放过，后面还需要多次的复习和实践，直到它们变成大脑皮层中物理性的神经回路。<br><br>另外，我个人热爱且敬佩认真做事的人，共勉之！","like_count":1,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341499,"discussion_content":"绩效本来没错，错的有人把它当做武器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610438674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175882,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1580877821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875845117","product_id":100039001,"comment_content":"总结了前面所有的章节，可以座位自己的技能树，谢谢","like_count":1},{"had_liked":false,"id":174637,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580305126,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875272422","product_id":100039001,"comment_content":"想了几次，抽象并不是面向对象设计独有的特性，而是一个最基本的应对软件复杂性的思路，大型软件如果想活得好，抽象思维一定少不了。<br><br>之前教科书中都说面向对象是三大特性：封装、继承、多态，这里不知道老师是怎么看的","like_count":1},{"had_liked":false,"id":174489,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1580228741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875196037","product_id":100039001,"comment_content":"今天大年初五，抢占沙发！","like_count":1},{"had_liked":false,"id":349960,"user_name":"Geek_08a0f7","can_delete":false,"product_type":"c1","uid":3015503,"ip_address":"","ucode":"C2D78F6B714B88","user_header":"","comment_is_top":false,"comment_ctime":1656471887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656471887","product_id":100039001,"comment_content":"满满的干货，这得整2-3便才能完全吸收啊！<br>","like_count":0},{"had_liked":false,"id":347664,"user_name":"小杰同学","can_delete":false,"product_type":"c1","uid":2853072,"ip_address":"","ucode":"C6FC59D58F772C","user_header":"","comment_is_top":false,"comment_ctime":1654267361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654267361","product_id":100039001,"comment_content":"我自以为学会了  看了下这篇 才觉得学的如镜中水月 都忘记了","like_count":0},{"had_liked":false,"id":343032,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1145759,"ip_address":"","ucode":"D8A22815D8987C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/9f/da374651.jpg","comment_is_top":false,"comment_ctime":1650603295,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1650603295","product_id":100039001,"comment_content":"最近在设计开发一个公共框架，就用到了本专栏的设计原则，设计思想，设计模式，编码规范，可测试性等内容，感觉代码清爽了很多。","like_count":0},{"had_liked":false,"id":342329,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650197250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650197250","product_id":100039001,"comment_content":"我个人总结的高质量代码解决方案：<br>首先我们接到了产品需求，我们需要对需求进行评审和理解，将现实中的产品需求进行分析并转化为代码开发中的流程和对象(详细的需求描述)，这个过程就是面向对象分析(OOA)；然后我们将这些产品需求中的对象和流程，遵循一定的设计原则进行拆分、组合、抽象得出合适的类以及对应的属性和方法，这个过程就是面向对象设计(OOD)。最后我们再利用一些成熟的设计模式(如果需要的话)来辅助我们的代码开发，将设计过程中的类、类与类之间的交互、类的属性和方法输出成代码，这个过程就是面向对象编程(OOP)。<br><br>你觉得编程完之后就没事了吗？其实不是这样的，为了保证高质量的代码开发。我们在编程完之后还有一系列的后续工作，简称”编后服务“<br><br>开发完代码之后，我们首先通过代码质量检查点对代码进行审查。审查完之后的代码，我们会发现一些存在的问题。然后我们对代码进行重构和优化，最后对重构优化、审查过程中发现的问题进行反思和总结得到了编程的规范和经验。这些规范和经验将指导我们运用在未来的代码开发过程中，往复循环，迭代提升。最终产出我们的目标：高质量代码","like_count":0},{"had_liked":false,"id":328719,"user_name":"ddh","can_delete":false,"product_type":"c1","uid":2806043,"ip_address":"","ucode":"8E852375365F16","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","comment_is_top":false,"comment_ctime":1640852430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640852430","product_id":100039001,"comment_content":"贴合java语言的设计模式， 一些规则一些语言没有那种特性","like_count":0},{"had_liked":false,"id":324781,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1638618230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638618230","product_id":100039001,"comment_content":"感觉这一篇就是独孤九剑的总诀式👏👏👏优秀","like_count":0},{"had_liked":false,"id":316056,"user_name":"慕言","can_delete":false,"product_type":"c1","uid":2731028,"ip_address":"","ucode":"4918FA682F3895","user_header":"https://static001.geekbang.org/account/avatar/00/29/ac/14/a8ff8fec.jpg","comment_is_top":false,"comment_ctime":1634117364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634117364","product_id":100039001,"comment_content":"我自己的总结笔记：<br>一、如何评判代码质量<br>评判标准：可维护性、扩扩展性、可读性、简洁性、可测试性、灵活性、可复用性<br><br>二、面向对象<br>四大特性：继承、封装、抽象、多态<br>继承的意义：表示的是is-a的关系，为了解决代码复用的问题<br>封装的意义：保护数据不被随意修改，提高代码的可维护性，仅暴露有限的必要接口，提高类的易用性<br>抽象的意义：修改实现不需要改变定义，处理复杂系统的有效手段，过滤有必要关注的信息<br>多态的意义：子类替代父类，提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。<br><br>面向对象开发流程：<br>面向对象分析：搞清楚做什么，产出的是详细的需求描述<br>面向对象设计：搞清楚怎么做，将需求描述转化为具体的类，产出的是类<br>面向对象编程：将分析和设计的结果翻译成代码<br><br>面向对象VS面向过程<br><br>类与类的六种关系：<br>依赖、关联、聚合、组合、实现、泛化<br><br>接口VS抽象类：<br>区别：抽象类只能单继承、抽象类不能被实例化、接口不能包含成员属性、JDK1.8之后，接口可以有方法的默认实现<br>接口意义：表示的是has-a的关系，是为了解决抽象而非代码复用问题<br>抽象类意义：表示的是is-a的关系，是为了解决代码复用的问题<br><br>基于接口而非实现编程<br>将接口和实现分离，封装不稳定的实现，暴露稳定的接口<br><br>多用组合少用继承<br>继承的层次比较多时，维护难度大<br>组合能解决层次过深，过复杂的继承关系影响代码可维护性的问题<br><br>三、设计原则<br>SOLID原则：SRP 单一职责原则<br>一个类只负责完成一个职责或者功能<br>实现代码的高内聚低耦合<br>不符合的情况：类代码行数过多，类依赖其他类过多或者依赖类的其他类过多，私有方法过多，比较难给类起一个合适的名字。类中大量的方法都是集中操作某个几个属性<br><br>SOLID原则：OCP开闭原则<br>对扩展开发，对修改关闭<br>以最小修改代码的代价来完成新功能开发<br>实现方法：多态、依赖注入、基于接口而非实现编程、大部分设计模式<br><br>SOLID原则：LSP里式替换原则<br>子类可以替换父类出现的任何地方，保证程序逻辑不变<br>子类可以重写函数的具体实现，但不能改变函数的约定<br>注意与多态的区别，里式替换原则是指导继承关系中子类如何设计，多态是面向对象编程的一种语法，是一种代码实现思路<br><br>SOLID原则：ISP接口隔离原则<br>不能强制客户端依赖它所不需要依赖的接口<br>与单一职责原则的区别<br>单一职责原则针对的是模块、类、接口的设计<br>接口隔离原则提供通估计调用者如何使用接口来间接判定接口职责是否单一<br><br>SOLID原则：DIP依赖倒置原则<br>依赖注入：通过构造方法传参的方式把被依赖的对象在外部创建好之后传给依赖对象，依赖注入是提高代码可测试性的有效手段<br>控制反转：程序执行流程的控制权反转给框架<br>依赖反转：也叫依赖倒置原则，主要用来指导框架层面的设计<br><br>KISS原则<br>尽量保持简单，（怎么做）<br>保持代码可读、可维护的重要手段<br>实现：不要用同事可能不懂的技术、不要重复造轮子、不要过度设计<br><br>YAGNI原则<br>你不会用到它，核心思想是不要过度设计（要不要做）<br>不要去设计当前用不到的功能，不要去编写当前用不到的代码<br><br>DRY原则<br>不要重复自己，实现逻辑重复、功能语义重复、代码执行重复<br>有可能代码相似度很高，但语义不重复，也不违反DRY原则<br>有可能代码不重复，但语义重复，也违反DRY原则<br><br><br>LOD原则<br>高内聚低耦合<br>高内聚：指导类本身的设计，相近的功能应该放在同一个类中，不相近的功能不要放在同一个类中<br>松耦合：指导类与类之间依赖关系的设计，一个类的代码改动，不会或者很少导致依赖类代码的改动<br><br>迪米特法则<br>不该有直接依赖关系的类之间不要有依赖，有依赖关系的类之间只依赖必要的接口不依赖具体实现<br>减少类之间的耦合，让类越独立越好<br><br>四、规范和重构<br>为什么重构Why<br>重构是保持代码质量持续处于可控状态的有效手段<br><br>重构什么what<br>大规模重构，是使用设计原则、设计思想和设计模式，对分层结构、模块划分、解耦、梳理类之间的交互关系、抽象复用组件等<br>小规模重构，主要是应用编码规范对类、函数进行重构，规范命名、注释、修正函数参数过多，消除超大类、提取重复代码等<br><br>什么时候重构when<br>持续重构<br><br>怎么重构how<br>大规模重构，影响范围大，需要有组织有计划的进行，分阶段完成<br>小规模重构，影响范围小，在日常的迭代中持续进行","like_count":0},{"had_liked":false,"id":309250,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1630021885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630021885","product_id":100039001,"comment_content":"总结的特别好就是。梳理了下，还记得百分五十左右，其他细节还是没掌握牢靠。","like_count":0},{"had_liked":false,"id":308218,"user_name":"一叉树","can_delete":false,"product_type":"c1","uid":1623117,"ip_address":"","ucode":"BFC984403ACD1F","user_header":"https://static001.geekbang.org/account/avatar/00/18/c4/4d/85014aab.jpg","comment_is_top":false,"comment_ctime":1629454643,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629454643","product_id":100039001,"comment_content":"如果没有学过前面的课程，直接看这篇，感觉说的都是空洞无物流水账的废话。踏实跟着课程一节节学到这一课，看到这篇总结，简直感动到要跪下来了。<br><br>本篇真的是精华篇。<br><br>每一个原则、每一个规范，背后都有实际的考量，都经过时间的检验，都值得深刻理解和实际应用。","like_count":0},{"had_liked":false,"id":306905,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628769908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628769908","product_id":100039001,"comment_content":"刚开始懵懵懂懂，只是有一些印象，但是很多没有实践过，个人理解不深","like_count":0},{"had_liked":false,"id":302510,"user_name":"Jiantao","can_delete":false,"product_type":"c1","uid":1163504,"ip_address":"","ucode":"444580EC5EF109","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/f0/1aabc056.jpg","comment_is_top":false,"comment_ctime":1626245415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626245415","product_id":100039001,"comment_content":"学到很多，看到栏主的总结往往能产生共鸣和发现自己代码中的设计缺陷。","like_count":0},{"had_liked":false,"id":300508,"user_name":"砥砺奋进","can_delete":false,"product_type":"c1","uid":1608643,"ip_address":"","ucode":"2F12FD10F749AD","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/c3/bf036d99.jpg","comment_is_top":false,"comment_ctime":1625201229,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1625201229","product_id":100039001,"comment_content":"项目中实施有了依据","like_count":0},{"had_liked":false,"id":298477,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1624148842,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1624148842","product_id":100039001,"comment_content":"基于接口而非实现我还是没理解进去好处，相对文中所讲，基于实现也是调用的方法，只要方法名字，入参不变，内部实现变更也是无法影响到外部调用的","like_count":0,"discussions":[{"author":{"id":1724021,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4e/75/4c040060.jpg","nickname":"W","note":"","ucode":"2F9FA347E982F9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576227,"discussion_content":"南京有家公司叫智器云，就是这技术氛围。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655361740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294849,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1622109045,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1622109045","product_id":100039001,"comment_content":"用思维导图的方式记录下，为什么，是什么，怎么做。实战的话就绘制图，多看多练，为什么要这样做？","like_count":0},{"had_liked":false,"id":292207,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1948762,"ip_address":"","ucode":"61A3ACB1D14CAF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/bc/5a/855160ca.jpg","comment_is_top":false,"comment_ctime":1620721327,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1620721327","product_id":100039001,"comment_content":"到作者说的第一阶段，受益匪浅。","like_count":0},{"had_liked":false,"id":283143,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1615586123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615586123","product_id":100039001,"comment_content":"赞！老师不仅是写程序的高手，同时也是传道解惑的高手，很难得！谢谢老师。","like_count":0},{"had_liked":false,"id":276909,"user_name":"snake","can_delete":false,"product_type":"c1","uid":2347137,"ip_address":"","ucode":"47BFFE4D048156","user_header":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","comment_is_top":false,"comment_ctime":1612172667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612172667","product_id":100039001,"comment_content":"自己看的时候也断断续续做了导图和笔记，但是看到这篇总结还是给大佬跪下了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501928,"discussion_content":"我也没进过！😔，注定平庸！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595465543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2766883,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/38/23/4556004f.jpg","nickname":"包包","note":"","ucode":"C840BB4E46C6FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554830,"discussion_content":"瞎说，GOOGLE已经是尖子班里的尖子班了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646635790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":501928,"ip_address":""},"score":554830,"extra":""}]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588605,"discussion_content":"非也 ，进“尖子生班”不是优秀的充要条件，只是个必要条件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663896508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276804,"user_name":"火影.海诺","can_delete":false,"product_type":"c1","uid":2091565,"ip_address":"","ucode":"34729AFEE93B6D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ea/2d/34cb8e0a.jpg","comment_is_top":false,"comment_ctime":1612141720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612141720","product_id":100039001,"comment_content":"好像学了很多，却什么都没记住，明显的一个情况是：之前总觉得自己的代码以及同事的代码总有一种说不出的不协调感……学到这里最大的收获就是知道代码差在哪里了……并敢于着手重构","like_count":0},{"had_liked":false,"id":269622,"user_name":"吴月月鸟","can_delete":false,"product_type":"c1","uid":1115064,"ip_address":"","ucode":"2F068EDD166B49","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/b8/961a5342.jpg","comment_is_top":false,"comment_ctime":1608718162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608718162","product_id":100039001,"comment_content":"给跪了，前面自己做的xmind在这儿对比发现做xmind的差距。","like_count":0},{"had_liked":false,"id":261279,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605256438,"is_pvip":false,"replies":[{"id":"96151","content":"������","user_name":"作者回复","comment_id":261279,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701502,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605256438","product_id":100039001,"comment_content":"这节课把之前的内容都串起来了，并且靠后的章节与前面的一些设计规则表达的意思基本大同小异，把这些规则多应用就能形成自己的编码风格。","like_count":0},{"had_liked":false,"id":253699,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1602835444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602835444","product_id":100039001,"comment_content":"唉,将学到了用到项目中了,以前很多违反设计规范的,二刷记笔记,争取不止会用,还得会说","like_count":0},{"had_liked":false,"id":248156,"user_name":"大雁小鱼","can_delete":false,"product_type":"c1","uid":1101017,"ip_address":"","ucode":"44090581E59FDA","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/d9/20d4f7c2.jpg","comment_is_top":false,"comment_ctime":1600045658,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1600045658","product_id":100039001,"comment_content":"在之后开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。 ——这其实在实际开发中是做不到的，测试会跳出来说：“你为什么把以前的这段代码都修改了，这次迭代不需要改这段逻辑的”。为了少测试，最终开发妥协了，把代码还原回去了","like_count":0,"discussions":[{"author":{"id":2160379,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f6/fb/6c0e4ec5.jpg","nickname":"一林","note":"","ucode":"DBDE2FD654A5D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312006,"discussion_content":"争哥之前的文章有讲到，应该把重构当成开发流程的一部分，把它放到开发流程的某一步，所以测试人员就有责任去测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602560164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2160379,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f6/fb/6c0e4ec5.jpg","nickname":"一林","note":"","ucode":"DBDE2FD654A5D8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312856,"discussion_content":"测试并不一定认同,测试只想减少自己的工作,所有这些东西团队得达成共识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602835580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312006,"ip_address":""},"score":312856,"extra":""}]}]},{"had_liked":false,"id":247834,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1599881908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599881908","product_id":100039001,"comment_content":"真的很棒，重新再慢慢的品，争哥真棒","like_count":0},{"had_liked":false,"id":246915,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599529898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599529898","product_id":100039001,"comment_content":"想到一个事情，好的代码其实依托于好的骨架和架构的，就和“梦想改造家一样”，房子布局好，室内设计相对更轻松一点，房子布局奇葩，当然也可以有好的室内设计，但是付出的精力是巨大的。","like_count":0},{"had_liked":false,"id":235479,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1595056446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595056446","product_id":100039001,"comment_content":"总结复习的很是时候，好老师~","like_count":0},{"had_liked":false,"id":232441,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1594004638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594004638","product_id":100039001,"comment_content":"感觉每一阶段知识点之后来一篇这种总结性的文章非常好，也很有必要！","like_count":0},{"had_liked":false,"id":232429,"user_name":"被过去推开","can_delete":false,"product_type":"c1","uid":1276690,"ip_address":"","ucode":"8B4F34FE93FD5B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Cib5umA0W17N9pichI08pnrXAExdbyh7AVzH4nEhD6KN3FXuELk4LJJuqUPPD7xmIy9nq5Hjbgnzic7sVZG5BKiaUQ/132","comment_is_top":false,"comment_ctime":1594002437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594002437","product_id":100039001,"comment_content":"温故而知新，对学习真的有用。看完这篇文章后，对面向对象编程的理解更深入了。关于开闭原则，由于公司做的业务追求快猛糙，对这个原则没有多少理解。但是今天猛然想起 spring 的一个扩展点，spring的后置处理器就是运用了开闭原则，能够以最小的代码改动增加新功能。","like_count":0},{"had_liked":false,"id":231665,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1593744652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593744652","product_id":100039001,"comment_content":"PS:<br>--why: 为什么需要<br>--how: 怎么做<br><br>1.SOLID 原则：SRP 单一职责原则<br>--why：<br>  如果职责太多，七大姑八大姨都找上门来（各处被调用），一旦要改下功能（产品经理经常这么干），散布在各个文件的代码都要改。每出现一次，都要理解该出的上下文，工作量巨大，累不说，还容易出BUG。<br>  如果职责少，语义明确，返回的结果、错误简单明了，虽然它也可能在各处调用，但因为功能少，犯错的可能性就越少。<br>  相比之下，还是单一点好。<br><br>--how:<br>  &gt;&gt; 类中的代码行数、函数或者属性过多；<br>  &gt;&gt; 类依赖的其他类过多或者依赖类的其他类过多；<br>  &gt;&gt; 私有方法过多；<br>  &gt;&gt; 比较难给类起一个合适的名字；<br>  &gt;&gt; 类中大量的方法都是集中操作类中的某几个属性。<br><br>2.SOLID 原则：OCP 开闭原则<br>--why：<br>  加法简单，修改更难&#47;麻烦。<br>  <br>--how:<br>  使用多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式。<br><br>3.SOLID 原则：LSP 里式替换原则<br>--why：<br>  如果不遵循里氏替换原则，会使得多态的代码有更多的不确定性，容易出BUG。比如父类申请内存失败返回空，调用者判断为空则不操作指针；如果子类申请失败还瞎返回一个指针（虽然不太可能这样做），调用者去操作了，程序就偏离正常线路了。<br>  <br>--how:<br>  父类定义了函数的“约定”（或者叫协议），那子类可以改变函数的内部实现逻辑，但不能改变函数的原有“约定”。这里的“约定”包括：函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明。<br><br>4.SOLID 原则：ISP 接口隔离原则<br>--why：<br>  不要到处留情，不该给的也给了，总有一天有人掉坑里或者拿这个说事。比如不知情的同事调用了不该调的接口，如果不给出去，别人都调不了。<br>  <br>--how:<br>  能不给的尽量不给。","like_count":0},{"had_liked":false,"id":231156,"user_name":"向往的生活","can_delete":false,"product_type":"c1","uid":1397298,"ip_address":"","ucode":"0E8DB45357820F","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","comment_is_top":false,"comment_ctime":1593594798,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593594798","product_id":100039001,"comment_content":"这个总结太可以啦","like_count":0},{"had_liked":false,"id":226861,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1592219399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592219399","product_id":100039001,"comment_content":"【设计模式笔记38】这篇算是前面得精华总结，对于写出好代码一定要落地，形成团队内的开发规范，这也让知识得到传播和学习，形成统一的共识才能提高开发效率。对制定开发规范提供了很好参考，完全可以时不时拿出来翻一翻","like_count":0},{"had_liked":false,"id":222210,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590717286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590717286","product_id":100039001,"comment_content":"抽象是数学上讲的从特殊到一般的思维过程。把很多对象分类后，抽出出共性，如抽象类的属性和方法、接口。就是表示很多对象共有的属性和方法。使用接口和抽象类就是由一般到特殊的数学思维过程。<br>抽象类的属性，所有特殊类共有的属性，抽象类的方法，所有特殊类共有的方法，抽象函数，所有类共有的动作，但是具体怎么做不一样。接口方法更抽象更一般，直接没有任何实现，全由特殊类来实现。<br>抽象实现了特殊类的规范的统一。","like_count":0},{"had_liked":false,"id":222207,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590716709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590716709","product_id":100039001,"comment_content":"封装是通过函数访问数据：get、set函数来访问数据，实现数据访问保护，让数据的获取和设置实现逻辑拦截，如在set中编写数据校验逻辑，在get中提供输出格式转换。<br>封装是控制看见性： private、protected、public 。<br>封装是隐藏实现细节：为调用者提供简单的调用接口。把数据和动作封装为类、把动作封装为函数、把类封装为包。","like_count":0},{"had_liked":false,"id":212010,"user_name":"lukenc","can_delete":false,"product_type":"c1","uid":1312141,"ip_address":"","ucode":"E6B490234AF7F4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqX0cy8OczW1RMyENicKdXsEvhkOqlMCiczR4OS7532ZVCq5lCMVM9ctIOSx9df9O46MLbPzXUKspiaw/132","comment_is_top":false,"comment_ctime":1588045807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588045807","product_id":100039001,"comment_content":"偷懒了一阵 现在看完这篇文章 又捡回来了 <br>我觉得这之前的应该就是内功了。期待接下来的招数教学 哈哈哈哈","like_count":0},{"had_liked":false,"id":207624,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1587121452,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587121452","product_id":100039001,"comment_content":"干货满满，重要的是需要在工作中不断消化实践，形成自己的开发规范，最难的还是坚持","like_count":0},{"had_liked":false,"id":206702,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1586918583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586918583","product_id":100039001,"comment_content":"2. 通过这节课程的回顾，大部分的内容还有印象，对已经忘记的内容进行复习进行了加强<br>3. 记忆比较模糊的内容有：少用继承多用组合（继承主要有三个作用：表示 is-a 关系、支持多态特性、代码复用。而这三个作用都可以通过组合、接口、委托三个技术手段来达成）；复习了SOLID原则（对于其中包含的五种原则可以通过案例的方式进行记忆和回顾效率比较高，即，碰到每个原则的时候联想一下课程中列举的例子）；对于如何编写容易测试的代码进行回顾（其中的一条：函数中不要使用参数来做代码执行逻辑的控制。遇到这种情况可以将一个函数拆分成多个函数）<br>4. 好多内容不是看一遍就行了，即使是当时理解了，还存在大脑遗忘的问题，要经常性的复习和代码实战","like_count":0},{"had_liked":false,"id":203969,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586313776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586313776","product_id":100039001,"comment_content":"是应该做一下思维脑图<br><br>总结的内容，我都有印象，然后也能回忆大部分，看了我学习的还是不错的，可能要归功于我写留言的原因。感谢王争老师，虽然留言都很水，还是给我精选，增加了我的自信心。<br><br>我打算这两天做一下思维脑图来，重新学习一下。","like_count":0},{"had_liked":false,"id":202126,"user_name":"Geek_1d80ef","can_delete":false,"product_type":"c1","uid":1725343,"ip_address":"","ucode":"2695F603FE80E0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep0icNIl01hycNvkTKHFtLMcxtJ8Nr48KOicUBA7jdbOjx41l1pkoic3l0Xftib4RsgeIkPV4y4cA6MPw/132","comment_is_top":false,"comment_ctime":1585905838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585905838","product_id":100039001,"comment_content":"特意把五张总结图片打印出来，没事看看","like_count":0},{"had_liked":false,"id":197182,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1876764,"ip_address":"","ucode":"BAD602A7270306","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a3/1c/f947dd97.jpg","comment_is_top":false,"comment_ctime":1585362124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585362124","product_id":100039001,"comment_content":"打卡..","like_count":0},{"had_liked":false,"id":196670,"user_name":"infancy","can_delete":false,"product_type":"c1","uid":1063322,"ip_address":"","ucode":"F06708E5EA8D0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7icFGrBnjMnulAdrghQ72y5wGQKbztaMN7a3mzzwMBrzwz5pxdU7zib17d29niapsP0uGeYpsX2BJ5gMUjLuCnMUA/132","comment_is_top":false,"comment_ctime":1585301668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585301668","product_id":100039001,"comment_content":"刷了几遍，改变了我对软件设计的认知","like_count":0},{"had_liked":false,"id":194556,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1585066908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585066908","product_id":100039001,"comment_content":"承上启下，温故知新的一节。不少知识点是学校已经学过的，不少知识点也是工作中已经用到的，经过系统梳理后，脉络更加清晰明了。<br>现在担心的是代码过渡设计了，再加上本来就有看到不完美的代码就想做大重构的坏习惯……时间紧任务重的时候还是应该追求完成而不是完美的。","like_count":0},{"had_liked":false,"id":188537,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1584365828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584365828","product_id":100039001,"comment_content":"其中大部分都有印象，且能在代码检视时，关注到别人写的问题<br>但是ISP接口隔离原则有点记不清了，因此进行了重点回顾和学习。<br>接口隔离原则指的是客户端不应该强迫依赖他不需要的借口，比如如果一个函数中，一些调用者只需要一个函数的部分功能，则把函数再拆分成更细粒度的函数。","like_count":0},{"had_liked":false,"id":186249,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583807440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583807440","product_id":100039001,"comment_content":"掌握程度应该在1根2的之间。需要多加练习，和回顾理论知识。<br><br>以后要每写一个类，一行代码，就要反复推敲，是否可读，可扩展，可维护","like_count":0},{"had_liked":false,"id":185497,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1583593739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583593739","product_id":100039001,"comment_content":"打卡，收获良多。补充了很多理论知识。","like_count":0},{"had_liked":false,"id":185456,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583586285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583586285","product_id":100039001,"comment_content":"第一部分结束，准备下面的学习","like_count":0},{"had_liked":false,"id":184471,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583324234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583324234","product_id":100039001,"comment_content":"在听了老师这么多堂课之后，然后也在每一堂的课后讨论当中尽量留下自己的身影，现在在编写某个模块或者是写一些新代码的时候，会不由自觉的去想着如何去利用这些设计原则和思想去设计它，<br>在看到不好的代码时候也想着去顺手把它重构了，<br>但是仍然感觉学习过的时间很短，没有太深的印象,没有达到我想要的潜意识的思考，希望能够学完这个课程之后,有空的时候多回来翻翻几遍.","like_count":0},{"had_liked":false,"id":184176,"user_name":"一区","can_delete":false,"product_type":"c1","uid":1793770,"ip_address":"","ucode":"B5142A6276E490","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a2mRI7BYncHCL6QWfibe7g7MWc70fSsqQibu7o9PcHjicYwo5dSnAoUN75HDDRz4GXWJdpWw59yJsMwFv3t7zSiaJQ/132","comment_is_top":false,"comment_ctime":1583243344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583243344","product_id":100039001,"comment_content":"老师 有个问题，如果大量使用依赖注入来实现TDD，那其他调用者不就需要了解这个接口的内部实现了吗？","like_count":0},{"had_liked":false,"id":183544,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1583063212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583063212","product_id":100039001,"comment_content":"闭上眼睛也只能有个大概，不能完全清晰准确的形成整个大的框架，但是也能根据学到的知识思考现有代码中的问题，并且开展重构工作<br>纸上得来终觉浅，绝知此事要躬行。希望通过这种迭代式的方式逐渐的熟悉掌握，为我所用。","like_count":0},{"had_liked":false,"id":182728,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1181486,"ip_address":"","ucode":"E82C58AF2604ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/2e/878d3c92.jpg","comment_is_top":false,"comment_ctime":1582856628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582856628","product_id":100039001,"comment_content":"总结的很好，现在就觉得实践不够。","like_count":0},{"had_liked":false,"id":182206,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1582728844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582728844","product_id":100039001,"comment_content":"很棒，看的时候偶尔让我想起面试官问的相似的问题，哈哈","like_count":0},{"had_liked":false,"id":182076,"user_name":"沁塵","can_delete":false,"product_type":"c1","uid":1564002,"ip_address":"","ucode":"4AD780EF50882B","user_header":"https://static001.geekbang.org/account/avatar/00/17/dd/62/824e5e16.jpg","comment_is_top":false,"comment_ctime":1582703961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582703961","product_id":100039001,"comment_content":"分享一个心得：<br>看不懂、记不住不要紧，写上一两个项目，你且回过头来看它","like_count":0},{"had_liked":false,"id":180046,"user_name":"程晓擘","can_delete":false,"product_type":"c1","uid":1328354,"ip_address":"","ucode":"96986D5AE2B96C","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","comment_is_top":false,"comment_ctime":1582172239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582172239","product_id":100039001,"comment_content":"受益匪浅","like_count":0},{"had_liked":false,"id":178442,"user_name":"无名氏","can_delete":false,"product_type":"c1","uid":1001023,"ip_address":"","ucode":"D1F322E386430E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/3f/7825378a.jpg","comment_is_top":false,"comment_ctime":1581690577,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1581690577","product_id":100039001,"comment_content":"「KISS 原则中的“简单“”并不是以代码行数来考量的。」这句多了个引号。","like_count":0,"discussions":[{"author":{"id":1613665,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/61/c46b42f4.jpg","nickname":"talkyoung","note":"","ucode":"8D231FA9004B64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308868,"discussion_content":"。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601105158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177764,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1581494104,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581494104","product_id":100039001,"comment_content":"年前的课程帮我梳理了很多之前没有遇到过的方式，比如DDD这种，还有一些重构方面的实战；年后开始继续学习之后，看到这份总结，更加坚定了我刻意练习写更好代码的决心。<br><br>现在自己有的特点继续保持；对比这份精华总结，薄弱的部分跟上，这份课程对我来说就是 物有所值啦。","like_count":0},{"had_liked":false,"id":177581,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581428178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581428178","product_id":100039001,"comment_content":"这篇总结真的很棒，原来脑子里面还是形成不了结构。现在想起来就有开篇图的结构，知识点的话，看的时候还能想起来印象深刻的内容。还是需要自己绘制一下脑图加深印象。","like_count":0},{"had_liked":false,"id":176006,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1580909894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580909894","product_id":100039001,"comment_content":"打卡，现在是结合自己的理解记忆，好多细节都忘了，看着知识整理，能想起来些细节，最近写了个项目，结合专栏，优化重构","like_count":0},{"had_liked":false,"id":175953,"user_name":"RLH","can_delete":false,"product_type":"c1","uid":1524803,"ip_address":"","ucode":"44FE2D50EC7581","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/43/35ea4823.jpg","comment_is_top":false,"comment_ctime":1580891271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580891271","product_id":100039001,"comment_content":"这篇把完整知识总结了一遍，看来自己学的还不够透，很多知识都遗忘了，需要刻意练习～","like_count":0},{"had_liked":false,"id":175317,"user_name":"JamesPxy","can_delete":false,"product_type":"c1","uid":1320179,"ip_address":"","ucode":"558D707463589D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q2LT8JFWSghiaVbMMOkOkLnuibEqG2YOyEdCA5icEZH3Qpd9pL23mpzic9tWwyiciaBicE4YPMVnITOodulwG2SS75r2w/132","comment_is_top":false,"comment_ctime":1580653563,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580653563","product_id":100039001,"comment_content":"看了总结觉得很有必要复习一遍了，关键还是在于平常编码过程中的实践。","like_count":0},{"had_liked":false,"id":175125,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1580564984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580564984","product_id":100039001,"comment_content":"蓦然回首，发现原来已经学习了那么多的知识了，其实很多东西都是在日常工作中需要不断注意，思考，审视的内容，希望在以后的工作里，能够时刻提醒自己，注意代码质量，提高重构意识","like_count":0},{"had_liked":false,"id":174814,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580396767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580396767","product_id":100039001,"comment_content":"对于面向对象和设计原则的掌握程度要稍好一些, 对于单测,重构等章节学的不太认真.<br>感谢作者精心安排的课程,非常细,有作者自己的理解而不是洗书.<br>希望后面的具体设计模式会更精彩!","like_count":0},{"had_liked":false,"id":174738,"user_name":"Geek_27a248","can_delete":false,"product_type":"c1","uid":1542778,"ip_address":"","ucode":"6AC3AC42E6EEC9","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","comment_is_top":false,"comment_ctime":1580366773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580366773","product_id":100039001,"comment_content":"感觉差的好多，我感觉我现在还处在理解概念阶段，写代码时不能灵活使用","like_count":0},{"had_liked":false,"id":174685,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1580351216,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580351216","product_id":100039001,"comment_content":"需要长期练习，有切身体验能记住，没有的还是还给老师了。","like_count":0},{"had_liked":false,"id":174633,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1580303360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580303360","product_id":100039001,"comment_content":"今天学习了总结面向对象，设计原则，编码规范和重构相关的知识总结。<br>面向对象只是有一些概念更加熟悉了。<br>设计原则我觉得自己理解了。<br>编码规范和重构是我工作中一直在用的，这次看了专栏之后有了很多新的认识。<br>前面的课程要自己抽时间做个思维导图，争哥的导图做的很好，已经下载收藏。","like_count":0},{"had_liked":false,"id":174618,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1580297935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580297935","product_id":100039001,"comment_content":"基本是之前每篇的总结，读起来也较轻松，接下来需自己再总结一下。","like_count":0},{"had_liked":false,"id":174601,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580291184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580291184","product_id":100039001,"comment_content":"1.额。。刚好和这几天对这个专栏整理的xmind差不多。也建议大家自己写下xmind导图，对加深印象和理解很有帮助。串起来和零散的知识点，可记忆性和可理解性差很多。<br><br>2.很好奇怎么讲这些设计模式，期待再次被惊艳。我自己是扒spring对各种设计模式的应用后，才get到在什么场景用什么模式有什么好处这些点的。讲道理，单知道设计模式怎么实现，没太大用。因为没有结合应用就很容易忘记。知道却用不上，才是这块东西真正的难点。","like_count":0},{"had_liked":false,"id":174556,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580275317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580275317","product_id":100039001,"comment_content":"不同模块的掌握程度不一样：<br>1. 设计原则那块有些原则是只是有个印象，有些则是在项目中应用，整体上看这块还需要更多的复习和理解<br>2. 重构和编程规范这块在工作中一直持续在做，还不错<br>3. 面向对象部分也是有不错的知识结构，并且在工作中的项目里实践<br><br>在这门课程里收获的很多，最近在家宅着，准备再次从第一节课开始复习了🐶","like_count":0},{"had_liked":false,"id":174554,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1580274717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580274717","product_id":100039001,"comment_content":"有些具体的设计思想、原则概念性的问题有点含糊不清，不过现在写代码时会考虑代码的可读性、可维护、可扩展性等。真的很感谢老师出了这门课，之前每次写代码都纠结代码质量怎么保证，老师的这门课解答了我之前所有关于代码质量的疑问。","like_count":0},{"had_liked":false,"id":174548,"user_name":"六号先生117","can_delete":false,"product_type":"c1","uid":1005232,"ip_address":"","ucode":"F5AA9A6CE32EBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/b0/5f5ec445.jpg","comment_is_top":false,"comment_ctime":1580271279,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580271279","product_id":100039001,"comment_content":"老师真好，昨天正好开始复习，自己画思维导图，看到文中总结结构图真棒👍🏻","like_count":0},{"had_liked":false,"id":174545,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1580270332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580270332","product_id":100039001,"comment_content":"34分钟的音频,给力.不知不觉已经学习三个月了~","like_count":0},{"had_liked":false,"id":174544,"user_name":"Algo","can_delete":false,"product_type":"c1","uid":1119682,"ip_address":"","ucode":"D7B6D147F793E8","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/c2/cd8052c8.jpg","comment_is_top":false,"comment_ctime":1580269743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580269743","product_id":100039001,"comment_content":"打卡！ 前几天有自己将SOLID的内容总结一遍。今天更系统复习了第一遍。只是实际开发中怎样不会顾此失彼，全靠小跑重构么。","like_count":0}]}