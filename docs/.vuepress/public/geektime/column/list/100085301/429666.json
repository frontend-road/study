{"id":429666,"title":"26｜阶段实操（3）：构建一个简单的KV server-高级trait技巧","content":"<p>你好，我是陈天。</p><p>到现在，泛型的基础知识、具体如何使用以及设计理念，我们已经学得差不多了，也和函数作了类比帮助你理解，泛型就是数据结构的函数。</p><p>如果你觉得泛型难学，是因为它的抽象层级比较高，需要足够多的代码阅读和撰写的历练。所以，通过学习，现阶段你能够看懂包含泛型的代码就够了，至于使用，只能靠你自己在后续练习中不断体会总结。如果实在觉得不好懂，<strong>某种程度上说，你缺乏的不是泛型的能力，而是设计和架构的能力</strong>。</p><p>今天我们就用之前1.0版简易的 KV store 来历练一把，看看怎么把之前学到的知识融入代码中。</p><p>在<a href=\"https://time.geekbang.org/column/article/425001\"> 21 讲</a>、<a href=\"https://time.geekbang.org/column/article/425005\">22讲</a>中，我们已经完成了 KV store 的基本功能，但留了两个小尾巴：</p><ol>\n<li>Storage trait 的 get_iter() 方法没有实现；</li>\n<li>Service 的 execute() 方法里面还有一些 TODO，需要处理事件的通知。</li>\n</ol><p>我们一个个来解决。先看 get_iter() 方法。</p><h2>处理 Iterator</h2><p>在开始撰写代码之前，先把之前在 src/storage/mod.rs 里注掉的测试，加回来：</p><pre><code class=\"language-rust\">#[test]\nfn memtable_iter_should_work() {\n    let store = MemTable::new();\n    test_get_iter(store);\n}\n</code></pre><!-- [[[read_end]]] --><p>然后在 src/storge/memory.rs 里尝试实现它。</p><pre><code class=\"language-rust\">impl Storage for MemTable {\n    ...\n    fn get_iter(&amp;self, table: &amp;str) -&gt; Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt; {\n        // 使用 clone() 来获取 table 的 snapshot\n        let table = self.get_or_create_table(table).clone();\n        let iter = table\n            .iter()\n            .map(|v| Kvpair::new(v.key(), v.value().clone()));\n        Ok(Box::new(iter)) // &lt;-- 编译出错\n    }\n}\n</code></pre><p>很不幸的，编译器提示我们 Box::new(iter) 不行，“cannot return value referencing local variable <code>table</code>” 。这让人很不爽，究其原因，table.iter() 使用了 table 的引用，我们返回 iter，但 iter 引用了作为局部变量的 table，所以无法编译通过。</p><p><strong>此刻，我们需要有一个能够完全占有 table 的迭代器</strong>。Rust 标准库里提供了一个 trait IntoIterator，它可以把数据结构的所有权转移到 Iterator 中，看它的声明（<a href=\"https://doc.rust-lang.org/src/core/iter/traits/collect.rs.html#204-235\">代码</a>）：</p><pre><code class=\"language-rust\">pub trait IntoIterator {\n    type Item;\n    type IntoIter: Iterator&lt;Item = Self::Item&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter;\n}\n</code></pre><p>绝大多数的集合类数据结构都<a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html#implementors\">实现了它</a>。DashMap 也实现了它，所以我们可以用 table.into_iter() 把 table 的所有权转移给 iter：</p><pre><code class=\"language-rust\">impl Storage for MemTable {\n    ...\n    fn get_iter(&amp;self, table: &amp;str) -&gt; Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt; {\n        // 使用 clone() 来获取 table 的 snapshot\n        let table = self.get_or_create_table(table).clone();\n        let iter = table.into_iter().map(|data| data.into());\n        Ok(Box::new(iter))\n    }\n}\n</code></pre><p>这里又遇到了数据转换，从 DashMap 中 iterate 出来的值 (String, Value) 需要转换成 Kvpair，我们依旧用 into() 来完成这件事。为此，需要为 Kvpair 实现这个简单的 From<t> trait：</t></p><pre><code class=\"language-rust\">impl From&lt;(String, Value)&gt; for Kvpair {\n    fn from(data: (String, Value)) -&gt; Self {\n        Kvpair::new(data.0, data.1)\n    }\n}\n</code></pre><p>这两段代码都放在 src/storage/memory.rs 下。</p><p>Bingo！这个代码可以编译通过。现在如果运行 cargo test 进行测试的话，对 get_iter() 接口的测试也能通过。</p><p>虽然这个代码可以通过测试，并且本身也非常精简，我们<strong>还是有必要思考一下，如果以后想为更多的 data store 实现 Storage trait，都会怎样处理 get_iter() 方法</strong>？</p><p>我们会：</p><ol>\n<li>拿到一个关于某个 table 下的拥有所有权的 Iterator</li>\n<li>对 Iterator 做 map</li>\n<li>将 map 出来的每个 item 转换成 Kvpair</li>\n</ol><p>这里的第 2 步对于每个 Storage trait 的 get_iter() 方法的实现来说，都是相同的。有没有可能把它封装起来呢？使得 Storage trait 的实现者只需要提供它们自己的拥有所有权的 Iterator，并对 Iterator 里的 Item 类型提供 Into&lt;Kvpair&gt; ？</p><p>来尝试一下，在 src/storage/mod.rs 中，构建一个 StorageIter，并实现 Iterator trait：</p><pre><code class=\"language-rust\">/// 提供 Storage iterator，这样 trait 的实现者只需要\n/// 把它们的 iterator 提供给 StorageIter，然后它们保证\n/// next() 传出的类型实现了 Into&lt;Kvpair&gt; 即可\npub struct StorageIter&lt;T&gt; {\n    data: T,\n}\n\nimpl&lt;T&gt; StorageIter&lt;T&gt; {\n    pub fn new(data: T) -&gt; Self {\n        Self { data }\n    }\n}\n\nimpl&lt;T&gt; Iterator for StorageIter&lt;T&gt;\nwhere\n    T: Iterator,\n    T::Item: Into&lt;Kvpair&gt;,\n{\n    type Item = Kvpair;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.data.next().map(|v| v.into())\n    }\n}\n</code></pre><p>这样，我们在 src/storage/memory.rs 里对 get_iter() 的实现，就可以直接使用 StorageIter 了。不过，还要为 DashMap 的 Iterator 每次调用 next() 得到的值 (String, Value) ，做个到 Kvpair 的转换：</p><pre><code class=\"language-rust\">impl Storage for MemTable {\n    ...\n    fn get_iter(&amp;self, table: &amp;str) -&gt; Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt; {\n    \t\t// 使用 clone() 来获取 table 的 snapshot\n          let table = self.get_or_create_table(table).clone();\n          let iter = StorageIter::new(table.into_iter()); // 这行改掉了\n          Ok(Box::new(iter))\n      }\n}\n</code></pre><p>我们可以再次使用 cargo test 测试，同样通过！</p><p>如果回顾刚才撰写的代码，你可能会哑然一笑：我辛辛苦苦又写了 20 行代码，创建了一个新的数据结构，就是为了 get_iter() 方法里的一行代码改得更漂亮？何苦呢？</p><p>的确，在这个 KV server 的例子里，这样的抽象收益不大。但是，如果刚才那个步骤不是 3 步，而是 5 步/10 步，其中大量的步骤都是相同的，也就是说，我们每实现一个新的 store，就要撰写相同的代码逻辑，那么，这个抽象就非常有必要了。</p><h2>支持事件通知</h2><p>好，我们再来看事件通知。在 src/service/mod.rs 中（以下代码，如无特殊声明，都是在 src/service/mod.rs 中），目前的 execute() 方法还有很多 TODO 需要解决：</p><pre><code class=\"language-rust\">pub fn execute(&amp;self, cmd: CommandRequest) -&gt; CommandResponse {\n    debug!(\"Got request: {:?}\", cmd);\n    // TODO: 发送 on_received 事件\n    let res = dispatch(cmd, &amp;self.inner.store);\n    debug!(\"Executed response: {:?}\", res);\n    // TODO: 发送 on_executed 事件\n\n    res\n}\n</code></pre><p>为了解决这些 TODO，我们需要提供事件通知的机制：</p><ol>\n<li>在创建 Service 时，注册相应的事件处理函数；</li>\n<li>在 execute() 方法执行时，做相应的事件通知，使得注册的事件处理函数可以得到执行。</li>\n</ol><p>先看事件处理函数如何注册。</p><p>如果想要能够注册，那么倒推也就是，Service/ServiceInner 数据结构就需要有地方能够承载事件注册函数。可以尝试着把它加在 ServiceInner 结构里：</p><pre><code class=\"language-rust\">/// Service 内部数据结构\npub struct ServiceInner&lt;Store&gt; {\n    store: Store,\n    on_received: Vec&lt;fn(&amp;CommandRequest)&gt;,\n    on_executed: Vec&lt;fn(&amp;CommandResponse)&gt;,\n    on_before_send: Vec&lt;fn(&amp;mut CommandResponse)&gt;,\n    on_after_send: Vec&lt;fn()&gt;,\n}\n</code></pre><p>按照 21 讲的设计，我们提供了四个事件：</p><ol>\n<li>on_received：当服务器收到 CommandRequest 时触发；</li>\n<li>on_executed：当服务器处理完 CommandRequest 得到 CommandResponse 时触发；</li>\n<li>on_before_send：在服务器发送 CommandResponse 之前触发。注意这个接口提供的是 &amp;mut CommandResponse，这样事件的处理者可以根据需要，在发送前，修改 CommandResponse。</li>\n<li>on_after_send：在服务器发送完 CommandResponse 后触发。</li>\n</ol><p>在撰写事件注册的代码之前，还是先写个测试，从使用者的角度，考虑如何进行注册：</p><pre><code class=\"language-rust\">#[test]\nfn event_registration_should_work() {\n    fn b(cmd: &amp;CommandRequest) {\n        info!(\"Got {:?}\", cmd);\n    }\n    fn c(res: &amp;CommandResponse) {\n        info!(\"{:?}\", res);\n    }\n    fn d(res: &amp;mut CommandResponse) {\n        res.status = StatusCode::CREATED.as_u16() as _;\n    }\n    fn e() {\n        info!(\"Data is sent\");\n    }\n\n    let service: Service = ServiceInner::new(MemTable::default())\n        .fn_received(|_: &amp;CommandRequest| {})\n        .fn_received(b)\n        .fn_executed(c)\n        .fn_before_send(d)\n        .fn_after_send(e)\n        .into();\n\n    let res = service.execute(CommandRequest::new_hset(\"t1\", \"k1\", \"v1\".into()));\n    assert_eq!(res.status, StatusCode::CREATED.as_u16() as _);\n    assert_eq!(res.message, \"\");\n    assert_eq!(res.values, vec![Value::default()]);\n}\n</code></pre><p>从测试代码中可以看到，我们希望通过 ServiceInner 结构，不断调用 fn_xxx 方法，为 ServiceInner 注册相应的事件处理函数；添加完毕后，通过 into() 方法，我们再把 ServiceInner 转换成 Service。这是一个经典的<strong>构造者模式（Builder Pattern）</strong>，在很多 Rust 代码中，都能看到它的身影。</p><p>那么，诸如 fn_received() 这样的方法有什么魔力呢？它为什么可以一路做链式调用呢？答案很简单，它把 self 的所有权拿过来，处理完之后，再返回 self。所以，我们继续添加如下代码：</p><pre><code class=\"language-rust\">impl&lt;Store: Storage&gt; ServiceInner&lt;Store&gt; {\n    pub fn new(store: Store) -&gt; Self {\n        Self {\n            store,\n            on_received: Vec::new(),\n            on_executed: Vec::new(),\n            on_before_send: Vec::new(),\n            on_after_send: Vec::new(),\n        }\n    }\n\n    pub fn fn_received(mut self, f: fn(&amp;CommandRequest)) -&gt; Self {\n        self.on_received.push(f);\n        self\n    }\n\n    pub fn fn_executed(mut self, f: fn(&amp;CommandResponse)) -&gt; Self {\n        self.on_executed.push(f);\n        self\n    }\n\n    pub fn fn_before_send(mut self, f: fn(&amp;mut CommandResponse)) -&gt; Self {\n        self.on_before_send.push(f);\n        self\n    }\n\n    pub fn fn_after_send(mut self, f: fn()) -&gt; Self {\n        self.on_after_send.push(f);\n        self\n    }\n}\n</code></pre><p>这样处理之后呢，Service 之前的 new() 方法就没有必要存在了，可以把它删除。同时，我们需要为 Service 类型提供一个 From&lt;ServiceInner&gt; 的实现：</p><pre><code class=\"language-rust\">impl&lt;Store: Storage&gt; From&lt;ServiceInner&lt;Store&gt;&gt; for Service&lt;Store&gt; {\n    fn from(inner: ServiceInner&lt;Store&gt;) -&gt; Self {\n        Self {\n            inner: Arc::new(inner),\n        }\n    }\n}\n</code></pre><p>目前，代码中几处使用了 Service::new() 的地方需要改成使用 ServiceInner::new()，比如：</p><pre><code class=\"language-rust\">// 我们需要一个 service 结构至少包含 Storage\n// let service = Service::new(MemTable::default());\nlet service: Service = ServiceInner::new(MemTable::default()).into();\n</code></pre><p>全部改动完成后，代码可以编译通过。</p><p>然而，如果运行 cargo test，新加的测试会失败：</p><pre><code class=\"language-plain\">test service::tests::event_registration_should_work ... FAILED\n</code></pre><p>这是因为，我们虽然完成了事件处理函数的注册，但现在还没有发事件通知。<br>\n另外因为我们的事件包括不可变事件（比如 on_received）和可变事件（比如 on_before_send），所以事件通知需要把二者分开。来定义两个 trait：Notify 和 NotifyMut：</p><pre><code class=\"language-rust\">/// 事件通知（不可变事件）\npub trait Notify&lt;Arg&gt; {\n    fn notify(&amp;self, arg: &amp;Arg);\n}\n\n/// 事件通知（可变事件）\npub trait NotifyMut&lt;Arg&gt; {\n    fn notify(&amp;self, arg: &amp;mut Arg);\n}\n</code></pre><p>这两个 trait 是泛型 trait，其中的 Arg 参数，对应事件注册函数里的 arg，比如：</p><pre><code class=\"language-plain\">fn(&amp;CommandRequest);\n</code></pre><p>由此，我们可以特地为 Vec&lt;fn(&amp;Arg)&gt; 和 Vec&lt;fn(&amp;mut Arg)&gt; 实现事件处理，它们涵盖了目前支持的几种事件：</p><pre><code class=\"language-rust\">impl&lt;Arg&gt; Notify&lt;Arg&gt; for Vec&lt;fn(&amp;Arg)&gt; {\n    #[inline]\n    fn notify(&amp;self, arg: &amp;Arg) {\n        for f in self {\n            f(arg)\n        }\n    }\n}\n\nimpl&lt;Arg&gt; NotifyMut&lt;Arg&gt; for Vec&lt;fn(&amp;mut Arg)&gt; {\n\t#[inline]\n    fn notify(&amp;self, arg: &amp;mut Arg) {\n        for f in self {\n            f(arg)\n        }\n    }\n}\n</code></pre><p>Notify / NotifyMut trait 实现好之后，我们就可以修改 execute() 方法了：</p><pre><code class=\"language-rust\">impl&lt;Store: Storage&gt; Service&lt;Store&gt; {\n    pub fn execute(&amp;self, cmd: CommandRequest) -&gt; CommandResponse {\n        debug!(\"Got request: {:?}\", cmd);\n        self.inner.on_received.notify(&amp;cmd);\n        let mut res = dispatch(cmd, &amp;self.inner.store);\n        debug!(\"Executed response: {:?}\", res);\n        self.inner.on_executed.notify(&amp;res);\n        self.inner.on_before_send.notify(&amp;mut res);\n        if !self.inner.on_before_send.is_empty() {\n            debug!(\"Modified response: {:?}\", res);\n        }\n\n        res\n    }\n}\n</code></pre><p>现在，相应的事件就可以被通知到相应的处理函数中了。这个通知机制目前还是同步的函数调用，未来如果需要，我们可以将其改成消息传递，进行异步处理。</p><p>好，现在测试应该可以工作了，cargo test 所有的测试都通过。</p><h2>为持久化数据库实现 Storage trait</h2><p>到目前为止，我们的 KV store 还都是一个在内存中的 KV store。一旦终止应用程序，用户存储的所有 key / value 都会消失。我们希望存储能够持久化。</p><p>一个方案是为 MemTable 添加 WAL 和 disk snapshot 支持，让用户发送的所有涉及更新的命令都按顺序存储在磁盘上，同时定期做 snapshot，便于数据的快速恢复；另一个方案是使用已有的 KV store，比如 RocksDB，或者 <a href=\"https://github.com/spacejam/sled\">sled</a>。</p><p>RocksDB 是 Facebook 在 Google 的 levelDB 基础上开发的嵌入式 KV store，用 C++ 编写，而 sled 是 Rust 社区里涌现的优秀的 KV store，对标 RocksDB。二者功能很类似，从演示的角度，sled 使用起来更简单，更加适合今天的内容，如果在生产环境中使用，RocksDB 更加合适，因为它在各种复杂的生产环境中经历了千锤百炼。</p><p>所以，我们今天就尝试为 sled 实现 Storage trait，让它能够适配我们的 KV server。</p><p>首先在 Cargo.toml 里引入 sled：</p><pre><code class=\"language-rust\">sled = \"0.34\" # sled db\n</code></pre><p>然后创建 src/storage/sleddb.rs，并添加如下代码：</p><pre><code class=\"language-rust\">use sled::{Db, IVec};\nuse std::{convert::TryInto, path::Path, str};\n\nuse crate::{KvError, Kvpair, Storage, StorageIter, Value};\n\n#[derive(Debug)]\npub struct SledDb(Db);\n\nimpl SledDb {\n    pub fn new(path: impl AsRef&lt;Path&gt;) -&gt; Self {\n        Self(sled::open(path).unwrap())\n    }\n\n    // 在 sleddb 里，因为它可以 scan_prefix，我们用 prefix\n    // 来模拟一个 table。当然，还可以用其它方案。\n    fn get_full_key(table: &amp;str, key: &amp;str) -&gt; String {\n        format!(\"{}:{}\", table, key)\n    }\n\n    // 遍历 table 的 key 时，我们直接把 prefix: 当成 table\n    fn get_table_prefix(table: &amp;str) -&gt; String {\n        format!(\"{}:\", table)\n    }\n}\n\n/// 把 Option&lt;Result&lt;T, E&gt;&gt; flip 成 Result&lt;Option&lt;T&gt;, E&gt;\n/// 从这个函数里，你可以看到函数式编程的优雅\nfn flip&lt;T, E&gt;(x: Option&lt;Result&lt;T, E&gt;&gt;) -&gt; Result&lt;Option&lt;T&gt;, E&gt; {\n    x.map_or(Ok(None), |v| v.map(Some))\n}\n\nimpl Storage for SledDb {\n    fn get(&amp;self, table: &amp;str, key: &amp;str) -&gt; Result&lt;Option&lt;Value&gt;, KvError&gt; {\n        let name = SledDb::get_full_key(table, key);\n        let result = self.0.get(name.as_bytes())?.map(|v| v.as_ref().try_into());\n        flip(result)\n    }\n\n    fn set(&amp;self, table: &amp;str, key: String, value: Value) -&gt; Result&lt;Option&lt;Value&gt;, KvError&gt; {\n        let name = SledDb::get_full_key(table, &amp;key);\n        let data: Vec&lt;u8&gt; = value.try_into()?;\n\n        let result = self.0.insert(name, data)?.map(|v| v.as_ref().try_into());\n        flip(result)\n    }\n\n    fn contains(&amp;self, table: &amp;str, key: &amp;str) -&gt; Result&lt;bool, KvError&gt; {\n        let name = SledDb::get_full_key(table, &amp;key);\n\n        Ok(self.0.contains_key(name)?)\n    }\n\n    fn del(&amp;self, table: &amp;str, key: &amp;str) -&gt; Result&lt;Option&lt;Value&gt;, KvError&gt; {\n        let name = SledDb::get_full_key(table, &amp;key);\n\n        let result = self.0.remove(name)?.map(|v| v.as_ref().try_into());\n        flip(result)\n    }\n\n    fn get_all(&amp;self, table: &amp;str) -&gt; Result&lt;Vec&lt;Kvpair&gt;, KvError&gt; {\n        let prefix = SledDb::get_table_prefix(table);\n        let result = self.0.scan_prefix(prefix).map(|v| v.into()).collect();\n\n        Ok(result)\n    }\n\n    fn get_iter(&amp;self, table: &amp;str) -&gt; Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt; {\n        let prefix = SledDb::get_table_prefix(table);\n        let iter = StorageIter::new(self.0.scan_prefix(prefix));\n        Ok(Box::new(iter))\n    }\n}\n\nimpl From&lt;Result&lt;(IVec, IVec), sled::Error&gt;&gt; for Kvpair {\n    fn from(v: Result&lt;(IVec, IVec), sled::Error&gt;) -&gt; Self {\n        match v {\n            Ok((k, v)) =&gt; match v.as_ref().try_into() {\n                Ok(v) =&gt; Kvpair::new(ivec_to_key(k.as_ref()), v),\n                Err(_) =&gt; Kvpair::default(),\n            },\n            _ =&gt; Kvpair::default(),\n        }\n    }\n}\n\nfn ivec_to_key(ivec: &amp;[u8]) -&gt; &amp;str {\n    let s = str::from_utf8(ivec).unwrap();\n    let mut iter = s.split(\":\");\n    iter.next();\n    iter.next().unwrap()\n}\n</code></pre><p>这段代码主要就是在实现 Storage trait。每个方法都很简单，就是在 sled 提供的功能上增加了一次封装。如果你对代码中某个调用有疑虑，可以参考 sled 的文档。</p><p>在 src/storage/mod.rs 里引入 sleddb，我们就可以加上相关的测试，测试新的 Storage 实现啦：</p><pre><code class=\"language-rust\">mod sleddb;\n\npub use sleddb::SledDb;\n\n#[cfg(test)]\nmod tests {\n    use tempfile::tempdir;\n\n    use super::*;\n\n    ...\n\n    #[test]\n    fn sleddb_basic_interface_should_work() {\n        let dir = tempdir().unwrap();\n        let store = SledDb::new(dir);\n        test_basi_interface(store);\n    }\n\n    #[test]\n    fn sleddb_get_all_should_work() {\n        let dir = tempdir().unwrap();\n        let store = SledDb::new(dir);\n        test_get_all(store);\n    }\n\n    #[test]\n    fn sleddb_iter_should_work() {\n        let dir = tempdir().unwrap();\n        let store = SledDb::new(dir);\n        test_get_iter(store);\n    }\n}\n</code></pre><p>因为 SledDb 创建时需要指定一个目录，所以要在测试中使用 <a href=\"https://github.com/Stebalien/tempfile\">tempfile</a> 库，它能让文件资源在测试结束时被回收。我们在 Cargo.toml 中引入它：</p><pre><code class=\"language-rust\">[dev-dependencies]\n...\ntempfile = \"3\" # 处理临时目录和临时文件\n...\n</code></pre><p>代码目前就可以编译通过了。如果你运行 <code>cargo test</code> 测试，会发现所有测试都正常通过！</p><h2>构建新的 KV server</h2><p>现在完成了 SledDb 和事件通知相关的实现，我们可以尝试构建支持事件通知，并且使用 SledDb 的 KV server 了。把 examples/server.rs 拷贝出 examples/server_with_sled.rs，然后修改 <code>let service</code> 那一行：</p><pre><code class=\"language-rust\">// let service: Service = ServiceInner::new(MemTable::new()).into();\nlet service: Service&lt;SledDb&gt; = ServiceInner::new(SledDb::new(\"/tmp/kvserver\"))\n    .fn_before_send(|res| match res.message.as_ref() {\n        \"\" =&gt; res.message = \"altered. Original message is empty.\".into(),\n        s =&gt; res.message = format!(\"altered: {}\", s),\n    })\n    .into();\n</code></pre><p>当然，需要引入 SledDb 让编译通过。你看，只需要在创建 KV server 时使用 SledDb，就可以实现 data store 的切换，未来还可以进一步通过配置文件，来选择使用什么样的 store。非常方便。</p><p>新的 examples/server_with_sled.rs 的完整的代码：</p><pre><code class=\"language-rust\">use anyhow::Result;\nuse async_prost::AsyncProstStream;\nuse futures::prelude::*;\nuse kv1::{CommandRequest, CommandResponse, Service, ServiceInner, SledDb};\nuse tokio::net::TcpListener;\nuse tracing::info;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    tracing_subscriber::fmt::init();\n    let service: Service&lt;SledDb&gt; = ServiceInner::new(SledDb::new(\"/tmp/kvserver\"))\n        .fn_before_send(|res| match res.message.as_ref() {\n            \"\" =&gt; res.message = \"altered. Original message is empty.\".into(),\n            s =&gt; res.message = format!(\"altered: {}\", s),\n        })\n        .into();\n    let addr = \"127.0.0.1:9527\";\n    let listener = TcpListener::bind(addr).await?;\n    info!(\"Start listening on {}\", addr);\n    loop {\n        let (stream, addr) = listener.accept().await?;\n        info!(\"Client {:?} connected\", addr);\n        let svc = service.clone();\n        tokio::spawn(async move {\n            let mut stream =\n                AsyncProstStream::&lt;_, CommandRequest, CommandResponse, _&gt;::from(stream).for_async();\n            while let Some(Ok(cmd)) = stream.next().await {\n                info!(\"Got a new command: {:?}\", cmd);\n                let res = svc.execute(cmd);\n                stream.send(res).await.unwrap();\n            }\n            info!(\"Client {:?} disconnected\", addr);\n        });\n    }\n}\n</code></pre><p>它和之前的 server 几乎一样，只有 11 行生成 service 的代码应用了新的 storage，并且引入了事件通知。</p><p>完成之后，我们可以打开一个命令行窗口，运行：<code>RUST_LOG=info cargo run --example server_with_sled --quiet</code>。然后在另一个命令行窗口，运行：<code>RUST_LOG=info cargo run --example client --quiet</code>。</p><p>此时，服务器和客户端都收到了彼此的请求和响应，并且处理正常。如果你停掉服务器，再次运行，然后再运行客户端，会发现，客户端在尝试 HSET 时得到了服务器旧的值，我们的新版 KV server 可以对数据进行持久化了。</p><p>此外，如果你注意看 client 的日志，会发现原本应该是空字符串的 messag 包含了 “altered. Original message is empty.”：</p><pre><code class=\"language-bash\">❯ RUST_LOG=info cargo run --example client --quiet\nSep 23 22:09:12.215  INFO client: Got response CommandResponse { status: 200, message: \"altered. Original message is empty.\", values: [Value { value: Some(String(\"world\")) }], pairs: [] }\n</code></pre><p>这是因为，我们的服务器注册了 fn_before_send 的事件通知，对返回的数据做了修改。未来我们可以用这些事件做很多事情，比如监控数据的发送，甚至写 WAL。</p><h2>小结</h2><p>今天的课程我们进一步认识到了 trait 的威力。当为系统设计了合理的 trait ，整个系统的可扩展性就大大增强，之后在添加新的功能的时候，并不需要改动多少已有的代码。</p><p><strong>在使用 trait 做抽象时，我们要衡量，这么做的好处是什么，它未来可以为实现者带来什么帮助</strong>。就像我们撰写的 StorageIter，它实现了 Iterator trait，并封装了 map 的处理逻辑，让这个公共的步骤可以在 Storage trait 中复用。</p><p>除此之外，也进一步熟悉了如何为带泛型参数的数据结构实现 trait。我们不仅可以为具体的数据结构实现 trait，也可以为更笼统的泛型参数实现 trait。除了文中这个例子：</p><pre><code class=\"language-rust\">impl&lt;Arg&gt; Notify&lt;Arg&gt; for Vec&lt;fn(&amp;Arg)&gt; {\n    #[inline]\n    fn notify(&amp;self, arg: &amp;Arg) {\n        for f in self {\n            f(arg)\n        }\n    }\n}\n</code></pre><p>其实之前还见到过：</p><pre><code class=\"language-rust\">impl&lt;T, U&gt; Into&lt;U&gt; for T where U: From&lt;T&gt;,\n{\n    fn into(self) -&gt; U {\n        U::from(self)\n    }\n}\n</code></pre><p>也是一样的道理。</p><p>如果结合这一讲和第 <a href=\"https://time.geekbang.org/column/article/425001\">21</a>、<a href=\"https://time.geekbang.org/column/article/425005\">22</a>讲，你会发现，我们目前完成了一个功能比较完整的 KV server 的核心逻辑，但是，整体的代码似乎没有太多复杂的生命周期标注，或者太过抽象的泛型结构。</p><p>是的，别看我们在介绍 Rust 的基础知识时，扎的比较深，但是大多数写代码的时候，并不会用到那么深的知识。Rust 编译器会尽最大的努力，让你的代码简单。如果你用 clippy 这样的 linter 的话，它还会进一步给你提一些建议，让你的代码更加简单。</p><p>那么，为什么我们还要讲那么深入呢？</p><p>这是因为我们在写代码的时候不可避免地要引入第三方库，你也看到了，<strong>在写这个项目的时候用了不少依赖，当你使用这些库的时候，又不可避免地要阅读一些它们的源码，而这些源码，可能有各种各样复杂的写法</strong>。这也是为什么在开头我会说，现阶段能看懂包含泛型的代码就可以了。</p><p>深入地了解 Rust 的基础知识，可以帮我们更快更清晰地阅读源码，而更快更清晰地读懂别人的源码，又可以更快地帮助我们用好别人的库，从而写好我们的代码。</p><h3>思考题</h3><ol>\n<li>如果你在 21 讲已经完成了 KV server 其它的 6 个命令，可以对照着我在 <a href=\"https://github.com/tyrchen/geektime-rust/tree/master/21_kv\">GitHub repo</a> 里的代码和测试，看看你写的结果。</li>\n<li>我们的 Notify 和 NotifyMut trait 目前只能做到通知，无法告诉 execute 提前结束处理并直接给客户端返回错误。试着修改一下这两个 trait，让它具备提前结束整个 pipeline  的能力。</li>\n<li><a href=\"http://rocksdb.org/\">RocksDB</a> 是一个非常优秀的 KV DB，它有对应的 <a href=\"https://github.com/rust-rocksdb/rust-rocksdb\">rust 库</a>。尝试着为 RocksDB 实现 Storage trait，然后写个 example server  应用它。</li>\n</ol><p>感谢你的收听，你已经完成了Rust学习的第26次打卡，如果你觉得有收获，也欢迎你分享给身边的朋友，邀他一起讨论。我们下节课见~</p>","neighbors":{"left":{"article_title":"加餐｜Rust2021版次问世了！","id":429665},"right":{"article_title":"27｜生态系统：有哪些常有的Rust库可以为我所用？","id":429673}},"comments":[{"had_liked":false,"id":327121,"user_name":"losuika","can_delete":false,"product_type":"c1","uid":1218666,"ip_address":"","ucode":"19685B1B00A4F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/6a/3ddeca6e.jpg","comment_is_top":false,"comment_ctime":1639925038,"is_pvip":false,"replies":[{"id":"120818","content":"嗯，确实如此。非常棒！","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642311202,"ip_address":"","comment_id":327121,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5934892334","product_id":100085301,"comment_content":"rocksdb 的实现 https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=1f4b28ff3fcbdb421a0743d47c7b75c3，rocksdb 需要开启 feature multi-threaded-cf ，然后感觉 trait 约束是不是也要改下？需要带上生命周期，rocksdb 库似乎没有办法拿到所有权的迭代器","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546461,"discussion_content":"嗯，确实如此。非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642311202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2620407,"avatar":"https://static001.geekbang.org/account/avatar/00/27/fb/f7/88ab6f83.jpg","nickname":"进击的Lancelot","note":"","ucode":"3BCC355801DC61","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589278,"discussion_content":"我有一个问题，sled 的 scan_prefix 返回的是 iter 类型，并没有明显地调用 into_iter 来转换，那为什么程序能够正常编译不报错？iter 类型的 next 的接受者参数类型是 self 的引用，一样没有所有权呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664616187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318426,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1635298010,"is_pvip":false,"replies":[{"id":"116578","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636642392,"ip_address":"","comment_id":318426,"utype":1}],"discussion_count":1,"race_medal":2,"score":"5930265306","product_id":100085301,"comment_content":"哈 昨天终于完成 21，22，今天继续","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529235,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636642392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348258,"user_name":"bestgopher","can_delete":false,"product_type":"c1","uid":2254917,"ip_address":"","ucode":"D89735C8CA9C6E","user_header":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","comment_is_top":false,"comment_ctime":1654908421,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1654908421","product_id":100085301,"comment_content":"我们服务是异步的，但是sled读取文件没看到异步操作，这样是否有问题呢？","like_count":0},{"had_liked":false,"id":342243,"user_name":"Alvin","can_delete":false,"product_type":"c1","uid":1331242,"ip_address":"","ucode":"C557A1ECD5E99B","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/2a/96b38944.jpg","comment_is_top":false,"comment_ctime":1650123382,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1650123382","product_id":100085301,"comment_content":"老师 跟着课程的代码实现过程发现最后持久化存储这边会报个错<br> the trait `From&lt;&amp;[u8]&gt;` is not implemented for `abi::Value`","like_count":0,"discussions":[{"author":{"id":1120409,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/99/f27997e1.jpg","nickname":"志林","note":"","ucode":"6F27616857A46F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571830,"discussion_content":"参考 这一章节的 github repo，对比 src/pb/mod.rs 的代码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652425733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2648083,"avatar":"https://static001.geekbang.org/account/avatar/00/28/68/13/452e9331.jpg","nickname":"太南喬 Serendipity!","note":"","ucode":"F1DA88F7E8B2F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575700,"discussion_content":"我也遇到了，自己實現一個 TryFrom&lt;&amp;[u8]&gt; for Value 滿足其需求吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655036719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330767,"user_name":"Geek_e2201d","can_delete":false,"product_type":"c1","uid":2744438,"ip_address":"","ucode":"0602920032AD1E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIVblkHYeYrgys7iaARHkicbYCZoibE1tJO0C6NEgw1f13RDgVABBgXDSFBzabLIUPNEPdxib1Ep5aYZg/132","comment_is_top":false,"comment_ctime":1642149420,"is_pvip":false,"replies":[{"id":"120680","content":"如果你使用 trait object，那么你的 service 定义就不需要用 Store trait bound 了，可以这样：<br>pub struct Service {<br>    inner: Arc&lt;ServiceInner&gt;,<br>    broadcaster: Arc&lt;Broadcaster&gt;,<br>}<br><br>pub struct ServiceInner {<br>    store: Box&lt;dyn Store&gt;,<br>    on_received: Vec&lt;fn(&amp;CommandRequest)&gt;,<br>    on_executed: Vec&lt;fn(&amp;CommandResponse)&gt;,<br>    on_before_send: Vec&lt;fn(&amp;mut CommandResponse)&gt;,<br>    on_after_send: Vec&lt;fn()&gt;,<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642292009,"ip_address":"","comment_id":330767,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642149420","product_id":100085301,"comment_content":"陈老师，我尝试把MemTable与SledDb整合到一个Server中，通过config参数来动态选择MemTable还是SledDb。尝试了很久都失败了，编译器提示错误为:<br>50 | let resp = service_cloned.execute(msg);<br> |    ^^^^^^^ method cannot be called on `Service&lt;Box&lt;dyn Storage&gt;&gt;` due to unsatisfied trait bounds<br>...<br> = note: the following trait bounds were not satisfied:<br>     `Box&lt;dyn Storage&gt;: Storage`<br><br>我的疑问是Box&lt;dyn Storage&gt;为什么不满足Storage呢？<br><br>server.rs代码如下: <br>use anyhow::Result;<br>use async_prost::AsyncProstStream;<br>use futures::prelude::*;<br>use kv::{CommandRequest, CommandResponse, MemTable, SledDb, Service, Storage};<br>use tokio::net::TcpListener;<br>use kv::service::ServiceInner;<br>use tracing::info;<br>use clap::{Parser, ArgEnum};<br><br>#[derive(Parser)]<br>#[clap(name = &quot;kv server&quot;)]<br>struct Cli {<br>​#[clap(arg_enum, long, short, default_value=&quot;memory&quot;)]<br>​storage: StorageType,<br><br>​#[clap(long, short=&#39;d&#39;, default_value=&quot;.&#47;sled&quot;)]<br>​sled_dir: String,<br>}<br><br>#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ArgEnum)]<br>enum StorageType {<br>​Memory,<br>​Sled,<br>}<br><br>#[tokio::main]<br>async fn main() -&gt; Result&lt;()&gt; {<br>​tracing_subscriber::fmt::init();<br>​let args: Cli = Cli::parse();<br><br>​let addr = &quot;127.0.0.1:9527&quot;;<br>​let listener = TcpListener::bind(addr).await?;<br>​info!(&quot;Start listening on {}&quot;, addr);<br><br>​let db : Box&lt;dyn Storage&gt; = match args.storage {<br>  ​StorageType::Memory =&gt; Box::new(MemTable::default()),<br>  ​StorageType::Sled =&gt; Box::new(SledDb::new(args.sled_dir)),<br>​};<br><br>​let service: Service&lt;Box&lt;dyn Storage&gt;&gt; = ServiceInner::new(db).into();<br>​loop {<br> ​let (stream, addr) = listener.accept().await?;<br> ​info!(&quot;Client {:?} connected&quot;, addr);<br> ​let service_cloned = service.clone();<br> ​tokio::spawn(async move {<br>  ​let mut stream =<br>   ​AsyncProstStream::&lt;_, CommandRequest, CommandResponse, _&gt;::from(stream).for_async();<br>  ​while let Some(Ok(msg)) = stream.next().await {<br>   ​info!(&quot;Got a new command: {:?}&quot;, msg);<br>   ​let resp = service_cloned.execute(msg);<br>   ​info!(&quot;Response: {:?}&quot;, resp);<br>   ​stream.send(resp).await.unwrap();<br>  ​}<br>  ​info!(&quot;Client {:?} disconnected&quot;, addr);<br> ​});<br>​}","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546289,"discussion_content":"如果你使用 trait object，那么你的 service 定义就不需要用 Store trait bound 了，可以这样：\npub struct Service {\n    inner: Arc&lt;ServiceInner&gt;,\n    broadcaster: Arc&lt;Broadcaster&gt;,\n}\n\npub struct ServiceInner {\n    store: Box&lt;dyn Store&gt;,\n    on_received: Vec&lt;fn(&amp;CommandRequest)&gt;,\n    on_executed: Vec&lt;fn(&amp;CommandResponse)&gt;,\n    on_before_send: Vec&lt;fn(&amp;mut CommandResponse)&gt;,\n    on_after_send: Vec&lt;fn()&gt;,\n}","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642292009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2744438,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIVblkHYeYrgys7iaARHkicbYCZoibE1tJO0C6NEgw1f13RDgVABBgXDSFBzabLIUPNEPdxib1Ep5aYZg/132","nickname":"Geek_e2201d","note":"","ucode":"0602920032AD1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546226,"discussion_content":"经过编译器痛苦的搏斗之后，我忽然意识到，使用Service&lt;Store&gt;是为了实现编译期多态，而使用trait object是为了实现运行期多态，那么我为什么一定要去实现 Service&lt;Box&lt;dyn Storage&gt;&gt;这种集编译期多态与运行期多态于一体的怪胎呢？引入trait object以后，范型就没有保留的价值了，因此用下面这种最简单的结构体就足矣。\n\n/// Service 数据结构\npub struct Service {\n    inner: Arc&lt;ServiceInner&gt;,\n}\n/// Service 内部数据结构\npub struct ServiceInner {\n    store: Box&lt;dyn Storage&gt;,\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642239435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328575,"user_name":"无常","can_delete":false,"product_type":"c1","uid":2718207,"ip_address":"","ucode":"4473913FA4B181","user_header":"https://static001.geekbang.org/account/avatar/00/29/79/ff/1dc5e2f3.jpg","comment_is_top":false,"comment_ctime":1640778300,"is_pvip":false,"replies":[{"id":"120772","content":"可以看看 Fundamentals of software architecture","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642309436,"ip_address":"","comment_id":328575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640778300","product_id":100085301,"comment_content":"请问老师，设计和架构应该如何学习，有什么推荐的资料吗？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546411,"discussion_content":"可以看看 Fundamentals of software architecture","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642309436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327063,"user_name":"losuika","can_delete":false,"product_type":"c1","uid":1218666,"ip_address":"","ucode":"19685B1B00A4F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/6a/3ddeca6e.jpg","comment_is_top":false,"comment_ctime":1639897363,"is_pvip":false,"replies":[{"id":"118979","content":"对","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639961401,"ip_address":"","comment_id":327063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639897363","product_id":100085301,"comment_content":"Option 有个 transpose ，可以直接 Option&lt;Result&gt; 到 Result&lt;Option&gt;","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540092,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639961401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323474,"user_name":"dva","can_delete":false,"product_type":"c1","uid":2101988,"ip_address":"","ucode":"EE27DAFCBF198D","user_header":"https://static001.geekbang.org/account/avatar/00/20/12/e4/57ade29a.jpg","comment_is_top":false,"comment_ctime":1637919707,"is_pvip":false,"replies":[{"id":"118886","content":"👍<br><br>第二题可以看 github repo 下这章的代码","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639850261,"ip_address":"","comment_id":323474,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1637919707","product_id":100085301,"comment_content":"第二题我想到的是，不过这样要改注册函数，看起来怪怪的，不知道老师的方法是什么<br>pub trait Notify1&lt;Arg,E&gt;{<br>    fn notify(&amp;self,arg:&amp;Arg)-&gt;Option&lt;E&gt;;<br>}<br><br>impl &lt;Arg,E&gt;Notify1&lt;Arg,E&gt;for Vec&lt;fn(&amp;Arg)-&gt;Option&lt;E&gt;&gt; {<br>    fn notify(&amp;self, arg: &amp;Arg) -&gt; Option&lt;E&gt; {<br>        for f in self{<br>            match f(arg){<br>                Some(e)=&gt; return Some(e),<br>                _=&gt;{},<br>            }<br>        }<br>        None<br>    }<br>}<br><br>第三题和老师写的sleddb差不多，直接加了一些TryFrom，中间遇到没有装llvm clang的错误 “error: failed to run custom build command for `librocksdb-sys ...” 还有起名字 rocksdb和包名冲突。写这个扩展有个非常深的体会就是，编译器提示真好。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539847,"discussion_content":"👍\n\n第二题可以看 github repo 下这章的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639850261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2620407,"avatar":"https://static001.geekbang.org/account/avatar/00/27/fb/f7/88ab6f83.jpg","nickname":"进击的Lancelot","note":"","ucode":"3BCC355801DC61","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589280,"discussion_content":"同学，是否可以分享一下你关于 rocksdb 的实现，rocksdb 版本的实现中，你是如何解决 get_iter 的实现，rocksdb 似乎无法获得带有所有权的迭代器，除了改接口的约束，似乎没有啥别的好方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664617664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}