{"id":595679,"title":"01｜结构梳理：大并发下，你的数据库表可能成为性能隐患","content":"<p>你好，我是徐长龙，欢迎进入第一章节的学习。</p><p>这一章我们主要讲解怎么对读多写少的系统进行高并发优化，我会拿用户中心作为例子，带你来看改造的几个要点。</p><p>用户中心是一个典型的读多写少系统，可以说我们大部分的系统都属于这种类型，而这类系统通过缓存就能获得很好的性能提升。并且在流量增大后，用户中心通常是系统改造中第一个要优化的模块，因为它常常和多个系统重度耦合，所以梳理这个模块对整个系统后续的高并发改造非常重要。</p><p>今天这节课，我会带你对<strong>读多写少</strong>的用户中心做数据整理优化，这会让数据更容易缓存。数据梳理是一个很重要的技巧，任何老系统在做高并发改造时都建议先做一次表的梳理。</p><p>因为老系统在使用数据库的时候存在很多问题，比如实体表字段过多、表查询维度和用途多样、表之间关系混乱且存在m:n情况……这些问题会让缓存改造十分困难，严重拖慢改造进度。</p><p>如果我们从数据结构出发，先对一些场景进行改造，然后再去做缓存，会让之后的改造变得简单很多。所以先<strong>梳理数据库结构，再对系统进行高并发改造是很有帮助的</strong>。</p><p>这节课我会给你讲几个具体的规律和思路，帮助你快速判断当前的表结构是否适用于高并发场景，方便后续的系统升级和改造。</p><h2>精简数据会有更好的性能</h2><!-- [[[read_end]]] --><p>为了方便讨论，我先对用户中心做一些简单介绍，如图：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/d5/6bb44e4d9becb9c088a20f1ab73e87d5.jpg?wh=3900x2762\" alt=\"\" title=\"用户中心功能\"></p><p>用户中心的主要功能是维护用户信息、用户权限和登录状态，它保存的数据大部分都属于<strong>读多写少的数据。</strong>用户中心常见的优化方式主要是将用户中心和业务彻底拆开，不再与业务耦合，并适当增加缓存来提高系统性能。</p><p>我举一个简单的例子：当时整表内有接近2000万的账号信息，我对表的功能和字段进行了业务解耦和精简，让用户中心的账户表里只会保留用户登陆所需的账号、密码：</p><pre><code class=\"language-sql\">CREATE TABLE `account` (\n&nbsp; `id` int(10) NOT NULL AUTO_INCREMENT,\n&nbsp; `account` char(32) COLLATE utf8mb4_unicode_ci NOT NULL,\n&nbsp; `password` char(32) COLLATE utf8mb4_unicode_ci NOT NULL,\n&nbsp; `salt` char(16) COLLATE utf8mb4_unicode_ci NOT NULL,\n&nbsp; `status` tinyint(3) NOT NULL DEFAULT '0',\n&nbsp; `update_time` int(10) NOT NULL,\n&nbsp; `create_time` int(10) NOT NULL,\n&nbsp; PRIMARY KEY (`id`),\n&nbsp; UNIQUE KEY `login_account` (`account`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n</code></pre><p>我们知道数据库是系统的核心，如果它缓慢，那么我们所有的业务都会受它影响，我们的服务很少能超过核心数据库的性能上限。而我们减少账号表字段的核心在于，长度小的数据在吞吐、查询、传输上都会很快，也会更好管理和缓存。</p><p>精简后的表拥有更少的字段，对应的业务用途也会比较单纯。其业务主要功能就是检测用户登陆账号密码是否正确，除此之外平时不会有其他访问，也不会被用于其他范围查询上。可想而知这种表的性能一定极好，虽然存储两千万账号，但是整体表现很不错。</p><p>不过你要注意，<strong>精简数据量虽然能换来更好的响应速度，但不提倡过度设计</strong>。因为表字段如果缺少冗余会导致业务实现更为繁琐，比如账户表如果把昵称和头像删减掉，我们每次登录就需要多读取一次数据库，并且需要一直关注账户表的缓存同步更新；但如果我们在账户表中保留用户昵称和头像，在登陆验证后直接就可以继续其他业务逻辑了，无需再查询一次数据库。</p><p>所以你看，有些查询往往会因为精简一两个字段就多查一次数据库，并且还要考虑缓存同步问题，实在是得不偿失，因此我们要在“更多的字段”和“更少的职能”之间找到平衡。</p><h2>数据的归类及深入整理</h2><p>除了通过精简表的职能来提高表的性能和维护性外，我们还可以针对不同类型的表做不同方向的缓存优化，如下图用户中心表例子：</p><p><img src=\"https://static001.geekbang.org/resource/image/36/9e/36083d93bc124396074021894dda0f9e.jpg?wh=1920x1360\" alt=\"图片\" title=\"一个用户中心的表关系\"></p><p>数据主要有四种：实体对象主表、辅助查询表、实体关系和历史数据，不同类型的数据所对应的缓存策略是不同的，如果我们将一些职能拆分不清楚的数据硬放在缓存中，使用的时候就会碰到很多烧脑的问题。</p><p>我之前就碰到过这样的错误做法——将用户来访记录这种持续增长的操作历史放到缓存里，这个记录的用途是统计有多少好友来访、有多少陌生人来访，但它同时保存着和用户是否是好友的标志。这也就意味着，一旦用户关系发生变化，这些历史数据就需要同步更新，否则里面的好友关系就“过时”了。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/16/3336e6c06ca0c331671354667b53e516.jpg?wh=3900x2762\" alt=\"\" title=\"来访记录\"></p><p>将历史记录和需要实时更新的好友状态混在一起，显然不合理。如果我们做归类梳理的话，应该拆分成三个职能表，分别进行管理：</p><ul>\n<li>历史记录表，不做缓存，仅展示最近几条，极端情况临时缓存；</li>\n<li>好友关系（缓存关系，用于统计有几个好友）；</li>\n<li>来访统计数字（临时缓存）。</li>\n</ul><p>明白了数据归类处理的重要性后，我们接下来分别看看如何对上述四种类型的数据做缓存优化。</p><h3>数据实体表</h3><p>先看一下用户账号表，这个表是一个实体表，实体表一般会作为主表 ，它的一行数据代表一个实体，每个实体都<strong>拥有一个独立且唯一的ID作为标识</strong>。其中，“实体”代表一个抽象的事物，具体的字段表示的是当前实体实时的状态属性。</p><p>这个ID对于高并发环境下的缓存很重要，用户登录后就需要用自己账户的ID直接查找到对应的订单、昵称头像和好友列表信息。如果我们的业务都是通过这样的方式查找，性能肯定很好，并且很适合做长期缓存。</p><p>但是业务除了按ID查找外，还有一些需要通过组合条件查询的，比如：</p><ul>\n<li>在7月4日下单购买耳机的订单有哪些？</li>\n<li>天津的用户里有多少新注册的用户？有多少老用户？</li>\n<li>昨天是否有用户名前缀是rick账户注册？</li>\n</ul><p><strong>这种根据条件查询统计的数据是不太容易做缓存的</strong>，因为高并发服务缓存的数据通常是能够快速通过Hash直接匹配的数据，而这种带条件查询统计的数据很容易出现不一致、数据量不确定导致的性能不稳定等问题，并且如果涉及的数据出现变化，我们很难通过数据确定同步更新哪些缓存。</p><p>因此，这类数据只适合存在关系数据库或提前预置计算好结果放在缓存中直接使用，做定期更新。</p><p>除了组合条件查询不好缓存外，像 count() 、sum() 等对数据进行实时计算也有更新不及时的问题，同样只能定期缓存汇总结果，不能频繁查询。所以，我们应该在后续的开发过程中尽量避免使用数据库做计算。</p><p>回到刚才的话题，我们继续讨论常见的数据实体表的设计。其实这类表是针对<strong>业务的主要查询需求</strong>而设计的，如果我们没有按照这个用途来查询表的时候，性能往往会很差。</p><p>比如前面那个用于账户登录的表，当我们拿它查询用户昵称中是否有“极客”两个字的时候，需要做很多额外的工作，需要对“用户昵称”这个字段增加索引，同时这种like查询会扫描全表数据进行计算。</p><p>如果这种查询的频率比较高，就会严重影响其他用户的登陆，而且新增的昵称索引还会额外降低当前表插入数据的性能，这也是为什么我们的后台系统往往会单独分出一个从库，做特殊索引。</p><p>一般来说，高并发用缓存来优化读取的性能时，缓存保存的基本都是实体数据。那常见的方法是先通过“key前缀 + 实体ID”获取数据（比如user_info_9527），然后通过一些缓存中的关联关系再获取指定数据，比如我们通过ID就可以直接获取用户好友关系key，并且拿到用户的好友ID列表。通过类似的方式，我们可以在Redis中实现用户常见的关联查询操作。</p><p>总体来说，实体数据是我们业务的主要承载体，当我们找到实体主体的时候，就可以根据这个主体在缓存中查到所有和它有关联的数据，来服务用户。现在我们来稍微总结一下，我们整理实体表的核心思路主要有以下几点：</p><ul>\n<li>精简数据总长度；</li>\n<li>减少表承担的业务职能；</li>\n<li>减少统计计算查询；</li>\n<li>实体数据更适合放在缓存当中；</li>\n<li>尽量让实体能够通过ID或关系方式查找；</li>\n<li>减少实时条件筛选方式的对外服务。</li>\n</ul><p>下面我们继续来看另外三种表结构，你会发现它们不太适合放在缓存中，因为维护它们的一致性很麻烦。</p><h3><strong>实体辅助表</strong></h3><p>为了精简数据且方便管理，我们经常会根据<strong>不同用途</strong>对主表拆分，常见的方式是做<strong>纵向表拆分</strong>。</p><p><strong>纵向表拆分</strong>的目的一般有两个，一个是<strong>把使用频率不高的数据摘出来。</strong>常见主表字段很多，经过拆分，可以精简它的职能，而辅助表的主键通常会保持和主表一致或通过记录ID进行关联，它们之间的常见关系为1:1。</p><p>而放到辅助表的数据，一般是主要业务查询中不会使用的数据，这些数据只有在极个别的场景下才会取出使用，比如用户账号表为主体用于做用户登陆使用，而辅助信息表保存家庭住址、省份、微信、邮编等平时不会展示的信息。</p><p><strong>辅助表的另一个用途是辅助查询，当原有业务数据结构不能满足其他维度的实体查询时，可以通过辅助表来实现</strong>。</p><p>比如有一个表是以“教师”为主体设计的，每次业务都会根据“当前教师ID+条件”来查询学生及班级数据，但从学生的角度使用系统时，需要高频率以“学生和班级”为基础查询教师数据时，就只能先查出 “学生ID”或“班级ID”，然后才能查找出老师ID”，这样不仅不方便，而且还很低效，这时候就可以把学生和班级的数据拆分出来，额外做一个辅助表包含所有详细信息，方便这种查询。</p><p>另外，我还要提醒一下，因为拆分的辅助表会和主体出现1:n甚至是m:n的数据关系，所以我们要定期地对数据整理核对，通过这个方式保证我们冗余数据的同步和完整。</p><p>不过，非1:1数据关系的辅助表维护起来并不容易，因为它容易出现数据不一致或延迟的情况，甚至在有些场景下，还需要刷新所有相关关系的缓存，既耗时又耗力。如果这些数据的核对通过脚本去定期执行，通过核对数据来找出数据差异，会更简单一些。</p><p>此外，在很多情况下我们为了提高查询效率，会把同一个数据冗余在多个表内，有数据更新时，我们需要同步更新冗余表和缓存的数据。</p><p>这里补充一点，行业里也会用一些开源搜索引擎，辅助我们做类似的关系业务查询，比如用ElasticSearch做商品检索、用OpenSearch做文章检索等。这种可横向扩容的服务能大大降低数据库查询压力，但唯一缺点就是很难实现数据的强一致性，需要人工检测、核对两个系统的数据。</p><h3>实体关系表</h3><p>接下来我们再谈谈实体之间的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/ec/03fcyy8bd0db6be60bf58ca3044c64ec.jpg?wh=1920x975\" alt=\"图片\"></p><p>在关系类型数据中，我强烈建议额外用一个关系表来记录实体间m:n的关联关系，这样两个实体就不用因为相互依赖关系，导致难以维护。</p><p>在对1:n或m:n关系的数据做缓存时，我们建议提前预估好可能参与的数据量，防止过大导致缓存缓慢。同时，通常保存这个关系在缓存中会把主体的ID作为key，在value内保存多个关联的ID来记录这两个数据的关联关系。而对于读取特别频繁的的业务缓存，才会考虑把数据先按关系组织好，然后整体缓存起来，来方便查询和使用。</p><p>需要注意的是，这种关联数据很容易出现多级依赖，会导致我们整理起来十分麻烦。当相关表或条件更新的时候，我们需要及时同步这些数据在缓存中的变化。所以，这种多级依赖关系很难在并发高的系统中维护，很多时候我们会降低一致性要求来满足业务的高并发情况。</p><p>总的来说，只有通过ID进行关联的数据的缓存是最容易管理的，其他的都需要特殊维护，我会在<a href=\"https://time.geekbang.org/column/article/596644\">下节课</a>给你介绍怎么维护缓存的更新和一致性，这里就不展开说了。</p><p>现在我们简单总结一下，到底什么样的数据适合做缓存。一般来说，根据ID能够精准匹配的数据实体很适合做缓存；而通过String、List或Set指令形成的有多条value的结构适合做（1:1、1:n、m:n）辅助或关系查询；最后还有一点要注意，虽然Hash结构很适合做实体表的属性和状态，但是Hgetall指令性能并不好，很容易让缓存卡顿，建议不要这样做。</p><p><img src=\"https://static001.geekbang.org/resource/image/09/06/09471e6416c414f815ce4500679c6706.jpg?wh=1920x1180\" alt=\"图片\"></p><h3>动作历史表</h3><p>介绍到这里，我们已经完成了大部分的整理，同时对于哪些数据可以做缓存，你也有了较深理解。为了加深你的印象，我再介绍一些反例。</p><p>一般来说，动作历史数据表记录的是数据实体的动作或状态变化过程，比如用户登陆日志、用户积分消费获取记录等。这类数据会随着时间不断增长，它们一般用于记录、展示最近信息，不建议用在业务的实时统计计算上。</p><p>你可能对我的这个建议存有疑虑，我再给你举个简单的例子。如果我们要从一个有2000万条记录的积分领取记录表中，检测某个用户领取的ID为15的商品个数：</p><pre><code class=\"language-sql\">CREATE TABLE `user_score_history` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `uid` int(10) NOT NULL DEFAULT '',\n  `action` varchar(32) NOT NULL,\n  `action_id` char(16) NOT NULL,\n  `status` tinyint(3) NOT NULL DEFAULT '0'\n  `extra` TEXT NOT NULL DEFAULT '',\n  `update_time` int(10) NOT NULL DEFAULT '0',\n  `create_time` int(10) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`),\n  KEY uid(`uid`,`action`),\n) ENGINE=InnoDB AUTO_INCREMENT=1 \nDEFAULT CHARSET=utf8mb4 \nCOLLATE=utf8mb4_unicode_ci;\n\nselect uid, count(*) as action_count, product_id \nfrom user_score_history \nwhere uid = 9527 and action = \"fetch_gift\" \nand action_id = 15 and status = 1\ngroup by uid,action_id\n</code></pre><p>不难看出，这个表数据量很大，记录了大量的实体动作操作历史，并且字段和索引不适合做这种查询。当我们要计算某个用户领取的ID为15的商品个数，只能先通过UID索引过滤数据，缩小范围。但是，这样筛选出的数据仍旧会很大。并且随着时间的推移，这个表的数据会不断增长，它的查询效率会逐渐降低。</p><p>所以，对于这种基于大量的数据统计后才能得到的结论数据，我不建议对外提供实时统计计算服务，因为这种查询会严重拖慢我们的数据库，影响服务稳定。即使使用缓存临时保存统计结果，这也属于临时方案，建议用其他的表去做类似的事情，比如实时查询领取记录表，效果会更好。</p><h2>总结</h2><p>在项目初期，数据表的职能设计往往都会比较简单，但随着时间的推移和业务的发展变化，表经过多次修改后，其使用方向和职能都会发生较大的变化，导致我们的系统越来越复杂。</p><p>所以，当流量超过数据库的承受能力需要做缓存改造时，我们建议先根据当前的业务逻辑对数据表进行职能归类，它能够帮你快速识别出，表中哪些字段和功能不适合在特定类型的表内使用，这会让数据在缓存中有更好的性价比。</p><p>一般来说，数据可分为四类：实体表、实体辅助表、关系表和历史表，而判断是否适合缓存的核心思路主要是以下几点：</p><ul>\n<li>能够通过ID快速匹配的实体，以及通过关系快速查询的数据，适合放在长期缓存当中；</li>\n<li>通过组合条件筛选统计的数据，也可以放到临时缓存，但是更新有延迟；</li>\n<li>数据增长量大或者跟设计初衷不一样的表数据，这种不适合、也不建议去做做缓存。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/40/ef/4016b016f88352742f917c163f0310ef.jpg?wh=1920x1360\" alt=\"图片\"></p><h2>思考题</h2><p>请你思考一下，用户邀请其他用户注册的记录，属于历史记录还是关系记录？</p><p>欢迎你在留言区与我交流讨论，我们下节课见！</p>","neighbors":{"left":{"article_title":"开篇词｜高并发系统，技术实力的试金石","id":595683},"right":{"article_title":"02｜缓存一致：读多写少时，如何解决数据更新缓存不同步？","id":596644}},"comments":[{"had_liked":false,"id":360646,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":true,"comment_ctime":1666710883,"is_pvip":false,"replies":[{"id":131206,"content":"你好，peter，感谢你的留言～由于问题比较多，我只能简略回答一下，后续我们的课程内容也会有相关的内容\nQ1：MySQL innoDB的2000w性能下降的说法，不一定准确，这个数字和单条数据大小以及数据量有直接关系，我们的数据是行存储并且和聚簇索引在一起，并且查询索引是B+Tree，如果这个服务用途不是马上要求返回结果，也是能用的，只不过响应变得缓慢了，但是大部分我们对外服务对响应速度和并发是有要求的。缓慢原因是我们的MySQL的索引是整棵树完整结构，并且我们的实际数据都在最深处保存，如果树深度过深（比如超过3层），查询时和回表时相应的我们查询对比的次数和io会变多，这会直接导致了性能会有下降，能够承担的服务请求量也相应下降，我们用MySQL不推荐这么多的原因核心在于，我们还是想让接口请求能够快速回复查询请求\nQ2:我想这个重点在于，业务怎么用这些数据，这决定了我们怎么分表，我们分表的目的主要是为了提高响应速度，我的建议是，如果是存储可以按取值范围拆分，这样可以简单做二分法查找确定数据服务在哪里，如果是用来对用户查询，那么在他的上层加上多层的缓存分片，类似LevelDB的层级，被查询的时候可以回源，当然这个是适合读多写少的场景，如果是其他场景，需要另外设计对应的方式，这些方式在后面都有介绍，敬请期待\n\n你的问题很有趣，期待你的下次留言！","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666751777,"ip_address":"北京","comment_id":360646,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"请教老师几个问题：\nQ1：MySQL一个表最大记录是2000万吗？\n多个地方看到一种说法：MySQL的表，记录数不要超过两千万，根据是什么？经验值吗？还是和MySQL的底层结构有关？\n\nQ2：亿级用户是分表吗？\n比如微信，十亿用户，要分成多个表吗？分的话，一般根据什么分？","like_count":10,"discussions":[{"author":{"id":2114740,"avatar":"https://static001.geekbang.org/account/avatar/00/20/44/b4/c9d7bdc8.jpg","nickname":"一只小皮球","note":"","ucode":"6B2BDA4D37B082","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591652,"discussion_content":"浅答一下q1 主要是与Mysql底层的b+树相关，如果表结构过大，B+树的每一页能承载的数据就会变少，就需要更多的页才存储数据，需要更多的页 则会带来的问题是 B+树的高度就会更高，查找数据的时候 树越高 io的压力就会越大，最后导致查询速度过慢。所以一般推荐 树的层级 最好保持在3级以内。两千万只是一个相对数值，具体一个表里能存放多少数据，还是根据表实际情况来确定的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1666750900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2114740,"avatar":"https://static001.geekbang.org/account/avatar/00/20/44/b4/c9d7bdc8.jpg","nickname":"一只小皮球","note":"","ucode":"6B2BDA4D37B082","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591968,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666957840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":591652,"ip_address":"北京","group_id":0},"score":591968,"extra":""}]},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591656,"discussion_content":"你好，peter，感谢你的留言～由于问题比较多，我只能简略回答一下，后续我们的课程内容也会有相关的内容\nQ1：MySQL innoDB的2000w性能下降的说法，不一定准确，这个数字和单条数据大小以及数据量有直接关系，我们的数据是行存储并且和聚簇索引在一起，并且查询索引是B+Tree，如果这个服务用途不是马上要求返回结果，也是能用的，只不过响应变得缓慢了，但是大部分我们对外服务对响应速度和并发是有要求的。缓慢原因是我们的MySQL的索引是整棵树完整结构，并且我们的实际数据都在最深处保存，如果树深度过深（比如超过3层），查询时和回表时相应的我们查询对比的次数和io会变多，这会直接导致了性能会有下降，能够承担的服务请求量也相应下降，我们用MySQL不推荐这么多的原因核心在于，我们还是想让接口请求能够快速回复查询请求\nQ2:我想这个重点在于，业务怎么用这些数据，这决定了我们怎么分表，我们分表的目的主要是为了提高响应速度，我的建议是，如果是存储可以按取值范围拆分，这样可以简单做二分法查找确定数据服务在哪里，如果是用来对用户查询，那么在他的上层加上多层的缓存分片，类似LevelDB的层级，被查询的时候可以回源，当然这个是适合读多写少的场景，如果是其他场景，需要另外设计对应的方式，这些方式在后面都有介绍，敬请期待\n\n你的问题很有趣，期待你的下次留言！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1666751777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1392585,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3f/c9/1ccefb9a.jpg","nickname":"Sky","note":"","ucode":"4C5A5AB73E8B90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591653,"discussion_content":"1.根据mysql索引结构+单行数据大小经验值16k计算而来的\n2.分表，通常用唯一ID进行hash","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1666750909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1392585,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3f/c9/1ccefb9a.jpg","nickname":"Sky","note":"","ucode":"4C5A5AB73E8B90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591969,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666957848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":591653,"ip_address":"北京","group_id":0},"score":591969,"extra":""}]},{"author":{"id":1002636,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4c/8c/120e2cdb.jpg","nickname":"Ｍｒ．Ｒｉｇｈｔ_li","note":"","ucode":"FDEB86F7BB2C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592335,"discussion_content":"mysql 树高度计算\nhttps://mp.weixin.qq.com/s/VmgpA3fZlv0JxERYB2tt5g","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667312509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361390,"user_name":"移横为固","can_delete":false,"product_type":"c1","uid":3214843,"ip_address":"北京","ucode":"ECA3065E8485B0","user_header":"https://static001.geekbang.org/account/avatar/00/31/0d/fb/a5fef3f7.jpg","comment_is_top":false,"comment_ctime":1667461432,"is_pvip":false,"replies":[{"id":131437,"content":"你好，移横为固，很高兴收到你的思考，你的回答和我当时想法很一致，我们做项目会碰到很多类似的情况，需要我们去预防超出预期的操作。\n简单的说就是：我们怎么约束用的人，以及我们怎么用这个数据。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667467154,"ip_address":"北京","comment_id":361390,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"思考题：一开始觉得注册邀请表应该作为历史表.\n思考了下作为关系表也是可以的\n在满足下面的注册邀请前提下：\n1.邀请人用类似二维码分享方式，注册人主动扫码注册。（不使用点对点邀请，被邀请人可能不接受）\n2.只能注册成功一次\n这样每一条邀请记录都是一个用户的注册记录：可以定义如下字段\n（邀请者，注册人，注册时间，邀请方式）\n 表的字段结构都非常简单，记录的总量最多就是账号量，并不会随时间不断膨胀。因此可以胜任关系表的查询需求。","like_count":7,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592530,"discussion_content":"你好，移横为固，很高兴收到你的思考，你的回答和我当时想法很一致，我们做项目会碰到很多类似的情况，需要我们去预防超出预期的操作。\n简单的说就是：我们怎么约束用的人，以及我们怎么用这个数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667467154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125370,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2b/fa/1cde88d4.jpg","nickname":"大俊stan","note":"","ucode":"BD0CB5FC790DDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645852,"discussion_content":"使用一个软件很可能没有邀请人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716895491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3235014,"avatar":"","nickname":"李雪楠","note":"","ucode":"0E905BCFEFAD4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610862,"discussion_content":"你好！我理解你的表设计（邀请者，注册人，注册时间，邀请方式），其实就是历史表了，关系表的话一般就是（邀请者，注册人）两个字段。感觉您这么说混淆了关系表和历史表的概念。如果（邀请者，注册人，注册时间，邀请方式）是关系表，那历史表该怎么设计。谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679814521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461984,"avatar":"","nickname":"Geek_96685a","note":"","ucode":"8480A5D41C6C2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592871,"discussion_content":"如果设计为关系表的话，如果需要查找邀请人邀请记录的话会不会不满足了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667788570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":3214843,"avatar":"https://static001.geekbang.org/account/avatar/00/31/0d/fb/a5fef3f7.jpg","nickname":"移横为固","note":"","ucode":"ECA3065E8485B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1461984,"avatar":"","nickname":"Geek_96685a","note":"","ucode":"8480A5D41C6C2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593159,"discussion_content":"我理解的你需要的邀请记录是点对点的邀请记录。分享邀请的方式与点对点方式不同，本身没有明确的邀请行为的记录，但可以查找到邀请成功的记录","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1667975595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592871,"ip_address":"浙江","group_id":0},"score":593159,"extra":""},{"author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3214843,"avatar":"https://static001.geekbang.org/account/avatar/00/31/0d/fb/a5fef3f7.jpg","nickname":"移横为固","note":"","ucode":"ECA3065E8485B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598181,"discussion_content":"如果是关系表，根据邀请人查询邀请记录，但是邀请记录无限增长的这个问题怎么解决？因为有些可能能邀请上千人的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672656278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593159,"ip_address":"浙江","group_id":0},"score":598181,"extra":""},{"author":{"id":1580123,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/5b/25932cb6.jpg","nickname":"小笨孩","note":"","ucode":"C0584C7AD28BC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":602459,"discussion_content":"我理解记录的是邀请成功的记录信息。如果A邀请了B，那么B是不能再邀请A去注册的，所以表里面数据量最多是当前已经注册的用户的数量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675759939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598181,"ip_address":"上海","group_id":0},"score":602459,"extra":""}]}]},{"had_liked":false,"id":360573,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"北京","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1666666956,"is_pvip":false,"replies":[{"id":131204,"content":"你好，业余草，感谢你的分享，当我们需要查询这个用户的邀请人时，还需要查询这个表，那么和我们对表的职能拆分有一定冲突，那么如何改进这个实现呢","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666751038,"ip_address":"北京","comment_id":360573,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"https:&#47;&#47;static001.geekbang.org&#47;horde&#47;8c&#47;8c13453d81da3149b58334b4625d2788.jpeg\n\n这里放一张我在部落里发的图。用户邀请其他用户注册的记录，属于历史记录还是关系记录，主要取决于业务结构。我推荐使用历史记录","like_count":4,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591654,"discussion_content":"你好，业余草，感谢你的分享，当我们需要查询这个用户的邀请人时，还需要查询这个表，那么和我们对表的职能拆分有一定冲突，那么如何改进这个实现呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1666751038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360638,"user_name":"人无远虑，必有近忧","can_delete":false,"product_type":"c1","uid":3099881,"ip_address":"北京","ucode":"F1A91A187B0A31","user_header":"https://static001.geekbang.org/account/avatar/00/2f/4c/e9/a98a87af.jpg","comment_is_top":false,"comment_ctime":1666704635,"is_pvip":false,"replies":[{"id":131196,"content":"你好，感谢你的支持！学习过程中有任何问题，欢迎提出，多多交流","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666713042,"ip_address":"北京","comment_id":360638,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"感谢老师，获益匪浅值得学习！","like_count":3,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591623,"discussion_content":"你好，感谢你的支持！学习过程中有任何问题，欢迎提出，多多交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666713043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368298,"user_name":"rts","can_delete":false,"product_type":"c1","uid":1412172,"ip_address":"广西","ucode":"C0CC725ECDCE04","user_header":"https://static001.geekbang.org/account/avatar/00/15/8c/4c/a9f7c4b5.jpg","comment_is_top":false,"comment_ctime":1676128095,"is_pvip":false,"replies":[{"id":134146,"content":"你好，确实这么做更好","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1676246289,"ip_address":"天津","comment_id":368298,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"可以分一个关系表和一个历史记录表，关系表存放邀请成功的关系，历史记录表存放邀请动作的一些详情。","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603480,"discussion_content":"你好，确实这么做更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676246289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360537,"user_name":"拾掇拾掇","can_delete":false,"product_type":"c1","uid":1051873,"ip_address":"北京","ucode":"D775F374C2A1D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","comment_is_top":false,"comment_ctime":1666618560,"is_pvip":false,"replies":[{"id":131205,"content":"你好，拾掇拾掇，感谢你的留言，在使用中，如果我们想查询这个人的邀请人，这个表还是会被业务查询，那么如何设计改进呢？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666751088,"ip_address":"北京","comment_id":360537,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100309001,"comment_content":"邀请很像转介绍业务，所以应该是历史记录","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591655,"discussion_content":"你好，拾掇拾掇，感谢你的留言，在使用中，如果我们想查询这个人的邀请人，这个表还是会被业务查询，那么如何设计改进呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666751089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360527,"user_name":"Daniel","can_delete":false,"product_type":"c1","uid":1020529,"ip_address":"北京","ucode":"282E09B3146501","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/71/9fd7cd7a.jpg","comment_is_top":false,"comment_ctime":1666614666,"is_pvip":true,"replies":[{"id":131187,"content":"mongoDB是一个很有趣的数据库，很多设计开创了行业先河，但有几个老版本因为全局锁问题导致使用的时候，需要慎重，因为这个锁在并发高的时候加服务器也不能提升性能，后续的版本我没有太关注。\n\n建议在选择的时候能够压测验证下现状来确认是否给不确定用户流量的系统使用，即使使用也建议对他加一层缓存。\n\n至于历史记录是否选择mongodb，主要看我们的业务场景，如果是给大量用户使用不推荐，如果是我们存起来用来做数据分析，并且不会有大量流量的话可以使用。核心在于是否能够高可用，它的性能是否符合我们场景需要，是否满足我们的业务需要。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666687606,"ip_address":"北京","comment_id":360527,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"我认为是“历史记录”，\n因为在统计一个用户一共邀请了多少个人的时候，是需要在总体的邀请人数中去筛选这部分人，而总共邀请的人数会是一个动态不断增长的数字。\n\n老师，我想请问一下，在什么业务场景下(是不是历史记录的表信息就可以用非关系型数据库来处理），可以考虑把关系型数据库的数据转移到类似于mongoDB这类Nosql类型的数据库，而不是用缓存来处理呢，二者选取的关键因素有哪些?","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591598,"discussion_content":"mongoDB是一个很有趣的数据库，很多设计开创了行业先河，但有几个老版本因为全局锁问题导致使用的时候，需要慎重，因为这个锁在并发高的时候加服务器也不能提升性能，后续的版本我没有太关注。\n\n建议在选择的时候能够压测验证下现状来确认是否给不确定用户流量的系统使用，即使使用也建议对他加一层缓存。\n\n至于历史记录是否选择mongodb，主要看我们的业务场景，如果是给大量用户使用不推荐，如果是我们存起来用来做数据分析，并且不会有大量流量的话可以使用。核心在于是否能够高可用，它的性能是否符合我们场景需要，是否满足我们的业务需要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666687606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368421,"user_name":"zmlmagic","can_delete":false,"product_type":"c1","uid":1057444,"ip_address":"内蒙古","ucode":"E5D7E21F562CF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJPZN07CicHGCjVPtWK0WQjAglXTZWDUYlCVXdJhrWIWKicl49LF0ezPq3HmGibzicBicvBC8NpkR4NhoA/132","comment_is_top":false,"comment_ctime":1676335369,"is_pvip":false,"replies":[{"id":135050,"content":"没毛病","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1678757363,"ip_address":"北京","comment_id":368421,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"历史记录表，关系查询再建专门关系表","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608951,"discussion_content":"没毛病","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678757363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367845,"user_name":"小笨孩","can_delete":false,"product_type":"c1","uid":1580123,"ip_address":"上海","ucode":"C0584C7AD28BC3","user_header":"https://static001.geekbang.org/account/avatar/00/18/1c/5b/25932cb6.jpg","comment_is_top":false,"comment_ctime":1675673616,"is_pvip":false,"replies":[{"id":133966,"content":"你好，这个是个人经验，相信会有明确定义。就像当年我讲充血模型思路的时候大家都以为是模块多包了几层而已","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1675695919,"ip_address":"北京","comment_id":367845,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"数据分成了这四个【实体对象主表、辅助查询表、实体关系和历史数据】类，这些是依据自己的经验分的还是有啥理论支持吗？虽然现在找不到不在这四个类型的数据。","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":602263,"discussion_content":"你好，这个是个人经验，相信会有明确定义。就像当年我讲充血模型思路的时候大家都以为是模块多包了几层而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675695919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363526,"user_name":"刘章","can_delete":false,"product_type":"c1","uid":1009693,"ip_address":"北京","ucode":"7608C518D49AE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLxEbhSEziblPNVkr9XFIAzPCib0TQvBxHYwiaKiaib7ExZ8dmUWyqWoibSedACTHCf52INMib80ic92G6wQ/132","comment_is_top":false,"comment_ctime":1669788861,"is_pvip":false,"replies":[{"id":132128,"content":"你好，刘章，可以用MySQL proxy一类的中间件自动确认数据情况切换主从，如果是云服务，像阿里云的polardb可以在代理设置强一致。如果都没有可以业务上优先更新缓存，优先读缓存数据","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669794652,"ip_address":"北京","comment_id":363526,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"老师你好：\n\n我们现在用的是一主多从的数据库，设置了读写分离，写是 主库， 读是从库。 有时间会出现一些莫名问题，就是同步延迟问题，明明是修改完成了，但是读取不到就会是程序出现问题，这个有什么好的办法吗","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595159,"discussion_content":"你好，刘章，可以用MySQL proxy一类的中间件自动确认数据情况切换主从，如果是云服务，像阿里云的polardb可以在代理设置强一致。如果都没有可以业务上优先更新缓存，优先读缓存数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1669794652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1009693,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLxEbhSEziblPNVkr9XFIAzPCib0TQvBxHYwiaKiaib7ExZ8dmUWyqWoibSedACTHCf52INMib80ic92G6wQ/132","nickname":"刘章","note":"","ucode":"7608C518D49AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":595162,"discussion_content":"谢谢老师，专业","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669796414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595159,"ip_address":"浙江","group_id":0},"score":595162,"extra":""}]}]},{"had_liked":false,"id":361041,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"北京","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1667139242,"is_pvip":false,"replies":[{"id":131353,"content":"你好，一步，很高兴收到你的心得，邀请关系放缓存是个好办法，建议表也拆一下，然后查找历史详情这样感觉会更方便一些～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667268101,"ip_address":"北京","comment_id":361041,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"邀请注册记录：如果 历史表个关系表（关系表中保存 邀请人ID, 邀请历史记录 ID)同时保存呢？  一般邀请统计的业务，会要求看到邀请的具体统计信息，比如：每天的邀请人数，邀请总人数等，这里邀请关系可以放到缓存中;  邀请历史表保存 具体的邀请历史记录，这样就可以通过邀请关系缓存拿到记录id 进而获取到邀请历史记录详情信息","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592264,"discussion_content":"你好，一步，很高兴收到你的心得，邀请关系放缓存是个好办法，建议表也拆一下，然后查找历史详情这样感觉会更方便一些～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667268101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386468,"user_name":"宁次君","can_delete":false,"product_type":"c1","uid":1475979,"ip_address":"广东","ucode":"F1DD0B189C5856","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/8b/dd7ecd53.jpg","comment_is_top":false,"comment_ctime":1704877361,"is_pvip":false,"replies":[{"id":140878,"content":"你好，这类排行榜可以使用周期的离线计算去计算或者使用redis zset或者队列消息到专用排行服务汇总，或者使用clickhouse类似辅助数据库实时吞吐计算[这个不推荐]","user_name":"作者回复","user_name_real":"作者","uid":1004527,"ctime":1704961990,"ip_address":"北京","comment_id":386468,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"关于动作历史表，‘对于这种基于大量的数据统计后才能得到的结论数据，我不建议对外提供实时统计计算服务’，‘即使使用缓存临时保存统计结果，这也属于临时方案，建议用其他的表去做类似的事情’，但有些业务就是要对历史表做统计的，比如邀请排行榜这种业务，需要统计邀请记录得到邀请人数，这种如何通过其他表实现呢，谢谢🙏","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635592,"discussion_content":"你好，这类排行榜可以使用周期的离线计算去计算或者使用redis zset或者队列消息到专用排行服务汇总，或者使用clickhouse类似辅助数据库实时吞吐计算[这个不推荐]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704961990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383762,"user_name":"Daniel","can_delete":false,"product_type":"c1","uid":3692404,"ip_address":"中国台湾","ucode":"ECA6BEDD83FA8E","user_header":"","comment_is_top":false,"comment_ctime":1699585118,"is_pvip":false,"replies":[{"id":140123,"content":"你好，主要是看业务场景使用情况。举个例子：很多接口设计的时候以为不会被高并发访问所以很多跨表查询，结果发现他被高频率访问才做的优化。所以业务驱动结构","user_name":"作者回复","user_name_real":"作者","uid":1004527,"ctime":1700455277,"ip_address":"天津","comment_id":383762,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"請問一下老師 老師有推薦的解法嗎？\n看了一下留言 有人拆表 有人合一 想請問怎取捨 判斷標準是什麼","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632074,"discussion_content":"你好，主要是看业务场景使用情况。举个例子：很多接口设计的时候以为不会被高并发访问所以很多跨表查询，结果发现他被高频率访问才做的优化。所以业务驱动结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700455277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380109,"user_name":"seker","can_delete":false,"product_type":"c1","uid":1122034,"ip_address":"广东","ucode":"9B705F91355873","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/f2/453d5f88.jpg","comment_is_top":false,"comment_ctime":1692980943,"is_pvip":false,"replies":[{"id":138461,"content":"你好，第一个问题： a表（id，相关属性，b表关联id多条）b表（id，相关属性，a表关联id多条），推荐改为：a表（id，相关属性）b表（id，相关属性）c表（id-a，id-b），好处是更新关系时只更新一个表，同时能够快速知道更新范围。第二个，特指一个id能直接匹配的，如1:1关系的数据不会因为条件变换而变更的关系。思考题没错：取决于如何用，所以我们的数据库怎么用要做到规范、可限制用户如何使用才能保证我们的服务稳定，不被上层业务滥用","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1693216443,"ip_address":"北京","comment_id":380109,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"两个问题：\n1）文稿中提到说 “建议额外用一个关系表来记录实体间m:n的关联关系”，可以举个例子嘛？\n2）文稿中提到说 “通过关系快速查询的数据，适合放在长期缓存当中”，但如果是那种会变化的关系，就不适合做长期缓存吧，还是会涉及到缓存更新的问题。\n\n思考题：\n我认为记录是属于历史还是属于关系，关键在于是否变化。举个例子，我在2023年8月1日邀请了一位朋友A注册极客时间，那么不管过了多久，这个邀请时间和被邀请人都不会发生变化，因此用户邀请其他用户注册的记录是属于历史记录。\n\n但如果要提供邀请关系的查询，比如一个用户成功邀请了哪些用户，那可以考虑加一个邀请关系表，即被邀请用户注册成功了，就与邀请用户建立关系并存入邀请关系表。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626628,"discussion_content":"你好，第一个问题： a表（id，相关属性，b表关联id多条）b表（id，相关属性，a表关联id多条），推荐改为：a表（id，相关属性）b表（id，相关属性）c表（id-a，id-b），好处是更新关系时只更新一个表，同时能够快速知道更新范围。第二个，特指一个id能直接匹配的，如1:1关系的数据不会因为条件变换而变更的关系。思考题没错：取决于如何用，所以我们的数据库怎么用要做到规范、可限制用户如何使用才能保证我们的服务稳定，不被上层业务滥用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693216443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375732,"user_name":"o9","can_delete":false,"product_type":"c1","uid":1101332,"ip_address":"北京","ucode":"E373E82A39BBFE","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","comment_is_top":false,"comment_ctime":1685933044,"is_pvip":false,"replies":[{"id":137210,"content":"你好，o9，最近有点小忙回复慢了抱歉。第一个问题是这样，演示的表是一个用户动作表其中包含了大量用户动作action_id是一个通用字段，在type特定的情况下用于存储产品id，所以这个表其实是一个用户历史动作记录表。对于这种历史记录表他不仅仅记录商品中的一个动作还有其他操作都会在这里记录，从某个角度来说它是一个不是专门用于做这个动作的表。所以不是专门用于快速对外提供特定功能的表用于做特定业务的时候会存在难优化，无关数据多等问题，这也是后面第二个问题为什么这么说：）","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1686534530,"ip_address":"北京","comment_id":375732,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"1. 动作历史表给出的sql不对，表中没有 product_id 字段。\n2. 还有 对于这种基于大量的数据统计后才能得到的结论数据，我不建议对外提供实时统计计算服务...建议用其他的表去做类似的事情，比如实时查询领取记录表，效果会更好。领取记录表不就是上面的那个表吗？是不是有笔误?","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620766,"discussion_content":"你好，o9，最近有点小忙回复慢了抱歉。第一个问题是这样，演示的表是一个用户动作表其中包含了大量用户动作action_id是一个通用字段，在type特定的情况下用于存储产品id，所以这个表其实是一个用户历史动作记录表。对于这种历史记录表他不仅仅记录商品中的一个动作还有其他操作都会在这里记录，从某个角度来说它是一个不是专门用于做这个动作的表。所以不是专门用于快速对外提供特定功能的表用于做特定业务的时候会存在难优化，无关数据多等问题，这也是后面第二个问题为什么这么说：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686534530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1101332,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","nickname":"o9","note":"","ucode":"E373E82A39BBFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":620819,"discussion_content":"哦哦 明白了 感谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686570086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":620766,"ip_address":"北京","group_id":0},"score":620819,"extra":""}]}]},{"had_liked":false,"id":372102,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"浙江","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1680738499,"is_pvip":false,"replies":[{"id":135931,"content":"你好，是做两个表吗，这个可以～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1681123417,"ip_address":"北京","comment_id":372102,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"思考题：历史记录，一次性关系数据","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613086,"discussion_content":"你好，是做两个表吗，这个可以～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681123417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368305,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"广东","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1676166587,"is_pvip":true,"replies":[{"id":134147,"content":"你好，碰到疑问随时交流","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1676246306,"ip_address":"天津","comment_id":368305,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"我之前一直搞不明白 strapi 和 budibase 里面为什么关系表要单独做成一个表； 老师这里的解答漂亮","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603481,"discussion_content":"你好，碰到疑问随时交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676246306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363940,"user_name":"dk.wu","can_delete":false,"product_type":"c1","uid":2938336,"ip_address":"北京","ucode":"E9091207B646DB","user_header":"https://static001.geekbang.org/account/avatar/00/2c/d5/e0/addca785.jpg","comment_is_top":false,"comment_ctime":1670379258,"is_pvip":false,"replies":[{"id":132812,"content":"你好，这里未注册确实是一个需要思考的地方","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1671438783,"ip_address":"北京","comment_id":363940,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"个人倾向：历史记录\n有个场景是我邀请了，但是邀请的人并没有注册，那么用户表也就不存在，不属于真实的关系。\n本身通过用户拉人头的方式，就是记录有效的邀请数，进而给予对应奖励。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597104,"discussion_content":"你好，这里未注册确实是一个需要思考的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671438783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598200,"discussion_content":"用户a邀请用户b是一个行为，此处应该有记录A状态。用户b注册是另一个行为，也是一个记录B，这个A和B可以是一条，区别在于用不同的状态字段表示用户b的是否注册的状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672664301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363677,"user_name":"Geek_e7d396","can_delete":false,"product_type":"c1","uid":2121816,"ip_address":"北京","ucode":"553A1C26553940","user_header":"","comment_is_top":false,"comment_ctime":1669971323,"is_pvip":false,"replies":[{"id":132177,"content":"你好，其实有影响只不过现代使用SSD已经不明显了，只有在数据量大的时候会有区别，可以看看第三章内容，行存储和列存储心中会有解答","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1670064923,"ip_address":"北京","comment_id":363677,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"老师，请教一下，上面说 &quot;长度小的数据在吞吐、查询、传输上都会很快&quot;\n这是为什么呢？\n只要不是SELECT *，而只取所需要的的字段，对传输的影响差别不大\n索引只是保存主键和索引的字段，对查询没有影响\n感觉只是影响缓存池内能存储的数据大小","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595429,"discussion_content":"你好，其实有影响只不过现代使用SSD已经不明显了，只有在数据量大的时候会有区别，可以看看第三章内容，行存储和列存储心中会有解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670064923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363255,"user_name":"6点无痛早起学习的和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"北京","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1669417423,"is_pvip":false,"replies":[{"id":132073,"content":"你好，这个思路更详细，点赞～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669461699,"ip_address":"北京","comment_id":363255,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"我们要解决一些问题：\n问题1. 用户 A 邀请了哪些用户\n问题2. 用户 B 是被哪个用户邀请的\n\n根据具体的业务场景来分析：\n方案一、如果邀请关系是 1：1\n那就是做历史记录表\n1.2 点都可以解决\n\n\n方案二、如果邀请关系是 N：1，但是最终只能一个人邀请成功\n那就是关系记录表\n但是最终会在用户的其他表里记录最终被邀请成功的 user_id\n1.2 点也都可以解决\n\n但是现在出现了一个问题，如果考虑到分表，然后分表键的设计：\n如果是以 user_id 分表，那现有方案一不能解决问题 2，要解决问题 2，同理需要在用户的其他表记录最终被邀请成功的 user_id\n","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594837,"discussion_content":"你好，这个思路更详细，点赞～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669461699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362691,"user_name":"ls","can_delete":false,"product_type":"c1","uid":1001037,"ip_address":"北京","ucode":"C18E208B1DFDA7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/4d/161f3779.jpg","comment_is_top":false,"comment_ctime":1668756463,"is_pvip":true,"replies":[{"id":131883,"content":"你好，ls，虽然他们是树形依赖关系，但是他们的数据结构是相同的，可以做在一个表内，类似parent_id方式去记录上级关联关系，当我们需要按这个树形去处理时完全可以在界面让前端处理好给服务端具体树形层级，同时可以记录一些冗余的数据，如当前所在层级，同时注意如果是代理商，很有可能存在循环依赖情况，如a供货商同时是b供货商的上游，b供货商是c供货商的上游，但是c供货商还是会从a供货商拿一些配件～所以这里要做好预防规划","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668758427,"ip_address":"北京","comment_id":362691,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"请教老师一个问题： 对于一些上下级关系的数据该怎么建模和保存？比如代理商下面有下级代理，下级代理下面还有下下级，层级有10多级，这种怎么去保存？是一个树形层次结构","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594066,"discussion_content":"你好，ls，虽然他们是树形依赖关系，但是他们的数据结构是相同的，可以做在一个表内，类似parent_id方式去记录上级关联关系，当我们需要按这个树形去处理时完全可以在界面让前端处理好给服务端具体树形层级，同时可以记录一些冗余的数据，如当前所在层级，同时注意如果是代理商，很有可能存在循环依赖情况，如a供货商同时是b供货商的上游，b供货商是c供货商的上游，但是c供货商还是会从a供货商拿一些配件～所以这里要做好预防规划","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668758427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362587,"user_name":"edward","can_delete":false,"product_type":"c1","uid":1604798,"ip_address":"北京","ucode":"09F7A5B8D2E7BD","user_header":"","comment_is_top":false,"comment_ctime":1668656164,"is_pvip":false,"replies":[{"id":131858,"content":"你好，edward，很高兴收到你的思考，但是有个问题，如果是多个活动，会出现多次邀请时这个结论就会发生变化","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668681710,"ip_address":"北京","comment_id":362587,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"我认为属于历史记录，因为邀请动作是发生过就不会再改变了。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593977,"discussion_content":"你好，edward，很高兴收到你的思考，但是有个问题，如果是多个活动，会出现多次邀请时这个结论就会发生变化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668681710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361946,"user_name":"Hello","can_delete":false,"product_type":"c1","uid":1035728,"ip_address":"北京","ucode":"4023DDCC18D73A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/d0/d5b3b6fb.jpg","comment_is_top":false,"comment_ctime":1667996635,"is_pvip":false,"replies":[{"id":131684,"content":"你好，库嚓嚓，这个组件我没有研究过，我的大部分业务相关的服务都是自制，我理解需要看看官方架构相关文档了","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668068819,"ip_address":"北京","comment_id":361946,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"请教老师一个和用户系统相关的问题:\n我们有几个spring mvc的web项目，这几个项目都涉及简单的用户和权限体系，几个服务都使用了spring security框架做权限控制。\n现在想抽取一个用户服务(非web服务)出来进行业务和代码的复用，将用户表和权限表都统一迁移到用户库中，这一步没啥问题。但在处理spring security相关代码，发现不能直接迁移到用户服务中，而几个web项目中的spring security代码都是类似的模板代码。关于这种情况，请问老师有什么好的解决思路？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593287,"discussion_content":"你好，库嚓嚓，这个组件我没有研究过，我的大部分业务相关的服务都是自制，我理解需要看看官方架构相关文档了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668068819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361925,"user_name":"Geek_lucas","can_delete":false,"product_type":"c1","uid":2497779,"ip_address":"北京","ucode":"AF728FA8C856F7","user_header":"https://static001.geekbang.org/account/avatar/00/26/1c/f3/833ad47e.jpg","comment_is_top":false,"comment_ctime":1667978169,"is_pvip":false,"replies":[{"id":131686,"content":"你好，lucas，没错～取决于怎么用，但是怎么保证别人按我们设计初衷使用","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668075090,"ip_address":"北京","comment_id":361925,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"你思考一下，用户邀请其他用户注册的记录，属于历史记录还是关系记录？\n从关系来说，这是关系记录，然而从业务上来说，这个其实很少会去查询的，应用场景也不是很多的，所以应该归属到‘历史记录’，毕竟用的少。你们觉得呢？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593313,"discussion_content":"你好，lucas，没错～取决于怎么用，但是怎么保证别人按我们设计初衷使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668075090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361694,"user_name":"Geek_96685a","can_delete":false,"product_type":"c1","uid":1461984,"ip_address":"北京","ucode":"8480A5D41C6C2B","user_header":"","comment_is_top":false,"comment_ctime":1667788672,"is_pvip":false,"replies":[{"id":131556,"content":"你好，很高兴收到你的思考，没错～同时还要注意，这个数据不会被别人滥用","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667792409,"ip_address":"北京","comment_id":361694,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"看业务场景吧：\n1，如果需要查看邀请人的邀请记录，邀请成功或者邀请未成功的记录，此时需要设计为邀请记录表吧\n2，如果不需要查看邀请人记录，只关注成功邀请的话，而且一个人只能被邀请一次的话，可以设计为关系表","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592877,"discussion_content":"你好，很高兴收到你的思考，没错～同时还要注意，这个数据不会被别人滥用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667792409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361676,"user_name":"Mr.Tree","can_delete":false,"product_type":"c1","uid":2704444,"ip_address":"北京","ucode":"84712B0436EC6F","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/3c/8bb9e8b4.jpg","comment_is_top":false,"comment_ctime":1667751758,"is_pvip":false,"replies":[{"id":131551,"content":"你好，很高兴收到你的思考，这个思考没错，核心在于我们怎么用它，但是我们的数据放在哪里，别人怎么用是不好把控的，如何防止别人滥用这些数据，是我们需要思考的","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667788476,"ip_address":"北京","comment_id":361676,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"这个不同的业务需求划分归属就会不同吧，比如邀请记录不会发生变化且数据量庞大，对于历史记录访问较少，这些都属于冷数据，它应该作为历史记录，如果属于访问较平凡的数据，考虑一下分区，并且储存较少的字段，统计邀请人id和被邀请人id等少量信息，作为关系表存在","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592869,"discussion_content":"你好，很高兴收到你的思考，这个思考没错，核心在于我们怎么用它，但是我们的数据放在哪里，别人怎么用是不好把控的，如何防止别人滥用这些数据，是我们需要思考的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667788476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360968,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1667042314,"is_pvip":false,"replies":[{"id":131319,"content":"你好，张申傲，感谢你的留言～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667142958,"ip_address":"北京","comment_id":360968,"utype":1}],"discussion_count":1,"race_medal":2,"score":4,"product_id":100309001,"comment_content":"对数据库表进行分类的思想很有启发，学习了~","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592139,"discussion_content":"你好，张申傲，感谢你的留言～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667142958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360706,"user_name":"frag007","can_delete":false,"product_type":"c1","uid":1215185,"ip_address":"北京","ucode":"94D7368F091908","user_header":"","comment_is_top":false,"comment_ctime":1666770720,"is_pvip":false,"replies":[{"id":131230,"content":"你好，frag007，很高兴收到你的留言，首先，你的理解没错。\n\n如果这个表里可以有多人邀请一个人，历史的职能就会十分明显～，这样的话给他放缓存会很不方便，所以，还是业务形态决定了他的职能，这也意味着这个表的数据决定了这个表的职能，而不是单单的结构就能看出来","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666780866,"ip_address":"北京","comment_id":360706,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"是关系还是历史记录，还是要看具体业务决定的。如果有需求是查询推荐人是xx的话，就是关系了","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591727,"discussion_content":"你好，frag007，很高兴收到你的留言，首先，你的理解没错。\n\n如果这个表里可以有多人邀请一个人，历史的职能就会十分明显～，这样的话给他放缓存会很不方便，所以，还是业务形态决定了他的职能，这也意味着这个表的数据决定了这个表的职能，而不是单单的结构就能看出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666780866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360678,"user_name":"徐石头","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"北京","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","comment_is_top":false,"comment_ctime":1666752072,"is_pvip":true,"replies":[{"id":131234,"content":"你好，徐曙辉，很高兴收到你的回复\n1.这个和个人习惯有关，我个人喜欢用unix time，因为这个不带时区，不同服务器环境时区不同容易乱\n2.我们排斥历史表是因为他数据量太多，查询缓慢，所以虽然我们用它当作关系表也可以，但是不太好用它做缓存，最后一句拆一部分进入redis是个很好的办法，同时要考虑下第一次查询很缓慢，然后才能放入缓存缓解压力","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666781718,"ip_address":"北京","comment_id":360678,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"1. 为什么时间字段是int格式不是timestamp或datetime？\n2. 历史记录，当我们在查询用户A和邀请人关系的时候其实也可以看作关系记录，邀请表有两个字段用户user_id和邀请人用户ID invite_user_id，如果需要查询用户的邀请人要么通过invite_user_id 联用户表，要么增加冗余字段invite_user_XXX等，当然可以选择把一部分用户信息缓存到redis，拿invite_user_id去缓存查","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591734,"discussion_content":"你好，徐曙辉，很高兴收到你的回复\n1.这个和个人习惯有关，我个人喜欢用unix time，因为这个不带时区，不同服务器环境时区不同容易乱\n2.我们排斥历史表是因为他数据量太多，查询缓慢，所以虽然我们用它当作关系表也可以，但是不太好用它做缓存，最后一句拆一部分进入redis是个很好的办法，同时要考虑下第一次查询很缓慢，然后才能放入缓存缓解压力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666781718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360677,"user_name":"林龍","can_delete":false,"product_type":"c1","uid":1766285,"ip_address":"北京","ucode":"61A98DC0DC1E8A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f3/8d/402e0e0f.jpg","comment_is_top":false,"comment_ctime":1666751844,"is_pvip":false,"replies":[{"id":131232,"content":"你好，林龍，很高兴收到你的回复，你这个回答很有趣，再加一点难度，问一下～如何缓存这个数据","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666781405,"ip_address":"北京","comment_id":360677,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"邀请其他用户注册的记录，属于历史记录还是关系记录，是需要看看业务的功能情况。\n\n抛开业务谈架构都是在耍流氓。\n\n对于已经产生的数据且数据是不会变动的话，我更愿意把他当成“历史记录”\n如果数据是可能会进行变动（修改，删除等），我更愿意把他当成“关系记录”\n\n对于“历史记录”，这种东西更多的是像log记录，只是用于查询列表，或是汇总某个数据，对应高并发的场景，不把压力放在mysql的查询上。所以会把数据放在mysql的同时把数据同步到ES。当查询列表或汇总时是通过ES查询，借用ES的非事务，全文检索，反向索引，集群等可以更好的支撑。如果还要再进一步优化的话可以把ES的汇总数据放到Redis缓存中，减少ES的压力","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591732,"discussion_content":"你好，林龍，很高兴收到你的回复，你这个回答很有趣，再加一点难度，问一下～如何缓存这个数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666781405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360616,"user_name":"吴晨辉","can_delete":false,"product_type":"c1","uid":2312639,"ip_address":"北京","ucode":"757E98E93AF6A3","user_header":"https://static001.geekbang.org/account/avatar/00/23/49/bf/4936c58b.jpg","comment_is_top":false,"comment_ctime":1666688124,"is_pvip":false,"replies":[{"id":131209,"content":"你好，吴晨辉，很高兴收到你的留言，这个方式很好，可以杜绝他既是历史表又是关系表的问题，同时，注销这个是小概率事件，对他的投入可以不用太多，除非它属于我们比较核心的功能～这时加更多的关注给他","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666753457,"ip_address":"北京","comment_id":360616,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"邀请记录表与用户表的关系是n:1,看到有评论说是属于历史记录，数据入库之后不会发生改变，但是有一种业务场景，用户可以注销账号,还是有一定的实时性的\n我的看法是：用户与邀请人是一对一，这种记录平时不会去查询，是不是可以当做用户信息的副表，主键是用户id，字段存放邀请人id，如果用户发生注销事件，清除表数据\n如果业务需要把注销用户也带上，可以考虑，增加一张临时表，主键是用户id，字段存邀请人信息，","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591664,"discussion_content":"你好，吴晨辉，很高兴收到你的留言，这个方式很好，可以杜绝他既是历史表又是关系表的问题，同时，注销这个是小概率事件，对他的投入可以不用太多，除非它属于我们比较核心的功能～这时加更多的关注给他","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666753457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360611,"user_name":"一只小皮球","can_delete":false,"product_type":"c1","uid":2114740,"ip_address":"北京","ucode":"6B2BDA4D37B082","user_header":"https://static001.geekbang.org/account/avatar/00/20/44/b4/c9d7bdc8.jpg","comment_is_top":false,"comment_ctime":1666687035,"is_pvip":false,"replies":[{"id":131208,"content":"你好，一只小皮球，很高兴收到你的留言，确实存在关系，同时他也会随着时间增长有着历史表的一些特征，这个表的职能他的承担的职能有一点多","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666752177,"ip_address":"北京","comment_id":360611,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"在过往的业务中 这个记录表往往不仅仅是记录 还有关系的查询，邀请关系的增删改，如果是这样的情况下，我认为是关系记录。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591659,"discussion_content":"你好，一只小皮球，很高兴收到你的留言，确实存在关系，同时他也会随着时间增长有着历史表的一些特征，这个表的职能他的承担的职能有一点多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666752177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360600,"user_name":"arthasking","can_delete":false,"product_type":"c1","uid":1044932,"ip_address":"北京","ucode":"2BCC8D2FF59259","user_header":"https://wx.qlogo.cn/mmopen/vi_32/dsKic0bkibkMZnZwIUnugHnCZ3WveymkPicIFGpvNCNxBOzXOXNtky03lQHcdmaPnYglZUfhD78uFwG6ia4csOeC1Q/132","comment_is_top":false,"comment_ctime":1666683413,"is_pvip":false,"replies":[{"id":131233,"content":"你好，arthasking，很高兴收到你的回复，再加深问一点，如果我想查询这个用户的邀请人，结合第二节课的内容，思考下如何做缓存","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666781494,"ip_address":"北京","comment_id":360600,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"邀请注册记录是历史记录,因为是一旦写入就不变的数据","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591733,"discussion_content":"你好，arthasking，很高兴收到你的回复，再加深问一点，如果我想查询这个用户的邀请人，结合第二节课的内容，思考下如何做缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666781494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360580,"user_name":"小勇同学","can_delete":false,"product_type":"c1","uid":2032815,"ip_address":"北京","ucode":"78F010D5C5A44A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/af/62a9b230.jpg","comment_is_top":false,"comment_ctime":1666668871,"is_pvip":false,"replies":[{"id":131181,"content":"那么，如何避免他成为历史表？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666673987,"ip_address":"北京","comment_id":360580,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"邀请记录会随着时间不断增长，不过理论上增长应该不会像日志那么快速，相对来讲数据量不会特别大，所以我认为是关系记录。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591581,"discussion_content":"那么，如何避免他成为历史表？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666673987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360576,"user_name":"酷飞不会飞","can_delete":false,"product_type":"c1","uid":1004609,"ip_address":"北京","ucode":"ECFD5111260A7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/41/3d352f74.jpg","comment_is_top":false,"comment_ctime":1666667941,"is_pvip":false,"replies":[{"id":131210,"content":"你好，酷飞不会飞，很高兴能收到你的留言，从字面上理解，是不是说你想用缓存去缓存关系，以此让业务减少因为这个表的查询缓慢影响。缓存这个确实是个好方式，不过如果是临时缓存，第一次查询以及过期后缓存穿透查询的表会因为历史数据过多会引起卡顿，那么还有没有更进一步的想法？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666753882,"ip_address":"北京","comment_id":360576,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"用户邀请其他用户注册应该属于“历史记录”。他们在完成邀请动作之后，之间就不会因为某种操作的变更而导致记录产生变化。\n\n在读多写少的高并发系统中，“缓存”应该是非常重要的一环，也是提升系统性能最直接的手段，无论是业务的解耦还是数据库结构的变更也都是为了缓存策略的定制。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591666,"discussion_content":"你好，酷飞不会飞，很高兴能收到你的留言，从字面上理解，是不是说你想用缓存去缓存关系，以此让业务减少因为这个表的查询缓慢影响。缓存这个确实是个好方式，不过如果是临时缓存，第一次查询以及过期后缓存穿透查询的表会因为历史数据过多会引起卡顿，那么还有没有更进一步的想法？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666753882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360523,"user_name":"不吃包子","can_delete":false,"product_type":"c1","uid":2269341,"ip_address":"北京","ucode":"5E0661EC355ED9","user_header":"","comment_is_top":false,"comment_ctime":1666612245,"is_pvip":false,"replies":[{"id":131180,"content":"但是，他还有关系用途","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666673948,"ip_address":"北京","comment_id":360523,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"思考题应该属于历史记录表吧","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591580,"discussion_content":"但是，他还有关系用途","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666673948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360512,"user_name":"Geek_21b4f9","can_delete":false,"product_type":"c1","uid":2909873,"ip_address":"北京","ucode":"4780E3050774BC","user_header":"","comment_is_top":false,"comment_ctime":1666607621,"is_pvip":false,"replies":[{"id":131198,"content":"每周一三五更新，第二讲已上线咯～","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1666715904,"ip_address":"北京","comment_id":360512,"utype":2}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"期待下一章节","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591630,"discussion_content":"每周一三五更新，第二讲已上线咯～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666715904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360504,"user_name":"竹曦","can_delete":false,"product_type":"c1","uid":1345075,"ip_address":"北京","ucode":"9A23E1B90CF479","user_header":"https://static001.geekbang.org/account/avatar/00/14/86/33/e56d94ba.jpg","comment_is_top":false,"comment_ctime":1666604762,"is_pvip":false,"replies":[{"id":131165,"content":"竹曦你好，在学习过程中有任何问题，欢迎及时回馈","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1666606891,"ip_address":"北京","comment_id":360504,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100309001,"comment_content":"先学为敬","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591511,"discussion_content":"竹曦你好，在学习过程中有任何问题，欢迎及时回馈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666606891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}