{"id":243961,"title":"92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）","content":"<p>上一节课，我们介绍了如何通过合理的设计，来实现功能性需求的同时，满足易用、易扩展、灵活、低延迟、高容错等非功能性需求。在设计的过程中，我们也借鉴了之前讲过的一些开源项目的设计思想。比如，我们借鉴了Spring的低侵入松耦合、约定优于配置等设计思想，还借鉴了MyBatis通过MyBatis-Spring类库将框架的易用性做到极致等设计思路。</p><p>今天，我们讲解这样一个问题，针对限流框架的开发，如何做高质量的代码实现。说的具体点就是，如何利用之前讲过的设计思想、原则、模式、编码规范、重构技巧等，写出易读、易扩展、易维护、灵活、简洁、可复用、易测试的代码。</p><p>话不多少，让我们正式开始今天的学习吧！</p><h2>V1版本功能需求</h2><p>我们前面提到，优秀的代码是重构出来的，复杂的代码是慢慢堆砌出来的。小步快跑、逐步迭代是我比较推崇的开发模式。所以，针对限流框架，我们也不用想一下子就做得大而全。况且，在专栏有限的篇幅内，我们也不可能将一个大而全的代码阐述清楚。所以，我们可以先实现一个包含核心功能、基本功能的V1版本。</p><p>针对上两节课中给出的需求和设计，我们重新梳理一下，看看有哪些功能要放到V1版本中实现。</p><p>在V1版本中，对于接口类型，我们只支持HTTP接口（也就URL）的限流，暂时不支持RPC等其他类型的接口限流。对于限流规则，我们只支持本地文件配置，配置文件格式只支持YAML。对于限流算法，我们只支持固定时间窗口算法。对于限流模式，我们只支持单机限流。</p><!-- [[[read_end]]] --><p>尽管功能“裁剪”之后，V1版本实现起来简单多了，但在编程开发的同时，我们还是要考虑代码的扩展性，预留好扩展点。这样，在接下来的新版本开发中，我们才能够轻松地扩展新的限流算法、限流模式、限流规则格式和数据源。</p><h2>最小原型代码</h2><p>上节课我们讲到，项目实战中的实现等于面向对象设计加实现。而面向对象设计与实现一般可以分为四个步骤：划分职责识别类、定义属性和方法、定义类之间的交互关系、组装类并提供执行入口。在<a href=\"https://time.geekbang.org/column/article/171767\">第14讲</a>中，我还带你用这个方法，设计和实现了一个接口鉴权框架。如果你印象不深刻了，可以回过头去再看下。</p><p>不过，我们前面也讲到，在平时的工作中，大部分程序员都是边写代码边做设计，边思考边重构，并不会严格地按照步骤，先做完类的设计再去写代码。而且，如果想一下子就把类设计得很好、很合理，也是比较难的。过度追求完美主义，只会导致迟迟下不了手，连第一行代码也敲不出来。所以，我的习惯是，先完全不考虑设计和代码质量，先把功能完成，先把基本的流程走通，哪怕所有的代码都写在一个类中也无所谓。然后，我们再针对这个MVP代码（最小原型代码）做优化重构，比如，将代码中比较独立的代码块抽离出来，定义成独立的类或函数。</p><p>我们按照先写MVP代码的思路，把代码实现出来。它的目录结构如下所示。代码非常简单，只包含5个类，接下来，我们针对每个类一一讲解一下。</p><pre><code>com.xzg.ratelimiter\n  --RateLimiter\ncom.xzg.ratelimiter.rule\n  --ApiLimit\n  --RuleConfig\n  --RateLimitRule\ncom.xzg.ratelimiter.alg\n  --RateLimitAlg\n</code></pre><p><strong>我们先来看下RateLimiter类。</strong>代码如下所示：</p><pre><code>public class RateLimiter {\n  private static final Logger log = LoggerFactory.getLogger(RateLimiter.class);\n  // 为每个api在内存中存储限流计数器\n  private ConcurrentHashMap&lt;String, RateLimitAlg&gt; counters = new ConcurrentHashMap&lt;&gt;();\n  private RateLimitRule rule;\n\n  public RateLimiter() {\n    // 将限流规则配置文件ratelimiter-rule.yaml中的内容读取到RuleConfig中\n    InputStream in = null;\n    RuleConfig ruleConfig = null;\n    try {\n      in = this.getClass().getResourceAsStream(&quot;/ratelimiter-rule.yaml&quot;);\n      if (in != null) {\n        Yaml yaml = new Yaml();\n        ruleConfig = yaml.loadAs(in, RuleConfig.class);\n      }\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException e) {\n          log.error(&quot;close file error:{}&quot;, e);\n        }\n      }\n    }\n\n    // 将限流规则构建成支持快速查找的数据结构RateLimitRule\n    this.rule = new RateLimitRule(ruleConfig);\n  }\n\n  public boolean limit(String appId, String url) throws InternalErrorException {\n    ApiLimit apiLimit = rule.getLimit(appId, url);\n    if (apiLimit == null) {\n      return true;\n    }\n\n    // 获取api对应在内存中的限流计数器（rateLimitCounter）\n    String counterKey = appId + &quot;:&quot; + apiLimit.getApi();\n    RateLimitAlg rateLimitCounter = counters.get(counterKey);\n    if (rateLimitCounter == null) {\n      RateLimitAlg newRateLimitCounter = new RateLimitAlg(apiLimit.getLimit());\n      rateLimitCounter = counters.putIfAbsent(counterKey, newRateLimitCounter);\n      if (rateLimitCounter == null) {\n        rateLimitCounter = newRateLimitCounter;\n      }\n    }\n\n    // 判断是否限流\n    return rateLimitCounter.tryAcquire();\n  }\n}\n</code></pre><p>RateLimiter类用来串联整个限流流程。它先读取限流规则配置文件，映射为内存中的Java对象（RuleConfig），然后再将这个中间结构构建成一个支持快速查询的数据结构（RateLimitRule）。除此之外，这个类还提供供用户直接使用的最顶层接口（limit()接口）。</p><p><strong>我们再来看下RuleConfig和ApiLimit两个类。</strong>代码如下所示：</p><pre><code>public class RuleConfig {\n  private List&lt;AppRuleConfig&gt; configs;\n\n  public List&lt;AppRuleConfig&gt; getConfigs() {\n    return configs;\n  }\n\n  public void setConfigs(List&lt;AppRuleConfig&gt; configs) {\n    this.configs = configs;\n  }\n\n  public static class AppRuleConfig {\n    private String appId;\n    private List&lt;ApiLimit&gt; limits;\n\n    public AppRuleConfig() {}\n\n    public AppRuleConfig(String appId, List&lt;ApiLimit&gt; limits) {\n      this.appId = appId;\n      this.limits = limits;\n    }\n    //...省略getter、setter方法...\n  }\n}\n\npublic class ApiLimit {\n  private static final int DEFAULT_TIME_UNIT = 1; // 1 second\n  private String api;\n  private int limit;\n  private int unit = DEFAULT_TIME_UNIT;\n\n  public ApiLimit() {}\n\n  public ApiLimit(String api, int limit) {\n    this(api, limit, DEFAULT_TIME_UNIT);\n  }\n\n  public ApiLimit(String api, int limit, int unit) {\n    this.api = api;\n    this.limit = limit;\n    this.unit = unit;\n  }\n  // ...省略getter、setter方法...\n}\n</code></pre><p>从代码中，我们可以看出来，RuleConfig类嵌套了另外两个类AppRuleConfig和ApiLimit。这三个类跟配置文件的三层嵌套结构完全对应。我把对应关系标注在了下面的示例中，你可以对照着代码看下。</p><pre><code>configs:          &lt;!--对应RuleConfig--&gt;\n- appId: app-1    &lt;!--对应AppRuleConfig--&gt;\n  limits:\n  - api: /v1/user &lt;!--对应ApiLimit--&gt;\n    limit: 100\n    unit：60\n  - api: /v1/order\n    limit: 50\n- appId: app-2\n  limits:\n  - api: /v1/user\n    limit: 50\n  - api: /v1/order\n    limit: 50\n</code></pre><p><strong>我们再来看下RateLimitRule这个类。</strong></p><p>你可能会好奇，有了RuleConfig来存储限流规则，为什么还要RateLimitRule类呢？这是因为，限流过程中会频繁地查询接口对应的限流规则，为了尽可能地提高查询速度，我们需要将限流规则组织成一种支持按照URL快速查询的数据结构。考虑到URL的重复度比较高，且需要按照前缀来匹配，我们这里选择使用Trie树这种数据结构。我举了个例子解释一下，如下图所示。左边的限流规则对应到Trie树，就是图中右边的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/6b/1cf3743dd97fe52ccae5ef62c604976b.jpg?wh=1993*889\" alt=\"\"></p><p>RateLimitRule的实现代码比较多，我就不在这里贴出来了，我只给出它的定义，如下所示。如果你感兴趣的话，可以自己实现一下，也可以参看我的另一个专栏《数据结构与算法之美》的<a href=\"https://time.geekbang.org/column/article/80388?utm_term=zeusNGLWQ&amp;utm_source=xiangqingye&amp;utm_medium=geektime&amp;utm_campaign=end&amp;utm_content=xiangqingyelink1104\">第55讲</a>。在那节课中，我们对各种接口匹配算法有非常详细的讲解。</p><pre><code>public class RateLimitRule {\n  public RateLimitRule(RuleConfig ruleConfig) {\n    //...\n  }\n\n  public ApiLimit getLimit(String appId, String api) {\n    //...\n  }\n}\n</code></pre><p><strong>最后，我们看下RateLimitAlg这个类。</strong></p><p>这个类是限流算法实现类。它实现了最简单的固定时间窗口限流算法。每个接口都要在内存中对应一个RateLimitAlg对象，记录在当前时间窗口内已经被访问的次数。RateLimitAlg类的代码如下所示。对于代码的算法逻辑，你可以看下上节课中对固定时间窗口限流算法的讲解。</p><pre><code>public class RateLimitAlg {\n  /* timeout for {@code Lock.tryLock() }. */\n  private static final long TRY_LOCK_TIMEOUT = 200L;  // 200ms.\n  private Stopwatch stopwatch;\n  private AtomicInteger currentCount = new AtomicInteger(0);\n  private final int limit;\n  private Lock lock = new ReentrantLock();\n\n  public RateLimitAlg(int limit) {\n    this(limit, Stopwatch.createStarted());\n  }\n\n  @VisibleForTesting\n  protected RateLimitAlg(int limit, Stopwatch stopwatch) {\n    this.limit = limit;\n    this.stopwatch = stopwatch;\n  }\n\n  public boolean tryAcquire() throws InternalErrorException {\n    int updatedCount = currentCount.incrementAndGet();\n    if (updatedCount &lt;= limit) {\n      return true;\n    }\n\n    try {\n      if (lock.tryLock(TRY_LOCK_TIMEOUT, TimeUnit.MILLISECONDS)) {\n        try {\n          if (stopwatch.elapsed(TimeUnit.MILLISECONDS) &gt; TimeUnit.SECONDS.toMillis(1)) {\n            currentCount.set(0);\n            stopwatch.reset();\n          }\n          updatedCount = currentCount.incrementAndGet();\n          return updatedCount &lt;= limit;\n        } finally {\n          lock.unlock();\n        }\n      } else {\n        throw new InternalErrorException(&quot;tryAcquire() wait lock too long:&quot; + TRY_LOCK_TIMEOUT + &quot;ms&quot;);\n      }\n    } catch (InterruptedException e) {\n      throw new InternalErrorException(&quot;tryAcquire() is interrupted by lock-time-out.&quot;, e);\n    }\n  }\n}\n</code></pre><h2>Review最小原型代码</h2><p>刚刚给出的MVP代码，虽然总共也就200多行，但已经实现了V1版本中规划的功能。不过，从代码质量的角度来看，它还有很多值得优化的地方。现在，我们现在站在一个Code Reviewer的角度，来分析一下这段代码的设计和实现。</p><p>结合SOLID、DRY、KISS、LOD、基于接口而非实现编程、高内聚松耦合等经典的设计思想和原则，以及编码规范，我们从代码质量评判标准的角度重点剖析一下，这段代码在可读性、扩展性等方面的表现。其他方面的表现，比如复用性、可测试性等，这些你可以比葫芦画瓢，自己来进行分析。</p><p><strong>首先，我们来看下代码的可读性。</strong></p><p>影响代码可读性的因素有很多。我们重点关注目录设计（package包）是否合理、模块划分是否清晰、代码结构是否高内聚低耦合，以及是否符合统一的编码规范这几点。</p><p>因为涉及的代码不多，目录结构前面也给出了，总体来说比较简单，所以目录设计、包的划分没有问题。</p><p>按照上节课中的模块划分，RuleConfig、ApiLimit、RateLimitRule属于“限流规则”模块，负责限流规则的构建和查询。RateLimitAlg属于“限流算法”模块，提供了基于内存的单机固定时间窗口限流算法。RateLimiter类属于“集成使用”模块，作为最顶层类，组装其他类，提供执行入口（也就是调用入口）。不过，RateLimiter类作为执行入口，我们希望它只负责组装工作，而不应该包含具体的业务逻辑，所以，RateLimiter类中，从配置文件中读取限流规则这块逻辑，应该拆分出来设计成独立的类。</p><p>如果我们把类与类之间的依赖关系图画出来，你会发现，它们之间的依赖关系很简单，每个类的职责也比较单一，所以类的设计满足单一职责原则、LOD迪米特法则、高内聚松耦合的要求。</p><p>从编码规范上来讲，没有超级大的类、函数、代码块。类、函数、变量的命名基本能达意，也符合最小惊奇原则。虽然，有些命名不能一眼就看出是干啥的，有些命名采用了缩写，比如RateLimitAlg，但是我们起码能猜个八九不离十，结合注释（限于篇幅注释都没有写，并不代表不需要写），很容易理解和记忆。</p><p>总结一下，在最小原型代码中，目录设计、代码结构、模块划分、类的设计还算合理清晰，基本符合编码规范，代码的可读性不错！</p><p><strong>其次，我们再来看下代码的扩展性。</strong></p><p>实际上，这段代码最大的问题就是它的扩展性，也是我们最关注的，毕竟后续还有更多版本的迭代开发。编写可扩展代码，关键是要建立扩展意识。这就像下象棋，我们要多往前想几步，为以后做准备。在写代码的时候，我们要时刻思考，这段代码如果要扩展新的功能，那是否可以在尽量少改动代码的情况下完成，还是需要要大动干戈，推倒重写。</p><p>具体到MVP代码，不易扩展的最大原因是，没有遵循基于接口而非实现的编程思想，没有接口抽象意识。比如，RateLimitAlg类只是实现了固定时间窗口限流算法，也没有提炼出更加抽象的算法接口。如果我们要替换其他限流算法，就要改动比较多的代码。其他类的设计也有同样的问题，比如RateLimitRule。</p><p>除此之外，在RateLimiter类中，配置文件的名称、路径，是硬编码在代码中的。尽管我们说约定优于配置，但也要兼顾灵活性，能够让用户在需要的时候，自定义配置文件名称、路径。而且，配置文件的格式只支持Yaml，之后扩展其他格式，需要对这部分代码做很大的改动。</p><h2>重构最小原型代码</h2><p>根据刚刚对MVP代码的剖析，我们发现，它的可读性没有太大问题，问题主要在于可扩展性。主要的修改点有两个，一个是将RateLimiter中的规则配置文件的读取解析逻辑拆出来，设计成独立的类，另一个是参照基于接口而非实现编程思想，对于RateLimitRule、RateLimitAlg类提炼抽象接口。</p><p>按照这个修改思路，我们对代码进行重构。重构之后的目录结构如下所示。我对每个类都稍微做了说明，你可以对比着重构前的目录结构来看。</p><pre><code>// 重构前：\ncom.xzg.ratelimiter\n  --RateLimiter\ncom.xzg.ratelimiter.rule\n  --ApiLimit\n  --RuleConfig\n  --RateLimitRule\ncom.xzg.ratelimiter.alg\n  --RateLimitAlg\n  \n// 重构后：\ncom.xzg.ratelimiter\n  --RateLimiter(有所修改)\ncom.xzg.ratelimiter.rule\n  --ApiLimit(不变)\n  --RuleConfig(不变)\n  --RateLimitRule(抽象接口)\n  --TrieRateLimitRule(实现类，就是重构前的RateLimitRule）\ncom.xzg.ratelimiter.rule.parser\n  --RuleConfigParser(抽象接口)\n  --YamlRuleConfigParser(Yaml格式配置文件解析类)\n  --JsonRuleConfigParser(Json格式配置文件解析类)\ncom.xzg.ratelimiter.rule.datasource\n  --RuleConfigSource(抽象接口)\n  --FileRuleConfigSource(基于本地文件的配置类)\ncom.xzg.ratelimiter.alg\n  --RateLimitAlg(抽象接口)\n  --FixedTimeWinRateLimitAlg(实现类，就是重构前的RateLimitAlg)\n</code></pre><p>其中，RateLimiter类重构之后的代码如下所示。代码的改动集中在构造函数中，通过调用RuleConfigSource来实现了限流规则配置文件的加载。</p><pre><code>public class RateLimiter {\n  private static final Logger log = LoggerFactory.getLogger(RateLimiter.class);\n  // 为每个api在内存中存储限流计数器\n  private ConcurrentHashMap&lt;String, RateLimitAlg&gt; counters = new ConcurrentHashMap&lt;&gt;();\n  private RateLimitRule rule;\n\n  public RateLimiter() {\n    //改动主要在这里：调用RuleConfigSource类来实现配置加载\n    RuleConfigSource configSource = new FileRuleConfigSource();\n    RuleConfig ruleConfig = configSource.load();\n    this.rule = new TrieRateLimitRule(ruleConfig);\n  }\n\n  public boolean limit(String appId, String url) throws InternalErrorException, InvalidUrlException {\n    //...代码不变...\n  }\n}\n</code></pre><p>我们再来看下，从RateLimiter中拆分出来的限流规则加载的逻辑，现在是如何设计的。这部分涉及的类主要是下面几个。我把关键代码也贴在了下面。其中，各个Parser和RuleConfigSource类的设计有点类似策略模式，如果要添加新的格式的解析，只需要实现对应的Parser类，并且添加到FileRuleConfig类的PARSER_MAP中就可以了。</p><pre><code>com.xzg.ratelimiter.rule.parser\n  --RuleConfigParser(抽象接口)\n  --YamlRuleConfigParser(Yaml格式配置文件解析类)\n  --JsonRuleConfigParser(Json格式配置文件解析类)\ncom.xzg.ratelimiter.rule.datasource\n  --RuleConfigSource(抽象接口)\n  --FileRuleConfigSource(基于本地文件的配置类)\n  \npublic interface RuleConfigParser {\n  RuleConfig parse(String configText);\n  RuleConfig parse(InputStream in);\n}\n\npublic interface RuleConfigSource {\n  RuleConfig load();\n}\n\npublic class FileRuleConfigSource implements RuleConfigSource {\n  private static final Logger log = LoggerFactory.getLogger(FileRuleConfigSource.class);\n\n  public static final String API_LIMIT_CONFIG_NAME = &quot;ratelimiter-rule&quot;;\n  public static final String YAML_EXTENSION = &quot;yaml&quot;;\n  public static final String YML_EXTENSION = &quot;yml&quot;;\n  public static final String JSON_EXTENSION = &quot;json&quot;;\n\n  private static final String[] SUPPORT_EXTENSIONS =\n      new String[] {YAML_EXTENSION, YML_EXTENSION, JSON_EXTENSION};\n  private static final Map&lt;String, RuleConfigParser&gt; PARSER_MAP = new HashMap&lt;&gt;();\n\n  static {\n    PARSER_MAP.put(YAML_EXTENSION, new YamlRuleConfigParser());\n    PARSER_MAP.put(YML_EXTENSION, new YamlRuleConfigParser());\n    PARSER_MAP.put(JSON_EXTENSION, new JsonRuleConfigParser());\n  }\n\n  @Override\n  public RuleConfig load() {\n    for (String extension : SUPPORT_EXTENSIONS) {\n      InputStream in = null;\n      try {\n        in = this.getClass().getResourceAsStream(&quot;/&quot; + getFileNameByExt(extension));\n        if (in != null) {\n          RuleConfigParser parser = PARSER_MAP.get(extension);\n          return parser.parse(in);\n        }\n      } finally {\n        if (in != null) {\n          try {\n            in.close();\n          } catch (IOException e) {\n            log.error(&quot;close file error:{}&quot;, e);\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private String getFileNameByExt(String extension) {\n    return API_LIMIT_CONFIG_NAME + &quot;.&quot; + extension;\n  }\n}\n</code></pre><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>优秀的代码是重构出来的，复杂的代码是慢慢堆砌出来的。小步快跑、逐步迭代是我比较推崇的开发模式。追求完美主义会让我们迟迟无法下手。所以，为了克服这个问题，一方面，我们可以规划多个小版本来开发，不断迭代优化；另一方面，在编程实现的过程中，我们可以先实现MVP代码，以此来优化重构。</p><p>如何对MVP代码优化重构呢？我们站在Code Reviewer的角度，结合SOLID、DRY、KISS、LOD、基于接口而非实现编程、高内聚松耦合等经典的设计思想和原则，以及编码规范，从代码质量评判标准的角度，来剖析代码在可读性、扩展性、可维护性、灵活、简洁、复用性、可测试性等方面的表现，并且针对性地去优化不足。</p><h2>课堂讨论</h2><ol>\n<li>针对MVP代码，如果让你做code review，你还能发现哪些问题？如果让你做重构，你还会做哪些修改和优化？</li>\n<li>如何重构代码，支持自定义限流规则配置文件名和路径？如果你熟悉Java，你可以去了解一下Spring的设计思路，看看如何借鉴到限流框架中来解决这个问题？</li>\n</ol><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":223785,"user_name":"HuaMax","can_delete":false,"product_type":"c1","uid":1118488,"ip_address":"","ucode":"2E78DE1AF098AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","comment_is_top":false,"comment_ctime":1591179908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83195558532","product_id":100039001,"comment_content":"stopwatch.reset()之后要调用stopwatch.start()重新开始，或者stopwatch.stop().start()，亲入坑。。。","like_count":19},{"had_liked":false,"id":224350,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1591350859,"is_pvip":false,"replies":[{"id":"84006","content":"感谢你的补充！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592527087,"ip_address":"","comment_id":224350,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57425925707","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;wangzheng0822&#47;ratelimiter4j<br>老师忘记在专栏里面放自己项目的地址了么，翻看隔壁算法之美发现的","like_count":13,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497449,"discussion_content":"感谢你的补充！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592527087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/53/eda4b622.jpg","nickname":"Smile @ Life","note":"","ucode":"320EDAD5A8BE56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298047,"discussion_content":"老师是想让你自己想的，结果你直接去看答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597156377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1045078,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","nickname":"Jie","note":"","ucode":"AB94041E548FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1293907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/53/eda4b622.jpg","nickname":"Smile @ Life","note":"","ucode":"320EDAD5A8BE56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298066,"discussion_content":"算法专栏比设计模式早出一年多……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597160291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298047,"ip_address":""},"score":298066,"extra":""}]}]},{"had_liked":false,"id":223687,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1591156176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48835796432","product_id":100039001,"comment_content":"课后习题二：<br>如何重构代码，支持自定义限流规则配置文件名和路径？<br><br>\tpublic static final String DEFAULT_API_LIMIT_CONFIG_NAME = &quot;ratelimiter-rule&quot;;<br>\tprivate final String customApiLimitConfigPath;<br>\tpublic FileRuleConfigSource(String configLocation) {<br>\t\tthis.customApiLimitConfigPath = configLocation;<br>\t}<br><br>\tprivate String getFileNameByExt(String extension) {<br>\t\treturn StringUtils.isEmpty(customApiLimitConfigPath) ?<br>\t\t\t\tDEFAULT_API_LIMIT_CONFIG_NAME + &quot;.&quot; + extension<br>\t\t\t\t: customApiLimitConfigPath;<br>\t}<br>Spring boot 如何实现配置文件约定和扫描？可以去看看ConfigFileApplicationListener 这个类，如何跑起来，请去debug，不懂怎么debug，请新建窗口输入 google.com","like_count":11},{"had_liked":false,"id":223582,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1591136226,"is_pvip":false,"replies":[{"id":"84011","content":"代码都在文章里了，你也可以看下我github上的一个比较老的版本的，但写的比较详细<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592527263,"ip_address":"","comment_id":223582,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27360940002","product_id":100039001,"comment_content":"老师今天讲的骨架，有代码吗，我想结合你讲的自己再多考虑和分析，学习其中的方法解决的问题","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497176,"discussion_content":"代码都在文章里了，你也可以看下我github上的一个比较老的版本的，但写的比较详细\nhttps://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592527263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271555,"user_name":"bucher","can_delete":false,"product_type":"c1","uid":1203973,"ip_address":"","ucode":"2A482BDBA2FD12","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/05/ca9ce3e9.jpg","comment_is_top":false,"comment_ctime":1609691044,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14494592932","product_id":100039001,"comment_content":"感谢争哥，写的很棒。根据url查找限流规则使用了trie树这块是不是属于过度设计呢？一个app下的api个数不多的情况，直接用map存就可以了吧（map的key使用url名）","like_count":3,"discussions":[{"author":{"id":1062804,"avatar":"https://static001.geekbang.org/account/avatar/00/10/37/94/723ec0e9.jpg","nickname":"佐镜兄","note":"","ucode":"18DB653A028632","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374062,"discussion_content":"map对完整路径是没有问题，考虑到扩张性，如支持通配符的路径，map就没辙了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1620983291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179622,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/e6/4b0ddfcf.jpg","nickname":"李飞","note":"","ucode":"4B23FF72AA4BA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360668,"discussion_content":"trie树适合前缀查找啊，map占用空间比trie树大吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616501910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224058,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1591263808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14476165696","product_id":100039001,"comment_content":"1、RateLimiter类中，构建api对应在内存中的限流计数器（RateLimitAlg）这个逻辑可以独立出来，初始化的过程中，就将api和相应RateLimitAlg实现类的对应关系建立好；  2、可以使用DI框架，FileRuleConfigSource构建时，从bean配置文件读取构造参数，如果没有提供构造参数就用默认值","like_count":3},{"had_liked":false,"id":223623,"user_name":"leezer","can_delete":false,"product_type":"c1","uid":1111111,"ip_address":"","ucode":"427DE9CD21E1EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/TEzJ59GslVXQeZqwFgGhABF7K8bFFlud2pcsEPvEyruP7NGQTuh38IbiajdVYUSViaDJrIkJVnv3vdjPA9YENp5w/132","comment_is_top":false,"comment_ctime":1591145456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14476047344","product_id":100039001,"comment_content":"RatelimitAlg在重构后应该是可支持多种算法形式，那么在limit调用的时候应该不是直接new出来，可以通过策略形式进行配置，而算法的选取应该包含默认和指定，也可以配置到文件规则里面。","like_count":3},{"had_liked":false,"id":251431,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1601549445,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10191484037","product_id":100039001,"comment_content":"tryAcquire 为什么要 调用两次 currentCount.incrementAndGet()方法呢？没太看懂，有大佬解释一下吗","like_count":2,"discussions":[{"author":{"id":1394822,"avatar":"https://static001.geekbang.org/account/avatar/00/15/48/86/54c68afe.jpg","nickname":"铁男神sama","note":"","ucode":"0A3E3E61D36EDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379694,"discussion_content":"如果没超过限制，直接返回true 如果超过限制了，看下时间是否符合重置限制然后再加","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624079921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1787101,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/44/dd/1718bd09.jpg","nickname":"quiet、killer","note":"","ucode":"F087B35FF25150","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1394822,"avatar":"https://static001.geekbang.org/account/avatar/00/15/48/86/54c68afe.jpg","nickname":"铁男神sama","note":"","ucode":"0A3E3E61D36EDE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573865,"discussion_content":"那要是超过了限制。时间不符合重置限制，多加一次也无所谓了是吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653701153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379694,"ip_address":""},"score":573865,"extra":""},{"author":{"id":1002201,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","nickname":"Mew151","note":"","ucode":"D4793F5874F345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1787101,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/44/dd/1718bd09.jpg","nickname":"quiet、killer","note":"","ucode":"F087B35FF25150","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582266,"discussion_content":"我理解既然已经超了限制，也没过时间窗口期，多不多加一次都无所谓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659341598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573865,"ip_address":"北京"},"score":582266,"extra":""}]}]},{"had_liked":false,"id":250097,"user_name":"Geek_5aae47","can_delete":false,"product_type":"c1","uid":2176180,"ip_address":"","ucode":"2E6D974EE836E6","user_header":"","comment_is_top":false,"comment_ctime":1600933775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10190868367","product_id":100039001,"comment_content":"第二次的updatedCount = currentCount.incrementAndGet()没太看懂放在if外面的用意，是否放入stopwatch.reset()之后会好一点。","like_count":2},{"had_liked":false,"id":239116,"user_name":"Tobias","can_delete":false,"product_type":"c1","uid":1803858,"ip_address":"","ucode":"F3225639EDA193","user_header":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","comment_is_top":false,"comment_ctime":1596438895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186373487","product_id":100039001,"comment_content":"课后习题：<br>让使用者通过注解方式，在项目启动是加载配置。配置可以像这样@Ratelimiter(datasourcetype=&quot;local&quot;, datasourcepath=&#39;xxx&#39;, parser=&#39;json&#39;)","like_count":2},{"had_liked":false,"id":227732,"user_name":"杨杰","can_delete":false,"product_type":"c1","uid":1131823,"ip_address":"","ucode":"74817EA9499843","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/2f/b0b0dd74.jpg","comment_is_top":false,"comment_ctime":1592466559,"is_pvip":false,"replies":[{"id":"83991","content":"可以把选择哪种限流算法配置到配置文件中，但没有必要给每个appid都配置不同的限流算法吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592525426,"ip_address":"","comment_id":227732,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10182401151","product_id":100039001,"comment_content":"<br>1、在配置文件中是否应该指定默认的限流算法和每个api（或appid）对应的算法，在加载配置文件的时候自动生成这个配置算法的实例<br>2、在RateLimiter中的limit方法里面添加每个api对应的限流算法这个地方感觉有点儿不太好，如果每个API对应的限流算法都不一样会导致大量的If else 判断，是不是应该像第一点说的那样初始化的时候就自动生成了。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498761,"discussion_content":"可以把选择哪种限流算法配置到配置文件中，但没有必要给每个appid都配置不同的限流算法吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592525426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223690,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1591156707,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10181091299","product_id":100039001,"comment_content":"1.随手写都如此牛逼。。。<br>2.还是有个git代码仓好点，这样手机看难受。<br>3.为什么要懒加载，直接在初始化时，将算法规则与算法实例绑定，将api与限流算法实例绑定。对于这个限流框架的应用场景不是更合适吗。如此便可以把懒加载的代码抽离，使业务聚焦业务而不用关心实例创建。<br>4.还得考虑动态限流配置调整的功能。","like_count":2,"discussions":[{"author":{"id":1045078,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","nickname":"Jie","note":"","ucode":"AB94041E548FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279473,"discussion_content":"https://github.com/wangzheng0822/ratelimiter4j","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591350793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223562,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1591114477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10181049069","product_id":100039001,"comment_content":"哈哈，新鲜出炉","like_count":2},{"had_liked":false,"id":223804,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1591183909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886151205","product_id":100039001,"comment_content":"1.可以将配置类和实际的拦截器接口实现类进行相分离,然后在实现类里面去执行查找接口拦截规则并执行对应接口的Alg,对于Alg实现类,抽取出接口,方便自定义算法,并且在内部实现诸如漏桶算法的实现,利用用户配置和策略模式来进行实现<br>2.对于这个问题,可以参考Spring给出的Resource接口,并给出了基于不同的读取方式的实现类,而且为了简化开发,给出ResourceLoader,并且还有着DefaultResourceLoader,可以根据传入前缀,来创建不同的Resource,对于字符串查找树这个实现,我是真的没想到,不过可以在这个基础上,借鉴HashMap的实现,在api接口足够少的时候,使用简单的map保存,多了再转为树<br>再往深了说,BeanFactory需要传入资源生成对应的实体Bean,而为了简化开发,一般是使用ApplicationContext来初始化Bean,需要传入一个资源给ApplicationContext,并在里面动态解析生成Bean对象,这样的流程,值得我们的框架借鉴点有很多<br>","like_count":1},{"had_liked":false,"id":223631,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1591146384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886113680","product_id":100039001,"comment_content":"Ralimiter#tryAcquire 方法，前三行，先更新count是否有问题，当前时间窗口可能会累积上一个时间窗口的计数，导致统计不准确","like_count":1},{"had_liked":false,"id":223610,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1591144121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886111417","product_id":100039001,"comment_content":"学习学习","like_count":1},{"had_liked":false,"id":360220,"user_name":"突围","can_delete":false,"product_type":"c1","uid":1090414,"ip_address":"北京","ucode":"03E865CC8A6F2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/6e/52580973.jpg","comment_is_top":false,"comment_ctime":1666314569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666314569","product_id":100039001,"comment_content":"讲得不错，颇有收益","like_count":0},{"had_liked":false,"id":329049,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1641081571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641081571","product_id":100039001,"comment_content":"站在code reviewer的角度，感觉代码的看着有点乱，命名不舒服，inline comments 太少了。。","like_count":0},{"had_liked":false,"id":328697,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640845531,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640845531","product_id":100039001,"comment_content":"limit函数是被高频调用的，感觉不应该做复杂计算。如果限流算法复杂的话，不如只在limit函数里对某个标记位&#47;map做快速查询，true通过false拒绝，然后通过另一个定时（例如10ms）函数去执行限流算法，更新标记位&#47;map。","like_count":0},{"had_liked":false,"id":258859,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1604569429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604569429","product_id":100039001,"comment_content":"打卡92","like_count":0},{"had_liked":false,"id":255205,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1603279776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603279776","product_id":100039001,"comment_content":"读取配置也不一定会从文件中去，可能是从配置中心去，因此也可以使用工厂方法来建对应的配置类","like_count":0},{"had_liked":false,"id":255202,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1603279635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603279635","product_id":100039001,"comment_content":"限流算法可以使用策略模式  根据配置文件来选择","like_count":0},{"had_liked":false,"id":251168,"user_name":"Geek_558387","can_delete":false,"product_type":"c1","uid":1617369,"ip_address":"","ucode":"2EA857EBC365B5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","comment_is_top":false,"comment_ctime":1601387753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601387753","product_id":100039001,"comment_content":"与springboot的集成哪里去了","like_count":0},{"had_liked":false,"id":247388,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1599698481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599698481","product_id":100039001,"comment_content":"原来小争哥写代码第一次也是一把梭，然后再重构。学习了！","like_count":0},{"had_liked":false,"id":241867,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1597477036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597477036","product_id":100039001,"comment_content":"问题1：因为限流配置等是全局唯一的，因此将ratelimiter设计为单例类可能更合适","like_count":0},{"had_liked":false,"id":241440,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1597296501,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1597296501","product_id":100039001,"comment_content":"1、counter计数放在Alg类中似乎不是太合适。<br>2、算法应该是策略性的，可能使用策略模式比较合适。","like_count":0},{"had_liked":false,"id":241379,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1597282157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597282157","product_id":100039001,"comment_content":"ApiLimit 感觉还是有一定局限性。目前只支持固定窗口没问题，如果要支持令牌桶、漏桶等复杂算法，参数是不够的，个人觉得这个类可以和算法类偶尔在一起成为一个策略。毕竟算法依赖于参数的选择","like_count":0},{"had_liked":false,"id":225592,"user_name":"沧海","can_delete":false,"product_type":"c1","uid":1285431,"ip_address":"","ucode":"8ED876B8DE5CEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/9d/37/b2b73806.jpg","comment_is_top":false,"comment_ctime":1591797016,"is_pvip":false,"replies":[{"id":"84976","content":"嗯呢，多谢指出！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593310897,"ip_address":"","comment_id":225592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591797016","product_id":100039001,"comment_content":"public class RuleConfig {  <br>  private List&lt;UniformRuleConfig&gt; configs;  <br>  public List&lt;AppRuleConfig&gt; getConfigs() {    <br>    return configs; <br>  }<br>}<br>RuleConfig中的属性configs类型应该是List&lt;AppRuleConfig&gt;","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497907,"discussion_content":"嗯呢，多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593310897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}