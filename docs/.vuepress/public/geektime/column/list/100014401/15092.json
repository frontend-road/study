{"id":15092,"title":"06 | 如何实现RPC远程服务调用？","content":"<p>专栏上一期我讲过，要完成一次服务调用，首先要解决的问题是服务消费者如何得到服务提供者的地址，其中注册中心扮演了关键角色，服务提供者把自己的地址登记到注册中心，服务消费者就可以查询注册中心得到服务提供者的地址，可以说注册中心犹如海上的一座灯塔，为服务消费者指引了前行的方向。</p><p>有了服务提供者的地址后，服务消费者就可以向这个地址发起请求了，但这时候也产生了一个新的问题。你知道，在单体应用时，一次服务调用发生在同一台机器上的同一个进程内部，也就是说调用发生在本机内部，因此也被叫作本地方法调用。在进行服务化拆分之后，服务提供者和服务消费者运行在两台不同物理机上的不同进程内，它们之间的调用相比于本地方法调用，可称之为远程方法调用，简称RPC（Remote Procedure Call），那么<span class=\"orange\">RPC调用是如何实现的呢？</span></p><p>在介绍RPC调用的原理之前，先来想象一下一次电话通话的过程。首先，呼叫者A通过查询号码簿找到被呼叫者B的电话号码，然后拨打B的电话。B接到来电提示时，如果方便接听的话就会接听；如果不方便接听的话，A就得一直等待。当等待超过一段时间后，电话会因超时被挂断，这个时候A需要再次拨打电话，一直等到B空闲的时候，才能接听。</p><!-- [[[read_end]]] --><p>RPC调用的原理与此类似，我习惯把服务消费者叫作<strong>客户端</strong>，服务提供者叫作<strong>服务端</strong>，两者通常位于网络上两个不同的地址，要完成一次RPC调用，就必须先建立网络连接。建立连接后，双方还必须按照某种约定的协议进行网络通信，这个协议就是通信协议。双方能够正常通信后，服务端接收到请求时，需要以某种方式进行处理，处理成功后，把请求结果返回给客户端。为了减少传输的数据大小，还要对数据进行压缩，也就是对数据进行序列化。</p><p>上面就是RPC调用的过程，由此可见，想要完成调用，你需要解决四个问题：</p><ul>\n<li>\n<p>客户端和服务端如何建立网络连接？</p>\n</li>\n<li>\n<p>服务端如何处理请求？</p>\n</li>\n<li>\n<p>数据传输采用什么协议？</p>\n</li>\n<li>\n<p>数据该如何序列化和反序列化？</p>\n</li>\n</ul><h2>客户端和服务端如何建立网络连接？</h2><p>根据我的实践经验，客户端和服务端之间基于TCP协议建立网络连接最常用的途径有两种。</p><p><strong>1. HTTP通信</strong></p><p>HTTP通信是基于应用层HTTP协议的，而HTTP协议又是基于传输层TCP协议的。一次HTTP通信过程就是发起一次HTTP调用，而一次HTTP调用就会建立一个TCP连接，经历一次下图所示的“<a href=\"http://condor.depaul.edu/jkristof/technotes/tcp.html\">三次握手</a>”的过程来建立连接。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/bd/61bfb298c82c441681fb88b7519ecebd.jpg?wh=806*535\" alt=\"\"></p><p>完成请求后，再经历一次“四次挥手”的过程来断开连接。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/6f/cb614475054bc5895013748c1139a66f.jpg?wh=852*568\" alt=\"\"></p><p><strong>2. Socket通信</strong></p><p>Socket通信是基于TCP/IP协议的封装，建立一次Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ；另一个运行于服务器端，称为ServerSocket 。就像下图所描述的，Socket通信的过程分为四个步骤：服务器监听、客户端请求、连接确认、数据传输。</p><ul>\n<li>\n<p>服务器监听：ServerSocket通过调用bind()函数绑定某个具体端口，然后调用listen()函数实时监控网络状态，等待客户端的连接请求。</p>\n</li>\n<li>\n<p>客户端请求：ClientSocket调用connect()函数向ServerSocket绑定的地址和端口发起连接请求。</p>\n</li>\n<li>\n<p>服务端连接确认：当ServerSocket监听到或者接收到ClientSocket的连接请求时，调用accept()函数响应ClientSocket的请求，同客户端建立连接。</p>\n</li>\n<li>\n<p>数据传输：当ClientSocket和ServerSocket建立连接后，ClientSocket调用send()函数，ServerSocket调用receive()函数，ServerSocket处理完请求后，调用send()函数，ClientSocket调用receive()函数，就可以得到得到返回结果。</p>\n</li>\n</ul><p>直接理解可能有点抽象，你可以把这个过程套入前面我举的“打电话”的例子，可以方便你理解Socket通信过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/94/14362fab592dee5226bb498e3e46e994.jpg?wh=280*354\" alt=\"\"></p><p>当客户端和服务端建立网络连接后，就可以发起请求了。但网络不一定总是可靠的，经常会遇到网络闪断、连接超时、服务端宕机等各种异常，通常的处理手段有两种。</p><ul>\n<li>\n<p>链路存活检测：客户端需要定时地发送心跳检测消息（一般是通过ping请求）给服务端，如果服务端连续n次心跳检测或者超过规定的时间都没有回复消息，则认为此时链路已经失效，这个时候客户端就需要重新与服务端建立连接。</p>\n</li>\n<li>\n<p>断连重试：通常有多种情况会导致连接断开，比如客户端主动关闭、服务端宕机或者网络故障等。这个时候客户端就需要与服务端重新建立连接，但一般不能立刻完成重连，而是要等待固定的间隔后再发起重连，避免服务端的连接回收不及时，而客户端瞬间重连的请求太多而把服务端的连接数占满。</p>\n</li>\n</ul><h2>服务端如何处理请求？</h2><p>假设这时候客户端和服务端已经建立了网络连接，服务端又该如何处理客户端的请求呢？通常来讲，有三种处理方式。</p><ul>\n<li>\n<p>同步阻塞方式（BIO），客户端每发一次请求，服务端就生成一个线程去处理。当客户端同时发起的请求很多时，服务端需要创建很多的线程去处理每一个请求，如果达到了系统最大的线程数瓶颈，新来的请求就没法处理了。</p>\n</li>\n<li>\n<p>同步非阻塞方式 (NIO)，客户端每发一次请求，服务端并不是每次都创建一个新线程来处理，而是通过I/O多路复用技术进行处理。就是把多个I/O的阻塞复用到同一个select的阻塞上，从而使系统在单线程的情况下可以同时处理多个客户端请求。这种方式的优势是开销小，不用为每个请求创建一个线程，可以节省系统开销。</p>\n</li>\n<li>\n<p>异步非阻塞方式（AIO），客户端只需要发起一个I/O操作然后立即返回，等I/O操作真正完成以后，客户端会得到I/O操作完成的通知，此时客户端只需要对数据进行处理就好了，不需要进行实际的I/O读写操作，因为真正的I/O读取或者写入操作已经由内核完成了。这种方式的优势是客户端无需等待，不存在阻塞等待问题。</p>\n</li>\n</ul><p>从前面的描述，可以看出来不同的处理方式适用于不同的业务场景，根据我的经验：</p><ul>\n<li>\n<p>BIO适用于连接数比较小的业务场景，这样的话不至于系统中没有可用线程去处理请求。这种方式写的程序也比较简单直观，易于理解。</p>\n</li>\n<li>\n<p>NIO适用于连接数比较多并且请求消耗比较轻的业务场景，比如聊天服务器。这种方式相比BIO，相对来说编程比较复杂。</p>\n</li>\n<li>\n<p>AIO适用于连接数比较多而且请求消耗比较重的业务场景，比如涉及I/O操作的相册服务器。这种方式相比另外两种，编程难度最大，程序也不易于理解。</p>\n</li>\n</ul><p>上面两个问题就是“通信框架”要解决的问题，你可以基于现有的Socket通信，在服务消费者和服务提供者之间建立网络连接，然后在服务提供者一侧基于BIO、NIO和AIO三种方式中的任意一种实现服务端请求处理，最后再花费一些精力去解决服务消费者和服务提供者之间的网络可靠性问题。这种方式对于Socket网络编程、多线程编程知识都要求比较高，感兴趣的话可以尝试自己实现一个通信框架。<strong>但我建议最为稳妥的方式是使用成熟的开源方案</strong>，比如Netty、MINA等，它们都是经过业界大规模应用后，被充分论证是很可靠的方案。</p><p>假设客户端和服务端的连接已经建立了，服务端也能正确地处理请求了，接下来完成一次正常地RPC调用还需要解决两个问题，即数据传输采用什么协议以及数据该如何序列化和反序列化。</p><h2>数据传输采用什么协议？</h2><p>首先来看第一个问题，数据传输采用什么协议？</p><p>最常用的有HTTP协议，它是一种开放的协议，各大网站的服务器和浏览器之间的数据传输大都采用了这种协议。还有一些定制的私有协议，比如阿里巴巴开源的Dubbo协议，也可以用于服务端和客户端之间的数据传输。无论是开放的还是私有的协议，都必须定义一个“契约”，以便服务消费者和服务提供者之间能够达成共识。服务消费者按照契约，对传输的数据进行编码，然后通过网络传输过去；服务提供者从网络上接收到数据后，按照契约，对传输的数据进行解码，然后处理请求，再把处理后的结果进行编码，通过网络传输返回给服务消费者；服务消费者再对返回的结果进行解码，最终得到服务提供者处理后的返回值。</p><p>通常协议契约包括两个部分：消息头和消息体。其中消息头存放的是协议的公共字段以及用户扩展字段，消息体存放的是传输数据的具体内容。</p><p>以HTTP协议为例，下图展示了一段采用HTTP协议传输的数据响应报文，主要分为消息头和消息体两部分，其中消息头中存放的是协议的公共字段，比如Server代表是服务端服务器类型、Content-Length代表返回数据的长度、Content-Type代表返回数据的类型；消息体中存放的是具体的返回结果，这里就是一段HTML网页代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/b7/e2b3614e1ea94b08b903d00757a3feb7.png?wh=1194*852\" alt=\"\"></p><h2>数据该如何序列化和反序列化？</h2><p>再看第二个问题，数据该如何序列化和反序列化。</p><p>一般数据在网络中进行传输前，都要先在发送方一端对数据进行编码，经过网络传输到达另一端后，再对数据进行解码，这个过程就是序列化和反序列化。</p><p>为什么要对数据进行序列化和反序列化呢？要知道网络传输的耗时一方面取决于网络带宽的大小，另一方面取决于数据传输量。要想加快网络传输，要么提高带宽，要么减小数据传输量，而对数据进行编码的主要目的就是减小数据传输量。比如一部高清电影原始大小为30GB，如果经过特殊编码格式处理，可以减小到3GB，同样是100MB/s的网速，下载时间可以从300s减小到30s。</p><p>常用的序列化方式分为两类：文本类如XML/JSON等，二进制类如PB/Thrift等，而具体采用哪种序列化方式，主要取决于三个方面的因素。</p><ul>\n<li>\n<p>支持数据结构类型的丰富度。数据结构种类支持的越多越好，这样的话对于使用者来说在编程时更加友好，有些序列化框架如Hessian  2.0还支持复杂的数据结构比如Map、List等。</p>\n</li>\n<li>\n<p>跨语言支持。序列化方式是否支持跨语言也是一个很重要的因素，否则使用的场景就比较局限，比如Java序列化只支持Java语言，就不能用于跨语言的服务调用了。</p>\n</li>\n<li>\n<p>性能。主要看两点，一个是序列化后的压缩比，一个是序列化的速度。以常用的PB序列化和JSON序列化协议为例来对比分析，PB序列化的压缩比和速度都要比JSON序列化高很多，所以对性能和存储空间要求比较高的系统选用PB序列化更合适；而JSON序列化虽然性能要差一些，但可读性更好，更适合对外部提供服务。</p>\n</li>\n</ul><h2>总结</h2><p>今天我给你讲解了服务调用需要解决的几个问题，其中你需要掌握：</p><ul>\n<li>\n<p><strong>通信框架</strong>。它主要解决客户端和服务端如何建立连接、管理连接以及服务端如何处理请求的问题。</p>\n</li>\n<li>\n<p><strong>通信协议</strong>。它主要解决客户端和服务端采用哪种数据传输协议的问题。</p>\n</li>\n<li>\n<p><strong>序列化和反序列化</strong>。它主要解决客户端和服务端采用哪种数据编解码的问题。</p>\n</li>\n</ul><p>这三个部分就组成了一个完整的RPC调用框架，通信框架提供了基础的通信能力，通信协议描述了通信契约，而序列化和反序列化则用于数据的编/解码。一个通信框架可以适配多种通信协议，也可以采用多种序列化和反序列化的格式，比如服务化框架Dubbo不仅支持Dubbo协议，还支持RMI协议、HTTP协议等，而且还支持多种序列化和反序列化格式，比如JSON、Hession  2.0以及Java序列化等。</p><h2>思考题</h2><p>gRPC是一个优秀的跨语言RPC调用框架，按照今天我给你讲的服务调用知识，通过阅读<a href=\"https://grpc.io/docs/\">官方文档</a>，你能给出gRPC调用的实现原理吗？</p><p>欢迎你在留言区写下自己的思考，与我一起讨论。</p>","neighbors":{"left":{"article_title":"05 | 如何注册和发现服务？","id":14603},"right":{"article_title":"07 | 如何监控微服务调用？","id":15109}},"comments":[{"had_liked":false,"id":22897,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1536024497,"is_pvip":false,"replies":[{"id":"8359","content":"确实，理论上用字符串就也可以，序列化能映射的同时也能压缩数据","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536145089,"ip_address":"","comment_id":22897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"336543473585","product_id":100014401,"comment_content":"我觉得压缩只是序列化的一个原因，但却不是最本质的原因。序列化是为了解决内存中数据结构到字节序列的映射过程中，如何保留各个结构和字段间的关系而生的技术。","like_count":78,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423311,"discussion_content":"确实，理论上用字符串就也可以，序列化能映射的同时也能压缩数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536145089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96310,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1558397870,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"91752711086","product_id":100014401,"comment_content":"这节原理讲的好，所有的RPC框架应该都是一样的，那为啥还会存在那么多的RPC框架呢？重复造轮子显然会花费人力物力，益处是啥呢？相信老师后面会讲的<br><br>正如许多同学都发现了一样，本节讲的也存在一点点瑕疵。<br><br>我觉得RPC最核心，少了就是不行那部分内容如下：<br>1：网络链接，没有这个谈不上R<br>2：序列化和反序列化，没有这个服务之间无法交流<br>3：本地业务处理，没有这个谈不上PC，当然这个是涉及业务的部分，是独特的，不是框架开发者关心的部分是业务开发关心的部分<br><br>其他：<br>1：网络通信协议用什么，是场景而定，不过现在HTTP&#47;TCP已是业界的标准<br>2：序列化和反序列化的框架用什么，也是视情况而定，当然功能强、性能好、易使用、易扩展的谁都爱的<br>3：压缩和解压缩，这个我认为也是视情况而定的，对性能要求不高完全不用考虑，不过一般都是非常在乎性能的，估计也是有选择的至于选哪一种也是一个视情况而定的权衡问题<br>4：就连注册中心，也是个附加的功能，是为了解决提供者和消费者较多且变化频繁，如何发现和路由的问题","like_count":21,"discussions":[{"author":{"id":1812807,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","nickname":"御风","note":"","ucode":"51C8212BE06364","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567464,"discussion_content":"很到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650931202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22839,"user_name":"萨洪志","can_delete":false,"product_type":"c1","uid":1176946,"ip_address":"","ucode":"43368624A1E813","user_header":"https://static001.geekbang.org/account/avatar/00/11/f5/72/ee4c3df7.jpg","comment_is_top":false,"comment_ctime":1536017324,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78845428652","product_id":100014401,"comment_content":"沙发，珍惜在车上的时间，😂","like_count":18,"discussions":[{"author":{"id":1175495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/c7/07bffbf3.jpg","nickname":"小土豆爸爸","note":"","ucode":"E3FED198AB803A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2355,"discussion_content":"我也是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563508306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28816,"user_name":"逍遥子","can_delete":false,"product_type":"c1","uid":1127109,"ip_address":"","ucode":"777CF0635970E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/c5/38a59795.jpg","comment_is_top":false,"comment_ctime":1538150403,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"70257627139","product_id":100014401,"comment_content":"搞不懂为什么区分长http与socket两种通信，个人理解这两者不是一种概念呀，一个是协议一个是通信基石，http协议访问不也是基于套接字么","like_count":16,"discussions":[{"author":{"id":1212873,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","nickname":"百里","note":"","ucode":"2CE96129AA7F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62185,"discussion_content":"HTTP是应用层协议, SOCKET是传输层协议.而SOCKET可基于TCP,亦可UDP","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574821564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1698679,"avatar":"https://static001.geekbang.org/account/avatar/00/19/eb/77/ffd16123.jpg","nickname":"重洋","note":"","ucode":"B896A81B579BEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1212873,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","nickname":"百里","note":"","ucode":"2CE96129AA7F78","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535724,"discussion_content":"socket是协议？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638524667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62185,"ip_address":""},"score":535724,"extra":""}]},{"author":{"id":1565219,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJSlGOyeng3NGwI3fff0PEicP83RL3rGnhghKRU3Md4WXCG6gxjXsicRtcfbQwnKUBJ68I8ibRVpq6Lw/132","nickname":"Geek_马官人","note":"","ucode":"A5D8EA65195413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550107,"discussion_content":"我觉得作者应该就想表达两种网络方式：http是短链接，每次请求都要握手挥手的去网络交互，socket是通过长连接去网络传输，建立好链接之后，后期通过套接字监听就可以多次交互了。不用纠结太多，知道作者想说什么就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1644388923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177289,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/c9/4da2a82a.jpg","nickname":"黄大仙","note":"","ucode":"337B6E811CF47D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2173,"discussion_content":"把HTTP、TCP、UDP放在一起说，更清晰一点","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563330197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114612,"avatar":"https://static001.geekbang.org/account/avatar/00/11/01/f4/3dc9bcce.jpg","nickname":"钟悠","note":"","ucode":"5AF2CAE1737927","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4523,"discussion_content":"HTTP是应用层协议，SOCKET是建立通信通道的方式吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565517550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055464,"avatar":"","nickname":"毛哥","note":"","ucode":"35EB4D51DB2C9B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551230,"discussion_content":"1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644933627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533400,"discussion_content":"照你这说说，就只能分为TCP、UDP了，这样未免太抽象了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637851920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350215,"discussion_content":"知道网络分层的都明白原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613748854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31695,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1539266502,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"61668808646","product_id":100014401,"comment_content":"<br>一、gRPC数据传输采用的http2通信协议。连接管理的方式有<br>1.GOAWAY帧<br>服务端发出这种帧给客户端表示服务端在相关的连接上不再接受任何新流<br>2.PING帧<br>客户端和服务端均可以发送一个ping帧，对方必须精确回显它们所接收的消息。这可以用来确认连接任然是活动的。<br>3.连接失败<br>  客户端检测到连接失败，所有的调用都会以不可用状态关闭。服务端侧所有已经打开的调用都会被以取消状态关闭。<br>二、在多数语言里，gRPC编程接口同时支持同步和异步。<br>三、默认使用Protocol buffers协议对数据进行序列化和反序列化","like_count":14},{"had_liked":false,"id":31478,"user_name":"bd7xzz","can_delete":false,"product_type":"c1","uid":1003006,"ip_address":"","ucode":"420199A024D4F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1539216797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31603987869","product_id":100014401,"comment_content":"我认为序列化主要解决三点:<br>1.大小端虚，异构系统网络通信时候的大小端序问题，这点由通信底层库实现<br>2.一种协议，在异构语言中进行数据翻译<br>3.压缩优化，提高网络通信能力","like_count":7},{"had_liked":false,"id":23501,"user_name":"Hungry","can_delete":false,"product_type":"c1","uid":1222089,"ip_address":"","ucode":"EDF8B264F155C2","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/c9/eb389183.jpg","comment_is_top":false,"comment_ctime":1536428876,"is_pvip":false,"replies":[{"id":"8700","content":"嗯，在服务框架里序列号最主要的作用是数据编码","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536664014,"ip_address":"","comment_id":23501,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27306232652","product_id":100014401,"comment_content":"老师，我觉得序列化最大的目的是解决异构系统的数据传输，比如大小端、远端的持久存储；至于不同语言的代码结构上的变量映射，TLV压缩，这些应该是其次的","like_count":6,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423592,"discussion_content":"嗯，在服务框架里序列号最主要的作用是数据编码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536664014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26582,"user_name":"衣申人","can_delete":false,"product_type":"c1","uid":1115777,"ip_address":"","ucode":"887FE9109B97DE","user_header":"https://static001.geekbang.org/account/avatar/00/11/06/81/28418795.jpg","comment_is_top":false,"comment_ctime":1537684246,"is_pvip":false,"replies":[{"id":"9793","content":"是啊，这里着重强调下压缩比来体现差异","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1537845743,"ip_address":"","comment_id":26582,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18717553430","product_id":100014401,"comment_content":"原来不只是我觉得序列化不是为了压缩的，嘻嘻。我认为序列化和反序列化是解决内存数据到字节流的相互转换的。而压缩不压缩，其实不是必要的。当然序列化后的大小是评估一种序列化方式的优劣因素之一。","like_count":4,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424677,"discussion_content":"是啊，这里着重强调下压缩比来体现差异","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537845743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23249,"user_name":"九斤鱼","can_delete":false,"product_type":"c1","uid":1014365,"ip_address":"","ucode":"3F1423E87D79D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/5d/b2e68df2.jpg","comment_is_top":false,"comment_ctime":1536233051,"is_pvip":false,"replies":[{"id":"8477","content":"可以看下专栏目录，在原理讲完之后开始讲实践","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536374085,"ip_address":"","comment_id":23249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18716102235","product_id":100014401,"comment_content":"感觉这几篇还是在入门，实战什么时候开始呢？，老师，我更关心的实际操作层面，比如技术栈选型方面，是spring cloud呢还是dubbo还是其他什么，<br>系统划分后的工程如何管理，如何部署，如何测试，多容器环境下需要注意什么等等问题，望老师可以在接下来的课程里可以用实际项目解答一下🙏","like_count":4,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423480,"discussion_content":"可以看下专栏目录，在原理讲完之后开始讲实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536374085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23227,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1536222191,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"18716091375","product_id":100014401,"comment_content":"服务A调用B，B调用C，假如B响应较慢，会造成整个调用链挂掉吗？有啥好办法防止这种问题吗？","like_count":4,"discussions":[{"author":{"id":1116410,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/fa/91c66193.jpg","nickname":"Tenz","note":"","ucode":"D5D5DC0A8C9D13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365919,"discussion_content":"优化业务流程，同步转异步，用mq解耦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617902083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1517041,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3jyEVY8d2V0x1ic6X09OaUBGzQ8My3f5KyecLvHqBUpyrgTQ2JwFqgBcJ104Xic6Z1zDgBhZoLjpg/132","nickname":"Geek_b986ba","note":"","ucode":"9057CAD042857C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1116410,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/fa/91c66193.jpg","nickname":"Tenz","note":"","ucode":"D5D5DC0A8C9D13","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569107,"discussion_content":"用mq解耦这点，可以举个例子么，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651325792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":365919,"ip_address":""},"score":569107,"extra":""}]},{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354782,"discussion_content":"超时、熔断，但这不是终极解决办法，只是突发情况可以这么玩，主要是还是要解决慢的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615341269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1735152,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/79/f0/19c6ae1c.jpg","nickname":"Geek_7324de","note":"","ucode":"B1C2CB60D75FB5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298708,"discussion_content":"前两节说过一个服务治理就是用来解决这个的吧，可以考虑熔断？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597383970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187054,"discussion_content":"优化B，追求极致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582725069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22865,"user_name":"靖远小和尚","can_delete":false,"product_type":"c1","uid":1213861,"ip_address":"","ucode":"094FA096B9F9B1","user_header":"https://static001.geekbang.org/account/avatar/00/12/85/a5/471ce926.jpg","comment_is_top":false,"comment_ctime":1536021191,"is_pvip":false,"replies":[{"id":"8230","content":"写错了，已修改👍","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536027009,"ip_address":"","comment_id":22865,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18715890375","product_id":100014401,"comment_content":"老师你好aio是异步阻塞是不是写错了！他应该是异步非阻塞吧！","like_count":4,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423300,"discussion_content":"写错了，已修改👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536027009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22995,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1536107559,"is_pvip":false,"replies":[{"id":"8357","content":"序列化跟异构系统没有直接关联，比如java序列化，主要是为了解决数据编解码的问题","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536144934,"ip_address":"","comment_id":22995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14421009447","product_id":100014401,"comment_content":"这篇文章感觉有些地方不太严谨，序列化是和异构系统有关","like_count":3,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423359,"discussion_content":"序列化跟异构系统没有直接关联，比如java序列化，主要是为了解决数据编解码的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536144934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22931,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1536047298,"is_pvip":false,"replies":[{"id":"8372","content":"IO多路复用属于同步非阻塞的","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536167486,"ip_address":"","comment_id":22931,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14420949186","product_id":100014401,"comment_content":"（1）同步阻塞IO（Blocking IO）：即传统的IO模型。<br>（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。<br>（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型。高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构。<br>（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。<br><br>上面提到的“同步非阻塞“方式怎么不一样？","like_count":3,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423327,"discussion_content":"IO多路复用属于同步非阻塞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536167486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88140,"user_name":"Wayne","can_delete":false,"product_type":"c1","uid":1102971,"ip_address":"","ucode":"8D5E12C09F61EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/7b/7c92c86f.jpg","comment_is_top":false,"comment_ctime":1555858009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145792601","product_id":100014401,"comment_content":"压缩跟序列化是两回事啊","like_count":2},{"had_liked":false,"id":31005,"user_name":"Douglas","can_delete":false,"product_type":"c1","uid":1073027,"ip_address":"","ucode":"CFDE3D76B9DAE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","comment_is_top":false,"comment_ctime":1539063135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128997727","product_id":100014401,"comment_content":"老师，  nio  多路复用io 解决并发连接数问题，  但是，io密集型的应用，业务还是应该 放到单独的线程里面处理的吧，可以创建一个线程池， nio 事件监听连接建立之后， 直接从 业务线程池中获取一个线程来处理业务？","like_count":2},{"had_liked":false,"id":22887,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":1015494,"ip_address":"","ucode":"5B5F45564DDBE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/c6/83684988.jpg","comment_is_top":false,"comment_ctime":1536023746,"is_pvip":false,"replies":[{"id":"8228","content":"抱歉，手误了，已修改👍","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536026928,"ip_address":"","comment_id":22887,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10125958338","product_id":100014401,"comment_content":"NIO,AIO描述有问题。<br>NIO （New I&#47;O）：同时支持阻塞与非阻塞模式，但主要是使用同步非阻塞IO。\r<br>\r<br>AIO （Asynchronous I&#47;O）：异步非阻塞I&#47;O模型。","like_count":2,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423307,"discussion_content":"抱歉，手误了，已修改👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536026928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137239,"user_name":"白晨","can_delete":false,"product_type":"c1","uid":1272026,"ip_address":"","ucode":"6D6171B8ECEDDD","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","comment_is_top":false,"comment_ctime":1569664732,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5864632028","product_id":100014401,"comment_content":"TCP可以看下这个https:&#47;&#47;blog.csdn.net&#47;striveb&#47;article&#47;details&#47;84063712","like_count":1},{"had_liked":false,"id":58324,"user_name":"王鸿运","can_delete":false,"product_type":"c1","uid":1068577,"ip_address":"","ucode":"14AF7B485D29A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/21/700586eb.jpg","comment_is_top":false,"comment_ctime":1547036904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842004200","product_id":100014401,"comment_content":"现在服务端最主流的处理方式应该是nio方式，因为Linux上并没有提供aio接口，epoll也是nio方式","like_count":1},{"had_liked":false,"id":359635,"user_name":"豆豆酱","can_delete":false,"product_type":"c1","uid":2539241,"ip_address":"北京","ucode":"1F321F2DF51DC5","user_header":"https://static001.geekbang.org/account/avatar/00/26/be/e9/9d597e04.jpg","comment_is_top":false,"comment_ctime":1665719074,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665719074","product_id":100014401,"comment_content":"socket通信指的是websocket么？<br>WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。<br>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。","like_count":0},{"had_liked":false,"id":314911,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1633573596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633573596","product_id":100014401,"comment_content":"在分布式微服务系统中，服务之间的调用需要通过rpc远程调用的方式。远程调用的过程中会涉及到建立网络链接(http、socket)、进行网络通信(开放协议、私有协议)、进行数据传输（序列化和反序列化）。<br><br>通信框架解决客户端和服务端如何建立连接、管理连接以及服务端如何处理请求的问题。<br>通信协议解决客户端和服务端采用哪种数据传输协议的问题。<br>序列化和反序列化解决客户端和服务端采用哪种数据编解码的问题。","like_count":0},{"had_liked":false,"id":309605,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1630248932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630248932","product_id":100014401,"comment_content":"实现一个rpc服务，需要考虑：通信协议（HTTP、socket）、通信模型（NIO、BIO、AIO）、数据编码解码（json、XML、PB）、服务端实现、客户端实现。","like_count":0},{"had_liked":false,"id":213742,"user_name":"易轻尘","can_delete":false,"product_type":"c1","uid":1136684,"ip_address":"","ucode":"0D0CB9D6D45A70","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/2c/92c7ce3b.jpg","comment_is_top":false,"comment_ctime":1588545213,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588545213","product_id":100014401,"comment_content":"gRPC调用实现原理简单总结：<br>服务定义：使用protobuf进行服务定义<br>序列化与反序列化：使用protobuf定义message，protoc自动生成相应的类以及序列化反序列化代码<br>请求处理模式：以C++为例，同时提供了BIO和AIO两种方式<br>服务连接：支持HTTP连接或者socket连接<br>注：自己实现简单的rpc：Netty管理服务的连接+请求处理+protobuf进行序列化和反序列化","like_count":0},{"had_liked":false,"id":173616,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1579616464,"is_pvip":false,"replies":[{"id":"82215","content":"restful也可以用注册中心","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1590996502,"ip_address":"","comment_id":173616,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1579616464","product_id":100014401,"comment_content":"老师你好，感觉你讲的重点都是rpc，对于restful，还需要注册中心吗","like_count":0,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482138,"discussion_content":"restful也可以用注册中心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590996502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033240,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkwbyTYtSCx6Qc7cQPnnRWv38Jybh3etziaPmuP8gHcgS6FMxcdftrKgWiamH6fc2iciaicDKDVEwcEibQ/132","nickname":"sami","note":"","ucode":"9A66FCA00D8A37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206356,"discussion_content":"个人觉得还是需要的，注册中心的目的是获取路由","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584398172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58318,"user_name":"王鸿运","can_delete":false,"product_type":"c1","uid":1068577,"ip_address":"","ucode":"14AF7B485D29A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/21/700586eb.jpg","comment_is_top":false,"comment_ctime":1547036589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547036589","product_id":100014401,"comment_content":"序列化的根本原因应该是以一种双方都可以解析方式对数据进行格式化，比如二进制方式和字符串方式。其中c语言的结构体（当然因为不同机器对齐方式不同，需要设置成按1字节填充）和protobuf都是二进制格式，而json和xml都是字符串方式进行序列化。<br>因为序列化的主要目的不是压缩，虽然为了节省带宽，提高传输速率的原因，大部分序列化方式都会涉及自己的编码方式对数据进行压缩，如protobuf。<br>但这种压缩编码和压缩算法本质上是不同的，protobuf对字符串字段就没办法压缩，还会因为扩展兼容性需要增加字段标签。而压缩主要是通过分析字符串出线频率，通过变长的编码方式对数据重新编码达到压缩目的","like_count":0},{"had_liked":false,"id":57369,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1546768255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546768255","product_id":100014401,"comment_content":"忠老师总结的4点很到到位，赞","like_count":0},{"had_liked":false,"id":54388,"user_name":"进阶的小孔","can_delete":false,"product_type":"c1","uid":1269832,"ip_address":"","ucode":"71E88AE4EFDBF2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJman25D8JlricJVaeweYqr70vyp2acetStqbtaDnCnroGXvuJfgr1As9q47iacTCUUMK1eRUt4KImg/132","comment_is_top":false,"comment_ctime":1545840336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545840336","product_id":100014401,"comment_content":"原来RPC是这样的","like_count":0},{"had_liked":false,"id":48826,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1544544501,"is_pvip":false,"replies":[{"id":"18046","content":"nio这块比较复杂，可以看看netty并发编程这本书，讲得比较透彻","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1544944130,"ip_address":"","comment_id":48826,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1544544501","product_id":100014401,"comment_content":"老师 nioq这块方便详细说下嘛","like_count":0,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432373,"discussion_content":"nio这块比较复杂，可以看看netty并发编程这本书，讲得比较透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544944130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216848,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/50/e576a068.jpg","nickname":"刘天若Warner","note":"","ucode":"032639CD670DA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5046,"discussion_content":"好像没有这本书吧朋友","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565915004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34696,"user_name":"batman","can_delete":false,"product_type":"c1","uid":1266482,"ip_address":"","ucode":"73C30ACFC0D612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IIkdC2gohpcibib0AJvSdnJQefAuQYGlLySQOticThpF7Ck9WuDUQLJlgZ7ic13LIFnGBXXbMsSP3nZsbibBN98ZjGA/132","comment_is_top":false,"comment_ctime":1540261001,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1540261001","product_id":100014401,"comment_content":"TCP三次握手的英文，有没中文对照呀","like_count":0},{"had_liked":false,"id":22900,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1536024819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536024819","product_id":100014401,"comment_content":"可以理解，一边看着老师的讲解，一边可以看着dubbo框架的实现了。老师的讲解应该就是这类框架的一个提纲挈领，也可以自己手动试着写这个这样的框架，更能体会其中的奥秘了。对吧，谢谢。","like_count":0},{"had_liked":false,"id":22886,"user_name":"snakorse","can_delete":false,"product_type":"c1","uid":1064887,"ip_address":"","ucode":"0AD727E1F16993","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/b7/0d8b5431.jpg","comment_is_top":false,"comment_ctime":1536023476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536023476","product_id":100014401,"comment_content":"grpc在通信层面应该是异步非阻塞的模型(不是特别确定，java基于netty是异步非阻塞，c#用的c+ +库，猜测应该是用的IOCP)，通信协议是http2 stream，序列化采用PB。","like_count":0},{"had_liked":false,"id":22882,"user_name":"ServerCoder","can_delete":false,"product_type":"c1","uid":1066487,"ip_address":"","ucode":"7F266C97696E16","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/f7/0f9bcf1f.jpg","comment_is_top":false,"comment_ctime":1536023010,"is_pvip":false,"replies":[{"id":"8229","content":"本来有两种图的，一个是建连，一个是断连，待会把建连图补上","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536026980,"ip_address":"","comment_id":22882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536023010","product_id":100014401,"comment_content":"图配错了吧，那可是断链的四次挥手过程","like_count":0,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423305,"discussion_content":"本来有两种图的，一个是建连，一个是断连，待会把建连图补上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536026980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22871,"user_name":"AhianZhang","can_delete":false,"product_type":"c1","uid":1025962,"ip_address":"","ucode":"E6741E1FE81B0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/aa/2a8c15fa.jpg","comment_is_top":false,"comment_ctime":1536021883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536021883","product_id":100014401,"comment_content":"目前公司是用dubbo框架，需要搭建监控系统以便日后的限流和降级，日志系统原来有elk，结果一启动就宕机，带不起来。各位有什么解法","like_count":0},{"had_liked":false,"id":22869,"user_name":"AhianZhang","can_delete":false,"product_type":"c1","uid":1025962,"ip_address":"","ucode":"E6741E1FE81B0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/aa/2a8c15fa.jpg","comment_is_top":false,"comment_ctime":1536021719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536021719","product_id":100014401,"comment_content":"公司 dubbo 服务有近100 个，目前要做监控还有日志收集处理，目前处于选型阶段，之前用elk做过日志分析平台，结果一启动就宕机，带不起来。","like_count":0},{"had_liked":false,"id":22863,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1536021139,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1536021139","product_id":100014401,"comment_content":"json 序例化就是执行JSON.stringfy把对象转化为没有空格的字符串呢？","like_count":0}]}