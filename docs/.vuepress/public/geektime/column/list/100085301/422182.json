{"id":422182,"title":"15｜数据结构：这些浓眉大眼的结构竟然都是智能指针？","content":"<p>你好，我是陈天。</p><p>到现在为止我们学了Rust的所有权与生命周期、内存管理以及类型系统，基础知识里还剩一块版图没有涉及：数据结构，数据结构里最容易让人困惑的就是智能指针，所以今天我们就来解决这个难点。</p><p>我们之前简单介绍过指针，这里还是先回顾一下：指针是一个持有内存地址的值，可以通过解引用来访问它指向的内存地址，理论上可以解引用到任意数据类型；引用是一个特殊的指针，它的解引用访问是受限的，只能解引用到它引用数据的类型，不能用作它用。</p><p>那什么是智能指针呢？</p><h2>智能指针</h2><p>在指针和引用的基础上，Rust 偷师 C++，提供了智能指针。智能指针是一个表现行为很像指针的数据结构，但除了指向数据的指针外，它还有元数据以提供额外的处理能力。</p><p>这个定义有点模糊，我们对比其他的数据结构来明确一下。</p><p>你有没有觉得很像之前讲的胖指针。智能指针一定是一个胖指针，但胖指针不一定是一个智能指针。比如 &amp;str 就只是一个胖指针，它有指向堆内存字符串的指针，同时还有关于字符串长度的元数据。</p><p>我们看智能指针 String 和 &amp;str 的区别：<img src=\"https://static001.geekbang.org/resource/image/f4/59/f4401040f7d36b9e610b6867a5d0cf59.jpg?wh=1913x1206\" alt=\"\"></p><p>从图上可以看到，String 除了多一个 capacity 字段，似乎也没有什么特殊。<strong>但 String 对堆上的值有所有权，而 &amp;str 是没有所有权的，这是 Rust 中智能指针和普通胖指针的区别</strong>。</p><!-- [[[read_end]]] --><p>那么又有一个问题了，智能指针和结构体有什么区别呢？因为我们知道，String 是用结构体定义的：</p><pre><code class=\"language-rust\">pub struct String {\n    vec: Vec&lt;u8&gt;,\n}\n</code></pre><p>和普通的结构体不同的是，String 实现了 Deref 和 DerefMut，这使得它在解引用的时候，会得到 &amp;str，看下面的<a href=\"https://doc.rust-lang.org/src/alloc/string.rs.html#2301-2316\">标准库的实现</a>：</p><pre><code class=\"language-rust\">impl ops::Deref for String {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;str {\n        unsafe { str::from_utf8_unchecked(&amp;self.vec) }\n    }\n}\n\nimpl ops::DerefMut for String {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut str {\n        unsafe { str::from_utf8_unchecked_mut(&amp;mut *self.vec) }\n    }\n}\n</code></pre><p>另外，由于在堆上分配了数据，String 还需要为其分配的资源做相应的回收。而 String 内部使用了 Vec&lt;u8&gt;，所以它可以依赖 Vec&lt;T&gt; 的能力来释放堆内存。下面是标准库中 Vec&lt;T&gt; 的 <a href=\"https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#2710-2720\">Drop trait 的实现</a>：</p><pre><code class=\"language-rust\">unsafe impl&lt;#[may_dangle] T, A: Allocator&gt; Drop for Vec&lt;T, A&gt; {\n    fn drop(&amp;mut self) {\n        unsafe {\n            // use drop for [T]\n            // use a raw slice to refer to the elements of the vector as weakest necessary type;\n            // could avoid questions of validity in certain cases\n            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))\n        }\n        // RawVec handles deallocation\n    }\n}\n</code></pre><p>所以再清晰一下定义，<strong>在 Rust 中，凡是需要做资源回收的数据结构，且实现了 Deref/DerefMut/Drop，都是智能指针</strong>。</p><p>按照这个定义，除了 String，在之前的课程中我们遇到了很多智能指针，比如用于在堆上分配内存的 Box&lt;T&gt; 和 Vec&lt;T&gt;、用于引用计数的 Rc&lt;T&gt; 和 Arc&lt;T&gt; 。很多其他数据结构，如 PathBuf、Cow&lt;'a, B&gt;、MutexGuard&lt;T&gt;、RwLockReadGuard&lt;T&gt; 和 RwLockWriteGuard 等也是智能指针。</p><p>今天我们就深入分析三个使用智能指针的数据结构：在堆上创建内存的 Box&lt;T&gt;、提供写时克隆的 Cow&lt;'a, B&gt;，以及用于数据加锁的 MutexGuard&lt;T&gt;。</p><p>而且最后我们会尝试实现自己的智能指针。希望学完后你不但能更好地理解智能指针，还能在需要的时候，构建自己的智能指针来解决问题。</p><h2>Box&lt;T&gt;</h2><p>我们先看 Box&lt;T&gt;，它是 Rust 中最基本的在堆上分配内存的方式，绝大多数其它包含堆内存分配的数据类型，内部都是通过 Box&lt;T&gt; 完成的，比如 Vec&lt;T&gt;。</p><p>为什么有Box&lt;T&gt;的设计，我们得先回忆一下在 C 语言中，堆内存是怎么分配的。</p><p>C 需要使用 malloc/calloc/realloc/free 来处理内存的分配，很多时候，被分配出来的内存在函数调用中来来回回使用，导致谁应该负责释放这件事情很难确定，给开发者造成了极大的心智负担。</p><p>C++ 在此基础上改进了一下，提供了一个智能指针 <a href=\"https://en.cppreference.com/w/cpp/memory/unique_ptr\">unique_ptr</a>，可以在指针退出作用域的时候释放堆内存，这样保证了堆内存的单一所有权。这个 unique_ptr 就是 Rust 的 Box&lt;T&gt; 的前身。</p><p>你看 Box&lt;T&gt; 的定义里，内部就是一个 <a href=\"https://doc.rust-lang.org/src/core/ptr/unique.rs.html#36-44\">Unique&lt;T&gt;</a> 用于致敬 C++，Unique&lt;T&gt; 是一个私有的数据结构，我们不能直接使用，它包裹了一个 *const T 指针，并唯一拥有这个指针。</p><pre><code class=\"language-rust\">pub struct Unique&lt;T: ?Sized&gt; {\n    pointer: *const T,\n    // NOTE: this marker has no consequences for variance, but is necessary\n    // for dropck to understand that we logically own a `T`.\n    //\n    // For details, see:\n    // https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\n    _marker: PhantomData&lt;T&gt;,\n}\n</code></pre><p>我们知道，在堆上分配内存，需要使用内存分配器（Allocator）。如果你上过操作系统课程，应该还记得一个简单的 <a href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\">buddy system</a> 是如何分配和管理堆内存的。</p><p>设计内存分配器的目的除了保证正确性之外，就是为了有效地利用剩余内存，并控制内存在分配和释放过程中产生的碎片的数量。在多核环境下，它还要能够高效地处理并发请求。（如果你对通用内存分配器感兴趣，可以看参考资料）</p><p>堆上分配内存的 Box&lt;T&gt; 其实有一个缺省的泛型参数 A，就需要满足 <a href=\"https://doc.rust-lang.org/std/alloc/trait.Allocator.html\">Allocator trait</a>，并且默认是 Global：</p><pre><code class=\"language-rust\">pub struct Box&lt;T: ?Sized,A: Allocator = Global&gt;(Unique&lt;T&gt;, A)\n</code></pre><p>Allocator trait 提供很多方法：</p><ul>\n<li>allocate是主要方法，用于分配内存，对应 C 的 malloc/calloc；</li>\n<li>deallocate，用于释放内存，对应 C 的 free；</li>\n<li>还有 grow / shrink，用来扩大或缩小堆上已分配的内存，对应 C 的 realloc。</li>\n</ul><p>这里对 Allocator trait 我们就不详细介绍了，如果你想替换默认的内存分配器，可以使用 #[global_allocator] 标记宏，定义你自己的全局分配器。下面的代码展示了如何在 Rust 下使用 <a href=\"https://crates.io/crates/jemallocator\">jemalloc</a>：</p><pre><code class=\"language-rust\">use jemallocator::Jemalloc;\n\n#[global_allocator]\nstatic GLOBAL: Jemalloc = Jemalloc;\n\nfn main() {}\n</code></pre><p>这样设置之后，你使用 Box::new() 分配的内存就是 jemalloc 分配出来的了。另外，如果你想撰写自己的全局分配器，可以实现 <a href=\"https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html\">GlobalAlloc trait</a>，它和 Allocator trait 的区别，主要在于是否允许分配长度为零的内存。</p><h3>使用场景</h3><p>下面我们来实现一个自己的内存分配器。别担心，这里就是想 debug 一下，看看内存如何分配和释放，并不会实际实现某个分配算法。</p><p>首先看内存的分配。这里 MyAllocator 就用 System allocator，然后加 eprintln!()，和我们常用的 println!() 不同的是，eprintln!() 将数据打印到 stderr（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ca0ae6821e08e16609b1e10ac743e6c9\">代码</a>）：</p><pre><code class=\"language-rust\">use std::alloc::{GlobalAlloc, Layout, System};\n\nstruct MyAllocator;\n\nunsafe impl GlobalAlloc for MyAllocator {\n    unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 {\n        let data = System.alloc(layout);\n        eprintln!(\"ALLOC: {:p}, size {}\", data, layout.size());\n        data\n    }\n\n    unsafe fn dealloc(&amp;self, ptr: *mut u8, layout: Layout) {\n        System.dealloc(ptr, layout);\n        eprintln!(\"FREE: {:p}, size {}\", ptr, layout.size());\n    }\n}\n\n#[global_allocator]\nstatic GLOBAL: MyAllocator = MyAllocator;\n\n#[allow(dead_code)]\nstruct Matrix {\n    // 使用不规则的数字如 505 可以让 dbg! 的打印很容易分辨出来\n    data: [u8; 505],\n}\n\nimpl Default for Matrix {\n    fn default() -&gt; Self {\n        Self { data: [0; 505] }\n    }\n}\n\nfn main() {\n    // 在这句执行之前已经有好多内存分配\n    let data = Box::new(Matrix::default());\n\n    // 输出中有一个 1024 大小的内存分配，是 println! 导致的\n    println!(\n        \"!!! allocated memory: {:p}, len: {}\",\n        &amp;*data,\n        std::mem::size_of::&lt;Matrix&gt;()\n    );\n\n    // data 在这里 drop，可以在打印中看到 FREE\n    // 之后还有很多其它内存被释放\n}\n</code></pre><p>注意这里不能使用 println!() 。因为 stdout 会打印到一个由 Mutex 互斥锁保护的共享全局 buffer 中，这个过程中会涉及内存的分配，分配的内存又会触发 println!()，最终造成程序崩溃。而 eprintln! 直接打印到 stderr，不会 buffer。</p><p>运行这段代码，你可以看到类似如下输出，其中 505 大小的内存是我们 Box::new() 出来的：</p><pre><code class=\"language-bash\">❯ cargo run --bin allocator --quiet\nALLOC: 0x7fbe0dc05c20, size 4\nALLOC: 0x7fbe0dc05c30, size 5\nFREE: 0x7fbe0dc05c20, size 4\nALLOC: 0x7fbe0dc05c40, size 64\nALLOC: 0x7fbe0dc05c80, size 48\nALLOC: 0x7fbe0dc05cb0, size 80\nALLOC: 0x7fbe0dc05da0, size 24\nALLOC: 0x7fbe0dc05dc0, size 64\nALLOC: 0x7fbe0dc05e00, size 505\nALLOC: 0x7fbe0e008800, size 1024\n!!! allocated memory: 0x7fbe0dc05e00, len: 505\nFREE: 0x7fbe0dc05e00, size 505\nFREE: 0x7fbe0e008800, size 1024\nFREE: 0x7fbe0dc05c30, size 5\nFREE: 0x7fbe0dc05c40, size 64\nFREE: 0x7fbe0dc05c80, size 48\nFREE: 0x7fbe0dc05cb0, size 80\nFREE: 0x7fbe0dc05dc0, size 64\nFREE: 0x7fbe0dc05da0, size 24\n</code></pre><p>在使用 Box 分配堆内存的时候要注意，Box::new() 是一个函数，所以传入它的数据会出现在栈上，再移动到堆上。所以，如果我们的 Matrix 结构不是 505 个字节，是一个非常大的结构，就有可能出问题。</p><p>比如下面的代码想在堆上分配 16M 内存，如果你在 playground 里运行，直接栈溢出 stack overflow（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4aa8e21e6da6b572dae2ad8d68787e1e\">代码</a>）：</p><pre><code class=\"language-rust\">fn main() {\n    // 在堆上分配 16M 内存，但它会现在栈上出现，再移动到堆上\n    let boxed = Box::new([0u8; 1 &lt;&lt; 24]);\n    println!(\"len: {}\", boxed.len());\n}\n</code></pre><p>但如果你在本地使用 “cargo run —release” 编译成 release 代码运行，会正常执行！</p><p>这是因为 “cargo run” 或者在 playground 下运行，默认是 debug build，它不会做任何 inline 的优化，而 Box::new() 的实现就一行代码，并注明了要 inline，在 release 模式下，这个函数调用会被优化掉：</p><pre><code class=\"language-rust\">#[cfg(not(no_global_oom_handling))]\n#[inline(always)]\n#[doc(alias = \"alloc\")]\n#[doc(alias = \"malloc\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn new(x: T) -&gt; Self {\n    box x\n}\n</code></pre><p>如果不 inline，整个 16M 的大数组会通过栈内存传递给 Box::new，导致栈溢出。这里我们惊喜地发现了一个新的关键字 box。然而 box 是 Rust 内部的关键字，用户代码无法调用，它只出现在 Rust 代码中，用于分配堆内存，box 关键字在编译时，会使用内存分配器分配内存。</p><p>搞明白 Box&lt;T&gt; 的内存分配，我们还很关心内存是如何释放的，来看它实现的 Drop trait：</p><pre><code class=\"language-rust\">#[stable(feature = \"rust1\", since = \"1.0.0\")]\nunsafe impl&lt;#[may_dangle] T: ?Sized, A: Allocator&gt; Drop for Box&lt;T, A&gt; {\n    fn drop(&amp;mut self) {\n        // FIXME: Do nothing, drop is currently performed by compiler.\n    }\n}\n</code></pre><p>哈，目前 drop trait 什么都没有做，编译器会自动插入 deallocate 的代码。这是 Rust 语言的一种策略：<strong>在具体实现还没有稳定下来之前，我先把接口稳定，实现随着之后的迭代慢慢稳定</strong>。</p><p>这样可以极大地避免语言在发展的过程中，引入对开发者而言的破坏性更新（breaking change）。破坏性更新会使得开发者在升级语言的版本时，不得不大幅更改原有代码。</p><p>Python 是个前车之鉴，由于引入了大量的破坏性更新，Python 2 到 3 的升级花了十多年才慢慢完成。所以 Rust 在设计接口时非常谨慎，很多重要的接口都先以库的形式存在了很久，最终才成为标准库的一部分，比如 Future trait。一旦接口稳定后，内部的实现可以慢慢稳定。</p><h2>Cow&lt;'a, B&gt;</h2><p>了解了 Box 的工作原理后，再来看 Cow&lt;'a, B&gt;的原理和使用场景，（<a href=\"https://time.geekbang.org/column/article/420021\">第12讲</a>）讲泛型数据结构的时候，我们简单讲过参数B的三个约束。</p><p>Cow 是 Rust 下用于提供写时克隆（Clone-on-Write）的一个智能指针，它跟虚拟内存管理的写时复制（Copy-on-write）有异曲同工之妙：<strong>包裹一个只读借用，但如果调用者需要所有权或者需要修改内容，那么它会 clone 借用的数据</strong>。</p><p>我们看Cow的定义：</p><pre><code class=\"language-rust\">pub enum Cow&lt;'a, B&gt; where B: 'a + ToOwned + ?Sized {\n  Borrowed(&amp;'a B),\n  Owned(&lt;B as ToOwned&gt;::Owned),\n}\n</code></pre><p>它是一个 enum，可以包含一个对类型 B 的只读引用，或者包含对类型 B 的拥有所有权的数据。</p><p>这里又引入了两个 trait，首先是 ToOwned，在 ToOwned trait 定义的时候，又引入了 Borrow trait，它们都是 <a href=\"https://doc.rust-lang.org/std/borrow/index.html\">std::borrow</a> 下的 trait：</p><pre><code class=\"language-rust\">pub trait ToOwned {\n    type Owned: Borrow&lt;Self&gt;;\n    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n    fn to_owned(&amp;self) -&gt; Self::Owned;\n\n    fn clone_into(&amp;self, target: &amp;mut Self::Owned) { ... }\n}\n\npub trait Borrow&lt;Borrowed&gt; where Borrowed: ?Sized {\n    fn borrow(&amp;self) -&gt; &amp;Borrowed;\n}\n</code></pre><p>如果你看不懂这段代码，不要着急，想要理解 Cow trait，ToOwned trait 是一道坎，因为 type Owned: Borrow&lt;Self&gt; 不好理解，耐下心来我们拆开一点点解读。</p><p>首先，type Owned: Borrow&lt;Self&gt; 是一个带有关联类型的 trait ，如果你对这个知识点有些遗忘，可以再复习一下<a href=\"https://time.geekbang.org/column/article/420028\">第 13 讲</a>。这里 Owned 是关联类型，需要使用者定义，和我们之前介绍的关联类型不同的是，这里 Owned 不能是任意类型，它必须满足 Borrow&lt;T&gt; trait。例如我们看 <a href=\"https://doc.rust-lang.org/src/alloc/str.rs.html#215-227\">str 对 ToOwned trait 的实现</a>：</p><pre><code class=\"language-rust\">impl ToOwned for str {\n    type Owned = String;\n    #[inline]\n    fn to_owned(&amp;self) -&gt; String {\n        unsafe { String::from_utf8_unchecked(self.as_bytes().to_owned()) }\n    }\n\n    fn clone_into(&amp;self, target: &amp;mut String) {\n        let mut b = mem::take(target).into_bytes();\n        self.as_bytes().clone_into(&amp;mut b);\n        *target = unsafe { String::from_utf8_unchecked(b) }\n    }\n}\n</code></pre><p>可以看到关联类型 Owned 被定义为 String，而根据要求，String 必须定义 Borrow&lt;T&gt;，那这里 Borrow&lt;T&gt; 里的泛型变量 T 是谁呢？</p><p>ToOwned 要求是 Borrow&lt;Self&gt;，而此刻实现 ToOwned 的主体是 str，所以 Borrow&lt;Self&gt; 是 Borrow&lt;str&gt;，也就是说 String 要实现 Borrow&lt;str&gt;，我们看<a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Borrow%3Cstr%3E\">文档</a>，它的确<a href=\"https://doc.rust-lang.org/src/alloc/str.rs.html#198-203\">实现了这个 trait</a>：</p><pre><code class=\"language-rust\">impl Borrow&lt;str&gt; for String {\n    #[inline]\n    fn borrow(&amp;self) -&gt; &amp;str {\n        &amp;self[..]\n    }\n}\n</code></pre><p>你是不是有点晕了，我用一张图梳理了这几个 trait 之间的关系：<br>\n<img src=\"https://static001.geekbang.org/resource/image/ay/52/ayyc5f85c3d9897ddd1acd4c067a5852.jpg?wh=3248x2012\" alt=\"\"></p><p>通过这张图，我们可以更好地搞清楚 Cow 和 ToOwned / Borrow&lt;T&gt; 之间的关系。</p><p>这里，你可能会疑惑，为何 Borrow 要定义成一个泛型 trait 呢？搞这么复杂，难道一个类型还可以被借用成不同的引用么？</p><p>是的。我们看一个例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=36831f05a3e27690beac9fd5beb5b524\">代码</a>）：</p><pre><code class=\"language-rust\">use std::borrow::Borrow;\n\nfn main() {\n    let s = \"hello world!\".to_owned();\n\n    // 这里必须声明类型，因为 String 有多个 Borrow&lt;T&gt; 实现\n    // 借用为 &amp;String\n    let r1: &amp;String = s.borrow();\n    // 借用为 &amp;str\n    let r2: &amp;str = s.borrow();\n\n    println!(\"r1: {:p}, r2: {:p}\", r1, r2);\n}\n</code></pre><p>在这里例子里，String 可以被借用为 &amp;String，也可以被借用为 &amp;str。</p><p>好，再来继续看 Cow。我们说它是智能指针，那它自然需要<a href=\"https://doc.rust-lang.org/src/alloc/borrow.rs.html#332-341\">实现 Deref trait</a>：</p><pre><code class=\"language-rust\">impl&lt;B: ?Sized + ToOwned&gt; Deref for Cow&lt;'_, B&gt; {\n    type Target = B;\n\n    fn deref(&amp;self) -&gt; &amp;B {\n        match *self {\n            Borrowed(borrowed) =&gt; borrowed,\n            Owned(ref owned) =&gt; owned.borrow(),\n        }\n    }\n}\n</code></pre><p>实现的原理很简单，根据 self 是 Borrowed 还是 Owned，我们分别取其内容，生成引用：</p><ul>\n<li>对于 Borrowed，直接就是引用；</li>\n<li>对于 Owned，调用其 borrow() 方法，获得引用。</li>\n</ul><p>这就很厉害了。虽然 Cow 是一个 enum，但是通过 Deref 的实现，我们可以获得统一的体验，比如 Cow&lt;str&gt;，使用的感觉和 &amp;str / String 是基本一致的。注意，<strong>这种根据 enum 的不同状态来进行统一分发的方法是第三种分发手段</strong>，之前讲过可以使用泛型参数做静态分发和使用 trait object 做动态分发。</p><h3>使用场景</h3><p>那么 Cow 有什么用呢？显然，它可以在需要的时候才进行内存的分配和拷贝，在很多应用场合，它可以大大提升系统的效率。如果 Cow&lt;'a, B&gt; 中的 Owned 数据类型是一个需要在堆上分配内存的类型，如 String、Vec&lt;T&gt; 等，还能减少堆内存分配的次数。</p><p>我们说过，相对于栈内存的分配释放来说，堆内存的分配和释放效率要低很多，其内部还涉及系统调用和锁，<strong>减少不必要的堆内存分配是提升系统效率的关键手段</strong>。而 Rust 的 Cow&lt;'a, B&gt;，在帮助你达成这个效果的同时，使用体验还非常简单舒服。</p><p>光这么说没有代码佐证，我们看一个使用 Cow 的实际例子。</p><p>在解析 URL 的时候，我们经常需要将 querystring 中的参数，提取成 KV pair 来进一步使用。绝大多数语言中，提取出来的 KV 都是新的字符串，在每秒钟处理几十 k 甚至上百 k 请求的系统中，你可以想象这会带来多少次堆内存的分配。</p><p>但在 Rust 中，我们可以用 Cow 类型轻松高效处理它，在读取 URL 的过程中：</p><ul>\n<li>每解析出一个 key 或者 value，我们可以用一个 &amp;str 指向 URL 中相应的位置，然后用 Cow 封装它；</li>\n<li>而当解析出来的内容不能直接使用，需要 decode 时，比如 “hello%20world”，我们可以生成一个解析后的 String，同样用 Cow 封装它。</li>\n</ul><p>看下面的例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4a7ec8125238dfefc0b8b82f262c3eaf\">代码</a>）：</p><pre><code class=\"language-rust\">use std::borrow::Cow;\n\nuse url::Url;\nfn main() {\n    let url = Url::parse(\"https://tyr.com/rust?page=1024&amp;sort=desc&amp;extra=hello%20world\").unwrap();\n    let mut pairs = url.query_pairs();\n\n    assert_eq!(pairs.count(), 3);\n\n    let (mut k, v) = pairs.next().unwrap();\n    // 因为 k, v 都是 Cow&lt;str&gt; 他们用起来感觉和 &amp;str 或者 String 一样\n    // 此刻，他们都是 Borrowed\n    println!(\"key: {}, v: {}\", k, v);\n    // 当修改发生时，k 变成 Owned\n    k.to_mut().push_str(\"_lala\");\n\n    print_pairs((k, v));\n\n    print_pairs(pairs.next().unwrap());\n    // 在处理 extra=hello%20world 时，value 被处理成 \"hello world\"\n    // 所以这里 value 是 Owned\n    print_pairs(pairs.next().unwrap());\n}\n\nfn print_pairs(pair: (Cow&lt;str&gt;, Cow&lt;str&gt;)) {\n    println!(\"key: {}, value: {}\", show_cow(pair.0), show_cow(pair.1));\n}\n\nfn show_cow(cow: Cow&lt;str&gt;) -&gt; String {\n    match cow {\n        Cow::Borrowed(v) =&gt; format!(\"Borrowed {}\", v),\n        Cow::Owned(v) =&gt; format!(\"Owned {}\", v),\n    }\n}\n</code></pre><p>是不是很简洁。</p><p>类似 URL parse 这样的处理方式，在 Rust 标准库和第三方库中非常常见。比如 Rust 下著名的 <a href=\"https://serde.rs/\">serde 库</a>，可以非常高效地对 Rust 数据结构，进行序列化/反序列化操作，它对 Cow 就有很好的支持。</p><p>我们可以通过如下代码将一个 JSON 数据反序列化成 User 类型，同时让 User 中的 name 使用 Cow 来引用 JSON 文本中的内容（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5154f27658e3853fb894b3de993d877c\">代码</a>）：</p><pre><code class=\"language-rust\">use serde::Deserialize;\nuse std::borrow::Cow;\n\n#[derive(Debug, Deserialize)]\nstruct User&lt;'input&gt; {\n    #[serde(borrow)]\n    name: Cow&lt;'input, str&gt;,\n    age: u8,\n}\n\nfn main() {\n    let input = r#\"{ \"name\": \"Tyr\", \"age\": 18 }\"#;\n    let user: User = serde_json::from_str(input).unwrap();\n\n    match user.name {\n        Cow::Borrowed(x) =&gt; println!(\"borrowed {}\", x),\n        Cow::Owned(x) =&gt; println!(\"owned {}\", x),\n    }\n}\n</code></pre><p>未来在你用 Rust 构造系统时，也可以充分考虑在数据类型中使用 Cow。</p><h2>MutexGuard&lt;T&gt;</h2><p>如果说，上面介绍的 String、Box&lt;T&gt;、Cow&lt;'a, B&gt; 等智能指针，都是通过 Deref 来提供良好的用户体验，那么 MutexGuard&lt;T&gt; 是另外一类很有意思的智能指针：它不但通过 Deref 提供良好的用户体验，<strong>还通过 Drop trait 来确保，使用到的内存以外的资源在退出时进行释放</strong>。</p><p>MutexGuard<t> 这个结构是在调用 <a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#279-284\">Mutex::lock</a> 时生成的：</t></p><pre><code class=\"language-rust\">pub fn lock(&amp;self) -&gt; LockResult&lt;MutexGuard&lt;'_, T&gt;&gt; {\n    unsafe {\n        self.inner.raw_lock();\n        MutexGuard::new(self)\n    }\n}\n</code></pre><p>首先，它会取得锁资源，如果拿不到，会在这里等待；如果拿到了，会把 Mutex 结构的引用传递给 MutexGuard。</p><p>我们看 MutexGuard 的<a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#190-195\">定义</a>以及它的 Deref 和 Drop 的<a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#462-487\">实现</a>，很简单：</p><pre><code class=\"language-rust\">// 这里用 must_use，当你得到了却不使用 MutexGuard 时会报警\n#[must_use = \"if unused the Mutex will immediately unlock\"]\npub struct MutexGuard&lt;'a, T: ?Sized + 'a&gt; {\n    lock: &amp;'a Mutex&lt;T&gt;,\n    poison: poison::Guard,\n}\n\nimpl&lt;T: ?Sized&gt; Deref for MutexGuard&lt;'_, T&gt; {\n    type Target = T;\n\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.lock.data.get() }\n    }\n}\n\nimpl&lt;T: ?Sized&gt; DerefMut for MutexGuard&lt;'_, T&gt; {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {\n        unsafe { &amp;mut *self.lock.data.get() }\n    }\n}\n\nimpl&lt;T: ?Sized&gt; Drop for MutexGuard&lt;'_, T&gt; {\n    #[inline]\n    fn drop(&amp;mut self) {\n        unsafe {\n            self.lock.poison.done(&amp;self.poison);\n            self.lock.inner.raw_unlock();\n        }\n    }\n}\n</code></pre><p>从代码中可以看到，当 MutexGuard 结束时，Mutex 会做 unlock，这样用户在使用 Mutex 时，可以不必关心何时释放这个互斥锁。因为无论你在调用栈上怎样传递 MutexGuard ，哪怕在错误处理流程上提前退出，Rust 有所有权机制，可以确保只要 MutexGuard 离开作用域，锁就会被释放。</p><h3>使用场景</h3><p>我们来看一个使用 Mutex 和 MutexGuard 的例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f01427ed0a8534ade980b88791be9d5b\">代码</a>），代码很简单，我写了详尽的注释帮助你理解。</p><pre><code class=\"language-rust\">use lazy_static::lazy_static;\nuse std::borrow::Cow;\nuse std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\n// lazy_static 宏可以生成复杂的 static 对象\nlazy_static! {\n    // 一般情况下 Mutex 和 Arc 一起在多线程环境下提供对共享内存的使用\n    // 如果你把 Mutex 声明成 static，其生命周期是静态的，不需要 Arc\n    static ref METRICS: Mutex&lt;HashMap&lt;Cow&lt;'static, str&gt;, usize&gt;&gt; =\n        Mutex::new(HashMap::new());\n}\n\nfn main() {\n    // 用 Arc 来提供并发环境下的共享所有权（使用引用计数）\n    let metrics: Arc&lt;Mutex&lt;HashMap&lt;Cow&lt;'static, str&gt;, usize&gt;&gt;&gt; =\n        Arc::new(Mutex::new(HashMap::new()));\n    for _ in 0..32 {\n        let m = metrics.clone();\n        thread::spawn(move || {\n            let mut g = m.lock().unwrap();\n            // 此时只有拿到 MutexGuard 的线程可以访问 HashMap\n            let data = &amp;mut *g;\n            // Cow 实现了很多数据结构的 From trait，\n\t\t\t\t\t\t// 所以我们可以用 \"hello\".into() 生成 Cow\n            let entry = data.entry(\"hello\".into()).or_insert(0);\n            *entry += 1;\n\t\t\t\t\t\t// MutexGuard 被 Drop，锁被释放\n        });\n    }\n\n    thread::sleep(Duration::from_millis(100));\n\n    println!(\"metrics: {:?}\", metrics.lock().unwrap());\n}\n</code></pre><p>如果你有疑问，这样如何保证锁的线程安全呢？如果我在线程 1 拿到了锁，然后把 MutexGuard 移动给线程 2 使用，加锁和解锁在完全不同的线程下，会有很大的死锁风险。怎么办？</p><p>不要担心，MutexGuard 不允许 Send，只允许 Sync，也就是说，你可以把 MutexGuard 的引用传给另一个线程使用，但你无法把 MutexGuard 整个移动到另一个线程：</p><pre><code class=\"language-rust\">impl&lt;T: ?Sized&gt; !Send for MutexGuard&lt;'_, T&gt; {}\nunsafe impl&lt;T: ?Sized + Sync&gt; Sync for MutexGuard&lt;'_, T&gt; {}\n</code></pre><p>类似 MutexGuard 的智能指针有很多用途。比如要创建一个连接池，你可以在 Drop trait 中，回收 checkout 出来的连接，将其再放回连接池。如果你对此感兴趣，可以看看 <a href=\"https://github.com/sfackler/r2d2/blob/master/src/lib.rs#L611\">r2d2 的实现</a>，它是 Rust 下一个数据库连接池的实现。</p><h2>实现自己的智能指针</h2><p>到目前为止，三个经典的智能指针，在堆上创建内存的 Box&lt;T&gt;、提供写时克隆的 Cow&lt;'a, B&gt;，以及用于数据加锁的 MutexGuard&lt;T&gt;，它们的实现和使用方法就讲完了。</p><p>那么，如果我们想实现自己的智能指针，该怎么做？或者咱们换个问题：有什么数据结构适合实现成为智能指针？</p><p>因为很多时候，<strong>我们需要实现一些自动优化的数据结构</strong>，在某些情况下是一种优化的数据结构和相应的算法，在其他情况下使用通用的结构和通用的算法。</p><p>比如当一个 HashSet 的内容比较少的时候，可以用数组实现，但内容逐渐增多，再转换成用哈希表实现。如果我们想让使用者不用关心这些实现的细节，使用同样的接口就能享受到更好的性能，那么，就可以考虑用智能指针来统一它的行为。</p><h3>使用小练习</h3><p>我们来看一个实际的例子。之前讲过，Rust 下 String 在栈上占了 24 个字节，然后在堆上存放字符串实际的内容，对于一些比较短的字符串，这很浪费内存。有没有办法在字符串长到一定程度后，才使用标准的字符串呢？</p><p>参考 Cow，我们可以用一个 enum 来处理：当字符串小于 N 字节时，我们直接用栈上的数组，否则，使用 String。但是这个 N 不宜太大，否则当使用 String 时，会比目前的版本浪费内存。</p><p>怎么设计呢？之前在内存管理的部分讲过，当使用 enum 时，额外的 tag + 为了对齐而使用的 padding 会占用一些内存。因为 String 结构是 8 字节对齐的，我们的 enum 最小 8 + 24 = 32 个字节。</p><p>所以，可以设计一个数据结构，<strong>内部用一个字节表示字符串的长度，用 30 个字节表示字符串内容，再加上 1 个字节的 tag，正好也是 32 字节，可以和 String 放在一个 enum 里使用</strong>。我们暂且称这个 enum 叫 MyString，它的结构如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/97/f45e1f15a1448943979f93d13cdc0197.jpg?wh=2987x1677\" alt=\"\"></p><p>为了让 MyString 表现行为和 &str 一致，我们可以通过实现 Deref trait 让 MyString 可以被解引用成 &str。除此之外，还可以实现 Debug/Display 和 From&lt;T&gt; trait，让 MyString 使用起来更方便。</p><p>整个实现的代码如下（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ce83a82cd66aa412e68eebf6b292a832\">代码</a>），代码本身不难理解，你可以试着自己实现一下，或者一行行抄下来运行，感受一下。</p><pre><code class=\"language-rust\">use std::{fmt, ops::Deref, str};\n\nconst MINI_STRING_MAX_LEN: usize = 30;\n\n// MyString 里，String 有 3 个 word，供 24 字节，所以它以 8 字节对齐\n// 所以 enum 的 tag + padding 最少 8 字节，整个结构占 32 字节。\n// MiniString 可以最多有 30 字节（再加上 1 字节长度和 1字节 tag），就是 32 字节.\nstruct MiniString {\n    len: u8,\n    data: [u8; MINI_STRING_MAX_LEN],\n}\n\nimpl MiniString {\n    // 这里 new 接口不暴露出去，保证传入的 v 的字节长度小于等于 30\n    fn new(v: impl AsRef&lt;str&gt;) -&gt; Self {\n        let bytes = v.as_ref().as_bytes();\n        // 我们在拷贝内容时一定要使用字符串的字节长度\n        let len = bytes.len();\n        let mut data = [0u8; MINI_STRING_MAX_LEN];\n        data[..len].copy_from_slice(bytes);\n        Self {\n            len: len as u8,\n            data,\n        }\n    }\n}\n\nimpl Deref for MiniString {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        // 由于生成 MiniString 的接口是隐藏的，它只能来自字符串，所以下面这行是安全的\n        str::from_utf8(&amp;self.data[..self.len as usize]).unwrap()\n        // 也可以直接用 unsafe 版本\n        // unsafe { str::from_utf8_unchecked(&amp;self.data[..self.len as usize]) }\n    }\n}\n\nimpl fmt::Debug for MiniString {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        // 这里由于实现了 Deref trait，可以直接得到一个 &amp;str 输出\n        write!(f, \"{}\", self.deref())\n    }\n}\n\n#[derive(Debug)]\nenum MyString {\n    Inline(MiniString),\n    Standard(String),\n}\n\n// 实现 Deref 接口对两种不同的场景统一得到 &amp;str\nimpl Deref for MyString {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        match *self {\n            MyString::Inline(ref v) =&gt; v.deref(),\n            MyString::Standard(ref v) =&gt; v.deref(),\n        }\n    }\n}\n\nimpl From&lt;&amp;str&gt; for MyString {\n    fn from(s: &amp;str) -&gt; Self {\n        match s.len() &gt; MINI_STRING_MAX_LEN {\n            true =&gt; Self::Standard(s.to_owned()),\n            _ =&gt; Self::Inline(MiniString::new(s)),\n        }\n    }\n}\n\nimpl fmt::Display for MyString {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \"{}\", self.deref())\n    }\n}\n\nfn main() {\n    let len1 = std::mem::size_of::&lt;MyString&gt;();\n    let len2 = std::mem::size_of::&lt;MiniString&gt;();\n    println!(\"Len: MyString {}, MiniString {}\", len1, len2);\n\n    let s1: MyString = \"hello world\".into();\n    let s2: MyString = \"这是一个超过了三十个字节的很长很长的字符串\".into();\n\n    // debug 输出\n    println!(\"s1: {:?}, s2: {:?}\", s1, s2);\n    // display 输出\n    println!(\n        \"s1: {}({} bytes, {} chars), s2: {}({} bytes, {} chars)\",\n        s1,\n        s1.len(),\n        s1.chars().count(),\n        s2,\n        s2.len(),\n        s2.chars().count()\n    );\n\n    // MyString 可以使用一切 &amp;str 接口，感谢 Rust 的自动 Deref\n    assert!(s1.ends_with(\"world\"));\n    assert!(s2.starts_with(\"这\"));\n}\n</code></pre><p>这个简单实现的 MyString，不管它内部的数据是纯栈上的 MiniString 版本，还是包含堆上内存的 String 版本，使用的体验和 &amp;str 都一致，仅仅牺牲了一点点效率和内存，就可以让小容量的字符串，可以高效地存储在栈上并且自如地使用。</p><p>事实上，Rust 有个叫 smartstring 的第三方库就实现了这个功能。我们的版本在内存上不算经济，对于 String 来说，额外多用了 8 个字节，smartstring 通过优化，只用了和 String 结构一样大小的 24 个字节，就达到了我们想要的结果。你如果感兴趣的话，欢迎去看看它的<a href=\"https://github.com/bodil/smartstring\">源代码</a>。</p><h2>小结</h2><p>今天我们介绍了三个重要的智能指针，它们有各自独特的实现方式和使用场景。</p><p>Box&lt;T&gt; 可以在堆上创建内存，是很多其他数据结构的基础。</p><p>Cow 实现了 Clone-on-write 的数据结构，让你可以在需要的时候再获得数据的所有权。Cow 结构是一种使用 enum 根据当前的状态进行分发的经典方案。甚至，你可以用类似的方案取代 trait object 做动态分发，<a href=\"https://gitlab.com/antonok/enum_dispatch\">其效率是动态分发的数十倍</a>。</p><p>如果你想合理地处理资源相关的管理，MutexGuard 是一个很好的参考，它把从 Mutex 中获得的锁包装起来，实现只要 MutexGuard 退出作用域，锁就一定会释放。如果你要做资源池，可以使用类似 MutexGuard 的方式。</p><h2>思考题</h2><ol>\n<li>目前 MyString 只能从 &amp;str 生成。如果要支持从 String 中生成一个 MyString，该怎么做？</li>\n<li>目前 MyString 只能读取，不能修改，能不能给它加上类似 String 的 <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.push_str\">push_str</a> 接口？</li>\n<li>你知道 Cow&lt;[u8]&gt; 和 Cow&lt;str&gt; 的大小么？试着打印一下看看。想想，为什么它的大小是这样呢？</li>\n</ol><p>欢迎在留言区分享你的思考。今天你已经完成Rust学习第15次打卡了，继续加油，我们下节课见～</p><h2>参考资料</h2><p>常见的通用内存分配器有 glibc 的 <a href=\"http://www.malloc.de/en/\">pthread malloc</a>、Google 开发的 <a href=\"https://github.com/google/tcmalloc\">tcmalloc</a>、FreeBSD 上默认使用的 <a href=\"https://github.com/jemalloc/jemalloc\">jemalloc</a> 等。除了通用内存分配器，对于特定类型内存的分配，我们还可以用 <a href=\"https://en.wikipedia.org/wiki/Slab_allocation\">slab</a>，slab 相当于一个预分配好的对象池，可以扩展和收缩。</p>","neighbors":{"left":{"article_title":"14｜类型系统：有哪些必须掌握的trait？","id":421324},"right":{"article_title":"16｜数据结构：Vec<T>、&[T]、Box<[T]> ，你真的了解集合容器么？","id":422975}},"comments":[]}