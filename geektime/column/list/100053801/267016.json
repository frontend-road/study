{"id":267016,"title":"16 | 如何使用噪声生成复杂的纹理？","content":"<p>你好，我是月影。</p><p>在<a href=\"https://time.geekbang.org/column/article/262330\">第11节课</a>中，我们使用随机技巧生成噪点、迷宫等复杂图案。它们的作用都是表达数据和增强视觉效果。要想在可视化视觉呈现中实现更加酷炫的视觉效果，我们经常需要生成能够模拟大自然的、丰富而复杂的纹理图案。</p><p>那么这节课，我们就继续来讨论，如何使用随机技巧来生成更加复杂的纹理图案。</p><h2>什么是噪声？</h2><p>我们先来回忆一下，随机效果是怎么生成的。在第11节课中，我们使用一个离散的二维伪随机函数，随机生成了一片带有噪点的图案。代码和最终效果如下：</p><pre><code>float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/3a/8e/3a539a23b70f8ca34a3c126139035d8e.jpeg?wh=1920*1080\" alt=\"\"></p><p>然后，我们用取整的技巧，将这个图案局部放大，就呈现出了如下的方格状图案：</p><p><img src=\"https://static001.geekbang.org/resource/image/40/2a/4082865db53e073b31520b9cyy90642a.jpeg?wh=1920*1080\" alt=\"\"></p><p>在真实的自然界中，这种离散的随机是存在的，比如鸟雀随机地鸣叫，蝉鸣随机地响起再停止，雨滴随机地落在某个位置等等。但随机和连续并存是更常见的情况，比如山脉的走向是随机的，山峰之间的高度又是连续，类似的还有天上的云朵、水流的波纹、被侵蚀的土地等等。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/c0/0441979299f96d57f2a6c87d0c9f08c0.jpeg?wh=1920*1080\" alt=\"\"></p><p>因此，要模拟这些真实自然的图形，我们就需要把随机和连续结合起来，这样就形成了<strong>噪声</strong>（Noise）。</p><h2>如何实现噪声函数？</h2><p>随机和连续究竟是怎么合成的呢？换句话说，噪声函数是怎么实现的呢？</p><p>因为随机数是离散的，那如果我们对离散的随机点进行插值，可以让每个点之间的值连续过渡。因此，我们用smoothstep或者用平滑的三次样条来插值，就可以形成一条连续平滑的随机曲线。</p><!-- [[[read_end]]] --><p>下面，我们就通过生成折线的小例子来验证一下。代码如下：</p><pre><code>#ifdef GL_ES\nprecision highp float;\n#endif\nvarying vec2 vUv;\n\n// 随机函数\nfloat random (float x) {\n  return fract(sin(x * 1243758.5453123));\n}\n\nvoid main() {\n  vec2 st = vUv - vec2(0.5);\n  st *= 10.0;\n  float i = floor(st.x);\n  float f = fract(st.x);\n  \n  // d直接等于随机函数返回值，这样d不连续\n  float d = random(i);\n  // float d = mix(random(i), random(i + 1.0), f);\n  // float d = mix(random(i), random(i + 1.0), smoothstep(0.0, 1.0, f));\n  // float d = mix(random(i), random(i + 1.0), f * f * (3.0 - 2.0 * f));\n  \n  gl_FragColor.rgb = (smoothstep(st.y - 0.05, st.y, d) - smoothstep(st.y, st.y + 0.05, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p>首先，我们对floor(st.x)取随机数，取出10个不同的d值，然后把它们绘制出来，就能在画布上呈现出10段不连续的线段。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/2c/2c89840e5d6e10ed22188bdc827b762c.jpeg?wh=1920*1080\" alt=\"\"></p><p>然后，我们用 mix(random(i), random(i + 1.0), f); 替换 random(i)（你可以将上面代码第18行注释掉，将第19行注释去掉），那么这些线段的首尾就会连起来，也就是说我们将得到一段连续的折线。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/d4/aeccd8853f623190c30ed74759dfafd4.jpeg?wh=1920*1080\" alt=\"\"></p><p>不过，我们得到的折线虽然连续，但因为这个函数在端点处不可导，所以它不平滑。因此，我们可以改用 mix(random(i), random(i + 1.0), smoothstep(0.0, 1.0, f)); 替换 random(i)（上面代码的第20行），或者直接采用三次多项式 mix(random(i), random(i + 1.0), f * f * (3.0 - 2.0 * f));（上面代码的第21行，这个三次多形式能达到和smoothstep一样的效果）来替换step。这样，我们就得到一条连续并且平滑的曲线了。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/4a/f4a05f47b8520ec2bf0dff35d561244a.jpeg?wh=1920*1080\" alt=\"\"></p><p>这也就是我们想要的噪声函数了。</p><p>但是，这个函数是一维的，如果要使用二维的，我们还可以把它扩展到二维。这个时候，我们就必须要知道，二维噪声和一维噪声之间的区别。很明显，一维噪声是对两点进行插值的，而二维噪声需要对平面画布上方形区域的四个顶点，分别从x、y方向进行两次插值。</p><p><a href=\"https://thebookofshaders.com/11/?lan=ch\"><img src=\"https://static001.geekbang.org/resource/image/98/ef/9802a1a82dd52d108c1d5yy449cefbef.jpeg?wh=1920*1080\" alt=\"\" title=\"图片来源：The Book of Shaders\"> </a></p><p>具体怎么做呢？我们可以把st与方形区域的四个顶点（对应四个向量）做插值，这样就能得到二维噪声。</p><pre><code>#ifdef GL_ES\nprecision highp float;\n#endif\n\nvarying vec2 vUv;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// 二维噪声，对st与方形区域的四个顶点插值\nhighp float noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix( mix( random( i + vec2(0.0,0.0) ),\n                    random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ),\n                    random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid main() {\n    vec2 st = vUv * 20.0;\n    gl_FragColor.rgb = vec3(noise(st));\n    gl_FragColor.a = 1.0;\n}\n</code></pre><p>通过上面的代码，我们就可以得到下面这个看起来比较模糊的噪声图案。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/b3/fb617c991c7abfa6b61fcb298ce4a8b3.jpeg?wh=1920*1080\" alt=\"\" title=\"模糊的噪声图案\"></p><h2>噪声的应用</h2><p>那你可能想问了，我们上面实现的一维噪声波形和二维的模糊噪声图案都比较简单，那它们到底是怎么模拟自然界中的现象，又该怎么实现有趣的视觉效果呢？</p><p>接下来，我们先结合上面得到的噪声函数，来讲2个简单的噪声应用，让你对它们能有更具体的认知。然后，我会在此基础上，再讲一些其他噪声函数，以及噪声能实现的更复杂视觉效果，让你对噪声有更深入的理解。</p><p>首先，我们可以结合噪声和距离场，来实现类似于水滴滚过物体表面的效果。</p><pre><code>void main() {\n    vec2 st = mix(vec2(-10, -10), vec2(10, 10), vUv);\n    float d = distance(st, vec2(0));\n    d *= noise(uTime + st);\n    d = smoothstep(0.0, 1.0, d) - step(1.0, d);\n    gl_FragColor.rgb = vec3(d);\n    gl_FragColor.a = 1.0;\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/a6/18/a6325bb4912957b864390789c5468118.gif?wh=524*520\" alt=\"\"></p><p>我们也可以使用不同的距离场构造方式，加上旋转噪声，构造出类似于木头的条纹。代码如下：</p><pre><code>float lines(in vec2 pos, float b){\n  float scale = 10.0;\n  pos *= scale;\n  return smoothstep(0.0, 0.5 + b * 0.5, abs((sin(pos.x * 3.1415) + b * 2.0)) * 0.5);\n}\n\nvec2 rotate(vec2 v0, float ang) {\n  float sinA = sin(ang);\n  float cosA = cos(ang);\n  mat3 m = mat3(cosA, -sinA, 0, sinA, cosA, 0, 0, 0, 1);\n  return (m * vec3(v0, 1.0)).xy;\n}\n\nvoid main() {\n  vec2 st = vUv.yx * vec2(10.0, 3.0);\n  st = rotate(st, noise(st));\n\n  float d = lines(st, 0.5);\n\n  gl_FragColor.rgb = 1.0 - vec3(d);\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/e8/fe/e8237529e1aa3795e89ea3a9366a56fe.jpeg?wh=1920*1080\" alt=\"\"></p><p>这两个应用的实现代码非常简单，你直接看代码就能理解。我更希望的是，你能通过我给出的代码，来理解这种噪声结合距离场的实现思路。</p><h3>梯度噪声</h3><p>我们前面说的噪声算法，它的原理是对离散的随机值进行插值，因此它又被称为<strong>插值噪声</strong>（Value Noise）。插值噪声有一个缺点，就是它的值的梯度不均匀。最直观的表现就是，二维噪声图像有明显的“块状”特点，不够平滑。</p><p>想要解决这个问题，我们可以使用另一种噪声算法，也就是<strong>梯度噪声</strong>（Gradient Noise）。梯度噪声是对随机的二维向量来插值，而不是一维的随机数。这样我们就能够获得更加平滑的噪声效果。梯度噪声的代码如下：</p><pre><code>#ifdef GL_ES\nprecision highp float;\n#endif\n\nvarying vec2 vUv;\n\nvec2 random2(vec2 st){\n  st = vec2( dot(st,vec2(127.1,311.7)),\n            dot(st,vec2(269.5,183.3)) );\n  return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                  dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n              mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                  dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid main() {\n    vec2 st = vUv * 20.0;\n    gl_FragColor.rgb = vec3(0.5 * noise(st) + 0.5);\n    gl_FragColor.a = 1.0;\n}\n</code></pre><p>梯度噪声可以平滑到什么程度呢？我在下面给出了两种噪声算法生成的图像，你可以明显得看出对比。第一个图是插值噪声的效果，黑白色之间过渡不够平滑，还有明显的色块感，第二个图是梯度噪声的效果，黑白的过渡就明显平滑多了，不再呈现块状。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/2d/f553f0eb5621f795a134e6d85478e52d.png?wh=1920*407\" alt=\"\" title=\"插值噪声与梯度噪声对比\"></p><p>因此，梯度噪声在二维空间中的应用更广泛，许多有趣的模拟自然界特效的视觉实现都采用了梯度噪声。你可以研究一下<a href=\"https://www.shadertoy.com/\">Shadertoy.com</a>平台上的一些例子，其中很多模拟自然界的例子都和梯度噪声有关，我就不一一列举了。</p><h3>用噪声实现云雾效果</h3><p>我还想给你讲一种使用噪声来模拟云雾效果的方法。如果你看过极客时间里winter老师的《重学前端》，可能对这个方法有所了解，因为他在一篇加餐简单提到过。在这里，我想给你详细说说云雾效果究竟是怎么实现的。</p><p>我们可以通过改变噪声范围，然后按照不同权重来叠加的方式创造云雾效果。比如，我们可以将噪声叠加6次，然后让它每次叠加的时候范围扩大一倍，但是权重减半。通过这个新的噪声算法，我们就能生成云雾效果了。你也可以试试，让这个噪声配合色相变化，可以创造出非常有趣的图形，比如模拟飞机航拍效果。</p><pre><code>//\n\n#define OCTAVES 6\nfloat mist(vec2 st) {\n  //Initial values\n  float value = 0.0;\n  float amplitude = 0.5;\n\n  // 叠加6次\n  for(int i = 0; i &lt; OCTAVES; i++) {\n    // 每次范围扩大一倍，权重减半\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n  }\n  return value;\n}\n\n//配合色相的变化\n\nvoid main() {\n  vec2 st = vUv;\n  st.x += 0.1 * uTime; \n  gl_FragColor.rgb = hsb2rgb(vec3 (mist(st), 1.0, 1.0));\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/3f/f2/3f1719cb63f5e6d0c0d182a15505e5f2.gif?wh=524*520\" alt=\"\" title=\"使用云雾效果生成的图案，非常像是飞机航拍\"></p><h3>Simplex Noise</h3><p>接下来，我还想给你讲一种更新的噪声算法，它是Ken Perlin在2001 年的 Siggraph会议上展示的Simplex Noise算法。</p><p>相比于前面的噪声算法，Simplex Noise算法有更低的计算复杂度和更少的乘法运算，并且可以用更少的计算量达到更高的维度，而且它制造出的噪声非常自然。</p><p>Simplex Noise与插值噪声以及梯度噪声的不同之处在于，它不是对四边形进行插值，而是对三角网格进行插值。与四边形插值相比，三角网格插值需要计算的点更少了，这样自然大大降低了计算量，从而提升了渲染性能。</p><p>Simplex Noise具体的实现思路非常精巧和复杂，其中包含的数学技巧比较高深，这里我就不详细来讲了，如果你有兴趣学习可以参考<a href=\"https://thebookofshaders.com/11/?lan=ch\">Book of Shaders的文章</a>来学习。</p><p>尽管Simplex Noise的原理很巧妙和复杂，但是在Shader中实现Simplex Noise代码并不算太复杂，你可以记住下面的代码，在需要的时候直接拿来使用。</p><pre><code>vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat noise(vec2 v) {\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x &gt; x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\nvoid main() {\n    vec2 st = vUv * 20.0;\n    gl_FragColor.rgb = vec3(0.5 * noise(st) + 0.5);\n    gl_FragColor.a = 1.0;\n}\n</code></pre><p>渲染效果如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/39/0a/3984a318acc90ccce0dcaf65aaf0a60a.jpeg?wh=1920*1080\" alt=\"\"></p><p>Simplex Noise可以实现出令人惊叹的效果，在<a href=\"https://www.shadertoy.com/\">Shadertoy.com</a>平台上经常有大神分享他们创作的神奇效果。比如，<a href=\"https://www.shadertoy.com/view/MdSXzz\">这个</a>像某种溶洞的岩壁效果，就有一种大自然鬼斧神工的韵味在。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/48/bbb7f35c9a0f4b639825074764025a48.gif?wh=320*180\" alt=\"\"></p><p>再比如，<a href=\"https://www.shadertoy.com/view/Ms2SD1\">这种像电影大片中才有的效果</a>，你很难想象这并不是视频，甚至不是图片，只不过是我们用数学公式在Shader中计算并绘制出来的图案而已。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/cc/0c209d3f0f65d45457420f74c057d2cc.gif?wh=320*180\" alt=\"\"></p><h3>网格噪声</h3><p>最后，我们来讲讲网格噪声。前面我们已经使用过大量网格化的技术，我想你也应该比较熟悉了。那什么是网格噪声呢？它就是将噪声与网格结合使用的一种纹理生成技术。下面，让我们通过一个生成动态生物细胞的例子，来详细理解一下如何使用网格噪声。</p><p>首先，我们用网格技术将画布分为10*10的网格。然后，我们构建距离场。这个距离场是在每个网格中随机一个特征点，然后计算网格内到该点的距离，最后根据距离来着色。</p><pre><code>#ifdef GL_ES\nprecision highp float;\n#endif\n\nvarying vec2 vUv;\nuniform float uTime;\n\nvec2 random2(vec2 st){\n  st = vec2( dot(st,vec2(127.1,311.7)),\n            dot(st,vec2(269.5,183.3)) );\n  return fract(sin(st) * 43758.5453123);\n}\n\nvoid main() {\n  vec2 st = vUv * 10.0;\n\n  float d = 1.0;\n  vec2 i_st = floor(st);\n  vec2 f_st = fract(st);\n\n  vec2 p = random2(i_st);\n  d = distance(f_st, p);\n  gl_FragColor.rgb = vec3(d);\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p>通过上面的代码，我们最终能得到如下的效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/ed/dc089df759336b3636f2a3cf7bfa71ed.jpeg?wh=1920*1080\" alt=\"\"></p><p>我们可以看到，这里的每个网格是独立的，并且界限分明。那如果我们想让它们的边界过渡更圆滑该怎么办呢？我们可以在原来的代码上做改变，具体来说就是不仅计算特征点到当前网格的距离，还要计算它到周围相邻的8个网格的距离，然后取最小值。与其他的编程语言类似，这个可以通过for循环来实现：</p><pre><code>void main() {\n  vec2 st = vUv * 10.0;\n  float d = 1.0;\n  vec2 i_st = floor(st);\n  vec2 f_st = fract(st);\n\n  for(int i = -1; i &lt;= 1; i++) {\n    for(int j = -1; j &lt;= 1; j++) {\n      vec2 neighbor = vec2(float(i), float(j));\n      vec2 p = random2(i_st + neighbor);\n      d = min(d, distance(f_st, neighbor + p));\n    }\n  }\n\n  gl_FragColor.rgb = vec3(d);\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p>这里有一点需要注意，GLSL语言的for循环限制比较多。其中，检查循环是否继续的次数必须是常量，不能是变量。所以GLSL中没有动态循环，而且迭代的次数必须是确定的。这里我们要检查9个网格，所以就用了两重循环来实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/c6/e8ed59accc7575f2fa22dc0a3e580fc6.jpeg?wh=1920*1080\" alt=\"\" title=\"计算像素坐标到九个特征点的最短距离\"></p><p><img src=\"https://static001.geekbang.org/resource/image/27/bb/277a3bb605dc035edb2ae43db1a679bb.jpeg?wh=1920*1080\" alt=\"\"></p><p>然后我们加上uTime，让网格动起来，另外我们把特征点也给显示出来。我们修改一下代码：</p><pre><code>void main() {\n  vec2 st = vUv * 10.0;\n\n  float d = 1.0;\n  vec2 i_st = floor(st);\n  vec2 f_st = fract(st);\n\n  for(int i = -1; i &lt;= 1; i++) {\n    for(int j = -1; j &lt;= 1; j++) {\n      vec2 neighbor = vec2(float(i), float(j));\n      vec2 p = random2(i_st + neighbor);\n      p = 0.5 + 0.5 * sin(uTime + 6.2831 * p);\n      d = min(d, distance(f_st, neighbor + p));\n    }\n  }\n\n  gl_FragColor.rgb = vec3(d) + step(d, 0.03);\n  gl_FragColor.a = 1.0;\n}\n</code></pre><p>这样，最终绘制的效果如下，它就有点像是运动的生物细胞。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/c6/b635854be3e0a9336906b02e46cdb3c6.gif?wh=520*520\" alt=\"\"></p><p>网格噪声是一种目前被广泛应用的程序化纹理技术，用来生成随机网格类的视觉效果，可以用来模拟物体表面的晶格、晶体生长、细胞、微生物等等有趣的效果。</p><p><a href=\"https://thebookofshaders.com/12/?lan=ch\"><img src=\"https://static001.geekbang.org/resource/image/63/c7/6396d5c7f143410352cb04da2a3cdbc7.jpg?wh=1000*500\" alt=\"\" title=\"网格噪声模拟物体表面晶格，图片来源于The Book of Shaders\"></a></p><h2>要点总结</h2><p>总的来说，这节课我给你讲的技术，实际上是一种复杂的程序化纹理生成技术。所谓程序化纹理生成技术，就是用程序来生成物体表面的图案。我们在这些图案中引入类似于自然界中的随机性，就可以模拟出自然的、丰富多采的以及包含真实细节的纹理图案。</p><p>这其中最有代表性的就是噪声了，噪声就是随机性与连续性结合而成的。噪声是自然界中普遍存在的自然规律。模拟噪声的基本思路是对离散的随机数进行平滑处理，对随机数进行平滑处理有不同的数学技巧，所以有插值噪声、梯度噪声、Simplex Noise等等不同的噪声算法。它们各有特点，我们可以根据不同的情况来选择怎么使用。</p><p>这一节课的内容偏向于技巧性，要想掌握好，我建议你多动手实践。我推荐给你一个非常不错的平台，<a href=\"https://www.shadertoy.com/\">Shadertoy.com</a> 。它是一个非常优秀的创作和分享着色器效果的平台，你可以在上面学习到很多优秀的案例，然后通过代码来理解创作者的创意和思路，巩固今天所学的知识。</p><h2>小试牛刀</h2><p>你能试着写出一个Shader，来实现我在下面给出的网格噪声效果吗？欢迎你把它分享出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/a0/d098bfc78426b56bf83efd5ddae6ffa0.gif?wh=500*498\" alt=\"\"></p><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课再见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\">完整示例代码见<a href=\"https://github.com/akira-cn/graphics/tree/master/noise\">GitHub仓库</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\"> [1] <a href=\"https://www.shadertoy.com/\">Shadertoy</a></span><br>\n<span class=\"reference\"> [2] <a href=\"https://thebookofshaders.com/11/?lan=ch\">The Book of Shaders</a></span></p>","comments":[{"had_liked":false,"id":316238,"user_name":"MG.Fre","can_delete":false,"product_type":"c1","uid":2438273,"ip_address":"","ucode":"F13921B03CC4D5","user_header":"https://static001.geekbang.org/account/avatar/00/25/34/81/f44f2f11.jpg","comment_is_top":false,"comment_ctime":1634215416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14519117304","product_id":100053801,"comment_content":"小试牛刀：<br>void main() {<br>\t\tvec2 st = vUv * 3.0;<br>\t\tvec3 color = vec3(.0);<br>\t\t...<br>\t\t&#47;&#47; 生成随机特征点（距离中心点）<br>\t\tfloat md = 1.0;<br>\t\tvec2 mg, mr;<br>\t\t&#47;&#47; 第一次遍历，找到特征点<br>\t\tfor(int i = -1; i &lt;= 1; i++){<br>\t\t\t&#47;&#47; 计算坐标点到周围9个网格特征点的距离的最小值，并保存最小的那个特征点<br>\t\t\tfor(int j = -1; j &lt;= 1; j++){<br>\t\t\t\t...<br>\t\t\t\tvec2 r = g + o - fr;<br>\t\t\t\tfloat m_dist = length(r);<br>\t\t\t\tif(md &gt; m_dist){<br>\t\t\t\t\t&#47;&#47; 保存最小距离时的偏移<br>\t\t\t\t\tmg = g;<br>\t\t\t\t\t&#47;&#47; 保存特征点向量<br>\t\t\t\t\tmr = r;<br>\t\t\t\t\t&#47;&#47; 保存最小距离<br>\t\t\t\t\tmd = m_dist;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\tmd = 1.0;<br>\t\t&#47;&#47; 第二次遍历，计算出当前的像素点，与周围9个特征点，与距离最近的特征点之间的向量关系算法<br>\t\tfor (int j= -1; j &lt;= 1; j++) {<br>\t\t\tfor (int i= -1; i &lt;= 1; i++) {<br>\t\t\t\t&#47;&#47; 同上<br>\t\t\t\t...<br>\t\t\t\tvec2 r = g + o - fr;<br>\t\t\t\t&#47;&#47; 0.00001是做精度处理<br>\t\t\t\tif ( dot(mr-r,mr-r) &gt; 0.00001 ) {<br>\t\t\t\t\t&#47;&#47; mr:最小距离的特征点到当前像素点的向量， r:周围特征点到当前像素点的向量。<br>\t\t\t\t\t&#47;&#47; 这里的思路是：利用三角形外心计算<br>\t\t\t\t\t&#47;&#47; 其余特征点到最小距离特征点形成向量a1 = r-mr， 像素点到a1中心点形成向量a2 = (mr+r)&#47;2，<br>\t\t\t\t\t&#47;&#47; 则求a2在a1上面的投影（点乘），就是距离场，求这个距离场的最小距离。<br>\t\t\t\t\tmd = min(md, dot( 0.5 * (mr + r), normalize(r - mr) ));<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\t&#47;&#47; 等高线<br>\t\tcolor = md * fract(md * 35.0 &#47; 2.0) * vec3(1.0);<br>\t\t&#47;&#47; 边框线<br>\t\tcolor = mix( vec3(1.0), color, smoothstep( 0.01, 0.02, md ) );<br>\t\t&#47;&#47; 标记特征点<br>\t\tcolor += step(length(mr), 0.03);<br>\t\tgl_FragColor.rgb = color;<br>\t}","like_count":4},{"had_liked":false,"id":275749,"user_name":"化石","can_delete":false,"product_type":"c1","uid":1038971,"ip_address":"","ucode":"649833ED4F4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/7b/3798fc16.jpg","comment_is_top":false,"comment_ctime":1611658693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906625989","product_id":100053801,"comment_content":"技术升华成艺术","like_count":1},{"had_liked":false,"id":246880,"user_name":"李冬杰","can_delete":false,"product_type":"c1","uid":1159802,"ip_address":"","ucode":"720BB5D36D28E6","user_header":"https://static001.geekbang.org/account/avatar/00/11/b2/7a/d7c26cf2.jpg","comment_is_top":false,"comment_ctime":1599520493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894487789","product_id":100053801,"comment_content":"在pixel shader生成艺术中，一般会使用噪声生成数据（纹理）的方式，而不是使用外部数据。","like_count":1},{"had_liked":false,"id":354958,"user_name":"阿不晕","can_delete":false,"product_type":"c1","uid":1285787,"ip_address":"浙江","ucode":"3C6EB050E82694","user_header":"https://static001.geekbang.org/account/avatar/00/13/9e/9b/a2fcb669.jpg","comment_is_top":false,"comment_ctime":1660907089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660907089","product_id":100053801,"comment_content":"这篇太硬核了。。话说这些算法里，dot 的使用目的是什么，为了算夹角么？","like_count":0},{"had_liked":false,"id":252393,"user_name":"sh","can_delete":false,"product_type":"c1","uid":1428920,"ip_address":"","ucode":"720991D01D50D9","user_header":"https://static001.geekbang.org/account/avatar/00/15/cd/b8/14597b01.jpg","comment_is_top":false,"comment_ctime":1602290233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602290233","product_id":100053801,"comment_content":"太牛了！","like_count":0}]}