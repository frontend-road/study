{"id":740917,"title":"第 9 章 使用 Go 语言实现 HTTP/2、HTML5 的协议","content":"\n    \n    <p>本章将使用 Go 语言来实现第 7 章介绍的一部分协议。由于第 8 章介绍的大部分是面向服务器端的功能，以及与 CSS 和视频流技术相关的内容，所以这里省略其实现。</p>\n    <h2 id=\"nav_point_238\">9.1　HTTP/2</h2>\n    <p>Go 语言从 2016 年 2 月发布的版本 1.6 开始对 HTTP/2 提供支持。仅通过设置 HTTPS 通信，表示 HTTP/2 的 <code>h2</code> 就会添加到第 4 章介绍的 NPN/ALPN\n        协商的候补中。如果客户端和服务器通过协商能够确认对方支持 HTTP/2，就可以使用 HTTP/2 进行通信。</p>\n    <p>代码清单 9-1 用于与 Google 进行通信，并确认协议版本。</p>\n    <p><strong>代码清单 9-1　确认 HTTP 协议版本</strong></p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"https://google.com/\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    fmt.Printf(\"Protocol Version: %s\\n\", resp.Proto)\n}</code></pre>\n    <p>Go 语言能够通过环境变量来控制是否支持 HTTP/2（表 9-1）。</p>\n    <p><strong>表 9-1　使用 GODEBUG 环境变量来控制 HTTP/2 的功能</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>环境变量</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>http2client=0</code></p>\n                </td>\n                <td>\n                    <p>将客户端的 HTTP/2 支持设为无效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>http2server=0</code></p>\n                </td>\n                <td>\n                    <p>将服务器的 HTTP/2 支持设为无效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>http2debug=1</code></p>\n                </td>\n                <td>\n                    <p>将 HTTP/2 相关的调试日志设为有效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>http2debug=2</code></p>\n                </td>\n                <td>\n                    <p>输出清除帧等更多的调试日志</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p>我们加上这些环境变量来运行一下代码。由于最详细的日志（<code>http2debug=2</code>）中的数据量太大，所以这里省略了一部分。该模式可能是为修改 HTTP/2\n        层的代码的人设计的。从下面的代码中可以看出，应用程序的创建者仅使用简单的环境变量（<code>http2debug=1</code>）就能查看通信记录。</p><!-- [[[read_end]]] -->\n    <pre class=\"code-rows\"><code>$ go run try_http2.go\nProtocol Version: HTTP/2.0\n\n$ GODEBUG=http2client=0 go run try_http2.go\nProtocol Version: HTTP/1.1\n\n$ GODEBUG=http2debug=1 go run try_http2.go\n2017/02/13 00:49:10 http2: Transport failed to get client conn for google.com:443:\n    http2: no cached connection was available\n2017/02/13 00:49:10 http2: Transport creating client conn 0xc420001ba0 to\n    216.58.197.238:443\n2017/02/13 00:49:10 http2: Transport encoding header \":authority\" = \"google.com\"\n2017/02/13 00:49:10 http2: Transport encoding header \":method\" = \"GET\"\n2017/02/13 00:49:10 http2: Transport encoding header \":path\" = \"/\"\n2017/02/13 00:49:10 http2: Transport encoding header \":scheme\" = \"https\"\n2017/02/13 00:49:10 http2: Transport encoding header \"accept-encoding\" = \"gzip\"\n2017/02/13 00:49:10 http2: Transport encoding header \"user-agent\" = \"Go-http-\n    client/2.0\"\n2017/02/13 00:49:10 http2: Transport received SETTINGS len=18, settings:\n    MAX_CONCURRENT_STREAMS=100, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_\n    SIZE=16384\n2017/02/13 00:49:10 Unhandled Setting: [MAX_HEADER_LIST_SIZE = 16384]\n2017/02/13 00:49:10 http2: Transport received WINDOW_UPDATE len=4 (conn)\n    incr=983041\n2017/02/13 00:49:10 http2: Transport received SETTINGS flags=ACK len=0\n2017/02/13 00:49:10 http2: Transport received HEADERS flags=END_HEADERS stream=1\n    len=150\n2017/02/13 00:49:10 http2: Transport received DATA flags=END_STREAM stream=1\n    len=262\n    data=\"....&lt;/H\" (6 bytes omitted)\nProtocol Version: HTTP/2.0</code></pre>\n    <p>deeeet 在博客文章《Go 语言和 HTTP/2》<span class=\"comment-number\">1</span> 中写了详细的实现，以及通过 Go 语言使用创建帧的 API 和 HPACK 的示例代码。Go 语言的版本 1.6\n        与版本 1.8 之间的区别在于下一节介绍的服务器推送。</p>\n    \n    <h2 id=\"nav_point_239\">9.2　HTTP/2 的服务器推送</h2>\n    <p>Go 语言从版本 1.8 开始支持服务器推送，提供了与第 4 章介绍的 Chunk 形式的传输方式相似的 API。</p>\n    <pre class=\"code-rows\"><code>func handler(w http.ResponseWriter, r *http.Request) {\n    pusher, ok := w.(http.Pusher)\n    if ok {\n        pusher.Push(\"/style.css\", nil)\n    }\n    // 通常的事件处理器的处理\n}</code></pre>\n    <p>在 Chunk 形式的传输方式中，会将 <code>http.ResponseWriter</code> 转换为 <code>http.Flusher</code> 来访问特殊的方法\n        <code>Flush()</code>，而在 HTTP/2 的服务器推送中，则是转换为 <code>http.Pusher</code> 来使用。</p>\n    <p>使用 Go 语言来实现服务器推送的代码如代码清单 9-2 所示。</p>\n    <p><strong>代码清单 9-2　服务器推送</strong></p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\nvar image []byte\n\n// 准备图像文件\nfunc init() {\n    var err error\n    image, err = ioutil.ReadFile(\"./image.png\")\n    if err != nil {\n        panic(err)\n    }\n}\n\n// 将 HTML 发送给浏览器\n// 推送图像\nfunc handlerHtml(w http.ResponseWriter, r *http.Request) {\n    // 如果可以转换为 Pusher，则（在使用 HTTP/2 连接的情况下）进行推送\n    pusher, ok := w.(http.Pusher)\n    if ok {\n        pusher.Push(\"/image\", nil)\n    }\n    w.Header().Add(\"Content-Type\", \"text/html\")\n    fmt.Fprintf(w, `&lt;html&gt;&lt;body&gt;&lt;img src=\"/image\"&gt;&lt;/body&gt;&lt;/html&gt;`)\n}\n\n// 将图像文件发送给浏览器\nfunc handlerImage(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Content-Type\", \"image/png\")\n    w.Write(image)\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handlerHtml)\n    http.HandleFunc(\"/image\", handlerImage)\n    fmt.Println(\"start http listening :18443\")\n    err := http.ListenAndServeTLS(\":18443\", \"server.crt\", \"server.key\", nil)\n    fmt.Println(err)\n}</code></pre>\n    <p>准备一个用于推送的图像文件（<code>image.png</code>）。服务器为第 6 章介绍的使用了 TLS 的服务器，Handler 准备了 HTML 和图像。当访问 HTML 时，服务器推送图像的 URL。</p>\n    <p>将路径传入 <code>Push()</code> 方法的第一个参数中。具体的内部动作是，模拟访问服务器，在获取 <code>/image.png</code> 的内容后，将其作为\n        <code>PUSH_PROMISE</code> 帧发送给客户端。</p>\n    <p>HTTP/2 的代码与 HTTP/1.1 的代码的不同之处在于，如果可以转换为 <code>Pusher</code>，则进行推送。不管是推送时还是请求时，使用的都是发送图像的\n        Handler。通过最小程度的刷新，就可以进行服务器推送。另外，如果存在检查是否可以转换的代码，则可以向后兼容，因此在 HTTP/1.1 环境下也能够运行。</p>\n    <p>下面，我们加上 <code>GODEBUG=http2server=0</code>，与 HTTP/1.1 中的运行结果进行比较。打开 Chrome 开发工具的网络选项卡来比较一下。HTTP/1.1 的状态如图 9-1\n        所示，HTTP/2 的状态如图 9-2 所示。</p>\n    <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00422.jpeg\" alt=\"{%}\" /></p>\n    <p class=\"ebook-image-title\"><strong>图 9-1　HTTP/1.1 的网络选项卡的状态</strong></p>\n    <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00423.jpeg\" alt=\"{%}\" /></p>\n    <p class=\"ebook-image-title\"><strong>图 9-2　HTTP/2 的网络选项卡的状态</strong></p>\n    <p>在图 9-2 中，Initiator 栏中写着 <code>Push</code>，右侧的写着时间序列的处理内容的 Waterfall 栏的情况也与 HTTP/1.1\n        有很大不同。将鼠标放在上面，就会显示详细的时间轴。HTTP/1.1 时间轴的详细内容如图 9-3 所示，HTTP/2 时间轴的详细内容如图 9-4 所示。</p>\n    <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00424.jpeg\" alt=\"{%}\" /></p>\n    <p class=\"ebook-image-title\"><strong>图 9-3　HTTP/1.1 时间轴的详细内容</strong></p>\n    <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00425.jpeg\" alt=\"{%}\" /></p>\n    <p class=\"ebook-image-title\"><strong>图 9-4　HTTP/2 时间轴的详细内容</strong></p>\n    <p>由于是本地服务器且图像文件很小，所以单位很小，但在 HTTP/1.1 中，从发送请求到下载完毕要花费约 1.2 ms。发送请求的准备时间也有约 2 ms。</p>\n    <p>在 HTTP/2 中，由于图像文件已经下载完毕并保存在了本地，所以只要从缓存中读取即可。花费的时间约为 0.3 ms。</p>\n    <h3 id=\"nav_point_240\">HTTP/2 的补充说明</h3>\n    <p>在 Go 语言的 HTTP/2 实现中，我们介绍了使用模拟请求来创建推送的内容。因为是模拟请求，所以传递给 Handler 的 <code>r *http.Request</code> 也是虚构的。除了必不可少的\n        <code>Host</code> 首部，该实现中没有任何首部。据笔者所知，所有的客户端发送的 <code>User-Agent</code>\n        首部也是空的。在测试时可能会改变用于推送的内容和一般请求返回的内容，不过实际的解决方案中不会出现这种做法。</p>\n    <p>另外，推送对象并不是只有在 HTML 中使用的 asset，在接下来跳转的未请求的页面中使用的图像等也可以推送。这一技术今后很可能会用于广告分发等。</p>\n    <h2 id=\"nav_point_241\">9.3　Server-SentEvents</h2>\n    <p>Server-Sent Events 是 Chunk 形式的应用，因此我们可以使用第 6 章介绍的 <code>http.Flusher</code> 来实现。</p>\n    <h3 id=\"nav_point_242\">9.3.1　服务器的实现</h3>\n    <p>我们来创建一个连续显示质数的服务，这里分为两个文件来实现。</p>\n    <blockquote>\n        <ul>\n            <li>服务器</li>\n            <li>HTML 视图</li>\n        </ul>\n    </blockquote>\n    <p>首先是服务器部分。我们使用 Go 语言的标准库中计算质数的 <code>ProbablyPrime()</code> 方法，代码如下。</p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"math/big\"\n    \"net/http\"\n    \"time\"\n)\n\nvar html []byte\n\n// 将 HTML 发送给浏览器\nfunc handlerHtml(w http.ResponseWriter, r *http.Request) {\n    // 如果可以转换为 Pusher，则进行推送\n    w.Header().Add(\"Content-Type\", \"text/html\")\n    w.Write(html)\n}\n\n// 将质数发送给浏览器\nfunc handlerPrimeSSE(w http.ResponseWriter, r *http.Request) {\n    flusher, ok := w.(http.Flusher)\n    if !ok {\n        http.Error(w, \"Streaming unsupported!\", http.StatusInternalServerError)\n        return\n    }\n    // 获取上下文以检测连接中断\n    ctx := r.Context()\n    w.Header().Set(\"Content-Type\", \"text/event-stream\")\n    w.Header().Set(\"Cache-Control\", \"no-cache\")\n    w.Header().Set(\"Connection\", \"keep-alive\")\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\n    var num int64 = 1\n    for id := 1; id &lt;= 100; id++ {\n        // 通信中断时结束\n        select {\n        case &lt;-ctx.Done():\n            fmt.Println(\"Connection closed from client\")\n            return\n        default:\n            // do nothing\n        }\n        for {\n            num++\n            // 计算质数\n            if big.NewInt(num).ProbablyPrime(20) {\n                fmt.Println(num)\n                fmt.Fprintf(w, \"data: {\\\"id\\\": %d, \\\"number\\\": %d}\\n\\n\", id, num)\n                flusher.Flush()\n                time.Sleep(time.Second)\n                break\n            }\n        }\n        time.Sleep(time.Second)\n    }\n    // 超过 100 个后结束发送\n    fmt.Println(\"Connection closed from server\")\n}\n\nfunc main() {\n    var err error\n    html, err = ioutil.ReadFile(\"index.html\")\n    if err != nil {\n        panic(err)\n    }\n    http.HandleFunc(\"/\", handlerHtml)\n    http.HandleFunc(\"/prime\", handlerPrimeSSE)\n    fmt.Println(\"start http listening :18888\")\n    err = http.ListenAndServe(\":18888\", nil)\n    fmt.Println(err)\n}</code></pre>\n    <p>这里定义了两个 Handler，前者只用于返回静态的 HTML，后者用于 Server-Sent Events。在设置完需要的首部后，循环进行多次输出质数并调用 <code>Flush()</code> 的处理。这里只是根据\n        <code>data:</code> 和 <code>event:</code>（这里并未使用）等 Server-Sent Events 的语法来输出文本并调用\n        <code>Flush()</code>。为了能每秒显示一个质数，代码中还加入了等待处理。</p>\n    <p>一旦浏览器关闭，就会通过 <code>CloseNotify</code> 通道传递信息。示例代码中的 <code>select</code> 语句是用于从质数通道和结束通知的通道这两个通道中选择处于激活状态的那个通道的 Go\n        语言的语法。</p>\n    <p>最后是 HTML 视图。在使用 Server-Sent Events 刷新页面的地方使用了 MVC 框架 Mithril。由于未使用编译器等，所以以下代码可以直接运行。</p>\n    <pre class=\"code-rows\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n        &lt;title&gt; 质数&lt;/title&gt;\n        &lt;script src=\"//unpkg.com/mithril/mithril.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"//unpkg.com/mithril-stream\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"root\"&gt;&lt;/div&gt;\n        &lt;script&gt;\n        const component = {\n            oninit: function(vnode) {\n                this.primes = stream([]);\n                const sse = new EventSource('/prime');\n                sse.onmessage = (event) =&gt; {\n                    this.primes().splice(0, 0, JSON.parse(event.data));\n                    m.redraw();\n                };\n            },\n            view: function() {\n                return m(\"div\", [\n                    m(\"ul\", this.primes().map((prime) =&gt; {\n                        return m(\"li\", , prime.number);\n                    }))\n                ]);\n            }\n        };\n        m.mount(document.getElementById(\"root\"), component);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n    <p>与往常一样，运行服务器程序，在 <code>localhost:18888</code> 等待。我们使用浏览器来访问一下。</p>\n    <p>上面的代码是客户端和服务器一对一的示例。实际上，HTML 视图多用于聊天室等，以在访问 Web\n        的多个用户之间共享信息。为了向各组的用户发送数据，使用数组来管理针对每个用户创建的消息和关闭通知的通道，并广播消息，类似这样的结构会被创建出来 <span class=\"comment-number\">2</span>。在介绍\n        WebSocket 时讲解的示例代码中就有处理房间的内容。</p>\n    \n    <h3 id=\"nav_point_243\">9.3.2　客户端的实现</h3>\n    <p>我们也可以使用 Go 语言来实现客户端。Server-Sent Events 是预先知道分隔符是换行符的 Chunk 形式，所以我们可以使用第 6 章介绍的客户端实现方法中的简单的方法来实现客户端，如下所示。</p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"context\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    \"os\"\n)\n\ntype Event struct {\n    Name string\n    ID   string\n    Data string\n}\n\nfunc EventSource(url string) (chan Event, context.Context, error) {\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return nil, nil, err\n    }\n    ctx, cancel := context.WithCancel(req.Context())\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return nil, nil, err\n    }\n    if res.StatusCode != 200 {\n        return nil, nil, fmt.Errorf(\"Response Status Code should be 200, but %d\\n\",\nres.StatusCode)\n    }\n    events := make(chan Event)\n    go receiveSSE(events, cancel, res)\n    return events, ctx, nil\n}\n\nfunc receiveSSE(events chan Event, cancel context.CancelFunc, res *http.Response) {\n    reader := bufio.NewReader(res.Body)\n    var buffer bytes.Buffer\n    event := Event{}\n    for {\n        line, err := reader.ReadBytes('\\n')\n        if err != nil {\n            close(events)\n            if err == io.EOF {\n                cancel()\n                return\n            }\n            panic(err)\n        }\n        switch {\n        case bytes.HasPrefix(line, []byte(\":ok\")):\n            // 跳过\n        case bytes.HasPrefix(line, []byte(\"id:\")):\n            event.ID = string(line[4 : len(line)-1])\n        case bytes.HasPrefix(line, []byte(\"event:\")):\n            event.Name = string(line[7 : len(line)-1])\n        case bytes.HasPrefix(line, []byte(\"data:\")):\n            buffer.Write(line[6:])\n        case bytes.Equal(line, []byte(\"\\n\")):\n            event.Data = buffer.String()\n            buffer.Reset()\n            if event.Data != \"\" {\n                events &lt;- event\n            }\n            event = Event{}\n        default:\n            fmt.Fprintf(os.Stderr, \"Parse Error: %s\\n\", line)\n            cancel()\n            close(events)\n        }\n    }\n}\n\nfunc main() {\n    events, ctx, err := EventSource(\"http://localhost:18888/prime\")\n    if err != nil {\n        panic(err)\n    }\n    for {\n        select {\n        case &lt;-ctx.Done():\n            return\n        case event := &lt;-events:\n            fmt.Printf(\"Event(Id=%s, Event=%s): %s\\n\", event.ID, event.Name, event.\nData)\n        }\n    }\n}</code></pre>\n    <p>代码有点长，主要由 HTTP 连接部分（<code>EventSource()</code>）、通过内部处理来进行 Server-Sent Events\n        的传递处理的方法（<code>receiveSSE()</code>）和利用前两部分的代码的客户端代码（<code>main()</code>）这三部分构成。</p>\n    <p>传递处理部分只是以换行符为单位对数据进行分隔，然后将其放入 <code>Event</code> 结构体，并发送到通道中。</p>\n    <p>在客户端代码中，当通信中断时（从 <code>ctx.Done()</code> 通道接收数据时），可以像 JavaScript 的 API 那样重新进行连接。</p>\n    <pre class=\"code-rows\"><code>for {\n    select {\n    case &lt;-ctx.Done():\n        fmt.Println(\"Connection close from server\")\n        events, ctx, err = EventSource(\"http://localhost:18888/prime\")\n        if err != nil {\n            panic(err)\n        }\n        continue\n    case event := &lt;-events:\n        fmt.Printf(\"Event(Id=%s, Event=%s): %s\\n\", event.ID, event.Name, event.\nData)\n    }\n}</code></pre>\n    <h2 id=\"nav_point_244\">9.4　WebSocket</h2>\n    <p>面向 Go 语言的 WebSocket 的实现有很多种。虽然也有准标准库（<code>golang.org/x/net/websocket</code>），但该准标准库的 README 中写了不推荐使用该库。推荐使用的代替库是\n        Go 语言的 Web 应用程序框架 Gorilla 提供的 WebSocket 实现。该库既提供了面向服务器的功能，也提供了面向客户端的功能。</p>\n    <p>WebSocket 很难实现，所以笔者来介绍一下。第 1 章也介绍过，在使用第三方库和准标准库时，需要提前下载并安装。</p>\n    <p>如果源代码中已经使用了库，就可以使用以下命令来一次性获取这些库。</p>\n    <p><strong>一次性获取当前文件夹的源代码中使用的库</strong></p>\n    <pre class=\"code-rows\"><code>$ go get</code></pre>\n    <p>后面笔者会介绍使用方法，但由于该库中已经有了许多示例代码，所以本书中就不再创建示例代码进行讲解了。</p>\n    <h3 id=\"nav_point_245\">9.4.1　服务器的实现</h3>\n    <p>我们来看一下实现 WebSocket 的发送和接收的简单的示例代码。</p>\n    <p>服务器在前面出现的 HTTP 服务器的 <code>handler</code> 函数中进行协议升级，获取 <code>websocket.Conn</code> 的指针类型的变量 <code>c</code>。</p>\n    <pre class=\"code-rows\"><code>var upgrader = websocket.Upgrader{} // use default options\n\nfunc echo(w http.ResponseWriter, r *http.Request) {\n    c, err := upgrader.Upgrade(w, r, nil)\n    if err != nil {\n        log.Print(\"upgrade:\", err)\n        return\n    }\n    ︙\n}</code></pre>\n    <p>这里的关键在于 <code>Upgrade()</code> 方法执行的处理，不过这与第 6 章介绍的内容并没有什么不同。</p>\n    <p>在取出一些必要的首部进行确认后，使用 <code>http.Hijacker</code> 方法取出内部的套接字。</p>\n    <pre class=\"code-rows\"><code>h, ok := w.(http.Hijacker)\nvar rw *bufio.ReadWriter\nnetConn, rw, err = h.Hijack()</code></pre>\n    <p>创建包含下述响应首部的通信响应，然后直接使用该套接字返回响应，这样升级就完成了。虽然 <code>*websocket.Conn</code> 与 <code>net.Conn</code> 不兼容，但它们拥有几个相同的方法。\n    </p>\n    <pre class=\"code-rows\"><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade</code></pre>\n    <p>在升级完成后，通信时主要会使用代码清单 9-3 中的两个方法。除了会接收和返回消息类型，这两个方法与 <code>net.Conn</code> 的 <code>Read()</code> 方法和\n        <code>Write()</code> 方法一样。</p>\n    <p><strong>代码清单 9-3　通信时使用的方法</strong></p>\n    <pre class=\"code-rows\"><code>// 写入方法\nws.WriteMessage(messageType int, data []byte) error\n\n// 读取方法\nws.ReadMessage() (messageType int, data []byte, err error)</code></pre>\n    <p>消息类型如表 9-2 所示。</p>\n    <p><strong>表 9-2　消息类型</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>常量</p>\n                </th>\n                <th>\n                    <p>值</p>\n                </th>\n                <th>\n                    <p>含义</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>websocket.TextMessage</code></p>\n                </td>\n                <td>\n                    <p>1</p>\n                </td>\n                <td>\n                    <p>UTF-8 字符串</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>websocket.BinaryMessage</code></p>\n                </td>\n                <td>\n                    <p>2</p>\n                </td>\n                <td>\n                    <p>二进制数据</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>websocket.CloseMessage</code></p>\n                </td>\n                <td>\n                    <p>8</p>\n                </td>\n                <td>\n                    <p>请求关闭</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>websocket.PingMessage</code></p>\n                </td>\n                <td>\n                    <p>9</p>\n                </td>\n                <td>\n                    <p>发送心跳（用于确认是否可以通信）</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>websocket.PongMessage</code></p>\n                </td>\n                <td>\n                    <p>10</p>\n                </td>\n                <td>\n                    <p>接收心跳</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p>普通消息中使用 <code>websocket.TextMessage</code> 和 <code>websocket.BinaryMessage</code>。</p>\n    <p>其他控制命令主要是关于通信的连接和切断的。<code>websocket.CloseMessage</code> 用来传递切断通信的指示。<code>websocket.PingMessage</code> 和\n        <code>websocket.PongMessage</code> 配套使用。为了表明通信未中断，客户端会定期向服务器发送 <code>PingMessage</code>。</p>\n    <p><code>PongMessage</code> 是用于接收消息的 ID，不能在发送消息时使用。如果像代码清单 9-4 那样设置了事件处理器，服务器就会执行对方在发送消息时指定的处理。该代码选自聊天示例。当心跳 <span&#10; class=\"comment-number\">3 被定期发送来时，服务器就会更新套接字的超时设置。如果客户端的通信中断了，则超时时间就不再更新，超时后自动关闭套接字。</span&#10;></p>\n    \n    <p><strong>代码清单 9-4　设置事件处理器</strong></p>\n    <pre class=\"code-rows\"><code>conn.SetPongHandler(\n    func(string) error {\n        conn.SetReadDeadline(\n            time.Now().Add(pongWait));\n    return nil}\n)</code></pre>\n    <h3 id=\"nav_point_246\">9.4.2　客户端的实现</h3>\n    <p>客户端代码也能够使用模拟 Go 语言标准库 <code>net.Dial</code> 的 API 来轻松实现连接。</p>\n    <p><strong>WebSocket 的客户端代码</strong><br /><code>c, _, err := websocket.DefaultDialer.Dial(u.String(), nil)</code>\n    </p>\n    <p>将 URL 传递给参数后，会返回与 <code>*websocket.Conn</code> 类型相同的套接字，然后就可以使用与服务器相同的 API 进行双向通信了。</p>\n    <p>与服务器一样，客户端进行的是第 6 章介绍的协议升级。使用 <code>net.Request</code> 结构体，将 <code>GET</code> 的 HTTP 请求发送给对方 URL 的服务器。如果响应中返回了\n        <code>101</code> 状态码，就获取需要的首部来初始化客户端的套接字结构体。</p>\n    <h3 id=\"nav_point_247\">9.4.3　房间的实现</h3>\n    <p>无论是 Server-Sent Events，还是 WebSocket，要想用来交流，就需要实现“房间”功能。“房间”是在线游戏中的概念。房间里的成员进行实时通信，一起打游戏，这是游戏团队的最小单位。访问同一个 URL\n        的人会进入同一个房间，而在大型服务中，还需要准备用于选择进入房间的成员的大厅。</p>\n    <p>Gorilla 的 chat 的示例代码中实现了一个名为“Hub”的房间，如下所示。</p>\n    <pre class=\"code-rows\"><code>type Hub struct {\n    // 登录的客户端\n    clients map[*Client]bool\n    // 客户端发来的消息\n    broadcast chan []byte\n    // 客户端的登录请求\n    register chan *Client\n    // 客户端的注销请求\n    unregister chan *Client\n}\n\n// 初始化后通过 goroutine 执行的方法\nfunc (h *Hub) run() {\n    for {\n        select {\n        case client := &lt;-h.register:\n            h.clients[client] = true\n        case client := &lt;-h.unregister:\n            if _, ok := h.clients[client]; ok {\n                delete(h.clients, client)\n                close(client.send)\n            }\n        case message := &lt;-h.broadcast:\n            for client := range h.clients {\n                select {\n                case client.send &lt;- message:\n                default:\n                    close(client.send)\n                    delete(h.clients, client)\n                }\n            }\n        }\n    }\n}</code></pre>\n    <p>示例代码里有在初始化时管理客户端的 <code>map</code>，以及接收客户端发来的异步消息的 3 个通道（消息、登录、注销）。另外，该示例代码中还执行了连接和切断处理。</p>\n    <h2 id=\"nav_point_248\">9.5　本章小结</h2>\n    <p>本章介绍了 HTTP/2、Server-Sent Events 和 WebSocket 的相关实现。</p>\n    <p>我们了解了 HTTP/2 的内部实现非常复杂，但从 Go 语言的 API 层面来看，通过最小程度的修改就可以实现服务器推送等。另外，Server-Sent Events 是第 6 章介绍的 Chunk\n        形式的延伸，WebSocket 是第 6 章介绍的协议升级的延伸。客户端使用在 HTML 上运行的 JavaScript 来执行 Server-Sent Events 和 WebSocket，这种情况应该占一大半，而使用\n        Go 语言也可以执行。</p>\n    <p>本章并未涉及 WebRTC 的相关内容。在本书第 1 版出版时，WebRTC 规范本身还未确定，修改比较频繁，当时还没有能让人放心使用的 Go 语言库。虽然现在有了 <code>pion</code> 库，但从 awesome\n        pion 页面可以看出，<code>pion</code> 有很多种用法，很难通过 HTTP 参考书的部分篇幅来进行全面的介绍。另外，通信机器的拓扑结构也与前面介绍的 HTTP\n        服务器和浏览器的组合存在很大不同，这也带来了一定的困难。WebRTC 到底有多难，大家可以参考一下 Voluntas 写的《工作中的 WebRTC》<span&#10; class=\"comment-number\">4。笔者也希望有人能将这些内容单独写成一本书。</span&#10;></p>\n    \n    <p>到本章为止，关于 HTTP/1.1 之前、HTTP/1.1 和 HTTP/2 之后的内容，笔者分别使用了 3\n        章进行介绍。从下一章开始，笔者介绍的内容将不涉及具体版本。这是因为，与其再按版本分开讲解，不如针对某一课题进行探讨比较好。接下来会介绍关于 RESTful、JavaScript 的前端 API、Web\n        服务提供端的结构和安全等的内容。</p>\n\n    <br style=\"page-break-after:always\" />\n    ","comments":[]}