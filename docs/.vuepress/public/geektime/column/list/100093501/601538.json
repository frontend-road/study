{"id":601538,"title":"41 | 驯服泛型：明确使用时机","content":"<p>你好，我是Tony Bai。</p><p>在前面关于Go泛型的两讲中，我们学习了Go泛型的基本语法类型参数，掌握了使用Go内置约束和自定义约束的方法，并对Go泛型新引入的类型集合概念做了全面说明。有了上面的知识铺垫后，我相信你已经具备了应用泛型语法编写泛型函数、定义泛型类型和方法的能力了。</p><p>不过，Go对泛型的支持，在提升了Go语言表达力的同时，也带来了不小的复杂性。也就是说，使用了泛型语法编写的代码在可读性、可理解性以及可维护性方面，相比于非泛型代码都有一定程度的下降。Go当初没有及时引入泛型的一个原因就是泛型与Go语言“简单”的设计哲学有悖，现在加入了泛型，<strong>Go核心团队以及Go社区却又开始担心“泛型被滥用”</strong>。</p><p>不过作为Go语言开发人员，我们每个人都有义务去正确、适当的使用泛型，而不是滥用或利用泛型炫技，因此在泛型篇的这最后一讲中，我就来说说什么时机适合使用泛型，供你参考。</p><h2>何时适合使用泛型？</h2><p>Go泛型语法体现在<strong>类型参数</strong>上，所以说，类型参数适合的场景就是适合应用泛型编程的时机。我们先来看看类型参数适合的第一种场景。</p><h4>场景一：编写通用数据结构时</h4><p>在Go尚不支持泛型的时候，如果要实现一个通用的数据结构，比如一个先入后出的stack数据结构，我们通常有两个方案。</p><!-- [[[read_end]]] --><p>第一种方案是为每种要使用的元素类型单独实现一套栈结构。如果我们要在栈里管理int型数据，我们就实现一个IntStack；如果要管理string类型数据，我们就再实现一个StringStack……总之，我们需要根据可能使用到的元素类型实现出<strong>多种专用的栈结构</strong>。</p><p>这种方案的优点是便于编译器的静态类型检查，保证类型安全，且运行性能很好，因为Go编译器可以对代码做出很好的优化。不过这种方案的缺点也很明显，那就是会有<strong>大量的重复代码</strong>。</p><p>第二种方案是使用 interface{} 实现通用数据结构。</p><p>在泛型之前，Go语言中唯一具有“通用”语义的语法就是 interface{} 了。无论Go标准库还是第三方实现的通用数据结构都是基于 interface{} 实现的，比如下面标准库中ring包中Ring结构就是使用 interface{} 作为元素类型的：</p><pre><code class=\"language-plain\">// $GOROOT/src/container/ring/ring.go\ntype Ring struct {\n    next, prev *Ring\n    Value      interface{} \n}\n</code></pre><p>使用 interface{} 固然可以实现通用数据结构，但 interface{} 接口类型的固有特性也决定了这个方案也自带以下“先天不足”：</p><ul>\n<li>Go编译器无法在编译阶段对进入数据结构中的元素的类型进行静态类型检查；</li>\n<li>要想得到元素的真实类型，不可避免要进行类型断言或type switch操作；</li>\n<li>不同类型数据赋值给 interface{} 或从 interface{} 还原时执行的装箱和拆箱操作带来的额外开销。</li>\n</ul><p>我们可以看到，以上两个方案都有各自的不足，那么有比较理想的方案么？</p><p>有的，那就是使用Go泛型。其实不止Go语言，其他支持泛型的主流编程语言的通用数据结构实现也都使用了泛型。下面是用Go泛型实现一个stack数据结构的示例代码：</p><pre><code class=\"language-plain\">// stack.go\npackage stack\n\ntype Stack[T any] []T\n\nfunc (s *Stack[T]) Top() (t T) {\n    l := len(*s)\n    if l == 0 {\n        return t\n    }\n    return (*s)[l-1]\n}\n\nfunc (s *Stack[T]) Push(v T) {\n    (*s) = append((*s), v)\n}\n\nfunc (s *Stack[T]) Len() int {\n    return len(*s)\n}\n\nfunc (s *Stack[T]) Pop() (T, bool) {\n    var zero T\n    if len(*s) &lt; 1 {\n        return zero, false\n    }\n\n    // Get the last element from the stack.\n    result := (*s)[len(*s)-1]\n\n    // Remove the last element from the stack.\n    *s = (*s)[:len(*s)-1]\n\n    return result, true\n}\n</code></pre><p>泛型版实现基本消除了前面两种方案的不足，如果非要说和IntStack、StringStack等的差异，那可能就是在执行性能上要差一些了。</p><pre><code class=\"language-plain\">$go test -bench .\ngoos: darwin\ngoarch: amd64\npkg: stack\nBenchmarkStack-8      \t72775926\t        19.53 ns/op\t      40 B/op\t       0 allocs/op\nBenchmarkIntStack-8   \t100000000\t        10.43 ns/op\t      45 B/op\t       0 allocs/op\nPASS\n</code></pre><p>当然，泛型版本性能略差与泛型的实现原理有关，这个我们后面再细说。</p><h4>场景二：函数操作的是Go原生的容器类型时</h4><p>如果函数具有切片、map或channel这些Go内置容器类型的参数，并且函数代码未对容器中的元素类型做任何特定假设，那我们使用类型参数可能很有帮助。</p><p><a href=\"https://time.geekbang.org/column/article/600122\">第39讲</a>中的maxGenerics那个例子就是这个情况，我们再回顾一下。</p><pre><code class=\"language-plain\">// max_generics.go\ntype ordered interface {\n    ~int | ~int8 | ~int16 | ~int32 | ~int64 |\n        ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |\n        ~float32 | ~float64 |\n        ~string\n}\n\nfunc maxGenerics[T ordered](sl []T) T {\n    if len(sl) == 0 {\n        panic(\"slice is empty\")\n    }\n    \n    max := sl[0]\n    for _, v := range sl[1:] {\n        if v &gt; max {\n            max = v\n        }\n    }\n    return max\n}\n</code></pre><p>我们看到，类型参数使得此类容器算法与容器内元素类型彻底解耦。在没有泛型语法之前，实现这样的函数通常需要使用反射。不过使用反射，会让代码可读性大幅下降，编译器也无法做静态类型检查，并且运行时开销也大得很。</p><h4>场景三：不同类型实现一些方法的逻辑相同时</h4><p>在Go编码过程中，我们经常会遇到这样一种情况，某个函数接受一个自定义接口类型作为参数，就像下面的doSomething函数以及其参数类型MyInterface接口。</p><pre><code class=\"language-plain\">type MyInterface interface {\n    M1()\n    M2()\n    M3()\n}\n\nfunc doSomething(i MyInterface) {\n}\n</code></pre><p>只有实现了MyInterface中全部三个方法的类型，才被允许作为实参传递给doSomething函数。当这些类型实现M1、M2和M3的逻辑看起来都相同时，我们就可以使用类型参数来帮助实现M1~M3这些方法了，下面就是通过类型参数实现这些方法的通用逻辑代码（实际逻辑做了省略处理）：</p><pre><code class=\"language-plain\">// common_method.go\n\ntype commonMethod[T any] struct{}\n  \nfunc (commonMethod[T]) M1() {}\nfunc (commonMethod[T]) M2() {}\nfunc (commonMethod[T]) M3() {}\n\nfunc main() {\n    var intThings commonMethod[int]\n    var stringThings commonMethod[string]\n    doSomething(intThings)\n    doSomething(stringThings)\n}\n</code></pre><p>我们看到，使用不同类型，比如int、string等作为commonMethod的类型实参就可以得到相应实现了M1~M3的类型的变量，比如intThings、stringThings，这些变量可以直接作为实参传递给doSomething函数。</p><p>当然我们也可以再封装一个泛型函数来简化上述调用：</p><pre><code class=\"language-plain\">func doSomethingCM[T any]() {\n    doSomething(commonMethod[T]{})\n}\n\nfunc main() {\n    doSomethingCM[int]()\n    doSomethingCM[string]()\n}\n</code></pre><p>这里的doSomethingCM泛型函数将commonMethod泛型类型实例化与调用doSomething函数的过程封装到一起，使得commonMethod泛型类型的使用进一步简化了。</p><p>其实，Go标准库的sort.Sort就是这样的情况，其参数类型为sort.Interface，而sort.Interface接口中定义了三个方法：</p><pre><code class=\"language-plain\">// $GOROOT/src/sort/sort.go\nfunc Sort(data Interface)\n\ntype Interface interface {\n\tLen() int\n\tLess(i, j int) bool\n\tSwap(i, j int)\n}\n</code></pre><p>所有实现sort.Interface类型接口的类型，在实现Len、Less和Swap这三个通用方法的逻辑看起来都相同，比如sort.go中提供的StringSlice和IntSlice两种类型的三个方法的实现如下：</p><pre><code class=\"language-plain\">type StringSlice []string\n\nfunc (x StringSlice) Len() int           { return len(x) }\nfunc (x StringSlice) Less(i, j int) bool { return x[i] &lt; x[j] }\nfunc (x StringSlice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n\ntype IntSlice []int\n\nfunc (x IntSlice) Len() int           { return len(x) }\nfunc (x IntSlice) Less(i, j int) bool { return x[i] &lt; x[j] }\nfunc (x IntSlice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n</code></pre><p>在这样的情况下，我们就可以通过类型参数来给出这三个方法的通用实现，<strong>这里我将其作为本讲的思考题留给你自己去实现</strong>。</p><p>不过要注意：如果多个类型实现上述方法的逻辑并不相同，那么我们就不应该使用类型参数。</p><p>好了，到这里最适合使用泛型的时机我都已经介绍了一遍。如果非要总结为一条，那就是：<strong>如果你发现自己多次编写完全相同的代码，其中副本之间的唯一区别是代码使用不同的类型，那么可考虑使用类型参数了</strong>。</p><p>假使你目前遇到的场景适合使用泛型，你可能依然会犹豫要不要使用泛型，因为你还不清楚泛型对代码执行性能的影响。特别是在一些性能敏感的系统中，这一点尤为重要。那么如何知道泛型对执行性能的影响呢？这就要从Go泛型实现原理说起了。</p><h2>Go泛型实现原理简介</h2><p>我在泛型加餐一文中曾提过：Go核心团队对泛型实现的探索开始得很早，在2009年12月，Go团队技术领导者Russ Cox就在其博客站点上发表一篇名为<a href=\"https://research.swtch.com/generic\">“泛型窘境”</a>的文章。在这篇文章中，Russ Cox提出了Go面对泛型可遵循的三个路径以及每个路径的不足，也就是三个slow（拖慢）。</p><ul>\n<li>C语言路径：不实现泛型，不会引入复杂性，但这会<strong>“拖慢程序员”</strong>，因为可能需要程序员花费精力做很多重复实现；</li>\n<li>C++语言路径：就像C++的泛型实现方案那样，通过增加编译器负担为每个类型实参生成一份单独的泛型函数的实现，这种方案产生了大量的代码，其中大部分是多余的，有时候还需要一个好的链接器来消除重复的拷贝，显然这个实现路径会<strong>“拖慢编译器”</strong>；</li>\n<li>Java路径：就像Java的泛型实现方案那样，通过隐式的装箱和拆箱操作消除类型差异，虽然节省了空间，但代码执行效率低，即<strong>“拖慢执行性能”</strong>。</li>\n</ul><p>如今Go加入了泛型，显然C语言的“拖慢程序员”这个路径被否决了，那么在剩下两个路径中，Go选择了哪条呢？下面我们就来真正看一下Go泛型的实现方案。</p><p>Go核心团队在评估Go泛型实现方案时是非常谨慎的，负责泛型实现设计的 <a href=\"https://github.com/randall77\">Keith Randall博士</a>一口气提交了三个实现方案，供大家讨论和选择：</p><ul>\n<li><a href=\"https://github.com/golang/proposal/blob/master/design/generics-implementation-stenciling.md\">Stenciling方案</a></li>\n<li><a href=\"https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries.md\">Dictionaries方案</a></li>\n<li><a href=\"https://github.com/golang/proposal/blob/master/design/generics-implementation-gcshape.md\">GC Shape Stenciling方案</a></li>\n</ul><p>为了让你更好地理解泛型实现原理，我先来逐一对上述方案做个简单介绍。我们首先看一下Stenciling方案。</p><h4>Stenciling方案</h4><p><img src=\"https://static001.geekbang.org/resource/image/a5/70/a5613f1568aa4faf23a10be88206a470.png?wh=839x945\" alt=\"图片\"></p><p>Stenciling方案也称为模板方案（如上图）， 它也是C++、Rust等语言使用的实现方案。其主要思路就是在编译阶段，根据泛型函数调用时类型实参或约束中的类型元素，为每个实参类型或类型元素中的类型生成一份单独实现。这么说还是很抽象，下图很形象地说明了这一过程：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/80/587fa465f4ceedb1bc7807e116012980.jpg?wh=841x496\" alt=\"图片\"></p><p>我们看到，Go编译器为每个调用生成一个单独的函数副本（图中函数名称并非真实的，仅为便于说明而做的命名），相同类型实参的函数只生成一次，或通过链接器消除不同包的相同函数实现。</p><p>图示的这一过程在其他编程语言中也被称为“单态化（monomorphization）”。单态是相对于泛型函数的参数化多态（parametric polymorphism）而言的。</p><p>Randall博士也提到了这种方案的不足，那就是<strong>拖慢编译器</strong>。泛型函数需要针对不同类型进行单独编译并生成一份独立的代码。如果类型非常多，那么编译出来的最终文件可能会非常大。同时由于CPU缓存无法命中、指令分支预测等问题，可能导致生成的代码运行效率不高。</p><p>当然，对于性能不高这个说辞，我个人持保留态度，因为模板方案在其他编程语言中基本上是没有额外的运行时开销的，并且是应该是对编译器优化友好的。很多面向系统编程的语言都选择该方案，比如C++、D语言、Rust等。</p><h4>Dictionaries方案</h4><p>Dictionaries方案与Stenciling方案的实现思路正相反，它不会为每个类型实参单独创建一套代码，反之它仅会有一套函数逻辑，但这个函数会多出一个参数dict，这个参数会作为该函数的第一个参数，这和Go方法的receiver参数在方法调用时自动作为第一个参数有些类似。这个dict参数中保存泛型函数调用时的类型实参的类型相关信息。下面是Dictionaries方案的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/61/34/614a821e9bf836fd6f7b689c178aec34.png?wh=991x556\" alt=\"\"></p><p>包含类型信息的字典是Go编译器在编译期间生成的，并且被保存在ELF的只读数据区段（.data）中，传给函数的dict参数中包含了到特定字典的指针。从方案描述来看，每个dict中的类型信息还是十分复杂的，不过我们了解这些就够了，对dict的结构就不展开说明了。</p><p>这种方案也有自身的问题，比如<strong>字典递归</strong>的问题，如果调用某个泛型函数的类型实参有很多，那么dict信息也会过多等等。更重要的是它对<strong>性能</strong>可能有比较大的影响，比如通过dict的指针的间接类型信息和方法的访问导致运行时开销较大；再比如，如果泛型函数调用时的类型实参是int，那么如果使用Stenciling方案，我们可以通过寄存器复制即可实现x=y的操作，但在Dictionaries方案中，必须通过memmove了。</p><h4>Go最终采用的方案：GC Shape Stenciling方案</h4><p>GC Shape Stenciling方案顾名思义，它基于Stenciling方案，但又没有为所有类型实参生成单独的函数代码，而是<strong>以一个类型的GC Shape为单元进行函数代码生成</strong>。一个类型的GC Shape是指该类型在Go内存分配器/垃圾收集器中的表示，这个表示由类型的大小、所需的对齐方式以及类型中包含指针的部分所决定。</p><p>这样一来势必就有GC Shape相同的类型共享一个实例化后的函数代码，那么泛型调用时又是如何区分这些类型的呢？</p><p>答案就是字典。该方案同样在每个实例化后的函数代码中自动增加了一个dict参数，用于区别GC Shape相同的不同类型。可见，GC Shape Stenciling方案本质上是Stenciling方案和Dictionaries方案的混合版，它也是Go 1.18泛型最终采用的实现方案，为此Go团队还给出<a href=\"https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries-go1.18.md\">一个更细化、更接近于实现的GC Shape Stenciling实现方案</a>。</p><p>下面是GC Shape Stenciling方案的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/44/01/445f90d42868f0b653371ef4a2cc3701.jpg?wh=1192x839\" alt=\"图片\"></p><p>那么如今的Go版本（Go 1.19.x）究竟会为哪些类型实例化出一份独立的函数代码呢？我们通过下面示例来看一下：</p><pre><code class=\"language-plain\">// gcshape.go\nfunc f[T any](t T) T {\n    var zero T\n    return zero\n}\n\ntype MyInt int\n\nfunc main() {\n    f[int](5)\n    f[MyInt](15)\n    f[int64](6)\n    f[uint64](7)\n    f[int32](8)\n    f[rune](18)\n    f[uint32](9)\n    f[float64](3.14)\n    f[string](\"golang\")\n\n    var a int = 5\n    f[*int](&amp;a)\n    var b int32 = 15\n    f[*int32](&amp;b)\n    var c float64 = 8.88\n    f[*float64](&amp;c)\n    var s string = \"hello\"\n    f[*string](&amp;s)\n}\n</code></pre><p>在这个示例中，我们声明了一个简单的泛型函数f，然后分别用不同的Go原生类型、自定义类型以及指针类型作为类型实参对f进行调用，我们通过工具为上述goshape.go生成的汇编代码如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/22/0ee0bc5b7f34670c1d03795a97628e22.jpg?wh=1540x1678\" alt=\"图片\"></p><p>从上图我们看到，Go编译器为每个底层类型相同的类型生成一份函数代码，像MyInt和int、rune和 int32；对于所有指针类型，像上面的*float64、*int和 *int32，仅生成一份名为 main.f[go.shape.*uint8_0] 的函数代码。</p><p>这与<a href=\"https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries-go1.18.md\">新版GC Shape方案</a>中的描述是一致的：“我们目前正在以一种相当精细的方式实现GC Shapes。当且仅当两个具体类型具有相同的底层类型或者它们都是指针类型时，它们才会在同一个GC Shape分组中”。</p><h2>泛型对执行效率的影响</h2><p>通过上面对Go泛型实现原理的了解，我们看到目前的Go泛型实现<strong>选择了一条折中的路线</strong>：既没有选择纯Stenciling方案，避免了对Go编译性能带去较大影响，也没有选择像Java那样泛型那样的纯装箱和拆箱方案，给运行时带去较大开销。</p><p>但GC Shape + Dictionaries的混合方案也确实会给泛型在运行时的执行效率带去影响，我们来看一个简单的实例：</p><pre><code class=\"language-plain\">// benchmark_simple/add.go\ntype plusable interface {\n    ~int | ~string\n}\n\nfunc add[T plusable](a, b T) T {\n    return a + b\n}\n\nfunc addInt(a, b int) int {\n    return a + b\n}\nfunc addString(a, b string) string {\n    return a + b\n}\n</code></pre><p>这个示例用于对比泛型函数实例化后的函数代码（如 add[int]）的性能与单态下的函数（如addInt）性能，下面是benchmark代码：</p><pre><code class=\"language-plain\">// benchmark_simple/add_test.go\nfunc BenchmarkAddInt(b *testing.B) {\n    b.ReportAllocs()\n    var m, n int = 5, 6\n    for i := 0; i &lt; b.N; i++ {\n        addInt(m, n)\n    }\n}\nfunc BenchmarkAddIntGeneric(b *testing.B) {\n    b.ReportAllocs()\n    var m, n int = 5, 6\n    for i := 0; i &lt; b.N; i++ {\n        add(m, n)\n    }\n}\n</code></pre><p>运行这个benchmark：</p><pre><code class=\"language-plain\"> $go test -bench .\ngoos: darwin\ngoarch: amd64\npkg: demo\nBenchmarkAddInt-8          \t1000000000\t         0.2692 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddIntGeneric-8   \t1000000000\t         1.074 ns/op\t       0 B/op\t       0 allocs/op\nPASS\nok  \tdemo\t1.491s\n</code></pre><p>我们看到，与单态化的addInt相比，泛型函数add实例化后的 add[int] 的执行性能还是下降了很多。这个问题在 <a href=\"https://github.com/golang/go/issues/54238\">Go官方issue</a> 中也有Gopher提出。</p><p>不过好消息是：在Go 1.20版本中，由于将使用Unified IR（中间代码表示）替换现有的IR表示，Go泛型函数的执行性能将得到进一步优化，上述的benchmark中两个函数的执行性能将不分伯仲，Go 1.19中也可使用GOEXPERIMENT=unified来开启Unified IR试验性功能。</p><p>我们在Unified IR开启的情况下再跑一次上面的benchmark：</p><pre><code class=\"language-plain\">$GOEXPERIMENT=unified go test -bench .\ngoos: darwin\ngoarch: amd64\npkg: demo\nBenchmarkAddInt-8          \t1000000000\t         0.2713 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddIntGeneric-8   \t1000000000\t         0.2723 ns/op\t       0 B/op\t       0 allocs/op\n</code></pre><p>这次的对比结果就非常理想了！</p><p>综上，我建议你在一些性能敏感的系统中，还是要慎用尚未得到足够性能优化的泛型；而在性能不那么敏感的情况下，在符合前面泛型使用时机的时候，我们还是可以大胆使用泛型语法的。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我们探讨了有关Go泛型的一个重要的问题：<strong>何时使用泛型</strong>。泛型语法的加入，不可避免地提升了Go语法的复杂性，为了防止Gopher滥用泛型，我们给出了几个Go泛型最适合应用的场景，包括：编写通用数据结构、编写操作Go原生容器类型时以及不同类型实现一些方法的逻辑看起来相同时。除此之外的其他场景下，如果你要使用泛型，务必慎重并深思熟虑。</p><p>Go泛型的编译性能和执行性能也是影响我们是否应用泛型的重要因素，Go核心团队在Go泛型实现方案的选择上也是煞费苦心，最终选择了GC Shape Stenciling的混合方案，目前这个方案很大程度避免了对Go编译性能的影响，但对Go泛型代码的执行效率依然存在不小影响。相信经过几个版本打磨和优化后，Go泛型的执行性能会有提升，甚至能接近于非泛型的单态版。</p><p>这里我还要提一下，Go泛型的实现方案也可能在未来版本中发生变化，从目前看，本讲中的内容仅针对Go 1.18和Go 1.19的GC Shape Stenciling方案适用。</p><h2>思考题</h2><p>请你为Go标准库sort.Interface接口类型提供一个像文中示例common_method.go中那样的通用方法的泛型实现。</p><p>至此，泛型篇三讲就彻底讲完了。如果你有什么问题，欢迎在评论区留言。</p>","neighbors":{"left":{"article_title":"40｜驯服泛型：定义泛型约束","id":601128},"right":{"article_title":"加餐｜我“私藏”的那些优质且权威的Go语言学习资料","id":468213}},"comments":[{"had_liked":false,"id":365767,"user_name":"Geek14","can_delete":false,"product_type":"c1","uid":3253178,"ip_address":"辽宁","ucode":"5EE9F880685800","user_header":"","comment_is_top":false,"comment_ctime":1672988705,"is_pvip":false,"replies":[{"id":133277,"content":"都是好问题。\n\n问题1：这句话来自于Russ Cox 的“泛型窘境”的文章。不知道你对c++的编译过程了解怎样。像c&#47;c++这样的源码的编译分为两个阶段：编译和链接。其中编译阶段是以.c&#47;.cpp为编译单元，将源码编译为一个个.o文件，每个编译单元的编译都是独立的。因此如果一个泛型函数在多个编译单元都会被调用(比如实参是int)，那么每个编译单元编译时都会为int生成一份独立的泛型函数代码，这样就拖慢了编译器的编译时间。之后在链接阶段，链接器才会将位于各个.o中的这些冗余的重复代码进行清除，只保留一份。\n\n问题2：调用泛型函数时传入的实参肯定是实参类型啊。这块编译器会将其转换为特定的函数调用，比如：f(dict.float64, 3.14)。至于具体实现，https:&#47;&#47;github.com&#47;golang&#47;proposal&#47;blob&#47;master&#47;design&#47;generics-implementation-dictionaries.md 这个proposal design给出了一个伪码的例子，可以看看那个。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1673184991,"ip_address":"辽宁","comment_id":365767,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师两个问题：\n1、在讲解泛型实现原理时，文中提到“C++ 语言路径：就像 C++ 的泛型实现方案那样，通过增加编译器负担为每个类型实参生成一份单独的泛型函数的实现，这种方案产生了大量的代码，其中大部分是多余的，……” 为啥“其中大部分是多余的”，每个类型实参一个单独的实现，这不是刚刚好吗，为啥会有多余的实现？\n2、Dictionaries 方案没看明白。模板方案比较好理解。编译阶段为每个类型实参创建一个泛型函数的单独实现，单独实现后函数内使用的泛型类型都会是具体的类型。那Dictionaries 方案种泛型函数中的泛型类型是具体类型实参类型吗？如果是具体的实参的类型，是怎么做到？\n希望老师有时间帮忙解答下疑惑。","like_count":4},{"had_liked":false,"id":365796,"user_name":"Geek14","can_delete":false,"product_type":"c1","uid":3253178,"ip_address":"辽宁","ucode":"5EE9F880685800","user_header":"","comment_is_top":false,"comment_ctime":1673018749,"is_pvip":false,"replies":[{"id":133276,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1673181435,"ip_address":"辽宁","comment_id":365796,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"&#47;&#47; 定义一个支持比较的接口，用于类型参数约束\ntype ordered interface {\n\t~int | ~int8 | ~int16 | ~int32 | ~int64 |\n\t~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |\n\t~float32 | ~float64 | ~string\n}\n&#47;&#47; 定义支持排序的泛型切片\ntype SortableSlice[T ordered]  []T\n&#47;&#47; 让泛型切片实现sort.Interface\nfunc (s SortableSlice[T]) Len() int           { return len(s) }\nfunc (s SortableSlice[T]) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }\nfunc (s SortableSlice[T]) Less(i, j int) bool { return s[i] &lt; s[j] }\n\n&#47;&#47; 定义一个泛型排序函数\nfunc SortGeneric[T ordered](s SortableSlice[T])  {\n\tsort.Sort(s)\n}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598882,"discussion_content":"都是好问题。\n\n问题1：这句话来自于Russ Cox 的“泛型窘境”的文章。不知道你对c++的编译过程了解怎样。像c/c++这样的源码的编译分为两个阶段：编译和链接。其中编译阶段是以.c/.cpp为编译单元，将源码编译为一个个.o文件，每个编译单元的编译都是独立的。因此如果一个泛型函数在多个编译单元都会被调用(比如实参是int)，那么每个编译单元编译时都会为int生成一份独立的泛型函数代码，这样就拖慢了编译器的编译时间。之后在链接阶段，链接器才会将位于各个.o中的这些冗余的重复代码进行清除，只保留一份。\n\n问题2：调用泛型函数时传入的实参肯定是实参类型啊。这块编译器会将其转换为特定的函数调用，比如：f(dict.float64, 3.14)。至于具体实现，https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries.md 这个proposal design给出了一个伪码的例子，可以看看那个。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1673184991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3253178,"avatar":"","nickname":"Geek14","note":"","ucode":"5EE9F880685800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":599206,"discussion_content":"感谢老师的耐心细致的回复，解决了我心中的疑惑[手动强赞]。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673402794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598882,"ip_address":"浙江","group_id":0},"score":599206,"extra":""}]}]},{"had_liked":false,"id":363933,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"广东","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1670374725,"is_pvip":false,"replies":[{"id":132326,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670453493,"ip_address":"广东","comment_id":363933,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师讲的好呀，感谢老师。\n期待老师新作品。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598875,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673181435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362058,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"北京","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1668091980,"is_pvip":false,"replies":[{"id":131790,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668406667,"ip_address":"北京","comment_id":362058,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题：\n&#47;&#47; sort.Interface -&gt; IntSlice &#47; StringSlice 泛型版\ntype xsl interface {\n\t~int | ~string\n}\n\ntype xSlice[T xsl] []T\n\nfunc (x xSlice[T]) Len() int           { return len(x) }\nfunc (x xSlice[T]) Less(i, j int) bool { return x[i] &lt; x[j] }\nfunc (x xSlice[T]) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n\nfunc sortX[T xsl](data xSlice[T]) {\n\tsort.Sort(data)\n}\n\nfunc TestXSlice(t *testing.T) {\n\tx1 := make(xSlice[int], 0, 5)\n\tx1 = append(x1, 3)\n\tx1 = append(x1, 10)\n\tx1 = append(x1, 2)\n\tx1 = append(x1, 0)\n\tx1 = append(x1, 9)\n\tsortX(x1)\n\tt.Logf(&quot;[]~int x = %#v&quot;, x1)\n\n\ttype mystr string\n\tx2 := []mystr{&quot;ab&quot;, &quot;ca&quot;, &quot;fc&quot;, &quot;ce&quot;, &quot;bf&quot;}\n\tsortX(x2)\n\tt.Logf(&quot;[]~string x = %#v&quot;, x2)\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595889,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670453493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379121,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1691386443,"is_pvip":false,"replies":[{"id":138157,"content":"ELF 是 Executable and Linkable Format的缩写。是linux上一种标准的可执行文件的格式。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1691476673,"ip_address":"北京","comment_id":379121,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"tony bai 老师，文中的：“并且被保存在 ELF 的只读数据区段（.data）中”，这里的ELF是什么的缩写呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593639,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668406667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361872,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"北京","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1667952469,"is_pvip":false,"replies":[{"id":131659,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988471,"ip_address":"北京","comment_id":361872,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看一遍肯定是不够的，🉐️好好吸收","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625235,"discussion_content":"ELF 是 Executable and Linkable Format的缩写。是linux上一种标准的可执行文件的格式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691476674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365767,"user_name":"Geek14","can_delete":false,"product_type":"c1","uid":3253178,"ip_address":"辽宁","ucode":"5EE9F880685800","user_header":"","comment_is_top":false,"comment_ctime":1672988705,"is_pvip":false,"replies":[{"id":133277,"content":"都是好问题。\n\n问题1：这句话来自于Russ Cox 的“泛型窘境”的文章。不知道你对c++的编译过程了解怎样。像c&#47;c++这样的源码的编译分为两个阶段：编译和链接。其中编译阶段是以.c&#47;.cpp为编译单元，将源码编译为一个个.o文件，每个编译单元的编译都是独立的。因此如果一个泛型函数在多个编译单元都会被调用(比如实参是int)，那么每个编译单元编译时都会为int生成一份独立的泛型函数代码，这样就拖慢了编译器的编译时间。之后在链接阶段，链接器才会将位于各个.o中的这些冗余的重复代码进行清除，只保留一份。\n\n问题2：调用泛型函数时传入的实参肯定是实参类型啊。这块编译器会将其转换为特定的函数调用，比如：f(dict.float64, 3.14)。至于具体实现，https:&#47;&#47;github.com&#47;golang&#47;proposal&#47;blob&#47;master&#47;design&#47;generics-implementation-dictionaries.md 这个proposal design给出了一个伪码的例子，可以看看那个。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1673184991,"ip_address":"辽宁","comment_id":365767,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师两个问题：\n1、在讲解泛型实现原理时，文中提到“C++ 语言路径：就像 C++ 的泛型实现方案那样，通过增加编译器负担为每个类型实参生成一份单独的泛型函数的实现，这种方案产生了大量的代码，其中大部分是多余的，……” 为啥“其中大部分是多余的”，每个类型实参一个单独的实现，这不是刚刚好吗，为啥会有多余的实现？\n2、Dictionaries 方案没看明白。模板方案比较好理解。编译阶段为每个类型实参创建一个泛型函数的单独实现，单独实现后函数内使用的泛型类型都会是具体的类型。那Dictionaries 方案种泛型函数中的泛型类型是具体类型实参类型吗？如果是具体的实参的类型，是怎么做到？\n希望老师有时间帮忙解答下疑惑。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598882,"discussion_content":"都是好问题。\n\n问题1：这句话来自于Russ Cox 的“泛型窘境”的文章。不知道你对c++的编译过程了解怎样。像c/c++这样的源码的编译分为两个阶段：编译和链接。其中编译阶段是以.c/.cpp为编译单元，将源码编译为一个个.o文件，每个编译单元的编译都是独立的。因此如果一个泛型函数在多个编译单元都会被调用(比如实参是int)，那么每个编译单元编译时都会为int生成一份独立的泛型函数代码，这样就拖慢了编译器的编译时间。之后在链接阶段，链接器才会将位于各个.o中的这些冗余的重复代码进行清除，只保留一份。\n\n问题2：调用泛型函数时传入的实参肯定是实参类型啊。这块编译器会将其转换为特定的函数调用，比如：f(dict.float64, 3.14)。至于具体实现，https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries.md 这个proposal design给出了一个伪码的例子，可以看看那个。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1673184991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3253178,"avatar":"","nickname":"Geek14","note":"","ucode":"5EE9F880685800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":599206,"discussion_content":"感谢老师的耐心细致的回复，解决了我心中的疑惑[手动强赞]。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673402794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598882,"ip_address":"浙江","group_id":0},"score":599206,"extra":""}]}]},{"had_liked":false,"id":365796,"user_name":"Geek14","can_delete":false,"product_type":"c1","uid":3253178,"ip_address":"辽宁","ucode":"5EE9F880685800","user_header":"","comment_is_top":false,"comment_ctime":1673018749,"is_pvip":false,"replies":[{"id":133276,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1673181435,"ip_address":"辽宁","comment_id":365796,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"&#47;&#47; 定义一个支持比较的接口，用于类型参数约束\ntype ordered interface {\n\t~int | ~int8 | ~int16 | ~int32 | ~int64 |\n\t~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |\n\t~float32 | ~float64 | ~string\n}\n&#47;&#47; 定义支持排序的泛型切片\ntype SortableSlice[T ordered]  []T\n&#47;&#47; 让泛型切片实现sort.Interface\nfunc (s SortableSlice[T]) Len() int           { return len(s) }\nfunc (s SortableSlice[T]) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }\nfunc (s SortableSlice[T]) Less(i, j int) bool { return s[i] &lt; s[j] }\n\n&#47;&#47; 定义一个泛型排序函数\nfunc SortGeneric[T ordered](s SortableSlice[T])  {\n\tsort.Sort(s)\n}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598875,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673181435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363933,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"广东","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1670374725,"is_pvip":false,"replies":[{"id":132326,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670453493,"ip_address":"广东","comment_id":363933,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师讲的好呀，感谢老师。\n期待老师新作品。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595889,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670453493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362058,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"北京","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1668091980,"is_pvip":false,"replies":[{"id":131790,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668406667,"ip_address":"北京","comment_id":362058,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题：\n&#47;&#47; sort.Interface -&gt; IntSlice &#47; StringSlice 泛型版\ntype xsl interface {\n\t~int | ~string\n}\n\ntype xSlice[T xsl] []T\n\nfunc (x xSlice[T]) Len() int           { return len(x) }\nfunc (x xSlice[T]) Less(i, j int) bool { return x[i] &lt; x[j] }\nfunc (x xSlice[T]) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n\nfunc sortX[T xsl](data xSlice[T]) {\n\tsort.Sort(data)\n}\n\nfunc TestXSlice(t *testing.T) {\n\tx1 := make(xSlice[int], 0, 5)\n\tx1 = append(x1, 3)\n\tx1 = append(x1, 10)\n\tx1 = append(x1, 2)\n\tx1 = append(x1, 0)\n\tx1 = append(x1, 9)\n\tsortX(x1)\n\tt.Logf(&quot;[]~int x = %#v&quot;, x1)\n\n\ttype mystr string\n\tx2 := []mystr{&quot;ab&quot;, &quot;ca&quot;, &quot;fc&quot;, &quot;ce&quot;, &quot;bf&quot;}\n\tsortX(x2)\n\tt.Logf(&quot;[]~string x = %#v&quot;, x2)\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593639,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668406667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379121,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1691386443,"is_pvip":false,"replies":[{"id":138157,"content":"ELF 是 Executable and Linkable Format的缩写。是linux上一种标准的可执行文件的格式。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1691476673,"ip_address":"北京","comment_id":379121,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"tony bai 老师，文中的：“并且被保存在 ELF 的只读数据区段（.data）中”，这里的ELF是什么的缩写呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625235,"discussion_content":"ELF 是 Executable and Linkable Format的缩写。是linux上一种标准的可执行文件的格式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691476674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361872,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"北京","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1667952469,"is_pvip":false,"replies":[{"id":131659,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988471,"ip_address":"北京","comment_id":361872,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看一遍肯定是不够的，🉐️好好吸收","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593182,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667988471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}