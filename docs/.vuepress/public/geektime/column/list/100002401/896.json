{"id":896,"title":"06 | 每个工程师都应该了解的：聊聊幂等","content":"<p>什么是幂等（Idempotency）呢？简单来说，一个操作如果多次任意执行所产生的影响，均与一次执行的影响相同，我们就称其为幂等。</p>\n<p>这样说来，似乎很容易理解；但要知道这样的定义，其实是一个语义范畴对行为结果的定义。</p>\n<p>如何用语法和规则去确保行为能达到这个结果，往往需要很谨慎地设计和实现。实际系统中，幂等是一个极为重要的概念，无论是在大型互联网应用还是企业级架构中，都能见到 REST API 被越来越多地采用，而正确实现幂等，往往是 API 中最难的技术点之一。</p>\n<p><strong>先说说为什么重要，我来举一个简单易懂的例子。</strong></p>\n<p>比如，你要处理一次电商网站收款或者付款的交易。当你给微信支付发送这个付款请求后，一个顺利的场景是不会有任何错误发生的，微信支付收到你的付款请求，处理所有转账，然后返回一个 HTTP 200 消息表示交易完成。</p>\n<p>那如果发出请求后，有个请求超时，你再也没有收到关于这个请求是成功还是失败的回执，又该如何呢？</p>\n<!-- [[[read_end]]] -->\n<p><strong>这里就有很多种可能的情况。</strong></p>\n<ol>\n<li>这个请求在到达微信支付端前就已经发生超时，微信支付从来没有收到这样的请求。</li>\n<li>这个请求到达微信支付端，但是支付交易失败，这时发生超时，微信支付收到这样的请求，但没有处理成功。</li>\n<li>这个请求到达微信支付端，并且支付交易成功，这时发生超时，微信支付收到这样的请求，处理成功，但是没有回执。</li>\n<li>这个请求到达微信支付端，并且支付交易成功，并且发回回执，然而因为网络原因回执丢失，客户端超时，微信支付收到这样的请求，处理成功，发出回执，但是客户没有收到。</li>\n</ol>\n<p>人们很直观的想法，也是现实中开发者最常见的做法就是：重新提交一次支付请求。但是这样做有一个潜在的问题：请求超时是上面的哪一种情况，会不会引发多次支付的可能性？</p>\n<p>这就涉及系统中的幂等是如何实现的了。</p>\n<p><strong>那么幂等又该如何实现呢？</strong></p>\n<p>首先来看一下幂等的定义：多次执行所产生的影响均与一次执行的影响相同。简言之，你需要一个去重的机制。这往往有很多不同的实现方法，但是有两个很关键的因素。</p>\n<p>第一个因素是幂等令牌（Idempotency Key）。客户端和服务器端通过什么方式来识别，这实际上是同一个请求或是同一个请求的多次尝试。这往往需要双方有一个既定的协议，比如账单号或者交易令牌，这种在同一个请求上具备唯一标识的元素，这种元素通常由客户端生成。</p>\n<p>第二个因素是确保唯一性（Uniqueness Guarantee）。服务器端用什么机制去确保同一个请求一定不会被处理两次，也就是微信支付如何确保，同一笔交易不会因为客户端发送两次请求就被处理多次。</p>\n<p>最常用的做法是利用数据库。比如把幂等令牌所在的数据库表的列作为唯一性索引。这样，当你试图存储两个含有同样令牌的请求时，必定有一个会报错。注意，简单的读检查并不一定成功，因为读与读之间会有竞争条件（Race Condition），因此还是有可能出错。</p>\n<p><strong>一个系统能正确处理和实现上面的两个要素，基本就达到了幂等的需求。那么，现实系统中常见的问题都出在哪里呢？</strong></p>\n<p><strong>一是幂等令牌什么时候产生，怎样产生。</strong>这一点很重要。拿上面的例子来说，就算微信支付可以保证，每一个请求对应的支付交易一定只会被处理一次，但是这个请求的多次重复，一定要共有微信可以识别的某个标识。</p>\n<p>假如客户端对同一笔交易多次请求，产生的幂等令牌并不相同，那么无论你其余的地方多么完美，都不可能保证 “一个操作如果具有任意多次执行，所产生的影响均与一次执行的影响相同”。</p>\n<p><strong>二是令牌有没有被误删的可能。</strong>这是上面问题的一个特殊情况。幂等令牌是由客户端生成的，那如果生成的令牌在被使用后（一次微信支付请求中使用了），不小心因为数据库回滚（DB Rollback） 等原因被删除了，那么客户端就不知道自己其实已经发过一次请求。这就有可能生成一个新的账单，并产生全新的令牌，而服务端对此则一无所知。</p>\n<p><strong>三是各种竞争条件。</strong>我在前面讲过，用数据库的读检查来确保唯一性经常因为竞争而不生效，其实一个需要幂等的系统中，保证唯一性的各个环节和实现，都要考虑竞争条件（Race Condition）。</p>\n<p><strong>四是对请求重试的处理。</strong>这大部分是服务器端要做的工作。一个常见的方法是：区分正在处理的请求、处理成功和处理失败的请求。这样当客户端重试的时候，根据情况或者直接返回，或者再次处理。这就好像之前提到的微信支付的例子，微信支付服务需要知道每一笔交易的处理情况，只有这样，当面对再次转账请求时，才能知道应该用什么方式去处理相应的请求。</p>\n<p><strong>五是一个系统中需要多层幂等。</strong>这是什么意思呢？A 发送请求给 B，B 处理的一部分是要发送请求给另一个系统 C，C 在处理的过程中还可能需要发请求给另一个系统 D …… D 处理完了返回给 C，C 返回给 B，B 返回给 A。在这个链条中，如果 A、B、C、D 中任何一个系统没有正确实现幂等，也就是出现了 “幂等漏洞”，那么一次请求还是有可能被多次执行，产生区别于一次执行的影响。</p>\n<p>今天我和你讨论了架构设计中的幂等概念。我们聊了什么是幂等，幂等的应用场景，如何实现一个幂等功能，以及幂等系统中容易出现的问题。</p>\n<p>现在回到文章的开头，什么是幂等？一个操作如果任意多次执行所产生的影响均与一次执行的影响相同，我们就称为幂等。这是一个语义范畴上对行为结果的定义，只有当你把实现中所有的细节都做对了，你才能得到想要的效果。任何一个地方设计有漏洞，或是实现上有 Bug，系统都会出现这样或那样的问题。</p>\n<p></p>\n<p><a href=\"https://time.geekbang.org/activity/sale-poster?utm_source=app&amp;utm_medium=zhuyun-article&amp;utm_campaign=zhuyun-saleposter&amp;utm_content=zhuyun0416\">戳此获取你的专属海报</a></p>\n","comments":[{"had_liked":false,"id":902,"user_name":"J","can_delete":false,"product_type":"c1","uid":1002675,"ip_address":"","ucode":"EC6B45BD3E128D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/b3/931dcd9e.jpg","comment_is_top":false,"comment_ctime":1511482687,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"83115861311","product_id":100002401,"comment_content":"如何测试是否达到幂等呢？是否存在一些方法论呢？特别是在大量使用开源软件等第三方技术和平台的时候，如果不是很清楚里面的坑，心里特别没底，但是我们没有那么多精力深入每一个细节。","like_count":19,"discussions":[{"author":{"id":1012416,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/c0/b09911a0.jpg","nickname":"meijing0114","note":"","ucode":"B349D33E2F3ECC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398151,"discussion_content":"全链路写压测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632745998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12127,"user_name":"马洪博","can_delete":false,"product_type":"c1","uid":1020344,"ip_address":"","ucode":"DB53385788EE1D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/b8/bff364f1.jpg","comment_is_top":false,"comment_ctime":1528603406,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"53068210958","product_id":100002401,"comment_content":"这里说的数据库“竞争条件”就是“脏读”吧。打个比方：<br>小张和小华同时喜欢上小芳，小张在探得小芳未婚后首先展开追求，并确定了关系。小华在几经打探确定小芳未婚后也打算采取行动，但在他准备行动的过程中小张和小芳闪婚了，使得上次的打探结果无效。<br>简单来说大概是“你读的时候并不知道别人也已经读过并已经采取了一些行动，只是行动尚未达成，对你不可见而已”","like_count":12,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358953,"discussion_content":"这里说的是竞争读取记录，判断记录是否存在，跟脏读不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616078404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012843,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/6b/a98162a1.jpg","nickname":"winner_0715","note":"","ucode":"A033A30539181F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344692,"discussion_content":"MySQL一般不存在脏读的问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611559874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1045,"user_name":"huangzhimim","can_delete":false,"product_type":"c1","uid":1018596,"ip_address":"","ucode":"ACAB00327DD95D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/e4/e5e1fd9b.jpg","comment_is_top":false,"comment_ctime":1512045643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31576816715","product_id":100002401,"comment_content":"第一次听到这样的概念，学到了","like_count":7},{"had_liked":false,"id":8201,"user_name":"王宇熙","can_delete":false,"product_type":"c1","uid":1125669,"ip_address":"","ucode":"453B56C0F86C2A","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/25/e3200069.jpg","comment_is_top":false,"comment_ctime":1525965505,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27295769281","product_id":100002401,"comment_content":"例子中，幂等令牌的生成，不应该客户端完成，客户端只能保证单机幂等令牌的唯一性，不能保证全站幂等令牌的唯一性。","like_count":6,"discussions":[{"author":{"id":1316454,"avatar":"https://static001.geekbang.org/account/avatar/00/14/16/66/083e7f7e.jpg","nickname":"silent","note":"","ucode":"325D31F0608249","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270058,"discussion_content":"客户端id做前缀就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589978865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":984,"user_name":"myaniu","can_delete":false,"product_type":"c1","uid":1007153,"ip_address":"","ucode":"578F47D59CE0D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/31/1a41485b.jpg","comment_is_top":false,"comment_ctime":1511867374,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27281671150","product_id":100002401,"comment_content":"6年前曾设计了一个发短信然后银联自动给校园一卡通充值的系统，当时就是使用消息驱动，基于事物ID的幂等性，超时重发机制处理错误，最终效果不错。","like_count":6},{"had_liked":false,"id":1145,"user_name":"alex","can_delete":false,"product_type":"c1","uid":1013615,"ip_address":"","ucode":"3194B224CD7AC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI98sVPqp4B5YJU8Piao6ic4KeiaDGU0jMUrAqlNaUR4APfWMxkkNUA59O7z11sVQRg95gt3Mb6KTXIA/132","comment_is_top":false,"comment_ctime":1512345884,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"22987182364","product_id":100002401,"comment_content":"做消息队列的consumer时候，特别要重视幂等信，保证相同的消息不论监听到多少次，也只能做处理一次","like_count":5},{"had_liked":false,"id":901,"user_name":"Sam_Deep_Thinking","can_delete":false,"product_type":"c1","uid":1001152,"ip_address":"","ucode":"8E4EF6F24B821B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/c0/bf880bda.jpg","comment_is_top":false,"comment_ctime":1511482044,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"22986318524","product_id":100002401,"comment_content":"幂等操作确实很重要，除了文章支付的例子之外，像购物车占用库存操作，也是需要幂等的，不然可能出现超卖少卖现象。","like_count":5},{"had_liked":false,"id":960,"user_name":"小沫","can_delete":false,"product_type":"c1","uid":1000977,"ip_address":"","ucode":"52341656210E0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/11/1cf8c174.jpg","comment_is_top":false,"comment_ctime":1511739613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14396641501","product_id":100002401,"comment_content":"重复执行工单，多次下发操作数据 也会出现幂等情况。需要增加操作令牌以保证同一个资源数据只能操作一次","like_count":3},{"had_liked":false,"id":36825,"user_name":"wade2999","can_delete":false,"product_type":"c1","uid":1259829,"ip_address":"","ucode":"5BE35476D8F62E","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/35/c06915f2.jpg","comment_is_top":false,"comment_ctime":1541354609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10131289201","product_id":100002401,"comment_content":"我来尝试回答一下，为什么只是读检查会发生race condition，而只有写入database as primary key才可以正确的检查到是否是相同的idempotency key：<br>考虑一个用户第一次发出了请求，但是超时了，然后他接着发出了第二次请求，但是第一个请求由于网络堵塞的原因，这个时候才跟第二个请求同时到达服务器。我server端的逻辑是：<br>try {<br>db.get(idempotencyKey);<br>} catch (ObjectNotFoundException e) {<br>processPayment;<br>db.write(idempotencyKey);<br>}<br>那么在上述的情况下，第一个跟第二个请求都会进入到exception的处理逻辑处，然后process payment。就会发生重复，即使是我后面只成功写入db一个order record。（因为primary key constrains idempotency id）。<br>那么如果修改成<br>try {<br>db.write(idempotencyKey);<br>processPayment;<br>} catch (WriteException e) {<br>return &quot;success&quot;;<br>}<br>这样只有成功写入idempotencykey到db之后才可以处理payment，否则会返回该order已经成功处理<br>","like_count":2},{"had_liked":false,"id":962,"user_name":"王岩","can_delete":false,"product_type":"c1","uid":1013626,"ip_address":"","ucode":"A315D856F8C5BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/7a/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1511747660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10101682252","product_id":100002401,"comment_content":"不光是互联网支付，其实企业内部的对外支付也是一样，只要把微信服务端替换成银行就行了","like_count":2},{"had_liked":false,"id":903,"user_name":"wangtie","can_delete":false,"product_type":"c1","uid":1007952,"ip_address":"","ucode":"61B29F00C3DEEC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/50/7cc02851.jpg","comment_is_top":false,"comment_ctime":1511485924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10101420516","product_id":100002401,"comment_content":"学习了，分享给小伙伴们看看","like_count":2},{"had_liked":false,"id":188116,"user_name":"joe","can_delete":false,"product_type":"c1","uid":1047695,"ip_address":"","ucode":"27461C7EBFE4F0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/8f/33d834a3.jpg","comment_is_top":false,"comment_ctime":1584322365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879289661","product_id":100002401,"comment_content":"确实不管在企业级还是大型互联网应用中幂等都是最关键的，有人认为企业级因为用户量不多，可以把这个标准去掉。但出问题的时候，就找不到为什么。","like_count":1},{"had_liked":false,"id":906,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1511486496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5806453792","product_id":100002401,"comment_content":"其实  我是第一次听说幂等的概念，虽然平常遇到很多幂等的问题","like_count":1},{"had_liked":false,"id":342659,"user_name":"崔巍","can_delete":false,"product_type":"c1","uid":1191069,"ip_address":"","ucode":"1EE10CE5A3CECD","user_header":"https://static001.geekbang.org/account/avatar/00/12/2c/9d/cc150980.jpg","comment_is_top":false,"comment_ctime":1650385993,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650385993","product_id":100002401,"comment_content":"广发银行APP还款就没有设置幂等的，遭遇过一次重复还款。。。。","like_count":0},{"had_liked":false,"id":312317,"user_name":"彭燕林","can_delete":false,"product_type":"c1","uid":1021868,"ip_address":"","ucode":"CE9004FB496693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/ac/458659d7.jpg","comment_is_top":false,"comment_ctime":1631746566,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631746566","product_id":100002401,"comment_content":"极客时间的apple store充值显然幂等做的就不够好😝，导致充值了两次","like_count":0},{"had_liked":false,"id":285809,"user_name":"johnyu","can_delete":false,"product_type":"c1","uid":2541498,"ip_address":"","ucode":"9AAC53AD209194","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vx7BK9qZItiblXXoIpOhxd0m248xgvybowD2BBRvzZ4VwPL6aF1XkZ5OaWNjKqiciabgPfLdqmBtFvHszTgOuPiadQ/132","comment_is_top":false,"comment_ctime":1617017897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617017897","product_id":100002401,"comment_content":"学到架构的新知识了，开心。","like_count":0},{"had_liked":false,"id":253921,"user_name":"小侠","can_delete":false,"product_type":"c1","uid":1045025,"ip_address":"","ucode":"A35A61061E41B2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/21/00600713.jpg","comment_is_top":false,"comment_ctime":1602947351,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1602947351","product_id":100002401,"comment_content":"复杂的分布式系统，幂等接口很重要","like_count":0},{"had_liked":false,"id":205856,"user_name":"Ric","can_delete":false,"product_type":"c1","uid":1917008,"ip_address":"","ucode":"2CCABA029EE711","user_header":"https://static001.geekbang.org/account/avatar/00/1d/40/50/a960f038.jpg","comment_is_top":false,"comment_ctime":1586747591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586747591","product_id":100002401,"comment_content":"感謝老師清晰解說","like_count":0},{"had_liked":false,"id":84735,"user_name":"慧长青","can_delete":false,"product_type":"c1","uid":1085864,"ip_address":"","ucode":"A2F5D042D41B2F","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/a8/b8e2ae30.jpg","comment_is_top":false,"comment_ctime":1554900215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554900215","product_id":100002401,"comment_content":"幂等的唯一性很重要，尤其是支付的场景","like_count":0},{"had_liked":false,"id":71265,"user_name":"mikejiang","can_delete":false,"product_type":"c1","uid":1396090,"ip_address":"","ucode":"9350F6DC7BC0E8","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/7a/106c3745.jpg","comment_is_top":false,"comment_ctime":1551314890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551314890","product_id":100002401,"comment_content":"幂等性我公司一般用第一种方法，但是，其实第二种我觉得也不错。无论是幂等令牌的实现，还是保证唯一性，都很容易实现有问题，大多倾向于很容易用读来判断是否有遇到过，这是有问题的。","like_count":0},{"had_liked":false,"id":53684,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1545710338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545710338","product_id":100002401,"comment_content":"“making multiple identical requests has the same effect as making a single request. 我觉得需要强调事 是identical的，不然乍一看为什么多次请求只给我一个结果，会有点疑惑。个人意见～","like_count":0},{"had_liked":false,"id":40044,"user_name":"七-只顾风雨兼程","can_delete":false,"product_type":"c1","uid":1208903,"ip_address":"","ucode":"8F8E84BFE08B63","user_header":"https://static001.geekbang.org/account/avatar/00/12/72/47/dd30eac6.jpg","comment_is_top":false,"comment_ctime":1542452480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542452480","product_id":100002401,"comment_content":"要详细学习下","like_count":0},{"had_liked":false,"id":7396,"user_name":"周丽洁","can_delete":false,"product_type":"c1","uid":1089295,"ip_address":"","ucode":"CE894009252E12","user_header":"https://static001.geekbang.org/account/avatar/00/10/9f/0f/c0b4b2c3.jpg","comment_is_top":false,"comment_ctime":1525443163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525443163","product_id":100002401,"comment_content":"问一个细节问题，为什么不能读检查而要靠写入报错来判断唯一性？因为我认为按一般的逻辑，是去数据库里面查有没有这个唯一值。不太明白读与读之间有竞争这个原因。谢谢回复。","like_count":0},{"had_liked":false,"id":3903,"user_name":"gggjtg","can_delete":false,"product_type":"c1","uid":1040085,"ip_address":"","ucode":"4DD39CDB2849DF","user_header":"","comment_is_top":false,"comment_ctime":1520947299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1520947299","product_id":100002401,"comment_content":"能不能举个例子解释一下什么是竞争条件","like_count":0},{"had_liked":false,"id":1692,"user_name":"walt","can_delete":false,"product_type":"c1","uid":1039816,"ip_address":"","ucode":"F0AEA21D02B7E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/c8/3f100905.jpg","comment_is_top":false,"comment_ctime":1514123470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1514123470","product_id":100002401,"comment_content":"大并发测试幂等","like_count":0}]}