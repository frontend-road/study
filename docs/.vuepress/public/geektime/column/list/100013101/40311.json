{"id":40311,"title":"19 | 错误处理（上）","content":"<p>提到Go语言中的错误处理，我们其实已经在前面接触过几次了。</p><p>比如，我们声明过<code>error</code>类型的变量<code>err</code>，也调用过<code>errors</code>包中的<code>New</code>函数。今天，我会用这篇文章为你梳理Go语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。</p><p>我们说过<code>error</code>类型其实是一个接口类型，也是一个Go语言的内建类型。在这个接口类型的声明中只包含了一个方法<code>Error</code>。<code>Error</code>方法不接受任何参数，但是会返回一个<code>string</code>类型的结果。它的作用是返回错误信息的字符串表示形式。</p><p>我们使用<code>error</code>类型的方式通常是，在函数声明的结果列表的最后，声明一个该类型的结果，同时在调用这个函数之后，先判断它返回的最后一个结果值是否“不为<code>nil</code>”。</p><p>如果这个值“不为<code>nil</code>”，那么就进入错误处理流程，否则就继续进行正常的流程。下面是一个例子，代码在demo44.go文件中。</p><pre><code>package main\n\nimport (\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n)\n\nfunc echo(request string) (response string, err error) {\n\tif request == &quot;&quot; {\n\t\terr = errors.New(&quot;empty request&quot;)\n\t\treturn\n\t}\n\tresponse = fmt.Sprintf(&quot;echo: %s&quot;, request)\n\treturn\n}\n\nfunc main() {\n\tfor _, req := range []string{&quot;&quot;, &quot;hello!&quot;} {\n\t\tfmt.Printf(&quot;request: %s\\n&quot;, req)\n\t\tresp, err := echo(req)\n\t\tif err != nil {\n\t\t\tfmt.Printf(&quot;error: %s\\n&quot;, err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(&quot;response: %s\\n&quot;, resp)\n\t}\n}\n</code></pre><p>我们先看<code>echo</code>函数的声明。<code>echo</code>函数接受一个<code>string</code>类型的参数<code>request</code>，并会返回两个结果。</p><p>这两个结果都是有名称的，第一个结果<code>response</code>也是<code>string</code>类型的，它代表了这个函数正常执行后的结果值。</p><p>第二个结果<code>err</code>就是<code>error</code>类型的，它代表了函数执行出错时的结果值，同时也包含了具体的错误信息。</p><!-- [[[read_end]]] --><p>当<code>echo</code>函数被调用时，它会先检查参数<code>request</code>的值。如果该值为空字符串，那么它就会通过调用<code>errors.New</code>函数，为结果<code>err</code>赋值，然后忽略掉后边的操作并直接返回。</p><p>此时，结果<code>response</code>的值也会是一个空字符串。如果<code>request</code>的值并不是空字符串，那么它就为结果<code>response</code>赋一个适当的值，然后返回，此时结果<code>err</code>的值会是<code>nil</code>。</p><p>再来看<code>main</code>函数中的代码。我在每次调用<code>echo</code>函数之后，都会把它返回的结果值赋给变量<code>resp</code>和<code>err</code>，并且总是先检查<code>err</code>的值是否“不为<code>nil</code>”，如果是，就打印错误信息，否则就打印常规的响应信息。</p><p>这里值得注意的地方有两个。第一，在<code>echo</code>函数和<code>main</code>函数中，我都使用到了卫述语句。我在前面讲函数用法的时候也提到过卫述语句。简单地讲，它就是被用来检查后续操作的前置条件并进行相应处理的语句。</p><p>对于<code>echo</code>函数来说，它进行常规操作的前提是：传入的参数值一定要符合要求。而对于调用<code>echo</code>函数的程序来说，进行后续操作的前提就是<code>echo</code>函数的执行不能出错。</p><blockquote>\n<p><span class=\"reference\">我们在进行错误处理的时候经常会用到卫述语句，以至于有些人会吐槽说：“我的程序满屏都是卫述语句，简直是太难看了！”</span></p>\n<p><span class=\"reference\">不过，我倒认为这有可能是程序设计上的问题。每个编程语言的理念和风格几乎都会有明显的不同，我们常常需要顺应它们的纹理去做设计，而不是用其他语言的编程思想来编写当下语言的程序。</span></p>\n</blockquote><p>再来说第二个值得注意的地方。我在生成<code>error</code>类型值的时候，用到了<code>errors.New</code>函数。</p><p>这是一种最基本的生成错误值的方式。我们调用它的时候传入一个由字符串代表的错误信息，它会给返回给我们一个包含了这个错误信息的<code>error</code>类型值。该值的静态类型当然是<code>error</code>，而动态类型则是一个在<code>errors</code>包中的，包级私有的类型<code>*errorString</code>。</p><p>显然，<code>errorString</code>类型拥有的一个指针方法实现了<code>error</code>接口中的<code>Error</code>方法。这个方法在被调用后，会原封不动地返回我们之前传入的错误信息。实际上，<code>error</code>类型值的<code>Error</code>方法就相当于其他类型值的<code>String</code>方法。</p><p>我们已经知道，通过调用<code>fmt.Printf</code>函数，并给定占位符<code>%s</code>就可以打印出某个值的字符串表示形式。</p><p>对于其他类型的值来说，只要我们能为这个类型编写一个<code>String</code>方法，就可以自定义它的字符串表示形式。而对于<code>error</code>类型值，它的字符串表示形式则取决于它的<code>Error</code>方法。</p><p>在上述情况下，<code>fmt.Printf</code>函数如果发现被打印的值是一个<code>error</code>类型的值，那么就会去调用它的<code>Error</code>方法。<code>fmt</code>包中的这类打印函数其实都是这么做的。</p><p>顺便提一句，当我们想通过模板化的方式生成错误信息，并得到错误值时，可以使用<code>fmt.Errorf</code>函数。该函数所做的其实就是先调用<code>fmt.Sprintf</code>函数，得到确切的错误信息；再调用<code>errors.New</code>函数，得到包含该错误信息的<code>error</code>类型值，最后返回该值。</p><p>好了，我现在问一个关于对错误值做判断的问题。我们今天的<strong>问题是：对于具体错误的判断，Go语言中都有哪些惯用法？</strong></p><p>由于<code>error</code>是一个接口类型，所以即使同为<code>error</code>类型的错误值，它们的实际类型也可能不同。这个问题还可以换一种问法，即：怎样判断一个错误值具体代表的是哪一类错误？</p><p>这道题的<strong>典型回答</strong>是这样的：</p><ol>\n<li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型<code>switch</code>语句来判断；</li>\n<li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；</li>\n<li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。</li>\n</ol><h2>问题解析</h2><p>如果你看过一些Go语言标准库的源代码，那么对这几种情况应该都不陌生。我下面分别对它们做个说明。</p><p>类型在已知范围内的错误值其实是最容易分辨的。就拿<code>os</code>包中的几个代表错误的类型<code>os.PathError</code>、<code>os.LinkError</code>、<code>os.SyscallError</code>和<code>os/exec.Error</code>来说，它们的指针类型都是<code>error</code>接口的实现类型，同时它们也都包含了一个名叫<code>Err</code>，类型为<code>error</code>接口类型的代表潜在错误的字段。</p><p>如果我们得到一个<code>error</code>类型值，并且知道该值的实际类型肯定是它们中的某一个，那么就可以用类型<code>switch</code>语句去做判断。例如：</p><pre><code>func underlyingError(err error) error {\n\tswitch err := err.(type) {\n\tcase *os.PathError:\n\t\treturn err.Err\n\tcase *os.LinkError:\n\t\treturn err.Err\n\tcase *os.SyscallError:\n\t\treturn err.Err\n\tcase *exec.Error:\n\t\treturn err.Err\n\t}\n\treturn err\n}\n</code></pre><p>函数<code>underlyingError</code>的作用是：获取和返回已知的操作系统相关错误的潜在错误值。其中的类型<code>switch</code>语句中有若干个<code>case</code>子句，分别对应了上述几个错误类型。当它们被选中时，都会把函数参数<code>err</code>的<code>Err</code>字段作为结果值返回。如果它们都未被选中，那么该函数就会直接把参数值作为结果返回，即放弃获取潜在错误值。</p><p>只要类型不同，我们就可以如此分辨。但是在错误值类型相同的情况下，这些手段就无能为力了。在Go语言的标准库中也有不少以相同方式创建的同类型的错误值。</p><p>我们还拿<code>os</code>包来说，其中不少的错误值都是通过调用<code>errors.New</code>函数来初始化的，比如：<code>os.ErrClosed</code>、<code>os.ErrInvalid</code>以及<code>os.ErrPermission</code>，等等。</p><p>注意，与前面讲到的那些错误类型不同，这几个都是已经定义好的、确切的错误值。<code>os</code>包中的代码有时候会把它们当做潜在错误值，封装进前面那些错误类型的值中。</p><p>如果我们在操作文件系统的时候得到了一个错误值，并且知道该值的潜在错误值肯定是上述值中的某一个，那么就可以用普通的<code>switch</code>语句去做判断，当然了，用<code>if</code>语句和判等操作符也是可以的。例如：</p><pre><code>printError := func(i int, err error) {\n\tif err == nil {\n\t\tfmt.Println(&quot;nil error&quot;)\n\t\treturn\n\t}\n\terr = underlyingError(err)\n\tswitch err {\n\tcase os.ErrClosed:\n\t\tfmt.Printf(&quot;error(closed)[%d]: %s\\n&quot;, i, err)\n\tcase os.ErrInvalid:\n\t\tfmt.Printf(&quot;error(invalid)[%d]: %s\\n&quot;, i, err)\n\tcase os.ErrPermission:\n\t\tfmt.Printf(&quot;error(permission)[%d]: %s\\n&quot;, i, err)\n\t}\n}\n</code></pre><p>这个由<code>printError</code>变量代表的函数会接受一个<code>error</code>类型的参数值。该值总会代表某个文件操作相关的错误，这是我故意地以不正确的方式操作文件后得到的。</p><p>虽然我不知道这些错误值的类型的范围，但却知道它们或它们的潜在错误值一定是某个已经在<code>os</code>包中定义的值。</p><p>所以，我先用<code>underlyingError</code>函数得到它们的潜在错误值，当然也可能只得到原错误值而已。然后，我用<code>switch</code>语句对错误值进行判等操作，三个<code>case</code>子句分别对应我刚刚提到的那三个已存在于<code>os</code>包中的错误值。如此一来，我就能分辨出具体错误了。</p><p>对于上面这两种情况，我们都有明确的方式去解决。但是，如果我们对一个错误值可能代表的含义知之甚少，那么就只能通过它拥有的错误信息去做判断了。</p><p>好在我们总是能通过错误值的<code>Error</code>方法，拿到它的错误信息。其实<code>os</code>包中就有做这种判断的函数，比如：<code>os.IsExist</code>、<code>os.IsNotExist</code>和<code>os.IsPermission</code>。命令源码文件demo45.go中包含了对它们的应用，这大致跟前面展示的代码差不太多，我就不在这里赘述了。</p><h2>总结</h2><p>今天我们一起初步学习了错误处理的内容。我们总结了错误类型、错误值的处理技巧和设计方式，并一起分享了Go语言中处理错误的最基本方式。由于错误处理的内容分为上下两篇，在下一次的文章中，我们会站在建造者的角度，一起来探索一下：怎样根据实际情况给予恰当的错误值。</p><h2>思考题</h2><p>请列举出你经常用到或者看到的3个错误类型，它们所在的错误类型体系都是怎样的？你能画出一棵树来描述它们吗？</p><p>感谢你的收听，我们下期再见。</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","comments":[{"had_liked":false,"id":26828,"user_name":"zs阿帅","can_delete":false,"product_type":"c1","uid":1141173,"ip_address":"","ucode":"07A54AE7F1CAFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","comment_is_top":false,"comment_ctime":1537758613,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"83142137237","product_id":100013101,"comment_content":"go2设计草案里提到说对于这种error处理的多个卫术语句的简化，利用check，handler简化错误处理的代码量。","like_count":20,"discussions":[{"author":{"id":1218501,"avatar":"https://static001.geekbang.org/account/avatar/00/12/97/c5/84491beb.jpg","nickname":"罗峰","note":"","ucode":"5F3D6AF8F28322","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334395,"discussion_content":"请问 有例子吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607836924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203826,"user_name":"Felix","can_delete":false,"product_type":"c1","uid":1317899,"ip_address":"","ucode":"9318688F3C5419","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAWUhO0xSjD6wbGScY5WOujAE94vNYWlWmsVdibb0IWbXzSSNXJHp0lqfWVq8ZicKBsEY1EuAWArew/132","comment_is_top":false,"comment_ctime":1586270714,"is_pvip":true,"replies":[{"id":"76916","content":"EOF 就是 End Of File 的缩写。早在 Unix 操作系统诞生之初就有 EOF 这种形式了，它最早象征着文件中内容的结束。由于一些原因，它被很多操作系统和编程语言沿用了。现在的 EOF 的用途已经远不止表示文件的末尾了，它在很多地方都表示某种数据流的末尾。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1586747445,"ip_address":"","comment_id":203826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40240976378","product_id":100013101,"comment_content":"老师，我一直想知道关于io.EOF怎么理解，拿文件来说如果文件读取结束后，为什么是EOF结束，或者说到底什么是EOF.","like_count":10,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490970,"discussion_content":"EOF 就是 End Of File 的缩写。早在 Unix 操作系统诞生之初就有 EOF 这种形式了，它最早象征着文件中内容的结束。由于一些原因，它被很多操作系统和编程语言沿用了。现在的 EOF 的用途已经远不止表示文件的末尾了，它在很多地方都表示某种数据流的末尾。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586747445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170218,"user_name":"CcczzZ","can_delete":false,"product_type":"c1","uid":1019568,"ip_address":"","ucode":"5F46DA5053D2BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","comment_is_top":false,"comment_ctime":1578551969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40233257633","product_id":100013101,"comment_content":"之前要模板化的方式生成错误信息，都会用 errors.New() + fmt.Sprintf() 的组合去生成错误信息， errors.New(fmt.Sprintf())。<br>看完文章之后发现还有 fmt.Errorf函数 可直接模版话方式生成错误信息，方便不少，开心😄之前的方式真是不太优雅","like_count":10},{"had_liked":false,"id":117902,"user_name":"党","can_delete":false,"product_type":"c1","uid":1071974,"ip_address":"","ucode":"EE531DB3EA124D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","comment_is_top":false,"comment_ctime":1564186820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31628957892","product_id":100013101,"comment_content":"打卡 已经看了快2&#47;5了 因为之前学过 只是会用 没有这么深入了解过 这次 很多知识点都有新的认识了 ","like_count":7},{"had_liked":false,"id":36017,"user_name":"那句诺言","can_delete":false,"product_type":"c1","uid":1005553,"ip_address":"","ucode":"7173F6FB338D57","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/f1/a6e4770a.jpg","comment_is_top":false,"comment_ctime":1540892385,"is_pvip":false,"replies":[{"id":"13302","content":"我讲接口的时候讲了啊。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1541481164,"ip_address":"","comment_id":36017,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31605663457","product_id":100013101,"comment_content":"老师，“该值的静态类型当然是error，而动态类型则是一个在errors包中的，包级私有的类型*errorString”，静态类型和动态类型该怎么理解呢？","like_count":7,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427734,"discussion_content":"我讲接口的时候讲了啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541481164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198125,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/2d/7a3d42fb.jpg","nickname":"Alan","note":"","ucode":"9C66CBCFB3A109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115951,"discussion_content":"结构与接口那块文章里有讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578047770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290342,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1619509868,"is_pvip":false,"replies":[{"id":"105273","content":"现在算是稳定了，或者说基本达到了另外一种平衡状态。谢谢关心：）","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1619580268,"ip_address":"","comment_id":290342,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23094346348","product_id":100013101,"comment_content":"郝老师您好，抱歉最近刚看到18年关于您近况的文章，想问一下您最近怎么样了？身体还好嘛？祝老师身体健康！平安顺遂！","like_count":6,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519179,"discussion_content":"现在算是稳定了，或者说基本达到了另外一种平衡状态。谢谢关心：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619580268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2695377,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erlR3yCqJtLI5B72khyjQQ8hsnVM4YKlrRVAA3rqRedMft6Ho3Xtzsxb9dE4mgibNK31qYIm11YicvA/132","nickname":"wonder","note":"","ucode":"D8E3A1469E0A5B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578930,"discussion_content":"同祝老师身体健康！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657096284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447496,"avatar":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","nickname":"郑泽洲","note":"","ucode":"EA1B540A040875","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371896,"discussion_content":"同祝老师身体健康！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620046112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101129,"user_name":"benying","can_delete":false,"product_type":"c1","uid":1247522,"ip_address":"","ucode":"DEBAB485F381CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","comment_is_top":false,"comment_ctime":1559722893,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"23034559373","product_id":100013101,"comment_content":"评论的人很少了，打卡，20190605","like_count":5,"discussions":[{"author":{"id":1053662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/de/1528c683.jpg","nickname":"fanjl","note":"","ucode":"AB717E5AC9E783","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373941,"discussion_content":"打卡，说明走到这里的人不多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620920618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","nickname":"benying","note":"","ucode":"DEBAB485F381CC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284515,"discussion_content":"打卡，20200619","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592546359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264262,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1606395463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18786264647","product_id":100013101,"comment_content":"go1.13中，errors又新增了3个方法 <br>errors.Unwrap <br>errors.Is <br>errors.As","like_count":5},{"had_liked":false,"id":76604,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1552640866,"is_pvip":false,"replies":[{"id":"28879","content":"基本上是这样，就拿Web系统来说，一般情况下会在系统的最上层（接收request的那一层）统一处理错误。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1553399176,"ip_address":"","comment_id":76604,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18732510050","product_id":100013101,"comment_content":"老师你好，在代码中如何优雅地处理错误呀，有没有办法 不需要在每个方法中处理，集中到一个地方处理？","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443375,"discussion_content":"基本上是这样，就拿Web系统来说，一般情况下会在系统的最上层（接收request的那一层）统一处理错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553399176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30328,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1538794635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18718663819","product_id":100013101,"comment_content":"常用到的net和json包中的错误类型有：<br>1. AddrError <br>2. SyntaxError<br>3. MarshalerError<br>","like_count":4},{"had_liked":false,"id":34929,"user_name":"A 凡","can_delete":false,"product_type":"c1","uid":1197361,"ip_address":"","ucode":"BDC8DB599B8284","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/31/53910b61.jpg","comment_is_top":false,"comment_ctime":1540358359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425260247","product_id":100013101,"comment_content":"感觉第一遍看的时候，看的不够仔细，所以从头有看到这部分，发现细节性的东西还是有很多需要注意！","like_count":4},{"had_liked":false,"id":284352,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1616208666,"is_pvip":true,"replies":[{"id":"103178","content":"因为那个函数存在有名称的结果声明，所以在该函数开始执行的时候，作为其结果的变量（如 echo 函数中的 response 变量和 err 变量）就已经自动创建好了。因此，这种函数中的 return 就可以不加任何东西，这时返回的就是那几个结果变量（如 response 和 err）的值。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1616301584,"ip_address":"","comment_id":284352,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10206143258","product_id":100013101,"comment_content":"echo 函数 return 后面的东西呢？","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517317,"discussion_content":"因为那个函数存在有名称的结果声明，所以在该函数开始执行的时候，作为其结果的变量（如 echo 函数中的 response 变量和 err 变量）就已经自动创建好了。因此，这种函数中的 return 就可以不加任何东西，这时返回的就是那几个结果变量（如 response 和 err）的值。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616301584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391338,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/ea/57239ff2.jpg","nickname":"王家东","note":"","ucode":"4EADF7B6406FCC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370676,"discussion_content":"你可以把文中的写法看成是 go 语言的一种简写（不过这种写法只是适用于函数返回值名称事先已经定义好了的），改写的版本供你参考一下，注意查看这下面两种种写法和文章中的区别\n//当返回值有名称时，完整写法，也可以写成文中的写法。\nfunc echo(request string) (response string, err error) {\n\tif request == &#34;&#34; {\n\t\terr = errors.New(&#34;empty request&#34;)\n\t\treturn response, err\n\t}\n\tresponse = fmt.Sprintf(&#34;echo: %s&#34;, request)\n\treturn response, nil\n}\n//当返回值无名称，只有类型时，只能这么写，使用简写形式不能通过编译。\nfunc echo(request string) (string, error) {\n\tif request == &#34;&#34; {\n\t\terr := errors.New(&#34;empty request&#34;)\n\t\treturn &#34;&#34;, err\n\t}\n\tresponse := fmt.Sprintf(&#34;echo: %s&#34;, request)\n\treturn response, nil\n}\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619507381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296367,"user_name":"罗峰","can_delete":false,"product_type":"c1","uid":1218501,"ip_address":"","ucode":"5F3D6AF8F28322","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/c5/84491beb.jpg","comment_is_top":false,"comment_ctime":1622943245,"is_pvip":false,"replies":[{"id":"107687","content":"是的。不过修正下你说的话，是“两个 error 类型值的比较”，不是“两个 err 比较”。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1623053548,"ip_address":"","comment_id":296367,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917910541","product_id":100013101,"comment_content":"两个err 比较，应该是比较 相应的动态类型以及动态值是不是 完全一样，感觉就是地址的比较把","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521414,"discussion_content":"是的。不过修正下你说的话，是“两个 error 类型值的比较”，不是“两个 err 比较”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623053548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183446,"user_name":"修罗","can_delete":false,"product_type":"c1","uid":1203834,"ip_address":"","ucode":"9C25F94C40285F","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7a/028dc1a9.jpg","comment_is_top":false,"comment_ctime":1583043815,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5878011111","product_id":100013101,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":342574,"user_name":"Geek_as","can_delete":false,"product_type":"c1","uid":1534500,"ip_address":"","ucode":"AB7B70DBC2B5F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qhonwcQle1RBufvLdTm4MgSNl554GBXUZtNNH65oYajbbRLxKsZX4hM9vFtrLLpDM0H93ZNWRFAZSrIZC7yAsQ/132","comment_is_top":false,"comment_ctime":1650350233,"is_pvip":true,"replies":[{"id":"125246","content":"这里的underlyingError函数的意思是，参数err的类型只要是*os.PathError、*os.LinkError、*os.SyscallError或*exec.Error中的任意一个的话，就返回err内含的（也就是潜在的）那个错误，否则就把参数err原封不动地返回去。函数如其名，它就是要设法拿到原错误的潜在错误。<br><br>当然，你也可以把那些用于判断的类型写到一个case里。我这里是为了在文章中清晰展示，所以把它们分开写了。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1650531890,"ip_address":"","comment_id":342574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650350233","product_id":100013101,"comment_content":"underlyingError函数我还是有点懵逼，多个switch全部都是执行err.Err，那不需要switch直接执行不也可以吗","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565737,"discussion_content":"这里的underlyingError函数的意思是，参数err的类型只要是*os.PathError、*os.LinkError、*os.SyscallError或*exec.Error中的任意一个的话，就返回err内含的（也就是潜在的）那个错误，否则就把参数err原封不动地返回去。函数如其名，它就是要设法拿到原错误的潜在错误。\n\n当然，你也可以把那些用于判断的类型写到一个case里。我这里是为了在文章中清晰展示，所以把它们分开写了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650531891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341203,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1649418566,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649418566","product_id":100013101,"comment_content":"boundsError越界异常","like_count":0},{"had_liked":false,"id":336653,"user_name":"Geek_05d654","can_delete":false,"product_type":"c1","uid":2903068,"ip_address":"","ucode":"D10FB87A0A62A1","user_header":"","comment_is_top":false,"comment_ctime":1646276400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646276400","product_id":100013101,"comment_content":"type PathError struct {<br>\tOp   string<br>\tPath string<br>\tErr  error<br>}<br><br>func (e *PathError) Error() string { return e.Op + &quot; &quot; + e.Path + &quot;: &quot; + e.Err.Error() }","like_count":0},{"had_liked":false,"id":324326,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1638371508,"is_pvip":false,"replies":[{"id":"117717","content":"类型转换之后再比较啊，你可以用类型断言或者 type switch 语句去判断类型。但一般都会有 other（或者说 default）的情况，这需要妥善处理。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1638419899,"ip_address":"","comment_id":324326,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1638371508","product_id":100013101,"comment_content":"判断2个接口类型（比如这里error类型的值）的值是否相等，是否就是判断他们的的实际类型和实际值是否相等，验证一下认为不是这样比较的，不是的话，什么情况下是相等的呢","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535365,"discussion_content":"类型转换之后再比较啊，你可以用类型断言或者 type switch 语句去判断类型。但一般都会有 other（或者说 default）的情况，这需要妥善处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638419899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","nickname":"jxs1211","note":"","ucode":"B7F1F2D84389E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538546,"discussion_content":"怎么判断2个接口类型的对象是否相等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639445326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","nickname":"jxs1211","note":"","ucode":"B7F1F2D84389E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538545,"discussion_content":"源码中对两个接口进行了判等操作，这个操作比较的依据是什么？\nfunc underlyingErrorIs(err, target error) bool {\n\t// Note that this function is not errors.Is:\n\t// underlyingError only unwraps the specific error-wrapping types\n\t// that it historically did, not all errors implementing Unwrap().\n\terr = underlyingError(err)\n\tif err == target {\n\t\treturn true\n\t}\n\t// To preserve prior behavior, only examine syscall errors.\n\te, ok := err.(syscallErrorType)\n\treturn ok &amp;&amp; e.Is(target)\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639445305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294717,"user_name":"任小龙","can_delete":false,"product_type":"c1","uid":1399685,"ip_address":"","ucode":"C5A5980BC9A415","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/85/1d7abd78.jpg","comment_is_top":false,"comment_ctime":1622072013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622072013","product_id":100013101,"comment_content":"pkg&#47;errors，学习中。","like_count":0},{"had_liked":false,"id":81840,"user_name":"LH","can_delete":false,"product_type":"c1","uid":1211178,"ip_address":"","ucode":"819B9B2409E834","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/2a/7d8b5943.jpg","comment_is_top":false,"comment_ctime":1554047502,"is_pvip":false,"replies":[{"id":"29692","content":"其实只是不太随大流而已。try...catch...finally的方式代码量也少不到哪里去。不过Go 2会有大幅改进的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1554125948,"ip_address":"","comment_id":81840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554047502","product_id":100013101,"comment_content":"未知类型的错误真的感觉不太友好","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445365,"discussion_content":"其实只是不太随大流而已。try...catch...finally的方式代码量也少不到哪里去。不过Go 2会有大幅改进的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554125948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62459,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1548062645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548062645","product_id":100013101,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":26885,"user_name":"有匪君子","can_delete":false,"product_type":"c1","uid":1204061,"ip_address":"","ucode":"72B91AFC96E285","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/5d/63010e32.jpg","comment_is_top":false,"comment_ctime":1537770089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537770089","product_id":100013101,"comment_content":"中秋快乐","like_count":0}]}