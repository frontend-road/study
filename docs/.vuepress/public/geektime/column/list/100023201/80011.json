{"id":80011,"title":"JavaScript对象：你知道全部的对象分类吗？","content":"<p>你好，我是winter。</p><p>在前面的课程中，我已经讲解了JavaScript对象的一些基础知识。但是，我们所讲解的对象，只是特定的一部分，并不能涵盖全部的JavaScript对象。</p><p>比如说，我们不论怎样编写代码，都没法绕开Array，实现一个跟原生的数组行为一模一样的对象，这是由于原生数组的底层实现了一个自动随着下标变化的length属性。</p><p>并且，在浏览器环境中，我们也无法单纯依靠JavaScript代码实现div对象，只能靠document.createElement来创建。这也说明了JavaScript的对象机制并非简单的属性集合+原型。</p><p>我们日常工作中，接触到的主要API，几乎都是由今天所讲解的这些对象提供的。理解这些对象的性质，我们才能真正理解我们使用的API的一些特性。</p><h2>JavaScript中的对象分类</h2><p>我们可以把对象分成几类。</p><ul>\n<li>\n<p>宿主对象（host Objects）：由JavaScript宿主环境提供的对象，它们的行为完全由宿主环境决定。</p>\n</li>\n<li>\n<p>内置对象（Built-in Objects）：由JavaScript语言提供的对象。</p>\n<ul>\n<li>固有对象（Intrinsic Objects ）：由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</li>\n<li>原生对象（Native Objects）：可以由用户通过Array、RegExp等内置构造器或者特殊语法创建的对象。</li>\n<li>普通对象（Ordinary Objects）：由{}语法、Object构造器或者class关键字定义类创建的对象，它能够被原型继承。</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><p>下面我会为你一一讲解普通对象之外的对象类型。</p><h3>宿主对象</h3><p>首先我们来看看宿主对象。</p><p>JavaScript宿主对象千奇百怪，但是前端最熟悉的无疑是浏览器环境中的宿主了。</p><p>在浏览器环境中，我们都知道全局对象是window，window上又有很多属性，如document。</p><p>实际上，这个全局对象window上的属性，一部分来自JavaScript语言，一部分来自浏览器环境。</p><p>JavaScript标准中规定了全局对象属性，W3C的各种标准中规定了Window对象的其它属性。</p><p>宿主对象也分为固有的和用户可创建的两种，比如document.createElement就可以创建一些DOM对象。</p><p>宿主也会提供一些构造器，比如我们可以使用new Image来创建img元素，这些我们会在浏览器的API部分详细讲解。</p><h2>内置对象·固有对象</h2><p>我们在前面说过，固有对象是由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</p><p>固有对象在任何JavaScript代码执行前就已经被创建出来了，它们通常扮演者类似基础库的角色。我们前面提到的“类”其实就是固有对象的一种。</p><p>ECMA标准为我们提供了一份固有对象表，里面含有150+个固有对象。你可以通过<a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-well-known-intrinsic-objects\">这个链接</a>查看。</p><p>但是遗憾的是，这个表格并不完整。所以在本篇的末尾，我设计了一个小实验（小实验：获取全部JavaScript固有对象），你可以自己尝试一下，数一数一共有多少个固有对象。</p><h2>内置对象·原生对象</h2><p>我们把JavaScript中，能够通过语言本身的构造器创建的对象称作原生对象。在JavaScript标准中，提供了30多个构造器。按照我的理解，按照不同应用场景，我把原生对象分成了以下几个种类。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/d0/6cb1df319bbc7c7f948acfdb9ffd99d0.png?wh=988*375\" alt=\"\"></p><p>通过这些构造器，我们可以用new运算创建新的对象，所以我们把这些对象称作原生对象。<br>\n几乎所有这些构造器的能力都是无法用纯JavaScript代码实现的，它们也无法用class/extend语法来继承。</p><p>这些构造器创建的对象多数使用了私有字段,例如：</p><ul>\n<li>Error: [[ErrorData]]</li>\n<li>Boolean: [[BooleanData]]</li>\n<li>Number: [[NumberData]]</li>\n<li>Date: [[DateValue]]</li>\n<li>RegExp: [[RegExpMatcher]]</li>\n<li>Symbol: [[SymbolData]]</li>\n<li>Map: [[MapData]]</li>\n</ul><p>这些字段使得原型继承方法无法正常工作，所以，我们可以认为，所有这些原生对象都是为了特定能力或者性能，而设计出来的“特权对象”。</p><h2>用对象来模拟函数与构造器：函数对象与构造器对象</h2><p>我在前面介绍了对象的一般分类，在JavaScript中，还有一个看待对象的不同视角，这就是用对象来模拟函数和构造器。</p><p>事实上，JavaScript为这一类对象预留了私有字段机制，并规定了抽象的函数对象与构造器对象的概念。</p><p>函数对象的定义是：具有[[call]]私有字段的对象，构造器对象的定义是：具有私有字段[[construct]]的对象。</p><p>JavaScript用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提供了“具有[[call]]私有字段的对象”，就可以被 JavaScript 函数调用语法支持。</p><blockquote>\n<p><span class=\"reference\">[[call]]私有字段必须是一个引擎中定义的函数，需要接受this值和调用参数，并且会产生域的切换，这些内容，我将会在属性访问和执行过程两个章节详细讲述。</span></p>\n</blockquote><p>我们可以这样说，任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能实现[[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p><p>对于为JavaScript提供运行环境的程序员来说，只要字段符合，我们在上文中提到的宿主对象和内置对象（如Symbol函数）可以模拟函数和构造器。</p><p>当然了，用户用function关键字创建的函数必定同时是函数和构造器。不过，它们表现出来的行为效果却并不相同。</p><p>对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总是一致的。比如内置对象 Date 在作为构造器调用时产生新的对象，作为函数时，则产生字符串，见以下代码：</p><pre><code class=\"language-JavaScript\">    console.log(new Date); // 1\n    console.log(Date())\n</code></pre><p>而浏览器宿主环境中，提供的Image构造器，则根本不允许被作为函数调用。</p><pre><code>console.log(new Image); \nconsole.log(Image());//抛出错误\n</code></pre><p>再比如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p><p>值得一提的是，在ES6之后 =&gt; 语法创建的函数仅仅是函数，它们无法被当作构造器使用，见以下代码：</p><pre><code class=\"language-JavaScript\">    new (a =&gt; 0) // error\n\n</code></pre><p>对于用户使用 function 语法或者Function构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的，它们执行同一段代码。</p><p>我们看一下示例。</p><pre><code class=\"language-JavaScript\">function f(){\n    return 1;\n}\nvar v = f(); //把f作为函数调用\nvar o = new f(); //把f作为构造器调用\n</code></pre><p>我们大致可以认为，它们[[construct]]的执行过程如下：</p><ul>\n<li>以 Object.prototype 为原型创建一个新对象；</li>\n<li>以新对象为 this，执行函数的[[call]]；</li>\n<li>如果[[call]]的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。</li>\n</ul><p>这样的规则造成了个有趣的现象，如果我们的构造器返回了一个新的对象，那么new创建的新对象就变成了一个构造函数之外完全无法访问的对象，这一定程度上可以实现“私有”。</p><pre><code>function cls(){\n    this.a = 100;\n    return {\n        getValue:() =&gt; this.a\n    }\n}\nvar o = new cls;\no.getValue(); //100\n//a在外面永远无法访问到\n</code></pre><h2>特殊行为的对象</h2><p>除了上面介绍的对象之外，在固有对象和原生对象中，有一些对象的行为跟正常对象有很大区别。</p><p>它们常见的下标运算（就是使用中括号或者点来做属性访问）或者设置原型跟普通对象不同，这里我简单总结一下。</p><ul>\n<li>Array：Array的length属性根据最大的下标自动发生变化。</li>\n<li>Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。</li>\n<li>String：为了支持下标运算，String的正整数属性访问会去字符串里查找。</li>\n<li>Arguments：arguments的非负整数型下标属性跟对应的变量联动。</li>\n<li>模块的namespace对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于import吧。</li>\n<li>类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。</li>\n<li>bind后的function：跟原来的函数相关联。</li>\n</ul><h2>结语</h2><p>在这篇文章中，我们介绍了一些不那么常规的对象，并且我还介绍了JavaScript中用对象来模拟函数和构造器的机制。</p><p>这是一些不那么有规律、不那么优雅的知识，而JavaScript正是通过这些对象，提供了很多基础的能力。</p><p>我们这次课程留一个挑战任务：不使用new运算符，尽可能找到获得对象的方法。</p><p>例子：</p><pre><code>var o = {}\nvar o = function(){}\n</code></pre><p>请把自己的答案留言给我，我们来比比看谁找到的多。</p><h2>小实验：获取全部JavaScript固有对象</h2><p>我们从JavaScript标准中可以找到全部的JavaScript对象定义。JavaScript语言规定了全局对象的属性。</p><p>三个值：</p><p>Infinity、NaN、undefined。</p><p>九个函数：</p><ul>\n<li>eval</li>\n<li>isFinite</li>\n<li>isNaN</li>\n<li>parseFloat</li>\n<li>parseInt</li>\n<li>decodeURI</li>\n<li>decodeURIComponent</li>\n<li>encodeURI</li>\n<li>encodeURIComponent</li>\n</ul><p>一些构造器：<br>\nArray、Date、RegExp、Promise、Proxy、Map、WeakMap、Set、WeakSet、Function、Boolean、String、Number、Symbol、Object、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError、ArrayBuffer、SharedArrayBuffer、DataView、Typed Array、Float32Array、Float64Array、Int8Array、Int16Array、Int32Array、UInt8Array、UInt16Array、UInt32Array、UInt8ClampedArray。</p><p>四个用于当作命名空间的对象：</p><ul>\n<li>Atomics</li>\n<li>JSON</li>\n<li>Math</li>\n<li>Reflect</li>\n</ul><p>我们使用广度优先搜索，查找这些对象所有的属性和Getter/Setter，就可以获得JavaScript中所有的固有对象。</p><p>请你试着先不看我的代码，在自己的浏览器中计算出来JavaScript有多少固有对象。</p><pre><code>var set = new Set();\nvar objects = [\n    eval,\n    isFinite,\n    isNaN,\n    parseFloat,\n    parseInt,\n    decodeURI,\n    decodeURIComponent,\n    encodeURI,\n    encodeURIComponent,\n    Array,\n    Date,\n    RegExp,\n    Promise,\n    Proxy,\n    Map,\n    WeakMap,\n    Set,\n    WeakSet,\n    Function,\n    Boolean,\n    String,\n    Number,\n    Symbol,\n    Object,\n    Error,\n    EvalError,\n    RangeError,\n    ReferenceError,\n    SyntaxError,\n    TypeError,\n    URIError,\n    ArrayBuffer,\n    SharedArrayBuffer,\n    DataView,\n    Float32Array,\n    Float64Array,\n    Int8Array,\n    Int16Array,\n    Int32Array,\n    Uint8Array,\n    Uint16Array,\n    Uint32Array,\n    Uint8ClampedArray,\n    Atomics,\n    JSON,\n    Math,\n    Reflect];\nobjects.forEach(o =&gt; set.add(o));\n\nfor(var i = 0; i &lt; objects.length; i++) {\n    var o = objects[i]\n    for(var p of Object.getOwnPropertyNames(o)) {\n        var d = Object.getOwnPropertyDescriptor(o, p)\n        if( (d.value !== null &amp;&amp; typeof d.value === &quot;object&quot;) || (typeof d.value === &quot;function&quot;))\n            if(!set.has(d.value))\n                set.add(d.value), objects.push(d.value);\n        if( d.get )\n            if(!set.has(d.get))\n                set.add(d.get), objects.push(d.get);\n        if( d.set )\n            if(!set.has(d.set))\n                set.add(d.set), objects.push(d.set);\n    }\n}\n</code></pre>","neighbors":{"left":{"article_title":"JavaScript对象：我们真的需要模拟类吗？","id":79539},"right":{"article_title":"JavaScript执行（一）：Promise里的代码为什么比setTimeout先执行？","id":82764}},"comments":[{"had_liked":false,"id":65441,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1549357758,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"907787457214","product_id":100023201,"comment_content":"&#47;&#47; 1. 利用字面量<br>var a = [], b = {}, c = &#47;abc&#47;g<br>&#47;&#47; 2. 利用dom api<br>var d = document.createElement(&#39;p&#39;)<br>&#47;&#47; 3. 利用JavaScript内置对象的api<br>var e = Object.create(null)<br>var f = Object.assign({k1:3, k2:8}, {k3: 9})<br>var g = JSON.parse(&#39;{}&#39;)<br>&#47;&#47; 4.利用装箱转换<br>var h = Object(undefined), i = Object(null), k = Object(1), l = Object(&#39;abc&#39;), m = Object(true)","like_count":211,"discussions":[{"author":{"id":2638527,"avatar":"https://static001.geekbang.org/account/avatar/00/28/42/bf/1a9a3972.jpg","nickname":"webbin","note":"","ucode":"75E1841D9EDEFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379245,"discussion_content":"我觉得后面有个兄弟，通过try catch获得一个error对象，可以当做是第五种方式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623768087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67365,"user_name":"多啦斯基周","can_delete":false,"product_type":"c1","uid":1298168,"ip_address":"","ucode":"8D3870F58B05AB","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/f8/40e72791.jpg","comment_is_top":false,"comment_ctime":1550135512,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"542716014808","product_id":100023201,"comment_content":"这块的内容确实有些复杂，作者讲的很深入。<br>但是个人觉得思路是否可以再整理一下，总是感觉有一些绕，把知识讲得更易理解一些呢？","like_count":127,"discussions":[{"author":{"id":1997806,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7b/ee/53124b75.jpg","nickname":"东坡芝士","note":"","ucode":"FF267B7E865AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320289,"discussion_content":"这一节是很抽象","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604311116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2716151,"avatar":"https://static001.geekbang.org/account/avatar/00/29/71/f7/a70c8cce.jpg","nickname":"二货仙人","note":"","ucode":"112F20FCAF5C6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386104,"discussion_content":"不难啊 就是开头说的 js中对象的分类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627402297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65101,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1041504,"ip_address":"","ucode":"12F8CEDE004D7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/60/a011a649.jpg","comment_is_top":false,"comment_ctime":1549047005,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"289311855837","product_id":100023201,"comment_content":"一期比一期深入，一期比一期了解的更少了，蓝瘦","like_count":67,"discussions":[{"author":{"id":1581163,"avatar":"https://static001.geekbang.org/account/avatar/00/18/20/6b/6cef2782.jpg","nickname":"一丁目","note":"","ucode":"F7B6F8B688CD53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301891,"discussion_content":"说明你还有进步的空间，学到新知识了你应该感到开心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598698538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77857,"user_name":"kesikesie","can_delete":false,"product_type":"c1","uid":1451458,"ip_address":"","ucode":"B9586D7E34C6B3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJy3VhrhNLDDzCjbqs0EAN5lp4svORB4ELRwQJbkOaCAUV3ic38OUIu1OoibwuyMicKhQowZGwSImvjA/132","comment_is_top":false,"comment_ctime":1553008169,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"130402027049","product_id":100023201,"comment_content":"    console.log(new Date); &#47;&#47; 1<br>    console.log(Date())<br>这个在控制台打印的都是日期","like_count":30,"discussions":[{"author":{"id":1580365,"avatar":"","nickname":"郑鹏辉","note":"","ucode":"CA6BC3F96A53D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5005,"discussion_content":"因为console log的时候，调用了object的toString方法","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1565870088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1379410,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0c/52/6c8a9724.jpg","nickname":"小龙龙032","note":"","ucode":"9238A0607B0853","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315,"discussion_content":"typeof new Date 是 object\ntypeof Date() 是 string\n不了解的东西请多做尝试","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1561444050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641179,"avatar":"","nickname":"三七二十几","note":"","ucode":"5E55B19DD04FDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6674,"discussion_content":"console.log(typeof new Date()) // object\nconsole.log(typeof Date()) // string","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1567046474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/dd/a8/a2c910b6.jpg","nickname":"katalya","note":"","ucode":"CCD1FE6C4F8C1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584395,"discussion_content":"console.dir(new Date())\nconsole.dir(Date())","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660803411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1086453,"avatar":"https://static001.geekbang.org/account/avatar/00/10/93/f5/1d71a30e.jpg","nickname":"洋洋","note":"","ucode":"39F9D0D77A1F8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1311,"discussion_content":"用typeof可以判断出类型，console只能打印返回值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562555836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65723,"user_name":"吃不饱","can_delete":false,"product_type":"c1","uid":1373757,"ip_address":"","ucode":"51079E9D3B077E","user_header":"https://static001.geekbang.org/account/avatar/00/14/f6/3d/7ec71bc4.jpg","comment_is_top":false,"comment_ctime":1549605574,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"126103657158","product_id":100023201,"comment_content":"前端工作一年，好难理解。","like_count":29,"discussions":[{"author":{"id":2071565,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/9c/0d/077f2e27.jpg","nickname":"鼓鼓","note":"","ucode":"AB7D741D59CDE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537886,"discussion_content":"终于不是一个人，真难啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639233033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65229,"user_name":"米斯特菠萝","can_delete":false,"product_type":"c1","uid":1259824,"ip_address":"","ucode":"8AFB7F59F9014A","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/30/f7df6ba7.jpg","comment_is_top":false,"comment_ctime":1549134996,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"100333382804","product_id":100023201,"comment_content":"利用构造器的执行规则来实现私有，真是个意外的发现<br><br>之前用class构建一个类，有一些方法暴露给外面总觉得怪怪的。现在好了，在constructor函数里return一个对象，在对象里写方法来对应返回类里写的需要暴露的method就解决了","like_count":23,"discussions":[{"author":{"id":1375116,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fb/8c/ffc4215e.jpg","nickname":"sixgod","note":"","ucode":"43D67B62AEA126","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197220,"discussion_content":"ts不香吗","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583413729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347812,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/e4/e621d574.jpg","nickname":"冯盼","note":"","ucode":"ADC3C49B71180B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21746,"discussion_content":"这是闭包的一个典型用法，还比如说模拟块级作用域，柯里化，但是我始终没有联系到使用场景","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569512552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997806,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7b/ee/53124b75.jpg","nickname":"东坡芝士","note":"","ucode":"FF267B7E865AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320291,"discussion_content":"使用场景是啥呢，私有变量不暴露出来，我一直有个疑问，你暴露出来了也只能是开发者去调用啊，有啥意外呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604311318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443434,"avatar":"https://static001.geekbang.org/account/avatar/00/16/06/6a/48fb83f3.jpg","nickname":"Value","note":"","ucode":"5413E5E4A7326C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229172,"discussion_content":"class Dog extends Animal {\n    constructor(name) {\n      super(name); \n      return{\n          speak:()=>this.speak()\n      }\n    }\n\n    forpet(){\n        console.log(this.name + &#39;可以作为宠物.&#39;)\n    }\n  \n    speak() {\n      console.log(this.name + &#39; 汪汪汪.&#39;);\n    }\n  }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586613618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3c/9d/ab8ab817.jpg","nickname":"佚名","note":"","ucode":"9DF2B1319CD016","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4083,"discussion_content":"这样的写法 会不会造成内存泄漏？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565099026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1645413,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/OWO43KiahibaWnZWkEzXfNQCAqAvVNia44HLxzaNbPKZxiaic3ameJ72dLros26ibxuCL1B5pl7MRlOVrqutNsTOXegQ/132","nickname":"JY","note":"","ucode":"54DF39E40C0F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1064093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3c/9d/ab8ab817.jpg","nickname":"佚名","note":"","ucode":"9DF2B1319CD016","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197943,"discussion_content":"我觉得会，闭包就是要一直保存上下文环境，一直不释放的话会很占内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583457478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4083,"ip_address":""},"score":197943,"extra":""},{"author":{"id":2089016,"avatar":"","nickname":"Geek_5b50ea","note":"","ucode":"A63CE4BAAF00F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1064093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3c/9d/ab8ab817.jpg","nickname":"佚名","note":"","ucode":"9DF2B1319CD016","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298376,"discussion_content":"不会内存泄漏，但是返回对象中的函数是个闭包，其一直持有对构造函数变量对象的引用，会导致一定程度上的内存占用，这和内存泄漏有一定的区别。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597283296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4083,"ip_address":""},"score":298376,"extra":""}]}]},{"had_liked":false,"id":65218,"user_name":"plasmatium","can_delete":false,"product_type":"c1","uid":1356120,"ip_address":"","ucode":"1564F6A20186AE","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/58/7d4f968f.jpg","comment_is_top":false,"comment_ctime":1549118233,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"70268594969","product_id":100023201,"comment_content":"try {<br>  Image()<br>) catch (err) {<br>  &#47;&#47; 获得一个对象err<br>}","like_count":16,"discussions":[{"author":{"id":1376756,"avatar":"https://static001.geekbang.org/account/avatar/00/15/01/f4/2856d67b.jpg","nickname":"Kylin","note":"","ucode":"9ADD1FBC9659C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100470,"discussion_content":"小机灵鬼","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577262349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2632198,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/06/da417908.jpg","nickname":"清风月明","note":"","ucode":"54C98300A9F4DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531450,"discussion_content":"确实是一个人才","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637313595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2151441,"avatar":"https://static001.geekbang.org/account/avatar/00/20/d4/11/52cb3167.jpg","nickname":"不可达鸭","note":"","ucode":"56878A6E7CAF12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377500,"discussion_content":"哈哈哈，人才","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622687070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65136,"user_name":"AICC","can_delete":false,"product_type":"c1","uid":1020746,"ip_address":"","ucode":"C1D18B1E8B2DCE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/4a/de82f373.jpg","comment_is_top":false,"comment_ctime":1549073536,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65973582976","product_id":100023201,"comment_content":"不那么规律不那么优雅看得云里雾里","like_count":15,"discussions":[{"author":{"id":2190721,"avatar":"","nickname":"Geek_lch","note":"","ucode":"A3CF541B39C84F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574557,"discussion_content":"同感，感觉讲的不太好，感觉没啥条例，很多地方讲的不够深入，有些简单的又花费了半天在那讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654141323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65142,"user_name":"clannad-","can_delete":false,"product_type":"c1","uid":1384428,"ip_address":"","ucode":"917AF04B71FF35","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/ec/dede5cb2.jpg","comment_is_top":false,"comment_ctime":1549075635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61678617779","product_id":100023201,"comment_content":"1.var o = [];<br>2.document.createElement(&#39;div&#39;)；<br>3.Object.create(Object.prototype);<br>4.var o = Object.assign({});<br>5.var o = JSON.parse(&#39;{}&#39;);","like_count":14},{"had_liked":false,"id":95870,"user_name":"Geek_1d054d","can_delete":false,"product_type":"c1","uid":1538965,"ip_address":"","ucode":"15E86A987FFB79","user_header":"","comment_is_top":false,"comment_ctime":1558238368,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"53097845920","product_id":100023201,"comment_content":"老师提到原生构造器无法继承。<br>而阮一峰老师在http:&#47;&#47;es6.ruanyifeng.com&#47;#docs&#47;class-extends中表示，es6已经可以继承原生构造函数，并且能定义子类。<br>以我的理解来看，阮一峰老师的说法没有问题。<br>不知道老师怎么看？","like_count":12,"discussions":[{"author":{"id":1375112,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fb/88/558a1b35.jpg","nickname":"你老公‮下一你了亲并‭","note":"","ucode":"E1DB7E1CAF82DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371346,"discussion_content":"我觉得是可以的，参考规范里面：It may be used as the value of an extends clause of a class definition. Subclass constructors that intend to inherit the specified Date behaviour must include a super call to the Date constructor to create and initialize the subclass instance with a [[DateValue]] internal slot. 通过super是可以创建internal slot的，内部槽都可以创建，那还有啥和原生的不一样。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619744487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1375156,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fb/b4/afbaab2f.jpg","nickname":"徐三响","note":"","ucode":"6B30D451EBD60D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88576,"discussion_content":"你理解力可能有问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576719448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442136,"avatar":"https://static001.geekbang.org/account/avatar/00/16/01/58/0eac367a.jpg","nickname":"一飞同学","note":"","ucode":"6BBE71E4704668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227125,"discussion_content":"可以继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586453186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203002,"user_name":"wingsico","can_delete":false,"product_type":"c1","uid":1126631,"ip_address":"","ucode":"A91CB7B0497708","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","comment_is_top":false,"comment_ctime":1586100445,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"48830740701","product_id":100023201,"comment_content":"JS中对象的分类一般分为宿主对象和内置对象，宿主对象就是由js运行的环境提供的对象，它的行为由环境控制，例如浏览器中的Window，Node中的global等，而内置对象可以再次细分，分为固有对象、原生对象和普通对象，这些对象可以隶属于多种对象，例如Array 即是固有对象，也是原生对象，固有对象是由环境或者宿主提供的，这里的对象并不但只类似{}这样的对象，函数也是对象。固有对象包含了所有的原生对象的创造者，例如 var array = new Array(), 其中 array 是原生对象，而Array是其创造者，属于固有对象。这些固有对象往往包含两个特殊的私有属性 [[call]] 和 [[construct]]，拥有 [[call]] 的对象可以作为函数进行调用，拥有 [[construct]] 的可以作为构造器被new调用。这两个属性是由js引擎写入，通过上层js代码是无法进行赋值或修改的。对于一些对象的特殊行为，一般都是由js引擎完成的，但通过一些上层js代码模拟，也可以模拟出类似操作。","like_count":11},{"had_liked":false,"id":65134,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1021014,"ip_address":"","ucode":"2B732860C4231B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/56/4b8395f6.jpg","comment_is_top":false,"comment_ctime":1549072655,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"44498745615","product_id":100023201,"comment_content":"除了老师提到的：<br>var o = {}<br>var o = function(){}<br><br>还有：<br><br>&#47;&#47; 使用 Object 构造器<br>var o = new Object();<br><br>&#47;&#47; 使用 function<br>var o = new function f() {};<br><br>&#47;&#47; 使用 method<br>var o = Object.create(null)<br><br>&#47;&#47; 使用 ES6 class<br>class myOwnObject {<br>  constructor(a) { this.a = a; }<br>}<br>var o = new myOwnObject(‘hey yo’);<br><br>暂时想到这些。<br>","like_count":10,"discussions":[{"author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60747,"discussion_content":"老师说的是不用new关键字来创建对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574751637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65118,"user_name":"覃","can_delete":false,"product_type":"c1","uid":1387871,"ip_address":"","ucode":"6DA7B34A33DDFB","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/5f/f648ec62.jpg","comment_is_top":false,"comment_ctime":1549069102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40203774766","product_id":100023201,"comment_content":"老师好，看完文章后有两个小疑问<br>1.Js的30多个构造器是怎么实现的？ <br>2.div对象虽然属性很多。那可以用纯js模拟吗？使用document.createElement的时候，浏览器还做了什么别的工作吗？","like_count":9},{"had_liked":false,"id":70638,"user_name":"XXX","can_delete":false,"product_type":"c1","uid":1184644,"ip_address":"","ucode":"500C7EB8E16211","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/84/5aeaea9c.jpg","comment_is_top":false,"comment_ctime":1551151371,"is_pvip":false,"replies":[{"id":"25918","content":"能继承方法，但是没办法跟原生的一模一样","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1551432036,"ip_address":"","comment_id":70638,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35910889739","product_id":100023201,"comment_content":"关于原生构造器无法用 class&#47;extend 语法来继承的观点，能否举例说明呢？我写个demo跑了一下，发现还是可以的呐<br><br>","like_count":8,"discussions":[{"author":{"id":1564786,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e0/72/6e0314e7.jpg","nickname":"Ace","note":"","ucode":"C77191A6B18845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317102,"discussion_content":"老师能不能举几个继承和原生不一样的例子，我也写了几个demo跑了下没发现区别。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603505795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440744,"discussion_content":"能继承方法，但是没办法跟原生的一模一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1551432036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65481,"user_name":"Evo","can_delete":false,"product_type":"c1","uid":1018925,"ip_address":"","ucode":"3816DFEE1C5BC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/2d/78e39300.jpg","comment_is_top":false,"comment_ctime":1549410922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27319214698","product_id":100023201,"comment_content":"&quot;用对象来模拟函数与构造器：函数对象与构造器对象&quot; 最后一段：“如果我们的构造器返回来一个新的对象，那么new创建的新对象就变成了一个构造函数之外完全无法访问的对象”， 明明是“构造器中的某些属性可以被写成构造函数之外完全无法访问的属性”。","like_count":6},{"had_liked":false,"id":65275,"user_name":"Nirvana","can_delete":false,"product_type":"c1","uid":1393563,"ip_address":"","ucode":"FF22C1391C7CF5","user_header":"https://static001.geekbang.org/account/avatar/00/15/43/9b/ce86894a.jpg","comment_is_top":false,"comment_ctime":1549184101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23024020581","product_id":100023201,"comment_content":"我发现老师很稀罕猫啊，都是猫的配图","like_count":5},{"had_liked":false,"id":77953,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1391464,"ip_address":"","ucode":"40EABFE90C5512","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/68/a409de4b.jpg","comment_is_top":false,"comment_ctime":1553045907,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18732915091","product_id":100023201,"comment_content":"老师你说的那个console.log(new Date)和console.log(Date())在控制台全部输出时间字符串，咋回事","like_count":4,"discussions":[{"author":{"id":1624821,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ca/f5/3f95bf91.jpg","nickname":"tron","note":"","ucode":"F94DB2BE804998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70530,"discussion_content":"我的也是，估计是浏览器坏了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575365154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986546,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4f/f2/5c438fc7.jpg","nickname":"芳芳","note":"","ucode":"2ABC51246E1309","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262677,"discussion_content":"console.log 的时候会把要打印的日志做一个类型转化，所以打印出来的结果都是string  \n个人觉得用\n console.log(typeof new Date); // 1\n console.log(typeof Date());\n能解答你的疑惑。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589120790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1164685,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c5/8d/36821055.jpg","nickname":"尽忠","note":"","ucode":"EB27E21715424C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80850,"discussion_content":"new Date()输出的是Date对象，不然你打印下Object.prototype.toString.call(new Date())试试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576199988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71472,"user_name":"拾迹","can_delete":false,"product_type":"c1","uid":1025093,"ip_address":"","ucode":"38F367B77FF2D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","comment_is_top":false,"comment_ctime":1551348830,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18731218014","product_id":100023201,"comment_content":"1、使用 Object 构造函数<br>var person1 = new Object();<br>2、使用对象字面量<br>var person1 = {}<br>3、工厂模式<br>function createPerson(name, age, job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName = function(){<br>        alert(this.name);<br>    }<br>    return o;<br>}<br>var person1 = createPerson(&#39;zs&#39;, 18, &#39;programmer&#39;);<br>var person2 = createPerson(&#39;ls&#39;, 28, &#39;teacter&#39;);<br>4、构造函数<br>function Person(){...}<br>var p = new Person()<br>5、原型模式<br>function Person(){...}<br>Person.prototype.x = ...<br>var p = new Person()<br>6、Object.create()","like_count":4},{"had_liked":false,"id":297129,"user_name":"Geek_657e73","can_delete":false,"product_type":"c1","uid":2584128,"ip_address":"","ucode":"E84B2E67C4C515","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cviaNUiaiaMq9eicjZTupibehtBk1sY9NKWuIsYjB5514Sj1IV3oKIhjicerlnl2FFicW1BEUUqHU1qn0lRdq8bWOzyag/132","comment_is_top":false,"comment_ctime":1623321355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14508223243","product_id":100023201,"comment_content":"不要为了 去凑 而凑好吧，我看了下面的创造对象的方法，瑟瑟发抖，你们比官方还专业，去项目中那么写试试，第二天就被开除，自以为很高大上，其实就是在给被人制造麻烦，现有的都不会更搞不懂，老师说实话 目前看了前几节，感觉该需要去解释说明的，一掠而过，让人感觉很遥远很模糊","like_count":3},{"had_liked":false,"id":163943,"user_name":"Geek_hx","can_delete":false,"product_type":"c1","uid":1547124,"ip_address":"","ucode":"99D3C9400C7B5C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dGa4C9GU5rcZYK2ibfSFh9J2bQ2IgLibGWdZH1ORESCKDCWdHiaMqicNawibqoWErBDyU8jVB68dUxbN8MM53BVqofA/132","comment_is_top":false,"comment_ctime":1576832318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14461734206","product_id":100023201,"comment_content":"读此篇后，觉得我还是先去重学JavaScript吧","like_count":3},{"had_liked":false,"id":103417,"user_name":"Jaykey","can_delete":false,"product_type":"c1","uid":1167992,"ip_address":"","ucode":"535FEA1292D290","user_header":"https://static001.geekbang.org/account/avatar/00/11/d2/78/1f1b45f9.jpg","comment_is_top":false,"comment_ctime":1560430884,"is_pvip":false,"replies":[{"id":"58945","content":"特别棒","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1574222448,"ip_address":"","comment_id":103417,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14445332772","product_id":100023201,"comment_content":"打印出来了989个对象，有很多是没有用过的，区分清楚了内置对象的差距，也知道了平时使用的一些方法是“构造器”","like_count":3,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453867,"discussion_content":"特别棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574222448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1373712,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epHy6UqquXA2aDQbnnjwmYPhhkHnWvlhgARScUWBP6MsHyElp0twVMHZ751H98tZbOSasSicJqLp8g/132","nickname":"杨仙儿","note":"","ucode":"EF571C9E8E5D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260857,"discussion_content":"900多是怎么搞出来的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588908441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1829111,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/e8/f7/1b45fa46.jpg","nickname":"wcf","note":"","ucode":"6E3B0A47B963E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384626,"discussion_content":"为啥我这跑出来是444个?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626682265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77305,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1386817,"ip_address":"","ucode":"12EFAA9502A574","user_header":"https://static001.geekbang.org/account/avatar/00/15/29/41/18d5e211.jpg","comment_is_top":false,"comment_ctime":1552903798,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14437805686","product_id":100023201,"comment_content":"本文 -用对象来模拟函数与构造器：函数对象与构造器对象- 结尾处，这样写道：<br>「如果 [[call]] 的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。」<br><br>在《Javascript高级程序设计》——第6章 面对对象的程序设计 p160-p161的寄生构造函数模式有类似讲解：<br>「构造函数在不返回值的情况下，默认会返回新对象实例。而通过在构造函数的末尾添加一个 return 语句，可以重写调用构造函数时返回的值。 」","like_count":3,"discussions":[{"author":{"id":1472233,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/e9/73ed6cc1.jpg","nickname":"x","note":"","ucode":"75FA829EA820AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78,"discussion_content":"返回基本类型好像还是返回对象实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561085460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65395,"user_name":"啊咩","can_delete":false,"product_type":"c1","uid":1376521,"ip_address":"","ucode":"D6CEFFFA27F10B","user_header":"https://static001.geekbang.org/account/avatar/00/15/01/09/a35710f0.jpg","comment_is_top":false,"comment_ctime":1549332452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14434234340","product_id":100023201,"comment_content":"原生对象语法用extends继承，可以举一个具体的例子嘛？我试了下继承Array是可以的呀","like_count":3},{"had_liked":false,"id":65215,"user_name":"困到清醒","can_delete":false,"product_type":"c1","uid":1384381,"ip_address":"","ucode":"1CD20C408C0BC9","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/bd/04100cb4.jpg","comment_is_top":false,"comment_ctime":1549116820,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14434018708","product_id":100023201,"comment_content":"有点蒙了，跟不上节奏了，我该停下来去补充知识了😷","like_count":3},{"had_liked":false,"id":68341,"user_name":"人生如茶","can_delete":false,"product_type":"c1","uid":1377979,"ip_address":"","ucode":"4BA94B5B04AB5E","user_header":"https://static001.geekbang.org/account/avatar/00/15/06/bb/f7b06ee6.jpg","comment_is_top":false,"comment_ctime":1550485856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140420448","product_id":100023201,"comment_content":"醍醐灌顶。","like_count":2},{"had_liked":false,"id":311887,"user_name":"小胖","can_delete":false,"product_type":"c1","uid":1098584,"ip_address":"","ucode":"B1C0EFDD821630","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/58/ba171e09.jpg","comment_is_top":false,"comment_ctime":1631522965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926490261","product_id":100023201,"comment_content":"原文：&quot;几乎所有这些构造器的能力都是无法用纯 JavaScript 代码实现的，它们也无法用 class&#47;extend 语法来继承。&quot;是否有待商榷。<br><br>ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承Array的例子。<br><br>class MyArray extends Array {<br>  constructor(...args) {<br>    super(...args);<br>  }<br>}<br><br>var arr = new MyArray();<br>arr[0] = 12;<br>arr.length &#47;&#47; 1<br><br>arr.length = 0;<br>arr[0] &#47;&#47; undefined<br><br>以上，引自http:&#47;&#47;caibaojian.com&#47;es6&#47;class.html","like_count":1},{"had_liked":false,"id":241380,"user_name":"Geek_5b50ea","can_delete":false,"product_type":"c1","uid":2089016,"ip_address":"","ucode":"A63CE4BAAF00F5","user_header":"","comment_is_top":false,"comment_ctime":1597282170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892249466","product_id":100023201,"comment_content":"老师您好，您在[[constrct]]执行过程中提到第一步为：以Object.prototype为原型创建一个新对象，这个说法是否值得商榷？我的理解是：函数对象的原型即f.prototype在函数创建时构建，其[[prototype]]指向Object.prototype，而new运算的执行过程或者说[[construct]]的执行过程的第一步应该是以f.prototype为原型创建一个新对象。","like_count":1},{"had_liked":false,"id":119218,"user_name":"突围","can_delete":false,"product_type":"c1","uid":1090414,"ip_address":"","ucode":"03E865CC8A6F2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/6e/52580973.jpg","comment_is_top":false,"comment_ctime":1564539166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859506462","product_id":100023201,"comment_content":"这块完全不明白，到底哪些对象分类有哪些？能多举个例子吗？还有就是[call]属性和[construtor]属性是啥？是我底子太弱了吗？","like_count":1},{"had_liked":false,"id":99927,"user_name":"G","can_delete":false,"product_type":"c1","uid":1547293,"ip_address":"","ucode":"50D8E1ADAE0330","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/1d/34c96367.jpg","comment_is_top":false,"comment_ctime":1559359643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854326939","product_id":100023201,"comment_content":"原生构造函数在es6里面是可以被class extend继承的，但无法用原型链继承","like_count":1},{"had_liked":false,"id":87242,"user_name":"null","can_delete":false,"product_type":"c1","uid":1376074,"ip_address":"","ucode":"A11CBBAF3DC659","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlllSKrpQkhZoESKuw2ibO0zbaoVfOUN7M1iaIM2sRzHRaqbk1VS2sL5s66WvnJzVicmdAQa4NaVpicQ/132","comment_is_top":false,"comment_ctime":1555552240,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5850519536","product_id":100023201,"comment_content":"    console.log(new Date); &#47;&#47; 1 ====结果和下面一致<br>    console.log(Date())<br>","like_count":1,"discussions":[{"author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250857,"discussion_content":"试试看把console.log去掉，上面的是Date对象，下面得到的是一个字符串","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588045092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744499,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9e/73/edd5724f.jpg","nickname":"anruoyefan","note":"","ucode":"22544CBDF1DBCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205779,"discussion_content":"前者拿到的是一个对象，你可以接着使用Date的方法，比如fullYear，但是后者不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584341488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226692,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b7/c4/422813bf.jpg","nickname":"蒲公英","note":"","ucode":"076183447A1D9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2098,"discussion_content":"类型不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563257779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85857,"user_name":"FPerW","can_delete":false,"product_type":"c1","uid":1485812,"ip_address":"","ucode":"286C3C847C16A8","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/f4/086d6ac6.jpg","comment_is_top":false,"comment_ctime":1555259859,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5850227155","product_id":100023201,"comment_content":"老师您好，有个疑问想请教一下，为啥基于对象关联风格的面向对象并不是像模拟类的行为的面向对象那么流行呢？原型委托这种的不是应该更符合JS语言本身的设计嘛？类似这种<br>var father = {<br>  a: 1,<br>  fn(): {<br>    return 123;<br>  }<br>}<br>var child = Object.create(father);<br>child.fn(); &#47;&#47; 123<br>","like_count":1,"discussions":[{"author":{"id":1744499,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9e/73/edd5724f.jpg","nickname":"anruoyefan","note":"","ucode":"22544CBDF1DBCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205781,"discussion_content":"js本身设计的时候就是基于原型来设计的，不过是后来被领导规定采用java等的基于类的面向对象，之前的文章有写到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584341613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73547,"user_name":"岩盐言颜炎研延沿","can_delete":false,"product_type":"c1","uid":1231478,"ip_address":"","ucode":"329CEA7C6B9398","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/76/f807e7e8.jpg","comment_is_top":false,"comment_ctime":1551923462,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5846890758","product_id":100023201,"comment_content":"老师您好，我有个问题想请教<br>在固有对象中提到的ecma标准的链接中列举出的Well-Known Intrinsic Objects<br>好像基本和您在原生对象中列举的表格差不多？<br>是说明这固有对象和原生对象基本一致吗","like_count":1,"discussions":[{"author":{"id":1564786,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e0/72/6e0314e7.jpg","nickname":"Ace","note":"","ucode":"C77191A6B18845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317114,"discussion_content":"是的，我也没明白固有对象和原生对象的区别。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603506905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71049,"user_name":"花骨朵","can_delete":false,"product_type":"c1","uid":1073653,"ip_address":"","ucode":"0F193E15CF578E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f5/3a36af36.jpg","comment_is_top":false,"comment_ctime":1551254431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846221727","product_id":100023201,"comment_content":"老师，前一节的思考题可以在讲后面一节前稍微讲一下吗？","like_count":1},{"had_liked":false,"id":68628,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1550562329,"is_pvip":false,"replies":[{"id":"25771","content":"function MyNumber(){<br>}<br>MyNumber.prototype = new Number;<br><br>是指这个不能工作。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1551421965,"ip_address":"","comment_id":68628,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5845529625","product_id":100023201,"comment_content":"这个“原型继承方法”不能正常工作，是什么意思？我放狗搜了一下，发现，Number对象仍然可以用prototype属性来添加方法和属性啊","like_count":1,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439763,"discussion_content":"function MyNumber(){\n}\nMyNumber.prototype = new Number;\n\n是指这个不能工作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551421965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2813740,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/ef/2c/9f96ded7.jpg","nickname":"Ha0ran","note":"","ucode":"A36AD84DAC48B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573920,"discussion_content":"可是没有报错哎，能详细说以下嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653730021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":439763,"ip_address":""},"score":573920,"extra":""}]}]},{"had_liked":false,"id":65152,"user_name":"Izayoizuki","can_delete":false,"product_type":"c1","uid":1145922,"ip_address":"","ucode":"45E89E1257998A","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/42/bcdbaaf7.jpg","comment_is_top":false,"comment_ctime":1549078199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844045495","product_id":100023201,"comment_content":"无new运算符号, Object.prototype.constructor()算么","like_count":1},{"had_liked":false,"id":65096,"user_name":"leslee","can_delete":false,"product_type":"c1","uid":1384326,"ip_address":"","ucode":"DB1CBF9F8D16BF","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/86/3a7eeac4.jpg","comment_is_top":false,"comment_ctime":1549039722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844007018","product_id":100023201,"comment_content":"json.parse, createElement , object.create, object.assign , ","like_count":1},{"had_liked":false,"id":358044,"user_name":"🌙月亮","can_delete":false,"product_type":"c1","uid":2082956,"ip_address":"山东","ucode":"CF90DE9A5DC389","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c8/8c/5e4fdf7f.jpg","comment_is_top":false,"comment_ctime":1663845170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663845170","product_id":100023201,"comment_content":"文中的链接失效了吗","like_count":0},{"had_liked":false,"id":352175,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1319145,"ip_address":"","ucode":"B91EAA5C4004D6","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/e9/0cc91f97.jpg","comment_is_top":false,"comment_ctime":1658425137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658425137","product_id":100023201,"comment_content":"需细读、多读几遍","like_count":0},{"had_liked":false,"id":350693,"user_name":"俊俊大魔王","can_delete":false,"product_type":"c1","uid":1385888,"ip_address":"","ucode":"9C412A754F9175","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqoE3yrSfHn6EjHRjkNK2Z7K1yS6UiaqAJkkxRZWszAM1YFun7YnF0Fcib8P15h8GafWrXPVM3pKH2A/132","comment_is_top":false,"comment_ctime":1657099787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657099787","product_id":100023201,"comment_content":"我看很多地方都说内置对象是原生对象的子集，有点晕","like_count":0},{"had_liked":false,"id":350692,"user_name":"俊俊大魔王","can_delete":false,"product_type":"c1","uid":1385888,"ip_address":"","ucode":"9C412A754F9175","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqoE3yrSfHn6EjHRjkNK2Z7K1yS6UiaqAJkkxRZWszAM1YFun7YnF0Fcib8P15h8GafWrXPVM3pKH2A/132","comment_is_top":false,"comment_ctime":1657099662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657099662","product_id":100023201,"comment_content":"这个内置对象和原生对象的包含关系，我看有的地方是反过来的；<br>老师可以解释一下么","like_count":0},{"had_liked":false,"id":341588,"user_name":"news","can_delete":false,"product_type":"c1","uid":2541940,"ip_address":"","ucode":"6F7D5D421244D0","user_header":"https://static001.geekbang.org/account/avatar/00/26/c9/74/1eb4cfe2.jpg","comment_is_top":false,"comment_ctime":1649727230,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649727230","product_id":100023201,"comment_content":"总结，js对象分类：宿主对象、内置固有对象、内置原生对象、内置普通对象","like_count":0},{"had_liked":false,"id":337484,"user_name":"Geek_58fcf2","can_delete":false,"product_type":"c1","uid":2918421,"ip_address":"","ucode":"3B052EBC012E8B","user_header":"","comment_is_top":false,"comment_ctime":1646843876,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646843876","product_id":100023201,"comment_content":"1.宿主对象<br>2.内置对象<br>2.1固有对象<br>2.2原生对象<br>2.3普通对象","like_count":0},{"had_liked":false,"id":337052,"user_name":"周胜","can_delete":false,"product_type":"c1","uid":1974266,"ip_address":"","ucode":"BAE27CC6F67BB9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erw3icVIkgTwYx5H9gwOSHdVibjxvzrmSe8G3Cg7kOicjibkHaDeibkntE4kdhibj4KHM0zCzM07YlbbteA/132","comment_is_top":false,"comment_ctime":1646568810,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646568810","product_id":100023201,"comment_content":"JavaScript对象可以分成宿主对象和内置对象，而内置对象又分为固有对象、原生对象以及普通对象。宿主对象是指运行环境提供的对象，比如浏览器环境提供的window，node环境提供的Global。固有对象是指运行之前就创建好的对象，比如isNaN、eval等，原生对象是指JavaScript语言提供的对象，比如Array，普通对象是指使用构造器创建的对象，比如new Array。另外，有私有属性[[construct]]的对象称为构造对象，可以创建实例，有私有属性[[call]]的对象称为函数对象，可以作为方法调用，宿主和内置对象中对这两个属性的实现有所不同，比如Image对象只能作为构造对象创建实例，不能作为方法调用","like_count":0},{"had_liked":false,"id":313572,"user_name":"「前端天地」公众号","can_delete":false,"product_type":"c1","uid":2218558,"ip_address":"","ucode":"D1A4F37BA50569","user_header":"https://static001.geekbang.org/account/avatar/00/21/da/3e/e0d073ca.jpg","comment_is_top":false,"comment_ctime":1632530717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632530717","product_id":100023201,"comment_content":"[[construct]]的执行过程不是以Object.prototype为原型创建新对象，而是以构造函数的原型吧","like_count":0},{"had_liked":false,"id":307533,"user_name":"学不动了","can_delete":false,"product_type":"c1","uid":1235562,"ip_address":"","ucode":"6855C982ECC3A8","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/6a/6b96edbd.jpg","comment_is_top":false,"comment_ctime":1629133856,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629133856","product_id":100023201,"comment_content":"哈哈，看完挺有收获的～就是要看个几遍才能消化","like_count":0},{"had_liked":false,"id":292268,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1620746593,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620746593","product_id":100023201,"comment_content":"关于获取全部的固有对象，从 MDN 参考拿到所有的 全局对象，扣除 globalThis，arguments，internationalization 及 web assembly 相关的对象。 https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;JavaScript&#47;Reference&#47;Global_Objects<br>打印出数量来<br>console.log(set.size) &#47;&#47; 454","like_count":0},{"had_liked":false,"id":292226,"user_name":"Lin","can_delete":false,"product_type":"c1","uid":2614980,"ip_address":"","ucode":"CCDD8D2F81178E","user_header":"https://static001.geekbang.org/account/avatar/00/27/e6/c4/f5f4bf94.jpg","comment_is_top":false,"comment_ctime":1620727911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620727911","product_id":100023201,"comment_content":"[eval, isFinite, isNaN, parseFloat, parseInt, decodeURI, decodeURIComponent, encodeURI, encodeURIComponent, Array, Date, RegExp, Promise, Proxy, Map, WeakMap, Set, WeakSet, Function, Boolean, String, Number, Symbol, Object, Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError, ArrayBuffer, SharedArrayBuffer, DataView, Float32Array, Float64Array, Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Uint8ClampedArray, Atomics, JSON, Math, Reflect].reduce((set, obj) =&gt; (f =&gt; (x =&gt; f(v =&gt; x(x)(v)))(x =&gt; f(v =&gt; x(x)(v))))(f =&gt; obj =&gt; (set.has(obj) || (set.add(obj), Object.values(Object.getOwnPropertyDescriptors(obj)).flatMap(o =&gt; [[&#39;value&#39;, e =&gt; (e !== null &amp;&amp; typeof e === &quot;object&quot;) || typeof e === &quot;function&quot;], &#39;get&#39;, &#39;set&#39;].map(x =&gt; Array.isArray(x) ? (x[1](o[x[0]]) &amp;&amp; o[x[0]]) : o[x])).filter(Boolean).forEach(f))) || set)(obj) , new Set())","like_count":0},{"had_liked":false,"id":287777,"user_name":"你好，阳光","can_delete":false,"product_type":"c1","uid":2145095,"ip_address":"","ucode":"1A2F487C57F7D9","user_header":"https://static001.geekbang.org/account/avatar/00/20/bb/47/b60ae3eb.jpg","comment_is_top":false,"comment_ctime":1618146663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618146663","product_id":100023201,"comment_content":"我按照老师最后给出的代码在浏览器中运行发现有名称重复的函数对象，比如valueOf()和toString()重复出现了很多次，老师这些应该还是不同的对象吧？（内存地址不同）","like_count":0},{"had_liked":false,"id":286006,"user_name":"胡永","can_delete":false,"product_type":"c1","uid":1200543,"ip_address":"","ucode":"6C8BA1E0BED9C0","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/9f/1840385e.jpg","comment_is_top":false,"comment_ctime":1617100679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617100679","product_id":100023201,"comment_content":"class<br>extends<br>Object.create<br>Object.setPrototypeOf<br>Object.getPrototypeOf<br>{}","like_count":0},{"had_liked":false,"id":282147,"user_name":"Alan He","can_delete":false,"product_type":"c1","uid":2033513,"ip_address":"","ucode":"A0780F4619D388","user_header":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","comment_is_top":false,"comment_ctime":1615107391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615107391","product_id":100023201,"comment_content":"不得不说，自己会的太少了，惭愧，加油吧。","like_count":0},{"had_liked":false,"id":271223,"user_name":"banyouxia","can_delete":false,"product_type":"c1","uid":2182949,"ip_address":"","ucode":"6C5D0C426B412D","user_header":"","comment_is_top":false,"comment_ctime":1609480449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609480449","product_id":100023201,"comment_content":"如果我们的构造器返回了一个新的对象，那么 new 创建的新对象就变成了一个构造函数之外完全无法访问的对象，这一定程度上可以实现“私有”。这句话该怎么理解？老师能不能讲的通俗易懂一些","like_count":0},{"had_liked":false,"id":255729,"user_name":"半橙汁","can_delete":false,"product_type":"c1","uid":1477902,"ip_address":"","ucode":"BB93BB9CCB7FA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","comment_is_top":false,"comment_ctime":1603419060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603419060","product_id":100023201,"comment_content":"刷完专栏就得去看高程，不然好多门门道道搞不机敏~","like_count":0},{"had_liked":false,"id":245337,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1598917825,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598917825","product_id":100023201,"comment_content":"我发现老师喜欢直接用new+构造器名来使用，这个有点新颖，但不符合我们平时的使用习惯，会造成带参构造器与无参构造器的书写风格不一致。请问老师怎么看?","like_count":0,"discussions":[{"author":{"id":1564786,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e0/72/6e0314e7.jpg","nickname":"Ace","note":"","ucode":"C77191A6B18845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317105,"discussion_content":"这点同好奇，可能老师想突出是“构造器”，而不是“构造函数”吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603506052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245336,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1598917613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598917613","product_id":100023201,"comment_content":"原来class中定义私有属性可以在构造器返回闭包，学到了！","like_count":0},{"had_liked":false,"id":244848,"user_name":"一丁目","can_delete":false,"product_type":"c1","uid":1581163,"ip_address":"","ucode":"F7B6F8B688CD53","user_header":"https://static001.geekbang.org/account/avatar/00/18/20/6b/6cef2782.jpg","comment_is_top":false,"comment_ctime":1598699504,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598699504","product_id":100023201,"comment_content":"课后的小实验里，“我们使用广度优先搜索，查找这些对象所有的属性和 Getter&#47;Setter，就可以获得 JavaScript 中所有的固有对象。”关于这句话。为什么这些对象的Getter&#47;Setter也算是固有对象？求解","like_count":0,"discussions":[{"author":{"id":1163286,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/16/30483b7e.jpg","nickname":"H。","note":"","ucode":"8B1D8E756F933C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332052,"discussion_content":"built-in object 定义：\nobject specified and supplied by an ECMAScript implementation\n\nhttp://www.ecma-international.org/ecma-262/6.0/#sec-built-in-object\n\n一些特定的 built-in object 包括：\n- One, the global object\n- Others are accessible as initial properties of the global object or indirectly as properties of accessible built-in objects.\n\nhttp://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-standard-built-in-objects\ngetter/setter 属于 Others。（函数也是对象）\n\nbuilt-in object 和 intrinsic object 大部分场合可以当同一个东西理解。如果说硬要区分的话，就如作者所分类的，built-in object 包括自动创建的 intrinsic object 和使用字面量和 built-in 构造器人为手动创建的对象。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607053084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214655,"user_name":"daisy小仙女","can_delete":false,"product_type":"c1","uid":1504233,"ip_address":"","ucode":"07BC6A944505A1","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/e9/3296bf51.jpg","comment_is_top":false,"comment_ctime":1588777005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588777005","product_id":100023201,"comment_content":"var a = Object.assign({});<br>var a = [];<br>var a = document.createElement(&#39;p&#39;);<br>var a= Object.create({});<br>var a  = Date.now;<br>var a = JSON.parse(&#39;{}&#39;);<br>var a = () =&gt; { return {} }","like_count":0},{"had_liked":false,"id":208412,"user_name":"Yully","can_delete":false,"product_type":"c1","uid":1254946,"ip_address":"","ucode":"66034995A6282F","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/22/dd505e6d.jpg","comment_is_top":false,"comment_ctime":1587353284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587353284","product_id":100023201,"comment_content":"var o = {}<br>var o = function(){}​<br>var o​=Object.create()<br>var o=Object.assign()<br>var o=Object(is not a obj)​​","like_count":0},{"had_liked":false,"id":203347,"user_name":"子铭","can_delete":false,"product_type":"c1","uid":1156419,"ip_address":"","ucode":"221383803E5732","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/43/d32dd35a.jpg","comment_is_top":false,"comment_ctime":1586177777,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1586177777","product_id":100023201,"comment_content":"function cls(){    this.a = 100;    return {        getValue:() =&gt; this.a    }}var o = new cls;o.getValue(); &#47;&#47;100&#47;&#47;a在外面永远无法访问到<br>这一段没看明白怎么回事，有人知道吗","like_count":0,"discussions":[{"author":{"id":1126631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","nickname":"wingsico","note":"","ucode":"A91CB7B0497708","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223541,"discussion_content":"具体没明白什么地方？\n通过返回对象的方式，就不会返回this指向的对象。也就无法获取到this上的数据，只能通过闭包的方式来取。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586234446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252998,"discussion_content":"题中\no.a是\nundefined，\n如下是不设置返回新对象，默认把this指向新创建的实例对象\nfunction cls(){ this.a = 100;}var o = new cls;\no.a是\n100\n这不变成私有变量，外界无法访问了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588209078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194517,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1585064405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585064405","product_id":100023201,"comment_content":"希望可以有页面内小标题跳转的功能，至少pc端","like_count":0},{"had_liked":false,"id":186808,"user_name":"Change","can_delete":false,"product_type":"c1","uid":1161260,"ip_address":"","ucode":"FB60D2378C9F02","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/2c/0f7baf3a.jpg","comment_is_top":false,"comment_ctime":1583931946,"is_pvip":false,"discussion_count":2,"race_medal":2,"score":"1583931946","product_id":100023201,"comment_content":"ShareArrayBuffer,Atomics两个对象在终端 js 环境中运行显示没有定义，在浏览器中运行可以正常显示。<br>问题一：按照文章提出的固有对象和宿主对象的定义以上两个对象属于固有对象为何在终端 js环境显示没有定义。<br>问题二：老师代码中数组中出现两次encodeURI, encodeURIComponent是多写了还是什么原因？<br>按照老师的原版代码计算的是1293个，去掉encodeURI, encodeURIComponent,是1289个。<br>","like_count":0,"discussions":[{"author":{"id":1126631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","nickname":"wingsico","note":"","ucode":"A91CB7B0497708","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222145,"discussion_content":"1. 何为固有对象，这个是作为类库，相当于是环境帮你生成的一些前置对象，那这个可能是环境生成，也可能是js引擎生成。在终端中是node环境，自然会有所不同。固有对象、宿主对象、原生对象这几个东西是分类，但不是没有交集，一个对象可以属于固有对象或者宿主对象\n2. 一个是decode一个是encode。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586099243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1161260,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/2c/0f7baf3a.jpg","nickname":"Change","note":"","ucode":"FB60D2378C9F02","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1126631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","nickname":"wingsico","note":"","ucode":"A91CB7B0497708","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":222160,"discussion_content":"哦哦，原来是这样啊明白些了，感谢感谢。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586100206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222145,"ip_address":""},"score":222160,"extra":""}]}]},{"had_liked":false,"id":183371,"user_name":"窗外明月","can_delete":false,"product_type":"c1","uid":1485706,"ip_address":"","ucode":"D4C0BA5CC496CA","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/8a/e1a8b835.jpg","comment_is_top":false,"comment_ctime":1583029887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583029887","product_id":100023201,"comment_content":"老师，location.href可以重写吗","like_count":0},{"had_liked":false,"id":179557,"user_name":"Rainnut","can_delete":false,"product_type":"c1","uid":1317034,"ip_address":"","ucode":"4BB3DDC637C9C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/aa/b1dacb64.jpg","comment_is_top":false,"comment_ctime":1582031015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582031015","product_id":100023201,"comment_content":"怎么console查看一个对象是否有[[call]]这个私有属性？","like_count":0},{"had_liked":false,"id":147322,"user_name":"非同凡想","can_delete":false,"product_type":"c1","uid":1442963,"ip_address":"","ucode":"9D1D498339A892","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/93/d1e9312f.jpg","comment_is_top":false,"comment_ctime":1572858857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572858857","product_id":100023201,"comment_content":"第一次看不理解，只能死记。现在顺带着规范一起看更能明白点。<br>比如关于new操作的构造器规范：<br>https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-new-operator<br>https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-construct","like_count":0},{"had_liked":false,"id":140758,"user_name":"LaMer","can_delete":false,"product_type":"c1","uid":1632979,"ip_address":"","ucode":"584028E951837E","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/d3/42566a75.jpg","comment_is_top":false,"comment_ctime":1571043757,"is_pvip":false,"replies":[{"id":"58907","content":"不是什么重要内容，就是标准会用这个私有字段存一些东西，但是让你访问不到，你可以理解为对象的内部状态。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1574220087,"ip_address":"","comment_id":140758,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571043757","product_id":100023201,"comment_content":"这些构造器创建的对象多数使用了私有字段, 例如：Error: [[ErrorData]]。  [[ErrorData]]指的是什么  不明白 可以说的清楚一些吗  望老师回答下","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470542,"discussion_content":"不是什么重要内容，就是标准会用这个私有字段存一些东西，但是让你访问不到，你可以理解为对象的内部状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574220087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135272,"user_name":"Hello World 工程师","can_delete":false,"product_type":"c1","uid":1643366,"ip_address":"","ucode":"E5F694B63BD0C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/13/66/bfa42cb0.jpg","comment_is_top":false,"comment_ctime":1569115450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569115450","product_id":100023201,"comment_content":"现在可以使用 class&#47;extend来继承原生对象的构造器了","like_count":0},{"had_liked":false,"id":127501,"user_name":"卡洛斯(๑Ő௰Ő๑)","can_delete":false,"product_type":"c1","uid":1330852,"ip_address":"","ucode":"6F311BF03B76FD","user_header":"https://static001.geekbang.org/account/avatar/00/14/4e/a4/433305bb.jpg","comment_is_top":false,"comment_ctime":1566729415,"is_pvip":false,"replies":[{"id":"54053","content":"它们的行为是“执行同一段代码”","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1570773452,"ip_address":"","comment_id":127501,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566729415","product_id":100023201,"comment_content":"winter 你好，<br>对于用户使用 function 语法或者 Function 构造器创建的对象来说，[[call]] 和 [[construct]] 行为总是相似的，它们执行同一段代码。<br><br>function f(){<br> return 1;<br>}<br>&#47;&#47; 把 f 作为函数调用<br>var v = f(); &#47;&#47; 1<br>&#47;&#47; 把 f 作为构造器调用<br>var o = new f(); &#47;&#47; {}<br><br><br>代码执行的结果是不同，函数调用返回的是 1，构造器调用返回的一个对象。<br>这里的行为是指什么呢，为什么又总是相似的呢。<br>相似是指 函数调用和构造器调用，都能被调用？还是指都调用的同一个代码？","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464524,"discussion_content":"它们的行为是“执行同一段代码”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570773452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114622,"user_name":"稳当的","can_delete":false,"product_type":"c1","uid":1586879,"ip_address":"","ucode":"6C47D9F2FEC47D","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/bf/93b7b679.jpg","comment_is_top":false,"comment_ctime":1563352232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563352232","product_id":100023201,"comment_content":"Object.create()<br>Object.assign()<br>JSON.parse()<br>a={}<br>document.createElement()","like_count":0},{"had_liked":false,"id":105477,"user_name":"x","can_delete":false,"product_type":"c1","uid":1472233,"ip_address":"","ucode":"75FA829EA820AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/e9/73ed6cc1.jpg","comment_is_top":false,"comment_ctime":1561011193,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1561011193","product_id":100023201,"comment_content":"关于new Date可以用typeof(new Date) &#47;&#47;打印出来是object","like_count":0},{"had_liked":false,"id":101104,"user_name":"令狐洋葱","can_delete":false,"product_type":"c1","uid":1549519,"ip_address":"","ucode":"8AFD005B62E020","user_header":"https://static001.geekbang.org/account/avatar/00/17/a4/cf/a082eae7.jpg","comment_is_top":false,"comment_ctime":1559718468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559718468","product_id":100023201,"comment_content":"var o = {}<br>var o = function(){}<br>&#47;&#47; 装箱<br>var o = (function() {return this}).call(1)<br>var o = Object.create({})<br>var o = document.createElement(&#39;div&#39;)<br>","like_count":0},{"had_liked":false,"id":91372,"user_name":"Mayel","can_delete":false,"product_type":"c1","uid":1510320,"ip_address":"","ucode":"CBD0980CC2A817","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/OSsv2IIKfqbfF5d3UDkwDu1yZH2ULP2FlYLsX7yiak6xXicBo9CI2JzPEYRx9zwnypzs6ZzFiaIuKsrSVPtdJ7GfA/132","comment_is_top":false,"comment_ctime":1557018500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557018500","product_id":100023201,"comment_content":"当做命名空间的对象，console 算不算？","like_count":0},{"had_liked":false,"id":86996,"user_name":"null","can_delete":false,"product_type":"c1","uid":1376074,"ip_address":"","ucode":"A11CBBAF3DC659","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlllSKrpQkhZoESKuw2ibO0zbaoVfOUN7M1iaIM2sRzHRaqbk1VS2sL5s66WvnJzVicmdAQa4NaVpicQ/132","comment_is_top":false,"comment_ctime":1555494219,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1555494219","product_id":100023201,"comment_content":"宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为**完全由宿主环境决定**。<br><br>但是下面对宿主对象的解释又是：实际上，这个全局对象 window 上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境<br><br>并不像上面说的 **完全由宿主环境决定**","like_count":0,"discussions":[{"author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250862,"discussion_content":"说的是宿主对象的行为**完全由宿主环境决定**。下面说的是全局对象包括来自JS的和来自浏览器环境的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588045632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85078,"user_name":"Geek_0bb537","can_delete":false,"product_type":"c1","uid":1488361,"ip_address":"","ucode":"BE1A16372FC814","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDSY5xBJ2PH4lqNtWJqhe1HcYkP7S9ibAXChONgCBX5pJ2gaU3icXhltQgqhzDyML3EzFicxPeE4Tiag/132","comment_is_top":false,"comment_ctime":1554973632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554973632","product_id":100023201,"comment_content":"有一种分法是宿主对象、本地对象、内置对象 他说这个内置对象只有两个Global和Math，对应你说的在其它js运行前被创建 我有点乱啊 ","like_count":0},{"had_liked":false,"id":70957,"user_name":"丁丁丁丁丁大树。","can_delete":false,"product_type":"c1","uid":1351418,"ip_address":"","ucode":"9145022F723883","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/fa/8d206a46.jpg","comment_is_top":false,"comment_ctime":1551233429,"is_pvip":false,"replies":[{"id":"25926","content":"用双括号的属性是你没法用JS代码访问的私有属性，你得用C++代码调用JS引擎才能看到这些属性。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1551432611,"ip_address":"","comment_id":70957,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551233429","product_id":100023201,"comment_content":"winter老师你好，我对08节的内容有一个疑问，老师有空的话请为学生解惑<br>文中你有一句话“构造器对象的定义是：具有私有字段 [[construct]]”<br>我的理解是带有constructor的对象就是构造器对象，所以我做了下面这个实验<br>var obj = {constructor:function(){return {say:function(){alert(&#39;hello&#39;)}}}}<br>var ins = new obj() <br>但是会报错obj不是一个construct，<br>我想问老师是不是我理解错了？<br>","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440919,"discussion_content":"用双括号的属性是你没法用JS代码访问的私有属性，你得用C++代码调用JS引擎才能看到这些属性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551432611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70732,"user_name":"null","can_delete":false,"product_type":"c1","uid":1376074,"ip_address":"","ucode":"A11CBBAF3DC659","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlllSKrpQkhZoESKuw2ibO0zbaoVfOUN7M1iaIM2sRzHRaqbk1VS2sL5s66WvnJzVicmdAQa4NaVpicQ/132","comment_is_top":false,"comment_ctime":1551170946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551170946","product_id":100023201,"comment_content":"`window` 上的应该都是把","like_count":0},{"had_liked":false,"id":67907,"user_name":"让时间说真话","can_delete":false,"product_type":"c1","uid":1387656,"ip_address":"","ucode":"5C86450864189F","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/88/2a7fe1a9.jpg","comment_is_top":false,"comment_ctime":1550320865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550320865","product_id":100023201,"comment_content":"1使用对象自面量<br>const a={}<br>2Object.create（）方法<br>const a=bject.create（）<br>","like_count":0},{"had_liked":false,"id":67526,"user_name":"Miss","can_delete":false,"product_type":"c1","uid":1377720,"ip_address":"","ucode":"85DE3D66BE0FF5","user_header":"https://static001.geekbang.org/account/avatar/00/15/05/b8/35d8e0e2.jpg","comment_is_top":false,"comment_ctime":1550192954,"is_pvip":false,"replies":[{"id":"24320","content":"这是两个私有方法。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550551341,"ip_address":"","comment_id":67526,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550192954","product_id":100023201,"comment_content":"在讲到函数对象和构造器对象时[[call]]和[[construct]] 指的是？","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439231,"discussion_content":"这是两个私有方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550551341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67507,"user_name":"小春哥","can_delete":false,"product_type":"c1","uid":1392947,"ip_address":"","ucode":"9C08487EAA9797","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/33/f9dd3f1a.jpg","comment_is_top":false,"comment_ctime":1550188472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550188472","product_id":100023201,"comment_content":"老师讲的很好，我虚心学习。","like_count":0},{"had_liked":false,"id":67133,"user_name":"阿汤哥","can_delete":false,"product_type":"c1","uid":1204393,"ip_address":"","ucode":"FBF3943D16352C","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/a9/6d2137dc.jpg","comment_is_top":false,"comment_ctime":1550101907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550101907","product_id":100023201,"comment_content":"得多看几遍了，第一遍完全懵逼","like_count":0},{"had_liked":false,"id":66860,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1027095,"ip_address":"","ucode":"52CED1B388E701","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/17/92b5114f.jpg","comment_is_top":false,"comment_ctime":1550031050,"is_pvip":false,"replies":[{"id":"23836","content":"可以模拟，但是性能不行。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550147506,"ip_address":"","comment_id":66860,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550031050","product_id":100023201,"comment_content":"proxy模拟array怎样？","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438949,"discussion_content":"可以模拟，但是性能不行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550147506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66729,"user_name":"九","can_delete":false,"product_type":"c1","uid":1065946,"ip_address":"","ucode":"4A4C0F8295CA96","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/da/0702102a.jpg","comment_is_top":false,"comment_ctime":1549988167,"is_pvip":false,"replies":[{"id":"23825","content":"执行的是同一段代码，但是除了执行代码，[[construct]]还做了很多别的事情，紧接着这段就讲了啊。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550142807,"ip_address":"","comment_id":66729,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1549988167","product_id":100023201,"comment_content":"当然了，用户用 function 关键字创建的函数必定同时是函数和构造器。不过，它们表现出来的行为效果却并不相同。<br><br>对于用户使用 function 语法或者 Function 构造器创建的对象来说，[[call]] 和 [[construct]] 行为总是相似的，它们执行同一段代码。<br><br>请问这里的意思是，call 和 construct 它们虽然执行同一段代码，但是行为效果是不同的？感觉读起来似乎有歧义……<br>","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438886,"discussion_content":"执行的是同一段代码，但是除了执行代码，[[construct]]还做了很多别的事情，紧接着这段就讲了啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550142807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330852,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4e/a4/433305bb.jpg","nickname":"卡洛斯(๑Ő௰Ő๑)","note":"","ucode":"6F311BF03B76FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6156,"discussion_content":"那这里只是执行同一段代码吧，跟行为相似好像没有关系的。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566730153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65480,"user_name":"Evo","can_delete":false,"product_type":"c1","uid":1018925,"ip_address":"","ucode":"3816DFEE1C5BC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/2d/78e39300.jpg","comment_is_top":false,"comment_ctime":1549410269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549410269","product_id":100023201,"comment_content":"有些表述是不是有些歧义，如&quot;内置对象·原生对象&quot; 一节中，第一段最后一句：“我把原生对象分成了以下几个种类” 应该是“我把原生对象的构造器分成了以下几个种类”。 毕竟表中指的是具体的内置类型(构造器)","like_count":0},{"had_liked":false,"id":65319,"user_name":"Mario＿20","can_delete":false,"product_type":"c1","uid":1386586,"ip_address":"","ucode":"394A57F131BA31","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erHzX39iazGeL1k36gUOUrSXXhYbgs7MsiafFwibWRhGNPC8fxof3iaOia7IkBvZ80UxdiaBO1ZzPhpwCYg/132","comment_is_top":false,"comment_ctime":1549241900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549241900","product_id":100023201,"comment_content":"新年快乐","like_count":0},{"had_liked":false,"id":65246,"user_name":"hhk","can_delete":false,"product_type":"c1","uid":1138826,"ip_address":"","ucode":"72EC677FBDC79B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gvfibNc3Bol6DzLMG5ia9wSLVYseoq326iae7TczmgmBj9u3Jwt8c0hl9KSzY4GNTFn0ic9m1ibzicqJ3aGzeQemec2Q/132","comment_is_top":false,"comment_ctime":1549159309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549159309","product_id":100023201,"comment_content":"看了小实验的代码才知道固有对象是什么意思，这些词真的好讨厌（但感觉也是没办法的事）","like_count":0}]}