{"id":719239,"title":"22｜易速鲜花聊天客服机器人的开发（上）","content":"<p>你好，我是黄佳，欢迎来到LangChain实战课！</p><p>上节课，咱们的易速鲜花人脉工具成功上线。市场部的朋友们用了都说好。</p><p>这节课，我们继续为易速鲜花市场部、销售部和客服部门的员工，以及易速鲜花的广大用户来开发一个聊天机器人。</p><h2>“聊天机器人”项目说明</h2><p>聊天机器人（Chatbot）是LLM和LangChain的核心用例之一，很多人学习大语言模型，学习LangChain，就是为了开发出更好的、更能理解用户意图的聊天机器人。聊天机器人的核心特征是，它们可以进行长时间的对话并访问用户想要了解的信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/b1/0dbb30e1ac6d6dd22eaf0e7bf3b5e4b1.jpg?wh=1201x566\" alt=\"\"></p><p>如图所示，聊天机器人设计过程中的核心组件包括：</p><ul>\n<li>聊天模型：这是对话的基础，它更偏向于自然的对话风格。你可以参考LangChain相关文档中所支持的聊天模型的列表。尽管大模型（LLM）也可以应用于聊天机器人，但专用的聊天模型（Chat Model）更适合对话场景。</li>\n<li>提示模板：帮助你整合默认消息、用户输入、历史交互以及检索时需要的上下文。</li>\n<li>记忆：它允许机器人记住与用户之间的先前互动，增强对话连贯性。</li>\n<li>检索器：这是一个可选组件，特别适合那些需要提供特定领域知识的机器人。</li>\n</ul><p>整体来说，聊天机器人的关键在于其记忆和检索能力，记忆使聊天机器人能够记住过去的交互，而检索则为聊天机器人提供最新的、特定于领域的信息。</p><!-- [[[read_end]]] --><h2>项目的技术实现细节</h2><p>在这个聊天机器人的实现过程中，我们将遵循敏捷开发的原则。先集中精力开发一个基础版本的机器人，实现最核心的功能，比如说能够聊天就可以了。然后，再逐步加入更多的功能，例如，能够基于易速鲜花的企业知识库进行检索，比如，用户可以输入订单号来查询订单状态，或询问如何退货等常见问题。</p><p>这个项目的具体技术实现步骤，这里简述一下。</p><p><strong>第一步：</strong>通过LangChain的ConversationChain，实现一个最基本的聊天对话工具。</p><p><strong>第二步：</strong>通过LangChain中的记忆功能，让这个聊天机器人能够记住用户之前所说的话。</p><p><strong>第三步：</strong>通过LangChain中的检索功能，整合易速鲜花的内部文档资料，让聊天机器人不仅能够基于自己的知识，还可以基于易速鲜花的业务流程，给出专业的回答。</p><p><strong>第四步（可选）：</strong>通过LangChain中的数据库查询功能，让用户可以输入订单号来查询订单状态，或者看看有没有存货等等。</p><p><strong>第五步</strong><strong>：</strong>在网络上部署及发布这个聊天机器人，供企业内部员工和易速鲜花用户使用。</p><p>在上面的 5 个步骤中，我们使用到了很多LangChain技术，包括提示工程、模型、链、代理、RAG、数据库检索等。</p><p>这节课我们先来实现项目的前三个步骤，第四个步骤我会留给你作为思考题，你可以复习并参考<a href=\"https://time.geekbang.org/column/article/713462\">第16讲</a>中的内容来实现它。在下节课中，我将为你介绍两个 AI 网络 UI 框架，<strong>Streamlit</strong> 和 <strong>Gradio</strong>，利用这两个框架，你可以轻松地把你的 AI 应用部署到网络中。</p><h2>第一步：开发最基本的聊天机器人</h2><p>让我们先来用LangChain打造出一个最简单的聊天机器人。</p><pre><code class=\"language-plain\"># 设置OpenAI API密钥\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'Your OpenAI Key'\n\n# 导入所需的库和模块\nfrom langchain.schema import (\n&nbsp; &nbsp; HumanMessage,\n&nbsp; &nbsp; SystemMessage\n)\nfrom langchain.chat_models import ChatOpenAI\n\n# 创建一个聊天模型的实例\nchat = ChatOpenAI()\n\n# 创建一个消息列表\nmessages = [\n&nbsp; &nbsp; SystemMessage(content=\"你是一个花卉行家。\"),\n&nbsp; &nbsp; HumanMessage(content=\"朋友喜欢淡雅的颜色，她的婚礼我选择什么花？\")\n]\n\n# 使用聊天模型获取响应\nresponse = chat(messages)\nprint(response)\n</code></pre><p>运行程序，输出如下：</p><pre><code class=\"language-plain\">content='对于喜欢淡雅的颜色的婚礼，你可以选择以下花卉：\\n\\n1. 白色玫瑰：白色玫瑰象征纯洁和爱情，它们能为婚礼带来一种优雅和浪漫的氛围。\\n\\n2. 紫色满天星：紫色满天星是十分优雅的小花，它们可以作为装饰花束或餐桌中心点使用，为婚礼增添一丝神秘感。\\n\\n3. 淡粉色康乃馨：淡粉色康乃馨是一种温馨而浪漫的花卉，能为婚礼带来一种柔和的氛围。\\n\\n4.&nbsp; 白色郁金香：白色郁金香代表纯洁和完美，它们可以为婚礼带来一种高贵和典雅的感觉。\\n\\n5. 淡紫色蓝雏菊：淡紫色蓝雏菊是一种可爱的小花，它们可以作为装饰花束或花冠使用，为婚礼增添一丝童真和浪漫。\\n\\n这些花卉都能营造出淡雅的氛围，并与婚礼的整体风格相得益彰。当然，你也可以根据你朋友的喜好和主题来选择适合的花卉。'\n</code></pre><p>下面，我把它重构一下，让Chatbot能够和我们循环地进行对话。</p><pre><code class=\"language-plain\"># 设置OpenAI API密钥\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'Your OpenAI Key'\n\n# 导入所需的库和模块\nfrom langchain.schema import HumanMessage, SystemMessage\nfrom langchain.chat_models import ChatOpenAI\n\n# 定义一个命令行聊天机器人的类\nclass CommandlineChatbot:\n&nbsp; &nbsp; # 在初始化时，设置花卉行家的角色并初始化聊天模型\n&nbsp; &nbsp; def __init__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; self.chat = ChatOpenAI()\n&nbsp; &nbsp; &nbsp; &nbsp; self.messages = [SystemMessage(content=\"你是一个花卉行家。\")]\n\n&nbsp; &nbsp; # 定义一个循环来持续与用户交互\n&nbsp; &nbsp; def chat_loop(self):\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"Chatbot 已启动! 输入'exit'来退出程序。\")\n&nbsp; &nbsp; &nbsp; &nbsp; while True:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user_input = input(\"你: \")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 如果用户输入“exit”，则退出循环\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if user_input.lower() == 'exit':\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"再见!\")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 将用户的输入添加到消息列表中，并获取机器人的响应\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.messages.append(HumanMessage(content=user_input))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response = self.chat(self.messages)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(f\"Chatbot: {response.content}\")\n\n# 如果直接运行这个脚本，启动聊天机器人\nif __name__ == \"__main__\":\n&nbsp; &nbsp; bot = CommandlineChatbot()\n&nbsp; &nbsp; bot.chat_loop()\n</code></pre><p>运行程序后，你可以一直和这个Bot聊天，直到你聊够了，输入exit，它会和你说再见。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/31/7a7700e70928a051f38cb82b5f7b5931.jpg?wh=886x581\" alt=\"\"></p><p>好的，一个简单的聊天机器人已经搭建好了，不过，这个聊天机器人没有记忆功能，它不会记得你之前说过的话。</p><p>下面，我们要通过记忆机制，把它改造成一个能记住话的Chatbot。</p><h2>第二步：增加记忆机制</h2><p>下面，我们来通过ConversationBufferMemory给Chatbot增加记忆。具体代码如下：</p><pre><code class=\"language-plain\"># 设置OpenAI API密钥\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'Your OpenAI Key'\n\n# 导入所需的库和模块\nfrom langchain.schema import HumanMessage, SystemMessage\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.prompts import (\n&nbsp; &nbsp; ChatPromptTemplate,\n&nbsp; &nbsp; MessagesPlaceholder,\n&nbsp; &nbsp; SystemMessagePromptTemplate,\n&nbsp; &nbsp; HumanMessagePromptTemplate,\n)\nfrom langchain.chains import LLMChain\nfrom langchain.chat_models import ChatOpenAI\n\n# 设置OpenAI API密钥\nos.environ[\"OPENAI_API_KEY\"] = 'Your OpenAI Key' &nbsp;\n\n# 带记忆的聊天机器人类\nclass ChatbotWithMemory:\n&nbsp; &nbsp; def __init__(self):\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化LLM\n&nbsp; &nbsp; &nbsp; &nbsp; self.llm = ChatOpenAI()\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化Prompt\n&nbsp; &nbsp; &nbsp; &nbsp; self.prompt = ChatPromptTemplate(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; messages=[\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SystemMessagePromptTemplate.from_template(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"你是一个花卉行家。你通常的回答不超过30字。\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MessagesPlaceholder(variable_name=\"chat_history\"),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HumanMessagePromptTemplate.from_template(\"{question}\")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化Memory\n&nbsp; &nbsp; &nbsp; &nbsp; self.memory = ConversationBufferMemory(memory_key=\"chat_history\", return_messages=True)\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化LLMChain with LLM, prompt and memory\n&nbsp; &nbsp; &nbsp; &nbsp; self.conversation = LLMChain(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; llm=self.llm,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt=self.prompt,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; verbose=True,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory=self.memory\n&nbsp; &nbsp; &nbsp; &nbsp; )\n\n&nbsp; &nbsp; # 与机器人交互的函数\n&nbsp; &nbsp; def chat_loop(self):\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"Chatbot 已启动! 输入'exit'来退出程序。\")\n&nbsp; &nbsp; &nbsp; &nbsp; while True:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user_input = input(\"你: \")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if user_input.lower() == 'exit':\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"再见!\")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response = self.conversation({\"question\": user_input})\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(f\"Chatbot: {response['text']}\")\n\nif __name__ == \"__main__\":\n    # 启动Chatbot\n&nbsp; &nbsp; bot = ChatbotWithMemory()\n&nbsp; &nbsp; bot.chat_loop()\n\n</code></pre><p>程序的核心是ChatbotWithMemory类，这是一个带有记忆功能的聊天机器人类。在这个类的初始化函数中，定义了一个对话缓冲区记忆，它会跟踪对话历史。在LLMChain被创建时，就整合了LLM、提示和记忆，形成完整的对话链。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/f4/6d1eb1ea673807f16046d10754a640f4.jpg?wh=1034x1720\" alt=\"\"></p><p>你看，我们的 Chatbot 成功地复述出了我好几轮之前传递给它的关键信息，也就是我的姐姐已经44岁了。她的推荐是基于这个原则来进行的。</p><h2>第三步：增加检索机制</h2><p>下面，继续增强 Chatbot 的功能，我们要把易速鲜花的内部文档信息嵌入到大模型的知识库中。让它成为一个拥有“易速鲜花”价值观的Super客服。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/41/0ac1830644bac89bb552db5c64d83441.jpg?wh=186x88\" alt=\"\"></p><p>上图中的易速鲜花内部价值观，如果你感到陌生的话，可以复习一下<a href=\"https://time.geekbang.org/column/article/699436\">第2讲</a>的内容。</p><pre><code class=\"language-plain\"># 导入所需的库\nimport os\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import Qdrant\nfrom langchain.memory import ConversationSummaryMemory\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import ConversationalRetrievalChain\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.document_loaders import Docx2txtLoader\nfrom langchain.document_loaders import TextLoader\n\n# 设置OpenAI API密钥\nos.environ[\"OPENAI_API_KEY\"] = 'Your OpenAI Key' &nbsp;\n\n# ChatBot类的实现-带检索功能\nclass ChatbotWithRetrieval:\n\n&nbsp; &nbsp; def __init__(self, dir):\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 加载Documents\n&nbsp; &nbsp; &nbsp; &nbsp; base_dir = dir # 文档的存放目录\n&nbsp; &nbsp; &nbsp; &nbsp; documents = []\n&nbsp; &nbsp; &nbsp; &nbsp; for file in os.listdir(base_dir): \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; file_path = os.path.join(base_dir, file)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if file.endswith('.pdf'):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; loader = PyPDFLoader(file_path)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; documents.extend(loader.load())\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elif file.endswith('.docx') or file.endswith('.doc'):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; loader = Docx2txtLoader(file_path)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; documents.extend(loader.load())\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elif file.endswith('.txt'):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; loader = TextLoader(file_path)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; documents.extend(loader.load())\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 文本的分割\n&nbsp; &nbsp; &nbsp; &nbsp; text_splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=0)\n&nbsp; &nbsp; &nbsp; &nbsp; all_splits = text_splitter.split_documents(documents)\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 向量数据库\n&nbsp; &nbsp; &nbsp; &nbsp; self.vectorstore = Qdrant.from_documents(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; documents=all_splits, # 以分块的文档\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; embedding=OpenAIEmbeddings(), # 用OpenAI的Embedding Model做嵌入\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; location=\":memory:\", &nbsp;# in-memory 存储\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; collection_name=\"my_documents\",) # 指定collection_name\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化LLM\n&nbsp; &nbsp; &nbsp; &nbsp; self.llm = ChatOpenAI()\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 初始化Memory\n&nbsp; &nbsp; &nbsp; &nbsp; self.memory = ConversationSummaryMemory(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; llm=self.llm, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory_key=\"chat_history\", \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return_messages=True\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 设置Retrieval Chain\n&nbsp; &nbsp; &nbsp; &nbsp; retriever = self.vectorstore.as_retriever()\n&nbsp; &nbsp; &nbsp; &nbsp; self.qa = ConversationalRetrievalChain.from_llm(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.llm, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; retriever=retriever, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memory=self.memory\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n\n&nbsp; &nbsp; # 交互对话的函数\n&nbsp; &nbsp; def chat_loop(self):\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"Chatbot 已启动! 输入'exit'来退出程序。\")\n&nbsp; &nbsp; &nbsp; &nbsp; while True:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user_input = input(\"你: \")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if user_input.lower() == 'exit':\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"再见!\")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 调用 Retrieval Chain &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response = self.qa(user_input)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(f\"Chatbot: {response['answer']}\")\n\nif __name__ == \"__main__\":\n&nbsp; &nbsp; # 启动Chatbot\n&nbsp; &nbsp; folder = \"OneFlower\"\n&nbsp; &nbsp; bot = ChatbotWithRetrieval(folder)\n&nbsp; &nbsp; bot.chat_loop()\n</code></pre><p>通过文档加载、文本分割、文档向量化以及检索功能，这个新的机器人除了常规的聊天功能，还能够检索存储在指定目录中的文档，并基于这些文档提供答案。</p><p>当用户输入一个问题时，机器人首先在向量数据库中查找与问题最相关的文本块。这是通过将用户问题转化为向量，并在数据库中查找最接近的文本块向量来实现的。然后，机器人使用 LLM（大模型）在这些相关的文本块上进一步寻找答案，并生成回答。</p><p>现在，新的Chatbot既能够回答一般性的问题，又能够回答易速鲜花内部问题，成了一个多面手！</p><p><img src=\"https://static001.geekbang.org/resource/image/da/db/da7ecbf3b39e72be9f774380yy4624db.jpg?wh=1038x585\" alt=\"\"></p><h2>总结时刻</h2><p>咱们的聊天机器人基本完成。它拥有了很多能力，有些能力来自于模型本身，比如World Knowledge（世界知识）、总结、对话等等。除此之外，我们还为它武装了记忆功能以及检索易速鲜花内部文档的功能。</p><p>除了基本的提示和LLM之外，记忆和检索是聊天机器人的核心组件。这两者使其不仅可以回忆起过去的交互，还可以提供最新的、特定领域的信息。</p><p>在这个聊天机器人的构建过程中，我们进一步复习了LangChain中的对话模型、提示模板、记忆的实现，以及检索功能和 RAG 功能的实现。</p><p>下节课我将借着这个聊天机器人的部署过程，给你介绍两个实用的 Web UI 工具。敬请期待！</p><h2>思考题</h2><ol>\n<li>如果你回忆<a href=\"https://time.geekbang.org/column/article/704183\">第10讲</a>，会发现我当时是在ConversationChain中实现了记忆机制。在这节课的示例中，我直接把Memory应用到了LLMChain中，你能否用ConversationChain中的Memory来重构并简化代码？<br>\n&nbsp;<br>\n提示：ConversationChain实际上是对Memory和LLMChain进行了封装，简化了初始化Memory的步骤。<br>\n&nbsp;</li>\n<li>我希望在聊天机器人中增加对数据库的查询能力，让用户或者业务人员知道某种鲜花的库存情况、销售情况等等。你能否参考<a href=\"https://time.geekbang.org/column/article/713462\">第16讲</a>的内容，把这个功能整合到这个Chatbot中呢？</li>\n</ol><p>期待在留言区看到你的成果分享，如果觉得内容对你有帮助，也欢迎分享给有需要的朋友！</p>","comments":[{"had_liked":false,"id":384490,"user_name":"Geek_821c96","can_delete":false,"product_type":"c1","uid":1092407,"ip_address":"北京","ucode":"B07B528F2E12C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/ab/37/455d6a8d.jpg","comment_is_top":false,"comment_ctime":1701056097,"is_pvip":false,"replies":[{"id":140416,"content":"是的，正确的。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1702312143,"ip_address":"瑞士","comment_id":384490,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"# 调用 Retrieval Chain  \n response = self.qa(user_input)\n黄老师，这行代码的内部执行逻辑我不是很理解，您看我理解的对吗:\n1.调用openai的接口，把用户输入user_input转换为向量数据。\n2.拿向量数据去本地向量数据库匹配qa\n3.匹配到答案后，再次拿着答案调用openai获取到结果展示给用户。","like_count":2,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633570,"discussion_content":"是的，正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702312143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389921,"user_name":"海是蓝天的倒影","can_delete":false,"product_type":"c1","uid":2300783,"ip_address":"上海","ucode":"18355BB7DC364D","user_header":"https://static001.geekbang.org/account/avatar/00/23/1b/6f/ee41e363.jpg","comment_is_top":false,"comment_ctime":1713887899,"is_pvip":false,"replies":[{"id":142147,"content":"就是通过提示词，让Agent自己根据业务场景判断。比如，我是律师行，查询法律文件，Agent就查文件；我查某个Case的年月日，就最好检索SQL表。在提示中，要通过few-shots的方式和Agent说明。聪明的Agent能自己判断，人可以，Agent就可以。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1716480896,"ip_address":"新加坡","comment_id":389921,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100617601,"comment_content":"佳哥，请问一下。聊天客服机器人支持对数据库的检索，添加一个调用sql 工具的agent方法就可以实现。但是如何对用户的输入进行判断，是对向量数据库的检索，还是对sql数据库的数据检索呢？\n能提供个思路吗？谢谢","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645658,"discussion_content":"就是通过提示词，让Agent自己根据业务场景判断。比如，我是律师行，查询法律文件，Agent就查文件；我查某个Case的年月日，就最好检索SQL表。在提示中，要通过few-shots的方式和Agent说明。聪明的Agent能自己判断，人可以，Agent就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716480896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384655,"user_name":"鲸鱼","can_delete":false,"product_type":"c1","uid":1052643,"ip_address":"北京","ucode":"71437C1C601040","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/e3/c49aa508.jpg","comment_is_top":false,"comment_ctime":1701308028,"is_pvip":false,"replies":[{"id":140920,"content":"嗯？这个现象有点奇怪哦。答非所问，不是ChatGPT应有水准。ChatGPT的水准应该是即使检索不出来答案，也会给你圆上场面。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1705069743,"ip_address":"瑞士","comment_id":384655,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，RAG是不是得配合路由链或者代理使用啊，先判断问题类型再去检索？我发现提易速鲜花的问题都能回答的很好，但是说个“你真棒”AI就回答有问题了\n\n你: 你真棒\nChatBot: 对不起，根据提供的信息，我无法确定“语言玫瑰”的含义。这个词组似乎不是标准的成语或常见表达。如果它是特定情境或者某个专业领域的术语，可能需要更多的上下文来提供准确的解释。如果您能提供更多的信息或者上下文，我或许能够帮助解答您的问题。","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635726,"discussion_content":"嗯？这个现象有点奇怪哦。答非所问，不是ChatGPT应有水准。ChatGPT的水准应该是即使检索不出来答案，也会给你圆上场面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705069743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1904591,"avatar":"","nickname":"Geek_87bc6f","note":"","ucode":"0BA0EB9F479440","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645341,"discussion_content":"我也发现程序跑起来有这个问题。问鲜花内部知识能答，如果问“Java多线程写法”，直接就回答：我不知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716008656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384484,"user_name":"Geek_821c96","can_delete":false,"product_type":"c1","uid":1092407,"ip_address":"","ucode":"B07B528F2E12C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/ab/37/455d6a8d.jpg","comment_is_top":false,"comment_ctime":1701050721,"is_pvip":false,"replies":[{"id":140415,"content":"是的，内部是进行了这几个操作。大模型一是帮助做Embedding，而是做生成Synthesis。二者可以都是OpenAI模型，但是不同的模型。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1702312124,"ip_address":"瑞士","comment_id":384484,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"# 调用 Retrieval Chain  \n response = self.qa(user_input)\n黄老师，这行代码的内部执行逻辑我不是很理解，您看我理解的对吗:\n1.调用openai的接口，把用户输入user_input转换为向量数据。\n2.拿向量数据去本地向量知识库匹配qa返回。\n3.匹配到的答案再次调用openai拿到可展示的答案","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633569,"discussion_content":"是的，内部是进行了这几个操作。大模型一是帮助做Embedding，而是做生成Synthesis。二者可以都是OpenAI模型，但是不同的模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702312124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383561,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":2852633,"ip_address":"北京","ucode":"ED276E3A0CFFDE","user_header":"https://static001.geekbang.org/account/avatar/00/2b/87/19/474ba7cb.jpg","comment_is_top":false,"comment_ctime":1699268822,"is_pvip":false,"replies":[{"id":140192,"content":"可以的，很多种方法。https:&#47;&#47;qdrant.tech&#47;的Cloud里面也可以免费保存一些，其它方法也很多。本地应该也可以。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1700582631,"ip_address":"瑞士","comment_id":383561,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"向量数据库 如何保存在本地? 这下次再使用的时候, 直接读取结果就行. 而不用再进行生成向量数据库.","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632241,"discussion_content":"可以的，很多种方法。https://qdrant.tech/的Cloud里面也可以免费保存一些，其它方法也很多。本地应该也可以。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700582631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052200,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0e/28/6f54cc13.jpg","nickname":"bery","note":"","ucode":"39790C3827DA53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631726,"discussion_content":"qdrant = Qdrant.from_documents(\n    docs, embeddings, \n    path=&#34;/tmp/local_qdrant&#34;,\n    collection_name=&#34;my_documents&#34;,\n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699928562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383289,"user_name":"蝈蝈","can_delete":false,"product_type":"c1","uid":2444823,"ip_address":"湖北","ucode":"2B14CECEFD7F46","user_header":"https://static001.geekbang.org/account/avatar/00/25/4e/17/2e131ff0.jpg","comment_is_top":false,"comment_ctime":1698821743,"is_pvip":false,"replies":[{"id":139675,"content":"就是通过SerpAPI这样的工具实时的搜啊，就是向目前Bing做的事情。每一个环境都可以用Agent来判断是找得到还是找不到最好的答案。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699002882,"ip_address":"瑞士","comment_id":383289,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"如果想在目前的基础上加入实时搜索的功能，应该如何实现。当用户的问题如果没有在本地向量库检索到，且大模型也没有相关的回答，希望通过加入实时搜索的功能去查找。是通过硬编码的判断还是通过agent代理的方式，来决策这个过程","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630882,"discussion_content":"就是通过SerpAPI这样的工具实时的搜啊，就是向目前Bing做的事情。每一个环境都可以用Agent来判断是找得到还是找不到最好的答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699002882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383917,"user_name":"JC","can_delete":false,"product_type":"c1","uid":1619249,"ip_address":"广东","ucode":"D54D99927D74AE","user_header":"https://static001.geekbang.org/account/avatar/00/18/b5/31/9c6158ec.jpg","comment_is_top":false,"comment_ctime":1699934514,"is_pvip":false,"replies":[{"id":140087,"content":"目前没有啊，交给同学们自己做。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699978859,"ip_address":"瑞士","comment_id":383917,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，第四步有实现的代码吗？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631804,"discussion_content":"目前没有啊，交给同学们自己做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699978859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052728,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/38/bd7851db.jpg","nickname":"迪拉克海的鱼","note":"","ucode":"A9C2A3097FDE8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636398,"discussion_content":"最有价值的就是第四步了,竟然没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706081838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383483,"user_name":"易水流川","can_delete":false,"product_type":"c1","uid":2041993,"ip_address":"浙江","ucode":"36EAC398EE580B","user_header":"https://static001.geekbang.org/account/avatar/00/1f/28/89/8d953a33.jpg","comment_is_top":false,"comment_ctime":1699116875,"is_pvip":false,"replies":[{"id":140057,"content":"好嘞！！！","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699929147,"ip_address":"瑞士","comment_id":383483,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"思考题2：使用create_sql_agent实现一个查询订单信息的tool，把这个tool加到Chatbot","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631732,"discussion_content":"好嘞！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699929147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383356,"user_name":"蝈蝈","can_delete":false,"product_type":"c1","uid":2444823,"ip_address":"湖北","ucode":"2B14CECEFD7F46","user_header":"https://static001.geekbang.org/account/avatar/00/25/4e/17/2e131ff0.jpg","comment_is_top":false,"comment_ctime":1698914468,"is_pvip":false,"replies":[{"id":139683,"content":"这个问题目前我也没有做过更深入的实验去比较，估计要深入这两个Chain的内部实现细节去看了。。。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699027278,"ip_address":"瑞士","comment_id":383356,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师您好，请问一个问题，我用RetrievalQA和RetrievalQAWithSourcesChain 得到的答案完全不一样。我本以为RetrievalQAWithSourcesChain是RetrievalQA增强功能，但结果并不是。\n```\nclient = qdrant_client.QdrantClient(\n        url=url,\n        prefer_grpc=True\n    )\nqdrant = Qdrant(\n    client=client, collection_name=collection_name, \n    embedding_function = OpenAIEmbeddings().embed_query\n)\nretriever = qdrant.as_retriever()\nllm = ChatOpenAI(model_name=&quot;gpt-3.5-turbo&quot;, temperature=0)\nqa_chain = RetrievalQAWithSourcesChain.from_chain_type(llm,retriever=retriever,verbose=True)\nqa_chain.return_source_documents=True\nquestion = &quot;&quot;&quot;什么是共识算法&quot;&quot;&quot;\nanswer = qa_chain(question)\nprint(answer)\n```\n\n用 RetrievalQA 可以正确搜索到答案，但是RetrievalQAWithSourcesChain就搜不到","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630905,"discussion_content":"这个问题目前我也没有做过更深入的实验去比较，估计要深入这两个Chain的内部实现细节去看了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699027278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}