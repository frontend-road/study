{"id":160477,"title":"10 | 配置管理：最容易被忽视的DevOps工程实践基础","content":"<p>你好，我是石雪峰。从今天开始，专栏正式进入了工程实践的部分。在DevOps的体系中，工程实践所占的比重非常大，而且和我们的日常工作息息相关。正因为如此，DevOps包含了大量的工程实践，很多我们都耳熟能详，比如持续集成、自动化测试、自动化部署等等，这些基本上是实践DevOps的必选项。</p><p>可是，还有一些实践常常被人们所忽视，但这并不代表它们已经被淘汰或者是不那么重要了。恰恰相反，它们同样是DevOps能够发挥价值的根基，配置管理（Configuration Management）就是其中之一。它的理念在软件开发过程中无处不在，可以说是整个DevOps工程实践的基础。所以今天我们就来聊一聊配置管理。</p><p>说了这么多，那软件配置管理到底是个啥呢？</p><p>熟悉运维的同学可能会说，不就是类似Ansible、Saltstack的环境配置管理工具吗？还有人会说，CMDB配置管理数据库也是配置管理吧？这些说法都没错。配置管理这个概念在软件开发领域应用得非常普遍，几乎可以说无处不在，但是刚刚提到的这些概念，都是细分领域内的局部定义。</p><p>我今天要讲到的配置管理，是一个宏观的概念，是站在软件交付全生命周期的视角，对整个开发过程进行规范管理，控制变更过程，让协作更加顺畅，确保整个交付过程的完整、一致和可追溯。</p><!-- [[[read_end]]] --><p>看到这里，我估计你可能已经晕掉了。的确，配置管理的理论体系非常庞大。但是没关系，你只需要把四个核心理念记在心中就足够了。这四个理念分别是：<strong>版本变更标准化，将一切纳入版本控制，全流程可追溯和单一可信数据源</strong>。</p><h2>1. 版本变更标准化</h2><p><strong>版本控制是配置管理中的一个非常核心的概念，而对于软件来说，最核心的资产就是源代码</strong>。现在很多公司都在使用类似Git、SVN之类的工具管理源代码，这些工具其实都是版本控制系统。版本描述了软件交付产物的状态，可以说，从第一行软件代码写下开始，版本就已经存在了。</p><p>现代软件开发越来越复杂，往往需要多人协作，所以，如何管理每个开发者的版本，并把它们有效地集成到一起，就成了一个难题。实际上，版本控制系统就是为了解决这个问题的。试想一下，如果没有这么一套系统的话，所有代码都在本地，不要说其他人了，就连自己都会搞不清楚哪个是最新代码。那么，当所有人的代码集成到一起的时候，那该是多么混乱啊！</p><p>不仅如此，如果线上发生了严重问题，也找不到对应的历史版本，只能直接把最新的代码发布上去，简直就是灾难。</p><p><strong>配置管理中的另一个核心概念是变更</strong>。我们对软件做的任何改变都可以称之为一次变更，比如一个需求，一行代码，甚至是一个环境配置。<strong>版本来源于变更</strong>。对于变更而言，核心就是要记录：<strong>谁，在什么时间，做了什么改动，具体改了哪些内容，又是谁批准的</strong>。</p><p>这样看来，好像也没什么复杂的，因为现代版本控制系统基本都具备记录变更的功能。那么，是不是只要使用了版本控制系统，就做到变更管理了呢？</p><p>的确，版本控制系统的出现，大大简化了管理变更的成本，至少是不用人工记录了。但是，从另一方面来看，用好版本控制系统也需要有一套规则和行为规范。</p><p>比如，版本控制系统需要打通公司的统一认证系统，也就是任何人想要访问版本控制系统，都需要经过公司统一登录的认证。同时，在使用Git的时候，你需要正确配置本地信息，尤其是用户名和邮箱信息，这样才能在提交时生成完整的用户信息。另外，系统本身也需要增加相关的校验机制，避免由于员工配置错误导致无效信息被提交入库。</p><p>改动说明一般就是版本控制系统的提交记录，一个完整的提交记录应该至少包括以下几个方面的内容：</p><ul>\n<li><strong>提交概要信息</strong>：简明扼要地用一句话说明这个改动实现了哪些功能，修复了哪些问题；</li>\n<li><strong>提交详细信息</strong>：详细说明改动的细节和改动方式，是否有潜在的风险和遗留问题等；</li>\n<li><strong>提交关联需求</strong>：是哪次变更导致的这次提交修改，还需要添加上游系统编号以关联提交和原始变更。</li>\n</ul><p>这些改动应该遵循一种标准化的格式，并且有相关的格式说明和书写方式，比如有哪些关键字，每一行的长度，变更编号的区隔是使用逗号、空格还是分号等等。如果按照这个标准来书写每次的变更记录，其实成本还是很高的，更不要说使用英文来书写的话，英文的表达方式和内容展现形式又是一个难题。</p><p>我跟你分享一个极品的提交注释，你可以参考一下。</p><blockquote>\n<p>switch to Flask-XML-RPC dependency</p>\n<p>CR: PBX-2222</p>\n<p>The Flask-XML-RPC-Re fork has Python 3 support, but it has a couple</p>\n<p>other problems.</p>\n<ol>\n<li>\n<p>test suite does not pass</p>\n</li>\n<li>\n<p>latest code is not tagged</p>\n</li>\n<li>\n<p>uncompiled source code is not distributed via PyPI</p>\n</li>\n</ol>\n<p>The Flask-XML-RPC module is essentially dead upstream, but it is</p>\n<p>packaged in EPEL 7 and Fedora. This module will get us far enough to<br>\nthe</p>\n<p>point that we can complete phase one for this project.</p>\n<p>When we care about Python 3, we can drop XML-RPC entirely and get the</p>\n<p>service consumers to switch to a REST API instead.</p>\n<p>(Note, with this change, the Travis CI tests will fail for Python 3.<br>\nThe</p>\n<p>solution is to drop XML-RPC support.)</p>\n</blockquote><p>这时，肯定有人会问，花这么大力气做这个事情，会不会有点得不偿失呢？从局部来看，的确如此。但是，换个角度想，当其他人看到你的改动，或者是评审你的代码的时候，如果通过提交记录就能清晰地了解你的意图，而不是一脸蒙地把你叫过来，让你再讲一遍，这样节约的时间比当时你书写提交记录的时间要多得多。</p><p><strong>所以你看，一套标准化的规则和行为习惯，可以降低协作过程中的沟通成本，一次性把事情做对，这也是标准和规范的重要意义</strong>。</p><p>当然，如果标准化流程要完全依靠人的自觉性来保障，那就太不靠谱了。毕竟，人总是容易犯错的，会影响到标准的执行效果。所以，当团队内部经过不断磨合，逐步形成一套规范之后，最好还是用自动化的手段保障流程的标准化。</p><p>这样做的好处有两点：一方面，可以降低人为因素的影响，如果你不按标准来，就会寸步难行，也减少了人为钻空子的可能性。比如，有时候因为懒，每次提交都写同样一个需求变更号，这样的确满足了标准化的要求，但是却产生了大量无效数据。这时候，你就可以适当增加一些校验机制，比如只允许添加你名下的变更，或者是只允许开放状态的变更号等等。另一方面，在标准化之后，很多重复性的工作就可以自动化完成，标准化的信息也方便计算机分析提取，这样就可以提升流程的流转效率。</p><p><strong>可以说，标准化是自动化的前提，自动化又是DevOps最核心的实践</strong>。这样看来，说配置管理是DevOps工程实践的基础就一点不为过了吧。</p><h2>2. 将一切纳入版本控制</h2><p>如果说，今天这一讲的内容，你只需要记住一句话，那就是将一切纳入版本控制，这是配置管理的金科玉律。你可能会问，需要将什么样的内容纳入版本控制呢？我会毫不犹豫地回答你：“一切都需要！”比如软件源代码、配置文件、测试编译脚本、流水线配置、环境配置、数据库变更等等，你能想到的一切，皆有版本，皆要被纳入管控。</p><p>这是因为，软件本身就是一个复杂的集合体，任何变更都可能带来问题，所以，全程版本控制赋予了我们全流程追溯的能力，并且可以快速回退到某个时间点的版本状态，这对于定位和修复问题是非常重要的。</p><p>之前，我就遇到过一个问题。一个iOS应用发灰度版本的时候一切正常，但是正式版本就遇到了无法下载的情况。当时因为临近上线，为了查这个问题，可以说是全员上阵，团队甚至开始互相抱怨，研发说代码没有变化，所以是运维的问题；运维说环境没动过，所以是研发的问题。结果到最后才发现，这是由于一个工具版本升级，某个参数的默认值从“关闭”变成了“打开”导致的。</p><p>所以你看，如果对所有内容都纳入版本控制，快速对比两个版本，列出差异点，那么，解决这种问题也就是分分钟的事情，大不了就把所有改动都还原回去。</p><p>纳入版本控制的价值不止如此。实际上，很多DevOps实践都是基于版本控制来实现的，比如，环境管理方面推荐采用基础设施即代码的方式管理环境，也就是说把用代码化的方式描述复杂的环境配置，同时把它纳入版本控制系统中。这样一来，任何环境变更都可以像提交代码一样来完成，不仅变更的内容一目了然，还可以很轻松地实现自动化。<strong>把原本复杂的事情简单化，每一个人都可以完成环境变更</strong>。</p><p>这样一来，开发和运维之间的鸿沟就被逐渐抹平了，DevOps的真谛也是如此。所以，现在行业内流行的“什么什么即代码”，其背后的核心都是版本控制。</p><p>不过，这里我需要澄清一下，纳入版本控制并不等同于把所有内容都放到Git中管理。有些时候，我们很容易把能力和工具混为一谈。Git只是一种流行的版本控制系统而已，而这里强调的其实是一种能力，工具只是能力的载体。比如，Git本身不擅长管理大文件，那么可以把这些大文件放到Artifactory或者其他自建平台上进行管理。</p><p>对自建系统来说，实现版本控制的方式有很多种，比如，可以针对每次变更，插入一组新的数据，或者直接复用Git这种比较成熟的工具作为后台。唯一不变的要求就是，无论使用什么样的系统和工具，都需要把版本控制的能力考虑进去。</p><p>另外，在实践将一切纳入版本控制的时候，你可以参考一条小原则。如果你不确定是否需要纳入版本控制，有一个简单的判断方法就是：<strong>如果这个产物可以通过其他产物来重现，那么就可以作为制品管理，而无需纳入版本控制</strong>。</p><p>举个例子，软件包可以通过源代码和工具重新打包生成，那么，代码、工具和打包环境就需要纳入管控，而生成的软件包可以作为制品；软件的测试报告如果可以通过测试管理平台重新自动化生成，那么同样可以将其视为制品，但前提是，测试管理平台可以针对每一个版本重新生成测试报告。</p><h2>3. 全流程可追溯</h2><p>对传统行业来说，全流程可追溯的能力从来不是可选项，而是必选项。像航空航天、企业制造、金融行业等，对变更的管控都是非常严谨的，一旦出现问题，就要追溯当时的全部数据，像软件源代码、测试报告、运行环境等等。如果由于缺乏管理，难以提供证据证明基于当时的客观情况已经做了充分的验证，就会面临巨额的罚款和赔偿，这可不是闹着玩的事情。像最近流行的区块链技术，除了发币以外，最典型的场景也是全流程可追溯。所以说，<strong>技术可以日新月异，但很多理念都是长久不变的</strong>。</p><p><strong>对于配置管理来说，除了追溯能力以外，还有一个重要的价值，就是记录关联和依赖关系</strong>。怎么理解这句话呢？我先提个问题，在你的公司里面，针对任意一个需求，你们是否能够快速识别出它所关联的代码、版本、测试案例、上线记录、缺陷信息、用户反馈信息和上线监控数据呢？对于任意一个应用，是否可以识别出它所依赖的环境，中间件，上下游存在调用关系的系统、服务和数据呢？</p><p>如果你的回答是“yes”，那么恭喜你，你们公司做得非常好。不过，绝大多数公司都是无法做到这一点的。因为这不仅需要系统与系统之间的关联打通、数据联动，也涉及到一整套完整的管理机制。</p><p>DevOps非常强调价值导向，强调团队内部共享目标，这个目标其实就是业务目标。但实际情况是，业务所关注的维度，和开发、测试、运维所关注的维度都各不相同。业务关心的是提出的需求有没有上线，而开发关心的是这个需求的代码有没有集成，运维关心的是包含这个代码的版本是否上线。所以，如果不能把这些信息串联打通，就没有真正做到全流程可追溯。</p><p>关于这个问题，我给你的建议是<strong>把握源头，建立主线</strong>。所谓源头，对于软件开发而言，最原始的就是需求，<strong>所有的变更都来源于需求</strong>。所以，首先要统一管理需求，无论是开发需求、测试需求还是运维需求。</p><p>接下来，要以需求作为抓手，去关联下游环节，打通数据，这需要系统能力的支持，也需要规则的支持。比如，每次变更都要强制关联需求编号，针对不同的需求等级定义差异化流程，这样既可以减少无意义的审批环节，给予团队一定的灵活性，也达到了全流程管控的目标。这是一个比较漫长的过程，但不积跬步，无以至千里，DevOps也需要一步一个脚印地建设才行。</p><h2>4. 单一可信数据源</h2><p>最后，我想单独谈谈单一可信数据源。很多人不理解这是什么东西，我举个例子你就明白了。</p><p>有一个网络热词叫作“官宣”，也就是官方宣布的意思。一般情况下，官宣的信息都是板上钉钉的，可信度非常高。可问题是，如果有多个官宣的渠道，信息还都不一样，你怎么知道要相信哪一个呢？这就是单一可信数据源的意义。</p><p>试想一下，我们花了很大力气来建设版本控制的能力，但如果数据源本身不可靠，缺乏统一管控，那岂不是白忙一场吗？所以，对于软件开发来说，必须要有统一的管控：</p><ul>\n<li>对于代码来说，要有统一的版本控制系统，不能代码满天飞；</li>\n<li>对于版本来说，要有统一的渠道，不能让人随便本地打个包就传到线上去了；</li>\n<li>对于开发依赖的组件来说，要有统一的源头，不能让来路不明的组件直接集成到系统中。这不仅对于安全管控来说至关重要，对于企业内部的信息一致性也是不可或缺的。</li>\n</ul><p><strong>同时，单一可信数据源也要能覆盖企业内部元数据的管控</strong>。比如，企业内部经常出现这种情况，同样是应用，在A部门的系统中叫作123，在B部门的系统中叫作ABC，在打通两边平台的时候，这就相当于“鸡同鸭讲”，完全对不上。再比如，信息安全团队维护了一套应用列表，但实际上，在业务系统中，很多应用都已经下线且不再维护了，这样一来，不仅会造成资源浪费，还伴随着非常大的安全风险。</p><p>很多时候，类似的这些问题都是因为缺乏统一的顶层规划和设计导致的，这一点，在建立配置管理能力的时候请你格外关注一下。</p><h2>总结</h2><p>今天我给你介绍了DevOps工程实践的基础配置管理，以及配置管理的四大理念，分别是版本变更标准化、将一切纳入版本控制、全流程可追溯和单一可信数据源，希望能帮你掌握配置管理的全局概念。</p><p>虽然配置管理看起来并不起眼，但是就像那句经典的话一样：“岁月静好，是因为有人替你负重前行。” 对于任何一家企业来说，信息过载都是常态，而<strong>配置管理的最大价值正是将信息序列化</strong>，对信息进行有效的整理、归类、记录和关联。而软件开发标准和有序，也是协同效率提升的源头，所以，配置管理的重要性再怎么强调都不为过。</p><h2>思考题</h2><p>你在企业中遇到过哪些配置管理方面的难题呢？你们的配置管理体系又是如何建立的呢？你遇到过因为缺乏单一可信数据源而导致“鸡同鸭讲”的有趣故事吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，欢迎你把文章分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":148412,"user_name":"holen","can_delete":false,"product_type":"c1","uid":1104199,"ip_address":"","ucode":"2C7D342AFE4DF0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/47/247fd305.jpg","comment_is_top":false,"comment_ctime":1573004666,"is_pvip":false,"replies":[{"id":"57251","content":"嗯，可以简单给你介绍下我们的一些过程吧，其实最早也是没有专职的配置管理职能的，软件的发布和集成都是研发团队自行管理。推动这个事情的契机是公司决定加快版本发布节奏，从三周一个版本推进到两周一个版本，看起来缩短了一周时间，但就像之前演示的部署引力图一样，方方面面的影响都在阻碍这个目标。<br>所以，我们决定引入配置管理智能，初期就做两件事，一个是重新定义分支策略，从长分支改为了短分支加特性分支的模式，第二个是管理集成权限，从任何时间都有人能集成，到按照版本周期管控。在这个过程中，梳理了代码仓库的目录结构，存储方式，并基于流程建立了在线提测平台实现研发过程的线上化。<br>接下来配置管理结合平台和流程先前先后开始延展，向前管理需求代码关联，事中将构建测试等过程工具以及环境配置纳入统一管控，向后定义了版本发布和上线规则。在团队走上正轨有序开发之后，逐步加强平台和自动化能力的建设，比如代码提交失控，那么就做集成线上化，测试验收通过之后自动合并代码，比如环境差异大，就通过容器化和服务端配置管理工具，实现统一的初始化。构建速度慢，就通过网络改造和增量编译提升构建速度。从而最终使得版本发布这件事情变成一键式的操作。<br>我想说的是，实践有很多，但是哪些可以用于解决实际问题，还要把握原则，如果你不知道该从何入手，不妨看看现在的软件交付流程，是否是由配置管理来驱动的，是否还有一些数据是失控和混乱的状态，是否版本的信息还无法完整回溯。对于配置管理来说，标准化，自动化，服务化是一条通用的路径，以上供你参考。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573048574,"ip_address":"","comment_id":148412,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48817644922","product_id":100036601,"comment_content":"老师讲的都是概念，能不能结合老师公司的实践讲一下贵公司是怎么做的吗？ 虽然 每个企业面临的实际问题都不相同，方案也不一样， 但是 我们可以从案例中 得到一些思路或者启发， 而不是这样听一些概念，然后还是不知道从何入手！","like_count":12,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473486,"discussion_content":"嗯，可以简单给你介绍下我们的一些过程吧，其实最早也是没有专职的配置管理职能的，软件的发布和集成都是研发团队自行管理。推动这个事情的契机是公司决定加快版本发布节奏，从三周一个版本推进到两周一个版本，看起来缩短了一周时间，但就像之前演示的部署引力图一样，方方面面的影响都在阻碍这个目标。\n所以，我们决定引入配置管理智能，初期就做两件事，一个是重新定义分支策略，从长分支改为了短分支加特性分支的模式，第二个是管理集成权限，从任何时间都有人能集成，到按照版本周期管控。在这个过程中，梳理了代码仓库的目录结构，存储方式，并基于流程建立了在线提测平台实现研发过程的线上化。\n接下来配置管理结合平台和流程先前先后开始延展，向前管理需求代码关联，事中将构建测试等过程工具以及环境配置纳入统一管控，向后定义了版本发布和上线规则。在团队走上正轨有序开发之后，逐步加强平台和自动化能力的建设，比如代码提交失控，那么就做集成线上化，测试验收通过之后自动合并代码，比如环境差异大，就通过容器化和服务端配置管理工具，实现统一的初始化。构建速度慢，就通过网络改造和增量编译提升构建速度。从而最终使得版本发布这件事情变成一键式的操作。\n我想说的是，实践有很多，但是哪些可以用于解决实际问题，还要把握原则，如果你不知道该从何入手，不妨看看现在的软件交付流程，是否是由配置管理来驱动的，是否还有一些数据是失控和混乱的状态，是否版本的信息还无法完整回溯。对于配置管理来说，标准化，自动化，服务化是一条通用的路径，以上供你参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573048574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146818,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1572664696,"is_pvip":false,"replies":[{"id":"56792","content":"你好，每个企业面临的实际问题都不相同，很难给出一个通用的落地方案，但从配置管理的角度来说，最重要的就是识别和管理配置项，也就是将一切纳入版本控制，并且是要遵循规则纳入管理的，我的建议是你把软件交付过程中涉及的这些配置项通盘梳理一下，看看是否都满足这个要求。纳入管理之后，就要建立流程方面的上下游关联和联动，比如开始可以从需求和代码的关联做起，再逐步扩展到其他配置项内容。当然，也欢迎你提出你的实际问题来，这样可能会更加聚焦一些，谢谢。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572801080,"ip_address":"","comment_id":146818,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23047501176","product_id":100036601,"comment_content":"老师是否有落地的方案呢？这篇专栏都是讲的概念，在devops研发运营一体化中都有相应的介绍！但是对于如何落地，我觉得这个才是重点","like_count":5,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473022,"discussion_content":"你好，每个企业面临的实际问题都不相同，很难给出一个通用的落地方案，但从配置管理的角度来说，最重要的就是识别和管理配置项，也就是将一切纳入版本控制，并且是要遵循规则纳入管理的，我的建议是你把软件交付过程中涉及的这些配置项通盘梳理一下，看看是否都满足这个要求。纳入管理之后，就要建立流程方面的上下游关联和联动，比如开始可以从需求和代码的关联做起，再逐步扩展到其他配置项内容。当然，也欢迎你提出你的实际问题来，这样可能会更加聚焦一些，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572801080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165254,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","nickname":"Robert小七","note":"","ucode":"6BBF4674673AF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42901,"discussion_content":"老师的专栏名是&#34;devops实战笔记&#34;，我更希望讲实战的内容，比如每偏文章都有相应的案例来说明在实战中怎么把这些串起来的！我们需要的是您的经验！如果说讲不同的企业面对的问题的话，我觉得大可以不用考虑这些，直接讲您的最佳实践，我觉得更好！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572822699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447903,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/df/3aba2d8e.jpg","nickname":"DevOps在路上","note":"","ucode":"577E324546893C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334546,"discussion_content":"其实，老师说的已经是实战经验了。别人说的，永远是别人的，你不如亲自搭个环境，做几天配置管理工作，就有深切体会。别人即便说了，也不一定适合你。特别是devops, 它就是一个接口，每个公司有自己的实现。但是原理是相通的，就是老师讲的。\n\n我用了7年微软的TFS/Azure devops, 里面的蕴含的理念和老师讲的几乎一样。如果不知道怎么搞，建议玩玩 Azure devops. 就知道怎么搞devops 了。 微软的azure devops. 就是微软自己内部devops 的最佳实践的产物。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607876530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148193,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1572957241,"is_pvip":false,"replies":[{"id":"57252","content":"你好，坦率的说，我个人对于考证不是特别热衷，当然不是质疑认证本身的价值哈，对于咱们这行来说，单纯的输入式学习，效果不见得好，我觉得还得要看跟你当前工作或者未来发展方向相关的认证，就像你说的以考试来督促学习，但是也更建议通过输出来督促学习。就好比我在写这个专栏的过程中，有很多东西也不完全清楚，没有深究，但是为了体系化输出，就必须有针对性的补充相关的知识图谱哈。可以给自己定一个小目标，在团队内分享一个系列课程，说不定在交流中，会有新的收获哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573048871,"ip_address":"","comment_id":148193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14457859129","product_id":100036601,"comment_content":"老师，问一个和文章无关的问题。就是我自己打算每年考一个证，通过考证来督促自己学习。您觉得想要作为一个合格devopa工程师，哪一本证最值得考呢？AWS的SysOps Admin Associate含金量如何呢？谢谢","like_count":4,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473428,"discussion_content":"你好，坦率的说，我个人对于考证不是特别热衷，当然不是质疑认证本身的价值哈，对于咱们这行来说，单纯的输入式学习，效果不见得好，我觉得还得要看跟你当前工作或者未来发展方向相关的认证，就像你说的以考试来督促学习，但是也更建议通过输出来督促学习。就好比我在写这个专栏的过程中，有很多东西也不完全清楚，没有深究，但是为了体系化输出，就必须有针对性的补充相关的知识图谱哈。可以给自己定一个小目标，在团队内分享一个系列课程，说不定在交流中，会有新的收获哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573048871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146850,"user_name":"albertz","can_delete":false,"product_type":"c1","uid":1692689,"ip_address":"","ucode":"5382996C6613C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/11/8e10b82e.jpg","comment_is_top":false,"comment_ctime":1572675968,"is_pvip":false,"replies":[{"id":"56791","content":"没错，每个人写下的每一行代码和提交注释都是自身credit的体现，良好的习惯也要通过流程来培养，为了加速这个习惯的养成，适当的规则建立也是很有必要的。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572800695,"ip_address":"","comment_id":146850,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14457577856","product_id":100036601,"comment_content":"提交记录那部分让我想到这一点：Code Review的起始点应该是commit message，从这里可以看出一个开发人员对自己的工作成果是否有信心和责任心，以及表达能力。也是一种综合素质的体现。我们就是做软件配置管理的，没天看到的无数提交记录，真的是千奇百怪，良莠不齐，有的干脆是不知所云，或者就是写一串无意义的字符。现在我们通过工具强制填写JIRA号和任务信息，算是略有改善。所以我想说，对自己的代码负责，想让人刮目相看，从写好commit message做起。","like_count":4,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473032,"discussion_content":"没错，每个人写下的每一行代码和提交注释都是自身credit的体现，良好的习惯也要通过流程来培养，为了加速这个习惯的养成，适当的规则建立也是很有必要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572800695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149053,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1031113,"ip_address":"","ucode":"5948D359734193","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/c9/37924ad4.jpg","comment_is_top":false,"comment_ctime":1573131604,"is_pvip":false,"replies":[{"id":"57555","content":"的确像你说的，给一个人解释清楚配置管理是什么并不是一件简单的事情，就跟用一句话说明白DevOps是干啥的一样。不过，我倒觉得版本，变更，追溯都是配置管理的领域范畴，也是配置管理的目标，如果说做到全流程可追溯，大家可能理解起来会更直观一些，anyway，我觉得核心还是要把这些思想落在日常流程定义，工具平台开发里面才能发挥真正作用哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573314500,"ip_address":"","comment_id":149053,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868098900","product_id":100036601,"comment_content":"为啥叫配置管理 这个名字很容易让人想偏<br>版本管理 变更管理 追溯管理 感觉都比配置管理好理解","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473723,"discussion_content":"的确像你说的，给一个人解释清楚配置管理是什么并不是一件简单的事情，就跟用一句话说明白DevOps是干啥的一样。不过，我倒觉得版本，变更，追溯都是配置管理的领域范畴，也是配置管理的目标，如果说做到全流程可追溯，大家可能理解起来会更直观一些，anyway，我觉得核心还是要把这些思想落在日常流程定义，工具平台开发里面才能发挥真正作用哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573314500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147911,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1572918664,"is_pvip":false,"replies":[{"id":"57274","content":"你好，感谢你的留言，的确以DevOps的广度而言，其实每一讲的内容都可以独立展开为一篇专栏。为了帮助大家更好理解和上手，我也在准备一个完整的端到端流水线的实例，通过一次代码提交到上线的完整过程，来理解贯穿前面所讲过的这些实践理念，大约会在专栏靠后的部分上线哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573084154,"ip_address":"","comment_id":147911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867885960","product_id":100036601,"comment_content":"和前面同学一样的问题，老师讲的都是普适性的道理，但是否在实际操作中，接触devops比较少的话，听的感觉很爽，实际操作仍然感到不知从何入手呢？<br>极客时间，有不少专栏都是讲类似&quot;devops&quot;思维的课程的，内容都很精辟。希望可以搞一个入门级的&quot;devops实践&quot;，不需要结合学员们各种各样的场景。只是假设一个场景，走一遍流程，这样是否可以给读者一个更全面的认识呢","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473335,"discussion_content":"你好，感谢你的留言，的确以DevOps的广度而言，其实每一讲的内容都可以独立展开为一篇专栏。为了帮助大家更好理解和上手，我也在准备一个完整的端到端流水线的实例，通过一次代码提交到上线的完整过程，来理解贯穿前面所讲过的这些实践理念，大约会在专栏靠后的部分上线哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573084154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147380,"user_name":"工画师","can_delete":false,"product_type":"c1","uid":1025850,"ip_address":"","ucode":"FFABE897B2CF8E","user_header":"","comment_is_top":false,"comment_ctime":1572861404,"is_pvip":false,"replies":[{"id":"58834","content":"你好，我的理解配置管理和项目管理是不同的思路，配置管理虽然也会涉及到流程的梳理和定义，但这些都是为了更好的配合配置管理的理念而存在的手段，而项目管理是为了在资源、时间、范围的约束下达成目标，一个偏落地执行，一个偏优化改进，虽然实际工作中，这两拨人经常会打交道，但我看到的是冲突大于合作。。。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574181634,"ip_address":"","comment_id":147380,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867828700","product_id":100036601,"comment_content":"这次课程真的可以收藏了。我们公司现在就在做DevOps，通过访谈梳理出来的痛点，核心问题都集中在这次课程中提到的问题了，这四点是一切的源头。此外，我们还有一个问题是配置管理是从局部向上设计的，有些过度，把自己提升到管理和审批的角色，制定了复杂的流程、规范和交付物……所以我觉得这次课程再谈一下配置管理“度”和边界问题就完美了。配置管理会涉及变更管理和缺陷管理等，但相关联是否到了项目管理的控制程度，这个问题不能模糊，否则会阻碍自动化流程的效率。","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473235,"discussion_content":"你好，我的理解配置管理和项目管理是不同的思路，配置管理虽然也会涉及到流程的梳理和定义，但这些都是为了更好的配合配置管理的理念而存在的手段，而项目管理是为了在资源、时间、范围的约束下达成目标，一个偏落地执行，一个偏优化改进，虽然实际工作中，这两拨人经常会打交道，但我看到的是冲突大于合作。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574181634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146985,"user_name":"阿硕","can_delete":false,"product_type":"c1","uid":1210978,"ip_address":"","ucode":"39856C29E6614B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/62/9b248708.jpg","comment_is_top":false,"comment_ctime":1572751313,"is_pvip":false,"replies":[{"id":"56789","content":"你好，在以往公司内部都有专职的配置管理员，不过近些年来这个岗位本身有些模糊，在互联网公司随着流程和工具平台的成熟度提升，慢慢都会转到工程效率，版本团队来兼任，这个还是要看你们公司的业务形态，一般组织级会统一建设配置管理能力和规则。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572800476,"ip_address":"","comment_id":146985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867718609","product_id":100036601,"comment_content":"石老师，您好，请教下什么样的角色适合担当起配置管理呢？考核是统一管理还是各自独立呢？","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473087,"discussion_content":"你好，在以往公司内部都有专职的配置管理员，不过近些年来这个岗位本身有些模糊，在互联网公司随着流程和工具平台的成熟度提升，慢慢都会转到工程效率，版本团队来兼任，这个还是要看你们公司的业务形态，一般组织级会统一建设配置管理能力和规则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572800476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320370,"user_name":"east super","can_delete":false,"product_type":"c1","uid":1482768,"ip_address":"","ucode":"AF2C45CF748668","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/10/1fd3d66e.jpg","comment_is_top":false,"comment_ctime":1636279503,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636279503","product_id":100036601,"comment_content":"数据库每次变更的版本一般如何管理","like_count":0},{"had_liked":false,"id":267698,"user_name":"DevOps在路上","can_delete":false,"product_type":"c1","uid":1447903,"ip_address":"","ucode":"577E324546893C","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/df/3aba2d8e.jpg","comment_is_top":false,"comment_ctime":1607875517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607875517","product_id":100036601,"comment_content":"每次变更都强制关联需求编号<br><br>这个是 azure devops 里尤为明显，需求&#47;bug ID 和 后面的build id 关联，清楚记录某个build  包含了哪个变更， 哪个变更进入了哪个 build ...  ","like_count":0},{"had_liked":false,"id":261414,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1605326447,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605326447","product_id":100036601,"comment_content":"石老师好，我们现在的spring项目的配置是不提交的，因为每个人的本地配置都不一样，提交会造成冲突。如果要纳入版本控制，需要怎么来做，用profile，然后在启动类指定自己的profile吗？","like_count":0,"discussions":[{"author":{"id":1447903,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/df/3aba2d8e.jpg","nickname":"DevOps在路上","note":"","ucode":"577E324546893C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334549,"discussion_content":"建议还是统一不同环境的配置，比如dev, staging,prod 这样。保证搭建的配置都基于一样。否认，不同的配置，可能引发最后排除问题都是问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607876754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179990,"user_name":"风雨无阻","can_delete":false,"product_type":"c1","uid":1056736,"ip_address":"","ucode":"45161CE21957DE","user_header":"https://static001.geekbang.org/account/avatar/00/10/1f/e0/8e537227.jpg","comment_is_top":false,"comment_ctime":1582159080,"is_pvip":false,"replies":[{"id":"70737","content":"不一定，但是必须要纳入版本控制哈，比如我们这边对于流水线的配置是在一个独立的仓库中保存的，因为用户平常不需要关心这里的实现细节，更多的是在平台上操作，但是版本的概念还是无处不在的。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1582899232,"ip_address":"","comment_id":179990,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582159080","product_id":100036601,"comment_content":"有个实践问题一直困扰，请问jenkinsfile，dockerfile这些也跟源码放在一个仓库吗？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484482,"discussion_content":"不一定，但是必须要纳入版本控制哈，比如我们这边对于流水线的配置是在一个独立的仓库中保存的，因为用户平常不需要关心这里的实现细节，更多的是在平台上操作，但是版本的概念还是无处不在的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582899232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158190,"user_name":"zy86","can_delete":false,"product_type":"c1","uid":1207173,"ip_address":"","ucode":"8EAE3BD339E2BB","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/85/21751185.jpg","comment_is_top":false,"comment_ctime":1575344584,"is_pvip":false,"replies":[{"id":"60806","content":"嗯，工具还好，类似Inception之类的工具都比较成熟，关于数据库变更脚本，还是要有Review过程以及自动风险分析的，如果有危险操作不会通过自动化检查。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1575496838,"ip_address":"","comment_id":158190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575344584","product_id":100036601,"comment_content":"其实软件的版本管理好做。但是现在我感觉我们公司最难做的是数据库表结构变化的管理。我们是java开发。当然我们可以使用flyway这样的组件来做。但是又对这种自动的数据库脚本执行插件感到害怕。怕上线以后如果谁写了删库代码。那就尴尬了","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476661,"discussion_content":"嗯，工具还好，类似Inception之类的工具都比较成熟，关于数据库变更脚本，还是要有Review过程以及自动风险分析的，如果有危险操作不会通过自动化检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575496838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149237,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1361699,"ip_address":"","ucode":"E338DAC49A6536","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlOgnD0Xia5qqKfmkbckulLzRyedS6K0RiaV7mycY5FtvoJHSFUdcfWPwNwH9oP3hsL5v37OLzXHyQ/132","comment_is_top":false,"comment_ctime":1573177560,"is_pvip":false,"replies":[{"id":"58795","content":"赞，统一变更控制是核心能力，即便哪天不流行DevOps了，这个也不会过时的。<br>","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574141247,"ip_address":"","comment_id":149237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573177560","product_id":100036601,"comment_content":"全流程版本控制带来的好处，三年前因为一次事情自行做了版本控制，当然仅限于系统和数据库方面，但是节省了不少的排错时间，出现问题后，分析配置管理带来的可能影响，真是分分钟的事。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473789,"discussion_content":"赞，统一变更控制是核心能力，即便哪天不流行DevOps了，这个也不会过时的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574141247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148932,"user_name":"高山上的鱼","can_delete":false,"product_type":"c1","uid":1701918,"ip_address":"","ucode":"4E9368B5471B16","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/1e/a261d6ba.jpg","comment_is_top":false,"comment_ctime":1573112607,"is_pvip":false,"replies":[{"id":"57567","content":"你好，抱歉最近双11比较忙，才有时间统一回复大家的留言。<br>首先，我想说的是，配管并没有没落只不过是换了一种新的形态，更加关注于工程效率领域，比如效能产品，效能平台，效能落地项目等，我个人认为这个方向是很有前景的，也一直在这个方向摸索，所以，加油哈！<br>至于领导注重理论，我觉得也不是什么坏事，如果领导连理论都不懂，那就更是费劲了，当然我也相信领导更加关注结果，结果来源于实践，所以这个并不冲突。<br>关于你说的最后一个问题，我的建议是私聊哈，你可以加我微信：cendrier 😝","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573318032,"ip_address":"","comment_id":148932,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1573112607","product_id":100036601,"comment_content":"老师好，听了好长时间课程，第一次留言。从2012年至今一直在做配置管理相关工作，正如副标题所言确实是被忽略的工作。大家耳熟能详的都是开发、测试、运维等等，每次别人问我做啥的，我说配置管理，他们的表情都是一脸茫然。当接触到devops后，深深感觉到配置管理和devops的联系，配置管理其实是整个软件研发过程中的基础工作，项目之所以版本管理混乱也是没有配置管理意识，记得《配置管理最佳实践》中开篇强调，不懂配置管理的项目经理肯定不是一个好项目经理。这么多年的配置管理工作让我更加确定devops是未来我的方向。也专门学习过python开发、docker、k8s，并将java和php项目在k8s中实现，初步实现了开发提交代码到配置库，触发k8s平台创建jenkins master pod，然后触发创建jenkins slave pod进行持续集成，调用harbor仓库拉取基础镜像（tomcat,mysql等）进行部署，中间过程通过pipeline实现。但是在工作中领导更注重理论，不太关心实践，请教老师我怎么去开展工作比较有效。或者我需要具备哪些能力才能加入您所在的团队。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473674,"discussion_content":"你好，抱歉最近双11比较忙，才有时间统一回复大家的留言。\n首先，我想说的是，配管并没有没落只不过是换了一种新的形态，更加关注于工程效率领域，比如效能产品，效能平台，效能落地项目等，我个人认为这个方向是很有前景的，也一直在这个方向摸索，所以，加油哈！\n至于领导注重理论，我觉得也不是什么坏事，如果领导连理论都不懂，那就更是费劲了，当然我也相信领导更加关注结果，结果来源于实践，所以这个并不冲突。\n关于你说的最后一个问题，我的建议是私聊哈，你可以加我微信：cendrier 😝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573318032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447903,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/df/3aba2d8e.jpg","nickname":"DevOps在路上","note":"","ucode":"577E324546893C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334552,"discussion_content":"@高山上的鱼, 我们俩经历很像 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607877219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148191,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1572957093,"is_pvip":false,"replies":[{"id":"57253","content":"嗯，把每一次提交都当做自己的名片来对待，加油哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573048926,"ip_address":"","comment_id":148191,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572957093","product_id":100036601,"comment_content":"真是见Commit Message即见人品。是得好好学习如何写注释了，为了他人，也为了将来的自己…","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473426,"discussion_content":"嗯，把每一次提交都当做自己的名片来对待，加油哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573048926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146763,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1572652509,"is_pvip":false,"replies":[{"id":"56793","content":"可能随着企业规模的扩大，单一可信数据源的问题会越来越明显吧，至少在我所在的公司，这就是一个非常大的通病，各个系统之间难以有一套标准的语言来实现打通。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572801247,"ip_address":"","comment_id":146763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572652509","product_id":100036601,"comment_content":"      其实“版本变更标准化&quot;和&quot;全流程可追溯&quot;是一个典型问题：都是靠人的大致记忆或者去搜,很多会去抱怨干嘛写那么多&#47;详细的注释；领导不强行推或者说各自一个标准，其实这是后面出现问题排错的一个巨坑。<br>      &quot;单一可信数据源&quot;其实还好控制：测试测完了才能放上去，让软件测试去把关；彻底没有问题的才能放上去，这样就能避免不少问题。开发不写注释或者注释的问题确实很难强行去规范，除非不达标就不让上线。<br>      ","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473008,"discussion_content":"可能随着企业规模的扩大，单一可信数据源的问题会越来越明显吧，至少在我所在的公司，这就是一个非常大的通病，各个系统之间难以有一套标准的语言来实现打通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572801247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146744,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1572625888,"is_pvip":false,"replies":[{"id":"56794","content":"是的，如果标准不能固化在工具平台之中，的确容易流于形式，标准能够被绕过，说明还是没有重视这块的价值吧，这么细节的内容，可能领导也的确关注不到。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572801334,"ip_address":"","comment_id":146744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572625888","product_id":100036601,"comment_content":"四大理念里面，对于我们公司而言，最难的是第一条—版本变更标准化。<br><br>问题在于有了标准之后刚开始一段时间大家按部就班得按标准化流程去执行，后期处于疲态后完全忽视标准的存在，仅仅将成果物做了版本管理而已。主要原因我觉得是领导也睁一只眼闭一只眼","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473003,"discussion_content":"是的，如果标准不能固化在工具平台之中，的确容易流于形式，标准能够被绕过，说明还是没有重视这块的价值吧，这么细节的内容，可能领导也的确关注不到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572801334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}