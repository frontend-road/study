{"id":41149,"title":"07 | 链表（下）：如何轻松写出正确的链表代码？","content":"<p>上一节我讲了链表相关的基础知识。学完之后，我看到有人留言说，基础知识我都掌握了，但是写链表代码还是很费劲。哈哈，的确是这样的！</p><p>想要写好链表代码并不是容易的事儿，尤其是那些复杂的链表操作，比如链表反转、有序链表合并等，写的时候非常容易出错。从我上百场面试的经验来看，能把“链表反转”这几行代码写对的人不足10%。</p><p>为什么链表代码这么难写？究竟怎样才能比较轻松地写出正确的链表代码呢？</p><p>只要愿意投入时间，我觉得大多数人都是可以学会的。比如说，如果你真的能花上一个周末或者一整天的时间，就去写链表反转这一个代码，多写几遍，一直练到能毫不费力地写出Bug free的代码。这个坎还会很难跨吗？</p><p>当然，自己有决心并且付出精力是成功的先决条件，除此之外，我们还需要一些方法和技巧。我根据自己的学习经历和工作经验，总结了<strong>几个写链表代码技巧</strong>。如果你能熟练掌握这几个技巧，加上你的主动和坚持，轻松拿下链表代码完全没有问题。</p><h2>技巧一：理解指针或引用的含义</h2><p>事实上，看懂链表的结构并不是很难，但是一旦把它和指针混在一起，就很容易让人摸不着头脑。所以，要想写对链表代码，首先就要理解好指针。</p><p>我们知道，有些语言有“指针”的概念，比如C语言；有些语言没有指针，取而代之的是“引用”，比如Java、Python。不管是“指针”还是“引用”，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。</p><!-- [[[read_end]]] --><p>接下来，我会拿C语言中的“指针”来讲解，如果你用的是Java或者其他没有指针的语言也没关系，你把它理解成“引用”就可以了。</p><p>实际上，对于指针的理解，你只需要记住下面这句话就可以了：</p><p><strong>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。</strong></p><p>这句话听起来还挺拗口的，你可以先记住。我们回到链表代码的编写过程中，我来慢慢给你解释。</p><p>在编写链表代码的时候，我们经常会有这样的代码：p-&gt;next=q。这行代码是说，p结点中的next指针存储了q结点的内存地址。</p><p>还有一个更复杂的，也是我们写链表代码经常会用到的：p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p结点的next指针存储了p结点的下下一个结点的内存地址。</p><p>掌握了指针或引用的概念，你应该可以很轻松地看懂链表代码。恭喜你，已经离写出链表代码近了一步！</p><h2>技巧二：警惕指针丢失和内存泄漏</h2><p>不知道你有没有这样的感觉，写链表代码的时候，指针指来指去，一会儿就不知道指到哪里了。所以，我们在写的时候，一定注意不要弄丢了指针。</p><p>指针往往都是怎么弄丢的呢？我拿单链表的插入操作为例来给你分析一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/6e/05a4a3b57502968930d517c934347c6e.jpg?wh=1142*513\" alt=\"\"></p><p>如图所示，我们希望在结点a和相邻的结点b之间插入结点x，假设当前指针p指向结点a。如果我们将代码实现变成下面这个样子，就会发生指针丢失和内存泄露。</p><pre><code>p-&gt;next = x;  // 将p的next指针指向x结点；\nx-&gt;next = p-&gt;next;  // 将x的结点的next指针指向b结点；\n</code></pre><p>初学者经常会在这儿犯错。p-&gt;next指针在完成第一步操作之后，已经不再指向结点b了，而是指向结点x。第2行代码相当于将x赋值给x-&gt;next，自己指向自己。因此，整个链表也就断成了两半，从结点b往后的所有结点都无法访问到了。</p><p>对于有些语言来说，比如C语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露。所以，我们<strong>插入结点时，一定要注意操作的顺序</strong>，要先将结点x的next指针指向结点b，再把结点a的next指针指向结点x，这样才不会丢失指针，导致内存泄漏。所以，对于刚刚的插入代码，我们只需要把第1行和第2行代码的顺序颠倒一下就可以了。</p><p>同理，<strong>删除链表结点时，也一定要记得手动释放内存空间</strong>，否则，也会出现内存泄漏的问题。当然，对于像Java这种虚拟机自动管理内存的编程语言来说，就不需要考虑这么多了。</p><h2>技巧三：利用哨兵简化实现难度</h2><p>首先，我们先来回顾一下单链表的插入和删除操作。如果我们在结点p后面插入一个新的结点，只需要下面两行代码就可以搞定。</p><pre><code>new_node-&gt;next = p-&gt;next;\np-&gt;next = new_node;\n</code></pre><p>但是，当我们要向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中head表示链表的头结点。所以，从这段代码，我们可以发现，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不一样的。</p><pre><code>if (head == null) {\n  head = new_node;\n}\n</code></pre><p>我们再来看单链表结点删除操作。如果要删除结点p的后继结点，我们只需要一行代码就可以搞定。</p><pre><code>p-&gt;next = p-&gt;next-&gt;next;\n</code></pre><p>但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不work了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：</p><pre><code>if (head-&gt;next == null) {\n   head = null;\n}\n</code></pre><p>从前面的一步一步分析，我们可以看出，<strong>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理</strong>。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。如何来解决这个问题呢？</p><p>技巧三中提到的哨兵就要登场了。哨兵，解决的是国家之间的边界问题。同理，这里说的哨兵也是解决“边界问题”的，不直接参与业务逻辑。</p><p>还记得如何表示一个空链表吗？head=null表示链表中没有结点了。其中head表示头结点指针，指向链表中的第一个结点。</p><p>如果我们引入哨兵结点，在任何时候，不管链表是不是空，head指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫<strong>带头链表</strong>。相反，没有哨兵结点的链表就叫作<strong>不带头链表</strong>。</p><p>我画了一个带头链表，你可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/c7/7d22d9428bdbba96bfe388fe1e3368c7.jpg?wh=1142*382\" alt=\"\"></p><p>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。这些内容我们后面才会讲，现在为了让你感受更深，我再举一个非常简单的例子。代码我是用C语言实现的，不涉及语言方面的高级语法，很容易看懂，你可以类比到你熟悉的语言。</p><p>代码一：</p><pre><code>// 在数组a中，查找key，返回key所在的位置\n// 其中，n表示数组a的长度\nint find(char* a, int n, char key) {\n  // 边界条件处理，如果a为空，或者n&lt;=0，说明数组中没有数据，就不用while循环比较了\n  if(a == null || n &lt;= 0) {\n    return -1;\n  }\n  \n  int i = 0;\n  // 这里有两个比较操作：i&lt;n和a[i]==key.\n  while (i &lt; n) {\n    if (a[i] == key) {\n      return i;\n    }\n    ++i;\n  }\n  \n  return -1;\n}\n</code></pre><p>代码二：</p><pre><code>// 在数组a中，查找key，返回key所在的位置\n// 其中，n表示数组a的长度\n// 我举2个例子，你可以拿例子走一下代码\n// a = {4, 2, 3, 5, 9, 6}  n=6 key = 7\n// a = {4, 2, 3, 5, 9, 6}  n=6 key = 6\nint find(char* a, int n, char key) {\n  if(a == null || n &lt;= 0) {\n    return -1;\n  }\n  \n  // 这里因为要将a[n-1]的值替换成key，所以要特殊处理这个值\n  if (a[n-1] == key) {\n    return n-1;\n  }\n  \n  // 把a[n-1]的值临时保存在变量tmp中，以便之后恢复。tmp=6。\n  // 之所以这样做的目的是：希望find()代码不要改变a数组中的内容\n  char tmp = a[n-1];\n  // 把key的值放到a[n-1]中，此时a = {4, 2, 3, 5, 9, 7}\n  a[n-1] = key;\n  \n  int i = 0;\n  // while 循环比起代码一，少了i&lt;n这个比较操作\n  while (a[i] != key) {\n    ++i;\n  }\n  \n  // 恢复a[n-1]原来的值,此时a= {4, 2, 3, 5, 9, 6}\n  a[n-1] = tmp;\n  \n  if (i == n-1) {\n    // 如果i == n-1说明，在0...n-2之间都没有key，所以返回-1\n    return -1;\n  } else {\n    // 否则，返回i，就是等于key值的元素的下标\n    return i;\n  }\n}\n</code></pre><p>对比两段代码，在字符串a很长的时候，比如几万、几十万，你觉得哪段代码运行得更快点呢？答案是代码二，因为两段代码中执行次数最多就是while循环那一部分。第二段代码中，我们通过一个哨兵a[n-1] = key，成功省掉了一个比较语句i&lt;n，不要小看这一条语句，当累积执行万次、几十万次时，累积的时间就很明显了。</p><p>当然，这只是为了举例说明哨兵的作用，你写代码的时候千万不要写第二段那样的代码，因为可读性太差了。大部分情况下，我们并不需要如此追求极致的性能。</p><h2>技巧四：重点留意边界条件处理</h2><p>软件开发中，代码在一些边界或者异常情况下，最容易产生Bug。链表代码也不例外。要实现没有Bug的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。</p><p>我经常用来检查链表代码是否正确的边界条件有这样几个：</p><ul>\n<li>\n<p>如果链表为空时，代码是否能正常工作？</p>\n</li>\n<li>\n<p>如果链表只包含一个结点时，代码是否能正常工作？</p>\n</li>\n<li>\n<p>如果链表只包含两个结点时，代码是否能正常工作？</p>\n</li>\n<li>\n<p>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</p>\n</li>\n</ul><p>当你写完链表代码之后，除了看下你写的代码在正常的情况下能否工作，还要看下在上面我列举的几个边界条件下，代码仍然能否正确工作。如果这些边界条件下都没有问题，那基本上可以认为没有问题了。</p><p>当然，边界条件不止我列举的那些。针对不同的场景，可能还有特定的边界条件，这个需要你自己去思考，不过套路都是一样的。</p><p>实际上，不光光是写链表代码，你在写任何代码时，也千万不要只是实现业务正常情况下的功能就好了，一定要多想想，你的代码在运行的时候，可能会遇到哪些边界情况或者异常情况。遇到了应该如何应对，这样写出来的代码才够健壮！</p><h2>技巧五：举例画图，辅助思考</h2><p>对于稍微复杂的链表操作，比如前面我们提到的单链表反转，指针一会儿指这，一会儿指那，一会儿就被绕晕了。总感觉脑容量不够，想不清楚。所以这个时候就要使用大招了，<strong>举例法</strong>和<strong>画图法</strong>。</p><p>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。比如往单链表中插入一个数据这样一个操作，我一般都是把各种情况都举一个例子，画出插入前和插入后的链表变化，如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/f8/4a701dd79b59427be654261805b349f8.jpg?wh=1142*640\" alt=\"\"></p><p>看图写代码，是不是就简单多啦？而且，当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易就能发现代码中的Bug。</p><h2>技巧六：多写多练，没有捷径</h2><p>如果你已经理解并掌握了我前面所讲的方法，但是手写链表代码还是会出现各种各样的错误，也不要着急。因为我最开始学的时候，这种状况也持续了一段时间。</p><p>现在我写这些代码，简直就和“玩儿”一样，其实也没有什么技巧，就是把常见的链表操作都自己多写几遍，出问题就一点一点调试，熟能生巧！</p><p>所以，我精选了5个常见的链表操作。你只要把这几个操作都能写熟练，不熟就多写几遍，我保证你之后再也不会害怕写链表代码。</p><ul>\n<li>\n<p>单链表反转</p>\n</li>\n<li>\n<p>链表中环的检测</p>\n</li>\n<li>\n<p>两个有序的链表合并</p>\n</li>\n<li>\n<p>删除链表倒数第n个结点</p>\n</li>\n<li>\n<p>求链表的中间结点</p>\n</li>\n</ul><h2>内容小结</h2><p>这节我主要和你讲了写出正确链表代码的六个技巧。分别是理解指针或引用的含义、警惕指针丢失和内存泄漏、利用哨兵简化实现难度、重点留意边界条件处理，以及举例画图、辅助思考，还有多写多练。</p><p>我觉得，<strong>写链表代码是最考验逻辑思维能力的</strong>。因为，链表代码到处都是指针的操作、边界条件的处理，稍有不慎就容易产生Bug。链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。所以，这也是很多面试官喜欢让人手写链表代码的原因。所以，这一节讲到的东西，你一定要自己写代码实现一下，才有效果。</p><h2>课后思考</h2><p>今天我们讲到用哨兵来简化编码实现，你是否还能够想到其他场景，利用哨兵可以大大地简化编码难度？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p><hr><p><span class=\"orange\">我已将本节内容相关的详细代码更新到GitHub，<a href=\"https://github.com/wangzheng0822/algo\">戳此</a>即可查看。</span></p>","comments":[{"had_liked":true,"id":30319,"user_name":"zeta","can_delete":false,"product_type":"c1","uid":1255260,"ip_address":"","ucode":"AF84A72375827C","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/5c/ee2a876f.jpg","comment_is_top":true,"comment_ctime":1538791800,"is_pvip":false,"replies":[{"id":"10962","content":"👍，高手！实际上，写链表代码还是主要为了锻炼写代码的能力，倒不是思考解决办法。像环的检测这种解决办法我也想不出来，都是看了答案之后恍然大悟。","user_name":"作者回复","comment_id":30319,"uid":"1190123","ip_address":"","utype":1,"ctime":1538838671,"user_name_real":"gg"}],"discussion_count":20,"race_medal":0,"score":"9.2233754528926003e+18","product_id":100017301,"comment_content":"建议大家在实现之前的思考时间不要太长。一是先用自己能想到的暴力方法实现试试。另外就是在一定时间内(比如半个到一个小时)实在想不到就要在网上搜搜答案。有的算法，比如链表中环的检测，的最优解法还是挺巧妙的，一般来说不是生想就能想到的","like_count":796,"discussions":[{"author":{"id":1264290,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/a2/37640e95.jpg","nickname":"大汉","note":"","ucode":"76CB9AF7AA5D24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25429,"discussion_content":"想到孔子一句话“吾尝终日不食终夜不寝以思无益不如学也”","likes_number":40,"is_delete":false,"is_hidden":false,"ctime":1570527416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2890949,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/c5/3df9fa5e.jpg","nickname":"路远","note":"","ucode":"46DCE2D12D38C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264290,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/a2/37640e95.jpg","nickname":"大汉","note":"","ucode":"76CB9AF7AA5D24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545973,"discussion_content":"所谓学而不思则罔，思而不学则殆","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1642117783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":25429,"ip_address":""},"score":545973,"extra":""}]},{"author":{"id":1834181,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","nickname":"BugBean","note":"","ucode":"B51232281AD9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229493,"discussion_content":"好奇第一个想到的人是怎么想的","likes_number":31,"is_delete":false,"is_hidden":false,"ctime":1586657812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120816,"discussion_content":"快慢指针惊为天人","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1578297820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129916,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3d/bc/6fd3f94e.jpg","nickname":"Mr.Suitable","note":"","ucode":"9FEE43D6354690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120742,"discussion_content":"快慢指针法，非常巧妙了！leetcode有原题","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1578292585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1567940,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ec/c4/19f85ada.jpg","nickname":"乃鱼同学","note":"","ucode":"50A96C24978057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60637,"discussion_content":"如果你的目标是做一个GPS ，就不要从头推导相对论，理解原理，能用到对应的场景最重要。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1574742910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17162,"discussion_content":"主要为了锻炼写代码的能力的思想很受益。很多解题思路让我感觉智商堪忧","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1568951659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22901,"discussion_content":"领会了写算法的目的后，虽然被各种算法暴殄，但是我依然积极向上","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1569726159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":17162,"ip_address":""},"score":22901,"extra":""},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57662,"discussion_content":"脑子会与手会不是一回事","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574639858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":17162,"ip_address":""},"score":57662,"extra":""},{"author":{"id":1240490,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ed/aa/67fbccda.jpg","nickname":"soulful","note":"","ucode":"93105631E8106A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218886,"discussion_content":"写算法的目的是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585711308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":22901,"ip_address":""},"score":218886,"extra":""}]},{"author":{"id":1207038,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","nickname":"布衣","note":"","ucode":"BFAD9049508330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":691,"discussion_content":"/链表翻转2\nlinkNode* linkReversal2(linkNode* link) {\n    if (!link) return NULL;\n    linkNode *p = link->next;//p指向第一个节点\n    linkNode *p2 = p->next;\n    p->next = NULL;\n    \n    while(NULL != p2) {\n        linkNode *temp = p;\n        p = p2;\n        p2 = p2->next;\n        p->next = temp;\n    }\n    link->next = p;\n    return link;\n}","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1561963343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275407,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/0f/c7c8021d.jpg","nickname":"豆豆","note":"","ucode":"97788B134C3212","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282798,"discussion_content":"看到老师的回复，给了我信心，很多时候应该都是这样的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1592095774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425939,"discussion_content":"👍，高手！实际上，写链表代码还是主要为了锻炼写代码的能力，倒不是思考解决办法。像环的检测这种解决办法我也想不出来，都是看了答案之后恍然大悟。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1538838671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207038,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","nickname":"布衣","note":"","ucode":"BFAD9049508330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":690,"discussion_content":"//链表翻转\nlinkNode* linkReversal(linkNode* link) {\n    if (!link) return NULL;\n    linkNode *p = link->next;//p指向第一个节点\n    \n    //把第p节点后面的节点一次插入到头节点的后面\n    while(NULL != p->next) {\n        //第一步取出p节点(原来的第一个节点)的下一个节点\n        linkNode *pNext = p->next;\n        p->next = p->next->next;\n        \n        //把取出来的节点插入到头结点后面\n        linkNode *linkNext = link->next;\n        link->next = pNext;\n        pNext->next = linkNext;\n    }\n    \n    return link;\n}","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1561962375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564648,"discussion_content":"快慢指针yyds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650292790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821728,"avatar":"","nickname":"600988292","note":"","ucode":"24BAE2B7A7B1E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414716,"discussion_content":"LNode* reverse_link(LNode* lhead){\n\n    LNode* newNode = NULL;\n    LNode* tempNext = NULL;\n    \n    while(lhead){\n        //1.暂存当前链表的下一个节点\n        tempNext = lhead->next;\n        //2.把当前链表的当前节点插入新节点的头部\n        lhead->next = newNode;\n        //3.新节点的指针指向头结点，才能代表整个新链表\n        newNode = lhead;\n        //4.接着处理当前链表的下一个节点\n        lhead = tempNext;\n    }\n\n    return newNode;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636871409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676937,"avatar":"https://static001.geekbang.org/account/avatar/00/19/96/89/3876a4b8.jpg","nickname":"付寒宇Bazinga","note":"","ucode":"D24D7185447A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356076,"discussion_content":"确实，很多问题除了暴力解法偶尔会有些模棱两可的思路和方向，但是如何自己想彻底想出来那真的太费时间了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615527057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349961,"discussion_content":"有时就是这样啊,一时间想不到最优的解决方法,在之后迭代中慢慢实现优化了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613644571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1956589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoyNOEic1I3QM2hyFYU3t7OrzicJK6woJQDiaKhq0alwt3twdriba944GsBibe2tuN99242o1HicV4VIcsg/132","nickname":"Geek_1b58fa","note":"","ucode":"0D0F983B8E2109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228518,"discussion_content":"是每次作业全做完再去看下一章，还是先看作业慢慢啃。合并有序链表只看懂了递归，移动指针都没看懂虚拟头节点的值什么时候变得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586539552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634890,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/4a/613d8ea7.jpg","nickname":"Zak","note":"","ucode":"40EF2AD4928530","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209123,"discussion_content":"不单步，都不知道是这样一个演变过程...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584612194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":30395,"user_name":"0xFFFFFFFF","can_delete":false,"product_type":"c1","uid":1110672,"ip_address":"","ucode":"E06B669AF2DD0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/90/e3e19c6e.jpg","comment_is_top":false,"comment_ctime":1538823169,"is_pvip":false,"replies":[{"id":"10953","content":"我可以集中写一篇练习题的。现在这种思考题的方式是早就定好的了。不好改了。","user_name":"作者回复","comment_id":30395,"uid":"1190123","ip_address":"","utype":1,"ctime":1538838022,"user_name_real":"gg"}],"discussion_count":51,"race_medal":0,"score":"4129002394625","product_id":100017301,"comment_content":"练习题LeetCode对应编号：206，141，21，19，876。大家可以去练习，另外建议作者兄每章直接给出LC的题目编号或链接方便大家练习。","like_count":962,"discussions":[{"author":{"id":1165639,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/47/d5789a94.jpg","nickname":"兔子先生只喝热水🍵","note":"","ucode":"921CC974035117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219790,"discussion_content":"我感觉跟好不好改没关系。需求是写出Leetcode编号，不好加在讲义里，可以写在评论里。像这个老铁一样，很棒。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1585808820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1165639,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/47/d5789a94.jpg","nickname":"兔子先生只喝热水🍵","note":"","ucode":"921CC974035117","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258844,"discussion_content":"嗯嗯\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588732521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219790,"ip_address":""},"score":258844,"extra":""}]},{"author":{"id":1445106,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","nickname":"Geek_f04d81","note":"","ucode":"ECD9F1BE0B2186","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301346,"discussion_content":"https://leetcode.com/tag/linked-list/ \n各位 去吧 我已经整到83了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598496941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129916,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3d/bc/6fd3f94e.jpg","nickname":"Mr.Suitable","note":"","ucode":"9FEE43D6354690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120752,"discussion_content":"妈也，你这个几个题我居然都写掉了...惊喜","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578293565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1149434,"avatar":"https://static001.geekbang.org/account/avatar/00/11/89/fa/e4f7871f.jpg","nickname":"老二虾","note":"","ucode":"578BC92A00E40A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3008,"discussion_content":"https://leetcode-cn.com 这个网站有，进去直接用题号搜","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1564109953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425978,"discussion_content":"我可以集中写一篇练习题的。现在这种思考题的方式是早就定好的了。不好改了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1538838022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341161,"discussion_content":"已全部在leetcode收藏开刷, 顶你上去","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610334493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1598481,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/11/5a5bf036.jpg","nickname":"Mr.L","note":"","ucode":"997AF2B948804D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1607,"discussion_content":"怎么查啊老铁？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562727848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1460037,"avatar":"https://static001.geekbang.org/account/avatar/00/16/47/45/e5ebf75e.jpg","nickname":"妈妈说名字起太长点赞时候能占一行","note":"","ucode":"3439D203EC5789","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580351,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658125348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042507,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/4b/57fa0e34.jpg","nickname":"brianway","note":"","ucode":"E05738C88829C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561795,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649726028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1577210,"avatar":"https://static001.geekbang.org/account/avatar/00/18/10/fa/d977627e.jpg","nickname":"刘大人","note":"","ucode":"F66AE613E80398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538516,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639438883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821728,"avatar":"","nickname":"600988292","note":"","ucode":"24BAE2B7A7B1E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414766,"discussion_content":"已按照题号顺序练习完毕，感谢分享~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636889802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2829938,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/2e/72/6772f172.jpg","nickname":"ᯤ¹º²⁴ᴳ⁺","note":"","ucode":"8EEF0251BAE054","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410748,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635769947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2671820,"avatar":"https://static001.geekbang.org/account/avatar/00/28/c4/cc/2b295a92.jpg","nickname":"今天敲代码了吗？","note":"","ucode":"FED786ED6AC2A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404905,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634455769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585142,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2f/f6/c67b6c62.jpg","nickname":"茧","note":"","ucode":"F655D7258FEC90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400508,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633282445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2762634,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoBvqEtL5jPfibavnGmvicCVndB1VabyrlZjls3KdYaN4FuaViaFDVRgVoWPmczXlfTvz83WGLPyicXgw/132","nickname":"Geek_cddbfa","note":"","ucode":"09A04136394E24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398029,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632719104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2734401,"avatar":"","nickname":"Geek_d11690","note":"","ucode":"F776DACB56DABF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391112,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630298616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1331930,"avatar":"https://static001.geekbang.org/account/avatar/00/14/52/da/f8cece3f.jpg","nickname":"帅不过王力宏","note":"","ucode":"0B36C12FC0721D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386513,"discussion_content":"看完上一篇文章自己就想到要想到要学会写链表反转了，没想到这一篇真有提到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627622889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512616,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/NtKFIwXk9tsdib8th6qzkwQutz8Ocsq7VaHTc4lwvGfaRlGOKTub1M3xbMZvKkoFH928KV6riagoZ3Vl7polVdRg/132","nickname":"Geek_mofei004","note":"","ucode":"83DA31D8D2268F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383501,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626137310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228950,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLTOaSibFSEnoF6RP1g8ZYBnCDaIcdicpcNTibcicEpqInDKQXPrVOjM60SJZea8XXaNgEsrwTrqhrT2Q/132","nickname":"布鲁斯李","note":"","ucode":"96AB40F83D6F1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383477,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626106967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139128,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJh4fE4WryeIpjKCYB7TuWS2IEFV0paiaZt3hSh8jrPZRD8cvalPWndTv1VbdDiaEKibY0IgGGPEMbCw/132","nickname":"刘聪为","note":"","ucode":"8DFDCA7B37D04E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382728,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625707851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2688952,"avatar":"https://static001.geekbang.org/account/avatar/00/29/07/b8/d93576dc.jpg","nickname":"猪猪奇吃饭啦","note":"","ucode":"F309D06155ED93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382643,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625652098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1869375,"avatar":"","nickname":"汤诗尧","note":"","ucode":"A6682BB231691E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377386,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622624890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2599089,"avatar":"https://static001.geekbang.org/account/avatar/00/27/a8/b1/092b658f.jpg","nickname":"Geek_d60492","note":"","ucode":"9A79B12F0D3D63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376438,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622124226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2630424,"avatar":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","nickname":"易飞","note":"","ucode":"32AC28754237F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375295,"discussion_content":"马克","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621565146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2625677,"avatar":"https://static001.geekbang.org/account/avatar/00/28/10/8d/abf02c56.jpg","nickname":"王兴","note":"","ucode":"3EF1AC47EE7C78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375070,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621474590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1761882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MEbNM8XV6wRGJnVhZx58J21rBiboLhGdXpibLxHX4EwHltgqK5BPElanIiaIicPzBiaKZ63jia4GGGM3wbp2fYco8WSQ/132","nickname":"Geek_514f5a","note":"","ucode":"22A39E20B725D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371334,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619742530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2098388,"avatar":"https://static001.geekbang.org/account/avatar/00/20/04/d4/0b6de43b.jpg","nickname":"小渣","note":"","ucode":"816ABE53BF3C3C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370182,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619321588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2575914,"avatar":"https://static001.geekbang.org/account/avatar/00/27/4e/2a/41db4a2c.jpg","nickname":"Geek","note":"","ucode":"CD2C5AB66EA7C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370002,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619247583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2566646,"avatar":"https://static001.geekbang.org/account/avatar/00/27/29/f6/4e01eb02.jpg","nickname":"Paperback、","note":"","ucode":"118CBCF232A14F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368319,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618652910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2456360,"avatar":"https://static001.geekbang.org/account/avatar/00/25/7b/28/e12b7b19.jpg","nickname":"O","note":"","ucode":"5E1FBC4C6747A3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365015,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617685944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2524479,"avatar":"https://static001.geekbang.org/account/avatar/00/26/85/3f/e77a6e4c.jpg","nickname":"Vonct","note":"","ucode":"4511797597786D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361460,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616674803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2181172,"avatar":"","nickname":"繁缕δ","note":"","ucode":"9169BA947C9396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358965,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616079167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2143290,"avatar":"https://static001.geekbang.org/account/avatar/00/20/b4/3a/53b27094.jpg","nickname":"间接性失忆患者","note":"","ucode":"73593933070CB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358254,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615953285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586442,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/9NlkjGZsIMIdmNjpeBRU8Netpfy4xW64WYQjxF8PThmmAwQicxNhKPM0Licva5aypHV3YMSibyI7Vd6m83FibIauaA/132","nickname":"Geek_e790b5","note":"","ucode":"4459362B7C466C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357522,"discussion_content":"cy","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615816637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2369743,"avatar":"https://static001.geekbang.org/account/avatar/00/24/28/cf/7a1c98df.jpg","nickname":"朴素的心态","note":"","ucode":"4E9CEF283E442D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352246,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614662403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440338,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3c/92/81fa306d.jpg","nickname":"张Dave","note":"","ucode":"0E8B6FDEB7505B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351224,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614180124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795821,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/66/ed/a1233b74.jpg","nickname":"蔡冰成","note":"","ucode":"A1C50B0121C6C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336524,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608615701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2038353,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1a/51/ac2d80fc.jpg","nickname":"苏苏","note":"","ucode":"35A4EC6F75D453","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336072,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608469717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2112857,"avatar":"https://static001.geekbang.org/account/avatar/00/20/3d/59/70fe55d2.jpg","nickname":"屯子神技大学","note":"","ucode":"D8A746CE8347C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309518,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601312737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2168507,"avatar":"https://static001.geekbang.org/account/avatar/00/21/16/bb/5043e1b6.jpg","nickname":"内个胖纸🙈","note":"","ucode":"C990344807B074","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305227,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599821641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302220,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598845436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2117748,"avatar":"https://static001.geekbang.org/account/avatar/00/20/50/74/67009969.jpg","nickname":"Geek_08cfb9","note":"","ucode":"F3A863AA0B16D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300605,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598189711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/ca/b3d3513e.jpg","nickname":"掌柜","note":"","ucode":"933C65E1638174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296761,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596640154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067165,"avatar":"https://static001.geekbang.org/account/avatar/00/10/48/9d/83ea5a9f.jpg","nickname":"Winter","note":"","ucode":"D5F1932CC0C749","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294319,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595854047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266160,"avatar":"https://static001.geekbang.org/account/avatar/00/13/51/f0/9b7d40fc.jpg","nickname":"萧一狼","note":"","ucode":"35CC9C8FC8DDD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294217,"discussion_content":"插眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595831696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526428,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMicvN0PDCMibmBvwAyoScCjjgfLBWaQwGic9ialXObicxKib9X0T0gx02gL4jqvibEr1FRzMaiaicN8cgEBg/132","nickname":"Geek_ac4080","note":"","ucode":"E2C480962E6CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290053,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594310334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1989883,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/LtHjTGlnOMYwm7C1LZEIWpvys5ya8rwYnBqegs9ibdKiciavnCXwqCzatg9RKzDY2qcDjnVqbk6mfR36ROAwY54fg/132","nickname":"201201255","note":"","ucode":"04EB224B2DB692","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284609,"discussion_content":"好人必须点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592568410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237729,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/e1/036df099.jpg","nickname":"vice","note":"","ucode":"1BAAADCD7FE135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271866,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590208051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1911733,"avatar":"","nickname":"且听风吟","note":"","ucode":"51549E28661CEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212779,"discussion_content":"好人一生平安","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585014468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109361,"discussion_content":"好人👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577687535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30151,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1538703943,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"1534842028615","product_id":100017301,"comment_content":"总结：如何优雅的写出链表代码？6大学习技巧<br><br>一、理解指针或引用的含义<br>1.含义：将某个变量（对象）赋值给指针（引用），实际上就是就是将这个变量（对象）的地址赋值给指针（引用）。<br>2.示例：<br>p—&gt;next = q; 表示p节点的后继指针存储了q节点的内存地址。<br>p—&gt;next = p—&gt;next—&gt;next; 表示p节点的后继指针存储了p节点的下下个节点的内存地址。<br><br>二、警惕指针丢失和内存泄漏（单链表）<br>1.插入节点<br>在节点a和节点b之间插入节点x，b是a的下一节点，，p指针指向节点a，则造成指针丢失和内存泄漏的代码：p—&gt;next = x;x—&gt;next = p—&gt;next; 显然这会导致x节点的后继指针指向自身。<br>正确的写法是2句代码交换顺序，即：x—&gt;next = p—&gt;next; p—&gt;next = x;<br>2.删除节点<br>在节点a和节点b之间删除节点b，b是a的下一节点，p指针指向节点a：p—&gt;next = p—&gt;next—&gt;next;<br><br>三、利用“哨兵”简化实现难度<br>1.什么是“哨兵”？<br>链表中的“哨兵”节点是解决边界问题的，不参与业务逻辑。如果我们引入“哨兵”节点，则不管链表是否为空，head指针都会指向这个“哨兵”节点。我们把这种有“哨兵”节点的链表称为带头链表，相反，没有“哨兵”节点的链表就称为不带头链表。<br>2.未引入“哨兵”的情况<br>如果在p节点后插入一个节点，只需2行代码即可搞定：<br>new_node—&gt;next = p—&gt;next;<br>p—&gt;next = new_node;<br>但，若向空链表中插入一个节点，则代码如下：<br>if(head == null){<br>head = new_node;<br>}<br>如果要删除节点p的后继节点，只需1行代码即可搞定：<br>p—&gt;next = p—&gt;next—&gt;next;<br>但，若是删除链表的最有一个节点（链表中只剩下这个节点），则代码如下：<br>if(head—&gt;next == null){<br>head = null;<br>}<br>从上面的情况可以看出，针对链表的插入、删除操作，需要对插入第一个节点和删除最后一个节点的情况进行特殊处理。这样代码就会显得很繁琐，所以引入“哨兵”节点来解决这个问题。<br>3.引入“哨兵”的情况<br>“哨兵”节点不存储数据，无论链表是否为空，head指针都会指向它，作为链表的头结点始终存在。这样，插入第一个节点和插入其他节点，删除最后一个节点和删除其他节点都可以统一为相同的代码实现逻辑了。<br>4.“哨兵”还有哪些应用场景？<br>这个知识有限，暂时想不出来呀！但总结起来，哨兵最大的作用就是简化边界条件的处理。<br><br>四、重点留意边界条件处理<br>经常用来检查链表是否正确的边界4个边界条件：<br>1.如果链表为空时，代码是否能正常工作？<br>2.如果链表只包含一个节点时，代码是否能正常工作？<br>3.如果链表只包含两个节点时，代码是否能正常工作？<br>4.代码逻辑在处理头尾节点时是否能正常工作？<br><br>五、举例画图，辅助思考<br>核心思想：释放脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。<br><br>六、多写多练，没有捷径<br>5个常见的链表操作：<br>1.单链表反转<br>2.链表中环的检测<br>3.两个有序链表合并<br>4.删除链表倒数第n个节点<br>5.求链表的中间节点","like_count":358,"discussions":[{"author":{"id":1380312,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0f/d8/9286b272.jpg","nickname":"leetcode","note":"","ucode":"3B8C3668A0DE74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212858,"discussion_content":"课代表请坐","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585024282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214942,"discussion_content":"课代表一枚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585249886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212438,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpaa2pEggFCtaX455yukBbnhoD95AG2WAfyUxG69xFnYyR93A0PibACNgZaEZpDq8t8XkgTAibzaRw/132","nickname":"barnabas","note":"","ucode":"87FB55480C5C84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587817,"discussion_content":"关于指针赋值的顺序问题，如果先保存老值到临时变量，再修改指针，一般就不会有错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663304291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313482,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/ca/f5680477.jpg","nickname":"ding","note":"","ucode":"271B9291A522C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546910,"discussion_content":"你是369的姜维吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642468967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231623,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cb/07/482b7155.jpg","nickname":"牛玉富","note":"","ucode":"DD962676F8FAF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542863,"discussion_content":"课代表请坐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640866192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2338615,"avatar":"https://static001.geekbang.org/account/avatar/00/23/af/37/bcb458e7.jpg","nickname":"敬畏之心","note":"","ucode":"92C25917D4A09B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329674,"discussion_content":"插入节点出错哪里，有兄弟可以稍微解释一下嘛，没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606446154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","nickname":"Wheat","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2338615,"avatar":"https://static001.geekbang.org/account/avatar/00/23/af/37/bcb458e7.jpg","nickname":"敬畏之心","note":"","ucode":"92C25917D4A09B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358533,"discussion_content":"如果先a.next=x再x.next=a.next，x就自己指自己了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615992006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329674,"ip_address":""},"score":358533,"extra":""}]},{"author":{"id":1235495,"avatar":"https://static001.geekbang.org/account/avatar/00/12/da/27/a1618737.jpg","nickname":"1KG","note":"","ucode":"857C432444EBCC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285246,"discussion_content":"品学兼优","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592790834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528671,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","nickname":"Geek_63ad86","note":"","ucode":"E758532B1169D6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273658,"discussion_content":"认真的课代表！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590485235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1848474,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","nickname":"JDY","note":"","ucode":"4B6F55332BE6DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189138,"discussion_content":"谢谢学习委员。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582854179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800628,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/79/b4/51efcb0d.jpg","nickname":"Yellow","note":"","ucode":"6378FDFA5DC798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124348,"discussion_content":"还是没明白那两个交换顺序的指针情况能详细说一下么大佬？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578413867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1133215,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4a/9f/4883cca1.jpg","nickname":"崔华明","note":"","ucode":"DD4173683C8BF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1800628,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/79/b4/51efcb0d.jpg","nickname":"Yellow","note":"","ucode":"6378FDFA5DC798","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236720,"discussion_content":"你要使用a变量原来的值，就不能在这之前改变a","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587118077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":124348,"ip_address":""},"score":236720,"extra":""}]},{"author":{"id":1623771,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/db/72cf3ba3.jpg","nickname":"Geek_小七","note":"","ucode":"2DD7EDBD40005E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5101,"discussion_content":"兄弟看你挺认真的，留下QQ做网友可好！切磋切磋！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565944728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31351,"user_name":"optvxq","can_delete":false,"product_type":"c1","uid":1183173,"ip_address":"","ucode":"30CF0DBB682714","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/c5/72701a5b.jpg","comment_is_top":false,"comment_ctime":1539156024,"is_pvip":false,"discussion_count":19,"race_medal":0,"score":"1058101110840","product_id":100017301,"comment_content":"哨兵可以理解为它可以减少特殊情况的判断，比如判空，比如判越界，比如减少链表插入删除中对空链表的判断，比如例子中对i越界的判断。<br><br>空与越界可以认为是小概率情况，所以代码每一次操作都走一遍判断，在大部分情况下都会是多余的。<br><br>哨兵的巧妙就是提前将这种情况去除，比如给一个哨兵结点，以及将key赋值给数组末元素，让数组遍历不用判断越界也可以因为相等停下来。<br><br>使用哨兵的指导思想应该是将小概率需要的判断先提前扼杀，比如提前给他一个值让他不为null，或者提前预设值，或者多态的时候提前给个空实现，然后在每一次操作中不必再判断以增加效率。","like_count":246,"discussions":[{"author":{"id":1446120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","nickname":"Purson","note":"","ucode":"5F0C1BB3C0C0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182675,"discussion_content":"绝对时精髓，原来在课上不理解，看了您的评论反而理解。 ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582447520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1446120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","nickname":"Purson","note":"","ucode":"5F0C1BB3C0C0A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283262,"discussion_content":"还有一个原因，是你比以前更牛逼了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592224755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":182675,"ip_address":""},"score":283262,"extra":""}]},{"author":{"id":1692886,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYK62r5aphMtYw6HskzPhbI3xRicxWticwKMhaO3Z63OYmr55FcjvNRClg93yhQ1U2BQXw/132","nickname":"chuck","note":"","ucode":"2229324EB1CD8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311583,"discussion_content":"老师的哨兵的例子中，最后一个数组元素设置要查找的值key，就是为了方便while循环中，不去限定循环的次数。当最后一个数组元素等于key的时候，自动就跳出了while循环。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602409157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212438,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpaa2pEggFCtaX455yukBbnhoD95AG2WAfyUxG69xFnYyR93A0PibACNgZaEZpDq8t8XkgTAibzaRw/132","nickname":"barnabas","note":"","ucode":"87FB55480C5C84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587818,"discussion_content":"总结的浅显易懂，有当老师的潜质","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663304452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564650,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650292960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2404875,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kLy68licCYbicIsCvClMr128ExianbrKVCHwyeksiabibDE50wWgDJLdZAmLG5uLgyw5ibqf9IGZJ1A3aJcibXoO1oQbA/132","nickname":"Geek_f6c6d8","note":"","ucode":"B1C33C71E13E03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542399,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640743114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2529532,"avatar":"https://static001.geekbang.org/account/avatar/00/26/98/fc/df6a9ed7.jpg","nickname":"ZzzL","note":"","ucode":"01B09ACD8BEF4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385030,"discussion_content":"可是不用哨兵的while 循环，只要在数组中找到=key的值，不用越界也可以return跳出循环呀。用哨兵的作用仅仅是循环里面少一点执行语句？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626854875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2263622,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8a/46/4f76078b.jpg","nickname":"阿腾","note":"","ucode":"FF1BEC88D98084","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2529532,"avatar":"https://static001.geekbang.org/account/avatar/00/26/98/fc/df6a9ed7.jpg","nickname":"ZzzL","note":"","ucode":"01B09ACD8BEF4E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386819,"discussion_content":"如果循环了几万次、几十万次，少一句执行语句就提高了不少执行效率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627818413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385030,"ip_address":""},"score":386819,"extra":""}]},{"author":{"id":1528671,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","nickname":"Geek_63ad86","note":"","ucode":"E758532B1169D6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273659,"discussion_content":"总结得好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590485268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265861,"discussion_content":"讲出了哨兵的精髓！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589447882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638719,"avatar":"https://static001.geekbang.org/account/avatar/00/19/01/3f/97588ccd.jpg","nickname":"不会讲","note":"","ucode":"5C02E074859357","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261476,"discussion_content":"这才是好老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588956768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454272,"avatar":"https://static001.geekbang.org/account/avatar/00/16/30/c0/761ec683.jpg","nickname":"faker","note":"","ucode":"15212F3641253F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213530,"discussion_content":"66666，说的真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585102036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547767,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/f7/26d82e48.jpg","nickname":"四阿哥萌萌哒","note":"","ucode":"62F91EF0C87398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200397,"discussion_content":"666 666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583678942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193001,"discussion_content":"没看出精髓，感觉循环次数一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583115481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":373456,"discussion_content":"每次循环要执行的语句变少了\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620733391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":193001,"ip_address":""},"score":373456,"extra":""}]},{"author":{"id":1061517,"avatar":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","nickname":"幻境之桥","note":"","ucode":"F9F4DD94CB554E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181134,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582340752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1362857,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cb/a9/2dbaddb2.jpg","nickname":"BroHorizon_gr","note":"","ucode":"B05488C0073135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67717,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575170971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65505,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575007328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014096,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyzUm3M4HMj0wXv8Pr34OhOiaFJjFMSjVKnaJoOWR9Uo1T4RBI4MYtguolJgOwb6eKsAUOq4MGlrw/132","nickname":"wend","note":"","ucode":"45EE220931FE91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38854,"discussion_content":"讲出了哨兵的精髓！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571842082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45745,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1543765553,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"705918402097","product_id":100017301,"comment_content":"关于练习链表的一点体会<br><br>1、 函数中需要移动链表时，最好新建一个指针来移动，以免更改原始指针位置。<br><br>2、 单链表有带头节点和不带头结点的链表之分，一般做题默认头结点是有值的。<br><br>3、 链表的内存时不连续的，一个节点占一块内存，每块内存中有一块位置（next）存放下一节点的地址（这是单链表为例）。<br><br>3、 链表中找环的思想：创建两个指针一个快指针一次走两步一个慢指针一次走一步，若相遇则有环，若先指向nullptr则无环。<br><br>4、 链表找倒数第k个节点思想：创建两个指针，第一个先走k-1步然后两个在一同走。第一个走到最后时则第二个指针指向倒数第k位置。<br><br>5、 反向链表思想：从前往后将每个节点的指针反向，即.next内的地址换成前一个节点的，但为了防止后面链表的丢失，在每次换之前需要先创建个指针指向下一个节点。<br><br>6、 两个有序链表合并思想：这里用到递归思想。先判断是否有一个链表是空链表，是则返回两一个链表，免得指针指向不知名区域引发程序崩溃。然后每次比较两个链表的头结点，小的值做新链表的头结点，此节点的next指针指向本函数（递归开始，参数是较小值所在链表.next和另一个链表）。","like_count":164,"discussions":[{"author":{"id":1754583,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c5/d7/cd076f3a.jpg","nickname":"D","note":"","ucode":"858CAC2BDAFFC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78055,"discussion_content":"1的总结醍醐灌顶，开始我总是用原始链表去移动，直接移动到最后面了，哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575972221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182004,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/34/1c81cf7c.jpg","nickname":"chowhuijie","note":"","ucode":"CCA69DE065370C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575024,"discussion_content":"第4点不明白、可否解释？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654530897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1212438,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpaa2pEggFCtaX455yukBbnhoD95AG2WAfyUxG69xFnYyR93A0PibACNgZaEZpDq8t8XkgTAibzaRw/132","nickname":"barnabas","note":"","ucode":"87FB55480C5C84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1182004,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/34/1c81cf7c.jpg","nickname":"chowhuijie","note":"","ucode":"CCA69DE065370C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587819,"discussion_content":"好比小明和小红两个人以一样的速度跑100米，小红先跑20米，小明再开始跑。小红到终点时，小明在离终点20米处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663304954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":575024,"ip_address":"上海"},"score":587819,"extra":""}]},{"author":{"id":1733170,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/x9U78tCoyfhWnFTr6f1AhH4c6ibOFtO6bYjoIM3ByCplx0lUU4wZSms5gic2Wxm7icfia1g8OJSgvqXKHQNPWAaHJQ/132","nickname":"Holland","note":"","ucode":"DE5EF4E8D8D573","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383213,"discussion_content":"思想总结太好了,代码没看懂的地方,看楼主的总结,一下就懂了!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625993629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30132,"user_name":"zyzheng","can_delete":false,"product_type":"c1","uid":1042716,"ip_address":"","ucode":"E44F327230319E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e9/1c/be4ac7af.jpg","comment_is_top":false,"comment_ctime":1538695359,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"409560588479","product_id":100017301,"comment_content":"一直对手写链表代码有恐惧心理，这次硬着头皮也要迈过这个坎","like_count":95,"discussions":[{"author":{"id":1114926,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/2e/3a7b0eda.jpg","nickname":"流星","note":"","ucode":"94BACF37AD4953","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350546,"discussion_content":"迈过去了吗\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613912583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076013,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/2d/73362639.jpg","nickname":"吕子凤","note":"","ucode":"EC66416CE33B39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294819,"discussion_content":"迈过去了吗","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596008735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2156751,"avatar":"","nickname":"xuyang123","note":"","ucode":"C17AC71254A592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389835,"discussion_content":"怕是已经把自己迈进去了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629447349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1273044,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6c/d4/85ef1463.jpg","nickname":"路漫漫","note":"","ucode":"F70F1DC612DE9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533320,"discussion_content":"3年了，迈过去了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637837059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":2069098,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/92/6a/af4ec360.jpg","nickname":"半年","note":"","ucode":"6A53D27062778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1273044,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6c/d4/85ef1463.jpg","nickname":"路漫漫","note":"","ucode":"F70F1DC612DE9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534724,"discussion_content":"代码还在，人不在了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638262938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533320,"ip_address":""},"score":534724,"extra":""}]},{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296927,"discussion_content":"写完几份草稿纸 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596706571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258989,"discussion_content":"yep\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588748798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":30449,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1538871678,"is_pvip":false,"replies":[{"id":"11030","content":"👍 思考的深入 你说的这个很像内存池 你可以百度一下看看是不是你想要的","user_name":"作者回复","comment_id":30449,"uid":"1190123","ip_address":"","utype":1,"ctime":1538959307,"user_name_real":"gg"}],"discussion_count":21,"race_medal":0,"score":"392380895614","product_id":100017301,"comment_content":"老师您好！请教您一个问题。在学习了数组和链表之后，想知道在现实应用中有没有将二者结合起来的情况。<br>比如，我想用数组存储数据，但数组大小提前无法知道，如果使用动态数组的话，中间涉及到数组拷贝；如果使用链表的话，每增加一个元素都要malloc一次（频繁的malloc会不会影响效率并且导致内存碎片？）。<br>可不可以用链表将数组链接起来？也就是说链表里每个node存储了数组指针，这样每增加一个节点就可以多存放很多元素。如果可以的话，与直接使用动态数组或者直接使用链表比有没有什么优缺点，为何在网上搜索几乎找不到人这样用？","like_count":91,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426008,"discussion_content":"👍 思考的深入 你说的这个很像内存池 你可以百度一下看看是不是你想要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538959307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1794978,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/63/a2/43e1777d.jpg","nickname":"鸿都百炼生","note":"","ucode":"1D9820BA26EB3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100122,"discussion_content":"HashMap是数组里存链表，他说的是链表里存数组，不一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577237588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582737,"discussion_content":"redis里的List 以及 Sorted Set 都有用到 quickList数据结构，而quickList就是由你所说的链表 + 数组(zipList)实现的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659616733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665918,"avatar":"","nickname":"Geek_39065a","note":"","ucode":"9B68F63B63ADE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196484,"discussion_content":"hashMap就是链表加数组","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583337181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1665918,"avatar":"","nickname":"Geek_39065a","note":"","ucode":"9B68F63B63ADE3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270653,"discussion_content":"HashMap 虽然是数组+链表，但是和他这个正好反过来了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1590032664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196484,"ip_address":""},"score":270653,"extra":""},{"author":{"id":1747210,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a9/0a/964c0ea0.jpg","nickname":"zhangyu","note":"","ucode":"F9B964F52099C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":343782,"discussion_content":"哈哈，说的没错\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611156660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270653,"ip_address":""},"score":343782,"extra":""}]},{"author":{"id":1235188,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/f4/2c01a4f8.jpg","nickname":"想飞的鱼","note":"","ucode":"907BF618076580","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73315,"discussion_content":"okio包的 Buffer 类就是你这种做法，java 实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575557430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244004,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fb/64/651dc6d7.jpg","nickname":"飞逝","note":"","ucode":"A6A06F04DF4394","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1235188,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/f4/2c01a4f8.jpg","nickname":"想飞的鱼","note":"","ucode":"907BF618076580","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":216176,"discussion_content":"发现一枚安卓工程师哈哈😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585408252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73315,"ip_address":""},"score":216176,"extra":""}]},{"author":{"id":1248148,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0b/94/d7c66e34.jpg","nickname":"扭转乾坤","note":"","ucode":"0B805F7CE7B0DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1630,"discussion_content":"池结构，写PA的时候学到的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562748911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2408159,"avatar":"","nickname":"Geek_0bc98a","note":"","ucode":"455DC68B801E67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369487,"discussion_content":"golang的内存管理好像是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619054183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2223198,"avatar":"","nickname":"Geek_1d3fdc","note":"","ucode":"A9E79B272B3608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311624,"discussion_content":"很特别的思考，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602423930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547763,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/f3/3f6dd32b.jpg","nickname":"叶紫真","note":"","ucode":"9CD7567FDB7F1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255572,"discussion_content":"你是不是想要std::vector的功能？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588411406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365556,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/34/c2f1414d.jpg","nickname":"半句","note":"","ucode":"D295D3EBFB6DA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226866,"discussion_content":"redis中的快速列表好像是这种思想， 不过连接的是压缩列表， 和数组差不多，不过可以存储多种类型数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586443823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65508,"discussion_content":"想法不错，回头看下上面其他人的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575007658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045268,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/14/f9613e3a.jpg","nickname":"阿秋","note":"","ucode":"617D515C35C486","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48964,"discussion_content":"HashMap底层就是数组加链表实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573540904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048707,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/83/9329a697.jpg","nickname":"马殿军","note":"","ucode":"97FE6251C04E6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18303,"discussion_content":"stl双端队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569041405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1657944,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7cOHiaxJBPveACDMhxrq8rsG4zmA8kLPRp6niaLbREZsJj6PZmaYRhjvsp3lMvibRlBWsTm480lpCg/132","nickname":"一个木偶","note":"","ucode":"4116B853E6D19E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15799,"discussion_content":"块链","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568853156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","nickname":"八百","note":"","ucode":"79F1F79ADF5A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6072,"discussion_content":"redis的内部编码ziplist就用了这种，好像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566655297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140367,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/8f/512e845d.jpg","nickname":"Butters","note":"","ucode":"DB15DF52DFE6C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3784,"discussion_content":"内存分配器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564808469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230682,"avatar":"","nickname":"17702158422","note":"","ucode":"226342D3CB73BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2370,"discussion_content":"hashmap","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563522422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504423,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f4/a7/1cf57505.jpg","nickname":"努力的熊","note":"","ucode":"D669AF855D2EF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2217,"discussion_content":"hashmap底层实现算不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563358597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30979,"user_name":"千方残光","can_delete":false,"product_type":"c1","uid":1248463,"ip_address":"","ucode":"BD22169CFA307F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/cf/3586a7e5.jpg","comment_is_top":false,"comment_ctime":1539056183,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"280711930423","product_id":100017301,"comment_content":"&#47;**<br>public class Node {<br>\tpublic char c;<br>\tpublic Node next;<br>\t<br>\tpublic Node(char c) {<br>\t\tthis.c = c;<br>\t}<br>}<br>**&#47;<br>\t<br>public static Node reverse(Node head) {<br>\t\tif(head == null || head.next == null) {<br>\t\t\treturn head;<br>\t\t}<br>\t\t<br>\t\tNode prev = null;<br>\t\tNode cur = head;<br>\t\tNode next = head.next;<br>\t\t<br>\t\twhile(next != null) {<br>\t\t\tcur.next = prev;<br>\t\t\tprev = cur;<br>\t\t\tcur = next;<br>\t\t\tnext = cur.next;<br>\t\t}<br>\t\tcur.next = prev;<br>\t\treturn cur;<br>\t}<br>\t<br>\t<br>\tpublic static boolean existsCircle(Node head) {\t\t<br>\t\tNode slow = head;<br>\t\tNode fast = head;\t<br>\t\twhile(fast != null &amp;&amp; fast.next != null) {<br>\t\t\tslow = slow.next;<br>\t\t\tfast = fast.next.next;\t\t<br>\t\t\tif(slow == fast) {<br>\t\t\t\treturn true;<br>\t\t\t}<br>\t\t}\t\t<br>\t\treturn false;<br>\t}<br>\t<br>\t\tpublic static Node merge(Node head1, Node head2) {<br>\t\t<br>\t\tNode guard = new Node(&#39;&#47;&#39;);<br>\t\tNode cur = guard;<br>\t\t<br>\t\twhile(head1 != null &amp;&amp; head2 != null) {<br>\t\t\tif(head1.c &lt;= head2.c) {<br>\t\t\t\twhile(head1 != null &amp;&amp; head1.c &lt;= head2.c) {<br>\t\t\t\t\tcur.next = head1;<br>\t\t\t\t\tcur = cur.next;<br>\t\t\t\t\thead1 = head1.next;<br>\t\t\t\t\t<br>\t\t\t\t}<br>\t\t\t} else {<br>\t\t\t\twhile(head2 != null &amp;&amp; head1.c &gt; head2.c) {<br>\t\t\t\t\tcur.next = head2;<br>\t\t\t\t\tcur = cur.next;<br>\t\t\t\t\thead2 = head2.next;<br>\t\t\t\t\t<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\tif(head1 != null) {<br>\t\t\tcur.next = head1;<br>\t\t} <br>\t\tif(head2 != null) {<br>\t\t\tcur.next = head2;<br>\t\t}<br>\t\t<br>\t\treturn guard.next;<br>\t\t<br>\t}<br>\t<br>\tpublic static Node deleteLastN(Node head, int n) {<br>\t\tif(n &lt; 1 || head == null) {<br>\t\t\treturn head;<br>\t\t}<br>\t\tNode guard = new Node(&#39;&#47;&#39;);<br>\t\tguard.next = head;<br>\t\t<br>\t\tNode slow = guard;<br>\t\tNode fast = guard;<br>\t\t<br>\t\tfor(int i = 0; i &lt; n; i++) {<br>\t\t\tif(fast != null) {<br>\t\t\t\tfast = fast.next;<br>\t\t\t}<br>\t\t}<br>\t\twhile(fast != null &amp;&amp; fast.next != null) {<br>\t\t\tslow = slow.next;<br>\t\t\tfast = fast.next;<br>\t\t}<br>\t\tslow.next = slow.next.next;<br>\t\treturn guard.next;<br>\t}<br>\t<br>\tpublic static Node getMiddle(Node head, int n) {<br>\t\tNode slow = head;<br>\t\tNode fast = head;<br>\t\t<br>\t\twhile(fast.next != null &amp;&amp; fast.next.next != null) {<br>\t\t\tslow = slow.next;<br>\t\t\tfast = fast.next.next;<br>\t\t}<br>\t\t<br>\t\treturn slow;<br>\t}<br>","like_count":65,"discussions":[{"author":{"id":1258839,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/57/ab4ba792.jpg","nickname":"小鱼","note":"","ucode":"9F3D087A95D0C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6034,"discussion_content":"反转的循环部分应该是错了吧","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1566627253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2012488,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b5/48/b3f41cda.jpg","nickname":"AnonyMous🧀","note":"","ucode":"06D6661B3319A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282951,"discussion_content":"删除倒数第n个节点这题，一个额外指针就够了，做法是先遍历一次链表，每走一步n就减1，走到最后n变成负数，然后从头节点再重新遍历，这次每走一步n就加1，知道n变成0，此时这个节点就是倒数第n个节点。这个做法可以少用一个额外指针。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592127355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2524444,"avatar":"https://static001.geekbang.org/account/avatar/00/26/85/1c/a0978d72.jpg","nickname":"邵永军","note":"","ucode":"AE82D8A7A47A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2012488,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b5/48/b3f41cda.jpg","nickname":"AnonyMous🧀","note":"","ucode":"06D6661B3319A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361062,"discussion_content":"使用递归可以只需要遍历一遍 加 倒数序号次数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616590531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282951,"ip_address":""},"score":361062,"extra":""}]},{"author":{"id":1092109,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/0d/421a773a.jpg","nickname":"学习，我们一起学习！","note":"","ucode":"FDDB2C52B0E973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539425,"discussion_content":"这个事ListNode里边的代码吗\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639711942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2524444,"avatar":"https://static001.geekbang.org/account/avatar/00/26/85/1c/a0978d72.jpg","nickname":"邵永军","note":"","ucode":"AE82D8A7A47A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361063,"discussion_content":"校验是否有环 这里的环只包涵三个元素吗？如果是一个较大的环呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616590606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2229665,"avatar":"https://static001.geekbang.org/account/avatar/00/22/05/a1/2c631e12.jpg","nickname":"Zachariah","note":"","ucode":"B0AED2A3B91369","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324702,"discussion_content":"单向链表，铁子。。你那是双向链表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605155842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1668117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLgibqHsl97Oq3nvnEVz7V3kaGKLmia0Ja8c4yXO7QeLKiakganRJomNGgYToW4RnFs60zibDTHicjE5w/132","nickname":"学而不思则惘","note":"","ucode":"8ED2B08AA5A755","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129693,"discussion_content":"个人观点，求中间节点的时候要考虑奇偶，你这个返回值slow返回的是slow后的所有节点，与题意感觉不符呀？如果是求一个单独或者两个节点的话作为返回的话，有没有办法能不破坏原有的链表结构呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578728158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729853,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/65/3d/afc2e163.jpg","nickname":"西谷","note":"","ucode":"0378211B2359E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49020,"discussion_content":"求中间结点如果链表有偶数结点呢，这样的话会返回中间点前面的那个吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573548667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30212,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1538727502,"is_pvip":false,"replies":[{"id":"10881","content":"1. 建议再看下“为什么要学习数据结构和算法”那节课，包括里面的留言，有很多留言都写的很好，很多人都对这门课有比较清晰深刻的认识。<br>2. 你的疑问应该是：局限于你现在的工作，你觉得用不上对吧。这个是很有可能的。如果你做的项目都是很小的项目，也没有什么性能压力，平时自己也不去思考非功能性的需求，只是完成业务代码就ok了，那确实感觉用不到。但这是你个人的原因，并不代表就真用不到呢，兄弟！<br>3. 专栏里有很多贴近开发的内容，比如链表这一节，我就讲了LRU算法。数组这一节，我讲了容器和数组的选择。复杂度这一节，我讲了如何预判代码的性能。这些都是很贴合开发的。<br>4. 我尽量将内容贴近实际的开发，但并不代表一定贴近你的CRUD开发。知识如何用到你的项目中，需要你自己根据我的文章举一反三的思考。","user_name":"作者回复","comment_id":30212,"uid":"1190123","ip_address":"","utype":1,"ctime":1538748391,"user_name_real":"gg"}],"discussion_count":7,"race_medal":0,"score":"280711601742","product_id":100017301,"comment_content":"学习了好几节数据结构和算法了，我是也CRUD业务代码的，感觉还是用不着啊？","like_count":66,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65509,"discussion_content":"面试。。。。跳槽！涨薪","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1575007712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425898,"discussion_content":"1. 建议再看下“为什么要学习数据结构和算法”那节课，包括里面的留言，有很多留言都写的很好，很多人都对这门课有比较清晰深刻的认识。\n2. 你的疑问应该是：局限于你现在的工作，你觉得用不上对吧。这个是很有可能的。如果你做的项目都是很小的项目，也没有什么性能压力，平时自己也不去思考非功能性的需求，只是完成业务代码就ok了，那确实感觉用不到。但这是你个人的原因，并不代表就真用不到呢，兄弟！\n3. 专栏里有很多贴近开发的内容，比如链表这一节，我就讲了LRU算法。数组这一节，我讲了容器和数组的选择。复杂度这一节，我讲了如何预判代码的性能。这些都是很贴合开发的。\n4. 我尽量将内容贴近实际的开发，但并不代表一定贴近你的CRUD开发。知识如何用到你的项目中，需要你自己根据我的文章举一反三的思考。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1538748391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38019,"discussion_content":"数据结构是一个程序员的天花板","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571714638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2683210,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f1/4a/bcba0456.jpg","nickname":"康Geek","note":"","ucode":"D54F1CFDA9F2D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":408359,"discussion_content":"说好我们不能一直盯着自己的下限去兜底下限，要提高上限的水平。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38019,"ip_address":""},"score":408359,"extra":""}]},{"author":{"id":1100612,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/44/22d65cf1.jpg","nickname":"winy","note":"","ucode":"04CE142A4426D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544912,"discussion_content":"链表这种常见的数据结构，curd有时候还是用的到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641779339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101791,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/df/abb7bfe3.jpg","nickname":"Allen","note":"","ucode":"C088A4724A653F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295656,"discussion_content":"知其然且知其所以然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596276153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064902,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3f/c6/c2bf55bd.jpg","nickname":"devilyaos","note":"","ucode":"5FE075608F03F7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276522,"discussion_content":"可以自己设计点更工具辅助快速curd，很多东西就能慢慢用上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590894291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":30129,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1538693406,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"272121633054","product_id":100017301,"comment_content":"谢谢老师，这节课又学到了，写完留言我要去思考那几个问题了，一个都不会。。<br><br>----<br><br>文中提到，<br><br>但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：<br><br>if (head-&gt;next == null) {<br>   head = null;<br>}<br><br>----<br><br>感觉此处代码处理的是当链表中只有表头一个节点的删除情况，而不是&quot;要删除链表中的最后一个结点&quot;的情况。是不是head应该改成p?","like_count":62,"discussions":[{"author":{"id":1433568,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/e0/ce671992.jpg","nickname":"北顾-岛城","note":"","ucode":"54ECB3E5E4073A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20064,"discussion_content":"老师的意思是说链表只剩下一个结点的时候，删除这一个结点","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1569253263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190583,"discussion_content":"最后一个结点是链表中只有一个结点，而非链表的尾结点的意思？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582963003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/73/9ab38243.jpg","nickname":"xiaoxionga","note":"","ucode":"2BB02B54C31EBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55843,"discussion_content":"head->next == nul 就是判断是否是最后一个节点呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574405156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165242,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c7/ba/d8505595.jpg","nickname":"瓯江河畔","note":"","ucode":"16B86D4B2ADCB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347796,"discussion_content":"head 永远指向头节点，head.next 是 null 时，说明链表只有一个节点了，在删除后，链表中就没有节点了，所以此时 head = null 表示链表为空。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612322935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/c0/3f5b054f.jpg","nickname":"夏亚运","note":"","ucode":"7C71B6FD681057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248351,"discussion_content":"只剩下一个节点的时候，这个节点就是head了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587865118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2331566,"avatar":"","nickname":"Geek_2a26e2","note":"","ucode":"D543C7CE508C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/c0/3f5b054f.jpg","nickname":"夏亚运","note":"","ucode":"7C71B6FD681057","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327636,"discussion_content":"head不是节点，是头指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605878787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":248351,"ip_address":""},"score":327636,"extra":""}]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65506,"discussion_content":"我这里也有点疑惑，这个head的含义。。。感觉 head 是一个变动的指针？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575007450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1811532,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/4c/9e87ad8e.jpg","nickname":"king","note":"","ucode":"99C5E0CD0B8E00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237990,"discussion_content":"这里没说清楚，不过看代码老师意思是只剩一个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587203297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65506,"ip_address":""},"score":237990,"extra":""}]}]},{"had_liked":false,"id":30161,"user_name":"来自地狱的勇士","can_delete":false,"product_type":"c1","uid":1101123,"ip_address":"","ucode":"E187F51081B495","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/43/fa115929.jpg","comment_is_top":false,"comment_ctime":1538706588,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"151862561948","product_id":100017301,"comment_content":"问题一：文中提到，指针丢失会导致内存泄露，老师能解释下如何导致的内存泄露吗？<br>问题二：讲哨兵那块的内容时，说代码二比代码一成功省掉了一次比较i&lt;n，这句不大理解，代码二中，while的条件a[i]!=key也是在比较吧？","like_count":35,"discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62309,"discussion_content":"内存泄露是指你插入的时候，如果按照第一种错误的写法，原本p.next指针指向的元素就没有被引用到，一般来说，这样的内存是被标记为垃圾，要收回。\n可是p.next指针后面还指向了p.next.next元素这样后面所有的元素又都在被引用，造成无法被回收，然而最终指向p.next的指针已经丢失了，无法获取到这一块的内存地址，这一块内存就一直存在，导致无法回收，从而内存泄露","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1574831728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2223198,"avatar":"","nickname":"Geek_1d3fdc","note":"","ucode":"A9E79B272B3608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311627,"discussion_content":"按照第一种写法，一个链表在x那里被截成两条，后面的链表在就丢失了。我理解的是如果是java写的，后面那块应该会被自动回收，不存在内存泄漏问题。\n\n但是如果是C、C++写的，需要程序员手动回收，这时候后面那条链表没有办法获取到，从而不会被手动回收，造成内存泄漏。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1602424364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62309,"ip_address":""},"score":311627,"extra":""}]},{"author":{"id":1454945,"avatar":"https://static001.geekbang.org/account/avatar/00/16/33/61/da6d8713.jpg","nickname":"Xinming","note":"","ucode":"F7330DD975D248","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":940,"discussion_content":"代码一有 (i < n) 和 (a[i] == key) 两次运算，代码二只有 (a[i] != key)","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1562160349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593762,"avatar":"https://static001.geekbang.org/account/avatar/00/18/51/a2/84e9efe2.jpg","nickname":"马祖晖","note":"","ucode":"7866916C8EF9DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54664,"discussion_content":"第一段代码的while里头执行了三次运算，就是3n。 但是第二段代码里面的只有2n，并且由于最后一个节点的值就是key，所以必然不会越界。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574308444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110755,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/e3/c1a88a64.jpg","nickname":"小夏","note":"","ucode":"D87444ADC28C6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110533,"discussion_content":"他把目标值放在了末尾，通过判定是否相等的情况肯定可以把i拦下来，不过题主过了这么久肯定已经懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577723057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528758,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/b6/df90b543.jpg","nickname":"冯子奇","note":"","ucode":"59AF7ED513A404","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18366,"discussion_content":"代码2的while为什么不会越界...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569051328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025093,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","nickname":"拾迹","note":"","ucode":"38F367B77FF2D7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1528758,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/b6/df90b543.jpg","nickname":"冯子奇","note":"","ucode":"59AF7ED513A404","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177263,"discussion_content":"因为到最后肯定会相等，从而跳出循环 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582090168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":18366,"ip_address":""},"score":177263,"extra":""}]},{"author":{"id":1478430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuEkja2Eib1cXFMh7kXbzFl2RQNea4CHrkXVRH98m7lzJWKIictyFdCWxvCNrlr8qjW5E4QBibpdGZQ/132","nickname":"lovingstranger","note":"","ucode":"5590AA5A7C3D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244,"discussion_content":"兄弟，你现在弄清楚了吗，我也一直对代码二比代码一成功省掉一次比较 i<n 不太理解，要是弄懂了，教教我呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561356169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1135761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/91/845de758.jpg","nickname":"L","note":"","ucode":"68954D2A92AB01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1478430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuEkja2Eib1cXFMh7kXbzFl2RQNea4CHrkXVRH98m7lzJWKIictyFdCWxvCNrlr8qjW5E4QBibpdGZQ/132","nickname":"lovingstranger","note":"","ucode":"5590AA5A7C3D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22807,"discussion_content":"i<n是循环的条件 判断是否遍历完整个数组了，然后在判断值相等找到想要的下标，第二种方法的话把我们想要的值固定在最后一位 这样就不需要判断是否是遍历完数组了因为遍历结束只有退出循环只能是找到元素了，但是有可能是因为在最后一位找到的。这样主要是循环里面的判断少了一次，对于n长的数组可能就是少了n次的判断了。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1569684632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":244,"ip_address":""},"score":22807,"extra":""},{"author":{"id":1344819,"avatar":"https://static001.geekbang.org/account/avatar/00/14/85/33/9b427475.jpg","nickname":"Z.H.","note":"","ucode":"83B39F1E1BD819","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1478430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuEkja2Eib1cXFMh7kXbzFl2RQNea4CHrkXVRH98m7lzJWKIictyFdCWxvCNrlr8qjW5E4QBibpdGZQ/132","nickname":"lovingstranger","note":"","ucode":"5590AA5A7C3D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38463,"discussion_content":"最后一个放的是key的值，肯定不会越界","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571792619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":244,"ip_address":""},"score":38463,"extra":""},{"author":{"id":1143473,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/b1/a8b272ef.jpg","nickname":"飞翔的花狸猫","note":"","ucode":"F3BA6126E02059","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1478430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuEkja2Eib1cXFMh7kXbzFl2RQNea4CHrkXVRH98m7lzJWKIictyFdCWxvCNrlr8qjW5E4QBibpdGZQ/132","nickname":"lovingstranger","note":"","ucode":"5590AA5A7C3D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362353,"discussion_content":"第一种方式应该是最直观的写法。i<n保证不会出现数组越界，a[i] == target的等值判断，用来查找是否有匹配的值，如果相等则直接返回目标值下标 i；\n\n第二种方式用目标值替换来保证不会出现数组越界，这种方法省掉了方法1 i<n的判断，但是多了数组最后一个元素的两次赋值和临时变量 temp；\n\n这里数组里的最后一个元素a[n-1]应该就是“哨兵”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616926517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":244,"ip_address":""},"score":362353,"extra":""}]}]},{"had_liked":true,"id":30387,"user_name":"王振华 程序员","can_delete":false,"product_type":"c1","uid":1131957,"ip_address":"","ucode":"31BB337642B882","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","comment_is_top":false,"comment_ctime":1538820358,"is_pvip":false,"replies":[{"id":"10954","content":"你理解错我的意思了。我说的最后一个结点的意思是：链表中只剩下一个结点。并不是指尾结点。","user_name":"作者回复","comment_id":30387,"uid":"1190123","ip_address":"","utype":1,"ctime":1538838142,"user_name_real":"gg"}],"discussion_count":16,"race_medal":0,"score":"130387839238","product_id":100017301,"comment_content":"但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不work了。<br>```<br>if (head-&gt;next == null) { <br>    head = null<br>}<br>```<br>这里的head表示的是最后一个结点吗？<br><br>“对于带头链表，插入头结点和插入其它节点，可以统一为相同的逻辑。”这我可以理解<br><br>但即使是带头链表，删除尾结点和删除其它节点，还是不能统一代码呀。<br><br>`p-&gt;next = p-&gt;next-&gt;next;` 无论是否是带头链表，对尾结点都没有影响呀。这行代码还是不能用于尾结点的删除呀？","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425974,"discussion_content":"你理解错我的意思了。我说的最后一个结点的意思是：链表中只剩下一个结点。并不是指尾结点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193784,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","nickname":"聂旋","note":"","ucode":"40061E5AFDA99C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7339,"discussion_content":"我的理解：  在不带头链表中删除一个结点时，分两种情况：\n\n1.  链表有两个及两个以上结点。这里不管这个结点是在链表中间，还是在末尾。都可以用”p->next = p->next->next;“来解决。对于尾结点，相当于让上一个结点的next指针指向null。这里针对尾结点这个边界可以不用做特殊判断，可以直接删，处理方法都一样。\n\n 2.  链表只有一个结点。这个时候就要判断并删除。这里判断的目的是为了确定是否只有一个结点的情况。\nif (head->next == null) { \n    head = null\n}\n在只有一个结点的情况下，当然也可以称为尾结点。但是跟第一种情况下相比，因为没有一个结点指向它，所以就不能用”p->next = p->next->next;“这个方法来删除了。此时，如果让一个哨兵指向它，不就可以用上面的方法了。\n","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1567498510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1686840,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","nickname":"Lance","note":"","ucode":"CCE52F86EEBBED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1193784,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","nickname":"聂旋","note":"","ucode":"40061E5AFDA99C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24129,"discussion_content":"感谢评论解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570012508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7339,"ip_address":""},"score":24129,"extra":""},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1193784,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","nickname":"聂旋","note":"","ucode":"40061E5AFDA99C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351277,"discussion_content":"问题出就出在链表在只剩一个head节点时的删除方法和一个节点以上的删除方法不同，这会导致每次删除都要过一遍这个多加的判断if(head.next=null)，以及多余的处理方法。那么为了省去这个多加的判断，同时使得所有删除方法都一样，就要引入哨兵的概念——即head节点指向一个永远存在的哨兵节点，这个哨兵节点不存储数据只存针，从而解决以上问题。哨兵是为了解决边境问题的，同样作者的另外两块代码就充分演示了把哨兵加在链表最后以解决多余判断的另一种可能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614224178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7339,"ip_address":""},"score":351277,"extra":""},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1193784,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","nickname":"聂旋","note":"","ucode":"40061E5AFDA99C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351278,"discussion_content":"我上面写错了，是if(head.next==null)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614224495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7339,"ip_address":""},"score":351278,"extra":""}]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190624,"discussion_content":"带头链表，对照老师在文中罗列的插入操作。删除操作有：\n1. 删除头结点（第一个结点）；\n2. 删除当前结点；\n3. 删除当前结点的后一个结点；\n4. 删除当前结点的前一个结点；\n5. 删除尾结点（最后一个结点，可以在2，4作为一个特例来实现）；\n对于带头链表，增加一个哨兵可以在3的操作中减少5的特殊性。\n理解3的时候不要用2的思维噢","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582966642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","nickname":"Geek_949cc1","note":"","ucode":"F8ACDBF2FA8CC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33131,"discussion_content":"个人理解，其实聂旋兄讲的很清楚了，有哨兵节点可以直接避免边界问题，因为你的链表始终不会成为一个空链表，至少会存在一个哨兵节点，所以说不久在链表的插入和删除时就可以不用判断边界，直接用通用的方式就可以了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571100753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190593,"discussion_content":"哈哈，我也纠结了半天，老师的原文是删除p的后继结点。那么在这个前提下这条代码仅仅适用于p->next存在的情况，如果p的后继结点不存在（即p就是尾结点），那为何要执行这段代码呢？所以需要在这条语句的外层添加判断条件。Anyway，对于链表的操作常伴随着遍历操作，遍历就需要判断终止条件。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582963906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367221,"avatar":"https://static001.geekbang.org/account/avatar/00/14/dc/b5/7fd5f418.jpg","nickname":"Reina","note":"","ucode":"AFF6C03FF07F4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":59308,"discussion_content":"刚开始跟我理解错误的点一样，再看了一遍就明白了。引入哨兵节点就是为了让链表中有两个或两个以上的节点从而算法统一。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574686637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1468174,"avatar":"https://static001.geekbang.org/account/avatar/00/16/67/0e/843cf30a.jpg","nickname":"蜂子","note":"","ucode":"ACD11D9A72B066","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4769,"discussion_content":"链表中只剩一个结点，那这个节点不就是尾结点。为什么说并不指尾结点？文中描述带头链表删除最后一个结点和删除其他结点可以统一代码实现，确实理解不了呀，有没有大神指点迷津","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565709652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1687570,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/12/1afb4b75.jpg","nickname":"郑家庄赶大车的老郑","note":"","ucode":"D432A3961840B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1468174,"avatar":"https://static001.geekbang.org/account/avatar/00/16/67/0e/843cf30a.jpg","nickname":"蜂子","note":"","ucode":"ACD11D9A72B066","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24596,"discussion_content":"个人理解，只剩一个节点时，正好是尾节点，但是已知是尾节点，不一定正好只剩一个节点，有点像白马非马的感觉。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570190802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4769,"ip_address":""},"score":24596,"extra":""}]},{"author":{"id":2221522,"avatar":"https://static001.geekbang.org/account/avatar/00/21/e5/d2/f9498b40.jpg","nickname":"Sakura","note":"","ucode":"6943E4C843E555","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374566,"discussion_content":"删除最后面的节点，是不是在链表的最后面加个哨兵就能统一代码了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621250033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2434549,"avatar":"https://static001.geekbang.org/account/avatar/00/25/25/f5/be0e0c92.jpg","nickname":"底层小学生","note":"","ucode":"5EAAB052D8AC5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348721,"discussion_content":"尾节点应该指的是空链表时的头节点吧，求指正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612689489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236567,"discussion_content":"感谢评论，也解决了我的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587104350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190632,"discussion_content":"一般来说删除当前结点肯定需要知道前驱结点，所以2可以用3来代替","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582966856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190595,"discussion_content":"接上一条，对于尾结点的删除，在p为倒数第二个结点时就被删除啦，再想想是不是这样？哈哈，如此循环下去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582964044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31047,"user_name":"鲫鱼","can_delete":false,"product_type":"c1","uid":1240828,"ip_address":"","ucode":"ACB8E3317FFE99","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/fc/9b72e224.jpg","comment_is_top":false,"comment_ctime":1539076063,"is_pvip":false,"replies":[{"id":"11167","content":"买本大话数据结构或者算法图解结合着看吧 这门课本身就比较难学 只能多花点时间了呢","user_name":"作者回复","comment_id":31047,"uid":"1190123","ip_address":"","utype":1,"ctime":1539082312,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"108913258463","product_id":100017301,"comment_content":"快哭了，跨专业学习，就自学了一点python。都不知道要怎么去理解了😭<br>但是还是能理解一点的，慢慢坑了","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426201,"discussion_content":"买本大话数据结构或者算法图解结合着看吧 这门课本身就比较难学 只能多花点时间了呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539082312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30155,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1538705320,"is_pvip":false,"replies":[{"id":"11032","content":"不好意思 我尽量写简单点 多加点注释","user_name":"作者回复","comment_id":30155,"uid":"1190123","ip_address":"","utype":1,"ctime":1538959412,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"100322953128","product_id":100017301,"comment_content":"c语言不熟悉 看起来有点吃力","like_count":23,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425874,"discussion_content":"不好意思 我尽量写简单点 多加点注释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538959412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30136,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1538697275,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"100322945083","product_id":100017301,"comment_content":"1.三个节点p.pre，p，p.next，将p的next指针指向p.pre，然后p.pre=p，p=p.next，p.next=p.next.next移动指针，就可以实现单链表反转。<br>2.最简单就是一个节点在头，一个节点一直遍历，地址相等就是环，不过好像还有一种简单的办法，快慢前进，一次就能搞定。这个老师能不能说下自己的思路，我有点想不明白。<br>3.建立第三个链表，每次比较a链表当前节点和b链表当前节点的大小。如果a比b小，则c的next指针指向a当前节点，c=c.next，然后a指针后移。接着继续比较a.b当前节点大小，反之则把a换成b就行了。<br>4.一个p节点，然后找到距离p有n个next节点的点，一起往后遍历，到pn.next为空的时候，p就是我们要求的那个地址。<br>5.快慢指针，一个每次前进2个节点一个每次前进1节点。前进两个节点到表尾的时候，前进一个的就是中间点。","like_count":23,"discussions":[{"author":{"id":1239284,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/f4/d1fcfa4d.jpg","nickname":"家","note":"","ucode":"CA3597C948E9CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309682,"discussion_content":"第一题层主的意思应该是虽然给定一个单链表，我其实可以通过一些手段构造一个新的带pre的链表，或者通过遍历专门开个数组存一下每个节点的pre，只要最后返回一个反转后的单链表就是能够满足题意的。正统的反转链表在运行中的某一时刻也是会让给定的单链表变得不是单链表。支持一下层主。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601385362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113778,"discussion_content":"第2题，链表中环的检测，要注意链表中的环不一定是从头到尾简单的一个环，有可能是从某个中间节点开始出现了环。所以你的“最简单就是一个节点在头，一个节点一直遍历，地址相等就是环”这个解决方案是有遗漏的，只能针对整条链表都是一个环的情况。而快慢指针法是可以的，用两个指针，慢指针每次前进1位，快指针每次前进2位，如果链表中出现了环，则快指针会先进入环中，然后一直在循环，直到慢指针也进入了环，当两个指针相遇时，我们就可以判定链表中出现了环。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577931679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113927,"discussion_content":"当时是写错了，本来是要用个set来记录遍历过的节点，以前的评价不能编辑了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577941822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":113778,"ip_address":""},"score":113927,"extra":""}]},{"author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305235,"discussion_content":"那不就是双向链表了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599822702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309911,"discussion_content":"不知道你从哪里得出来是双向链表的结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601510951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305235,"ip_address":""},"score":309911,"extra":""}]},{"author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41428,"discussion_content":"单链表哪里有p.pre嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572424452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41610,"discussion_content":"没有可以自己构造一个节点当做pre啊，这提供的是思路，又不是实际代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41428,"ip_address":""},"score":41610,"extra":""}]},{"author":{"id":1325926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/66/855ba286.jpg","nickname":"宛若游龙","note":"","ucode":"93AFC061EC6C7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34356,"discussion_content":"p.pre还是单链表？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571195578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1325926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/66/855ba286.jpg","nickname":"宛若游龙","note":"","ucode":"93AFC061EC6C7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41611,"discussion_content":"没有不能自己构造一个当成pre吗，非要杠","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572480038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":34356,"ip_address":""},"score":41611,"extra":""},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1325926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/66/855ba286.jpg","nickname":"宛若游龙","note":"","ucode":"93AFC061EC6C7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309678,"discussion_content":"他的意思是新建一个Node pre = null，然后一直维护这个节点，不懂就不要瞎喷了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601384634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":34356,"ip_address":""},"score":309678,"extra":""}]}]},{"had_liked":false,"id":137800,"user_name":"江谢木","can_delete":false,"product_type":"c1","uid":1563403,"ip_address":"","ucode":"E1B1B0F0F03D41","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","comment_is_top":false,"comment_ctime":1569856814,"is_pvip":false,"replies":[{"id":"53095","content":"看我后面有一篇加餐文章：羁绊你前行的不是肆虐的狂风 而是你内心的迷茫","user_name":"作者回复","comment_id":137800,"uid":"1190123","ip_address":"","utype":1,"ctime":1570027010,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"83174235438","product_id":100017301,"comment_content":"花了一个周末学链表，还是没学会写，是不是可以放弃了？","like_count":19,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469268,"discussion_content":"看我后面有一篇加餐文章：羁绊你前行的不是肆虐的狂风 而是你内心的迷茫","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570027010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005351,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/27/805786be.jpg","nickname":"笨笨","note":"","ucode":"6DA6DCAF6A7DCB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315546,"discussion_content":"我也是感觉好绕啊~哭了~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603288350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2376153,"avatar":"https://static001.geekbang.org/account/avatar/00/24/41/d9/7e034e68.jpg","nickname":"小高","note":"","ucode":"F524D5E07AFDC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352733,"discussion_content":"C语言基础要好，就容易理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614832613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115862,"avatar":"https://static001.geekbang.org/account/avatar/00/11/06/d6/e465e74a.jpg","nickname":"Leo","note":"","ucode":"500D65AEFC9BD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106538,"discussion_content":"兄弟，多写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577539387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211359,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","nickname":"kings","note":"","ucode":"D478306EBF582E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66910,"discussion_content":"温故而知新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575115568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/da/906dce6a.jpg","nickname":"sudo","note":"","ucode":"1936F782F914D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53279,"discussion_content":"这个东西还是要多写,我是学会了忘了, 再学会再忘了, 目前还是忘了, 还在继续学, 没有什么是一直都会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574153550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30154,"user_name":"hope","can_delete":false,"product_type":"c1","uid":1250784,"ip_address":"","ucode":"468A802184AB32","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/e0/bc9f556c.jpg","comment_is_top":false,"comment_ctime":1538704713,"is_pvip":false,"replies":[{"id":"10891","content":"要不你写下 提个pull request？","user_name":"作者回复","comment_id":30154,"uid":"1190123","ip_address":"","utype":1,"ctime":1538749099,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"83143083337","product_id":100017301,"comment_content":"看完了，打卡，稍后手写作业，去GitHub上看了下 ，希望老师把c的代码也添加上，谢谢","like_count":19,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425873,"discussion_content":"要不你写下 提个pull request？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538749099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30162,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1538706659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78848117987","product_id":100017301,"comment_content":"如何写好链表代码？<br><br>1. 理解指针或引用的含义<br>什么是指针？指针是一个变量，该变量中存的是其它变量的地址。将普通变量赋值给指针变量，其实是把它的地址赋值给指针变量。<br><br>2. 警惕指针丢失和内存泄漏<br>在插入和删除结点时，要注意先持有后面的结点再操作，否者一旦后面结点的前继指针被断开，就无法再访问，导致内存泄漏。<br><br>3. 利用哨兵简化难度<br>链表的插入、删除操作，需要对插入第一个结点和删除最后一个节点做特殊处理。利用哨兵对象可以不用边界判断，链表的哨兵对象是只存指针不存数据的头结点。<br><br>4. 重点留意边界条件处理<br>操作链表时要考虑链表为空、一个结点、两个结点、头结点、尾结点的情况。学习数据结构和算法主要是掌握一系列思想，能在其它的编码中也养成考虑边界的习惯。<br><br>5. 举例画图，辅助思考<br>对于比较复杂的操作，可以用纸笔画一画，释放脑容量来做逻辑处理（时间换空间思想），也便于完成后的检查。<br><br>6. 多写多练，没有捷径<br>孰能生巧，不管是什么算法，只有经过反复的练习，才能信手拈来。<br><br><br>哨兵对象思想，在 iOS AutoreleasePool 中有用到，在 AutoreleasePoolPush 时添加一个哨兵对象，Pop 时将到哨兵对象之间的所有 Autorelease 对象发送 release 消息。<br>","like_count":18},{"had_liked":false,"id":156107,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1574819969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57409394817","product_id":100017301,"comment_content":"大家对技巧三中的两段代码有些疑问: 代码2为什么比代码1性能更优? 为什么代码2少了一个比较?<br><br>原因如下,首先要明确作者举两个代码例子的目的是为了说明&quot;哨兵&quot;的优势. <br>我们先分析没有哨兵的代码1,逻辑很简单,在遍历数组的时候,挨个比较每一个元素是否等于key,另外我们要还判断循环条件i是否小于n,如果相等了,那么就退出循环遍历,所以针对每一个元素判断都进行了2次比较.<br>代码2,一开始就把数组中最后一个元素修改成了目标key,while一次循环中,循环条件仅仅判断当前数组元素是否等于key,对于跳出循环的条件是省略的,为什么呢?因为前面说了,数组最后一个元素改成了key,最后肯定会在数组中找到key,也就是定会跳出. 于是最后我们只关注i是不是n-1就可以了,是n-1代表&quot;原始整个数组&quot;元素中的确没有key.","like_count":13},{"had_liked":false,"id":30117,"user_name":"Miletos","can_delete":false,"product_type":"c1","uid":1240655,"ip_address":"","ucode":"024F1960181AC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/4f/b9ebc543.jpg","comment_is_top":false,"comment_ctime":1538670247,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57373245095","product_id":100017301,"comment_content":"C语言，二级指针可以绕过不带头结点链表删除操作的边界检查。","like_count":13,"discussions":[{"author":{"id":1340481,"avatar":"https://static001.geekbang.org/account/avatar/00/14/74/41/38e7e2e0.jpg","nickname":"不二王","note":"","ucode":"5FE4D855FD5945","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573398,"discussion_content":"的确，《C和指针》这本说里有详细的讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653388543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30156,"user_name":"广进","can_delete":false,"product_type":"c1","uid":1235504,"ip_address":"","ucode":"A9A3FA76024577","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/30/f636914e.jpg","comment_is_top":false,"comment_ctime":1538705447,"is_pvip":false,"replies":[{"id":"11033","content":"不好意思 我以后多加点注释 不过两段代码的功能是一样的 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538959490,"ip_address":"","comment_id":30156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40193411111","product_id":100017301,"comment_content":"作为一个小白，每节课都有看不懂的，这次又来了，那个代码二，从while往下就不懂了，怎么感觉和一的功能不一样了。求指导。  <br><br>还有您都觉得二可读性差了，加点注释照顾照顾我们这些小白呀。😭","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425875,"discussion_content":"不好意思 我以后多加点注释 不过两段代码的功能是一样的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538959490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81391,"user_name":"北天魔狼","can_delete":false,"product_type":"c1","uid":1188144,"ip_address":"","ucode":"C22623ECEB8DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","comment_is_top":false,"comment_ctime":1553898964,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"27323702740","product_id":100017301,"comment_content":"第一次看专栏到15篇，就实在看不懂了，因为清楚的知道这一篇&quot;哨兵&quot;我没看懂，前几天从新开始，我能理解链表了。我一定要一篇一篇的弄懂","like_count":6,"discussions":[{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413970,"discussion_content":"看懂了，那写会了没？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636623480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32602,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1539618884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27309422660","product_id":100017301,"comment_content":"我比较笨，看了大概有4~5遍代码一、二，才把哨兵看懂，才明白哨兵在临界值过程中扮演的重要作用(*^▽^*)。","like_count":6},{"had_liked":false,"id":30331,"user_name":"莫弹弹","can_delete":false,"product_type":"c1","uid":1239978,"ip_address":"","ucode":"60A25C709A665F","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/aa/db213a66.jpg","comment_is_top":false,"comment_ctime":1538796734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27308600510","product_id":100017301,"comment_content":"代码二示例返回值int是不是写成inf了哈哈哈<br><br>算法设计思路应该是<br>&#47;&#47; 用来找出给定key在数组中的下标，找不到则返回-1<br><br>a是被遍历的数组<br>n是数组长度<br>key是要寻找的值<br><br>1， 判断尾节点是不是要寻找的值，是的话返回n-1，因为数组下标从0开始所以要长度-1才是下标<br><br>2， 使用哨兵变量保存尾节点<br><br>3， 把key放到尾节点，让key成为数组中最后一个值，这样做是为了下一步的遍历<br><br>4， 开始从头开始遍历数组，i为数组下标，如果找到与key相等的元素则退出遍历，否则遍历整个数组<br><br>5， 如果i是尾节点下标，说明没有找到key，如果不是则i为寻找的节点下标，返回i<br><br>6， 把哨兵变量还原赋值到数组尾节点，也就是还原数组<br><br>也就是说平时用的临时变量就是哨兵变量<br>","like_count":6},{"had_liked":false,"id":111429,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1562556683,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23037393163","product_id":100017301,"comment_content":"算法_007<br><br>#作业：<br>几个问题随后一一实现，更新github<br><br># 内容：<br><br>六个技巧：<br>1. 理解指针和引用<br>2. 指针丢失和内存泄漏<br><br>前两点都是围绕着指针这个概念的，其实写程序的时候，脑子里要有程序在物理层的运行模型。这样会谨慎地意识到直觉与真实的运行情况的异同。在编程中就会考虑到容易引发的问题(指针丢失，空指针，内存泄漏等)。<br><br>3. 利用哨兵化解难度<br>写程序是一个平衡的技术。要根据情况，权衡几个因素的重要性：性能(执行时间、占用空间)，可读性、稳定性、编码效率等。<br><br>4. 边界条件<br>这又是一个直觉与事实的差异。<br>写代码是需求的“全量镜像”，我们要考虑是逻辑的完备性(当然，不可能绝对)，线上程序的真实运行场景是非常多元的，爆发问题的原因常常是人们认为“不可能”、“不至于”的问题。<br><br>5. 画图<br>人类大脑更擅长理解图像，属于利用优势。<br><br>6. 多练<br>练习是增加&#47;增强脑回路的过程，练习足够多，能力就“长”在手上了，其实是大脑回路足够多足够强了，但这种能力无法语言表达的。<br><br># 感悟：<br>有人说编程是最好的自学方法，为什么呢？因为反馈足够快，错了马上改，迭代迅速，这样大脑就真正理解了知识，明白了应用的方式。<br><br>比如说本节课说了6个技巧，道理上每个人都看得懂，也都认同它的正确性，可真正理解作者想要强调东西的人并不多。大概率人们会点头觉得有道理，然后不久就忘掉了。<br>这背后的原因是信息量不够，光从文字的角度无法表达全部的信息，没有建立足够的脑神经回路。<br><br>所以我方式是，尽量地与大脑中已有的内容联想，不折不扣地把编程题一个个实现，文章中有看不懂的地方多看几遍，还是不懂就查资料，这个时间花在了正确的地方，不怕慢。<br><br>不说了，我去写程序了。。。","like_count":5,"discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310666,"discussion_content":"不怕慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601981308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181653,"user_name":"小肥羊","can_delete":false,"product_type":"c1","uid":1081582,"ip_address":"","ucode":"9F44BAA1A59FAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","comment_is_top":false,"comment_ctime":1582605410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18762474594","product_id":100017301,"comment_content":"刷leetcode的时候，<br>别丢失指针<br>测试用例用[] [1,2] [1]检测边缘<br>dummyHead用作哨兵<br>这三个方法屡试不爽，大大提高一次submit概率","like_count":4},{"had_liked":false,"id":31013,"user_name":"啊波次的额佛哥～","can_delete":false,"product_type":"c1","uid":1201998,"ip_address":"","ucode":"6F31255207CB17","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/4e/302bfe22.jpg","comment_is_top":false,"comment_ctime":1539066388,"is_pvip":false,"replies":[{"id":"11153","content":"那是其他同学写的 提交上去的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539080756,"ip_address":"","comment_id":31013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18718935572","product_id":100017301,"comment_content":"老师还写了oc版的，惊喜。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426182,"discussion_content":"那是其他同学写的 提交上去的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539080756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30880,"user_name":"海贼王","can_delete":false,"product_type":"c1","uid":1239233,"ip_address":"","ucode":"9F35793FAA3F5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c1/e2cc1d04.jpg","comment_is_top":false,"comment_ctime":1539040744,"is_pvip":false,"replies":[{"id":"11097","content":"行的 不好意思","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539048807,"ip_address":"","comment_id":30880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18718909928","product_id":100017301,"comment_content":"老师，以后不要再问场中穿插英文行吗，很影响理解的，如果非用不可还可以接受","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426126,"discussion_content":"行的 不好意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539048807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306175,"user_name":"wolfog","can_delete":false,"product_type":"c1","uid":1005815,"ip_address":"","ucode":"89BFEBE2E00B18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/f7/22ea9761.jpg","comment_is_top":false,"comment_ctime":1628418622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14513320510","product_id":100017301,"comment_content":"争哥的哨兵思想是想说将所有特殊情况转化为统一的范式。这让我想起来数学家灭火的段子：<br>一天，数学家觉得自己已受够了数学，于是他跑到消防队去宣布他想当消防员。<br>消防队长说：「您看上去不错，可是我得先给您一个测试。」<br>消防队长带数学家到消防队后院小巷，巷子里有一个货栈，一只消防栓和一卷软管。<br>消防队长问：「假设货栈起火，您怎么办？」<br>数学家回答：「我把消防栓接到软管上， 打开水龙，把火浇灭。」<br>消防队长说：「完全正确。最后一个问题：假设您走进小巷，而货栈没有起火，您怎么办？」<br>数学家疑惑地思索了半天，终于答道：「我就把货栈点着。」<br>消防队长大叫起来：「什么？太可怕了，您为什么要把货栈点着？」<br>数学家回答：「这样我就把问题化简为一个我已经解决过的问题了。」","like_count":3},{"had_liked":false,"id":207116,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1587008432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471910320","product_id":100017301,"comment_content":"昨天和今天自己在写反转链表，首先不知道ListNode需要自己创建，还以为是java提供的工具类，然后再力扣上找到关方答案，还是看不懂，就自己巧了一遍，然而还是没懂，链表之间是怎么连接起来的，又打了断点看了四遍，终于明白了。继续来，把剩下四个都搞明白，这里真心谢谢老师和评论区无私分享的大家。","like_count":3},{"had_liked":false,"id":157521,"user_name":"第四单元","can_delete":false,"product_type":"c1","uid":1747184,"ip_address":"","ucode":"3ED9D553E1DE17","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","comment_is_top":false,"comment_ctime":1575185230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14460087118","product_id":100017301,"comment_content":"学习这一节看文章用的时间不多，做那几道课后题（包括总结）花了一些时间，感觉挺有收获的。做题中我感觉有两个技巧挺巧妙和好用的。一个是虚拟的头结点的，比如在删除倒数第n个结点一题中，使用一个额外的头结点就可以将链表的第一个结点作为普通结点处理。另一个是快慢指针，这个思想在判断链表中的环、求中间结点中都有用到。","like_count":3},{"had_liked":false,"id":138391,"user_name":"许智鸿","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","comment_is_top":false,"comment_ctime":1570195212,"is_pvip":false,"replies":[{"id":"53602","content":"还是得多下点功夫，也没其他好办法。可以先看我的代码，然后再在网上找找其他代码看看。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580262,"ip_address":"","comment_id":138391,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14455097100","product_id":100017301,"comment_content":"老师，目前大三，想着重新学习一遍数据结构和算法。之前仅仅是从应试角度，学的一塌糊涂，现在发现连链表都不怎么会写了。<br><br>关于写代码这一点，一直发现自己很不得窍门。当然得刻意练习，多敲多练。但是往往是自己走的路不太对。就比如链表代码，我准备用C++，刚开始是参照网上的，但是网上的代码又千篇一律不知道用哪个，还是说直接看您写的代码，硬着头皮把它给看懂呢?然后在这个基础上敲熟呢?<br><br>关于书写代码，最好是适合新手，而不是伪代码，有什么好的途径?","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469505,"discussion_content":"还是得多下点功夫，也没其他好办法。可以先看我的代码，然后再在网上找找其他代码看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655563,"avatar":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","nickname":"许智鸿","note":"","ucode":"18E41503CC43C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32279,"discussion_content":"多谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571021241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75285,"user_name":"Geek_68a3d8","can_delete":false,"product_type":"c1","uid":1244905,"ip_address":"","ucode":"A8D4DF5460F50B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/e9/8fc7a875.jpg","comment_is_top":false,"comment_ctime":1552373646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14437275534","product_id":100017301,"comment_content":"单链表反转可算是调出来了<br>&#47;&#47; A -&gt; B -&gt; C -&gt; D -&gt; E<br>    &#47;&#47; 中间状态<br>    &#47;&#47; A &lt;- B C -&gt; D -&gt; E<br>    &#47;&#47; 此时B是header，current已经指向了C，需要经过一番操作达到如下效果<br>    &#47;&#47; A &lt;- B &lt;- C D -&gt; E<br>    &#47;&#47; 此时C是header，current已经指向了D<br>    &#47;&#47; 所以操作的主要内容分四步<br>    &#47;&#47; 1. 暂存current.getNext() 即暂存后半截，一系列操作后将它赋值给current<br>    &#47;&#47; 2. 将current的next设置为header 即转向<br>    &#47;&#47; 3. 重设新header 即header = current<br>    &#47;&#47; 4. 将暂存的后半截给current。进入下一轮<br>    &#47;&#47; 其中的细节操作是current是头结点时，其next要设置为null<br>    public void reverse() {<br>        if (header == null) {<br>            return;<br>        }<br>        SinglyLinkedNode&lt;T&gt; current = header;<br>        while (current != null) {<br>            &#47;&#47; 1<br>            SinglyLinkedNode&lt;T&gt; temp = current.getNext();<br>            &#47;&#47; 2<br>            if (current == header) {<br>                current.setNext(null);<br>            } else {<br>                current.setNext(header);<br>            }<br>            &#47;&#47; 3<br>            header = current;<br>            &#47;&#47; 4<br>            current = temp;<br>        }<br>    }","like_count":3},{"had_liked":false,"id":32505,"user_name":"coulson","can_delete":false,"product_type":"c1","uid":1125035,"ip_address":"","ucode":"ADBC6AEED866FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/ab/6b2475e9.jpg","comment_is_top":false,"comment_ctime":1539593912,"is_pvip":false,"replies":[{"id":"11852","content":"为啥呢 能详细说说吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539606864,"ip_address":"","comment_id":32505,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14424495800","product_id":100017301,"comment_content":"这段代码，执行应该会报错吧？<br>while (a[i] != key) {<br>            ++i;<br> }<br>","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426797,"discussion_content":"为啥呢 能详细说说吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539606864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442535,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/e7/20294573.jpg","nickname":"小石头","note":"","ucode":"F72197C6F06889","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235,"discussion_content":"不会报数组越界错误的，数组最后一个元素是哨兵","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561345629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521236,"avatar":"https://static001.geekbang.org/account/avatar/00/17/36/54/39378ff5.jpg","nickname":"wz","note":"","ucode":"576343ECD04C64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379810,"discussion_content":"为啥呢 i一直增大呀 可能会超过数组长度？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624169192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30370,"user_name":"YeJQ","can_delete":false,"product_type":"c1","uid":1248983,"ip_address":"","ucode":"4C7BE99C3D6C74","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/d7/07e2d1f0.jpg","comment_is_top":false,"comment_ctime":1538811795,"is_pvip":false,"replies":[{"id":"10956","content":"你说的没错，可能是我写的有点误解。我的意思是当链表只剩下一个结点的时候，删除操作是有点不一样的。最后一个节点我这里并不是指尾节点.","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838300,"ip_address":"","comment_id":30370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14423713683","product_id":100017301,"comment_content":"老师我有个疑问，就是带头链表那，我感觉在删除最后一个结点时，就算使用带头链表，也是得通过判断当前指针所指结点的下一个是否为空来确定是否为最后一个结点吧？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425963,"discussion_content":"你说的没错，可能是我写的有点误解。我的意思是当链表只剩下一个结点的时候，删除操作是有点不一样的。最后一个节点我这里并不是指尾节点.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30298,"user_name":"起点·终站","can_delete":false,"product_type":"c1","uid":1239857,"ip_address":"","ucode":"A5AD31F28C240E","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/31/96b76ca8.jpg","comment_is_top":false,"comment_ctime":1538782542,"is_pvip":false,"replies":[{"id":"10963","content":"关键是少了一行比较操作吧、","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838756,"ip_address":"","comment_id":30298,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14423684430","product_id":100017301,"comment_content":"那两段代码，把小于号换成不等号，有什么区别么？还是在比较N次啊😱","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425931,"discussion_content":"关键是少了一行比较操作吧、","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1478430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuEkja2Eib1cXFMh7kXbzFl2RQNea4CHrkXVRH98m7lzJWKIictyFdCWxvCNrlr8qjW5E4QBibpdGZQ/132","nickname":"lovingstranger","note":"","ucode":"5590AA5A7C3D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245,"discussion_content":"代码一 似乎也可以换成这种代码二的写法吧，也不用 比较 i < n了吧，不知道是哪里有误解的，还需要大神讲解一下啦\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561356507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30143,"user_name":"Richard Zhong","can_delete":false,"product_type":"c1","uid":1213417,"ip_address":"","ucode":"F91A8EE5992FAB","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/e9/3016ed84.jpg","comment_is_top":false,"comment_ctime":1538699925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14423601813","product_id":100017301,"comment_content":"深入浅出，太赞了","like_count":3},{"had_liked":false,"id":265599,"user_name":"Geek_0ddc80","can_delete":false,"product_type":"c1","uid":2350585,"ip_address":"","ucode":"57B8C059E6800D","user_header":"","comment_is_top":false,"comment_ctime":1606959275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10196893867","product_id":100017301,"comment_content":"AQS的线程等待队列使用的哨兵实现的吧，他的head节点永远指向一个无数据的Node节点","like_count":2},{"had_liked":false,"id":247306,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599654476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189589068","product_id":100017301,"comment_content":"【要点】<br>1、理解指针或引用的含义。将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br>2、警惕指针丢失和内存泄漏。插入结点时，一定要注意操作的顺序，要先将需要改变节点保存，避免丢失。删除链表结点时，也一定要记得手动释放内存空间，否则，也会出现内存泄漏的问题。<br>3、利用哨兵简化实现难度。针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。我们可以通过引入哨兵结点的方法来简化操作，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。<br>4、重点留意边界条件处理。常用的检查链表代码是否正确的边界条件：<br>(1)如果链表为空时，代码是否能正常工作？<br>(2)如果链表只包含一个结点时，代码是否能正常工作？<br>(3)如果链表只包含两个结点时，代码是否能正常工作？<br>(4)代码逻辑在处理头结点和尾结点的时候，是否能正常工作？<br>5、举例画图，辅助思考。我可以可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。而且，当我们写完代码之后，也可以举几个例子，画在纸上，照着代码走一遍，很容易就能发现代码中的 Bug。<br>6、多写多练，没有捷径。5 个常见的链表操作：<br>(1)单链表反转<br>(2)链表中环的检测<br>(3)两个有序的链表合并<br>(4)删除链表倒数第 n 个结点<br>(5)求链表的中间结点<br>【思考】<br>1、函数返回对象时，对象尽量不为空，这样可以减少调用方的判控操作。<br>2、学习数据结构部和算法要做到戒骄戒躁持之以恒，当某些方法用的比较熟悉了之后，不要骄傲，要多想想这些好的算法如何在各种实际场景中使用，多想想是否还有其他更优秀的解法，可以到网上多看看其他优秀的解法。当遇到难题，的时候也不要急躁，自己想不明白就多看看别人的解法，从别人那里快速学习，很多方法不是靠死抠能想出来的，一定要善于学习别人的思路，如果别人的思路也理解不了，那也不要放弃，可跳过这部分，继续学习，总会有一天突然发现原来的难题顺势而解。总之，就是，不要放弃，不要放弃，数据结构和算法很多时候需要的并不是脑子多好使，而是你有多坚持，勤学勤练，必会有所成就。","like_count":2},{"had_liked":false,"id":195211,"user_name":"干TM的人工智能","can_delete":false,"product_type":"c1","uid":1523763,"ip_address":"","ucode":"4C8945A04FD16E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QVHwIz4ibF6Szgc3ArMM85Zk8RIjM69Djcs3mS1nYS0kbLV3JI5SZhicI81uGRFEbkcUNzVIydwtuVJ8HMticsNbw/132","comment_is_top":false,"comment_ctime":1585146942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175081534","product_id":100017301,"comment_content":"代码二和代码一就一个区别，代码二将key赋值给数组的最后一位，当然也可以赋值给数组的第一位（即哨兵）。<br>这样做1.省去了i &lt; n的判断。2.在数组不存在key的情况下不会出现死循环。","like_count":2},{"had_liked":false,"id":155996,"user_name":"奔跑","can_delete":false,"product_type":"c1","uid":1361556,"ip_address":"","ucode":"A64A0DCA50D9FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/c6/94/48ca3281.jpg","comment_is_top":false,"comment_ctime":1574809359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164743951","product_id":100017301,"comment_content":"什么时候讲过单链表反序？是我看漏了，还是这节课我看不到？","like_count":2},{"had_liked":false,"id":147302,"user_name":"小肥羊","can_delete":false,"product_type":"c1","uid":1081582,"ip_address":"","ucode":"9F44BAA1A59FAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","comment_is_top":false,"comment_ctime":1572857207,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10162791799","product_id":100017301,"comment_content":"都用代码实现了，确实不怎么怕了😬","like_count":2,"discussions":[{"author":{"id":1576826,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0f/7a/420b41cd.jpg","nickname":"Geek_183f9e","note":"","ucode":"70405BB513AA9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410663,"discussion_content":"用啥代码实现的？c么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635755001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140214,"user_name":"EXCEPTION","can_delete":false,"product_type":"c1","uid":1564141,"ip_address":"","ucode":"1B2AC5BF8E3DF3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBjVRMIAibS4SUSQQ1lolCdOwfsutKtF4hRF8NLKSNkzFlWBCzuIpIyDH75CAY0a6iamqBUcSWkDGQ/132","comment_is_top":false,"comment_ctime":1570851807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10160786399","product_id":100017301,"comment_content":"老师 单链表反转代码中<br>def reverse_self(self):<br>        if (self.head is None) or (self.head.next_node is None):<br>            return<br>        <br>        pre = self.head<br>        node = self.head.next_node<br>        while node is not None:<br>            pre, node = self.reverse_two_node(pre, node)<br>        self.head.next_node = None<br>        self.head = pre<br><br>最后两句代码 self.head.next_node = None  self.head = pre，为什么要先给head的next_node 赋值为None，再赋值self.head为pre？能否讲解下呢！","like_count":2},{"had_liked":false,"id":79755,"user_name":"笙南","can_delete":false,"product_type":"c1","uid":1218163,"ip_address":"","ucode":"39F2B7F155EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/73/b5158f6c.jpg","comment_is_top":false,"comment_ctime":1553533876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143468468","product_id":100017301,"comment_content":"我之前就花了一整周的晚上时间来练习反转单链表，终于看明白了","like_count":2},{"had_liked":false,"id":77790,"user_name":"渭河","can_delete":false,"product_type":"c1","uid":1376031,"ip_address":"","ucode":"8983C4DFAED2A6","user_header":"https://static001.geekbang.org/account/avatar/00/14/ff/1f/4f927519.jpg","comment_is_top":false,"comment_ctime":1552998935,"is_pvip":false,"replies":[{"id":"28434","content":"你的写法也可以的，都对的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553039459,"ip_address":"","comment_id":77790,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10142933527","product_id":100017301,"comment_content":"技巧二：警惕指针丢失和内存泄漏<br><br>弱弱的问下 pb中插入x节点为什么不是<br>p-&gt;next = x;  <br>x-&gt;next = b;  而是 <br>x-&gt;next = p-&gt;next;  <br>p-&gt;next = x;  <br>","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443853,"discussion_content":"你的写法也可以的，都对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553039459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073369,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/d9/829ac53b.jpg","nickname":"fangxuan","note":"","ucode":"3870F2BF5679A2","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1995,"discussion_content":"如果有p和b两个指针，无论是先把x和b连起来还是先把p和x先连起来，都是可以的；当只有p一个指针时，要在p的后面插入x，就需要先把x和p->next连起来，再把p和x连起来，这个顺序就是固定的了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563172308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2497929,"avatar":"https://static001.geekbang.org/account/avatar/00/26/1d/89/9e409cf9.jpg","nickname":"喝着咖啡摸鱼","note":"","ucode":"5C9B721C7D1F37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357545,"discussion_content":"这样不会导致内存断开吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615818692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34661,"user_name":"一生一世一双人","can_delete":false,"product_type":"c1","uid":1148589,"ip_address":"","ucode":"563500BA097B45","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/ad/dd7bfa58.jpg","comment_is_top":false,"comment_ctime":1540255698,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10130190290","product_id":100017301,"comment_content":"我说一下我对代码二的理解，把key放在最后一个数组里是有效的省掉i&lt;n,同时在while (a[i] != key) {<br>    ++i;<br>  }这个判断里防止了数组越界，感觉好巧妙。不知道我的理解对嘛？","like_count":2,"discussions":[{"author":{"id":1073369,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/d9/829ac53b.jpg","nickname":"fangxuan","note":"","ucode":"3870F2BF5679A2","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1996,"discussion_content":"相当于把两个判断条件合一了，在大量循环中，少一次判断还是能节省时间的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563172450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31602,"user_name":"听见下雨的声音","can_delete":false,"product_type":"c1","uid":1252718,"ip_address":"","ucode":"48812E94BCBA3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/6e/4c5eaa80.jpg","comment_is_top":false,"comment_ctime":1539243235,"is_pvip":false,"replies":[{"id":"11409","content":"加油💪","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539268724,"ip_address":"","comment_id":31602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129177827","product_id":100017301,"comment_content":"虽然本节课看的有些延迟，但是真心很有收获呀，在本节课之前知道链表是什么，看完以后没写代码之前也是很虚，但是把一楼同学提到的五道LeetCode题做完以后感觉理解的更深刻啦，有三道都几乎到了100%，哈哈很有成就感呢！以后每节课都要落地到代码！加油加油！","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426425,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539268724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30746,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538987704,"is_pvip":false,"replies":[{"id":"11074","content":"好 我尽量 主要是比较忙","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539003580,"ip_address":"","comment_id":30746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10128922296","product_id":100017301,"comment_content":"老师 github上那些代码多写点注释啊","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426080,"discussion_content":"好 我尽量 主要是比较忙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539003580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30618,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1538961314,"is_pvip":false,"replies":[{"id":"11041","content":"嗯嗯 多谢指正🙏 已改","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538963247,"ip_address":"","comment_id":30618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10128895906","product_id":100017301,"comment_content":"老师，代码二中的key是char类型吧，怎么跟代码一的类型不一样了？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426049,"discussion_content":"嗯嗯 多谢指正🙏 已改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538963247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30318,"user_name":"嘿嘿啊","can_delete":false,"product_type":"c1","uid":1248655,"ip_address":"","ucode":"6CCD7A0AF000A0","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/8f/a0232945.jpg","comment_is_top":false,"comment_ctime":1538791732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128726324","product_id":100017301,"comment_content":"提到哨兵，很明显的就是快排啊。<br>","like_count":2},{"had_liked":false,"id":30145,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1538701007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128635599","product_id":100017301,"comment_content":"不会早上4点钟起来备课吧","like_count":2},{"had_liked":false,"id":235337,"user_name":"潘壮","can_delete":false,"product_type":"c1","uid":1588825,"ip_address":"","ucode":"A441B08369F5AB","user_header":"https://static001.geekbang.org/account/avatar/00/18/3e/59/f362ac48.jpg","comment_is_top":false,"comment_ctime":1594978006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889945302","product_id":100017301,"comment_content":"我们再来看单链表结点删除操作。如果要删除结点 p 的后继结点，我们只需要一行代码就可以搞定。p-&gt;next = p-&gt;next-&gt;next;<br><br>这样被删除节点的内存没有回收哦","like_count":1},{"had_liked":false,"id":171616,"user_name":"杜义明","can_delete":false,"product_type":"c1","uid":1074160,"ip_address":"","ucode":"16EDEB07C75A4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/f0/27d3eff9.jpg","comment_is_top":false,"comment_ctime":1578977236,"is_pvip":false,"replies":[{"id":"66515","content":"iPad Paper","user_name":"编辑回复","user_name_real":"郭蕾","uid":"1000473","ctime":1578977370,"ip_address":"","comment_id":171616,"utype":2}],"discussion_count":2,"race_medal":0,"score":"5873944532","product_id":100017301,"comment_content":"文章里的图好精致呀，大佬用什么工具做的呢","like_count":1,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481436,"discussion_content":"iPad Paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578977370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074160,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/f0/27d3eff9.jpg","nickname":"杜义明","note":"","ucode":"16EDEB07C75A4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133851,"discussion_content":"非常感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578994760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156918,"user_name":"罗琦","can_delete":false,"product_type":"c1","uid":1033161,"ip_address":"","ucode":"C4A7AE3A04DA23","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/c9/f83b0109.jpg","comment_is_top":false,"comment_ctime":1574995694,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5869962990","product_id":100017301,"comment_content":"快排可以算一个哨兵的使用场景，还有redis集群部署也借助了哨兵思想","like_count":1},{"had_liked":false,"id":156496,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1584704,"ip_address":"","ucode":"C037710AACA0B2","user_header":"https://static001.geekbang.org/account/avatar/00/18/2e/40/84fdf54d.jpg","comment_is_top":false,"comment_ctime":1574903058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869870354","product_id":100017301,"comment_content":"哨兵节点在链表中是如何规避边界的，我看到数组中的应用，但是还是想不出来链表中的角色，是将head指向哨兵还是哨兵指向head?","like_count":1},{"had_liked":false,"id":147783,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1184658,"ip_address":"","ucode":"0641211EE9DA5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","comment_is_top":false,"comment_ctime":1572888142,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5867855438","product_id":100017301,"comment_content":"反转链表想到一种递归做法，写的比较垃圾，传的参数比较多，不知道怎么简化<br>public class Test{<br>\tpublic static void main(String[] args) {<br>        Node node1 = new Node(1);<br>        Node node2 = new Node(2);<br>        Node node3 = new Node(3);<br>        Node node4 = new Node(4);<br>        Node node5 = new Node(5);<br>        Node node6 = new Node(6);<br>        node1.setNext(node2).setNext(node3).setNext(node4).setNext(node5).setNext(node6);<br>        System.out.println(node1);<br>        Node node = Node.reverse(node1,node1.getNext(),node1);<br>        System.out.println(node);<br>    }<br><br>\t@Data<br>    static class Node{<br>        private Node next;<br>        private Object data;<br>        public Node setNext(Node next){<br>            this.next = next;<br>            return next;<br>        }<br><br>        public Node(Object data) {<br>            this.data = data;<br>        }<br><br>        public static Node reverse(Node node,Node next,Node oldHead){<br>            Node head = next.getNext();<br>            next.setNext(node);<br>            if(node == oldHead){<br>                node.setNext(null);<br>            }<br>            if(head == null){<br>                return next;<br>            }<br>            return reverse(next,head,oldHead);<br>        }<br>    }<br>}<br><br>测试效果：<br>1--&gt;2--&gt;3--&gt;4--&gt;5--&gt;6<br>6--&gt;5--&gt;4--&gt;3--&gt;2--&gt;1","like_count":1},{"had_liked":false,"id":134663,"user_name":"mfayz","can_delete":false,"product_type":"c1","uid":1249459,"ip_address":"","ucode":"28569DD162D1DD","user_header":"","comment_is_top":false,"comment_ctime":1568888342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863855638","product_id":100017301,"comment_content":"单链表反转java版<br>public class Node{<br>    int value;<br>    Node next;<br>    Node(int x){ value = x; }<br>}<br>class NodeUtils{<br>    public Node reverseNodeList( Node head){<br>        if(null == head || null == head.next)<br>            return head;<br>        Node p,q,r;<br>        p = head;<br>        q = head.next;<br>        p.next = null;<br>         while(null != q){<br>              r = q.next;<br>              q.next = p;<br>              p = q;<br>              q = r;<br>          }<br>          head = p;<br>          return head;<br>    }<br>}","like_count":1},{"had_liked":false,"id":118869,"user_name":"鑫","can_delete":false,"product_type":"c1","uid":1614472,"ip_address":"","ucode":"AE4F60490E9A81","user_header":"https://static001.geekbang.org/account/avatar/00/18/a2/88/387f84f9.jpg","comment_is_top":false,"comment_ctime":1564455057,"is_pvip":false,"replies":[{"id":"43661","content":"可以啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564526854,"ip_address":"","comment_id":118869,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859422353","product_id":100017301,"comment_content":"老师，我想每个算法都写一遍当作示例可以吗<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460627,"discussion_content":"可以啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564526854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86445,"user_name":"阿仁","can_delete":false,"product_type":"c1","uid":1101024,"ip_address":"","ucode":"972237E993F738","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/e0/5d85f93c.jpg","comment_is_top":false,"comment_ctime":1555378494,"is_pvip":false,"replies":[{"id":"31227","content":"代码少了一个判断条件语句","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555469330,"ip_address":"","comment_id":86445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850345790","product_id":100017301,"comment_content":"我问个问题，技巧三的例子二中，用到了while循环，判断条件是(a[i] != key)，最坏情况要执行N遍；例子一中也用到了while循环，判断条件是(i &lt; n)，最坏情况也要执行N遍。有什么区别？快在哪里？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447024,"discussion_content":"代码少了一个判断条件语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555469330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72650,"user_name":"小孩","can_delete":false,"product_type":"c1","uid":1112367,"ip_address":"","ucode":"A7F587FC641E63","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/2f/01b32495.jpg","comment_is_top":false,"comment_ctime":1551685433,"is_pvip":false,"replies":[{"id":"26803","content":"p-&gt;next-&gt;next  存储都是p的下下个结点的地址<br>p-&gt;next 存储的是p下一个结点的地址<br><br>我们把下下个结点的地址赋值给了p-&gt;Next，就表示P指向了p的下下个结点<br><br>这里要注意区分：编程语言中赋值号两边的变量的含义，前面代表变量，后面代表值。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551925383,"ip_address":"","comment_id":72650,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846652729","product_id":100017301,"comment_content":"p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p 结点的 next 指针存储了 p 结点的下下一个结点的内存地址，这句话怎么理解呢？p-&gt;next不是存下一个节点的地址吗，为什么是下下节点","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441673,"discussion_content":"p-&amp;gt;next-&amp;gt;next  存储都是p的下下个结点的地址\np-&amp;gt;next 存储的是p下一个结点的地址\n\n我们把下下个结点的地址赋值给了p-&amp;gt;Next，就表示P指向了p的下下个结点\n\n这里要注意区分：编程语言中赋值号两边的变量的含义，前面代表变量，后面代表值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551925383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72403,"user_name":"逗鹅冤","can_delete":false,"product_type":"c1","uid":1101077,"ip_address":"","ucode":"DAC59893C4DB6C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/15/e589a84f.jpg","comment_is_top":false,"comment_ctime":1551609684,"is_pvip":false,"replies":[{"id":"26265","content":"因为专栏是针对各种水平的同学的，所以，你可以选择先把基础的内容看懂，然后等有空了，再针对性的学习，比如针对性的学习哨兵的写法。毕竟一口吃不成胖子，学习要循序渐进。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551665245,"ip_address":"","comment_id":72403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846576980","product_id":100017301,"comment_content":"有些问题请教一下老师，每一节课课后老师都会留一些思考题或者一些发散题让我们来自己思考，但是我发现我自己有些东西真的是怎么想都没有思路，一点头绪都没有，那么请教老师，在思考这些问题的时候是不是我的知识面太窄了，了解的东西不够多才想不到呢？还是什么问题？老师针对这种问题有没有好的建议，可以拓展一些能够让我们能自己思考到正确方向的方法呢？<br>比如这堂课思考题：你是否还能够想到其他场景，利用哨兵可以大大地简化编码难度？<br>只在课堂的例子中看懂哨兵的解释，让我想其他的场景我却没有方向和头绪","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441574,"discussion_content":"因为专栏是针对各种水平的同学的，所以，你可以选择先把基础的内容看懂，然后等有空了，再针对性的学习，比如针对性的学习哨兵的写法。毕竟一口吃不成胖子，学习要循序渐进。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551665245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44978,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543537303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838504599","product_id":100017301,"comment_content":"把该讲内容总结为几个问题, 大家复习的时候可以先尝试回答这些问题检查自己的掌握程度:<br>\t1. <br>写链表代码6个技巧都是什么?<br>\t2. <br>如何指针和对象引用的概念? <br>\t3. <br>链表代码为什么会出现指针对视的情况, 如何避免?<br>\t4. <br>哨兵机制为什么可以简化链表代码并且提高效率? 如何实现哨兵机制?<br>\t5. <br>检查链表代码时要格外留意哪些边界情况?<br>\t6. <br>举例和画图可以怎样帮助思考?<br><br><br>","like_count":1},{"had_liked":false,"id":36972,"user_name":"charles","can_delete":false,"product_type":"c1","uid":1270127,"ip_address":"","ucode":"936B89B442DB7B","user_header":"https://static001.geekbang.org/account/avatar/00/13/61/6f/f072c3d1.jpg","comment_is_top":false,"comment_ctime":1541409542,"is_pvip":false,"replies":[{"id":"13272","content":"两个指针 第一个指针先走k步第二个指针才开始移动 然后两个指针同步往后移动 当第一个指针到尾节点时 第二个指针指向的节点就是要删除的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541468903,"ip_address":"","comment_id":36972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5836376838","product_id":100017301,"comment_content":" demo中删除倒数第K个结点，没看懂啊。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428104,"discussion_content":"两个指针 第一个指针先走k步第二个指针才开始移动 然后两个指针同步往后移动 当第一个指针到尾节点时 第二个指针指向的节点就是要删除的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541468903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33692,"user_name":"vaccywen","can_delete":false,"product_type":"c1","uid":1115128,"ip_address":"","ucode":"077FDB50831921","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/f8/f98df0a7.jpg","comment_is_top":false,"comment_ctime":1539854360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834821656","product_id":100017301,"comment_content":"  &#47;&#47; while 循环比起代码一，少了 i&lt;n 这个比较操作<br>  while (a[i] != key) {<br>    ++i;<br>  }<br><br>这段代码一箭双雕，赞！","like_count":1},{"had_liked":false,"id":32734,"user_name":"守着云开","can_delete":false,"product_type":"c1","uid":1183885,"ip_address":"","ucode":"22220485396D0D","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/8d/43edb2dd.jpg","comment_is_top":false,"comment_ctime":1539683035,"is_pvip":false,"replies":[{"id":"11940","content":"github上的？麻烦提供下你的测试数据","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539701817,"ip_address":"","comment_id":32734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834650331","product_id":100017301,"comment_content":"检测是否有环的代码 会走死循环哎 老师","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426875,"discussion_content":"github上的？麻烦提供下你的测试数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539701817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32405,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1539565833,"is_pvip":false,"replies":[{"id":"11879","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539615257,"ip_address":"","comment_id":32405,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834533129","product_id":100017301,"comment_content":"<br>if (head-&gt;next == null) {<br>   head = null;<br>}   删除最后一个结点为什么这么写  难道链表一共只有一个结点？并且这个结点是头结点？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426759,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539615257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30743,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538987559,"is_pvip":false,"replies":[{"id":"11073","content":"在github上有的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539003556,"ip_address":"","comment_id":30743,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833954855","product_id":100017301,"comment_content":"动手写了上面5个链表操作以后强烈渴求老师能写一个答案出来","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426079,"discussion_content":"在github上有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539003556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30482,"user_name":"牵手约定","can_delete":false,"product_type":"c1","uid":1249461,"ip_address":"","ucode":"01AF328FDDD38C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/b5/0813608c.jpg","comment_is_top":false,"comment_ctime":1538883907,"is_pvip":false,"replies":[{"id":"11035","content":"买本书 一块看 纯看专栏可能会有点吃力","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538959669,"ip_address":"","comment_id":30482,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833851203","product_id":100017301,"comment_content":"对于我这种小白，现在都开始猛了，硬着头皮使劲看<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426021,"discussion_content":"买本书 一块看 纯看专栏可能会有点吃力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538959669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30431,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1538840289,"is_pvip":false,"replies":[{"id":"11001","content":"你怎么打印的结果？删除之后会返回新的链表的头指针，你要用那个头指针遍历打印的！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538879117,"ip_address":"","comment_id":30431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833807585","product_id":100017301,"comment_content":"接上个反应的测试问题：我的测试代码是这样的。 <br>Node node4 = new Node(4, null);<br>Node node3 = new Node(3, node4);<br>Node node2 = new Node(2, node3);<br>Node node1 = new Node(1, node2);<br><br>deleteLastKth(node1, 4);<br>测试结果为：1、2、3、4","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425999,"discussion_content":"你怎么打印的结果？删除之后会返回新的链表的头指针，你要用那个头指针遍历打印的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538879117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30402,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1538827912,"is_pvip":false,"replies":[{"id":"10951","content":"k的边界条件忘了写，如果k&lt;=0 直接return。你说的k=4的时候删除的结果不对，这个我去验证了下，跟你的结果不一样啊，我测出来是正确的呢。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538837812,"ip_address":"","comment_id":30402,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833795208","product_id":100017301,"comment_content":"测试提供的源码，删除倒数第k个节点，感觉有点问题：测试数据为，1-&gt;2-&gt;3-&gt;4,删除0，1，2，3，4的结果分别为：1,2,3;1,2,3;1,2,4;1,3,4;1,2,3,4","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425982,"discussion_content":"k的边界条件忘了写，如果k&amp;lt;=0 直接return。你说的k=4的时候删除的结果不对，这个我去验证了下，跟你的结果不一样啊，我测出来是正确的呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538837812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30355,"user_name":"SunshlnW","can_delete":false,"product_type":"c1","uid":1211252,"ip_address":"","ucode":"7B82BBC5F30633","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/74/63563202.jpg","comment_is_top":false,"comment_ctime":1538807522,"is_pvip":false,"replies":[{"id":"10959","content":"可以的 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838406,"ip_address":"","comment_id":30355,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833774818","product_id":100017301,"comment_content":"Node fast = list.next;<br>Node slow = list;<br>老师，关于检测链表环的代码这部分有疑问，fast指针初始化为list也可以吧！","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425956,"discussion_content":"可以的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30260,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1538746653,"is_pvip":false,"replies":[{"id":"10969","content":"1. 说的太对了！<br>2. 重点是少了i&lt;n呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538839351,"ip_address":"","comment_id":30260,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833713949","product_id":100017301,"comment_content":"很多人问文中的内存泄露。在这里主要是c c++等没有内存回收机制的语言。在链表中的内存泄露实质有“两个“，一是在链表操作时，结点的next指针丢弃，造成对新链表某些结点被“与世隔绝”了，这些结点也就无法free掉，可以想象成僵尸进程。二是链表操作时，next指针指向ok，但忘了free掉对应的结点。<br>总的来说，链表的内存泄露就是没有free掉对应的结点。<br><br>同时对代码二有疑问❓ while(a[i] != key)不是也相当于代码一的循环？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425916,"discussion_content":"1. 说的太对了！\n2. 重点是少了i&amp;lt;n呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538839351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30236,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1538735542,"is_pvip":false,"replies":[{"id":"11031","content":"可以去github上看看 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538959374,"ip_address":"","comment_id":30236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833702838","product_id":100017301,"comment_content":"可否举个用Java或python 写链表的例子，在Java或python如何获得变量地址。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425907,"discussion_content":"可以去github上看看 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538959374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30222,"user_name":"蓝色的梦","can_delete":false,"product_type":"c1","uid":1243151,"ip_address":"","ucode":"928C53ED4DFB60","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/0f/e08fd4bd.jpg","comment_is_top":false,"comment_ctime":1538729773,"is_pvip":false,"replies":[{"id":"10894","content":"一共有5个节点 删除倒数第5个。你试下这种情况","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538749291,"ip_address":"","comment_id":30222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833697069","product_id":100017301,"comment_content":"老师，删除链表倒数第K个节点时候，判断prev==NULL是什么意思，这个什么时候可能为空?","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425902,"discussion_content":"一共有5个节点 删除倒数第5个。你试下这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538749291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30130,"user_name":"李嘉颖","can_delete":false,"product_type":"c1","uid":1249474,"ip_address":"","ucode":"1D6631DC5F800F","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/c2/38939d66.jpg","comment_is_top":false,"comment_ctime":1538693966,"is_pvip":false,"replies":[{"id":"10885","content":"同学你好，这个list.get(i)中的list是啥？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538748750,"ip_address":"","comment_id":30130,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833661262","product_id":100017301,"comment_content":"老师你好，我想问个比较幼稚的问题，就是list.get(i)这个的代码或是公式是什么样的，如果是通过下标查找的话时间复杂度不也是O(1)吗，但是不连续的公式是与数组的完全不一样的啊。求解","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425862,"discussion_content":"同学你好，这个list.get(i)中的list是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538748750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359300,"user_name":"worthto","can_delete":false,"product_type":"c1","uid":1387712,"ip_address":"北京","ucode":"41D7ABBBD2E7FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N6yjnrLnMW4XVSkBr3f0N3F962l35b5j0kib9VSlAqqbf6iaoCPicL1WnJ9KjgT4egQ7A2G0Zx3OayaK4yuoZrUVA/132","comment_is_top":false,"comment_ctime":1665396227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665396227","product_id":100017301,"comment_content":"单链表反转，个人觉得代码还是挺清晰的，求大神指正<br><br>    &#47;**<br>     * 单链表反转<br>     * 遍历链表，并用头插法生成一个新的链表<br>     *&#47;<br>    public void reverse() {<br>        &#47;&#47; 特殊情况<br>        if (headCursor.next == null || headCursor.next == tailCursor.next) {<br>            return;<br>        }<br>        Node cursorNode = new Node(null, headCursor.next);<br>        &#47;&#47; 初始化头尾指针<br>        tailCursor.next = headCursor.next;<br>        headCursor.next = null;<br>        &#47;&#47; 遍历 临界值：第一个<br>        while(cursorNode.next != null) {<br>            &#47;&#47; 把item抠出来<br>            Node item = removeNext(cursorNode);<br>            &#47;&#47; 头插法重组headCursor<br>            addToFirst(item);<br>        }<br>    }<br><br>    &#47;**<br>     * 把结点添加到头部<br>     *&#47;<br>    protected void addToFirst(Node item) {<br>        item.next = headCursor.next;<br>        headCursor.next = item;<br>    }<br><br>    &#47;**<br>     * 删除next节点<br>     *&#47;<br>    protected Node removeNext(Node cursorNode) {<br>        Node item = cursorNode.next;<br>        cursorNode.next = cursorNode.next.next;<br>        item.next = null;<br>        return item;<br>    }","like_count":0},{"had_liked":false,"id":358266,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1664156681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664156681","product_id":100017301,"comment_content":"写链表的方法：<br>1. 多写<br>2. 画图<br>3. 注意边界条件<br>4. 哨兵<br>5. 指针丢失<br><br>哨兵除了链表，没有想到其他方法。","like_count":0},{"had_liked":false,"id":357924,"user_name":"欣","can_delete":false,"product_type":"c1","uid":1236299,"ip_address":"北京","ucode":"11BC2F979372F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/4b/63326cd6.jpg","comment_is_top":false,"comment_ctime":1663749793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663749793","product_id":100017301,"comment_content":"关于哨兵，如果是双向链表，是不是需要添加两个哨兵呢，头部一个，尾部一个","like_count":0},{"had_liked":false,"id":357800,"user_name":"黎明的雾","can_delete":false,"product_type":"c1","uid":1548569,"ip_address":"江苏","ucode":"6BE3737F0E7067","user_header":"https://static001.geekbang.org/account/avatar/00/17/a1/19/a9d50cc0.jpg","comment_is_top":false,"comment_ctime":1663646904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663646904","product_id":100017301,"comment_content":"如何写出优雅的链表代码，六大学习技巧<br>一、理解指针引用的含义<br>二、警惕指针丢失和内存泄露<br>三、利用哨兵简化实现难度<br>四、重点留意边界条件处理<br>五、列举画图，辅助思考<br>六、多写多练","like_count":0},{"had_liked":false,"id":357675,"user_name":"tanatang","can_delete":false,"product_type":"c1","uid":2349826,"ip_address":"四川","ucode":"7526705D25959A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FhibmYQUzY7ibPac8Id5PwbibqCbvj5rWibeQhEyvYguc9pvPNUciaQydicrUjJKkhhp1s2AgfP7LRTZA8zqaa82yC8g/132","comment_is_top":false,"comment_ctime":1663555337,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663555337","product_id":100017301,"comment_content":"老师你好，“环检测” 以及看到网上还有 “求入环点”，这些的解法都很巧妙。 我有疑惑的是，这类模型对应解决什么样的实际问题呢？","like_count":0},{"had_liked":false,"id":356584,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"广东","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662439680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662439680","product_id":100017301,"comment_content":"这节课主要讲了如何写好链表：<br>   1.理解链表中指针的含义，指向元素的存储地址。<br>  2. 增加哨兵简化代码逻辑，常用的头节点，让所有节点处理逻辑一样，。<br>  3. 画图思考。<br>  4.异常边界处理，如果只有一个节点，两个节点，在头节点或者 尾节点。<br>5.防止内存泄漏","like_count":0},{"had_liked":false,"id":356366,"user_name":"Allen Guo","can_delete":false,"product_type":"c1","uid":2999828,"ip_address":"广东","ucode":"5A5DAF6BD916AE","user_header":"https://static001.geekbang.org/account/avatar/00/2d/c6/14/7bb92d2d.jpg","comment_is_top":false,"comment_ctime":1662202398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662202398","product_id":100017301,"comment_content":"我觉得针对哨兵模式的找出K在数组中位置的代码一和代码二的时间复杂度其实是差不多的。最优时间复杂度是O（1），K在第一个节点位置，最差时间复杂度是O（n），K在最后一个节点位置。老师看下我理解的是否对？","like_count":0},{"had_liked":false,"id":355856,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"北京","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1661786515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661786515","product_id":100017301,"comment_content":"插入排序中可以用在数组头部加一个哨兵元素。<br><br>判断数组索引是否溢出的代码，从<br><br>\t\tfor j &gt; 0 &amp;&amp; res[j-1] &gt; current {<br>\t\t\tres[j] = res[j-1]<br>\t\t\tj--<br>\t\t}<br><br><br>简化成了<br><br>\t\tres[0] = current<br>\t\t&#47;&#47; 和无哨兵相比，省略掉了 j &gt; 0 这个比较条件<br>\t\tfor res[j-1] &gt; current {<br>\t\t\tres[j] = res[j-1]<br>\t\t\tj--<br>\t\t}<br><br>用一个元素的空间，换取了执行 N 次 j &gt; 0 的时间。<br><br>https:&#47;&#47;github.com&#47;bwangelme&#47;LeetCode-Go&#47;blob&#47;daa34b2e96c5b13eab4e908930688c4120085d3d&#47;algo&#47;sort&#47;insert_sort.go","like_count":0},{"had_liked":false,"id":355614,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661564829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661564829","product_id":100017301,"comment_content":"6个技巧<br>1. 指针就是引用<br>2. 指针丢失<br>- 插入节点，操作先关联后面(x-&gt;next=p-&gt;next,p-&gt;next=x)<br>-  删除节点，p-&gt;next=p-&gt;next-&gt;next<br>3. 复用哨兵解决边界问题-带头链表，不管链表是不是空，head指针会一直指向这个哨兵节点<br>4. 边界条件处理<br>- 空链表<br>- 只有一个节点<br>- 只有两个节点<br>- 处理头结点或尾结点<br>5. 举例和画图<br>6. 多练习<br>- 单链表反转<br>- 链表中环的检测<br>- 两个有序的链表合并<br>- 删除链表倒数第 n 个结点<br>- 求链表的中间结点","like_count":0},{"had_liked":false,"id":354853,"user_name":"Li,Yanjie","can_delete":false,"product_type":"c1","uid":3078266,"ip_address":"北京","ucode":"708A4982F272C2","user_header":"https://static001.geekbang.org/account/avatar/00/2e/f8/7a/b3b5e29e.jpg","comment_is_top":false,"comment_ctime":1660821992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660821992","product_id":100017301,"comment_content":"有两个月没写代码了，突然看到这个，想起之前写链表的时候，深有感触，拿纸画各种情况，不谋而同。","like_count":0},{"had_liked":false,"id":353871,"user_name":"Geek_sz","can_delete":false,"product_type":"c1","uid":2449060,"ip_address":"广东","ucode":"72E86D7D6554CF","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","comment_is_top":false,"comment_ctime":1659878616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659878616","product_id":100017301,"comment_content":"&#47;&#47;&#47; 检测环 ?<br>    func hasCircle&lt;Element&gt;(head: Node&lt;Element&gt;) -&gt; Bool {<br>        var fast = head.next<br>        var slow: Node&lt;Element&gt;? = head<br>        while fast != nil {<br>            if fast === slow {<br>                return true<br>            }<br>            fast = fast!.next?.next<br>            slow = slow!.next<br>        }<br>        return false<br>    }<br>这个怎么理解，啥思路？","like_count":0},{"had_liked":false,"id":353869,"user_name":"Geek_sz","can_delete":false,"product_type":"c1","uid":2449060,"ip_address":"广东","ucode":"72E86D7D6554CF","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","comment_is_top":false,"comment_ctime":1659878073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659878073","product_id":100017301,"comment_content":"&#47;&#47;&#47; 删除倒数第n个结点 ?<br>    func deleteNode&lt;Element&gt;(at lastNum: Int, in head: Node&lt;Element&gt;) {<br>        var slow: Node&lt;Element&gt;? = head<br>        var fast: Node&lt;Element&gt;? = head<br>        var num = 1<br>        while fast != nil, num &lt; lastNum {<br>            fast = fast!.next<br>            num += 1<br>        }<br>        var prevNode: Node&lt;Element&gt;?<br>        while fast != nil {<br>            prevNode = slow<br>            fast = fast!.next<br>            slow = slow!.next<br>        }<br>        prevNode?.next = slow?.next<br>    }<br>这写的什么玩意？？？","like_count":0},{"had_liked":false,"id":353867,"user_name":"Geek_sz","can_delete":false,"product_type":"c1","uid":2449060,"ip_address":"广东","ucode":"72E86D7D6554CF","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","comment_is_top":false,"comment_ctime":1659877407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659877407","product_id":100017301,"comment_content":"我已将本节内容相关的详细代码更新到 GitHub，戳此即可查看。<br>下面两个加下注视，或者写一下实现思路，真尼玛看的懵逼<br>&#47;&#47;&#47; 检测环 ?<br>&#47;&#47;&#47; 删除倒数第n个结点 ?","like_count":0},{"had_liked":false,"id":353865,"user_name":"Geek_sz","can_delete":false,"product_type":"c1","uid":2449060,"ip_address":"广东","ucode":"72E86D7D6554CF","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","comment_is_top":false,"comment_ctime":1659877254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659877254","product_id":100017301,"comment_content":"我已将本节内容相关的详细代码更新到 GitHub，戳此即可查看。<br>写的代码注释都没有，真的嘛了","like_count":0},{"had_liked":false,"id":350097,"user_name":"Lebesgue","can_delete":false,"product_type":"c1","uid":2558216,"ip_address":"","ucode":"15C3C7452C670F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKpAcaic2Xbu8ibYojFB4p9YesZic1LUIqN0LQexOxaHwWTmsLPohAAA1ZnicB7VekFyjYtQAgOHqBuXg/132","comment_is_top":false,"comment_ctime":1656570345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656570345","product_id":100017301,"comment_content":"if (head-&gt;next == null) { head = null;} <br>删除最后一个节点 请教一下啊这一行代码我有些疑惑 我是用js的<br>head-&gt;next == null   head应该就是最后的非null节点了 <br>如果要删除head 不应该是让head的上一个节点-&gt;next =null 才可以删吗","like_count":0},{"had_liked":false,"id":349361,"user_name":"RANGO","can_delete":false,"product_type":"c1","uid":1088826,"ip_address":"","ucode":"D052D6320DA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/3a/14137566.jpg","comment_is_top":false,"comment_ctime":1655909043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655909043","product_id":100017301,"comment_content":"上节课看完手撸了一个单链表<br>实现了add，remove(obj),remove(index)<br>也发现如作者所说，要练熟才行。一开始觉得自己物理结构理解了，翻译成代码跑完通边界测试花了2个晚上3小时+。果然是临渊观鱼不如回家织网！<br>最后再去做LRU的时候相对容易了许多<br><br>那这节课 我只用完成 「单链表反转，链表中环的检测，两个有序的链表合并」<br>zeta 的分享很有用，因为单链表反转 我只想到了暴力遍历法。","like_count":0},{"had_liked":false,"id":347461,"user_name":"学习，我们一起学习！","can_delete":false,"product_type":"c1","uid":1092109,"ip_address":"","ucode":"FDDB2C52B0E973","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/0d/421a773a.jpg","comment_is_top":false,"comment_ctime":1654054476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654054476","product_id":100017301,"comment_content":"git上的代码怎么拉下下来啊   谁能告诉我一下","like_count":0},{"had_liked":false,"id":347459,"user_name":"学习，我们一起学习！","can_delete":false,"product_type":"c1","uid":1092109,"ip_address":"","ucode":"FDDB2C52B0E973","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/0d/421a773a.jpg","comment_is_top":false,"comment_ctime":1654054149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654054149","product_id":100017301,"comment_content":"上面提出的五个常见的链表   git上面有具体代码吗<br>","like_count":0},{"had_liked":false,"id":337640,"user_name":"H.H","can_delete":false,"product_type":"c1","uid":2668479,"ip_address":"","ucode":"3C0BB1E2A3EC51","user_header":"https://static001.geekbang.org/account/avatar/00/28/b7/bf/815f0ec6.jpg","comment_is_top":false,"comment_ctime":1646928784,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646928784","product_id":100017301,"comment_content":"快慢指针是个好东西，用起来真香","like_count":0},{"had_liked":false,"id":337614,"user_name":"Null","can_delete":false,"product_type":"c1","uid":1382587,"ip_address":"","ucode":"A7D4DF2A43C7D8","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","comment_is_top":false,"comment_ctime":1646915359,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646915359","product_id":100017301,"comment_content":"如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。这句话是不是有点错误。<br><br>是任何时候都有一个哨兵节点指向head节点。而不是“head 指针都会一直指向这个哨兵结点”","like_count":0},{"had_liked":false,"id":336047,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1645867079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645867079","product_id":100017301,"comment_content":"链表代码要想写好，需要注意以下几点:<br>1.  理解指针中实际上是存储了变量的内存地址， 通过内存地址可以找到变量<br>2.  时刻警惕指针的丢失，考虑到修改 next 后带来的副作用， 以及先修改无副作用的指针<br>3.  利用哨兵节点，简化边界处理的难度，真的太好用了<br>4.  检查边界条件处理，空链表， 1个节点的链表， 2 个节点的链表等<br><br>练习题：<br>单链表反转:  先存 next 再修改当前节点指针， 指向 prev (默认为 null)<br>链表中环的检测: 使用快慢指针，如果是环，快慢指针一定相遇；无环， 快指针当前或 next 节点为  null<br>两个有序的链表合并：递归没想好， 使用哨兵节点，不断添加两链表中的较小节点，并使用双指针移动位置<br>删除链表倒数第 n 个结点：方法一：数组存节点按索引取出； 方法二：递归回溯后进行计数，配合哨兵进行移除<br>求链表的中间结点：“定位链表位置” 直接套用双指针方法","like_count":0},{"had_liked":false,"id":334418,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2912555,"ip_address":"","ucode":"478E97D012AD66","user_header":"https://static001.geekbang.org/account/avatar/00/2c/71/2b/7d636be0.jpg","comment_is_top":false,"comment_ctime":1644926768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644926768","product_id":100017301,"comment_content":"讲哨兵的时候，为啥用数组举例子呢，这一章节不是讲链表吗，感谢","like_count":0},{"had_liked":false,"id":333705,"user_name":"201202077","can_delete":false,"product_type":"c1","uid":2881261,"ip_address":"","ucode":"2FB173EB6A9A2E","user_header":"","comment_is_top":false,"comment_ctime":1644479515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644479515","product_id":100017301,"comment_content":"链表环的检测和环首节点检测：（哈希方法）<br>&#47;&#47; 以链表节点为key的hash结构体<br>struct hashTable {<br>    struct ListNode* key；<br>    UT_hash_handle ht;  &#47;&#47; UT_hash_handle 使定义的结构体可哈希<br>}；<br><br>&#47;&#47; 定义全局hash表<br>struct hashTable* hashtable;<br>&#47;&#47; hash表查找<br>struct hashTable* find(struct ListNode* key) <br>{<br>    struct hashTable* tmp;<br>    HASH_FIND_PTR(hashtable, &amp;key, tmp);  &#47;&#47; 参数二需要传入入参的地址<br>    return tmp;<br>}<br><br>&#47;&#47; hash表添加新成员<br>void insert(struct ListNode* key)<br>{<br>    struct hashTable* tmp = malloc(sizeof(struct hashTable));<br>    tmp-&gt;key = key;<br>    HASH_ADD_PTR(hashtable, key, tmp); &#47;&#47; 参数三为需要添加到hash表的结构体指针，参数二为hash结构体key成员的名字；<br>}<br><br>bool hasCycle(struct ListNode* head)<br>{<br>    hashtable = NULL;<br>    while (head != NULL) {<br>        if (find(head) != NULL) {<br>            return true;<br>        }<br>        insert(head);<br>        head = head-&gt;next;<br>    }<br>    return false;<br>}<br><br>struct ListNode* headNodeOfCycle(struct ListNode* head)<br>{<br>    hashtable = NULL;<br>    while (head != NULL) {<br>        if (find(head) != NULL) {<br>            return find(head)-&gt;key;<br>        }<br>        insert(head);<br>        head = head-&gt;next;<br>    }<br>    return NULL;    <br>}","like_count":0},{"had_liked":false,"id":329125,"user_name":"Geek_986dab","can_delete":false,"product_type":"c1","uid":2844245,"ip_address":"","ucode":"B617279140B81B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKEoM9X3SwJ0Zb1g1TbAicyJJvTzblLJf5wazfEgUD00OHos0RrhHaHoa31wsU6S4InPUTU2fckKvA/132","comment_is_top":false,"comment_ctime":1641140781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641140781","product_id":100017301,"comment_content":"js 没有链表好难写 只能抄网上代码入门。。<br>","like_count":0},{"had_liked":false,"id":328579,"user_name":"Geek_01f22a","can_delete":false,"product_type":"c1","uid":2850103,"ip_address":"","ucode":"AF6E9A647F07C1","user_header":"","comment_is_top":false,"comment_ctime":1640779171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640779171","product_id":100017301,"comment_content":"谢谢作者优秀的算法教程，另外github代码没注视吗，看着费力，想照着先写，可是不理解","like_count":0},{"had_liked":false,"id":327072,"user_name":"尹深","can_delete":false,"product_type":"c1","uid":1664124,"ip_address":"","ucode":"B48812FBA67882","user_header":"https://static001.geekbang.org/account/avatar/00/19/64/7c/dc4304b4.jpg","comment_is_top":false,"comment_ctime":1639903668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639903668","product_id":100017301,"comment_content":"一节课要死学一天才能搞懂","like_count":0},{"had_liked":false,"id":326889,"user_name":"Geek_46b082","can_delete":false,"product_type":"c1","uid":2203372,"ip_address":"","ucode":"18B1B224717521","user_header":"","comment_is_top":false,"comment_ctime":1639734085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639734085","product_id":100017301,"comment_content":"快慢指针检测是否有环，可以类比为操场跑圈","like_count":0},{"had_liked":false,"id":326827,"user_name":"学习，我们一起学习！","can_delete":false,"product_type":"c1","uid":1092109,"ip_address":"","ucode":"FDDB2C52B0E973","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/0d/421a773a.jpg","comment_is_top":false,"comment_ctime":1639711863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639711863","product_id":100017301,"comment_content":"老师  我对这些不是很懂 我百度了一下  发现上面只有实现的代码  我不知道ListNode里边的代码  您能告诉我吗","like_count":0},{"had_liked":false,"id":325762,"user_name":"Gohoy","can_delete":false,"product_type":"c1","uid":2865363,"ip_address":"","ucode":"46CC5DD79349B2","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b8/d3/4b99747f.jpg","comment_is_top":false,"comment_ctime":1639121483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639121483","product_id":100017301,"comment_content":"c语言的NULL应该大写，代码中的是小写，会报错<br>","like_count":0},{"had_liked":false,"id":325627,"user_name":"Geek_dba196","can_delete":false,"product_type":"c1","uid":2853881,"ip_address":"","ucode":"1D3B7AAD598273","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8jNialeqU7fzrgDYQ7BvRibic0WfTLNWjF9S6rbrLiaSKasMXPia9zNW25qnEqdWKlRdjoUpuKTEX6tA/132","comment_is_top":false,"comment_ctime":1639050117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639050117","product_id":100017301,"comment_content":"想问一件事情，反转链表里面的迭代解法，在循环之中为什么不能让循环条件等于head.next","like_count":0},{"had_liked":false,"id":324293,"user_name":"摘桃慢","can_delete":false,"product_type":"c1","uid":2736097,"ip_address":"","ucode":"93EC9DD8BAB749","user_header":"https://static001.geekbang.org/account/avatar/00/29/bf/e1/deab777f.jpg","comment_is_top":false,"comment_ctime":1638362417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638362417","product_id":100017301,"comment_content":"我想有完整的代码实现","like_count":0},{"had_liked":false,"id":324064,"user_name":"Ethan","can_delete":false,"product_type":"c1","uid":2855759,"ip_address":"","ucode":"3A6C891F1B482A","user_header":"https://static001.geekbang.org/account/avatar/00/2b/93/4f/0d74cced.jpg","comment_is_top":false,"comment_ctime":1638276846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638276846","product_id":100017301,"comment_content":"哨兵本质上的作用，相当于将边界条件一般化，使得程序不需要通过判断if，来判断是否符合边界条件。<br>这使得程序对所有情况的操作更一致了","like_count":0},{"had_liked":false,"id":323862,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1638187455,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1638187455","product_id":100017301,"comment_content":"终于知道某些源码使用那么奇怪方式去查找了 原来是哨兵 链表我现在终于理解了 可是写真的需要好好练练","like_count":0},{"had_liked":false,"id":323197,"user_name":"Tina","can_delete":false,"product_type":"c1","uid":2851354,"ip_address":"","ucode":"8D6D9F6E3D0A99","user_header":"https://static001.geekbang.org/account/avatar/00/2b/82/1a/30676c2e.jpg","comment_is_top":false,"comment_ctime":1637759610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637759610","product_id":100017301,"comment_content":"如何写出正确的链表代码？<br>之前也学习过写过一点链表代码，但是感觉学的不透彻，写代码还是比较困难，学过的思路后面也可能会忘记，像递归什么的，后面再看自己之前写的代码就可能就会看不懂，这次又重新回顾了一下，重新理解了一遍。<br><br>老师给出的这几个技巧也让我思路更加清晰。<br>一，理解指针或引用的含义。将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针。<br>二，警惕指针丢失和内存泄漏。我有时候便看着看着便晕了，不知道到底是哪指向哪了，最好要画图，一点点分析过程，不要漏掉了，这样会清晰很多。<br>三，利用哨兵简化实现难度。这对我来说是个很重要技巧，有时候写代码便会发现没有考虑到边界问题便会出错，也不好解决，而利用哨兵，增加虚拟头节点或者替换节点将会很简单，也很好理解。<br>四，重点留意边界条件处理。边界是很容易忽略的地方，以后写代码每次都要提醒自己要考虑边界情况：链表为空时，链表只有一个结点时，链表只有两个节点时，处理到尾节点的时候<br>五，举例画图，辅助思考。画图确实是很直观的方式，将头脑中的思路画出来，这样便不容易乱了<br>六，多写多练。确实是这么回事，之前只写过一遍的代码，后面再看相同的题目可能还是不会，学过的内容也会忘记，还是要熟能生巧，多写多练，同一个代码也要不厌其烦的写到很熟悉的程度。","like_count":0},{"had_liked":false,"id":323190,"user_name":"Tina","can_delete":false,"product_type":"c1","uid":2851354,"ip_address":"","ucode":"8D6D9F6E3D0A99","user_header":"https://static001.geekbang.org/account/avatar/00/2b/82/1a/30676c2e.jpg","comment_is_top":false,"comment_ctime":1637757838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637757838","product_id":100017301,"comment_content":"单链表反转可以使用递归和迭代两种方式。递归只考虑一部分，比如就反转前两个，head.next的next指向head，head再指向null，这样前两个节点就实现反转了，同理后面的节点通过递归可以实现，将head.next传进去。迭代可以通过创建一个新的头节点，将需要反转的链表从头节点一个个串到新链表上，先用一个临时节点temp指向head.next，head的next指向newHead，newHead指向head，head转到temp指向的节点上，这样头节点就连接到新的链表上了，同理旧链表中的新的头节点也可以循环串到新链表的头上，就反转过来了。<br><br>链表中环的检测是通过快慢指针，慢指针一次走一步，快指针一次走两步，如果有坏，快慢指针一定会相遇，就像操场中两个同学跑圈一样。<br><br>两个有序的链表合并，既然是有序的，便可以先创建一个新链表头节点，比较两个有序链表的头节点，将更小的串到新链表上，然后通过循环依次串到新链表上。<br><br>删除链表的倒数第n个节点，用快慢指针，慢指针指向头节点，快指针指向正数第n（从0开始数）个节点，然后都一起往后一步步走，当快指针的next是null时，慢指针的next正好是要删除的节点，直接将慢指针的next指向next的next，注意边界问题，所以要指定一个虚拟头节点，虚拟头节点指向head，最后返回虚拟头节点的next。<br><br>求链表的中间节点，也是用快慢指针，快指针一次走两步，慢指针一次走一步，当快指针走到最后的时候，慢指针正好走到中间，要注意区分链表节点的数目奇偶。<br>","like_count":0},{"had_liked":false,"id":322583,"user_name":"张。","can_delete":false,"product_type":"c1","uid":1127147,"ip_address":"","ucode":"B8B6BCB0D9038E","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/eb/37dad1cc.jpg","comment_is_top":false,"comment_ctime":1637488771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637488771","product_id":100017301,"comment_content":"done","like_count":0},{"had_liked":false,"id":321758,"user_name":"不倦","can_delete":false,"product_type":"c1","uid":2076910,"ip_address":"","ucode":"244CFFAC9F565A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7xVgBoU48jAHicx8Licxuh7CLK4hDHjiaicSg8ibvADCm5ic64xDsh1NlfSXE1EficgAcKqIPRUgiarW7kUweN8Fyr2cMQ/132","comment_is_top":false,"comment_ctime":1637031929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637031929","product_id":100017301,"comment_content":"突然想到了一个点,记一下...Redis在实现的时候获取元素个数的复杂度是O(1),是因为每一次增删元素都回去更新公共变量size.获取时只是返回一个变量罢了.就想JDK实现底层的时候是不是也是这样,去看了看LinkedList和ArrayList源码,果然哇,就是维护了一个size类变量.<br>很久之前我写链表时就想,我设置一个head节点,一个end节点,那我就不用考虑越界问题了.看了这篇文章才知道,那叫哨兵.果然还是需要系统的方法论的.","like_count":0},{"had_liked":false,"id":320022,"user_name":"小石头","can_delete":false,"product_type":"c1","uid":2667955,"ip_address":"","ucode":"F7C8C1AC4C39C6","user_header":"https://static001.geekbang.org/account/avatar/00/28/b5/b3/6efd6085.jpg","comment_is_top":false,"comment_ctime":1636039682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636039682","product_id":100017301,"comment_content":"这个哨兵具体怎么用代码实现呀？<br>","like_count":0},{"had_liked":false,"id":319922,"user_name":"joel","can_delete":false,"product_type":"c1","uid":1550366,"ip_address":"","ucode":"46E91C3F3F1414","user_header":"https://static001.geekbang.org/account/avatar/00/17/a8/1e/4ec85e24.jpg","comment_is_top":false,"comment_ctime":1636009291,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636009291","product_id":100017301,"comment_content":"2021 才看是不是太晚了，哈哈。","like_count":0},{"had_liked":false,"id":319349,"user_name":"Geek_183f9e","can_delete":false,"product_type":"c1","uid":1576826,"ip_address":"","ucode":"70405BB513AA9E","user_header":"https://static001.geekbang.org/account/avatar/00/18/0f/7a/420b41cd.jpg","comment_is_top":false,"comment_ctime":1635754946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635754946","product_id":100017301,"comment_content":"这套课程早就买了，一直舍不得看。作为一个前端crud boy。看着似懂非懂，想在代码中实现，奈何案例是c代码，看不懂。","like_count":0},{"had_liked":false,"id":318994,"user_name":"Janus_lee","can_delete":false,"product_type":"c1","uid":2719198,"ip_address":"","ucode":"C023E91FEC6E9A","user_header":"https://static001.geekbang.org/account/avatar/00/29/7d/de/aa0ec171.jpg","comment_is_top":false,"comment_ctime":1635499367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635499367","product_id":100017301,"comment_content":"在解题过程中的一些思考：对于链表一类问题巧用指针，对于快慢指针总结就是“相撞则有环，速度差来定位”，另外对于边界问题，哨兵节点真的超级方便！！！","like_count":0},{"had_liked":false,"id":317727,"user_name":"LoyDeng","can_delete":false,"product_type":"c1","uid":2690959,"ip_address":"","ucode":"6AF9B92A4161F5","user_header":"","comment_is_top":false,"comment_ctime":1634904769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634904769","product_id":100017301,"comment_content":"单链表反转 (栈)<br>链表中环的检测 (快慢指针)<br>两个有序的链表合并 (插入排序)<br>删除链表倒数第 n 个结点 (相隔n-1双指针)<br>求链表的中间结点 (快慢指针)","like_count":0},{"had_liked":false,"id":316919,"user_name":"Geollan","can_delete":false,"product_type":"c1","uid":2812770,"ip_address":"","ucode":"E94333F1E7127A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/eb/62/e7ca974c.jpg","comment_is_top":false,"comment_ctime":1634612803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634612803","product_id":100017301,"comment_content":"翻转链表<br>class Solution {<br>    public ListNode reverseList(ListNode head) {<br>        ListNode dummy = null;<br><br>        while(head != null) {<br>            ListNode temp = head.next;<br>            head.next = dummy;<br>            dummy = head;<br>            head = temp;<br>        }<br><br>        return dummy;<br>    }<br>}","like_count":0},{"had_liked":false,"id":314282,"user_name":"薛定喵的谔","can_delete":false,"product_type":"c1","uid":2775986,"ip_address":"","ucode":"2CED16E0F8E72A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/5b/b2/8498ecc1.jpg","comment_is_top":false,"comment_ctime":1632938587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632938587","product_id":100017301,"comment_content":"这一节总结的很好，细致<br>除了掌握作者提供的方法和经验，最重要一点就是一定要动手练。啥都不说了，先把那5个常见操作全部独立完成再说","like_count":0},{"had_liked":false,"id":314219,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632904503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632904503","product_id":100017301,"comment_content":"现实中的哨兵是监察边境的，代码逻辑中的哨兵用于处理边界问题。<br><br>如果把边界问题转化为哨兵，用哨兵单独处理边界问题，正常逻辑的代码按照统一的逻辑处理非边界问题，就可以避免错误地处理边界问题了。","like_count":0},{"had_liked":false,"id":313806,"user_name":"Geek_2938a0","can_delete":false,"product_type":"c1","uid":2758785,"ip_address":"","ucode":"6AAD3134C64E11","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/V71ITElU4Rw5u7HQQDKHibuHFkHO9C1icjq17Crt94Dag4aZNQicHmSicYQnAncOS7IeAvfywmQdDiaS3hOpcle1zXw/132","comment_is_top":false,"comment_ctime":1632672404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632672404","product_id":100017301,"comment_content":"为什么例子二不能这么写:<br><br><br><br>&#47;&#47; 在数组a中，查找key，返回key所在的位置<br>&#47;&#47; 其中，n表示数组a的长度<br>int find(char* a, int n, char key) {<br>  &#47;&#47; 边界条件处理，如果a为空，或者n&lt;=0，说明数组中没有数据，就不用while循环比较了<br>  if(a == null || n &lt;= 0) {<br>    return -1;<br>  }<br>  <br>  int i = 0;<br>  &#47;&#47; 这里有两个比较操作：i&lt;n和a[i]==key.<br>  while (a[i] !=  key) {<br>       i++;<br>  }<br>   if（i ＞= n）<br>        return -1;<br>    else<br>        return  i;<br>}","like_count":0},{"had_liked":false,"id":311504,"user_name":"jason","can_delete":false,"product_type":"c1","uid":1540744,"ip_address":"","ucode":"E42C4F2B057C28","user_header":"https://static001.geekbang.org/account/avatar/00/17/82/88/f442656e.jpg","comment_is_top":false,"comment_ctime":1631259709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631259709","product_id":100017301,"comment_content":"老师还在不？能看到不？<br>我怎么觉得您提供的合并链表的代码有点问题呢，两个链表la,lb合并之后返回的是新链表，合并的结果也是正确的，但是合并后la和lb也发生了变化了啊，这应该不行吧。我也没有很好的解决办法，郁闷了好久了。<br>代码如下：<br>public static Node mergeSortedLists(Node la, Node lb) {<br>        if (la == null) return lb;<br>        if (lb == null) return la;<br><br>        Node p = la;<br>        Node q = lb;<br>        Node head;<br>        if (p.data &lt; q.data) {<br>            head = p;<br>            p = p.next;<br>        } else {<br>            head = q;<br>            q = q.next;<br>        }<br>        Node r = head;<br><br>        while (p != null &amp;&amp; q != null) {<br>            if (p.data &lt; q.data) {<br>                r.next = p;<br>                p = p.next;<br>            } else {<br>                r.next = q;<br>                q = q.next;<br>            }<br>            r = r.next;<br>        }<br><br>        if (p != null) {<br>            r.next = p;<br>        } else {<br>            r.next = q;<br>        }<br><br>        return head;<br>    }","like_count":0},{"had_liked":false,"id":310272,"user_name":"找工作","can_delete":false,"product_type":"c1","uid":1756876,"ip_address":"","ucode":"DFD2FFACAEDC12","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ce/cc/ec5895b0.jpg","comment_is_top":false,"comment_ctime":1630574797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630574797","product_id":100017301,"comment_content":"老师能不能给一个java实现带哨兵节点的例子？","like_count":0},{"had_liked":false,"id":310238,"user_name":"找工作","can_delete":false,"product_type":"c1","uid":1756876,"ip_address":"","ucode":"DFD2FFACAEDC12","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ce/cc/ec5895b0.jpg","comment_is_top":false,"comment_ctime":1630565851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630565851","product_id":100017301,"comment_content":"老师，删除链表最后一个节点时的代码<br><br>if (head-&gt;next == null) {<br>   head = null;<br>}<br>这里的head是不是应该是p？","like_count":0},{"had_liked":false,"id":307742,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1629244718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629244718","product_id":100017301,"comment_content":"学习链表能够锻炼写代码的思维逻辑，链表注意以下几点：1 指针引用 2 防止内存泄漏 3引入哨兵机制 4 检查边界 5 多练多写","like_count":0},{"had_liked":false,"id":307419,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1629094488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629094488","product_id":100017301,"comment_content":"1. 理解指针和引用的含义<br>2. 警惕指针丢失和内存泄漏<br>3. 利用哨兵简化实现难度 带头链表 不带头链表<br>4. 留意边境条件下是否能正常工作<br>5. 举例画图，辅助思考<br>6. 多学多练，没有捷径<br><br>7. 链表环检查 快慢指针","like_count":0},{"had_liked":false,"id":307359,"user_name":"余昭","can_delete":false,"product_type":"c1","uid":1055073,"ip_address":"","ucode":"29EEEA1BFFE16B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOvjoV6STk6SYPHRqVOo7DkiajY0KKuKLHSnDNvOKic5lllRNGEQo6W1oE6FrPiaSzUia1vCw9lqmV0vibCOtYtIfHQ/132","comment_is_top":false,"comment_ctime":1629042000,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629042000","product_id":100017301,"comment_content":"使用高级语言就是已知 a.next=b;<br>插入节点x的方法<br>a.next=x;<br>x.next=b;","like_count":0},{"had_liked":false,"id":305997,"user_name":"wpl","can_delete":false,"product_type":"c1","uid":1530594,"ip_address":"","ucode":"2E6E91BC0DD43E","user_header":"https://static001.geekbang.org/account/avatar/00/17/5a/e2/698ec825.jpg","comment_is_top":false,"comment_ctime":1628264399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628264399","product_id":100017301,"comment_content":"链表边界情况回顾，1. 链表为空时，逻辑是否正常。 2.链表只有一个节点时，逻辑是否正常。3.链表拥有两个节点时 逻辑是否正常。 3.链表在头结点和尾节点操作是否正常。 以后在编写代码时，需要多多锻炼边界处理逻辑能力","like_count":0},{"had_liked":false,"id":305915,"user_name":"佳成_Cahen","can_delete":false,"product_type":"c1","uid":2324353,"ip_address":"","ucode":"88091603E3AD9B","user_header":"https://static001.geekbang.org/account/avatar/00/23/77/81/9bc87164.jpg","comment_is_top":false,"comment_ctime":1628229370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628229370","product_id":100017301,"comment_content":"您说这行代码if (head-&gt;next == null) { head = null;}删除末尾结点，在head指针不指向空地址的情况下，怎么删除最后一个结点？<br>并且，删除中间结点和删除最后一个结点本来就可以同一写吧？因为总是只需把空地址给前一个结点即可删除这个结点。","like_count":0},{"had_liked":false,"id":305221,"user_name":"苦久了","can_delete":false,"product_type":"c1","uid":2682173,"ip_address":"","ucode":"E039164B148955","user_header":"https://static001.geekbang.org/account/avatar/00/28/ed/3d/95457f63.jpg","comment_is_top":false,"comment_ctime":1627885605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627885605","product_id":100017301,"comment_content":"git上的代码，是不是写的有点乱，，，","like_count":0},{"had_liked":false,"id":304887,"user_name":"大祭司","can_delete":false,"product_type":"c1","uid":1831099,"ip_address":"","ucode":"06479A180B8DED","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f0/bb/f7025f42.jpg","comment_is_top":false,"comment_ctime":1627659399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627659399","product_id":100017301,"comment_content":"没有懂肯给是心急了，耐心看一遍代码就懂了，作者写的很是通俗。虽然懂了，但是我仍然不能独立写出这些链表通用的增删改查方法","like_count":0},{"had_liked":false,"id":303561,"user_name":"ZzzL","can_delete":false,"product_type":"c1","uid":2529532,"ip_address":"","ucode":"01B09ACD8BEF4E","user_header":"https://static001.geekbang.org/account/avatar/00/26/98/fc/df6a9ed7.jpg","comment_is_top":false,"comment_ctime":1626855002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626855002","product_id":100017301,"comment_content":"疑惑：老师的例子。不用哨兵的while 循环，只要在数组中找到=key的值，不用越界也可以return跳出循环呀。用哨兵的作用仅仅是循环里面少一点执行语句？","like_count":0},{"had_liked":false,"id":302970,"user_name":"Alex_GT","can_delete":false,"product_type":"c1","uid":1312926,"ip_address":"","ucode":"86ADB50A2736FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/9e/ac07b0c8.jpg","comment_is_top":false,"comment_ctime":1626488060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626488060","product_id":100017301,"comment_content":"07  链表(下) 如何轻松写出正确的链表代码<br><br>1 写好链表的六个技巧：<br>有指针的语言：C、C++等<br>使用引用的语言：Java、Python<br><br>这一讲看来是要用C去理解了<br><br>技巧 1）理解指针或引用的含义<br>将某个变量赋值给指针，实际上就是将这个变量的等地址赋值给指针，或者反过来说，指针中存储这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br><br>技巧2）警惕指针丢失和内存泄漏<br>插入结点时一定要注意操作的顺序。（指针丢失）<br>删除结点时，一定要记得手动释放内存空间。（内存泄漏）<br><br>技巧3）利用哨兵简化实现难度<br>我们注意到，链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。<br>这时候引入哨兵，就能简化编程难度。<br>（哨兵不止这一种，是一种实现代码的思路，不要拘泥这个例子。其很大的功效是将触发某些逻辑的小概率判断提前处理，在循环中则不必再进行判断，也是因此常见的例子是哨兵放在链表首位，对应本讲的例子则while(i&lt;n),则变成了while(i!=key)）<br><br>技巧4）重点留意边界条件处理<br>需要注意的情况<br>i.链表为空时<br>ii.链表只包含一个结点<br>iii.链表只包含两个结点<br>iv.代码逻辑在处理头结点和尾结点时<br>当然，这种边界处理在编程的任何时候都make sense<br><br>技巧5）距离画图，辅助思考<br>使思路清晰<br><br>技巧6）多写多练，没有捷径<br>精选了五个链表操作，请写熟练<br>单链表反转<br>链表中环的检测<br>两个有序的链表合并<br>删除链表倒数第n个结点<br>求链表的中间结点<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":302738,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1626350363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626350363","product_id":100017301,"comment_content":"哨兵结点在链表中广泛应用, 可以让程序更加简洁且减少出错的机会,比如以下用c语言创建链表<br>&#47;**<br> * @brief 尾插法创建不带头结点的单链表<br> * @param array 数据数组<br> * @param sz 数组有效尺寸<br> * @return 创建的单链表的头指针<br> *&#47;<br>ListNode* CreateList(int array[], int sz) {<br>  ListNode* guard = (ListNode*)malloc(sizeof(ListNode)); &#47;&#47;哨兵结点<br>  guard-&gt;next = NULL;<br>  ListNode* back = guard;<br>  for (int i=0; i&lt;sz; ++i) {<br>    ListNode* cur = (ListNode*)malloc(sizeof(ListNode));<br>    cur-&gt;data = array[i];<br>    back-&gt;next = cur;<br>    back = cur;<br>  }<br>  back-&gt;next = NULL;<br>  return guard-&gt;next;<br>}","like_count":0},{"had_liked":false,"id":302709,"user_name":"七","can_delete":false,"product_type":"c1","uid":2285006,"ip_address":"","ucode":"430F9F536EA50A","user_header":"https://static001.geekbang.org/account/avatar/00/22/dd/ce/91aac2e8.jpg","comment_is_top":false,"comment_ctime":1626342566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626342566","product_id":100017301,"comment_content":"问大佬一个问题：<br>为什么删除链表节点的时候，delete该节点了，但是该节点依然存在内存中？下面是我的代码<br>&#47;&#47; 单链表节点<br>struct listNode {<br>    int value;<br>    struct listNode *next;<br>};<br>&#47;&#47; 创建<br>listNode *linkedListCreate(int len) {<br>    listNode *head = new listNode{len, nullptr};<br>    listNode *p = head;<br>    for (int i = 1; i &lt;= len; ++i) {<br>        p-&gt;next = new listNode{i, nullptr};<br>        p = p-&gt;next;<br>    }<br>    return head;<br>}<br><br>&#47;&#47; 删除<br>void del(listNode *head, listNode *elem) {<br>    if (!elem || !head)<br>        return;<br>    listNode *pre = head-&gt;next;<br>    while (pre-&gt;next-&gt;value != elem-&gt;value) {<br>        pre = pre-&gt;next;<br>    }<br>    pre-&gt;next = elem-&gt;next;<br>    elem-&gt;next = nullptr;<br>    head-&gt;value--;<br>    delete elem;<br>}<br><br>&#47;&#47; 找到 value 的节点，并返回对应节点的地址<br>listNode *find(listNode *head, int value) {<br>    listNode *p = head-&gt;next;<br>    while (p) {<br>        if (p-&gt;value == value)<br>            break;<br>        p = p-&gt;next;<br>    }<br>    if (p == nullptr) {<br>        std::cout &lt;&lt; &quot;改节点不存在与链表中&quot; &lt;&lt; std::endl;<br>        return nullptr;<br>    }<br>    return p;<br>}<br>int main () {<br>&#47;&#47; 创建链表<br>    listNode *list = linkedListCreate(6);<br>&#47;&#47; 找到一个节点<br>    listNode *node3 = find(list, 3);<br> &#47;&#47; 删除<br>    del(list, node3);<br>    std::cout &lt;&lt; &quot;地址：&quot; &lt;&lt; node3 &lt;&lt; &quot; value:&quot; &lt;&lt; node3-&gt;value &lt;&lt; std::endl;&#47;&#47;这里依然能打印出来<br>    &#47;&#47; 打印结果<br>    &#47;&#47; 地址：0x7fe9b5604740 value:3<br>returen 0;<br>}","like_count":0},{"had_liked":false,"id":302583,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1626271469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626271469","product_id":100017301,"comment_content":"为什么c语言和c++链表的节点一般都使用动态分配内存，如果分配在栈区会有什么问题吗？","like_count":0},{"had_liked":false,"id":302577,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1626269455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626269455","product_id":100017301,"comment_content":"flag <br>1.  创建链表（包括节点的定义，并且c语言和 c++都实现一遍）<br>2. 单链表反转<br>3. 回文链表<br>4. 用链表实现LRU算法<br>5. 链表中环的检测<br>6. 两个有序的链表合并<br>7. 删除链表倒数第 n 个结点<br>8. 求链表的中间结点","like_count":0},{"had_liked":false,"id":302169,"user_name":"Yongtao","can_delete":false,"product_type":"c1","uid":2324603,"ip_address":"","ucode":"248BE5661D6532","user_header":"https://static001.geekbang.org/account/avatar/00/23/78/7b/09defb8d.jpg","comment_is_top":false,"comment_ctime":1626103789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626103789","product_id":100017301,"comment_content":"链表: 单链表, 循环链表(约瑟夫问题)。和双向链表。<br><br>单链表删除操作时间复杂度是 O(1)，但遍历查找的时间复杂度为 O(n)。<br>可以使用双向链表优化，是一种空间换时间的方法。<br><br>LRU缓存淘汰算法 = 链表+哈希表<br><br>C的指针 == Python的引用。<br><br>链表技巧: 哑巴节点 slow = ListNode(0, head)<br><br>链表题注意边界条件：<br>- 如果链表为空时？<br>- 如果链表只包含一个结点时？<br>- 如果链表只包含两个结点时？<br>- 代码逻辑在处理头结点和尾结点时？<br><br>LeetCode练习题:<br>206 单链表反转<br>141 链表中环的检测<br>21 两个有序的链表合并<br>19 删除链表倒数第n个结点<br>876 求链表的中间结点","like_count":0},{"had_liked":false,"id":301297,"user_name":"JC","can_delete":false,"product_type":"c1","uid":2466389,"ip_address":"","ucode":"0FB3C53427DF98","user_header":"https://static001.geekbang.org/account/avatar/00/25/a2/55/ec6b990a.jpg","comment_is_top":false,"comment_ctime":1625624347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625624347","product_id":100017301,"comment_content":"回文连判断:<br>1. 利用 list.length &#47; 2 即为中心的关系，则采用快慢指针slow:1, fast:2的进行“递归”移动，直到fast指向list.end， 这个时候 slow所指位置即位center.<br>2. center找到了，那么将后半部分构建一条“反转连”与前半段“递归比较”即可<br>    构建反转连： 中心位后一位开始，即slow.next.next 指向 slow.next,（当然要先保留slow.next.next）<br>反转连的指针一直往slow.next移动即可","like_count":0},{"had_liked":false,"id":301223,"user_name":"Unpredictable","can_delete":false,"product_type":"c1","uid":2491545,"ip_address":"","ucode":"41DFB1F94F4106","user_header":"https://static001.geekbang.org/account/avatar/00/26/04/99/0af3244f.jpg","comment_is_top":false,"comment_ctime":1625580956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625580956","product_id":100017301,"comment_content":"专栏对应的“哨兵”模块，建议在tail=p；之后，加一句tail.next=null；（c++中写tail-&gt;next=nullptr）。","like_count":0},{"had_liked":false,"id":298519,"user_name":"wz","can_delete":false,"product_type":"c1","uid":1521236,"ip_address":"","ucode":"576343ECD04C64","user_header":"https://static001.geekbang.org/account/avatar/00/17/36/54/39378ff5.jpg","comment_is_top":false,"comment_ctime":1624169099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624169099","product_id":100017301,"comment_content":"  while (a[i] != key) {<br>    ++i;<br>  } 这个代码不会一直循环下去么","like_count":0},{"had_liked":false,"id":297166,"user_name":"PG","can_delete":false,"product_type":"c1","uid":1249747,"ip_address":"","ucode":"722E7668E5F0E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/d3/795d79af.jpg","comment_is_top":false,"comment_ctime":1623337280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623337280","product_id":100017301,"comment_content":"有的解题方法真是万万没想到。。。","like_count":0},{"had_liked":false,"id":297093,"user_name":"坏得很的糟老头子","can_delete":false,"product_type":"c1","uid":2627816,"ip_address":"","ucode":"41AFB069EEFE42","user_header":"https://static001.geekbang.org/account/avatar/00/28/18/e8/ab96882f.jpg","comment_is_top":false,"comment_ctime":1623307426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623307426","product_id":100017301,"comment_content":"对于 x—&gt;next = p—&gt;next; p—&gt;next = x;改法还是没能理解 , 这样 x-&gt;next   指向的还是x 自身，求大神讲解一下","like_count":0},{"had_liked":false,"id":295972,"user_name":"黑白颠倒","can_delete":false,"product_type":"c1","uid":2167240,"ip_address":"","ucode":"E79D2540C3F668","user_header":"https://static001.geekbang.org/account/avatar/00/21/11/c8/889846a7.jpg","comment_is_top":false,"comment_ctime":1622687390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622687390","product_id":100017301,"comment_content":"链表反转，看似简单，其实挺难的。","like_count":0},{"had_liked":false,"id":295464,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1940562,"ip_address":"","ucode":"67C86E09BA6E4B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","comment_is_top":false,"comment_ctime":1622440545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622440545","product_id":100017301,"comment_content":"老师，我在leetcode上把链表的作业做了，算是对这个课程的练习啦，请老师点评https:&#47;&#47;blog.csdn.net&#47;qq_35089484&#47;category_11044721.html","like_count":0},{"had_liked":false,"id":295047,"user_name":"量子纠结","can_delete":false,"product_type":"c1","uid":1026857,"ip_address":"","ucode":"564D9BADCD5C34","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/29/53afdb24.jpg","comment_is_top":false,"comment_ctime":1622193661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622193661","product_id":100017301,"comment_content":"老师说假设当前p指针指向是a接点，怎么一下又说p-&gt;next又是指向b节点了？<br>x-&gt;next = p-&gt;next; &#47;&#47; 将x的结点的next指针指向b结点；<br>困扰了，麻烦解答","like_count":0},{"had_liked":false,"id":294346,"user_name":"夜薇","can_delete":false,"product_type":"c1","uid":1331222,"ip_address":"","ucode":"B63B6AAE5A1F05","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/16/509de8df.jpg","comment_is_top":false,"comment_ctime":1621906509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621906509","product_id":100017301,"comment_content":"写链表代码的技巧：<br>1.理解指针或引用的含义：将变量赋值给指针，其实是指针指向变量的内存地址。<br>2.注意指针的丢失和内存泄漏：比如向链表中插入一个结点的时候，指针交换的顺序很重要，要避免后续的结点丢失，从而导致内存泄漏。<br>3.使用哨兵，避免一些边界问题的重复处理。<br>4.对边界的处理：插入第一个结点的时候，直接将header指针指向新的首结点；删除最后一个结点的时候，直接将尾结点置为空；<br>5.画图辅助思考<br>6.多写多练","like_count":0},{"had_liked":false,"id":293857,"user_name":"Gryffindor🎃Muggle","can_delete":false,"product_type":"c1","uid":1405246,"ip_address":"","ucode":"49406E2A1EB3F3","user_header":"https://static001.geekbang.org/account/avatar/00/15/71/3e/ed5b929c.jpg","comment_is_top":false,"comment_ctime":1621579366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621579366","product_id":100017301,"comment_content":"反转链表：遍历单链表，将每一个节点添加到当前链表之前(先封装一个在链表之前添加元素的add方法)，删除每一个遍历到的节点(封装一个移除链表元素的remove方法)；<br>Class Node():<br>    def __init(self, value=None, next=None)__:<br>        self._value = value<br>        self._next = value<br>     def get_value():<br>         pass<br>     def get_next():<br>         pass<br>     def set_value():<br>         pass<br>     def set_next():<br>         pass<br>     <br>  Class LinkList():<br>     def __init__(self, head)：<br>          self._head= head<br>     def add(self, value):<br>         new_node = Node(value, None)<br>         new_node.set_next(self._head)<br>         self._head = new_node<br>    def remove(self, value):<br>        current = self._head<br>        pre = None<br>        found = False<br>        while current != None and not found:<br>            if current.get_next() == value:<br>                found = True<br>                if not pre:<br>                    self._head = current.get_next()<br>                else:<br>                    pre.set_next(current.get_next())<br>                break<br>          else:<br>                pre = current<br>                current = current.get_next()<br>  <br>    def reverse(self):<br>        current = self._head<br>        while current != None:<br>            temp = current<br>            self.remove(current._value)<br>            self.add(temp._value)<br>            current = current.get_next()<br>        return self<br>    <br>   先定义节点类，两个构造属性，value和next, 四个构造方法，分别是get_value()获取value属性，get_next()获取当前节点指向的下一个节点，set_value()修改节点的value属性，set_next()修改节点指向的下一个节点；<br>   在定义一个链表类，构造属性head头节点，构造方法add()链表头部插入结点，构造方法remove()删除链表中指定value的结点；<br>   在定义reverse()反转链表，遍历原始链表，当前节点先删除，在添加到链表头部；<br>   还可以定义append()实现链表末尾新增节点；<br>   length()求链表长度；<br>   index()求指定value的位置；<br>   search()搜索指定value是否存在于链表。<br><br>  <br><br>        <br>        <br>         <br>","like_count":0},{"had_liked":false,"id":291475,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1620300435,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620300435","product_id":100017301,"comment_content":"单链表反转，自己的思路是遍历完了以后存入数组，然后数据从后往前遍历赋值给链表。但是空间负责度O(n).然后看了leetcode之后，原地反转前后节点交换位置，使得空间复杂度变为O(1).<br>  public static LinkedNode singleLinkedReverse(LinkedNode node) {<br><br>        LinkedNode curr = node;<br>        LinkedNode prev = null;<br>        while (curr != null) {<br>            LinkedNode next = curr.next;<br><br>            curr.next = prev;<br>            prev = curr;<br>            curr = next;<br>        }<br><br>        return prev;<br>    }","like_count":0,"discussions":[{"author":{"id":1540744,"avatar":"https://static001.geekbang.org/account/avatar/00/17/82/88/f442656e.jpg","nickname":"jason","note":"","ucode":"E42C4F2B057C28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393118,"discussion_content":"我刚开始也是考虑到用数组，最后发现老师的这个方法是真的牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631259218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290919,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1619859782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619859782","product_id":100017301,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;BruceLee1314&#47;article&#47;details&#47;116330289，熟悉链表操作，常用算法整理","like_count":0},{"had_liked":false,"id":290073,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1619347117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619347117","product_id":100017301,"comment_content":"&quot;哨兵&quot;的作用: 1, 简化编程; 2, 文中哨兵举例代码, 更多的说明采用哨兵对代码性能的优化;<br>链表的总结: 06专栏学习了基础; 07专栏学习了写链表代码及其它所有代码的技巧与健壮代码意识.","like_count":0},{"had_liked":false,"id":288459,"user_name":"Geek_bethel","can_delete":false,"product_type":"c1","uid":2541943,"ip_address":"","ucode":"C6313699A95B02","user_header":"https://static001.geekbang.org/account/avatar/00/26/c9/77/bf372419.jpg","comment_is_top":false,"comment_ctime":1618477845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618477845","product_id":100017301,"comment_content":"学习的一些体会，<br>学习了链表课程，然后做了对应的leetcode练习题，其中一些题目虽然难度标的是“easy”，但是要把它想明白、做对并不“easy”。<br>罗马不是一天建成的，这门课需要下功夫思考分析和练习才能掌握。<br><br>像小时候做“思考题”一样，我把这门课当做训练思维的工具，享受难题解开、疑惑想通后的“小愉悦”。","like_count":0},{"had_liked":false,"id":288452,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1618475032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618475032","product_id":100017301,"comment_content":"今天做了leetcode的整数反转的题，第一种解法，比暴力解法的效率应该好一点，我的解题思路是获取数字长度，然后找到中间位置，其他位置做替换后得到最终结果，最后参考了其他大神的解题思路，发现可以通过取余%10得到，解题思路很惊奇，也很佩服，慢慢坚持，再接再厉，争取未来变得和他们一样优秀","like_count":0},{"had_liked":false,"id":288051,"user_name":"oops","can_delete":false,"product_type":"c1","uid":1102831,"ip_address":"","ucode":"1DEC23A503F8A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/ef/9c5e695b.jpg","comment_is_top":false,"comment_ctime":1618281431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618281431","product_id":100017301,"comment_content":"AQS 加入同步队列，如果队列为空，会创建哨兵节点","like_count":0},{"had_liked":false,"id":287709,"user_name":"张知信","can_delete":false,"product_type":"c1","uid":2144474,"ip_address":"","ucode":"7C896BB3214B3D","user_header":"https://static001.geekbang.org/account/avatar/00/20/b8/da/42284f64.jpg","comment_is_top":false,"comment_ctime":1618119430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618119430","product_id":100017301,"comment_content":"技巧一：理解指针或引用的含义。指针存储了变量的内存地址，对指针读就是对变量进行读，对指针写修改了指针指向的变量。<br>技巧二：警惕指针丢失和内存泄漏。操作的顺序很重要；删除链表记得释放内存。<br>技巧三：利用哨兵简化实现难度。哨兵节点简化了删除第一个节点和最后一个节点的操作。<br>技巧四：重点留意边界条件处理：链表为空；只有一个结点；只有两个结点；对头尾结点进行操作。<br>技巧五：举例画图，辅助思考。释放脑容量，给思考更多空间。<br>技巧六：多写多练，没有捷径。五个常见链表操作：单链表反转；链表中环的检测；合并两个有序链表；删除链表倒数第n个结点；求链表的中间结点。","like_count":0},{"had_liked":false,"id":287353,"user_name":"TaZ、Rainbow、的Yang","can_delete":false,"product_type":"c1","uid":1318674,"ip_address":"","ucode":"0EFD3E46622DB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/12/baab599c.jpg","comment_is_top":false,"comment_ctime":1617896419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617896419","product_id":100017301,"comment_content":"链表插入时间复杂度O(1)是不是不太严谨，如果是在指定位置插入的的话，不应该从头去遍历到指定位置，这样时间复杂度不就是O(n)了","like_count":0},{"had_liked":false,"id":285976,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1476862,"ip_address":"","ucode":"037CE3554D8AB9","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","comment_is_top":false,"comment_ctime":1617090815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617090815","product_id":100017301,"comment_content":"删除链表中的最后一个节点应该理解为链表只有一个节点的时候吧？这样才需要哨兵节点。","like_count":0},{"had_liked":false,"id":285655,"user_name":"Geek_0f0b1e","can_delete":false,"product_type":"c1","uid":2513962,"ip_address":"","ucode":"0C40BBC2107FEB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIJd240KyOj2baCgreN72Vqic1qry9sbvoxRic1MPEkibMtwljQnb83QbfxhcicIxBvXp6HavuicZGGrRA/132","comment_is_top":false,"comment_ctime":1616943298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616943298","product_id":100017301,"comment_content":"删除链表节点，怎么释放链表内存","like_count":0},{"had_liked":false,"id":284531,"user_name":"C","can_delete":false,"product_type":"c1","uid":2526224,"ip_address":"","ucode":"AC53CB00A8F5C8","user_header":"https://static001.geekbang.org/account/avatar/00/26/8c/10/7f402cb1.jpg","comment_is_top":false,"comment_ctime":1616320719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616320719","product_id":100017301,"comment_content":"那些代码怎么找啊，github不会操作","like_count":0},{"had_liked":false,"id":283873,"user_name":"汪汪汪行","can_delete":false,"product_type":"c1","uid":2516137,"ip_address":"","ucode":"FAE1F024677C2F","user_header":"https://static001.geekbang.org/account/avatar/00/26/64/a9/fda1ea87.jpg","comment_is_top":false,"comment_ctime":1615968748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615968748","product_id":100017301,"comment_content":"按老师的思考题答案写了个五题的总结：<br>https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;357712734","like_count":0},{"had_liked":false,"id":282838,"user_name":"阳阳","can_delete":false,"product_type":"c1","uid":1605341,"ip_address":"","ucode":"078DD80E0ADD38","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/dd/8098a7e0.jpg","comment_is_top":false,"comment_ctime":1615433755,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615433755","product_id":100017301,"comment_content":"&#47;&#47;单链表对象<br>public class ChainLink {<br>    public String data;<br>    public ChainLink nextNode;<br>    public ChainLink(){<br><br>    }<br>    public ChainLink(String value,ChainLink chainLink){<br>        this.data=value;<br>        this.nextNode=chainLink;<br>    }<br>}<br><br>package org.structure.util;<br><br>import org.structure.bean.ChainLink;<br><br>&#47;**<br> * @Author: baozi<br> * @Date: 2021&#47;3&#47;11 9:38 上午<br> * @Version 1.0<br> * 单链表反转测试类<br> *&#47;<br>public class Test1 {<br>    public static void main(String[] args) {<br>        &#47;&#47;定义一个连续的链表<br>        ChainLink chainLink5 = new ChainLink(&quot;5&quot;,null);<br>        ChainLink chainLink4 = new ChainLink(&quot;4&quot;,chainLink5);<br>        ChainLink chainLink3 = new ChainLink(&quot;3&quot;,chainLink4);<br>        ChainLink chainLink2 = new ChainLink(&quot;2&quot;,chainLink3);<br>        ChainLink chainLink1 = new ChainLink(&quot;1&quot;,chainLink2);<br>        &#47;&#47;h单链表反转前的head<br>        ChainLink h = chainLink1;<br>        &#47;&#47;h2为单链表反转前最后一位元素。也就是反转后的单链表的第一位元素<br>        ChainLink h2 = null;<br>        while (null != h) {<br>            &#47;&#47;反转前先打印一下链表内容<br>            System.out.print(h.data + &quot; &quot;);<br>            h = h.nextNode;<br>            if(h!=null &amp;&amp; h.nextNode == null){<br>                h2 = h;<br>            }<br>        }<br>        System.out.println();<br>        &#47;&#47;从头部开始进行单链表反转<br>        ChainLink h1= chainLink1;<br>        &#47;&#47;如果链表下一节点为空就表示已经到了最后一位链表元素<br>        while (h1.nextNode!=null) {<br>            reserve(h1);<br>        }<br>        &#47;&#47;读取打印反转后的单链表元素<br>        while(h2!=null){<br>            System.out.print(h2.data + &quot; &quot;);<br>            h2 = h2.nextNode;<br>        }<br>    }<br>    public static void reserve(ChainLink head){<br>        ChainLink now = head;<br>        ChainLink next = now.nextNode;<br>        if(next.nextNode == null){<br>            now.nextNode=null;<br>            next.nextNode=now;<br>        }<br>        else{<br>            now = next;<br>            next = next.nextNode;<br>            reserve(now);<br>        }<br>    }<br>}<br><br>","like_count":0},{"had_liked":false,"id":282804,"user_name":"星夜王子","can_delete":false,"product_type":"c1","uid":2432666,"ip_address":"","ucode":"42C602D4572F3B","user_header":"https://static001.geekbang.org/account/avatar/00/25/1e/9a/b36f6086.jpg","comment_is_top":false,"comment_ctime":1615425274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615425274","product_id":100017301,"comment_content":"请问哨兵就是虚拟头节点吗？","like_count":0},{"had_liked":false,"id":281949,"user_name":"谢恒忠","can_delete":false,"product_type":"c1","uid":1109001,"ip_address":"","ucode":"F2349436CB6ACC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/09/3f2e83d8.jpg","comment_is_top":false,"comment_ctime":1614972260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614972260","product_id":100017301,"comment_content":"变量组成:名称，地址，值 <br>变量操作:名称:  变量申明（类型）<br>                  地址:  取地址 （&amp;名称）<br>                  取值 : 通过名称取，通过地址取（ *地址）<br>*****************************************************<br>a=10<br>+--------------+---------------+<br>|    变量a     |   a地址      |&lt;--+<br>+--------------+---------------+      |<br>|     变量a的值=10         |      |<br>+-------------------------------+      |<br>p = &amp;a                                     |<br>+--------------+---------------+      |<br>|    指针p     |  p 地址     |       |<br>+--------------+---------------+      |<br>|  指针p的值=a的地址  |-----+<br>+-------------------------------+","like_count":0},{"had_liked":false,"id":280466,"user_name":"Kyle(","can_delete":false,"product_type":"c1","uid":1640978,"ip_address":"","ucode":"0C14C4C086CAA9","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","comment_is_top":false,"comment_ctime":1614224061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614224061","product_id":100017301,"comment_content":"问题出就出在链表在只剩一个head节点时的删除方法和一个节点以上的删除方法不同，这会导致每次删除都要过一遍这个多加的判断if(head.next=null)，以及多余的处理方法。那么为了省去这个多加的判断，同时使得所有删除方法都一样，就要引入哨兵的概念——即head节点指向一个永远存在的哨兵节点，这个哨兵节点不存储数据只存针。从而解决以上问题。哨兵是为了解决边境问题的，同样上面的两块代码就演示了把哨兵加在链表最后解决多余判断的另一种可能。","like_count":0},{"had_liked":false,"id":280419,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614199833,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614199833","product_id":100017301,"comment_content":"茶艺师学编程<br><br>怎么写好链表代码？<br>1、理解指针或引用的含义<br>2、警惕指针丢失和内存泄漏<br>3、利用哨兵简化实现难度<br>4、重点留意边界条件处理<br>5、举例画图、辅助思考<br>6、多写多练<br><br>我自己的经历，如果实在是看不懂指针的跳转，可以试着在LeetCode上找那些有动画的题解来看，最好是那种能显示在代码哪一行，指针在哪里的动画","like_count":0},{"had_liked":false,"id":280077,"user_name":"LIFE l=new LIFE()","can_delete":false,"product_type":"c1","uid":2446981,"ip_address":"","ucode":"729BACA3B7FD42","user_header":"https://static001.geekbang.org/account/avatar/00/25/56/85/6da913fa.jpg","comment_is_top":false,"comment_ctime":1614070613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614070613","product_id":100017301,"comment_content":"兄弟们，链表一定要掌握，要不然后面的树就是灾难","like_count":0},{"had_liked":false,"id":280076,"user_name":"LIFE l=new LIFE()","can_delete":false,"product_type":"c1","uid":2446981,"ip_address":"","ucode":"729BACA3B7FD42","user_header":"https://static001.geekbang.org/account/avatar/00/25/56/85/6da913fa.jpg","comment_is_top":false,"comment_ctime":1614070442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614070442","product_id":100017301,"comment_content":"我觉得链表比较考验空间想象能力，如果空间想象能力比较弱的最好画图理解","like_count":0},{"had_liked":false,"id":279787,"user_name":"Geek_c6d818","can_delete":false,"product_type":"c1","uid":2447241,"ip_address":"","ucode":"C75D88DD4B6D88","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhKNfTrkGONA9TRs4ibOgPROmdSAf3lwHsPxehgbnrRxiahiaiaCXLzWmF7a0asAueMDDUBkftJAxHzmSXjzJ93ze81c/132","comment_is_top":false,"comment_ctime":1613962541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613962541","product_id":100017301,"comment_content":"写链表代码的技巧：<br>1、理解指针或引用的含义<br>2、警惕指针丢失和内存泄露<br>3、利用哨兵简化实现难度<br>4、重点留意边界条件的处理<br>5、举例画图，辅助思考<br>6、多写多练，没有捷径","like_count":0},{"had_liked":false,"id":279154,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1200341,"ip_address":"","ucode":"FB8AEE6701BD6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/d5/a9885935.jpg","comment_is_top":false,"comment_ctime":1613638875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613638875","product_id":100017301,"comment_content":"单链表节点删除<br>p-&gt;next = p-&gt;next-&gt;next;<br><br>为什么不是下面这样？<br>p-&gt;next = null;","like_count":0},{"had_liked":false,"id":279023,"user_name":"不完美小孩","can_delete":false,"product_type":"c1","uid":2435955,"ip_address":"","ucode":"027D7F3A4060B2","user_header":"https://static001.geekbang.org/account/avatar/00/25/2b/73/63386322.jpg","comment_is_top":false,"comment_ctime":1613550971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613550971","product_id":100017301,"comment_content":"老师，您好，如何定义一个带头链表呀，如果已经存在一个链表，我想定义一个哨兵结点p该怎么办呢，是p-&gt;next=head; head-&gt;next=p;吗？谢谢老师","like_count":0},{"had_liked":false,"id":278911,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1613458237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613458237","product_id":100017301,"comment_content":"二刷，等于号左边的是指针，等于号右边的是地址。","like_count":0},{"had_liked":false,"id":278814,"user_name":"熊孩子马洛伊","can_delete":false,"product_type":"c1","uid":1052718,"ip_address":"","ucode":"C907D62052FB4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/2e/1a0e7c59.jpg","comment_is_top":false,"comment_ctime":1613361131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613361131","product_id":100017301,"comment_content":"&#47;&#47;删除链表倒数第 n 个结点<br>Node* DeleteNthFromEnd(Node* head, int n)<br>{<br>        Node* p1 = head;<br>        Node* p2 = head;<br>\t\t<br>        &#47;&#47;把p2指针移动到正数第n个结点<br>        for(int i=1; i&lt;n; i++){<br>            p2 = p2-&gt;next;<br>            if(p2 == NULL){<br>                throw new IllegalArgumentException(&quot;参数n超出链表长度！&quot;);<br>            }<br>        }<br>\t\t<br>        &#47;&#47;p1和p2一起右移，直到p2指向链表尾结点<br>        while (p2-&gt;next != NULL){<br>            p1 = p1-&gt;next;&#47;&#47;p1就是倒数第n个结点<br>            p2 = p2-&gt;next;<br>        }<br>\t\t<br>\t\tp1-&gt;next=p1-&gt;next-&gt;next;&#47;&#47;删除<br>\t\t<br>        return head;\t\t<br>}<br><br><br>&#47;&#47;求链表的中间结点(思路和上面有点类似：定义两个指针,同时从链表的头结点出发,一个指针一次走一步,另一个指针一次都两步. 当走的快的走到链表末尾时,走的慢的正好在链表中间.)<br>Node* FindMidNode(Node* head) <br>{<br>    if (head == NULL) {<br>        return NULL;<br>    }<br><br>    Node* pre = head;<br>    Node* rear = head;<br><br>    while (rear-&gt;next != NULL) {<br>        if (rear-&gt;next-&gt;next != NULL) {<br>            rear = rear-&gt;next-&gt;next;<br>        } <br>\t\telse {<br>            return pre;<br>        }<br>        pre = pre-&gt;next;<br>    }<br>    return pre;<br>}","like_count":0},{"had_liked":false,"id":278705,"user_name":"熊孩子马洛伊","can_delete":false,"product_type":"c1","uid":1052718,"ip_address":"","ucode":"C907D62052FB4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/2e/1a0e7c59.jpg","comment_is_top":false,"comment_ctime":1613216182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613216182","product_id":100017301,"comment_content":"&#47;&#47;单链表反转（递归版）<br>struct MyLink<br>{<br>\tint data;<br>\tMyLink* next;<br>}<br><br>MyLink* Reverse(MyLink* p,MyLink*&amp; head)<br>{<br>\tif(p==NULL || p-&gt;next==NULL)<br>\t{<br>\t\thead=p;<br>\t\treturn p;<br>\t}<br>\telse<br>\t{<br>\t\tMyLink* tp=Reverse(p-&gt;next,head);<br>\t\ttp-&gt;next=p;<br>\t\treturn p;<br>\t}<br>}<br><br><br>&#47;&#47;单链表中环的检测<br>bool Check(const node* head)<br>{<br>\tif(head=NULL)<br>\t{<br>\t\treturn false;<br>\t}<br>\t<br>\tnode* left=head,*right=head-&gt;next;<br>\twhile(right!=NULL &amp;&amp; right-&gt;next!=NULL)<br>\t{<br>\t\tleft=left-&gt;next;<br>\t\tright=right-&gt;next-&gt;next;<br>\t\t<br>\t\tif(left==right)<br>\t\t{<br>\t\t\treturn true;<br>\t\t}<br>\t}<br>\treturn false;<br>}<br><br><br>&#47;&#47;两个有序的链表合并（递归版）<br>Node* MergeRecursive(Node* head1,Node* head2)<br>{<br>\tif(head1==NULL)<br>\t{ <br>\t\treturn head2;<br>\t}<br>\tif(head2==NULL)<br>\t{<br>\t\treturn head1;<br>\t}<br>\t<br>\tNode* head=NULL;<br>\tif(head1-&gt;data &lt; head2-&gt;data)<br>\t{<br>\t\thead=head1;<br>\t\thead-&gt;next=MergeRecursive(head1-&gt;next,head2);<br>\t}<br>\telse<br>\t{<br>\t\thead=head2;<br>\t\thead-&gt;next=MergeRecursive(head1,head2-&gt;next);<br>\t}<br>\treturn head;<br>}<br><br>好久不写C了，请大佬批评指正","like_count":0},{"had_liked":false,"id":276156,"user_name":"蔡泽卿","can_delete":false,"product_type":"c1","uid":2412363,"ip_address":"","ucode":"7A4C1D48AC4D73","user_header":"https://static001.geekbang.org/account/avatar/00/24/cf/4b/217d1bd7.jpg","comment_is_top":false,"comment_ctime":1611817408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611817408","product_id":100017301,"comment_content":"楼下同学分享的题目做了下，发现反转真的没那么容易些，感觉思想上很简单，但是写起来真的没那么容易。细节上要注意点挺多的。加油~~~","like_count":0},{"had_liked":false,"id":276155,"user_name":"蔡泽卿","can_delete":false,"product_type":"c1","uid":2412363,"ip_address":"","ucode":"7A4C1D48AC4D73","user_header":"https://static001.geekbang.org/account/avatar/00/24/cf/4b/217d1bd7.jpg","comment_is_top":false,"comment_ctime":1611817211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611817211","product_id":100017301,"comment_content":"老师，请问作业对应的LeetCode题目整体在哪里？我想看下，有空可以做下","like_count":0},{"had_liked":false,"id":271060,"user_name":"李智","can_delete":false,"product_type":"c1","uid":1032824,"ip_address":"","ucode":"237B8249D68EB0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/78/cbf3a356.jpg","comment_is_top":false,"comment_ctime":1609386663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609386663","product_id":100017301,"comment_content":"关于哨兵代码那块，我觉得相差不大啊。后面多一步操作，也是多个常数，在复杂度分析时，两者其实是一样的。","like_count":0},{"had_liked":false,"id":270771,"user_name":"Sdan","can_delete":false,"product_type":"c1","uid":2387404,"ip_address":"","ucode":"AB3AA78F48F563","user_header":"https://static001.geekbang.org/account/avatar/00/24/6d/cc/8a43efe0.jpg","comment_is_top":false,"comment_ctime":1609246814,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1609246814","product_id":100017301,"comment_content":"删除链表元素时，当删除首个元素时delete(Node *list,int pos)，代码如下，但是再show(Node *list)时，还是未删除；有点没太想清楚，麻烦帮忙瞅瞅。<br>if (pos == 0)<br>{<br>      q = list;<br>      p = list-&gt;next;<br>      delete q;<br>      list = p;<br>      return true;<br>}","like_count":0,"discussions":[{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340537,"discussion_content":"返回应该返回链表首地址吧，我的理解是这样，这样打印的时候就能传首地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610031475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340536,"discussion_content":"你这个是含头结点还是不含头结点，就是头节点包不包含元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610031360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268266,"user_name":"李团结","can_delete":false,"product_type":"c1","uid":1254423,"ip_address":"","ucode":"23831A96515E2C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/17/a8db1ff7.jpg","comment_is_top":false,"comment_ctime":1608118642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608118642","product_id":100017301,"comment_content":"  &#47;&#47; 单链表反转<br>  public static Node reverse(Node list) {<br>    Node curr = list, pre = null;<br>    while (curr != null) {<br>      Node next = curr.next;<br>      curr.next = pre;<br>      pre = curr;<br>      curr = next;<br>    }<br>    return pre;<br>  }<br>这段代码会破坏原有的list，大神们有什么方法不让其破坏原本的list呢？","like_count":0},{"had_liked":false,"id":267989,"user_name":"Geek_a5b8de","can_delete":false,"product_type":"c1","uid":2368692,"ip_address":"","ucode":"18E89494E7DFA4","user_header":"","comment_is_top":false,"comment_ctime":1608021712,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1608021712","product_id":100017301,"comment_content":"public static ListNode mergerTwoLists(ListNode l1, ListNode l2)  {<br>    ListNode l3= new ListNode(0,null);<br>    ListNode mark = l3;<br>    while(l1!=null &amp;&amp; l2!=null){<br>        if (l1.val &lt; l2.val) {<br>            l3.next = l1;<br>            l1 = l1.next;<br>        } else {<br>            l3.next=l2;<br>            l2 = l2.next;<br>        }<br>        l3= l3.next;<br>    }<br>    if (l1 != null) {<br>        l3.next=l1;<br>    }<br>    if (l2 != null) {<br>        l3.next=l2;<br>    }<br>    return mark.next;<br>}<br>}<br>争哥这段代码为什么是最坏时间O(m+n)，分析好久没看出来，恳请指教~","like_count":0,"discussions":[{"author":{"id":1540744,"avatar":"https://static001.geekbang.org/account/avatar/00/17/82/88/f442656e.jpg","nickname":"jason","note":"","ucode":"E42C4F2B057C28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393119,"discussion_content":"假如两个链表分别是：L1= 1,3,5,7,9，L2=2,4,6,8,10。这样应该就是最坏的情况吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631259381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266517,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1607382605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607382605","product_id":100017301,"comment_content":"总结：<br>要想写好链表代码，有如下6个技巧可以参考：<br>1. 理解指针或引用的定义<br>2. 切忌弄丢指针和内存溢出<br>3. 利用哨兵简化开发难度<br>4. 留意边缘情况。像链表中只有一个元素，没有元素等<br>5. 多画图，多举例。敲完代码之后，多在纸上走走流程，就可以很清楚的知道，代码哪些写错了。否则你就会被指来指去的指针弄晕。多举例验证算法在多种场景下是否依然好用<br>6. 熟能生巧。需要多花时间和精力去练习。对于链表而言，只要熟练的敲出以下几个场景的代码，那么其他场景也就没啥问题了。<br>（1）判断链表是否为环<br>（2）查找链表的中间元素<br>（3）单链表反转<br>（4）两个有序链表的合并<br>（5）删除链表倒数第N个节点","like_count":0},{"had_liked":false,"id":263888,"user_name":"舍予","can_delete":false,"product_type":"c1","uid":1134618,"ip_address":"","ucode":"F333699D14213A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0wXEfsGnCiarxEUEvZz45bFEpSaWL79eK5DfUUbrNwLv6I6WDkMnmhb2fZvm2MtmIoU2yhBz7iaew/132","comment_is_top":false,"comment_ctime":1606288248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606288248","product_id":100017301,"comment_content":"哨兵的设置，可以让特殊情况一般化，一般化就可以统一来处理。","like_count":0},{"had_liked":false,"id":262906,"user_name":"Geek_2a26e2","can_delete":false,"product_type":"c1","uid":2331566,"ip_address":"","ucode":"D543C7CE508C29","user_header":"","comment_is_top":false,"comment_ctime":1605878673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605878673","product_id":100017301,"comment_content":"个人觉得哨兵代码这个比较的思想很棒！一定要理解代码，给自己加油💪","like_count":0},{"had_liked":false,"id":261627,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1605449908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605449908","product_id":100017301,"comment_content":"判断是否有环的数学解释的链接已丢失。<br>     * 快慢指针判断是否有环<br>     * @link http:&#47;&#47;t.cn&#47;ROxpgQ1<br>  麻烦在github 上更新一下。","like_count":0},{"had_liked":false,"id":258964,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1919730,"ip_address":"","ucode":"A8141D4AECF3A4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/f2/1274fdae.jpg","comment_is_top":false,"comment_ctime":1604588326,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604588326","product_id":100017301,"comment_content":"数组和链表虽然是最基础的数据结构，但认真练起来也很难，刚刚做了个swappair的算法题，居然没做出来，逻辑越做越糊涂","like_count":0},{"had_liked":false,"id":256323,"user_name":"强子","can_delete":false,"product_type":"c1","uid":2245503,"ip_address":"","ucode":"383D6AA09C1682","user_header":"https://static001.geekbang.org/account/avatar/00/22/43/7f/86dfca27.jpg","comment_is_top":false,"comment_ctime":1603599386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603599386","product_id":100017301,"comment_content":"指针往往都是怎么弄丢的呢？我拿单链表的插入操作为例来给你分析一下。<br>如图所示，我们希望在结点 a 和相邻的结点 b 之间插入结点 x，假设当前指针 p 指向结点 a<br>-------------<br>这里有点疑问，既然是单链表，图中为什么会有两个指针指向a节点？？","like_count":0},{"had_liked":false,"id":253943,"user_name":"可乐","can_delete":false,"product_type":"c1","uid":2224138,"ip_address":"","ucode":"74E62E744A5E50","user_header":"https://static001.geekbang.org/account/avatar/00/21/f0/0a/dbc9be64.jpg","comment_is_top":false,"comment_ctime":1602983818,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602983818","product_id":100017301,"comment_content":"请问为什么指针丢失的时候也会有内存泄漏的问题，具体是哪里造成的呢","like_count":0,"discussions":[{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340539,"discussion_content":"指针丢失说明指针指向的地址找不到了，系统也就无法找到这个地址申请的内存，无法对其内存进行释放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610032081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252724,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1545586,"ip_address":"","ucode":"A86DCA2384C6C0","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/72/24d249cf.jpg","comment_is_top":false,"comment_ctime":1602469498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602469498","product_id":100017301,"comment_content":"还没有买课程，直接选了这节试看一下，本人前端开发，不知道对前端有多大作用，没有什么后端基础","like_count":0},{"had_liked":false,"id":250336,"user_name":"郑思雨","can_delete":false,"product_type":"c1","uid":1474579,"ip_address":"","ucode":"F1F4B08FC94E7D","user_header":"https://static001.geekbang.org/account/avatar/00/16/80/13/df2a0ced.jpg","comment_is_top":false,"comment_ctime":1601028725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601028725","product_id":100017301,"comment_content":"架构层面：<br>Redis使用了哨兵模式，实现了监控主从服务器状态，当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知到其他的从服务器，从而解约了人工干预成本和时间成本；<br><br>代码层面：<br>以冒泡排序为例，可以设置一个标志位，用来判断一次冒泡过程是否存在数据交换，如果没有，说明已经全局有序，可以退出排序的循环体，达到了提高排序效率的作用，不知道算不算哨兵的应用。","like_count":0},{"had_liked":false,"id":249457,"user_name":"Geek_42b78b","can_delete":false,"product_type":"c1","uid":1736508,"ip_address":"","ucode":"0CA5A0F88B14FD","user_header":"","comment_is_top":false,"comment_ctime":1600663474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600663474","product_id":100017301,"comment_content":"想起redia中的哨兵","like_count":0},{"had_liked":false,"id":248092,"user_name":"Geek_726d9a","can_delete":false,"product_type":"c1","uid":2171958,"ip_address":"","ucode":"A4E794BF6A4E6D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibdLHjEF6Xe5jBrsrUjRWFpgXXpLkVdHofLbILGBGfbwSbFudJM8ecDl5wZFOESy7a67ZicjZSeCQUvWt2koibk1g/132","comment_is_top":false,"comment_ctime":1600006249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600006249","product_id":100017301,"comment_content":"老师啊 研究了几个小时了 就是不明白这道题:<br>合并两个有序链表:<br>public ListNode mergeTwoLists(ListNode l1, ListNode l2) {<br>        ListNode prehead = new ListNode(-1);<br><br>        ListNode prev = prehead;<br>        while (l1 != null &amp;&amp; l2 != null) {<br>            if (l1.val &lt;= l2.val) {<br>                prev.next = l1;<br>                l1 = l1.next;<br>            } else {<br>                prev.next = l2;<br>                l2 = l2.next;<br>            }<br>            prev = prev.next;<br>        }<br><br>        &#47;&#47; 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可<br>        prev.next = l1 == null ? l2 : l1;<br><br>        return prehead.next;<br>    }<br><br>这里的  ListNode prehead = new ListNode(-1);    ListNode prev = prehead; 这里为什么不能直接  ListNode prev = new ListNode(-1);    ","like_count":0},{"had_liked":false,"id":247518,"user_name":"R","can_delete":false,"product_type":"c1","uid":2172520,"ip_address":"","ucode":"3721FC8C8DE174","user_header":"https://static001.geekbang.org/account/avatar/00/21/26/68/b86dc4df.jpg","comment_is_top":false,"comment_ctime":1599730917,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599730917","product_id":100017301,"comment_content":"单链表的反转<br><br>&#47;&#47; 定义结点<br>typedef struct _node {<br>\tchar ch;<br>\tstruct _node* next;<br>} Node;<br><br>&#47;&#47; 定义单链表<br>typedef struct _linkedList {<br>\tNode* head;     &#47;&#47; 头结点<br>\tNode* tail;       &#47;&#47; 尾结点<br>\tint size;           &#47;&#47; 结点数量<br>} LinkedList;<br><br>&#47;&#47; 单链表反转<br>void reverse(LinkedList* list) {<br>\t&#47;&#47; 没有结点以下代码不需要执行<br>\tif(list-&gt;size == 0) return ;<br><br>\t&#47;&#47; 只有一个结点不需要反转<br>\tif(list-&gt;size == 1) return;<br><br>\tNode* pNow = list-&gt;head;<br>\tNode* pPre = NULL;<br>\tNode* pNext = NULL;<br><br>\t&#47;&#47; 单链表的反转<br>\twhile(pNow) {<br>\t\tpNext = pNow-&gt;next;<br>\t\tpNow-&gt;next = pPre;<br>\t\tpPre = pNow;<br>\t\tpNow = pNext;<br>\t}<br><br>\t&#47;&#47; 交换头尾指针<br>\tNode* temp = list-&gt;tail;<br>\tlist-&gt;tail = list-&gt;head;<br>\tlist-&gt;head = temp;<br>}","like_count":0},{"had_liked":false,"id":247492,"user_name":"裴一林","can_delete":false,"product_type":"c1","uid":1124119,"ip_address":"","ucode":"CDA4E1E087BE28","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/17/c13a1981.jpg","comment_is_top":false,"comment_ctime":1599723783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599723783","product_id":100017301,"comment_content":"写出正确的链表的代码的技巧：<br>1、理解指针或引用<br>2、警惕指针丢失和内存泄漏<br>3、利用哨兵简化难度<br>4、留意边界条件的处理<br>5、举例画图，辅助思考<br>6、多写多练","like_count":0},{"had_liked":false,"id":245430,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1598942964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598942964","product_id":100017301,"comment_content":"都实现了，贴一下有序链表的合并，这样效率低不public static void main(String[] args) {<br>    Node head1  = new Node();<br><br>    Node node11 = new Node(1);<br>    Node node12 = new Node(2);<br>    Node node13 = new Node(6);<br>    Node node14 = new Node(8);<br>    Node node15 = new Node(10);<br><br>    head1.setNext(node11);<br>    node11.setNext(node12);<br>    node12.setNext(node13);<br>    node13.setNext(node14);<br>    node14.setNext(node15);<br><br>    Node head2  = new Node();<br><br>    Node node21 = new Node(3);<br>    Node node22 = new Node(5);<br>    Node node23 = new Node(7);<br>    Node node24 = new Node(11);<br>    Node node25 = new Node(20);<br><br>    head2.setNext(node21);<br>    node21.setNext(node22);<br>    node22.setNext(node23);<br>    node23.setNext(node24);<br>    node24.setNext(node25);<br><br>    Node sumHead = new Node();<br>    Node tail = sumHead;<br>    while (head1.next != null &amp;&amp; head2.next != null) {<br>        if (head1.next.value &lt;= head2.next.value) {<br>            Node newNode = new Node(head1.next.value);<br>            tail.next = newNode;<br>            head1 = head1.next;<br><br>        } else {<br>            Node newNode = new Node(head2.next.value);<br>            tail.next = newNode;<br>            head2 = head2.next;<br>        }<br>        tail = tail.next;<br>    }<br><br>    if (head1.next == null) {<br>        tail.next = head2.next;<br>    }<br>    if (head2.next == null) {<br>        tail.next = head1.next;<br>    }<br>    while (sumHead.next != null) {<br>        System.out.println(sumHead.next.value);<br>        sumHead = sumHead.next;<br>    }<br>}<br><br>@Data<br>static class Node {<br><br>    Node() {}<br>    Node (int value) {<br>        this.value = value;<br>    }<br><br>    void setNext (Node next) {<br>        this.next = next;<br>    }<br><br>    Node next;<br>    int value;<br>}","like_count":0},{"had_liked":false,"id":244530,"user_name":"snappy","can_delete":false,"product_type":"c1","uid":2125715,"ip_address":"","ucode":"1AEA2F3824C0F2","user_header":"","comment_is_top":false,"comment_ctime":1598573142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598573142","product_id":100017301,"comment_content":"我看了老师单链表LRU缓存机制的代码，手动实现后有个疑问，把最新的数据放入链表的头部，不应该是headnode吗，按照代码里跑，头部节点始终是null呢","like_count":0},{"had_liked":false,"id":244376,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1598496848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598496848","product_id":100017301,"comment_content":"学习学习, 先学后习.","like_count":0},{"had_liked":false,"id":244293,"user_name":"剑影梦残","can_delete":false,"product_type":"c1","uid":1284481,"ip_address":"","ucode":"A5C5DAA49F6996","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XSnxM4uP67mVu7ZtPxWqUIvFH15pibGt1rFd34EiblN6NFfgKEKBuibLlI1kUjOIfbY56icwBibn6MmXzSEXm7AHicdQ/132","comment_is_top":false,"comment_ctime":1598452054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598452054","product_id":100017301,"comment_content":"1.链表反转 需要p p-next p-next-next三个指针来操作，注意p-next或者p-next-next为空的情况<br>2.中环检测 保留一个开头节点指针，然后一直next下去，判断是否跟开头指针相等<br>3.两个有序的链表合并 先判断是否有链表为空 遍历第一个链表 再遍历第二个链表，判断第二个链表的参数是否在第一个链表p和p-next中间。如果是插入第一个链表，如果不是这个循环break。开始第一个链表的下一个参数<br>4.删除链表倒数第 n 个结点 2个指针，k和k+n-1.当k+n-1的next为空时，k就是要找的指针<br>5.求链表的中间结点 快慢指针","like_count":0},{"had_liked":false,"id":244156,"user_name":"曹文宝","can_delete":false,"product_type":"c1","uid":1362937,"ip_address":"","ucode":"297BB4021E5635","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicCYYV8h4ia7OmFJDdXUjvfAVjXp4tS54PZHg9WE2OZTR8X62AV5y5VAQhxLAxrCVicQNs8bavm01Q/132","comment_is_top":false,"comment_ctime":1598412887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598412887","product_id":100017301,"comment_content":"对链表翻转算法的总结<br>&#47;&#47; 迭代<br>function nodeReverseIteration(node) {<br>  if (!node || !node.next) {<br>    return node;<br>  }<br>  let curr = node;<br>  let prev = null;<br>  while (curr) {<br>    let temp = curr.next;<br>    curr.next = prev;<br>    prev = curr;<br>    curr = temp;<br>  }<br>  return prev;<br>}<br><br>&#47;&#47; 递归<br>var reverseListRecursion = function (head) {<br>  if (!head || !head.next) return head;<br>  let res;<br>  function reverse(node) {<br>    if (!node.next.next) {<br>      node.next.next = node;<br>      res = node.next;<br>    } else {<br>      reverse(node.next);<br>      node.next.next = node;<br>      node.next = null;<br>    }<br>  }<br>  reverse(head);<br>  return res;<br>}<br>&#47;&#47; 总结 迭代<br>&#47;&#47; 初始化 当前节点 curr 初始化为head，已经逆序的节点 prev 初始化为null;<br>&#47;&#47; 每次执行循环时， 需要1、先保存后续节点curr.next; 2、对curr节点逆序处理（curr.next = prev）3、重新赋值prev（prev = curr） 4、重新赋值curr（curr = temp）<br>&#47;&#47; 最后prev就是逆序后的头结点。<br><br>&#47;&#47; 递归<br>&#47;&#47; 与迭代不同的是，递归是先找到最后一个节点，做逆向处理，保存这个节点（最后return）<br>&#47;&#47; 然后回到倒数第二个节点的函数，逆向处理，然后回到倒数第三个节点的函数，逆向处理……………………，以此类推。<br>&#47;&#47; 迭代是正向的处理，递归是反向的处理<br>不知道总结的对不对 求大佬指正。","like_count":0},{"had_liked":false,"id":244038,"user_name":"王振华 程序员","can_delete":false,"product_type":"c1","uid":1131957,"ip_address":"","ucode":"31BB337642B882","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","comment_is_top":false,"comment_ctime":1598364211,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598364211","product_id":100017301,"comment_content":"p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p 结点的 next 指针存储了 p 结点的下下一个结点的内存地址。<br>下下？没想明白呀，什么意思？<br>","like_count":0,"discussions":[{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340540,"discussion_content":"画个图就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610032245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243367,"user_name":"梦比糖果甜（Amy）","can_delete":false,"product_type":"c1","uid":1167568,"ip_address":"","ucode":"587C6B424C3399","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/d0/8ccf579f.jpg","comment_is_top":false,"comment_ctime":1598074399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598074399","product_id":100017301,"comment_content":"&#47;&#47; _util.js<br>export function getLinkByValue(arr) {<br>  let head = null<br>  if (arr &amp;&amp; arr.length &gt; 0) {<br>    for (let i = arr.length - 1; i &gt;= 0; i--) {<br>      let item = {<br>        value: arr[i],<br>        next: head<br>      }<br>      head = item<br>    }<br>  }<br>  return head<br>}<br><br>export function consoleLogLinkValue(head) {<br>  let p = head<br>  while (p.next !== null) {<br>    console.log(p.value)<br>    p = p.next<br>  }<br>  console.log(p.value)<br>}<br><br>&#47;&#47; merge<br>import { getLinkByValue, consoleLogLinkValue } from &#39;.&#47;_util&#39;<br><br>var a3 = {<br>  value: 9,<br>  next: null<br>}<br><br>var a2 = {<br>  value: 5,<br>  next: a3<br>}<br><br>var a1 = {<br>  value: 1,<br>  next: a2<br>}<br><br>var b3 = {<br>  value: 20,<br>  next: null<br>}<br><br>var b2 = {<br>  value: 5,<br>  next: b3<br>}<br><br>var b1 = {<br>  value: 2,<br>  next: b2<br>}<br><br>&#47;**<br> * <br> * js 写拷贝比较麻烦，需要注意引用类型<br> * <br> *&#47;<br><br>function merge(head1, head2) {<br>  let p1 = head1,<br>    p2 = head2,<br>    arr = []<br><br>  while (p1.next !== undefined &amp;&amp; p2.next !== undefined) {<br><br>    if (p1.value &lt; p2.value) {<br>      arr.push(p1.value)<br>      p1 = p1.next<br>    } else {<br>      arr.push(p2.value)<br>      p2 = p2.next<br>    }<br><br>    if (p1.next === null) {<br>      p1.next = {<br>        next: undefined<br>      }<br>    }<br>    if (p2.next === null) {<br>      p2.next = {<br>        next: undefined<br>      }<br>    }<br><br>  }<br>  while (p2.next !== undefined) {<br>    arr.push(p2.value)<br>    p2 = p2.next<br><br>    if (p2.next === null) {<br>      p2.next = {<br>        next: undefined<br>      }<br>    }<br>  }<br><br>  while (p1.next !== undefined) {<br>    arr.push(p1.value)<br>    p1 = p1.next<br><br>    if (p1.next === null) {<br>      p1.next = {<br>        next: undefined<br>      }<br>    }<br>  }<br><br>  return arr<br>}<br>let arr = merge(a1, b1)<br>let linkHead = getLinkByValue(arr)<br>consoleLogLinkValue(linkHead)","like_count":0},{"had_liked":false,"id":243365,"user_name":"梦比糖果甜（Amy）","can_delete":false,"product_type":"c1","uid":1167568,"ip_address":"","ucode":"587C6B424C3399","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/d0/8ccf579f.jpg","comment_is_top":false,"comment_ctime":1598074361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598074361","product_id":100017301,"comment_content":"var a3 = {<br>  value: &#39;a3&#39;<br>}<br><br>var a2 = {<br>  value: &#39;a2&#39;,<br>  next: a3<br>}<br><br>var a1 = {<br>  value: &#39;a1&#39;,<br>  next: a2<br>}<br><br>a3.next = a1<br><br>function isCircle(head) {<br>  let p = head<br>  while (p.next !== null) {<br>    if (p.next === head) {<br>      return true<br>    } else {<br>      p = p.next<br>    }<br>  }<br>  return false<br>}<br><br>let result = isCircle(a1)<br><br>console.log(result)","like_count":0},{"had_liked":false,"id":243364,"user_name":"梦比糖果甜（Amy）","can_delete":false,"product_type":"c1","uid":1167568,"ip_address":"","ucode":"587C6B424C3399","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/d0/8ccf579f.jpg","comment_is_top":false,"comment_ctime":1598074353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598074353","product_id":100017301,"comment_content":"&#47;**<br> * 单链表翻转<br> *&#47;<br><br>var a3 = {<br>  value: &#39;a3&#39;,<br>  next: null<br>}<br><br>var a2 = {<br>  value: &#39;a2&#39;,<br>  next: a3<br>}<br><br>var a1 = {<br>  value: &#39;a1&#39;,<br>  next: a2<br>}<br><br>var head = a1<br><br>&#47;&#47; a1-&gt;a2-&gt;a3<br>console.log(a1.next &amp;&amp; a1.next.value, a2.next &amp;&amp; a2.next.value, a3.next &amp;&amp; a3.next.value)<br><br>let p = head<br><br>while (p.next !== null) {<br>  let pNext = p.next<br>  let pNextNext = pNext.next<br>  p.next = pNextNext<br>  pNext.next = head<br>  head = pNext<br>  console.log(a1.next &amp;&amp; a1.next.value, a2.next &amp;&amp; a2.next.value, a3.next &amp;&amp; a3.next.value)<br>}<br><br>console.log(a1.next &amp;&amp; a1.next.value, a2.next &amp;&amp; a2.next.value, a3.next &amp;&amp; a3.next.value)","like_count":0},{"had_liked":false,"id":242415,"user_name":"xieglt","can_delete":false,"product_type":"c1","uid":2130310,"ip_address":"","ucode":"FCC877DE6B8150","user_header":"https://static001.geekbang.org/account/avatar/00/20/81/86/a73f93af.jpg","comment_is_top":false,"comment_ctime":1597717274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597717274","product_id":100017301,"comment_content":"写了个反转和一个合并的代码������ <br>LPLINKLIST ReverseList(LPLINKLIST lpHead)<br>{<br>\tLPLINKLIST lpNext = NULL;<br><br>\twhile(lpHead != NULL)<br>\t{<br>\t\tLPLINKLIST lpNode = lpHead-&gt;lpNext;<br>\t\tlpHead-&gt;lpNext = lpNext;<br>\t\t<br>\t\tlpNext = lpHead;<br>\t\tlpHead = lpNode;<br>\t}<br>\t<br>\treturn lpNext;<br>}<br><br>LPLINKLIST MergeList(LPLINKLIST list1,LPLINKLIST list2)<br>{<br>\tif(list1 == NULL)<br>\t{<br>\t\treturn list2;<br>\t}<br><br>\tif(list2 == NULL)<br>\t{<br>\t\treturn list1;<br>\t}<br><br>\tLPLINKLIST lpHead = (*list1 &lt; * list2) ? list1 : list2;<br>\tLPLINKLIST lpBig = (*list1 &lt; * list2) ? list2 : list1;<br><br>\tLPLINKLIST lpSmall = lpHead;<br>\t<br>\twhile(lpSmall != NULL)<br>\t{<br>\t\tif(lpSmall-&gt;lpNext == NULL)<br>\t\t{<br>\t\t\tlpSmall-&gt;lpNext = lpBig;<br>\t\t\tbreak;<br>\t\t}<br><br>\t\tif(*(lpSmall-&gt;lpNext) &lt; * lpBig)<br>\t\t{<br>\t\t\tlpSmall = lpSmall-&gt;lpNext;<br>\t\t}<br>\t\telse<br>\t\t{<br>\t\t\tLPLINKLIST lpNode = lpSmall-&gt;lpNext;<br>\t\t\tlpSmall-&gt;lpNext = lpBig;<br><br>\t\t\tlpSmall = lpBig;<br>\t\t\tlpBig = lpNode;<br>\t\t}<br>\t}<br><br>\treturn lpHead;<br>}","like_count":0},{"had_liked":false,"id":241481,"user_name":"Geek_42d9da","can_delete":false,"product_type":"c1","uid":2116098,"ip_address":"","ucode":"B99CFE2B583712","user_header":"","comment_is_top":false,"comment_ctime":1597307107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597307107","product_id":100017301,"comment_content":"老师，你下面的那段代码中，newNode.next = q.next; 是不是有些多余？<br><br>    public void insertTail(int value){<br><br>        Node newNode = new Node(value, null);<br>        &#47;&#47;空链表，可以插入新节点作为head，也可以不操作<br>        if (head == null){<br>            head = newNode;<br><br>        }else{<br>            Node q = head;<br>            while(q.next != null){<br>                q = q.next;<br>            }<br>            newNode.next = q.next;<br>            q.next = newNode;<br>        }<br>    }","like_count":0},{"had_liked":false,"id":240978,"user_name":"Geek_d08884","can_delete":false,"product_type":"c1","uid":2097818,"ip_address":"","ucode":"E4A24C746B6F21","user_header":"","comment_is_top":false,"comment_ctime":1597138133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597138133","product_id":100017301,"comment_content":"老师，请问一下，如何能造出有环链表？ 我实现了算法，但是模拟不出有环链表让我来做单元测试。  ","like_count":0},{"had_liked":false,"id":239609,"user_name":"talor","can_delete":false,"product_type":"c1","uid":1350638,"ip_address":"","ucode":"245EE908DA39EC","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/ee/211e86cd.jpg","comment_is_top":false,"comment_ctime":1596596538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596596538","product_id":100017301,"comment_content":"链表中环的检测<br>写下思路：<br>1.先遍历一遍链表，把各节点的地址和索引存入hashmap里。key: 节点地址  value: 索引<br>2.再次遍历链表，在hashmap中查找各节点的next地址，如果其索引值小于等于当前节点的索引值，则认为有环。<br>请各位大佬指正。","like_count":0},{"had_liked":false,"id":239437,"user_name":"流云","can_delete":false,"product_type":"c1","uid":1896868,"ip_address":"","ucode":"26C5A9166EC6D8","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f1/a4/79c36b87.jpg","comment_is_top":false,"comment_ctime":1596531753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596531753","product_id":100017301,"comment_content":"单链表反转<br>https:&#47;&#47;leetcode.com&#47;problems&#47;reverse-linked-list&#47;<br>链表中环的检测<br>https:&#47;&#47;leetcode.com&#47;problems&#47;linked-list-cycle&#47;<br>两个有序的链表合并<br>https:&#47;&#47;leetcode.com&#47;problems&#47;merge-two-sorted-lists&#47;<br>删除链表倒数第 n 个结点<br>https:&#47;&#47;leetcode.com&#47;problems&#47;remove-nth-node-from-end-of-list&#47;description&#47;<br>求链表的中间结点<br>https:&#47;&#47;leetcode.com&#47;problems&#47;middle-of-the-linked-list&#47;","like_count":0},{"had_liked":false,"id":238888,"user_name":"龙渊","can_delete":false,"product_type":"c1","uid":1985793,"ip_address":"","ucode":"73C846EE28258F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4d/01/257ab867.jpg","comment_is_top":false,"comment_ctime":1596357062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596357062","product_id":100017301,"comment_content":"前辈们好，我看了作者在GitHub上的c++单链表实现代码（linked_list_algo.hpp），但是有一块一直没看明白：<br>template &lt;typename T, typename UnaryFunc&gt;<br>void traverse(typename Node&lt;T&gt;::ptr_t head, UnaryFunc do_traverse) {<br>    auto sentry  = std::make_shared&lt;Node&lt;T&gt;&gt;();    <br>    sentry-&gt;next = head;    <br>    decltype(sentry) work = sentry;<br>    while (work = work-&gt;next) { <br>        do_traverse(work);<br>    }<br>}<br>我不知道work = work-&gt;next为什么会成立？work是一个智能指针，work-&gt;next是一个指向链表头节点的地址。","like_count":0},{"had_liked":false,"id":237080,"user_name":"Geek_123d36","can_delete":false,"product_type":"c1","uid":2082963,"ip_address":"","ucode":"AE849572C4BAC3","user_header":"","comment_is_top":false,"comment_ctime":1595670491,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595670491","product_id":100017301,"comment_content":"还有，老师你举得那两个小例子看不太懂，省去了i&lt;n，那第一个代码最坏的情况会执行n-1次，只比第一个代码最坏的情况少一次而已啊，搞不懂为什么说改良效果显著，请解答","like_count":0,"discussions":[{"author":{"id":2067828,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8d/74/392b1684.jpg","nickname":"西北望高楼","note":"","ucode":"F014CC854C90D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311722,"discussion_content":"减少的是i<n这个比较。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602472950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237079,"user_name":"Geek_123d36","can_delete":false,"product_type":"c1","uid":2082963,"ip_address":"","ucode":"AE849572C4BAC3","user_header":"","comment_is_top":false,"comment_ctime":1595670214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595670214","product_id":100017301,"comment_content":"java才刚入门，集合类还用的不太熟练，感觉这个有些难，链表压根不知道怎么写，","like_count":0},{"had_liked":false,"id":236953,"user_name":"Geek_6725b5","can_delete":false,"product_type":"c1","uid":1991426,"ip_address":"","ucode":"379B3DDD67B774","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JuoHr2r7lA9Sh7Phmrw86JVObha0hKsSYraibvicmVHdYe4UibB3htibR3IqdXGbzHYGicViblSseqdzG2hrSMD1OewA/132","comment_is_top":false,"comment_ctime":1595601851,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595601851","product_id":100017301,"comment_content":"本章内容心得总结：<br>1. 哨兵，顾名思义是确定边界的。在数据结构应用中，使用哨兵能够统一操作，减小编程的难度。在大数据运算过程中，使用哨兵，能够显著提高运行的效率。<br>2.链表使用的几个知识点：a.指针的含义。b.内存泄漏和空指针检查。c.哨兵的使用。d.边界值和特殊值的检查。e.画图。其中第一项，第二项比较有经验，第五项一般通过大脑思考。哨兵使用很少，边界值在实际工程中会进行检查。<br>3。链表要用的熟悉，还是得多练。","like_count":0},{"had_liked":false,"id":236156,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1595331194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595331194","product_id":100017301,"comment_content":"删除p的后继节点，应该主动设置后继节点为空，或者其next指针为空吧？<br><br>还是说程序中没有引用该节点的指针存在了，会自动回收？<br><br>next = p.next<br>p.next=p.next.next<br>next.next=null 或者 next=null  &#47;&#47; help GC","like_count":0},{"had_liked":false,"id":236134,"user_name":"莫失莫忘","can_delete":false,"product_type":"c1","uid":2062645,"ip_address":"","ucode":"F5E101EF08FA4C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/79/35/aa73b295.jpg","comment_is_top":false,"comment_ctime":1595324773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595324773","product_id":100017301,"comment_content":"怎么知道自己写的代码是不是对的，就是运行ok，结果正确，但是不知道是不是最好的方式，或者说有没有什么编译的时候看不出来的很小的错误。<br>","like_count":0},{"had_liked":false,"id":235690,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1595151713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595151713","product_id":100017301,"comment_content":"listNode *mergeTwoLists(listNode *l1,listNode *l2)<br>{<br>\tlistNode head = {0};<br>\tlistNode *pRes = &amp;head;<br><br>\twhile(1)<br>\t{<br>\t\tif(l1 == NULL)<br>\t\t{<br>\t\t\tpRes-&gt;next = l2;<br>\t\t}<br><br>\t\tif (l2 == NULL)<br>\t\t{<br>\t\t\tpRes-&gt;next = l1;<br>\t\t}<br><br>\t\tif(l1-&gt;val &lt; l2-&gt;val)<br>\t\t{<br>\t\t\tpRes-&gt;next = l1;<br>\t\t\tl1 = l1-&gt;next;<br>\t\t}<br>\t\telse<br>\t\t{<br>\t\t\tpRes-&gt;next = l2;<br>\t\t\tl2 = l2-&gt;next;<br>\t\t}<br>\t\tpRes = pRes-&gt;next;<br>\t}<br><br>\treturn head;<br>}<br>是怎么跳出循环的？","like_count":0},{"had_liked":false,"id":235511,"user_name":"李孟","can_delete":false,"product_type":"c1","uid":1006768,"ip_address":"","ucode":"AD2349CB12F130","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/b0/77e5f8c8.jpg","comment_is_top":false,"comment_ctime":1595068730,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1595068730","product_id":100017301,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;qq_19968255&#47;article&#47;details&#47;107433220","like_count":0},{"had_liked":false,"id":235499,"user_name":"moonfox","can_delete":false,"product_type":"c1","uid":1526355,"ip_address":"","ucode":"902BFF40EFA9FA","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","comment_is_top":false,"comment_ctime":1595063650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595063650","product_id":100017301,"comment_content":"把代码二：稍稍改了一下，因为直接COPY后不能运行, null 应为 NULL， 还有就是把 int find(char *a, int n, char key)改成了 int find(int *a, int n, int key); 这样在编译的时候就没有 Warning了，下面是完整的代码，加入了一些 log<br><br><br>#include &lt;stdio.h&gt;<br><br>int find(int *a, int n, int key);<br><br>    int main(int argc, char const *argv[])<br>{<br>  &#47;* code *&#47;<br>  int a[] = {4, 2, 3, 5, 9, 6};<br><br>  printf(&quot;result: %d\\n&quot;, find(a, 6, 7));<br>  printf(&quot;result: %d\\n&quot;, find(a, 6, 6));<br>  printf(&quot;result: %d\\n&quot;, find(a, 6, 3));<br>  return 0;<br>}<br><br>&#47;&#47; 在数组a中，查找key，返回key所在的位置<br>&#47;&#47; 其中，n表示数组a的长度<br>&#47;&#47; 我举2个例子，你可以拿例子走一下代码<br>&#47;&#47; int a[] = {4, 2, 3, 5, 9, 6}  n=6 key = 7<br>&#47;&#47; int a[] = {4, 2, 3, 5, 9, 6}  n=6 key = 6<br>int find(int *a, int n, int key)<br>{<br>  if (a == NULL || n &lt;= 0)<br>  {<br>    return -1;<br>  }<br><br>  &#47;&#47; 这里因为要将a[n-1]的值替换成key，所以要特殊处理这个值<br>  if (a[n - 1] == key)<br>  {<br>    return n - 1;<br>  }<br><br>  &#47;&#47; 把a[n-1]的值临时保存在变量tmp中，以便之后恢复。tmp=6。<br>  &#47;&#47; 之所以这样做的目的是：希望find()代码不要改变a数组中的内容<br>  char tmp = a[n - 1];<br>  &#47;&#47; 把key的值放到a[n-1]中，此时a = {4, 2, 3, 5, 9, 7}<br>  a[n - 1] = key;<br><br>  int i = 0;<br>  &#47;&#47; while 循环比起代码一，少了i&lt;n这个比较操作<br>  while (a[i] != key)<br>  {<br>    ++i;<br>  }<br><br>  &#47;&#47; 恢复a[n-1]原来的值,此时a= {4, 2, 3, 5, 9, 6}<br>  a[n - 1] = tmp;<br>  printf(&quot;i=%d\\n&quot;, i);<br>  printf(&quot;n - 1 : %d\\n&quot;, n - 1);<br><br>  if (i == n - 1)<br>  {<br>    &#47;&#47; 如果i == n-1说明，在0...n-2之间都没有key，所以返回-1<br>    return -1;<br>  }<br>  else<br>  {<br>    &#47;&#47; 否则，返回i，就是等于key值的元素的下标<br>    return i;<br>  }<br>}<br>","like_count":0},{"had_liked":false,"id":235099,"user_name":"肖永明","can_delete":false,"product_type":"c1","uid":1486476,"ip_address":"","ucode":"47F837F9564D70","user_header":"https://static001.geekbang.org/account/avatar/00/16/ae/8c/d18b2236.jpg","comment_is_top":false,"comment_ctime":1594891103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594891103","product_id":100017301,"comment_content":"const removeNthFromEnd = function(head, n) {<br>    let dummy = new ListNode(0);<br>    dummy.next = head;<br>    let length  = 0;<br>    let first = head;<br>    while (first != null) {<br>        length++;<br>        first = first.next;<br>    }<br>    length -= n;<br>    first = dummy;<br>    while (length &gt; 0) {<br>        length--;<br>        first = first.next;<br>    }<br>    first.next = first.next.next;<br>    return dummy.next;<br>}<br>有个问题想不明白,想请大佬解答一下:<br>当第二个while结束的时候first已经改变了,但此时的dummy还没有改变,但是当执行了 first.next = first.next.next; 之后dummy就改变了<br>dummy改变的依据是什么啊?????","like_count":0},{"had_liked":false,"id":234839,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1594808269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594808269","product_id":100017301,"comment_content":"看了好多资料；感觉不管是单链表，循环链表，双向链表，双向循环链表；在插入删除时按照头部、尾部，中间三种情况去考虑就对了。","like_count":0},{"had_liked":false,"id":233373,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1594301083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594301083","product_id":100017301,"comment_content":"哨兵优化查找的方式适合不按顺序查找。因为如果想要按从前往后的顺序查找的话，在允许出现重复数据的场景，前面也有要查找的值，最后一个恰好也是要查找的值，就会返回最后一个位置；<br><br><br>&#47;&#47; 在数组a中，查找key，返回key所在的位置<br>&#47;&#47; 其中，n表示数组a的长度<br>&#47;&#47; 我举2个例子，你可以拿例子走一下代码<br>&#47;&#47; a = {4, 2, 3, 5, 9, 6}  n=6 key = 7<br>&#47;&#47; a = {4, 2, 3, 5, 9, 6}  n=6 key = 6<br>int find(char* a, int n, char key) {<br>  if(a == null || n &lt;= 0) {<br>    return -1;<br>  }<br>  <br>  &#47;&#47; 这里因为要将a[n-1]的值替换成key，所以要特殊处理这个值<br>  if (a[n-1] == key) {<br>    return n-1;<br>  }<br>  <br>  &#47;&#47; 把a[n-1]的值临时保存在变量tmp中，以便之后恢复。tmp=6。<br>  &#47;&#47; 之所以这样做的目的是：希望find()代码不要改变a数组中的内容<br>  char tmp = a[n-1];<br>  &#47;&#47; 把key的值放到a[n-1]中，此时a = {4, 2, 3, 5, 9, 7}<br>  a[n-1] = key;<br>  <br>  int i = 0;<br>  &#47;&#47; while 循环比起代码一，少了i&lt;n这个比较操作<br>  while (a[i] != key) {<br>    ++i;<br>  }<br>  <br>  &#47;&#47; 恢复a[n-1]原来的值,此时a= {4, 2, 3, 5, 9, 6}<br>  a[n-1] = tmp;<br>  <br>  if (i == n-1) {<br>    &#47;&#47; 如果i == n-1说明，在0...n-2之间都没有key，所以返回-1<br>    return -1;<br>  } else {<br>    &#47;&#47; 否则，返回i，就是等于key值的元素的下标<br>    return i;<br>  }<br>}","like_count":0},{"had_liked":false,"id":233129,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1594223885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594223885","product_id":100017301,"comment_content":"求数组中的最大值和最小值，可以用哨兵保存最大和最小值","like_count":0},{"had_liked":false,"id":232753,"user_name":"以帅服人的珂哥","can_delete":false,"product_type":"c1","uid":1901476,"ip_address":"","ucode":"1A94CA2D7980B6","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/a4/d39c747c.jpg","comment_is_top":false,"comment_ctime":1594109799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594109799","product_id":100017301,"comment_content":"删除链表中的最后一个节点，我觉得改为删除链表中仅剩的一个节点比较恰当，我误解了半天没明白以为是删除尾结点呢。","like_count":0},{"had_liked":false,"id":232324,"user_name":"Sruby","can_delete":false,"product_type":"c1","uid":1016232,"ip_address":"","ucode":"A7D1B93F41DA0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","comment_is_top":false,"comment_ctime":1593957883,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1593957883","product_id":100017301,"comment_content":"p-&gt;next = p-&gt;next-&gt;next;<br>但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：<br>-----------------------<br>p是待删除节点的前一个节点，那p-&gt;next为待删除节点，p-&gt;next-&gt;next 为null，实际应该是可以删除掉最后一个节点才对吧？","like_count":0},{"had_liked":false,"id":231457,"user_name":"郝一🎲","can_delete":false,"product_type":"c1","uid":2051693,"ip_address":"","ucode":"AA09F41602D06F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4e/6d/fb0d302e.jpg","comment_is_top":false,"comment_ctime":1593679866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593679866","product_id":100017301,"comment_content":"哨兵那个，我使用Java的 int[] 和 ArrayList测试了啊 一千万的数据几乎没有差距啊？","like_count":0},{"had_liked":false,"id":231155,"user_name":"憎爱不关心","can_delete":false,"product_type":"c1","uid":1133580,"ip_address":"","ucode":"A868ACB200C798","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/0c/ada45f25.jpg","comment_is_top":false,"comment_ctime":1593594729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593594729","product_id":100017301,"comment_content":"已看完，确实很麻烦...","like_count":0},{"had_liked":false,"id":231040,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1250040,"ip_address":"","ucode":"2883C362D6C2B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/f8/888a9b9d.jpg","comment_is_top":false,"comment_ctime":1593570959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593570959","product_id":100017301,"comment_content":"&#47;**<br>     * 环检测<br>     * 快慢指针，快指针每次移动两个位置，慢指针每次移动一个位置。<br>     * 如果存在环，快指针会再次追上慢指针。<br>     * @param node<br>     * @return<br>     *&#47;<br>    public static boolean circleCheck(Node node) {<br>        if (node == null || node.next == null) {<br>            return false;<br>        }<br>        Node slowNode = node, fastNode = node.next;<br>        while (fastNode != null) {<br>            slowNode = slowNode.next;<br>            fastNode = fastNode.next == null? null : fastNode.next.next;<br>            if (slowNode == fastNode || slowNode.next == fastNode) {<br>                return true;<br>            }<br>        }<br>        return false;<br>    }","like_count":0},{"had_liked":false,"id":229617,"user_name":"SuperH~","can_delete":false,"product_type":"c1","uid":1103802,"ip_address":"","ucode":"21929491561C7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/ba/d657d286.jpg","comment_is_top":false,"comment_ctime":1593075058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593075058","product_id":100017301,"comment_content":"在java中，AQS的同步队列中，它的结构是一个双向链表，也使用了哨兵的情况，本来不理解为什么在源码中，他需要加入一个没有用的头结点，看了老师的课程，终于理解了！","like_count":0},{"had_liked":false,"id":229543,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1593054536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593054536","product_id":100017301,"comment_content":"设置带头节点的意义在于，删除和插入时候涉及到第一个节点时候不需要修改头指针，无需做额外判断，头指针永远不变，减少麻烦。剩下的删除逻辑和插入逻辑照样不变，不受带头或不带头影响。","like_count":0},{"had_liked":false,"id":229536,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1593053942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593053942","product_id":100017301,"comment_content":"疑惑，在面试时候，如果面试官要你写链表的代码，是不应该询问一下链表是不是带头链表？<br>如何再动手写相关的代码？","like_count":0},{"had_liked":false,"id":228420,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1592663765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592663765","product_id":100017301,"comment_content":"看到哨兵。 我想到了ICMP协议，","like_count":0},{"had_liked":false,"id":228163,"user_name":"201201255","can_delete":false,"product_type":"c1","uid":1989883,"ip_address":"","ucode":"04EB224B2DB692","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LtHjTGlnOMYwm7C1LZEIWpvys5ya8rwYnBqegs9ibdKiciavnCXwqCzatg9RKzDY2qcDjnVqbk6mfR36ROAwY54fg/132","comment_is_top":false,"comment_ctime":1592572573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592572573","product_id":100017301,"comment_content":"自从get了双指针和哨兵结点，感觉有如神助呀","like_count":0},{"had_liked":false,"id":226898,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1592225323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592225323","product_id":100017301,"comment_content":"反转、合并有序链表已自行完成，环判断、删除倒数第K节点已参考老师代码完成，此后，立马想到了找中间节点的方法。<br><br>【合并原理】：两个链表同时读，比较大小，小的放到新链表，并更新小的节点链表的头结点；如果有个链表节点遍历完了，把另外一个链表再拼上就好了；<br>【环判断原理】：快的比慢的快一个节点，只要有环，快的就能追上慢的；<br>【删除倒数第K个节点原理】：快节点和慢节点形成k-1的间距，快的跑到尽头（尾巴）时，慢的就是要删除的节点，同时要记录好慢节点的前置节点；<br>【找到链表中间节点原理】：快的走2步，慢的走1步，快的到尽头（尾巴）时，慢的就在中间；<br><br>【思考题】哨兵节点的使用场景：<br>书读的少，想不出来。看评论，找到了大神的留言精华：使用哨兵的指导思想应该是将小概率需要的判断先提前扼杀。<br>","like_count":0},{"had_liked":false,"id":226363,"user_name":"斯巴达克斯♛","can_delete":false,"product_type":"c1","uid":1332583,"ip_address":"","ucode":"99E18A2973EEC0","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/67/2b23d9c7.jpg","comment_is_top":false,"comment_ctime":1592047884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592047884","product_id":100017301,"comment_content":"一:理解指针或引用的含义<br>将某个变量赋值给指针,实际上就是将这个变量的地址赋值给指针,或者反过来说,<br>指针中存储了这个变量的内存地址,通过指针就能找到这个变量。<br>技巧二:警惕指针丢失和内存泄漏<br>例如将某结点插入链表时,应先将该节点的next指向下一个结点,再将该结点的前一个结点的next指向<br>该结点<br>技巧三:利用哨兵简化实现难度<br>如果没有哨兵结点,针对链表的插入、删除操作,需要对插入第一个结点和删除最后一个结点的情况<br>进行特殊处理。引入哨兵后,不管链表是不是空,head指针都会一直指向这个哨兵结点。这种有哨兵<br>结点的链表叫做带头链表,没有哨兵结点的链表叫做不带头链表。<br>技巧四:重点留意边界条件处理<br>例如链表为空时,代码能否正常工作;链表只有一个、两个结点时,代码能否正常工作;在处理头结点和<br>尾结点时,代码能否正常工作<br>技巧五:举例画图,辅助思考<br>技巧六:多写多练,没有捷径<br>提出5个常见的链表操作:<br>单链表的反转、链表中环的检测、两个有序链表的合并、删除链表倒数第n个结点、求链表的中间结点","like_count":0},{"had_liked":false,"id":226358,"user_name":"斯巴达克斯♛","can_delete":false,"product_type":"c1","uid":1332583,"ip_address":"","ucode":"99E18A2973EEC0","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/67/2b23d9c7.jpg","comment_is_top":false,"comment_ctime":1592046852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592046852","product_id":100017301,"comment_content":"技巧一:理解指针或引用的含义<br>将某个变量赋值给指针,实际上就是将这个变量的地址赋值给指针,或者反过来说,<br>指针中存储了这个变量的内存地址,通过指针就能找到这个变量。<br>技巧二:警惕指针丢失和内存泄漏<br>例如将某结点插入链表时,应先将该节点的next指向下一个结点,再将该结点的前一个结点的next指向<br>该结点<br>技巧三:利用哨兵简化实现难度<br>如果没有哨兵结点,针对链表的插入、删除操作,需要对插入第一个结点和删除最后一个结点的情况<br>进行特殊处理。引入哨兵后,不管链表是不是空,head指针都会一直指向这个哨兵结点。这种有哨兵<br>结点的链表叫做带头链表,没有哨兵结点的链表叫做不带头链表。<br>技巧四:重点留意边界条件处理<br>例如链表为空时,代码能否正常工作;链表只有一个、两个结点时,代码能否正常工作;在处理头结点和<br>尾结点时,代码能否正常工作<br>技巧五:举例画图,辅助思考<br>技巧六:多写多练,没有捷径<br>提出5个常见的链表操作:<br>单链表的反转、链表中环的检测、两个有序链表的合并、删除链表倒数第n个结点、求链表的中间结点","like_count":0},{"had_liked":false,"id":224126,"user_name":"Geek_849f9f","can_delete":false,"product_type":"c1","uid":2027473,"ip_address":"","ucode":"67601F35A91999","user_header":"","comment_is_top":false,"comment_ctime":1591279868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591279868","product_id":100017301,"comment_content":"我理解的指针、引用就像盒子上的标签，值是盒子里面的内容，指针或引用指向的是盒子上的标签；单链表的哨兵，最后指针指向不为空，删除最后一个节点签把指针的指向赋值给倒数第二个节点的指针","like_count":0},{"had_liked":false,"id":220005,"user_name":"worthto","can_delete":false,"product_type":"c1","uid":1387712,"ip_address":"","ucode":"41D7ABBBD2E7FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N6yjnrLnMW4XVSkBr3f0N3F962l35b5j0kib9VSlAqqbf6iaoCPicL1WnJ9KjgT4egQ7A2G0Zx3OayaK4yuoZrUVA/132","comment_is_top":false,"comment_ctime":1590134217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590134217","product_id":100017301,"comment_content":"自己把所有习题都实现了一遍，贴出第四道题，删除倒数第n个，感觉代码有点累赘，期待提出意见。<br>public ListNode removeLastN(ListNode head, int n) {<br>        ListNode fast = head;<br>        &#47;&#47;用head和fast生成一个长度为n + 1的窗口<br>        int i = 0;<br>        for (; i &lt; n; i++) {<br>            fast = fast.next;<br>            if (fast == null) {<br>                break;<br>            }<br>        }<br>        if (i &lt; n - 1) {<br>            &#47;&#47;链表长度不足n - 1 个<br>            return head;<br>        }<br>        if (fast == null) {<br>            &#47;&#47;链表长度刚好为n个，则删除头结点<br>            head = head.next;<br>            return head;<br>        }<br><br>        ListNode prev = head;<br>        while (fast.next != null) {<br>            fast = fast.next;<br>            prev = prev.next;<br>        }<br>        prev.next = prev.next.next;<br>        return head;<br>    }","like_count":0},{"had_liked":false,"id":219941,"user_name":"Monna","can_delete":false,"product_type":"c1","uid":1445939,"ip_address":"","ucode":"5267BF184F9D14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Vk0HnRNNGqJjAP8eC6BuQdap04LgfOdOtUPTx6gicxdS32skDytaHXrDutWTmbUxPMoXQxj6CTBQibPI511DPYHg/132","comment_is_top":false,"comment_ctime":1590122162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590122162","product_id":100017301,"comment_content":"<br>p-&gt;next = x;  &#47;&#47; 将p的next指针指向x结点；<br>x-&gt;next = p-&gt;next;  &#47;&#47; 将x的结点的next指针指向b结点； <br>颠倒顺序是不是也是不行的 <br>正确顺序为:(java)<br>a.next = x;<br>x.next = b;","like_count":0},{"had_liked":false,"id":218052,"user_name":"归零","can_delete":false,"product_type":"c1","uid":1103208,"ip_address":"","ucode":"C99B8E93009A46","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/68/2201b6b9.jpg","comment_is_top":false,"comment_ctime":1589704586,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589704586","product_id":100017301,"comment_content":"问一个小白问题，对于删除某个节点，老师的方法是：p-&gt;next = p-&gt;next-&gt;next;<br>但是我理解这样的话，待删除的节点，即原p-&gt;next仍然指向p-&gt;next-&gt;next<br>是否应该改为p.next.next=m;<br>                  p.next.next=null;   p.next=m;","like_count":0},{"had_liked":false,"id":217932,"user_name":"怕什么，抱紧我","can_delete":false,"product_type":"c1","uid":1318633,"ip_address":"","ucode":"CBCEA76E9EF33B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_is_top":false,"comment_ctime":1589672332,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589672332","product_id":100017301,"comment_content":"https:&#47;&#47;gitee.com&#47;wanbing0610&#47;GeekTime;<br>1.单链表反转;<br>2.链表中的环检测;<br>3.两个有序链表的合并;<br>后续的会继续跟上,希望大家指点;","like_count":0},{"had_liked":false,"id":216949,"user_name":"iris","can_delete":false,"product_type":"c1","uid":1986106,"ip_address":"","ucode":"8D54D1DBEA6F64","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4e/3a/1932100c.jpg","comment_is_top":false,"comment_ctime":1589375081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589375081","product_id":100017301,"comment_content":"去看了环的检测算法思想，自己平时不涉及链表，强行训练目前对我意义不大，但接受思想还是好的，go！","like_count":0},{"had_liked":false,"id":216371,"user_name":"guan0078","can_delete":false,"product_type":"c1","uid":1090467,"ip_address":"","ucode":"53B15FF3752A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/a3/804fb3e9.jpg","comment_is_top":false,"comment_ctime":1589247806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589247806","product_id":100017301,"comment_content":"返回中间结点的代码有两种写法。区别在于偶数结点是返回中间两个的左边结点还是右边结点<br>&#47;**<br>     * [1,2,3,4,5] 返回[3,4,5]<br>     * [1,2,3,4] 返回[3,4]<br>     * @param head<br>     * @return<br>     *&#47;<br>    public ListNode getMiddleNode(ListNode head) {<br>        if(head == null) {<br>            return head;<br>        }<br>        ListNode fast = head;<br>        ListNode slow = head;<br>        while (fast != null &amp;&amp; fast.next != null) {<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        }<br>        return slow;<br>    }<br><br>    &#47;**<br>     * [1,2,3,4,5] 返回[3,4,5]<br>     * [1,2,3,4] 返回[2,3, 4]<br>     * @param head<br>     * @return<br>     *&#47;<br>    public ListNode getMiddleNode2(ListNode head) {<br>        if(head == null) {<br>            return head;<br>        }<br>        ListNode fast = head;<br>        ListNode slow = head;<br>        while (fast.next != null &amp;&amp; fast.next.next != null) {<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        }<br>        return slow;<br>    }","like_count":0},{"had_liked":false,"id":216323,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1589242634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589242634","product_id":100017301,"comment_content":"以前写写链表代码的时候，查资料，各个写的不一样，也在疑惑为什么有的代码实现里，链表有头，有的没有，并且写链表，也是死记硬背，今天看了博主的这个哨兵的解释，有种恍然大悟的感觉，原来是这样考虑，才考虑用哨兵的","like_count":0},{"had_liked":false,"id":216037,"user_name":"草原上的骆驼🐫","can_delete":false,"product_type":"c1","uid":1651618,"ip_address":"","ucode":"F0B12CB1FEED84","user_header":"https://static001.geekbang.org/account/avatar/00/19/33/a2/585be249.jpg","comment_is_top":false,"comment_ctime":1589172777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589172777","product_id":100017301,"comment_content":"代码二中的那个find方法表示，哨兵变量即可以在开头，也可以在结尾吗？","like_count":0},{"had_liked":false,"id":214627,"user_name":"孙哲","can_delete":false,"product_type":"c1","uid":1606741,"ip_address":"","ucode":"E43FA22B52F3B4","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/55/34055533.jpg","comment_is_top":false,"comment_ctime":1588774760,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1588774760","product_id":100017301,"comment_content":"p-&gt;next = p-&gt;next-&gt;next; 删除节点的时候，不需要断开原来的指针嘛？","like_count":0,"discussions":[{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340546,"discussion_content":"我觉得要，ListNode* node=p->next；\np->next=node->next；delete node；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610032708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292782,"discussion_content":"我觉得应该需要，\n\n如下：\nnext = p->next\np->next=p->next->next\nnext->next=null 或者 next=null\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595331019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213715,"user_name":"Yao Frankie","can_delete":false,"product_type":"c1","uid":1394916,"ip_address":"","ucode":"605BB79A4FE80C","user_header":"https://static001.geekbang.org/account/avatar/00/15/48/e4/badfcbb6.jpg","comment_is_top":false,"comment_ctime":1588519131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588519131","product_id":100017301,"comment_content":"王老师，讲得很好，我总结了部分知识点，以及10道实战题目，希望对大家有所帮助。<br><br>http:&#47;&#47;yaoyichen.cn&#47;algorithm&#47;2020&#47;05&#47;03&#47;data-structure-linked-list.html","like_count":0},{"had_liked":false,"id":213118,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588305023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588305023","product_id":100017301,"comment_content":"学习感悟：<br>今天内容偏实战：<br>1. 理解好指针的含义<br>2. 注意边界操作<br>3. 多写多练<br>4. 注意内存泄漏<br>5. 利用哨兵简化代码<br>6. 画图举例，帮助思考<br>知识层面上，我的收获是理解好指针：指针是什么我早就知道了，但是链表层面，该如何思考指针，我还真不清楚。我通常就像计算机一样，把指针理解位handler，就像一个狗链子的把手。但是这种思维很容易出错。今天学到了将指针直接理解为节点。p指针就是p节点，p-&gt;next,就是p的下一个节点。<br>运用层面上，我看到了哨兵的威力，但没想出其他场景，看下其他评论吧<br>实战层面，我知道了链表本身就很难很绕，没必要为自己不会感到自卑，自我怀疑。干就完了，多写几遍老师给的几道题。<br>转一个评论：写链表不是为了思考解决办法，而是锻炼写代码的能力。不会没关系，用别人的想法，你能写出来就是本事。<br>","like_count":0},{"had_liked":false,"id":213060,"user_name":"严丹","can_delete":false,"product_type":"c1","uid":1798204,"ip_address":"","ucode":"96FA634D06C3FD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/3c/a002615b.jpg","comment_is_top":false,"comment_ctime":1588292827,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588292827","product_id":100017301,"comment_content":"没用过哨兵，后面学习下","like_count":0},{"had_liked":false,"id":209460,"user_name":"小李讲源码","can_delete":false,"product_type":"c1","uid":1107484,"ip_address":"","ucode":"2573037D7C82C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","comment_is_top":false,"comment_ctime":1587553032,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587553032","product_id":100017301,"comment_content":"哨兵的思想可真好","like_count":0},{"had_liked":false,"id":209344,"user_name":"Geek_ca540c","can_delete":false,"product_type":"c1","uid":1903258,"ip_address":"","ucode":"DA56EE2C0CD480","user_header":"","comment_is_top":false,"comment_ctime":1587539756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587539756","product_id":100017301,"comment_content":"这一章的技巧很多，都是干货。特别是边界检查的部分。","like_count":0},{"had_liked":false,"id":207856,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1587198280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587198280","product_id":100017301,"comment_content":"又把这个5道题写了一遍，双指针可以用到很多场景","like_count":0},{"had_liked":false,"id":207513,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1587097719,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587097719","product_id":100017301,"comment_content":"总结：c和c++中有指针的概念，在python和JavaScript 则不让用户自行操作地址，去掉了指针，取而代之的引用的概念。在JavaScript中，所有非基本类型的都是引用类型。在插入一个结点时，需要先将该结点的后继指针赋值，再将前驱结点的后继结点赋值。如果先将前驱结点的后继指针赋值给被插入结点，那么后继结点丢失，整个链表断开。在C语言中，删除结点时，还需要手动释放内存。如果 不引入哨兵的话，那么在删除和插入元素时，需要对链表是否为空或者操作后为空进行特殊处理。如果在删除结点时，被删除结点是最后一个结点的话，那么就需要将head变为null，而不是将被删除结点的前驱结点的后继指针指向该结点的后继结点；在插入元素时，如果链表为空，需要直接将该结点赋值给head，而不是进行将该结点的后继指针赋值给前驱结点的后继指针，并且将前驱结点的后继指针指向该结点的操作。哨兵就是，无论该链表是否为空，都存在的一个结点。该哨兵不存有数据，无论链表是否为空，head指针都指向该结点。针对删除结点时，被删除结点是最后一个结点的话，那么还是跟普通情况一样，即被删除结点现在是哨兵结点的后继结点，并且该结点的后继指针指向null。那么直接将哨兵结点的后继指针赋值为该结点的后继指针，也就是null，也就达到了将链表情况的效果。同时该链表不可以再删除数据了。针对插入结点时，如果链表为空的话，则进行将该结点的后继指针赋值给前驱结点的后继指针，也就是哨兵结点的后继指针null，并且将前驱结点（哨兵结点）的后继指针指向该结点的操作。","like_count":0},{"had_liked":false,"id":207430,"user_name":"₯㎕","can_delete":false,"product_type":"c1","uid":1080182,"ip_address":"","ucode":"6E06492D0FBA54","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/76/69aada7c.jpg","comment_is_top":false,"comment_ctime":1587085406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587085406","product_id":100017301,"comment_content":"<br>学习链表的技巧<br>1.技巧一：理解指针或引用的含义<br>2.技巧二：警惕指针丢失和内存泄漏<br>3.技巧三：利用哨兵简化实现难度<br>4.技巧四：重点留意边界条件处理<br>5.技巧五：举例画图，辅助思考<br>6.技巧六：多写多练，没有捷径<br><br>需要熟练掌握以下面试题写法，并通过多思考，举一反三<br><br>单链表反转<br>链表中环的检测<br>两个有序的链表合并<br>删除链表倒数第 n 个结点<br>求链表的中间结点","like_count":0},{"had_liked":false,"id":207202,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1587023304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587023304","product_id":100017301,"comment_content":"哨兵我咋不认识他呢？","like_count":0},{"had_liked":false,"id":207135,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1587012594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587012594","product_id":100017301,"comment_content":"凡事有一利就有一弊，但是要去权衡利弊，做出选择，而不是心存妄念，什么都想要。这是哨兵的例子让我想起的一句话。<br><br>通过引入哨兵，提高性能的同时，却让代码可读性变差。<br><br>第二段代码中，我们通过一个哨兵 a[n-1] = key，成功省掉了一个比较语句 i&lt;n，不要小看这一条语句，当累积执行万次、几十万次时，累积的时间就很明显了。<br>当然，这只是为了举例说明哨兵的作用，你写代码的时候千万不要写第二段那样的代码，因为可读性太差了。大部分情况下，我们并不需要如此追求极致的性能。","like_count":0},{"had_liked":false,"id":206501,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1586870616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586870616","product_id":100017301,"comment_content":"删除链表倒数第 n 个结点<br>求链表的中间结点<br>为了快速实现这两个这个操作，可以在哨兵节点中记录链表长度，能够减少一次链表遍历操作，降低复杂度","like_count":0},{"had_liked":false,"id":206143,"user_name":"Geek_3ba85e","can_delete":false,"product_type":"c1","uid":1446784,"ip_address":"","ucode":"106586BF969A80","user_header":"","comment_is_top":false,"comment_ctime":1586793211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586793211","product_id":100017301,"comment_content":"leetcode876题，也就是王大给的第五个情况，快慢指针法和数组解法我觉得都只满足奇数节点情况啊，我画图偶数个总是不对 ，有没有大大指教下？？？！！！<br>（1）数组解法<br>class Solution {<br>    public ListNode middleNode(ListNode head) {<br>        ListNode[] A = new ListNode[100];<br>        int t = 0;<br>        while (head != null) {<br>            A[t++] = head;<br>            head = head.next;<br>        }<br>        return A[t &#47; 2];<br>    }<br><br>}<br>按照return的条件，如果是奇数节点比如5，那么t=6,返回a[3]正好就是中间那个，如果是偶数节点比如6，t=7那a[t&#47;2]不还是a[3]吗？难道向上取整了？<br><br>（2）快慢指针法<br>  if (head == null) return null;<br>        ListNode fast = head;<br>        ListNode slow = head;<br>        while (fast != null &amp;&amp; fast.next != null) {<br>            fast = fast.next.next;<br>            slow = slow.next;<br>        }<br>        return  slow;<br><br>还是偶数节点的情况，当偶数个节点的时候fast快指针正好到达表尾节点，这是slow慢指针必然是到达两个中间节点的前一个，题目要的是后面一个啊？可如果返回slow.next的话，那奇数节点情况又不符合。 头痛啊<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":205965,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586764601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586764601","product_id":100017301,"comment_content":"在实现树这种数据结构的时候，也会用到哨兵，作为根节点","like_count":0},{"had_liked":false,"id":205716,"user_name":"晓森","can_delete":false,"product_type":"c1","uid":1112603,"ip_address":"","ucode":"3D5EB11B9E0FD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/1b/5d82d759.jpg","comment_is_top":false,"comment_ctime":1586707397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586707397","product_id":100017301,"comment_content":"单链表反转 done<br>链表中环的检测 done<br>两个有序的链表合并 done<br>删除链表倒数第 n 个结点 done<br>求链表的中间结点 done","like_count":0},{"had_liked":false,"id":205560,"user_name":"林毅鑫","can_delete":false,"product_type":"c1","uid":1917916,"ip_address":"","ucode":"1BB3D186E90D96","user_header":"https://static001.geekbang.org/account/avatar/00/1d/43/dc/95d4f2c5.jpg","comment_is_top":false,"comment_ctime":1586673820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586673820","product_id":100017301,"comment_content":"自己有决心并且付出精力是成功的先决条件","like_count":0},{"had_liked":false,"id":204791,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1586474503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586474503","product_id":100017301,"comment_content":"快慢指针应用很广泛呀：<br>1.回文链表<br>2.删除倒数N节点<br>3.链表是否有环<br>4.链表中间节点","like_count":0},{"had_liked":false,"id":204172,"user_name":"yoummg","can_delete":false,"product_type":"c1","uid":1067856,"ip_address":"","ucode":"1B809CFDD7A508","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/50/fdecd51a.jpg","comment_is_top":false,"comment_ctime":1586346394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586346394","product_id":100017301,"comment_content":"链表总结：<br>1.理解指针，警惕指针不见，内存泄漏<br>2.利用哨兵简化难度，考虑边界条件，画图帮忙<br>3.没有捷径，多次练习<br><br>课后练习<br>单链表反转<br>链表中环的检测<br>两个有序的链表合并<br>删除链表倒数第 n 个结点<br>求链表的中间结点","like_count":0},{"had_liked":false,"id":203809,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1586269112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586269112","product_id":100017301,"comment_content":"多练习很重要，熟能生巧","like_count":0},{"had_liked":false,"id":202489,"user_name":"桐谷華","can_delete":false,"product_type":"c1","uid":1716198,"ip_address":"","ucode":"776A2C200BBBD5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/e6/c8578135.jpg","comment_is_top":false,"comment_ctime":1585995535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585995535","product_id":100017301,"comment_content":"假如链表L在有哨兵之前，我们必须通过L.head来访问表头，现在可以通过L.nil.next来访问表头了。<br>L.nil就是守卫链表疆土的哨兵，那么L.nil.prev就自然的指向表尾了，相应的L.nil.prev指向表头.","like_count":0},{"had_liked":false,"id":202378,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1585979833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585979833","product_id":100017301,"comment_content":"手写链表去","like_count":0},{"had_liked":false,"id":201507,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1585796972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585796972","product_id":100017301,"comment_content":"$linklist = new Linklist();<br><br>&#47;&#47; 链表尾插入两间点<br>$linklist-&gt;addLast(10);<br>$linklist-&gt;addLast(30);<br><br>&#47;&#47; 第一个节点后插入数据<br>$linklist-&gt;add(1,20);<br><br>&#47;&#47; 遍历链表输出值<br>$linklist-&gt;ergodic();<br>echo &quot;&lt;br&gt;-----------------------&lt;br&gt;&quot;;<br><br>&#47;&#47; 更改第二个值为40<br>$linklist-&gt;edit(2,40);<br>&#47;&#47; 遍历链表输出值<br>$linklist-&gt;ergodic();<br>echo &quot;&lt;br&gt;-----------------------&lt;br&gt;&quot;;<br><br>&#47;&#47; 删除第二个节点<br>$linklist-&gt;deleteNode(2);<br>&#47;&#47; 遍历链表输出值<br>$linklist-&gt;ergodic();<br>echo &quot;&lt;br&gt;-----------------------&lt;br&gt;&quot;;","like_count":0},{"had_liked":false,"id":201506,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1585796959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585796959","product_id":100017301,"comment_content":"&lt;?php<br>&#47;&#47; 定义某一节点<br>class Node {<br>\tpublic $val; &#47;&#47; 保存值<br>\tpublic $nextNode; &#47;&#47; 下个节点的引用<br>\t<br>\tpublic function __construct($val = null,$nextNode=null)<br>\t{<br>\t\t$this-&gt;val = $val;<br>\t\t$this-&gt;nextNode = $nextNode;<br>\t}<br>}<br><br>&#47;&#47; 链表类<br>class Linklist <br>{<br>\tpublic $head;&#47;&#47; 头节点<br>\tpublic $size; &#47;&#47; 长度<br>\t<br>\tpublic function __construct()<br>\t{<br>\t\t$this-&gt;head = new Node(); &#47;&#47; 头节点是空节点<br>\t\t$this-&gt;size = 0;<br>\t}<br>\t<br>\t&#47;&#47; 指定位置插入节点<br>\tpublic function add($index,$value) {<br>\t\tif($index &gt; $this-&gt;size) {<br>\t\t\techo &quot;超出链表范围&lt;br&#47;&gt;&quot;;<br>\t\t\treturn false;<br>\t\t}<br>\t\t$prev = $this-&gt;head;<br>\t\tfor($i=0;$i&lt;$index;$i++) {<br>\t\t\t$prev = $prev-&gt;nextNode;<br>\t\t}<br>\t\t$prev-&gt;nextNode = new Node($value,$prev-&gt;nextNode);<br>\t\t$this-&gt;size++;<br>\t\treturn true;<br>\t}<br>\t&#47;&#47; 插入数据到链表头<br>\tpublic function addFirst($value) {<br>\t\t$this-&gt;add(0,$value);<br>\t}<br>\t<br>\t&#47;&#47; 表尾插入数据<br>\tpublic function addLast($value) {<br>\t\t$this-&gt;add($this-&gt;size,$value);<br>\t}<br>\t<br>\t&#47;&#47; 更改指定位置的数据<br>\tpublic function edit($index,$value) {<br>\t\tif ($index &lt; 1) {<br>\t\t\techo &quot;哨兵节点不可以修改&lt;br&#47;&gt;&quot;;<br>\t\t\treturn false;<br>\t\t}<br>\t\tif ($index &gt; $this-&gt;size) {<br>\t\t\techo &quot;超出链表范围&lt;br&#47;&gt;&quot;;<br>\t\t\treturn false;<br>\t\t}<br>\t\t$prev = $this-&gt;head-&gt;nextNode; &#47;&#47; 哨兵节点的值不能修改<br>\t\tfor($i=1;$i&lt;=$index;$i++){<br>\t\t\tif($i==$index) {<br>\t\t\t\t$prev-&gt;val = $value; &#47;&#47; 修改值<br>\t\t\t}<br>\t\t\t$prev = $prev-&gt;nextNode;<br>\t\t}<br>\t\treturn true;<br>\t}<br>\t<br>\t<br>\t<br>\t&#47;&#47; 删除指定位置节点<br>\tpublic function deleteNode($index) {<br>\t\tif ($index &lt; 1) {<br>\t\t\techo &quot;哨兵节点不可以删除&lt;br&#47;&gt;&quot;;<br>\t\t\treturn false;<br>\t\t}<br>\t\tif ($index &gt; $this-&gt;size) {<br>\t\t\techo &quot;超出链表范围&lt;br&#47;&gt;&quot;;<br>\t\t\treturn false;<br>\t\t}<br>\t\t$prev = $this-&gt;head;<br>\t\tfor($i=1;$i&lt;=$index;$i++){<br>\t\t\tif($i==$index) {<br>\t\t\t\t$tempNode = $prev-&gt;nextNode;<br>\t\t\t\t$prev-&gt;nextNode = $prev-&gt;nextNode-&gt;nextNode;<br>\t\t\t\tunset($tempNode);<br>\t\t\t}<br>\t\t\t$prev = $prev-&gt;nextNode;<br>\t\t}<br>\t\t$this-&gt;size--;<br>\t\treturn true;<br>\t}<br>\t<br>\t&#47;&#47; 遍历链表输出值<br>\tpublic function ergodic(){<br>\t\t$prev = $this-&gt;head-&gt;nextNode; &#47;&#47; 哨兵节点的值不能查询<br>\t\tfor($i=1;$i&lt;=$this-&gt;size;$i++){<br>\t\t\t<br>\t\t\techo &quot; 第{$i}个值为：{$prev-&gt;val} &quot;;<br>\t\t\t<br>\t\t\t$prev = $prev-&gt;nextNode;<br>\t\t}<br>\t}<br>\t<br>}","like_count":0},{"had_liked":false,"id":200698,"user_name":"Jecy-8","can_delete":false,"product_type":"c1","uid":1016276,"ip_address":"","ucode":"2AE1575B9E63A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/d4/e92abeb4.jpg","comment_is_top":false,"comment_ctime":1585639489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585639489","product_id":100017301,"comment_content":"两个有序链表的合并，自己想了个算法花了大半天实现了，网上一查用的算法很简单，感觉我的就比较复杂，但我感觉我的思路是对的，写的过程中边测试边调试边完善，还是觉得有收获。想发出来给老师看下，发现超出了规定内容长度😂<br><br>","like_count":0},{"had_liked":false,"id":200387,"user_name":"寒光","can_delete":false,"product_type":"c1","uid":1206187,"ip_address":"","ucode":"061BE413595F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","comment_is_top":false,"comment_ctime":1585579542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585579542","product_id":100017301,"comment_content":"Null Object模式，返回空集合实例，返回长度为零的数组，而不是null，都是广义的哨兵模式，目的是为了减少特例，统一程序的处理逻辑。","like_count":0},{"had_liked":false,"id":200256,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585564516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585564516","product_id":100017301,"comment_content":"暂时没想到。哈哈哈","like_count":0},{"had_liked":false,"id":197967,"user_name":"王坚","can_delete":false,"product_type":"c1","uid":1042067,"ip_address":"","ucode":"893A6341A6655C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/93/f09a528e.jpg","comment_is_top":false,"comment_ctime":1585405464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585405464","product_id":100017301,"comment_content":"继续坚持","like_count":0},{"had_liked":false,"id":196776,"user_name":"yezi","can_delete":false,"product_type":"c1","uid":1935780,"ip_address":"","ucode":"B2E5CC51D37C44","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AiaYGqeT5oDEUaRq2vVLOIesrnPwJH3VfN8tb3CZlAbxW9QYo6TfPqUS8c4ibAyibsn1955GK3EOJsjFFKXRbSYvA/132","comment_is_top":false,"comment_ctime":1585312344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585312344","product_id":100017301,"comment_content":"举例画图，辅助思考，不要害怕ヽ(≧Д≦)ノ","like_count":0},{"had_liked":false,"id":196047,"user_name":"shadow","can_delete":false,"product_type":"c1","uid":1598637,"ip_address":"","ucode":"B5B8018157DA23","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/ad/467b6471.jpg","comment_is_top":false,"comment_ctime":1585232432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585232432","product_id":100017301,"comment_content":"建议大家在实现之前的思考时间不要太长。","like_count":0},{"had_liked":false,"id":195775,"user_name":"hong4cong","can_delete":false,"product_type":"c1","uid":1015829,"ip_address":"","ucode":"2BBD851272B9BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/15/c4f5dd00.jpg","comment_is_top":false,"comment_ctime":1585215135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585215135","product_id":100017301,"comment_content":"先看明白，再加强手撸能力","like_count":0},{"had_liked":false,"id":195611,"user_name":"hpp","can_delete":false,"product_type":"c1","uid":1936370,"ip_address":"","ucode":"3536E2B370ACBA","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8b/f2/a7253cb0.jpg","comment_is_top":false,"comment_ctime":1585204743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585204743","product_id":100017301,"comment_content":"但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：<br>if (head-&gt;next == null) {<br>   head = null;<br>}<br>——————————————————<br>老师，我对于这个地方不是很明白，删除最后一个结点和头结点有什么关系呢？这里代码表示的是不是删除只有一个节点的链表啊？","like_count":0},{"had_liked":false,"id":195241,"user_name":"阡陌","can_delete":false,"product_type":"c1","uid":1141254,"ip_address":"","ucode":"58634836C8E03F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/06/66831563.jpg","comment_is_top":false,"comment_ctime":1585148848,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585148848","product_id":100017301,"comment_content":"总结：<br>1.理解指针或引用的含义<br>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中储存了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br><br>2警惕指针丢失和内存泄露<br>如：在p节点后插入一个新的节点x<br>p-&gt;next = x;<br>x-&gt;next = p-&gt;next;<br><br>此时指正丢失，内存泄露。<br><br>对于有些语言来说（如C），内存管理是由程序员负责的，如果没有手动释放节点对应的内存空间，就会产生内存泄漏。所以，我们插入节点时，一定要注意操作的顺序。<br><br>正确的写法是：<br>x-&gt;next = p-&gt;next;<br>p-&gt;next = x;<br><br><br>同理，删除链表节点时，也要记得手动释放内存（java等自动管理内存的语言除外）<br><br>3.利用哨兵简化实现难度<br>单链表插入：<br>x-&gt;next = p-&gt;next;<br>p-&gt;next = x;<br><br>空链表插入:<br>if (head == null){<br>    head = x;<br>}<br><br>单链表一般删除：<br>p-&gt;next = p-&gt;next-&gt;next<br><br>最后一个节点删除：<br>if (head-&gt;next == null) {<br>    head = null;<br>}<br><br><br>如果引入哨兵节点，在任何时候，不管链表是不是空，head指针都会一直指向这个哨兵节点。我们也把这种有哨兵节点的链表叫做带头链表。相反，没有哨兵节点的链表叫做不带头链表。<br><br>4.重点留意边界条件处理<br><br>要实现没有 Bug 的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。<br><br>如果链表为空时，代码是否能正常工作？<br>如果链表只包含一个结点时，代码是否能正常工作？<br>如果链表只包含两个结点时，代码是否能正常工作？<br>代码逻辑在处理头结点和尾结点的时候，是否能正常工作<br><br>5.举例画图、辅助思考<br>举例法和画图法。<br><br>6.多写多练、没有捷径<br>常见链表操作练习<br>单链表反转<br>链表中环的检测<br>两个有序的链表合并<br>删除链表倒数第 n 个结点<br>求链表的中间结点","like_count":0,"discussions":[{"author":{"id":1240790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ee/d6/19538bda.jpg","nickname":"^ _ ^","note":"","ucode":"AB388F294E64B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235129,"discussion_content":"如果引入哨兵节点，在任何时候，不管链表是不是空，head指针都会一直指向这个哨兵节点 ，请问这个怎么实现的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587022393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194944,"user_name":"雷小鸿","can_delete":false,"product_type":"c1","uid":1368897,"ip_address":"","ucode":"424DC9A532FFD7","user_header":"https://static001.geekbang.org/account/avatar/00/14/e3/41/bd0e3a04.jpg","comment_is_top":false,"comment_ctime":1585122881,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585122881","product_id":100017301,"comment_content":"习题：有点不好理解自己去试了试，第一个单链表翻转不好理解：把当前节点的下一个节点，指向当前节点的下下一个节点，把当前节点的下一个节点，指向当前节点的上一个节点，然后把前一个节点，和当前节点都往后移动一位（就是当前节点变成上一个节点，下一个节点变成当前节点）？以此循环？有点乱，后面几个其实用快慢指针相对好理解很多。打个卡加油，感觉还是理解的不对！","like_count":0},{"had_liked":false,"id":194260,"user_name":"Empty","can_delete":false,"product_type":"c1","uid":1237261,"ip_address":"","ucode":"AD6C95A503B991","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/0d/ecf81935.jpg","comment_is_top":false,"comment_ctime":1585043154,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585043154","product_id":100017301,"comment_content":"老师，在链表中存储下链表的数量会有问题吗，这样就不用便利统计链表中节点的数量了，谢谢解答","like_count":0},{"had_liked":false,"id":193546,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1584925897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584925897","product_id":100017301,"comment_content":"哨兵 想到了邻居借羊 分羊的故事","like_count":0},{"had_liked":false,"id":191855,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1584800335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584800335","product_id":100017301,"comment_content":"链表（2):如何写好链表代码<br>\t1.理解指针和引用的含义<br>\t2.警惕指针丢失和内存泄漏<br>\t3.利用哨兵简化实现难度<br>\t\t解决“边界问题”的，不直接参与业务逻辑<br>\t4.重点留意边界条件处理<br>\t\t链表为空<br>\t\t链表只包含一个节点<br>\t\t链表包含两个节点<br>\t\t处理头结点和尾结点<br>\t5.举例画图，辅助思考<br>\t6.多练习","like_count":0},{"had_liked":false,"id":191832,"user_name":"贾森安德森","can_delete":false,"product_type":"c1","uid":1071680,"ip_address":"","ucode":"7FF58646E0AD86","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/40/59de94de.jpg","comment_is_top":false,"comment_ctime":1584799200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584799200","product_id":100017301,"comment_content":"写了好长时间，最后参考别人的写出来，链表的插入、删除、反转。其他几个还没有写。继续坚持。","like_count":0},{"had_liked":false,"id":188526,"user_name":"凉人。","can_delete":false,"product_type":"c1","uid":1659177,"ip_address":"","ucode":"4DB16004A62015","user_header":"https://static001.geekbang.org/account/avatar/00/19/51/29/24739c58.jpg","comment_is_top":false,"comment_ctime":1584364873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584364873","product_id":100017301,"comment_content":"链表反转的递归和非递归方式在head头处，特容易发生死循环","like_count":0},{"had_liked":false,"id":188076,"user_name":"wholly","can_delete":false,"product_type":"c1","uid":1089235,"ip_address":"","ucode":"3CB7D06CC6C670","user_header":"https://static001.geekbang.org/account/avatar/00/10/9e/d3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1584320442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584320442","product_id":100017301,"comment_content":"1.数组与链表的概念，特点及区别需要记住理解，是面试常考题；<br>2.几种特殊的链表的应用要熟练，方法就是去实践刷题，比如双向链表，循环链表等等，有次去抖音面试(面试官就问了老师举例的linkhashmap那个例子，问的是用什么数据结构实现，然后现场用双向链表实现)，早看老师的课就好了😂<br>3.个人觉得链表学习没啥技巧，就是多练习，把老师这篇和下篇布置的作业反复练习就可以，每道题刷5遍以上，就没啥问题哈","like_count":0},{"had_liked":false,"id":187532,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1584153713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584153713","product_id":100017301,"comment_content":"打卡7","like_count":0},{"had_liked":false,"id":185340,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1583564412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583564412","product_id":100017301,"comment_content":"技巧1，指针及引用，将一个变量的地址赋值给指针意思是这个指针指向这个变量的地址，通过这个指针能找到这个变量，比如p-&gt;next=q，就是p的下一个节点保存了q的地址。<br><br>技巧2，留意出现内存泄露，插入的时候要注意顺序（小心出现环），删除的时候，记得释放内存。<br><br>技巧3，善用哨兵指针，主要用于解决边界意边界问题，哨兵指针一般指向具体的节点，而本身却没有值。<br><br>技巧4，留意边界条件的出来，比如空链表，头节点&#47;尾节点，单节点，两个节点等，在leetcode刷题的时候，要匹配数千测试用例，不留意这点的话，会比较辛苦。<br><br>技巧5，用画图来辅助思考。","like_count":0},{"had_liked":false,"id":184927,"user_name":"榛子熊猫","can_delete":false,"product_type":"c1","uid":1201574,"ip_address":"","ucode":"F059D5371AE45B","user_header":"https://static001.geekbang.org/account/avatar/00/12/55/a6/8f8e4c7e.jpg","comment_is_top":false,"comment_ctime":1583454175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583454175","product_id":100017301,"comment_content":"func reverseList(head *ListNode) *ListNode {<br>    if head == nil {<br>        return head<br>    }<br>    p := head<br>    for p.Next != nil {<br>        tmp := p.Next<br>        p.Next = p.Next.Next<br>        tmp.Next = p<br>        head = tmp<br>    }<br>    return head<br>}<br><br>啊，哪里出问题了","like_count":0},{"had_liked":false,"id":184599,"user_name":"赤云","can_delete":false,"product_type":"c1","uid":1093258,"ip_address":"","ucode":"67476D582D8B6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","comment_is_top":false,"comment_ctime":1583369607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583369607","product_id":100017301,"comment_content":"public NodeImpl revers() {<br>            if (head.next == null) {<br>                return this;<br>            }<br>            Node pre = head.next;<br>            Node cur = pre.next;<br>            pre.next = null;<br>            Node tmp;<br>            head.next = null;<br>            while (cur != null) {<br>                tmp = cur.next;<br>                cur.next = pre;<br><br>                pre = cur;<br>                cur = tmp;<br>            }<br>            head.next = pre;<br>            return this;<br>        }","like_count":0},{"had_liked":false,"id":184572,"user_name":"赤云","can_delete":false,"product_type":"c1","uid":1093258,"ip_address":"","ucode":"67476D582D8B6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","comment_is_top":false,"comment_ctime":1583339621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583339621","product_id":100017301,"comment_content":"&#47;**<br> * @author zhangshiqiang on 2020&#47;3&#47;4.<br> *  单链表添加、删除、反转<br> *&#47;<br>public class Test02 {<br>    static class NodeImpl {<br>        Node head;<br>        public NodeImpl(Node head) {<br>            this.head = head;<br>        }<br>        public NodeImpl add(Node node) {<br>            if (head.next == null) { head.next = node;return this; }<br>            Node cur = head.next;<br>            while (cur.next != null) { cur = cur.next; }<br>            cur.next = node;<br>            return this;<br>        }<br>        public NodeImpl del(Node node) {<br>            if (head.next == null) { return this; }<br>            Node cur = head.next, pre = head;<br>            while (cur != null) {<br>                if (cur.a == node.a) { pre.next = cur.next;break; } else { pre = cur;cur = cur.next; }<br>            }<br>            return this;<br>        }<br>        public void list() { Node cur = head.next;if (cur == null) { System.out.println(&quot;链表为空&quot;);return; }while (cur != null) { System.out.println(cur.a);cur = cur.next; } }<br>        public NodeImpl revers() {<br>            Node cur = head.next, newNode = new Node(0), pre;<br>            while (cur != null) {<br>                pre = cur;<br>                cur = cur.next;<br>                if (newNode.next == null) {<br>                    pre.next = null;<br>                    newNode.next = pre;<br>                } else {<br>                    pre.next = newNode.next;<br>                    newNode.next = pre;<br>                }<br>            }<br>            setHead(newNode);<br>            return this;<br>        }<br>        public void setHead(Node head) { this.head = head; }<br>    }<br>    static class Node {int a;Node next;public Node(int a) { this.a = a; }}<br>    public static void main(String[] args) {<br>        NodeImpl nodeImpl = new NodeImpl(new Node(0));<br>        nodeImpl.add(new Node(1)).add(new Node(2)).add(new Node(3)).add(new Node(4)).add(new Node(5)).add(new Node(6)).add(new Node(7));<br>        &#47;&#47; add del revers list<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":184120,"user_name":"天行者","can_delete":false,"product_type":"c1","uid":1148425,"ip_address":"","ucode":"06EC2EF3634732","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/09/4821f6ae.jpg","comment_is_top":false,"comment_ctime":1583227937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583227937","product_id":100017301,"comment_content":"redis有个哨兵模式，不过和链表这里的概念不一样， 没想到有其他地方有使用到， 哎，一直做业务开发，涉及到性能就是sql语句优化之类，加缓存，想改变下现状， 边看算法训练营，边看这个；一个思考题就要想半天，那些每天抽点时间就可以pass的，真心佩服，","like_count":0},{"had_liked":false,"id":183778,"user_name":"赵雍","can_delete":false,"product_type":"c1","uid":1316657,"ip_address":"","ucode":"5AAA284B1DA4F2","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/31/de25a65d.jpg","comment_is_top":false,"comment_ctime":1583132662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583132662","product_id":100017301,"comment_content":"请教一下，一个翻转链表的问题<br><br>例1<br>        newHead := new(Node)<br>\tnewHead = nil<br><br>\tp = head<br>\tfor p != nil {<br>\t\ttmp := p<br>\t\tp = p.Next<br><br>\t\ttmp.Next = newHead<br>\t\tnewHead = tmp<br><br>\t}<br><br>例2<br><br>newHead := new(Node)<br>\tnewHead = nil<br><br>\tp = head<br>\tfor p != nil {<br>\t\ttmp := p<br><br>\t\ttmp.Next = newHead<br>\t\tnewHead = tmp<br><br>\t\tp = p.Next<br><br>\t}<br><br>例1 为什么与 例2 的结果不同了(也就是为什么例2不能翻转链表)  ？？？","like_count":0},{"had_liked":false,"id":183681,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1583115809,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1583115809","product_id":100017301,"comment_content":"我一般把链表转成数组操作","like_count":0},{"had_liked":false,"id":183012,"user_name":"JDY","can_delete":false,"product_type":"c1","uid":1848474,"ip_address":"","ucode":"4B6F55332BE6DC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","comment_is_top":false,"comment_ctime":1582911329,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582911329","product_id":100017301,"comment_content":"我问一下比较基础的问题吧，我们在链表反转的时候，传入的head，在函数的作用域内是第一个节点还是第二个节点？","like_count":0,"discussions":[{"author":{"id":2407037,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ba/7d/fcd6acb0.jpg","nickname":"明月清风","note":"","ucode":"520F0F17B7D47F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340556,"discussion_content":"我写的含头结点的链表会有问题，应该默认是不含头结点的第一个结点吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610033846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182706,"user_name":"begin to learn","can_delete":false,"product_type":"c1","uid":1793265,"ip_address":"","ucode":"EAADFDB0E3DA59","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3Nr2lbiasVmdbia1Zub4OtxTBhUPBkhgWvWTVEoZ509eTRlP88OribVN59YEl06xEyD2ojf5icS7rzct44icDLhWJxA/132","comment_is_top":false,"comment_ctime":1582853773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582853773","product_id":100017301,"comment_content":"老师，链表插入那块的内存泄漏不太理解，可以帮忙解答一下么？","like_count":0},{"had_liked":false,"id":181824,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1582640292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582640292","product_id":100017301,"comment_content":"这周再把课后5个练习题做一下","like_count":0},{"had_liked":false,"id":179164,"user_name":"晴天","can_delete":false,"product_type":"c1","uid":1121142,"ip_address":"","ucode":"2FF5257193FC0A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1b/76/e927da9f.jpg","comment_is_top":false,"comment_ctime":1581930287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581930287","product_id":100017301,"comment_content":"  &#47;&#47;无头结点的链表翻转<br>    public Node inverseLinkList(Node p){<br><br>        Node pre = null;<br>        Node r = head;<br>        System.out.println(&quot;z---&quot; + r.data);<br>        Node next= null;<br>        while(r !=p){<br>            next = r.next;<br><br>            r.next = pre;<br>            pre = r;<br>            r = next;<br>        }<br><br>        r.next = pre;<br>        &#47;&#47;　返回左半部分的中点之前的那个节点<br>        &#47;&#47;　从此处开始同步像两边比较<br>        return r;<br><br>    }<br><br>Github 示例给出的代码，这个是个啥意思啊，一般来说参数应该是 head ，所有 while 循环还能执行吗？<br><br>","like_count":0},{"had_liked":false,"id":178327,"user_name":"云中鹤","can_delete":false,"product_type":"c1","uid":1021914,"ip_address":"","ucode":"6F9F885E55B870","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/da/bc97c787.jpg","comment_is_top":false,"comment_ctime":1581661782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581661782","product_id":100017301,"comment_content":"本篇文章中第一个代码片段中的第二行代码有误，<br>文章中的代码：x-&gt;next = p-&gt;next;<br>我觉得应该是：x-&gt;next = b-&gt;next;<br>不知道对不对，请大神指教！","like_count":0},{"had_liked":false,"id":178231,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1581635335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581635335","product_id":100017301,"comment_content":"两段代码，第一段没有哨兵，通过比较数组中当前元素下标与数组长度，来保证便利完了整个数组，并且没有越界。<br><br>第二段有哨兵，哨兵放在最后一个。<br>首先将哨兵置为数组最后一个元素，所以通过while循环能保证遍历完数组，不越界。<br>其次，恢复数组。<br>然后，1)判断i的值，如果等于最后一个元素下标，则整个数组0……n-2都无待查元素，查找失败。注意这里需要提前判断元素n-1，这样才能保证不漏。<br>2)若i不等于最后一个元素下标，说明查找过程中出现过key值，此时i值即为key值下标，返回","like_count":0},{"had_liked":false,"id":176962,"user_name":"王jojo","can_delete":false,"product_type":"c1","uid":1812840,"ip_address":"","ucode":"1ABE7FA2614F86","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/68/ec442a70.jpg","comment_is_top":false,"comment_ctime":1581237386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581237386","product_id":100017301,"comment_content":"看了之后 感觉老师总结的很好 尤其是检查边界条件那里","like_count":0},{"had_liked":false,"id":176834,"user_name":"Colin","can_delete":false,"product_type":"c1","uid":1245861,"ip_address":"","ucode":"BE31A244CFC696","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/a5/3b777a1d.jpg","comment_is_top":false,"comment_ctime":1581176862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581176862","product_id":100017301,"comment_content":"看了那个哨兵的代码二，不禁感叹，妙啊！有意思","like_count":0},{"had_liked":false,"id":175934,"user_name":"am","can_delete":false,"product_type":"c1","uid":1327015,"ip_address":"","ucode":"CA48DB75D00F8E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/a7/56c9ecbe.jpg","comment_is_top":false,"comment_ctime":1580887728,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580887728","product_id":100017301,"comment_content":"老师您好，有个问题想请教下您！<br>您的代码中，判断一个变量是否为空，都是以&quot;nil == 变量名&quot;的形式，想问一下这样和&quot;变量名 == nil&quot;有啥区别吗？","like_count":0},{"had_liked":false,"id":175912,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1580884270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580884270","product_id":100017301,"comment_content":"写链表代码没有捷径，一定要多练，停下学习的脚步，把这一讲的例子全部用Java代码实现一遍。","like_count":0},{"had_liked":false,"id":174373,"user_name":"进击的小明","can_delete":false,"product_type":"c1","uid":1737846,"ip_address":"","ucode":"7C9A774C504177","user_header":"https://static001.geekbang.org/account/avatar/00/1a/84/76/6091523d.jpg","comment_is_top":false,"comment_ctime":1580183448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580183448","product_id":100017301,"comment_content":"多写多练！","like_count":0},{"had_liked":false,"id":173372,"user_name":"king5699","can_delete":false,"product_type":"c1","uid":1209523,"ip_address":"","ucode":"0D5D851084A6E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/74/b3/b96a4ed7.jpg","comment_is_top":false,"comment_ctime":1579514205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579514205","product_id":100017301,"comment_content":"老是您好，我是一名Python程序员，看了这一讲中的哨兵案例代码二中，感觉有个疑问：<br>如果入参a 列表中有两个相同数值的元素，并且其中一个还在数组末尾，比如{4,2,6,5,9,6}，key=6，返回的结果似乎就是末尾的下标5，而不是2。<br>在Python中有个类似的内置函数index，他总是返回目标在数组中第一次出现的下标。如果我想实现这个效果，需要对代码二调整一下。<br>1. 将哨兵添加到a的末尾（对于固定长度且满了的数组需要拷贝到新数组），不需要用tmp保存原始的末尾值和提前比较操作。<br>2.while循环结束后，去掉a末尾的哨兵。如果i==n，则返回-1；否则返回i。<br>这样做可能会导致数据的拷贝操作，不知是否可取。<br>","like_count":0},{"had_liked":false,"id":171311,"user_name":"王凯","can_delete":false,"product_type":"c1","uid":1746317,"ip_address":"","ucode":"3A8FE67E83E73F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a5/8d/839becc5.jpg","comment_is_top":false,"comment_ctime":1578900663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578900663","product_id":100017301,"comment_content":"动手能力还是太差，不知道怎么写，道理都懂","like_count":0},{"had_liked":false,"id":170651,"user_name":"小宽宽与他的白日梦","can_delete":false,"product_type":"c1","uid":1618781,"ip_address":"","ucode":"C16F595EE4E11A","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/5d/a97e5045.jpg","comment_is_top":false,"comment_ctime":1578652037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578652037","product_id":100017301,"comment_content":"老师，我看您的思维导图上还有一个“静态链表”这个还没有讲到～","like_count":0},{"had_liked":false,"id":169500,"user_name":"王岩","can_delete":false,"product_type":"c1","uid":1022558,"ip_address":"","ucode":"434F1A28A7B54C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/5e/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1578366347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578366347","product_id":100017301,"comment_content":"哨兵结点有点像初中几何里辅助线呢，哈哈哈，不参与逻辑，但是会把问题简单化，添加辅助线的缺点就是降低了原有图形的可读性","like_count":0},{"had_liked":false,"id":167944,"user_name":"毛玉娇","can_delete":false,"product_type":"c1","uid":1249192,"ip_address":"","ucode":"BC0F0FEEEAD5DD","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/a8/5bec6811.jpg","comment_is_top":false,"comment_ctime":1577967260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577967260","product_id":100017301,"comment_content":"刚写链表反转，发现自己写的其实是指针丢失了","like_count":0},{"had_liked":false,"id":167229,"user_name":"小夏","can_delete":false,"product_type":"c1","uid":1110755,"ip_address":"","ucode":"D87444ADC28C6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/e3/c1a88a64.jpg","comment_is_top":false,"comment_ctime":1577722795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577722795","product_id":100017301,"comment_content":"刚开始在看代码二的时候，这个i是怎么知道停在n-1的位置的，他怎么不会越界。再仔细看一遍注释。卧槽，怎么会有这么精妙的想法，用机械的递增和设置边界的方法避免了一次比大小。","like_count":0},{"had_liked":false,"id":166554,"user_name":"along","can_delete":false,"product_type":"c1","uid":1118419,"ip_address":"","ucode":"0F44495219E0BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/d3/157068af.jpg","comment_is_top":false,"comment_ctime":1577497421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577497421","product_id":100017301,"comment_content":"关于倒数第n个节点，如果是单向链表，因为有链表的长度，实际上只需要遍历链表长度-n-1次就可以了，可能多了一个变量。","like_count":0},{"had_liked":false,"id":165281,"user_name":"bolo","can_delete":false,"product_type":"c1","uid":1357170,"ip_address":"","ucode":"7C91CEA2F1970E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/72/bb10f3d0.jpg","comment_is_top":false,"comment_ctime":1577192780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577192780","product_id":100017301,"comment_content":"看完后，我看了python版的链表实现。第一次看一点都不懂，<br>然后跟着敲了一遍，对着注释看，慢慢的能看懂了。 加油ヾ(◍°∇°◍)ﾉﾞ","like_count":0},{"had_liked":false,"id":164934,"user_name":"耀","can_delete":false,"product_type":"c1","uid":1634462,"ip_address":"","ucode":"3692BEC242A399","user_header":"https://static001.geekbang.org/account/avatar/00/18/f0/9e/cf6570f7.jpg","comment_is_top":false,"comment_ctime":1577113481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577113481","product_id":100017301,"comment_content":"之前遇到一个问题，有一类配置的存储结构相同，又比较多，使用链表存储。多个线程对他操作，有对他遍历以便显示，过程中有放权，同时又有线程对其中的节点进行删除。有很小的概率会显示配置的过程中，访问已经删除的节点。但是显示的过程有需要大约十几秒，又不能加锁，有什么好的解决办法呢？","like_count":0},{"had_liked":false,"id":164571,"user_name":"耀","can_delete":false,"product_type":"c1","uid":1634462,"ip_address":"","ucode":"3692BEC242A399","user_header":"https://static001.geekbang.org/account/avatar/00/18/f0/9e/cf6570f7.jpg","comment_is_top":false,"comment_ctime":1577028952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577028952","product_id":100017301,"comment_content":"第一次理解指针是在调试的时候，突然意识到，根本没有箭头，有的只是地址.所谓的箭头只是寻址。<br>如下A指向B，在计算机内部分看到是这样：假设AB都是整数，32位的系统<br>【A】【Anext】 ----&gt;【B】【Bnext】<br>    地址   ：内容<br>0x11111110:A<br>0x11111114:0x22222220(所谓的Anext)<br>........<br>0x22222220:B<br>0x22222224:0x12312312(所谓的Bnext)<br>这是计算机内部真是的表述。","like_count":0},{"had_liked":false,"id":164527,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1577021079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577021079","product_id":100017301,"comment_content":"看了下github中的代码，javascript中单链表好像就是带头链表，java中的单链表不是带头链表。","like_count":0},{"had_liked":false,"id":164409,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1576980487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576980487","product_id":100017301,"comment_content":"在技巧二中，第一步和第二步调换顺序就可以了？<br><br>x-&gt;next = p-&gt;next;  <br>p-&gt;next = x; <br><br>第一步，由于p指针指向a节点，所以p-&gt;next 指向的是b节点。 所以x-&gt;next指向的是b节点。<br><br>第二步，p-&gt;next 指向x节点。 <br><br>本来想问下的因为第一步<br>的，看的时候没有理解，⊙∀⊙！ 这样自己写一下居然没有疑惑了！😂","like_count":0},{"had_liked":false,"id":161875,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1576387741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576387741","product_id":100017301,"comment_content":"<br>p-&gt;next = x;  &#47;&#47; 将 p 的 next 指针指向 x 结点；<br>x-&gt;next = p-&gt;next;  &#47;&#47; 将 x 的结点的 next 指针指向 b 结点；<br><br>第二句代码啥意思啊 没看懂","like_count":0},{"had_liked":false,"id":161114,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1576121045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576121045","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":160882,"user_name":"无始","can_delete":false,"product_type":"c1","uid":1758577,"ip_address":"","ucode":"B96982583496B1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d5/71/308fe8a4.jpg","comment_is_top":false,"comment_ctime":1576053365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576053365","product_id":100017301,"comment_content":"https:&#47;&#47;github.com&#47;JinYuan91&#47;javabasis&#47;blob&#47;master&#47;java-basis-datastructure&#47;src&#47;main&#47;java&#47;com&#47;java&#47;basis&#47;datastructure&#47;linkedlist&#47;MyLinkedList.java<br>实现了一个简单的单向链表。<br>反转的话我的实现里也可以实现，从尾部获取添加到新的链表中。","like_count":0},{"had_liked":false,"id":160531,"user_name":"流星雨","can_delete":false,"product_type":"c1","uid":1233834,"ip_address":"","ucode":"8F55C8FE834C51","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/aa/ba6cb677.jpg","comment_is_top":false,"comment_ctime":1575970133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575970133","product_id":100017301,"comment_content":"以前也画图，但是还是能不明白，现在把举例法和画图法结合起来试试😄😄🤗🤗🤗","like_count":0},{"had_liked":false,"id":159298,"user_name":"李朋远","can_delete":false,"product_type":"c1","uid":1241782,"ip_address":"","ucode":"A8C1AEDD10973F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/b6/d3afc1ec.jpg","comment_is_top":false,"comment_ctime":1575596399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575596399","product_id":100017301,"comment_content":"难道只有我觉得代码2里面的while循环没有结束条件是个死循环吗？","like_count":0},{"had_liked":false,"id":159117,"user_name":"3_3","can_delete":false,"product_type":"c1","uid":1761508,"ip_address":"","ucode":"E3803D20F1669F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e0/e4/9279d8d0.jpg","comment_is_top":false,"comment_ctime":1575540074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575540074","product_id":100017301,"comment_content":"请问老师 如果我在stack上新建两个链表当我合并两个链表然后离开那两个链表的作用域后他们的destructor会delete掉所有节点于是那两个链表由于合并了 会发生重复delete 怎么办？","like_count":0},{"had_liked":false,"id":158900,"user_name":"ohabit","can_delete":false,"product_type":"c1","uid":1489717,"ip_address":"","ucode":"E312DDFBFB8A99","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq7VcYYnvMqodxEh2amdxSk8OXKT6ETqVcrAuhlpQ3gmczoQf6TqCEXZgsFq19WgPNO7YbXj4sUzA/132","comment_is_top":false,"comment_ctime":1575473000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575473000","product_id":100017301,"comment_content":"代码二应该可以不替换最后一个元素改用添加一个元素吧，这样就不用暂存最后一个元素也能达到同样效果。","like_count":0},{"had_liked":false,"id":158538,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1575416182,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575416182","product_id":100017301,"comment_content":"总结关于链表代码的几项注意：<br>插入时，注意操作顺序<br>删除时，不忘释放内存<br>编写后，检查边界条件（链表长度0&#47;1&#47;2）<br>特别地，引入哨兵结点（插首&#47;删尾）<br>举例画图，辅助思考<br>多写多练，没有捷径","like_count":0},{"had_liked":false,"id":158479,"user_name":"小遥子","can_delete":false,"product_type":"c1","uid":1754666,"ip_address":"","ucode":"E2CCF654F4F9D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c6/2a/e6281f10.jpg","comment_is_top":false,"comment_ctime":1575380878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575380878","product_id":100017301,"comment_content":"老师，请教一下问什么使用＜会比!＝要慢呀？这里不是很理解~","like_count":0},{"had_liked":false,"id":158474,"user_name":"子铭","can_delete":false,"product_type":"c1","uid":1156419,"ip_address":"","ucode":"221383803E5732","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/43/d32dd35a.jpg","comment_is_top":false,"comment_ctime":1575379538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575379538","product_id":100017301,"comment_content":"p-&gt;next 指针在完成第一步操作之后，已经不再指向结点 b 了，而是指向结点 x。第 2 行代码相当于将 x 赋值给 x-&gt;next，自己指向自己。因此，整个链表也就断成了两半，从结点 b 往后的所有结点都无法访问到了。这一段感觉写错了，明明p就没有指向过b，它原来指向的是a","like_count":0},{"had_liked":false,"id":158006,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1575296932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575296932","product_id":100017301,"comment_content":"因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。  问题：插入插座可以用相同的代码了，删除呢？删除最后一个节点？","like_count":0},{"had_liked":false,"id":157989,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1575295509,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575295509","product_id":100017301,"comment_content":"一：理解指针或引用的含义<br>\t（1）将某个变量赋值给指针，实际就是将这个变量的地址赋值给指针，或者反过来说指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br><br>二：警惕指针丢失和内存泄漏<br>\t（1）插入结点时，一定要注意操作的顺序<br>\t（2）删除链表结点时，也一定要记得手动释放内存空间。<br><br>三：利用哨兵简化实现难度<br>\t由于：针对链表的插入，删除操作，需要对插入第一个节点和删除最后一个节点的情况进行特殊处理。所以引入哨兵节点，就不需要特殊处理这两个节点。<br><br>\t哨兵，用于解决“边界问题”的，不直接参与业务逻辑。<br>\t\t哨兵结点，在任何时候，不管链表是否为空，head指针都会一直指向这个哨兵结点。我们把这种有哨兵结点的链表叫做带头链表。相反，没有哨兵结点的链表就叫作不带头链表。<br><br>\t四：重点留意边界条件处理<br>\t\t边界条件：<br>\t\t1，若链表为空，代码是否能正常工作<br>\t\t2，若链表只包含一个节点，代码是否能正常工作<br>\t\t3，若链表只包含两个节点时，代码是否能正常工作<br>\t\t4，代码逻辑在处理头结点和尾结点时，是否能正常工作<br>\t五：举例画图，辅助思考<br>\t六：多写多练，没有捷径<br>\t\t1，单链表反转<br>\t\t2，链表中环的检测<br>\t\t3，两个有序的链表合并<br>\t\t4，删除链表倒数第n个结点<br>\t\t5，求链表的中间结点<br>","like_count":0},{"had_liked":false,"id":157928,"user_name":"Scarecrow","can_delete":false,"product_type":"c1","uid":1605158,"ip_address":"","ucode":"76D783B5B32DE1","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/26/946f58e2.jpg","comment_is_top":false,"comment_ctime":1575283907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575283907","product_id":100017301,"comment_content":"恩人啊！！！！","like_count":0},{"had_liked":false,"id":157535,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1575188732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575188732","product_id":100017301,"comment_content":"写链表代码：<br>1、指针或引用的含义：将某个变量赋值给指针，就是将这个变量的内存地址赋值给指针；也就是指针中存放了这个变量的内存地址，指向了变量，通过指针就能找到这个变量。<br>p-&gt;next = q ，p节点的next指针中存放的是q节点的内存地址<br>p-&gt;next = p-&gt;next-&gt;next ，p节点的next指针中存放的是p节点下下个节点的内存地址<br>2、警惕指针丢失和内存泄漏，<br>p-&gt;next = x;  \t\t &#47;&#47; 将p的next指针指向x结点；<br>x-&gt;next = p-&gt;next;  &#47;&#47; 将x的结点的next指针指向b结点；<br>以上两句相当于 x-&gt;next = x，自己指向自己，造成内存泄漏<br>3、哨兵简化实现难度，不用单独考虑边界节点的情况；带哨兵节点的链表叫带头链表，不带哨兵节点的链表叫不带头链表<br>4、重点留意边界条件处理：空链表，1个节点，2个节点和头节点、尾节点的处理<br>经典链表操作：单链表反转、链表中环的检测、两个有序的链表合并、删除链表倒数第N个节点、求链表的中间节点","like_count":0},{"had_liked":false,"id":157428,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1575160993,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1575160993","product_id":100017301,"comment_content":"思维导图：https:&#47;&#47;mubu.com&#47;doc&#47;kTZcbW2Pu0<br><br>思考题：<br>哨兵的思想，是消除了操作对象中的边界风险，这样操作对象的时候，不需要再对边界进行各种检查。<br>对于各种常见的数据结构，我们都可以通过哨兵的方式来简化异常检查，例如树、图。","like_count":0},{"had_liked":false,"id":157270,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1575100968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575100968","product_id":100017301,"comment_content":"「但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理」感觉这里有点问题，关键点应该是删除头节点和其它的删除不一样，而不是删除链表中的最后一个节点","like_count":0},{"had_liked":false,"id":157134,"user_name":"王振华 程序员","can_delete":false,"product_type":"c1","uid":1131957,"ip_address":"","ucode":"31BB337642B882","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","comment_is_top":false,"comment_ctime":1575038997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575038997","product_id":100017301,"comment_content":"还有一个更复杂的，也是我们写链表代码经常会用到的：p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p 结点的 next 指针存储了 p 结点的下下一个结点的内存地址。<br><br>请问老师，这里的“下下一个节点”，是多打了一个字吗？是指的下一个结点，还是下下一个节点？<br>如果是打错了字，最好还是请编辑改一下。因为这门课本来就很难理解，所以就不要在这方面增加难度了，我智商已经不够用了，哈哈。<br>如果不是打错字，能不能再解释一下？","like_count":0},{"had_liked":false,"id":157111,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1575033430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575033430","product_id":100017301,"comment_content":"打卡Day5：<br>1、日期：<br>* 2019年11月29日<br><br>2、是什么<br>* 指针的含义：指针存储了指向存储变量的内存地址，通过指针可以找到变量<br>* 内存泄漏（Memory Leak）：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。 <br>3、怎么更好的写链表代码<br>* 警惕指针丢失和内存泄漏，确保释放内存空间 <br>* 使用哨兵简化实现难度，增加哨兵简化首尾节点插入删除时的额外处理<br>* 重点检查边界条件处理，常见选择正常情况、边界首尾情况、特殊内容的情况、空的情况 <br>* 举例画图，减少占用大脑的内存<br>* 多写多练，刷到手熟  <br>4、写链表的技巧，在项目管理场景下的思考<br>*  预防：项目风险checklist，根据项目类型通过历史经验总结常见的风险点，在项目推进过程中检查，并同时加上经验判断，可以减少一些问题的发生 <br>5、对应项目管理的关键点：<br>* 预防、借助工具、经验","like_count":0},{"had_liked":false,"id":157071,"user_name":"Ronnyz","can_delete":false,"product_type":"c1","uid":1488280,"ip_address":"","ucode":"9F34527B1D343D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","comment_is_top":false,"comment_ctime":1575024487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575024487","product_id":100017301,"comment_content":"1.指针和引用都是存储所指对象的内存地址；<br>2.在节点的插入操作上，需要注意顺序；<br>3.哨兵结点的存在可以将插入第一个结点和删除最后一个节点的操作统一；<br>4.用边界条件检查链表代码是否正确；<br>5.举例和画图辅助理解；","like_count":0},{"had_liked":false,"id":156982,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1575008558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575008558","product_id":100017301,"comment_content":"p-&gt;next = p-&gt;next-&gt;next; 这里有疑问。。。。<br>虽然我把p节点的next指针 从下一个节点 转向了 下下节点；<br>但是！原下节点的next 依然 指向了 原下下节点啊？这不会导致泄露吗？<br>感觉上 上面的操作 是把 下节点 从链表中剔除了，但是 被剔除的这个元素的next 依旧指向了 原链表，<br>有点怪怪的。<br>因为 上一节说了 指针丢失 导致的内存泄漏问题，这里是多了一个指针，所以 这里蒙了。。。<br>求解惑<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":156968,"user_name":"testerman","can_delete":false,"product_type":"c1","uid":1473556,"ip_address":"","ucode":"8DDC62262FA5DE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoDbVIx6bXBFTCDtBUPXzIJzEiaSCfjP7wRA95dGIAGJRnOCutFcIRFkEaUqrEF2fE0HJ1WaFsKn8w/132","comment_is_top":false,"comment_ctime":1575004209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575004209","product_id":100017301,"comment_content":"哨兵<br>1.看下最后一个点有没有坑，有就找到了<br>2.在最后一个点上挖个坑<br>3.从头遍历链，看下有没有坑<br>4.有坑再看下是不是最后一个点<br>5不是就说明确实有坑<br>6.最后把最后那个坑填上原来的土","like_count":0},{"had_liked":false,"id":156897,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1574992872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574992872","product_id":100017301,"comment_content":"哨兵主要是为了简化边界条件的处理。比如可以用于堆的创建和插入，在创建时定义一个哨兵存放大于堆中所有可能的元素的值位于下标0的位置，堆元素从下标1开始存放，在插入的时候用哨兵判断插入的元素比任何元素都大，而不用额外判定下标大于1。","like_count":0},{"had_liked":false,"id":156848,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1574988194,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1574988194","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":156371,"user_name":"Dana","can_delete":false,"product_type":"c1","uid":1241142,"ip_address":"","ucode":"FE94F5E3987DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/36/020428c7.jpg","comment_is_top":false,"comment_ctime":1574862967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574862967","product_id":100017301,"comment_content":"改成PHP了 不过第二段 代码 看着确实有点绕<br><br>&#47;&#47; 数组A 查找key,返回key 所在位置<br>&#47;&#47; 其中，n表示数组A的长度<br>function findOne(array $array,int $n,int $key)<br>{<br>\t&#47;&#47; 处理边界问题，如果a为空，或者n&lt;=0,说明数组中没有数据，就不用whilel<br>\tif($array == null || $n &lt;= 0)<br>\t{<br>\t\treturn -1;<br>\t}<br><br>\t$i = 0;<br>\twhile($i &lt; $n)<br>\t{<br>\t\tif($array[$i] == $key)<br>\t\t{<br>\t\t\treturn $i;<br>\t\t}<br>\t\t++$i;<br>\t}<br><br>\treturn -1;<br>}<br><br>function findTwo(array $array,int $n,int $key)<br>{<br>\tif($array == null || $n &lt;= 0)<br>\t{<br>\t\treturn -1;<br>\t}<br><br>\tif($array[$n -1] == $key)<br>\t{<br>\t\treturn $n -1;<br>\t}<br><br>\t$tmp = $array[$n -1];<br>\t$array[$n -1] = $key;<br><br>\t$i = 0;<br>\twhile($array[$i] != $key)<br>\t{<br>\t\t++$i;<br>\t}<br><br>\t&#47;&#47; 恢复原来的值<br>\t$array[$n -1] = $tmp;<br><br>\tif($i == $n - 1){<br>\t\treturn -1;<br>\t}else{<br>\t\treturn $i;<br>\t}<br><br>}","like_count":0},{"had_liked":false,"id":155843,"user_name":"在下令狐冲","can_delete":false,"product_type":"c1","uid":1178651,"ip_address":"","ucode":"6228893CCF8C09","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/1b/7fa5823c.jpg","comment_is_top":false,"comment_ctime":1574765474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574765474","product_id":100017301,"comment_content":"链表中环的检测、删除链表倒数第 n 个结点、求链表的中间结点这三个给链表添加一个长度属性贼方便","like_count":0},{"had_liked":false,"id":155617,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1574729323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574729323","product_id":100017301,"comment_content":"哨兵的方法在写代码的时候很巧妙，看完以后觉得很棒，在高性能场景很实用","like_count":0},{"had_liked":false,"id":155008,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1574616350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574616350","product_id":100017301,"comment_content":"问个小白问题，node a=b；然后改变了b，a会跟着变吗？","like_count":0},{"had_liked":false,"id":153989,"user_name":"psllin","can_delete":false,"product_type":"c1","uid":1748729,"ip_address":"","ucode":"D3701911FCECE3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ae/f9/c7ccb6ab.jpg","comment_is_top":false,"comment_ctime":1574343467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574343467","product_id":100017301,"comment_content":"王争老师，问个比较基础的问题——p-&gt;next = x; &#47;&#47; 将p的next指针指向x结点；x-&gt;next = p-&gt;next; &#47;&#47; 将x的结点的next指针指向b结点；这两段代码的顺序先后对结果有没有什么影响?按照我的理解是反正插入一个新的节点只是将它们的p-&gt;next指向改变一下","like_count":0},{"had_liked":false,"id":153521,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574252450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574252450","product_id":100017301,"comment_content":"我是很烦if else 的，<br>这句给大脑带来了很多开销，建立必要的抽象，然后将特殊转为一般，就是非常好的套路。oo 里有个原则，针对抽象而不是具体实现开发。<br>所以，哨兵  明显的属通用类套路。","like_count":0},{"had_liked":false,"id":153518,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574251789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574251789","product_id":100017301,"comment_content":"晚上回家写","like_count":0},{"had_liked":false,"id":153429,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1574234434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574234434","product_id":100017301,"comment_content":"可以再leetcode上多练练  练多了就很好写了","like_count":0},{"had_liked":false,"id":152292,"user_name":"different7","can_delete":false,"product_type":"c1","uid":1690579,"ip_address":"","ucode":"913E5051F12C51","user_header":"https://static001.geekbang.org/account/avatar/00/19/cb/d3/4e25302f.jpg","comment_is_top":false,"comment_ctime":1573962284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573962284","product_id":100017301,"comment_content":"我有几个问题，非常困惑<br>1.警惕指针丢失的第一个图里，p是干嘛用的，先说指向a,后面又说不再指向b了(原本指向b？)<br>x-&gt;next=a-&gt;next；<br>a-&gt;next=x;<br>应该是这样吧<br>2.看有博客说链表有带头结点和不带头结点之分（你应该默认都有头结点）。我认为最好把头节点和第一个节点区分开，如果有头结点，可以存储链表长度之类的数据也可以不存储，头结点之后就是第一个节点。<br>3.前面说head是头节点，那么头结点指针不是head-&gt;next吗？后面又说heads是头结点指针，我都有点混乱了。。。<br>4.空链表到底有没有头结点呢？？如果head是头结点，head=null不是应该代表头结点数据为空吗，head-&gt;next=null才代表空链表（带有头结点）<br>5.为什么是头结点记录链表基地址，不应该是头指针吗？？？","like_count":0},{"had_liked":false,"id":152160,"user_name":"Wall.E~涛","can_delete":false,"product_type":"c1","uid":1739254,"ip_address":"","ucode":"5A9B9992F32CEF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/f6/0f066340.jpg","comment_is_top":false,"comment_ctime":1573895018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573895018","product_id":100017301,"comment_content":"    &#47;**<br>     * 单链表反转<br>     * 思路：<br>     * 标记链表初始首个节点<br>     * 删除其后节点<br>     * 将删除的节点插入到链表首节点<br>     * 复杂度分析：空间复杂度0<br>     * 时间复杂度O(n)<br>     *&#47;<br>    public void reverse() {<br>        if (head == null) {<br>            return;<br>        }<br>        &#47;&#47; 初始首节点<br>        Node&lt;E&gt; originalHead = head;<br>        Node&lt;E&gt; next = null;<br>        while ((next = originalHead.next) != null) {<br>            &#47;&#47; 删除next<br>            originalHead.next = next.next;<br><br>            &#47;&#47; 插入到第一位<br>            next.next = head;<br><br>            &#47;&#47; 更新head<br>            head = next;<br>        }<br>    }","like_count":0},{"had_liked":false,"id":151288,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1573695406,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573695406","product_id":100017301,"comment_content":"第五个方法是我经常使用的，用具体的例子来实现","like_count":0},{"had_liked":false,"id":151266,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1573692989,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573692989","product_id":100017301,"comment_content":"void insertTail(String str){<br>        Node node = new Node(str,null);<br>        if(head==null){<br>            System.out.println(&quot;头节点为空&quot;);<br>            head=node;<br>        }else{<br>            Node q = head;<br>            while(q.next != null){<br>                q = q.next;<br>            }&#47;&#47;  node.next =q.next; 老师的代码<br>            &#47;&#47;node.next = null; 简化的，因为插入到的是最后的节点，所以q.next =null，而且我感觉while 也可以去掉，不知道对不对<br>            q.next = node;<br>        }<br>    }","like_count":0},{"had_liked":false,"id":148948,"user_name":"polly","can_delete":false,"product_type":"c1","uid":1496444,"ip_address":"","ucode":"E990ACF1CC31DF","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/7c/848bdbc4.jpg","comment_is_top":false,"comment_ctime":1573116106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573116106","product_id":100017301,"comment_content":"打卡 在车站 不方便写练习题，记住补上","like_count":0},{"had_liked":false,"id":148946,"user_name":"BerryMew","can_delete":false,"product_type":"c1","uid":1013075,"ip_address":"","ucode":"E6CDD211617FF9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/53/76281fc3.jpg","comment_is_top":false,"comment_ctime":1573115170,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573115170","product_id":100017301,"comment_content":"测试了5亿数据对比，两个例子运算时间差距只有几毫秒，而且不一定后者一定快（因为有cpu时间片这个事），现在电脑，新款的i7处理器6核12线程2.2GHz默频，理论上每秒可以处理2.2*12*10^9个指令（约264亿），对与多一条判断在java字节码中只是多了一条if_icmpne字节指令，如果要看出来1秒的性能差距需要准备264亿数据......","like_count":0,"discussions":[{"author":{"id":1634403,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f0/63/25f003ad.jpg","nickname":"小二","note":"","ucode":"68B8AE02A87A57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58061,"discussion_content":"秀😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574650772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148715,"user_name":"JAMES","can_delete":false,"product_type":"c1","uid":1170796,"ip_address":"","ucode":"63015120144DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/6c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1573053146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573053146","product_id":100017301,"comment_content":"2019&#47;11&#47;06 didi","like_count":0},{"had_liked":false,"id":148620,"user_name":"李志","can_delete":false,"product_type":"c1","uid":1734039,"ip_address":"","ucode":"BC90FAC57D3440","user_header":"https://static001.geekbang.org/account/avatar/00/1a/75/97/598c9f0e.jpg","comment_is_top":false,"comment_ctime":1573039166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573039166","product_id":100017301,"comment_content":"这不是说，基本都是用java写代码的？我看不懂c啊","like_count":0},{"had_liked":false,"id":146992,"user_name":"Elza Wong","can_delete":false,"product_type":"c1","uid":1243487,"ip_address":"","ucode":"F84D58E873E0D0","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/5f/60689bb3.jpg","comment_is_top":false,"comment_ctime":1572752631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572752631","product_id":100017301,"comment_content":"今天花了半天的时间，写了下这5个链表操作的代码，感觉很好，希望自己能坚持下去！不只是听，看，更多的是动手去实际的写代码，加深理解。","like_count":0},{"had_liked":false,"id":145552,"user_name":"时之沙","can_delete":false,"product_type":"c1","uid":1346221,"ip_address":"","ucode":"E01FB59AE6ABB9","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/ad/6e6275bd.jpg","comment_is_top":false,"comment_ctime":1572314621,"is_pvip":false,"replies":[{"id":"56459","content":"带头的方便写代码，但浪费一个存储空间。没有哪个比哪个用的多，看自己和需求吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487472,"ip_address":"","comment_id":145552,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572314621","product_id":100017301,"comment_content":"争哥，链表那个有两种，一个是带头结点的，一个是不带头结点的，这两个有什么区别？各自的优势都有啥？一般哪个用的比较多？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472461,"discussion_content":"带头的方便写代码，但浪费一个存储空间。没有哪个比哪个用的多，看自己和需求吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350906,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/fa/40aab688.jpg","nickname":"以风","note":"","ucode":"1E3845386AE2BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65318,"discussion_content":"带头的和哨兵有什么区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574995124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145211,"user_name":"Geek_guo","can_delete":false,"product_type":"c1","uid":1517196,"ip_address":"","ucode":"E70AB1A1E65F67","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/239h30GxsIAralcfSmrp8QvFzyNA7icEDIbhBQ6K0tr6GwtG3ia0aUCcNo2SfoTlNWtGFVgcFwFjicaGdK6Uau3cQ/132","comment_is_top":false,"comment_ctime":1572230418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572230418","product_id":100017301,"comment_content":"这几个练习题 我抽空儿练习了一周时间，现在感觉确实清晰一点了，打算用一年的时间把这个搞定，让培训班的我也能不怕算法和数据结构","like_count":0},{"had_liked":false,"id":144968,"user_name":"黄振宇","can_delete":false,"product_type":"c1","uid":1686397,"ip_address":"","ucode":"976BC7B46DA419","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/7d/26340713.jpg","comment_is_top":false,"comment_ctime":1572143749,"is_pvip":false,"replies":[{"id":"55977","content":"带头链表里的头啥都不存的，就相当于一个哨兵，只是为了简化编程用的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572230064,"ip_address":"","comment_id":144968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572143749","product_id":100017301,"comment_content":"老师，带头链表头中的数据一般存放什么？我随便new一个数据地址，每次查看都不一样，如果固定分配一个值是不是也不太好。而且如果带头节点的有序链表合并操作起来也特别麻烦呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472191,"discussion_content":"带头链表里的头啥都不存的，就相当于一个哨兵，只是为了简化编程用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572230064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144721,"user_name":"黄振宇","can_delete":false,"product_type":"c1","uid":1686397,"ip_address":"","ucode":"976BC7B46DA419","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/7d/26340713.jpg","comment_is_top":false,"comment_ctime":1572010070,"is_pvip":false,"replies":[{"id":"55973","content":"👍，可以再搞下双向链表","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572229667,"ip_address":"","comment_id":144721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572010070","product_id":100017301,"comment_content":"这两天没能及时更新学习状态，没有代表我不在学习。再早之前的一个月我看了一遍C++，会写简单的程序了。看完链表这两节，这一周全泡在链表的C++实现里面了。<br>1.完成链表的构建<br>2.头插、尾插、求链表长度、删除元素所在节点、删除第n个点<br>3.链表反转（三个指针，前两个反转，后面依次移序）<br>4.中间值，快慢指针，快指针读完链表<br>5,环检测，快慢指针必在环中相遇（有点像初高中绕操场跑圈的物理题）<br>6.两个有序链表的合并，暴力法和递归法。<br><br>嗯嗯，花了四个晚上。熟悉链表的同时，C++语法也更熟悉了。不知道还有没有必要搞个双向链表呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472084,"discussion_content":"👍，可以再搞下双向链表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572229667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142519,"user_name":"相宇","can_delete":false,"product_type":"c1","uid":1624520,"ip_address":"","ucode":"2AB0A29CF74CD9","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/c8/cbbd46de.jpg","comment_is_top":false,"comment_ctime":1571386446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571386446","product_id":100017301,"comment_content":"链要考虑的4种特殊情况：<br>1.链表为空；<br>2.链表只有一个节点；<br>3.链表只有两个节点；<br>4.考虑头节点和尾节点","like_count":0},{"had_liked":false,"id":142509,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1571383025,"is_pvip":false,"replies":[{"id":"55226","content":"😂 应该是指针","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571618867,"ip_address":"","comment_id":142509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571383025","product_id":100017301,"comment_content":"争哥，对于这一节中的head定义，到底代表链表的&quot;头结点&quot;，还是&quot;头结点指针&quot;?<br>文中两种说法都有，看得我都混淆了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471154,"discussion_content":"😂 应该是指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571618867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142283,"user_name":"printf~林志华","can_delete":false,"product_type":"c1","uid":1690655,"ip_address":"","ucode":"57F34425A45D05","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/1f/dba0ae9f.jpg","comment_is_top":false,"comment_ctime":1571325576,"is_pvip":false,"replies":[{"id":"54893","content":"貌似有问题，应该是 fast = fast.next_node.next_node","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571359948,"ip_address":"","comment_id":142283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571325576","product_id":100017301,"comment_content":"    def has_ring(self):<br>        &quot;&quot;&quot;检查链表中是否有环.<br>        主体思想：<br>            设置快、慢两种指针，快指针每次跨两步，慢指针每次跨一步，如果快指针没有与慢指针相遇而是顺利到达链表尾部<br>            说明没有环；否则，存在环<br>        返回:<br>            True:有环<br>            False:没有环<br>        &quot;&quot;&quot;<br>        fast = self.__head<br>        slow = self.__head<br><br>        while (fast.next_node is not None) and (fast is not None):<br>            fast = fast.next_node<br>            slow = slow.next_node<br>            if fast == slow:<br>                return True<br><br>        return False<br>这段代码写的是有问题吗？不应该是fast = fast.next_node.next_node吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471060,"discussion_content":"貌似有问题，应该是 fast = fast.next_node.next_node","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571359948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141636,"user_name":"编程海中的🐟","can_delete":false,"product_type":"c1","uid":1623347,"ip_address":"","ucode":"3EB9ADD94F4093","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/33/8889014b.jpg","comment_is_top":false,"comment_ctime":1571204658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571204658","product_id":100017301,"comment_content":"为什么没人提出，为什么当查找字符串很长的时候，是跟字符串规模N，变大而变大？","like_count":0},{"had_liked":false,"id":141467,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1571159532,"is_pvip":false,"replies":[{"id":"54908","content":"1. LinkedList 的 first 和 last 指针， 是不会被计算 到  LinkedList 的 size 里面去的， 对吗？<br><br>size是存储的元素的个数。<br><br><br>2. LinkedList 的first.previous 指向 null, last.next 也指向 null, 我说的对吗？ 不对的话，想麻烦老师您帮我更正一下说法。<br><br>是的。<br><br>3. 我画一个 LinkedList 您看我说的对不对:<br>如图:<br>null &lt;–first&lt;–&gt;a&lt;–&gt;b&lt;–&gt;c&lt;–&gt;d&lt;–&gt;last–&gt;null<br><br>老师，我这里 画了一个 LinkedList:<br>3.1 这个双向链表 LinkedList 里有4元素, 下标是[0,3] 对吗？<br><br>对的。<br><br>3.2 这个双向链表的 first.previous = null, last.next = null, 这样画是对的吗？ 如果不对，应该怎样改啊？<br><br>图大致是对的。<br><br>3.3 如果只有一个元素，是不是就是下面这样?<br>null &lt;–first&lt;–&gt;a&lt;–&gt;last–&gt;null<br><br>是的<br><br>3.4 如果链表为空，是不是应该是下面这样:<br>null &lt;–first&lt;–&gt;last–&gt;null<br><br>不过，你可能对指针理解的有点没那么透彻，建议你网上搜索指针的概念，自己先学习一下。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571360748,"ip_address":"","comment_id":141467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571159532","product_id":100017301,"comment_content":"争哥 我问两个再基础不过的问题啊， 希望您能够回答我一下，谢谢您了！<br><br>这里以双链表为例吧，就是java的LikedList<br><br>1. LinkedList 的 first 和 last 指针， 是不会被计算 到  LinkedList 的 size 里面去的， 对吗？<br><br>2. LinkedList 的first.previous 指向 null, last.next 也指向 null, 我说的对吗？ 不对的话，想麻烦老师您帮我更正一下说法。<br><br>3. 我画一个 LinkedList 您看我说的对不对:<br>如图:<br>null &lt;–first&lt;–&gt;a&lt;–&gt;b&lt;–&gt;c&lt;–&gt;d&lt;–&gt;last–&gt;null<br><br>老师，我这里 画了一个 LinkedList:<br>3.1 这个双向链表 LinkedList 里有4元素, 下标是[0,3] 对吗？<br><br>3.2 这个双向链表的 first.previous = null, last.next = null, 这样画是对的吗？ 如果不对，应该怎样改啊？<br><br>3.3 如果只有一个元素，是不是就是下面这样?<br>null &lt;–first&lt;–&gt;a&lt;–&gt;last–&gt;null<br><br>3.4 如果链表为空，是不是应该是下面这样:<br>null &lt;–first&lt;–&gt;last–&gt;null<br><br>问题有点愚蠢，可是很希望老师能给我答疑解惑一下。 谢谢您!","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470759,"discussion_content":"1. LinkedList 的 first 和 last 指针， 是不会被计算 到  LinkedList 的 size 里面去的， 对吗？\n\nsize是存储的元素的个数。\n\n\n2. LinkedList 的first.previous 指向 null, last.next 也指向 null, 我说的对吗？ 不对的话，想麻烦老师您帮我更正一下说法。\n\n是的。\n\n3. 我画一个 LinkedList 您看我说的对不对:\n如图:\nnull &amp;lt;–first&amp;lt;–&amp;gt;a&amp;lt;–&amp;gt;b&amp;lt;–&amp;gt;c&amp;lt;–&amp;gt;d&amp;lt;–&amp;gt;last–&amp;gt;null\n\n老师，我这里 画了一个 LinkedList:\n3.1 这个双向链表 LinkedList 里有4元素, 下标是[0,3] 对吗？\n\n对的。\n\n3.2 这个双向链表的 first.previous = null, last.next = null, 这样画是对的吗？ 如果不对，应该怎样改啊？\n\n图大致是对的。\n\n3.3 如果只有一个元素，是不是就是下面这样?\nnull &amp;lt;–first&amp;lt;–&amp;gt;a&amp;lt;–&amp;gt;last–&amp;gt;null\n\n是的\n\n3.4 如果链表为空，是不是应该是下面这样:\nnull &amp;lt;–first&amp;lt;–&amp;gt;last–&amp;gt;null\n\n不过，你可能对指针理解的有点没那么透彻，建议你网上搜索指针的概念，自己先学习一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571360748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140607,"user_name":"轻舞弄影","can_delete":false,"product_type":"c1","uid":1205071,"ip_address":"","ucode":"E786AB17665258","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/4f/5aa8f775.jpg","comment_is_top":false,"comment_ctime":1571015269,"is_pvip":false,"replies":[{"id":"54530","content":"看需求，必要的话可以加两个的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571094548,"ip_address":"","comment_id":140607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571015269","product_id":100017301,"comment_content":"哨兵模式是需要头尾各有一个哨兵吗？如果只用带头哨兵的话，删除问题依然没有得到解决吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470465,"discussion_content":"看需求，必要的话可以加两个的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571094548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140352,"user_name":"水煮肉片","can_delete":false,"product_type":"c1","uid":1618995,"ip_address":"","ucode":"CE50D8BC3C1138","user_header":"https://static001.geekbang.org/account/avatar/00/18/b4/33/eb59db18.jpg","comment_is_top":false,"comment_ctime":1570887616,"is_pvip":true,"replies":[{"id":"54237","content":"ipad paper","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570916427,"ip_address":"","comment_id":140352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570887616","product_id":100017301,"comment_content":"不知道还能不能留言并得到反馈，文中的图是用什么软件做的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470354,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570916427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139243,"user_name":"zhang_小雪","can_delete":false,"product_type":"c1","uid":1431601,"ip_address":"","ucode":"8DEC35FC544B51","user_header":"https://static001.geekbang.org/account/avatar/00/15/d8/31/7a8657c2.jpg","comment_is_top":false,"comment_ctime":1570591039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570591039","product_id":100017301,"comment_content":"“需要对插入第一个结点和删除最后一个结点的情况进行特殊处理”删除最后一个节点不需要进行特殊处理吧，最后一个节点p-&gt;next=null,删除p，p前节点q，q-&gt;next=q-&gt;next-&gt;next=p-&gt;next=null,正常啊，倒是第一个节点的插入需要特殊处理，修改head指向。","like_count":0},{"had_liked":false,"id":138994,"user_name":"Alpha 👀","can_delete":false,"product_type":"c1","uid":1200971,"ip_address":"","ucode":"3C0BAD36550718","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/4b/28991f30.jpg","comment_is_top":false,"comment_ctime":1570524838,"is_pvip":false,"replies":[{"id":"53590","content":"是的，尾结点不适用","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570579784,"ip_address":"","comment_id":138994,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570524838","product_id":100017301,"comment_content":"老师，不知道我有没有理解错，p-&gt;next = p-&gt;next-&gt;next; 这一句对单链表的尾结点也不适用吧，不仅仅是最后一个结点？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469734,"discussion_content":"是的，尾结点不适用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570579784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138879,"user_name":"admu","can_delete":false,"product_type":"c1","uid":1686906,"ip_address":"","ucode":"2BDA27413957B6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJtpbgiayCUAfSYtJbM4QgKEfeOjPOIxoXU7Nky1XU0z7iaf0PDQM4ib7iaPsQpibOjxRb7c6DTBibvVbcQ/132","comment_is_top":false,"comment_ctime":1570497738,"is_pvip":false,"replies":[{"id":"53618","content":"这是哪里的代码啊，我文章里没找到啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570582078,"ip_address":"","comment_id":138879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570497738","product_id":100017301,"comment_content":"slow=head<br>slow.next=slow.next.next<br>为什么删除了slow的节点会改变head啊，没太明白","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469683,"discussion_content":"这是哪里的代码啊，我文章里没找到啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570582078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138632,"user_name":"王天平","can_delete":false,"product_type":"c1","uid":1689378,"ip_address":"","ucode":"6468C67322724D","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/22/b0f0e7b6.jpg","comment_is_top":false,"comment_ctime":1570379016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570379016","product_id":100017301,"comment_content":"课后五道题<br>1第一道题用先分特殊情况，0和1个节点，然后两个标记节点q＝ head and  p  分别为前两个节点，while（p）{temp＝p→next  p→ next＝q q ＝p p＝temp}<br>第二道题  快慢指针遍历有没有重合判断是否有环<br>第三道题  两种方法  一种是第三条新涟创立新结点newnode，然后对两个序列头结点数值比较，谁小就插到newnode后面，并且那个比较头结点递推到下个节点，随后newnode＝  newnode→next。。最后处理剩下没有插完的序列的头结点 插到newnode后面。第二种就是把b琏插到a链，遍历b。<br>第四种  先用一个p标记头结点head，再让head跑n-1个结点，如果没遍历完，返回-1没有倒数第n个，如果跑到n-1，再写while（head→next）{head＝head→next p=p→next}  return p<br>第五种 快慢指针  q是p遍历速度的两倍，q走到终点 p就是中间节点","like_count":0},{"had_liked":false,"id":138294,"user_name":"许智鸿","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","comment_is_top":false,"comment_ctime":1570157784,"is_pvip":false,"replies":[{"id":"53603","content":"要的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580311,"ip_address":"","comment_id":138294,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570157784","product_id":100017301,"comment_content":"老师，删除P结点之后的后继结点p-&gt;next = p-&gt;next-&gt;next;是不是还要手动释放一下这个结点对应的内存空间？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469470,"discussion_content":"要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138086,"user_name":"Lance","can_delete":false,"product_type":"c1","uid":1686840,"ip_address":"","ucode":"CCE52F86EEBBED","user_header":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","comment_is_top":false,"comment_ctime":1570016987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570016987","product_id":100017301,"comment_content":"将哨兵节点以及双指针应用于删除链表的倒数第N个节点中：<br>public ListNode RemoveNthFromEnd(ListNode head, int n) {<br>        ListNode dummy = new ListNode(0);<br>        dummy.next = head;<br>        ListNode first = dummy;<br>        ListNode end = dummy;<br>        <br>        for(int i = 1;i&lt;=n+1;i++)<br>        {<br>            first = first.next;<br>        }<br>        <br>        while(first != null)<br>        {<br>            first = first.next;<br>            end = end.next;<br>        }<br>        <br>        end.next = end.next.next;<br>        <br>        return dummy.next;<br>}","like_count":0},{"had_liked":false,"id":135554,"user_name":"厚积薄发","can_delete":false,"product_type":"c1","uid":1657999,"ip_address":"","ucode":"6FE711F65C8C66","user_header":"https://static001.geekbang.org/account/avatar/00/19/4c/8f/83eefcff.jpg","comment_is_top":false,"comment_ctime":1569209398,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1569209398","product_id":100017301,"comment_content":"python版本的检测环方法是不是有误？见下方我的标注<br>def has_ring(self):<br>        &quot;&quot;&quot;检查链表中是否有环.<br>        主体思想：<br>            设置快、慢两种指针，快指针每次跨两步，慢指针每次跨一步，如果快指针没有与慢指针相遇而是顺利到达链表尾部<br>            说明没有环；否则，存在环<br>        返回:<br>            True:有环<br>            False:没有环<br>        &quot;&quot;&quot;<br>        fast = self.__head<br>        slow = self.__head<br><br>        while (fast.next_node is not None) and (fast is not None):<br>            fast = fast.next_node  # 这里是不是应该改成slow = slow.next_node；fast = slow.next_node<br>            slow = slow.next_node<br>            if fast == slow:<br>                return True<br><br>        return False","like_count":0,"discussions":[{"author":{"id":1657999,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/8f/83eefcff.jpg","nickname":"厚积薄发","note":"","ucode":"6FE711F65C8C66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19752,"discussion_content":"fast=fast.next_node.next_node","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569221192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134664,"user_name":"mfayz","can_delete":false,"product_type":"c1","uid":1249459,"ip_address":"","ucode":"28569DD162D1DD","user_header":"","comment_is_top":false,"comment_ctime":1568888342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568888342","product_id":100017301,"comment_content":"单链表反转java版<br>public class Node{<br>    int value;<br>    Node next;<br>    Node(int x){ value = x; }<br>}<br>class NodeUtils{<br>    public Node reverseNodeList( Node head){<br>        if(null == head || null == head.next)<br>            return head;<br>        Node p,q,r;<br>        p = head;<br>        q = head.next;<br>        p.next = null;<br>         while(null != q){<br>              r = q.next;<br>              q.next = p;<br>              p = q;<br>              q = r;<br>          }<br>          head = p;<br>          return head;<br>    }<br>}","like_count":0},{"had_liked":false,"id":132885,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568259784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568259784","product_id":100017301,"comment_content":"看了这节，5分钟解决了leetcode 203移除链表元素一题，虽然是简单类型，还是找到点信心","like_count":0},{"had_liked":false,"id":132256,"user_name":"胡永","can_delete":false,"product_type":"c1","uid":1200543,"ip_address":"","ucode":"6C8BA1E0BED9C0","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/9f/1840385e.jpg","comment_is_top":false,"comment_ctime":1568073981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568073981","product_id":100017301,"comment_content":"今天学习到了指针的概念：指针保存着变量的内存地址；2，代码的检测方法是：没有元素，一个元素，两个元素，处理首尾元素等特殊情况心中跑一下试试能否没问题，对于复杂的问题通过画图来流出逻辑思考的空间；其中哨兵方法和练习题还需要再来几遍去理解","like_count":0},{"had_liked":false,"id":131303,"user_name":"Ssssss大圣","can_delete":false,"product_type":"c1","uid":1628147,"ip_address":"","ucode":"A3A10816801021","user_header":"https://static001.geekbang.org/account/avatar/00/18/d7/f3/ee9bf72d.jpg","comment_is_top":false,"comment_ctime":1567698179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567698179","product_id":100017301,"comment_content":"单链表翻转<br>Node* reverse_by_loop(Node* head)<br>{<br>if(!head || !head-&gt;next)<br>return;<br><br>Node* pre = NULL;<br>Node* next = NULL;<br>while(head)<br>{<br>next = head-&gt;next;<br>head-&gt;next = pre;<br>pre = head;<br>head = next;<br>}<br>}<br><br>链表中环的检测<br>删除链表的倒数第n个结点<br>求中间结点<br>以上三个都是快慢指针的应用<br><br>两个有序链表的合并 待学习","like_count":0},{"had_liked":false,"id":131062,"user_name":"wrzgeek","can_delete":false,"product_type":"c1","uid":1031589,"ip_address":"","ucode":"69C4980053E388","user_header":"","comment_is_top":false,"comment_ctime":1567617160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567617160","product_id":100017301,"comment_content":"笔记：<br>1.链表为空时，算法能否正常工作？链表有1个节点，2个节点时，算法能否正常工作？在头结点和尾节点链表能否正常工作？<br>2.利用哨兵，减少边界条件的特殊处理<br>3. 多画图利于思考","like_count":0},{"had_liked":false,"id":127315,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1566649489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566649489","product_id":100017301,"comment_content":"指针 理解 很重要 ；","like_count":0},{"had_liked":false,"id":125626,"user_name":"AlexQi","can_delete":false,"product_type":"c1","uid":1626884,"ip_address":"","ucode":"0CD77FA26BC484","user_header":"https://static001.geekbang.org/account/avatar/00/18/d3/04/7954f03a.jpg","comment_is_top":false,"comment_ctime":1566216886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566216886","product_id":100017301,"comment_content":"单链表的反转，初接触数据结构算法，感觉效率不太高，复杂度O(N）<br>import java.io.Serializable;<br><br>&#47;**<br> * @version 1.0<br> * @since 2019-08-16.<br> *&#47;<br>public class ListReverse&lt;E&gt; implements Serializable {<br><br>    private Node&lt;E&gt; head;<br><br>    private Node&lt;E&gt; tail;<br><br>    public ListReverse() {<br>        head = null;<br>        tail = null;<br>    }<br><br>    public void add(E e) {<br>        if (e == null)<br>            throw new NullPointerException();<br>        Node&lt;E&gt; newNode = new Node&lt;&gt;(e, null);<br>        if (head == null) {<br>            head = tail = newNode;<br>        } else {<br>            tail.next = newNode;<br>            tail = tail.next;<br>        }<br>    }<br><br>    public void reverseList() {<br>        Node&lt;E&gt; first = head;<br>        Node&lt;E&gt; prev = head;<br>        Node&lt;E&gt; tmp = head;<br>        for (; first != null; ) {<br>            first = first.next;<br>            if (prev.equals(head)) {<br>                prev.next = null;<br>            } else {<br>                prev.next = tmp;<br>                tmp = prev;<br>            }<br>            prev = first;<br>        }<br>        tmp = head;<br>        head = tail;<br>        tail = tmp;<br>    }<br><br>    @Override<br>    public String toString() {<br>        Node&lt;E&gt; first = head;<br>        StringBuilder builder = new StringBuilder();<br>        builder.append(&quot;[&quot;);<br>        for (; first != null; ) {<br>            builder.append(first.ele);<br>            if (first.next == null) {<br>                builder.append(&quot;]&quot;);<br>            } else {<br>                builder.append(&quot;, &quot;);<br>            }<br>            first = first.next;<br>        }<br>        return builder.toString();<br>    }<br><br>    private static class Node&lt;E&gt; {<br><br>        E ele;<br><br>        Node&lt;E&gt; next;<br><br>        public Node(E ele, Node&lt;E&gt; next) {<br>            this.ele = ele;<br>            this.next = next;<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":124645,"user_name":"杨宝强","can_delete":false,"product_type":"c1","uid":1189290,"ip_address":"","ucode":"B2352D7EA24F31","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/aa/ced0170d.jpg","comment_is_top":false,"comment_ctime":1565937019,"is_pvip":false,"replies":[{"id":"46788","content":"c语言我也忘的差不多了 感觉你理解的没太大问题","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566422786,"ip_address":"","comment_id":124645,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1565937019","product_id":100017301,"comment_content":"我给自己的定了一个规定，就是这一篇没有认真的学习完之前绝对不会打开下一篇，所以就在上篇实现单链表的时候，整整用了两天的时间才搞明白C语言那几个指针的含义，今天看到这篇文章的时候，有点相见恨晚的感觉..  <br><br>再问王哥一句，C语言里边 **p 和 *p 的关系，以下是我的个人理解<br><br>*p 存储的某个变量的地址， **p 存储的是 *p 的地址，当把链表中的list[0]结点的地址赋值给 *p 的时候，就有如下这一种结构<br><br>**p 指针指向 list[0]<br><br>查了很多资料对 指向指针的描述太少了... 就根据代码自己理解的，还请指正！ ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463259,"discussion_content":"c语言我也忘的差不多了 感觉你理解的没太大问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566422786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622524,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/fc/ac3760ed.jpg","nickname":"sugus","note":"","ucode":"CAF009F622338A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49912,"discussion_content":"哈哈，当年在学校学习c语言的时候就是指针这块学不懂哈哈，现在是时候还了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573649477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1189290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/25/aa/ced0170d.jpg","nickname":"杨宝强","note":"","ucode":"B2352D7EA24F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1622524,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/fc/ac3760ed.jpg","nickname":"sugus","note":"","ucode":"CAF009F622338A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50036,"discussion_content":"是啊 感觉学数据结构还是要会指针的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573657913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49912,"ip_address":""},"score":50036,"extra":""}]}]},{"had_liked":false,"id":124323,"user_name":"徐丶昌隆","can_delete":false,"product_type":"c1","uid":1604438,"ip_address":"","ucode":"9EE3F971F90C4F","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","comment_is_top":false,"comment_ctime":1565860930,"is_pvip":false,"replies":[{"id":"45700","content":"为啥要释放结点呢？实际上不需要是释放结点的。你算法估计不对。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565909779,"ip_address":"","comment_id":124323,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565860930","product_id":100017301,"comment_content":"       老师，我在写判断单链是否有环的代码时，人为的在链表中创建了环，之后发现在释放链表的内存时崩溃了。后来发现，是因为逐个释放节点时，环的封闭位置的节点开始就释放了，之后绕了一圈，又回到这个节点要释放这块的内存，从而导致了崩溃。<br>       请问老师，这个问题应该怎么解决呀。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463116,"discussion_content":"为啥要释放结点呢？实际上不需要是释放结点的。你算法估计不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565909779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604438,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","nickname":"徐丶昌隆","note":"","ucode":"9EE3F971F90C4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5041,"discussion_content":"链表使用完之后释放内存，每个节点都是new的，难道链表平常使用的时候不需要释放内存么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565912669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123835,"user_name":"looper","can_delete":false,"product_type":"c1","uid":1238396,"ip_address":"","ucode":"DA4BCE83836C04","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/7c/2a5a418b.jpg","comment_is_top":false,"comment_ctime":1565769132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565769132","product_id":100017301,"comment_content":"第二天，写完了上面的5个问题的代码，收获良多，尤其是双指针求解的思路","like_count":0},{"had_liked":false,"id":123498,"user_name":"刘航","can_delete":false,"product_type":"c1","uid":1188752,"ip_address":"","ucode":"19AF3A17AC2023","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/90/2713247e.jpg","comment_is_top":false,"comment_ctime":1565687362,"is_pvip":false,"replies":[{"id":"45687","content":"你的回文串判断算法好像不对吧，我没看明白","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565908150,"ip_address":"","comment_id":123498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565687362","product_id":100017301,"comment_content":"耽搁这么久，然后开始学习，上节课学习之后写了单链表判断回文字符串。看了这节课，然后试试单链表的插入，有一个疑问？单链表插入，然后计算链表的长度，然后判断是否是回文，然后重复上面的步骤，发现链表的长度不对，判断回文字符串会改变原链表的指针位置吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462700,"discussion_content":"你的回文串判断算法好像不对吧，我没看明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565908150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121266,"user_name":"@二十一大叔","can_delete":false,"product_type":"c1","uid":1075954,"ip_address":"","ucode":"394A7E80C5034C","user_header":"https://static001.geekbang.org/account/avatar/00/10/6a/f2/8829a0b8.jpg","comment_is_top":false,"comment_ctime":1565090303,"is_pvip":false,"replies":[{"id":"44736","content":"不，a-&gt;next永远都是存的下一个结点的地址。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565219853,"ip_address":"","comment_id":121266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565090303","product_id":100017301,"comment_content":"可否这样理解：当节点a是一个孤立节点时，a-&gt;next 指的是a本身的地址，如果a还有下一个节点b，则a-&gt;next 指的是就是b的地址。我觉得这样对于插入和删除更好理解，不知道对不对，求解。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461713,"discussion_content":"不，a-&amp;gt;next永远都是存的下一个结点的地址。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565219853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120887,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1565009456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565009456","product_id":100017301,"comment_content":"链表题目常用双指针法，做题没有思路可以往快慢指针的方向想想。<br>二刷基础","like_count":0},{"had_liked":false,"id":120791,"user_name":"行走着的宋公子","can_delete":false,"product_type":"c1","uid":1002416,"ip_address":"","ucode":"3FA47B1580A327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b0/2ae78627.jpg","comment_is_top":false,"comment_ctime":1564996167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564996167","product_id":100017301,"comment_content":"2019年08月05日17:09:22重读","like_count":0},{"had_liked":false,"id":120300,"user_name":"见思","can_delete":false,"product_type":"c1","uid":1595921,"ip_address":"","ucode":"26F4428210F168","user_header":"https://static001.geekbang.org/account/avatar/00/18/5a/11/56397685.jpg","comment_is_top":false,"comment_ctime":1564823118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564823118","product_id":100017301,"comment_content":"哨兵代码（Java版）：<br><br>public static void main(String[] args){<br><br>        int[] arr = new int[]{1, 24, 66, 76, 2, 89};<br><br>        &#47;&#47; test<br>        System.out.println(find(arr, arr.length, 76));<br>        System.out.println(find0(arr, arr.length, 76));<br>    }<br><br>    &#47;&#47; find and find0<br>    &#47;&#47; compare...<br><br>    private static int find(int[] arr, int n, int key) {<br>        int i = 0;<br>        while (i &lt; n) {<br>            if (arr[i] == key) {<br>                break;<br>            }<br>            i++;<br>        }<br>        return i &lt; n ? i : -1;<br>    }<br><br>    private static int find0(int[] arr, int n, int key) {<br><br>        if (arr[n - 1] == key) return n - 1;<br><br>        int tmp = arr[n - 1];<br>        arr[n - 1] = key;<br><br>        int i = 0;<br>        while (arr[i] != key) i++;<br><br>        arr[n - 1] = tmp;<br><br>        return n - 1 == i ? -1 : i;<br>    }","like_count":0},{"had_liked":false,"id":119109,"user_name":"Wuju","can_delete":false,"product_type":"c1","uid":1615617,"ip_address":"","ucode":"6CF46133F6D455","user_header":"https://static001.geekbang.org/account/avatar/00/18/a7/01/234c0ff6.jpg","comment_is_top":false,"comment_ctime":1564506162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564506162","product_id":100017301,"comment_content":"p-&gt;next = x;  <br>x-&gt;next = p-&gt;next;  &#47;&#47; 将 x 的结点的 nex","like_count":0},{"had_liked":false,"id":117350,"user_name":"月落泉","can_delete":false,"product_type":"c1","uid":1458702,"ip_address":"","ucode":"FC03912F1EBB83","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/0e/21b8025f.jpg","comment_is_top":false,"comment_ctime":1564027839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564027839","product_id":100017301,"comment_content":"<br>swift实现快慢指针判断会问<br>class MyViewController : UIViewController {<br>    override func loadView() {<br>        let view = UIView()<br>        view.backgroundColor = .white<br><br>        let label = UILabel()<br>        label.frame = CGRect(x: 150, y: 200, width: 200, height: 20)<br>        label.text = &quot;Hello World!&quot;<br>        label.textColor = .black<br>        <br>        view.addSubview(label)<br>        self.view = view<br>        <br>        let origin = &quot;123456&quot;<br>        var list : [ListNode?] = [ListNode?]()<br>        <br>        for cha in origin.reversed() {<br>            let node = ListNode(cha: cha)<br>            node.next = list.last as? ListNode<br>            list.append(node)<br>        }<br>        <br>        let ispolind = polindRome(head: list.last as? ListNode)<br>        print(ispolind)<br>        <br>    }<br>    <br>    func polindRome(head:ListNode?) -&gt; Bool {<br>        <br>        if head == nil || head?.next == nil {<br>            return false<br>        }<br>        <br>        var prev:ListNode? = nil<br>        var slow:ListNode? = head<br>        var fast:ListNode? = head<br>        <br>        while fast != nil &amp;&amp; fast?.next != nil {<br>            fast = fast?.next?.next<br>            let temp = slow?.next<br>            <br>            slow?.next = prev<br>            prev = slow<br>            slow = temp<br>            <br>        }<br>        <br>        if fast != nil {<br>            slow = slow?.next<br>        }<br>        <br>        while slow != nil {<br>&#47;&#47;            print(&quot;\\(String(describing: slow?.value)) --- \\(String(describing: prev?.value))&quot;)<br>            if slow?.value != prev?.value {<br>                <br>                return false<br>            }<br>            slow = slow?.next<br>            prev = prev?.next<br>        }<br>        <br>        <br>        return true<br>    }<br>   <br>}<br><br><br>class ListNode {<br>    var value:Character?<br>    var next : ListNode?<br>    <br>    init(cha :Character?) {<br>        value = cha<br>    }<br>    <br>}<br>","like_count":0},{"had_liked":false,"id":117030,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1563957097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563957097","product_id":100017301,"comment_content":"1. 浅谈哨兵<br>哨兵通常被用来作为在边界处预设某些值来避免额外的特殊情况处理代码，我们遇到在算法中需要额外的判断语句或循环语句来处理某些特殊情况时，应当考虑能否利用哨兵机制，即保证预设某些值后对特殊情况的处理等同于正常情况。这种设置往往能简化代码，在某些情况下减少循环中的判断条件进而增加效率。<br>2. 哨兵实例<br>单链表代码中在初始化时预设了一个空的带头结点，来保证对链表为空时的插入等操作等同于正常的操作，这样既让常用操作的代码更加简化，同时也提高了频繁操作链表的效率（即不用每次判断是否链表为空），仅用一个结点的空间就能换取这样的收益，何乐而不为？<br>插入排序中可以在arr[0]处每次设置本轮需要插入的值，这样的方式可以减小if里的一次判断（否则需要多一次判断数组移动时是否已经达到0的位置）。<br>归并排序的代码中可以通过在要归并的两个数组末尾设置非常大的值，从而避免两个数组遍历后单独的循环处理逻辑，进而简化重复代码逻辑，同时减少while中的判断逻辑（只需一个判断是否等于最大值即可）<br>3. 写代码需要有的三种意识<br>正确性、安全性、大数据场景下的性能问题","like_count":0},{"had_liked":false,"id":116858,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1563932080,"is_pvip":true,"replies":[{"id":"42895","content":"是的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564009557,"ip_address":"","comment_id":116858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563932080","product_id":100017301,"comment_content":"例子二的代码中处理不了有多个和key值相同的值的情况吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459712,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564009557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115648,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563681462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563681462","product_id":100017301,"comment_content":"上一条……评论，我是傻逼。当做没发生<br>int i=0;<br>if(i～～n)｛<br>    while（a［i］!=key）｛<br>          ++i;<br>  ｝<br>｝<br>if(i=n)｛<br>     return -1；<br>｝else｛<br>     return i；<br><br>｝","like_count":0},{"had_liked":false,"id":115642,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563680638,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563680638","product_id":100017301,"comment_content":"代码一不用哨兵写成不等于<br>int i=0;<br>while（a［i］!=key）｛<br>     ++i;<br>｝<br>if(i=n)｛<br>     return -1；<br>｝else｛<br>     return i；<br>｝<br>这样哪里有问题？","like_count":0,"discussions":[{"author":{"id":1663660,"avatar":"https://static001.geekbang.org/account/avatar/00/19/62/ac/9fb6c140.jpg","nickname":"利伊奥克儿","note":"","ucode":"2160BEBAD1034D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39489,"discussion_content":"你这个不就会越界了吗？你怎么保证i到n-1的时候跳出循环？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571930207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115631,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563678685,"is_pvip":false,"replies":[{"id":"42293","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746420,"ip_address":"","comment_id":115631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563678685","product_id":100017301,"comment_content":"只有c会这样写，避免越界？java第一个代码就解决了，就不需要加个哨兵了吧。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459197,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115629,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563678506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563678506","product_id":100017301,"comment_content":"有哨兵的代码和没有的代码有啥区别，哨兵起作用了？第一个代码也可以写成不等于呀。这哨兵存在的意义是啥？第二个代码看的我真的难受，别扭。感觉有点强行加段代码","like_count":0},{"had_liked":false,"id":115621,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563677268,"is_pvip":false,"replies":[{"id":"42291","content":"head就是链表的头指针；<br>是的；","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746251,"ip_address":"","comment_id":115621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563677268","product_id":100017301,"comment_content":"if (head-&gt;next == null) {<br>   head = null;<br>}<br>这代码里head是啥？删除最后一个需要对头节点判断，中间没数据了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459195,"discussion_content":"head就是链表的头指针；\n是的；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114635,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1563354215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563354215","product_id":100017301,"comment_content":"对于单链表检测环，用Floyd的双指针法，fast比slow多走一步，时间复杂度是O(n)。如果多走2步，3步或n步，fast和slow相遇需要的循环数貌似和环的节点数有关系，如果环的节点数n和fast的每次步数k，满足n%k=0,那么相遇时slow的步数是n&#47;k，如果n%k&gt;0，那么相遇时slow的步数是n。<br>这个怎样用数学的方法来归纳？看似小学的追逐问题，但又有点不像。请老师指教。<br>环长n=100，fast每次比slow多走的步数k, slow和fast相遇时slow走的步数s<br>k=2  s=50<br>k=3  s=100<br>k=4  s=25<br>k=5  s=20<br>","like_count":0},{"had_liked":false,"id":114301,"user_name":"之城","can_delete":false,"product_type":"c1","uid":1252519,"ip_address":"","ucode":"12451253E366A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/a7/6a837523.jpg","comment_is_top":false,"comment_ctime":1563267536,"is_pvip":false,"replies":[{"id":"41754","content":"一样的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563312732,"ip_address":"","comment_id":114301,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563267536","product_id":100017301,"comment_content":"将哨兵的两段C代码表明，!=和&lt;两个比较符号，时间复杂度不一样？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458600,"discussion_content":"一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563312732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113783,"user_name":"一周","can_delete":false,"product_type":"c1","uid":1241320,"ip_address":"","ucode":"13A58E85B5232A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/e8/e72b3cf5.jpg","comment_is_top":false,"comment_ctime":1563155934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563155934","product_id":100017301,"comment_content":"第三轮了,之前两轮看着蛮迷糊的,只能对着敲,这次,完全没看,就自己敲出来了","like_count":0},{"had_liked":false,"id":110117,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1562198734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562198734","product_id":100017301,"comment_content":"链表和数组在实现上的不同，数组为空的时候结构和不为空是一样的，只是长度不同。链表为空和不为空，结构不同，一个是空指针，一个是有头有尾的节点，这样哨兵就弥合了两者结构的不同，可以用统一的逻辑来处理。循环队列也有类似的结构问题，可以用哨兵来统一逻辑。第一次在教科书上读到哨兵觉得很费解，我个人觉得哨兵这个名字不太好，感觉和要解决的问题有点远，可能叫补丁更好一点，主要的用途是在结构上打补丁。","like_count":0},{"had_liked":false,"id":109099,"user_name":"布衣","can_delete":false,"product_type":"c1","uid":1207038,"ip_address":"","ucode":"BFAD9049508330","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","comment_is_top":false,"comment_ctime":1561962188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561962188","product_id":100017301,"comment_content":"&#47;&#47;链表翻转<br>linkNode* linkReversal(linkNode* link) {<br>    if (!link) return NULL;<br>    linkNode *p = link-&gt;next;&#47;&#47;p指向第一个节点<br>    <br>    &#47;&#47;把第p节点后面的节点一次插入到头节点的后面<br>    while(NULL != p-&gt;next) {<br>        &#47;&#47;第一步取出p节点(原来的第一个节点)的下一个节点<br>        linkNode *pNext = p-&gt;next;<br>        p-&gt;next = p-&gt;next-&gt;next;<br>        <br>        &#47;&#47;把取出来的节点插入到头结点后面<br>        linkNode *linkNext = link-&gt;next;<br>        link-&gt;next = pNext;<br>        pNext-&gt;next = linkNext;<br>    }<br>    <br>    return link;<br>}","like_count":0},{"had_liked":false,"id":108951,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1561941650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561941650","product_id":100017301,"comment_content":"老师，艰难的开始，单链表反转看明白了，看着代码，尝试用文字写下每一步，解释每一步，感觉明白了。谢谢。","like_count":0},{"had_liked":false,"id":107647,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1561591885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561591885","product_id":100017301,"comment_content":"困在链表反转的代码里了，😢","like_count":0},{"had_liked":false,"id":106610,"user_name":"徐鹏","can_delete":false,"product_type":"c1","uid":1221936,"ip_address":"","ucode":"B19B6EB7002231","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/30/4be78ce7.jpg","comment_is_top":false,"comment_ctime":1561356389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561356389","product_id":100017301,"comment_content":"链表相关操作，欢迎交流 https:&#47;&#47;github.com&#47;KusePeng&#47;data_structure&#47;tree&#47;master&#47;src&#47;practice&#47;linked","like_count":0},{"had_liked":false,"id":106569,"user_name":"Joiner","can_delete":false,"product_type":"c1","uid":1071941,"ip_address":"","ucode":"7F67D4C325E71F","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/45/5dc5437e.jpg","comment_is_top":false,"comment_ctime":1561346464,"is_pvip":false,"replies":[{"id":"38633","content":"当然不是的。大部分情况下，读要比写快的。涉及到硬盘的操作的时候后，就不能简单地通过时间复杂度来分析了，我后面有讲到。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561419356,"ip_address":"","comment_id":106569,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561346464","product_id":100017301,"comment_content":"老师您好，我想问一下，一般的计算机从硬盘读取数据的速度和把数据写入硬盘的速度是一样的吗（因为我觉得这里是不是也会影响复杂度的判断）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455141,"discussion_content":"当然不是的。大部分情况下，读要比写快的。涉及到硬盘的操作的时候后，就不能简单地通过时间复杂度来分析了，我后面有讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561419356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106288,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1561256337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561256337","product_id":100017301,"comment_content":"老师<br>void deleteLastKth(SinglyLinkedNode** head_ref, int k) {<br>    if (*head_ref == NULL || k == 0) return;<br>    <br>    &#47;&#47; 快指针向前移动 k-1<br>    SinglyLinkedNode* fast = *head_ref;<br>    int i = 1;<br>    while (i &lt; k &amp;&amp; fast != NULL) {<br>        fast = fast-&gt;next;<br>        ++i;<br>    }<br>    <br>    &#47;&#47; 如果快指针为空，说明结点个数小于 k<br>    if (fast == NULL) return;<br>    <br>    SinglyLinkedNode* slow = *head_ref;<br>    SinglyLinkedNode* prev = NULL;<br>    while (fast-&gt;next != NULL) {<br>        fast = fast-&gt;next;<br>        prev = slow;<br>        slow = slow-&gt;next;<br>    }<br>    <br>    &#47;&#47; 如果 prev 为空，头结点刚好是第 k 个结点<br>    if (!prev) {<br>        (*head_ref) = (*head_ref)-&gt;next;<br>    } else {<br>        prev-&gt;next = slow-&gt;next;<br>    }<br>    free(slow);<br>}<br>这段代码我用1 3 5 7 9 执行删除倒数第三个数之后，发现节点没有被删除，变成了 1 3 0 7 9只是值置为0，gdb调试了发现slow-&gt;next地址还是不为空","like_count":0},{"had_liked":false,"id":104603,"user_name":"kicking wind","can_delete":false,"product_type":"c1","uid":1124829,"ip_address":"","ucode":"B0117CBDF18A74","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/dd/9a6b90ab.jpg","comment_is_top":false,"comment_ctime":1560783018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560783018","product_id":100017301,"comment_content":"晚上花了几个小时用swift实现了习题五个链表算法，链表环两年前在leetcode做过，印象深刻","like_count":0},{"had_liked":false,"id":104022,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1560592309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560592309","product_id":100017301,"comment_content":"1.明白指针或引用存储的是变量的地址<br>2.时刻注意指针丢失和内存泄漏<br>3.利用哨兵（在边界处预设某些值来避免额外的特殊情况处理代码）<br>4.写完代码后检验边界条件，大数据量场景，安全条件等特殊情况<br>5.画图法&amp;举例法<br>画图法来帮助逻辑建立<br>举例法来帮助验证逻辑<br>6.","like_count":0},{"had_liked":false,"id":103192,"user_name":"Charley Choi 🎃","can_delete":false,"product_type":"c1","uid":1235154,"ip_address":"","ucode":"E43371C6B2BBDA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d2/8bc05ccf.jpg","comment_is_top":false,"comment_ctime":1560394446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560394446","product_id":100017301,"comment_content":"不带头链表删除最后一个节点的代码好像不严谨吧？<br>if (head-&gt;next == null) {<br>   head = null;<br>}<br>删除最后一个节点后，还应该将当前最后的节点的next指针置空。","like_count":0},{"had_liked":false,"id":99297,"user_name":"karas","can_delete":false,"product_type":"c1","uid":1349594,"ip_address":"","ucode":"836873D0D9973B","user_header":"https://static001.geekbang.org/account/avatar/00/14/97/da/ae765e15.jpg","comment_is_top":false,"comment_ctime":1559187488,"is_pvip":false,"replies":[{"id":"35760","content":"环不一定是你想的那样","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559257620,"ip_address":"","comment_id":99297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559187488","product_id":100017301,"comment_content":"我觉得检测环形链表没必要使用双指针吧,如果是环形指针最终回和head相遇，否则就会正常结束，时间应该也都是O(n)<br>```java<br>Node p = head;<br>        while (p.next != null) {<br>            if (p == head)<br>                return true;<br>            p = p.next;<br>        }<br>        return false;<br>```","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452051,"discussion_content":"环不一定是你想的那样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559257620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99239,"user_name":"风雪夜归人","can_delete":false,"product_type":"c1","uid":1440527,"ip_address":"","ucode":"7F611C3D9FD951","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q79HDNx5mGo5Wr4ibCr4yeGlnrBWNTTiaUTVCt4uoFNPO45BZY8ngZ9vAhIwzWXregNe09Ca8C5cibu471CcxS8mw/132","comment_is_top":false,"comment_ctime":1559180724,"is_pvip":false,"replies":[{"id":"35764","content":"         —<br>       &#47;     |<br>————。 这种情况咋办","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559257822,"ip_address":"","comment_id":99239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559180724","product_id":100017301,"comment_content":"老师好，关于环的检测我有个疑问，有种方法是快慢指针，为什么慢指针要移动，如果换成一个指针不动，一个指针每次只移动 一下，这样不可以吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452031,"discussion_content":"         —\n       /     |\n————。 这种情况咋办","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559257822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99184,"user_name":"Geek_7ead05","can_delete":false,"product_type":"c1","uid":1363830,"ip_address":"","ucode":"1FA18A1245200E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHKe06oa6hIkIpIGib63GAU1M2q7HODOLwYZ1rJDOzDzmMlckQKgXzLaQJiaKSibJ0K2pCav8gLmLkg/132","comment_is_top":false,"comment_ctime":1559175699,"is_pvip":false,"replies":[{"id":"36262","content":"函数调用栈是为了保存现场，以便调用完成之后恢复。<br>你可以参看这篇文章：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;Ki3WN2AJ5HhxxmaQ0lVh3Q","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559611825,"ip_address":"","comment_id":99184,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559175699","product_id":100017301,"comment_content":"有个疑惑:栈是先进先出的，那临时变量压入栈按照先后顺序，同一个作用域内如果要用前面入栈的变量不是要先出栈后面的数据么？如果入栈不是为了能取出来用，比如计算机也能通过运行时候的寄存器存放了当前作用域的临时变量，那当前作用域的变量入栈又是为了什么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452008,"discussion_content":"函数调用栈是为了保存现场，以便调用完成之后恢复。\n你可以参看这篇文章：\nhttps://mp.weixin.qq.com/s/Ki3WN2AJ5HhxxmaQ0lVh3Q","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559611825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98564,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1559030385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559030385","product_id":100017301,"comment_content":"https:&#47;&#47;leetcode-cn.com&#47;submissions&#47;detail&#47;19625191&#47;","like_count":0},{"had_liked":false,"id":98563,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1559030221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559030221","product_id":100017301,"comment_content":"11","like_count":0},{"had_liked":false,"id":98445,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1559005259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559005259","product_id":100017301,"comment_content":"执行用时 : 0 ms, 在Merge Two Sorted Lists的Go提交中击败了100.00% 的用户<br>内存消耗 : 2.5 MB, 在Merge Two Sorted Lists的Go提交中击败了93.30% 的用户","like_count":0},{"had_liked":false,"id":98252,"user_name":"reven404","can_delete":false,"product_type":"c1","uid":1022868,"ip_address":"","ucode":"F84AAF2DC1D18F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/94/4977913a.jpg","comment_is_top":false,"comment_ctime":1558942341,"is_pvip":true,"replies":[{"id":"35204","content":"文章里有解释的，哪里看不懂呢？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559006204,"ip_address":"","comment_id":98252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558942341","product_id":100017301,"comment_content":"没懂，代码一、代码二不都有while吗？代码二怎么就快了。另外代码二代码量也比较多，不会更慢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451616,"discussion_content":"文章里有解释的，哪里看不懂呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559006204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96460,"user_name":"商庭华","can_delete":false,"product_type":"c1","uid":1225083,"ip_address":"","ucode":"BA1DB54A6CF0A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/7b/aa820485.jpg","comment_is_top":false,"comment_ctime":1558429386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558429386","product_id":100017301,"comment_content":"老师好，在实现public void deleteByValue(int value)这个方法时，我遇到了一个问题，希望老师解惑。谢谢。<br>Node p = head;<br> Node q = null;<br>那么当找到了node中保存的值和value相等的节点。<br>如果此时p节点为head节点，也就是要删除的节点为头结点时，<br>为什么p=p.getNext()这段代码没法删除呢。<br><br>而当p节点既不是头结点，又不是尾结点，也就是要删除的节点在链表中间时。<br>q.setNext(q.getNext())却可以管用。","like_count":0},{"had_liked":false,"id":95936,"user_name":"佳楠","can_delete":false,"product_type":"c1","uid":1008809,"ip_address":"","ucode":"A1698AE91992AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/a9/27d63f2e.jpg","comment_is_top":false,"comment_ctime":1558262551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558262551","product_id":100017301,"comment_content":"文章配套习题：https:&#47;&#47;leetcode.com&#47;list&#47;xrx4idwr","like_count":0},{"had_liked":false,"id":95563,"user_name":"阿康","can_delete":false,"product_type":"c1","uid":1246407,"ip_address":"","ucode":"5BAF04D5C55918","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/c7/147ae9a1.jpg","comment_is_top":false,"comment_ctime":1558082806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558082806","product_id":100017301,"comment_content":"我是名iOS开发者，对java语言完全不了解，c语言也是一知半解。让我手写链表未免有些吃力和不可能，但我想学习算法也许就是思维的提升，下面是我对5个常见链表操作的思路<br>（1）单链表反转  思路：递归法。<br>（2）链表中环的检测  思路：快慢指针是否相遇<br>（3）两个有序链表合并  思路：两个链表中保存数据较小的结点后，插到新的链表中<br>（4）删除链表倒数第n个结点  思路：不考虑特殊情况下，定义两个指针p1,p2,p2定位到第n个结点，当p2的next指针指向null，此时p1的next指针指向的就是倒数第n个结点，删除即可<br>（5）求链表的中间结点  思路：奇数情况下，快慢指针，快指针每次走两步，慢指针每次走一步，快指针的next指向null，慢指针的next指向的就是中间结点。<br><br><br>以上是我个人的总结，望老师批评赐教！","like_count":0},{"had_liked":false,"id":95290,"user_name":"HSLM.","can_delete":false,"product_type":"c1","uid":1339600,"ip_address":"","ucode":"BC951D2FC40271","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/d0/79eedf41.jpg","comment_is_top":false,"comment_ctime":1558010280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558010280","product_id":100017301,"comment_content":"小白不会用Github，老师布置的题目解答不知道去哪找，进去github之后一脸懵逼不知道要找的东西在哪还全英语，懵逼啊懵逼...","like_count":0},{"had_liked":false,"id":93508,"user_name":"Poppy","can_delete":false,"product_type":"c1","uid":1501505,"ip_address":"","ucode":"AF656A00521037","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/41/7cb2cf64.jpg","comment_is_top":false,"comment_ctime":1557483505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557483505","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":91043,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1500912,"ip_address":"","ucode":"A1DBB2F4909EAE","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/f0/3156a364.jpg","comment_is_top":false,"comment_ctime":1556819889,"is_pvip":false,"replies":[{"id":"32883","content":"你很细心，我们假设不包括环","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557186297,"ip_address":"","comment_id":91043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556819889","product_id":100017301,"comment_content":"请问像单链表反转，寻找单链表中间节点的问题需不需要考虑链表有环的情况","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448776,"discussion_content":"你很细心，我们假设不包括环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557186297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91006,"user_name":"贝克水母","can_delete":false,"product_type":"c1","uid":1425849,"ip_address":"","ucode":"8D431C5FC07521","user_header":"https://static001.geekbang.org/account/avatar/00/15/c1/b9/4bba336f.jpg","comment_is_top":false,"comment_ctime":1556782608,"is_pvip":false,"replies":[{"id":"32703","content":"证明有点复杂 我抽空写下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557017397,"ip_address":"","comment_id":91006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556782608","product_id":100017301,"comment_content":"为什么环内一定会相遇呢，我搜的没搜到，因为不是连续的走，有可能一直跳过去牙呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448762,"discussion_content":"证明有点复杂 我抽空写下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557017397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90188,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1556444120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556444120","product_id":100017301,"comment_content":"成功的抄了一遍<br>打卡<br>好！","like_count":0},{"had_liked":false,"id":89984,"user_name":"孤鹜齐飞","can_delete":false,"product_type":"c1","uid":1149144,"ip_address":"","ucode":"33CF3142DAD56C","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/d8/fdd2cecd.jpg","comment_is_top":false,"comment_ctime":1556357281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556357281","product_id":100017301,"comment_content":"终于明白a,b之间插入节点x的过程：即：x—&gt;next = p—&gt;next; p—&gt;next = x;<br>也就是说x的后继节点应该是b, a的后继节点应该是x,那么这里 x节点的后继节点等于p-&gt;next就是a的后继节点b,同时 p的后继节点（a节点）的后继修改为x节点，就完成了一次节点的插入动作，插入就是修改指针的前后指向关系。","like_count":0},{"had_liked":false,"id":87488,"user_name":"林步蜓","can_delete":false,"product_type":"c1","uid":1147804,"ip_address":"","ucode":"5EFF8F302D98B1","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/9c/e65537eb.jpg","comment_is_top":false,"comment_ctime":1555611394,"is_pvip":false,"replies":[{"id":"31490","content":"你是说的哪一段的呢啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555639217,"ip_address":"","comment_id":87488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555611394","product_id":100017301,"comment_content":"老师，我指出一个错误。<br>删除后继节点，你写的错了。<br>应该是删除P指针指向的节点的后继节点，<br>你写的删除P节点的后继结点。<br><br>困扰半天…跳坑也祝老师早早改下。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447480,"discussion_content":"你是说的哪一段的呢啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555639217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86903,"user_name":"Destiny","can_delete":false,"product_type":"c1","uid":1258567,"ip_address":"","ucode":"B9F1AE7CDF5C30","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/47/6d212e42.jpg","comment_is_top":false,"comment_ctime":1555473365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555473365","product_id":100017301,"comment_content":"public class TwoLinkHeBing {<br>    @Getter<br>    @Setter<br>    class Node{<br>        private Integer data;   &#47;&#47;存储数据<br>        private Node next;   &#47;&#47;后继引用<br>        public Node(Integer data) {<br>            this.data = data;<br>        }<br>        public Node() {<br>        }<br>    }<br><br>    &#47;&#47;准备第一个有序链表<br>    Node readyNode1(){<br>        Node node = new Node(1);<br>        Node node1 = new Node(6);<br>        Node node2 = new Node(9);<br>        Node node3 = new Node(10);<br>        node.next = node1;<br>        node1.next = node2;<br>        node2.next = node3;<br>        return node;<br>    }<br><br>    &#47;&#47;准备第二个有序链表<br>        。。。。。。node2<br><br>    &#47;&#47;合并两个有序链表<br>    public Node hebing(Node node1, Node node2){<br>        Node node3 = null;<br>        while(node1 != null || node2 != null) {<br>            Node n = new Node();<br>            if (node1 == null) {<br>                getLastNode(node3).next = node2;<br>                break;<br>            } else if (node2 == null) {<br>                getLastNode(node3).next = node1;<br>                break;<br>            } else if (node1.data &gt; node2.data) {<br>                n.data = node2.data;<br>                node2 = node2.next;<br>            } else if (node1.data &lt;= node2.data) {<br>                n.data = node1.data;<br>                node1 = node1.next;<br>            }<br><br>            if (node3 == null) {<br>                node3 = n;<br>            } else {<br>                getLastNode(node3).next = n;<br>            }<br><br>        }<br>        return node3;<br>    }<br><br><br>    &#47;**<br>     * 获取链表的最后一级<br>     *&#47;<br>    public Node getLastNode(Node node){<br>        while (node != null){<br>            if (node.next == null) {<br>                return node;<br>            } else {<br>                node = node.next;<br>            }<br>        }<br>        return null;<br>    }<br>","like_count":0},{"had_liked":false,"id":85935,"user_name":"honghonghong","can_delete":false,"product_type":"c1","uid":1500352,"ip_address":"","ucode":"6F3BB36D6E1147","user_header":"","comment_is_top":false,"comment_ctime":1555296165,"is_pvip":false,"replies":[{"id":"30977","content":"不是啊 带链头 不带链头 不是这么理解的 你再看下专栏的解释","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555372491,"ip_address":"","comment_id":85935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555296165","product_id":100017301,"comment_content":"我看了您的代码 有个地方不太理解。所谓头插法不应该是新插入的节点当做头吗？但是我看到您是把<br>headNode.next指向新的节点。小白困惑了~","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446872,"discussion_content":"不是啊 带链头 不带链头 不是这么理解的 你再看下专栏的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555372491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85485,"user_name":"朱颜空","can_delete":false,"product_type":"c1","uid":1500359,"ip_address":"","ucode":"7C16A7E3671B72","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/c7/1c88a4d7.jpg","comment_is_top":false,"comment_ctime":1555074794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555074794","product_id":100017301,"comment_content":"作者你好，我拉取了你的示例代码，c-c++版本的，发现代码风格有点奇怪，跟主流的代码风格都不太一样，如果能规范一些就更好了。","like_count":0},{"had_liked":false,"id":85386,"user_name":"外星小小盆友🍓","can_delete":false,"product_type":"c1","uid":1470766,"ip_address":"","ucode":"FE517609D955E9","user_header":"https://static001.geekbang.org/account/avatar/00/16/71/2e/0d18ea65.jpg","comment_is_top":false,"comment_ctime":1555050319,"is_pvip":false,"replies":[{"id":"31007","content":"slow=slow.next;<br>fast=fast.next.next; 这里要判断下fast.next是否为null","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555380256,"ip_address":"","comment_id":85386,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555050319","product_id":100017301,"comment_content":"老师您好，我写了一段检测环的代码，第5行按照注释里我原先的写法，会报空指针异常，这是为什么呢？<br>        &#47;&#47;检测环<br>\tpublic static boolean CheckCircle(Node node)<br>\t{<br>\t\tif(node==null)<br>\t\t\treturn false;<br>\t\tNode slow=node,fast=node.next; &#47;&#47;原先这样写的：fast=node,slow=node;为什么这样就有问题呢？<br>\t\twhile(slow!=null&amp;&amp;fast!=null)<br>\t\t{<br>\t\t\tslow=slow.next;<br>\t\t\tfast=fast.next.next;<br>\t\t\tif(fast==null)&#47;&#47;到达链表尾部，链表无环<br>\t\t\t{<br>\t\t\t\treturn false;<br>\t\t\t}<br>\t\t\telse if(slow==fast)&#47;&#47;链表有环<br>\t\t\t{<br>\t\t\t\treturn true;<br>\t\t\t}<br>\t\t}<br>\t\treturn false;<br>\t}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446651,"discussion_content":"slow=slow.next;\nfast=fast.next.next; 这里要判断下fast.next是否为null","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555380256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84789,"user_name":"黑洞","can_delete":false,"product_type":"c1","uid":1451364,"ip_address":"","ucode":"840A4330B1B2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","comment_is_top":false,"comment_ctime":1554907451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554907451","product_id":100017301,"comment_content":"@五月寻仙，STL库中的deque就是结合数组和链表，可以参考STL源代码。","like_count":0},{"had_liked":false,"id":84215,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1554805284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554805284","product_id":100017301,"comment_content":"谈起哨兵, 直接联想到redis集群模式的哨兵模式, 起到主备切换作用.  java提供的Optional&lt;T&gt;类有点也是可以处理边界问题, 类似哨兵","like_count":0},{"had_liked":false,"id":82819,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1122544,"ip_address":"","ucode":"42D2C732E3E6EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/f0/84f3cbe0.jpg","comment_is_top":false,"comment_ctime":1554335481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554335481","product_id":100017301,"comment_content":"链表:理解指针用对指针，注意边界设置哨兵。不懂就画勤练代码，由小见大亦如人品～注:五个典型链表练习题，反转环检测，合并倒删求中。","like_count":0},{"had_liked":false,"id":82372,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1411645,"ip_address":"","ucode":"BF590964828F8C","user_header":"https://static001.geekbang.org/account/avatar/00/15/8a/3d/5f29e927.jpg","comment_is_top":false,"comment_ctime":1554194905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554194905","product_id":100017301,"comment_content":"4.2笔记<br>链表代码技巧<br>1.理解指针引用的含义<br>某个变量赋值给指针，就是将这个变量地址赋值给指针，或者说指针中存储的是这个变量的地址<br>2.插入结点注意顺序，删除记得释放内存<br>3.利用哨兵结点简化操作<br>对于链表插入第一个和删除最后一个结点，都需要特殊处理(插入前判空，删除前判空)，但利用哨兵结点做头结点，那就可以实现插入删除全部统一(至少都有一个哨兵结点一直存在，不用判断)<br>这叫做带头结点的链表<br>注:哨兵解决的是边界问题，不直接参与业务逻辑，也就是将边界值复制给哨兵，123456，哨兵<br>就是1和6，特别是循环中，占用性能，精简代码<br>4.特别留意边界条件处理<br>一般出错最多的地方在于边界，还有专门的边界测试呢，链表中2注意空节点，1节点，2节点，头尾节点处理<br>5.没有思路，试试画图举例方法<br>写链表代码是最考验逻辑思维能力的，面试常要求手写链表代码<br>6.链表重点题型<br>a.单链表反转<br>b.链表中环的检测<br>c.两个有序的链表合并<br>d.删除链表倒数第 n 个结点<br>e.求链表的中间结点<br>lc206   141   21  19  876","like_count":0},{"had_liked":false,"id":80049,"user_name":"beiliu","can_delete":false,"product_type":"c1","uid":1292128,"ip_address":"","ucode":"06E1EC1244A52B","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLmBgic9UlGySyG377pCVzNnbgsGttrKTCFztunJlBTDS32oTyHsJjAFJJsYJyhk9cNE5OZeGKWJ6Q/132","comment_is_top":false,"comment_ctime":1553600372,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1553600372","product_id":100017301,"comment_content":"第2个思考题，如果链表中有环是不是就说明最后一个结点(按照链表长度来计算出最后一个结点)的后继结点不为nil，那么可不可以反过来认为只要最后一个结点不为nil，那么这个链表中一定有环呢？","like_count":0},{"had_liked":false,"id":79429,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1553483034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553483034","product_id":100017301,"comment_content":"老师，您好！想请教两个问题：<br>问题一：文中提到，指针丢失会导致内存泄露，老师能解释下如何导致的内存泄露吗？<br>问题二：讲哨兵那块的内容时，说代码二比代码一成功省掉了一次比较i&lt;n，这句不大理解，代码二中，while的条件a[i]!=key也是在比较吧？<br>这两个问题是某个用户的留言，您好像没有解答，我也好奇也特别想知道","like_count":0},{"had_liked":false,"id":79130,"user_name":"Tomcat","can_delete":false,"product_type":"c1","uid":1346364,"ip_address":"","ucode":"B270CEED693256","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/3c/0462eca7.jpg","comment_is_top":false,"comment_ctime":1553362890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553362890","product_id":100017301,"comment_content":"链表的概念是理解链表和指针的关键所在。<br>说白了，不管是指针还是信用，就是所指对象的内存地址，换句话说，结点后面那个next，保存的是下一个结点的内存地址，只有这样子，才能把后面的连接起来，才能叫做链表嘛！不知道你懂了没！<br>结合画图来理解概念，这样才能事半功倍！","like_count":0},{"had_liked":false,"id":77765,"user_name":"gushitong","can_delete":false,"product_type":"c1","uid":1033812,"ip_address":"","ucode":"FB266646A31F4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/54/fb1e84a3.jpg","comment_is_top":false,"comment_ctime":1552995741,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552995741","product_id":100017301,"comment_content":"「虽然不是我想的，但是解法真心优秀」<br>解题思想：快指针比慢指针快N个单元，慢指针指向待删除节点的前节点.<br>public ListNode removeNPosition(int n, ListNode original){<br>    if(original == null){<br>        return null;<br>    }<br>    int i = 0;<br>    ListNode fast = original;<br>    ListNode slow = original;<br>    while ( i == n-1){<br>        fast = fast.next;<br>        i++;<br>    }<br>    if(fast == null){<br>        return fast.next;<br>    }<br>    while( fast.next != null){<br>        fast = fast.next;<br>        slow = slow.next;<br>    }<br>    slow.next = slow.next.next;<br>    return original;<br>}","like_count":0},{"had_liked":false,"id":77544,"user_name":"珠闪闪","can_delete":false,"product_type":"c1","uid":1300447,"ip_address":"","ucode":"45BE0D586A3839","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eov38ZkwCyNoBdr5drgX0cp2eOGCv7ibkhUIqCvcnFk8FyUIS6K4gHXIXh0fu7TB67jaictdDlic4OwQ/132","comment_is_top":false,"comment_ctime":1552961199,"is_pvip":false,"replies":[{"id":"28337","content":"帮我改下 多谢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552970886,"ip_address":"","comment_id":77544,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552961199","product_id":100017301,"comment_content":"王老师，github上链表实现的五个题目，cpp实现中构造链表在堆上申请空间后，没有释放链表节点的空间，会造成内存泄漏~","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443769,"discussion_content":"帮我改下 多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552970886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77376,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1552914723,"is_pvip":false,"replies":[{"id":"28291","content":"这节课没有你贴的这段代码呀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552958585,"ip_address":"","comment_id":77376,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552914723","product_id":100017301,"comment_content":"老师，数组这段代码，在指定位置上新添元素，<br> for( int i = count; i &gt; index; --i){<br>            data[i] = data[i - 1];<br>        }<br>到时候数组中会出现平移的空洞啊，下次再新添的时候，不对了啊<br>比如长度为9的数组，  0-5有数据，6-8没数据  有数据，在3位置插入数据之后，<br>三四五位置上的数据被移动到8 7 6 这三个位置上了导致4 5 这两个位置是空的，下次再执行添加的时候<br>逻辑上不对啊？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443705,"discussion_content":"这节课没有你贴的这段代码呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552958585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73563,"user_name":"炫风","can_delete":false,"product_type":"c1","uid":1234761,"ip_address":"","ucode":"AE91805C86486F","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/49/f9b81bc1.jpg","comment_is_top":false,"comment_ctime":1551926615,"is_pvip":false,"replies":[{"id":"27364","content":"C++跟Java的语法还是挺类似的。我代码里面并没有涉及到Java的高级语法的。你可以找本最简单的Java书，只把里面最基本的语法看一下就ok了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552357415,"ip_address":"","comment_id":73563,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551926615","product_id":100017301,"comment_content":"学习时有个疑惑还希望老师解答一下：我是学C++的，发现有的文稿中会有JAVA等其他语言，现在自己看起来不是很明白，有点难理解...所以想问老师，在学习课程的时候，需要先把文稿中示范的语言学习透彻吗？但是觉得这样太花时间，不知道老师是否有更好的建议，谢谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442156,"discussion_content":"C++跟Java的语法还是挺类似的。我代码里面并没有涉及到Java的高级语法的。你可以找本最简单的Java书，只把里面最基本的语法看一下就ok了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552357415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73555,"user_name":"___","can_delete":false,"product_type":"c1","uid":1228457,"ip_address":"","ucode":"F6B9BAB2F1B95E","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/a9/dea56349.jpg","comment_is_top":false,"comment_ctime":1551924018,"is_pvip":false,"replies":[{"id":"27366","content":"这个有点复杂，你还是网上搜搜吧，我留言里比较难说清楚：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552357721,"ip_address":"","comment_id":73555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551924018","product_id":100017301,"comment_content":"还有一个问题是: 在检测中间节点的时候快慢指针都是从第一个结点开始遍历的,但是在检测环的时候慢指针是从第一个结点开始,快指针是从第二个结点开始的,这是为什么? 有什么区别吗? 二者的优劣?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442153,"discussion_content":"这个有点复杂，你还是网上搜搜吧，我留言里比较难说清楚：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552357721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73552,"user_name":"___","can_delete":false,"product_type":"c1","uid":1228457,"ip_address":"","ucode":"F6B9BAB2F1B95E","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/a9/dea56349.jpg","comment_is_top":false,"comment_ctime":1551923840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551923840","product_id":100017301,"comment_content":"&#47;&#47; 检测环-足迹法<br>\tpublic static boolean _checkCircle(Node list) {<br>\t\t&#47;&#47;自己实现的方式<br>\t\tMap&lt;Node, Integer&gt; nodeMap = new HashMap&lt;&gt;();<br>\t\tNode p = list;<br>\t\tInteger count;<br>\t\twhile (p != null) {<br>\t\t\tcount = nodeMap.get(p);<br>\t\t\tif (count != null) {<br>\t\t\t\treturn true;<br>\t\t\t} else {<br>\t\t\t\tnodeMap.put(p, ++count);<br>\t\t\t\tp = p.next;<br>\t\t\t}<br>\t\t}<br>&#47;&#47;\t\t\t网上的思路,只提供核心的代码\t\t<br>&#47;&#47;\t\t\tInteger count=0;\t\t<br>&#47;&#47;\t\t\tif (nodeMap.containsKey(p)) {<br>&#47;&#47;\t\t\t\treturn true;<br>&#47;&#47;\t\t\t} else {<br>&#47;&#47;\t\t\t\tnodeMap.put(p, ++count);<br>&#47;&#47;\t\t\t\t_checkCircle(p.next);<br>&#47;&#47;\t\t\t}<br>\t\treturn false;<br>\t}<br><br>还请作者帮忙看看,是否能行? 还有分析一下那种实现方式的优劣","like_count":0},{"had_liked":false,"id":73419,"user_name":"1024","can_delete":false,"product_type":"c1","uid":1086407,"ip_address":"","ucode":"DCC31F6EC54F43","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/c7/86352ccc.jpg","comment_is_top":false,"comment_ctime":1551881754,"is_pvip":false,"replies":[{"id":"26788","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551923972,"ip_address":"","comment_id":73419,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551881754","product_id":100017301,"comment_content":"2刷，发现那几个思考题的思路都忘了，而且链表的指针操作也生疏了。但还是坚持coding了一遍。<br>解题思路有很多，但是对链表的操作并不是很多，总结如下：<br>链表的几个操作<br>  p = head; &#47;&#47;这是指将p这个指针指向 head这个指针指向的对象(内存)，即head和p同时指向同一个对象<br>  p = head.next; &#47;&#47; p指向 head 这个对象的属性next（也为Node类型）, 从链表的角度看，p指向了链表的第二个节点。单独操作p，则是对原始链表的“部分”链进行操作<br><br> p = p.next; &#47;&#47; p 指向p 本身的next属性，以链表为参照物，指针向后移动一位,链表结构没有变<br> p = p.next.next &#47;&#47; 以链表为参照物，指针向后移动2位，链表结构没有变<br> <br> p.next = q;  &#47;&#47;将p.next指向 q这个指针指向的对象，作为链表，就是将q指向的链表&quot;挂&quot;在了p指向的节点后<br>p.next = q.next; &#47;&#47; 类似上条，将p.next指向 q.next这个指针指向的对象，作为链表，就是将q.next指向的链表&quot;挂&quot;在了p指向的节点后<br> p.next = p.next.next &#47;&#47; p.next 指向 p.next.next 指向的对象，这样就绕过了p.next值向的对象，即为删除p.next指向的对象，即链表删除了一个元素<br><br>---------------------------------------------------<br>不为别的，就是成为更合格的自己","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442076,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551923972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72653,"user_name":"小孩","can_delete":false,"product_type":"c1","uid":1112367,"ip_address":"","ucode":"A7F587FC641E63","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/2f/01b32495.jpg","comment_is_top":false,"comment_ctime":1551685862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551685862","product_id":100017301,"comment_content":"技巧2提到的p-&gt;next = x;  &#47;&#47; 将 p 的 next 指针指向 x 结点；。。这块也没有看懂，按照前面提到的p-&gt;next=q。这行代码是说，p 结点中的 next 指针存储了 q 结点的内存地址，插入x，我的理解应该是把a-next=x;x-next=b;不应该是这样吗？","like_count":0},{"had_liked":false,"id":72364,"user_name":"马源","can_delete":false,"product_type":"c1","uid":1183937,"ip_address":"","ucode":"9B12311D6BA5A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/c1/18b41ced.jpg","comment_is_top":false,"comment_ctime":1551597740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551597740","product_id":100017301,"comment_content":"5个常用操作:<br>2，4，5 快慢指针(留言区某大神提到的)<br>1，3画图，理清插入删除节点的顺序<br><br>写代码啦！！！","like_count":0},{"had_liked":false,"id":71209,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551283648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551283648","product_id":100017301,"comment_content":"这一节大概的一些算法题自己也写了大概一遍，的确对链表的学习加深了不少，接下来的就是多练","like_count":0},{"had_liked":false,"id":70490,"user_name":"kang.zhang","can_delete":false,"product_type":"c1","uid":1441821,"ip_address":"","ucode":"D93B1ADA2CA8B2","user_header":"","comment_is_top":false,"comment_ctime":1551106135,"is_pvip":false,"replies":[{"id":"25199","content":"有些语言是需要主动释放内存的。指针丢失之后，就无法主动释放内存了，所以内存泄漏了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551147968,"ip_address":"","comment_id":70490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551106135","product_id":100017301,"comment_content":"问题一：文中提到，指针丢失会导致内存泄露，老师能解释下如何导致的内存泄露吗？<br>====&gt;这块内存数据，唯一的访问入口是指向它的指针，但你把这个指针指向其他内存后，你原有的这块内存就没有访问入口了，永远访问不到，也就无法释放。造成的内存泄漏。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440661,"discussion_content":"有些语言是需要主动释放内存的。指针丢失之后，就无法主动释放内存了，所以内存泄漏了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551147968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69767,"user_name":"yann [扬] :曹同学","can_delete":false,"product_type":"c1","uid":1199315,"ip_address":"","ucode":"C449253263E796","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/d3/365fe5a1.jpg","comment_is_top":false,"comment_ctime":1550835264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550835264","product_id":100017301,"comment_content":"远了头节点的处理本来就和其他处理不一样，我说总是思考不过去，还以为哪来没想明白","like_count":0},{"had_liked":false,"id":69384,"user_name":"任大鹏","can_delete":false,"product_type":"c1","uid":1069049,"ip_address":"","ucode":"75D14B0FC68DA5","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/f9/1f0a9665.jpg","comment_is_top":false,"comment_ctime":1550732371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550732371","product_id":100017301,"comment_content":"单链表反转：在上篇课后题中用以辅助判断回文已经写过，一次遍历原地反转；<br>链表中环的检测：快慢指针分别从head.next和head遍历链表，步长分别为2和1，当两个指针指向同一个结点时，出现环；<br>两个有序的链表合并：主要考察基础的链表操作，算法简单；<br>删除链表倒数第n个结点：第一个指针先遍历n个结点，然后第二个指针从head开始，同第一个指针同步遍历，第一个指针指向空时，第二个指针指向需要删除的结点，注意处理好边界值；<br>求链表的中间结点：依然是快慢指针，上篇判断回文时用以找中间结点。<br>可能之前刷leetcode有印象，没有刻意背算法，自然能想到，看来刷题还是有用的~o(〃&#39;▽&#39;〃)o","like_count":0},{"had_liked":false,"id":69305,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1389604,"ip_address":"","ucode":"50616ED68A5B40","user_header":"https://static001.geekbang.org/account/avatar/00/15/34/24/34ca1d23.jpg","comment_is_top":false,"comment_ctime":1550714348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550714348","product_id":100017301,"comment_content":"链表是否有环我能想到的方法就是两个指针，一个一次走一步一个一次走两步，这样如果有环的话快的指针就肯定会追上走的慢的指针","like_count":0},{"had_liked":false,"id":67711,"user_name":"nullz","can_delete":false,"product_type":"c1","uid":1156066,"ip_address":"","ucode":"A9D997C41D6DE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/e2/d2cf7a81.jpg","comment_is_top":false,"comment_ctime":1550227302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550227302","product_id":100017301,"comment_content":"Re 五岳寻仙<br>HashMap就是数组+链表，相同hash的结点在一个链表上，查找一个键值对，先算hash，定位到链表，再查找链表","like_count":0},{"had_liked":false,"id":67010,"user_name":"241917","can_delete":false,"product_type":"c1","uid":1147338,"ip_address":"","ucode":"18CBF19CD1565D","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/ca/462869ad.jpg","comment_is_top":false,"comment_ctime":1550055333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550055333","product_id":100017301,"comment_content":"解决连连看问题可以用到哨兵来减少边界条件判断。","like_count":0},{"had_liked":false,"id":66068,"user_name":"kim","can_delete":false,"product_type":"c1","uid":1193203,"ip_address":"","ucode":"D839AE8BD4520B","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/f3/37264433.jpg","comment_is_top":false,"comment_ctime":1549869686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549869686","product_id":100017301,"comment_content":"老师，带头链表（哨兵）如何统一插入和删除，没有理解，可以举一实例吗? ","like_count":0},{"had_liked":false,"id":65719,"user_name":"哈希碰撞","can_delete":false,"product_type":"c1","uid":1244496,"ip_address":"","ucode":"DF82678E60095D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM49ONuR097wB6LqR8nn5kWiaQiaPic1y8UznibDOScQergTj5qeL6zQ4bIicYEkqlMiash3CUCAYmSt9tQA/132","comment_is_top":false,"comment_ctime":1549600468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549600468","product_id":100017301,"comment_content":"比如，什么P节点 next=x 之类的具体代表什么、代表什么应用场景？如何“开窍”？ ","like_count":0},{"had_liked":false,"id":65595,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1549474088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549474088","product_id":100017301,"comment_content":"链表中存在环的结构，用代码实现数据结构怎么实现的。每个Node只有一个next，怎么指向多个Node","like_count":0},{"had_liked":false,"id":65465,"user_name":"Pre-Y","can_delete":false,"product_type":"c1","uid":1396900,"ip_address":"","ucode":"A13D13A37F3ABC","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/a4/8d2e454b.jpg","comment_is_top":false,"comment_ctime":1549376429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549376429","product_id":100017301,"comment_content":"今日份的打卡。<br>上学期老师也重点讲了链表，也一直叫我们手写代码，再在课下自己运行检查。🤔当堂觉得代码没问题，一运行就各种小错误😂。新的一年也要不断练习，决不能听懂就算了。","like_count":0},{"had_liked":false,"id":65460,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1247009,"ip_address":"","ucode":"497A8FB4059387","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/21/5153d403.jpg","comment_is_top":false,"comment_ctime":1549373649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549373649","product_id":100017301,"comment_content":"代码二如果key刚好在数组最后一位的话会返回-1","like_count":0},{"had_liked":false,"id":64719,"user_name":"Sky","can_delete":false,"product_type":"c1","uid":1392585,"ip_address":"","ucode":"4C5A5AB73E8B90","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/c9/1ccefb9a.jpg","comment_is_top":false,"comment_ctime":1548872250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548872250","product_id":100017301,"comment_content":"将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针<br><br>在c语言中，这里的变量应该必须是一个地址，地址才能赋值给指针吧？","like_count":0},{"had_liked":false,"id":64503,"user_name":"xiao皮孩。。","can_delete":false,"product_type":"c1","uid":1367499,"ip_address":"","ucode":"27AE899819D10F","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/cb/23b114a7.jpg","comment_is_top":false,"comment_ctime":1548813425,"is_pvip":false,"replies":[{"id":"24185","content":"1. 指针丢失之后，有些结点没有释放内存<br>2. 少了一个判断语句","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550480471,"ip_address":"","comment_id":64503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548813425","product_id":100017301,"comment_content":"问题一：文中提到，指针丢失会导致内存泄露，老师能解释下如何导致的内存泄露吗？<br>问题二：讲哨兵那块的内容时，说代码二比代码一成功省掉了一次比较i&lt;n，这句不大理解，代码二中，while的条件a[i]!=key也是在比较吧？<br><br>老师给解答下吧，困惑中。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438032,"discussion_content":"1. 指针丢失之后，有些结点没有释放内存\n2. 少了一个判断语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550480471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64437,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1548778976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548778976","product_id":100017301,"comment_content":"单链表反转：<br>用三个指针，循环遍历<br><br>链表中环的检测：<br>快慢指针<br><br>两个有序的链表合并：<br>while循环，比大小，合并到另一个链表中，这道题有一个扩展题目，合并多个有序链表，思路是可以将所有表头放到一个堆排序上，每次取出堆头，然后将取出的next再放到堆排序中。<br><br>删除链表倒数第 n 个结点：<br>先让一个指针走n+1步，第二个指针开始走当第一个指针走到底的时候，第二个指针指向倒数n+1个，然后删除next。<br><br>求链表的中间结点：<br>快慢指针，一个走一步，一个一次走两步。","like_count":0},{"had_liked":false,"id":64069,"user_name":"目人可分😁","can_delete":false,"product_type":"c1","uid":1155558,"ip_address":"","ucode":"37487B09CCDEB8","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/e6/c0577a54.jpg","comment_is_top":false,"comment_ctime":1548659526,"is_pvip":true,"replies":[{"id":"24191","content":"多谢。把链表的代码多抄几遍，看懂，能默写。慢慢来。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550480829,"ip_address":"","comment_id":64069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548659526","product_id":100017301,"comment_content":"因为最近一段时间在忙其他事情，所以现在才看到链表这块，我发现了一个我存在的最大的问题，比如翻转、中环、是否回文 用链表的实现方式，我都是冥思苦想之后 写出了很复杂的逻辑去实现功能的，我缺乏系统的提取里面的公式性质的逻辑，其实我知道大体的逻辑应该是怎么样的，但是在具体的实现过程中，我却不知道该如何做，看到老师您的实现之后，我发现我的逻辑思维真的很差劲，好像我是一种线性的思维方式，就是直接想结果，但是无论在脑海中去进行模拟还是手动画图 我都会迷失，一次又一次，我反转、回文 都写了很多的代码，中间磕磕碰碰的，一次又一次的怀疑自己，到最后实现了，好像是那么回事一样，但是看到老师您的实现方式，我有种似曾相识的感觉，感觉自己似乎想到了，但是最终实现的时候，会被一些其他因素去影响着，真的该提高下逻辑思维了，总结一句话，知道大概的方式，但是不会总结、提炼出核心公式，这个是我目前面临的最主要的问题，望老师指点迷津","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437841,"discussion_content":"多谢。把链表的代码多抄几遍，看懂，能默写。慢慢来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550480829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63050,"user_name":"双子座的马克思","can_delete":false,"product_type":"c1","uid":1150663,"ip_address":"","ucode":"4D43FB644E9870","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/c7/6d08d502.jpg","comment_is_top":false,"comment_ctime":1548236993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548236993","product_id":100017301,"comment_content":"指针是链表节点的一个重要组成部分，存储了上一个或下一个节点的内存地址。","like_count":0},{"had_liked":false,"id":62889,"user_name":"承香墨影","can_delete":false,"product_type":"c1","uid":1023750,"ip_address":"","ucode":"4D6A4D6E1ED29F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/06/287d77dd.jpg","comment_is_top":false,"comment_ctime":1548203114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548203114","product_id":100017301,"comment_content":"如果要删除结点 p 的后继结点，我们只需要一行代码就可以搞定。<br>p-&gt;next = p-&gt;next-&gt;next;<br>--------------<br>这个一行代码的实现，会不会引起内存泄露？<br>原本的a-&gt;b-&gt;c，删除b后变成a-&gt;c了，但是原本的b还是指向的c，就是b-&gt;c，这个关系不斩断，是下次再删除c的时候，依然有一个对象b在指向c，c就有可能不被回收吧。我这样理解对吗？","like_count":0},{"had_liked":false,"id":62039,"user_name":"Geek_0a2d1e","can_delete":false,"product_type":"c1","uid":1281667,"ip_address":"","ucode":"6EBD1BFA096AE1","user_header":"","comment_is_top":false,"comment_ctime":1547889942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547889942","product_id":100017301,"comment_content":"老师，我对思考题有一个可能比较低级的疑惑，我自己看完题目是用栈实现的，看了其他的小伙伴的快慢指针答案，确实没想到可以这样做，但是这样做不是改变了的链表的原有结构了么","like_count":0},{"had_liked":false,"id":61445,"user_name":"李大飞","can_delete":false,"product_type":"c1","uid":1052889,"ip_address":"","ucode":"3264FA5EE734A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/d9/6d456c8e.jpg","comment_is_top":false,"comment_ctime":1547700137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547700137","product_id":100017301,"comment_content":"老师讲的很棒 点赞！话不多说 我去写练习代码了。。","like_count":0},{"had_liked":false,"id":58745,"user_name":"hiyanxu","can_delete":false,"product_type":"c1","uid":1221750,"ip_address":"","ucode":"FA46A318154812","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/76/585dc6b3.jpg","comment_is_top":false,"comment_ctime":1547187928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547187928","product_id":100017301,"comment_content":"因为自己用C语言实现过几遍链表，写下我自己的理解，有不对的地方希望老师批评指正。<br>1、充分理解指针和地址：<br>例如：int *p = i;（或者int *p; p = &amp;i）  表示将指针p指向i。<br>在应用时可以通过*p的方式表示i变量。<br>2、充分理解结构体和结构体指针：<br>因为在链表中不可避免的需要用到结点，而链表的节点最起码需要一个数据域和一个next指针域。<br>例如：<br>typedef struct node{<br>    int data;<br>    struct node *next;<br>}NODE, *PNODE;<br>其中，NODE表示struct node的别名；PNODE表示struct node *的别名，表示是node的结构体指针类型。<br>访问数据的方式：<br>（1）指针访问：p-&gt;next;  表示访问p的next指针域<br>（2）结构体访问：(*p).next;  同样表示访问next指针域<br>3、链表和结点的关系：<br>因为链表是由结点构成的，结点是结构体struct node类型，但是链表没有专门的结构体类型，不像栈、队列等需要一个结构体去作为对链表的访问方式等做限制。<br>4、就我个人而言，还需要理解malloc内存分配函数（其他人可能就不需要了）：<br>malloc是内存申请函数，返回一个空指针类型，所以，在使用时往往会在malloc前面加上一个指针类型做强制转换。<br>例如：PNODE p = (PNODE)malloc(sizeof(NODE))<br>欢迎老师批评指正哈","like_count":0},{"had_liked":false,"id":58475,"user_name":"小明root","can_delete":false,"product_type":"c1","uid":1231573,"ip_address":"","ucode":"BE080897AC53DB","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/d5/a2cd57c9.jpg","comment_is_top":false,"comment_ctime":1547088186,"is_pvip":false,"replies":[{"id":"21862","content":"你们自己写吧：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547709866,"ip_address":"","comment_id":58475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547088186","product_id":100017301,"comment_content":"精选的5个链表算法是后边会逐个讲解还是说帮我们精选好了常见的5个，我们自己去写？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436078,"discussion_content":"你们自己写吧：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547709866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56594,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1001099,"ip_address":"","ucode":"3C1FE3153BBDA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/8b/97601f22.jpg","comment_is_top":false,"comment_ctime":1546502432,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546502432","product_id":100017301,"comment_content":"跟着老师的文章，开始更新一系列有关数据结构与算法的博客，用输出倒逼输入：<br>https:&#47;&#47;wangwei.one&#47;posts&#47;java-data-structures-and-algorithms-linkedlist.html","like_count":0},{"had_liked":false,"id":56322,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1546421717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546421717","product_id":100017301,"comment_content":"哨兵有点类似checkpoint一样的东西吧","like_count":0},{"had_liked":false,"id":56303,"user_name":"黄淮江客.","can_delete":false,"product_type":"c1","uid":1247553,"ip_address":"","ucode":"4D40181BA767DC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/41/d1928f5c.jpg","comment_is_top":false,"comment_ctime":1546418848,"is_pvip":false,"replies":[{"id":"20495","content":"哈哈😄 也可以有啊 有点循环单链表的意思","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546567819,"ip_address":"","comment_id":56303,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546418848","product_id":100017301,"comment_content":"单链表中为啥会有环的存在？合理吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434979,"discussion_content":"哈哈😄 也可以有啊 有点循环单链表的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546567819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56175,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1546400036,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546400036","product_id":100017301,"comment_content":" 使用快慢指针进行链表的各种操作。<br>        边界情况，需要对插入第一个节点，和删除最后一个节点进行特殊处理。<br>        可以使用一个哨兵节点来处理边界情况。<br>        对链表进行一个个插入，相当于栈的插入操作。<br>        头指针就是栈的最上面的部分，第一个节点。<br>        经常用来检查链表代码是否正确的边界条件有这样几个：<br>        如果链表为空时，代码是否能正常工作？<br>        如果链表只包含一个结点时，代码是否能正常工作？<br>        如果链表只包含两个结点时，代码是否能正常工作？<br>        代码逻辑在处理头结点和尾结点的时候，是否能正常工作？","like_count":0},{"had_liked":false,"id":54836,"user_name":"小兵","can_delete":false,"product_type":"c1","uid":1221871,"ip_address":"","ucode":"495F5D81E3AC9A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/ef/3d27997e.jpg","comment_is_top":false,"comment_ctime":1545968164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545968164","product_id":100017301,"comment_content":"新手一枚，经常会有一些可能在日后很可笑的问题。<br><br>我理解链表是像前文中数组一样非常基础的数据结构，但是 python 这样的语言中并没有直接的链表类。那么依照本文链表的特征自己写的链表类，与比如C语言中基础的链表，有什么区别吗？<br><br>还是说，数据结构需要重点关注的是结构特征？","like_count":0},{"had_liked":false,"id":53143,"user_name":"SylvainHuang","can_delete":false,"product_type":"c1","uid":1227093,"ip_address":"","ucode":"34373F93943DB6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ2nslShe7r4atUhX70usmgRdg56Apkc7MByBZmT293mmBgh9KVMibsV8pNQ2KWuTTNqkicfB2TJvicw/132","comment_is_top":false,"comment_ctime":1545611795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545611795","product_id":100017301,"comment_content":"文中哨兵一段提到的判断数组最后一个值是否等于key，这里我觉得稍微有一点问题，如果最后一个值等于，但中间也有一个值等于key，结果就会又问题，所以即使相等，下面的循环也应该执行，再在循环外加判断，复杂度也没变。","like_count":0},{"had_liked":false,"id":52904,"user_name":"Robin","can_delete":false,"product_type":"c1","uid":1144283,"ip_address":"","ucode":"5B81F6BDFD31BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/db/3ff8af9d.jpg","comment_is_top":false,"comment_ctime":1545549365,"is_pvip":false,"replies":[{"id":"19232","content":"paper","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1545582505,"ip_address":"","comment_id":52904,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1545549365","product_id":100017301,"comment_content":"老师，讲“举例画图”的时候用的什么工具画的图呢？想了解下，谢谢。","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433998,"discussion_content":"paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545582505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52766,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1545510418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545510418","product_id":100017301,"comment_content":"首先先写一个自己对于思考题的想法：<br>我之前学习过 two-pointers 的算法。大致的问题是给你一个递增的序列，然后让你在这个序列中找两个数 a 、b，使它们两个相加的和为 m 。<br><br>如果用暴力，直接两个 for。但是就像这里说的，哨兵算法提供了一个更为简洁的方案。因为它是递增序列，所以我们可以设置头尾两个指针 l、r，然后判断 l+r&lt;m 还是 l+r&gt;m 来移动不同的指针。所以这样的话时间复杂度就为 O(N) 了！！！所以哨兵算法还是很神奇的！！！<br><br>课程笔记：<br>07 | 如何轻松写出正确的链表代码<br>指针 &amp; 引用<br>其实都差不多，都是指对象内存空间的地址。<br>将某个变量赋值给指针，其实就是将变量的地址赋值给指针。指针中存储了这个变量的地址，指向它就可以找到这个变量。<br><br>哨兵结点<br>其实有哨兵结点的链表就是有带头结点的链表，只不过这里不存东西。<br><br>留意边界条件处理<br>1. 链表为空时，能否正常工作<br>2. 只包含一个结点时，….<br>3. 只包含两个结点时，….<br>4. 代码逻辑在处理头结点和尾结点的时候，….<br><br>举例画图，辅助思考<br>举例法<br>找一个具体的例子，然后将它画在纸上，释放一些脑容量，然后留更多的给逻辑去思考。<br>比如说作者举的往单链表中插入一个数据的操作，可以画出插入前和插入后的图示。<br><br>然后再看图写代码，这样就会简单很多。然后写完代码之后也可以举几个例子，画在纸上，然后跟着走一遍，也会很容易发现代码中的 bug。<br><br>多写多练，没有捷径<br>把常见的链表操作自己多写几遍，出问题就一点点调试，熟能生巧！<br><br>5 个常见的链表操作：<br>1）单链表反转<br>2）链表中环的检测<br>3）两个有序链表的合并<br>4）删除链表倒数第 n 个结点<br>5）求链表的中间结点","like_count":0},{"had_liked":false,"id":51446,"user_name":"yann [扬] :曹同学","can_delete":false,"product_type":"c1","uid":1199315,"ip_address":"","ucode":"C449253263E796","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/d3/365fe5a1.jpg","comment_is_top":false,"comment_ctime":1545183453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545183453","product_id":100017301,"comment_content":"之前看go和算法里的指针都头疼，索性找本c基础把指针学了一遍，世界清爽了","like_count":0},{"had_liked":false,"id":51140,"user_name":"i 星星","can_delete":false,"product_type":"c1","uid":1178850,"ip_address":"","ucode":"59611338A751E3","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/e2/3d2c57aa.jpg","comment_is_top":false,"comment_ctime":1545120224,"is_pvip":false,"replies":[{"id":"18557","content":"拓扑排序中会讲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185035,"ip_address":"","comment_id":51140,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545120224","product_id":100017301,"comment_content":"麻烦问下环的检测的这种方法和（使用一个节点走一圈如果能回到原地则是环）方法比好在哪？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433305,"discussion_content":"拓扑排序中会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50976,"user_name":"宁宁","can_delete":false,"product_type":"c1","uid":1083057,"ip_address":"","ucode":"C6BDF1F05A33EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/b1/4b5d3a3b.jpg","comment_is_top":false,"comment_ctime":1545095593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545095593","product_id":100017301,"comment_content":"p-&gt;next=p-&gt;next-&gt;next。这行代码表示，p 结点的 next 指针存储了 p 结点的下下一个结点的内存地址。下下这个词重复是有具体含义的，代表p节点所指向下一个节点的下一个节点！","like_count":0},{"had_liked":false,"id":50608,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1545016099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545016099","product_id":100017301,"comment_content":"老师，头指针指向头结点，如果加上哨兵结点之后，就是头指针指向哨兵节点，哨兵结点指向头指针是吗。头指针指的是指向头结点的指针吧","like_count":0},{"had_liked":false,"id":50315,"user_name":"yohann","can_delete":false,"product_type":"c1","uid":1339279,"ip_address":"","ucode":"3DEB12A41849C7","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/8f/b92f69a6.jpg","comment_is_top":false,"comment_ctime":1544950556,"is_pvip":false,"replies":[{"id":"18164","content":"会的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545010324,"ip_address":"","comment_id":50315,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544950556","product_id":100017301,"comment_content":"还有递归方式也可以实现链表的一些操作。不知老师是否会在后面讲到树时讲到递归！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432940,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545010324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50177,"user_name":"田震","can_delete":false,"product_type":"c1","uid":1350745,"ip_address":"","ucode":"E73A1E0EF09030","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/59/e113dac7.jpg","comment_is_top":false,"comment_ctime":1544886402,"is_pvip":false,"replies":[{"id":"18576","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545186296,"ip_address":"","comment_id":50177,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544886402","product_id":100017301,"comment_content":"我的经验是先写链表代码，再写test case，再回改代码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432905,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545186296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49746,"user_name":"youngitachi","can_delete":false,"product_type":"c1","uid":1214582,"ip_address":"","ucode":"88717CA8B8ED64","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","comment_is_top":false,"comment_ctime":1544761994,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544761994","product_id":100017301,"comment_content":"&gt; 但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不 work 了。跟插入类似，我们也需要对于这种情况特殊处理。写成代码是这样子的：<br>```<br>if (head-&gt;next == null) {<br>   head = null;<br>}<br>```<br><br>建议老师把对链表中`最后一个结点`的解释置顶，就是不知道极客时间是否支持这个操作。当时我看到这里的时候就感觉表达容易产生歧义，翻了一下留言，果然有两个人的留言都是在这里理解错了。","like_count":0},{"had_liked":false,"id":49444,"user_name":"spring","can_delete":false,"product_type":"c1","uid":1332098,"ip_address":"","ucode":"AC524F756ED4B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ7FvOBUp2rjibSRJZLDnFTAOonWibbdEOtDJQlGMcmk9ZDWHCbKMVhA9cYa0SvrIVqz9XW3UMW5kg/132","comment_is_top":false,"comment_ctime":1544689291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544689291","product_id":100017301,"comment_content":"老师，您好，学习您的课程受益匪浅，询问个问题，Github中的java代码 检测环代码中，初始化的时候直接Node fast = list就可以了吧？<br>  &#47;&#47; 检测环<br>  public static boolean checkCircle(Node list) {<br>    if (list == null) return false;<br><br>    Node fast = list.next;<br>    Node slow = list;<br><br>    while (fast != null &amp;&amp; fast.next != null) {<br>      fast = fast.next.next;<br>      slow = slow.next;<br><br>      if (slow == fast) return true;<br>    }<br><br>    return false;<br>  }","like_count":0},{"had_liked":false,"id":49125,"user_name":"二十八画生","can_delete":false,"product_type":"c1","uid":1339076,"ip_address":"","ucode":"A58F6A1726B936","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/c4/df9d1126.jpg","comment_is_top":false,"comment_ctime":1544607632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544607632","product_id":100017301,"comment_content":"将链表的增删等原子操作封装为方法，提供接口。用到的时候引用到自己的代码上，即面向接口开发。不需要每次都考虑这些原子操作 。","like_count":0},{"had_liked":false,"id":49067,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1544597986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544597986","product_id":100017301,"comment_content":"链表练习:理解指针，不丢指针，哨兵帮助，边界审查，图来辅助，多写多练。","like_count":0},{"had_liked":false,"id":47368,"user_name":"fei","can_delete":false,"product_type":"c1","uid":1184100,"ip_address":"","ucode":"9776F254B2770B","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/64/9bcdea01.jpg","comment_is_top":false,"comment_ctime":1544120821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544120821","product_id":100017301,"comment_content":"老师你好，我在阅读你的Github上面的示例deleteLastKth时(Java版)，这行代码不是很明白，能不能帮忙解释一下这个是具体针对哪一种情况，谢谢！<br>if(prev == null) {list = list.next;}","like_count":0},{"had_liked":false,"id":47241,"user_name":"AdmaBoy","can_delete":false,"product_type":"c1","uid":1192626,"ip_address":"","ucode":"7B5A1901FB082E","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/b2/e22bb496.jpg","comment_is_top":false,"comment_ctime":1544087097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544087097","product_id":100017301,"comment_content":"我觉得链表这个东西吧，其实挺容易的，我手写了老师之前所说的链表实现LRU缓存，主要还是要对指针有比较好的了解，才行。其他的无非就是多练呗","like_count":0},{"had_liked":false,"id":46899,"user_name":"chilion","can_delete":false,"product_type":"c1","uid":1325600,"ip_address":"","ucode":"6E24757952BD5B","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/20/eefeb0e3.jpg","comment_is_top":false,"comment_ctime":1543999058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543999058","product_id":100017301,"comment_content":"我是一个java开发，结点什么的不知道在java里面是什么，老师能不能用Java给理解理解，毕竟和大部分忍都是使用Java的","like_count":0},{"had_liked":false,"id":46780,"user_name":"narcos","can_delete":false,"product_type":"c1","uid":1244286,"ip_address":"","ucode":"725A8944BAA993","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/7e/0cc5a187.jpg","comment_is_top":false,"comment_ctime":1543980528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543980528","product_id":100017301,"comment_content":"技巧三：哨兵简化实现难度的部分中，老师给出了两段示例代码。虽然看懂了，但是不知道哪里用到了哨兵技巧。读者回复中 optvxq 的回答解答了我的疑惑。有不明白的同学可以看这个回复。希望老师在代码中标注下哪里是哨兵技巧的实现。","like_count":0},{"had_liked":false,"id":45711,"user_name":"jiaobuchongจุ๊บ","can_delete":false,"product_type":"c1","uid":1118938,"ip_address":"","ucode":"0AEE4E579DC3A2","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg","comment_is_top":false,"comment_ctime":1543756213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543756213","product_id":100017301,"comment_content":"老师可以讲一下找出链表中环的起始结点的证明方式吗，最近写了链表中环的检测，但看链表环的起始结点有点困惑😕","like_count":0},{"had_liked":false,"id":44974,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543537117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543537117","product_id":100017301,"comment_content":"11月29日思考题: 对于哨兵机制的思考, 哨兵机制的主要作用就是减少判空或者nul的情况, 这个我想到dubbo代码里对于一些重要对象的都通Holder&lt;***&gt;进行一次封装, 或者用***Wrapper的方式, 这么做的目的除了封装一些公共逻辑之外就是防止对象为空而对程序运行造成不可预期的影响.","like_count":0},{"had_liked":false,"id":44573,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1543458662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543458662","product_id":100017301,"comment_content":"目前只熟悉Python，课程代码看起来费劲，再者数据结构和算法也没有接触过，虽然有九个月学习Python经验，也是挺难的","like_count":0},{"had_liked":false,"id":43806,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1543299759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543299759","product_id":100017301,"comment_content":"C++开发3年，每次面试前花两个小时背链表代码，见笑了，这次无论如何要迈过去","like_count":0},{"had_liked":false,"id":42642,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1257299,"ip_address":"","ucode":"8E56D0618F1B76","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/53/f17cfee2.jpg","comment_is_top":false,"comment_ctime":1542986903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542986903","product_id":100017301,"comment_content":"代码二对比代码一，感觉在最坏的情况下就比一循环次数少一次。。。对于效率的提高，感觉并不会很多的样子","like_count":0},{"had_liked":false,"id":41878,"user_name":"narcos","can_delete":false,"product_type":"c1","uid":1244286,"ip_address":"","ucode":"725A8944BAA993","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/7e/0cc5a187.jpg","comment_is_top":false,"comment_ctime":1542865920,"is_pvip":false,"replies":[{"id":"15058","content":"就是null 不同的表示罢了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542884842,"ip_address":"","comment_id":41878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542865920","product_id":100017301,"comment_content":"老师，请问下 “技巧五：举例画图，辅助思考”中有一幅图，里面的 nil 是什么意思？如果是空的话，为什么不用 null 表示？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429932,"discussion_content":"就是null 不同的表示罢了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542884842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40857,"user_name":"Martin ","can_delete":false,"product_type":"c1","uid":1186025,"ip_address":"","ucode":"6BF9FE945D396A","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/e9/4242ee4a.jpg","comment_is_top":false,"comment_ctime":1542683015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542683015","product_id":100017301,"comment_content":"王老师，我看中环检查和查询中间点都是用的快慢指针的方法，但是在while判断的时候,判断的条件不一样。这里我还是领会不了，能说说吗?","like_count":0},{"had_liked":false,"id":40636,"user_name":"ghostfevil","can_delete":false,"product_type":"c1","uid":1184888,"ip_address":"","ucode":"E7355B2D81C4FE","user_header":"","comment_is_top":false,"comment_ctime":1542638067,"is_pvip":false,"replies":[{"id":"14657","content":"你去github上搜搜 我之前好像见过","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542678232,"ip_address":"","comment_id":40636,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542638067","product_id":100017301,"comment_content":"老师有类似于 算法最佳实践的网站嘛 里面有代码片段的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429577,"discussion_content":"你去github上搜搜 我之前好像见过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542678232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40633,"user_name":"ghostfevil","can_delete":false,"product_type":"c1","uid":1184888,"ip_address":"","ucode":"E7355B2D81C4FE","user_header":"","comment_is_top":false,"comment_ctime":1542637966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542637966","product_id":100017301,"comment_content":"老师有类似于 算法最佳实践的 网站嘛？","like_count":0},{"had_liked":false,"id":40190,"user_name":"追风少年","can_delete":false,"product_type":"c1","uid":1305639,"ip_address":"","ucode":"0467648A908B18","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/27/827015c0.jpg","comment_is_top":false,"comment_ctime":1542545216,"is_pvip":false,"replies":[{"id":"14488","content":"不够通用 常用吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542588966,"ip_address":"","comment_id":40190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542545216","product_id":100017301,"comment_content":"为何c c++ java中没有封装一个链表相关的类库？比如在java中数组有对应集合类型。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429415,"discussion_content":"不够通用 常用吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542588966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39989,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1542429099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542429099","product_id":100017301,"comment_content":"真是太巧妙了，我心思了半天，还是多学习啊","like_count":0},{"had_liked":false,"id":39419,"user_name":"Martin ","can_delete":false,"product_type":"c1","uid":1186025,"ip_address":"","ucode":"6BF9FE945D396A","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/e9/4242ee4a.jpg","comment_is_top":false,"comment_ctime":1542271692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542271692","product_id":100017301,"comment_content":"麻烦问下，LinkedListAlgo的代码有测试代码吗？看了不知道怎么用。","like_count":0},{"had_liked":false,"id":38691,"user_name":"GwO彬","can_delete":false,"product_type":"c1","uid":1228342,"ip_address":"","ucode":"8F6119931893D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/36/a75177f4.jpg","comment_is_top":false,"comment_ctime":1542106977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542106977","product_id":100017301,"comment_content":"单链表反转是不是需要先找出头部节点，不然直接将currentNode=previoudNode那么，currentNode节点之前的节点全部断掉了","like_count":0},{"had_liked":false,"id":38283,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1542015335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542015335","product_id":100017301,"comment_content":"王老师，好<br>关于哨兵的使用，可否理解为给链表增加头或尾指针？如果可以的话，我觉得在上节课的LRU算法实现中，可以设置两个哨兵a：指向头节点；哨兵b:指向倒数第二个节点。这么做的目的就是在链表长度不够的时候，可以很快就能删除尾节点，而不需要通过遍历查找尾结点。哈哈哈~感觉跑题了。","like_count":0},{"had_liked":false,"id":37509,"user_name":"黑喵酱","can_delete":false,"product_type":"c1","uid":1199706,"ip_address":"","ucode":"2ED1A5DD5C2F36","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/5a/4c61cd94.jpg","comment_is_top":false,"comment_ctime":1541632254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541632254","product_id":100017301,"comment_content":"技巧二当中，是否这样就是正确的了？<br><br>p-&gt;next = x;  &#47;&#47; 将 p 的 next 指针指向 x 结点；<br>x-&gt;next = p-&gt;next -&gt; next;  &#47;&#47; 将 x 的结点的 next 指针指向 b 结点；<br><br>谢谢！<br>","like_count":0},{"had_liked":false,"id":37495,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1541607361,"is_pvip":false,"replies":[{"id":"13446","content":"有点复杂 你这个相当于重新构建了一条新的链表 你可以去github上看看我写的 或者网上搜搜","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541641145,"ip_address":"","comment_id":37495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541607361","product_id":100017301,"comment_content":"请问单链表的反转能否这样实现：<br>&#47;&#47; 单链表反转<br>    public static Node reverse(Node list) {<br>        if (null == list) {<br>            return null;<br>        }<br>        Node last = new Node(list.data,null);<br>        while (list.next != null) {<br>            Node next = new Node(list.next.data,last);<br>            last = next;<br>            list = list.next;<br>        }<br>        return last;<br>    }","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428369,"discussion_content":"有点复杂 你这个相当于重新构建了一条新的链表 你可以去github上看看我写的 或者网上搜搜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541641145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37472,"user_name":"付鹏","can_delete":false,"product_type":"c1","uid":1204500,"ip_address":"","ucode":"E1AEDE8FEBB3D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/14/74f558ec.jpg","comment_is_top":false,"comment_ctime":1541599112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541599112","product_id":100017301,"comment_content":"老师怎么说到哨兵，没继续讲后续删除插入最后节点和头节点如何能跟普通节点一样呢","like_count":0},{"had_liked":false,"id":37314,"user_name":"yuerling","can_delete":false,"product_type":"c1","uid":1235297,"ip_address":"","ucode":"C9A20A4A9B7FA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/61/f7a59630.jpg","comment_is_top":false,"comment_ctime":1541549567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541549567","product_id":100017301,"comment_content":"有哨兵的链表，头插入的时候会不会有什么不同呢？","like_count":0},{"had_liked":false,"id":36262,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1541004635,"is_pvip":false,"replies":[{"id":"12888","content":"编译器应该都可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541036265,"ip_address":"","comment_id":36262,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541004635","product_id":100017301,"comment_content":"老师，我对指针这个概念一直觉得很抽象，你说的指针这块看着有点吃力，有没有好点的模型能帮助理解，或者什么编译器能debug一下直观的看到","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427803,"discussion_content":"编译器应该都可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541036265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36189,"user_name":"小兔子乖乖别开门","can_delete":false,"product_type":"c1","uid":1242765,"ip_address":"","ucode":"A2483FDC7ECA68","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/8d/e52bde43.jpg","comment_is_top":false,"comment_ctime":1540970268,"is_pvip":false,"replies":[{"id":"12893","content":"可以理解为指针","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541036759,"ip_address":"","comment_id":36189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540970268","product_id":100017301,"comment_content":"代码二错误：定义find函数返回值类型应该是int吧。<br>一个白痴问题：if（a＝＝null || n&lt;＝0）{return -1;}……里面这个a是指什么啊？数组首地址？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427775,"discussion_content":"可以理解为指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541036759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35857,"user_name":"王小李","can_delete":false,"product_type":"c1","uid":1108833,"ip_address":"","ucode":"64B703781E0A0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/61/45c3a047.jpg","comment_is_top":false,"comment_ctime":1540823921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540823921","product_id":100017301,"comment_content":"inf find(char* a, int n, char key) {<br>老师，这里是不是笔误了","like_count":0},{"had_liked":false,"id":35784,"user_name":"ERROR","can_delete":false,"product_type":"c1","uid":1243507,"ip_address":"","ucode":"588CF98447612F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/73/2a0c56d5.jpg","comment_is_top":false,"comment_ctime":1540799069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540799069","product_id":100017301,"comment_content":"评论里推荐的六道leetcode算法题，我用C#都实现了一遍，代码放在博客里了，地址如下：<br>https:&#47;&#47;www.cnblogs.com&#47;errornull&#47;p&#47;9860724.html","like_count":0},{"had_liked":false,"id":35683,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1540744284,"is_pvip":false,"replies":[{"id":"12702","content":"是地址 也是指针 指针可以与bull比较","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540777575,"ip_address":"","comment_id":35683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540744284","product_id":100017301,"comment_content":"if (head-&gt;next == null) {<br>   head = null;<br>}<br>老师，next存储的不是地址吗，怎么可以和null比较","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427625,"discussion_content":"是地址 也是指针 指针可以与bull比较","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540777575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35573,"user_name":"Wayne","can_delete":false,"product_type":"c1","uid":1256734,"ip_address":"","ucode":"0337F94DD6FBF1","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/1e/cc6ae8ea.jpg","comment_is_top":false,"comment_ctime":1540683212,"is_pvip":false,"replies":[{"id":"12680","content":"那是因为测试粒度太大 并不代表理论上不更快","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540740365,"ip_address":"","comment_id":35573,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540683212","product_id":100017301,"comment_content":"大家对对哨兵那个例子有没有跑一下，不管是复杂度分析，还是工具测试，都没有性能提升，大家的结果呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427580,"discussion_content":"那是因为测试粒度太大 并不代表理论上不更快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540740365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35347,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1540522286,"is_pvip":false,"replies":[{"id":"12745","content":"只有java版本的是我写的 其他都是同学们写的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540812466,"ip_address":"","comment_id":35347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540522286","product_id":100017301,"comment_content":"老师，你好！请问在single_list.c中，函数void insert为何传一个二级指针struct single_list **prev，这个不太理解，请问这个有什么讲究么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427518,"discussion_content":"只有java版本的是我写的 其他都是同学们写的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540812466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34776,"user_name":"Vision","can_delete":false,"product_type":"c1","uid":1235166,"ip_address":"","ucode":"20E137DA43AA55","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/de/1317d6e3.jpg","comment_is_top":false,"comment_ctime":1540295033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540295033","product_id":100017301,"comment_content":"Java中的Hashmap就是数组和链表的结合。","like_count":0},{"had_liked":false,"id":34555,"user_name":"学不动了","can_delete":false,"product_type":"c1","uid":1235562,"ip_address":"","ucode":"6855C982ECC3A8","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/6a/6b96edbd.jpg","comment_is_top":false,"comment_ctime":1540204853,"is_pvip":true,"replies":[{"id":"12306","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540221485,"ip_address":"","comment_id":34555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540204853","product_id":100017301,"comment_content":"老师你好，我对技巧三有疑问，插入一个新节点，如果链表为空的时候 head＝new_node，头节点不是只存链表的首地址嘛？这里的head是指头节点的指针？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427245,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540221485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34451,"user_name":"小疯子","can_delete":false,"product_type":"c1","uid":1235022,"ip_address":"","ucode":"9639FE579DF33E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/4e/b47bc120.jpg","comment_is_top":false,"comment_ctime":1540175158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540175158","product_id":100017301,"comment_content":"只有我觉得这个音频的语速有点快吗？慢慢再扒一遍吧","like_count":0},{"had_liked":false,"id":34358,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1540126230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540126230","product_id":100017301,"comment_content":"阅后留痕<br><br>本节老师分享了，“如何轻松写出正确的链表代码？”这里面的许多技巧，针对编程而言，或者思考问题而言，都可以说是通用的方案。<br>1：理解指针或引用的含义<br>      指针或引用，本质上存储的是变量或者对象的地址<br>2：警惕指针丢失和内存泄漏<br>      内存泄漏，是对应的内存被占用，但是失去的了联系，成为了孤岛<br>3：利用哨兵简化实现难度<br>      提前将特殊的小概率的事情处理掉，免得每次都要多于的处理，减少处理次数的方式，也是性能优化的一种思路<br>4：重点留意边界条件处理<br>      各种数据结构估计都需要注意这一项，临界区也是bug的高发区<br>5：举例画图，辅助思考<br>      这个针对各种事情都比较通用，尤其是比较耗费脑力的事情，一图胜千言<br>6：多写多练，没有捷径<br>      实践这种方式，对于各种技能型知识的掌握是最好的捷径了<br>      精选链表操作<br>      单链表反转<br>      链表中环的检测<br>      连个有序的链表的合并<br>      删除链表倒数第n个节点<br>      求链表的中间节点<br><br>链表这种数据结构，确实比较容易懂，但是想写出好相关的操作代码，确实不易，指针或者引用也是我的薄弱环节，指来指去便记不清该怎么指啦！动物的关节对于动物来讲非常的重要，指针感觉就是链表的关节，链表像一辆火车，每个车厢的连接全靠车厢间的连接轴。<br><br>今天去菜市场买菜，感觉自己变小了，跑到了各种数据结构的内部之中了，菜市场中有数组、链表、栈、队列，路旁边有树和图。","like_count":0},{"had_liked":false,"id":33918,"user_name":"拔剑四顾心惘然","can_delete":false,"product_type":"c1","uid":1246309,"ip_address":"","ucode":"80BC9A68935190","user_header":"","comment_is_top":false,"comment_ctime":1539918393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539918393","product_id":100017301,"comment_content":"代码2，省掉i&lt;n的判断，30万次和15万次，没有数量级的差别，其实效率提升不大","like_count":0},{"had_liked":false,"id":33885,"user_name":"Lx、","can_delete":false,"product_type":"c1","uid":1242788,"ip_address":"","ucode":"C0A701219928AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/a4/353d2dc4.jpg","comment_is_top":false,"comment_ctime":1539915332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539915332","product_id":100017301,"comment_content":"您好老师，对于递归方法实现单链表的反转，时间复杂度怎么分析？<br>public static Node reverseLinkedList(Node node) {<br>    if (node == null || node.next == null) {<br>        return node;<br>    } else {<br>        Node headNode = reverseLinkedList(node.next);<br>        node.next.next = node;<br>        node.next = null;<br>        return headNode;<br>    }<br>}<br>}","like_count":0},{"had_liked":false,"id":33779,"user_name":"斗米担米","can_delete":false,"product_type":"c1","uid":1199203,"ip_address":"","ucode":"35BA47EF3B0C2E","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/63/f5988a98.jpg","comment_is_top":false,"comment_ctime":1539881368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539881368","product_id":100017301,"comment_content":"合并意思不太明白，其余四个https:&#47;&#47;github.com&#47;ZiqiangGe&#47;leetcode_Link","like_count":0},{"had_liked":false,"id":33698,"user_name":"Terry","can_delete":false,"product_type":"c1","uid":1079635,"ip_address":"","ucode":"92BDC3AF7855B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/53/3a824aed.jpg","comment_is_top":false,"comment_ctime":1539855622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539855622","product_id":100017301,"comment_content":"https:&#47;&#47;github.com&#47;go-snail&#47;arithmetic&#47;tree&#47;master&#47;link <br>用golang实现的单链表-增、删、查、遍历、单链表反转(递归、迭代方式)、删除倒数第N个节点<br>用golang实现的链表中环监测、两个有序的链表合并<br>","like_count":0},{"had_liked":false,"id":33600,"user_name":"NEO🍋","can_delete":false,"product_type":"c1","uid":1166817,"ip_address":"","ucode":"802C34758A5185","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/e1/368f872c.jpg","comment_is_top":false,"comment_ctime":1539832198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539832198","product_id":100017301,"comment_content":"老师 经实测 3g可用内存 4核 i7处理器条件下 对9999999规模的数据集 有无哨兵的耗时并无差别<br><br>代码<br><br>        Integer[] array = new Integer[9999999];<br>        for (int i = 0; i &lt; array.length; i++) {<br>            array[i] = (int) (Math.random() * 9999999);<br>        }<br><br>        long start = System.currentTimeMillis();<br>        for (int n = 0; n &lt; 1000; n++) {<br>            find(array, 9999999, 9876);<br>&#47;&#47;            sentinelFind(array, 9999999, 9876);<br>        }<br>        long end = System.currentTimeMillis() - start;<br>        System.out.println(&quot;排序耗时：&quot; + end);","like_count":0},{"had_liked":false,"id":32729,"user_name":"Tron","can_delete":false,"product_type":"c1","uid":1130053,"ip_address":"","ucode":"2C4FC68C80A7DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/45/3879f334.jpg","comment_is_top":false,"comment_ctime":1539680634,"is_pvip":false,"replies":[{"id":"11941","content":"c语言有free函数吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539701850,"ip_address":"","comment_id":32729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539680634","product_id":100017301,"comment_content":"请问老师， 被删除的链表节点 或则 数组节点 如何释放内存呢。 C语言中如果被删除的节点不释放内存的话是否会造成内存泄漏呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426872,"discussion_content":"c语言有free函数吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539701850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32709,"user_name":"djane","can_delete":false,"product_type":"c1","uid":1249032,"ip_address":"","ucode":"5315AA246AFDD8","user_header":"","comment_is_top":false,"comment_ctime":1539674294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539674294","product_id":100017301,"comment_content":"【笔记】<br>技巧一：理解指针或引用的含义<br>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br><br>技巧二：警惕指针丢失和内存泄漏<br>写链表代码的时候，指针指来指去，一会儿就不知道指到哪里了。所以，我们在写的时候，一定注意不要弄丢了指针。同理，删除链表结点时，也一定要记得手动释放内存空间，否则，也会出现内存泄漏的问题。当然，对于像 Java 这种虚拟机自动管理内存的编程语言来说，就不需要考虑这么多了。<br><br>技巧三：利用哨兵简化实现难度<br>哨兵是解决“边界问题”的，不直接参与业务逻辑。<br>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。<br>如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。<br>实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。<br><br>技巧四：重点留意边界条件处理<br>软件开发中，代码在一些边界或者异常情况下，最容易产生 Bug。链表代码也不例外。要实现没有 Bug 的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。<br>用来检查链表代码是否正确的边界条件有这样几个：<br>1.如果链表为空时，代码是否能正常工作？<br>2.如果链表只包含一个结点时，代码是否能正常工作？<br>3.如果链表只包含两个结点时，代码是否能正常工作？<br>4.代码逻辑在处理头结点和尾结点的时候，是否能正常工作？<br><br>技巧五：举例画图，辅助思考<br>画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。<br><br>技巧六：多写多练，没有捷径<br>5 个常见的链表操作：<br>1.单链表反转<br>2.链表中环的检测<br>3.两个有序的链表合并<br>4.删除链表倒数第 n 个结点<br>5.求链表的中间结点","like_count":0},{"had_liked":false,"id":32687,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1244003,"ip_address":"","ucode":"484753EFCB9F4F","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/63/add33f23.jpg","comment_is_top":false,"comment_ctime":1539665159,"is_pvip":false,"replies":[{"id":"11946","content":"前面不是把key放到数组里了吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539702322,"ip_address":"","comment_id":32687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539665159","product_id":100017301,"comment_content":"有个疑问，如果key并不存在于数组a中，那这段代码不是会无限循环？<br><br>&#47;&#47; while 循环比起代码一，少了 i&lt;n 这个比较操作<br>  while (a[i] != key) {<br>    ++i;<br>  }","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426860,"discussion_content":"前面不是把key放到数组里了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539702322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32576,"user_name":"爱笑的人运气都不会太差～","can_delete":false,"product_type":"c1","uid":1257734,"ip_address":"","ucode":"E5DCCDE62BDBB1","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/06/9ad0648a.jpg","comment_is_top":false,"comment_ctime":1539614187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539614187","product_id":100017301,"comment_content":"这个是在单链表内部实现的当前链表的反转，老师帮忙看下<br>public void reversal(){<br>        if(size == 0 || head.next == null){<br>            return;<br>        }<br>        Node pre = null;<br>        Node current = head;<br>        while (current !=null){<br>            Node next = current.next;<br>            &#47;&#47;当前节点指向上一个节点<br>            current.next=pre;<br>            &#47;&#47;当前节点变更为下一次的上一个节点<br>            pre = current;<br>            &#47;&#47;进入到下一个节点<br>            current = next;<br>        }<br>        &#47;&#47;链表遍历完成以后，最后一个null节点的上一个节点就是以前的尾节点，变更为新的头节点<br>        head = pre;<br>       return ;<br>    }<br>最后在设置链表头节点的时候，老师的例子是有个判断当前节点是否是null，然后循环还是要全部跑完，是否是为了方便理解？还有，我这么实现是否存在问题？","like_count":0},{"had_liked":false,"id":32563,"user_name":"coulson","can_delete":false,"product_type":"c1","uid":1125035,"ip_address":"","ucode":"ADBC6AEED866FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/ab/6b2475e9.jpg","comment_is_top":false,"comment_ctime":1539612241,"is_pvip":false,"replies":[{"id":"11887","content":"key肯定在啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539615860,"ip_address":"","comment_id":32563,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539612241","product_id":100017301,"comment_content":"while (a[i] != key) {<br>++i;<br>}<br>如果key不在数组a里面，会报下标越界的！<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426819,"discussion_content":"key肯定在啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539615860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32474,"user_name":"Vodka","can_delete":false,"product_type":"c1","uid":1237937,"ip_address":"","ucode":"4A9A0E4082899A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/b1/95498cff.jpg","comment_is_top":false,"comment_ctime":1539584790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539584790","product_id":100017301,"comment_content":"基础太差了，来点Python 代码就好了","like_count":0},{"had_liked":false,"id":32359,"user_name":"凉爽兄","can_delete":false,"product_type":"c1","uid":1245314,"ip_address":"","ucode":"6248378B5944B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/82/95528a96.jpg","comment_is_top":false,"comment_ctime":1539559754,"is_pvip":false,"replies":[{"id":"11882","content":"c语言需要手动释放 java不用手动释放","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539615449,"ip_address":"","comment_id":32359,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539559754","product_id":100017301,"comment_content":"删除一个节点<br>p-&gt;next=p-&gt;next-&gt;next<br>这里被删除的节点属于被手动释放吗<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426739,"discussion_content":"c语言需要手动释放 java不用手动释放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539615449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32309,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1539522974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539522974","product_id":100017301,"comment_content":"4. 学会作图，举例来解题。<br><br>5. 多练习，先记下题目: 单链表反转，链表环检测，有序链表合并，删除倒数第n个结点，查找链表中间结点。leetcode: 206 141 21 19 876","like_count":0},{"had_liked":false,"id":32307,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1539522284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539522284","product_id":100017301,"comment_content":"<br>1. 指针或引用: 指向目标变量的地址。<br><br>2. 避免指针丢失和内存泄露: 处理链表代码时稍有不慎会会导致指向问题。<br><br>3. 注意边界条件，哨兵处理边界问题。","like_count":0},{"had_liked":false,"id":32298,"user_name":"黑桃K","can_delete":false,"product_type":"c1","uid":1234939,"ip_address":"","ucode":"1439F7F46B4982","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/fb/384ef0a1.jpg","comment_is_top":false,"comment_ctime":1539517887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539517887","product_id":100017301,"comment_content":"总结：<br>写链表内容的几个技巧。<br>根据评论中有人对应的lc题目，需要课后练习，实际本节理论内容不多，但属于练习性质较多。要多沉淀！<br>思考：<br>哨兵问题，需要沉淀，评论中有ios autorelease pool问题，可以研究。同步至git","like_count":0},{"had_liked":false,"id":32202,"user_name":"一叶遮天","can_delete":false,"product_type":"c1","uid":1236035,"ip_address":"","ucode":"179DB86B0334EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/43/f04f5cc9.jpg","comment_is_top":false,"comment_ctime":1539483711,"is_pvip":false,"replies":[{"id":"11748","content":"你看下Java里的LinkedHashMap就全懂了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539528385,"ip_address":"","comment_id":32202,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539483711","product_id":100017301,"comment_content":"老师，我这几天一直在弄那个链表，有个不明白的地方就是双链表相对单链表的优势就是可以访问前驱节点，但是我想不到他的应用场景，姑且拿查找来举例，查找的话肯定要传一个参数来找到我想找到的节点，但是不是还得从头普遍才能找到我想找的节点吗？他这个可以直接访问前驱节点的应用场景到底在哪呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426680,"discussion_content":"你看下Java里的LinkedHashMap就全懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539528385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32193,"user_name":"kaoker","can_delete":false,"product_type":"c1","uid":1115225,"ip_address":"","ucode":"499060AE9A4B2C","user_header":"","comment_is_top":false,"comment_ctime":1539481531,"is_pvip":false,"replies":[{"id":"11752","content":"能具体说下哪个地方看不懂吗？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539528575,"ip_address":"","comment_id":32193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539481531","product_id":100017301,"comment_content":"技巧五中的图我看不懂,能解释一下吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426674,"discussion_content":"能具体说下哪个地方看不懂吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539528575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32115,"user_name":"Jackie","can_delete":false,"product_type":"c1","uid":1179920,"ip_address":"","ucode":"B853ECB3E962C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/10/cb36bfed.jpg","comment_is_top":false,"comment_ctime":1539420237,"is_pvip":false,"replies":[{"id":"11765","content":"第一个和第二个执行的语句个数不同","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539529381,"ip_address":"","comment_id":32115,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539420237","product_id":100017301,"comment_content":"老师，请教个问题。哨兵那个例子，感觉两个是一样的啊，最坏情况是代码一比较n次，代码二比较n-1次，但如果key在数组里，两者是一样的，不存在优劣吧，是不是还有其他我没有体会出来的好处？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426641,"discussion_content":"第一个和第二个执行的语句个数不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539529381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32087,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1539411276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539411276","product_id":100017301,"comment_content":"今天来抽空写下单链表的反转，只有几行代码， 理解起来有点费劲，这个画图写代码真好！这是我发现在一个博客，https:&#47;&#47;blog.csdn.net&#47;qq_37628075&#47;article&#47;details&#47;82285793，我就是按这个图来理解写单链表的反转，发现这反转的逻辑很清晰了，我也留言分享下！今天难道休息下，把单链表，循环单链表，以及双向链表都自己实现了一遍！发现理解更清楚了不少！","like_count":0},{"had_liked":false,"id":31972,"user_name":"程","can_delete":false,"product_type":"c1","uid":1251571,"ip_address":"","ucode":"2710310116A99F","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/f3/d4c0efd2.jpg","comment_is_top":false,"comment_ctime":1539346129,"is_pvip":false,"replies":[{"id":"11590","content":"p后面没有结点了，那也就不存在删除p后面一个元素的问题了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539401558,"ip_address":"","comment_id":31972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539346129","product_id":100017301,"comment_content":"删除链表中p后面的一个元素，如何解决若p为最后一个元素时需要判空的问题？<br>if(p-&gt;next != null)<br>     p-&gt;next = p-&gt;next-&gt;next;","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426587,"discussion_content":"p后面没有结点了，那也就不存在删除p后面一个元素的问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539401558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31839,"user_name":"双","can_delete":false,"product_type":"c1","uid":1031605,"ip_address":"","ucode":"D0AC0A69A611C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bd/b5/b8dfa30a.jpg","comment_is_top":false,"comment_ctime":1539309814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539309814","product_id":100017301,"comment_content":"在检测环的算法中，当快慢指针都在环中时，会有空转的机会出现，这时会转几圈之后才能碰到快慢指针相交，感觉存在无谓的效率消耗，另外就是，如果某个环到达某种条件，快慢指针会不会一直空转下去而不相交呢？造成死循环?","like_count":0},{"had_liked":false,"id":31748,"user_name":"七杯茶","can_delete":false,"product_type":"c1","uid":1236426,"ip_address":"","ucode":"56835BB04CA3A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/ca/add35569.jpg","comment_is_top":false,"comment_ctime":1539277225,"is_pvip":false,"replies":[{"id":"11488","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539310626,"ip_address":"","comment_id":31748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539277225","product_id":100017301,"comment_content":"看到提示了 多了一条判断，无穷大的时候，翻了一倍时间。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426493,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539310626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31746,"user_name":"七杯茶","can_delete":false,"product_type":"c1","uid":1236426,"ip_address":"","ucode":"56835BB04CA3A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/ca/add35569.jpg","comment_is_top":false,"comment_ctime":1539276696,"is_pvip":false,"replies":[{"id":"11486","content":"我看你又发了条留言 是看明白了对吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539310617,"ip_address":"","comment_id":31746,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1539276696","product_id":100017301,"comment_content":"第一次写留言，就是有个疑问，哨兵那个例子，第二个代码怎么就比第一个代码执行快了？哨兵替换了数组最后一个元素，判断条件变为数组的每个值去跟数组最后一个值比较既a[i]和a[n-1]，和第一个代码i&lt;n,有区别吗？？？假如都在数组第一个位置找到匹配值key，那第一个代码找到后也会直接return i返回，而不会继续循环执行n-1次比较啊！（求解疑，初学者。）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426491,"discussion_content":"我看你又发了条留言 是看明白了对吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539310617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160266,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b4/4a/27aba93f.jpg","nickname":"大润","note":"","ucode":"56111928F02BE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2158,"discussion_content":"我也是对这个不理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563295875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31715,"user_name":"Victoryli","can_delete":false,"product_type":"c1","uid":1037369,"ip_address":"","ucode":"0D296E383B2090","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/39/7b321e92.jpg","comment_is_top":false,"comment_ctime":1539269496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539269496","product_id":100017301,"comment_content":"老师，删除链表中的最后一个节点，用哨兵的话，是不是把哨兵节点放到表尾。还有，在一个空链表中插入节点，用哨兵节点好像没什么用，不适用于一般的插入逻辑。","like_count":0},{"had_liked":false,"id":31643,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1539252492,"is_pvip":false,"replies":[{"id":"11404","content":"可以去看算法视频课","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539268639,"ip_address":"","comment_id":31643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539252492","product_id":100017301,"comment_content":"希望作者大大每节都能给出练习题给我们练练","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426445,"discussion_content":"可以去看算法视频课","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539268639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31641,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1539252397,"is_pvip":false,"replies":[{"id":"11403","content":"棒棒！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539268628,"ip_address":"","comment_id":31641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539252397","product_id":100017301,"comment_content":"点赞（｡ò ∀ ó｡），理解了哨兵的原理，感觉非常棒","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426443,"discussion_content":"棒棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539268628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31608,"user_name":"未来在眼前","can_delete":false,"product_type":"c1","uid":1097592,"ip_address":"","ucode":"6976C846D2020F","user_header":"https://static001.geekbang.org/account/avatar/00/10/bf/78/a6d1c63e.jpg","comment_is_top":false,"comment_ctime":1539245138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539245138","product_id":100017301,"comment_content":"老师，哨兵那块，希望举个链表的例子。有对比，更好理解。","like_count":0},{"had_liked":false,"id":31101,"user_name":"liu","can_delete":false,"product_type":"c1","uid":1129567,"ip_address":"","ucode":"DA9F9FBD96A9A0","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/5f/cc30c10c.jpg","comment_is_top":false,"comment_ctime":1539091275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539091275","product_id":100017301,"comment_content":"##数据结构与算法<br><br>###第六课，如何轻松写出正确的链表代码？<br><br>#### 写链表代码的几个技巧<br>1. 理解指针或引用的含义<br>    指针和引用都是存储了变量的内存地址，根据内存地址就可以找到这个变量<br>2. 警惕指针丢失和内存泄漏<br>    插入结点时，一定要注意操作的顺序，删除节点是要记得释放内存空间<br>3. 利用哨兵简化实现难度<br>    针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个节点的情况做特殊处理，使用<br>    一个空节点来代表第一个节点（哨兵），称为头节点，它不参与任何业务逻辑。以此来达到简化实现<br>    逻辑。如：插入排序、归并排序、动态规划等都使用了哨兵技巧。<br>4. 重点留意边界条件处理<br>    1. 如果链表为空是否能工作？<br>    2. 如果链表只有一个节点时，链表是否都能工作？<br>    3. 如果链表有两个节点时，链表是否都能工作？<br>    4. 在处理头结点和尾节点是，链表逻辑是否正确？<br>5. 举例画图，辅助理解<br>6. 多练多写，没有捷径<br><br>#### 链表常见操作<br>1. 单链表反转<br>2. 链表中环的检测<br>3. 两个有序链表合并<br>4. 删除倒数第n个节点<br>5. 求链表的中间节点","like_count":0},{"had_liked":false,"id":31043,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1539075620,"is_pvip":false,"replies":[{"id":"11168","content":"你理解的没错呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539082424,"ip_address":"","comment_id":31043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539075620","product_id":100017301,"comment_content":"我今天手敲代码实现删除倒数第n结点的时候有点疑惑,就是当我们第一个指针走向了尾结点时第二个指针正好指向了倒数第n个结点( 第一个指针和第二个指针相距为n )，按常规思维尾结点为倒数第一个结点的话那应该是第二个指针指向的下一个结点为倒数第n个结点，而不是和尾结点相距为n的结点","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426197,"discussion_content":"你理解的没错呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539082424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31034,"user_name":"CH.en","can_delete":false,"product_type":"c1","uid":1142436,"ip_address":"","ucode":"F7035EBA519E48","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/a4/e3bb31e0.jpg","comment_is_top":false,"comment_ctime":1539073482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539073482","product_id":100017301,"comment_content":"用java递归和循环实现了一下单链表的反转。因为偷懒想一次性打印出原始链表，循环反转过后的链表，以及循环方式反转过后再用递归反转后的结果。打印的结果始终不对，最终发现在经历一次反转过后，链表的头已经变了。打印的时候一定要用头链表进行循环判断打印！！","like_count":0},{"had_liked":false,"id":30990,"user_name":"沙皮狗","can_delete":false,"product_type":"c1","uid":1258426,"ip_address":"","ucode":"7DA4874A671224","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/ba/bed49591.jpg","comment_is_top":false,"comment_ctime":1539060623,"is_pvip":false,"replies":[{"id":"11154","content":"我有空去加一下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539080799,"ip_address":"","comment_id":30990,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539060623","product_id":100017301,"comment_content":"老师，可以给链表基本操作的c语言代码多加一些注释吗，谢谢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426174,"discussion_content":"我有空去加一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539080799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30945,"user_name":"闫小明","can_delete":false,"product_type":"c1","uid":1244923,"ip_address":"","ucode":"3476E786CE3A78","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaxzRPySib0RvGtykbaVQkjgst8U8ZFIfTTy1IekZ8icQLuxNoGccVsESRZeU3GjZVz6qafplJGMkJd4C8iaAXDz5g/132","comment_is_top":false,"comment_ctime":1539050988,"is_pvip":false,"replies":[{"id":"11178","content":"你写的没错 不过按你的写法 第一行都可以省略了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539083229,"ip_address":"","comment_id":30945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539050988","product_id":100017301,"comment_content":"老师，插入节点为头节点的代码这样写是否好些呢？个人理解，无论原来的head是否为null，都会为新的头节点的next，public void insertToHead(int value) {<br>    Node node = head;<br>    Node newHead = new Node(value, node);<br>    head = newHead;<br>}。望请指正。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426154,"discussion_content":"你写的没错 不过按你的写法 第一行都可以省略了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539083229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30875,"user_name":"舍得","can_delete":false,"product_type":"c1","uid":1147685,"ip_address":"","ucode":"2146A08D2D79B6","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/25/10dac87c.jpg","comment_is_top":false,"comment_ctime":1539033621,"is_pvip":false,"replies":[{"id":"11102","content":"😄 c c++ java 互相看 根本无障碍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539049441,"ip_address":"","comment_id":30875,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539033621","product_id":100017301,"comment_content":"终于看到了我熟悉的指针，对于一个用C&#47;C++的人，看java基本无问题，但是一堆的java，看着还是有点别扭，很多资料文章都是用java实现代码的。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426124,"discussion_content":"😄 c c++ java 互相看 根本无障碍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539049441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30843,"user_name":"devin","can_delete":false,"product_type":"c1","uid":1249178,"ip_address":"","ucode":"59E56BF6E58D12","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/9a/71091652.jpg","comment_is_top":false,"comment_ctime":1539009150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539009150","product_id":100017301,"comment_content":"哨兵很巧妙","like_count":0},{"had_liked":false,"id":30731,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538984831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538984831","product_id":100017301,"comment_content":"以前没写过单链表的反转，今天想了个办法 先顺序遍历单链表把每一个节点的数据放入一个数组中，最后逆序遍历数组，将数组的最后一个元素放到了链表第一个数据中，依次类推，我用代码实现了最后在遍历该链表的时候就是逆序输出了, 不知道满足老师的考察要求不","like_count":0},{"had_liked":false,"id":30710,"user_name":"一块跑跑","can_delete":false,"product_type":"c1","uid":1177796,"ip_address":"","ucode":"576EC5A37721FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/c4/c7f665df.jpg","comment_is_top":false,"comment_ctime":1538980633,"is_pvip":false,"replies":[{"id":"11046","content":"嗯嗯 重复元素 返回哪个也没太大错 你看懂哨兵的作用就好","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538984698,"ip_address":"","comment_id":30710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538980633","product_id":100017301,"comment_content":"在《技巧三 数组 a 中，查找 key，返回 key 所在的位置》的两份代码中，当一个数组中末尾的元素不止一个，如数组 [1,2,3,1]，代码片段1和2返回的结果是不同的，因为1是从前向后遍历，代码2比较末尾如果相同会直接返回","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426070,"discussion_content":"嗯嗯 重复元素 返回哪个也没太大错 你看懂哨兵的作用就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538984698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30698,"user_name":"敲键盘的人","can_delete":false,"product_type":"c1","uid":1232210,"ip_address":"","ucode":"59AFFFE9DA5B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/52/a2478536.jpg","comment_is_top":false,"comment_ctime":1538978155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538978155","product_id":100017301,"comment_content":"在leetcode上刷题的时候就会发现和链表相关的题目很容易出错，大部分时候都是很多边界情况没有考虑到，想要写出鲁棒性好的代码就必须要考虑到所有的情况，老师总结的这些技巧在日常编码的过程中也需要常常用到的。","like_count":0},{"had_liked":false,"id":30697,"user_name":"丨落灬小莫","can_delete":false,"product_type":"c1","uid":1180850,"ip_address":"","ucode":"0BF6AC6DF24F6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b2/002398d6.jpg","comment_is_top":false,"comment_ctime":1538977801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538977801","product_id":100017301,"comment_content":"老师...有个问题想咨询一下...<br>是关于链表的<br>找出链表的中间元素的话，一般有两种方式，第一种1.5次遍历链表，第二种是 快慢指针...<br>我看有人讨论说 其中两种方式的 时间复杂度都是 O(n) ，但是我感觉其实还是快慢指针相对要更好是么？","like_count":0},{"had_liked":false,"id":30689,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1538975264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538975264","product_id":100017301,"comment_content":"可以在讲完一个主题后，来一篇练习题的，检查和巩固学习效果","like_count":0},{"had_liked":false,"id":30688,"user_name":"Flying","can_delete":false,"product_type":"c1","uid":1239009,"ip_address":"","ucode":"2E9D9813E329E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e1/2e27eabf.jpg","comment_is_top":false,"comment_ctime":1538975062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538975062","product_id":100017301,"comment_content":"之前没有学过数据结构，现在在学习Python。看了课程还是写不出程序来😭。Python中没有链表这种数据结构，通过类进行构造，但具体的思路不是很清晰。github里有程序，但是不是很懂。王老师可以指导下吗。","like_count":0},{"had_liked":false,"id":30620,"user_name":"Haoz","can_delete":false,"product_type":"c1","uid":1022665,"ip_address":"","ucode":"DBDBF78877A7B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/c9/08852337.jpg","comment_is_top":false,"comment_ctime":1538961790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538961790","product_id":100017301,"comment_content":"技巧一：理解指针或引用的含义<br>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br><br>技巧二：警惕指针丢失和内存泄露<br>对于有些语言来说，比如 C 语言，内存管理是由程序员负责的，如果没有手动释放结点对应的内存空间，就会产生内存泄露。当然，对于 Java 这种虚拟机自动管理内存的编程语言来说，就不需要考虑这么多了。<br><br>技巧三：利用哨兵简化实现难度<br>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，而且也容易因为考虑不全而出错。<br><br>如果我们引入哨兵结点，在任何时候，不管链表是否为空，head 指针都会一直指向这个哨兵结点，因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。<br><br>技巧四：重点留意边界条件处理<br>经常用来检查链表代码是否正确的边界条件有这样几个：<br>- 如果链表为空，代码是否能正常工作？<br>- 如果链表只包含一个结点时，代码是否能正常工作？<br>- 如果链表只包含两个结点时，代码是否能正常工作？<br>- 代码逻辑在处理头结点和尾结点的时候，是否能正常工作？<br><br>技巧五：举例画图，辅助思考<br><br>技巧六：多写多练，没有捷径<br>常见的链表操作<br>- 单链表反转<br>- 链表中环的检测<br>- 两个有序的链表合并<br>- 删除链表倒数第 n 个结点<br>- 求链表的中间结点<br><br>PS：LeetCode 中对应编号为：206、141、21、19、876","like_count":0},{"had_liked":false,"id":30603,"user_name":"DZuo","can_delete":false,"product_type":"c1","uid":1247240,"ip_address":"","ucode":"F23882BC1E307C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKKqibDZaXxicEUNWiap3fQX81H44ia7hJuVwTiaEFFsKzq8prW9evtpUibBYnd6E6xhF0Ox9SdYGyob7vA/132","comment_is_top":false,"comment_ctime":1538959028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538959028","product_id":100017301,"comment_content":"建议，添加图表对应的代码块，比如哨兵那张图对应的代码。图上的逻辑容易理解，但是代码的正确实现确实不清楚。想我基础弱同学，理解了基础知识和逻辑，代码实现还是一头雾水。对于您来说这些代码不值一提，但是对于我们，可能没见过这些代码，或者见过但是不能根据您说的对号入座","like_count":0},{"had_liked":false,"id":30567,"user_name":"顾言","can_delete":false,"product_type":"c1","uid":1184481,"ip_address":"","ucode":"79DDEDCADD1F49","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/e1/6d0114fe.jpg","comment_is_top":false,"comment_ctime":1538926924,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538926924","product_id":100017301,"comment_content":"老师，您好。在用JAVA实现单链表的时候，开始参考了您的代码，发现有几处错误。<br>1.根据结点删除链表结点。调用方法的时候，传递的node p 是自己new的话，是没有next的值，没法知道计算机会给这个结点分配哪块内存。我改为了比较结点的值，就可以通过了。<br>2.在结点前，结点后，根据结点插入，也是同样的问题。<br>3.在结点之后插入那里，结点的指针没有从head开始遍历，应该是没法执行的。<br><br>发现了这几个问题，不知道是不是我理解的问题，请老师指正。另外，我也想加入您的github，提交下我的代码可以吗？","like_count":0},{"had_liked":false,"id":30564,"user_name":"Macro","can_delete":false,"product_type":"c1","uid":1122474,"ip_address":"","ucode":"242B04398B6DA5","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/aa/f7fde266.jpg","comment_is_top":false,"comment_ctime":1538926413,"is_pvip":false,"replies":[{"id":"11026","content":"留给你自己实践吧 文章中留了5个练习题 你可以自己写写","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538958496,"ip_address":"","comment_id":30564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538926413","product_id":100017301,"comment_content":"看完之后，我感觉自己只停留在理论层面，请问如何才能实践验证，或者提供具体的代码参考，每个思路是怎样通过代码实现？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426039,"discussion_content":"留给你自己实践吧 文章中留了5个练习题 你可以自己写写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538958496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30526,"user_name":"cserbo","can_delete":false,"product_type":"c1","uid":1240958,"ip_address":"","ucode":"C8D1A83A675CA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/7e/ecea53d2.jpg","comment_is_top":false,"comment_ctime":1538908323,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1538908323","product_id":100017301,"comment_content":"p-&gt;next=q ,这是把q指针中的地址给p-&gt;next，不是把q结点赋值给p-&gt;next，我觉得这里说的不严谨。<br><br>另外删除结点时都没有释放内存！！！","like_count":0,"discussions":[{"author":{"id":1111392,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/60/56314d72.jpg","nickname":"街角处","note":"","ucode":"D136FA44F007BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289898,"discussion_content":"q是结点，不是指针。p->next=q; 就是p->next指向q结点。说成把q结点赋值给p->next也没问题吧，严谨一点应该说把q结点的地址赋值给p->next。个人见解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594261389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30487,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1538885120,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538885120","product_id":100017301,"comment_content":"正确灵活的使用指针首先要理解指针的含义，也即为指针是一段内存地址。<br><br>既然指针是一段内存地址，就要留意指针丢失和内存溢出。<br><br>计算机的世界必须把所有细节明确化，所以在编写（指针）程序时，必须坚持边界条件是否被满足。<br><br>检查边界条件时有可能发现，某些边界条件下的代码存在差异，那么为了简化代码、提高程序运行效率，可能需要引入哨兵节点。<br><br>画图和举例有助于人类更高效、全面的理解机器世界。<br><br>一切技艺锤炼都不复杂，唯手熟尔。","like_count":0},{"had_liked":false,"id":30461,"user_name":"LiuJY","can_delete":false,"product_type":"c1","uid":1237786,"ip_address":"","ucode":"EE5176AD2C23BB","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/1a/7d571c39.jpg","comment_is_top":false,"comment_ctime":1538876112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538876112","product_id":100017301,"comment_content":"链表操作不当 会引起内存泄漏     因为C等语言没有自动释放内存空间  则被丢弃的结点就会一直存在，所以要手动释放它的内存<br><br>边界检查条件<br>1.如果链表为空时，代码是否能正常工作？<br>2.如果链表只包含一个节点时，代码是否能正常工作？<br>3.如果链表只包含两个节点时，代码是否能正常工作？<br>4.代码逻辑在处理头尾节点时是否能正常工作？<br><br>然后要动手编一编6个问题了","like_count":0},{"had_liked":false,"id":30411,"user_name":"空白格","can_delete":false,"product_type":"c1","uid":1235765,"ip_address":"","ucode":"472F5456892E77","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/35/f3b78d18.jpg","comment_is_top":false,"comment_ctime":1538831787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538831787","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":30312,"user_name":"code047","can_delete":false,"product_type":"c1","uid":1241330,"ip_address":"","ucode":"7223DB00BC8016","user_header":"","comment_is_top":false,"comment_ctime":1538789381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538789381","product_id":100017301,"comment_content":"一直觉得链表有两种写法，一种头节点不存数据，只存链表头节点地址，原件这就是哨兵，一种头节点包含数据和下一个节点地址，每次联系都把两种写了，强迫症","like_count":0},{"had_liked":false,"id":30301,"user_name":"张飞online","can_delete":false,"product_type":"c1","uid":1249136,"ip_address":"","ucode":"C9787E4B35888C","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/70/759b1567.jpg","comment_is_top":false,"comment_ctime":1538784954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538784954","product_id":100017301,"comment_content":"学校学习时，我自己写了这些东西，那时才感觉到指针的强大，到了工作中，发现这些倒不是难度，难度是多线程操作，线程安全的数据结构，而且是性能可观，如果仅仅加了把大锁，性能就下去了，我去看了lockfree，但是感觉没有掌握，不太敢用。","like_count":0},{"had_liked":false,"id":30282,"user_name":"小帅b","can_delete":false,"product_type":"c1","uid":1234521,"ip_address":"","ucode":"D866A428967480","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/59/cb4e7ed8.jpg","comment_is_top":false,"comment_ctime":1538754422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538754422","product_id":100017301,"comment_content":"------总结一下-------<br><br>写链表代码的技巧<br><br>1.理解指针或者引用的含义<br>指针存储了变量的内存地址，指向了这个变量，通过指针就能找到这个变量。<br>p-&gt;next-&gt;q : p节点的next指针存储了q的内存地址；<br>p-&gt;next = p-&gt;next-&gt;next:p节点的next指针存储了p的下下一个节点的内存地址。<br><br>2.警惕指针丢失和内存泄漏<br>注意不要弄丢指针。<br>插入节点要注意顺序，删除节点要注意释放。<br><br>3.利用哨兵简化实现难度<br>在带头链表中，哨兵节点不存储数据，可以统一为相同的代码实现逻辑。<br><br>4.重点留意边界条件处理<br>考虑：<br>a.链表为空时，代码是否能正常工作？<br>b.链表只含一个节点，代码是否能正常工作？<br>c.链表只含两个节点，代码是否能正常工作？<br>d.代码逻辑处理头尾节点时，代码是否能正常工作？<br><br>5.举例画图，辅助思考<br>画出来，会比较清晰。<br><br>6.多写多练<br>多练以下常见的操作<br>a.单链表反转<br>b.两个有序的链表合并<br>c.删除链表倒数第 n 个结点<br>d.求链表的中间结点","like_count":0},{"had_liked":false,"id":30272,"user_name":"梦其不可梦","can_delete":false,"product_type":"c1","uid":1241487,"ip_address":"","ucode":"145C43CB072C88","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/8f/b3273afe.jpg","comment_is_top":false,"comment_ctime":1538751841,"is_pvip":false,"replies":[{"id":"10967","content":"1. 没有说非得用link l= ....malloc...吧<br>2. 第二个是不是写错了，应该是link L = &amp;t;吧，不过t 应该是栈上的临时变量吧，出了作用于会被销毁的吧。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538839165,"ip_address":"","comment_id":30272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538751841","product_id":100017301,"comment_content":"你好，老师，我想提个问题，创建链表时，为什么要用 <br>link L=(link)malloc(sizeof(node));<br>而不能使用<br>node t;<br>link L=&amp;L;<br>呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425920,"discussion_content":"1. 没有说非得用link l= ....malloc...吧\n2. 第二个是不是写错了，应该是link L = &amp;amp;t;吧，不过t 应该是栈上的临时变量吧，出了作用于会被销毁的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538839165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30259,"user_name":"wean","can_delete":false,"product_type":"c1","uid":1239735,"ip_address":"","ucode":"3E069F95C25EAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/b7/1f7316e6.jpg","comment_is_top":false,"comment_ctime":1538746484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538746484","product_id":100017301,"comment_content":"这节课主要讲了如何轻松正确地写出正确地链表代码<br><br>## 技巧一：理解指针或引用的含义<br>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向这个变量，通过指针就能找到这个变量。<br><br>## 技巧二：警惕指针丢失和内存泄漏<br>写链表时，一定要注意指针指向哪了，对于脑子转不过来的情况，可以在纸上画图辅助思考。<br>对于自己管理内存的语言，如 C 语言，如果没有手动释放节点对应的内存空间，就会产生内存泄漏。不过，对于 Java 这种虚拟机自动管理内存的编程语言来说，就不需要考虑那么多了。<br><br>## 技巧三：利用哨兵简化实现难度<br>有时代码写不出来，也是因为代码的小逻辑多而乱，如果能够实现分析代码，简化逻辑，那么写起代码来就会更容易轻松了。<br>比如，当在单链表插入一个新节点时，需要两个小逻辑：1. *链表是空的的情况* 2. *链表不是空的情况* 写起来的代码就会像这样复杂<br>而如果我们有一个哨兵节点，那么就只需“无脑”往这个节点后面插入新节点而不用进行一次判空特殊处理了。<br><br>**拓展**：在很多算法中都有用到哨兵做简化，比如插入排序、归并排序、动态规划等。<br>下面这个例子就是用了哨兵提升性能：<br>```<br>inf find(char* a, int n, int key) {<br>  if (a[n-1] == key) {<br>    return n-1;<br>  }<br>  char tmp = a[n-1];<br>  a[n-1] = key;<br>  int i = 0;<br>  while (a[i] != key) {<br>    ++i;<br>  }<br>  a[n-1] = tmp;<br>  if (i == n-1) return -1;<br>  return i;<br>}<br>```<br><br>## 技巧四：重点留意边界条件处理<br>软件开发中，我们往往是从“通常情况入手，设计代码”，这种情况下，如果不注意特殊情况（边界情况）时，就容易产生 BUG。一定要在写完代码后，检查边界条件是否考虑齐全。<br>常用来检查链表代码是否正确的边界条件有这样几个：<br>- 如果链表为空时，代码能否正常工作？<br>- 如果链表只包含一个节点时，代码能否正常工作？<br>- 如果链表只包含两个节点时，代码能否正常工作？<br>- 代码逻辑在处理头节点和尾节点时，能否正常工作？<br><br>## 技巧五：画图举例，辅助思考<br>感觉这也是软件设计图的细节版。写出来，整理一下，就明白了。<br><br>## 技巧六：多写多练，没有接近<br>水滴石穿，时刻铭记。","like_count":0},{"had_liked":false,"id":30246,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1538738069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538738069","product_id":100017301,"comment_content":"链表的null指的是空地址 <br>所以既可以是一个节点名字 也可以是地址","like_count":0},{"had_liked":false,"id":30238,"user_name":"Never too late","can_delete":false,"product_type":"c1","uid":1250748,"ip_address":"","ucode":"A6ECC0D3907181","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/bc/20ffd8d1.jpg","comment_is_top":false,"comment_ctime":1538735834,"is_pvip":false,"replies":[{"id":"10878","content":"有啊java实现的 github上有","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538742816,"ip_address":"","comment_id":30238,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1538735834","product_id":100017301,"comment_content":"没有反转链表等其他代码吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425909,"discussion_content":"有啊java实现的 github上有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538742816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1527883,"avatar":"https://static001.geekbang.org/account/avatar/00/17/50/4b/b2ce3140.jpg","nickname":"Degeon","note":"","ucode":"2E0EECD6BB4FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33521,"discussion_content":"github账号是多少呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571131322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30193,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1202964,"ip_address":"","ucode":"E2DE6CF556C2B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/14/a1567454.jpg","comment_is_top":false,"comment_ctime":1538720877,"is_pvip":false,"replies":[{"id":"10882","content":"1. 自己百度一下，如果还不懂再来问吧<br>2. 在本例中是的，当然文章还写了不仅限于此。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538748466,"ip_address":"","comment_id":30193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538720877","product_id":100017301,"comment_content":"问题：<br>1、内存泄露具体是什么意思？<br>2、哨兵的作用就是减少删除头节点和尾节点的特殊情况处理嘛？<br>3、建议每一节讲完知识点，顺便说一下leetcode 涉及此知识点的题，大家好去刷一下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425889,"discussion_content":"1. 自己百度一下，如果还不懂再来问吧\n2. 在本例中是的，当然文章还写了不仅限于此。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538748466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30191,"user_name":"陈鹏","can_delete":false,"product_type":"c1","uid":1043126,"ip_address":"","ucode":"51A38B09190FB9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/b6/0017c2fe.jpg","comment_is_top":false,"comment_ctime":1538719671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538719671","product_id":100017301,"comment_content":"1. 单链表反转<br>带头链表实现：注意空链表（无数据结点）的情况，其他用3个指针p, q, r循环遍历操作即可：\t\t\tr = q.next; q.next = p; p = q; q = r. 注意将第一个结点的next置为空指针。<br>2. 链表中环的检测<br>快慢指针：p, p+2<br>3. 两个有序的链表合并<br>两个指针循环遍历比较即可<br>4. 删除链表倒数第 n 个结点<br>快慢指针: p-1, p, p+n<br>5. 求链表的中间结点<br>遍历两遍链表可得。","like_count":0},{"had_liked":false,"id":30185,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1538717286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538717286","product_id":100017301,"comment_content":"学习反馈：<br>本节内容主要是编码实践，光看内容学习效果不是特别好，因此要自己动手写代码，有几个技巧可以学习：<br>1、理解指针或引用的含义：指针存储的是变量的地址；<br>2、操作指针或引用时要注意指针丢失和内存泄露的问题；<br>3、利用哨兵简化实现难度；<br>4、注意边界处理；<br>5、通过举例画图来学习；<br>6、多写多练、多写多练、多写多练；<br>","like_count":0},{"had_liked":false,"id":30176,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1538713025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538713025","product_id":100017301,"comment_content":"好像没觉得链表复杂过，不过一直都写的是单链表和循环链表，没写过双向链表。","like_count":0},{"had_liked":false,"id":30153,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1538704429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538704429","product_id":100017301,"comment_content":"单链表如果有数据，指针是指向第一个节点，没有指向不是第一个节点？还是说指向头节点？","like_count":0},{"had_liked":false,"id":30150,"user_name":"HhZzz","can_delete":false,"product_type":"c1","uid":1235445,"ip_address":"","ucode":"19A2B6092D8DC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/f5/0a1bcc25.jpg","comment_is_top":false,"comment_ctime":1538703639,"is_pvip":false,"replies":[{"id":"10884","content":"是的 自己写吧 我实现了java的 你可以参考下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538748591,"ip_address":"","comment_id":30150,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538703639","product_id":100017301,"comment_content":"老师，github上C的07链表代码是空的，请问是需要我们自己查找资料吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425871,"discussion_content":"是的 自己写吧 我实现了java的 你可以参考下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538748591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}