{"id":11973,"title":"11 | “配置”是把双刃剑，带你了解各种配置方法","content":"<p>很多人分不清配置和配置管理，但其实它们是完全不同的概念。</p>\n<p><strong>配置管理：</strong> 是通过技术或行政手段对软件产品及其开发过程和生命周期进行控制、规范的一系列措施。 它的目标是记录软件产品的演化过程，确保软件开发者在软件生命周期的各个阶段都能得到精确的产品配置信息。</p>\n<p><strong>配置：</strong> 是指独立于程序之外，但又对程序产生作用的可配变量。也就是说，同一份代码在不同的配置下，会产生不同的运行结果。</p>\n<p>从上面的定义中，你可以看到<span class=\"orange\">配置和配置管理有着本质上的不同：配置管理服务于软件研发过程，而配置则服务于程序本身。</span></p>\n<p>作为一名程序员，开发时经常要面对不同的运行环境：开发环境、测试环境、生产环境、内网环境、外网环境等等。不同的环境，相关的配置一般不一样，比如数据源配置、日志文件配置，以及一些软件运行过程中的基本配置等。</p>\n<p>另外，你也会遇到一些业务上的，以及逻辑上的配置。比如，针对不同地域采取不同的计费逻辑，计费逻辑又要根据这些地域的需要随时调整。</p>\n<p><strong>如果我们把这些信息都硬编码在代码里，结果就是：每次发布因为环境不同，或者业务逻辑的调整，都要修改代码。而代码一旦被修改，就需要完整的测试，那么变更的代价将是巨大的。</strong></p>\n<p>因此，我们往往会通过“配置”来解决这些问题。</p><!-- [[[read_end]]] -->\n<p>但是，“配置”本身也很讲究。<span class=\"orange\">在什么阶段进行配置，采用什么手段进行配置，都将直接影响持续交付的效果。</span></p>\n<p>那么，接下来我就跟你详细聊聊各种配置方法。</p>\n<h2>构建时配置</h2>\n<p>以 Maven 为例，实现多环境的构建可移植性需要使用 profile。profile 是一组可选的配置，可以用来设置或者覆盖配置默认值。通过不同的环境激活不同的profile，可以实现构建的可移植性。 我们可以看一个简单使用示例：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/9a/6f/9a95af6dfe491b66076f7085c5a64b6f.png?wh=554*603\" alt=\"\" /></p>\n<p>这段代码定义了dev和prod两个 profile（没有定义任何其他配置，实际使用中可按需定义任何配置），并且使用了 echo 插件验证 profile 是否生效，通过运行。</p>\n<pre><code>maven initialize –Pdev\n</code></pre>\n<p>或</p>\n<pre><code>maven initialize –Pprod\n</code></pre>\n<p>然后，可以看到输出：</p>\n<pre><code>[INFO] profiles.active = dev\n</code></pre>\n<p>或</p>\n<pre><code>[INFO] profiles.active = prod\n</code></pre>\n<p>其中， dev 是默认激活的，也就是说如果不填写任何 –P 参数，或者 –P 参数不为 dev 或者 prod，都会使用 dev 作为默认的 profile。</p>\n<p>这样在代码构建时，你就可以根据具体需要选择对应的profile了。</p>\n<p>这个方案看起来很简单， 但也有两个缺点：</p>\n<ol>\n<li>\n<p>它依赖于某个特定的构建工具，而且使用方法不统一。<br />\n什么意思呢？如果你不使用Maven作为构建工具，这个配置功能就失效了；而且对于跨平台、跨语言栈的支持也不友好。</p>\n</li>\n<li>\n<p>每次都要重新编译，浪费计算资源。<br />\n即使你只是替换一些配置文件，并没有改动任何代码，但为了让配置生效，还是需要完成代码的整个构建过程，这就会在编译上花费大量的计算资源。</p>\n</li>\n</ol>\n<p>因此，为了解决这两个问题，通常会把“打包”这个过程拆解出来，并将它插入构建之后，接下来我就介绍一下“打包时配置”。</p>\n<h2>打包时配置</h2>\n<p>“打包”，是我在多年持续交付实践中总结出的一个非常重要的概念。我把打包过程与构建过程脱离，也就是说构建成功后，并不立即打包。而是把打包安排在发布之前，打包完成之后立即发布，打包就与发布过程形成了一个整体。</p>\n<p>为什么要独立分离出打包这个步骤呢？你可能会问，Maven 在构建过程中不是已经完成了 package 步骤吗？</p>\n<p>正因为构建时配置，需要针对多个 profile 编译多次，而持续交付有一个核心概念，即：<strong>一次构建多次部署</strong>。打包就是为了解决这个问题而被发明的。</p>\n<p><strong>打包时配置的基本思想是：构建时完全不清楚程序所要部署的环境，因此只完成最基本的默认配置；而发布时清晰地知晓环境信息，因此可根据环境信息，进行相关配置的替换。</strong></p>\n<p>在携程，我们开发了一个叫作 ConfigGen 的工具，用以替换配置文件。 这样，你就不需要每次更改配置时，都重新编译整个代码，大幅缩短了整个发布流程的时间， 而且 ConfigGen 完全基于XML，适用于任何语言。</p>\n<p>ConfigGen 的使用也很简单，只要一个 ConfigProfile.xml 文件即可，dev和prd指两个入参，根据这两个入参分别定义了currentENV的具体值，如下图所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/6f/b7/6fdcaad49b49c278f3db52d7610284b7.png?wh=554*215\" alt=\"\" /></p>\n<p>其中，currentENV 节点便是该环境下的变量，然后在项目下面创建一些TPL文件，该文件就是最终生成的配置文件的模板，其中的占位符将根据之前xml中配置的值进行替换。比如，Web.config.tpl，如下图所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/10/f2/1028f169ec53723efa71acc680e718f2.png?wh=558*94\" alt=\"\" /></p>\n<p>运行 ConfigGen后，会在当前项目下生成一个 __ConfigTemp 目录，该目录下包含 dev 和 prd 两个目录，如下图所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/df/24/dfc48e1904a7a3d00cbbf33c6e7d1324.png?wh=554*114\" alt=\"\" /></p>\n<p>所得到的 dev/Web.config 文件就是 Web.config.tpl 生成的最终配置文件。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/95/93/95698caa79f0d9e0ad0043d889d5d393.png?wh=554*84\" alt=\"\" /></p>\n<p>从图中可以看出，Web.config 已经正确替换了 currentENV 变量。 __ConfigTemp 里面的配置文件目录结构与项目中TPL文件的目录结构是一致的。</p>\n<p>利用类似于 ConfigGen 这样的工具，可以在打包阶段很好地解决不同环境的配置问题。但还是会有解决不了的痛点：</p>\n<blockquote>\n<p>打包时配置，需要借助发布的力量使配置生效。而实际场景中，只是修改了配置就要发布代码往往是不被接受的。特别是，如果你还不具备很成熟的持续部署能力，那将会是很头痛的事情。</p>\n</blockquote>\n<p>因此，为了更好地解决配置问题，绝大多数的互联网企业会推荐使用“配置中心”。如果你所在的公司还没有成熟的配置中心，那么我推荐尽快使用开源系统来搭建配置中心。下面，我就分享一下，配置中心是如何工作的。</p>\n<h2>运行时配置</h2>\n<p>随着程序功能的日益复杂，程序的配置日益增多，各种功能的开关，参数的配置，服务器的地址，等等不断增加到系统中。而且应用对程序配置的期望值也越来越高，需要配置系统能够：</p>\n<ol>\n<li>\n<p>修改后实时生效；</p>\n</li>\n<li>\n<p>支持灰度发布；</p>\n</li>\n<li>\n<p>能分环境、分集群管理配置；</p>\n</li>\n<li>\n<p>有完善的权限、审核机制。</p>\n</li>\n</ol>\n<p>在这样的大环境下，传统的配置文件、数据库等方式已经越来越无法满足开发人员对配置的管理需求；另外，对于数据库连接串，各个服务之间的 API Key 等机密配置，如果放在代码里也会引起安全的问题。</p>\n<p>针对以上的种种需求和问题，我们采用系统化、服务化的思想，引入了配置中心，尝试彻底解决配置问题。</p>\n<p>以携程为例，我们自研了 Apollo 配置中心，（目前<a href=\"https://github.com/ctripcorp/apollo\">该项目已经在GitHub开源</a>）用以满足上述需求。</p>\n<p>如下图所示，即是Apollo的基础模型：</p>\n<ol>\n<li>\n<p>用户在配置中心对配置进行修改并发布；</p>\n</li>\n<li>\n<p>配置中心通知Apollo客户端有配置更新；</p>\n</li>\n<li>\n<p>Apollo 客户端从配置中心拉取最新的配置，更新到本地配置并通知应用重新载入配置。</p>\n</li>\n</ol>\n<p><img src=\"https://static001.geekbang.org/resource/image/b6/d7/b61c6a2db1612d3a78e79f2c822ec2d7.png?wh=554*349\" alt=\"\" /></p>\n<p>Apollo系统有几个特别突出的能力，能够很好地解决配置的问题：</p>\n<ol>\n<li>\n<p>统一管理不同环境、不同集群的配置，通过一个管理平台可以达到管理多个环境或集群配置的效果，省时省力；</p>\n</li>\n<li>\n<p>配置修改实时生效（热发布），不再需要重启服务，与应用运行生命周期完全解耦；</p>\n</li>\n<li>\n<p>版本发布管理，方便配置变更后的比对和追溯，配置变更有迹可循；</p>\n</li>\n<li>\n<p>支持配置的灰度生效，减少配置错误所带来的故障影响；</p>\n</li>\n<li>\n<p>客户端配置信息监控，这样有利于管理员进行集中式管理；</p>\n</li>\n<li>\n<p>提供 Java 和 .Net 原生客户端。</p>\n</li>\n</ol>\n<p>使用配置中心的运行时配置，应该说是现在绝大多数企业选择的解决方案。而且，面对微服务的技术趋势，它也有一定的技术优势。比如，Apollo就是Spring Cloud推荐使用的开源配置中心解决方案。</p>\n<p>Apollo有详尽的文档，其功能基本可以覆盖绝大多数业务对配置的需求，因此，我建议你也可以基于这套开源系统来搭建一套自己的配置中心，解决配置难题。</p>\n<h2>回滚是配置永远的痛</h2>\n<p>虽然配置中心已经很强大了，但是你也要清晰地认识到，配置中心不是万金油，比如对于版本回滚的情况：</p>\n<blockquote>\n<p>当你使用构建配置和打包配置时，配置是随着代码的一起发布的。这样的话，如果代码回滚了，配置自然而然的也会跟着一起回滚，旧版本的代码和旧版本的配置在绝大多数情况下是兼容的。但如果你用了配置中心，配置就不会随着代码回滚，就可能引发意想不到的问题。</p>\n</blockquote>\n<p>此时，<strong>先回滚配置还是先回滚代码就成了一个死循环的问题。最好的办法是保证配置与代码的兼容性，这有点类似于数据库的 schema 变更。</strong> 比如，只增加配置不删减配置、不改变配置的数据类型而是新增一个配置等方法。同时，也要做好代码版本与配置版本的对应管理。</p>\n<p>那你可能会问，是不是只要做到代码和配置一起回滚就行了呢？其实不是，配置是一个很复杂的问题，像之前所说，绝大多数情况下，回滚配置能够兼容，但也有不行的时候。</p>\n<p>比如，修改了数据库连接串的配置，代码回滚后还是要用最新的配置，如果配置也一起回滚了，反而会出现错误。</p>\n<p>所以，对于配置回滚这个复杂问题，没有一劳永逸的办法，  只能根据实际情况选择最适合自己的方案。</p>\n<p>但是，<strong>我有一个推荐做法就是，每次回滚时，将可能发生变化的配置进行diff操作，由负责回滚的具体人根据结果去做最后的判断。</strong></p>\n<h2>总结</h2>\n<p>在这篇文章中，我和你讨论了三种配置方案：</p>\n<ol>\n<li>\n<p>构建时配置：会增加构建成本；</p>\n</li>\n<li>\n<p>打包时配置：依赖发布生效；</p>\n</li>\n<li>\n<p>运行时配置：配置中心，便于管理和维护。</p>\n</li>\n</ol>\n<p>我的建议是：业务相关的配置尽量放在运行时的配置中心服务里。</p>\n<p>同时，一定要注意配置的回滚问题。因为，无论是回滚还是不回滚，它没有标准答案，这个复杂问题必须按当时情况作出相对应的处理。</p>\n<h2>思考题</h2>\n<p>在日常开发或者维护的系统中，你还遇到过哪些配置需要管理？你又是如何管理这些配置的呢？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":17684,"user_name":"Tank","can_delete":false,"product_type":"c1","uid":1007106,"ip_address":"","ucode":"652A770CD3908B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/02/b50560ac.jpg","comment_is_top":false,"comment_ctime":1532874206,"is_pvip":false,"replies":[{"id":"6199","content":"可以参考以下文档<br>https:&#47;&#47;github.com&#47;ctripcorp&#47;apollo&#47;wiki&#47;FAQ#10-apollo和disconf相比有什么优点","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533011299,"ip_address":"","comment_id":17684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14417776094","product_id":100009701,"comment_content":"阿波罗相比disconf有哪些优势呢","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421229,"discussion_content":"可以参考以下文档\nhttps://github.com/ctripcorp/apollo/wiki/FAQ#10-apollo和disconf相比有什么优点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533011299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287920,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c1","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1618216111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10208150703","product_id":100009701,"comment_content":"我们全栈都在aws。 serverless架构。 所有业务配置放在dynamodb. 当时也没有仔细想。现在一看 这不就是配置中心么。。","like_count":3},{"had_liked":false,"id":191771,"user_name":"戴斌","can_delete":false,"product_type":"c1","uid":1119385,"ip_address":"","ucode":"7DC53BEA432217","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/99/5b1ed92b.jpg","comment_is_top":false,"comment_ctime":1584795755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174730347","product_id":100009701,"comment_content":"我们是使用gradle在构建的时候传入参数进行构建XX环境的包，构建出来的包包含了特定环境的配置。<br>这种方式每次修改配置都需要构建、发布，而且，每个环境都要做构建。<br>配置中心是我们一直想推进的方式，应该可以提高我们工作效率。","like_count":2},{"had_liked":false,"id":54291,"user_name":"有道测试组","can_delete":false,"product_type":"c1","uid":1337013,"ip_address":"","ucode":"BD5463427B9BE9","user_header":"","comment_is_top":false,"comment_ctime":1545821590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135756182","product_id":100009701,"comment_content":"apollo 这个看着不错，我们可以看看<br>我们一般把配置分为两类， 一类是环境相关的全局配置，另一类是程序相关的局部配置。<br> 局部配置一般放在代码包里跟着代码走， 一般情况下，全局配置是部署的时候需要提供的，比如指定部署的机器， 端口等，代码配置一般是不需要变更的，如果变更，配置中心指定要变更的项目，推到机器上， 或者本地有配置agent 服务的话，也能定期pull 配置中心的该变更项 。<br>","like_count":2},{"had_liked":false,"id":52543,"user_name":"华华","can_delete":false,"product_type":"c1","uid":1357951,"ip_address":"","ucode":"9E66F9EAA3DA51","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/7f/856839e0.jpg","comment_is_top":false,"comment_ctime":1545412356,"is_pvip":false,"replies":[{"id":"20613","content":"<br>我个人认为这种说法已经过时了。可以参看专栏中的相关内容。代码版本和配置应该解耦，否则会产生两种结果，一，不同环境的版本不对应；或者版本冗余","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1546670127,"ip_address":"","comment_id":52543,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5840379652","product_id":100009701,"comment_content":"按照《持续交付》书中的说法，把每个环境的配置文件作为代码在git中维护是最好的办法！","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433903,"discussion_content":"\n我个人认为这种说法已经过时了。可以参看专栏中的相关内容。代码版本和配置应该解耦，否则会产生两种结果，一，不同环境的版本不对应；或者版本冗余","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546670127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2223167,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mQddXC7nRiaKHTwdficicTB3bH0q5ic5UoSab51Omic7eyLBz0SNcvbLpQnNib7zP1yJFm7xxx4ia81iahfibRVnbTwHmhw/132","nickname":"浮石沉木","note":"","ucode":"D585768321B84A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588052,"discussion_content":"过时了，修改一点配置就要重新发布，生产环境哪敢随便动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663507263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27325,"user_name":".","can_delete":false,"product_type":"c1","uid":1071088,"ip_address":"","ucode":"34CA27A83D8273","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/f0/8b1c5ae9.jpg","comment_is_top":false,"comment_ctime":1537871850,"is_pvip":false,"replies":[{"id":"9834","content":"也不能这么说，我们使用配置中心主要是为了解决业务逻辑的配置，需要中间件配合，你提到的有些系统本身很完整比如k8s，自己有配置方案，而nginx是否可以使用你选择的中间件才是问题，当然以这个思路做二次开发都不是问题","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1537878332,"ip_address":"","comment_id":27325,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832839146","product_id":100009701,"comment_content":"请问，像nginx，以及docker这样的，是不是都可以用配置中心来管理配置？<br>那我理解的，就是只要是文件形式存在于应用程序里的配置，都可以修改吗？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424877,"discussion_content":"也不能这么说，我们使用配置中心主要是为了解决业务逻辑的配置，需要中间件配合，你提到的有些系统本身很完整比如k8s，自己有配置方案，而nginx是否可以使用你选择的中间件才是问题，当然以这个思路做二次开发都不是问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537878332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280948,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","comment_is_top":false,"comment_ctime":1614500349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614500349","product_id":100009701,"comment_content":"什么是构建时配置，打包时配置，运行中配置？ 求老师结合一个例子给一个具体说明。 ","like_count":1},{"had_liked":false,"id":173759,"user_name":"Vickie-liang","can_delete":false,"product_type":"c1","uid":1814241,"ip_address":"","ucode":"AA50F2FC8431F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ae/e1/04973e79.jpg","comment_is_top":false,"comment_ctime":1579680487,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579680487","product_id":100009701,"comment_content":"老师，我们用啦Apollo，但是再修改配置后。服务重启才能生效，这是我们那个地方没有配置好吗？","like_count":0,"discussions":[{"author":{"id":1525447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/46/c7/ec2d59c3.jpg","nickname":"ianthony丶王龙","note":"","ucode":"28266689CC10CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326533,"discussion_content":"参考下这个 https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1#212-config-service%E9%80%9A%E7%9F%A5%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605613525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145751,"user_name":"王保安","can_delete":false,"product_type":"c1","uid":1165065,"ip_address":"","ucode":"758DA5B5D626D9","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/09/ba838a61.jpg","comment_is_top":false,"comment_ctime":1572359801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572359801","product_id":100009701,"comment_content":"请教老师个问题。<br>我们测试环境有五套，例如叫：test1、test2、test3、test4、test5。<br>现在是这五套环境用的五个IDC，就是每个环境不同的配置集群。可是这五个环境的配置项，大部分是相同的，只有四五个是各环境不同的。<br>有没有办法，让五个环境的某些配置项共用一套配置，另外一些配置项再加载不同的配置集群。<br>","like_count":0},{"had_liked":false,"id":121513,"user_name":"陈sir","can_delete":false,"product_type":"c1","uid":1367432,"ip_address":"","ucode":"8A32CCF1441666","user_header":"","comment_is_top":false,"comment_ctime":1565149995,"is_pvip":false,"replies":[{"id":"57375","content":"优先使用Apollo这样的配置中心，数据结构支持一个key分属不同环境的不同value，读取时根据环境值获取","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1573185198,"ip_address":"","comment_id":121513,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565149995","product_id":100009701,"comment_content":"你好 俊哥 好亲切 我曾在携程短暂的待过一段时间 现在遇到一个问题：在线上发布时 我们不止一次的把测试环境的地址配置到了线上，请问针对这个问题 你有什么好的建议吗？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461830,"discussion_content":"优先使用Apollo这样的配置中心，数据结构支持一个key分属不同环境的不同value，读取时根据环境值获取","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573185198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19766,"user_name":"付盼星","can_delete":false,"product_type":"c1","uid":1055542,"ip_address":"","ucode":"E0E4B74E8B361F","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/36/abe6d066.jpg","comment_is_top":false,"comment_ctime":1534052205,"is_pvip":false,"replies":[{"id":"7055","content":"Apollo有一个自用的注册中心功能，确实可以用，但毕竟不是专门做这块的服务，功能就较简单，有些能力可能也是缺失的","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1534321575,"ip_address":"","comment_id":19766,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534052205","product_id":100009701,"comment_content":"apollo内置了高可用注册中心，为什么不开放端口，也能当注册中心来用？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421974,"discussion_content":"Apollo有一个自用的注册中心功能，确实可以用，但毕竟不是专门做这块的服务，功能就较简单，有些能力可能也是缺失的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534321575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17803,"user_name":"海水","can_delete":false,"product_type":"c1","uid":1191244,"ip_address":"","ucode":"68D7E454CC0819","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/4c/983ce1b9.jpg","comment_is_top":false,"comment_ctime":1532958163,"is_pvip":true,"replies":[{"id":"6196","content":"配置本身可以属于不同的category，对这层做权限即可，当然你问一个key是否可以属于多个category，那就看你的具体设计了","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533010322,"ip_address":"","comment_id":17803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532958163","product_id":100009701,"comment_content":"配置中线的权限问题怎么解决？比如第三方的key，和 普通配置 如果让不同的人员管理不同的配置？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421279,"discussion_content":"配置本身可以属于不同的category，对这层做权限即可，当然你问一个key是否可以属于多个category，那就看你的具体设计了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533010322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17714,"user_name":"祺超","can_delete":false,"product_type":"c1","uid":1001838,"ip_address":"","ucode":"C5501E502BDE5A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/6e/2923566c.jpg","comment_is_top":false,"comment_ctime":1532911873,"is_pvip":false,"replies":[{"id":"6195","content":"这是个好问题，jvm参数有很多特殊性，包括冲突配置等，目前我们的想法是独立一套单独的服务做这块，服务的生命周期在编译打包。但还没完全实现","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533010172,"ip_address":"","comment_id":17714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532911873","product_id":100009701,"comment_content":"以Java为例，JVM参数，应用的端口等等应该放在哪里呢？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421241,"discussion_content":"这是个好问题，jvm参数有很多特殊性，包括冲突配置等，目前我们的想法是独立一套单独的服务做这块，服务的生命周期在编译打包。但还没完全实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533010172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17538,"user_name":"刘京城","can_delete":false,"product_type":"c1","uid":1101016,"ip_address":"","ucode":"A616C45E576C8E","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/d8/bb106606.jpg","comment_is_top":false,"comment_ctime":1532736637,"is_pvip":false,"replies":[{"id":"6110","content":"可以再看一下上一讲的内容，联系起来使用配置中心，是很合适的解决方案","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532756847,"ip_address":"","comment_id":17538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532736637","product_id":100009701,"comment_content":"谢谢！这一节的内容对我们项目现在正有用！我们项目现在有一些与业务强关联的硬编码，而且有上百处，现在要对不同的客户即不同的生产环境进行部署，所以必须把硬编码改成配置，请问这种情况适合用配置中心来进行管理吗？期待您的回复","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421187,"discussion_content":"可以再看一下上一讲的内容，联系起来使用配置中心，是很合适的解决方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532756847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}