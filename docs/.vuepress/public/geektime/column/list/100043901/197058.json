{"id":197058,"title":"12 | 数学归纳法：搞定循环与递归的钥匙","content":"<p>你好，我是胡光，今天我们正式开始“编码能力训练篇”的学习。</p><p>这里给你一个建议，在刚刚完成了语言基础篇的学习后，我希望你用心地体验“螺旋式上升”的学习过程。就是前面的基础篇虽然学完了，可并不是意味着，不需要再学习更多的语言相关的东西了，你可以做如下两件事情：</p><ol>\n<li>对于语言基础，你可以选择学习第二遍，当你站在第一遍的基础上，再回头看的时候，肯定会对之前的知识有更深的理解；</li>\n<li>选择在其他参考资料中，继续学习语言中更多的知识点。你会发现，某些之前自己认为晦涩难懂的东西，可以自学搞明白了，这就是我提到的“螺旋式上升”的学习方法。</li>\n</ol><p>在接下来的“编码能力训练篇”里，我将着重给你讲解一些编程中的重要技巧。今天呢，我们就从理解循环与递归的编码技巧开始吧！</p><h2>今日任务</h2><p>循环结构，你已经不陌生了，如下代码所示，是一个单层循环的程序，依次地输出从 1 到 n 的每一个数字，每个数字占一行：</p><pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        printf(&quot;%d\\n&quot;, i);\n    }\n    return 0;\n}\n</code></pre><p>当我们输入 4 的时候，程序的输出结果如下所示：</p><pre><code>1\n2\n3\n4\n</code></pre><p>上面这个是单层循环的情况。下面这个例子，是一个双层循环的例子，每层循环都从 1 循环到 n，循环内部每次输出两个循环遍历的值：</p><pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            printf(&quot;%d %d\\n&quot;, i, j);\n        }\n    }\n    return 0;\n}\n</code></pre><p>当我们输入 3 的时候，程序的输出结果如下所示：</p><!-- [[[read_end]]] --><pre><code>1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n</code></pre><p>看了上面单层循环和双层循环的例子以后，如果让你改写成类似的三层循环的程序，想必这个你一定会做，无非就是在两层循环的内部，多加一层循环，然后 printf 输出的时候，输出的是三个变量的值即可。如果你可以自己理解到这个程序，那么你就可以理解今天这个任务。</p><p>今天这个任务，和上面的例子类似，但它不是实现一层循环的程序，也不是实现三层循环的程序，而是实现一个 k 层循环的程序。什么意思呢？就是 k 是一个读入参数，之后再读入一个参数 n，含义和上述程序中的 n 一致，而这个程序的输出结果，与上述例子中的输出结果类似，只不过每行输出 k 个数字。</p><p>简单来说，你要实现的是一个可变循环层数的程序。这下你清楚今天的任务了吧？那么我们正式开始学习吧。</p><h2>必知必会，查缺补漏</h2><p>理解了上面这个任务要做什么了，你可能还会发懵：为什么循环层数是可变的，代码结构不是确定性的么？别着急，今天我们将学习一个重要的编程技巧，那就是递归。</p><p>这里我要提醒一下，<strong>递归是一种编程技巧</strong>。你可能会在某些资料中，看到递归算法这种说法，其实这种说法是不合适的，因为明显的事实是，能够用循环实现的算法，都可以用递归这种编程技巧实现。如果递归算作算法，那你听过循环算法一说么？所以，用一个编程技巧，给一类算法命名，实际是不合适的。</p><h4>1. 温故知新：数学归纳法</h4><p>你知道么，计算机的本质，是一个用来计算的工具，它最开始就是帮助我们完成一些现实世界里面的计算任务，并且完成的又快又好。那么现实世界的问题，是如何转换成可以在计算机中计算的任务呢？这个转换的过程中，都有哪些必不可少的东西呢？请看下图：<br>\n<img src=\"https://static001.geekbang.org/resource/image/65/9b/65c32d9a5d416d8e8c65783ae59d4a9b.jpg?wh=2607*1358\" alt=\"\" title=\"图1:从现实问题到可计算任务\"></p><p>在这幅图中，我们把转换过程分成四个部分：“现实世界”“数学”“算法”和“计算机”。这四个部分形成了一个路线，也就是从现实世界中的实际问题，到计算机中的可计算任务的过程。</p><p>我稍微来详细解释一下这幅图所表达的含义。首先我们来想想，如果没有数学，现实生活中我们会遇到什么困难？我会毫不夸张地告诉你，可能会面临生存危机。试想一下，因为没有数学，我们不会计算每日食物的消耗，无法合理分配资源，导致食物匮乏，引发生存危机。这也是为什么人类最早的文字记录，或者说是信息传递，用的是结绳记事，以“算术”的形式来解决现实世界问题。可以说，现实世界中的问题，本质是可以计算的，也就是说实际问题都可以做数学建模。</p><p>然后，我们说说算法。算法是将数学问题，转换到计算机中的计算任务的桥梁。因为计算机是依靠指令序列来执行的，而不同的指令序列代表了不同的效率，不同的效率在很多时候就意味着可行或者不可行。试想一个数学抽象出来的公式，需要计算机运算1000年才能得出结果，你认为这种任务可以放到计算机上面做么？答案显然是否定的。算法就是使得计算任务变得更高效，更可行。</p><p>至此，你就对我所说的内容，有个大致的体会了：计算机的核心是算法，算法的核心是数学。接下来呢，我们就需要介绍一种，可以指导我们进行程序设计的数学方法：数学归纳法。</p><p>高中的时候，我们就接触过数学归纳法，你可能已经对这个概念了然于胸，不过我们还是来回顾一下数学归纳法证明过程中重要的三步骤。<br>\n<img src=\"https://static001.geekbang.org/resource/image/d6/c3/d6624009d55447e273fc58a8799afbc3.jpg?wh=2644*1099\" alt=\"\" title=\"图2:数学归纳法的三个步骤\"></p><p>其实数学归纳法的三个步骤，总结起来就是，有一个已知正确的初始状态，然后证明如果前一个状态成立，那么后一个状态也成立（这一步主要在做过程正确性的证明），最后就是得出结论，在这个初识状态和转移过程的正确保证下，所有问题中的状态都成立。</p><p>举个例子，便于你更好地理解。假设我们要利用数学归纳法来证明：如果我推倒了第一块多米诺骨牌，那么所有的多米诺骨牌都会倒下。那么放到这三个步骤里，就是：</p><ul>\n<li>第一步，验证边界条件，第一块多米诺骨牌倒下了。</li>\n<li>第二步，就是假设，第 n 块倒下了，根据多米诺骨牌的结构性质，那么如果存在 n + 1 块，第 n + 1 块也一定会倒下。</li>\n<li>第三步，得出结论，只要第一块倒了，所有的多米诺骨牌都会倒下。</li>\n</ul><p>注意，上面说的这个是广义层面数学归纳法，这个过程对于循环过程的正确性证明，是非常有效的。</p><p>想一想，进入循环之前的程序中关键变量的值，就是上面所说的第一步中的 k<sub>0</sub>；而每一次的循环，其实就是第二步中所要证明的那个上一个状态到下一个状态的过程。如果这两者都正确，我们就能很确信地知道，我们的整个循环过程就是正确的。</p><p>关于上面说的数学归纳法和循环程序之间的这一点联系，在日后的学习中，我还会详细地去举例说明，尤其是到了后续，我们学到了递推算法和动态规划算法的时候，会尤为明显。所以你要有足够的耐心和信心，咱们一起把这些问题搞懂。</p><h4>2. 深入浅出：理解递归函数</h4><p>放在编程的语境中，什么是递归呢？我这里先强调一句：递归是一种编程技巧。</p><p>你学完了函数以后，已经可以熟练地掌握在一个函数中，调用另外一个函数的方法了。可你有没有想过，如果在某个函数内部，调用自己同名函数过程，会发生什么？其实，和普通的函数调用过程一样，在具体执行过程中，只有等内部调用的函数执行完后，本层函数才会继续执行。</p><p>递归是一个过程，这个过程的每一步都类似，只是面对的问题规模不同。</p><p>下面我来举个例子：假如今年我上小学5年级，我现在想知道1～5年级的年级主任名字，但我现在只知道5年级的年级主任的名字，我可能会问一个4年级的学弟，希望他能告诉我1～4年级主任的姓名。</p><p>我这个学弟呢，也只知道他们年级主任的名字，那么我这个学弟就会问3年级学弟，问他3年级及以下的年级主任都有谁，依次类推，最后到了1年级的小学弟。</p><p>1年级的小学弟，就会告诉2年级的学长自己年级主任的名字，2年级的学长拿到1年级的年级主任的名字以后，会把2年级年级主任的名字填上去，然后再交给3年级的他学长\b……这样最终到我手里的就会是1～4年级的年级主任的所有名字，再加上我自己知道的5年级的年级主任姓名，这样，我就知道了全部信息。整个过程，如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/71/5a/713f6589e7b8eb51c8af82ddc1efa65a.jpg?wh=2851*1274\" alt=\"\" title=\"图3:年级主任问题示意图\"></p><p>在这个过程中，每个人问学弟的过程，就是我们所谓的“递”，而拿到学弟给的结果名单以后，再加上自己知道的结果反馈给自己学长的这个过程，就是“归”，整个过程就是我们所谓的“递归”。“递归”的过程，每一步的过程类似，可是问题规模不同。</p><p>接下来，我来举一个编程中的具体递归例子，看如下代码：</p><pre><code>#include &lt;stdio.h&gt;\n\nint f(int n) {\n    if (n == 1) return 1;\n    return f(n - 1) * n;\n}\n\nint main() {\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    printf(&quot;%d\\n&quot;, f(n));\n    return 0;\n}\n</code></pre><p>这段代码中，f 函数的作用，是计算 n 的阶乘的值，也就是从 1 乘到 n 的结果。在 f 函数内部，首先是一个边界条件，就是当 n == 1 的时候，直接返回 1 的阶乘的结果。否则，n 的阶乘的结果，应该等于 n - 1 阶乘的结果再乘上 n ，就得到了 n 的阶乘。在得到 n - 1 阶乘结果的过程中，我们调用的不是别的函数，还是 f 函数本身，只不过传入的参数范围，是一个比 n 更小的范围 n - 1。</p><p>关于这个 f 函数，类比于上面年级主任的那个例子，f(n) 就是我整理的信息，f(n - 1)就是比我要小 1 个年级的学弟所整理得到的信息，而 n == 1 的边界条件判断，就是我那个最小的 1 年级的学弟。最后 f(n - 1) * n 当中的 * n 这个过程，就相当于每个人拿到了学弟整理的信息以后，再加上自己知道的信息，最后递交给自己的学长。</p><p>为什么这么做，能保证每个人所得到的信息都是正确的呢？在证明这个过程的时候，我们就需要用到前面提到的数学归纳法了。首先，我们知道 1 年级的学弟肯定能给出正确的信息，这就是数学归纳法中的边界条件。然后我们假设，如果上一个学弟，给出的信息是正确的，那么我所整理出来的信息，就一定是正确的，这就是数学归纳法中的证明过程的正确性。最终，我们就可以得到结论，在这个过程中，所有人获得的信息都是正确的，包括我自己。</p><p>其实，到了这里，我们也就得到了递归程序设计中的重要的两部分：<strong>边界条件</strong>和<strong>处理过程</strong>。</p><ul>\n<li>所谓边界条件，就是当递归函数中的参数等于多少的时候，可以直接返回的条件。</li>\n<li>处理过程呢，就是设计程序过程，处理递归调用的返回结果，根据递归调用的返回结果，得到本函数的结果。</li>\n</ul><p>这两部分，分别对应了数学归纳法中的两步，step1和step2。当这两步都可以保证正确，所涉及的递归函数程序，也绝对是正确的。</p><h2>一起动手，搞事情</h2><p>今天的思考题呢，是关于一段递归程序的：</p><pre><code>#include &lt;stdio.h&gt;\n\nint fib(int n) {\n    if (n == 1 || n == 2) return 1;\n    return fib(n - 1) + fib(n - 2);  \n}\n\nint main() {\n    int n;\n    scanf(&quot;%d&quot;, &amp;n);\n    printf(&quot;%d\\n&quot;, fib(n));\n    return 0;\n}\n</code></pre><p>上面这段程序中，fib 函数是求菲波那契数列第 n 项值的函数。菲波那契数列的定义如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/fa/9a/faa57fedb330f6c3fa27c22aac2f739a.jpg?wh=2701*632\" alt=\"\" title=\"图4:斐波那契数列\"></p><p>根据如上内容，你需要完成两个小的思考题：</p><ol>\n<li>请将上述菲波那契数列求解的程序从递归程序，改成循环程序。</li>\n<li>请将上述递归程序的代码和数学归纳法中的步骤做一一对应，留在留言区中。</li>\n</ol><h2>完成不定层数的循环程序</h2><p>准备完了基础知识以后，让我们回到今天的任务，完成一个可变循环层数的程序。我们可以一开始假设，有一个函数，是实现 5 层循环打印的程序，那么它会循环 n 次，每次调用一个实现 4 层循环打印的程序。</p><p>依照这个大体的思路，我们就可以写出如下代码框架：</p><pre><code>int print_loop(int k, int n) {\n    if (k == 0) {\n        // 打印一行\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        print_loop(k - 1, n);\n    }\n    return;\n}\n</code></pre><p>在这个代码框架中，我们先来看递归的过程，print_loop(k, n)代表 k 层循环的程序，然后循环 n 次，每次调用一个 k - 1 层循环的程序。而递归的边界条件就是当 k == 0 的时候，就是所谓的 0 层循环，也就是程序打印一行具体内容的地方，可打印的这行内容究竟是什么呢？</p><p>你会发现，要打印的这行内容，与每层循环遍历到的数字有关系，那么我们就需要记录每层循环遍历到的数字。这个信息，我们可以记录在一个数组中，数组中存储的，就是当前要打印这行的每一个数字。基于上述代码框架，我们就可以得到下面这个更完善的代码：</p><pre><code>int arr[100];\nvoid print_loop(int k, int n, int total_k) {\n    if (k == 0) {\n        for (int i = total_k; i &gt;= 1; i--) {\n            if (i != total_k) printf(&quot; &quot;);\n            printf(&quot;%d&quot;, arr[i]);\n        }\n        printf(&quot;\\n&quot;);\n        return ;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        arr[k] = i;\n        print_loop(k - 1, n, total_k);\n    }\n    return ;\n}\n</code></pre><p>正如你看到的，我们把每一层循环的值，放到了一个 arr 数组中，第 k 层循环变量的值，存储到 arr[k] 的位置。而在上述代码中，多了一个递归参数，就是 total_k，代表了一共有多少层循环，这个参数是为了方便我们最后确定循环输出的上界。至此，我们就完成了今天的任务。</p><h2>课程小结</h2><p>今天的重点，一个关于数学归纳法，一个关于递归，需要你记住如下两点：</p><ol>\n<li>数学归纳法中重要的两部分，一是要边界条件成立，二是证明转移过程成立。</li>\n<li>程序设计最重要的是正确性，递归函数的正确性可以利用数学归纳法来保证。</li>\n</ol><p>关于数学归纳法和递归函数的设计，还需要你在日后不断的加以练习。注意总结两者的联系，能够使得你在接下来的学习中事半功倍。</p><p>好了，今天就讲到这里，我是胡光，我们下期见。</p>","comments":[{"had_liked":false,"id":177904,"user_name":"学写代码的猪","can_delete":false,"product_type":"c1","uid":1064616,"ip_address":"","ucode":"4EBA2329450B53","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/a8/66088c47.jpg","comment_is_top":false,"comment_ctime":1581525595,"is_pvip":true,"replies":[{"id":"69081","content":"完美！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581594724,"ip_address":"","comment_id":177904,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27351329371","product_id":100043901,"comment_content":"int f1, f2 ;<br>f1 = f2 = 1 ;<br>for(int i = 3; i &lt;n; i++){<br>    f2 = f1 + f2;<br>    f1 = f2 - f1;<br>}","like_count":6,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483591,"discussion_content":"完美！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581594724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153978,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","nickname":"Linuxer","note":"","ucode":"272D9D8089C3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194727,"discussion_content":"按照之前递归的实现输入1，2，返回1，如果输入3，返回2,如果这里输入n为3返回什么呢？\n循环中的条件是不是应该是 i <= 3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583240456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251343,"user_name":"武汉李先生","can_delete":false,"product_type":"c1","uid":1995728,"ip_address":"","ucode":"F0CCB26C320238","user_header":"","comment_is_top":false,"comment_ctime":1601472354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896439650","product_id":100043901,"comment_content":"胡船长，我理解递归有点困难，就举了个简单的例子：k=3，n=3。代入手推了一下，第k层循环应该是最左边一列的数字，第1层循环应该是最右边一列的数字。我的理解递归就是，从第1层开始循环1~n，此时2~k层都是初始值1，当第一层结束循环后，第2层进行循环的第二轮，就需要第1层继续循环1~n，然后第2层开始第三轮，第一层照样循环一遍，直到第2层完成最后一轮的循环，递归到第3层，第3层进行第一轮循环，就需要第2层重新循环一遍，第2层循环每一遍，对应需要第1层完整循环。<br>我推算到这里就想起来现在很火的深度学习里的递归神经网络，可以把这个任务的结果从左到右看成神经网络的每一层。","like_count":1},{"had_liked":false,"id":219170,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1589960759,"is_pvip":true,"replies":[{"id":"83527","content":"首先，理解递归程序，要理解递归子问题的概念，以及递归问题和子问题之间的同构性，证明递归程序的正确性，是需要利用数学归纳法的。打印五层循环的程序，需要依赖打印四层循环的程序，从4层到5层，这就是数学归纳法中的 k(i) --&gt; k(i+1) 的过程。递归的边界条件中，实现了打印1层循环的程序，这就是数学归纳法的 k(0) 成立，结合在一起，我们就能很轻松的知道，我们所实现的递归程序是否正确。这种思维过程，还需要你在日后的学习中，不断的加强锻炼，以便于你日后能理解和设计出更复杂的递归程序。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592214336,"ip_address":"","comment_id":219170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884928055","product_id":100043901,"comment_content":"老师您好，文章中最后实现的print_loop函数我不能很好的题目的关系对应起来，可以举个例子吗？谢谢老师。","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495701,"discussion_content":"首先，理解递归程序，要理解递归子问题的概念，以及递归问题和子问题之间的同构性，证明递归程序的正确性，是需要利用数学归纳法的。打印五层循环的程序，需要依赖打印四层循环的程序，从4层到5层，这就是数学归纳法中的 k(i) --&amp;gt; k(i+1) 的过程。递归的边界条件中，实现了打印1层循环的程序，这就是数学归纳法的 k(0) 成立，结合在一起，我们就能很轻松的知道，我们所实现的递归程序是否正确。这种思维过程，还需要你在日后的学习中，不断的加强锻炼，以便于你日后能理解和设计出更复杂的递归程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592214336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177969,"user_name":"Jinlee","can_delete":false,"product_type":"c1","uid":1644723,"ip_address":"","ucode":"8EDA9B0C5184EA","user_header":"https://static001.geekbang.org/account/avatar/00/19/18/b3/848ffa10.jpg","comment_is_top":false,"comment_ctime":1581563955,"is_pvip":false,"replies":[{"id":"69079","content":"你应该是学过 python 吧，C 是不支持这种 f1,f2 = f2, f1 + f2 这种语法的。这段代码，在 C 语言中，会被认为是一个逗号表达式，其中包括三个独立的语句，第一个是 f1、第二个是 f2 = f2，第三个是 f1 + f2。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581594681,"ip_address":"","comment_id":177969,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5876531251","product_id":100043901,"comment_content":"斐波那契循环部分：<br>①<br>int fib(int n) {<br>\tint f1 = 0, f2 = 1;<br>\tint i, res;<br>\tfor (i = 1; i &lt;= n; i++){<br>\t\tres = f2;<br>\t\tf2 = f1 + f2;<br>\t\tf1 = res;<br>\t}<br>\treturn res;<br>}<br>②<br>int fib(int n) {<br>\tint f1 = 0, f2 = 1;<br>\tint i;<br>\tfor (i = 1; i &lt;= n; i++){<br>\t\tf1, f2 = f2, f1 + f2;<br>\t}<br>\treturn f1;<br>}<br>一开始写的代码是②，但是发现输出结果永远是0。这就说明经过for循环之后f1的值并没有改变，这是为什么呢老师？","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483616,"discussion_content":"你应该是学过 python 吧，C 是不支持这种 f1,f2 = f2, f1 + f2 这种语法的。这段代码，在 C 语言中，会被认为是一个逗号表达式，其中包括三个独立的语句，第一个是 f1、第二个是 f2 = f2，第三个是 f1 + f2。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581594681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1644723,"avatar":"https://static001.geekbang.org/account/avatar/00/19/18/b3/848ffa10.jpg","nickname":"Jinlee","note":"","ucode":"8EDA9B0C5184EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169769,"discussion_content":"老师神算也，正在学python哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581644851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359487,"user_name":"look for","can_delete":false,"product_type":"c1","uid":1459157,"ip_address":"山东","ucode":"B19F0DED81B2BD","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/d5/a7eaf722.jpg","comment_is_top":false,"comment_ctime":1665568114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665568114","product_id":100043901,"comment_content":"思考题<br><br>int fib(int n)<br>{<br>  int f1 = 1;<br>  int f2 = 1;<br>  for (int i = 3; i &lt;= n; i++)<br>  {<br>    f2 = f1 + f2;<br>    f1 = f2 - f1;<br>  }<br>  return f2;<br>}","like_count":0},{"had_liked":false,"id":359478,"user_name":"look for","can_delete":false,"product_type":"c1","uid":1459157,"ip_address":"山东","ucode":"B19F0DED81B2BD","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/d5/a7eaf722.jpg","comment_is_top":false,"comment_ctime":1665565789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665565789","product_id":100043901,"comment_content":"今天的任务，递归程序，如果想它代码的执行过程，好难理解啊！","like_count":1},{"had_liked":false,"id":252568,"user_name":"乐毅","can_delete":false,"product_type":"c1","uid":1348052,"ip_address":"","ucode":"6361ADC9B0E8D5","user_header":"https://static001.geekbang.org/account/avatar/00/14/91/d4/3785c799.jpg","comment_is_top":false,"comment_ctime":1602385974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602385974","product_id":100043901,"comment_content":"个人觉得理解递归还需要一些基础比如每次函数调用时产生的栈桢","like_count":0},{"had_liked":false,"id":251342,"user_name":"武汉李先生","can_delete":false,"product_type":"c1","uid":1995728,"ip_address":"","ucode":"F0CCB26C320238","user_header":"","comment_is_top":false,"comment_ctime":1601472183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601472183","product_id":100043901,"comment_content":"胡船长，我理解递归有点困难，就举了个简单的例子：k=3，n=3。代入手推了一下，第k层循环应该是最左边一列的数字，第1层循环应该是最右边一列的数字。我的理解递归就是，从第1层开始循环1~n，此时2~k层都是初始值1，当第一层结束循环后，第2层进行循环的第二轮，就需要第1层继续循环1~n，然后第2层开始第三轮，第一层照样循环一遍，直到第2层完成最后一轮的循环，递归到第3层，第3层进行第一轮循环，就需要第2层重新循环一遍，第2层循环每一遍，对应需要第1层完整循环。<br>我推算到这里就想起来现在很火的深度学习里的递归神经网络，可以把这个任务的结果从左到右看成神经网络的每一层。","like_count":0},{"had_liked":false,"id":228188,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1592583407,"is_pvip":true,"replies":[{"id":"86279","content":"d(^_^o)，进步神速啊！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1594400435,"ip_address":"","comment_id":228188,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1592583407","product_id":100043901,"comment_content":"茶艺师学编程<br><br>通过动手把递推程序回归至循环程序，体会到递推以及数学归纳法的便利所在——能用简单的几句话（代码）就把事情搞定了。<br><br>顺带提一下菲波那契数列，这玩意真的很有趣：<br>1、明明数列的每一项都是自然数，然而它的通项公式却用无理数来表达；<br><br>2、后一项比前一项的比值的极限，就是黄金比例：（√5-1）&#47;2<br><br>思考题1：<br>1、验证边界条件K0成立——&gt;    if ( n == 1 || n == 2) return 1<br>2、假设Ki成立，证明Ki+1也成立——&gt;return fib(n - 1) + fib(n - 2)<br>3、所有Kn都成立<br><br>思考题2：<br>&#47;*思考题 数组方法 *&#47;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>int main(){<br>    printf(&quot;此方法产生的斐波那契数列长度等于与数组arr设定的容量大小。\\n\\n&quot;) ;<br>    int arr[10] = {1, 1};&#47;&#47;设定数组，且第一和第二为“1”<br>    int i = 0;&#47;&#47;在此环境里，指针移动变量i需要设定在for循环外<br>    for(i = 2; i &lt; 10; i++){&#47;&#47;该循环就是按照斐波那契数列的规则填满该数组剩下的空位<br>        arr[i] = arr[i - 1] + arr[i - 2];<br>    }<br>    for (i = 0; i &lt; 10; i++){&#47;&#47;该循环是，把指针回到一开始，然后按顺序把数组的数字输出<br>        printf(&quot;  %d&quot;, arr[i]);<br>    }<br>    printf(&quot;\\n\\n&quot;);<br>    system(&quot;pause&quot;);<br>    return 0;<br>}<br>&#47;*思考题 简单方法 *&#47;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>int main(){<br>    int a, b, n;<br>    printf(&quot;请问你要生成多长的裴波那契数列？\\n\\n&quot;);<br>    scanf(&quot;%d&quot;, &amp;n);<br>    a = 1;<br>    b = 1;<br>    for(int i = 0;i &lt; n; i++){<br>        printf(&quot; %d %d&quot;, a, b);<br>        a = a + b;<br>        b = b + a;<br>    }<br>    printf(&quot;\\n\\n\\n&quot;);<br>    system(&quot;pause&quot;);<br>return 0;<br>}<br><br>附带：课文例子的完整可用版<br>&#47;*课文例子的完全体*&#47;<br>#include &lt;stdio.h&gt;<br>int arr[100];<br>void print_loop(int k, int n, int total_k){<br>    if (k == 0){<br>        for( int i = total_k; i &gt;= 1; i--){<br>            if(i != total_k)printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, arr[i]);<br>        }<br>        printf(&quot;\\n&quot;);<br>        return ;<br>    }<br>    for (int i = 1; i &lt;= n; i++){<br>        arr[k] =i;<br>        print_loop(k - 1, n, total_k);<br>    }<br>    return;<br>}<br><br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498949,"discussion_content":"d(^_^o)，进步神速啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594400435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218197,"user_name":"Noah●^●","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1589736223,"is_pvip":false,"replies":[{"id":"83537","content":"很不错！能用两个变量搞定 fib 求和的过程！赞！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592214786,"ip_address":"","comment_id":218197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589736223","product_id":100043901,"comment_content":"#include &lt;cstdio&gt;<br><br>typedef long long ll;<br><br>int main()<br>{<br>    int n;<br>    scanf(&quot;%d&quot;, &amp;n);<br>    ll f1 = 1, f2 = 1;<br>    if (n == 1 || n == 2)<br>        puts(&quot;1&quot;);<br>    else<br>    {<br>        for (int i = 3; i &lt;= n; i++)<br>        {<br>            f2 = f1 + f2;<br>            f1 = f2 - f1;<br>        }<br>        printf(&quot;%lld\\n&quot;, f2);<br>    }<br>    return 0;<br>}<br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495378,"discussion_content":"很不错！能用两个变量搞定 fib 求和的过程！赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592214786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204662,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1586438973,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586438973","product_id":100043901,"comment_content":"在程序世界的数学归纳法只要合逻辑就可以应用在算法中实现，虽然也要经过逻辑演绎、三段论推断但是不完全像现实世界那样要经过把引理证明到没有逻辑瑕疵的定理才能用。而是直接可以把逻辑归纳用于计算机算法程序在有限步骤下的有理数计算通过即可。只是如果更符合数学定理和逻辑这个算法就更完美而已。","like_count":0},{"had_liked":false,"id":198955,"user_name":"王楷程","can_delete":false,"product_type":"c1","uid":1938215,"ip_address":"","ucode":"C53850ECCFC42E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/93/27/7d2ad04c.jpg","comment_is_top":false,"comment_ctime":1585474354,"is_pvip":false,"replies":[{"id":"74772","content":"int arr[100];<br>void print_loop(int k, int n, int total_k) {<br>    if (k == 0) {<br>        for (int i = total_k; i &gt;= 1; i--) {<br>            if (i != total_k) printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, arr[i]);<br>        }<br>        printf(&quot;\\n&quot;);<br>        return ;<br>    }<br>    for (int i = 1; i &lt;= n; i++) {<br>        arr[k] = i;<br>        print_loop(k - 1, n, total_k);<br>    }<br>    return ;<br>}","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1585499606,"ip_address":"","comment_id":198955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585474354","product_id":100043901,"comment_content":"<br>int arr[100];<br>int print_loop(int k, int n, int total_k) {<br>    if (k == 0) {<br>        for (int i = total_k; i &gt;= 1; i--) {<br>            if (i != total_k) printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, arr[i]);<br>        }<br>        printf(&quot;\\n&quot;);<br>    }<br>    for (int i = 1; i &lt;= n; i++) {<br>        arr[k] = i;<br>        print_loop(k - 1, n, total_k);<br>    }<br>    return;<br>}<br>这段代码的return 必须有返回值的吧，而且return 要写在前面，否则，当k == 0时，就会发生越界访问","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489772,"discussion_content":"int arr[100];\nvoid print_loop(int k, int n, int total_k) {\n    if (k == 0) {\n        for (int i = total_k; i &amp;gt;= 1; i--) {\n            if (i != total_k) printf(&amp;quot; &amp;quot;);\n            printf(&amp;quot;%d&amp;quot;, arr[i]);\n        }\n        printf(&amp;quot;\\n&amp;quot;);\n        return ;\n    }\n    for (int i = 1; i &amp;lt;= n; i++) {\n        arr[k] = i;\n        print_loop(k - 1, n, total_k);\n    }\n    return ;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585499606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186953,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1583978684,"is_pvip":false,"replies":[{"id":"72132","content":"哦哦~~~我看到了，你主函数里面，根本就不是在调用 aboutRecursion 函数啊~~~~你是写了一行 aboutRecursion 函数的声明。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583989111,"ip_address":"","comment_id":186953,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1583978684","product_id":100043901,"comment_content":"作者回复: 你这个程序编译的时候，没有报错？？你试试把 aboutRecursion 以及下面那个 f 函数放到主函数前面去。<br>--------------<br>回复老师：我这个编译是没问题。我把那两个函数搬到main前面也是一样的现象。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486935,"discussion_content":"哦哦~~~我看到了，你主函数里面，根本就不是在调用 aboutRecursion 函数啊~~~~你是写了一行 aboutRecursion 函数的声明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583989111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186004,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1583740997,"is_pvip":false,"replies":[{"id":"72095","content":"你这个程序编译的时候，没有报错？？你试试把 aboutRecursion 以及下面那个 f 函数放到主函数前面去。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583936497,"ip_address":"","comment_id":186004,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1583740997","product_id":100043901,"comment_content":"老师，有个问题请教：<br>int main() {<br>    int aboutRecursion();<br>}<br>int aboutRecursion() {<br>    int n;<br>    scanf(&quot;%d&quot;, &amp;n);<br>    printf(&quot;%d\\n&quot;, f(n));<br>    return 0;<br>}<br>int f(int n) {<br>    if (n == 1) return 1;<br>    return f(n-1) * n;<br>}<br><br>我这套代码编译之后运行，并不能按正常的逻辑输入一个n，程序就已经执行完。我尝试将aboutRecursion里的代码主体全部搬到main里，却能正常。请问这是怎么回事呢？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486579,"discussion_content":"你这个程序编译的时候，没有报错？？你试试把 aboutRecursion 以及下面那个 f 函数放到主函数前面去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583936497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186002,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1583740796,"is_pvip":false,"replies":[{"id":"72096","content":"yes！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583936521,"ip_address":"","comment_id":186002,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1583740796","product_id":100043901,"comment_content":"斐波那契数列的思考题<br>int fib(n) {<br>    &#47;&#47; 递归写法<br>    &#47;*<br>        if (n == 1 || n == 2) return 1;  &#47;&#47; 终止条件 -- 数学归纳法step1<br>        return fib(n-1) + fib(n-2);  &#47;&#47; 处理过程 -- 数学归纳法step2<br>    *&#47;<br><br>    &#47;&#47; 循环写法<br>    int f1 = 1, f2 = 1, f3;<br>    for (int i = 3; i &lt;= n; i++) {<br>        f3 = f1 + f2;<br>        f1 = f2;<br>        f2 = f3;<br>    }<br>    return f3;<br>}<br><br>看了评论，原来可以优化只用两个变量","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486577,"discussion_content":"yes！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583936521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179309,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1581956748,"is_pvip":false,"replies":[{"id":"69700","content":"可以的。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1582018954,"ip_address":"","comment_id":179309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581956748","product_id":100043901,"comment_content":"老师，能不能把k==0的时候每次输出的一行数认为是k==1的循环的一个元素，把k==1认为是边界条件呀，这样理解可以吗","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484194,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582018954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179193,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1581934180,"is_pvip":false,"replies":[{"id":"69592","content":"⁄(⁄ ⁄ ⁄ω⁄ ⁄ ⁄)⁄我想想换一种表述。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581955413,"ip_address":"","comment_id":179193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581934180","product_id":100043901,"comment_content":"感觉理解示例代码得关键在于理解“递归的边界条件就是当 k == 0 的时候，就是所谓的 0 层循环，也就是程序打印一行具体内容的地方”这句话，看了半个小时才反应过来。。。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484137,"discussion_content":"⁄(⁄ ⁄ ⁄ω⁄ ⁄ ⁄)⁄我想想换一种表述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581955413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177796,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1581502004,"is_pvip":true,"replies":[{"id":"69082","content":"我猜，你这段代码，绝对没有经过测试。有一点儿小瑕疵，但是逻辑是正确的。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581594765,"ip_address":"","comment_id":177796,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581502004","product_id":100043901,"comment_content":"斐波那契循环方法<br>int fib(n) {<br>    int first = 1;<br>    int second = 1;<br>    for(int i = 3; i &lt; n; i++) {<br>        second = first + second;<br>        first = second - first;<br>    }<br>    return (first + second);<br>}","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483546,"discussion_content":"我猜，你这段代码，绝对没有经过测试。有一点儿小瑕疵，但是逻辑是正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581594765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177761,"user_name":"徐洲更","can_delete":false,"product_type":"c1","uid":1314643,"ip_address":"","ucode":"F8A323CB732D05","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/53/92a50f01.jpg","comment_is_top":false,"comment_ctime":1581493160,"is_pvip":true,"replies":[{"id":"69084","content":"不算哦~~~~其中有一个 tmp 变量是额外使用的，所以，这段程序还是可以优化的。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581594881,"ip_address":"","comment_id":177761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581493160","product_id":100043901,"comment_content":"不知道这样子算不算只用了f1和f2<br>int fib(int n){<br>    if ( n &lt; 2) return 1;<br>    int f1=1;<br>    int f2=1;<br>    int tmp;<br>    for (int i = 1; i &lt; n; i++){<br>        tmp = f2;<br>        f2 = f1 + f2;<br>        f1 = tmp;<br>    }<br>    return f2;<br>}<br><br>1. 当x=0,或 x=1时，f(x) = 1<br>2. 当x=n时, f(x) = f(x-1) + f(x-2)","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483529,"discussion_content":"不算哦~~~~其中有一个 tmp 变量是额外使用的，所以，这段程序还是可以优化的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581594881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177549,"user_name":"Cache","can_delete":false,"product_type":"c1","uid":1686477,"ip_address":"","ucode":"B2DAC13FC4EE7C","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","comment_is_top":false,"comment_ctime":1581415965,"is_pvip":false,"replies":[{"id":"68926","content":"不错！试试能不能只使用f1和 f2","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581419994,"ip_address":"","comment_id":177549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581415965","product_id":100043901,"comment_content":"斐波那契改为循环结构:<br>主要代码:<br>int f1,f2;<br>f1 ＝ f2 ＝ 1;<br><br>for (int i = 3; i &lt;= n; i++)  {<br>    f3 ＝ f1 + f2;<br>    f1 ＝ f2; <br>    f2 ＝ f3;<br>}","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483460,"discussion_content":"不错！试试能不能只使用f1和 f2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581419994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177545,"user_name":"Cache","can_delete":false,"product_type":"c1","uid":1686477,"ip_address":"","ucode":"B2DAC13FC4EE7C","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","comment_is_top":false,"comment_ctime":1581415532,"is_pvip":false,"replies":[{"id":"68925","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581419937,"ip_address":"","comment_id":177545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581415532","product_id":100043901,"comment_content":"日常做事，都说结果不重要，过程才是最重要的，当然只结果也很重要。而递归往往是结果重要，过程不重要。当你去试图理清过程的时候，往往会陷入死循环之中。理解递归，只要搞清楚头和尾就行了，中间细节只要逻辑正确，就别去care了。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483457,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581419937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177481,"user_name":"栾~龟虽寿！","can_delete":false,"product_type":"c1","uid":1504671,"ip_address":"","ucode":"219B38C08979FE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","comment_is_top":false,"comment_ctime":1581402381,"is_pvip":false,"replies":[{"id":"68927","content":"递归的边界条件里面，没有return语句","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581420044,"ip_address":"","comment_id":177481,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581402381","product_id":100043901,"comment_content":"#include &lt;stdio.h&gt;<br>int arr[100];<br>int print_loop(int k, int n, int total_k) {<br>    if (k == 0) {<br>        for (int i = total_k; i &gt;= 1; i--) {<br>            if (i != total_k) printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, arr[i]);<br>        }<br>        printf(&quot;\\n&quot;);<br>    }<br>    for (int i = 1; i &lt;= n; i++) {<br>        arr[k] = i;<br>        print_loop(k - 1, n, total_k);<br>    }<br>    return ;<br>}<br>int main(){    <br>    print_loop(4,3,4);<br>    return 0;<br>}未得到预期效果，我错在哪里？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483442,"discussion_content":"递归的边界条件里面，没有return语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581420044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1704112,"avatar":"","nickname":"Geek_d200e3","note":"","ucode":"1B72C4C2845AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166732,"discussion_content":"void print_loop(int k, int n, int total_k) {\n    if (k == 0) {\n        for (int i = total_k; i >= 1; i--) {\n            if (i != total_k) printf(&#34; &#34;);\n            printf(&#34;%d&#34;, arr[i]);\n        }\n        printf(&#34;\\n&#34;);\n        return;\n    }\n    for (int i = 1; i <= n; i++) {\n        arr[k] = i;\n        print_loop(k - 1, n, total_k);\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581425427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177415,"user_name":"Bradley","can_delete":false,"product_type":"c1","uid":1138122,"ip_address":"","ucode":"78E93EE7A03400","user_header":"https://static001.geekbang.org/account/avatar/00/11/5d/ca/35ed7032.jpg","comment_is_top":false,"comment_ctime":1581389864,"is_pvip":false,"replies":[{"id":"69090","content":"希望能使你对递归，有一个全新的了解。^_^","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581596005,"ip_address":"","comment_id":177415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581389864","product_id":100043901,"comment_content":"递归是非常重要的，越基础的概念越理解不到位。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483418,"discussion_content":"希望能使你对递归，有一个全新的了解。^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581596005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}