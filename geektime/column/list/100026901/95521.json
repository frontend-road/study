{"id":95521,"title":"04 | 字典、集合，你真的了解吗？","content":"<p>你好，我是景霄。</p><p>前面的课程，我们学习了Python中的列表和元组，了解了他们的基本操作和性能比较。这节课，我们再来学习两个同样很常见并且很有用的数据结构：字典（dict）和集合（set）。字典和集合在Python被广泛使用，并且性能进行了高度优化，其重要性不言而喻。</p><h2>字典和集合基础</h2><p>那究竟什么是字典，什么是集合呢？字典是一系列由键（key）和值（value）配对组成的元素的集合，在Python3.7+，字典被确定为有序（注意：在3.6中，字典有序是一个implementation detail，在3.7才正式成为语言特性，因此3.6中无法100%确保其有序性），而3.6之前是无序的，其长度大小可变，元素可以任意地删减和改变。</p><p>相比于列表和元组，字典的性能更优，特别是对于查找、添加和删除操作，字典都能在常数时间复杂度内完成。</p><p>而集合和字典基本相同，唯一的区别，就是集合没有键和值的配对，是一系列无序的、唯一的元素组合。</p><p>首先我们来看字典和集合的创建，通常有下面这几种方式：</p><pre><code>d1 = {'name': 'jason', 'age': 20, 'gender': 'male'}\nd2 = dict({'name': 'jason', 'age': 20, 'gender': 'male'})\nd3 = dict([('name', 'jason'), ('age', 20), ('gender', 'male')])\nd4 = dict(name='jason', age=20, gender='male') \nd1 == d2 == d3 ==d4\nTrue\n\ns1 = {1, 2, 3}\ns2 = set([1, 2, 3])\ns1 == s2\nTrue\n</code></pre><p>这里注意，Python中字典和集合，无论是键还是值，都可以是混合类型。比如下面这个例子，我创建了一个元素为<code>1</code>，<code>'hello'</code>，<code>5.0</code>的集合：</p><!-- [[[read_end]]] --><pre><code>s = {1, 'hello', 5.0}\n</code></pre><p>再来看元素访问的问题。字典访问可以直接索引键，如果不存在，就会抛出异常：</p><pre><code>d = {'name': 'jason', 'age': 20}\nd['name']\n'jason'\nd['location']\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nKeyError: 'location'\n</code></pre><p>也可以使用get(key, default)函数来进行索引。如果键不存在，调用get()函数可以返回一个默认值。比如下面这个示例，返回了<code>'null'</code>。</p><pre><code>d = {'name': 'jason', 'age': 20}\nd.get('name')\n'jason'\nd.get('location', 'null')\n'null'\n</code></pre><p>说完了字典的访问，我们再来看集合。</p><p>首先我要强调的是，<strong>集合并不支持索引操作，因为集合本质上是一个哈希表，和列表不一样</strong>。所以，下面这样的操作是错误的，Python会抛出异常：</p><pre><code>s = {1, 2, 3}\ns[0]\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre><p>想要判断一个元素在不在字典或集合内，我们可以用value in dict/set 来判断。</p><pre><code>s = {1, 2, 3}\n1 in s\nTrue\n10 in s\nFalse\n\nd = {'name': 'jason', 'age': 20}\n'name' in d\nTrue\n'location' in d\nFalse\n</code></pre><p>当然，除了创建和访问，字典和集合也同样支持增加、删除、更新等操作。</p><pre><code>d = {'name': 'jason', 'age': 20}\nd['gender'] = 'male' # 增加元素对'gender': 'male'\nd['dob'] = '1999-02-01' # 增加元素对'dob': '1999-02-01'\nd\n{'name': 'jason', 'age': 20, 'gender': 'male', 'dob': '1999-02-01'}\nd['dob'] = '1998-01-01' # 更新键'dob'对应的值 \nd.pop('dob') # 删除键为'dob'的元素对\n'1998-01-01'\nd\n{'name': 'jason', 'age': 20, 'gender': 'male'}\n\ns = {1, 2, 3}\ns.add(4) # 增加元素4到集合\ns\n{1, 2, 3, 4}\ns.remove(4) # 从集合中删除元素4\ns\n{1, 2, 3}\n</code></pre><p>不过要注意，集合的pop()操作是删除集合中最后一个元素，可是集合本身是无序的，你无法知道会删除哪个元素，因此这个操作得谨慎使用。</p><p>实际应用中，很多情况下，我们需要对字典或集合进行排序，比如，取出值最大的50对。</p><p>对于字典，我们通常会根据键或值，进行升序或降序排序：</p><pre><code>d = {'b': 1, 'a': 2, 'c': 10}\nd_sorted_by_key = sorted(d.items(), key=lambda x: x[0]) # 根据字典键的升序排序\nd_sorted_by_value = sorted(d.items(), key=lambda x: x[1]) # 根据字典值的升序排序\nd_sorted_by_key\n[('a', 2), ('b', 1), ('c', 10)]\nd_sorted_by_value\n[('b', 1), ('a', 2), ('c', 10)]\n</code></pre><p>这里返回了一个列表。列表中的每个元素，是由原字典的键和值组成的元组。</p><p>而对于集合，其排序和前面讲过的列表、元组很类似，直接调用sorted(set)即可，结果会返回一个排好序的列表。</p><pre><code>s = {3, 4, 2, 1}\nsorted(s) # 对集合的元素进行升序排序\n[1, 2, 3, 4]\n</code></pre><h2>字典和集合性能</h2><p>文章开头我就说到了，字典和集合是进行过性能高度优化的数据结构，特别是对于查找、添加和删除操作。那接下来，我们就来看看，它们在具体场景下的性能表现，以及与列表等其他数据结构的对比。</p><p>比如电商企业的后台，存储了每件产品的ID、名称和价格。现在的需求是，给定某件商品的ID，我们要找出其价格。</p><p>如果我们用列表来存储这些数据结构，并进行查找，相应的代码如下：</p><pre><code>def find_product_price(products, product_id):\n    for id, price in products:\n        if id == product_id:\n            return price\n    return None \n     \nproducts = [\n    (143121312, 100), \n    (432314553, 30),\n    (32421912367, 150) \n]\n\nprint('The price of product 432314553 is {}'.format(find_product_price(products, 432314553)))\n\n# 输出\nThe price of product 432314553 is 30\n</code></pre><p>假设列表有n个元素，而查找的过程要遍历列表，那么时间复杂度就为O(n)。即使我们先对列表进行排序，然后使用二分查找，也会需要O(logn)的时间复杂度，更何况，列表的排序还需要O(nlogn)的时间。</p><p>但如果我们用字典来存储这些数据，那么查找就会非常便捷高效，只需O(1)的时间复杂度就可以完成。原因也很简单，刚刚提到过的，字典的内部组成是一张哈希表，你可以直接通过键的哈希值，找到其对应的值。</p><pre><code>products = {\n  143121312: 100,\n  432314553: 30,\n  32421912367: 150\n}\nprint('The price of product 432314553 is {}'.format(products[432314553])) \n\n# 输出\nThe price of product 432314553 is 30\n</code></pre><p>类似的，现在需求变成，要找出这些商品有多少种不同的价格。我们还用同样的方法来比较一下。</p><p>如果还是选择使用列表，对应的代码如下，其中，A和B是两层循环。同样假设原始列表有n个元素，那么，在最差情况下，需要O(n^2)的时间复杂度。</p><pre><code># list version\ndef find_unique_price_using_list(products):\n    unique_price_list = []\n    for _, price in products: # A\n        if price not in unique_price_list: #B\n            unique_price_list.append(price)\n    return len(unique_price_list)\n\nproducts = [\n    (143121312, 100), \n    (432314553, 30),\n    (32421912367, 150),\n    (937153201, 30)\n]\nprint('number of unique price is: {}'.format(find_unique_price_using_list(products)))\n\n# 输出\nnumber of unique price is: 3\n</code></pre><p>但如果我们选择使用集合这个数据结构，由于集合是高度优化的哈希表，里面元素不能重复，并且其添加和查找操作只需O(1)的复杂度，那么，总的时间复杂度就只有O(n)。</p><pre><code># set version\ndef find_unique_price_using_set(products):\n    unique_price_set = set()\n    for _, price in products:\n        unique_price_set.add(price)\n    return len(unique_price_set)        \n\nproducts = [\n    (143121312, 100), \n    (432314553, 30),\n    (32421912367, 150),\n    (937153201, 30)\n]\nprint('number of unique price is: {}'.format(find_unique_price_using_set(products)))\n\n# 输出\nnumber of unique price is: 3\n</code></pre><p>可能你对这些时间复杂度没有直观的认识，我可以举一个实际工作场景中的例子，让你来感受一下。</p><p>下面的代码，初始化了含有100,000个元素的产品，并分别计算了使用列表和集合来统计产品价格数量的运行时间：</p><pre><code>import time\nid = [x for x in range(0, 100000)]\nprice = [x for x in range(200000, 300000)]\nproducts = list(zip(id, price))\n\n# 计算列表版本的时间\nstart_using_list = time.perf_counter()\nfind_unique_price_using_list(products)\nend_using_list = time.perf_counter()\nprint(&quot;time elapse using list: {}&quot;.format(end_using_list - start_using_list))\n## 输出\ntime elapse using list: 41.61519479751587\n\n# 计算集合版本的时间\nstart_using_set = time.perf_counter()\nfind_unique_price_using_set(products)\nend_using_set = time.perf_counter()\nprint(&quot;time elapse using set: {}&quot;.format(end_using_set - start_using_set))\n# 输出\ntime elapse using set: 0.008238077163696289\n</code></pre><p>你可以看到，仅仅十万的数据量，两者的速度差异就如此之大。事实上，大型企业的后台数据往往有上亿乃至十亿数量级，如果使用了不合适的数据结构，就很容易造成服务器的崩溃，不但影响用户体验，并且会给公司带来巨大的财产损失。</p><h2>字典和集合的工作原理</h2><p>我们通过举例以及与列表的对比，看到了字典和集合操作的高效性。不过，字典和集合为什么能够如此高效，特别是查找、插入和删除操作？</p><p>这当然和字典、集合内部的数据结构密不可分。不同于其他数据结构，字典和集合的内部结构都是一张哈希表。</p><ul>\n<li>\n<p>对于字典而言，这张表存储了哈希值（hash）、键和值这3个元素。</p>\n</li>\n<li>\n<p>而对集合来说，区别就是哈希表内没有键和值的配对，只有单一的元素了。</p>\n</li>\n</ul><p>我们来看，老版本Python的哈希表结构如下所示：</p><pre><code>--+-------------------------------+\n  | 哈希值(hash)  键(key)  值(value)\n--+-------------------------------+\n0 |    hash0      key0    value0\n--+-------------------------------+\n1 |    hash1      key1    value1\n--+-------------------------------+\n2 |    hash2      key2    value2\n--+-------------------------------+\n. |           ...\n__+_______________________________+\n\n</code></pre><p>不难想象，随着哈希表的扩张，它会变得越来越稀疏。举个例子，比如我有这样一个字典：</p><pre><code>{'name': 'mike', 'dob': '1999-01-01', 'gender': 'male'}\n</code></pre><p>那么它会存储为类似下面的形式：</p><pre><code>entries = [\n['--', '--', '--']\n[-230273521, 'dob', '1999-01-01'],\n['--', '--', '--'],\n['--', '--', '--'],\n[1231236123, 'name', 'mike'],\n['--', '--', '--'],\n[9371539127, 'gender', 'male']\n]\n</code></pre><p>这样的设计结构显然非常浪费存储空间。为了提高存储空间的利用率，现在的哈希表除了字典本身的结构，会把索引和哈希值、键、值单独分开，也就是下面这样新的结构：</p><pre><code>Indices\n----------------------------------------------------\nNone | index | None | None | index | None | index ...\n----------------------------------------------------\n\nEntries\n--------------------\nhash0   key0  value0\n---------------------\nhash1   key1  value1\n---------------------\nhash2   key2  value2\n---------------------\n        ...\n---------------------\n</code></pre><p>那么，刚刚的这个例子，在新的哈希表结构下的存储形式，就会变成下面这样：</p><pre><code>indices = [None, 1, None, None, 0, None, 2]\nentries = [\n[1231236123, 'name', 'mike'],\n[-230273521, 'dob', '1999-01-01'],\n[9371539127, 'gender', 'male']\n]\n</code></pre><p>我们可以很清晰地看到，空间利用率得到很大的提高。</p><p>清楚了具体的设计结构，我们接着来看这几个操作的工作原理。</p><h3>插入操作</h3><p>每次向字典或集合插入一个元素时，Python会首先计算键的哈希值（hash(key)），再和 mask = PyDicMinSize - 1做与操作，计算这个元素应该插入哈希表的位置index = hash(key) &amp; mask。如果哈希表中此位置是空的，那么这个元素就会被插入其中。</p><p>而如果此位置已被占用，Python便会比较两个元素的哈希值和键是否相等。</p><ul>\n<li>\n<p>若两者都相等，则表明这个元素已经存在，如果值不同，则更新值。</p>\n</li>\n<li>\n<p>若两者中有一个不相等，这种情况我们通常称为哈希冲突（hash collision），意思是两个元素的键不相等，但是哈希值相等。这种情况下，Python便会继续寻找表中空余的位置，直到找到位置为止。</p>\n</li>\n</ul><p>值得一提的是，通常来说，遇到这种情况，最简单的方式是线性寻找，即从这个位置开始，挨个往后寻找空位。当然，Python内部对此进行了优化（这一点无需深入了解，你有兴趣可以查看源码，我就不再赘述），让这个步骤更加高效。</p><h3>查找操作</h3><p>和前面的插入操作类似，Python会根据哈希值，找到其应该处于的位置；然后，比较哈希表这个位置中元素的哈希值和键，与需要查找的元素是否相等。如果相等，则直接返回；如果不等，则继续查找，直到找到空位或者抛出异常为止。</p><h3>删除操作</h3><p>对于删除操作，Python会暂时对这个位置的元素，赋于一个特殊的值，等到重新调整哈希表的大小时，再将其删除。</p><p>不难理解，哈希冲突的发生，往往会降低字典和集合操作的速度。因此，为了保证其高效性，字典和集合内的哈希表，通常会保证其至少留有1/3的剩余空间。随着元素的不停插入，当剩余空间小于1/3时，Python会重新获取更大的内存空间，扩充哈希表。不过，这种情况下，表内所有的元素位置都会被重新排放。</p><p>虽然哈希冲突和哈希表大小的调整，都会导致速度减缓，但是这种情况发生的次数极少。所以，平均情况下，这仍能保证插入、查找和删除的时间复杂度为O(1)。</p><h2>总结</h2><p>这节课，我们一起学习了字典和集合的基本操作，并对它们的高性能和内部存储结构进行了讲解。</p><p>字典在Python3.7+是有序的数据结构，而集合是无序的，其内部的哈希表存储结构，保证了其查找、插入、删除操作的高效性。所以，字典和集合通常运用在对元素的高效查找、去重等场景。</p><h2>思考题</h2><p><strong>1.</strong> 下面初始化字典的方式，哪一种更高效？</p><pre><code># Option A\nd = {'name': 'jason', 'age': 20, 'gender': 'male'}\n\n# Option B\nd = dict({'name': 'jason', 'age': 20, 'gender': 'male'})\n</code></pre><p><strong>2.</strong> 字典的键可以是一个列表吗？下面这段代码中，字典的初始化是否正确呢？如果不正确，可以说出你的原因吗？</p><pre><code>d = {'name': 'jason', ['education']: ['Tsinghua University', 'Stanford University']}\n</code></pre><p>欢迎留言和我分享，也欢迎你把这篇文章分享给你的同事、朋友。</p><p></p>","comments":[{"had_liked":false,"id":95366,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1558043842,"is_pvip":false,"replies":[{"id":"34132","content":"正解","user_name":"作者回复","comment_id":95366,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080691,"user_name_real":"Jingxiao"}],"discussion_count":8,"race_medal":0,"score":"1822624177346","product_id":100026901,"comment_content":"思考题 1：<br>第一种方法更快，原因感觉上是和之前一样，就是不需要去调用相关的函数，而且像老师说的那样 {} 应该是关键字，内部会去直接调用底层C写好的代码<br><br>思考题 2:<br>用列表作为 Key 在这里是不被允许的，因为列表是一个动态变化的数据结构，字典当中的 key 要求是不可变的，原因也很好理解，key 首先是不重复的，如果 Key 是可以变化的话，那么随着 Key 的变化，这里就有可能就会有重复的 Key，那么这就和字典的定义相违背；如果把这里的列表换成之前我们讲过的元组是可以的，因为元组不可变<br>","like_count":424,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450427,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1600773,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/LyDQYy515JwT0yHMSrPFsC1gfGnXyYLka3mDVLicAOIdyzMMZqNm0y8SNficDJYR1coDh5QOhxkHEjzqibFmNBCnA/132","nickname":"Zeb爱python","note":"","ucode":"6164593B62880E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1715,"discussion_content":"import timeit\n\nprint(timeit.timeit(stmt=&#34;d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 2}&#34;, number=100000))\n\nprint(\n    timeit.timeit(\n        stmt=&#34;d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;})&#34;,\n        number=100000))\n\nd = {\n    &#39;name&#39;: &#39;jason&#39;,\n    &#39;education&#39;: [&#39;Tsinghua University&#39;, &#39;Stanford University&#39;]\n}\n0.012273817000000006\n0.04732211700000001\n后者是前者的4倍\n\n","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1562837659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300267,"discussion_content":"1. key是不可变的，这是字典的定义，那为什么字典的定义要key是不可变的呢？\n2. 因为python中的dict底层是哈希表，对于每一个键值，都会计算相应的哈希值，键值如果可以变化，如何计算对应的哈希值呢？\n所以：\n可变的列表是not hashable，所以不可以作为字典的键值。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598003768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191812,"discussion_content":"原因也很好理解，key 首先是不重复的，如果 Key 是可以变化的话，那么随着 Key 的变化，这里就有可能就会有重复的 Key，那么这就和字典的定义相违背；\n------------\n我认为更好理解的是：如果key可以变化，可能与以前存在的key发生重复，那么value值就会有两个，这样会发生冲突。而且与字典key是唯一的也冲突。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583037651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87286,"discussion_content":"如果key是元组之中有list,([1,2],3) 比如这个元组就不能作为key","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576659094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257337,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/79/be03e56e.jpg","nickname":"骏杰","note":"","ucode":"4599C4C76415A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352076,"discussion_content":"key可以是对象么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614595544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543620,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/c4/2dacec23.jpg","nickname":"Python的理想主义","note":"","ucode":"9B18A2FE1A3B12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48164,"discussion_content":"强，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573455836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192989,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","nickname":"beiler","note":"","ucode":"0A62FE86617486","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2781,"discussion_content":"赞成楼主","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95368,"user_name":"燕儿衔泥","can_delete":false,"product_type":"c1","uid":1524314,"ip_address":"","ucode":"6F9FB02B7DED65","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/5a/7206c105.jpg","comment_is_top":false,"comment_ctime":1558044336,"is_pvip":false,"replies":[{"id":"34130","content":"使用dis分析其字节码很赞","user_name":"作者回复","comment_id":95368,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080484,"user_name_real":"Jingxiao"}],"discussion_count":9,"race_medal":0,"score":"366630264496","product_id":100026901,"comment_content":"1.直接｛｝的方式，更高效。可以使用dis分析其字节码<br>2.字典的键值，需要不可变，而列表是动态的，可变的。可以改为元组","like_count":85,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450428,"discussion_content":"使用dis分析其字节码很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026724,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/a4/a1111483.jpg","nickname":"温柔的贪婪","note":"","ucode":"BA2BCFDC8FDE5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285319,"discussion_content":"感谢分享，尝试了一下，确实直观。\n\n\n>>> import dis\n>>> def make_dict_1():\n    return {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}\n\n>>> def make_dict_2():\n    return dict({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3})\n\n>>> dis.dis(make_dict_1)\n  2           0 LOAD_CONST               1 (1)\n              2 LOAD_CONST               2 (2)\n              4 LOAD_CONST               3 (3)\n              6 LOAD_CONST               4 ((&#39;a&#39;, &#39;b&#39;, &#39;c&#39;))\n              8 BUILD_CONST_KEY_MAP      3\n             10 RETURN_VALUE\n>>> dis.dis(make_dict_2)\n  2           0 LOAD_GLOBAL              0 (dict)\n              2 LOAD_CONST               1 (1)\n              4 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              8 LOAD_CONST               4 ((&#39;a&#39;, &#39;b&#39;, &#39;c&#39;))\n             10 BUILD_CONST_KEY_MAP      3\n             12 CALL_FUNCTION            1\n             14 RETURN_VALUE","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1592806539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922661,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/56/65/fa4437d7.jpg","nickname":"Wonderfulpeng","note":"","ucode":"1BA9AB30B52159","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211815,"discussion_content":"领教了，这里顺便也给路过的朋友给出dis分析的安装操作：\n1、pip安装：pip install dis；\n2、命令行运行结果：python -m dis *.py","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584888895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183821,"avatar":"https://static001.geekbang.org/account/avatar/00/12/10/4d/f548bc68.jpg","nickname":"Apollo","note":"","ucode":"3A0C79CCB21FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31564,"discussion_content":"牛逼了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570936207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374042,"discussion_content":"牛逼啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620977710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541263,"avatar":"https://static001.geekbang.org/account/avatar/00/17/84/8f/a305cc1e.jpg","nickname":"otakuhuang","note":"","ucode":"283641975339AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371296,"discussion_content":"又发现了新的玩意儿 dis","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619708623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039464,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/68/006ba72c.jpg","nickname":"Untitled","note":"","ucode":"8DD6ABA3E81A2E","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336539,"discussion_content":"学习了~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608622052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140565,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkfZpMx6JDjRiaa51DWRtncfQOy8Lblia1XkeIsXiccTG1nIKyaSic01H0IXgHM3KPSYJ1x51avblJAg/132","nickname":"Geek_8a0a23","note":"","ucode":"605C1750C59918","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288645,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593831413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076531,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6d/33/2ea1134b.jpg","nickname":"小圣","note":"","ucode":"0D156CE4CF8029","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197065,"discussion_content":"因为元祖里边可以存放列表这类可变因素，所以如果实在想拿元祖当字典的键（Key），那必须对元祖做限制：元组中只包括像数字和字符串这样的不可变元素时，才可以作为字典中有效的键（Key）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583402729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95726,"user_name":"豊","can_delete":false,"product_type":"c1","uid":1069119,"ip_address":"","ucode":"2610D927B456CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/3f/ddd032bb.jpg","comment_is_top":false,"comment_ctime":1558149443,"is_pvip":true,"discussion_count":13,"race_medal":0,"score":"173356841283","product_id":100026901,"comment_content":"老师，你好！有几个让我困惑的地方想跟您确认一下，问题有点多，希望不吝赐教！<br>1. 为了提高哈希表的空间利用率，于是使用了Indices、Entries结构分开存储（index）和（hashcode、key、value），这里的index是否就是Entries列表的下标？<br>2、如果问题1成立，通过hash(key) &amp; (PyDicMinSize - 1)计算出来的是否为Indices列表的下标？<br>3、如果问题2成立，PyDicMinSize是什么？为什么要使用hashcode与(PyDicMinSize - 1)做与运算，相比起直接用hashcode作为Indices列表的下标会有什么好处？<br>4、如果问题2成立，在往字典插入新元素的时候，通过hash(key) &amp; mask计算出Indices的下标，如果Indices对应的元素位置值为None，则是否会将其值(index)修改为len(Entries)，然后在Entries列表追加一行新的记录（hashcode，key，value）？<br>5、如果问题2成立，在往字典插入新元素的时候，通过hash(key) &amp; mask计算出Indices的下标，如果Indices对应的元素位置已经有值，则会跟Entries表中对应位置的key进行hash比较及相等比较来决定是进行value的更新处理还是hash冲突处理？","like_count":40,"discussions":[{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191819,"discussion_content":"问题三：因为hash code计算出来的很可能是间隔很大的数，比如有有两个数，一个计算出来的索引是1，一个计算出来的索引是100万，那么你申请的数组需要100万位。这样造成大量的内存浪费，PyDicMinSize 就是确定一个固定的长度，这样申请资源只申请这么大，&amp; 其实就是计算出来的值只在0~PyDicMinSize范围内","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1583038616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1486674,"avatar":"https://static001.geekbang.org/account/avatar/00/16/af/52/41cfc8ad.jpg","nickname":"Focus","note":"","ucode":"5FB591D017B393","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352836,"discussion_content":"https://zhuanlan.zhihu.com/p/73426505，可以看一下这个讲解，可以有更深层的理解","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1614865452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052928,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/53/40/d599bf28.jpg","nickname":"冻糕","note":"","ucode":"B0A45E87795C69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289941,"discussion_content":"entries[indices[index]]=hashcode-key-value\nindex是 indices数组的下标索引，对应存储的值是连续的整数。\n也就是entries的索引。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594276959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1531458,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5e/42/e94ecc17.jpg","nickname":"唐焕","note":"","ucode":"576E21F1ACC099","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51587,"discussion_content":"&amp;与运算是为了提高计算效率做的优化，确定索引位置","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573905351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1659261,"avatar":"https://static001.geekbang.org/account/avatar/00/19/51/7d/2772ec9a.jpg","nickname":"风过留痕","note":"","ucode":"F13405AD8511B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10057,"discussion_content":"我也想知道，老师来解答一下吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568259805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528650,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/4a/125225c1.jpg","nickname":"KT.","note":"","ucode":"7E5498EFB53BCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1962,"discussion_content":"想知道+1...期待老师的解答！！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563150416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245871,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/af/c46ef3c3.jpg","nickname":"李姗姗","note":"","ucode":"F3A0CF544D551C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305291,"discussion_content":"1. index是实际物理位置，它里面存储的是entries的下标：len(entries)\n2.有冲突会做hash冲突处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599840488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140565,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkfZpMx6JDjRiaa51DWRtncfQOy8Lblia1XkeIsXiccTG1nIKyaSic01H0IXgHM3KPSYJ1x51avblJAg/132","nickname":"Geek_8a0a23","note":"","ucode":"605C1750C59918","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288648,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593831740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1995257,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/71/f9/85329b42.jpg","nickname":"做一个可靠的UDP","note":"","ucode":"2428ED20AD3398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261714,"discussion_content":"提的问题都很好，看了你的推测还有下面的回复，很明白了\n问题的猜测应该都是对的，对于第二个问题Geek_04e22a回答的很明白\n感谢你们","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588995925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1713672,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/26/08/3186439f.jpg","nickname":"郭敦敏Dominic","note":"","ucode":"F3BB8878D02D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141261,"discussion_content":"想知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579405992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183821,"avatar":"https://static001.geekbang.org/account/avatar/00/12/10/4d/f548bc68.jpg","nickname":"Apollo","note":"","ucode":"3A0C79CCB21FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31585,"discussion_content":"你的提问很好👍，第二点应该是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570937437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183821,"avatar":"https://static001.geekbang.org/account/avatar/00/12/10/4d/f548bc68.jpg","nickname":"Apollo","note":"","ucode":"3A0C79CCB21FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31570,"discussion_content":"哈哈😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570936418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062190,"avatar":"https://static001.geekbang.org/account/avatar/00/10/35/2e/074b771b.jpg","nickname":"teaGod","note":"","ucode":"2E90567B6EC06B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2161,"discussion_content":"这一块真是有好多地方搞不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563319086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95468,"user_name":"Python高效编程","can_delete":false,"product_type":"c1","uid":1325271,"ip_address":"","ucode":"B12B5F43B4335E","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/d7/de6832df.jpg","comment_is_top":false,"comment_ctime":1558060316,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"151881915676","product_id":100026901,"comment_content":"Python 3.7 以后插入有序变为字典的特性。构造新字典的方式：<br>1. double star<br>&gt;&gt;&gt; d1 = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}<br>&gt;&gt;&gt; d2 = {&#39;hobby&#39;: &#39;swim&#39;, **d1}<br>2. update 函数：<br>&gt;&gt;&gt; d3 = {&#39;hobby&#39;: &#39;swim&#39;}<br>&gt;&gt;&gt; d3.update(d1)<br>我们可以看到这两种方式得到的字典是满足插入有序的：<br>&gt;&gt;&gt; d3<br>{&#39;hobby&#39;: &#39;swim&#39;, &#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}<br>在我的电脑上 第一种方式的性能要好一些。<br>double star:<br>229 ns ± 22.8 ns per loop<br>update:<br>337 ns ± 49.7 ns per loop","like_count":35,"discussions":[{"author":{"id":1140565,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkfZpMx6JDjRiaa51DWRtncfQOy8Lblia1XkeIsXiccTG1nIKyaSic01H0IXgHM3KPSYJ1x51avblJAg/132","nickname":"Geek_8a0a23","note":"","ucode":"605C1750C59918","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288646,"discussion_content":"double star就是两个星号的意思吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593831508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1754973,"avatar":"","nickname":"jtchgis","note":"","ucode":"BACBA9AB8F3162","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205092,"discussion_content":"请问下double star在这里是什么意思呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584264744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1675966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","nickname":"kaizen","note":"","ucode":"313EEA97AEC7C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1754973,"avatar":"","nickname":"jtchgis","note":"","ucode":"BACBA9AB8F3162","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217952,"discussion_content":"是个标题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585588018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":205092,"ip_address":""},"score":217952,"extra":""}]},{"author":{"id":1033438,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/de/dafe8151.jpg","nickname":"LuckyJiang","note":"","ucode":"7173904D1D3F7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102564,"discussion_content":"怎么得出的执行时间？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577354065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1811813,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a5/65/898bc6c5.jpg","nickname":"wayne","note":"","ucode":"988E1F2F0B419A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1033438,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/de/dafe8151.jpg","nickname":"LuckyJiang","note":"","ucode":"7173904D1D3F7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306229,"discussion_content":"使用jupyter比较方便只需加下面的代码：\n%%time （整个cell执行时间）\n%time （一段代码的执行时间）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600224567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":102564,"ip_address":""},"score":306229,"extra":""},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1811813,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a5/65/898bc6c5.jpg","nickname":"wayne","note":"","ucode":"988E1F2F0B419A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":326376,"discussion_content":"%timeit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605586042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306229,"ip_address":""},"score":326376,"extra":""}]}]},{"had_liked":false,"id":167586,"user_name":"Raymond","can_delete":false,"product_type":"c1","uid":1494571,"ip_address":"","ucode":"92DD1A92CA9F1B","user_header":"https://static001.geekbang.org/account/avatar/00/16/ce/2b/dee4b7c8.jpg","comment_is_top":false,"comment_ctime":1577868988,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"143311789756","product_id":100026901,"comment_content":"我来尝试解释一下新旧哈希表存储的区别：<br><br>旧哈希表存储示意图：<br>entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>旧的哈希表的寻址过程是这样的：通过key计算哈希值，然后再通过哈希值计算数组的索引，然后通过索引以O(1)时间的复杂度访问到entries里面存储的哈希值、key和value；<br>但是旧的哈希表存储结构有个问题，就是为了保证通过计算所得的索引能够正确的访问到地址，需要给entries分配连续的存储空间，这样一来，中间空闲的空间就太多了，造成了空间浪费。<br><br>新哈希表存储示意图：<br>indices = [None, 1, None, None, 0, None, 2]<br>entries = [<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>再来看新的哈希表存储结构，其寻址方式是这样的：通过key计算哈希值，然后再通过哈希值计算索引，但是这个索引不是entries的索引了，而是新建的indices数组的索引，需要先通过计算出的这个索引在indices中寻址来取到entries中对应内容的索引，然后通过新获取到的索引值再去entries中寻址获取最终需要的内容。<br><br>新的哈希存储结构多加了一个转换数组来存储entries数组的索引，这使得entries数组中的条目可以紧密排列，其思想就是将整条数据内容空闲的空间转换为单个索引空闲的空间，确实很划算，而且每次查询也只是多了一次在indices中的O(1)复杂度的寻址，查询性能影响不大。<br><br>不知理解的是否正确，请老师指正。","like_count":33,"discussions":[{"author":{"id":3184594,"avatar":"","nickname":"Geek_22c90e","note":"","ucode":"320BA5BDAB5FAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588969,"discussion_content":"看了三次才看懂，我弟脑袋瓜子嗡嗡的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664270276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2507550,"avatar":"https://static001.geekbang.org/account/avatar/00/26/43/1e/0639c07f.jpg","nickname":"胡珊","note":"","ucode":"481A27E0D5CC3D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358132,"discussion_content":"终于看明白老师在说啥了+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615937674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315574,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/f6/ede0ef44.jpg","nickname":"鱼苗","note":"","ucode":"3C5587B7C63F75","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306476,"discussion_content":"非常好，我终于看明白老师在说啥了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600295737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1860434,"avatar":"","nickname":"Geek_7cc111","note":"","ucode":"B215419F65DBF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239563,"discussion_content":"理解的非常到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587303520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95634,"user_name":"许山山","can_delete":false,"product_type":"c1","uid":1241643,"ip_address":"","ucode":"2A5168DEB58F19","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/2b/7d9751bb.jpg","comment_is_top":false,"comment_ctime":1558107076,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"134702093252","product_id":100026901,"comment_content":"&gt;&gt;&gt; dis.dis(lambda : dict())<br>  1           0 LOAD_GLOBAL              0 (dict)<br>              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)<br>              6 RETURN_VALUE<br><br>&gt;&gt;&gt; dis.dis(lambda : {})<br>  1           0 BUILD_MAP                0<br>              3 RETURN_VALUE<br><br>&gt;&gt;&gt; %timeit dict()<br>133 ns ± 2.95 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)<br><br>&gt;&gt;&gt; %timeit {}<br>74.6 ns ± 3.07 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)<br><br>{}, [], () 都比 dict(), list(), tuple() 初始化列表的性能要好，因为后者需要函数调用消耗了更多的时间。","like_count":32,"discussions":[{"author":{"id":2851448,"avatar":"","nickname":"Geek_44798f","note":"","ucode":"4EB2BD9FBDDE7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534061,"discussion_content":"都是大神，学习到了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638084752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293142,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/56/41cbcda2.jpg","nickname":"夜吾夜","note":"","ucode":"FC8729883EAD62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23483,"discussion_content":"怎么确保BUILD_MAP 不会比LOAD_GLOBAL+CALL_FUNCTION耗时呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569825086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95392,"user_name":"随风の","can_delete":false,"product_type":"c1","uid":1307306,"ip_address":"","ucode":"50C25386889CC9","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/aa/47f2e37d.jpg","comment_is_top":false,"comment_ctime":1558052280,"is_pvip":false,"replies":[{"id":"34129","content":"这只是一种表示。None表示indices这个array上对应的位置没有元素，index表示有元素，并且对应entries这个array index位置上的元素。你看那个具体的例子就能看懂了","user_name":"作者回复","comment_id":95392,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080461,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"113227201976","product_id":100026901,"comment_content":"文中提到的新的哈希表结构有点不太明白 None 1 None None 0 None 2 是什么意思？ index是索引的话 为什么中间会出现两个None","like_count":26,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450438,"discussion_content":"这只是一种表示。None表示indices这个array上对应的位置没有元素，index表示有元素，并且对应entries这个array index位置上的元素。你看那个具体的例子就能看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99120,"user_name":"星文友","can_delete":false,"product_type":"c1","uid":1068162,"ip_address":"","ucode":"EE438B9C1C7B61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK9RytLsauRVYGjupDIaibibAK5iaicEicONrMFc0O3icAGf5mD1buxoQ2ePPn9YurFhRbuf3AR1qJDy0GQ/132","comment_is_top":false,"comment_ctime":1559144803,"is_pvip":false,"replies":[{"id":"35621","content":"根据key计算hash值后直接就可以找到对应的value啊，所以是O(1)，他并不是列表需要遍历，他是哈希表<br><br>稀疏肯定浪费空间啊，里面没有值也是会有一定的存储损耗的<br><br>你自己去看看市面上Python教材里讲字典集合的，有几个能讲到像我这样深入。","user_name":"作者回复","comment_id":99120,"uid":"1259521","ip_address":"","utype":1,"ctime":1559172908,"user_name_real":"Jingxiao"}],"discussion_count":4,"race_medal":0,"score":"61688686947","product_id":100026901,"comment_content":"--+-------------------------------+<br>  | 哈希值 (hash)  键 (key)  值 (value)<br>--+-------------------------------+<br>0 |    hash0      key0    value0<br>--+-------------------------------+<br>1 |    hash1      key1    value1<br>--+-------------------------------+<br>2 |    hash2      key2    value2<br>--+-------------------------------+<br>. |           ...<br>__+_______________________________+<br><br><br>第一种数据结构，如何可以o(1)的查找一个key？<br>没有索引啊<br>这篇文章感觉写的不好，例子没有讲透<br>稀疏一定浪费吗，里面没有值的话能占用多少空间<br>我理解耗费空间的应该是k v的存储吧","like_count":14,"discussions":[{"author":{"id":1922298,"avatar":"","nickname":"patience","note":"","ucode":"46BEA083F550A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251000,"discussion_content":"说实话，这块我反复看了3遍，似懂非懂，原因还是储备知识太少","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588057064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451975,"discussion_content":"根据key计算hash值后直接就可以找到对应的value啊，所以是O(1)，他并不是列表需要遍历，他是哈希表\n\n稀疏肯定浪费空间啊，里面没有值也是会有一定的存储损耗的\n\n你自己去看看市面上Python教材里讲字典集合的，有几个能讲到像我这样深入。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559172908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1895499,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ec/4b/442dd5f1.jpg","nickname":"及時行樂","note":"","ucode":"2FD0E0BB8327DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246318,"discussion_content":"兄弟你这第一个问题就问的离谱，建议去深入理解C实现的哈希表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587736778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2030594,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/fc/02/b62f86ed.jpg","nickname":"禾苗村米麦丰","note":"","ucode":"5B1764F815E613","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311466,"discussion_content":"兄弟你家买了两套房子，你只住一套，难道你不去住的那一套房子就不浪费空间资源么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602344361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95417,"user_name":"Hoo-Ah","can_delete":false,"product_type":"c1","uid":1306913,"ip_address":"","ucode":"823093A6C7DEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/21/52e8267b.jpg","comment_is_top":false,"comment_ctime":1558054884,"is_pvip":false,"replies":[{"id":"34123","content":"你比较一下旧哈希表和新哈希表的存储结构就会发现，旧哈希表的空间利用率很低，一个位置要同时分配哈希值，键和值的空间，但是新哈希表把indices和entries分开后，空间利用率大大提高。<br><br>看文中的例子，这是旧哈希表存储示意图<br>entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>VS<br>新哈希表存储示意图：<br>indices = [None, 1, None, None, 0, None, 2]<br>entries = [<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br><br>你数一下两个版本中空着的元素的个数，就很清晰了。<br><br><br>","user_name":"作者回复","comment_id":95417,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080207,"user_name_real":"Jingxiao"}],"discussion_count":7,"race_medal":0,"score":"48802695140","product_id":100026901,"comment_content":"1. 直接使用大括号更高效，避免了使用类生成实例其他不必要的操作；<br>2. 列表不可以作为key，因为列表是可变类型，可变类型不可hash。<br>问题：为什么在旧哈希表中元素会越来越稀？","like_count":11,"discussions":[{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191822,"discussion_content":"你可以这样理解：假设现在有两个数，一个是1，一个是1000，按照老版本，你就需要申请1000个entries的内存，使用新版本，你只需申请1000个indices，而entries只需要两个。明显entries占用的内存比indices占用的内存多。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583038787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1675966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","nickname":"kaizen","note":"","ucode":"313EEA97AEC7C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217956,"discussion_content":"想问一下，这方面的知识是哪门课里的嘞。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585588336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191822,"ip_address":""},"score":217956,"extra":""},{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1675966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","nickname":"kaizen","note":"","ucode":"313EEA97AEC7C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":240132,"discussion_content":"数据结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587342820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217956,"ip_address":""},"score":240132,"extra":""},{"author":{"id":1258175,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/bf/dbe0755a.jpg","nickname":"Charlotter","note":"","ucode":"E7318EB03963A2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574299,"discussion_content":"感谢，秒懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653961422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191822,"ip_address":""},"score":574299,"extra":""}]},{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450450,"discussion_content":"你比较一下旧哈希表和新哈希表的存储结构就会发现，旧哈希表的空间利用率很低，一个位置要同时分配哈希值，键和值的空间，但是新哈希表把indices和entries分开后，空间利用率大大提高。\n\n看文中的例子，这是旧哈希表存储示意图\nentries = [\n[&amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;]\n[-230273521, &amp;#39;dob&amp;#39;, &amp;#39;1999-01-01&amp;#39;],\n[&amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;],\n[&amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;],\n[1231236123, &amp;#39;name&amp;#39;, &amp;#39;mike&amp;#39;],\n[&amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;, &amp;#39;--&amp;#39;],\n[9371539127, &amp;#39;gender&amp;#39;, &amp;#39;male&amp;#39;]\n]\nVS\n新哈希表存储示意图：\nindices = [None, 1, None, None, 0, None, 2]\nentries = [\n[1231236123, &amp;#39;name&amp;#39;, &amp;#39;mike&amp;#39;],\n[-230273521, &amp;#39;dob&amp;#39;, &amp;#39;1999-01-01&amp;#39;],\n[9371539127, &amp;#39;gender&amp;#39;, &amp;#39;male&amp;#39;]\n]\n\n你数一下两个版本中空着的元素的个数，就很清晰了。\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558080207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293142,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/56/41cbcda2.jpg","nickname":"夜吾夜","note":"","ucode":"FC8729883EAD62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23484,"discussion_content":"旧的哈希表里不存储索引值吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569825158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1293142,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/56/41cbcda2.jpg","nickname":"夜吾夜","note":"","ucode":"FC8729883EAD62","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240134,"discussion_content":"旧的索引是放到entries里的 新的把索引拆了出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587342898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":23484,"ip_address":""},"score":240134,"extra":""}]}]},{"had_liked":false,"id":151361,"user_name":"力维","can_delete":false,"product_type":"c1","uid":1527672,"ip_address":"","ucode":"BF4E04AEE52AC6","user_header":"https://static001.geekbang.org/account/avatar/00/17/4f/78/1fe13460.jpg","comment_is_top":false,"comment_ctime":1573706419,"is_pvip":false,"replies":[{"id":"58226","content":"语句“if x in list”虽然表面上是条件语句，但是内部是循环，因为判断一个元素在不在列表里，必须得遍历一遍，时间复杂度是O(n)","user_name":"作者回复","comment_id":151361,"uid":"1259521","ip_address":"","utype":1,"ctime":1573711209,"user_name_real":"Jingxiao"}],"discussion_count":3,"race_medal":0,"score":"35933444787","product_id":100026901,"comment_content":"内容挺好的，但好像有个小错误：关于查找价格的例子，列表查找并没有用到双重循环吧？A是循环，B只是判断语句，不构成循环。","like_count":9,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474454,"discussion_content":"语句“if x in list”虽然表面上是条件语句，但是内部是循环，因为判断一个元素在不在列表里，必须得遍历一遍，时间复杂度是O(n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573711209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674036,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/34/248c715b.jpg","nickname":"张炯鑫Johnson","note":"","ucode":"A8F7BCED55A66A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284701,"discussion_content":"‘if x in list’尽管是需要遍历一遍列表，但因为在最差的情况下，每次遍历的list其实其lenth是从0到n递增的。所以时间复杂度应该是O（（1+n）*n/2）才准确？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592602551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2317044,"avatar":"https://static001.geekbang.org/account/avatar/00/23/5a/f4/077903da.jpg","nickname":"Aaron","note":"","ucode":"232FB93BDC5C93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1674036,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/34/248c715b.jpg","nickname":"张炯鑫Johnson","note":"","ucode":"A8F7BCED55A66A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380714,"discussion_content":"时间复杂度屏蔽常数项所以结果还是O(n^2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624666257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284701,"ip_address":""},"score":380714,"extra":""}]}]},{"had_liked":false,"id":105473,"user_name":"Ben","can_delete":false,"product_type":"c1","uid":1252353,"ip_address":"","ucode":"70351D4FAE47F7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/01/5aaaf5b6.jpg","comment_is_top":false,"comment_ctime":1561010175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35920748543","product_id":100026901,"comment_content":"1, 第一种更快, 反编译后, 第二种需要调用函数<br>&gt;&gt;&gt; import dis<br>&gt;&gt;&gt; def f1(): return {&#39;1&#39;:1}<br>...<br>&gt;&gt;&gt; def f2(): return dict({&#39;1&#39;:1})<br>...<br>&gt;&gt;&gt; dis.dis(f1)<br>  1           0 LOAD_CONST               1 (&#39;1&#39;)<br>              2 LOAD_CONST               2 (1)<br>              4 BUILD_MAP                1<br>              6 RETURN_VALUE<br>&gt;&gt;&gt; dis.dis(f2)<br>  1           0 LOAD_GLOBAL              0 (dict)<br>              2 LOAD_CONST               1 (&#39;1&#39;)<br>              4 LOAD_CONST               2 (1)<br>              6 BUILD_MAP                1<br>              8 CALL_FUNCTION            1<br>             10 RETURN_VALUE<br>2. 不可以, 列表是可变的, 但是对hash表来说, 如果键值是可变的, 那么插入以及删除的位置都变成不确定的. 另外哈希冲突的概率也大大增加","like_count":8},{"had_liked":false,"id":95624,"user_name":"许山山","can_delete":false,"product_type":"c1","uid":1241643,"ip_address":"","ucode":"2A5168DEB58F19","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/2b/7d9751bb.jpg","comment_is_top":false,"comment_ctime":1558104256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35917842624","product_id":100026901,"comment_content":"老师我明白了，(hash, key, val) 都是存在 entries 里面的，通过 indices[index] 找到 entry 再做比较就好了。","like_count":8},{"had_liked":false,"id":95361,"user_name":"farFlight","can_delete":false,"product_type":"c1","uid":1245211,"ip_address":"","ucode":"B0872D3ECBEC38","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbRibsic15KXfGEN3SSjnLhXGyhK2Uyrj5ibBJsKAjicNqtafDaQOLH4xpSJRZD1vmibFPJER1ySmwP9A/132","comment_is_top":false,"comment_ctime":1558035935,"is_pvip":false,"replies":[{"id":"34131","content":"这个就是文中所说的线性寻找了，但是Python底层解决哈希冲突还有更好的方法，线性寻找是最简单的，但是不是最高效的","user_name":"作者回复","comment_id":95361,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080567,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"31622807007","product_id":100026901,"comment_content":"老师好，在王争老师的数据结构课程中提到哈希表常与链表一起使用，譬如用来解决哈希冲突。请问python底层对字典和集合的实现是否也是这样的呢？","like_count":7,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450424,"discussion_content":"这个就是文中所说的线性寻找了，但是Python底层解决哈希冲突还有更好的方法，线性寻找是最简单的，但是不是最高效的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95529,"user_name":"Jon徐","can_delete":false,"product_type":"c1","uid":1206774,"ip_address":"","ucode":"D203B6848C1D9C","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/f6/40c497a3.jpg","comment_is_top":false,"comment_ctime":1558076684,"is_pvip":false,"replies":[{"id":"34126","content":"回答的很好","user_name":"作者回复","comment_id":95529,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080387,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"27327880460","product_id":100026901,"comment_content":"list indices就是哈希表，None表示该位置目前尚未被占用，索引的值即是在list entries中存储dict键值和哈希值的下标。<br>作业中初始化dict，key不能使用可变类型吧，value可以使任意对象。","like_count":6,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450499,"discussion_content":"回答的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95584,"user_name":"刘朋","can_delete":false,"product_type":"c1","uid":1075141,"ip_address":"","ucode":"7B7B8E4776C22E","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/c5/63b09189.jpg","comment_is_top":false,"comment_ctime":1558091356,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18737960540","product_id":100026901,"comment_content":"插入操作,<br>mask = PyDicMinSize -1<br>index = hash(key) &amp; mask<br><br>能否有个例子,想详细了解一下细节","like_count":4,"discussions":[{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191825,"discussion_content":"过程应该是每次插入一个值先计算index ，然后在Indices列表找到对应的位置插入，插入的数就是当前Entries列表的空闲位置的索引（就是append数据的索引）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583038924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7403,"discussion_content":"其实等价于取模操作（前提是pydicminsize是2的整数次幂）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567504957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005131,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/4b/31369ca6.jpg","nickname":"西二旗啤酒王","note":"","ucode":"E064F32437812C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24231,"discussion_content":"PyDicMinSize是啥意思？mask的作用是什么？查半天没看明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570061953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95504,"user_name":"天凉好个秋","can_delete":false,"product_type":"c1","uid":1136145,"ip_address":"","ucode":"E11B5F990A4000","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/11/5d113d5c.jpg","comment_is_top":false,"comment_ctime":1558068019,"is_pvip":false,"replies":[{"id":"34118","content":"哈希表为了保证其操作的有效性（查找，添加，删除等等），都会overallocate（保留至少1&#47;3的剩余空间），但是很多空间其实都没有被利用，因此很稀疏","user_name":"作者回复","comment_id":95504,"uid":"1259521","ip_address":"","utype":1,"ctime":1558079604,"user_name_real":"Jingxiao"}],"discussion_count":2,"race_medal":0,"score":"18737937203","product_id":100026901,"comment_content":"不难想象，随着哈希表的扩张，它会变得越来越稀疏。<br>后面例子中解释的原因没看懂，能详细说说吗？","like_count":4,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450486,"discussion_content":"哈希表为了保证其操作的有效性（查找，添加，删除等等），都会overallocate（保留至少1/3的剩余空间），但是很多空间其实都没有被利用，因此很稀疏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558079604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1934625,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/85/21/5c5714c7.jpg","nickname":"DA.Lin","note":"","ucode":"415E6819942423","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340128,"discussion_content":"越来越稀疏指的是，浪费的空间（分配但没使用）越来越多。然后新的哈希存储结构浪费的空间比旧的哈希存储结构少，因为新的存储结构只存索引部分，所以存储同容量元素的时候，新结构占用的绝对空间比旧结构的好少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609910450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95448,"user_name":"鱼腐","can_delete":false,"product_type":"c1","uid":1514459,"ip_address":"","ucode":"A0081FDE92D7EE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/db/20b0eb92.jpg","comment_is_top":false,"comment_ctime":1558057540,"is_pvip":false,"replies":[{"id":"34122","content":"这只是一种表示。None表示indices这个array上对应的位置没有元素，index表示有元素，并且对应entries这个array index位置上的元素。你看那个具体的例子就能看懂了","user_name":"作者回复","comment_id":95448,"uid":"1259521","ip_address":"","utype":1,"ctime":1558079882,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"18737926724","product_id":100026901,"comment_content":"Indices:none | one | none | index | none | index  是什么意思？能补充讲解下吗","like_count":4,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450460,"discussion_content":"这只是一种表示。None表示indices这个array上对应的位置没有元素，index表示有元素，并且对应entries这个array index位置上的元素。你看那个具体的例子就能看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558079882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97492,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1558683948,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"14443585836","product_id":100026901,"comment_content":"老师请问，key、hash值、indice三者的联系是啥？  一直以为hash(key)就是内存地址","like_count":3},{"had_liked":false,"id":95809,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1558184663,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14443086551","product_id":100026901,"comment_content":"entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>为什么有些地方是一个[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]，有些地方是两个[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]呢？这里不好理解呀","like_count":3,"discussions":[{"author":{"id":1922298,"avatar":"","nickname":"patience","note":"","ucode":"46BEA083F550A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251013,"discussion_content":"老师说这只是一种表述，表示为字典过度分配了大约三分之一的空间，什么也没存，所以有稀疏一说。我是王婆卖瓜，细节我也费解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588057936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1934625,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/85/21/5c5714c7.jpg","nickname":"DA.Lin","note":"","ucode":"415E6819942423","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1922298,"avatar":"","nickname":"patience","note":"","ucode":"46BEA083F550A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340129,"discussion_content":"操作系统给字典对象分配内存空间的时候，是整块分配的。没使用到的空间原本里面也是有值的，但我们不需要知道，所以老师统一用&#39;--&#39;来表示","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609910681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251013,"ip_address":""},"score":340129,"extra":""}]}]},{"had_liked":false,"id":95600,"user_name":"小狼","can_delete":false,"product_type":"c1","uid":1012488,"ip_address":"","ucode":"A342DAD414CE10","user_header":"https://static001.geekbang.org/account/avatar/00/0f/73/08/dd9a4a38.jpg","comment_is_top":false,"comment_ctime":1558096383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14442998271","product_id":100026901,"comment_content":"s2 = Set([1, 2, 3])<br># Set 大写会报错：<br>NameError: name &#39;Set&#39; is not defined<br>改成小写问题解决","like_count":3},{"had_liked":false,"id":95447,"user_name":"鱼腐","can_delete":false,"product_type":"c1","uid":1514459,"ip_address":"","ucode":"A0081FDE92D7EE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/db/20b0eb92.jpg","comment_is_top":false,"comment_ctime":1558057377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14442959265","product_id":100026901,"comment_content":"哈希表结构不明白：","like_count":3},{"had_liked":false,"id":284263,"user_name":"Johnson","can_delete":false,"product_type":"c1","uid":1461858,"ip_address":"","ucode":"EDBA1A6FE45B18","user_header":"https://static001.geekbang.org/account/avatar/00/16/4e/62/1e2fcee5.jpg","comment_is_top":false,"comment_ctime":1616143897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10206078489","product_id":100026901,"comment_content":"<br>indices = [None, 1, None, None, 0, None, 2]<br>entries = [<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>我的问题主要还是怎么查找到entries实际的值，以及indices是如何与entries关联起来的？<br>经过下面同学提供的帖子https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;73426505<br>基本可以浓缩称这样的代码<br>entries[indices[hash(key) % mask]]","like_count":2},{"had_liked":false,"id":183436,"user_name":"Geek_04e22a","can_delete":false,"product_type":"c1","uid":1184505,"ip_address":"","ucode":"B64FF12EA28BA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","comment_is_top":false,"comment_ctime":1583039240,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10172973832","product_id":100026901,"comment_content":"1. 字典3.7版本优化什么保证字典的有序？<br><br>2.index = hash(key) &amp; mask ，如果mask二进制的位为0，那么这些位置可能会浪费，比如mask为5，二进制为0101，那么索引2，3就不会使用，从这个推测，mask二进制的每位都必须为1？<br>","like_count":2,"discussions":[{"author":{"id":1661411,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erD0FZP5UKVMGgkjounHpFEkAaLVicEQ9yGF3icELTp61yREDISQfwpBebyE2S5sHIcWyjjhKo1pWQQ/132","nickname":"mier","note":"","ucode":"2EDF4D982DD956","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287387,"discussion_content":"所以pydicminsize应该是2的整数次幂吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593432869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121973,"user_name":"静艺","can_delete":false,"product_type":"c1","uid":1605624,"ip_address":"","ucode":"24A98F5FA2A34B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4Uw7lDxq4ArDemWcxIZBAS7q0nDyvyDiboWxODeFF3CfGhjgVj1LFeVibokFKZPPj7yUoichnqGbcT5DBFFunc25g/132","comment_is_top":false,"comment_ctime":1565260763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155195355","product_id":100026901,"comment_content":"讲解得挺好，有深入讲，赞","like_count":2},{"had_liked":false,"id":102164,"user_name":"hallo128","can_delete":false,"product_type":"c1","uid":1212044,"ip_address":"","ucode":"3921D6E11CFCB1","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/8c/f029535a.jpg","comment_is_top":false,"comment_ctime":1560155295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150089887","product_id":100026901,"comment_content":"在新版本Python中，元组的创建还有一种方式，不需要小括号，直接逗号分开即可。<br>如：a ＝ 1, 2, 3<br>等价于a = （1, 2, 3）","like_count":2},{"had_liked":false,"id":95725,"user_name":"Danpier","can_delete":false,"product_type":"c1","uid":1463474,"ip_address":"","ucode":"11E208FDE34961","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/b2/5ea0b709.jpg","comment_is_top":false,"comment_ctime":1558149095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148083687","product_id":100026901,"comment_content":"老师，对于集合插值有个疑问：<br>s={1, 2.0}<br>s.add(1.0)<br>s<br># 输出<br>{1, 2.0}<br>上面这个示例，是不是因为1和1.0的哈希值相同，所以判定已存在元素，不插入。<br>关于商品有多少种不同价格的时间复杂度也有疑问：<br>第一个例子的时间复杂度是O(n^2)，但我的理解是，最差的情况是每种商品价格不同。A层循环遍历时间复杂度是O(n)，B层的时间复杂度由添加和遍历组成，添加的总时间复杂度是O(n)，遍历时间复杂度是递增的：O(0+1+……+n-1),B层总的时间复杂度是O((n^2+n)&#47;2)，那list的时间复杂度不就是A+B：O((n^2+3n)&#47;2)吗？怎么想都和两层for循环嵌套的时间复杂度不一样。<br>第二个例子的时间复杂度是O(n)，而我的理解是A层循环遍历时间复杂度是O(n)，B层的添加查找的总时间复杂度是O(n)，那set的时间复杂度不应该是A+B：O(2n)吗？<br>不知道哪里理解出了问题，望老师指点。","like_count":2},{"had_liked":false,"id":95654,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1558128363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148062955","product_id":100026901,"comment_content":"最后的例子很有代表性，举例很好","like_count":2},{"had_liked":false,"id":192341,"user_name":"Phoenix","can_delete":false,"product_type":"c1","uid":1923510,"ip_address":"","ucode":"305AADC0A79CA3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/59/b6/b69611a4.jpg","comment_is_top":false,"comment_ctime":1584847184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879814480","product_id":100026901,"comment_content":"在插入的例子中，如果出现哈希碰撞，是否可以考虑使用哈希链表，这样的话更省空间，查找的时间复杂度也是常数级","like_count":1},{"had_liked":false,"id":178104,"user_name":"张胜坡","can_delete":false,"product_type":"c1","uid":1811562,"ip_address":"","ucode":"735392BF103119","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/6a/7e7bf408.jpg","comment_is_top":false,"comment_ctime":1581586616,"is_pvip":false,"replies":[{"id":"69313","content":"获取key是location相对应的value，如果这个key不存在就返回默认值null。get方法的第二个参数表示当key不存在时返回都默认值","user_name":"作者回复","comment_id":178104,"uid":"1259521","ip_address":"","utype":1,"ctime":1581759665,"user_name_real":"Jingxiao"}],"discussion_count":2,"race_medal":0,"score":"5876553912","product_id":100026901,"comment_content":"d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20}<br>d.get(&#39;name&#39;)<br>&#39;jason&#39;<br>d.get(&#39;location&#39;, &#39;null&#39;)&#39;null&#39;<br><br>其中d.get(&#39;location&#39;, &#39;null&#39;)，这里的写法是什么意思","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483666,"discussion_content":"获取key是location相对应的value，如果这个key不存在就返回默认值null。get方法的第二个参数表示当key不存在时返回都默认值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581759665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/6a/7e7bf408.jpg","nickname":"张胜坡","note":"","ucode":"735392BF103119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171989,"discussion_content":"多谢指导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581764218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145882,"user_name":"黎明你好","can_delete":false,"product_type":"c1","uid":1123176,"ip_address":"","ucode":"1F5E14B87B370A","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/68/0daebf7f.jpg","comment_is_top":false,"comment_ctime":1572398222,"is_pvip":false,"replies":[{"id":"66797","content":"对","user_name":"作者回复","comment_id":145882,"uid":"1259521","ip_address":"","utype":1,"ctime":1579136144,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"5867365518","product_id":100026901,"comment_content":"这些都是线程安全的么 列表 元组 集合 字典","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472613,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579136144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100175,"user_name":"山石尹口","can_delete":false,"product_type":"c1","uid":1053346,"ip_address":"","ucode":"0BAAEE2FD579B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/a2/d18e6394.jpg","comment_is_top":false,"comment_ctime":1559467787,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5854435083","product_id":100026901,"comment_content":"list做key的问题有点疑惑，即使list是可变的，它在内存中的地址是不变的，对地址是可以hash的吧？不然所有引用类型都没法做key了。当然，用引用类型做key不一定是好的做法，可能会带来混淆。","like_count":1},{"had_liked":false,"id":97979,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1558858774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853826070","product_id":100026901,"comment_content":"1.文中说字典是无序的不对吧？Python3.6 后字典是有序的<br>2.还有示例代码用的是 format 方法，而 Python3.6 后的 f-string比原来的format方法易读多了","like_count":1},{"had_liked":false,"id":95744,"user_name":"taoist","can_delete":false,"product_type":"c1","uid":1195004,"ip_address":"","ucode":"D70AFE25CD8F10","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/fc/04a75cd0.jpg","comment_is_top":false,"comment_ctime":1558162793,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5853130089","product_id":100026901,"comment_content":"思考题:1<br>Option A: python3 -m timeit -n 1000000 &quot;d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}&quot;<br>1000000 loops, best of 5: 76.2 nsec per loop<br>Option B: python3 -m timeit -n 1000000 &quot;d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;})&quot; <br>1000000 loops, best of 5: 248 nsec per loop<br> 环境: Linux Python3.7.3  , Option A 比 Option B 快了３倍<br><br>思考题２:不可以，列表是动态变化的，字典的key要求不可变<br><br>Python3.6 引入字典有序性，Python3.7后字典有序性已经可以依赖了。https:&#47;&#47;stackoverflow.com&#47;questions&#47;39980323&#47;are-dictionaries-ordered-in-python-3-6","like_count":1},{"had_liked":false,"id":95623,"user_name":"许山山","can_delete":false,"product_type":"c1","uid":1241643,"ip_address":"","ucode":"2A5168DEB58F19","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/2b/7d9751bb.jpg","comment_is_top":false,"comment_ctime":1558104031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853071327","product_id":100026901,"comment_content":"每次向字典或集合插入一个元素时，Python 会首先计算键的哈希值（hash(key)），再和 mask = PyDicMinSize - 1 做与操作，计算这个元素应该插入哈希表的位置 index = hash(key) &amp; mask。如果哈希表中此位置是空的，那么这个元素就会被插入其中。<br><br>而如果此位置已被占用，Python 便会比较两个元素的哈希值和键是否相等。<br><br>老师这里比较两个元素是比较哪两个元素？我理解的应该是比较现在插入的这个 key 和原本已经在表中的 key 是否相同，请问这个 key 的比较是怎么做的呢？index 是哈希表（Indices）的索引，里面存储了指向 value的指针？ 根据实现字典里面 key 和 value 应该是有映射的，那 key 的信息是存在哪里呢？","like_count":1},{"had_liked":false,"id":95416,"user_name":"Redevil","can_delete":false,"product_type":"c1","uid":1527609,"ip_address":"","ucode":"21C90472DC6357","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PrKSgib1DcguTZYoOAqNw8tpLKylQU6dQPwI4NLJkd6344EWHaLF5yHe6PpAD6fsxSm0no7qiakiaEHUYw4nzTEyw/132","comment_is_top":false,"comment_ctime":1558054722,"is_pvip":false,"replies":[{"id":"34124","content":"抱歉，笔误，已更正","user_name":"作者回复","comment_id":95416,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080222,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"5853022018","product_id":100026901,"comment_content":"set version 的查找unique price的product的代码，不是O(1)，是O(n)吧。<br>至少要遍历N个元素啊。","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450449,"discussion_content":"抱歉，笔误，已更正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95415,"user_name":"凌青","can_delete":false,"product_type":"c1","uid":1239423,"ip_address":"","ucode":"51F0EE4A0B0C2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/7f/068bbdcf.jpg","comment_is_top":false,"comment_ctime":1558054708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853022004","product_id":100026901,"comment_content":"Java8还引入了红黑树来优化链表的性能，python会使用树来优化hash吗","like_count":1},{"had_liked":false,"id":95411,"user_name":"夜行","can_delete":false,"product_type":"c1","uid":1536143,"ip_address":"","ucode":"6EC8A7E044D70F","user_header":"https://static001.geekbang.org/account/avatar/00/17/70/8f/7a70d10f.jpg","comment_is_top":false,"comment_ctime":1558054207,"is_pvip":false,"replies":[{"id":"34125","content":"有啊，新版本Python只是对存储结构加以改进，增大空间利用率，但是工作原理还是没变","user_name":"作者回复","comment_id":95411,"uid":"1259521","ip_address":"","utype":1,"ctime":1558080301,"user_name_real":"Jingxiao"}],"discussion_count":1,"race_medal":0,"score":"5853021503","product_id":100026901,"comment_content":"旧的字典没有索引吗","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450447,"discussion_content":"有啊，新版本Python只是对存储结构加以改进，增大空间利用率，但是工作原理还是没变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95409,"user_name":"无法言喻.","can_delete":false,"product_type":"c1","uid":1322328,"ip_address":"","ucode":"7F375BE388D4FC","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/58/aa35c402.jpg","comment_is_top":false,"comment_ctime":1558053999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853021295","product_id":100026901,"comment_content":"列表不可hash 所以不行","like_count":1},{"had_liked":false,"id":95391,"user_name":"🎈大力.","can_delete":false,"product_type":"c1","uid":1408992,"ip_address":"","ucode":"762887D13A53D5","user_header":"https://static001.geekbang.org/account/avatar/00/15/7f/e0/4ba323bc.jpg","comment_is_top":false,"comment_ctime":1558052192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853019488","product_id":100026901,"comment_content":"1. OptionA 效率更高 ，因为调用dict函数等于运行时又增加了一层额外的操作，但达到的预期效果是一样的 <br>2.python中，字典的键是不可变的，但列表是可变数据类型，如果使用列表当键，后期操作很可能出现键重复的问题<br>","like_count":1},{"had_liked":false,"id":95387,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1558051604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853018900","product_id":100026901,"comment_content":"这里的源码，就是官网嘛？<br>思考题:<br>第一题 是和昨天的概念一样嘛？<br>第二题 列表是可变的，不同列表对应 hash value不一样，所以不可以。解决方案，用元组","like_count":1},{"had_liked":false,"id":95375,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1558049405,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5853016701","product_id":100026901,"comment_content":"第五天打卡。","like_count":1},{"had_liked":false,"id":95362,"user_name":"大龄小学生","can_delete":false,"product_type":"c1","uid":1057111,"ip_address":"","ucode":"AA7860B88FB0F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/57/ee02ef41.jpg","comment_is_top":false,"comment_ctime":1558036461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853003757","product_id":100026901,"comment_content":"老师，字典和集合的空间复杂度是什么情况？","like_count":1},{"had_liked":false,"id":95356,"user_name":"yshan","can_delete":false,"product_type":"c1","uid":1136788,"ip_address":"","ucode":"A2ECDCDA52B8EE","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/94/c8bc2b59.jpg","comment_is_top":false,"comment_ctime":1558027632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852994928","product_id":100026901,"comment_content":"Option A更高效，应该也是与函数内部调用有关<br>key不能为list，因为key不可变","like_count":1},{"had_liked":false,"id":360199,"user_name":"Geek_8add3a","can_delete":false,"product_type":"c1","uid":2823656,"ip_address":"山东","ucode":"8CD7A0BBE59FA2","user_header":"","comment_is_top":false,"comment_ctime":1666268732,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666268732","product_id":100026901,"comment_content":"这个字典排序那个key为什么传入d[1]会报错，直接传入跟这种方法有什么区别呢","like_count":0},{"had_liked":false,"id":355284,"user_name":"🐺 🐶","can_delete":false,"product_type":"c1","uid":2704444,"ip_address":"四川","ucode":"84712B0436EC6F","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/3c/8bb9e8b4.jpg","comment_is_top":false,"comment_ctime":1661246674,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661246674","product_id":100026901,"comment_content":"新版本的哈希表优化，有点像B+tree的结构，二级索引不存储数据，存储的是主键的值，根据二级索引返回的主键值，去查找主键索引树，快速查找数据，索引值单独存放，根据索引值查找hash值，返回数据，索引值单独存储，对于索引值为null的地方，可以不用浪费键、值的存储空间，Indices依然是稀疏的但是Entries是紧凑的","like_count":0},{"had_liked":false,"id":346692,"user_name":"就叫Hugo也行","can_delete":false,"product_type":"c1","uid":1118448,"ip_address":"","ucode":"73B41EDDA45D24","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/f0/12f043cb.jpg","comment_is_top":false,"comment_ctime":1653362872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653362872","product_id":100026901,"comment_content":"<br>indices = [None, 1, None, None, 0, None, 2]     # indices 可以看成一个数组<br>entries = [                                                    # entries 中的每行，可以看成一个链表<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":345352,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1652226374,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652226374","product_id":100026901,"comment_content":"字典和集合的数据结构是哈希表，哈希表设计的好不好，关键还是hash值经过mod或mask后是不是能比较均匀滴分布，遇到哈希冲突可以再在相邻位置查找空位，这就需要哈希表事前留出一定空间，比如30%。另一个关键点是key必须是可以hash的，由于列表是可以修改的因此不能hash，元组、常量、对象等都是可以hash的。","like_count":0},{"had_liked":false,"id":344137,"user_name":"CoderYe","can_delete":false,"product_type":"c1","uid":2432987,"ip_address":"","ucode":"61BADA76344270","user_header":"https://static001.geekbang.org/account/avatar/00/25/1f/db/b62b0c36.jpg","comment_is_top":false,"comment_ctime":1651292672,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651292672","product_id":100026901,"comment_content":"老师您好，我有一个小问题，这些偏低层实现方式的知识，如果您不讲，那该怎么自学呢？只能去扣Python底层源码嘛？","like_count":0},{"had_liked":false,"id":336434,"user_name":"曹晓双","can_delete":false,"product_type":"c1","uid":1824286,"ip_address":"","ucode":"52D5D25FE30ED6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ic1icOZiaragU2teagxYKmqGWh1ADsEB2VbzZGK5cuRzeBSZRia5Qicok8BmLL9CmWNluaTONnef7ZtJDJO2GENZUjg/132","comment_is_top":false,"comment_ctime":1646144711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646144711","product_id":100026901,"comment_content":"思考题1:方式一<br>思考题2:不可以，字典的键必须不可变","like_count":0},{"had_liked":false,"id":334975,"user_name":"Dayang","can_delete":false,"product_type":"c1","uid":2455650,"ip_address":"","ucode":"9F60AAAB245F5A","user_header":"https://static001.geekbang.org/account/avatar/00/25/78/62/51a06799.jpg","comment_is_top":false,"comment_ctime":1645234782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645234782","product_id":100026901,"comment_content":"老师  我测试集合<br>s = {1,2,3,4,5,6}<br>s.pop()<br>默认是从首个元素进行删除<br>s = [1,2,3,4,5,6]<br>s.pop()<br>是从末尾元素删除<br>是版本更新了吗","like_count":0},{"had_liked":false,"id":330021,"user_name":"李小文","can_delete":false,"product_type":"c1","uid":1453272,"ip_address":"","ucode":"DA2DDAFA17D005","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/d8/442c13dc.jpg","comment_is_top":false,"comment_ctime":1641735781,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641735781","product_id":100026901,"comment_content":"老师，有个疑问想请教一下：我发现，每次重新打开python后，对同一个key值运行hash()算出来的hash值不同，那么是怎么保证不同hash值对8取余后是同一个数的呢。期待您的回复，感谢","like_count":0},{"had_liked":false,"id":326949,"user_name":"qiu123456","can_delete":false,"product_type":"c1","uid":1333387,"ip_address":"","ucode":"71DC61AF12E8A5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SXhZVacJlNR0lBbPib7peJbVlhsX8iaiaw2AdkfO8RTn0V7zoBvm5dWy4uvBehqTuOzlRFTG1r46Wz9GIiaMAHMvfA/132","comment_is_top":false,"comment_ctime":1639794691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639794691","product_id":100026901,"comment_content":"思考1<br>第一种更加有效，第二种要调用函数<br>思考2由于字典是哈希表存储结构，因此不能使用可变的数据作为键","like_count":0},{"had_liked":false,"id":323670,"user_name":"Geek_44798f","can_delete":false,"product_type":"c1","uid":2851448,"ip_address":"","ucode":"4EB2BD9FBDDE7F","user_header":"","comment_is_top":false,"comment_ctime":1638082884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638082884","product_id":100026901,"comment_content":"第1题：<br>start_using_list=time.perf_counter()<br>d={&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;}<br>end_using_list=time.perf_counter()<br>print(&#39;init_dict_elapse time: {}&#39;.format(end_using_list-start_using_list))<br>init_dict_elapse time: 9.201899956678972e-05<br><br><br>start_using_list=time.perf_counter()<br>d=dict({&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;})<br>end_using_list=time.perf_counter()<br>print(&#39;init_dict_elapse time: {}&#39;.format(end_using_list-start_using_list))<br>init_dict_elapse time: 0.00020631500046874862<br><br>耗费时间上来看，第二种方式的效率更高些。<br><br>第二题：自己以为可以，实际上运行代码的时候，不可以。运行结果如下：<br>d={&#39;name&#39;:&#39;jason&#39;,[&#39;education&#39;]:[&#39;Dalian University&#39;,&#39;Shanghai University&#39;]}<br>print(d)<br>---------------------------------------------------------------------------<br>TypeError                                 Traceback (most recent call last)<br>&#47;var&#47;folders&#47;9x&#47;j93cnz313qzc9bj4fskcztcr0000gn&#47;T&#47;ipykernel_93017&#47;3166419841.py in &lt;module&gt;<br>----&gt; 1 d={&#39;name&#39;:&#39;jason&#39;,[&#39;education&#39;]:[&#39;Dalian University&#39;,&#39;Shanghai University&#39;]}<br>      2 print(d)<br><br>TypeError: unhashable type: &#39;list&#39;","like_count":0},{"had_liked":false,"id":302952,"user_name":"CaptainJackey","can_delete":false,"product_type":"c1","uid":2638113,"ip_address":"","ucode":"01313C613C4CF0","user_header":"https://static001.geekbang.org/account/avatar/00/28/41/21/bb7a5e62.jpg","comment_is_top":false,"comment_ctime":1626452782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626452782","product_id":100026901,"comment_content":"学习完后有个疑问，为什么哈希表查找比遍历快，在网上找到了内容，建议课程可以补充一下：<br><br>原文链接：https:&#47;&#47;blog.csdn.net&#47;qianlima210210&#47;article&#47;details&#47;47255875<br><br>","like_count":0},{"had_liked":false,"id":295531,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":2184057,"ip_address":"","ucode":"491906283FC13B","user_header":"https://static001.geekbang.org/account/avatar/00/21/53/79/327ef30e.jpg","comment_is_top":false,"comment_ctime":1622464603,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622464603","product_id":100026901,"comment_content":"1.第一种更快<br>2.列表是可变的，不能作为键","like_count":0},{"had_liked":false,"id":295462,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1622440031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622440031","product_id":100026901,"comment_content":"1. 第一个速度最快，直接调用c函数<br>2. 字典的key不可变原则","like_count":0},{"had_liked":false,"id":288756,"user_name":"羁绊","can_delete":false,"product_type":"c1","uid":1529393,"ip_address":"","ucode":"68CA15169C9DBF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er1RdQnOhMLv7dAwpBLAoUOM8icEnH8b1oSZ0cSYoryM6ng5cHcnsRRhYRny8NlrjuaQuOWy4e9Yqw/132","comment_is_top":false,"comment_ctime":1618655422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618655422","product_id":100026901,"comment_content":"集合是无序的，pop删除无法确定删除的元素，那么我重复print 集合的时候，集合中的元素顺序会边吗","like_count":0},{"had_liked":false,"id":282917,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1615463702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615463702","product_id":100026901,"comment_content":"这个讲的挺深了啊，刚接触py的人，一般都看不懂吧，有哈希，索引，lambda","like_count":0},{"had_liked":false,"id":281177,"user_name":"维生素胶囊","can_delete":false,"product_type":"c1","uid":2457544,"ip_address":"","ucode":"B14FC4919BF1C2","user_header":"https://static001.geekbang.org/account/avatar/00/25/7f/c8/a55740dc.jpg","comment_is_top":false,"comment_ctime":1614609526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614609526","product_id":100026901,"comment_content":"1.A 更高效<br>2.键不能是列表，值可以是列表","like_count":0},{"had_liked":false,"id":275657,"user_name":"Ван Ченгбин","can_delete":false,"product_type":"c1","uid":1524478,"ip_address":"","ucode":"0A8808A2C24A90","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/fe/b7623577.jpg","comment_is_top":false,"comment_ctime":1611635390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611635390","product_id":100026901,"comment_content":"集合的 pop() 操作是删除集合中最后一个元素，可是集合本身是无序的，你无法知道会删除哪个元素<br>集合本身是排查的吧，元素生成对应hash判重，删除删的是唯一元素","like_count":0},{"had_liked":false,"id":269548,"user_name":"非同凡想","can_delete":false,"product_type":"c1","uid":1934969,"ip_address":"","ucode":"713FD449A49D5A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/86/79/066a062a.jpg","comment_is_top":false,"comment_ctime":1608698625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608698625","product_id":100026901,"comment_content":"def make_dict_1():<br>    return {&quot;name&quot;: &quot;jason&quot;, &quot;age &quot;: 30, &quot;gender &quot;: &quot;male&quot;}<br>def make_dict_2():<br>    return dict( {&quot;name&quot;: &quot;jason&quot;, &quot;age &quot;: 30, &quot;gender &quot;: &quot;male&quot;})<br><br>dis.dis(make_dict_1)<br>dis.dis(make_dict_2)<br><br>#方法1 <br> 96           0 LOAD_CONST               1 (&#39;jason&#39;)<br>              2 LOAD_CONST               2 (30)<br>              4 LOAD_CONST               3 (&#39;male&#39;)<br>              6 LOAD_CONST               4 ((&#39;name&#39;, &#39;age &#39;, &#39;gender &#39;))<br>              8 BUILD_CONST_KEY_MAP      3<br>             10 RETURN_VALUE<br><br>#方法2<br> 98           0 LOAD_GLOBAL              0 (dict)<br>              2 LOAD_CONST               1 (&#39;jason&#39;)<br>              4 LOAD_CONST               2 (30)<br>              6 LOAD_CONST               3 (&#39;male&#39;)<br>              8 LOAD_CONST               4 ((&#39;name&#39;, &#39;age &#39;, &#39;gender &#39;))<br>             10 BUILD_CONST_KEY_MAP      3<br>             12 CALL_FUNCTION            1<br>             14 RETURN_VALUE<br><br>方法1优于方法2<br><br>字典d是可变的，hash(d)可变，不能用作key；<br>元组t是不可变的，hash(t)不会变，可用作key。","like_count":0},{"had_liked":false,"id":268894,"user_name":"Geek_92f88d","can_delete":false,"product_type":"c1","uid":2334151,"ip_address":"","ucode":"9C64035BF91DFD","user_header":"","comment_is_top":false,"comment_ctime":1608395825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608395825","product_id":100026901,"comment_content":"学习方法方面想请教一下老师和同学：因为我没有编程的基础，看这篇的时候觉得很吃力，好些概念不熟悉&#47;不明白或者没见过，也不太理解原理，比如哈希表和相关的性质，计算的效率等等。这种情况下是把问题放一放，先大概快速学完上手做项目以后再加深理解比较有效率，还是把这些不明白的地方就地都吃透再学下面的内容比较有效率？","like_count":0},{"had_liked":false,"id":251522,"user_name":"stefen","can_delete":false,"product_type":"c1","uid":1202047,"ip_address":"","ucode":"7C9AAE829E7802","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oib0a89lqtOhJL1UvfUp4uTsRLrDbhoGk9jLiciazxMu0COibJsFCZDypK1ZFcHEJc9d9qgbjvgR41ImL6FNPoVlWA/132","comment_is_top":false,"comment_ctime":1601641446,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1601641446","product_id":100026901,"comment_content":"既然hash表存在hash冲突  而对集合来说，区别就是哈希表内没有键和值的配对，只有单一的元素了，这个单一元素是元素的hash值么  如果是这样  这个怎么保证统计的数据的唯一性是正确的哦  比如 A和B的hash值一样  A先添加进去  B后面不是添加不进去嘛  这样B这个统计数据不是丢失了嘛","like_count":0},{"had_liked":false,"id":248743,"user_name":"鱼苗","can_delete":false,"product_type":"c1","uid":1315574,"ip_address":"","ucode":"3C5587B7C63F75","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/f6/ede0ef44.jpg","comment_is_top":false,"comment_ctime":1600296491,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1600296491","product_id":100026901,"comment_content":"Python3.7后字典是有序的 这个序能具体解释下么，是按key排字母顺序，还是按插入初始化的顺序固定和栈一样？","like_count":0},{"had_liked":false,"id":237691,"user_name":"Bee","can_delete":false,"product_type":"c1","uid":2086265,"ip_address":"","ucode":"3774D0CA746DA9","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d5/79/e1801426.jpg","comment_is_top":false,"comment_ctime":1595927002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595927002","product_id":100026901,"comment_content":"1、第一张比较快，第二个需要调用函数进行转换。2、不正确，字典的键只能是不可变数据结构","like_count":0},{"had_liked":false,"id":232249,"user_name":"MarkZoldyck","can_delete":false,"product_type":"c1","uid":2056178,"ip_address":"","ucode":"4CA2132C996512","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5f/f2/121afc48.jpg","comment_is_top":false,"comment_ctime":1593934988,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1593934988","product_id":100026901,"comment_content":"老师，您好，我这突然想到了一个问题：<br>在python3.7后，字典为有序的数据结构，这个有序该怎么理解：<br>在list中，因为是有序的，所以<br>&gt;&gt;&gt; a = [1,2,3]<br>&gt;&gt;&gt; c = [1,3,2]<br>&gt;&gt;&gt; a==c<br>False<br><br>但是对于字典，<br>&gt;&gt;&gt; b = {&#39;b&#39;: 1, &#39;c&#39;: 10, &#39;a&#39;: 2}<br>&gt;&gt;&gt; d = {&#39;b&#39;: 1, &#39;a&#39;: 2, &#39;c&#39;: 10}<br>&gt;&gt;&gt; b==d<br>True<br><br>这个是如何理解呀？","like_count":0,"discussions":[{"author":{"id":2064044,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/ac/4303e8ef.jpg","nickname":"Geek_b692f5","note":"","ucode":"C2826604F71C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298497,"discussion_content":"通过对比3.7的版本描述“Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use sorted(d) instead).”和3.6的描述“Performing list(d.keys()) on a dictionary returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just use sorted(d.keys()) instead).”，可以发现3.7的版本entry是按插入顺序存储的，3.6的版本没有特别说明。另外附上c代码实现，该文件中详细说明了变化的过程：https://github.com/python/cpython/blob/3.8/Objects/dictobject.c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597312175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064044,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/ac/4303e8ef.jpg","nickname":"Geek_b692f5","note":"","ucode":"C2826604F71C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298494,"discussion_content":"官方文档：https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597311481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230363,"user_name":"王坤祥","can_delete":false,"product_type":"c1","uid":1003327,"ip_address":"","ucode":"FB988B9F381A33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","comment_is_top":false,"comment_ctime":1593355191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593355191","product_id":100026901,"comment_content":"文中提到的旧哈希表和新哈希表是指Python2 diff Python3还是Python3.7 diff Python3.8？<br>我理解是第二个吧？","like_count":0},{"had_liked":false,"id":228778,"user_name":"温柔的贪婪","can_delete":false,"product_type":"c1","uid":1026724,"ip_address":"","ucode":"BA2BCFDC8FDE5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/a4/a1111483.jpg","comment_is_top":false,"comment_ctime":1592807008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592807008","product_id":100026901,"comment_content":"从 @燕儿衔泥 那里学到的使用 dis 查看字节码：<br><br>&gt;&gt;&gt; dis.dis(&quot;{&#39;a&#39;:1, &#39;b&#39;:2}&quot;)<br>  1           0 LOAD_CONST               0 (1)<br>              2 LOAD_CONST               1 (2)<br>              4 LOAD_CONST               2 ((&#39;a&#39;, &#39;b&#39;))<br>              6 BUILD_CONST_KEY_MAP      2<br>              8 RETURN_VALUE<br>&gt;&gt;&gt; dis.dis(&quot;dict({&#39;a&#39;:1, &#39;b&#39;:2})&quot;)<br>  1           0 LOAD_NAME                0 (dict)<br>              2 LOAD_CONST               0 (1)<br>              4 LOAD_CONST               1 (2)<br>              6 LOAD_CONST               2 ((&#39;a&#39;, &#39;b&#39;))<br>              8 BUILD_CONST_KEY_MAP      2<br>             10 CALL_FUNCTION            1<br>             12 RETURN_VALUE<br>","like_count":0},{"had_liked":false,"id":226779,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1592202410,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592202410","product_id":100026901,"comment_content":"题1，Option A 更高效，代码如下：<br># Option A<br>start_time_a = time.perf_counter()<br>d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}<br>end_time_a = time.perf_counter()<br>print(&#39;time elapse using Option A %s&#39; % (end_time_a - start_time_a))<br><br># Option B<br>start_time_b = time.perf_counter()<br>d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;})<br>end_time_b = time.perf_counter()<br>print(&#39;time elapse using Option B %s&#39; % (end_time_b - start_time_b))<br>输出：<br>time elapse using Option A 1.4999999999876223e-06<br>time elapse using Option B 1.8999999999991246e-06","like_count":0},{"had_liked":false,"id":226776,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1592202332,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592202332","product_id":100026901,"comment_content":"题1：Option A 更高效，使用代码time.perf_counter()计算出来的，估计是直接调用的C实现的，<br>Option B是一个方法，返回set的；<br>题2：字典初始化错误，报错如下：<br>Traceback (most recent call last):<br>  File &quot;D:&#47;workSpace&#47;PycharmProjects&#47;dict_set.py&quot;, line 101, in &lt;module&gt;<br>    d = {&#39;name&#39;: &#39;jason&#39;, [&#39;education&#39;]: [&#39;Tsinghua University&#39;, &#39;Stanford University&#39;]}<br>TypeError: unhashable type: &#39;list&#39;<br><br>原因分析：字典的键不能是可变类型，只能是可以被哈希化的类型如int 、float、string,tuple","like_count":0},{"had_liked":false,"id":225772,"user_name":"daowuli_chihai","can_delete":false,"product_type":"c1","uid":2017371,"ip_address":"","ucode":"13E5DD278D8E95","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIiaeebUYxl7e1b8DhQGz7v6uibGcytfL8iaTke1S6NwSVxicOy5iaLGbRn2aZtxZy8vVnF6j3fjtxDEbQ/132","comment_is_top":false,"comment_ctime":1591851624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591851624","product_id":100026901,"comment_content":"下面代码 <br>第16行find_unique_price_using_set ，我从批量下载的代码里面是 find_unique_price_list<br>是一回事吗？<br><br>import time<br>id = [x for x in range(0, 100000)]<br>price = [x for x in range(200000, 300000)]<br>products = list(zip(id, price))<br><br># 计算列表版本的时间<br>start_using_list = time.perf_counter()<br>find_unique_price_using_list(products)<br>end_using_list = time.perf_counter()<br>print(&quot;time elapse using list: {}&quot;.format(end_using_list - start_using_list))<br>## 输出<br>time elapse using list: 41.61519479751587<br><br># 计算集合版本的时间<br>start_using_set = time.perf_counter()<br>find_unique_price_using_set(products)<br>end_using_set = time.perf_counter()<br>print(&quot;time elapse using set: {}&quot;.format(end_using_set - start_using_set))<br># 输出<br>time elapse using set: 0.008238077163696289","like_count":0},{"had_liked":false,"id":225765,"user_name":"daowuli_chihai","can_delete":false,"product_type":"c1","uid":2017371,"ip_address":"","ucode":"13E5DD278D8E95","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIiaeebUYxl7e1b8DhQGz7v6uibGcytfL8iaTke1S6NwSVxicOy5iaLGbRn2aZtxZy8vVnF6j3fjtxDEbQ/132","comment_is_top":false,"comment_ctime":1591849235,"is_pvip":false,"replies":[{"id":"84939","content":"集合是无序的哈，没有你这种说法","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1593279602,"ip_address":"","comment_id":225765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591849235","product_id":100026901,"comment_content":"你好，集合的pop()我测试，好像每次都删除 集合第一个元素，下面<br>Microsoft Windows [版本 6.1.7601]<br>版权所有 (c) 2009 Microsoft Corporation。保留所有权利。<br><br>C:\\Users\\Administrator&gt;python<br>Python 3.8.0 (tags&#47;v3.8.0:fa919fd, Oct 14 2019, 19:21:23) [MSC v.1916 32 bit (I<br>tel)] on win32<br>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<br>&gt;&gt;&gt; set1 = {1,2,3,4,5}<br>&gt;&gt;&gt; set1.pop()<br>1<br>&gt;&gt;&gt; set1<br>{2, 3, 4, 5}<br>&gt;&gt;&gt; set1.pop()<br>2<br>&gt;&gt;&gt; set1<br>{3, 4, 5}<br>&gt;&gt;&gt;<br>","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497982,"discussion_content":"集合是无序的哈，没有你这种说法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593279602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219596,"user_name":"yc","can_delete":false,"product_type":"c1","uid":2010477,"ip_address":"","ucode":"54D242B7758C78","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epU0V5NLFTZxwO8Uia4NNCJBIgiamcpsNM6ruUOVR6EYN9SB6moKibicFFWw4Cyzfl8OkvOkM5LR1ibsMw/132","comment_is_top":false,"comment_ctime":1590048309,"is_pvip":false,"replies":[{"id":"81357","content":"后面有篇文章会讲到“is”和“==”的区别。“==”是比较两个变量的值，“is”才会比较两个变量是否是同一个对象","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1590256160,"ip_address":"","comment_id":219596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590048309","product_id":100026901,"comment_content":"d1 = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}<br>d2 = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;})<br>d1==d2   为什么是True<br>按照python一切是对象，这两个不应该是一个新的对象吗？因为以前是学JavaScript的，在js中是不想等的，麻烦老师解释一下","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495866,"discussion_content":"后面有篇文章会讲到“is”和“==”的区别。“==”是比较两个变量的值，“is”才会比较两个变量是否是同一个对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590256160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216863,"user_name":"鳥の詩","can_delete":false,"product_type":"c1","uid":1989916,"ip_address":"","ucode":"C8B3F8CF9229A3","user_header":"https://static001.geekbang.org/account/avatar/00/1e/5d/1c/ad1d6b85.jpg","comment_is_top":false,"comment_ctime":1589356554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589356554","product_id":100026901,"comment_content":"个人认为从未进入这个领域的小白看到这里都理解不来。似懂非懂，对于大神来说这可能是理所当然，就像我们理解1+1＝2却不知道怎么解释一样，对小白解释不好。","like_count":0},{"had_liked":false,"id":211984,"user_name":"patience","can_delete":false,"product_type":"c1","uid":1922298,"ip_address":"","ucode":"46BEA083F550A8","user_header":"","comment_is_top":false,"comment_ctime":1588042805,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588042805","product_id":100026901,"comment_content":"def find_product_price(products, product_id):<br>    for id, price in products:<br>        id == product_id<br>        return price<br>    return None<br><br><br>products = [<br>    (143121312, 100),<br>    (432314553, 30),<br>    (32421912367, 150)<br>]<br><br>print(&#39;The price of product 432314553 is {}&#39;.format(<br>    find_product_price(products, 432314553)))<br>不知道为什么，我的这个代码和老师的一样，但是输出结果是100？","like_count":0,"discussions":[{"author":{"id":1880890,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/HmyEmt0ic4PGibUo3m553H5kZ16J1TYLVmpntNYl7zCGPcCZ87vEjBicBx8bF9Iibq0PwdYNY0Zb3NKUQMNryUSsNg/132","nickname":"今生","note":"","ucode":"1F9D570037C712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282495,"discussion_content":"for 循环少了else:","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591993823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209108,"user_name":"dahai","can_delete":false,"product_type":"c1","uid":1762705,"ip_address":"","ucode":"9F866FC42DF9A8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVR2wY9icec2CGzZ4VKPdwK2icytM5k1tHm08qSEysFOgl1y7lk2ccDqSCvzibHufo2Cb9c2hjr0LIg/132","comment_is_top":false,"comment_ctime":1587509999,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1587509999","product_id":100026901,"comment_content":"老师，我有个问题不明白：<br>若两者中有一个不相等，这种情况我们通常称为哈希冲突（hash collision），意思是两个元素的键不相等，但是哈希值相等。这种情况下，Python 便会继续寻找表中空余的位置，直到找到位置为止。<br><br>遇到冲突后，如果放到下一个位置，这样的话会造成新的冲突。我记得java语言中它是在这个点上挂载一个列表。不知道python是不是这样","like_count":0},{"had_liked":false,"id":206396,"user_name":"杨红Paul","can_delete":false,"product_type":"c1","uid":1032003,"ip_address":"","ucode":"EA23530AD4EF08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/43/53a75a92.jpg","comment_is_top":false,"comment_ctime":1586853631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586853631","product_id":100026901,"comment_content":"小结：<br>1 字典：是由一系列键值对组成的集合。它是有序的，可以使用索引的相关操作。<br>2 集合：它里面不能有重复的元素。是无序的。<br>3 字典和集合的性能优于列表。<br>4 字典和集合的工作原理：哈希值（需要进一步了解）","like_count":0},{"had_liked":false,"id":203990,"user_name":"孟祥君","can_delete":false,"product_type":"c1","uid":1903135,"ip_address":"","ucode":"0EFD15E8BE21DC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/1f/228aaaeb.jpg","comment_is_top":false,"comment_ctime":1586315696,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586315696","product_id":100026901,"comment_content":"思考题1 ：第一种更高效吗？为什么测试结果为第2种时间更短呢？<br><br>import time<br># Option A<br>start_using_list = time.perf_counter()*100000<br>d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;, &#39;gender1&#39;: &#39;male1&#39;, &#39;gender2&#39;: &#39;male2&#39;, &#39;gender3&#39;: &#39;male3&#39;, &#39;gender4&#39;: &#39;male4&#39;, &#39;gender5&#39;: &#39;male5&#39;, &#39;gender6&#39;: &#39;male6&#39;}<br>end_using_list = time.perf_counter()*100000<br>print(&quot;time elapse using list: {}&quot;.format(end_using_list - start_using_list))<br><br>#输出<br>#time elapse using list: 8.860000133514404 <br><br># Option B<br>start_using_list = time.perf_counter()*100000<br>d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;, &#39;gender1&#39;: &#39;male1&#39;, &#39;gender2&#39;: &#39;male2&#39;, &#39;gender3&#39;: &#39;male3&#39;, &#39;gender4&#39;: &#39;male4&#39;, &#39;gender5&#39;: &#39;male5&#39;, &#39;gender6&#39;: &#39;male6&#39;})<br>end_using_list = time.perf_counter()*100000<br>print(&quot;time elapse using list: {}&quot;.format(end_using_list - start_using_list))<br><br>#输出<br>#time elapse using list: 8.290000081062317 <br>","like_count":0,"discussions":[{"author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269398,"discussion_content":"多来几下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589900055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199793,"user_name":"方扬波","can_delete":false,"product_type":"c1","uid":1855749,"ip_address":"","ucode":"94DEAD0C27350B","user_header":"","comment_is_top":false,"comment_ctime":1585496005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585496005","product_id":100026901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":195239,"user_name":"MR.Raindrop","can_delete":false,"product_type":"c1","uid":1098918,"ip_address":"","ucode":"7EC2A85DC19EC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/a6/35e357bb.jpg","comment_is_top":false,"comment_ctime":1585148654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585148654","product_id":100026901,"comment_content":"这节有太多疑惑了：<br>1. 哈希值计算寻找元素位置的地方（可能需要研究下源码）<br>2. dict update 的时候假如添加的元素很多会扩表多次还是一次？","like_count":0},{"had_liked":false,"id":195031,"user_name":"今生","can_delete":false,"product_type":"c1","uid":1880890,"ip_address":"","ucode":"1F9D570037C712","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/HmyEmt0ic4PGibUo3m553H5kZ16J1TYLVmpntNYl7zCGPcCZ87vEjBicBx8bF9Iibq0PwdYNY0Zb3NKUQMNryUSsNg/132","comment_is_top":false,"comment_ctime":1585129642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585129642","product_id":100026901,"comment_content":"<br>def find_product_price(products, product_id):<br>    for id, price in products:<br>        if id == product_id:<br>            return price<br>    return None <br>     <br>products = [<br>    (143121312, 100), <br>    (432314553, 30),<br>    (32421912367, 150) <br>]<br><br>print(&#39;The price of product 432314553 is {}&#39;.format(find_product_price(products, 432314553)))<br><br>上面的for循环，应该是少了“else:&quot;","like_count":0},{"had_liked":false,"id":194734,"user_name":"食神0878","can_delete":false,"product_type":"c1","uid":1914776,"ip_address":"","ucode":"9D87B026CBC8F1","user_header":"","comment_is_top":false,"comment_ctime":1585100601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585100601","product_id":100026901,"comment_content":"思考题1:<br>既然第一种方式初始化字典更高效，那么第二种方式存在的意义是什么？或者说什么情况下用第二种方式比第一种方式更好？<br>希望老师能够解惑","like_count":0},{"had_liked":false,"id":194283,"user_name":"Simon","can_delete":false,"product_type":"c1","uid":1914504,"ip_address":"","ucode":"A8A2E3E57BD029","user_header":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","comment_is_top":false,"comment_ctime":1585045676,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1585045676","product_id":100026901,"comment_content":"为什么字典的内部结构中既存储了键值，又存储了哈希值？本来，有了键值就可以算出哈希值。","like_count":0,"discussions":[{"author":{"id":1763348,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5qqTZvKZs8hHzkOpGIdAB5jjeNcVhQHM0Tv5lf3icppfQAFM4M6saMUIhNLkXxibpVOibN5qM9sXA3g/132","nickname":"Geek_80eaea","note":"","ucode":"27A9E4FD418295","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332263,"discussion_content":"会存在哈希冲突，所以相同哈希还要再判断key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607136034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193438,"user_name":"大包","can_delete":false,"product_type":"c1","uid":1091460,"ip_address":"","ucode":"07A12BDA5E08D9","user_header":"https://static001.geekbang.org/account/avatar/00/10/a7/84/b9b81d8d.jpg","comment_is_top":false,"comment_ctime":1584892753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584892753","product_id":100026901,"comment_content":"好，下周开始学这个了。讲的很好听。","like_count":0},{"had_liked":false,"id":180980,"user_name":"本来是亚","can_delete":false,"product_type":"c1","uid":1073592,"ip_address":"","ucode":"14527E5BC3C2A8","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/b8/7b23f8cb.jpg","comment_is_top":false,"comment_ctime":1582452204,"is_pvip":true,"replies":[{"id":"70364","content":"说的很正确","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1582611943,"ip_address":"","comment_id":180980,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1582452204","product_id":100026901,"comment_content":"思考题1：第一种方法更快，不需要调用函数，减少了开销。<br>思考题2：字典中的键是不可变对象，不能为列表，其原因不知道是否与hash值计算有关","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484877,"discussion_content":"说的很正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582611943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179420,"user_name":"ytl","can_delete":false,"product_type":"c1","uid":1080418,"ip_address":"","ucode":"AB0D1F77CD0B7D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwlfSZBK8I7dpGtLia70p3e4cXib5ZsbY1vIpXiaWtAowoawJQFNVibGurpKlDwIBXmqZZpHx7RtSwCEyjOepicjstA/132","comment_is_top":false,"comment_ctime":1582000428,"is_pvip":false,"replies":[{"id":"70365","content":"指的是insertion order。比如你向字典插入10个(key, value)的pair，插入完以后遍历字典，打印，顺序就是你插入时的顺序","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1582612241,"ip_address":"","comment_id":179420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582000428","product_id":100026901,"comment_content":"在 Python3.7+，字典被确定为有序，有序是什么意思呢？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484253,"discussion_content":"指的是insertion order。比如你向字典插入10个(key, value)的pair，插入完以后遍历字典，打印，顺序就是你插入时的顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582612241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174464,"user_name":"王大华","can_delete":false,"product_type":"c1","uid":1163590,"ip_address":"","ucode":"7AD5C4B8E93B0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c1/46/a81f7402.jpg","comment_is_top":false,"comment_ctime":1580220981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580220981","product_id":100026901,"comment_content":"1、Option B <br>2、字典可变，不能作为key","like_count":0},{"had_liked":false,"id":172581,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1579227381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579227381","product_id":100026901,"comment_content":"老师能讲一下字典rehash的过程吗？是类似于reids中的新老表逐渐迁移，还是暂时停止服务等待迁移结束？","like_count":0},{"had_liked":false,"id":172580,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1579227011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579227011","product_id":100026901,"comment_content":"Open addressing is preferred over chaining since the link overhead for chaining would be substantial (100% with typical malloc overhead).由于链表法需要动态的生成节点，为了效率采用了开发地址法，但是装载因子不能高于2&#47;3","like_count":0},{"had_liked":false,"id":168321,"user_name":"青鸟","can_delete":false,"product_type":"c1","uid":1547020,"ip_address":"","ucode":"9D989911056674","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/0c/bcd2b32b.jpg","comment_is_top":false,"comment_ctime":1578046639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578046639","product_id":100026901,"comment_content":"C:\\Users\\Administrator&gt;python -m timeit &quot;d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}&quot;<br>5000000 loops, best of 5: 90.3 nsec per loop<br><br>C:\\Users\\Administrator&gt;python -m timeit &quot;d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;})&quot;<br>1000000 loops, best of 5: 298 nsec per loop","like_count":0},{"had_liked":false,"id":166276,"user_name":"咚咚咚东","can_delete":false,"product_type":"c1","uid":1352917,"ip_address":"","ucode":"BAAF965577592B","user_header":"https://static001.geekbang.org/account/avatar/00/14/a4/d5/d1381d9b.jpg","comment_is_top":false,"comment_ctime":1577430560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577430560","product_id":100026901,"comment_content":"1.第一个问题,采用{}更搞笑,因为不需要调用函数等,采用dis分析也证明.<br>2.第二个问题,键是要被hash的,,列表是动态的,动态的数据类型不可以被hash.而值是可以使用列表的","like_count":0},{"had_liked":false,"id":164933,"user_name":"Geek__2ecb7d93cc04","can_delete":false,"product_type":"c1","uid":1453609,"ip_address":"","ucode":"77A3791D0F28FB","user_header":"","comment_is_top":false,"comment_ctime":1577113429,"is_pvip":false,"replies":[{"id":"62956","content":"说的很对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1577183467,"ip_address":"","comment_id":164933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577113429","product_id":100026901,"comment_content":"dict()方式分配是调用初始化函数方式来创建字典，其运行效率肯定没有显示调用[]来的高<br>键值的第一大特点就是不可变元素，所以列表肯定是不能用来当键值的","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478957,"discussion_content":"说的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577183467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164399,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1576979017,"is_pvip":false,"replies":[{"id":"62961","content":"O(1).<br>获取大小长度不会遍历其数据结构，字典，列表集合他们本身就存储了自身的元素数目","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1577183842,"ip_address":"","comment_id":164399,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576979017","product_id":100026901,"comment_content":"有个疑问，字典和集合的len方法，时间复杂度是O(n)还是O(1)?那list的len方法的时间复杂度呢","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478748,"discussion_content":"O(1).\n获取大小长度不会遍历其数据结构，字典，列表集合他们本身就存储了自身的元素数目","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577183842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159880,"user_name":"夜行趁天开","can_delete":false,"product_type":"c1","uid":1605567,"ip_address":"","ucode":"C4FE4617174415","user_header":"https://static001.geekbang.org/account/avatar/00/18/7f/bf/32e380e6.jpg","comment_is_top":false,"comment_ctime":1575816307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575816307","product_id":100026901,"comment_content":"思考题1：第一种方式更快，和一上章同理？<br>思考题2：list不能用作key,由于key要求不能重复，list可变，当list变化时，key有可能重复","like_count":0},{"had_liked":false,"id":152723,"user_name":"Bonaparte","can_delete":false,"product_type":"c1","uid":1021741,"ip_address":"","ucode":"27E9CEE38A30C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/2d/8e4836f3.jpg","comment_is_top":false,"comment_ctime":1574070119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574070119","product_id":100026901,"comment_content":"哈哈，尝试着去写，读取性能具体值是多少，还是不会...慢慢来？？？<br><br>第一题，dict({})还要去解析一遍函数，然后再去给B方案的变量d赋值，所以就变得很慢了。而A方案，本身就是一个字典盒子，只要在赋值并贴上标签，告诉，这是一个字典就行了呀。<br><br>第二题，第一个键值对&quot;&#39;name&#39;:&#39;Jason&#39;, &quot;没有问题呀，问题在第二个键(key),我们去索引的都是索引key(键)，因为键是不变的，所以我们能找到对应的键key。而list是一个动态可变化的数据结构，每个list的中的键key和值value可能是不一样的。所以键(key)就不能是list喽。<br><br>d_practice = {&#39;name&#39;: &#39;jason&#39;, (&#39;education&#39;): [&#39;Tsinghua University&#39;, &#39;Stanford University&#39;]}<br><br>print(d_practice)<br>#输出<br>{&#39;name&#39;: &#39;jason&#39;, &#39;education&#39;: [&#39;Tsinghua University&#39;, &#39;Stanford University&#39;]}","like_count":0},{"had_liked":false,"id":150547,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573552852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573552852","product_id":100026901,"comment_content":"字典和集合的key是用来计算下标的，在字典的整个生命周期中是不可改变的。","like_count":0},{"had_liked":false,"id":143313,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1571666845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571666845","product_id":100026901,"comment_content":"1第一种更高效 和之前一样<br>2字典的key要求不变性，列表list是动态可变的，元组tuple是不可变的，可以用元组。","like_count":0},{"had_liked":false,"id":134579,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1568871041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568871041","product_id":100026901,"comment_content":"思考题<br>1.第一种要更高效，因为不用调用函数，没有相关开销。<br>2.不能，因为键值必须唯一。<br>总结:字典和集合都是以哈希表为基础的数据结构，字典是键和值一一对应，在python3.7里是有序的，集合是只有值。它们的优点是插入，查找和删除的时间效率都是O(1)。主要用在需要频繁查找，插入删除的场合。<br>课程的练习代码: https:&#47;&#47;github.com&#47;zwdnet&#47;PythonPractice","like_count":0},{"had_liked":false,"id":133206,"user_name":"被炸的油条","can_delete":false,"product_type":"c1","uid":1345808,"ip_address":"","ucode":"10760C73AA9E78","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/10/c1615952.jpg","comment_is_top":false,"comment_ctime":1568443240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568443240","product_id":100026901,"comment_content":"思考题1:<br>第二个方式快，用小括号()括起来，是不是把字典最终变成成元组来存储，性能更高？<br>思考题2:<br>会报错，key是唯一键不能到列表，而value都支持列表，元组，或集合都可以。","like_count":0},{"had_liked":false,"id":133013,"user_name":"夜雨声烦","can_delete":false,"product_type":"c1","uid":1349749,"ip_address":"","ucode":"87D8DB1E32522A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6mh3xlaMoGtWjmVJh2LutdLcQcPbKNjRlVru3bx8ynPhgwuGhhdzTkwEMoXbvBtgkcDSfom1kZg/132","comment_is_top":false,"comment_ctime":1568306884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568306884","product_id":100026901,"comment_content":"问题1，应该是OptionA 更高效，使用内部函数要比使用函数要快；<br>问题2，字典的key不可以是list，已经在python2的环境下尝试过了<br>","like_count":0},{"had_liked":false,"id":131382,"user_name":"Zhixau","can_delete":false,"product_type":"c1","uid":1019789,"ip_address":"","ucode":"4A888836C9B082","user_header":"","comment_is_top":false,"comment_ctime":1567734506,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567734506","product_id":100026901,"comment_content":"1. option A<br>2.列表和字典这样的可变类型，由于它们不是可哈希的，所以不能作为键。","like_count":0},{"had_liked":false,"id":130281,"user_name":"王俊","can_delete":false,"product_type":"c1","uid":1640276,"ip_address":"","ucode":"7EDE3F56E10248","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrIyCrRXMPXUQTR5IHNOh6niaY3MRr2mtv6W6WXcT1FHK1aic3NOhfzdaqfx3u8mmFAmibgX8xDdB2g/132","comment_is_top":false,"comment_ctime":1567417237,"is_pvip":false,"replies":[{"id":"48650","content":"不会的，key一样，哈希值就一样","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567447658,"ip_address":"","comment_id":130281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567417237","product_id":100026901,"comment_content":"会不会存在key值一样但是哈希值不一样啊","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465889,"discussion_content":"不会的，key一样，哈希值就一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567447658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130229,"user_name":"Geek_siskin","can_delete":false,"product_type":"c1","uid":1138986,"ip_address":"","ucode":"333EA30F8FB6DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/2a/71aeffe6.jpg","comment_is_top":false,"comment_ctime":1567408910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567408910","product_id":100026901,"comment_content":"myset. add(myClass) <br>我把类加到set中，是不是就没法查找和使用了呢？谢谢！","like_count":0},{"had_liked":false,"id":127958,"user_name":"月成FUN","can_delete":false,"product_type":"c1","uid":1616728,"ip_address":"","ucode":"75EE9B951D73CF","user_header":"https://static001.geekbang.org/account/avatar/00/18/ab/58/ae036dfc.jpg","comment_is_top":false,"comment_ctime":1566814260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566814260","product_id":100026901,"comment_content":"字典的工作原理不太明白，hash值不就是键哈希之后的地址吗？为什么还要存储起来？还有，为什么要记录索引呢？","like_count":0},{"had_liked":false,"id":124744,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1565958619,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1565958619","product_id":100026901,"comment_content":"1. 在实际工作中选中合适的数据结构非常重要，在获取不同价格数量的示例中，我在本地运行的结果和文中类似，列表和集合相差3个数量级。<br>time elapse using list: 42.01617110899997<br>time elapse using set: 0.009528717999728542<br><br>2. 初始化字典时，{}要比dict({})快4倍左右。<br>%%timeit<br>d = {&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20}<br>66.7 ns ± 1.63 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)<br><br>%%timeit<br>d = dict({&#39;name&#39;: &#39;jason&#39;, &#39;age&#39;: 20})<br>225 ns ± 14.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)<br><br>3. 字典中不能用列表作为键，因为列表是可变的，Python会报下面的错误。<br>TypeError: unhashable type: &#39;list&#39;","like_count":0},{"had_liked":false,"id":121377,"user_name":"米雄雄","can_delete":false,"product_type":"c1","uid":1197009,"ip_address":"","ucode":"FBDF8D3D4BF8FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/d1/3dd582a8.jpg","comment_is_top":false,"comment_ctime":1565113667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565113667","product_id":100026901,"comment_content":"对于集合的函数略做修改，先获取到prace迭代器，然后通过set将其变为集合，在统计集合的数量<br>def find_unique_price_using_set1(products):<br>    lenNum=len(set([prace for id,prace in products ]))<br>    # unique_price_set = set()<br>    # for _, price in products:<br>    #     unique_price_set.add(price)<br>    return lenNum<br><br>time elapse using list: 177.60753732449453  #列表<br>time elapse using set: 0.04781629876617899 ##集合<br>time elapse using set: 0.029644960514502827 ##上述描述的函数   只是做个比对，不是很清楚其中的原因。老师看到的话，希望帮忙解释下内在原因","like_count":0},{"had_liked":false,"id":114508,"user_name":"My.life","can_delete":false,"product_type":"c1","uid":1587746,"ip_address":"","ucode":"8A6849BED73FC9","user_header":"https://static001.geekbang.org/account/avatar/00/18/3a/22/1f554137.jpg","comment_is_top":false,"comment_ctime":1563327123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563327123","product_id":100026901,"comment_content":"想问一下，有没有一个方法可以分段数据，比如我有一段数据是11，13，10，36，40，41，44，80，80，81，79。<br>怎么样让它识别出连续相差小于5的为一段数据分段，上面的分段后应该是11，13，10为一段36，40，41，44为一段，80，80，81，79为一段","like_count":0},{"had_liked":false,"id":111436,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1562557160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562557160","product_id":100026901,"comment_content":"哈希原理和字典有序，以及集合的无序还不明白，集合pop函数弹出最后一个元素，既然是无序的，最后一个是地址序号最大的吗","like_count":0},{"had_liked":false,"id":110955,"user_name":"万恶的黑骑士","can_delete":false,"product_type":"c1","uid":1547965,"ip_address":"","ucode":"1342CAF9318D50","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/bd/b45180bd.jpg","comment_is_top":false,"comment_ctime":1562402054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562402054","product_id":100026901,"comment_content":"老师，一楼说的动态数据结构不能作为字典的健，我想请问一下是否动态变量是不是动态数据结构，能不能作为健","like_count":0},{"had_liked":false,"id":109318,"user_name":"橘子你个奥睿智","can_delete":false,"product_type":"c1","uid":1526570,"ip_address":"","ucode":"CD9F550566912E","user_header":"https://static001.geekbang.org/account/avatar/00/17/4b/2a/c59e78a4.jpg","comment_is_top":false,"comment_ctime":1561998782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561998782","product_id":100026901,"comment_content":"老师，字典里面的有一个键的值是还是字典，怎么取出来呀","like_count":0},{"had_liked":false,"id":106804,"user_name":"magician","can_delete":false,"product_type":"c1","uid":1483968,"ip_address":"","ucode":"1BD1125C7C907A","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/c0/c6880c07.jpg","comment_is_top":false,"comment_ctime":1561387956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561387956","product_id":100026901,"comment_content":"1.Option B<br>2.list(d.keys())<br>dict 的key必须是不可变的","like_count":0},{"had_liked":false,"id":104923,"user_name":"Luove","can_delete":false,"product_type":"c1","uid":1545251,"ip_address":"","ucode":"73CD4D2C731B47","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7adYZoHGic7ZS6cp9OmBjh1C4ajCCpciblR3ib3jDtiaKrFdbT9J7sl2B9eNoCQicfx5QWgVVZQB74pfQ/132","comment_is_top":false,"comment_ctime":1560871470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560871470","product_id":100026901,"comment_content":"q1: first is more efficient.<br>q2:NOT right, list should not be used as key.","like_count":0},{"had_liked":false,"id":103325,"user_name":"converse✪","can_delete":false,"product_type":"c1","uid":1433812,"ip_address":"","ucode":"0CC4C24A6458B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d4/bdd3ed27.jpg","comment_is_top":false,"comment_ctime":1560414896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560414896","product_id":100026901,"comment_content":"没想明白的是为什么会越来越稀疏呢？哈希值算出来会和mask做与操作，结果就是entries的下标啊，所以每个下标都是有意义的，为什么会稀疏？我理解的稀疏是entries中存在大量空值，或者无意义的值，那这样算出来的下标为什么会无意义？此外，为什么会出现这样的情况<br>entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>因为稀疏才导致的浪费存储空间，才需要修改存储结构。那么因为什么导致的稀疏或者造成稀疏的过程需要解释一下。也就是出现[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]的原因","like_count":0},{"had_liked":false,"id":103069,"user_name":"kubxy","can_delete":false,"product_type":"c1","uid":1514411,"ip_address":"","ucode":"EDA317D303CC42","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/ab/a5f88914.jpg","comment_is_top":false,"comment_ctime":1560378054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560378054","product_id":100026901,"comment_content":"entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>老师，<br>1. 旧哈希表的存储结构是没有规律的吗？三个kv对，有四个[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]空列表；<br>2. entries中的第一个元素[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;][-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;]为什么是这样的？<br>3. [&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]这个空列表存在的意义是什么？<br>","like_count":0},{"had_liked":false,"id":101616,"user_name":"slinv","can_delete":false,"product_type":"c1","uid":1263629,"ip_address":"","ucode":"119608DB2FFCB1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8tsib9FYEejY703Lhw5yMBNrUia7S6lMnMtWdSS5Mctu02dJ9KU5QLZwXLjJhK5quWERqBLlxQUiau2YlFEYricJsg/132","comment_is_top":false,"comment_ctime":1559888219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559888219","product_id":100026901,"comment_content":"思考题1：<br>如果没记错的话这两种应该是一样的，对于字典来说。具体原因忘了。<br><br>思考题2：<br>list不能是做key，因为list是mutable的所以是unhashable的，换成tuple是可以的","like_count":0},{"had_liked":false,"id":101517,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1559835612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559835612","product_id":100026901,"comment_content":"entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>这边改成如下所示会不会更好，因为这中间不一定是两个吧<br>entries = [<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;]<br>…<br>[-230273521, &#39;dob&#39;, &#39;1999-01-01&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>…<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>[1231236123, &#39;name&#39;, &#39;mike&#39;],<br>[&#39;--&#39;, &#39;--&#39;, &#39;--&#39;],<br>…<br>[9371539127, &#39;gender&#39;, &#39;male&#39;]<br>]<br>","like_count":0},{"had_liked":false,"id":101237,"user_name":"凌岩","can_delete":false,"product_type":"c1","uid":1308992,"ip_address":"","ucode":"324ABD31A4F5A1","user_header":"https://static001.geekbang.org/account/avatar/00/13/f9/40/122d9b65.jpg","comment_is_top":false,"comment_ctime":1559746750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559746750","product_id":100026901,"comment_content":"第一题<br>第一个快，因为第一个是直接定义；而第二个先定义了list，然后强制转化为set或者dict，所以效率低。<br>第二题<br>因为key是不可变的，而list是可变的，所以不能作为key<br>","like_count":0},{"had_liked":false,"id":100209,"user_name":"皮卡·D·丘","can_delete":false,"product_type":"c1","uid":1482433,"ip_address":"","ucode":"BE6F956B2246D2","user_header":"https://static001.geekbang.org/account/avatar/00/16/9e/c1/f35c38e5.jpg","comment_is_top":false,"comment_ctime":1559481220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559481220","product_id":100026901,"comment_content":"老师您好，通过哈希值直接就可以得到在哈希表中的位置，那为啥还要indice呢","like_count":0},{"had_liked":false,"id":99748,"user_name":"Mr. Lee","can_delete":false,"product_type":"c1","uid":1236571,"ip_address":"","ucode":"2F7168196429F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/5b/1a2e9bcc.jpg","comment_is_top":false,"comment_ctime":1559291025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559291025","product_id":100026901,"comment_content":"老师，问您一个问题 win10下python3.7中，运行下面的代码列表会比字典快，运行结果如下：<br>运行结果：<br>time elapse using dict: 0.48533477199999986<br>time elapse using list: 0.36503481699999973<br>而把find_product_price_dict函数改成如下格式，结果就是字典比列表快了。<br>def find_product_price_dict(products, product_id):<br>    for id in products.keys():<br>        if id == product_id:<br>            return products_dict[id]<br>    return None<br>改后的运行结果：<br>time elapse using dict: 0.29322500900000037<br>time elapse using list: 0.36533051299999997<br>原始代码如下：<br>import time<br>import numpy<br>def find_product_price_list(products, product_id):<br>    for id, price in products:<br>        if id == product_id:<br>            return price<br>    return None<br><br>def find_product_price_dict(products, product_id):<br>    for id, price in products.items():<br>        if id == product_id:<br>            # return products_dict[id]<br>            return price<br>    return None<br>r = numpy.random.randint(0,1000000000,10000000)       # 生成10000000个随机数<br>id = [str(x) for x in r]<br>price = [x for x in range(20000000, 30000000)]<br><br>products_list = list(zip(id, price))<br>products_dict = dict(zip(id, price))<br># 添加新元素<br>products_list.append((&#39;1111111&#39;, 300))<br>products_dict[&#39;1111111&#39;] = 300<br><br>start_using_list = time.perf_counter()<br>find_product_price_dict(products_dict, &#39;1111111&#39;)<br>end_using_list = time.perf_counter()<br>print(&#39;time elapse using dict: {}&#39;.format(end_using_list - start_using_list))<br><br>start_using_list = time.perf_counter()<br>find_product_price_list(products_list, &#39;1111111&#39;)<br>end_using_list = time.perf_counter()<br>print(&#39;time elapse using list: {}&#39;.format(end_using_list - start_using_list))<br><br>","like_count":0},{"had_liked":false,"id":99063,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1466809,"ip_address":"","ucode":"75FBDF49C601F4","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/b9/dbf629c0.jpg","comment_is_top":false,"comment_ctime":1559137508,"is_pvip":false,"replies":[{"id":"35623","content":"嗯嗯","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1559173060,"ip_address":"","comment_id":99063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559137508","product_id":100026901,"comment_content":"第一题：因为dict又多调用了一次系统函数所以慢一些<br>第二题：会报错，列表是不可哈希的，因为列表可变所以不能被hash。元组、字符串是可以被哈希的","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451957,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559173060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98428,"user_name":"Rexxar","can_delete":false,"product_type":"c1","uid":1543460,"ip_address":"","ucode":"86D0238F0F0C55","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/24/a2f886d3.jpg","comment_is_top":false,"comment_ctime":1559004004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559004004","product_id":100026901,"comment_content":"list对象不可哈希所以不能作为字典的key，那问题来了，能否重写列表类中的__hash__强行让列表作为字典的key？该怎样重写？","like_count":0},{"had_liked":false,"id":97973,"user_name":"welaing","can_delete":false,"product_type":"c1","uid":1031483,"ip_address":"","ucode":"9866815FD74CCA","user_header":"","comment_is_top":false,"comment_ctime":1558857280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558857280","product_id":100026901,"comment_content":"针对楼上说的第一个例子两层循环的时间复杂度问题，我认为是因为列表的位置和","like_count":0},{"had_liked":false,"id":97889,"user_name":"Steven","can_delete":false,"product_type":"c1","uid":1495454,"ip_address":"","ucode":"BC5B33911FEC46","user_header":"https://static001.geekbang.org/account/avatar/00/16/d1/9e/fe7bc8df.jpg","comment_is_top":false,"comment_ctime":1558834189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558834189","product_id":100026901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":97682,"user_name":"蒋波","can_delete":false,"product_type":"c1","uid":1526325,"ip_address":"","ucode":"611A1F0629F08E","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/35/16861bf8.jpg","comment_is_top":false,"comment_ctime":1558749225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558749225","product_id":100026901,"comment_content":"dis分析字节码可以讲解一下吗？dis是一个函数还是一种方法吗？是python里的一种函数还是编程里的一种通用方法？分析字节码的角度怎么可以看得出初始化哪个高效呢？谢谢景总讲解☺","like_count":0},{"had_liked":false,"id":97566,"user_name":"小豹子","can_delete":false,"product_type":"c1","uid":1346267,"ip_address":"","ucode":"972F3E6BF0FDEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/db/76ab84c6.jpg","comment_is_top":false,"comment_ctime":1558696697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558696697","product_id":100026901,"comment_content":"老师，我有个问题，就是indices这个列表存的是索引，里面具体存的是hash值吗？还有就是这个索引有序吗，如果无序的，那么查找一个集合或字典的键值的话，复杂度得是O(n)了。","like_count":0},{"had_liked":false,"id":97538,"user_name":"PAN","can_delete":false,"product_type":"c1","uid":1545976,"ip_address":"","ucode":"EE467C7070FD73","user_header":"https://static001.geekbang.org/account/avatar/00/17/96/f8/496ffcec.jpg","comment_is_top":false,"comment_ctime":1558689664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558689664","product_id":100026901,"comment_content":"老师，建议照顾一下基础薄弱的同学，文中代码简化的地方提示一下，不然运行报错要查好久，谢谢","like_count":0},{"had_liked":false,"id":97457,"user_name":"Geek_d848f7","can_delete":false,"product_type":"c1","uid":1524021,"ip_address":"","ucode":"F24BC59B6E9E6B","user_header":"","comment_is_top":false,"comment_ctime":1558674908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558674908","product_id":100026901,"comment_content":"存储结构不是很理解","like_count":0},{"had_liked":false,"id":97416,"user_name":"小豹子","can_delete":false,"product_type":"c1","uid":1346267,"ip_address":"","ucode":"972F3E6BF0FDEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/db/76ab84c6.jpg","comment_is_top":false,"comment_ctime":1558666661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558666661","product_id":100026901,"comment_content":"我定义了两个集合，发觉在打印集合的时候，集合既然是排好序的，这让我很吃惊，马上去查官方手册，手册上面根本没提集合是排好序的。由于我这些操作都是在jupyter上操作的，马上换cmd命令行下面去执行下，集合重新变成非排序的，这才是正解。有时候有些工具偷偷的帮我们干了些事，这会严重影响我们的判断啊。<br>s1 = {2,4,5,8,2,5,3,65,23,263,80,1}<br>s1<br>{1, 2, 3, 4, 5, 8, 23, 65, 80, 263}<br><br>s2 = {&#39;a&#39;,&#39;ca&#39;,&#39;bs&#39;,1,4,&#39;ca&#39;,&#39;bbb&#39;}<br>s2<br>{1, 4, &#39;a&#39;, &#39;bbb&#39;, &#39;bs&#39;, &#39;ca&#39;}","like_count":0},{"had_liked":false,"id":96563,"user_name":"郭杰","can_delete":false,"product_type":"c1","uid":1139077,"ip_address":"","ucode":"8A14FC047A679B","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/85/6accd013.jpg","comment_is_top":false,"comment_ctime":1558449881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558449881","product_id":100026901,"comment_content":"感觉每个解释器好像运行的时间都不一样","like_count":0},{"had_liked":false,"id":96438,"user_name":"她の他","can_delete":false,"product_type":"c1","uid":1312694,"ip_address":"","ucode":"A61CEC365D782F","user_header":"https://static001.geekbang.org/account/avatar/00/14/07/b6/e213fc11.jpg","comment_is_top":false,"comment_ctime":1558423324,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558423324","product_id":100026901,"comment_content":"字典的初始化是错误的，字典的key必须是一个不可变类型，list是可变类型，如果key是tuple是可以的","like_count":0},{"had_liked":false,"id":96235,"user_name":"rogerr","can_delete":false,"product_type":"c1","uid":1538280,"ip_address":"","ucode":"735EE845D4560F","user_header":"https://static001.geekbang.org/account/avatar/00/17/78/e8/b79240e8.jpg","comment_is_top":false,"comment_ctime":1558361511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558361511","product_id":100026901,"comment_content":"最近需要提取压缩日志里的字符串，这些压缩后的日志都是好几个G的容量，用gzip.open一个一个打开查找巨慢无比，这种场景有木有更好的方式可以快速实现查找呢？","like_count":0},{"had_liked":false,"id":96192,"user_name":"木卫六","can_delete":false,"product_type":"c1","uid":1199495,"ip_address":"","ucode":"D113DF578C5BF5","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/87/57236a2d.jpg","comment_is_top":false,"comment_ctime":1558354971,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558354971","product_id":100026901,"comment_content":"有两个问题需要老师解答一下：<br>1. 字典或集合如果是线性查找解决hash冲突的话，比如有两个hash相同的key a和b插入，第一次a插入的时候无冲突，占位置a1，第二次b插入，发现a1被占，向后寻找空位，比如最后占了a1+100位置，那么之后查找get(b)的时候，是判断a1位的key不相等于是向后找吗？如果一直向后找岂不是效率很低？<br>2. 字典可用量低于1&#47;3时会扩容，那么扩容之后size肯定变了，hash(key)&amp;(size-1)也会变，所以整块内存的拷贝就不可行了吧，是一个个遍历重新插入吗？<br>谢谢","like_count":0},{"had_liked":false,"id":96135,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1558340548,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558340548","product_id":100026901,"comment_content":"老师，我想问：在定义集合的时候，为什么能用{ }，不是字典才用{ } 吗？","like_count":0},{"had_liked":false,"id":95848,"user_name":"........","can_delete":false,"product_type":"c1","uid":1236198,"ip_address":"","ucode":"D54E7F428E7F49","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/e6/ea4b2c10.jpg","comment_is_top":false,"comment_ctime":1558229221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558229221","product_id":100026901,"comment_content":"1.<br>第一种方法更快，理由同之前一样<br>2.<br>错误，因为list是可变的，不能作为键值","like_count":0},{"had_liked":false,"id":95807,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1558183457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558183457","product_id":100026901,"comment_content":"思考题1：<br>用上一堂课的方法计算了一下运行时间，如下：<br>python3 -m timeit -s &quot;d = {&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;}&quot;<br>20000000 loops, best of 5: 10.5 nsec per loop<br>python3 -m timeit -s &quot;d = dict({&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;})&quot;<br>20000000 loops, best of 5: 10.4 nsec per loop<br>使用dis分析字节码来判断哪个更高效，这种方法可否详细说明？<br><br>思考题2：<br>字典的键必须是不可变数据类型。Python中的不可变数据类型有：int、float、str、tuple、frozenset、bytes。可变数据类型有：list、dict、set、bytearray。","like_count":0},{"had_liked":false,"id":95794,"user_name":"姑苏小沈🏃🎸","can_delete":false,"product_type":"c1","uid":1085941,"ip_address":"","ucode":"FFC9C7BC1C6B4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/f5/6881f336.jpg","comment_is_top":false,"comment_ctime":1558178578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558178578","product_id":100026901,"comment_content":"字典的应用场景比较好理解，集合有哪些应用场景？我想到一个：去重…","like_count":0},{"had_liked":false,"id":95787,"user_name":"Linux命令手册","can_delete":false,"product_type":"c1","uid":1069291,"ip_address":"","ucode":"F80776F9F53337","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/eb/a1a2cf00.jpg","comment_is_top":false,"comment_ctime":1558176313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558176313","product_id":100026901,"comment_content":"感觉从这篇开始才符合python进阶。","like_count":0},{"had_liked":false,"id":95657,"user_name":"李君","can_delete":false,"product_type":"c1","uid":1524543,"ip_address":"","ucode":"318E337753EFD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/43/3f/506dd9cf.jpg","comment_is_top":false,"comment_ctime":1558132946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558132946","product_id":100026901,"comment_content":"我怎么觉得 #set version  这部分products定义有点问题？","like_count":0},{"had_liked":false,"id":95646,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1558110775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558110775","product_id":100026901,"comment_content":"问题1:第一种情况效率更高<br>问题2:字典的key需要使用不可变变量，list可变，因此不能被hash<br><br>额外问题:dict线程安全么？","like_count":0},{"had_liked":false,"id":95645,"user_name":"可乐泡枸杞","can_delete":false,"product_type":"c1","uid":1308516,"ip_address":"","ucode":"C709B781DF0456","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/64/03d8154f.jpg","comment_is_top":false,"comment_ctime":1558110257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558110257","product_id":100026901,"comment_content":"知道原理可以了解为啥字典跟集合那么高效，如果我只记住结论，不知道原理，会对级别比较低的任务产生影响么？？<br>问题一 算了下时间 上面的更短<br>问题二不正确<br>","like_count":0},{"had_liked":false,"id":95644,"user_name":"Geek_season","can_delete":false,"product_type":"c1","uid":1531424,"ip_address":"","ucode":"9F0317D4C702BF","user_header":"https://static001.geekbang.org/account/avatar/00/17/5e/20/f8a6b369.jpg","comment_is_top":false,"comment_ctime":1558109168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558109168","product_id":100026901,"comment_content":"思考题1，2的字典初始化会更为高效<br><br><br>","like_count":0},{"had_liked":false,"id":95625,"user_name":"LiANGZE","can_delete":false,"product_type":"c1","uid":1031867,"ip_address":"","ucode":"62AA285D8E8DDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/bb/c089f246.jpg","comment_is_top":false,"comment_ctime":1558104658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558104658","product_id":100026901,"comment_content":"唉，这下有的改了，以前代码里一直用的dict()初始化...","like_count":0},{"had_liked":false,"id":95621,"user_name":"Mr.L","can_delete":false,"product_type":"c1","uid":1486770,"ip_address":"","ucode":"0E7AD06356771A","user_header":"https://static001.geekbang.org/account/avatar/00/16/af/b2/2aaa36d5.jpg","comment_is_top":false,"comment_ctime":1558103243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558103243","product_id":100026901,"comment_content":"import time<br>id = [x for x in range(0, 100000)]<br>price = [x for x in range(200000, 300000)]<br>products = list(zip(id, price))<br><br>start_using_list = time.perf_counter()<br>find_unique_price_using_list(products)<br>end_using_list = time.perf_counter()<br>print(&quot;time elapse using list: {}&quot;.format(end_using_list - start_using_list))<br>执行语句会报错：NameError: name &#39;find_unique_price_using_list&#39; is not defined","like_count":0},{"had_liked":false,"id":95576,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1558086168,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558086168","product_id":100026901,"comment_content":"插入的时候如果hash冲突，找个空位存放，那查找的时候怎么查找到这个呢？","like_count":0},{"had_liked":false,"id":95570,"user_name":"Chandelier","can_delete":false,"product_type":"c1","uid":1343426,"ip_address":"","ucode":"F8ADDC26A2142C","user_header":"https://static001.geekbang.org/account/avatar/00/14/7f/c2/614ec73f.jpg","comment_is_top":false,"comment_ctime":1558084702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558084702","product_id":100026901,"comment_content":"Python 中字典和集合，无论是键还是值，都可以是混合类型。<br>这一句应该不够严谨，可以是混合类型，但是类型不能是列表之类的可变类型","like_count":0},{"had_liked":false,"id":95568,"user_name":"Chandelier","can_delete":false,"product_type":"c1","uid":1343426,"ip_address":"","ucode":"F8ADDC26A2142C","user_header":"https://static001.geekbang.org/account/avatar/00/14/7f/c2/614ec73f.jpg","comment_is_top":false,"comment_ctime":1558084645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558084645","product_id":100026901,"comment_content":"Python 中字典和集合，无论是键还是值，都可以是混合类型。","like_count":0},{"had_liked":false,"id":95547,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1558079129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558079129","product_id":100026901,"comment_content":"总结：<br>1.针对不同场景选择合适的数据结构非常重用。<br>2.数据结构的不同会显著影响算法的时间复杂度。<br>3.好的算法更加高效，人人爱😄。","like_count":0},{"had_liked":false,"id":95543,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1558078851,"is_pvip":false,"replies":[{"id":"34133","content":"谢谢，希望对你有所帮助","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558080899,"ip_address":"","comment_id":95543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558078851","product_id":100026901,"comment_content":"干货干货，这些年使用python时的一些困惑，逐渐清晰了，豁然开朗","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450505,"discussion_content":"谢谢，希望对你有所帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95531,"user_name":"Jon徐","can_delete":false,"product_type":"c1","uid":1206774,"ip_address":"","ucode":"D203B6848C1D9C","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/f6/40c497a3.jpg","comment_is_top":false,"comment_ctime":1558076979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558076979","product_id":100026901,"comment_content":"应该说key不能是可变类型，否则每次的hash值可能会不同，那就代表不是同一个key了。测试了下，显示list 是 unhashable type","like_count":0},{"had_liked":false,"id":95530,"user_name":"更好的做自己","can_delete":false,"product_type":"c1","uid":1339294,"ip_address":"","ucode":"92CC2D8E4B3B52","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/9e/951afb1f.jpg","comment_is_top":false,"comment_ctime":1558076880,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558076880","product_id":100026901,"comment_content":"第一题<br>测试结果：<br>$ python3 -m timeit -s &#39;x=dict({})&#39;<br>100000000 loops, best of 3: 0.00627 usec per loop<br>$ python3 -m timeit -s &#39;x={}&#39;<br>100000000 loops, best of 3: 0.00629 usec per loop<br>$ python3 -m timeit -s &#39;x=dict({&quot;name&quot;:&quot;json&quot;, &quot;age&quot;: 20, &quot;gender&quot;: &quot;male&quot;})&#39;<br>100000000 loops, best of 3: 0.00625 usec per loop<br>$ python3 -m timeit -s &#39;x={&quot;name&quot;:&quot;json&quot;, &quot;age&quot;: 20, &quot;gender&quot;: &quot;male&quot;}&#39;<br>100000000 loops, best of 3: 0.00669 usec per loop<br><br>第二题<br>字典的键必须是可哈希的，简单的讲不可变类型是可哈希的，可变类型是不可哈希的。列表属于可变类型，元组属于不可变类型","like_count":0},{"had_liked":false,"id":95515,"user_name":"矢风","can_delete":false,"product_type":"c1","uid":1060313,"ip_address":"","ucode":"37281857D564BF","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/d9/a96c60cc.jpg","comment_is_top":false,"comment_ctime":1558072202,"is_pvip":false,"replies":[{"id":"34127","content":"不用导入。贴下代码？肯定哪里写错了","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558080404,"ip_address":"","comment_id":95515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558072202","product_id":100026901,"comment_content":"直接用Set 报错？应该要导入哪个文件？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450491,"discussion_content":"不用导入。贴下代码？肯定哪里写错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95514,"user_name":"小胖","can_delete":false,"product_type":"c1","uid":1022958,"ip_address":"","ucode":"1B8D884D254070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/ee/8950c240.jpg","comment_is_top":false,"comment_ctime":1558072069,"is_pvip":false,"replies":[{"id":"34128","content":"正确","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558080412,"ip_address":"","comment_id":95514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558072069","product_id":100026901,"comment_content":"1.option A 更高效，因为option B是函数调用，会创建栈，还有进行参数检测，效率低一点，<br> 2. list不能作为字典的key，因为你字典的key必须是不可变的(哈希)，而list是可变的。可以用元组作为key.","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450490,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558080412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95512,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1558071582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558071582","product_id":100026901,"comment_content":"第二题<br>d = {&#39;name&#39;:&#39;jason&#39;,[&#39;education&#39;]:[&#39;S++.Uni01&#39;,&#39;S++.Uni02&#39;]}，报错TypeError: unhashable type: &#39;list&#39;<br>一点愚见，首先列表是可变的，但是字典里要保证hash的正确性作为key的对象就不能是可变对象😂<br>","like_count":0},{"had_liked":false,"id":95495,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1558064324,"is_pvip":false,"replies":[{"id":"34119","content":"正确，中心思想和上一章节的思考题一样","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558079642,"ip_address":"","comment_id":95495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558064324","product_id":100026901,"comment_content":"第一题<br>import timeit<br>print(timeit.timeit(&quot;{&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:99,&#39;gemder&#39;:&#39;male&#39;}&quot;,number=10000))<br>print(timeit.timeit(&quot;dict({&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:99,&#39;gemder&#39;:&#39;male&#39;})&quot;,number=10000))<br>0.0014233950059860945<br>0.0045806189882569015<br>感觉{}更高效","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450481,"discussion_content":"正确，中心思想和上一章节的思考题一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558079642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95488,"user_name":"水木刀","can_delete":false,"product_type":"c1","uid":1500427,"ip_address":"","ucode":"942093B000C41E","user_header":"https://static001.geekbang.org/account/avatar/00/16/e5/0b/e4e2c0b1.jpg","comment_is_top":false,"comment_ctime":1558063097,"is_pvip":false,"replies":[{"id":"34120","content":"正确","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558079656,"ip_address":"","comment_id":95488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558063097","product_id":100026901,"comment_content":"1、做完实验结论是 Option A 更高效 ，认为是内部调用函数所产生的时间<br>2、字典的key值不能为列表。字典的初始值是错误的，可以改成 {&#39;name&#39;: &#39;jason&#39;, (&#39;education&#39;): (&#39;Tsinghua University&#39;, &#39;Stanford University&#39;)}，因为字典的存储方式是hash 方式是不可变的，元组不可变所以可以，列表是可变不可以。","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450477,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558079656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95483,"user_name":"汪zZ","can_delete":false,"product_type":"c1","uid":1234757,"ip_address":"","ucode":"8B93062A683902","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/45/d1621188.jpg","comment_is_top":false,"comment_ctime":1558062007,"is_pvip":true,"replies":[{"id":"34121","content":"嗯嗯","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1558079665,"ip_address":"","comment_id":95483,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1558062007","product_id":100026901,"comment_content":"{}更快，如昨天答案，是内置c函数。。<br>不可以，hash应该是不可变的。如果可变就没有哈希冲突了。","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450474,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558079665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95458,"user_name":"啸风","can_delete":false,"product_type":"c1","uid":1315934,"ip_address":"","ucode":"6DBCA0EC5D4085","user_header":"https://static001.geekbang.org/account/avatar/00/14/14/5e/25f5f8a8.jpg","comment_is_top":false,"comment_ctime":1558058540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558058540","product_id":100026901,"comment_content":"干货拿走~！","like_count":0},{"had_liked":false,"id":95440,"user_name":"青春","can_delete":false,"product_type":"c1","uid":1524366,"ip_address":"","ucode":"F2A35DC1A53221","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/8e/ff866078.jpg","comment_is_top":false,"comment_ctime":1558056659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558056659","product_id":100026901,"comment_content":"课件内容已阅读，尚未做实验，mark一下","like_count":0},{"had_liked":false,"id":95437,"user_name":"〰","can_delete":false,"product_type":"c1","uid":1164565,"ip_address":"","ucode":"5ECF54B48BB29B","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/15/cf00ae4f.jpg","comment_is_top":false,"comment_ctime":1558056362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558056362","product_id":100026901,"comment_content":"1. 使用timeit 计算两者的运行时间，经过多次实验，看不出哪个更高效，两者时间相差不大，时间范围在0.0146-0.0178之间。所以到底哪个更高效？","like_count":0},{"had_liked":false,"id":95429,"user_name":"黄任添","can_delete":false,"product_type":"c1","uid":1076020,"ip_address":"","ucode":"02C8B0788F3395","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/34/69ce8548.jpg","comment_is_top":false,"comment_ctime":1558055776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558055776","product_id":100026901,"comment_content":"老师好，问题:在爬虫领域中，当爬取一个网站时，如何对爬取到该网站的数据的高效去重，希望老师可以给出一个常见的解决方案，以及面对类似的问题，该从那个角度出发解决问题？","like_count":0},{"had_liked":false,"id":95420,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1558055004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558055004","product_id":100026901,"comment_content":"1.A更高效2.字典的键应为不可变，所以不能用列表做键","like_count":0}]}