{"id":464910,"title":"21 | 单元测试：如何使用 TDD 开发一个组件？","content":"<p>你好，我是大圣。</p><p>上一讲我们学习了不少组件库里的经典组件，用TypeScript搭建起了TypeScript + Vite + Sass的组件库开发基础环境，并且实现了Container布局组件。</p><p>今天我们来聊另外一个大幅提升组件库代码可维护性的手段：单元测试。在理解单元测试来龙去脉的基础上，我还会给你演示，如何使用测试驱动开发的方式实现一个组件，也就是社区里很火的TDD开发模式。</p><h2>单元测试</h2><p>单元测试（Unit Testing），是指对软件中的最小可测试单元进行检查和验证，这是百度百科对单元测试的定义。而我的理解是，在我们日常代码开发中，会经常写Console来确认代码执行效果是否符合预期，这其实就算是测试的雏形了，我们把代码中的某个函数或者功能，传入参数后，校验输出是否符合预期。</p><p>下面的代码中我们实现了一个简单的add函数,  并且使用打印3和add(1,2)的结果来判断函数输出。</p><p>add函数虽然看起来很简单，但实际使用时可能会遇到很多情况。比如说x如果是字符串，或者对象等数据类型的时候，add结果是否还可以符合预期？而且add函数还有可能被你的同事不小心加了其他逻辑，这都会干扰add函数的行为。</p><pre><code class=\"language-javascript\">function add(x,y){\n  return x+y\n}\n\nconsole.log(3 == add(1,2))\n</code></pre><!-- [[[read_end]]] --><p>为了让add函数的行为符合预期，你希望能添加很多Console的判断逻辑，并且让这些代码自动化执行。</p><p>我们来到src目录下，新建一个add.js。下面的代码中，我们定义了函数test执行测试函数，可以给每个测试起个名字，方便调试的时候查找，expect可以判断传入的值和预期是否相符。</p><pre><code class=\"language-javascript\">function add(x,y){\n  return x+y\n}\n\nfunction expect(ret){\n  return {\n    toBe(arg){\n      if(ret!==arg){\n        throw Error(`预计和实际不符,预期是${arg}，实际是${ret}`)\n      }\n    }\n  }\n}\nfunction test(title, fn){\n  try{\n    fn()\n    console.log(title,'测试通过')\n  }catch(e){\n    console.log(e)\n    console.error(title,'测试失败')\n  }\n}\ntest('测试数字相加',()=&gt;{\n  expect(add(1,2)).toBe(3)\n})\n</code></pre><p>命令行执行node add.js以后，我们就可以看到下面的结果。如果每次Git提交代码之前，我们都能执行一遍add.js去检查add函数的逻辑，add函数相当于有了个自动检查员，这样就可以很好地提高add函数的可维护性。</p><pre><code class=\"language-javascript\">➜&nbsp; ailemente git:(main) ✗ node add.js\n测试数字相加 测试通过\n</code></pre><p>下一步，我们如果想让add函数支持更多的数据类型，比如我们想支持数字字符串的相加，又要怎么处理呢？我们可以先写好测试代码，在下面的代码中，我们希望数字1和字符串2也能以数字的形式相加。</p><pre><code class=\"language-javascript\">test('测试数字和字符串数字相加',()=&gt;{\n  expect(add(1,'2')).toBe(3)\n})\n</code></pre><p>我们在命令行里执行node add.js之后，就会提示下面的报错信息，这说明现在代码还没有符合新的需求，我们需要进一步丰富add函数的逻辑。<br>\n<img src=\"https://static001.geekbang.org/resource/image/63/f9/632ed2fdc46e4bf58083b0dc50cbaaf9.png?wh=1780x802\" alt=\"图片\"></p><p>我们把add函数改成下面的代码，再执行add.js后，就会提示你两个测试都通过了，这样我们就确保新增逻辑的时候，也没有影响到之前的代码逻辑。</p><pre><code class=\"language-javascript\">function add(x,y){\n  if(Number(x)==x &amp;&amp; Number(y)==y){\n    return Number(x) + Number(y)\n  }\n  return x+y\n}\n\n</code></pre><p>这是一个非常简单的场景演示，但这个例子能够帮助你快速了解什么是单元测试。下一步，我们要在Vue中给我们的组件加上测试。</p><h2>组件库引入Jest</h2><p>我们选择Facebook出品的Jest作为我们组件库的测试代码，Jest是现在做测试的最佳选择了，因为它内置了断言、测试覆盖率等功能。</p><p>不过，因为我们组件库使用TypeScript开发，所以需要安装一些插件，通过命令行执行下面的命令，vue-jest和@vue/test-utils是测试Vue组件必备的库，然后安装babel相关的库，最后安装Jest适配TypeScript的库。代码如下：</p><pre><code class=\"language-javascript\">npm install -D jest@26 vue-jest@next @vue/test-utils@next \nnpm install -D babel-jest@26 @babel/core @babel/preset-env \nnpm install -D ts-jest@26 @babel/preset-typescript @types/jest\n</code></pre><p>安装完毕后，我们要在根目录下新建.babel.config.js。下面的配置目的是让babel解析到Node和TypeScript环境下。</p><pre><code class=\"language-javascript\">module.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: 'current' } }],\n    '@babel/preset-typescript',\n  ],\n}\n\n</code></pre><p>然后，我们还需要新建jest.config.js，用来配置jest的测试行为。不同格式的文件需要使用不同命令来配置，对于.vue文件我们使用vue-jest，对于.js或者.jsx结果的文件，我们就要使用babel-jest，而对于.ts结尾的文件我们使用ts-jest，然后匹配文件名是xx.spect.js。这里请注意，<strong>Jest只会执行.spec.js结尾的文件</strong>。</p><pre><code class=\"language-javascript\">module.exports = {\n  transform: {\n    // .vue文件用 vue-jest 处理\n    '^.+\\\\.vue$': 'vue-jest',\n    // .js或者.jsx用 babel-jest处理\n    '^.+\\\\.jsx?$': 'babel-jest', \n    //.ts文件用ts-jest处理\n    '^.+\\\\.ts$': 'ts-jest'\n  },\n  testMatch: ['**/?(*.)+(spec).[jt]s?(x)']\n}\n\n</code></pre><p>然后配置package.json，在scrips配置下面新增test命令，即可启动Jest。</p><pre><code class=\"language-javascript\">  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vue-tsc --noEmit &amp;&amp; vite build\",\n    \"serve\": \"vite preview\",\n    \"lint\": \"eslint --fix --ext .js,vue src/\",\n    \"test\": \"jest\",\n}\n</code></pre><p>完成上面的操作之后，配置工作就告一段落了，可以开始输入代码做测试了。</p><p>我们可以在src目录下新增test.spec.js，再输入下面代码来进行测试。在这段代码中，我们使用expect().toBe()来判断值是否相等，使用toHavaBeenCalled来判断函数是否执行。更多的断言函数你可以去<a href=\"https://www.jestjs.cn/docs/expect\">官网</a>查看，这些函数可以覆盖我们测试场景的方方面面。</p><pre><code class=\"language-javascript\">\n\n\n\nfunction sayHello(name,fn){\n  if(name=='大圣'){\n    fn()\n  }\n}\ntest('测试加法',()=&gt;{\n  expect(1+2).toBe(3)\n})\ntest('测试函数',()=&gt;{\n  const fn = jest.fn()\n  sayHello('大圣',fn)\n  expect(fn).toHaveBeenCalled()\n})\n  \n</code></pre><h2>TDD开发组件</h2><p>好，通过之前的讲解，我们已经学会如何使用Jest去测试函数。下一步我们来测试Vue3的组件，其实，Vue的组件核心逻辑也是函数。</p><p>这里我们借助Vue官方推荐的<a href=\"https://next.vue-test-utils.vuejs.org\">@vue/test-utils</a> 库来测试组件的渲染，我们新建src/components/button文件夹，新建Button.spec.ts。</p><p>参考 <a href=\"https://e3.shengxinjing.cn/#/component/button\">Element3的button组件</a>，el-button组件可以通过传递size来配置按钮的大小。现在我们先根据需求去写测试代码，因为现在Button.vue还不存在，所以我们可以先根据Button的行为去书写测试案例。</p><pre><code class=\"language-javascript\">import Button from './Button.vue'\nimport { mount } from '@vue/test-utils'\ndescribe('按钮测试', () =&gt; {\n  it('按钮能够显示文本', () =&gt; {\n    const content = '大圣小老弟'\n    const wrapper = mount(Button, {\n      slots: {\n        default: content\n      }\n    })\n    expect(wrapper.text()).toBe(content)\n  })\n  it('通过size属性控制大小', () =&gt; {\n    const size = 'small'\n    const wrapper = mount(Button, {\n      props: {\n        size\n      }\n    })\n    // size内部通过class控制\n    expect(wrapper.classes()).toContain('el-button--small')\n  })  \n\n})\n</code></pre><p>我们首先要从@vue/test-utils库中导入mount函数，这个函数可以在命令行里模拟Vue的组件渲染。在Button的slot传递了文本之后，wrapper.text()就能获取到文本内容，然后对Button渲染结果进行判断。之后，我们利用size参数，即可通过渲染不同的class来实现按钮的大小，这部分内容我们很熟悉了，在<a href=\"https://time.geekbang.org/column/article/464098\">第20讲</a>里的Container组件中就已经实现过了。</p><p>然后我们在命令行执行npm run test来执行所有的测试代码。命令行终端上提示，我们期望button上含有el-button-small class，但是实际上button上并没有这个class，所以就会报错。具体报错信息你可以参考下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/43/acb02590c5a4390c89bc76a8e1769043.png?wh=1442x652\" alt=\"图片\"></p><p>之后，我们再通过实现Button组件的逻辑，去处理这个错误信息，这就是TDD测试驱动开发的方法。我们实现功能的过程就像小时候写作业，而测试代码就像批改作业的老师。</p><p>TDD的优势就相当于有一位老师，在我们旁边不停做批改，哪怕一开始所有题都做错了，只要我们不断写代码，把所有题都回答正确，也能最后确保全部功能的正确。</p><p>我们通过接收size去渲染button的class，我们来到button.vue中，通过下面的代码可以接收size参数，并且成功渲染出对应的class。</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;button\n    class=\"el-button\" \n    :class=\"[size ? `el-button--${size}` : '',]\"\n  &gt;\n    &lt;slot /&gt;\n  &lt;/button&gt;\n&lt;/template&gt;\n&lt;script setup lang=\"ts\"&gt;\n\nimport {computed, withDefaults} from 'vue'\ninterface Props {\n  size?:\"\"|'small'|'medium'|'large'\n}\nconst props = withDefaults(defineProps&lt;Props&gt;(),{\n  size:\"\"\n})\n&lt;/script&gt;\n\n</code></pre><p>进行到这里还没有结束，class还要通过Sass去修改浏览器页面内的大小。<br>\n为了让你抓住重点，这里的Sass代码我放几个核心逻辑，完整代码你可以在项目的<a href=\"https://github.com/shengxinjing/ailemente/blob/main/src/components/button/Button.vue#L40\">GitHub</a>里看到。</p><pre><code class=\"language-scss\">@include b(button){\n  display: inline-block;\n  cursor: pointer;\n  background: $--button-default-background-color;\n  color: $--button-default-font-color;\n  @include button-size(\n    $--button-padding-vertical,\n    $--button-padding-horizontal,\n    $--button-font-size,\n    $--button-border-radius\n  );\n  @include m(small) {\n    @include button-size(\n      $--button-medium-padding-vertical,\n      $--button-medium-padding-horizontal,\n      $--button-medium-font-size,\n      $--button-medium-border-radius\n    );\n  }\n  @include m(large) {\n    @include button-size(\n      $--button-large-padding-vertical,\n      $--button-large-padding-horizontal,\n      $--button-large-font-size,\n      $--button-large-border-radius\n    );\n  }\n}\n</code></pre><p>前面的代码中通过b(button)渲染el-button的样式，内部使用变量都可以在mixin中找到。通过b和button-size的嵌套，就能实现按钮大小的控制。button渲染的结果，你可以参考下方的截图。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/c2/86ee8a8f3fd337014857329324f4b1c2.png?wh=1920x557\" alt=\"图片\"></p><p>然后我们接着往下进行，想要设置按钮的大小，除了通过props传递，还可以通过全局配置的方式设置默认大小。我们进入到代码文件src/main.ts中，设置全局变量$AILEMENTE中的size为large，并且还可以通过type=\"primary\"或者type=\"success\"的方式，设置按钮的主体颜色，代码如下：</p><pre><code class=\"language-typescript\">const app = createApp(App)\napp.config.globalProperties.$AILEMENTE = {\n  size:'large'\n}\napp.use(ElContainer)\n  .use(ElButton)\n  .mount('#app')\n\n\n\n</code></pre><p>首先我们要支持全局的size配置，在src目录下新建util.ts，写入下面的代码。我们通过vue提供的getCurrentInstance获取当前的实例，然后返回全局配置的$AILEMENTE。这里请注意，由于很多组件都需要读取全局配置，所以我们封装了useGlobalConfig函数。</p><pre><code class=\"language-typescript\">import { getCurrentInstance,ComponentInternalInstance } from 'vue'\n\nexport function useGlobalConfig(){\n  const instance:ComponentInternalInstance|null =getCurrentInstance()\n  if(!instance){\n    console.log('useGlobalConfig 必须得在setup里面整')\n    return\n  }\n  return instance.appContext.config.globalProperties.$AILEMENTE || {}\n  \n}\n</code></pre><p>这时我们再回到Button.vue中，通过computed返回计算后的按钮的size。如果props.size没传值，就使用全局的globalConfig.size；如果全局设置中也没有size配置，按钮就使用Sass中的默认大小。</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;button\n    class=\"el-button\" \n    :class=\"[\n      buttonSize ? `el-button--${buttonSize}` : '',\n      type ? `el-button--${type}` : ''\n    ]\"\n  &gt;\n    &lt;slot /&gt;\n  &lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script lang=\"ts\"&gt;\nexport default{\n  name:'ElButton'\n}\n&lt;/script&gt;\n\n&lt;script setup lang=\"ts\"&gt;\n\nimport {computed, withDefaults} from 'vue'\nimport { useGlobalConfig } from '../../util';\n\ninterface Props {\n  size?:\"\"|'small'|'medium'|'large',\n  type?:\"\"|'primary'|'success'|'danger'\n}\nconst props = withDefaults(defineProps&lt;Props&gt;(),{\n  size:\"\",\n  type:\"\"\n})\nconst globalConfig = useGlobalConfig()\nconst buttonSize = computed(()=&gt;{\n  return props.size||globalConfig.size\n})\n&lt;/script&gt;\n\n</code></pre><p>我们来到src/App.vue中，就可以直接使用el-button来显示不同样式的按钮了。</p><pre><code class=\"language-xml\">  &lt;el-button type=\"primary\"&gt;\n    按钮\n  &lt;/el-button&gt;\n  &lt;el-button type=\"success\"&gt;\n    按钮\n  &lt;/el-button&gt;\n  &lt;el-button&gt;按钮&lt;/el-button&gt;\n  &lt;el-button size=\"small\"&gt;\n    按钮\n  &lt;/el-button&gt;\n  \n</code></pre><p>不同按钮的显示效果如下所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/e1/20/e1bc7b41f95640cafaf4619f9df96720.jpg?wh=1920x508\" alt=\"图片\"></p><p>然后我们进入jest.config.js中，新增下面的配置，collectCoverage标记的意思是我们需要收集代码测试覆盖率。</p><pre><code class=\"language-typescript\">module.exports = {\n  transform: {\n    //  用 `vue-jest` 处理 `*.vue` 文件\n    '^.+\\\\.vue$': 'vue-jest', //vuejest 处理.vue\n    '^.+\\\\.jsx?$': 'babel-jest',  // babel jest处理js or jsx\n    '^.+\\\\.tsx?$': 'ts-jest', // ts-jest 处理.ts .tsx\n  },\n  testMatch: ['**/?(*.)+(spec).[jt]s?(x)'],\n  collectCoverage: true,\n  coverageReporters: [\"json\", \"html\"],\n}\n\n</code></pre><p>然后在执行npm run test后，项目的根目录下就会出现一个coverage目录。<br>\n我们打开下面的index.html后，就可以在浏览器中看到测试覆盖率的报告。对照下图我们可以看到，button组件的测试覆盖率100%，util下面有两行代码飘红，也就是没有测试的逻辑。</p><p>在一定程度上，测试覆盖率也能够体现出代码的可维护性，希望你可以用好这个指标。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/d0/b38eec8c9b286c4316cecfe39e3a67d0.png?wh=1868x288\" alt=\"图片\"></p><p><img src=\"https://static001.geekbang.org/resource/image/6b/be/6b4027a05761d323224df5b09c4beebe.png?wh=1568x690\" alt=\"图片\"></p><p><img src=\"https://static001.geekbang.org/resource/image/62/02/621bf3871a7b345bb6a08c451e0b3d02.png?wh=1870x506\" alt=\"图片\"></p><p>最后，我们进入.husky/pre-commit文件，新增npm run test命令，这么做的目的是，确保测试通过的代码才能进入git管理代码，这会进一步提高代码的规范和可维护性。</p><pre><code class=\"language-typescript\">#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm run lint\nnpm run test\n</code></pre><h2>总结</h2><p>今天的内容就到此结束了，我们来回顾一下今天学到的东西吧。</p><p>首先，我们学习了什么是自动化测试，我们实现了test和expect函数，通过它们来测试add函数。</p><p>然后，我们通过jest框架配置了Vue的自动化测试环境。通过安装babel、@vue/test-utils、babel-vue、ts-babel等插件，我们配置了TypeScript环境下的Jest+Vue 3的单测环境，并且匹配项目中.spect结束的js和vue文件执行测试。</p><p>在Jest中，我们通过describe函数给测试分组，通过it执行测试，再利用expect语法去执行断言。我们还发现，借助@vue/test-utils库可以很方便地对Vue组件进行测试。</p><p>最后，我们一起体验了TDD测试驱动开发的开发模式。我们先根据功能需求，去写出测试案例，这个时候测试窗口就会报错，然后我们才开始实现功能，最终让测试代码全部通过，用这样的方式来检验开发的结果。<strong>TDD的优势就在于可以随时检验代码的逻辑，能极大提高代码的可维护性</strong>。</p><p>现在我们有了TypeScript，有了Jest，下一讲我们将实现一个比较复杂的表单组件，它会包含组件的通信、方法传递等难点，敬请期待。</p><h2>思考题</h2><p>最后留个思考题，我们的Button组件怎么通过传递circle属性来显示圆角按钮呢？</p><p>欢迎你在评论区留下你的答案，也欢迎你把这一讲分享给你的同事和朋友们，我们下一讲再见！</p>","comments":[{"had_liked":false,"id":344866,"user_name":"陈坚泓","can_delete":false,"product_type":"c1","uid":2461961,"ip_address":"","ucode":"75258EE1BF1C2A","user_header":"https://static001.geekbang.org/account/avatar/00/25/91/09/6f0b987a.jpg","comment_is_top":true,"comment_ctime":1651826813,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233720900461998e+18","product_id":100094401,"comment_content":"工作三年 至今还没有机会用上单元测试","like_count":13,"discussions":[{"author":{"id":2690187,"avatar":"https://static001.geekbang.org/account/avatar/00/29/0c/8b/e967775c.jpg","nickname":"金针菇饲养员","note":"","ucode":"0688C0694C0049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583401,"discussion_content":"借楼，说几个问题：\n1、大家跟着课程敲这一节代码了吗？有没有遇到各种报错跑不起来的问题？\n2、ReferenceError: module is not defined in ES module scope要求把jest.config.js改为jest.config.cjs。\n3、改为cjs之后又说 You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.\n4、我来看单元测试的，搁着套娃呢是吧？大圣能把你vue版本、node版本、vite版本这些环境参数贴在课里吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660099031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325310,"user_name":"海阔天空","can_delete":false,"product_type":"c1","uid":1327016,"ip_address":"","ucode":"16C87A0052A08B","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/a8/8da58e53.jpg","comment_is_top":false,"comment_ctime":1638919568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10228854160","product_id":100094401,"comment_content":"感觉单元测试这块用得比较少，还是用console检查用得比较多，这可能和项目的迭代周期有关。单元测试确实比较更全面。","like_count":2},{"had_liked":false,"id":334436,"user_name":"刷子iNG","can_delete":false,"product_type":"c1","uid":1895752,"ip_address":"","ucode":"BF2770A49B5D48","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ed/48/4a40816a.jpg","comment_is_top":false,"comment_ctime":1644934369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5939901665","product_id":100094401,"comment_content":"这讲，对自己写个ui库提升kpi很有帮助啊","like_count":1},{"had_liked":false,"id":325613,"user_name":"小胖","can_delete":false,"product_type":"c1","uid":1098584,"ip_address":"","ucode":"B1C0EFDD821630","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/58/ba171e09.jpg","comment_is_top":false,"comment_ctime":1639042775,"is_pvip":false,"replies":[{"id":"118319","content":"type和interface功能比较类似，大部分场景都可以互换，官网也给出了说明https:&#47;&#47;github.com&#47;microsoft&#47;TypeScript&#47;blob&#47;main&#47;doc&#47;spec-ARCHIVED.md#310-type-aliases<br><br>However, doing so means the following capabilities are lost:<br><br>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.<br>An interface can have multiple merged declarations, but a type alias for an object type literal cannot.<br><br>大概就是type可以使用别名和typeof，多个interface可以合并，但是type不会，这些区别大部分日常开发都见不到，可以理解为interface更倾向于描述类型关系，type更适合描述数据结构","user_name":"作者回复","comment_id":325613,"uid":"1003715","ip_address":"","utype":1,"ctime":1639397949,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"5934010071","product_id":100094401,"comment_content":"接上一篇提问：上篇文章的几个布局组件，定义Props类型的时候。老师有时是使用type、有时用interface，有什么说法么？","like_count":1,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538306,"discussion_content":"type和interface功能比较类似，大部分场景都可以互换，官网也给出了说明https://github.com/microsoft/TypeScript/blob/main/doc/spec-ARCHIVED.md#310-type-aliases\n\nHowever, doing so means the following capabilities are lost:\n\nAn interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.\nAn interface can have multiple merged declarations, but a type alias for an object type literal cannot.\n\n大概就是type可以使用别名和typeof，多个interface可以合并，但是type不会，这些区别大部分日常开发都见不到，可以理解为interface更倾向于描述类型关系，type更适合描述数据结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639397949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2338500,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ae/c4/eafb9ba1.jpg","nickname":"长寿","note":"","ucode":"5FBDF9E65D2F3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":582144,"discussion_content":"啊，这是我倒是觉得interface用来描述数据结构，type用来描述类型关系更好……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659260091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538306,"ip_address":"辽宁"},"score":582144,"extra":""}]},{"author":{"id":1989649,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kDyoSquJMmpZ8MDZRPh6U1n8ry7zW4fRUJ78yxOag61qSUtZQ953y2maNBpjkiaFd21UpIh95sxP6OegcNloFCA/132","nickname":"小海","note":"","ucode":"16D6F47ED7E63A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537536,"discussion_content":"interface可以导出,一般是提供给其他文件调用时用这个,  type是本文件内使用,如果不需要导出,就用type","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639099595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325400,"user_name":"小海","can_delete":false,"product_type":"c1","uid":1989649,"ip_address":"","ucode":"16D6F47ED7E63A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/kDyoSquJMmpZ8MDZRPh6U1n8ry7zW4fRUJ78yxOag61qSUtZQ953y2maNBpjkiaFd21UpIh95sxP6OegcNloFCA/132","comment_is_top":false,"comment_ctime":1638944403,"is_pvip":false,"replies":[{"id":"118321","content":"其实ent.d.ts是vscode帮我自动创建了，我就给忽略了，就是babel.config.js","user_name":"作者回复","comment_id":325400,"uid":"1003715","ip_address":"","utype":1,"ctime":1639398042,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5933911699","product_id":100094401,"comment_content":"赞, 发现两个小瑕疵<br>1.在 Button.spec.ts文件中 引入 button.vue组件时.会提示找不到该模块,后来看了github链接的源码才发现是需要在src目录下增加 env.d.ts文件,才能使TS文件顺利引入vue文件的组件,<br>2. babel.config.js 在课程资料里是创建  .babel.config.js文件  但是源码里并没有&quot;.&quot; 不晓得哪个才是正确写法","like_count":1,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538308,"discussion_content":"其实ent.d.ts是vscode帮我自动创建了，我就给忽略了，就是babel.config.js","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098584,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/58/ba171e09.jpg","nickname":"小胖","note":"","ucode":"B1C0EFDD821630","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537368,"discussion_content":"是babel.config.js，不然也是提示找不到模块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639042639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356255,"user_name":"Geek_623ed8","can_delete":false,"product_type":"c1","uid":3074698,"ip_address":"黑龙江","ucode":"E87C268D761D64","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errHypG6kuO0YibnBulyljZ8P5Mtb9iaicVx2VoibKNjYKJfTw16QvmDMmKM5gLsEtno0xU2VnM2FUTzQ/132","comment_is_top":false,"comment_ctime":1662089975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662089975","product_id":100094401,"comment_content":"记录一下报错：<br>ReferenceError: module is not defined in ES module scope<br>找到package.json里的&quot;type&quot;: &quot;module&quot; 去掉","like_count":1},{"had_liked":false,"id":354103,"user_name":"金针菇饲养员","can_delete":false,"product_type":"c1","uid":2690187,"ip_address":"上海","ucode":"0688C0694C0049","user_header":"https://static001.geekbang.org/account/avatar/00/29/0c/8b/e967775c.jpg","comment_is_top":false,"comment_ctime":1660097950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660097950","product_id":100094401,"comment_content":"ReferenceError: module is not defined in ES module scope<br>","like_count":0},{"had_liked":false,"id":354102,"user_name":"金针菇饲养员","can_delete":false,"product_type":"c1","uid":2690187,"ip_address":"上海","ucode":"0688C0694C0049","user_header":"https://static001.geekbang.org/account/avatar/00/29/0c/8b/e967775c.jpg","comment_is_top":false,"comment_ctime":1660097919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660097919","product_id":100094401,"comment_content":"你们都按照老师代码敲了么，有发现这些报错么？<br>babel.config.js: Error while loading config - You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.","like_count":0},{"had_liked":false,"id":346365,"user_name":"宋玉","can_delete":false,"product_type":"c1","uid":1360487,"ip_address":"","ucode":"AB3FDA82929113","user_header":"https://static001.geekbang.org/account/avatar/00/14/c2/67/93b7c47e.jpg","comment_is_top":false,"comment_ctime":1653049546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653049546","product_id":100094401,"comment_content":"Also note that the APIs Jest uses to implement ESM support is still considered experimental by Node (as of version 14.13.1). node 版本需要 14.13.1 以上否则会报错","like_count":0},{"had_liked":false,"id":343696,"user_name":"云中歌","can_delete":false,"product_type":"c1","uid":1806446,"ip_address":"","ucode":"F2F0AED74159D2","user_header":"https://static001.geekbang.org/account/avatar/00/1b/90/6e/d729672d.jpg","comment_is_top":false,"comment_ctime":1650986081,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650986081","product_id":100094401,"comment_content":"能讲讲ui测试吗","like_count":0},{"had_liked":false,"id":332652,"user_name":"cweioo","can_delete":false,"product_type":"c1","uid":1087300,"ip_address":"","ucode":"E48D291E6C6993","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/44/52b5e2e2.jpg","comment_is_top":false,"comment_ctime":1643440411,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1643440411","product_id":100094401,"comment_content":"toBe not defined","like_count":0,"discussions":[{"author":{"id":2816633,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/fa/79/c5cfe88c.jpg","nickname":"淡若清风过","note":"","ucode":"A589310DD82EA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549129,"discussion_content":"听天书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643596764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330696,"user_name":"小甜酒","can_delete":false,"product_type":"c1","uid":2816637,"ip_address":"","ucode":"829497A22DFF9B","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fa/7d/6a5065e6.jpg","comment_is_top":false,"comment_ctime":1642123945,"is_pvip":false,"replies":[{"id":"120839","content":"报错信息方便发出来吗？node add.js应该不需要安装","user_name":"作者回复","comment_id":330696,"uid":"1003715","ip_address":"","utype":1,"ctime":1642338382,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1642123945","product_id":100094401,"comment_content":"<br>➜  ailemente git:(main) ✗ node add.js<br>测试数字相加 测试通过<br>这个运行报错是需要安装什么嘛","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546540,"discussion_content":"报错信息方便发出来吗？node add.js应该不需要安装","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642338382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330695,"user_name":"小甜酒","can_delete":false,"product_type":"c1","uid":2816637,"ip_address":"","ucode":"829497A22DFF9B","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fa/7d/6a5065e6.jpg","comment_is_top":false,"comment_ctime":1642123933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642123933","product_id":100094401,"comment_content":"<br>➜  ailemente git:(main) ✗ node add.js<br>测试数字相加 测试通过","like_count":0},{"had_liked":false,"id":329529,"user_name":"不负韶华","can_delete":false,"product_type":"c1","uid":1095513,"ip_address":"","ucode":"ED5A7A1C56E134","user_header":"https://static001.geekbang.org/account/avatar/00/10/b7/59/9a0cad96.jpg","comment_is_top":false,"comment_ctime":1641388857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641388857","product_id":100094401,"comment_content":"几乎不用单元测试，工作中不用","like_count":0},{"had_liked":false,"id":327034,"user_name":"下一个起跑点","can_delete":false,"product_type":"c1","uid":2817674,"ip_address":"","ucode":"5EDC478AE4CBA2","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fe/8a/8b5f5a66.jpg","comment_is_top":false,"comment_ctime":1639874635,"is_pvip":false,"replies":[{"id":"119285","content":"确实也是国内的很多项目现状，针对最核心的流程自己写一点把，也算是提升了","user_name":"作者回复","comment_id":327034,"uid":"1003715","ip_address":"","utype":1,"ctime":1640229600,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639874635","product_id":100094401,"comment_content":"还是那句话，等你写完单元测试，项目都上线了，测试还是留着空闲时再写吧","like_count":1,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541010,"discussion_content":"确实也是国内的很多项目现状，针对最核心的流程自己写一点把，也算是提升了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640229600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325540,"user_name":"于三妮","can_delete":false,"product_type":"c1","uid":2464787,"ip_address":"","ucode":"36884C1BE51F7A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7icj7X67vvABNjC284ichONicn6PFeZSUAdclWKr8FJIHfWUzx6azxPuDcCNODV8ZmqXMAUibvJZiaXsYxKCmtJfxkg/132","comment_is_top":false,"comment_ctime":1639018138,"is_pvip":false,"replies":[{"id":"118302","content":"可以尝试一下  新的开发模式 也可以提高代码质量","user_name":"作者回复","comment_id":325540,"uid":"1003715","ip_address":"","utype":1,"ctime":1639395146,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639018138","product_id":100094401,"comment_content":"直到现在还没用过自动化测试呢~~","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538282,"discussion_content":"可以尝试一下  新的开发模式 也可以提高代码质量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639395146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325331,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1239362,"ip_address":"","ucode":"1B5EF54A2A56F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/42/1de79e71.jpg","comment_is_top":false,"comment_ctime":1638926006,"is_pvip":false,"replies":[{"id":"118323","content":"赞","user_name":"作者回复","comment_id":325331,"uid":"1003715","ip_address":"","utype":1,"ctime":1639398070,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638926006","product_id":100094401,"comment_content":"传入的circle属性，生成.btn--circle的classname，实现圆角样式","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538310,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}