{"id":78633,"title":"28 | 案例篇：一个SQL查询要15秒，这是怎么回事？","content":"<p>你好，我是倪朋飞。</p><p>上一节，我们分析了一个单词热度应用响应过慢的案例。当用 top、iostat 分析了系统的 CPU 和磁盘 I/O 使用情况后，我们发现系统出现了磁盘的 I/O 瓶颈，而且正是案例应用导致的。</p><p>接着，在使用 strace 却没有任何发现后，我又给你介绍了两个新的工具 filetop 和 opensnoop，分析它们对系统调用 write() 和 open() 的追踪结果。</p><p>我们发现，案例应用正在读写大量的临时文件，因此产生了性能瓶颈。找出瓶颈后，我们又用把文件数据都放在内存的方法，解决了磁盘 I/O 的性能问题。</p><p>当然，你可能会说，在实际应用中，大量数据肯定是要存入数据库的，而不会直接用文本文件的方式存储。不过，数据库也不是万能的。当数据库出现性能问题时，又该如何分析和定位它的瓶颈呢？</p><p>今天我们就来一起分析一个数据库的案例。这是一个基于 Python Flask 的商品搜索应用，商品信息存在 MySQL 中。这个应用可以通过 MySQL 接口，根据客户端提供的商品名称，去数据库表中查询商品信息。</p><p>非常感谢唯品会资深运维工程师阳祥义，帮助提供了今天的案例。</p><h2>案例准备</h2><p>本次案例还是基于 Ubuntu 18.04，同样适用于其他的 Linux 系统。我使用的案例环境如下所示：</p><!-- [[[read_end]]] --><ul>\n<li>\n<p>机器配置：2 CPU，8GB 内存</p>\n</li>\n<li>\n<p>预先安装 docker、sysstat 、git、make 等工具，如 apt install <a href=\"http://docker.io\">docker.io</a> sysstat make git</p>\n</li>\n</ul><p>其中，docker 和 sysstat 已经用过很多次，这里不再赘述；git 用来拉取本次案例所需脚本，这些脚本存储在 Github 代码仓库中；最后的 make 则是一个常用构建工具，这里用来运行今天的案例。</p><p>案例总共由三个容器组成，包括一个 MySQL 数据库应用、一个商品搜索应用以及一个数据处理的应用。其中，商品搜索应用以 HTTP 的形式提供了一个接口：</p><ul>\n<li>\n<p>/：返回 Index Page；</p>\n</li>\n<li>\n<p>/db/insert/products/<num>：插入指定数量的商品信息；</num></p>\n</li>\n<li>\n<p>/products/<product>：查询指定商品的信息，并返回处理时间。</product></p>\n</li>\n</ul><p>由于应用比较多，为了方便你运行它们，我把它们同样打包成了几个 Docker 镜像，并推送到了 Github 上。这样，你只需要运行几条命令，就可以启动了。</p><p>今天的案例需要两台虚拟机，其中一台作为案例分析的目标机器，运行 Flask 应用，它的 IP 地址是 192.168.0.10；另一台则是作为客户端，请求单词的热度。我画了一张图表示它们的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/5d/8c954570f6e46193505c2598a06cbc5d.png?wh=970*525\" alt=\"\"></p><p>接下来，打开两个终端，分别 SSH 登录到这两台虚拟机中，并在第一台虚拟机中安装上述工具。</p><p>跟以前一样，案例中所有命令都默认以 root 用户运行，如果你是用普通用户身份登陆系统，请运行 sudo su root命令切换到 root 用户。</p><p>到这里，准备工作就完成了。接下来，我们正式进入操作环节。</p><h2>案例分析</h2><p>首先，我们在第一个终端中执行下面命令，拉取本次案例所需脚本：</p><pre><code>$ git clone https://github.com/feiskyer/linux-perf-examples\n$ cd linux-perf-examples/mysql-slow\n</code></pre><p>接着，执行下面的命令，运行本次的目标应用。正常情况下，你应该可以看到下面的输出：</p><pre><code># 注意下面的随机字符串是容器ID，每次运行均会不同，并且你不需要关注它，因为我们只会用到名字\n$ make run\ndocker run --name=mysql -itd -p 10000:80 -m 800m feisky/mysql:5.6\nWARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\n4156780da5be0b9026bcf27a3fa56abc15b8408e358fa327f472bcc5add4453f\ndocker run --name=dataservice -itd --privileged feisky/mysql-dataservice\nf724d0816d7e47c0b2b1ff701e9a39239cb9b5ce70f597764c793b68131122bb\ndocker run --name=app --network=container:mysql -itd feisky/mysql-slow\n81d3392ba25bb8436f6151662a13ff6182b6bc6f2a559fc2e9d873cd07224ab6\n</code></pre><p>然后，再运行 docker ps 命令，确认三个容器都处在运行（Up）状态：</p><pre><code>$ docker ps\nCONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                             NAMES\n9a4e3c580963        feisky/mysql-slow          &quot;python /app.py&quot;         42 seconds ago      Up 36 seconds                                         app\n2a47aab18082        feisky/mysql-dataservice   &quot;python /dataservice…&quot;   46 seconds ago      Up 41 seconds                                         dataservice\n4c3ff7b24748        feisky/mysql:5.6           &quot;docker-entrypoint.s…&quot;   47 seconds ago      Up 46 seconds       3306/tcp, 0.0.0.0:10000-&gt;80/tcp   mysql\n</code></pre><p>MySQL 数据库的启动过程，需要做一些初始化工作，这通常需要花费几分钟时间。你可以运行 docker logs 命令，查看它的启动过程。</p><p>当你看到下面这个输出时，说明 MySQL 初始化完成，可以接收外部请求了：</p><pre><code>$ docker logs -f mysql\n...\n... [Note] mysqld: ready for connections.\nVersion: '5.6.42-log'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server (GPL)\n</code></pre><p>而商品搜索应用则是在 10000 端口监听。你可以按 Ctrl+C ，停止 docker logs 命令；然后，执行下面的命令，确认它也已经正常运行。如果一切正常，你会看到 Index Page 的输出：</p><pre><code>$ curl http://127.0.0.1:10000/\nIndex Page\n</code></pre><p>接下来，运行 make init 命令，初始化数据库，并插入 10000 条商品信息。这个过程比较慢，比如在我的机器中，就花了十几分钟时间。耐心等待一段时间后，你会看到如下的输出：</p><pre><code>$ make init\ndocker exec -i mysql mysql -uroot -P3306 &lt; tables.sql\ncurl http://127.0.0.1:10000/db/insert/products/10000\ninsert 10000 lines\n</code></pre><p>接着，我们切换到第二个终端，访问一下商品搜索的接口，看看能不能找到想要的商品。执行如下的 curl 命令：</p><pre><code>$ curl http://192.168.0.10:10000/products/geektime\nGot data: () in 15.364538192749023 sec\n</code></pre><p>稍等一会儿，你会发现，这个接口返回的是空数据，而且处理时间超过15 秒。这么慢的响应速度让人无法忍受，到底出了什么问题呢？</p><p>既然今天用了 MySQL，你估计会猜到是慢查询的问题。</p><p>不过别急，在具体分析前，为了避免在分析过程中客户端的请求结束，我们把 curl 命令放到一个循环里执行。同时，为了避免给系统过大压力，我们设置在每次查询后，都先等待 5 秒，然后再开始新的请求。</p><p>所以，你可以在终端二中，继续执行下面的命令：</p><pre><code>$ while true; do curl http://192.168.0.10:10000/products/geektime; sleep 5; done\n</code></pre><p>接下来，重新回到终端一中，分析接口响应速度慢的原因。不过，重回终端一后，你会发现系统响应也明显变慢了，随便执行一个命令，都得停顿一会儿才能看到输出。</p><p>这跟上一节的现象很类似，看来，我们还是得观察一下系统的资源使用情况，比如CPU、内存和磁盘 I/O 等的情况。</p><p>首先，我们在终端一执行 top 命令，分析系统的 CPU 使用情况：</p><pre><code>$ top\ntop - 12:02:15 up 6 days,  8:05,  1 user,  load average: 0.66, 0.72, 0.59\nTasks: 137 total,   1 running,  81 sleeping,   0 stopped,   0 zombie\n%Cpu0  :  0.7 us,  1.3 sy,  0.0 ni, 35.9 id, 62.1 wa,  0.0 hi,  0.0 si,  0.0 st\n%Cpu1  :  0.3 us,  0.7 sy,  0.0 ni, 84.7 id, 14.3 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  8169300 total,  7238472 free,   546132 used,   384696 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  7316952 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n27458 999       20   0  833852  57968  13176 S   1.7  0.7   0:12.40 mysqld\n27617 root      20   0   24348   9216   4692 S   1.0  0.1   0:04.40 python\n 1549 root      20   0  236716  24568   9864 S   0.3  0.3  51:46.57 python3\n22421 root      20   0       0      0      0 I   0.3  0.0   0:01.16 kworker/u\n</code></pre><p>观察 top 的输出，我们发现，两个 CPU 的 iowait 都比较高，特别是 CPU0，iowait 已经超过 60%。而具体到各个进程， CPU 使用率并不高，最高的也只有 1.7%。</p><p>既然CPU的嫌疑不大，那问题应该还是出在了 I/O 上。我们仍然在第一个终端，按下 Ctrl+C，停止 top 命令；然后，执行下面的 iostat 命令，看看有没有 I/O 性能问题：</p><pre><code>$ iostat -d -x 1\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util\n...\nsda            273.00    0.00  32568.00      0.00     0.00     0.00   0.00   0.00    7.90    0.00   1.16   119.30     0.00   3.56  97.20\n</code></pre><p>iostat 的输出你应该非常熟悉。观察这个界面，我们发现，磁盘 sda 每秒的读数据为 32 MB， 而 I/O 使用率高达 97% ，接近饱和，这说明，磁盘 sda 的读取确实碰到了性能瓶颈。</p><p>那要怎么知道，这些 I/O请求到底是哪些进程导致的呢？当然可以找我们的老朋友， pidstat。接下来，在终端一中，按下 Ctrl+C 停止 iostat 命令，然后运行下面的 pidstat 命令，观察进程的 I/O 情况：</p><pre><code># -d选项表示展示进程的I/O情况\n$ pidstat -d 1\n12:04:11      UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command\n12:04:12      999     27458  32640.00      0.00      0.00       0  mysqld\n12:04:12        0     27617      4.00      4.00      0.00       3  python\n12:04:12        0     27864      0.00      4.00      0.00       0  systemd-journal\n</code></pre><p>从 pidstat 的输出可以看到，PID 为 27458 的 mysqld 进程正在进行大量的读，而且读取速度是 32 MB/s，跟刚才 iostat 的发现一致。两个结果一对比，我们自然就找到了磁盘 I/O 瓶颈的根源，即 mysqld 进程。</p><p>不过，这事儿还没完。我们自然要怀疑一下，为什么 mysqld 会去读取大量的磁盘数据呢？按照前面猜测，我们提到过，这有可能是个慢查询问题。</p><p>可是，回想一下，慢查询的现象大多是 CPU 使用率高（比如 100% ），但这里看到的却是 I/O 问题。看来，这并不是一个单纯的慢查询问题，我们有必要分析一下 MySQL 读取的数据。</p><p>要分析进程的数据读取，当然还要靠上一节用到过的 strace+ lsof 组合。</p><p>接下来，还是在终端一中，执行 strace 命令，并且指定 mysqld 的进程号 27458。我们知道，MySQL 是一个多线程的数据库应用，为了不漏掉这些线程的数据读取情况，你要记得在执行 stace 命令时，加上 -f 参数：</p><pre><code>$ strace -f -p 27458\n[pid 28014] read(38, &quot;934EiwT363aak7VtqF1mHGa4LL4Dhbks&quot;..., 131072) = 131072\n[pid 28014] read(38, &quot;hSs7KBDepBqA6m4ce6i6iUfFTeG9Ot9z&quot;..., 20480) = 20480\n[pid 28014] read(38, &quot;NRhRjCSsLLBjTfdqiBRLvN9K6FRfqqLm&quot;..., 131072) = 131072\n[pid 28014] read(38, &quot;AKgsik4BilLb7y6OkwQUjjqGeCTQTaRl&quot;..., 24576) = 24576\n[pid 28014] read(38, &quot;hFMHx7FzUSqfFI22fQxWCpSnDmRjamaW&quot;..., 131072) = 131072\n[pid 28014] read(38, &quot;ajUzLmKqivcDJSkiw7QWf2ETLgvQIpfC&quot;..., 20480) = 20480\n</code></pre><p>观察一会，你会发现，线程 28014 正在读取大量数据，且读取文件的描述符编号为 38。这儿的 38 又对应着哪个文件呢？我们可以执行下面的 lsof 命令，并且指定线程号 28014 ，具体查看这个可疑线程和可疑文件：</p><pre><code>$ lsof -p 28014\n</code></pre><p>奇怪的是，lsof 并没有给出任何输出。实际上，如果你查看 lsof 命令的返回值，就会发现，这个命令的执行失败了。</p><p>我们知道，在 SHELL 中，特殊标量 $? 表示上一条命令退出时的返回值。查看这个特殊标量，你会发现它的返回值是1。可是别忘了，在 Linux 中，返回值为 0 ，才表示命令执行成功。返回值为1，显然表明执行失败。</p><pre><code>$ echo $?\n1\n</code></pre><p>为什么 lsof 命令执行失败了呢？这里希望你暂停往下，自己先思考一下原因。记住我的那句话，遇到现象解释不了，先去查查工具文档。</p><p>事实上，通过查询 lsof 的文档，你会发现，-p 参数需要指定进程号，而我们刚才传入的是线程号，所以 lsof 失败了。你看，任何一个细节都可能成为性能分析的“拦路虎”。</p><p>回过头我们看，mysqld 的进程号是 27458，而 28014 只是它的一个线程。而且，如果你观察 一下mysqld 进程的线程，你会发现，mysqld 其实还有很多正在运行的其他线程：</p><pre><code># -t表示显示线程，-a表示显示命令行参数\n$ pstree -t -a -p 27458\nmysqld,27458 --log_bin=on --sync_binlog=1\n...\n  ├─{mysqld},27922\n  ├─{mysqld},27923\n  └─{mysqld},28014\n</code></pre><p>找到了原因，lsof的问题就容易解决了。把线程号换成进程号，继续执行 lsof 命令：</p><pre><code>$ lsof -p 27458\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\n...\n​mysqld  27458      999   38u   REG    8,1 512440000 2601895 /var/lib/mysql/test/products.MYD\n</code></pre><p>这次我们得到了lsof的输出。从输出中可以看到， mysqld 进程确实打开了大量文件，而根据文件描述符（FD）的编号，我们知道，描述符为 38 的是一个路径为 /var/lib/mysql/test/products.MYD 的文件。这里注意， 38 后面的 u 表示， mysqld 以读写的方式访问文件。</p><p>看到这个文件，熟悉 MySQL 的你可能笑了：</p><ul>\n<li>\n<p>MYD 文件，是 MyISAM 引擎用来存储表数据的文件；</p>\n</li>\n<li>\n<p>文件名就是数据表的名字；</p>\n</li>\n<li>\n<p>而这个文件的父目录，也就是数据库的名字。</p>\n</li>\n</ul><p>换句话说，这个文件告诉我们，mysqld 在读取数据库 test 中的 products 表。</p><p>实际上，你可以执行下面的命令，查看 mysqld 在管理数据库 test 时的存储文件。不过要注意，由于 MySQL 运行在容器中，你需要通过 docker exec 到容器中查看：</p><pre><code>$ docker exec -it mysql ls /var/lib/mysql/test/\ndb.opt    products.MYD  products.MYI  products.frm\n</code></pre><p>从这里你可以发现，/var/lib/mysql/test/ 目录中有四个文件，每个文件的作用分别是：</p><ul>\n<li>\n<p>MYD 文件用来存储表的数据；</p>\n</li>\n<li>\n<p>MYI 文件用来存储表的索引；</p>\n</li>\n<li>\n<p>frm 文件用来存储表的元信息（比如表结构）；</p>\n</li>\n<li>\n<p>opt 文件则用来存储数据库的元信息（比如字符集、字符校验规则等）。</p>\n</li>\n</ul><p>当然，看到这些，你可能还有一个疑问，那就是，这些文件到底是不是 mysqld 正在使用的数据库文件呢？有没有可能是不再使用的旧数据呢？其实，这个很容易确认，查一下 mysqld 配置的数据路径即可。</p><p>你可以在终端一中，继续执行下面的命令：</p><pre><code>$ docker exec -i -t mysql mysql -e 'show global variables like &quot;%datadir%&quot;;'\n+---------------+-----------------+\n| Variable_name | Value           |\n+---------------+-----------------+\n| datadir       | /var/lib/mysql/ |\n+---------------+-----------------+\n</code></pre><p>这里可以看到，/var/lib/mysql/ 确实是 mysqld 正在使用的数据存储目录。刚才分析得出的数据库 test 和数据表 products ，都是正在使用。</p><blockquote>\n<p>注：其实 lsof 的结果已经可以确认，它们都是 mysqld 正在访问的文件。再查询 datadir ，只是想换一个思路，进一步确认一下。</p>\n</blockquote><p>既然已经找出了数据库和表，接下来要做的，就是弄清楚数据库中正在执行什么样的 SQL 了。我们继续在终端一中，运行下面的 docker exec 命令，进入 MySQL 的命令行界面：</p><pre><code>$ docker exec -i -t mysql mysql\n...\n​\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n​\nmysql&gt;\n</code></pre><p>下一步你应该可以想到，那就是在 MySQL 命令行界面中，执行 show processlist 命令，来查看当前正在执行的 SQL 语句。</p><p>不过，为了保证 SQL 语句不截断，这里我们可以执行 show full processlist 命令。如果一切正常，你应该可以看到如下输出：</p><pre><code>mysql&gt; show full processlist;\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n| Id | User | Host            | db   | Command | Time | State        | Info                                                |\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n| 27 | root | localhost       | test | Query   |    0 | init         | show full processlist                               |\n| 28 | root | 127.0.0.1:42262 | test | Query   |    1 | Sending data | select * from products where productName='geektime' |\n+----+------+-----------------+------+---------+------+--------------+-----------------------------------------------------+\n2 rows in set (0.00 sec)\n</code></pre><p>这个输出中，</p><ul>\n<li>\n<p>db 表示数据库的名字；</p>\n</li>\n<li>\n<p>Command 表示 SQL 类型；</p>\n</li>\n<li>\n<p>Time 表示执行时间；</p>\n</li>\n<li>\n<p>State 表示状态；</p>\n</li>\n<li>\n<p>而 Info 则包含了完整的 SQL 语句。</p>\n</li>\n</ul><p>多执行几次 show full processlist 命令，你可看到 select * from products where productName=‘geektime’ 这条 SQL 语句的执行时间比较长。</p><p>再回忆一下，案例开始时，我们在终端二查询的产品名称 <a href=\"http://192.168.0.10:10000/products/geektime\">http://192.168.0.10:10000/products/geektime</a>，其中的 geektime 也符合这条查询语句的条件。</p><p>我们知道，MySQL 的慢查询问题，很可能是没有利用好索引导致的，那这条查询语句是不是这样呢？我们又该怎么确认，查询语句是否利用了索引呢？</p><p>其实，MySQL 内置的 explain 命令，就可以帮你解决这个问题。继续在 MySQL 终端中，运行下面的 explain 命令：</p><pre><code># 切换到test库\nmysql&gt; use test;\n# 执行explain命令\nmysql&gt; explain select * from products where productName='geektime';\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows  | Extra       |\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n|  1 | SIMPLE      | products | ALL  | NULL          | NULL | NULL    | NULL | 10000 | Using where |\n+----+-------------+----------+------+---------------+------+---------+------+-------+-------------+\n1 row in set (0.00 sec)\n</code></pre><p>观察这次的输出。这个界面中，有几个比较重要的字段需要你注意，我就以这个输出为例，分别解释一下：</p><ul>\n<li>\n<p>select_type 表示查询类型，而这里的SIMPLE 表示此查询不包括 UNION 查询或者子查询；</p>\n</li>\n<li>\n<p>table 表示数据表的名字，这里是 products；</p>\n</li>\n<li>\n<p>type 表示查询类型，这里的 ALL 表示全表查询，但索引查询应该是 index 类型才对；</p>\n</li>\n<li>\n<p>possible_keys 表示可能选用的索引，这里是 NULL；</p>\n</li>\n<li>\n<p>key 表示确切会使用的索引，这里也是 NULL；</p>\n</li>\n<li>\n<p>rows 表示查询扫描的行数，这里是 10000。</p>\n</li>\n</ul><p>根据这些信息，我们可以确定，这条查询语句压根儿没有使用索引，所以查询时，会扫描全表，并且扫描行数高达 10000 行。响应速度那么慢也就难怪了。</p><p>走到这一步，你应该很容易想到优化方法，没有索引那我们就自己建立，给 productName 建立索引就可以了。不过，增加索引前，你需要先弄清楚，这个表结构到底长什么样儿。</p><p>执行下面的 MySQL 命令，查询 products 表的结构，你会看到，它只有一个 id 主键，并不包括 productName 的索引：</p><pre><code>mysql&gt; show create table products;\n...\n| products | CREATE TABLE `products` (\n  `id` int(11) NOT NULL,\n  `productCode` text NOT NULL COMMENT '产品代码',\n  `productName` text NOT NULL COMMENT '产品名称',\n...\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC |\n...\n</code></pre><p>接下来，我们就可以给 productName 建立索引了，也就是执行下面的 CREATE INDEX 命令：</p><pre><code>mysql&gt; CREATE INDEX products_index ON products (productName);\nERROR 1170 (42000): BLOB/TEXT column 'productName' used in key specification without a key length\n</code></pre><p>不过，醒目的ERROR告诉我们，这条命令运行失败了。根据错误信息，productName 是一个 BLOB/TEXT 类型，需要设置一个长度。所以，想要创建索引，就必须为 productName 指定一个前缀长度。</p><p>那前缀长度设置为多大比较合适呢？这里其实有专门的算法，即通过计算前缀长度的选择性，来确定索引的长度。不过，我们可以稍微简化一下，直接使用一个固定数值（比如 64），执行下面的命令创建索引：</p><pre><code>mysql&gt; CREATE INDEX products_index ON products (productName(64));\nQuery OK, 10000 rows affected (14.45 sec)\nRecords: 10000  Duplicates: 0  Warnings: 0\n</code></pre><p>现在可以看到，索引已经建好了。能做的都做完了，最后就该检查一下，性能问题是否已经解决了。</p><p>我们切换到终端二中，查看还在执行的 curl 命令的结果：</p><pre><code>Got data: ()in 15.383180141448975 sec\nGot data: ()in 15.384996891021729 sec\nGot data: ()in 0.0021054744720458984 sec\nGot data: ()in 0.003951072692871094 sec\n</code></pre><p>显然，查询时间已经从 15 秒缩短到了 3 毫秒。看来，没有索引果然就是这次性能问题的罪魁祸首，解决了索引，就解决了查询慢的问题。</p><h2>案例思考</h2><p>到这里，商品搜索应用查询慢的问题已经完美解决了。但是，对于这个案例，我还有一点想说明一下。</p><p>不知道你还记不记得，案例开始时，我们启动的几个容器应用。除了 MySQL 和商品搜索应用外，还有一个 DataService 应用。为什么这个案例开始时，要运行一个看起来毫不相关的应用呢？</p><p>实际上，DataService 是一个严重影响 MySQL 性能的干扰应用。抛开上述索引优化方法不说，这个案例还有一种优化方法，也就是停止 DataService 应用。</p><p>接下来，我们就删除数据库索引，回到原来的状态；然后停止 DataService 应用，看看优化效果如何。</p><p>首先，我们在终端二中停止 curl 命令，然后回到终端一中，执行下面的命令删除索引：</p><pre><code># 删除索引\n$ docker exec -i -t mysql mysql\n​\nmysql&gt; use test;\nmysql&gt; DROP INDEX products_index ON products;\n</code></pre><p>接着，在终端二中重新运行 curl 命令。当然，这次你会发现，处理时间又变慢了：</p><pre><code>$ while true; do curl http://192.168.0.10:10000/products/geektime; sleep 5; done\nGot data: ()in 16.884345054626465 sec\n</code></pre><p>接下来，再次回到终端一中，执行下面的命令，停止 DataService 应用：</p><pre><code># 停止 DataService 应用\n$ docker rm -f dataservice\n</code></pre><p>最后，我们回到终端二中，观察 curl 的结果：</p><pre><code>Got data: ()in 16.884345054626465 sec\nGot data: ()in 15.238174200057983 sec\nGot data: ()in 0.12604427337646484 sec\nGot data: ()in 0.1101069450378418 sec\nGot data: ()in 0.11235237121582031 sec\n</code></pre><p>果然，停止 DataService 后，处理时间从 15 秒缩短到了 0.1 秒，虽然比不上增加索引后的 3 毫秒，但相对于 15 秒来说，优化效果还是非常明显的。</p><p>那么，这种情况下，还有没有 I/O 瓶颈了呢？</p><p>我们切换到终端一中，运行下面的 vmstat 命令（注意不是 iostat，稍后解释原因），观察 I/O 的变化情况：</p><pre><code>$ vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  1      0 6809304   1368 856744    0    0 32640     0   52  478  1  0 50 49  0\n 0  1      0 6776620   1368 889456    0    0 32640     0   33  490  0  0 50 49  0\n 0  0      0 6747540   1368 918576    0    0 29056     0   42  568  0  0 56 44  0\n 0  0      0 6747540   1368 918576    0    0     0     0   40  141  1  0 100  0  0\n 0  0      0 6747160   1368 918576    0    0     0     0   40  148  0  1 99  0  0\n</code></pre><p>你可以看到，磁盘读（bi）和 iowait（wa）刚开始还是挺大的，但没过多久，就都变成了 0 。换句话说，I/O 瓶颈消失了。</p><p>这是为什么呢？原因先留个悬念，作为今天的思考题。</p><p>回过头来解释一下刚刚的操作，在查看 I/O 情况时，我并没用 iostat 命令，而是用了 vmstat。其实，相对于 iostat 来说，vmstat 可以同时提供 CPU、内存和 I/O 的使用情况。</p><p>在性能分析过程中，能够综合多个指标，并结合系统的工作原理进行分析，对解释性能现象通常会有意想不到的帮助。</p><h2>小结</h2><p>今天我们分析了一个商品搜索的应用程序。我们先是通过 top、iostat 分析了系统的 CPU 和磁盘使用情况，发现了磁盘的 I/O 瓶颈。</p><p>接着，我们借助 pidstat ，发现瓶颈是 mysqld 导致的。紧接着，我们又通过 strace、lsof，找出了 mysqld 正在读的文件。同时，根据文件的名字和路径，我们找出了 mysqld 正在操作的数据库和数据表。综合这些信息，我们判断，这是一个没有利用索引导致的慢查询问题。</p><p>于是，我们登录到 MySQL 命令行终端，用数据库分析工具进行验证，发现 MySQL 查询语句访问的字段，果然没有索引。所以，增加索引，就可以解决案例的性能问题了。</p><h2>思考</h2><p>最后，给你留一个思考题，也是我在案例最后部分提到过的，停止 DataService 后，商品搜索应用的处理时间，从 15 秒缩短到了 0.1 秒。这是为什么呢？</p><p>我给个小小的提示。你可以先查看 <a href=\"http://dataservice.py\">dataservice.py</a> 的<a href=\"https://github.com/feiskyer/linux-perf-examples/blob/master/mysql-slow/dataservice.py\">源码</a>，你会发现，DataService 实际上是在读写一个仅包括 “data” 字符串的小文件。不过在读取文件前，它会先把 /proc/sys/vm/drop_caches 改成 1。</p><p>还记得这个操作有什么作用吗？如果不记得，可以用 man 查询 proc 文件系统的文档。</p><p>欢迎在留言区和我讨论，也欢迎把这篇文章分享给你的同事、朋友。我们一起在实战中演练，在交流中进步。</p><p></p>","comments":[{"had_liked":false,"id":62887,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1548202814,"is_pvip":false,"replies":[{"id":"22341","content":"赞，正解","user_name":"作者回复","comment_id":62887,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252127,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"426749965118","product_id":100020901,"comment_content":"打卡day29<br>echo 1&gt;&#47;proc&#47;sys&#47;vm&#47;drop_caches表示释放pagecache，也就是文件缓存，而mysql读书的数据就是文件缓存，dataservice不停的释放文件缓存，就导致MySQL都无法利用磁盘缓存，也就慢了～","like_count":100,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437385,"discussion_content":"赞，正解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548252127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284474,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/7a/558666a5.jpg","nickname":"AceslupK","note":"","ucode":"048F84D019CBBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392143,"discussion_content":"可有定位到DataService应用的痕迹？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630854746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66093,"user_name":"大坏狐狸","can_delete":false,"product_type":"c1","uid":1325678,"ip_address":"","ucode":"5044F89A505C5B","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/6e/e39e90ca.jpg","comment_is_top":false,"comment_ctime":1549876237,"is_pvip":false,"replies":[{"id":"23699","content":"赞，谢谢分享详细的前缀选择算法","user_name":"作者回复","comment_id":66093,"uid":"1001282","ip_address":"","utype":1,"ctime":1550067893,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"190528437261","product_id":100020901,"comment_content":"这个地方因为之前了解过，所以来打个卡，这个算法在高性能mysql里有介绍，叫最优前缀.<br>有时候需要索引很长的字符列，这会让索引变得大且慢。通常可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但这样也会降低索引的选择性。索引的选择性是指不重复的索引值（也称为基数，cardinality)和数据表的记录总数的比值，范围从1&#47;#T到1之间。索引的选择性越高则查询效率越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的行。唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br><br>一般情况下某个前缀的选择性也是足够高的，足以满足查询性能。对于BLOB，TEXT，或者很长的VARCHAR类型的列，必须使用前缀索引，因为MySQL不允许索引这些列的完整长度。<br><br>诀窍在于要选择足够长的前缀以保证较高的选择性，同时又不能太长（以便节约空间）。前缀应该足够长，以使得前缀索引的选择性接近于索引的整个列。换句话说，前缀的”基数“应该接近于完整的列的”基数“。<br>select count(distinct city)&#47;count(*) from city_demo; 根据这个算出一个比例，然后 count(distinct left(city,3)) 把这个3逐渐的加大，一直到算出来的数值接近上面的比例，这样算出来的前缀索引是性能最好的。<br>","like_count":45,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438701,"discussion_content":"赞，谢谢分享详细的前缀选择算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550067893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126072,"user_name":"王星旗","can_delete":false,"product_type":"c1","uid":1026042,"ip_address":"","ucode":"F1C742527D3A05","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/fa/1dca9fd5.jpg","comment_is_top":false,"comment_ctime":1566305931,"is_pvip":false,"replies":[{"id":"47213","content":"执行命令也需要IO操作（比如读目录找到binary，加载命令和依赖的库等等）","user_name":"作者回复","comment_id":126072,"uid":"1001282","ip_address":"","utype":1,"ctime":1566743989,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"108940488331","product_id":100020901,"comment_content":"老师，请教一个问题啊，既然只是iowait占比高，cpu占比不高，为什么执行其它命令会感觉卡呢？在等待io的时候，CPU不应该去执行其它进程吗？","like_count":26,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463814,"discussion_content":"执行命令也需要IO操作（比如读目录找到binary，加载命令和依赖的库等等）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566743989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83033,"user_name":"rm -rf 😊ི","can_delete":false,"product_type":"c1","uid":1070908,"ip_address":"","ucode":"BC448EC4206D95","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/3c/081b89ec.jpg","comment_is_top":false,"comment_ctime":1554378503,"is_pvip":false,"replies":[{"id":"30190","content":"数据库的缓存还要看选择了存储引擎，MyISAM不会缓存数据","user_name":"作者回复","comment_id":83033,"uid":"1001282","ip_address":"","utype":1,"ctime":1554639075,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"83158757127","product_id":100020901,"comment_content":"有个疑问，老师之前不是说过数据库有自己一套缓存机制吗？为何删除cached也会影响到mysql的读写呢","like_count":20,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445825,"discussion_content":"数据库的缓存还要看选择了存储引擎，MyISAM不会缓存数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554639075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317981,"discussion_content":"就算是innodb, 不命中索引, 在myql数据表多数据记录大的情况下, 也不会将整个表缓存进buffer, 还是有可能会产生随机io, 也会巨慢..","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603625613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63310,"user_name":"某、人","can_delete":false,"product_type":"c1","uid":1308784,"ip_address":"","ucode":"ADB42AA12A11C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","comment_is_top":false,"comment_ctime":1548320239,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"65972829679","product_id":100020901,"comment_content":"非常赞，这篇案例很好的展示了怎么从操作系统层面去排查慢查询的问题","like_count":15,"discussions":[{"author":{"id":2265187,"avatar":"","nickname":"上善若水","note":"","ucode":"219C6C9B75054A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322260,"discussion_content":"直接看代码岂不是很快就发现没用索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604714959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2131606,"avatar":"","nickname":"Geek_da4cfb","note":"","ucode":"DB59B24A249713","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310235,"discussion_content":"从MySQL过来的大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601701502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202159,"user_name":"斑马Z","can_delete":false,"product_type":"c1","uid":1500262,"ip_address":"","ucode":"ABB55B4652452F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0K9AM6xxDzVV6pF66jyus5NuuxZzT9icad8AQDMKibwUOy3UnoZIZdyKIKd9sA06rgFnIWwiakSeOQ/132","comment_is_top":false,"comment_ctime":1585912442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40240618106","product_id":100020901,"comment_content":"<br>我的机器本身配置较高，所以我没有设置间隔时间，一直执行。然后回到第一台机器上，先看top，发现 wa指标较高，然后用iostat  -c -d 1 ，发现整体  kB_read&#47;s  达到114696.00，判定是i&#47;o问题，但是在top中看不到使用cpu或者内存特别异常的（因为我的机器起了k8s等大型集群，）之后用iotop，直接发现元凶，<br><br>  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND                                                                                     <br>29919 be&#47;4 systemd-  114.29 M&#47;s    0.00 B&#47;s  0.00 % 99.11 % mysqld --log_bin=on --sync_binlog=1<br><br><br>然后 ps -ef|grep 29919 但是没有结果，怀疑是线程，就加 -T 参数最终找到 30814 这个进程<br><br>systemd+ 30814 29919 30797  3 18:05 ?        00:01:20 mysqld --log_bin=on --sync_binlog=1<br><br><br>结合上节课strace -fp  29919 ，发现该线程打开了很多 描述符为37的文件，<br><br><br>[pid 29919] read(37, &quot;LJYd0fil50ofyzdh1xgRyX8oW4QLmuik&quot;..., 20480) = 20480<br>[pid 29919] read(37, &quot;qA790gsUl1tylT15F3AuoNocQCnO40dm&quot;..., 131072) = 131072<br>[pid 29919] read(37, &quot;7nBGWv04k7dw0p3bhUFvFXCXqiMAEOa8&quot;..., 24576) = 24576<br> pidstat -r -p 30814 查看指标发现没啥异常。（有点郁闷），继续用lsof -p 30814 查看，<br><br>mysqld  30814 systemd-bus-proxy   37u   REG  253,1 512440000   502137 &#47;var&#47;lib&#47;mysql&#47;test&#47;products.MYD<br><br>看到这里找到文件，但能力不够无法继续分析，自己mysql也薄弱的很（手动狗头），查看课程，老师这么讲解<br><br><br>MYD 文件，是 MyISAM 引擎用来存储表数据的文件；文件名就是数据表的名字；而这个文件的父目录，也就是数据库的名字。<br>&#47;var&#47;lib&#47;mysql&#47;test&#47; 目录中有四个文件，每个文件的作用分别是：MYD 文件用来存储表的数据；MYI 文件用来存储表的索引；frm 文件用来存储表的元信息（比如表结构）；opt 文件则用来存储数据库的元信息（比如字符集、字符校验规则等）。<br><br><br>","like_count":8},{"had_liked":false,"id":63465,"user_name":"guoew","can_delete":false,"product_type":"c1","uid":1299148,"ip_address":"","ucode":"12EA3A8523921A","user_header":"https://static001.geekbang.org/account/avatar/00/13/d2/cc/d54b7e5b.jpg","comment_is_top":false,"comment_ctime":1548379978,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23023216458","product_id":100020901,"comment_content":"以前遇到数据库慢的问题都是直接进数据库show processlist ，没有一个循序渐进的过程。感谢老师","like_count":5,"discussions":[{"author":{"id":1349476,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/64/0b40f4d7.jpg","nickname":"皓皓","note":"","ucode":"41414708C8126A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309752,"discussion_content":"还是得直接先解决，等你循序渐进 库都被打挂了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601431931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1299148,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/cc/d54b7e5b.jpg","nickname":"guoew","note":"","ucode":"12EA3A8523921A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1349476,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/64/0b40f4d7.jpg","nickname":"皓皓","note":"","ucode":"41414708C8126A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327755,"discussion_content":"哈哈哈，有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605937524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309752,"ip_address":""},"score":327755,"extra":""}]},{"author":{"id":1349476,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/64/0b40f4d7.jpg","nickname":"皓皓","note":"","ucode":"41414708C8126A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309753,"discussion_content":"哈哈哈。。先解决 再查原因","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601431967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325101,"avatar":"https://static001.geekbang.org/account/avatar/00/14/38/2d/9c971119.jpg","nickname":"若丶相依","note":"","ucode":"6482339C859C40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327384,"discussion_content":"top看个大概，之后进数据库直接找慢查询sql，优化或者干死，在之后观察系统状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605816553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63040,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1548234615,"is_pvip":false,"replies":[{"id":"22347","content":"不用考虑那么多，我觉得打好基础，持续提升自身的能力，开放的心态接收新东西，工作不会那么容易丢的（即使丢了也很容易找到新的）","user_name":"作者回复","comment_id":63040,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252839,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"18728103799","product_id":100020901,"comment_content":"老师，问3个很重要的题外问题：<br>1. 大专学历，想直接自学考本科或研究生，自考学历中大型公司承认的吗？<br>2. 大公司对年龄有限制的吗？<br>3. 30多岁，运维（编程自学java一年，没项目经验），只有几年小公司运维经验，技术一般，发展方向是什么？很多IT公司好像都不要年龄大点的~~人生80，那不是40岁就没得工作了？","like_count":5,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437449,"discussion_content":"不用考虑那么多，我觉得打好基础，持续提升自身的能力，开放的心态接收新东西，工作不会那么容易丢的（即使丢了也很容易找到新的）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2321649,"avatar":"","nickname":"Geek_76c30e","note":"","ucode":"EFA86960BDCB95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330253,"discussion_content":"同为30的运维，加油吧。。时刻保持学习的动力，不会被淘汰的。后面老龄化币种会越来越大，一直学习在后面也会有更多准备。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606550355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1588770,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3e/22/f91219a8.jpg","nickname":"wanlinwang","note":"","ucode":"C74C3CF0B5BF64","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5448,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63016,"user_name":"李逍遥","can_delete":false,"product_type":"c1","uid":1109750,"ip_address":"","ucode":"DB74823527E203","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xzHDjCSFicNY3MUMECtNz6sM8yDJhBoyGk5IRoOtUat6ZIkGzxjqEqwqKYWMD3GjehScKvMjicGOGDog5FF18oyg/132","comment_is_top":false,"comment_ctime":1548228409,"is_pvip":false,"replies":[{"id":"22344","content":"嗯嗯，慢查询推荐总是开启","user_name":"作者回复","comment_id":63016,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252416,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"18728097593","product_id":100020901,"comment_content":"mysql打开慢查询日志，排查SQL性能问题更方便","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437439,"discussion_content":"嗯嗯，慢查询推荐总是开启","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258454,"user_name":"亥时","can_delete":false,"product_type":"c1","uid":1001264,"ip_address":"","ucode":"8E8228C68C7CD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYNOibHwHbO2QC0fRUQ69LYgNCxb0kOfhPEUuAiaGDiaq16N2Jmab9RH0noF4W5JTVNbiag/132","comment_is_top":false,"comment_ctime":1604451627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10194386219","product_id":100020901,"comment_content":" 在不知道别人代码改了啥的情况下  这种针对linux 逐一排查定位的能力真的很重要","like_count":3},{"had_liked":false,"id":63768,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1548493600,"is_pvip":false,"replies":[{"id":"22594","content":"是的，利用缓存后性能会更好","user_name":"作者回复","comment_id":63768,"uid":"1001282","ip_address":"","utype":1,"ctime":1548577172,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10138428192","product_id":100020901,"comment_content":"即停止DataService ，又增加索3引是不是性能会更好？","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437713,"discussion_content":"是的，利用缓存后性能会更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548577172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276568,"user_name":"fantastic_show","can_delete":false,"product_type":"c1","uid":2060088,"ip_address":"","ucode":"D2738135D086E4","user_header":"","comment_is_top":false,"comment_ctime":1612008543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906975839","product_id":100020901,"comment_content":"课后题：MySQL会缓存查询过的数据，刚开始要从磁盘读取，后续的查询就直接从内存获取了","like_count":2},{"had_liked":false,"id":134896,"user_name":"辉晖","can_delete":false,"product_type":"c1","uid":1574062,"ip_address":"","ucode":"E5EC033EE4952B","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/ae/0118c132.jpg","comment_is_top":false,"comment_ctime":1568947953,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5863915249","product_id":100020901,"comment_content":"mysql进程每秒写入8M&#47;S，until接近100%，iowait有40%。可是反复运行show full processlist;一直查不到耗时长（除了Sleep）的语句，要怎么排查？","like_count":1,"discussions":[{"author":{"id":1443017,"avatar":"https://static001.geekbang.org/account/avatar/00/16/04/c9/ef585c96.jpg","nickname":"碌舰虾","note":"","ucode":"B947C229E767D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569575,"discussion_content":"抓包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651487689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109527,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/17/32183260.jpg","nickname":"逍遥魔君","note":"","ucode":"6EDD906634D7CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224510,"discussion_content":"perf工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586312390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62935,"user_name":"nemo","can_delete":false,"product_type":"c1","uid":1148570,"ip_address":"","ucode":"5E6926A3404A6F","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/9a/4231fb93.jpg","comment_is_top":false,"comment_ctime":1548209672,"is_pvip":false,"replies":[{"id":"22576","content":"检查下磁盘是否有硬件错误，比如使用 smartctl","user_name":"作者回复","comment_id":62935,"uid":"1001282","ip_address":"","utype":1,"ctime":1548575747,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"5843176968","product_id":100020901,"comment_content":"Device:         rrqm&#47;s   wrqm&#47;s     r&#47;s     w&#47;s    rMB&#47;s    wMB&#47;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util<br>sda               0.00   160.00    0.00  618.00     0.00    12.86    42.60   144.44  224.37    0.00  224.37   1.62 100.00<br>dm-3              0.00     0.00    0.00    5.00     0.00     0.04    16.20     1.08  216.40    0.00  216.40  69.00  34.50<br>dm-5              0.00     0.00    0.00  761.00     0.00    11.83    31.84   203.54  283.46    0.00  283.46   1.31 100.00<br><br>Device:         rrqm&#47;s   wrqm&#47;s     r&#47;s     w&#47;s    rMB&#47;s    wMB&#47;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util<br>sda               0.00   220.00    0.00  483.00     0.00    11.23    47.64   143.94  214.15    0.00  214.15   2.07 100.00<br>dm-5              0.00     0.00    0.00  700.00     0.00    10.83    31.69   191.09  212.01    0.00  212.01   1.43 100.00<br><br>Device:         rrqm&#47;s   wrqm&#47;s     r&#47;s     w&#47;s    rMB&#47;s    wMB&#47;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util<br>sda               0.00   264.00    0.00  493.00     0.00    10.71    44.49   142.95  304.66    0.00  304.66   2.03 100.00<br>dm-5              0.00     0.00    0.00  776.00     0.00    12.11    31.97   193.24  244.70    0.00  244.70   1.29 100.00<br><br>Device:         rrqm&#47;s   wrqm&#47;s     r&#47;s     w&#47;s    rMB&#47;s    wMB&#47;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util<br>sda               0.00   249.00    0.00  287.00     0.00     7.54    53.77   144.36  434.90    0.00  434.90   3.48 100.00<br>dm-5              0.00     0.00    0.00  537.00     0.00     8.37    31.91   232.41  329.02    0.00  329.02   1.86 100.00<br>请问下老师,这个万转sas磁盘在写不到10MB的情况下,为什么磁盘使用率100%,等待时间也特别长?","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437411,"discussion_content":"检查下磁盘是否有硬件错误，比如使用 smartctl","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548575747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024805,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/25/5da16c25.jpg","nickname":"coyang","note":"","ucode":"563687E0F6A441","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194811,"discussion_content":"还有另外一种可能是磁盘的读写cache被关掉了，用 hdparm 或者 sginfo 看一下 😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583243410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352834,"user_name":"一省吾身","can_delete":false,"product_type":"c1","uid":1676631,"ip_address":"","ucode":"D902357160BBD9","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","comment_is_top":false,"comment_ctime":1658976221,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1658976221","product_id":100020901,"comment_content":"man proc查了下:<br>To free pagecache, use echo 1 &gt; &#47;proc&#47;sys&#47;vm&#47;drop_caches; to free dentries and inodes, use echo 2 &gt; &#47;proc&#47;sys&#47;vm&#47;drop_caches;  to  free  pagecache,  dentries  and  inodes,  use  echo  3  &gt;<br>              &#47;proc&#47;sys&#47;vm&#47;drop_caches.<br><br>","like_count":0},{"had_liked":false,"id":347249,"user_name":"Geek_36a5ef","can_delete":false,"product_type":"c1","uid":2949005,"ip_address":"","ucode":"F3BB89E18893FA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/ff/8d/0674be36.jpg","comment_is_top":false,"comment_ctime":1653874569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653874569","product_id":100020901,"comment_content":"&quot;慢查询的现象大多是 CPU 使用率高（比如 100% ），但这里看到的却是 I&#47;O 问题。&quot;但是文章最后还是说了是慢查询的问题，而一开始是iowait高，怎么解释","like_count":0},{"had_liked":false,"id":322184,"user_name":"gecko","can_delete":false,"product_type":"c1","uid":1198048,"ip_address":"","ucode":"2B7122536F1A0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/e0/1ff26e99.jpg","comment_is_top":false,"comment_ctime":1637225707,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1637225707","product_id":100020901,"comment_content":"请教老师我这有台服务器，情况是mysql 插入数据很慢，<br>iostat -x -d 1<br>sdb 的 %util 是 99.80<br>wkb&#47;s 值是 2580<br><br><br>但是mysql 进程写的数据也不多，请教老师还应该咋查呢","like_count":0,"discussions":[{"author":{"id":1013424,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","nickname":"不了峰","note":"","ucode":"E23B96D6A3D4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551574,"discussion_content":"看一下 insert  语句，及表结构上有多少索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645063984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294184,"user_name":"noisyes","can_delete":false,"product_type":"c1","uid":2538540,"ip_address":"","ucode":"94EC310B284AD2","user_header":"https://static001.geekbang.org/account/avatar/00/26/bc/2c/963688bb.jpg","comment_is_top":false,"comment_ctime":1621820183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621820183","product_id":100020901,"comment_content":"直接将&#47;proc&#47;sys&#47;vm&#47;drop_caches 改成 1不就行了，为什么要读写一个data字符串的文件呢","like_count":0},{"had_liked":false,"id":244035,"user_name":"Wade_阿伟","can_delete":false,"product_type":"c1","uid":1688629,"ip_address":"","ucode":"5AE2E846A13443","user_header":"https://static001.geekbang.org/account/avatar/00/19/c4/35/2cc10d43.jpg","comment_is_top":false,"comment_ctime":1598362374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598362374","product_id":100020901,"comment_content":"老师您好，我在测试案例时，给test库创建索引时，一直没返回。<br>mysql&gt; CREATE INDEX products_index ON products (productName(64));<br>执行下面查询语句，发现返回Waiting for table metadata lock 信息<br>mysql&gt; show full processlist;<br>+-----+------+-----------------+------+---------+------+---------------------------------+-----------------------------------------------------------+<br>| Id  | User | Host            | db   | Command | Time | State                           | Info                                                      |<br>+-----+------+-----------------+------+---------+------+---------------------------------+-----------------------------------------------------------+<br>|   4 | root | 127.0.0.1:49978 | test | Sleep   | 3148 |                                 | NULL                                                      |<br>| 205 | root | localhost       | test | Query   |   70 | Waiting for table metadata lock | CREATE INDEX products_index ON products (productName(64)) |<br>| 224 | root | localhost       | test | Query   |    0 | init                            | show full processlist                                     |<br>+-----+------+-----------------+------+---------+------+---------------------------------+-----------------------------------------------------------+<br>3 rows in set (0.01 sec)<br>请问该如何解决？","like_count":0},{"had_liked":false,"id":244034,"user_name":"Wade_阿伟","can_delete":false,"product_type":"c1","uid":1688629,"ip_address":"","ucode":"5AE2E846A13443","user_header":"https://static001.geekbang.org/account/avatar/00/19/c4/35/2cc10d43.jpg","comment_is_top":false,"comment_ctime":1598362229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598362229","product_id":100020901,"comment_content":"mysql&gt; CREATE INDEX products_index ON products (productName(64));","like_count":0},{"had_liked":false,"id":215170,"user_name":"rsk","can_delete":false,"product_type":"c1","uid":1314383,"ip_address":"","ucode":"F51A8C075D9C16","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/4f/681f41bd.jpg","comment_is_top":false,"comment_ctime":1588920079,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588920079","product_id":100020901,"comment_content":"数据库服务器和业务服务器是彼此独立的，那么慢SQL会增加业务服务器的负载吗？（平均负载是指单位时间内，系统处于可运行状态和不可中断状态的平均进程数。我感觉业务服务器到数据库的连接是可以中断的吧。）","like_count":0,"discussions":[{"author":{"id":1013424,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","nickname":"不了峰","note":"","ucode":"E23B96D6A3D4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551575,"discussion_content":"问题就在于业务服务器是一个连接数据库，还是有多个连接连数据。如果一段时间内sql 执行慢， 导致大量的连接在应用服务器上，这也是增加业务器的负载。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645064169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203115,"user_name":"宋胖胖","can_delete":false,"product_type":"c1","uid":1857496,"ip_address":"","ucode":"AA828F49CCEABA","user_header":"https://static001.geekbang.org/account/avatar/00/1c/57/d8/e9c8b923.jpg","comment_is_top":false,"comment_ctime":1586141507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586141507","product_id":100020901,"comment_content":"打卡学习，。难道dataservice 里的操作时关闭缓存功能，停止了dataservice，查询的数据到cache里下次查询就快了。vmstat 输出 cache 从 889456 升高到918576。io 里的bi 降到0 ","like_count":0},{"had_liked":false,"id":201736,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1585827984,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585827984","product_id":100020901,"comment_content":"老师这讲打开了我认知新世界啊，真的是&#39;You do not know what you do not know&#39;","like_count":0,"discussions":[{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257508,"discussion_content":"未知的未知 哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588580369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197341,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1585369354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585369354","product_id":100020901,"comment_content":"mysql默认使用系统缓存。","like_count":0},{"had_liked":false,"id":195229,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1585147996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585147996","product_id":100020901,"comment_content":"清缓存，导致每次写都是从磁盘度，出现io问题","like_count":0},{"had_liked":false,"id":143222,"user_name":"tux","can_delete":false,"product_type":"c1","uid":1477811,"ip_address":"","ucode":"BB7202009FC885","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/b3/a74a7125.jpg","comment_is_top":false,"comment_ctime":1571651124,"is_pvip":false,"replies":[{"id":"55337","content":"默认的镜像是从dockerhub上面拉下来的，有时候可能会比较慢，可以试试通过代理访问","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1571664610,"ip_address":"","comment_id":143222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571651124","product_id":100020901,"comment_content":"回顾阶段，再运行案例，发现总会出两种现象：<br>1.卡在 进度条(出现最多)<br>root@t-s:mysql-slow:: make run<br>...<br>1f212fb371f9: Downloading [==========================&gt;      ]  1.137MB&#47;1.27MB<br>...<br><br>2.卡在 Waiting <br>root@t-s:mysql-slow:: make run<br>...<br>44fa5ea1d96b: Waiting <br>...<br><br><br>此篇，从上周到这周，没有make run成功过。<br>I&#47;0性能篇，抛开此篇，其它篇需要docker run好几次，才能运行案例。<br><br>是个例吗？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471430,"discussion_content":"默认的镜像是从dockerhub上面拉下来的，有时候可能会比较慢，可以试试通过代理访问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571664610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126333,"user_name":"烨","can_delete":false,"product_type":"c1","uid":1564897,"ip_address":"","ucode":"2844E63958EAD1","user_header":"https://static001.geekbang.org/account/avatar/00/17/e0/e1/029768f1.jpg","comment_is_top":false,"comment_ctime":1566364876,"is_pvip":false,"replies":[{"id":"47201","content":"谢谢分享您的步骤，可能是有的环境mysql初始化比较慢","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1566743090,"ip_address":"","comment_id":126333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566364876","product_id":100020901,"comment_content":"之前运行make init的时候，会报错连不上本地数据库，后来发现是因为mysql还没启动好，app就已经启动了，所以一直连不上。将app重启一次就好了","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463942,"discussion_content":"谢谢分享您的步骤，可能是有的环境mysql初始化比较慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566743090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120707,"user_name":"一想再想N","can_delete":false,"product_type":"c1","uid":1003453,"ip_address":"","ucode":"EA22728C2A43F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/bd/6d825f68.jpg","comment_is_top":false,"comment_ctime":1564979808,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564979808","product_id":100020901,"comment_content":"可以把不走索引的查询记录到日志中去","like_count":0},{"had_liked":false,"id":111427,"user_name":"西瓜就咸菜","can_delete":false,"product_type":"c1","uid":1586824,"ip_address":"","ucode":"DFE3F888F78751","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/88/ad3a0126.jpg","comment_is_top":false,"comment_ctime":1562556628,"is_pvip":false,"replies":[{"id":"42003","content":"再增加数据（比如10倍）试试？😓","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1563459351,"ip_address":"","comment_id":111427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562556628","product_id":100020901,"comment_content":"我把insert条数增大到1000000，curl 的响应时间很短，0.0011873245239257812 sec，跟实验的结果不一样，我看系统的状态也没有io问题，通过pidstat也没有mysql的 iodelay","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457351,"discussion_content":"再增加数据（比如10倍）试试？😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563459351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96133,"user_name":"Musisan","can_delete":false,"product_type":"c1","uid":1500498,"ip_address":"","ucode":"A9A9FE56AABEBA","user_header":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","comment_is_top":false,"comment_ctime":1558340443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558340443","product_id":100020901,"comment_content":"man确实是个好东西，以前给忽略了哈，^_^","like_count":0},{"had_liked":false,"id":95740,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1558159515,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558159515","product_id":100020901,"comment_content":"硬核 赞👍","like_count":0},{"had_liked":false,"id":89543,"user_name":"无名老卒","can_delete":false,"product_type":"c1","uid":1348261,"ip_address":"","ucode":"48874CE670E122","user_header":"","comment_is_top":false,"comment_ctime":1556200570,"is_pvip":false,"replies":[{"id":"32220","content":"插入更多的数据试试？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1556370215,"ip_address":"","comment_id":89543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556200570","product_id":100020901,"comment_content":"实例插入了3W条数据，这样子才使得get data的时间变大了一些，后面增加了索引之后，就变正常了。<br>```<br>root@fdm:~#while :;do curl http:&#47;&#47;192.168.254.131:10000&#47;products&#47;geektime;done<br>Got data: () in 2.335655689239502 sec<br>Got data: () in 2.3957033157348633 sec<br>Got data: () in 5.153362274169922 sec<br>Got data: () in 6.846464157104492 sec<br>Got data: () in 3.2172300815582275 sec<br>Got data: () in 0.04523611068725586 sec<br>Got data: () in 0.0017778873443603516 sec<br>Got data: () in 0.00156402587890625 sec<br>Got data: () in 0.0016543865203857422 sec<br>```<br><br>但是后面把dataservice停止之后，还是没有什么提高的效果，所以有可能硬盘使用了SSD，以及内存只有2G的原因导致的。另外说明一点的是，插入3W条数据之后，看到的products.MYD有1.5G了~","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448168,"discussion_content":"插入更多的数据试试？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556370215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88647,"user_name":"王伟","can_delete":false,"product_type":"c1","uid":1046001,"ip_address":"","ucode":"ABA3781E6DD5DB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/f1/4b26ac7d.jpg","comment_is_top":false,"comment_ctime":1555978660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555978660","product_id":100020901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":82586,"user_name":"大飞","can_delete":false,"product_type":"c1","uid":1320080,"ip_address":"","ucode":"2D98888FC63CA9","user_header":"","comment_is_top":false,"comment_ctime":1554254889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554254889","product_id":100020901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":75725,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1552457703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552457703","product_id":100020901,"comment_content":"DAY28，打卡","like_count":0},{"had_liked":false,"id":65474,"user_name":"Geek_33409b","can_delete":false,"product_type":"c1","uid":1112756,"ip_address":"","ucode":"9C64C42F799403","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/b4/6892eabe.jpg","comment_is_top":false,"comment_ctime":1549383447,"is_pvip":false,"replies":[{"id":"23249","content":"试试 echo 3","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549636273,"ip_address":"","comment_id":65474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549383447","product_id":100020901,"comment_content":"打卡day29 ，之前在工作中遇到过 释放缓存的情况，但是也会发现echo 1在某些情况下没有办法有效地释放缓存，这会是什么原因引起的呢？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438460,"discussion_content":"试试 echo 3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549636273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64894,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1548943154,"is_pvip":false,"replies":[{"id":"22992","content":"嗯嗯，要看场景的。比如，对一个定期评估系统性能的工具，为了获得准确的指标，就有可能这么做（不过这种应用跟其他业务一般都是分开部署）","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548944583,"ip_address":"","comment_id":64894,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548943154","product_id":100020901,"comment_content":"[D28打卡]<br>居然漏打卡了，回来补上。<br>平常偶尔手动释放缓存还有可能，但把这个操作放在需要频繁执行的代码中就有点不科学了。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438223,"discussion_content":"嗯嗯，要看场景的。比如，对一个定期评估系统性能的工具，为了获得准确的指标，就有可能这么做（不过这种应用跟其他业务一般都是分开部署）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548944583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63846,"user_name":"唯美","can_delete":false,"product_type":"c1","uid":1263430,"ip_address":"","ucode":"9186A5B99DFBCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/46/61f16147.jpg","comment_is_top":false,"comment_ctime":1548554386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548554386","product_id":100020901,"comment_content":"打卡Day27","like_count":0},{"had_liked":false,"id":63313,"user_name":"安小依","can_delete":false,"product_type":"c1","uid":1101660,"ip_address":"","ucode":"A5C414C7B994FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/5c/d4e19eb6.jpg","comment_is_top":false,"comment_ctime":1548320687,"is_pvip":false,"replies":[{"id":"22584","content":"pipe 是一个管道，而不是文件，可以用 lsof 找一下 pipe 的对端进程","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548576569,"ip_address":"","comment_id":63313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548320687","product_id":100020901,"comment_content":"老师好，上次留言说 Java 无法 strace 打日志的问题解决了，原来 strace 必须跟上 -f 选项才可以，最终定位到当疯狂 System.out.println 的时候，原来是写到 pipe 管道里边去了：<br><br>java    2794   zk    1w  FIFO               0,12      0t0  3626492 pipe<br><br>到这个地方还是理解不了，这个 pipe 最终是存放在哪里了呢？为什么疯狂打日志，会把磁盘打满呢？谢谢","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437542,"discussion_content":"pipe 是一个管道，而不是文件，可以用 lsof 找一下 pipe 的对端进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548576569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63163,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1548292153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548292153","product_id":100020901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":63088,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1548248157,"is_pvip":false,"replies":[{"id":"22579","content":"增大初始化的数据量（比如增大10倍）再试试呢？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548576142,"ip_address":"","comment_id":63088,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1548248157","product_id":100020901,"comment_content":"centos下执行这个案例，不会出现查询慢的情况，很正常的结束","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437467,"discussion_content":"增大初始化的数据量（比如增大10倍）再试试呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548576142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3454,"discussion_content":"会出现的，不过没有十几秒那么久","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564493842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63082,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1548246594,"is_pvip":false,"replies":[{"id":"22578","content":"看来你的系统配置比较高，增加下初始化时的数据量（比如增加10倍）再试试？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548576100,"ip_address":"","comment_id":63082,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1548246594","product_id":100020901,"comment_content":"curl http:&#47;&#47;192.168.193.132:10000&#47;products&#47;geektime<br>Got data: () in 0.4080049991607666 sec <br>时间很快并没有出现长时间查询的情况","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437463,"discussion_content":"看来你的系统配置比较高，增加下初始化时的数据量（比如增加10倍）再试试？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548576100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3455,"discussion_content":"几百毫秒也很长时间了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564493892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63077,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1548245625,"is_pvip":false,"replies":[{"id":"22577","content":"mysql 没有运行起来，运行 docker logs mysql 看看报了什么错误？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548575812,"ip_address":"","comment_id":63077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548245625","product_id":100020901,"comment_content":"make run报错如下：<br>flag provided but not defined: --network<br>mysql-slow这个没法运行起来","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437460,"discussion_content":"mysql 没有运行起来，运行 docker logs mysql 看看报了什么错误？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548575812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62969,"user_name":"仲鬼","can_delete":false,"product_type":"c1","uid":1314692,"ip_address":"","ucode":"DB1CD7052D5BA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/84/d8e63885.jpg","comment_is_top":false,"comment_ctime":1548216680,"is_pvip":false,"replies":[{"id":"22342","content":"第2条有可能也是很慢的，当然慢的程度取决于操作和数据量的大小","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548252296,"ip_address":"","comment_id":62969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548216680","product_id":100020901,"comment_content":"老师好，我认为explain的结果已经能说明page cache未缓存MYD文件。<br><br>原因：<br>1. type为ALL表示不使用索引，全表查询；<br>2. keys为NULL表示不使用索引。<br>结论：该语句需要扫描全表。<br><br>补充MyISAM的一些重要特点：<br>1. 查询数据时，如果能命中索引，会先在索引中查询匹配行的位置，再去MYD文件中取数据。<br>2. MyISAM自己维护索引（MYI文件）的缓存，利用page cache维护数据（MYD文件）的缓存。<br><br>结合之前返回的空结果，特点1说明表中不存在匹配行。在这种情况下，按理说只查询索引应该很快能得到“空结果”，所以“响应慢”说明未建立相关索引。<br>但根据特点2，就算是未建立索引，在page cache中顺序读全表数据也不会这么慢，所以，特点2说明page cache未缓存MYD文件。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437421,"discussion_content":"第2条有可能也是很慢的，当然慢的程度取决于操作和数据量的大小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}