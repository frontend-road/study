{"id":481016,"title":"01｜导读：以前因后果为脉络，串起网状知识体系","content":"<p>你好，我是陈现麟。</p><p>在我们正式学习整个专栏之前，我特别设计了这个导读环节，让你在正式学习之前先拿到一份导航地图。</p><p>在开篇词里，我提到了我曾经参加过知乎圆桌会议，回答了“如何系统性地学习分布式系统”这个问题。在这节课的导读内容里，我会结合知乎中的回答，进一步提炼出分布式系统前因后果中的核心问题，帮你追本溯源，理清这个专栏的设计思路，总结深入学习的方法和路径。</p><p>学完这节课以后，你不仅能对课程思路心中有数，还能知道如何推导出一门技术的脉络，学会将零散的知识点连成网状的知识体系。</p><h2>前因：分布式系统解决了什么问题</h2><p>学习一个知识之前，我觉得比较好的方式是先理解它的前因后果：前因就是这个知识产生的过程中，它解决了什么问题，怎么样解决的。后果就是它的出现又带来了哪些新的问题，这样我们才能比较好地抓到它的脉络和关键点，不会一开始就迷失在细节中。</p><p>所以，学习分布式之前，<strong>我们要解决的第一个问题就是：分布式系统解决了什么问题，怎么样解决的</strong>？分布式系统的出现主要解决的是单体系统方面的不足，下面我们就具体来分析一下。</p><p>首先，分布式系统解决了单机性能瓶颈导致的成本问题。由于摩尔定律失效，廉价 PC 机的性能瓶颈无法继续突破，虽然小型机和大型机能实现更高的单机性能，但是成本太高，一般的公司很难承受。</p><!-- [[[read_end]]] --><p>比如 2008 年，阿里巴巴发起的“去 IOE ”运动（在 IT 建设过程中，去除 IBM 小型机、Oracle 数据库及 EMC 存储设备）的一个关键原因，就是这些商用小型机和存储设备的成本实在太高了。</p><p>然后，解决了用户量和数据量爆炸性地增大导致的成本问题。进入互联网时代，用户量爆炸性地增大，用户产生的数据量也随之增大。在 2015 年，全球数据总量达到 6 ZB（1 ZB 等于 1 万亿 GB），在 2020 年，全球数据总量已经达到了 44 ZB ，预计到 2030 年，全球数据总量将超过 2,500 ZB。</p><p>即使在这种情况下，单个用户或单条数据的价值，也是比软件时代（比如银行用户）的价值低很多的，所以人们必须寻找更经济的方案来处理和存储这些数据。并且，在用户量和数据量，大到一定程度之后，在单机系统的范围内，即使不计成本，可能也找不到好的解决方案。</p><p>接着，满足了业务高可用的要求。互联网产品基本都要求 7 * 24 小时提供服务，对于停止服务等故障是无法容忍的。如果想要提供高可用的服务，唯一的方式就是通过增加冗余来完成。那么就算是单机系统可以支撑的服务，因为要满足高可用的要求，也会变成一个分布式系统。</p><p>最后，分布式系统解决了大规模软件系统的迭代效率和成本的问题。如果一个大规模的软件系统是一个单体系统，那么大量的开发人员就只能将一个大规模软件，整体进行编译、测试和发布，这样一来开发语言和生态都比较单一，系统的迭代效率就会非常低。同时，对于系统的各个部分，我们也不能有针对性地进行成本优化，这会产生非常大的成本问题。</p><p>根据上面的四个原因，我们可以总结出<strong>在互联网时代，单机系统是无法解决成本、效率和高可用问题的</strong>，但是这三个问题，对所有的公司来说都是非常关键的问题，所以分布式系统就这样应运而生了，你也会发现，从单机系统到分布式系统的发展，是无法阻挡的技术大潮流。</p><p>那么，分布式系统又是怎么解决单机系统面临的成本、效率和高可用的问题呢？</p><p>其实很容易想到，就是将一些廉价的 PC 机，通过网络连接起来共同完成工作，并且在系统中提供冗余，来解决高可用的问题。其实我们从分布式系统的定义中，也能找到这个方法，分布式系统指的是由一组通过网络进行通信，为了完成共同的任务，而协调工作的计算机节点组成的系统。在这个定义中，可以看出分布式系统是通过多工作节点，来解决单机系统面临的成本、效率和高可用问题的。</p><p>刚才我们讨论了分布式系统解决了什么问题，怎么样解决的，由此得出，分布式系统的发展是无法阻挡的技术大潮流。下面我再进一步解释一下，如何理解分布式系统的出现，以及分布式系统在不同业务场景中的表现形式。</p><p>“旧时王谢堂前燕，飞入寻常百姓家”，用来形容 IT 技术最合适不过了。由于互联网的爆发性发展， IT 技术不再是实验室、科研机构和金融等相对前沿行业的专属技术，它快速地平民化了。如果一项技术能够平民化，那么一定是在成本、效率和稳定性方面都有非常突出的表现，也就是说必须物美价廉，<strong>所以我们可以把分布式系统看成是单体系统的平民化和物美价廉的版本</strong>。</p><p>目前分布式系统依然还在快速发展中，它不停地掀起一波又一波的浪潮，快速地席卷着 IT 技术的方方面面。我们可以看到它在不同的业务场景中有着不同的表现形式，比如流量路由策略加多副本部署（微服务是其中的一种架构形式）是无状态服务的分布式架构方案， Redis Cluster 和 Codis 等方案实现了缓存的分布式化，而 Kubernetes 则完成了操作系统的分布式进化。</p><p>NoSQL 掀起了数据库分布式化的第一波浪潮，而 NewSQL 则推动着支持 ACID 的关系数据库的分布式化，这是数据库分布式化的第二波浪潮，由此可见，分布式系统确实是无法避免的技术大潮流。</p><h2>后果：如何思考和处理分布式系统引入的新问题</h2><p>我们在上文中，分析了分布式系统的前因，知道了分布式系统是通过多工作节点，来解决单机系统面临的成本、效率和高可用问题的。但是有利就会有弊，它的出现也引入了分布式系统内部工作节点的协调问题，主要体现在分布式系统内部组件、实例之间，通过异步网络进行通信和协调的问题上。</p><p>所以在后果部分，<strong>我们主要来解决第二个问题：针对内部工作节点的协调问题，分布式系统是怎么做的</strong>？</p><p>我们先从简单的情况入手，对于<strong>分布式计算（无状态）</strong>的情况，系统内部的协调需要做哪些工作，我们围绕7个子问题进行思考。</p><p>其一，怎么找到服务？在分布式系统内部，会有不同的服务（角色），服务 A 怎么找到服务 B 是需要解决的问题。一般来说，服务注册与发现机制是常用的思路，所以，我们可以了解一下服务注册发现机制的实现原理，并且思考一下服务注册发现，是选择做成 AP 系统还是 CP 系统更合理。</p><p>其二，怎么找到实例？在找到服务之后，当前的请求应该发往服务的哪一个实例呢？一般来说，如果同一个服务的实例是完全对等的（无状态），那么按负载均衡的策略来处理就足够（轮询、权重、Hash、一致性Hash，FAIR 等各种策略的适用场景）。</p><p>如果同一个服务的实例不对等（有状态），那么就需要通过路由服务（元数据服务等）先确定，当前要访问的请求数据做到哪一个实例上，然后再进行访问。</p><p>其三，怎么管理配置？在分布式系统内部，会有不同的服务（角色），每一个服务都有多个实例，并且还可能自动扩容和缩容。在这样的情况下，通过配置文件的方式，来管理配置是低效、易出错的，对于这个问题，一般的思路是通过一个中心化的存储来统一管理系统的配置，即配置中心。</p><p>其四，怎么进行协同？在单体系统中，所有的功能模块都在一个进程中，系统内部进行协同非常简单， 直接调用系统的API 加锁就可以了。但是在分布式系统中，由于不同的功能模块已经拆分为不同的服务，并且一般都运行在不同的机器上，这个时候系统中加锁相关 API 就不能使用了。对于这个问题，我们可以通过一个跨进程与机器的分布式锁来解决。</p><p>其五，怎么确保请求只执行一次？在分布式系统中，各个模块之间通过网络进行连接。如果出现了网络抖动等情况，会导致模块之间的调用失败，而调用失败就有可能触发重试策略，使得程序可能出现没有执行或者多次执行的情况。一般来说，重试加上幂等是分布式系统中，确保请求只执行一次的方法。</p><p>其六，怎么避免雪崩？系统雪崩是指由于正反馈循序导致不断扩大规则的故障。一次雪崩通常是由于整个系统中，一个很小的部分出现故障而引发，进而导致系统的其他部分也出现故障。比如，系统中某一个服务的一个实例出现故障，导致负载均衡将该实例摘除，从而引起其他实例负载升高，最终导致该服务的所有实例像多米诺骨牌一样，一个一个全部出现故障。</p><p>避免雪崩的策略比较简单，主要是两个思路，一个是<strong>快速失败和降级机制</strong>（熔断、降级、限流等），通过快速减少系统负载来避免雪崩的发生；另一个是<strong>弹性扩容机制</strong>，通过快速增加系统的服务能力来避免雪崩的发生。我们可以根据不同的场景做出不同的选择，或者两个策略都使用。</p><p>一般来说，快速失败会导致部分的请求失败，如果分布式系统内部，对一致性要求很高的话，快速失败会带来系统数据不一致的问题。这种情况下，弹性扩容会是一个比较好的选择，但是弹性扩容的实现成本比快速失败要大，响应时间也更长。</p><p>其七，怎么监控告警和故障恢复？对于一个分布式系统来说，如果我们不能清楚地了解内部的状态，那么系统的稳定性是没有办法完全保障的。所以我们一定要完善分布式系统的监控（比如接口的时延和可用性等信息），分布式追踪 Trace ，模拟故障的混沌工程以及相关的告警等机制。同时做好故障恢复预案，确保在故障发生的时候，能够快速恢复故障。</p><p>接下来，我们再来围绕4个子问题思考一下，<strong>分布式存储（有状态）</strong>的内部协调是怎么做的，因为，前面介绍的分布式计算的协调方式在分布式存储中同样适用，就不再重复了。</p><p>首先，在 CAP 及其相关理论与权衡方面，需要了解 ACID 、 BASE 和 CAP 理论这三个主题。我推荐你阅读一篇文章以及文章后面相关的参考文献，读完后你就能很好地理解 CAP 理论中的取舍了，这是英文版本：<a href=\"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/\">https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/</a> ，这是中文版本：<a href=\"https://www.infoq.cn/article/cap-twelve-years-later-how-the-rules-have-changed/\">https://www.infoq.cn/article/cap-twelve-years-later-how-the-rules-have-changed/</a> 。</p><p>然后，我们来思考怎么做数据分片。单机系统是不可能存储所有数据的，所以需要解决怎么将数据按一定的规则，分别存储到不同的机器上这个问题，目前使用较多的方案是：Hash 和 Region 分片的策略，但是要注意了解一下它们的优缺点和各自的应用场景。</p><p>接着，我们讨论一下怎么做数据复制这方面。为了满足系统的高可用要求，需要对数据做冗余处理，目前的方案主要为：中心化方案（主从复制、一致性协议，比如 Raft 和 Paxos 等）和去中心化的方案（ Quorum 和 Vector Clock），我们需要了解它们的优缺点，各自的应用场景，以及对系统外部表现出来的数据一致性级别（线性一致性、顺序一致性、最终一致性等）。</p><p>最后，我们来看看怎么做分布式事务。对于分布式系统来说，要实现事务，首先需要对并发事务进行排序的能力，这样在事务冲突的时候，就可以确认哪个事务提交成功，哪个事务提交失败。</p><p>在单机系统中，这完全不是问题，简单地通过时间戳加序号的方式就可以实现了。但是对于分布式系统来说，系统中机器的时间不能完全同步，并且单台机器的序号也没有全局意义，所以，按时间戳加序号的方式是不行的。</p><p>如果整个系统选一台机器，按照单机的模式生产事务 ID 是可以的，同城多中心和短距离的异地多中心也都没有问题。但是想做成全球分布式系统的话，每一次事务都要去一个节点获取事务ID的成本太高（比如中国杭州到美国东部的 RTT 为 200+ ms），我们可以<strong>参考 Google 的 Spanner ，它是通过 GPS 和原子钟，实现 TrueTime API 来解决这个问题，从而实现全球分布式数据库的</strong>。</p><p>有了事务 ID 后，通过 2PC 或者 3PC 协议来实现分布式事务的原子性，其他部分和单机事务差别不大，就不再细说了。</p><p>到这里，我们已经对分布式系统的脉络有了基本的概念，接下来就可以进入<strong>细节学习</strong>的阶段了，对分布式系统的理解深入与否，细节的深入度是很重要的评价指标，毕竟“魔鬼在细节”，所以这也是非常辛苦的阶段。这里我们可以从两个方面进行系统地学习：</p><p>首先<strong>从实践出发</strong>，研究目前比较常用的分布式系统的设计，HDFS 或者 GFS（分布式文件系统）、Kafka 和 Pulsar（分布式消息队列），Redis Cluster 和 Codis（分布式缓存），MySQL 的分库分表（传统关系型数据库的分布式方案），MongoDB 的 Replica Set 和 Sharing 机制集（NoSQL 数据库），TiDB（NewSQL）以及一些微服务框架等。</p><p>然后<strong>从理论出发</strong>，研究分布式相关的论文，这里推荐一本书“ Designing Data-Intensive Applications ”（中文版本：数据密集型应用系统设计），推荐你先把书整体看一遍，然后找到比较感兴趣的章节，再仔细读一读该章节中涉及的相关参考文献。</p><p>最后，为了让你更好地理解，如何处理分布式系统引入的，内部工作节点的协调问题，我把它们总结为下面三类问题。</p><p>首先是<strong>路由问题</strong>，分布式系统由单体系统拆分而来，必然会导致分布式系统内部，出现复杂的路由问题。路由问题主要是解决分布式系统内部各服务和实例之间的通信，我们可以将“怎么找到服务”和“怎么找到实例”等服务注册发现和负载均衡的问题，理解为正常情况下的路由问题，将“怎么做数据分片”的问题，理解为带状态的路由问题，将“怎么避免雪崩”涉及的熔断、降级等快速失败和降级机制，理解为异常情况下的路由问题。</p><p>接下来是<strong>共识问题</strong>，分布式系统的各个组件是运行在不同机器上的不同进程，因为程序总是需要按一定的逻辑有序地执行，所以需要一个办法，来协调分布式系统内部，已经各自为政的服务和实例，而共识就是讨论并解决这一类问题的，例如“怎么做数据复制”、“怎么做分布式事务”和“怎么做分布式锁”里，都会涉及共识问题。</p><p>最后是<strong>运维问题</strong>，分布式系统相对于单体系统是非常碎片化的，如果还依靠人肉运维，在效率上是完全行不通的，所以催生了一系列自动化运维的工具和平台来解决这一类问题，例如“怎么管理配置”和“怎么监控告警和故障恢复”都涉及运维的问题。</p><h2>总结</h2><p>通过这样一篇导读，我想告诉你，在学习新知识的时候，只学点状的知识是非常容易忘记的，而只学线状的知识又很难触类旁通，只有点、线结合，形成网状的知识体系，如下图这样，才能举一反三、融会贯通。<br>\n<img src=\"https://static001.geekbang.org/resource/image/0a/0c/0a72636df95c698ea571d4146032820c.jpg?wh=2284x1714\" alt=\"\"><br>\n所以，在这个专栏中，我会<strong>以分布式系统的前因后果为脉络，打造一条由浅入深、从简单到复杂的学习路径</strong>，并且会从路由问题、共识问题和运维问题这三大角度，对分布式系统的知识点进行交叉串讲。当你按照这条线性的路径完成学习后，将会得到一个网状的知识体系。</p><p>在课程导读中，我分享了如何学习、思考分布式技术原理的方法和路径，最后我想特别邀请你也来分享一下自己学习分布式系统的好方法，或者你也可以说说你在学习、工作中遇到的具体问题和困惑，非常期待你的留言。如果这节课对你有帮助，也推荐你分享给更多的同事、朋友。</p>","neighbors":{"left":{"article_title":"开篇词｜掌握好学习路径，分布式系统原来如此简单","id":480946},"right":{"article_title":"02｜新的挑战：分布式系统是银弹吗？我看未必！","id":481049}},"comments":[{"had_liked":false,"id":332112,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1182967,"ip_address":"","ucode":"F71E16290CB58C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/f7/d6547adb.jpg","comment_is_top":false,"comment_ctime":1643023253,"is_pvip":true,"replies":[{"id":"121341","content":"非常赞！","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643035287,"ip_address":"","comment_id":332112,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83247401877","product_id":100104701,"comment_content":"今日学习收获：<br>1. 看东西 要思考<br>      1.1 解决了什么问题<br>      1.2 怎么样解决的<br>      1.3 他的出现 带来了 哪些新的问题<br> 2. 分布式系统 解决了 成本、效率和高可用问题<br>3 分布式系统 带来了什么问题<br>      3.1 无状态 内部工作节点的协调问题<br>                   3.1.1 怎么找到服务<br>                   3.1.2 怎么找到实例的<br>                   3.1.3 怎么管理配置？ 配置中心<br>                   3.1.4 怎么进行协同？ 分布式锁<br>                   3.1.5  怎么确保请求只执行一次？ 重试+ 幂等<br>                   3.1.6 怎么避免雪崩？ （快速失败和降级。 一致性要求高的不能用 &#47; 弹性扩容机制）<br>                   3.1.7 怎么监控报警和故障恢复？<br>      3.2 有状态的内部协调怎么做？<br>                   3.2.1 怎么做数据分片？ Hash 和 Region 分片的策略<br>                   3.2.2 怎么做数据复制？ <br>                          3.2.2.1 中心化方案（主从复制、一致性协议，比如 Raft 和 Paxos 等）<br>                          3.2.2.2 去中心化的方案（ Quorum 和 Vector Clock）<br>                   3.2.3 怎么做分布式事务？参考 Google 的 Spanner ，它是通过 GPS 和原子钟，实现 TrueTime API 来解决这个问题，从而实现全球分布式数据库的<br>                   3.2.4 <br>1. 我之前是写业务的，负责线上维护，有问题了，会带着问题 看源码，感觉这种 学习方法不错的<br>2. 你在学习、工作中遇到的具体问题和困惑： 其实就是 老师说的 感觉花的时间很多，但是事倍功半。。。源码和脑图 整理过不少，也尝试自己写组件<br>（其实是 各种借鉴哈哈 最近在看Nacos2.x）还是有一丝迷茫<br><br>之后需要实践：<br>1. 参考 Google 的 Spanner","like_count":19,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548125,"discussion_content":"非常赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643035287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2875594,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","nickname":"孙新","note":"","ucode":"A80038A479B943","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560430,"discussion_content":"看nacos的源码吗？它很多地方设计的让人无语。主要我c++只能调http的api，比较无奈。java的源码也不太能看懂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649326305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333949,"user_name":"良记","can_delete":false,"product_type":"c1","uid":1033503,"ip_address":"","ucode":"F78CC56BB32D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/1f/485fcff9.jpg","comment_is_top":false,"comment_ctime":1644634274,"is_pvip":true,"replies":[{"id":"121991","content":"谢谢😄","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1644666564,"ip_address":"","comment_id":333949,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48889274530","product_id":100104701,"comment_content":"看完导读之后，我有预感这个专栏将会是我2022最喜欢发专栏之一。","like_count":11,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550675,"discussion_content":"谢谢😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644666564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332849,"user_name":"Geek_7f3537","can_delete":false,"product_type":"c1","uid":2903368,"ip_address":"","ucode":"697B98A97CAD1A","user_header":"","comment_is_top":false,"comment_ctime":1643728205,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31708499277","product_id":100104701,"comment_content":"结尾的图很好!","like_count":7,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549245,"discussion_content":"谢谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643774587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334472,"user_name":"雾都","can_delete":false,"product_type":"c1","uid":2628119,"ip_address":"","ucode":"198CDE0F864C77","user_header":"https://static001.geekbang.org/account/avatar/00/28/1a/17/9e925f61.jpg","comment_is_top":false,"comment_ctime":1644972938,"is_pvip":true,"replies":[{"id":"122284","content":"哈哈，多谢多谢","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1645110327,"ip_address":"","comment_id":334472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18824842122","product_id":100104701,"comment_content":"特别喜欢这种提纲挈领的课程，给老师点赞","like_count":5,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551784,"discussion_content":"哈哈，多谢多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645110327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336372,"user_name":"苜蓿°","can_delete":false,"product_type":"c1","uid":2725667,"ip_address":"","ucode":"BEEDCB2B88363A","user_header":"https://static001.geekbang.org/account/avatar/00/29/97/23/9c9bd0d4.jpg","comment_is_top":false,"comment_ctime":1646118519,"is_pvip":true,"replies":[{"id":"122963","content":"多谢😀","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1646145572,"ip_address":"","comment_id":336372,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10236053111","product_id":100104701,"comment_content":"最后整理的思维图太棒了","like_count":2,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553963,"discussion_content":"多谢😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646145572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339624,"user_name":"Hello,Tomrrow","can_delete":false,"product_type":"c1","uid":1351769,"ip_address":"","ucode":"F9407C1C91B157","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/59/86073794.jpg","comment_is_top":false,"comment_ctime":1648256837,"is_pvip":true,"replies":[{"id":"124206","content":"是的，你的理解也非常正确👍","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1648432928,"ip_address":"","comment_id":339624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5943224133","product_id":100104701,"comment_content":"老师的文稿的思维好清晰。现有的技术方案无法满足业务的发展，矛盾下催生了新的解决问题的思路，在新思路的指导下，进行不同纬度的方法探索、实践、总结。当然，所有新方法都不是银弹，我们还会面对新方法引发的问题，就这样：问题-解决问题-新问题…推动不断创新进步","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558659,"discussion_content":"是的，你的理解也非常正确👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648432928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337621,"user_name":"乐天","can_delete":false,"product_type":"c1","uid":1519344,"ip_address":"","ucode":"1DC138F7BD536E","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/f0/0bbb0df5.jpg","comment_is_top":false,"comment_ctime":1646919316,"is_pvip":false,"replies":[{"id":"123367","content":"👍👍","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1646956586,"ip_address":"","comment_id":337621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5941886612","product_id":100104701,"comment_content":"分布式系统主要解决单机的高可用和性能问题，那研究分布式系统，也可以从高可用、水平扩展、容错性几方面来学习。<br>高可用，简单说就是服务冗余，坏了一个还有备份的，主备、主从、分布式就是提高高可用。<br>水平扩展，还是要提供冗余服务。服务注册和发现、配置管理都是为了方便水平扩展。<br>容错，就是发送故障时还能正常运行。降级、熔断、限流都是容错的手段。","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555515,"discussion_content":"👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646956587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333183,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1644193742,"is_pvip":true,"replies":[{"id":"121956","content":"先举一个最简单的 CP 系统：<br>假设有一个存储系统的数据有 3 个副本，每一次写入操作都需要 3 个副本都返回成功（不考虑读的一致性问题），这个系统就是 CP 系统。<br><br>另外，我们比较常见的 CP 系统有 etcd","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1644580257,"ip_address":"","comment_id":333183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5939161038","product_id":100104701,"comment_content":"请问下服务发现里面讲的AP，CP系统是指什么呢？","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550535,"discussion_content":"先举一个最简单的 CP 系统：\n假设有一个存储系统的数据有 3 个副本，每一次写入操作都需要 3 个副本都返回成功（不考虑读的一致性问题），这个系统就是 CP 系统。\n\n另外，我们比较常见的 CP 系统有 etcd","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644580257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332398,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1643204341,"is_pvip":false,"replies":[{"id":"121458","content":"微服务或者 SOA 是分布式架构的一种实现形式","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643275529,"ip_address":"","comment_id":332398,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5938171637","product_id":100104701,"comment_content":"总结下我的理解<br>1.分布式架构的目标是使用多个独立的服务器，来共同构建一个更大型的系统。（这是一个物理上的架构）<br>2.单体架构&#47;soa&#47;微服务架构都可以采用分布式架构来实现物理上的部署。<br>疑问：<br>3.如果是单体架构系统采用分布式架构部署。其实没有找服务&#47;分布式事务&#47;配置管理等等的问题。那为什么又称这些问题为分布式问题，而不是微服务问题soa问题呢？","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548608,"discussion_content":"微服务或者 SOA 是分布式架构的一种实现形式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643275529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548614,"discussion_content":"这么说好像就说得通了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643276569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548608,"ip_address":""},"score":548614,"extra":""}]}]},{"had_liked":false,"id":332329,"user_name":"阿甘","can_delete":false,"product_type":"c1","uid":1057843,"ip_address":"","ucode":"BC93175B70E05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/33/bcf37f50.jpg","comment_is_top":false,"comment_ctime":1643178811,"is_pvip":true,"replies":[{"id":"121455","content":"专栏在开篇词中定了一个范围，主要讨论的对象在线业务分布式系统，这个普遍来说也是工程师最熟悉的领域，后面也不排除扩展到大数据计算和存储相关的领域~","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643275013,"ip_address":"","comment_id":332329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5938146107","product_id":100104701,"comment_content":"确切来说，分布式计算指的是一个大任务被拆分成多个小任务执行，而不是微服务架构服务注册&#47;发现以及服务间调用这类场景。常见的分布式计算框架有hadoop，spark, tf等。","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548603,"discussion_content":"专栏在开篇词中定了一个范围，主要讨论的对象在线业务分布式系统，这个普遍来说也是工程师最熟悉的领域，后面也不排除扩展到大数据计算和存储相关的领域~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643275013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347861,"user_name":"建锋","can_delete":false,"product_type":"c1","uid":2295880,"ip_address":"","ucode":"50E4AF68BE4488","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SYxHx9k1fVAZGanCk5cFVdzFyhx2pkNk45RdH1Yo3ITBH7dCWjwzEzibAnZaXayqF1TibW6ynBkCqIOd6p1Yhlew/132","comment_is_top":false,"comment_ctime":1654520328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654520328","product_id":100104701,"comment_content":"路由问题，运维问题  ，共识问题","like_count":0},{"had_liked":false,"id":340590,"user_name":"牛不才","can_delete":false,"product_type":"c1","uid":1259658,"ip_address":"","ucode":"06C15C5B15258F","user_header":"https://static001.geekbang.org/account/avatar/00/13/38/8a/4dd15bd9.jpg","comment_is_top":false,"comment_ctime":1648959345,"is_pvip":false,"replies":[{"id":"124564","content":"😃😃","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1649046949,"ip_address":"","comment_id":340590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648959345","product_id":100104701,"comment_content":"路由问题、共识问题、运维问题。总结的很好","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559902,"discussion_content":"😃😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649046950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}