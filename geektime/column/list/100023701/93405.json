{"id":93405,"title":"29 | 自动化测试：如何把Bug杀死在摇篮里？","content":"<p>你好，我是宝玉。前不久我所在项目组完成了一个大项目，把一个网站前端的jQuery代码全部换成React代码，涉及改动的项目源代码文件有一百多个，变动的代码有几千行，最终上线后出乎意料的稳定，只有几个不算太严重的Bug。</p><p>能做到重构还这么稳定，是因为我们技术水平特别高吗？当然不是。还是同样一组人，一年前做一个比这还简单的项目，上线后却跟噩梦一样，频繁出各种问题，导致上线后不停打补丁，一段时间才逐步稳定下来。</p><p>这其中的差别，只是因为在那次失败的上线后，我们总结经验，逐步增加了自动化测试代码的覆盖率。等我们再做大的重构时，这些自动化测试代码就能帮助我们发现很多问题。</p><p>当我们确保每一个以前写好的测试用例能正常通过后，就相当于把Bug杀死在摇篮里，再配合少量的人工手动测试，就可以保证上线后的系统是稳定的。</p><p>其实对于自动化测试，我们专栏已经多次提及，它是敏捷开发能快速迭代很重要的质量保障，是持续交付的基础前提。</p><p>所以今天我将带你一起了解什么是自动化测试，以及如何在项目中应用自动化测试。</p><h2>为什么自动化测试能保障质量？</h2><p>自动化测试并不难理解，你可以想想人是怎么做测试的：首先根据需求写成测试用例，设计好输入值和期望的输出，然后按照测试用例一个个操作，输入一些内容，做一些操作，观察是不是和期望的结果一致，一致就通过，不一致就不通过。</p><!-- [[[read_end]]] --><p>自动化测试，就是把这些操作，用程序脚本来完成的，本质上还是要输入和操作，要检查输出是不是和期望值一致。只要能按照测试用例操作和检查，其实是人来做还是程序来做，结果都是一样的。</p><p>不过，自动化测试有一个手工测试没有的优势，那就是可以直接绕过界面，对程序内部的类、函数进行直接测试，如果有一定量的自动化测试代码覆盖，相对来说软件质量是更有保障的。</p><p>而且，一旦实现了自动化，每测试一次的成本其实大幅降低了的，几百个测试用例可能几分钟就跑完了。尤其是每次修改完代码，合并到主干之前，把这几百个测试用例跑一遍，可以有效地预防“修复一个Bug而产生新Bug”的情况发生。</p><p>但现阶段，自动化测试还是不能完全代替手工测试的，有些测试，自动化测试成本比手工测试成本要高，比如说测试界面布局、颜色等，还是需要一定量的手工测试配合。</p><h2>有哪些类型的自动化测试？</h2><p>现在说到自动化测试，已经有很多的概念，除了大家熟悉的单元测试，还有像集成测试、UI测试、端到端测试、契约测试、组件测试等。而很多时候同一个名字还有不同的解读，很容易混淆。</p><p>在对自动化测试类型的定义方面，Google的分类方法我觉得比较科学：根据数据做出决策，而不仅仅是依靠直觉或无法衡量和评估的内容。Google将自动化测试分成了三大类：小型测试、中型测试和大型测试。</p><p>假设我们有一个网站，是基于三层架构（如下图所示），业务逻辑层的类叫UserService类，数据访问层的类叫UserDA，我们将以用户注册的功能来说明几种测试的区别 。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/2b/9b9fbf93cf03fa33b381ee144a26a92b.png?wh=775*478\" alt=\"\"></p><h4>小型测试</h4><p>小型测试是为了验证一个代码单元的功能，例如针对一个函数或者一个类的测试。我们平时说的单元测试就是一个典型的小型测试。</p><p>比如说UserService这个类，有一个注册用户的函数，现在要对它写一个单元测试代码，那么看起来就像下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/61/02aa850792c8fbb3c6bc626b9c944161.png?wh=1582*1166?wh=1582*1166\" alt=\"\"></p><p>通过这样的测试代码，就可以清楚的知道UserService类的create这个函数是不是能正常工作。</p><p>小型测试的运行，不需要依赖外部。如果有外部服务（比如文件操作、网络服务、数据库等），必须使用一个模拟的外部服务。比如上面例子中我们就使用了FakeUserDA这个模拟的数据库访问类，实际上它不会访问真实的数据库。这样可以保证小型测试在很短时间内就可以完成。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/ee/43ce39715dddae2e51728d13714c31ee.png?wh=464*561\" alt=\"\" title=\"小型测试，图片来源：《Google软件测试之道》\"></p><h4>中型测试</h4><p>中型测试是验证两个或多个模块应用之间的交互，通常也叫集成测试。</p><p>如果说要对用户注册的功能写集成测试，那么就会同时测试业务逻辑层的UserService类和数据访问层的UserDA类。如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/e7/7dcb05ac985cdc8b554c9ba3b5691ee7.png?wh=1582*1202\" alt=\"\"></p><p>对于中型测试，可以使用外部服务（比如文件操作、网络服务、数据库等），可以模拟也可以使用真实的服务。比如上面这个例子，就是真实的数据库访问类，但是用的内存数据库，这样可以提高性能，也可以减少依赖。</p><p>至于中型测试要不要使用模拟的服务，有个简单的标准，就是看能不能在单机情况下完成集成测试，如果可以就不需要模拟，如果不能，则要模拟避免外部依赖。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/ab/cfb41a9f0a490a3e1aa54555e4d35eab.png?wh=402*500\" alt=\"\" title=\"中型测试，图片来源：《Google软件测试之道》\"></p><h4>大型测试</h4><p>大型测试则是从较高的层次运行，把系统作为一个整体验证。会验证系统的一个或者所有子系统，从前端一直到后端数据存储。大型测试也叫系统测试或者端对端测试。</p><p>如果说要对用户注册写一个端对端测试的例子，那么看起来会像这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/73/b0/736f1fc4609ba5d5c408b243b30834b0.png?wh=1582*1490\" alt=\"\"></p><p>对于大型测试，通常会直接使用外部服务（比如文件操作、网络服务、数据库等），而不会去模拟。比如上面这个例子，就是直接访问测试环境的地址，通过测试库提供的API操作浏览器界面，输入测试的用户名密码，点击注册按钮，最后检查输出的结果是不是符合预期。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/af/30ab7a154bc2324f1d4b858e36ad03af.png?wh=392*514\" alt=\"\" title=\"大型测试，图片来源：《Google软件测试之道》\"></p><h4>区分测试类型的依据是什么？</h4><p>以上就是主要的自动测试类型了。捎带着补充一个测试类型，那就是契约测试，这个测试最近出现的频率比较高，主要是针对微服务的。其实就是让微服务在测试时，不需要依赖于引用的外部的微服务，在本地就可以模拟运行，同时又可以保证外部微服务的接口更新时，本地模拟的接口（契约）也能同步更新。对契约服务更多的说明可以参考这篇文章：《 <a href=\"http://insights.thoughtworks.cn/about-contract-test/\">聊一聊契约测试</a> 》</p><p>那么契约测试，属于大型测试还是中型测试呢？</p><p>Google针对这几种测试类型列了一张表，根据数据给出了明确区分：</p><p><a href=\"http://testing.googleblog.com/2010/12/test-sizes.html\"><img src=\"https://static001.geekbang.org/resource/image/a7/bd/a72fcd3b3f358e4512fa5694ad526dbd.png?wh=744*670\" alt=\"\" title=\"图片来源：Google Testing Blog\"></a></p><p>结合上面的表格其实就很好区分了：</p><ul>\n<li>小型测试，没有外部服务的依赖，都是要模拟的；</li>\n<li>中型测试，所有的测试几乎都不需要依赖其他服务器的资源，如果有涉及其他机器的服务，则本地模拟，这样本机就可以完成测试；</li>\n<li>大型测试，几乎不模拟，直接访问相关的外部服务。</li>\n</ul><p>所以现在你应该就知道契约测试，也是中型测试的一种了，因为它不需要依赖外部服务，本机就可以完成测试。</p><p>为什么中型测试这么看重“能单机运行”这一点呢？因为这样才方便在持续集成上跑中型测试，不用担心外部服务不稳定而导致测试失败的问题。</p><p>上面的表中还反映出一个事实：<strong>越是小型测试，执行速度越快，越是大型测试，执行速度越慢。</strong>通常一个项目的小型测试，不超过一分钟就能全部跑完，一个中型测试，包括一些环境准备的时间，可能要几分钟甚至更久，而大型测试就更久了。</p><p><strong>另外越是大型测试，写起来的成本也相应的会更高，所以一般项目中，小型测试最多，中型测试次之，大型测试最少。</strong>就像下面这张金字塔图一样。所以我们也常用测试金字塔来区分不同类型的测试粒度。</p><p><a href=\"http://martinfowler.com/bliki/TestPyramid.html\"><img src=\"https://static001.geekbang.org/resource/image/61/cf/616bb4cdb13884dde562b10568ba77cf.png?wh=560*300\" alt=\"\" title=\"测试金字塔，图片来源： TestPyramid\"> </a></p><p>如果你对测试类型很感兴趣，可以参考《<a href=\"http://insights.thoughtworks.cn/practical-test-pyramid/\">测试金字塔实战</a>》这篇文章作为补充。</p><h4>怎么写好自动化测试代码？</h4><p>很多人认为写自动化测试很复杂，其实测试代码其实写起来不难，包含四部分内容即可，也就是：准备、执行、断言和清理，我再把第一段代码示例贴一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/61/02aa850792c8fbb3c6bc626b9c944161.png?wh=1582*1166?wh=1582*1166\" alt=\"\"></p><p>第一步就是准备，例如创建实例，创建模拟对象；第二步就是执行要测试的方法，传入要测试的参数；第三步断言就是检查结果对不对，如果不对测试会失败；第四步还要对数据进行清理，这样不影响下一次测试。</p><p>上面还有几个测试代码示例，都是这样的四部分内容。</p><p>这是针对写一个自动化测试的代码结构。对于同一个功能，通常需要写几个自动化测试才完整。</p><p>一个完整的自动化测试要包括三个部分的测试：</p><ul>\n<li><strong>验证功能是不是正确：</strong>例如说输入正确的用户名和密码，要能正常注册账号；</li>\n<li><strong>覆盖边界条件：</strong> 比如说如果用户名或密码为空，应该不允许注册成功；</li>\n<li><strong>异常和错误处理：</strong>比如说使用一个已经用过的用户名，应该提示用户名被使用。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/05/a8/055004435b9bcd81cfa13050a8f42aa8.png?wh=1582*2534\" alt=\"\"></p><p>所以你看，写一个测试代码并没有你想的那么复杂，那还有什么理由不去写测试呢？</p><h2>如何为你的项目实施自动化测试？</h2><p>现在你了解了有哪些类型的测试，如何写自动化测试代码，也许迫不及待想在项目中实施自动化测试。</p><h4>选择好自动化测试框架</h4><p>要写好自动化测试代码，首先要找对自动测试化框架。不同的语言，不同的平台，测试的框架都不一样。好在现在搜索引擎很方便，根据“你的语言+自动测试框架”的关键字，就能找到很多的结果。这里我也帮你找了一些，供参考。</p><ul>\n<li>Web前端</li>\n</ul><p><a href=\"http://github.com/facebook/jest\">Jest</a>： Facebook的前端测试框架；<br>\n<a href=\"http://mochajs.org\">Mocha</a>：历史悠久的一个JS测试框架；<br>\n<a href=\"http://nightwatchjs.org\">Nighwatch</a>: 一个API很简单，但是功能很强大，可以直接操作浏览器的自动测试框架。</p><ul>\n<li>iOS开发</li>\n</ul><p>可以参考这篇文章《<a href=\"http://www.jianshu.com/p/047035416095\">iOS自动化测试框架对比</a>》。</p><ul>\n<li>安卓开发</li>\n</ul><p>可以参考这篇文章《<a href=\"http://juejin.im/entry/59ec4a8f6fb9a0450908a5fd\">Android 谈谈自动化测试</a>》。</p><h4>在持续集成环境上跑你的自动化测试</h4><p>选好自动化测试框架后，你的自动化测试代码，其中的小型测试和中型测试，最好要能在持续集成环境上运行起来。</p><p><strong>让自动化测试在持续集成上运行非常重要，只有这样才能最大化地发挥自动化测试的作用。</strong></p><p>因为持续集成，会强制测试通过才能合并代码，在合并代码之前就能知道测试是不是都通过了，可以帮助程序员获得最直观的反馈，知道哪里可能存在问题，这样才能真正做到防患于未然，把Bug杀死在摇篮里。</p><p>下图描述的就是自动测试配合持续集成的一个标准流程：</p><ul>\n<li>在提交代码前，先本地跑一遍单元测试，这个过程很快的，失败了需要继续修改；</li>\n<li>单元测试成功后就可以提交到源代码管理中心，提交后持续集成服务会自动运行完整的自动化测试，不仅包括小型测试，还有中型测试；</li>\n<li>通过所有的测试后，就可以合并到主分支，如果失败，需要本地修改后再次提交，直到通过所有的测试为止。</li>\n</ul><p><a href=\"http://medium.com/@nathankpeck/microservice-testing-unit-tests-d795194fe14e\"><img src=\"https://static001.geekbang.org/resource/image/7b/38/7bbc58d82864974ff2f9ec31347fa538.png?wh=1800*900\" alt=\"\" title=\"图片来源：Microservice Testing: Unit Tests\"></a></p><h4>新项目和老项目的不同策略</h4><p>如果是新项目，那么可以在一开始就保持一定的自动化测试代码的覆盖率，你甚至还可以试试测试驱动（TDD）的开发模式，也就是先写测试代码，再写实现代码，保证测试通过，最后对代码进行重构。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/66/67f2886f7dee6f24e5a833e6b4c94f66.png?wh=1426*836\" alt=\"\" title=\"图片来源：郑晔 《10x程序员工作法》专栏\"></p><p>如果是老项目，短期内要让自动化测试代码有覆盖是有难度的，可以先把主要的功能场景的中型测试写起来，这样可以保证这些主要功能不会轻易出问题。</p><p>后面在维护的过程中：</p><ul>\n<li>增加新功能的时候，同步对新功能增加自动化测试代码；</li>\n<li>修复Bug的时候，针对Bug补写自动化测试代码。</li>\n</ul><p>这样一点一点，把自动化测试代码覆盖率加上去。</p><h4>如果时间紧任务重，来不及写自动化测试怎么办？</h4><p>确实遇到时间紧的情况，我建议你要优先保证中型测试代码的覆盖，因为这样至少可以保证主要的用户使用场景是正常的。然后把来不及完成的部分，创建一个Ticket，放到任务跟踪系统里面，后面补上。</p><h2>总结</h2><p>今天我带你一起学习了关于自动化测试有关的知识。自动化测试，分为三类：</p><ul>\n<li>小型测试，主要针对函数或者类进行验证，不调用外部服务，执行速度快；</li>\n<li>中型测试，主要验证两个或多个模块应用之间的交互，可能会调用外部服务，尽可能让所有测试能在本机即可完成，执行速度比较快；</li>\n<li>大型测试，对服务整体进行验证，执行速度慢。</li>\n</ul><p>写好单元测试代码，基本结构就是：准备、执行、断言和清理；基本原则就是：</p><ul>\n<li>要验证正确性；</li>\n<li>覆盖边界条件；</li>\n<li>验证是否有异常和错误的处理。</li>\n</ul><p>自动化测试，一定要配合好持续集成，才能最大化发挥其效用。</p><p>对于自动化测试的实施，开头是最难的，因为需要花时间选择自动化测试框架，需要针对自动化测试框架搭建环境，甚至要去搭建持续集成环境。但搭建持续集成和搭建自动化测试环境，并且保证持续更新维护自动测试代码，这个技术投资，一定是你在项目中最有价值的投资之一。</p><p>搭建持续集成环境和集成自动化测试框架的事情，要作为一个正式的项目任务去做，当作一个很重要的任务去推进。</p><h2>课后思考</h2><p>你所在项目中，自动化测试代码覆盖如何？保持高覆盖率的主要阻力或者障碍是什么？打算怎么改善项目中自动化测试代码的覆盖？欢迎在留言区与我分享讨论。</p><p>感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":140808,"user_name":"勇闯天涯","can_delete":false,"product_type":"c1","uid":1496539,"ip_address":"","ucode":"3C0F9F7DA2CA9A","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/db/3f9499d1.jpg","comment_is_top":false,"comment_ctime":1571051732,"is_pvip":false,"replies":[{"id":"54570","content":"我对嵌入式和硬件不懂，没有这方面的经验。不过软件和硬件的开发，都属于工程开发，这里面其实有很多道理是相通的。<br><br>吴军老师写过一篇很好的文章：《把事情做好的三条边》，里面举了莱特兄弟发明飞机的例子，莱特兄弟在试飞之前，打造了一个风洞，进行了上千次的风洞试验，这样可以不需要上天就可以对飞机进行测试。而同时期的很多飞行发明家，自己打造了一个飞机就上天，很多都摔死了。<br><br>自动化测试其实有些类似于风洞试验，相对于手工测试，可以“低成本”、“高效率”的对产品进行反复的测试和验证，每次提交代码就可以自动运行测试，马上收到反馈。<br><br>从软件的自动化测试和飞机的风洞试验，可以找到一些可以借鉴的点：<br><br>1. 找到了一条低成本测试的方式<br>风洞试验，可以降低飞行测试的成本，不必付出生命代价就可以测试结果；<br>软件的自动化测试，刚开始写的时候是要付出一些成本的，但磨刀不误砍柴工，运行次数越多成本越低。<br><br>嵌入式系统是不是也可以找到一条低成本、模拟的、反复测试的方式？<br><br>2. 可以模块化的测试<br>软件的自动化测试，主要有单元测试、集成测试、端对端测试这三种自动化测试类型。单元测试成本是最低效率最高的，而集成测试和端对端测试成本要高很多，所以通常单元测试最多，集成测试次之，端对端测试最少。<br><br>我想莱特兄弟发明飞机飞机之前，在组装成整个飞机之前，对各个模块也是有单独的测试，而且测试的应该和自动化测试的比例也是类似。<br><br>那么嵌入式系统的自动化测试，是否也可以分模块化的进行测试？让模块的测试占更大比例？<br><br>3. 可以即时得到反馈<br>软件的自动化测试，尤其是结合CI（持续集成），可以即时得到反馈。每次提交代码修改，就会出发自动化测试任务，这样一旦有导致自动化测试失败的代码，能即时发现。<br>风洞试验也是类似的，飞机不用上天，通过风洞的测试，马上就能得到反馈。<br><br>嵌入式系统的自动化测试，是否也可以做到即时反馈？在作出修改后，能否马上得到测试结果的反馈？<br><br>以上三点是我认为可以从软件自动化测试借鉴的地方，希望有所帮助！","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1571113996,"ip_address":"","comment_id":140808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70290528468","product_id":100023701,"comment_content":"请教老师，我现在做的是嵌入式设备，要跟很多硬件外设打交道，这块的自动化测试和持续集成有什么好的建议吗？我看到文章中大多提到的都是互联网相关的方法和工具","like_count":16,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470571,"discussion_content":"我对嵌入式和硬件不懂，没有这方面的经验。不过软件和硬件的开发，都属于工程开发，这里面其实有很多道理是相通的。\n\n吴军老师写过一篇很好的文章：《把事情做好的三条边》，里面举了莱特兄弟发明飞机的例子，莱特兄弟在试飞之前，打造了一个风洞，进行了上千次的风洞试验，这样可以不需要上天就可以对飞机进行测试。而同时期的很多飞行发明家，自己打造了一个飞机就上天，很多都摔死了。\n\n自动化测试其实有些类似于风洞试验，相对于手工测试，可以“低成本”、“高效率”的对产品进行反复的测试和验证，每次提交代码就可以自动运行测试，马上收到反馈。\n\n从软件的自动化测试和飞机的风洞试验，可以找到一些可以借鉴的点：\n\n1. 找到了一条低成本测试的方式\n风洞试验，可以降低飞行测试的成本，不必付出生命代价就可以测试结果；\n软件的自动化测试，刚开始写的时候是要付出一些成本的，但磨刀不误砍柴工，运行次数越多成本越低。\n\n嵌入式系统是不是也可以找到一条低成本、模拟的、反复测试的方式？\n\n2. 可以模块化的测试\n软件的自动化测试，主要有单元测试、集成测试、端对端测试这三种自动化测试类型。单元测试成本是最低效率最高的，而集成测试和端对端测试成本要高很多，所以通常单元测试最多，集成测试次之，端对端测试最少。\n\n我想莱特兄弟发明飞机飞机之前，在组装成整个飞机之前，对各个模块也是有单独的测试，而且测试的应该和自动化测试的比例也是类似。\n\n那么嵌入式系统的自动化测试，是否也可以分模块化的进行测试？让模块的测试占更大比例？\n\n3. 可以即时得到反馈\n软件的自动化测试，尤其是结合CI（持续集成），可以即时得到反馈。每次提交代码修改，就会出发自动化测试任务，这样一旦有导致自动化测试失败的代码，能即时发现。\n风洞试验也是类似的，飞机不用上天，通过风洞的测试，马上就能得到反馈。\n\n嵌入式系统的自动化测试，是否也可以做到即时反馈？在作出修改后，能否马上得到测试结果的反馈？\n\n以上三点是我认为可以从软件自动化测试借鉴的地方，希望有所帮助！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571113996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91729,"user_name":"yuhao0x0628","can_delete":false,"product_type":"c1","uid":1332463,"ip_address":"","ucode":"BFD472974828A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/ef/3cdfd916.jpg","comment_is_top":false,"comment_ctime":1557101990,"is_pvip":true,"replies":[{"id":"32766","content":"赞，感谢回复！🙏","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557108716,"ip_address":"","comment_id":91729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35916840358","product_id":100023701,"comment_content":".net core 的同學，我們項目使用 NUint 進行單元測試，集成測試可以使用 WebApplicationFactory，模擬工具可以使用 Moq","like_count":8,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449005,"discussion_content":"赞，感谢回复！🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557108716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91242,"user_name":"易林林","can_delete":false,"product_type":"c1","uid":1049836,"ip_address":"","ucode":"27F84A3FCBBCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/ec/0539c89d.jpg","comment_is_top":false,"comment_ctime":1556943905,"is_pvip":false,"replies":[{"id":"32691","content":"首先，你要先搭建好自动化测试环境，让自动化测试代码能跑起来，最好最好要和CI（持续集成工具）整合在一起，每次提交代码CI都会跑自动测试，然后能看到运行结果。<br><br>然后，把自动化测试作为开发流程的一部分，比如说要代码审查和自动化测试通过后才能合并代码。这部分工作如何和CI集成会容易很多。<br><br>再有就是要培训，比如遇到不会写的，开始先带着他写几个，确保他学会了自己能写，然后下次代码审查的时候，看到缺了就要求补上，还不会就继续教，来不及写的就创建个TIcket跟踪起来。<br><br>简单来说，就是代码审查+CI+培训","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556951411,"ip_address":"","comment_id":91242,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621714977","product_id":100023701,"comment_content":"请教宝玉老师：团队成员的能力和素质参差不齐，如何有效的去组织和管理项目的自动化测试，自动化集成？","like_count":7,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448857,"discussion_content":"首先，你要先搭建好自动化测试环境，让自动化测试代码能跑起来，最好最好要和CI（持续集成工具）整合在一起，每次提交代码CI都会跑自动测试，然后能看到运行结果。\n\n然后，把自动化测试作为开发流程的一部分，比如说要代码审查和自动化测试通过后才能合并代码。这部分工作如何和CI集成会容易很多。\n\n再有就是要培训，比如遇到不会写的，开始先带着他写几个，确保他学会了自己能写，然后下次代码审查的时候，看到缺了就要求补上，还不会就继续教，来不及写的就创建个TIcket跟踪起来。\n\n简单来说，就是代码审查+CI+培训","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556951411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107525,"user_name":"Joey","can_delete":false,"product_type":"c1","uid":1013698,"ip_address":"","ucode":"D0A23AE264AC09","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/c2/1740f435.jpg","comment_is_top":false,"comment_ctime":1561551839,"is_pvip":false,"replies":[{"id":"38984","content":"我觉得对于API，应该要有版本的概念，也就是一个版本的API在确定前，多论证，多确认，确认后就不要做大的改动，大改动就用新版本，新版本上线时，旧API应该持续运行一段时间。<br><br>然后对于API修改后，应该当作一个小项目来看待，也就是要确保通知所有相关方，确定API切换的时间点，帮助调用房升级迁移到新版本。<br><br>最后再是自动化测试帮助检测。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1561604820,"ip_address":"","comment_id":107525,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23036388319","product_id":100023701,"comment_content":"请教宝玉老师：<br>消息类接口应该通过哪种方式高效、有效维护？<br><br>现状：<br>系统A属于联机类系统（高并发、低延迟），其中接口B与多个应用相关，当接口B的定义发生变化时，往往忘记通知相关方或者漏通知，从而引发生产事件。<br><br>尝试过的手段：<br>1、通过流程约束，需求评审阶段，强制增加是否有接口变化的评审，但是落实结果不理想，主要因为增加流程，开发人员嫌浪费精力，最后流于形式。<br>2、通过自动化手段约束，原则上要求接口必须在CI阶段有自动化用例守护，但是效果也不理想，自动化用例缺失或者开发人员懒的写自动化用例，最后流于形式。（我们部门研发和测试属于不同的团队，所以开发人员对于代码质量，都指望测试人员守好最后一道关卡。）","like_count":5,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455548,"discussion_content":"我觉得对于API，应该要有版本的概念，也就是一个版本的API在确定前，多论证，多确认，确认后就不要做大的改动，大改动就用新版本，新版本上线时，旧API应该持续运行一段时间。\n\n然后对于API修改后，应该当作一个小项目来看待，也就是要确保通知所有相关方，确定API切换的时间点，帮助调用房升级迁移到新版本。\n\n最后再是自动化测试帮助检测。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561604820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136026,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1569333323,"is_pvip":false,"replies":[{"id":"52587","content":"1. 一般来说是这么对应的<br>3. 没有必要达到100%，这样做成本太高，需要有一个平衡和取舍<br>4. 我们项目集成测试和单元测试都有。<br>我们前端项目基于React开发的，所以接口的测试基于React的单元测试接口。<br>各有几百个测试用例。<br>整个测试单元测试很快，一分钟不到，集成测试要长一点，5-10分钟。<br>5. 前端框架都有测试框架，比如React&#47;Vue都有单元测试框架，可以查阅其文档","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1569627776,"ip_address":"","comment_id":136026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14454235211","product_id":100023701,"comment_content":"1，小型、中型、大型自动化测试是不是对应单元、集成、系统测试。2、现在测试金字塔模型已经被防锤模型替代了，GUI自动化减少，Interface自动化测试增多。3、有没有必要小、中、大型自动化测试覆盖率均达到100％？4、开头你们前端改造项目自动化测试釆用GUI还是Interface？若是GUI，有多少个测试用例，每个测试用例执行时间有多长，所有测试用例执行有多长。若是Interface ，如何测试前端？5、前端有没有自动化测试框架？","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468425,"discussion_content":"1. 一般来说是这么对应的\n3. 没有必要达到100%，这样做成本太高，需要有一个平衡和取舍\n4. 我们项目集成测试和单元测试都有。\n我们前端项目基于React开发的，所以接口的测试基于React的单元测试接口。\n各有几百个测试用例。\n整个测试单元测试很快，一分钟不到，集成测试要长一点，5-10分钟。\n5. 前端框架都有测试框架，比如React/Vue都有单元测试框架，可以查阅其文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569627776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92132,"user_name":"熊猫","can_delete":false,"product_type":"c1","uid":1080238,"ip_address":"","ucode":"23C85117A16BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","comment_is_top":false,"comment_ctime":1557191430,"is_pvip":false,"replies":[{"id":"32962","content":"推荐：《how we test software at microsoft》中文版《微软的软件测试之道》<br><br>不过没有书其实你也可以找到很多资料的。比如我平时写前端程序，那么我会去GitHub或者Google，通过关键字、语言找跟我项目类似的开源项目，然后看其中有没有自动化测试写得好的，找到了(例如：reactstrap、electron-react-boilerplate、kitematic)就照葫芦画瓢好了，因为都是真实项目，所以特别简单有效，建议你也可以试试。<br><br>另外耐心一点，你也可以看到很多关于测试知识分享的技术文章，多看一看也有收获。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557202255,"ip_address":"","comment_id":92132,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442093318","product_id":100023701,"comment_content":"老师你好，请问下有没有介绍开发如何写好测试不错的书？","like_count":4,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449156,"discussion_content":"推荐：《how we test software at microsoft》中文版《微软的软件测试之道》\n\n不过没有书其实你也可以找到很多资料的。比如我平时写前端程序，那么我会去GitHub或者Google，通过关键字、语言找跟我项目类似的开源项目，然后看其中有没有自动化测试写得好的，找到了(例如：reactstrap、electron-react-boilerplate、kitematic)就照葫芦画瓢好了，因为都是真实项目，所以特别简单有效，建议你也可以试试。\n\n另外耐心一点，你也可以看到很多关于测试知识分享的技术文章，多看一看也有收获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557202255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91249,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1556951591,"is_pvip":false,"replies":[{"id":"32695","content":"1. 文章中的小型测试和中型测试都应该是开发来写的。大型测试一般是测试开发工程师来写，也可以开发写。<br>2. 这个必须要去学习的，<br>3. 单元测试不能使用真实数据库，必须要模拟数据访问的，否则速度太慢也不稳定<br>4. 集成测试一般用本机的数据库，或者也可以模拟数据。大型测试肯定用真实数据库的。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556988463,"ip_address":"","comment_id":91249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441853479","product_id":100023701,"comment_content":"宝哥，我想问一下：<br>1.开发哪些测试需要自己写的呀， “测试驱动开发”的概念，开发应该要会写测试吧？<br>  到底要求会写哪些测试？<br>2.现中小公司都没有自动化测试工程师，写好测试手工检查的多，怎搞？<br>  开发学一点selenium3自动化测试之类会不会好点？<br>3.单元测试是不是数据越简单越好，最好不使用数据库，在dao层组或map<br>4.集成测试和大型测试用数据库则比较好，对吗？","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448860,"discussion_content":"1. 文章中的小型测试和中型测试都应该是开发来写的。大型测试一般是测试开发工程师来写，也可以开发写。\n2. 这个必须要去学习的，\n3. 单元测试不能使用真实数据库，必须要模拟数据访问的，否则速度太慢也不稳定\n4. 集成测试一般用本机的数据库，或者也可以模拟数据。大型测试肯定用真实数据库的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556988463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94152,"user_name":"Liber","can_delete":false,"product_type":"c1","uid":1244231,"ip_address":"","ucode":"A5CBFDB15A7745","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/47/a4be64d8.jpg","comment_is_top":false,"comment_ctime":1557734008,"is_pvip":false,"replies":[{"id":"33832","content":"实际开发中，理论上来说一个场景大中小测试都要写的。<br><br>通常来说，开发写小型测试和中型测试，测试写大型测试，或者开发帮助写大型测试。<br><br>小型测试：中型测试：大型测试比例大约为 7:2:1<br><br>小型测试尽可能多覆盖，不要求100%，谷歌是85%<br><br>中型测试覆盖大部分用户使用场景<br><br>小型测试覆盖主要用户场景","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557849551,"ip_address":"","comment_id":94152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147668600","product_id":100023701,"comment_content":"宝玉老师你好，有个地方感觉有必要再展开谈谈：<br>以本文注册用户为例，本文分别对这个case写了小、中、大型测试用例，但实际开发过程中，如何权衡对一个场景是该小、中、大都写，还是只写部分？","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449932,"discussion_content":"实际开发中，理论上来说一个场景大中小测试都要写的。\n\n通常来说，开发写小型测试和中型测试，测试写大型测试，或者开发帮助写大型测试。\n\n小型测试：中型测试：大型测试比例大约为 7:2:1\n\n小型测试尽可能多覆盖，不要求100%，谷歌是85%\n\n中型测试覆盖大部分用户使用场景\n\n小型测试覆盖主要用户场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557849551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92531,"user_name":"Zebin","can_delete":false,"product_type":"c1","uid":1349992,"ip_address":"","ucode":"4FD55894AECEE3","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/68/821e1855.jpg","comment_is_top":false,"comment_ctime":1557293344,"is_pvip":false,"replies":[{"id":"33136","content":"单元测试你可以用gtest，集成测试工具你可以参考我之前 那篇集成测试的文章，比如说试试Jenkins或者Gitlab CI。<br><br>具体怎么搭你可以参考网上的教程，应该已经有很多了","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557336035,"ip_address":"","comment_id":92531,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10147227936","product_id":100023701,"comment_content":"宝玉老师，请教下，我们现在LINUX环境下开发项目，主要编程需要是C&#47;C++。<br>现在想搭建持续集成开发环境，有什么合适的工具可以推荐下吗","like_count":2,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449305,"discussion_content":"单元测试你可以用gtest，集成测试工具你可以参考我之前 那篇集成测试的文章，比如说试试Jenkins或者Gitlab CI。\n\n具体怎么搭你可以参考网上的教程，应该已经有很多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557336035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305921,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/41/4823e701.jpg","nickname":"蛙声一片","note":"","ucode":"856916A10D6097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2767,"discussion_content":"catch2也不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563928850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91283,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1556964005,"is_pvip":true,"replies":[{"id":"32694","content":"狭义的持续集成不包括发布，主要指集成，持续的（每次提交代码变更都触发，频繁的提交）对代码进行集成（合并到主干），但集成前要确保自动化测试通过。<br><br>广义的持续集成还包括部署，也就是集成后自动部署测试环境(持续交付)或者生产环境（持续部署）。<br><br>在《26 | 持续交付：如何做到随时发布新版本到生产环境？》这一篇里面有详细介绍。<br>","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556988085,"ip_address":"","comment_id":91283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146898597","product_id":100023701,"comment_content":"老师，持续集成怎么理解呢，我看知乎上说就是团队成员在一天内多次进行编译，发布或自动化测试","like_count":2,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448868,"discussion_content":"狭义的持续集成不包括发布，主要指集成，持续的（每次提交代码变更都触发，频繁的提交）对代码进行集成（合并到主干），但集成前要确保自动化测试通过。\n\n广义的持续集成还包括部署，也就是集成后自动部署测试环境(持续交付)或者生产环境（持续部署）。\n\n在《26 | 持续交付：如何做到随时发布新版本到生产环境？》这一篇里面有详细介绍。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556988085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182414,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1314195,"ip_address":"","ucode":"C6454F1D848055","user_header":"","comment_is_top":false,"comment_ctime":1582783542,"is_pvip":false,"replies":[{"id":"71314","content":"Jenkins有很多丰富的插件，你可以根据项目情况寻找适合你的源代码插件（例如Team Foundation Server Plug-in）、编译插件（例如MSBuild Plugin）、单元测试插件（例如NUnit plugin）<br><br>比如可以参考这篇教程：<br>https:&#47;&#47;www.swtestacademy.com&#47;jenkins-dotnet-integration&#47;<br><br>你也可以根据关键字“.Net unit test Jenkins” Google到很多相关文章","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1583289389,"ip_address":"","comment_id":182414,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5877750838","product_id":100023701,"comment_content":"您好，请问下，我在.net framework平台下，单元测试工具如何选择（能与jenkins接合的）","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485331,"discussion_content":"Jenkins有很多丰富的插件，你可以根据项目情况寻找适合你的源代码插件（例如Team Foundation Server Plug-in）、编译插件（例如MSBuild Plugin）、单元测试插件（例如NUnit plugin）\n\n比如可以参考这篇教程：\nhttps://www.swtestacademy.com/jenkins-dotnet-integration/\n\n你也可以根据关键字“.Net unit test Jenkins” Google到很多相关文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583289389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314195,"avatar":"","nickname":"Sam","note":"","ucode":"C6454F1D848055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195598,"discussion_content":"好的，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583289951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91902,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1557131714,"is_pvip":false,"replies":[{"id":"32866","content":"100%覆盖这个我觉得可以作为一种理想追求，但是没必要追求极致，还是要在进度和质量之间有个平衡比较好，毕竟进度也很重要。<br><br>另外对于前端业务，我更重视集成测试的覆盖，对于主要业务场景集成测试覆盖到位后，单元测试也就有比较多的覆盖，相对性价比更高，然后再逐步补充单元测试的覆盖率。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557156297,"ip_address":"","comment_id":91902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852099010","product_id":100023701,"comment_content":"老师你好，各种类型的测试覆盖率你们一般采用什么指标？个人感觉在理想的情况下最好是做到百分百覆盖率","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449072,"discussion_content":"100%覆盖这个我觉得可以作为一种理想追求，但是没必要追求极致，还是要在进度和质量之间有个平衡比较好，毕竟进度也很重要。\n\n另外对于前端业务，我更重视集成测试的覆盖，对于主要业务场景集成测试覆盖到位后，单元测试也就有比较多的覆盖，相对性价比更高，然后再逐步补充单元测试的覆盖率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557156297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91587,"user_name":"yellowcloud","can_delete":false,"product_type":"c1","uid":1397597,"ip_address":"","ucode":"508967ED4BBEFC","user_header":"https://static001.geekbang.org/account/avatar/00/15/53/5d/46d369e5.jpg","comment_is_top":false,"comment_ctime":1557057504,"is_pvip":false,"replies":[{"id":"32765","content":"如果是单元测试，.Net Core应该自带了，例如：《.NET Core 和 .NET Standard 单元测试最佳做法》https:&#47;&#47;docs.microsoft.com&#47;zh-cn&#47;dotnet&#47;core&#47;testing&#47;unit-testing-best-practices<br><br>你可以换一下关键字：&quot;.Net core unit testing&quot;, &quot;.Net core integration tests&quot;。<br><br>这一篇《Integration tests in ASP.NET Core》https:&#47;&#47;docs.microsoft.com&#47;en-us&#47;aspnet&#47;core&#47;test&#47;integration-tests 写的很详细，还有实例。<br><br>另外不知道你的具体是什么类型项目，Web还是Winform？","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557107056,"ip_address":"","comment_id":91587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852024800","product_id":100023701,"comment_content":"宝玉老师，我们现在使用的框架是.net core,语言是C#，用其进行后端开发。能否推荐一下好的自动化测试框架。我根据您的检索方法语言+自动化测试框架找到的是RedwoodHQ，不知道它在实际使用中是否可行。","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448952,"discussion_content":"如果是单元测试，.Net Core应该自带了，例如：《.NET Core 和 .NET Standard 单元测试最佳做法》https://docs.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices\n\n你可以换一下关键字：&amp;quot;.Net core unit testing&amp;quot;, &amp;quot;.Net core integration tests&amp;quot;。\n\n这一篇《Integration tests in ASP.NET Core》https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests 写的很详细，还有实例。\n\n另外不知道你的具体是什么类型项目，Web还是Winform？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557107056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91401,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1557025592,"is_pvip":false,"replies":[{"id":"32769","content":"网站安全会在后面一篇有详细讲。如果你现在遇到了入侵，你可以查一下操作的日志看看，看登录的IP、账号，看是不是有什么线索。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557109148,"ip_address":"","comment_id":91401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851992888","product_id":100023701,"comment_content":"看到bug我又想起了网站安全，宝哥，像我们中小公司网站安全也是运维负责的<br>一般网站安全怎做呀？如果服务器linux(centos)被入侵一般怎么查别人是怎么入侵的？<br>宝哥您了解这方面的吗？小公司运维真是什么都做，打杂的~~","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448907,"discussion_content":"网站安全会在后面一篇有详细讲。如果你现在遇到了入侵，你可以查一下操作的日志看看，看登录的IP、账号，看是不是有什么线索。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557109148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91291,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1556965312,"is_pvip":false,"replies":[{"id":"32696","content":"可以试试 Appnium或者Ranorex。不过我没直接用过，不好评价是不是适合你，建议你先试试看。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556989652,"ip_address":"","comment_id":91291,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851932608","product_id":100023701,"comment_content":"宝玉老师，我想问一下，针对桌面开发的界面自动化测试一般是怎么进行的","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448869,"discussion_content":"可以试试 Appnium或者Ranorex。不过我没直接用过，不好评价是不是适合你，建议你先试试看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556989652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350268,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1656737849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656737849","product_id":100023701,"comment_content":"自动化测试，一定要配合好持续集成，才能最大化发挥其效用。--记下来","like_count":0},{"had_liked":false,"id":336676,"user_name":"。。。","can_delete":false,"product_type":"c1","uid":1035567,"ip_address":"","ucode":"6882BABE9C3D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/2f/f4adcb41.jpg","comment_is_top":false,"comment_ctime":1646287149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646287149","product_id":100023701,"comment_content":"老师，一般，都比较常看哪些网站的文章","like_count":0},{"had_liked":false,"id":318818,"user_name":"Ho","can_delete":false,"product_type":"c1","uid":2823833,"ip_address":"","ucode":"DC3861F815B3CA","user_header":"https://static001.geekbang.org/account/avatar/00/2b/16/99/71f159ed.jpg","comment_is_top":false,"comment_ctime":1635434150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635434150","product_id":100023701,"comment_content":"老师讲的真好！","like_count":0},{"had_liked":false,"id":275341,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1611478747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611478747","product_id":100023701,"comment_content":"老师你好 之前我遇到的开发流程是本地代码修改完毕后 本地构建 构建过程中会跑单元测试 没问题后 再提交分支 然后再发起pull request 合进代码线后 jekins会触发一次与提交代码相关的服务的构建 这个过程中会构建代码并且跑单元测试  如果没过 服务会挂掉。 我想问下如果这里要加业务模块的自动化测试的话 也是在这次构建中执行的么? 还有我看老师你说的好像是单元测试或者自动化测试未通过是不允许合并主干的  但是我们之前是合并主干之后才去跑测试 这里是不是存在问题?","like_count":0},{"had_liked":false,"id":201437,"user_name":"wanghua","can_delete":false,"product_type":"c1","uid":1047371,"ip_address":"","ucode":"093A0555290DA2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2Q5YYVUmVHh9yT84P1uib637fPAwUCaxrUujFJnslfa6MuuTCyXl7kodgokd6DAHsYzrib38ztjlXgGR7k3RIOjA/132","comment_is_top":false,"comment_ctime":1585788777,"is_pvip":true,"replies":[{"id":"75514","content":"不需要每一个函数都写，保持一定的覆盖即可。通常你在测试一个函数的时候，其调用的函数也可以部分覆盖到。所以各种语言都有计算测试覆盖率的工具。<br><br>测试时，可以站在用户使用场景去思考，对于主要使用场景尽可能覆盖测试，在此基础上，尽可能保证高的测试覆盖率。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1585896045,"ip_address":"","comment_id":201437,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585788777","product_id":100023701,"comment_content":"对于单元测试，需要每个函数都写吗，这样工作量好大，有什么方法确定哪些该写，哪些不用写呢？","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490333,"discussion_content":"不需要每一个函数都写，保持一定的覆盖即可。通常你在测试一个函数的时候，其调用的函数也可以部分覆盖到。所以各种语言都有计算测试覆盖率的工具。\n\n测试时，可以站在用户使用场景去思考，对于主要使用场景尽可能覆盖测试，在此基础上，尽可能保证高的测试覆盖率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585896045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201433,"user_name":"wanghua","can_delete":false,"product_type":"c1","uid":1047371,"ip_address":"","ucode":"093A0555290DA2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2Q5YYVUmVHh9yT84P1uib637fPAwUCaxrUujFJnslfa6MuuTCyXl7kodgokd6DAHsYzrib38ztjlXgGR7k3RIOjA/132","comment_is_top":false,"comment_ctime":1585788518,"is_pvip":true,"replies":[{"id":"75601","content":"## 集成测试<br>集成测试就是指“跨单元”的测试。虽然说你程序各个单元工作正常，但是组合在一起就不一定工作正常，所以需要通过集成测试，来验证各个单元是否能一起正常工作。<br><br>举例来说，你一个三层架构（数据访问层、业务逻辑层、UI层）的网站，有一个登录模块，那么你可以从业务逻辑层去做集成测试，测试的时候，业务逻辑层会访问数据访问层，如果测试正常，说明两个模块在一起工作是正常的。<br><br>也许你会问：既然这样的话，我直接写UI层的测试不就好了？反正UI层会访问业务逻辑层，业务逻辑会访问数据访问层，这样写一个测试都测试到了。<br><br>UI层的测试成本相对是要高很多的（参考本文测试金字塔图），几百个UI测试可能要十几分钟，而几百个单元测试可能几秒钟就跑完了。另外只测试UI的话，很多模块无法覆盖。所以通常会多种测试配合一起。<br><br>## 接口测试<br><br>接口测试可以算是集成测试的一种，它包括两种测试类型：狭义上指的是直接针对应用程序接口（也称API）的功能进行的测试；广义上指集成测试中，通过调用API去测试。<br><br>现在很多网站或者后台服务，都提供了API，REST或者GraphQL这种。UI测试相对比较麻烦，而API测试就要简单高效很多，不会写脚本的话，拿PostMan这种工具也可以做接口测试。<br><br>## 契约测试<br><br>契约测试这个要稍微难理解一点。Thoughtworks有一篇文章写的非常好：《聊一聊契约测试<br>》https:&#47;&#47;insights.thoughtworks.cn&#47;about-contract-test&#47;<br><br>契约测试的使用场景是服务之间的功能进行的测试，尤其是在微服务架构下。它既不算是接口测试，也不算是集成测试，而是为集成测试提供的一种有效的测试方法。<br><br>举例来说，服务A要调用服务B的API，现在要对服务A做集成测试，如果测试时，服务A直接去调用服务B，那么不仅慢，而且服务A的测试很可能因为服务B不稳定而导致失败。所以最好就是能测试服务A时，在本地模拟一个服务B出来，这样速度快，也稳定可靠。<br><br>但本地模拟一个服务B，问题在于服务B如果升级了，API修改了，这会导致服务A本地集成测试正常，一部署到测试环境或者生产环境就挂了，这显然就达不到集成测试的目的。<br><br>要解决这个问题，最好就是服务B在每次上线发布的时候，都同时发布一份契约，可以理解为服务B最新API的本地模拟。服务A在做集成测试时，获取最新的契约，也就是最新的API模拟，这样既可以兼顾测试速度，又可以保证和服务A的同步。<br>","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1585987389,"ip_address":"","comment_id":201433,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585788518","product_id":100023701,"comment_content":"对于集成测试，接口测试，契约测试等概念，还是不太理解他们差别在哪里，老师是怎么理解的呢？","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490332,"discussion_content":"## 集成测试\n集成测试就是指“跨单元”的测试。虽然说你程序各个单元工作正常，但是组合在一起就不一定工作正常，所以需要通过集成测试，来验证各个单元是否能一起正常工作。\n\n举例来说，你一个三层架构（数据访问层、业务逻辑层、UI层）的网站，有一个登录模块，那么你可以从业务逻辑层去做集成测试，测试的时候，业务逻辑层会访问数据访问层，如果测试正常，说明两个模块在一起工作是正常的。\n\n也许你会问：既然这样的话，我直接写UI层的测试不就好了？反正UI层会访问业务逻辑层，业务逻辑会访问数据访问层，这样写一个测试都测试到了。\n\nUI层的测试成本相对是要高很多的（参考本文测试金字塔图），几百个UI测试可能要十几分钟，而几百个单元测试可能几秒钟就跑完了。另外只测试UI的话，很多模块无法覆盖。所以通常会多种测试配合一起。\n\n## 接口测试\n\n接口测试可以算是集成测试的一种，它包括两种测试类型：狭义上指的是直接针对应用程序接口（也称API）的功能进行的测试；广义上指集成测试中，通过调用API去测试。\n\n现在很多网站或者后台服务，都提供了API，REST或者GraphQL这种。UI测试相对比较麻烦，而API测试就要简单高效很多，不会写脚本的话，拿PostMan这种工具也可以做接口测试。\n\n## 契约测试\n\n契约测试这个要稍微难理解一点。Thoughtworks有一篇文章写的非常好：《聊一聊契约测试\n》https://insights.thoughtworks.cn/about-contract-test/\n\n契约测试的使用场景是服务之间的功能进行的测试，尤其是在微服务架构下。它既不算是接口测试，也不算是集成测试，而是为集成测试提供的一种有效的测试方法。\n\n举例来说，服务A要调用服务B的API，现在要对服务A做集成测试，如果测试时，服务A直接去调用服务B，那么不仅慢，而且服务A的测试很可能因为服务B不稳定而导致失败。所以最好就是能测试服务A时，在本地模拟一个服务B出来，这样速度快，也稳定可靠。\n\n但本地模拟一个服务B，问题在于服务B如果升级了，API修改了，这会导致服务A本地集成测试正常，一部署到测试环境或者生产环境就挂了，这显然就达不到集成测试的目的。\n\n要解决这个问题，最好就是服务B在每次上线发布的时候，都同时发布一份契约，可以理解为服务B最新API的本地模拟。服务A在做集成测试时，获取最新的契约，也就是最新的API模拟，这样既可以兼顾测试速度，又可以保证和服务A的同步。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585987389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196707,"user_name":"Harold","can_delete":false,"product_type":"c1","uid":1161249,"ip_address":"","ucode":"E6EC6E0201D48C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/21/41823347.jpg","comment_is_top":false,"comment_ctime":1585304407,"is_pvip":false,"replies":[{"id":"75516","content":"是的，Leader很重要，但是不管是什么样的Leader，开发人员都可以去自己争取这样的时间，并且力所能及的写上一些自动化测试。<br><br>最重要的是，你做得好了，自然也会成为Leader，当你做Leader后，就可以尽可能的给团队成员留出来写自动化测试的时间。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1585896225,"ip_address":"","comment_id":196707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585304407","product_id":100023701,"comment_content":"是否能执行自动化测试，完全看带团队的Leader，很多Leader不给开发留写测试代码的时间，开发进度又很赶，程序员根本没时间写。等项目上线了，大家都忽略了","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489363,"discussion_content":"是的，Leader很重要，但是不管是什么样的Leader，开发人员都可以去自己争取这样的时间，并且力所能及的写上一些自动化测试。\n\n最重要的是，你做得好了，自然也会成为Leader，当你做Leader后，就可以尽可能的给团队成员留出来写自动化测试的时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585896225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167739,"user_name":"董飞","can_delete":false,"product_type":"c1","uid":1693828,"ip_address":"","ucode":"4A4A13C4A971E3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6Be8vjNk03LEXMl52vONOQvdKTL1MWPR6OsAGEDsHIZXw9FibW8c4YtNL6HAmB8wRkDNIEx15xawJ9PWLW4y1UA/132","comment_is_top":false,"comment_ctime":1577926429,"is_pvip":false,"replies":[{"id":"65530","content":"开发写自动化测试，这是个事实，也是个趋势。像亚马逊、微软等很多公司都已经没有专职测试了，都是开发自己写自动化测试，部署测试环境后相互测试。<br><br>然而现在测试工作还是有很多开发人员做不到或者做不好的地方，比如说撰写测试用例、开发无法测试好自己写的代码、一些无法自动化测试的测试，像UI实现和UI设计之间的差异等。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1578255861,"ip_address":"","comment_id":167739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577926429","product_id":100023701,"comment_content":"老师，开发把自动化做了，还要我们测试干什么？自动化测试一般都是测试做的啊？","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479970,"discussion_content":"开发写自动化测试，这是个事实，也是个趋势。像亚马逊、微软等很多公司都已经没有专职测试了，都是开发自己写自动化测试，部署测试环境后相互测试。\n\n然而现在测试工作还是有很多开发人员做不到或者做不好的地方，比如说撰写测试用例、开发无法测试好自己写的代码、一些无法自动化测试的测试，像UI实现和UI设计之间的差异等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578255861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91371,"user_name":"miketan","can_delete":false,"product_type":"c1","uid":1005814,"ip_address":"","ucode":"10C7EAF7D4A3D9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/f6/07ca7f70.jpg","comment_is_top":false,"comment_ctime":1557018166,"is_pvip":false,"replies":[{"id":"32867","content":"👍感谢分享","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1557156982,"ip_address":"","comment_id":91371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557018166","product_id":100023701,"comment_content":"我们项目中主要是通过单元测试和集成测试来做自动化测试。单元测试主要做最外层的代码覆盖率要求。","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448898,"discussion_content":"👍感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557156982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}