{"id":100576,"title":"33 | 字符设备（下）：如何建立直销模式？","content":"<p>上一节，我们讲了一个设备能够被打开、能够读写，主流的功能基本就完成了。我们讲输入输出设备的时候说到，如果一个设备有事情需要通知操作系统，会通过中断和设备驱动程序进行交互，今天我们就来解析中断处理机制。</p><p>鼠标就是通过中断，将自己的位置和按键信息，传递给设备驱动程序。</p><pre><code>static int logibm_open(struct input_dev *dev)\n{\n\tif (request_irq(logibm_irq, logibm_interrupt, 0, &quot;logibm&quot;, NULL)) {\n\t\tprintk(KERN_ERR &quot;logibm.c: Can't allocate irq %d\\n&quot;, logibm_irq);\n\t\treturn -EBUSY;\n\t}\n\toutb(LOGIBM_ENABLE_IRQ, LOGIBM_CONTROL_PORT);\n\treturn 0;\n}\n\n\nstatic irqreturn_t logibm_interrupt(int irq, void *dev_id)\n{\n\tchar dx, dy;\n\tunsigned char buttons;\n\n\n\toutb(LOGIBM_READ_X_LOW, LOGIBM_CONTROL_PORT);\n\tdx = (inb(LOGIBM_DATA_PORT) &amp; 0xf);\n\toutb(LOGIBM_READ_X_HIGH, LOGIBM_CONTROL_PORT);\n\tdx |= (inb(LOGIBM_DATA_PORT) &amp; 0xf) &lt;&lt; 4;\n\toutb(LOGIBM_READ_Y_LOW, LOGIBM_CONTROL_PORT);\n\tdy = (inb(LOGIBM_DATA_PORT) &amp; 0xf);\n\toutb(LOGIBM_READ_Y_HIGH, LOGIBM_CONTROL_PORT);\n\tbuttons = inb(LOGIBM_DATA_PORT);\n\tdy |= (buttons &amp; 0xf) &lt;&lt; 4;\n\tbuttons = ~buttons &gt;&gt; 5;\n\n\n\tinput_report_rel(logibm_dev, REL_X, dx);\n\tinput_report_rel(logibm_dev, REL_Y, dy);\n\tinput_report_key(logibm_dev, BTN_RIGHT,  buttons &amp; 1);\n\tinput_report_key(logibm_dev, BTN_MIDDLE, buttons &amp; 2);\n\tinput_report_key(logibm_dev, BTN_LEFT,   buttons &amp; 4);\n\tinput_sync(logibm_dev);\n\n\n\toutb(LOGIBM_ENABLE_IRQ, LOGIBM_CONTROL_PORT);\n\treturn IRQ_HANDLED\n</code></pre><p>要处理中断，需要有一个中断处理函数。定义如下：</p><pre><code>irqreturn_t (*irq_handler_t)(int irq, void * dev_id);\n\n\n/**\n * enum irqreturn\n * @IRQ_NONE\t\tinterrupt was not from this device or was not handled\n * @IRQ_HANDLED\t\tinterrupt was handled by this device\n * @IRQ_WAKE_THREAD\thandler requests to wake the handler thread\n */\nenum irqreturn {\n\tIRQ_NONE\t\t= (0 &lt;&lt; 0),\n\tIRQ_HANDLED\t\t= (1 &lt;&lt; 0),\n\tIRQ_WAKE_THREAD\t\t= (1 &lt;&lt; 1),\n};\n</code></pre><p>其中，irq是一个整数，是中断信号。dev_id是一个void *的通用指针，主要用于区分同一个中断处理函数对于不同设备的处理。</p><p>这里的返回值有三种：IRQ_NONE表示不是我的中断，不归我管；IRQ_HANDLED表示处理完了的中断；IRQ_WAKE_THREAD表示有一个进程正在等待这个中断，中断处理完了，应该唤醒它。</p><p>上面的例子中，logibm_interrupt这个中断处理函数，先是获取了x和y的移动坐标，以及左中右的按键，上报上去，然后返回IRQ_HANDLED，这表示处理完毕。</p><p>其实，写一个真正生产用的中断处理程序还是很复杂的。当一个中断信号A触发后，正在处理的过程中，这个中断信号A是应该暂时关闭的，这样是为了防止再来一个中断信号A，在当前的中断信号A的处理过程中插一杠子。但是，这个暂时关闭的时间应该多长呢？</p><!-- [[[read_end]]] --><p>如果太短了，应该原子化处理完毕的没有处理完毕，又被另一个中断信号A中断了，很多操作就不正确了；如果太长了，一直关闭着，新的中断信号A进不来，系统就显得很慢。所以，很多中断处理程序将整个中断要做的事情分成两部分，称为上半部和下半部，或者成为关键处理部分和延迟处理部分。在中断处理函数中，仅仅处理关键部分，完成了就将中断信号打开，使得新的中断可以进来，需要比较长时间处理的部分，也即延迟部分，往往通过工作队列等方式慢慢处理。</p><p>这个写起来可以是一本书了，推荐你好好读一读《Linux Device Drivers》这本书，这里我就不详细介绍了。</p><p>有了中断处理函数，接下来要调用request_irq来注册这个中断处理函数。request_irq有这样几个参数：</p><ul>\n<li>unsigned int irq是中断信号；</li>\n<li>irq_handler_t handler是中断处理函数；</li>\n<li>unsigned long flags是一些标识位；</li>\n<li>const char *name是设备名称；</li>\n<li>void *dev这个通用指针应该和中断处理函数的void *dev相对应。</li>\n</ul><pre><code>static inline int __must_check\nrequest_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev)\n{\n\treturn request_threaded_irq(irq, handler, NULL, flags, name, dev);\n}\n</code></pre><p>中断处理函数被注册到哪里去呢？让我们沿着request_irq看下去。request_irq调用的是request_threaded_irq。代码如下：</p><pre><code>int request_threaded_irq(unsigned int irq, irq_handler_t handler,\n\t\t\t irq_handler_t thread_fn, unsigned long irqflags,\n\t\t\t const char *devname, void *dev_id)\n{\n\tstruct irqaction *action;\n\tstruct irq_desc *desc;\n\tint retval;\n......\n\tdesc = irq_to_desc(irq);\n......\n\taction = kzalloc(sizeof(struct irqaction), GFP_KERNEL);\n\taction-&gt;handler = handler;\n\taction-&gt;thread_fn = thread_fn;\n\taction-&gt;flags = irqflags;\n\taction-&gt;name = devname;\n\taction-&gt;dev_id = dev_id;\n......\n\tretval = __setup_irq(irq, desc, action);\n......\n}\n</code></pre><p>对于每一个中断，都有一个对中断的描述结构struct irq_desc。它有一个重要的成员变量是struct irqaction，用于表示处理这个中断的动作。如果我们仔细看这个结构，会发现，它里面有next指针，也就是说，这是一个链表，对于这个中断的所有处理动作，都串在这个链表上。</p><pre><code>struct irq_desc {\n......\n\tstruct irqaction\t*action;\t/* IRQ action list */\n......\n\tstruct module\t\t*owner;\n\tconst char\t\t*name;\n};\n\n\n/**\n * struct irqaction - per interrupt action descriptor\n * @handler:\tinterrupt handler function\n * @name:\tname of the device\n * @dev_id:\tcookie to identify the device\n * @percpu_dev_id:\tcookie to identify the device\n * @next:\tpointer to the next irqaction for shared interrupts\n * @irq:\tinterrupt number\n * @flags:\tflags (see IRQF_* above)\n * @thread_fn:\tinterrupt handler function for threaded interrupts\n * @thread:\tthread pointer for threaded interrupts\n * @secondary:\tpointer to secondary irqaction (force threading)\n * @thread_flags:\tflags related to @thread\n * @thread_mask:\tbitmask for keeping track of @thread activity\n * @dir:\tpointer to the proc/irq/NN/name entry\n */\nstruct irqaction {\n\tirq_handler_t\t\thandler;\n\tvoid\t\t\t*dev_id;\n\tvoid __percpu\t\t*percpu_dev_id;\n\tstruct irqaction\t*next;\n\tirq_handler_t\t\tthread_fn;\n\tstruct task_struct\t*thread;\n\tstruct irqaction\t*secondary;\n\tunsigned int\t\tirq;\n\tunsigned int\t\tflags;\n\tunsigned long\t\tthread_flags;\n\tunsigned long\t\tthread_mask;\n\tconst char\t\t*name;\n\tstruct proc_dir_entry\t*dir;\n};\n</code></pre><p>每一个中断处理动作的结构struct irqaction，都有以下成员：</p><ul>\n<li>中断处理函数handler；</li>\n<li>void *dev_id为设备id；</li>\n<li>irq为中断信号；</li>\n<li>如果中断处理函数在单独的线程运行，则有thread_fn是线程的执行函数，thread是线程的task_struct。</li>\n</ul><p>在request_threaded_irq函数中，irq_to_desc根据中断信号查找中断描述结构。如何查找呢？这就要区分情况。一般情况下，所有的struct irq_desc都放在一个数组里面，我们直接按下标查找就可以了。如果配置了CONFIG_SPARSE_IRQ，那中断号是不连续的，就不适合用数组保存了，</p><p>我们可以放在一棵基数树上。我们不是第一次遇到这个数据结构了。这种结构对于从某个整型key找到value速度很快，中断信号irq是这个整数。通过它，我们很快就能定位到对应的struct irq_desc。</p><pre><code>#ifdef CONFIG_SPARSE_IRQ\nstatic RADIX_TREE(irq_desc_tree, GFP_KERNEL);\nstruct irq_desc *irq_to_desc(unsigned int irq)\n{\n\treturn radix_tree_lookup(&amp;irq_desc_tree, irq);\n}\n#else /* !CONFIG_SPARSE_IRQ */\nstruct irq_desc irq_desc[NR_IRQS] __cacheline_aligned_in_smp = {\n\t[0 ... NR_IRQS-1] = {\n\t}\n};\nstruct irq_desc *irq_to_desc(unsigned int irq)\n{\n\treturn (irq &lt; NR_IRQS) ? irq_desc + irq : NULL;\n}\n#endif /* !CONFIG_SPARSE_IRQ */\n</code></pre><p>为什么中断信号会有稀疏，也就是不连续的情况呢？这里需要说明一下，这里的irq并不是真正的、物理的中断信号，而是一个抽象的、虚拟的中断信号。因为物理的中断信号和硬件关联比较大，中断控制器也是各种各样的。</p><p>作为内核，我们不可能写程序的时候，适配各种各样的硬件中断控制器，因而就需要有一层中断抽象层。这里虚拟中断信号到中断描述结构的映射，就是抽象中断层的主要逻辑。</p><p>下面我们讲真正中断响应的时候，会涉及物理中断信号。可以想象，如果只有一个CPU，一个中断控制器，则基本能够保证从物理中断信号到虚拟中断信号的映射是线性的，这样用数组表示就没啥问题，但是如果有多个CPU，多个中断控制器，每个中断控制器各有各的物理中断信号，就没办法保证虚拟中断信号是连续的，所以就要用到基数树了。</p><p>接下来，request_threaded_irq函数分配了一个struct irqaction，并且初始化它，接着调用__setup_irq。在这个函数里面，如果struct irq_desc里面已经有struct irqaction了，我们就将新的struct irqaction挂在链表的末端。如果设定了以单独的线程运行中断处理函数，setup_irq_thread就会创建这个内核线程，wake_up_process会唤醒它。</p><pre><code>static int\n__setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)\n{\n\tstruct irqaction *old, **old_ptr;\n\tunsigned long flags, thread_mask = 0;\n\tint ret, nested, shared = 0;\n......\n\tnew-&gt;irq = irq;\n......\n\t/*\n\t * Create a handler thread when a thread function is supplied\n\t * and the interrupt does not nest into another interrupt\n\t * thread.\n\t */\n\tif (new-&gt;thread_fn &amp;&amp; !nested) {\n\t\tret = setup_irq_thread(new, irq, false);\n\t}\n......\n\told_ptr = &amp;desc-&gt;action;\n\told = *old_ptr;\n\tif (old) {\n\t\t/* add new interrupt at end of irq queue */\n\t\tdo {\n\t\t\tthread_mask |= old-&gt;thread_mask;\n\t\t\told_ptr = &amp;old-&gt;next;\n\t\t\told = *old_ptr;\n\t\t} while (old);\n\t}\n......\n\t*old_ptr = new;\n......\n\tif (new-&gt;thread)\n\t\twake_up_process(new-&gt;thread);\n......\n}\n\n\nstatic int\nsetup_irq_thread(struct irqaction *new, unsigned int irq, bool secondary)\n{\n\tstruct task_struct *t;\n\tstruct sched_param param = {\n\t\t.sched_priority = MAX_USER_RT_PRIO/2,\n\t};\n\n\n\tt = kthread_create(irq_thread, new, &quot;irq/%d-%s&quot;, irq, new-&gt;name);\n\tsched_setscheduler_nocheck(t, SCHED_FIFO, &amp;param);\n\tget_task_struct(t);\n\tnew-&gt;thread = t;\n......\n\treturn 0;\n</code></pre><p>至此为止，request_irq完成了它的使命。总结来说，它就是根据中断信号irq，找到基数树上对应的irq_desc，然后将新的irqaction挂在链表上。</p><p>接下来，我们就来看，真正中断来了的时候，会发生一些什么。</p><p>真正中断的发生还是要从硬件开始。这里面有四个层次。</p><ul>\n<li>第一个层次是外部设备给中断控制器发送物理中断信号。</li>\n<li>第二个层次是中断控制器将物理中断信号转换成为中断向量interrupt vector，发给各个CPU。</li>\n<li>第三个层次是每个CPU都会有一个中断向量表，根据interrupt vector调用一个IRQ处理函数。注意这里的IRQ处理函数还不是咱们上面指定的irq_handler_t，到这一层还是CPU硬件的要求。</li>\n<li>第四个层次是在IRQ处理函数中，将interrupt vector转化为抽象中断层的中断信号irq，调用中断信号irq对应的中断描述结构里面的irq_handler_t。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/dd/13/dd492efdcf956cb22ce3d51592cdc113.png?wh=2074*1063\" alt=\"\"></p><p>在这里，我们不解析硬件的部分，我们从CPU收到中断向量开始分析。</p><p>CPU收到的中断向量是什么样的呢？这个定义在文件arch/x86/include/asm/irq_vectors.h中。这里面的注释非常好，建议你仔细阅读。</p><pre><code>/*\n * Linux IRQ vector layout.\n *\n * There are 256 IDT entries (per CPU - each entry is 8 bytes) which can\n * be defined by Linux. They are used as a jump table by the CPU when a\n * given vector is triggered - by a CPU-external, CPU-internal or\n * software-triggered event.\n *\n * Linux sets the kernel code address each entry jumps to early during\n * bootup, and never changes them. This is the general layout of the\n * IDT entries:\n *\n *  Vectors   0 ...  31 : system traps and exceptions - hardcoded events\n *  Vectors  32 ... 127 : device interrupts\n *  Vector  128         : legacy int80 syscall interface\n *  Vectors 129 ... INVALIDATE_TLB_VECTOR_START-1 except 204 : device interrupts\n *  Vectors INVALIDATE_TLB_VECTOR_START ... 255 : special interrupts\n *\n * 64-bit x86 has per CPU IDT tables, 32-bit has one shared IDT table.\n *\n * This file enumerates the exact layout of them:\n */\n#define FIRST_EXTERNAL_VECTOR\t\t0x20\n#define IA32_SYSCALL_VECTOR\t\t0x80\n#define NR_VECTORS\t\t\t 256\n#define FIRST_SYSTEM_VECTOR\t\tNR_VECTORS\n</code></pre><p>通过这些注释，我们可以看出，CPU能够处理的中断总共256个，用宏NR_VECTOR或者FIRST_SYSTEM_VECTOR表示。</p><p>为了处理中断，CPU硬件要求每一个CPU都有一个中断向量表，通过load_idt加载，里面记录着每一个中断对应的处理方法，这个中断向量表定义在文件arch/x86/kernel/traps.c中。</p><pre><code>gate_desc idt_table[NR_VECTORS] __page_aligned_bss;\n</code></pre><p>对于一个CPU可以处理的中断被分为几个部分，第一部分0到31的前32位是系统陷入或者系统异常，这些错误无法屏蔽，一定要处理。</p><p>这些中断的处理函数在系统初始化的时候，在start_kernel函数中调用过trap_init()。这个咱们讲系统初始化和系统调用的时候，都大概讲过这个函数，这里还需要仔细看一下。</p><pre><code>void __init trap_init(void)\n{\n\tint i;\n...\n\tset_intr_gate(X86_TRAP_DE, divide_error);\n//各种各样的set_intr_gate，不都贴在这里了，只贴一头一尾\n...\n\tset_intr_gate(X86_TRAP_XF, simd_coprocessor_error);\n\n\n\t/* Reserve all the builtin and the syscall vector: */\n\tfor (i = 0; i &lt; FIRST_EXTERNAL_VECTOR; i++)\n\t\tset_bit(i, used_vectors);\n\n\n#ifdef CONFIG_X86_32\n\tset_system_intr_gate(IA32_SYSCALL_VECTOR, entry_INT80_32);\n\tset_bit(IA32_SYSCALL_VECTOR, used_vectors);\n#endif\n\n\n\t/*\n\t * Set the IDT descriptor to a fixed read-only location, so that the\n\t * &quot;sidt&quot; instruction will not leak the location of the kernel, and\n\t * to defend the IDT against arbitrary memory write vulnerabilities.\n\t * It will be reloaded in cpu_init() */\n\t__set_fixmap(FIX_RO_IDT, __pa_symbol(idt_table), PAGE_KERNEL_RO);\n\tidt_descr.address = fix_to_virt(FIX_RO_IDT);\n......\n</code></pre><p>我这里贴的代码省略了很多，在trap_init函数的一开始，调用了大量的set_intr_gate，最终都会调用_set_gate，代码如下：</p><pre><code>static inline void _set_gate(int gate, unsigned type, void *addr,\n\t\t\t     unsigned dpl, unsigned ist, unsigned seg)\n{\n\tgate_desc s;\n\tpack_gate(&amp;s, type, (unsigned long)addr, dpl, ist, seg);\n\twrite_idt_entry(idt_table, gate, &amp;s);\n}\n</code></pre><p>从代码可以看出，set_intr_gate其实就是将每个中断都设置了中断处理函数，放在中断向量表idt_table中。</p><p>在trap_init中，由于set_intr_gate调用的太多，容易让人眼花缭乱。其实arch/x86/include/asm/traps.h文件中，早就定义好了前32个中断。如果仔细对比一下，你会发现，这些都在trap_init中使用set_intr_gate设置过了。</p><pre><code>/* Interrupts/Exceptions */\nenum {\n\tX86_TRAP_DE = 0,\t/*  0, Divide-by-zero */\n\tX86_TRAP_DB,\t\t/*  1, Debug */\n\tX86_TRAP_NMI,\t\t/*  2, Non-maskable Interrupt */\n\tX86_TRAP_BP,\t\t/*  3, Breakpoint */\n\tX86_TRAP_OF,\t\t/*  4, Overflow */\n\tX86_TRAP_BR,\t\t/*  5, Bound Range Exceeded */\n\tX86_TRAP_UD,\t\t/*  6, Invalid Opcode */\n\tX86_TRAP_NM,\t\t/*  7, Device Not Available */\n\tX86_TRAP_DF,\t\t/*  8, Double Fault */\n\tX86_TRAP_OLD_MF,\t/*  9, Coprocessor Segment Overrun */\n\tX86_TRAP_TS,\t\t/* 10, Invalid TSS */\n\tX86_TRAP_NP,\t\t/* 11, Segment Not Present */\n\tX86_TRAP_SS,\t\t/* 12, Stack Segment Fault */\n\tX86_TRAP_GP,\t\t/* 13, General Protection Fault */\n\tX86_TRAP_PF,\t\t/* 14, Page Fault */\n\tX86_TRAP_SPURIOUS,\t/* 15, Spurious Interrupt */\n\tX86_TRAP_MF,\t\t/* 16, x87 Floating-Point Exception */\n\tX86_TRAP_AC,\t\t/* 17, Alignment Check */\n\tX86_TRAP_MC,\t\t/* 18, Machine Check */\n\tX86_TRAP_XF,\t\t/* 19, SIMD Floating-Point Exception */\n\tX86_TRAP_IRET = 32,\t/* 32, IRET Exception */\n};\n</code></pre><p>我们回到trap_init中，当前32个中断都用set_intr_gate设置完毕。在中断向量表idt_table中填完了之后，接下来的for循环，for (i = 0; i &lt; FIRST_EXTERNAL_VECTOR; i++)，将前32个中断都在used_vectors中标记为1，表示这些都设置过中断处理函数了。</p><p>接下来，trap_init单独调用set_intr_gate来设置32位系统调用的中断。IA32_SYSCALL_VECTOR，也即128，单独将used_vectors中的第128位标记为1。</p><p>在trap_init的最后，我们将idt_table放在一个固定的虚拟地址上。trap_init结束后，中断向量表中已经填好了前32位，外加一位32位系统调用，其他的都是用于设备中断。</p><p>在start_kernel调用完毕trap_init之后，还会调用init_IRQ()来初始化其他的设备中断，最终会调用到native_init_IRQ。</p><pre><code>void __init native_init_IRQ(void)\n{\n\tint i;\n\ti = FIRST_EXTERNAL_VECTOR;\n#ifndef CONFIG_X86_LOCAL_APIC\n#define first_system_vector NR_VECTORS\n#endif\n\tfor_each_clear_bit_from(i, used_vectors, first_system_vector) {\n\t\t/* IA32_SYSCALL_VECTOR could be used in trap_init already. */\n\t\tset_intr_gate(i, irq_entries_start +\n\t\t\t\t8 * (i - FIRST_EXTERNAL_VECTOR));\n\t}\n......\n}\n</code></pre><p>这里面从第32个中断开始，到最后NR_VECTORS为止，对于used_vectors中没有标记为1的位置，都会调用set_intr_gate设置中断向量表。</p><p>其实used_vectors中没有标记为1的，都是设备中断的部分。</p><p>也即所有的设备中断的中断处理函数，在中断向量表里面都会设置为从irq_entries_start开始，偏移量为i - FIRST_EXTERNAL_VECTOR的一项。</p><p>看来中断处理函数是定义在irq_entries_start这个表里面的，我们在arch\\x86\\entry\\entry_32.S和arch\\x86\\entry\\entry_64.S都能找到这个函数表的定义。</p><p>这又是汇编语言，不需要完全看懂，但是我们还是能看出来，这里面定义了FIRST_SYSTEM_VECTOR - FIRST_EXTERNAL_VECTOR项。每一项都是中断处理函数，会跳到common_interrupt去执行。这里会最终调用do_IRQ，调用完毕后，就从中断返回。这里我们需要区分返回用户态还是内核态。这里会有一个机会触发抢占，咱们讲进程切换的时候讲过的。</p><pre><code>ENTRY(irq_entries_start)\n    vector=FIRST_EXTERNAL_VECTOR\n    .rept (FIRST_SYSTEM_VECTOR - FIRST_EXTERNAL_VECTOR)\n\tpushl\t$(~vector+0x80)\t\t\t/* Note: always in signed byte range */\n    vector=vector+1\n\tjmp\tcommon_interrupt /* 会调用到do_IRQ */\n\t.align\t8\n    .endr\nEND(irq_entries_start)\n\n\ncommon_interrupt:\n\tASM_CLAC\n\taddq\t$-0x80, (%rsp)\t\t\t/* Adjust vector to [-256, -1] range */\n\tinterrupt do_IRQ\n\t/* 0(%rsp): old RSP */\nret_from_intr:\n......\n\t/* Interrupt came from user space */\nGLOBAL(retint_user)\n......\n/* Returning to kernel space */\nretint_kernel:\n......\n</code></pre><p>这样任何一个中断向量到达任何一个CPU，最终都会走到do_IRQ。我们来看do_IRQ的实现。</p><pre><code>/*\n * do_IRQ handles all normal device IRQ's (the special\n * SMP cross-CPU interrupts have their own specific\n * handlers).\n */\n__visible unsigned int __irq_entry do_IRQ(struct pt_regs *regs)\n{\n\tstruct pt_regs *old_regs = set_irq_regs(regs);\n\tstruct irq_desc * desc;\n\t/* high bit used in ret_from_ code  */\n\tunsigned vector = ~regs-&gt;orig_ax;\n......\n\tdesc = __this_cpu_read(vector_irq[vector]);\n\tif (!handle_irq(desc, regs)) {\n......\n\t}\n......\n\tset_irq_regs(old_regs);\n\treturn 1;\n}\n</code></pre><p>在这里面，从AX寄存器里面拿到了中断向量vector，但是别忘了中断控制器发送给每个CPU的中断向量都是每个CPU局部的，而抽象中断处理层的虚拟中断信号irq以及它对应的中断描述结构irq_desc是全局的，也即这个CPU的200号的中断向量和另一个CPU的200号中断向量对应的虚拟中断信号irq和中断描述结构irq_desc可能不一样，这就需要一个映射关系。这个映射关系放在Per CPU变量vector_irq里面。</p><pre><code>DECLARE_PER_CPU(vector_irq_t, vector_irq);\n</code></pre><p>在系统初始化的时候，我们会调用__assign_irq_vector，将虚拟中断信号irq分配到某个CPU上的中断向量。</p><pre><code>static int __assign_irq_vector(int irq, struct apic_chip_data *d,\n\t\t\t       const struct cpumask *mask,\n\t\t\t       struct irq_data *irqdata)\n{\n\tstatic int current_vector = FIRST_EXTERNAL_VECTOR + VECTOR_OFFSET_START;\n\tstatic int current_offset = VECTOR_OFFSET_START % 16;\n\tint cpu, vector;\n......\n\twhile (cpu &lt; nr_cpu_ids) {\n\t\tint new_cpu, offset;\n......\n\t\tvector = current_vector;\n\t\toffset = current_offset;\nnext:\n\t\tvector += 16;\n\t\tif (vector &gt;= first_system_vector) {\n\t\t\toffset = (offset + 1) % 16;\n\t\t\tvector = FIRST_EXTERNAL_VECTOR + offset;\n\t\t}\n\n\n\t\t/* If the search wrapped around, try the next cpu */\n\t\tif (unlikely(current_vector == vector))\n\t\t\tgoto next_cpu;\n\n\n\n\n\t\tif (test_bit(vector, used_vectors))\n\t\t\tgoto next;\n\n\n......\n\t\t/* Found one! */\n\t\tcurrent_vector = vector;\n\t\tcurrent_offset = offset;\n\t\t/* Schedule the old vector for cleanup on all cpus */\n\t\tif (d-&gt;cfg.vector)\n\t\t\tcpumask_copy(d-&gt;old_domain, d-&gt;domain);\n\t\tfor_each_cpu(new_cpu, vector_searchmask)\n\t\t\tper_cpu(vector_irq, new_cpu)[vector] = irq_to_desc(irq);\n\t\tgoto update;\n\n\nnext_cpu:\n\t\tcpumask_or(searched_cpumask, searched_cpumask, vector_cpumask);\n\t\tcpumask_andnot(vector_cpumask, mask, searched_cpumask);\n\t\tcpu = cpumask_first_and(vector_cpumask, cpu_online_mask);\n\t\tcontinue;\n\t}\n....\n</code></pre><p>在这里，一旦找到某个向量，就将CPU的此向量对应的向量描述结构irq_desc，设置为虚拟中断信号irq对应的向量描述结构irq_to_desc(irq)。</p><p>这样do_IRQ会根据中断向量vector得到对应的irq_desc，然后调用handle_irq。handle_irq会调用generic_handle_irq_desc，里面调用irq_desc的handle_irq。</p><pre><code>static inline void generic_handle_irq_desc(struct irq_desc *desc)\n{\n\tdesc-&gt;handle_irq(desc);\n}\n</code></pre><p>这里的handle_irq，最终会调用__handle_irq_event_percpu。代码如下：</p><pre><code>irqreturn_t __handle_irq_event_percpu(struct irq_desc *desc, unsigned int *flags)\n{\n\tirqreturn_t retval = IRQ_NONE;\n\tunsigned int irq = desc-&gt;irq_data.irq;\n\tstruct irqaction *action;\n\n\n\trecord_irq_time(desc);\n\n\n\tfor_each_action_of_desc(desc, action) {\n\t\tirqreturn_t res;\n\t\tres = action-&gt;handler(irq, action-&gt;dev_id);\n\t\tswitch (res) {\n\t\tcase IRQ_WAKE_THREAD:\n\t\t\t__irq_wake_thread(desc, action);\n\t\tcase IRQ_HANDLED:\n\t\t\t*flags |= action-&gt;flags;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tretval |= res;\n\t}\n\treturn retval;\n</code></pre><p>__handle_irq_event_percpu里面调用了irq_desc里每个hander，这些hander是我们在所有action列表中注册的，这才是我们设置的那个中断处理函数。如果返回值是IRQ_HANDLED，就说明处理完毕；如果返回值是IRQ_WAKE_THREAD就唤醒线程。</p><p>至此，中断的整个过程就结束了。</p><h2>总结时刻</h2><p>这一节，我们讲了中断的整个处理过程。中断是从外部设备发起的，会形成外部中断。外部中断会到达中断控制器，中断控制器会发送中断向量Interrupt Vector给CPU。</p><p>对于每一个CPU，都要求有一个idt_table，里面存放了不同的中断向量的处理函数。中断向量表中已经填好了前32位，外加一位32位系统调用，其他的都是用于设备中断。</p><p>硬件中断的处理函数是do_IRQ进行统一处理，在这里会让中断向量，通过vector_irq映射为irq_desc。</p><p>irq_desc是一个用于描述用户注册的中断处理函数的结构，为了能够根据中断向量得到irq_desc结构，会把这些结构放在一个基数树里面，方便查找。</p><p>irq_desc里面有一个成员是irqaction，指向设备驱动程序里面注册的中断处理函数。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/8f/26bde4fa2279f66098856c5b2b6d308f.png?wh=2563*2233\" alt=\"\"></p><h2>课堂练习</h2><p>你知道如何查看每个CPU都收到了哪些中断吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":102791,"user_name":"石维康","can_delete":false,"product_type":"c1","uid":1067564,"ip_address":"","ucode":"E39ED8416B2C01","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/2c/f8451d77.jpg","comment_is_top":false,"comment_ctime":1560305777,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44509978737","product_id":100024701,"comment_content":"cat &#47;proc&#47;interrupts","like_count":11,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561202826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132862,"user_name":"ZYecho","can_delete":false,"product_type":"c1","uid":1356589,"ip_address":"","ucode":"9D156DD30C581E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","comment_is_top":false,"comment_ctime":1568254443,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31633025515","product_id":100024701,"comment_content":"老师您好，第二个层次是中断控制器将物理中断信号转换成为中断向量 int发送给各个cpu，想请教一下 如果这个地方每个cpu都收到中断后，如果保证这个中断只会被处理一次？","like_count":7,"discussions":[{"author":{"id":1521245,"avatar":"https://static001.geekbang.org/account/avatar/00/17/36/5d/7f16e05b.jpg","nickname":"Gabriel","note":"","ucode":"5E5306B4E3533A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199515,"discussion_content":"同问，同求解惑。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583592466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183368,"user_name":"西山薄凉","can_delete":false,"product_type":"c1","uid":1438400,"ip_address":"","ucode":"7A44850F99EC02","user_header":"https://static001.geekbang.org/account/avatar/00/15/f2/c0/bf148d4f.jpg","comment_is_top":false,"comment_ctime":1583029854,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27352833630","product_id":100024701,"comment_content":"课代表在这里。<br>- 设备中断处理<br>    - 定义中断处理函数:irq_handler_t<br>        - 函数入参<br>            - int irq:中断信号<br>            - void * dev_id:通用指针，主要用于区分同一个中断处理函数对于不同设备的处理<br>        - 返回值<br>            - IRQ_NONE:设备不是中断接收者<br>            - IRQ_HANDLED:处理完了的中断<br>            - IRQ_WAKE_THREAD:有一个进程正在等待这个中断，中断处理完了，应该唤醒它<br>        - 很多中断处理程序将整个中断要做的事情分成两部分，称为上半部和下半部，或者成为关键处理部分和延迟处理部分。在中断处理函数中，仅仅处理关键部分，完成了就将中断信号打开，使得新的中断可以进来，需要比较长时间处理的部分，也即延迟部分，往往通过工作队列等方式慢慢处理。<br>    - 注册中断处理函数:request_irq<br>        - 函数入参<br>            - unsigned int irq 是中断信号<br>            - irq_handler_t handler 是中断处理函数<br>            - unsigned long flags 是一些标识位<br>            - const char *name 是设备名称<br>            - void *dev 这个通用指针应该和中断处理函数的 void *dev 相对应<br>        - 初始化描述中断的结构体 irq_desc，其中 struct irqaction，用于表示处理这个中断的动作，irqaction 都有以下成员<br>            - 中断处理函数 handler<br>            - void *dev_id 为设备 id<br>            - irq 为中断信号<br>            - next 为指向下一个 action 的链表指针<br>            - 如果中断处理函数在单独的线程运行，则有 thread_fn 是线程的执行函数，thread 是线程的 task_struct<br>            - irpaction 的存储数据结构通过宏 CONFIG_SPARSE_IRQ 配置<br>                - 如果为连续下标则使用数组<br>                - 如果为不连续下标则使用基数树<br>            - irq 并不是真正的、物理的中断信号，而是一个抽象的、虚拟的中断信号<br>        - 内部调用 request_threaded_irq-&gt;__setup_irq<br>            - 查找 irq_desc 是否已经有 irqaction<br>            - irq 有一个 next 的参数，如果已经有同类的 action，则将其挂在链表末尾<br>        - 如果设定了以单独的线程运行中断处理函数，setup_irq_thread 就会创建这个内核线程，wake_up_process 会唤醒它<br>    - 中断处理流程<br>        - 外部设备给中断控制器发送物理中断信号<br>        - 中断控制器将物理中断信号转换成为中断向量 interrupt vector，发给各个 CPU<br>        - 每个 CPU 都会有一个中断向量表，根据 interrupt vector 调用一个 IRQ 处理函数。注意这里的 IRQ 处理函数还不是咱们上面指定的 irq_handler_t，到这一层还是 CPU 硬件的要求<br>        - 在 IRQ 处理函数中，将 interrupt vector 转化为抽象中断层的中断信号 irq，调用中断信号 irq 对应的中断描述结构里面的 irq_handler_t<br>    ","like_count":6,"discussions":[{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306117,"discussion_content":"why去哪儿了?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600173144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183370,"user_name":"西山薄凉","can_delete":false,"product_type":"c1","uid":1438400,"ip_address":"","ucode":"7A44850F99EC02","user_header":"https://static001.geekbang.org/account/avatar/00/15/f2/c0/bf148d4f.jpg","comment_is_top":false,"comment_ctime":1583029865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18762899049","product_id":100024701,"comment_content":"下半部分-----<br>- 硬件 中断处理<br>        - CPU 能够处理的中断总共 256 个，用宏 NR_VECTOR 或者 FIRST_SYSTEM_VECTOR 表示<br>        - CPU 硬件要求每一个 CPU 都有一个中断向量表 idt_table，通过 load_idt 加载，里面记录着每一个中断对应的处理函数<br>        - 中断被分为几个部分<br>            - 0 到 31 的前 32 位是系统陷入或者系统异常，这些错误无法屏蔽，一定要处理；中断向量表中已经填好了前 32 位，外加一位 32 位系统调用<br>            - 其他的都是用于设备中断<br>        - 硬件中断的处理函数是 do_IRQ 进行统一处理，在这里会让中断向量，通过 vector_irq 映射为 irq_desc<br>        - 找到注册的中断处理 action 并执行","like_count":4},{"had_liked":false,"id":210965,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1587870805,"is_pvip":true,"replies":[{"id":"83785","content":"赞","user_name":"作者回复","comment_id":210965,"uid":"1001590","ip_address":"","utype":1,"ctime":1592359531,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10177805397","product_id":100024701,"comment_content":"总结下:<br>系统有256个中断向量,定义在中断向量表中,其中前32位[0-31]用于系统自身的内部中断,第32位用于32位中断(?),剩余用以设备中断,这是硬件的中断向量表,表里面是中断信号与其对应的中断处理函数,最终都会走到do_irq<br>对于每个cpu来说会有一层虚拟中断层,因为对于多核系统,多个中断处理器,每个cpu会有自己的中断映射表来讲硬件的中断向量对应于虚拟中断向量,其实就是将中断向量表中对应的中断向量描述结构设置为虚拟中断信号的中断描述结构.<br>中断描述结构比较重要,其成员有中断处理的动作结构链表,设备的名字.<br>中断处理的动作结构体其组成成员有 对应的中断处理函数 虚拟中断号 该中断处理函数是否放在单独的线程中执行,以及对应的线程等<br><br>中断的流程:<br>当系统收到中断物理信号,会由中断控制器将物理信号转化为中断向量,然后发送给各个cpu<br>各个cpu通过硬件的中断向量表调用对应的中断处理函数,在中断处理函数中会把物理中断信号转化为虚拟中断信号,然后调用中断信号的中断处理函数(通过中断映射表里对应的中断描述结构来找到对应的中断处理函数)","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493160,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592359531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106332,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1222211,"ip_address":"","ucode":"8175463FB4705B","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/43/cb6ab349.jpg","comment_is_top":false,"comment_ctime":1561272370,"is_pvip":false,"replies":[{"id":"48884","content":"有中断的一节会讲这个","user_name":"作者回复","comment_id":106332,"uid":"1001590","ip_address":"","utype":1,"ctime":1567504352,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10151206962","product_id":100024701,"comment_content":"老师，每个CPU的中断向量表只有256项，留给设备的只有剩下的223项，请问是最多能处理223个不同设备的中断吗？中断向量表中的每一项跟设备之间是什么关系呢？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455048,"discussion_content":"有中断的一节会讲这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567504352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103976,"user_name":"alexgzh","can_delete":false,"product_type":"c1","uid":1476632,"ip_address":"","ucode":"EE3228511C8B9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/18/a88cdaf5.jpg","comment_is_top":false,"comment_ctime":1560579456,"is_pvip":false,"replies":[{"id":"49041","content":"system call原来是软中断，后来是特殊的指令了。interrupt是中断，exception往往会因为指令非法，以中断的形式中止指令运行，还是走中断的正常流程。","user_name":"作者回复","comment_id":103976,"uid":"1001590","ip_address":"","utype":1,"ctime":1567584129,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10150514048","product_id":100024701,"comment_content":"老师, system call, interrup和exception处理的相同点和不同点能讲一下吗？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454077,"discussion_content":"system call原来是软中断，后来是特殊的指令了。interrupt是中断，exception往往会因为指令非法，以中断的形式中止指令运行，还是走中断的正常流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567584129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102702,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1560298318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150232910","product_id":100024701,"comment_content":"中断注册，中断处理，有点类似于rpc框架调用，具体的请求通过事先注册的函数查找，然后返回结果给调用方","like_count":2},{"had_liked":false,"id":120208,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1564806975,"is_pvip":false,"replies":[{"id":"46368","content":"两个handle_irq，名字一样而已","user_name":"作者回复","comment_id":120208,"uid":"1001590","ip_address":"","utype":1,"ctime":1566297282,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5859774271","product_id":100024701,"comment_content":"这样 do_IRQ 会根据中断向量 vector 得到对应的irq_desc，然后调用 handle_irq。handle_irq 会调用 generic_handle_irq_desc，里面调用 irq_desc 的 handle_irq<br><br>老师这个地方绕不出来了。。。handle_irq最后又调用到handle_irq？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461239,"discussion_content":"两个handle_irq，名字一样而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346583,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1653266921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653266921","product_id":100024701,"comment_content":"这，明显看出来命令模式！就像这个模式的demo说的厨师做菜，我不需要知道到底是谁能响应这个中断，只要下令处理这个中断即可！","like_count":0},{"had_liked":false,"id":300255,"user_name":"开心","can_delete":false,"product_type":"c1","uid":1517457,"ip_address":"","ucode":"C8E08E8724C7CE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkzrezV2dOBAgickt9DLzabz3dNFYyDEVXENMQ5ibrWhFbFqXIOia3ZaR21pozvB7UfoxJx4Ar688sA/132","comment_is_top":false,"comment_ctime":1625065370,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625065370","product_id":100024701,"comment_content":"1. 也即这个 CPU 的 200 号的中断向量和另一个 CPU 的 200 号中断向量对应的虚拟中断信号 irq 和中断描述结构 irq_desc 可能不一样？？？<br>具体能举个例子么。<br>2. 这个200号要怎么映射成虚拟中断信号？有什么规则么","like_count":0},{"had_liked":false,"id":287787,"user_name":"geek","can_delete":false,"product_type":"c1","uid":2401422,"ip_address":"","ucode":"FF0845140D72A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","comment_is_top":false,"comment_ctime":1618150272,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618150272","product_id":100024701,"comment_content":"为什么一个irq_desc中可能会有多个irqaction呢？一个中断信号会对应多个处理函数吗","like_count":0},{"had_liked":false,"id":285962,"user_name":"八戒","can_delete":false,"product_type":"c1","uid":1576512,"ip_address":"","ucode":"3F262A99492A65","user_header":"https://static001.geekbang.org/account/avatar/00/18/0e/40/49a71ed8.jpg","comment_is_top":false,"comment_ctime":1617089193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617089193","product_id":100024701,"comment_content":"vector_irq[]与基数树irq_desc有什么关系？<br>看图好像有关系，但又不清楚什么关系","like_count":0},{"had_liked":false,"id":219913,"user_name":"佳俊","can_delete":false,"product_type":"c1","uid":1385803,"ip_address":"","ucode":"A54445937EEF21","user_header":"https://static001.geekbang.org/account/avatar/00/15/25/4b/4cbd001e.jpg","comment_is_top":false,"comment_ctime":1590117666,"is_pvip":false,"replies":[{"id":"83077","content":"中断也有路由，哪个处理都行","user_name":"作者回复","comment_id":219913,"uid":"1001590","ip_address":"","utype":1,"ctime":1591785544,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1590117666","product_id":100024701,"comment_content":"每一个cpu都会有一个中断向量表，都是一样的吗？如果一个控制器中断来了之后，他会把中断给哪个cpu呢?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495991,"discussion_content":"中断也有路由，哪个处理都行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591785544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135578,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1569219366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569219366","product_id":100024701,"comment_content":"老师，x86架构下，物理中断信号如何与虚拟中断信号进行映射呢？哪里进行映射呢？","like_count":0},{"had_liked":false,"id":135556,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1569210022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569210022","product_id":100024701,"comment_content":"&quot;为了处理中断，CPU 硬件要求每一个 CPU 都有一个中断向量表，通过 load_idt 加载，里面记录着<br>每一个中断对应的处理方法，这个中断向量表定义在文件 arch&#47;x86&#47;kernel&#47;traps.c 中。&quot;，在arch&#47;x86&#47;include&#47;asm&#47;irq_vectors.h的注释里，“64-bit x86 has per CPU IDT tables, 32-bit has one shared IDT table.”，所以这里是不是该注明在64-bit x86架构下，每个CPU必须都有一个中断向量表，IDT？","like_count":0},{"had_liked":false,"id":103031,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1560351038,"is_pvip":false,"replies":[{"id":"49086","content":"是的","user_name":"作者回复","comment_id":103031,"uid":"1001590","ip_address":"","utype":1,"ctime":1567590175,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1560351038","product_id":100024701,"comment_content":"每个CPU的前32个中断也会调用到do_IRQ吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453696,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567590175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007330,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/e2/1fad3052.jpg","nickname":"Jemmy","note":"","ucode":"A979F4A5210225","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289228,"discussion_content":"INTG(X86_TRAP_DE,    divide_error),\nINTG(X86_TRAP_NMI,    nmi),\nINTG(X86_TRAP_BR,    bounds),\nINTG(X86_TRAP_UD,    invalid_op),\nINTG(X86_TRAP_NM,    device_not_available)\n\n\n前32 注册了这些 handler；后面 32～256 注册了 do_IRQ. 这样来看，前32不会调 do_IRQ. 还望老师解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594032390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}