{"id":812551,"title":"12｜动手实战：挑选后生成简报","content":"<p>你好，我是叶伟民。</p><p>上一节课我们完成了项目环境搭建，完成了代码主干，设置了任务计划以每天运行脚本。</p><p>这一节课我们将读取元数据，抓取新闻内容，对新闻进行摘要，翻译标题，翻译全文内容，最后整合成更方便用户阅读查看的简报，然后自动打开简报。</p><p>我们先回到 <code>feed.py</code> 文件，把最后两行代码删除掉。</p><pre><code class=\"language-python\">if __name__ == \"__main__\":\n    新闻列表 = 获取数据()\n</code></pre><h2>所需要的类</h2><p>另外我们需要新建一个py文件来声明我们所需要的类，我们将这个py文件命名为<code>新闻.py</code>，然后添加以下代码。</p><pre><code class=\"language-python\">import json\n\nclass 新闻:\n    def __init__(self):\n        self.元数据 = 元数据()\n        self.新闻内容 = None\n        self.新闻内容_中文翻译 = None\n        self.摘要 = None\n\n    def set_元数据(self, 元数据):\n        self.元数据 = 元数据\n\n    def set_新闻内容(self, 新闻内容):\n        self.新闻内容 = 新闻内容\n\n    def set_新闻内容_中文翻译(self, 新闻内容_中文翻译):\n        self.新闻内容_中文翻译 = 新闻内容_中文翻译\n\n    def set_标题_中文翻译(self, 标题_中文翻译):\n        self.元数据.标题_中文翻译 = 标题_中文翻译\n\n    def set_摘要(self, 摘要):\n        self.摘要 = 摘要\n\nclass 新闻Encoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, 新闻):\n            return {\"元数据\": json.loads(json.dumps(obj.元数据, cls=元数据Encoder)), \"新闻内容\": obj.新闻内容,\"摘要\": obj.摘要}\n        return super().default(obj)\n\nclass 元数据:\n    def __init__(self):\n        self.标题 = None\n        self.标题_中文翻译 = None\n        self.作者 = None\n        self.创建日期 = None\n        self.url = None\n\n    def set_标题(self, 标题):\n        self.标题 = 标题\n\n    def set_标题_中文翻译(self, 标题_中文翻译):\n        self.标题_中文翻译 = 标题_中文翻译\n\n    def set_作者(self, 作者):\n        self.作者 = 作者\n\n    def set_创建日期(self, 创建日期):\n        self.创建日期 = 创建日期\n\n    def set_url(self, url):\n        self.url = url\n\nclass 元数据Encoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, 元数据):\n            return {\"标题\": obj.标题,\"标题_中文翻译\": obj.标题_中文翻译, \"作者\": obj.作者, \"创建日期\": obj.创建日期, \"url\": obj.url}\n        return super().default(obj)\n</code></pre><!-- [[[read_end]]] --><p>然后我们打开 <code>feed.py</code> 文件，在头部添加以下代码导入以上这些类。</p><pre><code class=\"language-python\">from 新闻 import *\n</code></pre><p>现在我们可以读取新闻的元数据了。</p><h2>读取元数据</h2><p>我们打开 <code>feed.py</code> 文件，在最底部加入以下代码。</p><pre><code class=\"language-python\">def 获取元数据(current):\n&nbsp; &nbsp; 元数据实例 = 元数据()\n&nbsp; &nbsp; 元数据实例.set_标题(current.title)\n&nbsp; &nbsp; 元数据实例.set_作者(current.author)\n&nbsp; &nbsp; 元数据实例.set_创建日期(current.published_parsed)\n&nbsp; &nbsp; 元数据实例.set_url(current.link)\n&nbsp; &nbsp; return 元数据实例\n</code></pre><p>以上代码接受一个参数，生成了一个元数据类的实例，并把参数里面的值赋给这个实例。</p><h2>根据元数据过滤新闻</h2><p>然后我们根据元数据里面的创建时间过滤出今天的新闻。我们继续在 <code>feed.py</code> 文件最底部加入以下代码。</p><pre><code class=\"language-python\">def 根据元数据过滤新闻(current元数据):\n&nbsp; &nbsp; 今天 = date.today()\n&nbsp; &nbsp; 今天struct_time格式 = time.struct_time(今天.timetuple())\n&nbsp; &nbsp; return current元数据.创建日期 &gt; 今天struct_time格式\n</code></pre><p>这里的第5行代码用来判断新闻创建日期是否大于今天，并返回判断结果。</p><h2>抓取新闻内容</h2><p>然后我们开始定义抓取新闻内容的函数。</p><pre><code class=\"language-python\">def 抓取新闻内容(url):\n    response = requests.get(url)\n    response.encoding = 'utf-8' # 指定编码\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    正文 = soup.find('div', {'class': 'c-pageArticle_content'})\n    if 正文 is not None and 正文.text is not None:\n        return 正文.text\n    else:\n        return None\n</code></pre><p>以上函数用于爬取和解析网页，其中第6行可能会根据网页布局的变化而变化，如果同学们跑不通，则需要更新一下这行代码。</p><p>除此之外，我们还需要回到 <code>Anaconda Powershell Prompt</code> 命令行，安装相关依赖。</p><pre><code class=\"language-xml\">pip install requests\npip install bs4\n</code></pre><h2>文本摘要和机器翻译的基础代码</h2><p>接下来我们可以进行文本摘要和机器翻译了。在此之前，我们需要新开一个py文件，命名为 <code>rag.py</code>，然后把RAG相关内容放进去。</p><pre><code class=\"language-python\">import json\nimport os\n\nimport requests\n\n#region 跟具体大模型相关的，如果需要修改大模型，可能需要修改这部分函数\n文本划分长度 = 1500\n\ndef get_access_token():\n  ernie_client_id = os.getenv(\"baiduclientid\")\n  ernie_client_secret = os.getenv(\"baiduclientsecret\")\n  url = f\"https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id={ernie_client_id}&amp;client_secret={ernie_client_secret}\"\n\n  playload = json.dumps(\"\")\n  headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n  }\n  response = requests.request(\"POST\", url, headers=headers, data=playload)\n  return response.json().get(\"access_token\")\n\ndef 对话模式(messages):\n  url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie-lite-8k?access_token=\" + get_access_token()\n\n  json_obj = {\n      \"messages\": messages,\n  }\n\n  playload = json.dumps(json_obj)\n  headers = {\n      'Content-Type': 'application/json'\n  }\n\n  response = requests.request(\"POST\", url, headers=headers, data=playload)\n  json_result = json.loads(response.text)\n  if \"error_code\" in json_result:\n    return json_result[\"error_msg\"] + \"：\" + playload\n  else:\n    return json_result[\"result\"]\n#endregion\n\n#region 构造messages相关\ndef 构造文本摘要messages(输入字符串):\n  messages=[\n  {\"role\": \"user\", \"content\": f\"\"\"\n  请对以下文本进行摘要：\n\n  {输入字符串}\n  \"\"\"},\n  ]\n  return messages\n\ndef 构造英译中messages(输入字符串):\n  messages=[\n  {\"role\": \"user\", \"content\": f\"\"\"\n  请将以下文本翻译成中文：\n\n  {输入字符串}\n  \"\"\"},\n  ]\n  return messages\n\n#endregion\n</code></pre><p>这里有几个地方我们要注意一下。其中第7行是前面第10节课提到的文本划分长度。从第9到40行我们在实战案例1接触过。第42到第63行代码就是我们在第10节课提到的构造文本摘要和机器翻译的messages代码。</p><h2>对新闻文本摘要</h2><p>现在我们可以对新闻文本进行摘要。我们继续在 <code>feed.py</code> 文件最底部加入以下代码。</p><pre><code class=\"language-python\">def 按长度划分文本(输入文本, 文本划分长度):\n&nbsp; &nbsp; return [输入文本[i:i+文本划分长度] for i in range(0, len(输入文本), 文本划分长度)]\n\ndef 文本摘要(输入文本):\n&nbsp; &nbsp; return 对话模式(构造文本摘要messages(输入文本))\n\ndef 对长文本进行摘要(输入文本):\n&nbsp; if len(输入文本) &gt; 文本划分长度:\n&nbsp; &nbsp; 文本list = 按长度划分文本(输入文本, 文本划分长度)\n&nbsp; &nbsp; 文本摘要结果 = ''\n&nbsp; &nbsp; for 当前文本 in 文本list:\n&nbsp; &nbsp; # &nbsp; print('当前文本='+当前文本)\n&nbsp; &nbsp; &nbsp; 当前文本摘要结果=文本摘要(当前文本)\n&nbsp; &nbsp; # &nbsp; print('当前文本摘要结果='+当前文本摘要结果)\n&nbsp; &nbsp; &nbsp; 文本摘要结果 += 当前文本摘要结果 + '\\n'\n&nbsp; &nbsp; # &nbsp; print('文本摘要结果='+文本摘要结果)\n&nbsp; &nbsp; return 文本摘要结果\n&nbsp; else:\n&nbsp; &nbsp; return 文本摘要(输入文本)\n</code></pre><p>其中第1到2行代码是按长度划分文本的代码，第3到19行代码我们在<a href=\"https://time.geekbang.org/column/article/810048\">第10节课</a>讲述过（如果需要回顾可以点开超链接看一下）。</p><h2>机器翻译</h2><p>现在我们继续编写机器翻译代码。我们继续在 <code>feed.py</code> 文件最底部加入以下代码。</p><pre><code class=\"language-python\">def 翻译成中文(输入文本):\n    return 对话模式(构造英译中messages(输入文本))\n\ndef 对长文本进行翻译(输入文本):\n  if len(输入文本) &gt; 文本划分长度:\n    文本list = 按长度划分文本(输入文本, 文本划分长度)\n    文本翻译结果 = ''\n    for 当前文本 in 文本list:\n      当前文本翻译结果=翻译成中文(当前文本)\n      文本翻译结果 += 当前文本翻译结果 + '\\n'\n    return 文本翻译结果\n  else:\n    return 翻译成中文(输入文本)\n</code></pre><p>以上代码我们在第10节课讲述过了。</p><h2>生成简报</h2><p>现在我们可以生成简报了。我们新开一个py文件，命名为<code>生成简报.py</code>，然后加入以下代码。</p><pre><code class=\"language-python\">from datetime import datetime\nimport subprocess\n\n\ndef 生成每日简报(今天的新闻list:list):\n    print(\"生成每日简报\")\n\n    now = datetime.now()\n\n    formatted_date = now.strftime(\"%Y-%m-%d\")\n\n    每日简报文件 = f\"{formatted_date}.CNET每日简报.html\"\n\n    with open(每日简报文件, 'w', encoding='utf-8') as f:\n        f.write('''&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CNET每日简报&lt;/title&gt;\n        &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;link\n      href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.6.2/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n    /&gt;\n    &lt;link href=\"https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.11.0/font/bootstrap-icons.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.6.2/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n&lt;body&gt;\n\n                ''')\n        f.write(f\"&lt;h1&gt;CNET每日简报-{formatted_date}&lt;/h1&gt;\")\n        f.write('&lt;div class=\"container\" id=\"main_div\"&gt;')\n        for current in 今天的新闻list:\n            f.write('''\n&lt;div class=\"row\"&gt;\n            &lt;div class=\"accordion\" id=\"accordionExample\"&gt;\n                &lt;div class=\"card\"&gt;\n                &lt;div class=\"card-header\" id=\"headingOne\"&gt;\n                    &lt;h2 class=\"mb-0\"&gt;\n                    &lt;button class=\"btn btn-link text-left\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"&gt;&lt;p&gt;&lt;h3&gt;\n                    ''')\n            f.write(current.元数据.标题_中文翻译)\n            f.write(\"&lt;/h3&gt;&lt;/p&gt;&lt;p&gt;\")\n            f.write(current.摘要)\n            f.write('''\n &lt;/p&gt;\n                    &lt;/button&gt;\n                    &lt;/h2&gt;\n                &lt;/div&gt;\n                &lt;div id=\"collapseOne\" class=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\"&gt;\n                    &lt;div class=\"card-body\"&gt;&lt;p&gt;\n                    ''')\n            f.write(current.新闻内容_中文翻译)\n            f.write('''\n&lt;/p\n&lt;p&gt;&lt;a href=\"\n''')\n            f.write(current.元数据.url)\n            f.write('''\n\" target=\"_blank\"&gt;阅读原文&lt;/a&gt;&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n''')\n        f.write(\"&lt;/ul&gt;\")\n        f.write(\"&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\")\n\n    return 每日简报文件\ndef 打开每日简报(每日简报文件):\n    subprocess.run(['start', 每日简报文件], shell=True, check=True)\n</code></pre><p>以上代码只有两个函数，一个生成简报，一个打开简报。主要代码是HTML相关代码。</p><p>然后我们回到 <code>feed.py</code> 文件，在头部添加以下代码导入以上这些函数。</p><pre><code class=\"language-python\">from 新闻 import *\n</code></pre><p>现在万事俱备，只欠东风。所有需要的函数我们都有了，现在我们把它们整合成工作流。</p><h2>整合工作流</h2><p>我们回到 <code>feed.py</code> 文件，在底部添加以下代码。</p><pre><code class=\"language-python\">if __name__ == \"__main__\":\n    新闻列表 = 获取数据()\n    print(f'共获取{len(新闻列表)}条新闻')\n    今天的新闻list = []\n    入库条数上限 = 3 # 出于教学和调试目的设置的上限，你可以设置为0，表示不限制入库条数\n    当前入库条数 = 0\n    for current in 新闻列表:\n        current元数据 = 获取元数据(current)\n        if 根据元数据过滤新闻(current元数据):\n            if 入库条数上限 &gt; 0 and 当前入库条数 &gt;= 入库条数上限:\n                break\n\n            今天的新闻 = 新闻()\n            今天的新闻.set_元数据(current元数据)\n            print('属于今天的新闻，准备处理')\n            今天的新闻.set_新闻内容(抓取新闻内容(今天的新闻.元数据.url))\n            if 今天的新闻 is not None and 今天的新闻.新闻内容 is not None:\n                今天的新闻.set_摘要(对长文本进行摘要(今天的新闻.新闻内容))\n                今天的新闻.set_标题_中文翻译(翻译成中文(今天的新闻.元数据.标题))\n                今天的新闻.set_新闻内容_中文翻译(对长文本进行翻译(今天的新闻.新闻内容))\n                今天的新闻list.append(今天的新闻)\n                当前入库条数 += 1\n        else:\n            print('不是今天的新闻，跳过')\n\n    with open('result.json', 'w', encoding='utf-8') as f:\n        json.dump(今天的新闻list, f, ensure_ascii=False, indent=4, cls=新闻Encoder)\n    每日简报文件 = 生成每日简报(今天的新闻list)\n    打开每日简报(每日简报文件)\n</code></pre><p>我们来看看完整的工作流程，一共是十个步骤，</p><ol>\n<li>从第7行开始遍历新闻列表。</li>\n<li>在第8行获取元数据。</li>\n<li>第9行根据元数据过滤新闻。</li>\n<li>第14行设置元数据。</li>\n<li>第16行抓取新闻内容。</li>\n<li>第18行开始摘要。</li>\n<li>第19行对标题翻译。</li>\n<li>第20行对内容翻译。</li>\n<li>第28行生成每日简报。</li>\n<li>第29行打开每日简报。</li>\n</ol><h2>运行程序</h2><p>现在所有代码都编写完毕，让我们来运行一下。</p><p>打开命令行，运行 <code>feed.bat</code> 文件。注意后面的文件名里应该是<strong>你替换后的项目路径</strong>，可能和我这里展示的不一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/d7/3bd99fee8c2f1c63ca270f447f6b34d7.jpg?wh=2593x217\" alt=\"\"></p><p>运行之后，程序将会打开浏览器，展示如下界面。<br>\n<img src=\"https://static001.geekbang.org/resource/image/85/4d/8522aea736e41087b910439edc424d4d.jpg?wh=1954x666\" alt=\"\"></p><p>好了，现在我们已经生成了<strong>每日新闻简报</strong>。但是如果我们不仅仅想看当天的简报，我们还想看前天甚至最近一周的简报，那该怎么办呢？下一节课我们再讨论这个问题。</p><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了四件事情。</p><p>第一件事是根据元数据过滤出今天的新闻。我们首先读取元数据，然后根据元数据里面的创建时间来过滤出今天的新闻。</p><p>第二件事是抓取新闻内容，并进行摘要和翻译。我们将对标题和内容进行翻译。</p><p>第三件事是生成和打开简报。</p><p>第四件事是将以上所有函数整合成一个工作流，然后使用 <code>feed.bat</code> 文件运行起来。</p><h2>思考题</h2><p>学习学习，既要学又要习，才能真正掌握一项技能，现在动起手来吧，基于今天课程的代码去生成你感兴趣的每日简报。</p><p>如果你觉得有收获的话，欢迎你把这节课分享出去，让更多的人了解将数据获取进RAG应用的方法。</p>","comments":[{"had_liked":false,"id":395512,"user_name":"overland","can_delete":false,"product_type":"c1","uid":1208835,"ip_address":"安徽","ucode":"609A463519E5F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/72/03/da1fcc81.jpg","comment_is_top":false,"comment_ctime":1731032403,"is_pvip":false,"replies":[{"id":143597,"content":"下一节课13节有","user_name":"作者回复","user_name_real":"编辑","uid":1337319,"ctime":1731378705,"ip_address":"江苏","comment_id":395512,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"老师，这些我感觉只要是做软件的应该都可以啊，但还是么有讲到怎么提到到检索出来的这一步呢","like_count":0,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653641,"discussion_content":"下一节课13节有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731378705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394802,"user_name":"花花Binki","can_delete":false,"product_type":"c1","uid":2152448,"ip_address":"辽宁","ucode":"79F32B3953D83E","user_header":"https://static001.geekbang.org/account/avatar/00/20/d8/00/bbf2f87d.jpg","comment_is_top":false,"comment_ctime":1728450379,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"文中的第二次导入\nfrom 新闻 import *\n错了吧，应该是导入 bs4，datetime 一类的","like_count":0}]}