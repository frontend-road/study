{"id":81186,"title":"春节7天练 | Day 5：二叉树和堆","content":"<p>你好，我是王争。春节假期进入尾声了。你现在是否已经准备返回工作岗位了呢？今天更新的是测试题的第五篇，我们继续来复习。</p><hr><h2>关于二叉树和堆的7个必知必会的代码实现</h2><h3>二叉树</h3><ul>\n<li>\n<p>实现一个二叉查找树，并且支持插入、删除、查找操作</p>\n</li>\n<li>\n<p>实现查找二叉查找树中某个节点的后继、前驱节点</p>\n</li>\n<li>\n<p>实现二叉树前、中、后序以及按层遍历</p>\n</li>\n</ul><h3>堆</h3><ul>\n<li>\n<p>实现一个小顶堆、大顶堆、优先级队列</p>\n</li>\n<li>\n<p>实现堆排序</p>\n</li>\n<li>\n<p>利用优先级队列合并K个有序数组</p>\n</li>\n<li>\n<p>求一组动态数据集合的最大Top K</p>\n</li>\n</ul><h2>对应的LeetCode练习题（@Smallfly 整理）</h2><ul>\n<li>Invert Binary Tree（翻转二叉树）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/invert-binary-tree/\">https://leetcode.com/problems/invert-binary-tree/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/invert-binary-tree/\">https://leetcode-cn.com/problems/invert-binary-tree/</a></p><ul>\n<li>Maximum Depth of Binary Tree（二叉树的最大深度）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\">https://leetcode.com/problems/maximum-depth-of-binary-tree/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a></p><!-- [[[read_end]]] --><ul>\n<li>Validate Binary Search Tree（验证二叉查找树）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/validate-binary-search-tree/\">https://leetcode.com/problems/validate-binary-search-tree/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\">https://leetcode-cn.com/problems/validate-binary-search-tree/</a></p><ul>\n<li>Path Sum（路径总和）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/path-sum/\">https://leetcode.com/problems/path-sum/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/path-sum/\">https://leetcode-cn.com/problems/path-sum/</a></p><hr><p>做完题目之后，你可以点击“请朋友读”，把测试题分享给你的朋友。</p><p>祝你取得好成绩！明天见！</p>","comments":[{"had_liked":false,"id":65809,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1549674059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83154052683","product_id":100017301,"comment_content":"平衡树的各种操作太烧脑了，左旋右旋，红黑树就更别提了。过段时间就忘。😢","like_count":20},{"had_liked":false,"id":66031,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549854302,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18729723486","product_id":100017301,"comment_content":"树的前中后序遍历-递归实现：<br><br>public class TreeTraversal {<br><br>    public static class Node {<br>        public int value;<br>        public Node left;<br>        public Node right;<br><br>        public Node(int value) {<br>            this.value = value;<br>        }<br>    }<br><br>    &#47;&#47; 二叉树的递归遍历<br>    public static void preOrderRecursive(Node head) {<br>        if (head == null) {<br>            return;<br>        }<br><br>        System.out.print(head.value + &quot; &quot;);<br>        preOrderRecursive(head.left);<br>        preOrderRecursive(head.right);<br>    }<br><br>    public static void inOrderRecursive(Node head) {<br>        if (head == null) {<br>            return;<br>        }<br><br>        inOrderRecursive(head.left);<br>        System.out.print(head.value + &quot; &quot;);<br>        inOrderRecursive(head.right);<br>    }<br><br>    public static void postOrderRecursive(Node head) {<br>        if (head == null) {<br>            return;<br>        }<br><br>        postOrderRecursive(head.left);<br>        postOrderRecursive(head.right);<br>        System.out.print(head.value + &quot; &quot;);<br>    }<br><br>}<br>","like_count":5},{"had_liked":false,"id":65790,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1549642285,"is_pvip":false,"replies":[{"id":"24732","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804153,"ip_address":"","comment_id":65790,"utype":2}],"discussion_count":1,"race_medal":0,"score":"18729511469","product_id":100017301,"comment_content":"&#47;&#47; 翻转二叉树<br>public TreeNode invertTree(TreeNode root) {<br>        if(root == null){<br>\t\t\treturn root;<br>\t\t}<br>\t\tTreeNode node = root;<br>\t\tQueue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();<br>\t\tqueue.add(node);<br>\t\twhile(!queue.isEmpty()){<br>\t\t\tnode = queue.poll();<br>\t\t\tTreeNode tempNode = node.left;<br>\t\t\tnode.left = node.right;<br>\t\t\tnode.right = tempNode;<br>\t\t\tif(node.left != null){<br>\t\t\t\tqueue.offer(node.left);<br>\t\t\t}<br>\t\t\tif(node.right != null){<br>\t\t\t\tqueue.offer(node.right);<br>\t\t\t}<br>\t\t}<br>        return root;<br>    }<br>&#47;&#47; 二叉树的最大深度<br>public int maxDepth(TreeNode root) {<br>        if(root == null) return 0;<br>        return Math.max(maxDepth(root.left), maxDepth(root.right))+1;   <br>    }<br>&#47;&#47; 验证二叉查找树<br>public boolean isValidBST(TreeNode root) {<br>        if (root == null) {<br>\t\t\treturn true;<br>\t\t}<br>\t\tStack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();<br>\t\tTreeNode node = root;<br>\t\tTreeNode preNode = null;<br>\t\twhile(node != null || !stack.isEmpty()){<br>\t\t\tstack.push(node);<br>\t\t\tnode = node.left;<br>\t\t\twhile(node == null &amp;&amp; !stack.isEmpty()){<br>\t\t\t\tnode = stack.pop();<br>\t\t\t\tif(preNode != null){<br>\t\t\t\t\tif(preNode.val &gt;= node.val){<br>\t\t\t\t\t\treturn false;<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t\tpreNode = node;<br>\t\t\t\tnode = node.right;<br>\t\t\t}<br>\t\t}<br>        return true;<br>    }<br>&#47;&#47; 路径总和<br>public boolean hasPathSum(TreeNode root, int sum) {<br>        if (root == null) {<br>            return false;<br>        }<br>        return hasPathSum(root, root.val, sum);<br>    }<br><br>    public boolean hasPathSum(TreeNode root, int tmp, int sum) {<br>        if (root == null) {<br>            return false;<br>        }<br>        if (root.left == null &amp;&amp; root.right == null) {<br>            return tmp == sum;<br>        }<br>        if (root.left == null) {<br>            return hasPathSum(root.right, root.right.val + tmp, sum);<br>        }<br>        if (root.right == null) {<br>            return hasPathSum(root.left, root.left.val + tmp, sum);<br>        }<br>        return hasPathSum(root.left, root.left.val + tmp, sum) ||<br>                hasPathSum(root.right, root.right.val + tmp, sum);<br>    }","like_count":4,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438589,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264502,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1606480405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901447701","product_id":100017301,"comment_content":"二叉查找树节点删除逻辑，不知道对不对：<br>    public boolean removeNode(int val) {<br>        if (null == root) {<br>            return false;<br>        }<br><br>        if (root.val == val) {<br>            &#47;&#47; 根节点<br>            root = replace(root);<br>        } else {<br>            Node parent = findParent(val);<br>            if (null == parent) {<br>                return false;<br>            }<br>            if (parent.left.val == val) {<br>                parent.left = replace(parent.left);<br>            } else if (parent.right.val == val) {<br>                parent.right = replace(parent.right);<br>            }<br>        }<br>        return true;<br>    }<br><br>    private Node replace(Node cur) {<br>        Node res = null;<br>        if (cur.left != null &amp;&amp; cur.right != null) {<br>            res = cur.left;<br>            res.left = replace(cur.left);<br>            res.right = cur.right;<br>        } else if (cur.left != null) {<br>            res = cur.left;<br>        } else if (cur.right != null) {<br>            return cur.right;<br>        }<br>        &#47;&#47; 置空<br>        cur.left = null;<br>        cur.right = null;<br>        return res;<br>    }","like_count":1},{"had_liked":false,"id":67485,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":1191257,"ip_address":"","ucode":"F8D34433833D7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/59/b515a473.jpg","comment_is_top":false,"comment_ctime":1550157192,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5845124488","product_id":100017301,"comment_content":"java实现二叉树前序、中序、后序和层次遍历<br>代码如下：<br>package tree;<br><br>import java.util.LinkedList;<br>import java.util.Queue;<br><br>public class BinaryTree {<br>    <br>    private Node root = null;<br>    <br>    public static class Node {<br>        <br>        private String data;<br>        private Node left;<br>        private Node right;<br>        <br>        public Node(String data, Node left, Node right) {<br>            this.data = data;<br>            this.left = left;<br>            this.right = right;<br>        }<br>    }<br>    <br>    public void preOrder(Node root) {<br>        if (null == root) {<br>            return ;<br>        }<br>        System.out.print(root.data + &quot; &quot;);<br>        preOrder(root.left);<br>        preOrder(root.right);<br>    }<br>    <br>    public void inOrder(Node root) {<br>        if (null == root) {<br>            return ;<br>        }<br>        inOrder(root.left);<br>        System.out.print(root.data + &quot; &quot;);<br>        inOrder(root.right);<br>    }<br>    <br>    public void postOrder(Node root) {<br>        if (null == root) {<br>            return ;<br>        }<br>        postOrder(root.left);<br>        postOrder(root.right);<br>        System.out.print(root.data + &quot; &quot;);<br>    }<br>    <br>    public void traverseByLayer(Node root) {<br>        if (null == root) {<br>            return ;<br>        }<br>        Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();<br>        queue.add(root);<br>        while (!queue.isEmpty()) {<br>            Node pNode = queue.peek();<br>            System.out.print(pNode.data + &quot; &quot;);<br>            queue.poll();<br>            if (root.left != null) {<br>                queue.add(root.left);<br>            }<br>            if (root.right != null) {<br>                queue.add(root.right);<br>            }<br>        }<br>    }<br>}<br>","like_count":1},{"had_liked":false,"id":66033,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549854395,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844821691","product_id":100017301,"comment_content":"树的前中后序遍历-非递归实现：<br>import java.util.Stack;<br><br><br>public class TreeTraversal {<br>    public static class Node {<br>        public int value;<br>        public Node left;<br>        public Node right;<br>        public Node(int value) {<br>            this.value = value;<br>        }<br>    }<br>    &#47;&#47; 二叉树的非递归遍历<br>    public static void preOrder(Node head) {<br>        System.out.print(&quot;pre-order: &quot;);<br>        if (head == null) {<br>            return;<br>        }<br>        Stack&lt;Node&gt; s = new Stack&lt;&gt;();<br>        s.push(head);<br>        while (!s.isEmpty()) {<br>            head = s.pop();<br>            System.out.print(head.value + &quot; &quot;);<br>            if (head.right != null) {<br>                s.push(head.right);<br>            }<br><br>            if (head.left != null) {<br>                s.push(head.left);<br>            }<br>        }<br>        System.out.println();<br>    }<br><br>    public static void inOrder(Node head) {<br>        System.out.print(&quot;in-order: &quot;);<br>        if (head == null) {<br>            return;<br>        }<br>        Stack&lt;Node&gt; s = new Stack&lt;&gt;();<br>        while (!s.isEmpty() || head != null) {<br>            if (head != null) {<br>                s.push(head);<br>                head = head.left;<br>            } else {<br>                head = s.pop();<br>                System.out.print(head.value + &quot; &quot;);<br>                head = head.right;<br>            }<br>        }<br>        System.out.println();<br>    }<br><br>    public static void postOrder(Node head) {<br>        System.out.print(&quot;pos-order: &quot;);<br>        if (head == null) {<br>            return;<br>        }<br><br>        Stack&lt;Node&gt; tmp = new Stack&lt;&gt;();<br>        Stack&lt;Node&gt; s = new Stack&lt;&gt;();<br><br>        tmp.push(head);<br>        while(!tmp.isEmpty()) {<br>            head = tmp.pop();<br>            s.push(head);<br><br>            if (head.left != null) {<br>                tmp.push(head.left);<br>            }<br><br>            if (head.right != null) {<br>                tmp.push(head.right);<br>            }<br>        }<br><br>        while (!s.isEmpty()) {<br>            System.out.print(s.pop().value + &quot; &quot;);<br>        }<br><br>        System.out.println();<br>    }<br>}<br>","like_count":2},{"had_liked":false,"id":65896,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549736964,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844704260","product_id":100017301,"comment_content":"今天看了一下这一节的题目，发现校招面试的时候都考过，今天又刷了一下，总结了一波，相应的知识点也总结了一下~","like_count":1},{"had_liked":false,"id":65894,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549729926,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844697222","product_id":100017301,"comment_content":"今天的题目很适合递归实现，当然递归公式离代码实现还是存在一定距离。<br>1.翻转二叉树（T）｛<br>当T为Null时则返回；<br>翻转二叉树（T的左子树）；<br>翻转二叉树（T的右子树）；<br>若T不为叶节点，则交换T的左右子树位置；<br>｝<br><br>2.最大深度（T）｛<br>当T为Null时，return 0；<br>return Max（最大深度（T左子树）+1，最大深度（T右子树）+1）；<br>｝<br>函数返回值即为最大深度。<br><br>3.验证二叉查找树（T，&amp;最大值，&amp;最小值）｛<br>当T为Null时，return true；<br>当T为叶节点时，最小值=最大值=当前节点，返回true；<br>左最大值=左最小值=T的值；<br>验证二叉查找树（T的左子树，&amp;左最大值，&amp;左最小值）；<br>右最大值=右最小值=T的值；<br>验证（T的右子树，&amp;右最大值，&amp;右最小值）；<br>T的值小于等于右最小值，并且大于等于左最大值时，最大值=右最大值，最小值=左最小值，之后返回true，否则返回false并结束。<br>｝<br>函数最终返回true则验证成功。<br><br>4.计算路径和（T，sum）｛<br>若T为Null返回false；<br>若T是叶节点，如果sum+T的值=目标值则返回true并结束，否则返回false；<br>计算路径和（T的左子树，sum+T的值）；<br>计算路径和（T的右子树，sum+T的值）；<br>｝<br>计算路径和（T，0）返回true时则存在于目标值相同的路径之和；","like_count":1},{"had_liked":false,"id":65825,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549689001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844656297","product_id":100017301,"comment_content":"二叉树的最大深度 go 语言实现<br>&#47;**<br> * Definition for a binary tree node.<br> * type TreeNode struct {<br> *     Val int<br> *     Left *TreeNode<br> *     Right *TreeNode<br> * }<br> *&#47;<br>func maxDepth(root *TreeNode) int {<br>    if root == nil {<br>        return 0<br>    }<br>    <br>    leftDepth :=0<br>    rightDepth :=0<br>    if root.Left != nil {<br>        leftDepth = maxDepth(root.Left)<br>    }<br>    <br>    if root.Right != nil {<br>        rightDepth = maxDepth(root.Right)<br>    }<br>    <br>    if leftDepth &gt;= rightDepth {<br>        return leftDepth + 1<br>    } else {<br>        return rightDepth + 1<br>    }<br>}","like_count":1},{"had_liked":false,"id":272212,"user_name":"云之崖","can_delete":false,"product_type":"c1","uid":1003366,"ip_address":"","ucode":"724C0614F40EC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/66/1f8fccfb.jpg","comment_is_top":false,"comment_ctime":1609991257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609991257","product_id":100017301,"comment_content":"现在复习，基本上10分钟之类，能手写搞定堆排序，基本一次就过。还有二叉树的删除操作，现在想明白了原理，间隔再久的时间，纸上画一画，写起来也不会有什么困难。","like_count":0},{"had_liked":false,"id":202695,"user_name":"jianhuang_zou","can_delete":false,"product_type":"c1","uid":1895439,"ip_address":"","ucode":"B43F1D59C67F48","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ec/0f/555aa881.jpg","comment_is_top":false,"comment_ctime":1586054614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586054614","product_id":100017301,"comment_content":"迭代是逐渐逼近，用新值覆盖旧值，直到满足条件后结束，不保存中间值，空间利用率高。<br>递归是将一个问题分解为若干相对小一点的问题，遇到递归出口再原路返回，因此必须保存相关的中间值，这些中间值压入栈保存，问题规模较大时会占用大量内存。","like_count":0},{"had_liked":false,"id":202694,"user_name":"jianhuang_zou","can_delete":false,"product_type":"c1","uid":1895439,"ip_address":"","ucode":"B43F1D59C67F48","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ec/0f/555aa881.jpg","comment_is_top":false,"comment_ctime":1586054592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586054592","product_id":100017301,"comment_content":" 二叉树的两种解法，一下解释为中序遍历，将代码调整顺序，可得到前序和后序遍历结果（转）<br># # 递归法<br>        # if root is None:<br>        #     return[]<br>        # return self.inorderTraversal(root.left)\\<br>        #     +[root.val]\\<br>        #         +self.inorderTraversal(root.right)<br>        # 迭代法<br>        result=[]<br>        stack=[(1,root)]<br>        while stack:<br>            go_deeper,node=stack.pop()<br>            if node is None:<br>                continue<br>            if go_deeper:<br>                #左右结点还需深化<br>                stack.append((1,node.right))<br>                stack.append((0,node))<br>                stack.append((1,node.left))<br>            else:<br>                result.append(node.val)<br>        return result","like_count":0},{"had_liked":false,"id":138554,"user_name":"啵啵啵","can_delete":false,"product_type":"c1","uid":1422970,"ip_address":"","ucode":"538D26FA507743","user_header":"https://wx.qlogo.cn/mmopen/vi_32/QBySItkygOZskp8mt8kgglaFib73hTCsBBd06krzqqnNfWYg1auPVy1W5rJw9d6f7gqYKiaZnflUEH2iaZLAvfVvw/132","comment_is_top":false,"comment_ctime":1570333465,"is_pvip":false,"replies":[{"id":"53609","content":"要不要保时捷也送你一辆啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580787,"ip_address":"","comment_id":138554,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570333465","product_id":100017301,"comment_content":"作者可以提供pdf版的课程资料吗，不然我觉得不值，因为不能大量复制，不能形成书面笔记，毕竟我付费了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469568,"discussion_content":"要不要保时捷也送你一辆啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103664,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":1206544,"ip_address":"","ucode":"B4B567A11B491D","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/10/275ae749.jpg","comment_is_top":false,"comment_ctime":1560484976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560484976","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":81994,"user_name":"DigDeeply","can_delete":false,"product_type":"c1","uid":1239008,"ip_address":"","ucode":"113F4D755A1FEC","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e0/33521e13.jpg","comment_is_top":false,"comment_ctime":1554098342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554098342","product_id":100017301,"comment_content":"https:&#47;&#47;github.com&#47;DigDeeply&#47;data-structures-learning&#47;blob&#47;0e14f4f69d1f3d45c3d16820cb771f6c242898e4&#47;57-5-binary_tree&#47;binary_tree.go<br><br>用数组实现的二叉查找树，支持增删查。","like_count":0},{"had_liked":false,"id":74643,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1552271341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552271341","product_id":100017301,"comment_content":"#验证二叉搜索树<br>def isValidBST(self, root: TreeNode) -&gt; bool:<br>        def inorderTraversal(root): <br>            if root == None:<br>                return []<br>            res = []<br>            res += inorderTraversal(root.left)<br>            res.append(root.val)<br>            res += inorderTraversal(root.right)<br>            return res<br> <br>        res = inorderTraversal(root)<br>        if res != sorted(list(set(res))): return False<br>        return True<br>","like_count":0},{"had_liked":false,"id":73065,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1551788076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551788076","product_id":100017301,"comment_content":"#实现小顶堆<br>def makeSmallHeap(array):<br>    for i in range(int(len(array)&#47;2) , -1 , -1):<br>        makeHeap(array , i , len(array))<br>def makeHeap(array , i ,N):<br>    while 2*i+1 &lt; N:<br>        child = 2*i+1<br>        if child != N-1 and array[child] &gt; array[child+1]:<br>            child+=1<br>        if array[child] &lt; array[i]:<br>            temp = array[child]<br>            array[child] = array[i]<br>            array[i] = temp<br>            i = child<br>        else:<br>            break","like_count":0},{"had_liked":false,"id":73063,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1551787998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551787998","product_id":100017301,"comment_content":"#实现大顶堆<br>def makeBigHeap(array):<br>    for i in range(int(len(array)&#47;2) , -1 , -1):<br>        makeHeap(array , i , len(array))<br>def makeHeap(array , i ,N):<br>    while 2*i+1 &lt; N:<br>        child = 2*i+1<br>        if child != N-1 and array[child] &lt; array[child+1]:<br>            child+=1<br>        if array[child] &gt; array[i]:<br>            temp = array[child]<br>            array[child] = array[i]<br>            array[i] = temp<br>            i = child<br>        else:<br>            break","like_count":0},{"had_liked":false,"id":73061,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1551787360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551787360","product_id":100017301,"comment_content":"#堆排序<br>import random<br>import time<br><br>def Array(n):<br>    a = []<br>    for i in range(n):<br>        a.append(random.randint(0 , n))<br>    return a<br><br>def makeHeap(array , i ,N):<br>    while 2*i+1 &lt; N:<br>        child = 2*i+1<br>        if child != N-1 and array[child] &lt; array[child+1]:<br>            child+=1<br>        if array[child] &gt; array[i]:<br>            temp = array[child]<br>            array[child] = array[i]<br>            array[i] = temp<br>            i = child<br>        else:<br>            break<br>def heapSort():<br>    array = Array(100)<br>    for i in range(int(len(array)&#47;2) , -1 , -1):<br>        makeHeap(array , i , len(array))<br>    for i in range(len(array)-1 , -1 , -1):<br>        temp = array[0]<br>        array[0] = array[i]<br>        array[i] = temp<br>        makeHeap(array , 0 , i)<br>    print(array)","like_count":0},{"had_liked":false,"id":70349,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1551082026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551082026","product_id":100017301,"comment_content":"路径总和: 使用回溯法, 遍历每一条 root-&gt;leaf 的路线是否满足在和为 sum, 可以使用减枝操作<br><br>二叉树深度 = 左右子树中深度最大者 + 1<br><br>验证二叉搜索树: <br>1. 遍历每一个结点, 若都满足, 当前结点大于左子树中的最大值, 小于右子树中的最小值, 则说明为二叉搜索树<br>2. 中序遍历二叉搜索树, 若序列递增, 则说明为二叉搜索树","like_count":0},{"had_liked":false,"id":67857,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550301368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550301368","product_id":100017301,"comment_content":"#二叉树前中后序及层次遍历非递归版本<br>class Tree:<br>    def __init__(self, x):<br>        self.val = x<br>        self.left = None<br>        self.right = None<br><br>#----前序----<br>def preOrder(Tree T):<br>    if T is None:<br>        return []<br>    list1 = []<br>    list2 = []<br>    list1.append(T)<br>    while len(list1) &gt; 0:<br>        t = list1.pop()<br>        list2.append(t)<br>        if t.right not None:<br>            list1.append(t.right)<br>        if t.left not None:<br>            list1.append(t.left)<br>    return list2<br><br>#----中序----<br>def inOrder(Tree T):<br>    if T is None:<br>        return []<br>    list1 = []<br>    list2 = []<br>    while T or len(list1)&gt;0 :<br>        if T :<br>            list1.append(T)<br>            T = T.left<br>        else:<br>            T = list1.pop()<br>            list2.append(T)<br>            T = T.right<br>    return list2<br><br>#----后序----<br>def postOrder(Tree T):<br>    if T is None:<br>        return []<br>    list1 = []<br>    list2 = []<br>    list1.append(T)<br>    while len(list1)&gt;0 :<br>        t = list1.pop()<br>        list2.append(t)<br>        if t.left not None:<br>            list1.append(t.left)<br>        if t.right not None:<br>            list1.append(t.right)<br>    return list2[::-1]<br><br>#----层次-----<br>def levelOrder():<br>    if T is None:<br>        return []<br>    list1 = []<br>    list2 = []<br>    list1.append(T)<br>    while len(list1)&gt;0 :<br>        t = list1[0]<br>        del list1[0]<br>        list2.append(t)<br>        if t.left not None:<br>            list1.append(t.left)<br>        if t.right not None:<br>            list1.append(t.right)<br>    return list2<br>","like_count":0},{"had_liked":false,"id":67311,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1550128629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550128629","product_id":100017301,"comment_content":"Path Sum（路径总和）go 语言实现<br>func hasPathSum(root *TreeNode, sum int) bool {<br><br>\tif root==nil{<br>\t\treturn false<br>\t}<br>\tif root.Left==nil &amp;&amp; root.Right==nil{<br>\t\tif root.Val==sum{<br>\t\t\treturn true<br>\t\t}else{<br>\t\t\treturn false<br>\t\t}<br><br>\t}<br>\tleft:=false<br>\tif root.Left!=nil{<br>\t\tleft=hasPathSum(root.Left,sum-root.Val)<br>\t}<br>\tright:=false<br>\tif root.Right!=nil{<br>\t\tright=hasPathSum(root.Right,sum-root.Val)<br>\t}<br>\treturn left || right<br>}","like_count":0},{"had_liked":false,"id":67305,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1550127469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550127469","product_id":100017301,"comment_content":"Validate Binary Search Tree（验证二叉查找数） go语言实现<br><br>func isValidBST(root *TreeNode) bool {<br><br>\tif root==nil{<br>\t\treturn true<br>\t}<br>\tless:=true<br>\tmore:=true<br>\tif root.Left!=nil{<br>\t\tless=JudgeLess(root.Left,root.Val)<br>\t}<br>\tif root.Right!=nil{<br>\t\tmore=JudgeMore(root.Right,root.Val)<br>\t}<br>\tif ! (less &amp;&amp; more){<br>\t\treturn false<br>\t}else{<br>\t\treturn isValidBST(root.Left) &amp;&amp; isValidBST(root.Right)<br>\t}<br>}<br><br>func JudgeLess(root *TreeNode,num int) bool{<br><br>\tif root.Val&gt;=num{<br>\t\treturn false<br>\t}<br>\tif root.Left!=nil &amp;&amp; root.Right!=nil{<br>\t\treturn JudgeLess(root.Left,num) &amp;&amp; JudgeLess(root.Right,num)<br>\t}else if root.Left!=nil{<br>\t\treturn JudgeLess(root.Left,num)<br>\t}else if root.Right!=nil{<br>\t\treturn JudgeLess(root.Right,num)<br>\t}else{<br>\t\treturn true<br>\t}<br>}<br><br>func JudgeMore(root *TreeNode,num int) bool{<br>\tif root.Val&lt;=num{<br>\t\treturn false<br>\t}<br>\tif root.Left!=nil &amp;&amp; root.Right!=nil{<br>\t\treturn JudgeMore(root.Left,num) &amp;&amp; JudgeMore(root.Right,num)<br>\t}else if root.Left!=nil{<br>\t\treturn JudgeMore(root.Left,num)<br>\t}else if root.Right!=nil{<br>\t\treturn JudgeMore(root.Right,num)<br>\t}else{<br>\t\treturn true<br>\t}<br>}<br>","like_count":0},{"had_liked":false,"id":67238,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1550114430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550114430","product_id":100017301,"comment_content":"Invert Binary Tree（翻转二叉树） go 语言实现<br>func invertTree(root *TreeNode) *TreeNode {<br>\tif root==nil{<br>\t\treturn root<br>\t}<br>\ttemp:=root.Left<br>\troot.Left=root.Right<br>\troot.Right=temp<br>\tinvertTree(root.Left)<br>\tinvertTree(root.Right)<br>\treturn root<br>}","like_count":0},{"had_liked":false,"id":65936,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549784310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549784310","product_id":100017301,"comment_content":"路径之和python实现：<br><br># Definition for a binary tree node.<br># class TreeNode:<br>#     def __init__(self, x):<br>#         self.val = x<br>#         self.left = None<br>#         self.right = None<br><br>class Solution:<br>    def hasPathSum(self, root: &#39;TreeNode&#39;, sum: &#39;int&#39;) -&gt; &#39;bool&#39;:<br>        if not root:<br>            return False<br>        <br>        if not root.left and not root.right and root.val == sum:<br>            return True<br>        <br>        sum -= root.val<br>        <br>        return self.hasPathSum(root.left, sum) or self.hasPathSum(root.right, sum)","like_count":0},{"had_liked":false,"id":65933,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549783174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549783174","product_id":100017301,"comment_content":"二叉树最大深度python实现，使用递归<br>class Solution:<br>        <br>    def maxDepth(self, root: &#39;TreeNode&#39;) -&gt; &#39;int&#39;:<br>        return self.depth_of_node(root)<br><br>    def depth_of_node(self, node : TreeNode):<br>        dep_left, dep_right = 0, 0<br>        <br>        <br>        if not node:<br>            return 0<br><br>        dep_left = 0 if not node.left else self.depth_of_node(node.left)<br>        dep_right =0 if not node.right else self.depth_of_node(node.right)<br><br>        depth = max(dep_left, dep_right) + 1<br>        <br>        return depth","like_count":0},{"had_liked":false,"id":65884,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1549723129,"is_pvip":false,"replies":[{"id":"24725","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550803972,"ip_address":"","comment_id":65884,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549723129","product_id":100017301,"comment_content":"Golang max depth<br>&#47;**<br> * Definition for a binary tree node.<br> * type TreeNode struct {<br> *     Val int<br> *     Left *TreeNode<br> *     Right *TreeNode<br> * }<br> *&#47;<br>func maxDepth(root *TreeNode) int {<br>    <br>    if root == nil {<br>        return 0<br>    }<br>         <br>    if root.Left == nil &amp;&amp; root.Right == nil {<br>         return 1<br>    }<br>        <br>    return int(math.Max(float64(maxDepth(root.Left)), float64(maxDepth(root.Right)))) + 1<br>    <br>}","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438627,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550803972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65873,"user_name":"黄丹","can_delete":false,"product_type":"c1","uid":1245295,"ip_address":"","ucode":"29C209F0D78996","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/6f/aacb013d.jpg","comment_is_top":false,"comment_ctime":1549713878,"is_pvip":false,"replies":[{"id":"24721","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您每日一课年度会员，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550803756,"ip_address":"","comment_id":65873,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549713878","product_id":100017301,"comment_content":"王争老师新年的第五天快乐！<br>放上今天LeetCode四题的代码和思路<br>解题思路：对于树，这个结构很特殊，树是由根节点，根节点的左子树，根节点的右子树组成的，定义的时候就是一个递归的定义。因此在解决与树相关的问题的时候，经常会用到递归。今天的四题都不例外。<br>翻转二叉树：就是递归的让节点的左子树指向右子树，右子树指向左子树。<br>二叉树的最大深度：当前深度=1+Max(左子树深度，右子树深度)，递归的结束条件为节点为null，或者是一个叶节点。<br>验证二叉查找树：一颗树是二叉查找树必须满足：当前的节点&gt;=左子树&amp;&amp;当前的节点&lt;=右子树，左子树是二叉查找树，右子树是二叉查找树，也是递归的定义。<br>路径总和：遍历树的路径，看是否和为sum值（树的遍历也是递归的哦）<br>四道题的代码在：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;tree&#47;master&#47;src&#47;leetcode&#47;tree<br>","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438621,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您每日一课年度会员，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550803756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65868,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1549708308,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549708308","product_id":100017301,"comment_content":"path sum<br>    public boolean hasPathSum(TreeNode root, int sum) {<br>        if(root == null){<br>            return false;<br>        }<br>        <br>        int remainSum = sum - root.val;<br>        <br>        if(root.left == null &amp;&amp; root.right == null){<br>             if(remainSum == 0) return true;<br>        }<br>        <br>       <br>        return hasPathSum(root.left,remainSum) || hasPathSum(root.right,remainSum);<br><br>    }","like_count":0},{"had_liked":false,"id":65846,"user_name":"molybdenum","can_delete":false,"product_type":"c1","uid":1251208,"ip_address":"","ucode":"DA24BDFCFF416C","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/88/be4fe19e.jpg","comment_is_top":false,"comment_ctime":1549699599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549699599","product_id":100017301,"comment_content":"老师新年好~今天我会把所有作业都补齐的<br>https:&#47;&#47;blog.csdn.net&#47;github_38313296&#47;article&#47;details&#47;86817926","like_count":0},{"had_liked":false,"id":65836,"user_name":"ext4","can_delete":false,"product_type":"c1","uid":1180826,"ip_address":"","ucode":"FC881AECAC1974","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg","comment_is_top":false,"comment_ctime":1549694461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549694461","product_id":100017301,"comment_content":"二叉树最大深度<br>&#47;**<br> * Definition for a binary tree node.<br> * struct TreeNode {<br> *     int val;<br> *     TreeNode *left;<br> *     TreeNode *right;<br> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}<br> * };<br> *&#47;<br>class Solution {<br>public:<br>    int maxDepth(TreeNode* root) {<br>        if (root == NULL) {<br>            return 0;<br>        }<br>        int leftDepth = maxDepth(root -&gt; left);<br>        int rightDepth = maxDepth(root -&gt; right);<br>        return 1 + (leftDepth &gt; rightDepth ? leftDepth : rightDepth);<br>    }<br>};","like_count":0},{"had_liked":false,"id":65822,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549688124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549688124","product_id":100017301,"comment_content":"翻转二叉树 go 语言实现<br>&#47;**<br> * Definition for a binary tree node.<br> * type TreeNode struct {<br> *     Val int<br> *     Left *TreeNode<br> *     Right *TreeNode<br> * }<br> *&#47;<br>func invertTree(root *TreeNode) *TreeNode {<br>    if root == nil {<br>        return nil<br>    }<br>    <br>    if root.Left != nil {<br>        root.Left = invertTree(root.Left)<br>    }<br>    <br>    if root.Right != nil {<br>        root.Right = invertTree(root.Right)<br>    }<br>    <br>    root.Left, root.Right = root.Right, root.Left<br>    <br>    return root<br>}","like_count":0},{"had_liked":false,"id":65811,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1549676492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549676492","product_id":100017301,"comment_content":"Path Sum<br><br>&#47;**<br> * Definition for a binary tree node.<br> * public class TreeNode {<br> *     int val;<br> *     TreeNode left;<br> *     TreeNode right;<br> *     TreeNode(int x) { val = x; }<br> * }<br> * Time and space complexity: O(n)<br> *&#47;<br>class Solution {<br>    public boolean hasPathSum(TreeNode root, int sum) {<br>        if (root == null) {<br>            return false;<br>        }<br>        if (root.left == null &amp;&amp; root.right == null) {<br>            return sum - root.val == 0;<br>        }<br>        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);<br>    }<br>}","like_count":0}]}