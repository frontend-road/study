{"id":83504,"title":"24 | 黑白灰，理解延迟分配的两面性","content":"<p>上一次，我们讨论了减少内存使用的两个大方向，减少实例数量和减少实例的尺寸。如果我们把时间的因素考虑在内，还有一些重要的技术，可以用来减少运行时的实例数量。其中，延迟分配是一个重要的思路。</p><h2>延迟分配</h2><p>在前面讨论怎么写声明的时候，为了避免初始化的遗漏或者不必要的代码重复，我们一般建议“声明时就初始化”。但是，如果初始化涉及的计算量比较大，占用的资源比较多或者占用的时间比较长，声明时就初始化的方案可能会占用不必要的资源，甚至成为软件的一个潜在安全问题。</p><p>这时候，我们就需要考虑延迟分配的方案了。也就是说，不到需要时候，不占用不必要的资源。</p><p>下面，我们通过一个例子来了解下什么是延迟分配，以及延迟分配的好处。</p><p>在Java核心类中，ArrayList是一个可调整大小的列表，内部实现使用数组存储数据。它的优点是列表大小可调整，数组结构紧凑。列表大小可以预先确定，并且在大小不经常变化的情况下，ArrayList要比LinkedList节省空间，所以是一个优先选项。</p><p>但是，一旦列表大小不能确定，或者列表大小经常变化，ArrayList的内部数组就需要调整大小，这就需要内部分配新数组，废弃旧数组，并且把旧数组的数据拷贝到新数组。这时候，ArrayList就不是一个好的选择了。</p><!-- [[[read_end]]] --><p>在JDK 7中，ArrayList的实现可以用下面的一小段伪代码体现。你可以从代码中体会下内部数组调整带来的“酸辣”。</p><pre><code>package java.util;\n\npublic class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\n        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {\n\n    private transient Object[] elementData;\n    private int size;\n\n    public ArrayList() {\n        this.elementData = new Object[10];\n    }\n\n    @Override\n    public boolean add(E e) {\n        ensureCapacity(size + 1);\n        elementData[size++] = e;\n\n        return true;\n    }\n\n    private void ensureCapacity(int minCapacity) {\n        int oldCapacity = elementData.length;\n\n        if (minCapacity &gt; oldCapacity) {\n            Object oldData[] = elementData;\n            int newCapacity = (oldCapacity * 3) / 2 + 1;\n            if (newCapacity &lt; minCapacity) {\n                newCapacity = minCapacity;\n            }\n\n            elementData = Arrays.copyOf(elementData, newCapacity);\n        }\n    }\n}\n</code></pre><p>这段代码里的缺省构造方法，分配了一个可以容纳10个对象的数组，不管这个大小合不合适，数组需不需要。这看似不起眼的大小为10的数组，在高频率的使用环境下，也是一个不小的负担。</p><p>在JDK 8中，ArrayList的实现做了一个小变动。这个小变动，可以用下面的一小段伪代码体现。</p><pre><code>package java.util;\n\npublic class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\n        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {\n\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    private transient Object[] elementData;\n    private int size;\n\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    // snipped\n}\n</code></pre><p>改动后的缺省构造方法，不再分配内部数组，而是使用了一个空数组。要等到真正需要存储数据的时候，才为这个数组分配空间。这就是所谓的延迟初始化。</p><p>这么小的变动带来的好处到底有多大呢？这个改动的报告记录了一个性能测试结果，改动后的内存的使用减少了13%，平均响应时间提高了16%。</p><p>你是不是很吃惊这样的结果？这个小改动，看起来真的不起眼。代码的优化对于性能的影响，有时候真的是付出少、收益大。</p><p>从ArrayList的上面的改动，我们能够学习到什么东西呢？我学到的最重要的东西是，对于使用频率高的类的实现，微小的性能改进，都可以带来巨大的实用价值。</p><p>在前面讨论<a href=\"https://time.geekbang.org/column/article/78288\">怎么写声明</a>的时候，我们讨论到了“<strong>局部变量需要时再声明</strong>”这条原则。局部变量标识符的声明应该和它的使用尽可能地靠近。这样的规范，除了阅读方面的便利之外，还有效率方面的考虑。局部变量占用的资源，也应该需要时再分配，资源的分配和它的使用也要尽可能地靠近。</p><h2>延迟初始化</h2><p>延迟分配的思路，就是用到声明时再初始化，这就是延迟初始化。换句话说，不到需要的时候，就不进行初始化。</p><p>下面的这个例子，是我们经常使用的初始化方案，声明时就初始化。</p><pre><code>public class CodingExample {\n    private final Map&lt;String, String&gt; helloWordsMap = new HashMap&lt;&gt;();\n    \n    private void setHelloWords(String language, String greeting) {\n        helloWordsMap.put(language, greeting);\n    }\n    // snipped\n}\n</code></pre><p>声明时就初始化的好处是简单、直接、代码清晰、容易维护。但是，如果初始化占用的资源比较多或者占用的时间比较长，这个方案就有可能带来一些负面影响。我们就要慎重考虑了。</p><p>在JDK 11之前的Java版本中，按照HashMap类构造方法的内部实现，初始化的实例变量helloWordsMap，要缺省地分配一个可以容纳16个对象的数组。这个缺省的数组尺寸，比JDK 7中的ArrayList缺省数组还要大。如果后来的方法使用不到这个实例变量，这个资源分配就完全浪费了；如果这个实例变量没有及时使用，这个资源的占用时间就拉长了。</p><p>这个时候是不是可以考虑延迟初始化？下面的例子，就是一种延迟初始化的实现方法。</p><pre><code>public class CodingExample {\n    private Map&lt;String, String&gt; helloWordsMap;\n\n    private void setHelloWords(String language, String greeting) {\n        if (helloWordsMap == null) {\n            helloWordsMap = new HashMap&lt;&gt;();\n        }\n        \n        helloWordsMap.put(language, greeting);\n    }\n\n    // snipped\n}\n</code></pre><p>上面的例子中，实例变量helloWordsMap只有需要时才初始化。这的确可以避免内存资源的浪费，但代价是要使用更多的CPU。检查实例变量是否已经能初始化，需要CPU的额外开销。这是一个内存和CPU效率的妥协与竞争。</p><p>而且，除非是静态变量，否则使用延迟初始化，一般也意味着放弃了使用不可变的类可能性。这就需要考虑多线程安全的问题。上面例子的实现，就不是多线程安全的。对于多线程环境下的计算，初始化时需要的线程同步也是一个不小的开销。</p><p>比如下面的代码，就是一个常见的解决延迟初始化的线程同步问题的模式。这个模式的效率，还算不错。但是里面的很多小细节都忽视不得，看起来都很头疼。我每次看到这样的模式，即便明白这样做的必要性，也恨不得先休息半天，再来啃这块硬骨头。</p><pre><code>public class CodingExample {\n    private volatile Map&lt;String, String&gt; helloWordsMap;\n\n    private void setHelloWords(String language, String greeting) {\n        Map&lt;String, String&gt; temporaryMap = helloWordsMap;\n        if (temporaryMap == null) {    // 1st check (no locking)\n            synchronized (this) {\n                temporaryMap = helloWordsMap;\n                if (temporaryMap == null) {    // 2nd check (locking)\n                    temporaryMap = new ConcurrentHashMap&lt;&gt;();\n                    helloWordsMap = temporaryMap;\n                }\n            }\n        }\n        \n        temporaryMap.put(language, greeting);\n    }\n\n    // snipped\n}\n</code></pre><p>延迟初始化到底好不好，要取决于具体的使用场景。一般情况下，由于规范性带来的明显优势，我们优先使用“声明时就初始化”这个方案。</p><p>所以，我们要再一次强调，只有初始化占用的资源比较多或者占用的时间比较长的时候，我们才开始考虑其他的方案。<strong>复杂的方法，只有必要时才使用</strong>。</p><p>※注：从JDK 11开始，HashMap的实现做了改进，缺省的构造不再分配实质性的数组。以后我们写代码时，可以省点心了。</p><h2>小结</h2><p>今天，我们主要讨论了怎么通过延迟分配减少实例数量，从而降低内存使用。</p><p>对于局部变量，我们应该坚持“<strong>需要时再声明，需要时再分配</strong>”的原则。</p><p>对于类的变量，我们依然应该优先考虑“声明时就初始化”的方案。如果初始化涉及的计算量比较大，占用的资源比较多或者占用的时间比较长，我们可以根据具体情况，具体分析，采用延迟初始化是否可以提高效率，然后再决定使用这种方案是否划算。</p><h2>一起来动手</h2><p>我上面写的延迟初始化的同步的代码，其实是一个很固定的模式。对于Java初学者来说，理解这段代码可能需要费点功夫。评审代码的时候，每次遇到这个模式，我都要小心再小心，谨慎再谨慎，生怕漏掉了某个细节。</p><p>借着这个机会，我们一起来把这个模式理解透，搞清楚这段代码里每一个变量、每一个关键词扮演的角色。以后遇到它，我们也许可以和它把手言欢。</p><p>我把这段代码重新抄写在了下面，关键的地方加了颜色。我们在讨论区讨论下面这些问题：</p><ol>\n<li>\n<p>helloWordsMap变量为什么使用volatile限定词？</p>\n</li>\n<li>\n<p>为什么要temporaryMap变量？</p>\n</li>\n<li>\n<p>temporaryMap变量为什么要两次设置为helloWordsMap？</p>\n</li>\n<li>\n<p>为什么要检查两次temporaryMap的值不等于空？</p>\n</li>\n<li>\n<p>synchronized为什么用在第一次检查之后？</p>\n</li>\n<li>\n<p>为什么使用ConcurrentHashMap而不是HashMap？</p>\n</li>\n<li>\n<p>为什么使用temporaryMap.put()而不是helloWordsMap.put()？</p>\n</li>\n</ol><p>如果你有更多的问题，请公布在讨论区，也可以和你的朋友一起讨论。弄清楚了这些问题，我相信我们可以对Java语言的理解更深入一步。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/1b/b9f09ce12aea369f0e4959a74d9e4b1b.png?wh=908*604\" alt=\"\"></p><p></p>","neighbors":{"left":{"article_title":"23 | 怎么减少内存使用，减轻内存管理负担？","id":83045},"right":{"article_title":"25 | 使用有序的代码，调动异步的事件","id":83897}},"comments":[{"had_liked":false,"id":71164,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1226705,"ip_address":"","ucode":"9FE1D02DF0F103","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJupkAwlMPemsyBhOT2BWJPnyicAqQhH731C7uV5fXjz9DicxO0eySia1JLqeMXAkQlFZZ41uXsw1I7g/132","comment_is_top":false,"comment_ctime":1551275728,"is_pvip":false,"replies":[{"id":"25489","content":"volatile的使用，需要一定程度的同步，也就是你说的拷贝开销。减少volatile变量的引用，可以提高效率。<br><br>恭喜你，这些Java的难点你掌握的很扎实！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551289004,"ip_address":"","comment_id":71164,"utype":1}],"discussion_count":3,"race_medal":0,"score":"181939902160","product_id":100019601,"comment_content":"1 通过采用java内存模型，保证多线程场景下共享资源的可见性<br>2使用局部变量，可以减少主存与线程内存的拷贝次数<br>3第一次是初始化，第二次是同步局部变量与属性变量的值，保持一致<br>4第一次检查是为了快速获取对象，第二次检查是为了防止对象未初始化，就是标准的double check<br>5是为了线程安全，同时高性能，锁范围更小化<br>6前者是线程安全，后者是非线程安全<br>7还是减少主存与线程内存值拷贝的开销<br>个人理解，如有误，敬请指正","like_count":43,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441019,"discussion_content":"volatile的使用，需要一定程度的同步，也就是你说的拷贝开销。减少volatile变量的引用，可以提高效率。\n\n恭喜你，这些Java的难点你掌握的很扎实！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551289004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581324,"discussion_content":"厉害了word哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658723977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1510761,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/NP6xd0gtGwNWnzrk2hn1zgscu7ZuLRibDCrbJzHBRk1Bicb8X7uXlrfTH1Bh4epCNxts4ok4z1sGPHpWjtSaUqnQ/132","nickname":"何霖","note":"","ucode":"8BBE3BFD0691B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349604,"discussion_content":"基本工扎实，强大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613368880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70967,"user_name":"梦醒时分","can_delete":false,"product_type":"c1","uid":1008228,"ip_address":"","ucode":"3C8B9E9EA487EB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/64/40e9805d.jpg","comment_is_top":false,"comment_ctime":1551235559,"is_pvip":false,"replies":[{"id":"25488","content":"关于temporaryMap的使用，请参考@yang的留言。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551288422,"ip_address":"","comment_id":70967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27321039335","product_id":100019601,"comment_content":"我的思考：<br>1.volatile是用来保证变量的可见性的，这样其他线程才能及时看到变量的修改<br>2.为啥要使用temporaryMap变量，这里没有想明白<br>3.两次设置temporaryMap变量，目的是双重检查，防止进入同步代码块中，变量已被赋值了<br>4.同上<br>5.synchronized的使用是影响性能的，所有在使用它之前，先校验下是否需要进入同步块中<br>6.ConcurrentHashMap是线程安全的，而HashMap不是线程安全的<br>7.为啥使用temporaryMap.put不太清楚","like_count":6,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440924,"discussion_content":"关于temporaryMap的使用，请参考@yang的留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551288422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83468,"user_name":"拉可里啦","can_delete":false,"product_type":"c1","uid":1230293,"ip_address":"","ucode":"26E20DF096BDAF","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/d5/90ca8efe.jpg","comment_is_top":false,"comment_ctime":1554611348,"is_pvip":false,"replies":[{"id":"30335","content":"是的，是以对象为单位的。 所以，你看Java的代码里，synchronized(this), this指的就是一个具体的对象。同一个类，实例化的对象不同，也不需要同步。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554782235,"ip_address":"","comment_id":83468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18734480532","product_id":100019601,"comment_content":"作为类的全局变量而非静态变量，只能被类的实例所拥有，那么只有一个对象再操作这个全局变量，单线程操作这个变量不会有线程安全问题，多个线程同时操作这个变量有线程安全问题，是以对象为单位的。不知道我这样理解对不对，还请老师指点指点。","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446035,"discussion_content":"是的，是以对象为单位的。 所以，你看Java的代码里，synchronized(this), this指的就是一个具体的对象。同一个类，实例化的对象不同，也不需要同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554782235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71769,"user_name":"唐名之","can_delete":false,"product_type":"c1","uid":1004394,"ip_address":"","ucode":"F472C71E043E03","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JKKWS6TzhncvAA0p0NDiaATPIvMicSM76vNAg9IG1ibibcJYPAiaicYjZfq4gAV8GRtcTpOibfRD8vzqHBtL0ibmhwQsbg/132","comment_is_top":false,"comment_ctime":1551428667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14436330555","product_id":100019601,"comment_content":"@yang回到第二点 使用局部变量，可以减少主存与线程内存的拷贝次数 这个点还是有点不明白能解释下嘛？","like_count":3},{"had_liked":false,"id":71257,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1551314271,"is_pvip":false,"replies":[{"id":"25542","content":"volatile修饰符和使用concurrent hash map关系不大。volatile修饰的是标志符，不是标志符指向的内容。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551331872,"ip_address":"","comment_id":71257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14436216159","product_id":100019601,"comment_content":"请问各位思考题中的volatile修饰后是不是就只能用concurrenthashmap?要不赋值给局部变量后主存和线程内存还是不同步","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441072,"discussion_content":"volatile修饰符和使用concurrent hash map关系不大。volatile修饰的是标志符，不是标志符指向的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551331872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98652,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1559050471,"is_pvip":false,"replies":[{"id":"35320","content":"👍都是很好的实践经验！ 了解适用场景，是高效代码的关键。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1559060955,"ip_address":"","comment_id":98652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148985063","product_id":100019601,"comment_content":"1.类属性的调用和赋值全部走set和get方法。这种非静态且多次赋值的局部变量应该尽量避免。<br>2.带锁初始化操作应该上移到get方法。至少从函数功能来看，我认为初始化应该是属于get的。<br>3.我真不喜欢加锁和每次get都做判断，所以了解业务上下文，如果可以，我会直接给该属性做初始化。<br>3.如果了解完上下文我对这个集合或则散列表的大小能有一定把我，我会尝试给定一个合适的初始化大小。","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451770,"discussion_content":"👍都是很好的实践经验！ 了解适用场景，是高效代码的关键。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559060955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129099,"user_name":"鱼筱雨","can_delete":false,"product_type":"c1","uid":1597257,"ip_address":"","ucode":"17B11B3CF81153","user_header":"https://static001.geekbang.org/account/avatar/00/18/5f/49/115a8f4c.jpg","comment_is_top":false,"comment_ctime":1567042397,"is_pvip":false,"replies":[{"id":"50615","content":"现在推荐使用的模式是声明时指定类型，使用时让编译器来自动匹配。对于上面的代码，也就是左边声明具体类型，而右边使用空指示符。这样做的主要目的是简化编码，避免不必要的失误和检验。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1568090881,"ip_address":"","comment_id":129099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862009693","product_id":100019601,"comment_content":"范老师，我总是有个疑惑，举个例子<br>Map&lt;String,String&gt; m = new HashMap&lt;&gt;();<br>在这段代码中，左边的泛型中会声明具体类型，而右边的泛型中往往是空的，而我在代码开发中右边的泛型都会和左边保持一致，这样做有什么问题吗？哪种更好一点？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465276,"discussion_content":"现在推荐使用的模式是声明时指定类型，使用时让编译器来自动匹配。对于上面的代码，也就是左边声明具体类型，而右边使用空指示符。这样做的主要目的是简化编码，避免不必要的失误和检验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568090881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102007,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1560096264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855063560","product_id":100019601,"comment_content":"采用了临时变量，对象是否就失去了可视性和有序性的特性？这样在new操作时，由于虚拟机的编译优化，cpu时间片切换时不是可能会出现空指针报错吗？","like_count":1},{"had_liked":false,"id":73501,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1551918311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846885607","product_id":100019601,"comment_content":"恍然大悟，所以局部变量是解决双重检查重排序空指针问题的安全方法👍","like_count":1},{"had_liked":false,"id":73398,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1551878110,"is_pvip":false,"replies":[{"id":"26775","content":"tempHashmap是一个局部变量，不跨越线程。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551899190,"ip_address":"","comment_id":73398,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846845406","product_id":100019601,"comment_content":"老师，我有一个疑问，思考题的代码，在多线程的情况下，如果第16行用tempHashmap.put，是会出现空指针的。因为cpu指令重排序，当线程1在执行new map的时候，可能cpu先给temp分配内存空间，对象还没实例化，这时候另外一个线程在第一个if的时候发现temp不为空（因为有地址，但地址里并没有实例化对象），接着去执行16行的代码，会出现空指针问题吧","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442066,"discussion_content":"tempHashmap是一个局部变量，不跨越线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551899190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352486,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658724017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658724017","product_id":100019601,"comment_content":"代码的优化对于性能的影响，有时候真的是付出少、收益大。--记下来","like_count":0},{"had_liked":false,"id":327191,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1639972498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639972498","product_id":100019601,"comment_content":"使用新版的JDK可以免费提升性能，真好","like_count":0},{"had_liked":false,"id":71991,"user_name":"轻歌赋","can_delete":false,"product_type":"c1","uid":1251574,"ip_address":"","ucode":"22F62446208805","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/f6/2ff7bc7a.jpg","comment_is_top":false,"comment_ctime":1551495526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551495526","product_id":100019601,"comment_content":"1.双检锁在多CPU情况下存在内存语义bug，通过volatile实现其内存语义<br>2.单线程内存一致性语义<br>3.多线程并发，存在一个线程先于其他线程设置值的情况<br>4.多线程并发，检查helloworldsmap是否被其他线程赋值<br>5.提高并发度<br>6.代码体现这是一个多CPU多线程的环境，存在map被并发修改的情况，concurrenthashmap是线程安全的，而hashmap是线程不安全的所以使用前者<br>7.不知道，感觉像是逻辑上比较顺","like_count":0},{"had_liked":false,"id":70907,"user_name":"多拉格·five","can_delete":false,"product_type":"c1","uid":1207914,"ip_address":"","ucode":"07023F43811EE3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/6a/38a3fa8d.jpg","comment_is_top":false,"comment_ctime":1551227114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551227114","product_id":100019601,"comment_content":"这个就是类似于单例里边的双重检查写法吧","like_count":0}]}