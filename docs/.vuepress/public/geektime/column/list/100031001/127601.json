{"id":127601,"title":"26 | 如何在Dart层兼容Android/iOS平台特定实现？（一）","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我与你介绍了在Flutter中实现数据持久化的三种方式，即文件、SharedPreferences与数据库。</p><p>其中，文件适用于字符串或者二进制流的数据持久化，我们可以根据访问频次，决定将它存在临时目录或是文档目录。而SharedPreferences则适用于存储小型键值对信息，可以应对一些轻量配置缓存的场景。数据库则适用于频繁变化的、结构化的对象存取，可以轻松应对数据的增删改查。</p><p>依托于与Skia的深度定制及优化，Flutter给我们提供了很多关于渲染的控制和支持，能够实现绝对的跨平台应用层渲染一致性。但对于一个应用而言，除了应用层视觉显示和对应的交互逻辑处理之外，有时还需要原生操作系统（Android、iOS）提供的底层能力支持。比如，我们前面提到的数据持久化，以及推送、摄像头硬件调用等。</p><p>由于Flutter只接管了应用渲染层，因此这些系统底层能力是无法在Flutter框架内提供支持的；而另一方面，Flutter还是一个相对年轻的生态，因此原生开发中一些相对成熟的Java、C++或Objective-C代码库，比如图片处理、音视频编解码等，可能在Flutter中还没有相关实现。</p><!-- [[[read_end]]] --><p>因此，为了解决调用原生系统底层能力以及相关代码库复用问题，Flutter为开发者提供了一个轻量级的解决方案，即逻辑层的方法通道（Method Channel）机制。基于方法通道，我们可以将原生代码所拥有的能力，以接口形式暴露给Dart，从而实现Dart代码与原生代码的交互，就像调用了一个普通的Dart API一样。</p><p>接下来，我就与你详细讲述Flutter的方法通道机制吧。</p><h2>方法通道</h2><p>Flutter作为一个跨平台框架，提供了一套标准化的解决方案，为开发者屏蔽了操作系统的差异。但，Flutter毕竟不是操作系统，因此在某些特定场景下（比如推送、蓝牙、摄像头硬件调用时），也需要具备直接访问系统底层原生代码的能力。为此，Flutter提供了一套灵活而轻量级的机制来实现Dart和原生代码之间的通信，即方法调用的消息传递机制，而方法通道则是用来传递通信消息的信道。</p><p>一次典型的方法调用过程类似网络调用，由作为客户端的Flutter，通过方法通道向作为服务端的原生代码宿主发送方法调用请求，原生代码宿主在监听到方法调用的消息后，调用平台相关的API来处理Flutter发起的请求，最后将处理完毕的结果通过方法通道回发至Flutter。调用过程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/9c/a8a5cec456e66323e045318d7c5f4d9c.png?wh=1020*784\" alt=\"\"></p><center><span class=\"reference\">图1 方法通道示意图</span></center><p>从上图中可以看到，方法调用请求的处理和响应，在Android中是通过FlutterView，而在iOS中则是通过FlutterViewController进行注册的。FlutterView与FlutterViewController为Flutter应用提供了一个画板，使得构建于Skia之上的Flutter通过绘制即可实现整个应用所需的视觉效果。因此，它们不仅是Flutter应用的容器，同时也是Flutter应用的入口，自然也是注册方法调用请求最合适的地方。</p><p>接下来，我通过一个例子来演示如何使用方法通道实现与原生代码的交互。</p><h2>方法通道使用示例</h2><p>在实际业务中，提示用户跳转到应用市场（iOS为App Store、Android则为各类手机应用市场）去评分是一个高频需求，考虑到Flutter并未提供这样的接口，而跳转方式在Android和iOS上各不相同，因此我们需要分别在Android和iOS上实现这样的功能，并暴露给Dart相关的接口。</p><p>我们先来看看作为客户端的Flutter，怎样实现一次方法调用请求。</p><h3>Flutter如何实现一次方法调用请求？</h3><p>首先，我们需要确定一个唯一的字符串标识符，来构造一个命名通道；然后，在这个通道之上，Flutter通过指定方法名“openAppMarket”来发起一次方法调用请求。</p><p>可以看到，这和我们平时调用一个Dart对象的方法完全一样。因为方法调用过程是异步的，所以我们需要使用非阻塞（或者注册回调）来等待原生代码给予响应。</p><pre><code>//声明MethodChannel\nconst platform = MethodChannel('samples.chenhang/utils');\n\n//处理按钮点击\nhandleButtonClick() async{\n  int result;\n  //异常捕获\n  try {\n    //异步等待方法通道的调用结果\n    result = await platform.invokeMethod('openAppMarket');\n  }\n  catch (e) {\n    result = -1;\n  }\n  print(&quot;Result：$result&quot;);\n}\n</code></pre><p>需要注意的是，与网络调用类似，方法调用请求有可能会失败（比如，Flutter发起了原生代码不支持的API调用，或是调用过程出错等），因此我们需要把发起方法调用请求的语句用try-catch包装起来。</p><p>调用方的实现搞定了，接下来就需要在原生代码宿主中完成方法调用的响应实现了。由于我们需要适配Android和iOS两个平台，所以我们分别需要在两个平台上完成对应的接口实现。</p><h3>在原生代码中完成方法调用的响应</h3><p>首先，<strong>我们来看看Android端的实现方式</strong>。在上一小结最后我提到，在Android平台，方法调用的处理和响应是在Flutter应用的入口，也就是在MainActivity中的FlutterView里实现的，因此我们需要打开Flutter的Android宿主App，找到MainActivity.java文件，并在其中添加相关的逻辑。</p><p>调用方与响应方都是通过命名通道进行信息交互的，所以我们需要在onCreate方法中，创建一个与调用方Flutter所使用的通道名称一样的MethodChannel，并在其中设置方法处理回调，响应openAppMarket方法，打开应用市场的Intent。同样地，考虑到打开应用市场的过程可能会出错，我们也需要增加try-catch来捕获可能的异常：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {\n  ...\n  //创建与调用方标识符一样的方法通道\n  new MethodChannel(getFlutterView(), &quot;samples.chenhang/utils&quot;).setMethodCallHandler(\n   //设置方法处理回调\n    new MethodCallHandler() {\n      //响应方法请求\n      @Override\n      public void onMethodCall(MethodCall call, Result result) {\n        //判断方法名是否支持\n        if(call.method.equals(&quot;openAppMarket&quot;)) {\n          try {\n            //应用市场URI\n            Uri uri = Uri.parse(&quot;market://details?id=com.hangchen.example.flutter_module_page.host&quot;);\n            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            //打开应用市场\n            activity.startActivity(intent);\n            //返回处理结果\n            result.success(0);\n          } catch (Exception e) {\n            //打开应用市场出现异常\n            result.error(&quot;UNAVAILABLE&quot;, &quot;没有安装应用市场&quot;, null);\n          }\n        }else {\n          //方法名暂不支持 \n          result.notImplemented();\n        }\n      }\n    });\n}\n</code></pre><p>现在，方法调用响应的Android部分已经搞定，接下来我们来看一下<strong>iOS端的方法调用响应如何实现。</strong></p><p>在iOS平台，方法调用的处理和响应是在Flutter应用的入口，也就是在Applegate中的rootViewController（即FlutterViewController）里实现的，因此我们需要打开Flutter的iOS宿主App，找到AppDelegate.m文件，并添加相关逻辑。</p><p>与Android注册方法调用响应类似，我们需要在didFinishLaunchingWithOptions:方法中，创建一个与调用方Flutter所使用的通道名称一样的MethodChannel，并在其中设置方法处理回调，响应openAppMarket方法，通过URL打开应用市场：</p><pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  //创建命名方法通道\n  FlutterMethodChannel* channel = [FlutterMethodChannel methodChannelWithName:@&quot;samples.chenhang/utils&quot; binaryMessenger:(FlutterViewController *)self.window.rootViewController];\n  //往方法通道注册方法调用处理回调\n  [channel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {\n    //方法名称一致\n    if ([@&quot;openAppMarket&quot; isEqualToString:call.method]) {\n      //打开App Store(本例打开微信的URL)\n      [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;itms-apps://itunes.apple.com/xy/app/foo/id414478124&quot;]];\n      //返回方法处理结果\n      result(@0);\n    } else {\n      //找不到被调用的方法\n      result(FlutterMethodNotImplemented);\n    }\n  }];\n  ...\n}\n</code></pre><p>这样，iOS端的方法调用响应也已经实现了。</p><p>接下来，我们就可以在Flutter应用里，通过调用openAppMarket方法，实现打开不同操作系统提供的应用市场功能了。</p><p>需要注意的是，在原生代码处理完毕后将处理结果返回给Flutter时，<strong>我们在Dart、Android和iOS分别用了三种数据类型</strong>：Android端返回的是java.lang.Integer、iOS端返回的是NSNumber、Dart端接收到返回结果时又变成了int类型。这是为什么呢？</p><p>这是因为在使用方法通道进行方法调用时，由于涉及到跨系统数据交互，Flutter会使用StandardMessageCodec对通道中传输的信息进行类似JSON的二进制序列化，以标准化数据传输行为。这样在我们发送或者接收数据时，这些数据就会根据各自系统预定的规则自动进行序列化和反序列化。看到这里，你是不是对这样类似网络调用的方法通道技术有了更深刻的印象呢。​</p><p>对于上面提到的例子，类型为java.lang.Integer或NSNumber的返回值，先是被序列化成了一段二进制格式的数据在通道中传输，然后当该数据传递到Flutter后，又被反序列化成了Dart语言中的int类型的数据。</p><p>关于Android、iOS和Dart平台间的常见数据类型转换，我总结成了下面一张表格，帮助你理解与记忆。你只要记住，像null、布尔、整型、字符串、数组和字典这些基本类型，是可以在各个平台之间以平台定义的规则去混用的，就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/e7/c6f1148978fabe62e4089d7877ecb1e7.png?wh=931*420\" alt=\"\"></p><center><span class=\"reference\">图2 Android、iOS和Dart平台间的常见数据类型转换</span></center><h2>总结</h2><p>好了，今天的分享就到这里，我们来总结一下主要内容吧。</p><p>方法通道解决了逻辑层的原生能力复用问题，使得Flutter能够通过轻量级的异步方法调用，实现与原生代码的交互。一次典型的调用过程由Flutter发起方法调用请求开始，请求经由唯一标识符指定的方法通道到达原生代码宿主，而原生代码宿主则通过注册对应方法实现、响应并处理调用请求，最后将执行结果通过消息通道，回传至Flutter。</p><p>​需要注意的是，方法通道是非线程安全的。这意味着原生代码与Flutter之间所有接口调用必须发生在主线程。Flutter是单线程模型，因此自然可以确保方法调用请求是发生在主线程（Isolate）的；而原生代码在处理方法调用请求时，如果涉及到异步或非主线程切换，需要确保回调过程是在原生系统的UI线程（也就是Android和iOS的主线程）中执行的，否则应用可能会出现奇怪的Bug，甚至是Crash。</p><p>我把今天分享所涉及到的知识点打包到了<a href=\"https://github.com/cyndibaby905/26_native_method\">GitHub</a>中，你可以下载下来，反复运行几次，加深理解。</p><h2>思考题</h2><p>最后，我给你留下一道思考题吧。</p><p>请扩展方法通道示例，让openAppMarket支持传入AppID和包名，使得我们可以跳转到任意一个App的应用市场。</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"25 | 本地存储与数据库的使用和优化","id":126460},"right":{"article_title":"27 | 如何在Dart层兼容Android/iOS平台特定实现？（二）","id":128510}},"comments":[{"had_liked":false,"id":140661,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1571023382,"is_pvip":false,"replies":[{"id":"56185","content":"厉害👍","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572320747,"ip_address":"","comment_id":140661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14455925270","product_id":100031001,"comment_content":"思考题：<br>flutter 端：<br>&#47;&#47; 处理按钮点击<br>handleButtonClick() async {<br>  int result;<br>  &#47;&#47; 异常捕获<br>  try {<br>    &#47;&#47; 异步等待方法通道的调用结果<br>    result = await platform.invokeMethod(&#39;openAppMarket&#39;, &lt;String, dynamic&gt;{<br>      &#39;appId&#39;: &quot;com.xxx.xxx&quot;,<br>      &#39;packageName&#39;: &quot;xxx.com.xxx&quot;,<br>    });<br>  } catch (e) {<br>    result = -1;<br>  }<br>  print(&quot;Result：$result&quot;);<br>}<br><br>Android 端：<br>if (call.method == &quot;openAppMarket&quot;) {<br>                    if (call.hasArgument(&quot;appId&quot;)) {<br>                        &#47;&#47;获取 appId<br>                        call.argument&lt;String&gt;(&quot;appId&quot;)<br>                    }<br>                    if (call.hasArgument(&quot;packageName&quot;)) {<br>                        &#47;&#47;获取包名<br>                        call.argument&lt;String&gt;(&quot;packageName&quot;)<br>                    }<br>                }","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470499,"discussion_content":"厉害👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572320747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128426,"user_name":"矮个子先生😝","can_delete":false,"product_type":"c1","uid":1147205,"ip_address":"","ucode":"2242A457B0E10D","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","comment_is_top":false,"comment_ctime":1566878441,"is_pvip":false,"replies":[{"id":"47619","content":"赞，方法通道是双向的，既支持Dart调Native，也支持Native调Dart。第31节会讲具体的实践","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566887092,"ip_address":"","comment_id":128426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14451780329","product_id":100031001,"comment_content":"看了下Flutter提供的api,动手实现了下,native调flutter的方法<br>Future&lt;String&gt; nativeCallFlutter(int a) async {<br>  print(&#39;success $a&#39;);<br>  return &#39;success&#39;;<br>}<br><br>platform.setMethodCallHandler((MethodCall call) async {<br>    if (call.method == &#39;nativeCallFlutter&#39;) {<br>     return await nativeCallFlutter(call.arguments);<br>    }<br>    return &#39;none&#39;;<br>  });<br><br>在iOS端调用:<br>[channel invokeMethod:@&quot;nativeCallFlutter&quot; arguments:@1 result:^(id  _Nullable result) {<br>        NSLog(@&quot;result = %@&quot;,result);<br>    }];","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464942,"discussion_content":"赞，方法通道是双向的，既支持Dart调Native，也支持Native调Dart。第31节会讲具体的实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566887092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210347,"user_name":"张训博-forrest","can_delete":false,"product_type":"c1","uid":1331072,"ip_address":"","ucode":"9A50F9BD3FFDE1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIdTsqPhlVH3TFElzic8422uBDelRjYiaktCJRmIRpLrgBBfBKnSO9PlbHibnHAc9cQEmLHes3fayEw/132","comment_is_top":false,"comment_ctime":1587725173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882692469","product_id":100031001,"comment_content":"result.success(0); 这个换了 现在参数要是map了","like_count":1},{"had_liked":false,"id":160578,"user_name":"寂寞不点烟","can_delete":false,"product_type":"c1","uid":1254832,"ip_address":"","ucode":"14050212660218","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/b0/2736225b.jpg","comment_is_top":false,"comment_ctime":1575978876,"is_pvip":false,"replies":[{"id":"63381","content":"看怎么理解，如果你理解能操作UI的线程就是UI线程，那UI线程确实不一定是主线程<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1577436293,"ip_address":"","comment_id":160578,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870946172","product_id":100031001,"comment_content":"而原生代码在处理方法调用请求时，如果涉及到异步或非主线程切换，需要确保回调过程是在原生系统的 UI 线程（也就是 Android 和 iOS 的主线程）。在Android中UI现线程不一定是主线程。","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477419,"discussion_content":"看怎么理解，如果你理解能操作UI的线程就是UI线程，那UI线程确实不一定是主线程\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577436293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128194,"user_name":"yuhao0x0628","can_delete":false,"product_type":"c1","uid":1332463,"ip_address":"","ucode":"BFD472974828A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/ef/3cdfd916.jpg","comment_is_top":false,"comment_ctime":1566861358,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5861828654","product_id":100031001,"comment_content":"調用原生能力使得 flutter 如虎添翼，並不是要完全取代原生開發，而是採取共生共存的概念。利用原生龐大的生態系，第三方開源組件，為初生的 flutter 提供了擴充，原生調用的功能。使得很多原生開源組件的解決方案可以很好的引入 flutter，這是喜歡 flutter 的其中一個原因。","like_count":1},{"had_liked":false,"id":357871,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1134793,"ip_address":"广东","ucode":"1715EC3977A1D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/c9/1bec2c98.jpg","comment_is_top":false,"comment_ctime":1663723109,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663723109","product_id":100031001,"comment_content":"对比原生，使用方法通道性能怎么样，是否可能有明显的性能折损","like_count":0},{"had_liked":false,"id":298100,"user_name":"吴开","can_delete":false,"product_type":"c1","uid":1481849,"ip_address":"","ucode":"0A55B7A90A1D0F","user_header":"","comment_is_top":false,"comment_ctime":1623913147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623913147","product_id":100031001,"comment_content":"文章漏了点东西，FlutterStreamHandler这个监听，当原生经过某项事件后，回调给flutter","like_count":0},{"had_liked":false,"id":241001,"user_name":"安迪密恩","can_delete":false,"product_type":"c1","uid":1331611,"ip_address":"","ucode":"A6F3F67CF8E6F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","comment_is_top":false,"comment_ctime":1597146637,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1597146637","product_id":100031001,"comment_content":"老师，请问我的项目android编译后的语言是kotlin，而不是java，但是我们要接入的第三方是java，怎么能更改flutter编译后的android项目语言呢？","like_count":0,"discussions":[{"author":{"id":1653754,"avatar":"https://static001.geekbang.org/account/avatar/00/19/3b/fa/2cebefff.jpg","nickname":"曾家二女婿","note":"","ucode":"99B7FFD1C71E47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323320,"discussion_content":"kotlin支持调用java","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604916503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1215387,"avatar":"","nickname":"lala","note":"","ucode":"61798D0911ECBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298316,"discussion_content":"新建时取消勾选kotlin和swift即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597244221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1215387,"avatar":"","nickname":"lala","note":"","ucode":"61798D0911ECBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298883,"discussion_content":"请问已经建好的项目能改吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597460892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298316,"ip_address":""},"score":298883,"extra":""}]}]},{"had_liked":false,"id":178096,"user_name":"满大大","can_delete":false,"product_type":"c1","uid":1170022,"ip_address":"","ucode":"06DE739A6CE9EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/66/5858322e.jpg","comment_is_top":false,"comment_ctime":1581585841,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1581585841","product_id":100031001,"comment_content":"getFlutterView()这个方法找不到，老师这是啥原因啊","like_count":0,"discussions":[{"author":{"id":1331072,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIdTsqPhlVH3TFElzic8422uBDelRjYiaktCJRmIRpLrgBBfBKnSO9PlbHibnHAc9cQEmLHes3fayEw/132","nickname":"张训博-forrest","note":"","ucode":"9A50F9BD3FFDE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249867,"discussion_content":"flutterEngine?.dartExecutor?.binaryMessenger 代替","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587968627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170654,"user_name":"神巅巅","can_delete":false,"product_type":"c1","uid":1455861,"ip_address":"","ucode":"8A5929FC940134","user_header":"https://static001.geekbang.org/account/avatar/00/16/36/f5/a10bfe05.jpg","comment_is_top":false,"comment_ctime":1578653446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578653446","product_id":100031001,"comment_content":"请问最新的1.12，新建flutterviewcontroller是不是不会新建engine了，而是可以复用初始化创建的engine","like_count":0},{"had_liked":false,"id":147032,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1572769124,"is_pvip":false,"replies":[{"id":"57147","content":"这种建议只在原生实现界面，flutter接受最后选择的图片地址","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1573010944,"ip_address":"","comment_id":147032,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572769124","product_id":100031001,"comment_content":"如果是获取系统相册直接获取 图片对象<br>Dart 支持各个平台的 image 对象类型吗","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473104,"discussion_content":"这种建议只在原生实现界面，flutter接受最后选择的图片地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573010944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135975,"user_name":"辉哥","can_delete":false,"product_type":"c1","uid":1236983,"ip_address":"","ucode":"21A65F4EE6CD04","user_header":"","comment_is_top":false,"comment_ctime":1569319008,"is_pvip":false,"replies":[{"id":"52450","content":"不特殊处理的话，是一个进程","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569501234,"ip_address":"","comment_id":135975,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569319008","product_id":100031001,"comment_content":"问一下,Flutter和原生应用应该不处于同一个进程吧","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468410,"discussion_content":"不特殊处理的话，是一个进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569501234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132616,"user_name":"江宁彭于晏","can_delete":false,"product_type":"c1","uid":1587442,"ip_address":"","ucode":"248C7BB01921F3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxMjZcn8LFy6PIT7uGzUOHTCZosTwh39jBKlyW3Ffzyscm14PQGh3QZ1GrEGF4UWxwKZrAib8AXCA/132","comment_is_top":false,"comment_ctime":1568173249,"is_pvip":false,"replies":[{"id":"52418","content":"这个接口的易用性貌似不太合理啊，调用方和原生代码宿主对于参数的处理都比较别扭","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569497404,"ip_address":"","comment_id":132616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568173249","product_id":100031001,"comment_content":"&#47;&#47; 声明 MethodChannel<br>const platform = MethodChannel(&#39;samples.chenhang&#47;utils&#39;);<br><br>&#47;&#47; 处理按钮点击<br>handleButtonClick(Map paramDic) async{<br>  int result;<br>  &#47;&#47; 异常捕获<br>  try {<br>    &#47;&#47; 异步等待方法通道的调用结果,Map 中插入appid和包名，跳转链接等信息<br>    result = await platform.invokeMethod(&#39;openAppMarket&#39;, [paramDic]);<br>  }<br>  catch (e) {<br>    result = -1;<br>  }<br>  print(&quot;Result：$result&quot;);<br>}<br>","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467039,"discussion_content":"这个接口的易用性貌似不太合理啊，调用方和原生代码宿主对于参数的处理都比较别扭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569497404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129366,"user_name":"小水滴","can_delete":false,"product_type":"c1","uid":1411555,"ip_address":"","ucode":"559FAF5F117BB5","user_header":"https://static001.geekbang.org/account/avatar/00/15/89/e3/aa57d3b2.jpg","comment_is_top":false,"comment_ctime":1567097952,"is_pvip":false,"replies":[{"id":"48960","content":"每启动一个 FlutterVC实例，就会创建一套新的渲染机制，即 Flutter Engine，以及底层的 Isolate。这些实例之间的内存是不互相共享的，系统资源消耗比较大","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567527856,"ip_address":"","comment_id":129366,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567097952","product_id":100031001,"comment_content":"iOS系统创建多份FlutterViewController会有什么问题吗","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465423,"discussion_content":"每启动一个 FlutterVC实例，就会创建一套新的渲染机制，即 Flutter Engine，以及底层的 Isolate。这些实例之间的内存是不互相共享的，系统资源消耗比较大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567527856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129089,"user_name":"ptlCoder","can_delete":false,"product_type":"c1","uid":1029656,"ip_address":"","ucode":"B7CF1C4A5970B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/18/ede273fe.jpg","comment_is_top":false,"comment_ctime":1567040917,"is_pvip":false,"replies":[{"id":"48069","content":"1.没要求，主要Dart层与原生宿主层保持一致就可以；<br>2.对","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567058205,"ip_address":"","comment_id":129089,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567040917","product_id":100031001,"comment_content":"methodChannelWithName:@&quot;samples.chenhang&#47;utils&quot; <br>这个通道名称有什么要求嘛？还是说见名知意就好？<br>另外，如果flutter很多地方都用到了原生系统方法，岂不是在iOS或安卓flutter入口那做很多个判断？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465269,"discussion_content":"1.没要求，主要Dart层与原生宿主层保持一致就可以；\n2.对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567058205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128428,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566878500,"is_pvip":false,"replies":[{"id":"47618","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566886950,"ip_address":"","comment_id":128428,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566878500","product_id":100031001,"comment_content":"dart层通过platform.invokeMethod 第二个参数传入动态参数<br>native层可以通过call.argument拿到参数","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464943,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566886950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128352,"user_name":"宇","can_delete":false,"product_type":"c1","uid":1331553,"ip_address":"","ucode":"41CAD68B5474A2","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/61/9c5beba4.jpg","comment_is_top":false,"comment_ctime":1566873467,"is_pvip":false,"replies":[{"id":"47620","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566887172,"ip_address":"","comment_id":128352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566873467","product_id":100031001,"comment_content":"dart层：<br>platform.invokeMethod(&#39;openAppStore&#39;, {&quot;appId&quot;: &quot;com.tencent.mm&quot;});<br><br>native层：<br>String appId = call.argument(&quot;appId&quot;);<br>                            try {<br>                                Uri uri = Uri.parse(&quot;market:&#47;&#47;details?id=&quot; + appId);<br>                                Intent intent = new Intent(Intent.ACTION_VIEW, uri);<br>                                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>                                startActivity(intent);<br>                            } catch (Exception e) {<br>                                result.error(&quot;UNAVAILABLE&quot;, &quot;没有安装应用市场&quot;, null);<br>                            }","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464914,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566887172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}