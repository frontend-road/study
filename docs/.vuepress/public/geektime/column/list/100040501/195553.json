{"id":195553,"title":"29 | Ranges：无迭代器的迭代和更方便的组合","content":"<p>你好，我是吴咏炜。</p><p>今天，我们继续上一讲开始的话题，讨论 ranges（范围）。</p><h2>Ranges 简介</h2><p>像下面这样的代码：</p><pre><code class=\"language-cpp\">#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n\nint main()\n{\n  using namespace std;\n  int a[] = {1, 7, 3, 6,\n             5, 2, 4, 8};\n  copy(begin(a), end(a),\n       ostream_iterator&lt;int&gt;(\n         std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n  sort(begin(a), end(a));\n  copy(begin(a), end(a),\n       ostream_iterator&lt;int&gt;(\n         std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n}\n</code></pre><p>你应该已经见到过好多次了。有没有觉得这个代码有点重复、有点无聊呢？尤其是里面的 <code>begin</code> 和 <code>end</code>？</p><p>很多人都留意到了迭代器虽然灵活，但不是一个足够高级的抽象——尤其是我们已经对 C 数组都可以进行基于“范围”的循环之后。如果我们把数组看作一个抽象的“范围”，我们就可以得到下面的代码：</p><pre><code class=\"language-cpp\">#include &lt;experimental/ranges/algorithm&gt;\n#include &lt;experimental/ranges/iterator&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n  using namespace std::\n    experimental::ranges;\n  int a[] = {1, 7, 3, 6,\n             5, 2, 4, 8};\n  copy(a, ostream_iterator&lt;int&gt;(\n            std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n  sort(a);\n  copy(a, ostream_iterator&lt;int&gt;(\n            std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n}\n</code></pre><!-- [[[read_end]]] --><p>这是真正可以编译的代码，用我们上一讲讲过的环境——最新版的 MSVC（编译命令行上需要额外加 <code>/permissive-</code> 选项）或 GCC 7+——都可以。不过，这一次即使最新版的 MSVC 也不能靠编译器本身支持 ranges 库的所有特性了：在两种环境下我们都必须使用 CMCSTL2 <span class=\"orange\">[1]</span>，也只能（在 C++20 之前临时）使用 <code>std::experimental::ranges</code> 而不是 <code>std::ranges</code>。注意我只引入了 <code>ranges</code> 名空间，而没有引入 <code>std</code> 名空间，这是因为 <code>copy</code>、<code>sort</code> 等名称同时出现在了这两个名空间里，同时引入两个名空间会在使用 <code>sort</code> 等名字时导致冲突。</p><p>这个程序的输出，当然是毫不意外的：</p><blockquote>\n<p><code>1 7 3 6 5 2 4 8</code><br>\n<code>1 2 3 4 5 6 7 8</code></p>\n</blockquote><p>下面我们看“视图”。比如下面的代码展示了一个反转的视图：</p><pre><code class=\"language-cpp\">#include &lt;experimental/ranges/algorithm&gt;\n#include &lt;experimental/ranges/iterator&gt;\n#include &lt;experimental/ranges/ranges&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n  using namespace std::\n    experimental::ranges;\n  int a[] = {1, 7, 3, 6,\n             5, 2, 4, 8};\n  copy(a, ostream_iterator&lt;int&gt;(\n            std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n  auto r = reverse_view(a);\n  copy(r, ostream_iterator&lt;int&gt;(\n            std::cout, \" \"));\n  std::cout &lt;&lt; std::endl;\n}\n</code></pre><p>这个程序的输出是：</p><blockquote>\n<p><code>1 7 3 6 5 2 4 8</code><br>\n<code>8 4 2 5 6 3 7 1</code></p>\n</blockquote><p>为什么 <code>r</code> 是视图，而不是反向复制出的内容？我们可以在输出 <code>r</code> 之前（15行之后，16行之前）插入下面这行：</p><pre><code class=\"language-cpp\">  a[0] = 9;\n</code></pre><p>我们可以看到最后那行输出变成了：</p><blockquote>\n<p><code>8 4 2 5 6 3 7 9</code></p>\n</blockquote><p>这就证明了，<code>r</code> 没有复制 <code>a</code> 的内容。</p><p>视图的大小也不一定跟原先的“范围”一样。下面是我们在<a href=\"https://time.geekbang.org/column/article/185189\">[第 17 讲]</a> 讨论过的过滤视图在 ranges 里的实现的用法：</p><pre><code class=\"language-cpp\">  auto r =\n    filter_view(a, [](int i) {\n      return i % 2 == 0;\n    });\n</code></pre><p>拿这个来替换上面用到 <code>reverse_view</code> 的那行，我们就能得到：</p><blockquote>\n<p><code>6 2 4 8</code></p>\n</blockquote><p>这些视图还能进行组合：我们可以写 <code>reverse_view(filter_view(…))</code>。不过，在组合的情况下，下面这样的写法（使用 <code>|</code> 和视图适配器）可能更清晰些：</p><pre><code class=\"language-cpp\">  auto r = a |\n           views::filter([](int i) {\n             return i % 2 == 0;\n           }) |\n           views::reverse;\n</code></pre><p>这个程序的执行结果是：</p><blockquote>\n<p><code>8 4 2 6</code></p>\n</blockquote><p>如果你用过 Unix 的管道符，你一定会觉得这种写法非常自然、容易组合吧……</p><h2>范围相关的概念</h2><p>整个 ranges 库是基于概念来定义的。下面这张图展示了 range 相关的概念：</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/f9/e5a943a0f87d8c796fe3c78dabf524f9.png?wh=1392*776\" alt=\"\"></p><p>从图的右下角，我们可以看到上一讲讨论过的几个概念，包括 copyable 和 semiregular。再往上，我们看到了 view——视图——也看到了视图是一个 range。现在我们就先来看一下 range 和 view 的定义。</p><p>在 CMCSTL2 里，range 是这样定义的：</p><pre><code class=\"language-cpp\">template &lt;class T&gt;\nconcept _RangeImpl =\n  requires(T&amp;&amp; t) {\n    begin(static_cast&lt;T&amp;&amp;&gt;(t));\n    end(static_cast&lt;T&amp;&amp;&gt;(t));\n  };\n\ntemplate&lt;class T&gt;\nconcept range = _RangeImpl&lt;T&amp;&gt;;\n</code></pre><p>换句话说，一个 range 允许执行 <code>begin</code> 和 <code>end</code> 操作（注意这是在 <code>ranges</code> 名空间下的 <code>begin</code> 和 <code>end</code>，和 <code>std</code> 下的有些小区别）。所以，一个数组，一个容器，通常也能当作一个 range。</p><p>我们已经提到了视图，我们接下来就看一下 view 的定义：</p><pre><code class=\"language-cpp\">template &lt;class T&gt;\nconcept view =\n  range&lt;T&gt; &amp;&amp;\n  semiregular&lt;T&gt; &amp;&amp;\n  enable_view&lt;__uncvref&lt;T&gt;&gt;;\n</code></pre><p>可以看到，view 首先是一个 range，其次它是 semiregular，也就是，可以被移动和复制（对 range 没有这个要求）。然后 <code>enable_view</code> 是个实现提供的概念，它的实际要求就是，视图应该不是一个容器，可以在 O(1) 复杂度完成拷贝或移动操作。我们常用的 <code>string</code> 满足 range，不满足 view；而 <code>string_view</code> 则同时满足 range 和 view。</p><p>下面，我们看 common_range，它的意思是这是个普通的 range，对其应用 <code>begin()</code> 和 <code>end()</code>，结果是同一类型：</p><pre><code class=\"language-cpp\">template &lt;class T&gt;\nconcept common_range =\n  range&lt;T&gt; &amp;&amp;\n  same_as&lt;iterator_t&lt;T&gt;,\n          sentinel_t&lt;T&gt;&gt;;\n</code></pre><p>然后，sized_range 的意思就是这个 range 是有大小的，可以取出其大小（注意我们刚才的 <code>filter_view</code> 就是没有大小的）：</p><pre><code class=\"language-cpp\">template &lt;class T&gt;\nconcept sized_range =\n  range&lt;T&gt; &amp;&amp;\n  requires(T&amp; r) { size(r); };\n</code></pre><p>自然，output_range 的意思是这个 range 的迭代器满足输出迭代器的条件：</p><pre><code class=\"language-cpp\">template &lt;class R, class T&gt;\nconcept output_range =\n  range&lt;R&gt; &amp;&amp;\n  output_iterator&lt;iterator_t&lt;R&gt;, T&gt;;\n</code></pre><p>当然，input_range 的意思是这个 range 的迭代器满足输入迭代器的条件：</p><pre><code class=\"language-cpp\">template &lt;class T&gt;\nconcept input_range =\n  range&lt;T&gt; &amp;&amp;\n  input_iterator&lt;iterator_t&lt;T&gt;&gt;;\n</code></pre><p>再往上的这些概念，我想我就不用再啰嗦了……</p><h3>Sentinel</h3><p>我估计其他概念你理解起来应该问题不大，但 common_range 也许会让有些人迷糊：什么样的 range 会<strong>不</strong>是 common_range 呢？</p><p>答案是，有些 range 的结束点，不是固定的位置，而是某个条件：如遇到 0，或者某个谓词满足了 10 次之后……从 C++17 开始，基于范围的 for 循环也接受 <code>begin</code> 和 <code>end</code> 的结果不是同一类型了——我们把前者返回的结果类型叫 iterator（迭代器），而把后者返回的结果类型叫 sentinel（标记）。</p><p>下面展示了一个实际的例子：</p><pre><code class=\"language-cpp\">#include &lt;experimental/ranges/algorithm&gt;\n#include &lt;experimental/ranges/iterator&gt;\n#include &lt;iostream&gt;\n\nusing namespace std::experimental::\n  ranges;\n\nstruct null_sentinel {};\n\ntemplate &lt;input_iterator I&gt;\nbool operator==(I i, null_sentinel)\n{\n  return *i == 0;\n}\n\ntemplate &lt;input_iterator I&gt;\nbool operator==(null_sentinel, I i)\n{\n  return *i == 0;\n}\n\ntemplate &lt;input_iterator I&gt;\nbool operator!=(I i, null_sentinel)\n{\n  return *i != 0;\n}\n\ntemplate &lt;input_iterator I&gt;\nbool operator!=(null_sentinel, I i)\n{\n  return *i != 0;\n}\n\nint main(int argc, char* argv[])\n{\n  if (argc != 2) {\n    std::cout &lt;&lt; \"Please provide \"\n                 \"an argument!\"\n              &lt;&lt; std::endl;\n    return 1;\n  }\n  for_each(argv[1], null_sentinel(),\n           [](char ch) {\n             std::cout &lt;&lt; ch;\n           });\n  std::cout &lt;&lt; std::endl;\n}\n</code></pre><p>在这个程序里，<code>null_sentinel</code> 就是一个“空值标记”。这个类型存在的唯一意义，就是允许 <code>==</code> 和 <code>!=</code> 根据重载规则做一些特殊的事情：在这里，就是判断当前迭代器指向的位置是否为 0。上面程序的执行结果是把命令行上传入的第一个参数输出到终端上。</p><h2>概念测试</h2><p>我们现在对概念来做一下检查，看看常用的一些容器和视图满足哪些 ranges 里的概念。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/5b/3628cbde0fa893b5d9df888db085c65b.png?wh=1142*934\" alt=\"\"></p><p>这张表里没有什么意外的东西。除了 view，<code>vector&lt;int&gt;</code> 满足所有的 range 概念。另外，<code>const vector&lt;int&gt;</code> 不能满足 output_range，不能往里写内容，也一切正常。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/a5/930d8b0e7d11be467eed5e12b98f0aa5.png?wh=1142*934\" alt=\"\"></p><p>这张表，同样表达了我们已知的事实：<code>list</code> 不满足 random_access_range 和 contiguous_range。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/f4/1a575d6630dcbf2efdb5d41d229577f4.png?wh=1142*934\" alt=\"\"></p><p>这张表，说明了从 range 的角度，C 数组和 <code>vector</code> 是没啥区别的。</p><p><img src=\"https://static001.geekbang.org/resource/image/64/e7/64c011b79225c8c4b37353ec374321e7.png?wh=1212*912\" alt=\"\"></p><p>这张就有点意思了，展示了反转视图的特点。我们可以看到它几乎和原始容器可满足的概念一样，就多了 view，少了 contiguous_range。应该没有让你感到意外的内容吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/71/8447ab67eefb08e389a8fabfcbeca371.png?wh=1196*915\" alt=\"\"></p><p>但过滤视图就不一样了：我们不能预知元素的数量，所以它不能满足 sized_range。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/94/0f7b3cededc2309d97e146e5cd566294.png?wh=1224*912\" alt=\"\"></p><p>我们前面说过，istream_line_reader 的迭代器是输入迭代器，所以它也只能是个 input_range。我们在设计上对 <code>begin()</code> 和 <code>end</code> 的返回值采用了相同的类型，因此它仍是个 common_range。用 take_view 可以取一个范围的前若干项，它就不是一个 commom_range 了。因为输入可能在到达预定项数之前结束，所以它也不是 sized_range。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/08/9e77c25703ecfb51783ebbf604930708.png?wh=1200*912\" alt=\"\"></p><p>我们再来介绍一个新的视图，<code>iota_view</code>。它代表一个从某个数开始的递增序列。单参数的 <code>iota_view</code> 是无穷序列，双参数的是有限序列，从它们能满足的概念上就能看出来。这儿比较有趣的事实是，虽然 <code>iota_view(0, 5)</code> 和 <code>iota_view(0) | take(5)</code> 的结果相同，都是序列 {0, 1, 2, 3, 4}，但编译器看起来，前者比后者要多满足两个概念。这应该也不难理解。</p><h2>抽象和性能</h2><p>说了这么多，你可能还是有点好奇，那 ranges 的用途是什么呢？为了少写 <code>begin()</code> 和 <code>end()</code>？为了方便函数式编程？</p><p>当然，上面的说法都对，但最基本的目的，还是为了抽象和表达能力。我们可以看一眼下面的 Python 代码：</p><pre><code class=\"language-python\">reduce(lambda x, y: x + y,\n       map(lambda x: x * x, range(1, 101)))\n</code></pre><p>你应该不难看出，这个表达式做的是 $1^2+2^2+3^2+\\dots+100^2$。C++ 里我们该怎么做呢？</p><p>当然，手工循环是可以的：</p><pre><code class=\"language-cpp\">auto square = [](int x) {\n  return x * x;\n};\n\nint sum = 0;\nfor (int i = 1; i &lt; 101; ++i) {\n  sum += square(i);\n}\n</code></pre><p>比起 Python 的代码来，似乎上面这个写法有点啰嗦？我们试试使用 ranges：</p><pre><code class=\"language-cpp\">int sum = nvwa::reduce(\n  std::plus&lt;int&gt;(),\n  views::iota(1, 101) |\n    views::transform(\n      [](int x) { return x * x; }));\n</code></pre><p>我不知道你喜不喜欢上面这个表达方式，但它至少能在单个表达式里完成同样的功能。唯一遗憾的是，标准算法 <code>accumulate</code> 或 <code>reduce</code> 在上面不可用（没有针对 ranges 的改造），我只好拿我的非标 <code>reduce</code> <span class=\"orange\">[2]</span> 来凑凑数了。</p><p>同样重要的是，上面的代码性能很高……多高呢？看下面这行汇编输出的代码就知道了：</p><pre><code class=\"language-assembly\">movl\t$338350, -4(%rbp)\n</code></pre><h2>ranges 名空间</h2><p>我们现在再来看一下 ranges 名空间（我们目前代码里的 <code>std::experimental::ranges</code>，C++20 的 <code>std::ranges</code>）。这个名空间有 ranges 特有的内容：</p><ul>\n<li>视图（如 <code>reverse_view</code>）和视图适配器（如 <code>views::reverse</code>）</li>\n<li>ranges 相关的概念（如 <code>range</code>、<code>view</code> 等）</li>\n</ul><p>但也有些名称是从 <code>std</code> 名空间“复制”过来的，包括：</p><ul>\n<li>标准算法（如 <code>copy</code>、<code>transform</code>、<code>sort</code>、<code>all_of</code>、<code>for_each</code> 等；但是，如前面所说，没有 <code>accumulate</code> 或 <code>reduce</code>）</li>\n<li><code>begin</code> 和 <code>end</code></li>\n</ul><p><code>std::copy</code> 接受的是迭代器，而 <code>ranges::copy</code> 接受的是范围，似乎还有点道理。那 <code>begin</code> 和 <code>end</code> 呢？本来接受的参数就是一个范围啊……</p><p>Eric Niebler（Ranges TS 的作者）引入 <code>ranges::begin</code> 的目的是解决下面的代码可能产生的问题（他的例子 <span class=\"orange\">[3]</span>）：</p><pre><code class=\"language-cpp\">extern std::vector&lt;int&gt; get_data();\nauto it = std::begin(get_data());\nint i = *it; // BOOM\n</code></pre><p>注意在读取 <code>*it</code> 的时候，<code>get_data()</code> 返回的 <code>vector</code> 已经被销毁了——所以这个读取操作是未定义行为（undefined behavior）。</p><p>Eric Niebler 和 Casey Carter（CMCSTL2 的主要作者）使用了一个特殊的技巧，把 <code>begin</code> 和 <code>end</code> 实现成了有特殊约束的函数对象，使得下面这样的代码无法通过编译：</p><pre><code class=\"language-cpp\">extern std::vector&lt;int&gt; get_data();\nauto it = ranges::begin(get_data());\nint i = *it; // BOOM\n</code></pre><p>如果你对此有兴趣的话，可以看一下 CMCSTL2 里的 include/stl2/detail/range/access.hpp。</p><p>对一般的用户而言，记住 <code>ranges::begin</code> 和 <code>ranges::end</code> 是将来 <code>std::begin</code> 和 <code>std::end</code> 的更好的替代品就行了。</p><h2>一点历史</h2><p>对于标准算法里的迭代器的问题早就有人看到了，并且有不少人提出了改进的方案。最早在 2003 年，Boost.Range 就已经出现（但影响似乎不大）。Andrei Alexandresu 在 2009 年发了一篇很有影响力的文章，“Iterators must go” <span class=\"orange\">[4]</span>，讨论迭代器的问题，及他在 D 语言里实现 ranges 的经验，但在 C++ 界没有开花结果。Eric Niebler 在 2013 年开始了 range-v3 <span class=\"orange\">[5]</span> 的工作，这才是目前的 ranges 的基础。他把 ranges 写成了一个标准提案 <span class=\"orange\">[6]</span>，并在 2017 年被 ISO 出版成为正式的 Ranges TS。2018 年末，好消息传来，C++ 委员会通过了决议，Ranges 正式被并入了 C++20 的草案！</p><p><img src=\"https://static001.geekbang.org/resource/image/04/b4/04dfc0486f87f25871c5fc873d631eb4.png?wh=1056*560\" alt=\"\" title=\"图片背景来自网络\"></p><p>谁说程序员都是无趣的？这篇内容申请把 Ranges 并入 C++ 标准草案的纯技术文档 The One Ranges Proposal <span class=\"orange\">[7]</span>，开头绝对是激情四射啊。</p><h2>批评和未来</h2><p>如果我只说好的方面、问题一点不说，对于学习道路上的你，也不是件好事。最有名的对 C++ Ranges 的批评，就是 Unity 开发者 Aras Pranckevičius 发表的一篇文章 <span class=\"orange\">[8]</span>。我不完全认同文中的观点，但我觉得读一下反面的意见也很重要。</p><p>此外，C++20 里的 ranges 不是一个概念的终点。即便在 range-v3 库里，也有很多东西仍然没有进入 C++ 标准。比如，看一眼下面的代码：</p><pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;range/v3/all.hpp&gt;\n\nint main()\n{\n  std::vector&lt;int&gt; vd{1, 7, 3, 6,\n                      5, 2, 4, 8};\n  std::vector&lt;std::string&gt; vs{\n    \"one\",  \"seven\", \"three\",\n    \"six\",  \"five\",  \"two\",\n    \"four\", \"eight\"};\n  auto v =\n    ranges::views::zip(vd, vs);\n  ranges::sort(v);\n  for (auto i : vs) {\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n  }\n}\n</code></pre><p>上面的代码展示了标准 ranges 中还没有的 zip 视图，并且，zip 视图的结果还可以被排序，结果将使得原始的两个 <code>vector</code> 都重新排序。上述程序的运行结果是：</p><blockquote>\n<p><code>one</code><br>\n<code>two</code><br>\n<code>three</code><br>\n<code>four</code><br>\n<code>five</code><br>\n<code>six</code><br>\n<code>seven</code><br>\n<code>eight</code></p>\n</blockquote><p>这个非标的 range-v3 库的另外一个好处是，它不依赖于概念的支持，因而可以用在更多的环境中，包括目前还不支持概念的 Clang。</p><p>如果你希望自己尝试一下这个代码的话，需要在命令行上使用 <code>-I</code> 选项来包含 range-v3 的 include 目录，此外 MSVC 还需要几个特殊选项：</p><blockquote>\n<p><code>cl /EHsc /std:c++latest /permissive- /experimental:preprocessor …</code></p>\n</blockquote><h2>内容小结</h2><p>本讲讨论了 C++20 的又一重要特性 ranges。虽然这一特性比起 concepts 来争议要多，但无疑它展示了 C++ 语言的一些新的可能性，并可以产生非常紧凑的高性能代码。</p><h2>课后思考</h2><p>你怎么看待 ranges 和对它的批评？你会想用 ranges 吗？欢迎留言与我交流。</p><h2><span class=\"reference\">参考资料 </span></h2><p><span class=\"reference\">[1] Casey Carter et al., cmcstl2. <a href=\"https://github.com/CaseyCarter/cmcstl2\">https://github.com/CaseyCarter/cmcstl2</a> </span></p><p><span class=\"reference\">[2] 吴咏炜, nvwa/functional.h. <a href=\"https://github.com/adah1972/nvwa/blob/master/nvwa/functional.h\">https://github.com/adah1972/nvwa/blob/master/nvwa/functional.h</a> </span></p><p><span class=\"reference\">[3] Eric Niebler, “Standard ranges”. <a href=\"http://ericniebler.com/2018/12/05/standard-ranges/\">http://ericniebler.com/2018/12/05/standard-ranges/</a> </span></p><p><span class=\"reference\">[4] Andrei Alexandrescu, “Iterators must go”, <a href=\"http://accu.org/content/conf2009/AndreiAlexandrescu_iterators-must-go.pdf\">http://accu.org/content/conf2009/AndreiAlexandrescu_iterators-must-go.pdf</a> </span></p><p><span class=\"reference\">[5] Eric Niebler, range-v3. <a href=\"https://github.com/ericniebler/range-v3\">https://github.com/ericniebler/range-v3</a> </span></p><p><span class=\"reference\">[6] Eric Niebler and Casey Carter, “Working draft, C++ extensions for ranges”. <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4560.pdf</a> </span></p><p><span class=\"reference\">[7] Eric Niebler, Casey Carter, and Christopher Di Bella, “The one ranges proposal”.  <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf</a> </span></p><p><span class=\"reference\">[8] Aras Pranckevičius, “ ‘Modern’ C++ lamentations”. <a href=\"https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/\">https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/</a> ；CSDN 的翻译见 <a href=\"https://blog.csdn.net/csdnnews/article/details/86386281\">https://blog.csdn.net/csdnnews/article/details/86386281</a> </span></p>","neighbors":{"left":{"article_title":"28 | Concepts：如何对模板进行约束?","id":194005},"right":{"article_title":"30 | Coroutines：协作式的交叉调度执行","id":196785}},"comments":[{"had_liked":false,"id":176347,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1581040057,"is_pvip":false,"replies":[{"id":"68482","content":"这个我没想到很简单的讲法。<br><br>不过，真要从简的话，最基本的要求就是，不要用 new，不要用裸指针：使用智能指针来代替。<br><br>此外，在用到视图的时候，包括 ranges 里的视图和更简单的情况如 string_view，要确保使用视图时视图使用的对象一直存在，没有被意外销毁。视图不管理内存。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1581045328,"ip_address":"","comment_id":176347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14465941945","product_id":100040501,"comment_content":"老师能讲一讲关于c++内存安全相关的编码规范和技巧吗，我觉得这个或许才是很多同学的刚需","like_count":4,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483084,"discussion_content":"这个我没想到很简单的讲法。\n\n不过，真要从简的话，最基本的要求就是，不要用 new，不要用裸指针：使用智能指针来代替。\n\n此外，在用到视图的时候，包括 ranges 里的视图和更简单的情况如 string_view，要确保使用视图时视图使用的对象一直存在，没有被意外销毁。视图不管理内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581045328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253105,"user_name":"Geek_a16bbc","can_delete":false,"product_type":"c1","uid":2008721,"ip_address":"","ucode":"6F12AFEF638413","user_header":"","comment_is_top":false,"comment_ctime":1602599951,"is_pvip":false,"replies":[{"id":"92482","content":"循环展开后，会有相当于下面的表达式：<br><br>auto it = argv[1];<br>auto end = null_sentinel();<br>while (it != end) {<br>  …<br>  ++it;<br>}<br><br>这样不就用上上面的 operator!= 了？","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1602635025,"ip_address":"","comment_id":253105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5897567247","product_id":100040501,"comment_content":"template <br>bool operator!=(I i, null_sentinel)<br>{ return *i != 0;}<br><br>可以請老師說明一下null_sentinel在這邊的作用嗎？function body並沒有用到null_sentinel, null sentinel只出現在input parameter上。","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506975,"discussion_content":"循环展开后，会有相当于下面的表达式：\n\nauto it = argv[1];\nauto end = null_sentinel();\nwhile (it != end) {\n  …\n  ++it;\n}\n\n这样不就用上上面的 operator!= 了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602635025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177423,"user_name":"三味","can_delete":false,"product_type":"c1","uid":1362403,"ip_address":"","ucode":"A580F715D1CC96","user_header":"https://static001.geekbang.org/account/avatar/00/14/c9/e3/28c16afa.jpg","comment_is_top":false,"comment_ctime":1581390332,"is_pvip":false,"replies":[{"id":"68884","content":"看这些内容对你潜在是否有用吧。（我不是博士，也不喜欢太烧脑的代码。）<br><br>个人认为概念很重要，可能会改变大家对 C++ 的写法。协程对异步处理很重要，看你是不是需要了。范围是个好玩的东西，但如果对它不感冒，放一放关系也不大。<br><br>另外，那篇文章的作者的措辞是“像我们一样的没有C++博士学位的凡人”，哈哈。而且，他也说“‘coroutines’方法更清晰”。<br><br>出于好奇，我又去查了下 Eric Niebler 的简历，结果发现他也不是博士。他甚至不是计算机系毕业的（而是机械工程）。但他在 C++ 上浸淫的时间就长了（96 年毕业直接去了微软 Visual C++ 组），而且他还喜欢函数式编程。他认为容易的东西，别人理解有困难，也不算很不正常了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1581400477,"ip_address":"","comment_id":177423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876357628","product_id":100040501,"comment_content":"emmmmmmm... <br>最后提到的这篇文章，我之前看到过，印象最深刻的一句话就是，没有C++博士学位还想写C++？<br>最近的未来篇三篇我基本上都是走马观花的在看。。对我个人来说，感觉收益和学习成本比值有点小，根据以往经验，C++20要想全面开花，还有好几年的路要走。。<br>感觉C++11也是到了C++14才算是稳定点。。至少给我的感觉，直到C++17都是在对C++11进行修补。<br>所以，这三讲一年后我再回来好好学习吧！本来我的主业是图形","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483421,"discussion_content":"看这些内容对你潜在是否有用吧。（我不是博士，也不喜欢太烧脑的代码。）\n\n个人认为概念很重要，可能会改变大家对 C++ 的写法。协程对异步处理很重要，看你是不是需要了。范围是个好玩的东西，但如果对它不感冒，放一放关系也不大。\n\n另外，那篇文章的作者的措辞是“像我们一样的没有C++博士学位的凡人”，哈哈。而且，他也说“‘coroutines’方法更清晰”。\n\n出于好奇，我又去查了下 Eric Niebler 的简历，结果发现他也不是博士。他甚至不是计算机系毕业的（而是机械工程）。但他在 C++ 上浸淫的时间就长了（96 年毕业直接去了微软 Visual C++ 组），而且他还喜欢函数式编程。他认为容易的东西，别人理解有困难，也不算很不正常了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581400477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176605,"user_name":"Sochooligan","can_delete":false,"product_type":"c1","uid":1318528,"ip_address":"","ucode":"B66F78B6B86476","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/80/e409fff6.jpg","comment_is_top":false,"comment_ctime":1581099325,"is_pvip":false,"replies":[{"id":"68563","content":"多看两遍。ranges 和 concepts 对于一般的开发者来说应当是很新的东西，我自己也学习了很多遍，踩了很多坑。<br><br>二(1) 加行号说明是个好主意，我改一下吧。二(2) 两可之间的，就不动了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1581131398,"ip_address":"","comment_id":176605,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876066621","product_id":100040501,"comment_content":"一、看得云里雾里地，好的方面是所有例子都运行了。<br>二、发现两处分心的地方：<br>（1）我们可以在输出 r 之前插入下面这行： <br>我们可以在输出 r 之前（15行之后，16行之前）插入下面这行：<br>（2）除了 view，vector 满足所有的 range 概念。<br>vector 满足除view外所有的 range 概念。<br>三、我的环境是 macOS+vscode+gcc9.2.0_3(Target: x86_64-apple-darwin19) +gdb8.3","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483159,"discussion_content":"多看两遍。ranges 和 concepts 对于一般的开发者来说应当是很新的东西，我自己也学习了很多遍，踩了很多坑。\n\n二(1) 加行号说明是个好主意，我改一下吧。二(2) 两可之间的，就不动了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581131398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183921,"user_name":"皮皮侠","can_delete":false,"product_type":"c1","uid":1258402,"ip_address":"","ucode":"04205990C1DE1F","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/a2/6c0ffc15.jpg","comment_is_top":false,"comment_ctime":1583162449,"is_pvip":false,"replies":[{"id":"71291","content":"哈哈😇","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1583280026,"ip_address":"","comment_id":183921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583162449","product_id":100040501,"comment_content":"我大概能理解Bjarne Stroustrup最喜欢的C++特性为何有concepts:在高度统一的抽象中去繁就简。也在网上看了些对C++20中Ranges的反对意见，但我看到很多游戏开发者倒很喜欢这些新功能，感觉大多容器都能用ranges；）听老师读的那段，真是激情澎湃，魅力四射！","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485822,"discussion_content":"哈哈😇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583280026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}