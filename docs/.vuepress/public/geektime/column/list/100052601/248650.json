{"id":248650,"title":"12 | 编程范式：明明写的是Java，为什么被人说成了C代码？","content":"<p>你好！我是郑晔。</p><p>在上一个小模块，我给你讲了程序设计语言，帮助你重新审视一下自己最熟悉的日常工具。但是，使用程序设计语言是每个程序员都能做到的，可写出的程序却是千差万别的。这一讲，我们就来看看这些差异到底是怎样造成的。</p><p>在开始之前，我先给你讲一个小故事。</p><p>在一次代码评审中，小李兴致勃勃地给大家讲解自己用心编写的一段代码。这段代码不仅实现了业务功能，还考虑了许多异常场景。所以，面对同事们提出的各种问题，小李能够应对自如。</p><p>在讲解的过程中，小李看到同事们纷纷点头赞许，心中不由得生出一丝骄傲：我终于写出一段拿得出手的代码了！讲解完毕，久久未曾发言的技术负责人老赵站了起来：“小李啊！你这段代码从功能上来说，考虑得已经很全面了，这段时间你确实进步很大啊！”</p><p>要知道，老赵的功力之深是全公司人所共知的。能得到老赵的肯定，对小李来说，那简直是莫大的荣耀。还没等小李窃喜的劲过去，老赵接着说了，“但是啊，写代码不能只考虑功能，你看你这代码写的，虽然用的是Java，但写出来的简直就是C代码。”</p><p>正在兴头上的小李仿佛被人当头泼了一盆冷水，我用的是Java啊！一门正经八百的面向对象程序设计语言，咋就被说成写的是C代码了呢？</p><!-- [[[read_end]]] --><p>“你看啊！所有的代码都是把字段取出来计算，然后，再塞回去。各种不同层面的业务计算混在一起，将来有一点调整，所有的代码都得跟着变。”老赵很不客气地说。还没缓过神来的小李虽然想辩解，但他知道老赵说得是一针见血，指出的问题让人无法反驳。</p><p>在实际的开发过程中，有不少人遇到过类似的问题。老赵的意思并不是小李的代码真就成了C代码，而是说用Java写的代码应该有Java的风格，而小李的代码却处处体现着C的风格。</p><p>那这里所谓代码的风格到底是什么呢？它就是编程范式。</p><h2>编程范式</h2><p>编程范式（Programming paradigm），指的是程序的编写模式。使用了什么编程范式，通常意味着，你主要使用的是什么样的代码结构。从设计的角度说，编程范式决定了你在设计的时候，可以使用的元素有哪些。</p><p>现在主流的编程范式主要有三种：</p><ul>\n<li>结构化编程（structured programming）；</li>\n<li>面向对象编程（object-oriented programming）；</li>\n<li>函数式编程（functional programming）。</li>\n</ul><p><strong>结构化编程</strong>，是大部分程序员最熟悉的编程范式，它通过一些结构化的控制结构进行程序的构建。你最熟悉的控制结构应该就是if/else这样的选择结构和do/while这样的循环结构了。</p><p>结构化编程是最早普及的编程范式，现在最典型的结构化编程语言是C语言。C语言控制结构的影响极其深远，成为了很多程序设计语言的基础。</p><p><strong>面向对象编程</strong>，是现在最主流的编程范式，它的核心概念就是对象。用面向对象风格写出的程序，本质上就是一堆对象之间的交互。面向对象编程给我们提供了一种管理程序复杂性的方式，其中最重要的概念就是多态（polymorphism）。</p><p>现在主流的程序设计语言几乎都提供面向对象编程能力，其中最典型的代表当属Java。</p><p><strong>函数式编程</strong>，是近些年重新崛起的编程范式。顾名思义，它的核心概念是函数。但是，它的函数来自于数学里面的函数，所以，和我们常规理解的函数有一个极大的不同：不变性。也就是说，一个符号一旦创建就不再改变。</p><p>函数式编程的代表性语言应该是LISP。我们在<a href=\"https://time.geekbang.org/column/article/245868\">第8讲</a>曾经提到过它。之所以要把这位老祖宗搬出来，因为确实还没有哪门函数式编程语言能够完全独霸一方。</p><p>编程范式不仅仅是提供了一个个的概念，更重要的是，它对程序员的能力施加了约束。</p><ul>\n<li>结构化编程，限制使用goto语句，它是对程序控制权的<strong>直接</strong>转移施加了约束。</li>\n<li>面向对象编程，限制使用函数指针，它是对程序控制权的<strong>间接</strong>转移施加了约束。</li>\n<li>函数式编程，限制使用赋值语句，它是对程序中的<strong>赋值</strong>施加了约束。</li>\n</ul><p>之后讲到具体的编程范式时，我们再来展开讨论，这些约束到底是什么意思。</p><p>与其说这些编程范式是告诉你如何编写程序，倒不如说它们告诉你<strong>不要</strong>怎样做。理解这一点，你才算是真正理解了这些编程范式。</p><p>如果你去搜索编程范式的概念，你可能会找到更多的编程范式，比如，逻辑式编程，典型的代表是Prolog语言。但这些编程范式的影响力和受众面都相当有限。如果你想扩展自己的知识面，可以去了解一下。</p><h2>多范式编程</h2><p>从道理上讲，编程范式与具体语言的关系不大，这就好比你的思考与用什么语言表达是无关的。但在实际情况中，每一种语言都有自己的主流编程范式。比如，C语言主要是结构化编程，而 Java主要是面向对象编程。</p><p>不过，虽然每种语言都有自己的主流编程范式，但丝毫不妨碍程序员们在学习多种编程范式之后，打破“次元壁”，将不同编程范式中的优秀元素吸纳进来。这里的重点是“优秀”，而非“所有”。</p><p>举个例子，在Linux的设计中，有一个虚拟文件系统（Virtual File System，简称 VFS）的概念，你可以把它理解成一个文件系统的接口。在所有的接口中，其中最主要的是file_operations，它就对应着我们熟悉的各种文件操作。</p><p>下面是这个<a href=\"https://github.com/torvalds/linux/blob/master/include/linux/fs.h\">结构的定义</a>，这个结构很长，我从中截取了一些我们最熟悉的操作：</p><pre><code>struct file_operations {\n  loff_t (*llseek) (struct file *, loff_t, int);\n  ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);\n  ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);\n  int (*open) (struct inode *, struct file *);\n  int (*flush) (struct file *, fl_owner_t id);\n  int (*release) (struct inode *, struct file *);\n  ...\n}\n</code></pre><p>如果你要开发一个自己的文件系统，只需要把支持的接口对应着实现一遍，也就是给这个结构体的字段赋值。</p><p>我们换个角度看，这个结构体主要的字段都是函数指针，文件系统展现的行为与这些函数的赋值息息相关。只要给这个结构体的字段赋值成不同的参数，也就是把不同的函数关联上，这个文件系统就有了不同的行为。如果熟悉面向对象编程，你会发现，这不就是多态吗？</p><p>C是一门典型的结构化编程语言，而VFS的设计展现出来的却是面向对象编程的特点，编程范式的“次元壁”在这里被打破了。</p><p>事实上，类似的设计还有很多，比如，Java里有一个著名的基础库，Google出的Guava。它里面就提供了函数式编程的基础设施。在Java 8之前，Java在语法上并不支持函数式编程，但这并不妨碍我们通过类模拟出函数。</p><p>配合着Guava提供的基础设施，我很早就开始把函数式编程的方式运用在Java中了。同样，C++有一个functor的概念，也就是函数对象，通过重载 () 这个运算符，让对象模拟函数的行为。</p><p>无论是在以结构化编程为主的语言中引入面向对象编程，还是在面向对象为主的语言中引入函数式编程，在一个程序中应用多种编程范式已经成为了一个越来越明显的趋势。</p><p>不仅仅是在设计中，现在越来越多的程序设计语言开始将不同编程范式的内容融合起来。Java从Java 8开始引入了Lambda语法，现在我们可以更优雅地写出函数式编程的代码了。同样，C++ 11开始，语法上也开始支持Lambda了。</p><p>之所以多范式编程会越来越多，是因为我们的关注点是做出好的设计，写出更容易维护的代码，所以，我们会尝试着把不同编程风格中优秀的元素放在一起。比如，<strong>我们采用面向对象来组织程序，而在每个类具体的接口设计上，采用函数式编程的风格，在具体的实现中使用结构化编程提供的控制结构</strong>。</p><p>让我们回过头，看看开篇故事小李的委屈吧！老赵之所以批评小李，关键点就是小李并没有把各种编程范式中优秀的元素放到一起。Java是提供对面向对象的支持，面向对象的强项在于程序的组织，它归功的设计元素应该是对象，程序应该是靠对象的组合来完成，而小李去把它写成了平铺直叙的结构化代码，这当然是不值得鼓励的。</p><p>对于今天的程序员来说，<strong>学习不同的编程范式，将不同编程范式中的优秀元素应用在我们日常的软件设计之中，已经由原来的可选项变成了现在的必选项</strong>。否则，你即便拥有强大的现代化武器，也只能用作古代的冷兵器。</p><h2>总结时刻</h2><p>今天，我们今天讨论了编程范式。编程范式指的是程序的编写模式。现在主流的编程范式主要有三种：结构化编程、面向对象编程和函数式编程。编程范式对程序员的能力施加了约束，理解编程范式的一个关键点在于，<strong>哪些事情不要做</strong>。</p><p>从道理上讲，编程范式与具体语言的关系不大，但很多语言都有着自己主流的编程范式。但现在的一个趋势是，打破编程范式的“次元壁”，把不同编程范式中优秀的元素放在一起。</p><p>一方面，我们可以通过设计，模拟出其他编程范式中的元素，另一方面，程序设计语言的发展趋势也是要融合不同编程范式中优秀的元素。学习不同的编程范式，已经成为每个程序员的必修课。</p><p>在接下来的几讲里，我们就来深入地讨论一下各种编程范式。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>学习不同的编程范式，将其中优秀的元素运用在日常工作中</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/eb/5b70cc56084dca6bfd966d0259f03ceb.jpg?wh=2284*1292\" alt=\"\"></p><h2>思考题</h2><p>今天我们谈到了编程范式，每个程序员都会有自己特别熟悉的编程范式，但今天我想请你分享一下，你在学习其他编程范式时，给你思想上带来最大冲击的内容是什么。欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":228626,"user_name":"西西弗与卡夫卡","can_delete":false,"product_type":"c1","uid":1001710,"ip_address":"","ucode":"B4C27B8335B76A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg","comment_is_top":false,"comment_ctime":1592756133,"is_pvip":true,"replies":[{"id":"84332","content":"哈哈，你看出我从哪吸收营养了。","user_name":"作者回复","comment_id":228626,"uid":"1258861","ip_address":"","utype":1,"ctime":1592793132,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"126146807717","product_id":100052601,"comment_content":"当Bob大叔说出那句，“编程范式本质是从某方面对程序员编程能力的限制和规范”时，真有些振聋发聩","like_count":30,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499113,"discussion_content":"哈哈，你看出我从哪吸收营养了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592793132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228678,"user_name":"chenzesam","can_delete":false,"product_type":"c1","uid":1045011,"ip_address":"","ucode":"34E76BB9C7618D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/13/3ee5a9b4.jpg","comment_is_top":false,"comment_ctime":1592787432,"is_pvip":false,"replies":[{"id":"84328","content":"这个理解是对的，编程框架本来就是让你少和底层细节打交道。","user_name":"作者回复","comment_id":228678,"uid":"1258861","ip_address":"","utype":1,"ctime":1592793034,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"48837427688","product_id":100052601,"comment_content":"不单止编程范式对程序员的能力做了限制，编程框架也在开始做这一方面的努力了。努力提高程序员的下限。","like_count":12,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499144,"discussion_content":"这个理解是对的，编程框架本来就是让你少和底层细节打交道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592793034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228649,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1592782593,"is_pvip":false,"replies":[{"id":"84330","content":"没错！","user_name":"作者回复","comment_id":228649,"uid":"1258861","ip_address":"","utype":1,"ctime":1592793058,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"31657553665","product_id":100052601,"comment_content":"主流的编程语言都有结构化编程，面向对象编程，函数编程。纯粹单一的使用某个编程范式在现代编程语言其实会越来越少，现代语言都是吸收了各种编程范式的优点组合编程","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499127,"discussion_content":"没错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592793058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351248,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","nickname":"kylin","note":"","ucode":"3588B62A4F9534","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290514,"discussion_content":"还有图形化编程，哈哈😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594519928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229274,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1592956081,"is_pvip":true,"replies":[{"id":"84616","content":"为什么要在编程范式上下这么多功夫？因为没有地方把这些东西仔细讲啊！太多人只熟悉结构化编程了，对面向对象也不了解，对函数式编程也不了解，所以，要好好讲讲。","user_name":"作者回复","comment_id":229274,"uid":"1258861","ip_address":"","utype":1,"ctime":1592967084,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":1,"score":"23067792561","product_id":100052601,"comment_content":"看到编程范式，首先想到的是左耳听风专栏里面也有过的“编程范式游记”，不过当时似乎没有认真看，而且也没有音频版本，这次正好可以参照着学习一下。<br><br>斯坦福大学公开课中有编程范式，同样只看过前面一两讲。很久以前，我上大学的时候，似乎是没有编程范式这门课的（也可能有老师讲过，但是我逃掉了）。<br><br>特意去看了一下专栏的目录，编程范式这部分一共有 8 节课。有一点疑惑，为什么要在编程范式上下这么多功夫？<br><br>对我来说，结构化编程可能是用的最多的；面向对象也在用，但可能用的不好，甚至不对；函数式编程基本没怎么接触过。<br><br>我能够理解，文中所说“将不同编程范式中的优秀元素综合运用在日常工作中”，但是不知道如何去做。<br><br>等专栏的这个模块结束的时候，再来回答“编程范式为什么重要”这个问题。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499415,"discussion_content":"为什么要在编程范式上下这么多功夫？因为没有地方把这些东西仔细讲啊！太多人只熟悉结构化编程了，对面向对象也不了解，对函数式编程也不了解，所以，要好好讲讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592967084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228783,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1592809030,"is_pvip":false,"replies":[{"id":"84361","content":"后面讲到函数式编程的时候，你就会看到我的做法了，简言之，设计可以组合的接口。","user_name":"作者回复","comment_id":228783,"uid":"1258861","ip_address":"","utype":1,"ctime":1592815118,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":1,"score":"18772678214","product_id":100052601,"comment_content":"而在每个类具体的接口设计上，采用函数式编程的风格<br>------<br>老师，这句话具体如何理解，我脑子里出现的是java8里面的@FunctionalInterface，很多接口中的函数入参都是一个个@FunctionalInterface，比如：<br>public interface Predicate&lt;T&gt; {<br>default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) {<br>        Objects.requireNonNull(other);<br>        return (t) -&gt; test(t) &amp;&amp; other.test(t);<br>    }<br>...<br>}","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499192,"discussion_content":"后面讲到函数式编程的时候，你就会看到我的做法了，简言之，设计可以组合的接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592815118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228632,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1592758344,"is_pvip":false,"replies":[{"id":"84536","content":"不同的系统会有不同的原则，性能不关键的系统，用不变对象带来的优势大于性能损耗。","user_name":"作者回复","comment_id":228632,"uid":"1258861","ip_address":"","utype":1,"ctime":1592918099,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14477660232","product_id":100052601,"comment_content":"以函数式编程为例。<br>1.我能理解不变性的价值，毕竟在应对并发场景时我也用cow的模式。但很难接受将cow贯彻到每个函数，本能的觉得浪费。<br>2.我看得到函数式编程在代码上的简洁（可读性高）。但将功能实现成函数式编程的风格，感觉比较难（也可能是我水平不行，毕竟没有刻意练习），而难本身就是成本。（业务逻辑翻译成功能代码，从易到难：面向过程，面向对象，函数式编程）。<br>3.虽然我理解鸭子理论。但我就想明确的定义接口。因为，当我作为调用方时，我只想知道意图，而没有实现的接口，显然是比较整洁的。<br>4.虽然我理解函数是一等公民（单方法接口）的定位。但我就喜欢接口下定义多个方法（行为），因为我认为接口是一类事务共同行为的抽象，那么行为很可能是捆绑出现。比如说，对动物行为做抽象，吃和拉必须一起出现，只有吃没有拉，只有拉没有吃都挺尴尬。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499115,"discussion_content":"不同的系统会有不同的原则，性能不关键的系统，用不变对象带来的优势大于性能损耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592918099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254662,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603163976,"is_pvip":false,"replies":[{"id":"100122","content":"还可以转发《代码之丑》和《10x 程序员工作法》","user_name":"作者回复","comment_id":254662,"uid":"1258861","ip_address":"","utype":1,"ctime":1611728004,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10193098568","product_id":100052601,"comment_content":"一定要把这篇转发出去，中小公司的代码里都是平铺直叙，工作了几年，面向对象是什么都忘记了。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507478,"discussion_content":"还可以转发《代码之丑》和《10x 程序员工作法》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345536,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652365135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5947332431","product_id":100052601,"comment_content":"学习不同的编程范式，将其中优秀的元素运用在日常工作中--记下来，可以实践","like_count":0},{"had_liked":false,"id":228693,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1592788943,"is_pvip":false,"replies":[{"id":"84391","content":"编程范式，我们后面聊。","user_name":"作者回复","comment_id":228693,"uid":"1258861","ip_address":"","utype":1,"ctime":1592838027,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"5887756239","product_id":100052601,"comment_content":"如果有介绍各种需要编程范式发展和应用的资料就好了，比如Objective-C，Swift等等","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499153,"discussion_content":"编程范式，我们后面聊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592838027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318229,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635211143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635211143","product_id":100052601,"comment_content":"原来编程范式的另一面是告诉大家不要做什么","like_count":0},{"had_liked":false,"id":307349,"user_name":"solo","can_delete":false,"product_type":"c1","uid":1823890,"ip_address":"","ucode":"D1B9B1C4C97EC4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/d4/92/fb61d578.jpg","comment_is_top":false,"comment_ctime":1629038593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629038593","product_id":100052601,"comment_content":"小李做的就是用脚蹬电瓶车 ，电瓶车也提供了脚蹬子","like_count":1}]}