{"id":240656,"title":"13 | 实战：单机如何实现管理百万主机的心跳服务？","content":"<p>你好，我是陶辉。</p><p>这一讲我们将结合前12讲，以一个可管理百万主机集群的心跳服务作为实战案例，看看所有高性能服务的设计思路。</p><p>首先解释下什么是心跳服务。集群中的主机如果宕机，那么管理服务必须及时发现，并做相应的容灾处理，比如将宕机主机的业务迁移到新的虚拟机上等等。怎么做到及时发现呢？可以要求每台主机定时上报心跳包，考虑到网络报文的延迟，如果管理服务在几个上报周期内未收到心跳，则认为主机宕机。当新主机加入集群后，心跳服务也可以及时识别并告知管理服务。</p><p>这就是心跳服务要解决的核心问题，虽然很简单，可是如果集群规模达到百万台虚拟机或者微服务进程，这就不再简单了。多核CPU、内存使用效率、网络带宽时延积等都必须纳入你的考虑，因为此时心跳包占用的网络带宽已经接近网卡上限，仅调动一颗CPU的计算力去处理就会大量丢包，百万级的对象、网络连接也很容易造成内存OOM。甚至判断宕机的算法都要重新设计，降低时间复杂度后才能够应对超大集群的心跳管理。</p><p>解决这种集群规模下的性能问题，需要深入掌握底层基础知识，用系统化的全局思维去解决问题，这也是程序员薪资差异的重要分水岭。接下来，我们先实现更高效的核心算法，再设计高并发服务的架构，最后再来看传输层协议的选择。</p><!-- [[[read_end]]] --><h2>如何设计更快的宕机判断算法？</h2><p>通过心跳包找到宕机的主机需要一套算法，比如用for循环做一次遍历，找到停止上报心跳的主机就可以实现，然而正如<a href=\"https://time.geekbang.org/column/article/232351\">[第 3 讲]</a> 所说，<strong>当管理的对象数量级很大时，算法复杂度会严重影响程序性能</strong>，遍历算法此时并不可取。我们先分析下这个算法的时间复杂度。</p><p>如果用红黑树（这里用红黑树是因为它既支持遍历，也可以实现对数时间复杂度的查询操作）存放主机及其最近一次上报时间，那么，新主机上报心跳被发现的流程，时间复杂度仅为O(logN)，这是查询红黑树的成本。寻找宕机服务的流程，需要对红黑树做全量遍历，用当前时间去比较每个主机的上次心跳时间，时间复杂度就是O(N)！</p><p>如果业务对时间灵敏度要求很高，就意味着需要频繁地执行O(N)级的遍历，当N也就是主机数量很大时，耗时就很可观了。而且寻找宕机服务和接收心跳包是两个流程，如果它们都在单线程中执行，那么寻找宕机服务的那段时间就不能接收心跳包，会导致丢包！如果使用多线程并发执行，因为两个流程都需要操作红黑树，所以要使用到互斥锁，而当这两个流程争抢锁的频率很高时，性能也会急剧下降。</p><p><strong>其实这个算法的根本问题在于，判断宕机的流程做了大量的重复工作。</strong>比如，主机每隔1秒上报一次心跳，而考虑到网络可能丢包，故5秒内失去心跳就认为宕机，这种情况下，如果主机A在第10秒时失去心跳，那么第11、12、13、14这4秒对主机A的遍历，都是多余的，只有第15秒对主机A的遍历才有意义。于是，每次遍历平均浪费了4/5的计算量。</p><p>如何设计快速的宕机判断算法呢？其实，这是一个从一堆主机中寻找宕机服务的信息题。<strong>根据香农的理论，引入更多的信息，才能减少不确定性降低信息熵，从而减少计算量。就像心跳包间是有时间顺序的，上面的宕机判断算法显然忽略了接收到它们的顺序。</strong>比如主机A的上次心跳包距现在4秒了，而主机B距现在只有1秒，显然不应同等对待。</p><p>于是，我们引入存放心跳包的先入先出队列，这就保存了心跳包的时序关系。新的心跳包进入队列尾部，而老的心跳包则从队列首部退出，这样，寻找宕机服务时，只要看队列首部最老的心跳包，距现在是否超过5秒，如果超过5秒就认定宕机，同时把它取出队列，否则证明队列中不存在宕机服务，维持队列不变。</p><p>当然，这里并没有解决如何发现新主机的问题。我们还需要一个能够执行高效查询的容器，存放所有主机及其状态。红黑树虽然不慢，但我们不再需要遍历容器，所以可以选择更快的、查询时间复杂度为O(1)的哈希表存放主机信息（非标哈希表的实现参见<a href=\"https://time.geekbang.org/column/article/232351\">[第 3 讲]</a>）。如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/41/322fff00d232ebc1c85694babfb37541.png?wh=1306*582\" alt=\"\"></p><p>当然，队列中的心跳包并不是只能从队首删除，否则判断宕机流程的时间复杂度仍然是O(N)。实际上，每当收到心跳包时，如果对应主机的上一个心跳包还在队列中，那么可以直接把它从队列中删除。显然，计算在线主机何时宕机，只需要最新的心跳包，老的心跳包没有必要存在。因此，这个队列为每个主机仅保留最新的那个心跳包。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/97/94/97cae81094f213896989158cf9baf594.png?wh=899*799\" alt=\"\"></p><p>这样，判断宕机的速度会非常快，它的计算量等于实际发生宕机的主机数量。同时，接收心跳包并发现新主机的流程，因为只需要做一次哈希表查询，时间复杂度也只有O(1)。</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/d9/6ba31e4046ba0f578659bf423e4553d9.png?wh=1509*588\" alt=\"\"></p><p>这样，新算法通过<strong>以空间换时间</strong>的思想，虽然使用了更加占用空间的哈希表，并新增了有序队列容器，但将宕机和新主机发现这两个流程都优化到了常量级的时间复杂度。尤其是宕机流程的计算量非常小，它仅与实际宕机服务的数量有关，这就允许我们将宕机判断流程插入到心跳包的处理流程中，以微观上的分时任务实现宏观上的并发，同时也避免了对哈希表的加锁。</p><h2>如何设计高并发架构？</h2><p>有了核心算法，还需要充分利用服务器资源的架构，才能实现高并发。</p><p>一颗1GHZ主频的CPU，意味着一秒钟只有10亿个时钟周期可以工作，如果心跳服务每秒接收到100万心跳包，就要求它必须在1000个时钟周期内处理完一个心跳包。这无法做到，因为每一个汇编指令的执行需要多个时钟周期（参见<a href=\"https://en.wikipedia.org/wiki/Cycles_per_instruction\">CPI</a>），一条高级语言的语句又由多条汇编指令构成，而中间件提供的反序列化等函数又需要很多条语句才能完成。另外，内核从网卡上读取报文，执行协议分析需要的时钟周期也要算到这1000个时钟周期里。</p><p>因此，选择只用一颗CPU为核心的单线程开发模式，一定会出现计算力不足，不能及时接收报文从而使得缓冲区溢出的问题，最终导致大量丢包。所以，我们必须选择多线程或者多进程开发模式。多进程之间干扰更小，但内存不是共享的，数据同步较为困难，因此案例中我们还是选择多线程开发模式。</p><p>使用多线程后我们需要解决3个问题。</p><p>第一是负载均衡，我们应当把心跳包尽量均匀分配到不同的工作线程上处理。比如，接收网络报文的线程基于主机名或者IP地址，用哈希算法将心跳包分发给工作线程处理，这样每个工作线程只处理特定主机的心跳，相互间不会互相干扰，从而可以无锁编程。</p><p>第二是多线程同步。分发线程与工作线程间可以采用生产者-消费者模型传递心跳包，然而多线程间传递数据要加锁，为了减少争抢锁对系统资源的消耗，需要做到以下两点：</p><ul>\n<li>由于工作线程多过分发线程（接收心跳包消耗的资源更少），所以每个工作线程都配发独立的缓冲队列及操作队列的互斥锁；</li>\n<li>为避免线程执行主动切换，必须使用自旋锁，关于锁的选择你可以看<a href=\"https://time.geekbang.org/column/article/234548\">[第 6 讲]</a>。如下图所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/27/76/2726b6c9b73325583f8491a822a22476.png?wh=1008*785\" alt=\"\"></p><p>第三要解决CPU亲和性问题。从<a href=\"https://time.geekbang.org/column/article/232351\">[第 1 讲]</a> 我们可以看到，CPU缓存对计算速度的影响很大，如果线程频繁地切换CPU会导致缓存命中率下降，降低性能，此时将线程绑定到特定的CPU就是一个解决方案（NUMA架构也会对CPU亲和性产生影响，这里略过）。</p><p>这样，通过上述的多线程架构就可以有效地使用CPU。当然，除了CPU，内存的使用效率也很重要。<a href=\"https://time.geekbang.org/column/article/230221\">[第２讲]</a> 中我们提到，TCMalloc相比Linux默认的PtMalloc2内存池，在多线程下分配小块内存的速度要快得多，所以对于心跳服务应当改用TCMalloc申请内存。而且，如果心跳包对象的格式已经固定，你还可以建立一个心跳包资源池，循环往复的使用，这进一步减少了构造、销毁心跳包对象所消耗的计算力。</p><p>由于服务重启后一个心跳周期内就可以获得所有心跳包，所以并不需要将数据持久化到磁盘上。如果你想进一步了解磁盘优化，可以再看下<a href=\"https://time.geekbang.org/column/article/232676\">[第 4 讲]</a>。</p><h2>如何选择心跳包网络协议？</h2><p>最后我们再来看看心跳包的协议该选择TCP还是UDP实现。</p><p>网络报文的长度是受限的，<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E4%BC%A0%E8%BE%93%E5%8D%95%E5%85%83\">MTU</a>（Maximum Transmission Unit）定义了最大值。比如以太网中MTU是1500字节，如果TCP或者UDP试图传送大于1500字节的报文，IP协议就会把报文拆分后再发到网络中，并在接收方组装回原来的报文。然而，IP协议并不擅长做这件事，拆包组包的效率很低，因此TCP协议宁愿自己拆包（详见<a href=\"https://time.geekbang.org/column/article/239176\">[第 11 讲]</a>）。</p><p>所以，如果心跳包长度小于MTU，那么UDP协议是最佳选择。如果心跳包长度大于MTU，那么最好选择TCP协议，面对复杂的TCP协议，还需要解决以下问题。</p><p>首先，一台服务器到底能同时建立多少TCP连接？要回答这个问题，得先从TCP四元组谈起，它唯一确定一个TCP连接。TCP四元组分别是&lt;源IP、目的IP、源端口、目的端口&gt;，其中前两者在IP头部中，后两者在TCP头部中。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/2f/e05b4dcffa30fe5ec5a3a85511f0db2f.png?wh=1683*417\" alt=\"\"></p><p>由于IPv4地址为4个字节（参见<a href=\"https://time.geekbang.org/column/article/235302\">[第 7 讲]</a>）、端口为2个字节，所以当服务器IP地址和监听端口固定时，并发连接数的上限则是2<sup>(32+16)</sup>。</p><p>当然，这么高的并发连接需要很多条件，其中之一就是增加单个进程允许打开的最大句柄数（包括操作系统允许的最大句柄数/proc/sys/fs/file-nr），因为Linux下每个连接都要用掉一个文件句柄。当然，作为客户端的主机如果想用足2<sup>16</sup>&nbsp;端口，还得修改ip_local_port_range配置，扩大客户端的端口范围：</p><pre><code>net.ipv4.ip_local_port_range = 32768    60999\n</code></pre><p>其次，基于TCP协议实现百万级别的高并发，必须使用基于事件驱动的全异步开发模式（参见<a href=\"https://time.geekbang.org/column/article/236921\">[第 8 讲]</a>）。而且，TCP协议的默认配置并没有考虑高并发场景，所以我们还得在以下4个方面优化TCP协议：</p><ol>\n<li>三次握手建立连接的过程需要优化，详见<a href=\"https://time.geekbang.org/column/article/237612\">[第 9 讲]</a>；</li>\n<li>四次挥手关闭连接的过程也需要优化，详见<a href=\"https://time.geekbang.org/column/article/238388\">[第 10 讲]</a>；</li>\n<li>依据网络带宽时延积重新设置TCP缓冲区，详见<a href=\"https://time.geekbang.org/column/article/239176\">[第 11讲]</a>；</li>\n<li>优化拥塞控制算法，详见<a href=\"https://time.geekbang.org/column/article/239621\">[第 12 讲]</a>。</li>\n</ol><p>最后还有一个问题需要我们考虑。网络中断时并没有任何信息通知服务器，此时该如何发现并清理服务器上的这些僵死连接呢？KeepAlive机制允许服务器定时向客户端探测连接是否存活。其中，每隔tcp_keepalive_time秒执行一次探测。</p><pre><code>net.ipv4.tcp_keepalive_time = 7200\n</code></pre><p>每次探测的最大等待时间是tcp_keepalive_intvl 秒。</p><pre><code>net.ipv4.tcp_keepalive_intvl = 75\n</code></pre><p>超时后，内核最多尝试tcp_keepalive_probes次，仍然没有反应就会及时关闭连接。</p><pre><code>net.ipv4.tcp_keepalive_probes = 9\n</code></pre><p>当然，如果在应用层通过心跳能及时清理僵死TCP连接，效果会更好。</p><p>从上述优化方案可见，TCP协议的高并发优化方案还是比较复杂的，这也是享受TCP优势时我们必须要付出的代价。</p><h2>小结</h2><p>这一讲以我实践过的项目为案例，介绍了高并发服务的设计思路。</p><p>核心算法对性能的影响最大，为了设计出高效的算法，我们必须分析出时间复杂度，充分寻找、利用已知信息，减少算法的计算量。在心跳服务这个案例中，利用好心跳包的时序，就可以把计算宕机的时间复杂度从O(N) 降为O(1)。</p><p>有了好的算法，还需要好的架构，才能高效地调动系统资源。当摩尔定律在CPU频率上失效后，CPU都在向多核发展，所以高性能必须充分使用多核的计算力。此时，我们需要谨慎设计多线程间的负载均衡和数据同步，尽量减少访问共享资源带来的损耗。选择与业务场景匹配的内存池也很重要，对于RPS上百万的服务来说，申请内存的时间不再是一个忽略项。</p><p>选择网络协议时，如果消息长度大于MTU，那么选择TCP更有利，但TCP解决了流控、可靠性等很多问题，优化起来较为困难。对于不要求可靠传输，长度通常不大的心跳包来说，UDP协议通常是更好的选择。</p><h2>思考题</h2><p>最后，还是留给你点思考题。你遇到过心跳服务吗？它是怎么设计的？还有哪些优化空间？欢迎你在留言区与我探讨。</p><p>感谢阅读，如果你觉得这节课对你有一些启发，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":221732,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1590578213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53130185765","product_id":100051201,"comment_content":"本文收获蛮多的，可是没有遇到相关的场景，也希望多看看别人的思考和总结。<br>关于寻找宕机的节点，核心思路就是收到心跳包先插入队列尾部，然后通过哈希表找到队列中之前的位置进行判断是否宕机，并将队列中之前的心跳信息删除。这样用空间换时间，降低时间复杂度。<br>关于如何在单机模拟百万连接，可以参考https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;6K9YDpdvsPbcw5_Rc0NyBQ","like_count":12},{"had_liked":false,"id":231245,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1593613130,"is_pvip":false,"replies":[{"id":"90480","content":"这些知识都可以互相串起来，你可以从我的目录安排上找到串联方式^_^","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599211265,"ip_address":"","comment_id":231245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23068449610","product_id":100051201,"comment_content":"看到现在。每篇文章都得看两遍以上，才有感觉，相比于这些底层知识，特别感慨和好奇老师是怎么把这些抽象的东西搞得这么具体清楚！敬佩啊！","like_count":5,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500214,"discussion_content":"这些知识都可以互相串起来，你可以从我的目录安排上找到串联方式^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599211265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221819,"user_name":"凉人。","can_delete":false,"product_type":"c1","uid":1659177,"ip_address":"","ucode":"4DB16004A62015","user_header":"https://static001.geekbang.org/account/avatar/00/19/51/29/24739c58.jpg","comment_is_top":false,"comment_ctime":1590595416,"is_pvip":false,"replies":[{"id":"81793","content":"你好凉人，如果是一个企业内部云上的主机，都会有NTP等服务来同步时间的，此时这套算法总体的计算成本最低。如果时间确实无法同步，需要应用代码来处理，那么时间轮也是一个不错的算法。<br>","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590630855,"ip_address":"","comment_id":221819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14475497304","product_id":100051201,"comment_content":"如果主机处理得速度不同，我想会不会心跳时间会有区别。这样用时间轮会不会好点。","like_count":3,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496581,"discussion_content":"你好凉人，如果是一个企业内部云上的主机，都会有NTP等服务来同步时间的，此时这套算法总体的计算成本最低。如果时间确实无法同步，需要应用代码来处理，那么时间轮也是一个不错的算法。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590630855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221611,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1590548980,"is_pvip":false,"replies":[{"id":"81740","content":"你好有铭，这种设计下，还必须限制每次移除心跳包的数量（分多次执行），以防止加入过程长时间得不到执行。<br>而且，在这种极限场景下，必须监控CPU的使用率，如果长期维持在高占用率（可能你的集群规模已经超大，要每秒处理数百万心跳包），那么应当通过扩容更多的CPU核、分布式系统等其他方案来解决，这已经不是单台机器能解决的了。","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590568790,"ip_address":"","comment_id":221611,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14475450868","product_id":100051201,"comment_content":"寻找宕机服务时，只要看队列首部最老的心跳包，距现在是否超过 5 秒，如果超过 5 秒就认定宕机<br>==========<br>这里的逻辑无法理解：如果要用这种方式检测心跳，那么肯定要不停的把队列首部的心跳包移除，让新的心跳包从尾部加入，那么如果这个加入的过程卡一点。岂不是就会误判？？","like_count":3,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496513,"discussion_content":"你好有铭，这种设计下，还必须限制每次移除心跳包的数量（分多次执行），以防止加入过程长时间得不到执行。\n而且，在这种极限场景下，必须监控CPU的使用率，如果长期维持在高占用率（可能你的集群规模已经超大，要每秒处理数百万心跳包），那么应当通过扩容更多的CPU核、分布式系统等其他方案来解决，这已经不是单台机器能解决的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590568790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1269873,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/71/895ee6cf.jpg","nickname":"分清云淡","note":"","ucode":"7045AE6BF72D31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274316,"discussion_content":"也不至于卡上几秒，真这么卡的话把宕机判断条件放宽一点。这里逻辑上不需要精确一定是超过10秒，实践上上超过9秒判断为宕机也不算错。\n\n删除动作只需要不停地删除队列前面的元素（因为队列是有序的），所以是O(1)的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590566798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014649,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/79/df384bdc.jpg","nickname":"修愿三秋","note":"","ucode":"0AEE445D8DBFF4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274242,"discussion_content":"我也无法理解，这种方式要不断地从队列里删除老数据，这个删除操作的时间复杂度也不会是o(1)啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590558047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1108159,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e8/bf/39042a46.jpg","nickname":"牙医","note":"","ucode":"27791DFF11EF45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014649,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/79/df384bdc.jpg","nickname":"修愿三秋","note":"","ucode":"0AEE445D8DBFF4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":274424,"discussion_content":"可以使用有界的循环队列，删除操作o(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590581308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":274242,"ip_address":""},"score":274424,"extra":""},{"author":{"id":3031867,"avatar":"","nickname":"Geek_1ca1a6","note":"","ucode":"F00B9A60D32A3E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1014649,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/79/df384bdc.jpg","nickname":"修愿三秋","note":"","ucode":"0AEE445D8DBFF4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":579738,"discussion_content":"链表删除就是 O(1) 吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657641705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":274242,"ip_address":""},"score":579738,"extra":""}]}]},{"had_liked":false,"id":221596,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1590546645,"is_pvip":false,"replies":[{"id":"81741","content":"你好那时刻，生产环境中必须容忍网络的抖动，因此容忍一定比例的丢包，是正常的，你的这个方法是可以的，当然，如果有些主机频繁的出现网络不稳定的话，也可以考虑用更平滑的函数来判断宕机","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590568961,"ip_address":"","comment_id":221596,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14475448533","product_id":100051201,"comment_content":"老师在文中提到的超过五秒没有收到心跳消息就会把这台主机从状态列表里删除了。可能有这种情况，比如主机A因为网络抖动超过五秒发来心跳消息，尽管它是alive状态，但是我们会误认为它下线了。为了应对这种情况，我们之前会采取一段时间内收到消息的百分数来计算，比如每秒一个心跳消息，在20秒内应该收到20个心跳消息，比如收到10个，比例是50%。以这个比例作为是否下线的阈值。请问老师，不知是否还有更好办法？","like_count":3,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496508,"discussion_content":"你好那时刻，生产环境中必须容忍网络的抖动，因此容忍一定比例的丢包，是正常的，你的这个方法是可以的，当然，如果有些主机频繁的出现网络不稳定的话，也可以考虑用更平滑的函数来判断宕机","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590568961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274258,"discussion_content":"你如果要算最近接收心跳包的比例,那么就需要存短期的历史状态了.\n老师的这套方案可能就不适合了.\n你可能需要权衡一下你们的数据量.\n\n另外,老师这里只是简单的一个模型,在真实环境中,确实应该考虑到网络抖动的状况.\n毕竟很多服务注册中心,都会有一定的容错空间.不会短期把所有节点都摘除掉的.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590559519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250753,"user_name":"李新龙","can_delete":false,"product_type":"c1","uid":2062265,"ip_address":"","ucode":"72C1B0F07EE526","user_header":"","comment_is_top":false,"comment_ctime":1601211314,"is_pvip":false,"replies":[{"id":"91859","content":"通过IP等构成的Key，到哈希表中找到Value，其中包括指向队列中的引用，就可以操作队列了","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1601429693,"ip_address":"","comment_id":250753,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10191145906","product_id":100051201,"comment_content":"每当收到心跳包时，如果对应主机的上一个心跳包还在队列中，那么可以直接把它从队列中删除。没讲清楚，怎么找到上一个？","like_count":2,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506277,"discussion_content":"通过IP等构成的Key，到哈希表中找到Value，其中包括指向队列中的引用，就可以操作队列了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601429693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1447866,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/ba/c56aa720.jpg","nickname":"new life","note":"","ucode":"B817AC3909102B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":564765,"discussion_content":"但这个队列一直在变化，有新增也有移除元素，持有的那个引用很快就会失效呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650329534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":506277,"ip_address":""},"score":564765,"extra":""}]}]},{"had_liked":false,"id":241729,"user_name":"wwj","can_delete":false,"product_type":"c1","uid":1053787,"ip_address":"","ucode":"B98AE5F5D85A87","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzvaL724GwtzZ5mcldUnlicicSlI8BXL9icRZbUOB10qjRMlmog7UTvwxSBHXagnPGGR1BYdjWcGGSg/132","comment_is_top":false,"comment_ctime":1597403341,"is_pvip":false,"replies":[{"id":"90303","content":"时间轮也需要1个字典，字典即使不用hash实现，也是必不可少的，因为1个主机发出的多个心跳需要进行数据同步","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599006493,"ip_address":"","comment_id":241729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10187337933","product_id":100051201,"comment_content":"感觉时间轮算法比这个更有效一些 比hash节省空间","like_count":2,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503826,"discussion_content":"时间轮也需要1个字典，字典即使不用hash实现，也是必不可少的，因为1个主机发出的多个心跳需要进行数据同步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599006493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284161,"user_name":"Geek_David","can_delete":false,"product_type":"c1","uid":1897719,"ip_address":"","ucode":"9B9F30BB2F2C68","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/f7/871ff71d.jpg","comment_is_top":false,"comment_ctime":1616084796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5911052092","product_id":100051201,"comment_content":"老师你好，这里有个问题还不太明白。<br>1.FIFO队列存心跳是不是应该每个服务对应一个队列<br>2.每个队列每一秒判断一次心跳有没有超过5秒<br>3.当最老的心跳超过5s我们就判断后面有没有新的心跳，直到队列中最后一个心跳还是超过5s才认为宕机<br><br>不知道我的理解对不对","like_count":1},{"had_liked":false,"id":244934,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1598756342,"is_pvip":false,"replies":[{"id":"90255","content":"1、1个包只分发到1个线程的队列中，分发完毕后就结束，这不就是互斥了吗？<br>2、只要消费者的速度是大于生产者的，就是及时的。监控线程队列，如果发现生产速度过快，需要进行线程扩容或者服务器扩容。","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1598942812,"ip_address":"","comment_id":244934,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5893723638","product_id":100051201,"comment_content":"请教老师，对于做负载均衡的多个分发线程，如何做到及时并且互斥的分发包？","like_count":1,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504742,"discussion_content":"1、1个包只分发到1个线程的队列中，分发完毕后就结束，这不就是互斥了吗？\n2、只要消费者的速度是大于生产者的，就是及时的。监控线程队列，如果发现生产速度过快，需要进行线程扩容或者服务器扩容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598942812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227549,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1592406150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887373446","product_id":100051201,"comment_content":"工作线程和分发线程 这里的设计 和 dpdk 的pipeline模式基本相同，cpu分为rx lcores，worker lcores，tx lcores ～","like_count":1},{"had_liked":false,"id":221530,"user_name":"Ken","can_delete":false,"product_type":"c1","uid":1120761,"ip_address":"","ucode":"9F829156E855C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/f9/62ae32d7.jpg","comment_is_top":false,"comment_ctime":1590535927,"is_pvip":false,"replies":[{"id":"81713","content":"^_^","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590547846,"ip_address":"","comment_id":221530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885503223","product_id":100051201,"comment_content":"烧脑，还在消化，容我二刷回来评论😂","like_count":1,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496481,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590547846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361050,"user_name":"寒潮nl","can_delete":false,"product_type":"c1","uid":3212645,"ip_address":"四川","ucode":"E7E1A0D24656B9","user_header":"https://static001.geekbang.org/account/avatar/00/31/05/65/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1667144932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667144932","product_id":100051201,"comment_content":"按不同ip绑定到特定工作线程的方法，如果这个工作线程的任务队列过长，或者过短，该怎么进行负载均衡呢","like_count":0},{"had_liked":false,"id":353647,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"四川","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1659659730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659659730","product_id":100051201,"comment_content":"如果按照时间排序做小顶堆，即最早的时间再堆顶，每次来数据从堆上删除数据，然后加入堆即可，判断的时候从堆顶取元素如果超时则告警删除，直到堆顶元素不超时，既可以结束遍历","like_count":0},{"had_liked":false,"id":346229,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1051460,"ip_address":"","ucode":"BD6733AD64F833","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/44/c59fa938.jpg","comment_is_top":false,"comment_ctime":1652930549,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652930549","product_id":100051201,"comment_content":"TCP这块内容太缺乏，听起来很烧脑，不过内容很详尽，需要多品👍🏻👍🏻","like_count":0},{"had_liked":false,"id":341906,"user_name":"云海","can_delete":false,"product_type":"c1","uid":1365206,"ip_address":"","ucode":"0C6CA0BE58EA21","user_header":"https://static001.geekbang.org/account/avatar/00/14/d4/d6/1d4543ac.jpg","comment_is_top":false,"comment_ctime":1649912325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649912325","product_id":100051201,"comment_content":"文中提到“这个队列为每个主机仅保留最新的那个心跳包。”。既然仅保留一个，那还需要队列吗？直接一个基础类型即可吧","like_count":0},{"had_liked":false,"id":286363,"user_name":"永远的草莓地","can_delete":false,"product_type":"c1","uid":1034001,"ip_address":"","ucode":"D4BD8DD42350CC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/11/89ba9915.jpg","comment_is_top":false,"comment_ctime":1617268694,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617268694","product_id":100051201,"comment_content":"因为 ip_local_port_range 的限制，一台代理服务器是不是理论上最多只能反向代理 65535个 长连接，感觉太少了，怎么突破这种限制？让upstream 增加端口吗？","like_count":0},{"had_liked":false,"id":241636,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1597375815,"is_pvip":true,"replies":[{"id":"90271","content":"hash表是用来在报文到达、判断是否过期这两个过程中，加速检索速度的。它的Key就是主机，Value指向队列中的报文。","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1598945602,"ip_address":"","comment_id":241636,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597375815","product_id":100051201,"comment_content":"心跳包哪一块的设计，用队列存储心跳的信息，hash表主要存储的是什么信息？以及他的作用是什么  没看太懂，请您指导","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503797,"discussion_content":"hash表是用来在报文到达、判断是否过期这两个过程中，加速检索速度的。它的Key就是主机，Value指向队列中的报文。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598945602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232870,"user_name":"坤哥","can_delete":false,"product_type":"c1","uid":2053749,"ip_address":"","ucode":"E0B2C6F35EB0FD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/56/75/6bf38a1e.jpg","comment_is_top":false,"comment_ctime":1594133194,"is_pvip":false,"replies":[{"id":"90477","content":"是的","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599211092,"ip_address":"","comment_id":232870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594133194","product_id":100051201,"comment_content":"无锁编程，除非一个线程一个工作队列，否则单个队列实现不了","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500792,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599211092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232868,"user_name":"坤哥","can_delete":false,"product_type":"c1","uid":2053749,"ip_address":"","ucode":"E0B2C6F35EB0FD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/56/75/6bf38a1e.jpg","comment_is_top":false,"comment_ctime":1594132941,"is_pvip":false,"replies":[{"id":"90476","content":"没错坤哥，只要是临界区资源的并发访问，是一定要加锁的^_^","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599211082,"ip_address":"","comment_id":232868,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1594132941","product_id":100051201,"comment_content":"陶哥，我认为如果只用单个队列，不可避免对hash加锁，因为查看队列头部，发现过期心跳包会与工作线程同时操作hash有冲突。","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500791,"discussion_content":"没错坤哥，只要是临界区资源的并发访问，是一定要加锁的^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599211082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2086960,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d8/30/840b64fa.jpg","nickname":"Frank木风","note":"","ucode":"8DAA325F19E00E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333249,"discussion_content":"这个问题我也想了，是不是可以放到工作线程来检测？take加timeout在工作队列来拿新的心跳，如果没有新心跳，就timout，去看自己维护的队列头部是不是有过期的。在一个线程里做，就不用加锁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607489530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232150,"user_name":"Geek_8c0618","can_delete":false,"product_type":"c1","uid":2009485,"ip_address":"","ucode":"46AB431B57B32F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eocvvlibbfYw4wezziaBKn2OLDpvTndicPr21ZZoeiaM5QLibICy7PJPQibCAz5zfMe08ibem7ll3LSzkWaQ/132","comment_is_top":false,"comment_ctime":1593873179,"is_pvip":false,"replies":[{"id":"90751","content":"类似LRU的思想","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599616409,"ip_address":"","comment_id":232150,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593873179","product_id":100051201,"comment_content":"其实是LRU对吗","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500532,"discussion_content":"类似LRU的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599616409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231395,"user_name":"G.S.K","can_delete":false,"product_type":"c1","uid":1222966,"ip_address":"","ucode":"88217F9289EB48","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/36/d054c979.jpg","comment_is_top":false,"comment_ctime":1593665995,"is_pvip":false,"replies":[{"id":"85615","content":"是的，在第21、24课都有介绍","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1593825766,"ip_address":"","comment_id":231395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593665995","product_id":100051201,"comment_content":"老师讲的这个是单机服务，分布式服务的话，是不是前边挂个负载均衡器，采用源ip哈希就可以呢？","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500282,"discussion_content":"是的，在第21、24课都有介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593825766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230435,"user_name":"我能走多远","can_delete":false,"product_type":"c1","uid":1240465,"ip_address":"","ucode":"07DF5D5DADFA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/91/1d332031.jpg","comment_is_top":false,"comment_ctime":1593391197,"is_pvip":false,"replies":[{"id":"90486","content":"有点相似","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599212547,"ip_address":"","comment_id":230435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593391197","product_id":100051201,"comment_content":"感觉类似一个lru的算法。双向链表实现的队列。这个场景在dpdk源码中分片报文尾重组有应用。","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499887,"discussion_content":"有点相似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599212547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222812,"user_name":"hanazawakana","can_delete":false,"product_type":"c1","uid":1251721,"ip_address":"","ucode":"E0F6FACBFE7D15","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","comment_is_top":false,"comment_ctime":1590916930,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1590916930","product_id":100051201,"comment_content":"当然，队列中的心跳包并不是只能从队首删除，否则判断宕机流程的时间复杂度仍然是 O(N)。这里没看懂，为什么仍然是o（n），不是只需要判断队首就可以了吗","like_count":0,"discussions":[{"author":{"id":1122150,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","nickname":"万历十五年","note":"","ucode":"3D8CF5DF847AE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302006,"discussion_content":"有序队列只存放客户端的最新信息，当有新包到来，通过哈希表找到旧包在有序队列里的位置并把这个旧包信息从队列中删除。查找旧包，删除旧包，添加新包，这三步合起来看就是一个更新操作。对于超时宕机的操作，只需要判断有序队列的队首，超时就直接删除。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598755331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1511164,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0e/fc/b1aa7f69.jpg","nickname":"Vincent","note":"","ucode":"6053B15D2B6AD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281797,"discussion_content":"一个服务可能发了多个包，新的包在后边，不遍历不能确定它是否超时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591803598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222449,"user_name":"几米夜空","can_delete":false,"product_type":"c1","uid":1658988,"ip_address":"","ucode":"D69A53065E033E","user_header":"https://static001.geekbang.org/account/avatar/00/19/50/6c/12c39b37.jpg","comment_is_top":false,"comment_ctime":1590808441,"is_pvip":false,"replies":[{"id":"82059","content":"1、子进程（包括线程）才可以复用父进程打开的端口，无关的进程是不能打开已经在监听的端口的。<br>2、可以看下第3课，里面有提到好的哈希函数该如何设计，另外装载因子也会影响冲突率","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590840901,"ip_address":"","comment_id":222449,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1590808441","product_id":100051201,"comment_content":"有几个问题:<br>1.若使用UDP，有的系统不支持端口重用，只能打开一个相同UDP端口，这对于百万心跳，这有可能内核缓冲区就丢包，这怎么处理？<br>2.这还是需要去遍历哈希表，检查是否超时?若哈希函数不好，这链表也很长，这时间复杂度还是跟前面提到的一样，有没有什么好的哈希函数保证冲突少呢？","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496800,"discussion_content":"1、子进程（包括线程）才可以复用父进程打开的端口，无关的进程是不能打开已经在监听的端口的。\n2、可以看下第3课，里面有提到好的哈希函数该如何设计，另外装载因子也会影响冲突率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590840901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1511164,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0e/fc/b1aa7f69.jpg","nickname":"Vincent","note":"","ucode":"6053B15D2B6AD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281800,"discussion_content":"超时应该不是遍历哈希表，是遍历链表最前边的节点。链表是按接收顺序插入的，所以只需要遍历到不超时的节点为止就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591803740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222200,"user_name":"起飞的鸭子","can_delete":false,"product_type":"c1","uid":1093056,"ip_address":"","ucode":"F04049210F7DF7","user_header":"https://static001.geekbang.org/account/avatar/00/10/ad/c0/ea2b3a14.jpg","comment_is_top":false,"comment_ctime":1590715949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590715949","product_id":100051201,"comment_content":"深度好文，大开眼界","like_count":0},{"had_liked":false,"id":221864,"user_name":"侠影","can_delete":false,"product_type":"c1","uid":1879220,"ip_address":"","ucode":"73D81E5E9D0837","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ac/b4/2ff229cb.jpg","comment_is_top":false,"comment_ctime":1590625122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590625122","product_id":100051201,"comment_content":"有序队列中替换一个节点的心跳信息，不也需要遍历由于队列吗？这里有什么优化方案吗？","like_count":0},{"had_liked":false,"id":221787,"user_name":"野性力量","can_delete":false,"product_type":"c1","uid":1578718,"ip_address":"","ucode":"B6C152FA332B14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/diaGeaLuw3oTAcyFMnkiaVur33RXdUZL8z1LtfHibIyh4r629YSexJQz5JXYjBH7v9rwHH7ham5CzqDZF75QnGIwg/132","comment_is_top":false,"comment_ctime":1590591511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590591511","product_id":100051201,"comment_content":"有什么开源的管理服务是这样设计的吗？","like_count":0},{"had_liked":false,"id":221786,"user_name":"野性力量","can_delete":false,"product_type":"c1","uid":1578718,"ip_address":"","ucode":"B6C152FA332B14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/diaGeaLuw3oTAcyFMnkiaVur33RXdUZL8z1LtfHibIyh4r629YSexJQz5JXYjBH7v9rwHH7ham5CzqDZF75QnGIwg/132","comment_is_top":false,"comment_ctime":1590591366,"is_pvip":false,"replies":[{"id":"81794","content":"应该判定为宕机","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590630906,"ip_address":"","comment_id":221786,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590591366","product_id":100051201,"comment_content":"提个和本文内容无关的问题，如果管理中心和服务网络断开，但是服务实际没有宕机，而且调用方也能访问服务，这种应该判定为宕机吗？","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496569,"discussion_content":"应该判定为宕机","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590630906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221743,"user_name":"449038","can_delete":false,"product_type":"c1","uid":1473603,"ip_address":"","ucode":"01BA13724DF7A8","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/43/fd54a655.jpg","comment_is_top":false,"comment_ctime":1590580291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590580291","product_id":100051201,"comment_content":"很棒的内容","like_count":0},{"had_liked":false,"id":221586,"user_name":"🎧重返归途","can_delete":false,"product_type":"c1","uid":1991518,"ip_address":"","ucode":"33F748AE188B07","user_header":"https://static001.geekbang.org/account/avatar/00/1e/63/5e/799cd6dc.jpg","comment_is_top":false,"comment_ctime":1590544670,"is_pvip":false,"replies":[{"id":"81710","content":"MSS必须小于MTU，MSS应用在多个网络构成的TCP链路中，而MTU应用在一个网络中","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590547344,"ip_address":"","comment_id":221586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590544670","product_id":100051201,"comment_content":"你好，MTU和MSS 有什么关联么","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496504,"discussion_content":"MSS必须小于MTU，MSS应用在多个网络构成的TCP链路中，而MTU应用在一个网络中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590547344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221532,"user_name":"simplesslife","can_delete":false,"product_type":"c1","uid":1159365,"ip_address":"","ucode":"1706690A8BDC96","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/c5/3cf6e86b.jpg","comment_is_top":false,"comment_ctime":1590536181,"is_pvip":false,"replies":[{"id":"81712","content":"宕机并不是指机器断电、断网等故障，如果应用进程出现了问题，不上报心跳，虽然操作系统仍然正常，但业务也需要做容灾迁移","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590547655,"ip_address":"","comment_id":221532,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1590536181","product_id":100051201,"comment_content":"如果宕机的主机一直没有发心跳包，那就是发现不了宕机了吗？","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496482,"discussion_content":"宕机并不是指机器断电、断网等故障，如果应用进程出现了问题，不上报心跳，虽然操作系统仍然正常，但业务也需要做容灾迁移","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590547655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1081233,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","nickname":"唐朝首都","note":"","ucode":"F72655AE0AE4CA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274070,"discussion_content":"如果主机从来没有发过心跳包给心跳服务，也就是该服务没有被发现过，是没有办法对外提供服务，这种情况不会有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590540328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}