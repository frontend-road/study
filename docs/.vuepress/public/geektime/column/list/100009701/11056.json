{"id":11056,"title":"05 | 手把手教你依赖管理","content":"<p>软件工程是多人合作的结果，我们在开发软件的时候经常会使用一些别人编写好的，比较成熟的库。</p><p>比如，早期的前端开发用到了 jQuery 库，那么通常的做法是去官网下载一个最新版本的 jQuery，然后放在自己本地的项目中。对于简单的前端项目来说，这样可以简单粗暴地达到目的。</p><p>但当项目越来越庞大，除了 jQuery 之外，你还会依赖一些其他的第三方库。比如 Bootstrap 与 Chosen，这两个流行的前端库也都依赖 jQuery，如果这些第三方库依赖的jQuery 版本一致还好，但大多数情况并没有这么乐观：</p><blockquote>\n<p>你的项目依赖的 jQuery 版本是 1.0.0 ，Bootstrap 依赖的版本是 1.1.0，而 Chosen 依赖的版本是 1.2.0，看上去都是小版本不一致，一开始并没有发现任何问题，但是如果到后期发现不兼容，可能就为时已晚了。</p>\n</blockquote><p>所以，你需要在确定依赖之前，就把整个系统的依赖全部梳理一遍，保证每个依赖都不会有冲突问题。</p><p>你可能会质疑，这个前端工程师一定是初级的，事先都不会确认 Bootstrap 和 Chosen 依赖的版本吗，直接选择依赖 jQuery 1.0.0 版本的不就行了？</p><p>这么说有一定道理，但是手工维护这些依赖是相当麻烦且容易出错的。随便找一个比较流行的开源软件，你都会发现它依赖了大量的第三方库，而这些第三方库又依赖着其他的第三方库，形成了一条十分复杂的依赖链。靠人工去解决这个依赖链一定会让你怀疑人生，因此你需要一些工具去管理项目的依赖。</p><!-- [[[read_end]]] --><h2>你见过几种依赖管理工具？</h2><p>其实，各大平台早已有一套自己的手段来解决上述的问题，仔细看看你常用的软件，你会发现其实工作当中已经充斥着各种各样的依赖管理工具，没有它们你将寸步难行。</p><blockquote>\n<p>操作系统的依赖管理工具，比如CentOS 的 yum，Debian 的 apt，Arch 的 Packman，macOS 的 Homebrew；<br>\n编程语言的依赖管理工具，比如Java 的 Maven， .Net 的 nuget，Node.js 的 npm，Golang 的 go get，Python 的 pip，Ruby 的 Gem  。</p>\n</blockquote><p>这些平台的解决思路都是将依赖放到共同的仓库，然后管理工具通过依赖描述文件去中央仓库获取相应的包。</p><p>一个典型的依赖管理工具通常会有以下几个特性：</p><ol>\n<li>\n<p>统一的命名规则，也可以说是坐标，在仓库中是唯一的，可以被准确定位到；</p>\n</li>\n<li>\n<p>统一的中心仓库可以存储管理依赖和元数据；</p>\n</li>\n<li>\n<p>统一的依赖配置描述文件；</p>\n</li>\n<li>\n<p>本地使用的客户端可以解析上述的文件以及拉取所需的依赖。</p>\n</li>\n</ol><p>接下来我以 Maven 为例，跟你一起探究一下 Maven 会如何管理 Java 项目的依赖。</p><h2>Maven 如何管理依赖？</h2><p>Maven 是 Java生态系统里面一款非常强大的构建工具，其中一项非常重要的工作就是对项目依赖进行管理。</p><p>Maven 使用 XML格式的文件进行依赖配置描述的方式，叫作 POM（Project Object Model ），以下就是一段简单的 pom.xml 文件片段：</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/b5/b37b7cb7e75517bf64695bcfa63529b5.png?wh=1740*807\" alt=\"\"></p><p>在POM中，根元素 project 下的 dependencies 可以包含一个或多个 dependency 元素，以声明一个或者多个项目依赖。每个依赖可以包含的元素有：</p><ol>\n<li>\n<p>groupId、artifactId、version： 依赖的基本坐标；</p>\n</li>\n<li>\n<p>type： 依赖的类型，默认为jar；</p>\n</li>\n<li>\n<p>scope： 依赖的范围；</p>\n</li>\n<li>\n<p>optional： 标记依赖是否可选；</p>\n</li>\n<li>\n<p>exclusions： 用来排除传递性依赖；</p>\n</li>\n</ol><p>要想用好Maven管理依赖，你必须理解每一项的含义，而新手通常傻傻分不清楚。举个例子，依赖范围这一项，Maven 在不同的时期会使用不同的 classpath ：</p><ul>\n<li>比如，junit 只有在测试的时候有用，那么将其设为 test scope 就可以；</li>\n<li>再比如 ，servlet API这个 jar 包只需要在编译的时候提供接口，但是实际在运行时会有对应的 servlet 容器提供，所以没必要打到 war 包中去，这时候只需要指定在 provided scope 就可以了。通过指定 provided scope的方式可以让每个依赖各司其职，不用弄成“一锅粥”。</li>\n</ul><p>包管理工具还解决了依赖传递的问题，比如你的项目 A 依赖了 B，而 B 依赖了 C和D，那么在获取依赖的时候会把 B、C、D 都一起拉下来，这样可以节省大量的时间。</p><p>再让我们回到最开始的问题：依赖不一致该如何处理？通常，每个包管理工具都有一套自己的原则，Maven 的依赖仲裁原则如下。</p><p><strong>第一原则： 最短路径优先原则。</strong> 比如，A 依赖了 B和C，而 B 也依赖了 C，那么 Maven 会使用 A 依赖的 C 的版本，因为它的路径是最短的。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/38/a64e8f8816eb5f91538c70b117e8e938.png?wh=1740*733\" alt=\"\"></p><p><strong>第二原则： 第一声明优先原则。</strong> 比如，A 依赖了 B和C，B 和 C 分别依赖了 D，那么 Maven 会使用 B 依赖的 D 的版本，因为它是最先声明的。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/58/75c0189d4c6d3f28074b315928a36d58.png?wh=1740*733\" alt=\"\"></p><p><strong>根据这两个原则，Maven 就可以确定一个项目所有依赖的列表，但它处理依赖的方式还是有些简单粗暴。有时 Maven 的决定结果并不是你想要的，所以我们在使用 Maven 的时候还是要多加小心。</strong></p><h2>Maven 最佳实践</h2><p>接下来，我跟你分享下，我平时使用Maven 时总结的一些经验。</p><ol>\n<li>\n<p>生产环境尽量不使用 SNAPSHOT 或者是带有范围的依赖版本，可以减少上线后的不确定性，我们必须保证，测试环境的包和生产环境是一致的。</p>\n</li>\n<li>\n<p>将 POM分成多个层次的继承关系，比如携程的POM继承树一般是这样：</p>\n</li>\n</ol><pre><code>corp pom\n\tctrip pom/qunar pom\n\t\tbu pom\n\t\t\tproduct pom\n\t\t\t\tproject parent pom\n\t\t\t\t\tproject sub module pom\n</code></pre><p>这样做的好处是每一层都可以定义这一级别的依赖。<br>\n其中 ctrip pom/qunar pom 我们叫它为公司的 super-pom，每个项目必须直接或间接的继承其所在公司的 super-pom。这样做的好处是每一层都可以定义这一级别的依赖，便于各个层次的统一管理。</p><ol>\n<li>\n<p>在父模块多使用 dependencyManagement 来定义依赖，子模块在使用该依赖时，就可以不用指定依赖的版本，这样做可以使多个子模块的依赖版本高度统一，同时还能简化子模块配置。</p>\n</li>\n<li>\n<p>对于一组依赖的控制，可以使用BOM（Bill of Materials） 进行版本定义。一般情况下，框架部门有一个统一的BOM 来管理公共组件的版本，当用户引用了该BOM后，在使用框架提供的组件时无需指定版本。即使使用了多个组件，也不会有版本冲突的问题，因为框架部门的专家们已经在BOM中为各个组件配置了经过测试的稳定版本。<br>\nBOM是一个非常有用的工具，因为面对大量依赖时，作为用户你不知道具体应该使用它们的哪些版本、这些版本之间是否有相互依赖、相互依赖是否有冲突，使用BOM 就可以让用户规避这些细节问题了。</p>\n</li>\n<li>\n<p>对于版本相同的依赖使用 properties 定义，可以大大减少重复劳动，且易于改动。上面的 pom.xml 片段，就是使用了 properties 来定义两个一样的版本号的依赖。</p>\n</li>\n<li>\n<p>不要在在线编译环境中使用 mvn install 命令，否则会埋下很多意想不到并且非常难以排查的坑：该命令会将同项目中编译产生的jar包缓存在编译系统本地，覆盖mvn仓库中真正应该被引用的jar包。</p>\n</li>\n<li>\n<p>禁止变更了代码不改版本号就上传到中央仓库的行为。否则，会覆盖原有版本，使得一个版本出现二义性的问题。</p>\n</li>\n</ol><p>归根结底，这些经验都是为了两件事：减少重复的配置代码，以及减少不确定的因素发生。</p><p>有时候，你会听到来自业务开发部门同事传来报障的声音：“为什么我本地可以编译通过，而你们编译系统编译通不过？”难道 Maven 在工作的时候还看脸？ 当然不是!</p><p>遇到这样的情况不要急，处理起来通常有如下“三板斧”：</p><ol>\n<li>\n<p>确认开发操作系统，Java 版本，Maven 版本。通常情况下操作系统对 Java 编译的影响是最小的，但是偶尔也会遇到一些比如分隔符（冒号与分号）之类的问题。Java 和 Maven 的版本应尽量与生产编译系统保持一致，以减少不必要的麻烦。</p>\n</li>\n<li>\n<p>如果确认了开发操作系统没问题，那么你可以把用户的项目拉到自己的本地，并且删除本地依赖的缓存，也就是删除 .m2 目录下的子目录，减少干扰，执行编译。若编译通不过，说明用户本地就有问题，让他也删掉自己本地的缓存找问题。如果可以编译通过，说明问题出在编译系统，进入第3步。</p>\n</li>\n<li>\n<p>使用 mvn dependency 命令对比生产编译系统与本地依赖树的区别，检查编译系统本地是否被缓存了错误的 jar 包，从而导致了编译失败。有时候这种错误会隐藏得比较深，非常难查，需要很大的耐心。</p>\n</li>\n</ol><h2>总结</h2><p>今天，我跟你聊了聊依赖的问题。你可以从中：</p><ol>\n<li>\n<p>了解到依赖管理的复杂度是如何产生的；</p>\n</li>\n<li>\n<p>学习到依赖管理的一些常规思路；</p>\n</li>\n<li>\n<p>初步掌握通过Maven进行依赖管理的方式方法，及一些最佳实践。</p>\n</li>\n</ol><p>同时我也与你一起分享了一些我的实际经验，希望能够对你在实际工作中有所帮助。</p><h2>后续</h2><p>理想是美好的，然而现实却很骨感，在实际过程中我们也遇到了一些问题，比如用户不遵守我们推荐的命名规则，或者不继承公司提供的 Super POM，或者框架组件升级而用户不愿意升级等等。</p><p>为了能够统一管理，我们在构建系统上增加了一些强制手段来做统一的约束，使用 Maven Enforcer 插件以及其他方式对构建过程实行大量检查，欲知详情，请听下回分解。</p><h2>思考题</h2><p>你可以对比一下 Maven 其他语言的依赖管理工具，如 npm、pip、gem 等等，看看它们各自都有什么样的优缺点。</p><p>欢迎你给我留言。</p><p></p>","comments":[{"had_liked":false,"id":15948,"user_name":"阳阳","can_delete":false,"product_type":"c1","uid":1110992,"ip_address":"","ucode":"AC5FA9A55F1757","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/d0/691616c7.jpg","comment_is_top":true,"comment_ctime":1531673520,"is_pvip":false,"replies":[{"id":"5515","content":"要考虑不同层次的读者：）","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531712767,"ip_address":"","comment_id":15948,"utype":1}],"discussion_count":3,"race_medal":0,"score":"9.2233720856311009e+18","product_id":100009701,"comment_content":"其实我们关注的是持续集成在携程的解决方案和技术栈，组合思路等。我想愿意关注持续集成的技术，都对Maven不陌生。","like_count":12,"discussions":[{"author":{"id":1156643,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a6/23/91e74c43.jpg","nickname":"leo","note":"","ucode":"73E8917E5156FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243338,"discussion_content":"我就是不同层次的读者，点赞","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587534482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420613,"discussion_content":"要考虑不同层次的读者：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1531712767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1748664,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/fNVk5gZGGvQeic4wU2T4s5lkO85elfUKHLr2HBBVc63TbJ9xyOUAQeWia0VjBqOfonRrLAXNMIjMiaLFZpV8PiahJQ/132","nickname":"Geek_1a7057","note":"","ucode":"6A244037A612C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280639,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591583638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28215,"user_name":"小裙子","can_delete":false,"product_type":"c1","uid":1226775,"ip_address":"","ucode":"AA3A8C04978104","user_header":"https://static001.geekbang.org/account/avatar/00/12/b8/17/d3d5a2db.jpg","comment_is_top":false,"comment_ctime":1538023629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23012860109","product_id":100009701,"comment_content":"不够详细，结合mvn实例比较好","like_count":5},{"had_liked":false,"id":94034,"user_name":"熊猫","can_delete":false,"product_type":"c1","uid":1080238,"ip_address":"","ucode":"23C85117A16BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","comment_is_top":false,"comment_ctime":1557708749,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18737577933","product_id":100009701,"comment_content":"不要在在线编译环境中使用 mvn install 命令，否则会埋下很多意想不到并且非常难以排查的坑：该命令会将同项目中编译产生的 jar 包缓存在编译系统本地，覆盖 mvn 仓库中真正应该被引用的 jar 包。–––老师这句话不理解，在jenkins中我们常用mvn clean install -U进行构建，installl作为构建生命周期的一部分，不用该命令怎么生成对应的jar或war？","like_count":4,"discussions":[{"author":{"id":1193852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/7c/ffa62584.jpg","nickname":"猩猩","note":"","ucode":"102ADA39C145CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4219,"discussion_content":"打包只需要用package","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565234865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169487,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/4f/4ec15857.jpg","nickname":"猪尾巴","note":"","ucode":"4BDA1DB1A8A1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51400,"discussion_content":"以前也是直接install","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573865574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16006,"user_name":"天涯","can_delete":false,"product_type":"c1","uid":1028190,"ip_address":"","ucode":"749D9AA60C0BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/5e/a28f214c.jpg","comment_is_top":false,"comment_ctime":1531736114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18711605298","product_id":100009701,"comment_content":"既然讲到maven，希望能分享些实际应用经验和方案，在公司大规模场景中的pom架构,流程，和版本如何有效管理","like_count":4},{"had_liked":false,"id":15935,"user_name":"小胖胖","can_delete":false,"product_type":"c1","uid":1086543,"ip_address":"","ucode":"FD4BFF4776859A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/4f/2396cce5.jpg","comment_is_top":false,"comment_ctime":1531663336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18711532520","product_id":100009701,"comment_content":"为什么变成了了讲maven😓","like_count":4},{"had_liked":false,"id":16089,"user_name":"大M","can_delete":false,"product_type":"c1","uid":1029057,"ip_address":"","ucode":"4A0EC46D4178E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/c1/beca97d7.jpg","comment_is_top":false,"comment_ctime":1531785186,"is_pvip":false,"replies":[{"id":"5625","content":"棒，前端的包管理一直都被诟病的，不过好在大家都是聪明的程序员：）","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531878083,"ip_address":"","comment_id":16089,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121719778","product_id":100009701,"comment_content":"我是个前端，对后台这套会有一些模糊的概念，不过还是能听得懂，在前端的包管理中，我现在用的是yarn，前期也出现过不同环境的一些表现不同，最后确定是版本问题，当时的npm 并没有版本锁定功能，我后面转到了用yarn，使用yarn 会在本地根目录自动新建yarn.lock 文件来锁定依赖版本，我们在自动构建集成服务器上不能使用开发机器的node_modules ，因为操作系统有别，需要单独安装依赖，通常我会把package.json 和yarn.lock 传到构建服务器，通过yarn 来安装这个nodemodles 。","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420660,"discussion_content":"棒，前端的包管理一直都被诟病的，不过好在大家都是聪明的程序员：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531878083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15988,"user_name":"骑着🚀看银河","can_delete":false,"product_type":"c1","uid":1074734,"ip_address":"","ucode":"8706A99A89F0CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/2e/527b73c9.jpg","comment_is_top":false,"comment_ctime":1531709956,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10121644548","product_id":100009701,"comment_content":"为什么变成了了讲maven","like_count":2},{"had_liked":false,"id":111091,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1562470084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857437380","product_id":100009701,"comment_content":"对于spring boot这样的多模块架构，如何对项目进行拆分，更好的接入到devops平台？比如在父pom中定义了properties，拆分时如何处理？","like_count":1},{"had_liked":false,"id":108416,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1561766920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856734216","product_id":100009701,"comment_content":"老师，您好！我们公司的项目下面有20多个子项目，其中4个可以独立部署，其他都是二方库！每次编译时间长，且经常出错！如果我们要对项目拆分，是否需要把 父pom中定义的版本号和properties等全部写到每个子pom中","like_count":1},{"had_liked":false,"id":304464,"user_name":"Geek_977d69","can_delete":false,"product_type":"c1","uid":2633532,"ip_address":"","ucode":"A3F7E5DB4E4848","user_header":"","comment_is_top":false,"comment_ctime":1627438109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627438109","product_id":100009701,"comment_content":"“我本地编译通过，流水线编译失败“----这个是好多用户的提问方式，总结绝了，我要把它搬到我们的排查指导里面去。<br>还有一个困扰我很久的问题，maven install如何在流水线中控制不让用户使用，就是直接在平台侧给禁了，不然出现问题，还是需要手动上构建机器上删掉那个包，对于平台来说维护起来比较麻烦","like_count":0},{"had_liked":false,"id":201521,"user_name":"酒粒","can_delete":false,"product_type":"c1","uid":1560645,"ip_address":"","ucode":"6E043876B0F7E9","user_header":"https://static001.geekbang.org/account/avatar/00/17/d0/45/92709dca.jpg","comment_is_top":false,"comment_ctime":1585798687,"is_pvip":false,"replies":[{"id":"82865","content":"这个不太好说，多数还是配置问题","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1591663082,"ip_address":"","comment_id":201521,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585798687","product_id":100009701,"comment_content":"老师，请教下，gradle 打包war包没有把依赖的jar包所依赖的包一并打包到war里面，总是缺少了些jar，能指点下大概是哪里出问题了吗","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490359,"discussion_content":"这个不太好说，多数还是配置问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591663082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194242,"user_name":"刘曼","can_delete":false,"product_type":"c1","uid":1920787,"ip_address":"","ucode":"BBB96F6A017689","user_header":"","comment_is_top":false,"comment_ctime":1585040306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585040306","product_id":100009701,"comment_content":"什么是 在线编译环境？","like_count":0},{"had_liked":false,"id":157368,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1575123404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575123404","product_id":100009701,"comment_content":"统一的 BOM 来管理公共组件的版本，这个BOM指的是什么呀？","like_count":0},{"had_liked":false,"id":68045,"user_name":"我心飞翔","can_delete":false,"product_type":"c1","uid":1296052,"ip_address":"","ucode":"39677EFCB1B9DC","user_header":"https://static001.geekbang.org/account/avatar/00/13/c6/b4/bfd4740d.jpg","comment_is_top":false,"comment_ctime":1550395574,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550395574","product_id":100009701,"comment_content":"我对maven确实陌生，没接触过java，我本身是做c开发出身的，一直做Linux下的开发。对yum了解一些","like_count":0},{"had_liked":false,"id":66029,"user_name":"YoungerChina","can_delete":false,"product_type":"c1","uid":1215646,"ip_address":"","ucode":"917381759E13AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/9e/367a4197.jpg","comment_is_top":false,"comment_ctime":1549854176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549854176","product_id":100009701,"comment_content":"并不能解决遇到的依赖管理难题！<br>1.开源工具能解决依赖问题，但不能依赖管理问题！<br>2.yum能帮助我们解决依赖问题，必须是包编译过程中的依赖规则是严谨和科学的，对于依赖规则不要紧的包哪？<br>3.依赖基本要求大于某个版本，所以还是没有说如何固定版本？<br>","like_count":0},{"had_liked":false,"id":60816,"user_name":"Bruce晓勇","can_delete":false,"product_type":"c1","uid":1098285,"ip_address":"","ucode":"BF989885130F97","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2d/76427140.jpg","comment_is_top":false,"comment_ctime":1547556443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547556443","product_id":100009701,"comment_content":"大公司需要自建组件仓库么","like_count":0},{"had_liked":false,"id":57225,"user_name":"kursk.ye","can_delete":false,"product_type":"c1","uid":1015995,"ip_address":"","ucode":"9D6A3854E408F9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/bb/c0ed9d76.jpg","comment_is_top":false,"comment_ctime":1546691311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546691311","product_id":100009701,"comment_content":"举个例子，依赖范围这一项，Maven 在不同的时期会使用不同的 classpath <br>时期 这个词改为 阶段 更合适","like_count":0},{"had_liked":false,"id":23794,"user_name":"蒜儿","can_delete":false,"product_type":"c1","uid":1185737,"ip_address":"","ucode":"BE3C2873833600","user_header":"https://static001.geekbang.org/account/avatar/00/12/17/c9/b16d3b39.jpg","comment_is_top":false,"comment_ctime":1536660185,"is_pvip":false,"replies":[{"id":"8713","content":"携程自己做了一个jar包的发布工具，每次发布时可修改version，也会对version做一些检查，比如唯一检查等，发布前根据version会产生一个修改pom的push。用这个工具可以随意发布项目中的任何jar，但本质上version还是手工控制的。开发明确版本号还是很有必要的，只是把操作变简单一点","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1536673032,"ip_address":"","comment_id":23794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536660185","product_id":100009701,"comment_content":"老师好，有个问题一直比较困惑，一般在开发分支上pom文件里面模块的版本号是snapshot的，合并到master分支准备发布或者测试的时候需要把模块的版本号和相关依赖的版本号的snapshot去掉改为正式版本，目前我们都是手工去改，这个怎么能自动化修改，还是有其他方式进行控制，谢谢","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423730,"discussion_content":"携程自己做了一个jar包的发布工具，每次发布时可修改version，也会对version做一些检查，比如唯一检查等，发布前根据version会产生一个修改pom的push。用这个工具可以随意发布项目中的任何jar，但本质上version还是手工控制的。开发明确版本号还是很有必要的，只是把操作变简单一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536673032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18003,"user_name":"bean","can_delete":false,"product_type":"c1","uid":1110725,"ip_address":"","ucode":"CB4A37A14271EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/c5/109b372d.jpg","comment_is_top":false,"comment_ctime":1533084835,"is_pvip":false,"replies":[{"id":"6266","content":"父pom里都是dependency management，子pom不引用就不会下载这些父pom中的jar","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533104020,"ip_address":"","comment_id":18003,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1533084835","product_id":100009701,"comment_content":"超级父POM中一般包含哪些jar包？有些项目之间的共同点不多，或者它们的技术选型不同，不想下载父POM中用不到的包怎么办？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421354,"discussion_content":"父pom里都是dependency management，子pom不引用就不会下载这些父pom中的jar","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533104020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17771,"user_name":"林007","can_delete":false,"product_type":"c1","uid":1190283,"ip_address":"","ucode":"32EAEE78E2B09B","user_header":"","comment_is_top":false,"comment_ctime":1532946320,"is_pvip":false,"replies":[{"id":"6198","content":"文章中最佳实践篇章有例子的：）","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533011210,"ip_address":"","comment_id":17771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532946320","product_id":100009701,"comment_content":"pom继承树给个例子","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421266,"discussion_content":"文章中最佳实践篇章有例子的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533011210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16266,"user_name":"LB","can_delete":false,"product_type":"c1","uid":1047988,"ip_address":"","ucode":"25DD8D5597CB1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/b4/b5483cd5.jpg","comment_is_top":false,"comment_ctime":1531871409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531871409","product_id":100009701,"comment_content":"是否有些太细节？","like_count":0},{"had_liked":false,"id":15903,"user_name":"付盼星","can_delete":false,"product_type":"c1","uid":1055542,"ip_address":"","ucode":"E0E4B74E8B361F","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/36/abe6d066.jpg","comment_is_top":false,"comment_ctime":1531630657,"is_pvip":false,"replies":[{"id":"5498","content":"配置中心地址是一个比较特殊的配置，也可以说是所有其他配置获取的基础，我们采用的是基于环境和约定获取这个配置值，具有的方法在环境一讲中会讲到","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531706579,"ip_address":"","comment_id":15903,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531630657","product_id":100009701,"comment_content":"老师好，看到依赖管理的继承，我想到了配置管理的继承，我们公司目前用的是spring cloud的配置服务，研发一般在项目的bootstrap.yml里面指定配置中心的地址和要激活的配置，但是发现大家的配置文件里面的内容有很多重复配置条目，这种情况能否也做到继承父配置文件？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420596,"discussion_content":"配置中心地址是一个比较特殊的配置，也可以说是所有其他配置获取的基础，我们采用的是基于环境和约定获取这个配置值，具有的方法在环境一讲中会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531706579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15799,"user_name":"铭熙","can_delete":false,"product_type":"c1","uid":1002829,"ip_address":"","ucode":"047C3DB06F5C27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/4d/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1531523300,"is_pvip":false,"replies":[{"id":"5464","content":"基本统一，适度自由，通过编译平台管理，下一章就讲编译了，会有讲到","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531554741,"ip_address":"","comment_id":15799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531523300","product_id":100009701,"comment_content":"编译用到的命令是统一的么？如何管理的。","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420556,"discussion_content":"基本统一，适度自由，通过编译平台管理，下一章就讲编译了，会有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531554741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}