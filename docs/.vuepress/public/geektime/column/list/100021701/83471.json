{"id":83471,"title":"33丨PageRank（下）：分析希拉里邮件中的人物关系","content":"<p>上节课我们讲到PageRank算法经常被用到网络关系的分析中，比如在社交网络中计算个人的影响力，计算论文的影响力或者网站的影响力等。</p><p>今天我们就来做一个关于PageRank算法的实战，在这之前，你需要思考三个问题：</p><ol>\n<li>\n<p>如何使用工具完成PageRank算法，包括使用工具创建网络图，设置节点、边、权重等，并通过创建好的网络图计算节点的PR值；</p>\n</li>\n<li>\n<p>对于一个实际的项目，比如希拉里的9306封邮件（工具包中邮件的数量），如何使用PageRank算法挖掘出有影响力的节点，并且绘制网络图；</p>\n</li>\n<li>\n<p>如何对创建好的网络图进行可视化，如果网络中的节点数较多，如何筛选重要的节点进行可视化，从而得到精简的网络关系图。</p>\n</li>\n</ol><h2>如何使用工具实现PageRank算法</h2><p>PageRank算法工具在sklearn中并不存在，我们需要找到新的工具包。实际上有一个关于图论和网络建模的工具叫NetworkX，它是用Python语言开发的工具，内置了常用的图与网络分析算法，可以方便我们进行网络数据分析。</p><p>上节课，我举了一个网页权重的例子，假设一共有4个网页A、B、C、D，它们之间的链接信息如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/47/ea/47e5f21d16b15a98d4a32a73ebd477ea.png?wh=1711*1171\" alt=\"\"><br>\n针对这个例子，我们看下用NetworkX如何计算A、B、C、D四个网页的PR值，具体代码如下：</p><!-- [[[read_end]]] --><pre><code>import networkx as nx\n# 创建有向图\nG = nx.DiGraph() \n# 有向图之间边的关系\nedges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]\nfor edge in edges:\n    G.add_edge(edge[0], edge[1])\npagerank_list = nx.pagerank(G, alpha=1)\nprint(&quot;pagerank值是：&quot;, pagerank_list)\n</code></pre><p>NetworkX工具把中间的计算细节都已经封装起来了，我们直接调用PageRank函数就可以得到结果：</p><pre><code>pagerank值是： {'A': 0.33333396911621094, 'B': 0.22222201029459634, 'C': 0.22222201029459634, 'D': 0.22222201029459634}\n</code></pre><p>我们通过NetworkX创建了一个有向图之后，设置了节点之间的边，然后使用PageRank函数就可以求得节点的PR值，结果和上节课中我们人工模拟的结果一致。</p><p>好了，运行完这个例子之后，我们来看下NetworkX工具都有哪些常用的操作。</p><p><strong>1.关于图的创建</strong></p><p>图可以分为无向图和有向图，在NetworkX中分别采用不同的函数进行创建。无向图指的是不用节点之间的边的方向，使用nx.Graph() 进行创建；有向图指的是节点之间的边是有方向的，使用nx.DiGraph()来创建。在上面这个例子中，存在A→D的边，但不存在D→A的边。</p><p><strong>2.关于节点的增加、删除和查询</strong></p><p>如果想在网络中增加节点，可以使用G.add_node(‘A’)添加一个节点，也可以使用G.add_nodes_from([‘B’,‘C’,‘D’,‘E’])添加节点集合。如果想要删除节点，可以使用G.remove_node(node)删除一个指定的节点，也可以使用G.remove_nodes_from([‘B’,‘C’,‘D’,‘E’])删除集合中的节点。</p><p>那么该如何查询节点呢？</p><p>如果你想要得到图中所有的节点，就可以使用G.nodes()，也可以用G.number_of_nodes()得到图中节点的个数。</p><p><strong>3.关于边的增加、删除、查询</strong></p><p>增加边与添加节点的方式相同，使用G.add_edge(“A”, “B”)添加指定的“从A到B”的边，也可以使用add_edges_from函数从边集合中添加。我们也可以做一个加权图，也就是说边是带有权重的，使用add_weighted_edges_from函数从带有权重的边的集合中添加。在这个函数的参数中接收的是1个或多个三元组[u,v,w]作为参数，u、v、w分别代表起点、终点和权重。</p><p>另外，我们可以使用remove_edge函数和remove_edges_from函数删除指定边和从边集合中删除。</p><p>另外可以使用edges()函数访问图中所有的边，使用number_of_edges()函数得到图中边的个数。</p><p>以上是关于图的基本操作，如果我们创建了一个图，并且对节点和边进行了设置，就可以找到其中有影响力的节点，原理就是通过PageRank算法，使用nx.pagerank(G)这个函数，函数中的参数G代表创建好的图。</p><h2>如何用PageRank揭秘希拉里邮件中的人物关系</h2><p>了解了NetworkX工具的基础使用之后，我们来看一个实际的案例：希拉里邮件人物关系分析。</p><p>希拉里邮件事件相信你也有耳闻，对这个数据的背景我们就不做介绍了。你可以从GitHub上下载这个数据集：<a href=\"https://github.com/cystanford/PageRank\">https://github.com/cystanford/PageRank</a>。</p><p>整个数据集由三个文件组成：Aliases.csv，Emails.csv和Persons.csv，其中Emails文件记录了所有公开邮件的内容，发送者和接收者的信息。Persons这个文件统计了邮件中所有人物的姓名及对应的ID。因为姓名存在别名的情况，为了将邮件中的人物进行统一，我们还需要用Aliases文件来查询别名和人物的对应关系。</p><p>整个数据集包括了9306封邮件和513个人名，数据集还是比较大的。不过这一次我们不需要对邮件的内容进行分析，只需要通过邮件中的发送者和接收者（对应Emails.csv文件中的MetadataFrom和MetadataTo字段）来绘制整个关系网络。因为涉及到的人物很多，因此我们需要通过PageRank算法计算每个人物在邮件关系网络中的权重，最后筛选出来最有价值的人物来进行关系网络图的绘制。</p><p>了解了数据集和项目背景之后，我们来设计到执行的流程步骤：</p><p><img src=\"https://static001.geekbang.org/resource/image/72/c9/72132ffbc1209301f0876178c75927c9.jpg?wh=2411*1106\" alt=\"\"></p><ol>\n<li>\n<p>首先我们需要加载数据源；</p>\n</li>\n<li>\n<p>在准备阶段：我们需要对数据进行探索，在数据清洗过程中，因为邮件中存在别名的情况，因此我们需要统一人物名称。另外邮件的正文并不在我们考虑的范围内，只统计邮件中的发送者和接收者，因此我们筛选MetadataFrom和MetadataTo这两个字段作为特征。同时，发送者和接收者可能存在多次邮件往来，需要设置权重来统计两人邮件往来的次数。次数越多代表这个边（从发送者到接收者的边）的权重越高；</p>\n</li>\n<li>\n<p>在挖掘阶段：我们主要是对已经设置好的网络图进行PR值的计算，但邮件中的人物有500多人，有些人的权重可能不高，我们需要筛选PR值高的人物，绘制出他们之间的往来关系。在可视化的过程中，我们可以通过节点的PR值来绘制节点的大小，PR值越大，节点的绘制尺寸越大。</p>\n</li>\n</ol><p>设置好流程之后，实现的代码如下：</p><pre><code># -*- coding: utf-8 -*-\n# 用 PageRank 挖掘希拉里邮件中的重要任务关系\nimport pandas as pd\nimport networkx as nx\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n# 数据加载\nemails = pd.read_csv(&quot;./input/Emails.csv&quot;)\n# 读取别名文件\nfile = pd.read_csv(&quot;./input/Aliases.csv&quot;)\naliases = {}\nfor index, row in file.iterrows():\n    aliases[row['Alias']] = row['PersonId']\n# 读取人名文件\nfile = pd.read_csv(&quot;./input/Persons.csv&quot;)\npersons = {}\nfor index, row in file.iterrows():\n    persons[row['Id']] = row['Name']\n# 针对别名进行转换        \ndef unify_name(name):\n    # 姓名统一小写\n    name = str(name).lower()\n    # 去掉, 和 @后面的内容\n    name = name.replace(&quot;,&quot;,&quot;&quot;).split(&quot;@&quot;)[0]\n    # 别名转换\n    if name in aliases.keys():\n        return persons[aliases[name]]\n    return name\n# 画网络图\ndef show_graph(graph, layout='spring_layout'):\n    # 使用 Spring Layout 布局，类似中心放射状\n    if layout == 'circular_layout':\n        positions=nx.circular_layout(graph)\n    else:\n        positions=nx.spring_layout(graph)\n    # 设置网络图中的节点大小，大小与 pagerank 值相关，因为 pagerank 值很小所以需要 *20000\n    nodesize = [x['pagerank']*20000 for v,x in graph.nodes(data=True)]\n    # 设置网络图中的边长度\n    edgesize = [np.sqrt(e[2]['weight']) for e in graph.edges(data=True)]\n    # 绘制节点\n    nx.draw_networkx_nodes(graph, positions, node_size=nodesize, alpha=0.4)\n    # 绘制边\n    nx.draw_networkx_edges(graph, positions, edge_size=edgesize, alpha=0.2)\n    # 绘制节点的 label\n    nx.draw_networkx_labels(graph, positions, font_size=10)\n    # 输出希拉里邮件中的所有人物关系图\n    plt.show()\n# 将寄件人和收件人的姓名进行规范化\nemails.MetadataFrom = emails.MetadataFrom.apply(unify_name)\nemails.MetadataTo = emails.MetadataTo.apply(unify_name)\n# 设置遍的权重等于发邮件的次数\nedges_weights_temp = defaultdict(list)\nfor row in zip(emails.MetadataFrom, emails.MetadataTo, emails.RawText):\n    temp = (row[0], row[1])\n    if temp not in edges_weights_temp:\n        edges_weights_temp[temp] = 1\n    else:\n        edges_weights_temp[temp] = edges_weights_temp[temp] + 1\n# 转化格式 (from, to), weight =&gt; from, to, weight\nedges_weights = [(key[0], key[1], val) for key, val in edges_weights_temp.items()]\n# 创建一个有向图\ngraph = nx.DiGraph()\n# 设置有向图中的路径及权重 (from, to, weight)\ngraph.add_weighted_edges_from(edges_weights)\n# 计算每个节点（人）的 PR 值，并作为节点的 pagerank 属性\npagerank = nx.pagerank(graph)\n# 将 pagerank 数值作为节点的属性\nnx.set_node_attributes(graph, name = 'pagerank', values=pagerank)\n# 画网络图\nshow_graph(graph)\n\n# 将完整的图谱进行精简\n# 设置 PR 值的阈值，筛选大于阈值的重要核心节点\npagerank_threshold = 0.005\n# 复制一份计算好的网络图\nsmall_graph = graph.copy()\n# 剪掉 PR 值小于 pagerank_threshold 的节点\nfor n, p_rank in graph.nodes(data=True):\n    if p_rank['pagerank'] &lt; pagerank_threshold: \n        small_graph.remove_node(n)\n# 画网络图,采用circular_layout布局让筛选出来的点组成一个圆\nshow_graph(small_graph, 'circular_layout')\n</code></pre><p>运行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/b1/419f7621392045f07bcd03f9e4c7c8b1.png?wh=1728*1028\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/3f/e1/3f08f61360e8a82a23a16e44d2b973e1.png?wh=519*376\" alt=\"\"><br>\n针对代码中的几个模块我做个简单的说明：</p><p><strong>1.函数定义</strong></p><p>人物的名称需要统一，因此我设置了unify_name函数，同时设置了show_graph函数将网络图可视化。NetworkX提供了多种可视化布局，这里我使用spring_layout布局，也就是呈中心放射状。</p><p>除了spring_layout外，NetworkX还有另外三种可视化布局，circular_layout（在一个圆环上均匀分布节点），random_layout（随机分布节点 ），shell_layout（节点都在同心圆上）。</p><p><strong>2.计算边权重</strong></p><p>邮件的发送者和接收者的邮件往来可能不止一次，我们需要用两者之间邮件往来的次数计算这两者之间边的权重，所以我用edges_weights_temp数组存储权重。而上面介绍过在NetworkX中添加权重边（即使用add_weighted_edges_from函数）的时候，接受的是u、v、w的三元数组，因此我们还需要对格式进行转换，具体转换方式见代码。</p><p><strong>3.PR值计算及筛选</strong></p><p>我使用nx.pagerank(graph)计算了节点的PR值。由于节点数量很多，我们设置了PR值阈值，即pagerank_threshold=0.005，然后遍历节点，删除小于PR值阈值的节点，形成新的图small_graph，最后对small_graph进行可视化（对应运行结果的第二张图）。</p><h2>总结</h2><p>在上节课中，我们通过矩阵乘法求得网页的权重，这节课我们使用NetworkX可以得到相同的结果。</p><p>另外我带你用PageRank算法做了一次实战，我们将一个复杂的网络图，通过PR值的计算、筛选，最终得到了一张精简的网络图。在这个过程中我们学习了NetworkX工具的使用，包括创建图、节点、边及PR值的计算。</p><p>实际上掌握了PageRank的理论之后，在实战中往往就是一行代码的事。但项目与理论不同，项目中涉及到的数据量比较大，你会花80%的时间（或80%的代码量）在预处理过程中，比如今天的项目中，我们对别名进行了统一，对边的权重进行计算，同时还需要把计算好的结果以可视化的方式呈现。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/42/307055050e005ba5092028a074a5c142.png?wh=1636*794\" alt=\"\"><br>\n今天我举了一个网页权重的例子，假设一共有4个网页A、B、C、D。它们之间的链接信息如文章中的图示。我们假设用户有15%的概率随机跳转，请你编写代码重新计算这4个节点的PR值。</p><p>欢迎你在评论区与我分享你的答案，也欢迎点击“请朋友读”，把这篇文章分享给你的朋友或者同事。</p><p></p>","neighbors":{"left":{"article_title":"32丨PageRank（上）：搞懂Google的PageRank算法","id":83034},"right":{"article_title":"34丨AdaBoost（上）：如何使用AdaBoost提升分类器性能？","id":83915}},"comments":[{"had_liked":false,"id":71043,"user_name":"third","can_delete":false,"product_type":"c1","uid":1025114,"ip_address":"","ucode":"9A37408A834F0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/5a/e708e423.jpg","comment_is_top":false,"comment_ctime":1551252632,"is_pvip":false,"replies":[{"id":"26844","content":"正确。","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1551952975,"ip_address":"","comment_id":71043,"utype":2}],"discussion_count":1,"race_medal":0,"score":"27321056408","product_id":100021701,"comment_content":"pagerank 值是： {&#39;C&#39;: 0.22514635472743896, &#39;A&#39;: 0.3245609358176832, &#39;D&#39;: 0.22514635472743894, &#39;B&#39;: 0.22514635472743896}<br><br>import networkx as nx<br># 创建有向图<br>G = nx.DiGraph()<br># 有向图之间边的关系<br>edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br>for edge in edges:<br>    G.add_edge(edge[0], edge[1])<br>pagerank_list = nx.pagerank(G, alpha=0.85)<br>print(&quot;pagerank 值是：&quot;, pagerank_list)<br>","like_count":6,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440956,"discussion_content":"正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551952975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109960,"user_name":"永降不息之雨","can_delete":false,"product_type":"c1","uid":1362563,"ip_address":"","ucode":"087A934F68E445","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/83/684361be.jpg","comment_is_top":false,"comment_ctime":1562141315,"is_pvip":false,"replies":[{"id":"40564","content":"我在程序里保存边（发送者-&gt;接受者）的权重的代码：<br>for row in zip(emails.MetadataFrom, emails.MetadataTo, emails.RawText):<br>    temp = (row[0], row[1])<br>    if temp not in edges_weights_temp:<br>        edges_weights_temp[temp] = 1<br>    else:<br>        edges_weights_temp[temp] = edges_weights_temp[temp] + 1<br><br>如果你print(edges_weights_temp)应该是类似这样的结果：<br>{(&#39;Jake Sullivan&#39;, &#39;Hillary Clinton&#39;): 815, (&#39;nan&#39;, &#39;Hillary Clinton&#39;): 20, (&#39;Cheryl Mills&#39;, &#39;;h&#39;): 1, ...<br>这里(&#39;Jake Sullivan&#39;, &#39;Hillary Clinton&#39;) 就是我们的temp，也就(row[0], row[1])，也就是保存的发送者-&gt;接收者的次数，次数为815次。<br>if temp not in edges_weights_temp 判断下在字典edges_weights_temp中是否已经存在了边temp，如果没有存在就创建一个，赋值为1，也就是代表他们通信了1次。如果存在了，就找出来当时的次数，然后+1","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1562555404,"ip_address":"","comment_id":109960,"utype":2}],"discussion_count":4,"race_medal":0,"score":"18742010499","product_id":100021701,"comment_content":"老师关于希拉里邮件的案例，这一段一直看不懂。<br>我print(temp)只有得到两个人名，<br>但是我print(edges_weights_temp)后<br>除了人名，后面还多了一个数字，<br>老师这数字是怎么来的，这段语法能帮忙解释一下吗？<br>    temp=(rew[0],row[1])<br>if temp not in edges_weights_temp:<br>        edges_weights_temp[temp] = 1<br>    else:<br>        edges_weights_temp[temp] = edges_weights_temp[temp] + 1<br>","like_count":5,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456656,"discussion_content":"我在程序里保存边（发送者-&amp;gt;接受者）的权重的代码：\nfor row in zip(emails.MetadataFrom, emails.MetadataTo, emails.RawText):\n    temp = (row[0], row[1])\n    if temp not in edges_weights_temp:\n        edges_weights_temp[temp] = 1\n    else:\n        edges_weights_temp[temp] = edges_weights_temp[temp] + 1\n\n如果你print(edges_weights_temp)应该是类似这样的结果：\n{(&amp;#39;Jake Sullivan&amp;#39;, &amp;#39;Hillary Clinton&amp;#39;): 815, (&amp;#39;nan&amp;#39;, &amp;#39;Hillary Clinton&amp;#39;): 20, (&amp;#39;Cheryl Mills&amp;#39;, &amp;#39;;h&amp;#39;): 1, ...\n这里(&amp;#39;Jake Sullivan&amp;#39;, &amp;#39;Hillary Clinton&amp;#39;) 就是我们的temp，也就(row[0], row[1])，也就是保存的发送者-&amp;gt;接收者的次数，次数为815次。\nif temp not in edges_weights_temp 判断下在字典edges_weights_temp中是否已经存在了边temp，如果没有存在就创建一个，赋值为1，也就是代表他们通信了1次。如果存在了，就找出来当时的次数，然后+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562555404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2126331,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOUjOGRlYNY1TDZpso7LQEhMyqmgUqEW3sm5xWTHqhU5rUol8NeEOxLMQA5ib09Y8Yg97ziaqsKduA/132","nickname":"fei","note":"","ucode":"36D802EB42FEF3","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553713,"discussion_content":"edges_weights_temp = defaultdict(int)\nfor row in zip(emails.MetadataFrom, emails.MetadataTo):\n    edges_weights_temp[row] += 1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646038412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2126331,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOUjOGRlYNY1TDZpso7LQEhMyqmgUqEW3sm5xWTHqhU5rUol8NeEOxLMQA5ib09Y8Yg97ziaqsKduA/132","nickname":"fei","note":"","ucode":"36D802EB42FEF3","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553712,"discussion_content":"这段代码是有问题的。emails.RawText完全是多余的，temp变量与是多余的。在这之前的语句：edges_weights_temp = defaultdict(list)，也是有问题的。这里对defaultdict的用法是错误的。直接写：edges_weights_temp = {}，就可以了。defaultdict用对了，循环里的判断就不必写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646038266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","nickname":"等待","note":"","ucode":"687A6BB673414E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217558,"discussion_content":"这段代码太厉害了，真的要多看看大佬写的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585570440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72627,"user_name":"szm","can_delete":false,"product_type":"c1","uid":1352697,"ip_address":"","ucode":"53E753D3D04431","user_header":"https://static001.geekbang.org/account/avatar/00/14/a3/f9/9180d6d1.jpg","comment_is_top":false,"comment_ctime":1551681960,"is_pvip":false,"replies":[{"id":"26843","content":"第一个问题：对的，pagerank是字典类型，直接使用nx.set_node_attributes(graph, name = &#39;pagerank&#39;, values=pagerank)是OK的<br>第二个问题，阈值大于0.005时，很多图重叠在一起，可以采用nx.circular_layout(graph)来进行显示。这样可以让筛选出来的点都分布到一个圆上，来显示出来他们之间的关系。","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1551952931,"ip_address":"","comment_id":72627,"utype":2}],"discussion_count":1,"race_medal":0,"score":"18731551144","product_id":100021701,"comment_content":"有2个问题：<br>第一个：pagerank已经是字典类型了，为什么还要用pagerank_list = {node: rank for node, rank in pagerank.items()}将其转换为字典呢？是不是删掉这个语句也没关系？<br>第二个：阈值大于0.005的图仍有很多重叠在一起，无法观看，请问怎样才能让画出来的图像美观呢？","like_count":4,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441666,"discussion_content":"第一个问题：对的，pagerank是字典类型，直接使用nx.set_node_attributes(graph, name = &amp;#39;pagerank&amp;#39;, values=pagerank)是OK的\n第二个问题，阈值大于0.005时，很多图重叠在一起，可以采用nx.circular_layout(graph)来进行显示。这样可以让筛选出来的点都分布到一个圆上，来显示出来他们之间的关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551952931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120725,"user_name":"WS","can_delete":false,"product_type":"c1","uid":1369162,"ip_address":"","ucode":"717D9670BA6A99","user_header":"https://static001.geekbang.org/account/avatar/00/14/e4/4a/63e46022.jpg","comment_is_top":false,"comment_ctime":1564983572,"is_pvip":false,"replies":[{"id":"63587","content":"你可以通过 graph.edges取出所有的边，然后对所有边进行遍历查找","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577520007,"ip_address":"","comment_id":120725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154918164","product_id":100021701,"comment_content":"老师，怎么筛选出某个人物的有向图？","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461450,"discussion_content":"你可以通过 graph.edges取出所有的边，然后对所有边进行遍历查找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577520007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72973,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1551768726,"is_pvip":false,"replies":[{"id":"64464","content":"Good Job","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577619596,"ip_address":"","comment_id":72973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10141703318","product_id":100021701,"comment_content":"import networkx as nx<br># 创建有向图<br>G = nx.DiGraph()<br># 有向图之间边的关系<br>edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br>for edge in edges:<br>    G.add_edge(edge[0], edge[1])<br>pagerank_list = nx.pagerank(G) #alpha为阻尼因子，默认值：0.85<br>print(&quot;pagerank值是：&quot;, pagerank_list)<br><br>pagerank值是： {&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441857,"discussion_content":"Good Job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577619596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71647,"user_name":"王彬成","can_delete":false,"product_type":"c1","uid":1015045,"ip_address":"","ucode":"386803B8FC2DD5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/05/4bad0c7c.jpg","comment_is_top":false,"comment_ctime":1551406781,"is_pvip":false,"replies":[{"id":"26845","content":"结果正确，对alpha阻尼因子的理解也正确","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1551953066,"ip_address":"","comment_id":71647,"utype":2}],"discussion_count":1,"race_medal":0,"score":"10141341373","product_id":100021701,"comment_content":"1、pagerank_list=nx.pagerank(G,alpha=1)理解<br>参考链接：https:&#47;&#47;networkx.github.io&#47;documentation&#47;networkx-1.10&#47;reference&#47;generated&#47;networkx.algorithms.link_analysis.pagerank_alg.pagerank.html<br>alpha指的是阻尼因子。根据公式了解到，这因子代表用户按照跳转链接来上网的概率。<br>题目说15%的概率随机跳转，所以阻尼因子为0.85<br><br>2、代码<br>import networkx as nx<br># 创建有向图<br>G=nx.DiGraph()<br># 有向图之间边的关系<br>edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br>for edge in edges:<br>    G.add_edge(edge[0],edge[1])<br>pagerank_list=nx.pagerank(G,alpha=0.85)<br>print(&#39;pagerank 值是: &#39;, pagerank_list)<br><br>3、结果<br>pagerank 值是:  {&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}<br><br>","like_count":2,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441254,"discussion_content":"结果正确，对alpha阻尼因子的理解也正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551953066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71202,"user_name":"白夜","can_delete":false,"product_type":"c1","uid":1354449,"ip_address":"","ucode":"7AABFA7C04EA34","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/d1/076482f3.jpg","comment_is_top":false,"comment_ctime":1551281908,"is_pvip":false,"replies":[{"id":"26846","content":"这样使用最方便，alpha默认是0.85","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1551953108,"ip_address":"","comment_id":71202,"utype":2}],"discussion_count":1,"race_medal":0,"score":"10141216500","product_id":100021701,"comment_content":"默认阻尼就是0.85，alpha去掉完事、、<br>pagerank 值是： {&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}","like_count":2,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441041,"discussion_content":"这样使用最方便，alpha默认是0.85","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551953108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200281,"user_name":"等待","can_delete":false,"product_type":"c1","uid":1255162,"ip_address":"","ucode":"687A6BB673414E","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","comment_is_top":false,"comment_ctime":1585568281,"is_pvip":false,"replies":[{"id":"104333","content":"阻尼因子d通常默认取值为0.85，d=1时模型退化为PageRank简化模型","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1617903400,"ip_address":"","comment_id":200281,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5880535577","product_id":100021701,"comment_content":"老师您好，想询问以下就是，在分析希拉里的邮件人物关系的过程中，阻尼因子为0.85是什么意思呢？什么情况之下才要阻尼因子为1呢？<br>麻烦老师了","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489984,"discussion_content":"阻尼因子d通常默认取值为0.85，d=1时模型退化为PageRank简化模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617903400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519021,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/ENStdZ2o72F2wqqWVcCnQ6EpLhOo3qohvibXCVQUrhXAnZxUHMpwyfs9oXHrCdSQ4byuVicMX2UbeiavFCib15wakw/132","nickname":"Geek_34dbb7","note":"","ucode":"A5CF695ACF74E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268011,"discussion_content":"我猜想邮件人物关系因为是使用了page rank 算法，而page rank 算法中定义那个可能存在直接搜索网页的因子系数是0.15,这个0.85应该跟page rank 算法中的那个0.15有关系吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589723328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","nickname":"等待","note":"","ucode":"687A6BB673414E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217557,"discussion_content":"换句话说，在一个项目中是如何确定阻尼因子的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585570401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88068,"user_name":"滢","can_delete":false,"product_type":"c1","uid":1221511,"ip_address":"","ucode":"971A6F20AF3F9A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/87/c415e370.jpg","comment_is_top":false,"comment_ctime":1555834806,"is_pvip":false,"replies":[{"id":"40561","content":"正确，默认是0.85，所以可以省略。","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1562555259,"ip_address":"","comment_id":88068,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5850802102","product_id":100021701,"comment_content":"%15跳转概率，对应的阻尼因子是0.85 ， 阻尼因子默认就是0.85，所以在创建的时候可以直接省略啊alpha参数的设定。<br>import networkx<br>#创建有向图<br>digraph = networkx.DiGraph()<br>#有向图之间边的关系<br>edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br>for edge in edges:<br>    digraph.add_edge(edge[0],edge[1])<br>pagerank_list = networkx.pagerank(digraph)<br>print(&#39;PageRank 值是：&#39;,pagerank_list)<br>输出结果：<br>PageRank 值是： {&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}","like_count":1,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447711,"discussion_content":"正确，默认是0.85，所以可以省略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562555259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71045,"user_name":"third","can_delete":false,"product_type":"c1","uid":1025114,"ip_address":"","ucode":"9A37408A834F0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/5a/e708e423.jpg","comment_is_top":false,"comment_ctime":1551252893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846220189","product_id":100021701,"comment_content":"提问：<br> UserWarning: Pandas doesn&#39;t allow columns to be created via a new attribute name - see https:&#47;&#47;pandas.pydata.org&#47;pandas-docs&#47;stable&#47;indexing.html#attribute-access<br><br>不允许列被新属性创建？？？<br><br>点击网页进去，也没有找到这个警告。<br>需要修改或者别的什么东西吗？","like_count":1},{"had_liked":false,"id":280696,"user_name":"小晨","can_delete":false,"product_type":"c1","uid":1935063,"ip_address":"","ucode":"B7ADDC309C0D19","user_header":"https://static001.geekbang.org/account/avatar/00/1d/86/d7/46842f90.jpg","comment_is_top":false,"comment_ctime":1614321424,"is_pvip":false,"replies":[{"id":"101916","content":"代码正确！建议按照Python PEP8规范书写代码，对未来的工作很有用哦","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1614354375,"ip_address":"","comment_id":280696,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1614321424","product_id":100021701,"comment_content":"#!&#47;usr&#47;bin&#47;env python<br># -*- coding:utf-8 -*-<br># Author:Peter<br><br>import networkx as nx<br>import matplotlib.pyplot as plt<br><br>def show_graph(graph):<br>    # 使用Sprint Layout布局，类似中心放射状<br><br>    positions = nx.spring_layout(graph)<br>    # 设置网格图中的节点大小，大小与pagerank无关，因为pagerank值很小所以需要*20000<br>    nodesize = [x[&#39;pagerank&#39;] * 20000 for v , x in graph.nodes(data=True)]<br>    # 设置网络图中的边长度<br>    # edgesize = [np.sqrt(e[2][&#39;weight&#39;]) for e in graph.edges(data=True)]<br>    # 绘制节点<br>    nx.draw_networkx_nodes(graph , positions , node_size=nodesize , alpha=0.4)<br>    # 绘制边<br>    nx.draw_networkx_edges(graph , positions  , alpha=0.2)<br>    # 绘制节点的 label<br>    nx.draw_networkx_labels(graph , positions , font_size=10)<br>    #所有人物关系的关系图<br>    plt.show()<br><br># 创建有向图<br>G = nx.DiGraph()<br># 有向图之间边的关系<br>edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br>for edge in edges:<br>    G.add_edge(edge[0],edge[1])<br>pagerank = nx.pagerank(G)<br>print(&#39;Pagerank值：&#39;,pagerank)<br># 获取每个节点的pagerank数值<br>pagerank_list = {node: rank for node, rank in pagerank.items()}<br># 将 pagerank 数值作为节点的属性<br>nx.set_node_attributes(G, name = &#39;pagerank&#39;, values = pagerank)<br># 画网络图<br>show_graph(G)","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516184,"discussion_content":"代码正确！建议按照Python PEP8规范书写代码，对未来的工作很有用哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614354375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1935063,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/86/d7/46842f90.jpg","nickname":"小晨","note":"","ucode":"B7ADDC309C0D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351649,"discussion_content":"谢谢，我后面会注意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614358168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279558,"user_name":"小匚","can_delete":false,"product_type":"c1","uid":1611663,"ip_address":"","ucode":"78E800B23C457A","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/8f/ccce7df1.jpg","comment_is_top":false,"comment_ctime":1613820800,"is_pvip":false,"replies":[{"id":"101920","content":"之所以报错，是因为networkx版本更新后，更改了一部分参数的名称，比如：edge_size参数更名为nodelist。可以更改为nodelist参数，或者降低networkx的版本，比如：2.4版本，edge_size就不会报错了。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1614361744,"ip_address":"","comment_id":279558,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613820800","product_id":100021701,"comment_content":"老师好，我在跑的时候发现提示没有这个 edge_size 参数，我直接去掉了也跑出了和文章中相同的结果。nx.draw_networkx_edges(graph, positions, alpha=0.2)","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515770,"discussion_content":"之所以报错，是因为networkx版本更新后，更改了一部分参数的名称，比如：edge_size参数更名为nodelist。可以更改为nodelist参数，或者降低networkx的版本，比如：2.4版本，edge_size就不会报错了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614361744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263949,"user_name":"非同凡想","can_delete":false,"product_type":"c1","uid":1934969,"ip_address":"","ucode":"713FD449A49D5A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/86/79/066a062a.jpg","comment_is_top":false,"comment_ctime":1606302325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606302325","product_id":100021701,"comment_content":"import networkx as nx<br><br><br>def test_page_rank():<br>    G = nx.DiGraph()<br>    edges = [(&quot;A&quot;, &quot;B&quot;), (&quot;A&quot;, &quot;C&quot;), (&quot;A&quot;, &quot;D&quot;), (&quot;B&quot;, &quot;A&quot;), (&quot;B&quot;, &quot;D&quot;), (&quot;C&quot;, &quot;A&quot;), (&quot;D&quot;, &quot;B&quot;), (&quot;D&quot;, &quot;C&quot;)]<br><br>    for edge in edges:<br>        G.add_edge(edge[0], edge[1])<br>    pagerank_list = nx.pagerank(G, alpha=0.85)<br>    print(pagerank_list)<br><br>test_page_rank()<br><br>{&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}","like_count":0},{"had_liked":false,"id":257435,"user_name":"厚积薄发","can_delete":false,"product_type":"c1","uid":1206674,"ip_address":"","ucode":"8640C07176C249","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/92/69c2c135.jpg","comment_is_top":false,"comment_ctime":1603971295,"is_pvip":true,"replies":[{"id":"103006","content":"在希拉里邮件这个案例中，defaultdict(int)也可以。使用int还是list取决于字典的值需要存储多个值还是只需要存储单个整数，前者使用list更合适，而后者直接使用int即可。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1615997464,"ip_address":"","comment_id":257435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603971295","product_id":100021701,"comment_content":"老师，问一下哈，edges_weights_temp = defaultdict(list)这行代码 使用list 是不是可以换成int,换成int,我试了一下也是可以的，使用defaultdict(list) 有什么特殊的用吗？","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508329,"discussion_content":"在希拉里邮件这个案例中，defaultdict(int)也可以。使用int还是list取决于字典的值需要存储多个值还是只需要存储单个整数，前者使用list更合适，而后者直接使用int即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615997464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205139,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1586537333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586537333","product_id":100021701,"comment_content":"交作业，好累啊，<br>https:&#47;&#47;github.com&#47;LearningChanging&#47;Data-analysis-in-action&#47;tree&#47;master&#47;33-PageRank%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%88%86%E6%9E%90%E5%B8%8C%E6%8B%89%E9%87%8C%E9%82%AE%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BA%BA%E7%89%A9%E5%85%B3%E7%B3%BB","like_count":0},{"had_liked":false,"id":187830,"user_name":"Untitled","can_delete":false,"product_type":"c1","uid":1039464,"ip_address":"","ucode":"8DD6ABA3E81A2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/68/006ba72c.jpg","comment_is_top":false,"comment_ctime":1584256047,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1584256047","product_id":100021701,"comment_content":"结果：<br>{&#39;A&#39;: 0.32456093581768314, &#39;B&#39;: 0.22514635472743894, &#39;D&#39;: 0.2251463547274389, &#39;C&#39;: 0.22514635472743894}<br><br>代码：<br>import networkx as nx<br>edges = [(&#39;A&#39;,&#39;B&#39;),(&#39;A&#39;,&#39;D&#39;),(&#39;A&#39;,&#39;C&#39;),(&#39;B&#39;,&#39;A&#39;),(&#39;B&#39;,&#39;D&#39;),(&#39;C&#39;,&#39;A&#39;),(&#39;D&#39;,&#39;B&#39;),(&#39;D&#39;,&#39;C&#39;)]<br>G1 = nx.DiGraph()<br>G1.add_edges_from(edges)<br>pagerank_list = nx.pagerank(G1, alpha=0.85)","like_count":0},{"had_liked":false,"id":154635,"user_name":"Ronnyz","can_delete":false,"product_type":"c1","uid":1488280,"ip_address":"","ucode":"9F34527B1D343D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","comment_is_top":false,"comment_ctime":1574497336,"is_pvip":false,"replies":[{"id":"59719","content":"对的 正确","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574737294,"ip_address":"","comment_id":154635,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574497336","product_id":100021701,"comment_content":"将alpha=0.85<br>pagerank值为： {&#39;A&#39;: 0.3245609358176831, &#39;B&#39;: 0.22514635472743894, &#39;C&#39;: 0.22514635472743894, &#39;D&#39;: 0.22514635472743894}","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475532,"discussion_content":"对的 正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574737294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141629,"user_name":"S.Mona","can_delete":false,"product_type":"c1","uid":1168338,"ip_address":"","ucode":"D769FABEBF6BA9","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/d2/2cf975ea.jpg","comment_is_top":false,"comment_ctime":1571203537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571203537","product_id":100021701,"comment_content":"pagerank计算的影响力，搜索结果按照影响力评分排序，这个和ElasticSearch的相关度评分排序搜索排序搜索结果有什么异同？","like_count":0}]}