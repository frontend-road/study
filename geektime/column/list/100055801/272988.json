{"id":272988,"title":"10｜代码重构实验：在实战中提高编辑熟练度","content":"<p>你好，我是吴咏炜。</p><p>在前几讲中，我们已经学了很多关于 Vim 的知识，现在需要好好消化一下。今天是基础篇的最后一讲，我们就基本上不学新的内容了，而是通过一个假想的代码重构实验，来复习、巩固已经学到的编辑技能。</p><h2>开始前的准备工作</h2><p>这是一堂实验课，你需要跟着我一步步地操作。跟只学习文字内容相比，实践操作能让你收获更多。所以，就请你现在把电脑准备好，跟我来吧。</p><p>今天我们将要做的是，签出我为极客时间写的 C++ 示例程序，并对其中的代码进行重构。别紧张，你不需要精通 C++，因为我会在必要的时候对代码进行解释。你学习的重点在于，我是如何进行编辑的，而不是我写的代码是什么意思。</p><p>首先，你需要先为工作代码找一个合适的父目录，然后用下面的命令签出代码（Windows 下面去掉“\\”全部写一行，或者把“\\”换成“^”））：</p><pre><code class=\"language-bash\">git clone --recurse-submodules \\\n          --shallow-submodules \\\n    https://github.com/adah1972/geek_time_cpp.git\n</code></pre><p>万一我以后更改代码的话，就有可能造成内容或路径发生变化。所以，请把我们今天编辑的 commit id 记下来：632b067。如果你用 <code>git log</code> 看到 HEAD 的 commit id 不是它，可使用 <code>git checkout 632b067</code> 这个命令来签出跟今天完全相同的版本。</p><!-- [[[read_end]]] --><p>下面，我们就开始了！</p><h2>类模板 smart_ptr 更名</h2><p>我们第一步要做的，是把示例的 <code>smart_ptr</code> 类模板更名为 <code>shared_ptr</code>。同时，为了避免跟标准的 <code>shared_ptr</code> 发生冲突，我们要把它放到名空间 <code>gt</code>里面去（当然，你可以用其他名字；这只是我们的示例）。</p><p>大体思路是，先需要找到 <code>shared_ptr</code> 定义所在的文件，对其进行修改；然后找到使用该文件的地方，也进行相应的修改。下面我们就来做一下。</p><h3>修改类定义</h3><p>首先，我们需要进入 <code>geek_time_cpp</code> 所在的目录。如果你前面的命令就是 <code>git clone</code> 的话，那现在使用 <code>cd geek_time_cpp</code> 就可以了。</p><p>然后，我们当然是启动 Vim 了。假设我们知道 <code>smart_ptr</code> 被定义在 smart_ptr.h 头文件里，那我们最快的打开方式就是使用 <code>:Files</code> 命令，然后输入“sm”，即可看到“common/smart_ptr.h”成了第一选择。我们此时按下回车键即可打开文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/da/5e/daa9009fe8f7c74a2c14fb64da06155e.gif?wh=1828*1084\" alt=\"Fig10.1\" title=\"使用 fzf.vim 插件打开文件的界面\"></p><p>进入文件后，我们先来看一下文件的结构。根据目前的 Vim 配置，我们可以使用 <code>&lt;F9&gt;</code> 打开 tagbar 插件。注意，这个文件使用了 C++11，Exuberant Ctags 会有错误的识别。下面的截图是安装了 Universal Ctags 之后的结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/bc/34/bc206cdd5b2094d6676a8ba283410c34.png?wh=1828*1084\" alt=\"Fig10.2\" title=\"使用 tagbar 查看文件结构\"></p><p>我们可以看到这个文件比较简单，里面主要就是两个类的定义和一些全局函数。不过，我们还是要确认一下，文件中没有任何会被错误匹配替换的内容。我们可以在右侧窗口里双击“smart_ptr”，这样左侧窗口就会跳转到 <code>smart_ptr</code> 的定义上，并且光标停留在类名上面。这样，我们只需使用 <code>*</code> 启动搜索和加亮即可。使用 <code>n</code> 继续搜索，我们很快就能确认文件中确实没有冲突的内容。</p><p>下面，我们进行替换操作，需要键入的是 <code>:%s/&lt;C-R&gt;//shared_ptr/g&lt;CR&gt;</code>（<code>&lt;C-R&gt;</code> 和 <code>&lt;CR&gt;</code> 都是按键，而非小于符号后面跟其他字符）。我们不需要手工输入 <code>\\&lt;smart_ptr\\&gt;</code>，因为搜索寄存器 <code>/</code> 中已经有我们要的内容了。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/98/fbcc22dd7a2424afbfac32045b3e1e98.gif?wh=1828*1084\" alt=\"Fig10.3\" title=\"键入替换命令\"></p><p>最后，我们在第一个类定义的前面加上 <code>namespace gt {</code>、在最后的 <code>#endif</code> 前面加上 <code>} /* namespace gt *／</code>，就完成了定义的修改。</p><p>不过，现在文件名还没有更改，文件里的包含保护（即宏 <code>SMART_PTR_H</code>）也没有更改。包含保护需要简单的重命名，就请你用我们目前介绍的任一方法自己完成了。随后，我们用命令 <code>:Rename shared_ptr.h</code> 即可完成更名和存盘操作。</p><h3>修改使用 smart_ptr 的地方</h3><p>我们先试着用下面的命令搜索一下：</p><pre><code class=\"language-vim\">:grep -R --include=\"*.cpp\" --include=\"*.h\" \"\\&lt;smart_ptr\\&gt;\" .\n</code></pre><p>（小提示：在查看搜索结果的时候，适时使用 <code>zz</code>、<code>zt</code> 和 <code>zb</code> 命令，可以把周边的代码看得更清楚。）</p><p>使用 <code>:cn</code> （或我们定义的快捷键）仔细检查搜索出来的结果，我们会发现有一些误匹配：有 <code>smart_ptr</code> 是 <code>unique_ptr</code> 的情况，也有 <code>smart_ptr</code> 是策略类的情况。</p><p>我们稍微改换一下方法，搜索对 <code>smart_ptr.h</code> 的使用：</p><pre><code class=\"language-vim\">:grep -R --include=\"*.cpp\" --include=\"*.h\" \"\\&lt;smart_ptr\\.h\\&gt;\" .\n</code></pre><p>这样的话，我们会发现结果只有一个匹配，那就简单了。</p><p>在上一讲里，我们已经讨论了在这种情况下进行修改的三种不同方法（忘了？请回过去复习一下）。今天，我们用第四种方法。这种方法的每一步我们实际上都讲过，但串起来用，你可能就没有试过了。我们使用的基本命令是 <code>cw</code>、<code>n</code> 和 <code>.</code>。</p><p>由于之前搜索过 <code>smart_ptr</code>，我们现在仍然可以继续使用 <code>n</code> 找到需要修改的地方。我们随即需要键入的，是 <code>cwgt::shared_ptr&lt;Esc&gt;</code>。这样输入虽然有点长、有点啰嗦，但它的好处是整个修改会被 Vim 看作是一步，因而可以用 <code>.</code> 命令来重复。这样，下面我们只需要反复利用 <code>n</code> 和 <code>.</code> 命令，把除了 <code>#include</code> 那行之外的所有 <code>smart_ptr</code> 都改成 <code>gt::shared_ptr</code> 即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/20/d4bb5a96e3951b71c9ecb1c00191b020.gif?wh=1828*1084\" alt=\"Fig10.4\" title=\"使用 cw、n 和 . 来进行替换\"></p><p>很显然，这并不是唯一的方法，也不一定是最好的方法。所以，我建议你在这里暂停一下，用 <code>:e!</code> 重新载入这个文件，试试使用上一讲提到的其他方法。我这里就仅仅再给你展示一下如何使用替换命令，同时又不会误匹配文件名：</p><pre><code class=\"language-vim\">:%s/\\&lt;smart_ptr\\&gt;\\ze\\%([^.]\\|$\\)/gt::shared_ptr/g\n</code></pre><p>这个匹配模式说的是，我要查找完整的单词“smart_ptr”（这就是要替换的内容了），但是，在匹配结束（<code>\\ze</code>）后，我还有两个额外的匹配要求（用 <code>\\%(</code> 和 <code>\\)</code> 括起来），要么不是句点（<code>[^.]</code>），要么（<code>\\|</code>）是行尾（<code>$</code>）。</p><p>我们最后把唯一残留的 <code>smart_ptr.h</code> 修改成 <code>shared_ptr.h</code>，就完成了 <code>smart_ptr</code> 的更名任务。</p><h2>编译执行（可选）</h2><p>如果你懂 C++，并且有 geek_time_cpp 的 <a href=\"https://github.com/adah1972/geek_time_cpp/blob/master/README.md\">README</a> 文件里要求的执行环境的话，可以选择体验一下编译执行。</p><p>我们需要先在 02 目录下创建并进入 build 子目录，然后运行 <code>cmake ..</code>。随后，在 Unix 环境下，一般可立即使用快捷键 <code>&lt;F5&gt;</code> 进行编译；想要在 Windows 下也能正常进行编译，我们则应当设置 <code>set makeprg=cmake\\ --build\\ .\\ -j</code>（老版本的 cmake 可能不支持 <code>-j</code> 命令行参数的话，这样的话，我们会没法用 cmake 进行并发编译；不过对于我们的小例子没啥关系）。</p><p>另外一个要注意的地方是，Vim 在缺省配置下不能识别 Visual C++ 的错误输出格式 。为了能进行识别，并在发生错误时跳转到文件的指定位置，我们需要设置下面的选项：</p><pre><code class=\"language-vim\">set errorformat=\\ %#%f(%l\\\\\\,%c):\\ %m\n</code></pre><p>目前来讲，环境没问题的话，我们就会……遇到编译错误。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/a2/2379fd36a653d5725129d0ecaebcb3a2.png?wh=1238*1287\" alt=\"Fig10.5\" title=\"Windows 下遇到编译错误的界面\"></p><p>原因是 <code>dynamic_pointer_cast</code> 前面也需要加上 <code>gt::</code>。做了这个修改之后，我们就应该可以顺利编译出可执行文件了。在 Windows 下使用命令 <code>:!.\\Debug\\sp_test02_shared_ptr</code>，或在 Unix 平台下使用命令 <code>:!./sp_test02_shared_ptr</code>，我们即可在终端看到下面的输出：</p><blockquote>\n<p><code>circle()</code><br>\n<code>use count of ptr1 is 1</code><br>\n<code>use count of ptr2 was 0</code><br>\n<code>use count of ptr2 is now 2</code><br>\n<code>ptr1 is not empty</code><br>\n<code>use count of ptr3 is 3</code><br>\n<code>~circle()</code></p>\n</blockquote><p>同时，如果愿意的话，我们也可以使用 AsyncRun 提供的机制，在 Windows 下使用命令 <code>:AsyncRun .\\Debug\\sp_test02_shared_ptr</code>，或在 Unix 平台下使用命令 <code>:AsyncRun ./sp_test02_shared_ptr</code>，异步运行程序并把输出重定向到 quickfix 窗口里。</p><h2>添加跟踪语句</h2><p>假设我们对这个代码执行过程有些疑问，想添加些跟踪语句，该怎么做呢？</p><p>我们首先需要在一个新窗口中打开 common/smart_ptr.h。由于我们第一个打开的文件就是它，所以它的缓冲区编号为 1，我们可在用 <code>&lt;C-W&gt;n</code> 打开一个新窗口后，使用 <code>1&lt;C-^&gt;</code> 飞速地重新打开文件。</p><p>我们希望对引用计数的增、减、删除等操作进行跟踪。最简单的方式，当然就是执行对应操作的时候，把执行的语句也输出一下。像这样简单的机械化操作，显然就是宏的天下了。我们来试一下。</p><p>我们先来改造一下 <code>smart_ptr</code> 析构函数里面的第一个 <code>delete ptr_</code>。一个可能的操作步骤是：</p><ol>\n<li>复制当前行</li>\n<li>粘贴当前行</li>\n<li>选中行首缩进后、结尾分号前的内容，套上双引号</li>\n<li>在这个新对象前后插入输出所必须的命令</li>\n</ol><p>我们需要录制的宏的内容是 <code>yyPv$hS\"gvS)iputs&lt;Esc&gt;l%a;&lt;Esc&gt;</code>，而你把这一串东西用 <code>nmap</code> 命令映射给某个按键上也完全可行（注意，此处不能用 <code>nnoremap</code>，因为我们需要使用 vim-surround 插件带来的新的 <code>S</code> 按键的定义）。当然，在交互的环境中，录制按键会比眼睛看这个字符串容易理解多了。Vim 的宏，就其本质而言，可算是一种只写不读的简单过程式语言。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/73/b7e972e2c310b493f31bf18d16264873.gif?wh=1828*1084\" alt=\"Fig10.6\" title=\"录制把一行语句变成调试输出的宏\"></p><p>我们用到的命令里，只有 <code>gv</code> 是之前没有学过的。我们当然也有其他方法来选中行中的内容，但 <code>gv</code> 的作用是重新选中刚才选中的内容，最快，也最方便。</p><p>利用这个宏，我们可以把添加调试语句变成按两个键。哦，对了，宏一旦执行过后，第二次执行同一个宏只需要键入 <code>@@</code> 即可，这样还能更快些。</p><p>在我们把所有的 <code>delete</code> 语句和 <code>add_count</code> 函数调用行上执行了这个宏之后，我们运行程序可以得到下面的结果：</p><blockquote>\n<p><code>circle()</code><br>\n<code>use count of ptr1 is 1</code><br>\n<code>use count of ptr2 was 0</code><br>\n<code>other.shared_count_-&gt;add_count();</code><br>\n<code>use count of ptr2 is now 2</code><br>\n<code>ptr1 is not empty</code><br>\n<code>other.shared_count_-&gt;add_count();</code><br>\n<code>use count of ptr3 is 3</code><br>\n<code>delete ptr_;</code><br>\n<code>~circle()</code><br>\n<code>delete shared_count_;</code></p>\n</blockquote><p>如果想对这个代码作进一步调整，类似操作即可，相当容易吧？</p><h2>调整测试用例</h2><p>我们现在使用鼠标点击或者 <code>&lt;C-W&gt;j</code> 等命令跳转到测试代码 test02_shared_ptr.cpp 中。我们随即使用 <code>&lt;C-W&gt;_</code> 命令来最大化窗口，因为似乎暂时用不着编辑 smart_ptr.h（但还不那么确定，否则就可以直接关闭那个窗口了）。</p><p>我们打算在 <code>ptr1</code> 不为空的那个条件判断下面再加点内容。那行输出看着也挺无聊的，我们就直接把它干掉了。我们可以在那组大括号内的任意地方点击后，使用 <code>ci{</code> 开始编辑，然后输入以下内容：</p><pre><code class=\"language-c++\">printf(\"ptr1 %s ptr2\\n\",\n       ptr1 == ptr2 ? '==' : '!=');\n</code></pre><p>代码编译居然有奇怪的告警出现……我是 Python 写多了，脑子没转回来吗？没关系，在第一处单引号内部键入 <code>cs'\"</code>，然后在第二处单引号内部键入 <code>.</code> 重复一下就好，现在代码应该是正确的了：</p><pre><code class=\"language-c++\">printf(\"ptr1 %s ptr2\\n\",\n       ptr1 == ptr2 ? \"==\" : \"!=\");\n</code></pre><p>再次编译，完美，没有问题了！运行程序，我们得到：</p><blockquote>\n<p><code>circle()</code><br>\n<code>use count of ptr1 is 1</code><br>\n<code>use count of ptr2 was 0</code><br>\n<code>other.shared_count_-&gt;add_count();</code><br>\n<code>use count of ptr2 is now 2</code><br>\n<code>ptr1 == ptr2</code><br>\n<code>other.shared_count_-&gt;add_count();</code><br>\n<code>use count of ptr3 is 3</code><br>\n<code>delete ptr_;</code><br>\n<code>~circle()</code><br>\n<code>delete shared_count_;</code></p>\n</blockquote><h2>内容小结</h2><p>今天我们尝试对一小段 C++ 代码进行了简单的重构。在这个过程中，我们使用和复习了下面这些编辑技巧：</p><ul>\n<li>使用 fzf.vim 来根据部分文件名迅速打开文件</li>\n<li>使用 tagbar 来浏览文件的结构</li>\n<li>使用 vim-eunuch 来进行文件更名</li>\n<li>使用替换命令来进行批量代码更名</li>\n<li>使用 <code>.</code> 命令技巧来进行批量代码更名</li>\n<li>使用 <code>&lt;C-R&gt;</code> 在插入模式和命令行模式中使用寄存器的内容</li>\n<li>使用 <code>:grep</code> 命令在文件中进行文本搜索</li>\n<li>使用异步的构建命令，并设置选项使得错误信息解析在 Visual Studio 工具里也能工作</li>\n<li>使用文本对象命令对用括号、引号等符号包起来的文本进行统一的修改</li>\n<li>使用宏，在一次操作之后，在遇到类似场景时可以快速修改</li>\n</ul><p>虽然今天的代码是 C++ 的，但这些编辑方式适用于任何语言。请你一定要牢牢掌握。我们也应该慢慢看到了，编辑的一个要点，在于把需要重复的工作自动化和简单化。Vim 作为一个程序员的编辑器，提供了灵活而强大的编辑机制——最终用户，或扩展包的开发者，都可以利用这些底层机制，使编辑变得更加高效。</p><p>本讲我们对 Windows 下的 vimrc 配置文件有一处小修改，对应的标签是“l10-windows”。</p><h2>课后练习</h2><p>实验课中的内容你已经一一尝试了吧？请你再向前一步，想一想我们的每次编辑是否可以有不同的执行方式，及哪种方式对你最顺手。Vim 的命令一定是在使用中才能熟练应用的。你不一定要记住所有可能的编辑方式，但每一种最好都至少尝试一次，然后找出最适合自己的、最能牢牢掌握的编辑方式。</p><p>我是吴咏炜，我们下一讲再见！</p>","comments":[{"had_liked":false,"id":241609,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1597370452,"is_pvip":false,"replies":[{"id":"89261","content":"我们干的事情是在那个项目的外部，在那个项目上打标签不好。<br><br>CMake 很好，推荐。在 Unix 平台上它默认生成 Makefile，后面你仍然可以用 make 命令。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597452962,"ip_address":"","comment_id":241609,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18777239636","product_id":100055801,"comment_content":"老师的git submodule用的溜啊.<br>克隆一个仓库,出来了一大溜.<br>这个git子模块的功能我只是粗略知道,但还没用起来过.<br><br>另外,建议给commit:`632b067`打一个方便记的标签或分支.<br><br># 如果是我来做这次的重构,有些地方我会这么做.(仅供参考)<br><br>1. 打开文件的操作我会这么做<br>`grep -lr smart_ptr * | xargs -o vim`<br>grep的`-l`参数是只显示文件名,`-r`的操作是表示递归的在子目录中查找.<br>后面的`|`表示管道,把第一部分的结果当做第二部分的输入.<br>`xargs -o vim`表示在vim中打开这些找到的文件.<br><br>其实这套组合命令是非常常用的.<br>我甚至给`xargs -o vim`取了个别名:`alias xov=&quot;xargs -o vi&quot;`<br><br>2. 如果是已经打开了某个文件,需要在当前目录及子目录中查找相关内容,<br>我会用之前创建的映射键`F3`去搜索.<br>如果是想批量打开quickfix列表中的所有文件,可以参考这个.(https:&#47;&#47;gist.github.com&#47;larsthegeek&#47;4063239)<br><br>3. 如果是批量替换`smart_ptr`为`gt::shared_ptr`,以前我也会用`.`命令或者正则替换.<br>但是现在,我又多了一个选择,就是用之前介绍的[vim-visual-multi](https:&#47;&#47;github.com&#47;mg979&#47;vim-visual-multi)<br>它不需要写正则(不需要考虑各种特殊字符的转义),也不用频繁的使用`n`去跳转,而且修改的过程还很直观.<br>(不像Ctrl+v的列编辑模式,只有退出了编辑模式才能在其他地方看到效果)<br><br>另外,推荐一个以前我会用的骚操作`gn`.<br>配合操作符`cgn`去编辑,后面都不需要按`n`,而直接按`.`命令.<br>就可以实现跳转到下一处匹配,并执行刚才的修改操作.<br>这个方法的缺点,就是无法跳过某些不想修改的匹配处.<br><br>4. cmake我不太熟,但我习惯于写Makefile文件,把常用的编译和运行命令放在其中.<br>这样配合`vim-dispatch`插件,可以很方便的异步调用编译命令.<br><br>5. 在命令行的替换模式中,使用上次的搜索模式,可以偷点懒.<br>`:help &#47;&lt;CR&gt;`,其实不用输入具体的模式,也是可以直接复用上次的模式.<br>但是这个也存在一个问题,不便于后面复用该替换命令.(因为后面的`&#47;`寄存器的内容已经发生了变化)<br><br>6. 在做重构前,我会习惯性的备份之前的内容.重构完成后,核对一遍本次的修改是否正确.<br><br>","like_count":4,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503787,"discussion_content":"我们干的事情是在那个项目的外部，在那个项目上打标签不好。\n\nCMake 很好，推荐。在 Unix 平台上它默认生成 Makefile，后面你仍然可以用 make 命令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597452962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337554,"user_name":"Serenity","can_delete":false,"product_type":"c1","uid":2915166,"ip_address":"","ucode":"795B7129FC56EB","user_header":"https://static001.geekbang.org/account/avatar/00/2c/7b/5e/044e9598.jpg","comment_is_top":false,"comment_ctime":1646891532,"is_pvip":true,"replies":[{"id":"123372","content":"没发现池老师也用 Vim 么？😝","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1646971142,"ip_address":"","comment_id":337554,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5941858828","product_id":100055801,"comment_content":"学到这一课才发现，在这个网页里使用hjkl和左下上右按键的效果是一样的！","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555545,"discussion_content":"没发现池老师也用 Vim 么？😝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646971142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355796,"user_name":"进击的Lancelot","can_delete":false,"product_type":"c1","uid":2620407,"ip_address":"上海","ucode":"3BCC355801DC61","user_header":"https://static001.geekbang.org/account/avatar/00/27/fb/f7/88ab6f83.jpg","comment_is_top":false,"comment_ctime":1661756339,"is_pvip":true,"replies":[{"id":"129523","content":"目录正确吗？什么平台？（Windows下默认似乎是用find。）","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1661835239,"ip_address":"上海","comment_id":355796,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1661756339","product_id":100055801,"comment_content":"吴老师，您好！请教一个问题，在重构过程操作中，我在 vim 中使用 <br>:grep -R --include=&quot;*.cpp&quot; --include=&quot;*.h&quot; &quot;\\&lt;smart_ptr\\&gt;&quot; . 进行查找，然而什么都查找不到。在 Quickfix 的窗口中什么也没有显示。这是为什么呢？我在网上搜索，很多人都是说通过 :copen 打开 Quickfix 后就可以看到查询结果，然而我这边查询却什么也查询不到","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585807,"discussion_content":"目录正确吗？什么平台？（Windows下默认似乎是用find。）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661835240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2620407,"avatar":"https://static001.geekbang.org/account/avatar/00/27/fb/f7/88ab6f83.jpg","nickname":"进击的Lancelot","note":"","ucode":"3BCC355801DC61","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585791,"discussion_content":"我已经找到了原因，原因非常愚蠢，因为我的命令少打了后面的那个 . 感觉要练习就不能光复制，结果手打的过程中敲漏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661828155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250989,"user_name":"leaf","can_delete":false,"product_type":"c1","uid":1060139,"ip_address":"","ucode":"B2CFF00AFA7494","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGiax48CJGAJpha4pJksPia7J7HsiatYwjBA9w1bkrDicXfQz1SthaG3w1KJ2ibOxpia5wfbQ/132","comment_is_top":false,"comment_ctime":1601299469,"is_pvip":false,"replies":[{"id":"91851","content":"这好像应该算是 C++ 那边的问题？;-)<br><br>这个问题平台相关。如果你用 Ubuntu 的话，主要需要的是：<br><br>libarmadillo-dev<br>libboost-all-dev<br>libicu-dev<br>ibspdlog-dev<br>libssl-dev<br>libtbb-dev<br><br>不一定全。另外，cpprestsdk 需要自己构建。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1601392916,"ip_address":"","comment_id":250989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601299469","product_id":100055801,"comment_content":"cmake报错, 好像系统缺很多库, 老师能列一下依赖库吗?<br> cmake ..<br>-- Could NOT find Armadillo (missing: Armadillo_DIR)<br>-- Found the following ICU libraries:<br>--   uc (required)<br>--   io (required)<br>-- Could NOT find Armadillo (missing: Armadillo_DIR)<br>","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506356,"discussion_content":"这好像应该算是 C++ 那边的问题？;-)\n\n这个问题平台相关。如果你用 Ubuntu 的话，主要需要的是：\n\nlibarmadillo-dev\nlibboost-all-dev\nlibicu-dev\nibspdlog-dev\nlibssl-dev\nlibtbb-dev\n\n不一定全。另外，cpprestsdk 需要自己构建。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601392916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246525,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1599391157,"is_pvip":false,"replies":[{"id":"90610","content":"对，不复杂，做一遍就清楚了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1599437379,"ip_address":"","comment_id":246525,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599391157","product_id":100055801,"comment_content":"敲了几个小时，终于敲完了。看到 c++ 本来想逃过的，看到后面有输出，于是老老实实配了环境，编译执行，做起来发现其实也非常简单。。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505172,"discussion_content":"对，不复杂，做一遍就清楚了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599437379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244990,"user_name":"doge","can_delete":false,"product_type":"c1","uid":1593251,"ip_address":"","ucode":"9E2D4C8F9B4CBC","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","comment_is_top":false,"comment_ctime":1598774967,"is_pvip":false,"replies":[{"id":"90195","content":"对的，一定要多练习。<br><br>我的&lt;F5&gt;会需要使用第8讲里讲到的vimrc配置，你是不是缺了那部分？","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598887367,"ip_address":"","comment_id":244990,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598774967","product_id":100055801,"comment_content":"命令多敲才是王道了，反复敲了一下午，正则表达式也渐渐能看懂了。<br>另外就是之前按照老师说的配置的F5好像对cmake和make都没有支持，只能用AsyncRun make在build目录下执行才能实施编译。<br>宏录制确实有意思，想起以前该调试信息输入确实费时间啊。。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504760,"discussion_content":"对的，一定要多练习。\n\n我的&amp;lt;F5&amp;gt;会需要使用第8讲里讲到的vimrc配置，你是不是缺了那部分？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598887367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241646,"user_name":"YouCompleteMe","can_delete":false,"product_type":"c1","uid":1232859,"ip_address":"","ucode":"89B5A75DA85E0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cf/db/9693d08f.jpg","comment_is_top":false,"comment_ctime":1597377997,"is_pvip":false,"replies":[{"id":"89287","content":"我在 Linux 和 Mac 上都测了一下，确实打开文件后，:ls 就只看到那一个缓冲区。<br><br>你 :ls 看到的另外两个是啥？Vim 版本多少，有没有可能是某个插件搞的鬼？","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597497461,"ip_address":"","comment_id":241646,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1597377997","product_id":100055801,"comment_content":"老师，怎么启动vim的，我:Files到smart_ptr。buffer number是3","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503801,"discussion_content":"我在 Linux 和 Mac 上都测了一下，确实打开文件后，:ls 就只看到那一个缓冲区。\n\n你 :ls 看到的另外两个是啥？Vim 版本多少，有没有可能是某个插件搞的鬼？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597497461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298720,"discussion_content":"可以用vim-airline插件的这个配置来直观的显示buffer number.\nlet g:airline#extensions#tabline#buffer_nr_show = 1\n\n如果遇到前面的buffer number不知道被谁占用了,可以用b id切换过去看看,是啥内容.\n再不行就是二分查找,屏蔽.vimrc配置文件,看究竟是哪一行导致的了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597387812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232859,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cf/db/9693d08f.jpg","nickname":"YouCompleteMe","note":"","ucode":"89B5A75DA85E0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298703,"discussion_content":"把vim-startify移走就好了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597381097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}