{"id":397475,"title":"24 | Web 服务：Web 服务核心功能有哪些，如何实现？","content":"<p>你好，我是孔令飞。从今天开始，我们进入实战第三站：服务开发。在这个部分，我会讲解 IAM项目各个服务的构建方式，帮助你掌握Go 开发阶段的各个技能点。</p><p>在Go项目开发中，绝大部分情况下，我们是在写能提供某种功能的后端服务，这些功能以RPC API 接口或者RESTful API接口的形式对外提供，能提供这两种API接口的服务也统称为Web服务。今天这一讲，我就通过介绍RESTful API风格的Web服务，来给你介绍下如何实现Web服务的核心功能。</p><p>那今天我们就来看下，Web服务的核心功能有哪些，以及如何开发这些功能。</p><h2>Web服务的核心功能</h2><p>Web服务有很多功能，为了便于你理解，我将这些功能分成了基础功能和高级功能两大类，并总结在了下面这张图中：</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/2e/1a6d38450cdd0e115e505ab30113602e.jpg?wh=2248x1835\" alt=\"\"></p><p>下面，我就按图中的顺序，来串讲下这些功能。</p><p>要实现一个Web服务，首先我们要选择通信协议和通信格式。在Go项目开发中，有HTTP+JSON 和 gRPC+Protobuf两种组合可选。因为iam-apiserver主要提供的是REST风格的API接口，所以选择的是HTTP+JSON组合。</p><p><strong>Web服务最核心的功能是路由匹配。</strong>路由匹配其实就是根据<code>(HTTP方法, 请求路径)</code>匹配到处理这个请求的函数，最终由该函数处理这次请求，并返回结果，过程如下图所示：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/1f/9d/1f5yydeffb32732e7d0e23a0a9cd369d.jpg?wh=2248x975\" alt=\"\"></p><p>一次HTTP请求经过路由匹配，最终将请求交由<code>Delete(c *gin.Context)</code>函数来处理。变量<code>c</code>中存放了这次请求的参数，在Delete函数中，我们可以进行参数解析、参数校验、逻辑处理，最终返回结果。</p><p>对于大型系统，可能会有很多个API接口，API接口随着需求的更新迭代，可能会有多个版本，为了便于管理，我们需要<strong>对路由进行分组</strong>。</p><p>有时候，我们需要在一个服务进程中，同时开启HTTP服务的80端口和HTTPS的443端口，这样我们就可以做到：对内的服务，访问80端口，简化服务访问复杂度；对外的服务，访问更为安全的HTTPS服务。显然，我们没必要为相同功能启动多个服务进程，所以这时候就需要Web服务能够支持<strong>一进程多服务</strong>的功能。</p><p>我们开发Web服务最核心的诉求是：输入一些参数，校验通过后，进行业务逻辑处理，然后返回结果。所以Web服务还应该能够进行<strong>参数解析</strong>、<strong>参数校验</strong>、<strong>逻辑处理</strong>、<strong>返回结果</strong>。这些都是Web服务的业务处理功能。</p><p>上面这些是Web服务的基本功能，此外，我们还需要支持一些高级功能。</p><p>在进行HTTP请求时，经常需要针对每一次请求都设置一些通用的操作，比如添加Header、添加RequestID、统计请求次数等，这就要求我们的Web服务能够支持<strong>中间件</strong>特性。</p><p>为了保证系统安全，对于每一个请求，我们都需要进行<strong>认证</strong>。Web服务中，通常有两种认证方式，一种是基于用户名和密码，一种是基于Token。认证通过之后，就可以继续处理请求了。</p><p>为了方便定位和跟踪某一次请求，需要支持<strong>RequestID</strong>，定位和跟踪RequestID主要是为了排障。</p><p>最后，当前的软件架构中，很多采用了前后端分离的架构。在前后端分离的架构中，前端访问地址和后端访问地址往往是不同的，浏览器为了安全，会针对这种情况设置跨域请求，所以Web服务需要能够处理浏览器的<strong>跨域</strong>请求。</p><p>到这里，我就把Web服务的基础功能和高级功能串讲了一遍。当然，上面只介绍了Web服务的核心功能，还有很多其他的功能，你可以通过学习<a href=\"https://github.com/gin-gonic/gin\">Gin的官方文档</a>来了解。</p><p>你可以看到，Web服务有很多核心功能，这些功能我们可以基于net/http包自己封装。但在实际的项目开发中， 我们更多会选择使用基于net/http包进行封装的优秀开源Web框架。本实战项目选择了Gin框架。</p><p>接下来，我们主要看下Gin框架是如何实现以上核心功能的，这些功能我们在实际的开发中可以直接拿来使用。</p><h2>为什么选择Gin框架？</h2><p>优秀的Web框架有很多，我们为什么要选择Gin呢？在回答这个问题之前，我们先来看下选择Web框架时的关注点。</p><p>在选择Web框架时，我们可以关注如下几点：</p><ul>\n<li>路由功能；</li>\n<li>是否具备middleware/filter能力；</li>\n<li>HTTP 参数（path、query、form、header、body）解析和返回；</li>\n<li>性能和稳定性；</li>\n<li>使用复杂度；</li>\n<li>社区活跃度。</li>\n</ul><p>按 GitHub Star 数来排名，当前比较火的 Go Web 框架有 Gin、Beego、Echo、Revel 、Martini。经过调研，我从中选择了Gin框架，原因是Gin具有如下特性：</p><ul>\n<li>轻量级，代码质量高，性能比较高；</li>\n<li>项目目前很活跃，并有很多可用的 Middleware；</li>\n<li>作为一个 Web 框架，功能齐全，使用起来简单。</li>\n</ul><p>那接下来，我就先详细介绍下Gin框架。</p><p><a href=\"https://github.com/gin-gonic/gin\">Gin</a>是用Go语言编写的Web框架，功能完善，使用简单，性能很高。Gin核心的路由功能是通过一个定制版的<a href=\"https://github.com/julienschmidt/httprouter\">HttpRouter</a>来实现的，具有很高的路由性能。</p><p>Gin有很多功能，这里我给你列出了它的一些核心功能：</p><ul>\n<li>支持HTTP方法：GET、POST、PUT、PATCH、DELETE、OPTIONS。</li>\n<li>支持不同位置的HTTP参数：路径参数（path）、查询字符串参数（query）、表单参数（form）、HTTP头参数（header）、消息体参数（body）。</li>\n<li>支持HTTP路由和路由分组。</li>\n<li>支持middleware和自定义middleware。</li>\n<li>支持自定义Log。</li>\n<li>支持binding和validation，支持自定义validator。可以bind如下参数：query、path、body、header、form。</li>\n<li>支持重定向。</li>\n<li>支持basic auth middleware。</li>\n<li>支持自定义HTTP配置。</li>\n<li>支持优雅关闭。</li>\n<li>支持HTTP2。</li>\n<li>支持设置和获取cookie。</li>\n</ul><h2>Gin是如何支持Web服务基础功能的？</h2><p>接下来，我们先通过一个具体的例子，看下Gin是如何支持Web服务基础功能的，后面再详细介绍这些功能的用法。</p><p>我们创建一个webfeature目录，用来存放示例代码。因为要演示HTTPS的用法，所以需要创建证书文件。具体可以分为两步。</p><p>第一步，执行以下命令创建证书：</p><pre><code>cat &lt;&lt; 'EOF' &gt; ca.pem\n-----BEGIN CERTIFICATE-----\nMIICSjCCAbOgAwIBAgIJAJHGGR4dGioHMA0GCSqGSIb3DQEBCwUAMFYxCzAJBgNV\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQxDzANBgNVBAMTBnRlc3RjYTAeFw0xNDExMTEyMjMxMjla\nFw0yNDExMDgyMjMxMjlaMFYxCzAJBgNVBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0\nYXRlMSEwHwYDVQQKExhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxDzANBgNVBAMT\nBnRlc3RjYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwEDfBV5MYdlHVHJ7\n+L4nxrZy7mBfAVXpOc5vMYztssUI7mL2/iYujiIXM+weZYNTEpLdjyJdu7R5gGUu\ng1jSVK/EPHfc74O7AyZU34PNIP4Sh33N+/A5YexrNgJlPY+E3GdVYi4ldWJjgkAd\nQah2PH5ACLrIIC6tRka9hcaBlIECAwEAAaMgMB4wDAYDVR0TBAUwAwEB/zAOBgNV\nHQ8BAf8EBAMCAgQwDQYJKoZIhvcNAQELBQADgYEAHzC7jdYlzAVmddi/gdAeKPau\nsPBG/C2HCWqHzpCUHcKuvMzDVkY/MP2o6JIW2DBbY64bO/FceExhjcykgaYtCH/m\noIU63+CFOTtR7otyQAWHqXa7q4SbCDlG7DyRFxqG0txPtGvy12lgldA2+RgcigQG\nDfcog5wrJytaQ6UA0wE=\n-----END CERTIFICATE-----\nEOF\n\ncat &lt;&lt; 'EOF' &gt; server.key\n-----BEGIN PRIVATE KEY-----\nMIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAOHDFScoLCVJpYDD\nM4HYtIdV6Ake/sMNaaKdODjDMsux/4tDydlumN+fm+AjPEK5GHhGn1BgzkWF+slf\n3BxhrA/8dNsnunstVA7ZBgA/5qQxMfGAq4wHNVX77fBZOgp9VlSMVfyd9N8YwbBY\nAckOeUQadTi2X1S6OgJXgQ0m3MWhAgMBAAECgYAn7qGnM2vbjJNBm0VZCkOkTIWm\nV10okw7EPJrdL2mkre9NasghNXbE1y5zDshx5Nt3KsazKOxTT8d0Jwh/3KbaN+YY\ntTCbKGW0pXDRBhwUHRcuRzScjli8Rih5UOCiZkhefUTcRb6xIhZJuQy71tjaSy0p\ndHZRmYyBYO2YEQ8xoQJBAPrJPhMBkzmEYFtyIEqAxQ/o/A6E+E4w8i+KM7nQCK7q\nK4JXzyXVAjLfyBZWHGM2uro/fjqPggGD6QH1qXCkI4MCQQDmdKeb2TrKRh5BY1LR\n81aJGKcJ2XbcDu6wMZK4oqWbTX2KiYn9GB0woM6nSr/Y6iy1u145YzYxEV/iMwff\nDJULAkB8B2MnyzOg0pNFJqBJuH29bKCcHa8gHJzqXhNO5lAlEbMK95p/P2Wi+4Hd\naiEIAF1BF326QJcvYKmwSmrORp85AkAlSNxRJ50OWrfMZnBgzVjDx3xG6KsFQVk2\nol6VhqL6dFgKUORFUWBvnKSyhjJxurlPEahV6oo6+A+mPhFY8eUvAkAZQyTdupP3\nXEFQKctGz+9+gKkemDp7LBBMEMBXrGTLPhpEfcjv/7KPdnFHYmhYeBTBnuVmTVWe\nF98XJ7tIFfJq\n-----END PRIVATE KEY-----\nEOF\n\ncat &lt;&lt; 'EOF' &gt; server.pem\n-----BEGIN CERTIFICATE-----\nMIICnDCCAgWgAwIBAgIBBzANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJBVTET\nMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50ZXJuZXQgV2lkZ2l0cyBQ\ndHkgTHRkMQ8wDQYDVQQDEwZ0ZXN0Y2EwHhcNMTUxMTA0MDIyMDI0WhcNMjUxMTAx\nMDIyMDI0WjBlMQswCQYDVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAOBgNV\nBAcTB0NoaWNhZ28xFTATBgNVBAoTDEV4YW1wbGUsIENvLjEaMBgGA1UEAxQRKi50\nZXN0Lmdvb2dsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOHDFSco\nLCVJpYDDM4HYtIdV6Ake/sMNaaKdODjDMsux/4tDydlumN+fm+AjPEK5GHhGn1Bg\nzkWF+slf3BxhrA/8dNsnunstVA7ZBgA/5qQxMfGAq4wHNVX77fBZOgp9VlSMVfyd\n9N8YwbBYAckOeUQadTi2X1S6OgJXgQ0m3MWhAgMBAAGjazBpMAkGA1UdEwQCMAAw\nCwYDVR0PBAQDAgXgME8GA1UdEQRIMEaCECoudGVzdC5nb29nbGUuZnKCGHdhdGVy\nem9vaS50ZXN0Lmdvb2dsZS5iZYISKi50ZXN0LnlvdXR1YmUuY29thwTAqAEDMA0G\nCSqGSIb3DQEBCwUAA4GBAJFXVifQNub1LUP4JlnX5lXNlo8FxZ2a12AFQs+bzoJ6\nhM044EDjqyxUqSbVePK0ni3w1fHQB5rY9yYC5f8G7aqqTY1QOhoUk8ZTSTRpnkTh\ny4jjdvTZeLDVBlueZUTDRmy2feY5aZIU18vFDK08dTG0A87pppuv1LNIR3loveU8\n-----END CERTIFICATE-----\nEOF\n</code></pre><p>第二步，创建main.go文件：</p><pre><code>package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n\t&quot;sync&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/gin-gonic/gin&quot;\n\t&quot;golang.org/x/sync/errgroup&quot;\n)\n\ntype Product struct {\n\tUsername    string    `json:&quot;username&quot; binding:&quot;required&quot;`\n\tName        string    `json:&quot;name&quot; binding:&quot;required&quot;`\n\tCategory    string    `json:&quot;category&quot; binding:&quot;required&quot;`\n\tPrice       int       `json:&quot;price&quot; binding:&quot;gte=0&quot;`\n\tDescription string    `json:&quot;description&quot;`\n\tCreatedAt   time.Time `json:&quot;createdAt&quot;`\n}\n\ntype productHandler struct {\n\tsync.RWMutex\n\tproducts map[string]Product\n}\n\nfunc newProductHandler() *productHandler {\n\treturn &amp;productHandler{\n\t\tproducts: make(map[string]Product),\n\t}\n}\n\nfunc (u *productHandler) Create(c *gin.Context) {\n\tu.Lock()\n\tdefer u.Unlock()\n\n\t// 1. 参数解析\n\tvar product Product\n\tif err := c.ShouldBindJSON(&amp;product); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n\t\treturn\n\t}\n\n\t// 2. 参数校验\n\tif _, ok := u.products[product.Name]; ok {\n\t\tc.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: fmt.Sprintf(&quot;product %s already exist&quot;, product.Name)})\n\t\treturn\n\t}\n\tproduct.CreatedAt = time.Now()\n\n\t// 3. 逻辑处理\n\tu.products[product.Name] = product\n\tlog.Printf(&quot;Register product %s success&quot;, product.Name)\n\n\t// 4. 返回结果\n\tc.JSON(http.StatusOK, product)\n}\n\nfunc (u *productHandler) Get(c *gin.Context) {\n\tu.Lock()\n\tdefer u.Unlock()\n\n\tproduct, ok := u.products[c.Param(&quot;name&quot;)]\n\tif !ok {\n\t\tc.JSON(http.StatusNotFound, gin.H{&quot;error&quot;: fmt.Errorf(&quot;can not found product %s&quot;, c.Param(&quot;name&quot;))})\n\t\treturn\n\t}\n\n\tc.JSON(http.StatusOK, product)\n}\n\nfunc router() http.Handler {\n\trouter := gin.Default()\n\tproductHandler := newProductHandler()\n\t// 路由分组、中间件、认证\n\tv1 := router.Group(&quot;/v1&quot;)\n\t{\n\t\tproductv1 := v1.Group(&quot;/products&quot;)\n\t\t{\n\t\t\t// 路由匹配\n\t\t\tproductv1.POST(&quot;&quot;, productHandler.Create)\n\t\t\tproductv1.GET(&quot;:name&quot;, productHandler.Get)\n\t\t}\n\t}\n\n\treturn router\n}\n\nfunc main() {\n\tvar eg errgroup.Group\n\n\t// 一进程多端口\n\tinsecureServer := &amp;http.Server{\n\t\tAddr:         &quot;:8080&quot;,\n\t\tHandler:      router(),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t}\n\n\tsecureServer := &amp;http.Server{\n\t\tAddr:         &quot;:8443&quot;,\n\t\tHandler:      router(),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t}\n\n\teg.Go(func() error {\n\t\terr := insecureServer.ListenAndServe()\n\t\tif err != nil &amp;&amp; err != http.ErrServerClosed {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\treturn err\n\t})\n\n\teg.Go(func() error {\n\t\terr := secureServer.ListenAndServeTLS(&quot;server.pem&quot;, &quot;server.key&quot;)\n\t\tif err != nil &amp;&amp; err != http.ErrServerClosed {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\treturn err\n\t})\n\n\tif err := eg.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n</code></pre><p>运行以上代码：</p><pre><code>$ go run main.go\n</code></pre><p>打开另外一个终端，请求HTTP接口：</p><pre><code># 创建产品\n$ curl -XPOST -H&quot;Content-Type: application/json&quot; -d'{&quot;username&quot;:&quot;colin&quot;,&quot;name&quot;:&quot;iphone12&quot;,&quot;category&quot;:&quot;phone&quot;,&quot;price&quot;:8000,&quot;description&quot;:&quot;cannot afford&quot;}' http://127.0.0.1:8080/v1/products\n{&quot;username&quot;:&quot;colin&quot;,&quot;name&quot;:&quot;iphone12&quot;,&quot;category&quot;:&quot;phone&quot;,&quot;price&quot;:8000,&quot;description&quot;:&quot;cannot afford&quot;,&quot;createdAt&quot;:&quot;2021-06-20T11:17:03.818065988+08:00&quot;}\n\n# 获取产品信息\n$ curl -XGET http://127.0.0.1:8080/v1/products/iphone12\n{&quot;username&quot;:&quot;colin&quot;,&quot;name&quot;:&quot;iphone12&quot;,&quot;category&quot;:&quot;phone&quot;,&quot;price&quot;:8000,&quot;description&quot;:&quot;cannot afford&quot;,&quot;createdAt&quot;:&quot;2021-06-20T11:17:03.818065988+08:00&quot;}\n</code></pre><p>示例代码存放地址为<a href=\"https://github.com/marmotedu/gopractise-demo/tree/master/gin/webfeature\">webfeature</a>。</p><p>另外，Gin项目仓库中也包含了很多使用示例，如果你想详细了解，可以参考 <a href=\"https://github.com/gin-gonic/examples\">gin examples</a>。</p><p>下面，我来详细介绍下Gin是如何支持Web服务基础功能的。</p><h3>HTTP/HTTPS支持</h3><p>因为Gin是基于net/http包封装的一个Web框架，所以它天然就支持HTTP/HTTPS。在上述代码中，通过以下方式开启一个HTTP服务：</p><pre><code>insecureServer := &amp;http.Server{\n\tAddr:         &quot;:8080&quot;,\n\tHandler:      router(),\n\tReadTimeout:  5 * time.Second,\n\tWriteTimeout: 10 * time.Second,\n}\n...\nerr := insecureServer.ListenAndServe()\n</code></pre><p>通过以下方式开启一个HTTPS服务：</p><pre><code>secureServer := &amp;http.Server{\n\tAddr:         &quot;:8443&quot;,\n\tHandler:      router(),\n\tReadTimeout:  5 * time.Second,\n\tWriteTimeout: 10 * time.Second,\n}\n...\nerr := secureServer.ListenAndServeTLS(&quot;server.pem&quot;, &quot;server.key&quot;)\n</code></pre><h3>JSON数据格式支持</h3><p>Gin支持多种数据通信格式，例如application/json、application/xml。可以通过<code>c.ShouldBindJSON</code>函数，将Body中的JSON格式数据解析到指定的Struct中，通过<code>c.JSON</code>函数返回JSON格式的数据。</p><h3>路由匹配</h3><p>Gin支持两种路由匹配规则。</p><p><strong>第一种匹配规则是精确匹配。</strong>例如，路由为/products/:name，匹配情况如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/df/11be05d7fe7f935e01725e2635f315df.jpg?wh=2248x1418\" alt=\"\"></p><p><strong>第二种匹配规则是模糊匹配。</strong>例如，路由为/products/*name，匹配情况如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/7b/b5ccd9924e53dd90a64af6002967b67b.jpg?wh=2248x1636\" alt=\"\"></p><h3>路由分组</h3><p>Gin通过Group函数实现了路由分组的功能。路由分组是一个非常常用的功能，可以将相同版本的路由分为一组，也可以将相同RESTful资源的路由分为一组。例如：</p><pre><code>v1 := router.Group(&quot;/v1&quot;, gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;}))\n{\n    productv1 := v1.Group(&quot;/products&quot;)\n    {\n        // 路由匹配\n        productv1.POST(&quot;&quot;, productHandler.Create)\n        productv1.GET(&quot;:name&quot;, productHandler.Get)\n    }\n\n    orderv1 := v1.Group(&quot;/orders&quot;)\n    {\n        // 路由匹配\n        orderv1.POST(&quot;&quot;, orderHandler.Create)\n        orderv1.GET(&quot;:name&quot;, orderHandler.Get)\n    }\n}\n\nv2 := router.Group(&quot;/v2&quot;, gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;}))\n{\n    productv2 := v2.Group(&quot;/products&quot;)\n    {\n        // 路由匹配\n        productv2.POST(&quot;&quot;, productHandler.Create)\n        productv2.GET(&quot;:name&quot;, productHandler.Get)\n    }\n}\n</code></pre><p>通过将路由分组，可以对相同分组的路由做统一处理。比如上面那个例子，我们可以通过代码</p><pre><code>v1 := router.Group(&quot;/v1&quot;, gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;}))\n</code></pre><p>给所有属于v1分组的路由都添加gin.BasicAuth中间件，以实现认证功能。中间件和认证，这里你先不用深究，下面讲高级功能的时候会介绍到。</p><h3>一进程多服务</h3><p>我们可以通过以下方式实现一进程多服务：</p><pre><code>var eg errgroup.Group\ninsecureServer := &amp;http.Server{...}\nsecureServer := &amp;http.Server{...}\n\neg.Go(func() error {\n\terr := insecureServer.ListenAndServe()\n\tif err != nil &amp;&amp; err != http.ErrServerClosed {\n\t\tlog.Fatal(err)\n\t}\n\treturn err\n})\neg.Go(func() error {\n\terr := secureServer.ListenAndServeTLS(&quot;server.pem&quot;, &quot;server.key&quot;)\n\tif err != nil &amp;&amp; err != http.ErrServerClosed {\n\t\tlog.Fatal(err)\n\t}\n\treturn err\n}\n\nif err := eg.Wait(); err != nil {\n\tlog.Fatal(err)\n})\n</code></pre><p>上述代码实现了两个相同的服务，分别监听在不同的端口。这里需要注意的是，为了不阻塞启动第二个服务，我们需要把ListenAndServe函数放在goroutine中执行，并且调用eg.Wait()来阻塞程序进程，从而让两个HTTP服务在goroutine中持续监听端口，并提供服务。</p><h3>参数解析、参数校验、逻辑处理、返回结果</h3><p>此外，Web服务还应该具有参数解析、参数校验、逻辑处理、返回结果4类功能，因为这些功能联系紧密，我们放在一起来说。</p><p>在productHandler的Create方法中，我们通过<code>c.ShouldBindJSON</code>来解析参数，接下来自己编写校验代码，然后将product信息保存在内存中（也就是业务逻辑处理），最后通过<code>c.JSON</code>返回创建的product信息。代码如下：</p><pre><code>func (u *productHandler) Create(c *gin.Context) {\n\tu.Lock()\n\tdefer u.Unlock()\n\n\t// 1. 参数解析\n\tvar product Product\n\tif err := c.ShouldBindJSON(&amp;product); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: err.Error()})\n\t\treturn\n\t}\n\n\t// 2. 参数校验\n\tif _, ok := u.products[product.Name]; ok {\n\t\tc.JSON(http.StatusBadRequest, gin.H{&quot;error&quot;: fmt.Sprintf(&quot;product %s already exist&quot;, product.Name)})\n\t\treturn\n\t}\n\tproduct.CreatedAt = time.Now()\n\n\t// 3. 逻辑处理\n\tu.products[product.Name] = product\n\tlog.Printf(&quot;Register product %s success&quot;, product.Name)\n\n\t// 4. 返回结果\n\tc.JSON(http.StatusOK, product)\n}\n</code></pre><p>那这个时候，你可能会问：HTTP的请求参数可以存在不同的位置，Gin是如何解析的呢？这里，我们先来看下HTTP有哪些参数类型。HTTP具有以下5种参数类型：</p><ul>\n<li>路径参数（path）。例如<code>gin.Default().GET(\"/user/:name\", nil)</code>， name就是路径参数。</li>\n<li>查询字符串参数（query）。例如<code>/welcome?firstname=Lingfei&amp;lastname=Kong</code>，firstname和lastname就是查询字符串参数。</li>\n<li>表单参数（form）。例如<code>curl -X POST -F 'username=colin' -F 'password=colin1234' http://mydomain.com/login</code>，username和password就是表单参数。</li>\n<li>HTTP头参数（header）。例如<code>curl -X POST -H 'Content-Type: application/json' -d '{\"username\":\"colin\",\"password\":\"colin1234\"}' http://mydomain.com/login</code>，Content-Type就是HTTP头参数。</li>\n<li>消息体参数（body）。例如<code>curl -X POST -H 'Content-Type: application/json' -d '{\"username\":\"colin\",\"password\":\"colin1234\"}' http://mydomain.com/login</code>，username和password就是消息体参数。</li>\n</ul><p>Gin提供了一些函数，来分别读取这些HTTP参数，每种类别会提供两种函数，一种函数可以直接读取某个参数的值，另外一种函数会把同类HTTP参数绑定到一个Go结构体中。比如，有如下路径参数：</p><pre><code>gin.Default().GET(&quot;/:name/:id&quot;, nil)\n</code></pre><p>我们可以直接读取每个参数：</p><pre><code>name := c.Param(&quot;name&quot;)\naction := c.Param(&quot;action&quot;)\n</code></pre><p>也可以将所有的路径参数，绑定到结构体中：</p><pre><code>type Person struct {\n    ID string `uri:&quot;id&quot; binding:&quot;required,uuid&quot;`\n    Name string `uri:&quot;name&quot; binding:&quot;required&quot;`\n}\n\nif err := c.ShouldBindUri(&amp;person); err != nil {\n    // normal code\n    return\n}\n</code></pre><p>Gin在绑定参数时，是通过结构体的tag来判断要绑定哪类参数到结构体中的。这里要注意，不同的HTTP参数有不同的结构体tag。</p><ul>\n<li>路径参数：uri。</li>\n<li>查询字符串参数：form。</li>\n<li>表单参数：form。</li>\n<li>HTTP头参数：header。</li>\n<li>消息体参数：会根据Content-Type，自动选择使用json或者xml，也可以调用ShouldBindJSON或者ShouldBindXML直接指定使用哪个tag。</li>\n</ul><p>针对每种参数类型，Gin都有对应的函数来获取和绑定这些参数。这些函数都是基于如下两个函数进行封装的：</p><ol>\n<li>ShouldBindWith(obj interface{}, b binding.Binding) error</li>\n</ol><p>非常重要的一个函数，很多ShouldBindXXX函数底层都是调用ShouldBindWith函数来完成参数绑定的。该函数会根据传入的绑定引擎，将参数绑定到传入的结构体指针中，<strong>如果绑定失败，只返回错误内容，但不终止HTTP请求。</strong>ShouldBindWith支持多种绑定引擎，例如 binding.JSON、binding.Query、binding.Uri、binding.Header等，更详细的信息你可以参考 <a href=\"https://github.com/gin-gonic/gin/blob/v1.7.2/binding/binding.go#L72\">binding.go</a>。</p><ol start=\"2\">\n<li>MustBindWith(obj interface{}, b binding.Binding) error</li>\n</ol><p>这是另一个非常重要的函数，很多BindXXX函数底层都是调用MustBindWith函数来完成参数绑定的。该函数会根据传入的绑定引擎，将参数绑定到传入的结构体指针中，<strong>如果绑定失败，返回错误并终止请求，返回HTTP 400错误。</strong>MustBindWith所支持的绑定引擎跟ShouldBindWith函数一样。</p><p>Gin基于ShouldBindWith和MustBindWith这两个函数，又衍生出很多新的Bind函数。这些函数可以满足不同场景下获取HTTP参数的需求。Gin提供的函数可以获取5个类别的HTTP参数。</p><ul>\n<li>路径参数：ShouldBindUri、BindUri；</li>\n<li>查询字符串参数：ShouldBindQuery、BindQuery；</li>\n<li>表单参数：ShouldBind；</li>\n<li>HTTP头参数：ShouldBindHeader、BindHeader；</li>\n<li>消息体参数：ShouldBindJSON、BindJSON等。</li>\n</ul><p>每个类别的Bind函数，详细信息你可以参考<a href=\"https://github.com/marmotedu/geekbang-go/blob/master/Gin%E6%8F%90%E4%BE%9B%E7%9A%84Bind%E5%87%BD%E6%95%B0.md\">Gin提供的Bind函数</a>。</p><p>这里要注意，Gin并没有提供类似ShouldBindForm、BindForm这类函数来绑定表单参数，但我们可以通过ShouldBind来绑定表单参数。当HTTP方法为GET时，ShouldBind只绑定Query类型的参数；当HTTP方法为POST时，会先检查content-type是否是json或者xml，如果不是，则绑定Form类型的参数。</p><p>所以，ShouldBind可以绑定Form类型的参数，但前提是HTTP方法是POST，并且content-type不是application/json、application/xml。</p><p>在Go项目开发中，我建议使用ShouldBindXXX，这样可以确保我们设置的HTTP Chain（Chain可以理解为一个HTTP请求的一系列处理插件）能够继续被执行。</p><h2>Gin是如何支持Web服务高级功能的？</h2><p>上面介绍了Web服务的基础功能，这里我再来介绍下高级功能。Web服务可以具备多个高级功能，但比较核心的高级功能是中间件、认证、RequestID、跨域和优雅关停。</p><h3>中间件</h3><p>Gin支持中间件，HTTP请求在转发到实际的处理函数之前，会被一系列加载的中间件进行处理。在中间件中，可以解析HTTP请求做一些逻辑处理，例如：跨域处理或者生成X-Request-ID并保存在context中，以便追踪某个请求。处理完之后，可以选择中断并返回这次请求，也可以选择将请求继续转交给下一个中间件处理。当所有的中间件都处理完之后，请求才会转给路由函数进行处理。具体流程如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/80/f0783cb9ee8cffa969f846ebe8eae880.jpg?wh=2248x1655\" alt=\"\"></p><p>通过中间件，可以实现对所有请求都做统一的处理，提高开发效率，并使我们的代码更简洁。但是，因为所有的请求都需要经过中间件的处理，可能会增加请求延时。对于中间件特性，我有如下建议：</p><ul>\n<li>中间件做成可加载的，通过配置文件指定程序启动时加载哪些中间件。</li>\n<li>只将一些通用的、必要的功能做成中间件。</li>\n<li>在编写中间件时，一定要保证中间件的代码质量和性能。</li>\n</ul><p>在Gin中，可以通过gin.Engine的Use方法来加载中间件。中间件可以加载到不同的位置上，而且不同的位置作用范围也不同，例如：</p><pre><code>router := gin.New()\nrouter.Use(gin.Logger(), gin.Recovery()) // 中间件作用于所有的HTTP请求\nv1 := router.Group(&quot;/v1&quot;).Use(gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;})) // 中间件作用于v1 group\nv1.POST(&quot;/login&quot;, Login).Use(gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;})) //中间件只作用于/v1/login API接口\n</code></pre><p>Gin框架本身支持了一些中间件。</p><ul>\n<li><strong>gin.Logger()：</strong>Logger中间件会将日志写到gin.DefaultWriter，gin.DefaultWriter默认为 os.Stdout。</li>\n<li><strong>gin.Recovery()：</strong>Recovery中间件可以从任何panic恢复，并且写入一个500状态码。</li>\n<li><strong>gin.CustomRecovery(handle gin.RecoveryFunc)：</strong>类似Recovery中间件，但是在恢复时还会调用传入的handle方法进行处理。</li>\n<li><strong>gin.BasicAuth()：</strong>HTTP请求基本认证（使用用户名和密码进行认证）。</li>\n</ul><p>另外，Gin还支持自定义中间件。中间件其实是一个函数，函数类型为gin.HandlerFunc，HandlerFunc底层类型为func(*Context)。如下是一个Logger中间件的实现：</p><pre><code>package main\n\nimport (\n\t&quot;log&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/gin-gonic/gin&quot;\n)\n\nfunc Logger() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tt := time.Now()\n\n\t\t// 设置变量example\n\t\tc.Set(&quot;example&quot;, &quot;12345&quot;)\n\n\t\t// 请求之前\n\n\t\tc.Next()\n\n\t\t// 请求之后\n\t\tlatency := time.Since(t)\n\t\tlog.Print(latency)\n\n\t\t// 访问我们发送的状态\n\t\tstatus := c.Writer.Status()\n\t\tlog.Println(status)\n\t}\n}\n\nfunc main() {\n\tr := gin.New()\n\tr.Use(Logger())\n\n\tr.GET(&quot;/test&quot;, func(c *gin.Context) {\n\t\texample := c.MustGet(&quot;example&quot;).(string)\n\n\t\t// it would print: &quot;12345&quot;\n\t\tlog.Println(example)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(&quot;:8080&quot;)\n}\n</code></pre><p>另外，还有很多开源的中间件可供我们选择，我把一些常用的总结在了表格里：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/10/67137697a09d9f37bd87a81bf322f510.jpg?wh=1832x1521\" alt=\"\"></p><h3>认证、RequestID、跨域</h3><p>认证、RequestID、跨域这三个高级功能，都可以通过Gin的中间件来实现，例如：</p><pre><code>router := gin.New()\n\n// 认证\nrouter.Use(gin.BasicAuth(gin.Accounts{&quot;foo&quot;: &quot;bar&quot;, &quot;colin&quot;: &quot;colin404&quot;}))\n\n// RequestID\nrouter.Use(requestid.New(requestid.Config{\n    Generator: func() string {\n        return &quot;test&quot;\n    },\n}))\n\n// 跨域\n// CORS for https://foo.com and https://github.com origins, allowing:\n// - PUT and PATCH methods\n// - Origin header\n// - Credentials share\n// - Preflight requests cached for 12 hours\nrouter.Use(cors.New(cors.Config{\n    AllowOrigins:     []string{&quot;https://foo.com&quot;},\n    AllowMethods:     []string{&quot;PUT&quot;, &quot;PATCH&quot;},\n    AllowHeaders:     []string{&quot;Origin&quot;},\n    ExposeHeaders:    []string{&quot;Content-Length&quot;},\n    AllowCredentials: true,\n    AllowOriginFunc: func(origin string) bool {\n        return origin == &quot;https://github.com&quot;\n    },\n    MaxAge: 12 * time.Hour,\n}))\n</code></pre><h3>优雅关停</h3><p>Go项目上线后，我们还需要不断迭代来丰富项目功能、修复Bug等，这也就意味着，我们要不断地重启Go服务。对于HTTP服务来说，如果访问量大，重启服务的时候可能还有很多连接没有断开，请求没有完成。如果这时候直接关闭服务，这些连接会直接断掉，请求异常终止，这就会对用户体验和产品口碑造成很大影响。因此，这种关闭方式不是一种优雅的关闭方式。</p><p>这时候，我们期望HTTP服务可以在处理完所有请求后，正常地关闭这些连接，也就是优雅地关闭服务。我们有两种方法来优雅关闭HTTP服务，分别是借助第三方的Go包和自己编码实现。</p><p>方法一：借助第三方的Go包</p><p>如果使用第三方的Go包来实现优雅关闭，目前用得比较多的包是<a href=\"https://github.com/fvbock/endless\">fvbock/endless</a>。我们可以使用fvbock/endless来替换掉net/http的ListenAndServe方法，例如：</p><pre><code>router := gin.Default()\nrouter.GET(&quot;/&quot;, handler)\n// [...]\nendless.ListenAndServe(&quot;:4242&quot;, router)\n</code></pre><p>方法二：编码实现</p><p>借助第三方包的好处是可以稍微减少一些编码工作量，但缺点是引入了一个新的依赖包，因此我更倾向于自己编码实现。Go 1.8版本或者更新的版本，http.Server内置的Shutdown方法，已经实现了优雅关闭。下面是一个示例：</p><pre><code>// +build go1.8\n\npackage main\n\nimport (\n\t&quot;context&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;os/signal&quot;\n\t&quot;syscall&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/gin-gonic/gin&quot;\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(&quot;/&quot;, func(c *gin.Context) {\n\t\ttime.Sleep(5 * time.Second)\n\t\tc.String(http.StatusOK, &quot;Welcome Gin Server&quot;)\n\t})\n\n\tsrv := &amp;http.Server{\n\t\tAddr:    &quot;:8080&quot;,\n\t\tHandler: router,\n\t}\n\n\t// Initializing the server in a goroutine so that\n\t// it won't block the graceful shutdown handling below\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != nil &amp;&amp; err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(&quot;listen: %s\\n&quot;, err)\n\t\t}\n\t}()\n\n\t// Wait for interrupt signal to gracefully shutdown the server with\n\t// a timeout of 5 seconds.\n\tquit := make(chan os.Signal, 1)\n\t// kill (no param) default send syscall.SIGTERM\n\t// kill -2 is syscall.SIGINT\n\t// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t&lt;-quit\n\tlog.Println(&quot;Shutting down server...&quot;)\n\n\t// The context is used to inform the server it has 5 seconds to finish\n\t// the request it is currently handling\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Fatal(&quot;Server forced to shutdown:&quot;, err)\n\t}\n\n\tlog.Println(&quot;Server exiting&quot;)\n}\n</code></pre><p>上面的示例中，需要把srv.ListenAndServe放在goroutine中执行，这样才不会阻塞到srv.Shutdown函数。因为我们把srv.ListenAndServe放在了goroutine中，所以需要一种可以让整个进程常驻的机制。</p><p>这里，我们借助了有缓冲channel，并且调用signal.Notify函数将该channel绑定到SIGINT、SIGTERM信号上。这样，收到SIGINT、SIGTERM信号后，quilt通道会被写入值，从而结束阻塞状态，程序继续运行，执行srv.Shutdown(ctx)，优雅关停HTTP服务。</p><h2>总结</h2><p>今天我们主要学习了Web服务的核心功能，以及如何开发这些功能。在实际的项目开发中， 我们一般会使用基于net/http包进行封装的优秀开源Web框架。</p><p>当前比较火的Go Web框架有 Gin、Beego、Echo、Revel、Martini。你可以根据需要进行选择。我比较推荐Gin，Gin也是目前比较受欢迎的Web框架。Gin Web框架支持Web服务的很多基础功能，例如 HTTP/HTTPS、JSON格式的数据、路由分组和匹配、一进程多服务等。</p><p>另外，Gin还支持Web服务的一些高级功能，例如 中间件、认证、RequestID、跨域和优雅关停等。</p><h2>课后练习</h2><ol>\n<li>使用 Gin 框架编写一个简单的Web服务，要求该Web服务可以解析参数、校验参数，并进行一些简单的业务逻辑处理，最终返回处理结果。欢迎在留言区分享你的成果，或者遇到的问题。</li>\n<li>思考下，如何给iam-apiserver的/healthz接口添加一个限流中间件，用来限制请求/healthz的频率。</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"23 | 应用构建实战：如何构建一个优秀的企业应用框架？","id":396523},"right":{"article_title":"25 | 认证机制：应用程序如何进行访问认证？","id":398410}},"comments":[{"had_liked":false,"id":303389,"user_name":"huntersudo","can_delete":false,"product_type":"c1","uid":1001843,"ip_address":"","ucode":"3DABEEF17ACBBF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIrTK5JjKyCNaSKN2MhnM2X0IuNpcoDoyn0OUOqYgdEb0brT9QgibAKyjBP3R3x0W3Jw/132","comment_is_top":false,"comment_ctime":1626765438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40281471102","product_id":100079601,"comment_content":"Gin的示例和代码看了很多，知道这样写，有时候就不知道为啥这样写，老师的文章不少地方给了解释，给力给力！！","like_count":10},{"had_liked":false,"id":311158,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1631089804,"is_pvip":true,"replies":[{"id":"112823","content":"有关系的，通过&lt;-quit阻塞程序继续执行，当收到关停信号时，会停止阻塞，执行后面的srv.Shutdown代码，srv.Shutdown可以优雅关停HTTP服务。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1631178309,"ip_address":"","comment_id":311158,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18810958988","product_id":100079601,"comment_content":"老师，没有理解编码实现优雅关闭服务的程序。这段程序和我们期望的：【期望 HTTP 服务可以在处理完所有请求后，正常地关闭这些连接，也就是优雅地关闭服务】有什么关系？","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526500,"discussion_content":"有关系的，通过&amp;lt;-quit阻塞程序继续执行，当收到关停信号时，会停止阻塞，执行后面的srv.Shutdown代码，srv.Shutdown可以优雅关停HTTP服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631178309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1489545,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4Lprf2mIWpJOPibgibbFCicMtp5bpIibyLFOnyOhnBGbusrLZC0frG0FGWqdcdCkcKunKxqiaOHvXbCFE7zKJ8TmvIA/132","nickname":"Geek_c2089d","note":"","ucode":"C66D345042525F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393825,"discussion_content":"主要体现出的是，在http服务被kill后，有一个5*time.second的延时关闭的时间，等待之前未完成的请求有一个完成的时间。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1631611870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310276,"user_name":"jxlwqq","can_delete":false,"product_type":"c1","uid":1076347,"ip_address":"","ucode":"94AEEEEB55C6AA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5suA7q5mM40ULTY5OlQpoerPRMQD8NcMbKxDHhNmjQNUCngkSJEzRvMVDibAHw2whGZxAFlibzribOA/132","comment_is_top":false,"comment_ctime":1630575676,"is_pvip":true,"replies":[{"id":"112817","content":"感谢反馈，已更新","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1631176688,"ip_address":"","comment_id":310276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18810444860","product_id":100079601,"comment_content":"signal.Notify 需要使用 buffered channel 哦<br><br>```go<br>c := make(chan os.Signal, 1)<br>```<br><br>参考：https:&#47;&#47;blog.wu-boy.com&#47;2021&#47;03&#47;why-use-buffered-channel-in-signal-notify&#47;","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526181,"discussion_content":"感谢反馈，已更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631176688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304252,"user_name":"Neroldy","can_delete":false,"product_type":"c1","uid":2487789,"ip_address":"","ucode":"FD6EF1AAC00FC5","user_header":"https://static001.geekbang.org/account/avatar/00/25/f5/ed/d23daf19.jpg","comment_is_top":false,"comment_ctime":1627305753,"is_pvip":false,"replies":[{"id":"110221","content":"是的，RLock更好","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627597850,"ip_address":"","comment_id":304252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14512207641","product_id":100079601,"comment_content":"Get handler函数用Rlock会不会更合适？因为好像只有对product的读操作而没有写操作。","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523993,"discussion_content":"是的，RLock更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627597850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313495,"user_name":"wei 丶","can_delete":false,"product_type":"c1","uid":1234929,"ip_address":"","ucode":"331DE893F75B95","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/f1/ce10759d.jpg","comment_is_top":false,"comment_ctime":1632465667,"is_pvip":false,"replies":[{"id":"113702","content":"cfssl gencert -initca ca-csr.json | cfssljson -bare ca<br><br>这个命令生成的ca-key.pem其实就是server.key了","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632761385,"ip_address":"","comment_id":313495,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5927432963","product_id":100079601,"comment_content":"老师想问下server.key这个用cfssl怎么生成呀？ 我往回翻了下只看到了cfssl生成的 .pem 证书文件 🙈","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527370,"discussion_content":"cfssl gencert -initca ca-csr.json | cfssljson -bare ca\n\n这个命令生成的ca-key.pem其实就是server.key了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632761385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234929,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/f1/ce10759d.jpg","nickname":"wei 丶","note":"","ucode":"331DE893F75B95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397470,"discussion_content":"通过cfssl生成的pem的私钥也可以用  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632625625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312677,"user_name":"LosinGrip","can_delete":false,"product_type":"c1","uid":2538464,"ip_address":"","ucode":"7928A6DD922007","user_header":"https://static001.geekbang.org/account/avatar/00/26/bb/e0/29dc8a06.jpg","comment_is_top":false,"comment_ctime":1631937603,"is_pvip":false,"replies":[{"id":"113677","content":"确认下你代码中：insecureServer.Addr是否是8080。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632759336,"ip_address":"","comment_id":312677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926904899","product_id":100079601,"comment_content":"curl -XGET http:&#47;&#47;127.0.0.1:8080&#47;v1&#47;products&#47;iphone12<br>获取如下 <br>Client sent an HTTP request to an HTTPS server.<br>什么原因","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527075,"discussion_content":"确认下你代码中：insecureServer.Addr是否是8080。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632759336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307119,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628870092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923837388","product_id":100079601,"comment_content":"写web服务，就用Gin框架。<br>从需求出发，介绍Gin框架的核心功能，即成体系又便于理解。","like_count":1},{"had_liked":false,"id":358007,"user_name":"🌀🐑hfy🐣","can_delete":false,"product_type":"c1","uid":1254367,"ip_address":"广东","ucode":"8A7E4BDC46CB35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/df/367f2c75.jpg","comment_is_top":false,"comment_ctime":1663828902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663828902","product_id":100079601,"comment_content":"请问老师觉得go-zero怎样？值得学习吗？","like_count":0},{"had_liked":false,"id":355565,"user_name":"tajizhijia","can_delete":false,"product_type":"c1","uid":1053021,"ip_address":"天津","ucode":"8CF09E5EE797FB","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/5d/db3c1401.jpg","comment_is_top":false,"comment_ctime":1661499738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661499738","product_id":100079601,"comment_content":"在goroute里log.Fatal()之后程序不就推出了么？","like_count":0},{"had_liked":false,"id":348688,"user_name":"扶幽","can_delete":false,"product_type":"c1","uid":1322612,"ip_address":"","ucode":"1400EDFF8970D3","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/74/88c613e0.jpg","comment_is_top":false,"comment_ctime":1655303145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655303145","product_id":100079601,"comment_content":"真像老母亲忙前忙后，把饭喂到嘴边吃。专栏很赞~","like_count":0},{"had_liked":false,"id":347413,"user_name":"Bynow","can_delete":false,"product_type":"c1","uid":2735072,"ip_address":"","ucode":"1E4F3ADD65CF18","user_header":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","comment_is_top":false,"comment_ctime":1654001286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654001286","product_id":100079601,"comment_content":" c.JSON(http.StatusNotFound, gin.H{&quot;error&quot;: fmt.Errorf(&quot;can not found product %s&quot;, c.Param(&quot;name&quot;))}) 这行代码是错误的，应该是Sprintf","like_count":0},{"had_liked":false,"id":327105,"user_name":"平常心","can_delete":false,"product_type":"c1","uid":1071269,"ip_address":"","ucode":"39080792216FE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/a5/6b5e1525.jpg","comment_is_top":false,"comment_ctime":1639919307,"is_pvip":false,"replies":[{"id":"119701","content":"有报什么错吗","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1640825152,"ip_address":"","comment_id":327105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639919307","product_id":100079601,"comment_content":"如何用 curl 来访问 https的 服务呢？ ca.pem 放到本机的证书库里，运行了一下，还是跑不通 https的服务呢。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542644,"discussion_content":"有报什么错吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640825152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323577,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1637998079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637998079","product_id":100079601,"comment_content":"总结：<br>1. web服务的常见功能：路由匹配（精确匹配和模糊匹配）、路由分组、参数解析；参数校验；逻辑处理；返回结果。<br>2. 高级功能有：中间件、优雅关停。通过中间件技术，可以实现认证、RequestID、跨域等常见功能。<br>3. 除了路由匹配和路由分组等基础功能外，Gin的功能还包括：针对不同位置的HTTP参数进行解析；有很多开源的中间件，可以复用。<br>4. 需要注意Web服务的优雅启动和停止。","like_count":0},{"had_liked":false,"id":316541,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1634377214,"is_pvip":true,"replies":[{"id":"114952","content":"还是不能的哈。因为表单和Body本就是不同的参数","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634744437,"ip_address":"","comment_id":316541,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634377214","product_id":100079601,"comment_content":"「表单参数 form」是否可以和「请求消息体参数 body」合并在一起，因为后者是包含前者的。其请求内容都是在请求体部分，而且格式有多种，比如 application&#47;json、application&#47;xml、text&#47;plain，再比如就是 application&#47;form。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528406,"discussion_content":"还是不能的哈。因为表单和Body本就是不同的参数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634744437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304005,"user_name":"ling.zeng","can_delete":false,"product_type":"c1","uid":1028615,"ip_address":"","ucode":"A78CF6D519BFF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/07/7711d239.jpg","comment_is_top":false,"comment_ctime":1627181941,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627181941","product_id":100079601,"comment_content":"老师您可太赞了。","like_count":0}]}