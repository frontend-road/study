{"id":257747,"title":"04 | 在OAuth 2.0中，如何使用JWT结构化令牌？","content":"<p>你好，我是王新栋。</p><p>在上一讲，我们讲到了授权服务的核心就是<strong>颁发访问令牌</strong>，而OAuth 2.0规范并没有约束访问令牌内容的生成规则，只要符合唯一性、不连续性、不可猜性就够了。这就意味着，我们可以灵活选择令牌的形式，既可以是没有内部结构且不包含任何信息含义的随机字符串，也可以是具有内部结构且包含有信息含义的字符串。</p><p>随机字符串这样的方式我就不再介绍了，之前课程中我们生成令牌的方式都是默认一个随机字符串。而在结构化令牌这方面，目前用得最多的就是JWT令牌了。</p><p>接下来，我就要和你详细讲讲，JWT是什么、原理是怎样的、优势是什么，以及怎么使用，同时我还会讲到令牌生命周期的问题。</p><h2>JWT结构化令牌</h2><p>关于什么是JWT，官方定义是这样描述的：</p><blockquote>\n<p>JSON Web Token（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。</p>\n</blockquote><p>这个定义是不是很费解？我们简单理解下，JWT就是用一种结构化封装的方式来生成token的技术。结构化后的token可以被赋予非常丰富的含义，这也是它与原先毫无意义的、随机的字符串形式token的最大区别。</p><p>结构化之后，令牌本身就可以被“塞进”一些有用的信息，比如小明为小兔软件进行了授权的信息、授权的范围信息等。或者，你可以形象地将其理解为这是一种“自编码”的能力，而这些恰恰是无结构化令牌所不具备的。</p><!-- [[[read_end]]] --><p>JWT这种结构化体可以分为HEADER（头部）、PAYLOAD（数据体）和SIGNATURE（签名）三部分。经过签名之后的JWT的整体结构，是被<strong>句点符号</strong>分割的三段内容，结构为 header.payload.signature 。比如下面这个示例：</p><pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\neyJzdWIiOiJVU0VSVEVTVCIsImV4cCI6MTU4NDEwNTc5MDcwMywiaWF0IjoxNTg0MTA1OTQ4MzcyfQ.\n1HbleXbvJ_2SW8ry30cXOBGR9FW4oSWBd3PWaWKsEXE\n</code></pre><p><strong>注意：JWT内部没有换行，这里只是为了展示方便，才将其用三行来表示。</strong></p><p>你可能会说，这个JWT令牌看起来也是毫无意义的、随机的字符串啊。确实，你直接去看这个字符串是没啥意义，但如果你把它拷贝到<a href=\"https://jwt.io/\">https://jwt.io/</a> 网站的在线校验工具中，就可以看到解码之后的数据：</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/80/aa855e4fd4b15f2f5262e7a7f5af3080.png?wh=1606*842\" alt=\"\" title=\"图1 由在线校验工具解码后的JWT令牌\"></p><p>再看解码后的数据，你是不是发现它跟随机的字符串不一样了呢。很显然，现在呈现出来的就是结构化的内容了。接下来，我就具体和你说说JWT的这三部分。</p><p><strong>HEADER</strong>表示装载令牌类型和算法等信息，是JWT的头部。其中，typ 表示第二部分PAYLOAD是JWT类型，alg 表示使用HS256对称签名的算法。</p><p><strong>PAYLOAD</strong>表示是JWT的数据体，代表了一组数据。其中，sub（令牌的主体，一般设为资源拥有者的唯一标识）、exp（令牌的过期时间戳）、iat（令牌颁发的时间戳）是JWT规范性的声明，代表的是常规性操作。更多的通用声明，你可以参考<a href=\"https://tools.ietf.org/html/rfc7519\">RFC 7519开放标准</a>。不过，在一个JWT内可以包含一切合法的JSON格式的数据，也就是说，PAYLOAD表示的一组数据允许我们自定义声明。</p><p><strong>SIGNATURE</strong>表示对JWT信息的签名。那么，它有什么作用呢？我们可能认为，有了HEADER和PAYLOAD两部分内容后，就可以让令牌携带信息了，似乎就可以在网络中传输了，但是在网络中传输这样的信息体是不安全的，因为你在“裸奔”啊。所以，我们还需要对其进行加密签名处理，而SIGNATURE就是对信息的签名结果，当受保护资源接收到第三方软件的签名后需要验证令牌的签名是否合法。</p><p>现在，我们知道了JWT的结构以及每部分的含义，那么具体到OAuth 2.0的授权流程中，JWT令牌是如何被使用的呢？在讲如何使用之前呢，我先和你说说“令牌内检”。</p><h2>令牌内检</h2><p>什么是令牌内检呢？授权服务颁发令牌，受保护资源服务就要验证令牌。同时呢，授权服务和受保护资源服务，它俩是“一伙的”，还记得我之前在<a href=\"https://time.geekbang.org/column/article/256196\">第2课</a>讲过的吧。受保护资源来调用授权服务提供的检验令牌的服务，<strong>我们把这种校验令牌的方式称为令牌内检。</strong></p><p>有时候授权服务依赖一个数据库，然后受保护资源服务也依赖这个数据库，也就是我们说的“共享数据库”。不过，在如今已经成熟的分布式以及微服务的环境下，不同的系统之间是依靠<strong>服务</strong>而<strong>不是数据库</strong>来通信了，比如授权服务给受保护资源服务提供一个RPC服务。如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/bf/963bb5dfc504c700fce24c8aac0dd2bf.png?wh=936*612\" alt=\"\" title=\"图2 授权服务提供接口服务，供受保护资源校验令牌\"></p><p>那么，在有了JWT令牌之后，我们就多了一种选择，因为JWT令牌本身就包含了之前所要依赖数据库或者依赖RPC服务才能拿到的信息，比如我上面提到的哪个用户为哪个软件进行了授权等信息。</p><p>接下来就让我们看看有了JWT令牌之后，整体的内检流程会变成什么样子。</p><h2>JWT是如何被使用的？</h2><p>有了JWT令牌之后的通信方式，就如下面的图3所展示的那样了，<strong>授权服务“扔出”一个令牌，受保护资源服务“接住”这个令牌，然后自己开始解析令牌本身所包含的信息就可以了，而不需要再去查询数据库或者请求RPC服务</strong>。这样也实现了我们上面说的令牌内检。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/39/1a4cf53349aeb5d588e27c608e06d539.png?wh=998*610\" alt=\"\" title=\"图3 受保护资源服务可直接解析JWT令牌\"></p><p>在上面这幅图中呢，为了更能突出JWT令牌的位置，我简化了逻辑关系。实际上，授权服务颁发了JWT令牌后给到了小兔软件，小兔软件拿着JWT令牌来请求受保护资源服务，也就是小明在京东店铺的订单。很显然，JWT令牌需要在公网上做传输。所以在传输过程中，JWT令牌需要进行Base64编码以防止乱码，同时还需要进行签名及加密处理来防止数据信息泄露。</p><p>如果是我们自己处理这些编码、加密等工作的话，就会增加额外的编码负担。好在，我们可以借助一些开源的工具来帮助我们处理这些工作。比如，我在下面的Demo中，给出了开源JJWT（Java JWT）的使用方法。</p><p>JJWT是目前Java开源的、比较方便的JWT工具，封装了Base64URL编码和对称HMAC、非对称RSA的一系列签名算法。使用JJWT，我们只关注上层的业务逻辑实现，而无需关注编解码和签名算法的具体实现，这类开源工具可以做到“开箱即用”。</p><p>这个Demo的代码如下，使用JJWT可以很方便地生成一个经过签名的JWT令牌，以及解析一个JWT令牌。</p><pre><code>String sharedTokenSecret=&quot;hellooauthhellooauthhellooauthhellooauth&quot;;//密钥\nKey key = new SecretKeySpec(sharedTokenSecret.getBytes(),\n                SignatureAlgorithm.HS256.getJcaName());\n\n//生成JWT令牌\nString jwts=\nJwts.builder().setHeaderParams(headerMap).setClaims(payloadMap).signWith(key,SignatureAlgorithm.HS256).compact()\n\n//解析JWT令牌\nJws&lt;Claims&gt; claimsJws =Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jwts);\nJwsHeader header = claimsJws.getHeader();\nClaims body = claimsJws.getBody();  \n</code></pre><p>使用JJWT解析JWT令牌时包含了验证签名的动作，如果签名不正确就会抛出异常信息。我们可以借助这一点来对签名做校验，从而判断是否是一个没有被伪造过的、合法的JWT令牌。</p><p>异常信息，一般是如下的样子：</p><pre><code>JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.\n</code></pre><p>以上就是借助开源工具，将JWT令牌应用到授权服务流程中的方法了。到这里，你是不是一直都有一个疑问：为什么要绕这么大一个弯子，使用JWT，而不是使用没有啥内部结构，也不包含任何信息的随机字符串呢？JWT到底有什么好处？</p><h2>为什么要使用JWT令牌？</h2><p>别急，我这就和你总结下使用JWT格式令牌的三大好处。</p><p>第一，<strong>JWT的核心思想，就是用计算代替存储，有些 “时间换空间” 的 “味道”</strong>。当然，这种经过计算并结构化封装的方式，也减少了“共享数据库” 因远程调用而带来的网络传输消耗，所以也有可能是节省时间的。</p><p>第二，也是一个重要特性，是加密。因为JWT令牌内部已经包含了重要的信息，所以在整个传输过程中都必须被要求是密文传输的，<strong>这样被强制要求了加密也就保障了传输过程中的安全性</strong>。这里的加密算法，既可以是对称加密，也可以是非对称加密。</p><p>第三，<strong>使用JWT格式的令牌，有助于增强系统的可用性和可伸缩性</strong>。这一点要怎么理解呢？我们前面讲到了，这种JWT格式的令牌，通过“自编码”的方式包含了身份验证需要的信息，不再需要服务端进行额外的存储，所以每次的请求都是无状态会话。这就符合了我们尽可能遵循无状态架构设计的原则，也就是增强了系统的可用性和伸缩性。</p><p>但，万物皆有两面性，JWT令牌也有缺点。</p><p>JWT格式令牌的最大问题在于 “覆水难收”，也就是说，没办法在使用过程中修改令牌状态。我们还是借助小明使用小兔软件例子，先停下来想一下。</p><p>小明在使用小兔软件的时候，是不是有可能因为某种原因修改了在京东的密码，或者是不是有可能突然取消了给小兔的授权？这时候，令牌的状态是不是就要有相应的变更，将原来对应的令牌置为无效。</p><p>但，使用JWT格式令牌时，每次颁发的令牌都不会在服务端存储，这样我们要改变令牌状态的时候，就无能为力了。因为服务端并没有存储这个JWT格式的令牌。这就意味着，JWT令牌在有效期内，是可以“横行无止”的。</p><p>为了解决这个问题，我们可以把JWT令牌存储到远程的分布式内存数据库中吗？显然不能，因为这会违背JWT的初衷（将信息通过结构化的方式存入令牌本身）。因此，我们通常会有两种做法：</p><ul>\n<li>一是，将每次生成JWT令牌时的秘钥粒度缩小到用户级别，也就是一个用户一个秘钥。这样，当用户取消授权或者修改密码后，就可以让这个密钥一起修改。一般情况下，这种方案需要配套一个单独的密钥管理服务。</li>\n<li>二是，在不提供用户主动取消授权的环境里面，如果只考虑到修改密码的情况，那么我们就可以把用户密码作为JWT的密钥。当然，这也是用户粒度级别的。这样一来，用户修改密码也就相当于修改了密钥。</li>\n</ul><h2>令牌的生命周期</h2><p>我刚才讲了JWT令牌有效期的问题，讲到了它的失效处理，另外咱们在<a href=\"https://time.geekbang.org/column/article/257101\">第3讲</a>中提到，授权服务颁发访问令牌的时候，都会设置一个过期时间，其实这都属于令牌的生命周期的管理问题。接下来，我便向你讲一讲令牌的生命周期。</p><p>万物皆有周期，这是自然规律，令牌也不例外，无论是JWT结构化令牌还是普通的令牌。它们都有有效期，只不过，JWT令牌可以把有效期的信息存储在本身的结构体中。</p><p>具体到OAuth 2.0的令牌生命周期，通常会有三种情况。</p><p>第一种情况是令牌的自然过期过程，这也是最常见的情况。这个过程是，从授权服务创建一个令牌开始，到第三方软件使用令牌，再到受保护资源服务验证令牌，最后再到令牌失效。同时，这个过程也不排除主动销毁令牌的事情发生，比如令牌被泄露，授权服务可以做主让令牌失效。</p><p>生命周期的第二种情况，也就是上一讲提到的，访问令牌失效之后可以使用刷新令牌请求新的访问令牌来代替失效的访问令牌，以提升用户使用第三方软件的体验。</p><p>生命周期的第三种情况，就是让第三方软件比如小兔，主动发起令牌失效的请求，然后授权服务收到请求之后让令牌立即失效。我们来想一下，什么情况下会需要这种机制，也就是想一下第三方软件这样做的 “动机”，毕竟一般情况下 “我们很难放弃已经拥有的事物”。</p><p>比如有些时候，用户和第三方软件之间存在一种订购关系，比如小明购买了小兔软件，那么在订购时长到期或者退订，且小明授权的token还没有到期的情况下，就需要有这样的一种令牌撤回协议，来支持小兔软件主动发起令牌失效的请求。作为平台一方比如京东商家开放平台，也建议有责任的第三方软件比如小兔软件，遵守这样的一种令牌撤回协议。</p><p>我将以上三种情况整理成了一份序列图，以便帮助你理解。同时，为了突出令牌，我将访问令牌和刷新令牌，特意用深颜色标识出来，并单独作为两个角色放进了整个序列图中。</p><p><img src=\"https://static001.geekbang.org/resource/image/bc/65/bc5fde2c813d41c60d863e2919b65565.png?wh=1342*1220\" alt=\"\" title=\"图4 令牌生命周期\"></p><h2>总结</h2><p>OAuth 2.0 的核心是授权服务，更进一步讲是令牌，<strong>没有令牌就没有OAuth，</strong>令牌表示的是授权行为之后的结果。</p><p>一般情况下令牌对第三方软件来说是一个随机的字符串，是不透明的。大部分情况下，我们提及的令牌，都是一个无意义的字符串。</p><p>但是，人们“不甘于”这样的满足，于是开始探索有没有其他生成令牌的方式，也就有了JWT令牌，这样一来既不需要通过共享数据库，也不需要通过授权服务提供接口的方式来做令牌校验了。这就相当于通过JWT这种结构化的方式，我们在做令牌校验的时候多了一种选择。</p><p>通过这一讲呢，我希望你能记住以下几点内容：</p><ol>\n<li>我们有了新的令牌生成方式的选择，这就是JWT令牌。这是一种结构化、信息化令牌，<strong>结构化可以组织用户的授权信息，信息化就是令牌本身包含了授权信息</strong>。</li>\n<li>虽然我们这讲的重点是JWT令牌，但是呢，不论是结构化的令牌还是非结构化的令牌，对于第三方软件来讲，它都不关心，因为<strong>令牌在OAuth 2.0系统中对于第三方软件都是不透明的</strong>。需要关心令牌的，是授权服务和受保护资源服务。</li>\n<li>我们需要注意JWT令牌的失效问题。我们使用了JWT令牌之后，远程的服务端上面是不存储的，因为不再有这个必要，JWT令牌本身就包含了信息。那么，如何来控制它的有效性问题呢？本讲中，我给出了两种建议，<strong>一种是建立一个秘钥管理系统，将生成秘钥的粒度缩小到用户级别，另外一种是直接将用户密码当作密钥。</strong></li>\n</ol><p>现在，你已经对JWT有了更深刻的认识，也知道如何来使用它了。当你构建并生成令牌的时候除了使用随机的、“任性的”字符串，还可以采用这样的结构化的令牌，以便在令牌校验的时候能解析出令牌的内容信息直接进行校验处理。</p><p>我把今天用到的代码放到了GitHub上，你可以点击<a href=\"https://github.com/xindongbook/oauth2-code/tree/master/src/com/oauth/ch04\">这个链接</a>查看。</p><h2>思考题</h2><p>你还知道有哪些场景适合JWT令牌，又有哪些场景不适合JWT令牌吗？</p><p>欢迎你在留言区分享你的观点，也欢迎你把今天的内容分享给其他朋友，我们一起交流。</p>","neighbors":{"left":{"article_title":"03 | 授权服务：授权码和访问令牌的颁发流程是怎样的？","id":257101},"right":{"article_title":"05 | 如何安全、快速地接入OAuth 2.0？","id":257767}},"comments":[{"had_liked":false,"id":232681,"user_name":"Neo","can_delete":false,"product_type":"c1","uid":1501591,"ip_address":"","ucode":"6A4EF447B88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/97/c190359c.jpg","comment_is_top":false,"comment_ctime":1594087716,"is_pvip":false,"replies":[{"id":"85911","content":"1、JWT肯定要加密传输，这点我们文中强调了，不做加密的结果就是你说的，加密用对称和非对称都可以，看实际需要，追求性能就是对称，可通过管理秘钥来对冲掉对称带来的相比非对称的弱化的那部分安全。<br><br>2、是的，用生成秘钥的方法，这是管理我们扔出去的JWT TOKEN的方式之一，如果只靠有效期当然也可以，但如果追求更进一步管理的话就需要做点额外的消耗。如果通过秘钥来管理，就需要一个秘钥管理系统，另外JWT肯定是要加密处理，而且加解密的重点不在于加解密算法，而在于秘钥管理，需要我们要把秘钥生成在独立于授权系统之外的秘钥管理系统里面，存储关系就是app_id+用户=秘钥，这里的用户就是TOKEN换取出来的。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594111298,"ip_address":"","comment_id":232681,"utype":1}],"discussion_count":3,"race_medal":0,"score":"74608531748","product_id":100053901,"comment_content":"老师，您好，有2个疑问：<br>1. 在jwt.io网站上验证的时候，如果不输入密钥，返回invalid Signature, 但是header和payload信息依然可以正确显示。我的理解是，在生成header和payload部分的时候，是通过base64编码，没有进行加密处理。最后的签名是保证整个body在传输的过程中没有被篡改。那么是不是意味着使用JWT方式，信息的主体还是依然能被未授信的第三方获取到？<br>2. 您提到JWT的一个优势是资源服务器不需要依赖数据库存储相关的信息，从而易于横向扩容。但是密钥部分还是躲不过需要查询的，可能依然需要存储。另外，如果采取一个用户用一个密钥的方式，资源服务器如何知道某个JWT token是给哪个用户使用的？（用户信息包含在header or payload中？）<br>谢谢","like_count":18,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500734,"discussion_content":"1、JWT肯定要加密传输，这点我们文中强调了，不做加密的结果就是你说的，加密用对称和非对称都可以，看实际需要，追求性能就是对称，可通过管理秘钥来对冲掉对称带来的相比非对称的弱化的那部分安全。\n\n2、是的，用生成秘钥的方法，这是管理我们扔出去的JWT TOKEN的方式之一，如果只靠有效期当然也可以，但如果追求更进一步管理的话就需要做点额外的消耗。如果通过秘钥来管理，就需要一个秘钥管理系统，另外JWT肯定是要加密处理，而且加解密的重点不在于加解密算法，而在于秘钥管理，需要我们要把秘钥生成在独立于授权系统之外的秘钥管理系统里面，存储关系就是app_id+用户=秘钥，这里的用户就是TOKEN换取出来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594111298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/0f/d9d878f8.jpg","nickname":"leros","note":"","ucode":"02F018C58337E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289729,"discussion_content":"从CIA三原则的角度，jwt不能保证confidentiality，但是能保证integrity，即内容有可能被泄露，但是不能被篡改。为降低access token泄露的风险，rfc 6749(OAuth 2.0) 要求在传输token时使用TLS。另外token有时效性和应用范围，万一发生了泄露，影响范围有限。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1594192746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586308,"discussion_content":"jwt之前，token保存在数据库中，被授权资源在处理请求时会查询传入的token是否合法（是否存在？是否过期？）这里的token可以是一个uuid随机数，不需要加密，就是个明文，当然https会加密整个报文，这是https协议了；而jwt之后，jwt本质也是个token，其实也可以不加密，存下来就好了，但是jwt的目的就是为了自检，所以通过加密生成一个签名，后续受保护资源收到jwt然后验签，如果验签通过则说明这个token一定是开放平台颁发的，因为其他人也么有秘钥无法伪造签名的！然后再检验过期时间，就完成了验证。\n\n而jwt中还有用户的id，因为受保护资源就可以知道返回哪个用户的数据了\n当然jwt还可以包含资源scope\n\n对了这里访问受保护资源的都是第三方软件的后端服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662100639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233440,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1594333144,"is_pvip":false,"replies":[{"id":"86219","content":"你理解是对的，签名是签名，加密是加密。<br><br>通过阅读官网上的下面这段话，可以帮助理解，在官网上有这么一段话：<br>“Signature<br>To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.<br><br>For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:”<br><br>意思是，用SHA256加密算法进行签名。<br><br>像我们熟知的MD5,SHA-0,SHA-1都是签名的算法，但也都都是计算机密码学中的最经典的加密算法，由于对MD5、SHA-0和SHA-1出现过成功的碰撞破解，现在已升级更新成SHA-2、SHA-3，而SHA256属于SHA-2。<br><br>签名实际上是一个加密的过程。在我们给的例子中使用了JJWT这个三方工具库，它的内部帮我们实现了签名和加密的工作以及包括验证签名的工作。<br><br>我们例子中给的是HS256算法，因为对称比非对称效率高些，但同时我们又做到了用户粒度的秘钥控制，来抵消对称不如非对称的那部分安全性，所以我们采用了对称的算法。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594358807,"ip_address":"","comment_id":233440,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53133940696","product_id":100053901,"comment_content":"我对JWT的理解是：JWT本身只对payload进行了签名，并没有做加密（base64编码不算加密）。文中多次提到加密，我比较疑惑，是我的理解错了吗？","like_count":12,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501032,"discussion_content":"你理解是对的，签名是签名，加密是加密。\n\n通过阅读官网上的下面这段话，可以帮助理解，在官网上有这么一段话：\n“Signature\nTo create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.\n\nFor example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:”\n\n意思是，用SHA256加密算法进行签名。\n\n像我们熟知的MD5,SHA-0,SHA-1都是签名的算法，但也都都是计算机密码学中的最经典的加密算法，由于对MD5、SHA-0和SHA-1出现过成功的碰撞破解，现在已升级更新成SHA-2、SHA-3，而SHA256属于SHA-2。\n\n签名实际上是一个加密的过程。在我们给的例子中使用了JJWT这个三方工具库，它的内部帮我们实现了签名和加密的工作以及包括验证签名的工作。\n\n我们例子中给的是HS256算法，因为对称比非对称效率高些，但同时我们又做到了用户粒度的秘钥控制，来抵消对称不如非对称的那部分安全性，所以我们采用了对称的算法。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594358807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262169,"user_name":"Awake  Dreaming","can_delete":false,"product_type":"c1","uid":1658734,"ip_address":"","ucode":"D1A19933863FD6","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/6e/bff1e33e.jpg","comment_is_top":false,"comment_ctime":1605634907,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"44555307867","product_id":100053901,"comment_content":"老师，我这边是主要负责公司三方授权服务的，对oauth2.0的流程也算比较熟悉，但是在阅读这一节的时候有些看不懂，主要是下面这个点：<br>令牌是授权服务颁发给接入方的（小兔软件），正常流程应该是小兔软件想要获取受保护资源时拿着令牌去受保护资源服务，受保护资源服务通过调用授权服务的rpc接口确认并解析令牌；但是在这篇文章中，老师讲到受保护资源服务对于JWT令牌的解析并不需要依赖授权服务，那它是如何解析的呢？<br>我这边的理解（猜测）是除非令牌的解密密钥和验签算法在受保护资源服务这边都有，否则解密和验签还是都要调用授权服务，还是会对授权服务有依赖","like_count":10,"discussions":[{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400588,"discussion_content":"你的理解是对的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1633340202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184637,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/7d/1454db9c.jpg","nickname":"KeepGoing","note":"","ucode":"B872F794265709","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382854,"discussion_content":"我也有同样的疑惑～感觉有些细节没说到位，但往往是最关键的部分，导致读者突然的迷惑。\n如果仅单从AWT的数据本身就能验证合法性些显然是不可能的，只能脑补是受保护资源本身也是有用来验证合法性的信息的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625743316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/a6/69907ec1.jpg","nickname":"李伟","note":"","ucode":"F0EF60EB250B20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392265,"discussion_content":"疑惑+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630927185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240700,"user_name":"Geek_7932","can_delete":false,"product_type":"c1","uid":1784631,"ip_address":"","ucode":"640BB07A6B85EC","user_header":"","comment_is_top":false,"comment_ctime":1597039852,"is_pvip":false,"replies":[{"id":"89087","content":"你的理解是对的","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597192424,"ip_address":"","comment_id":240700,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44546712812","product_id":100053901,"comment_content":"老师，感觉JWT在文章中的讲解在加密、解密这一块稍微有点模糊，不易理解<br>JWT在这里的作用主要是将用户授权信息保存在结构体中，生成和内容校验都是在授权服务和受保护资源这一方<br>对于第三方应用来说，JWT和UUID的token都是一样的，就是个授权字符串；而对于授权服务这方来说，是不太一样的，JWT上存用户授权信息，而UUID则是在数据库存授权信息<br>对于JWT是否使用对称和非对称加密，密钥&#47;（公钥、私钥）都只是授权服务&#47;受保护资源这一方用到了，选择哪种加密方式其实在这差别不大，密钥&#47;（公钥、私钥）都不会公开出去，而且对称加密还有速度更快的优势，或许对称加密在这更加合适","like_count":10,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503534,"discussion_content":"你的理解是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597192424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159708,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/1c/b39d7fe2.jpg","nickname":"꧁平常心꧂","note":"","ucode":"01D04BBEB1C7A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540669,"discussion_content":"接着您的问题，在接着一问， 受保护的资源是如何进行解密的？文章中提到过，如果加密的密钥使用的是用户密码，那受保护的资源又不知道用户密码，这如何进行解密呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640134276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1066707,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/d3/e25d104a.jpg","nickname":"êｗěｎ","note":"","ucode":"5000233111BEFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1159708,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/1c/b39d7fe2.jpg","nickname":"꧁平常心꧂","note":"","ucode":"01D04BBEB1C7A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565164,"discussion_content":"rpc去授权服务校验就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650416242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540669,"ip_address":""},"score":565164,"extra":""}]}]},{"had_liked":false,"id":241773,"user_name":"stg609","can_delete":false,"product_type":"c1","uid":1073025,"ip_address":"","ucode":"FB70A75A891BB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/81/1c614f4a.jpg","comment_is_top":false,"comment_ctime":1597417715,"is_pvip":false,"replies":[{"id":"89359","content":"尽量时间短也是非常重要的，这也是我们使用JWT的一个原则之一。<br><br>在这个时间短的范围内，如果也想让jWT失效，我们势必要做点什么，比如我们说的”粒度秘钥“。<br><br>架构中的成本从来不会消失只会转移，让能胜任的”中间件“接收这个成本，那是它擅长的事情。<br><br>更新密钥的时候一起更新缓存就可以了。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597624976,"ip_address":"","comment_id":241773,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35957156083","product_id":100053901,"comment_content":"另外，文中提到的两种方式来让JWT失效，我觉得并不一定可行，这两种方式有效的前提应该是资源服务器每次验证jwt的时候都会先去授权服务器要一遍秘钥，这样才能通过秘钥的变更来导致jwt失效。<br><br>但很多时候，为了进一步发挥jwt的去中心化优势，资源服务器在获取秘钥后通常会进行缓存，后续的请求并不会再去获取秘钥，这样即使更改秘钥也无济于事。除非同时重启资源服务器。<br><br>还是推荐让jwt不要保存敏感数据，同时让有效期尽可能短，比如 15 分钟，来减少风险。<br><br>如果实在安全性要求高，就弃用jwt这种格式。","like_count":8,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503839,"discussion_content":"尽量时间短也是非常重要的，这也是我们使用JWT的一个原则之一。\n\n在这个时间短的范围内，如果也想让jWT失效，我们势必要做点什么，比如我们说的”粒度秘钥“。\n\n架构中的成本从来不会消失只会转移，让能胜任的”中间件“接收这个成本，那是它擅长的事情。\n\n更新密钥的时候一起更新缓存就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597624976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241766,"user_name":"stg609","can_delete":false,"product_type":"c1","uid":1073025,"ip_address":"","ucode":"FB70A75A891BB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/81/1c614f4a.jpg","comment_is_top":false,"comment_ctime":1597415632,"is_pvip":false,"replies":[{"id":"89358","content":"多谢肯定，咱们文中有介绍到，”使用 JJWT 解析 JWT 令牌时包含了验证签名的动作，如果签名不正确就会抛出异常信息。我们可以借助这一点来对签名做校验，从而判断是否是一个没有被伪造过的、合法的 JWT 令牌。“","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597624716,"ip_address":"","comment_id":241766,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23072252112","product_id":100053901,"comment_content":"讲的很精彩，但是似乎少了一部分，就是服务端到底是如何来验证一个jwt是否合法的？","like_count":5,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503836,"discussion_content":"多谢肯定，咱们文中有介绍到，”使用 JJWT 解析 JWT 令牌时包含了验证签名的动作，如果签名不正确就会抛出异常信息。我们可以借助这一点来对签名做校验，从而判断是否是一个没有被伪造过的、合法的 JWT 令牌。“","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597624716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166878,"avatar":"https://static001.geekbang.org/account/avatar/00/21/10/5e/42f4faf7.jpg","nickname":"天择","note":"","ucode":"ED2B08DB2F2B38","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402977,"discussion_content":"验证过程是通过解析出header 和payload部分，再重新应用当初生成令牌时的签名算法，与令牌中的签名比对，如果不一致，说明令牌已经被篡改。因为签名的key是保密的，外人无法保证内容被改了，签名还不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633969265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311238,"user_name":"名贤集","can_delete":false,"product_type":"c1","uid":1033131,"ip_address":"","ucode":"220A754095BECE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/ab/c2ca35e6.jpg","comment_is_top":false,"comment_ctime":1631114170,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"18810983354","product_id":100053901,"comment_content":"用户粒度秘钥有问题啊！你如何确定传递过来的jwt是哪个用户的？用户信息存储在jwt里面啊。","like_count":4,"discussions":[{"author":{"id":2910116,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/e9kticJ2o5ld4pXPKg9oYrUQicfhp7A9R3I6Iicl9ouMKZajvMf5cwsSV2rAev9K1c8Oh6ECAdWltE2Pw0KiakAffg/132","nickname":"Geek_236c99","note":"","ucode":"A4CFC9C75875F9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553390,"discussion_content":"JWT的header和payload部分只是用了Base64进行编码（Base64(header.payload)+private_key(hash(Base64(header.payload)))），你直接Base64解码出来不就是你需要的claims信息了吗。然后从claims里面取subject，然后获取相应用户的public key做验签就行了\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645872928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2118334,"avatar":"https://static001.geekbang.org/account/avatar/00/20/52/be/dcf03363.jpg","nickname":"聪亮","note":"","ucode":"FDF53FE8FE7CCD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552871,"discussion_content":"我的理解是 使用一个公共的密钥对jwt整个报文加解密，使用用户粒度的密钥对jwt进行签名验证。待老师确认","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645619093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2118334,"avatar":"https://static001.geekbang.org/account/avatar/00/20/52/be/dcf03363.jpg","nickname":"聪亮","note":"","ucode":"FDF53FE8FE7CCD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":586313,"discussion_content":"不是的，jwt整个报文不需要加密的，jwt是响应的一部分，不是http响应报文，而https会对整个报文加密，报文的加密传输数据安全不是jwt考虑的，jwt考虑的是怎么自检合法性！这只需要一个签名，如果验签通过，则说明这个token一定是开放平台颁发的。\n\njwt之前，token保存在数据库中，被授权资源在处理请求时会查询传入的token是否合法（是否存在？是否过期？）这里的token可以是一个uuid随机数，不需要加密，就是个明文，当然https会加密整个报文，这是https协议了；而jwt之后，jwt本质也是个token，其实也可以不加密，存下来就好了，但是jwt的目的就是为了自检，所以通过加密生成一个签名，后续受保护资源收到jwt然后验签，如果验签通过则说明这个token一定是开放平台颁发的，因为其他人也么有秘钥无法伪造签名的！然后再检验过期时间，就完成了验证。\n\n而jwt中还有用户的id，因为受保护资源就可以知道返回哪个用户的数据了\n当然jwt还可以包含资源scope","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662101306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552871,"ip_address":"山东"},"score":586313,"extra":""}]},{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586310,"discussion_content":"payload仅仅用base64编码的可以直接解码获取sub，也就是用户","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662100840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018479,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/6f/3d4f7e31.jpg","nickname":"娄江国","note":"","ucode":"6C2AAE4E409286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546172,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642201707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116436,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/14/7b8dbe8b.jpg","nickname":"A-5d?42:5x50kUNoss","note":"","ucode":"7EB8610933EBBC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543344,"discussion_content":"同问！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641097567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1984391,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MSV5CclX2Zd2yOAqib92SibEX5Jr7dkQnD5qCMd1t2hC4CIdBq6C8hKsKGqENacxlC5GNCfnv0xyV7S7G1pQbdxw/132","nickname":"耕耘者","note":"","ucode":"703A595B04E000","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533702,"discussion_content":"同问？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637936006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232902,"user_name":"赵嘚住","can_delete":false,"product_type":"c1","uid":1688244,"ip_address":"","ucode":"CA579FA99D68A1","user_header":"","comment_is_top":false,"comment_ctime":1594166094,"is_pvip":true,"replies":[{"id":"85992","content":"减少数据库查询次数是相对于普通的token来说的，普通的token是一个无意义的随机的字符串，需要再次匹配数据库拿到更多的用户信息，比如哪个用户给哪个应用授权了。结构化JWT令牌自包含了这些信息，所以不需要额外的查询数据库。<br><br>但是，我们需要对JWT令牌数据进行加密，这就引出另外一个加密的问题，在回答其他同学的时候也提到了这点，加密的重点是秘钥管理，这已经是超出了JWT的范围了，JWT设计的时候它关注的是结构化，所以对于加密这套系统的设计就需要额外的考虑。<br><br>我们是一定要能够做到对扔出去的JWT令牌做到可控的，也就涉及到更细粒度的秘钥管理，这时，可以采用redis这样的分布式缓存或者本机缓存来解决查询秘钥更新的问题，用普通的mysql做持久化，更新的时候更新到redis或者本地缓存的数据。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594218985,"ip_address":"","comment_id":232902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18774035278","product_id":100053901,"comment_content":"老师，您好，还有个问题，既然说了减少和数据库的调用次数，那jwt的第三部分秘钥如果验证他的准确性？这个秘钥不也是要存储在数据库，当接受到token解密以后，通过信息在数据库中查出来对比以后才能验证通过，或者rpc以后验证？这样总还是要查询数据的，只是没有暴露密码而已，但很多问题还是没有解决？求老师解答","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500807,"discussion_content":"减少数据库查询次数是相对于普通的token来说的，普通的token是一个无意义的随机的字符串，需要再次匹配数据库拿到更多的用户信息，比如哪个用户给哪个应用授权了。结构化JWT令牌自包含了这些信息，所以不需要额外的查询数据库。\n\n但是，我们需要对JWT令牌数据进行加密，这就引出另外一个加密的问题，在回答其他同学的时候也提到了这点，加密的重点是秘钥管理，这已经是超出了JWT的范围了，JWT设计的时候它关注的是结构化，所以对于加密这套系统的设计就需要额外的考虑。\n\n我们是一定要能够做到对扔出去的JWT令牌做到可控的，也就涉及到更细粒度的秘钥管理，这时，可以采用redis这样的分布式缓存或者本机缓存来解决查询秘钥更新的问题，用普通的mysql做持久化，更新的时候更新到redis或者本地缓存的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594218985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234318,"user_name":"蓝魔丶","can_delete":false,"product_type":"c1","uid":1219438,"ip_address":"","ucode":"2AE4359E263558","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","comment_is_top":false,"comment_ctime":1594643092,"is_pvip":false,"replies":[{"id":"86481","content":"是的，为了防止解密出payload。在将JWT用作【访问令牌】的时候，令牌的内容第三方应用也是不能被允许知道的，对于第三方应用来讲【访问令牌】对它不透明。<br><br>不过当我们讲到09的时候，通过OAuth 2.0 来实现一个用户身份认证的时候会用到【ID令牌】，这个【ID令牌】允许被第三方软件解析，因为这种情况需要一个用户标识。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594650881,"ip_address":"","comment_id":234318,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14479544980","product_id":100053901,"comment_content":"老师，jwt中signature已经在签名的时候用到了一个secret，这样已经能保证只有知道secret的第三个方才能验证jwt合法性，为什么还要加密，为了防止解密出head和payload？","like_count":3,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501349,"discussion_content":"是的，为了防止解密出payload。在将JWT用作【访问令牌】的时候，令牌的内容第三方应用也是不能被允许知道的，对于第三方应用来讲【访问令牌】对它不透明。\n\n不过当我们讲到09的时候，通过OAuth 2.0 来实现一个用户身份认证的时候会用到【ID令牌】，这个【ID令牌】允许被第三方软件解析，因为这种情况需要一个用户标识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594650881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":586314,"discussion_content":"整个jwt都加密啊，我以为我懂了，原来差的远","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662101989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":501349,"ip_address":"山东"},"score":586314,"extra":""}]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290969,"discussion_content":"老师提到的第三方应用，好想说的是非法第三方，是吗？如果是合法注册的应该可以解析吧，不然感觉又回到普通token一样又需要到认证服务去检验token，因为合法的第三方应用需要解密获取权限范围信息或者用户标识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594651629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234288,"user_name":"哈德韦","can_delete":false,"product_type":"c1","uid":1637085,"ip_address":"","ucode":"E7C9B3D087D2D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","comment_is_top":false,"comment_ctime":1594633228,"is_pvip":false,"replies":[{"id":"86475","content":"可以使用JWT令牌，为了解决“覆水难收”的问题，需要额外的成本来处理，就是管理那个秘钥。就类似你说的“强行改掉”，这样当JWT请求到平台的服务端的时候就验证不通过了，也就是类似你说的“踢出下线”。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594642430,"ip_address":"","comment_id":234288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479535116","product_id":100053901,"comment_content":"如果需要从服务器端直接暴力将某些用户“踢出下线”，是不是就不能使用 JWT 令牌？除非在另外的密钥管理系统里，将这些用户的密钥强行改掉？","like_count":3,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501339,"discussion_content":"可以使用JWT令牌，为了解决“覆水难收”的问题，需要额外的成本来处理，就是管理那个秘钥。就类似你说的“强行改掉”，这样当JWT请求到平台的服务端的时候就验证不通过了，也就是类似你说的“踢出下线”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594642430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233082,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1594213185,"is_pvip":false,"replies":[{"id":"85993","content":"如果要做到细粒度的安全控制，肯定是要缩小到一个用户一个秘钥的粒度。<br><br>秘钥信息的管理涉及到额外的一套秘钥管理系统。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594219317,"ip_address":"","comment_id":233082,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14479115073","product_id":100053901,"comment_content":"请问一个用户一个密钥这种方案用的多么。<br>我感觉无论怎么设计，受保护资源都要存储额外存储一些信息才行，这样JWT的优势就没了。<br>既然这样我们为什么不用一个随机生成的token代替JWT，让受保护资源通过调用授权服务的接口来验证token以及权限呢？<br>确实这JWT方案可以减少对授权服务的请求，但还多了同步密钥信息的功能，如果有多个资源服务需要验证token，那是不是密钥信息要冗余多处，增加了泄漏的风险？","like_count":3,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500885,"discussion_content":"如果要做到细粒度的安全控制，肯定是要缩小到一个用户一个秘钥的粒度。\n\n秘钥信息的管理涉及到额外的一套秘钥管理系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594219317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289916,"discussion_content":"我是觉得如果受保护资源一方（或者多方）如果还需要引入另外一个系统，那不如不用jwt","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594267748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232835,"user_name":"inrtyx","can_delete":false,"product_type":"c1","uid":1246178,"ip_address":"","ucode":"81CD18FF34ABAB","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","comment_is_top":false,"comment_ctime":1594126603,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14479028491","product_id":100053901,"comment_content":"密钥肯定要定期更换吧？如果是的话，密钥的管理是个问题，密钥换的话，客户端和服务端都要换的吧，关于密钥管理，老师有没有什么好的实践吗？","like_count":3},{"had_liked":false,"id":293577,"user_name":"穿针土豆丝","can_delete":false,"product_type":"c1","uid":1275424,"ip_address":"","ucode":"5DA3BDDE5162E4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/aiaO77mTsCalcia49ElevPn988pgwcL3rD5ic1DTD6E8rbAwfmguiaPsibHicsYGQID7VbmD21GUAV9bbuNMfDhDGGyg/132","comment_is_top":false,"comment_ctime":1621435593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10211370185","product_id":100053901,"comment_content":"服务端不再存储 JWT 令牌，自然过期好理解，但如何主动销毁 JWT 令牌呢？","like_count":2},{"had_liked":false,"id":237377,"user_name":"李顺翔","can_delete":false,"product_type":"c1","uid":1225652,"ip_address":"","ucode":"0163FE8B528952","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/b4/3237ba96.jpg","comment_is_top":false,"comment_ctime":1595813423,"is_pvip":false,"replies":[{"id":"87772","content":"用户修改密码，这个动作本身在安全背后是一件很严密的事情，对授权系统来讲，它接收到的事件，就是密码修改了，它的反应一定要让授权失效，因为授权系统不知道谁修改了密码。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1595896456,"ip_address":"","comment_id":237377,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10185748015","product_id":100053901,"comment_content":"把用户密码当做秘钥不合适吧，如果用户修改密码，所有的授权都会失效","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502395,"discussion_content":"用户修改密码，这个动作本身在安全背后是一件很严密的事情，对授权系统来讲，它接收到的事件，就是密码修改了，它的反应一定要让授权失效，因为授权系统不知道谁修改了密码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595896456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/61/d259f7a9.jpg","nickname":"OTM","note":"","ucode":"D96E9A661F122B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326919,"discussion_content":"以用户密码不适合，特别是使用了sso集成，不一定每个系统能获取到密码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605700366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234589,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1594727717,"is_pvip":true,"replies":[{"id":"86534","content":"存储节省不明显是在用户量少的情况下。秘钥管理系统是JWT和OAuth 2.0 之外的成本，安全问题的防护是一个成本问题，如果是低等级防护，当然可以直接使用JWT的令牌短时过期。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594732929,"ip_address":"","comment_id":234589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10184662309","product_id":100053901,"comment_content":"jwt如果每个用户一个密钥，就还需要访问数据库，这种方式和无结构的token优化没那么明显，只是省了token的存储。","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501434,"discussion_content":"存储节省不明显是在用户量少的情况下。秘钥管理系统是JWT和OAuth 2.0 之外的成本，安全问题的防护是一个成本问题，如果是低等级防护，当然可以直接使用JWT的令牌短时过期。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594732929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233769,"user_name":"Max","can_delete":false,"product_type":"c1","uid":1060430,"ip_address":"","ucode":"57BB9045E8D9C0","user_header":"","comment_is_top":false,"comment_ctime":1594444335,"is_pvip":false,"replies":[{"id":"86310","content":"不可以。无论什么形式的【访问令牌】都需要保证对【第三方软件】不透明。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594470543,"ip_address":"","comment_id":233769,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10184378927","product_id":100053901,"comment_content":"老师您好，如果传输层已经是加密的（TLS），JWT就不用加密了吧（用签名来保证数据完整性应该就够了）","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501161,"discussion_content":"不可以。无论什么形式的【访问令牌】都需要保证对【第三方软件】不透明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594470543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060430,"avatar":"","nickname":"Max","note":"","ucode":"57BB9045E8D9C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290433,"discussion_content":"理解了，对JWT加密实际是为了防止第三方软件的篡改，跟传输层加密不是一个层次。谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594470708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333155,"user_name":"paul","can_delete":false,"product_type":"c1","uid":1215037,"ip_address":"","ucode":"F1008CD5B10D62","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/3d/76638f13.jpg","comment_is_top":false,"comment_ctime":1644140461,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5939107757","product_id":100053901,"comment_content":"理解老师的方案其实就是：<br>1. 在access token加入信息，在授权服务-&gt;第3方-&gt;资源服务的传递间，目的是减少这部分信息的存储，而为了不让第3方知道这些信息，采用加解密方式（授权服务加密，资源服务解密）。<br>2. 和jwt没什么关系，只是参考了格式，完全自定义结构化格式就可以。这里引入jwt反而使读者更迷惑","like_count":1},{"had_liked":false,"id":248158,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600045978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895013274","product_id":100053901,"comment_content":"“不论是结构化的令牌还是非结构化的令牌，对于第三方软件来讲，它都不关心，因为令牌在 OAuth 2.0 系统中对于第三方软件都是不透明的。需要关心令牌的，是授权服务和受保护资源服务。”  对第三方是透明的吧，因为第三方应用不需要解析令牌，只需要当一个数据包，发给授权服务和受保护资源服务就行了","like_count":1},{"had_liked":false,"id":240761,"user_name":"Geek_7c4953","can_delete":false,"product_type":"c1","uid":1809168,"ip_address":"","ucode":"359745D4725D4F","user_header":"","comment_is_top":false,"comment_ctime":1597055906,"is_pvip":false,"replies":[{"id":"89075","content":"第三方软件永远不会对JWT格式的访问令牌进行解密的。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597149305,"ip_address":"","comment_id":240761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892023202","product_id":100053901,"comment_content":"如果JWT需要加密，那解密的秘钥要存储在哪呢？如果是web场景，在JS中存储秘钥跟明文没有差别啊。还是说JWT只能用于服务器之间的授权访问？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503552,"discussion_content":"第三方软件永远不会对JWT格式的访问令牌进行解密的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597149305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238922,"user_name":"哈德韦","can_delete":false,"product_type":"c1","uid":1637085,"ip_address":"","ucode":"E7C9B3D087D2D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","comment_is_top":false,"comment_ctime":1596370604,"is_pvip":false,"replies":[{"id":"88266","content":"base64只是编码","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596415585,"ip_address":"","comment_id":238922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891337900","product_id":100053901,"comment_content":"文中说JWT的加密算法，既可以是对称加密，也可以是非对称加密。这里的对称加密是不是不包括 base64？感觉只用base64的话，和不加密没有区别（贴到https:&#47;&#47;jwt.io&#47;就可以看到明文）。","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502896,"discussion_content":"base64只是编码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596415585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236460,"user_name":"哈德韦","can_delete":false,"product_type":"c1","uid":1637085,"ip_address":"","ucode":"E7C9B3D087D2D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","comment_is_top":false,"comment_ctime":1595420367,"is_pvip":false,"replies":[{"id":"88360","content":"本质还不一样，session管理的本质是会话管理，用户粒度的秘钥管理并不会涉及到【会话】层面，归根结底这里讲到的JWT令牌的本质是起到访问令牌的作用。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596462586,"ip_address":"","comment_id":236460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890387663","product_id":100053901,"comment_content":"请问老师，既然不能让JWT不可控，就要用户粒度的密钥管理，在我的理解，就是至少维护一个用户和密钥的键值对，那这和 Session 管理是不是本质上一样？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502075,"discussion_content":"本质还不一样，session管理的本质是会话管理，用户粒度的秘钥管理并不会涉及到【会话】层面，归根结底这里讲到的JWT令牌的本质是起到访问令牌的作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596462586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233207,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1594260570,"is_pvip":false,"replies":[{"id":"86082","content":"刷新令牌的使用方法，跟是否JWT令牌和普通的令牌没有区别。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594290223,"ip_address":"","comment_id":233207,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5889227866","product_id":100053901,"comment_content":"JWT 令牌如何刷新，有没有好的方案给我们讲一讲？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500943,"discussion_content":"刷新令牌的使用方法，跟是否JWT令牌和普通的令牌没有区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594290223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126538,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","nickname":"业余草","note":"","ucode":"99BDC1E629049D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290172,"discussion_content":"比如我前端拿了一个 JWT，我请求一个接口，那么我的过期时间就应该延后了。这个应该怎么做","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594366603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139413,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","nickname":"大大大熊myeh","note":"","ucode":"4832C2E7CEB151","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1126538,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","nickname":"业余草","note":"","ucode":"99BDC1E629049D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297049,"discussion_content":"返回新的jwt令牌 因为每一个jwt令牌的过期时间都定死了 修改过期时间意味着令牌也被修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596760347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290172,"ip_address":""},"score":297049,"extra":""}]}]},{"had_liked":false,"id":232715,"user_name":"赵嘚住","can_delete":false,"product_type":"c1","uid":1688244,"ip_address":"","ucode":"CA579FA99D68A1","user_header":"","comment_is_top":false,"comment_ctime":1594098357,"is_pvip":true,"replies":[{"id":"85909","content":"正常情况下，只能是在使用的时候，来根据失效时间做判断。再就是我们文中所讲的给JWT令牌加了“盐”，就是那个用户粒度的秘钥或者是其它因素，改变了秘钥，规则变了，到服务端验证的时候就不通过了。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594101081,"ip_address":"","comment_id":232715,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889065653","product_id":100053901,"comment_content":"老师，你好，想问一下，既然令牌信息不在服务端存储，我怎么知道他失效了呢，是判断失效时间？如果主动让令牌失效，我服务端什么都没有记录，怎么知道这个令牌已经不能用了？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500749,"discussion_content":"正常情况下，只能是在使用的时候，来根据失效时间做判断。再就是我们文中所讲的给JWT令牌加了“盐”，就是那个用户粒度的秘钥或者是其它因素，改变了秘钥，规则变了，到服务端验证的时候就不通过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594101081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1679881,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a2/09/1bae9e93.jpg","nickname":"shuta","note":"","ucode":"C27E4D1B1A40D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292486,"discussion_content":"比如：在jwt的payload中增加失效时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595242219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232685,"user_name":"阿秋","can_delete":false,"product_type":"c1","uid":1878518,"ip_address":"","ucode":"6679FE878C463C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a9/f6/35b55830.jpg","comment_is_top":false,"comment_ctime":1594088696,"is_pvip":false,"replies":[{"id":"85906","content":"首先加解密相当于一般纯业务IO来说，确实是一种耗费计算资源的行为，性能一定会有所下降。其次呢，我们就要在安全性和高性能之间取一个平衡，让JWT令牌不可控肯定是不行的，比如微信登录极客时间的例子中，当用户修改了微信的登录密码，应该让极客时间拿到的TOKEN立即失效。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594100771,"ip_address":"","comment_id":232685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889055992","product_id":100053901,"comment_content":"最近正好在研究JWT令牌撤回的实现方式，第一次听说老师说的这种密钥管理系统的方式，我还是有些疑问，每个用户一组秘钥，用户多了会不会使我们的应用性能下降","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500737,"discussion_content":"首先加解密相当于一般纯业务IO来说，确实是一种耗费计算资源的行为，性能一定会有所下降。其次呢，我们就要在安全性和高性能之间取一个平衡，让JWT令牌不可控肯定是不行的，比如微信登录极客时间的例子中，当用户修改了微信的登录密码，应该让极客时间拿到的TOKEN立即失效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594100771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353855,"user_name":"| ~浑蛋~","can_delete":false,"product_type":"c1","uid":3024820,"ip_address":"广东","ucode":"B6904B44DFA805","user_header":"https://static001.geekbang.org/account/avatar/00/2e/27/b4/df65c0f7.jpg","comment_is_top":false,"comment_ctime":1659864247,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1659864247","product_id":100053901,"comment_content":"所以使用jwt token时，授权服务与资源服务共享秘钥，可以静态共享，也可以依赖秘钥管理系统，虽然减少了rpc调用，但是横向扩展起来还是不那么方便，除非是静态共享，因为使用秘钥管理系统的话也是需要维护成本的。","like_count":0},{"had_liked":false,"id":351458,"user_name":"路在哪","can_delete":false,"product_type":"c1","uid":1816609,"ip_address":"","ucode":"A4822AD07AD102","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/21/f692bdb0.jpg","comment_is_top":false,"comment_ctime":1657805854,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657805854","product_id":100053901,"comment_content":"小兔软件请求订单数据，传jwt过去，那么授权服务怎么解析jwt呢，密钥也不知道吧","like_count":0},{"had_liked":false,"id":329076,"user_name":"A-5d?42:5x50kUNoss","can_delete":false,"product_type":"c1","uid":1116436,"ip_address":"","ucode":"7EB8610933EBBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/14/7b8dbe8b.jpg","comment_is_top":false,"comment_ctime":1641098270,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641098270","product_id":100053901,"comment_content":"老师，您好，请教您一个问题：<br>文中提到的有两处秘钥管理，一个是jwt本身的加密秘钥管理，一个是jwt中验签的秘钥管理<br>可不可以这么理解，其实jwt本身的加密用的是同一秘钥，不管是哪个jwt过来的都用同一把秘钥解密；而jwt中的SIGNATURE验签秘钥才需要用到上文讲到的【用户粒度秘钥】方案？<br>请老师赐教，感谢","like_count":0},{"had_liked":false,"id":327375,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1215139,"ip_address":"","ucode":"258880ACE79448","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/a3/aee7ded7.jpg","comment_is_top":false,"comment_ctime":1640088424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640088424","product_id":100053901,"comment_content":"JWT令牌失效，采用密钥和用户密码的形式；<br>密钥管理系统和用户秘密 都是京东（授权服务方的密钥系统或用户密码），<br>用户在小兔软件执行操作时，小兔软件的后台也要调用取京东平台 密钥服务。<br>小兔软件调用京东平台密钥服务，是否也有一个令牌访问的控制？<br>","like_count":0},{"had_liked":false,"id":303657,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1626918535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626918535","product_id":100053901,"comment_content":"请教下，如果是在HTTPS网络传输，是不是使用原始的加签名的JWT令牌就行，还是仍要加密？","like_count":0},{"had_liked":false,"id":302837,"user_name":"THB","can_delete":false,"product_type":"c1","uid":1364513,"ip_address":"","ucode":"199A7879576041","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MlmSR4YXUfrNlZdMv7bv103gbTCxG9DYKFR8YLJtqw85rl8YuibhzNB7SmddQ6v3GiaQFZr5iajc9numbJ248fMGQ/132","comment_is_top":false,"comment_ctime":1626403679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626403679","product_id":100053901,"comment_content":"老师，有一个问题，一直在纠结，我身边很多朋友用jwt，都不会把密码放进去token里面，他们说，这样容易泄露密码，我看到您的课程，密码是放进token里面的，这样不会导致密码泄露吗？","like_count":0},{"had_liked":false,"id":296933,"user_name":"张伟","can_delete":false,"product_type":"c1","uid":1018573,"ip_address":"","ucode":"DD8C09349B47BD","user_header":"","comment_is_top":false,"comment_ctime":1623228655,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623228655","product_id":100053901,"comment_content":"王老师，我有一个问题：<br>如果授权服务颁发出来了 JWT 令牌被黑客劫持，那么理论上黑客就可以伪装成第三方应用使用 JWT令牌去获取用户信息。因为 JWT 令牌对第三方应用是不透明的，但是有一段时间的有效期。<br>受保护资源拿到 JWT 令牌后通过验证发现原来是“第三方应用”的请求，于是把数据发送给了黑客。<br>这样是会有安全问题的吧？","like_count":0},{"had_liked":false,"id":289482,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1619050501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619050501","product_id":100053901,"comment_content":"请问老师：我是这么理解的，JWT虽然能在服务端实现自检，但这个只能满意身份认证以及权限不多的场景。我理解，一个用户的接口权限是夹带在JWT的payload中的，所以如果用户的权限列表比较复杂，会导致payload很大，而jwt本身的加密串又是基于base64的，也必然导致加密串同步变大。<br>所以，这样推导的话，JWT其实并不适合权限列表过于复杂的场景，当权限列表比较复杂时，必然要把权限列表存于别处，是这样理解吗？","like_count":0},{"had_liked":false,"id":288447,"user_name":"BingoJ","can_delete":false,"product_type":"c1","uid":1298126,"ip_address":"","ucode":"6160CD02AD592B","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/ce/53392e44.jpg","comment_is_top":false,"comment_ctime":1618472114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618472114","product_id":100053901,"comment_content":"jwt算是哪种授权方式呢","like_count":0},{"had_liked":false,"id":257960,"user_name":"zhang","can_delete":false,"product_type":"c1","uid":1005712,"ip_address":"","ucode":"E86C0E8964789A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/zmOYTBA7yFVStH959UXc1vD5tAAN2dAKgaoBMz8iabBia9MibzFCQ8LeT18XsXNse6XicdBb5U3QW2tSutRcenQLQw/132","comment_is_top":false,"comment_ctime":1604225126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604225126","product_id":100053901,"comment_content":"老师jwt证明我是我的方法有更好的吗？为了jwt签发验签不依赖存储，密钥采用通用化密钥，我想到的是payload中存储用户唯一标示比如uuid，这样请求后台服务时强制覆盖payload用户信息到post参数，证明我是我。是否还有其他解决方案？","like_count":0},{"had_liked":false,"id":253033,"user_name":"fenghaiju","can_delete":false,"product_type":"c1","uid":1256405,"ip_address":"","ucode":"A251DC262A2AB2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/d5/77ee608e.jpg","comment_is_top":false,"comment_ctime":1602572421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602572421","product_id":100053901,"comment_content":"老师，使用jwt服务器不需要存储，对于用户退出登录的操作，有什么好的建议","like_count":0},{"had_liked":false,"id":248160,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600046581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600046581","product_id":100053901,"comment_content":"JWT的缺陷是发出去的令牌，不能及时修改令牌，那么对令牌实时性高的应用就不适合使用JWT令牌。  另外，oauth2.0是开放平台使用的授权访问协议，如果不是开放平台，仅仅是单体应用，也可以不使用JWT。  <br>能够容忍令牌失效，但一小段时间访问系统的，可以使用JWT，例如查询系统适用JWT，实时交易系统就不适用jwt","like_count":0},{"had_liked":false,"id":245639,"user_name":"花弄影","can_delete":false,"product_type":"c1","uid":1559047,"ip_address":"","ucode":"7F542D09BBEE2A","user_header":"https://static001.geekbang.org/account/avatar/00/17/ca/07/5836d7ac.jpg","comment_is_top":false,"comment_ctime":1599014809,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599014809","product_id":100053901,"comment_content":"前端传输jwt时，用header还是cookie呢","like_count":0,"discussions":[{"author":{"id":1013147,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","nickname":"技术修行者","note":"","ucode":"28CA41A1214D6B","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353056,"discussion_content":"我看到很多应用在用header，将jwt token放在authorization header中，但是存在的问题是因为jwt可以定制payload，所以会存在header超长的潜在风险。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614985028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245599,"user_name":"罗罗诺亚.恩佐","can_delete":false,"product_type":"c1","uid":1083422,"ip_address":"","ucode":"42D7932946CEBF","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/1e/69e84907.jpg","comment_is_top":false,"comment_ctime":1599005801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599005801","product_id":100053901,"comment_content":"这章讲的很好，评论区永远很精彩","like_count":0},{"had_liked":false,"id":244313,"user_name":"文正","can_delete":false,"product_type":"c1","uid":1103745,"ip_address":"","ucode":"755DDB8A00B7A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/81/2727b475.jpg","comment_is_top":false,"comment_ctime":1598456122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598456122","product_id":100053901,"comment_content":"如果考虑“覆水难收”问题，增加的密钥管理成本跟以前的cookie token、redis存储验证没有区别了。所以我的理解是使用了jwt就不要考虑“覆水难收”，如果硬是要做的话，可以考虑如下：1.为每个用户增加一个密钥，随机的也好密码也好。2. 认证环节需要增加一个事件监听。3.如果需要对某个用户的token进行清除，需要发出通知(Mq)。4.认证环节收到通知后执行黑名单过滤。当然可以将收到的黑名单存放在本地进程中，当然也可以放在redis中做同步。","like_count":0},{"had_liked":false,"id":236247,"user_name":"Yuhui","can_delete":false,"product_type":"c1","uid":1110470,"ip_address":"","ucode":"811933B016179F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/c6/6f39a982.jpg","comment_is_top":false,"comment_ctime":1595377295,"is_pvip":false,"replies":[{"id":"87291","content":"从理解上，是应该先撤回刷新，再撤回访问，但实际上 程序在执行的时候，是放在一个事务中，要么同时成功，要么同时失败。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1595378761,"ip_address":"","comment_id":236247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595377295","product_id":100053901,"comment_content":"请教老师，图4令牌生命周期序列图里最后两项“撤回访问令牌”和“撤回刷新令牌”是否应该调换一下顺序？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502003,"discussion_content":"从理解上，是应该先撤回刷新，再撤回访问，但实际上 程序在执行的时候，是放在一个事务中，要么同时成功，要么同时失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595378761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235319,"user_name":"lign","can_delete":false,"product_type":"c1","uid":1184192,"ip_address":"","ucode":"5DDDA4680B437D","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/c0/1c0f00ca.jpg","comment_is_top":false,"comment_ctime":1594972934,"is_pvip":false,"replies":[{"id":"88365","content":"如果JWT不额外加密就相当于裸奔。当资源服务器收到加密之后的JWT令牌，会要到秘钥系统请求秘钥，但这个并不会有任何性能上的问题，一般都是直接读取redis存储。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596464141,"ip_address":"","comment_id":235319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594972934","product_id":100053901,"comment_content":"老师，如果对JWT加密，资源服务器收到加密后的JWT串，需要解密时，JWT里面的内容，怎么获取解密密码？需要到独立密钥管理系统请求解密密码？ 如果是这样，JWT协议本身是不是相当于信息在裸奔？如果不额外增加加密过程的话","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501686,"discussion_content":"如果JWT不额外加密就相当于裸奔。当资源服务器收到加密之后的JWT令牌，会要到秘钥系统请求秘钥，但这个并不会有任何性能上的问题，一般都是直接读取redis存储。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596464141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234349,"user_name":"蓝魔丶","can_delete":false,"product_type":"c1","uid":1219438,"ip_address":"","ucode":"2AE4359E263558","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","comment_is_top":false,"comment_ctime":1594652077,"is_pvip":false,"replies":[{"id":"86528","content":"JWT的签名不会变长，如果再为其加密会随着数据内容增多而变长，但我们是不建议把大量的数据放入这样的结构体中的。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594723141,"ip_address":"","comment_id":234349,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594652077","product_id":100053901,"comment_content":"老师，我看了评论说jwt这种token不传递前端进行交互，如果是之前的授权码方式觉得可以不传，如果是用户名密码方式呢？不是还是要传递前端嘛？而且给我的感觉jwt这种token会随着存入的json数据越多越长，基本的json数据就感觉很长了","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501360,"discussion_content":"JWT的签名不会变长，如果再为其加密会随着数据内容增多而变长，但我们是不建议把大量的数据放入这样的结构体中的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594723141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233394,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1594306952,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1594306952","product_id":100053901,"comment_content":"利用 JWT 生成 base64UrlEncode(header).base64UrlEncode(payload).HMACSHA256(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload),11111111111) 这样的一个字符串后，是不是在网络中传输还要把这一串在加密一下？， 要不然就可以直接获取 payload 的信息了， 这里面的 11111111111 就相当于密钥了可以控制到用户级别？","like_count":0,"discussions":[{"author":{"id":1691128,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cd/f8/49ccd32d.jpg","nickname":"Geek_95d25e","note":"","ucode":"2FB5BCE94E9CFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292996,"discussion_content":"HMACSHA256 是重点，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595407189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233054,"user_name":"大秦皇朝","can_delete":false,"product_type":"c1","uid":1301113,"ip_address":"","ucode":"0F72D0D2FAEAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/da/79/9b093890.jpg","comment_is_top":false,"comment_ctime":1594206571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594206571","product_id":100053901,"comment_content":"JWT适合多组权限校验，非JWT(非结构化的)适合接口调用？不知道理解的对不对。","like_count":0},{"had_liked":false,"id":232848,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1594130166,"is_pvip":false,"replies":[{"id":"85991","content":"令牌无论是普通形式的还是JWT格式的，都需要在后端传输。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594217131,"ip_address":"","comment_id":232848,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1594130166","product_id":100053901,"comment_content":"对于小兔来说，jwt放在前端不知道可不可行，老师您觉得在实际中有这么用的吗？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500786,"discussion_content":"令牌无论是普通形式的还是JWT格式的，都需要在后端传输。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594217131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1801058,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/62/ec94cee4.jpg","nickname":"彭文达","note":"","ucode":"8DCC27EC5AF263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":555339,"discussion_content":"我看很多公司都是把jwt放前端header去使用的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646876496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":500786,"ip_address":""},"score":555339,"extra":""}]},{"author":{"id":1679881,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a2/09/1bae9e93.jpg","nickname":"shuta","note":"","ucode":"C27E4D1B1A40D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292485,"discussion_content":"jwt的目的是小兔为了获取京东的订单数据，那么如果放到前端的情况下会出现两个问题：1.京东是否允许小兔打单在用户的浏览器上发起获取订单信息的请求。（备注：很多平台会限制获取这些信息的发起者ip）2.前端获取这些数据后，后端经常还需要存储，比如：用户在小兔打单上对京东订单的操作信息。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595242114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232839,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1594127250,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594127250","product_id":100053901,"comment_content":"小兔一般把令牌存在session里面的吧，不知道还有其他处理方式没有%","like_count":0,"discussions":[{"author":{"id":1679881,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a2/09/1bae9e93.jpg","nickname":"shuta","note":"","ucode":"C27E4D1B1A40D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292484,"discussion_content":"不会放到session中的，如果小兔需要在用户没登录的情况下去京东同步订单，如果用户没登录那么这时需要在数据库中进行取出来令牌，然后进行访问京东的数据的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595241690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232828,"user_name":"inrtyx","can_delete":false,"product_type":"c1","uid":1246178,"ip_address":"","ucode":"81CD18FF34ABAB","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","comment_is_top":false,"comment_ctime":1594125341,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594125341","product_id":100053901,"comment_content":"分布式，用jwt的一个理由","like_count":0},{"had_liked":false,"id":232664,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1594082824,"is_pvip":false,"replies":[{"id":"85902","content":"是的，所以咱们文中也重点强调了加密这点。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594100081,"ip_address":"","comment_id":232664,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1594082824","product_id":100053901,"comment_content":"现在使用JWT令牌在网络传输中是否一定要进行加密，不加密的话是不是相当于裸奔？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500728,"discussion_content":"是的，所以咱们文中也重点强调了加密这点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594100081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1215139,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/a3/aee7ded7.jpg","nickname":"在路上","note":"","ucode":"258880ACE79448","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292161,"discussion_content":"王老师，通过jwt减少了小兔软件发起调用受保护资源时的，授权服务队jwt的验证，本来需要从数据读取相关权限信息，然后不需要。如果加强强制回收，然后需要建立密钥管理系统，调用密钥验证，这样理解是否正确?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595122071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}