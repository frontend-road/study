{"id":109227,"title":"18丨SQLAlchemy：如何使用Python ORM框架来操作MySQL？","content":"<p>上节课，我介绍了Python DB API规范的作用，以及如何使用MySQL官方的mysql-connector驱动来完成数据库的连接和使用。在项目比较小的时候，我们可以直接使用SQL语句，通过mysql-connector完成与MySQL的交互，但是任何事物都有两面性，随着项目规模的增加，代码会越来越复杂，维护的成本也越来越高，这时mysql-connector就不够用了，我们需要更好的设计模式。</p><p>Python还有另一种方式可以与MySQL进行交互，这种方式采用的是ORM框架。我们今天就来讲解如何使用ORM框架操作MySQL，那么今天的课程你需要掌握以下几个方面的内容：</p><ol>\n<li>什么是ORM框架，以及为什么要使用ORM框架？</li>\n<li>Python中的ORM框架都有哪些？</li>\n<li>如何使用SQLAlchemy来完成与MySQL的交互？</li>\n</ol><h2>我们为什么要使用ORM框架？</h2><p>在讲解ORM框架之前，我们需要先了解什么是持久化。如下图所示，持久化层在业务逻辑层和数据库层起到了衔接的作用，它可以将内存中的数据模型转化为存储模型，或者将存储模型转化为内存中的数据模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/5b/b9dafd636ec586704bb8488d9b2faa5b.jpg?wh=655*506\" alt=\"\"></p><p>你可能会想到，我们在讲事务的4大特性ACID时，提到过持久性。你可以简单地理解为，持久性就是将对象数据永久存储在数据库中。通常我们将数据库的作用理解为永久存储，将内存理解为暂时存储。我们在程序的层面操作数据，其实都是把数据放到内存中进行处理，如果需要数据就会通过持久化层，从数据库中取数据；如果需要保存数据，就是将对象数据通过持久化层存储到数据库中。</p><!-- [[[read_end]]] --><p>那么ORM解决的是什么问题呢？它提供了一种持久化模式，可以高效地对数据库进行访问。ORM的英文是Object Relation Mapping，中文叫对象关系映射。它是RDBMS和业务实体对象之间的一个映射，从图中你也能看到，它可以把底层的RDBMS封装成业务实体对象，提供给业务逻辑层使用。程序员往往关注业务逻辑层面，而不是底层数据库该如何访问，以及如何编写SQL语句获取数据等等。采用ORM，就可以从数据库的设计层面转化成面向对象的思维。</p><p>我在开篇的时候提到过，随着项目规模的增大，在代码层编写SQL语句访问数据库会降低开发效率，也会提升维护成本，因此越来越多的开发人员会采用基于ORM的方式来操作数据库。这样做的好处就是一旦定义好了对象模型，就可以让它们简单可复用，从而不必关注底层的数据库访问细节，我们只要将注意力集中到业务逻辑层面就可以了。由此还可以带来另一点好处，那就是即便数据库本身进行了更换，在业务逻辑代码上也不会有大的调整。这是因为ORM抽象了数据的存取，同时也兼容多种DBMS，我们不用关心底层采用的到底是哪种DBMS，是MySQL，SQL Server，PostgreSQL还是SQLite。</p><p>但没有一种模式是完美的，采用ORM当然也会付出一些代价，比如性能上的一些损失。面对一些复杂的数据查询，ORM会显得力不从心。虽然可以实现功能，但相比于直接编写SQL查询语句来说，ORM需要编写的代码量和花费的时间会比较多，这种情况下，直接编写SQL反而会更简单有效。</p><p>其实你也能看出来，没有一种方式是一劳永逸的，在实际工作中，我们需要根据需求选择适合的方式。</p><h2>Python中的ORM框架都有哪些</h2><p>ORM框架帮我们适配了各种DBMS，同时我们也可以选择不同的ORM框架。如果你用Python的话，有三种主流的ORM框架。</p><p>第一个是Django，它是Python的WEB应用开发框架，本身走大而全的方式。Django采用了MTV的框架模式，包括了Model（模型），View（视图）和Template（模版）。Model模型只是Django的一部分功能，我们可以通过它来实现数据库的增删改查操作。</p><p>一个Model映射到一个数据表，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/95/d9ea5e64198554061c729ffb97561795.jpg?wh=634*454\" alt=\"\"><br>\n从这张图上你能直观地看到，ORM的作用就是建立了对象关系映射。模型的每个属性代表数据表中的一个字段，我们通过操作类实例对象，对数据表中的数据行进行增删改查等操作。</p><p>第二个是SQLALchemy，它也是Python中常用的ORM框架之一。它提供了SQL工具包及ORM工具，如果你想用支持ORM和支持原生SQL两种方式的工具，那么SQLALchemy是很好的选择。另外SQLALchemy的社区更加活跃，这对项目实施会很有帮助。</p><p>第三个是peewee，这是一个轻量级的ORM框架，简单易用。peewee采用了Model类、Field实例和Model实例来与数据库建立映射关系，从而完成面向对象的管理方式。使用起来方便，学习成本也低。</p><h2>如何使用SQLAlchemy来操作MySQL</h2><p>下面我们来看下如何使用SQLAlchemy工具对player数据表进行增删改查，在使用前，你需要先安装相应的工具包：</p><pre><code>pip install sqlalchemy\n初始化数据库连接\nfrom sqlalchemy import create_engine\n# 初始化数据库连接，修改为你的数据库用户名和密码\nengine = create_engine('mysql+mysqlconnector://root:password@localhost:3306/wucai')\n</code></pre><p>create_engine的使用方法类似我们在上篇文章中提到的mysql.connector，都需要提供数据库+数据库连接框架，即对应的是<code>mysql+mysqlconnector</code>，后面的是用户名:<code>密码@IP地址:端口号/数据库名称</code>。</p><h3>创建模型</h3><p>我们已经创建了player数据表，这里需要创建相应的player模型。</p><pre><code># 定义Player对象:\nclass Player(Base):\n    # 表的名字:\n    __tablename__ = 'player'\n \n    # 表的结构:\n    player_id = Column(Integer, primary_key=True, autoincrement=True)\n    team_id = Column(Integer)\n    player_name = Column(String(255))\n    height = Column(Float(3,2))\n</code></pre><p>这里需要说明的是，<code>__tablename__</code> 指明了模型对应的数据表名称，即player数据表。同时我们在Player模型中对采用的变量名进行定义，变量名需要和数据表中的字段名称保持一致，否则会找不到数据表中的字段。在SQLAlchemy中，我们采用Column对字段进行定义，常用的数据类型如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/42/d6f02460647f34fba692e8a61b80a042.png?wh=970*394\" alt=\"\"><br>\n除了指定Column的数据类型以外，我们也可以指定Column的参数，这些参数可以帮我们对对象创建列约束：</p><p><img src=\"https://static001.geekbang.org/resource/image/45/dd/458d77c980f2ac7b9e8e34dd75eac8dd.png?wh=975*208\" alt=\"\"><br>\n这里需要说明的是，如果你使用相应的数据类型，那么需要提前在SQLAlchemy中进行引用，比如：</p><pre><code>from sqlalchemy import Column, String, Integer, Float\n</code></pre><h3>对数据表进行增删改查</h3><p>假设我们想给player表增加一名新球员，姓名为“约翰·科林斯”，球队ID为1003（即亚特兰大老鹰），身高为2.08。代码如下：</p><pre><code># 创建DBSession类型:\nDBSession = sessionmaker(bind=engine)\n# 创建session对象:\nsession = DBSession()\n\n\n# 创建Player对象:\nnew_player = Player(team_id = 1003, player_name = &quot;约翰-科林斯&quot;, height = 2.08)\n# 添加到session:\nsession.add(new_player)\n# 提交即保存到数据库:\nsession.commit()\n# 关闭session:\nsession.close()\n</code></pre><p>这里，我们首先需要初始化DBSession，相当于创建一个数据库的会话实例session。通过session来完成新球员的添加。对于新球员的数据，我们可以通过Player类来完成创建，在参数中指定相应的<code>team_id, player_name, height</code>即可。</p><p>然后把创建好的对象new_player添加到session中，提交到数据库即可完成添加数据的操作。</p><p>接着，我们来看一下如何查询数据。</p><p>添加完插入的新球员之后，我们可以查询下身高 ≥ 2.08m的球员都有哪些，代码如下：</p><pre><code>#增加to_dict()方法到Base类中\ndef to_dict(self):\n    return {c.name: getattr(self, c.name, None)\n            for c in self.__table__.columns}\n#将对象可以转化为dict类型\nBase.to_dict = to_dict\n# 查询身高&gt;=2.08的球员有哪些\nrows = session.query(Player).filter(Player.height &gt;= 2.08).all()\nprint([row.to_dict() for row in rows])\n</code></pre><p>运行结果：</p><pre><code>[{'player_id': 10003, 'team_id': 1001, 'player_name': '安德烈-德拉蒙德', 'height': Decimal('2.1100000000')}, {'player_id': 10004, 'team_id': 1001, 'player_name': '索恩-马克', 'height': Decimal('2.1600000000')}, {'player_id': 10009, 'team_id': 1001, 'player_name': '扎扎-帕楚里亚', 'height': Decimal('2.1100000000')}, {'player_id': 10010, 'team_id': 1001, 'player_name': '乔恩-洛伊尔', 'height': Decimal('2.0800000000')}, {'player_id': 10011, 'team_id': 1001, 'player_name': '布雷克-格里芬', 'height': Decimal('2.0800000000')}, {'player_id': 10015, 'team_id': 1001, 'player_name': '亨利-埃伦森', 'height': Decimal('2.1100000000')}, {'player_id': 10023, 'team_id': 1002, 'player_name': '多曼塔斯-萨博尼斯', 'height': Decimal('2.1100000000')}, {'player_id': 10024, 'team_id': 1002, 'player_name': '迈尔斯-特纳', 'height': Decimal('2.1100000000')}, {'player_id': 10032, 'team_id': 1002, 'player_name': 'TJ-利夫', 'height': Decimal('2.0800000000')}, {'player_id': 10033, 'team_id': 1002, 'player_name': '凯尔-奥奎因', 'height': Decimal('2.0800000000')}, {'player_id': 10037, 'team_id': 1002, 'player_name': '伊凯·阿尼博古', 'height': Decimal('2.0800000000')}, {'player_id': 10038, 'team_id': 1003, 'player_name': '约翰-科林斯', 'height': Decimal('2.0800000000')}]\n</code></pre><p>如果我们对整个数据行进行查询，采用的是<code>session.query(Player)</code>，相当于使用的是SELECT *。这时如果我们想要在Python中对query结果进行打印，可以对Base类增加<code>to_dict()</code>方法，相当于将对象转化成了Python的字典类型。</p><p>在进行查询的时候，我们使用的是filter方法，对应的是SQL中的WHERE条件查询。除此之外，filter也支持多条件查询。</p><p>如果是AND的关系，比如我们想要查询身高 ≥ 2.08，同时身高 ≤ 2.10的球员，可以写成下面这样：</p><pre><code>rows = session.query(Player).filter(Player.height &gt;=2.08, Player.height &lt;=2.10).all()\n</code></pre><p>如果是OR的关系，比如我们想要查询身高 ≥ 2.08，或者身高 ≤ 2.10的球员，可以写成这样：</p><pre><code>rows = session.query(Player).filter(or_(Player.height &gt;=2.08, Player.height &lt;=2.10)).all()\n</code></pre><p>这里我们使用了SQLAlchemy的or_操作符，在使用它之前你需要进行引入，即：<code>from sqlalchemy import or_</code>。</p><p>除了多条件查询，SQLAlchemy也同样支持分组操作、排序和返回指定数量的结果。</p><p>比如我想要按照team_id进行分组，同时筛选分组后数据行数大于5的分组，并且按照分组后数据行数递增的顺序进行排序，显示team_id字段，以及每个分组的数据行数。那么代码如下：</p><pre><code>from sqlalchemy import func\nrows = session.query(Player.team_id, func.count(Player.player_id)).group_by(Player.team_id).having(func.count(Player.player_id)&gt;5).order_by(func.count(Player.player_id).asc()).all()\nprint(rows)\n</code></pre><p>运行结果：</p><pre><code>[(1001, 20), (1002, 17)]\n</code></pre><p>这里有几点需要注意：</p><ol>\n<li>我们把需要显示的字段Player.team_id, func.count(Player.player_id)作为query的参数，其中我们需要用到sqlalchemy的func类，它提供了各种聚集函数，比如func.count函数。</li>\n<li>在query()后面使用了group_by()进行分组，参数设置为Player.team_id字段，再使用having对分组条件进行筛选，参数为<code>func.count(Player.player_id)&gt;5</code>。</li>\n<li>使用order_by进行排序，参数为<code>func.count(Player.player_id).asc()</code>，也就是按照分组后的数据行数递增的顺序进行排序，最后使用.all()方法需要返回全部的数据。</li>\n</ol><p>你能看到SQLAlchemy使用的规则和使用SELECT语句的规则差不多，只是封装到了类中作为方法进行调用。</p><p>接着，我们再来看下如何删除数据。如果我们想要删除某些数据，需要先进行查询，然后再从session中把这些数据删除掉。</p><p>比如我们想要删除姓名为约翰·科林斯的球员，首先我们需要进行查询，然后从session对象中进行删除，最后进行commit提交，代码如下：</p><pre><code>row = session.query(Player).filter(Player.player_name=='约翰-科林斯').first()\nsession.delete(row)\nsession.commit()\nsession.close()\n</code></pre><p>需要说明的是，判断球员姓名是否为约翰·科林斯，这里需要使用（==）。</p><p>同样，如果我们想要修改某条数据，也需要进行查询，然后再进行修改。比如我想把球员索恩·马克的身高改成2.17，那么执行完之后直接对session对象进行commit操作，代码如下：</p><pre><code>row = session.query(Player).filter(Player.player_name=='索恩-马克').first()\nrow.height = 2.17\nsession.commit()\nsession.close()\n</code></pre><h2>总结</h2><p>今天我们使用SQLAlalchemy对MySQL进行了操作，你能看到这些实现并不复杂，只是需要事先掌握一些使用方法，尤其是如何创建seesion对象，以及如何通过session对象来完成对数据的增删改查等操作。建议你把文章里的代码都跑一遍，在运行的过程中一定会有更深入的体会。</p><p>当然除了学习掌握SQLAlalchemy这个Python ORM工具以外，我还希望你能了解到ORM的价值和不足。如果项目本身不大，那么自己动手写SQL语句会比较简单，你可以不使用ORM工具，而是直接使用上节课讲到的mysql-connector。但是随着项目代码量的增加，为了在业务逻辑层与数据库底层进行松耦合，采用ORM框架是更加适合的。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/f3/6cffd2ac3be05210ace5cd753ee4aff3.jpg?wh=3341*2164\" alt=\"\"><br>\n我今天讲解了SQLAlalchemy工具的使用，为了更好地让你理解，我出一道练习题吧。还是针对player数据表，请你使用SQLAlalchemy工具查询身高为2.08米的球员，并且将这些球员的身高修改为2.09。</p><p>欢迎你在评论区写下你的答案，也欢迎把这篇文章分享给你的朋友或者同事，一起交流。</p>","comments":[{"had_liked":false,"id":116300,"user_name":"墨禾","can_delete":false,"product_type":"c1","uid":1216590,"ip_address":"","ucode":"81BA44231AABE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/4e/efaea936.jpg","comment_is_top":false,"comment_ctime":1563837598,"is_pvip":false,"replies":[{"id":"63644","content":"整理的不错 大家都可以看下","user_name":"作者回复","comment_id":116300,"uid":"1306094","ip_address":"","utype":1,"ctime":1577526310,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"139002791070","product_id":100029501,"comment_content":"以下从ORM的作用，是什么，优缺点以及一些比较流行的ORM的对比的个人总结：<br><br>1.ORM的作用<br>对象关系映射，能够直接将数据库对象进行持久化。<br><br>在没有ORM前，我们要自己写数据库连接方法，自己在方法里面嵌入原生的sql语句去访问数据表……<br><br>这时问题就来了：<br>数据库名，数据表名完全暴露在代码中，有脱库的风险；<br>需要我们自己处理数据表对象，比如说把数据表中取出的数据转化为标准json等，sql语句安全过滤，数据表、字段别名、兼容多种数据库等一系列的数据处理工作；<br><br>下面介绍一下ORM到底是啥？<br><br>2、ORM是什么？<br>ORM作为数据库层与业务逻辑层之间的一个抽象，能够将业务逻辑的处理持久化为内存对象，交由数据库去处理。其封装了数据库的连接，数据表的操作细节……在文中我们可以看到ORM将sql语句做了封装，我们可以通过filter实现过滤，而不是写where子句。<br><br>ORM真的那么好？<br><br>3、优缺点<br>优点：<br>安全：因为屏蔽了数据库的具体操作细节以及对sql做了严格的过滤，因此能够保证数据库信息的隐蔽性，同时防止sql注入。<br>简单：屏蔽了数据层的访问细节，我们只需要集中注意力处理业务逻辑就可以了。<br><br>缺点：<br>性能低：自动化意味着加载很多即使没有必要的关联和映射，牺牲性能。但ORM也采取了一些补救措施：对象懒加载，缓存技术等。<br><br>学习成本高：面向对象的封装设计，是的我们必须要去了解对象的处理细节。<br><br>难以实现复杂查询：ORM实现的是一些通用的数据处理方法，一些负责的业务处理还是需要自己组装sql。<br><br>那么还有哪些比较流行的ORM呢？<br>hibernate:强调对单条数据的处理<br>mybits:基于自定义配置的sql操作","like_count":33,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459474,"discussion_content":"整理的不错 大家都可以看下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577526310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":115908,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1563766365,"is_pvip":false,"replies":[{"id":"63650","content":"多谢分享","user_name":"作者回复","comment_id":115908,"uid":"1306094","ip_address":"","utype":1,"ctime":1577526438,"user_name_real":"cy"}],"discussion_count":3,"race_medal":0,"score":"87463112285","product_id":100029501,"comment_content":"缺少一些代码，可以参考廖雪峰的这个。<br>https:&#47;&#47;www.liaoxuefeng.com&#47;wiki&#47;1016959663602400&#47;1017803857459008","like_count":20,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459343,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577526438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587071,"discussion_content":"from sphinxcontrib.websupport.storage.sqlalchemy_db import Base","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662732499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1539649,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwZuBRbVUkziazePs2xTKskNpZachRtCBZLHlv4dAUgaBC5qHI292xaxvg3atGnHlDwjIOXPKEbc7zOrtMyicSNg/132","nickname":"罗辑","note":"","ucode":"06AB60316B51C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222228,"discussion_content":"源码缺少Base。\nfrom sqlalchemy.ext.declarative import declarative_base\n# 创建对象的基类:\nBase = declarative_base()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586102291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115885,"user_name":"一叶知秋","can_delete":false,"product_type":"c1","uid":1445189,"ip_address":"","ucode":"15A95FA86B7AE4","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/45/b88a1794.jpg","comment_is_top":false,"comment_ctime":1563762028,"is_pvip":false,"replies":[{"id":"63653","content":"赞下完成作业的同学","user_name":"作者回复","comment_id":115885,"uid":"1306094","ip_address":"","utype":1,"ctime":1577526673,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"53103369580","product_id":100029501,"comment_content":"日常交作业~~~<br><br># -*- coding:utf-8 -*-<br>from sqlalchemy import and_<br>from sqlalchemy import Column, INT, FLOAT, VARCHAR<br>from sqlalchemy import create_engine<br>from sqlalchemy.orm import sessionmaker<br>from sqlalchemy.ext.declarative import declarative_base<br><br>Base = declarative_base()<br><br><br>class Test_db:<br>    def __init__(self):<br>        &quot;&quot;&quot;此处填上自己的连接配置&quot;&quot;&quot;<br>        self.engine = create_engine(<br>            &#39;mysql+pymysql:&#47;&#47;UserName:Password@host:port&#47;Db_Name?charset=utf8&#39;)<br>        db_session = sessionmaker(bind=self.engine)<br>        self.session = db_session()<br><br>    def update(self, target_class, query_filter, target_obj):<br>        &quot;&quot;&quot;<br>        更新操作通用方法<br>        :param target_class: 表对象<br>        :param query_filter: 查询条件<br>        :param target_obj: 更新目标对象<br>        :return:<br>        &quot;&quot;&quot;<br>        try:<br>            self.session.query(target_class).filter(query_filter).update(target_obj)<br>            self.session.commit()<br>            self.session.close()<br>            return True<br>        except Exception as e:<br>            print(e)<br><br><br>class Player(Base):<br>    &quot;&quot;&quot;定义表结构&quot;&quot;&quot;<br>    __tablename__ = &#39;player&#39;<br>    player_id = Column(INT(), primary_key=True)<br>    team_id = Column(INT())<br>    player_name = Column(VARCHAR(255))<br>    height = Column(FLOAT())<br><br>    def __init__(self, player_id, team_id, player_name, height):<br>        self.player_id = player_id<br>        self.team_id = team_id<br>        self.player_name = player_name<br>        self.height = height<br><br><br>if __name__ == &#39;__main__&#39;:<br>    db_obj = Test_db()<br>    query_filter = and_(Player.height == 2.08)<br>    target_obj = {&#39;height&#39;: 2.09}<br>    update_result = db_obj.update(Player, query_filter, target_obj)<br><br>后续更新数量、更新结果等等判断就略过了...<br>（小声bb：什么时候极客时间评论也能支持markdown啊。。）","like_count":12,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459331,"discussion_content":"赞下完成作业的同学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577526673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116270,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1563810510,"is_pvip":false,"replies":[{"id":"63647","content":"Good Job","user_name":"作者回复","comment_id":116270,"uid":"1306094","ip_address":"","utype":1,"ctime":1577526388,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"40218516174","product_id":100029501,"comment_content":"翻了一下SQLAlchemy的官方文档,看到一个简单的办法,作业如下:<br><br>&#39;&#39;&#39;<br><br>作业:<br><br>使用SQLAlchemy工具查询身高为2.08米的球员,并且将这些球员的身高修改为2.09;<br><br><br>参考:<br>\t\t<br>\t\thttps:&#47;&#47;docs.sqlalchemy.org&#47;en&#47;13&#47;core&#47;dml.html<br><br><br>&#39;&#39;&#39;<br><br>from sqlalchemy import Column, String, Integer, Float,create_engine,update<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy.orm import sessionmaker<br>Base = declarative_base()<br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:123456@localhost:3306&#47;geektime-sql&#39;)<br><br><br>class Player(Base):<br>    __tablename__ = &#39;player&#39;<br> <br>    player_id = Column(Integer, primary_key=True, autoincrement=True)<br>    team_id = Column(Integer)<br>    player_name = Column(String(255))<br>    height = Column(Float(3,2))<br><br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None)<br>            for c in self.__table__.columns}<br><br>if __name__ == &#39;__main__&#39;:<br>\tDBSession = sessionmaker(bind=engine)<br>\tsession = DBSession()<br>\tBase.to_dict = to_dict<br>\tprint(&quot;更新前:&quot;)<br>\trows = session.query(Player).filter(Player.height == 2.08).all()<br>\tprint([row.to_dict() for row in rows])<br>\t# 参考: https:&#47;&#47;docs.sqlalchemy.org&#47;en&#47;13&#47;core&#47;dml.html#sqlalchemy.sql.expression.update<br>\tstmt = update(Player).where(Player.height == 2.08).values(height=2.09)<br>\tengine.execute(stmt)<br>\tsession.commit()<br>\trows = session.query(Player).filter(Player.height == 2.09).all()<br>\tprint(&quot;更新后:&quot;)<br>\tprint([row.to_dict() for row in rows])<br>\tsession.close()<br>太长,省略了部分执行结果.自己执行一下,就可以看到完整结果了..<br><br>更新前:<br>[{&#39;player_id&#39;: 10010, &#39;team_id&#39;: 1001, &#39;player_name&#39;: &#39;乔恩-洛伊尔&#39;, &#39;height&#39;: Decimal(&#39;2.0800000000&#39;)}......<br>更新后:<br>[{&#39;player_id&#39;: 10010, &#39;team_id&#39;: 1001, &#39;player_name&#39;: &#39;乔恩-洛伊尔&#39;, &#39;height&#39;: Decimal(&#39;2.0900000000&#39;)}......<br>[Finished in 0.9s]","like_count":9,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459459,"discussion_content":"Good Job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577526388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116114,"user_name":"夜路破晓","can_delete":false,"product_type":"c1","uid":1353577,"ip_address":"","ucode":"9B875F94B759B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hZfficKPGCq2kjFBu9SgaMjibJTEl7iaW1ta6pZNyiaWP8XEsNpunlnsiaOtBpWTXfT5BvRP3qNByml6p9rtBvqewg/132","comment_is_top":false,"comment_ctime":1563788262,"is_pvip":false,"replies":[{"id":"63885","content":"总结的不错","user_name":"作者回复","comment_id":116114,"uid":"1306094","ip_address":"","utype":1,"ctime":1577603390,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"35923526630","product_id":100029501,"comment_content":"框架对实体的映射不难理解,数据库本身就是对现实世界的映射,借由映射将事实转换为数据.<br>代码部分有些基础的也不难理解;基础较弱硬钢的亲们,耐心一条条来缕也可以捋顺,都是基础的东西,无非花费时间长短问题.有几个坑这里记录下,供后来人借鉴:<br>1.关于初始化连接数据库问题.creat_engine的参数这块容易卡壳,可以参考以下文字说明:<br>create_engine(&quot;数据库类型+数据库驱动:&#47;&#47;数据库用户名:数据库密码@IP地址:端口&#47;数据库&quot;，其他参数)<br>2.数据库驱动这块,老师的参考代码是用mysqlconnector,沿承得是上篇中导入mysql-connector包;网上一些资料以及参考其他同学的答案有使用pymysql,要用这个需安装pip install pymysql.这两货对于本篇的学习内容在本质上是一样的,任选一个即可.<br>3.在代码复写过程中,删除操作一直报错.网上查了资料说是跟返回值有关.经过测试,发现问题所在,filter返回结果为None.也就是说没有查询到&quot;约翰-科林斯&quot;.往回倒腾,发现开始新增数据那里,增加的&quot; 约翰-科林斯 &quot;,前后对比后者两侧多了个空格.统一前后,删除操作顺利完成.","like_count":8,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459390,"discussion_content":"总结的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577603390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167824,"user_name":"咕咕咕","can_delete":false,"product_type":"c1","uid":1319375,"ip_address":"","ucode":"E939C1FD951235","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/cf/f47e092d.jpg","comment_is_top":false,"comment_ctime":1577944829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27347748605","product_id":100029501,"comment_content":"代码能不能给完整啊？还说全部跑一遍？不给全给个提示或者文档链接也行吧？还是得看评论的同学补充才知道代码没有给全。","like_count":6},{"had_liked":false,"id":116020,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1563773179,"is_pvip":false,"replies":[{"id":"63886","content":"多谢分享","user_name":"作者回复","comment_id":116020,"uid":"1306094","ip_address":"","utype":1,"ctime":1577603400,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"23038609659","product_id":100029501,"comment_content":"错误解决：<br>如果报如下错误：Authentication plugin &#39;caching_sha2_password&#39; is not supported<br>sqlalchemy.exc.NotSupportedError: (mysql.connector.errors.NotSupportedError) Authentication plugin &#39;caching_sha2_password&#39; is not supported (Background on this error at: http:&#47;&#47;sqlalche.me&#47;e&#47;tw8g)<br>可以参考下面的链接处理：<br>https:&#47;&#47;stackoverflow.com&#47;questions&#47;51783313&#47;how-do-i-get-sqlalchemy-create-engine-with-mysqlconnector-to-connect-using-mysql","like_count":5,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459358,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577603400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171771,"user_name":"白色纯度","can_delete":false,"product_type":"c1","uid":1563854,"ip_address":"","ucode":"7ABC830EE468A1","user_header":"https://static001.geekbang.org/account/avatar/00/17/dc/ce/03fdeb60.jpg","comment_is_top":false,"comment_ctime":1579009825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14463911713","product_id":100029501,"comment_content":"我自己总结的博客链接：https:&#47;&#47;blog.csdn.net&#47;weixin_42564710&#47;article&#47;details&#47;103978476 <br>完整版的代码如下：<br># -*- coding: UTF-8 -*-<br>from sqlalchemy import create_engine<br>from sqlalchemy import Column, String, Integer, Float, or_<br>from sqlalchemy.orm import sessionmaker<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy import func<br><br># 创建对象的基类:<br>Base = declarative_base()<br># 定义 Player 对象:<br>class Player(Base):<br>    # 表的名字:<br>    __tablename__ = &#39;player&#39;<br><br>    # 表的结构:<br>    player_id = Column(Integer, primary_key=True, autoincrement=True)<br>    team_id = Column(Integer)<br>    player_name = Column(String(255))<br>    height = Column(Float(3, 2))<br>    # 增加 to_dict() 方法到 Base 类中<br>    def to_dict(self):<br>        return {c.name: getattr(self, c.name, None) for c in self.__table__.columns}<br>    # 将对象可以转化为 dict 类型<br>    Base.to_dict = to_dict<br>if __name__==&#39;__main__&#39;:<br>    engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:密码@localhost:3306&#47;world&#39;)<br>    # 创建 DBSession 类型:<br>    DBSession = sessionmaker(bind=engine)<br>    # 创建 session 对象:<br>    session = DBSession()<br><br>    # 创建 Player 对象:<br>    new_player = Player(team_id=1101, player_name=&quot; 约翰 - 雪诺 &quot;, height=2.08)<br>    # 添加到 session:<br>    session.add(new_player)<br>    # 提交即保存到数据库:<br>    session.commit()<br>    session.close()<br>    # 查询身高 &gt;=2.08 的球员有哪些<br>    rows_1 = session.query(Player).filter(Player.height &gt;= 2.08).all()<br>    print([row.to_dict() for row in rows_1])<br><br>    rows_2 = session.query(Player).filter(or_(Player.height &gt;=2.08, Player.height &lt;=2.10)).all()<br>    print([row.to_dict() for row in rows_2])<br>    rows_3 = session.query(Player.team_id, func.count(Player.player_id)).group_by(Player.team_id).having(func.count(Player.player_id)&gt;5).order_by(func.count(Player.player_id).asc()).all()<br>    print(rows_3)<br><br><br>    row = session.query(Player).filter(Player.player_name==&#39;索恩-马克&#39;).first()<br>    row.height = 2.19<br>    session.commit()<br>    # 关闭 session:<br>    session.close()<br><br>    row = session.query(Player).filter(Player.player_name == &#39; 约翰 - 雪诺 &#39;).first()<br>    session.delete(ro","like_count":3},{"had_liked":false,"id":130631,"user_name":"Venom","can_delete":false,"product_type":"c1","uid":1187061,"ip_address":"","ucode":"2055AC6F322781","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/f5/fd386689.jpg","comment_is_top":false,"comment_ctime":1567497580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14452399468","product_id":100029501,"comment_content":"老师，建议最后能把完整代码给出来。对于我们没用过的人来讲，缺少一条import语句也很苦恼啊","like_count":3},{"had_liked":false,"id":117346,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1564027701,"is_pvip":false,"replies":[{"id":"63628","content":"可以的 设置个默认值","user_name":"作者回复","comment_id":117346,"uid":"1306094","ip_address":"","utype":1,"ctime":1577525445,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"14448929589","product_id":100029501,"comment_content":"老师，我的表中有个时间字段，我想在插入数据时，自动生成时间应怎么设置该字段，是这样吗：<br>`create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459923,"discussion_content":"可以的 设置个默认值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577525445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116268,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1563810359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14448712247","product_id":100029501,"comment_content":"文章中的示例代码.完整可运行.<br><br>from sqlalchemy import Column, String, Integer, Float,create_engine<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy.orm import sessionmaker<br>Base = declarative_base()<br># 初始化数据库连接，修改为你的数据库用户名和密码<br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:123456@localhost:3306&#47;geektime-sql&#39;)<br><br># 定义 Player 对象:<br>class Player(Base):<br>    # 表的名字:<br>    __tablename__ = &#39;player&#39;<br> <br>    # 表的结构:<br>    player_id = Column(Integer, primary_key=True, autoincrement=True)<br>    team_id = Column(Integer)<br>    player_name = Column(String(255))<br>    height = Column(Float(3,2))<br><br><br># 增加 to_dict() 方法到 Base 类中<br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None)<br>            for c in self.__table__.columns}<br><br><br><br>if __name__ == &#39;__main__&#39;:<br>\t# 创建 DBSession 类型:<br>\tDBSession = sessionmaker(bind=engine)<br>\t# 创建 session 对象:<br>\tsession = DBSession()<br><br>\t# 创建 Player 对象:<br>\tnew_player = Player(team_id = 1003, player_name = &quot;约翰 - 科林斯&quot;, height = 2.08)<br>\t# 添加到 session:<br>\tsession.add(new_player)<br>\t# 提交即保存到数据库:<br>\tsession.commit()<br>\t# 关闭 session:<br>\tsession.close()<br>\t# 将对象可以转化为 dict 类型<br>\tBase.to_dict = to_dict<br>\t# 查询身高 &gt;=2.08 的球员有哪些<br>\t# rows = session.query(Player).filter(Player.height &gt;=2.08, Player.height &lt;=2.10).all()<br>\t# from sqlalchemy import or_<br>\t# rows = session.query(Player).filter(or_(Player.height &gt;=2.08, Player.height &lt;=2.10)).all()<br>\trows = session.query(Player).filter(Player.height &gt;= 2.08).all()<br>\tprint([row.to_dict() for row in rows])<br>\tfrom sqlalchemy import func<br>\trows = session.query(Player.team_id, func.count(Player.player_id)).group_by(Player.team_id).having(func.count(Player.player_id)&gt;5).order_by(func.count(Player.player_id).asc()).all()<br>\tprint(rows)<br>\trow = session.query(Player).filter(Player.player_name==&#39;约翰 - 科林斯&#39;).first()<br>\tsession.delete(row)<br>\tsession.commit()<br>\tsession.close()<br>\trow = session.query(Player).filter(Player.player_name==&#39;索恩-马克&#39;).first()<br>\trow.height = 2.17<br>\tsession.commit()<br>\tsession.close()<br><br><br>","like_count":3},{"had_liked":false,"id":115915,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1563767159,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14448669047","product_id":100029501,"comment_content":"老师你好，能否多讲一些ORM框架的缺点，以及为什么互联网项目大多不用ORM的原因？","like_count":3,"discussions":[{"author":{"id":1120997,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","nickname":"favorlm","note":"","ucode":"CFD52127AA6E1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2865,"discussion_content":"这位同学，请问从哪里获取的数据，大多不用orm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563982088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144692,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/74/c1f0aa46.jpg","nickname":"习惯沉淀","note":"","ucode":"9C590226330AD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2590,"discussion_content":"进错片场了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563780691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1120997,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","nickname":"favorlm","note":"","ucode":"CFD52127AA6E1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144692,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/74/c1f0aa46.jpg","nickname":"习惯沉淀","note":"","ucode":"9C590226330AD3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2866,"discussion_content":"我也好奇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563982097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2590,"ip_address":""},"score":2866,"extra":""}]}]},{"had_liked":false,"id":164893,"user_name":"taoist","can_delete":false,"product_type":"c1","uid":1195004,"ip_address":"","ucode":"D70AFE25CD8F10","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/fc/04a75cd0.jpg","comment_is_top":false,"comment_ctime":1577107685,"is_pvip":true,"replies":[{"id":"63760","content":"Good Job","user_name":"作者回复","comment_id":164893,"uid":"1306094","ip_address":"","utype":1,"ctime":1577531347,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"10167042277","product_id":100029501,"comment_content":"from sqlalchemy import create_engine, Column, Integer, String, Float<br>from sqlalchemy.orm import sessionmaker<br>from sqlalchemy.ext.declarative import declarative_base<br><br>Base = declarative_base()<br><br>engine = create_engine(&quot;mysql+pymysql:&#47;&#47;root:toor@localhost:3306&#47;test&quot;)<br><br>Session = sessionmaker(bind=engine)<br><br><br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None) for c in self.__table__.columns}<br><br><br>Base.to_dict = to_dict<br><br><br>class Player(Base):<br>    __tablename__ = &quot;player&quot;<br><br>    player_id = Column(Integer, primary_key=True, autoincrement=True)<br>    team_id = Column(Integer)<br>    player_name = Column(String(255))<br>    height = Column(Float(3, 2))<br><br><br>session = Session()<br><br>rows = session.query(Player).filter(Player.height == 2.08).all()<br>for row in rows:<br>    print(row.to_dict())<br>    row.height = 2.09<br>session.commit()<br><br><br># 验证<br>rows = session.query(Player).filter(Player.height == 2.09).all()<br>print([row.to_dict() for row in rows])<br><br>session.close()<br><br><br>","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478934,"discussion_content":"Good Job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577531347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115899,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1563763708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153698300","product_id":100029501,"comment_content":"rows = session.query(Player).filter(Player.height==2.08).all()<br>for row in rows:<br>    row.height = 2.09<br>session.commit()<br>session.close()","like_count":2},{"had_liked":false,"id":115886,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1563762032,"is_pvip":false,"replies":[{"id":"42433","content":"rows = session.query(Player.team_id, func.count(Player.player_id)).group_by(Player.team_id).having(func.count(Player.player_id)&gt;5).order_by(func.count(Player.player_id).asc()).all()<br><br>这里使用的是asc()，所以结果应该是：[(1002, 17), (1001, 20)]，你可以再check下order_by的部分","user_name":"作者回复","comment_id":115886,"uid":"1306094","ip_address":"","utype":1,"ctime":1563782722,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"10153696624","product_id":100029501,"comment_content":"上面那个分组查询，按照分组后数据行数递增的顺序进行排序，怎么结果是[(1001, 20), (1002, 17)]，那不是递减？是不是写错了？","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459332,"discussion_content":"rows = session.query(Player.team_id, func.count(Player.player_id)).group_by(Player.team_id).having(func.count(Player.player_id)&amp;gt;5).order_by(func.count(Player.player_id).asc()).all()\n\n这里使用的是asc()，所以结果应该是：[(1002, 17), (1001, 20)]，你可以再check下order_by的部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563782722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117304,"user_name":"Geek_5d805b","can_delete":false,"product_type":"c1","uid":1585504,"ip_address":"","ucode":"23A0EAC120EA9C","user_header":"","comment_is_top":false,"comment_ctime":1564020838,"is_pvip":false,"replies":[{"id":"63629","content":"可以看下评论中同学留言","user_name":"作者回复","comment_id":117304,"uid":"1306094","ip_address":"","utype":1,"ctime":1577525481,"user_name_real":"cy"}],"discussion_count":2,"race_medal":0,"score":"5858988134","product_id":100029501,"comment_content":"to_dict方法这块看不太懂，base类指的是player类吗，谁给讲讲","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459903,"discussion_content":"可以看下评论中同学留言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577525481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8894,"discussion_content":"base类是SQLALchemy通过自身的declarative_base()功能创建的基本映射类，需要我们先定义它，这样后面我们真正项目里的Player类才可以继承它。可以看看官方文档的解释https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/basic_use.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568093598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117280,"user_name":"Geek_5d805b","can_delete":false,"product_type":"c1","uid":1585504,"ip_address":"","ucode":"23A0EAC120EA9C","user_header":"","comment_is_top":false,"comment_ctime":1564018271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858985567","product_id":100029501,"comment_content":"问一下，我们已经创建过了player表，能说一下对于已有的数据库表，怎么直接将存储模型转换为数据模型吗，而不是再按字段新建","like_count":1},{"had_liked":false,"id":117135,"user_name":"🄽🄸🅇🅄🅂","can_delete":false,"product_type":"c1","uid":1000060,"ip_address":"","ucode":"853763C229A5AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","comment_is_top":false,"comment_ctime":1563974918,"is_pvip":false,"replies":[{"id":"63632","content":"对 可以查询相关的文档","user_name":"作者回复","comment_id":117135,"uid":"1306094","ip_address":"","utype":1,"ctime":1577525656,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"5858942214","product_id":100029501,"comment_content":"ORM的使用，更多的不都是通过查文档的吗？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459834,"discussion_content":"对 可以查询相关的文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577525656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116271,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1563810716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858778012","product_id":100029501,"comment_content":"另外,SQLAlchemy和MyBatis有点像，唯一不同的是MyBatis可以把SQL语句写在XML文件里面(当然也可以写在Java方法上)，SQLAlchemy好像只能用字符串方式(在官网暂时没找到其它方式的示例)来写SQL语句.","like_count":1},{"had_liked":false,"id":115794,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1563737821,"is_pvip":false,"replies":[{"id":"42434","content":"我们对数据表进行的增删改查实际上都是通过 session对象来完成的。这里row是定位session对象中想要查询的位置，然后对row.height进行了修改，也就是对session对象中那个查询位置的height进行了修改。这时数据表中的内容还没有更新，需要采用session.commit()来完成持久化。所以重点是我们修改了session对象的数据，然后进行了session.commit()<br>","user_name":"作者回复","comment_id":115794,"uid":"1306094","ip_address":"","utype":1,"ctime":1563783422,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"5858705117","product_id":100029501,"comment_content":"老师好，对于修改数据的事例有一点困惑还请您解答。对于下面这段代码中<br><br>row = session.query(Player).filter(Player.player_name==&#39;索恩 - 马克&#39;).first()<br>row.height = 2.17<br>session.commit()<br>session.close()<br><br>我理解row是存在于内存中的对象，但是我们在修改后并没有传递到数据库中，如果直接commit可以进行修改的话，这个row是在哪里存放的对象呢？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459290,"discussion_content":"我们对数据表进行的增删改查实际上都是通过 session对象来完成的。这里row是定位session对象中想要查询的位置，然后对row.height进行了修改，也就是对session对象中那个查询位置的height进行了修改。这时数据表中的内容还没有更新，需要采用session.commit()来完成持久化。所以重点是我们修改了session对象的数据，然后进行了session.commit()\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563783422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356963,"user_name":"年少挽滑稽世无双","can_delete":false,"product_type":"c1","uid":2962599,"ip_address":"四川","ucode":"793DCBDE25A07B","user_header":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","comment_is_top":false,"comment_ctime":1662731176,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662731176","product_id":100029501,"comment_content":"from sphinxcontrib.websupport.storage.sqlalchemy_db import Base<br>from sqlalchemy import create_engine, or_, func<br>from sqlalchemy.orm import sessionmaker<br>from orm.orm1 import Player<br><br># 初始化数据库连接，修改为你的数据库用户名和密码<br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:password@localhost:3308&#47;nba?auth_plugin=mysql_native_password&#39;)<br><br><br># 增加to_dict()方法到Base类中<br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None)<br>            for c in self.__table__.columns}<br><br><br># 创建DBSession类型:<br>DBSession = sessionmaker(bind=engine)<br># 创建session对象:<br>session = DBSession()<br><br># 将对象可以转化为dict类型<br>Base.to_dict = to_dict<br><br># 查询身高为 2.08 米的球员，并且将这些球员的身高修改为 2.09。<br>rows = session.query(Player).filter(Player.height == 2.08).all()<br>print(&quot;更新前：&quot;)<br>print([row.to_dict() for row in rows])<br>rows = session.query(Player).filter(Player.height == 2.08).update({&quot;height&quot;: &quot;2.09&quot;})<br>session.commit()<br>rows2 = session.query(Player).filter(Player.height == 2.09).all()<br>print(&quot;更新后：&quot;)<br>print([row2.to_dict() for row2 in rows2])<br><br># 关闭session:<br>session.close()<br>","like_count":0},{"had_liked":false,"id":300187,"user_name":"忧伤的胡萝卜","can_delete":false,"product_type":"c1","uid":2352625,"ip_address":"","ucode":"6881B0A6AED809","user_header":"https://static001.geekbang.org/account/avatar/00/23/e5/f1/880994da.jpg","comment_is_top":false,"comment_ctime":1625039517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625039517","product_id":100029501,"comment_content":"有个地方没太明白。rows这个对象为什么会有to_dict()这个方法？","like_count":0},{"had_liked":false,"id":283688,"user_name":"Geek_2caf97","can_delete":false,"product_type":"c1","uid":2415095,"ip_address":"","ucode":"DE9BA185C68C37","user_header":"","comment_is_top":false,"comment_ctime":1615885605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615885605","product_id":100029501,"comment_content":"我想的是flink sql这种能算一种orm么，因为他也对业务逻辑封装了，也可以持久化","like_count":0},{"had_liked":false,"id":271418,"user_name":"H","can_delete":false,"product_type":"c1","uid":2370639,"ip_address":"","ucode":"D932D7F9DAFDB8","user_header":"https://static001.geekbang.org/account/avatar/00/24/2c/4f/be77ceac.jpg","comment_is_top":false,"comment_ctime":1609602786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609602786","product_id":100029501,"comment_content":"sqlalchemy.exc.InvalidRequestError: SQL expression, column, or mapped entity expected - got &#39;&lt;class &#39;__main__.ones_project&#39;&gt;&#39;<br>","like_count":0},{"had_liked":false,"id":246052,"user_name":"xiaopi3","can_delete":false,"product_type":"c1","uid":1837697,"ip_address":"","ucode":"1C92D0CDC0B39E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/0a/81/69fecff9.jpg","comment_is_top":false,"comment_ctime":1599144610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599144610","product_id":100029501,"comment_content":"# -*- coding: utf-8 -*-<br>&quot;&quot;&quot;<br>Created on Thu Sep  3 20:14:33 2020<br><br>@author: PP<br>&quot;&quot;&quot;<br><br>from sqlalchemy import create_engine, Column, Integer, String, Float<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy.orm import sessionmaker<br><br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:123456@localhost:3306&#47;ooo&#39;)<br>Base = declarative_base()<br><br>#增加to_dict()方法到Base类中<br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None)<br>            for c in self.__table__.columns}<br>#将对象可以转化为dict类型<br>Base.to_dict = to_dict<br><br><br>class Player(Base):<br>    __tablename__=&#39;player&#39;<br>    <br>    player_id=Column(Integer,primary_key=True)<br>    player_name=Column(String(255))<br>    height=Column(Float(3,2))<br>    <br>DBSession=sessionmaker(bind=engine)<br>session=DBSession()<br><br>rows=session.query(Player).filter(Player.height==2.08).all()<br>print(&quot;更新前&quot;)<br>print([row.to_dict() for row in rows])<br><br>rows=session.query(Player).filter(Player.height==2.08).update({&quot;height&quot;:&quot;2.09&quot;})<br>session.commit()<br><br>rows=session.query(Player).filter(Player.height==2.09).all()<br>print(&quot;更新后&quot;)<br>print([row.to_dict() for row in rows])","like_count":0},{"had_liked":false,"id":204883,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1586486581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586486581","product_id":100029501,"comment_content":"老师您好：<br><br>pip install sqlalchemy<br>初始化数据库连接<br>from sqlalchemy import create_engine<br># 初始化数据库连接，修改为你的数据库用户名和密码<br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:password@localhost:3306&#47;wucai&#39;)<br>这里的代码都是传入的明文的用户名和密码，有什么方法传入密文的用户名和密码吗？","like_count":0},{"had_liked":false,"id":204134,"user_name":"彭纪程","can_delete":false,"product_type":"c1","uid":1682468,"ip_address":"","ucode":"F9222D72E791C8","user_header":"https://static001.geekbang.org/account/avatar/00/19/ac/24/0684a141.jpg","comment_is_top":false,"comment_ctime":1586339274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586339274","product_id":100029501,"comment_content":"from sqlalchemy import create_engine<br># 初始化数据库连接，修改为你的数据库用户名和密码<br>engine = create_engine(&#39;mysql+mysqlconnector:&#47;&#47;root:Xlkfems123@localhost:3306&#47;nba&#39;)<br>from sqlalchemy.orm import sessionmaker<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy import Column, String, Integer, Float<br>Base = declarative_base()<br>class Player(Base):<br>    # 表的名字:<br>    __tablename__ = &#39;player&#39;<br> <br>    # 表的结构:<br>    player_id = Column(Integer, primary_key=True, autoincrement=True)<br>    team_id = Column(Integer)<br>    player_name = Column(String(255))<br>    height = Column(Float(3,2))<br>def to_dict(self):<br>    return {c.name: getattr(self, c.name, None)<br>            for c in self.__table__.columns}<br>#将对象可以转化为dict类型<br>Base.to_dict = to_dict<br>DBSession = sessionmaker(bind=engine)<br># 创建session对象:<br>session = DBSession()<br>rows= session.query(Player).filter(Player.height == 2.08).all()<br>for each in rows:<br>    each.height = 2.09<br>session.commit()<br>results = session.query(Player).order_by(Player.height.desc()).all()<br><br>print([row.to_dict() for row in results])<br>session.close()","like_count":0},{"had_liked":false,"id":132176,"user_name":"骑行的掌柜J","can_delete":false,"product_type":"c1","uid":1474214,"ip_address":"","ucode":"3163102651C653","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","comment_is_top":false,"comment_ctime":1568037022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568037022","product_id":100029501,"comment_content":"陈老师 ，你在增加数据库数据哪里是不是少导入了两个类和一行定义Base的代码？<br>from sqlalchemy.ext.declarative import declarative_base<br>#引用基本映射类<br>from sqlalchemy.orm import sessionmaker<br>#引用session类操作后面的增删改查<br><br>Base = declarative_base()<br>#建立基本映射类，方便后面真正的映射类Player来继承它","like_count":0},{"had_liked":false,"id":122804,"user_name":"我在你的视线里","can_delete":false,"product_type":"c1","uid":1480312,"ip_address":"","ucode":"5373F30E75C07E","user_header":"https://static001.geekbang.org/account/avatar/00/16/96/78/eb86673c.jpg","comment_is_top":false,"comment_ctime":1565530222,"is_pvip":false,"replies":[{"id":"63537","content":"创建的DBSession ","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577517314,"ip_address":"","comment_id":122804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565530222","product_id":100029501,"comment_content":"session对象是django自带的。还是在项目里创建的。","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462411,"discussion_content":"创建的DBSession ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577517314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}