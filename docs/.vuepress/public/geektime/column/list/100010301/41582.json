{"id":41582,"title":"36 | SubstrateVM：AOT编译框架","content":"<p>今天我们来聊聊GraalVM中的Ahead-Of-Time（AOT）编译框架SubstrateVM。</p>\n<p>先来介绍一下AOT编译，所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。</p>\n<p>而AOT编译指的则是，在<strong>程序运行之前</strong>，便将字节码转换为机器码的过程。它的成果可以是需要链接至托管环境中的动态共享库，也可以是独立运行的可执行文件。</p>\n<p>狭义的AOT编译针对的目标代码需要与即时编译的一致，也就是针对那些原本可以被即时编译的代码。不过，我们也可以简单地将AOT编译理解为类似于GCC的静态编译器。</p>\n<p>AOT编译的优点显而易见：我们无须在运行过程中耗费CPU资源来进行即时编译，而程序也能够在启动伊始就达到理想的性能。</p>\n<p>然而，与即时编译相比，AOT编译无法得知程序运行时的信息，因此也无法进行基于类层次分析的完全虚方法内联，或者基于程序profile的投机性优化（并非硬性限制，我们可以通过限制运行范围，或者利用上一次运行的程序profile来绕开这两个限制）。这两者都会影响程序的峰值性能。</p>\n<p>Java 9引入了实验性AOT编译工具<a href=\"http://openjdk.java.net/jeps/295\">jaotc</a>。它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中。</p><!-- [[[read_end]]] -->\n<p>在启动过程中，Java虚拟机将加载参数<code>-XX:AOTLibrary</code>所指定的动态共享库，并部署其中的机器码。这些机器码的作用机理和即时编译生成的机器码作用机理一样，都是在方法调用时切入，并能够去优化至解释执行。</p>\n<p>由于Java虚拟机可能通过Java agent或者C agent改动所加载的字节码，或者这份AOT编译生成的机器码针对的是旧版本的Java类，因此它需要额外的验证机制，来保证即将链接的机器码的语义与对应的Java类的语义是一致的。</p>\n<p>jaotc使用的机制便是类指纹（class fingerprinting）。它会在动态共享库中保存被AOT编译的Java类的摘要信息。在运行过程中，Java虚拟机负责将该摘要信息与已加载的Java类相比较，一旦不匹配，则直接舍弃这份AOT编译的机器码。</p>\n<p>jaotc的一大应用便是编译java.base module，也就是Java核心类库中最为基础的类。这些类很有可能会被应用程序所调用，但调用频率未必高到能够触发即时编译。</p>\n<p>因此，如果Java虚拟机能够使用AOT编译技术，将它们提前编译为机器码，那么将避免在执行即时编译生成的机器码时，因为“不小心”调用到这些基础类，而需要切换至解释执行的性能惩罚。</p>\n<p>不过，今天要介绍的主角并非jaotc，而是同样使用了Graal编译器的AOT编译框架SubstrateVM。</p>\n<h2>SubstrateVM的设计与实现</h2>\n<p>SubstrateVM的设计初衷是提供一个高启动性能、低内存开销，并且能够无缝衔接C代码的Java运行时。它与jaotc的区别主要有两处。</p>\n<p>第一，SubstrateVM脱离了HotSpot虚拟机，并拥有独立的运行时，包含异常处理，同步，线程管理，内存管理（垃圾回收）和JNI等组件。</p>\n<p>第二，SubstrateVM要求目标程序是封闭的，即不能动态加载其他类库等。基于这个假设，SubstrateVM将探索整个编译空间，并通过静态分析推算出所有虚方法调用的目标方法。最终，SubstrateVM会将所有可能执行到的方法都纳入编译范围之中，从而免于实现额外的解释执行器。</p>\n<blockquote>\n<p>有关SubstrateVM的其他限制，你可以参考<a href=\"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\">这篇文档</a>。</p>\n</blockquote>\n<p>从执行时间上来划分，SubstrateVM可分为两部分：native image generator以及SubstrateVM运行时。后者SubstrateVM运行时便是前面提到的精简运行时，经过AOT编译的目标程序将跑在该运行时之上。</p>\n<p>native image generator则包含了真正的AOT编译逻辑。它本身是一个Java程序，将使用Graal编译器将Java类文件编译为可执行文件或者动态链接库。</p>\n<p>在进行编译之前，native image generator将采用指针分析（points-to analysis），从用户提供的程序入口出发，探索所有可达的代码。在探索的同时，它还将执行初始化代码，并在最终生成可执行文件时，将已初始化的堆保存至一个堆快照之中。这样一来，SubstrateVM将直接从目标程序开始运行，而无须重复进行Java虚拟机的初始化。</p>\n<p>SubstrateVM主要用于Java虚拟机语言的AOT编译，例如Java、Scala以及Kotlin。Truffle语言实现本质上就是Java程序，而且它所有用到的类都是编译时已知的，因此也适合在SubstrateVM上运行。不过，它并不会AOT编译用Truffle语言写就的程序。</p>\n<h2>SubstrateVM的启动时间与内存开销</h2>\n<p>SubstrateVM的启动时间和内存开销非常少。我们曾比较过用C和用Java两种语言写就的Hello World程序。C程序的执行时间在10ms以下，内存开销在500KB以下。在HotSpot虚拟机上运行的Java程序则需要40ms，内存开销为24MB。</p>\n<p>使用SubstrateVM的Java程序的执行时间则与C程序持平，内存开销在850KB左右。这得益于SubstrateVM所保存的堆快照，以及无须额外初始化，直接执行目标代码的特性。</p>\n<p>同样，我们还比较了用JavaScript编写的Hello World程序。这里的测试对象是Google的V8以及基于Truffle的Graal.js。这两个执行引擎都涉及了大量的解析代码以及执行代码，因此可以当作大型应用程序来看待。</p>\n<p>V8的执行效率非常高，能够与C程序的Hello World相媲美，但是它使用了约18MB的内存。运行在HotSpot虚拟机上的Graal.js则需要650ms方能执行完这段JavaScript的Hello World程序，而且内存开销在120MB左右。</p>\n<p>运行在SubstrateVM上的Graal.js无论是执行时间还是内存开销都十分优越，分别为10ms以下以及4.2MB。我们可以看到，它在运行时间与V8持平的情况下，内存开销远小于V8。</p>\n<p>由于SubstrateVM的轻量特性，它十分适合于嵌入至其他系统之中。Oracle Labs的另一个团队便是将Truffle语言实现嵌入至Oracle数据库之中，这样就可以在数据库中运行任意语言的预储程序（stored procedure）。如果你感兴趣的话，可以搜索Oracle Database Multilingual Engine（MLE），或者参阅这个<a href=\"https://www.oracle.com/technetwork/database/multilingual-engine/overview/index.html\">网址</a>。我们团队也在与MySQL合作，开发MySQL MLE，详情可留意我们在今年Oracle Code One的<a href=\"https://oracle.rainfocus.com/widget/oracle/oow18/catalogcodeone18?search=MySQL%20JavaScript\">讲座</a>。</p>\n<h2>Metropolis项目</h2>\n<p>去年OpenJDK推出了<a href=\"http://openjdk.java.net/projects/metropolis/\">Metropolis项目</a>，他们希望可以实现“Java-on-Java”的远大目标。</p>\n<p>我们知道，目前HotSpot虚拟机的绝大部分代码都是用C++写的。这也造就了一个非常有趣的现象，那便是对Java语言本身的贡献需要精通C++。此外，随着HotSpot项目日渐庞大，维护难度也逐渐上升。</p>\n<p>由于上述种种原因，使用Java来开发Java虚拟机的呼声越来越高。Oracle的架构师John Rose便提出了使用Java开发Java虚拟机的四大好处：</p>\n<ol>\n<li>能够完全控制编译Java虚拟机时所使用的优化技术；</li>\n<li>能够与C++语言的更新解耦合；</li>\n<li>能够减轻开发人员以及维护人员的负担；</li>\n<li>能够以更为敏捷的方式实现Java的新功能。</li>\n</ol>\n<p>当然，Metropolis项目并非第一个提出Java-on-Java概念的项目。实际上，<a href=\"https://www.jikesrvm.org/\">JikesRVM项目</a>和<a href=\"https://github.com/beehive-lab/Maxine-VM\">Maxine VM项目</a>都已用Java完整地实现了一套Java虚拟机（后者的即时编译器C1X便是Graal编译器的前身）。</p>\n<p>然而，Java-on-Java技术通常会干扰应用程序的垃圾回收、即时编译优化，从而严重影响Java虚拟机的启动性能。</p>\n<p>举例来说，目前使用了Graal编译器的HotSpot虚拟机会在即时编译过程中生成大量的Java对象，这些Java对象同样会占据应用程序的堆空间，从而使得垃圾回收更加频繁。</p>\n<p>另外，Graal编译器本身也会触发即时编译，并与应用程序的即时编译竞争编译线程的CPU资源。这将造成应用程序从解释执行切换至即时编译生成的机器码的时间大大地增长，从而降低应用程序的启动性能。</p>\n<p>Metropolis项目的第一个子项目便是探索部署已AOT编译的Graal编译器的可能性。这个子项目将借助SubstrateVM技术，把整个Graal编译器AOT编译为机器码。</p>\n<p>这样一来，在运行过程中，Graal编译器不再需要被即时编译，因此也不会再占据可用于即时编译应用程序的CPU资源，使用Graal编译器的HotSpot虚拟机的启动性能将得到大幅度地提升。</p>\n<p>此外，由于SubstrateVM编译得到的Graal编译器将使用独立的堆空间，因此Graal编译器在即时编译过程中生成的Java对象将不再干扰应用程序所使用的堆空间。</p>\n<p>目前Metropolis项目仍处于前期验证阶段，如果你感兴趣的话，可以关注之后的发展情况。</p>\n<h2>总结与实践</h2>\n<p>今天我介绍了GraalVM中的AOT编译框架SubstrateVM。</p>\n<p>SubstrateVM的设计初衷是提供一个高启动性能、低内存开销，和能够无缝衔接C代码的Java运行时。它是一个独立的运行时，拥有自己的内存管理等组件。</p>\n<p>SubstrateVM要求所要AOT编译的目标程序是封闭的，即不能动态加载其他类库等。在进行AOT编译时，它会探索所有可能运行到的方法，并全部纳入编译范围之内。</p>\n<p>SubstrateVM的启动时间和内存开销都非常少，这主要得益于在AOT编译时便已保存了已初始化好的堆快照，并支持从程序入口直接开始运行。作为对比，HotSpot虚拟机在执行main方法前需要执行一系列的初始化操作，因此启动时间和内存开销都要远大于运行在SubstrateVM上的程序。</p>\n<p>Metropolis项目将运用SubstrateVM项目，逐步地将HotSpot虚拟机中的C++代码替换成Java代码，从而提升HotSpot虚拟机的可维护性，也加快新Java功能的开发效率。</p>\n<hr />\n<p>今天的实践环节，请你参考我们官网的<a href=\"https://www.graalvm.org/docs/examples/java-kotlin-aot/\">SubstrateVM教程</a>，AOT编译一段Java-Kotlin代码。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":31951,"user_name":"Jimbol","can_delete":false,"product_type":"c1","uid":1178008,"ip_address":"","ucode":"8D9190B3B3E08B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/98/95b13446.jpg","comment_is_top":false,"comment_ctime":1539340769,"is_pvip":false,"replies":[{"id":"11574","content":"嗯嗯，等我歇一段时间哈，这连续这么多期写得太累了。","user_name":"作者回复","comment_id":31951,"uid":"1176688","ip_address":"","utype":1,"ctime":1539359289,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"53078948321","product_id":100010301,"comment_content":"老师好，写了这么多期，老师辛苦了！老师能否多写一些关于jvm性能优化调优，或者开发中常见的坑呢？太深奥的内容对一线开发来说好遥远","like_count":12,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426578,"discussion_content":"嗯嗯，等我歇一段时间哈，这连续这么多期写得太累了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539359289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","nickname":"有米","note":"","ucode":"C9A10B7A67BC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236122,"discussion_content":"老师，歇够了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587055089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210483,"discussion_content":"期待实战中的JVM调优！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584730582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34281,"user_name":"dyangx","can_delete":false,"product_type":"c1","uid":1255862,"ip_address":"","ucode":"D33CF4BAC3100D","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/b6/37ad78e0.jpg","comment_is_top":false,"comment_ctime":1540085881,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18719955065","product_id":100010301,"comment_content":"今后有可能java 11会收费吗","like_count":4,"discussions":[{"author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555602,"discussion_content":"可以用openJDK。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646986923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1164626,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c5/52/63008fc7.jpg","nickname":"xuwei","note":"","ucode":"07268C1743839F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29858,"discussion_content":"老师在Oracle工作，不能回答这样的问题。至于收不收费，看openjdk","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570787702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62941,"user_name":"BD","can_delete":false,"product_type":"c1","uid":1228560,"ip_address":"","ucode":"A95CF8C3EDC228","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","comment_is_top":false,"comment_ctime":1548211200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5843178496","product_id":100010301,"comment_content":"在Java开源框架源码里经常看到一种写法，object a=new object; object b=a; 接下来直接操作b。我想问这里为什么不直接操作a非要“多此一举”的赋值给b再操作b呢","like_count":2},{"had_liked":false,"id":32673,"user_name":"横云断岭","can_delete":false,"product_type":"c1","uid":1182078,"ip_address":"","ucode":"C7BD049A408398","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/7e/11cf22de.jpg","comment_is_top":false,"comment_ctime":1539661242,"is_pvip":false,"replies":[{"id":"11920","content":"对于能够被SVM编译的(也就是不包含动态类加载等)Java应用程序而言，原则上SVM和HotSpot VM应该是等价的，能在HS跑就应该能在SVM上跑，否则就是SVM的bug了。<br><br>如果想要调试SVM本身或者SVM编译的Java应用的话，只能上GDB了。如果是SVM编译的Truffle语言的话，我们在Truffle语言层面实现了Chrome DevTools Protocal，可以直接用Chrome调试。","user_name":"作者回复","comment_id":32673,"uid":"1176688","ip_address":"","utype":1,"ctime":1539680487,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"5834628538","product_id":100010301,"comment_content":"请问SubstrateVM怎样调试？因为传统的java排查工具都失效了。使用方更加关注的是易用性。","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426852,"discussion_content":"对于能够被SVM编译的(也就是不包含动态类加载等)Java应用程序而言，原则上SVM和HotSpot VM应该是等价的，能在HS跑就应该能在SVM上跑，否则就是SVM的bug了。\n\n如果想要调试SVM本身或者SVM编译的Java应用的话，只能上GDB了。如果是SVM编译的Truffle语言的话，我们在Truffle语言层面实现了Chrome DevTools Protocal，可以直接用Chrome调试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539680487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139054,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1570536735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570536735","product_id":100010301,"comment_content":"谢谢老师辛勤付出，对于JVM有了通盘的理解，也有jvm未来发展。svm无意之间也为java-on-java做出不少努力，😁","like_count":1},{"had_liked":false,"id":32089,"user_name":"wahaha","can_delete":false,"product_type":"c1","uid":1051402,"ip_address":"","ucode":"E60166599CF31D","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/0a/fa152399.jpg","comment_is_top":false,"comment_ctime":1539411799,"is_pvip":false,"replies":[{"id":"12166","content":"32位X86暂时没计划，ARM应该会有，取决于RedHat以及我们负责Aarch64的工程师的效率。","user_name":"作者回复","comment_id":32089,"uid":"1176688","ip_address":"","utype":1,"ctime":1539955676,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"1539411799","product_id":100010301,"comment_content":"老师，SubstrateVM以后会支持32位的X86和ARM处理器吗？","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426631,"discussion_content":"32位X86暂时没计划，ARM应该会有，取决于RedHat以及我们负责Aarch64的工程师的效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539955676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}