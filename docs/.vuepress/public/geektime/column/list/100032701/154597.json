{"id":154597,"title":"33 | 自己动手写高性能HTTP服务器（二）：I/O模型和多线程模型实现","content":"<p>你好，我是盛延敏，这里是网络编程实战第33讲，欢迎回来。</p><p>这一讲，我们延续第32讲的话题，继续解析高性能网络编程框架的I/O模型和多线程模型设计部分。</p><h2>多线程设计的几个考虑</h2><p>在我们的设计中，main reactor线程是一个acceptor线程，这个线程一旦创建，会以event_loop形式阻塞在event_dispatcher的dispatch方法上，实际上，它在等待监听套接字上的事件发生，也就是已完成的连接，一旦有连接完成，就会创建出连接对象tcp_connection，以及channel对象等。</p><p>当用户期望使用多个sub-reactor子线程时，主线程会创建多个子线程，每个子线程在创建之后，按照主线程指定的启动函数立即运行，并进行初始化。随之而来的问题是，<strong>主线程如何判断子线程已经完成初始化并启动，继续执行下去呢？这是一个需要解决的重点问题。</strong></p><p>在设置了多个线程的情况下，需要将新创建的已连接套接字对应的读写事件交给一个sub-reactor线程处理。所以，这里从thread_pool中取出一个线程，<strong>通知这个线程有新的事件加入。而这个线程很可能是处于事件分发的阻塞调用之中，如何协调主线程数据写入给子线程，这是另一个需要解决的重点问题。</strong></p><!-- [[[read_end]]] --><p>子线程是一个event_loop线程，它阻塞在dispatch上，一旦有事件发生，它就会查找channel_map，找到对应的处理函数并执行它。之后它就会增加、删除或修改pending事件，再次进入下一轮的dispatch。</p><p>这张图阐述了线程的运行关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/14/55bb7ef8659395e39395b109dbd28f14.png?wh=1122*968\" alt=\"\"><br>\n为了方便你理解，我把对应的函数实现列在了另外一张图中。</p><p><img src=\"https://static001.geekbang.org/resource/image/da/ca/dac29d3a8fc4f26a09af9e18fc16b2ca.jpg?wh=3500*3002\" alt=\"\"></p><h2>主线程等待多个sub-reactor子线程初始化完</h2><p>主线程需要等待子线程完成初始化，也就是需要获取子线程对应数据的反馈，而子线程初始化也是对这部分数据进行初始化，实际上这是一个多线程的通知问题。采用的做法在<a href=\"https://time.geekbang.org/column/article/145464\">前面</a>讲多线程的时候也提到过，使用mutex和condition两个主要武器。</p><p>下面这段代码是主线程发起的子线程创建，调用event_loop_thread_init对每个子线程初始化，之后调用event_loop_thread_start来启动子线程。注意，如果应用程序指定的线程池大小为0，则直接返回，这样acceptor和I/O事件都会在同一个主线程里处理，就退化为单reactor模式。</p><pre><code>//一定是main thread发起\nvoid thread_pool_start(struct thread_pool *threadPool) {\n    assert(!threadPool-&gt;started);\n    assertInSameThread(threadPool-&gt;mainLoop);\n\n    threadPool-&gt;started = 1;\n    void *tmp;\n\n    if (threadPool-&gt;thread_number &lt;= 0) {\n        return;\n    }\n\n    threadPool-&gt;eventLoopThreads = malloc(threadPool-&gt;thread_number * sizeof(struct event_loop_thread));\n    for (int i = 0; i &lt; threadPool-&gt;thread_number; ++i) {\n        event_loop_thread_init(&amp;threadPool-&gt;eventLoopThreads[i], i);\n        event_loop_thread_start(&amp;threadPool-&gt;eventLoopThreads[i]);\n    }\n}\n</code></pre><p>我们再看一下event_loop_thread_start这个方法，这个方法一定是主线程运行的。这里我使用了pthread_create创建了子线程，子线程一旦创建，立即执行event_loop_thread_run，我们稍后将看到，event_loop_thread_run进行了子线程的初始化工作。这个函数最重要的部分是使用了pthread_mutex_lock和pthread_mutex_unlock进行了加锁和解锁，并使用了pthread_cond_wait来守候eventLoopThread中的eventLoop的变量。</p><pre><code>//由主线程调用，初始化一个子线程，并且让子线程开始运行event_loop\nstruct event_loop *event_loop_thread_start(struct event_loop_thread *eventLoopThread) {\n    pthread_create(&amp;eventLoopThread-&gt;thread_tid, NULL, &amp;event_loop_thread_run, eventLoopThread);\n\n    assert(pthread_mutex_lock(&amp;eventLoopThread-&gt;mutex) == 0);\n\n    while (eventLoopThread-&gt;eventLoop == NULL) {\n        assert(pthread_cond_wait(&amp;eventLoopThread-&gt;cond, &amp;eventLoopThread-&gt;mutex) == 0);\n    }\n    assert(pthread_mutex_unlock(&amp;eventLoopThread-&gt;mutex) == 0);\n\n    yolanda_msgx(&quot;event loop thread started, %s&quot;, eventLoopThread-&gt;thread_name);\n    return eventLoopThread-&gt;eventLoop;\n}\n</code></pre><p>为什么要这么做呢？看一下子线程的代码你就会大致明白。子线程执行函数event_loop_thread_run一上来也是进行了加锁，之后初始化event_loop对象，当初始化完成之后，调用了pthread_cond_signal函数来通知此时阻塞在pthread_cond_wait上的主线程。这样，主线程就会从wait中苏醒，代码得以往下执行。子线程本身也通过调用event_loop_run进入了一个无限循环的事件分发执行体中，等待子线程reator上注册过的事件发生。</p><pre><code>void *event_loop_thread_run(void *arg) {\n    struct event_loop_thread *eventLoopThread = (struct event_loop_thread *) arg;\n\n    pthread_mutex_lock(&amp;eventLoopThread-&gt;mutex);\n\n    // 初始化化event loop，之后通知主线程\n    eventLoopThread-&gt;eventLoop = event_loop_init();\n    yolanda_msgx(&quot;event loop thread init and signal, %s&quot;, eventLoopThread-&gt;thread_name);\n    pthread_cond_signal(&amp;eventLoopThread-&gt;cond);\n\n    pthread_mutex_unlock(&amp;eventLoopThread-&gt;mutex);\n\n    //子线程event loop run\n    eventLoopThread-&gt;eventLoop-&gt;thread_name = eventLoopThread-&gt;thread_name;\n    event_loop_run(eventLoopThread-&gt;eventLoop);\n}\n</code></pre><p>可以看到，这里主线程和子线程共享的变量正是每个event_loop_thread的eventLoop对象，这个对象在初始化的时候为NULL，只有当子线程完成了初始化，才变成一个非NULL的值，这个变化是子线程完成初始化的标志，也是信号量守护的变量。通过使用锁和信号量，解决了主线程和子线程同步的问题。当子线程完成初始化之后，主线程才会继续往下执行。</p><pre><code>struct event_loop_thread {\n    struct event_loop *eventLoop;\n    pthread_t thread_tid;        /* thread ID */\n    pthread_mutex_t mutex;\n    pthread_cond_t cond;\n    char * thread_name;\n    long thread_count;    /* # connections handled */\n};\n</code></pre><p>你可能会问，主线程是循环在等待每个子线程完成初始化，如果进入第二个循环，等待第二个子线程完成初始化，而此时第二个子线程已经初始化完成了，该怎么办？</p><p>注意我们这里一上来是加锁的，只要取得了这把锁，同时发现event_loop_thread的eventLoop对象已经变成非NULL值，可以肯定第二个线程已经初始化，就直接释放锁往下执行了。</p><p>你可能还会问，在执行pthread_cond_wait的时候，需要持有那把锁么？这里，父线程在调用pthread_cond_wait函数之后，会立即进入睡眠，并释放持有的那把互斥锁。而当父线程再从pthread_cond_wait返回时（这是子线程通过pthread_cond_signal通知达成的），该线程再次持有那把锁。</p><h2>增加已连接套接字事件到sub-reactor线程中</h2><p>前面提到，主线程是一个main reactor线程，这个线程负责检测监听套接字上的事件，当有事件发生时，也就是一个连接已完成建立，如果我们有多个sub-reactor子线程，我们期望的结果是，把这个已连接套接字相关的I/O事件交给sub-reactor子线程负责检测。这样的好处是，main reactor只负责连接套接字的建立，可以一直维持在一个非常高的处理效率，在多核的情况下，多个sub-reactor可以很好地利用上多核处理的优势。</p><p>不过，这里有一个令人苦恼的问题。</p><p>我们知道，sub-reactor线程是一个无限循环的event loop执行体，在没有已注册事件发生的情况下，这个线程阻塞在event_dispatcher的dispatch上。你可以简单地认为阻塞在poll调用或者epoll_wait上，这种情况下，主线程如何能把已连接套接字交给sub-reactor子线程呢？</p><p>当然有办法。</p><p>如果我们能让sub-reactor线程从event_dispatcher的dispatch上返回，再让sub-reactor线程返回之后能够把新的已连接套接字事件注册上，这件事情就算完成了。</p><p>那如何让sub-reactor线程从event_dispatcher的dispatch上返回呢？答案是构建一个类似管道一样的描述字，让event_dispatcher注册该管道描述字，当我们想让sub-reactor线程苏醒时，往管道上发送一个字符就可以了。</p><p>在event_loop_init函数里，调用了socketpair函数创建了套接字对，这个套接字对的作用就是我刚刚说过的，往这个套接字的一端写时，另外一端就可以感知到读的事件。其实，这里也可以直接使用UNIX上的pipe管道，作用是一样的。</p><pre><code>struct event_loop *event_loop_init() {\n    ...\n    //add the socketfd to event 这里创建的是套接字对，目的是为了唤醒子线程\n    eventLoop-&gt;owner_thread_id = pthread_self();\n    if (socketpair(AF_UNIX, SOCK_STREAM, 0, eventLoop-&gt;socketPair) &lt; 0) {\n        LOG_ERR(&quot;socketpair set fialed&quot;);\n    }\n    eventLoop-&gt;is_handle_pending = 0;\n    eventLoop-&gt;pending_head = NULL;\n    eventLoop-&gt;pending_tail = NULL;\n    eventLoop-&gt;thread_name = &quot;main thread&quot;;\n\n    struct channel *channel = channel_new(eventLoop-&gt;socketPair[1], EVENT_READ, handleWakeup, NULL, eventLoop);\n    event_loop_add_channel_event(eventLoop, eventLoop-&gt;socketPair[1], channel);\n\n    return eventLoop;\n}\n</code></pre><p>要特别注意的是这句代码，这告诉event_loop的，是注册了socketPair[1]描述字上的READ事件，如果有READ事件发生，就调用handleWakeup函数来完成事件处理。</p><pre><code>struct channel *channel = channel_new(eventLoop-&gt;socketPair[1], EVENT_READ, handleWakeup, NULL, eventLoop);\n</code></pre><p>我们来看看这个handleWakeup函数：</p><p>事实上，这个函数就是简单的从socketPair[1]描述字上读取了一个字符而已，除此之外，它什么也没干。它的主要作用就是让子线程从dispatch的阻塞中苏醒。</p><pre><code>int handleWakeup(void * data) {\n    struct event_loop *eventLoop = (struct event_loop *) data;\n    char one;\n    ssize_t n = read(eventLoop-&gt;socketPair[1], &amp;one, sizeof one);\n    if (n != sizeof one) {\n        LOG_ERR(&quot;handleWakeup  failed&quot;);\n    }\n    yolanda_msgx(&quot;wakeup, %s&quot;, eventLoop-&gt;thread_name);\n}\n</code></pre><p>现在，我们再回过头看看，如果有新的连接产生，主线程是怎么操作的？在handle_connection_established中，通过accept调用获取了已连接套接字，将其设置为非阻塞套接字（切记），接下来调用thread_pool_get_loop获取一个event_loop。thread_pool_get_loop的逻辑非常简单，从thread_pool线程池中按照顺序挑选出一个线程来服务。接下来是创建了tcp_connection对象。</p><pre><code>//处理连接已建立的回调函数\nint handle_connection_established(void *data) {\n    struct TCPserver *tcpServer = (struct TCPserver *) data;\n    struct acceptor *acceptor = tcpServer-&gt;acceptor;\n    int listenfd = acceptor-&gt;listen_fd;\n\n    struct sockaddr_in client_addr;\n    socklen_t client_len = sizeof(client_addr);\n    //获取这个已建立的套集字，设置为非阻塞套集字\n    int connected_fd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len);\n    make_nonblocking(connected_fd);\n\n    yolanda_msgx(&quot;new connection established, socket == %d&quot;, connected_fd);\n\n    //从线程池里选择一个eventloop来服务这个新的连接套接字\n    struct event_loop *eventLoop = thread_pool_get_loop(tcpServer-&gt;threadPool);\n\n    // 为这个新建立套接字创建一个tcp_connection对象，并把应用程序的callback函数设置给这个tcp_connection对象\n    struct tcp_connection *tcpConnection = tcp_connection_new(connected_fd, eventLoop,tcpServer-&gt;connectionCompletedCallBack,tcpServer-&gt;connectionClosedCallBack,tcpServer-&gt;messageCallBack,tcpServer-&gt;writeCompletedCallBack);\n    //callback内部使用\n    if (tcpServer-&gt;data != NULL) {\n        tcpConnection-&gt;data = tcpServer-&gt;data;\n    }\n    return 0;\n}\n</code></pre><p>在调用tcp_connection_new创建tcp_connection对象的代码里，可以看到先是创建了一个channel对象，并注册了READ事件，之后调用event_loop_add_channel_event方法往子线程中增加channel对象。</p><pre><code>tcp_connection_new(int connected_fd, struct event_loop *eventLoop,\n                   connection_completed_call_back connectionCompletedCallBack,\n                   connection_closed_call_back connectionClosedCallBack,\n                   message_call_back messageCallBack, write_completed_call_back writeCompletedCallBack) {\n    ...\n    //为新的连接对象创建可读事件\n    struct channel *channel1 = channel_new(connected_fd, EVENT_READ, handle_read, handle_write, tcpConnection);\n    tcpConnection-&gt;channel = channel1;\n\n    //完成对connectionCompleted的函数回调\n    if (tcpConnection-&gt;connectionCompletedCallBack != NULL) {\n        tcpConnection-&gt;connectionCompletedCallBack(tcpConnection);\n    }\n  \n    //把该套集字对应的channel对象注册到event_loop事件分发器上\n    event_loop_add_channel_event(tcpConnection-&gt;eventLoop, connected_fd, tcpConnection-&gt;channel);\n    return tcpConnection;\n}\n</code></pre><p>请注意，到现在为止的操作都是在主线程里执行的。下面的event_loop_do_channel_event也不例外，接下来的行为我期望你是熟悉的，那就是加解锁。</p><p>如果能够获取锁，主线程就会调用event_loop_channel_buffer_nolock往子线程的数据中增加需要处理的channel event对象。所有增加的channel对象以列表的形式维护在子线程的数据结构中。</p><p>接下来的部分是重点，如果当前增加channel event的不是当前event loop线程自己，就会调用event_loop_wakeup函数把event_loop子线程唤醒。唤醒的方法很简单，就是往刚刚的socketPair[0]上写一个字节，别忘了，event_loop已经注册了socketPair[1]的可读事件。如果当前增加channel event的是当前event loop线程自己，则直接调用event_loop_handle_pending_channel处理新增加的channel event事件列表。</p><pre><code>int event_loop_do_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1, int type) {\n    //get the lock\n    pthread_mutex_lock(&amp;eventLoop-&gt;mutex);\n    assert(eventLoop-&gt;is_handle_pending == 0);\n    //往该线程的channel列表里增加新的channel\n    event_loop_channel_buffer_nolock(eventLoop, fd, channel1, type);\n    //release the lock\n    pthread_mutex_unlock(&amp;eventLoop-&gt;mutex);\n    //如果是主线程发起操作，则调用event_loop_wakeup唤醒子线程\n    if (!isInSameThread(eventLoop)) {\n        event_loop_wakeup(eventLoop);\n    } else {\n        //如果是子线程自己，则直接可以操作\n        event_loop_handle_pending_channel(eventLoop);\n    }\n\n    return 0;\n}\n</code></pre><p>如果是event_loop被唤醒之后，接下来也会执行event_loop_handle_pending_channel函数。你可以看到在循环体内从dispatch退出之后，也调用了event_loop_handle_pending_channel函数。</p><pre><code>int event_loop_run(struct event_loop *eventLoop) {\n    assert(eventLoop != NULL);\n\n    struct event_dispatcher *dispatcher = eventLoop-&gt;eventDispatcher;\n\n    if (eventLoop-&gt;owner_thread_id != pthread_self()) {\n        exit(1);\n    }\n\n    yolanda_msgx(&quot;event loop run, %s&quot;, eventLoop-&gt;thread_name);\n    struct timeval timeval;\n    timeval.tv_sec = 1;\n\n    while (!eventLoop-&gt;quit) {\n        //block here to wait I/O event, and get active channels\n        dispatcher-&gt;dispatch(eventLoop, &amp;timeval);\n\n        //这里处理pending channel，如果是子线程被唤醒，这个部分也会立即执行到\n        event_loop_handle_pending_channel(eventLoop);\n    }\n\n    yolanda_msgx(&quot;event loop end, %s&quot;, eventLoop-&gt;thread_name);\n    return 0;\n}\n</code></pre><p>event_loop_handle_pending_channel函数的作用是遍历当前event loop里pending的channel event列表，将它们和event_dispatcher关联起来，从而修改感兴趣的事件集合。</p><p>这里有一个点值得注意，因为event loop线程得到活动事件之后，会回调事件处理函数，这样像onMessage等应用程序代码也会在event loop线程执行，如果这里的业务逻辑过于复杂，就会导致event_loop_handle_pending_channel执行的时间偏后，从而影响I/O的检测。所以，将I/O线程和业务逻辑线程隔离，让I/O线程只负责处理I/O交互，让业务线程处理业务，是一个比较常见的做法。</p><h2>总结</h2><p>在这一讲里，我们重点讲解了框架中涉及多线程的两个重要问题，第一是主线程如何等待多个子线程完成初始化，第二是如何通知处于事件分发中的子线程有新的事件加入、删除、修改。第一个问题通过使用锁和信号量加以解决；第二个问题通过使用socketpair，并将sockerpair作为channel注册到event loop中来解决。</p><h2>思考题</h2><p>和往常一样，给你布置两道思考题：</p><p>第一道， 你可以修改一下代码，让sub-reactor默认的线程个数为cpu*2。</p><p>第二道，当前选择线程的算法是round-robin的算法，你觉得有没有改进的空间？如果改进的话，你可能会怎么做？</p><p>欢迎在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步一下。</p>","neighbors":{"left":{"article_title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","id":152668},"right":{"article_title":"34 | 自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现","id":155273}},"comments":[{"had_liked":false,"id":161008,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1576077473,"is_pvip":false,"replies":[{"id":"63934","content":"我们还是用acceptor线程和I&#47;O线程这样来区分比较好。<br><br>acceptor线程在发现有连接到达后，通过调用event_loop_channel_buffer_nolock函数，往I&#47;O线程的eventLoop里面增加了新的套接字，也就是你说的注册链表。<br><br>这里的关键是每个线程都是一个独立的eventLoop，acceptor有自己的eventLoop，I&#47;O线程有自己的eventLoop。没有主子线程共享eventLoop，一个eventLoop就对应一个线程。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577605460,"ip_address":"","comment_id":161008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23050913953","product_id":100032701,"comment_content":"老师,你好,有个地方不是很明白,<br>为什么event_loop_channel_buffer_nolock(eventLoop, fd, channel1, type);是往子线程的数据中增加需要处理的 channel event 对象呢?<br><br>void event_loop_channel_buffer_nolock(struct event_loop *eventLoop, int fd, struct channel *channel1, int type) {<br>    &#47;&#47;add channel into the pending list<br>    struct channel_element *channelElement = malloc(sizeof(struct channel_element));<br>    channelElement-&gt;channel = channel1;<br>    channelElement-&gt;type = type;&#47;&#47;1 add  (1: add  2: delete)<br>    channelElement-&gt;next = NULL;<br>    &#47;&#47;第一个元素  channel_element是channel的链表，<br>    &#47;&#47; eventLoop pending_head和pending_tail维护的是channelElement的链表<br>    &#47;&#47;这样的话最终还是event_loop包含了channel(event_loop-&gt;channelElement-&gt;channel)<br>    if (eventLoop-&gt;pending_head == NULL) {<br>        eventLoop-&gt;pending_head = eventLoop-&gt;pending_tail = channelElement;<br>    } else {<br>        eventLoop-&gt;pending_tail-&gt;next = channelElement;<br>        eventLoop-&gt;pending_tail = channelElement;<br>    }<br>}<br><br><br>void *event_loop_thread_run(void *arg) {<br>    struct event_loop_thread *eventLoopThread = (struct event_loop_thread *) arg;<br><br>    pthread_mutex_lock(&amp;eventLoopThread-&gt;mutex);<br><br>    &#47;&#47; 初始化化event loop，之后通知主线程<br>    eventLoopThread-&gt;eventLoop = event_loop_init_with_name(eventLoopThread-&gt;thread_name);<br>    yolanda_msgx(&quot;event loop thread init and signal, %s&quot;, eventLoopThread-&gt;thread_name);<br>    pthread_cond_signal(&amp;eventLoopThread-&gt;cond);<br><br>    pthread_mutex_unlock(&amp;eventLoopThread-&gt;mutex);<br><br>    &#47;&#47;子线程event loop run<br>    event_loop_run(eventLoopThread-&gt;eventLoop);<br>}<br>struct event_loop_thread {<br>    struct event_loop *eventLoop;&#47;&#47;主线程和子线程共享<br>    pthread_t thread_tid;        &#47;* thread ID *&#47;<br>    pthread_mutex_t mutex;<br>    pthread_cond_t cond;<br>    char * thread_name;<br>    long thread_count;    &#47;* # connections handled *&#47;<br>};<br><br><br>event_loop_channel_buffer_nolock这个函数中是往eventLoop的链表中注册事件,可是这里的eventLoop是和子线程处理函数<br>event_loop_thread_run中eventLoopThread-&gt;eventLoop不是一个eventLoop啊,这个eventLoopThread-&gt;eventLoop不才是主子线程共享的吗?","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477567,"discussion_content":"我们还是用acceptor线程和I/O线程这样来区分比较好。\n\nacceptor线程在发现有连接到达后，通过调用event_loop_channel_buffer_nolock函数，往I/O线程的eventLoop里面增加了新的套接字，也就是你说的注册链表。\n\n这里的关键是每个线程都是一个独立的eventLoop，acceptor有自己的eventLoop，I/O线程有自己的eventLoop。没有主子线程共享eventLoop，一个eventLoop就对应一个线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577605460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267321,"user_name":"YUAN","can_delete":false,"product_type":"c1","uid":2153838,"ip_address":"","ucode":"98EF68EEE21893","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/6e/8f6f79d2.jpg","comment_is_top":false,"comment_ctime":1607679633,"is_pvip":false,"replies":[{"id":"98874","content":"那主线程干啥呢？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1610285922,"ip_address":"","comment_id":267321,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18787548817","product_id":100032701,"comment_content":"为什么不直接让子线程自己调用accept而要主线程调用呢？","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511595,"discussion_content":"那主线程干啥呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610285922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249996,"user_name":"时间","can_delete":false,"product_type":"c1","uid":1822792,"ip_address":"","ucode":"61007748189A5C","user_header":"https://static001.geekbang.org/account/avatar/00/1b/d0/48/0a865673.jpg","comment_is_top":false,"comment_ctime":1600876159,"is_pvip":false,"replies":[{"id":"92052","content":"好问题。<br><br>线程不是每时每刻都要干活的，就好比一个流水线工人，只有轮到他的时候，他才需要出力干活。如果这四个连接都在干活，那第五个只好等任意一个线程空闲出来。<br><br>所有的事情，秘诀都在于&quot;分时复用&quot;，比如你的cpu，也就4个core，为啥同时可以打游戏，写文稿，看电影，跑程序.....想通了这个，就想通了如何处理多个连接了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601870967,"ip_address":"","comment_id":249996,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18780745343","product_id":100032701,"comment_content":"线程池个数有限，如何处理成千上万的链接？假如线程池共四个线程，正在处理四个链接。再来一个链接如何处理呢？","like_count":4,"discussions":[{"author":{"id":2413440,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d3/80/dd0b26cb.jpg","nickname":"罗兆峰","note":"","ucode":"05A7F73E7F6C58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551894,"discussion_content":"老师这里的意思是， 四个sub-reactor IO 线程并不是对应只能接受4个connected_fd, 二十在每个IO 线程下管理一个fd-处理函数的集合（channel_map)， 当新的连接fd 被accept了之后， 随机选择一个IO 线程（IO 线程里也有自己独立的eventloop）并加入到这个处理函数的集合里, 等待IO 事件到来的时候就去查找这个集合相关的处理函数。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645167343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506093,"discussion_content":"好问题。\n\n线程不是每时每刻都要干活的，就好比一个流水线工人，只有轮到他的时候，他才需要出力干活。如果这四个连接都在干活，那第五个只好等任意一个线程空闲出来。\n\n所有的事情，秘诀都在于&amp;quot;分时复用&amp;quot;，比如你的cpu，也就4个core，为啥同时可以打游戏，写文稿，看电影，跑程序.....想通了这个，就想通了如何处理多个连接了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601870967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585882,"discussion_content":"这里其实不是随机选择，而是逐个选择，每新增一个连接，往下一个子线程里添加事件，四个线程如此反复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661864352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243676,"user_name":"keepgoing","can_delete":false,"product_type":"c1","uid":1471387,"ip_address":"","ucode":"A2FE0687FB17E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/73/9b/67a38926.jpg","comment_is_top":false,"comment_ctime":1598246044,"is_pvip":false,"replies":[{"id":"90117","content":"为什么会报错呢？每个指针就是一个内存地址。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598795293,"ip_address":"","comment_id":243676,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5893213340","product_id":100032701,"comment_content":"想问问老师关于基础语法的问题，代码里很多地方对象都是相互引用的，比如tcp_connection里引用了channel指针, channel 对象里引用了tcp_connection指针, dispatcher里引用了event_loop指针, event_loop里也引用了dispatcher指针。这样代码编译的时候为什么不会引起报错。。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504357,"discussion_content":"为什么会报错呢？每个指针就是一个内存地址。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598795293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2231430,"avatar":"https://static001.geekbang.org/account/avatar/00/22/0c/86/2c64563f.jpg","nickname":"刘磊","note":"","ucode":"B2222602633B76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534300,"discussion_content":"编译报错的话，需要前向声明，了解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638157599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234742,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1594784805,"is_pvip":false,"replies":[{"id":"86817","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594908199,"ip_address":"","comment_id":234742,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889752101","product_id":100032701,"comment_content":"第一道， 可以直接在应用层上将输入的线程个数*2 。  第二道，(1)可以判断已经创建好的线程 那个线程的事件个数最少，挂在事件最少的那个线程上。 ","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501492,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594908199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143816,"user_name":"MoonGod","can_delete":false,"product_type":"c1","uid":1254337,"ip_address":"","ucode":"CB39976963F37A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/c1/54ef6885.jpg","comment_is_top":false,"comment_ctime":1571795011,"is_pvip":false,"replies":[{"id":"55820","content":"好问题， 我答疑统一回答吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572057864,"ip_address":"","comment_id":143816,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5866762307","product_id":100032701,"comment_content":"老师关于加锁这里有个疑问，如果加锁的目的是让主线程等待子线程初始化event loop。那不加锁不是也可以达到这个目的吗？主线程while 循环里面不断判断子线程的event loop是否不为null不就可以了？为啥一定要加一把锁呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471702,"discussion_content":"好问题， 我答疑统一回答吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572057864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39493,"discussion_content":"我的猜想是跟你不停的轮询i/o有没有就绪事件一个道理 你要不停的判断 占用cpu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571931207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143811,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1571794663,"is_pvip":false,"replies":[{"id":"55821","content":"嗯，涨知识了，代码贴一个？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572057926,"ip_address":"","comment_id":143811,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5866761959","product_id":100032701,"comment_content":"netty选子线程是两种算法，都是有个原子自增计数，如果线程数不是2的幂用取模，如果是就是按位与线程数减一","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471699,"discussion_content":"嗯，涨知识了，代码贴一个？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572057926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2163653,"avatar":"https://static001.geekbang.org/account/avatar/00/21/03/c5/600fd645.jpg","nickname":"tianbingJ","note":"","ucode":"666141CAD8260F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551179,"discussion_content":"\n是的，仅仅是运算效率高一点，还是round robin   \n\n private static final class PowerOfTwoEventExecutorChooser implements EventExecutorChooser {\n        private final AtomicInteger idx = new AtomicInteger();\n        private final EventExecutor[] executors;\n\n        PowerOfTwoEventExecutorChooser(EventExecutor[] executors) {\n            this.executors = executors;\n        }\n\n        @Override\n        public EventExecutor next() {\n            return executors[idx.getAndIncrement() &amp; executors.length - 1];\n   \n        }\n    }\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644918165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1816560,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/b7/f0/380183ff.jpg","nickname":"AriseFX","note":"","ucode":"274CCBA62CCCF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405888,"discussion_content":"「2的n次方」这个点只是为了高效取模吧......只是位运算的一个小技巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634656161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356762,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"上海","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1662562752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662562752","product_id":100032701,"comment_content":"老师你好 最近在用C++重写示例代码。我发现个问题。在C代码中 不同线程同时在poll同一份event_set。如果poll函数时间参数写成-1。多启几个终端执行nc指令。经常会出现没有callback的现象。如果poll不是同一份event_set 就没有这个问题。网上也有别人的一些讨论。对此老师怎么看。望回复。https:&#47;&#47;stackoverflow.com&#47;questions&#47;18891500&#47;multiple-threads-doing-poll-or-select-on-a-single-socket-or-pipe","like_count":0},{"had_liked":false,"id":356214,"user_name":"Running man","can_delete":false,"product_type":"c1","uid":2075086,"ip_address":"浙江","ucode":"F3357D6696A5C1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","comment_is_top":false,"comment_ctime":1662044418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662044418","product_id":100032701,"comment_content":"老师您好，子线程channel以及channel_element对象都是动态分配的内存，但在连接close后并未看到释放，是否是内存泄露了？","like_count":0},{"had_liked":false,"id":336261,"user_name":"雨里","can_delete":false,"product_type":"c1","uid":2675399,"ip_address":"","ucode":"C475DE8B5375AB","user_header":"https://static001.geekbang.org/account/avatar/00/28/d2/c7/b7f52df2.jpg","comment_is_top":false,"comment_ctime":1646040010,"is_pvip":false,"replies":[{"id":"123122","content":"主线程，可以往子线程的管道上写数据，从而唤醒子线程。<br>传递fd的代码在这个函数里。<br>int event_loop_do_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1, int type) {<br>    &#47;&#47;get the lock<br>    pthread_mutex_lock(&amp;eventLoop-&gt;mutex);<br>    assert(eventLoop-&gt;is_handle_pending == 0);<br>    event_loop_channel_buffer_nolock(eventLoop, fd, channel1, type);<br>    &#47;&#47;release the lock<br>    pthread_mutex_unlock(&amp;eventLoop-&gt;mutex);<br>    if (!isInSameThread(eventLoop)) {<br>        event_loop_wakeup(eventLoop);<br>    } else {<br>        event_loop_handle_pending_channel(eventLoop);<br>    }<br><br>    return 0;<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1646487637,"ip_address":"","comment_id":336261,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1646040010","product_id":100032701,"comment_content":"没有看明白主从reactor这个主线程是如何唤醒子线程的？？？<br>1、就单reactor而言，主线程创建管道fd，正常来说应该是在epoll_wait上注册0端读事件，往管道1端写数据的方式来唤醒epoll。<br>2、而主从reactor代码来看，主线程和子线程都创建了一对pairfd，主线程的管道1端注册在主线程的epoll上，这样即使往管道中写数据，也只是唤醒主线程，怎么会唤醒子线程呢？？，代码中好像没有将主线程的管道fd一端注册在子线程的epoll上。是不是下面的这行代码导致的<br>eventLoop-&gt;eventDispatcher = &amp;poll_dispatcher;<br>主线程和子线程共用一个同一个poll_dispatcher对象，还是没有看出在哪个地方传递的fd??","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554608,"discussion_content":"主线程，可以往子线程的管道上写数据，从而唤醒子线程。\n传递fd的代码在这个函数里。\nint event_loop_do_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1, int type) {\n    //get the lock\n    pthread_mutex_lock(&amp;eventLoop-&gt;mutex);\n    assert(eventLoop-&gt;is_handle_pending == 0);\n    event_loop_channel_buffer_nolock(eventLoop, fd, channel1, type);\n    //release the lock\n    pthread_mutex_unlock(&amp;eventLoop-&gt;mutex);\n    if (!isInSameThread(eventLoop)) {\n        event_loop_wakeup(eventLoop);\n    } else {\n        event_loop_handle_pending_channel(eventLoop);\n    }\n\n    return 0;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646487637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586217,"discussion_content":"isInSameThread这个接口很关键，event_loop_do_channel_event是主线程调用的，而channel对象是子线程的，因此就进入到唤醒子线程的操作，write socketpair","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662044672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335109,"user_name":"zssdhr","can_delete":false,"product_type":"c1","uid":1010602,"ip_address":"","ucode":"2DFE1F017A46EB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/aa/ec09c4b4.jpg","comment_is_top":false,"comment_ctime":1645338914,"is_pvip":false,"replies":[{"id":"122806","content":"1.可以这么认为；<br>2.你说的没错，是按照顺序的，第一个完成，再第二个，问题是到第二个以后，如何判断第二个已经完成初始化了，因为这里的线程都是异步的，所以有可能线程初始化完成了，才进入判断。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1645882902,"ip_address":"","comment_id":335109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645338914","product_id":100032701,"comment_content":"老师，关于 event_loop_thread 有两个问题。<br><br>1. 为什么主线程要等待子线程初始化完成？是担心 tcp_server_init 后、但子线程还未初始化完成时，thread_pool_get_loop 无法找到子线程来处理新来的连接吗？<br><br>2. 文中提到”你可能会问，主线程是循环在等待每个子线程完成初始化，如果进入第二个循环，等待第二个子线程完成初始化，而此时第二个子线程已经初始化完成了，该怎么办？“<br>主线程不是等第一个子线程初始化完成后才会进入下一个循环启动第二个子线程吗？怎么会出现”而此时第二个子线程已经初始化完成了“？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553421,"discussion_content":"1.可以这么认为；\n2.你说的没错，是按照顺序的，第一个完成，再第二个，问题是到第二个以后，如何判断第二个已经完成初始化了，因为这里的线程都是异步的，所以有可能线程初始化完成了，才进入判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645882902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330167,"user_name":"Janus Pen","can_delete":false,"product_type":"c1","uid":2667580,"ip_address":"","ucode":"70B3F972739278","user_header":"https://static001.geekbang.org/account/avatar/00/28/b4/3c/e4a08d98.jpg","comment_is_top":false,"comment_ctime":1641825569,"is_pvip":false,"replies":[{"id":"120793","content":"不会。<br><br>两个的用处不一样，其中，event_loop_run中，是为了处理所有待添加的事件，这个肯定是在dispatch线程中执行的。<br><br>而event_loop_do_channel_event，是既可能在dispatch线程，也可能不在，而在dispatch线程中，每次调用event_loop_handle_pending_channel完成事件的实时添加，如果不是，就唤醒dispatch线程，让它自己完成添加。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1642310089,"ip_address":"","comment_id":330167,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641825569","product_id":100032701,"comment_content":"老师：event_loop_do_channel_event函数中的event_loop_handle_pending_channel函数调用与event_loop_run函数中的event_loop_handle_pending_channel函数调用是否重复?","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546433,"discussion_content":"不会。\n\n两个的用处不一样，其中，event_loop_run中，是为了处理所有待添加的事件，这个肯定是在dispatch线程中执行的。\n\n而event_loop_do_channel_event，是既可能在dispatch线程，也可能不在，而在dispatch线程中，每次调用event_loop_handle_pending_channel完成事件的实时添加，如果不是，就唤醒dispatch线程，让它自己完成添加。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642310089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329845,"user_name":"消失的时光","can_delete":false,"product_type":"c1","uid":2458932,"ip_address":"","ucode":"291EA7E21762F4","user_header":"https://static001.geekbang.org/account/avatar/00/25/85/34/ad4cbfe4.jpg","comment_is_top":false,"comment_ctime":1641570810,"is_pvip":false,"replies":[{"id":"120795","content":"epoll不允许这么干。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1642310159,"ip_address":"","comment_id":329845,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1641570810","product_id":100032701,"comment_content":"老师你好，不是很理解为什么要socketpair唤醒，直接把新连接的socket加到epoll里面，有发送就的数据过来，这个线程自己不会醒吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546435,"discussion_content":"epoll不允许这么干。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642310159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1010602,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/aa/ec09c4b4.jpg","nickname":"zssdhr","note":"","ucode":"2DFE1F017A46EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552196,"discussion_content":"老师，为什么我查的 epoll_wait 的 man page 说可以这么干：While one thread is blocked in a call to epoll_wait(), it is possible for another thread to add a file descriptor to the waited-upon epoll instance. If the new file descriptor becomes ready, it will cause the epoll_wait() call to unblock.  \n\nhttps://man7.org/linux/man-pages/man2/epoll_wait.2.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645342857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546435,"ip_address":""},"score":552196,"extra":""}]},{"author":{"id":2740779,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d2/2b/af13fcd6.jpg","nickname":"简简单单就是幸福","note":"","ucode":"A08080E6FD255F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580722,"discussion_content":"按照zssdhr提供的文献，是不是epoll可以这么做？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658361330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329497,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1641372190,"is_pvip":false,"replies":[{"id":"120806","content":"是的。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1642310510,"ip_address":"","comment_id":329497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641372190","product_id":100032701,"comment_content":"老师你好 关于第二点 是不是相当于没有需要遍历的描述符 导致一直卡在poll或者select上。所以手动构造socketpair作为初始描述符。再添加真正新的描述符时 用socketpair把程序从poll或者select阻塞上解放出来 以获取达到添加描述符的时机？我的理解对吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546448,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642310510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321135,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1636686669,"is_pvip":true,"replies":[{"id":"116710","content":"常规做法是这样的，我还想不出超常规做法😢。<br><br>这个不会增加系统负担，不用担心。连Netty都是这么干的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1636875230,"ip_address":"","comment_id":321135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636686669","product_id":100032701,"comment_content":"老师你好，逻辑线程写数据到发送队列，同时通知唤醒io线程，这个通知方式目前比较常规的做法是套接字对或者事件fd 实际测试下来 都会增加主线程的系统调用 有什么优化办法呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530227,"discussion_content":"常规做法是这样的，我还想不出超常规做法😢。\n\n这个不会增加系统负担，不用担心。连Netty都是这么干的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636875230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265798,"user_name":"YUAN","can_delete":false,"product_type":"c1","uid":2153838,"ip_address":"","ucode":"98EF68EEE21893","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/6e/8f6f79d2.jpg","comment_is_top":false,"comment_ctime":1607039399,"is_pvip":false,"replies":[{"id":"98880","content":"唤醒的目的是让主线程那个负责分发的家伙醒来干活，不要继续等待了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1610286249,"ip_address":"","comment_id":265798,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607039399","product_id":100032701,"comment_content":"主线程和丛线程不是共享内存吗？为什么还要socketpair唤醒呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511048,"discussion_content":"唤醒的目的是让主线程那个负责分发的家伙醒来干活，不要继续等待了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610286249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246511,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1599384856,"is_pvip":false,"replies":[{"id":"90594","content":"我认为不会。原因是每个eventloop对应一个独立的dispatch。虽然公用的是一个epoll_dispatcher，但是你可以注意到在调用epoll_wait函数时，是取自各自event_loop里的独立数据。<br><br>    epoll_dispatcher_data *epollDispatcherData = (epoll_dispatcher_data *) eventLoop-&gt;event_dispatcher_data;<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1599401119,"ip_address":"","comment_id":246511,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1599384856","product_id":100032701,"comment_content":"老师，main-EventLoop和sub-EventLoop里面的eventLoop-&gt;eventDispatcher = &amp;epoll_dispatcher;都是指向一个epoll_dispatcher。其中main-EventLoop用于accept新连接，获得新连接封装channel交给某一个sub-EventLoop去处理。假如dispatch有事件，是不是子线程也会从dispatch处惊醒，这是不是有“惊群效应”吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505169,"discussion_content":"我认为不会。原因是每个eventloop对应一个独立的dispatch。虽然公用的是一个epoll_dispatcher，但是你可以注意到在调用epoll_wait函数时，是取自各自event_loop里的独立数据。\n\n    epoll_dispatcher_data *epollDispatcherData = (epoll_dispatcher_data *) eventLoop-&amp;gt;event_dispatcher_data;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599401119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586218,"discussion_content":"不同的epoll监听不同的套接字，不会相互影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662044860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303957,"discussion_content":"明白了，也就创建一次epoll_create，多个eventloop都可以调用epoll_wait去监听事件。只是主eventloop监听accept事件，sub-eventloop监听读写事件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599432249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223479,"user_name":"Geek_76f04f","can_delete":false,"product_type":"c1","uid":2020720,"ip_address":"","ucode":"2A3D34C303E19A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d5/70/93a34aa5.jpg","comment_is_top":false,"comment_ctime":1591099683,"is_pvip":false,"replies":[{"id":"84257","content":"我认为不需要","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592739231,"ip_address":"","comment_id":223479,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591099683","product_id":100032701,"comment_content":"老师您好，我有个问题想咨询一下，我看资料说线程或者进程需要绑定内核，减少上下文切换，像这种reactor模型中，如果开辟corenum个线程，一般需要绑定内核吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497140,"discussion_content":"我认为不需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592739231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210216,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1587698827,"is_pvip":true,"replies":[{"id":"78410","content":"代码已经修复，文稿我再看下哈。<br><br>你说的是对的，channel里确实有这个fd，这里是为了突出这个作用。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587803591,"ip_address":"","comment_id":210216,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1587698827","product_id":100032701,"comment_content":"event_loop_init中，代码片段：<br>event_loop_add_channel_event(eventLoop, eventLoop-&gt;socketPair[0], channel);<br>其中传入的应该是socketPair[1]<br>文稿中的代码还未修正，另外我认为这个fd作为参数实际上没有意义，event_loop_add_channel_event 往后调用的几个函数里实际上都用不到这个fd，只需要channel 就可以了，因为channel里已有这个fd。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492974,"discussion_content":"代码已经修复，文稿我再看下哈。\n\n你说的是对的，channel里确实有这个fd，这里是为了突出这个作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587803591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2675399,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d2/c7/b7f52df2.jpg","nickname":"雨里","note":"","ucode":"C475DE8B5375AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553725,"discussion_content":"这个应该都可以的，socketpair创建的是一对全双工通信的fd，一端读，另一端写就行，一般应该监听0读端，往1写端写数据，如果一个管道的话应该传入0端，监听可读事件才是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646041218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179941,"user_name":"wzp","can_delete":false,"product_type":"c1","uid":1120298,"ip_address":"","ucode":"2C511B2755A1E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/2a/9c18a3c4.jpg","comment_is_top":false,"comment_ctime":1582124489,"is_pvip":false,"replies":[{"id":"71041","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583053274,"ip_address":"","comment_id":179941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582124489","product_id":100032701,"comment_content":"干货满满，有收获","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484457,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583053274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178079,"user_name":"凉人。","can_delete":false,"product_type":"c1","uid":1659177,"ip_address":"","ucode":"4DB16004A62015","user_header":"https://static001.geekbang.org/account/avatar/00/19/51/29/24739c58.jpg","comment_is_top":false,"comment_ctime":1581583631,"is_pvip":false,"replies":[{"id":"71018","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583050956,"ip_address":"","comment_id":178079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581583631","product_id":100032701,"comment_content":"比较难。但多看几遍还是有收获","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483659,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583050956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177089,"user_name":"xupeng1644","can_delete":false,"product_type":"c1","uid":1596906,"ip_address":"","ucode":"B3110D74266886","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errIIarFicghpKamvkUaJmGdIV488iaOUyUqcTwbQ6IeRS40ZFfIOfb369fgleydAT8pkucHuj2x45A/132","comment_is_top":false,"comment_ctime":1581265065,"is_pvip":false,"replies":[{"id":"71014","content":"确实是，已改正。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583050688,"ip_address":"","comment_id":177089,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581265065","product_id":100032701,"comment_content":"event_loop_init中，代码片段：<br>event_loop_add_channel_event(eventLoop, eventLoop-&gt;socketPair[0], channel);<br>其中传入的应该是socketPair[1]吧。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483305,"discussion_content":"确实是，已改正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583050688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245760,"discussion_content":"文稿里的代码还没有修正， 并且我认为这个fd作为参数实际上没有意义，event_loop_add_channel_event 往后调用的几个函数里实际上都用不到这个fd，只需要channel 就可以了，因为channel里已有这个fd。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587697765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145610,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1572329649,"is_pvip":false,"replies":[{"id":"56626","content":"感觉还是按照顺序在取线程号啊。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572574322,"ip_address":"","comment_id":145610,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572329649","product_id":100032701,"comment_content":"回老师上一条 把代码netty贴过来了<br>     private static final class PowerOfTwoEventExecutorChooser implements EventExecutorChooser {<br>        private final AtomicInteger idx = new AtomicInteger();<br>        private final EventExecutor[] executors;<br><br>        PowerOfTwoEventExecutorChooser(EventExecutor[] executors) {<br>            this.executors = executors;<br>        }<br><br>        @Override<br>        public EventExecutor next() {<br>            return executors[idx.getAndIncrement() &amp; executors.length - 1];<br>        }<br>    }<br><br>    private static final class GenericEventExecutorChooser implements EventExecutorChooser {<br>        private final AtomicInteger idx = new AtomicInteger();<br>        private final EventExecutor[] executors;<br><br>        GenericEventExecutorChooser(EventExecutor[] executors) {<br>            this.executors = executors;<br>        }<br><br>        @Override<br>        public EventExecutor next() {<br>            return executors[Math.abs(idx.getAndIncrement() % executors.length)];<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472489,"discussion_content":"感觉还是按照顺序在取线程号啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572574322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439908,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","nickname":"鱼向北游","note":"","ucode":"580EC7DCE57E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42040,"discussion_content":"本质还是轮询，这个只是代码技巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572575475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143806,"user_name":"程序水果宝","can_delete":false,"product_type":"c1","uid":1371633,"ip_address":"","ucode":"1700DDFE073A56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyicZYyW7ahaXgXUD8ZAS8x0t8jx5rYLhwbUCJiawRepKIZfsLdkxdQ9XQMo99c1UDibmNVfFnAqwPg/132","comment_is_top":false,"comment_ctime":1571794384,"is_pvip":false,"replies":[{"id":"55514","content":"代码链接请去详情页查看。","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1571797211,"ip_address":"","comment_id":143806,"utype":2}],"discussion_count":2,"race_medal":0,"score":"1571794384","product_id":100032701,"comment_content":"求完整的代码链接","like_count":0,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471697,"discussion_content":"代码链接请去详情页查看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571797211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248285,"discussion_content":"https://github.com/froghui/yolanda","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587861939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}