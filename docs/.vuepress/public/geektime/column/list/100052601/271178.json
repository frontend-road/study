{"id":271178,"title":"32 | 应用的改进：如何改进我们的软件设计？","content":"<p>你好，我是郑晔！</p><p>前面两讲，我们分别讲了如何从头开始设计一个程序库和应用。但是在实际工作中，有很多时候，我们的工作并不是从头设计一个应用，而是改进一个既有项目的代码。既有项目的代码意味着什么呢？意味着各种问题。</p><p>我们一直在说，软件设计是一门关注长期变化的学问。越是在商业上成功的软件，存续的时间往往越长。存续的时间越长，往往就会有更多的麻烦。</p><p>我们先不说有些项目一开始就没有设计，一路混乱向前。即便是一个最初有着还算不错设计的项目，随着时间的积累、人员的更替、把前人的做法当作惯例等等事情的发生，项目的设计就会逐渐变得不堪重负。</p><p>我在前面的课程中也举过一些例子，虽然每人只改了一点点，最后却是积重难返。这就是一个项目缺乏设计守护的结果。好的守护可以使设计更持久，遗憾的是，大多数项目做得并不好。</p><p>除了上面这几点，还有一点就是，新的技术和框架会不断涌现，旧代码往往是不能有效使用这些新东西的。比如，Java 世界今天开发的主流是 Spring Boot，然而十年前，它还不存在。</p><p>虽然那时候已经有了 Spring，但那时候的主流开发方式还是打出一个 WAR 包，再部署到 Tomcat 上。所以，新出现的很多技术会提供更简单的做法，替换掉旧代码中笨拙的部分。</p><!-- [[[read_end]]] --><p>所以，到底怎么才能让自己的项目在设计上不断地演进，跟上时代发展的步伐，不断焕发新的活力呢？对于任何一个开发团队而言，这都是一个值得考虑的问题。</p><p>那么，这一讲，我们就来谈谈如何改进既有项目的设计。</p><h2>从目标开始</h2><p>在我的另外一个专栏《<a href=\"https://time.geekbang.org/column/intro/148\">10x 程序员工作法</a>》中，我讲过一个类似的主题，<a href=\"https://time.geekbang.org/column/article/90231\">如何面对遗留系统</a>。那里面的主要观点就是我们应该找到一个目标，然后小步改进，逐步向这个目标接近。</p><p>在那一讲中，我讲的重点主要在于改进的过程，而在这里，我打算从设计的角度再来审视一下这个问题。既然都是我的专栏，所以二者在解决问题上的思路一致的，都要先从找到目标开始。</p><p>大多数团队一说起改进，一般想的都是功能性方面的目标。比如，我原来的系统能支持100万的用户，现在要支持 1000 万的用户。这种改进固然是我们需要考虑的，甚至是迫不得已的。</p><p>但这种改进解决的是实现，因为<a href=\"https://time.geekbang.org/column/article/88764\">不同量级的系统根本就不是一个系统</a>，承载的用户量发生了变化，其实是一种需求的变化。但是，这种改变并不会让你的设计变好。</p><p>既然我们已经决定要改进了，就应该好好地把设计改进一下，而不只是把功能重新实现一遍。因为功能实现是你无论如何都必须做的，都是为别人做的，而设计的改进才是你为了自己做的，因为在未来的一段日子里维护这些代码的人是你。如果我们要做设计的改进，设定好改进设计的目标就显得尤为重要。</p><p>那设计改进的目标应该是什么呢？你可以先问一下自己这样一个问题，<strong>如果有机会从头设计这个系统，它应该是什么样子呢？</strong></p><p>这个问题可能会让很多程序员一下子愣住，因为他们每天都陷于忙碌的工作中，做的工作都是各种微调、各种打补丁，眼中只有一个具体微观的世界，却不曾有一个整体的思考。</p><p>是的，从头来过，它应该是什么样子。这是一个简单的问题，也是一个困难的问题。简单在于，它的字面意思很好理解。困难却在于，很多人一听到这个问题，直觉就要回避：</p><ul>\n<li>我的系统已经这么沉重了，怎么可能重来？</li>\n<li>我有那么多的需求要做，哪有时间重做一遍？</li>\n<li>我的系统那么复杂，重做一遍，出了问题谁来负责？</li>\n</ul><p>我承认，这些都是很现实的问题。但是，我的意思并不是让你真的一上来就动手，从零开始把系统重写一遍。这里的重点在于，<strong>我们要找到改进的目标，也就是一个系统本来应有的面貌</strong>。</p><p>这就是为什么我们前面要学习那么多设计一个系统的知识，否则，我们没有一个设计知识的沉淀，所谓的“重新设计”，弄不好我们就会回到原来的老路上去。</p><p>这时候，或许你突然想到一个严重的问题了，开启一次系统改进，如何处理人们的共识好像也是一件困难的事情，但这根本不是一个设计问题。想要真正地开启一次改进，就要让人们意识到，<strong>设计一个系统和实施一次系统改进是两个完全不同的问题，可以分阶段地进行</strong>。</p><p>我们只有把系统设计成它应有的样子，才算是确定了我们的目标。有了目标之后，接下来，我们才能制定改进路径，而把现有的系统一点一点从旧有的样子改动成新的样子，这是实施的过程。</p><p>好！我假设你已经搞定了周边人的共识，准备着手进行改进了。</p><h2>改进的过程</h2><p>现在你要重新设计这个系统了，或许你会想，这有什么难的？不就是照着原来的需求，重新来一遍吗？如果你真的还有原来的需求，能让你照着设计一遍。我真的只能说，你太幸运了。</p><p>在大部分真实的项目中，一个既有系统的情况是，没有人能够说出它到底承载了哪些需求。当然，主干部分是人人都知道的，但主干常常是九牛一毛，而更多的细节隐藏在代码中了。</p><p>一个长期存在的系统，开发者可能已经换了好几拨。了解当年那些需求的人可能早已不知所踪了，导致的结果就是，每一个工作在这个项目上的人都是只见树木不见森林。</p><p>在这种情况下，我们该怎么办呢？我给你<strong>一个入手的起点，就是接口</strong>。</p><p>在<a href=\"https://time.geekbang.org/column/article/241114\">第4讲</a>学习怎样理解一个系统的设计时，我们曾经说过，想要理解一个系统的设计，可以按照模型、接口和实现的这个框架去理解，其中，接口是模型能力的体现。</p><p>对于一个系统而言，接口也是使系统内部状态发生改变的原因，系统中的所有变化必然都是从某个接口开始的。既然没有人能够清楚地说明系统的现状，那么，我们从接口入手，了解系统的现状是一个非常现实的做法。毕竟，接口是不会骗人的。</p><p>不过，这里的接口不仅包括我们传统意义上的接口，也包括各种后台服务。前面我们讲了很多构建模型的内容，有了这个基础，我们再看后台服务，就会发现，后台服务只不过是按照某种规则触发模型的接口。比如，定时服务，就是定时地去调用模型的接口。所以，我们也要把这种接口梳理出来。</p><p>有了对于这些接口的了解，我们就对这个系统呈现哪些能力有一个认识了，就相当于获得了一份需求描述。基于这个认识， 我们来构建我们新的设计。</p><p>接下来，我们就要重新设计了，<strong>这个改进设计的难点就是不要回到老路上</strong>。我们需要按照一个正常设计的思路去走，该分离关注点的分离关注点，该重新组合的要重新组合。</p><p>之所以我要提示这一点，就是因为思维的惯性实在是太大了。比如说，在原有的系统内有一个叫订单的概念，我们就会习惯性地使用订单，而不是把商品订单、支付订单等概念分开。</p><p>一般而言，既有项目的设计有一个很大的问题就是各种信息混在一起，而能够把不同的信息拆分开来，对于设计而言，就是一个巨大的进步。</p><p>做好了新的设计，也就为我们后续的行动找到了新的方向。接下来，我们要做的是，对比新旧设计，找到一条改进路径。</p><p><strong>永远不要指望一个真实的项目停下来，一步到位地进行改进。</strong>我们能够做的，唯有小心翼翼，一步一步向着目标前进。</p><p>对于不同的项目，选择的路径可能是不同的，有人会选择关键路径上的关键模块进行改进，也有人会选择影响较小的模块先进行探索，无论是哪种方案都是可以的。一个关键点就在于，动作要小。</p><p>学习过我的两个专栏的同学可能已经充分理解了我对小步前行的喜爱了。任何一个大动作，往往都意味着很长时间无法完成。在这个过程中，所有人都会提心吊胆。如果不能看到成果，很多人的信心都会随时间流失。所以，<strong>在软件设计的改进过程中，积小胜为大胜才是一个合理的选项</strong>。</p><p>还有一个关键点，要让所有相关利益人有一个共识。我又一次说到了共识，软件开发虽然是一个技术活，但归根结底还是一项团队活动，是一项人的活动。</p><p>既然涉及到诸多参与者，就一定要让大家形成一个共识。所以，系统改进，尤其是一个规模比较大的系统改进，一定要让所有人有共识。无论是开会也好，宣讲也罢，让大家对于改进的原因和改进的计划有个共同的预期是至关重要的。</p><p>更加具体的改进过程，我在《10x 程序员工作法》中有更细节的讨论，有兴趣的话，可以去参考一下。</p><p>虽然我在这里讲的是一个系统的改进过程，其实，同样的思路也可以运用在更小的模块中。只不过，更小模块意味着更少的接口、更低的复杂度以及更少的相关利益人。事实上，我反而鼓励你从小模块入手，一步到位去改进整个系统，难度系数是更大的，而小模块可以帮助你积累更多改进的经验，无论是设计，还是与人打交道。</p><h2>总结时刻</h2><p>今天，我给你讲了如何改进一个既有软件的设计。一个软件放在时间长河中会有很多东西发生改变，即便是当初还算不错的设计，随着时间的累积，也可能积重难返。</p><p>改进一个软件的设计，首先，要确定改进的目标。改进的目标就是，重新设计这个软件，它应该设计成什么样子，让设计还原到它应有的本来面貌。寻找改进的起点，一部分可以从需求入手，还有一部分要从梳理接口入手。</p><p>设计改进的难点在于不要回到老路上，要做正常的设计，尤其是要把分解做好。</p><p>有了改进目标之后，接下来就是要找到一条改进路径，选择怎样的路径都是有道理的，但有两个关键点是非常重要的，一个是每步改进的动作要小；一个是要让相关利益人达成共识。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>改进既有设计，从做一个正常的设计开始，小步向前</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/2f/9df0d3f24dcbebafc3fce6d26628eb2f.jpg?wh=2284*1700\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你回想一下，你的系统在设计上存在着哪些问题，你打算怎么改进它呢？欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"31 | 应用的设计：如何设计一个数据采集平台？","id":269714},"right":{"article_title":"结束语｜那些没讲的事儿","id":271180}},"comments":[{"had_liked":false,"id":240668,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1597030585,"is_pvip":false,"replies":[{"id":"88839","content":"非常棒的分享，感谢你让大家看到实践者前行的足迹！","user_name":"作者回复","comment_id":240668,"uid":"1258861","ip_address":"","utype":1,"ctime":1597037497,"user_name_real":"郑晔"}],"discussion_count":17,"race_medal":0,"score":"212050428089","product_id":100052601,"comment_content":"我们正在重构一个40多万行的应用，这个应用的开发，产品，业务都走光了，现在团队有的开发要重写，有的开发的意见是不动老代码，两种意见，我都是反对的，全部重写不现实，一个跑了5年的系统，需求根本没人弄的清楚，就算弄清楚需求，重写代码，就能做的更好？设计水平达到了吗？另外，不动老代码不现实，很多新需求，虽然是新需求，正因为设计的不好，不得不动老代码。面对这样的困境，我们还是采用小幅重构的办法，我们做了重构方案，目标清晰可落地，效果可检视。我们对重构进行分类。<br>1.瘦身，瘦身就是把系统的各种接口，页面接口，服务接口，job，通过监控统计已经下线的功能，把代码删除掉，最近一年没有访问的请求，把代码删除掉。另外，通过表，sql反向梳理，就是表里没有新数据，sql最近一年没有执行过，把这样的代码都删除掉。<br>2.重构，精准重构，1个是性能，梳理接口，统计超过一定阀值的接口，根据成本收益原则，确定优先级，分布实施，1个是功能复杂度，统计最近1年每个源代码文件提交的次数，我们的依据是开放封闭原则，一个类被频繁修改，就说明设计存在问题了。<br>3.新需求，新应用，对于业务领域是个全新的子域，我们坚决开发新应用解决，另外我们计划做服务标准化，对于新接口和服务，通过一个新应用实现。同样的遵守开放封闭原则。<br><br>我们已经重构了半年，下半年还要重构，我认为明年也要重构，重构得到领导的大力支持，我相信也是提升团队设计，开发水平的机会，加油吧！<br>","like_count":50,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503519,"discussion_content":"非常棒的分享，感谢你让大家看到实践者前行的足迹！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597037497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302632,"discussion_content":"频繁修改的类，发现还是有大量的类，对于框定重构范围，精准重构还是需要大量的工作，最近发现一个度量代码复杂度的工具，度量了一下，排查几个类，确实精准，例如复杂度100左右的类，就发现大量if elsd嵌套分支，循环嵌套，长方法等代码，这让我们精准重构，又多了一个可靠的依据。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598974207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1637632,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fd/00/6cff1d24.jpg","nickname":"Y","note":"","ucode":"F57929C11BD34C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305432,"discussion_content":"这个工具是什么呀大佬？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599921110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302632,"ip_address":""},"score":305432,"extra":""},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1637632,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fd/00/6cff1d24.jpg","nickname":"Y","note":"","ucode":"F57929C11BD34C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305485,"discussion_content":"metricsreloaded","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599961158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305432,"ip_address":""},"score":305485,"extra":""}]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580129,"discussion_content":"重构可以分高层重构和代码重构，一直纠结代码重构，有了复杂度度量工具，可以精准框定烂代码，也可以度量重构后代码的质量，看起来代码重构有依据了，但是碰到烂代码还是不敢重构，最近学习和实践了TDD开发手法，个人认为这是最符合人性的开发方式，需求拆解任务，写测试用例，写功能代码，重构坏味道，跑测试，如果开发都是按照这种方式写代码，我相信代码不会烂掉，也敢于重构，为什么要代码重构，就是原来代码写的太烂了，如果每个方法最多不超过30行，圈复杂度最多不超过15，都有单元测试覆盖，维护这样的代码，那是很爽的工作。\n采用TDD开发吧，告别烂代码，也敢于重构！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1657889001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297740,"discussion_content":"很棒的描述。也挺羡慕能得到支持。不过没看到产品和测试小伙伴的参与。就我的经验来看，这两个小伙伴是少不了的。因为作为开发你很难比产品了解业务，很难比测试了解可能存在的bug。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597042222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297757,"discussion_content":"我们重构多亏测试，产品，开发，业务都不在了，但是测试还在，我们每一个优化和重构都很明确，哪个功能，哪个接口，哪个sql，重构是不改变原有功能，开发和测试要频繁沟通，确定测试范围，如何测试，另外我们下线哪个功能也会和业务，产品确认。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597048289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297740,"ip_address":""},"score":297757,"extra":""},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297761,"discussion_content":"得到领导支持，需要很强的说服，需要采用各种办法，领导不会只听开发的一面之词，那就用多个干系人去影响，交叉确认，另外，拿出一些例子和事实去说明重构的原因，小投入，大回报的重构原则，持续迭代的重构方法，目标明确可落地，短期目标和长期目标兼顾，除了定性的价值，再说明一些定量的价值。\n有效说服，也是架构师和leader必备的技能。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597049874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297740,"ip_address":""},"score":297761,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297787,"discussion_content":"业务发展不景气。你自己都说服不了自己去做这些重构。所以羡慕。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597056560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297761,"ip_address":""},"score":297787,"extra":""}]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545984,"discussion_content":"重构已经完成，长期收益已经显现威力，生产问题降低到忽略不计，大需求大项目快速迭代上线。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642122772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298440,"discussion_content":"发现设计存在问题的方法我也想过，一只没实施过，看到你实践了，真棒啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597299213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298511,"discussion_content":"我之前也困惑，怎么能框定解决功能复杂性的重构范围，功能太多，不可能每个功能都走读一遍，再说开发人员走读也可能发现不了问题，这个方法的好处就是依据开放封闭原则，确定重构范围，然后再精确确认是否重构，如果是新开发的功能的类，可能就不需要重构，剩余的范围，再安排每个开发去走读代码，给出代码，设计存在什么问题，这个功能未来是否会变化，根据成本收益原则，再确定重构优先级，这个开发要拿出重构方案，然后再决定是否重构，具体重构的方法，我认为重构改善既有代码，代码整洁之道，架构整洁之道，这三本书，能够给所有开发提供具体实践武器，这样开发人员不断实践，这样系统会逐渐变好，开发人员水平也不断提升，我相信新应用，新代码会更好，不会走前人的老路，要不我怎么会相信，就算重写就能更好，更好的设计，更好的代码？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597315027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298440,"ip_address":""},"score":298511,"extra":""},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305483,"discussion_content":"MetricsReloaded","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599960140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298440,"ip_address":""},"score":305483,"extra":""},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305499,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599967842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305483,"ip_address":""},"score":305499,"extra":""}]}]},{"had_liked":false,"id":242124,"user_name":"Lehman","can_delete":false,"product_type":"c1","uid":1708349,"ip_address":"","ucode":"DFDF9A57272D42","user_header":"https://static001.geekbang.org/account/avatar/00/1a/11/3d/ed13717a.jpg","comment_is_top":false,"comment_ctime":1597595428,"is_pvip":true,"replies":[{"id":"89484","content":"非常赞的分享！","user_name":"作者回复","comment_id":242124,"uid":"1258861","ip_address":"","utype":1,"ctime":1597755850,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"31662366500","product_id":100052601,"comment_content":"10年+复杂系统改善坑：<br>坑一：需要同步修改的点无法确定，如：上层接口变化导致下游未同步、数据源变化（分析人员方了）；<br>坑二：面条逻辑，数据库、后台服务、前台、网关均有逻辑<br>坑三：神一般坏味道，if能在屏幕左侧写到右两屏的那种<br>坑四：红线需求层出不穷<br>坑五：替换了依赖组件版本、修改底层一行代码，平台直接起不来<br>然后，我们的解决方案大致如下：<br>止损：<br>1、建立规范，防止代码分层不明确、代码风格迥异<br>2、防止平台出现大变动<br>3、更新底层、尽量以新的能力承载，然后慢慢迁移到新的实现方式<br>4、外部基础组件版本不允许变化<br>搭建安全网：<br>1、建立后台服务接口监控<br>2、建立核心业务流程自动化测试流程，防止挂的太离谱<br>3、建立验收环境，上线版本必须在该环境进行验收测试<br>落地实施：<br>1、先拆基础服务，文件、消息等。<br>2、新业务关联性不强，另起炉灶<br>3、将代码中的阈值一律移入配置管理，不允许写代码中<br>4、业务侧发起，哪些功能不要的，直接砍、删---做好长期战斗准备<br>5、建立核心业务平台标准接口(业务上做调整)，外部平台陆续迁移新接口<br>6、数据库中单表超20个业务含义字段的都是危险分子，分析职责权属<br>7、让资深业务、测试、开发周期性来培训团队系统都有撒撒撒，他们重点关注的撒撒撒<br><br>重构项目需要有愚公移山的精神，然后每次就来一点点。","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503935,"discussion_content":"非常赞的分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597755850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240635,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1597024340,"is_pvip":false,"replies":[{"id":"88843","content":"感谢分享！","user_name":"作者回复","comment_id":240635,"uid":"1258861","ip_address":"","utype":1,"ctime":1597037852,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"27366828116","product_id":100052601,"comment_content":"我非常赞同从改进一个小的模块设计开始，不断地小步前行的做法。<br>我最近也是在重构项目，虽然是APP项目，但这个项目很大，安装包已经有200M。<br>因为需求复杂，经历人员也比较多，结构设计也没有统一，有使用rxjava，dagger，MVP等等框架，交互层和业务层的逻辑交织在一起，改一个bug相当得耗时间。<br>现在第一步做法是梳理模块，统一每个模块对外的接口，这个改动目前来说是最小的，也是更进一步改造的基础。<br>曾多次问自己如果重新开始我会怎么设计这样的问题。其实回答这个问题可以帮你更好的理解现有系统的业务逻辑，也是你重构的目标，重新设计它是一个理想状态，不可能一下子就达到，但是可以不断地逼近目标。<br>","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503508,"discussion_content":"感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597037852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240728,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1597046574,"is_pvip":false,"replies":[{"id":"88920","content":"能够理解我写的内容都是吃过亏的人。","user_name":"作者回复","comment_id":240728,"uid":"1258861","ip_address":"","utype":1,"ctime":1597056508,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"23071883054","product_id":100052601,"comment_content":"个人补充:<br>1.项目质量的好坏，与公司发展情况，项目价值息息相关。在业绩不好的条件下，举债前行就是合理的。所以我们讨论项目质量，谈设计和重构，都是建立在价值和公司业务发展需要的前提条件下的。(反之，逆势而为有违天和，事倍功半)<br><br>课后题:<br>1.问题: 最大的问题就是缺少共同设计。<br>2.解决思路: 开发与产品间的沟通应该基于统一、公开的业务建模。<br>3.问题描述: 产品和开发之间沟通都是基于一个个零散发散的功能点。在系统和业务间没有做一定的模型抽象。导致开发不了解业务全貌，产品不理解系统现状。进而在知识传承的成本就很大。往往新产品出的功能很难兼容现有系统（复用已有能力和兼容其他已有功能）;新的开发也很难看清系统的全貌。（进而问题就多，问题多团队氛围就比较差，就容易扯皮）<br>4.价值: 产品需要开发通过模型勾勒出系统的现状，屏蔽掉实现的复杂度。开发需要产品通过模型屏蔽掉无关的业务复杂性，串联整体业务脉络，快速准确的理解业务全貌。如此也有利于新人介入，知识传承。<br>6.外在问题: 因为不是一个人的事,所以天时地利很重要,同样的时间也可以做很多事情,没必要吃力不讨好不是。<br><br><br>旁外话<br>郑烨大佬的专栏都是金玉良言啊，不温不火着实费解。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503542,"discussion_content":"能够理解我写的内容都是吃过亏的人。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597056508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298442,"discussion_content":"统一、公开的业务模型确实很必要，人多了之后达成共识就特别重要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597299663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240664,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1597029226,"is_pvip":false,"replies":[{"id":"88841","content":"微服务应该是结果，而不应该成为目标。","user_name":"作者回复","comment_id":240664,"uid":"1258861","ip_address":"","utype":1,"ctime":1597037783,"user_name_real":"郑晔"}],"discussion_count":4,"race_medal":1,"score":"18776898410","product_id":100052601,"comment_content":"公司以前业务是2C，后来钱烧完了，开发人员走的差不多，现在做2B。<br>但把各个服务拆的非常细，几十个微服务，，几个人维护，现在也不敢做的大的改动。<br>想了想问题：<br>1. 微服务拆分的太多，各种服务之间RPC调用经常超时<br>2. 各个服务报错之后，没有事务和补偿机制，存在数据不一致问题<br>3. 微服务相关调用，一个服务挂了，好多功能停摆，无法用<br>4. 监控体系没有做，各种服务的状态和接口的调用情况不清晰<br>5. 服务熔断、链路追踪等没有<br><br>有时候，我在想，2B业务量不大，不如保持现在各个微服务的样子，只是不再一个个部署了，合并到一个进程里面跑算了（相当于模块化开发，把RPC调用禁掉）。只是有点回到老路的样子，大家有些不甘心。","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503517,"discussion_content":"微服务应该是结果，而不应该成为目标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597037783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297824,"discussion_content":"权衡决策很简单，就是刚好合适，评价标准是开发效率和系统运行的质量，如果模块化手段能够更好的达成目标，为什么要用微服务？不能为了用而用，就算用了，没有业务场景驱动，就是过度设计，开发人员的自high，其实模块化开发的好，也是高质量的代码，高质量设计，一样能提高，体现开发的水平。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597068368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297907,"discussion_content":"谢谢指点！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597109590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297824,"ip_address":""},"score":297907,"extra":""}]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298444,"discussion_content":"合并到一个进程里面很有见地的想法，应该很符合贵公司现状","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597299774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263186,"user_name":"佟宏元","can_delete":false,"product_type":"c1","uid":2224337,"ip_address":"","ucode":"052233A5720447","user_header":"","comment_is_top":false,"comment_ctime":1606036303,"is_pvip":false,"replies":[{"id":"96652","content":"只要走在正确的道路上，细节可以慢慢修复。","user_name":"作者回复","comment_id":263186,"uid":"1258861","ip_address":"","utype":1,"ctime":1607171514,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10195970895","product_id":100052601,"comment_content":"这一片真的是感触很深，当前我们团队正在进行一个项目的改进，之前是甲乙双方合作的，二次开发的商业产品，这个产品存在很多问题，扩展性低、代码未全部开源、我们掌控力不足，而且目前也没有乙方运维支持。属于公司战略项目，正在扩展全集团使用，因此推倒重来是不可能的，我们决定只进行架构扩展升级，在现有基础上增强，新旧业务分开，页面嵌入形式（用户无感知），基础数据、支撑域等用现有的（确定改进目标），问题是开发人员有各自任务，而且原系统掌控力不足，因此我们决定从几个方面入手：1.梳理现有系统开发模式，和可以了解的部分，2、做登录集成，保证新旧系统登录状态一致，页面一致，3、保证现有支撑域共享，4、后期做好新旧业务区分，找到分离关注点。学习来事的课后发现，虽然大体方向没问题，但是细节上有欠缺，比如分离关注点太粗等。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510117,"discussion_content":"只要走在正确的道路上，细节可以慢慢修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607171514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242873,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1597881950,"is_pvip":false,"replies":[{"id":"89563","content":"不要为了微服务而去微服务，如果拆分的结果是微服务，那就微服务了。","user_name":"作者回复","comment_id":242873,"uid":"1258861","ip_address":"","utype":1,"ctime":1597896934,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":1,"score":"5892849246","product_id":100052601,"comment_content":"<br>“微服务应该是结果，而不应该成为目标。”<br><br>怎么理解这个呢👆🏻","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504118,"discussion_content":"不要为了微服务而去微服务，如果拆分的结果是微服务，那就微服务了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597896934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346610,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653282944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653282944","product_id":100052601,"comment_content":"改进既有设计，从做一个正常的设计开始，小步向前--记下来","like_count":0},{"had_liked":false,"id":342334,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650198257,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650198257","product_id":100052601,"comment_content":"自己也独立负责公司的一个系统模块，看前几篇专栏时就在想这个系统的设计有什么不足，哪里可以改进优化，如果能够重新设计可以是什么样，今天这篇专栏正好就说了这点，真棒！后续设计改进正好借鉴起来。","like_count":0}]}