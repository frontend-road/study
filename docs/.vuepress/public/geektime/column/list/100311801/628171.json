{"id":628171,"title":"26｜泛化的实现（下）：怎样为泛化编写代码？","content":"<p>你好，我是钟敬。</p><p>上节课，我们学习了泛化的数据库设计，这节课我们接着看看怎样为泛化编写代码。</p><p>泛化在程序里，体现为一套有继承关系的对象，而在数据库里体现为若干张表。所以，泛化的编码主要解决的问题就是，怎么把内存中的对象和数据库表里的数据进行相互转换。这个问题解决了，其他部分就和常规的面向对象编程没有什么区别了。</p><p>同一个泛化结构，在内存中的对象布局是一样的，但根据不同的数据库设计策略，数据库里的表结构却是不一样的，上节课我们讲过主要有三种。这就造成了泛化关系的持久化问题，比关联关系的持久化要更加复杂一些。</p><p>你应该已经想到了，这里说的内存和数据库数据的相互转换问题，是在仓库（repository）里解决的。或者说，仓库屏蔽了不同的表结构的差别，我会结合工时项和客户的例子带你体会这一点。</p><h2>为领域模型编码</h2><p>我们首先为工时项以及它的子类编写领域层代码。之前说过，我们要养成边看领域模型，边写代码的习惯，所以先回顾一下领域模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/5d/0cfc224a12ea3cac824e51bf8f67345d.jpg?wh=3733x2260\" alt=\"\"></p><p>本来，传统上的泛化既可以用继承来实现，也可以用不同的属性值来实现。不过根据 DDD 的思路，我们在领域建模的时候，已经有意识地考虑了领域模型和程序实现一致性，所以，对于上图里的泛化，我们直接用继承来实现就可以了。</p><!-- [[[read_end]]] --><p>那么，在程序设计上，应该把工时项建成一个父类吗？</p><p>如果用 Java 的话，我们发现无法做到这一点。为了说明这个问题，我们画一下设计模型图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/41/2d/41yy654dbb4523d0058a03d80b93ce2d.jpg?wh=3900x3031\" alt=\"\"></p><p>上面就是设计模型的类图（后面简称为设计图）。</p><p>我们首先回味一下设计图和领域模型图的一个区别。领域模型图里只有带实线的空心箭头，而设计图里有实线和虚线两种空心箭头。设计图里的实线箭头代表继承，也就是 Java 里的 extends；虚线箭头代表对接口的实现，也就是 Java 里的 implements。使用继承还是实现，都是代码设计中的考虑，不是业务概念，因此在领域模型图里不需要区分，所以在领域模型图里只需要表示“泛化”的实线箭头。</p><p>好，我们继续讨论是否可以用类的继承来实现这个泛化体系的问题。本来，如果没有 SubProject （子项目）的话，可以让 EffortItem（工时项）成为 AggregateRoot（聚合根）的子类，让 Project（项目）和 CommonEffortItem（普通工时项）继承 EffortItem。EffortItem类里面有 EffortItemId（工时项ID）属性。</p><p>但是，如果让 SubProject 也继承 EffortItem 类的话，SubProject 就成了聚合根，问题在于 SubProject 并不是聚合根。所以 SubProject 只能继承 AuditableEntity（可审计的实体）。由于 Java 不支持多继承，我们就没有别的选择了，只能把 EffortItem 设计成一个接口，而公共的 EffortItemId 属性只能放在各个子类里了。</p><p>AuditableEntity 和 AggregateRoot 是技术实现时候的考虑，没有业务概念，所以在领域模型图里并不存在。</p><p>接下来，我们再复习一下有关设计图的其他几个知识点。</p><p>设计图里用了英文，目的是接近代码实现；领域模型图里用中文，目的是便于和领域专家交流。要根据词汇表进行中英文的转换。</p><p>在设计图里有权限修饰符，加号（+）代表 public，减号（-）代表 private，井号（#）代表 protected，波浪号（~）代表包级私有。而领域模型图里所有属性都是业务可感知的概念，都可以认为是公共的，所以不需要写权限修饰符。</p><p>在传统的面向对象方法学里，理论上要根据领域模型图绘制详细的设计图，再进行编码。但在敏捷的实践中，只需要在必要的时候才画部分设计图，多数情况下直接按照领域模型图写代码就行了。我们目前这个设计图只能算是一个示意图。其中省略了getter 和 setter，也省略了所在的包图。</p><p>那么，有了设计，领域层的代码实现就比较简单了。 EffortItem 接口的代码是这样。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.domain.effortmng.effortitem;\n\npublic interface EffortItem {\n    Long getEffortItemId();\n    String getName();\n}\n</code></pre><p>这应该不用解释了。Project 类的部分代码是后面这样。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.domain.projectmng.project;\n\n// imports ...\n\npublic class Project extends AggregateRoot\n        implements EffortItem {\n\n    private final Long tenantId;             // 租户ID\n    private final Long effortItemId;         // 工时项ID\n    private String name;                     // 项目名称\n    private Period period;                   // 起止时间段\n    private Status status;                   // 项目状态\n    private Boolean clientProject;           // 是否客户项目\n    private Boolean shouldAssignMember;      // 是否要分配人员\n    private EffortGranularity effoRtGranulArIty; // 工时粒度 \n\n    // 项目经理\n    private final Map&lt;Period, ProjectMng&gt; mngs = new HashMap&lt;&gt;();\n    // 子项目\n    private final Collection&lt;SubProject&gt; subProjects = new ArrayList&lt;&gt;();\n    \n    // 构造器 ...\n    \n    // 实现 EffortItem 接口里的两个方法\n    @Override\n    public Long getEffortItemId() {\n        return effortItemId;\n    }\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    // 其他方法...\n    \n}\n</code></pre><p>我们看到，Project 继承了 AggregateRoot， 同时实现了 EffortItem 接口。EffortItem 的其他几个实现类也是类似的，就不一一展开了。</p><h2>查询工时项</h2><p>对于工时项，一个最重要的功能是给定一个员工，查询这个员工可以报工时的<strong>工时项</strong>列表。这个功能的入口在工时项的应用服务 EffortService 里。</p><p>我们先设计一下这个功能的返回值类型。对于报工时的需求，前端只需要得到每个工时项的ID和名称就可以了。我们先编写 EffortItemDTO 来存放这两个属性。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n\npublic class EffortItemDTO {\n    private Long effortItemId;\n    private String name;\n    // 构造器、getter ...\n}\n</code></pre><p>然后，把DTO组织在一起，成为返回值类型 AvailableEffortItems。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n// imports ...\n\npublic class AvailableEffortItems {\n    List&lt;EffortItemDTO&gt; assignments = new ArrayList&lt;&gt;();\n    List&lt;EffortItemDTO&gt; subProjects = new ArrayList&lt;&gt;();\n    List&lt;EffortItemDTO&gt; commonProjects = new ArrayList&lt;&gt;();\n    List&lt;EffortItemDTO&gt; commonEffortItems = new ArrayList&lt;&gt;();\n\n    void addItem(ItemType type, Long effortItemId, String name) {\n        switch (type) {\n            case ASSIGNED_PROJECT:\n                assignments.add(new EffortItemDTO(effortItemId, name));\n                break;\n            case COMMON_PROJECT:\n                commoanProjects.add(new EffortItemDTO(effortItemId, name));\n                break;\n            case SUB_PROJECT:\n                subProjects.add(new EffortItemDTO(effortItemId, name));\n                break;\n            case COMMON:\n                commontEffortItems.add(new EffortItemDTO(effortItemId, name));\n                break;\n        }\n    }\n    \n    // getters ...    \n\n    public enum ItemType {\n        ASSIGNED_PROJECT, COMMON_PROJECT, SUB_PROJECT, COMMON\n    }\n}\n\n</code></pre><p>为了便于前端显式，返回值把工时项分成了分配的项目（assignments）、通用项目（commonProjects）、子项目（subProjects）、普通工时项（commonEffortItems） 4 个列表。</p><p>编写了返回值类型，就可以编写查询工时项功能了。下面是应用服务的代码。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n\n// imports ...\n\n@Service\npublic class EffortService {\n    // 项目仓库\n    private final ProjectRepository projectRepository;\n    // 普通工时项仓库\n    private final CommonEffortItemRepository commonEffortItemRepository;\n\n    @Autowired\n    public EffortService(ProjectRepository projectRepository\n            , CommonEffortItemRepository commonEffortItemRepository) {\n        // 仓库的依赖注入 ...\n    }\n\n    // 查找员工可用的工时项\n    public AvailableEffortItems findAvailableEffortItems(Long empId) {\n        Collection&lt;Project&gt; assignments\n                = projectRepository.findAssignmentsByEmpId(empId);\n        Collection&lt;Project&gt; commonProjects\n                = projectRepository.findCommonProjects();\n        Collection&lt;CommonEffortItem&gt; commonEffortItems\n                = commonEffortItemRepository.findAll();\n\n        var result = new AvailableEffortItems();\n        \n        assignments.forEach( p -&gt;\n                result.addItem(ASSIGNED_PROJECT,p.getEffortItemId(), p.getName()));\n\n        commonProjects.forEach( p -&gt;\n                result.addItem(COMMON_PROJECT, p.getEffortItemId(), p.getName()));\n\n        commonEffortItems.forEach( i -&gt;\n                result.addItem(COMMON_ITEM, i.getEffortItemId(), i.getName()));\n\n        return result;\n    }\n}\n</code></pre><p>这个服务的算法是分别从数据库进行三次查询，查出分配给这个员工的项目、不需要分配人员的项目（也就是通用项目）以及普通工时项。然后分别利用它们的<strong>工时项ID</strong>和<strong>名称</strong>，构造查询结果。</p><h2>查询工时项的改进</h2><p>现在我们想一想，这段代码还有什么改进空间。</p><p>这段代码的问题是，从 29 行到 36 行非常相似，似乎可以抽取出来。那么我们就试着抽一下。变成了下面的样子。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n\n// imports ...\n\n@Service\npublic class EffortService {\n    // 仓库和构造器没有变化 ...\n\n    public AvailableEffortItems findAvailableEffortItems(Long empId) {\n        Collection&lt;Project&gt; assignments\n                = projectRepository.findAssignmentsByEmpId(empId);\n        Collection&lt;Project&gt; commonProjects\n                = projectRepository.findCommonProjects();\n        Collection&lt;CommonEffortItem&gt; commonEffortItems\n                = commonEffortItemRepository.findAll();\n\n        var result = new AvailableEffortItems();\n\n        //使用抽取出的方法\n        appendResult(ASSIGNED_PROJECT, assignments, result);\n        appendResult(COMMON_PROJECT, commonProjects, result);\n        \n        //由于类型不匹配，不能使用抽取的方法\n        commonEffortItems.forEach( i -&gt;\n                result.addItem(COMMON_ITEM, i.getEffortItemId(), i.getName()));\n\n        return result;\n    }\n\n    // 抽取出的公共方法\n    private void appendResult(AvailableEffortItems.ItemType type\n            , Collection&lt;Project&gt; items\n            , AvailableEffortItems result) {\n        items.forEach(p -&gt;\n                result.addItem(type, p.getEffortItemId(), p.getName()));\n    }\n}\n</code></pre><p>只有存放项目的 Collection，也就是 assignments 和 commonProjects ，才能使用抽出的公共方法 appendResult()，而 commonEffortItems 则无法使用。这是因为它的类型不是 Collection&lt;Project&gt;，而是 Collection&lt;CommonEffortItem&gt;，不符合 appendResult() 的签名。</p><p>那么，怎么让 commonEffortItems 也能使用这个公共的方法呢？</p><p>由于 Project 和 CommonEffortItem 都是EffortItem 的子类，所以我们可以利用泛型的技巧来解决。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n\n// imports ...\n\n@Service\npublic class EffortService {\n    // 仓库和构造器没有变化 ...\n\n    public AvailableEffortItems findAvailableEffortItems(Long empId) {\n        Collection&lt;Project&gt; assignments\n                = projectRepository.findAssignmentsByEmpId(empId);\n        Collection&lt;Project&gt; commonProjects\n                = projectRepository.findCommonProjects();\n        Collection&lt;CommonEffortItem&gt; commonEffortItems\n                = commonEffortItemRepository.findAll();\n\n        var result = new AvailableEffortItems();\n\n        appendResult(ASSIGNED_PROJECT, assignments, result);\n        appendResult(COMMON_PROJECT, commonProjects, result);\n        \n        //commonEffortItems 也可以使用公共方法了\n        appendResult(COMMON_ITEM, commonEffortItems, result);\n\n        return result;\n    }\n\n    private void appendResult(AvailableEffortItems.ItemType type\n            , Collection&lt;? extends EffortItem&gt; items //使用通配符\n            , AvailableEffortItems result) {\n        items.forEach(p -&gt;\n                result.addItem(type, p.getEffortItemId(), p.getName()));\n    }\n}\n</code></pre><p>我们在 29 行使用类型通配符，这样就可以像 23 行那样使用公共方法了。如果你不是 Java 背景的话，可以忽略这个技巧。只需要知道由于接口 EffortItem 的存在，我们可以更方便地抽取公共逻辑就可以了。</p><p>最后，可以利用“内联”的重构手法，去除多余的局部变量定义，把代码再简化一点。</p><pre><code class=\"language-plain\">package chapter26.unjuanable.application.effortmng;\n//imports ...\n\n@Service\npublic class EffortService {\n    // 仓库和构造器没有变化 ...\n\n    public AvailableEffortItems findAvailableEffortItems(Long empId) {\n\n        var result = new AvailableEffortItems();\n\n        // 用\"内联\"重构，去除多余的局部变量\n        appendResult(ASSIGNED_PROJECT\n                , projectRepository.findAssignmentsByEmpId(empId)\n                , result);\n        \n        appendResult(COMMON_PROJECT\n                , projectRepository.findCommonProjects()\n                , result);\n        \n        appendResult(COMMON_ITEM\n                , commonEffortItemRepository.findAll()\n                , result);\n\n        return result;\n    }\n\n    // 其他部分不变 ...\n}\n</code></pre><p>这样，我们就完成了关于工时项的例子。正如我们在上节课讲的，这种实现方式要查询三遍数据库，在性能方面还有改进余地。我们会在第三个迭代解决。</p><h2>为“每个类一个表”编码</h2><p>在工时项的例子里，我们采用的数据库设计策略是“每个子类一个表”。这种策略下，聚合的持久化和之前的做法变化并不大，所以仓库里有关增加和修改的代码我们就没有列出来了。</p><p>而对于“每个类一个表”，也就是为父类也建表的情况下，仓库的逻辑会更复杂一些。我们用<a href=\"https://time.geekbang.org/column/article/627635\">上节课</a>举过的个人客户和企业客户的例子来说明一下。</p><p>先回顾一下领域模型和表结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/24/40/2442efe108383b16b943d94c69120840.jpg?wh=3733x2315\" alt=\"\"></p><p>这里为父类和各个子类各建了一张表，并且采用“共享主键”的策略。</p><p>下面看看领域对象的代码。首先是父类 Client。</p><pre><code class=\"language-plain\">package chapter26.partysample.domain.client;\n// imports ...\n\npublic abstract class Client extends AggregateRoot {\n    private Long id;\n    private Address address;\n\n    // constructors ...\n    \n    public abstract String getClientType();\n    \n    // other getters and setters ...\n\n}\n</code></pre><p>关于这个父类，有三个要点需要留意。</p><p>首先，我们从第 4 行可以看到，Client（客户）类是一个抽象类，因为一个抽象的客户是不能实例化的，只有实例化具体的个人或企业客户才有意义。此外，Client 是聚合根的子类，这就意味着它的所有子类也是聚合根。</p><p>第二，从第 6 行看到，Address 是一个值对象。而对应的表是把各个地址的属性打散的，也就是我们之前提过的“嵌入”的方法。我们之前也说过，内存中的对象和数据库表的布局不一致的情况，称为“阻抗不匹配”，要通过仓库（repository）来进行转换。</p><p>第三，在数据库表里有一个 client_type 来区分是哪个子类。这个字段有两个可选值：“P” 代表个人客户，“C” 代表企业客户。那么这两个值在程序里定义在哪里呢？</p><p>一种方法是在 Client 父类里用枚举或字符串常量来定义。但这样的话，如果将来又多一个子类，就要改变 Client 或枚举的定义，这就违反了“开闭原则”。所以我们现在在父类里只定义了一个抽象方法，也就是第 10 行的 getClientType()，由子类去实现。</p><p>我们继续看子类 CorporateClient （企业客户）的代码。</p><pre><code class=\"language-plain\">package chapter26.partysample.domain.corporateclient;\n// import ...\n\npublic class CorporateClient extends Client {\n    public static final String CLIENT_TYPE_CORPORATE = \"C\";\n    \n    private String name;\n    private String taxNum;\n\n    // constructors, setters and getters ...\n    \n    @Override\n    public String getClientType() {\n        return CLIENT_TYPE_CORPORATE;\n    }\n}\n</code></pre><p>这个子类里包含企业客户独有的字段。另外，我们用一个常量写出了企业客户的 clientType 值，并通过 getClientType() 返回，这个常量在后面还会用到。</p><p>个人客户（PersonalClient）子类的实现方法也类似，就不列出来了。</p><p>下面我们重点看仓库的代码。CorporateClient 和 PersonalClient 各有一个对应的仓库。我们只看 CorporateClient 的仓库就可以了。</p><pre><code class=\"language-plain\">package chapter26.partysample.adapter.driven.persistence;\n// imports ...\n\n@Repository\npublic class CorporateClientRepositoryJdbc \n       implements CorporateClientRepository {\n\n    final ClientDao clientDao;\n    final CorporateClientDao corporateClientDao;\n\n    // 用构造器注入 DAO\n    @Autowired\n    public CorporateClientRepositoryJdbc(ClientDao clientDao\n            , CorporateClientDao corporateClientDao) {\n        this.clientDao = clientDao;\n        this.corporateClientDao = corporateClientDao;\n    }\n\n    @Override\n    public boolean save(CorporateClient corporateClient) {\n        switch (corporateClient.getChangingStatus()) {\n            case NEW:\n                addCorporateClient(corporateClient);\n                break;\n            case UPDATED:\n                if (!updateCorporateClient(corporateClient)) {\n                    return false;\n                }\n                break;\n        }\n        return true;\n    }\n\n    private void addCorporateClient(CorporateClient client) {\n        clientDao.insert(client);\n        corporateClientDao.insert(client);\n    }\n\n    private boolean updateCorporateClient(CorporateClient client) {\n        if (clientDao.update(client)) {\n            corporateClientDao.update(client);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    @Override\n    public Optional&lt;CorporateClient&gt; findById(Long id) {\n        CorporateClient client = corporateClientDao.selectById(id);\n        return Optional.ofNullable(client);\n    }\n}\n</code></pre><p>先看一下第 8 行和 9 行。有没发现这里的写法和之前的迭代（例如<a href=\"https://time.geekbang.org/column/article/617473\">第10节课</a>）不太一样。之前，我们是把 JdbcTemplate 和 SimpleJdbcInsert 直接注入到仓库。现在我们注入的是 DAO，也就是“数据访问对象”。每个 DAO 对应一个表。JdbcTemplate 和 SimpleJdbcInsert 注入到了DAO，由 DAO 直接访问数据库。这种做法能使程序的关注点更加分离。</p><p>也有人喜欢把 XxxDAO 命名为  XxxTable，这样更能表明和表的一一对应关系。要是使用 MyBatis 的话，可以按习惯命名为 XxxMappter，前提是规定每个表对应一个 Mapper。如果用JPA则没有必要用 DAO 了，因为 DAO 做的事情都被底层框架自动化了。</p><p>第 20 行的 save() 方法和之前的做法没有区别，都是根据数据是否有变化，再决定是新增还是修改。</p><p>第 34 行 addCorporateClient() 是向数据库新增企业客户，调用 DAO 分别插入 client 和 coperate_client 两个表。这里发生了内存中的一个对象向数据库里两个表的转换。</p><p>第 39 行 updateCorporateClient() 用于修改企业客户。首先修改 client 表。这里实际上用了之前学过的乐观锁的判断，没有被别人并发地抢先修改，才继续修改 corporate_client 表。也就是说，在这个泛化体系中，是在父类的表上加乐观锁，同时就把子类也锁住了。这和之前工时项不同。</p><p>第 50 行 findById() 是查询，主要逻辑在DAO里。</p><p>接下来我们就看一下 DAO。首先是 ClientDao。</p><pre><code class=\"language-plain\">package chapter26.partysample.adapter.driven.persistence;\n// imports ...\n\n@Component\npublic class ClientDao {\n    final JdbcTemplate jdbc;\n    final SimpleJdbcInsert insert;\n\n    @Autowired\n    public ClientDao(JdbcTemplate jdbc) {\n        // 注入 JdbcTemplate, 初始化 SimpleJdbcInsert ...\n    }\n\n    public void insert(Client client) {\n        Address address = client.getAddress();\n\n        Map&lt;String, Object&gt; parms = Map.of(\n                \"client_type\", client.getClientType()\n                , \"addr_country\", address.getCountry()\n                , \"addr_province\", address.getProvince()\n                , \"addr_city\", address.getCity()\n                , \"addr_district\", address.getDistrict()\n                , \"addr_detail\", address.getDetail()\n                , \"version\", 1L\n                , \"created_at\", client.getCreatedAt()\n                , \"created_by\", client.getCreatedBy()\n        );\n\n        Number createdId = insert.executeAndReturnKey(parms);\n        forceSet(client, \"id\", createdId.longValue());\n    }\n\n    public boolean update(Client client) {\n        Address address = client.getAddress();\n        String sql = \"update client \"\n                + \" set version = version + 1 \"\n                + \", addr_country =? \"\n                + \", addr_province =? \"\n                + \", addr_city =? \"\n                + \", addr_district =? \"\n                + \", addr_detail =? \"\n                + \", last_updated_at =?\"\n                + \", last_updated_by =? \"\n                + \" where id = ? and version = ?\";\n\n        int affected = jdbc.update(sql\n                , address.getCountry()\n                , address.getProvince()\n                , address.getCity()\n                , address.getDistrict()\n                , address.getDetail()\n                , client.getLastUpdatedAt()\n                , client.getLastUpdatedBy()\n                , client.getId()\n                , client.getVersion());\n\n        return affected == 1;\n    }\n}\n</code></pre><p>这段代码有几个地方可以注意一下。</p><p>在 14 行 insert() 方法里，我们可以看到值对象 address 是怎样以内嵌的方式转化成表数据的。在第 29 行插表的过程中取得 id。由于我们采用了<strong>共享主键的策略</strong>，所以只在这里取一次主键，插 corporate_client 和 personal_client 的时候就直接用这个 id 了。</p><p>第 18 行，调用 getClientType()，这里你可以再体会一下之前说的开闭原则。</p><p>第 35 行的 update() 方法中，可以看到对乐观锁的实现。</p><p>还有一点，实际上，ClientDao 不仅仅会被企业客户的 CorporateClientRepositoryJdbc 调用，也会被个人客户的 PersonalClientRepositoryJdbc 所调用。这说明，分离关注点提高了程序的可复用性。</p><p>最后，我们看看用于企业客户表的CorporateClientDao。</p><pre><code class=\"language-plain\">package chapter26.partysample.adapter.driven.persistence;\n// imports ...\n\n@Component\npublic class CorporateClientDao {\n\n    final JdbcTemplate jdbc;\n    final SimpleJdbcInsert insert;\n\n    @Autowired\n    public CorporateClientDao(JdbcTemplate jdbc) {\n        // 注入 JdbcTemplate 并初始化 SimpleJdbcInsert ...\n    }\n\n    void insert(CorporateClient client) {\n       // 插入 corporate_client 表 ...\n    }\n\n    void update(CorporateClient client) {\n        // 插入 corporate_client 表 ...\n    }\n\n    CorporateClient selectById(Long id) {\n        String sql = \" select c.version\"\n                + \", c.addr_country\"\n                + \", c.addr_province\"\n                + \", c.addr_city\"\n                + \", c.addr_district\"\n                + \", c.addr_detail\"\n                + \", cc.name\"\n                + \", cc.tax_num\"\n                + \", cc.created_at\"\n                + \", cc.created_by\"\n                + \", cc.last_update_at\"\n                + \", cc.last_updated_by  \"\n                + \" from client as c\"\n                + \"   left join corporate_client  as cc\"\n                + \"   on c.id = cc.id \"\n                + \" where c.id = ? and c.client_type = ? \";\n\n\n        CorporateClient client = jdbc.queryForObject(sql,\n                (rs, rowNum) -&gt; {\n                    Address address = new Address(\n                              rs.getString(\"addr_country\")\n                            , rs.getString(\"addr_province\")\n                            , rs.getString(\"addr_city\")\n                            , rs.getString(\"addr_district\")\n                            , rs.getString(\"addr_detail\")\n                    );\n                    return new CorporateClient(id\n                            , rs.getString(\"name\")\n                            , rs.getString(\"tax_num\")\n                            , address\n                            , rs.getTimestamp(\"created_at\").toLocalDateTime()\n                            , rs.getLong(\"created_by\")\n                            , rs.getLong(\"last_updated_by\")\n                            , rs.getTimestamp(\"last_updated_at\").toLocalDateTime());\n                },\n                id, CLIENT_TYPE_CORPORATE);\n        return client;\n    }\n}\n</code></pre><p>这里 23 行 selectById() 方法值得讲一下，用于从数据库里查询出 CorporateClient 对象。</p><p>首先，从 24 行开始，我们用了一个连表查询，同时查 client 和 corporate_client 表，因为CorporateClient 对象的内容整体上来自于这两个表。</p><p>那么既然是查询两个表，这个逻辑应该放在 ClientDao 还是放在 CorporateClientDao 呢？</p><p>我们可以从两个角度来思考。第一个角度是，从 selectById() 的返回值可以看到，这个方法目的就是返回 CorporateClient ，那么放在 CorporateClientDao 里，在含义上更顺畅，或者说，程序员更容易凭常理推断出这个逻辑放在哪里。</p><p>第二个角度是，如果放在 ClientDao 的话，那么当我们增加关于 PersonalClient（个人客户）的逻辑时，也要类似地改 ClientDao 这个类。而如果放在 CorporateClientDao 的话，就意味着增加 PersonalClient 逻辑时，只需要把连表查询逻辑写在PersonalClientDao里面，而不需要修改 ClientDao 类。也就是说，这种方法更符合<strong>开闭原则</strong>。</p><p>所以，最终这个连表查询的逻辑，我们写在了  CorporateClientDao 里。</p><p>第 43 行开始的数据库数据向内存对象的转换逻辑里，包含了内嵌在数据表里的地址数据向 address 值对象的转换。</p><p>第 60 行的 CLIENT_TYPE_CORPORATE 实际上是定义在 CorporateClient 里的。由于这时候 CorporateClient 对象还不存在，不能用对象层面的 getClientType()方法，只能使用在类的层面定义的常量。</p><p>顺便说一下，在 Repository 里，我们用 save 和 findByXxx 这样的方式为方法命名。而在 DAO 中用 insert、 update、 selectByXxx 这样的方式命名，目的是<strong>更接近SQL语句中的命名</strong>。这样也把两个层面的代码更好地区分开。</p><h2>总结</h2><p>好，这节课的主要内容就讲到这，我们来总结一下。</p><p>今天我们讨论的是泛化的代码实现。主要抓住两个点：<strong>一是领域对象的代码采用类的继承或接口的实现；二是用仓库实现内存中的对象和数据库表中的数据之间的双向转换。</strong></p><p>由于在领域建模时，虽然仍然反映的是业务概念，但架构师已经刻意使模型更容易和代码设计保持一致了，所以代码直接用继承或接口实现就可以。</p><p>但是，到底用类继承还是接口实现，则要根据具体情况而定。今天工时项的例子用的就是接口实现，而客户的例子用的则是类的实现。而如果我们在写代码的时候，发现用继承或接口实现都不合适，就应该反过来修改领域模型。</p><p>在数据库设计上，工时项的例子用的是“一个子类一个表”的策略，这种策略的仓库实现起来相对简单。</p><p>而客户的例子用的是“每个类一个表”的策略，由于每个实体都牵涉到两张表，所以实现相对要复杂一些。但是，这种复杂性被仓库屏蔽掉了，除了仓库以外，代码的其他部分看不到这些复杂性。从另一个角度来说，如果数据库设计的策略改了，比如由“每个子类一个表”改成了“每个类一个表”，那么，理论上只需要修改仓库就可以了。</p><p>我们今天还讲了用仓库对嵌入式的值对象进行转换的方法。同时在代码设计上，还考虑了开闭原则，也就是“对增加打开，对修改关闭”。</p><h2>思考题</h2><p>我给你准备了两道思考题。</p><p>1.在工时项的例子里，子类共用的字段只有一个<strong>工时项ID</strong>，这时用接口实现问题不大。但是，如果共用的字段比较多，今天的做法就会导致较多的代码重复，在 Java 这种单继承语言的限制下，有什么更好的办法呢？</p><p>2.在最后一段代码的 51 行创建 CorporateClient 的时候，构造器字段比较多，不是太整洁，有什么更好的办法改进呢？</p><p>好，今天的课程结束了，有什么问题欢迎在评论区留言。下节课，我们开始第三个迭代，敬请期待。</p>","neighbors":{"left":{"article_title":"25｜泛化的实现（上）：怎样为泛化设计数据库？","id":627635},"right":{"article_title":"27｜迭代三概述：怎样处理规模更大的系统？","id":629262}},"comments":[{"had_liked":false,"id":368097,"user_name":"子衿","can_delete":false,"product_type":"c1","uid":1903229,"ip_address":"上海","ucode":"E76CC673517290","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/7d/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1675906319,"is_pvip":false,"replies":[{"id":135184,"content":"嗯，两个问题的思路都不错。尤其是第1题的组合思路。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678976768,"ip_address":"广东","comment_id":368097,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 公共字段比较多，那么首先从上节课表设计的角度，就不应该每个子类一个表了，先将表的设计改成每个类一个表，此时由于子项目仍然不能是聚合根，因此依然不能使用继承的方式，由于EffortItem中新增了属性值，又不适合作为接口，所以此时考虑将整个EffortItem作为一个属性放入到项目、子项目、普通工时项中，也就是组合替代继承，最终仍然通过Respository消除这种不匹配\n2. 可以考虑为CorporateClient创建Builder","like_count":12,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609447,"discussion_content":"嗯，两个问题的思路都不错。尤其是第1题的组合思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678976768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372369,"user_name":"杰","can_delete":false,"product_type":"c1","uid":1109562,"ip_address":"广东","ucode":"036B010A45070A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/3a/c0ad9c43.jpg","comment_is_top":false,"comment_ctime":1681046041,"is_pvip":false,"replies":[{"id":136138,"content":"注意一点：聚合是对象实例和实例之间的关系，不是类和类之间的关系。从类的角度有三个类：客户、个人客户、企业客户，但具体到对象，比如某个个人客户，就只有一个对象了。关键要理解这句话“聚合是对象实例和实例之间的关系，不是类和类之间的关系”","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1681633630,"ip_address":"广东","comment_id":372369,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"“此外，Client 是聚合根的子类，这就意味着它的所有子类也是聚合根。”\n老师，一个聚合不是只能有一个聚合根吗？这样的话，个人客户也是聚合根，企业客户也是聚合根，那不是冲突了吗？","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":614020,"discussion_content":"注意一点：聚合是对象实例和实例之间的关系，不是类和类之间的关系。从类的角度有三个类：客户、个人客户、企业客户，但具体到对象，比如某个个人客户，就只有一个对象了。关键要理解这句话“聚合是对象实例和实例之间的关系，不是类和类之间的关系”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681633630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368942,"user_name":"6点无痛早起学习的和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"北京","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1676941568,"is_pvip":false,"replies":[{"id":135161,"content":"建议把事务控制加在应用层，而不是Repository上面","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678972491,"ip_address":"广东","comment_id":368942,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"在代码里的 addCorporateClient、updateCorporateClient 方法应该加事务控制吧，看文中没有加","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609410,"discussion_content":"建议把事务控制加在应用层，而不是Repository上面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678972491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3537829,"avatar":"","nickname":"Geek_4e5be0","note":"","ucode":"3FE25911851193","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606141,"discussion_content":"事务加在应用层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676968745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373644,"user_name":"许勇","can_delete":false,"product_type":"c1","uid":1527200,"ip_address":"北京","ucode":"20A6EA5A539DC3","user_header":"https://static001.geekbang.org/account/avatar/00/17/4d/a0/e547b7a1.jpg","comment_is_top":false,"comment_ctime":1682875577,"is_pvip":false,"replies":[{"id":136593,"content":"是的，用接口继承代替实现继承。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1683295859,"ip_address":"广东","comment_id":373644,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"问题1，继承工时项，实现聚合根接口","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":617075,"discussion_content":"是的，用接口继承代替实现继承。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683295859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3906776,"avatar":"","nickname":"Geek_0052b7","note":"","ucode":"47D3222FD6F6B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":647997,"discussion_content":"如果工时项跟项目不在同一个BC？工时项接口放到工时项BC 的domain或者adapter都不能解决。但放到跨bc的common又感觉怪怪的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720915436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":617075,"ip_address":"重庆","group_id":0},"score":647997,"extra":""}]}]},{"had_liked":false,"id":368795,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"北京","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1676719118,"is_pvip":false,"replies":[{"id":134804,"content":"嗯，是一种办法","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677987587,"ip_address":"广东","comment_id":368795,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1、按照这里的场景，因为考虑到聚合根和工时项两大特性，只能把工时项作为接口，如果共用字段比较多，那可以写一个默认实现，真正的子类在派生自它，只重写必要的方法。\n\n2、使用builder模式。","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607584,"discussion_content":"嗯，是一种办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677987587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368172,"user_name":"子衿","can_delete":false,"product_type":"c1","uid":1903229,"ip_address":"上海","ucode":"E76CC673517290","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/7d/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1675953638,"is_pvip":false,"replies":[{"id":135181,"content":"理论上可以互相调用。\n尽量避免循环依赖。解决方式有多种，要看具体情况。抽接口也是一种常见的做法。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678976330,"ip_address":"广东","comment_id":368172,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"老师这边有个问题想问一下，就是下层肯定是不应该调用上层，那么同层之间可不可以互相调用呢，看示例中，Handler和Repository都是领域层，他们间就进行了互相调用，但如果不同的两个模块的应用服务间，是不是可以互相调用呢，互相调用时，是不是就可能产生循环依赖，这种问题一般怎么解决，也是通过在领域服务层加接口，然后在适配器层实现，从而解决吗，还是有什么最佳实践","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609442,"discussion_content":"理论上可以互相调用。\n尽量避免循环依赖。解决方式有多种，要看具体情况。抽接口也是一种常见的做法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678976331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3506330,"avatar":"https://static001.geekbang.org/account/avatar/00/35/80/9a/692637f6.jpg","nickname":"曹坤明","note":"","ucode":"23B55F5F10881E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609629,"discussion_content":"我们这边的方法是，为模块创建一个API模块，这个API模块中只定义抽象接口和DTO，模块之间全部通过API模块来依赖，就解决循环依赖了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679059422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国台湾","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393592,"user_name":"猴哥","can_delete":false,"product_type":"c1","uid":1588683,"ip_address":"浙江","ucode":"63A1BFDF13D85D","user_header":"https://static001.geekbang.org/account/avatar/00/18/3d/cb/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1724283747,"is_pvip":false,"replies":[{"id":143636,"content":"计划更新，不过会晚点，实在抱歉。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731399736,"ip_address":"广东","comment_id":393592,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"老师好，文中的代码，在哪里？还会更新吗？\n这个仓库（https:&#47;&#47;github.com&#47;zhongjinggz&#47;geekdemo）里没有","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653693,"discussion_content":"计划更新，不过会晚点，实在抱歉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731399737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391215,"user_name":"InfoQ_小汤","can_delete":false,"product_type":"c1","uid":1739070,"ip_address":"江苏","ucode":"E4C30DB7A9B54C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","comment_is_top":false,"comment_ctime":1717601401,"is_pvip":false,"replies":[{"id":143669,"content":"这个一两句话可能说不清，尝试回答一下：\n1）你说的infrastructure层和课程中说的“被动适配器”层应该是同一个东西，我后面统一用“适配器&quot;这个术语了。\n2）一般来说，数据库表总会以某种形式对应到领域对象的，否则就不是按照DDD的方式实现了，这时当然也就不必考虑DDD的要求。下面假定我们还是按照DDD来实现。\n3）PO实际上会隐藏在仓库实现的内部，并且是可选的。对于仓库外部的调用者而言，看到的永远是领域对象，不会意识到PO的存在。PO只是仓库的一种具体实现方式。\n4）所以，这里真正要权衡的是是否要使用PO。如果不使用PO，那么直接在领域对象和数据表记录之间进行转换就可以了；如果使用PO，那么查询时，数据库表中的数据会先转换成PO，然后，PO再转换成领域对象，反之亦然。\n5）我的建议是：如果领域对象和数据库表之间是简单的一对一关系，那么没有必要使用PO了；如果领域对象和数据库表间对应关系比较复杂（例如泛化的情况，或者遗留系统），那么可以使用PO。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731491535,"ip_address":"广东","comment_id":391215,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"第一次留言：这块我感觉跟我之前做ddd项目有点不太一样 repository这种逻辑 应该放到infrastructure层还是应该放到domain层？ 按照老师的说法“用仓库实现内存中的对象和数据库表中的数据之间的双向转换” 这个时候如果放到infrastructure就会有个尴尬的问题，一般领域对象才会有这种组合或者继承的关系。实际与db打交道的PO基本上不会设置这种复杂关系，当然也设置这种也可以做这种处理。 最近刚购课，也看了老师的代码。所以对于repo这种与数据库打交道的adapter 我们究竟应该放到拿一层去做？或者有哪些选择，考量的点有哪些呢","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653873,"discussion_content":"这个一两句话可能说不清，尝试回答一下：\n1）你说的infrastructure层和课程中说的“被动适配器”层应该是同一个东西，我后面统一用“适配器&#34;这个术语了。\n2）一般来说，数据库表总会以某种形式对应到领域对象的，否则就不是按照DDD的方式实现了，这时当然也就不必考虑DDD的要求。下面假定我们还是按照DDD来实现。\n3）PO实际上会隐藏在仓库实现的内部，并且是可选的。对于仓库外部的调用者而言，看到的永远是领域对象，不会意识到PO的存在。PO只是仓库的一种具体实现方式。\n4）所以，这里真正要权衡的是是否要使用PO。如果不使用PO，那么直接在领域对象和数据表记录之间进行转换就可以了；如果使用PO，那么查询时，数据库表中的数据会先转换成PO，然后，PO再转换成领域对象，反之亦然。\n5）我的建议是：如果领域对象和数据库表之间是简单的一对一关系，那么没有必要使用PO了；如果领域对象和数据库表间对应关系比较复杂（例如泛化的情况，或者遗留系统），那么可以使用PO。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731491535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387749,"user_name":"雷欧","can_delete":false,"product_type":"c1","uid":3791507,"ip_address":"浙江","ucode":"C3B2752243432C","user_header":"https://static001.geekbang.org/account/avatar/00/39/da/93/51ef18f6.jpg","comment_is_top":false,"comment_ctime":1708509153,"is_pvip":false,"replies":[{"id":141398,"content":"没有什么？","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1709973155,"ip_address":"广东","comment_id":387749,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"代码在分支上没有啊","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638824,"discussion_content":"没有什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709973155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181867,"avatar":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","nickname":"humor","note":"","ucode":"9B48C4C7BEC92C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640562,"discussion_content":"哪个代码没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711603565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383376,"user_name":"+ 糠","can_delete":false,"product_type":"c1","uid":1129601,"ip_address":"广东","ucode":"2D5A91900FCA43","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","comment_is_top":false,"comment_ctime":1698934541,"is_pvip":false,"replies":[{"id":139709,"content":"在代码的分支上","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1699079155,"ip_address":"广东","comment_id":383376,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"多个聚合根对应多个仓库，那应用层是怎么调用的？代码更新了吗？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630938,"discussion_content":"在代码的分支上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699079155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377241,"user_name":"Geek_ca43a3","can_delete":false,"product_type":"c1","uid":1842715,"ip_address":"广东","ucode":"9454850986B57C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKw8dIICKGukZmrPCIsD530icY56OKHYk3TmaZT50sA9lMXbiaxockghzUcicm2G4Jk8OMp0KlZek5gg/132","comment_is_top":false,"comment_ctime":1688117617,"is_pvip":false,"replies":[{"id":137718,"content":"如果EffortItem是AggregateRoot的子类，而SubProject又是EffortItem的子类，那么，SubProject也就是AggregateRoot的间接子类了，这是，可以说SubProject是一个AggregateRoot。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1689499115,"ip_address":"","comment_id":377241,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"&quot;如果让 SubProject 也继承 EffortItem 类的话，SubProject 就成了聚合根&quot;，这句话怎么理解？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623447,"discussion_content":"如果EffortItem是AggregateRoot的子类，而SubProject又是EffortItem的子类，那么，SubProject也就是AggregateRoot的间接子类了，这是，可以说SubProject是一个AggregateRoot。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689499115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369171,"user_name":"赵晏龙","can_delete":false,"product_type":"c1","uid":2673605,"ip_address":"湖南","ucode":"F15730BCA97EE0","user_header":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","comment_is_top":false,"comment_ctime":1677200927,"is_pvip":false,"replies":[{"id":134798,"content":"1 关键是 abstract 也不能解决 Java 只能单继承的问题\n2 没问题","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677939598,"ip_address":"广东","comment_id":369171,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1 abstract\n2 builder，另外，我一般只在构造函数中放【键】，其他不放。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607561,"discussion_content":"1 关键是 abstract 也不能解决 Java 只能单继承的问题\n2 没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677939599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369244,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1677287399,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"原来在敏捷实战中可以忽略「详细的设计图」，确实比传统的面向对象方法学要快很多\n\n学到了在父类中使用抽象方法 getClientType() 代替 枚举类实现「开闭原则」的技巧","like_count":3}]}