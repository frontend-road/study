{"id":117492,"title":"34 | Nginx：高性能的Web服务器","content":"<p>经过前面几大模块的学习，你已经完全掌握了HTTP的所有知识，那么接下来请收拾一下行囊，整理一下装备，跟我一起去探索HTTP之外的广阔天地。</p><p>现在的互联网非常发达，用户越来越多，网速越来越快，HTTPS的安全加密、HTTP/2的多路复用等特性都对Web服务器提出了非常高的要求。一个好的Web服务器必须要具备稳定、快速、易扩展、易维护等特性，才能够让网站“立于不败之地”。</p><p>那么，在搭建网站的时候，应该选择什么样的服务器软件呢？</p><p>在开头的几讲里我也提到过，Web服务器就那么几款，目前市面上主流的只有两个：Apache和Nginx，两者合计占据了近90%的市场份额。</p><p>今天我要说的就是其中的Nginx，它是Web服务器的“后起之秀”，虽然比Apache小了10岁，但增长速度十分迅猛，已经达到了与Apache“平起平坐”的地位，而在“Top Million”网站中更是超过了Apache，拥有超过50%的用户（<a href=\"https://w3techs.com/technologies/cross/web_server/ranking\">参考数据</a>）。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/0b/c5df0592cc8aef91ba961f7fab5a4a0b.png?wh=1222*340\" alt=\"unpreview\"></p><p>在这里必须要说一下Nginx的正确发音，它应该读成“Engine X”，但我个人感觉“X”念起来太“拗口”，还是比较倾向于读做“Engine ks”，这也与UNIX、Linux的发音一致。</p><p>作为一个Web服务器，Nginx的功能非常完善，完美支持HTTP/1、HTTPS和HTTP/2，而且还在不断进步。当前的主线版本已经发展到了1.17，正在进行HTTP/3的研发，或许一年之后就能在Nginx上跑HTTP/3了。</p><!-- [[[read_end]]] --><p>Nginx也是我个人的主要研究领域，我也写过相关的书，按理来说今天的课程应该是“手拿把攥”，但真正动笔的时候还是有些犹豫的：很多要点都已经在书里写过了，这次的专栏如果再重复相同的内容就不免有“骗稿费”的嫌疑，应该有些“不一样的东西”。</p><p>所以我决定抛开书本，换个角度，结合HTTP协议来讲Nginx，带你窥视一下HTTP处理的内幕，看看Web服务器的工作原理。</p><h2>进程池</h2><p>你也许听说过，Nginx是个<span class=\"orange\">“轻量级”的Web服务器</span>，那么这个所谓的“轻量级”是什么意思呢？</p><p>“轻量级”是相对于“重量级”而言的。“重量级”就是指服务器进程很“重”，占用很多资源，当处理HTTP请求时会消耗大量的CPU和内存，受到这些资源的限制很难提高性能。</p><p>而Nginx作为“轻量级”的服务器，它的CPU、内存占用都非常少，同样的资源配置下就能够为更多的用户提供服务，其奥秘在于它独特的工作模式。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/c1/3e94fbd78ed043e88c443f6416f99dc1.png?wh=1236*997\" alt=\"\"></p><p>在Nginx之前，Web服务器的工作模式大多是“Per-Process”或者“Per-Thread”，对每一个请求使用单独的进程或者线程处理。这就存在创建进程或线程的成本，还会有进程、线程“上下文切换”的额外开销。如果请求数量很多，CPU就会在多个进程、线程之间切换时“疲于奔命”，平白地浪费了计算时间。</p><p>Nginx则完全不同，“一反惯例”地没有使用多线程，而是使用了“<strong>进程池+单线程</strong>”的工作模式。</p><p>Nginx在启动的时候会预先创建好固定数量的worker进程，在之后的运行过程中不会再fork出新进程，这就是进程池，而且可以自动把进程“绑定”到独立的CPU上，这样就完全消除了进程创建和切换的成本，能够充分利用多核CPU的计算能力。</p><p>在进程池之上，还有一个“master”进程，专门用来管理进程池。它的作用有点像是supervisor（一个用Python编写的进程管理工具），用来监控进程，自动恢复发生异常的worker，保持进程池的稳定和服务能力。</p><p>不过master进程完全是Nginx自行用C语言实现的，这就摆脱了外部的依赖，简化了Nginx的部署和配置。</p><h2>I/O多路复用</h2><p>如果你用Java、C等语言写过程序，一定很熟悉“多线程”的概念，使用多线程能够很容易实现并发处理。</p><p>但多线程也有一些缺点，除了刚才说到的“上下文切换”成本，还有编程模型复杂、数据竞争、同步等问题，写出正确、快速的多线程程序并不是一件容易的事情。</p><p>所以Nginx就选择了单线程的方式，带来的好处就是开发简单，没有互斥锁的成本，减少系统消耗。</p><p>那么，疑问也就产生了：为什么单线程的Nginx，处理能力却能够超越其他多线程的服务器呢？</p><p>这要归功于Nginx利用了Linux内核里的一件“神兵利器”，<strong>I/O多路复用接口</strong>，“大名鼎鼎”的epoll。</p><p>“多路复用”这个词我们已经在之前的HTTP/2、HTTP/3里遇到过好几次，如果你理解了那里的“多路复用”，那么面对Nginx的epoll“多路复用”也就好办了。</p><p>Web服务器从根本上来说是“I/O密集型”而不是“CPU密集型”，处理能力的关键在于网络收发而不是CPU计算（这里暂时不考虑HTTPS的加解密），而网络I/O会因为各式各样的原因不得不等待，比如数据还没到达、对端没有响应、缓冲区满发不出去等等。</p><p>这种情形就有点像是HTTP里的“队头阻塞”。对于一般的单线程来说CPU就会“停下来”，造成浪费。而多线程的解决思路有点类似“并发连接”，虽然有的线程可能阻塞，但由于多个线程并行，总体上看阻塞的情况就不会太严重了。</p><p>Nginx里使用的epoll，就好像是HTTP/2里的“多路复用”技术，它把多个HTTP请求处理打散成碎片，都“复用”到一个单线程里，不按照先来后到的顺序处理，而是只当连接上真正可读、可写的时候才处理，如果可能发生阻塞就立刻切换出去，处理其他的请求。</p><p>通过这种方式，Nginx就完全消除了I/O阻塞，把CPU利用得“满满当当”，又因为网络收发并不会消耗太多CPU计算能力，也不需要切换进程、线程，所以整体的CPU负载是相当低的。</p><p>这里我画了一张Nginx“I/O多路复用”的示意图，你可以看到，它的形式与HTTP/2的流非常相似，每个请求处理单独来看是分散、阻塞的，但因为都复用到了一个线程里，所以资源的利用率非常高。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/59/4c6832cdce34133c9ed89237fb9d5059.png?wh=2211*954\" alt=\"\"></p><p>epoll还有一个特点，大量的连接管理工作都是在操作系统内核里做的，这就减轻了应用程序的负担，所以Nginx可以为每个连接只分配很小的内存维护状态，即使有几万、几十万的并发连接也只会消耗几百M内存，而其他的Web服务器这个时候早就“Memory not enough”了。</p><h2>多阶段处理</h2><p>有了“进程池”和“I/O多路复用”，Nginx是如何处理HTTP请求的呢？</p><p>Nginx在内部也采用的是“<strong>化整为零</strong>”的思路，把整个Web服务器分解成了多个“功能模块”，就好像是乐高积木，可以在配置文件里任意拼接搭建，从而实现了高度的灵活性和扩展性。</p><p>Nginx的HTTP处理有四大类模块：</p><ol>\n<li>handler模块：直接处理HTTP请求；</li>\n<li>filter模块：不直接处理请求，而是加工过滤响应报文；</li>\n<li>upstream模块：实现反向代理功能，转发请求到其他服务器；</li>\n<li>balance模块：实现反向代理时的负载均衡算法。</li>\n</ol><p>因为upstream模块和balance模块实现的是代理功能，Nginx作为“中间人”，运行机制比较复杂，所以我今天只讲handler模块和filter模块。</p><p>不知道你有没有了解过“设计模式”这方面的知识，其中有一个非常有用的模式叫做“<strong>职责链</strong>”。它就好像是工厂里的流水线，原料从一头流入，线上有许多工人会进行各种加工处理，最后从另一头出来的就是完整的产品。</p><p>Nginx里的handler模块和filter模块就是按照“职责链”模式设计和组织的，HTTP请求报文就是“原材料”，各种模块就是工厂里的工人，走完模块构成的“流水线”，出来的就是处理完成的响应报文。</p><p>下面的这张图显示了Nginx的“流水线”，在Nginx里的术语叫“阶段式处理”（Phases），一共有11个阶段，每个阶段里又有许多各司其职的模块。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/30/41318c867fda8a536d0e3db6f9987030.png?wh=1224*843\" alt=\"\"></p><p>我简单列几个与我们的课程相关的模块吧：</p><ul>\n<li>charset模块实现了字符集编码转换；（<a href=\"https://time.geekbang.org/column/article/104024\">第15讲</a>）</li>\n<li>chunked模块实现了响应数据的分块传输；（<a href=\"https://time.geekbang.org/column/article/104456\">第16讲</a>）</li>\n<li>range模块实现了范围请求，只返回数据的一部分；（<a href=\"https://time.geekbang.org/column/article/104456\">第16讲</a>）</li>\n<li>rewrite模块实现了重定向和跳转，还可以使用内置变量自定义跳转的URI；（<a href=\"https://time.geekbang.org/column/article/105614\">第18讲</a>）</li>\n<li>not_modified模块检查头字段“if-Modified-Since”和“If-None-Match”，处理条件请求；（<a href=\"https://time.geekbang.org/column/article/106804\">第20讲</a>）</li>\n<li>realip模块处理“X-Real-IP”“X-Forwarded-For”等字段，获取客户端的真实IP地址；（<a href=\"https://time.geekbang.org/column/article/107577\">第21讲</a>）</li>\n<li>ssl模块实现了SSL/TLS协议支持，读取磁盘上的证书和私钥，实现TLS握手和SNI、ALPN等扩展功能；（<a href=\"https://time.geekbang.org/column/article/108643\">安全篇</a>）</li>\n<li>http_v2模块实现了完整的HTTP/2协议。（<a href=\"https://time.geekbang.org/column/article/112036\">飞翔篇</a>）</li>\n</ul><p>在这张图里，你还可以看到limit_conn、limit_req、access、log等其他模块，它们实现的是限流限速、访问控制、日志等功能，不在HTTP协议规定之内，但对于运行在现实世界的Web服务器却是必备的。</p><p>如果你有C语言基础，感兴趣的话可以下载Nginx的源码，在代码级别仔细看看HTTP的处理过程。</p><h2>小结</h2><ol>\n<li><span class=\"orange\">Nginx是一个高性能的Web服务器，它非常的轻量级，消耗的CPU、内存很少；</span></li>\n<li><span class=\"orange\">Nginx采用“master/workers”进程池架构，不使用多线程，消除了进程、线程切换的成本；</span></li>\n<li><span class=\"orange\">Nginx基于epoll实现了“I/O多路复用”，不会阻塞，所以性能很高；</span></li>\n<li><span class=\"orange\">Nginx使用了“职责链”模式，多个模块分工合作，自由组合，以流水线的方式处理HTTP请求。</span></li>\n</ol><h2>课下作业</h2><ol>\n<li>你是怎么理解进程、线程上下文切换时的成本的，为什么Nginx要尽量避免？</li>\n<li>试着自己描述一下Nginx用进程、epoll、模块流水线处理HTTP请求的过程。</li>\n</ol><p>欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/3d/4c7bceb80a8027389705e9d6ec9eb43d.png?wh=1769*3085\" alt=\"unpreview\"></p><p></p>","comments":[{"had_liked":false,"id":123807,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565764943,"is_pvip":false,"replies":[{"id":"45382","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565774334,"ip_address":"","comment_id":123807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"139004718415","product_id":100029001,"comment_content":"你是怎么理解进程、线程上下文切换时的成本的，为什么 Nginx 要尽量避免？<br>当从一个任务切换到另一个任务，当前任务的上下文，如堆栈，指令指针等都要保存起来，以便下次任务时恢复，然后再把另一个任务的堆栈加载进来，如果有大量的上下文切换，就会影响性能。<br><br>试着自己描述一下 Nginx 用进程、epoll、模块流水线处理 HTTP 请求的过程。<br>Nginx 启动进程，一个master，多个worker，创建epoll，监听端口，多路复用来管理http请求，http请求到达worker内部，通过模块流水线处理，最后返回http响应。","like_count":33,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462823,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565774334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160515,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1575967717,"is_pvip":false,"replies":[{"id":"61317","content":"nginx也是单线程的，和redis一样自己封装了epoll。单线程的好处是没有race condition，处理简单。<br><br>nginx比redis高明的一点是多进程，提高了稳定性和并发能力。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576026074,"ip_address":"","comment_id":160515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48820607973","product_id":100029001,"comment_content":"好像高性能的服务都是这样玩的，nginx这个架构类似于netty中的多线程reactor模式，redis则是单线程reactor","like_count":12,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477397,"discussion_content":"nginx也是单线程的，和redis一样自己封装了epoll。单线程的好处是没有race condition，处理简单。\n\nnginx比redis高明的一点是多进程，提高了稳定性和并发能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576026074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123637,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1565737910,"is_pvip":false,"replies":[{"id":"45329","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565743903,"ip_address":"","comment_id":123637,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44515410870","product_id":100029001,"comment_content":"一个线程的时间片没用完就系统调用被系统调度切换出去，浪费了剩余的时间片，nginx通过epoll和注册回调，和非阻塞io自己在用户态主动切换上下文，充分利用了系统分配给进程或者线程的时间片，所以对系统资源利用很充分","like_count":11,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462756,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565743903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701572,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f6/c4/e14686d4.jpg","nickname":"shk1230","note":"","ucode":"9E39279C23FF8F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553877,"discussion_content":"浪费剩余时间片什么意思，后不会切回来吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646124486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165923,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1577345514,"is_pvip":false,"replies":[{"id":"63318","content":"<br>1.unix&#47;linux有个特别的功能，可以让进程“绑定”在一个cpu上运行，不会被操作系统调度到其他cpu上跑，这样就减少了切换的成本，提高运行效率。不是管理进程的意思。配置指令是“worker_cpu_affinity”。<br><br>2.在unix上有很多服务管理程序，比如systemd、supervisor，可以实现进程监控、自动重启等。而Nginx的master进程实现了同样的功能，就不需要这样的外部程序来管理进程，保持服务的稳定性。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1577407505,"ip_address":"","comment_id":165923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27347149290","product_id":100029001,"comment_content":"老师，以下问题，麻烦回答一下，谢谢：<br><br>1. 把进程“绑定”到独立的 CPU 上。意思是一个CPU专门负责管理进程嘛？<br><br>2. 不过 master 进程完全是 Nginx 自行用 C 语言实现的，这就摆脱了外部的依赖，简化了 Nginx 的部署和配置。这句话没理解。","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479315,"discussion_content":"\n1.unix/linux有个特别的功能，可以让进程“绑定”在一个cpu上运行，不会被操作系统调度到其他cpu上跑，这样就减少了切换的成本，提高运行效率。不是管理进程的意思。配置指令是“worker_cpu_affinity”。\n\n2.在unix上有很多服务管理程序，比如systemd、supervisor，可以实现进程监控、自动重启等。而Nginx的master进程实现了同样的功能，就不需要这样的外部程序来管理进程，保持服务的稳定性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577407505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124358,"user_name":"徐海浪","can_delete":false,"product_type":"c1","uid":1078528,"ip_address":"","ucode":"21801C420D0610","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/00/618b20da.jpg","comment_is_top":false,"comment_ctime":1565866008,"is_pvip":false,"replies":[{"id":"45713","content":"great","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565916773,"ip_address":"","comment_id":124358,"utype":1}],"discussion_count":1,"race_medal":1,"score":"27335669784","product_id":100029001,"comment_content":"多线程就好比一条流水线有多个机械手，把一件事情中途交给其他线程处理，要交接处理中间状态信息。<br>单进程就好比一条流水线只有一个机械手，切换时间片时暂停状态就可以，不用交接信息，减少无用功，所以效率高。","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463133,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565916773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242109,"user_name":"fakership","can_delete":false,"product_type":"c1","uid":1097136,"ip_address":"","ucode":"42B5F286B6CC19","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/b0/8b808d33.jpg","comment_is_top":false,"comment_ctime":1597591276,"is_pvip":false,"replies":[{"id":"89370","content":"是的，但这完全是两个不相关的事情。<br><br>队头阻塞是http&#47;1固有的问题，无论是什么web服务器都无法解决，是对单个客户端而言的。<br><br>而Nginx的epoll则是解决了多客户端并发请求的问题，避免一个客户端阻塞其他客户端的处理，可以支持海量客户端访问服务器。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597626928,"ip_address":"","comment_id":242109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18777460460","product_id":100029001,"comment_content":"老师，有个问题咨询下<br>虽然nginx是使用了epoll做了io的多路复用，但对于队头阻塞的话感觉并没有帮助啊，因为还是要等io事件回调后发送http响应报文，所以还是阻塞了下一个请求。","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503924,"discussion_content":"是的，但这完全是两个不相关的事情。\n\n队头阻塞是http/1固有的问题，无论是什么web服务器都无法解决，是对单个客户端而言的。\n\n而Nginx的epoll则是解决了多客户端并发请求的问题，避免一个客户端阻塞其他客户端的处理，可以支持海量客户端访问服务器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597626928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123718,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1565746971,"is_pvip":false,"replies":[{"id":"45352","content":"<br>1.Nginx的内容很多，看你想学哪方面了。如果是单纯的运维操作网上的资料有很多，如果是想学Nginx开发和源码就看《Nginx完全开发指南》吧。<br><br>2.说的很对，看Nginx源码可以学到很多高性能编程的技巧。<br><br>3.Nginx里也可以使用多线程，但需要“魔改”。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565750563,"ip_address":"","comment_id":123718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18745616155","product_id":100029001,"comment_content":"老师好!我打算学习nginx，有适合初学者的书推荐么?Java工程师，c全忘了。<br>线程切换开销:线程切换需要进行系统调用。需要从用户态-&gt;内核态-&gt;用户态。上下文切换，需要保存寄存器中的信息，以便于完成系统调用后还原现场。会多跑很多指令，出入栈会比寄存器慢很多。相对来说开销就很大了。<br>nginx和redis一样采用单线程模型。是因为cpu计算不可能是它们瓶颈(所以有些耗cpu资源高的计算不适合放在nginx上做会导致响应时间变长)?进程池+单线程是指，每个worker进程都是单线程是么?","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462786,"discussion_content":"\n1.Nginx的内容很多，看你想学哪方面了。如果是单纯的运维操作网上的资料有很多，如果是想学Nginx开发和源码就看《Nginx完全开发指南》吧。\n\n2.说的很对，看Nginx源码可以学到很多高性能编程的技巧。\n\n3.Nginx里也可以使用多线程，但需要“魔改”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565750563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223130,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1156222,"ip_address":"","ucode":"059966DCA3A8F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/7e/963c037c.jpg","comment_is_top":false,"comment_ctime":1591006336,"is_pvip":false,"replies":[{"id":"82269","content":"<br>1.单线程理解的很对。进程池里的每个进程都是独立的，崩溃不会影响整体服务，如果是多线程，那么线程崩溃进程也就完蛋了。<br><br>2.多进程分散运行在多个cpu上，彼此不干扰，就不会出现进程上下文切换。<br><br>3.cpu affinity 是可选的，对于单cpu就没有开启的必要，反而会增加进程切换的成本。<br><br>4.刚才说，单进程多线程的缺点就是不够稳定，一个线程出问题，整个进程都受影响。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591060118,"ip_address":"","comment_id":223130,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10180940928","product_id":100029001,"comment_content":"对『进程池 + 单线程』的模式还是不太透彻。<br><br>我理解，『单线程』指的是所有 HTTP 请求放在同一个线程里通过『I&#47;O 多路复用』的技术处理，实际就是高度集中（无阻塞）地占用了 CPU（核心）地运算能力。<br><br>那么，既然请求是单线程的，那进程池地作用又是什么呢？如果是多进程的，不就又回到进程间上下文切换的消耗问题了吗？<br><br>另，Nginx 通过 cpu affinity 将进程绑定到 CPU，假设是单 CPU，将三个 worker 进程绑定到同一个物理 CPU 地意义又在哪呢？<br><br>个人认为效率最高的方式，是按照 CPU 的核心数量创建一个『线程池』，将所有请求分配到『线程池』内不同的线程，这样在『I&#47;O 多路复用』的加持下能跑满 CPU 的性能。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497021,"discussion_content":"\n1.单线程理解的很对。进程池里的每个进程都是独立的，崩溃不会影响整体服务，如果是多线程，那么线程崩溃进程也就完蛋了。\n\n2.多进程分散运行在多个cpu上，彼此不干扰，就不会出现进程上下文切换。\n\n3.cpu affinity 是可选的，对于单cpu就没有开启的必要，反而会增加进程切换的成本。\n\n4.刚才说，单进程多线程的缺点就是不够稳定，一个线程出问题，整个进程都受影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591060118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156222,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/7e/963c037c.jpg","nickname":"Aaron","note":"","ucode":"059966DCA3A8F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277571,"discussion_content":"所以说进程池的数量要根据 CPU 个数设置，对吗？单 CPU 的话也就没必要『池』了，单进程单线程就可以了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591073528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1156222,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/7e/963c037c.jpg","nickname":"Aaron","note":"","ucode":"059966DCA3A8F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574196,"discussion_content":"FYI\n应该不是，如果只是单进程，进程挂了，有意味着整个服务挂了。\n应该是一个取舍的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653896346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277571,"ip_address":""},"score":574196,"extra":""}]}]},{"had_liked":false,"id":173382,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1579517186,"is_pvip":false,"replies":[{"id":"67232","content":"说的很好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1579531850,"ip_address":"","comment_id":173382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10169451778","product_id":100029001,"comment_content":"说一下http2和nginx的多路复用区别和联系：<br>http2的多路复用：多个请求复用同一个连接并行传输数据，且每个请求抽象为流传输的对象为帧序列。<br>nginx的IO多路复用：将多个线程的请求打散，汇入同一个线程中传输，epoll监听到事件通道可读或者可写的时候取出或者写入数据，所以nginx的IO多路复用是基于linux内核epoll实现的一种事件监听机制，是NIO非阻塞IO。<br>","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482054,"discussion_content":"说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579531850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123636,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1565737846,"is_pvip":false,"replies":[{"id":"45330","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565743910,"ip_address":"","comment_id":123636,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10155672438","product_id":100029001,"comment_content":"切换cpu需要保存线程的上下文，然后再切回去，这是开销","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462755,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565743910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5106,"discussion_content":"√就是对钩啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565948265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","nickname":"阿锋","note":"","ucode":"7AF449ABA89242","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4819,"discussion_content":"√ 这个是什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565752881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284421,"user_name":"脱缰的野马__","can_delete":false,"product_type":"c1","uid":1447569,"ip_address":"","ucode":"D5F993E7232C61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","comment_is_top":false,"comment_ctime":1616238717,"is_pvip":false,"replies":[{"id":"103156","content":"tomcat应该算是java容器吧，主要是实现业务，不是专门的web服务器。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1616290041,"ip_address":"","comment_id":284421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911206013","product_id":100029001,"comment_content":"老师你好，tomcat不主流吗？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517343,"discussion_content":"tomcat应该算是java容器吧，主要是实现业务，不是专门的web服务器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616290041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233267,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1594275427,"is_pvip":false,"replies":[{"id":"86149","content":"不是。<br><br>Nginx是用纯C开发的，里面没有协程的概念，它内部用的是epoll事件机制，reactor并发模式，有ready事件就回调。<br><br>OpenResty把lua的协程和epoll事件机制结合在了一起，但两者还是不能混为一谈。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594343310,"ip_address":"","comment_id":233267,"utype":1}],"discussion_count":3,"race_medal":1,"score":"5889242723","product_id":100029001,"comment_content":"Nginx这种异步处理方式叫“协程”吧？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500965,"discussion_content":"不是。\n\nNginx是用纯C开发的，里面没有协程的概念，它内部用的是epoll事件机制，reactor并发模式，有ready事件就回调。\n\nOpenResty把lua的协程和epoll事件机制结合在了一起，但两者还是不能混为一谈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594343310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554764,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b9/4c/8c9edc85.jpg","nickname":"小庞","note":"","ucode":"7C8367CDB47163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385996,"discussion_content":"你说到了这个，我认为和python中协程的概念非常类似。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627375526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017161,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","nickname":"皮特尔","note":"","ucode":"313862C91DD325","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290113,"discussion_content":"谢谢解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594347980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212491,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1538554,"ip_address":"","ucode":"C3744C5164F30F","user_header":"https://static001.geekbang.org/account/avatar/00/17/79/fa/48b481fe.jpg","comment_is_top":false,"comment_ctime":1588133227,"is_pvip":false,"replies":[{"id":"78939","content":"这个要联系极客时间吧，版权在他们那里。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588138599,"ip_address":"","comment_id":212491,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5883100523","product_id":100029001,"comment_content":"老师，您好，我想写博客，我写的博客里面能盗一下您的图么（您的图做的太直观了一看就懂了），我会著名图片的出处😇😇","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493522,"discussion_content":"这个要联系极客时间吧，版权在他们那里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588138599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123847,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1565770627,"is_pvip":false,"replies":[{"id":"45546","content":"正向代理和反向代理是根据它所在的位置来定义的，靠近客户端就是正向，靠近服务器就是反向。<br><br>代理与缓存是不相关的，代理可以没有缓存功能。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565830250,"ip_address":"","comment_id":123847,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5860737923","product_id":100029001,"comment_content":"缓存服务器，是属于正向代理还是反向代理，还是根据情况而定。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462842,"discussion_content":"正向代理和反向代理是根据它所在的位置来定义的，靠近客户端就是正向，靠近服务器就是反向。\n\n代理与缓存是不相关的，代理可以没有缓存功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565830250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574197,"discussion_content":"FYI\n正向代理\n以我们访问国外的网站为例，比如访问Google、Facebook。我们需要借助vpn才能访问，我们借助vpn访问国外的网站，其实就是个正向代理的过程。\n\nvpn对于Users来说，是可以感知到的（因为用户需要配置连接），vpn对于google服务器来说，是不可感知的(google服务器只知道有http请求过来)。所以，对于用户来说可以感知到，而对于服务器来说感知不到服务器，就是正向代理服务器（vpn） \n\n反向代理\n拿Nginx作为反向代理服务器实现负载均衡来举例，假设此时我们访问百度。\n\n当用户访问百度时，所有的请求会到达一个反向代理服务器，这个反向代理服务器会将请求分发给后边的某一台服务器去处理我们的请求。此时，这个代理服务器其实对用户来说是不可感知的，用户感知到的是百度的服务器给自己返回了结果，并不知道代理服务器的存在。也就是说，对于用户来说不可感知，对于服务器来说是可以感知的，就叫反向代理服务器（Nginx）\n\nhttps://blog.csdn.net/william_n/article/details/103539154","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653896637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380026,"discussion_content":"我也这么觉得，就是，比如ABC，可以AB一家，也可以BC一家，取决于看待的视角","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624285332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337352,"user_name":"zyd-githuber","can_delete":false,"product_type":"c1","uid":1383520,"ip_address":"","ucode":"31466DFD25575B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBrZt8rUzS24vibOdKH8icdxVMHLSNgRaYovGxbuEqJILacAicyLPzLgXkbhPhowibv6plHkDNDywxdA/132","comment_is_top":false,"comment_ctime":1646788516,"is_pvip":false,"replies":[{"id":"123292","content":"Nginx可是2002年就开始开发了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646813807,"ip_address":"","comment_id":337352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646788516","product_id":100029001,"comment_content":"感觉和nodejs的单线程机制非常像","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555220,"discussion_content":"Nginx可是2002年就开始开发了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646813807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328751,"user_name":"忧天小鸡","can_delete":false,"product_type":"c1","uid":1073947,"ip_address":"","ucode":"A1412BDC108FD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","comment_is_top":false,"comment_ctime":1640863387,"is_pvip":false,"replies":[{"id":"119918","content":"Nginx调用操作系统的epoll接口，来处理tcp事件，本质上epoll和tcp没有直接关系，但tcp会有读写事件，就可以利用epoll来处理。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1641273786,"ip_address":"","comment_id":328751,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640863387","product_id":100029001,"comment_content":"这里说的nx的epoll是指模仿epoll的交互逻辑，还是指从epoll的base上做了对tcp的改装？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543694,"discussion_content":"Nginx调用操作系统的epoll接口，来处理tcp事件，本质上epoll和tcp没有直接关系，但tcp会有读写事件，就可以利用epoll来处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641273786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323849,"user_name":"三千世界","can_delete":false,"product_type":"c1","uid":2856479,"ip_address":"","ucode":"EB1CBA37777E83","user_header":"https://static001.geekbang.org/account/avatar/00/2b/96/1f/a4e3f3a5.jpg","comment_is_top":false,"comment_ctime":1638180705,"is_pvip":false,"replies":[{"id":"117544","content":"accept mutex设计的目的是多worker进程之间负载均衡，避免有的worker处理的连接太多。<br><br>初衷是好的，在NGINX初期也确实很有效果，但到了现在，并发越来越多，它的锁成本就显得高了。<br><br>目前NGINX不推荐使用accept mutex，而是改用Linux系统内核的reuseport来实现负载均衡。<br><br>你说的master监听的方式是很传统的做法，效率更低。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1638239895,"ip_address":"","comment_id":323849,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1638180705","product_id":100029001,"comment_content":"老师我想问一下，nginx为什么要设计让多个worker进程竞争accpet，这样导致 惊群 问题，还要加锁来解决，反而造成了性能下降。<br>所以，为什么不让master通过epoll监听有连接可以accept，通过调度，找一个不怎么忙的worker，然后通过管道通知这个worker呢，这样就不会出现惊群问题了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534603,"discussion_content":"accept mutex设计的目的是多worker进程之间负载均衡，避免有的worker处理的连接太多。\n\n初衷是好的，在NGINX初期也确实很有效果，但到了现在，并发越来越多，它的锁成本就显得高了。\n\n目前NGINX不推荐使用accept mutex，而是改用Linux系统内核的reuseport来实现负载均衡。\n\n你说的master监听的方式是很传统的做法，效率更低。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638239895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2856479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/96/1f/a4e3f3a5.jpg","nickname":"三千世界","note":"","ucode":"EB1CBA37777E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534633,"discussion_content":"啊，对老师，我就想知道，为什么master监听的方法效率更低？\n是因为master监听的话，应对高并发情况下一个一个去调度worker，通过管道通知最空闲的worker执行accpet吗？\n这个过程和 nginx accpet 加锁的方式 效率上要怎么进行比较 和权衡的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638244473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534603,"ip_address":""},"score":534633,"extra":""}]}]},{"had_liked":false,"id":320171,"user_name":"爱编程的运维","can_delete":false,"product_type":"c1","uid":2535502,"ip_address":"","ucode":"696DBA399CCFA3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4faqHgQSawd4VzAtSv0IWDddm9NucYWibRpxejWPH5RUO310qv8pAFmc0rh0Qu6QiahlTutGZpia8VaqP2w6icybiag/132","comment_is_top":false,"comment_ctime":1636105757,"is_pvip":false,"replies":[{"id":"116080","content":"当然可以，像envoy，还有NGINX Unit都是多线程+io多路复用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1636121043,"ip_address":"","comment_id":320171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636105757","product_id":100029001,"comment_content":"老师您好，nginx采用IO多路复用技术，使用单线程处理多个IO流数据流<br>是不是也可以多线程+IO多路复用技术？多个线程处理多个IO数据流<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529904,"discussion_content":"当然可以，像envoy，还有NGINX Unit都是多线程+io多路复用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636121043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318471,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1635306128,"is_pvip":true,"replies":[{"id":"115500","content":"对，CPU要保存当前状态，再恢复原来的状态，但当线程多的时候，累积的成本就很高了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1635327997,"ip_address":"","comment_id":318471,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635306128","product_id":100029001,"comment_content":"线程上下文的切换消耗感觉主要是用户态和内核态不断切换。也就是堆栈，指令指针之类的。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529256,"discussion_content":"对，CPU要保存当前状态，再恢复原来的状态，但当线程多的时候，累积的成本就很高了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635327997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574198,"discussion_content":"本质上应该是一堆寄存器的状态值吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653896868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312825,"user_name":"连长","can_delete":false,"product_type":"c1","uid":2047980,"ip_address":"","ucode":"555BD3DE57887F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3f/ec/00904faa.jpg","comment_is_top":false,"comment_ctime":1632041255,"is_pvip":false,"replies":[{"id":"113347","content":"great。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1632054150,"ip_address":"","comment_id":312825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632041255","product_id":100029001,"comment_content":"Nginx 使用进程池加单线程的工作方式，master进程管理进程池，利用IO多路复用提供并发性能。epoll连接管理由操作系统处理，减少应用层操作。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527125,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632054150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291403,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1620271930,"is_pvip":true,"replies":[{"id":"105580","content":"应该不是某个人独立发明的吧，不然早就知名了，它也是在之前的select、poll上逐渐改进完善才产生的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1620284013,"ip_address":"","comment_id":291403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620271930","product_id":100029001,"comment_content":"老师，看了越来越多的框架，觉得epoll是真的牛，epoll是哪个人&#47;框架首创的呀？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519461,"discussion_content":"应该不是某个人独立发明的吧，不然早就知名了，它也是在之前的select、poll上逐渐改进完善才产生的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620284013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239938,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1596697064,"is_pvip":false,"replies":[{"id":"88607","content":"对，Nginx是单线程的，所以图里写成进程，也就相当于线程。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596705515,"ip_address":"","comment_id":239938,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596697064","product_id":100029001,"comment_content":"请问老师多路复用那张图里的中间横轴应该是nginx 线程吧？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503279,"discussion_content":"对，Nginx是单线程的，所以图里写成进程，也就相当于线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596705515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239613,"user_name":"风","can_delete":false,"product_type":"c1","uid":1147929,"ip_address":"","ucode":"AFDBEFA49F269E","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/19/7ed2ffa6.jpg","comment_is_top":false,"comment_ctime":1596597714,"is_pvip":true,"replies":[{"id":"88509","content":"这个问题比较古怪了，可以试着开启Nginx的debug日志，针对ip地址打印出来看看。<br><br>http:&#47;&#47;nginx.org&#47;en&#47;docs&#47;ngx_core_module.html#debug_connection","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596611149,"ip_address":"","comment_id":239613,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596597714","product_id":100029001,"comment_content":"老师,有个问题问您一下,我们生产环境有两套系统A B,都是使用的https(通过https访问nginx,nginx转发请求给后台应用)，我们现在出现一个问题,同一个网络部分用户(前天都是好的,昨天一个用户,今天两个用户)无法与A系统的nginx建立TLS连接,但是都可以正常访问B系统的nginx,两套系统使用的nginx的配置是一样的<br>在无法正常访问A系统的电脑上,通过curl -v发现只有一个 TLSv1.3（OUT），client hello(1):<br>没有看到服务端的server hello,只看到SSL connection被重置了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503158,"discussion_content":"这个问题比较古怪了，可以试着开启Nginx的debug日志，针对ip地址打印出来看看。\n\nhttp://nginx.org/en/docs/ngx_core_module.html#debug_connection","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596611149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236657,"user_name":"风","can_delete":false,"product_type":"c1","uid":1147929,"ip_address":"","ucode":"AFDBEFA49F269E","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/19/7ed2ffa6.jpg","comment_is_top":false,"comment_ctime":1595492625,"is_pvip":true,"replies":[{"id":"87528","content":"基本正确，相当于是同时有多个服务器进程在提供http服务。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595572953,"ip_address":"","comment_id":236657,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595492625","product_id":100029001,"comment_content":"老师请问『进程池 + 单线程』指的是:通过进程池接收处理HTTP请求,然后每个进程处理请求是单线程的?这样对于同一进程处理的所有请求都位于同一线程,如果同一进程里的处理过程发生阻塞就不需要保存阻塞任务的堆栈,简单的理解是不是相当于有多台服务器进行服务支持,每台服务器都是单进程线程单CPU","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502166,"discussion_content":"基本正确，相当于是同时有多个服务器进程在提供http服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595572953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224967,"user_name":"宋雄斌","can_delete":false,"product_type":"c1","uid":1433647,"ip_address":"","ucode":"52FA63AA616319","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/2f/3aee5f24.jpg","comment_is_top":false,"comment_ctime":1591605771,"is_pvip":false,"replies":[{"id":"82873","content":"理解的没错，但线程内部还是会有阻塞的，这就会导致线程调度，浪费CPU。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591664933,"ip_address":"","comment_id":224967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591605771","product_id":100029001,"comment_content":"老师，您好，我的理解是，线程池的作用是处理不同任务，但是每个任务都是由单线程进行处理的，这样对不对呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497674,"discussion_content":"理解的没错，但线程内部还是会有阻塞的，这就会导致线程调度，浪费CPU。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591664933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207007,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586993453,"is_pvip":false,"replies":[{"id":"77294","content":"<br>1.Linux有个特性 cpu affinity，可以了解一下。<br><br>2.每个进程独立运行处理请求，不需要进程切换。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586997976,"ip_address":"","comment_id":207007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586993453","product_id":100029001,"comment_content":"不太明白：1.每个worker进程都绑定到独立的cpu们？2.单线程也是应该存在于具体的某一个进程里边的吧，那进程间切换是怎么做的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491978,"discussion_content":"\n1.Linux有个特性 cpu affinity，可以了解一下。\n\n2.每个进程独立运行处理请求，不需要进程切换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586997976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202687,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1586053729,"is_pvip":false,"replies":[{"id":"76044","content":"大概对，总的来说就是进程太重，线程略重，协程最轻，cpu在这些执行体之间切换时的代价是一次降低的，这些概念都是为了充分利用cpu，避免无用功。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586222574,"ip_address":"","comment_id":202687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586053729","product_id":100029001,"comment_content":"1：你是怎么理解进程、线程上下文切换时的成本的，为什么 Nginx 要尽量避免？<br>这是个好问题，也是面试常客。<br>首先，需要回答什么是进程？什么是线程？然后，进程或线程，在进行切换时都需要做什么？然后，就能发现进程或线程的切换为什么会消耗大量的成本啦！<br>首先，程序就是人写的各种代码，告诉计算机需要做什么事情，只需要存储资源。当程序运行起来的时候，需要的不光是存储资源，还有其他的为了弥补速度差这些东西都以各种寄存器的形式存在，比如：指令寄存器、地址寄存器、数据寄存器、程序计数器等等，当然还需要CPU的时间片。好像做一道菜，需要各种油盐酱醋锅碗瓢盆一样，如果做的过程中，要停下来，做另外一道菜，想想都够费事的。进程或线程的切换就类似这样吧！而且没做好的菜，要继续做需要记录做到那一步了，继续做需要怎么继续。切换进程或线程上下文，确实太耗成本了。<br>OK，那进程、线程到底有啥区别？我的理解，这两个概念是相对的或者线程是相对进程而言的，进程先存在表示跑起来的程序，不过进程内有许多的动作，有些还比较慢，进程切换上下文又太费成本，为了提高性能就出现了线程，线程依附于进程公用进程的存储资源，切换上下文时仅切换自己独有的资源让其他就绪的线程继续跑，这样切换上下文的成本能够少一些。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490654,"discussion_content":"大概对，总的来说就是进程太重，线程略重，协程最轻，cpu在这些执行体之间切换时的代价是一次降低的，这些概念都是为了充分利用cpu，避免无用功。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586222574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146047,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1572424249,"is_pvip":false,"replies":[{"id":"56440","content":"感谢支持，有问题也可以在GitHub上提issue。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572483343,"ip_address":"","comment_id":146047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572424249","product_id":100029001,"comment_content":"买书为敬。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472687,"discussion_content":"感谢支持，有问题也可以在GitHub上提issue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572483343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127072,"user_name":"👻 小二","can_delete":false,"product_type":"c1","uid":1625463,"ip_address":"","ucode":"9EEA8553163270","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/77/b2ab5d44.jpg","comment_is_top":false,"comment_ctime":1566550001,"is_pvip":false,"replies":[{"id":"47159","content":"对，所以Nginx采用的是多进程+单线程的模式。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566690581,"ip_address":"","comment_id":127072,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566550001","product_id":100029001,"comment_content":"线程是用来解决IO阻塞时CPU浪费的问题， 如果没有IO阻塞的问题， 单线程最能发挥CPU的能力，多线程反而要花时间切换。<br>由于CPU一般有多核， 所以不考虑阻塞的话， 几个核就 几个线程， 将是最佳选择。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464306,"discussion_content":"对，所以Nginx采用的是多进程+单线程的模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566690581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124346,"user_name":"Bean","can_delete":false,"product_type":"c1","uid":1557853,"ip_address":"","ucode":"DC1A0C8B6BF083","user_header":"https://static001.geekbang.org/account/avatar/00/17/c5/5d/9e75eb36.jpg","comment_is_top":false,"comment_ctime":1565863717,"is_pvip":false,"replies":[{"id":"45714","content":"其实底层都是epoll。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565916785,"ip_address":"","comment_id":124346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565863717","product_id":100029001,"comment_content":"感觉和 node 类似","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463127,"discussion_content":"其实底层都是epoll。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565916785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123788,"user_name":"你好旅行者","can_delete":false,"product_type":"c1","uid":1154101,"ip_address":"","ucode":"5C72A428DC28F3","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/35/9dc79371.jpg","comment_is_top":false,"comment_ctime":1565760381,"is_pvip":false,"replies":[{"id":"45369","content":"高并发高性能、低资源消耗、稳定，配置方便，功能丰富。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565763523,"ip_address":"","comment_id":123788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565760381","product_id":100029001,"comment_content":"老师请问一下Nginx相比于其他的服务器，比如Tomcat，具体有哪些优势呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462813,"discussion_content":"高并发高性能、低资源消耗、稳定，配置方便，功能丰富。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565763523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}