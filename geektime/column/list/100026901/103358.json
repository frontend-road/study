{"id":103358,"title":"22 | 并发编程之Asyncio","content":"<p>你好，我是景霄。</p><p>上节课，我们一起学习了Python并发编程的一种实现——多线程。今天这节课，我们继续学习Python并发编程的另一种实现方式——Asyncio。不同于协程那章，这节课我们更注重原理的理解。</p><p>通过上节课的学习，我们知道，在处理I/O操作时，使用多线程与普通的单线程相比，效率得到了极大的提高。你可能会想，既然这样，为什么还需要Asyncio？</p><p>诚然，多线程有诸多优点且应用广泛，但也存在一定的局限性：</p><ul>\n<li>比如，多线程运行过程容易被打断，因此有可能出现race condition的情况；</li>\n<li>再如，线程切换本身存在一定的损耗，线程数不能无限增加，因此，如果你的 I/O操作非常heavy，多线程很有可能满足不了高效率、高质量的需求。</li>\n</ul><p>正是为了解决这些问题，Asyncio应运而生。</p><h2>什么是Asyncio</h2><h3>Sync VS Async</h3><p>我们首先来区分一下Sync（同步）和Async（异步）的概念。</p><ul>\n<li>所谓Sync，是指操作一个接一个地执行，下一个操作必须等上一个操作完成后才能执行。</li>\n<li>而Async是指不同操作间可以相互交替执行，如果其中的某个操作被block了，程序并不会等待，而是会找出可执行的操作继续执行。</li>\n</ul><p>举个简单的例子，你的老板让你做一份这个季度的报表，并且邮件发给他。</p><!-- [[[read_end]]] --><ul>\n<li>如果按照Sync的方式，你会先向软件输入这个季度的各项数据，接下来等待5min，等报表明细生成后，再写邮件发给他。</li>\n<li>但如果按照Async的方式，再你输完这个季度的各项数据后，便会开始写邮件。等报表明细生成后，你会暂停邮件，先去查看报表，确认后继续写邮件直到发送完毕。</li>\n</ul><h3>Asyncio工作原理</h3><p>明白了Sync 和Async，回到我们今天的主题，到底什么是Asyncio呢？</p><p>事实上，Asyncio和其他Python程序一样，是单线程的，它只有一个主线程，但是可以进行多个不同的任务（task），这里的任务，就是特殊的future对象。这些不同的任务，被一个叫做event loop的对象所控制。你可以把这里的任务，类比成多线程版本里的多个线程。</p><p>为了简化讲解这个问题，我们可以假设任务只有两个状态：一是预备状态；二是等待状态。所谓的预备状态，是指任务目前空闲，但随时待命准备运行。而等待状态，是指任务已经运行，但正在等待外部的操作完成，比如I/O操作。</p><p>在这种情况下，event loop会维护两个任务列表，分别对应这两种状态；并且选取预备状态的一个任务（具体选取哪个任务，和其等待的时间长短、占用的资源等等相关），使其运行，一直到这个任务把控制权交还给event loop为止。</p><p>当任务把控制权交还给event loop时，event loop会根据其是否完成，把任务放到预备或等待状态的列表，然后遍历等待状态列表的任务，查看他们是否完成。</p><ul>\n<li>如果完成，则将其放到预备状态的列表；</li>\n<li>如果未完成，则继续放在等待状态的列表。</li>\n</ul><p>而原先在预备状态列表的任务位置仍旧不变，因为它们还未运行。</p><p>这样，当所有任务被重新放置在合适的列表后，新一轮的循环又开始了：event loop继续从预备状态的列表中选取一个任务使其执行…如此周而复始，直到所有任务完成。</p><p>值得一提的是，对于Asyncio来说，它的任务在运行时不会被外部的一些因素打断，因此Asyncio内的操作不会出现race condition的情况，这样你就不需要担心线程安全的问题了。</p><h3>Asyncio用法</h3><p>讲完了Asyncio的原理，我们结合具体的代码来看一下它的用法。还是以上节课下载网站内容为例，用Asyncio的写法我放在了下面代码中（省略了异常处理的一些操作），接下来我们一起来看：</p><pre><code>import asyncio\nimport aiohttp\nimport time\n\nasync def download_one(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as resp:\n            print('Read {} from {}'.format(resp.content_length, url))\n\nasync def download_all(sites):\n    tasks = [asyncio.create_task(download_one(site)) for site in sites]\n    await asyncio.gather(*tasks)\n\ndef main():\n    sites = [\n        'https://en.wikipedia.org/wiki/Portal:Arts',\n        'https://en.wikipedia.org/wiki/Portal:History',\n        'https://en.wikipedia.org/wiki/Portal:Society',\n        'https://en.wikipedia.org/wiki/Portal:Biography',\n        'https://en.wikipedia.org/wiki/Portal:Mathematics',\n        'https://en.wikipedia.org/wiki/Portal:Technology',\n        'https://en.wikipedia.org/wiki/Portal:Geography',\n        'https://en.wikipedia.org/wiki/Portal:Science',\n        'https://en.wikipedia.org/wiki/Computer_science',\n        'https://en.wikipedia.org/wiki/Python_(programming_language)',\n        'https://en.wikipedia.org/wiki/Java_(programming_language)',\n        'https://en.wikipedia.org/wiki/PHP',\n        'https://en.wikipedia.org/wiki/Node.js',\n        'https://en.wikipedia.org/wiki/The_C_Programming_Language',\n        'https://en.wikipedia.org/wiki/Go_(programming_language)'\n    ]\n    start_time = time.perf_counter()\n    asyncio.run(download_all(sites))\n    end_time = time.perf_counter()\n    print('Download {} sites in {} seconds'.format(len(sites), end_time - start_time))\n    \nif __name__ == '__main__':\n    main()\n\n## 输出\nRead 63153 from https://en.wikipedia.org/wiki/Java_(programming_language)\nRead 31461 from https://en.wikipedia.org/wiki/Portal:Society\nRead 23965 from https://en.wikipedia.org/wiki/Portal:Biography\nRead 36312 from https://en.wikipedia.org/wiki/Portal:History\nRead 25203 from https://en.wikipedia.org/wiki/Portal:Arts\nRead 15160 from https://en.wikipedia.org/wiki/The_C_Programming_Language\nRead 28749 from https://en.wikipedia.org/wiki/Portal:Mathematics\nRead 29587 from https://en.wikipedia.org/wiki/Portal:Technology\nRead 79318 from https://en.wikipedia.org/wiki/PHP\nRead 30298 from https://en.wikipedia.org/wiki/Portal:Geography\nRead 73914 from https://en.wikipedia.org/wiki/Python_(programming_language)\nRead 62218 from https://en.wikipedia.org/wiki/Go_(programming_language)\nRead 22318 from https://en.wikipedia.org/wiki/Portal:Science\nRead 36800 from https://en.wikipedia.org/wiki/Node.js\nRead 67028 from https://en.wikipedia.org/wiki/Computer_science\nDownload 15 sites in 0.062144195078872144 seconds\n</code></pre><p>这里的Async和await关键字是Asyncio的最新写法，表示这个语句/函数是non-block的，正好对应前面所讲的event loop的概念。如果任务执行的过程需要等待，则将其放入等待状态的列表中，然后继续执行预备状态列表里的任务。</p><p>主函数里的asyncio.run(coro)是Asyncio的root call，表示拿到event loop，运行输入的coro，直到它结束，最后关闭这个event loop。事实上，asyncio.run()是Python3.7+才引入的，相当于老版本的以下语句：</p><pre><code>loop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(coro)\nfinally:\n    loop.close()\n</code></pre><p>至于Asyncio版本的函数download_all()，和之前多线程版本有很大的区别：</p><pre><code>tasks = [asyncio.create_task(download_one(site)) for site in sites]\nawait asyncio.gather(*task)\n</code></pre><p>这里的<code>asyncio.create_task(coro)</code>，表示对输入的协程coro创建一个任务，安排它的执行，并返回此任务对象。这个函数也是Python 3.7+新增的，如果是之前的版本，你可以用<code>asyncio.ensure_future(coro)</code>等效替代。可以看到，这里我们对每一个网站的下载，都创建了一个对应的任务。</p><p>再往下看，<code>asyncio.gather(*aws, loop=None, return_exception=False)</code>，则表示在event loop中运行<code>aws序列</code>的所有任务。当然，除了例子中用到的这几个函数，Asyncio还提供了很多其他的用法，你可以查看  <a href=\"https://docs.python.org/3/library/asyncio-eventloop.html\">相应文档</a>  进行了解。</p><p>最后，我们再来看一下最后的输出结果——用时只有0.06s，效率比起之前的多线程版本，可以说是更上一层楼，充分体现其优势。</p><h2>Asyncio有缺陷吗？</h2><p>学了这么多内容，我们认识到了Asyncio的强大，但你要清楚，任何一种方案都不是完美的，都存在一定的局限性，Asyncio同样如此。</p><p>实际工作中，想用好Asyncio，特别是发挥其强大的功能，很多情况下必须得有相应的Python库支持。你可能注意到了，上节课的多线程编程中，我们使用的是requests库，但今天我们并没有使用，而是用了aiohttp库，原因就是requests库并不兼容Asyncio，但是aiohttp库兼容。</p><p>Asyncio软件库的兼容性问题，在Python3的早期一直是个大问题，但是随着技术的发展，这个问题正逐步得到解决。</p><p>另外，使用Asyncio时，因为你在任务的调度方面有了更大的自主权，写代码时就得更加注意，不然很容易出错。</p><p>举个例子，如果你需要await一系列的操作，就得使用asyncio.gather()；如果只是单个的future，或许只用asyncio.wait()就可以了。那么，对于你的future，你是想要让它run_until_complete()还是run_forever()呢？诸如此类，都是你在面对具体问题时需要考虑的。</p><h2>多线程还是Asyncio</h2><p>不知不觉，我们已经把并发编程的两种方式都给学习完了。不过，遇到实际问题时，多线程和Asyncio到底如何选择呢？</p><p>总的来说，你可以遵循以下伪代码的规范：</p><pre><code>if io_bound:\n    if io_slow:\n        print('Use Asyncio')\n    else:\n        print('Use multi-threading')\nelse if cpu_bound:\n    print('Use multi-processing')\n</code></pre><ul>\n<li>如果是I/O bound，并且I/O操作很慢，需要很多任务/线程协同实现，那么使用Asyncio更合适。</li>\n<li>如果是I/O bound，但是I/O操作很快，只需要有限数量的任务/线程，那么使用多线程就可以了。</li>\n<li>如果是CPU bound，则需要使用多进程来提高程序运行效率。</li>\n</ul><h2>总结</h2><p>今天这节课，我们一起学习了Asyncio的原理和用法，并比较了Asyncio和多线程各自的优缺点。</p><p>不同于多线程，Asyncio是单线程的，但其内部event loop的机制，可以让它并发地运行多个不同的任务，并且比多线程享有更大的自主控制权。</p><p>Asyncio中的任务，在运行过程中不会被打断，因此不会出现race condition的情况。尤其是在I/O操作heavy的场景下，Asyncio比多线程的运行效率更高。因为Asyncio内部任务切换的损耗，远比线程切换的损耗要小；并且Asyncio可以开启的任务数量，也比多线程中的线程数量多得多。</p><p>但需要注意的是，很多情况下，使用Asyncio需要特定第三方库的支持，比如前面示例中的aiohttp。而如果I/O操作很快，并不heavy，那么运用多线程，也能很有效地解决问题。</p><h2>思考题</h2><p>这两节课，我们学习了并发编程的两种实现方式，也多次提到了并行编程（multi-processing），其适用于CPU heavy的场景。</p><p>现在有这么一个需求：输入一个列表，对于列表中的每个元素，我想计算0到这个元素的所有整数的平方和。</p><p>我把常规版本的写法放在了下面，你能通过查阅资料，写出它的多进程版本，并且比较程序的耗时吗？</p><pre><code>import time\ndef cpu_bound(number):\n    print(sum(i * i for i in range(number)))\n\ndef calculate_sums(numbers):\n    for number in numbers:\n        cpu_bound(number)\n\ndef main():\n    start_time = time.perf_counter()  \n    numbers = [10000000 + x for x in range(20)]\n    calculate_sums(numbers)\n    end_time = time.perf_counter()\n    print('Calculation takes {} seconds'.format(end_time - start_time))\n    \nif __name__ == '__main__':\n    main()\n</code></pre><p>欢迎在留言区写下你的思考和答案，也欢迎你把今天的内容分享给你的同事朋友，我们一起交流、一起进步。</p><p></p>","comments":[{"had_liked":false,"id":109540,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":true,"comment_ctime":1562053729,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"9.2233721457910006e+18","product_id":100026901,"comment_content":"思考题答案：<br>import multiprocessing<br>import time<br><br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br><br>def find_sums(numbers):<br>    with multiprocessing.Pool() as pool:<br>        pool.map(cpu_bound, numbers)<br><br><br>if __name__ == &quot;__main__&quot;:<br>    numbers = [10000000 + x for x in range(20)]<br><br>    start_time = time.time()<br>    find_sums(numbers)<br>    duration = time.time() - start_time<br>    print(f&quot;Duration {duration} seconds&quot;)","like_count":25,"discussions":[{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328499,"discussion_content":"用 sysctl -n hw.ncpu 得到电脑是12核，然后运行下面代码，比老师的效率更高。\n--------- \nimport concurrent.futures\nimport time\n\ndef cpu_bound(number):\n    return sum(i * i for i in range(number))\n\ndef main():\n    start_time = time.perf_counter()\n    numbers = [10000000 + x for x in range(20)]\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        for number in executor.map(cpu_bound, numbers, chunksize=2):\n            print(number)\n    end_time = time.perf_counter()\n    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))\n\nif __name__ == &#39;__main__&#39;:\n    main()\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606149319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2257398,"avatar":"https://static001.geekbang.org/account/avatar/00/22/71/f6/0fa1ae6c.jpg","nickname":"白木灰雪","note":"","ucode":"A42670A623C580","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":363552,"discussion_content":"12核为什么你给chunksize设了2？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617236242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":328499,"ip_address":""},"score":363552,"extra":""}]},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328500,"discussion_content":"可以根据电脑核数，调整 chunksize","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606149416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310408,"discussion_content":"老师，我在jupyter notebook运行您在留言中给出的答案代码，不知道哪里不对 没有报错但是一直出不来结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601818566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2369413,"avatar":"https://static001.geekbang.org/account/avatar/00/24/27/85/ddeeaf30.jpg","nickname":"dived","note":"","ucode":"141916A3BAF5A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374792,"discussion_content":"单独写一个.py文件来运行 我猜因为是多进程的关系，需要一个统一的主入口来运行程序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621348514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310408,"ip_address":""},"score":374792,"extra":""}]},{"author":{"id":1895499,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ec/4b/442dd5f1.jpg","nickname":"及時行樂","note":"","ucode":"2FD0E0BB8327DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261009,"discussion_content":"老师，使用的库不同，multiProcessing和futures 用时相差了七倍！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588928671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1186807,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f7/45e8b64a.jpg","nickname":"Fire","note":"","ucode":"4A2C50B77EDB2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1895499,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ec/4b/442dd5f1.jpg","nickname":"及時行樂","note":"","ucode":"2FD0E0BB8327DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293969,"discussion_content":"用futures写的多线程或者协程？在python中这两种情况下只能用上单核cpu计算（多线程因为GIL存在只能使用一个核，一核跑满，多核围观）。这种cpu密集型的程序，用多进程能实现并行。在python中的多线程和协程只能说是并发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595748999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261009,"ip_address":""},"score":293969,"extra":""}]}]},{"had_liked":false,"id":108308,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1561715899,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"220605047995","product_id":100026901,"comment_content":"总结多线程和协程之间的共同点和区别：<br>共同点：<br>都是并发操作，多线程同一时间点只能有一个线程在执行，协程同一时间点只能有一个任务在执行；<br>不同点：<br>多线程，是在I&#47;O阻塞时通过切换线程来达到并发的效果，在什么情况下做线程切换是由操作系统来决定的，开发者不用操心，但会造成race condition；<br>协程，只有一个线程，在I&#47;O阻塞时通过在线程内切换任务来达到并发的效果，在什么情况下做任务切换是开发者决定的，不会有race condition的情况；<br>多线程的线程切换比协程的任务切换开销更大；<br>对于开发者而言，多线程并发的代码比协程并发的更容易书写。<br>一般情况下协程并发的处理效率比多线程并发更高。","like_count":51,"discussions":[{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230715,"discussion_content":"请问你是怎么理解“协程，只有一个线程，在I/O阻塞时通过在线程内切换任务来达到并发的效果，在什么情况下做任务切换是开发者决定的，不会有race condition的情况；”I/O阻塞的？线程遇到阻塞时会让出CPU，因为协程是在单线程中玩的，那因为一个协程发生阻塞会使整个线程失去CPU，这个时候任务切换从何谈起呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586766077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233560,"discussion_content":"协程中的某个任务发生io阻塞时，是这个任务让出cpu给其他任务，而不是协程（单线程）让出cpu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586930661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":230715,"ip_address":""},"score":233560,"extra":""},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234800,"discussion_content":"我觉得你还没有理解好进，线程的调度原理。其实我这几天研究了Python的协程，大概搞明白了其中原理，这里的“阻塞“与“异步“是一个更高层次的抽象概念，并非指系统调用级别的。我为什么强调“阻塞”，“异步”这些概念，如果你读过unp那本书，要理解unix的io模型这些是避不开的概念。网上大部分的文章引用了unp的内容来介绍阻塞，非阻塞，同步，异步的概念，紧接着便介绍asyncio包的使用，其实asyncio里阻塞和异步的概念并不完全等同于unp中介绍的系统调用io，是在一个更好的抽象层次上，一个asyncio的协程依然可能遇到底层同步的io调用，此时这个协程就是会阻塞住整个当前线程，使得线程失去CPU，从而影响到其它的协程。其实你理解的也没错，只是高层抽象的解释，但前提是你要清楚你此时说的阻塞是什么意思，它不是指系统调用级别，而是任务级别的某些条件不能满足的情况，而这些不能满足的条件可能是其它协程的CPU操作，而不是io操作。因为你要清楚一个事实:目前Linux下对异步io的支持是有限的，它只实现了磁盘的异步io，网络io仍然是同步的，也就是说在Linux上异步io使用场景很少很少，业界几乎只拿它当个概念来讲。因此我觉得Python的这个asyncio包名是一个很糟糕的命名，特别是对于理解一点点底层原理的人来说。它的协程真的很难理解也很难使用，如果你用过go的goroutine你就明白我为什么如此吐槽Python的协程了。虽然它避免了线程切换带来的成本，避免了并发时的静态条件，但go的线程模型某种程度上讲也避免了goroutine的切换开销，仅仅需要在并发时照顾好竞态条件，但go带来的简单易用性是Python的协程望尘莫及的，所以现阶段我是不会使用Python的协程的。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1586999392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":233560,"ip_address":""},"score":234800,"extra":""}]}]},{"had_liked":false,"id":108323,"user_name":"hlz-123","can_delete":false,"product_type":"c1","uid":1433586,"ip_address":"","ucode":"B7E5EF0C260BD2","user_header":"","comment_is_top":false,"comment_ctime":1561719017,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"113230868713","product_id":100026901,"comment_content":"1、单进程，老师的原程序，运行时间<br>     Calculation takes 15.305913339 seconds<br>2、CPU并行方式，运行时间：<br>     Calculation takes 3.457259904 seconds<br>      def calculate_sums(numbers):    <br>             with concurrent.futures.ProcessPoolExecutor() as executor:<br>             executor.map(cpu_bound,numbers)<br>3、多线程，cocurrent.futures，运行时间<br>      Calculation takes 15.331446270999999 seconds<br>      def calculate_sums(numbers):<br>                with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>                executor.map(cpu_bound,numbers)<br>4、异步方式，asyncio<br>      Calculation takes 16.019983702999998 seconds<br>      async def cpu_bound(number):<br>            print(sum(i * i for i in range(number)))<br>      async def calculate_sums(numbers):<br>           tasks=[asyncio.create_task(cpu_bound(number)) for number in numbers]<br>           await asyncio.gather(*tasks)","like_count":27,"discussions":[{"author":{"id":3028131,"avatar":"","nickname":"Geek_8d024b","note":"","ucode":"3B9811601B3E71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576223,"discussion_content":"多线程时间并不会减少，因为python是伪多线程。只有多进程耗时才会减少","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655361413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2087309,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d9/8d/78dd472a.jpg","nickname":"知止。","note":"","ucode":"5D56DD062B1A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302736,"discussion_content":"用 asyncio 方法提示  RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599016213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1113937,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","nickname":"好运来","note":"","ucode":"F469ED6CEFEF30","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":2087309,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d9/8d/78dd472a.jpg","nickname":"知止。","note":"","ucode":"5D56DD062B1A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307866,"discussion_content":"def main():\n    start_time = time.perf_counter()\n    numbers = [10000000 + x for x in range(20)]\n    asyncio.run(calculate_sums(numbers))\n    end_time = time.perf_counter()\n    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600776503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302736,"ip_address":""},"score":307866,"extra":""}]},{"author":{"id":1322612,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2e/74/88c613e0.jpg","nickname":"扶幽","note":"","ucode":"1400EDFF8970D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31182,"discussion_content":"log秀啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570885914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108065,"user_name":"transformation","can_delete":false,"product_type":"c1","uid":1367677,"ip_address":"","ucode":"B47EDE826DE1D0","user_header":"https://static001.geekbang.org/account/avatar/00/14/de/7d/61d76ae0.jpg","comment_is_top":false,"comment_ctime":1561676591,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"35921414959","product_id":100026901,"comment_content":"import time<br>from concurrent import futures<br><br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        print(cpu_bound(number))<br><br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>def main_process():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    with futures.ProcessPoolExecutor() as pe:<br>        result = pe.map(cpu_bound, numbers)<br>        print(f&quot;result: {list(result)}&quot;)<br>    end_time = time.perf_counter()<br>    print(&#39;multiprocessing Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br>    main_process()<br>————————<br>输出：<br>333333283333335000000<br>333333383333335000000<br>333333483333355000001<br>333333583333395000005<br>333333683333455000014<br>333333783333535000030<br>333333883333635000055<br>333333983333755000091<br>333334083333895000140<br>333334183334055000204<br>333334283334235000285<br>333334383334435000385<br>333334483334655000506<br>333334583334895000650<br>333334683335155000819<br>333334783335435001015<br>333334883335735001240<br>333334983336055001496<br>333335083336395001785<br>333335183336755002109<br>Calculation takes 15.771127400000001 seconds<br>result: [333333283333335000000, 333333383333335000000, 333333483333355000001, 333333583333395000005, 333333683333455000014, 333333783333535000030, 333333883333635000055, 333333983333755000091, 333334083333895000140, 333334183334055000204, 333334283334235000285, 333334383334435000385, 333334483334655000506, 333334583334895000650, 333334683335155000819, 333334783335435001015, 333334883335735001240, 333334983336055001496, 333335083336395001785, 333335183336755002109]<br>multiprocessing Calculation takes 4.7333084 seconds<br>","like_count":8,"discussions":[{"author":{"id":1122308,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/04/72cc2057.jpg","nickname":"Sunny","note":"","ucode":"90CA0ABBB683FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4611,"discussion_content":"目测老哥8核的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565594450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1367677,"avatar":"https://static001.geekbang.org/account/avatar/00/14/de/7d/61d76ae0.jpg","nickname":"transformation","note":"","ucode":"B47EDE826DE1D0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1122308,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/04/72cc2057.jpg","nickname":"Sunny","note":"","ucode":"90CA0ABBB683FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4671,"discussion_content":"i7 8700","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565650466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4611,"ip_address":""},"score":4671,"extra":""}]},{"author":{"id":1359389,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ic76sMTwXTJYJQglBTHVian3OHibEuvGXuRH5QibvwqVIsUNa8pzRYkmsbXjLp1eacN1vC77EVKe4k5u7RRVFb3dOg/132","nickname":"zengyunda","note":"","ucode":"3F08F16FB92C8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1021,"discussion_content":"难道我电脑太差？我单线程执行了40左右，用多进程也才是你普通版本的时延。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562240717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1524609,"avatar":"https://static001.geekbang.org/account/avatar/00/17/43/81/8b09dd90.jpg","nickname":"csn","note":"","ucode":"68FAE1EE372ADF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":673,"discussion_content":"print(f&#34;result: {list(result)}&#34;)，为何这段代码执行报错，请指教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561952256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1524609,"avatar":"https://static001.geekbang.org/account/avatar/00/17/43/81/8b09dd90.jpg","nickname":"csn","note":"","ucode":"68FAE1EE372ADF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":705,"discussion_content":"检查下Python的版本，确保在3.6版本以上，因为f-string这个特性是在3.6版本加入的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561971742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":673,"ip_address":""},"score":705,"extra":""}]}]},{"had_liked":false,"id":108107,"user_name":"天凉好个秋","can_delete":false,"product_type":"c1","uid":1136145,"ip_address":"","ucode":"E11B5F990A4000","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/11/5d113d5c.jpg","comment_is_top":false,"comment_ctime":1561683084,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31626454156","product_id":100026901,"comment_content":"如果完成，则将其放到预备状态的列表；<br>如果未完成，则继续放在等待状态的列表。<br>这里是不是写的有问题？<br>PS:想问一下，完成之后为什么还要放队列里？难道不应该从队列里移除吗？","like_count":7,"discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562,"discussion_content":"是你理解的问题。文章中说的完成是有语境的，不是像你想的那样任务彻底完成，而是特指该任务中的I/O操作子任务是否完成。这回你再回原文中重新理解一遍应该就能明白了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561708003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1579668,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1a/94/dd7c4c33.jpg","nickname":"章鱼goodest","note":"","ucode":"0587B1A23B36E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3205,"discussion_content":"这样解释不合理吧，一个任务若没有全部完成，只是子任务完成，应该是放到等待状态的列标啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564302760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562,"ip_address":""},"score":3205,"extra":""}]}]},{"had_liked":false,"id":143226,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1571651252,"is_pvip":false,"replies":[{"id":"56039","content":"很棒的例子，但是对计算密集型程序，你可以打开任务管理器的性能页，CPU 选择显示逻辑处理器，可以注意到串行执行和并行执行的不同。","user_name":"作者回复","comment_id":143226,"uid":"1513504","ip_address":"","utype":1,"ctime":1572244764,"user_name_real":"高山流水"}],"discussion_count":2,"race_medal":0,"score":"23046487732","product_id":100026901,"comment_content":"上网查询资料后，初步了解了多进程的一些知识，按照资料中的方法简单改写了一下程序，由于多进程方式时，不知什么原因，cpu_bound函数不能实时输出，所以就把cpu_bound改为返回字符串形式的结果，等所有的数计算完成后，再一并输出结果 ，程序中常规执行和多进程两种方式都有，并作了对比后发现，常规执行用时约23秒，多进程用时约6秒，两者相差4倍，程序如下，不足处请老师指正：<br>#多进程演示<br>import multiprocessing<br>import time<br><br>def cpu_bound(number):<br>    return &#39;sum({}^2)={}&#39;.format(number,sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    <br>    results = []<br><br>    print(&#39;-&#39;*10+&#39;串行执行开始：&#39;+&#39;-&#39;*10)<br><br>    for number in numbers:<br>        results.append(cpu_bound(number))<br><br>    print(&#39;-&#39;*10+&#39;串行执行结束，结果如下：&#39;+&#39;-&#39;*10)<br>    for res in results:<br>        print(res)<br><br>def multicalculate_sums(numbers):<br><br>    #创建有4个进程的进程池<br>    pool = multiprocessing.Pool(processes=4)<br><br>    results = []<br><br>    print(&#39;-&#39;*10+&#39;多进程执行开始：&#39;+&#39;-&#39;*10)<br><br>    #为每一个需要计算的元素创建一个进程<br>    for number in numbers:<br>        results.append(pool.apply_async(cpu_bound, (number,)))<br><br>    pool.close() #关闭进程池，不能往进程池添加进程<br>    pool.join()  #等待进程池中的所有进程执行完毕<br><br>    print(&#39;-&#39;*10+&#39;多进程执行结束，结果如下：&#39;+&#39;-&#39;*10)<br>    for res in results:<br>        print(res.get())<br>    <br>def main():<br><br>    numbers = [10000000 + x for x in range(20)]<br><br>    #串行执行方式<br>    start_time = time.perf_counter()  <br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;串行执行用时：Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br>    #多进程执行方式<br>    start_time = time.perf_counter()  <br>    multicalculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;多进程执行用时：Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":5,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471433,"discussion_content":"很棒的例子，但是对计算密集型程序，你可以打开任务管理器的性能页，CPU 选择显示逻辑处理器，可以注意到串行执行和并行执行的不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572244764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649859,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CqF8eiaanNteyu2U7FibYicjnw99VXZST61vvMpQKSd5iaLNW6EicLeFYyDOKJmg9rNx6KW90DwpPMKNxiben6fQeZjA/132","nickname":"Geek_24abc6","note":"","ucode":"88CD214232C6BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191512,"discussion_content":"我的电脑运行出来，4种方式的时间都在1.8秒左右","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582992852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153857,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574320284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459222172","product_id":100026901,"comment_content":"sync是线性前后执行。<br>async是穿插执行，之所以要穿插，代码需要的资源不同，有的代码需要CPU，有的代码需要IO（例如网络）,穿插以后，同时需要CPU和网络的代码可以同时执行，充分利用硬件。<br><br>具体到关键字 async 是表示函数是异步的，也就是来回穿插的起点（进入预备队列），await是表示调用需要IO，也就是进入等待队列的入口（函数开始调用）和出口（函数调用结束，重新进入预备队列）。","like_count":3},{"had_liked":false,"id":108980,"user_name":"唐哥","can_delete":false,"product_type":"c1","uid":1363974,"ip_address":"","ucode":"385B76AC28D175","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKokKnHQKrAupdgYJ8mHPbZbeDxKR229qLYkaJt4pwvd1ZcdicgjTdqPKuJlO09ibtZSOvsSLAAnWJQ/132","comment_is_top":false,"comment_ctime":1561943538,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"14446845426","product_id":100026901,"comment_content":"老师好，对于 Asyncio 来说，它的任务在运行时不会被外部的一些因素打断。不被打断是如何保证的？还有event loop是每次取出一个任务运行，当这个任务运行期间它就是只等待任务结束吗？不干其他事了吗？","like_count":3,"discussions":[{"author":{"id":2064044,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/ac/4303e8ef.jpg","nickname":"Geek_b692f5","note":"","ucode":"C2826604F71C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299954,"discussion_content":"意思是当前运行的任务，在没有遇到block的时候，将会一直是它处于运行状态，其他任务都处于等待状态","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597888302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347194,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/ba/98bc816b.jpg","nickname":"Shu🐹","note":"","ucode":"29521F803CE2CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341079,"discussion_content":"我是这样理解的，因为所有任务都有一个总指挥，都听这个总指挥的安排，所以不会出现一个任务本该执行完结果被打断、两个任务race condition的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610286237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108271,"user_name":"Geek_59f23e","can_delete":false,"product_type":"c1","uid":1513783,"ip_address":"","ucode":"A463C6EB7447FD","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","comment_is_top":false,"comment_ctime":1561709414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14446611302","product_id":100026901,"comment_content":"import time<br>from multiprocessing import Pool<br><br><br>def square(number):<br>    return sum(i * i for i in range(number))<br><br><br>def single_process(numbers):<br>    res = []<br>    for number in numbers:<br>        res.append(square(number))<br>    return res<br><br><br>def multi_process(numbers):<br>    with Pool() as pool:<br>        res = pool.map(square, numbers)<br>    return res<br><br><br>if __name__ == &#39;__main__&#39;:<br>    numbers = [10000000 + x for x in range(20)]<br>    start1 = time.perf_counter()<br>    single_process(numbers)<br>    print(&#39;单进程用时：%f 秒&#39; % (time.perf_counter() - start1))<br>    start2 = time.perf_counter()<br>    multi_process(numbers)<br>    print(&#39;多进程用时：%f 秒&#39; % (time.perf_counter() - start2))<br><br>————————<br>输出：<br>单进程用时：29.382878 秒<br>多进程用时：10.354565 秒<br><br>[333333283333335000000, 333333383333335000000, 333333483333355000001, 333333583333395000005, 333333683333455000014, 333333783333535000030, 333333883333635000055, 333333983333755000091, 333334083333895000140, 333334183334055000204, 333334283334235000285, 333334383334435000385, 333334483334655000506, 333334583334895000650, 333334683335155000819, 333334783335435001015, 333334883335735001240, 333334983336055001496, 333335083336395001785, 333335183336755002109]<br>","like_count":3},{"had_liked":false,"id":108148,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1561686890,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10151621482","product_id":100026901,"comment_content":"race condition 是什么？","like_count":2,"discussions":[{"author":{"id":1005520,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/d0/b9312769.jpg","nickname":"北斗(宇)","note":"","ucode":"9532B48D7C29C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547677,"discussion_content":"竞态条件(race condition)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642818743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1524797,"avatar":"https://static001.geekbang.org/account/avatar/00/17/44/3d/35d6670d.jpg","nickname":"Claywoow","note":"","ucode":"1F1C70BCE33536","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1257,"discussion_content":"多个线程在执行的过程中会出现资源竞争(race condition)的情况；有可能会导致同一个资源/数据被多个线程争夺的情况，这样会导致最后的结果可能会和期望的结果不一致的各种特殊情况吧。个人的认为可能不是很准确，也希望有理解更透彻的大佬来解释一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562484293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335483,"user_name":"Geek_63ad86","can_delete":false,"product_type":"c1","uid":1528671,"ip_address":"","ucode":"E758532B1169D6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","comment_is_top":false,"comment_ctime":1645535520,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5940502816","product_id":100026901,"comment_content":"李金甲到此一游","like_count":1},{"had_liked":false,"id":283805,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":2184057,"ip_address":"","ucode":"491906283FC13B","user_header":"https://static001.geekbang.org/account/avatar/00/21/53/79/327ef30e.jpg","comment_is_top":false,"comment_ctime":1615943910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5910911206","product_id":100026901,"comment_content":"asyncio是不是跟IO多路复用一个道理啊","like_count":1},{"had_liked":false,"id":251739,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1601818517,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5896785813","product_id":100026901,"comment_content":"我在jupyter notebook中用下面的多进程地并行多次尝试只需要0.2-0.9s间，但是老师给的普通程序需要30多s，而且老师在留言中给出的答案代码，不知道哪里不对，运行不出结果，没有报错但是一直出不来结果<br>import concurrent.futures<br>import time<br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br>def main():<br>    start_time = time.perf_counter()  <br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":1,"discussions":[{"author":{"id":1528176,"avatar":"https://static001.geekbang.org/account/avatar/00/17/51/70/68b3f0e6.jpg","nickname":"健身咸鱼","note":"","ucode":"415CBFF3F158F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332284,"discussion_content":"我也是这样，这位同学问题现在解决了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607149085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230584,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1593423197,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888390493","product_id":100026901,"comment_content":"使用resp.content_length 得到的None<br><br>通过text = await resp.text()<br>len(text)可以拿到资源大小但是很耗时","like_count":1},{"had_liked":false,"id":205431,"user_name":"Richard","can_delete":false,"product_type":"c1","uid":1316758,"ip_address":"","ucode":"893F958B9DD161","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","comment_is_top":false,"comment_ctime":1586616102,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5881583398","product_id":100026901,"comment_content":"看了很多提问都没有被回答，我也对asyncio有个很大的疑问，那就是我越来越感觉asyncio是一个很糟糕的名字，从内容上看只是解决并发问题，我没有看到针对io的描述，而且我目前的知识体系认为:Linux上解决高并发大多是用的io多路复用和非阻塞，至于异步io很少使用，而且Linux仅仅实现了磁盘读写的异步io，而网络io没有实现异步。所以我就自然对Python这个asyncio有疑问了？它和操作系统io是同一个层次概念么？至少我觉得这是个很糟糕的命名，我不知道初学者遇到异步io的概念时花大力气搞清楚阻塞非阻塞异步和同步之后，面对Linux上异步io支持以及应用有限的事实之后会作何感想！盼复！","like_count":1,"discussions":[{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234807,"discussion_content":"其实我这几天研究了Python的协程，大概搞明白了其中原理，这里的“阻塞“与“异步“是一个更高层次的抽象概念，并非指系统调用级别的。我为什么强调“阻塞”，“异步”这些概念，如果你读过unp那本书，要理解unix的io模型这些是避不开的概念。网上大部分的文章引用了unp的内容来介绍阻塞，非阻塞，同步，异步的概念，紧接着便介绍asyncio包的使用，其实asyncio里阻塞和异步的概念并不完全等同于unp中介绍的系统调用io，是在一个更高的抽象层次上，一个asyncio的协程依然可能遇到底层同步的io调用，此时这个协程就是会阻塞住整个当前线程，使得线程失去CPU，从而影响到其它的协程。其实你理解的也没错，只是高层抽象的解释，但前提是你要清楚你此时说的阻塞是什么意思，它不是指系统调用级别，而是任务级别的某些条件不能满足的情况，而这些不能满足的条件可能是其它协程的CPU操作，而不是io操作。因为你要清楚一个事实:目前Linux下对异步io的支持是有限的，它只实现了磁盘的异步io，网络io仍然是同步的，也就是说在Linux上异步io使用场景很少很少，业界几乎只拿它当个概念来讲。因此我觉得Python的这个asyncio包名是一个很糟糕的命名，特别是对于理解一点点底层原理的人来说。它的协程真的很难理解也很难使用，如果你用过go的goroutine你就明白我为什么如此吐槽Python的协程了。虽然它避免了线程切换带来的成本，避免了并发时的竞态条件，但go的线程模型某种程度上讲也避免了goroutine的切换开销，仅仅需要在并发时照顾好竞态条件，但go带来的简单易用性是Python的协程望尘莫及的，所以现阶段我是不会使用Python的协程的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586999613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218402,"avatar":"https://static001.geekbang.org/account/avatar/00/12/97/62/568fc34e.jpg","nickname":"理想永远都年轻","note":"","ucode":"0DA68671B76C38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337975,"discussion_content":"他不会你的提问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609140833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109859,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1562122377,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5857089673","product_id":100026901,"comment_content":"运行文章中出现的代码时出现‘aiohttp.client_exceptions.ClientConnectorCertificateError’的这个报错，我讲代码第7行更改成‘async with session.get(url, ssl=False) as resp’后运行成功，是否还有其他的解决方案？","like_count":1,"discussions":[{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":916,"discussion_content":"问题确实解决了，高版本和低版本都可运行了，不过resp.content_length并不能得到具体的文件的大小，显示Read None from https://baike.baidu.com/vbaike/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562148743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":909,"discussion_content":"我也试试\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562146749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108089,"user_name":"方向","can_delete":false,"product_type":"c1","uid":1261031,"ip_address":"","ucode":"CBB283D30C8C09","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/e7/e4b4afcc.jpg","comment_is_top":false,"comment_ctime":1561681307,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5856648603","product_id":100026901,"comment_content":"如果完成，则放到预备状态列表，这句话不理解。这样一来，预备状态列表同时拥有两种形式的任务啊","like_count":1,"discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563,"discussion_content":"按照你这么理解也可以，预备状态列表中存在两种形态的任务，一种是从来没有执行过的任务，一种是之前还没执行完的任务，就是由于I/O阻塞被放在等待状态列表的，但是I/O操作完成了，所以event loop又把他放回到预备状态列表了，等待新一轮的循环就可以继续执行了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561708469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554764,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b9/4c/8c9edc85.jpg","nickname":"小庞","note":"","ucode":"7C8367CDB47163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411377,"discussion_content":"首先要对async和await有一个了解，遇到await时，如果不能立即拿到结果，就不会再继续阻塞在当前子任务，会返回，将控制权交还给event loop，event loop拿到控制权后就会把它存到预备状态列表，将来某个时刻await的逻辑执行完毕后，event loop会将它继续放到等待列表去执行await之后的逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635911798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141751,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/f7/3a3b82c2.jpg","nickname":"Aspirin","note":"","ucode":"858B551CF0C2F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322347,"discussion_content":"这句话中的如果完成，指的是如果处于等待I/O的任务完成等待，则把它放入预备状态的列表，等待被调用执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604729095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359579,"user_name":"陈雁南","can_delete":false,"product_type":"c1","uid":2368778,"ip_address":"上海","ucode":"D8BE4BBD001B60","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLAdqqPjPWlIibwqDydskjPMfv4V0dibs3p7DoeEziaJVSKoib1siaMHw7xYvk5KwiafCdGRWtUw6eeoyvg/132","comment_is_top":false,"comment_ctime":1665655143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665655143","product_id":100026901,"comment_content":"使用 asyncio.get_event_loop().run_until_complete(download_all(sites)) 替换asyncio.run(download_all(sites))","like_count":0},{"had_liked":false,"id":341771,"user_name":"默默且听风","can_delete":false,"product_type":"c1","uid":2539346,"ip_address":"","ucode":"105E5FD2429AE3","user_header":"https://static001.geekbang.org/account/avatar/00/26/bf/52/59304c42.jpg","comment_is_top":false,"comment_ctime":1649828378,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649828378","product_id":100026901,"comment_content":"class WeiXinWeb:<br># set(name, value, ex=None<br>    def __init__(self,appid,secret) -&gt; None:<br>        <br>        self.base_url = &quot;https:&#47;&#47;api.weixin.qq.com&#47;&quot;<br>        self.appid = appid<br>        self.secret = secret<br><br>    async def access_token(self) -&gt;str:<br>        &quot;&quot;&quot;获取基础access_token&quot;&quot;&quot;<br>        # 判断redis中的基础token<br>        if not await redis_conn.get(&quot;access_token&quot;) :<br>            # 拼接基础token请求字符串<br>            url:str = f&quot;{self.base_url}cgi-bin&#47;token?grant_type=client_credential&amp;appid={self.appid}&amp;secret={self.secret}&quot;<br>            # 异步请求基础token<br>            async with ClientSession() as sess:<br>                async with sess.get(url) as r:<br>                    # 获取到的基础token存入redis中<br>                    res = await r.text()<br>                    await redis_conn.set(&quot;access_token&quot;, json.loads(res).get(&quot;access_token&quot;,&quot;&quot;), ex=3600)<br>        token = await redis_conn.get(&quot;access_token&quot;)<br>        return str(token,&quot;utf-8&quot;)<br><br>appid = &quot;&quot;<br>secret = &quot;&quot;","like_count":0},{"had_liked":false,"id":309465,"user_name":"涼白开","can_delete":false,"product_type":"c1","uid":2344070,"ip_address":"","ucode":"D25A9C84CABB8D","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/86/0658e993.jpg","comment_is_top":false,"comment_ctime":1630147955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630147955","product_id":100026901,"comment_content":"import multiprocessing<br>import time<br><br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br><br>def find_sums(numbers):<br>    with multiprocessing.Pool() as pool:<br>        pool.map(cpu_bound, numbers)<br><br><br>if __name__ == &quot;__main__&quot;:<br>    numbers = [10000000 + x for x in range(20)]<br><br>    start_time = time.time()<br>    find_sums(numbers)<br>    duration = time.time() - start_time<br>    print(f&quot;Duration {duration} seconds&quot;)","like_count":0},{"had_liked":false,"id":307988,"user_name":"肥猫不开心","can_delete":false,"product_type":"c1","uid":2357566,"ip_address":"","ucode":"FA9204B84913C0","user_header":"https://static001.geekbang.org/account/avatar/00/23/f9/3e/0d5f27c4.jpg","comment_is_top":false,"comment_ctime":1629350570,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629350570","product_id":100026901,"comment_content":"怎样把一个普通的同步方法封装成异步呢","like_count":0},{"had_liked":false,"id":307238,"user_name":"Silence°","can_delete":false,"product_type":"c1","uid":2041989,"ip_address":"","ucode":"1782A115C603FD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/28/85/3ae5efed.jpg","comment_is_top":false,"comment_ctime":1628958196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628958196","product_id":100026901,"comment_content":"请问下这两种方式我在我电脑上运行时间差不多，哪个是多进程的？我看老师讲过的这两个都是呀。。<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br>另一个是：<br>    with multiprocessing.Pool() as pool:<br>        pool.map(cpu_bound, numbers)<br>第二个是老师给的答案，求大佬指教！","like_count":0},{"had_liked":false,"id":305771,"user_name":"陈先跑","can_delete":false,"product_type":"c1","uid":2669673,"ip_address":"","ucode":"23F1A2673278A4","user_header":"","comment_is_top":false,"comment_ctime":1628153869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628153869","product_id":100026901,"comment_content":"多线程和 Asyncio的选择上，怎么才算IO慢？能给点具体的场景吗？","like_count":0},{"had_liked":false,"id":300885,"user_name":"罗辑","can_delete":false,"product_type":"c1","uid":1539649,"ip_address":"","ucode":"06AB60316B51C4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwZuBRbVUkziazePs2xTKskNpZachRtCBZLHlv4dAUgaBC5qHI292xaxvg3atGnHlDwjIOXPKEbc7zOrtMyicSNg/132","comment_is_top":false,"comment_ctime":1625417590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625417590","product_id":100026901,"comment_content":"思考题对于计算密集型，采用和电脑CPU核数匹配的多进程是最快的。多线程核协程都无法100%使用CPU，多进程可以。望老师指点。<br>import asyncio<br>import aiohttp<br>import concurrent.futures<br>import threading<br>import time<br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:<br>        executor.map(cpu_bound,numbers)<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":294241,"user_name":"Dean","can_delete":false,"product_type":"c1","uid":1232975,"ip_address":"","ucode":"9003F1E9ECD286","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4f/b068b1b3.jpg","comment_is_top":false,"comment_ctime":1621847745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621847745","product_id":100026901,"comment_content":"是不是应该只用一个session，而不是每次调用download_one都创建一个aiohttp.ClientSession()？","like_count":0},{"had_liked":false,"id":238219,"user_name":"云蝈蝈","can_delete":false,"product_type":"c1","uid":1219179,"ip_address":"","ucode":"19B1597DB49819","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/6b/e8ef2989.jpg","comment_is_top":false,"comment_ctime":1596096832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596096832","product_id":100026901,"comment_content":"import time<br>import multiprocessing<br><br>def get_multi_sum(num):<br>    return(sum([i * i for i in range(num + 1)]))<br>    <br>def get_list_multi_sum(l):<br>    with multiprocessing.Pool() as pool:<br>        pool.map(get_multi_sum, l)<br> <br>def main():<br>    l = [ 10000000 + i for i in range(20) ]<br>    <br>    st = time.perf_counter()<br>    get_list_multi_sum(l)<br>    et = time.perf_counter()<br>    print(&quot;run time {}s&quot;.format(et - st))<br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br><br>===============<br>run time 3.4401765440000003s","like_count":0},{"had_liked":false,"id":237914,"user_name":"小哥  在路上","can_delete":false,"product_type":"c1","uid":1524619,"ip_address":"","ucode":"93AB7B61828CEA","user_header":"https://static001.geekbang.org/account/avatar/00/17/43/8b/11e04392.jpg","comment_is_top":false,"comment_ctime":1596003924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596003924","product_id":100026901,"comment_content":"那可以使用多线程加asyncio的方法吗？","like_count":0},{"had_liked":false,"id":230591,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1593424318,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593424318","product_id":100026901,"comment_content":"def cpu_bound_thread(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums_thread(numbers):<br>    # 多线程版本<br>    # with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>    #     executor.map(cpu_bound_thread, numbers)<br>    # 多进程版<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound_thread, numbers)<br><br>def main_thread():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums_thread(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br>if __name__ == &#39;__main__&#39;:<br>    # 单线程版本，耗时将近18s左右<br>    # main_single()<br>    # 多线程版本 用时18s左右 多进程用时 5s<br>    main_thread()","like_count":0},{"had_liked":false,"id":221405,"user_name":"Flynn","can_delete":false,"product_type":"c1","uid":1138563,"ip_address":"","ucode":"BD3A938D02AF8C","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/83/caf8cab9.jpg","comment_is_top":false,"comment_ctime":1590493683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590493683","product_id":100026901,"comment_content":"import time<br>from concurrent.futures import ProcessPoolExecutor<br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br>def find_sums(numbers):<br>    with ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br><br>if __name__ == &quot;__main__&quot;:<br>    numbers = [10000000 + x for x in range(20)]<br><br>    start_time = time.time()<br>    find_sums(numbers)<br>    duration = time.time() - start_time<br>    print(f&quot;Duration {duration} seconds&quot;)","like_count":0},{"had_liked":false,"id":215206,"user_name":"曾伟杰","can_delete":false,"product_type":"c1","uid":1828065,"ip_address":"","ucode":"3DC3F0CC443E90","user_header":"","comment_is_top":false,"comment_ctime":1588929225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588929225","product_id":100026901,"comment_content":"from joblib import Parallel, delayed<br>import time<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    Parallel(n_jobs=3)(<br>        delayed(cpu_bound)(number)<br>        for number in numbers)<br><br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [5000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":207891,"user_name":"瑞哲","can_delete":false,"product_type":"c1","uid":1502093,"ip_address":"","ucode":"9F170728A055AD","user_header":"https://static001.geekbang.org/account/avatar/00/16/eb/8d/8ee78d3d.jpg","comment_is_top":false,"comment_ctime":1587208561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587208561","product_id":100026901,"comment_content":"# async_square_sum.py<br><br>&quot;&quot;&quot;<br>输入一个列表，对于列表中的每个元素，我想计算 0 到这个元素的所有整数的平方和。<br>每一个元素平均分到每一个核来算。<br>&quot;&quot;&quot;<br>import concurrent.futures<br>import time<br><br><br>def compute_one(start, end):<br>    return sum(i * i for i in range(start, end))<br><br><br>def async_cpu_bound(number):<br>    ret = 0<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        to_do = []<br>        max_workers = executor._max_workers<br><br>        nodes = [round(number * i &#47; max_workers) for i in range(max_workers)]<br>        nodes.append(number)<br>        for i in range(1, len(nodes)):<br>            future = executor.submit(compute_one, nodes[i - 1], nodes[i])<br>            to_do.append(future)<br>            # as_completed函数，在future完成后，输出结果<br>        for future in concurrent.futures.as_completed(to_do):<br>            ret += future.result()<br>    print(ret)<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        async_cpu_bound(number)<br><br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(60)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":0},{"had_liked":false,"id":207890,"user_name":"瑞哲","can_delete":false,"product_type":"c1","uid":1502093,"ip_address":"","ucode":"9F170728A055AD","user_header":"https://static001.geekbang.org/account/avatar/00/16/eb/8d/8ee78d3d.jpg","comment_is_top":false,"comment_ctime":1587208512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587208512","product_id":100026901,"comment_content":"另一种做法<br># async_square_sum.py<br><br>&quot;&quot;&quot;<br>输入一个列表，对于列表中的每个元素，我想计算 0 到这个元素的所有整数的平方和。<br>每一个元素平均分到每一个核来算。<br>&quot;&quot;&quot;<br>import concurrent.futures<br>import time<br><br><br>def compute_one(start, end):<br>    return sum(i * i for i in range(start, end))<br><br><br>def async_cpu_bound(number):<br>    ret = 0<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        to_do = []<br>        max_workers = executor._max_workers<br><br>        nodes = [round(number * i &#47; max_workers) for i in range(max_workers)]<br>        nodes.append(number)<br>        for i in range(1, len(nodes)):<br>            future = executor.submit(compute_one, nodes[i - 1], nodes[i])<br>            to_do.append(future)<br>            # as_completed函数，在future完成后，输出结果<br>        for future in concurrent.futures.as_completed(to_do):<br>            ret += future.result()<br>    print(ret)<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        async_cpu_bound(number)<br><br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(60)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":0},{"had_liked":false,"id":206663,"user_name":"风吹我走","can_delete":false,"product_type":"c1","uid":1437373,"ip_address":"","ucode":"0AC9B31DAEFBB5","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/bd/2a610ff9.jpg","comment_is_top":false,"comment_ctime":1586914582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586914582","product_id":100026901,"comment_content":"import asyncio<br>import time, concurrent.futures<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>async def cpu_bound_async(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        cpu_bound(number)<br><br><br>def calculate_sums_with_Process(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br><br>def calculate_sums_with_Thread(numbers):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>        executor.map(cpu_bound, numbers)<br><br>async def calulate_sums_with_async(numbers):<br>    tasks = [asyncio.create_task(cpu_bound_async(number)) for number in numbers]<br>    await asyncio.gather(*tasks)<br><br>def main():<br>    numbers = [10000000 + x for x in range(20)]<br>    print(&#39;=======Normal======&#39;)<br>    start_time = time.perf_counter()<br>    # print(numbers)<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds.&#39;.format(end_time - start_time))<br>    print(&#39;=========WithProcess======&#39;)<br>    start_time = time.perf_counter()<br>    # numbers = [10000000 + x for x in range(20)]<br>    # print(numbers)<br>    calculate_sums_with_Process(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds.&#39;.format(end_time - start_time))<br>    print(&#39;========WithThread=======&#39;)<br>    start_time = time.perf_counter()<br>    # numbers = [10000000 + x for x in range(20)]<br>    # print(numbers)<br>    calculate_sums_with_Thread(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds.&#39;.format(end_time - start_time))<br>    print(&#39;========WithAsync======&#39;)<br>    start_time = time.perf_counter()<br>    # numbers = [10000000 + x for x in range(20)]<br>    # print(numbers)<br>    asyncio.run(calulate_sums_with_async(numbers))<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds.&#39;.format(end_time - start_time))<br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":0},{"had_liked":false,"id":203559,"user_name":"无才不肖生","can_delete":false,"product_type":"c1","uid":1065687,"ip_address":"","ucode":"A2F83FC7405792","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/d7/1f1634af.jpg","comment_is_top":false,"comment_ctime":1586233099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586233099","product_id":100026901,"comment_content":"实际中async 和await都该写在哪些语句，实在搞不清，有没有能指点一下的。<br>async def download_url(url):<br>    async with aiohttp.ClientSession() as session:  #为什么这里要async<br>        async with session.get(url) as resp: #这里为什么要async<br>            # time.sleep(2)  #这里该用async还是await<br>            print(f&#39;待时间：{2},content length:{resp.content_length}&#39;)<br>            await write_to_file(resp.text)   #这里我写到文件那么该用什么<br><br>async def write_to_file(text):<br>    file_path = &#39;.&#47;future_test&#47;files&#47;&#39;<br>    if not os.path.exists(file_path):<br>        print(f&#39;create path:{file_path}&#39;)<br>        os.makedirs(file_path)<br>    async with open(os.path.join(file_path, datetime.now().strftime(&#39;%Y%m%d%H%M%S&#39;) + uuid.uuid4().hex[:10] + &#39;.txt&#39;), &#39;w&#39;) as f:  #这里<br>        await f.write(text)  #这里<br>        print(f&#39;write {len(text)}&#39;)<br><br>不知道都哪里该用async和await，同时还能保证写文件的内容不会出错","like_count":0},{"had_liked":false,"id":192388,"user_name":"Longerian","can_delete":false,"product_type":"c1","uid":1032464,"ip_address":"","ucode":"0B74EE70D09A2A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/10/28d5a686.jpg","comment_is_top":false,"comment_ctime":1584848449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584848449","product_id":100026901,"comment_content":"# 练习题，多进程版本<br>import concurrent.futures<br>import time<br><br>def calculate_one(number):<br>    result = sum(i * i for i in range(number))<br>#     print(result)<br>    return result<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:<br>#         executor.map(calculate_one, numbers)<br>        todo = []<br>        for number in numbers:<br>            future = executor.submit(calculate_one, number)<br>            todo.append(future)<br>            <br>        for future in concurrent.futures.as_completed(todo):<br>            print(future.result())<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(10)]<br>    print(numbers)<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br>测试了下 concurrent.futures.ProcessPoolExecutor(max_workers=4) 这一句必须得指定worker参数，否则会报错：&lt;ipython-input-29-ad5cc29cafd2&gt; in calculate_sums(numbers)<br>      9 <br>     10 def calculate_sums(numbers):<br>---&gt; 11     with concurrent.futures.ProcessPoolExecutor as executor:<br>     12         executor.map(calculate_one, numbers)<br>     13 #         todo = []<br><br>AttributeError: __enter__<br><br>多进程版本执行下来有速度有大幅提升","like_count":0},{"had_liked":false,"id":192373,"user_name":"Longerian","can_delete":false,"product_type":"c1","uid":1032464,"ip_address":"","ucode":"0B74EE70D09A2A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/10/28d5a686.jpg","comment_is_top":false,"comment_ctime":1584847999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584847999","product_id":100026901,"comment_content":"写了这么一段方法：<br> def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor as executor:<br>        executor.map(calculate_one, numbers)<br><br>运行时报错，是为什么，python版本 3.7.3，在 notebook里运行也有这个错<br>&lt;ipython-input-29-ad5cc29cafd2&gt; in calculate_sums(numbers)<br>      9 <br>     10 def calculate_sums(numbers):<br>---&gt; 11     with concurrent.futures.ProcessPoolExecutor as executor:<br>     12         executor.map(calculate_one, numbers)<br>     13 #         todo = []<br><br>AttributeError: __enter__<br>","like_count":0},{"had_liked":false,"id":175532,"user_name":"苹果","can_delete":false,"product_type":"c1","uid":1761988,"ip_address":"","ucode":"5D0FA9D8560FD8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e2/c4/25acaa38.jpg","comment_is_top":false,"comment_ctime":1580739629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580739629","product_id":100026901,"comment_content":"#利用多进程实现上述的计算例子<br>import time<br>from concurrent import futures<br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    with futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound,numbers)<br><br>def main():<br>    start_time = time.perf_counter()  <br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":0},{"had_liked":false,"id":165976,"user_name":"起于累土","can_delete":false,"product_type":"c1","uid":1227925,"ip_address":"","ucode":"2D95D0C6D6226E","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/95/2dbacf68.jpg","comment_is_top":false,"comment_ctime":1577353972,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577353972","product_id":100026901,"comment_content":"import time<br>import multiprocessing<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    pool = multiprocessing.Pool(processes=4)<br>    for number in numbers:<br>        pool.apply_async(cpu_bound, (number,))<br>    pool.close()<br>    pool.join()<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br><br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":164816,"user_name":"Lion","can_delete":false,"product_type":"c1","uid":1354415,"ip_address":"","ucode":"AB9F4F373A5DF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/af/98c5e896.jpg","comment_is_top":false,"comment_ctime":1577094757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577094757","product_id":100026901,"comment_content":"思考题：<br>import time<br>import os<br>from multiprocessing import Pool<br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br><br>def calculate_sums(numbers):<br>\twith Pool() as p:<br>\t\tresult = p.map(cpu_bound, numbers)<br>\t\tfor one in result:<br>\t\t\tprint(one)<br>\t\t\t\t\t\t<br>def main():<br>    start_time = time.perf_counter()  <br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":164586,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1577033916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577033916","product_id":100026901,"comment_content":"老师，我说一下对gevent和asyncio的理解，请指正。gevent的特点是如果对socket打patch，那所有使用socket库的地方都被patch了，影响范围是全局性的，优点是一个同步库在使用gevent后就变成异步了，很方便。而asyncio只在你想异步的地方异步，影响范围是局部性的，更可控，但缺点是一个同步库，你无法使用asyncio。这种理解对吗","like_count":0},{"had_liked":false,"id":162489,"user_name":"卡卡","can_delete":false,"product_type":"c1","uid":1123771,"ip_address":"","ucode":"1114D32368CBC1","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/bb/030145ca.jpg","comment_is_top":false,"comment_ctime":1576545475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576545475","product_id":100026901,"comment_content":"老师，你好，python有个多进程的库：multiprocessing，可以详细讲解一下么？","like_count":0},{"had_liked":false,"id":154492,"user_name":"轻风悠扬","can_delete":false,"product_type":"c1","uid":1319215,"ip_address":"","ucode":"F2276CE113BED1","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/2f/b29e8af8.jpg","comment_is_top":false,"comment_ctime":1574461367,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574461367","product_id":100026901,"comment_content":"你好老师，我在运行文中例子的时候得到一个RuntimeError: Event loop is closed。","like_count":0},{"had_liked":false,"id":153853,"user_name":"。","can_delete":false,"product_type":"c1","uid":1141658,"ip_address":"","ucode":"E71BD258F7FC26","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/9a/30de483d.jpg","comment_is_top":false,"comment_ctime":1574319368,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574319368","product_id":100026901,"comment_content":"pyhton 3.7.4 在jupyter中 执行 asyncio.run 还是报RuntimeError: asyncio.run() cannot be called from a running event loop， 换成 await 报SyntaxError: &#39;await&#39; outside async function，这是什么原因","like_count":0,"discussions":[{"author":{"id":1107591,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/87/00febb64.jpg","nickname":"雷更","note":"","ucode":"BE7840FECBBE32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70635,"discussion_content":"jupter的bug，使用了tornado的loop了。降版本就可以解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575374177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152565,"user_name":"段总","can_delete":false,"product_type":"c1","uid":1736445,"ip_address":"","ucode":"6A9DFAC00D984A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7e/fd/8db6a025.jpg","comment_is_top":false,"comment_ctime":1574043358,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574043358","product_id":100026901,"comment_content":"网站下载那个代码出现这个问题：Cannot connect to host en.wikipedia.org:443 ssl:default [远程主机强迫关闭了一个现有的连接。] 烦请大家有空看看该怎么解决？谢过大家！","like_count":0,"discussions":[{"author":{"id":1705772,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/07/2c/d2f48330.jpg","nickname":"Ryan","note":"","ucode":"D3174038A12163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64096,"discussion_content":"被墙了...","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574936546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149777,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1573375151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573375151","product_id":100026901,"comment_content":"老师，我的pycharm最新版报这个错误，这个是啥意思  File &quot;&#47;Users&#47;Liuchao&#47;PycharmProjects&#47;lsn1&#47;venv&#47;lib&#47;python3.7&#47;site-packages&#47;aiohttp&#47;tcp_helpers.py&quot;, line 20, in &lt;module&gt;<br>    def tcp_keepalive(transport: asyncio.Transport) -&gt; None:<br>AttributeError: module &#39;asyncio&#39; has no attribute &#39;Transport&#39;","like_count":0},{"had_liked":false,"id":149320,"user_name":"孤独剑","can_delete":false,"product_type":"c1","uid":1526368,"ip_address":"","ucode":"C639EED1385A6A","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/60/16e74471.jpg","comment_is_top":false,"comment_ctime":1573192165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573192165","product_id":100026901,"comment_content":"c++调用pyc文件A.pyc，A.pyc又同时调用了自定义块B.pyc，系统提示找不到B.pyc模块，是什么原因呢  两个模块都放在c++软件系统目录","like_count":0},{"had_liked":false,"id":146588,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572577209,"is_pvip":false,"replies":[{"id":"56796","content":"通俗来讲是","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1572803956,"ip_address":"","comment_id":146588,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572577209","product_id":100026901,"comment_content":"常听到阻塞，同步是不是就是阻塞地意思","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472928,"discussion_content":"通俗来讲是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572803956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218500,"discussion_content":"同步和阻塞完全是两码事，同步是针对代码来说的，阻塞是针对cpu来说的，有一个说法叫同步非阻塞，意思是说，代码是同步的，就是按正常逻辑顺序写的，但是和异步代码效果一样，不会由于网络或磁盘io让cpu等待，导致阻塞其他代码逻辑执行，典型的例子就是openresty/lua，借助nginx的事件循环机制，开发者写同步的代码，就会有异步的效果。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585663005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140706,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1571035181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571035181","product_id":100026901,"comment_content":"总结:Python并发编程开销从大到小为多进程，多线程和协程。分别适合于重CPU操作，重I&#47;O快操作，重I&#47;O慢操作。注意使用Asyncio需要第三方库支持。<br>思考题<br># 思考题 并行版本<br>def calculate_sums_future(numbers):<br>    with concurrent.futures.ThreadPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br>def calcuter_future(numbers):<br>    start_time = time.perf_counter()<br>    calculate_sums_future(numbers)<br>    end_time = time.perf_counter()<br>    print(&quot;多进程版本，耗时{}秒&quot;.format(end_time-start_time))<br>运行结果却不好，耗时是普通版本的8倍。<br>又写了一个动态规划的版本:<br># 思考题 动态规划版本<br>squ = {} # 用来储存中间结果<br>def cpu_dp(number):<br>\tresult = 0<br>\tfor i in range(number):<br>\t\tif i not in squ.keys():<br>\t\t\tsqu[i] = i*i<br>\t\tresult += squ[i]<br>\tprint(&quot;number={}, result={}&quot;.format(number, result))<br>\t\t<br>def calculate_sums_dp(numbers):<br>\tfor number in numbers:<br>\t\tcpu_dp(number)<br>\t\t<br>def calcuter_dp(numbers):<br>\tstart_time = time.perf_counter()<br>\tcalculate_sums_dp(numbers)<br>\tend_time = time.perf_counter()<br>\tprint(&quot;动态规划版本，耗时{}秒&quot;.format(end_time-start_time))<br>耗时还是比常规版本慢了两倍。原因？<br>课程的练习代码: https:&#47;&#47;github.com&#47;zwdnet&#47;PythonPractice","like_count":0},{"had_liked":false,"id":137971,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1569946063,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1569946063","product_id":100026901,"comment_content":"cpu密集型的任务为什么多进程会好些？用多线程不也是可以吗？多进程我理解的就是隔离作用会好一些。用多线程只要能跑满多个核效率是一样的吧。","like_count":0,"discussions":[{"author":{"id":1156329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/e9/3b65c171.jpg","nickname":"超人","note":"","ucode":"119ED76F577FC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29073,"discussion_content":"单个进程内，同一时刻只能有一个线程在执行，多进程的可以使用多核并行执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570724944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1156329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/e9/3b65c171.jpg","nickname":"超人","note":"","ucode":"119ED76F577FC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29079,"discussion_content":"理解了，这里的线程说的是python的线程，不能真正并行。我理解成posix线程了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570725180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":29073,"ip_address":""},"score":29079,"extra":""}]}]},{"had_liked":false,"id":129326,"user_name":"福布斯第一","can_delete":false,"product_type":"c1","uid":1244851,"ip_address":"","ucode":"6DA11E1E6819F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/b3/964eb5ac.jpg","comment_is_top":false,"comment_ctime":1567088803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567088803","product_id":100026901,"comment_content":"用了老师21节课的concurrent包。。。感觉这个更抽象更方便。<br><br>import time<br>import concurrent.futures<br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br>#     for number in numbers:<br>#         cpu_bound(number)<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation take {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br>Calculation take 0.24892765399999917 seconds<br>","like_count":0},{"had_liked":false,"id":127028,"user_name":"大龄小学生","can_delete":false,"product_type":"c1","uid":1057111,"ip_address":"","ucode":"AA7860B88FB0F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/57/ee02ef41.jpg","comment_is_top":false,"comment_ctime":1566538783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566538783","product_id":100026901,"comment_content":"老师，用一个线程查看并修改任务状态，另一线程只管调入准备好任务的运行，这样是不是也行？","like_count":0},{"had_liked":false,"id":120877,"user_name":"梁大瓜","can_delete":false,"product_type":"c1","uid":1435855,"ip_address":"","ucode":"04D708E3662D27","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/cf/554f08f9.jpg","comment_is_top":false,"comment_ctime":1565008429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565008429","product_id":100026901,"comment_content":"import time<br>from concurrent import futures<br>import multiprocessing<br><br>def calBound(num):<br>    return sum(i*i for i in range(num))<br>def main():<br>    start_time = time.perf_counter()<br><br>    numbers = [10000000 + x for x in range(20)]<br>    with futures.ProcessPoolExecutor() as exe:<br>        result = exe.map(calBound, numbers)<br>        print(f&quot;result:{list(result)}&quot;)<br>    end_time = time.perf_counter()<br>    print(&quot;concurrent.futures Cost : {} Seconds&quot;.format(end_time - start_time))<br>def main2():<br>    start_time = time.perf_counter()<br>    numbers = [1000000 + x for x in range(20)]<br>    with multiprocessing.Pool() as pl:<br>        pl_1 = pl.map(calBound,numbers)<br>        print(f&quot;result:{list(pl_1)}&quot;)<br>    end_time = time.perf_counter()<br>    print(&quot;mulitprocessing Model Cost : {} Seconds&quot;.format(end_time-start_time))<br>if __name__ == &#39;__main__&#39;:<br>    print(&quot;about concurrent!&quot;)<br>    main()<br>    print(&quot;about multprocessing!&quot;)<br>    main2()<br>--------结果------<br>about concurrent!<br>result:[333333283333335000000, 333333383333335000000, 333333483333355000001, 333333583333395000005, 333333683333455000014, 333333783333535000030, 333333883333635000055, 333333983333755000091, 333334083333895000140, 333334183334055000204, 333334283334235000285, 333334383334435000385, 333334483334655000506, 333334583334895000650, 333334683335155000819, 333334783335435001015, 333334883335735001240, 333334983336055001496, 333335083336395001785, 333335183336755002109]<br>concurrent.futures Cost : 13.748006390000228 Seconds<br>about multprocessing!<br>result:[333332833333500000, 333333833333500000, 333334833335500001, 333335833339500005, 333336833345500014, 333337833353500030, 333338833363500055, 333339833375500091, 333340833389500140, 333341833405500204, 333342833423500285, 333343833443500385, 333344833465500506, 333345833489500650, 333346833515500819, 333347833543501015, 333348833573501240, 333349833605501496, 333350833639501785, 333351833675502109]<br>mulitprocessing Model Cost : 1.2475415999997495 Seconds<br><br>使用不同的库，结果差了很多。这是为啥。","like_count":0},{"had_liked":false,"id":117468,"user_name":"taoist","can_delete":false,"product_type":"c1","uid":1195004,"ip_address":"","ucode":"D70AFE25CD8F10","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/fc/04a75cd0.jpg","comment_is_top":false,"comment_ctime":1564054570,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564054570","product_id":100026901,"comment_content":"import time<br>import concurrent.futures<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        cpu_bound(number)<br><br><br>def process_calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor(max_workers=4) as ppe:<br>        ppe.map(cpu_bound, numbers)<br><br><br>def main():<br>    numbers = [10000000 + x for x in range(20)]<br>    start_time = time.perf_counter()<br>    calculate_sums(numbers)<br>    print(&#39;Calculation takes {} seconds&#39;.format(time.perf_counter() - start_time))<br><br>    start_time = time.perf_counter()<br>    process_calculate_sums(numbers)<br>    print(&#39;multiprocessing Calculation takes {} seconds&#39;.format(time.perf_counter() - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br># 结果<br>Calculation takes 14.432480293995468 seconds<br>multiprocessing Calculation takes 4.268043693999061 seconds<br># 4核CPU， 实际上并没有4倍的性能提升，3倍多点","like_count":0},{"had_liked":false,"id":110922,"user_name":"萧潇风","can_delete":false,"product_type":"c1","uid":1152788,"ip_address":"","ucode":"24BB9E0134B7F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/14/20087885.jpg","comment_is_top":false,"comment_ctime":1562395616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562395616","product_id":100026901,"comment_content":"有些网站resp.content_length会None;执行print(&#39;Read {} from {}&#39;.format(resp.content_length, url))会显示Read None from https:&#47;&#47;news.qq.com&#47;","like_count":0},{"had_liked":false,"id":110357,"user_name":"Ben","can_delete":false,"product_type":"c1","uid":1252353,"ip_address":"","ucode":"70351D4FAE47F7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/01/5aaaf5b6.jpg","comment_is_top":false,"comment_ctime":1562240799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562240799","product_id":100026901,"comment_content":"老师, 请看下, 下面理解的对不对<br>如果共享相同的事件循环, 那么asyncio.create_task创建的future对象, <br>在asyncio.gather()收集时, 如果预备状态的队列中发现已经执行了, <br>那么就只收集结果, 不需要再去执行一遍, <br>而未被执行过的, 就会按程序的控制继续执行, 当所有的future对象都完成, 就返回一个收集的结果","like_count":0},{"had_liked":false,"id":109982,"user_name":"张丽娜","can_delete":false,"product_type":"c1","uid":1032331,"ip_address":"","ucode":"D70CFF68E72DAF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","comment_is_top":false,"comment_ctime":1562144860,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1562144860","product_id":100026901,"comment_content":"请问在运行下载网站内容时出现以下问题怎么解决啊？我也遇到了这个错误，请老师能给给予解答<br>SSL error in data received<br>protocol: &lt;asyncio.sslproto.SSLProtocol object at 0x7f3a241e4b00&gt;<br>transport: &lt;_SelectorSocketTransport fd=58 read=polling write=&lt;idle, bufsize=0&gt;&gt;","like_count":0,"discussions":[{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":915,"discussion_content":"高版本：代码第7行更改成‘async with session.get(url, ssl=False) as resp’后运行成功。\n楼下的666啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562148601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":908,"discussion_content":"关于Python3.7.3 版本运行报错的问题，目前没有找到的解决办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562146726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":907,"discussion_content":"找到了一种降级的方案，用高版本Python的会出现问题，我使用了低版本的写法，并且对应的程序代码也做了相应的调整，现在可以正常运行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562146696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109625,"user_name":"WANG","can_delete":false,"product_type":"c1","uid":1014839,"ip_address":"","ucode":"40795CDD7734F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/37/a747c9f2.jpg","comment_is_top":false,"comment_ctime":1562067759,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1562067759","product_id":100026901,"comment_content":"可以比老师少几行代码😁<br><br>from multiprocessing import Pool<br>import time<br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>if __name__ == &#39;__main__&#39;:<br>    start_time = time.time()<br>    with Pool() as p:<br>        p.map(cpu_bound, [10000000 + x for x in range(20)])<br>print(&quot;Duration {} seconds&quot;.format(time.time() - start_time))","like_count":0},{"had_liked":false,"id":109572,"user_name":"〰","can_delete":false,"product_type":"c1","uid":1164565,"ip_address":"","ucode":"5ECF54B48BB29B","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/15/cf00ae4f.jpg","comment_is_top":false,"comment_ctime":1562059398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562059398","product_id":100026901,"comment_content":"可以每个线程使用asyncio，然后开多个进程吗，就是两种方式结合起来。","like_count":0},{"had_liked":false,"id":109057,"user_name":"Wing·三金","can_delete":false,"product_type":"c1","uid":1341402,"ip_address":"","ucode":"6B9F5822C3717F","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","comment_is_top":false,"comment_ctime":1561953638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561953638","product_id":100026901,"comment_content":"思考题：<br>1、用  concurrent.futures.ProcessPoolExecutor 或 multiprocessing.Pool 几乎等效，另外有些问题需要注意；<br>2、在使用 map时，print 在子进程中不会显示，需要用 logging 或 改 print 为 return 的方法代替；<br>3、在交互式编译环境（如 jupyter）中，多进程是无法顺利运行的（print 结果的话会报 BrokenProcessPool 的错误，不 print 结果的话实际上没有运行），所以本人改为在 sublime 3 中运行。<br><br>原码如下：<br>import time, concurrent.futures<br>from multiprocessing import Pool<br>import time<br><br>def cpu_bound(number):<br>    return sum(i * i for i in range(number))<br>            <br>def calculate_sums(numbers):<br>    # multiprocessing ver 1<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        print(list(executor.map(cpu_bound, numbers)))<br>        # 注意，如果这里不是用 map 而是用 for + submit，上面 cpu_bound 就还是用 print 而不用改为 return<br>    # ver 2<br>    with Pool() as p:<br>        print(p.map(cpu_bound, numbers))<br>        <br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":108800,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1561885444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561885444","product_id":100026901,"comment_content":"# -*- encoding -*-<br>&#39;&#39;&#39;<br>py 3.6<br>sulime<br>-- 发现电脑太。。。<br>&#39;&#39;&#39;<br><br><br>import time<br>import concurrent.futures<br>from multiprocessing import Pool<br><br>now = lambda: time.perf_counter()<br><br>def cpu_bound(number):<br>    # print(sum(i * i for i in range(number)))<br>    return sum(i*i for i in range(number))<br><br>def calculate_sums(numbers):<br>    # # 1.0  49s<br>    # for number in numbers:<br>    #     cpu_bound(number)<br><br>    # # 2.0  30s<br>    # with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:<br>    #     executor.map(cpu_bound, numbers)<br><br>    # # 3.0  30s<br>    # with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:<br>    #     for num in numbers:<br>    #         executor.submit(cpu_bound, num)<br><br>    # # 4.0  30s<br>    # p = Pool(4)<br>    # for num in numbers:<br>    #     p.apply_async(cpu_bound, args=(num,))<br>    # p.close()<br>    # p.join()<br><br>    # 5.0 30s<br>    # cpu_bound    return -**-<br>    with Pool(4) as p:<br>        print(p.map(cpu_bound, numbers))<br><br>        <br><br><br>def main():<br>    start_time = now()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    print(&#39;Calculation takes {:.2f} s&#39;.format(now() - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br>","like_count":0},{"had_liked":false,"id":108787,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1561881852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561881852","product_id":100026901,"comment_content":"import time<br>import concurrent.futures<br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:#多进程并行<br>        try:<br>            executor.map(cpu_bound, numbers)<br>        except concurrent.futures.TimeoutError:<br>            print(&#39;TimeoutError&#39;)<br>        except:<br>            print(&#39;other Error&#39;)<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":108467,"user_name":"szc","can_delete":false,"product_type":"c1","uid":1202730,"ip_address":"","ucode":"869C227F5D2513","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/2a/5ab880b0.jpg","comment_is_top":false,"comment_ctime":1561777978,"is_pvip":false,"replies":[{"id":"39291","content":"这个得看具体场景。比如大公司里相应业务爬虫的规模非常大，要抓取百万级的视频新闻信息流，这种就属于IO heavy。但是如果你只需要抓取10个网站的信息，并且网络连接良好，那么IO就很快","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561793907,"ip_address":"","comment_id":108467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561777978","product_id":100026901,"comment_content":"能否举一些例子，哪些场景是IO密集型中的IOheavy， 那些是IO很快","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455992,"discussion_content":"这个得看具体场景。比如大公司里相应业务爬虫的规模非常大，要抓取百万级的视频新闻信息流，这种就属于IO heavy。但是如果你只需要抓取10个网站的信息，并且网络连接良好，那么IO就很快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561793907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108430,"user_name":"响雨","can_delete":false,"product_type":"c1","uid":1581705,"ip_address":"","ucode":"C5FB3A3BC68F92","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","comment_is_top":false,"comment_ctime":1561771544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561771544","product_id":100026901,"comment_content":"from multiprocessing import Pool<br>import time<br><br><br>def square(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    with Pool() as pool:<br>        pool.map(square, numbers)<br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br>Calculation takes 9.752991132001625 seconds<br>不使用多进程消耗16s<br>Calculation takes 16.316618639997614 seconds","like_count":0},{"had_liked":false,"id":108275,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1561711174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561711174","product_id":100026901,"comment_content":"import concurrent.futures<br>import multiprocessing<br>import time<br><br>def cpu_bound(number):<br>    re = sum(i * i for i in range(number))<br>    process_sharelist.append(re)<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br>if __name__ == &#39;__main__&#39;:<br>    start_time = time.perf_counter()  <br>    numbers = [10000000 + x for x in range(20)]<br><br>    process_sharelist = multiprocessing.Manager().list()<br>    calculate_sums(numbers)<br><br>    for i in process_sharelist:<br>        print(i)<br><br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br>向我上面这种使用进程间共享列表，让每个进程往同一个列表中写数据，数据会不会错乱？","like_count":0},{"had_liked":false,"id":108228,"user_name":"Redevil","can_delete":false,"product_type":"c1","uid":1527609,"ip_address":"","ucode":"21C90472DC6357","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PrKSgib1DcguTZYoOAqNw8tpLKylQU6dQPwI4NLJkd6344EWHaLF5yHe6PpAD6fsxSm0no7qiakiaEHUYw4nzTEyw/132","comment_is_top":false,"comment_ctime":1561701676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561701676","product_id":100026901,"comment_content":"学到了：想启动多进程python程序<br>1. 不能用jupyter notebook<br>2. 必须使用if __name__ == &#39;__main__&#39;: 方式<br>","like_count":0},{"had_liked":false,"id":108196,"user_name":"干布球","can_delete":false,"product_type":"c1","uid":1218173,"ip_address":"","ucode":"048ABC199D89B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","comment_is_top":false,"comment_ctime":1561693734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561693734","product_id":100026901,"comment_content":"import time<br>import concurrent.futures<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br>def calculate_sums(numbers):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(cpu_bound, numbers)<br><br>def main():<br>    start_time = time.perf_counter()  <br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":108194,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1561693656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561693656","product_id":100026901,"comment_content":"多进程修改版本：<br>import time<br>import multiprocessing<br><br><br>def cpu_bound(number):<br>    print(sum(i * i for i in range(number)))<br><br><br>def calculate_sums(numbers):<br>    for number in numbers:<br>        #cpu_bound(number)<br>        p = multiprocessing.Process(target=cpu_bound, args=(number,))<br>        p.start()<br>    p.join()<br><br><br>def main():<br>    start_time = time.perf_counter()<br>    numbers = [10000000 + x for x in range(20)]<br>    calculate_sums(numbers)<br>    end_time = time.perf_counter()<br>    print(&#39;Calculation takes {} seconds&#39;.format(end_time - start_time))<br><br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br>运行结果：<br>Calculation takes 9.415819544 seconds","like_count":0},{"had_liked":false,"id":108190,"user_name":"舒服","can_delete":false,"product_type":"c1","uid":1378263,"ip_address":"","ucode":"9E81D1268D63B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/d7/7702a7e4.jpg","comment_is_top":false,"comment_ctime":1561692752,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561692752","product_id":100026901,"comment_content":"async 和 await有什么作用啊","like_count":0,"discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566,"discussion_content":"async标识该函数或语句是一个协程对象（异步对象），await + 协程对象，表明该条语句是I/O耗时语句，所以任务在此处中断，把控制权交给线程去执行其他任务，实现非阻塞。当I/O操作完成，线程再回来继续执行该任务没完成的代码","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561709062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108099,"user_name":"farFlight","can_delete":false,"product_type":"c1","uid":1245211,"ip_address":"","ucode":"B0872D3ECBEC38","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbRibsic15KXfGEN3SSjnLhXGyhK2Uyrj5ibBJsKAjicNqtafDaQOLH4xpSJRZD1vmibFPJER1ySmwP9A/132","comment_is_top":false,"comment_ctime":1561682262,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1561682262","product_id":100026901,"comment_content":"请问在运行下载网站内容时出现以下问题怎么解决啊？<br>SSL error in data received<br>protocol: &lt;asyncio.sslproto.SSLProtocol object at 0x7f3a241e4b00&gt;<br>transport: &lt;_SelectorSocketTransport fd=58 read=polling write=&lt;idle, bufsize=0&gt;&gt;","like_count":0,"discussions":[{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":901,"discussion_content":"我也遇到此类的错误，但是是间歇性的。用百度百科以及维基百科报错还不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562144231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526815,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQDJajN26Fx1iaw5JroPHc7b4QqNQcIlZGZaVKz1qyiaho68J1ra5s6t1UCkaCUyogbcdcHscFOqOQ/132","nickname":"suifengyehun","note":"","ucode":"189944EFFFB46B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":695,"discussion_content":"我也出现这个错误了，网址都用百度百科的替换掉维基百科的了。网上查了资料，说要禁用ssl验证，但是试了还是不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561968263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1032331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/8b/0371baee.jpg","nickname":"张丽娜","note":"","ucode":"D70CFF68E72DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1526815,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQDJajN26Fx1iaw5JroPHc7b4QqNQcIlZGZaVKz1qyiaho68J1ra5s6t1UCkaCUyogbcdcHscFOqOQ/132","nickname":"suifengyehun","note":"","ucode":"189944EFFFB46B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":903,"discussion_content":"请问这个问题有解决方案不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562144828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":695,"ip_address":""},"score":903,"extra":""}]},{"author":{"id":1037253,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d3/c5/71ce5bbf.jpg","nickname":"Seunzi","note":"","ucode":"601A1C8FBAAD4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555,"discussion_content":"应该是维基百科被墙了导致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561699113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108059,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1561660140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561660140","product_id":100026901,"comment_content":"老师好，想请问一下Asyncio和go function的区别是什么？感觉好像都是用户级线程…谢谢老师","like_count":0}]}