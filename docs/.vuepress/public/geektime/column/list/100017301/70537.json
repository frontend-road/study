{"id":70537,"title":"30 | 图的表示：如何存储微博、微信等社交网络中的好友关系？","content":"<p>微博、微信、LinkedIn这些社交软件我想你肯定都玩过吧。在微博中，两个人可以互相关注；在微信中，两个人可以互加好友。那你知道，<strong><span class=\"orange\">如何存储微博、微信等这些社交网络的好友关系吗？</span></strong></p><p>这就要用到我们今天要讲的这种数据结构：图。实际上，涉及图的算法有很多，也非常复杂，比如图的搜索、最短路径、最小生成树、二分图等等。我们今天聚焦在图存储这一方面，后面会分好几节来依次讲解图相关的算法。</p><h2>如何理解“图”？</h2><p>我们前面讲过了树这种非线性表数据结构，今天我们要讲另一种非线性表数据结构，<strong>图</strong>（Graph）。和树比起来，这是一种更加复杂的非线性表结构。</p><p>我们知道，树中的元素我们称为节点，图中的元素我们就叫做<strong>顶点</strong>（vertex）。从我画的图中可以看出来，图中的一个顶点可以与任意其他顶点建立连接关系。我们把这种建立的关系叫做<strong>边</strong>（edge）。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/af/df85dc345a9726cab0338e68982fd1af.jpg?wh=1142*428\" alt=\"\"></p><p>我们生活中就有很多符合图这种结构的例子。比如，开篇问题中讲到的社交网络，就是一个非常典型的图结构。</p><p>我们就拿微信举例子吧。我们可以把每个用户看作一个顶点。如果两个用户之间互加好友，那就在两者之间建立一条边。所以，整个微信的好友关系就可以用一张图来表示。其中，每个用户有多少个好友，对应到图中，就叫做顶点的<strong>度</strong>（degree），就是跟顶点相连接的边的条数。</p><!-- [[[read_end]]] --><p>实际上，微博的社交关系跟微信还有点不一样，或者说更加复杂一点。微博允许单向关注，也就是说，用户A关注了用户B，但用户B可以不关注用户A。那我们如何用图来表示这种单向的社交关系呢？</p><p>我们可以把刚刚讲的图结构稍微改造一下，引入边的“方向”的概念。</p><p>如果用户A关注了用户B，我们就在图中画一条从A到B的带箭头的边，来表示边的方向。如果用户A和用户B互相关注了，那我们就画一条从A指向B的边，再画一条从B指向A的边。我们把这种边有方向的图叫做“有向图”。以此类推，我们把边没有方向的图就叫做“无向图”。</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/96/c31759a37d8a8719841f347bd479b796.jpg?wh=1142*449\" alt=\"\"></p><p>我们刚刚讲过，无向图中有“度”这个概念，表示一个顶点有多少条边。在有向图中，我们把度分为<strong>入度</strong>（In-degree）和<strong>出度</strong>（Out-degree）。</p><p>顶点的入度，表示有多少条边指向这个顶点；顶点的出度，表示有多少条边是以这个顶点为起点指向其他顶点。对应到微博的例子，入度就表示有多少粉丝，出度就表示关注了多少人。</p><p>前面讲到了微信、微博、无向图、有向图，现在我们再来看另一种社交软件：QQ。</p><p>QQ中的社交关系要更复杂一点。不知道你有没有留意过QQ亲密度这样一个功能。QQ不仅记录了用户之间的好友关系，还记录了两个用户之间的亲密度，如果两个用户经常往来，那亲密度就比较高；如果不经常往来，亲密度就比较低。如何在图中记录这种好友关系的亲密度呢？</p><p>这里就要用到另一种图，<strong>带权图</strong>（weighted graph）。在带权图中，每条边都有一个权重（weight），我们可以通过这个权重来表示QQ好友间的亲密度。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/e8/55d7e4806dc47950ae098d959b03ace8.jpg?wh=1142*454\" alt=\"\"></p><p>关于图的概念比较多，我今天也只是介绍了几个常用的，理解起来都不复杂，不知道你都掌握了没有？掌握了图的概念之后，我们再来看下，如何在内存中存储图这种数据结构呢？</p><h2>邻接矩阵存储方法</h2><p>图最直观的一种存储方法就是，<strong>邻接矩阵</strong>（Adjacency Matrix）。</p><p>邻接矩阵的底层依赖一个二维数组。对于无向图来说，如果顶点i与顶点j之间有边，我们就将A[i][j]和A[j][i]标记为1；对于有向图来说，如果顶点i到顶点j之间，有一条箭头从顶点i指向顶点j的边，那我们就将A[i][j]标记为1。同理，如果有一条箭头从顶点j指向顶点i的边，我们就将A[j][i]标记为1。对于带权图，数组中就存储相应的权重。</p><p><img src=\"https://static001.geekbang.org/resource/image/62/d2/625e7493b5470e774b5aa91fb4fdb9d2.jpg?wh=1142*730\" alt=\"\"></p><p>用邻接矩阵来表示一个图，虽然简单、直观，但是比较浪费存储空间。为什么这么说呢？</p><p>对于无向图来说，如果A[i][j]等于1，那A[j][i]也肯定等于1。实际上，我们只需要存储一个就可以了。也就是说，无向图的二维数组中，如果我们将其用对角线划分为上下两部分，那我们只需要利用上面或者下面这样一半的空间就足够了，另外一半白白浪费掉了。</p><p>还有，如果我们存储的是<strong>稀疏图</strong>（Sparse Matrix），也就是说，顶点很多，但每个顶点的边并不多，那邻接矩阵的存储方法就更加浪费空间了。比如微信有好几亿的用户，对应到图上就是好几亿的顶点。但是每个用户的好友并不会很多，一般也就三五百个而已。如果我们用邻接矩阵来存储，那绝大部分的存储空间都被浪费了。</p><p>但这也并不是说，邻接矩阵的存储方法就完全没有优点。首先，邻接矩阵的存储方式简单、直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效。其次，用邻接矩阵存储图的另外一个好处是方便计算。这是因为，用邻接矩阵的方式存储图，可以将很多图的运算转换成矩阵之间的运算。比如求解最短路径问题时会提到一个<a href=\"https://zh.wikipedia.org/wiki/Floyd-Warshall%E7%AE%97%E6%B3%95\">Floyd-Warshall算法</a>，就是利用矩阵循环相乘若干次得到结果。</p><h2>邻接表存储方法</h2><p>针对上面邻接矩阵比较浪费内存空间的问题，我们来看另外一种图的存储方法，<strong>邻接表</strong>（Adjacency List）。</p><p>我画了一张邻接表的图，你可以先看下。乍一看，邻接表是不是有点像散列表？每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点。另外我需要说明一下，图中画的是一个有向图的邻接表存储方式，每个顶点对应的链表里面，存储的是指向的顶点。对于无向图来说，也是类似的，不过，每个顶点的链表中存储的，是跟这个顶点有边相连的顶点，你可以自己画下。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/94/039bc254b97bd11670cdc4bf2a8e1394.jpg?wh=1142*547\" alt=\"\"></p><p>还记得我们之前讲过的时间、空间复杂度互换的设计思想吗？邻接矩阵存储起来比较浪费空间，但是使用起来比较节省时间。相反，邻接表存储起来比较节省空间，但是使用起来就比较耗时间。</p><p>就像图中的例子，如果我们要确定，是否存在一条从顶点2到顶点4的边，那我们就要遍历顶点2对应的那条链表，看链表中是否存在顶点4。而且，我们前面也讲过，链表的存储方式对缓存不友好。所以，比起邻接矩阵的存储方式，在邻接表中查询两个顶点之间的关系就没那么高效了。</p><p>在散列表那几节里，我讲到，在基于链表法解决冲突的散列表中，如果链过长，为了提高查找效率，我们可以将链表换成其他更加高效的数据结构，比如平衡二叉查找树等。我们刚刚也讲到，邻接表长得很像散列。所以，我们也可以将邻接表同散列表一样进行“改进升级”。</p><p>我们可以将邻接表中的链表改成平衡二叉查找树。实际开发中，我们可以选择用红黑树。这样，我们就可以更加快速地查找两个顶点之间是否存在边了。当然，这里的二叉查找树可以换成其他动态数据结构，比如跳表、散列表等。除此之外，我们还可以将链表改成有序动态数组，可以通过二分查找的方法来快速定位两个顶点之间否是存在边。</p><h2>解答开篇</h2><p>有了前面讲的理论知识，现在我们回过头来看开篇的问题，如何存储微博、微信等社交网络中的好友关系？</p><p>前面我们分析了，微博、微信是两种“图”，前者是有向图，后者是无向图。在这个问题上，两者的解决思路差不多，所以我只拿微博来讲解。</p><p>数据结构是为算法服务的，所以具体选择哪种存储方法，与期望支持的操作有关系。针对微博用户关系，假设我们需要支持下面这样几个操作：</p><ul>\n<li>\n<p>判断用户A是否关注了用户B；</p>\n</li>\n<li>\n<p>判断用户A是否是用户B的粉丝；</p>\n</li>\n<li>\n<p>用户A关注用户B；</p>\n</li>\n<li>\n<p>用户A取消关注用户B；</p>\n</li>\n<li>\n<p>根据用户名称的首字母排序，分页获取用户的粉丝列表；</p>\n</li>\n<li>\n<p>根据用户名称的首字母排序，分页获取用户的关注列表。</p>\n</li>\n</ul><p>关于如何存储一个图，前面我们讲到两种主要的存储方法，邻接矩阵和邻接表。因为社交网络是一张稀疏图，使用邻接矩阵存储比较浪费存储空间。所以，这里我们采用邻接表来存储。</p><p>不过，用一个邻接表来存储这种有向图是不够的。我们去查找某个用户关注了哪些用户非常容易，但是如果要想知道某个用户都被哪些用户关注了，也就是用户的粉丝列表，是非常困难的。</p><p>基于此，我们需要一个逆邻接表。邻接表中存储了用户的关注关系，逆邻接表中存储的是用户的被关注关系。对应到图上，邻接表中，每个顶点的链表中，存储的就是这个顶点指向的顶点，逆邻接表中，每个顶点的链表中，存储的是指向这个顶点的顶点。如果要查找某个用户关注了哪些用户，我们可以在邻接表中查找；如果要查找某个用户被哪些用户关注了，我们从逆邻接表中查找。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/a1/501440bcffdcf4e6f9a5ca1117e990a1.jpg?wh=1142*856\" alt=\"\"></p><p>基础的邻接表不适合快速判断两个用户之间是否是关注与被关注的关系，所以我们选择改进版本，将邻接表中的链表改为支持快速查找的动态数据结构。选择哪种动态数据结构呢？红黑树、跳表、有序动态数组还是散列表呢？</p><p>因为我们需要按照用户名称的首字母排序，分页来获取用户的粉丝列表或者关注列表，用跳表这种结构再合适不过了。这是因为，跳表插入、删除、查找都非常高效，时间复杂度是O(logn)，空间复杂度上稍高，是O(n)。最重要的一点，跳表中存储的数据本来就是有序的了，分页获取粉丝列表或关注列表，就非常高效。</p><p>如果对于小规模的数据，比如社交网络中只有几万、几十万个用户，我们可以将整个社交关系存储在内存中，上面的解决思路是没有问题的。但是如果像微博那样有上亿的用户，数据规模太大，我们就无法全部存储在内存中了。这个时候该怎么办呢？</p><p>我们可以通过哈希算法等数据分片方式，将邻接表存储在不同的机器上。你可以看下面这幅图，我们在机器1上存储顶点1，2，3的邻接表，在机器2上，存储顶点4，5的邻接表。逆邻接表的处理方式也一样。当要查询顶点与顶点关系的时候，我们就利用同样的哈希算法，先定位顶点所在的机器，然后再在相应的机器上查找。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/2f/08e4f4330a1d88e9fec94b0f2d1bbe2f.jpg?wh=1142*780\" alt=\"\"></p><p>除此之外，我们还有另外一种解决思路，就是利用外部存储（比如硬盘），因为外部存储的存储空间要比内存会宽裕很多。数据库是我们经常用来持久化存储关系数据的，所以我这里介绍一种数据库的存储方式。</p><p>我用下面这张表来存储这样一个图。为了高效地支持前面定义的操作，我们可以在表上建立多个索引，比如第一列、第二列，给这两列都建立索引。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/8f/7339595c631660dc87559bec2ddf928f.jpg?wh=1142*800\" alt=\"\"></p><h2>内容小结</h2><p>今天我们学习了图这种非线性表数据结构，关于图，你需要理解这样几个概念：无向图、有向图、带权图、顶点、边、度、入度、出度。除此之外，我们还学习了图的两个主要的存储方式：邻接矩阵和邻接表。</p><p>邻接矩阵存储方法的缺点是比较浪费空间，但是优点是查询效率高，而且方便矩阵运算。邻接表存储方法中每个顶点都对应一个链表，存储与其相连接的其他顶点。尽管邻接表的存储方式比较节省存储空间，但链表不方便查找，所以查询效率没有邻接矩阵存储方式高。针对这个问题，邻接表还有改进升级版，即将链表换成更加高效的动态数据结构，比如平衡二叉查找树、跳表、散列表等。</p><h2>课后思考</h2><ol>\n<li>\n<p>关于开篇思考题，我们只讲了微博这种有向图的解决思路，那像微信这种无向图，应该怎么存储呢？你可以照着我的思路，自己做一下练习。</p>\n</li>\n<li>\n<p>除了我今天举的社交网络可以用图来表示之外，符合图这种结构特点的例子还有很多，比如知识图谱（Knowledge Graph）。关于图这种数据结构，你还能想到其他生活或者工作中的例子吗？</p>\n</li>\n</ol><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","neighbors":{"left":{"article_title":"29 | 堆的应用：如何快速获取到Top 10最热门的搜索关键词？","id":70187},"right":{"article_title":"31 | 深度和广度优先搜索：如何找出社交网络中的三度好友关系？","id":70891}},"comments":[{"had_liked":false,"id":45098,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1543545560,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"3540596597464","product_id":100017301,"comment_content":"学了这么久的数据结构和算法，今天突然顿悟，基础的数据结构就是数组和链表， 而后面更加复杂的 树 队列 图 等等 都可以通过数组和链表等方式存储， 出现树 队列 图 等数据结构的原因 就是为了解决 部分问题处理过程中时间复杂度过高的问题， 所以数据结构就是为了算法而生的！ 尤其是学习了时间复杂度过后 在工作和学习过程中 就应该分析自己的代码复杂度 以进行优化或者选择更好的数据结构和算法！这样才能写出更好的代码更好的解决问题","like_count":825,"discussions":[{"author":{"id":2019799,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rccaya3zw31Pxu1fRSiakKxjn7gBcXTyy7YE4BHVsGczceABMnKBRicrnxUlcptrOArQdj4hOP8AjRekrDvBx7KQ/132","nickname":"万政","note":"","ucode":"E59C2C660D6582","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367555,"discussion_content":"物理存储结构就两种，连续存储、离散式存储\n算法是根据应用场景需求，对物理存储结构进行改造和组合的奇技淫巧。\n数据结构就是指逻辑结构，是适合某一算法发挥和理解的物理存储结构的改造和组合。","likes_number":65,"is_delete":false,"is_hidden":false,"ctime":1618391219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1326199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3c/77/9d90e9b1.jpg","nickname":"Richard","note":"","ucode":"860BEEAE94A8C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2019799,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rccaya3zw31Pxu1fRSiakKxjn7gBcXTyy7YE4BHVsGczceABMnKBRicrnxUlcptrOArQdj4hOP8AjRekrDvBx7KQ/132","nickname":"万政","note":"","ucode":"E59C2C660D6582","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379052,"discussion_content":"醍醐灌顶","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623653509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":367555,"ip_address":""},"score":379052,"extra":""}]},{"author":{"id":1206187,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","nickname":"寒光","note":"","ucode":"061BE413595F21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299023,"discussion_content":"站在高维度思考，可以很容易解决低维度的问题，可是，升维很难。但只要升维成功，就能降维打击，无往而不胜，这个代价是值得的。\n\n","likes_number":39,"is_delete":false,"is_hidden":false,"ctime":1597534356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360098,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c0/e2/d6768136.jpg","nickname":"Cody 🔱 鹏","note":"","ucode":"E8E735B30FDD76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52951,"discussion_content":"我很久之前也顿悟了这个。回头想想内存就明白了，所有数据的存取只有两种方式：线性和非线性。也就是数组和链表。所以不可能有其他数据结构的。高级的数据结构都是这二者的算法组合。","likes_number":34,"is_delete":false,"is_hidden":false,"ctime":1574094774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325514,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/ca/4a07bfd8.jpg","nickname":"Jahng","note":"","ucode":"5D5789EAAC4739","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336848,"discussion_content":"我也有这个感悟，而且个人理解，因为数据结构分为存储结构（或者叫物理结构）和逻辑结构，逻辑结构是基于存储结构实现的，而存储结构分为顺序存储结构和链式存储结构，对应数组和链表。\n还有一个感受就是，数据结构更像是协议，就是大家规定这个结构要满足什么条件。例如堆这个数据结构，要满足所有节点的值都要大于等于或者小于等于其左右子节点的值。","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1608716016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513298,"avatar":"https://static001.geekbang.org/account/avatar/00/17/17/52/a891caa2.jpg","nickname":"顶级潇洒","note":"","ucode":"4B689B7DAD508D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349273,"discussion_content":"是的，内存只有连续和不连续两种","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1613034452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1727799,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5d/37/b3c7d6a0.jpg","nickname":"装睡的小5郎","note":"","ucode":"F4CD1B8E65B6E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1513298,"avatar":"https://static001.geekbang.org/account/avatar/00/17/17/52/a891caa2.jpg","nickname":"顶级潇洒","note":"","ucode":"4B689B7DAD508D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357936,"discussion_content":"牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615898640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349273,"ip_address":""},"score":357936,"extra":""}]},{"author":{"id":1212873,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","nickname":"百里","note":"","ucode":"2CE96129AA7F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73680,"discussion_content":"数据结构的分数据逻辑结构和数据存储结构，而数据存储结构只有二种：顺序存储与链式存储.也就是说落到内存或磁盘上,只有这两种结构.可参数我的笔记https://github.com/yezihack/algo","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1575588513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145867,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","nickname":"不破楼兰终不还","note":"","ucode":"F06EEF04552A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36743,"discussion_content":"算法解题过程中两种思想：第一以空间换时间，第二升维。高级数据结构的出现我想就是通过升维来解决复杂度问题的。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1571412361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041141,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/25/35/977bdcea.jpg","nickname":"大翔","note":"","ucode":"4AAB4B0D1372C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287011,"discussion_content":"我也觉得顿悟这个词用的不错！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1593346939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563973,"avatar":"https://static001.geekbang.org/account/avatar/00/17/dd/45/dd79456e.jpg","nickname":"日拱一卒","note":"","ucode":"ED64819DA04EBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47211,"discussion_content":"顿悟这个词用得不错","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573295128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/08/28c327d0.jpg","nickname":"冰河时代","note":"","ucode":"F4375FB7CE4FD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354217,"discussion_content":"需求（操作）-> 算法 -> 数据结构【中间再权衡数据量大小，内外存储、网络等】","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615256753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2172520,"avatar":"https://static001.geekbang.org/account/avatar/00/21/26/68/b86dc4df.jpg","nickname":"R","note":"","ucode":"3721FC8C8DE174","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311650,"discussion_content":"存储结构：顺序存储结构和链式存储结构","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602431037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716933,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","nickname":"jacky","note":"","ucode":"CD583272CF1237","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86416,"discussion_content":"升维怎么理解？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576595435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1456012,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaWKUCqRiaOZL5LXxydHNo3br5ajqcfW79quX8lddjdAMM3kHicyE6kWuoR1WTOmTlxIUONHVrSzvvY1xqb8b5icxg/132","nickname":"Orange","note":"","ucode":"DA888F70BC7CBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1716933,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","nickname":"jacky","note":"","ucode":"CD583272CF1237","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213429,"discussion_content":"譬如你将n*n的排序变成n*logN，就是一种升纬。n->logN就是一维线性到数的二纬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585091414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86416,"ip_address":""},"score":213429,"extra":""},{"author":{"id":1508333,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/52NKIRzYdaqXMaIYNzPxu4jrVDFg34xibPk33w9ibib7MTzojXh36dOcl9hoI9u9G2IWLHiapqY7uicd8SojRFBm5hA/132","nickname":"XiaoBai","note":"","ucode":"22D00F7BAAD636","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1716933,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","nickname":"jacky","note":"","ucode":"CD583272CF1237","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309004,"discussion_content":"链表到跳表就是一种升维，升维是为了获取更多的信息，比如链表升维成跳表，其实是加了额外的空间保存索引信息","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601168995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86416,"ip_address":""},"score":309004,"extra":""}]},{"author":{"id":1362623,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ca/bf/9138971b.jpg","nickname":"知足常乐😄 😁 😓😂","note":"","ucode":"9B2B3D08584F6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78823,"discussion_content":"应该是存储结构吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576024901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328977,"avatar":"https://static001.geekbang.org/account/avatar/00/14/47/51/e2d4833b.jpg","nickname":"子午河洲","note":"","ucode":"BB282CEBB590A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30835,"discussion_content":"谢谢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570864238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239637,"discussion_content":"非常好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587305123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645672,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/68/8eed8224.jpg","nickname":"ellenlovestwerk","note":"","ucode":"21AA6258CAF12D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11609,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568398095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44957,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1543535021,"is_pvip":false,"replies":[{"id":"16031","content":"👍","user_name":"作者回复","comment_id":44957,"uid":"1190123","ip_address":"","utype":1,"ctime":1543542718,"user_name_real":"gg"}],"discussion_count":17,"race_medal":0,"score":"731687975341","product_id":100017301,"comment_content":"地图<br><br>网络<br><br>Gradle这个编译工具，内部组织task的方式用的是有向图<br><br>Android framework层提供了一个CoordinatorLayout，其内部协调子view的联动，也是用的图","like_count":171,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430874,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476815,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/cf/c2fa7439.jpg","nickname":"Abstract","note":"","ucode":"198072950CDB7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76957,"discussion_content":"你确定是来学习的？而不是来指导学习的？","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1575873058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211898,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/fa/4d1ccf80.jpg","nickname":"天意","note":"","ucode":"69B032C229036B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220610,"discussion_content":"同九义，汝何秀？","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1585906280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158349,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/cd/fda6374f.jpg","nickname":"Louis","note":"","ucode":"BC667839F17937","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53216,"discussion_content":"不怕别人牛皮，最怕像层主这样的架构师比你还勤奋","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1574145956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554511,"discussion_content":"同九义，汝何秀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646408859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456660,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3a/14/16c93a1b.jpg","nickname":"₁₀harryyan¹⁹","note":"","ucode":"C9BB0D40086FB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374198,"discussion_content":"https://android.googlesource.com/platform/frameworks/support/+/a9ac247af2afd4115c3eb6d16c05bc92737d6305/coordinatorlayout/src/main/java/androidx/coordinatorlayout/widget/CoordinatorLayout.java\n\n有向无环图(DAG) 源代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621061608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76938,"discussion_content":"哈哈，为何你这么牛逼，场景对应的比较贴切，也是平时思考的多呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575869862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234584,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/98/e2d8f2a9.jpg","nickname":"zzq","note":"","ucode":"03FE20B812D15D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52550,"discussion_content":"为什么 你这么牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574065485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563973,"avatar":"https://static001.geekbang.org/account/avatar/00/17/dd/45/dd79456e.jpg","nickname":"日拱一卒","note":"","ucode":"ED64819DA04EBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47212,"discussion_content":"为何你这么强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573295314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154827,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9f/0b/a31d1b8f.jpg","nickname":"twjLL","note":"","ucode":"59C42A89B78E5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29001,"discussion_content":"🐮👃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570722394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272047,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","nickname":"Magic","note":"","ucode":"FD9CEDAA419EB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18254,"discussion_content":"因为坚持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569036832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8405,"discussion_content":"为何总是遇见你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567997484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29624,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570776877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8405,"ip_address":""},"score":29624,"extra":""},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29625,"discussion_content":"主要我太菜了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570776893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8405,"ip_address":""},"score":29625,"extra":""},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29626,"discussion_content":"要学的太多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570776903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8405,"ip_address":""},"score":29626,"extra":""}]}]},{"had_liked":false,"id":46198,"user_name":"黄金的太阳","can_delete":false,"product_type":"c1","uid":1105079,"ip_address":"","ucode":"9D7F2397124AB9","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/b7/e59c22f0.jpg","comment_is_top":false,"comment_ctime":1543883334,"is_pvip":false,"replies":[{"id":"16519","content":"1 内存中用临界表<br>2 要持久化存储就用数据库<br>2 超大图 并且涉及大量图计算。用专业的图数据库","user_name":"作者回复","comment_id":46198,"uid":"1190123","ip_address":"","utype":1,"ctime":1543887303,"user_name_real":"gg"}],"discussion_count":5,"race_medal":0,"score":"559889631814","product_id":100017301,"comment_content":"请教老师<br>解决现实问题的时候当存储图有多种选择，例如:<br>1.用邻接表自己存<br>2.关系型库<br>3.图数据库<br>那么这三种方式每一种的适用场景，优缺点分别是什么呢？该如何取舍","like_count":131,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431370,"discussion_content":"1 内存中用临界表\n2 要持久化存储就用数据库\n2 超大图 并且涉及大量图计算。用专业的图数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543887303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84023,"discussion_content":"Neo4j","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576481927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2204462,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IY4fLqdVwCPlW7xJicz3nZm4OePT0o20tDZj1Hiauk2b0iaHMQcSOGpamLt9b72hYVG72sgRWic1BHY3uCvibWcfickw/132","nickname":"Grocker","note":"","ucode":"DF2E19A65DEAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318625,"discussion_content":"这个之前还专门调研过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603792836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":84023,"ip_address":""},"score":318625,"extra":""}]},{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333184,"discussion_content":"图数据库arangodb比neo4j感觉要好用，还支持分布式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607475907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76939,"discussion_content":"em  图数据库。。。没听过还","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575869915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44960,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1543535382,"is_pvip":false,"replies":[{"id":"16030","content":"👍","user_name":"作者回复","comment_id":44960,"uid":"1190123","ip_address":"","utype":1,"ctime":1543542708,"user_name_real":"gg"}],"discussion_count":5,"race_medal":0,"score":"482579872534","product_id":100017301,"comment_content":"课后思考题：<br>1. 微信好友关系存储方式。无向图，也可以使用邻接表的方式存储每个人所对应的好友列表。为了支持快速查找，好友列表可以使用红黑树存储。<br>2. 生活工作中应用图的例子。很多，互联网上网页之间通过超链接连接成一张有向图；城市乃至全国交通网络是一张加权图；人与人之间的人际关系够成一张图，著名的六度分割理论据说就是基于这个得到的。","like_count":112,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430877,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043172,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/e4/4c718856.jpg","nickname":"Aleck","note":"","ucode":"C952990B697C40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1794,"discussion_content":"我认为按照微信的使用场景，大部分好友关系已经存储在本地，仅存在少数的更新，所以微信的好友关系可以直接存储在数据库中，在重新登陆微信的时候再次进行查询","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1562915577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/00/2f/2dc67e2b.jpg","nickname":"°Ｍagic","note":"","ucode":"65032B194C6281","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377200,"discussion_content":"微信输出的好友列表也是按照拼音首字母排序的，应该使用邻接表加跳表好一些","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622546208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249745,"discussion_content":"不太懂，我的邻接表有你，你的邻接表有我，那不还是重复存储了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587958664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2282960,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d5/d0/97c8dc32.jpg","nickname":"大西几吃小兔兔","note":"","ucode":"44D75626C6DB57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347848,"discussion_content":"是重复存储，不过是为了方便反向查询，而且空间复杂度还是O(n)。邻接矩阵是O(n^2)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612339805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249745,"ip_address":""},"score":347848,"extra":""}]}]},{"had_liked":false,"id":65722,"user_name":"微418信Im团a队teapot","can_delete":false,"product_type":"c1","uid":1235157,"ip_address":"","ucode":"A03D68B203CD16","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d5/5ba3062e.jpg","comment_is_top":false,"comment_ctime":1549604115,"is_pvip":false,"replies":[{"id":"24288","content":"哈哈，在这个问题上，从你的昵称来看，你最有发言权了。","user_name":"作者回复","comment_id":65722,"uid":"1190123","ip_address":"","utype":1,"ctime":1550542213,"user_name_real":"gg"}],"discussion_count":6,"race_medal":0,"score":"400981562643","product_id":100017301,"comment_content":"微信也是有向图吧……微信单方面删除好友之后另一方仍然会显示在好友列表中的啊(俗称僵尸)","like_count":94,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438565,"discussion_content":"哈哈，在这个问题上，从你的昵称来看，你最有发言权了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550542213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1981613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","nickname":"Geek_ac7784","note":"","ucode":"62F0E5E6D6F4BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264372,"discussion_content":"我觉得不是。邻接表是你的链表里面是你的好友。添加朋友是互相添加，所以你的链表和它的链表都加了。僵尸好友别人是删除你时，只在他的链表中把你踢出了，你的链表里还有它。我感觉这是微信设计的问题。毕竟你也联系不上僵尸好友，所以也算不上单向。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1589299199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1873629,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","nickname":"simple_孙","note":"","ucode":"A77203E242D652","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401158,"discussion_content":"新手机登陆微信还是有之前的僵尸好友，说明不是本地存储的问题，可能是数据库里有一个好友关系的标志位，加载好友关系到内存的邻接表表时会考虑这个标志位，所以不能再发消息等等。但是下载通讯录列表时是从数据库不考虑标志位加载的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1633580847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2194077,"avatar":"https://static001.geekbang.org/account/avatar/00/21/7a/9d/3cf16f3f.jpg","nickname":"超级绿兔子.高清复刻版","note":"","ucode":"19397CA1989969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317293,"discussion_content":"个人认为无向图就可以了 你被删除后只有你本地认为对方仍然是你的好友","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603530070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2023521,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ78AcrbfXwxfgJdqsAe3InbC8aSCY3iaYNdJ4Y2yqe7icgUPdrJ8noXiaTWkwIYu2nULLSxvWTAJS5A/132","nickname":"黄振江","note":"","ucode":"870EB603019E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305403,"discussion_content":"这个问题，会不会与微信数据本地化存储有关，就是说别人把自己删除好友时，服务端已经把无向图关系删除了，自己手机上还能看到只是因为没有主动更新被删用户的手机本地存储的关系，只有在与这个人发信息时，才会从服务端查询无向图数据。\n没有考证，纯属猜测。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599910346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037714,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/17/d2/68cdbd75.jpg","nickname":"海狮","note":"","ucode":"18FDDF5841F282","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302991,"discussion_content":"我也觉得应该是无向图。因为微信并没有粉丝列表的功能，数据结构是为算法服务的，既然微信不用实现粉丝列表的功能，那么就没必要使用有向图，所以具体的存储结构应该就只维护一个邻接表就够了，而不用像有向图那样还需要维护逆邻接表，理论上存储也减少了少一半","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599105197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47303,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1544103534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"340846519918","product_id":100017301,"comment_content":"真心感谢王老师，以前看见数据结构和算法都直接略过，感觉很难啃直接就放弃了，不求甚解，经过这段时间得学习发现自己还是可以学的会的，而且也慢慢喜欢看这些数据结构了，老师的功力真的很深厚！","like_count":79},{"had_liked":false,"id":137582,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1569801872,"is_pvip":false,"replies":[{"id":"53096","content":"我6点左右起来😂","user_name":"作者回复","comment_id":137582,"uid":"1190123","ip_address":"","utype":1,"ctime":1570027055,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"263562806928","product_id":100017301,"comment_content":"早上没事看一篇打个卡，争哥，您早上几点起床啊，感觉您平时回复好早！","like_count":61,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469162,"discussion_content":"我6点左右起来😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570027055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45534,"user_name":"花见笑","can_delete":false,"product_type":"c1","uid":1219485,"ip_address":"","ucode":"8A5122BC11E695","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/9d/d487c368.jpg","comment_is_top":false,"comment_ctime":1543663766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"216292028566","product_id":100017301,"comment_content":"学到现在有一种特别明显的感受就是描述一种需求模型可以有很多种组合数据结构，而这些复杂数据结构都是基础数据结构组合起来的，而这些数据结构去的选择又是基于需求模型对时间和空间这两个维度来的，所以解决问题的关键是我们都需求的理解以及我们对数据结构的熟练运用。","like_count":50},{"had_liked":false,"id":45142,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1543549744,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"173342241584","product_id":100017301,"comment_content":"刚刚还在写Topology Sort，就是leetcode那个给课程先后顺序排列的题。我还知道社交Graph在推荐系统中应用非常广泛（腾讯的人亲口说这是他们很多产品的最大亮点，因为可以做社交）。使用了social trust的推荐系统非常的robust且能够经受大规模水军的攻击，因为水军无法取得用户的trust（graph中无法建立联系），所以水军的行为在推荐系统中会被认为对给用户的影响会非常的小，使得系统的预测基本不变。","like_count":40,"discussions":[{"author":{"id":2198755,"avatar":"https://static001.geekbang.org/account/avatar/00/21/8c/e3/b9e926f9.jpg","nickname":"面罩","note":"","ucode":"E85F2550D7C6D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392810,"discussion_content":"中英混杂，看不懂说啥📉","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631148801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2048811,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/43/2b/682580a8.jpg","nickname":"李","note":"","ucode":"8D32DE5A4E69A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296041,"discussion_content":"类似pagerank吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596437389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2036705,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/13/e1/6939ae4f.jpg","nickname":"knight劉先生","note":"","ucode":"CEE9BFC8D3D969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287535,"discussion_content":"可以详细说说吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593477956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":45921,"user_name":"鹏程万里","can_delete":false,"product_type":"c1","uid":1114675,"ip_address":"","ucode":"5E23BBEC9E8209","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/33/57678ea3.jpg","comment_is_top":false,"comment_ctime":1543818610,"is_pvip":false,"replies":[{"id":"16536","content":"好像是的 第二个应该是 判断a是否被b关注","user_name":"作者回复","comment_id":45921,"uid":"1190123","ip_address":"","utype":1,"ctime":1543888456,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"113212968306","product_id":100017301,"comment_content":"判断用户 A 是否关注了用户 B； 判断用户 A 是否是用户B的粉丝。这两个操作我怎么觉得是一个意思呢？","like_count":26,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431270,"discussion_content":"好像是的 第二个应该是 判断a是否被b关注","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543888456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46552,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1543935205,"is_pvip":false,"replies":[{"id":"16666","content":"👍","user_name":"作者回复","comment_id":46552,"uid":"1190123","ip_address":"","utype":1,"ctime":1543974024,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"91738248421","product_id":100017301,"comment_content":"第1题：使用邻接表存储，并且使用改进升级版（使用跳表或散列表等）<br>第2题：1）我司所开发的工作流项目描述的就是有向图。2）小到公交车&#47;地铁网络图，大到国家的铁路分布图。3）韩国偶像局，人物之间的暗恋关系。4）ETL跑批时，各JOB之间的依赖关系。。。等等等等太多了","like_count":21,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431479,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543974024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263212,"discussion_content":"韩国偶像剧这个厉害了😂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589188325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44929,"user_name":"姜戈","can_delete":false,"product_type":"c1","uid":1058972,"ip_address":"","ucode":"45C4BE93C8E4CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/9c/73e76b19.jpg","comment_is_top":false,"comment_ctime":1543509810,"is_pvip":false,"replies":[{"id":"16032","content":"数据有序排列的动态数组","user_name":"作者回复","comment_id":44929,"uid":"1190123","ip_address":"","utype":1,"ctime":1543542744,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"83147888434","product_id":100017301,"comment_content":"有序动态数组能否讲解一下","like_count":19,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430862,"discussion_content":"数据有序排列的动态数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663211,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a3/2b/d8dc328f.jpg","nickname":"姗姗","note":"","ucode":"AB92B9E401A976","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386433,"discussion_content":"第一反应是平衡二叉查找树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627573597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45229,"user_name":"ppingfann","can_delete":false,"product_type":"c1","uid":1242999,"ip_address":"","ucode":"38DE7D2F6D22E4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo435IStLENgI45dWOow9gPDh8RcqvuCOLp30XqLJK3wqmwO7QKRLx8sMg9eucMKnJdjwickrAQMBw/132","comment_is_top":false,"comment_ctime":1543563034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74558007066","product_id":100017301,"comment_content":"微信社交关系的存储方式<br><br>因为顶点的数量大且关系相对少，所以不适合用邻接矩阵来存储，应该用邻接表来存储。<br>微信社交关系的相关操作：1. 判断A、B是否为好友关系 2. A删除B，断开与B的好友关系 3. 展示出A的所有好友，并按名称首字母进行排序<br><br>因为是无向图，所以我们仅需要一个邻接表就行了，然后将链表改造为跳表增加查找速度且在列出好友是会比较方便。最后，若有n台机器可供使用，那么我们可以对n取余来划分这些数据到不同的机器上，毕竟微信的用户量太大，一个机器的内存应该是不够用的。","like_count":17},{"had_liked":false,"id":168996,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1578234952,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"48822875208","product_id":100017301,"comment_content":"一：如何理解“图”<br>1，图和树一样都是非线性表数据结构，和树不同的是图是一种更加复杂的非线性表结构<br>2，树中的元素称之为节点，图中的元素则称之为顶点。<br>3，顶点可以与任意其他顶点建立关联，这种建立的关系叫做边，与顶点相连接的条数叫做顶点的度。<br>4，图可以分为有向图和无向图两种，有向图的边有方向。<br>5，在有向图中，度可以分为入度和出度（Out-degree）<br>6，带权图：在带权图中，每条边都有一个权重<br><br>\t二：邻接矩阵存储方法<br>1，图最直观的一种存储方法是：邻接矩阵（Adjacency Matrix），邻接矩阵的底层依赖一个二维数组。<br> <br>\t\t2，用邻接矩阵来表示一个图，虽然简单，直观，但是浪费存储空间。<br>①：对于无向图的二维数组中，如果将其对角线划分为上下两部分，那我们只需要利用上面或者下面这样的一半的空间就足够了，另一半白白浪费掉了。<br>②：若存储的是稀疏图（Sparse Matrix），即顶点很多，但每个顶点的边并不多，那邻接矩阵的存储方法就更加浪费空间了。<br>\t\t3，用邻接矩阵存储的优点：<br>①：存储方式简单，直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效。<br>②：其次是计算方便。因为，可以将很多图的运算转换成矩阵之间的运算。如求解最短路径问题时会提到一个Floyd-Warshall算法，就是利用矩阵循环相乘若干次得到结果。<br>三：邻接表存储方法<br>1，邻接表（Adjacency List）可以解决邻接矩阵存储方式比较浪费内存空间的问题<br>2，<br> <br><br>3，邻接矩阵存储起来比较浪费空间，但使用比较节省时间，邻接表存储与之相反。<br>\t如图中，如果要确定是否存在从顶点2到顶点4的边，就需要遍历顶点2对应的链表，看那条链表中是否存在顶点4。但链表的存储方式对缓存不友好。<br>4，我们可以将邻接表中国的链表改成平衡二叉查找树，实际开发中国还可选用红黑树。这样可以快速查找两个顶点之间是否存在边了。<br>\t\t<br>五：图的应用<br>\t如何存储微博，微信等社交网络中的好友关系？<br>\t1，微博，微信是两种“图”，前者是有向图，后者是无向图。<br>\t2，数据结构是为算法服务的，所以具体选择哪种存储方法，与期望支持的操作有关系。针对微博的用户关系，需要支持：<br>\t判断用户A是否关注了用户B;<br>\t判断用户A是否是用户B的粉丝<br>\t用户A关注用户B；<br>\t用户A取消关注用户B；<br>\t根据用户名称的首字母排序，分页获取用户的粉丝列表；<br>\t根据用户名称的首字母排序，分页获取用户的关注列表。<br>3，因为社交网络是一张稀疏图，使用邻接矩阵存储比较浪费存储空间，所以使用邻接表来存储。<br>4，但用一个邻接表来存储这种有向图是不够的，查找某个用户关注了哪些用户非常容易，但是如果想要知道某个用户都被哪些用户关注了，是非常困难的。<br>5，因此，需要一个逆邻接表。邻接表中存储了用户的关注关系，逆邻接表中存储的是用户的被关注关系。<br>6，对应到图上，邻接表中，每个顶点的链表中，存储的就是这个顶点指向的顶点，逆邻接表中，每个顶点的链表中，存储的是指向这个顶点的顶点。<br>","like_count":11},{"had_liked":false,"id":45092,"user_name":"任雪龙","can_delete":false,"product_type":"c1","uid":1126708,"ip_address":"","ucode":"E0D5F4DDB729D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/34/ba1c8fc7.jpg","comment_is_top":false,"comment_ctime":1543545083,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40198250747","product_id":100017301,"comment_content":"终于到图了，感觉有点小激动呢","like_count":9,"discussions":[{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8408,"discussion_content":"为何激动，是意味着快学习完的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567998280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564431,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/0f/0c483c62.jpg","nickname":"黑夜的骑士","note":"","ucode":"1351B67A3D2C3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6461,"discussion_content":"哈哈，我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566910505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217940,"user_name":"John","can_delete":false,"product_type":"c1","uid":1020861,"ip_address":"","ucode":"E4ADF8488953FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/bd/f3977ebb.jpg","comment_is_top":false,"comment_ctime":1589674987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31654446059","product_id":100017301,"comment_content":"坚持到现在的都是勇士, 为我们点赞!","like_count":7},{"had_liked":false,"id":52174,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1545324648,"is_pvip":false,"replies":[{"id":"18984","content":"因为边少 对应到矩阵里就都是0","user_name":"作者回复","comment_id":52174,"uid":"1190123","ip_address":"","utype":1,"ctime":1545356956,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"31610095720","product_id":100017301,"comment_content":"稀疏图那块没看懂，为何存稀疏图浪费空间呢？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433769,"discussion_content":"因为边少 对应到矩阵里就都是0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545356956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117676,"user_name":"xu晓晨","can_delete":false,"product_type":"c1","uid":1513945,"ip_address":"","ucode":"EE0374EB48FBDC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKoTDBX4a5u3Oc0zDpKDp6UbcYDcwAJXfBSmicqQwoyxaoVLEWzjIoUqYBiaDJHAYkO8icLtXqk4ibqKg/132","comment_is_top":false,"comment_ctime":1564109884,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27333913660","product_id":100017301,"comment_content":"以前做过粉丝关系的一个项目，当时用的是redis的zset的存储的好友关系。redis的zset底层就是跳表实现的。和老师讲的东西不谋而合","like_count":6,"discussions":[{"author":{"id":1143677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/73/7d/c3e282a4.jpg","nickname":"糊糊","note":"","ucode":"148D5E73B0AEA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588693,"discussion_content":"思路是给每个用户建两个zset吗？关注和被关注。数量少还好，如果关注数或粉丝数过多，zset会不会影响redis的性能呢？可能1个key就几十万个元素了，上G的大小，肯定不行了。这种情况怎么解决的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664006321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581573,"discussion_content":"哈哈，我没做过。但是review过别人的代码。也是用的zset","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658845995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574501,"discussion_content":"我也做过类似的项目，感受很深！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654089870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99410,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1559209556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27329013332","product_id":100017301,"comment_content":"图只是逻辑上的一个概念，把实体的关系反映在一张图上，实际储存等操作本质上还是数组+链表，因此优化手段也就是前面所讲到的散列、二叉平衡查找树、跳表等","like_count":6},{"had_liked":false,"id":52765,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1545509350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23020345830","product_id":100017301,"comment_content":"复杂网络可以说也是基于图，抽象出来的随机网络、小世界网络、无标度网络等都可以用图表示；根据图的组成基本要素：节点和边，现实世界中只要可以将具体的事物抽象出节点，并且节点之间是有联系的，那么应该都可以成为图；比如以城市机场作为节点，城市之间的航班飞行网络；...","like_count":5},{"had_liked":false,"id":45575,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1543684423,"is_pvip":false,"replies":[{"id":"16365","content":"实际上 我们并不需要显示的存储边 具体存储方式你可以看下一节课开头的代码","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543802561,"ip_address":"","comment_id":45575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23018520903","product_id":100017301,"comment_content":"微信的用户无向图中，首先为了节约空间，采用的要是邻接表的方式，由于数据量巨大，进一步关于存储的优化和老师文中记述的类似。<br>图的数据结构相对其他数据结构而言是更加贴合生活场景的，事物和联系的信息可以映射为节点和边，例如百度在地图中的寻路功能应该是要利用到节点和边权重等方面的信息，期待老师对图的用法做更深入的讲解。<br>最后我希望提一个关于邻接表的问题，文中邻接表中，‘节点’指向的是下一个‘节点’的信息，那么‘边’的信息应该如何保存？要是‘节点’指向的是‘边’的信息，‘边’自己又包含另一头‘节点’的下标，这样的存储方式虽然不是很直观，但是也是一种有效的存储方式。老师是否可以就‘邻接表’上‘边’的存储讲解一下？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431102,"discussion_content":"实际上 我们并不需要显示的存储边 具体存储方式你可以看下一节课开头的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543802561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283417,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1615776164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18795645348","product_id":100017301,"comment_content":"2021再刷，老师讲得很好","like_count":4},{"had_liked":false,"id":53507,"user_name":"想当上帝的司机","can_delete":false,"product_type":"c1","uid":1239378,"ip_address":"","ucode":"D8251388854911","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/52/f07e9001.jpg","comment_is_top":false,"comment_ctime":1545660204,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18725529388","product_id":100017301,"comment_content":"感觉最后数据库中那张表用起来就能满足需求了，上面说的图的优势是什么呢 ","like_count":4,"discussions":[{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302698,"discussion_content":"我理解这种社交关系实际都会采用数据库中的邻接表存储，因为他们并不是一直要访问的（只有用户请求对应页面时才会访问），只有持续动态变化的数据且需要不断访问更新的，才会在内存中维护一份，但同时也要做好持久化同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599011611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":95239,"discussion_content":"你的疑问我也有同感，我觉得优势在于，数据库只能持久化到磁盘中，而使用邻接表的话，可以在内存中使用更高效的搜索策略如红黑树。\n但我的疑问是，当数据量很大时，是会选择数据库存储呢还是选择在多台机器上使用邻接表去实现呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577018242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45531,"user_name":"yongxiang","can_delete":false,"product_type":"c1","uid":1082351,"ip_address":"","ucode":"16D826814D4C4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/ef/445e1421.jpg","comment_is_top":false,"comment_ctime":1543662223,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"18723531407","product_id":100017301,"comment_content":"问题一：<br>微信好友：<br>1、微信的好友关系是稀疏矩阵，为了减少空间浪费，使用邻接表；<br>2、为了提高查找效率，将邻接表中的链表改为支持快速查找的动态数据结构，这里使用红黑树、跳表都可以，考虑到好友列表是按照字母排序的，可以使用跳表<br>问题二：<br>图的例子还有：操作系统的资源分配图是有向图，用来分析死锁问题。","like_count":4},{"had_liked":false,"id":44970,"user_name":"不靠谱的琴谱","can_delete":false,"product_type":"c1","uid":1243964,"ip_address":"","ucode":"D388EDFD6E5F8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/3c/e92d40f6.jpg","comment_is_top":false,"comment_ctime":1543536596,"is_pvip":false,"replies":[{"id":"16028","content":"adj行列都是从1开始的。我检查了一下 好像没画错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542657,"ip_address":"","comment_id":44970,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18723405780","product_id":100017301,"comment_content":"有向图的矩阵下标2 0和3 2的1和0感觉画反了，还有带权图线上面表示的是5矩阵里面表示的5 3不是很理解","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430883,"discussion_content":"adj行列都是从1开始的。我检查了一下 好像没画错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134489,"user_name":"Bufan","can_delete":false,"product_type":"c1","uid":1387704,"ip_address":"","ucode":"A5EC0391C412DE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eriaIgoPa8abNTaUm7o6oa6mvL9iagRTdD1vhovWPyfiaS82f409Sz3kMFzYLNa4ibnHagA7M33l8XnIQ/132","comment_is_top":false,"comment_ctime":1568855088,"is_pvip":false,"replies":[{"id":"51690","content":"可以的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568933611,"ip_address":"","comment_id":134489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453756976","product_id":100017301,"comment_content":"老师，图的这种数据结构用mysql就可以存储是吧？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467769,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568933611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63172,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1302022,"ip_address":"","ucode":"F69F932FA8156D","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/06/3402bd19.jpg","comment_is_top":false,"comment_ctime":1548293314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14433195202","product_id":100017301,"comment_content":"有向图我觉得画反了，如果按照作者的描述，3-&gt;1的值在矩阵表示应该是adj［3］［1］=1","like_count":3},{"had_liked":false,"id":57848,"user_name":"Gnayils","can_delete":false,"product_type":"c1","uid":1098636,"ip_address":"","ucode":"EFE152D1A91707","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8c/bd586a8d.jpg","comment_is_top":false,"comment_ctime":1546928007,"is_pvip":false,"replies":[{"id":"21855","content":"需要先把a、f、e等转化成1、2、3....这样的编号，然后用邻接矩阵中的值来表示关系。比如，1表示有关系，0表示没关系。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547709107,"ip_address":"","comment_id":57848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14431829895","product_id":100017301,"comment_content":"以本章的第一张图片为例，一直没太明白如果顶点A和顶点F之间有关系，或者顶点A和顶点E之间有关系，那么使用邻接矩阵该如何表示这种关系呢？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435788,"discussion_content":"需要先把a、f、e等转化成1、2、3....这样的编号，然后用邻接矩阵中的值来表示关系。比如，1表示有关系，0表示没关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547709107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45043,"user_name":"我的心里只有工作","can_delete":false,"product_type":"c1","uid":1238185,"ip_address":"","ucode":"488DD6F9590EB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/a9/117fe480.jpg","comment_is_top":false,"comment_ctime":1543541242,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14428443130","product_id":100017301,"comment_content":"咋感觉最后变成了散列表➕红黑树➕跳表","like_count":3,"discussions":[{"author":{"id":1390375,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","nickname":"kaiser","note":"","ucode":"F9438786E9A57B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255388,"discussion_content":"java 中感觉就变成了 Map<String, TreeSet<String>> 这种格式表示图了，String 是用户 id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588396049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45014,"user_name":"Infinite_gao","can_delete":false,"product_type":"c1","uid":1235607,"ip_address":"","ucode":"9FBFEDED8790A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","comment_is_top":false,"comment_ctime":1543539518,"is_pvip":false,"replies":[{"id":"16022","content":"就是数据集合中的数据不停的在变动 会有频繁的插入 删除操作","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542292,"ip_address":"","comment_id":45014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14428441406","product_id":100017301,"comment_content":"怎么理解动态数据结构，相对应的静态数据结构呢？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430895,"discussion_content":"就是数据集合中的数据不停的在变动 会有频繁的插入 删除操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155436,"user_name":"Say Cheese","can_delete":false,"product_type":"c1","uid":1753485,"ip_address":"","ucode":"97EEE6930424C5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c1/8d/c8989e32.jpg","comment_is_top":false,"comment_ctime":1574689059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164623651","product_id":100017301,"comment_content":"只讲概念没有代码可能还是很难吧","like_count":2},{"had_liked":false,"id":117445,"user_name":"葵花老师傅","can_delete":false,"product_type":"c1","uid":1234221,"ip_address":"","ucode":"367FDEA57C675B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/2d/bd28a5bc.jpg","comment_is_top":false,"comment_ctime":1564048038,"is_pvip":false,"replies":[{"id":"43284","content":"即便是两次操作，操作成本稍微高了点，但时间复杂度并没有变大。最优解？这个本身就不存在什么最优解呢？要根据具体业务场景来看。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564266929,"ip_address":"","comment_id":117445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10153982630","product_id":100017301,"comment_content":"对于课后习题的第一题：<br>对于无向图的存储使用邻接表存储的时候，如果出现要去除两个顶点间的边的话，是不是得操作两次呢？<br>然后看到评论的大神们邻接表的链表使用能支持快速查询的数据结构如红黑树、散列表等结构，这样的话可能在进行修改，删除操作的时候的消耗会不会随之增加。 如果按这个来说无向图使用邻接表会不会是一个最优的解呢。 本人愚昧 暂时没想到更好的办法- -","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459974,"discussion_content":"即便是两次操作，操作成本稍微高了点，但时间复杂度并没有变大。最优解？这个本身就不存在什么最优解呢？要根据具体业务场景来看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87190,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1555546760,"is_pvip":false,"replies":[{"id":"31495","content":"不啊，两种不同的存储模式。一种是存在内存中，一种是存储在外部存储设备中，如磁盘。两个不搭嘎。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555639993,"ip_address":"","comment_id":87190,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10145481352","product_id":100017301,"comment_content":"留言算是比较晚的吧，文章的前面讲了可以使用邻接矩阵，邻接表来存储图，在讲案例分析的时候又说了使用持久化的方式来存储微博的关注关系。我的问题是，邻接矩阵(邻接表)这两种的使用场景是，系统会维护这样的一个数据结构用来存储人物的关系，而这个结构的数据来源还是从持久化设备上来的？可以这么理解吗？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447340,"discussion_content":"不啊，两种不同的存储模式。一种是存在内存中，一种是存储在外部存储设备中，如磁盘。两个不搭嘎。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555639993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042983,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","nickname":"Shanks-王冲","note":"","ucode":"C4B90A17850E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294564,"discussion_content":"这大概是，突然争哥提了另外一个更贴近实际的解决方法，才引出大家有数据库方面的疑问吧。一般数据结构和算法都是基于内存中的数据来说的；即使，你有100个文件，在有限的内存限制下，也需要依次读入内存中，才能使用对应的数据结构与算法，加以处理。take it easy！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595929414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72791,"user_name":"刘涛涛","can_delete":false,"product_type":"c1","uid":1396130,"ip_address":"","ucode":"D2EE76FA0BB1C5","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/a2/9450ef89.jpg","comment_is_top":false,"comment_ctime":1551717403,"is_pvip":false,"replies":[{"id":"26412","content":"这里讲的都是存储在内存中的情况。存储在数据库中，可以使用邻接矩阵的存储方法。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551753117,"ip_address":"","comment_id":72791,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10141651995","product_id":100017301,"comment_content":"请问老师，邻接表在数据库的存储方式是什么样的呢","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441747,"discussion_content":"这里讲的都是存储在内存中的情况。存储在数据库中，可以使用邻接矩阵的存储方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551753117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042983,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","nickname":"Shanks-王冲","note":"","ucode":"C4B90A17850E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294565,"discussion_content":"这大概是，突然争哥提了另外一个更贴近实际的解决方法，才引出大家有数据库方面的疑问吧。一般数据结构和算法都是基于内存中的数据来说的；即使，你有100个文件，在有限的内存限制下，也需要依次读入内存中，才能使用对应的数据结构与算法，加以处理。take it easy！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595929423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47965,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1544269440,"is_pvip":false,"replies":[{"id":"17174","content":"还可以用二元组只存储边","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407494,"ip_address":"","comment_id":47965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134204032","product_id":100017301,"comment_content":"这种稀疏矩阵的数据，无向图用邻接表存储省内存。除了邻接矩阵和邻接表之外，有没有更好的存储方式呢？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431963,"discussion_content":"还可以用二元组只存储边","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45031,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1543540728,"is_pvip":false,"replies":[{"id":"16018","content":"有的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542128,"ip_address":"","comment_id":45031,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10133475320","product_id":100017301,"comment_content":"有没有可能存在有向图也加权的类型","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430902,"discussion_content":"有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2278126,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/7bq9uVY5BUF6M5beOUJ2CsZbuyPuoZIjBdxBkc57WF7ibBmSEkpffWFqSz6wjhSNW9vUuf3GK10xHW2QF5iaBD4Q/132","nickname":"Geek_125fab","note":"","ucode":"3855B652AECF03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344088,"discussion_content":"粉丝给主播刷礼物，亲密度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611286498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339709,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1648304503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943271799","product_id":100017301,"comment_content":"图：顶点，边，度，有向图，无向图，出度，入度<br>存储方式：<br>临接矩阵：操作效率高，操作方便，浪费空间<br>临接表：节省空间，链表，动态数组，红黑树，跳表","like_count":1},{"had_liked":false,"id":312373,"user_name":"Liujun","can_delete":false,"product_type":"c1","uid":1736462,"ip_address":"","ucode":"3DB1F3CA57B5B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","comment_is_top":false,"comment_ctime":1631779162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926746458","product_id":100017301,"comment_content":"微服务之间的调用链也是一个图","like_count":1},{"had_liked":false,"id":305461,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1627981569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5922948865","product_id":100017301,"comment_content":"微信的实现比微博的简单，将关注与被关注统一成是否好友，其他类似，这样就不需要逆邻接表了","like_count":1},{"had_liked":false,"id":246792,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1599478520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894445816","product_id":100017301,"comment_content":"一<br>答：使用领接表，顶点表示一个用户，顶点的链表存储用户的好友，加好友时，双方的顶点链表都加入对方，删除好友也是双方顶点链表删除对方<br><br>二：<br>1.地图；","like_count":1},{"had_liked":false,"id":221829,"user_name":"你在不远的未来","can_delete":false,"product_type":"c1","uid":1318404,"ip_address":"","ucode":"5B34C8BD03B71A","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","comment_is_top":false,"comment_ctime":1590597824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885565120","product_id":100017301,"comment_content":"概念<br>顶点：图中的元素叫做节点<br>边：顶点与顶点之间的连接叫做边<br>度：某个顶点之间的连接数<br>无向图：一个图中所有顶点之间的关系存在相互关系，叫做无相图。<br><br>有向图：一个图中所有的顶点的关系存在单向关系或者双向关系，叫做有向图。<br>出度：有向图中，从某个顶点出发指向其他顶点，叫做出度。<br>入度：有向图中，从其他顶点出发指向某个顶点，对于此顶点，叫做入度。<br><br>带权图：一个图中，边关系中存在权重概念的图，叫做带权图。<br><br><br>存储方式<br>邻接矩阵：以二维表存储图，无向图中若i、j存在度，a[i][j]、a[j][i]都标记为1；有向图中i存在于j的入度，则a[i][j]标记为1。<br>邻接表：解决邻接矩阵数据存储大且浪费的问题，以散列表存储顶点，散列槽存储顶点的度（无向图）或者出度（有向图）。<br>逆邻接表：解决邻接表存储有向图顶点出度查询方便，但顶点入度查询困难，所以额外添加一个关于顶点的入度邻接表，称为逆邻接表。<br><br>课后思考：<br>1. 将微博的有向图转化为无向图。使用邻接表存储存储图，避免内存浪费。另外考虑到大数据量，对顶点进行hash，将图数据或者持久化之后的db数据以分片形式存储于多台服务器。<br>2. 现实中暗恋关系是有向图，情侣关系是无向图，开个玩笑，🙂；maven引用应该是有向图，数仓中的血源管理也是有向图。时间不早了，晚安~~~~~","like_count":1},{"had_liked":false,"id":219421,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590024172,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5884991468","product_id":100017301,"comment_content":"用社交网络来解释图的各种各样概念，的确和浅显易懂。<br><br>微信：互加好友 → 边，好友个数 → 度<br>微博：A 关注 B，B 不关注 A → 有向边（有向图），粉丝 → 入度，关注 → 出度<br>QQ：用户亲密度 → 权重，带权图<br><br>在解答开篇的“如何存储微博、微信等这些社交网络的好友关系”的问题时，答案已经变得有些复杂了，同时也是前面章节的一个回顾。<br><br>用邻接表来存储用户关注了哪些用户；用逆邻接表存储被关注关系；用跳表完成按用户名称的首字母排序，分页获取用户的粉丝列表或者关注列表；用哈希算法将数据分片存储在不同的机器上；另外还可以用数据库（外部存储）来存一张冗余的用户关系表。<br><br>微信如果仅存储聊天的好友关系，那么应该是无向图；如果考虑到朋友圈的可见或者不可见，那么也就变成了有向图。<br><br>就好友关系的无向图来说，仍然可以使用邻接表来存储好友关系，逆邻接表就不需要了；同样可以使用跳表来排序；用哈希算法分片；数据库的冗余关系表，应该也可以用。<br><br>印象里面，目前比较火热的图的应用应该就是社交网络加上知识图谱，以前似乎还有路径规划，不知道算不算。","like_count":1},{"had_liked":false,"id":169876,"user_name":"xxxxL","can_delete":false,"product_type":"c1","uid":1129309,"ip_address":"","ucode":"F84BB5ACD1241E","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/5d/15c4817a.jpg","comment_is_top":false,"comment_ctime":1578467098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873434394","product_id":100017301,"comment_content":"azkaban任务调度，把有相互依赖关系的任务组织成有向图","like_count":1},{"had_liked":false,"id":137337,"user_name":"等待","can_delete":false,"product_type":"c1","uid":1255162,"ip_address":"","ucode":"687A6BB673414E","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","comment_is_top":false,"comment_ctime":1569718066,"is_pvip":false,"replies":[{"id":"53771","content":"微博肯定是持久化存储到数据库的，红黑树结构不会存储到数据库的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570661334,"ip_address":"","comment_id":137337,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5864685362","product_id":100017301,"comment_content":"所以，微博或者微博的用户是怎么存储的呢？<br>最基本可能是 邻接表+逆邻接表 吗？<br>其次是，将邻接表和逆邻接表的链表部分改为红黑树吗？<br><br>还有一个问题就是，如果数据需要持久化（肯定要做的），以mysql为例，如何将邻接表存储的呢？<br>深程度一些的，如何存储 红黑树的呢？<br><br>希望作者大大可以回答下，数据结构和持久化之间转化不懂，看着有点儿晕了。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469039,"discussion_content":"微博肯定是持久化存储到数据库的，红黑树结构不会存储到数据库的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570661334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","nickname":"等待","note":"","ucode":"687A6BB673414E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37063,"discussion_content":"谢谢回答，不过还是搞不懂，红黑树这种在内存才能操作的东西，在持久化到数据库的时候的保存形式是怎么样的。\n换句话说，在软件开发中，不会使用数据结构。软件开发主要是增、删、改、查，数据库保存是mysql时候，是二维表的形式。没有红黑树之类的东西，不知道如何使用上去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571492023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1526406,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/86/3cd4144e.jpg","nickname":"宪成小哥","note":"","ucode":"7C1A4F25ACCB4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1255162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","nickname":"等待","note":"","ucode":"687A6BB673414E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394342,"discussion_content":"不管是红黑树，还是图，还是队列等等抽象的数据结构，在内存中都是以数组或者链表存储的。而数组和链表的每个节点，你可以理解成一个对象，那么如何存储数据库是不是就可以理解了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631846214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37063,"ip_address":""},"score":394342,"extra":""}]}]},{"had_liked":false,"id":130892,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1567566361,"is_pvip":false,"replies":[{"id":"49800","content":"那应该不全是，应该还有其他设计方面的考量。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567724274,"ip_address":"","comment_id":130892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862533657","product_id":100017301,"comment_content":"微信要求全网唯一的“微信号”是为了更好的处理顶点的值这一问题吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466180,"discussion_content":"那应该不全是，应该还有其他设计方面的考量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567724274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115269,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563522358,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5858489654","product_id":100017301,"comment_content":"网站相互的引用就是一个图，谷歌就是先看透了这张图而崛起的。","like_count":1,"discussions":[{"author":{"id":2372558,"avatar":"","nickname":"Geek_c0013c","note":"","ucode":"B1E6E3A9DE25B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540202,"discussion_content":"啥意思大佬？能说的具体点吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639987158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111428,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1562556672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857523968","product_id":100017301,"comment_content":"图常用算法：DFS&amp;BFS&amp;最小生成树&amp;最短路径&amp;拓扑排序<br>应用场景：网络中的主机和路由器构成的网络图&amp;社交网络中的好友关系&amp;地图类应用","like_count":1},{"had_liked":false,"id":111272,"user_name":"流年如水","can_delete":false,"product_type":"c1","uid":1469226,"ip_address":"","ucode":"964C56EEF31E1E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6b/2a/2f7a4f0d.jpg","comment_is_top":false,"comment_ctime":1562528676,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5857495972","product_id":100017301,"comment_content":"在微博的例子中，入度和出度表示的是用户的粉丝数和关注数。","like_count":1,"discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81788,"discussion_content":"很好的解释！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576273579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64658,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1548847127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5843814423","product_id":100017301,"comment_content":"老师，请问图可以直接用链表表示吗？一个节点有两个指针，一个入度的指针，一个出度的指针。虽然说这样子的查询效率会很低","like_count":1},{"had_liked":false,"id":60521,"user_name":"read","can_delete":false,"product_type":"c1","uid":1063112,"ip_address":"","ucode":"F0E4AE2FD92923","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/c8/dfc7a25b.jpg","comment_is_top":false,"comment_ctime":1547484296,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5842451592","product_id":100017301,"comment_content":"有这样一个场景，A关注了B，这样的操作会同时写两个链表一个是A的关注列表，另一个是B的粉丝列表，比如用redis的sortset来存储。现在要检查所有不一致的情况（比如，A的关注列表有B，但是B的粉丝列表没有A，或者A的关注列表没有B，但是B的粉丝列表有A）。这种情况有什么好的方法吗？","like_count":1,"discussions":[{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554514,"discussion_content":"我有个想法，A关注了B，这个肯定要首先持久化到数据库里的，而且要保证成功，然后再在redis中更新A的关注列表和B的粉丝列表，这个可以异步化。检查不一致的情况，需要基于定时任务定时从数据库里查询出A和B的最新关注关系，刷入Redis缓存，一般可在空闲时间启动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646409949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53619,"user_name":"MARS","can_delete":false,"product_type":"c1","uid":1187763,"ip_address":"","ucode":"FC2CB43C38FE47","user_header":"https://static001.geekbang.org/account/avatar/00/12/1f/b3/552c35f2.jpg","comment_is_top":false,"comment_ctime":1545701628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840668924","product_id":100017301,"comment_content":"看了这么多，觉得这个教程写的特别好，通俗易懂。理解简单，就剩下自己实际操作一遍了","like_count":1},{"had_liked":false,"id":52525,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":1015494,"ip_address":"","ucode":"5B5F45564DDBE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/c6/83684988.jpg","comment_is_top":false,"comment_ctime":1545405174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840372470","product_id":100017301,"comment_content":"单向邻接表感觉跟java的Hashmap底层实现很像。数组＋链表","like_count":1},{"had_liked":false,"id":48558,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1544488334,"is_pvip":false,"replies":[{"id":"17379","content":"逆邻接表","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544493168,"ip_address":"","comment_id":48558,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839455630","product_id":100017301,"comment_content":"如果邻接表表示有向图呢？只能查找它指向的顶点，怎么判断指向它的顶点呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432244,"discussion_content":"逆邻接表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544493168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45998,"user_name":"MIAN-勉","can_delete":false,"product_type":"c1","uid":1123554,"ip_address":"","ucode":"AE938038C2E7D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/e2/e5110db5.jpg","comment_is_top":false,"comment_ctime":1543829828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838797124","product_id":100017301,"comment_content":"一直有個疑惑，用鄰接表存儲圖，每個頂點後面鏈接的元素是否有先後順序，希望老師解惑。感覺是沒有順序的。","like_count":1},{"had_liked":false,"id":45484,"user_name":"luffy","can_delete":false,"product_type":"c1","uid":1244950,"ip_address":"","ucode":"702034E116A99F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/16/b0ab9a73.jpg","comment_is_top":false,"comment_ctime":1543652415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838619711","product_id":100017301,"comment_content":"刚好需要了解一个图数据库，neo4j.","like_count":1},{"had_liked":false,"id":45336,"user_name":"小苏饼","can_delete":false,"product_type":"c1","uid":1247539,"ip_address":"","ucode":"80868F7477E2BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/33/57757a23.jpg","comment_is_top":false,"comment_ctime":1543590304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838557600","product_id":100017301,"comment_content":"想问一下要是求两两用户之间的共同好友<br>是用图把数据先存储进来在用算法来求<br>还是直接用mapreduce来计算呢？<br>A：B,C,D<br>B：C,D,E<br>这样的数据","like_count":1},{"had_liked":false,"id":45270,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1543573850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838541146","product_id":100017301,"comment_content":"思考题里 图这个数据结构 在编译器领域运用很广 基本块是节点 控制流过程是边 数据流分析 函数调用 静态动态预测频度相当于权重 另外别名信息存储也是无向边邻接矩阵或者邻接表","like_count":1},{"had_liked":false,"id":45077,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1543544039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838511335","product_id":100017301,"comment_content":"1.是无向图，应该就不用两个邻接表了，一个就可以，一个用户指向他的好友列表，好友列表用跳表实现，数据规模大的时候，同样采用hash路由分片处理。<br>2.动态规划算法中0-1背包问题其实也是图的一种应用（回溯，分支限界都可以），最短路径，最小生成树都是图的应用","like_count":1},{"had_liked":false,"id":45040,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1543541118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838508414","product_id":100017301,"comment_content":"逆邻接表真是很赞的思路 感觉跟找中位数有点像 一个堆不行我们就用两个堆 而一个邻接表不行就用两个 因为学了红黑树 感觉什么都想套用红黑树 老师在这里邻接表的节点集合 用了跳表 是因为它对缓存友好么 即使这里只是存储了用户id 如果量很大 跳表的连续存储还是更好 不知道理解的对不对","like_count":1},{"had_liked":false,"id":44972,"user_name":"dapaul","can_delete":false,"product_type":"c1","uid":1239335,"ip_address":"","ucode":"A53E0018F138A1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/27/2aa8fb31.jpg","comment_is_top":false,"comment_ctime":1543536841,"is_pvip":true,"replies":[{"id":"16026","content":"图的持久化方法很多 比如文章中提到的数据库的存储方法。你说的图数据库也是一类","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542434,"ip_address":"","comment_id":44972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838504137","product_id":100017301,"comment_content":"但图是怎么持久化存储的呢？正好最近听说了图谱数据库，但好奇底层对应的数据结构是什么，还没来得及去研究一下","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430884,"discussion_content":"图的持久化方法很多 比如文章中提到的数据库的存储方法。你说的图数据库也是一类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359035,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665194112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665194112","product_id":100017301,"comment_content":"总结：<br> 图的相关概念，有向，无向，带权。图的存储：数组，链表<br><br>1. 使用链表存储，每个里面都存储连接的两个顶点，这时就相当于临接表和逆临接表都有了。<br>2. 公路网","like_count":0},{"had_liked":false,"id":358182,"user_name":"糊糊","can_delete":false,"product_type":"c1","uid":1143677,"ip_address":"北京","ucode":"148D5E73B0AEA4","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/7d/c3e282a4.jpg","comment_is_top":false,"comment_ctime":1664006998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664006998","product_id":100017301,"comment_content":"老师好，对于图的数据结构在内存的表示我理解了，也理解如何存储微博好友关系。但是还是有些疑问，如果使用跳表存储，如redis的zset，那对于大v来说，几十万、几百万甚至上亿的粉丝列表怎么存呢，光一个key就几十G的大小，用1个key应该满足不了了吧，这种情况有什么好的办法吗？","like_count":0},{"had_liked":false,"id":356635,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1662458739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662458739","product_id":100017301,"comment_content":"无向图<br>- 元素,顶点<br>- 关系，边<br>- 多少条关系，度<br><br>有向图<br>- 入度<br>- 出度<br><br>带权图<br><br>存储方式<br>- 邻接矩阵，稀疏图<br>- 邻接表，数组+链表，数组+动态数据结构(平衡二叉树、跳表、散列表)<br>- 数据库，user_id,flow_user_id","like_count":0},{"had_liked":false,"id":347492,"user_name":"maitian","can_delete":false,"product_type":"c1","uid":2817839,"ip_address":"","ucode":"E974157AE36BAC","user_header":"https://static001.geekbang.org/account/avatar/00/2a/ff/2f/eb03fccc.jpg","comment_is_top":false,"comment_ctime":1654074297,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654074297","product_id":100017301,"comment_content":"有向图 a[2][1]  是不是应该为0啊 ，这边有个小问题??","like_count":0},{"had_liked":false,"id":345012,"user_name":"黑暗中行走","can_delete":false,"product_type":"c1","uid":1645599,"ip_address":"","ucode":"12FAA327ECDE72","user_header":"https://static001.geekbang.org/account/avatar/00/19/1c/1f/49155f50.jpg","comment_is_top":false,"comment_ctime":1651933306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651933306","product_id":100017301,"comment_content":"JVM的可达性分析使用有向图","like_count":0},{"had_liked":false,"id":340362,"user_name":"Mr.W","can_delete":false,"product_type":"c1","uid":1175440,"ip_address":"","ucode":"B431DA45C4B9F7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/90/c5002895.jpg","comment_is_top":false,"comment_ctime":1648780621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648780621","product_id":100017301,"comment_content":"商品购买页面选择商品，根据不同的规格组合，选择对应的商品可以使用图这种数据结构","like_count":0},{"had_liked":false,"id":338020,"user_name":"Zou XD","can_delete":false,"product_type":"c1","uid":2921808,"ip_address":"","ucode":"C034A0A0F558D6","user_header":"","comment_is_top":false,"comment_ctime":1647239862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647239862","product_id":100017301,"comment_content":"太难了，感觉自己脑子不行。","like_count":0},{"had_liked":false,"id":337856,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647095037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647095037","product_id":100017301,"comment_content":"图的话用来表示一个生态系统也挺不错","like_count":0},{"had_liked":false,"id":337670,"user_name":"向科","can_delete":false,"product_type":"c1","uid":1294797,"ip_address":"","ucode":"6EFC2C4FB11A24","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/cd/cdb510ae.jpg","comment_is_top":false,"comment_ctime":1646964706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646964706","product_id":100017301,"comment_content":"族谱是图吗？","like_count":0},{"had_liked":false,"id":326927,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1639756340,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639756340","product_id":100017301,"comment_content":"我感觉计算机的网络就是一张图","like_count":0},{"had_liked":false,"id":320375,"user_name":"Geek_420383","can_delete":false,"product_type":"c1","uid":2807303,"ip_address":"","ucode":"3F5AF0BB480169","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI7QTGOfpaq8VzFTANtkoTU7Ksoz6YJm37yr4Pp0Arb55dwn78RkWRMP3LEiazHlfa5X42dWc0ON2A/132","comment_is_top":false,"comment_ctime":1636282868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636282868","product_id":100017301,"comment_content":"大数据领域的数据血缘关系","like_count":0},{"had_liked":false,"id":316571,"user_name":"Geek_94045a","can_delete":false,"product_type":"c1","uid":2760780,"ip_address":"","ucode":"B8F23BA9D1411B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","comment_is_top":false,"comment_ctime":1634395431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634395431","product_id":100017301,"comment_content":"我要上大学时候能看到这本电子书。。。也不至于这门课挂科","like_count":0},{"had_liked":false,"id":316132,"user_name":"Json","can_delete":false,"product_type":"c1","uid":2035271,"ip_address":"","ucode":"2C28E0CBEB2FBC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0e/47/cb39bcb1.jpg","comment_is_top":false,"comment_ctime":1634174335,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1634174335","product_id":100017301,"comment_content":"请教一下，跳表如何分页？","like_count":0,"discussions":[{"author":{"id":1143677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/73/7d/c3e282a4.jpg","nickname":"糊糊","note":"","ucode":"148D5E73B0AEA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589060,"discussion_content":"排位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664373504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313856,"user_name":"Geek_b02252","can_delete":false,"product_type":"c1","uid":2172735,"ip_address":"","ucode":"04BD437114CA73","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL6vCJbd9waPb9rTJ7mdBW6yHOvDd1w4mM9MibJXIpvDaK7dLo5FryI96ZYnhC8pAn1RZFPiaWF0l4Q/132","comment_is_top":false,"comment_ctime":1632715053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632715053","product_id":100017301,"comment_content":"持久化地存储在数据库中的方式，会不会存在因为时间比较久之后，这个人的不同好友却存在不同的库里。这种方式合理吗","like_count":0},{"had_liked":false,"id":305459,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1627981488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627981488","product_id":100017301,"comment_content":"图的应用例子：导航时需要用到最短路径规划就可以用图来组织构建","like_count":0},{"had_liked":false,"id":304948,"user_name":"杜杜狼","can_delete":false,"product_type":"c1","uid":1614877,"ip_address":"","ucode":"6888528E5F5E3E","user_header":"https://static001.geekbang.org/account/avatar/00/18/a4/1d/339f959d.jpg","comment_is_top":false,"comment_ctime":1627715870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627715870","product_id":100017301,"comment_content":"最近在调研机器学习模型编排的框架，其中的airflow框架就是用DAG来展示模型的编排","like_count":0},{"had_liked":false,"id":304833,"user_name":"liufq","can_delete":false,"product_type":"c1","uid":1259178,"ip_address":"","ucode":"6DDD8A5ADF1CFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/aa/c6f67a3b.jpg","comment_is_top":false,"comment_ctime":1627634023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627634023","product_id":100017301,"comment_content":"实践中，用数据库存储图，但是如何使用呢，查询时怎么查找两个用户间的关系路径呢，每遍历一个节点要查一次数据库？不会很慢吗","like_count":0},{"had_liked":false,"id":302262,"user_name":"fei","can_delete":false,"product_type":"c1","uid":2691974,"ip_address":"","ucode":"CEB9A1C195A074","user_header":"https://static001.geekbang.org/account/avatar/00/29/13/86/89e255c3.jpg","comment_is_top":false,"comment_ctime":1626148967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626148967","product_id":100017301,"comment_content":"1. 矩阵表在存储稀疏关系的时候会浪费大量空间。所以选择用邻接表法存储。以用户作为索引，好友列表建立链表或红黑树。用户索引可以通过Hash算法来均匀分布到多台机器。类似HashMap存储。考虑到微信是无向关系，所以这种数据结构还是有比较多空间浪费。到这里想不到怎么可以进一步优化来减少内存浪费。<br>2.图是一种描述点之间可以互相关系的一种数据结构。像电路图就是一种无向图。","like_count":0},{"had_liked":false,"id":297889,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623832838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623832838","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":295360,"user_name":"颜桦","can_delete":false,"product_type":"c1","uid":1099576,"ip_address":"","ucode":"1CD7250E052B32","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/38/d1a50cd6.jpg","comment_is_top":false,"comment_ctime":1622383788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622383788","product_id":100017301,"comment_content":"用数据库存储关系这种方式和图有什么关系？","like_count":0},{"had_liked":false,"id":291324,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1620206582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620206582","product_id":100017301,"comment_content":"（1）微信这种好友之间的关系形成的无向图，我认为只需要使用邻接表的形式存储，需要知道某个用户的好友时，可以直接获取。<br>（2）地图中各个地点之间可以形成无向图，还可以是带权值的无向图（权值代表两个地点之间的距离）<br><br>","like_count":0},{"had_liked":false,"id":286394,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1617279045,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1617279045","product_id":100017301,"comment_content":"第一遍看这个专栏，看了几章就晕了，第二遍了一口气看到这里，思想和文字都看懂了，就是代码没有动手敲，有没有跟我一样的，准备第三遍的时候再啃代码，还有请问大家，我这样的是正常的吗？","like_count":0,"discussions":[{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581575,"discussion_content":"其实不敲代码，基本上等于没看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658846421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284873,"user_name":"柯尊铖","can_delete":false,"product_type":"c1","uid":1851031,"ip_address":"","ucode":"8C3E35A76EED61","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5GIMGQPRu31calIBicDXTNJQFCgTwgaiaQJniaw8jYrPxwpxNd0nAiapYgD6OK1LrSLuSerOuURG1sQ/132","comment_is_top":false,"comment_ctime":1616505221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616505221","product_id":100017301,"comment_content":"刚开始刷 leetcode 的时候就是一个劲的刷图的题，图的题差不多刷完了之后发现其它的题一个也不会🐶","like_count":0},{"had_liked":false,"id":280894,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614446178,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614446178","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>1、微信用户也许不关心自己有多少粉丝，但也得知道谁关注了自己，因此还是得用邻接图来保存用户自己关注了谁，逆邻接图来保存谁关注了自己。然后整体使用mapduce来分布储存。<br><br>2、地图<br>网点布局<br>设置信号塔基站","like_count":0},{"had_liked":false,"id":278423,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1612938420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612938420","product_id":100017301,"comment_content":"前面学的跳表、散列表、二叉平衡查找树、红黑树等等，好像就混了个耳熟。","like_count":0},{"had_liked":false,"id":276929,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1612181456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612181456","product_id":100017301,"comment_content":"总结：<br><br>图是一种比树更加复杂度的结构。它又分为：有向图，无向图，带权图等<br><br>在图中有一些比较重要的概念：<br><br>1）顶点：在图中的节点<br>2）边：两个顶点之间的连接<br>3）顶点的度：一个顶点涉及到的边数。如果是有向图，它有分为入度和出度。所谓的入度说的时候，有多少条边指向自己；出度指的是自己向其他顶点指的边数<br>4）权重：带权图的每条边都会有一个权重<br><br>图可以使用邻接矩阵存储（也就是二维数组），也可以使用邻接表存储（类似于散列表+链表法解决散列冲突）；前者存储可以有更快的计算性能。但是当存储的是稀疏图（顶点多，边数少）时，可能造成大量的空间浪费（邻接矩阵大对数元素的值都为0）；<br>使用后者存储时，不会造成空间浪费，但是对于一些图的计算会比较麻烦。它们正好相反，充分的展示了“以时间换空间，或以空间换时间的思想”","like_count":0},{"had_liked":false,"id":275078,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1611301009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611301009","product_id":100017301,"comment_content":"课后思考：<br>1、微信好友关系 无向图 <br>  -&gt;代码方面我可以用散列函数进行计算存储位置 取余数。<br>  -&gt;按照数据量大来进行存储，分库分表，计算对应的机器，然后进行存储，表的设计可以按照老师最后的 user_id,flower_id来，并且加索引，存的时候值只是因为无向，所以有了 a b 记录，就不用 b a记录了。但肯定有更好的表设计方案。（未知）<br>  -&gt;为了提高效率我们可以在查询的时候中间加一道缓存redis都可以<br>2、生活中的例子，图结构的第一想到的就是我们的城市与城市，城市是顶点，达到城市的路径是边，然后各种交通方式就是权重。","like_count":0},{"had_liked":false,"id":266277,"user_name":"蒹葭残辉","can_delete":false,"product_type":"c1","uid":2219151,"ip_address":"","ucode":"72C2797E56C889","user_header":"https://static001.geekbang.org/account/avatar/00/21/dc/8f/d7e4a6d1.jpg","comment_is_top":false,"comment_ctime":1607266678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607266678","product_id":100017301,"comment_content":"如果用关系型数据库存储两个节点的关联关系，容易产生笛卡尔积，在不分表分库的情况下，大家有什么好的办法吗，现在项目中就遇到了。","like_count":0},{"had_liked":false,"id":262451,"user_name":"徐丶昌隆","can_delete":false,"product_type":"c1","uid":1604438,"ip_address":"","ucode":"9EE3F971F90C4F","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","comment_is_top":false,"comment_ctime":1605742386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605742386","product_id":100017301,"comment_content":"经过课程洗礼，现在有些贯通的感觉，在第一次看到邻接表时，首先会想到红黑树、跳表代替单链，来降低时间复杂度，结果后面果然提到了改进方案，开心。","like_count":0},{"had_liked":false,"id":261502,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1605364765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605364765","product_id":100017301,"comment_content":"问题2：地图导航可以看成是一个图，拥堵指数是权重，每条路也有方向，导航的时候就是加权求图上两个节点的最短路径。","like_count":0},{"had_liked":false,"id":258611,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1604503343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604503343","product_id":100017301,"comment_content":"学了。。且以前就学懂。但是从了没有用到的，就是图。不知道你们是否有感触？框架代码层都没有看到过。","like_count":0},{"had_liked":false,"id":258546,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1604479127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604479127","product_id":100017301,"comment_content":"终于看到了，图--学了这么久，图是最没有用到的数据结构。","like_count":0},{"had_liked":false,"id":246545,"user_name":"小炮","can_delete":false,"product_type":"c1","uid":1201296,"ip_address":"","ucode":"670ABDB57235C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/90/c16b86d8.jpg","comment_is_top":false,"comment_ctime":1599397939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599397939","product_id":100017301,"comment_content":"需要mysql持久化，直接放在内存很少吧","like_count":0},{"had_liked":false,"id":245794,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599055378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599055378","product_id":100017301,"comment_content":"说真的， 万物皆是数组和链表啊。。  看来得回去多看几遍基础了","like_count":0},{"had_liked":false,"id":240999,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1597146408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597146408","product_id":100017301,"comment_content":"微信的这个问题，完全可以用微博的这个思路;如果没有数据库，那么是可以用图的连接表存在文件中，但是有数据库的话，感觉用数据库更方便","like_count":0},{"had_liked":false,"id":237368,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1595811428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595811428","product_id":100017301,"comment_content":"如果id是字符串而不是数字，如何使用映射到邻接矩阵和邻接表中呢？","like_count":0},{"had_liked":false,"id":237312,"user_name":"Merry","can_delete":false,"product_type":"c1","uid":1024036,"ip_address":"","ucode":"E2A114E10814BA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/24/68c679c8.jpg","comment_is_top":false,"comment_ctime":1595776702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595776702","product_id":100017301,"comment_content":"1.微信的无向图是不是可以用邻接矩阵来存储，因为无向图的邻接矩阵是对称(三角)矩阵，可只存储上(或下)三角元素。<br>2.将交通网看作图，各个地点看作顶点，地点间的交通路线看作边，继而利用求解图的最小生成树原理求出各地点之间开销(如距离&#47;路费)最小的交通网，即用n-1条路线连接n个城市，","like_count":0},{"had_liked":false,"id":230322,"user_name":"大翔","can_delete":false,"product_type":"c1","uid":2041141,"ip_address":"","ucode":"4AAB4B0D1372C3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/25/35/977bdcea.jpg","comment_is_top":false,"comment_ctime":1593347255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593347255","product_id":100017301,"comment_content":"请教老师，在使用数据库读取或者插入数据的时候，我们直接用SQL语言来获得结果，而不需要自己在后后端语言里手动实现跳表、树等结构（我主要做前端，所以不太熟悉Java或者c++...）。所以说，SQL实际帮我们封装好了跳表、红黑数这些数据结构吗？","like_count":0},{"had_liked":false,"id":226005,"user_name":"Geek_d40030","can_delete":false,"product_type":"c1","uid":2029525,"ip_address":"","ucode":"91A94D7C8F3F71","user_header":"","comment_is_top":false,"comment_ctime":1591927497,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1591927497","product_id":100017301,"comment_content":"c++的include用的也是图。","like_count":0},{"had_liked":false,"id":222537,"user_name":"王瑞强","can_delete":false,"product_type":"c1","uid":1829090,"ip_address":"","ucode":"DEE4EB5E23433F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e8/e2/2bcaef68.jpg","comment_is_top":false,"comment_ctime":1590830099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590830099","product_id":100017301,"comment_content":"好多游戏都是图，打地鼠，迷宫，坦克大战","like_count":0},{"had_liked":false,"id":220359,"user_name":"Geek_py hang","can_delete":false,"product_type":"c1","uid":1915167,"ip_address":"","ucode":"E1DABF14C9176B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/1f/579ae900.jpg","comment_is_top":false,"comment_ctime":1590226233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590226233","product_id":100017301,"comment_content":"工程家思维，所有的关系转换成数据了","like_count":0},{"had_liked":false,"id":220358,"user_name":"Geek_py hang","can_delete":false,"product_type":"c1","uid":1915167,"ip_address":"","ucode":"E1DABF14C9176B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/1f/579ae900.jpg","comment_is_top":false,"comment_ctime":1590226112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590226112","product_id":100017301,"comment_content":"图类似闭合的排列？","like_count":0},{"had_liked":false,"id":219251,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1589976822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589976822","product_id":100017301,"comment_content":"邻接表、逆邻接表，考虑问题至少要从正反两个方向，要把思路打开，如何通过增加空间来降低时间复杂度，或者通过增加时间复杂度来减少空间占用，实际问题，根据规模还要做各种权衡。","like_count":0},{"had_liked":false,"id":216635,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589299214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589299214","product_id":100017301,"comment_content":"学习笔记:<br>1. 图的一些概念已经很熟洗了<br>2. 图的存储常用的两种 邻接矩阵 邻接表 (引申出逆邻接表，据我所知还有十字链表)<br>3. 邻接矩阵 读取节点关系迅速，矩阵运算方便。但是节点多，边少是浪费空间。无向图也浪费。<br>4. 邻接表 节省空间，但读取节点关系得遍历链表。这里可以用更优秀的结构：红黑树、散列表、跳表。对于无向图，也会浪费一定空间。对于有向图，只能方便查找出度的节点。查找入度得用逆邻接表。<br>5. 本节课案例：微信是互为好友，所以可以用无向图。微博可以单向关注，所以是有向图。qq包含亲密度，所以是带权无向图。<br>6. 上亿用户的微博，得用邻接表。<br>    查找关注和粉丝列表，相当于查找出度和入度对应的节点。所以得邻接表和逆邻接表<br>    快速查找和按首字母排序:可以用跳表。红黑树也行<br>    内存不足:可以将用户id哈希到不同的服务器上存储。可以用外存,，数据库索引这块不懂<br> 思考题:<br>几乎是一样的 <br>存储结构邻接表，但是不需要逆邻接表了。添加朋友时，两个节点对应的链表(红黑树、跳表、哈希表不行，不好排序)都要加上对方。<br>内存管理的方式都一样，哈希分片、数据库法。<br> 其他的图结构:地图、人际关系网","like_count":0},{"had_liked":false,"id":215936,"user_name":"田镇珲","can_delete":false,"product_type":"c1","uid":1762765,"ip_address":"","ucode":"F112D969D81822","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e5/cd/2d6d8f80.jpg","comment_is_top":false,"comment_ctime":1589156086,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1589156086","product_id":100017301,"comment_content":"微信操作<br>1. 按照首字母输出好友列表<br>微信这种无向图，首先，用户量很大，关系很稀疏。每个人的社交圈子就这么大。所以不适合用邻接矩阵。要用邻接表。<br>因为不存在方向，所以我们可以只用一个邻接表，不需要逆邻接表。<br>对于链表部分，也是使用跳表。<br>","like_count":0},{"had_liked":false,"id":215535,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1589012598,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589012598","product_id":100017301,"comment_content":"总结：每个顶点（vertex）可以与任意的其它顶点建立连接，这个连接被叫做边（edge）。无向图：每条边代表的连接都是双向的   -- 微信好友。有向图：每条边代表的连接是单向的 -- 微博粉丝关注。带权图 weighted graph：每条边带有一定的权重 -- qq好友亲密度。稀疏图 sparse graph： 代表的顶点很多，但是边比较少的图。无向图中，顶点的度（degree）代表的是跟顶点相连接的边的条数。有向图中，顶点的度分为入度（in-degree）和出度（out-degree）。入度代表的是有多少条边指向这个顶点，出度代表的是有多少条边是以这个顶点出发指向其它顶点的。图的实现方式：邻接矩阵 adjacency matrix 底层依赖一个二维数组 用a[i][j]来代表 顶点i 指向 顶点 j的边。对于无向图，节点i和j有连接，那么a[i][j]和a[j][i]都标记为1。对于带权图, 存的便是边的权重。邻接表 adjacency list：类似散列表，每个顶点存储一个链表，每个链表的结点代表的是该顶点指向的顶点。如果要确定一个a顶点到b顶点的边，那么就要在a的链表里搜索，这个速度相对于直接从二维数组里根据下标读取就慢很多。可以将链表改为其它的搜索速度更快的速度结构，比如平衡二叉查找树，跳表等。实际开发中，可以选择红黑树。","like_count":0},{"had_liked":false,"id":215450,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1588994064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588994064","product_id":100017301,"comment_content":"60天攻克算法打卡行动第27天<br><br>学习内容 ：图的表示：如何存储微博、微信等社交网络中的好友关系？<br><br>图是一种比树更加复杂的非线性表结构。掌握了图的基础概念和存储方法，我们就能解决复杂社交网络存储问题。<br><br>1.如何理解“图”？<br>顶点，边，度。有方向的边就是有向图，无方向的就是无向图。带权图边边上标示权重的边。<br>2.邻接矩阵存储方法<br>邻接矩阵标示会浪费空间，因为A[i][j]与A[j][i]的值是等价的，所以存储一个位置就可以了，也就是矩阵的对角一半就可以存储所有的图数据了对于无向图来说。<br>3.邻接表存储方法<br>以当前节点为出发点，之后的链表标示，从这个点指向的点有哪些。<br><br>课后思考：<br>1、如果用邻接矩阵存储只需要存储一半数据，还是说对空间上用的会多一些，因为社交网络是一张稀疏图。邻接表存，链表长了不利于查询效率，需要改为跳表形式。无向的不需要逆表存储被关注的信息，在数据库中的体现，可以加入一个字段标示这两个关系是互相的意思也就是无向的标示。<br>我们的各个城市之间就是一个图的描述，从某一个城市到另一个城市，之间的路线就是边距离可以理解为权重。","like_count":0},{"had_liked":false,"id":215388,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1588985759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588985759","product_id":100017301,"comment_content":"银行判断循环转账的时候，存储数据就是图。A给B转钱， B给C转钱，C给D转钱，D给A转钱。存在一个环，有洗钱的嫌疑。","like_count":0},{"had_liked":false,"id":214984,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1588863192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588863192","product_id":100017301,"comment_content":"图的应用太多了，比如交通领域，车次与车站组成的网络、地点与道路组成的网络，都可以用图表示；电力领域、输电线与电厂、变电站之间的关系等等。实际上，图的处理是复杂网络计算的基础。","like_count":0},{"had_liked":false,"id":213975,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1588604383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588604383","product_id":100017301,"comment_content":"问题1疑惑：感觉用无向图存储用户的好友关系，并不是十分准确。在使用微信的过程中，A删除B的好友关系，感觉在A的好友列表中不存在B用户，但在用户B的好友列表中还有A存在，所以会有类似清好友这样的做法，所以感觉还是有方向的，应该用有向图表示。<br>问题2：其实本质上多对多的关系都应该用图来存储。比如工序问题(任务之间的依赖关系时多对多关系)、多个旅游地规划问题(城市之间的连接是多对多关系)……","like_count":0},{"had_liked":false,"id":213667,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1588506012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588506012","product_id":100017301,"comment_content":"1.查找社交网络中的三度好友关系也可以使用深度搜索来完成.<br>深度搜索中从s顶点到t顶点的搜索算法中,把找到t顶点的递归终止条件改为社交网络中好友的度数3就可以了<br>2.如何在计算机中存储一个迷宫可以分为三步,<br>首先确定迷宫中顶点的个数以及顶点在二维数组中的位置;<br>其次再把迷宫的出路用边连起来;<br>最后用图的存储方式(邻接矩阵方式或邻接表的方式)来存储迷宫中顶点与边的关系.","like_count":0},{"had_liked":false,"id":211404,"user_name":"🤪HappyJoo","can_delete":false,"product_type":"c1","uid":1234591,"ip_address":"","ucode":"96E1858F06BABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","comment_is_top":false,"comment_ctime":1587958871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587958871","product_id":100017301,"comment_content":"图（Graph）<br>顶点（vertex）：图中的元素<br>边（edge）：顶点的关系。<br>度（degree）：边的条数。<br>例如微信。<br><br>引入“方向”，分为“有向图”和“无向图”<br>在“有向图”中，分为入度（in-degree）——有多少条边指向这个顶点，和出度（out-degree）——有多少条边从这个顶点指出。<br>例如微博。<br><br>带权图（weighted graph），每条边都有一个权重（weight）。例如qq的好友亲密度。<br><br>如何在内存中存储呢？<br>邻接矩阵（Adjacency Matrix），顶点 i 和顶点 j 之间有边，则将矩阵A[i][j]和A[j][i]标记为1。其中，A[i][j]表示有从i指向j的边。带权图的数组会存储相应的权重。优点：存储方式简单，获得两点关系高效，且方便计算。缺点：可能浪费大量空间。稀疏图（Sparse Matrix）：顶点多，点之间的边不多。<br><br>邻接表（Adjacency List）：每个顶点对应一条链表，存储指向的顶点。优点：节省空间。缺点：耗时。","like_count":0},{"had_liked":false,"id":206855,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586945427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586945427","product_id":100017301,"comment_content":"图的基础知识掌握，不够还需深入学习才可以。。","like_count":0},{"had_liked":false,"id":197463,"user_name":"SteelHuaSheng","can_delete":false,"product_type":"c1","uid":1396126,"ip_address":"","ucode":"BC8127FC5207FC","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/9e/04ec08bf.jpg","comment_is_top":false,"comment_ctime":1585379913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585379913","product_id":100017301,"comment_content":"打卡！学到后面还要回顾前面的只是，散列表，哈希，散列冲突。","like_count":0},{"had_liked":false,"id":193035,"user_name":"roaming","can_delete":false,"product_type":"c1","uid":1039232,"ip_address":"","ucode":"2736679690AB81","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/80/6b7629d7.jpg","comment_is_top":false,"comment_ctime":1584882809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584882809","product_id":100017301,"comment_content":"这门课真的是有畏难情绪，学之前看标题就觉得难，但真学了，慢慢啃下来，还是很有收货，有成就感","like_count":0},{"had_liked":false,"id":191463,"user_name":"小谢","can_delete":false,"product_type":"c1","uid":1879476,"ip_address":"","ucode":"82D54A61D2FDB9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ad/b4/e4dcd4d7.jpg","comment_is_top":false,"comment_ctime":1584775344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584775344","product_id":100017301,"comment_content":"复杂的数据结构都是由简单的数据结构堆叠组合而成","like_count":0},{"had_liked":false,"id":190375,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1584633937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584633937","product_id":100017301,"comment_content":"图的表示<br>\t如何存储好友关系<br><br>\t涉及图的算法<br>\t\t图的搜索<br>\t\t最大路径<br>\t\t最小生成树<br>\t\t二分图。。。<br><br>\t如何理解图<br>\t\t非线性结构：树<br><br>\t\t概念：<br>\t\t\t顶点<br>\t\t\t\t度<br>\t\t\t边<br>\t\t\t无向图<br>\t\t\t有向图<br>\t\t\t\t出度<br>\t\t\t\t入度<br>\t\t\t带权图<br><br>\t储存图的数据结构<br>\t\t邻接矩阵：二位数组<br>\t\t\t缺点：稀疏图<br>\t\t\t优点：图的运算转换成矩阵的运算<br>\t\t\t\tfor example： Floyd-Warshall 算法<br><br><br>\t\t邻接表：数组+链表<br>\t\t\tlike 散列表<br>\t\t\t将链表改成平衡查找二叉树<br><br><br>\t\t比较<br>\t\t\t邻接矩阵\t费空间\t省时间<br>\t\t\t邻接表\t省空间\t费时间","like_count":0},{"had_liked":false,"id":188284,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1351248,"ip_address":"","ucode":"3588B62A4F9534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","comment_is_top":false,"comment_ctime":1584335757,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584335757","product_id":100017301,"comment_content":"图数据库的原理是不是就是争哥讲的分布式通过多个机器存储","like_count":0},{"had_liked":false,"id":186725,"user_name":"重新来过","can_delete":false,"product_type":"c1","uid":1254138,"ip_address":"","ucode":"27CC35140B63F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/fa/671d2937.jpg","comment_is_top":false,"comment_ctime":1583911906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583911906","product_id":100017301,"comment_content":"1、关于开篇思考题，我们只讲了微博这种有向图的解决思路，那像微信这种无向图，应该怎么存储呢？你可以照着我的思路，自己做一下练习。<br>答：微信的需求列举<br>一对一 or 一对多的聊天<br>朋友分字母排序 （关系对排序id-字母）<br>公众号的关注关系 （1对多）<br><br>同样可以使用两种方式：<br>HashTable + SkipList 这样可以解决所有1对多问题，通过用户id确定用户的朋友列表<br>持久存储可以使用MySQL，建立一对一关系表<br><br><br><br>2、除了我今天举的社交网络可以用图来表示之外，符合图这种结构特点的例子还有很多，比如知识图谱（Knowledge Graph）。关于图这种数据结构，你还能想到其他生活或者工作中的例子吗？<br>答：公交道路，互联网，政府机构，象棋or围棋棋谱。","like_count":0},{"had_liked":false,"id":186193,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1583792773,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583792773","product_id":100017301,"comment_content":"邻接矩阵便于计算，但存储比较浪费。邻接表存储节省，但增删查的计算较复杂。改进1，邻接表搭配动态数据结构，如跳表，散列表或平衡二叉树。改进2，微博中关注了谁方便查，被谁关注不方便查，则使用逆邻接表多存储一遍。","like_count":0},{"had_liked":false,"id":182828,"user_name":"Vicent🍀","can_delete":false,"product_type":"c1","uid":1589894,"ip_address":"","ucode":"70AEA72A0B6F0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/86/6b2e81ba.jpg","comment_is_top":false,"comment_ctime":1582872140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582872140","product_id":100017301,"comment_content":"关于社交网络中使用邻接表和逆邻接表可以理解为是所有顶点出度的存储和入度情况的存储，这种理解对吗?","like_count":0},{"had_liked":false,"id":182446,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1582789082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582789082","product_id":100017301,"comment_content":"思考题 <br>第一题 我觉得无向图 使用邻接矩阵来存储就够了 而且只需要一半的存储空间,虽然另一半的空间被浪费了 但是查关注和被关注确实很方便了<br>当然如果内存比较吃紧 就老老实实的用邻接表 每个顶点维护一个动态数据结构 最好还是跳表 因为跳表有序,如果再扩展排名啥的，亲密度啥的 用跳表都很好实现<br>第二题 地图 用图来实现再合适不过了","like_count":0},{"had_liked":false,"id":178169,"user_name":"菽绣","can_delete":false,"product_type":"c1","uid":1755477,"ip_address":"","ucode":"60955E14C39C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c9/55/0e627a31.jpg","comment_is_top":false,"comment_ctime":1581601757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581601757","product_id":100017301,"comment_content":"解答开篇疑问：<br>老师用的是跳表，为什么不用散列表？","like_count":0},{"had_liked":false,"id":175093,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1580553312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580553312","product_id":100017301,"comment_content":"可以使用稀疏矩阵的存储方式进行存储，有值时候存位置与值，零省略","like_count":0},{"had_liked":false,"id":172816,"user_name":"飘到站","can_delete":false,"product_type":"c1","uid":1796339,"ip_address":"","ucode":"0C9A9521061127","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/f3/57456c44.jpg","comment_is_top":false,"comment_ctime":1579323424,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579323424","product_id":100017301,"comment_content":"记录调整思考问题的前因后果，从本质出发(跟着老师的思路):<br> 1.  数据(存储)结构服务于算法(业务方法)。  问题:存储微信好友关系，即要实现其业务方法(算法):<br>         1.1  添加好友前需要先查询好友&gt;&gt;&gt;快速查找&gt;&gt;散列表、跳表、红黑树，量级大了分布散列。<br>         1.2  添加好友&gt;&gt;&gt;快速插入&gt;&gt;散列表、跳表、红黑树、堆。<br>         1.3  删除好友&gt;&gt;&gt;快速查找、删除&gt;&gt;散列、跳表、红黑、有序数组。<br>         1.4  查询有序好友列表&gt;&gt;&gt;跳表(高效分页)、红黑、有序数组。<br>         综上 除1.1外的其他三算法最优 跳表，1.1算法 最贴合 散列表，而1.1于其他三个算法针对的实体都不同。<br>         故此数据结构应该是整合型结构: <br>散列+跳表 &gt;&gt;&gt;  无向图结构 &gt;&gt; 邻接表结构(直接排除邻接矩阵，高耗内存)。<br><br>2.  小白瞎想:图存储 相同实体(可无限扩展)、实体间的关系。甚至是不同实体，脑洞下 : 智能终端与人的关系。人有哪些智能终端，智能终端可被那些人管理。<br>发散一下: 图可以存储任意 可唯一性表示 实体间的关系。","like_count":0,"discussions":[{"author":{"id":1796339,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/68/f3/57456c44.jpg","nickname":"飘到站","note":"","ucode":"0C9A9521061127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141225,"discussion_content":"终极 思想提升(脑洞)   实现   因果， 万事万物的关联","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579403672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170994,"user_name":"洲","can_delete":false,"product_type":"c1","uid":1712154,"ip_address":"","ucode":"64D9334933C987","user_header":"https://static001.geekbang.org/account/avatar/00/1a/20/1a/9aaf5638.jpg","comment_is_top":false,"comment_ctime":1578814720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578814720","product_id":100017301,"comment_content":"地图导航，路网、管线等设施网络分析场景中也会用到图的概念","like_count":0},{"had_liked":false,"id":170622,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1578645532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578645532","product_id":100017301,"comment_content":"紧邻矩阵用二维数组存储，有向图的描述和下面画的图好像不太匹配吧， 按照画的图的方式理解，应该是 ”如果 顶点 i 到 j 之间，有一条箭头从顶点i指向顶点j的边，那我们就将 A[j][i] 标记为1“。这个才能和下面的图对应起来吧","like_count":0},{"had_liked":false,"id":165811,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1577325605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577325605","product_id":100017301,"comment_content":"像微信这种无向图可以用邻接表存储好友列表，好友列表可以用散列表存储提高查询效率。图可以用于描述点与点之间的联系，比如交通站点间的联系、网络站点间的联系。","like_count":0},{"had_liked":false,"id":165778,"user_name":"sunshine","can_delete":false,"product_type":"c1","uid":1013060,"ip_address":"","ucode":"9E6E85BF71588E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/44/71005991.jpg","comment_is_top":false,"comment_ctime":1577321669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577321669","product_id":100017301,"comment_content":"评论区大神很多，这一节说实话我学习的不太好，但是看到评论区后，豁然开朗。","like_count":0},{"had_liked":false,"id":165433,"user_name":"阿杜","can_delete":false,"product_type":"c1","uid":1066705,"ip_address":"","ucode":"349D3572F5ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","comment_is_top":false,"comment_ctime":1577237404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577237404","product_id":100017301,"comment_content":"感觉逆领接表就是用的倒排索引的思想","like_count":0},{"had_liked":false,"id":164925,"user_name":"拓","can_delete":false,"product_type":"c1","uid":1010957,"ip_address":"","ucode":"AC1940ECC25436","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/0d/e3fa096f.jpg","comment_is_top":false,"comment_ctime":1577112988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577112988","product_id":100017301,"comment_content":"数据库建索引 和 前面讲的数据结构有什么相似之处？可以展开讲一下吗。谢谢！","like_count":0},{"had_liked":false,"id":164528,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1577021090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577021090","product_id":100017301,"comment_content":"1. 微信所支持的操作是：1.判断A与B是否为好友 2.删除A与B的好友关系 3.获取用户的好友列表，可以使用邻接表来存储图，因为需要快速查找好友关系，需要用跳表或者红黑树。<br>2. 生活中的地图导航、路径规划，工业生产环节的优化、物流配送等都需要图","like_count":0},{"had_liked":false,"id":164194,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1576907598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576907598","product_id":100017301,"comment_content":"个人用到的数据结构，图是最复杂的，也是表达能力最强的。我有时用图用来分析陌生代码中对象之间的的依赖关系，画图的过程就是很好熟悉代码的过程，产出的图也能看出代码是否高内聚，低耦合。高内聚低耦合的代码模块内的反映依赖的边会很多，模块间的边少，质量不高的代码，边数是随机的，不分模块内外。","like_count":0},{"had_liked":false,"id":163783,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1576802965,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1576802965","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163006,"user_name":"Jun","can_delete":false,"product_type":"c1","uid":1120678,"ip_address":"","ucode":"0FAB76D99153ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/a6/7ae63d7e.jpg","comment_is_top":false,"comment_ctime":1576639307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576639307","product_id":100017301,"comment_content":"对于无向图一条边可以看作是有两条有向边，同样以邻接表表示。<br>生活中，地图找路径也是图表示","like_count":0},{"had_liked":false,"id":160300,"user_name":"帽子丨影","can_delete":false,"product_type":"c1","uid":1225395,"ip_address":"","ucode":"2B34892A2DE83E","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/b3/798a4bb2.jpg","comment_is_top":false,"comment_ctime":1575909348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575909348","product_id":100017301,"comment_content":"按昵称首字母存入跳表中，假如用户改名了怎么办","like_count":0},{"had_liked":false,"id":154785,"user_name":"MaLu","can_delete":false,"product_type":"c1","uid":1083559,"ip_address":"","ucode":"A5E900B6B94FB9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/a7/fb383ef7.jpg","comment_is_top":false,"comment_ctime":1574564158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574564158","product_id":100017301,"comment_content":"看数据结构 看算法，我一直对这些都不太感兴趣，给自己的要求，像看小说，看故事的心态，去理解老师的从基础到复杂点的结构，算法，坚持到现在，已经深深被结构 算法迷住。联系到生活中的事务，工作中遇到的问题，感觉结构是底层逻辑，算法是巧妙的思路与方案。","like_count":0},{"had_liked":false,"id":154235,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1574394544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574394544","product_id":100017301,"comment_content":"我们平时用的导航地图上是不是也可以看做一个图呢？每个拐角就是一个顶点，每条路就是一条边。","like_count":0},{"had_liked":false,"id":153145,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1574168061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574168061","product_id":100017301,"comment_content":"数据结构与算法之美反反复复硬是学到了这里，感谢争哥的杰作！<br>我觉得微信应该使用的是矩阵来存储，虽然浪费一些空间，但是对于微信这种社交软件来说，用户更注重的是使用时的高效，而我们的产品也是为用户服务的，所以说应该使用空间换时间的思想！","like_count":0},{"had_liked":false,"id":150351,"user_name":"S.S Mr Lin","can_delete":false,"product_type":"c1","uid":1258558,"ip_address":"","ucode":"1DDD5132B0DA64","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/3e/0b1c2b7f.jpg","comment_is_top":false,"comment_ctime":1573522321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573522321","product_id":100017301,"comment_content":"其实不管微博还是微信，应该都是分治的。这些关系应该都不是存在一整个图的，都是以用户为粒度拆分，只存储已经关注和被关注列表，然后在需要动态计算的时候可能会构造一个局部的图来计算几度好友或者推荐好友。","like_count":0},{"had_liked":false,"id":150272,"user_name":"Mr.Fu","can_delete":false,"product_type":"c1","uid":1613254,"ip_address":"","ucode":"F1E4304C5CDE52","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/c6/a72db706.jpg","comment_is_top":false,"comment_ctime":1573488614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573488614","product_id":100017301,"comment_content":"一.What-图的概念：如下就是一个图(非线性表数据结构)<br>1.图的分类：无向图(微信-不允许单向关注)、有向图(微博-允许单向关注)、带权图(QQ-亲密度)<br><br>2.图相关概念：<br>①图中的元素叫作顶点<br>②一个顶点可以与任意其他顶点建立连接关系，这种建立的关系叫作边<br>③跟顶点相连接的边的条数叫做度<br>④有向图中把度分为入度(表示有多少条边指向这个顶点)和出度(表示有多少条边是以这个顶点为起点指向其他顶点)<br>⑤在带权图中每条边都有一个权重<br><br>二.图的存储<br>邻接矩阵<br>①邻接矩阵的底层依赖一个二维数组。<br>②对于无向图来说，如果顶点 i 与顶点 j 之间有边，我们就将 A[i][j] 和 A[j][i] 标记为 1；<br>③对于有向图来说，如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，就将 A[i][j] 标记为 1。同理，如果有一条箭头从顶点 j 指向顶点 i 的边，就将 A[j][i] 标记为 1。<br>④对于带权图，数组中就存储相应的权重<br>⑤缺点：浪费存储空间<br>(1)无向图A[i][j] 等于 1，那 A[j][i] 也肯定等于 1，只需要存储一个<br>(2)稀疏图-顶点很多，但每个顶点的边并不多<br>⑥优点：<br>(1)存储方式简单、直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效<br>(2)方便计算。这是因为，用邻接矩阵的方式存储图，可以将很多图的运算转换成矩阵之间的运算<br><br><br>邻接表<br>①每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点<br>②有向图的邻接表存储方式，每个顶点对应的链表里面，存储的是指向的顶点<br>③无向图来说，每个顶点的链表中存储的，是跟这个顶点有边相连的顶点<br>④优点：存储节省空间<br>⑤缺点：查找比较耗时间(邻接表中链表的存储方式对缓存不友好，所以比起邻接矩阵，在邻接表中查询两个顶点之间的关系就没那么高效)<br>⑥可以将邻接表中的链表改成平衡二叉查找树(红黑树)等动态数据结构(跳表、散列表等)，这样就可以更加快速地查找两个顶点之间是否存在边了。<br>⑦可以将链表改成有序动态数组，可以通过二分查找的方法来快速定位两个顶点之间否是存在边<br><br>3.逆邻接表：每个顶点的链表中，存储的是指向这个顶点的顶点<br>","like_count":0},{"had_liked":false,"id":150061,"user_name":"追梦","can_delete":false,"product_type":"c1","uid":1183831,"ip_address":"","ucode":"54C6E76E8FE033","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/57/1adfd4f7.jpg","comment_is_top":false,"comment_ctime":1573456454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573456454","product_id":100017301,"comment_content":"老师，那些能查询A-B是通过几度关系就能关联上，是用结构存储的呢","like_count":0},{"had_liked":false,"id":137746,"user_name":"zcqshine","can_delete":false,"product_type":"c1","uid":1007000,"ip_address":"","ucode":"9DABA78369344E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/98/98fe8de3.jpg","comment_is_top":false,"comment_ctime":1569835047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569835047","product_id":100017301,"comment_content":"原来图中的加权可以这样来用，学习了学习了","like_count":0},{"had_liked":false,"id":135960,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1569315053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569315053","product_id":100017301,"comment_content":"感觉邻接表和逆邻接表的思路和es的倒排索引和正排索引有点类似","like_count":0},{"had_liked":false,"id":135392,"user_name":"小秋","can_delete":false,"product_type":"c1","uid":1243320,"ip_address":"","ucode":"68AC584C14DC95","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/b8/4df14e11.jpg","comment_is_top":false,"comment_ctime":1569144635,"is_pvip":false,"replies":[{"id":"51935","content":"邻接矩阵也是矩阵","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569193435,"ip_address":"","comment_id":135392,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569144635","product_id":100017301,"comment_content":"请问邻接矩阵和线性代数里面的矩阵有什么区别？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468170,"discussion_content":"邻接矩阵也是矩阵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569193435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135137,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1569036780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569036780","product_id":100017301,"comment_content":"1 用邻接表存储，类似微博 吧<br>2 求最短路径，迷宫问题，拓扑排序","like_count":0},{"had_liked":false,"id":132271,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1568077309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568077309","product_id":100017301,"comment_content":"祝王争老师节日快乐。专栏很棒，受益良多","like_count":0},{"had_liked":false,"id":130718,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1567517567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567517567","product_id":100017301,"comment_content":"思考题1：由于无向图用邻接矩阵表示是一个对称矩阵，为节省存储空间，可以把矩阵中的上三角元素或下三角元素存储到一个一维数组中。<br>思考题2：图的例子，项目管理中的任务拓扑图，关系型数据库中表之间的引用关系图，网络拓扑图等。","like_count":0},{"had_liked":false,"id":129191,"user_name":"shaomeng","can_delete":false,"product_type":"c1","uid":1006261,"ip_address":"","ucode":"BB9EA8B684A035","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/b5/f667f610.jpg","comment_is_top":false,"comment_ctime":1567059983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567059983","product_id":100017301,"comment_content":"1. <br>    1. 微信好友需要支持的操作<br>        1. 添加好友<br>        2. 获取好友列表<br>    2. 微信的用户肯定也属于稀疏图，所以使用邻接表存储<br>    3. 但是由于其两个好友之间的关系永远是双向的，所以微信的好友不需要实现逆邻接表","like_count":0},{"had_liked":false,"id":122186,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1565313963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565313963","product_id":100017301,"comment_content":"以前也在数据库保存过这种关系，但是完全不知道图这种数据结构，对于我来说完全是新的知识","like_count":0},{"had_liked":false,"id":121253,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1565087887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565087887","product_id":100017301,"comment_content":"难怪每次微博热点新闻，用户蜂拥而至的刷新话题，超过CPU运算效率，导致大片宕机，嘿嘿","like_count":0},{"had_liked":false,"id":114637,"user_name":"小白菜","can_delete":false,"product_type":"c1","uid":1568340,"ip_address":"","ucode":"ACD1267D329B96","user_header":"https://static001.geekbang.org/account/avatar/00/17/ee/54/dac0a6b6.jpg","comment_is_top":false,"comment_ctime":1563354525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563354525","product_id":100017301,"comment_content":"这一讲理解了，真的太通透了，谢谢王老师！","like_count":0},{"had_liked":false,"id":113206,"user_name":"Aleck","can_delete":false,"product_type":"c1","uid":1043172,"ip_address":"","ucode":"C952990B697C40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/e4/4c718856.jpg","comment_is_top":false,"comment_ctime":1562915354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562915354","product_id":100017301,"comment_content":"webpack的js文件处理","like_count":0},{"had_liked":false,"id":112242,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1562689599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562689599","product_id":100017301,"comment_content":"我们先考虑一下微信用户关系，我们希望有的操作是：<br>1 判断用户A是否是用户B的好朋友。<br>2 能够按照首字母排序用户A的好朋友，且分页获取。<br>3 用户A删除用户B为好友，同时B的好友列表中也没有Ａ。<br><br>首先用邻接表存储微信用户关系。因为这是一个稀疏图。微信用户几亿，每个人的好友最多也就500。<br>　　用户A：用户B-&gt;用户C-&gt;用户X<br>　　用户B：用户A-&gt;用户H-&gt;用户Z<br>　　…<br>判断用户A是不是用户B的好朋友，只需要在用户A的好友列表查找一下即可。好友列表可以用跳表存储。因为跳表可以按照首字母排序。排序好的好友列表也可以提高查询速度。第2个要求满足了。<br><br>用户A删除好友用户B，需要同时在用户A的好友列表删除B、用户B的好友链表删除A。跳表删除操作时间复杂度O(logn)。<br><br>对于数据量小的情况可以存储在内存。当用户量多的时候，一台机器就解决不了。可以使用哈希计算，将用户好友列表分别存储在不同的服务器。也可以使用外部存储（关系型数据库）存储数据。","like_count":0},{"had_liked":false,"id":110128,"user_name":"ILoveKindness","can_delete":false,"product_type":"c1","uid":1559444,"ip_address":"","ucode":"A6210B034AAC62","user_header":"https://static001.geekbang.org/account/avatar/00/17/cb/94/eedbace3.jpg","comment_is_top":false,"comment_ctime":1562199564,"is_pvip":false,"replies":[{"id":"40133","content":"意思就是把链表中的数据遍历一遍，重新构造成有序数组这样的结构。动态的意思是，有序数组中的数据会有增删操作。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562281768,"ip_address":"","comment_id":110128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562199564","product_id":100017301,"comment_content":"老师您好，我不是很明白文章中说的“将链表转换为有序动态数组”，可以解释一下嘛，谢谢老师","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456734,"discussion_content":"意思就是把链表中的数据遍历一遍，重新构造成有序数组这样的结构。动态的意思是，有序数组中的数据会有增删操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562281768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108861,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1561903917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561903917","product_id":100017301,"comment_content":"数据的存储，都会落实到数组和链表上面。依据不同的场景可以将这两种存储组合应用","like_count":0},{"had_liked":false,"id":107012,"user_name":"呆梨","can_delete":false,"product_type":"c1","uid":1069474,"ip_address":"","ucode":"7D4B961DE1EE8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/a2/4fc7df75.jpg","comment_is_top":false,"comment_ctime":1561437746,"is_pvip":false,"replies":[{"id":"38954","content":"应该没有的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561598515,"ip_address":"","comment_id":107012,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1561437746","product_id":100017301,"comment_content":"老师，邻接矩阵的有向图，感觉是画反了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455327,"discussion_content":"应该没有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561598515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128475,"discussion_content":"我咋也感觉画反了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578643053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104148,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1560667217,"is_pvip":false,"replies":[{"id":"38009","content":"指的是数据库字段索引。第一列建一个索引，第二列上再建一个索引。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560900527,"ip_address":"","comment_id":104148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560667217","product_id":100017301,"comment_content":"文中提到的索引我理解的不是很清楚，是指第一列是第二列的索引么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454145,"discussion_content":"指的是数据库字段索引。第一列建一个索引，第二列上再建一个索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560900527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104070,"user_name":"那样的月色","can_delete":false,"product_type":"c1","uid":1237353,"ip_address":"","ucode":"23B1298C465D2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/69/0db70c84.jpg","comment_is_top":false,"comment_ctime":1560611470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560611470","product_id":100017301,"comment_content":"很清晰的讲解，，，真心好","like_count":0},{"had_liked":false,"id":99541,"user_name":"浮生","can_delete":false,"product_type":"c1","uid":1439626,"ip_address":"","ucode":"95E23BE6D194FE","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/8a/46d634dd.jpg","comment_is_top":false,"comment_ctime":1559258448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559258448","product_id":100017301,"comment_content":"以前觉得学数学跟计算机达边不大，现在一看线性代数的矩阵求解，不就可以应用到这节上了，学以致用  学以致用！！！","like_count":0},{"had_liked":false,"id":97822,"user_name":"focus","can_delete":false,"product_type":"c1","uid":1368873,"ip_address":"","ucode":"04D0D0D893D50B","user_header":"https://static001.geekbang.org/account/avatar/00/14/e3/29/c324a7de.jpg","comment_is_top":false,"comment_ctime":1558786121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558786121","product_id":100017301,"comment_content":"微信可以利用散列表，散列健的唯一值对应一个好友数组. 图的应用场景，一般多对多的关系都可以利用图<br>","like_count":0},{"had_liked":false,"id":97239,"user_name":"haha蟹","can_delete":false,"product_type":"c1","uid":1239445,"ip_address":"","ucode":"E833270AA83D1E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/95/90bc14bd.jpg","comment_is_top":false,"comment_ctime":1558616593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558616593","product_id":100017301,"comment_content":"Python的方法解析顺序mro就是一种有向无环图。","like_count":0},{"had_liked":false,"id":93341,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1557454230,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1557454230","product_id":100017301,"comment_content":"微博这个例子，太形像了","like_count":0},{"had_liked":false,"id":88133,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1555856446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555856446","product_id":100017301,"comment_content":"1 微信如何存储图?<br>   建立好友<br>   删除好友<br>   好友列表.<br><br>   邻接表存储.  跳表<br><br>2 社交网络、知识图谱外，还有什么适合用图存储.<br><br>   spark 任务.","like_count":0},{"had_liked":false,"id":85453,"user_name":"H.L.","can_delete":false,"product_type":"c1","uid":1207529,"ip_address":"","ucode":"125D13548A0CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/e9/377a3b09.jpg","comment_is_top":false,"comment_ctime":1555063226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555063226","product_id":100017301,"comment_content":"图存储在内存中，还需要持久化到磁盘","like_count":0},{"had_liked":false,"id":85033,"user_name":"安南寸暖🤕","can_delete":false,"product_type":"c1","uid":1387564,"ip_address":"","ucode":"9E8036B99E3F16","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/2c/77f80dfc.jpg","comment_is_top":false,"comment_ctime":1554962882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554962882","product_id":100017301,"comment_content":"怎么不让我给其他小伙伴们回复啊，好想跟他们玩耍。","like_count":0},{"had_liked":false,"id":82766,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1554302528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554302528","product_id":100017301,"comment_content":"老师好，用红黑树，跳表优化邻接表方便查询好友列表好理解，那么散列表用来优化邻接表的应用场景是什么呢？","like_count":0},{"had_liked":false,"id":81370,"user_name":"hopher.hong","can_delete":false,"product_type":"c1","uid":1205974,"ip_address":"","ucode":"779938EDC7DBA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/d6/896cd3b9.jpg","comment_is_top":false,"comment_ctime":1553874592,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553874592","product_id":100017301,"comment_content":"请教下&quot;图&quot;数据类型，用什么存储? Neo4j？","like_count":0,"discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81790,"discussion_content":"1、数据大些可以持久化（数据库）\n2、大数据的话，可以使用分布式图计算框架Pregel","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576273808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77245,"user_name":"等待戈多","can_delete":false,"product_type":"c1","uid":1445564,"ip_address":"","ucode":"80092A3352F9AA","user_header":"https://static001.geekbang.org/account/avatar/00/16/0e/bc/97606317.jpg","comment_is_top":false,"comment_ctime":1552896322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552896322","product_id":100017301,"comment_content":"看到第一条留言感觉好亲切","like_count":0},{"had_liked":false,"id":76073,"user_name":"JKnight","can_delete":false,"product_type":"c1","uid":1330419,"ip_address":"","ucode":"709D7A51135EDE","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/f3/6f18cdae.jpg","comment_is_top":false,"comment_ctime":1552528167,"is_pvip":false,"replies":[{"id":"27868","content":"存储两份是为了查找的时候方便。比如查找a的所有好友，查找b的所有好友。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552615684,"ip_address":"","comment_id":76073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552528167","product_id":100017301,"comment_content":"想了下无向图也可以用邻接表来存储，但是a和b是好友，则a的链表中一定有b的关系，b也同样。同一个关系存储了两次有点浪费呀。有办法把这块节省下来么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443166,"discussion_content":"存储两份是为了查找的时候方便。比如查找a的所有好友，查找b的所有好友。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552615684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74342,"user_name":"鱼星草","can_delete":false,"product_type":"c1","uid":1123975,"ip_address":"","ucode":"066E61BA6BE4EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/26/87/31c785a3.jpg","comment_is_top":false,"comment_ctime":1552195457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552195457","product_id":100017301,"comment_content":"实际开发中，一般都是用关系型数据库存储吧，增删改查都方便","like_count":0},{"had_liked":false,"id":72877,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551749748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551749748","product_id":100017301,"comment_content":"本人不是科班出身，没学过相关概念，第一次听到图的概念，笔者讲的我还去查了下什么是邻接矩阵和邻接表，最后才弄懂了，感觉看这篇文章的确对人物关系图有限制提高，加油！！！","like_count":0},{"had_liked":false,"id":70940,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1551230495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551230495","product_id":100017301,"comment_content":"图是一种存储结构，用户之间的关系，是图的一种典型的例子，qq的加好友，微博关注，图分为很多种，有向图，无向图等，图的存储方式有临阶矩阵，邻接矩阵存储用的是矩阵，优点能快速查找两者的关系，缺点是浪费很多存储空间。邻接法，采用的散列表的方式存储，某个节点关注多个人，用链表存储，为了提高查询性能可以用二叉查找树。图中的元素叫顶点，关系叫边。顶点的边数叫度。有向图中分入度和出度。亲密度用的是带权图。稀疏图是说顶点很多，顶点对应的边不多，比如qq或者微信。","like_count":0},{"had_liked":false,"id":69005,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1550643229,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1550643229","product_id":100017301,"comment_content":"好友关系有图表达，基于实际需求，可以用跳表，红黑树，平衡二叉树存储领接表","like_count":0},{"had_liked":false,"id":62337,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1548034415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548034415","product_id":100017301,"comment_content":"微信的方式与微博大致相同。只不过不需要维护相应的逆邻接表了。之后可以使用跳表的方式来进行快速查询","like_count":0},{"had_liked":false,"id":57813,"user_name":"怀特","can_delete":false,"product_type":"c1","uid":1072331,"ip_address":"","ucode":"3DACB205798ED3","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/cb/3ebdcc49.jpg","comment_is_top":false,"comment_ctime":1546916183,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546916183","product_id":100017301,"comment_content":"To：传说中的成大大。<br>你这个思路不对啊。没有什么数据结构是基础的或者是高级的。数据结构都是为算法服务的，算法都是为解决问题服务的。<br>要说什么数据结构是基础的，只有一种：内存。","like_count":0},{"had_liked":false,"id":57673,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1546866830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546866830","product_id":100017301,"comment_content":"这一张也是看得清清楚楚，明明白白地😊","like_count":0},{"had_liked":false,"id":54694,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1545953980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545953980","product_id":100017301,"comment_content":"微信：无向图，用邻街表","like_count":0},{"had_liked":false,"id":50111,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1544869125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544869125","product_id":100017301,"comment_content":"请问微信实际上就是把好友关系用邻接表存储在内存中吗？那数据库有没有持久保存好友关系呢","like_count":0},{"had_liked":false,"id":49813,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544774861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544774861","product_id":100017301,"comment_content":"链表对存储方式对缓存不友好<br>图搜索、最短路径、最小生成树、二分图<br>无向图、有向图、戴荃无向图<br>（时间控件悖论；用时间换空间，用控件换时间）<br>邻接矩阵------存储方式简单，直接、基于数组，支持随机存取------就是费空间<br>邻接表------链表的缺陷都暴露在这里了，查询缓慢，可以考虑用（二叉查找树，跳表，红黑树，散列表等动态数据结构）<br>邻接表，逆临表<br>思考题：常年不思考的人思考起来好难","like_count":0},{"had_liked":false,"id":46433,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1543925092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543925092","product_id":100017301,"comment_content":"java内存模型中的堆内存中存储对象 对象之间的引用关系 是有向图存储的","like_count":0},{"had_liked":false,"id":46207,"user_name":"_Aldridge","can_delete":false,"product_type":"c1","uid":1163265,"ip_address":"","ucode":"83F1E5E2F9F3DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/01/60835090.jpg","comment_is_top":false,"comment_ctime":1543884657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543884657","product_id":100017301,"comment_content":"深入浅出，棒！","like_count":0},{"had_liked":false,"id":45806,"user_name":"jon","can_delete":false,"product_type":"c1","uid":1253287,"ip_address":"","ucode":"5768A34E292CAA","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","comment_is_top":false,"comment_ctime":1543798703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543798703","product_id":100017301,"comment_content":"图可以存储为邻接矩阵二维数组，好处是查找快，缺点是稀疏占空间。邻接表，省空间，可以配合平衡二叉树，跳表存储。","like_count":0},{"had_liked":false,"id":45662,"user_name":"王艺霖","can_delete":false,"product_type":"c1","uid":1113992,"ip_address":"","ucode":"351C456CAEAD25","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/88/1da2546f.jpg","comment_is_top":false,"comment_ctime":1543739943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543739943","product_id":100017301,"comment_content":"我们最近在用图做用户id的打通，id是顶点，映射关系是边，然后将两个渠道的id根据映射关系做连接，最终形成一个新的统一的用户id，中间涉及到复杂的多对多关系，老师后面会讲这种涉及顶点之间关联的算法吗","like_count":0},{"had_liked":false,"id":45574,"user_name":"卡佩罗🍀","can_delete":false,"product_type":"c1","uid":1182943,"ip_address":"","ucode":"47B24D7D41B4EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/df/c94bf568.jpg","comment_is_top":false,"comment_ctime":1543683255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543683255","product_id":100017301,"comment_content":"有没有例子","like_count":0},{"had_liked":false,"id":45210,"user_name":"起点·终站","can_delete":false,"product_type":"c1","uid":1239857,"ip_address":"","ucode":"A5AD31F28C240E","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/31/96b76ca8.jpg","comment_is_top":false,"comment_ctime":1543561163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543561163","product_id":100017301,"comment_content":"这个图啊。比各种树好理解多了、、、","like_count":0},{"had_liked":false,"id":45197,"user_name":"DebugDog","can_delete":false,"product_type":"c1","uid":1027798,"ip_address":"","ucode":"1664D37CE03B9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/d6/fbb8236d.jpg","comment_is_top":false,"comment_ctime":1543559621,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543559621","product_id":100017301,"comment_content":"图的邻接矩阵表示，其中的数字还是不太明白啊","like_count":0},{"had_liked":false,"id":45195,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1543559482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543559482","product_id":100017301,"comment_content":"比如子类继承父类，方法调用这些也可以看成是图？","like_count":0},{"had_liked":false,"id":45080,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1543544305,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543544305","product_id":100017301,"comment_content":"思考题2: 搜索 城市交通 如何从一个地点乘坐交通工具去另一个地点","like_count":0},{"had_liked":false,"id":45075,"user_name":"发条张","can_delete":false,"product_type":"c1","uid":1243066,"ip_address":"","ucode":"8435FD1CD3DA9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/ba/57931fb7.jpg","comment_is_top":false,"comment_ctime":1543544033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543544033","product_id":100017301,"comment_content":"用邻接矩阵可以表示出两顶点间的方位吗？","like_count":0}]}