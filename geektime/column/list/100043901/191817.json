{"id":191817,"title":"08 | 指针系列（二）：记住，指针变量也是变量","content":"<p>你好，我是胡光，咱们又见面了，上节课中，我们介绍了结构体相关的基础知识，也介绍了指针变量，并且教给你了最重要的一句话“指针变量也是变量”。这句话的意思在于告诉你，所有你对变量的理解，都可以放到指针变量上，例如：变量有类型，变量有大小，变量里面的值支持某些操作等等。今天呢，我们就来详细地聊一下指针变量。</p><h2>任务回顾</h2><p>在正式开始之前，我们先来回顾一下上节课的任务内容：</p><p>上节课我们说，如果给我们如下 Data 结构体类型，这个类型中有两个整型数据字段 x，y：</p><pre><code>struct Data {\n    int x, y;\n} a[2];\n</code></pre><p>那么请用尽可能多得形式，替换下面代码中 &amp;a[1].x 的部分，使得代码效果不变：</p><pre><code>struct Data *p = a;\nprintf(&quot;%p&quot;, &amp;a[1].x);\n</code></pre><p>你会看到，如上代码中，就是输出 a[1].x 的地址值。</p><p>通过上节的学习，你现在已经掌握了关于结构体的相关知识，也初步地接触了“指针变量也是变量”的这个概念，今天就让我们再深入了解指针变量吧。</p><h2>必知必会，查缺补漏</h2><h4>1. 深入理解：指针变量的类型</h4><p>还记得我们是如何定义 p 变量的么？代码语句是：</p><pre><code> int *p  \n</code></pre><p>之前我们介绍了，语句中的 * 代表 p 变量是一个指针变量，而 int 的作用是什么呢？只是用来说明 p 是一个指向整型存储区的指针变量么？其实 int 更大的作用，就是用来解决我们上面提到的那个问题，根据 p 变量中的内容，我们可以找到一个存储区的首地址，然后再根据 p 的类型，就可以确定要取几个字节中的内容了。</p><!-- [[[read_end]]] --><p>下面给你举个例子：</p><pre><code>int a = 0x61626364;\nint *p = &amp;a;\nchar *q = (char *)&amp;a;\nprintf(&quot;%x %c\\n&quot;, *p, *q);\n</code></pre><p>这段上面代码中，p 和 q 同时指向了 a 变量的存储区。而取值 p 和取值 q 的结果，却截然不同。这是因为，取值 p 时，程序会从 p 所指向的首地址开始，取 4 个字节的内容作为数据内容进行解析，而取值 q 的时候，则是取 1 个字节的内容，作为数据内容进行解析。</p><p>你如果运行上述代码，大概率你会看到输出内容是：</p><pre><code>61626364 d \n</code></pre><p>小概率会看到输出内容是：</p><pre><code>61626364 a  \n</code></pre><p>这个原因和“大端机”“小端机”有关，关于这个问题，你要是有兴趣的话，可以自行查阅相关资料。下面的图中呢，就是以“小端机”为例，说明的 p 和 q 取值的问题：<br>\n<img src=\"https://static001.geekbang.org/resource/image/2f/53/2f8c77a569286f3bc3fb8adbf0dc3553.jpg?wh=3675*1338\" alt=\"\" title=\"图1：指针变量取值示意图\"></p><p>如图所示，p 变量对应了 a 变量整个存储区中的内容，所以输出取值 p 和 a 原本存储内容相同。而 q 变量由于是字符型指针变量，只能从首地址取到 1 个字节的内容，取到的就是64，这里的 64 注意可是 16 进制的数字，对应到 10 进制数字就是 100，而 %c 是输出一个字符，数字 100 对应的字符就是英文小写字母 ‘d’。</p><p>实际上，我们看到的任何字符，在底层都对应了一个具体的数字。常用的有字符 ‘a’，对应的是 97，字符 ‘b’，对应的是 98，以此类推，还有数字 ‘0’ 是 48，数字 ‘1’ 是 49，后面的对应规律类似，我们管这个对应规则叫做 ASCII 编码。</p><p>指针变量的类型，除了用来确定取值时，确定覆盖存储区的大小以外，还有其他作用。想一想，整型支持加减乘除操作，而我们所谓的地址类型的值，也可以在其上面做加减的操作，你可以试着运行下面的代码：</p><pre><code>int a, *p = &amp;a;\nchar *q = &amp;a;\nprintf(&quot;%p %p&quot;, p, q);\nprintf(&quot;%p %p&quot;, p + 1, q + 1);\n</code></pre><p>代码中，定义了三个变量，其中一个整型变量 a，两个指针变量 p 和 q，其中 p 是整型指针变量，q 是字符型指针变量。然后分别输出 p 和 q，以及 p + 1 和 q + 1 的值以作对比。</p><p>如果你运行上面的程序，你会看到，p 和 q 的值是相同的，都是 a 变量的首地址，但是 p + 1 和 q + 1 的值却不同。如果你仔细观察会发现，p + 1 的地址值与 a 的地址之间差了 4 个字节，而 q + 1 的地址值与 a 的地址之间只差了 1 个字节。<br>\n<img src=\"https://static001.geekbang.org/resource/image/19/f1/199260e49de2ab7bd33cf2610b4a33f1.jpg?wh=3919*1791\" alt=\"\" title=\"图2：地址加法操作结果\"></p><p>通过上图，你就可以更清晰的看到，由于 p 是整型指针，所以 p + 1 的计算结果，是向后跳了一个整型，相当于从第一个整型的首地址，跳到第二个整型的首地址；而由于 q 是字符型指针，所以 q + 1 的计算结果，就是向后跳了一个字符型。</p><p>这样，你就可以明白了吧？如果一个浮点型的指针变量加 1，就会向后跳一个浮点型。这就是<strong>指针变量类型的第二个作用：在加法或者减法时，确定增加或者减少的地址长度</strong>。</p><h4>2. 指针变量与数组</h4><p>理解了指针类型的作用以后，我们再回到“指针变量也是变量”这句话上，指针变量所存储的值，就是地址。在之前的学习中，还有什么是与地址相关的概念呢？你一定会想起数组这个概念。对，数组名代表了数组中第一个元素的首地址，也是整个数组的首地址，既然是地址，那就可以用指针变量来存储。</p><p>下面，我就跟你说几个之前没有告诉你，但却很有趣的事情。</p><p>假设有一个整型数组arr，如何表示第二个元素的地址呢？是不是 &amp;arr[1] ？如果 arr 也代表了整个数组的首地址，同时把这个首地址存储在一个整型指针变量 p 中，那么用这个指针变量如何表示第二个元素的地址呢？</p><p>根据上面的学习，应该是 p + 1。那如何表示 arr[n] 元素的地址呢？稍加思索，你就应该知道就是 p + n。所以我们现在知道了，在程序中，&amp;arr[n] 等价于 p + n，当然也等价于 arr + n，聪明的你别犯糊涂，一定要注意，参与运算的是值，不是变量名！</p><p>既然 p 中存储了一个地址，可以参与加法运算，那么 arr 实际上也代表了一个地址，也可以参与加法运算。地址才是参与运算的值，指针只是存储地址值的变量，只是一个容器。所以，不是指针支持加减法操作，而是地址这种类型的值，支持加减法操作。</p><p>在这里，我们回头看数组名称后面的那一对方括号，如果我告诉你这也是一个运算符，你会想到什么？请注意认真看下面这一段合理化的猜想推理：</p><p>如果那一对方括号代表了运算符，而运算符本质上是作用在值上面，也就是说，当我们写 arr[1] 的时候，方括号运算符前面看似放着一个数组名，实际上放了一个地址，放了一个数组的首地址，因为 arr 就是数组的首地址，还是那句话：地址才是参与运算的值。也就是说，当我们把数组的首地址，存储在一个指针变量中以后，这个指针变量配合上方括号运算符，也可以达到相同的效果！</p><p>为了让你更清楚的理解，准备了如下演示代码：</p><pre><code>int arr[100] = {1, 2, 3, 4};\nint *p = arr;\nprintf(&quot;%d %d\\n&quot;, arr[1], p[1]);\n</code></pre><p>代码中，我们定义了一个整型数组 arr，然后将数组的首地址赋值给了一个整型指针变量 p，最后分别输出 arr[1] 和 p[1] 的值，你将看到输出的是同一个值，都是数组中第二个元素的值。</p><p>最后，我用一张图给你展示了指针与数组的几个程序代码层面的等价关系，在实际编程过程中，重点是需要分析，相关的指针操作后，对应的到底是哪个元素，对应的是这个元素的首地址，还是这个元素的值。<br>\n<img src=\"https://static001.geekbang.org/resource/image/08/af/08de66172ebcf2f13cc0ff2b8deba8af.jpg?wh=2638*1621\" alt=\"\" title=\"图3：指针与数组的等价表示\"></p><p>从上图的等价表示中，你可能会自己推导出另外一种等价表示*(p + 5) 等于 arr[5]。我希望你重视等价表示的学习，因为所谓等价表示，就是在写程序的时候，多种等价表示，写哪一种都一样。这就造成了，不同的编码习惯，会用不同的符号来完成程序，如果你不理解这些等价的表示方法，很有可能在看别人程序的过程中，就会出现看不懂的现象。</p><h4>3.指针变量的大小</h4><p>最后，我们再回到“指针变量也是变量”这句话上。只要是变量，就占据一定的存储空间，那一个指针变量占多少个字节的存储空间呢？</p><p>在回答这个问题之前，我先问你另一个问题，请你思考一下：是整型指针变量占用的存储空间大，还是字符型指针变量占用的存储空间大？我们想想啊，一种数据类型占用多少存储空间跟什么有关系？和存储的值有关系啊。当你想存储一个 32 位整数的时候，就必须要用 4 个字节，不能用 2 个字节，也不能用 3 个字节，这都是不够的。</p><p>究竟是哪一种类型的指针占的存储空间大呢？答案是：一样大。为什么呢？就是因为，无论是什么类型的指针，存储的值都是某个字节的地址，而在一个系统中，无论是哪个字节的地址，二进制数据长度都是一样的。所以，无论什么类型的指针，所需要存储的值的底层表示长度是一样的，那么所占用的存储空间也当然是一样的了！</p><p>有句话描述的非常形象“类型就是指针变量的职业”。什么意思呢？我们知道现实生活中，有些人做保安，有些人做工程师，还有些人当艺术家，可不管你做什么，你无法改变的是你作为人的生理结构。所以放到指针变量的概念里，那就是不管什么类型的指针，指针所改变不了的是其占用空间的存储大小，因为不管是什么类型的指针，存储的都是无差别的地址信息。</p><h2>任务参考答案</h2><p>至此，我们终于准备完了所有的基础知识，下面就让我们回到最开始的那个任务吧。对于这个任务，如果我们要是想写的话，至少能写出 20 种以上的答案。这里，我会选出两种比较有代表性的、比较有趣的做法分享给你。</p><h4>1.  间接引用</h4><p>首先来看第一种：</p><pre><code>struct Data *p = a;\nprintf(&quot;%p&quot;, &amp;((a + 1)-&gt;x));\n</code></pre><p>这里用到了一个之前提到过，可是没有讲到的运算符，减号大于号（-&gt;），组合起来，我们叫做“间接引用”运算符，作用可以和“直接引用”运算符对比。</p><p>例如：a 是一个结构体变量，a 中有一个字段叫做 x，由 a 去找到 x，这个过程比较直接，我们就用 a.x 来表示。可如果 p 是一个指针，指向 a 变量，如果要是由 p 去找到 x，这个过程就是个间接的过程，所以我们就使用 p-&gt;x。简单来说，就是：是结构体变量引用字段，就直接引用，如果是指针想引用字段，就是间接引用。</p><p>在这个第一种做法中，直接用 a + 1 定位到第二个结构体元素的首地址，然后间接引用 x 字段，最后再对 x 字段取地址，那么得到的和原任务中所输出的地址是一样的。</p><h4>2. 巧妙使用指针类型</h4><p>再来看一下第二种：</p><pre><code>struct Data *p = a;\nprintf(&quot;%p&quot;, &amp;(a[0].y) + 1);\n</code></pre><p>这个第二种做法就有点儿意思了。首先，它先定位到 a[0] 元素中 y 字段的首地址，然后对 y 字段取地址，这个时候，由于 y 字段是整型，所以取到的地址类型就是整型地址，之后再对这个整型地址执行 +1 操作，得到的也是 a[1].x 的首地址。</p><p>按照之前所学，画出内存中的存储示意图，你就会得到下面这张图的具体情况：<br>\n<img src=\"https://static001.geekbang.org/resource/image/40/bd/409bd833baaab2a1ac3b89c27688cfbd.jpg?wh=4017*1432\" alt=\"\" title=\"图4：a数组内存结构示意图\"></p><p>第二种方法巧妙的利用了地址类型这个知识点，通过整型地址加法操作结合对于内存存储结构的知识，综合运用以上两个知识点，最终定位 a[1].x 变量的地址。如果你可以独立想出这个方案，那我真的是要给你点赞的！</p><p>上面的方案中，都在用原数组 a 去定位 a[1].x 变量的地址，你可以使用 p 指针，完成相同的操作么？欢迎把你的答案写在留言区，让我也欣赏一下你的思维方式。记住，这个问题，至少能写出来 20 种以上的等价表示形式。</p><h2>课程小结</h2><p>今天我们终于讲完了指针部分，这一部分的知识，再回过头来看，虽然各种各样的知识点，可我想让你记住的还是那一句话：“指针变量也是变量”。</p><p>而在今天的学习中，我希望你记住的重点，有以下三点：</p><ol>\n<li>指针的类型，决定了指针取值时所取的字节数量。</li>\n<li>指针的类型，决定了指针加减法过程中，所跨越的字节数量。</li>\n<li>无论是什么类型的指针，大小都相等，因为地址信息是统一规格的。</li>\n</ol><p>好了，今天就到了这里了，我是胡光，我们下次见！</p>","comments":[{"had_liked":false,"id":173893,"user_name":"徐洲更","can_delete":false,"product_type":"c1","uid":1314643,"ip_address":"","ucode":"F8A323CB732D05","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/53/92a50f01.jpg","comment_is_top":false,"comment_ctime":1579762206,"is_pvip":true,"replies":[{"id":"67593","content":"类型信息会被转换成相关的汇编代码。这个当中涉及到两件事情：一个是类型检查，这个是在编译阶段就做完了，另一个就是具体的程序运行，而运行阶段就已经没有了类型信息。也就是说，你所谓的出错，是在编译阶段报的错误。这个问题，你可以往后看，看到预处理命令一节的时候，可能就会认识的更清晰了。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1579779647,"ip_address":"","comment_id":173893,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23054598686","product_id":100043901,"comment_content":"同样也有@大牛凯一样疑惑，不过不只是针对指针，而是所有数据类型。C语言是如何存放类型信息呢？对于`int a`而言，使用`a=&quot;123&quot;`将字符串赋值给整型是会出问题的。这种类型错误的底层原理是啥呢？是不是C语言会划定一些区域，用来存放不同类型的变量呢？","like_count":5,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482231,"discussion_content":"类型信息会被转换成相关的汇编代码。这个当中涉及到两件事情：一个是类型检查，这个是在编译阶段就做完了，另一个就是具体的程序运行，而运行阶段就已经没有了类型信息。也就是说，你所谓的出错，是在编译阶段报的错误。这个问题，你可以往后看，看到预处理命令一节的时候，可能就会认识的更清晰了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579779647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064616,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3e/a8/66088c47.jpg","nickname":"学写代码的猪","note":"","ucode":"4EBA2329450B53","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":150523,"discussion_content":"这个，就不是学习C语言能解决的了，建议《深入理解计算机系统》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579794661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213548,"user_name":"Noah●^●","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1588471595,"is_pvip":false,"replies":[{"id":"79300","content":"不错！很棒！能把指针理解运用到这个程度，今后绝大多数和指针相关的问题，你基本就都可以自己理解和解决了。d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1588659597,"ip_address":"","comment_id":213548,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14473373483","product_id":100043901,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br><br>struct Date<br>{<br>    int x, y;<br>} a[2];<br><br>int main(void)<br>{<br>    struct Date *p = a;<br>    printf(&quot;%p\\n&quot;, &amp;a[1].x);<br>    printf(&quot;%p\\n&quot;, &amp;(a + 1)-&gt;x);   &#47;&#47; 方法1, 效果和上面一样<br>    printf(&quot;%p\\n&quot;, &amp;(a[0].y) + 1); &#47;&#47; 定位到 a[0].y, 然后+1就是a[1].x的地址了<br>    printf(&quot;%p\\n&quot;, &amp;(p + 1)-&gt;x);<br>    printf(&quot;%p\\n&quot;, &amp;(p-&gt;y) + 1);<br>    return 0;<br>}<br>老师 这是我的思路","like_count":3,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493810,"discussion_content":"不错！很棒！能把指针理解运用到这个程度，今后绝大多数和指针相关的问题，你基本就都可以自己理解和解决了。d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588659597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800491,"avatar":"","nickname":"manjaro","note":"","ucode":"39ACE997F6CC58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312026,"discussion_content":"这里指针P的类型不是Date 应该是8啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602565846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218879,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1589891065,"is_pvip":true,"replies":[{"id":"83531","content":"这个和编程环境没关系，主要是&amp;a 返回的地址类型和指针类型不匹配导致的。你进行强制类型转换就好了。语法类似于:<br> char *q=(char *)&amp;a; <br>这样就把 int *类型的地址，转换成了 char *类型的地址","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592214521,"ip_address":"","comment_id":218879,"utype":1}],"discussion_count":5,"race_medal":5,"score":"10179825657","product_id":100043901,"comment_content":"茶艺师学编程<br><br>老师，在我windows DEV环境里，写<br><br>int a , *p = &amp;a;<br>char *q = &amp;a;<br><br>提示错误，说是int型与char型用在a上有冲突。","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495610,"discussion_content":"这个和编程环境没关系，主要是&amp;amp;a 返回的地址类型和指针类型不匹配导致的。你进行强制类型转换就好了。语法类似于:\n char *q=(char *)&amp;amp;a; \n这样就把 int *类型的地址，转换成了 char *类型的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592214521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2338175,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ad/7f/24dc8415.jpg","nickname":"云峰","note":"","ucode":"CE1498C4C4F9A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358245,"discussion_content":"老师你的文稿里这里写错了吧？\nint a, *p = &amp;a;\nchar *q = &amp;a;  //应该是char* q = (char*) &amp;a;\nprintf(&#34;%p %p&#34;, p, q);\nprintf(&#34;%p %p&#34;, p + 1, q + 1);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615951877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1185974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","nickname":"马建华","note":"","ucode":"928189590259AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357198,"discussion_content":"我也遇到这个问题！谢谢你的提问和老师的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615750262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1917663,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","nickname":"罗耀龙@坐忘","note":"","ucode":"3CEA258DE7F3C7","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303742,"discussion_content":"谢谢老师的讲解，现在终于明白它的意思了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599367763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1917663,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","nickname":"罗耀龙@坐忘","note":"","ucode":"3CEA258DE7F3C7","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283586,"discussion_content":"受教了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592304457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177105,"user_name":"rocedu","can_delete":false,"product_type":"c1","uid":1013097,"ip_address":"","ucode":"E46E29CBBB94A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/69/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1581287347,"is_pvip":true,"replies":[{"id":"69094","content":"^_^","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581596147,"ip_address":"","comment_id":177105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171221939","product_id":100043901,"comment_content":"把内存抽象成字节数组，上面内容就更容易理解了，总结的真好！","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483308,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581596147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173834,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1579716683,"is_pvip":false,"replies":[{"id":"67591","content":"这个信息已经转换成了相关的汇编代码，你想想，指针的类型是不是只有在加减运算和取值操作的时候有用？那么转换成汇编的时候，只需要对这两个操作，做针对性的转换即可。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1579779442,"ip_address":"","comment_id":173834,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10169651275","product_id":100043901,"comment_content":"老师好，请教一个问题，所有指针如果都是无差别存储地址的话，那拿到一个指针如何判断它的类型呢？整数型和字符型指针中，“整数”和“字符”这两个类型是存放在哪的呢？","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482216,"discussion_content":"这个信息已经转换成了相关的汇编代码，你想想，指针的类型是不是只有在加减运算和取值操作的时候有用？那么转换成汇编的时候，只需要对这两个操作，做针对性的转换即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579779442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064616,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3e/a8/66088c47.jpg","nickname":"学写代码的猪","note":"","ucode":"4EBA2329450B53","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":149279,"discussion_content":"是什么类型的指针，在你定义指针变量的时候就决定了的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579742823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230619,"user_name":"Geek_7c47de","can_delete":false,"product_type":"c1","uid":2048104,"ip_address":"","ucode":"4AAB2C011B3A49","user_header":"","comment_is_top":false,"comment_ctime":1593433197,"is_pvip":false,"replies":[{"id":"86272","content":"指针也有可能指向0x61，这个跟操作系统有关系，大端系统和小端系统的区别。我们一般的都是小端系统，数字的低位存储在低地址位，所以指针指向0x64。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1594399719,"ip_address":"","comment_id":230619,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888400493","product_id":100043901,"comment_content":"老师你好，我有个小问题。<br>你在本节课中所举例子 0x61626364 为什么指针指向的的第一个字节不是0x61而是0x64呢？","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499965,"discussion_content":"指针也有可能指向0x61，这个跟操作系统有关系，大端系统和小端系统的区别。我们一般的都是小端系统，数字的低位存储在低地址位，所以指针指向0x64。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594399719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228286,"user_name":"Jackie","can_delete":false,"product_type":"c1","uid":2042383,"ip_address":"","ucode":"7D8E76F87528BB","user_header":"","comment_is_top":false,"comment_ctime":1592633660,"is_pvip":false,"replies":[{"id":"86278","content":"完全正确！程序一旦编译完成以后，就没有了类型的概念。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1594400313,"ip_address":"","comment_id":228286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887600956","product_id":100043901,"comment_content":"关于变量类型的区分，我的理解是在代码里声明了int a之后，编译的词法分析阶段会查表，把int对应的4这个大小对源码做转换，比如对一个int *p变量来说，p+1的源码，编译后会变成p的地址加上1*4这里的1是源码里p+1的1，4是int类型查表得到的4，关于类型的静态检查，这样理解对吗？","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498984,"discussion_content":"完全正确！程序一旦编译完成以后，就没有了类型的概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594400313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206762,"user_name":"三件事","can_delete":false,"product_type":"c1","uid":1055819,"ip_address":"","ucode":"BCC867C8961A24","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/4b/2e5df06f.jpg","comment_is_top":false,"comment_ctime":1586931082,"is_pvip":false,"replies":[{"id":"77393","content":"这个例子不太严谨，越界以后能否访问到i，取决于操作系统中系统栈的增长方向。大多数的操作系统中，确实会死循环，在某些版本的操作系统中，这个程序就不会死循环。<br><br>数字越界后，还是正常的访问，没啥特殊的。arr[1]就是从数组的首地址向后跳跃1个元素长度所到的元素位置，arr[100]就是跳跃100个元素长度。具体跳到哪里，根据指针的加法运算规则计算即可，你可以先往后看完指针相关知识以后再回来理解你说的这个问题。否则，很难跟你解释。(｡ì _ í｡)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1587018967,"ip_address":"","comment_id":206762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881898378","product_id":100043901,"comment_content":"int main(int argc, char const *argv[])<br>{<br>    int i = 0;<br>    int arr[3] = {0};<br>    for (; i &lt;= 3; i++) {<br>        arr[i] = 0;<br>        printf(&quot;Hello world\\n&quot;);<br>    }<br>    return 0;<br>}<br><br>老师，这是之前在争哥的数据结构之美中遇到的一个问题，说是 printf 会被执行无数次，原因是数组越界后，c 可以访问任意的内存地址。但在这个例子里，arr[i] 越界后又正好访问到 i = 0 的地址，所以会无限循环。<br><br>我自己试了下，并没有出现循环，而是打印了四次之后就中断了。<br><br><br>libsystem_kernel.dylib`__pthread_kill:<br>    0x7fff64f437f0 &lt;+0&gt;:  movl   $0x2000148, %eax          ; imm = 0x2000148 <br>    0x7fff64f437f5 &lt;+5&gt;:  movq   %rcx, %r10<br>    0x7fff64f437f8 &lt;+8&gt;:  syscall <br>-&gt;  0x7fff64f437fa &lt;+10&gt;: jae    0x7fff64f43804            ; &lt;+20&gt;<br>    0x7fff64f437fc &lt;+12&gt;: movq   %rax, %rdi<br>    0x7fff64f437ff &lt;+15&gt;: jmp    0x7fff64f3da89            ; cerror_nocancel<br>    0x7fff64f43804 &lt;+20&gt;: retq   <br>    0x7fff64f43805 &lt;+21&gt;: nop    <br>    0x7fff64f43806 &lt;+22&gt;: nop    <br>    0x7fff64f43807 &lt;+23&gt;: nop<br><br>所以请问下老师，数组越界后内存到底是怎么访问的？上面这个例子是恰好无限循环了吗？","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491893,"discussion_content":"这个例子不太严谨，越界以后能否访问到i，取决于操作系统中系统栈的增长方向。大多数的操作系统中，确实会死循环，在某些版本的操作系统中，这个程序就不会死循环。\n\n数字越界后，还是正常的访问，没啥特殊的。arr[1]就是从数组的首地址向后跳跃1个元素长度所到的元素位置，arr[100]就是跳跃100个元素长度。具体跳到哪里，根据指针的加法运算规则计算即可，你可以先往后看完指针相关知识以后再回来理解你说的这个问题。否则，很难跟你解释。(｡ì _ í｡)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587018967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202947,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1586091926,"is_pvip":false,"replies":[{"id":"75896","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1586138753,"ip_address":"","comment_id":202947,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5881059222","product_id":100043901,"comment_content":"不管你住大别墅还是我住小茅屋，写信邮寄的地址格式和信封标准是一样规范的；在Windows系统里一个执行程序还是一个文件所建的快捷方式都是1kB，不管源文件大有多大、是什么类型。需要多理解的是等价表示，理解的等价表示方法越广泛越有深度对他人的表示方法兼容性就越强。兼容性强不管是维护他人的代码还是领导他人做事，都很容易建立权力影响关系。","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490715,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586138753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189029,"user_name":"郑江北","can_delete":false,"product_type":"c1","uid":1869550,"ip_address":"","ucode":"DD74B394EB91E9","user_header":"","comment_is_top":false,"comment_ctime":1584448431,"is_pvip":false,"replies":[{"id":"72967","content":"不是效率问题，而是功能问题，很多功能实现，传统的变量无法做到，需要依靠在处理过程中传递变量原本的地址才能做到。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1584470333,"ip_address":"","comment_id":189029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879415727","product_id":100043901,"comment_content":"老师，我有个疑问，由于我是半路出家的，我自学的java了解java里面的变量，C中这个指针变量的作用是什么我一直有疑惑，比如定义一个int型变量a，那么我用变量名就可以做到赋值和取值，为什么要去用指针呢？还是说指针是存储的内存地址更直接一些，或者说更高效一些呢？","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487594,"discussion_content":"不是效率问题，而是功能问题，很多功能实现，传统的变量无法做到，需要依靠在处理过程中传递变量原本的地址才能做到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584470333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356858,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"上海","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1662645017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662645017","product_id":100043901,"comment_content":"指针变量也是变量。看着简单的一句话，完全理解还需要一点时间和一些实际操作","like_count":0},{"had_liked":false,"id":343123,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1650640321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650640321","product_id":100043901,"comment_content":"而由于 q 是字符型指针，所以 q + 1 的计算结果，就是向后跳了一个字符型。老师一个字符型只占一个字节，一个整型为啥占4个字节","like_count":0},{"had_liked":false,"id":244893,"user_name":"兰亮亮","can_delete":false,"product_type":"c1","uid":1326980,"ip_address":"","ucode":"B232C0C1CCEEB7","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/84/095ad69d.jpg","comment_is_top":false,"comment_ctime":1598718396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598718396","product_id":100043901,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br><br>struct Date<br>{<br>    int x, y;<br>} a[2];<br><br>int main(void)<br>{<br>    struct Date *p = a;<br>      printf(&quot;%p\\n&quot;,&amp;((p+1)-&gt;x ));<br>    printf(&quot;%p\\n&quot;, &amp;(a+1)-&gt;x); <br>    printf(&quot;%p\\n&quot;,&amp;(a[1].x ));<br>    printf(&quot;%p\\n&quot;,&amp;(a-&gt;y)+1 );<br>    printf(&quot;%p\\n&quot;,&amp;(p-&gt;y )+1);<br>    printf(&quot;%p\\n&quot;,&amp;(p-&gt;x )+2);<br>    printf(&quot;%p\\n&quot;,&amp;(a-&gt;x )+2);<br>    printf(&quot;%p\\n&quot;,&amp;((a+1)-&gt;y )-1);<br>    printf(&quot;%p\\n&quot;,&amp;((p+1)-&gt;y )-1);<br>    printf(&quot;%p\\n&quot;,&amp;a[0]+1);<br>    printf(&quot;%p\\n&quot;,p+1);<br>    printf(&quot;%p\\n&quot;,a+1);<br>    return 0;<br>}","like_count":0},{"had_liked":false,"id":240220,"user_name":"roychris","can_delete":false,"product_type":"c1","uid":1171260,"ip_address":"","ucode":"B0E239FB11A006","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/etbNBmR5PEicra7jbaV9pRsCaibXZ3ichB6JicMOnYowP65W5QMKb8Zicud19jicmEGAGh8ylwDXoYM3SHVU6hf6dFpQ/132","comment_is_top":false,"comment_ctime":1596792299,"is_pvip":false,"replies":[{"id":"89689","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡光","uid":"1374625","ctime":1598066739,"ip_address":"","comment_id":240220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596792299","product_id":100043901,"comment_content":"先使用这个八种写法吧：<br>#include &lt;stdio.h&gt;<br>int main() {   <br><br>struct Data {<br>    int x, y;<br>} a[2];<br><br>struct Data *p = a;<br>printf(&quot;%p\\n&quot;, &amp;a[1].x);<br>printf(&quot;%p\\n&quot;, &amp;p[1].x);<br>printf(&quot;%p\\n&quot;, &amp;((a + 1)-&gt;x));<br>printf(&quot;%p\\n&quot;, &amp;((p + 1)-&gt;x));<br>printf(&quot;%p\\n&quot;, &amp;(p-&gt;y) + 1);<br>printf(&quot;%p\\n&quot;, &amp;(a-&gt;y) + 1);<br>printf(&quot;%p\\n&quot;, p + 1);<br>printf(&quot;%p\\n&quot;, a + 1);<br>    return 0;<br>}","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503379,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598066739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213549,"user_name":"Noah●^●","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1588471777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588471777","product_id":100043901,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br><br>struct Date<br>{<br>    int x, y;<br>} a[2];<br><br>int main(void)<br>{<br>    struct Date *p = a;<br>    printf(&quot;%p\\n&quot;, &amp;a[1].x);<br>    printf(&quot;%p\\n&quot;, &amp;(a + 1)-&gt;x);   &#47;&#47; 方法1, 效果和上面一样<br>    printf(&quot;%p\\n&quot;, &amp;(a[0].y) + 1); &#47;&#47; 定位到 a[0].y, 然后+1就是a[1].x的地址了<br>    printf(&quot;%p\\n&quot;, &amp;(p + 1)-&gt;x);<br>    printf(&quot;%p\\n&quot;, &amp;(p-&gt;y) + 1);<br>    printf(&quot;%p\\n&quot;, &amp;(p + 1)-&gt;y - 1);<br>    printf(&quot;%p\\n&quot;, &amp;(p-&gt;x) + 2);<br>    printf(&quot;%p\\n&quot;, &amp;(p)-&gt;x + 2);<br>    return 0;<br>}<br>","like_count":0},{"had_liked":false,"id":206757,"user_name":"三件事","can_delete":false,"product_type":"c1","uid":1055819,"ip_address":"","ucode":"BCC867C8961A24","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/4b/2e5df06f.jpg","comment_is_top":false,"comment_ctime":1586930462,"is_pvip":false,"replies":[{"id":"77305","content":"你这个问题，跟编译器无关，是你的ide的静态语法检查的辅助功能。这跟你ide有关，属于个例问题。另外，加*与不加*，完全是两种类型。不一样的。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1587001064,"ip_address":"","comment_id":206757,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586930462","product_id":100043901,"comment_content":"void lookup_by_lastname(char lastname[MAXNAME], int key, struct Employee employee[MAXCNT]) {<br>}<br><br>老师请问下，上面这个方法是我定义的，但是在 ide 里，我把鼠标悬停到这个方法名上时，显示的是下面的这样<br><br>void lookup_by_lastname(char *lastname[MAXNAME], int key, struct Employee *employee[MAXCNT]) {<br>}<br><br>lastname 和 employee 前面会被加上 * 号，这是为什么呢？是编译器替我们做的优化吗？<br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491891,"discussion_content":"你这个问题，跟编译器无关，是你的ide的静态语法检查的辅助功能。这跟你ide有关，属于个例问题。另外，加*与不加*，完全是两种类型。不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587001064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203214,"user_name":"小高","can_delete":false,"product_type":"c1","uid":1283052,"ip_address":"","ucode":"FCD422249F7355","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/ec/985675c8.jpg","comment_is_top":false,"comment_ctime":1586157172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586157172","product_id":100043901,"comment_content":"指针变量也是变量，支持变量操作","like_count":0},{"had_liked":false,"id":178767,"user_name":"不便明言","can_delete":false,"product_type":"c1","uid":1800640,"ip_address":"","ucode":"745571262B75B0","user_header":"https://static001.geekbang.org/account/avatar/00/1b/79/c0/4c35b6ab.jpg","comment_is_top":false,"comment_ctime":1581820492,"is_pvip":false,"replies":[{"id":"69398","content":"给你点赞，加油！在后续的文章中，等着你！有问题，随时留言，我会一一回复的。^_^","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581832217,"ip_address":"","comment_id":178767,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581820492","product_id":100043901,"comment_content":"做了两次，第一次才及格，很多知识点没有真正消化掉，不过有价值的是，通过测试去强化理解、回味前面10几个课堂，又陡然理解了一些前面所没有理解的知识点，对我来说，是这次测试最大的收获了。感谢老师的精心课程设计。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483956,"discussion_content":"给你点赞，加油！在后续的文章中，等着你！有问题，随时留言，我会一一回复的。^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581832217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176707,"user_name":"信念","can_delete":false,"product_type":"c1","uid":1673076,"ip_address":"","ucode":"3D32CA6E096CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","comment_is_top":false,"comment_ctime":1581145135,"is_pvip":false,"replies":[{"id":"68593","content":"报错信息发我一下","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581164747,"ip_address":"","comment_id":176707,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1581145135","product_id":100043901,"comment_content":"#include&lt;stdio.h&gt;<br><br>int main(){<br>int a, *p = &amp;a;<br>char*q = &amp;a;<br>printf(&quot;%p %p&quot;, p, q);<br>printf(&quot;%p %p&quot;, p + 1, q + 1);<br>  return 0;<br>}<br>请问一下为什么上述程序编译不了呀？我用了gcc，但是报错了，麻烦老师看一下。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483185,"discussion_content":"报错信息发我一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581164747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166530,"discussion_content":" char *q = reinterpret_cast<char*>(&amp;a);\n我用了这个，发现可以了，但是我不太清楚这个函数是什么原理。以及为什么老师那里并没有使用。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581407787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166528,"discussion_content":"我也是这个问题，老师还能回答一下吗，快哭了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581407584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1340281,"avatar":"https://static001.geekbang.org/account/avatar/00/14/73/79/422e8424.jpg","nickname":"bowen","note":"","ucode":"647B7756922C7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199860,"discussion_content":"char *p = (char *p)&amp;a a定义的是int，*p定义的是char，要转化相同类型","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583633377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166528,"ip_address":""},"score":199860,"extra":""},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1340281,"avatar":"https://static001.geekbang.org/account/avatar/00/14/73/79/422e8424.jpg","nickname":"bowen","note":"","ucode":"647B7756922C7F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240585,"discussion_content":"强制类型转换，明白了，老师上一节用的也是这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587376448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":199860,"ip_address":""},"score":240585,"extra":""}]},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164247,"discussion_content":"test33.cpp: In function ‘int main()’:\ntest33.cpp:5:11: error: cannot convert ‘int*’ to ‘char*’ in initialization\n char*q = &amp;a;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581165049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174904,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1580453818,"is_pvip":false,"replies":[{"id":"67983","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1580481455,"ip_address":"","comment_id":174904,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1580453818","product_id":100043901,"comment_content":"更清楚理解关于c语言中的数组，指针，内存空间(字节，存贮单元)的关系，还有他们的一些运算的原理。老师的讲解思路清晰连贯，跟下来学到非常多，点赞！","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482561,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580481455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173989,"user_name":"Jinlee","can_delete":false,"product_type":"c1","uid":1644723,"ip_address":"","ucode":"8EDA9B0C5184EA","user_header":"https://static001.geekbang.org/account/avatar/00/19/18/b3/848ffa10.jpg","comment_is_top":false,"comment_ctime":1579854471,"is_pvip":false,"replies":[{"id":"67883","content":"第四个有错误，直接引用运算符 . 的优先级要高于 取值运算符 *，也就是说先算右边的 p.y，这个是不对的。更多的关于运算符优先级的内容，你可以上网自行搜索。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1580314937,"ip_address":"","comment_id":173989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579854471","product_id":100043901,"comment_content":"参照老师的参考**答案和等价**关系，我能想到的替换类型还有：<br>1）将参考**答案中的a替换为p；<br>2）&amp;(*(p+1).x)；<br>3）&amp;(a[0].x)+2或者&amp;(a[1].y)-1；<br>4）&amp;(*p.y)+1<br>对吗老师？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482268,"discussion_content":"第四个有错误，直接引用运算符 . 的优先级要高于 取值运算符 *，也就是说先算右边的 p.y，这个是不对的。更多的关于运算符优先级的内容，你可以上网自行搜索。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580314937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}