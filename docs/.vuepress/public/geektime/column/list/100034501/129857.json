{"id":129857,"title":"05 | 代码入库前：Facebook如何让开发人员聚焦于开发？","content":"<p>你好，我是葛俊。今天，我将与你分享优化流程中，代码入库前的开发流程。</p><p>代码入库之前的开发活动，主要包括编码、调测调优、静态检查、自动化测试、代码审查等。这是开发者编写代码的步骤，自然是提高研发效能的关键环节。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/28/44e048f968b603e49136b10f5dbdf728.png?wh=2475*525\" alt=\"\"></p><center><span class=\"reference\">图1 本地开发流水线</span></center><p>提高开发者编写代码的效能，关键在于让开发者不受阻塞、不受不必要的干扰，从而全身心地聚焦在产品开发上。我把这种不受阻塞的开发状态叫作<strong>持续开发</strong>。</p><p>一个团队如果能够做到持续开发，那么它的有效产出自然会很好。而对于个人开发者而言，持续开发能够帮助我们把精力集中在技术本身，对技术和个人能力的提升都大有裨益，所以是一种很好的开发体验。</p><p>在我看来，持续开发的基本原则主要包括两条：</p><ol>\n<li>规范化、自动化核心步骤；</li>\n<li>快速反馈，增量开发。</li>\n</ol><p>接下来，我们就一起看看这两条核心原则吧。</p><h2>规范化、自动化核心步骤</h2><p>要让开发者聚焦于开发，就必须把研发流程中可以自动化的步骤尽量自动化。因为一般不可能完成所有步骤的自动化，所以我推荐的方式是：分析关键路径上的活动，以及耗时较长的活动，然后投入精力优化这些步骤。</p><p>首先，我们需要明确具体的开发步骤有哪些。我将其归纳为以下三大步：</p><ol>\n<li>获取开发环境，包括获取开发机器、配置环境、获取代码等。</li>\n<li>在本地开发机器上进行开发，包括本地的编码、调测、单元测试等。</li>\n<li>代码入库前，把改动提交到检查中心（比如Gerrit），再进行一轮系统检查，主要包括代码检查、单元测试、代码审查等，通过之后再入库。</li>\n</ol><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/7b/bf/7be4f0d26fefd1f22555238389fef5bf.png?wh=2491*1091\" alt=\"\"></p><center><span class=\"reference\">图2 代码入库前的3大开发步骤</span></center><p>针对这三大步骤，我们可以有以下3个工程实践：</p><ul>\n<li>提高开发环境的获取效率；</li>\n<li>规范化、自动化本地检查；</li>\n<li>建设并自动化代码入库前的检查流程。</li>\n</ul><p>接下来，我们分别看看这3个工程实践如何落地。</p><h3>提高开发环境的获取效率</h3><p>开发环境的设置，包括开发机器的获取、网络配置、基本工具以及代码的获取和配置。这些操作的频率不是特别高，但如果步骤复杂、耗时长，就会对新成员加入、成员切换团队或者项目，产生比较大的影响。所以，开发环境的获取效率，通常是值得优化的。</p><p>有一个可以采用的优化方式是，<strong>把整个开发环境的获取，进行服务化、自助化</strong>。也就是说，开发者可以自助地申请获取环境，不需要IT部门的人员介入，从而既节省了开发者的时间，又降低了IT部门的人力成本。</p><p>比如，我之前在Facebook工作的时候，采用虚拟机作为个人开发机。内部工具团队开发了一个基于共享机器池的开发环境服务系统，让开发者可以在网页上申请和释放机器。机器返还之后，开发环境服务系统会自动对它进行清理，配置之后再重新放回机器池中。这就使得开发者可以在5分钟之内拿到一套干净的环境。</p><p>而至于开发机器上的代码，这个服务系统可以克隆获取团队常用的代码仓，并定时拉取最新的代码。这就使得开发者拿到一台机器之后，只需要再额外拉取很少的代码就可以进行开发。</p><p>上面这种方法定制性很强，Facebook并没有开源。如果你准备进行这方面尝试的话，在机器的生成和配置方面，我推荐两种方式。</p><p><strong>第一种方式</strong>，借助基础设施即代码（Infrastructure as Code，IaC）系统。比如，HashiCorp公司的<a href=\"https://www.terraform.io\">Terraform工具</a>。它支持声明式的方式快速产生自定义配置的机器，并在上面运行脚本进行配置。TerraForm使用插件机制支持许多底层平台，比如AWS、阿里云或者本地系统。</p><p>这种方式的优点是使用方便、功能强大，但前期投入大。</p><p><strong>第二种方式是</strong>，提供机器镜像和配置脚本。通过镜像让每一台新机器拥有最基本的设置，比如CPU、操作系统、基本软件，然后通过脚本实现基本配置，比如网络设置、软件更新等。这种方式的优点就是，前期投入小。我在Stand时，就使用了这种方法，效果不错。不过它的缺点就是不够灵活。</p><h3>规范化、自动化化本地检查</h3><p>本地检查是指，开发者在开发机器上进行的验证，比如语法检查、规范检查、单元测试、沙盒搭建等。我推荐的方式是，<strong>根据团队实际情况，找到合适的工具和配置进行这些检查，并让团队成员统一使用</strong>。</p><p>在这个方面，Facebook的方法是，把很多工具都放到一个网盘上，挂载到每台开发机器的Linux文件系统上，让开发者们不用安装就可以直接使用。</p><p>挂载共享网盘的方法非常方便，因为用户不用操心工具的升级。但如果你们的系统没有这样的网盘的话，也可以通过脚本让开发人员一键安装工具和完成配置，效果也不错。缺点就是软件更新比较麻烦，因为要通知用户手动更新或者设计自动更新机制。</p><p>至于检查中使用的工具，我们需要根据具体的语言和框架去选择。</p><h3>建设并自动化代码入库前的检查流程</h3><p>建设并自动化代码入库前的检查流程，是持续集成前的必要工作，也可以看作是持续集成的一部分。它对入库代码质量起到一个门禁作用，对提高质量用处很大。<strong>我认为，除了人数非常少的初创公司以外，其他开发团队都应该进行这个配置。</strong></p><p>这个流程一般可以使用代码仓管理系统作为中心，直接使用或者通过钩子集成其他工具和系统来实现。比如，使用GitLab提供的GitLab CI/CD框架。基本方法是，在项目的根目录里创建一个.gitlab-ci.yml文件，来描述你的检查环境设置和步骤。你可以点击这个<a href=\"https://docs.gitlab.com/ee/user/project/pages/getting_started_part_four.html\">链接</a>查看具体的方法。</p><p>在Facebook，这一步使用的是开源版Phabricator的一个内部Fork。Phabricator在工作流中使用单元测试和Linter的方法，你可以参考<a href=\"https://secure.phabricator.com/book/phabricator/article/arcanist_lint_unit/\">帮助文档</a>。</p><p>以上内容就是持续开发的第一个原则，也就是规范化、自动化核心步骤。这个原则，可以帮助开发者尽量减少非开发工作的耗时，从而把更多的时间、精力投入到本职的开发工作中。接下来，我们再来看看持续开发的第二个原则，即提供快速反馈，促进增量开发，这样能及早暴露问题，从而保证将来的工作不会因为实现错误，或者方向调整而进行昂贵的修改。</p><h2>提供快速反馈，促进增量开发</h2><p>提供快速反馈，进行增量开发指的是，能够快速验证已经完成的开发工作，说白了就是边开发边验证。具体的工程实践主要包括以下3个：</p><ul>\n<li>灵活使用各种Linter和测试；</li>\n<li>建设并优化沙盒环境；</li>\n<li>使用实时检查工具。</li>\n</ul><p>接下来，我们分别看看这3个工程实践如何落地。</p><h3>灵活使用各种Linter和测试</h3><p>最常用的快速验证方法就是，提高运行静态检查和测试的方便性、灵活性。各种语言、框架都有自己的测试框架和Linter，这里我就不再一一列举了。接下来，我会与你分享<strong>两种通用的有效使用Linter和测试的方法</strong>。</p><p>首先，用命令行的工具来封装各种检查。命令行工具特别适用于自动化，方便开发人员使用。比如，我们可以通过命令行脚本，来实现简单的工作流。</p><p>举一个具体的例子，我希望团队在开发中，在运行公司提供的统一检查之外，还可以运行一些适应团队自身特点的检查，每个开发人员也可以添加自己希望使用的检查。这样就可以通过一个Shell脚本，依次调用公司的、团队的、个人的检查来实现，很方便。</p><p>其次，以服务化的方式，把这些检查的能力提供出来。比如，Facebook的基础平台团队提供了在云上运行单元测试的能力，并把这个能力通过服务的方式提供给开发者，以方便他们在自己的开发机器上调用。也就是说，开发者可以调用云上资源运行大量的测试而不占用本地资源，从而在运行测试的同时可以高效地进行开发工作。</p><h3>建设并优化沙盒环境</h3><p>沙盒也是一个高频使用的、提高质量的工具。开发者如果能够方便地在本地搭建沙盒进行验证，那么进行开发自测的频率和质量就会大大提高，进而提高产品质量。所以，我推荐你在沙盒环境的搭建上进行投入。</p><p>在沙盒环境搭建中，有两个常见的优化点：</p><ul>\n<li>本地构建。因为我们必须把改动构建成产品才能进行本地验证，而这个步骤通常耗时较长。我推荐的优化方法是，不要使用全量构建，尽量只进行最小范围的增量构建。</li>\n<li>测试数据的产生。产生贴近生产环境的数据往往比较费劲，Facebook的做法是，开发环境直接使用生产环境的数据，不过这个方法比较激进，使用的公司比较少。另一个常见方法是，进行生产数据的导出并脱敏，然后使用到沙盒环境中。</li>\n</ul><h3>使用实时检验工具</h3><p>快速提供检查反馈，做到极致就是开发者无需手动触发检查，工具就会自动探测到改动、自动运行检查。最常见的是，IDE中的实时语法检查。我们可以花一些时间来配置IDE。另外，有些工具可以自动监视文件系统的变化，文件有变化时自动重启服务。这对于开发者来说，非常便利。</p><p>举个例子。使用Node.js进行开发时，nodemon就是不可或缺的工具，你只要在原来的命令前，加上nodemon就可以使用。比如，启动服务的语句是./bin/www，使用nodemon的形式就是nodemon ./bin/www。这样运行服务之后，如果你的文件有修改，nodemon就会自动重新运行。</p><p>你可以在下面这个动图中看到，在第一次保存时，有语法错误，nondemon重新启动失败；第二次保存时修复了语法错误，nodemon成功重启服务。通过nodemon，我减少了两次手动重启服务的繁琐操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/d6/847e9f5f2e846f69d3b1777b3f61a6d6.gif?wh=1328*994\" alt=\"\"></p><center><span class=\"reference\">图3 nodemon使用示例</span></center><p>类似的工具，SpringBoot有Spring-Boot-Devtools，你可以点击这个<a href=\"https://www.baeldung.com/spring-boot-devtools\">链接</a>查看详细描述。针对Python，可以直接使用nodemon，这里也有一个<a href=\"https://stackoverflow.com/questions/49355010/how-do-i-watch-python-source-code-files-and-restart-when-i-save\">链接</a>供你参考。</p><p>如果你使用的框架、语言没有直接可以使用的工具，帮助你进行实时重启服务的话，可以使用类似<a href=\"https://github.com/gorakhargosh/watchdog\">watchdog/watchmedo</a>的工具来实现自动化。比如</p><pre><code>watchmedo shell-command \\\n --patterns=&quot;*.py&quot; \\\n --command='python &quot;${watch_src_path}&quot;' \\\n .\n</code></pre><p>会监控所有的Python文件改动并自动重启。</p><p>提供快速反馈，边开发边验证，虽然只是一个简单的原则，但可以带来很多好处。最直接的收益就是，能够大大提高开发者对当前代码的信心，从而促进代码尽早入仓、尽早集成。</p><p>可能你也注意到了，<strong>代码集成越晚发现问题就越晚。这正是产品上线的最后关头合并混乱，产品质量差、返工率高的一个重要原因</strong>。所以，我建议在你的工作流程中，要尽量提高实时验证的能力。如果你这么做了，很快就会看到效果。</p><h2>小结</h2><p>在今天这篇文章中，我和你分享了两条持续开发的基本原则，来帮助开发者在代码入库前聚焦于开发工作：一是，规范化、自动化代码入库前的核心步骤；二是，提供快速反馈，帮助开发者边开发边验证，以促进增量开发。</p><p>我将今天的内容，总结为了一幅图，帮助你复习。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/98/50c1bdf8074f68b7707b26a1b657df98.png?wh=2500*1430\" alt=\"\"></p><center><span class=\"reference\">图4 代码入库前流程优化</span></center><p>这些原则和实践，是我根据自己的经验总结出来的。如果能直接适用于你的团队当然最好了，但我更加希望的是，你能从这些原则和实践的讨论中，理解它们背后的思路，从而找到合适的方法和实践，去优化代码入库前的流程中最需要优化的地方，让开发者能够真正聚焦于开发。</p><p>另外，我给你一个落地持续开发的小贴士：持续开发很适合用自上而下和自下而上相结合的方式来推动。因为开发者最了解自己工作的痛点，所以也能比较准确地找到需要优化的地方。在Facebook，很多工具和流程都是由开发者自发开发或者引入，后来逐步推广至团队和公司使用的。</p><p>所以我推荐，<strong>作为开发者，你可以自己抽一点时间优化自己的工作流程，自动化繁琐的工作；而作为管理者，你可以有意识地奖励这样的优化行为，并对适用于团队的部分进行推广。</strong></p><h2>思考题</h2><p>最后，我来给你留下两个思考题吧。</p><ol>\n<li>在开发环境方面，你有没有尝试过在Docker里面进行开发？你觉得这种方式的好处是什么，弊端又是什么呢？</li>\n<li>有些开发者喜欢写好一个比较大的功能单元，然后再一口气调测。你觉得这样做的好处和坏处，各是什么呢？</li>\n</ol><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！</p><p></p>","neighbors":{"left":{"article_title":"04 | 流程优化：怎样才能让敏捷、精益真正为我所用？","id":128867},"right":{"article_title":"06 | 代码入库到产品上线：Facebook如何使用CI/CD满足业务要求？","id":131673}},"comments":[{"had_liked":false,"id":130964,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1567584577,"is_pvip":true,"replies":[{"id":"49961","content":"多谢分享！看来你是工具达人呀 ：）<br>我没有用过这个插件，从描述看来不错！","user_name":"作者回复","comment_id":130964,"uid":"1030244","ip_address":"","utype":1,"ctime":1567787452,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":2,"score":"57402159425","product_id":100034501,"comment_content":"搭车推荐 IntelliJ 下的效率神器插件 JRebel，可以免手工重启，快速生效文件改动最新效果。<br>http:&#47;&#47;plugins.jetbrains.com&#47;plugin&#47;4441-jrebel-for-intellij","like_count":13,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466216,"discussion_content":"多谢分享！看来你是工具达人呀 ：）\n我没有用过这个插件，从描述看来不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567787452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133032,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1568330934,"is_pvip":true,"replies":[{"id":"50986","content":"@日拱一卒 你的最近几个comments都很棒！都说到点子上了 ：）","user_name":"作者回复","comment_id":133032,"uid":"1030244","ip_address":"","utype":1,"ctime":1568423171,"user_name_real":"葛俊 Jason"}],"discussion_count":2,"race_medal":5,"score":"35928069302","product_id":100034501,"comment_content":"1. 在开发环境方面，你有没有尝试过在 Docker 里面进行开发？你觉得这种方式的好处是什么，弊端又是什么呢？<br>在之前的项目中有用过Docker来搭建开发环境，主要是一些中间件，例如后端数据库，solr，elk等。带来的好处是每个开发人员可以很快在本地搭建一套开发环境，彼此不会有冲突，不好的地方是Docker文件和镜像的维护，需要额外的精力。<br><br><br>2. 有些开发者喜欢写好一个比较大的功能单元，然后再一口气调测。你觉得这样做的好处和坏处，各是什么呢？<br>这种做法的好处是写代码的时候可以更加专注，不好的地方是如果开发人员经验不够，这种方式就会变为调试驱动开发，反而会降低效率。<br>不同的人会有不同的开发方法，我认为并没有普适所有人的方法，对于经验非常丰富的开发人员来说，怎样做都会得心应手。想一想纸带编程时期，哪有什么单元测试。","like_count":8,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467226,"discussion_content":"@日拱一卒 你的最近几个comments都很棒！都说到点子上了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568423171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2638351,"avatar":"https://static001.geekbang.org/account/avatar/00/28/42/0f/49dfb810.jpg","nickname":"agean","note":"","ucode":"F6FE5F8974E46C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376690,"discussion_content":"Docker的另一个问题就是要建立一套容灾系统，否则docker崩溃后代码丢失损失太大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622278748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130448,"user_name":"追忆似水年华","can_delete":false,"product_type":"c1","uid":1160192,"ip_address":"","ucode":"C1D7C0DD7E7411","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/00/661fb98d.jpg","comment_is_top":false,"comment_ctime":1567468907,"is_pvip":true,"replies":[{"id":"49967","content":"我觉得你的这个方法很好！👍👍👍<br><br>一个小提醒，在快的同时留意有没有因为快而导致问题，最终反而变慢了。如果出现这种情况，就进行调整。","user_name":"作者回复","comment_id":130448,"uid":"1030244","ip_address":"","utype":1,"ctime":1567788065,"user_name_real":"葛俊 Jason"}],"discussion_count":2,"race_medal":0,"score":"31632239979","product_id":100034501,"comment_content":"我的开发方式可能比较另类，也比较不合规。公司买的是阿里云的 Windows 服务器，我现在常常都是直接通过远程桌面连接到服务器上，用 VSCode 开发前后端项目。前端用 Vue 全家桶，后端用 Node.js + nodemon，有改动之后立刻生效，最大的好处就是快，见效快 😂<br>之所以这样做，是因为我们公司就俩开发，一人负责一大摊子事，所以常常用各种野路子，怎么方便怎么来，哈哈。","like_count":7,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465961,"discussion_content":"我觉得你的这个方法很好！👍👍👍\n\n一个小提醒，在快的同时留意有没有因为快而导致问题，最终反而变慢了。如果出现这种情况，就进行调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567788065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8988,"discussion_content":"这么野。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568118472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141283,"user_name":"电线杆儿","can_delete":false,"product_type":"c1","uid":1135293,"ip_address":"","ucode":"0C66FB877B9636","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/bd/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1571135568,"is_pvip":true,"replies":[{"id":"55017","content":"分析相当透彻。👍👍👍","user_name":"作者回复","comment_id":141283,"uid":"1030244","ip_address":"","utype":1,"ctime":1571406013,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"23045972048","product_id":100034501,"comment_content":"@在开发环境方面，你有没有尝试过在 Docker 里面进行开发？你觉得这种方式的好处是什么，弊端又是什么呢？<br>#好处：A节约开发资源（多个开发人员共用一台docker开发机器，基于容器的资源隔离，抽象成多个开发机，提高单台机器的使用率）B快速搭建（新来的开发同事可以迅速创建一套或多套开发环境，基于镜像的一致性，保证环境创建过程中不踩坑，节约项目融入时间，同时，如果环境遭到破坏，或开发机不可用，可以迅速迁移到其他docker开发机）C轻松构建（很多时候出了搭建开发环境，还要搭建构建环境，通过docker提供的各种工具镜像，可以实现轻松构建自己的代码）缺点：A资源控制（对于性能要求高的服务，docker开发环境不如独立开发机性能高，虽然使用cgroup技术，但是docker还是会占用部分资源，对于独立性要求高的开发不利） B镜像构建（从传统方式到docker开发，需要构建基础镜像，代码、日志要持久化出来，通过sftp与IDE实现实时保存更新，基础镜像如果不够灵活，使用中会遇到问题）C需要了解docker命令（对没接触过docker的有一定的学习成本，并且查看日志，和启动服务等操作会变得跟传统方式不同）D网络限制（docker默认采用bridge方式提供小二层网络，比较抽象，对于需要独立IP资源的服务不友好，当然可以更改网络模式，但是需要整个公司的网络支持）<br>@有些开发者喜欢写好一个比较大的功能单元，然后再一口气调测。你觉得这样做的好处和坏处，各是什么呢？<br>#好处A功能完整（这样一个功能可以根据项目需求周期来决定要不要该功能整体，如果较小的功能单元，后期可能会根据项目需求不断调整，经验不足就会对项目其他功能造成影响）坏处A需求见效慢（开发周期长，问题暴露滞后，不利于敏捷开发，可能会错过需求的最佳上线周期）B项目返工修复困难（单元大，设计的模块多，如果有BUG，修复起来很难）C不利于持续交付（如果要走持续交付路线，就要频繁上线，尽可能的优化上线流程，如果很久才开发一个功能并上线，即便有问题，也会觉得是个例）","like_count":5,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470710,"discussion_content":"分析相当透彻。👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571406013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130410,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":false,"comment_ctime":1567445395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23042281875","product_id":100034501,"comment_content":"作者背景这么强，课这么好，只有这么点订阅真是可惜","like_count":5},{"had_liked":false,"id":133303,"user_name":"robincoin","can_delete":false,"product_type":"c1","uid":1053243,"ip_address":"","ucode":"BA89BCEA1D6B9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/3b/969eedf2.jpg","comment_is_top":false,"comment_ctime":1568508934,"is_pvip":false,"replies":[{"id":"51329","content":"前面有人问过，这一部分我也不是特别了解细节。但是知道主要原则大概有几个：<br>1. 数据库中都有特定的Field指出是否是测试数据，这使得测试数据和生产数据共存在一个数据库<br>2. 数据能够快速恢复。这个是基本<br>3. 强大的监控。开发人员账号触碰到生产数据，如果是TA本人不应该有权限的，必须要有任务ID才能有Access。这些行为都会被记录下来。一旦发现不合规操作马上非常严格的处理。比如辞退。","user_name":"作者回复","comment_id":133303,"uid":"1030244","ip_address":"","utype":1,"ctime":1568649133,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"14453410822","product_id":100034501,"comment_content":"怎么用线上的数据给开发人员进行开发测试呢","like_count":3,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467340,"discussion_content":"前面有人问过，这一部分我也不是特别了解细节。但是知道主要原则大概有几个：\n1. 数据库中都有特定的Field指出是否是测试数据，这使得测试数据和生产数据共存在一个数据库\n2. 数据能够快速恢复。这个是基本\n3. 强大的监控。开发人员账号触碰到生产数据，如果是TA本人不应该有权限的，必须要有任务ID才能有Access。这些行为都会被记录下来。一旦发现不合规操作马上非常严格的处理。比如辞退。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568649133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144876,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1572080542,"is_pvip":false,"replies":[{"id":"55909","content":"这个要赞！自己实现一个系统。有没有推广到团队中给其他成员使用？<br>","user_name":"作者回复","comment_id":144876,"uid":"1030244","ip_address":"","utype":1,"ctime":1572174928,"user_name_real":"葛俊 Jason"}],"discussion_count":2,"race_medal":0,"score":"10162015134","product_id":100034501,"comment_content":"监听文件变动并重启服务的事情我做过。<br><br>当时是用lua开发的一个项目，lua本身还是支持热更新的，不需要重启进程.<br><br>我就在代码逻辑中定时扫描文件的变动情况，有过变动且最近5秒未再变时就热更新加载代码。<br>（因为在网络传输文件的过程中，如果文件没传完，就开始了重载流程，就会出现语法错误。）<br><br>这样我用vim在服务器上开发时，只要一保存，就触发了重载。<br>另外我会单独开一个终端在tail日志，如果有问题，可以及时的发现。<br><br>从这也能看出，我喜欢小步走。","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472152,"discussion_content":"这个要赞！自己实现一个系统。有没有推广到团队中给其他成员使用？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572174928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40377,"discussion_content":"好东西，就要跟大家一起分享嘛。\n\n我做的相当于是底层的东西，项目中的其他人大都是写逻辑层的东西。\n写逻辑更需要快速试错。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572179061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130056,"user_name":"于小咸","can_delete":false,"product_type":"c1","uid":1640946,"ip_address":"","ucode":"833D5E92016430","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","comment_is_top":false,"comment_ctime":1567379086,"is_pvip":false,"replies":[{"id":"48556","content":"如果你能够做到很快时间自动编译完成并重启服务，那就很棒。当然这可能需要做比较多的优化，以及可能使用一些Hacky的办法。当然如果做不到，或者投入太大，那也就确实不合适了。","user_name":"作者回复","comment_id":130056,"uid":"1030244","ip_address":"","utype":1,"ctime":1567397505,"user_name_real":"葛俊 Jason"}],"discussion_count":2,"race_medal":0,"score":"10157313678","product_id":100034501,"comment_content":"如果工程比较大，编译需要很久的话，自动编译并重启服务是不是就不太合适了？","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465782,"discussion_content":"如果你能够做到很快时间自动编译完成并重启服务，那就很棒。当然这可能需要做比较多的优化，以及可能使用一些Hacky的办法。当然如果做不到，或者投入太大，那也就确实不合适了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567397505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1034822,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ca/46/f55df868.jpg","nickname":"蒋鹏","note":"","ucode":"C50A69C1DB4E32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":162230,"discussion_content":"以前使用java会出现很大的包，但是现在随着微服务架构的使用，每个服务的包并不是都很大，启动都是几十秒左右还是可以接受","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580975472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132095,"user_name":"大河","can_delete":false,"product_type":"c1","uid":1378513,"ip_address":"","ucode":"740C8F86C59172","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qp9dYsewprexf2zo45CPoZ4rmQTBzx8hxTzzeibduV7nichZV9CicgicPPHZ7ZsTlehiaAWqrQswcp3m9KUFkueej6Q/132","comment_is_top":false,"comment_ctime":1568021934,"is_pvip":false,"replies":[{"id":"50487","content":"Docker 在这些方面的确非常灵活。不知道你有没有注意到一个有些极端的例子：有一些工具，因为安装比较麻烦，干脆提供一个Docker镜像，使用的时候直接运行一个docker命令。而且速度也还不错。","user_name":"作者回复","comment_id":132095,"uid":"1030244","ip_address":"","utype":1,"ctime":1568033234,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"5862989230","product_id":100034501,"comment_content":"Docker开发对于前后端没有分离的项目来说，前端会省去大量的搭建项目的时间，直接使用后端搭建好的环境，然后去提交代码进行联调。","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466759,"discussion_content":"Docker 在这些方面的确非常灵活。不知道你有没有注意到一个有些极端的例子：有一些工具，因为安装比较麻烦，干脆提供一个Docker镜像，使用的时候直接运行一个docker命令。而且速度也还不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568033234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131143,"user_name":"Marco","can_delete":false,"product_type":"c1","uid":1100706,"ip_address":"","ucode":"56832AA804EF10","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/a2/e21abfee.jpg","comment_is_top":false,"comment_ctime":1567650876,"is_pvip":false,"replies":[{"id":"49949","content":"你们是什么技术栈？","user_name":"作者回复","comment_id":131143,"uid":"1030244","ip_address":"","utype":1,"ctime":1567786470,"user_name_real":"葛俊 Jason"}],"discussion_count":3,"race_medal":0,"score":"5862618172","product_id":100034501,"comment_content":"老师,有自动化的一套工具介绍吗?","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466309,"discussion_content":"你们是什么技术栈？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567786470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8599,"discussion_content":"PhpStorm, PhpUnit, PHPLint, Jenkins, GitLab/GitHub/Phabricator/Gerrit, SonarCube。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568023722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/a2/e21abfee.jpg","nickname":"Marco","note":"","ucode":"56832AA804EF10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8147,"discussion_content":"nginx php","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567792868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131043,"user_name":"师傅又被抓走了","can_delete":false,"product_type":"c1","uid":1027477,"ip_address":"","ucode":"4BA45F363F9BD9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/95/2d248ac2.jpg","comment_is_top":false,"comment_ctime":1567607568,"is_pvip":false,"replies":[{"id":"49943","content":"管理起来方便 ：）<br>","user_name":"作者回复","comment_id":131043,"uid":"1030244","ip_address":"","utype":1,"ctime":1567785946,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"5862574864","product_id":100034501,"comment_content":"采用虚拟机作为个人开发机------这个比较高效，值得学习！","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466262,"discussion_content":"管理起来方便 ：）\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567785946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130246,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567412384,"is_pvip":false,"replies":[{"id":"50532","content":"如果数据量不是特别大的话，可以吧初始数据作为代码放到代码仓里面，比如一个SQL文件。在环境设置的脚本中调用它进行初始化。当然也可是使用二进制。<br><br>如果数据量特别大，可以把它放到共享文件夹中。初始化脚本挂载之后使用它进行初始化。<br><br>这样能太满足你的举起需求吗？","user_name":"作者回复","comment_id":130246,"uid":"1030244","ip_address":"","utype":1,"ctime":1568046960,"user_name_real":"葛俊 Jason"}],"discussion_count":2,"race_medal":0,"score":"5862379680","product_id":100034501,"comment_content":"老师，数据那一块怎么管理呢，比如初始数据","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465874,"discussion_content":"如果数据量不是特别大的话，可以吧初始数据作为代码放到代码仓里面，比如一个SQL文件。在环境设置的脚本中调用它进行初始化。当然也可是使用二进制。\n\n如果数据量特别大，可以把它放到共享文件夹中。初始化脚本挂载之后使用它进行初始化。\n\n这样能太满足你的举起需求吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568046960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243526,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/86/272fc86f.jpg","nickname":"小齐","note":"","ucode":"1C5E08BB6BCE44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306149,"discussion_content":"liquibase  然后代码仓库管理即可吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600180328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353097,"user_name":"刘兆峰","can_delete":false,"product_type":"c1","uid":2695962,"ip_address":"北京","ucode":"C0FA8A148E29B1","user_header":"","comment_is_top":false,"comment_ctime":1659162572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659162572","product_id":100034501,"comment_content":"团队目前使用华为云的DevCloud平台，代码提交时可以做到对全量代码仓库进行自动化检查，但是我期望是仅对本次提交的代码做检查，是否有这样的工具支持","like_count":0},{"had_liked":false,"id":331236,"user_name":"nate_luo","can_delete":false,"product_type":"c1","uid":1980442,"ip_address":"","ucode":"2A2E880126E9E1","user_header":"","comment_is_top":false,"comment_ctime":1642496721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642496721","product_id":100034501,"comment_content":"1. 我是做嵌入式开发的，编译的时候是用docker的。因为交叉编译环境依赖比较多，很多库还必须指定版本，做成docker是会比较方便，但仅限于编译使用，mount文件夹过去。<br>2. 嵌入式开发做单元测试也比较麻烦，一来C的单元测试就不如其他语言容易，二来交叉编译后的可执行文件必须加到板子上才能跑，我想知道葛老师有什么建议？","like_count":0},{"had_liked":false,"id":301795,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1625885286,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1625885286","product_id":100034501,"comment_content":"各种工具和基础设施的建设和优化真是一个需要长期投入和持续的过程。不过要做好了，也能产生很大的收益，能够赋能业务研发团队提高效率，加快产出。","like_count":0},{"had_liked":false,"id":285820,"user_name":"Learner","can_delete":false,"product_type":"c1","uid":1147456,"ip_address":"","ucode":"289EBF7A445808","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/40/02ae9409.jpg","comment_is_top":false,"comment_ctime":1617020185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617020185","product_id":100034501,"comment_content":"写好一个比较大的功能单元似乎没任何优点，就是给让Dev逃避小步提交，快速迭代，持续集成","like_count":0},{"had_liked":false,"id":260066,"user_name":"Geek_b43d27","can_delete":false,"product_type":"c1","uid":2243546,"ip_address":"","ucode":"B68E7D771D7362","user_header":"","comment_is_top":false,"comment_ctime":1604918133,"is_pvip":false,"replies":[{"id":"94795","content":"没有啊。你在什么地方听到的消息？<br>","user_name":"作者回复","comment_id":260066,"uid":"1030244","ip_address":"","utype":1,"ctime":1605244322,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"1604918133","product_id":100034501,"comment_content":"据说facebook有很多的外包测试人员啊。所以是不是还是有很多测试的？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509101,"discussion_content":"没有啊。你在什么地方听到的消息？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605244322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209461,"user_name":"oliver","can_delete":false,"product_type":"c1","uid":1505929,"ip_address":"","ucode":"980EBABF71AFBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","comment_is_top":false,"comment_ctime":1587553062,"is_pvip":false,"replies":[{"id":"78686","content":"我是指把docker模板文件拉下来到本机环境运行。<br><br>在docker可以运行GUI IDE，并用vncserver 获取其图形显示。不过的确有些麻烦，而且可能性能不好。<br><br>另一个可能的办法是：1. docker中 mount host的文件夹；2. host 中运行IDE进行开发；3. 在docker中运行；4. 通过remote debugging的方式，使用host中的IDE对docker中的app进行调试。","user_name":"作者回复","comment_id":209461,"uid":"1030244","ip_address":"","utype":1,"ctime":1588012718,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"1587553062","product_id":100034501,"comment_content":"采用docker作为个人开发机的话是否意思是在服务器上开一个docker？还是把docker模板文件拉下来到本机环境运行？<br>如果用docker开发。是否只能用vim，无法用idea之类的IDE了？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492808,"discussion_content":"我是指把docker模板文件拉下来到本机环境运行。\n\n在docker可以运行GUI IDE，并用vncserver 获取其图形显示。不过的确有些麻烦，而且可能性能不好。\n\n另一个可能的办法是：1. docker中 mount host的文件夹；2. host 中运行IDE进行开发；3. 在docker中运行；4. 通过remote debugging的方式，使用host中的IDE对docker中的app进行调试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588012718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178075,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/c8680841.jpg","comment_is_top":false,"comment_ctime":1581583245,"is_pvip":false,"replies":[{"id":"69687","content":"脚本语言的确更方便一些，但是文章中的基本思路对C++一样适用，绝大部分实践对C++也是可以的。<br><br>C++比较挑战的地方应该是编写代码时实时反馈难一些，但是运行单元测试也是可以的，还是可以尽量做到快速反馈。","user_name":"作者回复","comment_id":178075,"uid":"1030244","ip_address":"","utype":1,"ctime":1582009892,"user_name_real":"葛俊 Jason"}],"discussion_count":1,"race_medal":0,"score":"1581583245","product_id":100034501,"comment_content":"发现解释性或者脚本型的语言做持续集成都比较方便，工具也多，但是像我们主要用C++的，好像没有这样的自动化工具链吧。老师对这个有经验或者建议吗？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483657,"discussion_content":"脚本语言的确更方便一些，但是文章中的基本思路对C++一样适用，绝大部分实践对C++也是可以的。\n\nC++比较挑战的地方应该是编写代码时实时反馈难一些，但是运行单元测试也是可以的，还是可以尽量做到快速反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582009892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142299,"user_name":"David","can_delete":false,"product_type":"c1","uid":1023472,"ip_address":"","ucode":"1C76747719CD3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/f0/6c34b90f.jpg","comment_is_top":false,"comment_ctime":1571328774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571328774","product_id":100034501,"comment_content":"👍","like_count":0},{"had_liked":false,"id":130054,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1096381,"ip_address":"","ucode":"443BD8B20285A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","comment_is_top":false,"comment_ctime":1567379026,"is_pvip":false,"replies":[{"id":"48557","content":"👍👍👍","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567397526,"ip_address":"","comment_id":130054,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567379026","product_id":100034501,"comment_content":"1、使用docker对前端或者硬件需求较苛刻的开发不是很友好，好处是开发环境搭建迅速零维护。2、较大功能单元，不利于单元测试，不利于后期维护，不利于工作拆解，不利于发现问题，好处是功能相对集中，持续开发时间较长。","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465780,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567397526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}