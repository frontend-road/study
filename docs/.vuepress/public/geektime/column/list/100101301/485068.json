{"id":485068,"title":"25 | 微服务网关：Gateway 中的路由和谓词有何应用？","content":"<p>你好，我是姚秋辰。</p><p>在上节课中，我们了解了Spring Cloud Gateway网关在微服务架构中的定位，我还介绍了Gateway的三大核心组件路由、谓词和过滤器的基本概念。今天，我们就来进一步认识Gateway的内置功能，了解在Gateway中如何声明一个路由，以及路由中的谓词判断逻辑有什么作用。</p><p>Spring Cloud Gateway（以下简称Gateway）提供了非常丰富的内置谓词，你可以通过内置谓词来构建复杂的路由条件，甚至连“整点秒杀”这个场景都能在网关层做控制。这些内置谓词就像乐高积木一样，你可以随意组合在自己的业务逻辑中，构建五花八门的网关层判断逻辑。如果这还不够，那么Gateway还提供了自定义的谓词工厂扩展点，让你构建自定义谓词。</p><p>由于这些个谓词都要附着于一个路由之上，所以在介绍谓词之前，我得先和你聊一下怎么声明一个路由。这一节不涉及微服务项目改造，只是让你能够用最直观的方式体验Gateway的功能特点。</p><h2>声明路由的几种方式</h2><p>在上一节中我们讲到，路由是Gateway中的一条基本转发规则。网关在启动的时候，必须将这些路由规则加载到上下文中，它才能正确处理服务转发请求。那么网关可以从哪些地方加载路由呢？</p><!-- [[[read_end]]] --><p>Gateway提供了三种方式来加载路由规则，分别是Java代码、yaml文件和动态路由。让我们先来一睹为快，近距离感受一下这三种风格迥异的加载方式。</p><p>第一种加载方式是Java代码声明路由，它是可读性和可维护性最好的方式，也是我比较喜欢使用的方式。你可以使用一种链式编程的Builder风格来构造一个route对象，比如在下面的例子里，相信就算我不解释，你也能看明白这段代码做的事情。它声明了两个路由，根据path的匹配规则将请求转发到不同的地址。</p><pre><code class=\"language-plain\">@Bean\npublic RouteLocator declare(RouteLocatorBuilder builder) {\n    return builder.routes()\n            .route(\"id-001\", route -&gt; route\n                    .path(\"/geekbang/**\")\n                    .uri(\"http://time.geekbang.org\")\n            ).route(route -&gt; route\n                    .path(\"/test/**\")\n                    .uri(\"http://www.test.com\")\n            ).build();\n}\n</code></pre><p>第二种方式是通过配置文件来声明路由，你可以在application.yml文件中组装路由规则。我把前面定义的Java路由规则改写成了yml版，你可以参考一下。</p><pre><code class=\"language-plain\">spring:\n  cloud:\n    gateway:\n      routes:\n        - id: id-001\n          uri: http://time.geekbang.org\n          predicates:\n            - Path=/geekbang2/**\n        - uri: http://www.test.com\n          predicates:\n            - Path=/test2/**\n</code></pre><p>不管是Java版还是yml版，它们都是通过“hardcode”的方式声明的静态路由规则，这些Route只会在项目启动后被加载一次。如果你想要在Gateway运行期更改路由逻辑，那么就要使用第三种方式：动态路由加载。</p><p>动态路由也有不同的实现方式。如果你在项目中集成了actuator服务，那么就可以通过Gateway对外开放的actuator端点在运行期对路由规则做增删改查。但这种修改只是临时性的，项目重新启动后就会被打回原形，因为这些动态规则并没有持久化到任何地方。</p><p>动态路由还有另一种实现方式，是我比较推荐的，那就是借助Nacos配置中心来存储路由规则。Gateway通过监听Nacos Config中的文件变动，就可以动态获取Nacos中配置的规则，并在本地生效了。我将在后面的课程中带你落地一套Nacos+Gateway的动态路由。</p><p>了解了如何加载路由规则之后，我们再来看一看，有哪些构建在路由之上的、功能丰富的内置谓词吧。</p><h2>Gateway的内置谓词都有哪些</h2><p>Gateway的内置谓词可真不少，我这里捡一些比较常用的谓词，为你介绍下它们的用法。我把这些谓词大致分为三个类型：寻址谓词、请求参数谓词和时间谓词。我将使用基于Java代码的声明方式，带你挨个来看下如何在路由中配置谓词。</p><p><strong>寻址谓词</strong>，顾名思义，就是针对请求地址和类型做判断的谓词条件。比如这里我们用到的path，其实就是一个路径匹配条件，当请求的URL和Path谓词中指定的模式相匹配的时候，这个谓词就会返回一个True的判断。而method谓词则是根据请求的Http Method做为判断条件，比如我这里就限定了只有GET和POST请求才能访问当前Route。</p><pre><code class=\"language-plain\">.route(\"id-001\", route -&gt; route\n      .path(\"/geekbang/**\")\n      .and().method(HttpMethod.GET, HttpMethod.POST)\n      .uri(\"http://time.geekbang.org\")\n</code></pre><p>在上面这段代码中，我添加了不止一个谓词。在谓词与谓词之间，你可以使用and、or、negate这类“与或非”逻辑连词进行组合，构造一个复杂判断条件。<br>\n接下来是<strong>请求参数谓词</strong>，这类谓词主要对服务请求所附带的参数进行判断。这里的参数不单单是Query参数，还可以是Cookie和Header中包含的参数。比如下面这段代码，如果请求中没有包含指定参数，或者指定参数的值和我指定的regex表达式不匹配，那么请求就无法满足当前路由的谓词判断条件。</p><pre><code class=\"language-plain\">.route(\"id-001\", route -&gt; route\n    // 验证cookie\n    .cookie(\"myCookie\", \"regex\")\n    // 验证header\n    .and().header(\"myHeaderA\")\n    .and().header(\"myHeaderB\", \"regex\")\n    // 验证param\n    .and().query(\"paramA\")\n    .and().query(\"paramB\", \"regex\")\n    .and().remoteAddr(\"远程服务地址\")\n    .and().host(\"pattern1\", \"pattern2\")\n</code></pre><p>如果你要对原始服务请求的远程地址或Header中的Host参数做些文章，那么你也可以通过remoteAddr和host谓词进行判断。</p><p>在实际项目中，非必要情况下，我并不推荐把过多的参数谓词条件定义在网关层，因为这些参数往往携带了业务层的逻辑。如果这些业务参数被大量引入到网关层，从职责分离的角度来讲，并不合适。网关层的逻辑一般来说比较“轻薄”，主要只是一个请求转发，最多再夹带一些简单的鉴权和登录态检查就够了。</p><p>最后一组是时间谓词。你可以借助before、after、between这三个时间谓词来控制当前路由的生效时间段。</p><pre><code class=\"language-plain\">.route(\"id-001\", route -&gt; route\n   // 在指定时间之前\n   .before(ZonedDateTime.parse(\"2022-12-25T14:33:47.789+08:00\"))\n   // 在指定时间之后\n   .or().after(ZonedDateTime.parse(\"2022-12-25T14:33:47.789+08:00\"))\n   // 或者在某个时间段以内\n   .or().between(\n        ZonedDateTime.parse(\"起始时间\"),\n        ZonedDateTime.parse(\"结束时间\"))\n</code></pre><p>拿一项秒杀活动来说，如果开发团队做了一个新的秒杀下单入口，我要限定该入口的生效时间在秒杀时间点之后，那么我就可以使用after谓词。对于固定时间窗口的秒杀活动来说，你还可以使用between来限定生效时间窗口。再结合前面我们讲到的请求参数谓词，你还可以实现更加复杂的路由判断逻辑，比如通过query谓词针对特定商品开放不同的秒杀时段。<br>\n如果Gateway的内置谓词还差那么点意思，你想要实现自定义的谓词逻辑，那么你可以通过Gateway的可扩展谓词工厂来实现自定义谓词。Gateway组件提供了一个统一的抽象类AbstractRoutePredicateFactory作为谓词工厂，你可以通过继承这个类来添加新的谓词逻辑。</p><p>我把实现一个自定义谓词的代码框架放到了这里，你可以参考一下。</p><pre><code class=\"language-plain\">// 继承自通用扩展抽象类AbstractRoutePredicateFactory\npublic class MyPredicateFactory extends \n    AbstractRoutePredicateFactory&lt;MyPredicateFactory.Config&gt; {\n\n   public MyPredicateFactory() {\n      super(Config.class);\n   }\n   \n   // 定义当前谓词所需要用到的参数\n   @Validated\n   public static class Config {\n       private String myField;\n   }\n   \n   @Override\n   public List&lt;String&gt; shortcutFieldOrder() {\n      // 声明当前谓词参数的传入顺序\n      // 参数名要和Config中的参数名称一致\n      return Arrays.asList(\"myField\");\n   }\n   \n   // 实现谓词判断的核心方法\n   // Gateway会将外部传入的参数封装为Config对象\n   @Override\n   public Predicate&lt;ServerWebExchange&gt; apply(Config config) {\n      return new GatewayPredicate() {\n      \n         // 在这个方法里编写自定义谓词逻辑\n         @Override\n         public boolean test(ServerWebExchange exchange) {\n            return true;\n         }\n         \n         @Override\n         public String toString() {\n            return String.format(\"myField: %s\", config.myField);\n         }\n      };\n   }\n}\n</code></pre><p>这个实现的过程非常简单，相信看了上面的源码就能明白。这里面的关键步骤就两步，一是定义Config结构来接收外部传入的谓词参数，二是实现apply方法编写谓词判断逻辑。我将会留一道课后作业让你自己动手实现一个专属谓词。</p><p>到这里，我们就了解了Gateway的路由和谓词是如何完成请求转发的。接下来我来带你回顾一下这一节的重点内容吧。</p><h2>总结</h2><p>今天我们了解了Gateway中声明路由的三种不同方式。对于静态路由来说，我推荐你使用可读性更强的Java代码方式来配置路由；至于动态路由呢，就等到后面的课程，我再教你如何使用Nacos定义JSON格式动态路由吧。</p><p>但是这里要注意的是，一般来讲，路由规则是不受开发团队控制的。暴露什么URL给到外部网关，那可是涉及到安全性的一个决策，在大厂中，所有的对外接口都要经过严格的漏扫和渗透测试，然后再经由相关团队审批才能上线路由规则。</p><p>在实际工作中，最最常用的谓词当属path，其它大部分内置谓词都用不太上，如果你想要使用这些谓词在网关层判断登录状态或者做权限验证，那么我更推荐你使用Gateway的Filter机制，也就是过滤器。我在下节课将基于Gateway限流的场景，跟你讲一下如何在路由规则中添加Filter。</p><h2>思考题</h2><p>结合这节课的内容，你能自己写一个自定义谓词实现某个简单逻辑吗？比如说恶搞的“春节炸弹”，在春节这一天将所有请求转发到一个特定的URL（不要使用between谓词来实现）。这里你需要思考一个问题，如果某个请求同时满足两个路由的判断条件，如何设置其中一个路由先行生效。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"24 | 为什么微服务架构少不了微服务网关？","id":484567},"right":{"article_title":"26 | 微服务网关：如何设置请求转发、跨域和限流规则？","id":485746}},"comments":[{"had_liked":false,"id":336833,"user_name":"威威威小哥","can_delete":false,"product_type":"c1","uid":1794075,"ip_address":"","ucode":"D1833693BB1957","user_header":"https://static001.geekbang.org/account/avatar/00/1b/60/1b/37a1eb91.jpg","comment_is_top":false,"comment_ctime":1646390075,"is_pvip":false,"replies":[{"id":"123393","content":"yoyoyo，我好像漏了这个问题<br>1. 我提示同学一点哈，授人以渔。在请求处理的整个链路中，他要经历各种各样的谓词过滤器等等，这个请求其实是原始的请求。那怎么判定gateway在调用目标服务的时候，底层是采用什么方式呢？只要点击进uri()这个方法里，跟到底层的具体实现类顺藤摸瓜就知道了<br>2. gateway这里也可以在路由规则这一层设置各种限流降级，做保护<br>3. 真谛都在手里，在IDE里点进去gateway源码就明白了","user_name":"作者回复","comment_id":336833,"uid":"2819998","ip_address":"","utype":1,"ctime":1646994322,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5941357371","product_id":100101301,"comment_content":"老师，几个问题请教下<br>1. Gateway 转发到目标服务是重新发起一次http请求吗？<br>2. Gateway有没有类似舱壁模式， 如何防止一个下游服务不可用导致整个gateway雪崩？<br>3. 哪里可以学习gateway的内部细节？","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555619,"discussion_content":"yoyoyo，我好像漏了这个问题\n1. 我提示同学一点哈，授人以渔。在请求处理的整个链路中，他要经历各种各样的谓词过滤器等等，这个请求其实是原始的请求。那怎么判定gateway在调用目标服务的时候，底层是采用什么方式呢？只要点击进uri()这个方法里，跟到底层的具体实现类顺藤摸瓜就知道了\n2. gateway这里也可以在路由规则这一层设置各种限流降级，做保护\n3. 真谛都在手里，在IDE里点进去gateway源码就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646994322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333672,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1047523,"ip_address":"","ucode":"71069214544B8C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/e3/9f3077f3.jpg","comment_is_top":false,"comment_ctime":1644465985,"is_pvip":false,"replies":[{"id":"122044","content":"金丝雀是给大家熟悉负载均衡的一个小案例，在各个公司里通常会有专门的AB test或者灰度框架来实现线上验证，每个大厂有自己的黑科技组件。如果自己实现黑科技方案，确实是可以做个谓词来判断，但后面的服务转发流程还要再次定制，因为gateway默认情况下没有加入Nacos metadata的判断逻辑","user_name":"作者回复","comment_id":333672,"uid":"2819998","ip_address":"","utype":1,"ctime":1644748811,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5939433281","product_id":100101301,"comment_content":"请教老师，是否推荐使用谓词实现金丝雀测试方案?","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550818,"discussion_content":"金丝雀是给大家熟悉负载均衡的一个小案例，在各个公司里通常会有专门的AB test或者灰度框架来实现线上验证，每个大厂有自己的黑科技组件。如果自己实现黑科技方案，确实是可以做个谓词来判断，但后面的服务转发流程还要再次定制，因为gateway默认情况下没有加入Nacos metadata的判断逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644748811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333434,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1644367545,"is_pvip":true,"replies":[{"id":"122050","content":"Q1：无脑选Gateway<br>Q2：服务间调用不经过gateway，是点对点<br>Q3：path里配置的是通配符，可以理解为正则表达式，路径要匹配pattern<br>Q4：uri里指定微服务名称，后面课程会演示<br>Q3: Spring Boot组件<br>Q6：看个人习惯，经常混用<br>Q7：两者定位不同，不建议gatewa直接暴露在最外层，性能和nignx没有可比性","user_name":"作者回复","comment_id":333434,"uid":"2819998","ip_address":"","utype":1,"ctime":1644749668,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5939334841","product_id":100101301,"comment_content":"请教老师几个问题啊：<br>Q1：SpringCloud Gateway和zuul相比哪个更好<br>Q2：Gateway只对用户的请求起作用吗？对微服务之间的请求起作用吗？<br>Q3：gateway路由的具体效果是什么？<br>比如这个路由：<br>.path(&quot;&#47;geekbang&#47;**&quot;)<br>.uri(&quot;http:&#47;&#47;time.geekbang.org&quot;)<br>其最终效果是什么？<br>是说请求的开头是“http:&#47;&#47;time.geekbang.org”，后面只要跟的是“&#47;geekbang&#47;**”就允许通过吗？ 即完整的请求是“http:&#47;&#47;time.geekbang.org&#47;geekbang&#47;**”。<br>Q4：gateway路由信息中没有微服务的信息？<br>比如这个路由：<br>.path(&quot;&#47;geekbang&#47;**&quot;)<br>.uri(&quot;http:&#47;&#47;time.geekbang.org&quot;)<br>Gateway的目的是将请求路由到某一个微服务，但这个路由中并没有微服务的信息啊。<br>Q5：actuator是SpringCloud的一个组件吗？<br>Q6：声明路由的三种方式会混合使用吗？<br>Q7：Nginx和Gateway可以合二为一吗？<br>情况1：去掉gateway，只有nginx，用户请求直接到nginx，nginx直接到微服务；情况2：去掉nginx，只有gateway，用户请求直接到gateway，gateway再到微服务。","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550825,"discussion_content":"Q1：无脑选Gateway\nQ2：服务间调用不经过gateway，是点对点\nQ3：path里配置的是通配符，可以理解为正则表达式，路径要匹配pattern\nQ4：uri里指定微服务名称，后面课程会演示\nQ3: Spring Boot组件\nQ6：看个人习惯，经常混用\nQ7：两者定位不同，不建议gatewa直接暴露在最外层，性能和nignx没有可比性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644749668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354735,"user_name":"Geek_1aaf73","can_delete":false,"product_type":"c1","uid":2940060,"ip_address":"上海","ucode":"DC65D1763AE9D0","user_header":"","comment_is_top":false,"comment_ctime":1660726656,"is_pvip":true,"replies":[{"id":"130676","content":"API网关前置的多层nginx路由的情况更常见一些，对于一些不使用阿里云计算资源的公司，也是买阿里系的高防再加上VIP+多级Nginx做前置的居多","user_name":"作者回复","comment_id":354735,"uid":"2819998","ip_address":"上海","utype":1,"ctime":1665409908,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1660726656","product_id":100101301,"comment_content":"请问下 半仙，<br><br>我们现在的架构是阿里云SLB--&gt;NGINX---&gt;微服务，缺少API网关，<br>我们这里准备开发自己的API网关，然后链路请求是阿里云SLB--&gt;API网关--&gt;微服务，请问这个架构是否OK？<br><br>相当于API网关替代的NGINX，API网关中包含了负载均衡，还可以配置限流、鉴权、路由等，希望这个条没理解错，求回复~","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589948,"discussion_content":"API网关前置的多层nginx路由的情况更常见一些，对于一些不使用阿里云计算资源的公司，也是买阿里系的高防再加上VIP+多级Nginx做前置的居多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665409908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347274,"user_name":"hhhhhh","can_delete":false,"product_type":"c1","uid":2990074,"ip_address":"","ucode":"16CFD7C70A45AD","user_header":"","comment_is_top":false,"comment_ctime":1653893844,"is_pvip":false,"replies":[{"id":"126737","content":"可以看做是政府大楼的门卫，要找哪个部门领导都要从门卫这走，如果领导比较忙还会被门卫打发走（网关层限流）","user_name":"作者回复","comment_id":347274,"uid":"2819998","ip_address":"","utype":1,"ctime":1654238681,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1653893844","product_id":100101301,"comment_content":"微服务网关的作用，就是整合各个微服务功能，形成一套或多套系统  看了半天感觉好像是这意思","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574677,"discussion_content":"可以看做是政府大楼的门卫，要找哪个部门领导都要从门卫这走，如果领导比较忙还会被门卫打发走（网关层限流）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654238681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335370,"user_name":"swagger～","can_delete":false,"product_type":"c1","uid":2397875,"ip_address":"","ucode":"332A839889F581","user_header":"https://static001.geekbang.org/account/avatar/00/24/96/b3/942aaf99.jpg","comment_is_top":false,"comment_ctime":1645491836,"is_pvip":false,"replies":[{"id":"122648","content":"对滴，可以使用order调整生效优先级","user_name":"作者回复","comment_id":335370,"uid":"2819998","ip_address":"","utype":1,"ctime":1645632358,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645491836","product_id":100101301,"comment_content":"请问老师同时满足两个路由是用order设置优先级吗","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552914,"discussion_content":"对滴，可以使用order调整生效优先级","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645632358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}