{"id":648413,"title":"27｜最小生成树：如何用普里姆（Prim）算法解决修路费用最少的问题？","content":"<p>你好，我是王健伟。</p><p>前面我们已经讲解了图的概念、图的存储结构以及图的遍历问题。那么你可能非常想知道图都有哪些具体的实际用途。这节课，我就和你分享图的第一个实际用途——<strong>最小生成树</strong>。</p><p>首先我们先一起看一看什么是最小生成树。</p><h2>最小生成树</h2><p>前面我们曾经展示过生成树：一个无向连通图的生成树是包含图中全部顶点的一个极小连通子图。</p><p>这里的极小，指的是边尽可能少但要保持连通。一个连通图可能会有多个生成树，生成树中如果有n个顶点，则必须有n-1条边，若减去一条边，则会变成非连通图，若增加一条边则图中就会存在回路。</p><p>好了，现在我们假设要在n个城市<span class=\"reference\">（顶点）</span>之间修路<span class=\"reference\">（边）</span>。通常来讲每两个城市之间都可以修一条路<span class=\"reference\">（无向完全图）</span>，这意味着n个城市最多可以修$\\frac{n(n-1)}{2}$条路。但是每修一条路都需要花费一定的资金，所以在每两个城市之间都修一条路是很不划算的。</p><p>要想让这n个城市连通，只需要修n-1条路即可，那么如何在这些可能的路线中选择n-1条以使总的资金花销最少呢？</p><p>图1是一个带权的无向图，你可以把图中的各个顶点看成是一座座城市。图中城市之间的连线对应的权值代表修一条连通这两个城市之间的道路所需要的资金。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/9d/d5/9d2ffc8c761447a4956f4f086b5cc3d5.jpg?wh=1106x465\" alt=\"\" title=\"图1 一个带权的无向图（权值代表修建城市之间的道路所需要的资金）\"></p><p>图2中所示的是随意列举的三种连通方案：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/b5/d58ec369c76e2998b1e849d12ca70db5.jpg?wh=1875x585\" alt=\"\" title=\"图2&nbsp; 图1的3个生成树代表着三种修路方式\"></p><p>图2的三种修路方式中，第一种方式所需要的资金是40+15+25+80+70=230。第二种方式所需要的资金是100+20+65+80+30=295。第三种方式所需要的资金是100+40+25+70+80=315。</p><p>所谓最小生成树，就是在图1的所有生成树中找到最小代价<span class=\"reference\">（所需要资金最少</span>）生成树即找到所需要资金最少的修路方式。</p><p>这里我们给出最小生成树的定义：对于一个<strong>带权无向连通图</strong>，其生成树不同，树中所有边上的权值之和也可能不同，边上权值之和最小的生成树就是该带权连通无向图的最小生成树<span class=\"reference\">（Minimum Spanning Tree，简称MST）</span>。这里有下面几点需要说明。</p><ul>\n<li>最小生成树是可能有多个的，但最小生成树边的权值之和肯定是最小且唯一的。</li>\n<li>最小生成树的边数是顶点数-1。再减少一条边则变成了非连通图，增加一条边则图中就会存在回路。</li>\n<li>如果连通图本身是一棵树<span class=\"reference\">（连通且不存在回路）</span>，则其最小生成树就是它本身。</li>\n</ul><p>寻找连通图的最小生成树的算法有很多，其中有两种比较典型，分别是普里姆<span class=\"reference\">（Prim）</span>算法和克鲁斯卡尔<span class=\"reference\">（Kruskal）</span>算法。这节课我们就先说普里姆算法。</p><h2>普里姆<span class=\"reference\">（Prim）</span>算法详解</h2><p>普里姆算法从任意顶点<span class=\"reference\">（比如顶点A）</span>开始构建最小生成树。针对图1，我来描述一下具体步骤。</p><ul>\n<li>将顶点A放入到最小生成树中。</li>\n<li>找与顶点A连通的所有其他顶点中代价最小<span class=\"reference\">（两个顶点对应的边权值最小）</span>的顶点放入到最小生成树中。这里应该是将顶点C放入到最小生成树中。</li>\n<li>找与最小生成树中所有顶点相邻的，其他不在最小生成树里的顶点中，边权值最小的顶点<span class=\"reference\">（如果多个则任选一个）</span>放入到最小生成树中。这里应该是将顶点D放入到最小生成树中，因为顶点A和顶点D之间的边权值是20。</li>\n<li>重复上面这个步骤，再分别将顶点F、E、B放入到最小生成树中，直至图中所有顶点都加入到了最小生成树中，如图3所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/32/b8/327c3c419f7c6d2c4ab4651d486b78b8.jpg?wh=2188x570\" alt=\"\" title=\"图3 针对图1采用普里姆算法得到最小生成树的步骤\"></p><p>从图3可以看到，最少生成树所对应边的权值之和是15+20+30+40+40=145。</p><p>采用邻接矩阵的存储方式保存图更容易访问到图中边的权值，所以下面的代码中将采用邻接矩阵的方式来存储图1所示的带权无向图并用普利姆算法构建该图的最小生成树。因为图中顶点的边是带有权值的，因此两个不同的顶点之间若没有边则可以将它们之间代表边的权值设置为一个非常大的数字并在显示时显示为∞<span class=\"reference\">（无穷）</span>，相同顶点的权值显示为0即可，图1所对应的邻接矩阵如图4所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/80/8dfdd9f021b2cc61594f6271d1999680.jpg?wh=1367x661\" alt=\"\" title=\"图4  针对图1对应的邻接矩阵\"></p><p>普里姆算法的实现代码也有很多种写法，这里先选择一种简单好理解的实现方法，我们看一下代码。</p><pre><code class=\"language-plain\">#define MaxVertices_size 100 //最大顶点数大小\n#define INT_MAX_MY 2147483647//整型能够保存的最大数值，用以表示两个顶点之间不存在边\ntemplate&lt;typename T&gt; //T代表顶点类型\nclass GraphMatrix//邻接矩阵代表的图\n{\npublic:\n\tGraphMatrix() //构造函数，空间复杂度O(n)+O(n^2)=O(n^2)\n\t{\n\t\tm_numVertices = 0;\n\t\tm_numEdges = 0;\n\t\tpm_VecticesList = new T[MaxVertices_size];\n\t\tpm_Edges = new int* [MaxVertices_size];\n\t\tfor (int i = 0; i &lt; MaxVertices_size; ++i)\n\t\t{\n\t\t\tpm_Edges[i] = new int[MaxVertices_size];\n\t\t} //end for\n\t\tfor (int i = 0; i &lt; MaxVertices_size; ++i)\n\t\t{\n\t\t\tfor (int j = 0; j &lt; MaxVertices_size; ++j)\n\t\t\t{\n\t\t\t\tif (i == j)\n\t\t\t\t{\n\t\t\t\t\t//顶点自己到自己对应的边的权值应该用0标记\n\t\t\t\t\tpm_Edges[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpm_Edges[i][j] = INT_MAX_MY; //开始时矩阵中不记录边信息，即边与边之间的权值信息给成最大值INT_MAX_MY\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t~GraphMatrix() //析构函数\n\t{\n\t\tdelete[] pm_VecticesList;\n\t\tfor (int i = 0; i &lt; MaxVertices_size; ++i)\n\t\t{\n\t\t\tdelete[] pm_Edges[i];\n\t\t} //end for\n\t\tdelete[] pm_Edges;\n\t}\t\t\npublic:\n\t//插入顶点\n\tbool InsertVertex(const T&amp; tmpv)\n\t{\n\t\tif (m_numVertices &gt;= MaxVertices_size) //顶点空间已满\n\t\t{\n\t\t\tcout &lt;&lt;\"顶点空间已满\"&lt;&lt; endl;\n\t\t\treturn false;\n\t\t}\n\t\tif (GetVertexIdx(tmpv) != -1) //该顶点已经存在\n\t\t{\n\t\t\tcout &lt;&lt;\"顶点\"&lt;&lt; tmpv &lt;&lt;\"已经存在!\"&lt;&lt; endl;\n\t\t\treturn false;\n\t\t}\n\t\tpm_VecticesList[m_numVertices] = tmpv;\n\t\tm_numVertices++;\n\t\treturn true;\n\t}\n\t//插入边\n\tbool InsertEdge(const T&amp; tmpv1, const T&amp; tmpv2,int weight) //在tmpv1和tmpv2两个顶点之间插入一条边，注意权值也要插入进来。weight代表边与边之间的权值\n    {\n\t\tint idx1 = GetVertexIdx(tmpv1);\n\t\tint idx2 = GetVertexIdx(tmpv2);\n\t\tif (idx1 == -1 || idx2 == -1)//某个顶点不存在，不可以插入边\n\t\t\treturn false;\n\t\tif (pm_Edges[idx1][idx2] != INT_MAX_MY)//边重复\n\t\t\treturn false;\n\t\tpm_Edges[idx1][idx2] = pm_Edges[idx2][idx1] = weight; //无向图是个对称矩阵。tmpv1到tmpv2之间插入边就等于tmpv2到tmpv1之间插入了边\t\t\t\t\t\t\n\t\tm_numEdges++; //边数量增加1\n\t\treturn true;\n\t}\n    void DispGraph() //显示图信息，其实就是显示矩阵信息\n\t{\n\t\tcout &lt;&lt;\"\";&nbsp; //为了凑一些对齐关系，所以先输出三个空格\n\t\t//输出图中的顶点，其实就是矩阵的最顶上一行的顶点名信息\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\t\t\t\t\n\t\t\tprintf(\"%5c\", pm_VecticesList[i]);&nbsp; //5：不够5位的右对齐\n\t\t}\n\t\tcout &lt;&lt; endl; //换行\n\t\t//输出对应的邻接矩阵\n\t\tfor(int i = 0; i &lt; m_numVertices; ++i)//注意循环结束条件是真实的顶点个数\n\t\t{\n\t\t\t//输出矩阵左侧的顶点名\n\t\t\tcout &lt;&lt; pm_VecticesList[i] &lt;&lt;\"\";\n\t\t\tfor (int j = 0; j &lt; m_numVertices; ++j)\n\t\t\t{\n\t\t\t\tif (pm_Edges[i][j] == INT_MAX_MY)\n\t\t\t\t{\t\t\t\n\t\t\t\t\tprintf(\"%5s\", \"∞\");&nbsp; //两个顶点之间没有边\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%5d\", pm_Edges[i][j]);\n\t\t\t\t}\n\t\t\t} //end for j\n\t\t\tcout &lt;&lt; endl; //换行\n\t\t} //end for i\n\t\tcout &lt;&lt; endl; //换行\n\t}\n\t//判断某个idx值是否位于最小生成树顶点下标数组中\n\tbool IfInMstVertIdxArray(int curridx,int *p_inMstVertIdxArray,int in_MstVertCount)\n\t{\n\t\tfor (int i = 0; i &lt; in_MstVertCount; ++i)\n\t\t{\n\t\t\tif (p_inMstVertIdxArray[i] == curridx) //这个idx位于最小生成树顶点下标数组中\n\t\t\t\treturn true;&nbsp;\n\t\t} //end for\n\t\treturn false; //这个idx不在最小生成树顶点下标数组中\n\t}\n\t//用 普里姆（Prim）算法创建最小生成树\n\tbool CreateMinSpanTree_Prim(const T&amp; tmpv)&nbsp; //tmpv作为创建最小生成树时的起始顶点\n\t{\t\t\t\n\t\tint idx = GetVertexIdx(tmpv);\n\t\tif (idx == -1) //顶点不存在\n\t\t\treturn false;\n\t\t\t\t\t\n\t\tint in_MstVertCount = 1;&nbsp; //已经增加到生成树【最小生成树】中的顶点数量，刚开始肯定是要把起始顶点放进去所以这里给1\n\t\tint* p_inMstVertIdxArray = new int[m_numVertices]; //已经增加到生成树中的顶点的下标会保存到该数组中\n\t\tp_inMstVertIdxArray[0] = idx; //起始顶点下标\n\t\tint minWeight = INT_MAX_MY;&nbsp; //用来记录当前的最小权值，先给成最大值\t\t\n\t\tint minTmpStartVertIdx = -1; //临时存放一个开始顶点的下标值（一个边的开始顶点）\n\t\tint minTmpEndVertIdx = -1; //临时存放一个目标顶点的下标值（一个边的末端顶点）\n\t\twhile (true)\n\t\t{\n\t\t\tif (in_MstVertCount == m_numVertices) //生成树中的顶点数量等于了整个图的顶点数量，最小生成树创建完毕\n\t\t\t\tbreak;\n\t\t\tminWeight = INT_MAX_MY; //权值先给成最大值\n\t\t\tfor (int iv = 0; iv &lt; in_MstVertCount; ++iv) //遍历所有生成树中已有的顶点，从其中找到以该顶点开始的边中权值最小的边所对应的目标顶点\n\t\t\t{\t\n\t\t\t\tint tmpidx = p_inMstVertIdxArray[iv]; //拿到该位置的信息【顶点索引】\n\t\t\t\tfor (int i = 0; i &lt; m_numVertices; ++i) //遍历所有顶点以找到所有以tmpidx顶点为起点的边\n\t\t\t\t{\n\t\t\t\t\tif (pm_Edges[tmpidx][i] != 0 &amp;&amp; pm_Edges[tmpidx][i] != INT_MAX_MY) //当前顶点与目标顶点不是同一个顶点（否则权值==0）并且与目标顶点之间有连线（否则权值 == INT_MAX_MY)\n\t\t\t\t\t{\n\t\t\t\t\t\t//在以iv顶点为起点的所有边中找权值最小的边\n\t\t\t\t\t\t//权值最小的边所对应目标顶点不在最小生成树顶点下标数组中，说明是个新顶点\n\t\t\t\t\t\tif (pm_Edges[tmpidx][i] &lt; minWeight&nbsp; &nbsp;&amp;&amp;&nbsp; IfInMstVertIdxArray(i, p_inMstVertIdxArray, in_MstVertCount) == false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tminWeight = pm_Edges[tmpidx][i];\n\t\t\t\t\t\t\tminTmpStartVertIdx = tmpidx; //记录边对应的开始顶点下标\n\t\t\t\t\t\t\tminTmpEndVertIdx = i;&nbsp; &nbsp; //记录边对应的目标顶点下标\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} //end for i\n\t\t\t}//end for iv\n\t\t\t//走到这里，肯定找到了个新顶点，输出最小生成树的边信息\t\n\t\t\tcout &lt;&lt; pm_VecticesList[minTmpStartVertIdx] &lt;&lt;\"---&gt;\"&lt;&lt; pm_VecticesList[minTmpEndVertIdx] &lt;&lt;\" : 权值=\"&lt;&lt; minWeight &lt;&lt; endl;\n\t\t\tp_inMstVertIdxArray[in_MstVertCount] = minTmpEndVertIdx;&nbsp; //将新顶点增加到最小生成树的下标数组中\n\t\t\tin_MstVertCount++;\n\t\t} //end while\n\t\t//内存释放\n\t\tdelete[] p_inMstVertIdxArray;\n\t\treturn true;\n\t}\nprivate:\n\t//获取顶点下标\n\tint GetVertexIdx(const T&amp; tmpv)\n\t{\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tif (pm_VecticesList[i] == tmpv)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1; //不存在的顶点\n\t}\nprivate:\n\tint m_numVertices;&nbsp; &nbsp;//当前顶点数量\n\tint m_numEdges;&nbsp; &nbsp; &nbsp; //边数量\n\tT* pm_VecticesList;&nbsp; //顶点列表\n\tint** pm_Edges;&nbsp; &nbsp; &nbsp; //边信息，二维数组\n};\n</code></pre><p>在main主函数中，增加下面的代码。</p><pre><code class=\"language-plain\">GraphMatrix&lt;char&gt; gm;\n//向图中插入顶点\ngm.InsertVertex('A');\ngm.InsertVertex('B');\ngm.InsertVertex('C');\ngm.InsertVertex('D');\ngm.InsertVertex('E');\ngm.InsertVertex('F');\n//向图中插入边\ngm.InsertEdge('A', 'B', 100); //100代表边的权值\ngm.InsertEdge('A', 'C', 15);\ngm.InsertEdge('A', 'D', 20);\ngm.InsertEdge('B', 'C', 40);\ngm.InsertEdge('B', 'E', 65);\ngm.InsertEdge('C', 'D', 25);\ngm.InsertEdge('C', 'E', 70);\ngm.InsertEdge('C', 'F', 80);\ngm.InsertEdge('D', 'F', 30);\ngm.InsertEdge('E', 'F', 40);\ngm.DispGraph();\ngm.CreateMinSpanTree_Prim('A');\n</code></pre><p>执行结果为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/65/26/65e6f142a246fa6191a89c2b478c6626.jpg?wh=2322x1080\" alt=\"\"></p><p>上述代码中，成员函数CreateMinSpanTree_Prim实现了用普里姆算法创建最小生成树，代码性能也许算不上最优，但胜在实现方法简单且易于理解。我们尝试具体描述一下。</p><ol>\n<li>创建一个数组专门保存最小生成树中的顶点并把开始顶点放入其中。</li>\n<li>下面的步骤会不断循环直到最小生成树中的顶点数量等于整个图的顶点数量。</li>\n</ol><ul>\n<li>遍历最小生成树中的所有顶点，从其中找到以该顶点开始的边中权值最小的边所对应的目标顶点，当然该目标顶点必须是没有出现在最小生成树顶点数组中。</li>\n<li>以“开始顶点—&gt;目标顶点：权值”的格式显示输出最小生成树的边信息并将目标顶点放入最小生成树顶点数组中。</li>\n</ul><p>CreateMinSpanTree_Prim所实现的普里姆最小生成树算法代码有改进空间，通过改进来进一步提升代码执行效率，但改进也会增加代码理解难度。这里我来具体描述一下。</p><p>1.&nbsp;引入一个称为lowcost的数组用来保存<strong>权值</strong>信息。lowcost会记录最小生成树中顶点到达所有顶点的最小权值信息——最小权值也就是最近的邻接边。之后，引入一个称为veridx的数组用来保存顶点对应的下标信息。</p><p>假设是从顶点A开始构建最小生成树，那么观察图4可以看到，顶点A与其他各个顶点相关边的权值信息为“0&nbsp; 100&nbsp; &nbsp;15&nbsp; &nbsp;20&nbsp; &nbsp;∞&nbsp; &nbsp;∞”，将这个信息保存在lowcost数组中。而因为顶点A的下标为0，所以将0这个下标值保存在veridx数组中。目前lowcost和veridx两个数组中的内容看起来如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/40/5fa306924e80401e32df7a622cc87c40.jpg?wh=1615x413\" alt=\"\" title=\"图5 lowcost和veridx数组的初始内容\"></p><ol start=\"2\">\n<li>以下步骤会不断循环直到最小生成树中的顶点数量等于整个图的顶点数量。第一次循环描述如下：</li>\n</ol><ul>\n<li>在lowcost数组中寻找一个权值最小的边<span class=\"reference\">（但权值不能为0）</span>，该边对应的目标顶点下标也就同时从lowcost数组中拿到了。在图5中，最小的权值是15，对应的顶点下标是2。</li>\n<li>veridx数组中下标2对应的位置的值是0，这代表下标为0的顶点和下标为2的顶点之间的边的权值是15。</li>\n<li>下标为0到下标为2的顶点之间的边就是最小生成树的一条边，将该信息显示到屏幕上。然后将lowcost数组下标2对应位置的权值15修改为0，之后标示下标2代表的顶点被加入到了最小生成树中。目前lowcost和veridx两个数组中的内容和已经产生的部分生成树看起来如下：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/9b/be/9b2760beb5594428db958f26cdbe4dbe.jpg?wh=1582x629\" alt=\"\" title=\"图6 创建最小生成树期间的lowcost和veridx数组内容和生成的部分最小生成树内容\"></p><ul>\n<li>因为找到了下标为2的新顶点，所以需要更新lowcost和veridx数组信息。新顶点相关边的权值信息通过看邻接矩阵就可以看到，为“15&nbsp; &nbsp;40&nbsp; &nbsp; 0&nbsp; &nbsp;25&nbsp; &nbsp;70&nbsp; &nbsp;80”，这些信息与lowcost数组对应位置的权值信息做比较，如果新顶点对应位置的权值信息小于lowcost数组对应位置的权值信息<span class=\"reference\">（这说明新加入到最小生成树的顶点到达其他相同顶点的距离更短）</span>，则将lowcost数组对应位置的权值更改为新顶点对应位置的权值信息，并将veridx数组对应位置的内容修改为新顶点的下标值。这一系列操作后lowcost和veridx两个数组中的内容看起来如下：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/05/01/05e1afd7214db9b64789573dc131d901.jpg?wh=1248x308\" alt=\"\" title=\"图7 创建最小生成树期间的lowcost和veridx数组内容\"></p><p>之所以进行上述操作，是因为新加入到最小生成树中的下标为2的新顶点<span class=\"reference\">（顶点C）</span>比下标为0的顶点<span class=\"reference\">（顶点A）</span>到达图7中下标为1、4、5的顶点<span class=\"reference\">（顶点B、E、F）</span>的权值更小，所以当然要记录权值更小的顶点信息。换个角度再想一想：<strong>原来顶点A与顶点B之间的边权值是100，现在因为最小生成树中加入了顶点C，而顶点C和顶点B之间边的权值是40，当然就不再需要理会原来顶点A与顶点B之间的权值，只需要记录顶点C与顶点B之间的权值是40即可</strong>。</p><p>图7包含的信息非常多，你可能无法从图7中解读出全部有用的信息，这里解读一下试试看。</p><p>信息一：下标为0的位置<span class=\"reference\">（该位置代表顶点A）</span>，lowcost数组对应位置内容为0，这表示顶点A已经位于最小生成树中。</p><p>信息二：下标为1的位置<span class=\"reference\">（该位置代表顶点B）</span>，lowcost数组对应位置内容为40，veridx数组对应位置为2<span class=\"reference\">（顶点C）</span>，这表示顶点B和顶点C之间的边权值为40。</p><p>信息三：下标为2的位置<span class=\"reference\">（该位置代表顶点C）</span>，lowcost数组对应位置内容为0，这表示顶点C已经位于最小生成树中。</p><p>信息四：下标为3的位置<span class=\"reference\">（该位置代表顶点D）</span>，lowcost数组对应位置内容为20，veridx数组对应位置为0<span class=\"reference\">（顶点A）</span>，这表示顶点D和顶点A之间的边权值为20。</p><p>信息五：下标为4的位置<span class=\"reference\">（该位置代表顶点E）</span>，lowcost数组对应位置内容为70，veridx数组对应位置为2<span class=\"reference\">（顶点C）</span>，这表示顶点E和顶点C之间的边权值为70。</p><p>信息六：下标为5的位置<span class=\"reference\">（该位置代表顶点F）</span>，lowcost数组对应位置内容为80，veridx数组对应位置为2<span class=\"reference\">（顶点C）</span>，这表示顶点F和顶点C之间的边权值为80。</p><p>图8中虚线绘制部分内容代表了图7所表达的信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/de/yy03e81100c26f86f1f645948148f7de.jpg?wh=1084x495\" alt=\"\" title=\"图8 从图7获取到最小生成树中顶点的最小权值信息\"></p><ul>\n<li>本次循环执行完毕，开始下一次循环。</li>\n</ul><p>将上述改进过的普里姆最小生成树算法实现代码命名为CreateMinSpanTree_Prim2，就是下面的内容。</p><pre><code class=\"language-plain\">//用普里姆（Prim）算法创建最小生成树的第二种方法\nbool CreateMinSpanTree_Prim2(const T&amp; tmpv)//tmpv作为创建最小生成树时的起始顶点\n{\n\tint idx = GetVertexIdx(tmpv);\n\tif (idx == -1) //顶点不存在\n\t\treturn false;\n\tint lowcost[MaxVertices_size];&nbsp; &nbsp; //保存权值的数组，采用new动态分配也可以\n\tint veridx[MaxVertices_size]; \t&nbsp; //保存顶点下标的数组，采用new动态分配也可以\n\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t{\n\t\tlowcost[i] = pm_Edges[idx][i];&nbsp; &nbsp;//保存开始顶点的权值信息\n\t\tveridx[i] = idx;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//保持开始顶点的下标信息\t\n\t} //end for\n\t\n\tint minTmpStartVertIdx = -1;\n\tint minTmpEndVertIdx = -1;\n\tfor (int i = 0; i &lt; m_numVertices - 1; ++i)//循环“顶点数-1”次即可创建出最小生成树\n\t{\n\t\t//在lowcost数组中找权值最小的顶点\n\t\tint minWeight = INT_MAX_MY;\t\t\t\t\n\t\tfor (int w = 0; w &lt; m_numVertices; ++w) //遍历lowcost数组，找到其中权值最小的\n\t\t{\n\t\t\tif(lowcost[w] != 0 &amp;&amp; minWeight &gt; lowcost[w])\n\t\t\t{&nbsp;\n\t\t\t\tminWeight = lowcost[w];\n\t\t\t\tminTmpEndVertIdx = w;\n\t\t\t}\n\t\t} //end for w\n\t\tminTmpStartVertIdx = veridx[minTmpEndVertIdx];\n\t\tcout &lt;&lt; pm_VecticesList[minTmpStartVertIdx] &lt;&lt;\"---&gt;\"&lt;&lt; pm_VecticesList[minTmpEndVertIdx] &lt;&lt;\" : 权值=\"&lt;&lt; minWeight &lt;&lt; endl; //显示边和权值信息\n\t\tlowcost[minTmpEndVertIdx]= 0;//权值设置为0表示该顶点被放入了最小生成树中\n\t\t//通过最新寻找到的顶点来修改lowcost数组和veridx数组中的内容\n\t\tfor (int v = 0; v &lt; m_numVertices; ++v)\n\t\t{\t\n\t\t\tif (lowcost[v] &gt; pm_Edges[minTmpEndVertIdx][v])\n\t\t\t{\n\t\t\t\tlowcost[v] = pm_Edges[minTmpEndVertIdx][v];\n\t\t\t\tveridx[v] = minTmpEndVertIdx;\n\t\t\t}\n\t\t} //end for v\n\t}//end for i\n\treturn true;\n}\n</code></pre><p>在main主函数中，继续增加下面的测试代码，这次以顶点E作为开始顶点构建最小生成树。</p><pre><code class=\"language-plain\">cout &lt;&lt;\"---------------------\"&lt;&lt; endl;\ngm.CreateMinSpanTree_Prim2('E');\n</code></pre><p>新增代码的执行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/a3/4b/a32aef2281842bdc16f4d41bc518394b.jpg?wh=2268x512\" alt=\"\"></p><p>从代码中可以看到，普里姆算法是从某个顶点开始构建最小生成树，每次将权值最小的新顶点加入到最小生成树直到所有顶点都加入到最小生成树中。因为算法涉及到了双重for循环，所以普里姆算法的时间复杂度为O($|V|^{2}$)，即O($n^{2}$)。</p><p>因为普利姆算法只与图中顶点的数量有关，与边数无关，所以当图中顶点数比较少，而边数比较多时使用该算法构造最小生成树效果较好。</p><h2>小结</h2><p>这节课我首先带你回顾了一下无向连通图的<strong>生成树</strong>的概念，接着，我们给出了一个带权无向连通图的最小生成树的定义。之所以给出这个最小生成树的定义，是因为我们要用一些算法来寻找连通图的最小生成树。最小生成树对于解决在多个城市之间如何修路所花费的资金最少等问题具有非常现实的意义。</p><p>接着我向你介绍了利用普里姆<span class=\"reference\">（Prim）</span>算法来寻找一个无向连通图的最小生成树。我们重点描述一下利用该算法从图中任意一个顶点构建最小生成树的步骤。</p><ul>\n<li>将任意顶点放入到最小生成树中。</li>\n<li>找与该顶点连通的所有其他顶点中代价最小的顶点放入到最小生成树中。</li>\n<li>找与最小生成树中所有顶点相邻的，其他不在最小生成树里的顶点中，边权值最小的顶点放入到最小生成树中。</li>\n<li>重复上面的步骤。</li>\n</ul><p>另外，在编写代码方面，代码中我们采用邻接矩阵来保存图，而后我带你实现了一个<strong>比较好理解的普里姆算法</strong>来创建最小生成树。不过，比较好理解的普里姆算法的缺点是执行效率上稍差一些，所以，我们又改进了现有算法，实现了另外一种<strong>比较难理解</strong>但执行效率更高的普里姆算法，这种改进算法需要引入一个lowcost权值信息数组以及保存顶点对应下标信息的veridx数组，我向你详细阐述了这两个数组的用法以帮助你更好地理解改进后的普里姆算法实现最小生成树的代码。</p><p>普里姆算法的时间复杂度是O($n^{2}$)，并且因为该算法只与图中顶点的数量相关，与边数无关，所以当图中<strong>顶点数比较少，边数比较多</strong>时最适合使用该算法构造最小生成树。</p><h2>课后思考</h2><p>请你想一想，现实生活中有哪些问题比较适合用普里姆算法实现的最小生成树来解决？</p><p>欢迎你在留言区和我分享。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p>","neighbors":{"left":{"article_title":"26｜图：深度优先遍历（DFS）与广度优先遍历（BFS）","id":647772},"right":{"article_title":"28｜最小生成树：克鲁斯卡尔（Kruskal）算法与修路费用最少的问题？","id":649077}},"comments":[{"had_liked":false,"id":377671,"user_name":"Se7en","can_delete":false,"product_type":"c1","uid":1225368,"ip_address":"北京","ucode":"93EFAE37AFB12D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/98/82b76c88.jpg","comment_is_top":false,"comment_ctime":1688991997,"is_pvip":false,"replies":[{"id":137654,"content":"非常好的建议，非常感谢😁😁","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1689124756,"ip_address":"广东","comment_id":377671,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"给个建议，把私有变量放类开头，这样方便阅读","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623162,"discussion_content":"非常好的建议，非常感谢😁😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689124756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377636,"user_name":"Yj.yolo","can_delete":false,"product_type":"c1","uid":2814082,"ip_address":"广东","ucode":"0ED1B41F124061","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f0/82/f235d91d.jpg","comment_is_top":false,"comment_ctime":1688920029,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"城市景观规划和城市道路网络规划  都是  最小生成树的实际应用场景","like_count":0}]}