{"id":191452,"title":"28 | 高性能架构：除了代码，你还可以在哪些地方优化性能？","content":"<p>系统性能是互联网应用最核心的非功能性架构目标，系统因为高并发访问引起的首要问题就是性能问题：高并发访问的情况下，系统因为资源不足，处理每个请求的时间都会变慢，看起来就是性能变差。</p><p>因此，性能优化是互联网架构师的核心职责之一，通常我们想到性能优化，首先想到的就是优化代码。事实上，一个系统是由很多方面组成的，所有这些方面都可以进行优化，就是我们接下来要讲的7层优化。</p><p>进行性能优化的一个首要前提是，我们必须知道系统当前的性能状况，然后才能进行性能优化。而了解系统性能状况必须通过性能测试，我们先看下性能测试。</p><h2>性能指标</h2><p>所谓性能测试，就是模拟用户请求，对系统施加高并发的访问压力，观察系统的性能指标。系统性能指标主要有响应时间、并发数、吞吐量和性能计数器。</p><p>所谓<strong>响应时间</strong>，是指从发出请求开始到收到最后响应数据所需要的时间。响应时间是系统最重要的性能指标，最直接地反映了系统的快慢。</p><p><strong>并发数</strong>是指系统同时处理的请求数，这个数字反映了系统的负载压力情况。性能测试的时候，通常在性能压测工具中，用多线程模拟并发用户请求，每个线程模拟一个用户请求，这个线程数就是性能指标中的并发数。</p><p><strong>吞吐量</strong>是指单位时间内系统处理请求的数量，体现的是系统的处理能力。我们一般用每秒HTTP请求数HPS、每秒事务数TPS、每秒查询数QPS这样的一些指标来衡量。</p><!-- [[[read_end]]] --><p>吞吐量、响应时间和并发数三者之间是有关联性的。并发数不变，响应时间足够快，那么单位时间的吞吐量就会相应的提高。比如说并发数是1，响应时间如果是100ms，那么TPS就可以是10。如果响应时间是500ms，但是TPS吞吐量就变成了2。</p><p><strong>性能计数器</strong>，指的是服务器或者操作系统性能的一些指标数据，包括系统负载 System Load、对象和线程数、内存使用、CPU使用、磁盘和网络I/O使用等指标，这些指标是系统监控的重要参数，反映系统负载和处理能力的一些关键指标，通常这些指标和性能是强相关的。这些指标很高，成为瓶颈，通常也预示着性能可能会出现问题。在实践中运维和开发人员会对这些性能指标设置一些报警的阈值。当监控系统发现性能计数器超过阈值的时候，就会向运维和开发人员报警，以便及时发现、处理系统的性能问题。</p><h2>性能测试</h2><p>性能测试是使用性能测试工具，通过多线程模拟用户请求对系统施加高并发的访问压力，得到以上这些性能指标。事实上，性能测试随着性能测试工具逐渐增加请求线程数，系统的吞吐量和响应时间会呈现出不同的性能特性。具体说来，整个测试过程又可细分为性能测试、负载测试、压力测试三个阶段。</p><p><strong>性能测试</strong>是指以系统设计初期规划的性能指标为预期目标，对系统不断地施加压力，验证系统在资源可接受的范围内是否达到了性能的预期目标。这个过程中，随着并发数的增加，吞入量也在增加，但是响应时间变化不大。系统正常情况下的并发访问压力应该都在这个范围内。</p><p><strong>负载测试</strong>则是对系统不断地施加并发请求，增加系统的压力，直到系统的某项或多项指标达到安全临界值。这个过程中，随着并发数的增加，吞吐量只有小幅的增加，达到最大值后，吞吐量还会下降，而响应时间则会不断增加。</p><p><strong>压力测试</strong>是指在超过安全负载的情况下，增加并发请求数，对系统继续施加压力，直到系统崩溃，或者不再处理任何请求，此时的并发数就是系统的最大压力承受能力。这个过程中，吞吐量迅速下降，响应时间迅速增加，到了系统崩溃点，吞吐量为0，响应时间无穷大。</p><p>性能压测工具不断增加并发请求线程数，持续对系统进行性能测试、负载测试、压力测试，得到对应的TPS和响应时间，将这些指标画在一个坐标系里，就得到系统的性能特性曲线。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/60/277a0f7ee4ed7eca950f206589847860.png?wh=1212*556\" alt=\"\"></p><p>除了测出性能指标，性能测试有时候还需要进行稳定性测试。<strong>稳定性测试</strong>是指持续地对被测试系统施加一定的并发访问压力，使系统运行较长一段时间，以此检测系统是否稳定。通常，线上系统的负载压力是不稳定的，有时候，为了更好地模拟线上访问压力，稳定性测试的并发访问压力也可以不断调整压测线程数，在不稳定的并发压力下，测试系统的稳定性。</p><h2>性能优化</h2><p>一个系统是由很多方面构成的，程序只是这个系统的一小部分，因此进行性能优化的时候，也需要从系统的角度出发，综合考虑优化方案。</p><h3>用户体验优化</h3><p>性能优化的最终目的是让用户有更好的性能体验，所以性能优化最直接的其实是优化用户体验。同样500毫秒的响应时间，如果收到全部响应数据后才开始显示给用户，相比收到部分数据就开始显示，对用户的体验就完全不一样。同样，在等待响应结果的时候，只显示一个空白的页面和显示一个进度条，用户感受到的性能也是完全不同的。</p><p>除了用户体验优化这种比较<strong>主观的性能优化</strong>，即使我们想要真正优化性能指标，进行<strong>客观的性能优化</strong>，我们也可以从系统的角度，全方位考虑系统的各个方面。</p><p>从系统的宏观层面逐渐往下看，可以在7个层面进行性能优化。</p><h3>第一层：数据中心优化</h3><p>首先是数据中心性能优化，我们开发的软件是部署在数据中心的，对于一个全球访问的互联网应用而言，如果只有一个数据中心，那么最远的用户访问这个数据中心，即使以光速进行网络通信，一次请求响应的网络通信时间也需要130多毫秒。这已经是一个人可以明显感受到的响应延迟了。</p><p>所以，现在大型的互联网应用基本都采用多数据中心方案，在全球各个主要区域都部署自己的数据中心，就近为区域用户提供服务，加快响应速度。</p><h3>第二层：硬件优化</h3><p>我在专栏文章<a href=\"https://time.geekbang.org/column/article/187517\">21篇</a>讲分布式架构时，就对比分析了垂直伸缩和水平伸缩两种架构方案。事实上，即便使用水平伸缩，在分布式集群服务器内部，依然可以使用垂直伸缩，优化服务器的硬件能力。有时候，硬件能力的提升，对系统性能的影响是非常巨大的。</p><p>我在做Spark性能优化时发现，网络通信是整个计算作业的一个重要瓶颈点。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/fa/baccdc1d70c72261a7c043b07325a4fa.png?wh=718*235\" alt=\"\" title=\"1G网卡\"></p><p>我们看到，在使用1G网卡的情况下，某些计算阶段的网络通信开销时间需要50多秒。如果用软件优化的方法，进行数据压缩，一方面提升有限，另一方面还需要消耗大量CPU的资源，使CPU资源成为瓶颈。</p><p>后来通过硬件升级的办法进行优化，使用10G网卡替换1G网卡，网络通信时间消耗得到极大改善。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/e3/1cefebf76b3a46426e82a77edb595ae3.png?wh=722*237\" alt=\"\" title=\"10G网卡\"></p><p>原来需要50多秒的通信时间，现在只需要10多秒就可以完成，整个作业计算时间也大大缩短。硬件优化效果明显。</p><h3>第三层：操作系统优化</h3><p>不同操作系统以及操作系统内的某些特性也会对软件性能有重要影响。还是Spark性能优化的例子，在分析作业运行期CPU消耗的数据时，我发现在分布式计算的某些服务器上，操作系统自身消耗的CPU占比特别高。</p><p><img src=\"https://static001.geekbang.org/resource/image/70/80/7026bf7c633328d814c577ce1d25e480.png?wh=748*327\" alt=\"\"></p><p>图中蓝色部分是系统占用CPU，红色部分是Spark程序占用CPU，某些时候系统占用CPU比Spark程序占用CPU还高。经过分析发现，在某些版本的Linux中，transparent huge page这个参数是默认打开的，导致系统占用CPU过高。关闭这个参数后，系统CPU占用下降，整个计算时间也大幅缩短了。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/91/e7f9366e299eb834a188cc26e57eef91.png?wh=757*331\" alt=\"\"></p><h3>第四层：虚拟机优化</h3><p>像Java这样的编程语言开发的系统是需要运行在JVM虚拟机里的，虚拟机的性能对系统的性能也有较大影响，特别是垃圾回收，可能会导致应用程序出现巨大的卡顿。关于JVM虚拟机优化的有关原理可以参考《<a href=\"https://time.geekbang.org/column/article/168945\">Java虚拟机原理：JVM为什么被称为机器（machine）？</a>》</p><h3>第五层：基础组件优化</h3><p>在虚拟机之下，应用程序之上，还需要依赖各种基础组件，比如Web容器，数据库连接池，MVC框架等等。这些基础组件的性能也会对系统性能有较大影响。</p><h3>第六层：架构优化</h3><p>我们这个模块就是讨论各种互联网技术架构，大部分技术架构方案也是用来提升系统性能的。主要有缓存、消息队列、集群。</p><p><strong>缓存</strong>：通过从缓存读取数据，加快响应时间，减少后端计算压力，缓存主要是提升读的性能。</p><p><strong>消息队列</strong>：通过将数据写入消息队列，异步进行计算处理，提升系统的响应时间和处理速度，消息队列主要是提升写的性能。</p><p><strong>集群</strong>：将单一服务器进行伸缩，构建成一个集群完成同一种计算任务，从而提高系统在高并发压力时候的性能。各种服务器都可以构建集群，应用集群、缓存集群、数据库集群等等。</p><h3>第七层：代码优化</h3><p>通过各种编程技巧和设计模式提升代码的执行效率，也是我们最能控制的一个优化手段。具体技巧有：</p><p>使用合理的数据结构优化性能，可参考《<a href=\"https://time.geekbang.org/column/article/167938\">数据结构原理：Hash表的时间复杂度为什么是O(1)？</a>》。</p><p>编写性能更好的SQL语句以及使用更好的数据库访问方式，可参考《<a href=\"https://time.geekbang.org/column/article/172000\">数据库原理：PrepareStatement为什么性能好又安全？</a>》。</p><p>实现异步I/O与异步方法调用，避免不必要的阻塞，可参考《<a href=\"https://time.geekbang.org/column/article/184379\">反应式编程框架设计：如何使程序调用不阻塞等待、立即响应？</a>》</p><p>此外，还可以使用线程池、连接池等对象池化技术，复用资源，减少资源的创建。当然最重要的还是利用各种设计模式和设计原则，开发清晰、易维护的代码。因为一团糟的代码里面有什么性能问题谁也搞不清楚，也没办法优化。</p><h2>小结</h2><p>性能优化的一般步骤是：首先进行性能测试，根据测试结果进行性能分析，寻找性能的瓶颈点，然后针对瓶颈进行优化，优化完成后继续进行性能测试，观察性能是否有所改善，是否达到预期的性能目标，如果没有达到目标，继续分析新的瓶颈点，不断迭代优化。</p><p>性能优化的一个前提是需要进行性能测试，了解系统的性能指标，才能有目标地进行性能优化。另一个前提是，必须要了解系统的内部结构，能够分析得到引起性能问题的原因所在，并能够解决问题。</p><p>因此性能优化是对一个架构师技能和经验的全面挑战，是架构师的必备技能之一。</p><h2>思考题</h2><p>除了文中提到的这些性能优化手段，还有哪些优化手段？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流。</p>","comments":[{"had_liked":false,"id":174768,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1580376179,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"44530049139","product_id":100040201,"comment_content":"看老师的文章思路和步骤都理解，但一到实战就束手无策","like_count":10,"discussions":[{"author":{"id":2308104,"avatar":"https://static001.geekbang.org/account/avatar/00/23/38/08/df42980c.jpg","nickname":"文🔪冬🐟🐑的不二心老人","note":"","ucode":"1DDB6D4D1890BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412911,"discussion_content":"所以是面试38讲，而不是实战38讲啦","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636331263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311857,"discussion_content":"除了可以和面试官聊天，也可以作为自学的索引","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602507634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064044,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/ac/4303e8ef.jpg","nickname":"Geek_b692f5","note":"","ucode":"C2826604F71C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358297,"discussion_content":"所以还是要结合实际业务，简易自己单机构建这些微服务架构，数据库记录造到亿级别，就能明白很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615961739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241939,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f3/53/c5a17618.jpg","nickname":"七色凉橙","note":"","ucode":"8F39B511B15C57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295389,"discussion_content":"对，和面试管扯淡用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596181168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289461,"discussion_content":"还是需要实战","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594108027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219579,"discussion_content":"只能拿着这个跟面试官扯皮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585785740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125104,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","nickname":"Citizen Z","note":"","ucode":"9CA547640A8629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159013,"discussion_content":"一样啊哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580647909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175308,"user_name":"Citizen Z","can_delete":false,"product_type":"c1","uid":1125104,"ip_address":"","ucode":"9CA547640A8629","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","comment_is_top":false,"comment_ctime":1580650027,"is_pvip":false,"replies":[{"id":"68148","content":"👍","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580695276,"ip_address":"","comment_id":175308,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40235355691","product_id":100040201,"comment_content":"多线程竞争资源，就会有用锁场景，用简单的互斥锁就会有膨胀的隐患，持锁时，高并发环境其他线程会不断积压等待，这时候系统是在空等的，甚至会将这种开销传导至整个机器。<br>这时候就比较考验用锁场景的识别和使用了。一般思路是减少锁粒度，或有限次数尝试获锁等方法进行优化，比较好的思路就是通过一些设计来避免竞争（如利用队列）或使用乐观锁。<br><br>代码性能优化的出发点有二，一是优化设计，提高资源利用率，二是识别出程序中的垃圾代码（比如数据库读整表 1w 行记录，在内存里分页这种骚操作），降低浪费","like_count":10,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482687,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580695276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541764,"discussion_content":"用异步取代锁。对关键代码和垃圾代码进行优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640555440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252924,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1602516226,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"27372320002","product_id":100040201,"comment_content":"感觉性能优化应该算是高端话题，普通程序员忙于堆砌代码实现功能，顾不上优化；还有一个潜在的原因是，可能很多时候面对的业务场景不需要性能优化，CRUD。<br><br>性能指标比较容易理解，但是做性能测试，用数据说话，就相对困难一些了。极客时间也有性能调优方面的课程，但是从订阅数就能看出来，有点曲高和寡。<br><br>另一方面，性能优化需要时间和耐心，而这两个无疑是比较稀有的。<br><br>作为程序员，能想到的可能就是代码层级的优化，而专栏文中对于性能优化的分层，无疑是可以开拓眼界和思路的。<br><br>有留言说，看文章很清楚，但是落地实战比较困难；其实这个专栏恰好可以当做一个自学的索引。<br><br>推荐《全栈工程师修炼指南》专栏里面关于网络性能优化的两篇文章，作者还给出了不少扩展阅读，够看一段时间了。","like_count":7},{"had_liked":false,"id":194903,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1585118124,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23059954604","product_id":100040201,"comment_content":"数据库分库：业务分离，减少单库读写压力<br>数据库分表：解决单表数据过大，慢查询","like_count":5,"discussions":[{"author":{"id":1749228,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/ec/78be126d.jpg","nickname":"迈克糖","note":"","ucode":"A55D3DB2B20C4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276517,"discussion_content":"女程序员吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590893676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255331,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1603323747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193258339","product_id":100040201,"comment_content":"干掉团队中不合适的人。","like_count":2},{"had_liked":false,"id":174245,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1580107078,"is_pvip":false,"replies":[{"id":"67831","content":"新年好🌹","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580269423,"ip_address":"","comment_id":174245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10170041670","product_id":100040201,"comment_content":"老师新年好","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482346,"discussion_content":"新年好🌹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580269423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232404,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1593996247,"is_pvip":false,"replies":[{"id":"85775","content":"👍","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1594001854,"ip_address":"","comment_id":232404,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888963543","product_id":100040201,"comment_content":"前端的算吗？动静分离，尽量减少渲染进程重排重绘。","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500629,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594001854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178198,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1581605799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876573095","product_id":100040201,"comment_content":"老师归纳总结的很好，思路很清楚","like_count":1},{"had_liked":false,"id":177789,"user_name":"hex","can_delete":false,"product_type":"c1","uid":1757301,"ip_address":"","ucode":"B983D40DCD159F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d0/75/3e034f71.jpg","comment_is_top":false,"comment_ctime":1581500158,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5876467454","product_id":100040201,"comment_content":"感谢智慧老师,讲的真详细,我们公司会对订单表建立适当的索引来提高查询效率,其实也可以使用读写分离的数据库来合理分配数据库的连接数.大多数情况可以合理使用缓存,消息队列,对sql进行优化,使用多线程来解决!","like_count":1,"discussions":[{"author":{"id":2820632,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0a/18/cdfd70ad.jpg","nickname":"LetMeCode","note":"","ucode":"AD6D729D42BB44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580474,"discussion_content":"我们是对订单表进行了分表:根据用户ID,一致性hash算法分。 然后查具体某个人的订单就快的飞起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658198715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351795,"user_name":"LetMeCode","can_delete":false,"product_type":"c1","uid":2820632,"ip_address":"","ucode":"AD6D729D42BB44","user_header":"https://static001.geekbang.org/account/avatar/00/2b/0a/18/cdfd70ad.jpg","comment_is_top":false,"comment_ctime":1658198989,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658198989","product_id":100040201,"comment_content":"感觉接口异步返回很有用，我写的1个校验接口，校验成功后直接返回ok,然后mq发送消息异步上传校验记录(mysql)。我压测了一下,速度很快。所以“上传校验记录”这步操作没影响到我接口的TPS。","like_count":0},{"had_liked":false,"id":350639,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1657071127,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657071127","product_id":100040201,"comment_content":"性能优化是一种取舍，是成本资源和收益的平衡。如同28原则里面的，一般付出20%的时间，就可以获得80%的收益。再往上的20%的收益就看值不值用80%的时间去优化了。另外文中优化的方法应该还有从业务上的考虑，需求合理，使用ddd建模(这种应该也是放在代码层的优化吧)","like_count":1},{"had_liked":false,"id":346941,"user_name":"假装在养🐷","can_delete":false,"product_type":"c1","uid":1114352,"ip_address":"","ucode":"D0AB9CD03E0D5B","user_header":"https://static001.geekbang.org/account/avatar/00/11/00/f0/fe94061e.jpg","comment_is_top":false,"comment_ctime":1653550461,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653550461","product_id":100040201,"comment_content":"1、循环调用远程的服务改为批量调用<br>2、递归调用时增加缓存字段<br>3、接口重复调用底层方法合并一处调用<br>4、同步的方法可以异步调用<br>5、可以增加缓存信息，减少查询<br>6、可以并行请求","like_count":0},{"had_liked":false,"id":247726,"user_name":"vega","can_delete":false,"product_type":"c1","uid":1748242,"ip_address":"","ucode":"5872FDA0974091","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJPNsfvnqsB8eTbKgzwIOhcKkzCTUSoAyujl8MtiazpP07zUfboOaWJaZK2jfRVH6S2ibXEc7WIibufA/132","comment_is_top":false,"comment_ctime":1599808422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599808422","product_id":100040201,"comment_content":"除了前端cdn等之外,其实还有一个层面,就是业务层面的优化,比如复杂的业务,可能可以牺牲一些时效性等手段优化","like_count":0},{"had_liked":false,"id":232405,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1593996444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593996444","product_id":100040201,"comment_content":"从业务功能角度出发，可以通过抓包工具，梳理业务端接口调用逻辑，减少非必要接口调用，减少接口中非必要参数返回。<br>","like_count":0},{"had_liked":false,"id":226696,"user_name":"黑山老妖","can_delete":false,"product_type":"c1","uid":1115958,"ip_address":"","ucode":"A1659F99C5BE1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/36/d677e741.jpg","comment_is_top":false,"comment_ctime":1592186616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592186616","product_id":100040201,"comment_content":"思路很清楚。","like_count":0},{"had_liked":false,"id":174606,"user_name":"你的美","can_delete":false,"product_type":"c1","uid":1529298,"ip_address":"","ucode":"71B97BDBA3CDC3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iacfiaRC2Vze9eEaVibAFkngm4nmA0DwoibC3kHj6pCOQ87VDa955kK3kavnrDnibmfeIFd4G6Ab2fDkNrbUapL8ibAQ/132","comment_is_top":false,"comment_ctime":1580293668,"is_pvip":false,"replies":[{"id":"67900","content":"新年快乐","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580359571,"ip_address":"","comment_id":174606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580293668","product_id":100040201,"comment_content":"老师新年好！<br>老师，同学们新年快乐！","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482460,"discussion_content":"新年快乐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580359571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}