{"id":221658,"title":"20 | 如何在不停机的情况下，安全地更换数据库？","content":"<p>你好，我是李玥。</p><p>随着我们的系统规模逐渐增长，总会遇到需要更换数据库的问题。我们来说几种常见的情况。</p><ul>\n<li>对MySQL做了分库分表之后，需要从原来的单实例数据库迁移到新的数据库集群上。</li>\n<li>系统从传统部署方式向云上迁移的时候，也需要从自建的数据库迁移到云数据库上。</li>\n<li>一些在线分析类的系统，MySQL性能不够用的时候，就需要更换成一些专门的分析类数据库，比如说HBase。</li>\n</ul><p>更换数据库这个事儿，是一个非常大的技术挑战，因为我们需要保证整个迁移过程中，既不能长时间停服，也不能丢数据。</p><p>那么，今天这节课我们就来说一下，如何在不停机的情况下，安全地迁移数据更换数据库。</p><h2>如何实现不停机更换数据库？</h2><p>我们都知道墨菲定律：“如果事情有变坏的可能，不管这种可能性有多小，它总会发生。”放到这里呢，也就是说，我们在更换数据库的过程中，只要有一点儿可能会出问题的地方，哪怕是出现问题的概率非常小，它总会出问题。</p><p>实际上，无论是新版本的程序，还是新的数据库，即使我们做了严格的验证测试，做了高可用方案，刚刚上线的系统，它的稳定性总是没有那么好的，需要一个磨合的过程，才能逐步达到一个稳定的状态，这是一个客观规律。这个过程中一旦出现故障，如果不能及时恢复，造成的损失往往是我们承担不起的。</p><!-- [[[read_end]]] --><p>所以我们在设计迁移方案的时候，一定要做到，每一步都是可逆的。<strong>要保证，每执行一个步骤后，一旦出现问题，能快速地回滚到上一个步骤</strong>。这是很多同学在设计这种升级类技术方案的时候，容易忽略的问题。</p><p>接下来我们还是以订单库为例子，说一下这个迁移方案应该如何来设计。</p><p>首先要做的就是，把旧库的数据复制到新库中。因为旧库还在服务线上业务，所以不断会有订单数据写入旧库，我们不仅要往新库复制数据，还要保证新旧两个库的数据是实时同步的。所以，我们需要用一个同步程序来实现新旧两个数据库实时同步。</p><p>怎么来实现两个异构数据库之间的数据实时同步，这个方法我们上节课刚刚讲过，我们可以使用Binlog实时同步数据。如果源库不是MySQL的话，就麻烦一点儿，但也可以参考我们讲过的，复制状态机理论来实现。这一步不需要回滚，原因是，只增加了一个新库和一个同步程序，对系统的旧库和程序都没有任何改变。即使新上线的同步程序影响到了旧库，只要停掉同步程序就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/58/ba2a44c70d4766b281107f4134fe9d58.jpg?wh=1720*929\" alt=\"\"></p><p>然后，我们需要改造一下订单服务，业务逻辑部分不需要变，DAO层需要做如下改造：</p><ol>\n<li>支持双写新旧两个库，并且预留热切换开关，能通过开关控制三种写状态：只写旧库、只写新库和同步双写。</li>\n<li>支持读新旧两个库，同样预留热切换开关，控制读旧库还是新库。</li>\n</ol><p>然后上线新版的订单服务，这个时候订单服务仍然是只读写旧库，不读写新库。让这个新版的订单服务需要稳定运行至少一到二周的时间，期间除了验证新版订单服务的稳定性以外，还要验证新旧两个订单库中的数据是否是一致的。这个过程中，如果新版订单服务有问题，可以立即下线新版订单服务，回滚到旧版本的订单服务。</p><p>稳定一段时间之后，就可以开启订单服务的双写开关了。开启双写开关的同时，需要停掉同步程序。这里面有一个问题需要注意一下，就是<strong>这个双写的业务逻辑，一定是先写旧库，再写新库，并且以写旧库的结果为准</strong>。</p><p>旧库写成功，新库写失败，返回写成功，但这个时候要记录日志，后续我们会用到这个日志来验证新库是否还有问题。旧库写失败，直接返回失败，就不写新库了。这么做的原因是，不能让新库影响到现有业务的可用性和数据准确性。上面这个过程如果出现问题，可以关闭双写，回滚到只读写旧库的状态。</p><p>切换到双写之后，新库与旧库的数据可能会存在不一致的情况，原因有两个：一是停止同步程序和开启双写，这两个过程很难做到无缝衔接，二是双写的策略也不保证新旧库强一致，这时候我们需要上线一个对比和补偿的程序，这个程序对比旧库最近的数据变更，然后检查新库中的数据是否一致，如果不一致，还要进行补偿。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/ce/e0c3864866fe1ff3408e2589669b62ce.jpg?wh=1654*1099\" alt=\"\"></p><p>开启双写后，还需要至少稳定运行至少几周的时间，并且期间我们要不断地检查，确保不能有旧库写成功，新库写失败的情况出现。对比程序也没有发现新旧两个库的数据有不一致的情况，这个时候，我们就可以认为，新旧两个库的数据是一直保持同步的。</p><p>接下来就可以用类似灰度发布的方式，把读请求一点儿一点儿地切到新库上。同样，期间如果出问题的话，可以再切回旧库。全部读请求都切换到新库上之后，这个时候其实读写请求就已经都切换到新库上了，实际的切换已经完成了，但还有后续的收尾步骤。</p><p>再稳定一段时间之后，就可以停掉对比程序，把订单服务的写状态改为只写新库。到这里，旧库就可以下线了。注意，整个迁移过程中，只有这个步骤是不可逆的。但是，这步的主要操作就是摘掉已经不再使用的旧库，对于在用的新库并没有什么改变，实际出问题的可能性已经非常小了。</p><p>到这里，我们就完成了在线更换数据库的全部流程。双写版本的订单服务也就完成了它的历史使命，可以在下一次升级订单服务版本的时候，下线双写功能。</p><h2>如何实现对比和补偿程序？</h2><p>在上面的整个切换过程中，如何实现这个对比和补偿程序，是整个这个切换设计方案中的一个难点。这个对比和补偿程序的难度在于，我们要对比的是两个都在随时变换的数据库中的数据。这种情况下，我们没有类似复制状态机这样理论上严谨实际操作还很简单的方法，来实现对比和补偿。但还是可以根据业务数据的实际情况，来针对性地实现对比和补偿，经过一段时间，把新旧两个数据库的差异，逐渐收敛到一致。</p><p>像订单这类时效性强的数据，是比较好对比和补偿的。因为订单一旦完成之后，就几乎不会再变了，那我们的对比和补偿程序，就可以依据订单完成时间，每次只对比这个时间窗口内完成的订单。补偿的逻辑也很简单，发现不一致的情况后，直接用旧库的订单数据覆盖新库的订单数据就可以了。</p><p>这样，切换双写期间，少量不一致的订单数据，等到订单完成之后，会被补偿程序修正。后续只要不是双写的时候，新库频繁写入失败，就可以保证两个库的数据完全一致。</p><p>比较麻烦的是更一般的情况，比如像商品信息这类数据，随时都有可能会变化。如果说数据上有更新时间，那我们的对比程序可以利用这个更新时间，每次在旧库取一个更新时间窗口内的数据，去新库上找相同主键的数据进行对比，发现数据不一致，还要对比一下更新时间。如果新库数据的更新时间晚于旧库数据，那可能是对比期间数据发生了变化，这种情况暂时不要补偿，放到下个时间窗口去继续对比。另外，时间窗口的结束时间，不要选取当前时间，而是要比当前时间早一点儿，比如1分钟前，避免去对比正在写入的数据。</p><p>如果数据连时间戳也没有，那只能去旧库读取Binlog，获取数据变化，然后去新库对比和补偿。</p><p>有一点需要说明的是，上面这些方法，如果严格推敲，都不是百分之百严谨的，都不能保证在任何情况下，经过对比和补偿后，新库的数据和旧库就是完全一样的。但是，在大多数情况下，这些实践方法还是可以有效地收敛新旧两个库的数据差异，你可以酌情采用。</p><h2>小结</h2><p>设计在线切换数据库的技术方案，首先要保证安全性，确保每一个步骤一旦失败，都可以快速回滚。此外，还要确保迁移过程中不丢数据，这主要是依靠实时同步程序和对比补偿程序来实现。</p><p>我把这个复杂的切换过程的要点，按照顺序总结成下面这个列表，供你参考：</p><ol>\n<li>上线同步程序，从旧库中复制数据到新库中，并实时保持同步；</li>\n<li>上线双写订单服务，只读写旧库；</li>\n<li>开启双写，同时停止同步程序；</li>\n<li>开启对比和补偿程序，确保新旧数据库数据完全一样；</li>\n<li>逐步切量读请求到新库上；</li>\n<li>下线对比补偿程序，关闭双写，读写都切换到新库上；</li>\n<li>下线旧库和订单服务的双写功能。</li>\n</ol><h2>思考题</h2><p>我们整个切换的方案中，只有一个步骤是不可逆的，就是由双写切换为单写新库这一步。如果说不计成本，如何修改我们的迁移方案，让这一步也能做到快速回滚？你可以思考一下这个问题，欢迎你在留言区与我交流讨论。</p><p>感谢你的阅读，如果你觉得今天的内容对你有帮助，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":205795,"user_name":"李玥","can_delete":false,"product_type":"c1","uid":1501046,"ip_address":"","ucode":"B19E91EE248591","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","comment_is_top":true,"comment_ctime":1586741302,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233721715854991e+18","product_id":100046801,"comment_content":"Hi，我是李玥。<br><br>这里回顾一下上节课的思考题：<br><br>在我们这种数据同步架构下，如果说下游的某个同步程序或数据库出了问题，需要把 Binlog 回退到某个时间点然后重新同步，这个问题该怎么解决？<br><br>这个问题的解决方案是这样的。如果说，下游只有一个同步程序，那直接按照时间重置Canal实例的位点就可以了。但是，如果MQ的下游有多个消费者，这个时候就不能重置Canal里的位点了，否则会影响到其它的消费者。正确的做法是，在MQ的消费订阅上按照时间重置位点，这样只影响出问题的那个订阅。所以，这种架构下，MQ中的消息，最好将保存时间设置得长一些，比如保留3天。","like_count":32,"discussions":[{"author":{"id":2538491,"avatar":"","nickname":"Geek_da477d","note":"","ucode":"E28D87614A80BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575965,"discussion_content":"没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655213283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214168,"user_name":"hllllllllll","can_delete":false,"product_type":"c1","uid":1104097,"ip_address":"","ucode":"5E1272BDCF6B87","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/e1/fa0de235.jpg","comment_is_top":false,"comment_ctime":1588669896,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"233516903880","product_id":100046801,"comment_content":"在16年去o时设计的一个方案和这个很相似。需要将56亿oracle的财务数据迁移到mysql中并保证一直提供稳定的线上服务。方案主要涉及以下几点：<br>1.设计同步worker以6亿&#47;天的速度同步至mysql，预先按照1000的间隔生成560w个任务，用于保证数据同步不丢失。<br>2.mysql业务数据库库为了防止和oracle中id碰撞，设计id生成器 其中，前三位为库编号；<br>3.因为高达100w&#47;分钟的事务量，设计了前置防重表+任务表（按照uuid分库），用于防重、规避热点和异步增加吞吐量；<br>4.业务数据库通过在前置库生成的id分库，同时会异步同步至es；<br>5.原接口服务改造，写老库数据和发送mq在一个事务（mq挂了会影响服务）。提供新接口服务写新库并发mq；<br>6.接收端消费mq并根据标示同步至老库或新库；<br>7.提前定义好一个阈值单号，比如当前数据已经累积到57亿，那我们可以根据增速估算一个阈值58亿。在上线后只有58亿以后的数据会通过mq同步至老库的。以前的数据都由worker同步（在适当时候：如目前单号已超过58亿，生成另外20w个任务，并开始执行另外两亿数据的同步，期间新库会缺少这两亿数据）；<br>8.在mq同步稳定一段时间后，用新接口灰度替代老接口，在整体稳定后全量切换至新接口，并用mq同步老库。","like_count":55,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366555,"discussion_content":"mq同步老库，老库数据保留到什么时候呢？\n财务数据迁移的主要原因是什么呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618113003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366553,"discussion_content":"全量 + 增量同步\n全量：Oracle——》MySQL\n增量：新数据会写到MQ一份，后续同步到MySQL中\n\n同时异步同步到es","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618112732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302746,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoWfXendN7czHpsyaWKLPK6Na9P5czquJ7Wdre4TibZQ5SQib88edyuib3LpCVFkp0gII2wyvvR8tEIA/132","nickname":"OM","note":"","ucode":"E33C66A70802A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385413,"discussion_content":"财务库还不如还是用O，mysql配合好的架构和业务才是不错的，对于复杂的涉及大量逻辑的如财务实现mysql本身自带的功能也不一定能实现，适合才是好的，跟风的IT改造到头可能还要改回去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627031222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1594215,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIG2aw6bmrrxPkrwIyStmZsfaYVHzYbP05A8V9LCa8ZnKl7yYb4zHTyicN5grp03nnpRqgQicpsaTxg/132","nickname":"STOREFEE","note":"","ucode":"CF660E3FF11D95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349783,"discussion_content":"58亿数据到MySQL，分库分表了么？具体采用什么形式存取的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613538260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206733,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1586923376,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"96076203888","product_id":100046801,"comment_content":"无知者总觉得这样做麻烦，智者满满都是细节","like_count":23,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366135,"discussion_content":"但这种操作不会让来看这个课程的人去做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617968495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377406,"discussion_content":"为啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622630062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":366135,"ip_address":""},"score":377406,"extra":""}]}]},{"had_liked":false,"id":205882,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1586750423,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"66011259863","product_id":100046801,"comment_content":"然而我们小公司，或者比较传统的行业直接还是一个维护系统的公告，然后大晚上，凌晨加班。","like_count":16,"discussions":[{"author":{"id":1024197,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c5/9259d5ca.jpg","nickname":"daydaygo","note":"","ucode":"A2477F029C7C11","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581489,"discussion_content":"给开着的飞机换引擎这事确实少之又少","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658811330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1816182,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/b6/76/c6bb655e.jpg","nickname":"Arthur","note":"","ucode":"7681B517DE7D97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288505,"discussion_content":"真实~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593764146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307299,"discussion_content":"阴阳师这样大游戏大制作，也经常出维护公告，停服。所以是正常操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600593691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222791,"user_name":"等风来🎧","can_delete":false,"product_type":"c1","uid":1804087,"ip_address":"","ucode":"B6BB8714A0B019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","comment_is_top":false,"comment_ctime":1590912951,"is_pvip":false,"replies":[{"id":"82359","content":"这个一般都是通过编码来实现的。具体触发的方法，可以对外暴露一个可供调用的接口，或者通过动态配置下发等方式来触发。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1591151737,"ip_address":"","comment_id":222791,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35950651319","product_id":100046801,"comment_content":"老师，这个热切开关具体什么方式实现呢？","like_count":9,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496918,"discussion_content":"这个一般都是通过编码来实现的。具体触发的方法，可以对外暴露一个可供调用的接口，或者通过动态配置下发等方式来触发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591151737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350991,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/4f/273ffb51.jpg","nickname":"小哪吒","note":"","ucode":"252087A733355C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283368,"discussion_content":"携程的Apollo了解下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592239170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205784,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1586739086,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35946477454","product_id":100046801,"comment_content":"不计成本的话，搭建一套全新的影子服务，在整个系统接入层做流量双写分发，切换时影子系统变为主系统，原主系统变为影子系统","like_count":9,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307301,"discussion_content":"这个流量复制的方案因业务而异吧，有些业务如果做流量复制，成本太大了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600593797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221170,"user_name":"Sparrow","can_delete":false,"product_type":"c1","uid":1693667,"ip_address":"","ucode":"88D3F3920C68BC","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/e3/e6cf6352.jpg","comment_is_top":false,"comment_ctime":1590420187,"is_pvip":false,"replies":[{"id":"81729","content":"大表加字段过程中会锁表，期间所有写操作都会阻塞。如果能接受的话，直接加还是最方便的。<br><br>你提的主从切换的方式，我没有试过，理论上也是可行的。但需要特别注意切换过程中的数据一致性。<br><br>线上扩容，相当于更换数据库，建议参照这节课中的方法操作。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1590559604,"ip_address":"","comment_id":221170,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18770289371","product_id":100046801,"comment_content":"抱歉上个留言没说说清楚，请问老师线上大表怎么在不影响业务的情况下增加字段？ 我能想到的一个办法是在从库增加字段，等从库同步追上来的时候切换主从。  请问还有没有其他办法？<br><br>另外线上扩容怎么做？ 是不是和这节课更换数据库的方法一样？ 加个从库，同步追上来后分库分表？","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496367,"discussion_content":"大表加字段过程中会锁表，期间所有写操作都会阻塞。如果能接受的话，直接加还是最方便的。\n\n你提的主从切换的方式，我没有试过，理论上也是可行的。但需要特别注意切换过程中的数据一致性。\n\n线上扩容，相当于更换数据库，建议参照这节课中的方法操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590559604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331176,"discussion_content":"MySQL加列可以用gh-ost","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606799919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578913,"discussion_content":"建一个变更好数据结构的临时表，脚本同步历史数据，原表挂触发器同步新增数据，校验数据同步完成后，rename","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657090794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205145,"user_name":"锐","can_delete":false,"product_type":"c1","uid":1110915,"ip_address":"","ucode":"A245BA96C9471F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/83/e2612d81.jpg","comment_is_top":false,"comment_ctime":1586540065,"is_pvip":false,"replies":[{"id":"77028","content":"可以再把问题具体话一下么？我们可以一起来讨论一下。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1586831985,"ip_address":"","comment_id":205145,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18766409249","product_id":100046801,"comment_content":"借楼请教一下李老师，无限层级(每条记录都对应一个父id)怎样设计能够快速查询，之前设计是存一个path字段，用like查询，总感觉这样设计不优雅。","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491405,"discussion_content":"可以再把问题具体话一下么？我们可以一起来讨论一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586831985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105102,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dc/ce/a144dea1.jpg","nickname":"yhh","note":"","ucode":"B566981788B6A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250460,"discussion_content":"同问，就像文件系统一样，怎么优雅的在关系型数据库里组织树型的数据结构，方便快速的遍历路径。或者有其他类型数据库选型推荐吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588002543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1666025,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","nickname":"雨落～紫竹","note":"","ucode":"33CED2F34E708F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1105102,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dc/ce/a144dea1.jpg","nickname":"yhh","note":"","ucode":"B566981788B6A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311735,"discussion_content":"Mongodb","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602477248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":250460,"ip_address":""},"score":311735,"extra":""},{"author":{"id":2053679,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/56/2f/4518f8e1.jpg","nickname":"放不下荣华富贵","note":"","ucode":"9FE29C22B9ABE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1105102,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dc/ce/a144dea1.jpg","nickname":"yhh","note":"","ucode":"B566981788B6A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356786,"discussion_content":"db每一行都相当于链表的节点 ，带着 next prev data 不行么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615682328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":250460,"ip_address":""},"score":356786,"extra":""}]}]},{"had_liked":false,"id":242904,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1597888292,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10187822884","product_id":100046801,"comment_content":"开启双写和停止数据同步服务这一步需要停服或者锁库，不然会有数据不一致风险","like_count":2,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307302,"discussion_content":"嗯，可以让所有的业务服务停服一小段时间，可以放到凌晨。这样对用户几乎无感，而且也降低了数据库迁移的操作成本和复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600593903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208971,"user_name":"百威","can_delete":false,"product_type":"c1","uid":1074843,"ip_address":"","ucode":"758199FDD0B44F","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/9b/59776420.jpg","comment_is_top":false,"comment_ctime":1587476022,"is_pvip":false,"replies":[{"id":"78336","content":"考虑到很难实现一个完美的对比补偿程序，还是建议不要这么做。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1587694880,"ip_address":"","comment_id":208971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177410614","product_id":100046801,"comment_content":"有个问题，既然有比对和补偿程序，可不可以不使用数据实时同步。首先上线观察双写和补偿程序，没问题后先进行数据从旧到新的快照复制，然后开启双写，因有缝衔接而丢失的数据通过补偿程序来做……求教～","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492688,"discussion_content":"考虑到很难实现一个完美的对比补偿程序，还是建议不要这么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587694880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205265,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1586579492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176514084","product_id":100046801,"comment_content":"回答：<br>1.主要得解决，断开同步双写后，只写在新库的这部分数据如何同步到旧库，要严谨其实还得保证同步（这也是要用同步双写的主要原因）。讲真，水平有限，放弃同步双写后还要支持实时的同步数据真没招。那么让切换开关同时开启新库增量数据异步同步到旧库。感觉得加锁保切开关和开启增量同步两个操作原子性。严格来说还是有一会儿的停服现象（db不可用）。而且异步数据是不实时的，切回旧库还是可能因为数据未同步完，导致数据异常。比如退款一次成功了，切回来时数据更新还没做，那就还能发起一次退款申请。<br><br><br>疑问：<br>1.双写时，对账系统校对两个数据库数据是否一致时，要么比对一段时间内单表新增的数据行数，要么比对最新的订单是否一致。但不会去比对每一条数据是否一致。所以如果是数据更新还是可能漏了。<br><br>2.感觉如果不停服，其实方案都很难严谨。只能做好自动校对自动补偿的系统，在切换后，尽快回复数据一致的现象。  所以午夜干稳妥。","like_count":2},{"had_liked":false,"id":304669,"user_name":"林铭铭","can_delete":false,"product_type":"c1","uid":1068499,"ip_address":"","ucode":"AB392BEE7CD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/d3/67bdcca9.jpg","comment_is_top":false,"comment_ctime":1627545544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5922512840","product_id":100046801,"comment_content":"半夜停机升级下，会舒服点","like_count":1},{"had_liked":false,"id":242184,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1597631097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892598393","product_id":100046801,"comment_content":"老师，自增ID 在新旧库不同是否会出现问题？新库应该还要一个唯一的ID生成器？","like_count":1,"discussions":[{"author":{"id":1184658,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","nickname":"飞翔","note":"","ucode":"0641211EE9DA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407839,"discussion_content":"会不会出问题应该取决于这个id有没有被外键引用，如果有就有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635130486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235152,"user_name":"小水","can_delete":false,"product_type":"c1","uid":1104456,"ip_address":"","ucode":"808E8E28BA3827","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/48/0d3cd6fa.jpg","comment_is_top":false,"comment_ctime":1594909106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889876402","product_id":100046801,"comment_content":"老师，那在迁移数据库的时候，前置条件就得有个全局业务流水号发号器来做新旧库的主键，如果用自带的MySQL的自增主键就可能导致新旧两个库插入数据时主键不一致的情况，我想到的就是用全局发号器来做插入的id值，不知道我的想法是否正确","like_count":1},{"had_liked":false,"id":219821,"user_name":"Sparrow","can_delete":false,"product_type":"c1","uid":1693667,"ip_address":"","ucode":"88D3F3920C68BC","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/e3/e6cf6352.jpg","comment_is_top":false,"comment_ctime":1590107658,"is_pvip":false,"replies":[{"id":"81466","content":"这个问题是非常难处理的，所以，一般来说很少去删除表的字段，只增加字段。这样，新表能够兼容旧表，也就不用迁移数据了。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1590369626,"ip_address":"","comment_id":219821,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5885074954","product_id":100046801,"comment_content":"请问老师，修改线上数据库表结构怎么处理？<br>我原来方案是建个新表，把旧数据倒过去，然后新旧表分别改名。<br>但数据一致问题比较麻烦，改名过程中也容易出错","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495948,"discussion_content":"这个问题是非常难处理的，所以，一般来说很少去删除表的字段，只增加字段。这样，新表能够兼容旧表，也就不用迁移数据了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590369626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554123,"discussion_content":"一般不会在现网删字段和改字段名，这些都是非常危险的操作。一般只会加字段，废弃的字段留着就行了，不会影响什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646222575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211939,"user_name":"me不是一个人战斗","can_delete":false,"product_type":"c1","uid":1422247,"ip_address":"","ucode":"F9763CF4B628FF","user_header":"https://static001.geekbang.org/account/avatar/00/15/b3/a7/d3ffc8ac.jpg","comment_is_top":false,"comment_ctime":1588039167,"is_pvip":false,"replies":[{"id":"78796","content":"这种建议以一边的自增ID为准。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1588050782,"ip_address":"","comment_id":211939,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5883006463","product_id":100046801,"comment_content":"对于双写阶段，会不会存在两份数据id不一致的情况（比如mysql的自增ID），如果下游有依赖这个表的ID，一旦切换就没办法回退了","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493396,"discussion_content":"这种建议以一边的自增ID为准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588050782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336835,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1646391029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646391029","product_id":100046801,"comment_content":"1.创建新库，全量复制一次旧库数据，上线新旧同步程序，开启同步。<br>2.上线支持随时切换双写，单写的程序版本，暂时只读写旧库。<br>3.开启双写，停止新旧同步程序。<br>4.开启新旧对比与补偿程序。<br>5.逐步切换读请求到新库。<br>6.关闭双写，只写新库。这时读写都是新库。关闭新旧对比与补偿程序。<br>7.下线旧库。","like_count":0},{"had_liked":false,"id":336469,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1646180929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646180929","product_id":100046801,"comment_content":"监听新库的 Binlog 同步到旧库里！<br>也可以把对比&#47;补偿程序以新库为准去补偿到旧库里","like_count":0},{"had_liked":false,"id":327886,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1640340065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640340065","product_id":100046801,"comment_content":"二刷说下自己的看法 ：在切库这一步和老师不同<br>1.上线写程序 上线时开关模式为双写 ，如果此时新库有问题 立刻通过开关将其只写老库<br>2.记录新库第一条写入的时间 通知DBA 或者自己写程序，以新库第一条时间为准开始同步<br>3.上线对账程序 自动比对数据 &amp;&amp; 修复数据<br>4.切读流量至新库 待读流程切换完毕 以为着新库开始运行于线上<br>5.观察无误后（可能需要1至2个礼拜） 切换写库 <br><br><br>这里与老师方案的区别在于：<br>上线新库时 因为是先直接上线双线模式 ，所以同步新库剩余的数据是可反复幂等操作的，且因为数据的写入点是定格的 故同步旧数据可保证不丢 不多不少<br>而老师的方案 是先上线canal等同步程序 ，打开双写后再关闭同步程序 ，但同步程序或是binlog默认并不是从头开始，而是从当下开始对新库累计数据，开始同步之前的旧数据如果同步过来呢？<br>","like_count":0},{"had_liked":false,"id":289059,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1618836520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618836520","product_id":100046801,"comment_content":"我们和老师的区别在于把mq当成backlog 在消息体里预留了操作的方向，必反说 operator_type:add&#47;minus 。通过线程的堆积监控 和自己写的业务补偿来做到新库向老库看齐 毕竟不是每个公司都有能力掌控canal 。不过后续工作会直接来把自己充当slave做","like_count":0},{"had_liked":false,"id":252850,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1602501425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602501425","product_id":100046801,"comment_content":"宏大而精细的方案","like_count":0},{"had_liked":false,"id":249328,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1600593209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600593209","product_id":100046801,"comment_content":"如果要回滚这一部，则需要开启双写和对比和补偿程序，这里补偿的是旧库，然后将读请求逐步切流量到旧库。","like_count":0},{"had_liked":false,"id":220241,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":1226554,"ip_address":"","ucode":"CD36F5EE1E1F4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b7/3a/a00ec799.jpg","comment_is_top":false,"comment_ctime":1590212716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590212716","product_id":100046801,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":216718,"user_name":"乖，摸摸头","can_delete":false,"product_type":"c1","uid":1611745,"ip_address":"","ucode":"BD92741A11D3CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/e1/0f4d90ff.jpg","comment_is_top":false,"comment_ctime":1589331581,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589331581","product_id":100046801,"comment_content":"数据库用的阿里云的rds , 可以用 canal 去读binlog 么，这个是不是没法弄","like_count":0},{"had_liked":false,"id":216022,"user_name":"彼得.林","can_delete":false,"product_type":"c1","uid":1019306,"ip_address":"","ucode":"445B9751A88554","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/aa/e739c4fa.jpg","comment_is_top":false,"comment_ctime":1589169320,"is_pvip":false,"replies":[{"id":"80345","content":"这里面也要考虑实施成本VS数据重要程度来决策。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1589463062,"ip_address":"","comment_id":216022,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589169320","product_id":100046801,"comment_content":"阿里的自建mysql同步到RDS，需要做些什么工作呢？是不是较检程序也是必须的","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494642,"discussion_content":"这里面也要考虑实施成本VS数据重要程度来决策。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589463062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213561,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1588475028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588475028","product_id":100046801,"comment_content":"停掉双写以后，新库的数据再同步回旧库？这样就能再退回双写同时保证数据一致了吧","like_count":0},{"had_liked":false,"id":211794,"user_name":"yhh","can_delete":false,"product_type":"c1","uid":1105102,"ip_address":"","ucode":"B566981788B6A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/ce/a144dea1.jpg","comment_is_top":false,"comment_ctime":1588007359,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588007359","product_id":100046801,"comment_content":"其实比较好奇存量数据怎么从旧库同步到新库的","like_count":0,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368806,"discussion_content":"设定一个时间阈值作为t0 然后开启同步工具（同步工具一般是dba来做）这样的话数据就是纯静态。当你t0完成后 就开始做t0->t1之间的数据 这里开始用canal即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618836738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205618,"user_name":"Garwen","can_delete":false,"product_type":"c1","uid":1045062,"ip_address":"","ucode":"C76346E1734AB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","comment_is_top":false,"comment_ctime":1586687379,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586687379","product_id":100046801,"comment_content":"思考题我理解首先要保证的是双写切换为单写新库，其次是新库挂了如何能及时回滚到旧库，且旧库的数据一直保持在最新状态。已切换意味着从新库同步binlog至旧库不可行，新库宕机后，必然出现数据丢失。那只能从业务写库方面入手。参考之前的同步方式，以及老师提示的不计成本的实现快速回滚，我猜想是不是通过缓存的方式，以及切换后全量数据放在redis中进行更新方式，此时redis中的数据没有过期时间，一旦新库出现问题，切换至旧库。此时启动更新服务，通过redis中的数据对旧库进行更新。请老师和各位同学指正。","like_count":0,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368807,"discussion_content":"可以使用类似冲账的方式来做 这种一般是无业务侵入的。思想就是生成反向sql 唯一要注意的是要做到幂等 其实阿里的分布式事务seata也是这个思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618836842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205184,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1586566892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586566892","product_id":100046801,"comment_content":"如果要不计成本那么写入时应当去追加一层数据库，按照现在主流的方式应当是redis;当我们做此操作时压力放到一头，中间件存储的最后一层减少或者降低之前的频率从而完成。<br>谢谢分享，期待后续课程的更新。","like_count":0},{"had_liked":false,"id":205171,"user_name":"黄海峰","can_delete":false,"product_type":"c1","uid":1275357,"ip_address":"","ucode":"E9340719BC96B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dd/9ead6e69.jpg","comment_is_top":false,"comment_ctime":1586564238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586564238","product_id":100046801,"comment_content":"把旧库变成新库的从库异步获取更新","like_count":0},{"had_liked":false,"id":205131,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1586535643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586535643","product_id":100046801,"comment_content":"思考题:主要问题是单写新库导致的旧库数据缺失，可以记录切换单写新库的开始时间，同时记录这段时间内的订单数据，通过程序回滚——同步这段时间(单写开始时间到回滚执行时间)内的订单到旧库。同时改为双写模式，或读写旧库模式。","like_count":0}]}