{"id":76827,"title":"45 | 位图：如何实现网页爬虫中的URL去重功能？","content":"<p>网页爬虫是搜索引擎中的非常重要的系统，负责爬取几十亿、上百亿的网页。爬虫的工作原理是，通过解析已经爬取页面中的网页链接，然后再爬取这些链接对应的网页。而<strong><span class=\"orange\">同一个网页链接有可能被包含在多个页面中，这就会导致爬虫在爬取的过程中，重复爬取相同的网页。如果你是一名负责爬虫的工程师，你会如何避免这些重复的爬取呢？</span></strong></p><p>最容易想到的方法就是，我们记录已经爬取的网页链接（也就是URL），在爬取一个新的网页之前，我们拿它的链接，在已经爬取的网页链接列表中搜索。如果存在，那就说明这个网页已经被爬取过了；如果不存在，那就说明这个网页还没有被爬取过，可以继续去爬取。等爬取到这个网页之后，我们将这个网页的链接添加到已经爬取的网页链接列表了。</p><p>思路非常简单，我想你应该很容易就能想到。不过，我们该如何记录已经爬取的网页链接呢？需要用什么样的数据结构呢？</p><h2>算法解析</h2><p>关于这个问题，我们可以先回想下，是否可以用我们之前学过的数据结构来解决呢？</p><p>这个问题要处理的对象是网页链接，也就是URL，需要支持的操作有两个，添加一个URL和查询一个URL。除了这两个功能性的要求之外，在非功能性方面，我们还要求这两个操作的执行效率要尽可能高。除此之外，因为我们处理的是上亿的网页链接，内存消耗会非常大，所以在存储效率上，我们要尽可能地高效。</p><!-- [[[read_end]]] --><p>我们回想一下，满足这些条件的数据结构有哪些呢？显然，散列表、红黑树、跳表这些动态数据结构，都能支持快速地插入、查找数据，但是在内存消耗方面，是否可以接受呢？</p><p>我们拿散列表来举例。假设我们要爬取10亿个网页（像Google、百度这样的通用搜索引擎，爬取的网页可能会更多），为了判重，我们把这10亿网页链接存储在散列表中。你来估算下，大约需要多少内存？</p><p>假设一个URL的平均长度是64字节，那单纯存储这10亿个URL，需要大约60GB的内存空间。因为散列表必须维持较小的装载因子，才能保证不会出现过多的散列冲突，导致操作的性能下降。而且，用链表法解决冲突的散列表，还会存储链表指针。所以，如果将这10亿个URL构建成散列表，那需要的内存空间会远大于60GB，有可能会超过100GB。</p><p>当然，对于一个大型的搜索引擎来说，即便是100GB的内存要求，其实也不算太高，我们可以采用分治的思想，用多台机器（比如20台内存是8GB的机器）来存储这10亿网页链接。这种分治的处理思路，我们讲过很多次了，这里就不详细说了。</p><p>对于爬虫的URL去重这个问题，刚刚讲到的分治加散列表的思路，已经是可以实实在在工作的了。不过，<strong>作为一个有追求的工程师，我们应该考虑，在添加、查询数据的效率以及内存消耗方面，是否还有进一步的优化空间呢？</strong></p><p>你可能会说，散列表中添加、查找数据的时间复杂度已经是O(1)，还能有进一步优化的空间吗？实际上，我们前面也讲过，时间复杂度并不能完全代表代码的执行时间。大O时间复杂度表示法，会忽略掉常数、系数和低阶，并且统计的对象是语句的频度。不同的语句，执行时间也是不同的。时间复杂度只是表示执行时间随数据规模的变化趋势，并不能度量在特定的数据规模下，代码执行时间的多少。</p><p>如果时间复杂度中原来的系数是10，我们现在能够通过优化，将系数降为1，那在时间复杂度没有变化的情况下，执行效率就提高了10倍。对于实际的软件开发来说，10倍效率的提升，显然是一个非常值得的优化。</p><p>如果我们用基于链表的方法解决冲突问题，散列表中存储的是URL，那当查询的时候，通过哈希函数定位到某个链表之后，我们还需要依次比对每个链表中的URL。这个操作是比较耗时的，主要有两点原因。</p><p>一方面，链表中的结点在内存中不是连续存储的，所以不能一下子加载到CPU缓存中，没法很好地利用到CPU高速缓存，所以数据访问性能方面会打折扣。</p><p>另一方面，链表中的每个数据都是URL，而URL不是简单的数字，是平均长度为64字节的字符串。也就是说，我们要让待判重的URL，跟链表中的每个URL，做字符串匹配。显然，这样一个字符串匹配操作，比起单纯的数字比对，要慢很多。所以，基于这两点，执行效率方面肯定是有优化空间的。</p><p>对于内存消耗方面的优化，除了刚刚这种基于散列表的解决方案，貌似没有更好的法子了。实际上，如果要想内存方面有明显的节省，那就得换一种解决方案，也就是我们今天要着重讲的这种存储结构，<strong>布隆过滤器</strong>（Bloom Filter）。</p><p>在讲布隆过滤器前，我要先讲一下另一种存储结构，<strong>位图</strong>（BitMap）。因为，布隆过滤器本身就是基于位图的，是对位图的一种改进。</p><p>我们先来看一个跟开篇问题非常类似、但比那个稍微简单的问题。<strong>我们有1千万个整数，整数的范围在1到1亿之间。如何快速查找某个整数是否在这1千万个整数中呢？</strong></p><p>当然，这个问题还是可以用散列表来解决。不过，我们可以使用一种比较“特殊”的散列表，那就是位图。我们申请一个大小为1亿、数据类型为布尔类型（true或者false）的数组。我们将这1千万个整数作为数组下标，将对应的数组值设置成true。比如，整数5对应下标为5的数组值设置为true，也就是array[5]=true。</p><p>当我们查询某个整数K是否在这1千万个整数中的时候，我们只需要将对应的数组值array[K]取出来，看是否等于true。如果等于true，那说明1千万整数中包含这个整数K；相反，就表示不包含这个整数K。</p><p>不过，很多语言中提供的布尔类型，大小是1个字节的，并不能节省太多内存空间。实际上，表示true和false两个值，我们只需要用一个二进制位（bit）就可以了。<strong>那如何通过编程语言，来表示一个二进制位呢？</strong></p><p>这里就要用到位运算了。我们可以借助编程语言中提供的数据类型，比如int、long、char等类型，通过位运算，用其中的某个位表示某个数字。文字描述起来有点儿不好理解，我把位图的代码实现写了出来，你可以对照着代码看下，应该就能看懂了。</p><pre><code>public class BitMap { // Java中char类型占16bit，也即是2个字节\n  private char[] bytes;\n  private int nbits;\n  \n  public BitMap(int nbits) {\n    this.nbits = nbits;\n    this.bytes = new char[nbits/16+1];\n  }\n\n  public void set(int k) {\n    if (k &gt; nbits) return;\n    int byteIndex = k / 16;\n    int bitIndex = k % 16;\n    bytes[byteIndex] |= (1 &lt;&lt; bitIndex);\n  }\n\n  public boolean get(int k) {\n    if (k &gt; nbits) return false;\n    int byteIndex = k / 16;\n    int bitIndex = k % 16;\n    return (bytes[byteIndex] &amp; (1 &lt;&lt; bitIndex)) != 0;\n  }\n}\n</code></pre><p>从刚刚位图结构的讲解中，你应该可以发现，位图通过数组下标来定位数据，所以，访问效率非常高。而且，每个数字用一个二进制位来表示，在数字范围不大的情况下，所需要的内存空间非常节省。</p><p>比如刚刚那个例子，如果用散列表存储这1千万的数据，数据是32位的整型数，也就是需要4个字节的存储空间，那总共至少需要40MB的存储空间。如果我们通过位图的话，数字范围在1到1亿之间，只需要1亿个二进制位，也就是12MB左右的存储空间就够了。</p><p>关于位图，我们就讲完了，是不是挺简单的？不过，这里我们有个假设，就是数字所在的范围不是很大。如果数字的范围很大，比如刚刚那个问题，数字范围不是1到1亿，而是1到10亿，那位图的大小就是10亿个二进制位，也就是120MB的大小，消耗的内存空间，不降反增。</p><p>这个时候，布隆过滤器就要出场了。布隆过滤器就是为了解决刚刚这个问题，对位图这种数据结构的一种改进。</p><p>还是刚刚那个例子，数据个数是1千万，数据的范围是1到10亿。布隆过滤器的做法是，我们仍然使用一个1亿个二进制大小的位图，然后通过哈希函数，对数字进行处理，让它落在这1到1亿范围内。比如我们把哈希函数设计成f(x)=x%n。其中，x表示数字，n表示位图的大小（1亿），也就是，对数字跟位图的大小进行取模求余。</p><p>不过，你肯定会说，哈希函数会存在冲突的问题啊，一亿零一和1两个数字，经过你刚刚那个取模求余的哈希函数处理之后，最后的结果都是1。这样我就无法区分，位图存储的是1还是一亿零一了。</p><p>为了降低这种冲突概率，当然我们可以设计一个复杂点、随机点的哈希函数。除此之外，还有其他方法吗？我们来看布隆过滤器的处理方法。既然一个哈希函数可能会存在冲突，那用多个哈希函数一块儿定位一个数据，是否能降低冲突的概率呢？我来具体解释一下，布隆过滤器是怎么做的。</p><p>我们使用K个哈希函数，对同一个数字进行求哈希值，那会得到K个不同的哈希值，我们分别记作$X_{1}$，$X_{2}$，$X_{3}$，…，$X_{K}$。我们把这K个数字作为位图中的下标，将对应的BitMap[$X_{1}$]，BitMap[$X_{2}$]，BitMap[$X_{3}$]，…，BitMap[$X_{K}$]都设置成true，也就是说，我们用K个二进制位，来表示一个数字的存在。</p><p>当我们要查询某个数字是否存在的时候，我们用同样的K个哈希函数，对这个数字求哈希值，分别得到$Y_{1}$，$Y_{2}$，$Y_{3}$，…，$Y_{K}$。我们看这K个哈希值，对应位图中的数值是否都为true，如果都是true，则说明，这个数字存在，如果有其中任意一个不为true，那就说明这个数字不存在。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/ae/94630c1c3b7657f560a1825bd9d02cae.jpg?wh=1142*639\" alt=\"\"></p><p>对于两个不同的数字来说，经过一个哈希函数处理之后，可能会产生相同的哈希值。但是经过K个哈希函数处理之后，K个哈希值都相同的概率就非常低了。尽管采用K个哈希函数之后，两个数字哈希冲突的概率降低了，但是，这种处理方式又带来了新的问题，那就是容易误判。我们看下面这个例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/1a/d0a3326ef0037f64102163209301aa1a.jpg?wh=1142*665\" alt=\"\"></p><p>布隆过滤器的误判有一个特点，那就是，它只会对存在的情况有误判。如果某个数字经过布隆过滤器判断不存在，那说明这个数字真的不存在，不会发生误判；如果某个数字经过布隆过滤器判断存在，这个时候才会有可能误判，有可能并不存在。不过，只要我们调整哈希函数的个数、位图大小跟要存储数字的个数之间的比例，那就可以将这种误判的概率降到非常低。</p><p>尽管布隆过滤器会存在误判，但是，这并不影响它发挥大作用。很多场景对误判有一定的容忍度。比如我们今天要解决的爬虫判重这个问题，即便一个没有被爬取过的网页，被误判为已经被爬取，对于搜索引擎来说，也并不是什么大事情，是可以容忍的，毕竟网页太多了，搜索引擎也不可能100%都爬取到。</p><p>弄懂了布隆过滤器，我们今天的爬虫网页去重的问题，就很简单了。</p><p>我们用布隆过滤器来记录已经爬取过的网页链接，假设需要判重的网页有10亿，那我们可以用一个10倍大小的位图来存储，也就是100亿个二进制位，换算成字节，那就是大约1.2GB。之前我们用散列表判重，需要至少100GB的空间。相比来讲，布隆过滤器在存储空间的消耗上，降低了非常多。</p><p>那我们再来看下，利用布隆过滤器，在执行效率方面，是否比散列表更加高效呢？</p><p>布隆过滤器用多个哈希函数对同一个网页链接进行处理，CPU只需要将网页链接从内存中读取一次，进行多次哈希计算，理论上讲这组操作是CPU密集型的。而在散列表的处理方式中，需要读取散列值相同（散列冲突）的多个网页链接，分别跟待判重的网页链接，进行字符串匹配。这个操作涉及很多内存数据的读取，所以是内存密集型的。我们知道CPU计算可能是要比内存访问更快速的，所以，理论上讲，布隆过滤器的判重方式，更加快速。</p><h2>总结引申</h2><p>今天，关于搜索引擎爬虫网页去重问题的解决，我们从散列表讲到位图，再讲到布隆过滤器。布隆过滤器非常适合这种不需要100%准确的、允许存在小概率误判的大规模判重场景。除了爬虫网页去重这个例子，还有比如统计一个大型网站的每天的UV数，也就是每天有多少用户访问了网站，我们就可以使用布隆过滤器，对重复访问的用户进行去重。</p><p>我们前面讲到，布隆过滤器的误判率，主要跟哈希函数的个数、位图的大小有关。当我们往布隆过滤器中不停地加入数据之后，位图中不是true的位置就越来越少了，误判率就越来越高了。所以，对于无法事先知道要判重的数据个数的情况，我们需要支持自动扩容的功能。</p><p>当布隆过滤器中，数据个数与位图大小的比例超过某个阈值的时候，我们就重新申请一个新的位图。后面来的新数据，会被放置到新的位图中。但是，如果我们要判断某个数据是否在布隆过滤器中已经存在，我们就需要查看多个位图，相应的执行效率就降低了一些。</p><p>位图、布隆过滤器应用如此广泛，很多编程语言都已经实现了。比如Java中的BitSet类就是一个位图，Redis也提供了BitMap位图类，Google的Guava工具包提供了BloomFilter布隆过滤器的实现。如果你感兴趣，你可以自己去研究下这些实现的源码。</p><h2>课后思考</h2><ol>\n<li>\n<p>假设我们有1亿个整数，数据范围是从1到10亿，如何快速并且省内存地给这1亿个数据从小到大排序？</p>\n</li>\n<li>\n<p>还记得我们在<a href=\"https://time.geekbang.org/column/article/67388\">哈希函数（下）</a>讲过的利用分治思想，用散列表以及哈希函数，实现海量图库中的判重功能吗？如果我们允许小概率的误判，那是否可以用今天的布隆过滤器来解决呢？你可以参照我们当时的估算方法，重新估算下，用布隆过滤器需要多少台机器？</p>\n</li>\n</ol><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","comments":[{"had_liked":false,"id":58045,"user_name":"DreamYe","can_delete":false,"product_type":"c1","uid":1272215,"ip_address":"","ucode":"C8F935594E0EEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/69/97/2044815d.jpg","comment_is_top":false,"comment_ctime":1546966968,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1161188136888","product_id":100017301,"comment_content":"bloom filter: False is always false. True is maybe true.","like_count":269,"discussions":[{"author":{"id":1763569,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/f1/45a700b9.jpg","nickname":"Hahahaha","note":"","ucode":"70AC545E044F96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370032,"discussion_content":"说你不行就肯定不行，说你行也有可能不行","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1619258645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1750973,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b7/bd/e7afe338.jpg","nickname":"王云雷","note":"","ucode":"876A18F9D161EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285982,"discussion_content":"精髓啊","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593004970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350360,"discussion_content":"好像不准确呢\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613824898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58070,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1546991651,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"693036726307","product_id":100017301,"comment_content":"课后思考题1<br><br>传统的做法：1亿个整数，存储需要400M空间，排序时间复杂度最优 N×log(N)<br><br>使用位图算法：数字范围是1到10亿，用位图存储125M就够了，然后将1亿个数字依次添加到位图中，然后再将位图按下标从小到大输出值为1的下标，排序就完成了，时间复杂度为 N","like_count":161,"discussions":[{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76779,"discussion_content":"重复的值，再用一个hashmap存储，key是值，value是重复次数","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1575853911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1706966,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJO1Savx83xQc5xc8D6adlvhR7mLCe1Cm7jXJPhIpa4pKQo0RGTEuFCaJYkdq2R7RnKiaiaGYicxyD3A/132","nickname":"徐文锋","note":"","ucode":"CC45BAE23CA065","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42494,"discussion_content":"这个题目的前提是1亿个整数不重复的且都在位图里存储了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1572681987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39852,"discussion_content":"是否还需要考虑相同数值处理？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1572002193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374301,"discussion_content":"我去，看了我半天才大概理解，原来是把原整数值，直接看成位的下标，比如原值是2亿，那对应位下标就是第2亿的位置(把这个位置设为1)，这样的方式把数据全部放完后，直接遍历这个位数组，把为1的下标(注意这里是下标)输出就行了——好处是只占bit大小，且时间复杂度为n。(初步估计这个位下标应该是通过运算可以算出来的，希望有大神能进一步指点迷津！)","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1621128817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738248,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/08/179d97ac.jpg","nickname":"Arrivederci","note":"","ucode":"205ACE590F1F74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332280,"discussion_content":"想到计数排序","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607144973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148742,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/46/2850b4a9.jpg","nickname":"luo","note":"","ucode":"00FBDC12101419","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2493,"discussion_content":"上面那个n是1亿，下面那个n是10亿基数有差，但还是2比一小。赞一个","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563718043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374302,"discussion_content":"另外老师说重复数据，那就再用一个散列表来记录就行了，也就是你从位图输出的时候，再去这个记录好的散列表查这个值，顺便输出对应的重复个数就行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621129073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072658,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5e/12/c0c4d6f2.jpg","nickname":"Qiubh","note":"","ucode":"3BC33EC44F2FDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393375,"discussion_content":"遍历10亿次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631383601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286741,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/55/1092ebb8.jpg","nickname":"边城路远","note":"","ucode":"214ECD8981E87F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264447,"discussion_content":"应该是12.5M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589328024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1972505,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","nickname":"李润东","note":"","ucode":"65CFEA3C8B27C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286741,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/55/1092ebb8.jpg","nickname":"边城路远","note":"","ucode":"214ECD8981E87F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267140,"discussion_content":"就是125M吧，10亿÷8÷1024²","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589606716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264447,"ip_address":""},"score":267140,"extra":""},{"author":{"id":1286741,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/55/1092ebb8.jpg","nickname":"边城路远","note":"","ucode":"214ECD8981E87F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1972505,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","nickname":"李润东","note":"","ucode":"65CFEA3C8B27C4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267917,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589710749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":267140,"ip_address":""},"score":267917,"extra":""}]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24408,"discussion_content":"赞，十进制转二进制----位图对应的二进制串赋下标值为1-----按顺序取出下标为1的二进制转十进制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570110838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547322,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/3a/bfd73920.jpg","nickname":"junjun","note":"","ucode":"1F7EE146B9BE04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21231,"discussion_content":"不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569456027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58269,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1547024279,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"327964538775","product_id":100017301,"comment_content":"位图代码的实现一开始没看懂，请教了下身边一位大神同事才搞懂，原来char类型存储数字的时候，只占1个字节，也就是8位。所以计算的时候都是除8或者模8。希望我的回答可以帮助其他跟我一样基础薄弱的同学，共同进步","like_count":76,"discussions":[{"author":{"id":1126841,"avatar":"https://static001.geekbang.org/account/avatar/00/11/31/b9/caad6ad5.jpg","nickname":"向光奔跑。","note":"","ucode":"BFAC50E18B9A35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":981,"discussion_content":"java的char是2字节的把，用的是unicode编码，跟语言有关系","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1562221312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264180,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","nickname":"夕林语","note":"","ucode":"B57681D0C73E1B","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381719,"discussion_content":"Java当中的char是两字节，16位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625192980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443369,"avatar":"https://static001.geekbang.org/account/avatar/00/16/06/29/00a319e3.jpg","nickname":"少主江衫","note":"","ucode":"95B503FE19604F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291588,"discussion_content":"System.out.println(Character.SIZE); //结果16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594881397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58426,"user_name":"越过山丘","can_delete":false,"product_type":"c1","uid":1143321,"ip_address":"","ucode":"F7ED19E6C49634","user_header":"https://static001.geekbang.org/account/avatar/00/11/72/19/84b7c212.jpg","comment_is_top":false,"comment_ctime":1547082171,"is_pvip":false,"replies":[{"id":"21052","content":"对于重复的 可以再维护一个小的散列表 记录出现次数超过1次的数据以及对应的个数","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085281,"ip_address":"","comment_id":58426,"utype":1}],"discussion_count":6,"race_medal":0,"score":"310784727483","product_id":100017301,"comment_content":"第一题，数字重复了，有什么好方法处理吗","like_count":72,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436060,"discussion_content":"对于重复的 可以再维护一个小的散列表 记录出现次数超过1次的数据以及对应的个数","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1547085281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382521,"discussion_content":"这个计数用的散列表可能也不小吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625623983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243570,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","nickname":"社会你强哥","note":"","ucode":"325B9005588D9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260624,"discussion_content":"这样输出的时候，我每次还要查散列表，判断是否有多个相同的数字，有点麻烦。用Hash分片和分治的思想更好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588868611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210187,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/4b/99d67d3d.jpg","nickname":"oh..","note":"","ucode":"DB1398EA83A1A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3689,"discussion_content":"直接改位图里面 的值作为数据的个数不行吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564712599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1137727,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/3f/34e5c750.jpg","nickname":"看，有只猪","note":"","ucode":"F9BB302BC71CE8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1210187,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/4b/99d67d3d.jpg","nickname":"oh..","note":"","ucode":"DB1398EA83A1A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7625,"discussion_content":"位图中的值只能为0或1所以不能记录有多少个相同值，可以像老师那样建立一个哈希表记录","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1567589176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3689,"ip_address":""},"score":7625,"extra":""},{"author":{"id":1516010,"avatar":"https://static001.geekbang.org/account/avatar/00/17/21/ea/2cfb9144.jpg","nickname":"auko","note":"","ucode":"7E3AA25B2D250F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210187,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/4b/99d67d3d.jpg","nickname":"oh..","note":"","ucode":"DB1398EA83A1A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186227,"discussion_content":"位图 bitmap , 一个bit就一位 , 没法存个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582647999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3689,"ip_address":""},"score":186227,"extra":""}]}]},{"had_liked":false,"id":58821,"user_name":"ban","can_delete":false,"product_type":"c1","uid":1034204,"ip_address":"","ucode":"E523CE97E48266","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","comment_is_top":false,"comment_ctime":1547201306,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"190525762330","product_id":100017301,"comment_content":"这个char代码最好还是用图解比较好理解，纯代码看不懂。<br>我这里有另外一个位的图解计算过程，再去看代码，你就会秒懂<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;xxauNrJY9HlVNvLrL5j2hg","like_count":44,"discussions":[{"author":{"id":1313422,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/8e/bf9ea6bb.jpg","nickname":"张锡贤","note":"","ucode":"7441D634EC4B88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315526,"discussion_content":"小灰 牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603285734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2668694,"avatar":"https://static001.geekbang.org/account/avatar/00/28/b8/96/716ba431.jpg","nickname":"苏成","note":"","ucode":"80A8E7B243DD73","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572092,"discussion_content":"牛逼看完图之后秒懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652598994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1866485,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","nickname":"简单猫","note":"","ucode":"EA027D4C344E25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548410,"discussion_content":"形象生动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643186210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264180,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","nickname":"夕林语","note":"","ucode":"B57681D0C73E1B","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381721,"discussion_content":"是比较难理解，但是可以自己带入一些数值，就比较好理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625193048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2021212,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MdmRMTV2IwvQZF2IO0G0CFWbKxT9CIibmcdicS3J4SmrA4P1e36jCwyXZpia06ItwP4GibGnCrPJHicBbd5y9libTpiaA/132","nickname":"^_^","note":"","ucode":"301EE75D170771","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363108,"discussion_content":"评论区大神很多呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617112937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350373,"discussion_content":"学到了,思想很重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613827905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326204,"discussion_content":"这个说得形象具体！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605541920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292349,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b8/3d/a3e290b0.jpg","nickname":"Nucky","note":"","ucode":"62783A339C61B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309496,"discussion_content":"感谢老哥分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601304311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445123,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0d/03/e59341b4.jpg","nickname":"亚","note":"","ucode":"CDF4DFC3F3619A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220551,"discussion_content":"这个图解算法 很有用，瞬间秒懂了。还结合 了实际应用的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585894033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1093541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/af/a5/afa1d7d7.jpg","nickname":"hasWhere","note":"","ucode":"2C2B2988107489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187833,"discussion_content":"很有帮助，thanks","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582771700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75316,"user_name":"司霖","can_delete":false,"product_type":"c1","uid":1345853,"ip_address":"","ucode":"7A1CFE1DACC23B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq0mnVeia1dnic00tkicbawOrIQpiaOxGjh7r0Tuh7th82NibLrJKnv9LLuDmPNzXXTqdb36tsEVIFlYiaw/132","comment_is_top":false,"comment_ctime":1552377685,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"151876233045","product_id":100017301,"comment_content":"将数字 A 的第 k 位设置为1：A = A | (1 &lt;&lt; (k - 1))<br>将数字 A 的第 k 位设置为0：A = A &amp; ~(1 &lt;&lt; (k - 1))<br>检测数字 A 的第 k 位：A &amp; (1 &lt;&lt; (k - 1)) != 0<br>用于理解bitmap中代码","like_count":35,"discussions":[{"author":{"id":1866485,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","nickname":"简单猫","note":"","ucode":"EA027D4C344E25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548415,"discussion_content":"因为没有类型bit 所以通过char来模拟位图\n\n因为char是2个字节 16bit 一个bit代表0和1\n\n所以会用整除16来确定放在第几个char中\n\n通过16求余 来确定放在这个char的第几个下标\n\n而之所以数组要加1 是为了方便存数字\n\n你应当把数值1存在数组下标1的位置 直观高效 \n如果放在数组下标0位置 \nvar index=1: array[index-1] \n多了一次减法计算\n\nget的时候先计算这个数字存在char数组的在哪个下标\n，也就是16/\n再计算在该下标char里面的那个bit上 ，也就是%16\n\n1&lt;&lt;bitindex ，二进制中就是0000 0000 0000 0001\n当求余为0 那么就是第一位  0000 0000 0000 0001\n当求余为1 那就是1左移1位    0000 0000 0000 0010\n当求余为2 那就是1左移2位   0000 0000 0000 0100\n通过左移可获取设置的位置\n\nget\n同理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643187502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109700,"user_name":"Costar","can_delete":false,"product_type":"c1","uid":1596027,"ip_address":"","ucode":"995C4BA715A151","user_header":"","comment_is_top":false,"comment_ctime":1562079053,"is_pvip":false,"replies":[{"id":"39745","content":"一般不用来删除，如果非要支持删除，可以再弄个数据结构记录删除的数据。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562112538,"ip_address":"","comment_id":109700,"utype":1}],"discussion_count":5,"race_medal":0,"score":"83166457677","product_id":100017301,"comment_content":"有个问题怎么解决的？Bloom filter删除数据时，不能把bit位置0","like_count":19,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456525,"discussion_content":"一般不用来删除，如果非要支持删除，可以再弄个数据结构记录删除的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562112538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415357,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/fd/f5d48658.jpg","nickname":"alone.","note":"","ucode":"DAF89E3DB81714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347523,"discussion_content":"异或运算 异为0 用0 与对应位置1 进行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612249372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2447149,"avatar":"https://static001.geekbang.org/account/avatar/00/25/57/2d/e232b9bb.jpg","nickname":"牛","note":"","ucode":"4DA6282323B7EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2415357,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/fd/f5d48658.jpg","nickname":"alone.","note":"","ucode":"DAF89E3DB81714","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362191,"discussion_content":"这样会误删其他数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616869124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347523,"ip_address":""},"score":362191,"extra":""},{"author":{"id":2694205,"avatar":"https://static001.geekbang.org/account/avatar/00/29/1c/3d/76465ee4.jpg","nickname":"摘星","note":"","ucode":"55D8CAFC938F91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2447149,"avatar":"https://static001.geekbang.org/account/avatar/00/25/57/2d/e232b9bb.jpg","nickname":"牛","note":"","ucode":"4DA6282323B7EC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553351,"discussion_content":"删除k：-1 &lt;&lt; 第k位 eg：1110111... 然后再和原数据&amp;起来 就不会误删了，除了k位，该是1的还是1 该是0的还是0 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645858305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362191,"ip_address":""},"score":553351,"extra":""}]},{"author":{"id":1796438,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/zlWt0lPDicdib5BTUbuwA3wLLUuejtZ5icGu3DHMBPd6PicXOdhZ3zYFts8VkXjjyQuxzUJas2w5OTmx3icWKiaZM1Vg/132","nickname":"youyou.L","note":"","ucode":"B3DB0D0700EEAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324235,"discussion_content":"可以自己改呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605075694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100985,"user_name":"李斌","can_delete":false,"product_type":"c1","uid":1007369,"ip_address":"","ucode":"73D1A97F746F69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/09/80484e2e.jpg","comment_is_top":false,"comment_ctime":1559698028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70279174764","product_id":100017301,"comment_content":"我们在信息流推荐系统中用 bloom filter 过滤推荐历史，在工程上使用 RedisLibs 的 ReBloom","like_count":15},{"had_liked":false,"id":58218,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1547012024,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61676554168","product_id":100017301,"comment_content":"直观上感觉位图有点像学排序时桶的概念，所以使用位图也可以实现类似于桶排序的效率。","like_count":14,"discussions":[{"author":{"id":1325514,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/ca/4a07bfd8.jpg","nickname":"Jahng","note":"","ucode":"5D5789EAAC4739","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344354,"discussion_content":"思路一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611427033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045078,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","nickname":"Jie","note":"","ucode":"AB94041E548FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272443,"discussion_content":" 数据范围太大了吧，倒是可以用基数排序，只是空间复杂度不满足题目要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590309257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58368,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1547045791,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57381620639","product_id":100017301,"comment_content":"思考题1的java实现。<br>import java.util.Random;<br><br>public class BitMap {<br>\tprivate int[] bits;<br>\tprivate int[] input;<br><br>\tpublic BitMap(int n, int[] input) {<br>\t\tbits = new int[n];<br>\t\tthis.input = input;<br>\t}<br><br>\tpublic void setBit(int n) {<br>\t\tint offset = n &#47; 32;<br>\t\tint value = n % 32;<br>\t\tbits[offset] |= (1 &lt;&lt; value);<br>\t}<br><br>\tpublic boolean getBit(int n) {<br>\t\tint offset = n &#47; 32;<br>\t\tint value = n % 32;<br>\t\treturn (bits[offset] &amp; (1 &lt;&lt; value)) != 0;<br>\t}<br><br>\t&#47;**<br>\t * 排序<br>\t * <br>\t * @param n<br>\t *            是数组的存储整数范围<br>\t * @param input<br>\t *            输入的未排序数组<br>\t * @return 有序的数组范围<br>\t *&#47;<br>\tpublic int sort(int n, int[] input) {<br>\t\tint j = 0;<br>\t\tfor (int i = 1; i &lt;= 10 * n; i++) {<br>\t\t\tif (getBit(i)) {<br>\t\t\t\tinput[j++] = i;<br>\t\t\t}<br>\t\t}<br>\t\treturn j;<br>\t}<br><br>\tpublic static void main(String[] args) {<br>\t\tint n = 1000000000;<br>\t\tint[] input = new int[n];<br>\t\tRandom r = new Random();<br>\t\tfor (int i = 0; i &lt; n; i++) {<br>\t\t\tinput[i] = r.nextInt(10 * n - 1) + 1;<br>\t\t}<br>\t\tBitMap bitMap = new BitMap(10 * n, input);<br>\t\tfor (int i = 0; i &lt; n; i++) {<br>\t\t\tbitMap.setBit(input[i]);<br>\t\t}<br>\t\tint size = bitMap.sort(n, input);<br>\t\tfor (int i = 0; i &lt; size; i++)<br>\t\t\tSystem.out.print(input[i] + &quot;,&quot;);<br>\t}<br>}<br>","like_count":13},{"had_liked":false,"id":58221,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1547012598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53086620150","product_id":100017301,"comment_content":"1亿个整数 如果完全读入内存大约是0.4G的样子 可以直接快排排序 <br>通过位图方式开辟一个十亿大小的位图缩小到0.125g的样子,虽然数字只有一亿个,但是我们却要检查1到10亿之间的数字是否存在再输出即可达到排序","like_count":12},{"had_liked":false,"id":58095,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1546996304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40201701968","product_id":100017301,"comment_content":"这个位图很精妙，因为编程语言没有提供bit类型，所以使用byte进行位运算的方式，巧妙的利用每一位，以达到减少内存开辟的消耗的问题","like_count":9},{"had_liked":false,"id":58343,"user_name":"gogo-heidi","can_delete":false,"product_type":"c1","uid":1174505,"ip_address":"","ucode":"25063C93351761","user_header":"https://static001.geekbang.org/account/avatar/00/11/eb/e9/f94ee55c.jpg","comment_is_top":false,"comment_ctime":1547041096,"is_pvip":true,"replies":[{"id":"21059","content":"ipad paper","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085673,"ip_address":"","comment_id":58343,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35906779464","product_id":100017301,"comment_content":"王争哥，您好。你画这个图，用的啥软件画的啊？  比普通的黑白图更容易理解。望求解！感激不尽！","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436021,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238305,"user_name":"GeekYanger","can_delete":false,"product_type":"c1","uid":2046036,"ip_address":"","ucode":"E674B7D25261CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","comment_is_top":false,"comment_ctime":1596116932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27365920708","product_id":100017301,"comment_content":"这里补充一下，布隆过滤器有许多实现与优化，Guava中就提供了一种Bloom Filter的实现。<br>在使用bloom filter时，绕不过的两点是预估数据量n以及期望的误判率fpp，<br>在实现bloom filter时，绕不过的两点就是hash函数的选取以及bit数组的大小。<br>对于一个确定的场景，我们预估要存的数据量为n，期望的误判率为fpp，然后需要计算我们需要的Bit数组的大小m，以及hash函数的个数k，并选择hash函数<br>哈希函数的选择对性能的影响应该是很大的，一个好的哈希函数要能近似等概率的将字符串映射到各个Bit。选择k个不同的哈希函数比较麻烦，一种简单的方法是选择一个哈希函数，然后送入k个不同的参数。<br>哈希函数个数k、位数组大小m、加入的字符串数量n的关系可以参考Bloom Filters - the math，Bloom_filter-wikipedia","like_count":6},{"had_liked":false,"id":78522,"user_name":"蓝色~冰*羽","can_delete":false,"product_type":"c1","uid":1205873,"ip_address":"","ucode":"E2F6424766AD7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/71/8a5d02ab.jpg","comment_is_top":false,"comment_ctime":1553166362,"is_pvip":false,"replies":[{"id":"28612","content":"char是16位的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553212636,"ip_address":"","comment_id":78522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18733035546","product_id":100017301,"comment_content":"请问争哥，new char[nbits&#47;16+1]这里面为什么要做这个计算，看不懂啊","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444131,"discussion_content":"char是16位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553212636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62703,"user_name":"雍鹏亮","can_delete":false,"product_type":"c1","uid":1179992,"ip_address":"","ucode":"A7E394043295B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/58/98719136.jpg","comment_is_top":false,"comment_ctime":1548138455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18728007639","product_id":100017301,"comment_content":"思考题1和桶排序一样吧，把对应的的桐位置1，然后依次读取","like_count":4},{"had_liked":false,"id":58689,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1228498,"ip_address":"","ucode":"582698D772810D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d2/3d88cb8e.jpg","comment_is_top":false,"comment_ctime":1547175682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18727044866","product_id":100017301,"comment_content":"对布隆过滤器的理解更深了。","like_count":4},{"had_liked":false,"id":58283,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1547026603,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18726895787","product_id":100017301,"comment_content":"思考题1:用10亿个位的位图存储这1亿个数，然后直接按脚标从0到10亿顺序遍历整个位图，如果位为1，则打印脚标，打印出来的就是排好序的1亿个数字<br><br>思考题2:用位图的话。一个机器应该就够了","like_count":4,"discussions":[{"author":{"id":1530295,"avatar":"https://static001.geekbang.org/account/avatar/00/17/59/b7/9db9c657.jpg","nickname":"渊จุ๊บ","note":"","ucode":"E3A2C1E89EB576","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311816,"discussion_content":"算了下，估计1/80台主机即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602493355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58235,"user_name":"编程指北","can_delete":false,"product_type":"c1","uid":1235967,"ip_address":"","ucode":"FDBAEE3500D689","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/ff/7043a067.jpg","comment_is_top":false,"comment_ctime":1547015633,"is_pvip":true,"replies":[{"id":"21065","content":"判错旅太高了 哈希函数不够随机均匀？位图不够大？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547086301,"ip_address":"","comment_id":58235,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18726884817","product_id":100017301,"comment_content":"老师，按照你的讲解我写了一个简单的布隆过滤器， 使用了3个简单的哈希函数，判错率在0.9左右<br>不知道是否是属于偏高了，这是代码，可以的话帮忙看看是否正确https:&#47;&#47;github.com&#47;MarvinLe&#47;tools&#47;tree&#47;master&#47;BloomFilter","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435964,"discussion_content":"判错旅太高了 哈希函数不够随机均匀？位图不够大？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547086301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215513,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1205485,"ip_address":"","ucode":"862EA133563634","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUhJakYu4BI7eFnheKDdibDjZqz32ia2rhN0Jz5YoR1ZRlDrLcFNr4MJnPg3WiaxaocWotOANeqsBibw/132","comment_is_top":false,"comment_ctime":1589006766,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"14473908654","product_id":100017301,"comment_content":"老师，看了您文章真是收获不小<br>this.bytes = new char[nbits&#47;16+1]<br>nbits ：表示我们要建立多少二进制位<br>nbits&#47;16+1 ：这里+1 是为了兼容nbits&#47;16 = 0 的情况，实际使用如果nbits大于16，我们就会多申请一个数组空间，这个空间是用不到的<br>这样理解不知道对吗，请老师给我个回复<br>","like_count":3,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369028,"discussion_content":"不+1，数组的范围是arr[0]到arr[n-1]，访问arr[n]时越界","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618907452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440496,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3d/30/9e5e5d4d.jpg","nickname":"巴菲特不非","note":"","ucode":"9E2B911ED5BF08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356155,"discussion_content":"当nbits<16时，如果不+1，然后就变成开辟0个区间，明显不ok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615541715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440496,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3d/30/9e5e5d4d.jpg","nickname":"巴菲特不非","note":"","ucode":"9E2B911ED5BF08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356153,"discussion_content":"加1是因为小于16的数字如果与16相除则得到0\n\t\t","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615541415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2440496,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3d/30/9e5e5d4d.jpg","nickname":"巴菲特不非","note":"","ucode":"9E2B911ED5BF08","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369024,"discussion_content":"因为不能直接用nbits<16的个数作为数组的大小，当访问最后一个元素时，会超过数组的下标。比如 32 /16 =2 ,如果是new arr[2]，数组只有2个元素，arr[0],arr[1]，访问 arr[2]时就越界了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618906782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356153,"ip_address":""},"score":369024,"extra":""},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2440496,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3d/30/9e5e5d4d.jpg","nickname":"巴菲特不非","note":"","ucode":"9E2B911ED5BF08","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369030,"discussion_content":"不+1，数组的范围是arr[0]到arr[n-1]，访问arr[n]时越界","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618908002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356153,"ip_address":""},"score":369030,"extra":""}]},{"author":{"id":1008100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/61/e4/db3f783b.jpg","nickname":"Karson","note":"","ucode":"E0286BF6CA7281","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275072,"discussion_content":"这里没看懂+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590657987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1972505,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","nickname":"李润东","note":"","ucode":"65CFEA3C8B27C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267093,"discussion_content":"我也没有太明白这个+1是干啥的...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589600018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179041,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1581902205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14466804093","product_id":100017301,"comment_content":"布隆过滤器：宁可错杀三千，不可放过一个","like_count":3},{"had_liked":false,"id":81264,"user_name":"Flash","can_delete":false,"product_type":"c1","uid":1236163,"ip_address":"","ucode":"E285075C9E0B02","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","comment_is_top":false,"comment_ctime":1553844324,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14438746212","product_id":100017301,"comment_content":"争哥，我想到了通过hash算法将String转换为int类型数据，然后再将int数据位运算存储到位图上，可是这个hash算法，也可能会出现散列冲突啊，不同的String有可能是同一个int，然后反应到位图上就是相同的bit位了。","like_count":3,"discussions":[{"author":{"id":1530295,"avatar":"https://static001.geekbang.org/account/avatar/00/17/59/b7/9db9c657.jpg","nickname":"渊จุ๊บ","note":"","ucode":"E3A2C1E89EB576","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311148,"discussion_content":"同样的困惑，该课题只讲解了用整型来计算，但是字符串不是单个字符，一个字符串按一个一个字符转换为整型再并排到一起（如果一个字符占8位，那两个字符组成的字符串转换成16位的整型，以此类推，一个url的位数可想而知，太长了。当然这是为了不用散列算法，避免冲突），感觉字符串去重并不适合用位图来实现（课题讲的是位图实现字符去重）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602237447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213864,"avatar":"https://static001.geekbang.org/account/avatar/00/12/85/a8/721181ae.jpg","nickname":"yongliu","note":"","ucode":"70C9BF211012B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279744,"discussion_content":"人家说个哈希函数啊，多次校验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591408731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88996,"discussion_content":"64字节长度， 2^512 范围的数据，int 是肯定不行了。。。\n不知道咋搞。。\n难道多个哈希函数，那不是布隆过滤器了吗。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576745045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58922,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1547255714,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14432157602","product_id":100017301,"comment_content":"在线上环境，我们采用redis的set进行去重，效果还是不错的","like_count":3,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40286,"discussion_content":"数据量没有很大吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572151386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58701,"user_name":"煦暖","can_delete":false,"product_type":"c1","uid":1245418,"ip_address":"","ucode":"96D0B236C4148A","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/ea/6ad346c1.jpg","comment_is_top":false,"comment_ctime":1547178261,"is_pvip":false,"replies":[{"id":"21474","content":"好的 我去补充下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547431312,"ip_address":"","comment_id":58701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14432080149","product_id":100017301,"comment_content":"争哥，位图的代码理解了好久还没懂(；′⌒`)，能加几行注释吗？？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436178,"discussion_content":"好的 我去补充下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547431312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229705,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1593106145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183040737","product_id":100017301,"comment_content":"这篇文章算入门级，要深入可以看看hbase，guava，canssandra是怎么实现的。其中元素规模，hash函数个数，算法都是有讲究的","like_count":2},{"had_liked":false,"id":214131,"user_name":"大禾","can_delete":false,"product_type":"c1","uid":1742323,"ip_address":"","ucode":"841369DDF985A8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/95/f3/2fcbeb0a.jpg","comment_is_top":false,"comment_ctime":1588664473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178599065","product_id":100017301,"comment_content":"位运算不会，重新学习了一下，看到一篇文章位运算解决八皇后，作为补充材料，同样不会的同学可以参考 https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;45mfS3ciiVt8nghUSjezFg","like_count":2},{"had_liked":false,"id":275022,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1611279890,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5906247186","product_id":100017301,"comment_content":"删除Key的场景怎么处理呢？老师只说了判断插入的情况（其实大部分资料也是），这种情况对于LSM这类单纯追加型逻辑没问题。但是布隆过滤器作为缓存前置判断一个key是否存在这类场景，删除一个Kay的时候，布隆过滤器如何更新呢。显然不能将对应的多个bit置位0。我能想到的是再增加一个记录哪些Key删除的布隆过滤器，综合判断。但是这种方式不能解决一个Key反复删除和写入的场景。不知有什么成熟的解决方案。","like_count":1,"discussions":[{"author":{"id":1105916,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DwOtGibgqEK8IHvnV6UzBuWAxUjTuI44lfsOPmHVtb8FpicXuOZlAEuqwHsAM6sHz0XH9UtIiaEnDyAqrgOp4TBHA/132","nickname":"caspar","note":"","ucode":"94CDC83BACA481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346841,"discussion_content":"有其它评论也问了，作者也回答了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612080009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263191,"user_name":"sheny","can_delete":false,"product_type":"c1","uid":1487513,"ip_address":"","ucode":"9CD10E7766046C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRZW10jLxn9kLmYcMSWlWVu4BKiabNyQpg98G1xIsibxiapt3d4KqfLDkDk4yfmQP5FtsgmfBo75b4Q/132","comment_is_top":false,"comment_ctime":1606038604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901005900","product_id":100017301,"comment_content":"关于bloom filter，想起红楼梦一句话，“假作真时真亦假”。判断为有的时候，这个部分会有误判。","like_count":1},{"had_liked":false,"id":250222,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1600997673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895964969","product_id":100017301,"comment_content":"布隆过滤器更适合负向请求，啥叫负向请求来？<br>先说说我们工作中用到的正向请求，例如常见的缓存+db模型，先查询缓存有没有，有就返回结果，没有查询db，db有没有，有返回并回写缓存，没有的话返回没有。整个正向请求都在请求争取获得结果，例如刷微博的时候，我们判断有没有赞过某个微博、评论或者短链对象库。<br>但是反过来讲，对于微博这种开放交流平台，99%以上的内容，都是我们没有浏览过，更别提赞了，那么上边的正向请求就有问题了，大部分请求最后都会返回没有，那么负向请求的概念就呼之欲出了，那就是返回结果是没有场景。<br>也就是符合布隆过滤器，没有一定没有，但是有不一定有的定义。","like_count":1},{"had_liked":false,"id":213906,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1588588305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883555601","product_id":100017301,"comment_content":"思考题：<br>1.要把这一亿个整数排序，最简单的做法，把这1亿个整数存到位图中，位图大小是10亿bit，约120MB，位图中位的顺序即为整数的顺序。<br>2.如果采用布隆过滤器，可以用10亿bit位存储1亿图片的信息(包括图片唯一标识和图片文件路径长)，10亿bit约为120MB, 如果单机的内存容量上限为2GB，那么只需要1台机器就可以存贮。<br>","like_count":1},{"had_liked":false,"id":203511,"user_name":"咯咯巴","can_delete":false,"product_type":"c1","uid":1064395,"ip_address":"","ucode":"D6309866B0D2CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/3d/cb/8d07349f.jpg","comment_is_top":false,"comment_ctime":1586224443,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5881191739","product_id":100017301,"comment_content":"样例代码里BitMap这个类为何不用byte数组啊，为何用char两个字节的类型","like_count":1,"discussions":[{"author":{"id":1064234,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3d/2a/16357640.jpg","nickname":"黄土高坡","note":"","ucode":"7018F0FAE464A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393661,"discussion_content":"位图中对二进制位进行分片，每个分片就是一个 word。这里作者选择了两个字节作为一个字。当然也可以选一个字节为一个 word","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631537904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338754,"discussion_content":"我也有这个疑问，为啥不用byte数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609375774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1611025,"avatar":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","nickname":"沈康","note":"","ucode":"02AFA50738AB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313274,"discussion_content":"都可以的，使用byte的话，每个数组槽位就是bit数/8，而使用char就是bit/16\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603023598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173502,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1579579731,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5874547027","product_id":100017301,"comment_content":"\t在散列表中添加，查找数据的时间复杂度已经是O（1），还能有进一步优化的空间，时间复杂度并不能完全代表代码的执行时间。大O时间复杂度表示法，会忽略掉常数，系数和低阶，并且统计的对象是语句的频度。不同的语句，执行时间也是不同的。时间复杂度只是表示执行时间数据规模的变化趋势，并不能度量在特定的数据规模下，代码执行时间的多少。<br>\t<br>\t如果用链表的方法解决冲突问题，散列表中的存储的是URL，当查询的时候，通过哈希函数定位到某个链表之后，我们还需要依次对比每个链表中的URL。这个操作耗时的原因是：<br>\t1，链表中的结点在内存中不是连续存储的，所以不能一下子加载到CPU缓存中，没法很好地利用到CPU高速缓存，所以数据访问性能方面会打折扣。<br>\t2，链表中的每个数据都是URL，而URL不是简单的数字，是平均长度为64字节的字符串，即要做法字符串匹配。<br><br>布隆过滤器<br>\t对于内存消耗的优化，除了散列表，还可以用布隆过滤器来解决，可以明显节省内存。<br><br>\t<br>\t1，如果用散列表来解决，可以使用一种特殊的散列表：位图。申请一个大小为1亿，数据类型为布尔类型（true或false）的数组。我们将1千万个整数作为数组下标，将对应的数组值置为true。如整数5对应下标为5的数组值设置为true，即array[5]=true。<br><br>\t2，当我们查询某个整数k是否在这1千万个整数中的时候，只需要将对应的数组值array[k]取出来，看是否等于true。如果等于true，即说明1千万整数中包含这个整数k；相反，就表示不包含这个整数k。<br>\t<br>\t如何通过编程语言，来表示一个二进制？<br>\t\t1，通过位运算，用其中的某个位表示某个数字。<br>\t\t2，位图通过数组下标来定位数据，所以，访问效率非常高。并且每个数字用一个二进制为来表示，在数字范围不大的情况下，所需要的内存空间非常节省。<br>若用散列表存储1千万的数据，数据是32位的整形数，就需要4个字节的存储空间，总共需要至少40MB空间。如果是位图，数值范围在1到1亿之间，只需要1亿个二进制位，即12MB左右的存储空间。<br><br>\t但，当数字范围很大，数值范围不是1到1亿，而是1到10亿，位图的大小就是10亿个二进制位，即120MB的大小，消耗的内存空间不降反升。<br><br>布隆过滤器<br>布隆过滤器，是对位图这种数据结构的一种改进。<br>若，数据个数是1千万，数据的范围是1到10亿。布隆过滤器的做法是，仍然使用一个1亿个二进制大小的位图，然后通过哈希函数，对数字进行处理，让它落在这1到1亿范围内。比如我们把哈希函数设计成f(x)=x%n。其中，x表示数字，n表示位图的大小（1亿），也就是，对数字跟位图的大小进行取模求余。<br><br>但，哈希函数会存在冲突的问题，一亿零一和1两个数字，经过哈希后结果都是1。为了降低这种冲突概率，就用多个哈希函数一起定位一个数据，来降低冲突概率。<br>布隆过滤器的处理办法：<br>使用K个哈希函数，对同一个数字进行哈希值，那会得到K个不同的哈希值，分别记作X1,X2,X3…Xk。我们把这K个数字作为位图中的下标，将对应的BitMap[X1]，BitMap[X2]…..BitMap[Xk]都设置为true，即用K个二进制位，表一个数字的存在。<br><br>\t当我们要查询某个数字是否存在时，用同样的K个哈希函数，对这个数字求哈希值，分别得到Y1,Y2,Y3……Yk。当我们看到这k个哈希值对应的位图中的数值都为true，如果都是true，则说明这个数字存在。其中任意一个不为true，就说明不存在。<br> <br><br>\t然而，使用一个哈希函数处理后的哈希冲突降低了，但是经过k个哈希函数之后，两个数字哈希容易误判。<br> <br>\t但，布隆过滤器的误判有个特点，它只会对存在的情况有误判。如果某个数字经过布隆过滤器判断不存在，那说明这个数字真的不存在，不会发生误判；如果某个数字经过布隆过滤器判断存在，这个时候才有可能误判，有可能不存在。但，只要调整哈希函数的个数，位图大小跟要存储的数字个数之间的比例，就可以将这种误判的概率降到非常低。<br><br>\t尽管，布隆过滤器会存在误判，但是，这并不影响它发挥大作用。很多场景对误判有一定的容忍度，比如要判别是否已爬取过的网页，被误判了也无足轻重。<br><br>\t用布隆过滤器来记录已经爬取过的网页链接，假设要判重的网页10亿，就用一个10倍大小的位图来存储。即100亿个二进制位，换算成字节，大约1.2GB。比较用散列表，需要至少100GB的空间。<br><br>\t布隆过滤器用多个哈希函数对同一个网页链接进行处理，CPU只需要将网页链接从内存中读取一次，进行多次哈希计算，理论上将这组操作是CUP密集型。而在散列表的处理方式中，需要读取散列表冲突的多个网页，分别跟待判重的网页链接，进行字符串匹配。这个操作涉及很多内存数据的读取，所以是内存密集型的。CPU计算要比内存访问更快速。<br><br><br>","like_count":1,"discussions":[{"author":{"id":1547090,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9b/52/cb97162e.jpg","nickname":"Sarai李","note":"","ucode":"F8104FC4639804","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574305,"discussion_content":"跟着大神一路了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653964856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58390,"user_name":"子嘉","can_delete":false,"product_type":"c1","uid":1252422,"ip_address":"","ucode":"CF0DC72E2B6B9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/46/a141c7e6.jpg","comment_is_top":false,"comment_ctime":1547050078,"is_pvip":false,"replies":[{"id":"21057","content":"见我另一个留言","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085585,"ip_address":"","comment_id":58390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5842017374","product_id":100017301,"comment_content":"用位图去存一亿个数 是否存在的下标 但是有个问题 如果是有重复的数值 那就没法存了？ 每一位只能0-1 除非用多位来存储？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436042,"discussion_content":"见我另一个留言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359659,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"浙江","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1665733853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665733853","product_id":100017301,"comment_content":"关于 BloomFilter 更详细的介绍，这里算个 https:&#47;&#47;weread.qq.com&#47;web&#47;reader&#47;632326807192b335632d09ckc20321001cc20ad4d76f5ae<br><br>2.3 节，专门讲这个的。当N取K*|A|&#47;ln2时（其中|A|表示集合A元素个数），能保证最佳的误判率，所谓误判率也就是过滤器判定元素可能在集合中但实际不在集合中的占比。N 表示数组大小，A 表示这个集合，即元素 w 是否一定存在于 A 这个集合中，K 表示多少次哈希算法。","like_count":0},{"had_liked":false,"id":332381,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1643191770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643191770","product_id":100017301,"comment_content":"题目二:<br>一亿张图片 虑重<br>使用位图1亿 位<br>1KB=1024byte=8192位<br>1GB=1024*1024KB<br>8132*1024*1024=8.5亿位<br>就算为了减少误判 扩大一些位图大小 一台服务器也依然能处理了","like_count":0},{"had_liked":false,"id":332369,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1643188564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643188564","product_id":100017301,"comment_content":"有因为没有类型bit 所以通过char来模拟位图bit<br>因为char是2个字节 16bit 一个bit代表0和1<br>所以会用整除16来确定放在第几个char中<br>通过16求余 来确定放在这个char的第几个下标<br>而之所以数组长度要加1 是为了方便存数字<br>你应当把数值1存在数组下标1的位置 直观高效<br>如果放在数组下标0位置<br>var index=1: array[index-1]<br>多了一次减法计算<br><br>get的时候先计算这个数字存在char数组的在哪个下标<br>，也就是16&#47;<br>再计算在该下标char里面的那个bit上 ，也就是%16<br><br>1&lt;&lt;bitindex ，<br>1在二进制中     就是           0000 0000 0000 0001<br>当求余为0 那么就是第一位 0000 0000 0000 0001<br>当求余为1 那就是1左移1位  0000 0000 0000 0010<br>当求余为2 那就是1左移2位 0000 0000 0000 0100<br>通过左移可获取set设置的位置<br><br>get<br>同理","like_count":0},{"had_liked":false,"id":302764,"user_name":"廖成林","can_delete":false,"product_type":"c1","uid":1358798,"ip_address":"","ucode":"CCBC3DED9EBF2A","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/ce/951a0751.jpg","comment_is_top":false,"comment_ctime":1626357281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626357281","product_id":100017301,"comment_content":"第一个问题，如果1亿个数都是重复数字 用set 和map不行的，使用位图的前提是数字不重复 或者重复数字占比少","like_count":0},{"had_liked":false,"id":243536,"user_name":"wind","can_delete":false,"product_type":"c1","uid":1507189,"ip_address":"","ucode":"5EC77AEB18130E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/75/9c1b2ece.jpg","comment_is_top":false,"comment_ctime":1598173759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598173759","product_id":100017301,"comment_content":"跟url作为hashMap的key差不多吧，只是说优化了下hash算法，减少冲突的可能，降低误判率","like_count":0},{"had_liked":false,"id":243307,"user_name":"对白","can_delete":false,"product_type":"c1","uid":1268797,"ip_address":"","ucode":"3183E5ADBC794B","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","comment_is_top":false,"comment_ctime":1598044175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598044175","product_id":100017301,"comment_content":"这节讲的非常好，通俗易懂～","like_count":0},{"had_liked":false,"id":240185,"user_name":"ZSS","can_delete":false,"product_type":"c1","uid":1324758,"ip_address":"","ucode":"56F4D1B0E117E4","user_header":"","comment_is_top":false,"comment_ctime":1596781890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596781890","product_id":100017301,"comment_content":"位图这个概念，在金融软件开发时用到，在组8583交易报文时，交易报文有128个域，就用16个字节的位图表示有没有各个域。","like_count":0},{"had_liked":false,"id":239959,"user_name":"Clement","can_delete":false,"product_type":"c1","uid":1325624,"ip_address":"","ucode":"45BE6D2FDDF6FC","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/38/1e8a1760.jpg","comment_is_top":false,"comment_ctime":1596701502,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596701502","product_id":100017301,"comment_content":"我尝试用bitmap对1亿个手机号（11位）进行排序，发现用vector&lt;bool&gt;.resize(82595525,0)初始化也要构建很久，每个数据都是11位的长度，遇到这种情况有什么比较好处理方法？","like_count":0,"discussions":[{"author":{"id":2419779,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ec/43/0d38ddb3.jpg","nickname":"胡梦龙","note":"","ucode":"E8AE0B96043D5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358293,"discussion_content":"试试用上pool_alloc分配器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615961498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228601,"user_name":"夜涛","can_delete":false,"product_type":"c1","uid":1507783,"ip_address":"","ucode":"672CC53663710B","user_header":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","comment_is_top":false,"comment_ctime":1592748442,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1592748442","product_id":100017301,"comment_content":"突然之间想了解下，数组下标是怎么存储的，和数组值比较哪个更消耗内存","like_count":0,"discussions":[{"author":{"id":2413294,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqfEZles2ojt0PC6Spic4zRRjWvS90KKqjmMib9kNOd6uOPicD6sbQudgs3DSkWQ2lKSickCvUSAsibHpg/132","nickname":"Geek_9ae5e2","note":"","ucode":"AA3FB86E372F6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352936,"discussion_content":"下标应该是偏移量吧,数组是一个连续存储的,下标为1就说明相对第一个偏移了一个单位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614912904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223474,"user_name":"Obed","can_delete":false,"product_type":"c1","uid":1399904,"ip_address":"","ucode":"8717488DD14AB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","comment_is_top":false,"comment_ctime":1591098957,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591098957","product_id":100017301,"comment_content":"不过，这里我们有个假设，就是数字所在的范围不是很大。如果数字的范围很大，比如刚刚那个问题，数字范围不是 1 到 1 亿，而是 1 到 10 亿，那位图的大小就是 10 亿个二进制位，也就是 120MB 的大小，消耗的内存空间，不降反增。 王老师 这里的不降反增是如何理解 和什么方式存储数据比增加了","like_count":0,"discussions":[{"author":{"id":1399976,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/a8/4c6fab31.jpg","nickname":"敖小疯","note":"","ucode":"9EBEA80F7EDB96","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291839,"discussion_content":"与同量级的HashMap作比较","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594968857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222719,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590898533,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590898533","product_id":100017301,"comment_content":"我觉的利用位图去存储数字或者 URL 的想法是比较容易看懂的，但是代码里面为什么要对 bitIndex 做左移 1 位的操作就不太好理解了。<br><br>看了留言，有同学说是因为“char 类型存储数字的时候，只占 1 个字节”，而 Java 中的 char 类型占了 2 个字节，所以模 16 之后又进行了右移一位的操作，相当于模 8 ？<br><br>再一次在留言里面看到了 程序员小灰的漫画算法，可以看一下，帮助理解。","like_count":0},{"had_liked":false,"id":222718,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590898496,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590898496","product_id":100017301,"comment_content":"最短路径，或者说是 Dijkstra 算法，应该算是熟悉的陌生人了。熟悉是因为在大学阶段就曾经学过，陌生是因为我自己没有办法完整的写出来整个算法。<br><br>用于 Dijkstra 算法的数据结构比较容易理解，有向带权图，用 LinkedList 来存储邻接表，每条边都有起点、终点和权值，用 Vertex 数组来存储最短路径，每个 Vertex 顶点都存有有最短距离。<br><br>算法里面比较麻烦的部分应该还是 PriorityQueue 的实现（小顶堆）和根据当时的最短路径不断更新。<br><br>简单的写了一下文中代码“留给读者实现的部分”，也不知道对不对。<br><br>其实 Dijkstra 算法的图示还是比较容易看懂的。如果考虑到最少时间和最少红绿灯，那么就需要改变权重值的算法，其中最少红绿灯是比较容易算的（如果不考虑无红绿灯的路口），而最少时间需要考虑的因素就要多一些，包括红绿灯、限速和拥堵状况等。<br><br>导航 APP 中的算法，应该更加复杂，一方面要定时更新（1分钟？），另一方面还要考虑如果把分流平衡问题。<br><br>总结引申里面提到的翻译系统，算是最短路径算法的一个引申应用，比较开眼界。但是现在的翻译系统似乎又不是这样实现的，更多的依靠机器学习之类的。<br><br>顺着留言去看了 LeetCode 743 Network Delay Time，不过也就是看看而已。","like_count":0},{"had_liked":false,"id":217671,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1589572745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589572745","product_id":100017301,"comment_content":"关于“我们有 1 千万个整数，整数的范围在 1 到 1 亿之间。如何快速查找某个整数是否在这 1 千万个整数中呢？”<br>用Python写了一个Bitmap class，用32位的int类型。然后用Bitmap和Python default data type做了个对比，记录构建1 千万个整数（随机产生random.randint()）的过程：<br>输出如下<br>BitMap spent 0:01:24.844530<br>Current memory usage is 106.484134MB; Peak was 106.484538MB<br>start at 2020-05-15 15:52:56.223910<br>Default datatype spent 0:00:31.742425<br>Current memory usage is 615.543684MB; Peak was 659.90358MB<br><br>总体看来，Bitmap对memory的降低很明显，但是用时也相对较长","like_count":0},{"had_liked":false,"id":215007,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1588867869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588867869","product_id":100017301,"comment_content":"文章中“比如我们今天要解决的爬虫判重这个问题，即便一个没有被爬取过的网页，被误判为已经被爬取，对于搜索引擎来说，也并不是什么大事情，是可以容忍的，毕竟网页太多了，搜索引擎也不可能 100% 都爬取到。“ 没有爬取的网页","like_count":0},{"had_liked":false,"id":212479,"user_name":"MarDino","can_delete":false,"product_type":"c1","uid":1435900,"ip_address":"","ucode":"4A70C1B476F7E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/fc/c26b6207.jpg","comment_is_top":false,"comment_ctime":1588130908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588130908","product_id":100017301,"comment_content":"学习到了，拿二进制位标记真的很妙，之前刷力扣也遇到几个用bitmap题一直很懵，今天开悟了","like_count":0},{"had_liked":false,"id":206868,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586947081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586947081","product_id":100017301,"comment_content":"布隆过滤器能不能用在抢购的时候判重的场景？如果判断已经抢购过了，那就直接一个提交到一个单独的提交到一个消息队列中，然后进行，单独进行check then order。如果发现没有处理过，那么就提交到另一个队列中，进行处理，不过这个队列处理的线程更多，处理更快。","like_count":0},{"had_liked":false,"id":203505,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586222900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586222900","product_id":100017301,"comment_content":"public class BitMap { &#47;&#47; Java中char类型占16bit，也即是2个字节<br>\tprivate char[] bytes;<br>\tprivate int nbits;<br><br>\tpublic BitMap(int nbits) {<br>\t\tthis.nbits = nbits;<br>\t\tthis.bytes = new char[nbits &#47;16 + 1];<br>\t}<br><br>\tpublic void set(int k) {<br>\t\tif (k &gt; nbits) return;<br>\t\tint byteIndex = k &gt;&gt;&gt; 4;<br>\t\tint bitIndex = k  &amp; 15;<br>\t\tbytes[byteIndex] |= (1 &lt;&lt; bitIndex);<br>\t}<br><br>\tpublic boolean get(int k) {<br>\t\tif (k &gt; nbits) return false;<br>\t\tint byteIndex = k &gt;&gt;&gt; 4;<br>\t\tint bitIndex = k &amp; 15;<br>\t\treturn (bytes[byteIndex] &amp; (1 &lt;&lt; bitIndex)) != 0;<br>\t}<br>}<br><br>老师我根据位运算，把取余操作和除法的操作的效率提高一丢丢。。。","like_count":0},{"had_liked":false,"id":203456,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586212616,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586212616","product_id":100017301,"comment_content":"我们申请一个大小为 1 亿、数据类型为布尔类型（true 或者 false）的数组。我们将这 1 千万个整数作为数组下标，将对应的数组值设置成 true。比如，整数 5 对应下标为 5 的数组值设置为 true，也就是 array[5]=true。<br>------------------------<br>这个不是有错啊。。。。。。。。。。。。。。。。。。大小为一亿，下面怎么变成一千万了。","like_count":0,"discussions":[{"author":{"id":1611025,"avatar":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","nickname":"沈康","note":"","ucode":"02AFA50738AB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313275,"discussion_content":"这个疑惑我也有过，只需要理解为一个bit位表示一个数字，数字的范围就是bit数组的长度\n如果范围是1~1亿，\n那么bit数组的长度就应该为1亿，\n那么char数组的长度应该为1亿/16\n那么byte数组的长度应该为1亿/8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603023781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202036,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585890965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585890965","product_id":100017301,"comment_content":"用位图，整数代表位图下标。对于相同整数可以用链表。链表中保存数据的引用","like_count":0},{"had_liked":false,"id":183134,"user_name":"梨还羽","can_delete":false,"product_type":"c1","uid":1243267,"ip_address":"","ucode":"F6C89EF10DFC89","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/83/008b7b58.jpg","comment_is_top":false,"comment_ctime":1582958535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582958535","product_id":100017301,"comment_content":"计算uv这类的基数统计使用redis的HyperLogLog会更好些","like_count":0},{"had_liked":false,"id":169415,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1578338482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578338482","product_id":100017301,"comment_content":"第一题：我们可以使用基数排序的方法，此时只需要一倍的额外空间，就是400M，时间复杂度是O(n)","like_count":0},{"had_liked":false,"id":169086,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1578272016,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1578272016","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":168288,"user_name":"Panda🐟","can_delete":false,"product_type":"c1","uid":1002401,"ip_address":"","ucode":"C6007A3192516A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/a1/c2719a5a.jpg","comment_is_top":false,"comment_ctime":1578041759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578041759","product_id":100017301,"comment_content":"思考1，现将1一个数映射到一个位图中，然后用遍历1~10亿判断这个数是不是存在。","like_count":0},{"had_liked":false,"id":165858,"user_name":"crossing","can_delete":false,"product_type":"c1","uid":1689380,"ip_address":"","ucode":"3B66CFFF38BA67","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","comment_is_top":false,"comment_ctime":1577334599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577334599","product_id":100017301,"comment_content":"布隆过滤器<br>假的一定是假的，真的有可能为真的。<br>真的大部分为真的，少部分为假的。","like_count":0},{"had_liked":false,"id":163558,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1576744176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576744176","product_id":100017301,"comment_content":"“我们用布隆过滤器来记录已经爬取过的网页链接，假设需要判重的网页有 10 亿，那我们可以用一个 10 倍大小的位图来存储，也就是 100 亿个二进制位，换算成字节，那就是大约 1.2GB。”<br>em。。<br>这个10倍大小如何而来的？？？<br><br>URL 是平均长度为64字节的字符串，那理论上来说，数据的范围是 64x8 = 512位<br>这原始的数据范围就是 2^512 太大了。。用位图的原始方法是没法搞；<br>布隆过滤器 是可以通过 哈希函数限制范围，多个哈希函数计算 增大精度；<br><br>但是 这容器的数据范围 怎么估算的。。。随口举例吗。。<br><br>","like_count":0},{"had_liked":false,"id":140654,"user_name":"张凯宇","can_delete":false,"product_type":"c1","uid":1339343,"ip_address":"","ucode":"F172E2B1F10B6C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/cf/accb66e5.jpg","comment_is_top":false,"comment_ctime":1571021666,"is_pvip":false,"replies":[{"id":"54534","content":"是的，你说的没错。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571094922,"ip_address":"","comment_id":140654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571021666","product_id":100017301,"comment_content":"第二题用散列表和哈希函数的方法时，存了图片的地址，先哈希值比再全量比，如果允许错判，那当前的方案是不是也可以不存储地址了，只比哈希值","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470496,"discussion_content":"是的，你说的没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571094922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137381,"user_name":"Qualifor","can_delete":false,"product_type":"c1","uid":1658706,"ip_address":"","ucode":"8F42453286719C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJeQVzYNLVuOv8IuxydsXuVXEUoqLmN0vpkiceZuU26KPOt05xuxCSnsbkgBu4q9qmibRfTOvCiaPGJg/132","comment_is_top":false,"comment_ctime":1569726890,"is_pvip":false,"replies":[{"id":"53772","content":"跟文章中你摘抄出来的文字的前面一段话给出的存储方式比较","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570661430,"ip_address":"","comment_id":137381,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1569726890","product_id":100017301,"comment_content":"老师我想请问下，在说如果数字范围是1-10亿的时候，需要10亿个二进制位，占用120M内存，”占用的内存不降反增“，这个不降反增是跟谁作比较呢？如果还是存储整数类型，肯定还是位比较省空间呀，而如果跟1亿做比较，肯定是10亿占用空间大啊，因为基数不一样嘛，所以不是很理解在这里突出”不降反增“是什么意思","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469061,"discussion_content":"跟文章中你摘抄出来的文字的前面一段话给出的存储方式比较","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570661430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246068,"avatar":"https://static001.geekbang.org/account/avatar/00/13/03/74/5827062b.jpg","nickname":"叮叮叮叮叮叮","note":"","ucode":"9B12DC888611D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76907,"discussion_content":"如果这1千万的数据的值在1-10亿的范围，那用位图存储要120M，用散列表存储1千万个int也才40M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575866538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136978,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1569570022,"is_pvip":false,"replies":[{"id":"52762","content":"你自己举个例子看看，直接异或不对的啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569710184,"ip_address":"","comment_id":136978,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1569570022","product_id":100017301,"comment_content":"bytes[byteIndex] |= (1 &lt;&lt; bitIndex);<br>老师，这段比较的时候，直接与bitIndex进行疑惑不就可以了么，为何要向左移一位呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468890,"discussion_content":"你自己举个例子看看，直接异或不对的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569710184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1972505,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","nickname":"李润东","note":"","ucode":"65CFEA3C8B27C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267127,"discussion_content":"是1向左移动bitindex位啊...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589605101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135368,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1569139778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569139778","product_id":100017301,"comment_content":"1 使用位图，时间复杂度o(N),空间复杂度需要大概125M内存<br>2 可以的","like_count":0},{"had_liked":false,"id":130421,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1567462405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567462405","product_id":100017301,"comment_content":"感觉布隆过滤器里边的数组类似动态规划里边的状态表","like_count":0},{"had_liked":false,"id":121853,"user_name":"拉环","can_delete":false,"product_type":"c1","uid":1247277,"ip_address":"","ucode":"5F81F2746CEF61","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/2d/fb0831a9.jpg","comment_is_top":false,"comment_ctime":1565234828,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565234828","product_id":100017301,"comment_content":"位图的那个如果是java之类的语言 想设置某个位置为false 有办法吗","like_count":0,"discussions":[{"author":{"id":1012009,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/71/29/abb7bfe3.jpg","nickname":"Zoe","note":"","ucode":"62E611190A4742","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16952,"discussion_content":"看一下Jdk 的bitset ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568937168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121746,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565215232,"is_pvip":false,"replies":[{"id":"44738","content":"一般都不做删除操作。如果非得做，可以用另一个结构来记录删除的数据。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565220118,"ip_address":"","comment_id":121746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565215232","product_id":100017301,"comment_content":"请问老师，布隆过滤器如何修改才能支持高效删除操作。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461929,"discussion_content":"一般都不做删除操作。如果非得做，可以用另一个结构来记录删除的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565220118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120614,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1564955525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564955525","product_id":100017301,"comment_content":"思考题2<br>一亿张图片的位图大概10亿bit，也就1.3G字节，可以存到一台机器上解决.","like_count":0},{"had_liked":false,"id":119680,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1564651348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564651348","product_id":100017301,"comment_content":"思考题1<br>可以用布隆过滤器构建查询表，例如用10亿bit的位图来存储，大概耗费0.13G内存，然后遍历1到10亿，复杂度O(n)。这个方法有两个缺点：<br>1.布隆过滤器会有少量错误，也就是少量不在表中的数据也会被加入.<br>2.重复的数只被输出一次，次数的信息丢失了。","like_count":0},{"had_liked":false,"id":112491,"user_name":"cjxz","can_delete":false,"product_type":"c1","uid":1588610,"ip_address":"","ucode":"9735F51D4721E9","user_header":"","comment_is_top":false,"comment_ctime":1562745861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562745861","product_id":100017301,"comment_content":"第一题：<br>1.创建一个10亿大小的位图，占用内存119MB<br>2.遍历这1亿个数组，用上面的位图下标作为数组，存储位1表示存在，0表示不存在<br>3.遍历这个10亿的位图，如果为1表示存在输入下标即可。<br>问题：这1亿个整数不能重复，重复没办法二次输出","like_count":0},{"had_liked":false,"id":104991,"user_name":"小予","can_delete":false,"product_type":"c1","uid":1442580,"ip_address":"","ucode":"3F5EAEE1746074","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/14/e9ca2d09.jpg","comment_is_top":false,"comment_ctime":1560903607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560903607","product_id":100017301,"comment_content":"第一题，考虑到数字有重复的情况，个人觉得用桶排序是更好的做法，时间复杂度也是O(n) ","like_count":0},{"had_liked":false,"id":89866,"user_name":"不去彼岸","can_delete":false,"product_type":"c1","uid":1210257,"ip_address":"","ucode":"9F5542CE7AA371","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/91/73429bdd.jpg","comment_is_top":false,"comment_ctime":1556288708,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556288708","product_id":100017301,"comment_content":"第一题可以理解为计数排序和位图的结合","like_count":0},{"had_liked":false,"id":85612,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1555143039,"is_pvip":false,"replies":[{"id":"30980","content":"不 位图是一种索引结构 对象本事存储在另外的地方  我们在计算位图大小的时候不会把对象本事占用的内存大小算进去的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555372734,"ip_address":"","comment_id":85612,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555143039","product_id":100017301,"comment_content":"王老师，看了您定义的BitMap数据结构，该结构的类有两个私有成员变量，其中一个变量的类型是int，int在java中是用4个字节的内存空间来存储吧？所以每个位图对象应该至少占了2个字节+4个字节的内存空间吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446736,"discussion_content":"不 位图是一种索引结构 对象本事存储在另外的地方  我们在计算位图大小的时候不会把对象本事占用的内存大小算进去的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555372734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81256,"user_name":"Flash","can_delete":false,"product_type":"c1","uid":1236163,"ip_address":"","ucode":"E285075C9E0B02","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","comment_is_top":false,"comment_ctime":1553842683,"is_pvip":false,"replies":[{"id":"29627","content":"先通过哈希函数计算哈希值","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554031213,"ip_address":"","comment_id":81256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553842683","product_id":100017301,"comment_content":"争哥，int类型数据存bitmap可以这么位运算，那String类型的是怎么位运算的呢？Java里面也只有&quot;123&quot;这样的字符串可以转成int呀。布隆过滤器对url这种字符串是怎么位运算的，或者说怎么转成int类型呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445133,"discussion_content":"先通过哈希函数计算哈希值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554031213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74407,"user_name":"我的名字叫胡子","can_delete":false,"product_type":"c1","uid":1337810,"ip_address":"","ucode":"662EF1E3E0638F","user_header":"https://static001.geekbang.org/account/avatar/00/14/69/d2/78775848.jpg","comment_is_top":false,"comment_ctime":1552218796,"is_pvip":false,"replies":[{"id":"27375","content":"左移一位？代码表达的不是这个意思啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552358314,"ip_address":"","comment_id":74407,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552218796","product_id":100017301,"comment_content":"如果k%16取模等于15，二进制表示就是0b0000 0000 0000 1111，左移1位然后按位或也不能改变第16位的呀。如果要改变第16位，不应该是和十进制2^15按位或吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442563,"discussion_content":"左移一位？代码表达的不是这个意思啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552358314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69303,"user_name":"东宇","can_delete":false,"product_type":"c1","uid":1118347,"ip_address":"","ucode":"2F0A8C67D55B5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/8b/7e84507c.jpg","comment_is_top":false,"comment_ctime":1550714313,"is_pvip":false,"replies":[{"id":"24641","content":"1G=1024*1024*1024=10亿啊<br>","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550728370,"ip_address":"","comment_id":69303,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550714313","product_id":100017301,"comment_content":"10亿网页判重那个例子，老师我怎么算的是12GB呢<br>1024*1024*1024 约等于 1亿<br>1024*1024*1024*100 约等于 100亿<br>1024*1024*1024*100&#47;8&#47;1024&#47;1024&#47;1024 = 12GB 哪里有问题？ 求教！！！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440050,"discussion_content":"1G=1024*1024*1024=10亿啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550728370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64591,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1548830986,"is_pvip":false,"replies":[{"id":"24639","content":"也可以用byte","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550728203,"ip_address":"","comment_id":64591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548830986","product_id":100017301,"comment_content":"为什么代码用char不用byte呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438088,"discussion_content":"也可以用byte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550728203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63693,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1548466856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548466856","product_id":100017301,"comment_content":"今天的位图其实最核心的内容是二进制+散列表。将普通的散列表转化为二进制的形式方便存储。<br>课后的思考题也是一样，可以使用位图的方式，如果数据过多，可以使用分治的方式，使用多机器进行。之后如果数据中存在该数，则将对应的下标赋值为true。之后从小到大提取所有值为true的即可。","like_count":0},{"had_liked":false,"id":63548,"user_name":"东东","can_delete":false,"product_type":"c1","uid":1247437,"ip_address":"","ucode":"DBA46D67DD4605","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/cd/ff5d4d46.jpg","comment_is_top":false,"comment_ctime":1548397792,"is_pvip":false,"replies":[{"id":"22467","content":"java是2个字节的。不同编程语言字符占的字节数不大一样的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1548403791,"ip_address":"","comment_id":63548,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548397792","product_id":100017301,"comment_content":"有位sprak同学说：原来char类型存储数字的时候，只占1个字节，也就是8位。表示不能理解，Character中 public static final char MAX_VALUE = &#39;\\uFFFF&#39;; 应该是16个bit啊，百度一下基本都是说char是2个字节，好困惑啊，希望老师帮忙解答一下，","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437628,"discussion_content":"java是2个字节的。不同编程语言字符占的字节数不大一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548403791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62733,"user_name":"不惑ing","can_delete":false,"product_type":"c1","uid":1207079,"ip_address":"","ucode":"AF04E417D38027","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/27/8c964e52.jpg","comment_is_top":false,"comment_ctime":1548145426,"is_pvip":false,"replies":[{"id":"24182","content":"10倍可以的。具体还要看内存消耗和判错容忍性。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550480158,"ip_address":"","comment_id":62733,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548145426","product_id":100017301,"comment_content":"位图大小和数据大小的比例有推荐设置么？一般都是10倍么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437328,"discussion_content":"10倍可以的。具体还要看内存消耗和判错容忍性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550480158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62217,"user_name":"千千","can_delete":false,"product_type":"c1","uid":1235629,"ip_address":"","ucode":"B8747438897E7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ad/c9a943b4.jpg","comment_is_top":false,"comment_ctime":1547986048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547986048","product_id":100017301,"comment_content":"位图的设计实属精妙，极大的减少了所需分配的空间，在位图的代码中选用的是char作为单位来存储数据，而一个char字符在java中占一个字节也就是8位的空间，而这8位可对应为8个数据，也就是说开辟的bytes数组大小可减小到原来的1&#47;8。既然可以char字符才存储数据，那么是不是也能用int、long呢?对应的数组空间便可减小到原来的1&#47;32、1&#47;64，但是如果这样做，对应的取模和相除操作便会增加运算时间，这何尝又不是用空间来换取时间呢。","like_count":0},{"had_liked":false,"id":61526,"user_name":"orcababyface","can_delete":false,"product_type":"c1","uid":1217755,"ip_address":"","ucode":"FF7660EBF4ABB1","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/db/f5844528.jpg","comment_is_top":false,"comment_ctime":1547714061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547714061","product_id":100017301,"comment_content":"王老师，对于您写的BitMap我有几个问题请教一下:<br>0 Java的char数据类型占16位，是不是把代码中的8都改成16更合适？<br>1 set方法我觉得是不是能够set为true或flase，您写的set就是只set为true。<br>2 11行和18行if内是不是应该为k &gt; nbits-1 更合适?<br>","like_count":0},{"had_liked":false,"id":59374,"user_name":"一修💤","can_delete":false,"product_type":"c1","uid":1014211,"ip_address":"","ucode":"CE3CB2E9A67DB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/c3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1547359257,"is_pvip":false,"replies":[{"id":"21477","content":"应该是判定为存在的 不一定存在  你理解错了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547431673,"ip_address":"","comment_id":59374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547359257","product_id":100017301,"comment_content":"老师 对于这段话我的理解不是这样。比如我们今天要解决的爬虫判重这个问题，即便一个没有被爬取过的网页，被误判为已经被爬取，对于搜索引擎来说，也并不是什么大事情，是可以容忍的，毕竟网页太多了，搜索引擎也不可能 100% 都爬取到。 实际上布隆过滤器的特点是不存在位图中的一定不会判错。所以结果是对于已经看爬过的网页可能判断为没爬过，这样多爬一次不过是浪费点带宽 而漏爬似乎有点不太好？不知道理解对不对","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436330,"discussion_content":"应该是判定为存在的 不一定存在  你理解错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547431673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59357,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547356232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547356232","product_id":100017301,"comment_content":"哦不好意思，bitmap那里没问题了，我把 &lt;&lt; 这个操作符的左右看颠倒了。有疑问的朋友可以搜索一下Java 里 bit manipulation","like_count":0},{"had_liked":false,"id":59352,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547355982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547355982","product_id":100017301,"comment_content":"bitmap那里，如果以nbits为31的bitmap来说。set(31) : byte[3] = 00001110. 然后如果我查找 get(30): return 00001110 &amp; 00001100 = 00001100 !=0, return true, 就不对了呀？可否解释一下，谢谢！<br>","like_count":0},{"had_liked":false,"id":59342,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547353671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547353671","product_id":100017301,"comment_content":"老师，你提到100gb的内存要求就要用分布式了，但是我在网上搜到很多服务器的内存甚至可以达到tb级别，只有pc的内存才至多16gb，请问您了解的一般的服务器的内存是多少呢？","like_count":0},{"had_liked":false,"id":59025,"user_name":"likun","can_delete":false,"product_type":"c1","uid":1030816,"ip_address":"","ucode":"9145ED059CCC6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg","comment_is_top":false,"comment_ctime":1547276789,"is_pvip":false,"replies":[{"id":"21864","content":"嗯嗯 我改下，我跟c&#47;c++搞混了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547710279,"ip_address":"","comment_id":59025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547276789","product_id":100017301,"comment_content":"char类型是两个字节 应该除以16吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436273,"discussion_content":"嗯嗯 我改下，我跟c/c++搞混了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547710279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58443,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1547083860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547083860","product_id":100017301,"comment_content":"谁能帮忙解答一下 第二题 我感觉一台计算机4gb的内存大概3.44e10 个二进制位 一张图片假设30kb的话 1亿张就是2.457e13个位 而且为了降低误判率 布隆过滤器还要维护一个阈值 这样内存会消耗得更多一点  如果内存更大的电脑应该一台就够了 一般要存储应该1-2台","like_count":0},{"had_liked":false,"id":58373,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1547046451,"is_pvip":true,"replies":[{"id":"21058","content":"10倍是为了减少误判","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085632,"ip_address":"","comment_id":58373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547046451","product_id":100017301,"comment_content":"没太明白爬虫网页链接这个例子去重为什么要用10倍大小的位图，按照同样的思路，图片size：1亿张，布隆算法算法的内存空间为10亿bit=1.16gb，假设一个机器内存空间为2gb，那么只需要2&#47;1.16约等于1台机器。刚才算错了，少除了8。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436033,"discussion_content":"10倍是为了减少误判","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58367,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1547045749,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547045749","product_id":100017301,"comment_content":"没太明白爬虫网页链接这个例子去重为什么要用10倍大小的位图，按照同样的思路，思考题2图片size：1亿张，布隆算法算法的内存空间为10亿bit，假设一个机器内存空间为2gb，那么只需要5台机器。","like_count":0},{"had_liked":false,"id":58326,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1547037260,"is_pvip":false,"replies":[{"id":"21060","content":"你自己算下 百万等于M。 一个字节等于8个二进制位。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085750,"ip_address":"","comment_id":58326,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1547037260","product_id":100017301,"comment_content":"1亿二进制位是12M是怎么算出来的，按照算法不是1000M？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436011,"discussion_content":"你自己算下 百万等于M。 一个字节等于8个二进制位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028343,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b0/f7/228a6c37.jpg","nickname":"江湖上","note":"","ucode":"E10516C681EF23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303070,"discussion_content":"100000000/8/1024/1024","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599128120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58300,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1547029324,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547029324","product_id":100017301,"comment_content":"散列表太大可以用位图索引，节省内存空间。散列表要用额外空间应对散列冲突，那就不解决散列冲突，通过一组散列函数多次计算降低冲突概率。但是依然会存在“假存在”的误判，误判概率会随着位图中true位增多而上升。于是需要挑选对散列冲突容忍度高的场景应用。","like_count":0},{"had_liked":false,"id":58244,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1547017210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547017210","product_id":100017301,"comment_content":"思考题2 一个机器就够了？","like_count":0},{"had_liked":false,"id":58082,"user_name":"Geek_41dcba","can_delete":false,"product_type":"c1","uid":1089626,"ip_address":"","ucode":"22F9180FBD74F5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wjK0unDiaUMZYGsl43dovmLWZS6WvDzpespydKfOQHDU55QPZQZvfKKYk4ZaITibGc3wwC3vqTTudWficcPhEia0Xw/132","comment_is_top":false,"comment_ctime":1546994655,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546994655","product_id":100017301,"comment_content":"使用位图对10亿整数排序，依次读取每一个数，这个数就对应位图的下标，将下标对应的位标记为1。  然后遍历位图，凡事标记为1的就输出对应的下标值。<br>时间复杂的是导入位图的O(1)加上输出的位图遍历O(1)。  位图是连续内存cpu的亲和性更好，效率会很快。<br>但这有一个问题，把重复的数消除了，可以辅助一个散列表，但内存又上去了？<br>","like_count":0},{"had_liked":false,"id":58032,"user_name":"小苏饼","can_delete":false,"product_type":"c1","uid":1247539,"ip_address":"","ucode":"80868F7477E2BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/33/57757a23.jpg","comment_is_top":false,"comment_ctime":1546964005,"is_pvip":false,"replies":[{"id":"20926","content":"不需要持久化的 爬取一个网页后 就把对应的链接加到不拢过滤器","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546999846,"ip_address":"","comment_id":58032,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1546964005","product_id":100017301,"comment_content":"这些url要不要持久化到数据库呀<br>是要先从数据库里读取在用布隆过滤器吗？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435875,"discussion_content":"不需要持久化的 爬取一个网页后 就把对应的链接加到不拢过滤器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546999846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088791,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9d/17/650175f3.jpg","nickname":"🐶 🐶","note":"","ucode":"DE17745439D4CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86720,"discussion_content":"怎么从网页地址映射到布隆过滤器数组下标？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576599842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1332244,"avatar":"https://static001.geekbang.org/account/avatar/00/14/54/14/84d49453.jpg","nickname":"杜鑫","note":"","ucode":"D7651198B2C487","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088791,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9d/17/650175f3.jpg","nickname":"🐶 🐶","note":"","ucode":"DE17745439D4CE","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":245464,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587659178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86720,"ip_address":""},"score":245464,"extra":""}]},{"author":{"id":1028343,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b0/f7/228a6c37.jpg","nickname":"江湖上","note":"","ucode":"E10516C681EF23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303069,"discussion_content":"针对没每一个url，执行hash算法，然后获数组中对应的位置的值；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599127996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}