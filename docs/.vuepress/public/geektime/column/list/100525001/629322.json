{"id":629322,"title":"03｜测试落地：三招提高遗留系统代码的可测试性","content":"<p>你好，我是黄俊彬。</p><p>上节课我们介绍了开发新特性时需要用到的小、中、大型自动化测试实践，也认识到了自动化测试的重要性。自动化测试不仅可以帮我们提高效率，还可以提高软件的质量。</p><p>但是，当我们面临一个没有任何自动化测试的遗留系统时，该如何落地自动化测试呢？这里面有一个绕不开的问题，就是如何提高遗留系统代码的可测试性？</p><p>我想这些场景你应该不陌生。</p><ul>\n<li>代码将所有的逻辑都堆砌在一个方法内部，很难模拟测试数据进行测试。</li>\n<li>系统直接依赖外部的服务，测试执行耗时长、不稳定。</li>\n<li>陷入“代码不可测就不写测试，然后不写测试又加剧代码不可测”的循环之中。</li>\n<li>……</li>\n</ul><p>这也是为什么我们说遗留系统可测试性低的原因。对于这些场景，我们很难按照上节课介绍的方法直接覆盖中小型自动化测试，所以这个时候我们要先用一些特殊的招式来解决代码不可测的问题。</p><p>结合这个思路，今天我将给你分享解决遗留系统代码不可测的三个大招。</p><h2>第一招：暴露接缝，“水到渠成”</h2><p>在<a href=\"https://book.douban.com/subject/2248759/\">《修改代码的艺术》</a>一书中提到了“接缝”的概念。<strong>接缝是指在不修改代码的条件下，可以改变代码行为的地方。</strong>那么这个接缝和代码可测性又有什么关系呢？通常，设计一个测试用例需要三个关键步骤。</p><ul>\n<li>第一步，准备测试数据。</li>\n<li>第二步，触发被测试的方法或行为。</li>\n<li>第三步，断言程序执行的结果和用例设计预期是否一致。</li>\n</ul><!-- [[[read_end]]] --><p>可以看出，这其中的前置条件就是，要将准备好的测试数据设置到被测试的方法或行为中。<strong>如果原来的软件中没有任何接缝可以让你设置数据，或者设置这些数据的成本非常高，那么我们就说代码的可测性低，这个时候编写自动化测试的难度会很高。</strong></p><p>你是不是感觉有点抽象？下面我通过一段代码再给你具体讲一讲。上节课，我们为登陆示例编写了不同范围的自动化测试，现在我们继续沿用这个示例。不过我会将代码调整为遗留系统最初的样子，但不会破坏原有的代码逻辑，代码是后面这样。</p><pre><code class=\"language-plain\">public class LoginActivity extends AppCompatActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n        final EditText usernameEditText = findViewById(R.id.username);\n        final EditText passwordEditText = findViewById(R.id.password);\n        final Button loginButton = findViewById(R.id.login);\n        loginButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                boolean isLoginSuccess = false;\n                String username = usernameEditText.getText().toString();\n                String password = passwordEditText.getText().toString();\n                boolean isUserNameValid;\n                if (username == null) {\n                    isUserNameValid = false;\n                } else {\n                    Pattern pattern = Pattern.compile(\"\\\\w+([-+.]\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w+([-.]\\\\w+)*\");\n                    Matcher matcher = pattern.matcher(username);\n                    if (username.contains(\"@\")) {\n                        isUserNameValid = matcher.matches();\n                    } else {\n                        isUserNameValid = !username.trim().isEmpty();\n                    }\n                }\n                if (!isUserNameValid || !(password != null &amp;&amp; password.trim().length() &gt; 5)) {\n                    isLoginSuccess = false;\n                } else {\n                    //通过服务器判断账户及密码的有效性\n                    if (username.equals(\"123@163.com\") &amp;&amp; password.equals(\"123456\")) {\n                        //登录成功后保存用户信息到本地\n                        SharedPreferencesUtils.put(LoginActivity.this, username, password);\n                        isLoginSuccess = true;\n                    }\n                }\n                if (isLoginSuccess) {\n                    //登录成功跳转主界面\n                    startActivity(new Intent(LoginActivity.this, MainActivity.class));\n                } else {\n                    //登录失败进行提示\n                    Toast.makeText(LoginActivity.this, \"login failed\", Toast.LENGTH_LONG).show();\n                }\n            }\n        });\n    }\n}\n</code></pre><p>你看，这个代码将所有的逻辑都堆砌在一个方法内部了，我们上节课覆盖小型测试的账户密码校验逻辑也被淹没在了这个大方法中。那么请你想一想：这段代码的接缝是什么呢？有哪些地方可以在不修改代码的条件下，改变代码行为呢？</p><p>答案是可以通过模拟UI上的操作，输入不同的账户密码来验证代码的不同行为。但因为UI的操作需要依赖设备并且执行时间也很长，所以我们认为此时的测试成本是比较高的，代码的可测性也比较差。</p><p>那怎么解决这个问题呢？很简单，就是通过暴露更多的接缝，提高代码的可测性，让编写测试的成本更低。我们再看看上节课关于账户密码的校验逻辑代码，你再思考一下，这段代码的接缝又是什么呢？</p><pre><code class=\"language-plain\"> private boolean isUserNameValid(String username) {\n        if (username == null) {\n            return false;\n        }\n        if (username.contains(\"@\")) {\n            return Patterns.EMAIL_ADDRESS.matcher(username).matches();\n        } else {\n            return !username.trim().isEmpty();\n        }\n  }\n  private boolean isPasswordValid(String password) {\n        return password != null &amp;&amp; password.trim().length() &gt; 5;\n  }\n</code></pre><p>我们可以看到，这些逻辑都被抽取到了独立的类和方法中，并且提供了参数类型的接缝，让我们可以设置不同的测试数据来验证代码的行为。</p><p>除了上述例子中展示的情况外，还有一些开发中常见的暴露接缝的形式。</p><p><img src=\"https://static001.geekbang.org/resource/image/85/9c/85d8931b2823d8375b8a635fecb3e39c.jpg?wh=2756x1454\" alt=\"\"></p><p>总之，通过暴露接缝，可以让测试代码更加方便地设置不同的测试数据来验证代码的行为，从而提高代码的可测试性。</p><h2>第二招：测试替身，“以假乱真”</h2><p>在实际的移动应用的开发中，我们经常需要访问远端的服务器获取数据、持久化数据，有时候还需要依赖第三方的服务。</p><p>这些行为的特点就是具有不稳定性和时效性，例如，服务随时都可能不可用或者出现异常，这非常容易导致测试失败。另外，对于一些动态的信息展示，由于数据的随机性，测试很难写具体的断言。</p><p>所以，我们有时候需要权衡测试的保真度和维护成本。如果测试依赖网络通信，就意味着它具有更高的保真度。但是测试可能需要更长的运行时间，一旦网络出现故障，还可能会导致错误。遇到这种情况，我们除了可以选择重构解除具体的依赖外，还可以选择一种成本更低的方式，那就是使用测试替身。</p><p>顾名思义，<strong>测试替身就是替换被测系统的依赖的等价实现</strong>，常见的测试替身方式有6种。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/ce/ba643648b2e51c92e1c5ef0yy34054ce.jpg?wh=2663x1745\" alt=\"\"></p><p>我还是以登录为例，演示一下怎么使用测试替身。假如现在登录走的是网络的请求，代码是后面这样。</p><pre><code class=\"language-plain\">interface LoginService {\n  @GET(\"/login\")\n  Observable&lt;User&gt; login(String username，String password);\n}\nRetrofit retrofit = new Retrofit.Builder()\n    // 服务可能挂掉，或者还没实现，或者网络延时、中断\n    .baseUrl(\"https://xxx.com/\")\n    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n    .build();\n    \nLoginService myService = retrofit.create(LoginService.class)\nmyService.login()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(user -&gt; view.load(user));\n</code></pre><p>这段代码的主要问题是依赖了远端的服务，运行具有不稳定性，例如服务可能挂掉、网络延时或者中断。对此，有两种常用的测试替身方式可以提高测试的稳定性：一种是使用Mock+Stub，另一种是用Fake完整模拟一个远端的假服务。</p><p><strong>1. Mock+Stub 应用示例</strong></p><p>这种方式是用Mockito框架来Mock一个LoginService的假实现，然后进行Stub。当触发login方法时，返回预期的测试数据。</p><pre><code class=\"language-plain\">LoginService loginService = Mockito.mock(LoginService.class);\nMockito.when(loginService.login(anyString(),anyString())).thenReturn(Observable.from(new User()));\n</code></pre><p><strong>2. Fake应用示例</strong></p><p>我们还可以在本地Fake一个假的服务，当请求的是设置好的url时，就返回预先设置好的数据。</p><pre><code class=\"language-plain\">MockWebServer mockWebServer = new MockWebServer();\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(mockWebServer.url(\"/\"))\n    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n    .build();\nLoginService myService = retrofit.create(LoginService.class)\n\n//读取本地文件模拟“假”的 Response\nMockResponse response = new MockResponse()\n        .setResponseCode(HttpURLConnection.HTTP_OK)\n        .setBody(readContentFromFilePath());\nmockWebServer.enqueue(response);\n</code></pre><p>总体来说，测试替身可以替换被测系统的依赖，它是一种成本更低的方式。<strong>通过使用测试替身技术可以隔离被测试代码、加速测试执行、确定执行变更、模拟特殊情况，从而让测试代码覆盖得更全、执行得更加高效稳定。</strong></p><h2>第三招：测试策略，“轻重缓急”</h2><p>上节课，我们演示了如何编写小、中、大型的自动化测试，你应该可以发现，从小到大的自动化测试执行所需要的时间越来越长，但是测试会越来越贴近用户的使用场景。</p><p>如下图所示，沿着金字塔逐级向上，从小型测试到大型测试，各类测试的保真度逐级提高，但维护和调试工作所需的执行时间和工作量也逐级增加。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/cb/75f59fa3eededf6f1af7d5e0e8784bcb.jpg?wh=1990x1162\" alt=\"\" title=\"图片来自 Google 官网\"></p><p>在开发者官网中，谷歌针对应用开发的测试策略给出的建议是：小型测试占比70%，中型测试占比20%，大型测试占比10%。</p><p>这对于新开发的应用来说是一个非常好的策略，但对遗留系统来说，由于没有覆盖任何类型的自动化测试，并且代码的可测试性比较低，一开始很难按照这个策略覆盖70%的小型测试。如果我们要提高代码可测性，就意味着要进行代码重构。那么问题来了，如何来保障重构的安全性呢？</p><p>答案是<strong>针对遗留系统，首先考虑覆盖中大型的测试，然后进行代码重构；重构完成后再及时补充中小型的测试；</strong>最后逐步将自动化测试的比例演化为金字塔模型比例。</p><p>以开头那个遗留系统的登录界面为例，我们的测试策略应该是这样的：首先把覆盖大型的UI测试作为重构的安全防护网。注意，这个时候因为测试都是针对UI元素的操作，所以并不需要关注代码里的具体实现逻辑，这样能有效降低重构后重新对用例的调整频率。当重构完成，拆分出了独立的LoginLogic等逻辑后，我们再继续补充核心的login方法和账户密码的校验逻辑。</p><h2>总结</h2><p>今天我们一起学习了解决遗留系统代码不可测的三种方法。通过这些方法，我们可以更好地针对遗留系统落地自动化测试。</p><p>如果原来的软件中没有任何接缝让你去设置数据，或者说设置这些数据的成本非常高，那么这个时候我们就说代码的可测性低，编写自动化测试的难度就更高。我们可以通过下面这六种方式来暴露程序的接缝。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/69/4e583a4fa3d45f743ef0101b5b875769.jpg?wh=3358x1832\" alt=\"\"></p><p>其次，我们可以通过测试替身来替换被测系统的依赖。常见的测试替身有六种，分别为Dummy、Stub、Spy、Mock、Fake及Shadow。通过使用测试替身技术可以隔离被测试代码、加速测试执行、确定执行变更、模拟特殊情况，从而让测试代码覆盖得更全、执行得更加高效稳定。</p><p>最后，因为遗留系统通常在一开始没有覆盖任何自动化测试，而我们又得先进行重构，所以我建议的策略是针对遗留系统，首先考虑覆盖中大型的测试，然后进行代码重构。重构完成后再及时补充中小型的测试，最后逐步将自动化测试的比例演化为金字塔模型比例。</p><h2>思考题</h2><p>感谢你学完了今天的内容，今天的思考题是这样的：你有没有在项目中遇到过可测性非常低的代码？你是如何来解决这个问题呢？</p><p>欢迎你在留言区与我交流讨论，也欢迎你把它分享给你的同事或朋友，我们一起来高效、高质量交付软件！</p>","comments":[{"had_liked":false,"id":368529,"user_name":"liner","can_delete":false,"product_type":"c1","uid":2063915,"ip_address":"广东","ucode":"603DE9A7B478E8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/szsK860K3lPtIb5qTbBuIIaA9hmUMIdqLpt78URJ39NpmRw7iaZxCCibC0mhrmoRt1KibzibITXJfQDN3DicAnPqEdg/132","comment_is_top":false,"comment_ctime":1676427922,"is_pvip":false,"replies":[{"id":134242,"content":"02的自动化测试有对应的演示代码，可以直接执行：https:&#47;&#47;github.com&#47;junbin1011&#47;AutoTest\n后续的重构案例也都会有对应的代码，期待一起完成专栏的学习🤝","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676472062,"ip_address":"上海","comment_id":368529,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"有代码仓库吗，又可以运行演示的代码吗","like_count":4,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604896,"discussion_content":"02的自动化测试有对应的演示代码，可以直接执行：https://github.com/junbin1011/AutoTest\n后续的重构案例也都会有对应的代码，期待一起完成专栏的学习🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676472062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370303,"user_name":"蓝色之海","can_delete":false,"product_type":"c1","uid":1184277,"ip_address":"广东","ucode":"D69B28492A2DC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/15/d49b3ef9.jpg","comment_is_top":false,"comment_ctime":1678699060,"is_pvip":false,"replies":[{"id":135103,"content":"Hi，这个问题我之前也没遇到过。我在YouTube看到有一个专门介绍测试Dialog，你可以参考一下看看有没有帮助。\n标题：Dialog Input Testing (Material Dialogs) (Espresso for Beginners PART 10)\n地址：https:&#47;&#47;www.youtube.com&#47;watch?v=HRRn6m5hUoA","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1678849088,"ip_address":"广东","comment_id":370303,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，使用 Ui-Automator 和 Espresso 无法获取到 Dialog 中的 UI 元素，我在网上查了很久也没找到解决方案，老师有遇到过类似的问题嘛？如何解决的呢？\n\n我们工程中是实现了一个 Dialog 的子类，通过创建子类实例，然后执行 show 方法来显示 Dialog 的","like_count":1,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609146,"discussion_content":"Hi，这个问题我之前也没遇到过。我在YouTube看到有一个专门介绍测试Dialog，你可以参考一下看看有没有帮助。\n标题：Dialog Input Testing (Material Dialogs) (Espresso for Beginners PART 10)\n地址：https://www.youtube.com/watch?v=HRRn6m5hUoA","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678849088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184277,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/15/d49b3ef9.jpg","nickname":"蓝色之海","note":"","ucode":"D69B28492A2DC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609190,"discussion_content":"感谢老师的回复，我昨天又试了一下，发现是我之前的写法不对，我用的 Ui-Automator，uiDevice.findObject(By.res(R.id.root_view)) 就会找不到 Dialog 中 id 为 dialog_root_view 的 View，我换成 uiDevice.findObject(new UiSelector().resourceId(&#34;com.sword.demo:id/root_view&#34;)) 就可以了。\n\n我看了您发的视频，仿照视频上试了一下 Espresso ，发现也是可以定位到 UI 元素的，是我之前写的代码有问题","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1678866273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377509,"user_name":"墨水","can_delete":false,"product_type":"c1","uid":1371589,"ip_address":"广东","ucode":"EBF1925E84435D","user_header":"https://static001.geekbang.org/account/avatar/00/14/ed/c5/036cb044.jpg","comment_is_top":false,"comment_ctime":1688614827,"is_pvip":false,"replies":[{"id":139334,"content":"这个时候就需要先进行重构，你可以继续看看后面章节介绍的方法。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1697597048,"ip_address":"河南","comment_id":377509,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"遇到可测性很低的项目，主要是被测试的类依赖于第三方服务\\网络访问，但没有裂缝，无法使用测试替身或者Mock+stub的方法测试","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629747,"discussion_content":"这个时候就需要先进行重构，你可以继续看看后面章节介绍的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697597048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"河南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369187,"user_name":"wh","can_delete":false,"product_type":"c1","uid":1751148,"ip_address":"广东","ucode":"028FF3634B3102","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/6c/12da6016.jpg","comment_is_top":false,"comment_ctime":1677211875,"is_pvip":false,"replies":[{"id":134587,"content":"Hi,wh。Observable是rxjava的库，需要导入对应的依赖。\n具体使用可以参考：https:&#47;&#47;github.com&#47;ReactiveX&#47;RxJava","user_name":"作者回复","user_name_real":"作者","uid":1179206,"ctime":1677462482,"ip_address":"广东","comment_id":369187,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，请问下 Observable.from 导入的什么包？我点不出来。报错","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606849,"discussion_content":"Hi,wh。Observable是rxjava的库，需要导入对应的依赖。\n具体使用可以参考：https://github.com/ReactiveX/RxJava","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677462482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368863,"user_name":"York","can_delete":false,"product_type":"c1","uid":1120591,"ip_address":"上海","ucode":"B5D8ECEDB98386","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/4f/4a1b2fbb.jpg","comment_is_top":false,"comment_ctime":1676824795,"is_pvip":false,"replies":[{"id":134348,"content":"Hi，York。非常开心收到你的留意。\n从问题描述上来看，我们的产品的改进会涉及到如下2点：\n1. 前端的页面会做新的UI涉及和布局\n2. 接口会做新的结构调整\n\n这里我猜测后端的接口调整，应该主要是补充一些数据，或者合并一些接口。建议任然可以通过编写自动化接口测试的方式来对比新老接口的数据差异（当然新增或者合并的数据需要编写脚本去处理）。\n\n对于前端来说，如果之前的架构设计比较合理，主要是UI调整，那么涉及的修改主要也是在视图层，修改的风险相对比较可控。但如果之前架构耦合比较严重，那么得考虑先进行架构重构，进行分离。具体的方式和流程我们会在后续的课程中讲解，期待一起完成专栏的学习🤝。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676880879,"ip_address":"上海","comment_id":368863,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，我们在重构系统的时候，打算前后端一起重构，前端页面也做了新的设计和布局。这个时候，我们又有什么好办法保证核心业务逻辑的正确？之前想通过对比新老API返回的数据来验证，但是我们也打算对返回前端的数据结构重新设计整理，所以感觉这个也行不通。请教下老师有没有什么好的建议。谢谢","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605942,"discussion_content":"Hi，York。非常开心收到你的留意。\n从问题描述上来看，我们的产品的改进会涉及到如下2点：\n1. 前端的页面会做新的UI涉及和布局\n2. 接口会做新的结构调整\n\n这里我猜测后端的接口调整，应该主要是补充一些数据，或者合并一些接口。建议任然可以通过编写自动化接口测试的方式来对比新老接口的数据差异（当然新增或者合并的数据需要编写脚本去处理）。\n\n对于前端来说，如果之前的架构设计比较合理，主要是UI调整，那么涉及的修改主要也是在视图层，修改的风险相对比较可控。但如果之前架构耦合比较严重，那么得考虑先进行架构重构，进行分离。具体的方式和流程我们会在后续的课程中讲解，期待一起完成专栏的学习🤝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676880879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368503,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1676419741,"is_pvip":false,"replies":[{"id":134243,"content":"Hi，Peter。非常开心又看到你的留言。\nQ1: 这里其实可以理解为LoginService就是代表着对应的网络服务，被测试对象也是依赖对象。\nQ2：大部分为Java代码，也有一部分为kotlin代码。\n期待你的下一次留言🤝","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676472597,"ip_address":"上海","comment_id":368503,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"请教老师两个问题：\nQ1：第二招的“Mock+Stub”有点不太理解。\n文中有这句：“这种方式是用 Mockito 框架来 Mock 一个 LoginService 的假实现，然后进行 Stub”，从这句话以及其对应的代码来看，是用Mockito框架来模拟LoginService，即模拟被测试对象。但表格中对Mock的解释是“将所依赖的对象替换为。。。”，即Mock是模拟依赖对象，在登录的例子中，LoginService是被测试对象，其中的网络服务是依赖对象，所以Mock应该是模拟网络服务。似乎有点矛盾啊。\n\nQ2：专栏的示例代码是用Java还是kotlin?","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604897,"discussion_content":"Hi，Peter。非常开心又看到你的留言。\nQ1: 这里其实可以理解为LoginService就是代表着对应的网络服务，被测试对象也是依赖对象。\nQ2：大部分为Java代码，也有一部分为kotlin代码。\n期待你的下一次留言🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676472598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}