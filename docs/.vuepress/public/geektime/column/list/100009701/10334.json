{"id":10334,"title":"01 | 持续交付到底有什么价值？","content":"<p>随着云计算、容器等新兴技术的发展，“持续交付”这个老生常谈的问题，忽如一夜春风来，仿佛找到了从理想通向现实的大门。各类相关工具、产品、服务，也是纷纷出现：如Jenkins 2.0，Jenkins X，阿里云效，Netflix Spinnaker，Jfrog Artifactory等等。</p>\n<p>到底是什么魔力使得各大公司和厂商对“持续交付”如此趋之若鹜？那么，作为本专栏的第一篇文章，我就先来为你揭示“持续交付”真正的价值。</p>\n<h2>你了解持续交付吗？</h2>\n<p>持续交付，到底是什么意思，它的定义是什么？《持续交付：发布可靠软件的系统方法》一书中把“持续交付”定义为：</p>\n<blockquote>\n<p>持续交付是软件研发人员，如何将一个好点子，以最快的速度交付给用户的方法。</p>\n</blockquote>\n<p>是不是听起来有点抽象呢？其实这就好像你去问100个哲学家，“哲学”的定义是什么，你会获得101个答案一样。与马丁 · 福勒（Martin Fowler）老爷子在2006年，提出“持续集成”概念时一样，我们可以<strong>把 “持续交付”定义为“一套软件工程方法论和许许多多的最佳实践的集合”。</strong></p>\n<p>但即使熟知了定义和方法论，其实也还是如海市蜃楼一般，无法落地，因为大家所贡献的最佳实践才是持续交付理论的核心。只有真正在工作中贯彻和使用这些实践工具，才能体会持续交付的真正含义和作用。</p><!-- [[[read_end]]] -->\n<h2>持续集成、持续交付和持续部署的关系</h2>\n<p>了解了持续交付，你可能会说“持续集成”、“持续部署”又是什么意思， 它们和“持续交付”有什么关系呢。那我就给你简单解释一下。</p>\n<p>我们通常会把软件研发工作拆解，拆分成不同模块或不同团队后进行编码，编码完成后，进行集成构建和测试。<strong>这个从编码到构建再到测试的反复持续过程，就叫作“持续集成”。</strong></p>\n<p>“持续集成”一旦完成，则代表产品处在一个可交付状态，但并不代表这是最优状态，还需要根据外部使用者的反馈逐步优化。当然这里的使用者并不一定是真正的用户，还可能是测试人员、产品人员、用户体验工程师、安全工程师、企业领导等等。</p>\n<p><strong>这个在“持续集成”之后，获取外部对软件的反馈再通过“持续集成”进行优化的过程就叫作“持续交付”，它是“持续集成”的自然延续。</strong></p>\n<p>那“持续部署”又是什么呢？软件的发布和部署通常是最艰难的一个步骤。</p>\n<p>传统安装型软件，要现场调试，要用户购买等等，其难度可想而知。即使是可达度最高的互联网应用，由于生产环境的多样性（各种软件安装，配置等）、架构的复杂性（分布式，微服务）、影响的广泛性（需要灰度发布）等等，就算产品已是待交付的状态，要真正达到用户可用的标准，还有大量的问题需要解决。</p>\n<p><strong>而“持续部署”就是将可交付产品，快速且安全地交付用户使用的一套方法和系统，它是“持续交付”的最后“一公里”。</strong></p>\n<p>可见，<span class=\"orange\">“持续交付”是一个承上启下的过程，它使“持续集成”有了实际业务价值，形成了闭环，而又为将来达到“持续部署”的高级目标做好了铺垫。</span></p>\n<p><span class=\"orange\">虽然从概念上你可以这样理解，但从实践和我个人多年的经验来说，往往是从“持续部署”（自动化发布）开始推进“持续交付”，这才是一条优选的路径。</span>这部分内容我会在后续文章中详细介绍。</p>\n<h2>持续交付的显性价值</h2>\n<p>持续交付也通常以“发布流水线”的方式来解释，即研发团队从开发，到测试，再到部署，最终将产品交付给最终用户使用的过程。如下图：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e6/b1/e60e815959ff7a1593f572ed463c86b1.jpg?wh=1182*556\" alt=\"\" /></p>\n<p>虽然持续交付着重打造的是发布流水线的部分，但它所要达到的目标是在“最终用户”和“研发团队”之间建立紧密的反馈环：通过持续交付新的软件版本，以验证新想法和软件改动的正确性，并衡量这些改动对软件价值的影响。</p>\n<p>这里说的“软件价值”，说白了就是收入、日活、GMV等KPI指标了。</p>\n<p>通常我们在实施持续交付后，都能够做到在保证交付质量的前提下，加快交付速度，从而更快地得到市场反馈，引领产品的方向，最终达到扩大收益的目的。</p>\n<p>在互联网应用盛行、速度为王的今天，持续交付的价值更是被突显出来。持续交付的能力，正成为评定一家互联网公司研发能力的重要指标。</p>\n<h2>持续交付的隐性价值</h2>\n<p>除了上面这些你一眼就能看出来的价值外，如果作为不同的角色、站在不同的角度去看持续交付之后的变化，你还会发现其他一些隐性价值，而其中有一些影响甚至远远超过你的预期。</p>\n<p>或者可以这么说，通过介绍持续交付的隐性价值，我希望你能够了解到，无论是什么企业，无论你的职位高低，都可以或者应该去尝试持续交付，它一定会让你觉得物超所值。</p>\n<p><strong>如果你是CTO或者是一个较大规模研发团队的管理者</strong></p>\n<ol>\n<li>\n<p>你是不是时常困扰于技术选型的问题？<br />\n技术选型最大的难点在于影响大，又难以验证（或者验证效率低下）。而造成这些困境的绝大多数原因是没有合适的测试环境，比如环境差异造成测试数据缺乏说服力，又比如缺少隔离环境造成服务冲突等等。而这正是持续交付的用武之地。<br />\n持续交付的实施，将全面改善企业对测试环境的管理方法，使得环境管理更合理、更自由。我也将在后续章节里介绍如何做好环境管理。</p>\n</li>\n<li>\n<p>你是不是经常头痛于已制定的标准难以落地？<br />\n标准、规范、流程的落地，都需要载体，而最好的载体就是平台工具。而持续交付是一整套平台工具的落地，几乎涵盖了研发的整个生命周期，是天然的、最佳的载体。<br />\n另外，持续交付的落地本身就伴随着各类标准、规范、流程的制定和实施，可以说两者相互依存，是非常好的管理思想落地方案。</p>\n</li>\n<li>\n<p>你是不是时常考虑如何提高跨部门协作的效率？<br />\n我看到的每一个持续交付实施团队，都可以说是最厉害的“拆墙大队”，拆的就是各个研发协作部门间的“隔离墙”。<br />\n持续交付能够向各个协作部门输出统一的标准、流程和工具，提升沟通效率；并且通过大量的自动化，进一步提升各部门工作效率；还可以快速集成，把各个分散的团队，无论是横向的业务研发团队，还是纵向的技术框架团队，紧紧地联系在一起，共同进退。</p>\n</li>\n<li>\n<p>你是不是担心“黑天鹅”的降临？<br />\n既然叫“黑天鹅”，那就是说明它的产生有一定的必然性。正应了一句老话“是福不是祸，是祸躲不过”，既然躲不过，那就解决它呗。其实任何故障都有一个天敌，叫作：快速恢复。<br />\n假设，所有的故障都可以在3分钟内恢复，你是不是觉得天下无敌了。那恢复故障最快、最有效的手段又是什么呢？当然就是回滚（或重新部署）了，而这正是持续交付所包含和着力打造的能力之一。</p>\n</li>\n</ol>\n<p><strong>如果你是Team Leader</strong></p>\n<ol>\n<li>\n<p>你一定希望团队的知识能够传承。<br />\n互联网公司的人才流动之频繁已经远远超过了你我的想象。人来人往，如何将知识传承下来呢？其实在这方面，持续交付也能为团队提供很多帮助。<br />\n首先，持续交付将团队赖以生存的工作流程进行了固化；其次，利用代码静态检查等工具，能够很好地传承团队多年来的代码规范，并作为检查项进行自动化校验；再次，自动化测试的脚本，同样是团队经验的产物。</p>\n</li>\n<li>\n<p>你一定希望团队专注于业务而非工程。<br />\n目前越来越多的公司或研发组织意识到，持续交付体系也如同中间件一样，能够从日常的业务研发工作中抽象出来，其不同只在于中间件解决架构问题，而持续交付解决工程问题。<br />\n这样研发团队能够全力应付业务的需求，而不用总是重复奔波于一些烦人且耗时的工程问题，比如安装测试机、准备编译服务器等等。</p>\n</li>\n<li>\n<p>你一定希望以一个较平稳的节奏持续工作。<br />\n虽然在实施持续交付的初期，团队为了适应新的流程和工具，会有一定的效率下降，但之后在自动化的帮助下，团队效率会有一个明显的提升并逐渐稳定下来。<br />\n持续交付就是这样通过稳固的流程、自动化的工具和公开而真实的数据，来避免发布前夕容易发生的“死亡行军”式开发阶段。</p>\n</li>\n</ol>\n<p><strong>如果你是产品经理</strong></p>\n<ol>\n<li>\n<p>你应该是产品真正的第一个用户。<br />\n持续交付不仅仅是可以保证每一个变化都能及时得到测试以及反馈，更多的是解决测试与实际发布时存在差异的问题。<br />\n产品人员再也不会陷入“为什么用户端运行的结果，和在测试环境中的不一致”这样的窘境，他们将真正成为第一个用户，而不再是最后一个QA。</p>\n</li>\n<li>\n<p>你应该完全知悉当前的进度和质量。<br />\n作为产品人员，你是不是一直有这样的感觉：和研发团队之间总有一扇墙，程序员们似乎并不乐意告诉产品人员项目的真相；而最终总有这样那样的理由造成延期，产品人员往往无话可说。<br />\n那么，持续交付就能够实时地反应当前的开发情况，从而帮助产品人员决策和调整。</p>\n</li>\n<li>\n<p>你的产品应该随时能发布。<br />\n计划永远赶不上变化，任何产品人员都希望自己的产品能够随时处于可发布状态。这样就能灵活地交付已完成的功能，迎合市场或业务的需要。<br />\n本质上，做到代码上线和业务上线的解耦分离，这也正是持续交付方法论强调的一个重点。</p>\n</li>\n</ol>\n<p><strong>如果你是一个程序员</strong></p>\n<ol>\n<li>\n<p>你可以通过对持续交付的学习，进一步加强自己对整个软件工程的认识。<br />\n持续交付涵盖了软件交付端到端的整个周期，其覆盖面不仅仅包括编码，还包括：设计、测试、部署、运维、运营等等。<br />\n如果你对自己的发展有更高的要求，那么你就应该学习一下持续交付的内容，它能让你看到更多与编码有关的其他东西，比如不同的编码方式等；也能让你站在更高的角度去看待自己的工作：研发效率的提高往往不是个人能力的提高，而是集体协同效率的提高。</p>\n</li>\n<li>\n<p>你可以利用持续交付的工具或最佳实践，提高自己的工作效率和质量。<br />\n随着持续交付的流行，其配套的实践和工具也层出不穷。如果你玩过ping-pong式的结对编程（A写测试，B写实现，然后B写下一个测试，A写重构和实现），你一定会觉得编程如此轻松有趣，而这种TDD的方式也很好的保证了代码质量。</p>\n</li>\n<li>\n<p>你可以参与到持续交付实施中去，享受为其他程序员提供效率工具的挑战和乐趣。<br />\n试想一下，如果你是一个出租车司机，而你的乘客却是舒马赫（F1世界冠军），此时你开车的压力会有多大。其实参与到持续交付的实施中也是一样，因为你正在用程序员的方式改造程序员的工作习惯，为程序员提供工具。<br />\n虽然挑战和压力巨大，但这又是如此有趣，你将会站在另一个高度去看你曾经的工作，不想试试吗？</p>\n</li>\n</ol>\n<h2>如何评估持续交付的价值</h2>\n<p>我跟你说了这么多持续交付的价值，那如何评估它呢？这是一个非常难的问题，我自己每年在绩效考评时也都会问自己这个问题：我到底应该怎么给老板汇报呢？我可以量化持续交付的价值吗？</p>\n<p>首先，你一定会说，我可以衡量产品的交付速度是否变快了。但是，实际情况下影响产品交付速度的因素实在太多，虽然我们一定知道持续交付有积极作用，但到底占比是多少呢？好像非常模糊，难以回答。</p>\n<p>然后，你又想到，我们可以衡量各个自动化过程的速度是否变快了，比如：编译速度、发布速度、回滚速度、自动化测试速度等等。</p>\n<p>是的，这些指标确实很好地反应了持续交付的价值，但总觉得这些并不是全部，持续交付的标准化、推行的新流程、改革的环境治理架构，好像都没有体现出来。</p>\n<p>那到底应该怎么评估持续交付的价值呢？这里和你分享一下我在携程是怎么解决这个问题的。</p>\n<p>我除了会评估一些常规的KPI外，更多地会换一种思考方式。<strong>既然很难量化持续交付的价值，那么我们就具象化，来看看整个工程生命周期中有多少被开发人员诟病，或者阻碍开发人员自助处理的问题点</strong> ，即“不可持续点”：</p>\n<blockquote>\n<p>开发不能按需产生隔离的测试环境；<br />\n生产代码回滚后，要手工处理代码分支；<br />\n预发布（Staging）流量要能自动分离，以便预发布测试。</p>\n</blockquote>\n<p><span class=\"orange\">在携程，我们会将所有的“不可持续点”进行记录和分解，通过OKR的考评方式，将消灭这些点作为目标，拆解出来的可行动点，作为关键结果，以这样的方式来完成绩效考评。</span></p>\n<p>虽然，有些“不可持续点”已经超越了一般传统持续交付的概念，甚至有些已经超越了纯技术改进的范畴，但是持续交付仍会一直关注于消灭这些“不可持续点”。</p>\n<p>So what，我们就是要持续交付我们的价值！</p>\n<h2>总结</h2>\n<p>接下来，我给你提炼一下今天内容的要点。</p>\n<p>持续交付的价值不仅仅局限于简单地提高产品交付的效率，它还通过统一标准、规范流程、工具化、自动化等等方式，影响着整个研发生命周期。</p>\n<p>持续交付最终的使命是打破一切影响研发的“阻碍墙”，为软件研发工作本身赋能。无论你是持续交付的老朋友还是新朋友，无论你在公司担任管理工作还是普通的研发人员，持续交付都会对你的工作产生积极的作用。</p>\n<h2>思考题</h2>\n<p>你的团队最希望借助持续交付解决什么现实问题？</p>\n<p>好了，今天就聊到这里，欢迎你给我留言，下期见！</p>\n<p></p>\n","comments":[{"had_liked":false,"id":14891,"user_name":"刘为红","can_delete":false,"product_type":"c1","uid":1102333,"ip_address":"","ucode":"A7026457DF958D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/fd/1cdfef42.jpg","comment_is_top":true,"comment_ctime":1530747297,"is_pvip":false,"replies":[{"id":"5021","content":"应该这样理解，持续交付包含其他两者，但不是等于两者相加。就像我文中提到的，交付对象未必一定是最终用户，定期提测、修复、再提测，充分利用了测试资源，也是持续交付。千万不要认为一定要做到端到端完整才叫持续交付。持续的产出并持续的验证。这也是为什么我会说任何企业，任何人都可以去尝试持续交付的原因","user_name":"作者回复","comment_id":14891,"uid":"1004285","ip_address":"","utype":1,"ctime":1530764028,"user_name_real":"潇俊"}],"discussion_count":2,"race_medal":0,"score":"9.2233720770401997e+18","product_id":100009701,"comment_content":"持续交付是从用户获取反馈后再通过持续集成不断改进的过程，持续部署又是持续交付的最后一公里，是不是可以理解为为持续交付=持续集成+持续部署，我们做持续交付就是要进行持续集成+持续部署，这三者的关系有点晕，希望老师解答一下","like_count":9,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420162,"discussion_content":"应该这样理解，持续交付包含其他两者，但不是等于两者相加。就像我文中提到的，交付对象未必一定是最终用户，定期提测、修复、再提测，充分利用了测试资源，也是持续交付。千万不要认为一定要做到端到端完整才叫持续交付。持续的产出并持续的验证。这也是为什么我会说任何企业，任何人都可以去尝试持续交付的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530764028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301646,"discussion_content":"千万不要认为一定要做到端到端完整才叫持续交付","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598596839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15064,"user_name":"妮小小","can_delete":false,"product_type":"c1","uid":1032405,"ip_address":"","ucode":"6B2F214458413C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/d5/c278f9ca.jpg","comment_is_top":false,"comment_ctime":1530840215,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"31595611287","product_id":100009701,"comment_content":"看完文章，觉得公司的主要问题集中在持续集成和持续部署上。看完回复和评论内容，就觉得，三者互相渗透，没有绝对的对立。团队后台开发人员，总是以后台逻辑是个整体，需要统一编码结束后，方可测试，但是受交付进度的影响，测试人员往往压力很大。中间有试过，后台单个功能模块编码结束，测试人员测试没问题后，整体交付前，之前测试的模块又有新的问题，这样测试人员的积极性又没了，觉得还是都编码结束整体测试才比较好。小公司的效率问题，一直没办法提升，任重道远，作为管理新人，希望看完能有真正的理解与运用，为实际工作减少压力。","like_count":7,"discussions":[{"author":{"id":1728362,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5f/6a/37f84aea.jpg","nickname":"等风来","note":"","ucode":"3A3E9151A39937","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51915,"discussion_content":"耦合度太高导致的，建议面对接口协议编程，接口定义好，前端、研发、测试（编写自动测试脚本）同时开工，集成完之后只需要跑测试脚本加部分的手工测试了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573966981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323081,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/49/27afc93d.jpg","nickname":"戈磊","note":"","ucode":"7B6433E197C6B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50642,"discussion_content":"是否考虑模块拆分，微服务化，减低模块耦合，也可以分开测试呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573741080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1440678,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YPskWw3DQdwlJIs9acFFrmTu0MGN3ciaaLnMxOArFGYBy9yL2zDY6HZQ2bz8QLNt5qpkRicnoCCvryV8LawfQuTQ/132","nickname":"nick66","note":"","ucode":"D07841EE5D204F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546505,"discussion_content":"重复修改这种感觉只有编写自动化测试能解决，要不然无穷无尽的验证太折磨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642327570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15023,"user_name":"008","can_delete":false,"product_type":"c1","uid":1164003,"ip_address":"","ucode":"E1D9D91E18208A","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/e3/df7447ff.jpg","comment_is_top":false,"comment_ctime":1530805052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27300608828","product_id":100009701,"comment_content":"期待实际实施课程，目前正在犹豫是专门招一个有经验的CI&#47;CD工程师还是在团队内培养，毕竟初期无法投入太多人力进行工具的搭建，目前也只能从意识上向团队推广，要以一种快速开发 快速提测 快速反馈 快速修复的理念开展工作，但没有工具的支撑又很担心人员出现负面情绪，反而降低了效率。","like_count":6},{"had_liked":false,"id":15095,"user_name":"极杰子","can_delete":false,"product_type":"c1","uid":1169555,"ip_address":"","ucode":"D8BBDA6EEA7AD5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d8/93/8fe5ba74.jpg","comment_is_top":false,"comment_ctime":1530855583,"is_pvip":false,"replies":[{"id":"5067","content":"携程的话，push2CI2CD都是做到的，静态扫描是针对新增代码的，但是自动化测试不是。另外自动化测试怎么只对提交的代码，我不知道怎么做到，可能也没人能知道：）比如我改了一个枚举，我真的不知道该怎么只测试这个commit的内容就算OK了，因为自动话测试本来就是讲求覆盖率，ut也是一样的","user_name":"作者回复","comment_id":15095,"uid":"1004285","ip_address":"","utype":1,"ctime":1530858534,"user_name_real":"潇俊"}],"discussion_count":2,"race_medal":0,"score":"18710724767","product_id":100009701,"comment_content":"我想提前了解一个问题、携程是否做到开发提交代码即触发流水线流程、并且其中自动化测试是针对提交的这块代码做测试、如果做到了具体如何做，没做到原因是什么？","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420236,"discussion_content":"携程的话，push2CI2CD都是做到的，静态扫描是针对新增代码的，但是自动化测试不是。另外自动化测试怎么只对提交的代码，我不知道怎么做到，可能也没人能知道：）比如我改了一个枚举，我真的不知道该怎么只测试这个commit的内容就算OK了，因为自动话测试本来就是讲求覆盖率，ut也是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530858534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605837,"avatar":"https://static001.geekbang.org/account/avatar/00/18/80/cd/de3e76af.jpg","nickname":"Jack xia","note":"","ucode":"F9D639BB2CDA81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377205,"discussion_content":"这个我要纠正一下ut测试只是单纯的看覆盖率的观点哈，目前汽车电子行业，功能安全定义模块安全等级，比如ASIL A~ D, 根据功能安全等级来定是分支覆盖还是判定覆盖，甚至是MC/DC等，判定覆盖和MC/.DC是要看逻辑和结果的，而非单纯的覆盖率，这个在用例设计阶段即可知道，再说说还需要关注圈复杂度（这个需要根据专业工具的控制流逻辑来得到，目前matlab等一些工具是可以生成的）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622547063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15011,"user_name":"九脉一谷","can_delete":false,"product_type":"c1","uid":1028636,"ip_address":"","ucode":"507F1EA001396C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/1c/48558abc.jpg","comment_is_top":false,"comment_ctime":1530798506,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18710667690","product_id":100009701,"comment_content":"效率和质量是当前我们希望通过持续集成，持续交付来解决两个最棘手的问题。新开发的产品部署到用户现场已经上百套了，一直都没有一个稳定的版本。这也是困惑我许久的难题。","like_count":4,"discussions":[{"author":{"id":1609835,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/6b/1b03c19e.jpg","nickname":"超","note":"","ucode":"291C6952CF4BA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296712,"discussion_content":"这个也是我的困扰，目前有好的解决办法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596630447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228703,"user_name":"Karl","can_delete":false,"product_type":"c1","uid":1027890,"ip_address":"","ucode":"7938C53C6D9387","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/32/74465c5e.jpg","comment_is_top":false,"comment_ctime":1592790044,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14477691932","product_id":100009701,"comment_content":"我所在公司做的是嵌入式产品。不光有 software 需要发布，还需要有配套工作的 firmware（FPGA）。目前情况是，有时老板需要给客户演示产品的最新进展，我们就得交叉编译一个软件版本，再生成一个版本的 bitstream，然后手工在一台设备上安装。有时 software 和 firmware 工程师们由于相互没有沟通，也没进行过打通部门的测试联调，导致最新版本的 software 和 firmware 无法配合工作，只能手动排查问题，要了亲命了。<br>我希望 CI&#47;CD 可以改善这一状况，最关键是使软件和固件的持续集成和发布配合好。但是具体怎么做甚至能不能做，我心里一点底也没有。还请老师同学帮助。","like_count":3,"discussions":[{"author":{"id":1609835,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/6b/1b03c19e.jpg","nickname":"超","note":"","ucode":"291C6952CF4BA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296715,"discussion_content":"目前我也遇到类似的问题，天天在扯皮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596630696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15013,"user_name":"破晓","can_delete":false,"product_type":"c1","uid":1153316,"ip_address":"","ucode":"13C33DE0CFD43B","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/24/e1cb609e.jpg","comment_is_top":false,"comment_ctime":1530798959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14415700847","product_id":100009701,"comment_content":"我在一家初创企业做小组leader，系统从单体到微服务，小组成员从两人到十人，规模不断扩大，系统越来越复杂。持续交付的技术工具了解很多，我们也在尝试一些实践。希望在这里得到老师的最佳实践经验，使我们少走弯路，提升整个团队的效率和满意度。","like_count":3},{"had_liked":false,"id":193932,"user_name":"一只鱼","can_delete":false,"product_type":"c1","uid":1272756,"ip_address":"","ucode":"44C6751552953B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/b4/47c548fd.jpg","comment_is_top":false,"comment_ctime":1584987496,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10174922088","product_id":100009701,"comment_content":"关于三者之间的关系，先来解读“集成”、“部署”、“交付”，以前端项目为例，集成：可简单理解为编码、构建；部署：就是将上一步的静态资源包发布到某个环境，使得用户可以正常访问；交付：即提供可靠稳定的产品。但在现实场景中，很少有产品经过上述一轮流程就结束，往往需要经过多次的集成、部署、交付、反馈，周而复始，这不就是“持续”吗？这里需要注意交付的对象，通常来说提交给测试同学的产品，至少要保证可以跑通主流程，而当提交给客户时，交付标准就更严格了。","like_count":2,"discussions":[{"author":{"id":1440678,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YPskWw3DQdwlJIs9acFFrmTu0MGN3ciaaLnMxOArFGYBy9yL2zDY6HZQ2bz8QLNt5qpkRicnoCCvryV8LawfQuTQ/132","nickname":"nick66","note":"","ucode":"D07841EE5D204F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546506,"discussion_content":"赞，目前我们公司的提测标准就是主流程跑通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642327658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40321,"user_name":"zlh","can_delete":false,"product_type":"c1","uid":1308809,"ip_address":"","ucode":"48D61E15112A64","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhoQUKOEru0AiaWpazaibTPr7Zic4U0DQXic8ic6sqG3ADn8EEF0BUWuxQeOFrmZaRY1Y59Hic9Hu7Wj7Q/132","comment_is_top":false,"comment_ctime":1542593020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10132527612","product_id":100009701,"comment_content":"看留言中有人提到如何实现自动化测试只针对提交的代码做测试，我在以前的公司的时候，有考虑到往这个方面考虑。大概思路有两种：第一种是通过前期的运行测试后，会自动形成一个代码和测试用例的一个对应关系（这个是个难点，在我离开时尚未形成可行的方案），当下次代码提交后，会自动寻找修改代码对应的测试用例，只运行该部分测试用例。 第二种是在写测试用例的时候，手动分模块，当对应模块的代码修改后，就只运行对应模块的测试用例（手动选择）。 第二种方式是我们一直在操作的，但是这个比较粗糙，只能保证修改的模块的测试用例通过，当跨模块影响时，是无法辨别的。而第一种方式，系统会自动判断哪些测试用例会受影响，从而自动运行对应的测试用例即可。","like_count":2},{"had_liked":false,"id":35292,"user_name":"师不愈","can_delete":false,"product_type":"c1","uid":1157056,"ip_address":"","ucode":"D85D0D459B3C76","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/c0/3b2ddf95.jpg","comment_is_top":false,"comment_ctime":1540512293,"is_pvip":false,"replies":[{"id":"12815","content":"看起来棒棒的","user_name":"作者回复","comment_id":35292,"uid":"1004285","ip_address":"","utype":1,"ctime":1540893112,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"10130446885","product_id":100009701,"comment_content":"问：你的团队最希望借助持续交付解决什么现实问题？答：我们团队的交付物是SDK，需要支持多种平台（win，Linux ，iOS，android），引入持续交付，现在能理解的，就是提升生产效率，让研发人员专注业务，提高产品质量。目前SDK产品经过2年的开发已成熟，但从开发到提测到测试到上线，全都是非常传统的复制粘贴方式，仅仅依靠人为编写的文字流程与文档规范去控制整个过程，可想这中间有多大的效率提升空间。以交测举例，原来需要开发在源码的若个build目录下拷贝文档，sdk，demo，按照规范组成产品包，手动提交到某个交测目录下，发邮件通知测试同事，整个过程需要1h，且容易出错。在简单使用Jenkins之后，源码的提交就会自动触发上述所有过程，只需1分钟，直接为研发用户带来效益。","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427506,"discussion_content":"看起来棒棒的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540893112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14941,"user_name":"王浩槟","can_delete":false,"product_type":"c1","uid":1170413,"ip_address":"","ucode":"C7571671413E01","user_header":"https://static001.geekbang.org/account/avatar/00/11/db/ed/106a8ec9.jpg","comment_is_top":false,"comment_ctime":1530754336,"is_pvip":false,"replies":[{"id":"5059","content":"坚持并持续改进，持续交付和重构其实一样，越痛苦的事，就越要多做，加油💪","user_name":"作者回复","comment_id":14941,"uid":"1004285","ip_address":"","utype":1,"ctime":1530809205,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"10120688928","product_id":100009701,"comment_content":"嗯，终于等到第一篇。<br>我在一家初创公司做中层技术管理，面临项目交付业务压力大、项目交付速度要求高的困境，希望利用持续交付能有所建树","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420186,"discussion_content":"坚持并持续改进，持续交付和重构其实一样，越痛苦的事，就越要多做，加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530809205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280770,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","comment_is_top":false,"comment_ctime":1614353400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5909320696","product_id":100009701,"comment_content":"文章中持续交付和持续部署，这两者的解释感觉还是有些迷糊，最好有个案例结合讲解。","like_count":1},{"had_liked":false,"id":166289,"user_name":"一点点..","can_delete":false,"product_type":"c1","uid":1797437,"ip_address":"","ucode":"5F37B0337CCF29","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6d/3d/51fa3952.jpg","comment_is_top":false,"comment_ctime":1577433072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872400368","product_id":100009701,"comment_content":"思考：最近遇到了这样的问题，项目开发经常是觉得没有问题了，结果要给人家看的时候，出问题了，没有一个真正的测试环境，代码管理也只是简单的用了git。我就在想，大公司的一整套开发流程是什么样的，从一个产品出生到开发到测试再到上线，然后看到了持续交付，简单了解后，不知道是不是想要的东西。看到这里，明白了！是我们需要的东西，简单来说，我觉得首先持续交付可以解决我们的项目管理规范化，不会再杂乱无章，其次，就是可以提高效率，同时也使得不论是个人还是团队，都能够更快成长。谢谢。","like_count":1},{"had_liked":false,"id":147027,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1572767238,"is_pvip":true,"replies":[{"id":"57365","content":"首先可以自动化但没有自动化的点<br>其次是需要人工判断的，是否可通过约定来解决<br>再有，不在控制能力之内的事情，可否异步处理<br>最后注意记录，回溯，幂等处理","user_name":"作者回复","comment_id":147027,"uid":"1004285","ip_address":"","utype":1,"ctime":1573183022,"user_name_real":"潇俊"}],"discussion_count":2,"race_medal":0,"score":"5867734534","product_id":100009701,"comment_content":"很好奇老师遇到过哪些“不可持续点”，希望有个参考列表。","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473099,"discussion_content":"首先可以自动化但没有自动化的点\n其次是需要人工判断的，是否可通过约定来解决\n再有，不在控制能力之内的事情，可否异步处理\n最后注意记录，回溯，幂等处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573183022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1440678,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YPskWw3DQdwlJIs9acFFrmTu0MGN3ciaaLnMxOArFGYBy9yL2zDY6HZQ2bz8QLNt5qpkRicnoCCvryV8LawfQuTQ/132","nickname":"nick66","note":"","ucode":"D07841EE5D204F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":546507,"discussion_content":"但是用不可持续点来作为目标是不是太松散，没有整体感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642327726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":473099,"ip_address":""},"score":546507,"extra":""}]}]},{"had_liked":false,"id":50377,"user_name":"greatliu","can_delete":false,"product_type":"c1","uid":1137386,"ip_address":"","ucode":"267832F4BD10CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/ea/70589340.jpg","comment_is_top":false,"comment_ctime":1544964299,"is_pvip":false,"replies":[{"id":"19014","content":"嗯，确实是，感谢指出","user_name":"作者回复","comment_id":50377,"uid":"1004285","ip_address":"","utype":1,"ctime":1545363275,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"5839931595","product_id":100009701,"comment_content":"无论是横向的业务研发团队，还是纵向的技术框架团队。<br><br>我的理解是业务是纵向的，技术是横向的，你这句话是不是有问题","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432959,"discussion_content":"嗯，确实是，感谢指出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545363275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35584,"user_name":"LXJ","can_delete":false,"product_type":"c1","uid":1215891,"ip_address":"","ucode":"E0FE666315F27B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/93/83059285.jpg","comment_is_top":false,"comment_ctime":1540693146,"is_pvip":false,"replies":[{"id":"12816","content":"这是一个解耦问题，一定要保证独立组件能够独立构建，甚至部署。微服务流行也是这个道理","user_name":"作者回复","comment_id":35584,"uid":"1004285","ip_address":"","utype":1,"ctime":1540893374,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"5835660442","product_id":100009701,"comment_content":"从单个需求的角度来看，如果有一个大的需求，涉及到不同的部件或者说模块，怎么能够保证各个部件的进度是统一的，不影响其他需求的构建？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427585,"discussion_content":"这是一个解耦问题，一定要保证独立组件能够独立构建，甚至部署。微服务流行也是这个道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540893374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25874,"user_name":"Geek_b7218f","can_delete":false,"product_type":"c1","uid":1240137,"ip_address":"","ucode":"8D9AE65555B31D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B7mKLJoo0L8GBBSlYWibkrZfyZX49NCCUxMlpJoAicuuyHRoE362ALQVicMXCS894osJ8icKibWdyIbKleicHpZicibgdA/132","comment_is_top":false,"comment_ctime":1537459454,"is_pvip":false,"replies":[{"id":"9506","content":"比如利用功能开关，功能代码上线，但开关不开，功能暂不生效","user_name":"作者回复","comment_id":25874,"uid":"1004285","ip_address":"","utype":1,"ctime":1537505923,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"5832426750","product_id":100009701,"comment_content":"代码上线和业务上线的解耦分离，能举个栗子吗，呵呵😄","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424438,"discussion_content":"比如利用功能开关，功能代码上线，但开关不开，功能暂不生效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537505923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14994,"user_name":"Rachel_fang","can_delete":false,"product_type":"c1","uid":1004050,"ip_address":"","ucode":"9DE25BDC220185","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/12/e0460331.jpg","comment_is_top":false,"comment_ctime":1530792633,"is_pvip":false,"replies":[{"id":"5068","content":"说的太对了，但是持续交付也不一定要完全自动化，自动化是加速和优化的手段","user_name":"作者回复","comment_id":14994,"uid":"1004285","ip_address":"","utype":1,"ctime":1530859781,"user_name_real":"潇俊"}],"discussion_count":1,"race_medal":0,"score":"5825759929","product_id":100009701,"comment_content":"自动化测试的效率和脚本的正确性应该也是其中重要一环～如果自动化测试效率很低，同时失败的脚本需要人工check也达不到持续交付的标准～","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420203,"discussion_content":"说的太对了，但是持续交付也不一定要完全自动化，自动化是加速和优化的手段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530859781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356331,"user_name":"愉快","can_delete":false,"product_type":"c1","uid":1492103,"ip_address":"北京","ucode":"50815DDCD50D94","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/87/f2db4b1b.jpg","comment_is_top":false,"comment_ctime":1662173528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662173528","product_id":100009701,"comment_content":"我们客服的特点是前期没有特别明确的需求，有时候可能是一个上级领导下发的一个任务，需求需要我们产品自己去逐步摸索后汇报，汇报后调整，甚至开发到一半推翻重来，但是项目会有规定的时间，所以我们希望通过持续交付提高自己的交付速度，但是由于内外网的限制持续部署还不能实现，所以感觉敏捷是不是更适合我们，但是持续交付可能是我们终极的梦想。","like_count":0},{"had_liked":false,"id":352760,"user_name":"廖志勇","can_delete":false,"product_type":"c1","uid":2277771,"ip_address":"","ucode":"ACDE08C9DD551F","user_header":"","comment_is_top":false,"comment_ctime":1658916369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658916369","product_id":100009701,"comment_content":"所以老师，怎样才算标准化，怎样才算规范化。","like_count":0},{"had_liked":false,"id":227452,"user_name":"feng","can_delete":false,"product_type":"c1","uid":1346285,"ip_address":"","ucode":"254A0D72E07ABF","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/ed/76500086.jpg","comment_is_top":false,"comment_ctime":1592382809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592382809","product_id":100009701,"comment_content":"这个在“持续集成”之后，获取外部对软件的反馈再通过“持续集成”进行优化的过程就叫作“持续交付”，它是“持续集成”的自然延续。<br>———<br>这里的意思是，持续交付在持续继承之后。那么持续交付和持续集成是各自独立的。<br><br>可见，“持续交付”是一个承上启下的过程，它使“持续集成”有了实际业务价值，形成了闭环，而又为将来达到“持续部署”的高级目标做好了铺垫。<br>————<br>这里说持续交付在持续集成和持续部署的中间。<br><br>老师，这两段话很让我困惑，持续交付到底和其它二者什么关系？留言里也有好几个困惑的，看回复又说是持续交付包含了其它二者。老师能正面的说的更清晰一点吗？","like_count":0},{"had_liked":false,"id":190411,"user_name":"戴斌","can_delete":false,"product_type":"c1","uid":1119385,"ip_address":"","ucode":"7DC53BEA432217","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/99/5b1ed92b.jpg","comment_is_top":false,"comment_ctime":1584640852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584640852","product_id":100009701,"comment_content":"我们在持续集成上打通了流水线","like_count":0},{"had_liked":false,"id":174309,"user_name":"雪浪","can_delete":false,"product_type":"c1","uid":1541538,"ip_address":"","ucode":"CB33F2F8418557","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/a2/dbeeb6c4.jpg","comment_is_top":false,"comment_ctime":1580133094,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580133094","product_id":100009701,"comment_content":"有种观点是 持续集成，持续交付，持续部署，是三个递进的阶段。持续集成主要是编译，构建，单测等。持续交付是把代码交付到test环境给QA人员，测试之后达到一种可交付的状态，持续部署是部署线上环境让用户可以使用，请问这种说法合理吗","like_count":0,"discussions":[{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351637,"discussion_content":"我也是这么理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614352801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100109,"user_name":"leo gao","can_delete":false,"product_type":"c1","uid":1563934,"ip_address":"","ucode":"3AF0A4E5464818","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL29nvDpmV0E1bfGLwCO24A829RSBibSPBdBEby7lJzYiayGLf0eibpbibNkPDDVBgxBZSz01vZbpbuvLicA/132","comment_is_top":false,"comment_ctime":1559446505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559446505","product_id":100009701,"comment_content":"现在持续交付主要是想通过自动化来确保每次开发修改代码后没有影响到其他功能 。","like_count":0},{"had_liked":false,"id":52212,"user_name":"红娟","can_delete":false,"product_type":"c1","uid":1164879,"ip_address":"","ucode":"F5988451FC91A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/4f/0c215abf.jpg","comment_is_top":false,"comment_ctime":1545352491,"is_pvip":false,"replies":[{"id":"19016","content":"文章里应该写清楚了吧……","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1545363560,"ip_address":"","comment_id":52212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545352491","product_id":100009701,"comment_content":"持续集成，持续交付，持续部署三者之间是什么关系呢？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433784,"discussion_content":"文章里应该写清楚了吧……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545363560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52208,"user_name":"红娟","can_delete":false,"product_type":"c1","uid":1164879,"ip_address":"","ucode":"F5988451FC91A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/4f/0c215abf.jpg","comment_is_top":false,"comment_ctime":1545352379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545352379","product_id":100009701,"comment_content":"关键词:持续交付，持续集成，持续部署<br>","like_count":0},{"had_liked":false,"id":16320,"user_name":"亲亲小胖鱼","can_delete":false,"product_type":"c1","uid":1178102,"ip_address":"","ucode":"80F0BF6950C9DE","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/f6/018425eb.jpg","comment_is_top":false,"comment_ctime":1531880856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531880856","product_id":100009701,"comment_content":"可以认为 持续交付=DevOps？","like_count":0},{"had_liked":false,"id":15019,"user_name":"JinSong","can_delete":false,"product_type":"c1","uid":1171159,"ip_address":"","ucode":"663F02904BFB2D","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/d7/26ed3d03.jpg","comment_is_top":false,"comment_ctime":1530802406,"is_pvip":false,"replies":[{"id":"5065","content":"部署之后，就可以利用优势解决环境问题；而环境管理会对编译打包有一定要求，比如配置等；如果是小团队的话，也可以在初期就订立分支规范；如果分支规范已经比较分散，则最后处理","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1530847671,"ip_address":"","comment_id":15019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530802406","product_id":100009701,"comment_content":"能简单介绍下你们的持续交付演进路线吗，首先做了自动部署，后面紧接着做了哪些？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420210,"discussion_content":"部署之后，就可以利用优势解决环境问题；而环境管理会对编译打包有一定要求，比如配置等；如果是小团队的话，也可以在初期就订立分支规范；如果分支规范已经比较分散，则最后处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530847671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14930,"user_name":"禾子先生","can_delete":false,"product_type":"c1","uid":1004799,"ip_address":"","ucode":"7F637111BDC5C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/ff/380eaec1.jpg","comment_is_top":false,"comment_ctime":1530752770,"is_pvip":false,"replies":[{"id":"5022","content":"应该说是包含关系，而不是相加","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1530764074,"ip_address":"","comment_id":14930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530752770","product_id":100009701,"comment_content":"之前对这几个概念还挺模糊，现在会比较清晰，感谢作者。现在的理解就是：持续交付=持续集成+持续部署","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420180,"discussion_content":"应该说是包含关系，而不是相加","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530764074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14927,"user_name":"翔翔","can_delete":false,"product_type":"c1","uid":1115525,"ip_address":"","ucode":"4A8D3B479C604F","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/85/49fe3119.jpg","comment_is_top":false,"comment_ctime":1530752334,"is_pvip":false,"replies":[{"id":"5020","content":"持续交付就是要去思考如何避免一次性最终交付，也就是说要想办法消灭不可验证的半成品。比如交付设计稿，交付部分功能，也都是交付","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1530763370,"ip_address":"","comment_id":14927,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530752334","product_id":100009701,"comment_content":"从零开始的一个新系统建设，能够采用持续交付吗？毕竟到可以提供业务测试的程度需要一段较长时间。","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420177,"discussion_content":"持续交付就是要去思考如何避免一次性最终交付，也就是说要想办法消灭不可验证的半成品。比如交付设计稿，交付部分功能，也都是交付","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530763370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14893,"user_name":"刘为红","can_delete":false,"product_type":"c1","uid":1102333,"ip_address":"","ucode":"A7026457DF958D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/fd/1cdfef42.jpg","comment_is_top":false,"comment_ctime":1530747666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530747666","product_id":100009701,"comment_content":"持续交付是从用户获取反馈后再通过持续集成不断改进的过程，持续部署是持续交付的最后一公里，是不是可以理解为持续交付=持续集成+持续部署，我们做持续交付就是要做好持续集成和持续部署，三者的关系有点晕，希望老师解答一下，感谢！","like_count":0}]}