{"id":478702,"title":"16 | 如何集成 Nacos Config 实现配置项动态刷新？","content":"<p>你好，我是姚秋辰。</p><p>在上一节课，你已经了解了配置中心在微服务架构中的作用和应用场景。今天我们就来学习如何让应用程序从Nacos分布式配置中心获取配置项。通过这节课的学习，你可以掌握微服务架构下的配置管理方式，知道如何通过动态配置推送来实现业务场景。</p><p>今天课程里将要介绍的动态推送是互联网公司应用非常广泛的一个玩法。我们都知道互联网行业比较卷，卷就意味着业务更新迭代特别频繁。</p><p>就拿我以前参与的新零售业务为例，运营团队三天两头就要对线上业务进行调整，为了降低需求变动带来的代码改动成本，很多时候我们会将一些业务抽离成可动态配置的模式，也就是<strong>通过动态配置改变线上业务的表现方式</strong>。比如手机APP上的商品资源位的布局和背景等，这些参数都可以通过线上的配置更新进行推送，不需要代码改动也不需要重启服务器。</p><p>接下来，我先来带你将应用程序接入到Nacos获取配置项，然后再来实现动态配置项刷新。本节课我选择coupon-customer-serv作为改造目标，因为customer服务的业务场景比较丰富，便于我们来演示各个不同的场景和用法。</p><p>接入Nacos配置中心的第一步，就是要添加Nacos Config和Bootstrap依赖项。</p><!-- [[[read_end]]] --><h2>添加依赖项</h2><p>我们打开coupon-customer-serv的pom文件，在pom中添加以下两个依赖项。</p><pre><code>&lt;!-- 添加Nacos Config配置项 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- 读取bootstrap文件 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><p>第一个依赖项是Nacos配置中心的依赖包。尽管我们在<a href=\"https://time.geekbang.org/column/article/473988\">第9节课</a>中已经在customer服务中添加过了Nacos的依赖项，但此依赖项非彼依赖项，初学者很容易搞混。Nacos既能用作配置管理也能用作服务注册，如果你想要引入Nacos的<strong>服务发现功能</strong>，<strong>需要添加的是nacos-discovery包</strong>；而如果你想引入的是Nacos的<strong>配置管理功能</strong>，<strong>则需要添加nacos-config包</strong>。</p><p>第二个依赖项是为了让程序在启动时能够加载本地的bootstrap配置文件，因为Nacos配置中心的连接信息需要配置在bootstrap文件，而非application.yml文件中。在Spring Cloud 2020.0.0版本之后，bootstrap文件不会被自动加载，你需要主动添加spring-cloud-starter-bootstrap依赖项，来开启bootstrap的自动加载流程。</p><p>为什么集成Nacos配置中心必须用到bootstrap配置文件呢？这就要说到Nacos Config在项目启动过程中的优先级了。</p><p>如果你在Nacos配置中心里存放了访问MySQL数据库的URL、用户名和密码，而这些数据库配置会被用于其它组件的初始化流程，比如数据库连接池的创建。为了保证应用能够正常启动，我们必须<strong>在其它组件初始化之前从Nacos读到所有配置项</strong>，之后再将获取到的配置项用于后续的初始化流程。</p><p>因此，在服务的启动阶段，你需要通过某种途径将Nacos配置项加载的优先级设置为最高。</p><p>而在Spring Boot规范中，bootstrap文件通常被用于应用程序的上下文引导，bootstrap.yml文件的加载优先级是高于application.yml的。如果我们将Nacos Config的连接串和参数添加到bootstrap文件中，就能确保程序在启动阶段优先执行Nacos Config远程配置项的读取任务。这就是我们必须将Nacos Config连接串配置在bootstrap中的原因。</p><p>依赖项添加完成之后，我们就可以去配置Nacos Config的连接串了。</p><h2>添加本地Nacos Config配置项</h2><p>首先，我们需要在coupon-customer-impl项目的resource文件夹中创建bootstrap.yml配置文件。</p><p>接下来，你需要在bootstrap.yml文件中添加一些Nacos Config配置项，我把一些常用的配置项写到了这里，你可以参考一下。</p><pre><code>spring:\n  # 必须把name属性从application.yml迁移过来，否则无法动态刷新\n  application:\n    name: coupon-customer-serv\n  cloud:\n    nacos:\n      config:\n        # nacos config服务器的地址\n        server-addr: localhost:8848\n        file-extension: yml\n        # prefix: 文件名前缀，默认是spring.application.name\n        # 如果没有指定命令空间，则默认命令空间为PUBLIC\n        namespace: dev\n        # 如果没有配置Group，则默认值为DEFAULT_GROUP\n        group: DEFAULT_GROUP\n        # 从Nacos读取配置项的超时时间\n        timeout: 5000\n        # 长轮询超时时间\n        config-long-poll-timeout: 10000        \n        # 轮询的重试时间\n        config-retry-time: 2000\n        # 长轮询最大重试次数\n        max-retry: 3\n        # 开启监听和自动刷新\n        refresh-enabled: true\n        # Nacos的扩展配置项，数字越大优先级越高\n        extension-configs:\n          - dataId: redis-config.yml\n            group: EXT_GROUP\n            # 动态刷新\n            refresh: true\n          - dataId: rabbitmq-config.yml\n            group: EXT_GROUP\n            refresh: true\n</code></pre><p>下面，我就带你了解一下代码中的的配置项，我把这些配置项分为了几大类，我们分别来看一下。</p><p><strong>文件定位配置项</strong>：主要用于匹配Nacos服务器上的配置文件。</p><ul>\n<li>namespace：Nacos Config的namespace和Nacos服务发现阶段配置的namespace是同一个概念和用法。我们可以使用namespace做多租户（multi-tenant）隔离方案，或者隔离不同环境。我指定了namespace=dev，应用程序只会去获取dev这个命名空间下的配置文件；</li>\n<li>group：概念和用法与Nacos服务发现中的group相同，如未指定则默认值为DEFAULT_GROUP，应用程序只会加载相同group下的配置文件；</li>\n<li>prefix：需要加载的文件名前缀，默认为当前应用的名称，即 spring.application.name，一般不需要特殊配置；</li>\n<li>file-extension：需要加载的文件扩展名，默认为properties，我改成了yml。你还可以选择xml、json、html等格式。</li>\n</ul><p><strong>超时和重试配置项</strong></p><ul>\n<li>timeout：从Nacos读取配置项的超时时间，单位是ms，默认值3000毫秒；</li>\n<li>config-retry-time：获取配置项失败的重试时间；</li>\n<li>config-long-poll-timeout：长轮询超时时间，单位为ms；</li>\n<li>max-retry：最大重试次数。</li>\n</ul><p>在这里，我想多跟你介绍一下超时和重试配置里提到的<strong>长轮询机制</strong>的工作原理。</p><p>当Client向Nacos Config服务端发起一个配置查询请求时，服务端并不会立即返回查询结果，而是会将这个请求hold一段时间。如果在这段时间内有配置项数据的变更，那么服务端会触发变更事件，客户端将会监听到该事件，并获取相关配置变更；如果这段时间内没有发生数据变更，那么在这段“hold时间”结束后，服务端将释放请求。</p><p>采用长轮询机制可以降低多次请求带来的网络开销，并降低更新配置项的延迟。</p><p><strong>通用配置</strong></p><ul>\n<li>server-addr：Nacos Config服务器地址；</li>\n<li>refresh-enabled: 是否开启监听远程配置项变更的事件，默认为true。</li>\n</ul><p><strong>扩展配置</strong></p><ul>\n<li>extension-configs：如果你想要从多个配置文件中获取配置项，那么你可以使用extension-configs配置多源读取策略。extension-configs是一个List的结构，每个节点都有dataId、group和refresh三个属性，分别代表了读取的文件名、所属分组、是否支持动态刷新。</li>\n</ul><p>在实际的应用中，我们经常需要将一个公共配置项分配给多个微服务使用，比如多个服务共享同一份Redis、RabbitMQ中间件连接信息。这时我们就可以在Nacos Config中添加一个配置文件，并通过extension-configs配置项将这个文件作为扩展配置源加到各个微服务中。这样一来，我们就不需要在每个微服务中单独管理通用配置了。</p><p>到这里，相信你已经了解了各个常用配置项的用途。那么接下来，让我们去Nacos Config中添加配置文件吧。</p><h2>添加配置文件到Nacos Config Server</h2><p>首先，我们在本地启动Nacos服务器，打开配置管理模块下的“<strong>配置列表</strong>”页面，再切换到“<strong>开发环境</strong>”命名空间下（即dev环境）。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/9e/7abf7db7a568b68cb00f965ace3d8f9e.jpg?wh=2000x933\" alt=\"\"></p><p>然后，我们点击页面右上角的➕符号创建三个配置文件，coupon-customer-serv.yml（默认分组）、redis-config.yml（EXT_GROUP分组）和rabbitmq-config.yml（EXT_GROUP分组）。</p><p>接下来，你就可以将原本配置在本地application.yml中的配置项转移到Nacos Config中了，由于Data ID后缀是yml，所以在编辑配置项的时候，你需要在页面上选择“YAML”作为配置格式。</p><p>以coupon-customer-serv.yml为例，在新建配置的页面中，我指定了Data ID为coupon-customer-serv.yml、Group为默认分组DEFAULT_GROUP、配置格式为YAML。在“配置内容”输入框中，我将spring.datasource的配置项添加了进去。除此之外，我还添加了一个特殊的业务属性：disableCouponRequest:true，待会儿你就会用到这个属性实现<strong>动态业务开关推送</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/36/3b4ebac8703875cd718eaae36bf46b36.jpg?wh=2000x1779\" alt=\"\"></p><p>填好配置项的内容之后，你就可以点击“发布”按钮来创建配置文件了。redis-config.yml和rabbitmq-config.yml两个配置文件将在后面的章节中用到，我们目前还不需要向这两个文件中添加配置项。</p><p>一切配置妥当之后，我们就可以去启动应用程序来验证集成效果了。为了测试应用程序能否正确读取远程配置项，你可以打开coupon-customer-impl模块的application.yml文件，将其中的datasource相关配置注释掉，然后尝试重新启动服务。如果项目启动正常，你将会在日志文件看到配置文件的订阅通知。</p><pre><code>INFO c.a.n.client.config.impl.ClientWorker    : [fixed-localhost_8848-dev] [subscribe] coupon-customer-serv.yml+DEFAULT_GROUP+dev\n\nINFO c.a.nacos.client.config.impl.CacheData   : [fixed-localhost_8848-dev] [add-listener] ok, tenant=dev, dataId=coupon-customer-serv.yml, group=DEFAULT_GROUP, cnt=1\n\n// 省略其它配置文件的加载日志\n</code></pre><p>接下来你可以尝试调用本地数据库的CRUD接口，如果业务正常运作，那么就说明你的程序可以从Nacos Config中获取到正确的数据库配置信息。</p><p>你可以使用同样的方法，将一些配置项信息迁移到Nacos Config中。当你需要更改配置项的时候，就不用每次都重新编译并发布应用了，只需要改动Nacos Config中的配置即可。这样一来，我们就实现了<strong>“配置管理”与“业务逻辑”的职责分离</strong>。</p><p>别忘了，前面我还在Nacos Config中添加了一个disableCouponRequest配置项，接下来我就用它做一个动态配置推送的场景，控制用户领券功能的打开和关闭。</p><h2>动态配置推送</h2><p>首先，我们打开CouponCustomerController类，声明一个布尔值的变量disableCoupon，并使用@Value注解将Nacos配置中心里的disableCouponRequest属性注入进来。</p><pre><code>@Value(&quot;${disableCouponRequest:false}&quot;)\nprivate Boolean disableCoupon;\n</code></pre><p>在上面的代码中，我们给disableCouponRequest属性设置了一个默认值“false”，这样做的目的是加一层容错机制。即便Nacos Config连接异常无法获取配置项，应用程序也可以使用默认值完成启动加载。</p><p>然后，我们找到用户领券接口requestCoupon，在其中添加一段业务逻辑，根据disableCoupon属性的值控制是否发放优惠券，如果值为“true”则暂停领券。</p><pre><code>@PostMapping(&quot;requestCoupon&quot;)\npublic Coupon requestCoupon(@Valid @RequestBody RequestCoupon request) {\n    if (disableCoupon) {\n        log.info(&quot;暂停领取优惠券&quot;);\n        return null;\n    }\n    return customerService.requestCoupon(request);\n}\n</code></pre><p>最后，<strong>别忘了在CouponCustomerController类头上添加一个RefreshScope注解</strong>，有了这个注解，Nacos Config中的属性变动就会动态同步到当前类的变量中。如果不添加RefreshScope注解，即便应用程序监听到了外部属性变更，那么类变量的值也不会被刷新。</p><pre><code>@RefreshScope\npublic class CouponCustomerController {\n}\n</code></pre><p>到这里，我们就完成了所有改造工作。你可以启动应用程序，然后登录Nacos控制台并打开coupon-customer-serv.yml文件的编辑窗口，将disableCouponRequest的值由true改为false，并调用requestCoupon服务查看接口逻辑的变化。我录了一段在Nacos Config控制台动态编辑配置项的video，你可以参考一下。</p><p><video poster=\"https://media001.geekbang.org/d2aa2844c0d143668fd7932235bb5ae8/snapshots/282d9944dc0a413fa8f4f0d2d30cb6bf-00002.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/31856db2-17e596a710e-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/ea036e1c0b374ace90af127686e1ab94/7d7547d46cce4ea09c6cf1671dc630eb-f65b9974d586db3f09b265b109c93f97-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>总结</h2><p>现在，我们来回顾一下这节课的重点内容。今天我们使用Nacos Config作为配置中心，实现了<strong>配置项和业务逻辑的职责分离</strong>，然后落地了一个<strong>动态属性推送</strong>的场景。</p><p>配置中心还有一个重要功能是“配置回滚”。如果你错误地修改了某些业务项，引起了系统故障，这时候你可以执行一段rollback操作，将配置项改动退回到之前的某一个历史版本。在Nacos控制台的“配置管理-&gt;历史版本”菜单中，你可以查看某个配置项的历史修改记录，并指定回滚的版本。</p><p>除此之外，我们还可以在Nacos上查看某个文件的监听列表，了解目前有多少实例监听了指定配置文件的动态改动事件。你可以点击“配置管理-&gt;监听查询”来访问这个功能。</p><p>上面两个功能的操作非常简单，就留给你来自己探索啦。</p><h2>思考题</h2><p>你知道RefreshScope动态刷新背后的实现原理吗？欢迎在留言区写下自己的思考，与我一起讨论。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","comments":[{"had_liked":false,"id":331546,"user_name":"小仙","can_delete":false,"product_type":"c1","uid":1866677,"ip_address":"","ucode":"9F94043DFCEC3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6pWvKsV4rzQ62z5MDEjaEU5MbDfmzbA62kUgoqia2tgKIIxw4ibkDhF7W48iat5dT8UB9Adky2NuzQ/132","comment_is_top":false,"comment_ctime":1642647683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44592320643","product_id":100101301,"comment_content":"在不使用 @RefreshScope 的情况下，通过 Spring Environment 对象也能获取到 Nacos 最新的环境变量","like_count":10},{"had_liked":false,"id":333544,"user_name":"一念之间","can_delete":false,"product_type":"c1","uid":1562957,"ip_address":"","ucode":"25C6317C111F93","user_header":"https://static001.geekbang.org/account/avatar/00/17/d9/4d/def385e9.jpg","comment_is_top":false,"comment_ctime":1644400206,"is_pvip":true,"replies":[{"id":"122048","content":"往静态方法中注入一个可被刷新的属性吗？这可以间接曲线救国，把属性注入到一个受托管的对象里，静态类调用spring原生方法从上下文中拿这个对象的实例","user_name":"作者回复","comment_id":333544,"uid":"2819998","ip_address":"","utype":1,"ctime":1644749330,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18824269390","product_id":100101301,"comment_content":"老师您好,我要在在工具类中静态方法中使用nacos配置动态刷新,怎么实现","like_count":4,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550823,"discussion_content":"往静态方法中注入一个可被刷新的属性吗？这可以间接曲线救国，把属性注入到一个受托管的对象里，静态类调用spring原生方法从上下文中拿这个对象的实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644749330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346861,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1653476335,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14538378223","product_id":100101301,"comment_content":"RefreshScope 动态刷新背后的实现原理？<br>当配置中心配置变更后，客户端长轮询拉取到最新配置变更，spring 上下文，能监听到配置的变更，更新上下文的配置为最新的，然后重新 get bean，bean 的初始化流程中，把新的配置，注入到 bean 中，进而实现 bean 中的那些属性配置都是最新的，是这个流程不。","like_count":3,"discussions":[{"author":{"id":3021110,"avatar":"","nickname":"Geek_eca226","note":"","ucode":"E738A5618F3218","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580258,"discussion_content":"请问为什么客户端能监听到配置中心的配置变更","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658045580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2363417,"avatar":"https://static001.geekbang.org/account/avatar/00/24/10/19/8c3d6490.jpg","nickname":"R","note":"","ucode":"D09DECDF355D07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":3021110,"avatar":"","nickname":"Geek_eca226","note":"","ucode":"E738A5618F3218","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":582106,"discussion_content":"2.1源码是客户端定期轮训和服务端主动推送，1.4功能应该类似","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659237287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580258,"ip_address":"北京"},"score":582106,"extra":""}]}]},{"had_liked":false,"id":346857,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1653475080,"is_pvip":false,"replies":[{"id":"126729","content":"Nacos在国内用Spring Cloud架构的公司里应用程度还不错，而且国内nacos+dubbo生态也还可以，但在国外Nacos用的确实不多","user_name":"作者回复","comment_id":346857,"uid":"2819998","ip_address":"","utype":1,"ctime":1654237888,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14538376968","product_id":100101301,"comment_content":"长轮询是基于推和拉的这种方案，RocketMQ 和 Kafka 消费端消费消息也是长轮询，主动推的话，消费端可能顶不住，另外，zk 作为配置中心的 watch 机制好像是基于事件监听，主动推？现在 nacos 的普及度怎么样，是大厂都在用吗？感觉小公司，都是以前用的啥，就用啥，微服务这一套，也不引入，也不关注服务治理，出来问题，就是重启，手动刷数据","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574667,"discussion_content":"Nacos在国内用Spring Cloud架构的公司里应用程度还不错，而且国内nacos+dubbo生态也还可以，但在国外Nacos用的确实不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654237889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331055,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1642401251,"is_pvip":true,"replies":[{"id":"120932","content":"1. 获取的配置项加载到spring上下文中，可以认为是内存中。<br>2. 这样做没问题，controller这一层是mvc时代的产物，实际开发中并没有太多用处，只是用来安置spring mvc注解。所以去掉controller，对外直接暴露service是可以的，这也是dubbo、grpc这类RPC框架所使用的规范，","user_name":"作者回复","comment_id":331055,"uid":"2819998","ip_address":"","utype":1,"ctime":1642426378,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14527303139","product_id":100101301,"comment_content":"请教老师两个问题：<br>Q1：本篇（16篇）问题：从配置中心获取的配置项放在哪里？<br>       应用从nacos config获取的配置项，保存在什么地方？<br>       是保存到application.yml中吗？ 还是保存在内存中？<br>Q2：16篇之前的问题：服务层需要加原controller的注解吗？<br>      16篇之前的某篇有一个问题，此篇中有一句话：&quot;微服务甚至可以把controller去掉，<br>       服务层挂上@ResponseBody直接对外暴露service&quot;?<br>      去掉controller，那么，服务层除了加@ResponseBody以外，是否需要添加<br>      RestController、RequestMapping等注解吗？<br>    （为了找到出处，我用这句话中的几个关键字搜了全部文章，都没有找到，很奇怪啊。<br>         如果老师也想不起来这句话，那就直接评论这句话吧）","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546800,"discussion_content":"1. 获取的配置项加载到spring上下文中，可以认为是内存中。\n2. 这样做没问题，controller这一层是mvc时代的产物，实际开发中并没有太多用处，只是用来安置spring mvc注解。所以去掉controller，对外直接暴露service是可以的，这也是dubbo、grpc这类RPC框架所使用的规范，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642426378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341648,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1649751149,"is_pvip":false,"replies":[{"id":"125188","content":"我提示一下研究注解的一个方向，同学可以顺着去验证一下自己的想法。<br><br>一个注解除了自身的解释器以外，点击进到该注解源码你会发现有一些子注解，比如@RestController里就会有额外的子注解：Controller+ResponseBody注解。所以同学可以1）查看注解当前的解释器 2）查看子注解的解释器 来了解一个注解完整的功能","user_name":"作者回复","comment_id":341648,"uid":"2819998","ip_address":"","utype":1,"ctime":1650416969,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10239685741","product_id":100101301,"comment_content":"话说我直接用@NacosValue注解是不是相当于@Value和@RefreshScope，同时给安排了？","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565213,"discussion_content":"我提示一下研究注解的一个方向，同学可以顺着去验证一下自己的想法。\n\n一个注解除了自身的解释器以外，点击进到该注解源码你会发现有一些子注解，比如@RestController里就会有额外的子注解：Controller+ResponseBody注解。所以同学可以1）查看注解当前的解释器 2）查看子注解的解释器 来了解一个注解完整的功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650416969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331054,"user_name":"intomymind","can_delete":false,"product_type":"c1","uid":1105126,"ip_address":"","ucode":"B954C9BFEC8667","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/e6/cfb409ab.jpg","comment_is_top":false,"comment_ctime":1642400840,"is_pvip":false,"replies":[{"id":"121038","content":"是通过HttpPost长轮询做的，可以理解为Pull模式和Push模式的折中方案，客户端在此期间是等待","user_name":"作者回复","comment_id":331054,"uid":"2819998","ip_address":"","utype":1,"ctime":1642522759,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10232335432","product_id":100101301,"comment_content":"关于长轮询机制有以下几个问题<br>Q1：客户端发起长轮询后，nacos收到这个请求，此时没有配置发生变化，那么此时服务端会hold这个请求，此时客户端是在等着吗？<br>Q2：如果nacos服务端发生了配置变化，发送了一个事件，客户端会监听这个事件，毕竟是两个服务，那这个事件是如何进行传输的，是用tcp还是http?","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547100,"discussion_content":"是通过HttpPost长轮询做的，可以理解为Pull模式和Push模式的折中方案，客户端在此期间是等待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642522759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345675,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1155437,"ip_address":"","ucode":"0FF1C4EAF7F98A","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/6d/a4ff33bb.jpg","comment_is_top":false,"comment_ctime":1652502689,"is_pvip":true,"replies":[{"id":"126159","content":"无论value有没有在上下文中使用到，只要触发了动态推送，同学都可以在日志里找到一行消费了nacos event的推送通知。但如果需要刷新上下文context，就要@RefreshScope （本质是scopeName=&quot;refresh&quot;的 @Scope注解）","user_name":"作者回复","comment_id":345675,"uid":"2819998","ip_address":"","utype":1,"ctime":1652583501,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5947469985","product_id":100101301,"comment_content":"请教老师一个问题，refreshScope注解不添加的话，在动态改变nacos的value，也会在服务日志里面打印出来的，老师说必须要加才可以Nacos Config 中的属性变动就会动态同步到当前类的变量中。如果不添加 RefreshScope 注解，即便应用程序监听到了外部属性变更，那么类变量的值也不会被刷新。","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572042,"discussion_content":"无论value有没有在上下文中使用到，只要触发了动态推送，同学都可以在日志里找到一行消费了nacos event的推送通知。但如果需要刷新上下文context，就要@RefreshScope （本质是scopeName=&#34;refresh&#34;的 @Scope注解）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652583501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332250,"user_name":"咬尖月牙儿","can_delete":false,"product_type":"c1","uid":1325661,"ip_address":"","ucode":"A6223A6B713109","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/5d/c5dc789a.jpg","comment_is_top":false,"comment_ctime":1643112234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5938079530","product_id":100101301,"comment_content":"通过发布application的RefreshEvent事件来刷新RefreshScope的Bean, 调用ContextRefresh.refresh的方法去重新创建bean","like_count":1},{"had_liked":false,"id":361166,"user_name":"carl","can_delete":false,"product_type":"c1","uid":1121476,"ip_address":"江苏","ucode":"6E8A71603EA668","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/c4/6b143e3a.jpg","comment_is_top":false,"comment_ctime":1667291281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667291281","product_id":100101301,"comment_content":"老师，nacos dev环境的yml配置文件在哪里领取？","like_count":0},{"had_liked":false,"id":350346,"user_name":"beatdrug","can_delete":false,"product_type":"c1","uid":1043410,"ip_address":"","ucode":"6291179E6E5C5B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4VCgcBbU51SiasW8tpjYwdqBGe2RNIy6neuI7AEjCQ6t9qqXw6tXpZ2bDCoxJhWqQJv2LlFmemVYJCrLze2Aa7g/132","comment_is_top":false,"comment_ctime":1656839190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656839190","product_id":100101301,"comment_content":"被RefreshScope注释的类会生成代理类，依赖注入只是引入代理类，当容器监听到RefreshEvent事件，会清除容器缓存中被代理的目标对象，所以之后方法调用会触发代理类去容器重新生成并获取目标对象，这个时候就会用新配置初始化对象了；由于基于代理的方式实现的，如果目标对象没有接口或者用final修饰的话，RefreshScope也会失效","like_count":0},{"had_liked":false,"id":348931,"user_name":"陈志男","can_delete":false,"product_type":"c1","uid":2695483,"ip_address":"","ucode":"4831554F6AC2C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/21/3b/7f01e158.jpg","comment_is_top":false,"comment_ctime":1655563564,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655563564","product_id":100101301,"comment_content":"读取其他配置文件 如果失效的话可以试试下面这种<br>```<br>ext‐config[0]:<br>  data‐id: hello.yml<br>  group: EXT_GROUP<br>  refresh: true<br>```","like_count":0},{"had_liked":false,"id":342547,"user_name":"找工作","can_delete":false,"product_type":"c1","uid":1756876,"ip_address":"","ucode":"DFD2FFACAEDC12","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ce/cc/ec5895b0.jpg","comment_is_top":false,"comment_ctime":1650335116,"is_pvip":false,"replies":[{"id":"125466","content":"同学把本地项目运行环境提供一下，比如是否使用了docker，然后报错的时间节点是在属性刷新refresh的时候，还是在启动项目获取配置阶段","user_name":"作者回复","comment_id":342547,"uid":"2819998","ip_address":"","utype":1,"ctime":1651034211,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1650335116","product_id":100101301,"comment_content":"姚老师，我注册中心配置的很顺利，配置中心搞了半天没搞定，com.alibaba.nacos.client.naming 报错NET WORK unreachable","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567957,"discussion_content":"同学把本地项目运行环境提供一下，比如是否使用了docker，然后报错的时间节点是在属性刷新refresh的时候，还是在启动项目获取配置阶段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651034211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1756876,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ce/cc/ec5895b0.jpg","nickname":"找工作","note":"","ucode":"DFD2FFACAEDC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564861,"discussion_content":"搞定了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650342974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334911,"user_name":"Geek_ea3747","can_delete":false,"product_type":"c1","uid":2027802,"ip_address":"","ucode":"22C908580C0925","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f1/1a/b1de30c8.jpg","comment_is_top":false,"comment_ctime":1645177251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645177251","product_id":100101301,"comment_content":"ConfigurationProperties","like_count":0},{"had_liked":false,"id":331075,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1642409899,"is_pvip":false,"replies":[{"id":"121039","content":"spring cloud config正规军出品保质保量，不过它和Nacos注册中心不怎么对付，有些功能存在兼容性问题","user_name":"作者回复","comment_id":331075,"uid":"2819998","ip_address":"","utype":1,"ctime":1642522876,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1642409899","product_id":100101301,"comment_content":"还是代理，无处不在的代理。Scope 可以自定义，Spring Batch 里面也有自定义的 Scope，有对应的 Scope 接口，也有同名的 RefreshScope 这个类，会在 BeanFactory 初始化的时候新加载这个 Scope。<br>```<br>\t&#47;**<br>\t * Creates a scope instance and gives it the default name: &quot;refresh&quot;.<br>\t *&#47;<br>\tpublic RefreshScope() {<br>\t\tsuper.setName(&quot;refresh&quot;);<br>\t}<br>```<br><br>看这个代码就知道是怎么回事了。如果看到 ManagedOperation 这种注解，不用管，这只是 JMX 的内容，用不到的就不用了解。<br><br>Apollo 没有加这个 Scope 一样能用，之前小马哥对比过这两个，Apollo 不太符合 Spring Cloud 的规范。更好的，我觉得 Spring Cloud Config 还行，之前的作业就是让我们自定义个其中的配置的 Repository，以某一个文件变动为配置变动。Spring Cloud Config 的抽象写的还行。","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547101,"discussion_content":"spring cloud config正规军出品保质保量，不过它和Nacos注册中心不怎么对付，有些功能存在兼容性问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642522876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331011,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1642377720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642377720","product_id":100101301,"comment_content":"Apollo 、Nacos 还是企业用的比较多的分布式应用配置中心。","like_count":0}]}