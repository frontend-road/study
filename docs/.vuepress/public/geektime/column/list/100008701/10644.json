{"id":10644,"title":"18 | 从全局到局部：核技巧","content":"<p>俗话说得好：“支持向量机有三宝，间隔对偶核技巧”。在上一篇文章中我和你分享了间隔这个核心概念，今天就来看看对偶和核技巧的使用。对偶性主要应用在最优决策边界的求解中，其逻辑比较简单。</p><p>但在介绍核技巧时，会先后涉及核函数、核方法、核技巧这些近似的概念。虽然从名字上看，它们都是“核”字辈的兄弟，但是在含义和用途上却不能一概而论，因此有必要对它们做一些系统的梳理。</p><p>当支持向量机用于线性可分的数据时，不同类别的支持向量到最优决策边界的距离之和为$2 / || {\\bf w} ||$，其中的${\\bf w}$是超平面的线性系数，也就是法向量。不难看出，让间隔$|| {\\bf w} || ^ {-1}$最大化就是让$|| {\\bf w} || ^ 2$最小化，所以线性可分的支持向量机对应的最优化问题就是</p><p>$$ \\mathop {\\min }\\limits_{{\\bf w}, b} \\dfrac{1}{2} || {\\bf w} || ^ 2$$</p><!-- [[[read_end]]] --><p>$$ {\\rm s.t.} y_i ({\\bf w} \\cdot {\\bf x}_i + b) \\ge 1$$</p><p>其中$y_i$为数据点${\\bf x}_i$对应的类别，其取值为$\\pm 1$。</p><p>这个问题本身是个<strong>凸二次规划</strong>（convex quadratic programming）问题，求解起来轻松加随意。但借助拉格朗日乘子，这个原问题（primal problem）就可以改写成所谓的广义拉格朗日函数（generalized Lagrange function）</p><p>$$ L({\\bf w}, b, {\\boldsymbol \\alpha}) = \\dfrac{1}{2} || {\\bf w} || ^ 2 + \\sum\\limits_{i = 1}^m \\alpha_i[1 - y_i ({\\bf w} \\cdot {\\bf x}_i + b)] $$</p><p>其中每个$\\alpha_i$都是$\\boldsymbol \\alpha$的分量。和原来的优化问题相比，除了和决策边界有关的变量${\\bf w}$和$b$之外，广义拉格朗日函数还引入了一组不小于0的参数$\\alpha_i$。</p><p>这个式子其实从另一个角度说明了为什么最优决策边界只取决于几个支持向量。对于不是支持向量的数据点来说，等式右侧第二项中的$1 - y_i ({\\bf w} \\cdot {\\bf x}_i + b)$是小于0的，因此在让$L({\\bf w}, b, {\\boldsymbol \\alpha})$最小化时，必须把这些点的贡献去除，去除的方式就是让系数$\\alpha_i = 0$。这样一来，它们就成来支持向量机里的路人甲乙丙丁了。</p><p>广义拉格朗日函数的最优化可以分成两步：先把$ L({\\bf w}, b, {\\boldsymbol \\alpha})$看成$\\boldsymbol \\alpha$的函数，在将${\\bf w}$和$b$视为常量的前提下求出其最大值。由于$\\boldsymbol \\alpha$在求最值时被消去，这时求解出的</p><p>$$\\theta _p ({\\bf w}, b) = \\mathop {\\max}\\limits_{\\boldsymbol \\alpha} L({\\bf w}, b, {\\boldsymbol \\alpha})$$</p><p>就是只和${\\bf w}$和$b$有关的函数了。</p><p>接下来如何确定最优的决策边界参数呢？这里要分两种情况来考虑。当参数${\\bf w}$和$b$不满足原问题的约束时，总会找到能让目标函数取值为正无穷的$\\boldsymbol \\alpha$，这意味着最大值其实就是不存在。只有符合原问题的要求时，$\\theta _P ({\\bf w}, b)$的最大值才有意义。</p><p>那么这个最大值等于多少呢？由于$\\alpha_i$和$1 - y_i ({\\bf w} \\cdot {\\bf x}_i + b)$的符号相反，因此两者之积必然是小于0的，由此不难得出$\\theta _P ({\\bf w}, b) = || {\\bf w} || ^ 2 / 2$。这里需要注意的是，在确定最优的$\\boldsymbol \\alpha$时，原始的优化对象$|| {\\bf w} || ^ 2 / 2$是作为常数项出现的。</p><p>经过一番折腾之后，原始的最小化问题就被等效为$\\mathop {\\min }\\limits_{{\\bf w}, b} \\theta _p ({\\bf w}, b)$，也就是广义拉格朗日函数的极小极大问题。这个极小极大问题是先对$\\boldsymbol \\alpha$求极大，再对${\\bf w}$和$b$求极小。如果对上一季的内容还有印象的话，你是不是会一拍大腿：一边最大，一边最小，这不就是传说中的鞍点（saddle point）嘛！</p><p>计算多重积分时，调换积分顺序是简化计算的常用技巧，这种思路在对偶问题中同样大有用武之地。“极小极大”调个个儿就变成了“极大极小”，确定参数的顺序也要相应地反转。对于支持向量机来说，其广义拉格朗日函数的极大极小问题具有如下的形式</p><p>$$ \\mathop {\\max}\\limits_{\\boldsymbol \\alpha} \\theta _D(\\boldsymbol \\alpha) = \\mathop {\\max}\\limits_{\\boldsymbol \\alpha} \\mathop {\\min }\\limits_{{\\bf w}, b} L({\\bf w}, b, {\\boldsymbol \\alpha}) $$</p><p>让广义拉格朗日函数对决策边界的两个参数$\\bf w$和$b$的偏导数为0，就可以得到</p><p>$$ {\\bf w} = \\sum\\limits_{i = 1}^m \\alpha_i y_i {\\bf x}_i, \\sum\\limits_{i = 1}^m \\alpha_i y_i = 0 $$</p><p>将解出的约束关系先代入到$L({\\bf w}, b, {\\boldsymbol \\alpha})$中，再作为拉格朗日乘子项引入$L({\\bf w}, b, {\\boldsymbol \\alpha})$的优化，就可以得到原优化问题的对偶问题（dual problem）</p><p>$$ \\mathop {\\max}\\limits_{\\boldsymbol \\alpha} \\sum\\limits_{i = 1}^m \\alpha_i - \\dfrac{1}{2} \\sum\\limits_{i = 1}^m \\sum\\limits_{j = 1}^m \\alpha_i \\alpha_j y_i y_j {\\bf x}_i^T {\\bf x}_j$$</p><p>$$ {\\rm s.t.} \\sum\\limits_{i = 1}^m \\alpha_i y_i = 0, \\alpha_i \\ge 0$$</p><p>虽然一顿操作猛如虎将原问题变成了对偶问题，但这两者之间到底能不能完全划等号还是个未知数呢。直观地看，原函数求出来的是$L({\\bf w}, b, {\\boldsymbol \\alpha})$最大值的下界，对偶函数求出来的是$L({\\bf w}, b, {\\boldsymbol \\alpha})$最小值的上界，后者肯定不会大于前者，但也不是无条件地相等。</p><p>好在在数学上可以证明，当上面的过程满足<strong>Karush-Kuhn-Tucker条件</strong>（简称KKT条件，是一组关于$\\boldsymbol \\alpha$、${\\bf w}$和$b$的不等式）时，原问题和对偶问题才能殊途同归。<strong>支持向量机对原问题和对偶问题之间等价关系的利用就是它的对偶性（duality）</strong>。</p><p>说完了对偶性，下面就轮到核技巧了。在核技巧这台大戏里，第一个出场的是<strong>核函数</strong>，这才是“核”字辈这些兄弟里的开山鼻祖。</p><p>要理解核函数，还是要从史上最著名的线性不可分问题——异或问题出发。假设待分类的四个点$(x_1, x_2)$分别为$(\\pm 0, \\pm 1)$，那么只需要添加一个多项式形式的新属性$\\phi ({\\bf x}) = (x_1 - x_2) ^ 2$，就可以将原来的四个点分别映射为三维空间上的(0, 0, 0), (0, 1, 1), (1, 0, 1)和(1, 1, 0)。这时，在三维空间中只需要将原来的数据平面稍微向上抬一点，就能完美地区分两个类别了。</p><p>既然$\\phi ({\\bf x})$能生成新的属性，它就是传说中的核函数吧？非也！$\\phi ({\\bf x})$只是特征映射（feature map），它的作用是从原始属性生成新的特征。<strong>对高维空间上新生成的特征向量进行内积运算，得到的才是真正的核函数</strong>（kernel function）。核函数的数学表达式具有如下的形式</p><p>$$ k({\\bf x}, {\\bf x}’) = \\phi ({\\bf x}) ^ T \\phi ({\\bf x}’) $$</p><p>核函数的这个公式给出了生成条件而非判定条件。当给定特征的映射方式后，可以用它来计算核函数；但是当给出一个确定的函数时，如何判定它能不能作为核函数呢？<strong>梅塞尔定理</strong>（Mercer’s theorem）解决了这个判定问题。</p><p>这个定理于1909年由英国数学家詹姆斯·梅塞尔（James Mercer）提出，其内容是任何满足对称性和半正定性的函数都是某个高维希尔伯特空间的内积。只要一个函数满足这两个条件，它就可以用做核函数。但梅塞尔定理只是判定核函数的充分而非必要条件，不满足梅塞尔定理的函数也可能是核函数。</p><p>之所以要将特征映射表示成核函数，是因为内积的引入简化了高维空间中的复杂运算。映射到高维空间后，待优化的对偶问题就变成了</p><p>$$ \\mathop {\\max}\\limits_{\\boldsymbol \\alpha} \\sum\\limits_{i = 1}^m \\alpha_i - \\dfrac{1}{2} \\sum\\limits_{i = 1}^m \\sum\\limits_{j = 1}^m \\alpha_i \\alpha_j y_i y_j \\phi({\\bf x}_i)^T \\phi({\\bf x}_j) $$</p><p>按照一般的思路，要直接计算上面的表达式就先得写出$\\phi (\\cdot)$的形式，再在新的高维特征空间上计算内积，但这在实际运算中存在很大困难。尤其是当$\\phi (\\cdot)$的表达式未知时，那这内积就没法计算了。可即使$\\phi (\\cdot)$的形式已知，如果特征空间的维数较高，甚至达到无穷维的话，内积的运算也会非常困难。</p><p>这时就需要核函数来发挥威力了。核函数说到底是瓦普尼克“能走直线就别兜圈子”思想的产物。既然优化的对象是内积的结果，那么直接定义内积的表达式就可以了，何苦还要引入特征映射和特征空间这些个中间步骤呢？更重要的是，梅塞尔定理为这种捷径提供了理论依据，只要核函数满足对称性和半正定的条件，对应的映射空间就铁定存在。</p><p>所以核函数的引入相当于隐式定义了特征映射和特征空间，无需关心这些中间结果的形式就能直接计算待优化的内积，从而大大简化计算。</p><p>从核函数出发，可以衍生出其他和“核”相关的概念。<strong>从思想上讲，核方法（kernel method）表示的是将低维空间中的线性不可分问题通常可以转化为高维空间中的线性可分问题的思路；从运算上讲，核技巧（kernel trick）表示的是通过间接定义特征映射来直接计算内积的运算方法</strong>。两者就像同一枚硬币的两面，虽然浑然一体但还是有所区别，因而有必要加以说明。</p><p>在实际应用中，有一类特殊的<strong>平稳核函数</strong>（stationary kernel），它的参数是两个原始参数之差，也就是$k({\\bf x}, {\\bf x}’) = k({\\bf x} - {\\bf x}’)$。平稳核函数满足平移不变性（translation invariance），只要输入$\\bf x$和${\\bf x}’$的相对位置不变，核函数的取值就不会发生变化。如果在平移不变性的基础上再定义<strong>各向同性</strong>（homogeneity），那核函数的取值就会进一步与方向无关，这样的核函数就可以表示为$k({\\bf x}, {\\bf x}’) = k(|| {\\bf x} - {\\bf x}’ ||)$。</p><p>一种满足平移不变性和各向同性的核函数是<strong>径向基核</strong>（radial basis function kernel），其表达式为</p><p>$$ k({\\bf x}, {\\bf x}’) = \\exp(-\\dfrac{|| {\\bf x} - {\\bf x}’ || ^ 2}{2\\sigma ^ 2}) $$</p><p>在数学上可以推导出，径向基核所对应的特征映射是无穷维的，也就是隐式的特征空间是无穷维的空间。计算无穷维的特征映射是个复杂的任务，但径向基核的出现聪明地绕开了这个障碍。应用在支持向量机中，径向基核可以将线性边界变换成非线性边界。</p><p>在Scikit-learn中设置核函数的方法并不难，只需要将SVC类中的参数kernel设置为’rbf’即可（也可以使用其他类型的核函数）。径向基核的参数$\\sigma$决定了高斯函数的宽度，但在SVC类中，这个参数是以$\\gamma = 1 / 2\\sigma ^ 2$的形式出现的，这意味着调用SVC类时$\\gamma$设置得越大，核的宽度实际上就越窄。</p><p>除了核宽度之外，另一个需要需要设置的是正则化参数$C$，这个参数越大，正则化的效果就越弱，当$C$接近正无穷时，计算出来的就是未经正则化处理的结果。将径向基核应用到线性不可分的数据集中，就可以将两类数据完全分开，如下图所示。在结果中，较大的$C$让最优决策边界有过拟合的趋势。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/e2/66d924eaf06752e0230d0ef1f6c105e2.png?wh=1631*652\" alt=\"\"></p><p><span class=\"reference\">使用径向基核的支持向量机对曼城-西布朗数据集的分类结果</span></p><p><strong>除了简化内积运算之外，核函数更本质的意义在于对相似性度量（similarity measure）的表示</strong>。回忆一下线性代数的内容，内积表示的是两个向量之间的关系。如果将两个向量归一化后再来计算内积，那么求出来的就是两者之间的夹角。而作为原始内积的非线性拓展，核函数重新定义了数据的表征框架：将每个维度上的绝对坐标替换成两两之间的相似度。</p><p>这样一来，分类问题就变成了从几何意义出发，基于相似性度量在高维的特征空间上找到线性决策边界，再将它映射成低维空间上非线性的决策边界。</p><p>在直观的认识中，两个数据点相距越近，它们归属于同一类别的可能性就越高。如果将径向基的结果看成数据点相似度的话，那么$\\bf x$和${\\bf x}’$离得越近，两者之间的相似度就越高（接近于1）；反过来离得越远，相似度就越低（接近于0）。</p><p>接下来，计算出的相似度就成为分类的依据：和哪个类别的相似度高，未知的数据点就归属于哪个类别。和线性判别分析和逻辑回归这些参数化的分类模型相比，核函数更多地借鉴了物以类聚的简单逻辑。</p><p>将这种逻辑引申一步就可以得到，<strong>核函数是实现局部化（localization）的工具</strong>。在解决回归问题时，核函数本质上也是一组权重系数，但它和线性模型中权重系数的区别在于它是取决于距离的，由距离表征的相似度决定了系数的取值。在整体上，数据空间的全局参数并不能通过最小二乘等全局性方法计算出来，而是要将每个核函数所表示的局部尺度特征叠加在一起。</p><p>这样看来，每个核函数都像是战国中雄踞一方的诸侯，其势力在远离权力中心的过程中不断减弱。和这些叱咤一方的诸侯相比，作为全局参数模型的周天子就完全是个摆设了。</p><p>今天我和你分享了支持向量机中对偶和核技巧的概念与原理，其要点如下：</p><ul>\n<li>\n<p><span class=\"orange\">支持向量机在求解最优边界时需要利用对偶性，将原问题转化为对偶问题求解；</span></p>\n</li>\n<li>\n<p><span class=\"orange\">在思想上，核方法将高维空间上的线性边界转化成低维空间上的非线性边界；</span></p>\n</li>\n<li>\n<p><span class=\"orange\"> 在运算上，核技巧能在低维空间中直接计算高维空间中的内积；</span></p>\n</li>\n<li>\n<p><span class=\"orange\">核函数具有局部化的特点，是从全局模型到局部模型的过渡手段。</span></p>\n</li>\n</ul><p>其实在“人工智能基础课中”，高斯形式的径向基函数就有过亮相，它出现在径向基神经网络的介绍中。你可以复习一下这一部分的内容，借此加深对核函数与局部特性关系的理解。</p><p><strong>拓展阅读</strong></p><p><a href=\"https://time.geekbang.org/column/article/2447\">《人工神经网络 | 各人自扫门前雪：径向基函数神经网络》</a></p><p><span class=\"reference\">说明：知识具有内在联系性，有些内容在“人工智能基础课”里有不同角度的介绍。拓展阅读是为了让你更方便地回顾内容，如已订阅可以直接点击进入文章复习。不阅读，也不影响当前的学习。</span></p><p><img src=\"https://static001.geekbang.org/resource/image/28/a7/28e766563bb973126e37b6266b402aa7.jpg?wh=2379*2408\" alt=\"\"></p><p></p>","neighbors":{"left":{"article_title":"17 | 几何角度看分类：支持向量机","id":10640},"right":{"article_title":"19 | 非参数化的局部模型：K近邻","id":11216}},"comments":[{"had_liked":false,"id":115725,"user_name":"婉儿飞飞","can_delete":false,"product_type":"c1","uid":1484935,"ip_address":"","ucode":"191C3EAA2ABB3B","user_header":"https://static001.geekbang.org/account/avatar/00/16/a8/87/7b0a4036.jpg","comment_is_top":false,"comment_ctime":1563705267,"is_pvip":false,"replies":[{"id":"42377","content":"感谢认真阅读。你说的没错，文中前面也提到了KKT。但是因为没有做详细的展开，所以这里一概地把它归结到对偶性上，便显得突兀。你的留言对这个问题做了更清楚的说明，希望其他同学也能看到。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1563765246,"ip_address":"","comment_id":115725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10153639859","product_id":100008701,"comment_content":"“支持向量机对原问题和对偶问题之间等价关系的利用就是它的对偶性（duality）。”<br>这句话似乎也有点问题。首先，对偶性是拉格朗日函数的性质，任何带约束的非线性规划问题都可以写出对偶函数。<br>其次，主问题和对偶问题等价，不是利用了对偶性，而是因为满足KKT条件时，强对偶成立成立，也就是主偶问题的解相等。<br>最后，从拉格朗日函数里并不能看出最优解只和支持向量相关，而是由于KKT条件里的“对偶互补性条件”可推出。也就是，第j个输入向量的拉格朗日因子a_j大于0小于惩罚因子C时，向量j落在wx+b=1的边界上，从这里才能看出来只和支持向量相关。","like_count":2,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459257,"discussion_content":"感谢认真阅读。你说的没错，文中前面也提到了KKT。但是因为没有做详细的展开，所以这里一概地把它归结到对偶性上，便显得突兀。你的留言对这个问题做了更清楚的说明，希望其他同学也能看到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563765246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15916,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1531647458,"is_pvip":false,"replies":[{"id":"5513","content":"感谢你的仔细指出：<br>1. 应该是大于号，支持向量机的定义说的就是这个事情，这是不该有的错误。<br>2. 根据1可以得到，等式右侧那一项应该是小于0的，这是因为拉格朗日的形式一般是让约束条件满足小于0。<br>3. 这里的约束就是文中第一个表达式的约束，只有服从这个约束，拉格朗日才有最小值。<br>4. 这个过程是由数学运算和KKT保证的。它的目的是为了简化运算。直接用二次规划求原问题很复杂，运算复杂度取决于样本数目。引入拉格朗日这一套之后，求w变成了求alpha，而alpha中的非零项又不多，这样就可以简化运算。对偶问题的作用在吴恩达cs229支持向量机note的第13页有说明，你可以看看。<br>5. 深度学习中的优化 这一篇。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1531711160,"ip_address":"","comment_id":15916,"utype":1}],"discussion_count":0,"race_medal":0,"score":"10121582050","product_id":100008701,"comment_content":"支持向量机的推导公式我理解起来有些费劲。<br><br>(1) 第一组公式里s.t. yi(w⋅xi+b)≤1 是不是 s.t. yi(w⋅xi+b)≥1？这样在已知拉格朗日函数中alpha_i ≥ 0，后面的陈述“由于alpha_i 和 1−yi(w⋅xi+b)的符号相反，因此两者之积必然是小于0的“成立时需满足yi(w⋅xi+b)≥1。<br><br>(2) 我的理解：求解原问题（primal problem）相当于求解改写成所谓的广义拉格朗日函数（对偶函数？）的最大值（对于alpha）。因此“对于不是支持向量的数据点来说，等式右侧第二项中的1−yi(w⋅xi+b)是大于0的...”这句是不是可以写作“对于不是支持向量的数据点来说，等式右侧第二项中的1−yi(w⋅xi+b)是小于0的，因此在让L(w,b,α)最大化时，必须把这些点的贡献去除，去除的方式就是让系数alpha_i = 0”？<br><br>(3) “当参数w和b不满足原问题的约束时，总会找到能让目标函数取值为正无穷的alpha，这意味着最大值其实就是不存在。”里的参数w和b不满足原问题的约束等同于yi(w⋅xi+b)&lt;1和1−yi(w⋅xi+b)&gt;0？<br><br>(4) “原始的最小化问题就被等效为min&lt;w,b&gt;θp(w,b)⁡，也就是广义拉格朗日函数的极小极大问题”这里为什么等效于对于w和b求广义拉格朗日函数L(w,b,α)的最小值我不是太理解。除了我们需要寻找一个由w和b定义的超平面，它们到分类点的最近距离等同于||w||值最小（满足原问题的s.t.条件时）感觉有些联系外。就不太理解一个原来的受不等式约束的最小值问题是如何变成一个受等式约束（除了拉格朗日乘子的非负约束外）的既求最大值也求最小值的问题的。<br><br>(5) 上一季中的课程还未全部阅读。请问老师提到的鞍点（saddle point）是在哪一部分出现的？现在没什么印象了。谢谢。","like_count":2},{"had_liked":false,"id":18946,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1533612536,"is_pvip":false,"replies":[{"id":"6834","content":"核的带宽越小意味着每个样本点影响的范围就越小，新样本就越发取决于离它最近的训练数据。当带宽趋近于0时，核函数就变成1近邻了。<br>调小带宽肯定有利于降低训练误差，但也会增加过拟合的风险。如何调整这个超参数恐怕也没有一定之规，只能通过交叉验证找到训练误差和泛化误差的折中的最优值。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1533963957,"ip_address":"","comment_id":18946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5828579832","product_id":100008701,"comment_content":"王老师，请问径向基函数中的gamma参数变大，即高斯核的宽度变窄适用于什么场景？<br><br>调用scikit-learn的包时，一些默认参数无法分类的数据当把gamma值变大后，数据出现了较好分类的边界。什么情况下应该调整gamma参数？往什么方向调由什么因素决定？<br><br>谢谢。","like_count":1,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421681,"discussion_content":"核的带宽越小意味着每个样本点影响的范围就越小，新样本就越发取决于离它最近的训练数据。当带宽趋近于0时，核函数就变成1近邻了。\n调小带宽肯定有利于降低训练误差，但也会增加过拟合的风险。如何调整这个超参数恐怕也没有一定之规，只能通过交叉验证找到训练误差和泛化误差的折中的最优值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533963957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16005,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1531735603,"is_pvip":false,"replies":[{"id":"5553","content":"这个恐怕没什么关系，因为只要使用计算机就要用二进制。即使不是二进制也会是四进制六进制八进制这些离散的表示。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1531790292,"ip_address":"","comment_id":16005,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5826702899","product_id":100008701,"comment_content":"老师，现在人工智能依赖信息的表示方式吗？比如现在计算机处理的信息都是二进制表示的，如果换一种表示方式，人工只能还灵不灵？如果依赖的话，现在所遇到的各种难题会不会是二进制的局限性导致的？","like_count":1,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420633,"discussion_content":"这个恐怕没什么关系，因为只要使用计算机就要用二进制。即使不是二进制也会是四进制六进制八进制这些离散的表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531790292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233792,"discussion_content":"从信息论的角度看，任何进制都一样。二进制下解决不了的问题，其它进制也不能解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586945533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348924,"user_name":"炁氣气気","can_delete":false,"product_type":"c1","uid":3014925,"ip_address":"","ucode":"86134BE6F3568C","user_header":"","comment_is_top":false,"comment_ctime":1655555092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655555092","product_id":100008701,"comment_content":"各向同性不应该是isotropy吗？","like_count":0},{"had_liked":false,"id":48495,"user_name":"风的轨迹","can_delete":false,"product_type":"c1","uid":1130893,"ip_address":"","ucode":"C36CF174238AA1","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/8d/f14a278d.jpg","comment_is_top":false,"comment_ctime":1544453780,"is_pvip":false,"replies":[{"id":"18867","content":"感谢你的分享，能带给读者这样的启示是我最想看到的。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1545310119,"ip_address":"","comment_id":48495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544453780","product_id":100008701,"comment_content":"王老师这篇文章真好，我终于把与“核”相关的三个概念（核函数，核方法，核技巧）搞明白了。之前在别的教程里看到有&quot;先引入相似度函数，在相似度函数的基础上再引入核函数的&quot;这样的讲解方法。当时我就在想难道核方法和相似度上有某种联系？看了老师这篇文章才恍然大悟，原来核函数确实有局部化的特点。同时径向函数又把径向神经网络联系起来，透过知识点的相互联系我有感觉到这些相互联系的知识点背后可能存在一个更高层的思想把他们统一起来的感觉，我想我已经摸到了一些门路了吧","like_count":0,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432208,"discussion_content":"感谢你的分享，能带给读者这样的启示是我最想看到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545310119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43984,"user_name":"terency李","can_delete":false,"product_type":"c1","uid":1193292,"ip_address":"","ucode":"4C2C2F816016ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/4c/bba73ec1.jpg","comment_is_top":false,"comment_ctime":1543361756,"is_pvip":false,"replies":[{"id":"18872","content":"不是误分类点，而是与最优边界生成无关的数据点。边界只取决于距离最近的那几个异类点，离边界较远的都是非支持向量。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1545311102,"ip_address":"","comment_id":43984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543361756","product_id":100008701,"comment_content":"请问下老师，您文章里有句话是这么说的:<br>对于不是支持向量的数据点来说，等式右侧第二项中的 1−yi(w⋅xi+b)是大于 0 的<br>        不是支持向量的数据点指的是误分类点吗？如果不是，那按照原始优化问题说的yi(w⋅xi+b)≧1的，这就和你前面说的矛盾了","like_count":0,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430579,"discussion_content":"不是误分类点，而是与最优边界生成无关的数据点。边界只取决于距离最近的那几个异类点，离边界较远的都是非支持向量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545311102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23678,"user_name":"zhoujie","can_delete":false,"product_type":"c1","uid":1164523,"ip_address":"","ucode":"0C5F88276AD6D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/eb/0cd6d6ff.jpg","comment_is_top":false,"comment_ctime":1536585534,"is_pvip":false,"replies":[{"id":"8750","content":"对偶问题的作用在吴恩达cs229支持向量机note的第13页有说明，你可以看看。求解对偶问题相当于求解拉格朗日乘子alpha，而alpha只在支持向量上有非零取值。同时对偶问题中的内积运算可以用核技巧来处理，这些都可以简化运算。","user_name":"作者回复","user_name_real":"王天一","uid":"1027523","ctime":1536721963,"ip_address":"","comment_id":23678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536585534","product_id":100008701,"comment_content":"线性可分的支持向量机是一个标准的凸二次规划问题，求解起来轻松加随意，既然如此，那么对于线性可分的问题，为何要通过拉格朗日乘子引入它的对偶问题？","like_count":0,"discussions":[{"author":{"id":1027523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/c3/a9a0450b.jpg","nickname":"王天一","note":"","ucode":"142761D44C4C64","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423673,"discussion_content":"对偶问题的作用在吴恩达cs229支持向量机note的第13页有说明，你可以看看。求解对偶问题相当于求解拉格朗日乘子alpha，而alpha只在支持向量上有非零取值。同时对偶问题中的内积运算可以用核技巧来处理，这些都可以简化运算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536721963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15929,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1531659994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531659994","product_id":100008701,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;deepinC&#47;article&#47;details&#47;79341632和https:&#47;&#47;www.cnblogs.com&#47;90zeng&#47;p&#47;Lagrange_duality.html对于理解拉格朗日函数会有一些帮助。","like_count":0}]}