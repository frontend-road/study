{"id":80850,"title":"56 | 算法实战（五）：如何用学过的数据结构和算法实现一个短网址系统？","content":"<p>短网址服务你用过吗？如果我们在微博里发布一条带网址的信息，微博会把里面的网址转化成一个更短的网址。我们只要访问这个短网址，就相当于访问原始的网址。比如下面这两个网址，尽管长度不同，但是都可以跳转到我的一个GitHub开源项目里。其中，第二个网址就是通过新浪提供的短网址服务生成的。</p><pre><code>原始网址：https://github.com/wangzheng0822/ratelimiter4j\n短网址：http://t.cn/EtR9QEG\n</code></pre><p>从功能上讲，短网址服务其实非常简单，就是把一个长的网址转化成一个短的网址。作为一名软件工程师，你是否思考过，这样一个简单的功能，是如何实现的呢？底层都依赖了哪些数据结构和算法呢？</p><h2>短网址服务整体介绍</h2><p>刚刚我们讲了，短网址服务的一个核心功能，就是把原始的长网址转化成短网址。除了这个功能之外，短网址服务还有另外一个必不可少的功能。那就是，当用户点击短网址的时候，短网址服务会将浏览器重定向为原始网址。这个过程是如何实现的呢？</p><p>为了方便你理解，我画了一张对比图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/43/1cedb2511ec220d90d9caf71ef6c7643.jpg?wh=1142*749\" alt=\"\"></p><p>从图中我们可以看出，浏览器会先访问短网址服务，通过短网址获取到原始网址，再通过原始网址访问到页面。不过这部分功能并不是我们今天要讲的重点。我们重点来看，如何将长网址转化成短网址？</p><h2>如何通过哈希算法生成短网址？</h2><p>我们前面学过哈希算法。哈希算法可以将一个不管多长的字符串，转化成一个长度固定的哈希值。我们可以利用哈希算法，来生成短网址。</p><!-- [[[read_end]]] --><p>前面我们已经提过一些哈希算法了，比如MD5、SHA等。但是，实际上，我们并不需要这些复杂的哈希算法。在生成短网址这个问题上，毕竟，我们不需要考虑反向解密的难度，所以我们只需要关心哈希算法的计算速度和冲突概率。</p><p>能够满足这样要求的哈希算法有很多，其中比较著名并且应用广泛的一个哈希算法，那就是<a href=\"https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C\">MurmurHash算法</a>。尽管这个哈希算法在2008年才被发明出来，但现在它已经广泛应用到Redis、MemCache、Cassandra、HBase、Lucene等众多著名的软件中。</p><p>MurmurHash算法提供了两种长度的哈希值，一种是32bits，一种是128bits。为了让最终生成的短网址尽可能短，我们可以选择32bits的哈希值。对于开头那个GitHub网址，经过MurmurHash计算后，得到的哈希值就是181338494。我们再拼上短网址服务的域名，就变成了最终的短网址http://t.cn/181338494（其中，<a href=\"http://t.cn\">http://t.cn</a> 是短网址服务的域名）。</p><h3>1.如何让短网址更短？</h3><p>不过，你可能已经看出来了，通过MurmurHash算法得到的短网址还是很长啊，而且跟我们开头那个网址的格式好像也不一样。别着急，我们只需要稍微改变一个哈希值的表示方法，就可以轻松把短网址变得更短些。</p><p>我们可以将10进制的哈希值，转化成更高进制的哈希值，这样哈希值就变短了。我们知道，16进制中，我们用A～F，来表示10～15。在网址URL中，常用的合法字符有0～9、a～z、A～Z这样62个字符。为了让哈希值表示起来尽可能短，我们可以将10进制的哈希值转化成62进制。具体的计算过程，我写在这里了。最终用62进制表示的短网址就是<a href=\"http://t.cn/cgSqq%E3%80%82\">http://t.cn/cgSqq</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/15/f8/15e486a7db8d56a7b1c5ecf873b477f8.jpg?wh=1142*724\" alt=\"\"></p><h3>2.如何解决哈希冲突问题？</h3><p>不过，我们前面讲过，哈希算法无法避免的一个问题，就是哈希冲突。尽管MurmurHash算法，冲突的概率非常低。但是，一旦冲突，就会导致两个原始网址被转化成同一个短网址。当用户访问短网址的时候，我们就无从判断，用户想要访问的是哪一个原始网址了。这个问题该如何解决呢？</p><p>一般情况下，我们会保存短网址跟原始网址之间的对应关系，以便后续用户在访问短网址的时候，可以根据对应关系，查找到原始网址。存储这种对应关系的方式有很多，比如我们自己设计存储系统或者利用现成的数据库。前面我们讲到的数据库有MySQL、Redis。我们就拿MySQL来举例。假设短网址与原始网址之间的对应关系，就存储在MySQL数据库中。</p><p>当有一个新的原始网址需要生成短网址的时候，我们先利用MurmurHash算法，生成短网址。然后，我们拿这个新生成的短网址，在MySQL数据库中查找。</p><p>如果没有找到相同的短网址，这也就表明，这个新生成的短网址没有冲突。于是我们就将这个短网址返回给用户（请求生成短网址的用户），然后将这个短网址与原始网址之间的对应关系，存储到MySQL数据库中。</p><p>如果我们在数据库中，找到了相同的短网址，那也并不一定说明就冲突了。我们从数据库中，将这个短网址对应的原始网址也取出来。如果数据库中的原始网址，跟我们现在正在处理的原始网址是一样的，这就说明已经有人请求过这个原始网址的短网址了。我们就可以拿这个短网址直接用。如果数据库中记录的原始网址，跟我们正在处理的原始网址不一样，那就说明哈希算法发生了冲突。不同的原始网址，经过计算，得到的短网址重复了。这个时候，我们该怎么办呢？</p><p>我们可以给原始网址拼接一串特殊字符，比如“[DUPLICATED]”，然后再重新计算哈希值，两次哈希计算都冲突的概率，显然是非常低的。假设出现非常极端的情况，又发生冲突了，我们可以再换一个拼接字符串，比如“[OHMYGOD]”，再计算哈希值。然后把计算得到的哈希值，跟原始网址拼接了特殊字符串之后的文本，一并存储在MySQL数据库中。</p><p>当用户访问短网址的时候，短网址服务先通过短网址，在数据库中查找到对应的原始网址。如果原始网址有拼接特殊字符（这个很容易通过字符串匹配算法找到），我们就先将特殊字符去掉，然后再将不包含特殊字符的原始网址返回给浏览器。</p><h3>3.如何优化哈希算法生成短网址的性能？</h3><p>为了判断生成的短网址是否冲突，我们需要拿生成的短网址，在数据库中查找。如果数据库中存储的数据非常多，那查找起来就会非常慢，势必影响短网址服务的性能。那有没有什么优化的手段呢？</p><p>还记得我们之前讲的MySQL数据库索引吗？我们可以给短网址字段添加B+树索引。这样通过短网址查询原始网址的速度就提高了很多。实际上，在真实的软件开发中，我们还可以通过一个小技巧，来进一步提高速度。</p><p>在短网址生成的过程中，我们会跟数据库打两次交道，也就是会执行两条SQL语句。第一个SQL语句是通过短网址查询短网址与原始网址的对应关系，第二个SQL语句是将新生成的短网址和原始网址之间的对应关系存储到数据库。</p><p>我们知道，一般情况下，数据库和应用服务（只做计算不存储数据的业务逻辑部分）会部署在两个独立的服务器或者虚拟服务器上。那两条SQL语句的执行就需要两次网络通信。这种IO通信耗时以及SQL语句的执行，才是整个短网址服务的性能瓶颈所在。所以，为了提高性能，我们需要尽量减少SQL语句。那又该如何减少SQL语句呢？</p><p>我们可以给数据库中的短网址字段，添加一个唯一索引（不只是索引，还要求表中不能有重复的数据）。当有新的原始网址需要生成短网址的时候，我们并不会先拿生成的短网址，在数据库中查找判重，而是直接将生成的短网址与对应的原始网址，尝试存储到数据库中。如果数据库能够将数据正常写入，那说明并没有违反唯一索引，也就是说，这个新生成的短网址并没有冲突。</p><p>当然，如果数据库反馈违反唯一性索引异常，那我们还得重新执行刚刚讲过的“查询、写入”过程，SQL语句执行的次数不减反增。但是，在大部分情况下，我们把新生成的短网址和对应的原始网址，插入到数据库的时候，并不会出现冲突。所以，大部分情况下，我们只需要执行一条写入的SQL语句就可以了。所以，从整体上看，总的SQL语句执行次数会大大减少。</p><p>实际上，我们还有另外一个优化SQL语句次数的方法，那就是借助布隆过滤器。</p><p>我们把已经生成的短网址，构建成布隆过滤器。我们知道，布隆过滤器是比较节省内存的一种存储结构，长度是10亿的布隆过滤器，也只需要125MB左右的内存空间。</p><p>当有新的短网址生成的时候，我们先拿这个新生成的短网址，在布隆过滤器中查找。如果查找的结果是不存在，那就说明这个新生成的短网址并没有冲突。这个时候，我们只需要再执行写入短网址和对应原始网页的SQL语句就可以了。通过先查询布隆过滤器，总的SQL语句的执行次数减少了。</p><p>到此，利用哈希算法来生成短网址的思路，我就讲完了。实际上，这种解决思路已经完全满足需求了，我们已经可以直接用到真实的软件开发中。不过，我们还有另外一种短网址的生成算法，那就是利用自增的ID生成器来生成短网址。我们接下来就看一下，这种算法是如何工作的？对于哈希算法生成短网址来说，它又有什么优势和劣势？</p><h2>如何通过ID生成器生成短网址？</h2><p>我们可以维护一个ID自增生成器。它可以生成1、2、3…这样自增的整数ID。当短网址服务接收到一个原始网址转化成短网址的请求之后，它先从ID生成器中取一个号码，然后将其转化成62进制表示法，拼接到短网址服务的域名（比如<a href=\"http://t.cn/\">http://t.cn/</a>）后面，就形成了最终的短网址。最后，我们还是会把生成的短网址和对应的原始网址存储到数据库中。</p><p>理论非常简单好理解。不过，这里有几个细节问题需要处理。</p><h3>1.相同的原始网址可能会对应不同的短网址</h3><p>每次新来一个原始网址，我们就生成一个新的短网址，这种做法就会导致两个相同的原始网址生成了不同的短网址。这个该如何处理呢？实际上，我们有两种处理思路。</p><p>第一种处理思路是<strong>不做处理</strong>。听起来有点无厘头，我稍微解释下你就明白了。实际上，相同的原始网址对应不同的短网址，这个用户是可以接受的。在大部分短网址的应用场景里，用户只关心短网址能否正确地跳转到原始网址。至于短网址长什么样子，他其实根本就不关心。所以，即便是同一个原始网址，两次生成的短网址不一样，也并不会影响到用户的使用。</p><p>第二种处理思路是<strong>借助哈希算法生成短网址的处理思想，</strong>当要给一个原始网址生成短网址的时候，我们要先拿原始网址在数据库中查找，看数据库中是否已经存在相同的原始网址了。如果数据库中存在，那我们就取出对应的短网址，直接返回给用户。</p><p>不过，这种处理思路有个问题，我们需要给数据库中的短网址和原始网址这两个字段，都添加索引。短网址上加索引是为了提高用户查询短网址对应的原始网页的速度，原始网址上加索引是为了加快刚刚讲的通过原始网址查询短网址的速度。这种解决思路虽然能满足“相同原始网址对应相同短网址”这样一个需求，但是是有代价的：一方面两个索引会占用更多的存储空间，另一方面索引还会导致插入、删除等操作性能的下降。</p><h3>2.如何实现高性能的ID生成器？</h3><p>实现ID生成器的方法有很多，比如利用数据库自增字段。当然我们也可以自己维护一个计数器，不停地加一加一。但是，一个计数器来应对频繁的短网址生成请求，显然是有点吃力的（因为计数器必须保证生成的ID不重复，笼统概念上讲，就是需要加锁）。如何提高ID生成器的性能呢？关于这个问题，实际上，有很多解决思路。我这里给出两种思路。</p><p>第一种思路是借助第54节中讲的方法。我们可以给ID生成器装多个前置发号器。我们批量地给每个前置发号器发送ID号码。当我们接受到短网址生成请求的时候，就选择一个前置发号器来取号码。这样通过多个前置发号器，明显提高了并发发号的能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/35/8fde8862e17b1bdf7779f2b60b166335.jpg?wh=1142*825\" alt=\"\"></p><p>第二种思路跟第一种差不多。不过，我们不再使用一个ID生成器和多个前置发号器这样的架构，而是，直接实现多个ID生成器同时服务。为了保证每个ID生成器生成的ID不重复。我们要求每个ID生成器按照一定的规则，来生成ID号码。比如，第一个ID生成器只能生成尾号为0的，第二个只能生成尾号为1的，以此类推。这样通过多个ID生成器同时工作，也提高了ID生成的效率。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/1a/bfeb7fc556b1fe5f9b768ce5ec90321a.jpg?wh=1142*603\" alt=\"\"></p><h2>总结引申</h2><p>今天，我们讲了短网址服务的两种实现方法。我现在来稍微总结一下。</p><p>第一种实现思路是通过哈希算法生成短网址。我们采用计算速度快、冲突概率小的MurmurHash算法，并将计算得到的10进制数，转化成62进制表示法，进一步缩短短网址的长度。对于哈希算法的哈希冲突问题，我们通过给原始网址添加特殊前缀字符，重新计算哈希值的方法来解决。</p><p>第二种实现思路是通过ID生成器来生成短网址。我们维护一个ID自增的ID生成器，给每个原始网址分配一个ID号码，并且同样转成62进制表示法，拼接到短网址服务的域名之后，形成最终的短网址。</p><h2>课后思考</h2><ol>\n<li>\n<p>如果我们还要额外支持用户自定义短网址功能（http//t.cn/{用户自定部分}），我们又该如何改造刚刚的算法呢?</p>\n</li>\n<li>\n<p>我们在讲通过ID生成器生成短网址这种实现思路的时候，讲到相同的原始网址可能会对应不同的短网址。针对这个问题，其中一个解决思路就是，不做处理。但是，如果每个请求都生成一个短网址，并且存储在数据库中，那这样会不会撑爆数据库呢？我们又该如何解决呢？</p>\n</li>\n</ol><hr><p><span class=\"orange\">今天是农历的大年三十，我们专栏的正文到这里也就全部结束了。从明天开始，我会每天发布一篇练习题，内容针对专栏涉及的数据结构和算法。从初一到初七，帮你复习巩固所学知识，拿下数据结构和算法，打响新年进步的第一枪！明天见！</span></p>","comments":[{"had_liked":false,"id":65297,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1549212079,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"731693652399","product_id":100017301,"comment_content":"随着新年的到来，我们的算法专栏也到了尾声。有点怀念那段时间工作不忙，一天能有好几个小时，阅读和思考算法专栏。<br><br>专栏给我带来的收获不仅仅是数据结构和算法的知识。在这之前虽然也每天学习，但总是东一块西一块，没有系统和脉络，一段时间之后，看似学了很多，但并没有什么效果。<br><br>在学习算法课程的过程中，基本都在学习和思考专栏的内容。一般第一天过一遍概念，一边阅读一边手敲。第二天会把重点放在思考上，为什么需要这种数据结构和算法，它的利弊是什么，以及解答思考题。<br><br>真正有收获的是思考和实践而不是阅读，阅读只是表象；如果只是阅读，也没有生字，会很轻松，但效果甚微。<br><br>这让我切身体会到系统和专注的重要性。<br><br>这种经历帮助我在实际工作中解决不少问题，不是说用到了哪种算法，而是在遇到问题时善于花时间去思考解决方案，而不是一味地寻找替代方案，把问题绕过去。<br><br>紧跟着老师的脚步学下来了，不能说都掌握了，但有几点学习的心得想跟大家分享。<br><br>1、迈出第一步。很多事情不是我们不会做，而是不想开始。一想到前面可能会有重重困难，思想上就先败下阵来了。只要开始一点点的弄懂，重在培养兴趣。<br><br>2、慢一点，不贪多。可能有同学落下很多课，看看还有这么多没学，干脆就放弃了。其实并不需要掌握所有的，可以挑选自己感兴趣的内容，细嚼慢咽，先掌握一部分。再从已知探索未知，其实文章之间很多是有关联的，学习过程中可能自个儿就串起来了。<br><br>3、多动手。阅读和思考还是远远不够的，带着文章的思路，用自己熟悉的语言实现一遍，跑起来测一测，会更有成就感，也是自己学习的痕迹。<br><br>虽然专栏学完了，然而有些内容很快就会忘记，后面我还会偶尔拿出来读一读，回顾一下思路。我现在已经欣然接受，学习的东西很快会遗忘，但回顾的时候会迅速地想起来，印象也更深刻了。<br><br>最后，祝王争老师和编辑小姐姐新年快乐，辛苦了。(´▽`ʃ♡ƪ)<br>","like_count":171,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40643,"discussion_content":"自己写代码确实比看代码难多了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1572249526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044785,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f1/31/5001390b.jpg","nickname":"Lonely绿豆蛙","note":"","ucode":"0862179B614974","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306784,"discussion_content":"订阅一年后刷题过程中重新看，更有感触","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600390003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334203,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607764220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65323,"user_name":"李","can_delete":false,"product_type":"c1","uid":1119312,"ip_address":"","ucode":"5C0FAA211F2E26","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","comment_is_top":false,"comment_ctime":1549242790,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"164758000038","product_id":100017301,"comment_content":"以前觉得数据结构和算法很难，学了之后，确实也难，但通过系统学习，心中有了一张完整的地图，以后只要不断反复看，反复学习，反复练习，一定能真正融合贯通。<br>另外，最大的感受是学了数据结构和算法后，看其它中间件和框架的源代码，发现大部分底层就是数据结构和算法。感觉练了九阳神功一样，学习其它功夫快了很多","like_count":38,"discussions":[{"author":{"id":1156012,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/ac/69c66da7.jpg","nickname":"jiankewuming","note":"","ucode":"78D9F8DBC28048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107664,"discussion_content":"有九阳神功护体，学什么都快","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577597231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352259,"discussion_content":"就像你说的，之前感觉程序里的逻辑好复杂，\n但是说白了就是数据结构和算法，\n算法的掌握是渐进性的，\n数据结构也要连接，\n心里有了地图，就不怕在数据结构和算法需要实践的地方迷路了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614666551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352257,"discussion_content":"说得太好了😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614666450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66041,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1549856150,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"147578744214","product_id":100017301,"comment_content":"问题一:<br>- 尝试将用户 自定义后的短网址 和 原网址的映射关系 存入数据库<br>  - 插入成功, 则提示用户短网址生成成功<br>  - 若插入失败, 说明存在冲突, 则进行判重处理<br>     - 若数据库中短网址对应的原网址与当前正在处理的相同, 提示该短网址有效 <br>     - 若数据库中短网址对应的原网址与当前正在处理的不相同, 提示该短网址已被占用 <br><br>问题二:<br>可以使用布隆过滤器进行判重验证, 通过之后再插入","like_count":34,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96844,"discussion_content":"让用户去改就很难受了。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577096240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346287,"discussion_content":"总得有唯一标识吧，如果短网址不判重，就得标识区分用户，需要更多信息，更难受了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611901173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96844,"ip_address":""},"score":346287,"extra":""}]}]},{"had_liked":false,"id":65344,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1549260681,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"108923443081","product_id":100017301,"comment_content":"坚持到了最后，虽然只看不写，但也加深了对数据结构的认识，接下来刷第二遍的时候再加深代码实践。最后祝大家新年快乐！顺便说句，老师的这个专栏真的很良心，谢谢了！","like_count":25,"discussions":[{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546759,"discussion_content":"想问下二刷了吗o(*￣︶￣*)o","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642416972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1249195,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","nickname":"微秒","note":"","ucode":"65A2E8B565B191","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570841,"discussion_content":"刷了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651935216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546759,"ip_address":""},"score":570841,"extra":""}]}]},{"had_liked":false,"id":65883,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1549722187,"is_pvip":false,"replies":[{"id":"24284","content":"比如微博里，网址如果很长，看起来不美观。缩短成短网址之后，短短的，不占空间，不是更好看些吗：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550541926,"ip_address":"","comment_id":65883,"utype":1}],"discussion_count":11,"race_medal":0,"score":"91744035403","product_id":100017301,"comment_content":"王老师短网址有什么作用吗？ 我上网查了下理由不能说服我？<br>可能网上说得比较浅显，王老师方便指导下吗？","like_count":21,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438626,"discussion_content":"比如微博里，网址如果很长，看起来不美观。缩短成短网址之后，短短的，不占空间，不是更好看些吗：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550541926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1419723,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a9/cb/a431bde5.jpg","nickname":"木头发芽","note":"","ucode":"657B381C5DA963","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216968,"discussion_content":"来来，给你一个我生产中碰到的理由，短网址生成的二维码简单清晰，老远一扫就可以，长网站密集，不容易扫","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1585493733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401377,"avatar":"https://static001.geekbang.org/account/avatar/00/15/62/21/7a382e8f.jpg","nickname":"若未","note":"","ucode":"DFC63F476793A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273342,"discussion_content":"一个主要用途是短信发送促销，短信字数太长会截成两条，费钱。二是美观，分享链接是短链接就看着美观多了","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1590450856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e3/72/754314c2.jpg","nickname":"Jackson","note":"","ucode":"A76BC6A4EE13A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117300,"discussion_content":"其实我用的地方是微信，微信跳转是看不到还原的原地址的，原地址上面有一些参数，好比活动id啥的，直接把原链接发送出去，你就会看到活动id=12这样的那么别的用户或者懂的就会改成13 或者14，这样的去请求我们的服务器，这样会有一定的影响，所以就生成短链接了。还有就是地方会对链接长度有限制，也是可以用到短链接的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1578107479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1624590,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ca/0e/5009c5ff.jpg","nickname":"遇见","note":"","ucode":"FAF53CD4C28494","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284465,"discussion_content":"一个真实的案例: facebook分享链接的长度有限制，超出长度限制会自动截取，就会出现有的链接分享成功之后可以打开，有的打不开（因为一些关键的参数被截取掉了），因为这个原因当时临时开发了一个短网址系统。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1592538705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71676,"discussion_content":"老微博限制140個字的年代，如果不用短網址，好多網址你都發不出來，當然限制微博字數擴展到2000漢字了就可以不用短網址，但是用了依然是更好的選擇，短網址長度固定，不會分散閱讀這注意力","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575447270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007461,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5f/65/5980b35b.jpg","nickname":"数据之禅","note":"","ucode":"11AF7824BA51A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76786,"discussion_content":"短网址一个作用还可以跟踪记录某个链接被打开的次数，比如在一些电商场景，会统计从不同的流量来源进来的比例，虽然可能有一定的误差，可以作为一种参考","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575854323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2204462,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IY4fLqdVwCPlW7xJicz3nZm4OePT0o20tDZj1Hiauk2b0iaHMQcSOGpamLt9b72hYVG72sgRWic1BHY3uCvibWcfickw/132","nickname":"Grocker","note":"","ucode":"DF2E19A65DEAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336537,"discussion_content":"推特也有类似的功能，发送的推文有长度限制(280个字符)，用短网址可以多发些内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608621297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311724,"discussion_content":"1）、微博网页端锻炼更容易看，手机端会自动转换\n2）、短链生成的二维码精简，容易扫\n3）、手机短信业务对于长度有严格限制，短链省成本，而且如果短链有修改与指定权限，可以做的就更多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602473450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1086295,"avatar":"https://static001.geekbang.org/account/avatar/00/10/93/57/3ffdfc8d.jpg","nickname":"vigo","note":"","ucode":"036CEE5F3FABE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217937,"discussion_content":"一般营销短信里比较多，二维码也用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585585407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1520252,"avatar":"https://static001.geekbang.org/account/avatar/00/17/32/7c/49afd64d.jpg","nickname":"lyfnnn","note":"","ucode":"63DCD97D1A8D4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138584,"discussion_content":"很多短信里面链接都是短地址，商家发送短信可以省钱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579254469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177200,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1581319652,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"78890730980","product_id":100017301,"comment_content":"短网址服务整体介绍<br><br>浏览器会先访问短网址服务，通过短网址获取到原始网址，再通过原始网址访问到页面<br><br>如何通过哈希算法生成短网址？<br>\t* 哈希算法可以将一个不管多长的字符串，转化成一个长度固定的哈希值。可以利用哈希算法，来生成短网址<br>\t* 在生成短网址不需要MD5、SHA等复杂的哈希算法，不需要考虑反向解密的难度，所以只需要关心哈希算法的计算速度和冲突概率<br>\t* 比较著名并且应用广泛的一个哈希算法是MurmurHash 算法。被广泛应用到 Redis、MemCache、Cassandra、HBase、Lucene 等众多著名的软件中<br>\t* MurmurHash 算法提供了两种长度的哈希值：（1）32bits，（2） 128bits。为了让最终生成的短网址尽可能短可选择 32bits 的哈希值<br><br>1. 如何让短网址更短？<br>\t* 可以将 10 进制的哈希值，转化成更高进制的哈希值，这样哈希值就变短了<br>\t* 为了让哈希值表示起来尽可能短，将 10 进制的哈希值转化成 62 进制<br><br>2. 如何解决哈希冲突问题？<br>\t* 保存短网址跟原始网址之间的对应关系，以便根据对应关系，查找到原始网址<br>\t* 存储这种对应关系的方式有很多，如我们自己设计存储系统或者利用现成的数据库<br>\t* 先利用 MurmurHash 算法生成短网址，然后拿这个新生成的短网址，在 MySQL 数据库中查找<br>\t* 如果没有找到相同的短网址，即没有冲突。就将这个短网址返回给用户，并将对应关系存储到 MySQL 数据库中。<br>\t* 如果找到了相同的短网址，那从数据库中将这个短网址对应的原始网址也取出来。<br>\t\t* 如果数据库中的原始网址，跟在正在处理的原始网址是一样的，则直接使用<br>\t\t* 如果跟正在处理的原始网址不一样，就说明哈希算法发生了冲突。<br><br><br>不同的原始网址得到的短网址重复了，该怎么办？<br>\t* 可以给原始网址拼接一串特殊字符，再重新计算哈希值，两次哈希计算都冲突的概率是非常低的<br>\t* 假设出现非常极端的情况，又发生冲突了，我们可以再换一个拼接字符串，再计算哈希值<br>\t* 当用户访问短网址的时候，短网址服务先通过短网址，在数据库中查找到对应的原始网址。先将特殊字符去掉，然后再返回给浏览器<br><br>3. 如何优化哈希算法生成短网址的性能？<br>如果数据库中存储的数据非常多，查找起来就会非常慢<br>\t* 可以给短网址字段添加 B+ 树索引，这样通过短网址查询原始网址的速度就提高了很多<br>\t* 在短网址生成的过程中，会执行两条 SQL 语句。第一个是通过短网址查询短网址与原始网址的对应关系，第二个是将新生成的短网址和原始网址之间的对应关系存储到数据库。<br>\t* 这种 IO 通信耗时以及 SQL 语句的执行，才是整个短网址服务的性能瓶颈所在。为了提高性能，需要尽量减少 SQL 语句<br><br>如何减少 SQL 语句呢？<br>\t* 可以给数据库中的短网址字段添加一个唯一索引（不止是索引，还要求表中不能有重复的数据）<br>\t* 直接尝试将生成的短网址与对应的原始网址存储到数据库中<br>\t* 如果数据库能够将数据正常写入，那说明并没有违反唯一索引，没有冲突<br>\t* 如果数据库反馈违反唯一性索引异常，重新执行刚刚讲过的“查询、写入”过程<br><br>另外方法借助布隆过滤器<br>\t* 当有新的短网址生成时，先拿新生成的短网址在布隆过滤器中查找<br>\t* 如果查找的结果不存在，就说明没有冲突，直接写入<br><br>如何通过 ID 生成器生成短网址？<br>\t* 维护一个 ID 自增生成器，可以生成 1、2、3…这样自增的整数 ID。<br>\t* 当接收请求后，先从 ID 生成器中取一个号码并将其转化成 62 进制表示法，拼接到短网址服务的域名后面，就形成了最终的短网址<br><br>1. 相同的原始网址可能会对应不同的短网址<br>有两种处理思路：<br>（1）不做处理，大部分场景里，用户根本就不关心短网址长什么样子<br>（2）借助哈希算法生成短网址的处理思想，要先拿原始网址在数据库中查找，如果存在，直接返回给用户<br>\t* 这种处理思路的问题：需要给数据库中的短网址和原始网址这两个字段，都添加索引<br>\t* 这种解决思路是的代价：一：两个索引会占用更多的存储空间，二：索引还会导致插入、删除等操作性能的下降。<br><br>2. 如何实现高性能的 ID 生成器？<br>\t* （1）给 ID 生成器装多个前置发号器，批量地给每个前置发号器发送 ID 号码<br>\t* 当接受请求时，就选择一个前置发号器来取号码。通过多个前置发号器，提高并发发号的能力<br><br>\t* （2）直接实现多个 ID 生成器同时服务<br>\t* 为了保证每个 ID 生成器生成的 ID 不重复，每个 ID 生成器按照一定的规则来生成 ID 号码<br>\t* 这样通过多个 ID 生成器同时工作，也提高了 ID 生成的效率<br><br>","like_count":18,"discussions":[{"author":{"id":1243570,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","nickname":"社会你强哥","note":"","ucode":"325B9005588D9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263989,"discussion_content":"总结得很到位啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589276880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85032,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1554962749,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"61684504893","product_id":100017301,"comment_content":"追到这里，终于有底气在简历上写上一行熟悉各种数据结构与算了^_^.<br>感谢王争老师，下一步就是利用leetcode进一步提升自己的算法功底，<br>将熟悉变成精通","like_count":15,"discussions":[{"author":{"id":1850499,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/83/93e7af9e.jpg","nickname":"兰柯","note":"","ucode":"6D7230B3CE8722","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181346,"discussion_content":"就像去面腾讯说自己c++贼6","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582362862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96846,"discussion_content":"em 熟悉。。。\n感觉这个形容词，要求略高","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577096297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325763,"discussion_content":"没刷个300题不敢说熟悉...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605427212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277668,"discussion_content":"我只写熟悉常用的数据结构与算法。。😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591089627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176157,"user_name":"Chuan","can_delete":false,"product_type":"c1","uid":1438352,"ip_address":"","ucode":"FACEC5DAC36A7A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4akcIyIOXB2OqibTe7FF90hwsBicxkjdicUNTMorGeIictdr3OoMxhc20yznmZWwAvQVThKPFWgOyMw/132","comment_is_top":false,"comment_ctime":1580974941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44530647901","product_id":100017301,"comment_content":"终于把老师的算法专栏看完了，断断续续花了几个月时间，有听懂的做了笔记并实现了一遍的，也有没听懂的跳过的（红黑树。。。）。最重要的收获应该是对算法和数据结构有个一个整体的认识，并且加深了自己的理解。虽然很快就会忘，但是再看一遍，也能够很快回忆起来。<br><br>在一个专栏这么多篇文章面前，很多时候由于惰性、畏惧感等因素，导致我们荒废。但真的是看了就赚了，和自己斗争才是最有意思的。非常感谢老师，接下来准备继续学习老师的设计模式了，期待老师带来更多的惊喜。（PS：有几篇课老师好像说要补充的，这都快一年了哦^_^）","like_count":11},{"had_liked":false,"id":139108,"user_name":"steve","can_delete":false,"product_type":"c1","uid":1354489,"ip_address":"","ucode":"AB6D3E9FF8E77C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJETibDh9wrP19gj9VdlLRmppuG1FibI7nyUGldEXCnoqKibKIB18UMxyEHBkZNlf5vibLNeofiaN5U6Hw/132","comment_is_top":false,"comment_ctime":1570546814,"is_pvip":false,"replies":[{"id":"53766","content":"分库分表存储啊，或者用一些大型key-value数据库","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570660447,"ip_address":"","comment_id":139108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40225252478","product_id":100017301,"comment_content":"思考题2想了很久没想到好的办法，还请老师解答。<br>看大家的方法貌似是把老的url批量删掉，那如果需求不允许失效老url是不是就没有办法了呢？","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469795,"discussion_content":"分库分表存储啊，或者用一些大型key-value数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570660447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65331,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1549248375,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40203954039","product_id":100017301,"comment_content":"兴趣是最好的老师，这话没有错。如果没有兴趣那就去找。就我个人看法，很多时候一开始不一定非要搞那么枯燥的东西，做一些有趣的东西，慢慢培养自己的兴趣，自己就会有好奇心去往深处学习，如果以来就弄那些很“艰深”的东西，可能不能坚持多久，“从入门到放弃”。学习老师这个专栏，我最大的收获就在于老师把平时课上那些算法讲活了，应用到具体场景之中，相较于一些为了练习而联系的习题，这让我更能体会到算法之美。也在不断激发我的好奇心。我希望自己能够一直抱持这份好奇心。继续努力学习。","like_count":9,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334204,"discussion_content":"同感觉。要为了刷leetcode，实在没兴趣。但是通过这门课，建立基本的思维套路和解决问题的分析习惯，且和日常碰到的问题结合起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607764601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170676,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1578662769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35938401137","product_id":100017301,"comment_content":"本来想针对思考题二说一点的，结果评论翻到了(*^▽^)&#47;★*☆，数据量大，如果用的传统关系型数据库，就可以采用水平分表，这里好像用不到垂直分表，因为没什么别的无关字段。同时可以考虑分库的情况，通过中间件路由到不同的数据库中。<br><br>不过关系型数据库设计之初对数据预估不完全的话，就算分库分表了，依然会造成单表数据巨大，这个时候再来做数据迁移成本极高，所有数据又要全部重新分库分表。这个时候就轮到NoSQL出场了，因为它天生就支持分库分表，而且扩展性也优秀。","like_count":8},{"had_liked":false,"id":66056,"user_name":"bens","can_delete":false,"product_type":"c1","uid":1105068,"ip_address":"","ucode":"8B49F26AB098F7","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/ac/905fbf6b.jpg","comment_is_top":false,"comment_ctime":1549866014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35909604382","product_id":100017301,"comment_content":"id生成器用snowflake算法解决","like_count":8},{"had_liked":false,"id":65338,"user_name":"一涛","can_delete":false,"product_type":"c1","uid":1078120,"ip_address":"","ucode":"388E16D65A2B5D","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/68/ae13bd32.jpg","comment_is_top":false,"comment_ctime":1549249859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35908988227","product_id":100017301,"comment_content":"1. 首先查询“用户自定义部分”是否与已经生成的短网址冲突，如果冲突，只能提示用户进行修改。如果不冲突，将“用户自定义部分”和对应的原始网址写入数据库即可。<br><br>2. 给原始网址加唯一索引。如果写入异常，说明原始网址已经存在，再根据原始网址查询一次，取出短网址返回给用户。<br><br>不知道回答对不对，请老师指正","like_count":9},{"had_liked":false,"id":66759,"user_name":"实验室清洁工","can_delete":false,"product_type":"c1","uid":1198345,"ip_address":"","ucode":"ECF771E7141DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/09/58c0a054.jpg","comment_is_top":false,"comment_ctime":1550017723,"is_pvip":false,"replies":[{"id":"24606","content":"是的，62进制会更短些","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550716739,"ip_address":"","comment_id":66759,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31614788795","product_id":100017301,"comment_content":"应该是16进制吧，62进制？？？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438896,"discussion_content":"是的，62进制会更短些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550716739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284153,"avatar":"https://static001.geekbang.org/account/avatar/00/13/98/39/da882fb6.jpg","nickname":"xd","note":"","ucode":"501543688CB1A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2386,"discussion_content":"嗯，你没有看错，就是62进制， 0-9 有10个数， a-z有26个数，A-Z有26个数，加起来不就62个元素么，刚好表示62进制","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1563530887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96847,"discussion_content":"参考16进制，设计了 62进制呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577096330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180681,"user_name":"兰柯","can_delete":false,"product_type":"c1","uid":1850499,"ip_address":"","ucode":"6D7230B3CE8722","user_header":"https://static001.geekbang.org/account/avatar/00/1c/3c/83/93e7af9e.jpg","comment_is_top":false,"comment_ctime":1582363352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23057199832","product_id":100017301,"comment_content":"11天粗刷完一遍专栏，大四学生，想做推荐，自从大二上完数据结构就再也没碰过红黑树b树这样的算法了，每天面对的是马尔可夫贝叶斯蒙特卡洛吉布斯这些大佬，每天和各种数学纠缠，可能自己对这个领域还不够深入，但是我学机器学习的时候的的确确没有碰到过数据结构的问题，倒是日常的数学问题，所以对数据结构这种基础课放松了，现在打算给数据结构时间了，毕竟大厂面试也得刷题。","like_count":5},{"had_liked":false,"id":168558,"user_name":"Jackson","can_delete":false,"product_type":"c1","uid":1237874,"ip_address":"","ucode":"A76BC6A4EE13A1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/72/754314c2.jpg","comment_is_top":false,"comment_ctime":1578110295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052946775","product_id":100017301,"comment_content":"之前没有坚持下来，拖了很久，觉得不应该辜负了自己花的钱还有就是老师的辛苦，所以咬咬牙重新开始从第一讲开始学习，终于学完了，但是我觉得我还会继续看第二遍第三遍的，因为每次学习都会有不一样的知识，都能想到不一样的问题和思路，最后说一句，谢谢老师。","like_count":5},{"had_liked":false,"id":283907,"user_name":"顾骨","can_delete":false,"product_type":"c1","uid":1131165,"ip_address":"","ucode":"3F6BA592AB7723","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/9d/c36b7ef7.jpg","comment_is_top":false,"comment_ctime":1615979710,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18795848894","product_id":100017301,"comment_content":"打卡，从2020.3月到现在，每天坚持学一点，现在终于学完了，课程中的大部分算法都用GO实现了，为自己点个赞","like_count":4},{"had_liked":false,"id":233281,"user_name":"黑客时间","can_delete":false,"product_type":"c1","uid":1831324,"ip_address":"","ucode":"7E22D76EECAC4D","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f1/9c/cd12361d.jpg","comment_is_top":false,"comment_ctime":1594278235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479180123","product_id":100017301,"comment_content":"hash值出现负数怎么处理，直接去绝对值吗","like_count":4},{"had_liked":false,"id":175280,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1580640986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14465542874","product_id":100017301,"comment_content":"关于如何实现高性能的ID生成器，文中介绍了两种思路，一种是事先把ID批量生成好，放到多个前置发号器中；第二种是直接使用多个ID生成器，生成尾号不同的ID。<br>在我看来这都是分治的思想，都是按照一定的规则，将原来的一条队列分成N条队列来处理，这样就提高了并发的能力。<br>两者最大的区别在于，前者是事先把ID生成好的，有请求时直接来取号就行了；而后者是有请求来的时候再去生成ID。<br>当ID生成算法很简单的时候，以上两种实现思路的效率是一样高的。当ID生成算法比较耗时的时候，那前者就会更快。<br> ","like_count":3},{"had_liked":false,"id":164820,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1577096087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14461997975","product_id":100017301,"comment_content":"em，第一遍 2019.11.27-2009.12.23，买了一年多才来看<br>年底辞职准备跳槽，所以工作日看，周末出去玩，断断续续的，也算是过完了，mark下。<br><br>总结下：<br><br>1、感谢 王争 老师，绝大多数的知识点 讲的都很好，剩下一部分感觉没讲清楚，略微遗憾（虽然知道已完结，不太可能了，但还是希望 能有后续的优化）；<br>但 这是我买了一堆课程和资料后，第一个认真看完的专栏了！！！<br><br>2、整个课程 虽然 本人基本都是在看和思考，没怎么敲代码来落实成果；红黑树、动态规划最后一节 也没搞懂（有点挫败）<br>但是 各种字符串匹配算法、AC自动机 也能自己啃下来，也算 增强了不少自信心吧，起码让我这个之前非科班、对算法一无所知、半路入门直接入行的android开发者，<br>对算法有了一个系统、整体的认识，也认识到了 原来看来高大上的算法 没有那么遥不可及（嘿嘿，起码普通的算法是）；<br>至于那些只用零散时间、就能迅速看完并理解的初学者。。。厉害啊！！！<br><br>3、每篇文章后 大家的留言 挺有意思，也有一些启发。。。<br>美中不足的是，一些错误的观点 也被放进来了（可能需要 对口专业的人来审核吧）<br>","like_count":3},{"had_liked":false,"id":77055,"user_name":".&#47;+-@YOU","can_delete":false,"product_type":"c1","uid":1248827,"ip_address":"","ucode":"14CCC17DDFFDB6","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/3b/42288ae6.jpg","comment_is_top":false,"comment_ctime":1552819804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14437721692","product_id":100017301,"comment_content":"第二题:id生成器，不处理，会导致相同的长域名重复。有个解决方案，长域名设置唯一的限制，在重复的情况下，插入表失败后，查询已经存在的长域名，对应的短域名。返回该短域名","like_count":3},{"had_liked":false,"id":71284,"user_name":"李雷","can_delete":false,"product_type":"c1","uid":1146149,"ip_address":"","ucode":"5FE8354356B32C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/25/f59a0d5c.jpg","comment_is_top":false,"comment_ctime":1551316087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14436217975","product_id":100017301,"comment_content":"坚持到了最后，给自己个赞","like_count":3},{"had_liked":false,"id":65655,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549541271,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14434443159","product_id":100017301,"comment_content":"1.短网址的自定义部分是要展示给用户的。是否可以把自定义部分作为第三个字段存入数据库。如果不同用户对相同原网址申请短网址自定义部分不同。要么不允许这种行为，否则就得把自定义部分与原网址拼接输入哈希函数，以实现区分。","like_count":3},{"had_liked":false,"id":247117,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1599612963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189547555","product_id":100017301,"comment_content":"专栏一出就拿下它，第一次刷到第10篇就放弃了；这次疫情，让我有足够的时间来重新开始刷，到今天，相当于刷完了这份《数据结构与算法之美》，感谢争哥、小编、讲述修阳和背后的强大的团队！这此过程中，了解了自己遇到困难的反应，如何坚持、应对、逃避、直面等等心路历程，也重新认识和理解了ds &amp; al的美。正所谓，师傅领进门，修行在个人 —— 下山闯荡江湖(适度刷LeetCode)，从春节7天练习开始，也谢谢Smallfly的收集。各位，我们后会有期！","like_count":2},{"had_liked":false,"id":144809,"user_name":"Csquare","can_delete":false,"product_type":"c1","uid":1137203,"ip_address":"","ucode":"23CAC353A82D1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/33/9a66d0b8.jpg","comment_is_top":false,"comment_ctime":1572060793,"is_pvip":false,"replies":[{"id":"55970","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572229585,"ip_address":"","comment_id":144809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161995385","product_id":100017301,"comment_content":"如果选用Murmurhash的32bit版本，用户量&#47;数据量上去以后，哈希冲突是不是就会比较频繁？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472120,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572229585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142911,"user_name":"于林杰","can_delete":false,"product_type":"c1","uid":1252868,"ip_address":"","ucode":"5CD4AFD506D50B","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/04/a7d57e9f.jpg","comment_is_top":false,"comment_ctime":1571582944,"is_pvip":false,"replies":[{"id":"55211","content":"文章里不是讲了吗","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571614963,"ip_address":"","comment_id":142911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161517536","product_id":100017301,"comment_content":"为什么是62","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471320,"discussion_content":"文章里不是讲了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571614963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107629,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1561569670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151504262","product_id":100017301,"comment_content":"哦豁，终于看到这里了（太慢悠悠了）。数据结构大部分都用 js 实现了，还有一些比较复杂的近期打算都实现了。这里给个github地址给大家参考参考：https:&#47;&#47;github.com&#47;F-star&#47;js-Data-Structures-and-Algorithms","like_count":2},{"had_liked":false,"id":65653,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549540100,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10139474692","product_id":100017301,"comment_content":"通过哈希函数，在长网址字符串基础上，生成短网址哈希值。将哈希值从10进制提升至62进制，进一步缩短短网址长度。为了通过短网址回溯到原网址，需要建立长短网址的对应关系，存入数据库。<br><br>为了避免散列冲突，需要在在建立新的对应关系时，查询数据库中是否已有短网址，若有再检查长网址是否一致，若不一致则发生冲突，需要给新的长网址字符串加前缀，再用哈希函数生成短网址，直到没有冲突，最终将前缀、对应关系均存入数据库。<br><br>为方便查询，需要在数据库中建立短网址的索引（B+树）。减少SQL语句数量也可以提高性能，把查询+写入两条语句，简化为写入一条。代价是设置短网址唯一索引，不允许出现重复，这样当重复写入时数据库才会报错，此时再通过查询、前缀、写入的方式解决散列冲突。也可以针对短网址建立布隆过滤器，当新的短网址不在过滤器中则正常写入，否则通过查询判重并解决冲突。<br><br>另一种方式是通过全局计数器，给每个请求的原网址分配一个序号，作为短网址的主要部分。但它可能造成同一个原网址对应多个短网址的现象（虽然不影响应用体验）。为提高给号的并发性能，可以针对不同号段设置多个发号器并行发号。","like_count":2},{"had_liked":false,"id":65354,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1549273591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139208183","product_id":100017301,"comment_content":"针对问题2，可以使用布隆过滤器来处理，如果url已经生成过短网址，不做处理。","like_count":2},{"had_liked":false,"id":65349,"user_name":"与非","can_delete":false,"product_type":"c1","uid":1247577,"ip_address":"","ucode":"313DCD63710185","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/59/889f7395.jpg","comment_is_top":false,"comment_ctime":1549265790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139200382","product_id":100017301,"comment_content":"最后一课在一年的最后一天结束，这也算辞旧迎新了吧～希望老师能在最后能出个课后思考题的总结～","like_count":2},{"had_liked":false,"id":65302,"user_name":"想当上帝的司机","can_delete":false,"product_type":"c1","uid":1239378,"ip_address":"","ucode":"D8251388854911","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/52/f07e9001.jpg","comment_is_top":false,"comment_ctime":1549236415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139171007","product_id":100017301,"comment_content":"用户自定义的，可以将用户的id拼接到hash前的网址上","like_count":2},{"had_liked":false,"id":254603,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1603156841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898124137","product_id":100017301,"comment_content":"优化点：<br>老师讲的还有很多可以扩展的点，确定了64进制，其实头几位可以利用绝对时间来记录，例如2位年【也可以1位年】+3位天【也可以2位月&#47;周】，只需要3~5位即可解决查库的问题，数据库可以按照天&#47;周&#47;月，来区分，一个是冲突概率极大的降低了，再一个是并发插入以及查询性能极大的提升。<br>毕竟一般锻炼不会持续100【10】年，最多就是几年的有效期。<br>","like_count":1},{"had_liked":false,"id":351010,"user_name":"方向感","can_delete":false,"product_type":"c1","uid":2860883,"ip_address":"","ucode":"0A59AEC0BF8293","user_header":"https://static001.geekbang.org/account/avatar/00/2b/a7/53/ff180c83.jpg","comment_is_top":false,"comment_ctime":1657451418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657451418","product_id":100017301,"comment_content":"月底离职，用了6天学完数据结构算法，收获满满。","like_count":0},{"had_liked":false,"id":350823,"user_name":"万歳","can_delete":false,"product_type":"c1","uid":1699086,"ip_address":"","ucode":"6C86DB96A14BF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/ed/0e/155a6ef4.jpg","comment_is_top":false,"comment_ctime":1657243912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657243912","product_id":100017301,"comment_content":"之前为了面试看过这篇专栏，现在第一份工作就用到了这个知识，再来复习一下，很有帮助！","like_count":0},{"had_liked":false,"id":344391,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1651504870,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651504870","product_id":100017301,"comment_content":"谢谢老师，专栏主题学完了。选学的部分也要好好学习","like_count":0},{"had_liked":false,"id":342956,"user_name":"听风的歌","can_delete":false,"product_type":"c1","uid":1630053,"ip_address":"","ucode":"51C2ADF6ECE781","user_header":"https://static001.geekbang.org/account/avatar/00/18/df/65/e93cd7dc.jpg","comment_is_top":false,"comment_ctime":1650548944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650548944","product_id":100017301,"comment_content":"前后历时3个多月，囫囵吞枣般的看完了，收获真的很大。<br>从最初的时候，工作上还不算忙，每个算法都要亲自实现一遍，有时候甚至死磕好几天，比如kmp字符串匹配算法。<br>后面由于时间的关系，只是跟着文字头脑过一遍，偶有沉思。<br>决心接下来还是会把其余的算法全部自己实现一遍。","like_count":0},{"had_liked":false,"id":332955,"user_name":"i_chase","can_delete":false,"product_type":"c1","uid":1795511,"ip_address":"","ucode":"09C41C863F4EA3","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/b7/058276dc.jpg","comment_is_top":false,"comment_ctime":1643878645,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643878645","product_id":100017301,"comment_content":"根据短url查询长url，以及查询长url是否已经被处理过。<br>这两个查询都可以维护一个lru缓存","like_count":0},{"had_liked":false,"id":324320,"user_name":"Geek_94045a","can_delete":false,"product_type":"c1","uid":2760780,"ip_address":"","ucode":"B8F23BA9D1411B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","comment_is_top":false,"comment_ctime":1638369733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638369733","product_id":100017301,"comment_content":"结课意味着新的开始新的征程！感谢王师傅领进门，之后的修行看我个人的了！这个专栏买的值！","like_count":0},{"had_liked":false,"id":322405,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1637372112,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637372112","product_id":100017301,"comment_content":"每天早到公司一小时学习这门课程，100多天终于啃完了，虽然前面有些已经忘了，但是收货很大，计划每年刷一遍。","like_count":0},{"had_liked":false,"id":309999,"user_name":"放飞心情","can_delete":false,"product_type":"c1","uid":1244845,"ip_address":"","ucode":"75A2192D91D86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/ad/7fa85a7d.jpg","comment_is_top":false,"comment_ctime":1630446016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630446016","product_id":100017301,"comment_content":"终于刷到这里，第一遍差不多刷了三个月。很多算法一直在死磕，每个算法当时都弄懂了，也是实现了，现在也忘了不少。但现在解决很多问题的思路已经不一样了，继续2刷","like_count":0},{"had_liked":false,"id":285496,"user_name":"佳楠","can_delete":false,"product_type":"c1","uid":1008809,"ip_address":"","ucode":"A1698AE91992AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/a9/27d63f2e.jpg","comment_is_top":false,"comment_ctime":1616844043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616844043","product_id":100017301,"comment_content":"问题一：用户自定义输入添加特殊前缀比如 _，进入不同处理逻辑。","like_count":0},{"had_liked":false,"id":284941,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1616553228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616553228","product_id":100017301,"comment_content":"刚好我维护了这个系统，mark一下，好好看看","like_count":0},{"had_liked":false,"id":281125,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614589029,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614589029","product_id":100017301,"comment_content":"茶艺师学编程<br><br>辛苦老师。<br>等喘过气了，我继续二刷。<br>你问我懂了多少？真没懂多少，但我又不只会学一次。","like_count":0},{"had_liked":false,"id":279754,"user_name":"星朝","can_delete":false,"product_type":"c1","uid":1848539,"ip_address":"","ucode":"DFCF2512D6DAE0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LqGZd83zp1y9fpbliaSgGh5qib5eGzU41xibTzib06ZAlaiaJibkJB89JuVEozCScUsVK90jpq7Na30AHDngQzI7YwiaA/132","comment_is_top":false,"comment_ctime":1613957091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613957091","product_id":100017301,"comment_content":"虽然课程我2020年全年在看，老师已经走了，依旧收获很大","like_count":0},{"had_liked":false,"id":267485,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1607764901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607764901","product_id":100017301,"comment_content":"mark，花了40多天才看到这。比想象中长多了。","like_count":0},{"had_liked":false,"id":253738,"user_name":"ɴɪᴋᴇʀ","can_delete":false,"product_type":"c1","uid":1616622,"ip_address":"","ucode":"DB7D92CBB5FD15","user_header":"https://static001.geekbang.org/account/avatar/00/18/aa/ee/15c328ca.jpg","comment_is_top":false,"comment_ctime":1602848732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602848732","product_id":100017301,"comment_content":"现在是2020年10月16，记录一下此刻，虽然发现距专栏发布晚了一年，不过看到大家的评论还是无比的激动，感觉能看到这里是一种幸运，感谢小争哥细致的文章，我也会不忘初心一路前行！","like_count":0},{"had_liked":false,"id":251272,"user_name":"^_^","can_delete":false,"product_type":"c1","uid":2021212,"ip_address":"","ucode":"301EE75D170771","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MdmRMTV2IwvQZF2IO0G0CFWbKxT9CIibmcdicS3J4SmrA4P1e36jCwyXZpia06ItwP4GibGnCrPJHicBbd5y9libTpiaA/132","comment_is_top":false,"comment_ctime":1601447030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601447030","product_id":100017301,"comment_content":"没看之前第一时间想到的就是hash算法，结果还真是","like_count":0},{"had_liked":false,"id":243489,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1598153260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598153260","product_id":100017301,"comment_content":"思考题：<br>1.如果要支持用户自定义短网址，则短网址格式中需要加一个特殊前缀，来标识该短网址是用户自定义的，访问自定义的短网址时，也必须带上该特殊的前缀，在数据中存贮短网址时也必须存贮该特殊前缀来标识短网址是用户自定义的。<br>2.如果每个请求都生成一个短网址，可以通过定时清理数据库的办法，来预防数据库记录超载，清理时可以按某个时间范围进行清理，比如清理前一周的数据等等。","like_count":0},{"had_liked":false,"id":235536,"user_name":"沧海一声笑哈哈","can_delete":false,"product_type":"c1","uid":1345064,"ip_address":"","ucode":"4086BD04D68673","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","comment_is_top":false,"comment_ctime":1595079483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595079483","product_id":100017301,"comment_content":"用了唯一索引，就没法使用change buffer了","like_count":0},{"had_liked":false,"id":223446,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1591089666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591089666","product_id":100017301,"comment_content":"将近两个月的时间，系统的跟完了专栏，当初大学的时候也学过数据结构，那个时候一遍一遍的看代码看视频才明白这个数据结构是怎么操作的。我学的时候怎么没有争哥的专栏呢，这样入门会轻松一点。看专栏的时候前面比较轻松，动态规划，回溯理解起来比较难，但是好歹理解了是怎么工作的。字符串的算法是真的难，看了好久，多亏了老师的文章和评论区的链接。让我对字符串算法不再恐惧。总之谢谢争哥，让我对数据结构的理解又加深了。","like_count":0},{"had_liked":false,"id":218712,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1589858144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589858144","product_id":100017301,"comment_content":"谢谢老师！极客时间有很多好的专栏，王争老师的这个专栏确实篇篇纯干货，不仅信息量大，同时深入浅出，引人入胜。我的感受是<br>1. 一定要动手写，不写就不知道自己确实没看懂，或者直接就理解错了；<br>2. 改变了我对数据结构和算法的认识。坦白来讲，在一般公司里面写code基本不会触及算法层面的东西，对效率的优化也没有到精益求精的程度。但是通过专栏，我认识到，对数据结构和算法的理解体现一个软件工程师的“匠心”，真正夯实了基础，你才会懂得欣赏别人的作品，同时反思自己的作品，是不是可以更好。<br><br>衷心感谢老师！ ","like_count":0},{"had_liked":false,"id":216531,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1589277802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589277802","product_id":100017301,"comment_content":"我是学习iOS的，但是面试还得考算法。花了很久才看完专栏，经常一篇文章看了一遍又一遍才理解。还记得当时立下的誓言：“数据结构和算法专栏，不学完，绝不收兵。” 不学习完算法专栏，不能够玩斗地主，总算做到了。<br>但是只是理解了基本原理，在应用那一块还是得多实践。另外深刻体会到数据结构和算法是一体的，追求时间和空间复杂度最优才是最核心的。<br>决定后期再整体回顾一遍，没事再读读。<br>谢谢王老师！<br><br>","like_count":0},{"had_liked":false,"id":206395,"user_name":"渣渣辉","can_delete":false,"product_type":"c1","uid":1911235,"ip_address":"","ucode":"730838D9161579","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKIRSxInCiclMszZ21FptlHSHBB2icQSdIbRX2BYdiaEfdicsWxLzqB7h01jhibpLOAu9Hd8SfbZxHBaQg/132","comment_is_top":false,"comment_ctime":1586853307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586853307","product_id":100017301,"comment_content":"完结撒花，最后一天看完了！","like_count":0},{"had_liked":false,"id":201717,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585824518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585824518","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":195833,"user_name":"thinker","can_delete":false,"product_type":"c1","uid":1107762,"ip_address":"","ucode":"1D9ECA03A28931","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/32/82939538.jpg","comment_is_top":false,"comment_ctime":1585217953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585217953","product_id":100017301,"comment_content":"1、用户自定义部份，直接使用散列表，先检测冲突，然后key=url, value=short_url<br>2、先查找后再插入，使用唯一索引去重","like_count":0},{"had_liked":false,"id":195830,"user_name":"thinker","can_delete":false,"product_type":"c1","uid":1107762,"ip_address":"","ucode":"1D9ECA03A28931","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/32/82939538.jpg","comment_is_top":false,"comment_ctime":1585217525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585217525","product_id":100017301,"comment_content":"分布式系统中ID生成器的实现：<br>1、使用数据库的自增ID + redis<br>2、使用snowflake算法，并发分段分号","like_count":0},{"had_liked":false,"id":195825,"user_name":"thinker","can_delete":false,"product_type":"c1","uid":1107762,"ip_address":"","ucode":"1D9ECA03A28931","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/32/82939538.jpg","comment_is_top":false,"comment_ctime":1585217284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585217284","product_id":100017301,"comment_content":"优化SQL语句：<br>1、使用数据库的索引<br>2、使用布隆过滤器","like_count":0},{"had_liked":false,"id":195822,"user_name":"thinker","can_delete":false,"product_type":"c1","uid":1107762,"ip_address":"","ucode":"1D9ECA03A28931","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/32/82939538.jpg","comment_is_top":false,"comment_ctime":1585217131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585217131","product_id":100017301,"comment_content":"短网址通过哈希算法，再通过进制转换来实现。<br>如何解决哈希冲突问题呢？<br>&gt; 拼接固定的特殊字符","like_count":0},{"had_liked":false,"id":194945,"user_name":"墟","can_delete":false,"product_type":"c1","uid":1519087,"ip_address":"","ucode":"5E33E9FE51CE88","user_header":"https://static001.geekbang.org/account/avatar/00/17/2d/ef/2f18b76f.jpg","comment_is_top":false,"comment_ctime":1585122906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585122906","product_id":100017301,"comment_content":"murmurhash结果转62进制的js代码：<br><br>function generate62SystmeDigitMap () {<br>  let digitMap = []<br>  for (let i = 0; i &lt; 10; i++) {<br>    digitMap.push(`${i}`)<br>  }<br><br>  const bigLetterMap = []<br>  for (let i = &#39;A&#39;.charCodeAt(); i &lt;= &#39;Z&#39;.charCodeAt(); i++) {<br>    bigLetterMap.push(String.fromCharCode(i))<br>  }<br><br>  const smallLetterMap = []<br>  for (let i = &#39;a&#39;.charCodeAt(); i &lt;= &#39;z&#39;.charCodeAt(); i++) {<br>    smallLetterMap.push(String.fromCharCode(i))<br>  }<br><br>  digitMap = digitMap.concat(smallLetterMap)<br>  digitMap = digitMap.concat(bigLetterMap)<br>  return digitMap<br>}<br><br>function coverDecNumTo62SystemString (decNum) {<br>  const digitMap = generate62SystmeDigitMap()<br><br>  let remain = 0<br>  const s = new Stack()<br>  while (decNum !== 0) {<br>    remain = Math.floor(decNum % 62)<br>    s.push(remain)<br>    decNum = Math.floor(decNum &#47; 62)<br>  } &#47;&#47; while<br><br>  let retStr = &#39;&#39;<br>  while (!s.isEmpty()) {<br>    retStr += `${digitMap[s.pop()]}`<br>  }<br>  return retStr<br>}","like_count":0},{"had_liked":false,"id":193762,"user_name":"😚 46","can_delete":false,"product_type":"c1","uid":1433535,"ip_address":"","ucode":"EED0EBBBF80A43","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","comment_is_top":false,"comment_ctime":1584959122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584959122","product_id":100017301,"comment_content":"## 如何自定义短链网址？<br><br>-   自定义短链网址添加特殊前缀，例如`http&#47;&#47;t.cn&#47;c&#47;{用户自定部分}`，中间的`&#47;c`前缀表示自定义短链网址，这样不会与系统生成的短链网址冲突<br>    <br>-   用户在指定自定义短链网址后，进行校验是否存在冲突，若未冲突，则允许保存，若冲突则提示短链网址已被使用，让用户重新输入一个短链网址<br><br>## 如何解决网址映射存储量过大问题？<br><br>数据库存储量过大时，会导致查询、新增、更新、删除操作性能直线下降，更有甚者，可能会导致系统阻塞，响应耗时严重等问题！<br><br>-   短网址添加时效性，过期失效&#47;归档<br>    <br>-   分库分表扩展存储量","like_count":0},{"had_liked":false,"id":187119,"user_name":"爆疯","can_delete":false,"product_type":"c1","uid":1403529,"ip_address":"","ucode":"599A7F2993465E","user_header":"https://static001.geekbang.org/account/avatar/00/15/6a/89/c060dc26.jpg","comment_is_top":false,"comment_ctime":1584020756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584020756","product_id":100017301,"comment_content":"完结打卡！","like_count":0},{"had_liked":false,"id":178358,"user_name":"Merlin","can_delete":false,"product_type":"c1","uid":1804229,"ip_address":"","ucode":"5D21F59EC5C9DA","user_header":"","comment_is_top":false,"comment_ctime":1581668711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581668711","product_id":100017301,"comment_content":"完结撒花！接下来要多刷题，动手实践了","like_count":0},{"had_liked":false,"id":174217,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1580093261,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1580093261","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":173588,"user_name":"郭星志","can_delete":false,"product_type":"c1","uid":1257021,"ip_address":"","ucode":"0FA040B955CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/3d/58242861.jpg","comment_is_top":false,"comment_ctime":1579602218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579602218","product_id":100017301,"comment_content":"专栏内容学完了，学习的路上再接再厉！～","like_count":0},{"had_liked":false,"id":166797,"user_name":"jiankewuming","can_delete":false,"product_type":"c1","uid":1156012,"ip_address":"","ucode":"78D9F8DBC28048","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ac/69c66da7.jpg","comment_is_top":false,"comment_ctime":1577600297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577600297","product_id":100017301,"comment_content":"陆陆续续看了一年，哎","like_count":0},{"had_liked":false,"id":166115,"user_name":"Jun","can_delete":false,"product_type":"c1","uid":1120678,"ip_address":"","ucode":"0FAB76D99153ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/a6/7ae63d7e.jpg","comment_is_top":false,"comment_ctime":1577406532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577406532","product_id":100017301,"comment_content":"问题一，跳过短网址产生，用用户提供短网址直接写入。如果冲突，返回错误。<br>问题二，过多重复是问题。不但占存储空间，也使索引变大变慢。还是用布隆过滤器查重一下。","like_count":0},{"had_liked":false,"id":154590,"user_name":"曹昆","can_delete":false,"product_type":"c1","uid":1137062,"ip_address":"","ucode":"C45A2D716B291C","user_header":"https://static001.geekbang.org/account/avatar/00/11/59/a6/4e185fcb.jpg","comment_is_top":false,"comment_ctime":1574487964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574487964","product_id":100017301,"comment_content":"期待所有思考题的标准答案","like_count":0},{"had_liked":false,"id":136186,"user_name":"steve","can_delete":false,"product_type":"c1","uid":1354489,"ip_address":"","ucode":"AB6D3E9FF8E77C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJETibDh9wrP19gj9VdlLRmppuG1FibI7nyUGldEXCnoqKibKIB18UMxyEHBkZNlf5vibLNeofiaN5U6Hw/132","comment_is_top":false,"comment_ctime":1569379440,"is_pvip":false,"replies":[{"id":"52305","content":"是true 确实不一定存在","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569448236,"ip_address":"","comment_id":136186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569379440","product_id":100017301,"comment_content":"用布隆过滤器 插入新的短网址 布隆过滤器返回true   也不一定存在 那还是得查数据库？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468498,"discussion_content":"是true 确实不一定存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569448236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134215,"user_name":"社会猪","can_delete":false,"product_type":"c1","uid":1258401,"ip_address":"","ucode":"CFF5EA7F247373","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/a1/f3835f01.jpg","comment_is_top":false,"comment_ctime":1568776552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568776552","product_id":100017301,"comment_content":"很好，666","like_count":0},{"had_liked":false,"id":128525,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1566895691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566895691","product_id":100017301,"comment_content":"思考题1 支持用户自定义和我们使用62进制思路一致，看自定义规则能否将A-Z对应的字符和对应起来。<br>思考题2 可以使用lru的思想，将很久很久没人访问的短链接记录删除。","like_count":0},{"had_liked":false,"id":123229,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565646964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565646964","product_id":100017301,"comment_content":"思考题2<br>对于不是非常关键的应用可以循环计数，某些以前用过的网址，长期不用可以重新利用。对于不能重复的场景，如果只加不删，可以用两张非关系型数据表来处理，例如dynamodb，这些简单的数据库扩张性良好，支持海量数据，只是关联查询比较弱，但是对于这个问题还是合适的。","like_count":0},{"had_liked":false,"id":123228,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565646487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565646487","product_id":100017301,"comment_content":"思考题1<br>自定义部分作为特殊字符串加成网址的一部分处理，这样可以用短网址拿到整个网页和自定义字符串，后续再次看提供的自定义部分是否匹配数据库存储的这一块数据.","like_count":0},{"had_liked":false,"id":115196,"user_name":"菜鸡程序员","can_delete":false,"product_type":"c1","uid":1308074,"ip_address":"","ucode":"F1DFEC2343FE25","user_header":"https://static001.geekbang.org/account/avatar/00/13/f5/aa/5d520017.jpg","comment_is_top":false,"comment_ctime":1563506018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563506018","product_id":100017301,"comment_content":"打个卡，终于看到最后了","like_count":0},{"had_liked":false,"id":102186,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1560157977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560157977","product_id":100017301,"comment_content":"1、建立用户自定义-短网址，短网址-原网址这2个映射关系，其中短网址-原网址映射关系的建立就用这节课的方法：哈希算法或者ID自增器，这样就需要新增用户自定义-短网址这个映射关系，跳转时需要查询两次得到用户自定义-原网址这个对应关系<br>2、对原网址建立布隆过滤器，通过布隆过滤器判断，如果不存在才请求ID自增器计算短网址","like_count":0},{"had_liked":false,"id":99411,"user_name":"狒狒","can_delete":false,"product_type":"c1","uid":1242295,"ip_address":"","ucode":"10A320ECEBF074","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/b7/5c775af5.jpg","comment_is_top":false,"comment_ctime":1559209592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559209592","product_id":100017301,"comment_content":"二刷打卡，代码部分实现，再补充","like_count":0},{"had_liked":false,"id":93485,"user_name":"极客大白","can_delete":false,"product_type":"c1","uid":1231482,"ip_address":"","ucode":"B692A9E37BCCA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Kb6CkricczvJlmpAGCyialibE7qNXIt0WcZ7ics9PicAZPFn2lwgLKNVBFZ1vNUHNjxFxuicdCHXwib1OJibRTEkbRDG7A/132","comment_is_top":false,"comment_ctime":1557479594,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557479594","product_id":100017301,"comment_content":"打卡打卡,虽然很慢,但终于还是跟着老师的课程一节节的啃过来了!也算完成了当初订阅专栏的一个小目标.不过其中还是有很多不清楚的地方,自己动手实现代码也遇到了一些困难!下一步就是结合实际工作,二刷专栏和其他学习资料更加深入的学习了!加油!  感谢王争老师的专栏让我有信心继续把数据结构与算法啃下去!","like_count":0},{"had_liked":false,"id":89428,"user_name":"森林","can_delete":false,"product_type":"c1","uid":1071920,"ip_address":"","ucode":"53BD05633B77B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/30/9dcf35ff.jpg","comment_is_top":false,"comment_ctime":1556172740,"is_pvip":false,"replies":[{"id":"32102","content":"ipad paper","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556236431,"ip_address":"","comment_id":89428,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556172740","product_id":100017301,"comment_content":"课程终于输完了，问问小争哥画图软件是？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448128,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556236431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89163,"user_name":"狒狒","can_delete":false,"product_type":"c1","uid":1242295,"ip_address":"","ucode":"10A320ECEBF074","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/b7/5c775af5.jpg","comment_is_top":false,"comment_ctime":1556095494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556095494","product_id":100017301,"comment_content":"终于看完了，打个卡，中途好多代码没实现，二刷补上","like_count":0},{"had_liked":false,"id":85216,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1555006895,"is_pvip":false,"replies":[{"id":"30609","content":"兄弟 对自己要求太高了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555033679,"ip_address":"","comment_id":85216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555006895","product_id":100017301,"comment_content":"哈哈  2019年4月12日晚上2点  终于把专栏刷完了。开始跟着学发现不到一半，就跟不上节奏了，又从头开始看。开始时间这么长了，估计留言都没人看了，但还是留个言。看到有个兄弟昨天也留言了，还好没有放弃，虽然慢，但是跟上来了。<br><br>虽然学完了，但我感觉学算法和懂算法之间的鸿沟还是相当难跨越的。我们可能学完后遇到相应的问题可以用相应的算法解决，但是我们还是没法明白为什么这样做就可以。我们为什么想不到？这些算法只是科学家，天才灵光一现才能发明出来?有没有更本质的东西在后面？学的越来，发现自己越渺小，什么也不懂了。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446595,"discussion_content":"兄弟 对自己要求太高了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555033679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85030,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1554962607,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1554962607","product_id":100017301,"comment_content":"1. 相当于用户自己指定算法生成短链，现在要考虑的就是短链冲突的问题，按照之前的思路可以先利用布隆过滤器判断是否冲突，不冲突，再将短链和对应的原始网址插入数据库（前提是数据库短链加了唯一索引）；如果冲突了就要提示用户重新输入短链了<br>2. 显然通过在原始网址字段中加唯一索引是不行的，这样数据库报错的时候，无法区分是原始网址已经有了还是短链网址冲突了；这个我想到的办法就是针对原始网址可以构建一个布隆过滤器，每次先通过布隆过滤器判断下该原始网址是否生成过，没生成过则直接生成短链，生成过则不一定真的生成过，这时候还要查询数据库，当然这种概率比较小","like_count":0},{"had_liked":false,"id":73807,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1552006319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552006319","product_id":100017301,"comment_content":"坚持到最后，耶","like_count":0},{"had_liked":false,"id":67597,"user_name":"丁丁","can_delete":false,"product_type":"c1","uid":1066850,"ip_address":"","ucode":"9D955ED6F547E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/62/25a4aeae.jpg","comment_is_top":false,"comment_ctime":1550206031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550206031","product_id":100017301,"comment_content":"终于坚持看完了，给自己一个赞👍，感觉收货了很多，在数据结构和算法方面收获很大，学习了很多知识，但是有些知识点还不是特别清楚，如动态规划，kmp算法，AC自动机等，所以还得继续学习，把不会的弄懂，弄明白😁😁😁","like_count":0},{"had_liked":false,"id":67596,"user_name":"丁丁","can_delete":false,"product_type":"c1","uid":1066850,"ip_address":"","ucode":"9D955ED6F547E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/62/25a4aeae.jpg","comment_is_top":false,"comment_ctime":1550205751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550205751","product_id":100017301,"comment_content":"终于坚持到最后了，感觉自己在算法和数据结构上有了很大的提升，但是感觉有些知识点，如动态规划，kmp算法，AC自动机的原理和使用还有些不是特别清楚，所以还得继续努力，把自己不懂的知识点理解透彻😃😃😃","like_count":0},{"had_liked":false,"id":65654,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549540115,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549540115","product_id":100017301,"comment_content":"2.无论是给原网址建立唯一索引，还是采用布隆过滤器，都无法回避长短网址两个字段均加索引，这样会增加数据库维护的复杂度。单独建立原始网址的散列表，存储其在数据库中的位置。这样当发现冲突时，可以快速查询原网址在数据库中的位置，并返回短网址。只是在将新的对应关系写入数据库时，也要将数据库位置同步写入原网址散列表。并且当数据库变更时要保持原网址散列表的一致性。这样会比两字段都加索引便捷么？","like_count":0},{"had_liked":false,"id":65625,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549515382,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549515382","product_id":100017301,"comment_content":"期待思考题答案！","like_count":0},{"had_liked":false,"id":65624,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549515218,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549515218","product_id":100017301,"comment_content":"坚持下来啦！收获满满！感谢王争老师！","like_count":0},{"had_liked":false,"id":65365,"user_name":"梦醒十分","can_delete":false,"product_type":"c1","uid":1043585,"ip_address":"","ucode":"33830A5A73DDF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/81/2127e215.jpg","comment_is_top":false,"comment_ctime":1549285545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549285545","product_id":100017301,"comment_content":"老师辛苦！新年快乐！","like_count":0},{"had_liked":false,"id":65347,"user_name":"Skysper","can_delete":false,"product_type":"c1","uid":1058800,"ip_address":"","ucode":"164B3CAF81A7C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f0/06ecce19.jpg","comment_is_top":false,"comment_ctime":1549263520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549263520","product_id":100017301,"comment_content":"很有收获 祝大家新年快乐","like_count":0}]}