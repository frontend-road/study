{"id":327483,"title":"05 | 大类：如何避免写出难以理解的大类？","content":"<p>你好，我是郑晔。</p><p>上一讲我们讲了长函数，一个让你感受最直观的坏味道。这一讲，我们再来讲一个你一听名字就知道是怎么回事的坏味道：大类。</p><p>一听到大类，估计你的眼前已经浮现出一片无边无际的代码了。类之所以成为了大类，一种表现形式就是我们上节课讲到的长函数，一个类只要有几个长函数，那它就肯定是一眼望不到边了（长函数的话题，我们上一讲已经讨论过了，这里就不再赘述了）。</p><p>大类还有一种表现形式，类里面有特别多的字段和函数，也许，每个函数都不大，但架不住数量众多啊，这也足以让这个类在大类中占有一席之地。这一讲，我们就主要来说说这种形式的大类。</p><h2>分模块的程序</h2><p>我先来问你一个问题，为什么不把所有的代码都写到一个文件里？</p><p>你可能会觉得这个问题很傻，心里想：除了像练习之类的特定场景，谁会在一个正经的项目上把代码写到一个文件里啊？</p><p>没错，确实没有人这么做，但你思考过原因吗？把代码都写到一个文件里，问题在哪里呢？</p><p>事实是，把代码写到一个文件里，一方面，相同的功能模块没有办法复用；另一方面，也是更关键的，把代码都写到一个文件里，其复杂度会超出一个人能够掌握的认知范围。简言之，<strong>一个人理解的东西是有限的，没有人能同时面对所有细节。</strong></p><p>人类面对复杂事物给出的解决方案是分而治之。所以，我们看到几乎各种程序设计语言都有自己的模块划分方案，从最初的按照文件划分，到后来，使用面向对象方案按照类进行划分，本质上，它们都是一种模块划分的方式。这样，人们面对的就不再是细节，而是模块，模块的数量显然会比细节数量少，人们的理解成本就降低了。</p><!-- [[[read_end]]] --><p>好，你现在已经理解了，对程序进行模块划分，本质上就是在把问题进行分解，而这种做法的背后原因，就是人类的认知能力是有限的。</p><p>理解了这一点，我们再回过头来看大类这个坏味道，你就知道问题出在哪了。<strong>如果一个类里面的内容太多，它就会超过一个人的理解范畴，顾此失彼就<strong><strong>在</strong></strong>所难免了。</strong></p><p>按照这个思路，解决大类的方法也就随之而来了，就是把大类拆成若干个小类。你可能会想，这我也知道，问题是，怎么拆呢？</p><h2>大类的产生</h2><p>想要理解怎么拆分一个大类，我们需要知道，这些类是怎么变成这么大的。</p><ul>\n<li><strong>职责不单一</strong></li>\n</ul><p>最容易产生大类的原因在于<strong>职责的不单一</strong>。我们先来看一段代码：</p><pre><code>public class User {\n  private long userId;\n  private String name;\n  private String nickname;\n  private String email;\n  private String phoneNumber;\n  private AuthorType authorType;\n  private ReviewStatus authorReviewStatus;\n  private EditorType editorType;\n  ...\n}\n</code></pre><p>这个 User 类拥有着一个大类的典型特征，其中包含着一大堆的字段。面对这样一个类时，我们要问的第一个问题就是，这个类里的字段都是必需的吗？</p><p>我们来稍微仔细地看一下这个类，用户 ID（userId）、姓名（name）、昵称（nickname） 之类应该是一个用户的基本信息，后面的邮箱（email）、电话号码（phoneNumber） 也算是和用户相关联的。今天的很多应用都提供使用邮箱或电话号码登录的方式，所以，这个信息放在这里，也算是可以理解。</p><p>再往后看，作者类型（authorType），这里表示作者是签约作者还是普通作者，签约作者可以设置作品的付费信息，而普通作者不能。后面的字段是作者审核状态（authorReviewStatus），就是说，作者成为签约作者，需要有一个申请审核的过程，这个状态就是审核的状态。</p><p>再往后，又出现了一个编辑类型（editorType），编辑可以是主编，也可以是小编，他们的权限是不一样的。</p><p>这还不是这个 User 类的全部。但是，即便只看这些内容，也足以让我们发现一些问题了。</p><p>首先，普通的用户既不是作者，也不是编辑。作者和编辑这些相关的字段，对普通用户来说，都是没有意义的。其次，对于那些成为了作者的用户，编辑的信息意义也不大，因为作者是不能成为编辑的，反之亦然，编辑也不会成为作者，作者信息对成为编辑的用户也是没有意义的。</p><p>在这个类的设计里面，总有一些信息对一部分人是没有意义，但这些信息对于另一部分人来说又是必需的。之所以会出现这样的状况，关键点就在于，这里只有“一个”用户类。</p><p>普通用户、作者、编辑，这是三种不同角色，来自不同诉求的业务方关心的是不同的内容。只是因为它们都是这个系统的用户，就把它们都放到用户类里，造成的结果就是，任何业务方的需求变动，都会让这个类反复修改。这种做法实际上是违反了单一职责原则。</p><p>在《软件设计之美》中，我曾经专门用了一讲的篇幅讲<a href=\"https://time.geekbang.org/column/article/258222\">单一职责原则</a>，它让我们把模块的变化纳入考量。单一职责原则是衡量软件设计好坏的一把简单而有效的尺子，通常来说，很多类之所以巨大，大部分原因都是违反了单一职责原则。<strong>而想要破解“大类”的谜题，关键就是能够把不同的职责拆分开来</strong>。</p><p>回到我们这个类上，其实，我们前面已经分析了，虽然这是一个类，但其实，它把不同角色关心的东西都放在了一起，所以，它变得如此庞大。我们只要把不同的信息拆分开来，问题也就迎刃而解了。下面就是把不同角色拆分出来的结果：</p><pre><code>public class User {\n  private long userId;\n  private String name;\n  private String nickname;\n  private String email;\n  private String phoneNumber;\n  ...\n}\n</code></pre><pre><code>public class Author {\n  private long userId;\n  private AuthorType authorType;\n  private ReviewStatus authorReviewStatus;\n  ...\n}\n</code></pre><pre><code>public class Editor {\n  private long userId;\n  private EditorType editorType;\n  ...\n}\n</code></pre><p>这里，我们拆分出了 Author 和 Editor 两个类，把与作者和编辑相关的字段分别移到了这两个类里面。在这两个类里面分别有一个 userId 字段，用以识别这个角色是和哪个用户相关。这个大 User 类就这样被分解了。</p><ul>\n<li><strong>字段未分组</strong></li>\n</ul><p>大类的产生往往还有一个常见的原因，就是<strong>字段未分组</strong>。</p><p>有时候，我们会觉得有一些字段确实都是属于某个类，结果就是，这个类还是很大。比如，我们看一下上面拆分的结果，那个新的 User 类：</p><pre><code>public class User {\n  private long userId;\n  private String name;\n  private String nickname;\n  private String email;\n  private String phoneNumber;\n  ...\n}\n</code></pre><p>前面我们分析过，这些字段应该都算用户信息的一部分。但是，即便相比于原来的 User 类小了许多，这个类依然也不算是一个小类，原因就是，这个类里面的字段并不属于同一种类型的信息。比如，userId、name、nickname 几项，算是用户的基本信息，而 email、phoneNumber 这些则属于用户的联系方式。</p><p>从需求上看，基本信息是那种一旦确定就不怎么会改变的内容，而联系方式则会根据实际情况调整，比如，绑定各种社交媒体的账号。所以，如果我们把这些信息都放到一个类里面，这个类的稳定程度就要差一些。所以，我们可以根据这个理解，把 User 类的字段分个组，把不同的信息放到不同的类里面。</p><pre><code>public class User {\n  private long userId;\n  private String name;\n  private String nickname;\n  private Contact contact;\n  ...\n}\n</code></pre><pre><code>public class Contact {\n  private String email;\n  private String phoneNumber;\n  ...\n}\n</code></pre><p>这里我们引入了一个 Contact 类（也就是联系方式），把 email 和 phoneNumber 放了进去，后面再有任何关于联系方式的调整就都可以放在这个类里面。经过这次调整，我们把不同的信息重新组合了一下，但每个类都比原来要小。</p><p>对比一下，如果说前后两次拆分有什么不同，那就是：前面是根据职责，拆分出了不同的实体，后面是将字段做了分组，用类把不同的信息分别做了封装。</p><p>或许你已经发现了，<strong>所谓<strong><strong>的</strong></strong>将大类拆解成小类，本质上在做的工作是一个设计工作</strong>。我们分解的依据其实是单一职责这个重要的设计原则。没错，很多人写代码写不好，其实是缺乏软件设计的功底，不能有效地把各种模型识别出来。所以，想要写好代码，还是要好好学学软件设计的。</p><p>学了这一讲，如果你还想有些极致的追求，我给你推荐《<a href=\"https://www.infoq.cn/minibook/thoughtworks-anthology\">ThoughtWorks文集</a>》这本书里“对象健身操”这一篇，这里提到一个要求：<strong>每个类不超过 2 个字段</strong>。《<a href=\"https://www.infoq.cn/minibook/thoughtworks-anthology\">ThoughtWorks文集</a>》是我当年参与翻译的一本书，今天看来，里面的内容大部分都过时了，但“对象健身操”这一篇还是值得一读的。</p><p>关于大类的讨论差不多就接近尾声了，但我估计结合这一讲最初的讨论，有些人心中会升起一些疑问：如果我们把大类都拆成小类，类的数量就会增多，那人们理解的成本是不是也会增加呢？</p><p>其实，这也是很多人不拆分大类的借口。</p><p>在这个问题上，程序设计语言早就已经有了很好的解决方案，所以，我们会看到在各种程序设计语言中，有诸如包、命名空间之类的机制，将各种类组合在一起。在你不需要展开细节时，面对的是一个类的集合。再进一步，还有各种程序库把这些打包出来的东西再进一步打包，让我们只要面对简单的接口，而不必关心各种细节。</p><p>如此层层封装，软件不就是这样构建出来的吗？</p><h2>总结时刻</h2><p>我们今天讲了大类这个坏味道，这是程序员日常感知最为深刻的坏味道之一。</p><p>应对大类的解决方案，主要是将大类拆分成小类。我们需要认识到，模块拆分，本质上是帮助人们降低理解成本的一种方式。</p><p>我们还介绍了两种产生大类的原因：</p><ul>\n<li>职责不单一；</li>\n<li>字段未分组。</li>\n</ul><p>无论是哪种原因，想要有效地对类进行拆分，我们需要对不同内容的变动原因进行分析，而支撑我们来做这种分析的就是单一职责原则。将大类拆分成小类，本质上在做的是设计工作，所以，想要写好代码，程序员需要学好软件设计。</p><p>有人觉得拆分出来的小类过多，不易管理，但其实程序设计语言早就为我们提供了各种构造类集合的方式，比如包、命名空间等，再进一步，还可以封装出各种程序库。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>把类写小，越小越好</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/1a/06151303456bcaf5156dec7091e4391a.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>你在实际工作中遇到过多大的类，你分析过它是怎样产生的吗？又是如何拆分的呢？欢迎在留言区分享你的经历。如果你身边有同事总是写出大类，你不妨把这节课分享给他，帮他解决大类的烦恼。</p><p>感谢阅读，我们下一讲再见！</p><p><span class=\"reference\">参考资料：</span></p><p><a href=\"https://time.geekbang.org/column/article/258222\">单一职责原则：你的模块到底为谁负责？</a></p><p><a href=\"https://time.geekbang.org/column/article/87845\">你的代码是怎么变混乱的？</a></p>","comments":[{"had_liked":false,"id":272566,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1610160351,"is_pvip":true,"replies":[{"id":"98821","content":"认为类太多是个问题，我在文章中已经说了一个角度，这里再补充一个角度。这里有一个假设是，一上来就要把所有的类理解掉，<br><br>然而，这种假设是不成立的，作为 Java 程序员，你不会去看所有 JDK 里的类，也不会看 Spring 所有的类。<br><br>一般的做法是理解主线，然后，根据需要了解相应的类，<br>这是做事方法的问题。不能因为我们可能要面对所有代码，就一下子去吃透所有的代码，这是普通人做不到的。<br><br>所以，类的数量多少不是问题，通过怎样的方式，降低代码理解的难度才是我们要考虑的问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610195181,"ip_address":"","comment_id":272566,"utype":1}],"discussion_count":3,"race_medal":0,"score":"121869244639","product_id":100068401,"comment_content":"正如类太大会超出人的理解范畴，类太多也会。举个java的例子，做业务开发时大部分需求都可以通过spring boot完成，但如果要对spring进行定制，需要理解的内容就多了一个数量级。框架本身在满足更多需求的同时不断重构，类的职责越来越单一，数量也越来越多。虽然每个改动都有正当的理由，但如果不知道这些改动的历史，一下子就被那么多类糊一脸，任谁也是吃不消的。个人理解这可能是在业务优先的场景下，两害相权取其轻的结果吧。","like_count":29,"discussions":[{"author":{"id":2394662,"avatar":"https://static001.geekbang.org/account/avatar/00/24/8a/26/2e2f9cfc.jpg","nickname":"Koco","note":"","ucode":"AEBF53EFBA8BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372913,"discussion_content":"类变小变多之后也是要结合包和namespace的划分来提高可读性的。一个包里有太多类就跟一个方法太长是一回事。合理划分包之后，每个类的“索引路径”会变长，但可读性提高了很多。现实当中做不到主要是因为大多数程序员的抽象、表达能力不足，很难划把包分清楚并且取一个好名字。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1620522501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513312,"discussion_content":"认为类太多是个问题，我在文章中已经说了一个角度，这里再补充一个角度。这里有一个假设是，一上来就要把所有的类理解掉，\n\n然而，这种假设是不成立的，作为 Java 程序员，你不会去看所有 JDK 里的类，也不会看 Spring 所有的类。\n\n一般的做法是理解主线，然后，根据需要了解相应的类，\n这是做事方法的问题。不能因为我们可能要面对所有代码，就一下子去吃透所有的代码，这是普通人做不到的。\n\n所以，类的数量多少不是问题，通过怎样的方式，降低代码理解的难度才是我们要考虑的问题。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610195181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340936,"discussion_content":"感谢郑老师回复。我想表达的意思是，类的数量增多也会和类变大一样，在客观上增加理解代码的难度，并不是要借此反对把大类拆成小类。\n\n另外对于老师的回复，我又想到两点，权当是跑题的胡诌。一是类/方法的数量的膨胀不会是无限的。有个比较极端的例子是早年FB的安卓App中，因为代码里的类/方法太多，导致方法表的大小在低端机型上超出了虚拟机的限制，最后竟在App启动时去修改虚拟机的内存来绕过限制。二是按照现在程序员内卷的情况来看，似乎没读过某些热门框架的源码已经不好意思跟人打招呼了，按照这个趋势发展下去，说不定未来某一天就连应届生都得看过JDK/Spring所有的类了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610207641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272685,"user_name":"wang_acmilan","can_delete":false,"product_type":"c1","uid":1025858,"ip_address":"","ucode":"AE0E3A5005A108","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/42/f510bb91.jpg","comment_is_top":false,"comment_ctime":1610202372,"is_pvip":false,"replies":[{"id":"98834","content":"马斯洛需求层次理论告诉我们，人有不同层次的追求。生存是底线，总有人会告诉你，温饱解决就行。<br><br>写代码也一样，功能实现就可以了，代码规模不大，可以理解。问题在于，等规模大了，你真的改得动吗？<br><br>你的代码为什么要改动？还不是一代的代码改起来很吃力了。为什么吃力了？是因为功能实现不了吗？还不是代码可维护性差。为什么可维护性差？还不是根本不知道可维护性好的代码是什么样。<br><br>你不妨推演一下，按照他们的建议写代码，距离走回老路上，还有多远的距离。<br><br>既然有机会建立新的标准，既然有机会知道可维护的代码长什么样，为什么要按照老路走呢？<br><br>如果知道什么是“积重难返”，就会懂得“勿以善小而不为”的价值所在了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610238234,"ip_address":"","comment_id":272685,"utype":1}],"discussion_count":5,"race_medal":0,"score":"61739744516","product_id":100068401,"comment_content":"目前在做嵌入式的项目，里面的C代码如郑老师所言，大部分都是以“效率”为名，写的巨长无比。<br>我有一个问题想咨询郑老师，我们的项目不算法，4万行左右，我在进行一代往二代的重构，我个人感觉应该把功能都拆开，以不同文件夹的层级方式进行代码的整理；而组内的同事以及外包的员工觉得代码不算多，一个文件夹，几个文件一把就搞定了，没必要搞那么复杂。<br><br>这个问题就和老师这篇文章所述有一点不一样了：如果觉得代码架构和代码逻辑能够理解，是不是clean code的必要性或者说急迫性就没有那么大了。先以交付为目标进行coding，后续再看情况。","like_count":15,"discussions":[{"author":{"id":1703256,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","nickname":"请叫我和尚","note":"","ucode":"33A8A1CDA103F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365260,"discussion_content":"很多时候说的后续再优化的代码，这个后续就可能会变成直到离职也没有人改","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1617757796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2039071,"avatar":"","nickname":"life吖","note":"","ucode":"2379825F822161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341201,"discussion_content":"交付是有deadline的，先实现再优化，奢求一步到位也是误区。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610349891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2036674,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/13/c2/f8f82f33.jpg","nickname":"么么么么木木木","note":"","ucode":"0FDC8660CBBD14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2039071,"avatar":"","nickname":"life吖","note":"","ucode":"2379825F822161","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351869,"discussion_content":"根据我的经验，一旦入库的代码，很难有动力再去优化","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614506802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341201,"ip_address":""},"score":351869,"extra":""}]},{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513353,"discussion_content":"马斯洛需求层次理论告诉我们，人有不同层次的追求。生存是底线，总有人会告诉你，温饱解决就行。\n\n写代码也一样，功能实现就可以了，代码规模不大，可以理解。问题在于，等规模大了，你真的改得动吗？\n\n你的代码为什么要改动？还不是一代的代码改起来很吃力了。为什么吃力了？是因为功能实现不了吗？还不是代码可维护性差。为什么可维护性差？还不是根本不知道可维护性好的代码是什么样。\n\n你不妨推演一下，按照他们的建议写代码，距离走回老路上，还有多远的距离。\n\n既然有机会建立新的标准，既然有机会知道可维护的代码长什么样，为什么要按照老路走呢？\n\n如果知道什么是“积重难返”，就会懂得“勿以善小而不为”的价值所在了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610238234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2554050,"avatar":"https://static001.geekbang.org/account/avatar/00/26/f8/c2/0a2070a0.jpg","nickname":"xyz_学子","note":"","ucode":"88FFEC5AB2254F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379288,"discussion_content":"这就是现实，没办法，哎。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623811618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272933,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1610358200,"is_pvip":false,"replies":[{"id":"98959","content":"你做得已经很好了！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610457131,"ip_address":"","comment_id":272933,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44560031160","product_id":100068401,"comment_content":"看了郑大的例子，正合我当前做法，给自己吃颗定心丸。我现在java一个4万行代码的项目，最大的类不到300行代码。普遍100行以下。很多是得益于对象健身操。操练了对象健身操，对面向对象会有更深刻理解","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513431,"discussion_content":"你做得已经很好了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610457131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548257,"discussion_content":"哎，1W行以内的类对我来说都能接受，惧怕10W行的类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643103164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272980,"user_name":"Hobo","can_delete":false,"product_type":"c1","uid":1041960,"ip_address":"","ucode":"BE991F04E66ECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/28/1d3aace3.jpg","comment_is_top":false,"comment_ctime":1610375994,"is_pvip":false,"replies":[{"id":"99064","content":"如果 user 类是整个的根，修改联系方式就可以在 user 类里提供一个入口，然后，再调用 contact 类。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610588468,"ip_address":"","comment_id":272980,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31675147066","product_id":100068401,"comment_content":"将user里的联系信息单独拆出一个类来以后，我要对外暴露一个修改联系信息的方法是应该放user里还是放contact里？","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513446,"discussion_content":"如果 user 类是整个的根，修改联系方式就可以在 user 类里提供一个入口，然后，再调用 contact 类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610588468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272897,"user_name":"life吖","can_delete":false,"product_type":"c1","uid":2039071,"ip_address":"","ucode":"2379825F822161","user_header":"","comment_is_top":false,"comment_ctime":1610349707,"is_pvip":false,"replies":[{"id":"99237","content":"我的理解，你问的问题是，在微服务中，有专门把多个服务的结果聚合起来，返回给客户端，这是你所说的聚合层。你的问题是，在这个聚合层里，表示请求和应答的类可能会比较大，改怎么办。<br><br>根据这个理解，我的回答是，这里的聚合层扮演的角色其实一个防腐层，它本身的职责就是和请求应答去做一一应对。一般来说，这样类行为很单一，主要的职责就是数据转换。对于这种类，大一点是可以的，因为它不会对业务造成什么影响。重点在于，这个类里没有业务。<br><br>如果你想把类里面的字段做一个分组，可以研究一下不同的转换库，比如，在 Java 中把 JSON 和对象进行相互转换的 Jackson。看看它们怎么可以把不同类的字段和协议中的平铺字段直接映射，肯定有方案的。<br><br>不过，最后要提醒你的一个重点是，简单的聚合并不是一个好办法，而是需要谨慎地设计通信协议，这才是保证类比较小的根本办法。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610786815,"ip_address":"","comment_id":272897,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27380153483","product_id":100068401,"comment_content":"有的时候，拆分和聚合是需要做取舍的。比如，微服务的聚合层，是为了适配和性能考虑会做裁剪或聚合，不可避免的会出现些大类，此时可以进行字段分组，但是聚合后的大类是无法进行拆分。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513423,"discussion_content":"我的理解，你问的问题是，在微服务中，有专门把多个服务的结果聚合起来，返回给客户端，这是你所说的聚合层。你的问题是，在这个聚合层里，表示请求和应答的类可能会比较大，改怎么办。\n\n根据这个理解，我的回答是，这里的聚合层扮演的角色其实一个防腐层，它本身的职责就是和请求应答去做一一应对。一般来说，这样类行为很单一，主要的职责就是数据转换。对于这种类，大一点是可以的，因为它不会对业务造成什么影响。重点在于，这个类里没有业务。\n\n如果你想把类里面的字段做一个分组，可以研究一下不同的转换库，比如，在 Java 中把 JSON 和对象进行相互转换的 Jackson。看看它们怎么可以把不同类的字段和协议中的平铺字段直接映射，肯定有方案的。\n\n不过，最后要提醒你的一个重点是，简单的聚合并不是一个好办法，而是需要谨慎地设计通信协议，这才是保证类比较小的根本办法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610786815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110437,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f1/a5/6cc9f728.jpg","nickname":"秋天的透明雨🌧️","note":"","ucode":"9363B49BFA6C14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368791,"discussion_content":"“简单的聚合并不是一个好办法，而是需要谨慎地设计通信协议，这才是保证类比较小的根本办法。” 老师，这句话，我没有很好的理解，求解惑，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618833406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278276,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1612854573,"is_pvip":false,"replies":[{"id":"101064","content":"都可以，根据自己的需要。很多人纠结的点在于没做过“类分开，表在一起”，其实，很多框架是支持的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612872616,"ip_address":"","comment_id":278276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23087691053","product_id":100068401,"comment_content":"老师，请问一下，一般来说实体的大小和数据表的列是对应关系的，User类拆分出了Contact这个类，那么数据库的层面是否也应该差分出一个Contact表还是把信息都存储在User表的列中呢？","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515334,"discussion_content":"都可以，根据自己的需要。很多人纠结的点在于没做过“类分开，表在一起”，其实，很多框架是支持的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612872616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272958,"user_name":"明","can_delete":false,"product_type":"c1","uid":1607502,"ip_address":"","ucode":"34FF545704EA8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/4e/98173974.jpg","comment_is_top":false,"comment_ctime":1610366053,"is_pvip":false,"replies":[{"id":"99894","content":"不要把性能放在这里说事，因为这属于发力找错了对象。性能优化肯定不是在这个层面上的，而是要从一个系统的层面上进行考量。<br><br>类爆炸，首先是，啥叫类爆炸？类多就是类爆炸吗？那岂不是所有代码都在一个类里完成就是最好的。类多不是问题，问题是过度设计造成的难以理解的结构才是问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611454107,"ip_address":"","comment_id":272958,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23085202533","product_id":100068401,"comment_content":"老师，我也有个一直找不到平衡点的问题，就是类爆炸问题，如果拆分的类太多 会不会出现累爆炸的问题呢，从而影响系统性能，这个有没有个比较数字化的标准呢。还是我看这个问题的角度就完全不对。（ps 拍个马屁：我真的越来越崇拜老师了😍😍）","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513437,"discussion_content":"不要把性能放在这里说事，因为这属于发力找错了对象。性能优化肯定不是在这个层面上的，而是要从一个系统的层面上进行考量。\n\n类爆炸，首先是，啥叫类爆炸？类多就是类爆炸吗？那岂不是所有代码都在一个类里完成就是最好的。类多不是问题，问题是过度设计造成的难以理解的结构才是问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611454107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341646,"discussion_content":"性能大部分真不需要担心，等需要了再说呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610491392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272687,"user_name":"Sinvi","can_delete":false,"product_type":"c1","uid":1064018,"ip_address":"","ucode":"2A90976980CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/52/5951ffb4.jpg","comment_is_top":false,"comment_ctime":1610203765,"is_pvip":false,"replies":[{"id":"98835","content":"加油！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610238241,"ip_address":"","comment_id":272687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18790072949","product_id":100068401,"comment_content":"今天有了新的追求","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513355,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610238241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272605,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1610172119,"is_pvip":false,"replies":[{"id":"98819","content":"我知道大多数人做不到，但我们应该知道更高的追求是什么。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610194467,"ip_address":"","comment_id":272605,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18790041303","product_id":100068401,"comment_content":"每个类两个字段？？？？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513322,"discussion_content":"我知道大多数人做不到，但我们应该知道更高的追求是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610194467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341128,"discussion_content":"每个类两个字段真是一个沙雕理论","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610324108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2025938,"avatar":"","nickname":"tarjan","note":"","ucode":"AEE1B8DF951774","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348183,"discussion_content":"我也感觉有点，是不是我境界太低了😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612449152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341128,"ip_address":""},"score":348183,"extra":""}]},{"author":{"id":1028469,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/75/60a71bbd.jpg","nickname":"Ankhetsin","note":"","ucode":"3CA233D08D4A72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341153,"discussion_content":"原来一个类几百个字段，每个类两个字段的话，类是不是会特别多啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610331636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272603,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1610171079,"is_pvip":false,"replies":[{"id":"98823","content":"不意外，大多数代码都是有问题的，Clean Code是稀缺的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610196046,"ip_address":"","comment_id":272603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18790040263","product_id":100068401,"comment_content":"我们的项目中，或者是用到的类似于JPUSH这种开源软件中，都存在“大类”的问题。最头疼的是遇见没有注释说明的大类，里面罗列了很多字段、函数，但是你都没法一眼就看出来各自都是干嘛的，只能先猜一下，完了之后根据调用关系去梳理。<br><br>最近用PHP进行二次开发，用到一个扩展包，里面的入口class写得巨长无比......<br><br>目前来看，把类写小，越小越好能做到的是凤毛麟角呀。也可能是我见得太少了","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513320,"discussion_content":"不意外，大多数代码都是有问题的，Clean Code是稀缺的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610196046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272979,"user_name":"Hobo","can_delete":false,"product_type":"c1","uid":1041960,"ip_address":"","ucode":"BE991F04E66ECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/28/1d3aace3.jpg","comment_is_top":false,"comment_ctime":1610375818,"is_pvip":false,"replies":[{"id":"99063","content":"这是设计怎么与实现映射的事，通常来说，应该把实现拆分成多个表。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610588393,"ip_address":"","comment_id":272979,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14495277706","product_id":100068401,"comment_content":"我们项目实体类和数据库表是直接映射的，如果拆分成上面这样的话，数据库是也需要拆多表？(用户、作者、编辑)","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513445,"discussion_content":"这是设计怎么与实现映射的事，通常来说，应该把实现拆分成多个表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610588393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1057377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/22/61/580bb3c3.jpg","nickname":"hk","note":"","ucode":"92996CA0BCDD66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535308,"discussion_content":"郑老师，编辑，作者实体类分别对应两张表的话，两张表主键都为userId，1对1映射关系，这样理解对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638409042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":513445,"ip_address":""},"score":535308,"extra":""}]},{"author":{"id":1566421,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e6/d5/20c2fb6b.jpg","nickname":"天空提提","note":"","ucode":"055EB8E1966E34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582888,"discussion_content":"作者，编辑是不同角色，很自然想到用角色表，不知道是否合理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659755830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341647,"discussion_content":"对的，就是多个表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610491412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1041960,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e6/28/1d3aace3.jpg","nickname":"Hobo","note":"","ucode":"BE991F04E66ECD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341704,"discussion_content":"如果用户一些基本信息一样，仅是类型上面区分用户作者编辑，并且带一些自有属性的话，多表是否有点冗余","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610501595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341647,"ip_address":""},"score":341704,"extra":""}]}]},{"had_liked":false,"id":316468,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1634324985,"is_pvip":true,"replies":[{"id":"114633","content":"你这个论点是前提条件是，传输的对象和领域的对象是一致的，而这恰恰是我反对的。如果需要与上下游通信，那就设计一个专门的传输对象好了。<br><br>另外，传输对象和传输格式之间的映射都是可以定义的，我们不应该陷入到默认的模式里。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1634435972,"ip_address":"","comment_id":316468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10224259577","product_id":100068401,"comment_content":"老师，字段分组后，在做序列化反序列化（如json）的时候，就会多产生一个嵌套层级（由a.b变成了a.c.b）这样可能会破坏一些上下游服务的交互协议","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528391,"discussion_content":"你这个论点是前提条件是，传输的对象和领域的对象是一致的，而这恰恰是我反对的。如果需要与上下游通信，那就设计一个专门的传输对象好了。\n\n另外，传输对象和传输格式之间的映射都是可以定义的，我们不应该陷入到默认的模式里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634435972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273028,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1610416077,"is_pvip":false,"replies":[{"id":"98949","content":"看一下我在开篇词中提供的自查表，那里面的括号就是你要根据自己团队的实际情况填写的内容。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610434382,"ip_address":"","comment_id":273028,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10200350669","product_id":100068401,"comment_content":"1.总结：小类大对象+面相意图的抽象。<br><br>2.好的抽象只需关心使用不用关心实现，所以能降低复杂性。但不好的抽象。。。<br><br>3.个人觉得还是讲究平衡，没必要一上来就拆分得很细致。当复杂度让你皱眉头时再拆也许更物有所值。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513464,"discussion_content":"看一下我在开篇词中提供的自查表，那里面的括号就是你要根据自己团队的实际情况填写的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610434382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272646,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1610185393,"is_pvip":false,"replies":[{"id":"99059","content":"唉，用加班代替思考。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610584183,"ip_address":"","comment_id":272646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10200119985","product_id":100068401,"comment_content":"现在项目中很多大类，把很多东西都返回前端。美其名曰这样前端想怎么用怎么用。还有就是拆分成多个小类之后，很多人没有管理好小类的能力。分散的越来越复杂。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513335,"discussion_content":"唉，用加班代替思考。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610584183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344461,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1651569314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5946536610","product_id":100068401,"comment_content":"一个类不超过两个字段？典型的从一个极端走到另外一个极端！","like_count":1},{"had_liked":false,"id":308410,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1629606580,"is_pvip":false,"replies":[{"id":"111673","content":"这就看你封装出来的概念到底是什么了，比如说，如果封装的是参数，就放到与相应函数在一起的包里，如果封装出来的是一个实体的概念，那就放到实体包里。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629631126,"ip_address":"","comment_id":308410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924573876","product_id":100068401,"comment_content":"郑老师您好，「对象健身操」中有一条规则是「封装所有的原生类型和字符串」，请问这些封装好的对象在项目中一般放在什么目录下比较合适？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525486,"discussion_content":"这就看你封装出来的概念到底是什么了，比如说，如果封装的是参数，就放到与相应函数在一起的包里，如果封装出来的是一个实体的概念，那就放到实体包里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629631126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285679,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1616975072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5911942368","product_id":100068401,"comment_content":"分而治之 单一职责 字段分组 分离变化 将类设计了小类，不超出可控范围","like_count":1},{"had_liked":false,"id":273359,"user_name":"😳","can_delete":false,"product_type":"c1","uid":1452857,"ip_address":"","ucode":"9AFB87EF308539","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/39/19041d78.jpg","comment_is_top":false,"comment_ctime":1610550067,"is_pvip":false,"replies":[{"id":"99100","content":"同情你。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610621503,"ip_address":"","comment_id":273359,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905517363","product_id":100068401,"comment_content":"项目中好像都是大类，每个人加点东西，就更庞大了。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513576,"discussion_content":"同情你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610621503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273114,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1610443147,"is_pvip":false,"replies":[{"id":"99053","content":"我现在通常的做法是，引入应用服务层，在应用服务层去协调各个领域服务层。而在领域服务层，一个服务通常只对应一个数据库访问层的代码。<br><br>你这里的纠结其实就是缺少了应用服务层。如果不引入应用服务层，可以考虑的做法是，服务层内部可以引用，但服务只对应一个数据库访问层代码。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610583304,"ip_address":"","comment_id":273114,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5905410443","product_id":100068401,"comment_content":"MVC里常出现的大类是UserService,提供登陆，注册，修改密码，查询用户等方法里面会有UserDao,LoginRecordDao，CacheDao等很多个注入的“字段”。这种应该怎么拆分呢，如果按职责拆分成UserLoginService,UserRegisterService,UserPasswordService,UserInfoService，保持每个service里面又少量注入“Service、Dao”，这么拆对不对呢","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513496,"discussion_content":"我现在通常的做法是，引入应用服务层，在应用服务层去协调各个领域服务层。而在领域服务层，一个服务通常只对应一个数据库访问层的代码。\n\n你这里的纠结其实就是缺少了应用服务层。如果不引入应用服务层，可以考虑的做法是，服务层内部可以引用，但服务只对应一个数据库访问层代码。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610583304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110437,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f1/a5/6cc9f728.jpg","nickname":"秋天的透明雨🌧️","note":"","ucode":"9363B49BFA6C14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368793,"discussion_content":"老师，请问哪里可以看到你提到的这种分层做法的开源或示例代码？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618833668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1560540,"avatar":"https://static001.geekbang.org/account/avatar/00/17/cf/dc/e744309f.jpg","nickname":"bigmini","note":"","ucode":"044BE4E41106EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377251,"discussion_content":"这里我也不是很懂，如果有正确的示例就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622560370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357025,"user_name":"王展鹏","can_delete":false,"product_type":"c1","uid":1297033,"ip_address":"广东","ucode":"DF72850C8E1A89","user_header":"https://static001.geekbang.org/account/avatar/00/13/ca/89/dc1949c1.jpg","comment_is_top":false,"comment_ctime":1662866694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662866694","product_id":100068401,"comment_content":"目前做前端工作，采用vue的单文件组件模式进行开发。由于业务场景的原因，之前采用1000行作为组件的最大长度，现在看来设置得大了。但是前端的交互、状态、展示会比较多，可能做不到100行以内。","like_count":0},{"had_liked":false,"id":353762,"user_name":"天空提提","can_delete":false,"product_type":"c1","uid":1566421,"ip_address":"湖南","ucode":"055EB8E1966E34","user_header":"https://static001.geekbang.org/account/avatar/00/17/e6/d5/20c2fb6b.jpg","comment_is_top":false,"comment_ctime":1659755772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659755772","product_id":100068401,"comment_content":"老师您好，用户、作者、编辑的表设计是否可以用rbac那套呢？作者，编辑用一张角色表可以吗？","like_count":0},{"had_liked":false,"id":350176,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1656639373,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656639373","product_id":100068401,"comment_content":"已发布线上的代码是不敢大动的。但那种紧耦合，复杂度高的代码就为后面维护它的人很不友好，嘴上抱怨着谁写的烂代码，但该继续开发还得继续。而且为了不重构改稳定版本的代码，会做很多“迁就”，走上老路。这就是个恶性循环!","like_count":0},{"had_liked":false,"id":347396,"user_name":"行者","can_delete":false,"product_type":"c1","uid":3012072,"ip_address":"","ucode":"264273207D7F8C","user_header":"https://static001.geekbang.org/account/avatar/00/2d/f5/e8/6142eaec.jpg","comment_is_top":false,"comment_ctime":1653989294,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1653989294","product_id":100068401,"comment_content":"提了很不专业的问题，拆分成多个小类，怎么用呢？ 用一个基础类来继承多个小类么？","like_count":1,"discussions":[{"author":{"id":3210108,"avatar":"","nickname":"Geek_6d2d8b","note":"","ucode":"983AB5E069E0F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592104,"discussion_content":"我也想知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667114360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347097,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653712493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653712493","product_id":100068401,"comment_content":"把类写小，越小越好--记下来","like_count":0},{"had_liked":false,"id":344197,"user_name":"远逝的栀子花","can_delete":false,"product_type":"c1","uid":1608615,"ip_address":"","ucode":"77DCF684BABEEF","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/a7/b6471f02.jpg","comment_is_top":false,"comment_ctime":1651361345,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651361345","product_id":100068401,"comment_content":"open stack  nova代码中的manage模块中的类都是大类，尤其是compute.manage，一个类有几十个方法与成员变量。","like_count":0},{"had_liked":false,"id":343374,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1650805230,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650805230","product_id":100068401,"comment_content":"课前思考：<br>1. 大类有哪些特征？如何判定一个类是一个大类？<br>2. 为什么会写出大类？<br>3. 大类反应出来的编码本质问题是什么？或者换一种说法，把大类拆解成小的模块，带来了哪些改变？<br>4. 如何重构大类？","like_count":0},{"had_liked":false,"id":331615,"user_name":"good-goose","can_delete":false,"product_type":"c1","uid":2410740,"ip_address":"","ucode":"86BDE6A483DEC6","user_header":"https://static001.geekbang.org/account/avatar/00/24/c8/f4/c2bdf8e8.jpg","comment_is_top":false,"comment_ctime":1642670550,"is_pvip":false,"replies":[{"id":"121295","content":"一张表和两张表都可以，用JPA都有相应的映射方法","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1642982570,"ip_address":"","comment_id":331615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642670550","product_id":100068401,"comment_content":"请问郑老师，User里面引用了Contact实例，对应到数据表应该怎么设计呢？分成两个表吗？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547971,"discussion_content":"一张表和两张表都可以，用JPA都有相应的映射方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642982570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307167,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1628919154,"is_pvip":false,"replies":[{"id":"111321","content":"因为它不是一个实体，只是切分出来的一个部分","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629113493,"ip_address":"","comment_id":307167,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1628919154","product_id":100068401,"comment_content":"contact类不用存对象id么","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525066,"discussion_content":"因为它不是一个实体，只是切分出来的一个部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629113493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1057377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/22/61/580bb3c3.jpg","nickname":"hk","note":"","ucode":"92996CA0BCDD66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535306,"discussion_content":"郑老师，contact类不是实体对象的话，划分为值对象吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638408710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":525066,"ip_address":""},"score":535306,"extra":""},{"author":{"id":1063906,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/e2/e7bc0cab.jpg","nickname":"一夕sneaky","note":"","ucode":"02F28470AEB480","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1057377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/22/61/580bb3c3.jpg","nickname":"hk","note":"","ucode":"92996CA0BCDD66","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549972,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644314798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535306,"ip_address":""},"score":549972,"extra":""}]}]}]}