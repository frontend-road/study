{"id":136886,"title":"35 | Hot Reload是怎么做到的？","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我与你分享了Flutter的Debug与Release编译模式，以及如何通过断言与编译常数来精准识别当前代码所运行的编译模式，从而写出只在Debug或Release模式下生效的代码。</p><p>另外，对于在开发期与发布期分别使用不同的配置环境，Flutter也提供了支持。我们可以将应用中可配置的部分进行封装抽象，使用配置多入口的方式，通过InheritedWidget来为应用的启动注入环境配置。</p><p>如果你有过原生应用的开发经历，那你一定知道在原生应用开发时，如果我们想要在硬件设备上看到调整后的运行效果，在完成了代码修改后，必须要经过漫长的重新编译，才能同步到设备上。</p><p>而Flutter则不然，由于Debug模式支持JIT，并且为开发期的运行和调试提供了大量优化，因此代码修改后，我们可以通过亚秒级的热重载（Hot Reload）进行增量代码的快速刷新，而无需经过全量的代码编译，从而大大缩短了从代码修改到看到修改产生的变化之间所需要的时间。</p><p>比如，在开发页面的过程中，当我们点击按钮出现一个弹窗的时候，发现弹窗标题没有对齐，这时候只要修改标题的对齐样式，然后保存，在代码并没有重新编译的情况下，标题样式就发生了改变，感觉就像是在UI编辑面板中直接修改元素样式一样，非常方便。</p><!-- [[[read_end]]] --><p>那么，Flutter的热重载到底是如何实现的呢？</p><h2>热重载</h2><p>热重载是指，在不中断App正常运行的情况下，动态注入修改后的代码片段。而这一切的背后，离不开Flutter所提供的运行时编译能力。为了更好地理解Flutter的热重载实现原理，我们先简单回顾一下Flutter编译模式背后的技术吧。</p><ul>\n<li>JIT（Just In Time），指的是即时编译或运行时编译，在Debug模式中使用，可以动态下发和执行代码，启动速度快，但执行性能受运行时编译影响；</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/ab/a3/ab692d1e072df378bc78fef6245205a3.png?wh=1502*542\" alt=\"\"></p><center><span class=\"reference\">图1 JIT编译模式示意图</span></center><ul>\n<li>AOT（Ahead Of Time），指的是提前编译或运行前编译，在Release模式中使用，可以为特定的平台生成稳定的二进制代码，执行性能好、运行速度快，但每次执行均需提前编译，开发调试效率低。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/fe/a5/fe8712b8a36a032b0646ed85fec9b2a5.png?wh=1308*392\" alt=\"\"></p><center><span class=\"reference\">图2 AOT编译模式示意图</span></center><p>可以看到，Flutter提供的两种编译模式中，AOT是静态编译，即编译成设备可直接执行的二进制码；而JIT则是动态编译，即将Dart代码编译成中间代码（Script Snapshot），在运行时设备需要Dart VM解释执行。</p><p>而热重载之所以只能在Debug模式下使用，是因为Debug模式下，Flutter采用的是JIT动态编译（而Release模式下采用的是AOT静态编译）。JIT编译器将Dart代码编译成可以运行在Dart VM上的Dart Kernel，而Dart Kernel是可以动态更新的，这就实现了代码的实时更新功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/fa/2dfbedae7b95dd152a587070db4bb9fa.png?wh=900*528\" alt=\"\"></p><center><span class=\"reference\">图3 热重载流程</span></center><p>总体来说，<strong>热重载的流程可以分为扫描工程改动、增量编译、推送更新、代码合并、Widget重建5个步骤：</strong></p><ol>\n<li>工程改动。热重载模块会逐一扫描工程中的文件，检查是否有新增、删除或者改动，直到找到在上次编译之后，发生变化的Dart代码。</li>\n<li>增量编译。热重载模块会将发生变化的Dart代码，通过编译转化为增量的Dart Kernel文件。</li>\n<li>推送更新。热重载模块将增量的Dart Kernel文件通过HTTP端口，发送给正在移动设备上运行的Dart VM。</li>\n<li>代码合并。Dart VM会将收到的增量Dart Kernel文件，与原有的Dart Kernel文件进行合并，然后重新加载新的Dart Kernel文件。</li>\n<li>Widget重建。在确认Dart VM资源加载成功后，Flutter会将其UI线程重置，通知Flutter Framework重建Widget。</li>\n</ol><p>可以看到，Flutter提供的热重载在收到代码变更后，并不会让App重新启动执行，而只会触发Widget树的重新绘制，因此可以保持改动前的状态，这就大大节省了调试复杂交互界面的时间。</p><p>比如，我们需要为一个视图栈很深的页面调整UI样式，若采用重新编译的方式，不仅需要漫长的全量编译时间，而为了恢复视图栈，也需要重复之前的多次点击交互，才能重新进入到这个页面查看改动效果。但如果是采用热重载的方式，不仅没有编译时间，而且页面的视图栈状态也得以保留，完成热重载之后马上就可以预览UI效果了，相当于局部界面刷新。</p><h2>不支持热重载的场景</h2><p>Flutter提供的亚秒级热重载一直是开发者的调试利器。通过热重载，我们可以快速修改UI、修复Bug，无需重启应用即可看到改动效果，从而大大提升了UI调试效率。</p><p>不过，Flutter的热重载也有一定的局限性。因为涉及到状态保存与恢复，所以并不是所有的代码改动都可以通过热重载来更新。</p><p>接下来，我就与你介绍几个不支持热重载的典型场景：</p><ul>\n<li>代码出现编译错误；</li>\n<li>Widget状态无法兼容；</li>\n<li>全局变量和静态属性的更改；</li>\n<li>main方法里的更改；</li>\n<li>initState方法里的更改；</li>\n<li>枚举和泛类型更改。</li>\n</ul><p>现在，我们就具体看看这几种场景的问题，应该如何解决吧。</p><h2>代码出现编译错误</h2><p>当代码更改导致编译错误时，热重载会提示编译错误信息。比如下面的例子中，代码中漏写了一个反括号，在使用热重载时，编译器直接报错：</p><pre><code>Initializing hot reload...\nSyncing files to device iPhone X...\n\nCompiler message:\nlib/main.dart:84:23: Error: Can't find ')' to match '('.\n    return MaterialApp(\n                      ^\nReloaded 1 of 462 libraries in 301ms.\n</code></pre><p>在这种情况下，只需更正上述代码中的错误，就可以继续使用热重载。</p><h2>Widget状态无法兼容</h2><p>当代码更改会影响Widget的状态时，会使得热重载前后Widget所使用的数据不一致，即应用程序保留的状态与新的更改不兼容。这时，热重载也是无法使用的。</p><p>比如下面的代码中，我们将某个类的定义从 StatelessWidget改为StatefulWidget时，热重载就会直接报错：</p><pre><code>//改动前\nclass MyWidget extends StatelessWidget {\n  Widget build(BuildContext context) {\n    return GestureDetector(onTap: () =&gt; print('T'));\n  }\n}\n\n//改动后\nclass MyWidget extends StatefulWidget {\n  @override\n  State&lt;MyWidget&gt; createState() =&gt; MyWidgetState();\n}\nclass MyWidgetState extends State&lt;MyWidget&gt; { /*...*/ }\n</code></pre><p>当遇到这种情况时，我们需要重启应用，才能看到更新后的程序。</p><h2>全局变量和静态属性的更改</h2><p>在Flutter中，全局变量和静态属性都被视为状态，在第一次运行应用程序时，会将它们的值设为初始化语句的执行结果，因此在热重载期间不会重新初始化。</p><p>比如下面的代码中，我们修改了一个静态Text数组的初始化元素。虽然热重载并不会报错，但由于静态变量并不会在热重载之后初始化，因此这个改变并不会产生效果：</p><pre><code>//改动前\nfinal sampleText = [\n  Text(&quot;T1&quot;),\n  Text(&quot;T2&quot;),\n  Text(&quot;T3&quot;),\n  Text(&quot;T4&quot;),\n];\n\n//改动后\nfinal sampleText = [\n  Text(&quot;T1&quot;),\n  Text(&quot;T2&quot;),\n  Text(&quot;T3&quot;),\n  Text(&quot;T10&quot;),    //改动点\n];\n</code></pre><p>如果我们需要更改全局变量和静态属性的初始化语句，重启应用才能查看更改效果。</p><h2>main方法里的更改</h2><p>在Flutter中，由于热重载之后只会根据原来的根节点重新创建控件树，因此main函数的任何改动并不会在热重载后重新执行。所以，如果我们改动了main函数体内的代码，是无法通过热重载看到更新效果的。</p><p>在第1篇文章“<a href=\"https://time.geekbang.org/column/article/104051\">预习篇 · 从零开始搭建Flutter开发环境</a>”中，我与你介绍了这种情况。在更新前，我们通过MyApp封装了一个展示“Hello World”的文本，在更新后，直接在main函数封装了一个展示“Hello 2019”的文本：</p><pre><code>//更新前\nclass MyAPP extends StatelessWidget {\n@override\n  Widget build(BuildContext context) {\n    return const Center(child: Text('Hello World', textDirection: TextDirection.ltr));\n  }\n}\n\nvoid main() =&gt; runApp(new MyAPP());\n\n//更新后\nvoid main() =&gt; runApp(const Center(child: Text('Hello, 2019', textDirection: TextDirection.ltr)));\n</code></pre><p>由于main函数并不会在热重载后重新执行，因此以上改动是无法通过热重载查看更新的。</p><h2>initState方法里的更改</h2><p>在热重载时，Flutter会保存Widget的状态，然后重建Widget。而initState方法是Widget状态的初始化方法，这个方法里的更改会与状态保存发生冲突，因此热重载后不会产生效果。</p><p>在下面的例子中，我们将计数器的初始值由10改为100：</p><pre><code>//更改前\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  int _counter;\n  @override\n  void initState() {\n    _counter = 10;\n    super.initState();\n  }\n  ...\n}\n\n//更改后\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  int _counter;\n  @override\n  void initState() {\n    _counter = 100;\n    super.initState();\n  }\n  ...\n}\n</code></pre><p>由于这样的改动发生在initState方法中，因此无法通过热重载查看更新，我们需要重启应用，才能看到更改效果。</p><h2>枚举和泛型类型更改</h2><p>在Flutter中，枚举和泛型也被视为状态，因此对它们的修改也不支持热重载。比如在下面的代码中，我们将一个枚举类型改为普通类，并为其增加了一个泛型参数：</p><pre><code>//更改前\nenum Color {\n  red,\n  green,\n  blue\n}\n\nclass C&lt;U&gt; {\n  U u;\n}\n\n//更改后\nclass Color {\n  Color(this.r, this.g, this.b);\n  final int r;\n  final int g;\n  final int b;\n}\n\nclass C&lt;U, V&gt; {\n  U u;\n  V v;\n}\n</code></pre><p>这两类更改都会导致热重载失败，并生成对应的提示消息。同样的，我们需要重启应用，才能查看到更改效果。</p><h2>总结</h2><p>好了，今天的分享就到这里，我们总结一下今天的主要内容吧。</p><p>Flutter的热重载是基于JIT编译模式的代码增量同步。由于JIT属于动态编译，能够将Dart代码编译成生成中间代码，让Dart VM在运行时解释执行，因此可以通过动态更新中间代码实现增量同步。</p><p>热重载的流程可以分为5步，包括：扫描工程改动、增量编译、推送更新、代码合并、Widget重建。Flutter在接收到代码变更后，并不会让App重新启动执行，而只会触发Widget树的重新绘制，因此可以保持改动前的状态，大大缩短了从代码修改到看到修改产生的变化之间所需要的时间。</p><p>而另一方面，由于涉及到状态保存与恢复，因此涉及状态兼容与状态初始化的场景，热重载是无法支持的，比如改动前后Widget状态无法兼容、全局变量与静态属性的更改、main方法里的更改、initState方法里的更改、枚举和泛型的更改等。</p><p>可以发现，热重载提高了调试UI的效率，非常适合写界面样式这样需要反复查看修改效果的场景。但由于其状态保存的机制所限，热重载本身也有一些无法支持的边界。</p><p>如果你在写业务逻辑的时候，不小心碰到了热重载无法支持的场景，也不需要进行漫长的重新编译加载等待，只要点击位于工程面板左下角的热重启（Hot Restart）按钮，就可以以秒级的速度进行代码重新编译以及程序重启了，同样也很快。</p><h2>思考题</h2><p>最后，我给你留下一道思考题吧。</p><p>你是否了解其他框架（比如React Native、Webpack）的热重载机制？它们的热重载机制与Flutter有何区别？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"34 | 如何理解Flutter的编译模式？","id":135865},"right":{"article_title":"36 | 如何通过工具链优化开发调试效率？","id":137789}},"comments":[{"had_liked":false,"id":133982,"user_name":"GL","can_delete":false,"product_type":"c1","uid":1125950,"ip_address":"","ucode":"EB14AF83184E85","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/3e/5ae876fd.jpg","comment_is_top":false,"comment_ctime":1568710622,"is_pvip":false,"replies":[{"id":"52437","content":"赞👍","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569500001,"ip_address":"","comment_id":133982,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27338514398","product_id":100031001,"comment_content":"React Native 采用脚本语言编写，脚本语言即读即运行，不需要编译，在读之前替换成新版本的脚本，运行时执行的便是新的逻辑；RN打包时会将RN源代码、第三方库及自己编写的js代码都打包成一个bundle文件(Android是index.android.bundle，ios是index.ios.bundle),App启动时会加载bundle文件，所以替换掉这个bundle文件就能实现热重载了，RN中提供了修改读取bundle路径的方法，可以将最新的bundle更新到读取bundle的指定路径进而实现热重载。","like_count":7,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467572,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569500001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/a9/9abbe7a4.jpg","nickname":"神三元","note":"","ucode":"0FB2E7C0683599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164277,"discussion_content":"你说的太模糊了，如果说全部都重新执行，解释起来还得很慢。v8引擎本身就是JIT的编译模式，JS并不完全是解释性语言，中间会生成字节码，然后会将运行两次以上代码编译成机器码，这样就跟flutter的热更新机制不谋而合。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581166527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133958,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1568706916,"is_pvip":false,"replies":[{"id":"52436","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569499981,"ip_address":"","comment_id":133958,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453608804","product_id":100031001,"comment_content":"Webpack的热重载原理大致是：初始化注入一段js脚本，里面与webpack开发服务器建立一个WebSocket连接，当文件有改动的时间，通过WebSocket将文件下发，随后浏览器重新执行新的代码。状态管理则是在内存中，依赖Redux之类的库，所以UI和状态是分离的，可以比较容易的实现热重载。","like_count":4,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467563,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569499981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273334,"user_name":"张训博-forrest","can_delete":false,"product_type":"c1","uid":1331072,"ip_address":"","ucode":"9A50F9BD3FFDE1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIdTsqPhlVH3TFElzic8422uBDelRjYiaktCJRmIRpLrgBBfBKnSO9PlbHibnHAc9cQEmLHes3fayEw/132","comment_is_top":false,"comment_ctime":1610537950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905505246","product_id":100031001,"comment_content":"Release模式是AOT模式，android编译成so文件，那么运行时是不是不需要Dart VM。图2的Dart VM是不是不需要？","like_count":1},{"had_liked":false,"id":194392,"user_name":"...","can_delete":false,"product_type":"c1","uid":1020427,"ip_address":"","ucode":"35C881D8AA1C5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/0b/2ccf7908.jpg","comment_is_top":false,"comment_ctime":1585057410,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5880024706","product_id":100031001,"comment_content":"Android原生也是支持JIT和AOT的  所以是不是按道理原生也可以Hotreload","like_count":1,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318281,"discussion_content":"那你得把：生成差异文件（或直接新文件），推送，合并（或替换）这一套都实现掉。类似hotfix","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603696117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1330328,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/98/2e916c7e.jpg","nickname":"Senble","note":"","ucode":"98A8DC9FF625FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320875,"discussion_content":"关键系统不允许。flutter 关键是自己做了一个有个dart vm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604495734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318281,"ip_address":""},"score":320875,"extra":""}]}]},{"had_liked":false,"id":325886,"user_name":"Lothar","can_delete":false,"product_type":"c1","uid":1457360,"ip_address":"","ucode":"B4BED644257E5F","user_header":"https://static001.geekbang.org/account/avatar/00/16/3c/d0/224e5f22.jpg","comment_is_top":false,"comment_ctime":1639212810,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639212810","product_id":100031001,"comment_content":"ios不支持运行时写内存和执行内存，那从这个角度hot reload是如何实现的呢？","like_count":0},{"had_liked":false,"id":285929,"user_name":"szWest","can_delete":false,"product_type":"c1","uid":1159772,"ip_address":"","ucode":"9EB291C94EBB4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/b2/5c/239825e4.jpg","comment_is_top":false,"comment_ctime":1617076629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617076629","product_id":100031001,"comment_content":"这里编译模式Script Snapshot是不是错了（太旧了？），实际上现在是Kernel Snapshot模式吧","like_count":0},{"had_liked":false,"id":274558,"user_name":"张训博-forrest","can_delete":false,"product_type":"c1","uid":1331072,"ip_address":"","ucode":"9A50F9BD3FFDE1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIdTsqPhlVH3TFElzic8422uBDelRjYiaktCJRmIRpLrgBBfBKnSO9PlbHibnHAc9cQEmLHes3fayEw/132","comment_is_top":false,"comment_ctime":1611061047,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611061047","product_id":100031001,"comment_content":"@作者<br>确认下release模式在运行时是不是不需要dart VM 看源码都是so文件了","like_count":0,"discussions":[{"author":{"id":1159772,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/5c/239825e4.jpg","nickname":"szWest","note":"","ucode":"9EB291C94EBB4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362937,"discussion_content":"这个我也有疑问。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617076680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253254,"user_name":"unicen_pgzh","can_delete":false,"product_type":"c1","uid":1603205,"ip_address":"","ucode":"0A37E53C3B0292","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eor3yhoBAvuFDgRVLzXsLhhIOiaRPPdwnVwibC39bRuSYXZ5M1AyJRGrEtkVBjbpXuf63l0EsPbGfPw/132","comment_is_top":false,"comment_ctime":1602663312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602663312","product_id":100031001,"comment_content":"目前flutter的动态化或者说插件化有什么好的方案吗？求老师指教，谢谢。","like_count":0},{"had_liked":false,"id":165716,"user_name":"时光念你","can_delete":false,"product_type":"c1","uid":1051653,"ip_address":"","ucode":"1F19ECFBE58280","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/05/3e2b8688.jpg","comment_is_top":false,"comment_ctime":1577288273,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577288273","product_id":100031001,"comment_content":"混合开发下，如何进行hotreload，希望老师能解答一下。","like_count":0,"discussions":[{"author":{"id":1087786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/2a/f7e19dcc.jpg","nickname":"放开那个猴子","note":"","ucode":"93595F09B94402","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207870,"discussion_content":"关键字&#34;flutter attach&#34;, attach到已经运行的应用上，可在混合模式下享受hotreload","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584519500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153561,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1574258783,"is_pvip":false,"replies":[{"id":"59807","content":"官方不支持；Android的纯Flutter应用可以通过产物替换实现，iOS不行","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574756191,"ip_address":"","comment_id":153561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574258783","product_id":100031001,"comment_content":"Flutter 支持热更吗","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475210,"discussion_content":"官方不支持；Android的纯Flutter应用可以通过产物替换实现，iOS不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574756191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138213,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1041455,"ip_address":"","ucode":"352964E5D793DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/2f/fb01f76d.jpg","comment_is_top":false,"comment_ctime":1570100281,"is_pvip":false,"replies":[{"id":"54810","content":"和纯Flutter App一样的呀，他俩运行机制没有区别","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1571282918,"ip_address":"","comment_id":138213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570100281","product_id":100031001,"comment_content":"对于现有 iOS 工程集成的 flutter_module 类型，支持 hot reload 的原理是什么呢？可以理解为代码改变后，重新生成了app.framework，之后flutter.framework中的Dart VM 和 Kernel 来实现 app.framework的重新加载，以及对应的Widget重建么？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469438,"discussion_content":"和纯Flutter App一样的呀，他俩运行机制没有区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571282918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}