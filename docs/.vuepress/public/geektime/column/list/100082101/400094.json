{"id":400094,"title":"说点题外话04｜面向对象的原则适用于RESTful API吗？","content":"<p>你好，我是徐昊。今天我们再来专门说点题外话。</p><p>前面几期题外话都比较偏向于提供一种不同的角度，主要是因为你们也并没有针对课程的内容，提出什么特别的问题需要我来具体回答。那么作为我们在进入新约前的最后一篇题外话，我想聊一聊关于RESTful API的问题。</p><p>我记得有位同学在留言区问了这样一个问题：过长的URI是否破坏了迪米特法则（Law of Demeter）。这里我们就要搞清楚，什么是迪米特法则呢？</p><p>迪米特法则又叫最小可知法则，指的是<strong>在面向对象设计中，实体应尽可能少地与其他实体发生交互</strong>。为了说明什么是“少的交互”，我们还特别归纳了一组可以认为不违反迪米特法则，并且可以直接调用的对象：</p><ul>\n<li>当前对象自己（this，self）；</li>\n<li>以参数形式传入的对象，比如函数的形参（parameter）；</li>\n<li>当前对象内实例变量引用的对象（instance variable）；</li>\n<li>如果实例变量是集合，那么集合中的对象也可以访问（collection，aggregration）；</li>\n<li>由当前对象创建的对象（variable declaration in function）。</li>\n</ul><p>那么这些场景适用于RESTful API调用的场景吗？显然并不太适用。因为在RESTful API的场景中，实体只有客户端和API提供者，而API提供者的内在结构都被API层屏蔽了。所以无论怎么调用，都不会出现对于API提供者内部结构的依赖。</p><!-- [[[read_end]]] --><p>如果我们把迪米特法则扩展一下，推广到概念层面，暴露了内在的逻辑就算。那么恰恰是RESTful API，能帮助我们继续遵循迪米特法则。</p><p>比如通过超媒体明确地表示资源之间的关联，而不是依靠客户端去拼凑URI。如果客户端可以拼凑出URI，则表明客户端对于API提供者的内在逻辑存在依赖。而通过HATEOAS，把所有关联的链接直接提供，就避免了暴露内在的逻辑。</p><p>再比如，API的设计要按照HTTP语义约定，而不是客户端与API供应者之间的“私约”（private protocol）。PUT只能修改已经存在的资源，而不能构建新的资源；POST创建资源成功，需要返回201，并在HEAD中给出新构建资源的URI；GET默认都是可以缓存的，无法缓存的查询（而不是通过URI遍历信息），需要用POST访问等等。这些都是希望通过公约，将客户端中对于API供应者的了解降到最低。</p><p>所以迪米特法则本身的想法是不错的，但是场景改变了，我们就要重新思考它在新的环境中是如何被应用的。而如果我们真的在乎迪米特法则，那么在RESTful API的场景下，关注点就不会放在URI有多长上，而应放在客户端与服务器间的知识依赖到底有多少上。</p><p>另外一个对于RESTful API的质疑在于，通过HATEOAS完全以分布式超媒体的方式构成API，那么客户端看起来越来越像浏览器，而不是针对RESTful API的客户端了。</p><p>正如我们在第10讲中讲到的，RESTful架构风格<strong>是对互联网架构的反思</strong>。那么互联网架构的核心在于开放性和扩展性，因而<strong>RESTful架构风格的核心也是开放<strong><strong>性</strong></strong>和扩展性</strong>。</p><p>因为开放，使得RESTful API的供应者不会对客户端作出任何假设。就好像互联网服务器并不会假设它的客户端只有浏览器一样，wget、telnet等等都是可能的客户端；而因为扩展性，RESTful API只会为客户端提供最基本的功能，大量的计算被分布到了客户端侧进行。</p><p>这种架构的假设是不同于企业应用的客户端与服务器架构的，在企业应用架构的语境中，客户端与服务器有更多的耦合。服务端更多地是为客户端提供服务，而不是保持自己开放和稳定。</p><p>那么为什么RESTful API最终还是成为“行业主流”了呢（虽然真的会，和真的用的人并不多）？</p><p>因为从大趋势上来说，将企业内的能力（而不仅仅是后台）构造成开放API，并围绕着开放API，形成企业内生态是大势。在这个大势之下，RESTful API、MicroService、企业内生态、能力平台、中台形成了一条清晰的企业架构现代化之路。仅仅服务于某些（或者某个）前台的后台服务，终将会淡出历史的舞台。</p><p>因而在这种历史转折的节点，我们更应该清晰地理解不同想法之间的差异，哪怕它们要解决的问题与现行方法是相似的，但是对于这是什么问题，我们要怎么想，还是带来了完全不同的角度。</p><h2>思考题</h2><p>请问其他面向对象原则与最佳实践，在RESTful架构下有何种体现？</p><p>欢迎把你的思考和想法分享在留言区，我会和你交流。我们新约部分再见！</p>","comments":[{"had_liked":false,"id":336646,"user_name":"海连天","can_delete":false,"product_type":"c1","uid":1072690,"ip_address":"","ucode":"8CFAFA59086BFA","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/32/1ccb2b7c.jpg","comment_is_top":false,"comment_ctime":1646273577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5941240873","product_id":100082101,"comment_content":"老师怎么看GraphQL","like_count":1},{"had_liked":false,"id":304400,"user_name":"邹溪源","can_delete":false,"product_type":"c1","uid":1297924,"ip_address":"","ucode":"D7465A8B956D81","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/04/c324a7de.jpg","comment_is_top":false,"comment_ctime":1627387564,"is_pvip":false,"replies":[{"id":"110151","content":"面向对象不面向对象单说 比较容易得到稳定的api","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1627435716,"ip_address":"","comment_id":304400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922354860","product_id":100082101,"comment_content":"接口无处不在，而良好的设计则更显得非常重要。基于restful的架构风格设计接口，相比传统的http风格设计的接口，更易于引入面向对象的程序设计。这种设计也成为实践单一职责原则的练兵场。<br>而有了接口，也使得依赖倒置成为一种基本操作。","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524032,"discussion_content":"面向对象不面向对象单说 比较容易得到稳定的api","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627435716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341316,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1649516926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649516926","product_id":100082101,"comment_content":"原来 RESTful 还有一个 HATEOAS<br>","like_count":0},{"had_liked":false,"id":319319,"user_name":"许凯","can_delete":false,"product_type":"c1","uid":1604645,"ip_address":"","ucode":"4F11AD41CB0244","user_header":"https://static001.geekbang.org/account/avatar/00/18/7c/25/70134099.jpg","comment_is_top":false,"comment_ctime":1635742739,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635742739","product_id":100082101,"comment_content":"功能和配置一致、单一、完整、正交","like_count":0},{"had_liked":false,"id":305061,"user_name":"阿鸡","can_delete":false,"product_type":"c1","uid":1589246,"ip_address":"","ucode":"F181422D4EB444","user_header":"https://static001.geekbang.org/account/avatar/00/18/3f/fe/35d1afbd.jpg","comment_is_top":false,"comment_ctime":1627796524,"is_pvip":false,"replies":[{"id":"110372","content":"跨进程边界无法用面向对象","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1627866587,"ip_address":"","comment_id":305061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627796524","product_id":100082101,"comment_content":"想请问下SOA能使用面向对象的原则吗？ 还是只能在服务内部面向对象，在服务边界还是传统的DO加XxService的形态","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524262,"discussion_content":"跨进程边界无法用面向对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627866587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}