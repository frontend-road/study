{"id":199663,"title":"03 | ACID理论：CAP的酸，追求一致性","content":"<p>你好，我是韩健。</p><p>提到ACID，我想你并不陌生，很多同学也会觉得它容易理解，在单机上实现ACID也不难，比如可以通过锁、时间序列等机制保障操作的顺序执行，让系统实现ACID特性。但是，一说要实现分布式系统的ACID特性，很多同学就犯难了。那么问题来了，为什么分布式系统的ACID特性在实现上，比较难掌握呢？</p><p>在我看来，ACID理论是对事务特性的抽象和总结，方便我们实现事务。你可以理解成：如果实现了操作的ACID特性，那么就实现了事务。而大多数人觉得比较难，是因为分布式系统涉及多个节点间的操作。加锁、时间序列等机制，只能保证单个节点上操作的ACID特性，无法保证节点间操作的ACID特性。</p><p>那么怎么做才会让实现不那么难呢？答案是你要掌握分布式事务协议，比如二阶段提交协议和TCC（Try-Confirm-Cancel）。这也是我接下来重点和你分享的内容。</p><p>不过在带你了解二阶段提交协议和TCC之前，咱们先继续看看苏秦的故事，看这回苏秦又遇到了什么事儿。</p><p>最近呢，秦国按捺不住自己躁动的心，开始骚扰魏国边境，魏王头疼，向苏秦求助，苏秦认为“三晋一家亲”，建议魏王联合赵、韩一起对抗秦国。但是这三个国家实力都很弱，需要大家都同意联合，一致行动，如果有任何一方不方便行动，就取消整个计划。</p><!-- [[[read_end]]] --><p>根据侦查情况，明天发动反攻胜算比较大。苏秦想协调赵、魏、韩，明天一起行动。<strong>那么对苏秦来说，他面临的问题是，如何高效协同赵、魏、韩一起行动，并且保证当有一方不方便行动时，取消整个计划。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/09/55/0951213850cbf7a9f6db1d99511bd455.jpg?wh=1142*665\" alt=\"\"></p><p>苏秦面对的这个新问题，就是典型的如何实现分布式事务的问题，<strong>赵、魏、韩明天攻打秦国，这三个操作组成一个分布式事务，要么全部执行，要么全部不执行。</strong></p><p>了解了这个问题之后，我们看看如何通过二阶段提交协议和TCC，来帮助苏秦解决这个难题。</p><h2>二阶段提交协议</h2><p>二阶段提交协议，顾名思义，就是通过二阶段的协商来完成一个提交操作，那么具体是怎么操作的呢？</p><p>首先，苏秦发消息给赵，赵接收到消息后就扮演协调者（Coordinator）的身份，由赵联系魏和韩，发起二阶段提交：</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/2b/c43a3bffad5dee2d4f465df3fc22c52b.jpg?wh=1142*536\" alt=\"\"></p><p>赵发起二阶段提交后，先进入<strong>提交请求阶段（又称投票阶段）。</strong> 为了方便演示，我们先假设赵、魏、韩明天都能去攻打秦国：</p><p><img src=\"https://static001.geekbang.org/resource/image/72/af/72f1414c2d4f2e7a66b8dd246165a8af.jpg?wh=1142*501\" alt=\"\"></p><p>也就是说，第一步，赵分别向魏、韩发送消息：“明天攻打秦国，方便吗？”</p><p>第二步，赵、魏、韩，分别评估明天能否去攻打秦国，如果能，就预留时间并锁定，不再安排其他军事活动。</p><p>第三步，赵得到全部的回复结果（包括他自己的评估结果），都是YES。</p><p>赵收到所有回复后，进入<strong>提交执行阶段（又称完成阶段），</strong> 也就是具体执行操作了，大致步骤如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/dc/f5deb827fd03e10106ed6b6839f1d7dc.jpg?wh=1142*516\" alt=\"\"></p><p>首先，赵按照“要么全部执行，要么放弃”的原则，统计投票结果，因为所有的回复结果都是YES，所以赵决定执行分布式事务，明天攻打秦国。</p><p>然后，赵通知魏、韩：“明天攻打秦国。”</p><p>接到通知之后，魏、韩执行事务，明天攻打秦国。</p><p>最后，魏、韩将执行事务的结果返回给赵。</p><p>这样一来，赵就将事务执行的结果（也就是赵、魏、韩明天一起攻打秦国），返回给苏秦，那么，这时苏秦就解决了问题，协调好了明天的作战计划。</p><p>在这里，赵采用的方法就是二阶段提交协议。在这个协议中：</p><ul>\n<li>你可以将“赵明天攻打秦国、魏明天攻打秦国、韩明天攻打秦国”，理解成一个分布式事务操作；</li>\n<li>将赵、魏、韩理解为分布式系统的三个节点，其中，赵是协调者（Coordinator），将苏秦理解为业务，也就是客户端；</li>\n<li>将消息理解为网络消息；</li>\n<li>将“明天能否攻打秦国，预留时间”，理解为评估事务中需要操作的对象和对象状态，是否准备好，能否提交新操作。</li>\n</ul><p>需要注意的是，在第一个阶段，每个参与者投票表决事务是放弃还是提交。一旦参与者投票要求提交事务，那么就不允许放弃事务。也就是说，<strong>在一个参与者投票要求提交事务之前，它必须保证能够执行提交协议中它自己那一部分，即使参与者出现故障或者中途被替换掉。</strong> 这个特性，是我们需要在代码实现时保障的。</p><p>还需要你注意的是，在第二个阶段，事务的每个参与者执行最终统一的决定，提交事务或者放弃事务。这个约定，是为了实现ACID中的原子性。</p><p><a href=\"https://courses.cs.washington.edu/courses/cse551/09au/papers/CSE550BHG-Ch7.pdf\">二阶段提交协议</a>最早是用来实现数据库的分布式事务的，不过现在最常用的协议是XA协议。这个协议是X/Open国际联盟基于二阶段提交协议提出的，也叫作X/Open Distributed Transaction Processing（DTP）模型，比如MySQL就是通过MySQL XA实现了分布式事务。</p><p>但是不管是原始的二阶段提交协议，还是XA协议，都存在一些问题：</p><ul>\n<li>在提交请求阶段，需要预留资源，在资源预留期间，其他人不能操作（比如，XA在第一阶段会将相关资源锁定）；</li>\n<li>数据库是独立的系统。</li>\n</ul><p>因为上面这两点，我们无法根据业务特点弹性地调整锁的粒度，而这些都会影响数据库的并发性能。那用什么办法可以解决这些问题呢？答案就是TCC。</p><h2>TCC（Try-Confirm-Cancel）</h2><p>TCC是Try（预留）、Confirm（确认）、Cancel（撤销） 3个操作的简称，它包含了预留、确认或撤销这2个阶段。那么你如何使用TCC协议，解决苏秦面临的问题呢？</p><p>首先，我们先<strong>进入到预留阶段</strong>，大致的步骤如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/84/e2/84a56f9ef977e4bc10424f34e59140e2.jpg?wh=1142*620\" alt=\"\"></p><p>第一步，苏秦分别发送消息通知赵、魏、韩，让他们预留明天的时间和相关资源。然后苏秦实现确认操作（明天攻打秦国），和撤销操作（取消明天攻打秦国）。</p><p>第二步，苏秦收到赵、魏、韩的预留答复，都是OK。</p><p>如果预留阶段的执行都没有问题，就进入<strong>确认阶段</strong>，大致步骤如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/28/db/28d109d73b31eb750912c55e795af1db.jpg?wh=1142*773\" alt=\"\"></p><p>第一步，苏秦执行确认操作，通知赵、魏、韩明天攻打秦国。</p><p>第二步，收到确认操作的响应，完成分布式事务。</p><p>如果预留阶段执行出错，比如赵的一部分军队还在赶来的路上，无法出兵，那么就进入撤销<strong>阶段</strong>，大致步骤如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/8a/b10a640509628053bacb0897c741608a.jpg?wh=1142*776\" alt=\"\"></p><p>第一步，苏秦执行撤销操作，通知赵、魏、韩取消明天攻打秦国的计划。</p><p>第二步，收到撤销操作的响应。</p><p>你看，在经过了预留和确认（或撤销）2阶段的协商，苏秦实现这个分布式事务：赵、魏、韩三国，要么明天一起进攻，要么明天都按兵不动。</p><p>其实在我看来，TCC本质上是补偿事务，<strong>它的核心思想是针对每个操作都要注册一个与其对应的确认操作和补偿操作（也就是撤销操作）。</strong> 它是一个业务层面的协议，你也可以将TCC理解为编程模型，TCC的3个操作是需要在业务代码中编码实现的，为了实现一致性，确认操作和补偿操作必须是等幂的，因为这2个操作可能会失败重试。</p><p>另外，TCC不依赖于数据库的事务，而是在业务中实现了分布式事务，这样能减轻数据库的压力，但对业务代码的入侵性也更强，实现的复杂度也更高。所以，我推荐在需要分布式事务能力时，优先考虑现成的事务型数据库（比如MySQL XA），当现有的事务型数据库不能满足业务的需求时，再考虑基于TCC实现分布式事务。</p><h2>内容小结</h2><p>本节课我主要带你了解了实现分布式系统ACID特性的方法，二阶段提交协议和TCC，我希望你明确这样几个重点。</p><ol>\n<li>\n<p>二阶段提交协议，不仅仅是协议，也是一种非常经典的思想。二阶段提交在达成提交操作共识的算法中应用广泛，比如XA协议、TCC、Paxos、Raft等。我希望你不仅能理解二阶段提交协议，更能理解协议背后的二阶段提交的思想，当后续需要时，能灵活地根据二阶段提交思想，设计新的事务或一致性协议。</p>\n</li>\n<li>\n<p>幂等性，是指同一操作对同一系统的任意多次执行，所产生的影响均与一次执行的影响相同，不会因为多次执行而产生副作用。常见的实现方法有Token、索引等。它的本质是通过唯一标识，标记同一操作的方式，来消除多次执行的副作用。</p>\n</li>\n</ol><p>另外，我想补充一下，三阶段提交协议，虽然针对二阶段提交协议的“协调者故障，参与者长期锁定资源”的痛点，通过引入了询问阶段和超时机制，来减少资源被长时间锁定的情况，不过这会导致集群各节点在正常运行的情况下，使用更多的消息进行协商，增加系统负载和响应延迟。也正是因为这些问题，三阶段提交协议很少被使用，所以，你只要知道有这么个协议就可以了，但如果你想继续研究，可以参考《<a href=\"https://courses.cs.washington.edu/courses/cse551/09au/papers/CSE550BHG-Ch7.pdf\">Concurrency Control and Recovery in Database Systems</a>》来学习。</p><p>最后我想强调的是，你可以将ACID特性理解为CAP中一致性的边界，最强的一致性，也就是CAP的酸（Acid）。根据CAP理论，如果在分布式系统中实现了一致性，可用性必然受到影响。比如，如果出现一个节点故障，则整个分布式事务的执行都是失败的。实际上，绝大部分场景对一致性要求没那么高，短暂的不一致是能接受的，另外，也基于可用性和并发性能的考虑，<strong>建议在开发实现分布式系统，如果不是必须，尽量不要实现事务，可以考虑采用最终一致性</strong>。</p><h2>课堂思考</h2><p>既然我提了一些实现分布式事务的方法，比如二阶段提交协议、TCC等，那么你不妨思考一下，事务型分布式系统有哪些优点，哪些缺点呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":179030,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/c8680841.jpg","comment_is_top":false,"comment_ctime":1581896299,"is_pvip":false,"replies":[{"id":"69863","content":"需要将提交相关信息保存到持久存储上，新进程启动后，恢复到之前的状态。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582139613,"ip_address":"","comment_id":179030,"utype":1}],"discussion_count":19,"race_medal":0,"score":"139020849771","product_id":100046101,"comment_content":"在两阶段提交协议中，如果一个节点在第一阶段确认可以提交，然后崩溃了怎么办？第二阶段它实际没法真正应用自己那部分事务。这个看起来没法处理啊","like_count":31,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484068,"discussion_content":"需要将提交相关信息保存到持久存储上，新进程启动后，恢复到之前的状态。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582139613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","nickname":"night","note":"","ucode":"03B3C955092C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344066,"discussion_content":"如果第一阶段确认提交，则必须由自己确保第二阶段确实会提交。两阶段提交是对分布式处理过程中的抽象或，具体在实现时需要用各种手段确保确实对它的实现。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611279751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069926,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/8alxuAhknaIm3EjMatiaEibpqskdBXdE9Hf4SEdkBE22JuFicAZzK6g5erpps7sU1BG3beqhVuL8HMto8eyjmh2bg/132","nickname":"小闹钟","note":"","ucode":"46DD8FB7684D4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258163,"discussion_content":"这个问题的关键是二阶段提交的第一阶段中的“资源锁定”，所以即使在第二阶段中有部分失败了也不会导致数据的不一致；\n\n后面如何确保失败部分的成功就是老师回复的方法了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588657148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibtic993snK2Drdwypz6SJajPk7g3JuEP1puDhomplXSGl9YobOp5uJZVGLRalHwNwS7cdHr3iasFbmz38GicNibknA/132","nickname":"chenchukun","note":"","ucode":"C9F9D51F2EC7A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177415,"discussion_content":"个人理解是崩溃后协调者会不断的重试，直到节点恢复，这就是原文中为什么说“在一个参与者投票要求提交事务之前，它必须保证能够执行提交协议中它自己那一部分，即使参与者出现故障或者中途被替换掉。”的原因，这时候这个事务使用到的相关资源都会被锁住，没办法使用，直到节点恢复。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582104865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1064887,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3f/b7/0d8b5431.jpg","nickname":"snakorse","note":"","ucode":"0AD727E1F16993","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1298833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibtic993snK2Drdwypz6SJajPk7g3JuEP1puDhomplXSGl9YobOp5uJZVGLRalHwNwS7cdHr3iasFbmz38GicNibknA/132","nickname":"chenchukun","note":"","ucode":"C9F9D51F2EC7A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210710,"discussion_content":"同意，参与者在阶段二挂掉，重启之后是没办法知道别的节点是否commit还是rollback，事务处于悬挂状态，必须等待协调者的异步重试消息，来执行commit或rollback操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584763744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":177415,"ip_address":""},"score":210710,"extra":""},{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1298833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibtic993snK2Drdwypz6SJajPk7g3JuEP1puDhomplXSGl9YobOp5uJZVGLRalHwNwS7cdHr3iasFbmz38GicNibknA/132","nickname":"chenchukun","note":"","ucode":"C9F9D51F2EC7A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296401,"discussion_content":"没错，系统设计，必须保证第一阶段准备的，在第二阶段必须提交成功，要回滚，也是第一阶段就回滚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596532845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":177415,"ip_address":""},"score":296401,"extra":""}]},{"author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174607,"discussion_content":"同问，专栏最后提到三阶段协议时提了一下二阶段的“协调者故障”，但看了专栏之后还是有不少疑惑，可能是老师还没讲到，后面会讲吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581930218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177768,"discussion_content":"就是说并没有解决资源锁定的问题是吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582121042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174607,"ip_address":""},"score":177768,"extra":""}]},{"author":{"id":1215066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/5a/b67a82e3.jpg","nickname":"shen","note":"","ucode":"AE5737B0C7DC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340015,"discussion_content":"2pc本来就有这些问题，解决方式可以参考percolator，confirm一定会成功，底层是一个集群，宕机一个节点不影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609862479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338885,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6e/05/d47cee18.jpg","nickname":"wong ka seng","note":"","ucode":"C1A713082D0D64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295181,"discussion_content":"同问，当苏秦知道赵魏韩都确定可以准备进攻，便confirm一起进攻。但去赵国的信使不幸途中死了，那么赵国永远是准备状态，而魏韩都已经进攻了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596110824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338885,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6e/05/d47cee18.jpg","nickname":"wong ka seng","note":"","ucode":"C1A713082D0D64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295180,"discussion_content":"同问，当苏秦知道赵魏韩都确定可以准备进攻，便confirm一起进攻。但去赵国的信使不幸途中死了，那么赵国永远是准备状态，而魏韩都已经进攻了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596110822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1338885,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6e/05/d47cee18.jpg","nickname":"wong ka seng","note":"","ucode":"C1A713082D0D64","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296398,"discussion_content":"这个问题是第一阶段，赵国的使者没回来，那么协调者就不会发出进攻命令也就是提交命令，协调者必须保证收到各节点的准备响应后，才发出进攻命令。如果一国反对进攻，或者使者没回来也就是超时，那么就都回滚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596532565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295180,"ip_address":""},"score":296398,"extra":""}]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253957,"discussion_content":"作者不是说了吗，不允许放弃事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588261986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125628,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/fc/0264d511.jpg","nickname":"creep","note":"","ucode":"9C6C185AB9CA21","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203530,"discussion_content":"恢复到之前的状态，不就会导致不同节点之间出现不一致状态了么。有些节点提交了事务，有些节点回滚了事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584042703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1125628,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/fc/0264d511.jpg","nickname":"creep","note":"","ucode":"9C6C185AB9CA21","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":296400,"discussion_content":"不会的，第二阶段的提交，只能成功，不能失败，不会出现有的节点提交了，有的节点回滚了，如果某个节点出现问题，就必须重试或者通过别的机制去提交，因为第一阶段，已经确定了个节点都能提交，第一阶段的确定，第二阶段必须执行成功","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596532756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":203530,"ip_address":""},"score":296400,"extra":""}]},{"author":{"id":1055049,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/49/9452b2fd.jpg","nickname":"Theodore","note":"","ucode":"0735C2A64295FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":184032,"discussion_content":"那你的意思就是需要自己实现一个提交段和撤销段的东西了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582541136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174824,"discussion_content":"自身恢复之后或者被替代之后执行。替代者可以从协调者那里获取到要执行的二阶段的操作。如果是协调者被替代了，就有点麻烦了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581943564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175031,"discussion_content":"tcc解决了两阶段提交协议中的协调者崩溃问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581948725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174824,"ip_address":""},"score":175031,"extra":""}]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174459,"discussion_content":"崩溃的节点应该会在重启之后处理自己的那部分事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581919866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180131,"user_name":"Undefined","can_delete":false,"product_type":"c1","uid":1615247,"ip_address":"","ucode":"36DEBA64C297D1","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/8f/693e483e.jpg","comment_is_top":false,"comment_ctime":1582194246,"is_pvip":false,"replies":[{"id":"69979","content":"在TCC中，数据是最终一致。分布式事务和各算法场景，会在加餐篇做补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582213010,"ip_address":"","comment_id":180131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100366442054","product_id":100046101,"comment_content":"真正理解2PC和TCC的使用场景之后就不会分不清这两个东西，老师可以增加使用真实场景，希望老师在后面的讲解中加上相关分布式协议思想的真实场景，要不仅凭叙述理解起来确实麻烦<br>2PC用在集群间一致性数据同步，所有参与者完成的是同一件事，可以理解为它们在一个start transaction--commit里面，具有强一致性<br>TCC是对业务过程的拆分，一致性弱于2PC","like_count":23,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484538,"discussion_content":"在TCC中，数据是最终一致。分布式事务和各算法场景，会在加餐篇做补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582213010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226947,"user_name":"yes","can_delete":false,"product_type":"c1","uid":1386201,"ip_address":"","ucode":"612BF6884ED6CC","user_header":"https://static001.geekbang.org/account/avatar/00/15/26/d9/f7e96590.jpg","comment_is_top":false,"comment_ctime":1592233840,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78901645168","product_id":100046101,"comment_content":"2pc: 两阶段提交<br>优点：尽量保证了数据的强一致性<br>缺点：1、单点故障问题，协调者挂了，尤其在第二阶段的时候参与者资源都锁着时候影响更大。<br>          2、同步阻塞，所有节点在执行时是同步阻塞的<br>          3、数据不一致问题，例如网络分区，部分节点接受不到提交的请求。或是当协调者在第二阶段发送提交命令后挂了，此时有个节点接受到命令执行后也挂了。其他节点都没接受过命令。如果通过选择得出新的协调者，上线后该提交还是回滚都有可能和之前挂了的节点不一致。<br>3pc：三阶段提交<br>        优点：1、参与者超时机制，不会再傻等。<br>                  2、增加询问阶段不会直接锁资源<br>                  3、解决协调者和个别参与者一起挂了之后，选择上线不知该提交还是回滚的问题<br>        缺点：1、多了一步、耗时更多<br>                  2、网络分区情况下还是有数据不一致问题<br>TCC：基于两阶段的业务层面的分布式事务。<br>          优点：1、基于业务，不需要占用阻塞数据库宝贵资源<br>                    2、基于业务也更加灵活<br>          缺点：1、业务侵入性大<br>                    2、实现比较麻烦<br>                    3、需要保证cc的幂等<br><br>        <br><br>","like_count":19,"discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353343,"discussion_content":"谢谢分享，这个必须点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615144320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179161,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1581929889,"is_pvip":true,"replies":[{"id":"69865","content":"TCC是在业务服务中实现的，更灵活。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582141854,"ip_address":"","comment_id":179161,"utype":1}],"discussion_count":8,"race_medal":1,"score":"70301406625","product_id":100046101,"comment_content":"文中说到 两阶段提交的弊端：在提交请求阶段，需要预留资源，在资源预留期间，其他人不能操作<br><br>利用 TCC 可以解决，这里不是很明白，在 TCC中不是也有预留请求，同样预留资源的，难道在这期间其他事务可以使用这部分资源呢？ 如果能使用预留资源，那么在执行Confirm确定操作的时候，之前预留的资源发生了变化，这样会不会有问题？","like_count":17,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484119,"discussion_content":"TCC是在业务服务中实现的，更灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582141854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512462,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/0e/87d15656.jpg","nickname":"随心","note":"","ucode":"ADB430EA88DB75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287003,"discussion_content":"关于TCC预留资源我这里举个例子： 我们假设对A账户有个扣十块钱的操作。在XA协议中，一阶段就是对A账户扣了十块钱，在二阶段完成前，这个资源（A账户）是被锁定的。 但是在TCC下，一阶段是不能直接扣十块钱的。一阶段的操作叫冻结，从业务层面看到的结果是，A账户有余额x元，冻结金额 10元，可用余额 x-10，在一阶段完成后这些操作对其他事务都是可见的，所以不存在资源锁定。 然后再说TCC的二阶段，就很好理解啦，就是把该笔分布式事务的冻结金额从余额里实际扣掉","likes_number":20,"is_delete":false,"is_hidden":false,"ctime":1593344239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1582993,"avatar":"https://static001.geekbang.org/account/avatar/00/18/27/91/306fd37e.jpg","nickname":"星火燎原","note":"","ucode":"18015259363A0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281862,"discussion_content":"也是有同样的疑惑，希望老师说的很具体一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591835759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1009000,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/68/93c05ab0.jpg","nickname":"laugh","note":"","ucode":"1CB29054325D1D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1582993,"avatar":"https://static001.geekbang.org/account/avatar/00/18/27/91/306fd37e.jpg","nickname":"星火燎原","note":"","ucode":"18015259363A0B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283189,"discussion_content":"T阶段已经完成了数据库子事务提交。所以数据库不会锁定资源了。第一个C只是业务层面的大事物分批提交。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592208355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281862,"ip_address":""},"score":283189,"extra":""},{"author":{"id":1009000,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/68/93c05ab0.jpg","nickname":"laugh","note":"","ucode":"1CB29054325D1D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1582993,"avatar":"https://static001.geekbang.org/account/avatar/00/18/27/91/306fd37e.jpg","nickname":"星火燎原","note":"","ucode":"18015259363A0B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283190,"discussion_content":"可以看看seata的设计","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592208385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281862,"ip_address":""},"score":283190,"extra":""},{"author":{"id":1087384,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/98/5ef15aa0.jpg","nickname":"浩瀚有边","note":"","ucode":"B4540E94EAFFE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1582993,"avatar":"https://static001.geekbang.org/account/avatar/00/18/27/91/306fd37e.jpg","nickname":"星火燎原","note":"","ucode":"18015259363A0B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369490,"discussion_content":"你的回复和上面随心的回复相悖，随心说的是TCC的T阶段没做真实的数据库操作（表中扣减金额），只是在业务层面实现（可用余额）。你的回复是T阶段做了真实的数据库操作，并且子事务已提交，所以不会锁定资源，不知道哪个的说法是对的^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619054595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281862,"ip_address":""},"score":369490,"extra":""}]},{"author":{"id":1589989,"avatar":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","nickname":"Eclipse","note":"","ucode":"E7EB0BA99FA644","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191278,"discussion_content":"同样疑惑 不明白老师回复的是啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582989873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179109,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1581918419,"is_pvip":false,"replies":[{"id":"69808","content":"相比业务，数据库是独立的，也就是说，数据库是独立的第三方软件，咱们可以编程或修改业务代码，但，很少会修改数据库核心代码，更不会根据业务需求，修改实现不同的数据库代码逻辑。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582101696,"ip_address":"","comment_id":179109,"utype":1}],"discussion_count":5,"race_medal":0,"score":"57416493267","product_id":100046101,"comment_content":"老师在&quot;二阶段提交存在的问题&quot;中说 &quot;数据库是独立的系统&quot;，是表达的什么意思？","like_count":14,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484091,"discussion_content":"相比业务，数据库是独立的，也就是说，数据库是独立的第三方软件，咱们可以编程或修改业务代码，但，很少会修改数据库核心代码，更不会根据业务需求，修改实现不同的数据库代码逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259218,"avatar":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","nickname":"发条橙子 。","note":"","ucode":"ED076F4534FFED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182465,"discussion_content":"老师的意思应该是 二阶段提交实现可以使用数据库自带的XA线性隔离级别 。但是这个锁的粒度比较大，所以会影响数据库的并发性能。然后数据库是独立的系统我们还不方便去修改数据库源码提高并发性","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1582427818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296403,"discussion_content":"其实就是比如某个节点是数据库操作，在第二阶段提交的时候，别的节点都提交成功了，但是数据库这个节点，如果出现问题，数据库会自己回滚，但是第二阶段的要求是，必须所有节点都提交成功，不能失败，这个时候就要考虑怎么解决数据库自身回滚的问题了，可以重试提交，但是数据库回滚的原因是数据库本身的特性所限制的，通过代码无法实现数据必须提交成功，这时候只能考虑动数据库源码了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596533252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176916,"discussion_content":"这块也没看懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582069112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1531348,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5d/d4/e5ea1c25.jpg","nickname":"sun留白","note":"","ucode":"53FEEA5E244C9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174556,"discussion_content":"同问，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581926983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180697,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1582366682,"is_pvip":false,"replies":[{"id":"70931","content":"二阶段提交协议，是个原子提交协议，能实现事务，保证所有操作，要么全部执行，要么全部不执行。Raft是个共识算法，保证达成了共识的值，就不会再变了，基于Raft算法，能实现强一致性，也就是线性一致性。用途不同，可以简单这么理解，比如处理一个订单，需要执行A、B、C三个操作，二阶段提交协议，能保证3个操作要么全部执行，要么全部不执行。Raft能做到，你执行了A操作后，你就一致能读到A操作执行后的结果。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583022600,"ip_address":"","comment_id":180697,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53121974234","product_id":100046101,"comment_content":"分享下我的理解，望指正：二阶段提交是保证不同系统&#47;模块的逻辑结果一致，要么都成功，要么都失败，这些系统的物理数据是完全不相关的； 而Raft是保证多个系统的数据物理一致，举例1: 对于3副本存储系统，上传数据时肯定要保证这3个副本的数据物理一致， 举例2:对于一笔交易，需要通过2PC保证订单系统和库存系统的逻辑结果一致，但订单系统和库存系统的物理数据是完全不同的； 如果把2PC协商过程应用在同一个程序的不同进程，那就可以实现Raft效果了","like_count":12,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484766,"discussion_content":"二阶段提交协议，是个原子提交协议，能实现事务，保证所有操作，要么全部执行，要么全部不执行。Raft是个共识算法，保证达成了共识的值，就不会再变了，基于Raft算法，能实现强一致性，也就是线性一致性。用途不同，可以简单这么理解，比如处理一个订单，需要执行A、B、C三个操作，二阶段提交协议，能保证3个操作要么全部执行，要么全部不执行。Raft能做到，你执行了A操作后，你就一致能读到A操作执行后的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583022600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534770,"discussion_content":"2PC只是保证执行，但是没说值是否正常的，要是没有raft来保证共识，确定最后要执行的值，那么2PC可能得到一堆错误的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638275567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203556,"user_name":"张克菲","can_delete":false,"product_type":"c1","uid":1304742,"ip_address":"","ucode":"F89495F04DAD5D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e8/a6/e74ecf7d.jpg","comment_is_top":false,"comment_ctime":1586232937,"is_pvip":false,"replies":[{"id":"81008","content":"我的理解，可以考虑这几种方式或根据场景特点结合起来使用，1. 直接重试；2. 触发告警，然后人工根据日志记录进行修复；3. 设计异步回滚流程，也就是说在一个异步流程中对账、回滚，避免因重试耗时而拖慢整体性能。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1590008701,"ip_address":"","comment_id":203556,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48830873193","product_id":100046101,"comment_content":"老师，在一次面试中被问到一个问题，如果一个transaction的rollback失败了，应该怎么办？回来后这个问题一直没有找到合适的答案，想看您能否分享一下您的思路？","like_count":11,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490895,"discussion_content":"我的理解，可以考虑这几种方式或根据场景特点结合起来使用，1. 直接重试；2. 触发告警，然后人工根据日志记录进行修复；3. 设计异步回滚流程，也就是说在一个异步流程中对账、回滚，避免因重试耗时而拖慢整体性能。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590008701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534766,"discussion_content":"开发里面可以使用第一第二队列的设计，第一队列尝试一次回滚失败后就扔到第二队列，这是一个长期尝试的，里面有各种配套的其他手段，例如监控告警等","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638275002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180415,"user_name":"时彬斌","can_delete":false,"product_type":"c1","uid":1200839,"ip_address":"","ucode":"15F9D5EFBEE3B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/c7/f9ad5669.jpg","comment_is_top":false,"comment_ctime":1582277051,"is_pvip":false,"replies":[{"id":"70928","content":"强一致性，是指基于Raft能实现线性一致性，线性一致性通常被称为强一致性。你提到的这个情况是存在的，“大多数”原则导致的。可以这么理解，Raft是共识算法，Raft自身的数据是最终一致的（大多数原则决定的），但是基于Raft（加上客户端协议），我们能实现强一致性系统，比如强一致性KV存储系统。而我们通常说，Raft是强一致性，其实指的是，我们基于Raft这个算法实现的系统是强一致性的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583020894,"ip_address":"","comment_id":180415,"utype":1}],"discussion_count":4,"race_medal":0,"score":"40236982715","product_id":100046101,"comment_content":"关于一致性有些疑问，强一致性、最终一致性的区别不是很清晰，之前学习raft的时候看到，raft的leader在收到集群内一半以上的数据节点确认操作后就认为事务完成，这时有些节点的数据并没有更新完成，此时理解应该为最终一致性，为什么说raft是强一致性呢？raft强一致性难道仅仅体现在所有请求的处理都是在leader节点处理吗？","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484655,"discussion_content":"强一致性，是指基于Raft能实现线性一致性，线性一致性通常被称为强一致性。你提到的这个情况是存在的，“大多数”原则导致的。可以这么理解，Raft是共识算法，Raft自身的数据是最终一致的（大多数原则决定的），但是基于Raft（加上客户端协议），我们能实现强一致性系统，比如强一致性KV存储系统。而我们通常说，Raft是强一致性，其实指的是，我们基于Raft这个算法实现的系统是强一致性的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583020894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114356,"avatar":"https://static001.geekbang.org/account/avatar/00/11/00/f4/cc5f0896.jpg","nickname":"Jowin","note":"","ucode":"19017F7D06C22A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354364,"discussion_content":"拆开理解就好了，Raft内部&#34;数据一致性&#34; 和 客户端&#34;操作一致性&#34;。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615280338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/00/01137172.jpg","nickname":"Bobo","note":"","ucode":"7D5D9D84359B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586402,"discussion_content":"有同样的疑问，老师的回答好像没有解释清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662186768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1496696,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d6/78/4f0847d6.jpg","nickname":"walker","note":"","ucode":"ECE078AEE377F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578556,"discussion_content":"这里的一致性指的读一致，节点的数据不一致，但是节点给客户端的数据是一致的就是强一致。raft就是用牺牲可用性保障了一致性，没有最新数据的节点已经不可以用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656899472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179160,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1581929251,"is_pvip":true,"replies":[{"id":"69813","content":"加一颗星:)，客户端在扮演协调者的角色。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582106927,"ip_address":"","comment_id":179160,"utype":1}],"discussion_count":1,"race_medal":1,"score":"35941667619","product_id":100046101,"comment_content":"感觉 TCC 也采用了两阶段提交的思想，是不是 TCC 是两阶段提交思想的一种实现？<br>在看文中的图，是代表 TCC 中，是客户端直接通知所有的节点吗？没有所谓的协作者了？","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484118,"discussion_content":"加一颗星:)，客户端在扮演协调者的角色。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582106927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179031,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1581897358,"is_pvip":true,"replies":[{"id":"69613","content":"常被误解的一个概念，在中文语义中，Consensus和Consistency都被翻译为了一致性。后面，会做个加餐篇，具体说说:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581968976,"ip_address":"","comment_id":179031,"utype":1}],"discussion_count":8,"race_medal":0,"score":"35941635726","product_id":100046101,"comment_content":"一直有个问题，两阶段协议解决的是分布式事务问题，而raft 这些解决的是分布式数据共识问题，即数据在主从副本的条件下保持数据对外始终一样。为什么这两个总混在一起说是解决一致性的呢？？？","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484069,"discussion_content":"常被误解的一个概念，在中文语义中，Consensus和Consistency都被翻译为了一致性。后面，会做个加餐篇，具体说说:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581968976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1507024,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/d0/e80e4a7e.jpg","nickname":"zhangyi","note":"","ucode":"0C4CAE9DA878F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":535113,"discussion_content":"坐等这个问题的加餐~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638354982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":484069,"ip_address":""},"score":535113,"extra":""}]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174818,"discussion_content":"我觉得二者确实不能放在一起说，看一个技术要看最初它产生时要解决的问题。显然二者不一样，也没必要因为有类似的步骤所以总联系到一起。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581943376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332565,"discussion_content":"共识，指让经历算法后，各节点达成一共同的值或者状态。\n一致性，指经历算法后，各节点都提交了某些事务或都回滚了某些事务（节点的状态可能会多种多样不一定达成共识）。\n个人拙见..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607261689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512462,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/0e/87d15656.jpg","nickname":"随心","note":"","ucode":"ADB430EA88DB75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287006,"discussion_content":"完全两件事情，放在一起说，只会混淆。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593345214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174603,"discussion_content":"分布式事务问题也是一致性问题呀，属于追求最强的一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581930038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1796527,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/69/af/ceb4450c.jpg","nickname":"Asha","note":"","ucode":"69F227707A9EDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180345,"discussion_content":"我也是这么认为的 不过看老师说有加餐 是不是这种理解有问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582292240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174603,"ip_address":""},"score":180345,"extra":""},{"author":{"id":1507024,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/d0/e80e4a7e.jpg","nickname":"zhangyi","note":"","ucode":"0C4CAE9DA878F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1796527,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/69/af/ceb4450c.jpg","nickname":"Asha","note":"","ucode":"69F227707A9EDD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535111,"discussion_content":"这个问题的解释,加餐在哪里呢?  我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638354910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180345,"ip_address":""},"score":535111,"extra":""}]}]},{"had_liked":false,"id":179235,"user_name":"张高","can_delete":false,"product_type":"c1","uid":1019351,"ip_address":"","ucode":"9E5EB8675E4956","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/d7/886e9563.jpg","comment_is_top":false,"comment_ctime":1581941822,"is_pvip":false,"replies":[{"id":"69603","content":"通过预留阶段的确认，保证确认阶段执行不会出错。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966078,"ip_address":"","comment_id":179235,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27351745598","product_id":100046101,"comment_content":"文中只说明了预留阶段出错了如何撤销，却没有说明：如果确认阶段出错了，该怎么处理。","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484158,"discussion_content":"通过预留阶段的确认，保证确认阶段执行不会出错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296404,"discussion_content":"要回滚必须第一阶段回滚，第二阶段只准成功不许失败","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596533501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dd/c5/9ae99a7f.jpg","nickname":"¾阳光","note":"","ucode":"C67D0E18F6158D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331772,"discussion_content":"确认阶段出错的最终解决方案就是不断重试来保证的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606974106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179882,"discussion_content":"应该会通过重试保证一定执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582258588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205973,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1586765786,"is_pvip":true,"replies":[{"id":"77088","content":"加一颗星:)，系统设计是根据实际场景权衡折中的结果，需要妥协，架构越简单越好。将简单问题复杂化、为了技术而技术，是在工作中，需要极力避免的。曾经历一个产品，技术和架构，在理论是无懈可击、极其先进，但实现复杂度极高，迭代多个版本，耗时多年，始终无法稳定落地，而且维护工作量极其大，最终产品没落，丧失了十几亿美刀的市场。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586855814,"ip_address":"","comment_id":205973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23061602266","product_id":100046101,"comment_content":"既然说的是事务型分布式事务，首先要关注到分布式关键字，最好的事务控制永远是单机模式，但是问题是对于并发特别高的系统来说，读写的压力都会增加，系统可用性降低，会出现延迟不可访问等问题，所以将一些写入频繁的功能从系统中剥离出来，横向扩展，降低系统压力，提高可用性。由此而带来了新的问题，事务。通过文中叙述的协议解决分布式事务问题的数据不一致性，但是因为是分阶段的确认提交，在确认提交的过程中，增加了数据库记录锁的时间，对于用户私有数据来说，这影响不大，对于公有数据而言，分布式事务和单机事务区别不大，都需要排队等待。如果牺牲一致性，选择分区容错性，允许节点数据短暂不一致，提高了系统可用性，但是数据库之间的主从关系，复制备份等问题又随之而来，又将问题进一步扩大和转移。总之，当性能还说的过去的前提下，尽量不要向分布式发展。一入此门深似海。","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491632,"discussion_content":"加一颗星:)，系统设计是根据实际场景权衡折中的结果，需要妥协，架构越简单越好。将简单问题复杂化、为了技术而技术，是在工作中，需要极力避免的。曾经历一个产品，技术和架构，在理论是无懈可击、极其先进，但实现复杂度极高，迭代多个版本，耗时多年，始终无法稳定落地，而且维护工作量极其大，最终产品没落，丧失了十几亿美刀的市场。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586855814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179297,"user_name":"超能力先生","can_delete":false,"product_type":"c1","uid":1786788,"ip_address":"","ucode":"C042DB628CAA86","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJINWmZjibZA4eibL31PzMDia2yt1icOc9QnFWwTKuXbWTFCAZaMgCrqO7Oa5sZka81pHoibPgSM8nCjibA/132","comment_is_top":false,"comment_ctime":1581954325,"is_pvip":false,"replies":[{"id":"69974","content":"在confirm阶段执行的:)，TCC也是二阶段提交。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582210254,"ip_address":"","comment_id":179297,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18761823509","product_id":100046101,"comment_content":"TCC try阶段的时候应该是直接commit了事务，confirm做确认，不然就撤销。这样才能达到减少资源锁定时间。感觉图里第一部预留资源的说法有点歧义。","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484188,"discussion_content":"在confirm阶段执行的:)，TCC也是二阶段提交。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582210254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102683,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/5b/66d35c66.jpg","nickname":"水煮小鲁班","note":"","ucode":"F1AD805F7BE93B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242010,"discussion_content":"try阶段应该是锁定资源，让其他人不能去修改这个资源，commit阶段才会做资源的提交，比如一条记录初始状态0，完成状态2，中间一个1是中间过渡状态。try应该是把记录从0->1, commit是1->2, cancel是1->0,状态为1的记录，在查询的时候无法被查询到（加假如只有查询到的资源才可以去执行我们的业务逻辑）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587456749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120259,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/03/ef0efcc4.jpg","nickname":"EidLeung","note":"","ucode":"0F16DDB4779D1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176613,"discussion_content":"try只有部分不能提交呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582038339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233836,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1594468174,"is_pvip":false,"replies":[{"id":"88120","content":"加一颗星:)，TCC是在业务层实现的，不会锁定数据库资源，比如，实现一个更新（UPDATE）操作，在预留阶段，可以将值更新到一个额外字段，然后在确认阶段，再将额外字段的值更新到原计划更新的字段。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596204511,"ip_address":"","comment_id":233836,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14479370062","product_id":100046101,"comment_content":"老师请教一个问题：TCC 在请求阶段，各个节点不需要保留资源么？为何能解决2pc 需要释放资源后才能处理的问题","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501184,"discussion_content":"加一颗星:)，TCC是在业务层实现的，不会锁定数据库资源，比如，实现一个更新（UPDATE）操作，在预留阶段，可以将值更新到一个额外字段，然后在确认阶段，再将额外字段的值更新到原计划更新的字段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596204511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2994288,"avatar":"","nickname":"起风了","note":"","ucode":"9EE9A1783B2B00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569872,"discussion_content":"然后如果是基于数据库事务的话，第一个阶段Begin;update xxx; 第二个阶段commit; ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651582364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207959,"user_name":"周龙亭","can_delete":false,"product_type":"c1","uid":1004577,"ip_address":"","ucode":"21BD0DD15CFCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/21/8c13a2b4.jpg","comment_is_top":false,"comment_ctime":1587222643,"is_pvip":false,"replies":[{"id":"78064","content":"加一颗星:)，比如，可以发送消息时，设置超时检测，然后重传。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587458965,"ip_address":"","comment_id":207959,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14472124531","product_id":100046101,"comment_content":"在2PC中的提交执行阶段，协调者发送给参与者的确认执行消息丢失，怎么办？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492298,"discussion_content":"加一颗星:)，比如，可以发送消息时，设置超时检测，然后重传。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587458965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179662,"user_name":"高志强","can_delete":false,"product_type":"c1","uid":1276563,"ip_address":"","ucode":"68737002043752","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/93/c9302518.jpg","comment_is_top":false,"comment_ctime":1582073904,"is_pvip":false,"replies":[{"id":"69812","content":"一般而言，是用数据库就可以了，自己实现的复杂度比较高，如果没有很硬的需求，不推荐自己实现。事务的原子性，要求要么全部提交、要么全部不提交，也就是说，当有分区错误或节点故障时，都无法提交，需要是注意的是，旧数据是一致的，是能读的，只是新数据无法写入。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582106825,"ip_address":"","comment_id":179662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14466975792","product_id":100046101,"comment_content":"想问一下老师，分布式事物，在不同节点不基于数据库的实现，是不是难度很大。如果使用mysql实现事物，多个节点是不是就无法使用了","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484348,"discussion_content":"一般而言，是用数据库就可以了，自己实现的复杂度比较高，如果没有很硬的需求，不推荐自己实现。事务的原子性，要求要么全部提交、要么全部不提交，也就是说，当有分区错误或节点故障时，都无法提交，需要是注意的是，旧数据是一致的，是能读的，只是新数据无法写入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582106825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179737,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1582086098,"is_pvip":false,"replies":[{"id":"69798","content":"加一颗星:）","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582100349,"ip_address":"","comment_id":179737,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10172020690","product_id":100046101,"comment_content":"事务型分布式系统的缺点是在并发情况下的资源锁定，优点是保证一致性。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484374,"discussion_content":"加一颗星:）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582100349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179074,"user_name":"施耀南","can_delete":false,"product_type":"c1","uid":1634138,"ip_address":"","ucode":"480ECE7BA29606","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/5a/5d424d50.jpg","comment_is_top":false,"comment_ctime":1581909274,"is_pvip":false,"replies":[{"id":"69609","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966965,"ip_address":"","comment_id":179074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171843866","product_id":100046101,"comment_content":"谢谢韩老师的讲解，通过学习我的理解是：事务型分布式系统<br>优点：就是最强一致性，保证所有节点都一致。<br>缺点：复杂带来的开销，节点增加业务规模增加可能导致延迟。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484079,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231760,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1593766276,"is_pvip":false,"replies":[{"id":"88066","content":"加一颗星:)，这里介绍的是标准的二阶段提交协议。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596158147,"ip_address":"","comment_id":231760,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5888733572","product_id":100046101,"comment_content":"看完以后，感觉跟mysql的redo log和binlog的两阶段提交不是同一个东西...老师可以指教一下吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500429,"discussion_content":"加一颗星:)，这里介绍的是标准的二阶段提交协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596158147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2994288,"avatar":"","nickname":"起风了","note":"","ucode":"9EE9A1783B2B00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569880,"discussion_content":"MySQL的二阶段提交，主要是为了避免主节点崩溃恢复后，主从、主备数据的不一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651585079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211664,"user_name":"coldwalker","can_delete":false,"product_type":"c1","uid":1751378,"ip_address":"","ucode":"B86846C0B36DD7","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b9/52/3f0251b9.jpg","comment_is_top":false,"comment_ctime":1587993366,"is_pvip":false,"replies":[{"id":"78890","content":"加一颗星:)，分布式事务是具有ACID特性的操作。强一致性，有多种含义，比如，线性一致性被称为强一致性；能保证每次读都能读取到新数据，也被称为强一致性；ACID（或者说ACID的C）也被称为强一致性。最终一致性，也有多种含义，比如，最初（在BASE理论提出时），指数据副本的最终一致，现在也指读操作最终能读取更新后的数据。我后面会补充和梳理下各种一致性的含义。另外，这句话，已修正，更确切的说，是“如果不是必须，尽量不要实现事务，可以考虑采用最终一致性”。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588105746,"ip_address":"","comment_id":211664,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5882960662","product_id":100046101,"comment_content":"请问”如果不是必须，尽量不要实现事务，可以考虑采用强一致性或最终一致性。“这句话怎么理解，这里的事务是指满足ACID的意思吗？分布式事务，ACID，强一致性，最终一致性之间是怎么的关系？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493328,"discussion_content":"加一颗星:)，分布式事务是具有ACID特性的操作。强一致性，有多种含义，比如，线性一致性被称为强一致性；能保证每次读都能读取到新数据，也被称为强一致性；ACID（或者说ACID的C）也被称为强一致性。最终一致性，也有多种含义，比如，最初（在BASE理论提出时），指数据副本的最终一致，现在也指读操作最终能读取更新后的数据。我后面会补充和梳理下各种一致性的含义。另外，这句话，已修正，更确切的说，是“如果不是必须，尽量不要实现事务，可以考虑采用最终一致性”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588105746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186437,"user_name":"Sure","can_delete":false,"product_type":"c1","uid":1888303,"ip_address":"","ucode":"265F379D1B2FEF","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d0/2f/d7b16d4c.jpg","comment_is_top":false,"comment_ctime":1583845236,"is_pvip":false,"replies":[{"id":"78066","content":"加一颗星:)，这里的不一致、边界，是指什么呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587460054,"ip_address":"","comment_id":186437,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878812532","product_id":100046101,"comment_content":"我想分享下我的理解和疑问~ 感觉两阶段提交部分理解得可能不到位<br>1. 2PC中的预留和TCC中的预留有什么区别呢？ <br>我理解是，2PC的预留是相较于业务系统以外的数据库系统来做的预留，而TCC则是业务层面的预留。<br>比如2PC中需要同时更新A B C三个表的字段，通过加锁的方式将三条记录锁定以达到其他线程无法更改的目的来进行预留。而在TCC中，假设一个转账操作，则是先把对应的资金转到一个中间表中进行业务上的锁定，再在confirm阶段完成整个操作。<br>TCC我的理解是通过业务逻辑+幂等来保证最终一致性，是一个更加灵活的方式，但是会侵入业务。<br>在2PC中，什么场景下会出现不一致的情况？边界是什么呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486755,"discussion_content":"加一颗星:)，这里的不一致、边界，是指什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587460054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183020,"user_name":"艾瑞克小霸王","can_delete":false,"product_type":"c1","uid":1674555,"ip_address":"","ucode":"58FCCAC0F675E1","user_header":"https://static001.geekbang.org/account/avatar/00/19/8d/3b/42d9c669.jpg","comment_is_top":false,"comment_ctime":1582915043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877882339","product_id":100046101,"comment_content":"分享下！在某些分布式数据库在分布式事务的实现上，是采用Proxy层(或者称为网关层)作为TCC中的协调者，但是其请求还是沿用了基于2PC的MySQL XA事务。通过在不同的节点上开启XA事务并返回确认&#47;失败相应，Proxy层统计返回结果，确定了后续的commit&#47;rollback。","like_count":1},{"had_liked":false,"id":179287,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1581952327,"is_pvip":false,"replies":[{"id":"69606","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966500,"ip_address":"","comment_id":179287,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5876919623","product_id":100046101,"comment_content":"事务型分布式系统优点就是能解决分布式系统中分布式事务的问题，但是缺点也很明显，就是实现复杂，业务侵入性强，比如TCC还要给每个操作写一个cancel操作，而且因为实现复杂，极易引入bug，维护麻烦，遇到问题不好定位，所以能不用尽量不用。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484184,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179158,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581929139,"is_pvip":false,"replies":[{"id":"69864","content":"比如，可以通过避免重复执行来实现冥等性，使用id标识操作，每次执行时，检查该id对应的操作是否执行过来了，避免重复执行。这个问题比较共性，后续会出个加餐篇:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582141297,"ip_address":"","comment_id":179158,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5876896435","product_id":100046101,"comment_content":"老师，幂等性的操作能举几个例子吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484116,"discussion_content":"比如，可以通过避免重复执行来实现冥等性，使用id标识操作，每次执行时，检查该id对应的操作是否执行过来了，避免重复执行。这个问题比较共性，后续会出个加餐篇:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582141297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010922,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","nickname":"坤","note":"","ucode":"74E6838226A405","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179603,"discussion_content":"针对老师提到的例子中的Token,我的理解是Token是有 “有效期“的，在未过期之前，用户登录时直接登录成功，如果Token过期了，就需要重新登录，重新获取Token。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582244178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339310,"user_name":"Geek_064e72","can_delete":false,"product_type":"c1","uid":2900973,"ip_address":"","ucode":"D627BACE46C37C","user_header":"","comment_is_top":false,"comment_ctime":1648030329,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648030329","product_id":100046101,"comment_content":"在两阶段提交协议中，作为协调者发出第二阶段的请求，参与者A和B收到了请求并执行了事务，得参与者有收到请求之前挂了，同时，作为协调者在收到所有参与者的返回前挂了（或者返回超时前挂了），这时候就有点无解了吧。","like_count":0},{"had_liked":false,"id":329893,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1641631014,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641631014","product_id":100046101,"comment_content":"优点是多节点的信息是一致的，缺点就是响应时间久吧。","like_count":0},{"had_liked":false,"id":317134,"user_name":"CalvinYang","can_delete":false,"product_type":"c1","uid":1611749,"ip_address":"","ucode":"8942280F989C00","user_header":"","comment_is_top":false,"comment_ctime":1634693546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634693546","product_id":100046101,"comment_content":"韩老师，有一点不太明白<br>原文中：<br>但是不管是原始的二阶段提交协议，还是 XA 协议，都存在一些问题：<br>在提交请求阶段，需要预留资源，在资源预留期间，其他人不能操作（比如，XA 在第一阶段会将相关资源锁定）；<br>数据库是独立的系统。<br><br>数据库是独立的系统是其中存在的一个问题，这个如何理解？","like_count":0},{"had_liked":false,"id":313137,"user_name":"Geek_8c4282","can_delete":false,"product_type":"c1","uid":1562826,"ip_address":"","ucode":"09E13C2DDBA48D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3opKxGyQia0CQibZU8If7Qv6ia3j4XiaWIdCHxrK0T3uZ5RVUSgwf0IJVRVt0wVLibryycTqv4VnEzbw/132","comment_is_top":false,"comment_ctime":1632294840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632294840","product_id":100046101,"comment_content":"老师好，想问下2PC如果1个RM（A） commit success，1个RM(B) commit fail，这种情况怎么保证数据一致性呢？比如B宕机了，还是保证不了啊","like_count":0},{"had_liked":false,"id":307713,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1100387,"ip_address":"","ucode":"5B168A03809557","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/63/9be9ac89.jpg","comment_is_top":false,"comment_ctime":1629210702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629210702","product_id":100046101,"comment_content":"个人理解不知道对不对:<br>1. 无论是XA&#47;TCC, 一个关键点是一旦预锁资源成功, 后面Confirm必须是可以成功;<br>2. Confirm&#47;Cancel 操作必须是幂等的, 以支持重试;<br>3. XA&#47;TCC中间还是会有短暂的时间(也可能很长)隔离性被打破, 难以避免.","like_count":0},{"had_liked":false,"id":282947,"user_name":"曾泽浩","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1615471872,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615471872","product_id":100046101,"comment_content":"有个问题一直不理解，如果在确认阶段，有些节点因为网络原因没有收到消息，怎么保证要么全部执行，要么全部不执行的？","like_count":0,"discussions":[{"author":{"id":1755152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","nickname":"Info_E","note":"","ucode":"97207B2CC4C776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367589,"discussion_content":"超时重试吧，协调者向参与者发送提交消息，消息丢失的话，协调者没收到确认报文可以超时重试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618403087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271358,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1609575846,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1609575846","product_id":100046101,"comment_content":"在二阶段提交的时候，在【赵通知魏、韩：“明天攻打秦国。”】中，如果因为网络问题，赵通知韩超时，这个时候，这个事物是提交呢？还是不提交？","like_count":0},{"had_liked":false,"id":241326,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1597247455,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597247455","product_id":100046101,"comment_content":"保证了数据的强一致性，在某些对于数据一致性要求非常高的条件先使用。缺点是可用性降低了，因为CAP理论下，又必须保证分区容错性，那么只能失去可用性，当某个节点故障了，可能整个系统就不可用了。","like_count":0},{"had_liked":false,"id":240989,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597142985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597142985","product_id":100046101,"comment_content":"分布式事务追求的是,对于数据的极端一致性,对于这种系统,好处就是我们可以直接获取最新的数据,但是无法很好的保证分区容错性,和可用性,所以推荐一些系统信息数据进行使用","like_count":0},{"had_liked":false,"id":239438,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1596532395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596532395","product_id":100046101,"comment_content":"二阶段提交协议：<br>第一阶段：要求各节点，有能够完成提交的能力，如果其中一个节点无法保证完成提交，那么就回滚，各节点都回滚。<br>第二阶段：既然第一阶段都保证了各节点都能提交，那么第二阶段的提交就必须保证成功，如果一个节点失败，那就重试直到成功，这个的保证必须要在第一阶段就确定。<br>至于如何保证，第二阶段一定成功，可以参考Mysql的二阶段日志提交实现，redo log和binlog日志俩阶段提交，也就是第一阶段的相关数据需要持久化，这样无论是崩溃还是掉电，重启之后，更加持久化数据恢复到崩溃发送时的状态，然后在进行提交。<br>Mysql就是将相关日志信息持久化到盘后保证俩阶段提交的。<br>","like_count":0},{"had_liked":false,"id":223538,"user_name":"burner","can_delete":false,"product_type":"c1","uid":1202414,"ip_address":"","ucode":"22B8C4622B6E3C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7cOHiaxJBPvdic53UfP4VC2P4EsyYOGNEwhgYsrP4kw7MFhI7fKQ0GnIiadIHUEYVD85AkrcGv5DLg/132","comment_is_top":false,"comment_ctime":1591111019,"is_pvip":false,"replies":[{"id":"87755","content":"加一颗星，感谢反馈:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595865822,"ip_address":"","comment_id":223538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591111019","product_id":100046101,"comment_content":"没接触过两阶段提交的同学不知道是不是和我一样看完一头雾水，苏秦在真实系统中到底是个什么角色？coordinator又是什么？建议用真实系统举例会更形象清晰，不然看完满脑子都是苏秦忙来忙去，无法对应到现实系统中理解","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497156,"discussion_content":"加一颗星，感谢反馈:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595865822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213009,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588260249,"is_pvip":false,"replies":[{"id":"79099","content":"多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588315502,"ip_address":"","comment_id":213009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588260249","product_id":100046101,"comment_content":"提纲挈领，醍醐灌顶，多谢老师！","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493667,"discussion_content":"多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588315502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201083,"user_name":"小何","can_delete":false,"product_type":"c1","uid":1067516,"ip_address":"","ucode":"EFD72AB3CA2AF7","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/fc/5627215c.jpg","comment_is_top":false,"comment_ctime":1585713431,"is_pvip":true,"replies":[{"id":"75949","content":"现在在规划中，后续会按计划更新。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586169985,"ip_address":"","comment_id":201083,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585713431","product_id":100046101,"comment_content":"老师在评论里说，针对分布式事务的一些实现细节，比如日志、重试等会有加餐内容，这个是什么时候有呢？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490235,"discussion_content":"现在在规划中，后续会按计划更新。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586169985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199223,"user_name":"哼歌儿李","can_delete":false,"product_type":"c1","uid":1357897,"ip_address":"","ucode":"D384DE36455A62","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/49/99ca2069.jpg","comment_is_top":false,"comment_ctime":1585483074,"is_pvip":false,"replies":[{"id":"75992","content":"感谢反馈，后面我会综合大家的反馈做补充:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586193971,"ip_address":"","comment_id":199223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585483074","product_id":100046101,"comment_content":"关于二阶段提交和TCC有个具体的使用场景介绍就更好了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489805,"discussion_content":"感谢反馈，后面我会综合大家的反馈做补充:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586193971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193026,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1584882509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584882509","product_id":100046101,"comment_content":"ACID，单机事务之王。","like_count":0},{"had_liked":false,"id":185546,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1583627006,"is_pvip":false,"replies":[{"id":"76363","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586375166,"ip_address":"","comment_id":185546,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583627006","product_id":100046101,"comment_content":"我理解分布式事务优点在一个大型分布式系统上实现事务从而可以保存更多数据，提升性能，以前单机虽然也有事务但是数据量受限性能也差；缺点嘛，就是需要多次交互，逻辑复杂容易出错。<br>二阶段提交和Tcc很像，都问准备好了吗？准备好了。那就执行吧！区别tcc客户端参与很深造成代码侵入者强","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486409,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586375166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184933,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1583455273,"is_pvip":false,"replies":[{"id":"76194","content":"加一颗星:)，关于线性一致性的实现，我后面做个补充，具体说说吧。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286736,"ip_address":"","comment_id":184933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583455273","product_id":100046101,"comment_content":"raft自身的数据加上客户端怎么实现系统的强一致性？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486176,"discussion_content":"加一颗星:)，关于线性一致性的实现，我后面做个补充，具体说说吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183346,"user_name":"paddy","can_delete":false,"product_type":"c1","uid":1053019,"ip_address":"","ucode":"1C9886DAF9C5C7","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/5b/f08018d3.jpg","comment_is_top":false,"comment_ctime":1583026025,"is_pvip":false,"replies":[{"id":"77751","content":"加一颗星:)，CAP的C是有两个含义，埃里克·布鲁尔（Eric Brewer）最初提出CAP猜想时，C是指ACID，操作全部执行或全部不执行；赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）在证明CAP定理时，将C定义为原子一致性（也就是线性一致性）。ACID中的C，是指事务将系统从一个一致性状态切换到另一个一致性状态。CAP定理的C是指线性一致性，可以理解为每次读操作都能读到最新的数据，不会读到旧数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587307345,"ip_address":"","comment_id":183346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583026025","product_id":100046101,"comment_content":"老师，ACID里的一致性与CAP理论里的一致性，是同一回事么，他们之间有区别么？我理解CAP中的C更强调数据副本中一致性，同一份数据有没有达成共识，而ACID中的C更强调事务中的一致性，比如两个账户在不同的数据库实例，转账操作一个成功了一个失败了，由于原子性没保证，导致了数据的不一致。这里有些不清楚，是概念搞混淆了么？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485658,"discussion_content":"加一颗星:)，CAP的C是有两个含义，埃里克·布鲁尔（Eric Brewer）最初提出CAP猜想时，C是指ACID，操作全部执行或全部不执行；赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）在证明CAP定理时，将C定义为原子一致性（也就是线性一致性）。ACID中的C，是指事务将系统从一个一致性状态切换到另一个一致性状态。CAP定理的C是指线性一致性，可以理解为每次读操作都能读到最新的数据，不会读到旧数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587307345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183246,"user_name":"文龙","can_delete":false,"product_type":"c1","uid":1013877,"ip_address":"","ucode":"79CD2F49F2DA61","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/75/44e35ec5.jpg","comment_is_top":false,"comment_ctime":1582981791,"is_pvip":false,"replies":[{"id":"70908","content":"后面会有个补充:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582990880,"ip_address":"","comment_id":183246,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582981791","product_id":100046101,"comment_content":"能结合一些真实场景，就更好了。期待加餐 :D","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485616,"discussion_content":"后面会有个补充:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582990880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183165,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1582964822,"is_pvip":false,"replies":[{"id":"77628","content":"加一颗星:)，我后面会过个补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587235691,"ip_address":"","comment_id":183165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582964822","product_id":100046101,"comment_content":"TCC这个业务层面二阶段提交，代码上怎么实现","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485579,"discussion_content":"加一颗星:)，我后面会过个补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587235691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180849,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1582428102,"is_pvip":false,"replies":[{"id":"70329","content":"数据库分布式事务不能满足时，或者业务比较复杂时，涉及到跨库的数据一致性，考虑TCC。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582564090,"ip_address":"","comment_id":180849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582428102","product_id":100046101,"comment_content":"老师 两阶段可以通过数据库XA线性实现 TCC可以业务代码实现 那现有开源的分布式事务框架是否可以考虑引入 或者是在什么阶段可以引入","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484815,"discussion_content":"数据库分布式事务不能满足时，或者业务比较复杂时，涉及到跨库的数据一致性，考虑TCC。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582564090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180715,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1582372162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582372162","product_id":100046101,"comment_content":"非常喜欢作者的写作风格，在关键处能够提到代码的实现要点，这正是理论到实践所需要的桥梁！","like_count":0},{"had_liked":false,"id":180561,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1582337015,"is_pvip":false,"replies":[{"id":"70929","content":"这是其实是个拆分解耦的问题，客户端是相对的，相对数据库而言的，边界没那么明显，取决于工程实现。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583021304,"ip_address":"","comment_id":180561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582337015","product_id":100046101,"comment_content":"事务型分布式系统的数据一致性比较高，在采用acid的情况下可以保证所有节点一致，其他情况也可以保证至少大部分节点一致。<br>二阶段提交协议和tcc协议的区别在于，tcc是在业务层面的实现，可以更好地根据业务需求去适配，调整预留资源锁粒度的问题。<br>另外，有一个问题是，tcc为什么不像二阶段提交一样使用一个节点作为协调者，而是使用客户端作为协调者，这样做的好处是什么？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484711,"discussion_content":"这是其实是个拆分解耦的问题，客户端是相对的，相对数据库而言的，边界没那么明显，取决于工程实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583021304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179914,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1582121011,"is_pvip":false,"replies":[{"id":"69866","content":"都是二阶段提交，TCC在业务中实现，更灵活。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582142030,"ip_address":"","comment_id":179914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582121011","product_id":100046101,"comment_content":"有个疑问，二阶段提交有资源预留的问题，TCC也需要资源预留，这么看来TCC并没有解决二阶段提交的问题呀，还是不太清楚TCC针对二阶段提交的那种思想在哪里做了提升，除了将协调者转移到非业务节点上。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484447,"discussion_content":"都是二阶段提交，TCC在业务中实现，更灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582142030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179424,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1582000997,"is_pvip":false,"replies":[{"id":"69742","content":"相比业务，数据库是独立的，也就是说，数据库是独立的第三方软件，咱们可以编程或修改业务代码，但，很少会修改数据库核心代码，更不会根据业务需求，修改实现不同的数据库代码逻辑。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582042648,"ip_address":"","comment_id":179424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582000997","product_id":100046101,"comment_content":"问下，在&quot;二阶段提交存在的问题&quot;中说 &quot;数据库是独立的系统&quot;，想传递什么意思呢。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484255,"discussion_content":"相比业务，数据库是独立的，也就是说，数据库是独立的第三方软件，咱们可以编程或修改业务代码，但，很少会修改数据库核心代码，更不会根据业务需求，修改实现不同的数据库代码逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582042648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179203,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1581935503,"is_pvip":false,"replies":[{"id":"69605","content":"加一个星:)，不过，事务系统缺乏节点故障容错能力，性能也是痛点。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581966466,"ip_address":"","comment_id":179203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581935503","product_id":100046101,"comment_content":"分布式事务系统的存在可以提高系统处理能力，但是太复杂了。涉及到金钱处理的业务就需要使用到tcc了，强一致性带来的结果是金钱数据的正确性。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484141,"discussion_content":"加一个星:)，不过，事务系统缺乏节点故障容错能力，性能也是痛点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581966466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179163,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581930286,"is_pvip":false,"replies":[{"id":"69972","content":"需要将提交相关信息保存到持久存储上，用于故障后恢复，超时，也要不断重试。后续在加餐篇会补充些分布式事务内容，具体说说这些实现。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582208318,"ip_address":"","comment_id":179163,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581930286","product_id":100046101,"comment_content":"老师，二阶段协议和TCC两种方式中，怎么处理各种特殊情况？比如节点故障或者消息延迟。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484120,"discussion_content":"需要将提交相关信息保存到持久存储上，用于故障后恢复，超时，也要不断重试。后续在加餐篇会补充些分布式事务内容，具体说说这些实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582208318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058800,"avatar":"https://static001.geekbang.org/account/avatar/00/10/27/f0/06ecce19.jpg","nickname":"Skysper","note":"","ucode":"164B3CAF81A7C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177514,"discussion_content":"同求了解，比如TCC 预留阶段、确认阶段和撤销阶段等阶段，如果节点异常，无法执行，后续是怎么保障的？是有日志记录，节点  重启恢复时，会重做吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582112305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}