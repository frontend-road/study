{"id":804277,"title":"10｜转型：如何在Agent平台上构建一个AI营销智能体？","content":"<p>你好，我是金伟。</p><p>上节课说的AI营销功能还是微信单点能力，在现实营销项目中，还需要“化零为整”，把更多的功能及合成一个智能体。</p><p>从整个系统的角度来看，就是通过Agent智能体升级我们原来的营销平台，即<strong>原有广告平台 + AI = 营销平台 2.0。</strong></p><p>这节课，我就带你开发几个营销领域的Agent智能体，让你从零开始，学会Agent智能体开发。</p><h2>营销Agent开发思路</h2><p>Agent平台应用的范式说来并不复杂，交互上，是聊天机器人为基础的交互界面，架构上，支持低成本开发和分享新的AI智能体应用，也可以快速复用原有的成熟应用逻辑。</p><p>市场上有一些低代码的Agent开发平台，比如<a href=\"https://www.betteryeah.com/?channel=feizhuke\">斑头雁</a>、<a href=\"https://www.coze.cn/?ref=openi.cn\">扣子</a>等等。我们基于这些平台就可以开发自己的Agent智能体应用，也可以直接把这些应用分享给用户。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/4f/f5yy53c16791701a0d206cb6fc38344f.png?wh=1920x990\" alt=\"图片\"></p><p>我们的目标是把原有营销平台的工具全都转换成Agent智能体，同时，把Agent智能体的开发能力分享给我们的客户。具体选型上，一方面基于成本考量，另一方面团队也抱着学习的态度，我们选择在扣子Agent平台上，开发1-2个Agent智能体，组合完成一个完整的业务逻辑。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/45/588850d66e32c3c5bc6ca017c2f3a345.jpg?wh=3546x1832\" alt=\"\"></p><p>在做单个的工具之前，我们最大的挑战就是理解、适应Agent平台的开发模式。</p><p>我先从Agent平台的<strong>助理</strong>这个概念入手分析。</p><!-- [[[read_end]]] --><p>助理是Agent平台的核心概念，有的平台也把助理就叫做Agent或机器人，其实它们都是一回事。你可以把助理看做一个AI first的应用。</p><p>Agent平台里的助理不是只有聊天能力，它还能做很多事。比如下面这个客服助理自带有客服能力，用户跟这个助理聊天的时候就是在跟一个客服聊天。你还可以自建和扩展助理的能力，比如这个客服助理的退款功能就是我自定义的，它可以自动识别订单号，发起退款流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/40/349c47a015aeaf99b0f459ab3e743140.png?wh=1920x1574\" alt=\"图片\"></p><p>退款功能先要要用到私有数据库。那很多公有的能力比如搜索数据等如何实现呢？这就要靠Agent平台的另外一个核心概念，<strong>插件能力</strong>，也就是类似下面展示的这些能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/ed/28cyyce5a25371b4df390a34763880ed.png?wh=1920x1156\" alt=\"图片\"></p><p>比如搜索能力可以用Google Web Search插件，上面提到的退款流程则需要用到Database插件。</p><p>可以说，Agent智能体开发效率高，就是因为这些平台提供了大量插件能力和多种大模型提供的接入能力。</p><p>你可能会奇怪Agent是怎么具备业务逻辑的，Agent和大模型是什么关系呢？</p><p>我的答案是，助理可以看做Agent应用的界面，比如例子里的客服助理。但你其实就是在和大模型在聊天，只不过在你和大模型之间还有一个代理程序，它就是Agent。<strong>我们可以把Agent看做大模型的代理人。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/c6/98/c677cdc22ce14db09b9a416ef5be6998.png?wh=1920x887\" alt=\"图片\"><br>\n在Agent平台里还有一个重要概念就是工作流。助理负责识别具体的业务逻辑并调取工作流，一个工作流其实就是一个原有业务逻辑。比如客服里的退货业务，实际上工作流是被动配合助理的。</p><p>几个概念综合起来，内部的实现就很容易理解了，由外到内一共四层关系：助理 -&gt; 工作流 -&gt; 插件-&gt;知识库。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/20/e20d4c56a08b82f50b15287922c2a320.png?wh=1920x887\" alt=\"图片\"></p><p>可以这样理解，工作流就是传统应用里的独立功能的函数或程序，那插件呢，就是传统程序里的系统库函数，知识库就是传统数据库。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/e7/e3ab7bf6e178a24357d063e86c059fe7.png?wh=1920x887\" alt=\"图片\"></p><p>总结一下，助理通过提示词配置具体的沟通能力以及业务能力，具体业务能力的承接通过工作流实现，其他的模块都是配合工作流的，有了这些部件，我们就可以基于Agent平台开发一个实际的营销Agent应用了。</p><h2>营销Agent开发过程</h2><p>Agent（助理）的设计分为三个部分。其一是配置助理的系统提示词，其二是配置Agent（助理）的工作流能力，其三就是设计具体的工作流逻辑。</p><h3>例1：公司信息营销AI</h3><p>我们来看一个实际给用户提供营销的Agent。它的功能是通过公司名找到这家公司的邮箱信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/b4/c8e61ae7c4b090aea6229417da0cdfb4.png?wh=1920x541\" alt=\"图片\"></p><p><strong>第一步，设计Agent（助理）的系统提示词</strong>。如果把Agent类比为一个公司的前台的话，这一步就是告诉前台整体的工作职责和对客户的态度，或者说，限定大模型的交互边界。</p><p>没有什么比直接写一个提示词的例子能更清楚地表示这一步了。看下我们依据“通过公司名找到联系方式”这个需求写出来的提示词。核心就是一句话：说明清楚这是一个人机交互的助理，目的是帮用户收集公司联系方式信息。</p><pre><code class=\"language-plain\"># 角色\n您是一位营销代理机器人，旨在帮助用户通过公司名称找到联系方式并将信息存入数据库。\n\n\n## 技能\n... ...\n\n\n## 限制\n- 使用简单明了的语言，以确保用户可以轻松理解和使用。\n- 遵守提供的输出格式。\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/33/f3/33b98b514bf96b51c69a78b85d834df3.png?wh=1920x887\" alt=\"图片\"><br>\n实际上，我们只要将提示提交给Agent平台，就已经创建好一个助理了。它甚至可以马上开始工作。</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/b0/4fa7109e7381822f82e99984ee789fb0.png?wh=1742x1086\" alt=\"图片\"></p><p>当然，要让其真正具备工作能力还需要<strong>第二步，配置Agent的工作流能力</strong><strong>。</strong>比如该需求中的联系方式获取、信息入库，都需要在提示词中用 <code>Skill技能</code> 这个模块给大模型标出来。这一步相当于告诉前台，咱们公司后台有哪些能力，当客户需要的时候你可以直接调取。</p><p>具体实现就是补充助理提示词里<code>Skill技能</code>模块。</p><pre><code class=\"language-plain\"># 角色\n您是一位营销代理机器人，旨在帮助用户通过公司名称找到联系方式并将信息存入数据库。\n\n\n## 技能\n### 技能1：提供联系方式\n- 根据用户提供的公司名称找到相关的联系方式（如公司联系邮箱）。\n- 确保提供的联系方式准确且易于使用。\n- 格式示例：\n=====\n- 公司名称: &lt;公司名称&gt;\n- 联系方式: &lt;详细联系方式&gt;\n=====\n\n\n### 技能2：信息入库\n- 将找到的公司名称和联系方式存入数据库。\n- 确保信息存储过程准确无误。\n- 格式示例：\n=====\n- 信息已成功存入数据库:\n  - 公司名称: &lt;公司名称&gt;\n  - 联系方式: &lt;详细联系方式&gt;\n=====\n\n\n## 限制\n- 使用简单明了的语言，以确保用户可以轻松理解和使用。\n- 遵守提供的输出格式。\n</code></pre><p>助理提示编写的要求，一是要说明清楚总体工作目标，二是说明清楚具体工作细节方法。比如提示词里的<code>格式示例</code>信息就非常关键。</p><pre><code class=\"language-plain\">- 格式示例：\n=====\n- 公司名称: &lt;公司名称&gt;\n- 联系方式: &lt;详细联系方式&gt;\n=====\n</code></pre><p>这样编写的目的实际上是让助理（背后是大模型）准确地提取出用户聊天过程中的 <code>公司名称</code>，将其作为输入调用具体工作流 <code>技能1：提供联系方式</code>，得到结果。就像一个公司的前台，接收到客户投诉时，总要把客户具体的出错信息整理出来告诉程序员，才方便他进一步处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/55/ef8c417f5db2029bb27d4707c2110155.png?wh=1920x922\" alt=\"图片\"></p><p>做完前两步配置，后续的工作流实现就变得极其简单了。你可以回想一下传统的程序开发，我们需要开发很多用户界面和判断逻辑，才能准确识别出一次用户的需求。接着，又需要做大量数据整理逻辑才能调用具体的实现函数。现在，助理提示词+大模型就搞定这一切了。</p><p><strong>第三步，工作流设计</strong><strong>。</strong>你可以把一个工作流看做一个函数，比如例子里的 <code>联系方式</code> 工作流。我用一张图给你说明清楚。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/fe/f749cc849ab98e06934cb9cb220b97fe.png?wh=1920x354\" alt=\"图片\"></p><p>这个图很好地说明了工作流的两个特点。一是每一步的输出就是下一步的输入，二是工作流一般来说只要顺序处理数据，就像一个公司里最基础的岗位，业务和流程非常明确。</p><p>设计上，我们还要思考，抓取联系方式是用大模型实现，还是用传统的爬虫技术实现？当然了，信息存储显然要用传统程序来实现。如果想开发省事，可以直接交给大模型分析处理，想运行成本低一些，则可以用传统爬虫程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/e6/3333060368ac905922d5b7b4f3fc71e6.png?wh=1920x876\" alt=\"图片\"></p><p>好了，思路已经非常清晰了，接下来说说具体实现。首先，我们将刚才梳理的工作流在Coze平台上编排为具体的工作流。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/d6/5f3aa2d5d0f2834304bc88f96d4c7cd6.png?wh=1920x782\" alt=\"图片\"></p><p>注意看，这个工作流的具体流程图和我画的示意图就是工作流的一体两面。一个是实现，一个是设计，具体工作流上的节点都可以通过Coze平台拖拽配置。我在工作流上加入了Google搜索插件和自己的爬虫代码逻辑，把它们的输入输出编排为顺序的工作流，最终能实现输入是公司名称，输出是公司的联系方式。</p><p>虽然说Agent平台拖拽式开发非常方便，但是做过编程的朋友都知道，要实现哪怕一个很小的产品也不容易。</p><p>比如，工作流每一步的需求都可以用输入-输出来表示，第一步的输入是公司名字，输出是公司网址。在之前的设计里，这一步是通过Google搜索插件完成的。这里就要提到工作流开发第一个特点：<strong>每个插件或代码节点都可以单独调试。</strong></p><p>假设我们要调试Google搜索插件，可以单独运行它，填入测试的 <code>query</code> 参数就可以。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/3d/b924de0750f450cbc81a3f68ba82153d.png?wh=1920x693\" alt=\"图片\"></p><p>在这个图里，插件的实际参数是 <code>query</code>，也就是搜索的关键词。这个参数可以在插件节点编辑界面用 <code>Reference</code> 关联上一步的输出，这样就可以实现整体工作流的运行了。</p><p>好了，现在我们说回单步调试，当我们的 <code>query</code> 设置为 <code>极客时间</code>，它的运行结果也是可以直接查看的。下面是这次调用的具体结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/52/3ebb59d4d5851dc8d5610e48c315d352.png?wh=1920x930\" alt=\"图片\"></p><p>你可能注意到这次调用的搜索结果第一项的 <code>url</code> 并不是我们想要的，这正是单步调试的意义，它让我们及时发现问题。经过调整，最后我们将 <code>query</code> 设定为 <code>极客时间 官网</code>，就能达到提取网址的目的。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/f0/76b1ceae6326af0f65106f85329afaf0.png?wh=1920x909\" alt=\"图片\"></p><p>这样调整的话，就要求Google搜索前置流程需要把 <code>company</code> 参数加入 <code>官网</code> 字样，具体方法是加一个工作流节点，直接用Code节点实现。</p><p>具体的Code节点代码例子如下。</p><pre><code class=\"language-plain\">async def main(args: Args) -&gt; Output:\n    params = args.params\n    ret: Output = {\n        \"company_name\": params['input'] + \" 官网\"\n    }\n    return ret\n</code></pre><p>最后把这个Code节点插入到Google插件之前，就完成了输入是公司名字，输出是公司网址的逻辑。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/90/71ca2df683b923edee0fe46a047f8690.png?wh=1920x747\" alt=\"图片\"></p><p>你可能会想，如果通过这个关键字搜索的第一项还不是公司官网怎么办？在实战环境中肯定会出现这种情况，因此更实战的逻辑还要更加复杂。我们要加入搜索结果的进一步比对分析，比如比较每个网址、内容和Title，以便确认是这个公司的官网。工作流开发过程是一样的，此处不再展开。</p><p>好了，这只是实现了第一步，你跟着我的思路继续。</p><p><strong>第二步的输入是公司网址，输出是公司联系方式。</strong>这一步我的思路不是拿着官网网址去下载网页内容，而是先从官网内容里查询联系方式或“联系我们”之类的单独网址，再从这个网址里提取联系方式就方便了。</p><p>我先把编排完的结果展示一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/6a/6a405875e81d5a6d4a21469b43d42f6a.png?wh=1920x626\" alt=\"图片\"></p><p>注意，这个流程的第一个节点是我找的一个插件，功能是根据网址抓取网页内容，<code>提示词1</code> 和 <code>提示词2</code>的目的都是通过大模型来分析网页内容，找到联系方式的具体网址。</p><pre><code class=\"language-plain\">#提示词1\n下面是一个html内容，你要解析这个html，找到网址的导航部分，只去分析链接和相应的链接名称，\n提取出链接-链接名称这样的数据对,注意链接和名称要一一对应，用json格式输出：\n{{input}}\n\n\n#提示词2\n从下面的json内容里取出链接名称是 联系方式，公司信息的网址,输出1个网址就行，不要名称：\n{{input}}\n</code></pre><p>你可以对照这两个提示词好好梳理一下这一步的逻辑。拿到联系方式的 <code>网址2</code> 之后，还可以继续接 <code>jina_reader</code> 节点读取内容。最后接一个code节点，用正则提取电话、邮箱这些联系方式，开发方法跟前面类似。</p><p>到此为止，你应该可以发现Agent工作流的这种开发模式其实非常适合非编程人员使用。使用合适的插件，再结合 <code>LLM</code> 的强大能力，只要会简单的代码逻辑就可以完成一个功能，我想这也正是Agent智能体的核心价值所在。</p><p>现在，你只需要单独调试好这个工作流，Agent的交换界面上就能自动更新获得的最新能力了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/5d/3ede3d4b140d8644c74b59b8ed16b85d.png?wh=1666x1270\" alt=\"图片\"></p><h3>例2：邮件营销AI</h3><p>下面，我们继续在这个助理基础上扩展邮件营销能力。</p><p>如果要实现邮件营销推广Agent，要包括营销文案生成，营销邮件发送等功能，只需要在上一步的助理基础上扩展即可，不需要新建一个Agent。</p><p><strong>第一步修改助理核心提示词</strong><strong>。</strong>我们需要加入的是营销文案和邮件发送的能力，也就是下面的技能3和技能4。</p><pre><code class=\"language-plain\"># 角色\n您是一位营销代理机器人，旨在帮助用户通过公司名称找到联系方式，生成营销文案，并发送营销邮件。\n\n\n## 技能\n...\n\n\n### 技能3：生成营销文案\n- 根据用户的需求生成定制化的营销文案。\n- 确保文案能够有效地传达信息并吸引目标受众。\n- 格式示例：\n=====\n- 营销文案: &lt;详细营销文案&gt;\n=====\n\n\n### 技能4：发送营销邮件\n- 使用生成的营销文案发送营销邮件到指定的公司联系邮箱。\n- 确保邮件发送过程顺利且无误。\n- 格式示例：\n=====\n- 公司名称: &lt;公司名称&gt;\n- 联系方式: &lt;详细联系方式&gt;\n- 邮件发送状态: &lt;发送成功/失败&gt;\n=====\n...\n</code></pre><p>然后是第二步。我在设计的时候发现，因为还需要加上按标签筛选客户邮箱的功能，所以具体的工作流实际上是三个，我先用一张图表示这三个工作流。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/03/96d50a569893308193fc58b078dabc03.png?wh=1920x1015\" alt=\"图片\"></p><p>标签筛选这个工作流的实现，需要复用原平台的标签库功能。营销文案的生产复用上一节课说的营销文章工厂能力，两步都是原有功能对接，就不再展开了。</p><p>而发邮件的工作流就要用插件能力来实现邮件EDM功能了。我在Coze上找到一个叫SendMail的插件，用了它的SendGird邮件服务。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/56/39f808d6d311e2e4057ca35fdfe36056.png?wh=984x950\" alt=\"图片\"></p><p>你可以在SendGird申请一个key，就能完成邮件发送任务。工作流的代码开发和调试和前述方法一致，这里我就略去细节了。</p><h3>案例总结</h3><p>如果我们回顾这几个简单的例子，会发现Agent平台提供了什么价值呢？</p><p>对传统应用来说，Agent平台提供了统一的界面，也就是助理聊天界面。这种交互模式几乎可以替代传统的应用交互界面。因为传统界面交互需要大量的选项、按钮、输入框等，新的交互呢，用户通过自然语言就可以说清需求；而且这个交互界面，随时可以通过我们配置的提示词调整具体的交互逻辑，也就是Agent（助理）设计的第一，二步。本质是因为大模型具有很强的可塑性，这让交互界面的开发成本直接降为零。</p><p>而工作流和插件的低代码开发模式，也就是Agent（助理）设计的第三步，复用现有业务和复用现有云计算能力，这些都非常方便，至少有10-20倍的业务开发速度提升。而且你开发的工作流可以直接分享，进一步提高了别人的开发效率。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/96/e73c117cfb29e4d9821400955ae18496.png?wh=1920x1295\" alt=\"图片\"></p><h2>营销Agent优化有哪些额外考虑？</h2><p>我们初始的目标，是要实现营销AI 2.0版本，并且将自定义能力开放给我们的客户。如果是单个新增应用，基于Coze这类Agent开发平台来开发，由于Coze平台本身提供了整套的基础设施，开发效率有很大的提升。但是当我们想基于它构建一整套系统时，遇到了不少困难。</p><p>第一个挑战是数据和能力复用问题。</p><p>其一，数据私有化这是企业的常见需求，利用现有Agent平台开发营销AI 2.0平台，不可避免地要将私有数据和现有Agent平台打通，企业客户不一定能接受这个方案。</p><p>其二，在能力复用方面，我们现有的营销平台功能非常多，如果用现有Agent平台来开发，就需要适配Agent平台重新开发一遍，开发成本很高。现有Agent平台对创建新应用更友好，这也是我这节课没有细讲标签功能的原因。</p><p>而且，我们发现，想要搭建一个完整的营销平台2.0版本，会有很大的成本问题。用现有的Agent平台本身需要成本，使用它代理的大模型也需要token成本。</p><p>为了解决这些问题，我们团队只好从底层实现一套类似Coze平台的架构，这就是下节课进一步展开的内容了。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/a0/2dd4bb200edfa96876aefaa2b3923ca0.png?wh=1920x790\" alt=\"图片\"></p><h2>小结</h2><p>好了，总结一下，从客户角度来分析，单独的AI聊天不能解决客户实际问题，客户实际是想用AI提高获客效率，提高老客户的复购率。而原来的营销平台是靠着平台技术能力加人力运营实现的这些目标。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/26/9c3eaac865bf722b363c66ffbd6ede26.png?wh=1920x922\" alt=\"图片\"></p><p>从我们之前开发这些单体的智能体应用经验看，如果搭建一个营销Agent平台，可以用极低的成本将原有运营逻辑变为自动化的过程，提升效率，同时意味着成本也会降低。</p><p>这是我们接触Coze这类的Agent开发平台的原因，如果你使用过Coze平台，同时具备一定的编程能力，你可能会惊呼，这样开发一个Agent应用也太简单了吧！几乎人人都可以开发自己的Agent智能体了。</p><p><strong>Agent智能体在平台的核心其实就两个，一是用于限定机器人交互的系统提示词，二是用于实现业务逻辑的工作流。</strong>工作流开发在系统插件、LLM能力以及知识库、Memory系统记忆等大量系统能力的加持下，能够提升不小的开发效率。</p><p>但是当你深入到Agent开发中，又会发现同样的问题。这个平台作为个人开发完全足够，但是对于我们团队这类的系统整体升级需求而言，还要做适配，开发成本不小。最后我们意识到，我们要做的是整体的营销AI 2.0，又因为我们有自研能力，所以开始自研Agent平台底层，这部分内容，我会在下节课详细展开。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/99/b13ab51a26b2fce1db19c93bf9f42399.png?wh=1920x833\" alt=\"图片\"></p><h2>思考题</h2><p>在工作流系统中，最重要的就是输入和输出数据，比如例子里公司名词：百度，工作流系统是如何准确识别这个输入的，和大模型有什么关系？</p><p>欢迎你在留言区和我交流。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p><p><a href=\"https://jsj.top/f/hm26hN\">&gt;&gt;戳此加入课程交流群</a></p>","comments":[{"had_liked":false,"id":393757,"user_name":"jerremyZhang","can_delete":false,"product_type":"c1","uid":1160762,"ip_address":"北京","ucode":"6744F9070D4E2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b6/3a/407930cc.jpg","comment_is_top":false,"comment_ctime":1724807945,"is_pvip":false,"replies":[{"id":143005,"content":"可以可以","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1725177207,"ip_address":"北京","comment_id":393757,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"非常期待后续","like_count":1,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650522,"discussion_content":"可以可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725177207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}