{"id":272999,"title":"03｜强一致性：别再用BASE做借口，来看看什么是真正的事务一致性","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>在上一讲的开头，我提了一个问题：对分布式数据库来说，“强一致性”意味着什么？我们经过分析后得出的结论是这个强一致性，包括数据一致性和事务一致性两个方面。然后，我们介绍了数据一致性是怎么回事儿。那么，今天我们会继续这个话题，谈谈事务一致性。</p><p>每次，我和熟悉NoSQL同学聊到事务这个话题时，都会提到ACID和BASE。甚至，不少同学会觉得ACID有些落伍了，以BASE为理论基础的NoSQL，才是当下的潮流。</p><p>那我们来看看BASE是什么？其实，它代表了三个特性，BA表示基本可用性（Basically Available），S表示软状态（Soft State），E表示最终一致性（Eventual Consistency）：</p><ul>\n<li>基本可用性，是指某些部分出现故障，那么系统的其余部分依然可用。</li>\n<li>软状态或柔性事务，是指数据处理过程中，存在数据状态暂时不一致的情况，但最终会实现事务的一致性。</li>\n<li>最终一致性，是指单数据项的多副本，经过一段时间，最终达成一致。这个，我们在第2讲已经详细说过了。</li>\n</ul><p>总体来说，BASE是一个很宽泛的定义，所做的承诺非常有限。我认为，BASE的意义只在于放弃了ACID的一些特性，从而更简单地实现了高性能和可用性，达到一个新的平衡。但是，架构设计上的平衡往往都是阶段性的，随着新技术的突破，原来的平衡点也自然会改变。你看，不用说分布式数据库，就连不少NoSQL也开始增加对事务的支持了。</p><!-- [[[read_end]]] --><p>所以说，风水轮流转，今天ACID已经是新的后浪了。</p><h2>事务的ACID特性</h2><p>在数据库中，“事务”是由多个操作构成的序列。1970年詹姆斯 · 格雷（Jim Gray）提出了事务的ACID四大特性，将广义上的事务一致性具化到了原子性、一致性、隔离性和持久性这4个方面。我们先来看一下他在 <em>Transaction Processing Concepts and Techniques</em> 中给出的定义：</p><blockquote>\n<p><strong>Atomicity</strong>: <em>Either all the changes from the transaction occur (writes, and messages sent), or none occur.</em></p>\n</blockquote><blockquote>\n<p><strong>Consistency</strong>: <em>The transaction preserves the integrity of stored information.</em></p>\n</blockquote><blockquote>\n<p><strong>Isolation</strong>: <em>Concurrently executing transactions see the stored information as if they were running serially (one after another).</em></p>\n</blockquote><blockquote>\n<p><strong>Durability</strong>: <em>Once a transaction commits, the changes it made (writes and messages sent) survive any system failures.</em></p>\n</blockquote><p>翻译过来的意思就是：</p><blockquote>\n<p>原子性：事务中的所有变更要么全部发生，要么一个也不发生。</p>\n</blockquote><blockquote>\n<p>一致性：事务要保持数据的完整性。</p>\n</blockquote><blockquote>\n<p>隔离性：多事务并行执行所得到的结果，与串行执行（一个接一个）完全相同。</p>\n</blockquote><blockquote>\n<p>持久性：一旦事务提交，它对数据的改变将被永久保留，不应受到任何系统故障的影响。</p>\n</blockquote><p>虽然ACID名义上并列为事务的四大特性，但它们对于数据库的重要程度并不相同。我用一张图来表示它们的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/73/e7571fa45b9337f2541a35d8c82b3873.jpg?wh=2700*1338\" alt=\"\"></p><p>我们依次来看下。</p><p>第一个是一致性，它无疑是其中存在感最低的特性，可以看作是对 “事务”整体目标的阐述。它并没有提出任何具体的功能需求，所以在数据库中也很难找到针对性的设计。</p><p>第二个是持久性，它不仅是对数据库的基本要求。如果你仔细琢磨下持久性的定义，就会发现它的核心思想就是要应对系统故障。怎么理解系统故障呢？我们可以把故障分为两种。</p><ol>\n<li>\n<p>存储硬件无损、可恢复的故障。这种情况下，主要依托于预写日志（Write Ahead Log, WAL）保证第一时间存储数据。WAL采用顺序写入的方式，可以保证数据库的低延时响应。WAL是单体数据库的成熟技术，NoSQL和分布式数据库都借鉴了过去。</p>\n</li>\n<li>\n<p>存储硬件损坏、不可恢复的故障。这种情况下，需要用到日志复制技术，将本地日志及时同步到其他节点。实现方式大体有三种：第一种是单体数据库自带的同步或半同步的方式，其中半同步方式具有一定的容错能力，实践中被更多采用；第二种是将日志存储到共享存储系统上，后者会通过冗余存储保证日志的安全性，亚马逊的Aurora采用了这种方式，也被称为Share Storage；第三种是基于Paxos/Raft的共识算法同步日志数据，在分布式数据库中被广泛使用。无论采用哪种方式，目的都是保证在本地节点之外，至少有一份完整的日志可用于数据恢复。</p>\n</li>\n</ol><p>第三个是原子性，是数据库区别于其他存储系统的重要标志。在单体数据库时代，原子性问题已经得到妥善解决，但随着向分布式架构的转型，在引入不可靠的网络因素后，原子性又成为一个新的挑战。</p><p>要在分布式架构下支持原子性并不容易，所以不少NoSQL产品都选择绕过这个问题，聚焦到那些对原子性不敏感的细分场景。例如，大名鼎鼎的Google BigTable甚至是不支持跨行事务的。但是，这种妥协也造成了NoSQL的通用性不好。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/271369\">开篇词</a>就说过，这门课程讨论的分布式数据库是在分布式架构上实现的关系型数据库，那么就必须支持事务，首先就要支持原子性。原子性，在实现机制上较为复杂，目标却很简单，和分成多个级别的隔离性不同，原子性就只有支持和不支持的区别。有关原子性的实现机制，我将在第9讲中专门介绍。</p><p>最后一个是隔离性，它是事务中最复杂的特性。隔离性分为多个隔离级别，较低的隔离级别就是在正确性上做妥协，将一些异常现象交给应用系统的开发人员去解决，从而获得更好的性能。</p><p>可以说，事务模型的发展过程就是在隔离性和性能之间不断地寻找更优的平衡点。我觉得，甚至可以说事务的核心就是隔离性。而不同产品在事务一致性上的差别，也完全体现在隔离性的实现等级上，所以我们必须搞清楚隔离等级具体是指什么。</p><h2>ANSI SQL-92：对隔离级别最早、最正式的定义</h2><p>最早、最正式的对隔离级别的定义，是ANSI SQL-92（简称SQL-92），它定义的隔离级别和异常现象如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/44/ed89859eb0f1108600e0d5f0db343544.jpg?wh=2700*1112\" alt=\"\"></p><p>SQL-92定义了四个隔离级别和三种异常现象，这些内容网上很多文章都说得比较清楚，我就不再啰嗦了。如果还不放心，我推荐你去看林晓斌老师的课程《MySQL实战45讲》。</p><p>不过，虽然SQL-92得到了广泛应用，不少数据库也都遵照这个标准来命名自己的隔离级别，但它对异常现象的分析还是过于简单了。所以在不久之后的1995年，Jim Gray等人发表了论文“<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf\">A Critique of ANSI SQL Isolation Levels</a>”（以下简称Critique），对于事务隔离性进行了更加深入的分析。我要特别提示一下，Critique是数据库领域的经典论文，强烈推荐你阅读原文。</p><h2>Critique：更严谨的隔离级别</h2><h3>幻读和写倾斜</h3><p>Critique丰富和细化了SQL-92的内容，定义了六种隔离级别和八种异常现象。其中，我们最关注的是快照隔离（Snapshot Isolation, SI）级别。为什么呢？这是因为在SQL-92中可重复读（Repeatable Read, RR）与可串行化（Serializable）两个隔离级别的主要差别是对幻读（Phantom）的处理。这似乎是说，解决幻读问题的就是可串行化。但随着Critique的发表，快照隔离被明确提出，这个说法就不适用了，因为快照隔离能解决幻读的问题，但却无法处理写倾斜（Write Skew）问题，也不符合可串行化要求。因为翻译的原因，有时写倾斜也被称为写偏序，都是一个意思。</p><p>因此，今天，使用最广泛的隔离级别有四个，就是已提交读、可重复读、快照隔离、可串行化。</p><p>而幻读和写倾斜无疑则是通往最高隔离级别的两座大山，那么让我来给你详细解释一下它们到底是什么异常现象。</p><p>Critique对幻读的描述大致是这样的，事务T1使用特定的查询条件获得一个结果集，事务T2插入新的数据，并且这些数据符合T1刚刚执行的查询条件。T2 提交成功后，T1再次执行同样的查询，此时得到的结果集会增大。这种异常现象就是幻读。</p><p>不少人会将幻读与不可重复读混淆，这是因为它们在自然语义上非常接近，都是在一个事务内用相同的条件查询两次，但两次的结果不一样。差异在于，对不可重复读来说，第二次的结果集相对第一次，有些记录被修改（Update）或删除（Delete）了；而幻读是第二次结果集里出现了第一次结果集没有的记录(Insert)。一个更加形象的说法，幻读是在第一次结果集的记录“间隙”中增加了新的记录。所以，MySQL将防止出现幻读的锁命名为间隙锁（Gap Lock）。</p><p>跟幻读相比，写倾斜要稍微复杂一点，我用一个黑白球的例子来说明。</p><p>首先，箱子里有三个白球和三个黑球，两个事务（T1,T2）并发修改，不知道对方的存在。T1要让6个球都变成白色；T2则希望6个球都变成黑色。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/fa/91e75e61d921fb21cebfdba8879806fa.jpg?wh=2700*803\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/dd/be/ddce93423da417ef495b2bbc7c3090be.jpg?wh=2700*1740\" alt=\"\"></p><p>你看，最终的执行结果是，盒子里仍然有三个黑球和三个白球。如果你还没有发现问题，可以看看下面我画的串行执行的效果图，比较一下有什么不同。</p><p><img src=\"https://static001.geekbang.org/resource/image/85/83/8502cf4cf0f6fe61db1692bd1a945883.jpg?wh=2700*1661\" alt=\"\"></p><p>如果先执行T1再执行T2，6个球都会变成黑色；调换T1与T2的顺序，则6个球都是白色。</p><p>根据可串行化的定义，“多事务并行执行所得到的结果，与串行执行（一个接一个）完全相同”。比照两张图，很容易发现事务并行执行没有达到串行的同等效果，所以这是一种异常现象。也可以说，写倾斜是一种更不易察觉的更新丢失。</p><p>好了，为了让你搞清Critique中六种隔离级别的强弱关系以及相互间的差距，我截取了原论文的一张配图。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/aa/0d81415e08f4507d5f3f3ff6f99a99aa.jpg?wh=2700*1643\" alt=\"\"></p><p>你可以看到“快照隔离”与“可重复读”在强度上并列，“已提交读”则弱于这两者。事实上，今天大多数数据库支持的隔离级别就在这三者之中。</p><h3>快照隔离 &amp; MVCC</h3><p>你可能会问，既然“快照隔离”这么重要，为什么会被SQL-92漏掉呢？</p><p>这是由于SQL-92主要考虑了基于锁（Lock-base）的并发控制，而快照隔离的实现基础则是多版本并发控制（MVCC），很可能是由于当时MVCC的应用还不普遍。当然，后来，MVCC成为一项非常重要的技术，一些经典教材会将MVCC作为一种独立的选择，与乐观并发控制和悲观并发控制并列。其实，在现代数据库中MVCC已经成为一种底层技术，用于更高效地实现乐观或悲观并发控制。有了MVCC这个基础，快照隔离就成为一个普遍存在的隔离级别了。有关MVCC的话题，我会在第11讲中继续展开。</p><h2>隔离性的产品实现</h2><p>还有一个问题也许你一直想问，为什么不支持最高级别的可串行化呢？</p><p>答案可能会让你有点沮丧，那就是在很长一段时间内，学术界都没有找到足够高效的并发控制技术。可能你熟悉的很多数据库声称提供了“可串行化”级别，但这往往只是一种形象工程，因为它们都采用的是两阶段封锁协议，导致性能无法满足生产环境的要求。不过，有些消息让人振奋，虽然不是普适的方案，但少数产品的尝试已经取得进展。</p><p>这种尝试来自两个方向。</p><p>第一个方向是，用真正的串行化实现“可串行化”隔离。我们往往认为多线程并发在性能上更优，但Redis和VoltDB确实通过串行化执行事务的方式获得了不错的性能。考虑到VoltDB作为一款分布式数据库的复杂度，其成功就更为难得了。我想，其中部分原因可能在于内存的大量使用，加速了数据计算的过程。另外，VoltDB以存储过程为逻辑载体的方式，也使得事务有了更多的优化机会。</p><p>如果说第一个方向有点剑走偏锋，那第二个方向就是硬桥硬马了。没错，还是在并发技术上继续做文章。PostgreSQL在2008年提出了Serializable Snapshot Isolation (SSI)，这实际就是可串行化。而后，兼容PostgreSQL生态的CockroachDB，也同样选择支持SSI，而且是唯一支持的隔离级别。</p><p>这两个方向的尝试都很有趣，我还会在后续的课程中与你深入探讨。</p><h2>分布式数据库的强一致性</h2><p>到这里，我们用两讲的篇幅分别介绍了数据一致性和事务一致性，它们共同构成了分布式数据库的强一致性这个概念。我借用一张图来体现三者的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/c2/c291e740e57dbedc2e20f18fd62b1ec2.jpg?wh=2700*1650\" alt=\"\"></p><p>图片原始出处是论文“Highly Available Transactions: Virtues and Limitations”，此处引用的是<a href=\"https://jepsen.io/consistency\">Jepsen网站的简化版</a>。</p><p>这幅图展现了一个树状结构，左右两个分支上体现事务一致性和数据一致性的各个级别及强弱关系，根节点则体现了分布式数据库的一致性来自两者的融合。图中使用了不同颜色，简单来说，这是区别不同的一致性级别所需付出的性能代价。</p><p>对分布式数据而言，最高级别的一致性是严格串行化（Strict Serializable），Spanner实现的“外部数据一致性”可以被视为与 “Strict Serializable” 等效。但由于两条路径上各自实现难度及性能上的损耗，少有分布式数据库在顶端汇合。即使强大的Spanner也提供了有界旧一致性（Bounded Stale），用于平衡性能和一致性之间的冲突。</p><p>下面，我总结了一些分布式数据库产品的“一致性”实现情况供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/d9/e58acbd91d1f25fa4086eb8yyc9decd9.jpg?wh=2700*1659\" alt=\"\"></p><p>比较特别的是，OceanBase在2.2版本还增加了对“可串行化”的支持，但这是一个被Oracle重新定义的“可串行化”，在这个级别OceanBase和Oracle一样都会出现写倾斜。所以，这不是我们标准的隔离级别，也就没有体现在表格中。</p><h2>小结</h2><p>好了，有关事务一致性就讨论到这里，最后让我们来回顾一下今天的重点内容。</p><ol>\n<li>数据一致性关注的是单对象、单操作在多副本上的一致性，事务一致性则是关注多对象、多操作在单副本上的一致性，分布式数据库的一致性是数据一致性与事务一致性的融合。</li>\n<li>广义上的事务一致性被细化为ACID四个方面，其中原子性的实现依赖于隔离性的并发控制技术和持久性的日志技术。</li>\n<li>隔离性是事务的核心。降低隔离级别，其实就是在正确性上做妥协，将一些异常现象交给应用系统的开发人员去解决，从而获得更好的性能。所以，除“可串行化”以外的隔离级别，都有无法处理的异常现象。</li>\n<li>研究人员将隔离级别分为六级，你需要重点关注其中四个，分别是已提交读、可重复读、快照隔离、可串行化。前三者是单体数据库或分布式数据库中普遍提供的，可串行化仅在少数产品中提供。</li>\n</ol><p>好了，到这里，加上前一节“数据一致性”，我们用了两讲阐述了分布式数据“强一致性”的含义。在严格意义上，分布式数据库的“强一致性”意味着严格串行化（Strict Serializable），目前我们熟知的产品中只有Spanner达到了这个标准，其同时也带来了性能上的巨大开销。如果我们稍稍放松标准，那么“数据一致性”达到因果一致性且“事务一致性”达到已提交读，即可认为是相对的“强一致性”。还有一点非常重要，分布式数据一致性并不是越高越好，还要与可用性、性能指标结合，否则就成了形象工程。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/ed/c57e399d116cd88e1062184fb97d3aed.jpg?wh=2700*3159\" alt=\"\"></p><h2>思考题</h2><p>课程的最后，我要留给你一道思考题。</p><p>我们在事务持久性部分提到了预写日志（WAL），它可以保证在系统发生故障时，数据也不会丢失。但是，如果写日志成功，而写数据表失败，又要如何处理呢？你可以根据自己的经验，讲讲该如何设计这个过程吗？</p><p>欢迎你在评论区留言和我一起讨论，我会在答疑篇回复这个问题。如果你身边的朋友也对事务一致性这个话题感兴趣，你也可以把今天这一讲分享给他，我们一起讨论。</p>","comments":[{"had_liked":false,"id":275915,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":true,"comment_ctime":1611717350,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"9.2233721802004009e+18","product_id":100057401,"comment_content":"这篇文档是我见到少有提到写倾斜关于隔离的文档了，（实际上大部分人对事物的了解都是面试前背一背4中隔离级别)。喜欢这篇文档的同学强烈建议看一看《数据密集型系统设计》这本书，它虽然没直接提到Critique的六种隔离级别，但是详细介绍了快照级别的隔离和写倾斜的例子。看评论，很多同学对写倾斜不太明白，我解释一下：写倾斜其实更像是业务应该考虑的事情，就是你要做一件事（修改数据A），依赖于目前已经存在其他数据B。但是你修改数据A的时候是不锁定数据B的，你修改的过程中，A被另外一个用户修改了，造成你最终目的的没达到（一致性)。常见的场景，如用户余额减扣，排班等等。<br>要规避写倾斜的措施有多种，我列举一下，其中前两种是老师提到的：<br>1.实际串行执行（典型的就是redis）<br>2.SSI（实际上是一个学生的论文得到的)，就是乐观锁的原理<br>3.基于两阶段加锁锁定读数据（简言之就是对读到的不需要修改的数据也加锁 for update）<br>4.实体化冲突（这个参考mysql45讲，林老师的方案）<br>5.业务上控制（我觉得工作中用的比较多，比如电商的余额锁定和优惠券锁定类似于TCC吧）<br><br>","like_count":34,"discussions":[{"author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373992,"discussion_content":"你的举例没太明白：假设你要改A，依赖于已经存在的数据B，但是修改A并不锁定B，你在修改的过程中A被另外一个用户修改了———你在修改A的过程中另外一个用户是怎么做到能修改A的？还是你这里有笔误","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620961798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374917,"discussion_content":"不好意思，确实存在笔误。是修改A的过程中B被其他线程改变了。就是要修改A的这个前提条件不成立了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621410854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373992,"ip_address":""},"score":374917,"extra":""}]},{"author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373994,"discussion_content":"其实文中黑白球的问题让我想起一种更新场景：假设球的排列是先3个白球后面3个黑球，事务1从头开始将6个球更新为黑色，事务2同时开始从尾部开始将6个球更新为白色，事务1将前3个球更新为黑色病导致这3行记录的位置发生变化，跑到表的尾部，则事务2从后往前扫的时候找不到更新后这3个记录，因此最后还是剩余3个白球3个黑球","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620962225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346996,"discussion_content":"自己前段时间刚好遇到这样的业务场景，我之前把这称为并发场景的更新丢失。现在了解了这叫写倾斜的问题，由于我这边业务并发不是很高，开始采用了悲观锁for update保证，读写的一个原子性，但是在业务场景，批量保证需要防止死锁发生，还需要考虑异常场景，事务长时间未提交，锁就会一直被持有。后面更改了乐观锁方式去更新，这样并发性能很差，只要有一个处理失败即会反馈给业务处理失败，在这基础上加了一个redisson锁，通过自旋方式来等待，这样并发能力一样，只是对业务响应会好一些。   至于第一种方案redis+lua脚本保证高并发的原子性。  至于实体化冲突，我也看过45讲，但是忘记了在哪，可以指点下吗？   最后一种库存锁定，预扣场景。没有真正接触过，应该有不能扣为负数的场景，还有回查和回滚方案","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612138970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347233,"discussion_content":"实体化冲突并没有什么神秘，因为有些场景的写倾斜数据库里面没有加锁的对象可以去加锁。我们需要讲需要加锁的业务逻辑实体化到数据库表中，然后去两阶段加锁。本质上与两阶段加锁没有什么本质区别，只是我们也许可以通过巧妙的设计（与业务相关）减小加锁的范围。林老师并没有直接使用实体化冲突一词，我记得是一个幻读的思考题。业务上 推荐还是tcc性能比较好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612179746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":346996,"ip_address":""},"score":347233,"extra":""},{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347234,"discussion_content":"乐观锁适合冲突几率较小的场景，如果冲突概率很大，回滚的代价可能会造成方案得不偿失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612179854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":346996,"ip_address":""},"score":347234,"extra":""}]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383741,"discussion_content":"噢，那就是 MySQL 也有写倾斜的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626228967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2115304,"avatar":"","nickname":"Kk","note":"","ucode":"4CDC63959C5A06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553516,"discussion_content":"mysql有间隙锁，不存在写偏斜的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645943565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":383741,"ip_address":""},"score":553516,"extra":""}]}]},{"had_liked":false,"id":241629,"user_name":"赵见跃","can_delete":false,"product_type":"c1","uid":1319949,"ip_address":"","ucode":"F89B0BE32C3329","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJqUkoCXOxRraVNVg1fTm4O892WFVCjeL9pS8kUX2nEeTEcaS6k0kP25h3rRKtUCwSoUrY6dvP43w/132","comment_is_top":false,"comment_ctime":1597374748,"is_pvip":false,"replies":[{"id":"89216","content":"谢谢，这个评价好高呀，写起来更有动力了，哈哈。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597409716,"ip_address":"","comment_id":241629,"utype":1}],"discussion_count":13,"race_medal":0,"score":"108971557148","product_id":100057401,"comment_content":"写的太好了！！！<br>当初就是学习了林晓斌老师《MySQL 实战 45 讲》，使我认识了极客时间，课程非常好！<br>随后又买了几个课程，可惜都没有达到林晓斌老师的高度，曾经一度对极客时间产生了怀疑，<br>还好，幸运的是今天看到了王磊的课程，感觉又有希望了。王老师的课程客观理性、深入浅出！<br>收获满满，谢谢老师。","like_count":26,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503794,"discussion_content":"谢谢，这个评价好高呀，写起来更有动力了，哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597409716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101615,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","nickname":"李鑫磊","note":"","ucode":"D06517CFCEEE00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301041,"discussion_content":"确实，丁奇的那个课，算是极客时间专栏的质量标杆了，没几门课能达到那个水准。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598369485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1698291,"avatar":"https://static001.geekbang.org/account/avatar/00/19/e9/f3/3bbdff7e.jpg","nickname":"雪候鸟","note":"","ucode":"3E7ED6605BC86E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101615,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","nickname":"李鑫磊","note":"","ucode":"D06517CFCEEE00","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359481,"discussion_content":"非常同意，当时学mysql实战45讲时，真是醍醐灌顶，有一种虽然之前用了很多年mysql，却是完全不懂的感觉，有很强烈的挫败感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616207400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301041,"ip_address":""},"score":359481,"extra":""}]},{"author":{"id":1215758,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/0e/1f49ade9.jpg","nickname":"大汉_客家族_数据工程_曾院士","note":"","ucode":"AD73C36D617CA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371455,"discussion_content":"林晓斌讲得不行一下东，一下西，混乱，零碎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619774266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2115304,"avatar":"","nickname":"Kk","note":"","ucode":"4CDC63959C5A06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298935,"discussion_content":"redis那个课程.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597483064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1001204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/46/f4/5e878cd4.jpg","nickname":"李佳","note":"","ucode":"082E7FCA4AE76D","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":2115304,"avatar":"","nickname":"Kk","note":"","ucode":"4CDC63959C5A06","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299039,"discussion_content":"这个课程也很不错啊������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597542969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298935,"ip_address":""},"score":299039,"extra":""},{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2115304,"avatar":"","nickname":"Kk","note":"","ucode":"4CDC63959C5A06","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325992,"discussion_content":"Jvm的那课程……对基础道行要求高，我看别的课程都秒懂的，或者想一下就懂，jvm那是反复看了不知其意","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605495116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298935,"ip_address":""},"score":325992,"extra":""}]},{"author":{"id":1807943,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","nickname":"出卖灵魂的教练Kerry","note":"","ucode":"8C64517DA556FE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298876,"discussion_content":"看看林晓斌的经历，他的高度应该是从事数据库人所追求的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597458273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048109,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/2d/baf50e6f.jpg","nickname":"唐唐","note":"","ucode":"EAD1565E6D79F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298826,"discussion_content":"确实每个课程质量不一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597414714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1048109,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/2d/baf50e6f.jpg","nickname":"唐唐","note":"","ucode":"EAD1565E6D79F8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299028,"discussion_content":"每个人的角度也不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597536377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298826,"ip_address":""},"score":299028,"extra":""},{"author":{"id":1048109,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/2d/baf50e6f.jpg","nickname":"唐唐","note":"","ucode":"EAD1565E6D79F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":299093,"discussion_content":"是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597561010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299028,"ip_address":""},"score":299093,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":299146,"discussion_content":"Redis 文章是不错，就是老师不怎么关注评论区的。。如果老师花些时间在评论区互动答疑，那么质量会更高，能达到 Mysql 那个课的口碑（Redis的课大家期待那么久了，希望你们能和老师沟通一下）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597577284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299028,"ip_address":""},"score":299146,"extra":""}]}]},{"had_liked":false,"id":309240,"user_name":"过","can_delete":false,"product_type":"c1","uid":1971776,"ip_address":"","ucode":"E772E179EE0179","user_header":"https://static001.geekbang.org/account/avatar/00/1e/16/40/c1d71b93.jpg","comment_is_top":false,"comment_ctime":1629997257,"is_pvip":false,"replies":[{"id":"112149","content":"这问题的角度很好，我很愿意回答。个人体会，论文来源有三个。首先是顶会，就是数据库领域的三大顶会SIGMOD、VLDB、ICD；其次，优秀的论文会引用优秀的论文，所以参考文献千万不要放过；最后，就是关注工业界成果，很多领域是工业界开坑，学术界跟上，比如Google就做了很多开坑的工作，这些经典论文值得多读，而且工业界论文阅读难度也小些。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1630301815,"ip_address":"","comment_id":309240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35989735625","product_id":100057401,"comment_content":"老师，我的观察点和大家不太一样，我想请问 比如&quot;A Critique of ANSI SQL Isolation Levels“这样的论文，在国外是发布在哪里的，以及 数据库方面相关的论文或一手资源 有哪些值得关注的信息源。（说白点就是，在信息渠道获取方面，我应该怎么让自己混得6一点）","like_count":9,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525794,"discussion_content":"这问题的角度很好，我很愿意回答。个人体会，论文来源有三个。首先是顶会，就是数据库领域的三大顶会SIGMOD、VLDB、ICD；其次，优秀的论文会引用优秀的论文，所以参考文献千万不要放过；最后，就是关注工业界成果，很多领域是工业界开坑，学术界跟上，比如Google就做了很多开坑的工作，这些经典论文值得多读，而且工业界论文阅读难度也小些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630301815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241655,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1597382845,"is_pvip":true,"replies":[{"id":"89215","content":"希望能帮大家高效得学习课程的内容：）","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597409401,"ip_address":"","comment_id":241655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27367186621","product_id":100057401,"comment_content":"老师每节课的思维导图很赞","like_count":7,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503804,"discussion_content":"希望能帮大家高效得学习课程的内容：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597409401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242386,"user_name":"张永志","can_delete":false,"product_type":"c1","uid":1208727,"ip_address":"","ucode":"E54B75EF3F63B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/97/f1a3d398.jpg","comment_is_top":false,"comment_ctime":1597709981,"is_pvip":false,"replies":[{"id":"89486","content":"说的很好，我再补充一下，在正常写入过程中WAL和内存中的数据也要保证一致，因为第一时间数据库通常是不会将数据表落盘的，内存中有数据即可对外服务。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597756192,"ip_address":"","comment_id":242386,"utype":1}],"discussion_count":8,"race_medal":0,"score":"18777579165","product_id":100057401,"comment_content":"有关MVCC我发表一下自己的认识：<br>MySQL下 RR与RC隔离级别的操作都分当前读和快照读，当前读才会加锁，快照读都是不加锁的。RR 快照读是可以消除幻读的，因为这是事务开始时的快照一致性读，而RC是语句快照一致性读。<br>有关本课的问题：<br>数据块未能及时落盘，重新启动数据库会进行实例恢复，从最后的检查点开始将redo进行前写和回滚，这样就能保证数据块与redo一致了，实例恢复后，数据库就可以对外访问了。<br>","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503997,"discussion_content":"说的很好，我再补充一下，在正常写入过程中WAL和内存中的数据也要保证一致，因为第一时间数据库通常是不会将数据表落盘的，内存中有数据即可对外服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597756192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378518,"discussion_content":"关于 MySQL 的 RR 级别下幻读问题，补充一下：\n-普通查询是快照读，不会看到别的事务新插入的数据。\n-当前读，引入了间隙锁，与行锁合称为 next-key lock，确保了无法再新插入数据。但这是有代价的，就是影响了并发度，而且有可能导致死锁。\n-如果先普通查询，然后再当前读，会有幻读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623253901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201424,"avatar":"https://static001.geekbang.org/account/avatar/00/12/55/10/123822e4.jpg","nickname":"leon","note":"","ucode":"50F1CC6EEF2D00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351297,"discussion_content":"pg的rr是标准ssi实现，是可以避免幻读的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614234733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201424,"avatar":"https://static001.geekbang.org/account/avatar/00/12/55/10/123822e4.jpg","nickname":"leon","note":"","ucode":"50F1CC6EEF2D00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351295,"discussion_content":"MySQL在RR下，还是有幻读情况的。虽然插入是看不见，但是其他事务更新了，就会看见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614234653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031970,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","nickname":"趁早","note":"","ucode":"949FB3AA250D80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300174,"discussion_content":"RR可以消除幻读么，别瞎说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597975789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1442637,"avatar":"https://static001.geekbang.org/account/avatar/00/16/03/4d/68e63502.jpg","nickname":"多多","note":"","ucode":"D555B345DCA0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1031970,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","nickname":"趁早","note":"","ucode":"949FB3AA250D80","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305415,"discussion_content":"MySQL在RR下利用next-key lock确实解决了幻读问题，达到了串行化的隔离要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599916982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300174,"ip_address":""},"score":305415,"extra":""}]},{"author":{"id":1056110,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/6e/499c6b35.jpg","nickname":"Norman","note":"","ucode":"D463382DEF40FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299649,"discussion_content":"有个疑问 “RR 快照读是可以消除幻读的”快照读并没有加 next-key lock 如何彻底的消除幻读呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597759253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1442637,"avatar":"https://static001.geekbang.org/account/avatar/00/16/03/4d/68e63502.jpg","nickname":"多多","note":"","ucode":"D555B345DCA0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1056110,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/6e/499c6b35.jpg","nickname":"Norman","note":"","ucode":"D463382DEF40FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305418,"discussion_content":"RR下的SELECT快照读，读的是事务启动那一时刻的快照，不涉及幻读问题。INSERT/UPDATE/DELETE/SELECT FOR UPDATE才是当前读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599917528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299649,"ip_address":""},"score":305418,"extra":""}]}]},{"had_liked":false,"id":241614,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597371213,"is_pvip":false,"replies":[{"id":"89475","content":"你好，WAL的意义在于它的写入时机，一定是同步写入的，WAL如果不能写成功，SQL提交一定是失败的。同时，与WAL相关的，数据库也要处理内存中的数据与WAL协同的问题，因为多数的数据库都是第一时间写入内存结构的，而后再根据不同策略落盘。关于分布式事务的实现机制，后面还有好几讲，你也可以关注下。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597744132,"ip_address":"","comment_id":241614,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14482273101","product_id":100057401,"comment_content":"首先回答问题，其实对此方面了解不多，强答一下：其实预写日志在我看来就是redo日志，如果redo日志已经成功证明已经落盘，此时数据可以根据redo日志异步的刷回磁盘，写数据表失败应该就是后面异步写回出现问题，我们只需要重演redo日志就可以了。当然这只是最简单的过程，细节还是看其他留言和老师的解答啦<br><br>其实我感觉这一章中既然是说分布式数据库的事务，我觉得也应该说说分布式事务，毕竟我们定义了数据库是分片的，如果事务涉及到多个机器就得上分布式事务了呀。<br><br>还有确实很巧，以前我写过一篇关于事务的博客，里面有几个例子都非常直观，理解起几个文中的概念也更简单些：https:&#47;&#47;blog.csdn.net&#47;weixin_43705457&#47;article&#47;details&#47;105443927","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503790,"discussion_content":"你好，WAL的意义在于它的写入时机，一定是同步写入的，WAL如果不能写成功，SQL提交一定是失败的。同时，与WAL相关的，数据库也要处理内存中的数据与WAL协同的问题，因为多数的数据库都是第一时间写入内存结构的，而后再根据不同策略落盘。关于分布式事务的实现机制，后面还有好几讲，你也可以关注下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597744132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345391,"discussion_content":"确实强答了，兄弟。redo日志只是WAL的一种实践。WAL只是缓存模式WriteBack（PageCache和BufferPool都采用这种模式）防止数据丢失的措施。你说的刷盘行为，WriteBack这种缓存模式更新时只写缓存，数据不落盘（注意是数据不是日志）造成的数据库数据和缓存数据不一致，更新数据的行为。像鑫磊同学说的，WAL(redo log)不够存了，不能保证接下来的数据不丢失的时候，MySQL这个时候的策略是刷盘，这样可以释放WAL，数据的持久化由redolog文件转移到数据库文件（B+Tree)中。你了解一些基本的概念，但是这些概念的关系没有理清楚。建议还是多读几遍MySQL45讲呢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611716386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101615,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","nickname":"李鑫磊","note":"","ucode":"D06517CFCEEE00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301038,"discussion_content":"既然说到 redo log 了，那我的理解就是在说 MySQL 了；如果是替换脏页，刷盘的动作是直接从内存刷到磁盘的，这个过程和 redo log 没有关系，正是由于 redo log 的存在，才让内存中可以有脏页；如果是 redo log 写满了，需要擦除，那么擦除的时候，会检查要擦除的内容对应在内存中的数据页是不是脏页：如果不是，直接擦除；如果是，先把内存的脏页刷到磁盘，再擦除；总之刷盘的动作是发生在内存和磁盘中的数据文件之间的动作，和 redo log 没关系，刷不刷的依据也只有内存中的数据页是不是脏页。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598369286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351004,"discussion_content":"什么时机wal落盘等都是可以配置的, 当然配置同时决定了数据库所能提供的ACID强弱, 根据业务来定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614093760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266333,"user_name":"纸君","can_delete":false,"product_type":"c1","uid":1615195,"ip_address":"","ucode":"E3791414E0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/5b/e1ffd5e4.jpg","comment_is_top":false,"comment_ctime":1607304263,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10197238855","product_id":100057401,"comment_content":"参考mysql设计:  redo log成功后，假如未完成落盘，则下次启动时检测并重新落盘。   落盘是按照数据库逻辑页大小落盘的，且redo log是页增量日志，这里可能有两种情况:  <br>1. 逻辑页和数据页大小相等， 则从未入库部分开始继续入库。  <br><br>2.当逻辑页 与 磁盘数据页大小不相等时， 查看double write 在磁盘的内容确定是否出现了页断裂，修复页断裂部分后，走1逻辑","like_count":2},{"had_liked":false,"id":250492,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1601102696,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10191037288","product_id":100057401,"comment_content":"老师，你好，这个写倾斜还是不太明白。","like_count":2},{"had_liked":false,"id":241687,"user_name":"distdev","can_delete":false,"product_type":"c1","uid":1302798,"ip_address":"","ucode":"22AA05788627C6","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/0e/9ce05946.jpg","comment_is_top":false,"comment_ctime":1597390475,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10187325067","product_id":100057401,"comment_content":"关于幻读， 一直不明白实际工程中幻读在哪种情况下会有问题？似乎绝大多数情况一个事务看见其他的事务的创建或者删除记录都不是问题。老师能否给举个例子？","like_count":2,"discussions":[{"author":{"id":1442637,"avatar":"https://static001.geekbang.org/account/avatar/00/16/03/4d/68e63502.jpg","nickname":"多多","note":"","ucode":"D555B345DCA0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305420,"discussion_content":"看到其它事务新增的记录才叫幻读，看到其它事务的修改叫做不可重复读，是两个概念吧。实际工程中比如我要在晚上零点时刻进行对账核算，核算过程需要花十分钟才能完成，那如果一直有业务，账目一直在变动，那不是有问题了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1599918127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1743868,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9b/fc/a3abbe53.jpg","nickname":"白杨","note":"","ucode":"B56DD94706F80B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1442637,"avatar":"https://static001.geekbang.org/account/avatar/00/16/03/4d/68e63502.jpg","nickname":"多多","note":"","ucode":"D555B345DCA0A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353646,"discussion_content":"对账的例子好评","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615184164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305420,"ip_address":""},"score":353646,"extra":""}]},{"author":{"id":1215758,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/0e/1f49ade9.jpg","nickname":"大汉_客家族_数据工程_曾院士","note":"","ucode":"AD73C36D617CA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371466,"discussion_content":"中文翻译不好！\n1 读未提交数据\n2 读己提交数据\n3 重复读一致性\n4  串读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619776995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284394,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1616225334,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5911192630","product_id":100057401,"comment_content":"在没有MVCC的情况下，使用读写锁+范围锁是否也可以解决幻读问题。","like_count":1,"discussions":[{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413159,"discussion_content":"但是影响性能，快照读可以提高并发，相比性能解决还是选择了快照度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636387456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1920213,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4c/d5/d30c941c.jpg","nickname":"zhukovasky","note":"","ucode":"B79625AB0C6CF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373055,"discussion_content":"理论上是可以的。两种方式，一种是基于锁，还有一种基于mvcc，只不过mvcc出现的比例高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620586363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282489,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1615276870,"is_pvip":false,"replies":[{"id":"102569","content":"是的，同时有数据一致性和事务一致性上的要求","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1615292185,"ip_address":"","comment_id":282489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5910244166","product_id":100057401,"comment_content":"&quot; 数据一致性关注的是单对象、单操作在多副本上的一致性，事务一致性则是关注多对象、多操作在单副本上的一致性，分布式数据库的一致性是数据一致性与事务一致性的融合。&quot; <br>老师，分布式数据肯定也要支持分布式事务，那分布式事务是多对象、多操作在多副本上的实现吗？有点混了。","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516760,"discussion_content":"是的，同时有数据一致性和事务一致性上的要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615292185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247207,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1599633851,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5894601147","product_id":100057401,"comment_content":"老师，你在文中说ANSI SQL 92没有考虑快照隔离的原因是MVCC技术的不广泛？为什么MVCC使用不广泛就不能考虑SI呢？这之间的推导关系能再阐述一下吗？<br><br>另外答个题：<br>一般事务操作流程是WAL+内存写。WAL是持久化的，也就是说硬件无故障的话上不会丢失。如果在内存写的时候崩溃了，那么数据库重启的时候就要检查日志，如果日志表明已提交，而真正的数据还没有写完，则要重放。需要一套机制来判断日志中的事务是否已提交等等。","like_count":1,"discussions":[{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351008,"discussion_content":"应该说是mvcc是的实现si变得更容易而已吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614094406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243229,"user_name":"佳佳的爸","can_delete":false,"product_type":"c1","uid":1082338,"ip_address":"","ucode":"9D4FE7C3552087","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/e2/297518ab.jpg","comment_is_top":false,"comment_ctime":1597997959,"is_pvip":false,"replies":[{"id":"89752","content":"是的，传统方案是使用锁（S2PL）来解决，但性能较差。还有其他的悲观协议，比如串行化图检测（SGT），我在14讲会做介绍。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598225979,"ip_address":"","comment_id":243229,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892965255","product_id":100057401,"comment_content":"解决写倾斜主要就是加上写锁，但是这样会严重影响并发性能。","like_count":2,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504230,"discussion_content":"是的，传统方案是使用锁（S2PL）来解决，但性能较差。还有其他的悲观协议，比如串行化图检测（SGT），我在14讲会做介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598225979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242052,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1597577433,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5892544729","product_id":100057401,"comment_content":"对于文章那个写倾斜的图不是很理解，老师可以解释下执行过程吗？ 方便更好的理解","like_count":1,"discussions":[{"author":{"id":1082338,"avatar":"https://static001.geekbang.org/account/avatar/00/10/83/e2/297518ab.jpg","nickname":"佳佳的爸","note":"","ucode":"9D4FE7C3552087","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300245,"discussion_content":"你找个数据库，比如Oracle，事务隔离级别设成串行化，开两个session，每个session分别做查询和更新操作，注意 select语句执行时不要加行锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597998472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241851,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597467236,"is_pvip":false,"replies":[{"id":"89471","content":"另一个问题中也讲了，MVCC是底层技术。Gap Lock只是MySQL的实现技术，也不是SI的唯一实现方式。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597739938,"ip_address":"","comment_id":241851,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892434532","product_id":100057401,"comment_content":"我之前的发言有些误解，我再阐述一下：<br>SI隔离级别是MVCC，实际上RR也可以用MVCC，不过之前没有这种技术，都用的是2PL。SI主要通过Gap lock来解决RR的幻读？因为光一个MVCC是解决不了幻读的。","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503857,"discussion_content":"另一个问题中也讲了，MVCC是底层技术。Gap Lock只是MySQL的实现技术，也不是SI的唯一实现方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597739938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241848,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597466027,"is_pvip":false,"replies":[{"id":"89470","content":"你好，不是说MVCC可以解决幻读。MVCC是的底层技术，在这个基础上更容易实现快照隔离，而快照隔离是要解决幻读现象的，否则就不是标准的快照隔离级别。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597739747,"ip_address":"","comment_id":241848,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5892433323","product_id":100057401,"comment_content":"有点问题：<br>快照隔离相当于是比可重复读解决了幻读的问题，文章中说是MVCC的功能特性，但是MVCC并不能解决幻读呀，真正解决幻读的是Gap Lock（Mysql）？<br><br>而且可重复读也可以使用MVCC来实现吧？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503856,"discussion_content":"你好，不是说MVCC可以解决幻读。MVCC是的底层技术，在这个基础上更容易实现快照隔离，而快照隔离是要解决幻读现象的，否则就不是标准的快照隔离级别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597739747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298958,"discussion_content":"https://blog.csdn.net/weixin_43705457/article/details/104849943?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159749080019195265944703%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=159749080019195265944703&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-104849943.pc_v1_rank_blog_v1&amp;utm_term=%E5%B9%BB%E8%AF%BB&amp;spm=1018.2118.3001.4187","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597490824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241686,"user_name":"distdev","can_delete":false,"product_type":"c1","uid":1302798,"ip_address":"","ucode":"22AA05788627C6","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/0e/9ce05946.jpg","comment_is_top":false,"comment_ctime":1597390271,"is_pvip":false,"replies":[{"id":"89311","content":"redo log是接到客户端请求后立即落盘的，它的同步方式包括，异步复制，半同步复制和全复制，一般如果对RPO有要求选择半同步复制会多些。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597562267,"ip_address":"","comment_id":241686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892357567","product_id":100057401,"comment_content":"关于redo log有一个问题， 就是何时同步到磁盘？完全同步太慢，如果成批处理又有可能丢数据， 老师能否谈谈经验？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503815,"discussion_content":"redo log是接到客户端请求后立即落盘的，它的同步方式包括，异步复制，半同步复制和全复制，一般如果对RPO有要求选择半同步复制会多些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597562267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353160,"user_name":"槑·先生","can_delete":false,"product_type":"c1","uid":1445744,"ip_address":"北京","ucode":"897F0475592E3A","user_header":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","comment_is_top":false,"comment_ctime":1659198804,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659198804","product_id":100057401,"comment_content":"老师讲的很清晰，不考虑再出一个课程吗？","like_count":0},{"had_liked":false,"id":303088,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1626582520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626582520","product_id":100057401,"comment_content":"赞一个，跟《数据密集型应用系统设计》上说的对上了","like_count":0},{"had_liked":false,"id":296155,"user_name":"早睡早起","can_delete":false,"product_type":"c1","uid":1654976,"ip_address":"","ucode":"A2120D7984FDF0","user_header":"https://static001.geekbang.org/account/avatar/00/19/40/c0/18066d53.jpg","comment_is_top":false,"comment_ctime":1622778985,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622778985","product_id":100057401,"comment_content":"老师您好，请教个问题，Strict Serializable解决了SSI哪些未能解决的问题呢？","like_count":0},{"had_liked":false,"id":290754,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1619741293,"is_pvip":false,"replies":[{"id":"105492","content":"嗯，可以这么理解","user_name":"作者回复","comment_id":290754,"uid":"1602401","ip_address":"","utype":1,"ctime":1620135336,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"1619741293","product_id":100057401,"comment_content":"老师，单对象，单操作和多对象，多操作是指在一个事物内，对多个表或者库（单个表单个库）进行的dml或者ddl这样理解吗","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519281,"discussion_content":"嗯，可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620135336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283022,"user_name":"我要打十个","can_delete":false,"product_type":"c1","uid":2409212,"ip_address":"","ucode":"343CEC59AE70E3","user_header":"https://static001.geekbang.org/account/avatar/00/24/c2/fc/1bae4cdc.jpg","comment_is_top":false,"comment_ctime":1615521402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615521402","product_id":100057401,"comment_content":"单对象，多对象，单操作，多操作，单副本，多副本这些概念能否具体介绍下，感觉有点混乱😂","like_count":0},{"had_liked":false,"id":277184,"user_name":"漂泊的小飘","can_delete":false,"product_type":"c1","uid":1222578,"ip_address":"","ucode":"25C0CA4887D8AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/a7/b2/274a4192.jpg","comment_is_top":false,"comment_ctime":1612312575,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1612312575","product_id":100057401,"comment_content":"我记得之前看Mysql的课 ，里面介绍可重复读的实现就是靠的快照。这个和快照隔离的快照有什么区别吗？","like_count":0,"discussions":[{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351006,"discussion_content":"快照(mvcc)是手段, 通过mvcc可以实现快照隔离级别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614094107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1222578,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a7/b2/274a4192.jpg","nickname":"漂泊的小飘","note":"","ucode":"25C0CA4887D8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351471,"discussion_content":"谢谢(*°∀°)=3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614301536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351006,"ip_address":""},"score":351471,"extra":""}]}]},{"had_liked":false,"id":255435,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1603342379,"is_pvip":false,"replies":[{"id":"93154","content":"后面的部分会有专门的学习资料链接，我和编辑同学商量下，把前面几讲也补一补。","user_name":"作者回复","comment_id":255435,"uid":"1602401","ip_address":"","utype":1,"ctime":1603414512,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"1603342379","product_id":100057401,"comment_content":"真的是好的课程，谢谢老师了，希望在文章后面增加一些理论的引用链接。","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507713,"discussion_content":"后面的部分会有专门的学习资料链接，我和编辑同学商量下，把前面几讲也补一补。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603414512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247817,"user_name":"胡须老爹","can_delete":false,"product_type":"c1","uid":1302429,"ip_address":"","ucode":"5D1580A5D0C841","user_header":"https://static001.geekbang.org/account/avatar/00/13/df/9d/0d334026.jpg","comment_is_top":false,"comment_ctime":1599876471,"is_pvip":false,"replies":[{"id":"91267","content":"谢谢你的认可:)","user_name":"作者回复","comment_id":247817,"uid":"1602401","ip_address":"","utype":1,"ctime":1600176893,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"1599876471","product_id":100057401,"comment_content":"这课程太好了，非常清晰的脉络，看得停不下来。","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505505,"discussion_content":"谢谢你的认可:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600176893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242937,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1597898757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597898757","product_id":100057401,"comment_content":"我想，日志落盘后即可根据日志进行数据表的重写，因此只要日志在，那么数据表可以根据最近的checkpoint进行恢复","like_count":0},{"had_liked":false,"id":241876,"user_name":"nemo","can_delete":false,"product_type":"c1","uid":1148570,"ip_address":"","ucode":"5E6926A3404A6F","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/9a/4231fb93.jpg","comment_is_top":false,"comment_ctime":1597482762,"is_pvip":false,"replies":[{"id":"89309","content":"你好，抱歉，我对citus确实没什么研究，这似乎是一种数据库中间件...... ","user_name":"作者回复","comment_id":241876,"uid":"1602401","ip_address":"","utype":1,"ctime":1597561830,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"1597482762","product_id":100057401,"comment_content":"老师，citus可以加入讲讲么","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503865,"discussion_content":"你好，抱歉，我对citus确实没什么研究，这似乎是一种数据库中间件...... ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597561830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}