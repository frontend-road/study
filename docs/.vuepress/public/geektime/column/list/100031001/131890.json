{"id":131890,"title":"30 | 为什么需要做状态管理，怎么做？","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我与你分享了如何在原生混编Flutter工程中管理混合导航栈，应对跨渲染引擎的页面跳转，即解决原生页面如何切换到Flutter页面，以及Flutter页面如何切换到原生页面的问题。</p><p>如果说跨渲染引擎页面切换的关键在于，如何确保页面跳转的渲染体验一致性，那么跨组件（页面）之间保持数据共享的关键就在于，如何清晰地维护组件共用的数据状态了。在第20篇文章“<a href=\"https://time.geekbang.org/column/article/116382\">关于跨组件传递数据，你只需要记住这三招</a>”中，我已经与你介绍了InheritedWidget、Notification和EventBus这3种数据传递机制，通过它们可以实现组件间的单向数据传递。</p><p>如果我们的应用足够简单，数据流动的方向和顺序是清晰的，我们只需要将数据映射成视图就可以了。作为声明式的框架，Flutter可以自动处理数据到渲染的全过程，通常并不需要状态管理。</p><p>但，随着产品需求迭代节奏加快，项目逐渐变得庞大时，我们往往就需要管理不同组件、不同页面之间共享的数据关系。当需要共享的数据关系达到几十上百个的时候，我们就很难保持清晰的数据流动方向和顺序了，导致应用内各种数据传递嵌套和回调满天飞。在这个时候，我们迫切需要一个解决方案，来帮助我们理清楚这些共享数据的关系，于是状态管理框架便应运而生。</p><!-- [[[read_end]]] --><p>Flutter在设计声明式UI上借鉴了不少React的设计思想，因此涌现了诸如flutter_redux、flutter_mobx 、fish_redux等基于前端设计理念的状态管理框架。但这些框架大都比较复杂，且需要对框架设计概念有一定理解，学习门槛相对较高。</p><p>而源自Flutter官方的状态管理框架Provider则相对简单得多，不仅容易理解，而且框架的入侵性小，还可以方便地组合和控制UI刷新粒度。因此，在Google I/O 2019大会一经面世，Provider就成为了官方推荐的状态管理方式之一。</p><p>那么今天，我们就来聊聊Provider到底怎么用吧。</p><h2>Provider</h2><p>从名字就可以看出，Provider是一个用来提供数据的框架。它是InheritedWidget的语法糖，提供了依赖注入的功能，允许在Widget树中更加灵活地处理和传递数据。</p><p>那么，什么是依赖注入呢？通俗地说，依赖注入是一种可以让我们在需要时提取到所需资源的机制，即：预先将某种“资源”放到程序中某个我们都可以访问的位置，当需要使用这种“资源”时，直接去这个位置拿即可，而无需关心“资源”是谁放进去的。</p><p>所以，为了使用Provider，我们需要解决以下3个问题：</p><ul>\n<li>资源（即数据状态）如何封装？</li>\n<li>资源放在哪儿，才都能访问得到？</li>\n<li>具体使用时，如何取出资源？</li>\n</ul><p>接下来，我通过一个例子来与你演示如何使用Provider。</p><p>在下面的示例中，我们有两个独立的页面FirstPage和SecondPage，它们会共享计数器的状态：其中FirstPage负责读，SecondPage负责读和写。</p><p>在使用Provider之前，我们<strong>首先需要在pubspec.yaml文件中添加Provider的依赖</strong>：</p><pre><code>dependencies:\n  flutter:\n    sdk: flutter\n  provider: 3.0.0+1  #provider依赖\n</code></pre><p>添加好Provider的依赖后，我们就可以进行数据状态的封装了。这里，我们只有一个状态需要共享，即count。由于第二个页面还需要修改状态，因此我们还需要在数据状态的封装上包含更改数据的方法：</p><pre><code>//定义需要共享的数据模型，通过混入ChangeNotifier管理听众\nclass CounterModel with ChangeNotifier {\n  int _count = 0;\n  //读方法\n  int get counter =&gt; _count; \n  //写方法\n  void increment() {\n    _count++;\n    notifyListeners();//通知听众刷新\n  }\n}\n</code></pre><p>可以看到，我们在资源封装类中使用mixin混入了ChangeNotifier。这个类能够帮助我们管理所有依赖资源封装类的听众。当资源封装类调用notifyListeners时，它会通知所有听众进行刷新。</p><p><strong>资源已经封装完毕，接下来我们就需要考虑把它放到哪儿了。</strong></p><p>因为Provider实际上是InheritedWidget的语法糖，所以通过Provider传递的数据从数据流动方向来看，是由父到子（或者反过来）。这时我们就明白了，原来需要把资源放到FirstPage和SecondPage的父Widget，也就是应用程序的实例MyApp中（当然，把资源放到更高的层级也是可以的，比如放到main函数中）：</p><pre><code>class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n     //通过Provider组件封装数据资源\n    return ChangeNotifierProvider.value(\n        value: CounterModel(),//需要共享的数据资源\n        child: MaterialApp(\n          home: FirstPage(),\n        )\n    );\n  }\n}\n</code></pre><p>可以看到，既然Provider是InheritedWidget的语法糖，因此它也是一个Widget。所以，我们直接在MaterialApp的外层使用Provider进行包装，就可以把数据资源依赖注入到应用中。</p><p>这里需要注意的是，由于封装的数据资源不仅需要为子Widget提供读的能力，还要提供写的能力，因此我们需要使用Provider的升级版ChangeNotifierProvider。而如果只需要为子Widget提供读能力，直接使用Provider即可。</p><p><strong>最后，在注入数据资源完成之后，我们就可以在FirstPage和SecondPage这两个子Widget完成数据的读写操作了。</strong></p><p>关于读数据，与InheritedWidget一样，我们可以通过Provider.of方法来获取资源数据。而如果我们想写数据，则需要通过获取到的资源数据，调用其暴露的更新数据方法（本例中对应的是increment），代码如下所示：</p><pre><code>//第一个页面，负责读数据\nclass FirstPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //取出资源\n    final _counter = Provider.of&lt;CounterModel&gt;(context);\n    return Scaffold(\n      //展示资源中的数据\n      body: Text('Counter: ${_counter.counter}'),\n      //跳转到SecondPage\n      floatingActionButton: FloatingActionButton(\n        onPressed: () =&gt; Navigator.of(context).push(MaterialPageRoute(builder: (context) =&gt; SecondPage()))\n      ));\n  }\n}\n\n//第二个页面，负责读写数据\nclass SecondPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //取出资源\n    final _counter = Provider.of&lt;CounterModel&gt;(context);\n    return Scaffold(\n      //展示资源中的数据\n      body: Text('Counter: ${_counter.counter}'),\n      //用资源更新方法来设置按钮点击回调\n      floatingActionButton:FloatingActionButton(\n          onPressed: _counter.increment,\n          child: Icon(Icons.add),\n     ));\n  }\n}\n</code></pre><p>运行代码，试着多点击几次第二个界面的“+”按钮，关闭第二个界面，可以看到第一个界面也同步到了按钮的点击数。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/45/8e13ca8e62920a403b00122136a46245.gif?wh=716*1192\" alt=\"\"></p><center><span class=\"reference\">图1 Provider使用示例</span></center><h2>Consumer</h2><p>通过上面的示例可以看到，使用Provider.of获取资源，可以得到资源暴露的数据的读写接口，在实现数据的共享和同步上还是比较简单的。但是，<strong>滥用Provider.of方法也有副作用，那就是当数据更新时，页面中其他的子Widget也会跟着一起刷新。</strong></p><p>为验证这一点，我们以第二个界面右下角FloatingActionButton中的子Widget “+”Icon为例做个测试。</p><p>首先，为了打印出Icon控件每一次刷新的情况，我们需要自定义一个控件TestIcon，并在其build方法中返回Icon实例的同时，打印一句话：</p><pre><code>//用于打印build方法执行情况的自定义控件\nclass TestIcon extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    print(&quot;TestIcon build&quot;);\n    return Icon(Icons.add);//返回Icon实例\n  }\n}\n</code></pre><p>然后，我们用TestIcon控件，替换掉SecondPage中FloatingActionButton的Icon子Widget：</p><pre><code>class SecondPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //取出共享的数据资源\n    final _counter = Provider.of&lt;CounterModel&gt;(context);\n    return Scaffold(\n     ...\n      floatingActionButton:FloatingActionButton(\n          onPressed: _counter.increment,\n          child: TestIcon(),//替换掉原有的Icon(Icons.add)\n     ));\n  }\n</code></pre><p>运行这段实例，然后在第二个页面多次点击“+”按钮，观察控制台输出：</p><pre><code>I/flutter (21595): TestIcon build\nI/flutter (21595): TestIcon build\nI/flutter (21595): TestIcon build\nI/flutter (21595): TestIcon build\nI/flutter (21595): TestIcon build\n</code></pre><p>可以看到，TestIcon控件本来是一个不需要刷新的StatelessWidget，但却因为其父Widget FloatingActionButton所依赖的数据资源counter发生了变化，导致它也要跟着刷新。</p><p>那么，<strong>有没有办法能够在数据资源发生变化时，只刷新对资源存在依赖关系的Widget，而其他Widget保持不变呢？</strong></p><p>答案当然是可以的。</p><p>在本次分享一开始时，我曾说Provider可以精确地控制UI刷新粒度，而这一切是基于Consumer实现的。Consumer使用了Builder模式创建UI，收到更新通知就会通过builder重新构建Widget。</p><p>接下来，我们就看看<strong>如何使用Consumer来改造SecondPage</strong>吧。</p><p>在下面的例子中，我们在SecondPage中去掉了Provider.of方法来获取counter的语句，在其真正需要这个数据资源的两个子Widget，即Text和FloatingActionButton中，使用Consumer来对它们进行了一层包装：</p><pre><code>class SecondPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      //使用Consumer来封装counter的读取\n      body: Consumer&lt;CounterModel&gt;(\n        //builder函数可以直接获取到counter参数\n        builder: (context, CounterModel counter, _) =&gt; Text('Value: ${counter.counter}')),\n      //使用Consumer来封装increment的读取 \n      floatingActionButton: Consumer&lt;CounterModel&gt;(\n        //builder函数可以直接获取到increment参数\n        builder: (context, CounterModel counter, child) =&gt; FloatingActionButton(\n          onPressed: counter.increment,\n          child: child,\n        ),\n        child: TestIcon(),\n      ),\n    );\n  }\n}\n</code></pre><p>可以看到，Consumer中的builder实际上就是真正刷新UI的函数，它接收3个参数，即context、model和child。其中：context是Widget的build方法传进来的BuildContext，model是我们需要的数据资源，而child则用来构建那些与数据资源无关的部分。在数据资源发生变更时，builder会多次执行，但child不会重建。</p><p>运行这段代码，可以发现，不管我们点击了多少次“+”按钮，TestIcon控件始终没有发生销毁重建。</p><h2>多状态的资源封装</h2><p>通过上面的例子，我们学习了Provider是如何共享一个数据状态的。那么，如果有多个数据状态需要共享，我们又该如何处理呢？</p><p>其实也不难。接下来，我就<strong>按照封装、注入和读写这3个步骤，与你介绍多个数据状态的共享</strong>。</p><p>在处理多个数据状态共享之前，我们需要先扩展一下上面计数器状态共享的例子，让两个页面之间展示计数器数据的Text能够共享App传递的字体大小。</p><p><strong>首先，我们来看看如何封装</strong>。</p><p>多个数据状态与单个数据的封装并无不同，如果需要支持数据的读写，我们需要一个接一个地为每一个数据状态都封装一个单独的资源封装类；而如果数据是只读的，则可以直接传入原始的数据对象，从而省去资源封装的过程。</p><p><strong>接下来，我们再看看如何实现注入。</strong></p><p>在单状态的案例中，我们通过Provider的升级版ChangeNotifierProvider实现了可读写资源的注入，而如果我们想注入多个资源，则可以使用Provider的另一个升级版MultiProvider，来实现多个Provider的组合注入。</p><p>在下面的例子中，我们通过MultiProvider往App实例内注入了double和CounterModel这两个资源Provider：</p><pre><code>class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(providers: [\n      Provider.value(value: 30.0),//注入字体大小\n      ChangeNotifierProvider.value(value: CounterModel())//注入计数器实例\n    ],\n    child: MaterialApp(\n      home: FirstPage(),\n    ));\n  }\n}\n</code></pre><p>在完成了多个资源的注入后，最后我们来看看<strong>如何获取这些资源</strong>。</p><p>这里，我们还是使用Provider.of方式来获取资源。相较于单状态资源的获取来说，获取多个资源时，我们只需要依次读取每一个资源即可：</p><pre><code>final _counter = Provider.of&lt;CounterModel&gt;(context);//获取计时器实例\nfinal textSize = Provider.of&lt;double&gt;(context);//获取字体大小\n</code></pre><p>而如果以Consumer的方式来获取资源的话，我们只要使用Consumer2&lt;A,B&gt;对象（这个对象提供了读取两个数据资源的能力），就可以一次性地获取字体大小与计数器实例这两个数据资源：</p><pre><code>//使用Consumer2获取两个数据资源\nConsumer2&lt;CounterModel,double&gt;(\n  //builder函数以参数的形式提供了数据资源\n  builder: (context, CounterModel counter, double textSize, _) =&gt; Text(\n      'Value: ${counter.counter}', \n      style: TextStyle(fontSize: textSize))\n)\n</code></pre><p>可以看到，Consumer2与Consumer的使用方式基本一致，只不过是在builder方法中多了一个数据资源参数。事实上，如果你希望在子Widget中共享更多的数据，我们最多可以使用到Consumer6，即共享6个数据资源。</p><h2>总结</h2><p>好了，今天的分享就到这里，我们总结一下今天的主要内容吧。</p><p>我与你介绍了在Flutter中通过Provider进行状态管理的方法，Provider以InheritedWidget语法糖的方式，通过数据资源封装、数据注入和数据读写这3个步骤，为我们实现了跨组件（跨页面）之间的数据共享。</p><p>我们既可以用Provider来实现静态的数据读传递，也可以使用ChangeNotifierProvider来实现动态的数据读写传递，还可以通过MultiProvider来实现多个数据资源的共享。</p><p>在具体使用数据时，Provider.of和Consumer都可以实现数据的读取，并且Consumer还可以控制UI刷新的粒度，避免与数据无关的组件的无谓刷新。</p><p>可以看到，通过Provider来实现数据传递，无论在单个页面内还是在整个App之间，我们都可以很方便地实现状态管理，搞定那些通过StatefulWidget无法实现的场景，进而开发出简单、层次清晰、可扩展性高的应用。事实上，当我们使用Provider后，我们就再也不需要使用StatefulWidget了。</p><p>我把今天分享所涉及到的知识点打包到了<a href=\"https://github.com/cyndibaby905/30_provider_demo\">GitHub</a>中，你可以下载下来，反复运行几次，加深理解与记忆。</p><h2>思考题</h2><p>最后，我给你留一道思考题吧。</p><p>使用Provider可以实现2个同样类型的对象共享，你知道应该如何实现吗？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":131106,"user_name":"小石头若海","can_delete":false,"product_type":"c1","uid":1558747,"ip_address":"","ucode":"7D5CD03A7879D4","user_header":"https://static001.geekbang.org/account/avatar/00/17/c8/db/44a3b5c3.jpg","comment_is_top":false,"comment_ctime":1567644559,"is_pvip":false,"replies":[{"id":"49541","content":"哈，这是个夸张的语法，形容provider的强大：）实际上StatefulWidget的用途不仅是通过数据变更驱动UI更新，还涉及到状态流转的各个生命周期，这些provider是搞不定的。技术领域没有银弹，还是得看具体场景","user_name":"作者回复","comment_id":131106,"uid":"1088582","ip_address":"","utype":1,"ctime":1567684300,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"23042481039","product_id":100031001,"comment_content":"老师说的“事实上，当我们使用Provider后，我们就再也不需要使StatefulWidget了”这句不太合理吧。。。😂<br><br>这是不是会导致Provider的滥用，还是应该把一些共享的数据放在Provider中，其他的交给组件自治更好","like_count":6,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466288,"discussion_content":"哈，这是个夸张的语法，形容provider的强大：）实际上StatefulWidget的用途不仅是通过数据变更驱动UI更新，还涉及到状态流转的各个生命周期，这些provider是搞不定的。技术领域没有银弹，还是得看具体场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567684300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155013,"user_name":"Carlo","can_delete":false,"product_type":"c1","uid":1001557,"ip_address":"","ucode":"7C3FF23B597506","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/55/48de9a24.jpg","comment_is_top":false,"comment_ctime":1574619808,"is_pvip":false,"replies":[{"id":"59836","content":"以单例模式共享数据，本质上和全局变量共享数据类似，全局可见，读写效率高，适合代码量少、功能也少、相对比较简单的程序。<br>对于代码量大、功能又多、逻辑又复杂的工程来说，就不建议用单例&#47;全局变量了。主要有以下几个原因：<br>1.代码对单例产生耦合依赖，破坏了代码的封装性&#47;独立性<br>2.变量的读写处于无序状态，每个模块都可以去读写数据，对系统维护及调试非常不利<br>3.变量常驻内存，无法释放","user_name":"作者回复","comment_id":155013,"uid":"1088582","ip_address":"","utype":1,"ctime":1574759795,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"18754488992","product_id":100031001,"comment_content":"老师，我们在生产环境的项目比较大，我们通过建造一个DependencyProvider <br>class DependencyProvider {<br>  DependencyProvider._();<br><br>  static DependencyProvider _sharedInstance;<br>  static DependencyProvider get sharedInstance {<br>    return _sharedInstance;<br>  }<br>  UserService get userService =&gt; UserService.sharedInstance(persistenceService);<br>}<br><br>然后通过在页面中注入页面所需的Service来共享数据<br>DependencyProvider.sharedInstance.userService<br><br>感觉也比较清晰，不知道您怎么评价这种机制？<br>跟Provider相比的优劣势是什么呢？<br><br>谢谢您的回复！","like_count":5,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475637,"discussion_content":"以单例模式共享数据，本质上和全局变量共享数据类似，全局可见，读写效率高，适合代码量少、功能也少、相对比较简单的程序。\n对于代码量大、功能又多、逻辑又复杂的工程来说，就不建议用单例/全局变量了。主要有以下几个原因：\n1.代码对单例产生耦合依赖，破坏了代码的封装性/独立性\n2.变量的读写处于无序状态，每个模块都可以去读写数据，对系统维护及调试非常不利\n3.变量常驻内存，无法释放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574759795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141777,"user_name":"🌝","can_delete":false,"product_type":"c1","uid":1449696,"ip_address":"","ucode":"7A92D6136DBF21","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/e0/238fda97.jpg","comment_is_top":false,"comment_ctime":1571223254,"is_pvip":false,"replies":[{"id":"54832","content":"需要释放封装对象资源的时候，比如在用文件做持久化的场景。","user_name":"作者回复","comment_id":141777,"uid":"1088582","ip_address":"","utype":1,"ctime":1571290276,"user_name_real":"土豆盒子"}],"discussion_count":3,"race_medal":0,"score":"10161157846","product_id":100031001,"comment_content":"老师， ChangeNotifier中有dispose方法， 这个方法又应该在是情况下才使用的到？","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470883,"discussion_content":"需要释放封装对象资源的时候，比如在用文件做持久化的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571290276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309625,"discussion_content":"ChangeNotifier dispose会被调用到的 应该是ChangeNotifier这个Widget被dispose, 之前没考虑到ChangeNotifier也是个Widget","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601367964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309596,"discussion_content":"老师，那什么情况下ChangeNotifier dispose会被调用到?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601363461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165332,"user_name":"时光念你","can_delete":false,"product_type":"c1","uid":1051653,"ip_address":"","ucode":"1F19ECFBE58280","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/05/3e2b8688.jpg","comment_is_top":false,"comment_ctime":1577201727,"is_pvip":false,"replies":[{"id":"63410","content":"赞","user_name":"作者回复","comment_id":165332,"uid":"1088582","ip_address":"","utype":1,"ctime":1577440619,"user_name_real":"土豆盒子"}],"discussion_count":4,"race_medal":0,"score":"5872169023","product_id":100031001,"comment_content":"InheritWidget.of只会找到当前widget树中距离当前节点最近的type对象。同样类型的共享对象，要么另一个对象变成共享对象的子类类型，要么改成持有关系。","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479123,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577440619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244363,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/cb/5e79c6ed.jpg","nickname":"(Jet)黄仲平","note":"","ucode":"2AF4F9B460795C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163188,"discussion_content":"改成子类好理解一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581058526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244363,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/cb/5e79c6ed.jpg","nickname":"(Jet)黄仲平","note":"","ucode":"2AF4F9B460795C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163186,"discussion_content":"是不是这样理解的，就是取到了相同类型A，但是判断该对象没有此A类的属性，然后判断其是否为空","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581058457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244363,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/cb/5e79c6ed.jpg","nickname":"(Jet)黄仲平","note":"","ucode":"2AF4F9B460795C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163181,"discussion_content":"请问改成持有关系如何理解？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581058161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137605,"user_name":"辉哥","can_delete":false,"product_type":"c1","uid":1236983,"ip_address":"","ucode":"21A65F4EE6CD04","user_header":"","comment_is_top":false,"comment_ctime":1569804866,"is_pvip":false,"replies":[{"id":"53525","content":"可以，赞👍","user_name":"作者回复","comment_id":137605,"uid":"1088582","ip_address":"","utype":1,"ctime":1570519024,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"5864772162","product_id":100031001,"comment_content":"老师，实现两个类型相同对象共享，是不是依靠共享对象的两个相同类型的成员实现到","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469172,"discussion_content":"可以，赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570519024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083534,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/8e/9562b0a7.jpg","nickname":"川子","note":"","ucode":"5EFEC192D06A16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271737,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590171288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136712,"user_name":"满大大","can_delete":false,"product_type":"c1","uid":1170022,"ip_address":"","ucode":"06DE739A6CE9EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/66/5858322e.jpg","comment_is_top":false,"comment_ctime":1569496246,"is_pvip":true,"replies":[{"id":"53528","content":"涉及到复杂的状态共享情况，无论是单页面还是跨页面，都推荐使用Provider","user_name":"作者回复","comment_id":136712,"uid":"1088582","ip_address":"","utype":1,"ctime":1570519576,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"5864463542","product_id":100031001,"comment_content":"我理解应该是需要夸页面共享才用provider吧，它应该是一个单利吧，正常情况下还是少用，对不对","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468767,"discussion_content":"涉及到复杂的状态共享情况，无论是单页面还是跨页面，都推荐使用Provider","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570519576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131122,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1460526,"ip_address":"","ucode":"EA7D1007DCD7DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzYVBmYxzSZLFptgiazZ3CBiaMR2deF89Ja4eTNricbpNicQtIx72o9rqTP0emjQpJ0HHKOfPiajhckyw/132","comment_is_top":false,"comment_ctime":1567647456,"is_pvip":false,"replies":[{"id":"49368","content":"确实不优雅","user_name":"作者回复","comment_id":131122,"uid":"1088582","ip_address":"","utype":1,"ctime":1567651506,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"5862614752","product_id":100031001,"comment_content":"一直觉得Provider的Consumer～Consumer6不够优雅","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466296,"discussion_content":"确实不优雅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567651506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309627,"discussion_content":"发现Flutter很多类都喜欢定义为Widget","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601368063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311837,"user_name":"包美丽","can_delete":false,"product_type":"c1","uid":1159509,"ip_address":"","ucode":"EE9C9EFC495257","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/55/249c3abd.jpg","comment_is_top":false,"comment_ctime":1631500700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631500700","product_id":100031001,"comment_content":"求问老师，一个widget<br>1，如何监听多个model？<br>2，如何监听一个model中的多个字段？","like_count":0},{"had_liked":false,"id":251115,"user_name":"jayce","can_delete":false,"product_type":"c1","uid":1330907,"ip_address":"","ucode":"70ACD13415EA8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","comment_is_top":false,"comment_ctime":1601367781,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1601367781","product_id":100031001,"comment_content":"CounterModel counterModel = Provider.of&lt;CounterModel&gt;(context, listen: false);<br>加上listen false的参数可以不刷新当前的Widget，默认是true","like_count":0,"discussions":[{"author":{"id":1122291,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1f/f3/ce37fc84.jpg","nickname":"我是小白","note":"","ucode":"7A6EDE9D9F1C0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386230,"discussion_content":"我去试试哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627478233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1924308,"avatar":"","nickname":"张永帅","note":"","ucode":"5D7E19F07919FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318566,"discussion_content":"亲测 还是会走build，不过有的地方不设置false 会报错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603782285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1924308,"avatar":"","nickname":"张永帅","note":"","ucode":"5D7E19F07919FB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334913,"discussion_content":"你确定是Provider.of(context,listen:false)导致build?你仔细看下代码是不是别到导致的，没测清楚别乱评论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608025296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318566,"ip_address":""},"score":334913,"extra":""}]}]},{"had_liked":false,"id":176104,"user_name":"(Jet)黄仲平","can_delete":false,"product_type":"c1","uid":1244363,"ip_address":"","ucode":"2AF4F9B460795C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/cb/5e79c6ed.jpg","comment_is_top":false,"comment_ctime":1580957694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580957694","product_id":100031001,"comment_content":"老师，关于Provider  是InheritedWidget的语法糖，不是很理解，会方便给一个例子说明一下吗？","like_count":0},{"had_liked":false,"id":155012,"user_name":"Carlo","can_delete":false,"product_type":"c1","uid":1001557,"ip_address":"","ucode":"7C3FF23B597506","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/55/48de9a24.jpg","comment_is_top":false,"comment_ctime":1574619048,"is_pvip":false,"replies":[{"id":"59834","content":"包一个大对象就可以了","user_name":"作者回复","comment_id":155012,"uid":"1088582","ip_address":"","utype":1,"ctime":1574759163,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1574619048","product_id":100031001,"comment_content":"能不能再解释下Provider.of ？获取对象不是按照数据类型来定的吧？比如如果我还有个lineHeight，那写成<br>final _counter = Provider.of&lt;CounterModel&gt;(context);&#47;&#47;获取计时器实例<br>final textSize = Provider.of&lt;double&gt;(context);&#47;&#47;获取字体大小<br>final lineHeight = Provider.of&lt;double&gt;(context);<br>照数据类型一样的情况下，如何知道我获取的是textSize还是lineHeight？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475636,"discussion_content":"包一个大对象就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574759163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149264,"user_name":"🌝","can_delete":false,"product_type":"c1","uid":1449696,"ip_address":"","ucode":"7A92D6136DBF21","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/e0/238fda97.jpg","comment_is_top":false,"comment_ctime":1573180500,"is_pvip":false,"replies":[{"id":"59797","content":"你检查下组件的生命周期看看是不是有销毁&#47;新建","user_name":"作者回复","comment_id":149264,"uid":"1088582","ip_address":"","utype":1,"ctime":1574755170,"user_name_real":"土豆盒子"}],"discussion_count":3,"race_medal":0,"score":"1573180500","product_id":100031001,"comment_content":"老师，Provider的数据会在跳转页面的时候清除掉。我该如何去处理这个问题？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473799,"discussion_content":"你检查下组件的生命周期看看是不是有销毁/新建","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574755170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309628,"discussion_content":"我觉得全局ChangeNotifierProvider的可以放在最顶层MaterialApp之上，只在页面内的放在页面内","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601368356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123784,"avatar":"https://static001.geekbang.org/account/avatar/00/11/25/c8/7a950a91.jpg","nickname":"淡～","note":"","ucode":"88577F9F1392CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214608,"discussion_content":"flutter的生命周期 不是很友好，比喻说当页面再次可见的时候就没有具体的像Android  OnResume（）的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585215682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145416,"user_name":"离尘不离人คิดถึง","can_delete":false,"product_type":"c1","uid":1111830,"ip_address":"","ucode":"89F0FBDB0DB6CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/16/20562cdf.jpg","comment_is_top":false,"comment_ctime":1572269533,"is_pvip":false,"replies":[{"id":"58778","content":"你的第一行代码有主动获取build上下文：final _counter = Provider.of&lt;CounterModel&gt;(context);<br><br>","user_name":"作者回复","comment_id":145416,"uid":"1088582","ip_address":"","utype":1,"ctime":1574133456,"user_name_real":"土豆盒子"}],"discussion_count":3,"race_medal":0,"score":"1572269533","product_id":100031001,"comment_content":"final _counter = Provider.of&lt;CounterModel&gt;(context);<br>    return Scaffold(<br>      appBar: AppBar(<br>        title: Text(&#39;DataFlow Page2&#39;),<br>      ),<br>      &#47;&#47;展示资源中的数据<br>      body: Consumer&lt;CounterModel&gt;(<br>        builder: (context, CounterModel counter, _) =&gt; Center(<br>          child: Text(&#39;Value: ${counter.counter}&#39;)<br>        )<br>      ),<br>      &#47;&#47; floatingActionButton: FloatingActionButton(<br>      &#47;&#47;   child: TestIcon(),<br>      &#47;&#47;   onPressed: _counter.increment,<br>      &#47;&#47; ),<br>      &#47;&#47;用资源更新方法来设置按钮点击回调<br>      floatingActionButton: Consumer&lt;CounterModel&gt;(<br>        builder: (context, CounterModel counter, child) =&gt; FloatingActionButton(<br>          onPressed: _counter.increment,<br>          child: child,<br>        ),<br>        child: TestIcon(),<br>      )<br>    );<br><br>如上代码所示，在测试的时候发现，按钮还是会不断的刷新重建","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472386,"discussion_content":"你的第一行代码有主动获取build上下文：final _counter = Provider.of&amp;lt;CounterModel&amp;gt;(context);\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574133456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309629,"discussion_content":"你可以用  CounterModel counterModel = Provider.of<CounterModel>(context, listen: false);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601368437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1404451,"avatar":"https://static001.geekbang.org/account/avatar/00/15/6e/23/9fce5f72.jpg","nickname":"毛哥来了","note":"","ucode":"5A3D61FD29EE69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41070,"discussion_content":"onPressed: _counter.increment,   //这里的_counter改成counter","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572341599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143606,"user_name":"二师哥","can_delete":false,"product_type":"c1","uid":1154670,"ip_address":"","ucode":"3BE4978417F082","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/6e/c4fa7cbc.jpg","comment_is_top":false,"comment_ctime":1571742102,"is_pvip":false,"replies":[{"id":"58626","content":"参考38节的分享哈","user_name":"作者回复","comment_id":143606,"uid":"1088582","ip_address":"","utype":1,"ctime":1574051459,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1571742102","product_id":100031001,"comment_content":"请教一下先生，这个写的 widget 如何进行编写测试代码。按照普通的 widget 发现无法正常进行测试？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471619,"discussion_content":"参考38节的分享哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574051459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140062,"user_name":"王企鹅群翁群","can_delete":false,"product_type":"c1","uid":1002869,"ip_address":"","ucode":"5272F055AA946A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/75/7c9c8d56.jpg","comment_is_top":false,"comment_ctime":1570799508,"is_pvip":false,"replies":[{"id":"54841","content":"可以分模块分文件声明啊","user_name":"作者回复","comment_id":140062,"uid":"1088582","ip_address":"","utype":1,"ctime":1571290581,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"1570799508","product_id":100031001,"comment_content":"老师，要是把那个资源都放在main里面，会不会太多了？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470225,"discussion_content":"可以分模块分文件声明啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571290581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002869,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/75/7c9c8d56.jpg","nickname":"王企鹅群翁群","note":"","ucode":"5272F055AA946A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104143,"discussion_content":"我抽取到了一个单独的类里面进行声明了，嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577414484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136598,"user_name":"Geek_keyi","can_delete":false,"product_type":"c1","uid":1674102,"ip_address":"","ucode":"F085903C779D19","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEDNglUOrnn3bWOByASEZjMSGZl9EEiby6Z2hfQdCFLuP2FbphsEbSGEQyA1VmmhwqCPiaiaguHMoZQ/132","comment_is_top":false,"comment_ctime":1569478831,"is_pvip":false,"replies":[{"id":"53527","content":"这样可以，也可以通过封装一个大对象解决","user_name":"作者回复","comment_id":136598,"uid":"1088582","ip_address":"","utype":1,"ctime":1570519378,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1569478831","product_id":100031001,"comment_content":"老师，问题一是不是共享两个同样类型的不同对象，只是共享树的层次不一样，读取的时候会找最近的那个共享对象。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468717,"discussion_content":"这样可以，也可以通过封装一个大对象解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570519378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135661,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1569237041,"is_pvip":true,"replies":[{"id":"53509","content":"Provider目前还没有内置持久化的选项，不过这也不难，只要为Provider中的model提供序列化和反序列化JSON的方法，直接写到文件即可。","user_name":"作者回复","comment_id":135661,"uid":"1088582","ip_address":"","utype":1,"ctime":1570515625,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1569237041","product_id":100031001,"comment_content":"持久化，尤其是 Provider 中的持久化 一般怎么做","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468294,"discussion_content":"Provider目前还没有内置持久化的选项，不过这也不难，只要为Provider中的model提供序列化和反序列化JSON的方法，直接写到文件即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570515625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132406,"user_name":"Bojack","can_delete":false,"product_type":"c1","uid":1251080,"ip_address":"","ucode":"A57E552845DB28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoLw2qjwoaVCDq8BqCcXOibyTG3rxiaJlDy2lt62IkiaDrrHeVwq4Pe8RpBbYJTIiadyicZ7InBCLCjJtQ/132","comment_is_top":false,"comment_ctime":1568111821,"is_pvip":false,"replies":[{"id":"51768","content":"是啊，所以这就是今天的问题呀","user_name":"作者回复","comment_id":132406,"uid":"1088582","ip_address":"","utype":1,"ctime":1568962352,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1568111821","product_id":100031001,"comment_content":"文档上不是说必须是不同类型的吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466919,"discussion_content":"是啊，所以这就是今天的问题呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568962352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131443,"user_name":"亡命之徒","can_delete":false,"product_type":"c1","uid":1096669,"ip_address":"","ucode":"5B0ADD558F9712","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/dd/5d473145.jpg","comment_is_top":false,"comment_ctime":1567753876,"is_pvip":false,"replies":[{"id":"51211","content":"试试Tabbar的preferredSize属性","user_name":"作者回复","comment_id":131443,"uid":"1088582","ip_address":"","utype":1,"ctime":1568561421,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"1567753876","product_id":100031001,"comment_content":"老师你好，如果想修改tabbar的高度以及文字和图片的间距，必须自定义嘛，系统默认的不能修改嘛","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466456,"discussion_content":"试试Tabbar的preferredSize属性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568561421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1453513,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2d/c9/0d8983f3.jpg","nickname":"张简","note":"","ucode":"CF3F30D412FF78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8066,"discussion_content":"讲讲原理嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567771522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131209,"user_name":"矮个子先生😝","can_delete":false,"product_type":"c1","uid":1147205,"ip_address":"","ucode":"2242A457B0E10D","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","comment_is_top":false,"comment_ctime":1567671696,"is_pvip":false,"replies":[{"id":"49518","content":"Provider主要是用来做数据读写共享；event_bus主要是用来做数据状态通知","user_name":"作者回复","comment_id":131209,"uid":"1088582","ip_address":"","utype":1,"ctime":1567677988,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1567671696","product_id":100031001,"comment_content":"老师,provider、eventBus的用途有啥区别吗,都可以做状态的通知","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466337,"discussion_content":"Provider主要是用来做数据读写共享；event_bus主要是用来做数据状态通知","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567677988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131092,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1567643411,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567643411","product_id":100031001,"comment_content":"老师，美团和点评的主App，flutter开始落地了吗？","like_count":0}]}