{"id":153104,"title":"15 | 缓存的使用姿势（三）：缓存穿透了怎么办？","content":"<p>你好，我是唐扬。</p><p>我用三节课的时间带你深入了解了缓存，你应该知道对于缓存来说命中率是它的生命线。</p><p>在低缓存命中率的系统中，大量查询商品信息的请求会穿透缓存到数据库，因为数据库对于并发的承受能力是比较脆弱的。一旦数据库承受不了用户大量刷新商品页面、定向搜索衣服信息，查询就会变慢，大量的请求也会阻塞在数据库查询上，造成应用服务器的连接和线程资源被占满，最终导致你的电商系统崩溃。</p><p>一般来说，我们的核心缓存的命中率要保持在99%以上，非核心缓存的命中率也要尽量保证在90%，如果低于这个标准你可能就需要优化缓存的使用方式了。</p><p>既然缓存的穿透会带来如此大的影响，那么我们该如何减少它的发生呢？本节课我就带你全面探知面对缓存穿透时，我们到底有哪些应对措施。不过在此之前你需要了解“到底什么是缓存穿透”，只有这样才能更好地考虑如何设计方案解决它。</p><h2>什么是缓存穿透</h2><p>缓存穿透其实是指从缓存中没有查到数据，而不得不从后端系统（比如数据库）中查询的情况。你可以把数据库比喻为手机，它是经受不了太多的划痕和磕碰的，所以你需要贴个膜再套个保护壳，就能对手机起到一定的保护作用了。</p><p>不过少量的缓存穿透不可避免，对系统也是没有损害的，主要有几点原因：</p><!-- [[[read_end]]] --><ul>\n<li>\n<p>一方面，互联网系统通常会面临极大数据量的考验，而缓存系统在容量上是有限的，不可能存储系统所有的数据，那么在查询未缓存数据的时候就会发生缓存穿透。</p>\n</li>\n<li>\n<p>另一方面，互联网系统的数据访问模型一般会遵从“80/20原则”。“80/20原则”又称为帕累托法则，是意大利经济学家帕累托提出的一个经济学的理论。简单来说，它是指在一组事物中，最重要的部分通常只占20%，而其他的80%并没有那么重要。把它应用到数据访问的领域，就是我们会经常访问20%的热点数据，而另外的80%的数据则不会被经常访问。比如你买了很多衣服，很多书，但是其实经常穿的、经常看的可能也就是其中很小的一部分。</p>\n</li>\n</ul><p>既然缓存的容量有限，并且大部分的访问只会请求20%的热点数据，那么理论上说，我们只需要在有限的缓存空间里存储20%的热点数据就可以有效地保护脆弱的后端系统了，也就可以放弃缓存另外80%的非热点数据了。所以这种少量的缓存穿透是不可避免的，但是对系统是没有损害的。</p><p>那么什么样的缓存穿透对系统有害呢？答案是大量的穿透请求超过了后端系统的承受范围造成了后端系统的崩溃。如果把少量的请求比作毛毛细雨，那么一旦变成倾盆大雨，引发洪水，冲倒房屋，肯定就不行了。</p><p>产生这种大量穿透请求的场景有很多，接下来我就带你解析这几种场景以及相应的解决方案。</p><h2>缓存穿透的解决方案</h2><p>先来考虑这样一种场景：在你的电商系统的用户表中，我们需要通过用户ID查询用户的信息，缓存的读写策略采用Cache Aside策略。</p><p>那么如果要读取一个用户表中未注册的用户，会发生什么情况呢？按照这个策略，我们会先读缓存再穿透读数据库。由于用户并不存在，所以缓存和数据库中都没有查询到数据，因此也就不会向缓存中回种数据（也就是向缓存中设置值的意思），这样当再次请求这个用户数据的时候还是会再次穿透到数据库。在这种场景下缓存并不能有效地阻挡请求穿透到数据库上，它的作用就微乎其微了。</p><p>那如何解决缓存穿透呢？一般来说我们会有两种解决方案：<strong>回种空值以及使用布隆过滤器。</strong></p><p>我们先来看看第一种方案。</p><h3>回种空值</h3><p>回顾上面提到的场景，你会发现最大的问题在于数据库中并不存在用户的数据，这就造成无论查询多少次数据库中永远都不会存在这个用户的数据，穿透永远都会发生。</p><p><strong>类似的场景还有一些：</strong>比如由于代码的bug导致查询数据库的时候抛出了异常，这样可以认为从数据库查询出来的数据为空，同样不会回种缓存。</p><p>那么，当我们从数据库中查询到空值或者发生异常时，我们可以向缓存中回种一个空值。但是因为空值并不是准确的业务数据，并且会占用缓存的空间，所以我们会给这个空值加一个比较短的过期时间，让空值在短时间之内能够快速过期淘汰。<strong>下面是这个流程的伪代码：</strong></p><pre><code>Object nullValue = new Object();\ntry {\n  Object valueFromDB = getFromDB(uid); //从数据库中查询数据\n  if (valueFromDB == null) {\n    cache.set(uid, nullValue, 10);   //如果从数据库中查询到空值，就把空值写入缓存，设置较短的超时时间\n  } else {\n    cache.set(uid, valueFromDB, 1000);\n  }\n} catch(Exception e) {\n  cache.set(uid, nullValue, 10);\n}\n</code></pre><p>回种空值虽然能够阻挡大量穿透的请求，但如果有大量获取未注册用户信息的请求，缓存内就会有有大量的空值缓存，也就会浪费缓存的存储空间，如果缓存空间被占满了，还会剔除掉一些已经被缓存的用户信息反而会造成缓存命中率的下降。</p><p><strong>所以这个方案，我建议你在使用的时候应该评估一下缓存容量是否能够支撑。</strong>如果需要大量的缓存节点来支持，那么就无法通过通过回种空值的方式来解决，这时你可以考虑使用布隆过滤器。</p><h3>使用布隆过滤器</h3><p>1970年布隆提出了一种布隆过滤器的算法，用来判断一个元素是否在一个集合中。这种算法由一个二进制数组和一个Hash算法组成。<strong>它的基本思路如下：</strong></p><p>我们把集合中的每一个值按照提供的Hash算法算出对应的Hash值，然后将Hash值对数组长度取模后得到需要计入数组的索引值，并且将数组这个位置的值从0改成1。在判断一个元素是否存在于这个集合中时，你只需要将这个元素按照相同的算法计算出索引值，如果这个位置的值为1就认为这个元素在集合中，否则则认为不在集合中。</p><p>下图是布隆过滤器示意图，我来带你分析一下图内的信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/88/873fcbbb19b49a92f490ae2cf3a30e88.jpg?wh=1142*415\" alt=\"\"></p><p>A、B、C等元素组成了一个集合，元素D计算出的Hash值所对应的的数组中值是1，所以可以认为D也在集合中。而F在数组中的值是0，所以F不在数组中。</p><p><strong>那么我们如何使用布隆过滤器来解决缓存穿透的问题呢？</strong></p><p>还是以存储用户信息的表为例进行讲解。首先我们初始化一个很大的数组，比方说长度为20亿的数组，接下来我们选择一个Hash算法，然后我们将目前现有的所有用户的ID计算出Hash值并且映射到这个大数组中，映射位置的值设置为1，其它值设置为0。</p><p>新注册的用户除了需要写入到数据库中之外，它也需要依照同样的算法更新布隆过滤器的数组中相应位置的值。那么当我们需要查询某一个用户的信息时，先查询这个ID在布隆过滤器中是否存在，如果不存在就直接返回空值，而不需要继续查询数据库和缓存，这样就可以极大地减少异常查询带来的缓存穿透。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/1a/eb0c5da5deb7e729e719c30fcacd391a.jpg?wh=1142*653\" alt=\"\"></p><p>布隆过滤器拥有极高的性能，无论是写入操作还是读取操作，时间复杂度都是O(1)是常量值。在空间上，相对于其他数据结构它也有很大的优势，比如，20亿的数组需要2000000000/8/1024/1024 = 238M的空间，而如果使用数组来存储，假设每个用户ID占用4个字节的空间，那么存储20亿用户需要2000000000 * 4 / 1024 / 1024 = 7600M的空间，是布隆过滤器的32倍。</p><p>不过任何事物都有两面性，布隆过滤器也不例外，<strong>它主要有两个缺陷：</strong></p><p>1.它在判断元素是否在集合中时是有一定错误几率的，比如它会把不是集合中的元素判断为处在集合中；</p><p>2.不支持删除元素。</p><p><strong>关于第一个缺陷，主要是Hash算法的问题。</strong>因为布隆过滤器是由一个二进制数组和一个Hash算法组成的，Hash算法存在着一定的碰撞几率。Hash碰撞的含义是不同的输入值经过Hash运算后得到了相同的Hash结果。</p><p>本来，Hash的含义是不同的输入依据不同的算法映射成独一无二的固定长度的值，也就是我输入字符串“1”，根据CRC32算法，值是2212294583。但是现实中Hash算法的输入值是无限的，输出值的值空间却是固定的，比如16位的Hash值的值空间是65535，那么它的碰撞几率就是1/65535，即如果输入值的个数超过65535就一定会发生碰撞。</p><p><strong>你可能会问为什么不映射成更长的Hash值呢？</strong></p><p>因为更长的Hash值会带来更高的存储成本和计算成本。即使使用32位的Hash算法，它的值空间长度是2的32次幂减一，约等于42亿，用来映射20亿的用户数据，碰撞几率依然有接近50%。</p><p>Hash的碰撞就造成了两个用户ID ，A和B会计算出相同的Hash值，那么如果A是注册的用户，它的Hash值对应的数组中的值是1，那么B即使不是注册用户，它在数组中的位置和A是相同的，对应的值也是1，<strong>这就产生了误判。</strong></p><p>布隆过滤器的误判有一个特点，就是它只会出现“false positive”的情况。这是什么意思呢？当布隆过滤器判断元素在集合中时，这个元素可能不在集合中。但是一旦布隆过滤器判断这个元素不在集合中时，它一定不在集合中。<strong>这一点非常适合解决缓存穿透的问题。</strong>为什么呢？</p><p>你想，如果布隆过滤器会将集合中的元素判定为不在集合中，那么我们就不确定被布隆过滤器判定为不在集合中的元素是不是在集合中。假设在刚才的场景中，如果有大量查询未注册的用户信息的请求存在，那么这些请求到达布隆过滤器之后，即使布隆过滤器判断为不是注册用户，那么我们也不确定它是不是真的不是注册用户，那么就还是需要去数据库和缓存中查询，这就使布隆过滤器失去了价值。</p><p>所以你看，布隆过滤器虽然存在误判的情况，但是还是会减少缓存穿透的情况发生，只是我们需要尽量减少误判的几率，这样布隆过滤器的判断正确的几率更高，对缓存的穿透也更少。<strong>一个解决方案是：</strong></p><p>使用多个Hash算法为元素计算出多个Hash值，只有所有Hash值对应的数组中的值都为1时，才会认为这个元素在集合中。</p><p><strong>布隆过滤器不支持删除元素的缺陷也和Hash碰撞有关。</strong>给你举一个例子，假如两个元素A和B都是集合中的元素，它们有相同的Hash值，它们就会映射到数组的同一个位置。这时我们删除了A，数组中对应位置的值也从1变成0，那么在判断B的时候发现值是0，也会判断B是不在集合中的元素，就会得到错误的结论。</p><p><strong>那么我是怎么解决这个问题的呢？</strong>我会让数组中不再只有0和1两个值，而是存储一个计数。比如如果A和B同时命中了一个数组的索引，那么这个位置的值就是2，如果A被删除了就把这个值从2改为1。这个方案中的数组不再存储bit位，而是存储数值，也就会增加空间的消耗。<strong>所以，你要依据业务场景来选择是否能够使用布隆过滤器，</strong>比如像是注册用户的场景下，因为用户删除的情况基本不存在，所以还是可以使用布隆过滤器来解决缓存穿透的问题的。</p><p><strong>讲了这么多，关于布隆过滤器的使用上，我也给你几个建议：</strong></p><ol>\n<li>\n<p>选择多个Hash函数计算多个Hash值，这样可以减少误判的几率；</p>\n</li>\n<li>\n<p>布隆过滤器会消耗一定的内存空间，所以在使用时需要评估你的业务场景下需要多大的内存，存储的成本是否可以接受。</p>\n</li>\n</ol><p>总的来说，<strong>回种空值和布隆过滤器</strong>是解决缓存穿透问题的两种最主要的解决方案，但是它们也有各自的适用场景，并不能解决所有问题。比方说当有一个极热点的缓存项，它一旦失效会有大量请求穿透到数据库，这会对数据库造成瞬时极大的压力，我们把这个场景叫做“dog-pile effect”（狗桩效应），</p><p>这是典型的缓存并发穿透的问题，<strong>那么，我们如何来解决这个问题呢？</strong>解决狗桩效应的思路是尽量地减少缓存穿透后的并发，方案也比较简单：</p><ol>\n<li>\n<p>在代码中控制在某一个热点缓存项失效之后启动一个后台线程，穿透到数据库，将数据加载到缓存中，在缓存未加载之前，所有访问这个缓存的请求都不再穿透而直接返回。</p>\n</li>\n<li>\n<p>通过在Memcached或者Redis中设置分布式锁，只有获取到锁的请求才能够穿透到数据库。</p>\n</li>\n</ol><p>分布式锁的方式也比较简单，比方说ID为1的用户是一个热点用户，当他的用户信息缓存失效后，我们需要从数据库中重新加载数据时，先向Memcached中写入一个Key为\"lock.1\"的缓存项，然后去数据库里面加载数据，当数据加载完成后再把这个Key删掉。这时，如果另外一个线程也要请求这个用户的数据，它发现缓存中有Key为“lock.1”的缓存，就认为目前已经有线程在加载数据库中的值到缓存中了，它就可以重新去缓存中查询数据，不再穿透数据库了。</p><h2>课程小结</h2><p>本节课，我带你了解了一些解决缓存穿透的方案，你可以在发现自己的缓存系统命中率下降时从中得到一些借鉴的思路。我想让你明确的重点是：</p><ol>\n<li>\n<p>回种空值是一种最常见的解决思路，实现起来也最简单，如果评估空值缓存占据的缓存空间可以接受，那么可以优先使用这种方案；</p>\n</li>\n<li>\n<p>布隆过滤器会引入一个新的组件，也会引入一些开发上的复杂度和运维上的成本。所以只有在存在海量查询数据库中，不存在数据的请求时才会使用，在使用时也要关注布隆过滤器对内存空间的消耗；</p>\n</li>\n<li>\n<p>对于极热点缓存数据穿透造成的“狗桩效应”，可以通过设置分布式锁或者后台线程定时加载的方式来解决。</p>\n</li>\n</ol><p>除此之外，你还需要了解数据库是一个脆弱的资源，它无论是在扩展性、性能还是承担并发的能力上，相比缓存都处于绝对的劣势，所以我们解决缓存穿透问题的<strong>核心目标在于减少对于数据库的并发请求。</strong>了解了这个核心的思想，也许你还会在日常工作中找到其他更好的解决缓存穿透问题的方案。</p><h2>一课一思</h2><p>在你的日常工作中还会有哪些解决缓存穿透的方案呢？欢迎在留言区和我互动讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，欢迎将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":143028,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":true,"comment_ctime":1571621550,"is_pvip":true,"replies":[{"id":"55268","content":"谢谢~","user_name":"作者回复","comment_id":143028,"uid":"1448977","ip_address":"","utype":1,"ctime":1571626538,"user_name_real":"唐扬"}],"discussion_count":3,"race_medal":0,"score":"9.2233721543904993e+18","product_id":100035801,"comment_content":"很实用，很赞","like_count":27,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471354,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571626538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1593681,"avatar":"https://static001.geekbang.org/account/avatar/00/18/51/51/381876ab.jpg","nickname":"文康","note":"","ucode":"E1952B9DFB5DF4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":541752,"discussion_content":"老师，我有一次面试的时候面试官说当数据量很大的时候布隆过滤器很占用空间，说数据量很大的时候一般不用布隆过滤器，只有数据量小的时候才用，我想知道这个方案是什么🤔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640533930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":471354,"ip_address":""},"score":541752,"extra":""}]},{"author":{"id":1759602,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d9/72/41557176.jpg","nickname":"Edingbrugh","note":"","ucode":"E285CD9DE8BE4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299212,"discussion_content":"收货满满，特别这个布隆过滤","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597593515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144399,"user_name":"小虎","can_delete":false,"product_type":"c1","uid":1359878,"ip_address":"","ucode":"66CCAB2C757B3C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDuUeF7u9lAY3qmfKSfDBQzCJuveFVyIGE7D1PEI8ZQ1kTScwvRdruYHff0zpEnJWlsYicLlWGvcTg/132","comment_is_top":true,"comment_ctime":1571911220,"is_pvip":false,"replies":[{"id":"55692","content":"以单独服务部署比较好，我之前团队曾经改了一下redis源码来实现这个功能，利用redis的存储机制","user_name":"作者回复","comment_id":144399,"uid":"1448977","ip_address":"","utype":1,"ctime":1571960270,"user_name_real":"唐扬"}],"discussion_count":2,"race_medal":0,"score":"9.2233721114411008e+18","product_id":100035801,"comment_content":"讲的很好，很透彻，实用。老师，那么这个过滤器在微服务环境下如何部署比较好？部署好了以后是否也可以起到防止洪水攻击带来的缓存穿透问题？<br>","like_count":17,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471920,"discussion_content":"以单独服务部署比较好，我之前团队曾经改了一下redis源码来实现这个功能，利用redis的存储机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571960270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762741,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e5/b5/8a240576.jpg","nickname":"陈玉君","note":"","ucode":"083D6174E21224","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382044,"discussion_content":"布隆过滤器这个key会成为热点key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625384795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143607,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1571742467,"is_pvip":false,"replies":[{"id":"55500","content":"是的","user_name":"作者回复","comment_id":143607,"uid":"1448977","ip_address":"","utype":1,"ctime":1571792977,"user_name_real":"唐扬"}],"discussion_count":2,"race_medal":0,"score":"130420761347","product_id":100035801,"comment_content":"布隆过滤器可以用在一些资讯app的新闻展示中，给用户推送新的资讯用来过滤掉那些用户已经浏览过的记录","like_count":30,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471620,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571792977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584849,"discussion_content":"也可以使用Set数据类型来做～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661158893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144840,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1572069824,"is_pvip":false,"replies":[{"id":"55942","content":"可能存在扫描你的用户的爬虫请求","user_name":"作者回复","comment_id":144840,"uid":"1448977","ip_address":"","utype":1,"ctime":1572220068,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"121831154112","product_id":100035801,"comment_content":"老师，为什么会出现大量查询未注册用户的情况呢？是系统被攻击了？","like_count":28,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472130,"discussion_content":"可能存在扫描你的用户的爬虫请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572220068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143266,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1571658393,"is_pvip":false,"replies":[{"id":"55357","content":"一般缓存会有cache miss和cache hit的统计信息，也可以自己打印日志统计","user_name":"作者回复","comment_id":143266,"uid":"1448977","ip_address":"","utype":1,"ctime":1571701307,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"96060938905","product_id":100035801,"comment_content":"老师如何来监控缓存的命中率。","like_count":22,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471456,"discussion_content":"一般缓存会有cache miss和cache hit的统计信息，也可以自己打印日志统计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571701307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158414,"user_name":"jun.hai","can_delete":false,"product_type":"c1","uid":1702947,"ip_address":"","ucode":"9740C5118DE6DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epx1w8VkC30tcu4GlOCkUZB7picI2xesBBZF3rGWVPp9tHZfJdkc5iaqhSg7LOsvtefiajkM1YPno2JA/132","comment_is_top":false,"comment_ctime":1575365450,"is_pvip":false,"replies":[{"id":"60622","content":"穿透指的是缓存中没有数据，需要到数据库中去取；雪崩指的是一个缓存节点的故障导致全局故障，两者是不同的<br><br>之前提的一致性hash中实现虚拟节点就是一种避免雪崩的方法","user_name":"作者回复","comment_id":158414,"uid":"1448977","ip_address":"","utype":1,"ctime":1575367473,"user_name_real":"唐扬"}],"discussion_count":7,"race_medal":0,"score":"78884776778","product_id":100035801,"comment_content":"老师您好，请教个问题，文中讲到的缓存穿透跟缓存雪崩是一个概念么？如果不是那缓存雪崩的解决方案是什么呢？谢谢","like_count":18,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476714,"discussion_content":"穿透指的是缓存中没有数据，需要到数据库中去取；雪崩指的是一个缓存节点的故障导致全局故障，两者是不同的\n\n之前提的一致性hash中实现虚拟节点就是一种避免雪崩的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575367473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442497,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/c1/80e68043.jpg","nickname":"停三秒","note":"","ucode":"C9D8F39F24672E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204920,"discussion_content":"觉得这个地方对缓存雪崩和缓存穿透的定义不太妥，我理解的缓存穿透是对不存在的key的请求，缓存雪崩更多说的大量的key同时失效或缓存服务故障，对这些key的访问都流到数据库的现象。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584239824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1442497,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/c1/80e68043.jpg","nickname":"停三秒","note":"","ucode":"C9D8F39F24672E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249531,"discussion_content":"我也是这么理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587946476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204920,"ip_address":""},"score":249531,"extra":""},{"author":{"id":2820632,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0a/18/cdfd70ad.jpg","nickname":"LetMeCode","note":"","ucode":"AD6D729D42BB44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1442497,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/c1/80e68043.jpg","nickname":"停三秒","note":"","ucode":"C9D8F39F24672E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574700,"discussion_content":"+1.\n缓存雪崩，强调很多key集体失效时数据库瞬时压力过重雪崩，有可能是因为设置缓存时采用了相同的过期时间。。\n所以解决方案是给这些key设置随机过期时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654264946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204920,"ip_address":""},"score":574700,"extra":""},{"author":{"id":2756576,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/0f/e0/b53a7701.jpg","nickname":"骑车上天空","note":"","ucode":"364365E2721122","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2820632,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0a/18/cdfd70ad.jpg","nickname":"LetMeCode","note":"","ucode":"AD6D729D42BB44","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":582587,"discussion_content":"老实说，在实际业务中真的能设置随机过期时间嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659518781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574700,"ip_address":"广东"},"score":582587,"extra":""}]},{"author":{"id":1744053,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/b5/c936c54b.jpg","nickname":"💣","note":"","ucode":"F3B82CEB6B6934","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591098,"discussion_content":"更好理解的说法是从“穿透”看，是指在缓存没有查询到数据，在存储也没有查询到数据形成的查询“穿透”，区别与雪崩，雪崩是大量查询流量都到达后端存储的现象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666276884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1702947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epx1w8VkC30tcu4GlOCkUZB7picI2xesBBZF3rGWVPp9tHZfJdkc5iaqhSg7LOsvtefiajkM1YPno2JA/132","nickname":"jun.hai","note":"","ucode":"9740C5118DE6DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70590,"discussion_content":"感谢老师~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575371479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143173,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1571642658,"is_pvip":false,"replies":[{"id":"55362","content":"1. 一般的锁是进程中的锁，可以同步一个进程中的多个线程；分布式锁可以同步多个进程<br>2. 缓存适合放经常访问的热数据，不能放全量数据，而且也放不下","user_name":"作者回复","comment_id":143173,"uid":"1448977","ip_address":"","utype":1,"ctime":1571701537,"user_name_real":"唐扬"}],"discussion_count":2,"race_medal":0,"score":"70291119394","product_id":100035801,"comment_content":"1.这两节都有提到分布式锁，请问下分布式锁和一般锁的有什么区别呢？<br>2.缓存适合存放什么样子的数据呢？还是数据库里面的所有数据都可以放入缓存呢？<br>谢谢","like_count":16,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471407,"discussion_content":"1. 一般的锁是进程中的锁，可以同步一个进程中的多个线程；分布式锁可以同步多个进程\n2. 缓存适合放经常访问的热数据，不能放全量数据，而且也放不下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571701537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184542,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/1e/00f574c1.jpg","nickname":"随遇而安","note":"","ucode":"6D2D0FF9B434AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53640,"discussion_content":"没必要用锁，之前返回老数据，开一个线程去数据库查询就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574185758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143290,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1571662982,"is_pvip":false,"replies":[{"id":"55356","content":"bloom filter需要自研，可以基于redis持久化存储到硬盘上<br><br>连接池应该解决不了问题，因为链接不是无限的；限流是有损的","user_name":"作者回复","comment_id":143290,"uid":"1448977","ip_address":"","utype":1,"ctime":1571701237,"user_name_real":"唐扬"}],"discussion_count":4,"race_medal":0,"score":"40226368646","product_id":100035801,"comment_content":"bloom filter这个用法会在各种文章教程中提出，但我一直有个疑问想求教一下：基于redis这种存储的bloom filter有没有成熟的方案？因为我觉得毕竟redis不是一种完全可靠的存储，一旦crash理论上有可能丢数据，在用户的那个案例中，一旦应该出现在bloom filter中的数据丢失了，就意味着永远也查不出这个用户来了。那是否我们还应该启动一个监控进程，一旦发现redis crash了，要重新构建bloom filter呢？<br>回到思考题，我现在觉得文章中的三个方案都只能解决部分场景的问题，有时候需要配合使用。除此之外，合理的数据库连接池大小以及服务限流也能起到最后防线的作用吧？","like_count":9,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471468,"discussion_content":"bloom filter需要自研，可以基于redis持久化存储到硬盘上\n\n连接池应该解决不了问题，因为链接不是无限的；限流是有损的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571701237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2317575,"avatar":"","nickname":"Geek_88ccf8","note":"","ucode":"218CF6CDBB0B17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325578,"discussion_content":"新版本的redis已经有一个单独的bloom filter模块可以用了，不用再自研了\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605355709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112182,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/76/3db69173.jpg","nickname":"onepieceJT2018","note":"","ucode":"C8C214C3D5D285","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223458,"discussion_content":"准确性不严格的话 可以考虑redis的hyperloglog","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586225656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37944,"discussion_content":"redis aof难道要每次都持久化么？\n我觉得就是要有损才能保护数据库呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571704492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143814,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1571794911,"is_pvip":false,"replies":[{"id":"55611","content":"是的","user_name":"作者回复","comment_id":143814,"uid":"1448977","ip_address":"","utype":1,"ctime":1571855031,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"35931533279","product_id":100035801,"comment_content":"布隆过滤器单独部署服务，服务启动时需要初始化数据，将数据库中数据初始化到过滤器中。后续将布隆过滤器定期写到磁盘中，防止服务重启导致丢失。<br>请教下老师，文中说的布隆过滤器是否如上上面说部署？<br>","like_count":8,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471701,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571855031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151876,"user_name":"Luciano李鑫","can_delete":false,"product_type":"c1","uid":1329995,"ip_address":"","ucode":"5FBE5F86FD5B2C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/4b/97926cba.jpg","comment_is_top":false,"comment_ctime":1573803958,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27343607734","product_id":100035801,"comment_content":"“即使使用 32 位的 Hash 算法，它的值空间长度是 2 的 32 次幂减一，约等于 42 亿，用来映射 20 亿的用户数据，碰撞几率依然有接近 50%“。这50%的碰撞率是怎么得到的","like_count":6,"discussions":[{"author":{"id":1137642,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5b/ea/8a2dceaa.jpg","nickname":"PP丶","note":"","ucode":"3185CBE58473DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298385,"discussion_content":"20/42","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597286113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150447,"user_name":"Fourty Seven","can_delete":false,"product_type":"c1","uid":1323868,"ip_address":"","ucode":"DD213225842F68","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/5c/8c0a372a.jpg","comment_is_top":false,"comment_ctime":1573536455,"is_pvip":false,"replies":[{"id":"57974","content":"可以返回失败 不从数据库读取，或者重试","user_name":"作者回复","comment_id":150447,"uid":"1448977","ip_address":"","utype":1,"ctime":1573610869,"user_name_real":"唐扬"}],"discussion_count":4,"race_medal":0,"score":"23048372935","product_id":100035801,"comment_content":"分布式锁的方案中，有问题吧？如果第二个线程发现有这个key说明有别的线程在加载数据，但是还没有加载完，这个时候读缓存是没有的。","like_count":5,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474162,"discussion_content":"可以返回失败 不从数据库读取，或者重试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573610869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331217,"discussion_content":"你就当成普通锁来使用，没获取到锁的时候你会做什么呢？\n1. 等待  tryLock(long timeout, TimeUnit unit)\n2. 直接返回 tryLock() ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606809487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162113,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/81/8260cbf6.jpg","nickname":"Geek_bbe25a","note":"","ucode":"A50329BE030715","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298923,"discussion_content":"就是保障服务的可用性，基于cap理论，ap和cp不能同时存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597479324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042503,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/47/3e4a03ac.jpg","nickname":"renwotao","note":"","ucode":"8054CA7EC0C8AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94861,"discussion_content":"表示加载缓存中，直接返回失败后者重试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576995875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234370,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1594655814,"is_pvip":false,"replies":[{"id":"89237","content":"没关系，再反复看看专栏的内容，里边都是我多年工作的经验总结，覆盖面还是比较大的……预祝下次面试好运🍀","user_name":"作者回复","comment_id":234370,"uid":"1448977","ip_address":"","utype":1,"ctime":1597413476,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"18774524998","product_id":100035801,"comment_content":"对不起老师给您丢脸了，有面试官问到如何避免缓存穿透，我一下懵了，因为我觉得缓存是可以穿透的，结果他意思应该跟您这一节课差不多，我竟然没想起布隆过滤器。","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501369,"discussion_content":"没关系，再反复看看专栏的内容，里边都是我多年工作的经验总结，覆盖面还是比较大的……预祝下次面试好运🍀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597413476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160547,"user_name":"Geek_810a90","can_delete":false,"product_type":"c1","uid":1674819,"ip_address":"","ucode":"6AF289C1842626","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL2Rw8LHaA2A9KdJ3UfQzRX3eIR1wNfUVdQJWwd0nbjVeeibEfjmvzbPiaJZYgYTtqIDgmBtLp9ROmg/132","comment_is_top":false,"comment_ctime":1575972780,"is_pvip":false,"replies":[{"id":"61407","content":"是的，缓存穿透肯定会有，只是要尽量减少","user_name":"作者回复","comment_id":160547,"uid":"1448977","ip_address":"","utype":1,"ctime":1576116945,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"18755841964","product_id":100035801,"comment_content":"老师，还是有个疑惑 先查布隆过滤器存在，去查缓存，缓存中失效了或者是刚更新过数据删除了缓存，透过缓存查询数据库，在高并发的情况下，也还是会出现缓存穿透的吧","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477410,"discussion_content":"是的，缓存穿透肯定会有，只是要尽量减少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576116945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145102,"user_name":"方木木","can_delete":false,"product_type":"c1","uid":1045634,"ip_address":"","ucode":"44E0C9318DF794","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/82/466ecee2.jpg","comment_is_top":false,"comment_ctime":1572190495,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"18752059679","product_id":100035801,"comment_content":"“即使使用 32 位的 Hash 算法，它的值空间长度是 2 的 32 次幂减一，约等于 42 亿，用来映射 20 亿的用户数据，碰撞几率依然有接近 50%。”这是怎么算出来的？","like_count":4,"discussions":[{"author":{"id":1131414,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/96/5bbfc853.jpg","nickname":"superMO潼","note":"","ucode":"AEE2274BF75E44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320805,"discussion_content":"歌巢原理，鸽子大于巢才会出现碰撞。20亿鸽子42亿巢不会碰撞，前提初始化的数组是42亿。应该是写错了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604482653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1166373,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cc/25/8c6eab2c.jpg","nickname":"ArtistLu","note":"","ucode":"2E641A3EB4F9AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271000,"discussion_content":"文章中提到了“比如 16 位的 Hash 值的值空间是 65535，那么它的碰撞几率就是 1/65535”。40亿碰撞的概率就是 1/40亿 * 20亿 就是50%","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590072845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364556,"discussion_content":"不同的值可能hash的结果相同，因为可能产生碰撞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617517316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1969666,"avatar":"","nickname":"耿顺利","note":"","ucode":"06DB3AAC2C0658","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260819,"discussion_content":"我还以为只有我有这个疑问呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588904745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442497,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/c1/80e68043.jpg","nickname":"停三秒","note":"","ucode":"C9D8F39F24672E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204921,"discussion_content":"同想知道50%的碰撞率是如何计算的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584239890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201733,"avatar":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","nickname":"小河","note":"","ucode":"70E299D670D0B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204318,"discussion_content":"这个老师肯定写错了，我用户id从0自增到42亿，不会有碰撞啊，大于42亿才会碰撞的。除非hash算法有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584154004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167158,"discussion_content":"同问！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581467551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144978,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1572146627,"is_pvip":false,"replies":[{"id":"55946","content":"一般不建议设置缓存不过期，原因有两方面，一方面是数据可能会有不一致，另一方面缓存的容量也会有限制","user_name":"作者回复","comment_id":144978,"uid":"1448977","ip_address":"","utype":1,"ctime":1572220256,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"14457048515","product_id":100035801,"comment_content":"如果设置缓存key值不过期，是否可以避免狗桩效应呢？<br>想请教下唐老师 什么场景下不适用于设置不过期的情况，一般频繁更新的场景也不适用缓存吧","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472196,"discussion_content":"一般不建议设置缓存不过期，原因有两方面，一方面是数据可能会有不一致，另一方面缓存的容量也会有限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572220256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143071,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1184658,"ip_address":"","ucode":"0641211EE9DA5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","comment_is_top":false,"comment_ctime":1571625977,"is_pvip":false,"replies":[{"id":"55266","content":"是的，是集合中的元素不一定在集合中。<br><br>我的这句应该是一个假设，表示，如果布隆过滤器可以把不是集合中的元素判定为在集合中，也就是false negative，那么就不能减少缓存穿透了。正因为布隆过滤器是false positive，所以才可以减少缓存的穿透","user_name":"作者回复","comment_id":143071,"uid":"1448977","ip_address":"","utype":1,"ctime":1571626519,"user_name_real":"唐扬"}],"discussion_count":3,"race_medal":1,"score":"14456527865","product_id":100035801,"comment_content":"如果布隆过滤器会将集合中的元素判定为不在集合中，那么我们就不们就不确定，被布隆过滤器判定为不在集合中的元素，是不是在集合中。这句话是不是写反了，应该是判定为在集合中，就不能确定到底在不在集合中，因为有hash碰撞的问题","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471374,"discussion_content":"是的，是集合中的元素不一定在集合中。\n\n我的这句应该是一个假设，表示，如果布隆过滤器可以把不是集合中的元素判定为在集合中，也就是false negative，那么就不能减少缓存穿透了。正因为布隆过滤器是false positive，所以才可以减少缓存的穿透","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571626519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167160,"discussion_content":"按照这么解释的话，原文写的太难懂了。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581467655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2095026,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/b2/b9d2d7d8.jpg","nickname":"","note":"","ucode":"79DB151C0BFC63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357593,"discussion_content":"为啥非要绕一圈呢？正常说不就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615821291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179817,"user_name":"Carl","can_delete":false,"product_type":"c1","uid":1150959,"ip_address":"","ucode":"D440C1E3EE0D95","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/ef/01d9e141.jpg","comment_is_top":false,"comment_ctime":1582104323,"is_pvip":false,"replies":[{"id":"70258","content":"命中数&#47;请求总数","user_name":"作者回复","comment_id":179817,"uid":"1448977","ip_address":"","utype":1,"ctime":1582513839,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"10172038915","product_id":100035801,"comment_content":"怎么计算缓存命中率","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484414,"discussion_content":"命中数/请求总数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582513839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144893,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1572082865,"is_pvip":false,"replies":[{"id":"55943","content":"阻塞的话会不释放资源，如果拉取数据库的操作比较慢，会影响系统性能","user_name":"作者回复","comment_id":144893,"uid":"1448977","ip_address":"","utype":1,"ctime":1572220108,"user_name_real":"唐扬"}],"discussion_count":4,"race_medal":0,"score":"10162017457","product_id":100035801,"comment_content":"在使用分布式锁时，一个线程拿到了锁，加载数据的过程，另一个线程也来请求会阻塞吧","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472157,"discussion_content":"阻塞的话会不释放资源，如果拉取数据库的操作比较慢，会影响系统性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572220108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201733,"avatar":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","nickname":"小河","note":"","ucode":"70E299D670D0B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204320,"discussion_content":"自旋等待或者快速失败，感觉还是不要一直阻塞。如果流量很大，依然会对系统造成伤害","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584154165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1201733,"avatar":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","nickname":"小河","note":"","ucode":"70E299D670D0B8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311953,"discussion_content":"快速失败更合理些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602550845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204320,"ip_address":""},"score":311953,"extra":""},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331218,"discussion_content":"是的，快速失败即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606809562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":311953,"ip_address":""},"score":331218,"extra":""}]}]},{"had_liked":false,"id":143298,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1571664353,"is_pvip":false,"replies":[{"id":"55355","content":"比如有三个算法算出三个值，那么必须三个值都一致才算是在集合中，只有两个值一致不算","user_name":"作者回复","comment_id":143298,"uid":"1448977","ip_address":"","utype":1,"ctime":1571701139,"user_name_real":"唐扬"}],"discussion_count":8,"race_medal":0,"score":"10161598945","product_id":100035801,"comment_content":"打卡。老师你好，请问文中介绍布隆过滤器，提到“使用多个 Hash 算法为元素计算出多个 Hash 值”，这句话怎样理解呢？如果同一个key采用多个Hash算法得出得Hash值基本不一样，那数组下标也不一样，这同一个key对应好几个下标，那跟别的key有大量冲突呀，这时该怎么判断呢。","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471473,"discussion_content":"比如有三个算法算出三个值，那么必须三个值都一致才算是在集合中，只有两个值一致不算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571701139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/07/bd/9e8d1cff.jpg","nickname":"与海同宽","note":"","ucode":"2F1D3411C96898","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204483,"discussion_content":"我的理解是：就是起初由一个hash函数算出对应的下标值来判断key是不是存在，转变为多个hash函数算出的下标共同决定，当然了，如果下标都对上了，也不能保证该key就一定存在，因为后续值越来越多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584179227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167173,"discussion_content":"是一个数组 多个hash函数，只有多个hash函数算出的值都是1 才认为存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581468580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39256,"discussion_content":"文章讲的很仔细了，hash值理解成数组的下标，数组的类型是1bit。算法将无限的输入变成有限的输出是N对1的关系，1个bit位值为0就说明N个元素都不在集合中，间接确认了某个的元素不在集合中。\n\n可以对比一下哈希表实现中链表法解决冲突的过程，过滤器只有一个数组后面没有链表就没法解决冲突。下标对应的值是1只说明元素大概率（冲突不严重的情况下）在集合中。多个过滤器可以提高确认的概率达到近似确认，但理论上是不能完全确认的。确认的概率类似 1-P^{N}，P是误判率，N是过滤器个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571909409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1465986,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","nickname":"longslee","note":"","ucode":"C24E32E5B1B6F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42544,"discussion_content":"是我理解错了？是说采用多个数组，然后hash算法不同吗。  我看到文章没有提起多个过滤器，只说了多个hash函数，我就疑问为什么在同一数组内进行多次hash还能不碰撞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572693987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39256,"ip_address":""},"score":42544,"extra":""},{"author":{"id":1201733,"avatar":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","nickname":"小河","note":"","ucode":"70E299D670D0B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1465986,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","nickname":"longslee","note":"","ucode":"C24E32E5B1B6F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204324,"discussion_content":"应该是多个数组啊，一个数组肯定不行。那冲突更大呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584154661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":42544,"ip_address":""},"score":204324,"extra":""}]},{"author":{"id":1465986,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","nickname":"longslee","note":"","ucode":"C24E32E5B1B6F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37950,"discussion_content":"回老师：：三个值都相等，怎么理解呢，不同的hash算法算出来还想等吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571706137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1235812,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/64/f9628492.jpg","nickname":"七号叽","note":"","ucode":"0CB7E5C3297511","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1465986,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","nickname":"longslee","note":"","ucode":"C24E32E5B1B6F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38671,"discussion_content":"是说三个hash值对应位置上的值相等把，比如都是1表示存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571816164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37950,"ip_address":""},"score":38671,"extra":""}]}]},{"had_liked":false,"id":143080,"user_name":"良记","can_delete":false,"product_type":"c1","uid":1033503,"ip_address":"","ucode":"F78CC56BB32D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/1f/485fcff9.jpg","comment_is_top":false,"comment_ctime":1571627604,"is_pvip":true,"replies":[{"id":"55284","content":"拿到空值","user_name":"作者回复","comment_id":143080,"uid":"1448977","ip_address":"","utype":1,"ctime":1571632176,"user_name_real":"唐扬"}],"discussion_count":1,"race_medal":0,"score":"10161562196","product_id":100035801,"comment_content":"最后这个分布式锁并不是十分理解，如果在数据还没有被缓存到Redis的时候，其他请求查询到了“lock.1”，那么重新取数的时候是等待新数据缓存好了还是说直接拿到空值？","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471379,"discussion_content":"拿到空值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571632176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276835,"user_name":"innocent","can_delete":false,"product_type":"c1","uid":1197455,"ip_address":"","ucode":"368659A0DDE7E4","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","comment_is_top":false,"comment_ctime":1612148876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907116172","product_id":100035801,"comment_content":"布隆过滤器如果不采用bit数组，那存储成本就要变大了","like_count":1},{"had_liked":false,"id":194066,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1585020535,"is_pvip":false,"replies":[{"id":"75844","content":"主库的话可以提从，从库的话可以从域名中暂时去掉","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1586089020,"ip_address":"","comment_id":194066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879987831","product_id":100035801,"comment_content":"老师，如果问题发生的更严重，比如redis 宕机了，导致服务不可用，那应用程序如何处理这种异常？让程序去访问数据库而不是直接报错呢？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488749,"discussion_content":"主库的话可以提从，从库的话可以从域名中暂时去掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586089020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187538,"user_name":"小河","can_delete":false,"product_type":"c1","uid":1201733,"ip_address":"","ucode":"70E299D670D0B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","comment_is_top":false,"comment_ctime":1584154485,"is_pvip":false,"replies":[{"id":"73110","content":"这样也可以，只是多了一些维护成本","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584591131,"ip_address":"","comment_id":187538,"utype":1}],"discussion_count":5,"race_medal":0,"score":"5879121781","product_id":100035801,"comment_content":"极热点数据的缓存，可以启动线程去监控key的过期时间，在快要过期之前重新加载数据。无需等待缓存过期失效了再去被动加载","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487137,"discussion_content":"这样也可以，只是多了一些维护成本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584591131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372002,"discussion_content":"redisson针对分布式锁的超时失效问题引入了看门狗机制，其原理也是一直监听锁的时长，到期若还持有锁则续期10s，跟这个定时任务线程异步刷新缓存思路异曲同工。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620122035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4c/89/e698c0a9.jpg","nickname":"gerry pang","note":"","ucode":"54BD1D8DE1DBBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293455,"discussion_content":"那如果极热点数据做更新怎么搞，更新我们一般是使用cache aside策略，这种是不是也会瞬间有大量的查请求打到数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595550466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1018928,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/30/d642e01a.jpg","nickname":"zhengnachuan","note":"","ucode":"FC6CD65906BE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4c/89/e698c0a9.jpg","nickname":"gerry pang","note":"","ucode":"54BD1D8DE1DBBF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327931,"discussion_content":"同样需要加锁控制并发请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606020601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293455,"ip_address":""},"score":327931,"extra":""},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4c/89/e698c0a9.jpg","nickname":"gerry pang","note":"","ucode":"54BD1D8DE1DBBF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364558,"discussion_content":"过期时间加上一个随机值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617517617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293455,"ip_address":""},"score":364558,"extra":""}]}]},{"had_liked":false,"id":185822,"user_name":"SuperYue","can_delete":false,"product_type":"c1","uid":1232077,"ip_address":"","ucode":"97DEDA055C462A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epkttbAibb21Cf4Hvq7ASReEyk5klDhxQulmnrzQWEcqslZ6qhlFf8zw0ZpG8BA65icnz8ianlZVnkFA/132","comment_is_top":false,"comment_ctime":1583684863,"is_pvip":false,"replies":[{"id":"72207","content":"如果有大量未命中缓存的情况，还是布隆过滤器用的多，因为大概率就不用请求缓存了（因为数据不在系统中嘛），所以不会每次读都多一次io","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584020053,"ip_address":"","comment_id":185822,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5878652159","product_id":100035801,"comment_content":"老师 布隆索隆器相比回种空值似乎更消耗内存啊，天生的消耗固定空间。而且每次写操作和查询操作，都需要访问布隆过滤器，在性能上似乎说不过去，哪怕是O(1)的，但是硬多出一次网络io啊。我更站回种空值，也不需要布署过滤器和考虑过滤器的算法可靠性和服务器可以性。老师你在公司里哪种用得更多呢","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486515,"discussion_content":"如果有大量未命中缓存的情况，还是布隆过滤器用的多，因为大概率就不用请求缓存了（因为数据不在系统中嘛），所以不会每次读都多一次io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584020053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261878,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/36/ca101de4.jpg","nickname":"eTen.T","note":"","ucode":"ECC6CD4B51EA96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267782,"discussion_content":"不去请求缓存的话，但也会大量请求布隆过滤器呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589687874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1261878,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/36/ca101de4.jpg","nickname":"eTen.T","note":"","ucode":"ECC6CD4B51EA96","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364559,"discussion_content":"拒绝了访问数据库的无效访问请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617517727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":267782,"ip_address":""},"score":364559,"extra":""}]}]},{"had_liked":false,"id":179847,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1582109400,"is_pvip":false,"replies":[{"id":"70260","content":"B如果在数据库中，布隆过滤器的值是1呀","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1582513963,"ip_address":"","comment_id":179847,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5877076696","product_id":100035801,"comment_content":"布隆过滤器判断这个元素不在集合中时，它一定不在集合中。<br>___________________________________________________<br><br>假如有用户A、用户B，他们在布隆过滤器中的位置相同。A在不数据库中，布隆过滤器中A对应的值是0，B在数据库中，然后查询B是否存在，那么返回0（不存在），实际上是存在的。 如果发生这种情况，不就和上面那句话对不上了吗？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484426,"discussion_content":"B如果在数据库中，布隆过滤器的值是1呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582513963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362755,"discussion_content":"仔细读这段话，应该会有帮助：还是以存储用户信息的表为例进行讲解。首先我们初始化一个很大的数组，比方说长度为 20 亿的数组，接下来我们选择一个 Hash 算法，然后我们将目前现有的所有用户的 ID 计算出 Hash 值并且映射到这个大数组中，映射位置的值设置为 1，其它值设置为 0。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617024486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143292,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1571663112,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5866630408","product_id":100035801,"comment_content":"另外，之前研究bloom filter时发现了一种Cuckoo Filter，有更好的表现且支持删除比Countered Bloom Filter更优。但其实现代码还未经过时间考验，也许未来能取代bloom filter","like_count":1,"discussions":[{"author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39299,"discussion_content":"https://juejin.im/post/5cfb9c74e51d455d6d5357db，可以看看老钱的这篇文章，对布谷鸟过滤器的看法比较客观","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1571910866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39391,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571921095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39299,"ip_address":""},"score":39391,"extra":""},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364560,"discussion_content":"占用更大空间\n保证不能重复插入数据，否则无法精确计数\n\n布隆过滤器自动扩容的问题有待商榷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617518033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39299,"ip_address":""},"score":364560,"extra":""}]}]},{"had_liked":false,"id":359253,"user_name":"Geek_55cc30","can_delete":false,"product_type":"c1","uid":2914421,"ip_address":"广东","ucode":"4A11A99E8D9F01","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsuPxIWODMCcA2AZorYpJTHWA1ttv0CMxsh5meMXVvCAzN4qDlHzDWJ3ibicuVgmexmGNmibZdcfQcw/132","comment_is_top":false,"comment_ctime":1665374765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665374765","product_id":100035801,"comment_content":"使用多个 Hash 算法为元素计算出多个 Hash 值，只有所有 Hash 值对应的数组中的值都为 1 时，才会认为这个元素在集合中。<br>=================<br>布隆过滤器， 应该是元素多有的hash值都为1， 表示这个元素可能在集合中。  如何有一个hash值部位1， 表示这个元素一定不在集合中。","like_count":0},{"had_liked":false,"id":358604,"user_name":"liupan","can_delete":false,"product_type":"c1","uid":1612910,"ip_address":"广东","ucode":"C6C7C48BCCAE12","user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","comment_is_top":false,"comment_ctime":1664461865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664461865","product_id":100035801,"comment_content":"布隆过滤器在什么时候初始化哩？","like_count":0},{"had_liked":false,"id":354267,"user_name":"airmy丶","can_delete":false,"product_type":"c1","uid":1299673,"ip_address":"广东","ucode":"41959C9F5B4B65","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/d9/c3296187.jpg","comment_is_top":false,"comment_ctime":1660227055,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660227055","product_id":100035801,"comment_content":"请问下老师，在典型的并发穿透问题的第一个解决方案：在代码中控制在缓存失效之后 这句话。如何控制呢？我想要么是已经知道这个缓存在什么时候失效，也就是知道过期时间，到期了自动重新缓存；要么是有像定时任务的东西在每秒扫描这个缓存，如果不存在就重新写入缓存？是否有其他方式","like_count":0},{"had_liked":false,"id":349594,"user_name":"赵文帅","can_delete":false,"product_type":"c1","uid":2169775,"ip_address":"","ucode":"B36E8BD8136B02","user_header":"https://static001.geekbang.org/account/avatar/00/21/1b/af/f766fef7.jpg","comment_is_top":false,"comment_ctime":1656127733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656127733","product_id":100035801,"comment_content":"在代码中控制在某一个热点缓存项失效之后启动一个后台线程，穿透到数据库，这个方案是不是有问题，假如同一时刻大并发请求，那么每个请求都会创建自己的线程，每个线程也都会去查数据库，这样对服务器压力岂不是更大了，请老师解答一下","like_count":0},{"had_liked":false,"id":348180,"user_name":"试剑江湖","can_delete":false,"product_type":"c1","uid":1698551,"ip_address":"","ucode":"81FBCD0DEED201","user_header":"https://static001.geekbang.org/account/avatar/00/19/ea/f7/d08ffd72.jpg","comment_is_top":false,"comment_ctime":1654823412,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654823412","product_id":100035801,"comment_content":"通俗易懂","like_count":0},{"had_liked":false,"id":314202,"user_name":"无名小辈","can_delete":false,"product_type":"c1","uid":1303534,"ip_address":"","ucode":"F3E000D3AB119C","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/ee/28a60b35.jpg","comment_is_top":false,"comment_ctime":1632896499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632896499","product_id":100035801,"comment_content":"老师，结合上一讲的内容，这个布隆过滤器在多个client的缓存模式下面是不是不太行？如果有多个client都在写，那这个filter就没法存在在每个client，除非再想个办法来保证每个client上的一致。如果是存在在缓存之上的一个中间件或者是proxy上，涵盖每个写的操作，感觉比较靠谱。","like_count":0},{"had_liked":false,"id":304309,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1627349546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627349546","product_id":100035801,"comment_content":"不再存bit，存数字计数，删除的时候，比如从2变为1。那么请问老师，查询的时候一次是2，一次是1，不都代表是存在的意思么，删除如何体现？","like_count":0},{"had_liked":false,"id":304129,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1627266525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627266525","product_id":100035801,"comment_content":"布隆过滤器 跟bitmap 还有一个一样存在的缺点，就是如果预算数多，但实际量没有这么大的时候，空间利用率是明显低的。。","like_count":0},{"had_liked":false,"id":301159,"user_name":"1PxUp","can_delete":false,"product_type":"c1","uid":2533709,"ip_address":"","ucode":"09FC48FCADC3D9","user_header":"https://static001.geekbang.org/account/avatar/00/26/a9/4d/9d4f4e76.jpg","comment_is_top":false,"comment_ctime":1625558334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625558334","product_id":100035801,"comment_content":"这里老师关于不隆过滤器的定义，可能会有一点歧义，不应当是一个二进制数组和「一个 Hash 算法」，而是「一系列 Hash 算法」。我的理解一个 Hash 算法只是一种简化的使用方式。","like_count":0},{"had_liked":false,"id":293416,"user_name":"₯㎕、AmberLavigne","can_delete":false,"product_type":"c1","uid":1699576,"ip_address":"","ucode":"6246705BE0BD87","user_header":"https://static001.geekbang.org/account/avatar/00/19/ee/f8/5222d593.jpg","comment_is_top":false,"comment_ctime":1621386872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621386872","product_id":100035801,"comment_content":"<br>Object nullValue = new Object();<br>try {<br>  Object valueFromDB = getFromDB(uid); &#47;&#47;从数据库中查询数据<br>  if (valueFromDB == null) {<br>    cache.set(uid, nullValue, 10);   &#47;&#47;如果从数据库中查询到空值，就把空值写入缓存，设置较短的超时时间<br>  } else {<br>    cache.set(uid, valueFromDB, 1000);<br>  }<br>} catch(Exception e) {<br>  cache.set(uid, nullValue, 10);<br>}这段代码执行的时刻是什么？定时异步嘛？","like_count":0},{"had_liked":false,"id":291053,"user_name":"₯㎕、AmberLavigne","can_delete":false,"product_type":"c1","uid":1699576,"ip_address":"","ucode":"6246705BE0BD87","user_header":"https://static001.geekbang.org/account/avatar/00/19/ee/f8/5222d593.jpg","comment_is_top":false,"comment_ctime":1619970770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619970770","product_id":100035801,"comment_content":"如果上锁后查询数据库这个中间的时间段来请求了，当问到有锁，这时不就读不到东西了。分布式锁的方式也比较简单，比方说 ID 为 1 的用户是一个热点用户，当他的用户信息缓存失效后，我们需要从数据库中重新加载数据时，先向 Memcached 中写入一个 Key 为&quot;lock.1&quot;的缓存项，然后去数据库里面加载数据，当数据加载完成后再把这个 Key 删掉。这时，如果另外一个线程也要请求这个用户的数据，它发现缓存中有 Key 为“lock.1”的缓存，就认为目前已经有线程在加载数据库中的值到缓存中了，它就可以重新去缓存中查询数据，不再穿透数据库了。","like_count":0},{"had_liked":false,"id":275248,"user_name":"明天你好","can_delete":false,"product_type":"c1","uid":1198570,"ip_address":"","ucode":"91891A15CEC263","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/ea/7ae90090.jpg","comment_is_top":false,"comment_ctime":1611409609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611409609","product_id":100035801,"comment_content":"老师好，如果我用户id使用的是数字，我可以直接用redis的集合当做布隆过滤器吗？集合里只存用户id，如果这个集合不是 big key是不是也可以这么做呢？","like_count":0},{"had_liked":false,"id":272075,"user_name":"tongzi","can_delete":false,"product_type":"c1","uid":2002210,"ip_address":"","ucode":"7349A6E42EDF17","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8d/22/0bf540be.jpg","comment_is_top":false,"comment_ctime":1609925607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609925607","product_id":100035801,"comment_content":"老师有个问题，<br>”对于极热点缓存数据穿透造成的“狗桩效应”，可以通过设置分布式锁或者后台线程定时加载的方式来解决。“<br>后台线程定时启动，怎么知道这个热点key，已经过期了？","like_count":0},{"had_liked":false,"id":253263,"user_name":"聪","can_delete":false,"product_type":"c1","uid":1009831,"ip_address":"","ucode":"9D672A8580A945","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/a7/c3fd1fd9.jpg","comment_is_top":false,"comment_ctime":1602665924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602665924","product_id":100035801,"comment_content":"redisbloom 2.2 今年7月更新了。可以用，不过不是伸缩性很强，不能删除item。里面有个Cuckoo filter 可以删除元素<br><br>https:&#47;&#47;oss.redislabs.com&#47;redisbloom&#47;2.2&#47;","like_count":0},{"had_liked":false,"id":245963,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1599122169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599122169","product_id":100035801,"comment_content":"老师，文章里提到：新注册的用户除了保存到库表，也要添加到布隆过滤器。<br><br>当我第一次上线布隆过滤器的功能时，是不是需要把全量的用户初始化到布隆过滤器吖？<br>如果有上亿的用户，只能找个业务低峰时初始化布隆过滤器了。<br><br>谢谢老师！！","like_count":0},{"had_liked":false,"id":223992,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1591252028,"is_pvip":false,"replies":[{"id":"82715","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1591538418,"ip_address":"","comment_id":223992,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1591252028","product_id":100035801,"comment_content":"缓存部分其实有缓存击穿、缓存穿透和缓存雪崩这三种场景.<br>缓存击穿是某些热点key，在某些时间点被高并发访问<br>缓存穿透是指大量查询一定不再缓存中的key，从而导致db压力较大情况<br>缓存雪崩实际上是指大量key同一时间过期，导致请求流向后端db~","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497328,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591538418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362750,"discussion_content":"缓存击穿是某些热点key，在某些时间点过期，这时被高并发访问，打到DB。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617023853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222274,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1590734721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590734721","product_id":100035801,"comment_content":"<br>1. “你想，如果布隆过滤器会将集合中的元素判定为不在集合中，那么我们就不确定被布隆过滤器判定为不在集合中的元素是不是在集合中。”感觉和上文“但是一旦布隆过滤器判断这个元素不在集合中时，它一定不在集合中”矛盾了，老能能再详细解释下吗？<br>2. 同样，本节课程也是说思想，缺乏代码实战。例如最后的利用分布式锁的“lock.1”方案，感觉说的不明不白","like_count":0},{"had_liked":false,"id":219733,"user_name":"ArtistLu","can_delete":false,"product_type":"c1","uid":1166373,"ip_address":"","ucode":"2E641A3EB4F9AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/cc/25/8c6eab2c.jpg","comment_is_top":false,"comment_ctime":1590071962,"is_pvip":true,"replies":[{"id":"83114","content":"谢谢~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1591803037,"ip_address":"","comment_id":219733,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590071962","product_id":100035801,"comment_content":"老师算大小写出每一个被除数真的很赞👍🏻","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495926,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591803037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210491,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1587777616,"is_pvip":false,"replies":[{"id":"78853","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1588069896,"ip_address":"","comment_id":210491,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587777616","product_id":100035801,"comment_content":"虽然，自己有对缓存穿透、击穿、雪崩的理解，也建议老师能对于这种相似的概念，弄个二维表对比讲解，这样就更清楚了。狗桩效应和击穿很相似就更需要对比讲解了，缓存穿透的解决思路基本就是回种特殊值和加过滤器了，我们基本用回种特殊值，毕竟空间相对便宜。","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493032,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588069896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208578,"user_name":"林腾","can_delete":false,"product_type":"c1","uid":1963793,"ip_address":"","ucode":"8E2438E56BF677","user_header":"","comment_is_top":false,"comment_ctime":1587386377,"is_pvip":false,"replies":[{"id":"78062","content":"看场景，如果请求量很大，阻塞了的话那么调用服务就会因为请求阻塞而挂掉，所以也可以返回空值让调用方来处理","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1587456724,"ip_address":"","comment_id":208578,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587386377","product_id":100035801,"comment_content":"老师好，有个疑问请教一下，如果出现狗桩效应，采用分布式锁的话，数据库加载到缓存是需要一定时间的，这时候没有拿到锁的请求是阻塞的状态直到获取缓存中的数据才返回么?","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492520,"discussion_content":"看场景，如果请求量很大，阻塞了的话那么调用服务就会因为请求阻塞而挂掉，所以也可以返回空值让调用方来处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587456724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197977,"user_name":"lofaith","can_delete":false,"product_type":"c1","uid":1322553,"ip_address":"","ucode":"5DF6922BBF1AD5","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/39/7682b49e.jpg","comment_is_top":false,"comment_ctime":1585405654,"is_pvip":false,"replies":[{"id":"74903","content":"看业务吧 看返回空值是否会影响业务","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585541594,"ip_address":"","comment_id":197977,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585405654","product_id":100035801,"comment_content":"老师，启动后台线程更新数据到缓存中，如果这时候有请求过来直接返回，返回什么呢，直接返回空值吗","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489630,"discussion_content":"看业务吧 看返回空值是否会影响业务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585541594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197614,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1585387919,"is_pvip":false,"replies":[{"id":"74904","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585541602,"ip_address":"","comment_id":197614,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585387919","product_id":100035801,"comment_content":"如果使用布隆过滤器是不是在更新数据库数据的时候，同时要去更新缓存和布隆过滤器里面只呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489561,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585541602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197435,"user_name":"Lin大坑haha~","can_delete":false,"product_type":"c1","uid":1307653,"ip_address":"","ucode":"1C0AC3009FA6CB","user_header":"https://static001.geekbang.org/account/avatar/00/13/f4/05/cbcaaef1.jpg","comment_is_top":false,"comment_ctime":1585377797,"is_pvip":false,"replies":[{"id":"74905","content":"🙏","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585541618,"ip_address":"","comment_id":197435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585377797","product_id":100035801,"comment_content":"很实用，很赞","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489520,"discussion_content":"🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585541618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196003,"user_name":"与狼共舞","can_delete":false,"product_type":"c1","uid":1391144,"ip_address":"","ucode":"02AC04B43F0194","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/28/cf707831.jpg","comment_is_top":false,"comment_ctime":1585229412,"is_pvip":false,"replies":[{"id":"75845","content":"谢谢🙏","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1586089025,"ip_address":"","comment_id":196003,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585229412","product_id":100035801,"comment_content":"以前确实没有考虑到这么多，GET到了。","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489198,"discussion_content":"谢谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586089025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186285,"user_name":"magic","can_delete":false,"product_type":"c1","uid":1024556,"ip_address":"","ucode":"A1BCF486381749","user_header":"","comment_is_top":false,"comment_ctime":1583817521,"is_pvip":false,"replies":[{"id":"72204","content":"一组","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584019862,"ip_address":"","comment_id":186285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583817521","product_id":100035801,"comment_content":"在删除布隆过滤器中的元素时，使用的是一个hash函数还是一组哈希函数？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486705,"discussion_content":"一组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584019862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183659,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1583109701,"is_pvip":false,"replies":[{"id":"71086","content":"看请求量，如果QPS高的话需要预热","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1583114759,"ip_address":"","comment_id":183659,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583109701","product_id":100035801,"comment_content":"缓存这部分存储的数据不需要预热么？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485744,"discussion_content":"看请求量，如果QPS高的话需要预热","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193703,"discussion_content":"那这个实际应用中有没有一个界限？比如日均请求量达到什么数量级或者QPS达到什么数量级？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583160553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183196,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1582970309,"is_pvip":false,"replies":[{"id":"71090","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1583114836,"ip_address":"","comment_id":183196,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1582970309","product_id":100035801,"comment_content":"布隆过滤器判断这个元素不在集合中时，它一定不在集合中<br>————————————————————————————<br>（之前举的例子有问题，重新举个例子）假如有用户A、B，并且A和B发生hash碰撞（A和B在数组中的位置一样）。 A在数据库中，B不在数据库。<br>现在先请求了B，那么在数组中对应位置为0，然再请求A，那么返回也就是0。 那么不就发生了认为A不在数据库中，但是实际上A在数据库中这种情况了吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485594,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324986,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/sj5FNib6wGL6lZoS9ZlhCyWehRmByToksrJicgJia05iaGEcSp9uthmJKlXuMGn1CUBicfdpj4XoMsgyJibquAGwIqIw/132","nickname":"艾瑞克","note":"","ucode":"3886599F102FE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207391,"discussion_content":"另外，因为布隆过滤器不能删除，所以只能保证，过滤器中没有的数据库中一定没有，保证不了，过滤器中有的数据库中一定有，即，false positive。适合应用于只判定没有的业务场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584494258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324986,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/sj5FNib6wGL6lZoS9ZlhCyWehRmByToksrJicgJia05iaGEcSp9uthmJKlXuMGn1CUBicfdpj4XoMsgyJibquAGwIqIw/132","nickname":"艾瑞克","note":"","ucode":"3886599F102FE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207349,"discussion_content":"先请求B时，为什么数组对应位置是0，不应该是1吗？毕竟A在库中，初始化时已经把数组对应位置写为1了。只是问题在于，请求B时，数组对应位置为1，误认为B存在，会发生一次缓存击穿。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584493047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1207302,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","nickname":"yuan","note":"","ucode":"EA3D0573478EC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1324986,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/sj5FNib6wGL6lZoS9ZlhCyWehRmByToksrJicgJia05iaGEcSp9uthmJKlXuMGn1CUBicfdpj4XoMsgyJibquAGwIqIw/132","nickname":"艾瑞克","note":"","ucode":"3886599F102FE7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211559,"discussion_content":"明白了，十分感谢！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584864997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":207349,"ip_address":""},"score":211559,"extra":""},{"author":{"id":1324986,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/sj5FNib6wGL6lZoS9ZlhCyWehRmByToksrJicgJia05iaGEcSp9uthmJKlXuMGn1CUBicfdpj4XoMsgyJibquAGwIqIw/132","nickname":"艾瑞克","note":"","ucode":"3886599F102FE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1207302,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","nickname":"yuan","note":"","ucode":"EA3D0573478EC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211911,"discussion_content":"不客气，互相学习😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584892413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":211559,"ip_address":""},"score":211911,"extra":""}]}]},{"had_liked":false,"id":179642,"user_name":"AngryApe","can_delete":false,"product_type":"c1","uid":1414971,"ip_address":"","ucode":"E0125A8D2AC84B","user_header":"https://static001.geekbang.org/account/avatar/00/15/97/3b/c98b68c1.jpg","comment_is_top":false,"comment_ctime":1582052893,"is_pvip":false,"replies":[{"id":"69764","content":"没有错误，我这个是假设，想说明的是布隆过滤器对于缓存穿透场景是有效的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1582074984,"ip_address":"","comment_id":179642,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1582052893","product_id":100035801,"comment_content":"你想，如果布隆过滤器会将集合中的元素判定为不在集合中，那么我们就不确定被布隆过滤器判定为不在集合中的元素是不是在集合中。假设在刚才的场景中，如果有大量查询未注册的用户信息的请求存在，那么这些请求到达布隆过滤器之后，即使布隆过滤器判断为不是注册用户，那么我们也不确定它是不是真的不是注册用户，那么就还是需要去数据库和缓存中查询，这就使布隆过滤器失去了价值。<br>-------<br>这一段完全是错误的，建议尽快修正，不要影响到后面的读者了","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484339,"discussion_content":"没有错误，我这个是假设，想说明的是布隆过滤器对于缓存穿透场景是有效的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582074984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362757,"discussion_content":"个人认为老师的说法没问题。只是这解释我认为不太好。我个人的理解：存在哈希冲突，只要有一个在数据库，那么布隆过滤器中就会标识为存在，只有全部哈希冲突的值都不在数据库，此时才会标识为不存在，所以判断存在有误判，但是判断不存在，一定不会有误判。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617024927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178997,"user_name":"Céline","can_delete":false,"product_type":"c1","uid":1711849,"ip_address":"","ucode":"1C82C3169DF82C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1e/e9/98556d05.jpg","comment_is_top":false,"comment_ctime":1581868587,"is_pvip":false,"replies":[{"id":"69769","content":"1. 我理解狗桩效应更加极端，穿透是一个普遍的概念<br>2. 其实不用区分A和B吧，我理解只要A和B访问时，布隆过滤器计算hash值后确认在布隆过滤器中就好了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1582076550,"ip_address":"","comment_id":178997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581868587","product_id":100035801,"comment_content":"您好，看了文章有两个小问题。<br>1.其实其他读者也有问到，按文章所说，狗桩效应指的是热点缓存项失效后导致大量请求访问数据库带来的数据库压力，这不是跟缓存击穿是一个概念吗，缓存击穿指的不就是热点缓存项的失效吗？<br>2.讨论bloomfilter过程中，您提到为了克服其不能删除索引的缺陷，可以把数组的值由0&#47;1改为具体的值，如“A和B有同样的hash值映射到同一个索引后，更新索引值为2”，这里该如何确定A和B是两个不同的id呢，毕竟数组只会根据hash值来索引。我设想的方案是：比如已经写入了A，更新数组值为1，此时再写入B，其实就是false positive的情况，但访问缓存和数据库后发现并没有这个id，因此写入数据库再回传更新数组值为2，这样可以吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484055,"discussion_content":"1. 我理解狗桩效应更加极端，穿透是一个普遍的概念\n2. 其实不用区分A和B吧，我理解只要A和B访问时，布隆过滤器计算hash值后确认在布隆过滤器中就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582076550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173549,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1249512,"ip_address":"","ucode":"E0AFA940BEAC1C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/e8/172b5915.jpg","comment_is_top":false,"comment_ctime":1579593840,"is_pvip":false,"replies":[{"id":"67355","content":"是的，是可以解决缓存穿透的问题的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579694552,"ip_address":"","comment_id":173549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579593840","product_id":100035801,"comment_content":"“你想，如果布隆过滤器会将集合中的元素判定为不在集合中，那么我们就不确定被布隆过滤器判定为不在集合中的元素是不是在集合中。假设在刚才的场景中，如果有大量查询未注册的用户信息的请求存在，那么这些请求到达布隆过滤器之后，即使布隆过滤器判断为不是注册用户，那么我们也不确定它是不是真的不是注册用户，那么就还是需要去数据库和缓存中查询，这就使布隆过滤器失去了价值。”<br><br>老师，这里没看懂，是怎么证明布隆过滤器很适合缓存穿透的……","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482110,"discussion_content":"是的，是可以解决缓存穿透的问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579694552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172062,"user_name":"悟空WuKong","can_delete":false,"product_type":"c1","uid":1139455,"ip_address":"","ucode":"49AFD2B048C1BA","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/ff/f71034e9.jpg","comment_is_top":false,"comment_ctime":1579080699,"is_pvip":false,"replies":[{"id":"66905","content":"不是的，狗桩效应是文中特指的那种情况","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579228435,"ip_address":"","comment_id":172062,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1579080699","product_id":100035801,"comment_content":"狗桩效应和缓存击穿是一个意思吧","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481606,"discussion_content":"不是的，狗桩效应是文中特指的那种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579228435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442497,"avatar":"https://static001.geekbang.org/account/avatar/00/16/02/c1/80e68043.jpg","nickname":"停三秒","note":"","ucode":"C9D8F39F24672E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204927,"discussion_content":"老师是否可以明确一下狗桩效应和缓存击穿的定义和区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584240302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167435,"user_name":"鲲哥","can_delete":false,"product_type":"c1","uid":1230812,"ip_address":"","ucode":"D9582DF7806900","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/dc/1268c9f9.jpg","comment_is_top":false,"comment_ctime":1577794927,"is_pvip":false,"replies":[{"id":"65114","content":"缓存节点会有统计命中数和miss数的监控，可以计算命中率。<br><br>是的，命中率低的时候要考虑缓存穿透的问题","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577935551,"ip_address":"","comment_id":167435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577794927","product_id":100035801,"comment_content":"请问是您如何监控缓存命中率的？还有什么场景下要考虑缓存穿透问题，就是缓存命中率低的时候吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479866,"discussion_content":"缓存节点会有统计命中数和miss数的监控，可以计算命中率。\n\n是的，命中率低的时候要考虑缓存穿透的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165574,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1577262097,"is_pvip":false,"replies":[{"id":"63152","content":"是长期有效的，在redis中可以保证是持久化的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577275801,"ip_address":"","comment_id":165574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577262097","product_id":100035801,"comment_content":"不太明白布隆过滤器怎么实现，是先在缓存中比如说借助redis生成一个空数组，然后新注册用户根据用户id哈西之后得到的索引值设置为1吗？这个存数组的缓存是长期有效的吗？如果机器重启以后缓存失效这个数组还要重新生成对吧","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479210,"discussion_content":"是长期有效的，在redis中可以保证是持久化的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577275801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165567,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1577261567,"is_pvip":false,"replies":[{"id":"63153","content":"谢谢","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577275807,"ip_address":"","comment_id":165567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577261567","product_id":100035801,"comment_content":"讲的很实用，不错","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479207,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577275807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148896,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1573105189,"is_pvip":false,"replies":[{"id":"57328","content":"可以加分布式锁来限制到db的请求<br>","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573169869,"ip_address":"","comment_id":148896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573105189","product_id":100035801,"comment_content":"如果緩存過期後還沒來得及做cache aside就來了一波爆發流量，那麼那些沒有緩存的數據會不會導致後台數據庫的高併發請求？怎麼能在緩存快過期時候自動續租？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473658,"discussion_content":"可以加分布式锁来限制到db的请求\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573169869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147305,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1572857598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572857598","product_id":100035801,"comment_content":"这篇文章厉害，哈哈。布隆过滤器的优缺点👍","like_count":0},{"had_liked":false,"id":145828,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572393423,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1572393423","product_id":100035801,"comment_content":"什么业务场景下会大量读取未注册的用户信息呢😥","like_count":0,"discussions":[{"author":{"id":1365988,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d7/e4/0cd835d1.jpg","nickname":"yuny","note":"","ucode":"D4A1475B86A03B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67905,"discussion_content":"被攻击  或爬虫的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575188179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1365988,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d7/e4/0cd835d1.jpg","nickname":"yuny","note":"","ucode":"D4A1475B86A03B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":364561,"discussion_content":"爬虫获取信息，用户未注册怎么被爬取？不太理解\n我唯一能联想的到时撞库攻击","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617518705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":67905,"ip_address":""},"score":364561,"extra":""}]}]},{"had_liked":false,"id":144071,"user_name":"电光火石","can_delete":false,"product_type":"c1","uid":1013160,"ip_address":"","ucode":"3AD33BB4AA940F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","comment_is_top":false,"comment_ctime":1571839121,"is_pvip":false,"replies":[{"id":"55613","content":"额，黑名单是全局的黑名单还是针对某一个人的黑名单？<br>数据量有多大？感觉没有必要使用bloom filter吧，直接使用缓存可以解决吗","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571855603,"ip_address":"","comment_id":144071,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1571839121","product_id":100035801,"comment_content":"老师，请问一下：我们用bloom filter在做黑名单的功能，在黑名单中就放到bloomfilter中。但是在黑名单发生变化的时候，bloom filter里面是没有办法更新的，我就做了一个5分钟的定时任务，定时从新从DB里面获取全量数据，重新构建bloom filter，这个对数据库压力也比较大，而且每5分钟就有一大片的内存被回收，产生gc。不知道有没有更好的版本来做更新，谢谢了！","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471804,"discussion_content":"额，黑名单是全局的黑名单还是针对某一个人的黑名单？\n数据量有多大？感觉没有必要使用bloom filter吧，直接使用缓存可以解决吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571855603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1417113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/99/46ebc741.jpg","nickname":"Richie","note":"","ucode":"2530B54C8860BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39006,"discussion_content":"黑名单不是会有误判么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571877908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/82/b5808a60.jpg","nickname":"李冲","note":"","ucode":"C8C12308B0FDDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1417113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/99/46ebc741.jpg","nickname":"Richie","note":"","ucode":"2530B54C8860BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39207,"discussion_content":"对的，这个也要看碰撞概率了，2000W对上32位hash的42亿只占用了0.5%的空间，如果误判指标较真的话就上两个过滤器用不同的hash。这个数据量也用不了多少内存，直接用缓存也可以","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571904444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39006,"ip_address":""},"score":39207,"extra":""}]},{"author":{"id":1013160,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","nickname":"电光火石","note":"","ucode":"3AD33BB4AA940F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38983,"discussion_content":"是全局黑名单，有针对ip的，有针对手机号码的，每个单独做了一个bloomfilter，单个黑名单的数据量在2千万左右，为了降低请求响应耗时，用过滤器来处理的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571875156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1201733,"avatar":"https://static001.geekbang.org/account/avatar/00/12/56/45/24a5eea7.jpg","nickname":"小河","note":"","ucode":"70E299D670D0B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013160,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","nickname":"电光火石","note":"","ucode":"3AD33BB4AA940F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204327,"discussion_content":"感觉你这个直接使用redis hash数据结构存储就可以呀，加入黑名单的时候放入hash即可。不同类型的黑名单可以使用不同的key、如果怕hash filed太大，可以将用户id进行hash取模在存入不同的hash ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584154951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38983,"ip_address":""},"score":204327,"extra":""},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013160,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","nickname":"电光火石","note":"","ucode":"3AD33BB4AA940F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364562,"discussion_content":"ip和手机号码是规则数据，可不可以考虑用正则匹配？\n对于误判可以添加白名单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617518865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38983,"ip_address":""},"score":364562,"extra":""}]}]},{"had_liked":false,"id":143825,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1571796256,"is_pvip":false,"replies":[{"id":"55610","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571855014,"ip_address":"","comment_id":143825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571796256","product_id":100035801,"comment_content":"使用多个hash函数的话，也有可能存在误判的吧？只是误判率大小的问题","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471709,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571855014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143763,"user_name":"Jason_鹏","can_delete":false,"product_type":"c1","uid":1179329,"ip_address":"","ucode":"4A3DCAAC531724","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/c1/6c99fff4.jpg","comment_is_top":false,"comment_ctime":1571789837,"is_pvip":false,"replies":[{"id":"55503","content":"可以定期写在磁盘上，类似redis那种rdb+aof的实现","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571793110,"ip_address":"","comment_id":143763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571789837","product_id":100035801,"comment_content":"用布隆过滤器的话，需要每次都把已有的key初始化到内存中，如果有20亿的数据每当系统重启的时候这个初始化的时间可不少，有啥好方式解决呢","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471674,"discussion_content":"可以定期写在磁盘上，类似redis那种rdb+aof的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571793110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143702,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1571758420,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571758420","product_id":100035801,"comment_content":"在向后端查询时可以合并请求","like_count":0,"discussions":[{"author":{"id":1114064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/d0/402be1e9.jpg","nickname":"VIC","note":"","ucode":"3B3E6D344488B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299043,"discussion_content":"怎么做到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597544163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143458,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1571711811,"is_pvip":true,"replies":[{"id":"55491","content":"可以单独部署一组服务，服务中初始化多个数组，这样服务可以共用这一套","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571792555,"ip_address":"","comment_id":143458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571711811","product_id":100035801,"comment_content":"布隆过滤器使用时集群中是每个服务上都会存储一个数组吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471548,"discussion_content":"可以单独部署一组服务，服务中初始化多个数组，这样服务可以共用这一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571792555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143430,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1090784,"ip_address":"","ucode":"563C4A71D80DA1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwQvLGE4dMsF4JU0svW3DtGbodpjskbY65FdwF13JdtBYZfgL2IXHlHrdejWzHdjT0RibEIfib4QYA/132","comment_is_top":false,"comment_ctime":1571708109,"is_pvip":false,"replies":[{"id":"55498","content":"可以监控缓存项的请求量 ，或者根据前端的请求量来判断","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571792845,"ip_address":"","comment_id":143430,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571708109","product_id":100035801,"comment_content":"“分布式锁的方式也比较简单，比方说 ID 为 1 的用户是一个热点用户，当他的用户信息缓存失效后，我们需要从数据库中重新加载数据时，先向 Memcached 中写入一个 Key 为&quot;lock.1&quot;的缓存项”<br>老师，怎么判断是不是热点用户啊，这个不是动态的吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471533,"discussion_content":"可以监控缓存项的请求量 ，或者根据前端的请求量来判断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571792845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143418,"user_name":"Corner","can_delete":false,"product_type":"c1","uid":1446316,"ip_address":"","ucode":"7862D593172536","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/ac/9cc5e692.jpg","comment_is_top":false,"comment_ctime":1571706948,"is_pvip":false,"replies":[{"id":"55497","content":"可以用cache aside策略","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571792800,"ip_address":"","comment_id":143418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571706948","product_id":100035801,"comment_content":"请问老师在使用缓存应对高并发的时候，怎么保证如库存，价格等的缓存和数据库一致性呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471528,"discussion_content":"可以用cache aside策略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571792800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143176,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1571643073,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571643073","product_id":100035801,"comment_content":"这种方式也适合缓存击穿吗？ ","like_count":0,"discussions":[{"author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37622,"discussion_content":"适合呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571647750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143038,"user_name":"饭团","can_delete":false,"product_type":"c1","uid":1332557,"ip_address":"","ucode":"E24F240CC91BE8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","comment_is_top":false,"comment_ctime":1571623095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571623095","product_id":100035801,"comment_content":"学习了！","like_count":0},{"had_liked":false,"id":143036,"user_name":"Keep-Moving","can_delete":false,"product_type":"c1","uid":1182631,"ip_address":"","ucode":"76F33C06E07A27","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/a7/6ef32187.jpg","comment_is_top":false,"comment_ctime":1571622948,"is_pvip":false,"replies":[{"id":"55267","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571626533,"ip_address":"","comment_id":143036,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571622948","product_id":100035801,"comment_content":"#### 缓存穿透的解决方案<br>* 回种空值<br>* 布隆过滤器<br><br>#### 布隆过滤器的缺陷及解决方案<br>1. 在判断元素是否在集合中时有一定的出错几率<br>    * 解决方案：使用多个Hash算法计算出多个hash值，只有多个hash值对应的数组中的值都为1时，才认为元素在储存中<br>2. 不支持删除元素<br>    *  解决方案：数组中不再只是0和1，而是一个计数，比如如果元素A和B同时命中了一个数组索引，那么这个位置的值就为2，但这种方式会增加空间的消耗","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471356,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571626533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1352955,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a4/fb/cd8f4363.jpg","nickname":"不才陈某","note":"","ucode":"6CF4D7B84F2374","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248944,"discussion_content":"同样的问题，如果A从布隆过滤器中删除，此时的值变为1，那么B再次hash判断，如何判断此时的值为1就一定是B通过hash而来的呢？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587903648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143004,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1571619348,"is_pvip":false,"replies":[{"id":"55283","content":"1. 等待的话，它已经得到的资源不会释放，也会阻塞<br>2. 排行榜的数据可以使用定时任务来更新的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1571632155,"ip_address":"","comment_id":143004,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571619348","product_id":100035801,"comment_content":"老师好，想问一下，关于热点缓存失效后有大量并发请求穿透到数据库去查询，这种如果用分布式锁，没有拿到锁的请求直接返回或者在查缓存都可能得到错误或者无效的结果，是不是应该等待拿到锁的查询到数据写入缓存后在去查呢？？这样有大量请求阻塞，会不会对系统造成压力。还有就是对于所有用户都读取同一份的缓存，比如排行榜，可以用定时任务在缓存失效前去更新缓存，这种方案怎么样呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471348,"discussion_content":"1. 等待的话，它已经得到的资源不会释放，也会阻塞\n2. 排行榜的数据可以使用定时任务来更新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571632155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142996,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1571617924,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1571617924","product_id":100035801,"comment_content":"有点吃力了","like_count":0}]}