{"id":93817,"title":"25 | 怎样构建底层的发布和订阅事件总线？","content":"<p>你好，我是戴铭。今天，我来跟你聊聊怎么构建事件总线。</p><p>事件总线是对发布和订阅设计模式的一种实现，通过发布、订阅可以将组件间一对一和一对多的耦合关系解开。这种设计模式，特别适合数据层通过异步发布数据的方式告知 UI 层订阅者，使得 UI 层和数据层可以不用耦合在一起，在重构数据层或者 UI 层时不影响业务层。</p><p>现在，我们先一起来捋一下 iOS 系统里有没有现成可用的技术，当数据层异步发布数据后，可以通过 Delegate 回调给 UI 层来进行展示，但是这个只适合一对一的模式。如果异步处理完后，还需要将数据发布给其他 UI 进行处理和展示的话，就需要继续发布给其他 Delegate，从而造成 Delegate 套 Delegate 的情况。</p><p>使用 Block 和使用 Delegate 的情况类似。如果需要不断异步发布给下一个数据订阅者的话，也会出现 Block 回调嵌套其他 Block 回调的情况。</p><p>iOS 系统里也有一对多模式的技术，比如 KVO 和 NSNotificationCenter。</p><p>使用 KVO 是强依赖属性的，只要更新了属性就会发布给所有的观察者，对应关系过于灵活，难以管控和维护。NSNotificationCenter 也有类似的问题，通过字符串来维护发布者和订阅者之间的关系，不仅可读性差，而且和 KVO 一样面临着难以管控和维护的情况。</p><!-- [[[read_end]]] --><p>总的来说，由于 Delegate 和 Block 只适合做一对一数据传递，KVO 和 NSNotificationCenter 虽然可以支持一对多的数据传递，但存在过于灵活而无法管控和维护的问题，而事件总线需要通过发布和订阅这种可管控方式实现一对一和一对多数据传递。由此可以看出，iOS 现有的 Delegate、Block、KVO、NSNotificationCenter 等技术并不适合来做事件总线。</p><p>既然iOS系统提供的技术没有适合做事件总线的，那么有没有好的第三方库可以处理事件总线呢？</p><p>其实，响应式第三方库 ReactiveCocoa 和 RxSwift 对事件总线的支持是没有问题的，但这两个库更侧重的是响应式编程，事件总线只是其中很小的一部分。所以，使用它们的话，就有种杀鸡焉用牛刀的感觉。</p><p>那么，事件总线有没有小而美的第三方库可用呢？</p><h2>Promise</h2><p>现在前端领域有一种模式叫作 Promise，这是一种专门针对异步数据操作编写的一套统一规则的模式。</p><p>本质上，这种模式本质是通过 Promise 对象保存异步数据操作，同时 Promise 对象提供统一的异步数据操作事件处理的接口。这样，事件总线的数据订阅和数据发布事件，就可以通过 Promise 对象提供的接口实现出来，比以前通过Delegate回调处理异步事件来说更加合理。</p><p>接下来，我们再一起看看，Promise 模式中的 Promise 对象是怎么运作的。</p><p>Promise的概念最早是在 <a href=\"http://erights.org/elib/distrib/pipeline.html\">E 语言</a>中被提出的。C++ 11 以 std :: promise 模板形式加入到标准库中，随后出现了 CommonJS Promises/A 规范，jQuery 将这个规范实现后引入到 jQuery 1.5 版本中。</p><p>Promise 模式大受欢迎后， ECMAScript 6 将其写入了语言标准，统一了用法，并提供了原生 的Promise 对象。 Promise 对象里保存有异步事件，Promise 的统一接口，使得其他异步操作都能够用相同的接口来处理事件。</p><p><strong>Promise 对象会有三种状态</strong>，分别是 pending、fulfilled、rejected：</p><ul>\n<li>pending 表示 Promise 对象当前正在等待异步事件处理中；</li>\n<li>fulfilled 指的是 Promise 对象当前处理的异步事件已经成功完成；</li>\n<li>rejected 表示 Promise 对象当前处理的异步事件没有成功。</li>\n</ul><p><strong>Promise 对象还有两个重要的方法</strong>，分别是 then 和 catch。Promise 对象每次执行完 then 和 catch 方法后，这两个方法会返回先前的 Promise 对象，同时根据异步操作结果改变 Promise 对象的状态。</p><p>then 和 catch 方法与 Promise 对象状态更改关系，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/99/c9/999e30f1245495434e8d39186d70c5c9.png?wh=1920*1080\" alt=\"\"><br>\n如上图所示，执行 then 方法后返回的Promise 对象是 rejected 状态的话，程序会直接执行 catch 方法。then 方法执行的就是订阅操作，Promise 对象触发 then 方法就是事件总线中的发布操作，then 方法执行完返回 Promise 对象能够继续同步执行多个 then 方法，由此，实现了一个发布操作对应多个订阅事件。</p><p>有了 Promise 对象后，整个异步发布和订阅操作都以同步操作的方式表现出来了。Promise 对象不仅能够避免回调层层嵌套，而且通过 Promise的统一接口，使得事件总线的发布和订阅操作更加规范和易用。</p><h2>PromiseKit</h2><p>ECMAScript 6 已经内置了 Promise 对象，使得前端开发者无需引入其他库就能够直接使用 Promise 来进行日常开发。随后，Homebrew的作者 Max Howell 开发了 PromiseKit，将 Promise 标准带到了 iOS 中。所以，现在 iOS 上也有了小而美的事件总线技术。</p><p>接下来，我就跟你介绍下如何使用 PromiseKit 吧，相信你一定会有种相见恨晚的感觉。</p><p>我们先来看看<strong>如何使用 Promise 对象的 then 和 catch 方法</strong>。</p><p>假设有这么一个需求：</p><ul>\n<li>首先，通过一个异步请求获取当前用户信息；</li>\n<li>然后，根据获取到的用户信息里的用户编号再去异步请求获取用户的时间轴列表；</li>\n<li>最后，将用户的时间轴列表数据，赋值给当前类的时间轴列表属性。</li>\n</ul><p>这里，我先给出使用 PromiseKit 实现的具体代码，然后我再和你分析其中的关键步骤。</p><p>使用PromiseKit实现的代码如下：</p><pre><code>firstly {\n    // 异步获取当前用户信息\n    fetchUserInfo()\n}.then { userInfo in\n    // 使用异步获取到的用户信息中的 uid 再去异步获取用户的 timeline\n    fetchUserTimeline(uid: userInfo.uid)\n}.then { timeline in\n    // 记录 timeline\n    self.timeline = timeline\n}.catch {\n    // 整个方法链的错误都会在这处理\n}\n</code></pre><p>可以看出，多次异步请求通过 Promise 的方法调用，看起来就像进行同步操作一样，顺序和逻辑也更加清晰了。使用 then 方法可以让异步操作一个接着一个地按顺序进行。如果异步操作 fetchUserInfo 失败，会返回一个状态是 rejected 的 Promise 对象，返回的这个 Promise对象会跳过后面所有的then 方法直接执行 catch 方法。这就和事件总线中发布事件触发后，订阅事件会一个接一个执行是一样的。</p><p>除了 then 和 catch 方法以外，PromiseKit 还有一些好用的方法。</p><ul>\n<li>比如 always方法。使用了 always 方法以后， Promise 对象每次在执行方法时，都会执行一次 always 方法。</li>\n<li>再比如when 方法。这个方法的使用场景就是，指定多个异步操作，等这些操作都执行完成后就会执行 when 方法。when 方法类似 GCD 里面的 Dispatch Group，虽然实现的功能一样，但是代码简单了很多，使用起来也更加方便。</li>\n</ul><p>PromiseKit 还为苹果的 API 提供了扩展。这些扩展需要单独集成，你可以在<a href=\"https://github.com/PromiseKit\">PromiseKit 组织页面</a>获取。目前大部分常用的API都有扩展，比如 UIKit、Foundation、CoreLocation、QuartzCore、CloudKit 等等，甚至还支持了第三方的框架 Alamofire。</p><p>如果你觉得PromiseKit 提供的扩展还不够，还想让你使用的第三方库也支持 Promises的话，可以通过 PromiseKit 提供的扩展文档，或者直接查看已支持的第三方库（比如 Alamofire ）的扩展实现，去学习如何让其他库也支持 Promises。</p><h2>小结</h2><p>在今天这篇文章中，我和你分享了事件总线是什么，以及事件总线解决了什么样的问题。</p><p>当工程业务逻辑越来越复杂时，你会发现如果数据层和 UI 层不做解耦，日后想进行重构或者优化就会非常困难。这，也是很多工程前期没有使用事件总线，到了后期会留下大量无法修改的代码的原因所在。</p><p>如果使用类似 Promise 这样的技术规范实现事件总线，通过简单、清晰、规范的 Promise 接口将异步的数据获取、业务逻辑、界面串起来，对于日后的维护或重构都会容易很多。</p><h2>课后小作业</h2><p>PromiseKit不仅支持 Swift语言，还支持 Objective-C。所以，今天的课后作业是，将 PromiseKit 集成到你的Objective-C工程中，并对其中一个模块进行改造。</p><p>很多优秀工具都是用过才知道好，心动不如行动，你也试试吧。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"24 | A/B 测试：验证决策效果的利器","id":93097},"right":{"article_title":"26 | 如何提高 JSON 解析的性能？","id":93819}},"comments":[{"had_liked":false,"id":92221,"user_name":"郑杰","can_delete":false,"product_type":"c1","uid":1014917,"ip_address":"","ucode":"789EAB2A08EBEF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/85/8b221758.jpg","comment_is_top":false,"comment_ctime":1557204334,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"194830732654","product_id":100024501,"comment_content":"这里只说了 嵌套回调的问题用PromiseKit怎么解决，没说PromiseKit怎么实现事件总线啊","like_count":46,"discussions":[{"author":{"id":1147040,"avatar":"https://static001.geekbang.org/account/avatar/00/11/80/a0/26a8d76b.jpg","nickname":"Chok Wah","note":"","ucode":"4DD3D6E978BA36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374980,"discussion_content":"2021年了，还是不变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621429770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1458509,"avatar":"https://static001.geekbang.org/account/avatar/00/16/41/4d/35a56bf5.jpg","nickname":"溪风","note":"","ucode":"A3836221833AD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302283,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598867752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099324,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/3c/8ab9deb0.jpg","nickname":"@许还真","note":"","ucode":"6D754D5AE44CEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283425,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592272026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003193,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4e/b9/37a5b57a.jpg","nickname":"Cofunctor","note":"","ucode":"A3F644248719F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33197,"discussion_content":"这篇文章是不是没写完？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571107557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92160,"user_name":"zhangkk","can_delete":false,"product_type":"c1","uid":1454235,"ip_address":"","ucode":"9B3FEF97CDED55","user_header":"https://static001.geekbang.org/account/avatar/00/16/30/9b/7bddc304.jpg","comment_is_top":false,"comment_ctime":1557193508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23032029988","product_id":100024501,"comment_content":"如果一对多，多个类之间需要传递一个公共promise对象，来接受catch回调后的通知？","like_count":6},{"had_liked":false,"id":99223,"user_name":"GREEN ISLAND","can_delete":false,"product_type":"c1","uid":1131989,"ip_address":"","ucode":"E836FC7DE402C9","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/d5/df2614f5.jpg","comment_is_top":false,"comment_ctime":1559179159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18739048343","product_id":100024501,"comment_content":"一对多 都没听倒具体用法","like_count":5},{"had_liked":false,"id":92315,"user_name":"mosn","can_delete":false,"product_type":"c1","uid":1454761,"ip_address":"","ucode":"0FD6967D15DB64","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/a9/ce5d2609.jpg","comment_is_top":false,"comment_ctime":1557230526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18737099710","product_id":100024501,"comment_content":"PromiseKit 和 Bolts-iOS, 还有 coobjc 哪个好？","like_count":5},{"had_liked":false,"id":116647,"user_name":"Calabash_Boy","can_delete":false,"product_type":"c1","uid":1453760,"ip_address":"","ucode":"19E4D819792983","user_header":"","comment_is_top":false,"comment_ctime":1563884653,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5858851949","product_id":100024501,"comment_content":"&quot;NSNotificationCenter是难以管控和维护的&quot;,这句话不知大佬是如何理解的? ","like_count":1,"discussions":[{"author":{"id":1243460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/44/1a5e5992.jpg","nickname":"Tracy.li","note":"","ucode":"0338DEC133CC9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343162,"discussion_content":"就是通知发出去了就不管了，懂了没？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610960894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2263562,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8a/0a/bfec1501.jpg","nickname":"An","note":"","ucode":"F4CD3377DF0D5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340158,"discussion_content":"高类聚、低耦合。。我想应该可以解释吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609919938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1431314,"avatar":"https://static001.geekbang.org/account/avatar/00/15/d7/12/416b60ba.jpg","nickname":"Sean Ma","note":"","ucode":"A467C04AF3CADE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5289,"discussion_content":"假设如果某个类注册了通知，而又内存泄漏没有被释放，可能就会出现一堆莫名其妙的bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566138742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95250,"user_name":"我唔知点死啊","can_delete":false,"product_type":"c1","uid":1454319,"ip_address":"","ucode":"032CCE72B8F848","user_header":"","comment_is_top":false,"comment_ctime":1557997155,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5852964451","product_id":100024501,"comment_content":"花了3天的时间，把PromiseKit应用到OC项目中，并修改了注册登录模块。代码简化很多，看起来也很舒服。目前遇到2个问题：<br>1. 如何延时处理下一个操作？（比如：注册成功后延时2秒再登录）<br>2. 文章中介绍了always和when方法，而在AnyPromise类文件却没看到它们的踪影。","like_count":1,"discussions":[{"author":{"id":1627358,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia5Ax51D8Nyap5xcPkaveicguf5Nm4715fXKT4TfccvBYKiabWVJTeHtrejmDNtdmM12JYLzxiaUVEQ/132","nickname":"Rookie-Red","note":"","ucode":"A2CC287D3442D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17285,"discussion_content":"// When使用  univercityPromise 和 hotCityPromise 是独立的请求。\n    PMKWhen(@[univercityPromise, hotCityPromise]).then(^(){}","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568966348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1093005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ad/8d/3b2ac759.jpg","nickname":"大年初一","note":"","ucode":"AE2AE59763BFCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93521,"discussion_content":"再写一个 then","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576930780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92190,"user_name":"梅长苏","can_delete":false,"product_type":"c1","uid":1238732,"ip_address":"","ucode":"DD1CBB46E444A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/cc/7fc82af4.jpg","comment_is_top":false,"comment_ctime":1557198106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852165402","product_id":100024501,"comment_content":"除了RAC还有纯OC的发布 订阅框架吗？","like_count":1},{"had_liked":false,"id":92095,"user_name":"yuhao0x0628","can_delete":false,"product_type":"c1","uid":1332463,"ip_address":"","ucode":"BFD472974828A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/ef/3cdfd916.jpg","comment_is_top":false,"comment_ctime":1557188327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5852155623","product_id":100024501,"comment_content":"PromiseKit 帶來 delegate 與 block 的解偶，並且增加易讀性與 避免 callback 地獄。項目也正在使用lib, Google 也開源了自己的 Promise lib, Promises, 提供 await 等更加直覺的使用方式，最近打算來評估一下。","like_count":2},{"had_liked":false,"id":248664,"user_name":"享受慢生活🚨🚨","can_delete":false,"product_type":"c1","uid":1658839,"ip_address":"","ucode":"1B381CBE50B78B","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/d7/79f72168.jpg","comment_is_top":false,"comment_ctime":1600255719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600255719","product_id":100024501,"comment_content":"其实ios原生有内部支持的opration q 也是支持的以及swift的result ","like_count":0},{"had_liked":false,"id":150197,"user_name":"叶小合","can_delete":false,"product_type":"c1","uid":1453701,"ip_address":"","ucode":"C41C95AAEA8C4A","user_header":"https://static001.geekbang.org/account/avatar/00/16/2e/85/358315f3.jpg","comment_is_top":false,"comment_ctime":1573477446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573477446","product_id":100024501,"comment_content":"oc开发环境集成PromiseKit 全是错误","like_count":0},{"had_liked":false,"id":96465,"user_name":"徐秀滨","can_delete":false,"product_type":"c1","uid":1457337,"ip_address":"","ucode":"36895D00A181FB","user_header":"https://static001.geekbang.org/account/avatar/00/16/3c/b9/42b228f8.jpg","comment_is_top":false,"comment_ctime":1558429843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558429843","product_id":100024501,"comment_content":"想要让then能够传递参数，那么必须在then的block返回Promise，但是如果block是数据请求，那就会破坏已有的写法。这个要怎么处理呢？","like_count":0},{"had_liked":false,"id":94007,"user_name":"开元₂³³³³³³³","can_delete":false,"product_type":"c1","uid":1170155,"ip_address":"","ucode":"AB391580A9B051","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/eb/0a356fdb.jpg","comment_is_top":false,"comment_ctime":1557705969,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1557705969","product_id":100024501,"comment_content":"希望大神能讲讲promise的具体应用，知道这个框架，一直无法应用到自己的项目","like_count":0,"discussions":[{"author":{"id":1243460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/44/1a5e5992.jpg","nickname":"Tracy.li","note":"","ucode":"0338DEC133CC9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343163,"discussion_content":"去学学前端吧  你就会了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610961015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93114,"user_name":"@syj@","can_delete":false,"product_type":"c1","uid":1271764,"ip_address":"","ucode":"FB7647C7F2EE8E","user_header":"https://static001.geekbang.org/account/avatar/00/13/67/d4/97eded36.jpg","comment_is_top":false,"comment_ctime":1557400718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557400718","product_id":100024501,"comment_content":"事件总线还是没说清楚，讲解的只是把之前的block或者delegate方法换成AnyPromise方法，希望大神详细讲解下一对多的","like_count":0},{"had_liked":false,"id":92957,"user_name":"Boomm","can_delete":false,"product_type":"c1","uid":1482035,"ip_address":"","ucode":"2823892613C1FE","user_header":"","comment_is_top":false,"comment_ctime":1557368453,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557368453","product_id":100024501,"comment_content":"简化异步调用为同步书写这一点上，和阿里开源的coobjc很相似，想请教这两者有什么大的区别么？","like_count":0},{"had_liked":false,"id":92140,"user_name":"我的大好时光","can_delete":false,"product_type":"c1","uid":1455038,"ip_address":"","ucode":"7ABD0ABBA19633","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/be/1525566f.jpg","comment_is_top":false,"comment_ctime":1557191805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557191805","product_id":100024501,"comment_content":"👍","like_count":0},{"had_liked":false,"id":92093,"user_name":"geeklyc","can_delete":false,"product_type":"c1","uid":1264061,"ip_address":"","ucode":"F25441AB6433B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","comment_is_top":false,"comment_ctime":1557188146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557188146","product_id":100024501,"comment_content":"抢沙发","like_count":0},{"had_liked":false,"id":92079,"user_name":"李志刚","can_delete":false,"product_type":"c1","uid":1239779,"ip_address":"","ucode":"13F17BF13275F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/e3/5818be1e.jpg","comment_is_top":false,"comment_ctime":1557186797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557186797","product_id":100024501,"comment_content":"很实用，解决了某个操作依赖多个异步事件的场景，比如登陆操作依赖多个网络请求返回的场景。","like_count":0}]}