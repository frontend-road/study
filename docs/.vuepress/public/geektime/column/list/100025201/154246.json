{"id":154246,"title":"加餐 | 怎么保障发布的效率与质量？","content":"<p>你好，我是七牛云许式伟。</p><h2>为什么要有发布流程？</h2><p>在 “<a href=\"https://time.geekbang.org/column/article/150346\">49 | 发布、升级与版本管理</a>” 一讲中我们提到过：</p><blockquote>\n<p>变更是故障之源。</p>\n</blockquote><p>这种由于业务需要而主动发起的软硬件升级与各类配置变更，我们可以统一称之为发布。例如：</p><ul>\n<li>更换交换机的类型，或升级版本。</li>\n<li>更换所依赖的基础软件，或升级版本。基础软件包括操作系统、负载均衡、数据库等等。</li>\n<li>升级业务软件本身。</li>\n<li>调整软硬件环境的配置项。</li>\n</ul><p>特殊地，如果集群的服务对扩容缩容有很好的自动化支持，可以非常便捷地增加或减少服务器，那么这种情况虽然发生了集群的变化，我们可以不把它看作变更，不走发布相关的流程。尤其在硬件已经完全池化时，增加、减少服务器可能是个非常标准化且低成本的操作。</p><p>我们通常说的 “版本发布”，往往侧重点是在升级业务软件的版本，这是发布中最常发生的情况，当然也是我们最为关注的。</p><p>传统的软件公司的发布周期往往很长，有几个月甚至有的是按年来计算。而互联网公司的发布周期则非常不同。之所以快速发布、快速迭代变得简单的原因是，它们仅仅需要在服务器端发布，而不需要发布到每个使用者的电脑上。</p><p>一个每三年发布一次新产品的公司不需要详细的发布流程。因为发布的频率太低了，发布流程的优化能够带来的收益太小。</p><!-- [[[read_end]]] --><p>但是如果我们每天都在发布，甚至每天发布很多次，那么如此高频的发布速度，就要求我们创建和维护一个效率与质量都能够兼顾的精简的发布流程。</p><p>一个精简的发布流程，通常需要有发布平台这样的基础设施，把发布过程中反复遇到的问题对应的解决方案固化到系统中。</p><p>但是系统并不能解决所有的发布问题。变更终究是存在未知的新东西，需要人工进行检查判断。为此，SRE 部门往往还建立了一个专门的团队负责发布，即发布协调小组。团队成员称为 “发布协调工程师（Launch Coordination Engineering，LCE）”。</p><p>发布协调小组会针对每个业务，维护一个该业务的 “发布检查列表”，包括针对每次发布需要检查的常见问题，以及避免常见问题发生的手段。只有在发布检查表中的检查点都得到了确认，才会给版本发布放行。</p><p>这个列表在实践中被证实，它是保障发布可靠性的重要工具。</p><h2>建立在系统之上的灰度发布</h2><p>除了 “发布检查列表”，我们还有一个至关重要的保障发布质量的做法：灰度发布。</p><p>不管你如何小心，发布检查做得多全面，仍然只是在尽可能减少发布的风险，而不是消除。任何改动都具有一定的危险性，而任何危险性都应该被最小化，这样才能保障系统的可靠性。</p><p>在小型的测试环境上测试成功的变更，不见得在生产环境就没有问题，更何况从 SRE 的角度，测试的覆盖率也是不能假设的。</p><p>任何发布都应该灰度进行，并且在整个过程中还需要穿插必要的校验步骤。刚开始，新的服务可能会在某个数据中心的一台或几台机器上安装，并且被严密监控一段时间。如果没有发现异常，新版本会在更多台机器上安装并再次监控，直至最后完成整个发布过程。</p><p>发布的第一阶段通常被称为 “金丝雀”。这和煤矿工人带金丝雀下矿井检测有毒气体类似，通过使用这些“金丝雀” 服务线上流量，我们可以观察任何异常现象的发生。</p><p>“金丝雀” 测试适用于正常的软件版本发布，也适用于配置项的变更。负责配置变更的工具通常都会对新启动的程序监控一段时间，保证服务没有崩溃或者返回异常。如果在校验期间出现问题，系统会自动回退。</p><p>灰度式发布的理念甚至并不局限于软件和服务的发布。例如，我们商业上的高成本的运营活动，往往会先选择一到两个地区先做实验，然后再把成功经验复制到全国各地。</p><p>所以灰度发布思想的一个自然延伸是做功能开关，也就是大家熟悉的 AB 测试。很多东西在测试环境中无法模拟时，或者在真实环境中仍然存在不可预知的情况时，灰度机制就非常有用了。</p><p>不是所有的改动都可以一样对待。有时我们仅仅是想检查某个界面上的改动是否能提升用户感受。这样的小改动不需要几千行的程序或者非常重量级的发布流程。我们可能希望同时测试很多这方面的改动。</p><p>有时候我们只是想要知道是否有足够多的用户会喜欢使用某个新功能，就通过发布一个简单的原型给他们测试。这样我们就不用花费数个月的时间来优化一个没人想要使用的功能。</p><p>通常来说，这类 AB 测试框架需要满足以下几个要求：</p><ul>\n<li>可以同时发布多个变更，每个变更仅针对一部分服务器或用户起作用。</li>\n<li>变更可以灰度发布给一定数量的服务器或用户，比如 1%。</li>\n<li>在严重Bug发生，或者有其他负面影响时，可以迅速单独屏蔽某个变更。</li>\n<li>用数据来度量每个变更对用户体验的提升。</li>\n</ul><h2>LCE 的职责</h2><p>LCE 团队负责管理发布流程，以确保整个发布过程做到又快又好。LCE 有如下这些职责：</p><ul>\n<li>审核新产品及相关的内部服务，确保它们的可靠性标准达到要求。如果不达预期，提供一些具体的建议来提升可靠性。</li>\n<li>在发布过程中作为多个团队之间的联系纽带。</li>\n<li>负责跟进发布系统相关的所有技术问题。</li>\n<li>作为整个发布过程中的一个守门人，决定某次发布是否是 “安全的”。</li>\n</ul><p>整体来说，LCE 的要求其实是相当高的。LCE 的技术要求与其他的 SRE 成员一样，但这个岗位打交道的外部团队很多，需要有很强的沟通和领导能力。他需要将分散的团队聚合在一起达成一个共同目标，同时还需要偶尔处理冲突问题，还要能够为软件开发工程师提供建议和指导。</p><h2>发布检查列表</h2><p>我们前面已经提过，发布检查列表可以用来保障发布质量，它是可靠发布产品与服务的重要组成部分。一个完备的检查列表通常包含以下这些方面的内容。</p><p>其一，架构与依赖相关。针对系统架构的评审可以确定该服务是否正确使用了某类基础设施，并且确保这些基础设施的负责人加入到发布流程中来。为什么要引入基础设施的负责人，是因为需要确认相关依赖的服务都有足够的容量。</p><p>一些典型的问题有：</p><ul>\n<li>从用户到前端再到后端，请求流的顺序是什么样的？</li>\n<li>是否已经将非用户请求与用户请求进行隔离？</li>\n<li>预计的请求数量是多少？单个页面请求可能会造成后端多个请求。</li>\n</ul><p>其二，集成和公司最佳实践相关。很多公司的对外服务都要运行在一个内部生态系统中，这些系统为如何建立新服务器、配置新服务、设置监控、与负载均衡集成，以及设置 DNS 配置等提供了指导。</p><p>其三，容量规划相关。新功能通常会在发布之初带来临时的用量增长，在几天后会趋于平稳。这种尖峰式的负载或流量分布可能与稳定状态下有显著区别，之前内部的压力测试可能失效。</p><p>公众的兴趣是很难预测的，有时甚至需要为预计容量提供 15 倍以上的发布容量。这种情况下灰度发布会有助于建立大规模发布时的数据依据与信心。</p><p>一些典型的问题有：</p><ul>\n<li>本次发布是否与新闻发布会、广告、博客文章或者其他类型的推广活动有关？</li>\n<li>发布过程中以及发布之后预计的流量和增速是多少？</li>\n<li>是否已经获取到该服务需要的全部计算资源？</li>\n</ul><p>其四，故障模式相关。针对服务进行系统性的故障模式分析可以确保发布时服务的可靠性。</p><p>在检查列表的这一部分中，我们可以检查每个组件以及每个组件的依赖组件来确定当它们发生故障时的影响范围。</p><p>一些典型的问题有：</p><ul>\n<li>该服务是否能够承受单独物理机故障？单数据中心故障？网络故障？</li>\n<li>如何应对无效或者恶意输入，是否有针对拒绝服务攻击（DoS）的保护？</li>\n<li>是否已经支持过载保护？</li>\n<li>如果某个依赖组件发生故障，该服务是否能够在降级模式下继续工作？</li>\n<li>该服务在启动时能否应对某个依赖组件不可用的情况？在运行时能否处理依赖不可用和自动恢复情况？</li>\n</ul><p>其五，客户端行为相关。最常见的客户端滥发请求的行为，是配置更新间隔的设置问题。比如，一个每 60s 同步一次的新客户端，会比600s 同步一次的旧客户端造成10倍的负载。</p><p>重试逻辑也有一些常见问题会影响到用户触发的行为，或者客户端自动触发的行为。假设我们有一个处于过载状态的服务，该服务由于过载，某些请求会处理失败。如果客户端重试这些失败请求，会对已经过载的服务造成更大负载，于是会造成更多的重试，更多的负载。客户端这时应该降低重试的频率，一般需要增加指数型增长的重试延迟，同时仔细考虑哪些错误值得重试。例如，网络错误通常值得重试，但是 4xx 错误（这一般意味着客户端侧请求有问题）一般不应该重试。</p><p>自动请求的同步性往往还会造成惊群效应。例如，某个手机 APP 开发者可能认为夜里2点是下载更新的好时候，因为用户这时可能在睡觉，不会被下载影响。然而，这样的设计会造成夜里 2 点时有大量请求发往下载服务器，每天晚上都是如此，而其他时间没有任何请求。这种情况下，每个客户端应该引入一定随机性。</p><p>其他的一些周期性过程中也需要引入随机性。回到之前说的那个重试场景下：某个客户端发送了一个请求，当遇到故障时，1s 之后重试，接下来是 2s、4s 等。没有随机性的话，短暂的请求峰值可能会造成错误比例升高，这个周期会一直循环。为了避免这种同步性，每个延迟都需要一定的抖动，也就是加入一定的随机性。</p><p>一些典型的问题有：</p><ul>\n<li>客户端在请求失败之后，是否按指数型增加重试延时？</li>\n<li>是否在自动请求中实现随机延时抖动？</li>\n</ul><p>其六，流程与自动化相关。虽然我们鼓励自动化，但是对于发布这件事情来说，完全自动化是灾难性的。为了保障可靠性，我们应该尽量减少发布流程中的单点故障源，包括人在内。</p><p>这些流程应该在发布之前文档化，确保在工程师还记得各种细节的时候就完全转移到文档中，这样才能在紧急情况下派上用场。流程文档应该做到能使任何一个团队成员都可以在紧急事故中处理问题。</p><p>一些典型的问题有：</p><ul>\n<li>是否已将所有需要手动执行的流程文档化？</li>\n<li>是否已将构建和发布新版本的流程自动化？</li>\n</ul><p>其七，外部依赖相关。有时候某个发布过程依赖于某个不受公司控制的因素。尽早确认这些因素的存在可以使我们为它们的不确定性做好准备。</p><p>例如，服务依赖于第三方维护的一个类库，或者另外一个公司提供的服务或者数据。当第三方提供商出现故障、Bug、系统性的错误、安全问题，或者未预料到的扩展性问题时，尽早计划可以使我们有办法避免影响到直接用户。</p><p>一些典型的问题有：</p><ul>\n<li>这次发布依赖哪些第三方代码、数据、服务，或者事件？</li>\n<li>是否有任何合作伙伴依赖于你的服务？发布时是否需要通知他们？</li>\n<li>当我们或者第三方提供商无法在指定截止日期前完成工作时，会发生什么？</li>\n</ul><h2>结语</h2><p>今天我们探讨 “发布与升级” 的实践，如何既保证质量，又能够兼顾效率。正确的做法当然不是为了快而去忽略流程，而是在不断的发布经历中总结经验教训，把每个环节干得更快更有效率。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们聊聊 “故障域与故障预案”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"50 | 日志、监控与报警","id":152342},"right":{"article_title":"51 | 故障域与故障预案","id":155500}},"comments":[{"had_liked":false,"id":143414,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1571706720,"is_pvip":false,"replies":[{"id":"55425","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1571734216,"ip_address":"","comment_id":143414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31636477792","product_id":100025201,"comment_content":"流程文档化 推动有难度 每个人都习惯别人提供文档 让自己写文档就懒得写😂","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471525,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571734216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144628,"user_name":"嚆同学","can_delete":false,"product_type":"c1","uid":1018329,"ip_address":"","ucode":"5F5BFE47B3302C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/d9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1571985238,"is_pvip":false,"replies":[{"id":"55797","content":"能够自动化的事情自动化，不能自动化的事情用检查列表。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1572044909,"ip_address":"","comment_id":144628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27341789014","product_id":100025201,"comment_content":"“发布检查列表可以用来保障发布质量，它是可靠发布产品与服务的重要组成部分“，这种列清单的方法及意义与《清单革命》一书所倡导的一致。检查工作流程化而不是靠经验。","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472040,"discussion_content":"能够自动化的事情自动化，不能自动化的事情用检查列表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572044909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143630,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1001410,"ip_address":"","ucode":"32646D78CC0389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/c2/e9fa4cf6.jpg","comment_is_top":false,"comment_ctime":1571748509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10161683101","product_id":100025201,"comment_content":"涨了很多平常小项目不怎么能接触到和用到的知识！但是架构师能力和汽车动力一样，可以不用，但是一定要有😄，谢谢老师加餐","like_count":3},{"had_liked":false,"id":143415,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1571706841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10161641433","product_id":100025201,"comment_content":"SRE 部门往往还建立了一个专门的团队负责发布，即发布协调小组。团队成员称为 “发布协调工程师（Launch Coordination Engineering，LCE）”。   这个是第一次听到 学习了😅","like_count":2},{"had_liked":false,"id":238620,"user_name":"型火🔥","can_delete":false,"product_type":"c1","uid":1003205,"ip_address":"","ucode":"C2322918B31E60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/c5/78626367.jpg","comment_is_top":false,"comment_ctime":1596239041,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5891206337","product_id":100025201,"comment_content":"都是清单，自动化是机械人执行清单，文档化是自然人执行清单。<br>人类的大脑是有限的ram,不能记住所有事，所以需要依靠外存:自动化或文档。<br>理想的人类分工应该无状态化，这样才能减少单点故障，比如当事人临时有事或者人事变动，换人或者加人可以像微服务业务组件一样伸缩，前提是微服务业务组件无状态化，智力成果都在存储层+中间件。<br>对公司而言，不能离了某一个人工作不能运转，依靠的就是公司的底层架构和智力成果积累。","like_count":1},{"had_liked":false,"id":294149,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1621785935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621785935","product_id":100025201,"comment_content":"一定要让发布流程的人员，在忘掉一些细节之前把文档整理好，我就是吃这方面亏的，经常隔一段时间会再重复的问题上面花费很多时间，因为忘记了某些细节，一定要重新再做一遍流程，才能够想起来。","like_count":0},{"had_liked":false,"id":247885,"user_name":"张浩_house","can_delete":false,"product_type":"c1","uid":1021258,"ip_address":"","ucode":"B733234B133607","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/4a/a145c675.jpg","comment_is_top":false,"comment_ctime":1599901690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599901690","product_id":100025201,"comment_content":"工作中遇到许多系统都没问题，动不动就是一堆源码去理解","like_count":0},{"had_liked":false,"id":143994,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1571821823,"is_pvip":false,"replies":[{"id":"55575","content":"下一章会谈","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1571839551,"ip_address":"","comment_id":143994,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571821823","product_id":100025201,"comment_content":"许老师，后面会不会说一下应该如何做好系统架构、业务架构、技术架构相关的知识点呢？还有架构重构相关的知识，如果不知道什么是好的架构，又怎么能找到重构的突破点呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471772,"discussion_content":"下一章会谈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571839551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371251,"discussion_content":"随喜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619698643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}