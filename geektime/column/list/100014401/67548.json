{"id":67548,"title":"35 | 微博Service Mesh实践之路（上）","content":"<p>专栏上一期我们聊了Service Mesh的代表作Istio，由于Istio的设计理念非常新，并且它诞生在微服务容器化和Kubernetes云平台火爆之后，所以从设计和实现上，Istio都天生对云原生应用更友好。</p><p>但是现实是不是也是那么美好呢？对于一个已经上线运行多年的业务系统来说，要想从经典的微服务架构走上Istio这条看似完美的道路并不容易，各种内部基础设施的定制化以及业务稳定性优先准则等因素，都注定了大多数公司要走出一条自己的Service Mesh实践之路。<span class=\"orange\">今天我就来带你回顾下微博是如何一步步走向Service Mesh的。</span></p><h2>跨语言服务调用的需求</h2><p>我在前面讲过，微博的服务化框架采用的是自研的Motan，Motan诞生于2013年，出于微博平台业务单体化架构拆分为微服务改造的需求，在结合当时的开源服务化框架和自身实际的需求，选择了采用自研的方式。而且由于微博平台的业务采用的是Java语言开发，所以Motan早期只支持Java语言。后期随着微博业务的高速发展，越来越多的PHP业务开始登上舞台，于是在微博的流量体系中，主要是三股服务之间的相互调用：一个是Java与Java语言，一个是PHP和Java语言，一个是PHP和PHP语言。Java应用之间的调用采用的是Motan协议，而Java应用与PHP、PHP与PHP应用之间采用的都是HTTP协议。我回忆了一下当时一次PHP与Java之间的HTTP调用过程，大致需要经过DNS解析、四层LVS负载均衡、七层Nginx负载均衡，最后才能调用Java应用本身。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/8c/04/8cafb3bc4c314e5df40a80f8aee3cc04.png?wh=228*411\" alt=\"\"></p><p>从上面这张图可以看出，一次HTTP调用的链路相当长，从我的实践来看，经常会遇到好几个问题。</p><p><strong>第一个问题：中间链路损耗大</strong>。由于一次HTTP调用要经过DNS、LVS、Nginx这三个基础设施，每一层都会带来相应的损耗。我曾经在线上就碰到过因为DNS解析延迟、LVS带宽打满引起的网络延迟，以及Nginx本地磁盘写满引起的转发延迟等各种情况，造成接口响应在中间链路的损耗甚至超过了接口本身业务逻辑执行的时间。</p><p><strong>第二个问题：全链路扩容难</strong>。由于微博业务经常要面临突发热点事件带来的流量冲击，所以需要能够随时随地动态扩缩容。其实在应用本身这一层扩容并不是难点，比较麻烦的是四七层负载均衡设备的动态扩缩容，它涉及如何评估容量、如何动态申请节点并及时修改生效等，要完成一次全链路扩容的话，复杂度非常高，所以最后往往采取的办法是给四七层负载均衡设备预备足够的冗余度，在峰值流量到来时，只扩容应用本身。</p><p><strong>第三个问题：混合云部署难</strong>。专栏前面我讲过微博的业务目前采用的是混合云部署，也就是在内网私有云和公有云上都有业务部署，同样也需要部署四七层负载均衡设备，并且要支持公有云上的请求经过DNS解析后要能够转发到公有云上的负载均衡设备上去，避免跨专线访问带来不必要的网络延迟和专线带宽占用。</p><p>因此，迫切需要一种支持跨语言调用的服务化框架，使得跨语言应用之间的调用能够像Java应用之间的调用一样，不需要经过其他中间链路转发，做到直接交互，就像下图描述的那样。</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/fe/6b54bcf17039645c3034dce373a053fe.png?wh=500*206\" alt=\"\"></p><h2>Yar协议的初步尝试</h2><p>为此，微博最开始考虑基于Motan框架进行扩展，使其支持PHP语言的Yar协议，下面是扩展后的架构图。这个架构的思路是PHP客户端的服务发现通过Nginx来支持，经过Nginx把PHP的Yar协议请求转发给服务端，由于Motan框架中了适配Yar协议，服务端会把PHP的Yar协议请求转换成Motan请求来处理，处理完后再转成Yar协议的返回值经过Nginx返回给客户端。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/3c/d7d21afa6d37bf5f55a831a25fdef83c.png?wh=741*487\" alt=\"\"></p><p>但这种架构主要存在两个问题。</p><p><strong>第一个问题</strong>：Motan协议与Yar协议在基本数据结构和序列化方式的支持有所不同，需要经过复杂的协议转换。</p><p><strong>第二个问题</strong>：服务调用还必须依赖Nginx，所以调用链路多了一层，在应用部署和扩容时都要考虑Nginx。</p><h2>gRPC会是救命稻草吗</h2><p>时间往后推演，gRPC横空出世，它良好的跨语言特性，以及高效的序列化格式的特性吸引了我们，于是便开始考虑在Motan中集成gRPC，来作为跨语言通信的协议。当时设计了下图的架构，这个架构的思路是利用gRPC来生成PHP语言的Client，然后在Motan框架中加入对gRPC协议的支持，这样的话PHP语言的Client就可以通过gRPC请求来调用Java服务。</p><p><img src=\"https://static001.geekbang.org/resource/image/02/2a/02de374239ba3b0ea10cc9192821552a.png?wh=574*313\" alt=\"\"></p><p>但在我们的实际测试中，发现微博的业务场景并不适合gRPC协议，因为gRPC协议高度依赖PB序列化，而PHP对PB的兼容性不是很好，在微博的业务场景下一个接口返回值有可能超过几十KB，此时在PHP Client端PB数据结构解析成JSON对象的耗时甚至达到几十毫秒，这对业务来说是不可接受的。而且gRPC当时还不支持PHP作为Server对外提供服务，也不满足微博这部分业务场景的需要。</p><h2>代理才是出路</h2><p>考虑到PHP语言本身没有常驻内存控制的能力，在实现服务注册和发现以及其他各种服务框架功能时，仅靠PHP-FPM进程本身难以实现，因此需要一个统一常驻内存的进程来帮助完成服务框架的各种功能。一开始我们考虑过使用本地守护进程和OpenResty的Timer来实现服务发现，但其他服务框架的功能不太好实现，比如专栏前面提到的各种复杂的负载均衡策略、双发、熔断等。为此，我们希望通过一个Agent也就是代理，来帮助PHP进程来完成服务框架的各种功能，PHP进程本身只需要负责运行业务逻辑的代码，以及最简单的Motan协议解析。基于这个思路，当时我们设计了下面这个架构，它的思路就是在PHP进程的本地也部署一个Agent，PHP进程发出去的请求都经过Agent进行处理后，再发给对应的Java应用。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/5c/a75e0cd4b3e9aa355a6caec951e5845c.png?wh=669*334\" alt=\"\"></p><h2>向Service Mesh迈进</h2><p>2017年，就在我们开始采用Agent方案对业务进行改造，以支持PHP应用调用Java应用服务化的时候，Service Mesh的概念突然火热起来，并随着Istio的发布风靡业界。相信经过我前面对Service Mesh的讲解，你一定会发现这里的Agent不恰恰就是Service Mesh中的SideCar吗？没错，我们跨语言调用的解决方案竟然与Service Mesh的理念不谋而合。借鉴Service Mesh的思想，我们也对Agent方案进一步演化，不仅客户端的调用需要经过本地的Agent处理后再转发给服务端，服务端在处理前也需要经过本地的Agent，最后再由服务端业务逻辑处理，下面是它的架构图。如此一来，业务只需要进行集成最简单的Motan协议解析，而不需要关心其他服务框架功能，可以理解为业务只需要集成一个轻量级的Client用于Motan协议解析，而繁杂的服务框架功能全都由Agent来实现，从而实现业务与框架功能的解耦。</p><p><img src=\"https://static001.geekbang.org/resource/image/78/91/78c53f81b72dc818d90400160b573d91.png?wh=621*287\" alt=\"\"></p><p>从上面的图中你可以看出，这个架构与上一期我们聊的Istio大体思路相同，但是区别还是很明显的，可以概括为以下几点：</p><ul>\n<li>\n<p>都通过SideCar方式部署的代理来实现流量转发，Istio里使用的是Envoy，而Weibo Mesh采用的是自研的Motan-go Agent。这里有一个很明显的区别是，Weibo Mesh中业务代码还需要集成一个轻量级的Client，所以对业务有一定的倾入性；而Istio采用的是iptables技术，拦截网络请求给Envoy，所以业务无需做任何变更，更适合云原生应用。在微博的业务场景下，由于大部分业务并不是云原生应用，都是部署在物理机或者虚拟机集群之中的，所以需要根据自己的业务特点来决定SideCar的部署方式。而且Weibo Mesh中的轻量级Client除了实现基本的Motan协议的解析功能之外，还添加了一些业务需要的特性，比如为了防止Agent不可用，在本地保存了一份服务节点的本地快照，必要时Client可以访问本地快照获得节点的地址，直接向服务节点Server发起调用，而不需要经过Agent转发处理，只不过这个时候就丧失了Agent的服务治理功能。</p>\n</li>\n<li>\n<p>Weibo Mesh和Istio都具备服务治理功能，只不过Istio是通过Control Plane来控制Proxy来实现，并且Control Plane包括三个组件Pilot、Mixer以及Citedar，三者各司其职。而Weibo Mesh是通过统一的服务治理中心来控制Agent，从而实现服务治理的。这是因为微博本身的各种基础设施大部分是自研的，比如注册和配置中心是自研的Vintage、监控系统是自己基于Graphite改造的、容器平台DCP以及负责容量评估的Diviner也是自研的，为此需要一个统一的地方把这些基础设施串联起来。而Istio好像就为开源而生，设计之初就要考虑如何更好地集成并支持各类开源方案，比如专门抽象出Mixer组件来对接各种监控和日志系统。</p>\n</li>\n</ul><h2>总结</h2><p>今天我给你讲解了微博是如何一步步走向Service Mesh之路的，从这个过程你可以看出微博的Weibo Mesh并不是一开始就是设计成这样的，它是随着业务的发展，对跨语言服务调用的需求日趋强烈，才开始探索如何使得原有仅支持Java语言的服务化框架Motan支持多语言，在这个过程中又不断尝试了各种解决方案之后，才笃定了走Agent代理这条路，并实际应用到线上。而随着Service Mesh概念的兴起，微博所采用的Agent代理的解决方案与Service Mesh理念不谋而合，于是在Agent代理的方案中吸纳Service Mesh的思想，进一步演变成如今的Weibo Mesh。所以说一个可靠的架构从来都不是设计出来的，是逐步演进而来的。</p><h2>思考题</h2><p>如果要支持更多不同语言应用之间的相互调用，你觉得Weibo Mesh中的轻量级的Client需要做哪些工作？</p><p>欢迎你在留言区写下自己的思考，与我一起讨论。</p><p></p>","comments":[{"had_liked":false,"id":49223,"user_name":"无心人偶","can_delete":false,"product_type":"c1","uid":1265269,"ip_address":"","ucode":"CC1A96DD04E8E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/4e/75/6330808e.jpg","comment_is_top":false,"comment_ctime":1544626066,"is_pvip":false,"replies":[{"id":"18044","content":"链路损耗必然的，可以在连接池和长链接上做做文章","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1544944037,"ip_address":"","comment_id":49223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724495250","product_id":100014401,"comment_content":"是如何降低链路损耗？","like_count":4,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432538,"discussion_content":"链路损耗必然的，可以在连接池和长链接上做做文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544944037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43393,"user_name":"小菜鸡","can_delete":false,"product_type":"c1","uid":1207621,"ip_address":"","ucode":"BF12694BAB7883","user_header":"https://static001.geekbang.org/account/avatar/00/12/6d/45/7e95bd13.jpg","comment_is_top":false,"comment_ctime":1543222017,"is_pvip":false,"replies":[{"id":"18058","content":"是的","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1544944827,"ip_address":"","comment_id":43393,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133156609","product_id":100014401,"comment_content":"周晶有个微课专门讲微博的Mesh，他是你同事吧？","like_count":2,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430371,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544944827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230808,"user_name":"任鑫","can_delete":false,"product_type":"c1","uid":1142025,"ip_address":"","ucode":"9803EB15B634C3","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/09/ffeabc27.jpg","comment_is_top":false,"comment_ctime":1593500109,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5888467405","product_id":100014401,"comment_content":"Istio背靠的Google在微服务云原生方面起步早、体量大，远非微博可比。","like_count":1},{"had_liked":false,"id":38773,"user_name":"lpf32","can_delete":false,"product_type":"c1","uid":1039717,"ip_address":"","ucode":"E1B127FDFF74BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/65/3b4a2930.jpg","comment_is_top":false,"comment_ctime":1542124550,"is_pvip":false,"replies":[{"id":"13966","content":"是的","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1542196510,"ip_address":"","comment_id":38773,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837091846","product_id":100014401,"comment_content":"回答<br>作为客户端，服务端需要分别把request，response转成motan协议，发送给本地motan agent<br>","like_count":1,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428805,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542196510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38534,"user_name":"文敦复","can_delete":false,"product_type":"c1","uid":1195258,"ip_address":"","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1542071916,"is_pvip":false,"replies":[{"id":"13969","content":"motan跨语言用的是自定义的simple系列化，文中有链接可以详细了解，没有使用grpc是因为php解析大数据量的pb结构时性能有问题","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1542196639,"ip_address":"","comment_id":38534,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837039212","product_id":100014401,"comment_content":"请问老师，Motan数据序列化和解析比GRPC快很多吗？用的是什么序列化方式？","like_count":1,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428739,"discussion_content":"motan跨语言用的是自定义的simple系列化，文中有链接可以详细了解，没有使用grpc是因为php解析大数据量的pb结构时性能有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542196639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38035,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1541899697,"is_pvip":false,"replies":[{"id":"13975","content":"理解的很多","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1542196889,"ip_address":"","comment_id":38035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5836866993","product_id":100014401,"comment_content":"不同语言之间调用最通用的方式是http，所以需要协议转换，把原来的rpc调用转换成http调用，然后再根据服务发现和负载均衡策略，获取相应的IP和端口","like_count":1,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428570,"discussion_content":"理解的很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542196889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359683,"user_name":"田小麦","can_delete":false,"product_type":"c1","uid":1648999,"ip_address":"北京","ucode":"4C10997F6173ED","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/67/fc61a741.jpg","comment_is_top":false,"comment_ctime":1665747636,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665747636","product_id":100014401,"comment_content":"一门好的课程能引导出，技术演进过程，能很好的深入学习，并产生兴趣！！！","like_count":0},{"had_liked":false,"id":343981,"user_name":"🤔","can_delete":false,"product_type":"c1","uid":1676962,"ip_address":"","ucode":"40ACB53BF3C6B1","user_header":"https://static001.geekbang.org/account/avatar/00/19/96/a2/c1596dd8.jpg","comment_is_top":false,"comment_ctime":1651153026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651153026","product_id":100014401,"comment_content":"motan-go代理是go语言写的吗","like_count":0},{"had_liked":false,"id":298967,"user_name":"Geek_805d64","can_delete":false,"product_type":"c1","uid":2341773,"ip_address":"","ucode":"8BE0AB2AA474C0","user_header":"http://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM6xFYMRMLWdcDaAI8PJ2cyfTvicAWbv5VAVqI22Y6QqUxuntUn8W44WIWibvibbPdAxrT5szduZdduIA/132","comment_is_top":false,"comment_ctime":1624411542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624411542","product_id":100014401,"comment_content":"老师，这个dns解析是内网解析还是外网，php发请用给java需要出去转一圈回来微博的机房吗？","like_count":0},{"had_liked":false,"id":202238,"user_name":"Wipeher","can_delete":false,"product_type":"c1","uid":1108731,"ip_address":"","ucode":"A5D7451D95F42C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wIWrciav7DRkOaD7vUtr084sxprq2U4obfH1ibls4RIsAw5foQlDGIt98x1RHATznNbh0iasibWV2Y7I7QpyFJ4TVA/132","comment_is_top":false,"comment_ctime":1585930166,"is_pvip":false,"replies":[{"id":"82214","content":"一般http协议还需要部署四七层，中间链路需要经过网络，所以会带来损耗","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1590996194,"ip_address":"","comment_id":202238,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585930166","product_id":100014401,"comment_content":"motan也是应用层协议吧？那么HTTP协议带来的第一个问题：中间链路损耗大，无论是否使用agent，也必然还是存在的么？","like_count":0,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490538,"discussion_content":"一般http协议还需要部署四七层，中间链路需要经过网络，所以会带来损耗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590996194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135318,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1569124919,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1569124919","product_id":100014401,"comment_content":"按照作者的描述，微博Mesh使用Motan-go来做agent，负责服务发现、负载均衡以及熔断管理等。<br><br>那么每个服务发出request时，需要client来将请求转换成Motan能够识别的格式，同时，Client还需要将Motan-go返回的response转换成服务可以识别和处理的格式。","like_count":0},{"had_liked":false,"id":105741,"user_name":"亚林","can_delete":false,"product_type":"c1","uid":1018972,"ip_address":"","ucode":"4A5A6D24314B79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","comment_is_top":false,"comment_ctime":1561080331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561080331","product_id":100014401,"comment_content":"不用的语言，每个都需要看一个轻量级的 Client？","like_count":0}]}