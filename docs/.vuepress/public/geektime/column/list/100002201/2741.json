{"id":2741,"title":"36 | 编程范式游记（7）- 基于原型的编程范式","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>基于原型（Prototype）的编程其实也是面向对象编程的一种方式。没有class化的，直接使用对象。又叫，基于实例的编程。其主流的语言就是JavaScript，与传统的面向对象编程的比较如下：</p><ul>\n<li>\n<p>在基于类的编程当中，对象总共有两种类型。类定义了对象的基本布局和函数特性，而接口是“可以使用的”对象，它基于特定类的样式。在此模型中，类表现为行为和结构的集合，对所有接口来说这些类的行为和结构都是相同的。因而，区分规则首先是基于行为和结构，而后才是状态。</p>\n</li>\n<li>\n<p>原型编程的主张者经常争论说，基于类的语言提倡使用一个关注分类和类之间关系的开发模型。与此相对，原型编程看起来提倡程序员关注一系列对象实例的行为，而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象，而不是分成类。</p>\n</li>\n</ul><p>因为如此，很多基于原型的系统提倡运行时进行原型的修改，而只有极少数基于类的面向对象系统（比如第一个动态面向对象的系统Smalltalk）允许类在程序运行时被修改。</p><ul>\n<li>\n<p>在基于类的语言中，一个新的实例通过类构造器和构造器可选的参数来构造，结果实例由类选定的行为和布局创建模型。</p>\n</li>\n<li>\n<p>在基于原型的系统中构造对象有两种方法，通过复制已有的对象或者通过扩展空对象创建。很多基于原型的系统提倡运行时进行原型的修改，而基于类的面向对象系统只有动态语言允许类在运行时被修改（Common Lisp、Dylan、Objective-C、Perl、Python、Ruby和Smalltalk）。</p>\n</li>\n</ul><!-- [[[read_end]]] --><h1>JavaScript的原型概念</h1><p>这里，我们主要以JavaScript举例，面向对象里面要有个Class。但是JavaScript觉得不是这样的，它就是要基于原型编程，就不要Class，就直接在对象上改就行了，基于编程的修改，直接对类型进行修改。</p><p>我们先来看一个示例。</p><pre><code>var foo = {name: &quot;foo&quot;, one: 1, two: 2};\n\nvar bar = {three: 3};\n</code></pre><p>每个对象都有一个 <code>__proto__</code> 的属性，这个就是“原型”。对于上面的两个对象，如果我们把 <code>foo</code> 赋值给 <code>bar.__proto__</code>，那就意味着，<code>bar</code> 的原型就成了 <code>foo</code>的。</p><pre><code>bar.__proto__ = foo; // foo is now the prototype of bar.\n</code></pre><p>于是，我们就可以在 <code>bar</code> 里面访问 <code>foo</code> 的属性了。</p><pre><code>// If we try to access foo's properties from bar \n// from now on, we'll succeed. \nbar.one // Resolves to 1.\n\n// The child object's properties are also accessible.\nbar.three // Resolves to 3.\n\n// Own properties shadow prototype properties\nbar.name = &quot;bar&quot;;\nfoo.name; // unaffected, resolves to &quot;foo&quot;\nbar.name; // Resolves to &quot;bar&quot;\n</code></pre><p>需要解释一下JavaScript的两个东西，一个是 <code>__proto__</code>，另一个是 <code>prototype</code>，这两个东西很容易混淆。这里说明一下：</p><ul>\n<li>\n<p><strong><code>__proto__</code></strong> 主要是安放在一个实际的对象中，用它来产生一个链接，一个原型链，用于寻找方法名或属性，等等。</p>\n</li>\n<li>\n<p><strong><code>prototype</code></strong> 是用 <code>new</code> 来创建一个对象时构造 <code>__proto__</code> 用的。它是构造函数的一个属性。</p>\n</li>\n</ul><p>在JavaScript中，对象有两种表现形式， 一种是 <code>Object</code> (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.2\">ES5关于Object的文档</a>)，一种是 <code>Function</code> （<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.2\">ES5关于Function的文档</a>）。</p><p>我们可以简单地认为，<code>__proto__</code> 是所有对象用于链接原型的一个指针，而 <code>prototype</code> 则是 Function 对象的属性，其主要是用来当需要<code>new</code>一个对象时让 <code>__proto__</code> 指针所指向的地方。 对于超级对象 <code>Function</code> 而言， <code>Function.__proto__</code> 就是 <code>Function.prototype</code>。</p><p>比如我们有如下的代码：</p><pre><code>var a = {\n  x: 10,\n  calculate: function (z) {\n    return this.x + this.y + z;\n  }\n};\n \nvar b = {\n  y: 20,\n  __proto__: a\n};\n \nvar c = {\n  y: 30,\n  __proto__: a\n};\n \n// call the inherited method\nb.calculate(30); // 60\nc.calculate(40); // 80\n</code></pre><p>其中的“原型链”如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/ec/a67686c883e8077da6779ae956efdcec.png?wh=378x244\" alt=\"\"></p><p>注意：ES5 中，规定原型继承需要使用 <code>Object.create()</code> 函数。如下所示：</p><pre><code>var b = Object.create(a, {y: {value: 20}});\nvar c = Object.create(a, {y: {value: 30}});\n</code></pre><p>好了，我们再来看一段代码：</p><pre><code>// 一种构造函数写法\nfunction Foo(y) {\n  this.y = y;\n}\n \n// 修改 Foo 的 prototype，加入一个成员变量 x\nFoo.prototype.x = 10;\n \n// 修改 Foo 的 prototype，加入一个成员函数 calculate\nFoo.prototype.calculate = function (z) {\n  return this.x + this.y + z;\n};\n \n// 现在，我们用 Foo 这个原型来创建 b 和 c\nvar b = new Foo(20);\nvar c = new Foo(30);\n \n// 调用原型中的方法，可以得到正确的值\nb.calculate(30); // 60\nc.calculate(40); // 80\n</code></pre><p>那么，在内存中的布局是怎么样的呢？大概是下面这个样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/fa/6ca465981ae68f4a055f9ca4f16fdffa.png?wh=635x396\" alt=\"\"></p><p>这个图应该可以让你很好地看明白 <code>__proto__</code> 和 <code>prototype</code> 的差别了。</p><p>我们可以测试一下：</p><pre><code>b.__proto__ === Foo.prototype, // true\nc.__proto__ === Foo.prototype, // true\n \nb.constructor === Foo, // true\nc.constructor === Foo, // true\nFoo.prototype.constructor === Foo, // true\n \nb.calculate === b.__proto__.calculate, // true\nb.__proto__.calculate === Foo.prototype.calculate // true\n</code></pre><p>这里需要说明的是：</p><p><strong><code>Foo.prototype</code> 自动创建了一个属性 <code>constructor</code>，这是一个指向函数自己的一个reference。这样一来，对于实例 <code>b</code> 或 <code>c</code> 来说，就能访问到这个继承的 <code>constructor</code> 了。</strong></p><p>有了这些基本概念，我们就可以讲一下JavaScript的面向对象编程了。</p><blockquote>\n<p>注： 上面示例和图示来源于 <a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\">JavaScript, The Core</a> 一文。</p>\n</blockquote><h1>JavaScript原型编程的面向对象</h1><p>我们再来重温一下上面讲述的内容：</p><pre><code>function Person(){}\nvar p = new Person();\n\nPerson.prototype.name = &quot;Hao Chen&quot;;\nPerson.prototype.sayHello = function(){\n    console.log(&quot;Hi, I am &quot; + this.name);\n}\n\nconsole.log(p.name); // &quot;Hao Chen&quot;\np.sayHello(); // &quot;Hi, I am Hao Chen&quot;\n</code></pre><p>在上面这个例子中：</p><ul>\n<li>我们先生成了一个空的函数对象 <code>Person()</code>；</li>\n<li>然后将这个空的函数对象 <code>new</code> 出另一个对象，存在 <code>p</code> 中；</li>\n<li>这时再改变 <code>Person.prototype</code>，让其有一个 <code>name</code> 的属性和一个 <code>sayHello()</code> 的方法；</li>\n<li>我们发现，另外那个 <code>p</code> 的对象也跟着一起改变了。</li>\n</ul><p>注意一下：</p><ul>\n<li>当创建 <code>function Person(){}</code> 时，<code>Person.__proto__</code> 指向 <code>Function.prototype</code>;</li>\n<li>当创建 <code>var p = new Person()</code> 时，<code>p.__proto__</code> 指向 <code>Person.prototype</code>;</li>\n<li>当修改了 <code>Person.prototype</code> 的内容后，<code>p.__proto__</code> 的内容也就被改变了。</li>\n</ul><p>好了，我们再来看一下“原型编程”中面向对象的编程玩法。</p><p>首先，我们定义一个 <code>Person</code> 类。</p><pre><code>//Define human class\nvar Person = function (fullName, email) {\n  this.fullName = fullName;\n  this.email = email;\n  \n  this.speak = function(){\n    console.log(&quot;I speak English!&quot;);\n  };\n  this.introduction = function(){\n    console.log(&quot;Hi, I am &quot; + this.fullName);\n  };\n}\n</code></pre><p>上面这个对象中，包含了：</p><ul>\n<li>属性： <code>fullName</code> 和 <code>email</code>；</li>\n<li>方法： <code>speak()</code> 和 <code>introduction()</code>。</li>\n</ul><p>其实，所谓的方法也是属性。</p><p>然后，我们可以定义一个 <code>Student</code> 对象。</p><pre><code>//Define Student class\nvar Student = function(fullName, email, school, courses) {\n\n  Person.call(this, fullName, email);\n\n  // Initialize our Student properties\n  this.school = school;\n  this.courses = courses;\n  \n  // override the &quot;introduction&quot; method\n  this.introduction= function(){\n\tconsole.log(&quot;Hi, I am &quot; + this.fullName + \n\t\t\t\t&quot;. I am a student of &quot; + this.school + \n\t\t\t\t&quot;, I study &quot;+ this.courses +&quot;.&quot;);\n  };\n  \n  // Add a &quot;exams&quot; method\n  this.takeExams = function(){\n    console.log(&quot;This is my exams time!&quot;);\n  };\n};\n</code></pre><p>在上面的代码中：</p><ul>\n<li>\n<p>使用了 <code>Person.call(this, fullName, email)</code>，<code>call()</code> 或 <code>apply()</code> 都是为了动态改变 <code>this</code> 所指向的对象的内容而出现的。这里的 <code>this</code> 就是 <code>Student</code>。</p>\n</li>\n<li>\n<p>上面的例子中，我们重载了 <code>introduction()</code> 方法，并新增加了一个 <code>takeExams()</code>的方法。</p>\n</li>\n</ul><p>虽然，我们这样定义了 <code>Student</code>，但是它还没有和 <code>Person</code> 发生继承关系。为了要让它们发生关系，我们就需要修改 <code>Student</code> 的原型。</p><p>我们可以简单粗暴地做赋值：<code>Student.__proto__ = Person.prototype</code> ，但是，这太粗暴了。</p><p>我们还是使用比较规范的方式：</p><ul>\n<li>\n<p>先用 <code>Object.create()</code> 来将<code>Person.prototype</code> 和 <code>Student.prototype</code> 关联上。</p>\n</li>\n<li>\n<p>然后，修改一下构造函数 <code>Student.prototype.constructor = Student;</code>。</p>\n</li>\n</ul><pre><code>// Create a Student.prototype object that inherits \n// from Person.prototype.\nStudent.prototype = Object.create(Person.prototype); \n\n// Set the &quot;constructor&quot; property to refer to Student\nStudent.prototype.constructor = Student;\n</code></pre><p>这样，我们就可以这样使用了。</p><pre><code>var student = new Student(&quot;Hao Chen&quot;, \n\t\t\t\t\t\t  &quot;haoel@hotmail.com&quot;,\n\t\t\t\t\t\t  &quot;XYZ University&quot;, \n\t\t\t\t\t\t  &quot;Computer Science&quot;);\nstudent.introduction();   \nstudent.speak();       \nstudent.takeExams(); \n\n// Check that instanceof works correctly\nconsole.log(student instanceof Person);  // true \nconsole.log(student instanceof Student); // true\n</code></pre><p>上述就是基于原型的面向对象编程的玩法了。</p><blockquote>\n<p>注：在ECMAScript标准的第四版开始寻求使JavaScript提供基于类的构造，且ECMAScript第六版有提供\"class\"(类)作为原有的原型架构之上的语法糖，提供构建对象与处理继承时的另一种语法。</p>\n</blockquote><h1>小结</h1><p>我们可以看到，这种玩法就是一种委托的方式。在使用委托的基于原型的语言中，运行时语言可以“仅仅通过序列的指针找到匹配”这样的方式来定位属性或者寻找正确的数据。所有这些创建行为、共享的行为需要的是委托指针。</p><p>不像是基于类的面向对象语言中类和接口的关系，原型和它的分支之间的关系并不要求子对象有相似的内存结构，因为如此，子对象可以继续修改而无需像基于类的系统那样整理结构。还有一个要提到的地方是，不仅仅是数据，方法也能被修改。因为这个原因，大多数基于原型的语言把数据和方法提作“slots”。</p><p>这种在对象里面直接修改的玩法，虽然这个特性可以带来运行时的灵活性，我们可以在运行时修改一个prototype，给它增加甚至删除属性和方法。但是其带来了执行的不确定性，也有安全性的问题，而代码还变得不可预测，这有点黑科技的味道了。因为这些不像静态类型系统，没有一个不可变的契约对代码的确定性有保证，所以，需要使用者来自己保证。</p><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/301\">01 | 编程范式游记：起源</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/303\">02 | 编程范式游记：泛型编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2017\">03 | 编程范式游记：类型系统和泛型的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2711\">04 | 编程范式游记：函数式编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2723\">05 | 编程范式游记：修饰器模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2729\">06 | 编程范式游记：面向对象编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2741\">07 | 编程范式游记：基于原型的编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2748\">08 | 编程范式游记：Go 语言的委托模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2751\">09 | 编程范式游记：编程的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2752\">10 | 编程范式游记：逻辑编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2754\">11 | 编程范式游记：程序世界里的编程范式</a></li>\n</ul>","comments":[{"had_liked":false,"id":2510,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1517531366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35877269734","product_id":100002201,"comment_content":"c++的原型模式就是一个clone虚方法，这篇文章看得是很懵逼，完全不了解Javascript","like_count":9},{"had_liked":false,"id":3311,"user_name":"yun","can_delete":false,"product_type":"c1","uid":1054906,"ip_address":"","ucode":"3727BF0E566A76","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ba/fb86482f.jpg","comment_is_top":false,"comment_ctime":1519018218,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27288821994","product_id":100002201,"comment_content":"皓叔，是否可以分享下如何写出高质量的代码的经验？排查问题的方法经验？","like_count":6,"discussions":[{"author":{"id":1411096,"avatar":"https://static001.geekbang.org/account/avatar/00/15/88/18/9744d5ec.jpg","nickname":"小超人","note":"","ucode":"0D8A433F3E3737","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392261,"discussion_content":"这个我也想知道，同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630924956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1882795,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ba/ab/31ce4a20.jpg","nickname":"vegas","note":"","ucode":"312B85FFF1151F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340485,"discussion_content":"多看多写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610014977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2002555,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/8e/7b/701c741f.jpg","nickname":"难得自然萌","note":"","ucode":"73C86B48236104","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302187,"discussion_content":"代码大全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598834815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":5357,"user_name":"fsj","can_delete":false,"product_type":"c1","uid":1017571,"ip_address":"","ucode":"5DA2B549C9B5FE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/e3/28d1330a.jpg","comment_is_top":false,"comment_ctime":1523201760,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18703070944","product_id":100002201,"comment_content":"看了这篇文章，然后又去翻了《JavaScript高级程序设计》，终于把原型继承搞明白了。之前学习Objective-C，觉得这语法挺奇葩的，但是面向对象思想和Java等都是互通的，然后又学习了JS，算是更奇葩了，没有类，玩的是原型继承，也是服，为什么JS不搞成类继承，非要搞一个原型继承呢？","like_count":4,"discussions":[{"author":{"id":1085152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","nickname":"爱学习的大叔","note":"","ucode":"91F9ABF1EC98D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326888,"discussion_content":"es6开始关键字class了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605694195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298652,"discussion_content":"这样更加灵活，因为没有任何用户自定义类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597371503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1437763,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f0/43/1360c74e.jpg","nickname":"锋","note":"","ucode":"46F3018AD13641","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248912,"discussion_content":"从出生决定了的，js运行时的特性使得原型继承可以玩出花来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587902799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2516,"user_name":"强","can_delete":false,"product_type":"c1","uid":1026170,"ip_address":"","ucode":"B26A8E255D6154","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/7a/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1517546993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14402448881","product_id":100002201,"comment_content":"老师，有时间能写写go吗","like_count":3},{"had_liked":false,"id":211536,"user_name":"高科","can_delete":false,"product_type":"c1","uid":1107568,"ip_address":"","ucode":"81A4DDF41D3C1C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/70/b9907b0e.jpg","comment_is_top":false,"comment_ctime":1587980063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177914655","product_id":100002201,"comment_content":"曾经以为自己懂JS，结果发现还真是以为","like_count":3},{"had_liked":false,"id":125389,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1566177688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10156112280","product_id":100002201,"comment_content":"看过之前完全不懂，看完之后懵懵懂懂。不晓得什么时候才能搞懂。","like_count":2},{"had_liked":false,"id":106883,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1561421779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151356371","product_id":100002201,"comment_content":"基于原型的编程可以理解为是基于实例的编程，这种玩法就是一种委托的方式。在使用委托的基于原型的语言中，运行时语言可以“仅仅通过序列的指针找到匹配”这样的方式来定位属性或者寻找正确的数据。所有这些创建行为共享的行为需要的是委托指针。js使用基于原型的编程方法","like_count":3},{"had_liked":false,"id":69530,"user_name":"杨洪林","can_delete":false,"product_type":"c1","uid":1078679,"ip_address":"","ucode":"FA48C280791A55","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/97/abcd222a.jpg","comment_is_top":false,"comment_ctime":1550761097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140695689","product_id":100002201,"comment_content":"引用于JavaScript, The Core的图例有些问题，Function.prototype的__proto__应该是指向Object.prototype, 似乎Object.prototype应该是所有非prime类型对象的根","like_count":2},{"had_liked":false,"id":253860,"user_name":"wWw","can_delete":false,"product_type":"c1","uid":1179151,"ip_address":"","ucode":"10E97DD32C8F88","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/0f/4ac8d723.jpg","comment_is_top":false,"comment_ctime":1602921712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897889008","product_id":100002201,"comment_content":"类定义了对象的基本布局和函数特性，而接口是“可以使用的”对象，它基于特定类的样式。在此模型中，类表现为行为和结构的集合，对所有接口来说这些类的行为和结构都是相同的。因而，区分规则首先是基于行为和结构，而后才是状态。<br><br>这里的“接口是可以使用的对象”如何理解？对所有接口来说类的行为和结构是相同的，这个也没理解？麻烦理解的学友帮忙解释一下","like_count":1},{"had_liked":false,"id":237281,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1595767170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890734466","product_id":100002201,"comment_content":"多读了几遍后. 猜想&quot;可以使用&quot; 是说接口只定义了抽象方法. 而用户可以根据接口直接使用它类型的对象而不用担心属性值么?","like_count":1},{"had_liked":false,"id":237280,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1595766780,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5890734076","product_id":100002201,"comment_content":"老师: Java中接口是类的一种抽象. 为什么说接口是&quot;可以使用的&quot;对象. 如果 &quot;使用&quot; 接口作为一种类型的话, 那类也是一种类型. 他们都是可使用的.","like_count":1,"discussions":[{"author":{"id":1740409,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8e/79/f9d5dd3a.jpg","nickname":"吕超","note":"","ucode":"B36883984BE16B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338478,"discussion_content":"“使用”的意思应该就是指implements关键字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609298363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170937,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1578791274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873758570","product_id":100002201,"comment_content":"基于原型的面向对象的编程语言。js日常也有使用到，不过，只知道是动态运行时语言，对其原型概念并不懂。或者日常也不使用这个特性。从文章介绍，可以看到存在很多灵活性。存在这种逻辑也是很有趣的","like_count":1},{"had_liked":false,"id":135968,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1569317984,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5864285280","product_id":100002201,"comment_content":"理解了原型模式，才能更好地使用面向对象思想写JavaScript代码。","like_count":1},{"had_liked":false,"id":3181,"user_name":"songyy","can_delete":false,"product_type":"c1","uid":1007201,"ip_address":"","ucode":"34D6443B91676D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/61/985f3eb7.jpg","comment_is_top":false,"comment_ctime":1518625979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5813593275","product_id":100002201,"comment_content":"以前一直没有完全搞清楚JavaScript的prototype是什么原理，看了那张引用自《JavaScript，the core》的图和例子，感觉清晰好多了。<br><br>后面那个inheritance的例子也很棒，是我以前不清楚的。但最后那个instanceof的部分，我没太看懂原因：如果我有三层继承，那么三个class分别去检查instanceof，都会是true么？","like_count":1},{"had_liked":false,"id":2562,"user_name":"ajodfaj","can_delete":false,"product_type":"c1","uid":1019618,"ip_address":"","ucode":"4E96DDDF9D686D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/e2/fc6260fb.jpg","comment_is_top":false,"comment_ctime":1517801055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5812768351","product_id":100002201,"comment_content":"Javascript其实挺有意思的","like_count":1},{"had_liked":false,"id":338617,"user_name":"bqzzz","can_delete":false,"product_type":"c1","uid":2421268,"ip_address":"","ucode":"839C999BF33969","user_header":"https://static001.geekbang.org/account/avatar/00/24/f2/14/944e0c5f.jpg","comment_is_top":false,"comment_ctime":1647600918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647600918","product_id":100002201,"comment_content":"最后一个图是错了还是JavaScript更新了机制？<br>现在原文链接中Function.prototype.__proto__ === Object.prototype，而专栏中的Function.prototype.__proto__指向自身？","like_count":1},{"had_liked":false,"id":316983,"user_name":"seedjyh","can_delete":false,"product_type":"c1","uid":2309641,"ip_address":"","ucode":"D590E526A9A1D7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4IPqj4H3jQHq4C1lgKh6ZroK3CVmGLiadic7S1rxbuy09JM9x8Aib6VkozPkO4lrUTHAhicX1z9Cg2w/132","comment_is_top":false,"comment_ctime":1634632084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634632084","product_id":100002201,"comment_content":"原型链有点像继承链，只不过是允许动态修改的。","like_count":0},{"had_liked":false,"id":282923,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1399663,"ip_address":"","ucode":"CC7B15CE63264B","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/6f/113e24e6.jpg","comment_is_top":false,"comment_ctime":1615466748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615466748","product_id":100002201,"comment_content":"好多年没有碰过js了，原型继承、构造器，确实是之前学习时候碰到的哪点。<br>看完这篇之后，感觉对这块的认知更加清晰了","like_count":0},{"had_liked":false,"id":281832,"user_name":"Jacob.C","can_delete":false,"product_type":"c1","uid":1070253,"ip_address":"","ucode":"034998E7A7CCD1","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ad/6ee2b7cb.jpg","comment_is_top":false,"comment_ctime":1614917416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614917416","product_id":100002201,"comment_content":"基于原型，看着像鸭子类型系统语言的一般应用","like_count":0},{"had_liked":false,"id":278556,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1613055458,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1613055458","product_id":100002201,"comment_content":"看来JS是个多范式语言啊，作者把时髦的东西全拿进去了…… 函数式、原型、动态类型……","like_count":0},{"had_liked":false,"id":267138,"user_name":"刘匿名","can_delete":false,"product_type":"c1","uid":1319157,"ip_address":"","ucode":"CB4C1DC8C1BB31","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/f5/6cdbfa90.jpg","comment_is_top":false,"comment_ctime":1607606498,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607606498","product_id":100002201,"comment_content":"js 的面向对象方式选择了灵活性，一定程度上失去了安全性和可预测性。<br>以前用过js，灵活简单易上手，但是同时项目复杂时就会很难排查问题，后来兴起了一系列前端项目的构建工具，和js的这些特点也不无关系。<br>每门语言都有自己的设计初衷和适用场景，现在常见的开发语言，设计思路上都有很多精华值得学习。<br>皓哥这篇文章把js面向对象的精华深入浅出的总结了下，赞！","like_count":1},{"had_liked":false,"id":245099,"user_name":"难得自然萌","can_delete":false,"product_type":"c1","uid":2002555,"ip_address":"","ucode":"73C86B48236104","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8e/7b/701c741f.jpg","comment_is_top":false,"comment_ctime":1598834910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598834910","product_id":100002201,"comment_content":"看完文章以后要看很多东西才能完全把文章内容给消化掉，感谢耗子","like_count":0},{"had_liked":false,"id":4633,"user_name":"Kennedy","can_delete":false,"product_type":"c1","uid":1049022,"ip_address":"","ucode":"C50627007E5ED0","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/be/be358cab.jpg","comment_is_top":false,"comment_ctime":1522288225,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1522288225","product_id":100002201,"comment_content":"Lua的__index也属于原型链模式","like_count":0}]}