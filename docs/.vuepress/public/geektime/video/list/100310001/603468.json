{"id":603468,"title":"17｜告别新手村：Python 编程基础知识","content":"<p>你好，我是尹会生。</p><p>在前面几节课里，我们着重讲了Python中最基础也最常用的功能——变量赋值，并为你介绍了两种基础数据类型字符串和整数，你会发现将这两种数据类型赋值给变量之后，Python支持了非常多的内置函数，让你操作起这两种类型来更得心应手。</p><p>在掌握了操作技巧之后，我们将深入原理，理解程序的行为，加深你的记忆。变量赋值的概念和你在学习C、Java等其他编程语言时，是略有差异的，这就会导致你在编写程序的时候容易产生Bug，所以我想在这一章的总结部分，再为你详细剖析一下变量赋值的内部运行原理，让你更好地理解Python的运作模式。</p><p><strong>首先，Python的变量名是为变量贴标签，而不是装着变量的盒子。</strong></p><p>我用一个例子带你来理解一下变量名是标签这句话。</p><pre><code class=\"language-python\">var1 = 123\nvar2 = 456\nvar1 = var2\nvar2 = 789\nprint(var1)\n</code></pre><p>以上程序，我实现了对var1和var2变量的多次赋值，你能在没有运行程序之前，就猜到它的执行结果吗？</p><p>当你拿着这段程序在Python解释器运行之后，如果发现和你猜想的结果不同，也不要太灰心，我现在就带你来分析一下Python解释器在背后到底做了什么。</p><p>相信你在学习C语言时，为了更形象地记住变量这个抽象的概念，老师会和你说变量是个盒子，为变量赋值意味着在盒子里放入值。</p>","comments":[{"had_liked":false,"id":387404,"user_name":"Ethan New","can_delete":false,"product_type":"c3","uid":2063962,"ip_address":"浙江","ucode":"9CA2EF39E58030","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7e/5a/da39f489.jpg","comment_is_top":false,"comment_ctime":1707201574,"is_pvip":true,"replies":[{"id":141426,"content":"给箱子贴标签是一种比喻，更严谨的说法是：\npython这种机制被称为&quot;引用赋值&quot;,Python中的变量名只是对象的引用,而不是对象本身。\n当你执行 var1 = 12345 时,Python会在内存中为整数 12345 创建一个对象,然后让变量名 var1 指向(引用)这个对象。\n当你执行 var2 = var1 时,Python不会创建一个新的对象,而是让变量名 var2 指向与 var1 相同的那个整数对象 12345。这意味着 var1 和 var2 现在都指向同一个对象。\n原来 var1 所指向的对象并没有被覆盖或删除,它仍然存在于内存中,只是现在有两个变量名 var1 和 var2 都指向同一个对象而已。","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1710140584,"ip_address":"广东","comment_id":387404,"utype":1}],"discussion_count":1,"race_medal":4,"score":2,"product_id":100310001,"comment_content":"变量赋值贴标签的这套理论感觉是错误的，var1 = var2，按照你的理论是var1 和 var2 的标签贴到了同一个箱子上，原来var1被贴的箱子没有标签，也就没法访问，实际并不是这样的。","like_count":2,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638955,"discussion_content":"给箱子贴标签是一种比喻，更严谨的说法是：\npython这种机制被称为&#34;引用赋值&#34;,Python中的变量名只是对象的引用,而不是对象本身。\n当你执行 var1 = 12345 时,Python会在内存中为整数 12345 创建一个对象,然后让变量名 var1 指向(引用)这个对象。\n当你执行 var2 = var1 时,Python不会创建一个新的对象,而是让变量名 var2 指向与 var1 相同的那个整数对象 12345。这意味着 var1 和 var2 现在都指向同一个对象。\n原来 var1 所指向的对象并没有被覆盖或删除,它仍然存在于内存中,只是现在有两个变量名 var1 和 var2 都指向同一个对象而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710140585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377904,"user_name":"小昭","can_delete":false,"product_type":"c3","uid":1326905,"ip_address":"上海","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/a4c2154b.jpg","comment_is_top":false,"comment_ctime":1689500598,"is_pvip":false,"replies":[{"id":138182,"content":"我提供一个学习方法， 你可以尝试先做个标记，然后继续后面的内容，看看回过头来，是否能针对这一节不懂的地方，提出更具体的问题。\n\n欢迎留言给我","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1691595301,"ip_address":"甘肃","comment_id":377904,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"前面几节课程能听懂，作业也能独立完成，这节总结课看晕了。。。我决定先放一放，下周继续往下学习，然后下周末再来复习一下这一节","like_count":1,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625359,"discussion_content":"我提供一个学习方法， 你可以尝试先做个标记，然后继续后面的内容，看看回过头来，是否能针对这一节不懂的地方，提出更具体的问题。\n\n欢迎留言给我","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691595301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"甘肃","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1326905,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3f/39/a4c2154b.jpg","nickname":"小昭","note":"","ucode":"149540DCFDF43E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":625496,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691755040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625359,"ip_address":"浙江","group_id":0},"score":625496,"extra":""}]}]},{"had_liked":false,"id":392112,"user_name":"莲台野夜行","can_delete":false,"product_type":"c3","uid":1441180,"ip_address":"湖北","ucode":"B759D03BAE15C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fd/9c/54e347ed.jpg","comment_is_top":false,"comment_ctime":1719987942,"is_pvip":false,"replies":[{"id":142781,"content":"你的理解基本上是正确的。变量在赋值时，实际上是在调整它们指向的内存地址。当我们重新赋值一个变量时，该变量指向的地址会被更新，而其他变量的指向并不会改变。这种行为使得变量之间的关系更像是指针指向内存地址\n\n课程中提到的盒子就是内存地址，因为大部分初学者对内存地址比较陌生，所以以盒子作为举例","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1723006561,"ip_address":"广东","comment_id":392112,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"第一个案例里我预测的结果是 789 但是打印出了 456；结合老师的描述我是这么理解的，不知道对不对\nvar1 = 123 # 是给 123 所存储的内存地址（盒子）打上了标签，而不是123本身\nvar2 = 456 # 略\nvar1 = var2 # 相当于把 var1 这个标签更改到当前的 var2 这个标签当前引用的地址块上\nvar2 = 789 # var2 这个标签代表的地址块更新为 789 的地址块 由于 var1 这个标签的地址块并没有变动，所以var1此时打印出来还是456","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649213,"discussion_content":"你的理解基本上是正确的。变量在赋值时，实际上是在调整它们指向的内存地址。当我们重新赋值一个变量时，该变量指向的地址会被更新，而其他变量的指向并不会改变。这种行为使得变量之间的关系更像是指针指向内存地址\n\n课程中提到的盒子就是内存地址，因为大部分初学者对内存地址比较陌生，所以以盒子作为举例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723006561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3940442,"avatar":"","nickname":"Geek_74b064","note":"","ucode":"0B0EC65269A036","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649459,"discussion_content":"车万人？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723432498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380570,"user_name":"Zeros","can_delete":false,"product_type":"c3","uid":1901153,"ip_address":"河北","ucode":"9932564FBFEF82","user_header":"https://static001.geekbang.org/account/avatar/00/1d/02/61/b3e1b32d.jpg","comment_is_top":false,"comment_ctime":1693831413,"is_pvip":false,"replies":[{"id":138766,"content":"可以具体贴一下代码，我来帮你看一下。\n\n因为目前留言在总结这一节下面，我没办法对应到具体的代码","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1694588048,"ip_address":"广东","comment_id":380570,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"第二段代码，我们在终端执行 python.exe 后，进入到交互模式，再次运行，发现没有共用一个盒子，通过 is 比较操作符也印证了我的结论。\n\n为什么会出现两种不同的结论呢？这其实是 Python 为了优化运行效率，在 Python 解释器中做的一项优化工作，即在交互模式下，字符串中如果只包含普通字符（a-z A-Z），且不超过 65535 个字符长度（Python3.8 版本以前限制字符串字符串长度为 20 个字符），Python 解释器只在内存中保留一份该字符串对象-----是不说错了，在第二个例子python交互模式下，是保留了两份该字符串对象","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627818,"discussion_content":"可以具体贴一下代码，我来帮你看一下。\n\n因为目前留言在总结这一节下面，我没办法对应到具体的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694588049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3783662,"avatar":"https://static001.geekbang.org/account/avatar/00/39/bb/ee/a5434c34.jpg","nickname":"Palpitate","note":"","ucode":"63F9F8CA7848D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632525,"discussion_content":"应该是交互模式下，没有字符驻留吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700919880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380097,"user_name":"Geek_443d61","can_delete":false,"product_type":"c3","uid":1266156,"ip_address":"陕西","ucode":"D6F52025D3A73F","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/ec/1c706618.jpg","comment_is_top":false,"comment_ctime":1692957105,"is_pvip":false,"replies":[{"id":138468,"content":"虽然小整数缓存（即 -5 到 256 的范围）是 Python 的一个特性，但实际的缓存范围和特定的实现或平台设置可能有关。大多数常规的 CPython 实现都遵循这个缓存范围，但在某些情况下，其他数字可能也会被缓存，尤其是如果你的 Python 版本、实现或平台有所不同。\n\n可以提供一下你的平台和版本","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1693236090,"ip_address":"广东","comment_id":380097,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"number1 = -7\nnumber2 = -7\nprint(number1 is number2)\n为啥我这显示 True","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626661,"discussion_content":"虽然小整数缓存（即 -5 到 256 的范围）是 Python 的一个特性，但实际的缓存范围和特定的实现或平台设置可能有关。大多数常规的 CPython 实现都遵循这个缓存范围，但在某些情况下，其他数字可能也会被缓存，尤其是如果你的 Python 版本、实现或平台有所不同。\n\n可以提供一下你的平台和版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693236090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369528,"user_name":"流云箴逝水","can_delete":false,"product_type":"c3","uid":1383402,"ip_address":"福建","ucode":"CF34A0B046B75D","user_header":"https://static001.geekbang.org/account/avatar/00/15/1b/ea/c065fda1.jpg","comment_is_top":false,"comment_ctime":1677638439,"is_pvip":false,"replies":[{"id":134855,"content":"没错，如果不在Python交互环境，默认为变量赋值，执行函数等，不会进行输出。\npython交互环境也是为了方便调试，才对变量直接输出的","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1678156714,"ip_address":"广东","comment_id":369528,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"var1 = &quot;hello!&quot;\nvar2 = &quot;hello!&quot;\nid(var1)\nid(var2)\nprint(var1 is var2) #需要加上print才能输出比较结果","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607853,"discussion_content":"没错，如果不在Python交互环境，默认为变量赋值，执行函数等，不会进行输出。\npython交互环境也是为了方便调试，才对变量直接输出的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678156714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362566,"user_name":"sunny","can_delete":false,"product_type":"c3","uid":1904632,"ip_address":"北京","ucode":"12350F6FF873D1","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0f/f8/e1b9c1cc.jpg","comment_is_top":false,"comment_ctime":1668648659,"is_pvip":false,"replies":[{"id":131847,"content":"sunny同学你好，按正常更新节奏（每周三更新一章，共15章）2月中旬可以更新完","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1668658115,"ip_address":"北京","comment_id":362566,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"整个课程多久能更新完毕，尹老师？","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593924,"discussion_content":"sunny同学你好，按正常更新节奏（每周三更新一章，共15章）2月中旬可以更新完","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668658115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365715,"user_name":"yanyu-xin","can_delete":false,"product_type":"c3","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1672915173,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import sys\n# 将浮点数或较大整数用str转为字符串，用intern驻留内存\n# 较大整数\nn5 = 1234567890\nn6 = 1234567890\nstr_n5 = sys.intern(str(n5))\nstr_n6 = sys.intern(str(n6))\nprint((str_n5 is str_n6 ))\n# 浮点数\nn7 = 1234567890.987654321\nn8 = 1234567890.987654321\nstr_n7 = sys.intern(str(n7))\nstr_n8 = sys.intern(str(n8))\nprint((str_n7 is str_n8 ))","like_count":1},{"had_liked":false,"id":362653,"user_name":"孔方兄","can_delete":false,"product_type":"c3","uid":3225595,"ip_address":"新加坡","ucode":"28369C9B7A6E0F","user_header":"https://static001.geekbang.org/account/avatar/00/31/37/fb/71242ec7.jpg","comment_is_top":false,"comment_ctime":1668709694,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"我们按照 Python 的变量赋值原理，再来理解一下第 3 行代码 var1 = var2 ，通常人们口中说的：“将 var2 赋值给 var1”，它内部的工作原理是：将 var1 标签从当前的盒子上取下来，贴在标记着 var2 标签的盒子上。那原来的盒子会怎样呢？一旦盒子上没有了标签，就会按照 Python 默认的空间分配和回收规则，继续保留，或者扔进垃圾箱，扔进垃圾箱的过程就叫做“内存回收”。\n\n改成\n\n我们按照 Python 的变量赋值原理，再来理解一下第 3 行代码 var1 = var2 ，通常人们口中说的：“将 var2 赋值给 var1”，它内部的工作原理是：将var2 对应的内存值 拷贝 并 粘贴到 var1 对应的内存中。","like_count":1,"discussions":[{"author":{"id":2383299,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5d/c3/b8bb888c.jpg","nickname":"依托答辩","note":"","ucode":"4BE79E8A030813","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632185,"discussion_content":"感觉老师的说法更通俗易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700548668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2147620,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c5/24/d4b674fb.jpg","nickname":"pp","note":"","ucode":"EABD25B913708F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626219,"discussion_content":"好像不能这么改，这完全是不一样的意思吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692664460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362484,"user_name":"xinn","can_delete":false,"product_type":"c3","uid":2809426,"ip_address":"美国","ucode":"4F1F78839D3C9B","user_header":"https://static001.geekbang.org/account/avatar/00/2a/de/52/816a6bc3.jpg","comment_is_top":false,"comment_ctime":1668567997,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"1，在交互模式下明明是False呀？怎么同用啦？\n2，而且“hello！”中不是还有！吗，不是只有字母？","like_count":1},{"had_liked":false,"id":390751,"user_name":"037985","can_delete":false,"product_type":"c3","uid":3032509,"ip_address":"湖北","ucode":"47BCAC32220432","user_header":"","comment_is_top":false,"comment_ctime":1716186390,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"好","like_count":0},{"had_liked":false,"id":384762,"user_name":"李兴昌","can_delete":false,"product_type":"c3","uid":1824154,"ip_address":"广东","ucode":"09307179A0BFE9","user_header":"","comment_is_top":false,"comment_ctime":1701480803,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"老师，我看视频每一章最后的总结都说有思考题的答案，但是视频里面没有显示，请问是怎么回事？","like_count":0},{"had_liked":false,"id":380096,"user_name":"Geek_443d61","can_delete":false,"product_type":"c3","uid":1266156,"ip_address":"陕西","ucode":"D6F52025D3A73F","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/ec/1c706618.jpg","comment_is_top":false,"comment_ctime":1692957082,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"number1 = -7\nnumber2 = -7\nprint(number1 is number2)","like_count":0},{"had_liked":false,"id":378082,"user_name":"Geek_219b52","can_delete":false,"product_type":"c3","uid":1524531,"ip_address":"浙江","ucode":"955D79DEFD2DF4","user_header":"https://static001.geekbang.org/account/avatar/00/17/43/33/b9127867.jpg","comment_is_top":false,"comment_ctime":1689738208,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"#使用浮点数或者较大的整数，实现内存驻留功能\nimport sys\nfloat1 = sys.intern(&quot;123.11&quot;)\nfloat2 = sys.intern(&quot;123.11&quot;)\nprint(float1 is float2)\n\nnum1 = sys.intern(&quot;10000&quot;)\nnum2 = sys.intern(&quot;10000&quot;)\nprint(num1 is num2)","like_count":0},{"had_liked":false,"id":374602,"user_name":"camel","can_delete":false,"product_type":"c3","uid":1117530,"ip_address":"浙江","ucode":"D0D698CD74388F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/5a/e60f4125.jpg","comment_is_top":false,"comment_ctime":1684223578,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"关于在IDE中和交互界面下对字符串取id结果不同的实验，个人理解老师的实验和结论（或者说原因解释）不匹配。\n文中对比实验能说明的结论是两种方式的解释器的字符串驻留方式不一样。\n而要得出文中的结论，要做的两个实验应该是同样在交互界面下：1. 两个&quot;hello&quot;分别赋值变量，id相同。2. 两个&quot;hello!&quot;分别赋值变量，id不同（因为包含特殊字符！导致没触发字符串驻留）","like_count":0},{"had_liked":false,"id":366344,"user_name":"Seven","can_delete":false,"product_type":"c3","uid":2403766,"ip_address":"四川","ucode":"37D99CF8535CDE","user_header":"https://static001.geekbang.org/account/avatar/00/24/ad/b6/a8caa2c7.jpg","comment_is_top":false,"comment_ctime":1673595730,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100310001,"comment_content":"不让他们被内存回收, 将这些变量与程序的整个生命周期绑定: 放到全局变量中 或者 持续保证有其他函数的引用","like_count":0},{"had_liked":false,"id":362943,"user_name":"进化菌","can_delete":false,"product_type":"c3","uid":1276861,"ip_address":"北京","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1669049064,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":3,"product_id":100310001,"comment_content":"内存驻留大概就是说重复使用同一个盒子的意思。\n浮点数和大数的运算似乎有溢出的风险，要保证大量重复使用而不改变内存，使用字符串转换吗？","like_count":0}]}