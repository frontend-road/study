{"id":308393,"title":"37 | 数据分布优化：如何应对数据倾斜？","content":"<p>你好，我是蒋德钧。</p><p>在切片集群中，数据会按照一定的分布规则分散到不同的实例上保存。比如，在使用Redis Cluster或Codis时，数据都会先按照CRC算法的计算值对Slot（逻辑槽）取模，同时，所有的Slot又会由运维管理员分配到不同的实例上。这样，数据就被保存到相应的实例上了。</p><p>虽然这种方法实现起来比较简单，但是很容易导致一个问题：数据倾斜。</p><p>数据倾斜有两类。</p><ul>\n<li><strong>数据量倾斜</strong>：在某些情况下，实例上的数据分布不均衡，某个实例上的数据特别多。</li>\n<li><strong>数据访问倾斜</strong>：虽然每个集群实例上的数据量相差不大，但是某个实例上的数据是热点数据，被访问得非常频繁。</li>\n</ul><p>如果发生了数据倾斜，那么保存了大量数据，或者是保存了热点数据的实例的处理压力就会增大，速度变慢，甚至还可能会引起这个实例的内存资源耗尽，从而崩溃。这是我们在应用切片集群时要避免的。</p><p>今天这节课，我就来和你聊聊，这两种数据倾斜是怎么发生的，我们又该怎么应对。</p><h2>数据量倾斜的成因和应对方法</h2><p>首先，我们来看数据量倾斜的成因和应对方案。</p><p>当数据量倾斜发生时，数据在切片集群的多个实例上分布不均衡，大量数据集中到了一个或几个实例上，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/85/2cb89b2d1b319fb43a5d1b94d7929685.jpg?wh=2104*1455\" alt=\"\"></p><p>那么，数据量倾斜是怎么产生的呢？这主要有三个原因，分别是某个实例上保存了bigkey、Slot分配不均衡以及Hash Tag。接下来，我们就一个一个来分析，同时我还会给你讲解相应的解决方案。</p><!-- [[[read_end]]] --><h4>bigkey导致倾斜</h4><p>第一个原因是，某个实例上正好保存了bigkey。bigkey的value值很大（String类型），或者是bigkey保存了大量集合元素（集合类型），会导致这个实例的数据量增加，内存资源消耗也相应增加。</p><p>而且，bigkey的操作一般都会造成实例IO线程阻塞，如果bigkey的访问量比较大，就会影响到这个实例上的其它请求被处理的速度。</p><p>其实，bigkey已经是我们课程中反复提到的一个关键点了。为了避免bigkey造成的数据倾斜，一个根本的应对方法是，<strong>我们在业务层生成数据时，要尽量避免把过多的数据保存在同一个键值对中</strong>。</p><p>此外，<strong>如果bigkey正好是集合类型，我们还有一个方法，就是把bigkey拆分成很多个小的集合类型数据，分散保存在不同的实例上</strong>。</p><p>我给你举个例子。假设Hash类型集合user:info保存了100万个用户的信息，是一个bigkey。那么，我们就可以按照用户ID的范围，把这个集合拆分成10个小集合，每个小集合只保存10万个用户的信息（例如小集合1保存的是ID从1到10万的用户信息，小集合2保存的是ID从10万零1到20万的用户）。这样一来，我们就可以把一个bigkey化整为零、分散保存了，避免了bigkey给单个切片实例带来的访问压力。</p><p>需要注意的是，当bigkey访问量较大时，也会造成数据访问倾斜，我一会儿再给你讲具体怎么应对。</p><p>接下来，我们再来看导致数据量倾斜的第二个原因：Slot分配不均衡。</p><h4>Slot分配不均衡导致倾斜</h4><p>如果集群运维人员没有均衡地分配Slot，就会有大量的数据被分配到同一个Slot中，而同一个Slot只会在一个实例上分布，这就会导致，大量数据被集中到一个实例上，造成数据倾斜。</p><p>我以Redis Cluster为例，来介绍下Slot分配不均衡的情况。</p><p>Redis Cluster一共有16384个Slot，假设集群一共有5个实例，其中，实例1的硬件配置较高，运维人员在给实例分配Slot时，就可能会给实例1多分配些Slot，把实例1的资源充分利用起来。</p><p>但是，我们其实并不知道数据和Slot的对应关系，这种做法就可能会导致大量数据正好被映射到实例1上的Slot，造成数据倾斜，给实例1带来访问压力。</p><p>为了应对这个问题，我们可以通过运维规范，在分配之前，我们就要避免把过多的Slot分配到同一个实例。如果是已经分配好Slot的集群，我们可以先查看Slot和实例的具体分配关系，从而判断是否有过多的Slot集中到了同一个实例。如果有的话，就将部分Slot迁移到其它实例，从而避免数据倾斜。</p><p>不同集群上查看Slot分配情况的方式不同：如果是Redis Cluster，就用CLUSTER SLOTS命令；如果是Codis，就可以在codis dashboard上查看。</p><p>比如说，我们执行CLUSTER SLOTS命令查看Slot分配情况。命令返回结果显示，Slot 0 到Slot 4095被分配到了实例192.168.10.3上，而Slot 12288到Slot 16383被分配到了实例192.168.10.5上。</p><pre><code>127.0.0.1:6379&gt; cluster slots\n1) 1) (integer) 0\n   2) (integer) 4095\n   3) 1) &quot;192.168.10.3&quot;\n      2) (integer) 6379\n2) 1) (integer) 12288\n   2) (integer) 16383\n   3) 1) &quot;192.168.10.5&quot;\n      2) (integer) 6379\n</code></pre><p>如果某一个实例上有太多的Slot，我们就可以使用迁移命令把这些Slot迁移到其它实例上。在Redis Cluster中，我们可以使用3个命令完成Slot迁移。</p><ol>\n<li>CLUSTER SETSLOT：使用不同的选项进行三种设置，分别是设置Slot要迁入的目标实例，Slot要迁出的源实例，以及Slot所属的实例。</li>\n<li>CLUSTER GETKEYSINSLOT：获取某个Slot中一定数量的key。</li>\n<li>MIGRATE：把一个key从源实例实际迁移到目标实例。</li>\n</ol><p>我来借助一个例子，带你了解下这三个命令怎么用。</p><p>假设我们要把Slot 300从源实例（ID为3）迁移到目标实例（ID为5），那要怎么做呢？</p><p>实际上，我们可以分成5步。</p><p>第1步，我们先在目标实例5上执行下面的命令，将Slot 300的源实例设置为实例3，表示要从实例3上迁入Slot 300。</p><pre><code>CLUSTER SETSLOT 300 IMPORTING 3\n</code></pre><p>第2步，在源实例3上，我们把Slot 300的目标实例设置为5，这表示，Slot 300要迁出到实例5上，如下所示：</p><pre><code>CLUSTER SETSLOT 300 MIGRATING 5\n</code></pre><p>第3步，从Slot 300中获取100 个key。因为Slot中的key数量可能很多，所以我们需要在客户端上多次执行下面的这条命令，分批次获得并迁移key。</p><pre><code>CLUSTER GETKEYSINSLOT 300 100\n</code></pre><p>第4步，我们把刚才获取的100个key中的key1迁移到目标实例5上（IP为192.168.10.5），同时把要迁入的数据库设置为0号数据库，把迁移的超时时间设置为timeout。我们重复执行MIGRATE命令，把100个key都迁移完。</p><pre><code>MIGRATE 192.168.10.5 6379 key1 0 timeout\n</code></pre><p>最后，我们重复执行第3和第4步，直到Slot中的所有key都迁移完成。</p><p>从Redis 3.0.6开始，你也可以使用KEYS选项，一次迁移多个key（key1、2、3），这样可以提升迁移效率。</p><pre><code>MIGRATE 192.168.10.5 6379 &quot;&quot; 0 timeout KEYS key1 key2 key3\n</code></pre><p>对于Codis来说，我们可以执行下面的命令进行数据迁移。其中，我们把dashboard组件的连接地址设置为ADDR，并且把Slot 300迁移到编号为6的codis server group上。</p><pre><code>codis-admin --dashboard=ADDR -slot-action --create --sid=300 --gid=6\n</code></pre><p>除了bigkey和Slot分配不均衡会导致数据量倾斜，还有一个导致倾斜的原因，就是使用了Hash Tag进行数据切片。</p><h4>Hash Tag导致倾斜</h4><p>Hash Tag是指加在键值对key中的一对花括号{}。这对括号会把key的一部分括起来，客户端在计算key的CRC16值时，只对Hash Tag花括号中的key内容进行计算。如果没用Hash Tag的话，客户端计算整个key的CRC16的值。</p><p>举个例子，假设key是user:profile:3231，我们把其中的3231作为Hash Tag，此时，key就变成了user:profile:{3231}。当客户端计算这个key的CRC16值时，就只会计算3231的CRC16值。否则，客户端会计算整个“user:profile:3231”的CRC16值。</p><p>使用Hash Tag的好处是，如果不同key的Hash Tag内容都是一样的，那么，这些key对应的数据会被映射到同一个Slot中，同时会被分配到同一个实例上。</p><p>下面这张表就显示了使用Hash Tag后，数据被映射到相同Slot的情况，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/36/d560b0161f1f786328dbd8a1df66d036.jpg?wh=2654*659\" alt=\"\"></p><p>其中，user:profile:{3231}和user:order:{3231}的Hash Tag一样，都是3231，它们的CRC16计算值对16384取模后的值也是一样的，所以就对应映射到了相同的Slot 1024中。user:profile:{5328}和user:order:{5328}也是相同的映射结果。</p><p>那么，Hash Tag一般用在什么场景呢？其实，它主要是用在Redis Cluster和Codis中，支持事务操作和范围查询。因为Redis Cluster和Codis本身并不支持跨实例的事务操作和范围查询，当业务应用有这些需求时，就只能先把这些数据读取到业务层进行事务处理，或者是逐个查询每个实例，得到范围查询的结果。</p><p>这样操作起来非常麻烦，所以，我们可以使用Hash Tag把要执行事务操作或是范围查询的数据映射到同一个实例上，这样就能很轻松地实现事务或范围查询了。</p><p>但是，使用Hash Tag的潜在问题，就是大量的数据可能被集中到一个实例上，导致数据倾斜，集群中的负载不均衡。那么，该怎么应对这种问题呢？我们就需要在范围查询、事务执行的需求和数据倾斜带来的访问压力之间，进行取舍了。</p><p>我的建议是，如果使用Hash Tag进行切片的数据会带来较大的访问压力，就优先考虑避免数据倾斜，最好不要使用Hash Tag进行数据切片。因为事务和范围查询都还可以放在客户端来执行，而数据倾斜会导致实例不稳定，造成服务不可用。</p><p>好了，到这里，我们完整地了解了数据量倾斜的原因以及应对方法。接下来，我们再来看数据访问倾斜的原因和应对方法。</p><h2>数据访问倾斜的成因和应对方法</h2><p>发生数据访问倾斜的根本原因，就是实例上存在热点数据（比如新闻应用中的热点新闻内容、电商促销活动中的热门商品信息，等等）。</p><p>一旦热点数据被存在了某个实例中，那么，这个实例的请求访问量就会远高于其它实例，面临巨大的访问压力，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/20/94b1ca50143db1d09c60475fa7b41820.jpg?wh=1972*1497\" alt=\"\"></p><p>那么，我们该如何应对呢？</p><p>和数据量倾斜不同，热点数据通常是一个或几个数据，所以，直接重新分配Slot并不能解决热点数据的问题。</p><p>通常来说，热点数据以服务读操作为主，在这种情况下，我们可以采用<strong>热点数据多副本</strong>的方法来应对。</p><p>这个方法的具体做法是，我们把热点数据复制多份，在每一个数据副本的key中增加一个随机前缀，让它和其它副本数据不会被映射到同一个Slot中。这样一来，热点数据既有多个副本可以同时服务请求，同时，这些副本数据的key又不一样，会被映射到不同的Slot中。在给这些Slot分配实例时，我们也要注意把它们分配到不同的实例上，那么，热点数据的访问压力就被分散到不同的实例上了。</p><p>这里，有个地方需要注意下，<strong>热点数据多副本方法只能针对只读的热点数据</strong>。如果热点数据是有读有写的话，就不适合采用多副本方法了，因为要保证多副本间的数据一致性，会带来额外的开销。</p><p>对于有读有写的热点数据，我们就要给实例本身增加资源了，例如使用配置更高的机器，来应对大量的访问压力。</p><h2>小结</h2><p>这节课，我向你介绍了数据倾斜的两种情况：数据量倾斜和数据访问倾斜。</p><p>造成数据量倾斜的原因主要有三个：</p><ol>\n<li>数据中有bigkey，导致某个实例的数据量增加；</li>\n<li>Slot手工分配不均，导致某个或某些实例上有大量数据；</li>\n<li>使用了Hash Tag，导致数据集中到某些实例上。</li>\n</ol><p>而数据访问倾斜的主要原因就是有热点数据存在，导致大量访问请求集中到了热点数据所在的实例上。</p><p>为了应对数据倾斜问题，我给你介绍了四个方法，也分别对应了造成数据倾斜的四个原因。我把它们总结在下表中，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/09/6f/092da1ee7425d20b1af4900ec8e9926f.jpg?wh=2926*1350\" alt=\"\"></p><p>当然，如果已经发生了数据倾斜，我们可以通过数据迁移来缓解数据倾斜的影响。Redis Cluster和Codis集群都提供了查看Slot分配和手工迁移Slot的命令，你可以把它们应用起来。</p><p>最后，关于集群的实例资源配置，我再给你一个小建议：在构建切片集群时，尽量使用大小配置相同的实例（例如实例内存配置保持相同），这样可以避免因实例资源不均衡而在不同实例上分配不同数量的Slot。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题，在有数据访问倾斜时，如果热点数据突然过期了，而Redis中的数据是缓存，数据的最终值保存在后端数据库，此时会发生什么问题？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","comments":[{"had_liked":false,"id":261642,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1605456413,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"736044864029","product_id":100056701,"comment_content":"在有数据访问倾斜时，如果热点数据突然过期了，而 Redis 中的数据是缓存，数据的最终值保存在后端数据库，此时会发生什么问题？<br><br>此时会发生缓存击穿，热点请求会直接打到后端数据库上，数据库的压力剧增，可能会压垮数据库。<br><br>Redis 的很多性能问题，例如导致 Redis 阻塞的场景：bigkey、集中过期、大实例 RDB 等等，这些场景都与数据倾斜类似，都是因为数据集中、处理逻辑集中导致的耗时变长。其解决思路也类似，都是把集中变分散，例如 bigkey 拆分为小 key、单个大实例拆分为切片集群等。<br><br>从软件架构演进过程来看，从单机到分布式，再到后来出现的消息队列、负载均衡等技术，也都是为了将请求压力分散开，避免数据集中、请求集中的问题，这样既可以让系统承载更大的请求量，同时还保证了系统的稳定性。","like_count":172,"discussions":[{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573000,"discussion_content":"1. 客户端主动定时上报\n2. 服务层（proxy、网关层）统一监测\n3. 结合1，2就可以做一套分布式的检测热key工具（手动狗头）\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653122555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/30/4a82c7af.jpg","nickname":"fancion","note":"","ucode":"9000895F6BE0E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335612,"discussion_content":"请问一般怎么去判断是否是热点数据？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608253284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/30/4a82c7af.jpg","nickname":"fancion","note":"","ucode":"9000895F6BE0E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335635,"discussion_content":"需要借助工具了，中间件、采样类似这些方式。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608258376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335612,"ip_address":""},"score":335635,"extra":""},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/30/4a82c7af.jpg","nickname":"fancion","note":"","ucode":"9000895F6BE0E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338196,"discussion_content":"中小公司 用成熟产品，中大团队 一般都会自研redis热点key 监控，并辅助应用引入的多级缓存模块，对热点key做 本地缓存的事前 事中 的优化。 也就是可以人工/自动，对本地缓存做干预，直接降低热点数据","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1609211314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335612,"ip_address":""},"score":338196,"extra":""}]},{"author":{"id":2034717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZOjPic948JaOXhbUwZcBqGibPYtu6QA5BuA9qdQHE6xBaGuER5BAfdVGDyeenvhuXAb8069w1fA8p5iblALtmk6hA/132","nickname":"Geek_f5a46e","note":"","ucode":"C6618A64653E5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332493,"discussion_content":"爱你K大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607240703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264397,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1606455916,"is_pvip":true,"discussion_count":15,"race_medal":0,"score":"57441030764","product_id":100056701,"comment_content":"我们把热点数据复制多份，在每一个数据副本的 key 中增加一个随机前缀，让它和其它副本数据不会被映射到同一个 Slot 中。    这样做了以后怎么查呢？key前边加了随机数，客户端也不知道用啥key去查数据了","like_count":14,"discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371442,"discussion_content":"比如8个分片，你的key是abc，0-7分片的key分别对应0abc，1abc，2abc，3abc，... 7abc。在你要查这个abc时，通过产生一个0到7的随机数，与abc拼在一起，请求redis。","likes_number":26,"is_delete":false,"is_hidden":false,"ctime":1619769930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340657,"discussion_content":"我觉得放几个固定的key,查的时候随机查某一个key吧","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1610088914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362247,"discussion_content":"肯定是业务去配合啊，随机的规则肯定要告诉业务端啊，业务端每次访问也用随机的key","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616900501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1239693,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/8d/2e1b6705.jpg","nickname":"小德","note":"","ucode":"F541817F301EE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376426,"discussion_content":"耦合了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622118597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362247,"ip_address":""},"score":376426,"extra":""},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239693,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/8d/2e1b6705.jpg","nickname":"小德","note":"","ucode":"F541817F301EE6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376489,"discussion_content":"那你不会单独封装一层出来吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622163666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376426,"ip_address":""},"score":376489,"extra":""}]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578404,"discussion_content":"你怎么拆Key的就让他怎么查..........","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656700566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1891334,"avatar":"","nickname":"ispark","note":"","ucode":"4676C45E485117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576344,"discussion_content":"这边感觉可以拆成两个问题,一 热点key,二 复制多份.复制的多分的方法有了,就是加前缀,但是这个热点key要怎么去识别呢?根据28定律,热点只有20%,那么如果把所以的key都复制多份就又不合理了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655452031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566752,"discussion_content":"假如热点数据要更新呢  岂不是每个都要做次更新了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650760444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2285358,"avatar":"https://static001.geekbang.org/account/avatar/00/22/df/2e/1e029a15.jpg","nickname":"欢乐马","note":"","ucode":"2E5FEA1DC2D9B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572225,"discussion_content":"读多写少，应该还好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652664541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566752,"ip_address":""},"score":572225,"extra":""}]},{"author":{"id":1508661,"avatar":"https://static001.geekbang.org/account/avatar/00/17/05/35/970beb60.jpg","nickname":"你微笑时好美","note":"","ucode":"BC18A533DC9410","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400267,"discussion_content":"我觉得业务层可以自定义前缀的规则，但是访问的时候我觉得需要遍历的去查询redis，如果查到了就直接返回，没查到就遍历下一个，不然只随机一个，随机到的那个挂了怎么办。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633221095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375394,"discussion_content":"我也有这个疑问，感觉这段描述不够清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621605437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313079,"avatar":"https://static001.geekbang.org/account/avatar/00/14/09/37/5101847e.jpg","nickname":"燕子坞","note":"","ucode":"78763F8BE2550F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338781,"discussion_content":"课程有些观点偏理论，没考虑生产环境异常情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609380942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2574380,"avatar":"","nickname":"Geek_ad1b07","note":"","ucode":"939E55BB50C777","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313079,"avatar":"https://static001.geekbang.org/account/avatar/00/14/09/37/5101847e.jpg","nickname":"燕子坞","note":"","ucode":"78763F8BE2550F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368971,"discussion_content":"你说的异常是什么异常？举例子，里面提到的方案，还是很有可行性的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618892625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338781,"ip_address":""},"score":368971,"extra":""},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313079,"avatar":"https://static001.geekbang.org/account/avatar/00/14/09/37/5101847e.jpg","nickname":"燕子坞","note":"","ucode":"78763F8BE2550F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387194,"discussion_content":"看到你几次了，如果在指出问题时，能够给出方案就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628044475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338781,"ip_address":""},"score":387194,"extra":""},{"author":{"id":1116403,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/f3/35773693.jpg","nickname":"非常非常非常非常的普通中下","note":"","ucode":"4D15549F5055D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313079,"avatar":"https://static001.geekbang.org/account/avatar/00/14/09/37/5101847e.jpg","nickname":"燕子坞","note":"","ucode":"78763F8BE2550F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387741,"discussion_content":"说说你遇到的问题大家讨论一下，共同进步哪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628392420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338781,"ip_address":""},"score":387741,"extra":""}]}]},{"had_liked":false,"id":261647,"user_name":"nxcat","can_delete":false,"product_type":"c1","uid":1436724,"ip_address":"","ucode":"846CAE65652CA1","user_header":"https://static001.geekbang.org/account/avatar/00/15/ec/34/b2efe64f.jpg","comment_is_top":false,"comment_ctime":1605457336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40260163000","product_id":100056701,"comment_content":"终于追上了，期待课代表的留言！课后问题我理解的话，只读模式下会发生缓存击穿，严重的话还可能造成雪崩。","like_count":10},{"had_liked":false,"id":266921,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1607526454,"is_pvip":false,"replies":[{"id":"97908","content":"是的，如果能和其他系统对比起来学习，一般会有更多收获。这是个好方法。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608975366,"ip_address":"","comment_id":266921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27377330230","product_id":100056701,"comment_content":"赞，很多设计思想可以和mysql对比着看，收获颇丰","like_count":7,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511445,"discussion_content":"是的，如果能和其他系统对比起来学习，一般会有更多收获。这是个好方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608975366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278706,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1613217703,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"14498119591","product_id":100056701,"comment_content":"不过业界中解决热key的话一般不采用hotkey+随机数的方式吧。毕竟如果集群实例个数特别多的话，删除hotkey的话成本有点大。<br>查看网上资料说解决热key更多的采用是将热点key加入到二级缓存（如JVM缓存）<br><br>不知道对不对？","like_count":3,"discussions":[{"author":{"id":1056982,"avatar":"https://static001.geekbang.org/account/avatar/00/10/20/d6/b9513db0.jpg","nickname":"kingcall","note":"","ucode":"508884DC684B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360599,"discussion_content":"对的，TMC 可以看看","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616485092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261920,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2136414,"ip_address":"","ucode":"E52BB361B69825","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","comment_is_top":false,"comment_ctime":1605579080,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"14490480968","product_id":100056701,"comment_content":"课后题：将发生缓存击穿，导致数据库压力激增，可能导致数据库奔溃。与之相对的解决方法是不设置热点 Key 的过期时间，并以采用热点数据多副本的方法减少单实例压力。<br><br>疑问：老师您好，热点数据多副本的方法使得每一个数据副本的 key 都有一个随机前缀，那么客户端在读取的时候怎么获取这个随机前缀？又怎么保证带上随机前缀后的热点 Key 会被较为均匀的请求呢？","like_count":3,"discussions":[{"author":{"id":1395853,"avatar":"","nickname":"胖头欧巴","note":"","ucode":"97EF28759A4E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349151,"discussion_content":"我的理解是就随机生成数字作为前缀，然后再把其平均分配到对应的实例，比较随机数字是1-10，在请求前客户端先随机生成一个数字，拼接好后再发送请求","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612935192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":2136414,"avatar":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","nickname":"Lemon","note":"","ucode":"E52BB361B69825","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1395853,"avatar":"","nickname":"胖头欧巴","note":"","ucode":"97EF28759A4E4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349210,"discussion_content":"感谢解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612970066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349151,"ip_address":""},"score":349210,"extra":""},{"author":{"id":2136414,"avatar":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","nickname":"Lemon","note":"","ucode":"E52BB361B69825","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1395853,"avatar":"","nickname":"胖头欧巴","note":"","ucode":"97EF28759A4E4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349211,"discussion_content":"那也就是说，客户端要存储一份当前随机前缀的规则。请问是这样理解吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612970193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349151,"ip_address":""},"score":349211,"extra":""},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2136414,"avatar":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","nickname":"Lemon","note":"","ucode":"E52BB361B69825","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370646,"discussion_content":"不用存储。每次用固定算法生成一个就行。比如 5 个副本，random(5)。或者根据机器的 ip 之类的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619491803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349211,"ip_address":""},"score":370646,"extra":""}]},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573001,"discussion_content":"站在A,B两个客户端上，对每个key加一个goods_id_100_A,goods_id_100_B。这里说的就是相对随机。每个客户端是一组或者是固定的一个串儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653122683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264256,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1606391858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10196326450","product_id":100056701,"comment_content":"缓存击穿","like_count":2},{"had_liked":false,"id":323461,"user_name":"InfoQ_小汤","can_delete":false,"product_type":"c1","uid":1739070,"ip_address":"","ucode":"E4C30DB7A9B54C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","comment_is_top":false,"comment_ctime":1637914475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5932881771","product_id":100056701,"comment_content":"针对流量倾斜问题，对key作切分 理论上其实很简单 但是联合业务实践上挺复杂的，某个key一开始是非热点数据状态的，需要有监控redis key的工具，需要有相关自动切分或者人工干预切分的行为，切分以后业务端查询也需要同步被告知切分的规则，否则业务查询时候无法获取正确的key，切换的过程中新key与旧key需要同时存在一小段时间，否则肯能存在读旧key的请求异常。目前唯一能想到的是通过zookeeper这种配置中心去协调（watch机制），但是大量读会给zookeeper带来比较大的压力。增加二级缓存又会有数据延迟的情况，真的不清楚实际上业务是如何实现这种联动的。","like_count":1},{"had_liked":false,"id":313665,"user_name":"静","can_delete":false,"product_type":"c1","uid":2021305,"ip_address":"","ucode":"5D410AE1CFA791","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6NsibytCpIxC8gnrSKohoRgL0b1BlmUFKsOVtulD8QzuIqkiba353Um4oeHGUoRpDib1RMbM2oRfkPg/132","comment_is_top":false,"comment_ctime":1632585917,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5927553213","product_id":100056701,"comment_content":"感觉后面干货越来越少了,前几篇,一篇一看就是一晚上,后面一晚上看8,9篇,还是我变强了呢?","like_count":2,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532497,"discussion_content":"你变强了。另外，前面部分比较通用，和项目关系更紧密，所以看的更仔细，后面部分更理论化，所以相对也更快些。我也是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637630032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262429,"user_name":"云海","can_delete":false,"product_type":"c1","uid":1365206,"ip_address":"","ucode":"0C6CA0BE58EA21","user_header":"https://static001.geekbang.org/account/avatar/00/14/d4/d6/1d4543ac.jpg","comment_is_top":false,"comment_ctime":1605717170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900684466","product_id":100056701,"comment_content":"热点多副本方案的使用：客户端请求时带上客户端标记即可，不同的客户端请求就会hash分散到不同的热点副本。","like_count":1},{"had_liked":false,"id":342269,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1650165470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650165470","product_id":100056701,"comment_content":"缓存雪崩","like_count":0},{"had_liked":false,"id":334965,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1645208132,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645208132","product_id":100056701,"comment_content":"写热点是不是可以用crdts结构解决？<br>","like_count":0},{"had_liked":false,"id":334963,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1645206902,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645206902","product_id":100056701,"comment_content":"热点读，客户端缓存，或者客户端加热点发现逻辑，缓存热点数据并watch热点key。 ebpf的内核级别缓存","like_count":0},{"had_liked":false,"id":332386,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1202174,"ip_address":"","ucode":"A07ABF45D39089","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/fe/beab006d.jpg","comment_is_top":false,"comment_ctime":1643196069,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643196069","product_id":100056701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":326994,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1639817582,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1639817582","product_id":100056701,"comment_content":"老师，咨询一下。我们有个业务场景，是判断用户是否是白名单用户。打算使用redis的set数据结构，使用sismember命令来判断是否是白名单用户。白名单用户集合是个bigkey。我的问题是，这种场景下文章中说的bigkey解决思路是不是就不适合了","like_count":0},{"had_liked":false,"id":322488,"user_name":"贝氏倭狐猴","can_delete":false,"product_type":"c1","uid":1100690,"ip_address":"","ucode":"0A89A70C48629C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/92/cfc1cfd3.jpg","comment_is_top":false,"comment_ctime":1637416735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637416735","product_id":100056701,"comment_content":"老师你好，请教一个实际发生的问题：<br>我们的环境里面redis cluster多个实例发生了slot重叠的情况，请问应该怎么排查呢？<br>即某个slot在两个redis实例上同时服务","like_count":0},{"had_liked":false,"id":302882,"user_name":"c1rew","can_delete":false,"product_type":"c1","uid":1021813,"ip_address":"","ucode":"4F9FAFD8FCC0A7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/75/d73a7828.jpg","comment_is_top":false,"comment_ctime":1626421648,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626421648","product_id":100056701,"comment_content":"对于热点数据还有一种办法，就是将热点对应的缓存数据直接推送到nginx服务器上去，如果nginx有负载均衡的问题，为了更好命中缓存，可以将热点数据推向所有nginx应用服务器上。此时redis的缓存数据可以设置一个很长的过期时间，nginx服务器上设置一个较短的过期时间。业务上可以再处理一下，如果某段时间热点数据还在，但是nginx上的缓存过期了，业务还可以继续把redis上的缓存数据再推送到nginx上，如此往复。","like_count":0},{"had_liked":false,"id":295915,"user_name":"第四单元","can_delete":false,"product_type":"c1","uid":1747184,"ip_address":"","ucode":"3ED9D553E1DE17","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","comment_is_top":false,"comment_ctime":1622639345,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1622639345","product_id":100056701,"comment_content":"老师您好，怎么保证加了随机前缀就一定会分到不同实例上呢？","like_count":0,"discussions":[{"author":{"id":1891334,"avatar":"","nickname":"ispark","note":"","ucode":"4676C45E485117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576346,"discussion_content":"扩容呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655452297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378184,"discussion_content":"是不是可以使用几个固定的hash tag作为前缀，比如有5个分片，事先找到能映射到5个分片上的hashtag，然后随机前缀就使用这5个hashtag。大家觉得可行不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623080958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412993,"discussion_content":"可行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636354098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378184,"ip_address":""},"score":412993,"extra":""}]}]},{"had_liked":false,"id":293779,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1621553787,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1621553787","product_id":100056701,"comment_content":"在有数据访问倾斜时，如果热点数据突然过期了，而 Redis 中的数据是缓存，数据的最终值保存在后端数据库，此时会发生什么问题？<br><br>会导致缓存击穿。<br><br>解决思路：<br>（1）热点数据调整成访问均匀。可以用多副本的方式。<br>（2）加锁，解决缓存击穿问题。另外需要注意，加锁对性能会带来影响。<br><br>另外怎么处理缓存穿透、雪崩的问题呢？<br><br>缓存穿透解决方案：对空结果进行缓存，用来解决缓存穿透问题。<br><br>缓存雪崩解决方案：设置过期时间，且加上随机值进行过期偏移，用来解决缓存雪崩问题。<br>","like_count":0,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532498,"discussion_content":"补充一下，缓存穿透可以采用布隆过滤器先过滤一把，再走后面的逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637630170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293777,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1621553097,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621553097","product_id":100056701,"comment_content":"在有数据访问倾斜时，如果热点数据突然过期了，而 Redis 中的数据是缓存，数据的最终值保存在后端数据库，此时会发生什么问题？<br><br>会导致缓存击穿。<br><br>解决方案：热点数据调整成访问均匀。可以用多副本的方式。","like_count":0},{"had_liked":false,"id":286679,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617494155,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617494155","product_id":100056701,"comment_content":"我在阿里云上有一个 Redis 的实例，可惜不支持 Cluster。<br><br>```<br>&gt; cluster slots<br>(error) ERR This instance has cluster support disabled<br>```<br><br>之前的专栏里面没怎么讲过 Hash Tag，我觉的这个倒是一个挺有用的小技巧，从文中的例子来看，可以把一个用户的 profile 和 order 映射到一个 Slot 上。<br><br>热点数据多副本，在每一个数据副本的 key 中增加一个随机前缀，这样的话在访问的时候需要客户端做一些工作。<br><br>对于课后题，如果热点数据突然过期了，那么应该会造成缓存击穿，会给后台数据库带啦很大的压力。<br><br>那么如何避免在数据倾斜的情况下，热点数据过期呢？我觉的可以在每次访问的时候，给缓存数据过期时间增加一个随机的时间段。<br><br>看到留言里面说可能会缓存雪崩，我倒是觉得一般不会从击穿到雪崩，不过似乎没有这方面的资料。","like_count":0},{"had_liked":false,"id":277430,"user_name":"Geek_8cf0a3","can_delete":false,"product_type":"c1","uid":2109366,"ip_address":"","ucode":"D1ACDE82193AA2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLn1rhQ7nlmQgyEZhgfgH0s9BicusXhTG7J6Tcxib2oDVoKVTbia9CcNIkicj2L2a2xqQRicF4FhPepjqA/132","comment_is_top":false,"comment_ctime":1612409839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612409839","product_id":100056701,"comment_content":"扩容解千愁","like_count":0},{"had_liked":false,"id":272289,"user_name":"喜欢地球的阿培同学","can_delete":false,"product_type":"c1","uid":1361746,"ip_address":"","ucode":"5F97037585F857","user_header":"https://static001.geekbang.org/account/avatar/00/14/c7/52/c5adf218.jpg","comment_is_top":false,"comment_ctime":1610017351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610017351","product_id":100056701,"comment_content":"<br>关于采用热点数据多副本的方式来应对数据访问倾斜，我感觉有一些瑕疵<br>如果按照博主说的把热点数据复制多份，在每一个数据副本的key增加一个随机前缀，让它和其他副本数据不会被映射到同一个Slot中。<br>这样会导致客户端的不兼容。<br><br>因为增加的数据副本，他们的key都不一样，客户端在进行请求的时候，get&#47;set 的key肯定也不一样。这样会导致需要修改业务代码中调用redis的处理逻辑","like_count":0},{"had_liked":false,"id":265671,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606977077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606977077","product_id":100056701,"comment_content":"会发生缓存击穿。<br>不给热点数据设置过期时间，由单独的线程负责更新热点数据的缓存。","like_count":0},{"had_liked":false,"id":264249,"user_name":"知识大爆炸","can_delete":false,"product_type":"c1","uid":2272571,"ip_address":"","ucode":"4E718FB3468528","user_header":"https://static001.geekbang.org/account/avatar/00/22/ad/3b/70b3ad17.jpg","comment_is_top":false,"comment_ctime":1606390286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606390286","product_id":100056701,"comment_content":"老师求教一下， 如何发现热key呢？有没有好的生产实践可以分享一下， Redis 虽然提供了一些命令用来发现热key，--hotKeys 但是有很大的局限性，比如需要设置 淘汰策略 lru, lfu. ","like_count":0},{"had_liked":false,"id":263224,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1606051080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606051080","product_id":100056701,"comment_content":"缓存击穿","like_count":0},{"had_liked":false,"id":262110,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1605613946,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605613946","product_id":100056701,"comment_content":"请问老师，热点数据多副本方案中，增加了随机前缀后，业务该如何做到访问平均打到各个副本呢","like_count":0,"discussions":[{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379358,"discussion_content":"随机生成前缀，随机访问不同的key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623844148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261735,"user_name":"Geek_9a0c9f","can_delete":false,"product_type":"c1","uid":2159835,"ip_address":"","ucode":"2A6078F740881F","user_header":"","comment_is_top":false,"comment_ctime":1605508558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605508558","product_id":100056701,"comment_content":"缓存击穿，压力打到mysql.可能瞬间打爆mysql","like_count":0},{"had_liked":false,"id":261692,"user_name":"花轮君","can_delete":false,"product_type":"c1","uid":1044639,"ip_address":"","ucode":"A4F27CC1C38D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/9f/6689d26e.jpg","comment_is_top":false,"comment_ctime":1605491268,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605491268","product_id":100056701,"comment_content":"最终的结果是雪崩","like_count":0},{"had_liked":false,"id":261670,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1605487384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605487384","product_id":100056701,"comment_content":"课后题：会发生缓存击穿","like_count":0}]}