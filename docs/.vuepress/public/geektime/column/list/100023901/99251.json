{"id":99251,"title":"43 | 软件事务内存：借鉴数据库的并发经验","content":"<p>很多同学反馈说，工作了挺长时间但是没有机会接触并发编程，实际上我们天天都在写并发程序，只不过并发相关的问题都被类似Tomcat这样的Web服务器以及MySQL这样的数据库解决了。尤其是数据库，在解决并发问题方面，可谓成绩斐然，它的<strong>事务机制非常简单易用</strong>，能甩Java里面的锁、原子类十条街。技术无边界，很显然要借鉴一下。</p><p>其实很多编程语言都有从数据库的事务管理中获得灵感，并且总结出了一个新的并发解决方案：<strong>软件事务内存（Software Transactional Memory，简称STM）</strong>。传统的数据库事务，支持4个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），也就是大家常说的ACID，STM由于不涉及到持久化，所以只支持ACI。</p><p>STM的使用很简单，下面我们以经典的转账操作为例，看看用STM该如何实现。</p><h2>用STM实现转账</h2><p>我们曾经在<a href=\"https://time.geekbang.org/column/article/85001\">《05 | 一不小心就死锁了，怎么办？》</a>这篇文章中，讲到了并发转账的例子，示例代码如下。简单地使用 synchronized 将 transfer() 方法变成同步方法并不能解决并发问题，因为还存在死锁问题。</p><!-- [[[read_end]]] --><pre><code>class UnsafeAccount {\n  //余额\n  private long balance;\n  //构造函数\n  public UnsafeAccount(long balance) {\n    this.balance = balance;\n  }\n  //转账\n  void transfer(UnsafeAccount target, long amt){\n    if (this.balance &gt; amt) {\n      this.balance -= amt;\n      target.balance += amt;\n    }\n  }\n}\n</code></pre><p>该转账操作若使用数据库事务就会非常简单，如下面的示例代码所示。如果所有SQL都正常执行，则通过 commit() 方法提交事务；如果SQL在执行过程中有异常，则通过 rollback() 方法回滚事务。数据库保证在并发情况下不会有死锁，而且还能保证前面我们说的原子性、一致性、隔离性和持久性，也就是ACID。</p><pre><code>Connection conn = null;\ntry{\n  //获取数据库连接\n  conn = DriverManager.getConnection();\n  //设置手动提交事务\n  conn.setAutoCommit(false);\n  //执行转账SQL\n  ......\n  //提交事务\n  conn.commit();\n} catch (Exception e) {\n  //出现异常回滚事务\n  conn.rollback();\n}\n</code></pre><p>那如果用STM又该如何实现呢？Java语言并不支持STM，不过可以借助第三方的类库来支持，<a href=\"https://github.com/pveentjer/Multiverse\">Multiverse</a>就是个不错的选择。下面的示例代码就是借助Multiverse实现了线程安全的转账操作，相比较上面线程不安全的UnsafeAccount，其改动并不大，仅仅是将余额的类型从 long 变成了 TxnLong ，将转账的操作放到了 atomic(()-&gt;{}) 中。</p><pre><code>class Account{\n  //余额\n  private TxnLong balance;\n  //构造函数\n  public Account(long balance){\n    this.balance = StmUtils.newTxnLong(balance);\n  }\n  //转账\n  public void transfer(Account to, int amt){\n    //原子化操作\n    atomic(()-&gt;{\n      if (this.balance.get() &gt; amt) {\n        this.balance.decrement(amt);\n        to.balance.increment(amt);\n      }\n    });\n  }\n}\n</code></pre><p>一个关键的atomic()方法就把并发问题解决了，这个方案看上去比传统的方案的确简单了很多，那它是如何实现的呢？数据库事务发展了几十年了，目前被广泛使用的是<strong>MVCC</strong>（全称是Multi-Version Concurrency Control），也就是多版本并发控制。</p><p>MVCC可以简单地理解为数据库事务在开启的时候，会给数据库打一个快照，以后所有的读写都是基于这个快照的。当提交事务的时候，如果所有读写过的数据在该事务执行期间没有发生过变化，那么就可以提交；如果发生了变化，说明该事务和有其他事务读写的数据冲突了，这个时候是不可以提交的。</p><p>为了记录数据是否发生了变化，可以给每条数据增加一个版本号，这样每次成功修改数据都会增加版本号的值。MVCC的工作原理和我们曾经在<a href=\"https://time.geekbang.org/column/article/89456\">《18 | StampedLock：有没有比读写锁更快的锁？》</a>中提到的乐观锁非常相似。有不少STM的实现方案都是基于MVCC的，例如知名的Clojure STM。</p><p>下面我们就用最简单的代码基于MVCC实现一个简版的STM，这样你会对STM以及MVCC的工作原理有更深入的认识。</p><h2>自己实现STM</h2><p>我们首先要做的，就是让Java中的对象有版本号，在下面的示例代码中，VersionedRef这个类的作用就是将对象value包装成带版本号的对象。按照MVCC理论，数据的每一次修改都对应着一个唯一的版本号，所以不存在仅仅改变value或者version的情况，用不变性模式就可以很好地解决这个问题，所以VersionedRef这个类被我们设计成了不可变的。</p><p>所有对数据的读写操作，一定是在一个事务里面，TxnRef这个类负责完成事务内的读写操作，读写操作委托给了接口Txn，Txn代表的是读写操作所在的当前事务， 内部持有的curRef代表的是系统中的最新值。</p><pre><code>//带版本号的对象引用\npublic final class VersionedRef&lt;T&gt; {\n  final T value;\n  final long version;\n  //构造方法\n  public VersionedRef(T value, long version) {\n    this.value = value;\n    this.version = version;\n  }\n}\n//支持事务的引用\npublic class TxnRef&lt;T&gt; {\n  //当前数据，带版本号\n  volatile VersionedRef curRef;\n  //构造方法\n  public TxnRef(T value) {\n    this.curRef = new VersionedRef(value, 0L);\n  }\n  //获取当前事务中的数据\n  public T getValue(Txn txn) {\n    return txn.get(this);\n  }\n  //在当前事务中设置数据\n  public void setValue(T value, Txn txn) {\n    txn.set(this, value);\n  }\n}\n</code></pre><p>STMTxn是Txn最关键的一个实现类，事务内对于数据的读写，都是通过它来完成的。STMTxn内部有两个Map：inTxnMap，用于保存当前事务中所有读写的数据的快照；writeMap，用于保存当前事务需要写入的数据。每个事务都有一个唯一的事务ID txnId，这个txnId是全局递增的。</p><p>STMTxn有三个核心方法，分别是读数据的get()方法、写数据的set()方法和提交事务的commit()方法。其中，get()方法将要读取数据作为快照放入inTxnMap，同时保证每次读取的数据都是一个版本。set()方法会将要写入的数据放入writeMap，但如果写入的数据没被读取过，也会将其放入 inTxnMap。</p><p>至于commit()方法，我们为了简化实现，使用了互斥锁，所以事务的提交是串行的。commit()方法的实现很简单，首先检查inTxnMap中的数据是否发生过变化，如果没有发生变化，那么就将writeMap中的数据写入（这里的写入其实就是TxnRef内部持有的curRef）；如果发生过变化，那么就不能将writeMap中的数据写入了。</p><pre><code>//事务接口\npublic interface Txn {\n  &lt;T&gt; T get(TxnRef&lt;T&gt; ref);\n  &lt;T&gt; void set(TxnRef&lt;T&gt; ref, T value);\n}\n//STM事务实现类\npublic final class STMTxn implements Txn {\n  //事务ID生成器\n  private static AtomicLong txnSeq = new AtomicLong(0);\n  \n  //当前事务所有的相关数据\n  private Map&lt;TxnRef, VersionedRef&gt; inTxnMap = new HashMap&lt;&gt;();\n  //当前事务所有需要修改的数据\n  private Map&lt;TxnRef, Object&gt; writeMap = new HashMap&lt;&gt;();\n  //当前事务ID\n  private long txnId;\n  //构造函数，自动生成当前事务ID\n  STMTxn() {\n    txnId = txnSeq.incrementAndGet();\n  }\n\n  //获取当前事务中的数据\n  @Override\n  public &lt;T&gt; T get(TxnRef&lt;T&gt; ref) {\n    //将需要读取的数据，加入inTxnMap\n    if (!inTxnMap.containsKey(ref)) {\n      inTxnMap.put(ref, ref.curRef);\n    }\n    return (T) inTxnMap.get(ref).value;\n  }\n  //在当前事务中修改数据\n  @Override\n  public &lt;T&gt; void set(TxnRef&lt;T&gt; ref, T value) {\n    //将需要修改的数据，加入inTxnMap\n    if (!inTxnMap.containsKey(ref)) {\n      inTxnMap.put(ref, ref.curRef);\n    }\n    writeMap.put(ref, value);\n  }\n  //提交事务\n  boolean commit() {\n    synchronized (STM.commitLock) {\n    //是否校验通过\n    boolean isValid = true;\n    //校验所有读过的数据是否发生过变化\n    for(Map.Entry&lt;TxnRef, VersionedRef&gt; entry : inTxnMap.entrySet()){\n      VersionedRef curRef = entry.getKey().curRef;\n      VersionedRef readRef = entry.getValue();\n      //通过版本号来验证数据是否发生过变化\n      if (curRef.version != readRef.version) {\n        isValid = false;\n        break;\n      }\n    }\n    //如果校验通过，则所有更改生效\n    if (isValid) {\n      writeMap.forEach((k, v) -&gt; {\n        k.curRef = new VersionedRef(v, txnId);\n      });\n    }\n    return isValid;\n  }\n}\n</code></pre><p>下面我们来模拟实现Multiverse中的原子化操作atomic()。atomic()方法中使用了类似于CAS的操作，如果事务提交失败，那么就重新创建一个新的事务，重新执行。</p><pre><code>@FunctionalInterface\npublic interface TxnRunnable {\n  void run(Txn txn);\n}\n//STM\npublic final class STM {\n  //私有化构造方法\n  private STM() {\n  //提交数据需要用到的全局锁  \n  static final Object commitLock = new Object();\n  //原子化提交方法\n  public static void atomic(TxnRunnable action) {\n    boolean committed = false;\n    //如果没有提交成功，则一直重试\n    while (!committed) {\n      //创建新的事务\n      STMTxn txn = new STMTxn();\n      //执行业务逻辑\n      action.run(txn);\n      //提交事务\n      committed = txn.commit();\n    }\n  }\n}}\n</code></pre><p>就这样，我们自己实现了STM，并完成了线程安全的转账操作，使用方法和Multiverse差不多，这里就不赘述了，具体代码如下面所示。</p><pre><code>class Account {\n  //余额\n  private TxnRef&lt;Integer&gt; balance;\n  //构造方法\n  public Account(int balance) {\n    this.balance = new TxnRef&lt;Integer&gt;(balance);\n  }\n  //转账操作\n  public void transfer(Account target, int amt){\n    STM.atomic((txn)-&gt;{\n      Integer from = balance.getValue(txn);\n      balance.setValue(from-amt, txn);\n      Integer to = target.balance.getValue(txn);\n      target.balance.setValue(to+amt, txn);\n    });\n  }\n}\n</code></pre><h2>总结</h2><p>STM借鉴的是数据库的经验，数据库虽然复杂，但仅仅存储数据，而编程语言除了有共享变量之外，还会执行各种I/O操作，很显然I/O操作是很难支持回滚的。所以，STM也不是万能的。目前支持STM的编程语言主要是函数式语言，函数式语言里的数据天生具备不可变性，利用这种不可变性实现STM相对来说更简单。</p><p>另外，需要说明的是，文中的“自己实现STM”部分我参考了<a href=\"http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala\">Software Transactional Memory in Scala</a>这篇博文以及<a href=\"https://github.com/epam-mooc/stm-java\">一个GitHub项目</a>，目前还很粗糙，并不是一个完备的MVCC。如果你对这方面感兴趣，可以参考<a href=\"http://www.codecommit.com/blog/scala/improving-the-stm-multi-version-concurrency-control\">Improving the STM: Multi-Version Concurrency Control</a> 这篇博文，里面讲到了如何优化，你可以尝试学习下。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":106484,"user_name":"M$画像","can_delete":false,"product_type":"c1","uid":1027781,"ip_address":"","ucode":"B7298F0CC7ADC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/c5/09c2dd48.jpg","comment_is_top":false,"comment_ctime":1561334431,"is_pvip":true,"replies":[{"id":"38532","content":"感谢捧场😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1561347184,"ip_address":"","comment_id":106484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96050614943","product_id":100023901,"comment_content":"希望王老师再出新品，一定支持。","like_count":22,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455109,"discussion_content":"感谢捧场😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561347184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131455,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1567757377,"is_pvip":false,"replies":[{"id":"49885","content":"👍期待你的成果！","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1567775232,"ip_address":"","comment_id":131455,"utype":1}],"discussion_count":9,"race_medal":0,"score":"87467103297","product_id":100023901,"comment_content":"谢谢老师推荐STM，我所在的游戏项目一直有对象异步入库的需求，为了使用异步入库，放弃了Spring针对数据库的事务。为此不得不编写大量代码去判断某个操作是否可以执行，希望软件事务内存可以为我的需求提供一个新的解决方案。最近几天开始研究相关源码了，希望可以较好的结合现有项目，有可以发布的成果一定在留言区为大家共享。","like_count":20,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466463,"discussion_content":"👍期待你的成果！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567775232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1437425,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ee/f1/16545faf.jpg","nickname":"学习","note":"","ucode":"CDFB71E0D1508B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392653,"discussion_content":"这么久了，有成果了吗","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631088004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591316,"discussion_content":"没想到这么多人留言。之前调研结果是不值得在程序里面写一个事务。首先是事务要不要使用是第一个问题，事务的成本和复杂性很高，在游戏业务上实现成本远少于收益。比较好的做法是先识别要不要用事务，其次是能否复用存储软件自带的事务，最后才是考虑软件事务内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666493686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477754,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8c/7a/5ee20222.jpg","nickname":"小晨","note":"","ucode":"C95BC5211A5741","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588588,"discussion_content":"有结果了吗，xd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663887766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2879313,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ef/51/791d0f5e.jpg","nickname":"大哥","note":"","ucode":"720020E5259EB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581636,"discussion_content":"有结果了吗，xd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658901285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111057,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/11/464c75aa.jpg","nickname":"dtsola","note":"","ucode":"A4353EE0F9EB92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580367,"discussion_content":"有结果了吗，xd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658128190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226367,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f8/bf/59f2e600.jpg","nickname":"月明风清","note":"","ucode":"65A97CF2E320FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575788,"discussion_content":"有结果了吗，xd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655107910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441569,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ff/21/8815d2e5.jpg","nickname":"亮子","note":"","ucode":"DF37D5E0714D02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549962,"discussion_content":"有结果了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644312186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1653218,"avatar":"https://static001.geekbang.org/account/avatar/00/19/39/e2/633f8b70.jpg","nickname":"恒星","note":"","ucode":"F6902B0291FCFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544265,"discussion_content":"有结果了吗，xd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641453201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101299,"user_name":"我的腿腿","can_delete":false,"product_type":"c1","uid":1239277,"ip_address":"","ucode":"2AAA36A7C3AD75","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_is_top":false,"comment_ctime":1559780001,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"48804420257","product_id":100023901,"comment_content":"我公司用的就是这个解决并发问题的，才知道是这种技术","like_count":11,"discussions":[{"author":{"id":2055809,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","nickname":"码小呆","note":"","ucode":"44532D6ABF9340","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578745,"discussion_content":"请纤细说明一下，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656992636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512642,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","nickname":"侧耳倾听","note":"","ucode":"5BF2A2440B54F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244535,"discussion_content":"请继续你的表演","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587609119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45915,"discussion_content":"请问是什么厂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573099042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360712,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","nickname":"天草二十六","note":"","ucode":"3165EE3007527B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37588,"discussion_content":"请问解决了什么业务问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571641899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232987,"user_name":"小太阳","can_delete":false,"product_type":"c1","uid":1477324,"ip_address":"","ucode":"3B1C90425E485D","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/cc/da9adc82.jpg","comment_is_top":false,"comment_ctime":1594182872,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40248888536","product_id":100023901,"comment_content":"看了三遍，终于看懂了，很妙。原来精华就在这一段：MVCC 可以简单地理解为数据库事务在开启的时候，会给数据库打一个快照，以后所有的读写都是基于这个快照的。当提交事务的时候，如果所有读写过的数据在该事务执行期间没有发生过变化，那么就可以提交；如果发生了变化，说明该事务和有其他事务读写的数据冲突了，这个时候是不可以提交的。Txn负责维护检测快照，TxnRef负责包装数据使之可以接入Txn，作为快照的key。VersionedRef负责包装数据使之有版本。   另外，最后的代码里忘了判断余额是否够用了。😁","like_count":9,"discussions":[{"author":{"id":1226493,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b6/fd/a0f60753.jpg","nickname":"牛牛肥","note":"","ucode":"4F455A76F22BB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392734,"discussion_content":"总结得很到位，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631106431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141650,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1571206928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27341010704","product_id":100023901,"comment_content":"STM的优化有一点是针对大快照的优化吧，因为MySQL对数据库的快照并不是真正存储一份备份数据，类似例子中的map，而是利用version和undolog计算得到的，不然一个100G大小的数据库，每开启一个事物就拷贝一份数据，肯定是不现实的。","like_count":6},{"had_liked":false,"id":135614,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1569229020,"is_pvip":false,"replies":[{"id":"53722","content":"不是这样的，不同的STMTxn持有的TxnRef是共享的，TxnRef内部有版本号，主要依赖这个版本号来检测冲突","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570624316,"ip_address":"","comment_id":135614,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27339032796","product_id":100023901,"comment_content":"按照老师自己实现的STM程序，根本不存在commit提交失败的时候吧？因为每一次的commit都是新创建一个STMTxn，新创建STMTxn后，inTxnMap和writeMap都是新的。不知道我考虑的对不对？？","like_count":6,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468272,"discussion_content":"不是这样的，不同的STMTxn持有的TxnRef是共享的，TxnRef内部有版本号，主要依赖这个版本号来检测冲突","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570624316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226367,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f8/bf/59f2e600.jpg","nickname":"月明风清","note":"","ucode":"65A97CF2E320FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575792,"discussion_content":"不同的STMTxn持有的TxnRef是共享的 文中并没有说明，文章中也没有修改版本号相关的代码示例呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655108498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226367,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f8/bf/59f2e600.jpg","nickname":"月明风清","note":"","ucode":"65A97CF2E320FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575790,"discussion_content":"文中没有指明：不同的STMTxn持有的TxnRef是共享的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655108115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218347,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","nickname":"Geek_37984c","note":"","ucode":"7A319AE28599B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272475,"discussion_content":"当前资源的事务，可以多以个版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590315184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125582,"user_name":"添","can_delete":false,"product_type":"c1","uid":1189851,"ip_address":"","ucode":"7D337CB305F524","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/db/c8b35c07.jpg","comment_is_top":false,"comment_ctime":1566206455,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"23041042935","product_id":100023901,"comment_content":"照着实现了一遍，确实可以巧妙。<br>我觉得类STMTxn的get函数可以改进一下：现在get返回的值，只是最初始的值，如果当前事务更改了值，然后再调用get，最好可以返回最新的值；即当前事务的更改，对自己是可见的。<br>```<br>    @Override<br>    public &lt;T&gt; T get(TxnRef&lt;T&gt; ref) {<br>        if (!inTxnMap.containsKey(ref)) {<br>            inTxnMap.put(ref, ref.curRef);<br>        }<br><br>        if (writeMap.containsKey(ref)) {<br>            return (T) writeMap.get(ref);<br>        }<br>        else {<br>            return (T) inTxnMap.get(ref).value;<br>        }<br>    }<br>```","like_count":5,"discussions":[{"author":{"id":1302507,"avatar":"https://static001.geekbang.org/account/avatar/00/13/df/eb/78cfab8a.jpg","nickname":"拎壶冲","note":"","ucode":"C83EBBCFD9CECF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576675,"discussion_content":"确实有这个问题，事物内的修改对自己不可见了。如果事务内有多次修改，快照里也只有第一次读写的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655732350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477324,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/cc/da9adc82.jpg","nickname":"小太阳","note":"","ucode":"3B1C90425E485D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289697,"discussion_content":"而且get方法应该主要算是对快照的读取，应该获取的是稳定的值，也就是上一次事务提交后的值。个人理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594183941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477324,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/cc/da9adc82.jpg","nickname":"小太阳","note":"","ucode":"3B1C90425E485D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289693,"discussion_content":"事物对象txn是不会复用的，即提交成功或失败都会再new一个txn，重新获取快照。所以不存在拿到自己修改后的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594183491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241046,"user_name":"青菜","can_delete":false,"product_type":"c1","uid":1391891,"ip_address":"","ucode":"C58A16B027467A","user_header":"https://static001.geekbang.org/account/avatar/00/15/3d/13/275f9698.jpg","comment_is_top":false,"comment_ctime":1597158569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892125865","product_id":100023901,"comment_content":"老师，理解在提交时版本号都是一样的，都是0，即使修改了也没去修改版本号啊，所以不管怎样都能提交","like_count":1},{"had_liked":false,"id":101416,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1559803842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854771138","product_id":100023901,"comment_content":"哔，打卡，涨知识了","like_count":1},{"had_liked":false,"id":101352,"user_name":"黄海峰","can_delete":false,"product_type":"c1","uid":1275357,"ip_address":"","ucode":"E9340719BC96B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dd/9ead6e69.jpg","comment_is_top":false,"comment_ctime":1559786603,"is_pvip":false,"replies":[{"id":"36784","content":"只创建新的版本，永远不会去修改","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560128628,"ip_address":"","comment_id":101352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854753899","product_id":100023901,"comment_content":"代码里硬是没看到哪里修改了version。。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452924,"discussion_content":"只创建新的版本，永远不会去修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560128628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358164,"user_name":"Geek_aa23b7","can_delete":false,"product_type":"c1","uid":2461872,"ip_address":"浙江","ucode":"DD89F30A04D5CC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL23Wicb0gO9RIXrRzpettuEYaSHLicA2LgRz3X7Npiagf1R4aB9bmePt1TY006z63ngKzhEONZvOsfw/132","comment_is_top":false,"comment_ctime":1663989114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663989114","product_id":100023901,"comment_content":"感觉这个原理和cas有点像，都是先尝试更新，然后真正更新的时候根据版本号判断是否被其他线程变更过，没有发生变更过，则更新成功。核心要点就在于正真更新的时候要加锁或者原子操作","like_count":0},{"had_liked":false,"id":341955,"user_name":"Geek_d1026b","can_delete":false,"product_type":"c1","uid":2602705,"ip_address":"","ucode":"EC5A17A4CB24C8","user_header":"","comment_is_top":false,"comment_ctime":1649930371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649930371","product_id":100023901,"comment_content":"老师 完整的代码在哪里可以下载","like_count":0},{"had_liked":false,"id":333111,"user_name":"Geek_039a5c","can_delete":false,"product_type":"c1","uid":1651848,"ip_address":"","ucode":"08F4FA864D4B65","user_header":"","comment_is_top":false,"comment_ctime":1644075670,"is_pvip":true,"replies":[{"id":"121724","content":"收到，谢谢反馈，我和老师确认下","user_name":"编辑回复","user_name_real":"编辑","uid":"1059377","ctime":1644103693,"ip_address":"","comment_id":333111,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1644075670","product_id":100023901,"comment_content":"代码还有有点小问题。 STM  这个类的代码 花括号写的不对。 ","like_count":0,"discussions":[{"author":{"id":1059377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2a/31/9edbf8a6.jpg","nickname":"贾静","note":"","ucode":"081E70CC01F6B8","race_medal":0,"user_type":8,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549575,"discussion_content":"收到，谢谢反馈，我和老师确认下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644103693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329994,"user_name":"小黄鸭","can_delete":false,"product_type":"c1","uid":2708370,"ip_address":"","ucode":"2800E3A723AEBD","user_header":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","comment_is_top":false,"comment_ctime":1641716946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641716946","product_id":100023901,"comment_content":"我终于终于看懂了，老师太厉害了！！","like_count":0},{"had_liked":false,"id":317575,"user_name":"Tomy","can_delete":false,"product_type":"c1","uid":1192601,"ip_address":"","ucode":"D7E49E90B0D60F","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/99/91b58bf7.jpg","comment_is_top":false,"comment_ctime":1634864563,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1634864563","product_id":100023901,"comment_content":"用@Trasaction不可以吗，我们的项目都是用这个的","like_count":0,"discussions":[{"author":{"id":1758825,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d6/69/f59d4f6f.jpg","nickname":"Ryan","note":"","ucode":"387955FD53E98C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553536,"discussion_content":"Spring的@Transaction处理的是数据库的事务，而STM是内存事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645955877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306440,"user_name":"dominiczhu","can_delete":false,"product_type":"c1","uid":2070984,"ip_address":"","ucode":"9C87F77CCE06C8","user_header":"","comment_is_top":false,"comment_ctime":1628563059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628563059","product_id":100023901,"comment_content":"老师您好，我想请问一下，看了之前的转账实现与这个txn转账实现，是不是也会存在着之前提到的问题，例如全部线程都共享了同一把锁，高并发可能扛不住；while()循环也可能导致高cpu消耗之类的。","like_count":0},{"had_liked":false,"id":272213,"user_name":"我得儿意的笑","can_delete":false,"product_type":"c1","uid":1116344,"ip_address":"","ucode":"752E66C6AA96E2","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/b8/ac8a778e.jpg","comment_is_top":false,"comment_ctime":1609991398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609991398","product_id":100023901,"comment_content":"<br>&#47;&#47;构造函数，自动生成当前事务ID  STMTxn() {    txnId = txnSeq.incrementAndGet();  }<br>    StmTxn() {<br>        this.txnId = StmTxn.txnSeq.incrementAndGet();<br>    }","like_count":0},{"had_liked":false,"id":232516,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1594026003,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594026003","product_id":100023901,"comment_content":"有没有和我一样懵逼的,版本号怎么看,所有的的版本号都是0啊,是我眼花了吗","like_count":0,"discussions":[{"author":{"id":1440912,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fc/90/c9df0459.jpg","nickname":"ack","note":"","ucode":"69CA1233EEA8E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307061,"discussion_content":"在commit()中 ： if (isValid) {\n                writeMap.forEach((k, v) -> {\n                    k.curRef = new VersionedRef(v, txnId);//此处提交了curRef 中版本号就会改变，那对应map里面存储的引用就能看到版本变了\n                });\n            }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600484598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225866,"user_name":"石头汤","can_delete":false,"product_type":"c1","uid":1022282,"ip_address":"","ucode":"45E4578E54F585","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/4a/bdf26d5c.jpg","comment_is_top":false,"comment_ctime":1591877500,"is_pvip":false,"replies":[{"id":"83304","content":"如果有冲突，写操作不会执行，所以不会产生脏数据","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1591971693,"ip_address":"","comment_id":225866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591877500","product_id":100023901,"comment_content":"是不是 STM.atomic 的 TxnRunnable 的实现必须是幂等的，否则 while 循环那里会产生脏数据？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498022,"discussion_content":"如果有冲突，写操作不会执行，所以不会产生脏数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591971693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171500,"user_name":"纷繁的烟火","can_delete":false,"product_type":"c1","uid":1449747,"ip_address":"","ucode":"3B402956C44B29","user_header":"https://static001.geekbang.org/account/avatar/00/16/1f/13/4647402a.jpg","comment_is_top":false,"comment_ctime":1578933205,"is_pvip":false,"replies":[{"id":"66607","content":"atomic方法内传入的，lambda表达式可以找专门的资料看看","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1579013672,"ip_address":"","comment_id":171500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578933205","product_id":100023901,"comment_content":"最后段代码的 构造参数里的txn在哪呀 找也找不到","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481382,"discussion_content":"atomic方法内传入的，lambda表达式可以找专门的资料看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579013672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111909,"user_name":"悟空","can_delete":false,"product_type":"c1","uid":1451125,"ip_address":"","ucode":"F9DFBA74B35B40","user_header":"https://static001.geekbang.org/account/avatar/00/16/24/75/808ac160.jpg","comment_is_top":false,"comment_ctime":1562636099,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562636099","product_id":100023901,"comment_content":"老师，private Map&lt;TxnRef, VersionedRef&gt; inTxnMap = new HashMap&lt;&gt;(); 这个是不是应该是静态的。在多个事物中共享，这样一个事物变更了，其他事物才能知晓","like_count":0,"discussions":[{"author":{"id":1113823,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/df/f1ce77a8.jpg","nickname":"星星个是大太阳丶","note":"","ucode":"D12A2F94417100","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4526,"discussion_content":"共享的不是map，共享的是TxnRef，就是例子中的余额，Txn里面只是把某个时刻的version存在map里面了，如果数据被修改了，TxnRef对应的version是会重新生成的，代码中还加了volatile来实现可见性，只要TxnRef被任何一个线程修改额version，commit就不会失败了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565520340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104146,"user_name":"Rancood","can_delete":false,"product_type":"c1","uid":1204333,"ip_address":"","ucode":"052BDF2221F480","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/6d/e2576fda.jpg","comment_is_top":false,"comment_ctime":1560666615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560666615","product_id":100023901,"comment_content":"感觉没有前面容易理解了","like_count":0},{"had_liked":false,"id":101361,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1559788831,"is_pvip":false,"replies":[{"id":"43627","content":"当然有死锁，但是数据库的目标是努力消除他们，有些是数据库的bug，有些是我们没有用好","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1564486897,"ip_address":"","comment_id":101361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559788831","product_id":100023901,"comment_content":"老师，关系数据库也是有死锁的，只是他们往往实现了死锁检测机制，死锁到一定时间就会强制解锁","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452928,"discussion_content":"当然有死锁，但是数据库的目标是努力消除他们，有些是数据库的bug，有些是我们没有用好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564486897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101315,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1559781252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559781252","product_id":100023901,"comment_content":"打卡！这篇高质量！","like_count":0},{"had_liked":false,"id":101290,"user_name":"爱吃回锅肉的瘦子","can_delete":false,"product_type":"c1","uid":1233867,"ip_address":"","ucode":"24DBDDC62B2276","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/cb/f8157ad8.jpg","comment_is_top":false,"comment_ctime":1559778986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559778986","product_id":100023901,"comment_content":"涨见识了，谢谢老师。","like_count":0}]}