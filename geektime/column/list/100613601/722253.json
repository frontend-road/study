{"id":722253,"title":"29｜编程范式：云原生时代函数式编程为何能占据主流？","content":"<p>你好，我是康杨。</p><p>在当今云计算、大数据和微服务架构的背景下，编程范式已经成为了程序员们关注的焦点。其中，函数式编程以其简洁、高效、可维护性强的特点，逐渐成为了开发者的首选。今天我们一起聊聊编程范式的起源、发展，以及命令式编程和函数式编程的区别，并以Java语言为例，通过详细的案例和代码，说明函数式编程在云原生时代的重要性。</p><h2>编程范式的起源与发展</h2><p>编程范式，你可以将它理解为一种编程理念，或者一种写代码的方式。它不仅告诉我们如何书写代码，也规定了我们应该如何组织代码。你可能会想：“为什么我们需要它呢？”其实，有了编程范式，我们就可以更好地理解和抽象我们的代码。它像是一个指南，让我们知道如何在各种情况下进行操作，让代码变得更能清晰地阅读，更便于维护。</p><p>现在，让我们一起回到过去，探究一下编程范式的起源。这可以追溯到上个世纪50年代。当时人们开始研究如何用计算机解决实际问题。而过程式编程（Procedural Programming）也就应运而生了，这可以说是最早的编程范式。过程式编程真的就像它的名字一样，是基于程序执行的顺序或流程编写的。它就好像一份详细的烹饪步骤，一步接一步，非常直观易懂。</p><p>然后，我们来到上世纪70年代，面向对象编程（Object-Oriented Programming）的概念被提出。与过程式编程相比，这种新的编程范式是基于对象的。什么是对象呢？你可以把它想象成现实生活中的物体，它有自己的属性，例如颜色、形状等，同时也具有自己的行为，例如移动、旋转等。面向对象编程重点关注对象的封装（将属性和行为打包在一起）、继承（子对象可以继承父对象的属性和行为）以及多态（一个对象可以展现出多种行为）。</p><!-- [[[read_end]]] --><p>紧接着，我们进入了90年代，<strong>函数式编程</strong>（Functional Programming）开始受到关注。这种编程范式是基于函数的，它看重的是<strong>数据的传递和处理</strong>，不那么在乎执行的顺序。函数式编程就像是一个精密的工厂流水线，每个函数都是一个工作站，负责将输入的数据加工输出，然后传送给下一个函数进行进一步处理。</p><p>现在，我们所处的时代已经开始探索并使用混合编程范式，比如面向服务的编程，反应式编程等等。编程范式的发展就像电脑科技的发展一样，从简单到复杂，从单一到多元。我们能预见的是，未来可能会有更多新的编程范式出现，以更好地满足我们不断发展和变化的需求。</p><h2>命令式编程 VS 函数式编程</h2><p>让我们先来谈一谈命令式编程。这个概念听起来有点像是给计算机发出命令，说得没错，这就是这种编程风格的精髓。命令式编程就是你告诉计算机需要做什么，也就是<strong>描述出程序执行的步骤</strong>。这好比是指挥员，决定每一步的发生并具体执行。</p><p>想象一下，你正在编写一个程序来控制一台计算机做饭。在命令式编程中，你需要详细地规定每个步骤，例如取一个锅，加入一些油，然后加热；当油温达标时，加入切好的蔬菜，翻煎；最后，加盐调味。我们通过一系列命令，描述了做饭的整个过程。这种方法非常直观，很符合我们的思维。但是，如果我们要编写一个非常大、非常复杂的程序，那么使用命令式编程可能会导致代码非常长，非常复杂，而且可能难以维护。</p><p>那么，我们又该如何解决这个问题呢？这就引出了我们的另一个主题——函数式编程。函数式编程和命令式编程是完全不同的编程范式。在函数式编程中，我们并不会告诉计算机具体的执行步骤，而是告诉计算机需要做的事情。听起来有点抽象，让我们通过一个比喻来理解。</p><p>与其告诉机器人每个具体的步骤，不如我们只告诉机器人：“做一道蔬菜翻煎。”然后，机器人自己就会知道如何操作，这就是函数式编程。我们将复杂的任务抽象化，形成一个个函数，每个函数都只是简单的、纯粹的计算过程。</p><p>函数式编程的主要优点是它可以让代码更加简洁，这是因为我们没有繁琐的过程描述。同时，函数式编程还可以避免命令式编程中的状态变化和可变数据，这样就能降低出错的可能性，提高代码的可维护性。</p><p>在命令式编程和函数式编程之间，没有哪一个编程范式是绝对的“最好”。它们只是提供了不同的视角和工具来处理问题。对于某些场景，比如需要详细描述过程的任务，命令式编程可能会更加适合。但是，如果我们需要处理大量的、复杂的数据流，那么函数式编程可能会更有优势。最后，理解并选择适当的编程范式是每个程序员都需要做的。</p><h2>Java中的函数式编程</h2><p>那我们以一个常见且具有实际意义的场景来讲解：假设有一个用户列表，我们想要找出年龄大于18岁的用户，并计算他们的平均年龄。</p><p>首先，我们定义一个用户类User，包含两个属性：name和age。</p><pre><code class=\"language-java\">public class User {\nString name;\nint age;\n//构造方法和getter、setter省略\n}\n</code></pre><p>然后，我们创建一个User的列表。</p><pre><code class=\"language-java\">List&lt;User&gt; users = Arrays.asList(\nnew User(\"张三\", 20),\nnew User(\"李四\", 15),\nnew User(\"王五\", 25),\nnew User(\"赵六\", 30)\n);\n</code></pre><p>现在，我们就可以使用Java 8的流式API来处理这个用户列表了。首先，我们需要将List转换为Stream。</p><pre><code class=\"language-java\">users.stream()\n</code></pre><p>然后，我们过滤出所有年龄大于18的用户。</p><pre><code class=\"language-java\">users.stream().filter(user -&gt; user.getAge() &gt; 18)\n</code></pre><p>我们使用的Lambda表达式user -&gt; user.getAge() &gt; 18就是一个谓词。这个谓词的意思就是：对于列表中的每一个用户，如果他的年龄大于18，那么筛选结果就是true，否则结果就是false。然后，我们利用流式处理，将筛选后的数据流传至下一步。</p><p>接着，我们将筛选后的数据流中的每一个元素（用户）映射为他们的年龄。</p><pre><code class=\"language-java\">users.stream()\n.filter(user -&gt; user.getAge() &gt; 18)\n.mapToInt(user -&gt; user.getAge())\n</code></pre><p>最后，我们再使用average方法计算所有元素的平均值。</p><pre><code class=\"language-java\">users.stream()\n.filter(user -&gt; user.getAge() &gt; 18)\n.mapToInt(user -&gt; user.getAge())\n.average()\n</code></pre><p>其结果会返回一个OptionalDouble对象，为避免空指针异常，可以使用orElse方法返回默认值0。</p><pre><code class=\"language-java\">double averageAge = users.stream()\n.filter(user -&gt; user.getAge() &gt; 18)\n.mapToInt(User::getAge)\n.average()\n.orElse(0);\n</code></pre><p>最后，我们打印出结果。</p><pre><code class=\"language-java\">System.out.println(\"年龄大于18岁的用户的平均年龄为：\" + averageAge);\n</code></pre><p>这样，我们就用Java 8的函数式编程写出了一段易读且简洁的代码，完成了这个任务，即便是这份代码的阅读者，也能轻松理解其逻辑：过滤出年龄大于18的用户，映射成他们各自的年龄，然后计算其平均值。</p><h2>云原生时代与函数式编程</h2><p>在云计算技术越来越成熟的今天，云原生应用已经逐渐变成了趋势。为了适应这种变化，程序员们不仅需要考虑如何利用云资源构建应用，还需要针对高并发、分布式、微服务等复杂场景进行编码。这时，传统的命令式编程方式可能就无法满足开发需求了。因此，函数式编程在云原生时代变得越来越重要。</p><p>那么，什么是云原生应用呢？简单来说，云原生应用就是为了利用云计算的优势而设计和构建的应用。这包括微服务架构、容器化、自动化运维、持续集成/持续部署，以及在程序设计上追求无状态、事件驱动、可伸缩等特点。在这种模式下，应用程序需要面对的是动态的、复杂的云环境，并且需要适应云上的运行和管理模式。</p><p>函数式编程是对这个挑战的尝试和回应，它将计算过程当成数据流的变换，专注于数据应该如何变化，而不是计算的顺序和状态。和命令式编程相比，函数式编程有许多独特的优势。</p><p>首先，<strong>函数式编程避免了状态变化和可变数据，使程序更加稳定和可靠</strong>。在云环境下，应用需要处理大规模数据和并发请求，任何状态的副作用都可能导致复杂的问题出现。函数式编程正好可以避免这一点，保持数据的纯粹和稳定。</p><p>其次，<strong>函数式编程让代码更简洁、更清晰，提高了可维护性</strong>。函数式编程鼓励使用函数并重用代码，这使得代码看起来更简洁、更连贯。在云环境下，微服务和分布式应用都需要高效合理的代码组织和维护。</p><p>最后，<strong>由于函数是无状态的，函数式编程天然地支持并发处理</strong>。在函数式编程中，无论你何时何地调用一个函数，只要参数相同，返回的结果就会相同。这意味着函数可以在任何时间、任何地点被任何线程调用，不需要担心如何同步或者管理状态，这就大大提高了并发性能。</p><p>依赖轻量、简单、无状态和事件驱动的编程范式，如函数式编程，搭配云原生应用的设计理念，流畅地处理大数据量和并发请求，提供高性能和易伸缩的云服务，正是未来软件开发的趋势。</p><h2>重点回顾</h2><p>云计算、大数据和微服务架构的兴起使编程范式成为了一种重要的程序设计哲学，并且函数式编程因其高效、简洁和好维护性，日益成为开发者的首选。从过程式编程、面向对象编程，到函数式编程，再到如今的混合编程范式，编程范式的发展正如电脑科技一样，不断进步，从简单到复杂，从单一到多元。为了适应云原生时代的挑战，我们需要寻找更符合需求的编程模式，而函数式编程毫无疑问是其中的一员。</p><p>函数式编程和命令式编程的主要区别在于，前者专注于“what”，后者侧重于“how”。通过函数式编程，我们能够以一种简单、清晰的方式描述出问题解决方案，降低了代码复杂度，提高了代码的可维护性。同时，函数式编程避免了状态的变化和可变数据，令代码更加稳定可靠。此外，函数式编程的无状态特性也使得它天生就支持并发处理，非常适合处理大数据量和并发请求，特别适应云原生应用的需求。</p><p>函数式编程可以说是云原生时代中的一种理想编程范式。<strong>它简单、高效、可维护的特性，以及处理大规模数据和并发请求的能力，使得函数式编程在未来得到了广阔的应用空间。</strong>在云原生的背景下，我们应该更深入地了解和掌握函数式编程，以提升我们的编程水平和效率，提供更高性能和易伸缩的云服务。</p><h2>思考题</h2><p>学而不思则罔，学完这节课之后，我给你留两个问题。</p><ol>\n<li>什么是编程范式？</li>\n<li>尝试用函数式编程写一段代码？</li>\n</ol><p>希望你认真思考，然后把思考后的结果分享到评论区，我们一起讨论，如果有收获的话，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":396172,"user_name":"文敦复","can_delete":false,"product_type":"c1","uid":1195258,"ip_address":"四川","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1733412437,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"理想很丰满但是现实很骨感,函数式编程存在的上下文问题很难处理啊","like_count":0},{"had_liked":false,"id":383431,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1699014045,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"Q1：采用函数式编程，就没有多线程问题了吗？\nQ2：做一个网站，服务器是采用云服务（比如阿里云）吗？还是租机房？甚至自己购买机器？哪种方案好？","like_count":0,"discussions":[{"author":{"id":1002077,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/5d/d8b92548.jpg","nickname":"karottc","note":"","ucode":"3517FB3B8371FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634717,"discussion_content":"1. 对没有多线程问题，因为所有变量都是函数内部本地变量，外面传进来的变量是不可变的。  如果不满足这个条件，那就不是函数式编程。\n2. 买阿里云性价比最高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703835127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}