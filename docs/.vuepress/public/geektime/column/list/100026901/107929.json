{"id":107929,"title":"30 | 真的有必要写单元测试吗？","content":"<p>你好，我是景霄。</p><p>说到unit test（即单元测试，下文统一用中文称呼），大部分人的反应估计有这么两种：要么就是，单元测试啊，挺简单的呀，做不做无所谓吧；要么就是，哎呀，项目进度太赶，单元测试拖一拖之后再来吧。</p><p>显然，这两种人，都没有正确认识到单元测试的价值，也没能掌握正确的单元测试方法。你是不是觉得自己只要了解Python的各个feature，能够编写出符合规定功能的程序就可以了呢？</p><p>其实不然，完成产品的功能需求只是很基础的一部分，如何保证所写代码的稳定、高效、无误，才是我们工作的关键。而学会合理地使用单元测试，正是帮助你实现这一目标的重要路径。</p><p>我们总说，测试驱动开发（TDD）。今天我就以Python为例，教你设计编写Python的单元测试代码，带你熟悉并掌握这一重要技能。</p><h2>什么是单元测试？</h2><p>单元测试，通俗易懂地讲，就是编写测试来验证某一个模块的功能正确性，一般会指定输入，验证输出是否符合预期。</p><p>实际生产环境中，我们会对每一个模块的所有可能输入值进行测试。这样虽然显得繁琐，增加了额外的工作量，但是能够大大提高代码质量，减小bug发生的可能性，也更方便系统的维护。</p><p>说起单元测试，就不得不提 <a href=\"https://docs.python.org/3/library/unittest.html\">Python unittest库</a>，它提供了我们需要的大多数工具。我们来看下面这个简单的测试，从代码中了解其使用方法：</p><!-- [[[read_end]]] --><pre><code>import unittest\n\n# 将要被测试的排序函数\ndef sort(arr):\n    l = len(arr)\n    for i in range(0, l):\n        for j in range(i + 1, l):\n            if arr[i] &gt;= arr[j]:\n                tmp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n\n\n# 编写子类继承unittest.TestCase\nclass TestSort(unittest.TestCase):\n\n   # 以test开头的函数将会被测试\n   def test_sort(self):\n        arr = [3, 4, 1, 5, 6]\n        sort(arr)\n        # assert 结果跟我们期待的一样\n        self.assertEqual(arr, [1, 3, 4, 5, 6])\n\nif __name__ == '__main__':\n    ## 如果在Jupyter下，请用如下方式运行单元测试\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n    \n    ## 如果是命令行下运行，则：\n    ## unittest.main()\n    \n## 输出\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\n\nOK\n</code></pre><p>这里，我们创建了一个排序函数的单元测试，来验证排序函数的功能是否正确。代码里我做了非常详细的注释，相信你能够大致读懂，我再来介绍一些细节。</p><p>首先，我们需要创建一个类<code>TestSort</code>，继承类<code>‘unittest.TestCase’</code>；然后，在这个类中定义相应的测试函数test_sort()，进行测试。注意，测试函数要以<code>‘test’</code>开头，而测试函数的内部，通常使用assertEqual()、assertTrue()、assertFalse()和assertRaise()等assert语句对结果进行验证。</p><p>最后运行时，如果你是在IPython或者Jupyter环境下，请使用下面这行代码：</p><pre><code>unittest.main(argv=['first-arg-is-ignored'], exit=False)\n</code></pre><p>而如果你用的是命令行，直接使用unittest.main()就可以了。你可以看到，运行结果输出<code>’OK‘</code>，这就表示我们的测试通过了。</p><p>当然，这个例子中的被测函数相对简单一些，所以写起对应的单元测试来也非常自然，并不需要很多单元测试的技巧。但实战中的函数往往还是比较复杂的，遇到复杂问题，高手和新手的最大差别，便是单元测试技巧的使用。</p><h2>单元测试的几个技巧</h2><p>接下来，我将会介绍Python单元测试的几个技巧，分别是mock、side_effect和patch。这三者用法不一样，但都是一个核心思想，即<strong>用虚假的实现，来替换掉被测试函数的一些依赖项，让我们能把更多的精力放在需要被测试的功能上。</strong></p><h3>mock</h3><p>mock是单元测试中最核心重要的一环。mock的意思，便是通过一个虚假对象，来代替被测试函数或模块需要的对象。</p><p>举个例子，比如你要测一个后端API逻辑的功能性，但一般后端API都依赖于数据库、文件系统、网络等。这样，你就需要通过mock，来创建一些虚假的数据库层、文件系统层、网络层对象，以便可以简单地对核心后端逻辑单元进行测试。</p><p>Python mock则主要使用mock或者MagicMock对象，这里我也举了一个代码示例。这个例子看上去比较简单，但是里面的思想很重要。下面我们一起来看下：</p><pre><code>import unittest\nfrom unittest.mock import MagicMock\n\nclass A(unittest.TestCase):\n    def m1(self):\n        val = self.m2()\n        self.m3(val)\n\n    def m2(self):\n        pass\n\n    def m3(self, val):\n        pass\n\n    def test_m1(self):\n        a = A()\n        a.m2 = MagicMock(return_value=&quot;custom_val&quot;)\n        a.m3 = MagicMock()\n        a.m1()\n        self.assertTrue(a.m2.called) #验证m2被call过\n        a.m3.assert_called_with(&quot;custom_val&quot;) #验证m3被指定参数call过\n        \nif __name__ == '__main__':\n    unittest.main(argv=['first-arg-is-ignored'], exit=False)\n\n## 输出\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\n\nOK\n</code></pre><p>这段代码中，我们定义了一个类的三个方法m1()、m2()、m3()。我们需要对m1()进行单元测试，但是m1()取决于m2()和m3()。如果m2()和m3()的内部比较复杂, 你就不能只是简单地调用m1()函数来进行测试，可能需要解决很多依赖项的问题。</p><p>这一听就让人头大了吧？但是，有了mock其实就很好办了。我们可以把m2()替换为一个返回具体数值的value，把m3()替换为另一个mock（空函数）。这样，测试m1()就很容易了，我们可以测试m1()调用m2()，并且用m2()的返回值调用m3()。</p><p>可能你会疑惑，这样测试m1()不是基本上毫无意义吗？看起来只是象征性地测了一下逻辑呀？</p><p>其实不然，真正工业化的代码，都是很多层模块相互逻辑调用的一个树形结构。单元测试需要测的是某个节点的逻辑功能，mock掉相关的依赖项是非常重要的。这也是为什么会被叫做单元测试unit test，而不是其他的integration test、end to end test这类。</p><h3>Mock Side Effect</h3><p>第二个我们来看Mock Side Effect，这个概念很好理解，就是 mock的函数，属性是可以根据不同的输入，返回不同的数值，而不只是一个return_value。</p><p>比如下面这个示例，例子很简单，测试的是输入参数是否为负数，输入小于0则输出为1 ，否则输出为2。代码很简短，你一定可以看懂，这便是Mock Side Effect的用法。</p><pre><code>from unittest.mock import MagicMock\ndef side_effect(arg):\n    if arg &lt; 0:\n        return 1\n    else:\n        return 2\nmock = MagicMock()\nmock.side_effect = side_effect\n\nmock(-1)\n1\n\nmock(1)\n2\n</code></pre><h3>patch</h3><p>至于patch，给开发者提供了非常便利的函数mock方法。它可以应用Python的decoration模式或是context manager概念，快速自然地mock所需的函数。它的用法也不难，我们来看代码：</p><pre><code>from unittest.mock import patch\n\n@patch('sort')\ndef test_sort(self, mock_sort):\n    ...\n    ...\n</code></pre><p>在这个test里面，mock_sort  替代sort函数本身的存在，所以，我们可以像开始提到的mock object一样，设置return_value和side_effect。</p><p>另一种patch的常见用法，是mock类的成员函数，这个技巧我们在工作中也经常会用到，比如说一个类的构造函数非常复杂，而测试其中一个成员函数并不依赖所有初始化的object。它的用法如下：</p><pre><code>with patch.object(A, '__init__', lambda x: None):\n      …\n</code></pre><p>代码应该也比较好懂。在with语句里面，我们通过patch，将A类的构造函数mock为一个do nothing的函数，这样就可以很方便地避免一些复杂的初始化（initialization）。</p><p>其实，综合前面讲的这几点来看，你应该感受到了，单元测试的核心还是mock，mock掉依赖项，测试相应的逻辑或算法的准确性。在我看来，虽然Python unittest库还有很多层出不穷的方法，但只要你能掌握了MagicMock和patch，编写绝大部分工作场景的单元测试就不成问题了。</p><h2>高质量单元测试的关键</h2><p>这节课的最后，我想谈一谈高质量的单元测试。我很理解，单元测试这个东西，哪怕是正在使用的人也是“百般讨厌”的，不少人很多时候只是敷衍了事。我也嫌麻烦，但从来不敢松懈，因为在大公司里，如果你写一个很重要的模块功能，不写单元测试是无法通过code review的。</p><p>低质量的单元测试，可能真的就是摆设，根本不能帮我们验证代码的正确性，还浪费时间。那么，既然要做单元测试，与其浪费时间糊弄自己，不如追求高质量的单元测试，切实提高代码品质。</p><p>那该怎么做呢？结合工作经验，我认为一个高质量的单元测试，应该特别关注下面两点。</p><h3>Test Coverage</h3><p>首先我们要关注Test Coverage，它是衡量代码中语句被cover的百分比。可以说，提高代码模块的Test Coverage，基本等同于提高代码的正确性。</p><p>为什么呢？</p><p>要知道，大多数公司代码库的模块都非常复杂。尽管它们遵从模块化设计的理念，但因为有复杂的业务逻辑在，还是会产生逻辑越来越复杂的模块。所以，编写高质量的单元测试，需要我们cover模块的每条语句，提高Test Coverage。</p><p>我们可以用Python的coverage tool  来衡量Test Coverage，并且显示每个模块为被coverage的语句。如果你想了解更多更详细的使用，可以点击这个链接来学习：<a href=\"https://coverage.readthedocs.io/en/v4.5.x/\">https://coverage.readthedocs.io/en/v4.5.x/</a> 。</p><h3>模块化</h3><p>高质量单元测试，不仅要求我们提高Test Coverage，尽量让所写的测试能够cover每个模块中的每条语句；还要求我们从测试的角度审视codebase，去思考怎么模块化代码，以便写出高质量的单元测试。</p><p>光讲这段话可能有些抽象，我们来看这样的场景。比如，我写了一个下面这个函数，对一个数组进行处理，并返回新的数组：</p><pre><code>def work(arr):\n    # pre process\n    ...\n    ...\n    # sort\n    l = len(arr)\n    for i in range(0, l):\n        for j in range(i + 1, j):\n            if arr[i] &gt;= arr[j]:\n                tmp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n    # post process\n    ...\n    ...\n    Return arr\n</code></pre><p>这段代码的大概意思是，先有个预处理，再排序，最后再处理一下然后返回。如果现在要求你，给这个函数写个单元测试，你是不是会一筹莫展呢？</p><p>毕竟，这个函数确实有点儿复杂，以至于你都不知道应该是怎样的输入，并要期望怎样的输出。这种代码写单元测试是非常痛苦的，更别谈cover每条语句的要求了。</p><p>所以，正确的测试方法，应该是先模块化代码，写成下面的形式：</p><pre><code>def preprocess(arr):\n    ...\n    ...\n    return arr\n\ndef sort(arr):\n    ...\n    ...\n    return arr\n\ndef postprocess(arr):\n    ...\n    return arr\n\ndef work(self):\n    arr = preprocess(arr)\n    arr = sort(arr)\n    arr = postprocess(arr)\n    return arr\n</code></pre><p>接着再进行相应的测试，测试三个子函数的功能正确性；然后通过mock子函数，调用work()函数，来验证三个子函数被call过。</p><pre><code>from unittest.mock import patch\n\ndef test_preprocess(self):\n    ...\n    \ndef test_sort(self):\n    ...\n    \ndef test_postprocess(self):\n    ...\n    \n@patch('%s.preprocess')\n@patch('%s.sort')\n@patch('%s.postprocess')\ndef test_work(self,mock_post_process, mock_sort, mock_preprocess):\n    work()\n    self.assertTrue(mock_post_process.called)\n    self.assertTrue(mock_sort.called)\n    self.assertTrue(mock_preprocess.called)\n</code></pre><p>你看，这样一来，通过重构代码就可以使单元测试更加全面、精确，并且让整体架构、函数设计都美观了不少。</p><h2>总结</h2><p>回顾下这节课，整体来看，单元测试的理念是先模块化代码设计，然后针对每个作用单元，编写单独的测试去验证其准确性。更好的模块化设计和更多的Test Coverage，是提高代码质量的核心。而单元测试的本质就是通过mock，去除掉不影响测试的依赖项，把重点放在需要测试的代码核心逻辑上。</p><p>讲了这么多，还是想告诉你，单元测试是个非常非常重要的技能，在实际工作中是保证代码质量和准确性必不可少的一环。同时，单元测试的设计技能，不只是适用于Python，而是适用于任何语言。所以，单元测试必不可少。</p><h2>思考题</h2><p>那么，你在平时的学习工作中，曾经写过单元测试吗？在编写单元测试时，用到过哪些技巧或者遇到过哪些问题吗？欢迎留言与我交流，也欢迎你把这篇文章分享出去。</p><p></p>","comments":[{"had_liked":false,"id":117730,"user_name":"Steven","can_delete":false,"product_type":"c1","uid":1495454,"ip_address":"","ucode":"BC5B33911FEC46","user_header":"https://static001.geekbang.org/account/avatar/00/16/d1/9e/fe7bc8df.jpg","comment_is_top":false,"comment_ctime":1564120577,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"139003074049","product_id":100026901,"comment_content":"开始触及盲点了，其实平时很少定单元测试，感觉这一章的内容有点茫然，感觉说的都懂，但是又感觉不知道要拿来怎么用。","like_count":33,"discussions":[{"author":{"id":1254814,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/9e/69b65b6f.jpg","nickname":"一棵开花的树","note":"","ucode":"01688DC32E4F8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331532,"discussion_content":"懂得都懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606894446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115951,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1563769364,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"117527886356","product_id":100026901,"comment_content":"pytest似乎比官方 unitest 更容易且更强大！","like_count":28,"discussions":[{"author":{"id":1024416,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/a0/7687413f.jpg","nickname":"Zopen","note":"","ucode":"3EA97C79523FD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556316,"discussion_content":"组内单测用的就是pytest，方便好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647310352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119380,"user_name":"盒子妮","can_delete":false,"product_type":"c1","uid":1565885,"ip_address":"","ucode":"A7EF8775F7B979","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKjX37aIYNjm4SOVDoACNe4TL5jFOkDPgFa7uTRKzDj0yN1uacEuyNzfyZt1DpIIjYL0Ribfhs9YIw/132","comment_is_top":false,"comment_ctime":1564575368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78873986696","product_id":100026901,"comment_content":"感谢老师的讲解，只是后面的side_effect和patch还是不明白该怎么用，后面如果有答疑的话希望老师详细讲一下。谢谢","like_count":19},{"had_liked":false,"id":205767,"user_name":"Richard","can_delete":false,"product_type":"c1","uid":1316758,"ip_address":"","ucode":"893F958B9DD161","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","comment_is_top":false,"comment_ctime":1586737276,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61716279420","product_id":100026901,"comment_content":"mock介绍还说得过去，side effect和patch在新手看来简直不知道在说什么","like_count":15,"discussions":[{"author":{"id":1142519,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/f7/b7a1a996.jpg","nickname":"风中骄子","note":"","ucode":"A6B2F970AC12F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574152,"discussion_content":"感觉挺强大的，但是没太看懂啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653874116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307057,"discussion_content":"同感啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600484194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121661,"user_name":"VincentBegins","can_delete":false,"product_type":"c1","uid":1494295,"ip_address":"","ucode":"F60B65A767C9BF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJM8KGX6C2mgXviaVFfVaJy65gNICicmtfDMTh53s4zLAbEMnuZZNBkdFnUGxiayuCh1UtqiadHSicetiaQ/132","comment_is_top":false,"comment_ctime":1565180025,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44514852985","product_id":100026901,"comment_content":"根据我的经验，在动手写代码前，先得有让代码testable的意识，使用DIP原则与dependency injection将业务逻辑代码与具体的平台实现代码解耦，平台实现代码包括数据库操作，文件读写，对rest api的调用，等等），尽量保持平台代码简单直接。<br><br>在写UT的时候，编写对平台的mock即可。","like_count":10,"discussions":[{"author":{"id":2041512,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/a8/f1ebe0c8.jpg","nickname":"btzhangmen","note":"","ucode":"95AFF56F8541FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355292,"discussion_content":"请问可不可以展开讲讲？工作中遇到写好多复杂的pyspark操作数据库，这种怎么测试呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615394548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114651,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1563356770,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"27333160546","product_id":100026901,"comment_content":"后面有几个代码没怎么看懂，希望老师详细说明一下：<br>1） from unittest.mock import patch<br><br>@patch(&#39;sort&#39;)<br>def test_sort(self, mock_sort):<br>    ... <br>文档上说这个是个patch()里面是个类,但老师这里表达的是函数？<br>2） @patch(&#39;%s.preprocess&#39;) 这个又是表达的什么的，运行后ModuleNotFoundError: No module named &#39;%s&#39;。 <br>所以烦请老师把这块详细说明一下，不然感觉还是不怎么会使用","like_count":6,"discussions":[{"author":{"id":1248732,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/dc/ddfaf280.jpg","nickname":"Pixel.","note":"","ucode":"A740BD008C5A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2286,"discussion_content":"@patch(&#39;a.b.c&#39;)，代表需要mock的函数或类在命名为a的pakege下，b.py里，有个c的函数（或类），那这个参数就写“a.b.c”","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1563437396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1479000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIenBesolAerbtjodfkbSsM9VFsHkr6icdZgPqkbQkx1Easl8jqRPWQubEfib3plicD1zXwnTbQ2xU1A/132","nickname":"Geek_077da0","note":"","ucode":"EBA26487CB0482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1248732,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/dc/ddfaf280.jpg","nickname":"Pixel.","note":"","ucode":"A740BD008C5A33","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2363,"discussion_content":"请问，装饰器装饰的那个测试函数的参数是不是按装饰器的顺序代表了被mock的函数？即第一个参数代表了被最下方的装饰器mock掉的函数，最后一个参数代表了最上方的那个装饰器？希望能得到您的解答。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563517760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2286,"ip_address":""},"score":2363,"extra":""},{"author":{"id":1248732,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/dc/ddfaf280.jpg","nickname":"Pixel.","note":"","ucode":"A740BD008C5A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1479000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIenBesolAerbtjodfkbSsM9VFsHkr6icdZgPqkbQkx1Easl8jqRPWQubEfib3plicD1zXwnTbQ2xU1A/132","nickname":"Geek_077da0","note":"","ucode":"EBA26487CB0482","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2538,"discussion_content":"你是指这里吗？如果是的话，你的理解是对的。\n@patch(&#39;%s.preprocess&#39;)\n@patch(&#39;%s.sort&#39;)\n@patch(&#39;%s.postprocess&#39;)\ndef test_work(self,mock_post_process, mock_sort, mock_preprocess):\n.....","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563764102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2363,"ip_address":""},"score":2538,"extra":""}]},{"author":{"id":1513783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","nickname":"Geek_59f23e","note":"","ucode":"A463C6EB7447FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2412,"discussion_content":"同问，patch 这儿没看懂，因为之前也没用过，老师给的代码运行会报错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563551754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117292,"user_name":"magician","can_delete":false,"product_type":"c1","uid":1483968,"ip_address":"","ucode":"1BD1125C7C907A","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/c0/c6880c07.jpg","comment_is_top":false,"comment_ctime":1564019439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23038855919","product_id":100026901,"comment_content":"requests 测试api","like_count":5},{"had_liked":false,"id":118138,"user_name":"hello,everyone","can_delete":false,"product_type":"c1","uid":1610603,"ip_address":"","ucode":"6340F6EDBC0773","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/6b/05057fbd.jpg","comment_is_top":false,"comment_ctime":1564278645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18744147829","product_id":100026901,"comment_content":"从来没写过单元测试，在jupyter notebook 做数据分析，每步都会有结果出来，根据结果做修改，请问这样的数据分析，有必要写单元测试吗？或者数据分析过程有什么好的测试方法，感觉有时候花好长时间完成一个特征的处理，发现结果与预期不一致，很是头疼。","like_count":4},{"had_liked":false,"id":117417,"user_name":"zengyunda","can_delete":false,"product_type":"c1","uid":1359389,"ip_address":"","ucode":"3F08F16FB92C8E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ic76sMTwXTJYJQglBTHVian3OHibEuvGXuRH5QibvwqVIsUNa8pzRYkmsbXjLp1eacN1vC77EVKe4k5u7RRVFb3dOg/132","comment_is_top":false,"comment_ctime":1564043298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14448945186","product_id":100026901,"comment_content":"从来没有写过单元测试的人表示很忧伤","like_count":4},{"had_liked":false,"id":114582,"user_name":"夜路破晓","can_delete":false,"product_type":"c1","uid":1353577,"ip_address":"","ucode":"9B875F94B759B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hZfficKPGCq2kjFBu9SgaMjibJTEl7iaW1ta6pZNyiaWP8XEsNpunlnsiaOtBpWTXfT5BvRP3qNByml6p9rtBvqewg/132","comment_is_top":false,"comment_ctime":1563345490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14448247378","product_id":100026901,"comment_content":"认知层次决定了效率高低。<br>虽然作为小白代码部分看得一脸懵逼，但完全get到了测试单元属于高级思维运用的高级方法与技能，因为它不仅要求代码设计拥有模块化理念的底层逻辑，还提倡代码不只是满足产品功能需求更要求持续稳定高效。<br>这就是码农与非码农的认知差距。","like_count":3},{"had_liked":false,"id":114451,"user_name":"","can_delete":false,"product_type":"c1","uid":1322330,"ip_address":"","ucode":"FA2983C5AD320C","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/5a/cc637589.jpg","comment_is_top":false,"comment_ctime":1563320820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14448222708","product_id":100026901,"comment_content":"我的单元测试是直接跑流程，有时候有些很好复杂的调用就很麻烦。这个应该能提高效率。","like_count":3},{"had_liked":false,"id":227254,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1592327037,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"10182261629","product_id":100026901,"comment_content":"曾经因为代码的可测试性不好，为了写单元测试把代码重构了。","like_count":2,"discussions":[{"author":{"id":1017161,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","nickname":"皮特尔","note":"","ucode":"313862C91DD325","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534392,"discussion_content":"是的，代码的可测试性应该在写代码之前就考虑到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638178331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2518654,"avatar":"https://static001.geekbang.org/account/avatar/00/26/6e/7e/013b22f2.jpg","nickname":"轩天","note":"","ucode":"758BA992048C76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532567,"discussion_content":"这个其实就是变形的测试驱动开发。是不是在开发之前，就能想到如何去测试，这样从设计之初就把代码整理好，后面就不会出现大问题，而且方便定位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637647799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206258,"user_name":"武瑞霞","can_delete":false,"product_type":"c1","uid":1918944,"ip_address":"","ucode":"62F0507BD79BC2","user_header":"","comment_is_top":false,"comment_ctime":1586830344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176764936","product_id":100026901,"comment_content":"mock下的side effect和patch，这两个完全茫然啊，希望老师能详细介绍并示范下实践运用！","like_count":3},{"had_liked":false,"id":131952,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1567991659,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10157926251","product_id":100026901,"comment_content":"软件和其它产品一样，都要保证质量。提升代码质量的工具之一是单测，相当于自检的一部分。自检通过后再交给质量部（测试部），这是对自己工作更负责，减少bug","like_count":2,"discussions":[{"author":{"id":1168322,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d3/c2/3f32b93b.jpg","nickname":"我是谁","note":"","ucode":"0CEE16C25F4B23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8533,"discussion_content":"做测试这么多年，充分自测后在提测的还真没见过几个，哈哈哈.......","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568015245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241193,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1597212270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892179566","product_id":100026901,"comment_content":"mock   magicmock  patch 涉及到知识盲区了，unittest 滞留在概念层","like_count":1},{"had_liked":false,"id":211409,"user_name":"咩小小","can_delete":false,"product_type":"c1","uid":1554515,"ip_address":"","ucode":"3D7075D814DD13","user_header":"https://static001.geekbang.org/account/avatar/00/17/b8/53/6a26debf.jpg","comment_is_top":false,"comment_ctime":1587959157,"is_pvip":false,"replies":[{"id":"84972","content":"我们公司的风格是单元测试都由开发者写的，因为代码就是开发者写的，当然单元测试也一并写了","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1593310314,"ip_address":"","comment_id":211409,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5882926453","product_id":100026901,"comment_content":"我想问下一般单元测试是由写该代码的开发者写吗，那么测试开发工程师对单元测试的关注度跟开发者写的单元测试关注度有啥不一样呢，希望老师能讲一下","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493270,"discussion_content":"我们公司的风格是单元测试都由开发者写的，因为代码就是开发者写的，当然单元测试也一并写了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593310314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206144,"user_name":"pan xi er","can_delete":false,"product_type":"c1","uid":1564961,"ip_address":"","ucode":"15D3FB11F3A77C","user_header":"https://static001.geekbang.org/account/avatar/00/17/e1/21/63472854.jpg","comment_is_top":false,"comment_ctime":1586793284,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5881760580","product_id":100026901,"comment_content":"上面的两个unittest 我用命令行执行，出来的结果为什么都是只运行1个case？老师的是2个","like_count":1,"discussions":[{"author":{"id":1319529,"avatar":"https://static001.geekbang.org/account/avatar/00/14/22/69/09f7a8a2.jpg","nickname":"Don Wang","note":"","ucode":"1853365FA279F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302067,"discussion_content":"你是用pycharm的吧？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598777998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152985,"user_name":"supakito","can_delete":false,"product_type":"c1","uid":1387156,"ip_address":"","ucode":"3060AB5E0D4E24","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gKnIR8mga02s9xdQoxyJBibmuxHGhfQ8WZicia3Ie4wBQKg4Zc1oVoS03mvaCD46je9xCza25qXc3w6KMckpS0BqQ/132","comment_is_top":false,"comment_ctime":1574133868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869101164","product_id":100026901,"comment_content":"觉得这篇文章对单元测试算是一个入门吧，更多的还需要在工作中不断地积累和实践。看到评论中的很多内容，也觉得受益匪浅","like_count":1},{"had_liked":false,"id":341951,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1649928365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649928365","product_id":100026901,"comment_content":"import unittest<br>from unittest import mock<br><br><br>def pay():<br>    &quot;&quot;&quot;<br>    假设这里是一个支付的功能,未开发完<br>    支付成功返回：{&quot;result&quot;: &quot;success&quot;, &quot;reason&quot;:&quot;null&quot;}<br>    支付失败返回：{&quot;result&quot;: &quot;fail&quot;, &quot;reason&quot;:&quot;余额不足&quot;}<br>    reason返回失败原因<br>    :return:<br>    &quot;&quot;&quot;<br>    pass<br><br><br>def pay_statues():<br>    &quot;&quot;&quot;<br>    根据支付的结果success or fail，判断跳转到对应页面<br>    :return:<br>    &quot;&quot;&quot;<br>    result = pay()<br>    print(result)<br>    try:<br>        if result[&quot;result&quot;] == &quot;success&quot;:<br>            return &quot;支付成功&quot;<br>        elif result[&quot;result&quot;] == &quot;fail&quot;:<br>            print(&quot;失败原因：%s&quot; % result[&quot;reason&quot;])<br>            return &quot;支付失败&quot;<br>        else:<br>            return &quot;未知错误异常&quot;<br>    except:<br>        return &quot;Error, 服务端返回异常!&quot;<br><br><br>class test_pay_status(unittest.TestCase):<br><br>    @mock.patch(&#39;pyunittest.temple.pay&#39;)<br>    def test_01(self, mock_pay):<br>      &#39;&#39;&#39;测试支付成功场景&#39;&#39;&#39;<br>        mock_pay.return_value = {&quot;result&quot;: &quot;success&quot;, &quot;reason&quot;: &quot;null&quot;}<br>        statues = pay_statues()<br>        self.assertEqual(statues, &quot;支付成功&quot;)<br><br>    @mock.patch(&#39;pyunittest.temple.pay&#39;)<br>    def test_02(self, mock_pay):<br>      &#39;&#39;&#39;测试支付失败场景&#39;&#39;&#39;<br>        mock_pay.return_value = {&quot;result&quot;: &quot;fail&quot;, &quot;reason&quot;: &quot;余额不足&quot;}<br>        statues = pay_statues()<br>        self.assertEqual(statues, &quot;支付失败&quot;)<br><br><br>if __name__ == &quot;__main__&quot;:<br>        unittest<br><br><br>注意：<br>这里@mock.patch(&#39;pyunittest.temple.pay’)中被mock的函数，必须写项目绝对路径，不能因为测试类和被测函数在一个文件里，就只写函数名，会报错！","like_count":0},{"had_liked":false,"id":163142,"user_name":"郑文捷","can_delete":false,"product_type":"c1","uid":1076161,"ip_address":"","ucode":"98C08BB54F0974","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/c1/331b91c4.jpg","comment_is_top":false,"comment_ctime":1576663022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576663022","product_id":100026901,"comment_content":"关于patch的代码是什么样的了?","like_count":0},{"had_liked":false,"id":154490,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574459370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574459370","product_id":100026901,"comment_content":"单元测试是从外部视角看每个函数，确定函数的输入输出符合条件，函数的调用符合预期。单元测试相当于从另外一个角度重新理解了问题，就像我们做数学题，如果两种不同的方法得出了相同的结论，说明这两种方法的正确率很高。","like_count":0},{"had_liked":false,"id":143107,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1571631719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571631719","product_id":100026901,"comment_content":"尝试过测试驱动开发，那时还在用c++，没有太好的工具，就放弃了。","like_count":0},{"had_liked":false,"id":140635,"user_name":"没羊的灰太狼","can_delete":false,"product_type":"c1","uid":1026451,"ip_address":"","ucode":"BB543D309F7348","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/93/ccde483a.jpg","comment_is_top":false,"comment_ctime":1571019248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571019248","product_id":100026901,"comment_content":"实现自动化测试框架的过程中，对每个类和函数都形成了单元测试，最初的设想是，即证明新增函数可用并无误，也是在文档或注释不完整的时候，作为如何使用函数的示例。","like_count":0},{"had_liked":false,"id":132055,"user_name":"我是谁","can_delete":false,"product_type":"c1","uid":1168322,"ip_address":"","ucode":"0CEE16C25F4B23","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/c2/3f32b93b.jpg","comment_is_top":false,"comment_ctime":1568015114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568015114","product_id":100026901,"comment_content":"一直在使用unitttest,但是一直没有试过mock来做，感谢！","like_count":0},{"had_liked":false,"id":117387,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1564037671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564037671","product_id":100026901,"comment_content":"patch没看懂，但是还是有收获的。知道有这个东西，回头用到的时候有个方向。","like_count":0},{"had_liked":false,"id":117142,"user_name":"李朝辉","can_delete":false,"product_type":"c1","uid":1152951,"ip_address":"","ucode":"8E4A4469A77A88","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/b7/d5a83264.jpg","comment_is_top":false,"comment_ctime":1563976086,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1563976086","product_id":100026901,"comment_content":"老师 排序的j循环代码是不是写错了 for j in range(i + 1, l)","like_count":0,"discussions":[{"author":{"id":1184505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","nickname":"Geek_04e22a","note":"","ucode":"B64FF12EA28BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228262,"discussion_content":"冒泡排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586529465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24181,"discussion_content":"我感觉没错，应该是选择排序，每次选择最小的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570026099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116323,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1563841237,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1563841237","product_id":100026901,"comment_content":"我通常都把模块的简单测试代码写在main中，没有单独写单元测试","like_count":0},{"had_liked":false,"id":115652,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1563683686,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563683686","product_id":100026901,"comment_content":"在说Mock Side Effect的用法时，老师，你说代码很简短，你一定可以看懂。然后我就对这两句疑惑了：<br>mock = MagicMock()<br>mock.side_effect = side_effect<br>在mock.side_effect = side_effect赋值中到底发生了什么？","like_count":0,"discussions":[{"author":{"id":2143277,"avatar":"https://static001.geekbang.org/account/avatar/00/20/b4/2d/44680897.jpg","nickname":"Resolution","note":"","ucode":"F74C067C58CD05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319127,"discussion_content":"可以参考下源码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603949715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115030,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1563457734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563457734","product_id":100026901,"comment_content":"受益匪浅","like_count":0},{"had_liked":false,"id":114960,"user_name":"响雨","can_delete":false,"product_type":"c1","uid":1581705,"ip_address":"","ucode":"C5FB3A3BC68F92","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","comment_is_top":false,"comment_ctime":1563439105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563439105","product_id":100026901,"comment_content":"单元测试中current_app这样的上下文环境，怎么导入啊","like_count":0},{"had_liked":false,"id":114774,"user_name":"王校","can_delete":false,"product_type":"c1","uid":1486868,"ip_address":"","ucode":"BBE375D730B021","user_header":"https://static001.geekbang.org/account/avatar/00/16/b0/14/e5c445ba.jpg","comment_is_top":false,"comment_ctime":1563402788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563402788","product_id":100026901,"comment_content":"这节让我一下子对单元测试理解了不少。我还想进一步了解 更多技巧和 最佳实践。有什么好的学习链接和书籍推荐吗？","like_count":0},{"had_liked":false,"id":114559,"user_name":"Claywoow","can_delete":false,"product_type":"c1","uid":1524797,"ip_address":"","ucode":"1F1C70BCE33536","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/3d/35d6670d.jpg","comment_is_top":false,"comment_ctime":1563335153,"is_pvip":false,"replies":[{"id":"41819","content":"最好也mock一下","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563347460,"ip_address":"","comment_id":114559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563335153","product_id":100026901,"comment_content":"一些大项目中的函数有文件的读写操作有必要mock掉吗","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458725,"discussion_content":"最好也mock一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563347460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114507,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1563326930,"is_pvip":false,"replies":[{"id":"41820","content":"嗯嗯，这个习惯很好","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563347473,"ip_address":"","comment_id":114507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563326930","product_id":100026901,"comment_content":"很喜欢写单测，通过后才会继续实现下一步功能","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458694,"discussion_content":"嗯嗯，这个习惯很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563347473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114456,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1563321539,"is_pvip":false,"replies":[{"id":"41821","content":"谢谢你的支持","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563347516,"ip_address":"","comment_id":114456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563321539","product_id":100026901,"comment_content":"一直因为业务逻辑复杂，而不好做单元测试。 今天茅塞顿开。 感谢老师。","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458672,"discussion_content":"谢谢你的支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563347516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}