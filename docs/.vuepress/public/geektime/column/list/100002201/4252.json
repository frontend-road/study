{"id":4252,"title":"50 | 弹力设计篇之“降级设计”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>所谓的降级设计（Degradation），本质是为了解决资源不足和访问量过大的问题。当资源和访问量出现矛盾的时候，在有限的资源下，为了能够扛住大量的请求，我们就需要对系统进行降级操作。也就是说，暂时牺牲掉一些东西，以保障整个系统的平稳运行。</p><p>我记得我在伦敦参与诺丁山狂欢节的时候，以及看阿森纳英超足球比赛的时候，散场时因为人太多，所有的公交系统（公交车，地铁）完全免费，就是为了让人通行得更快。而且早在散场前，场外就备着一堆公交车和地铁了，这样就是为了在最短时间内把人疏散掉。</p><p>虽然亏掉了一些钱，但是相比因为人员拥塞造成道路交通拥塞以及还可能出现的一些意外情况所造成的社会成本的损失，公交免费策略真是很明智的做法。与此类似，我们的系统在应对一些突发情况的时候也需要这样的降级流程。</p><p>一般来说，我们的降级需要牺牲掉的东西有：</p><ul>\n<li><strong>降低一致性</strong>。从强一致性变成最终一致性。</li>\n<li><strong>停止次要功能</strong>。停止访问不重要的功能，从而释放出更多的资源。</li>\n<li><strong>简化功能</strong>。把一些功能简化掉，比如，简化业务流程，或是不再返回全量数据，只返回部分数据。</li>\n</ul><h1>降低一致性</h1><p>我们要清楚地认识到，这世界上大多数系统并不是都需要强一致性的。对于降低一致性，把强一致性变成最终一致性的做法可以有效地释放资源，并且让系统运行得更快，从而可以扛住更大的流量。一般来说，会有两种做法，一种是简化流程的一致性，一种是降低数据的一致性。</p><!-- [[[read_end]]] --><h2>使用异步简化流程</h2><p>举个例子，比如电商的下单交易系统，在强一致的情况下，需要结算账单，扣除库存，扣除账户上的余额（或发起支付），最后进行发货流程，这一系列的操作。</p><p>如果需要是强一致性的，那么就会非常慢。尤其是支付环节可能会涉及银行方面的接口性能，就像双11那样，银行方面出问题会导致支付不成功，而订单流程不能往下走。</p><p>在系统降级时，我们可以把这一系列的操作做成异步的，快速结算订单，不占库存，然后把在线支付降级成用户到付，这样就省去支付环节，然后批量处理用户的订单，向用户发货，用户货到付款。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/78/5c687852fdf4d74d1ac6bc6679980f78.jpg?wh=1863x1506\" alt=\"\"><br>\n如上图所示，一开始需要的全同步的方式，降级成了全异步的方式，库存从单笔强一致性也变成了多笔最终一致性，如果库存不够了，就只能根据先来后到取消订单了。而支付也从最开始的下单请求时的强一致性，变成了用户到付的最终一致性。</p><p>一般来说，功能降级都有可能会损害用户的体验，所以，最好给出友好的用户提示。比如，“系统当前繁忙，您的订单已收到，我们正努力为您处理订单中，我们会尽快给您发送订单确认通知……还请见谅”诸如此类的提示信息。</p><h2>降低数据的一致性</h2><p>降低数据的一致性一般来说会使用缓存的方式，或是直接就去掉数据。比如，在页面上不显示库存的具体数字，只显示有还是没有库存这两种状态。</p><p>对于缓存来说，可以有效地降低数据库的压力，把数据库的资源交给更重要的业务，这样就能让系统更快速地运行。</p><p>对于降级后的系统，不再通过数据库获取数据，而是通过缓存获取数据。关于缓存的设计模式，我在CoolShell中有一篇叫《缓存更新的套路》的文章中讲述过缓存的几种更新模式，你有兴趣的话可以前往一读。在功能降级中，我们一般使用Cache Aside模式或是Read Through模式。也就是下图所示的这个策略。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/c4/bdf7522a231ec2c1136a70f07db0c5c4.png?wh=864*270\" alt=\"\"></p><ul>\n<li><strong>失效</strong>：应用程序先从cache取数据，如果没有得到，则从数据库中取数据，成功后，放到缓存中。</li>\n<li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li>\n<li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li>\n</ul><p>Read Through 模式就是在查询操作中更新缓存，也就是说，当缓存失效的时候（过期或LRU换出），Cache Aside是由调用方负责把数据加载到缓存，而Read Through则用缓存服务自己来加载，从而对应用方是透明的。</p><h1>停止次要的功能</h1><p>停止次要的功能也是一种非常有用的策略。把一些不重要的功能给暂时停止掉，让系统释放出更多的资源来。比如，电商中的搜索功能，用户的评论功能，等等。等待访问的峰值过去后，我们再把这些功能给恢复回来。</p><p>当然，最好不要停止次要的功能，首先可以限制次要的功能的流量，或是把次要的功能退化成简单的功能，最后如果量太大了，我们才会进入停止功能的状态。</p><p>停止功能对用户会带来一些用户体验的问题，尤其是要停掉一些可能对于用户来说是非常重要的功能。所以，如果可能，最好给用户一些补偿，比如把用户切换到一个送积分卡，或是红包抽奖的网页上，有限地补偿一下用户。</p><h1>简化功能</h1><p>关于功能的简化上，上面的下单流程中已经提到过相应的例子了。而且，从缓存中返回数据也是其中一个。这里再提一个，就是一般来说，一个API会有两个版本，一个版本返回全量数据，另一个版本只返回部分或最小的可用的数据。</p><p>举个例子，对于一篇文章，一个API会把商品详情页或文章的内容和所有的评论都返回到前端。那么在降级的情况下，我们就只返回商品信息和文章内容，而不返回用户评论了，因为用户评论会涉及更多的数据库操作。</p><p>所以，这样可以释放更多的数据资源。而商品信息或文章信息可以放在缓存中，这样又能释放出更多的资源给交易系统这样的需要更多数据库资源的业务使用。</p><h1>降级设计的要点</h1><p>对于降级，一般来说是要牺牲业务功能或是流程，以及一致性的。所以，我们需要对业务做非常仔细的梳理和分析。我们很难通过不侵入业务的方式来做到功能降级。</p><p>在设计降级的时候，需要清楚地定义好降级的关键条件，比如，吞吐量过大、响应时间过慢、失败次数过多，有网络或是服务故障，等等，然后做好相应的应急预案。这些预案最好是写成代码可以快速地自动化或半自动化执行的。</p><p>功能降级需要梳理业务的功能，哪些是must-have的功能，哪些是nice-to-have的功能；哪些是必须要死保的功能，哪些是可以牺牲的功能。而且需要在事前设计好可以简化的或是用来应急的业务流程。当系统出问题的时候，就需要走简化应急流程。</p><p>降级的时候，需要牺牲掉一致性，或是一些业务流程：对于读操作来说，使用缓存来解决，对于写操作来说，需要异步调用来解决。并且，我们需要以流水账的方式记录下来，这样方便对账，以免漏掉或是和正常的流程混淆。</p><p>降级的功能的开关可以是一个系统的配置开关。做成配置时，你需要在要降级的时候推送相应的配置。另一种方式是，在对外服务的API上有所区分（方法签名或是开关参数），这样可以由上游调用者来驱动。</p><p>比如：一个网关在限流时，在协议头中加入了一个限流程度的参数，让后端服务能知道限流在发生中。当限流程度达到某个值时，或是限流时间超过某个值时，就自动开始降级，直到限流好转。</p><p>对于数据方面的降级，需要前端程序的配合。一般来说，前端的程序可以根据后端传来的数据来决定展示哪些界面模块。比如，当前端收不到商品评论时，就不展示。为了区分本来就没有数据，还是因为降级了没有数据的两种情况，在协议头中也应该加上降级的标签。</p><p>因为降级的功能平时不会总是会发生，属于应急的情况，所以，降级的这些业务流程和功能有可能长期不用而出现bug或问题，对此，需要在平时做一些演练。</p><h1>小结</h1><p>好了，我们来总结一下今天分享的主要内容。首先，降级设计本质上是为了解决资源不足和访问量过大的问题。降级的方法有降低一致性、停止次要功能和简化功能。最后，我总结了降级设计的要点。下节课，我将总结整个弹力设计篇。希望对你有帮助。</p><p>也欢迎你分享一下你实现过怎样的降级机制？有没有和限流机制配合？</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","neighbors":{"left":{"article_title":"49 | 弹力设计篇之“限流设计”","id":4245},"right":{"article_title":"51 | 弹力设计篇之“弹力设计总结”","id":4253}},"comments":[{"had_liked":false,"id":12075,"user_name":"来","can_delete":false,"product_type":"c1","uid":1048433,"ip_address":"","ucode":"2612C1D888ED03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","comment_is_top":false,"comment_ctime":1528551035,"is_pvip":true,"discussion_count":2,"race_medal":1,"score":"108902733435","product_id":100002201,"comment_content":"我们现在的降级分为功能降级和服务降级。我们目前将降级开关放到配置中心。<br>一、功能降级<br>1、通过降级开关控制功能可用不可用，一般为页面和按钮<br>2、简化业务操作流程，当降级后简化业务操作步骤，快速完成业务操作<br>二、服务降级<br>1、读降级，降级前会读缓存，缓存中不存在的话读数据库，降级后读缓存，缓存中不存在的话，返回默认值，不再读数据库<br>2、写降级，将之前的同步写数据库降级为先写缓存，然后异步写库<br>3、服务调用降级，之前两个系统模块通过mq来交互，当mq消息积压或mq宕机出问题后，降级为服务直接调用<br>","like_count":26,"discussions":[{"author":{"id":1154281,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","nickname":"郭新鹏","note":"","ucode":"F9D76691B335FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139562,"discussion_content":"服务调用降级应该是代码设计中的一种容错处理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579297261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501234,"avatar":"","nickname":"Geek_88604f","note":"","ucode":"33DD1318E53814","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259395,"discussion_content":"写降级的时候先写缓存？不怕数据丢失吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588776492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12082,"user_name":"来","can_delete":false,"product_type":"c1","uid":1048433,"ip_address":"","ucode":"2612C1D888ED03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","comment_is_top":false,"comment_ctime":1528557414,"is_pvip":true,"discussion_count":4,"race_medal":1,"score":"70248034150","product_id":100002201,"comment_content":"关于降级突然想到了生活中一个类似降级的场景：<br>现在小饭馆都支持网上订餐，当餐厅内客人不多的时候，餐厅老板或者服务员会去出去送餐，而当餐厅内客户突然增多，服务员忙不过来的时候，一般会进行降级，降级的策略是将外卖配送交给第三方来配送，或者在某个时间段内暂不支持网上订餐，这种情况类似于功能降级。还有一个场景就是关于餐厅炒菜，当餐厅内食客少的时候，大厨一般会现点现炒，而当食客多忙不过来的时候，一般会提前将菜炒好，客人点完就可以吃到，将热菜降级为快餐，这种情况类似于服务降级。纯属个人理解，如有不妥，还请见谅。","like_count":17,"discussions":[{"author":{"id":1066705,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","nickname":"阿杜","note":"","ucode":"349D3572F5ABE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120486,"discussion_content":"人多的时候哪有多余时间提前炒菜","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578277653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2281234,"avatar":"","nickname":"Geek_ed8984","note":"","ucode":"D8BE37E995384A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066705,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","nickname":"阿杜","note":"","ucode":"349D3572F5ABE7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325783,"discussion_content":"我以前有遇到过，一个菜一锅炒出多份，然后作为特价菜，稍微便宜点（对应就是有缓存，然后由于降级了，所以在价格上给点补偿）","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605430247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120486,"ip_address":""},"score":325783,"extra":""}]},{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379660,"discussion_content":"例子很形象啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624064738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","nickname":"爱学习的大叔","note":"","ucode":"91F9ABF1EC98D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363194,"discussion_content":"挺形象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617122716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4270,"user_name":"丁英才","can_delete":false,"product_type":"c1","uid":1064574,"ip_address":"","ucode":"D87A16F59434B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/7e/5f024473.jpg","comment_is_top":false,"comment_ctime":1521819380,"is_pvip":false,"replies":[{"id":"1118","content":"谢谢。TCP&#47;IP的，我写在CoolShell上了","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1522160549,"ip_address":"","comment_id":4270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48766459636","product_id":100002201,"comment_content":"耗子叔的文章给人行云流水之感，每篇文章从核心介绍，应用场景，分例介绍，架构补图到篇末小节，不仅详略得当，而且读起来感觉畅快。最近响应耗子叔号召，重温基础 tcp&#47;ip 详解，书是好书但没有畅快的感觉。耗子叔要不按你风格写本基础的书，会帮助更多的人","like_count":12,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416274,"discussion_content":"谢谢。TCP/IP的，我写在CoolShell上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1522160549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257262,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1603897107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193831699","product_id":100002201,"comment_content":"我在想，现在很多人写代码，并没有很好的对业务功能隔离。就是那种面条式的写法，如果一旦业务量大增。即使做功能降级，都不好处理。因为里面有数不清的依赖。","like_count":3},{"had_liked":false,"id":169698,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1578408135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168342727","product_id":100002201,"comment_content":"降级设计<br>1.为什么要降级设计<br>面对突发流量递增，系统压力过大，在有限资源下，为了防止系统崩溃，保证系统的可用性。牺牲掉一些不次要功能。<br>2.如何要做降级设计<br>从三个角度来设计，减弱一致性（保证数据最终一致性）、停止次要功能（保证核心功能可用）、简化功能（减少数据量显示）。降级代码或者配置最好能够自动化。<br>","like_count":2},{"had_liked":false,"id":165986,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1577358988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167293580","product_id":100002201,"comment_content":"坚持学习，学习笔记 https:&#47;&#47;mubu.com&#47;colla&#47;46SaxSvAwbM","like_count":2},{"had_liked":false,"id":4182,"user_name":"徐卫","can_delete":false,"product_type":"c1","uid":1021174,"ip_address":"","ucode":"E1CC8EFCB27CC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/f6/fc60bf8a.jpg","comment_is_top":false,"comment_ctime":1521679885,"is_pvip":false,"replies":[{"id":"940","content":"一般来说不需要两套，用开关控制就好。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1521702619,"ip_address":"","comment_id":4182,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10111614477","product_id":100002201,"comment_content":"从代码层面，是不是要写两套，分别针对正常情况和降级后？","like_count":2,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416233,"discussion_content":"一般来说不需要两套，用开关控制就好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1521702619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40545,"user_name":"Geek_fb3db2","can_delete":false,"product_type":"c1","uid":1218254,"ip_address":"","ucode":"8089B8311B6C80","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/ce/8c3bdbe5.jpg","comment_is_top":false,"comment_ctime":1542631439,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5837598735","product_id":100002201,"comment_content":"能够多一些实战以及具体的落地方式就更好了 感觉理论比较重","like_count":1,"discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373179,"discussion_content":"感觉开个新专栏才够讲吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620640906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":6121,"user_name":"Geek_122dd9","can_delete":false,"product_type":"c1","uid":1095819,"ip_address":"","ucode":"12BDEF1FC06633","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/8b/68555cbf.jpg","comment_is_top":false,"comment_ctime":1524415842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5819383138","product_id":100002201,"comment_content":"可以理解为TCC吗","like_count":1},{"had_liked":false,"id":4193,"user_name":"hsy","can_delete":false,"product_type":"c1","uid":1017706,"ip_address":"","ucode":"DB91DA516ECB8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6a/debcdcc1.jpg","comment_is_top":false,"comment_ctime":1521685109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5816652405","product_id":100002201,"comment_content":"高产似** 点赞👏","like_count":1},{"had_liked":false,"id":4180,"user_name":"黄无由","can_delete":false,"product_type":"c1","uid":1006061,"ip_address":"","ucode":"7A013A21C1B4C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/ed/88608728.jpg","comment_is_top":false,"comment_ctime":1521679600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5816646896","product_id":100002201,"comment_content":"总结的很好","like_count":1},{"had_liked":false,"id":319649,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1635901565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635901565","product_id":100002201,"comment_content":"在消息中间做了限流和降级","like_count":0},{"had_liked":false,"id":209814,"user_name":"Geek_dwq","can_delete":false,"product_type":"c1","uid":1817279,"ip_address":"","ucode":"7DC6BFCF746787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wI2LwgvwseNqXwkF67zicD9UXBSle9DPhmL6uyKG9Nib6NLfU3OuKYuSQ4DHCWxIQecnqell2vKVvNX8boox0B8w/132","comment_is_top":false,"comment_ctime":1587619726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587619726","product_id":100002201,"comment_content":"不错，学习了","like_count":0},{"had_liked":false,"id":209093,"user_name":"mark","can_delete":false,"product_type":"c1","uid":1063172,"ip_address":"","ucode":"42CBC7FA8F31F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/04/3295d5eb.jpg","comment_is_top":false,"comment_ctime":1587489134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587489134","product_id":100002201,"comment_content":"功能降级和业务无损之间的tradeoff很值得研究","like_count":0},{"had_liked":false,"id":176016,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1580911599,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580911599","product_id":100002201,"comment_content":"降级，降低一致性，关闭次要功能，简化流程功能。降级的道理很好理解，但真正要在项目中埋下降级的逻辑才是麻烦的。降级不是常态，在遇到时候需要保障产品正确的情况下服务依旧是可用的。<br>同时，文中的缓存逻辑是正确的。读不到缓存，读数据库，然后写缓存。更新数据库后更新缓存。但，从逻辑上讲，依旧有可能在这段时间发生数据不一致，如果读写频繁","like_count":0,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388008,"discussion_content":"关于缓存，更新数据库后是淘汰缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628554499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172778,"user_name":"郭新鹏","can_delete":false,"product_type":"c1","uid":1154281,"ip_address":"","ucode":"F9D76691B335FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","comment_is_top":false,"comment_ctime":1579303087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579303087","product_id":100002201,"comment_content":"规模还可以的公司，基本上都配有预案平台，简单理解就是降级。<br><br>降级依赖（例如 第三方支付）<br>降级功能（例如 再来一单）","like_count":0},{"had_liked":false,"id":169165,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1193306,"ip_address":"","ucode":"DD4144C6509258","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/5a/7431e82e.jpg","comment_is_top":false,"comment_ctime":1578282261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578282261","product_id":100002201,"comment_content":"降级设计：解决资源不足和访问量过大的问题。有限的资源扛住大量的请求，就需要对系统进行降级处理。在降级处理的过程中，需要与以下内容做些折中：<br>1. 降低一致性：从强一致性变成最终一致性<br>2. 停止次要功能：停止访问不重要的功能<br>3. 简化功能：把一些简单功能去掉，简化业务流程<br><br>降级设计的要点<br>1. 业务的深度理解<br>2. 读操作，缓存解决；写操作，异步处理<br>3. 降级功能的开关是可配置开关<br>4. 后端服务可感知<br><br>感想：降级设计中，后端可感知，将是否降级加入到协议头中作为参数传输，这个必要性很重要，后端根据传递的参数进行预判。","like_count":0},{"had_liked":false,"id":113042,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1562891390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562891390","product_id":100002201,"comment_content":"服务降级有三种方式，降低一致性，减少非必要功能，简化功能。这就好比学习过程中一门课很难而又想要提高通过率，只能期待老师降低考试要求，或者自己抓稳那些必得分项，舍弃自己没把握的部分","like_count":0},{"had_liked":false,"id":65696,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1549594192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549594192","product_id":100002201,"comment_content":"很棒<br>我们系统的降级主要有两类，一类是因基础服务不可用的降级，比如：缓存集群不可用，另一类是其他依赖的服务不可用了，我们也会进行降级处理","like_count":0},{"had_liked":false,"id":4271,"user_name":"Sam_Deep_Thinking","can_delete":false,"product_type":"c1","uid":1001152,"ip_address":"","ucode":"8E4EF6F24B821B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/c0/bf880bda.jpg","comment_is_top":false,"comment_ctime":1521821690,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1521821690","product_id":100002201,"comment_content":"好文好文。。。","like_count":0}]}