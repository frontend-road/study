{"id":96883,"title":"32 | 热点问题答疑（三）","content":"<p>你好，我是戴铭。</p><p>这是我们《iOS开发高手课》专栏的第三期答疑文章，我将继续和你分享大家在学习前面文章时遇到的最普遍的问题。</p><p>今天，我在这段时间的留言问题中，挑选了几个iOS开发者普遍关注的问题，在这篇答疑文章里来做一个统一回复。</p><h2>A/B测试SDK</h2><p>@鼠辈同学在第24篇文章<a href=\"https://time.geekbang.org/column/article/93097\">《A/B测试：验证决策效果的利器》</a>留言中问道：</p><blockquote>\n<p>最近一直在找一个好的 A/B 测试的 SDK，不知道作者之前用过什么好的 A/B 测试的 SDK（三方的，可以后台控制的）</p>\n</blockquote><p>我认为带后台功能的 A/B 测试 SDK没什么必要，原因有二：</p><ol>\n<li>\n<p>A/B 测试本身就是为业务服务的，需要对会影响产品决策的业务场景做大量定制化开发；</p>\n</li>\n<li>\n<p>A/B 测试功能本身并不复杂，第三方后台定制化开发，成本也不会节省多少。</p>\n</li>\n</ol><p>因此，我推荐后台功能自己来做，端上使用我在第24篇文章中提到的 SkyLab 就完全没有问题了。另外，SkyLab 也可以很方便地集成到你自己的后台中。</p><h2>如何衡量性能监控的优劣？</h2><p>@ RiverLi 同学在第16篇文章<a href=\"https://time.geekbang.org/column/article/90546\">《</a><a href=\"https://time.geekbang.org/column/article/90546\">性能监控：衡量 App 质量的那把尺</a><a href=\"https://time.geekbang.org/column/article/90546\">》</a>的评论区留言问到：</p><blockquote>\n<p>对于性能的监控有没有衡量标准，如何衡量优劣？</p>\n</blockquote><p>我觉得，如果给所有 App 制定相同的衡量标准是不现实的，这样的标准，也是无法落地的。为什么这么说呢，很有可能由于历史原因或者 App的特性决定了有些App的性能无法达到另一个 App 的标准。又或者说，有些App需要进行大量的重构，才能要达到另一个 App 的性能标准，而这些重构明显不是一朝一夕就能落地执行的。特别是业务还在快跑的情况下，你只能够有针对性地去做优化，而不是大量的重构。</p><!-- [[[read_end]]] --><p>回到性能监控的初衷，它主要是希望通过监控手段去发现突发的性能问题，这也是我们再做线上性能监控时需要重点关注的。</p><p>对于 App 运行普遍存在的性能问题，我们应该在上线前就设法优化完成。因为，线下的性能问题是可控的，而线上的性能问题往往是“摸不着”的，也正是这个原因，我们需要监控线上性能问题。</p><p>因此，<strong>性能监控的标准一定是针对 App线下的性能表现来制定的</strong>。比如，你的App在线下连续3秒 CPU 占比都是在70%以下，那么 CPU 占比的监控值就可以设置为3秒内占比在70%以下。如果超过这个阈值就属于突发情况，就做报警处理，进行问题跟踪排查，然后有针对性地修复问题。</p><h2>关于WatchDog</h2><p>我在<a href=\"https://time.geekbang.org/column/article/89494\">第13篇文章</a>中讲解如何用RunLoop原理去监控卡顿的时候，用到了WatchDog机制。Xqqq0 同学在文后留言中，希望我解释一下这个机制，并推荐一些相关的学习资料。</p><p>WatchDog 是苹果公司设计的一种机制，主要是为了避免 App 界面无响应造成用户无法操作，而强杀掉 App 进程。造成 App 界面无响应的原因种类太多，于是苹果公司采用了一刀切的做法：凡是主线程卡死一定的时间就会被 WatchDog 机制强杀掉。这个卡死时间，WatchDog 在启动时设置的是 20秒，前台时设置的是10秒，后台时设置的是10分钟。</p><p>由于 WatchDog 强杀日志属于系统日志，所以你的 App 上线后需要自己来监控卡顿，这样才能够在 WatchDog 强杀之前捕获到 App 卡死的情况。关于这部分内容的详细讲解，你可以参看苹果公司关于<a href=\"https://developer.apple.com/library/archive/technotes/tn2151/_index.html\">崩溃分析</a>的文档。</p><h2>关于iOS崩溃</h2><p>在专栏的第12篇文章<a href=\"https://time.geekbang.org/column/article/88600\">《iOS 崩溃千奇百怪，如何全面监控？》</a>后，(Jet)黄仲平同学提了这么几个问题。考虑到这几个问题涉及知识点比较有代表性，所以我特意在今天这篇答疑文章中和你详细展开下。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/6e/48115cbd4fa6a59c96551858aa68876e.jpg?wh=1125*2962\" alt=\"\"></p><p>关于实现崩溃问题自动定位到人，我认为通过堆栈信息来匹配到人是没有问题的。关于实现方法的问题，也就是第一个问题，你可以先做个映射表，每个类都能够对应到一个负责人，当获取到崩溃堆栈信息时，根据映射表就能够快速定位到人了。</p><p>对于第二个问题关于日志的收集方法，我想说的是 PLCrashReporter 就是用handleSignalException 方法来收集的。</p><p>第三个关于 dSYM 解析堆栈信息工作原理的问题，也不是很复杂。dSYM 会根据线程中方法调用栈的指针，去符号表里找到这些指针所对应的符号信息进行解析，解析完之后就能够展示出可读的方法调用栈。</p><p>接下来，<strong>我来和你说说通过堆栈匹配到人的具体实现的问题。</strong></p><p><strong>第一步</strong>，通过 task_threads 获取当前所有的线程，遍历所有线程，通过 thread_info 获取各个线程的详细信息。</p><p><strong>第二步</strong>，遍历线程，每个线程都通过 thread_get_state 得到 machine context 里面函数调用栈的指针。</p><p>thread_get_state 获取函数调用栈指针的具体实现代码如下：</p><pre><code>_STRUCT_MCONTEXT machineContext; //线程栈里所有的栈指针\n// 通过 thread_get_state 获取完整的 machineContext 信息，包含 thread 状态信息\nmach_msg_type_number_t state_count = smThreadStateCountByCPU();\nkern_return_t kr = thread_get_state(thread, smThreadStateByCPU(), (thread_state_t)&amp;machineContext.__ss, &amp;state_count);\n</code></pre><p>获取到的这些函数调用栈，需要一个栈结构体来保存。</p><p><strong>第三步</strong>，创建栈结构体。创建后通过栈基地址指针获取到当前栈帧地址，然后往前查找函数调用帧地址，并将它们保存到创建的栈结构体中。具体代码如下：</p><pre><code>// 为通用回溯设计结构支持栈地址由小到大，地址里存储上个栈指针的地址\ntypedef struct SMStackFrame {\n    const struct SMStackFrame *const previous;\n    const uintptr_t return_address;\n} SMStackFrame;\n\nSMStackFrame stackFrame = {0};\n// 通过栈基址指针获取当前栈帧地址\nconst uintptr_t framePointer = smMachStackBasePointerByCPU(&amp;machineContext);\nif (framePointer == 0 || smMemCopySafely((void *)framePointer, &amp;stackFrame, sizeof(stackFrame)) != KERN_SUCCESS) {\n    return @&quot;Fail frame pointer&quot;;\n}\nfor (; i &lt; 32; i++) {\n    buffer[i] = stackFrame.return_address;\n    if (buffer[i] == 0 || stackFrame.previous == 0 || smMemCopySafely(stackFrame.previous, &amp;stackFrame, sizeof(stackFrame)) != KERN_SUCCESS) {\n        break;\n    }\n}\n</code></pre><p><strong>第四步</strong>，根据获取到的栈帧地址，找到对应的 image 的游标，从而能够获取 image 的更多信息。代码如下：</p><pre><code>// 初始化保存符号结果的结构体 Dl_info\ninfo-&gt;dli_fname = NULL;\ninfo-&gt;dli_fbase = NULL;\ninfo-&gt;dli_sname = NULL;\ninfo-&gt;dli_saddr = NULL;\n\n// 根据地址获取是哪个 image\nconst uint32_t idx = smDyldImageIndexFromAddress(address);\nif (idx == UINT_MAX) {\n    return false;\n}\n</code></pre><p><strong>第五步</strong>，在知道了是哪个 image 后，根据 Mach-O 文件的结构，要想获取符号表所在的 segment，需要先找到 Mach-O 里对应的 Header。通过 _dyld_get_image_header 方法，我们可以找到 mach_header 结构体。然后，使用 _dyld_get_image_vmaddr_slide 方法，我们就能够获取虚拟内存地址 slide 的数量。而动态链接器就是通过添加 slide 数量到 image 基地址，以实现将 image 映射到未占用地址的进程虚拟地址空间来加载 image 的。具体实现代码如下：</p><pre><code>/*\n Header\n ------------------\n Load commands\n Segment command 1 -------------|\n Segment command 2              |\n ------------------             |\n Data                           |\n Section 1 data |segment 1 &lt;----|\n Section 2 data |          &lt;----|\n Section 3 data |          &lt;----|\n Section 4 data |segment 2\n Section 5 data |\n ...            |\n Section n data |\n*/\n/*----------Mach Header---------*/\n// 根据 image 的序号获取 mach_header\nconst struct mach_header* machHeader = _dyld_get_image_header(idx);\n\n// 将 header 的名字和 machHeader 记录到 Dl_info 结构体里\ninfo-&gt;dli_fname = _dyld_get_image_name(idx);\ninfo-&gt;dli_fbase = (void*)machHeader;\n\n// 返回 image_index 索引的 image 的虚拟内存地址 slide 的数量\n// 动态链接器就是通过添加 slide 数量到 image 基地址，以实现将 image 映射到未占用地址的进程虚拟地址空间来加载 image 的。\nconst uintptr_t imageVMAddressSlide = (uintptr_t)_dyld_get_image_vmaddr_slide(idx);\n</code></pre><p><strong>第六步</strong>，计算 ASLR（地址空间布局随机化） 偏移量。</p><p>ASLR 是一种防范内存损坏漏洞被利用的计算机安全技术，想详细了解 ASLR的话，你可以参看<a href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\">它的 Wiki页面</a>。</p><p>通过 ASLR 偏移量可以获取 segment 的基地址，segment 定义 Mach-O 文件中的字节范围以及动态链接器加载应用程序时这些字节映射到虚拟内存中的地址和内存保护属性。 所以，segment 总是虚拟内存页对齐。</p><pre><code>/*-----------ASLR 偏移量---------*/\n// https://en.wikipedia.org/wiki/Address_space_layout_randomization\nconst uintptr_t addressWithSlide = address - imageVMAddressSlide;\n// 通过 ASLR 偏移量可以获取 segment 的基地址\n// segment 定义 Mach-O 文件中的字节范围以及动态链接器加载应用程序时这些字节映射到虚拟内存中的地址和内存保护属性。 所以，segment 总是虚拟内存页对齐。\nconst uintptr_t segmentBase = smSegmentBaseOfImageIndex(idx) + imageVMAddressSlide;\nif (segmentBase == 0) {\n    return false;\n}\n\n</code></pre><p><strong>第七步，</strong>遍历所有 segment，查找目标地址在哪个 segment 里。</p><p>除了 __TEXT segment 和 __DATA segment 外，还有 __LINKEDIT segment。__LINKEDIT segment 里包含了动态链接器使用的原始数据，比如符号、字符串、重定位表项。LC_SYMTAB 描述的是，__LINKEDIT segment 里查找的字符串在符号表的位置。有了符号表里字符串的位置，就能找到目标地址对应的字符串，从而完成函数调用栈地址的符号化。</p><p>这个过程的详细实现代码如下：</p><pre><code>/*--------------Mach Segment-------------*/\n// 地址最匹配的symbol\nconst nlistByCPU* bestMatch = NULL;\nuintptr_t bestDistance = ULONG_MAX;\nuintptr_t cmdPointer = smCmdFirstPointerFromMachHeader(machHeader);\nif (cmdPointer == 0) {\n    return false;\n}\n// 遍历每个 segment 判断目标地址是否落在该 segment 包含的范围里\nfor (uint32_t iCmd = 0; iCmd &lt; machHeader-&gt;ncmds; iCmd++) {\n    const struct load_command* loadCmd = (struct load_command*)cmdPointer;\n    /*----------目标 Image 的符号表----------*/\n    // Segment 除了 __TEXT 和 __DATA 外还有 __LINKEDIT segment，它里面包含动态链接器使用的原始数据，比如符号，字符串和重定位表项。\n    // LC_SYMTAB 描述了 __LINKEDIT segment 内查找字符串和符号表的位置\n    if (loadCmd-&gt;cmd == LC_SYMTAB) {\n        // 获取字符串和符号表的虚拟内存偏移量。\n        const struct symtab_command* symtabCmd = (struct symtab_command*)cmdPointer;\n        const nlistByCPU* symbolTable = (nlistByCPU*)(segmentBase + symtabCmd-&gt;symoff);\n        const uintptr_t stringTable = segmentBase + symtabCmd-&gt;stroff;\n        \n        for (uint32_t iSym = 0; iSym &lt; symtabCmd-&gt;nsyms; iSym++) {\n            // 如果 n_value 是0，symbol 指向外部对象\n            if (symbolTable[iSym].n_value != 0) {\n                // 给定的偏移量是文件偏移量，减去 __LINKEDIT segment 的文件偏移量获得字符串和符号表的虚拟内存偏移量\n                uintptr_t symbolBase = symbolTable[iSym].n_value;\n                uintptr_t currentDistance = addressWithSlide - symbolBase;\n                // 寻找最小的距离 bestDistance，因为 addressWithSlide 是某个方法的指令地址，要大于这个方法的入口。\n                // 离 addressWithSlide 越近的函数入口越匹配\n                if ((addressWithSlide &gt;= symbolBase) &amp;&amp; (currentDistance &lt;= bestDistance)) {\n                    bestMatch = symbolTable + iSym;\n                    bestDistance = currentDistance;\n                }\n            }\n        }\n        if (bestMatch != NULL) {\n            // 将虚拟内存偏移量添加到 __LINKEDIT segment 的虚拟内存地址可以提供字符串和符号表的内存 address。\n            info-&gt;dli_saddr = (void*)(bestMatch-&gt;n_value + imageVMAddressSlide);\n            info-&gt;dli_sname = (char*)((intptr_t)stringTable + (intptr_t)bestMatch-&gt;n_un.n_strx);\n            if (*info-&gt;dli_sname == '_') {\n                info-&gt;dli_sname++;\n            }\n            // 所有的 symbols 的已经被处理好了\n            if (info-&gt;dli_saddr == info-&gt;dli_fbase &amp;&amp; bestMatch-&gt;n_type == 3) {\n                info-&gt;dli_sname = NULL;\n            }\n            break;\n        }\n    }\n    cmdPointer += loadCmd-&gt;cmdsize;\n}\n</code></pre><h2>总结</h2><p>在今天这篇文章中，我针对一些比较有代表性、你大概率会遇到的留言问题做了解答。这其中，包括第三方库的选择、性能衡量标准，以及崩溃分析方面的问题。</p><p>最后，对于第三方库的使用，我的建议是：如果和业务强相关，比如埋点或者 A/B 测试这样的库，最好是自建，你可以借鉴开源库的思路；一些基础的、通用性强的库，比如网络库和持续化存储的库，直接使用成熟的第三方库，既可以节省开发和维护时间，还能够提高产品质量；还有种情况就是，如果你所在团队较小，只有几个 iOS 开发人员，那么还是要尽可能地使用开源项目，你可以在 <a href=\"https://github.com/vsouza/awesome-ios\">Awesome iOS</a>上去找到适合团队的项目。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":108798,"user_name":"Connorlu","can_delete":false,"product_type":"c1","uid":1584324,"ip_address":"","ucode":"5041F9DD2309D3","user_header":"https://static001.geekbang.org/account/avatar/00/18/2c/c4/fd9e5108.jpg","comment_is_top":false,"comment_ctime":1561884721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18741753905","product_id":100024501,"comment_content":"我认为Firebase 的 A&#47;B Testing 算是做的不错的一个第三方SDK。之所以说它不错，是因为它整合了数据上报，数据分析，PUSH消息和AI 预测等Firebase的其他功能。实现 A&#47;B Testing能力是非常简单的事情，主要是如何较低成本的实现对 A&#47;B Testing 的效果的数据统计和数据结论的展现，而Firebase在这一点上做的比较好。","like_count":5},{"had_liked":false,"id":97055,"user_name":"鼠辈","can_delete":false,"product_type":"c1","uid":1457947,"ip_address":"","ucode":"F8CD6602D9320E","user_header":"https://static001.geekbang.org/account/avatar/00/16/3f/1b/40293181.jpg","comment_is_top":false,"comment_ctime":1558578190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853545486","product_id":100024501,"comment_content":"学习了","like_count":1},{"had_liked":false,"id":97041,"user_name":"Geek_cc73f2","can_delete":false,"product_type":"c1","uid":1426946,"ip_address":"","ucode":"364AD3A7AFFCF5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aiaSrhS44dUCfpycicJ6UWANe3aEkdibMFOOX2oXRo0amNwYxQM1dCKZpzfMdy3Z2ibwSSPu6ibFxnTvuDGzKiaLIClA/132","comment_is_top":false,"comment_ctime":1558575633,"is_pvip":false,"replies":[{"id":"35005","content":"oom 系统会去抓，系统回留内存去采集。你要在 App 内抓的话，需要在临近 oom 之前去抓。","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1558845398,"ip_address":"","comment_id":97041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853542929","product_id":100024501,"comment_content":"老师好，我想问一下oom造成的crash能抓到吗，会不会那个时候没有内存空间让数据采集了呢？感谢","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451106,"discussion_content":"oom 系统会去抓，系统回留内存去采集。你要在 App 内抓的话，需要在临近 oom 之前去抓。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558845398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113864,"user_name":"提盏星灯逛人间","can_delete":false,"product_type":"c1","uid":1576358,"ip_address":"","ucode":"E99309FAA4AC88","user_header":"https://static001.geekbang.org/account/avatar/00/18/0d/a6/6895c4b9.jpg","comment_is_top":false,"comment_ctime":1563175076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563175076","product_id":100024501,"comment_content":" - -像我们这种只有1个半的。。真的是能用开源就用开源","like_count":0},{"had_liked":false,"id":97114,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1558591603,"is_pvip":false,"replies":[{"id":"35002","content":"六月","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1558842777,"ip_address":"","comment_id":97114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558591603","product_id":100024501,"comment_content":"原生与前端共舞什么时候开讲啊","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451143,"discussion_content":"六月","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558842777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}