{"id":175236,"title":"62 | 重新认识开闭原则 (OCP)","content":"<p>你好，我是七牛云许式伟。</p><p>架构的本质是业务的正交分解。</p><p>在上一讲 “<a href=\"https://time.geekbang.org/column/article/173619\">61 | 全局性功能的架构设计</a>” 中我们提到，架构分解中有两大难题：其一，需求的交织。不同需求混杂在一起，也就是存在所谓的全局性功能。其二，需求的易变。不同客户，不同场景下需求看起来很不一样，场景呈发散趋势。</p><p>我们可能经常会听到各种架构思维的原则或模式。但，为什么我们开始谈到架构思维了，也不是从那些耳熟能详的原则或模式谈起？</p><p>因为，万变不离其宗。</p><p>就架构的本质而言，我们核心要掌握的架构设计的工具其实就只有两个：</p><ul>\n<li>组合。用小业务组装出大业务，组装出越来越复杂的系统。</li>\n<li>如何应对变化（开闭原则）。</li>\n</ul><h2>开闭原则（OCP）</h2><p>今天我们就聊聊怎么应对需求的变化。</p><p>谈应对变化，就不能不提著名的 “开闭原则（Open Closed Principle，OCP）”。一般认为，最早提出开闭原则这一术语的是勃兰特·梅耶（Bertrand Meyer）。他在 1988 年在 《面向对象软件构造》 中首次提出了开闭原则。</p><p>什么是开闭原则（OCP）？</p><blockquote>\n<p>软件实体（模块，类，函数等）应该对于功能扩展是开放的，但对于修改是封闭的。</p>\n</blockquote><p>一个软件产品只要在其生命周期内，都会不断发生变化。变化是一个事实，所以我们需要让软件去适应变化。我们应该在设计时尽量适应这些变化，以提高项目的稳定性和灵活性，真正实现 “拥抱变化”。</p><!-- [[[read_end]]] --><p>开闭原则告诉我们，应尽量通过扩展软件实体的行为来应对变化，满足新的需求，而不是通过修改现有代码来完成变化，它是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。</p><p>为什么会有这样的架构设计原则？它背后体现的架构哲学是什么？</p><p>本质上，开闭原则的背后，是推崇模块业务的确定性。我们可以修改模块代码的缺陷（Bug），但不要去随意调整模块的业务范畴，增加功能或减少功能都并不鼓励。这意味着，它认为模块的业务变更是需要极其谨慎的，需要经得起推敲的。</p><p>我个人非常推崇 “开闭原则”。它背后隐含的架构哲学，和我说的 “架构的本质是业务的正交分解” 一脉相承。</p><p>与其修改模块的业务，不如实现一个新业务。只要业务的分解一直被正确执行的话，实现一个新的业务模块来完成新的业务范畴，是一件极其轻松的事情。从这个角度来说，开闭原则鼓励写 “只读” 的业务模块，一经设计就不可修改，如果要修改业务就直接废弃它，转而实现新的业务模块。</p><p>这种 “只读” 思想，大家可能很熟悉。比如基于 Git 的源代码版本管理、基于容器的服务治理都是通过 “只读” 设计来改善系统的治理难度。</p><p>对于架构设计来说同样如此。“只读” 的架构分解让我们逐步沉淀下越来越多可复用的业务模块。如此，我们不断坚持下去，随着时间沉淀，我们的组织就会变得很强大，组装复杂业务系统也将变得越来越简单。</p><p>所以开闭原则，是架构治理的根本哲学。</p><h2>CPU 背后的架构思维</h2><p>一种广泛的误解认为，开闭原则是一种 “面向对象编程（OOP）” 领域提出来的编程思想。但这种理解显然太过狭隘。虽然开闭原则的正式提出可能较晚，但是在信息科技的发展历程中，开闭原则思想的应用就太多了，它是信息技术架构的基本原则。注意我这里没有用 “软件架构” 而是用 “信息技术架构”，因为它并不只适用于软件设计的范畴。</p><p>我们在 “<a href=\"https://time.geekbang.org/column/article/91007\">02 | 大厦基石：无生有，有生万物</a>” 一讲介绍冯·诺依曼体系的规格时就讲过：</p><blockquote>\n<p>从需求分析角度来说，关键要抓住需求的稳定点和变化点。需求的稳定点，往往是系统的核心价值点；而需求的变化点，则往往需要相应去做开放性设计。</p>\n</blockquote><p>冯·诺依曼体系的中央处理器（CPU）的设计完美体现了 “开闭原则” 的架构思想。它表现在：</p><ul>\n<li>指令是稳定的，但指令序列是变化的，只有这样计算机才能够实现 “解决一切可以用 ‘计算’ 来解决的问题” 这个目标。</li>\n<li>计算是稳定的，但数据交换是多变的，只有这样才能够让计算机不必修改基础架构却可以适应不断发展变化的交互技术革命。</li>\n</ul><p>体会一下：我们怎么做到支持多变的指令序列的？我们由此发明了软件。我们怎么做到支持多变的输入输出设备的？我们定义了输入输出规范。</p><p>我们不必去修改 CPU，但是我们却支持了如此多姿多彩的信息世界。</p><p>多么优雅的设计。它与面向对象无关，完全是开闭原则带来的威力。</p><p>CPU 的优雅设计远不止于此。在 “<a href=\"https://time.geekbang.org/column/article/93802\">07 | 软件运行机制及内存管理</a>” 这一讲中，我们介绍了 CPU 对虚拟内存的支持。通过引入缺页中断，CPU 将自身与多变的外置存储设备，以及多变的文件系统格式进行了解耦。</p><p>中断机制，我们可以简单把它理解为 CPU 引入的回调函数。通过中断，CPU 把对计算机外设的演进能力交给了操作系统。这是开闭原则的鲜活案例。</p><h2>插件机制</h2><p>一些人对开闭原则的错误解读，认为开闭原则不鼓励修改软件的源代码来响应新需求。</p><p>这个说法当然有点极端化。开闭原则关注的焦点是模块，并不是最终形成的软件。模块应该坚持自己的业务不变，这是开闭原则所鼓励的。</p><p>当然软件也是一个业务系统，但对软件系统这个大模块来说，如果我们坚持它的业务范畴不变，就意味着我们放弃进步。</p><p>让软件的代码不变，但业务范畴却能够适应需求变化，有没有可能？</p><p>有这个可能性，这就是插件机制。</p><p>常规我们理解的插件，通常以动态库（dll/so）形式存在，这种插件机制是操作系统引入的，可以做到跨语言。当然部分语言，比如 Java，它有自己的插件机制，以 jar 包的形式存在。</p><p>在上一讲 “<a href=\"https://time.geekbang.org/column/article/173619\">61 | 全局性功能的架构设计</a>” 中我们提到，微软的大部分软件，以 Office 和 Visual Studio 为代表，都提供了二次开发能力。</p><p>这些二次开发接口构成了软件的插件机制，并最终让它成为一个生态型软件。</p><p>一般来说，提供插件机制的二次开发接口需要包含以下三个部分。</p><p>其一，软件自身能力的暴露，也就是我们经常说的 DOM API。插件以此来调用软件已经实现的功能，这是最基础的部分，我们这里不进一步展开。</p><p>其二，插件加载机制。通常，这基于文件系统，比如我们规定把所有插件放到某个目录下。在 Windows 平台下会多一个选择，把插件信息写到注册表。</p><p>其三，事件监听。这是关键，也是难点所在。没有事件，插件没有机会介入到业务中去。但是应该提供什么样的事件，提供多少个事件，这非常依赖架构能力。</p><p>原则来说，在提供的能力相同的情况下，事件当然越少越好。但是怎么做到少而精，这非常有讲究。一般来说，事件分以下三类：</p><p>其一，界面操作类。最原始的是鼠标和键盘操作，但它们太过于底层，提供出去会是双刃剑，一般对二次开发接口来说会选择不提供。更多的时候会选择暴露更高级的界面事件，比如菜单项或按钮的点击。</p><p>其二，数据变更类。在数据发生变化的时候，允许捕获它并做点什么。最为典型的是 onSelectionChanged 这个事件，基本上所有的软件二次开发接口都会提供。当然它属于界面数据变更，只能说是数据变更的特例。如果我们回忆一下 MVC 框架（参见 “<a href=\"https://time.geekbang.org/column/article/105356\">22 | 桌面程序的架构建议</a>”），就能够记得 Model 层会发出数据变更通知，也就是 onDataChanged 类的事件出来给 View 或 Controller。</p><p>其三，业务流程类。它通常发生在某个业务流的中间某个环节，或者业务流完成之后。比如对 Office 软件来说，打开文件之初或之后，都可能发出相应的事件，以便插件做些什么。</p><p>通过以上分析可以看出，完整的插件机制还是比较庞大的。但实际应用中插件机制未必要做得如此之重。</p><p>比如，Go语言中的 image 包，它提供的 Decode 和 DecodeConfig 等功能都支持插件，我们可以增加一种格式支持，而无需修改 image 包。</p><p>这里面最大的简化，是放弃了插件加载机制。我们自己手工来加载插件，比如：</p><pre><code>import &quot;image&quot;\nimport _ &quot;image/jpeg&quot;\nimport _ &quot;image/png&quot;\n</code></pre><p>这段代码为 image 包加载了两个插件，一个支持 jpeg，一个支持 png 格式。</p><p>如果大家仔细研究过我们实战案例 “画图程序” 的代码（参见 “<a href=\"https://time.geekbang.org/column/article/172004\">加餐 | 实战：画图程序的整体架构</a>”）就会发现，类似的插件机制的运用有很多。我们说的架构分解，把复杂系统分解为一个最小化的核心系统，加上多个相互正交的周边系统，它背后的机制往往就是我们这里提的插件机制。</p><p>插件机制的确让核心系统与周边系统耦合度大大降低。但插件机制并非没有成本。插件机制本身也是核心系统的一个功能，它本身也需要考虑与核心系统其他功能的耦合度。</p><p>如果某插件机制没有多少客户，也就是说，没有几个功能基于它开发，而它本身代码又散落在核心系统的各个角落，那么投入产出就显然不成比例。</p><p>所以维持足够的通用性，是提供插件机制的重大前提。</p><h2>单一职责原则</h2><p>到此为止，相信大家已经对开闭原则（OCP）非常了解了。总结来说就两点：</p><p>第一，模块的业务要稳定。模块的业务遵循 “只读” 设计，如果需要变化不如把它归档，放弃掉。这种模块业务只读的思想，是架构治理的基础哲学。</p><p>第二，模块的业务变化点，简单一点的，通过回调函数或者接口开放出去，交给其他的业务模块。复杂一点的，通过引入插件机制把系统分解为 “最小化的核心系统+多个彼此正交的周边系统”。事实上回调函数或者接口本质上就是一种事件监听机制，所以它是插件机制的特例。</p><p>平常，我们大家也经常会听到 “单一职责原则（Single Responsibility Principle，SRP）”，它强调的是每个模块只负责一个业务，而不是同时干多个业务。而开闭原则强调的是把模块业务的变化点抽离出来，包给其他的模块。它们谈的本质上是同一个问题的两个面。</p><h2>结语</h2><p>从来没有人这样去谈架构的本质，也没有人这样解读开闭原则（OCP），对吧？</p><p>其实对于这部 “架构课” 的革命性，我自己从没怀疑过。它的内容是精心设计的，为此我准备了十几年。我们用了四章内容来谈信息科技的需求与架构的演进，然后才进入正题。</p><p>用写文章的角度来说，这个伏笔的确够深的。</p><p>当然这不完全是伏笔。如果我们把整个信息科技看作最大的一个业务系统，我们有无数人在为之努力奋进，迭代它的架构。大家在竟合中形成自然的分工。学习信息科技的演进史，是学习架构的必要组成部分。我们一方面从中学习怎么做需求分析，另一方面也从中体悟做架构的思维哲学。</p><p>当然，还有最重要的一点是，我们要知道演进的结果，也就是信息科技最终形成的基础架构。</p><p>作为架构师，我们除了做业务架构，还有一个同等难度的大事，就是选择合适的基础架构。基础架构+业务架构，才是你设计的软件的全部。作为架构师，千万不要一叶障目，不见泰山，忘记基础架构选择的重要性。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “接口设计的准则”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"61 | 全局性功能的架构设计","id":173619},"right":{"article_title":"63 | 接口设计的准则","id":176852}},"comments":[{"had_liked":false,"id":159370,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575607805,"is_pvip":false,"replies":[{"id":"60931","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575623502,"ip_address":"","comment_id":159370,"utype":1}],"discussion_count":4,"race_medal":0,"score":"78885019133","product_id":100025201,"comment_content":"笔记：<br><br>将开闭原则上移到业务系统。业务对外只读，意味着不可变，但不变的业务生命周期是很短暂的，所以要可扩。要扩展还要不变，就倒逼着要做兼容，而兼容可能会导致现有的功能职责不单一，这又倒逼着要对现有的功能做再抽象，以适应更广的“单一职责”。<br><br>所以不改是不可能的，只是改的结果应当是让项目往更稳定去发展。然而这里面其实好难，无论是新的抽象的定义还是职责范围的扩张，这都需要有强大的分析能力和精湛的设计思维、重构手法、调优能力以及站在核心目标上的权衡来支撑。然而难亦是乐趣所在。","like_count":19,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477024,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575623502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1333649,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/91/fa2d8bb2.jpg","nickname":"不吃辣👾","note":"","ucode":"B25E0725B5E85F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584473,"discussion_content":"看哭了，心疼架构师一波","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660868823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159362,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKcwxhdFicBaGzYoicricVF7IbYXHyydKgsIx2WxFQtHvnQSGDeyIjeN7DNNtgvfMk7jujpC8UtOPT3Q/132","nickname":"kim","note":"","ucode":"D78CDF0E74369E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547678,"discussion_content":"笔记：\n\n一个模块也是不断迭代，不断演化出来的，当早期设计不满足新业务时，是否修改原有模块，要根据实际情况而定。要具体评估，如果修改原有模块对原有模块侵害不大风险可控，就优化原有模块设计，否则就开发一个新的模块来替换原有模块。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642818842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237327,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e1/4f/00476b4c.jpg","nickname":"Remember九离","note":"","ucode":"97EE6E6344689F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371008,"discussion_content":"这个回答绝了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619608088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159226,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1575583658,"is_pvip":false,"replies":[{"id":"60887","content":"作为架构师，要深刻认识到一点，光理解架构哲学不足以做好架构，它是让我们判断对与错的法则。要真正做好架构，需要做好业务需求分析，做好正交分解，做好模块边界定义。这些不断梳理清楚的“只读”的业务模块，是架构师真正的武器库。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575586638,"ip_address":"","comment_id":159226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74590027690","product_id":100025201,"comment_content":"  老师的课程中提及的两方面是我觉得自己理解的最不好的：一方面&quot;基础架构 + 业务架构，才是你设计的软件的全部&quot;，另一方面&quot;一方面从中学习怎么做需求分析，另一方面也从中体悟做架构的思维哲学&quot;。<br>      如同老师所说的&quot;架构课 的革命性，我自己从没怀疑过。它的内容是精心设计的，为此我准备了十几年&quot;,学习的过程中我其实同样在整体梳理自己作为DBA&amp;&amp;OPS十余年松散的知识体系。老师开课的这半年多不断的适度扩展梳理去破未知，完成了20余门功课的学习；除了画图部分的知识都是在不断的循环梳理。虽不断学习和梳理，但是依然觉得老师今天课程中提及的两方面其实是最难。如同前几天DevOps课程的石老师课程提出的Plan-Do-Check-Act时，我说这个顺序其实可以改变且石老师的回复中对此非常认可一样。这个认知其实是原来许老师课程的循环反复，梳理中悟出的东西。<br>      结合老师上堂课所提及&quot;任何功能都是可以正交分解的，即使我目前还没有找到方法，那也是因为我还没有透彻理解需求&quot;-可以理解为业务方面的。《全局性功能的架构设计》和《重新认识开闭原则》两章内容在强调今天课程结束老师的&quot;基础架构 + 业务架构，才是你设计的软件的全部&quot;。<br>      以上是个人结合这两节课的知识对于今天课程结束部分老师的理解：谢谢老师的分享和教诲。期待老师的下次分享。","like_count":18,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476989,"discussion_content":"作为架构师，要深刻认识到一点，光理解架构哲学不足以做好架构，它是让我们判断对与错的法则。要真正做好架构，需要做好业务需求分析，做好正交分解，做好模块边界定义。这些不断梳理清楚的“只读”的业务模块，是架构师真正的武器库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575586638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159228,"user_name":"梦醒十分","can_delete":false,"product_type":"c1","uid":1043585,"ip_address":"","ucode":"33830A5A73DDF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/81/2127e215.jpg","comment_is_top":false,"comment_ctime":1575585460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44525258420","product_id":100025201,"comment_content":"入木三分，好文章!","like_count":10},{"had_liked":false,"id":159374,"user_name":"K战神","can_delete":false,"product_type":"c1","uid":1139367,"ip_address":"","ucode":"527E6BB26BB766","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","comment_is_top":false,"comment_ctime":1575610033,"is_pvip":false,"replies":[{"id":"60932","content":"后面应该会出书","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575623524,"ip_address":"","comment_id":159374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35935348401","product_id":100025201,"comment_content":"许大，希望出书。买来收藏。<br><br>时不时枕边翻阅体会大佬的思想。<br><br>多年以后，庆幸自己这段时间跟着许大的专栏，有了新的想法和思想。","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477028,"discussion_content":"后面应该会出书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575623524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294528,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1621991314,"is_pvip":false,"replies":[{"id":"106880","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1622005960,"ip_address":"","comment_id":294528,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27391795090","product_id":100025201,"comment_content":"活字印刷术，也是开闭原则应用的一个例子。 字是稳定的，字的排序是变化的。","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520697,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622005960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159300,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1575596738,"is_pvip":false,"replies":[{"id":"60904","content":"不是代码只读，是业务范畴只读，接口尽可能只读（增加方法以兼容的方式进行）。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575603428,"ip_address":"","comment_id":159300,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23050433218","product_id":100025201,"comment_content":"如何理解“只读”模块？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477003,"discussion_content":"不是代码只读，是业务范畴只读，接口尽可能只读（增加方法以兼容的方式进行）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575603428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370813,"discussion_content":"增加方法算不算是组合方式解决一个大业务的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619536308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308434,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f7/12/009c12e9.jpg","nickname":"钱睿","note":"","ucode":"66AEB1583F648C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73889,"discussion_content":"不删不改，用不变的代码服务外界变化的需求，如果实在服务不了，那就重写一个新的，不改原来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575605686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73868,"discussion_content":"是否可以理解成，尽量不修改接口来更改或扩展功能，通过增加接口，或者增加现有接口的实现的方式来更新或扩展功能？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575603636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275497,"user_name":"mark","can_delete":false,"product_type":"c1","uid":1015720,"ip_address":"","ucode":"39EDFEA8010F9B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/a8/d103904b.jpg","comment_is_top":false,"comment_ctime":1611562614,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10201497206","product_id":100025201,"comment_content":"这个课程的特点就是，每次读都有新的体会，或许这就是传说中的经典。","like_count":2},{"had_liked":false,"id":235038,"user_name":"何磊","can_delete":false,"product_type":"c1","uid":1047604,"ip_address":"","ucode":"78934C3ED4A342","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/34/c733b116.jpg","comment_is_top":false,"comment_ctime":1594875272,"is_pvip":false,"replies":[{"id":"86802","content":"修改业务（需求）和改bug是完全不同的。修改bug不属于开闭原则的思考范畴。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1594906091,"ip_address":"","comment_id":235038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10184809864","product_id":100025201,"comment_content":"老师对于开闭原则，我也在思考这里的开、闭到底是针对什么的。<br>首先对于bug坑定是需要修复的；那么如文中提到的，对于需求的变化引起需要修改利用插件机制。但是实际的业务中，可能很多是需要在原有代码中增加一个if判断、或者类型转化、或者额外的数据处理。<br><br>针对这些问题，肯定不可避免要去对源代码产生修改。这里很难去控制什么时候可以改，什么时候该用插件","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501588,"discussion_content":"修改业务（需求）和改bug是完全不同的。修改bug不属于开闭原则的思考范畴。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594906091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193466,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1584896319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174830911","product_id":100025201,"comment_content":"开闭原则：设计良好的系统应该是易于拓展，同时是抗拒修改的。<br>系统设计的好坏，开闭原则有最直接的关系。如果一个新的需求的实现，要大肆改动以前的代码，说明这个系统极其 “不稳定”，也是不符开闭原则的。<br><br>我们在设计实现一个需求时，我们首先要做的是，理解需求。要对不同的需求进行业务分组（代码分组），每组负责一个独立的业务逻辑，也就是 SRP。然后在处理这些分组之间的依赖关系。<br><br>“具体到代码就是将不同的操作（业务）划分不同的类，再将这些类分割为不同的组件” —— 《架构整洁之道》<br><br>在此在这里推荐这本书，许老在专栏的核心思想其实与这本书讲到的都一样。想成为一位好架构师，这本书我觉得必看。","like_count":2},{"had_liked":false,"id":327934,"user_name":"另存为……","can_delete":false,"product_type":"c1","uid":1190180,"ip_address":"","ucode":"A71212B04CD618","user_header":"https://static001.geekbang.org/account/avatar/00/12/29/24/60772229.jpg","comment_is_top":false,"comment_ctime":1640399698,"is_pvip":true,"replies":[{"id":"119439","content":"挺好的思考👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1640502013,"ip_address":"","comment_id":327934,"utype":1}],"discussion_count":0,"race_medal":0,"score":"5935366994","product_id":100025201,"comment_content":"老师，最近在了解区块链相关的知识，感悟到了一些开闭原则上的应用，跟您探讨下：<br>比特币旨在构建新一代的数字货币，而以太坊的目标则是要成为新一代点对点的分布式计算基础服务（终极目标是成为 web3.0 的标准），基于此发展除了智能合约，所谓“智能合约”，实际就是可编程的合约，跟我们普遍理解的“智能”没啥关系，那既然是程序，必定会涉及到升级或修复，业务数据存储结构变更，而区块链的特性决定了“变更”是一项成本极其高昂甚至几乎无法完成，我们称之为不可篡改特性，因此现在做dapp涉及一般设计为数据合约和程序逻辑合约组合，做到程序和数据分离（由此也可以看出对比中心化的程序还是相当原始和初级的），这样在程序更新的时候直接弃用旧的合约地址，改用新合约，数据也不用迁移，但是当我们的需求需要持续更新合约的时候，如果能懂得运用开闭原则，这件事情会优雅很多，因为无论是 以太坊的 ERC20 还是 ERC721 标准等等，都规定了相当有限且简单的接口标准，这就是架构的不可变部分，我们不能把所有的逻辑都堆在这个我们针对于接口的实现上，而应该采用组合的方式，通过合理的架构设计，多个合约组合出强大的功能，我看了几条最新的\b以太坊社区提案，一些针对于 NFTs 的提案，比如 ERC-998，旨在让多个 NFT 组合的新 NFT 具备不可拆解的特性，使新的NFT可以整体交易，这会极大的简化物品转移的处理，其实都是可以遵循开闭原则通过良好合理的设计组合合约来实现，没必要升级为最基础的接口标准，当然这也会带来 gas 成本的增加，因为运行在区块链上的程序是需要支付 gas 费用的，所以币安推出  bsc 币安智能链的原因之一，降低 gas 费用。","like_count":2},{"had_liked":false,"id":182765,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1582861830,"is_pvip":false,"replies":[{"id":"70699","content":"是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1582872798,"ip_address":"","comment_id":182765,"utype":1}],"discussion_count":1,"race_medal":4,"score":"5877829126","product_id":100025201,"comment_content":"需求稳定点与变化点，正交分解，开闭原则，我理解内在本质是一脉相承的。这种架构看看作一种生命体，在基础构造上是稳定的，但又具备足够的柔性和灵活性。在业务变化时能够灵活适应，同时又不会散发臭味。有了这种特质，这种架构才可以说是有生命力的。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485441,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582872798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160818,"user_name":"K战神","can_delete":false,"product_type":"c1","uid":1139367,"ip_address":"","ucode":"527E6BB26BB766","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","comment_is_top":false,"comment_ctime":1576039301,"is_pvip":false,"replies":[{"id":"61337","content":"这方面代码管理有很多成熟的实践了，版本管理上","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1576042011,"ip_address":"","comment_id":160818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871006597","product_id":100025201,"comment_content":"许大，我们真的要考虑，将老的需求放入版本库。对于新的重新实现一个新的。<br><br>会不会最后系统会有很多名字类似业务有所区别的接口？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477489,"discussion_content":"这方面代码管理有很多成熟的实践了，版本管理上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576042011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160563,"user_name":"ljf10000","can_delete":false,"product_type":"c1","uid":1494064,"ip_address":"","ucode":"44957329A61EAE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQ5wib49kcMPqCTRT1aThh6mMAVl6qseLwbVOLhicVLjZCxCoyQd5CrrHHibs2CVPaoK3g/132","comment_is_top":false,"comment_ctime":1575975298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870942594","product_id":100025201,"comment_content":"感觉开闭原则跟自底向上设计很相似，都是先构建稳定的底层模块&#47;机制，再一层层组合出来。","like_count":1},{"had_liked":false,"id":160454,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1575953525,"is_pvip":false,"replies":[{"id":"61236","content":"我认为不是不修改，是不改变业务范畴，不轻易改变改变模块的使用界面","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575956500,"ip_address":"","comment_id":160454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870920821","product_id":100025201,"comment_content":"        在业务正交分解的过程中必然会遇到以前分解好的模块需要调整的情况，比如说随着新模块的加入发现和老模块的部分实现有重复的情况。这种情况下是保持新老模块的重复部分呢还是抽取出共同的部分作为更基础的支撑模块呢？如果要抽取共同的模块必然会涉及老模块的修改，这种情况是否有违反了开闭原则呢？更进一步开闭原则和重构的关系应该如何处理？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477379,"discussion_content":"我认为不是不修改，是不改变业务范畴，不轻易改变改变模块的使用界面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575956500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159822,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1575801171,"is_pvip":false,"replies":[{"id":"61046","content":"业务系统都是相通的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575846568,"ip_address":"","comment_id":159822,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870768467","product_id":100025201,"comment_content":"本课感受最深的一句话：<br><br>“第二，模块的业务变化点，简单一点的，通过回调函数或者接口开放出去，交给其他的业务模块。复杂一点的，通过引入插件机制把系统分解为 “最小化的核心系统 + 多个彼此正交的周边系统”。事实上回调函数或者接口本质上就是一种事件监听机制，所以它是插件机制的特例。”<br><br>由业务到数据，由核心到周边，再把这个过程映射到开闭选择，再把开放性具体到插件与接口，下节课讲接口。老师这三节课真是步步深入啊。:<br><br>偷懒得说，要是画图代码在通用一些就好了","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477185,"discussion_content":"业务系统都是相通的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575846568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159317,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1575598313,"is_pvip":false,"replies":[{"id":"60908","content":"需求洞察本来就是架构的难点","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575603583,"ip_address":"","comment_id":159317,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870565609","product_id":100025201,"comment_content":"这么一想，微服务其实也是单一职责原则的实现。像普通业务的话，不清晰以后的方向，可能现在是工具类，后来又搞商城类，侧重点变化可能无法一下子就确定那些是稳定点，做着做着又是一大坨，哪里不行搞哪里，这种怎么解？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477009,"discussion_content":"需求洞察本来就是架构的难点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575603583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159284,"user_name":"沫沫（美丽人生）","can_delete":false,"product_type":"c1","uid":1051023,"ip_address":"","ucode":"FC73BF0D79E3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","comment_is_top":false,"comment_ctime":1575595022,"is_pvip":false,"replies":[{"id":"60906","content":"Model 层","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575603505,"ip_address":"","comment_id":159284,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5870562318","product_id":100025201,"comment_content":"许老师好，很感谢您上次关于PaSS问题的回复，读您的文章让我受益匪浅。还想请教一个问题，像Salesforce是基于元数据来构建系统的，元数据在信息架构里属于什么范畴呢，可以展开来讲一讲吗？盼复。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477001,"discussion_content":"Model 层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575603505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76695,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575847122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051023,"avatar":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","nickname":"沫沫（美丽人生）","note":"","ucode":"FC73BF0D79E3FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74690,"discussion_content":"醍醐灌顶的感觉！反推的话，正常的程序有一个静态的Model层，Salesforce一定是基于动态的Model层来实现的 ，进一步推论，动态的Model层的管理（新增、修改、删除、展现）应该是元数据引擎的核心 ，可以这么理解吗许老师？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575666394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346916,"user_name":"swchen","can_delete":false,"product_type":"c1","uid":3013234,"ip_address":"","ucode":"307D320F0DED02","user_header":"https://static001.geekbang.org/account/avatar/00/2d/fa/72/ffb60db2.jpg","comment_is_top":false,"comment_ctime":1653536520,"is_pvip":false,"replies":[{"id":"126539","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1653666029,"ip_address":"","comment_id":346916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653536520","product_id":100025201,"comment_content":"对于程序员而言，三种思维最为基础: <br>1.DRY (Don’t Repeat Yourself) 。<br>   这是好程序员的根本追求，永久的驱动力。<br>2.分而治之。<br>   这是人类解决复杂问题的普遍方式。<br>3.开闭原则。<br>   这是应对变化(主动的变化如功能扩展，被动的变化如故障修复)的最佳手段。<br><br>其他各种原则&#47;方法&#47;模式&#47;最佳实践，全部都是以此三者为基础，结合具体领域&#47;场景&#47;时代的更具操作性的推论。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573830,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653666029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346624,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":2559716,"ip_address":"","ucode":"2140DAC07B8B10","user_header":"https://static001.geekbang.org/account/avatar/00/27/0e/e4/7444469a.jpg","comment_is_top":false,"comment_ctime":1653296757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653296757","product_id":100025201,"comment_content":"水平太高了，没有足够实践很难全部消化。可惜没有机会现场听课","like_count":0},{"had_liked":false,"id":346233,"user_name":"Geek_adf1c9","can_delete":false,"product_type":"c1","uid":1507142,"ip_address":"","ucode":"29B7BC958470A0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjXbIia8iavTicWJib3xteYYkx6yeeLVr5HV1ibiay0QoIuaf74NvCCL1Z7ZnLYTpTh29AdsNAJkZfgFwA/132","comment_is_top":false,"comment_ctime":1652934144,"is_pvip":false,"replies":[{"id":"126351","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1653002062,"ip_address":"","comment_id":346233,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652934144","product_id":100025201,"comment_content":"开闭的核心还是明确“变与不变”，这很难，需要大量的需求分析","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572830,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653002063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292369,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1620797624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620797624","product_id":100025201,"comment_content":"台上一分钟，台下十年功。感谢许总的分享！","like_count":0},{"had_liked":false,"id":285337,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1616746453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616746453","product_id":100025201,"comment_content":"开开眼界","like_count":0},{"had_liked":false,"id":265421,"user_name":"风含叶","can_delete":false,"product_type":"c1","uid":1162800,"ip_address":"","ucode":"7AE8D3963343AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/30/1154657e.jpg","comment_is_top":false,"comment_ctime":1606893853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606893853","product_id":100025201,"comment_content":"牛逼，发现了新大陆，从一个非常高的维度去理解问题。","like_count":0},{"had_liked":false,"id":253763,"user_name":"王根福","can_delete":false,"product_type":"c1","uid":1779321,"ip_address":"","ucode":"CFEF2B041A52ED","user_header":"https://static001.geekbang.org/account/avatar/00/1b/26/79/815237cd.jpg","comment_is_top":false,"comment_ctime":1602861967,"is_pvip":false,"replies":[{"id":"92860","content":"多谢反馈。可以通过例子中的链接回顾前面的内容。后面我们看看怎么改一下。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1603149597,"ip_address":"","comment_id":253763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602861967","product_id":100025201,"comment_content":"cpu的架构距离不够清晰呀，论述不够充分，个人意见","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507171,"discussion_content":"多谢反馈。可以通过例子中的链接回顾前面的内容。后面我们看看怎么改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603149597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218937,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1197514,"ip_address":"","ucode":"7ABB5FB47A428B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ywV5EjGPovkbcj9zRmibTKBQjAvCFrKVYMmGfDwGfcz6dmq6Sia1AlHvSX8ydibu2xueLuSen1YVDZSKNib1UTJBsQ/132","comment_is_top":false,"comment_ctime":1589901058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589901058","product_id":100025201,"comment_content":"文章见功底","like_count":0},{"had_liked":false,"id":202235,"user_name":"有米","can_delete":false,"product_type":"c1","uid":1005042,"ip_address":"","ucode":"C9A10B7A67BC12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","comment_is_top":false,"comment_ctime":1585928519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585928519","product_id":100025201,"comment_content":"设计原则是内功心法，无论练什么招式都要谨记于心","like_count":0},{"had_liked":false,"id":180317,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1582255857,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582255857","product_id":100025201,"comment_content":"这几节课都把我从单纯的写代码思维里拉出来，拉到架构的层次来看问题，而且“正交分解”深入我心，我感觉我写的不是代码，是艺术。<br><br>要做好这个艺术品，需要的东西太多了","like_count":0},{"had_liked":false,"id":161583,"user_name":"轶名","can_delete":false,"product_type":"c1","uid":1188071,"ip_address":"","ucode":"01C991C60FF9CC","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/e7/9f082f47.jpg","comment_is_top":false,"comment_ctime":1576239269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576239269","product_id":100025201,"comment_content":"功力深厚啊","like_count":0},{"had_liked":false,"id":159512,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1575642814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575642814","product_id":100025201,"comment_content":"没有基本功，是很难读懂许老师的深层含义打，只能用苦功，下巧劲","like_count":0},{"had_liked":false,"id":159488,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1575635509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575635509","product_id":100025201,"comment_content":"醍醐灌顶，再多的语言也无法表达，最好的架构课","like_count":0},{"had_liked":false,"id":159362,"user_name":"nanquanmama","can_delete":false,"product_type":"c1","uid":1023100,"ip_address":"","ucode":"799C2E0F841FB0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7c/408c2a0b.jpg","comment_is_top":false,"comment_ctime":1575606426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575606426","product_id":100025201,"comment_content":"值回票价","like_count":0},{"had_liked":false,"id":159270,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1575593699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575593699","product_id":100025201,"comment_content":"基础架构 + 业务架构，才是你设计的软件的全部。作为架构师，千万不要一叶障目，不见泰山，忘记基础架构选择的重要性。    基础架构是地基","like_count":0},{"had_liked":false,"id":159246,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1575591770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575591770","product_id":100025201,"comment_content":"笔记   ocp 是根基，lsv原则用于保障ocp。  srp  让实现lsv 更简单，就一个引起变更职责代码不容易腐化。  这样出来的代码正交性更好，更容易组合。","like_count":0},{"had_liked":false,"id":159237,"user_name":":)","can_delete":false,"product_type":"c1","uid":1239198,"ip_address":"","ucode":"23D505949442B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/9e/6550a051.jpg","comment_is_top":false,"comment_ctime":1575590368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575590368","product_id":100025201,"comment_content":"通过老师的文章的一些思考。<br>1. 事情变得复杂往往有两个方面的原因。1.联系耦合过多 2.变化过多<br>2. 架构的目的就是让事情变得，简单，清晰。<br>3. 应对耦合过多，可以使用单一原则。<br>4. 应对变化过多，可以用开闭原则，而其中的&quot;只读&quot;，让自己有种醍醐灌顶的感觉。","like_count":0}]}