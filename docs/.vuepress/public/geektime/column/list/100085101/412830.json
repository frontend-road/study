{"id":412830,"title":"12 | 实战：将 ToDo 应用扩展为一个 REST 服务","content":"<p>你好，我是郑晔！</p><p>经过了基础篇的介绍，相信你已经对在日常开发中测试应该做到什么程度有了一个初步的认识。有了基础固然好，但对于很多人来说，面对常见的场景还是不知道如何下手。在接下来的应用篇中，我们就用一些开发中常见的场景，给你具体介绍一下怎么样把我们学到的知识应用起来。</p><p>在后端开发中，最常见的一种情况就是开发一个 REST 服务，将数据写到数据库里面，也就是传说中的 CRUD 操作。这一讲，我们就把前面已经写好的 <a href=\"https://time.geekbang.org/column/article/404301\">ToDo 应用</a>扩展一下，让它变成一个 REST 服务。</p><h2>扩展前的准备</h2><p>具体动手写任何代码之前，我们先要搞清楚我们要把这个应用改造成什么样子。把 ToDo 应用扩展为一个 REST 服务也就是说，原来本地的操作现在要以 REST 服务的方式提供了。另外，在这次改造里面，我们还会把原来基于文件的 Repository 改写成基于数据库的 Repository，这样，就和大多数人在实际的项目中遇到的情况是类似的了。</p><p>有人可能会想，既然是 REST 服务，那是不是要考虑多用户之类的场景。你可以暂时把它理解成一个本地运行的服务（也就是说只有你一个人在使用），所以我们可以不考虑多用户的情况。这样做可以让我们把注意力更多放在测试本身上，而增加更多的能力是需求实现的事情，你可以在后面拿这个项目练手时，做更多的尝试。</p><!-- [[[read_end]]] --><p>确定好了需求目标，接下来，我们就要进入到具体的实现过程里面了。RESTful API 不同于命令行应用，不应该把它的代码同命令行的代码混杂在一起，所以，我们可以建一个单独的模块来放置这些代码，我把这个模块叫 todo-api。至于具体采用的技术栈，我们就使用在 Java 社区最常用的 Spring Boot，Spring Boot 能够极大简化了 REST 服务的开发。</p><p>同之前一样，我们先实现 Repository 的部分，然后再来做接口。或许你会有一个疑问，难道不是要实现业务核心部分吗？别忘了，我们在<strong>之前的实现中特意将业务核心部分隔离了出来，让它不依赖于任何具体的外部实现。</strong>虽然我们是将一个命令行应用改成一个 RESTful API，但业务核心部分并没有发生任何改变，所以，我们也不需要重新编写一份。这就是软件设计的价值所在。</p><h2>数据访问</h2><p>前面说过，我们要把之前基于文件版本的 Repository 实现改成基于数据库的版本，所以我们要先来确定数据访问相关的技术。我选择 MySQL 这个大家最常用的数据库，访问数据库的程序库我选择的是 Spring Data JPA，因为它可以让我尽可能少编写代码。</p><h3>技术选型</h3><p>两种常见的访问数据库的方式分别是 MyBatis 和 JPA。MyBatis 倾向于让人手工编写 SQL 语句，而 JPA 则采用更加面向对象的角度，它访问数据库的 SQL 语句常常是由框架生成的。二者的差异主要是 MyBatis 更加面向具体的实现，而 JPA 则提供了更好的抽象能力。</p><p>目前国内的现状是很多团队会使用 MyBatis，他们给出的理由大多是自己写 SQL 比较好控制，尤其是对一些复杂场景来说更容易优化。不过，实际情况往往是，如果采用 JPA 的话，很多团队对于生成什么样的代码自己完全心里没有数，因为欠缺建模能力才用 MyBatis。而对于很多建模做得比较好的团队来说，使用 JPA  往往开发效率更高。</p><p>Spring Data JPA 在 JPA 上提供了进一步的封装，一些常见的数据访问甚至不需要去编写代码，因为访问数据库的 SQL 都是由框架生成的，是一个标准操作。因为不是我们编写的代码，我们也无需验证它的正确性，只要保证我们自己写的代码正确地表达了我们的意图即可。如果真的有一些比较复杂的 SQL 逻辑要实现，Spring Data JPA 也允许我们自己手写 SQL，这是框架留给我们的优化手段。</p><p>所以，我们这里选择 Spring Data JPA。下面我们就来开始我们的实现之旅。</p><h3>数据库迁移</h3><p>在开始编码测试工作之前，我们要先确定 Todo 项存储的结构。所以，我们要在数据库中创建一个表。</p><pre><code>CREATE TABLE todo_items (\n    `id` int auto_increment,\n    `content` varchar(255) not null,\n    `done` tinyint not null default 0,\n    primary key (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n</code></pre><p>我们已经在实战中看见过实体的样子了，所以，这里的表结构并不难理解。唯一需要稍微解释一下的就是在表里面我们用了 id，而在 Todo 项的实体中，它对应的是 index。其实，只要你稍微仔细地想一下就不难发现，在我们之前的设计中，index 就是起到了 id 的作用。对应的实体就是下面这样：</p><pre><code>@Entity\n@Table(name = &quot;todo_items&quot;)\npublic class TodoItem {\n  @Id\n  @Column(name = &quot;id&quot;)\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private long index;\n  \n  @Column\n  private String content;\n  \n  @Column\n  private boolean done;\n  ...\n}\n</code></pre><p>在项目自动化中，数据库迁移脚本我们采用了 <a href=\"https://flywaydb.org/\">Flyway</a>，它可以很方便地将数据库的变更管理起来。我们只要在 $rootDir/gradle/config/migration 这个位置创建一个迁移脚本，把上面的 SQL 写进去就好，具体的细节你可以参考我们的开源项目。</p><p>有了迁移脚本，我们就可以执行命令将这个表创建出来。</p><pre><code>./gradlew flywayMigrate\n</code></pre><p>好，基础已经准备好了，我们准备要动手写测试了。</p><h3>编写测试</h3><p>我在上一讲说过，测试数据库相关的内容属于兼具集成测试和单元测试两种属性的测试，一方面，它要对数据库做集成，另一方面，它要测的内容本身属于验证一个单元代码是否编写正确的范畴。对于数据库相关的测试，Spring 提供了很好的支持，让我们可以更好地完成验证工作。</p><p>下面就是一个测试。如果你还记得之前文件版本 Repository 的测试，这个测试你可能会很眼熟。没错，这里的测试我几乎就是原封不动地把前面的测试搬了过来，因为 Repository 接口的行为几乎是一致的。这也是我这里并没有做测试场景分析的原因。</p><pre><code>@ExtendWith(SpringExtension.class)\n@DataJpaTest\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@TestPropertySource(&quot;classpath:test.properties&quot;)\npublic class TodoItemRepositoryTest {\n    @Autowired\n    private TodoItemRepository repository;\n    \n    @Test\n    public void should_find_nothing_for_empty_repository() {\n        final Iterable&lt;TodoItem&gt; items = repository.findAll();\n        assertThat(items).hasSize(0);\n    }\n    ...\n}\n</code></pre><p>看到 @Autowired，如果你熟悉 Spring 应该感到非常亲切，它表示这个字段由框架自动绑定的。那这个自动绑定为什么能起作用呢？这就要拜前面几个 Annotation 所赐了。</p><p>@ExtendWith(SpringExtension.class)，在这里面，@ExtendWith 是 JUnit 5 提供的扩展机制，让第三方有机会编写自己的代码。而 SpringExtension 就是 Spring 提供的扩展，用来做一些 Spring 自己需要的准备和清理之类的工作，比如依赖注入就是通过它完成的。</p><p>@DataJpaTest，表示这个测试采用 Spring Data JPA。有了这个 Annotation，Spring 框架会替我们把 Repository 的实例生成出来。因为使用 Spring Data JPA 的时候，我们只编写了接口。还记得 TodoItemRepository 这个接口吗？现在它变成了下面这个样子。</p><pre><code>public interface TodoItemRepository extends Repository&lt;TodoItem, Long&gt; {\n    TodoItem save(TodoItem item);\n\n    Iterable&lt;TodoItem&gt; findAll();\n}\n</code></pre><p>同之前相比，这里的方法没用任何变化，只是扩展了一个接口 Repository，这是一个标记接口，也就是意味着只有接口，没有方法。实现这个接口是 Spring Data JPA 的要求，它会在运行时为这个接口生成相应的实例，换言之，我们不需要为此编写具体的实现。</p><p>其实，Spring Data JPA的函数名是有一些约定的，在前面给 Repository 的函数命名的时候，我就是参考了 Spring Data JPA 的命名规则，所以，我们在这里可以无缝地与 Spring Data JPA 对接在一起。</p><p>按照 Spring Data JPA 的要求，我们要让 Spring 在启动的时候能够找到我们配置的实体和 Repository。因为我们这里的实体和 Repository 不在缺省的扫描路径上，所以这里需要单独配置一下。下面就是我们的配置，这是一个典型的 Spring Boot 的应用。</p><pre><code>@SpringBootApplication\n@EnableJpaRepositories({&quot;com.github.dreamhead.todo.core&quot;})\n@EntityScan({&quot;com.github.dreamhead.todo.core&quot;})\npublic class Bootstrap {\n  ...\n}\n</code></pre><p>万事俱备，我们现在可以运行测试了，如果一切顺利的话，测试会一次性运行通过。</p><p>这里其实有个实现的细节，测试并没有在数据库留下任何痕迹，正如我们在讲集成测试中说过的那样，这里的测试在运行之后回滚了在测试过程中插入的数据，这是 DataJpaTest 的缺省行为，大大简化了测试的难度。</p><p>你会发现，其实我们并没有写多少有逻辑的代码：表是 SQL 语句生成的，测试是从前面的测试搬过来的，主要的工作都是配置，而数据库访问的过程是框架生成的。减少自己编码的工作量，我们的测试压力也就小了很多。</p><h2>RESTful API</h2><p>有了 Repository，接下来，我们就要来设计实现 API 接口了。对于一个服务而言，对外提供哪些接口是很重要的。任何一个提供后端服务的团队都要仔细地设计其服务接口，确定它应该提供哪些能力，而不仅仅是围绕着前端需求去做。</p><h3>设计 RESTful API</h3><p>还记得我们的 ToDo 应用提供了哪些能力吗？我们回顾一下：</p><ul>\n<li>添加一个 Todo 项；</li>\n<li>完成一个 Todo 项；</li>\n<li>Todo 项列表。</li>\n</ul><p>接下来，我们就把它们设计成 API 接口。所有这三个能力都是围绕着 Todo 项进行的，所以，我们可以把它们设计在一个资源下，不妨就把它的 URI 设计成 /todo-items，一般来说，这里一般会使用复数，表示这有一堆资源。</p><p>有了最基础的资源，接下来，就是一个一个地按照 RESTful API 的方式设计出来。<strong>首先是添加一个 Todo 项。</strong>按照通常 RESTful API 接口的设计方式，相当于在服务端创建了一个新的资源，而创建的语义一般会用 POST 请求表示。创建一个 Todo 项，主要包含的就是 Todo 项的内容，其格式我们就采用 RESTful API 常用的 JSON 格式了。</p><pre><code>POST /todo-items\n\n{\n  &quot;content&quot;: &quot;foo&quot;\n}\n</code></pre><p><strong>有了创建 Todo 项的服务，接下来就是完成一个 Todo 项了。</strong>完成一个 Todo 项，按照 RESTful API 的设计方式，这个动作相当于对已有资源的修改，修改对应的 HTTP 动词是 PUT。不同于 POST，PUT 操作需要指定一个具体的资源，我们这里使用索引作为唯一标识，其对应的内容就是完成字段（done）置为 true。目前来说，我们也不支持其它的处理，所以严格地说，这里的内容其实意义不大。</p><pre><code>PUT /todo-items/{index}\n\n{\n  done: true\n}\n</code></pre><p><strong>最后是一个 Todo 项列表。</strong>列表操作实际上是一种查询，在 RESTful API 设计中，查询对应的 HTTP 动词是 GET。在我们的实战需求中，Todo 项列表还分为查询未完成的 Todo 项和查询所有，从查询的角度来看，就是查询的参数不同。我们这里设置查询参数为 all，缺省情况下  all 的值为 false，如果显示设置了这个值，则按照设置的值进行查询。</p><pre><code>GET /todo-items?all=true\n</code></pre><h3>测试 RESTful API</h3><p>做好了基本的设计工作，接下来我们就该进入代码编写的环节了。</p><p>同 Repository 部分一样，我们在这个部分的测试也准备从之前的测试中借鉴过来。所以，我们这里不把重点放在测试场景的分析上，而是来讨论如何编写测试。下面就是一个测试。</p><pre><code>@SpringBootTest\n@AutoConfigureMockMvc\n@Transactional\npublic class TodoItemResourceTest {\n    @Autowired\n    private MockMvc mockMvc;\n    @Autowired\n    private TodoItemRepository repository;\n    \n    ...\n    \n.    \n    @Test\n    public void should_add_item() throws Exception {\n        String todoItem = &quot;{ &quot; +\n                &quot;\\&quot;content\\&quot;: \\&quot;foo\\&quot;&quot; +\n                &quot;}&quot;;\n        mockMvc.perform(MockMvcRequestBuilders.post(&quot;/todo-items&quot;)\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(todoItem))\n                .andExpect(status().isCreated());\n        assertThat(repository.findAll()).anyMatch(item -&gt; item.getContent().equals(&quot;foo&quot;));\n    }\n    \n    ...\n}\n</code></pre><p>从测试的名字便不难看出，这个测试是用来测试添加 Todo 项的。在这个类的开头有几个 Annotation：</p><ul>\n<li>@SpringBootTest，它告诉我们，接下来的测试是把所有组件都集成起来的集成测试。在前面的实战中，我说过最外面的接口很薄，所以我把集成测试和单元测试的工作量放到了一起。</li>\n<li>@AutoConfigureMockMvc，表示我们要使用的是模拟的网络环境，也就不是真实的网络环境，这样做可以让访问速度快一些。</li>\n<li>@Transactional，说明这个测试是事务性的，在缺省的测试事务中，执行完测试之后，数据是要回滚，也就是不对数据库造成实际的影响。这要单独标记，否则就会有数据写入到数据库里面。而之前的 @DataJpaTest 自身就包含了这个 Annotation，所以不用特别声明。</li>\n</ul><p>有了这些基础准备，我们就可以测试了。你可以认为，当我们执行测试时服务已经起好了，我们这里就像一个普通的客户端一样去访问一个服务，核心的部分就是下面这段代码。</p><pre><code>todoItem = &quot;{ &quot; +\n               &quot;\\&quot;content\\&quot;: \\&quot;foo\\&quot;&quot; +\n           &quot;}&quot;;\nmockMvc.perform(MockMvcRequestBuilders.post(&quot;/todo-items&quot;)\n                   .contentType(MediaType.APPLICATION_JSON)\n                   .content(todoItem))\n       .andExpect(status().isCreated());\n</code></pre><p>我们创建了一个请求，设置了这个请求的基本信息，用什么样的 HTTP 动词（POST） 访问哪个地址（/todo-items），具体的内容是什么等等。然后，预期返回的参数是什么（状态码是 201，也就是 CREATED）。</p><p>这里我们用的是 MockMVC，因为我们配置了@AutoConfigureMockMvc，它给我们创建了一个模拟的网络环境。这就是 Spring 在测试方面做得好的地方，作为框架的使用者，我们面对的都是编程的接口，支撑这些接口的实现在正常情况下是标准的网络环境，但 Spring 为我们提供了测试专用的实现，也就是不同的运行时，这就是做好了软件设计的结果。</p><p>不同于直接调用接口进行单元测试，这里的测试是集成测试，走的是完整的路径。所以，我们可以测试一些属于外部接口的行为，比如我们可以测试传入空的字符串该怎么办。</p><pre><code>@Test\npublic void should_fail_to_add_unknown_request() throws Exception {\n    String todoItem = &quot;&quot;;\n\n    mockMvc.perform(MockMvcRequestBuilders.post(&quot;/todo-items&quot;)\n                    .contentType(MediaType.APPLICATION_JSON)\n                    .content(todoItem))\n            .andExpect(status().is4xxClientError());\n}\n</code></pre><h3>编写 RESTful API</h3><p>有了测试，接下来就是实现相应的代码了。</p><pre><code>@RestController\n@RequestMapping(&quot;/todo-items&quot;)\npublic class TodoItemResource {\n    private TodoItemService service;\n\n    @Autowired\n    public TodoItemResource(final TodoItemService service) {\n        this.service = service;\n    }\n\n    @PostMapping\n    public ResponseEntity addTodoItem(@RequestBody final AddTodoItemRequest request) {\n        if (Strings.isNullOrEmpty(request.getContent())) {\n            return ResponseEntity.badRequest().build();\n        }\n\n        final TodoParameter parameter = TodoParameter.of(request.getContent());\n        final TodoItem todoItem = this.service.addTodoItem(parameter);\n\n        final URI uri = ServletUriComponentsBuilder\n                .fromCurrentRequest()\n                .path(&quot;/{id}&quot;)\n                .buildAndExpand(todoItem.getIndex())\n                .toUri();\n        return ResponseEntity.created(uri).build();\n    }\n    ...\n}`\n</code></pre><p>如果你熟悉 Spring Boot 的话，这段代码对你来说应该不难。即便你不熟悉，仅仅是通过阅读代码，也很容易理解这段代码的含义：</p><ul>\n<li>@RestController，告诉 Spring 这是一个 REST 服务的入口类。这个类的命名是 TodoItemResource，因为在 REST 服务中，资源是一个很重要的概念，而这里的 Controller，可以说是从历史遗留的产物。</li>\n<li>@RequestMapping(“/todo-items”)，说明服务入口的地址是 /todo-items，这是这个类里所有服务的根。</li>\n<li>每个具体的方法都会有自己相应的配置，对应着一个具体的服务，比如，在 addTodoItem 中是  @PostMapping，表示这个方法接收的是 POST 请求。</li>\n</ul><p>POST 服务一般都会有一个请求体，在这个方法中，我们使用 AddTodoItemRequest 的实例来接收这个请求体。在 HTTP 传输过程中传输的是文本，Spring 框架会替我们将文本转换成一个对象。只要我们把转换规则声明出来，Spring Boot 采用的 JSON 处理框架是 Jackson，所以，我们要在类的声明时采用 Jackson 的规则，就像下面这样。</p><pre><code>public class AddTodoItemRequest {\n    @Getter\n    private String content;\n\n    @JsonCreator\n    public AddTodoItemRequest(@JsonProperty(&quot;content&quot;) final String content) {\n        this.content = content;\n    }\n}\n</code></pre><p>在这里，@JsonCreator 表示这是一个 JSON 对象的构造方法，而@JsonProperty 则表示将对应属性的值赋值给这里的参数。</p><p>从软件设计的角度说，Resource 是一个防腐层，AddTodoItemRequest 是一个外部请求对象。把外部对象和内部对象分开，这是很重要的（我在《代码之丑》中<a href=\"https://time.geekbang.org/column/article/336166\">分析过这种做法</a>的原因）。所以，在具体的函数中，我们首先要做就是把外部对象转换成内部对象。</p><pre><code>final TodoParameter parameter = TodoParameter.of(request.getContent());\n</code></pre><p>好，到这里，我们把这段代码中主要的设计考量都已经分析过了。这段代码完整的实现，你可以参考我们的开源项目。</p><h2>总结时刻</h2><p>这一讲，我们将原本的 ToDo 应用从一个命令行应用扩展为一个 REST 服务。因为我们已经构建好了业务核心，所以这里的工作同之前是一样的：要增加一个 Repository，要编写服务的入口。</p><p>在增加 Repository 方面，我们选择了 Spring Data JPA，目的是减少代码的编写。然后我们增加了相应的数据库迁移脚本，这里采用 Flyway 管理数据库迁移的工作。</p><p>因为选择了 Spring Data JPA，我们在测试里用@DataJpaTest，它会帮我们设置好 Repository，也会帮我们在测试运行之后回滚数据。</p><p>对外的接口我们采用 RESTful API 的设计。这里我们同样采用了集成测试代替单元测试的做法，集成测试是靠@SpringBootTest 把各种组件都集成起来。这里我们还用到了 MockMVC  让我们的测试不依赖于真实的环境，访问速度可以稍微快一点点。</p><p>接口层本身是一个典型的防腐层，所以一般来说这层会做得非常薄，会把外部请求与业务层分隔开来。</p><p>如果今天的内容你只能记住一句话，那么请记住，<strong>集成测试回滚数据，保证测试的可重复性。</strong></p><h2>思考题</h2><p>今天我们用 Spring 的基础设施演示了如何进行测试。你使用过 Spring 吗？有哪些测试特性让你印象深刻的？或者你用哪个框架给你提供了很好地测试支持呢？欢迎在留言区分享你的经验。</p>","comments":[{"had_liked":false,"id":312420,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1631792345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10221726937","product_id":100085101,"comment_content":"本节是一个实例验证把一个应用扩展为 REST 服务（自查下具体的意思）。<br><br>因为是基于 Java 语言的，所以里面提到很多 Java 的工具，这部分不会，所以不是特别懂，但是大概意思是知道的，几个关键点：<br><br>1、接口服务要遵循 RESTful 规范（统一规范对测试来说也意义重大）；<br><br>2、接口如果涉及对数据的操作，测试完之后尽量要进行清场操作，避免垃圾数据残留（数据构造也是测试的一大难点）；<br><br>3、本次演示还是遵循接口测试的原则，不涉及接口实现的覆盖；","like_count":2},{"had_liked":false,"id":309628,"user_name":"闻人","can_delete":false,"product_type":"c1","uid":1102584,"ip_address":"","ucode":"E4970C0D944243","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/f8/d5006178.jpg","comment_is_top":false,"comment_ctime":1630283832,"is_pvip":true,"replies":[{"id":"112175","content":"简单地说，业务核心的代码不应该依赖于外部的请求，所以，外部请求对象不应该直接传到业务核心里面。<br><br>如果你想看更多的解释，可以去阅读《代码之丑》的第 11 讲。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630333260,"ip_address":"","comment_id":309628,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10220218424","product_id":100085101,"comment_content":"文中外部对象转为内部对象的实现有必要放到单独的类里吗，减少两个对象的依赖","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525937,"discussion_content":"简单地说，业务核心的代码不应该依赖于外部的请求，所以，外部请求对象不应该直接传到业务核心里面。\n\n如果你想看更多的解释，可以去阅读《代码之丑》的第 11 讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630333260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391121,"discussion_content":"有，看样子你维护别人的项目比较少吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630305080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348278,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654928469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949895765","product_id":100085101,"comment_content":"集成测试回滚数据，保证测试的可重复性。--记下来<br>Springboot很方便","like_count":1},{"had_liked":false,"id":311232,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1631113646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926080942","product_id":100085101,"comment_content":"...而不仅仅是围绕着前端需求去做... 期待老师推出API设计课","like_count":1},{"had_liked":false,"id":311129,"user_name":"chon","can_delete":false,"product_type":"c1","uid":1068925,"ip_address":"","ucode":"1C32170972F726","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7d/dd852b04.jpg","comment_is_top":false,"comment_ctime":1631081884,"is_pvip":true,"replies":[{"id":"112757","content":"没有 dubbo 的东西，因为 dubbo 只是一个特定的程序库，不具备普遍适用的特点。<br><br>关于如何处理特定的程序库，在 11、12 和 14 讲已经讨论了很多，简言之，就是把它从业务中隔离出去，把它作为一个集成点。如果能有 Mock 的方案就用 Mock 的方案，不能的话，可以放到系统测试里面去测。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631099992,"ip_address":"","comment_id":311129,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926049180","product_id":100085101,"comment_content":"集成restful的例子写的挺好的，如何处理dubbo的呢？后续章节能否给个完整的例子？谢谢","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526483,"discussion_content":"没有 dubbo 的东西，因为 dubbo 只是一个特定的程序库，不具备普遍适用的特点。\n\n关于如何处理特定的程序库，在 11、12 和 14 讲已经讨论了很多，简言之，就是把它从业务中隔离出去，把它作为一个集成点。如果能有 Mock 的方案就用 Mock 的方案，不能的话，可以放到系统测试里面去测。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631099992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310254,"user_name":"不二先生","can_delete":false,"product_type":"c1","uid":1359635,"ip_address":"","ucode":"60D9800369CC33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELEVMHiad4wERgib6x90kI81JZhzIvQeXMju6WohePAlfjWD3gHibapVNX88G4R29Ujcbiap1Bfz0Efmg/132","comment_is_top":false,"comment_ctime":1630570175,"is_pvip":true,"replies":[{"id":"112427","content":"MockMVC只是网络环境，与数据库无关，是否连接数据库是我们自己的事，可以连，也可以不连，在第14讲，我们可以看到具体怎么做。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630620144,"ip_address":"","comment_id":310254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925537471","product_id":100085101,"comment_content":"郑老师，你好：<br>有一个问题想请教下。<br>MockMVC 创建的模拟网络环境可以连接到数据库？这个数据库是本地的吗？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526173,"discussion_content":"MockMVC只是网络环境，与数据库无关，是否连接数据库是我们自己的事，可以连，也可以不连，在第14讲，我们可以看到具体怎么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630620144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309971,"user_name":"Fredo","can_delete":false,"product_type":"c1","uid":1438470,"ip_address":"","ucode":"681D6692617DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","comment_is_top":false,"comment_ctime":1630420381,"is_pvip":false,"replies":[{"id":"112302","content":"需要你在本地的MySQL中创建数据库，这是第14讲的内容。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630451158,"ip_address":"","comment_id":309971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925387677","product_id":100085101,"comment_content":"老师你好 ，更新了一下ToDo项目 build无法通过了，task migrateToDev 这里是不还有漏了啥没上传的","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526078,"discussion_content":"需要你在本地的MySQL中创建数据库，这是第14讲的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630451158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309831,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1630367983,"is_pvip":false,"replies":[{"id":"112444","content":"1. 不算，它俩校验参数是分别针对自己的目标。这就像你不应该担心第三方程序库里所做的校验一样。api里的代码处理的就是与Spring接口的部分，放到Request里面会造成过多的代码与这些框架产生耦合。<br>2. 可以，我这里因为它简单，就直接写了。<br>3. 你可以看看第14讲","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630632224,"ip_address":"","comment_id":309831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925335279","product_id":100085101,"comment_content":"有几个问题请教下老师：<br>1, 参数校验的逻辑在core层也有，算不算重复？现在写在的api里，能否移动到request的构造函数里面判断，然后抛出全局异常再返回BadRequest？实际业务一个add有好几个字段要check，写起来api的函数就好长了<br>2，测试接口的时候，构造request的使用的字符串json，为什么不用new对象再用工具toJsonString，手打json字符串容易出错<br>3，测试的数据库用了mysql的一个test库，不用h2是基于什么考虑呢","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526034,"discussion_content":"1. 不算，它俩校验参数是分别针对自己的目标。这就像你不应该担心第三方程序库里所做的校验一样。api里的代码处理的就是与Spring接口的部分，放到Request里面会造成过多的代码与这些框架产生耦合。\n2. 可以，我这里因为它简单，就直接写了。\n3. 你可以看看第14讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630632224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359977,"user_name":"无道win","can_delete":false,"product_type":"c1","uid":1461075,"ip_address":"上海","ucode":"0C026BB03A53EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/4b/53/f797f031.jpg","comment_is_top":false,"comment_ctime":1666094564,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666094564","product_id":100085101,"comment_content":"如果数据库使用的mybatias有没有类似 @DataJpaTest的注解？","like_count":0},{"had_liked":false,"id":346362,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1295533,"ip_address":"","ucode":"5DA3CD38CDA439","user_header":"https://static001.geekbang.org/account/avatar/00/13/c4/ad/79b8a12c.jpg","comment_is_top":false,"comment_ctime":1653045913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653045913","product_id":100085101,"comment_content":"mockmvc全流程测试，特别耗时的问题该从哪些方面优化，提高测试速度，特别是环境构建速度。","like_count":0},{"had_liked":false,"id":341689,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1649769851,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649769851","product_id":100085101,"comment_content":"老师，如果单元测试需要依赖spring容器的运行时环境才能支撑，那如果后续我开发一个项目但是并没有用到问题提到的那些部分，应该如何处理？我认为单元测试应该不依赖任何组件的，直接可以运行。","like_count":0},{"had_liked":false,"id":340185,"user_name":"Geek_a8ce05","can_delete":false,"product_type":"c1","uid":2956682,"ip_address":"","ucode":"C1D4002C48568F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rvQxUmekECjyZu1RwbUguBWpBcQuKywQPtiaxNVFJSib07QMZnNUr8MnRF3RYEsn6MhgGFJibwlrVomibEicYMiaia7ZQ/132","comment_is_top":false,"comment_ctime":1648647368,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1648647368","product_id":100085101,"comment_content":"原来是面向java的测试课，php溜了溜了","like_count":0,"discussions":[{"author":{"id":1049147,"avatar":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","nickname":"ONLY","note":"","ucode":"180990E586D060","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571117,"discussion_content":"PHP写法跟Java不是很像么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652077505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335608,"user_name":"邵光泽","can_delete":false,"product_type":"c1","uid":1985537,"ip_address":"","ucode":"45088A0F5DF384","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","comment_is_top":false,"comment_ctime":1645602665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645602665","product_id":100085101,"comment_content":"great!<br>","like_count":0}]}