{"id":172492,"title":"07丨编程语言原理：面向对象编程是编程的终极形态吗？","content":"<p>软件架构师必须站在一个很高的高度去审视自己软件的架构，去理解自己的工作在更宏大的背景中的位置和作用，才能构建出一个经得起时间考验的软件系统。这个高度既包括技术的高度和深度，也包括对软件编程这件事认知的程度，比如对软件编程的历史和未来的理解，以及对自己工作的价值和使命感的理解。</p><p>计算机软件编程是个非常新兴的行业，程序员这一职业的出现不过半个多世纪，但是人类从事软件编程的探索却要久远得多，在计算机出现之前，甚至蒸汽机出现之前，人类就开始探索软件编程了。</p><p>最早开始编程探索的人是德国人莱布尼兹，早在1700年代，莱布尼兹就期望将各种事物都通过一种逻辑语言进行描述，然后用一种可执行演算规则的机器进行计算，就可以计算出事物的各种结果。这种思想其实和我们现代的软件编程与计算机已经差不多了，莱布尼兹为了实现这个想法，进行了大量的工作，获得了丰硕的成果，其中就包括了微积分和<strong>二进制</strong>。</p><p>但是人不能超越自己的时代，莱布尼兹制造可编程计算机的梦想并没有成功。又过了100年，法国人雅卡尔发明了一台可编程的织布机，这种织布机通过读取纸带上的打孔，进而控制织布机织出不同的图案。于是人们开始尝将<strong>打孔纸带</strong>用于计算机编程，19世纪中叶，当英国人<strong>Ada</strong>利用打孔纸带写出人类第一个软件程序的时候，距能够运行这个程序的计算机的发明还有100年的时间，而这个程序已经包含了<strong>循环和子程序</strong>。Ada因此被认为是人类第一个<strong>程序员</strong>，准确的说，是<strong>程序媛</strong>。科技发明受时代的限制，天才们的想象力和聪明才智却可以超越时代。</p><!-- [[[read_end]]] --><p>人类发明制造计算机器有非常悠久的历史，但是这些计算机器都是专门进行数值计算的，加减乘除、微分积分等等。而从莱布尼兹、Ada，到图灵、冯诺依曼，这些现代计算机的开创者们试图创造的是一种通用的计算机，这种计算机不是读取数值进行计算，而是读取<strong>数据</strong>进行计算，这些数据本身包含着计算的逻辑，这个数据就是<strong>程序</strong>。当冯诺依曼在ENIAC计算机上输入第一个程序的时候，标志着现代计算机的诞生，也意味着软件编程这一新兴的行业即将出现。信息时代、互联网时代接踵而至，人类开启了有史以来最大的一次科技革命。</p><p>现在我们编程已经习惯打开IDE，编写程序代码然后编译执行或者解释执行，认为编程就该如此。觉得那些不需要IDE，只需要写字板或者Vim就可以编程的人就是大牛了。事实上，最早的计算机编程非常麻烦，程序员需要将电线编来编去，输入数据，以控制计算机的执行，这也是<strong>编程</strong>这个词的由来。不过很快人们就将打孔纸带应用到计算机上，编程的效率极大提升。</p><p>接近我们现在理解的软件编程要追溯到1949年，随着第一台可存储程序的计算机的发明而出现，程序员终于可以<strong>写代码</strong>了。这个阶段的程序要需要牢记<strong>计算机指令</strong>的二进制编码，软件开发就是直接使用这些二进制指令进行编程，每个计算机指令后面要带<strong>操作数</strong>，操作数也是二进制编码，所有这些二进制就是程序的代码，由程序员输入到计算机中。</p><p>现在的程序员们光是听听早期软件编程这一番神操作怕是就崩溃了，早期的程序员也意识到这一点，宝贵的时间不应该浪费在记忆计算机指令的二进制编码上，于是他们发明了<strong>汇编语言</strong>。和使用机器指令二进制编码唯一的不同就是，汇编语言提供了机器指令助记符，编程的时候，机器指令二进制可以用助记符代替。但是软件编程依然需要使用计算机指令，一个指令一个指令进行编程。因此，机器指令二进制编程和汇编语言编程本质上都是<strong>面向机器的编程</strong>。汇编语言程序如下，这已经是PC时代的汇编语言程序了，早期计算机的汇编程序要更加古老。</p><pre><code>2000: BMI $2009      ;若结果为负数,那么转地址2009\n2002: BEQ $200C      ;若 = 0,转 地址200C\n2004: CLC            ;这里说明 &gt; 0\n2005: ADC #$01\n2007: TAY\n2008: RTS\n2009: LDY #$01\n200B: RTS\n200C: LDY #$00\n200E: RTS\n</code></pre><p>在计算机出现的早期，即使对程序员而言，计算机也是一个神奇的存在，同一台计算机，可以进行科学计算，也可以进行弹道轨迹计算，还可以进行财务核算计算。计算机强大、神奇且昂贵，程序员匍匐在计算机的脚下，使用计算机的指令进行编程，面向机器编程。但是随着计算机技术的不断发展和计算机的普及，程序员们逐渐意识到，计算机本身呆板而机械，真正强大、无所不能的是软件程序。程序员为了更高效地进行编程，应该采用一种对程序员更加友好的编程方式，一种更接近人类语言的编程语言，于是各种各样的高级编程语言出现了。</p><p>最早的高级编程语言是Fortran，这是一种专门用于科学计算的高级语言，诞生于1957年。但是真正主流的、被广泛使用的各种高级语言则诞生于1970年前后，其中就包括<strong>C语言</strong>，传说丹尼斯·里奇发明了C语言，然后为了验证C语言的特性，开发了一个Demo，就是<strong>Unix操作系统</strong>。</p><p>那个年代美国正陷于越战的泥潭，大量的美国青年魂断东南亚的丛林，更多的美国青年则在国内聚集起来，集会、示威、游行，他们要独立、自由、和平，他们有的人背着吉他，从一个城市流浪到另一个城市，而另一些人则坐在计算机终端前面，摆脱了对计算机指令的束缚，使用高级编程语言进行软件编程，用另一种方式表达独立和自由。这些高级语言使用人类语言作为编程指令，if…else…，while…break…，for…goto…，这些语句更符合<strong>人类的习惯和逻辑思维方式</strong>，由于这些语言关注逻辑处理过程，所以也被称作<strong>面向过程的编程语言</strong>。事实上，这些语言的本质是面向人的，因此这一时期爆发的各种编程语言本质上说是<strong>面向人的编程语言，准确的说，是面向程序员的编程语言</strong>。Basic编程语言示例：</p><pre><code>INPUT &quot;What is your name: &quot;, UserName$\nPRINT &quot;Hello &quot;; UserName$\nDO\n  INPUT &quot;How many stars do you want: &quot;, NumStars\n  Stars$ = STRING$(NumStars, &quot;*&quot;)\n  PRINT Stars$\n  DO\n    INPUT &quot;Do you want more stars? &quot;, Answer$\n  LOOP UNTIL Answer$ &lt;&gt; &quot;&quot;\n  Answer$ = LEFT$(Answer$, 1)\nLOOP WHILE UCASE$(Answer$) = &quot;Y&quot;\nPRINT &quot;Goodbye &quot;; UserName$\n</code></pre><p>高级编程语言的普及极大地释放了程序员的自主性，软件开发迎来黄金时期，程序员的第一个极客时代到来，比尔·盖茨、乔布斯都是在那个时代成长起来的。但是人的欲望是没有止境的，人能做到的越多，想得到的也就越多，越来越庞大的软件开发计划被不断地提了出来。</p><p>但是面向过程的复杂性随着软件规模的膨胀以更快的速度膨胀。面向过程的软件关注逻辑流程，更容易被设计成面条式程序，长长的过程调用执行，像一根面条。而大型项目最后由这样一根一根面条组成，就成了一个毛线团，最后谁也理不清了。于是很多大型软件的开发过程开始失控，最终以失败告终，人们遇到了<strong>软件危机</strong>。</p><p>软件危机使人们开始重新审视软件编程这件事情的本质，除了一部分科学计算或者其他特定目的的软件，大部分的软件是为了解决现实世界的问题，企业的库存管理、银行的账务处理等等。所以，<strong>软件编程的本质是程序员用代码的方式使现实世界的事务运行在计算机上，计算机软件是为了解决现实世界的问题而开发出来的，那么软件编程这件事情应该关注的重点是客观世界的事物本身，而不是程序员的思维方式或者计算机的指令</strong>。</p><p>如果软件编程的重点是客观世界的事物本身，那么编程语言如何才能更好地满足这一需求？于是，<strong>面向对象的编程语言</strong>应运而生。面向对象编程以对象作为软件编程的基本单位，提出<strong>一切皆对象</strong>，客观世界的用户、账号、商品是对象；创建、组合、关联这些对象的工厂、适配器、观察者也是对象；将所有这些对象分析、设计、开发出来，一个软件系统就完成了，这个软件系统灵活、强大，最重要的是可以根据需求变化快速更新维护。Java对象代码示例：</p><pre><code>public class User {\n    private String name;\n    private Integer id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n}\n</code></pre><p>我们回顾一下现代编程技术的发展，发现大体经过面向机器编程，面向程序员编程，面向对象编程三个阶段，这正好对应马克思经济学关于劳动力的三个要素：劳动工具-计算机、劳动者-程序员、劳动对象-客观对象。编程从面向劳动工具进化到面向劳动者，再进化到面向对劳动对象。</p><p>面向对象编程似乎已经进化到编程这件事情哲学意义上的终点，是编程语言的终极形态。现实看起来也确实如此，最近三十年诞生的编程语言几乎全部都是面向对象的编程语言，面向对象一统天下。</p><p>但事实真的如此吗？回望历史我们站在上帝视角，一切都是如此清晰充满条理，凝望未来，我们还能如此笃定吗？</p><p>情况也许并非如此。事实上，现实中的面向对象编程几乎从未实现人们期望中的面向对象编程。上面举的Java的User对象示例就是典型，这是一个我们经常见到，却又非常不面向对象的对象。这个对象只有属性，没有行为，现实中的User对象显然不是这样。也许有部分企业和部分程序员做到了真正的面向对象编程，但是绝大多数程序员并没有做到，面向对象编程普及几十年了，如果大多数程序员依然做不到真正意义的面向对象编程，是程序员的问题还是编程语言的问题？</p><p>另一方面，一些新出现的面向对象编程语言对对象的态度似乎也有点暧昧，对象的边界和封装性开始模糊。go语言代码示例如下，这里NokiaPhone和iPhone都实现了Phone接口，但是并不是显式的。</p><pre><code>type Phone interface {\n    call()\n}\ntype NokiaPhone struct {\n}\nfunc (nokiaPhone NokiaPhone) call() {\n    fmt.Println(&quot;I am Nokia, I can call you!&quot;)\n}\ntype IPhone struct {\n}\nfunc (iPhone IPhone) call() {\n    fmt.Println(&quot;I am iPhone, I can call you!&quot;)\n}\n</code></pre><p>而随着科技的不断发展，特别是大数据，人工智能以及移动互联网的发展，<strong>面向数据</strong>的编程需求越来越多，能够更好迎合这一需求的编程模型开始得到青睐，比如<strong>函数式编程</strong>。而极客型的程序员对强类型的面向对象编程越来越不感冒，他们希望在编程的时候能够得到更多的自由，编程语言的重心似乎重新出现面向程序员的趋势。</p><p>随着计算机性能的不断增强，以及互联网应用对计算资源需求的不断增加，如何更好地利用CPU的多核以及分布式集群的多服务器特性，必须是软件编程以及架构设计时需要考虑的重要问题，软件编程越来越多需要考虑机器本身，相对应的，<strong>反应式编程</strong>得到越来越多的关注。</p><p>辩证唯物主义告诉我们，事物发展轨迹是波浪式前进，螺旋式上升，有的时候似乎重新回到过去，但是却有了本质的区别和进步。软件编程的进化史还在继续，你是否对未来充满期待和信心？</p><h2>小结</h2><p>今天我们回顾了编程技术的发展，通过这样的脉络梳理，你能更清楚目前面对对象编程的来源，更好地利用这一技术。如何利用面向对象编程的特性，进行真正的面向对象编程，而不是仅仅利用面向对象编程语言进行编程，我将在第16篇讲解。</p><h2>思考题</h2><p>不同的编程语言在不同的应用场景中，各有自己的优势和劣势，你觉得哪些编程语言更适合用在哪些地方，适合处理哪些问题？</p><p>欢迎在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步一下。</p>","neighbors":{"left":{"article_title":"06丨数据库原理：为什么PrepareStatement性能更好更安全？","id":172000},"right":{"article_title":"答疑丨Java Web程序的运行时环境到底是怎样的？","id":174252}},"comments":[{"had_liked":false,"id":157819,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1575265139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"100359512947","product_id":100040201,"comment_content":"老师的文章写得好啊，通过历史看现在，真的是妙。","like_count":23},{"had_liked":false,"id":193625,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1584935934,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83189314558","product_id":100040201,"comment_content":"go天生的并发优势很适用于高并发网络通信应用的场景。<br>java的可维护性强，而且性能也很好，适合迭代多、业务变化快的大型web应用开发。<br>c&#47;c++接近底层，适合图像处理、音视频解码等对性能有要求的场景。<br>至于shell&#47;python等，更适合用于批处理工具、脚本开发等。","like_count":20},{"had_liked":false,"id":174896,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1580451688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40235157352","product_id":100040201,"comment_content":"一些简单的任务，代码量比较少的可以采用shell，python这样的动态语言，<br>企业级开发，对软件质量有较高要求的需要采用更加规范的静态语言 java<br>对软件性能有很高要求的需要采用更加贴近计算机底层的编程语言c&#47;c++","like_count":9},{"had_liked":false,"id":157635,"user_name":"Geek_e06c0f","can_delete":false,"product_type":"c1","uid":1710442,"ip_address":"","ucode":"10F404156994C3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xvVUmyoMmtbLsanMKicSDPIrqCJibQiatRRzbg8w7ueERhJaTt6ic3qEtsMicyzAE6rOjzFA6BfAsaXwdD7RG6qYh6A/132","comment_is_top":false,"comment_ctime":1575216890,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"31639987962","product_id":100040201,"comment_content":"做到完全面相对象编程是说领域驱动设计DDD吗？","like_count":7,"discussions":[{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132336,"discussion_content":"我觉得面向对象编程不等同于DDD，或者说从面向对象编程不必然推到出DDD","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578899031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377493,"discussion_content":"没有必然关系。DDD概念 诞生过早，现在很多的玩法DDD涵盖不到，例如中台驱动，即使你不是中台驱动，那么一个组件与模块化到平台化研发过程，DDD并没有涵盖这块。所以尴尬的是 DDD可以驱动业务，但是又无法把业务进一步提升。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622685120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125104,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","nickname":"Citizen Z","note":"","ucode":"9CA547640A8629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71640,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575443353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69444,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575288184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433628,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e0/1c/93e1710f.jpg","nickname":"Jonathan Chan","note":"","ucode":"7BBD27596E8366","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69279,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575278220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171306,"user_name":"Farewell丶","can_delete":false,"product_type":"c1","uid":1179565,"ip_address":"","ucode":"A0D69893C5375C","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","comment_is_top":false,"comment_ctime":1578899189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27348702965","product_id":100040201,"comment_content":"这篇文章其实更倾向于哲学上辩证的批判编程语言的发展。确实在实践中我们不一定都用OOP，而是多种面向共用的。趋势是越来越不是局限于工具，思想，流派。而是以解决具体的问题来开放的使用更重更加适合良好的素材来搭建解决方案。不是一种基础就可以做出来的工程，而是一个系统性的工程。是解决问题导向的。","like_count":6},{"had_liked":false,"id":167451,"user_name":"Haan","can_delete":false,"product_type":"c1","uid":1388133,"ip_address":"","ucode":"7A7BBE0D0CD39E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq8qpSvBoZz89u3BhGXWLibs2OibCkZl8bx74aLSJ58f467bR8anNaTiccJklcqjBdhfvvJpvLVmYesA/132","comment_is_top":false,"comment_ctime":1577804857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052641337","product_id":100040201,"comment_content":"能不写代码就能解决的问题，尽量不写代码","like_count":6},{"had_liked":false,"id":157801,"user_name":"ple","can_delete":false,"product_type":"c1","uid":1120057,"ip_address":"","ucode":"E1C4519C325994","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","comment_is_top":false,"comment_ctime":1575261601,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23050098081","product_id":100040201,"comment_content":"这篇读完收获很大🦆","like_count":5,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313336,"discussion_content":"什么收获？可以分享一下么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603033765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211928,"discussion_content":"特别棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584892860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247710,"user_name":"志江","can_delete":false,"product_type":"c1","uid":2088626,"ip_address":"","ucode":"8A07D53769B3C3","user_header":"","comment_is_top":false,"comment_ctime":1599803239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14484705127","product_id":100040201,"comment_content":"行云流水, 太厉害了, 这得多深刻的认识和理解才能将如此枯燥且繁杂的语言发展, 描述的如此清晰透彻, 绘声绘色, 入木三分.","like_count":3},{"had_liked":false,"id":157654,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1575242590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14460144478","product_id":100040201,"comment_content":"行云流水","like_count":3},{"had_liked":false,"id":197812,"user_name":"FreezeSoul","can_delete":false,"product_type":"c1","uid":1015930,"ip_address":"","ucode":"0B67142C4EA3D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","comment_is_top":false,"comment_ctime":1585399160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175333752","product_id":100040201,"comment_content":"有的时候似乎重新回到过去，但是却有了本质的区别和进步。👍👍👍","like_count":2},{"had_liked":false,"id":158241,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575356075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165290667","product_id":100040201,"comment_content":"计算机语言和人是协同进化，早期的机器语言，汇编语言实在太难用，C语言以及那个时代的语言都是主要解决这个问题，我想以后流行的语言也必然是用户友好的。<br>后来程序越写越大，复杂度很难控制，后来出现了面向对象的编程语言。这里，我想当年Unix操作系统，大神用C语言也没问题，面向对象的编程主要还是让普通人控制软件的复杂度。我想将来流行的语言应当是容易控制复杂度，容易切分代码。<br>编程语言是一个工程问题，要权衡利弊，很难有一种语言在所有维度上都得高分，所以将来大概率是一个百花齐放的时代。<br> ","like_count":3},{"had_liked":false,"id":319028,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1635516955,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5930484251","product_id":100040201,"comment_content":"面向对象语言只是具有面向对象特征的编程语言，面向过程语言也能进行面向对象编程。面向对象是一种编程模式。所以面向对象语言编写的不一定就是面向对象程序。","like_count":1},{"had_liked":false,"id":277896,"user_name":"小鱼","can_delete":false,"product_type":"c1","uid":1640343,"ip_address":"","ucode":"C5AF04616748D0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIibDIDT8fER3rKSjuPvVoUwFbrxftdVRr2g6NwD6eHnibof93eUngsTaf7EE8dYT4AaNBWXGcicEvZA/132","comment_is_top":false,"comment_ctime":1612663050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907630346","product_id":100040201,"comment_content":"老师的课程太棒了，学习过《Java核心技术面试精讲》、《Java业务开发常见错误100例》，感觉还是老师的课程通俗易懂，知识点清晰，这几天争取学习完。","like_count":1},{"had_liked":false,"id":199788,"user_name":"好好先生","can_delete":false,"product_type":"c1","uid":1528286,"ip_address":"","ucode":"794650E28C633A","user_header":"https://static001.geekbang.org/account/avatar/00/17/51/de/990fd4f2.jpg","comment_is_top":false,"comment_ctime":1585495962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880463258","product_id":100040201,"comment_content":"收获很大","like_count":1},{"had_liked":false,"id":160362,"user_name":"seg-上海","can_delete":false,"product_type":"c1","uid":1760320,"ip_address":"","ucode":"46BA8DCB06ED5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBllicLBj61g1ibmCeWzLYpQYEteTOtAAAypoIg6CD19ibXQBbM09VsME9Ta1G8ubwk0ibjiacItavibaeg/132","comment_is_top":false,"comment_ctime":1575941290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870908586","product_id":100040201,"comment_content":"第一个普及计算机编程历史的老大，感谢","like_count":1},{"had_liked":false,"id":160017,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1575857992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870825288","product_id":100040201,"comment_content":"老师讲编程语言的发展历程与马克思理论联系起来，还真是让人眼前一亮啊","like_count":1},{"had_liked":false,"id":319027,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1635516803,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635516803","product_id":100040201,"comment_content":"其实在平时开发大多数都在面向过程编程，数据和逻辑分开，尤其mvc框架。","like_count":0},{"had_liked":false,"id":274476,"user_name":"程同学","can_delete":false,"product_type":"c1","uid":2418763,"ip_address":"","ucode":"622B71D5A2DA5E","user_header":"https://static001.geekbang.org/account/avatar/00/24/e8/4b/8ddf36b0.jpg","comment_is_top":false,"comment_ctime":1611034350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611034350","product_id":100040201,"comment_content":"大师，膜拜","like_count":0},{"had_liked":false,"id":264676,"user_name":"meijing0114","can_delete":false,"product_type":"c1","uid":1012416,"ip_address":"","ucode":"B349D33E2F3ECC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/c0/b09911a0.jpg","comment_is_top":false,"comment_ctime":1606573204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606573204","product_id":100040201,"comment_content":"c++性能很好，适用于很多计算密集的场景。java跨平台，生态也做的很好，web应用，企业软件开发很常用。go天生并发，做后台很好。python脚本灵活。","like_count":0},{"had_liked":false,"id":254063,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1603034138,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1603034138","product_id":100040201,"comment_content":"以前听说过 Ada，但是没有想到她写出的第一个打孔纸带程序是没有办法运行的，因为计算机还没有发明。还有一个没有想到的是，她的全名是 Augusta Ada King, Countess of Lovelace，是不是很有冰与火之歌的感觉。<br><br>我能理解最早的计算机编程需要程序员将电线编来遍去，毕竟 Bug 就是这么来的，但是我对于文中说这是“编程”这个词的由来，有点怀疑，毕竟英文里面是叫做 programming，看不出来“编”。至于中文，百度百科解释说编程是“编定程序”的简称。<br><br>中学接触过 Basic，但真的是没有什么兴趣；大学学过汇编，没学会；后来工作之后接触过 ASP、C#、Java……，现在成了 Rubyist，以后可能考虑学习 Go。<br><br>很难讲面向对象编程是终极形态，但是可能是对于程序员来说相对友好的，至少对于业务的抽象比较容易看懂。","like_count":0},{"had_liked":false,"id":197814,"user_name":"FreezeSoul","can_delete":false,"product_type":"c1","uid":1015930,"ip_address":"","ucode":"0B67142C4EA3D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","comment_is_top":false,"comment_ctime":1585399205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585399205","product_id":100040201,"comment_content":"ddd 领域驱动 更符合业务模型场景","like_count":0},{"had_liked":false,"id":162668,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1576575587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576575587","product_id":100040201,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":159366,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1575607057,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575607057","product_id":100040201,"comment_content":"觉得有必要去看看马克思的书了，哈哈","like_count":0},{"had_liked":false,"id":158957,"user_name":"小东","can_delete":false,"product_type":"c1","uid":1080466,"ip_address":"","ucode":"1F8300E21A5157","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/92/63ae5917.jpg","comment_is_top":false,"comment_ctime":1575506937,"is_pvip":false,"replies":[{"id":"60844","content":"模块2会专门讲反应式编程","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1575528698,"ip_address":"","comment_id":158957,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575506937","product_id":100040201,"comment_content":"什么是反应式编程，有比较好的事例吗？","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476899,"discussion_content":"模块2会专门讲反应式编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575528698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158603,"user_name":"2102","can_delete":false,"product_type":"c1","uid":1070298,"ip_address":"","ucode":"A67068F2A3157E","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/da/e2e5ddf7.jpg","comment_is_top":false,"comment_ctime":1575421791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575421791","product_id":100040201,"comment_content":"现在出现了面向方法编程","like_count":0},{"had_liked":false,"id":158160,"user_name":"老男孩","can_delete":false,"product_type":"c1","uid":1134514,"ip_address":"","ucode":"CEC6D47412F620","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/b2/1e8b5616.jpg","comment_is_top":false,"comment_ctime":1575340352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575340352","product_id":100040201,"comment_content":"C语言的发明者为了验证C语言的特性，写了一个小demo，这就是Unix。牛人的境界真是无法企及。醉了","like_count":0},{"had_liked":false,"id":157876,"user_name":"郭刚","can_delete":false,"product_type":"c1","uid":1292032,"ip_address":"","ucode":"22CB8ECE8E3DCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/b7/00/12149f4e.jpg","comment_is_top":false,"comment_ctime":1575275422,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575275422","product_id":100040201,"comment_content":"如SQL这种面向集合的语言，处理大量数据很合适。面对对象的语言，如java处理大量数据，只能一条条处理，性能会急剧下降。","like_count":0,"discussions":[{"author":{"id":1528879,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/2f/429c568d.jpg","nickname":"鹏酱","note":"","ucode":"CA87B7CFD1BF7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70153,"discussion_content":"取决于业务的复杂度和数据一致性，如果都没要求，那直接SQL肯定是最方便快捷的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575332796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69446,"discussion_content":"Java8的Stream了解一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575288237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}