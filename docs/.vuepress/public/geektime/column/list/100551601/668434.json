{"id":668434,"title":"01｜服务注册与发现：AP和CP，你选哪个？","content":"<p>你好，我是大明。今天我们来聊一聊微服务架构下的服务注册与发现。</p><p>服务注册与发现在微服务架构中处于一个非常核心的地位，也是面试中的常见问题。不过因为微服务架构大行其道，现在我们多少都能回答出来一些服务注册与发现的内容，也因此不容易在面试中刷出亮点，拉开和其他面试者的差距。</p><p>所以这一节课我就要带着你深入剖析服务注册与发现，学习服务注册与发现的基本模型，然后在服务端崩溃检测、客户端容错和注册中心选型三个角度找到高可用微服务架构的亮点。</p><p>那么我们先来看看服务注册与发现的基本模型。</p><h2>前置知识</h2><p>为什么我们会需要服务注册与发现呢？你设想这样一个场景，你的服务部署在不同的机房、不同的机器上，监听不同的端口。现在你的客户端收到了一个请求，要发送给服务端，那么你的客户端怎么知道哪些服务端能够处理这个请求呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/be/90/be4c280fcdb6d64cfd5fd2649cfd0990.png?wh=2262x1352\" alt=\"\"></p><p>举一个例子，你去一个陌生的城市出差，下班了想去吃个火锅，还得是重庆火锅。那么你怎么知道这个城市哪里有重庆火锅？</p><p>你可能会说，我在 App 里面搜一下。那么 App 又怎么知道这里有一家重庆火锅店呢？你继续说，这肯定是商家去这个 App 注册过了呀！对，服务注册与发现模型就是这样。你扮演了客户端的角色，火锅店扮演了服务端的角色，而 App 则是扮演了我们常说的注册中心的角色。</p><!-- [[[read_end]]] --><p>那么我们现在就容易理解基本的服务注册与发现模型了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/88/3dc0cb7a9cb57a19526d305614967a88.png?wh=2238x1352\" alt=\"\"></p><p>你可以看一下我给出的这张图，你要牢牢记住这张图还有里面的具体步骤。</p><ol>\n<li>服务端启动的时候，需要往注册中心里注册自身的信息，主要是定位信息。</li>\n<li>注册成功之后，注册中心和服务端要保持心跳。</li>\n<li>客户端第一次发起对某个服务的调用之前，要先找注册中心获得所有可用服务节点列表，随后客户端会在本地缓存每个服务对应的可用节点列表。</li>\n<li>客户端和注册中心要保持心跳和数据同步，后续服务端有任何变动，注册中心都会通知客户端，客户端会更新本地的可用节点列表。</li>\n<li>客户端发送请求。</li>\n<li>服务端返回响应。</li>\n</ol><p>上面的这个步骤你可以看作是一个“正向”的步骤，而对应的反向步骤则是指服务端下线的过程。</p><p>我们还是用前面的例子来描述，一家门店准备关张不再营业了，那么它需要做一些什么？显然它需要告诉 App 自己不再营业了，那么你在平台上也就再也搜索不到它了。</p><p>所以，服务端下线的过程可以总结为4步。</p><ol>\n<li>服务端通知注册中心自己准备下线了。</li>\n<li>注册中心通知客户端某个服务端下线了。</li>\n<li>客户端收到通知之后，新来的请求就不会再给该服务端发过去。</li>\n<li>服务端等待一段时间之后，暂停服务并下线。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/4f/e5/4f0c79c6e93e9c9f0cd5182218bc10e5.png?wh=2242x1340\" alt=\"\"></p><p>需要注意的是，服务端必须要等待一段时间才能下线。因为从它通知注册中心自己要下线，到客户端收到通知，是有一段延时的，这段延时就是服务端要等待的最小时间。</p><p>如果你觉得这些步骤很复杂，那么我可以教你一个小技巧。你可以把整个模型看作是三角形，三个顶点分别是客户端、注册中心和服务端。三角形的三条边分别是客户端-注册中心，注册中心-服务端，客户端-服务端。而后面我们讨论的高可用方案，无非就是仔细思考三角形的任何一个顶点，或者任何一条边出问题了该怎么办。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/aa/28b257dcbab7c5c3bce8a2c6fb7604aa.png?wh=2244x1348\" alt=\"\"></p><h2>面试准备</h2><p>在面试前，如果你们公司确实是使用了注册中心，那么你要弄清楚一些数据和信息。</p><ul>\n<li>你们用了什么中间件作为注册中心以及该中间件的优缺点。确保自己在回答“你为什么用某个中间价作为注册中心”的时候，能够综合这些优缺点来回答。</li>\n<li>注册中心的集群规模。</li>\n<li>读写 QPS（每秒查询率）。</li>\n<li>机器性能，如 CPU 和内存大小。</li>\n<li>最好准备一个注册中心出故障之后你排查和后续优化的案例。在讨论使用注册中心的注意事项，或者遇到过什么 Bug 的时候可以用这个案例。</li>\n</ul><p>如果你所在的公司没有采用微服务架构，那么你可以在 ZooKeeper、Nacos 或者 etcd 里面选择一个大概学习一下它们的基本特性。在面试的时候你可以用它们来解释注册中心。这样就算你没接触过服务注册与发现，但是你对此也是有相当深入的理解的。</p><p>在面试过程中，你可以尝试从这些角度把话题引到服务注册与发现这个主题上。</p><ul>\n<li>第一种情况，<strong>面试官问到了某一个可以作为注册中心的中间件</strong>。举例来说，如果你用 ZooKeeper 作为注册中心，那么如果面试官问到了 ZooKeeper，你可以主动提起你把它作为了注册中心；如果面试官问了 etcd，那么你可以主动提起 etcd 虽好，但是你用的是ZooKeeper。这个时候面试官很有可能会继续追问你，为什么最终选择 ZooKeeper 作为注册中心，这时候说一下它的优缺点就好了。</li>\n<li>还有一种情况，<strong>面试官问了你微服务高可用的问题</strong>，那么你可以把高可用的服务注册与发现作为保证整个微服务架构高可用的一个环节来叙述。</li>\n</ul><h2>基本模型</h2><p>一般而言，在最开始的阶段，面试官会问你“你知道服务注册与发现吗？”或者“你知道注册中心吗？”等问题，其实都是希望你回答服务注册与发现的基本模型。</p><p>那么你可以回答前置知识里面的服务上线和服务下线这两个流程的具体步骤，而后可以简单描述一下你所在公司的注册中心，也就是罗列一下你准备的那些数据和信息。基本内容说完之后，你可以先浅刷一个亮点，关键词是<strong>注册数据</strong>。</p><p>在说第一个步骤的时候，我提到“主要是定位信息”。既然用到了关键词“主要”，那自然有不那么主要的数据。非主要数据取决于微服务框架的功能特性。例如常见的分组功能，就是依赖于服务端在注册的时候同时注册自己的分组信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/64/8f249118549d96856dc7068fb919d664.png?wh=2244x1348\" alt=\"\"></p><p>所以你可以用一个例子来解释，关键词是<strong>分组</strong>。</p><blockquote>\n<p>服务端注册的数据除了定位信息是必需的以外，剩下需要什么数据都是根据微服务框架本身的功能和业务来设计的。比如说很多微服务框架支持分组功能，那么就可以让服务端在注册的时候同时注册自己的分组信息，比如说当前节点是 VIP 节点。那么客户端在收到 VIP 请求之后就会把请求发给 VIP 节点。</p>\n</blockquote><p>这一段说完之后，你要稍微总结一下，引导面试官追问下去。</p><blockquote>\n<p>服务注册与发现的整个模型比较简单，不过要在实践中做到高可用还是很不容易的。</p>\n</blockquote><p>至于为什么不容易、怎么不容易你就等着面试官继续问。而<strong>高可用</strong>就是我们要刷的亮点。</p><h2>高可用</h2><p>不出所料的话，面试官就可能追问：“服务注册与发现怎么保证高可用呢？”，那么你就可以回答三个点，高可用的服务注册与发现要围绕<strong>注册服务端崩溃检测、客户端容错和注册中心选型</strong>三个方面进行。接下来我们一个点一个点地看。</p><h3>服务端崩溃检测</h3><p>我在基本模型里面说到在正常情况下，服务端下线都需要通知注册中心。那么万一服务端宕机了呢？比如说运维大哥不小心一脚把服务器电源线踢掉了，服务器直接停电了。在这种情况下，服务端是没办法通知注册中心的，注册中心自然也就不会通知客户端。那么客户端就会继续把请求发送给服务端，而这些请求显然都会失败。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ee/43/ee1e78cc51d9f3c5010c2fdf8dced843.png?wh=2244x1348\" alt=\"\"></p><p>因此为了提高可用性，需要让注册中心尽快发现服务端已经崩溃了，而后通知客户端。所以问题的关键就在于<strong>注册中心怎么判断服务端已经崩溃了。</strong></p><p>你可能在上面这张图片里注意到了，服务端崩溃之后注册中心和服务端之间的心跳就无法继续保持了。所以你得出一个简单的结论：<strong>如果注册中心和服务端之间的心跳断了，就认为服务端已经崩溃了。</strong></p><p>但是，如果注册中心和服务端之间的网络出现偶发性的抖动，那么心跳也会失败。此时服务端并没有真的崩溃，还活得好好的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/7e/1d5e31f804a0f70a7f48767e1774cf7e.png?wh=2238x1352\" alt=\"\"></p><p>显然，心跳断了则服务端崩溃的判断并不能成立。这时候你可能会想到能不能多发几次心跳呢？答案是可以，但是次数越多，心跳间隔越长，注册中心断定服务端已经崩溃的时间就越长。而时间越长，就有越多请求发送给服务端。万一这个时候服务端真的崩溃了，这些请求都会失败。所以这就陷入两难境地了。要么是误以为服务端崩溃，要么是误以为服务端还活着。</p><p>那么怎么走出这个窘境呢？</p><p>一方面，注册中心在和服务端进行心跳的时候失败了，就要<strong>立刻通知客户端</strong>该服务端已经不可用了，那么客户端就不会再发请求过来。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/85/93bd54dee1ca2a896811c25aae1da285.png?wh=2242x1352\" alt=\"\"></p><p>另外一方面，<strong>注册中心还要继续往服务端发心跳</strong>。如果只是偶发性的心跳失败，那么注册中心后面心跳是肯定能够连上的，这时候注册中心再通知客户端这个服务端是可用的。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/3b/77c80fb1519962604eae95357f260a3b.png?wh=2238x1348\" alt=\"\"></p><p>不过注册中心并不是无限制发心跳直到连接上，而是发了一段时间之后发现心跳还是失败就不再发了，这意味着注册中心认定服务端彻底崩溃了。在彻底崩溃的场景下，注册中心不需要再次通知客户端，因为在之前注册中心就已经通知过了。</p><p>所以关键词就是<strong>心跳</strong>，你可以这样回答。</p><blockquote>\n<p>影响到可用性的另一个关键点是注册中心需要尽快发现服务端宕机。在基本模型里面，如果服务端突然宕机，那么服务端是来不及通知注册中心的。所以注册中心需要有一种检测机制，判断服务端有没有崩溃。在服务端崩溃的情况下，要及时通知客户端，不然客户端就会继续把请求发送到已经崩溃的节点上。</p>\n</blockquote><blockquote>\n<p>这种检测就是利用心跳来进行的。当注册中心发现和服务端的心跳失败了，那么它就应该认为服务端可能已经崩溃了，就立刻通知客户端停止使用该服务端。但是这种失败可能是偶发性的失败，比如说因为网络偶尔不稳定造成的。所以注册中心要继续保持心跳。如果几次心跳都失败了，那么就可以认为服务端已经彻底不可用了。但是如果心跳再次恢复了，那么注册中心就要再次告诉客户端这个服务端是可用的。</p>\n</blockquote><p>回答到这里，亮点已经有了，不过你还可以继续钓鱼，稍微升华一下。</p><blockquote>\n<p>实际上，在所有有心跳机制的分布式系统里面判断节点是否崩溃都是一个棘手的问题。比如说心跳失败了要不要继续重试，是立刻重试还是间隔重试，重试的话试几次？</p>\n</blockquote><blockquote>\n<p>理论上来说，在心跳失败之后如果不进行重试就直接判定服务端崩溃，那么就难以处理偶发性网络不通的问题。而如果要重试，比如说在注册中心和服务端的模型里面，重试三次，而且重试间隔是十秒钟，那么注册中心确定服务端崩溃就需要三十秒。在这三十秒内，客户端估计有成千上万的请求尝试发到崩溃的服务端，结果都失败了。</p>\n</blockquote><p>这时候，面试官很自然地就会觉得不要搞重试间隔，而是直接发起连续几次重试，这时候你就要无情地击碎这种幻想。</p><blockquote>\n<p>如果不考虑重试间隔的话，就难以避开偶发性的失败。比如说注册中心和服务端之间网络抖动，那么第一次心跳失败之后，你立刻重试多半也是失败的，因为此时网络很可能还是不稳定。</p>\n</blockquote><blockquote>\n<p>所以比较好的策略是立刻重试几次，如果都失败了就再间隔一段时间继续重试。所有的重试机制实际上也是要谨慎考虑重试次数和重试间隔的，确保在业务可以接受的范围内重试成功。不过再怎么样，从服务端崩溃到客户端知道，中间总是存在一个时间误差的，这时候就需要客户端来做容错了。</p>\n</blockquote><p>这个回答里面，最后的一句话，就是为了引出下面这个亮点：客户端容错。</p><h3>客户端容错</h3><p>客户端容错是指<strong>尽量在注册中心或者服务端节点出现问题的时候，依旧保证请求能够发送到正确的服务端节点上</strong>。</p><p>在前一个亮点里面，你已经知道从服务端崩溃到客户端最终知道是有一段延时的。在这段延时内，客户端还是会把请求发送到已经崩溃的服务端节点上。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/8c/eda58e1f3958e182daee3a47e7ecb68c.png?wh=2242x1344\" alt=\"\"></p><p>所以你要紧接着前面刷的亮点继续回答，关键词是<strong>换节点</strong>，也就是所谓的 <strong>failover</strong>。</p><blockquote>\n<p>客户端容错第一个要考虑的是如果某个服务端节点崩溃了该怎么办。在服务端节点崩溃之后，到注册中心发现，再到客户端收到通知，是存在一段延时的，这个延时是能算出来的。在这段延时内，客户端发送请求给这个服务端节点都会失败。</p>\n</blockquote><blockquote>\n<p>这个时候需要客户端来做一些容错。一般的策略是客户端在发现调不通之后，应该尝试换另外一个节点进行重试。如果客户端上的服务发现组件或者负载均衡器能够根据调用结果来做一些容错的话，那么它们应该要尝试将这个节点挪出可用节点列表，在短时间内不要再使用这个节点了。后面再考虑将这个节点挪回去。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/ea/8f/eac0a80b59d9ea0be7afaeb67df9d38f.png?wh=2238x1342\" alt=\"\"></p><p>在上面那段话中，我留了两个口子。第一个是延时怎么计算，非常简单，你从图里面就能看出来。</p><blockquote>\n<p>最坏的情况下，延时等于服务端和注册中心心跳间隔加上注册中心通知客户端的时间。大多数时候，注册中心通知客户端都是很快的，在毫秒级以内。因此可以认为服务端和注册中心的心跳间隔就是这个延时。</p>\n</blockquote><p>第二个点就是什么时候再将这个节点挪回可用列表，在上图中就是 A 什么时候会被重新放回可用列表。</p><p>显然，如果注册中心最终发现服务端崩溃，然后通知了客户端，那么客户端就不用放回去了。等到注册中心发现服务端再次恢复了，那么注册中心会通知客户端，此时客户端更新可用节点列表就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/b3/bd662b5087aaec8f7c3b24171ced4eb3.png?wh=2242x1350\" alt=\"\"></p><p>但是有一种情况是需要客户端主动检测的。这种情况就是服务端节点还活着，注册中心也还活着，唯独<strong>客户端和服务端之间的网络有问题</strong>，导致客户端调用不通。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/c1/1e6f7a380e3572372f3b2a65e565a9c1.png?wh=2238x1350\" alt=\"\"></p><p>在这种情况下，类似于注册中心和服务端心跳失败，客户端也要朝着那个疑似崩溃的服务端节点继续发送心跳。如果心跳成功了，就将节点放回可用列表。如果连续几次心跳都没有成功，那么就不用放回去了，直接认为这个节点已经崩溃了。</p><p>这个分析也适用于客户端和注册中心心跳失败的场景。很显然在这种情况下，客户端可以直接使用本地缓存的可用节点列表，而后如果调不通了则处理方式完全一样。但是不同的是，如果客户端长期连不上注册中心，那么客户端本身应该考虑整个退出。</p><h3>注册中心选型</h3><p>注册中心选型类似于其他中间件选型，要考虑的因素非常多。比如说中间件成熟度、社区活跃度、性能等因素。相比之下，注册中心更加关注 CAP 中选 CP 还是选 AP 的问题。</p><blockquote>\n<p>C：Consistency，数据一致性<br>\nA：Availability，服务可用性<br>\nP：Partition-tolerance，分区容错性<br>\nCAP 理论告诉我们，一个分布式系统不可能同时满足数据一致性、服务可用性和分区容错性这三个基本需求，最多只能同时满足其中的两个。——来自<a href=\"https://time.geekbang.org/column/article/481069?utm_source=u_nav_web&utm_medium=u_nav_web&utm_term=u_nav_web\">《深入浅出分布式原理》</a></p>\n</blockquote><p>简单来说，选择 CP 就是选了一致性和分区容错性，而选择 AP 就相当于选了可用性和分区容错性。</p><p>看上去 P 分区容错性是肯定要选的，那么剩下的就是选 C（一致性） 还是选 A（可用性） 了。那么你要先理解在注册中心选型里面，一致性和可用性究竟哪个更加重要？标准答案是可用性，也就意味着 CP 和 AP 你应该选 AP。</p><p>前面我们讨论了客户端容错，那么显然在选择 AP 的情况下，客户端就可能拿到错误的可用节点列表。如果客户端将请求发到错误的可用节点上，就会出现错误，此时客户端自然可以执行容错，换一个可用节点重试。</p><p>所以我们要抓住关键词<strong>客户端容错</strong>进行回答。</p><blockquote>\n<p>在注册中心选型上，重要的是 CAP 原理中应该选择 AP，比如说 Eureka，又或者 Nacos 启用 AP 模式。</p>\n</blockquote><p>万一你公司并没有使用 AP 模型的注册中心，比如说用了 CP 模型的 ZooKeeper，那么你就可以进一步解释，关键词是<strong>体量小</strong>。</p><blockquote>\n<p>我司之所以用 ZooKeeper，主要是因为我司体量小，集群规模也不大，ZooKeeper 虽然不是 AP 的，但是在这种体量下也够用了。不过我也尝试在公司内部推动看能否换一个中间件，比如说用 Nacos 的 AP 模式。</p>\n</blockquote><h2>面试思路总结</h2><p>最后，让我们来总结一下这节课的重点内容。</p><p>这节课我们主要解决的是服务注册与发现的问题。我给出了基本的服务注册与发现模型，然后从服务端崩溃检测、客户端容错、注册中心选型三个角度来保证了服务注册与发现的高可用。其中我提到了几个关键词，分别是<strong>注册数据、分组、心跳、换节点、客户端容错、体量小。</strong>你可以从这几个关键词出发，根据自己的项目经验，梳理思路。</p><p>最后我再提醒一下，如果你觉得服务注册与发现实在难以记忆，可以<strong>把整个模型想成是一个三角形，而解决高可用问题的关键就是这个三角形任何一条边出问题了该怎么办</strong>。我非常建议你画一画这个三角形，并且手写一下你能想到的各种容错措施。</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/07/yy1e0ab00fc4b83c15f400ca71e03b07.jpg?wh=2360x1855\" alt=\"\"></p><h2>思考题</h2><p>最后你来思考2个问题。</p><ol>\n<li>我在客户端容错里提到这个分析也适用于注册中心崩溃，你能组织一下语言尝试回答“如果注册中心崩溃，你的系统会怎样？”这个问题吗？</li>\n<li>你可以再举出一个心跳频率、心跳重试机制对系统可用性影响的例子吗？</li>\n</ol><p>欢迎你把你的答案分享在评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":378208,"user_name":"小虎子🐯","can_delete":false,"product_type":"c1","uid":2843479,"ip_address":"北京","ucode":"4C9530B3FB407B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","comment_is_top":true,"comment_ctime":1689907191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"添加小助手微信geektime012，回复「后端面试」，即可进入专栏学习群，领取面试资料包~","like_count":0},{"had_liked":false,"id":378256,"user_name":"牧童倒拔垂杨柳","can_delete":false,"product_type":"c1","uid":2033337,"ip_address":"河北","ucode":"8621DCB8B65CBB","user_header":"https://static001.geekbang.org/account/avatar/00/1f/06/b9/f9bf6696.jpg","comment_is_top":false,"comment_ctime":1689949866,"is_pvip":false,"replies":[{"id":137868,"content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690109364,"ip_address":"广东","comment_id":378256,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"如果出现注册中崩溃，站在客户端的角度，会有两种情况\n1. 只有注册中心崩溃了\n2. 注册中心和所有服务端节点一起崩溃了\n\n客户端需要确认是哪种情况，客户端需要继续向注册中心发送心跳，同时使用本地缓存的服务端节点列表，向服务端发送请求，确认是否出现无法访问的服务端节点，可以分为以下几种情况\n1. 向注册中心发送心跳失败，但是服务端仍可调用，此时因根据客户端容错策略使用本地缓存的服务端节点进行调用\n2. 向注册中心发送心跳失败，同时服务端不可调用，此时客户端需要使用本地缓存的服务端节点，确认是否所有服务端节点都不可用，如果都不可用，客户端停止向服务端发送请求，并保持向注册中心发送心跳，等待注册中心重新上线\n\n还有一种情况是客户端还没缓存服务端节点列表，这时注册中心挂了，此时客户端无法获取到服务端节点的位置信息，只能保持向注册中心发送心跳 等待注册中心上线","like_count":25,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624003,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690109365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377489,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"四川","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1688567430,"is_pvip":false,"replies":[{"id":137604,"content":"不是，这个不是你业务数据一致性的问题。\n实际上选 C 还是选 A，实际上就是：\n- 你是要尽可能保证注册中心活着，但是你更大概率拿到错误的注册信息\n- 还是你要尽可能拿到准确的注册信息，但是注册中心可能崩溃了\n\n我个人的倾向是优先选用 CP，直到发现公司的体量上来了，CP 的注册中心撑不住读写压力了，就换 AP。\n\n这里强调的一致性，是指注册信息的一致性，不是业务数据的一致性。也就是说，即便你拿到了错误的注册信息，也就是调不通而已，不会污染你的业务数据。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1688830241,"ip_address":"广东","comment_id":377489,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师要是能距举例说明一下选C(数据一致性)和选A(服务可用性)的优缺点就更好了,谢谢。我觉的应该不是体量大小的问题，而是对数据的一致性要求是否严格的问题。不知道我理解的对不对。","like_count":16,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622937,"discussion_content":"不是，这个不是你业务数据一致性的问题。\n实际上选 C 还是选 A，实际上就是：\n- 你是要尽可能保证注册中心活着，但是你更大概率拿到错误的注册信息\n- 还是你要尽可能拿到准确的注册信息，但是注册中心可能崩溃了\n\n我个人的倾向是优先选用 CP，直到发现公司的体量上来了，CP 的注册中心撑不住读写压力了，就换 AP。\n\n这里强调的一致性，是指注册信息的一致性，不是业务数据的一致性。也就是说，即便你拿到了错误的注册信息，也就是调不通而已，不会污染你的业务数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688830241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376735,"user_name":"stg609","can_delete":false,"product_type":"c1","uid":1073025,"ip_address":"浙江","ucode":"FB70A75A891BB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/81/1c614f4a.jpg","comment_is_top":false,"comment_ctime":1687305375,"is_pvip":false,"replies":[{"id":137341,"content":"嗯嗯，应该说 AP 和 CP 本身就是两相其害取其轻。在大规模集群上，注册中心崩溃的影响太大，因为大部分服务都是使用同一个注册中心的。\n\n而选择 AP 放弃 C，也就是客户端会拿到一些错误的节点，但是可以通过客户端容错来解决。\n\n不过我个人的观点是：小规模集群选 CP，大规模集群选 AP。我在课程里面用“标准答案”的说法，就是指大厂中比较多人赞同选 AP。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687318065,"ip_address":"广东","comment_id":376735,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"好像并没有解释为什么高可用是标准答案","like_count":9,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621565,"discussion_content":"嗯嗯，应该说 AP 和 CP 本身就是两相其害取其轻。在大规模集群上，注册中心崩溃的影响太大，因为大部分服务都是使用同一个注册中心的。\n\n而选择 AP 放弃 C，也就是客户端会拿到一些错误的节点，但是可以通过客户端容错来解决。\n\n不过我个人的观点是：小规模集群选 CP，大规模集群选 AP。我在课程里面用“标准答案”的说法，就是指大厂中比较多人赞同选 AP。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687318065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1254093,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/cd/d8a5eedf.jpg","nickname":"任颖新","note":"","ucode":"00442DC59B4F83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":623072,"discussion_content":"老师，问下有的注册中心还会保存接口契约信息，而不仅仅是节点，这种情况下是不是就是CP比较重要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689028589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":621565,"ip_address":"江苏","group_id":0},"score":623072,"extra":""},{"author":{"id":1372735,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOM6tVLSiciaQeQst0g3iboWO74ibicicVAia9qno0X6cf65pEKLgdKkUdcpCWpjAB5e6semrFrruiaGQWhg/132","nickname":"NoTryNoSuccess","note":"","ucode":"89EE8B4CEECC1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":623819,"discussion_content":"选CP也不代表注册中心崩溃了吧，只是为了分区一致性注册中心会拒绝写入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689860661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":621565,"ip_address":"湖北","group_id":0},"score":623819,"extra":""}]},{"author":{"id":2826017,"avatar":"","nickname":"Byte Learner","note":"","ucode":"6BC7E13F206C3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629616,"discussion_content":"这个地方感觉有些疑惑，字节的服务发现是基于 consul（cp 架构），集群规模很大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697443145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3884909,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/47/6d/52f3c245.jpg","nickname":"饮水机","note":"","ucode":"4E37986E5D785E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2826017,"avatar":"","nickname":"Byte Learner","note":"","ucode":"6BC7E13F206C3A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654046,"discussion_content":"当leader宕机时，这里的CP我理解只是针对选举阶段，无法写入新数据，而AP在选举时可以写入新数据。即便是采用CP协议，如果组件本身采用写主读从，那么在主节点宕机时，仅仅是无法写入（新服务可能注册不上），而已有服务是可以正常被读取的。（但是写主读从也会有个问题，那就是在读从节点时，可能会读到脏数据，也就是只保证最终一致性）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731763104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629616,"ip_address":"四川","group_id":0},"score":654046,"extra":""}]}]},{"had_liked":false,"id":389404,"user_name":"Geek_933088","can_delete":false,"product_type":"c1","uid":3874436,"ip_address":"广东","ucode":"D757733C3107D6","user_header":"","comment_is_top":false,"comment_ctime":1712459730,"is_pvip":false,"replies":[{"id":141989,"content":"是的，在 k8s 上，除非我要设计一些比较奇诡的负载均衡方案，容错方案，不然我都是不会用注册中心的，太麻烦。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715231199,"ip_address":"广东","comment_id":389404,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"感觉老师提到的这个应该是指后端服务部署在传统虚拟机上的场景吧，这么来看确实得这么去实现保证高可用问题，虽然复杂度较高，且貌似也引入了额外的耦合，例如无论客户端或服务端都直接要求有一个注册中心，要是部署在没有注册中心的环境里面应该是跑不起来了，可见这套玩法也有着其的权衡取舍；\n\n随着K8S的普及，现在大部分都用K8S来部署服务了，其自带服务发现与注册（对集群内部）机制，如果客户端和服务端都在集群内部则直接通过service来访问；如果客户端在集群外部，一般是通过提供ingress对应域名（通常会前挂一套负载均衡到K8S）给到客户端，这样一来上面提到这些就不需要了，而且服务端和客户端都无需加入与注册中心交互逻辑，感觉老师可以在文章里提一下这类场景，个人愚见，如果问题欢迎纠正指出，谢谢","like_count":7,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644410,"discussion_content":"是的，在 k8s 上，除非我要设计一些比较奇诡的负载均衡方案，容错方案，不然我都是不会用注册中心的，太麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715231199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377392,"user_name":"王博","can_delete":false,"product_type":"c1","uid":1364095,"ip_address":"河北","ucode":"3D463574542A11","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/7f/1ad28cd3.jpg","comment_is_top":false,"comment_ctime":1688436212,"is_pvip":false,"replies":[{"id":137523,"content":"赞！\n我可以总结为就是两个核心手段：\n- 启动备份注册中心，而且是异构的备份中心。这里你们能做到自动切换吗？还是依赖于人手动切换？\n- 兜底节点：就是人手动配置一些固定 IP，万一注册中心崩了就用这个。这个缺陷就是 IP 需要人来维护，比如说万一某个IP 不可用了。\n\n这两个手段用于面试都很不错！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1688454352,"ip_address":"中国台湾","comment_id":377392,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"刚好经历过我司注册中心炸掉的outage，当时使用etcd作为注册中心，etcd维护团队离职了，我们做了以下事情：\n1、禁止所有部署（我们使用aws，部署可能会换新机器）\n2、保护住所有的现有机器，禁止scale in和scale out（多花了很多钱qaq）\n3、在经历多轮抢修依然无法启动etcd的情况下，我们切换到了consul\n4、注册中心团队对consul添加了fallback的方案，当consul挂掉的时候进行fallback\n5、我们有个服务是通过注册中心获取有序的节点列表从而分配定时任务执行，注册中心故障时可能有时成功有时失败，所以我们添加了基于配置的固定列表，当注册中心down掉时，我们可以配置自己的机器列表，在内存中做排序，以分配定时任务","like_count":7,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622590,"discussion_content":"赞！\n我可以总结为就是两个核心手段：\n- 启动备份注册中心，而且是异构的备份中心。这里你们能做到自动切换吗？还是依赖于人手动切换？\n- 兜底节点：就是人手动配置一些固定 IP，万一注册中心崩了就用这个。这个缺陷就是 IP 需要人来维护，比如说万一某个IP 不可用了。\n\n这两个手段用于面试都很不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688454352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"中国台湾","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2074982,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/66/2df6b3fe.jpg","nickname":"滴滴答答","note":"","ucode":"C51B86D507E887","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":627167,"discussion_content":"网上看到过一个方案。通过某个特定的服务定期把注册中心的内容同步到配置中心。但如果注册中心和配置中心都是用的同一个，比如都是etcd或nacos，这种方案是不是就行不通了？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1693873981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":622590,"ip_address":"广东","group_id":0},"score":627167,"extra":""}]},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622678,"discussion_content":"客户端为注册中心兜底和为服务端兜底（注册中心挂了，服务端的某个节点与注册中心之间不通），也为自己兜底（指客户端和服务端之间不通，注册中心和服务端之间正常）。我们打工人也得手动为这些机器兜底（写死ip）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688539534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377197,"user_name":"penbox","can_delete":false,"product_type":"c1","uid":1052938,"ip_address":"四川","ucode":"59C4F47ACCB7F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/0a/59639f1f.jpg","comment_is_top":false,"comment_ctime":1688049942,"is_pvip":true,"replies":[{"id":137467,"content":"赞！\n我补充一个极端情况，心跳太频繁，还可能直接整个网络里面大部分都是心跳请求，或者心跳本身就就把服务器打垮了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1688107690,"ip_address":"广东","comment_id":377197,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"1. 如果注册中心崩溃了，你的系统会怎么样？\n注册中心崩溃之后，相当于三角形里面客户端与注册中心、服务端与注册中心这两条线断掉了。\n对服务端的影响就是，服务端上线和下线没法通知到客户端。\n对客户端的影响是，客户端没法更新可用服务端列表，只能使用本地现有的可用服务端列表，勉强维持服务。\n2. 再列举一个心跳频率、心跳重试机制对系统可用性影响的例子？\n心跳频率过长，会增加系统判断故障的延迟；如果心跳频率过短，又会增加系统负载和网络流量，造成系统资源的过度消耗。需要在系统负载和实时性要求之间做权衡，选择合适的心跳频率。\n心跳重试机制，避免了偶发性的网络抖动造成的故障误判，但同时也变相增加了判断故障的延迟。重试次数、间隔设计不合理，同样会造成系统资源的过度消耗。","like_count":6,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622327,"discussion_content":"赞！\n我补充一个极端情况，心跳太频繁，还可能直接整个网络里面大部分都是心跳请求，或者心跳本身就就把服务器打垮了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688107690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379739,"user_name":"周新建","can_delete":false,"product_type":"c1","uid":1247419,"ip_address":"广东","ucode":"C29C2482BE0C83","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/bb/a9d2a39d.jpg","comment_is_top":false,"comment_ctime":1692361751,"is_pvip":false,"replies":[{"id":138337,"content":"能，而且很多微服务框架都有这个功能。因为服务发现只能证明，服务端和注册中心没问题。但是你不知道客户端和服务端之间有没有问题，因此会有一个心跳机制。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1692528735,"ip_address":"广东","comment_id":379739,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"”客户端也要朝着那个疑似崩溃的服务端节点继续发送心跳。如果心跳成功了，就将节点放回可用列表。“\n客户端能向服务端发送心跳么？对这个点比较疑惑","like_count":3,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626090,"discussion_content":"能，而且很多微服务框架都有这个功能。因为服务发现只能证明，服务端和注册中心没问题。但是你不知道客户端和服务端之间有没有问题，因此会有一个心跳机制。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1692528735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":635818,"discussion_content":"那这里是不是客户端和对应服务端建立连接之后，就得有一个心跳检测起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705242827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":626090,"ip_address":"中国香港","group_id":0},"score":635818,"extra":""}]},{"author":{"id":1104869,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/e5/26c2f7de.jpg","nickname":"奔跑的小黄牛","note":"","ucode":"C4E014CA41CB66","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626216,"discussion_content":"我也想问这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692663176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383477,"user_name":"大将军Leo。。","can_delete":false,"product_type":"c1","uid":1506549,"ip_address":"广东","ucode":"4A6A510BA454E1","user_header":"https://static001.geekbang.org/account/avatar/00/16/fc/f5/6b65f63a.jpg","comment_is_top":false,"comment_ctime":1699108609,"is_pvip":false,"replies":[{"id":139749,"content":"其实不太需要做这个历史节点的功能，因为很少出现注册中心节点被误删除。我能想到的就是这个误删除，是不是运维手贱，或者说开发在修复数据的时候手贱删了？这算是一个非常非常罕见的错误，所以我个人判断没有太大的必要去引入这个功能。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699282473,"ip_address":"广东","comment_id":383477,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师 如果是注册中心的节点信息被误删除了，而且这个信息注册中心已经同步给客户端了，这种情况客户端客户端是不是要做一个缓存历史节点的功能？不然被全删了没办法保持心跳了","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631064,"discussion_content":"其实不太需要做这个历史节点的功能，因为很少出现注册中心节点被误删除。我能想到的就是这个误删除，是不是运维手贱，或者说开发在修复数据的时候手贱删了？这算是一个非常非常罕见的错误，所以我个人判断没有太大的必要去引入这个功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699282473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385592,"user_name":"喆里","can_delete":false,"product_type":"c1","uid":1125033,"ip_address":"北京","ucode":"0B4B38104645CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/a9/83684d4a.jpg","comment_is_top":false,"comment_ctime":1702956924,"is_pvip":false,"replies":[{"id":140751,"content":"有一些微服务框架帮你解决了客户端和服务端之间的心跳问题，它是在框架底层上解决的，服务端业务层面上没有感知，\n\n如果框架不支持，那么服务端自己暴露一个 health 之类的接口就可以。\n\n是，客户端和注册中心的心跳并不是必须的。而且和推拉模式没有关系，也就是不管我是推还是拉，我都可以没有心跳。大不了就是你客户端连不上而已。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704189076,"ip_address":"广东","comment_id":385592,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"有个疑问，客户端和注册中心失联时，为了维护缓存中节点信息的有效性，需要客户端和服务端发送心跳？？？\n客户端怎么给服务端发心跳？？  服务端还需要开放一个心跳接口给客户端？？\n还有注册中心和客户端之间的数据同步，并不总是推模式的，还有拉模式的，所以注册中心和客户端之间的心跳其实并不是必须的","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634910,"discussion_content":"有一些微服务框架帮你解决了客户端和服务端之间的心跳问题，它是在框架底层上解决的，服务端业务层面上没有感知，\n\n如果框架不支持，那么服务端自己暴露一个 health 之类的接口就可以。\n\n是，客户端和注册中心的心跳并不是必须的。而且和推拉模式没有关系，也就是不管我是推还是拉，我都可以没有心跳。大不了就是你客户端连不上而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704189076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377604,"user_name":"Geek_281b2d","can_delete":false,"product_type":"c1","uid":3242802,"ip_address":"中国台湾","ucode":"3452815B073305","user_header":"","comment_is_top":false,"comment_ctime":1688857429,"is_pvip":false,"replies":[{"id":137645,"content":"1. 是指服务调用中的 A调用 B，那么 A 就是客户端。\n2. 如果你的服务前已经有一个 loadbalance 了，这种形态其实接近使用网关了，你可以服务直连这个 loadbalance。一般这种 loadbalance 都是固定的，比如说有一个固定的域名。如果真要走服务注册与发现，则是注册 loadbalance 的地址。\n3. 有服务注册，但是没有注册中心。也就是接近利用 DNS 来执行服务发现的机制。不过这算是正常做法，在 k8s 里面，服务中心其实也没太大必要。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689048314,"ip_address":"广东","comment_id":377604,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"讀完這堂課有以下疑問,想請問一下課堂老師\n1. 這邊的客戶端是包含瀏覽器&amp; Mobile等等嗎\n2. 每個服務前面都會一台loadbalance 主機去做附載平衡,請問是附載平衡主機的網址去服務註冊中心註冊還是服務去註冊\n3. 如果目前系統是採用k8s+istio,但是目前是將k8s中每個服務對應的endpoint domain寫到istio中,讓istio的網關可以在api請求過來時,經由網址找到服務端,請問這樣的架構算是有服務註冊嗎?","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623117,"discussion_content":"1. 是指服务调用中的 A调用 B，那么 A 就是客户端。\n2. 如果你的服务前已经有一个 loadbalance 了，这种形态其实接近使用网关了，你可以服务直连这个 loadbalance。一般这种 loadbalance 都是固定的，比如说有一个固定的域名。如果真要走服务注册与发现，则是注册 loadbalance 的地址。\n3. 有服务注册，但是没有注册中心。也就是接近利用 DNS 来执行服务发现的机制。不过这算是正常做法，在 k8s 里面，服务中心其实也没太大必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689048314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376955,"user_name":"木几丶","can_delete":false,"product_type":"c1","uid":2420294,"ip_address":"福建","ucode":"FFDB958DA64F8C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","comment_is_top":false,"comment_ctime":1687770526,"is_pvip":true,"replies":[{"id":137399,"content":"是的。这其实比较没办法，毕竟在分布式情况下，说到底一个节点要想知道另外一个节点的情况，都是只能发个请求。\n\n这种决策背后都是有各自理由的。不过总的来说，我认为就是还是遵循了我这节课说的，要么就是误以为死了，要么就是误以为没死，总之就是难两全。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687787006,"ip_address":"广东","comment_id":376955,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"回答问题：你可以再举出一个心跳频率、心跳重试机制对系统可用性影响的例子吗？\n据我所知，所有根据心跳来判断是否存活的系统都会有因延迟带来的可用性问题，例如Redis主从切换、Nginx反向代理upstream探测，不同系统应对这种可用性问题也有各自的办法，如Redis直接就是服务短暂不可用、Nginx则是选择下一个服务","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621946,"discussion_content":"是的。这其实比较没办法，毕竟在分布式情况下，说到底一个节点要想知道另外一个节点的情况，都是只能发个请求。\n\n这种决策背后都是有各自理由的。不过总的来说，我认为就是还是遵循了我这节课说的，要么就是误以为死了，要么就是误以为没死，总之就是难两全。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687787006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376781,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"广东","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1687358110,"is_pvip":false,"replies":[{"id":137353,"content":"加油！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687406774,"ip_address":"广东","comment_id":376781,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"学些了","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621640,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687406775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376662,"user_name":"学无涯","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"北京","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1687174018,"is_pvip":false,"replies":[{"id":137335,"content":"跟着老师一起学，一起通过","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1687316096,"ip_address":"北京","comment_id":376662,"utype":2}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师太牛了，offer收割机名不虚传👍🏻","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621551,"discussion_content":"跟着老师一起学，一起通过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687316096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621517,"discussion_content":"面试用上了记得回来留个言！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687282116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384363,"user_name":"Geek_9027db","can_delete":false,"product_type":"c1","uid":3787952,"ip_address":"四川","ucode":"F5BC6D1A4B8EB7","user_header":"","comment_is_top":false,"comment_ctime":1700729762,"is_pvip":false,"replies":[{"id":140351,"content":"没有 P 就是单点故障了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847069,"ip_address":"广东","comment_id":384363,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师能说下为什么必须要选择p吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633127,"discussion_content":"没有 P 就是单点故障了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744257,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","nickname":"千锤百炼领悟之极限","note":"","ucode":"224B5CF2101716","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644749,"discussion_content":"没有p就不是分布式了，单点是肯定一致的，保证c，单点挂了就不能用了，就没有a了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1715486280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3874436,"avatar":"","nickname":"Geek_933088","note":"","ucode":"D757733C3107D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641284,"discussion_content":"不选择P，那就意味着一旦系统出现网络分区（脑裂、防火墙隔离等）就不可用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712459847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383049,"user_name":"傲娇的小宝","can_delete":false,"product_type":"c1","uid":1493922,"ip_address":"北京","ucode":"C079B19BCC1B7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","comment_is_top":false,"comment_ctime":1698372384,"is_pvip":false,"replies":[{"id":139762,"content":"赞。\n1. 如果是面试的话，可以稍微介绍一下你的容错机制。\n2. 这个说法过于宽泛，可以用更加具体的场景。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699283884,"ip_address":"广东","comment_id":383049,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"关于问题一：首先要判断我这个客户端节点是否成功接入过注册中心，如果没有，应该异常退出。如果成功接入过，只是当前注册中心不可用，我本地应该有缓存的服务器信息，如果需要服务调用，我先在本地缓存找可用节点，加上容错机制，保障一下服务器调用。同时我需要尝试连接注册中心，尝试着发心跳包。这期间，注册中心如果恢复了，可用拉取得到最新，一切如常。\n关于问题二：如果心跳间隙过长，无法及时发现服务端已下线，但如果太频繁了，客户端和服务器的导致吞吐量下降。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631077,"discussion_content":"赞。\n1. 如果是面试的话，可以稍微介绍一下你的容错机制。\n2. 这个说法过于宽泛，可以用更加具体的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699283884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382876,"user_name":"二师兄","can_delete":false,"product_type":"c1","uid":1325799,"ip_address":"上海","ucode":"F2EBFA4745C5A9","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/e7/e2cf9d6d.jpg","comment_is_top":false,"comment_ctime":1698140482,"is_pvip":false,"replies":[{"id":139766,"content":"哈哈哈，我不知道罗翔老师是哪里人，我应该是客家话的口音，偏福建那边吧","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699284167,"ip_address":"广东","comment_id":382876,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师和政法大学的罗翔老师是老乡吗？口音好像","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631081,"discussion_content":"哈哈哈，我不知道罗翔老师是哪里人，我应该是客家话的口音，偏福建那边吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699284167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382584,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1060230,"ip_address":"福建","ucode":"357C3D2F33B325","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/86/07a10be2.jpg","comment_is_top":false,"comment_ctime":1697614108,"is_pvip":false,"replies":[{"id":139769,"content":"1. 注册中心和服务端的心跳断了，可能还会继续重试，重试几次都连不上才会考虑通知客户端，这也是一种可行的策略；\n2. 网络通信本身也是要花时间的；\n3. 服务端崩溃，到注册中心发起心跳，发现第一次心跳崩溃，也是有一段延时的。举例来说，刚心跳完，服务端就崩溃了，注册中心等到下一次心跳，才能发现服务端崩溃了。如果心跳间隔是一秒，那么这个延时就是一秒。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699284476,"ip_address":"广东","comment_id":382584,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师  前面不是说注册中心发现心跳中断就会通知客户端，然后注册中心与服务端直接进行重试 ，为什么后面又说服务端崩溃到客户端最终知道是有一段延时的，在这段延时内，客户端还是会把请求发送到已经崩溃的服务端节点上。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631085,"discussion_content":"1. 注册中心和服务端的心跳断了，可能还会继续重试，重试几次都连不上才会考虑通知客户端，这也是一种可行的策略；\n2. 网络通信本身也是要花时间的；\n3. 服务端崩溃，到注册中心发起心跳，发现第一次心跳崩溃，也是有一段延时的。举例来说，刚心跳完，服务端就崩溃了，注册中心等到下一次心跳，才能发现服务端崩溃了。如果心跳间隔是一秒，那么这个延时就是一秒。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699284476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382476,"user_name":"Byte Learner","can_delete":false,"product_type":"c1","uid":2826017,"ip_address":"湖北","ucode":"6BC7E13F206C3A","user_header":"","comment_is_top":false,"comment_ctime":1697441995,"is_pvip":false,"replies":[{"id":139353,"content":"这方面我倒是没有和字节的同学了解过。不过你可以尝试深入解释 consul 多数据中心，consul 对等结构以及 gossip 协议这些原理。毕竟面试官只是想考察你对consule 是否了解，以及对自己的业务特征是否了解，只要能够自圆其说就可以。\n\n我个人猜测，你们选型可能是更加看重多数据中心的管理能力，纯猜测。又或者就是当初的人的个人偏好了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1697724833,"ip_address":"广东","comment_id":382476,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"&quot;万一你公司并没有使用 AP 模型的注册中心，比如说用了 CP 模型的 ZooKeeper，那么你就可以进一步解释，关键词是体量小&quot;\n\n老师你好，看到上面这段话，结合自己公司情况感觉没法回答面试官，字节的服务发现用的 consul，基于 CP 架构，了解到 consul 有多数据中心支持、基于 Gossip 协议等优点，但是字节集群的规模很大，是有其他方式保证了可用性吗","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629856,"discussion_content":"这方面我倒是没有和字节的同学了解过。不过你可以尝试深入解释 consul 多数据中心，consul 对等结构以及 gossip 协议这些原理。毕竟面试官只是想考察你对consule 是否了解，以及对自己的业务特征是否了解，只要能够自圆其说就可以。\n\n我个人猜测，你们选型可能是更加看重多数据中心的管理能力，纯猜测。又或者就是当初的人的个人偏好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697724833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382288,"user_name":"Geek_680632","can_delete":false,"product_type":"c1","uid":3730160,"ip_address":"浙江","ucode":"9421FB33A0C6A9","user_header":"","comment_is_top":false,"comment_ctime":1697007503,"is_pvip":false,"replies":[{"id":139361,"content":"1. 这里还要进一步讨论，如果你一直连不上注册中心，又或者你可用列表的某个节点发送请求失败，要怎么处理。比如说一直连不上注册中心，就可以考虑彻底退出服务。节点连不上就要考虑挪出可用节点列表等。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1697725638,"ip_address":"广东","comment_id":382288,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"1.如果注册中心崩溃，客户端使用之前缓存的服务端地址列表，还可以维持可用状态；客户端和服务端需要一直重试心跳检测；2.例如Redis或者ElasticsSearch集群中，多个节点之间的心跳检测机制。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629864,"discussion_content":"1. 这里还要进一步讨论，如果你一直连不上注册中心，又或者你可用列表的某个节点发送请求失败，要怎么处理。比如说一直连不上注册中心，就可以考虑彻底退出服务。节点连不上就要考虑挪出可用节点列表等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697725638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381898,"user_name":"一弦一柱思华年","can_delete":false,"product_type":"c1","uid":3720570,"ip_address":"广东","ucode":"36F8086A275AA7","user_header":"https://static001.geekbang.org/account/avatar/00/38/c5/7a/c03cb56e.jpg","comment_is_top":false,"comment_ctime":1696160177,"is_pvip":false,"replies":[{"id":139223,"content":"倒也正常，说明你所在的公司应该规模不小。\n\n不过出去面试就还是要深入去看看。一般基础架构部门会把很多东西封装好，对于业务开发就是用一下，但是出去面试就是另外一回事了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1696922980,"ip_address":"广东","comment_id":381898,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"服务注册发现 都是公司基础架构部门搞的，有成熟的内部平台，无需业务部门关心，这种咋搞。。看了下这块，感觉有点懵圈，平时开发完全没关注过服务注册发现","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629291,"discussion_content":"倒也正常，说明你所在的公司应该规模不小。\n\n不过出去面试就还是要深入去看看。一般基础架构部门会把很多东西封装好，对于业务开发就是用一下，但是出去面试就是另外一回事了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696922980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378310,"user_name":"ZhiguoXue_IT","can_delete":false,"product_type":"c1","uid":2639055,"ip_address":"山西","ucode":"EAA83F53B54520","user_header":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1690077839,"is_pvip":false,"replies":[{"id":137912,"content":"我看 Nacos 说自己支持 AP 和 CP 模式，用户可以自由选择。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690260395,"ip_address":"广东","comment_id":378310,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"1我们注册中心是用的nacos，nacos挂了，整个服务无法进行通信了\n2在一些监控当，进行探活，经常隔一段时间ping几秒\n3作者是如何理解nacos是ap还是cp？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624159,"discussion_content":"我看 Nacos 说自己支持 AP 和 CP 模式，用户可以自由选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690260395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378120,"user_name":"末日，成欢","can_delete":false,"product_type":"c1","uid":1812201,"ip_address":"陕西","ucode":"BBAEBB9C93558A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","comment_is_top":false,"comment_ctime":1689772678,"is_pvip":false,"replies":[{"id":137825,"content":"不是核心员工，只是了解一下 QPS 应该也没有限制的话？这个只能是说从公司的监控里面看。一般这种数据都不算什么机密，你找相关业务组的同学问一下就可以。如果说涉及什么泄密的，那就没办法。\n","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689953119,"ip_address":"广东","comment_id":378120,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"老师， 不是核心员工，我们如何才能知道注册中心集群的QPS呢？ 注册中心什么情况下会出现故障？\n1. 当注册中心故障时， 客户端只能用曾经在注册中心上拉取的提供方服务地址列表，无法感知到更新。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623892,"discussion_content":"不是核心员工，只是了解一下 QPS 应该也没有限制的话？这个只能是说从公司的监控里面看。一般这种数据都不算什么机密，你找相关业务组的同学问一下就可以。如果说涉及什么泄密的，那就没办法。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689953119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377487,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1688563419,"is_pvip":false,"replies":[{"id":137602,"content":"CP 主要是在大规模集群下。在大规模集群下时刻都有节点加入、退出，也就是你的注册中心承担着极大的读写压力。这方面你可以看一下阿里他们发表的文章，里面就讨论过他们遇到的可用性问题。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1688829764,"ip_address":"广东","comment_id":377487,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"注册中心选择cp有什么问题呢？客户端是有本地可用节点缓存的，就算注册中心不可用了，是不是影响也不大","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622935,"discussion_content":"CP 主要是在大规模集群下。在大规模集群下时刻都有节点加入、退出，也就是你的注册中心承担着极大的读写压力。这方面你可以看一下阿里他们发表的文章，里面就讨论过他们遇到的可用性问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688829764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":626320,"discussion_content":"有文章相关的地址咩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692794908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":622935,"ip_address":"广东","group_id":0},"score":626320,"extra":""}]}]},{"had_liked":false,"id":377069,"user_name":"滴滴答答","can_delete":false,"product_type":"c1","uid":2074982,"ip_address":"广东","ucode":"C51B86D507E887","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/66/2df6b3fe.jpg","comment_is_top":false,"comment_ctime":1687910552,"is_pvip":false,"replies":[{"id":137424,"content":"这时候……你就直接说你们用的事 k8s，然后你要引导过去的是 k8s 底层上。比如说利用 k8s 做服务发现，k8s 中的 DNS 是怎么搞的，isito 是怎么搞的这一类。\n其实，k8s + istio 面试很好面，前提是你能够从底层原理的角度解释清楚它们是如何运作的。而后你打造的人设就是精通基于 k8s+istio 的微服务架构，或者云原生微服务架构。也是一个很有竞争力的面试点。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687925650,"ip_address":"广东","comment_id":377069,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"请教下老师，公司用的k8s+istio这套。微服务里的注册中心，负载均衡等可能被开发者弱化了。这种要怎么去引导面试官呢？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622107,"discussion_content":"这时候……你就直接说你们用的事 k8s，然后你要引导过去的是 k8s 底层上。比如说利用 k8s 做服务发现，k8s 中的 DNS 是怎么搞的，isito 是怎么搞的这一类。\n其实，k8s + istio 面试很好面，前提是你能够从底层原理的角度解释清楚它们是如何运作的。而后你打造的人设就是精通基于 k8s+istio 的微服务架构，或者云原生微服务架构。也是一个很有竞争力的面试点。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687925650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377001,"user_name":"jinhaoqicode","can_delete":false,"product_type":"c1","uid":2802166,"ip_address":"四川","ucode":"67AFE4CA167AFE","user_header":"https://static001.geekbang.org/account/avatar/00/2a/c1/f6/8a38a179.jpg","comment_is_top":false,"comment_ctime":1687828224,"is_pvip":false,"replies":[{"id":137429,"content":"做什么实际项目？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687926041,"ip_address":"广东","comment_id":377001,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"受益匪浅，喜欢你的总结，我想做一个实际的项目，有推荐吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622112,"discussion_content":"做什么实际项目？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687926041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376783,"user_name":"夏文兵","can_delete":false,"product_type":"c1","uid":1366118,"ip_address":"北京","ucode":"038FA2102DA4C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBVPzcO55PyLPeicoZ6zuaZNryYK7OnAkgz0jV6Tl9vOLIrkEGDgen8E9NwamAsTckS1D2Wl2prCQ/132","comment_is_top":false,"comment_ctime":1687363730,"is_pvip":false,"replies":[{"id":137354,"content":"好问题，这是一个很深入到模型底层的问题了。实际上，类似的中间件里面，有服务器发心跳给注册中心的，也有注册中心发心跳给服务器的，这其实是取决于注册中心的选型。\n\n类似地，在客户端和注册中心通信的地方，可以是客户端轮询注册中心，也可以是注册中心主动推送给客户端。这同样也是取决于注册中心的。\n\n这种通信谁主动谁被动比较好，目前我没听说有什么主流的说法。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687407051,"ip_address":"广东","comment_id":376783,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"老师问一下，为什么是注册中心向服务器发送心跳，而不是服务器向注册中心发送心跳，注册中心用服务端最后心跳时间判断失效状态呢","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621642,"discussion_content":"好问题，这是一个很深入到模型底层的问题了。实际上，类似的中间件里面，有服务器发心跳给注册中心的，也有注册中心发心跳给服务器的，这其实是取决于注册中心的选型。\n\n类似地，在客户端和注册中心通信的地方，可以是客户端轮询注册中心，也可以是注册中心主动推送给客户端。这同样也是取决于注册中心的。\n\n这种通信谁主动谁被动比较好，目前我没听说有什么主流的说法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687407051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3645210,"avatar":"","nickname":"Geek_378f63","note":"","ucode":"920F95A3B9B3F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621694,"discussion_content":"服务器发送心跳需要多发一个请求吧，一来一回","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687507187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3645210,"avatar":"","nickname":"Geek_378f63","note":"","ucode":"920F95A3B9B3F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626321,"discussion_content":"这么说的话，注册中心发送心跳也要一来一回吧，确保发出去的心跳是有被接收到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692795091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":621694,"ip_address":"广东","group_id":0},"score":626321,"extra":""}]}]},{"had_liked":false,"id":376765,"user_name":"程序员花卷","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"云南","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","comment_is_top":false,"comment_ctime":1687332226,"is_pvip":false,"replies":[{"id":137350,"content":"赞！那么你有什么办法可以进一步解决这个问题？也就是即便在注册中心崩溃的情况下，也能尽可能的提供服务。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1687406435,"ip_address":"广东","comment_id":376765,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"如果注册中心崩溃：\n1. 新服务无法将自身信息注册到注册中心\n2. 老服务无法将自己的状态信息同步给注册中心，同时客户端也无法从注册中心获取到最新的服务节点列表以做更新。客户端只能继续使用本地的服务节点列表。\n3. 客户端无法收到注册中心的通知，那么服务端崩溃信息就无法同步到客户端，这样客户端发起的请求就都会失败，影响系统的使用","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621637,"discussion_content":"赞！那么你有什么办法可以进一步解决这个问题？也就是即便在注册中心崩溃的情况下，也能尽可能的提供服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687406435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376661,"user_name":"剑存","can_delete":false,"product_type":"c1","uid":2736557,"ip_address":"澳大利亚","ucode":"41BFAC1264864E","user_header":"https://static001.geekbang.org/account/avatar/00/29/c1/ad/62d3df46.jpg","comment_is_top":false,"comment_ctime":1687173859,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"如果注册中心崩溃：\n\n已知服务-服务端无法将自己的状态信息更新到注册中心，同时客户端本地缓存的已知服务的节点列表就无法得到更新，客户端只能继续使用这个本地服务列表发送请求，如客户端发现有服务节点不可达，通过客户端的容错策略来路由到可用节点上。\n\n未知服务-如果在注册中心崩溃的时候，第一次访问某个服务，这个时候是拿不到服务节点列表的，由于本地还没有缓存这个服务的列表 ，只能重复尝试，等standby的注册中心failover上线后，拿到服务列表继续后续处理。如果注册中心不是高可用的部署，这个时候客户端对此服务的访问就只能返回不可用。","like_count":4,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621516,"discussion_content":"对的！还有一种做法是直接保持两套注册中心，优先用其中一套的数据，万一这一套崩了，还可用另外一套。总的来说，这个方案只适用于可用性要求非常严苛的点。面试还可以强调最好就是注册中心不崩溃，例如可以考虑用对等结构并且每个节点都有全量注册数据的注册中心，这样除非整个集群全崩了，不然注册中心都可以提供服务。这样就是把话题引导过去了CAP上","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1687282085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2736557,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c1/ad/62d3df46.jpg","nickname":"剑存","note":"","ucode":"41BFAC1264864E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":621611,"discussion_content":"晓得了 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687345423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":621516,"ip_address":"澳大利亚","group_id":0},"score":621611,"extra":""}]}]},{"had_liked":false,"id":394419,"user_name":"Emmcd","can_delete":false,"product_type":"c1","uid":2004534,"ip_address":"广东","ucode":"8B8BFDD26CB89A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/36/25938cd1.jpg","comment_is_top":false,"comment_ctime":1726749081,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"k8s部署的集群 是不是就不用自己实现服务注册与发现了呢","like_count":0},{"had_liked":false,"id":391455,"user_name":"言雨","can_delete":false,"product_type":"c1","uid":2026955,"ip_address":"上海","ucode":"0BA259B41695F1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ed/cb/d92656d6.jpg","comment_is_top":false,"comment_ctime":1718287502,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"思考题\n（1）注册中心帮助服务发现，以及服务上下线通知，但是不应该强依赖注册中心。比如dubbo中是将服务提供者信息缓存到本地，这样即使注册中心挂了，短时间内也不影响服务调用。\n（2）心跳频率一般是向注册中心发起，表明当前节点还是活跃的。频率过高可能会对服务有影响，频率过低可能延迟太高。参考使用zk做注册中心，服务注册创建一个临时节点，当服务宕机会导致节点被消息，此时可以通知到消费端更新本地缓存节点信息。","like_count":0},{"had_liked":false,"id":390825,"user_name":"哆啦a喵","can_delete":false,"product_type":"c1","uid":3601364,"ip_address":"北京","ucode":"AE5E51BB43753D","user_header":"https://static001.geekbang.org/account/avatar/00/36/f3/d4/86a99ae0.jpg","comment_is_top":false,"comment_ctime":1716384955,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"在某个大厂，用的是consul，这个要是被问到咋整，已经离职了 ","like_count":0}]}