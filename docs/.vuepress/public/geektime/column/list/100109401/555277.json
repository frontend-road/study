{"id":555277,"title":"71｜RESTful Web Services（35）：如何将测试改为动态测试？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethods\n<ul>\n<li>当HEAD方法映射到GET方法时，忽略GET的返回值</li>\n<li>当没有OPTIONS方法时，提供默认实现</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>package geektime.tdd.rest;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.ws.rs.HttpMethod;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.PathParam;\nimport jakarta.ws.rs.QueryParam;\nimport jakarta.ws.rs.container.ResourceContext;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.HttpHeaders;\nimport jakarta.ws.rs.core.Response;\nimport jakarta.ws.rs.core.UriInfo;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport static geektime.tdd.rest.DefaultResourceMethod.ValueConverter.singeValued;\nimport static java.util.Arrays.stream;\ninterface ResourceRouter {\n    OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext);\n    interface Resource extends UriHandler {\n        Optional&lt;ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n    interface ResourceMethod extends UriHandler {\n        String getHttpMethod();\n        GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n}\nclass DefaultResourceRouter implements ResourceRouter {\n    private Runtime runtime;\n    private List&lt;Resource&gt; rootResources;\n    public DefaultResourceRouter(Runtime runtime, List&lt;Resource&gt; rootResources) {\n        this.runtime = runtime;\n        this.rootResources = rootResources;\n    }\n    @Override\n    public OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext) {\n        String path = request.getServletPath();\n        UriInfoBuilder uri = runtime.createUriInfoBuilder(request);\n        Optional&lt;ResourceMethod&gt; method = UriHandlers.mapMatched(path, rootResources, (result, resource) -&gt; findResourceMethod(request, resourceContext, uri, result, resource));\n        if (method.isEmpty()) return (OutboundResponse) Response.status(Response.Status.NOT_FOUND).build();\n        return (OutboundResponse) method.map(m -&gt; m.call(resourceContext, uri))\n                .map(entity -&gt; (entity.getEntity() instanceof OutboundResponse) ? (OutboundResponse) entity.getEntity() : Response.ok(entity).build())\n                .orElseGet(() -&gt; Response.noContent().build());\n    }\n    private Optional&lt;ResourceMethod&gt; findResourceMethod(HttpServletRequest request, ResourceContext resourceContext, UriInfoBuilder uri, Optional&lt;UriTemplate.MatchResult&gt; matched, Resource handler) {\n        return handler.match(matched.get(), request.getMethod(),\n                Collections.list(request.getHeaders(HttpHeaders.ACCEPT)).toArray(String[]::new), resourceContext, uri);\n    }\n}\n\n\nclass DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n    private String httpMethod;\n    private UriTemplate uriTemplate;\n    private Method method;\n    public DefaultResourceMethod(Method method) {\n        this.method = method;\n        this.uriTemplate = new PathTemplate(Optional.ofNullable(method.getAnnotation(Path.class)).map(Path::value).orElse(&quot;&quot;));\n        this.httpMethod = stream(method.getAnnotations()).filter(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class))\n                .findFirst().get().annotationType().getAnnotation(HttpMethod.class).value();\n    }\n    @Override\n    public String getHttpMethod() {\n        return httpMethod;\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    @Override\n    public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n        try {\n            UriInfo uriInfo = builder.createUriInfo();\n            Object result = method.invoke(builder.getLastMatchedResource(),\n                    stream(method.getParameters()).map(parameter -&gt;\n                            providers.stream().map(provider -&gt; provider.provide(parameter, uriInfo)).filter(Optional::isPresent)\n                                    .findFirst()\n                                    .flatMap(values -&gt; values.map(v -&gt; converters.get(parameter.getType()).fromString(v)))\n                                    .orElse(null)).toArray(Object[]::new));\n            return result != null ? new GenericEntity&lt;&gt;(result, method.getGenericReturnType()) : null;\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    private static ValueProvider pathParam = (parameter, uriInfo) -&gt;\n            Optional.ofNullable(parameter.getAnnotation(PathParam.class))\n                    .map(annotation -&gt; uriInfo.getPathParameters().get(annotation.value()));\n    private static ValueProvider queryParam = (parameter, uriInfo) -&gt;\n            Optional.ofNullable(parameter.getAnnotation(QueryParam.class))\n                    .map(annotation -&gt; uriInfo.getQueryParameters().get(annotation.value()));\n    private static List&lt;ValueProvider&gt; providers = List.of(pathParam, queryParam);\n    interface ValueProvider {\n        Optional&lt;List&lt;String&gt;&gt; provide(Parameter parameter, UriInfo uriInfo);\n    }\n    interface ValueConverter&lt;T&gt; {\n        T fromString(List&lt;String&gt; values);\n        static &lt;T&gt; ValueConverter&lt;T&gt; singeValued(Function&lt;String, T&gt; converter) {\n            return values -&gt; converter.apply(values.get(0));\n        }\n    }\n    private static Map&lt;Type, ValueConverter&lt;?&gt;&gt; converters = Map.of(\n            int.class, singeValued(Integer::parseInt),\n            String.class, singeValued(s -&gt; s));\n\n\n    @Override\n    public String toString() {\n        return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n    }\n}\nclass ResourceMethods {\n    private Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; resourceMethods;\n    public ResourceMethods(Method[] methods) {\n        this.resourceMethods = getResourceMethods(methods);\n    }\n    private static Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; getResourceMethods(Method[] methods) {\n        return stream(methods).filter(m -&gt; stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(DefaultResourceMethod::new)\n                .collect(Collectors.groupingBy(ResourceRouter.ResourceMethod::getHttpMethod));\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findResourceMethods(String path, String method) {\n        return findMethod(path, method).or(() -&gt; findAlternative(path, method));\n    }\n    private Optional&lt;ResourceRouter.ResourceMethod&gt; findAlternative(String path, String method) {\n        if (HttpMethod.HEAD.equals(method)) return findMethod(path, HttpMethod.GET).map(HeadResourceMethod::new);\n        if (HttpMethod.OPTIONS.equals(method)) return Optional.of(new OptionResourceMethod(path));\n        return Optional.empty();\n    }\n    private Optional&lt;ResourceRouter.ResourceMethod&gt; findMethod(String path, String method) {\n        return Optional.ofNullable(resourceMethods.get(method)).flatMap(methods -&gt; UriHandlers.match(path, methods, r -&gt; r.getRemaining() == null));\n    }\n    class OptionResourceMethod implements ResourceRouter.ResourceMethod {\n        private String path;\n        public OptionResourceMethod(String path) {\n            this.path = path;\n        }\n        @Override\n        public String getHttpMethod() {\n            return HttpMethod.OPTIONS;\n        }\n        @Override\n        public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n            return new GenericEntity&lt;&gt;(Response.noContent().allow(findAllowedMethods()).build(), Response.class);\n        }\n        private Set&lt;String&gt; findAllowedMethods() {\n            Set&lt;String&gt; allowed = List.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.OPTIONS, HttpMethod.PUT,\n                            HttpMethod.POST, HttpMethod.DELETE, HttpMethod.PATCH).stream()\n                    .filter(method -&gt; findMethod(path, method).isPresent()).collect(Collectors.toSet());\n            allowed.add(HttpMethod.OPTIONS);\n            if (allowed.contains(HttpMethod.GET)) allowed.add(HttpMethod.HEAD);\n            return allowed;\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return new PathTemplate(path);\n        }\n    }\n}\nclass HeadResourceMethod implements ResourceRouter.ResourceMethod {\n    ResourceRouter.ResourceMethod method;\n    public HeadResourceMethod(ResourceRouter.ResourceMethod method) {\n        this.method = method;\n    }\n    @Override\n    public String getHttpMethod() {\n        return HttpMethod.HEAD;\n    }\n    @Override\n    public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n        method.call(resourceContext, builder);\n        return null;\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return method.getUriTemplate();\n    }\n}\nclass SubResourceLocators {\n    private final List&lt;ResourceRouter.Resource&gt; subResourceLocators;\n    public SubResourceLocators(Method[] methods) {\n        subResourceLocators = stream(methods).filter(m -&gt; m.isAnnotationPresent(Path.class) &amp;&amp;\n                        stream(m.getAnnotations()).noneMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map((Function&lt;Method, ResourceRouter.Resource&gt;) SubResourceLocator::new).toList();\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findSubResourceMethods(String path, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        return UriHandlers.mapMatched(path, subResourceLocators, (result, locator) -&gt; locator.match(result.get(), method, mediaTypes, resourceContext, builder));\n    }\n    static class SubResourceLocator implements ResourceRouter.Resource {\n        private PathTemplate uriTemplate;\n        private Method method;\n        public SubResourceLocator(Method method) {\n            this.method = method;\n            this.uriTemplate = new PathTemplate(method.getAnnotation(Path.class).value());\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return uriTemplate;\n        }\n        @Override\n        public String toString() {\n            return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n        }\n        @Override\n        public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n            Object resource = builder.getLastMatchedResource();\n            try {\n                Object subResource = method.invoke(resource);\n                return new ResourceHandler(subResource, uriTemplate).match(result, httpMethod, mediaTypes, resourceContext, builder);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\nclass ResourceHandler implements ResourceRouter.Resource {\n    private UriTemplate uriTemplate;\n    private ResourceMethods resourceMethods;\n    private SubResourceLocators subResourceLocators;\n    private Function&lt;ResourceContext, Object&gt; resource;\n\n\n    public ResourceHandler(Class&lt;?&gt; resourceClass) {\n        this(resourceClass, new PathTemplate(getTemplate(resourceClass)), rc -&gt; rc.getResource(resourceClass));\n    }\n    private static String getTemplate(Class&lt;?&gt; resourceClass) {\n        if (!resourceClass.isAnnotationPresent(Path.class)) throw new IllegalArgumentException();\n        return resourceClass.getAnnotation(Path.class).value();\n    }\n    public ResourceHandler(Object resource, UriTemplate uriTemplate) {\n        this(resource.getClass(), uriTemplate, rc -&gt; resource);\n    }\n    private ResourceHandler(Class&lt;?&gt; resourceClass, UriTemplate uriTemplate, Function&lt;ResourceContext, Object&gt; resource) {\n        this.uriTemplate = uriTemplate;\n        this.resourceMethods = new ResourceMethods(resourceClass.getMethods());\n        this.subResourceLocators = new SubResourceLocators(resourceClass.getMethods());\n        this.resource = resource;\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        builder.addMatchedResource(resource.apply(resourceContext));\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, httpMethod)\n                .or(() -&gt; subResourceLocators.findSubResourceMethods(remaining, httpMethod, mediaTypes, resourceContext, builder));\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/fa44a0a771684c85b6b2c4134399972b/snapshots/50991db6709144dd8586dc29c8cfe450-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3ada7821-182c522c8da-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/dceac54143624e0980cde2d0b7ab75f7/4b0c1fd38aed47e3b26a916ac43e26ee-2e051ee5793814f77c082b06248a7453-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>如何在现有结构下支持转换构造函数？</p><p>欢迎把你的思考和想法分享在留言区，我们下节课再见！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"70｜RESTful Web Services（34）：在当前代码结构下，要如何进行重构？","id":551638},"right":{"article_title":"72｜RESTful Web Services（36）：在现有结构下，如何支持转换构造函数？","id":555255}},"comments":[{"had_liked":false,"id":356343,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1662182108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662182108","product_id":100109401,"comment_content":"自从掌握动态测试后,写测试就更容易了","like_count":0}]}