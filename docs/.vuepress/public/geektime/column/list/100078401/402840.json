{"id":402840,"title":"37 | 从内核到应用：网络数据在内核中如何流转","content":"<p>你好，我是 LMOS。</p><p>上节课我们对一次请求到响应的过程积累了一些宏观认识，相信你已经对整个网络架构有了一个整体蓝图。这节课，让我们来仔细研究一下网络数据是如何在内核中流转的，让你开阔视野，真正理解底层工程的实现思路。</p><p>凡事先问目的，在网络数据在内核中的流转，最终要服务于网络收发功能。所以，我会先带你了解一次具体的网络发收过程，然后带你了解lwIP的网络数据收发。有了这些基础，我还会示范一下如何实现协议栈移植，你可以在课后自行动手拓展。</p><p>好，让我们正式开始今天的学习吧。课程配套代码，你可以点击<a href=\"https://gitee.com/lmos/cosmos/tree/master/lesson37/Cosmos\">这里</a>获取。</p><h2>先看看一次具体的网络发收过程</h2><p>理解软件的设计思想，最重要的是先要理解需求。而内核中的数据流转也只是为了满足网络收发的需求而进行的设计。</p><h3>发送过程总览</h3><p>下面我们一起来看看应用程序通过网络发送数据的全过程。</p><p>应用程序首先会准备好数据，调用用户态下的库函数。接着调用系统API接口函数，进入到内核态。</p><p>内核态对应的系统服务函数会复制应用程序的数据到内核的内存空间中，然后将数据移交给网络协议栈，在网络协议栈中将数据层层打包。</p><p>最后，包装好的数据会交给网卡驱动，网卡驱动程序负责将打包好的数据写入网卡并让其发送出去。</p><p>我为你准备了一张流程图供你参考，如下所示。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/dc/bc/dcb38fc1c0eef666eb1496cbf97a82bc.jpg?wh=2705x3530\" alt=\"\" title=\"发送过程总览\"></p><p>上图中，只是展示了大致流程，其中还有DMA处理、CRC校验、出错处理等细节，但对于我们理解梳理发送流程，这些就够了。</p><h3>接收过程总览</h3><p>了解了发送数据的过程以后，掌握接收数据的过程就更容易了，因为它就是<strong>发送数据的逆过程</strong>。</p><p>首先，网卡接收到数据，通过DMA复制到指定的内存，接着发送中断，以便通知网卡驱动，由网卡驱动处理中断复制数据。然后网络协议收到网卡驱动传过来的数据，层层解包，获取真正的有效数据。最后，这个数据会发送给用户态监听的应用进程。</p><p>为了让你更加直观地了解这一过程，我特意准备了一张流程图供你参考，如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/dd/8a726909f0a19ff1683e541d3712b4dd.jpg?wh=3095x3230\" alt=\"\" title=\"接收过程总览\"></p><p>前面只是帮你梳理一下数据的发送与接收的流程，其实我们真正要关注的是网络协议。可是我们若手动实现一个完整的网络协议，不太现实，网络协议的复杂度大到也许要重新开一门课程，才可以完全解决，所以下面我们借用一下lwIP项目，以这个为基础来讨论网络协议。</p><h2>认识一下lwIP架构</h2><p>现在我们清楚了一次具体网络发收过程是怎么回事，那怎么让Cosmos实现网络通信呢？这里我们选择lwIP这个TCP/IP协议的轻量级开源项目，让它成为Cosmos的网络部的战略合作伙伴。</p><p>lwIP是由瑞典计算机科学研究院（SICS）的Adam Dunkels开发的小型开源TCP/IP协议栈。它是一个用C语言实现的软件组件，一共有两套接口层，向下是操作系统要提供的，向上是提供给应用程序的。这样lwIP就能嵌入到任何操作系统之中工作，并为这个操作系统上的应用软件提供网络功能支持了。</p><p>为啥说lwIP是轻量级的呢？很简单，跟Linux比，从代码行数上就能看得出。lwIP的设计目标就是尽量用少量资源消耗，实现一个相对完整的TCP/IP协议栈。</p><p>这里的“完整性”主要是指TCP协议的完整性，实现的关键点就是<strong>在保持TCP协议主要功能的基础上减少对RAM的占用。</strong>同时，lwIP还支持IPv6的标准实现，这也让我们与现代交换设备的对接变得非常方便。</p><p>这里额外提供你一份扩展阅读资料，lwIP的项目<a href=\"http://savannah.nongnu.org/projects/lwip/\">主页链接</a>，这里包含了大量相关资料，感兴趣的同学可以课后深入了解。另外，lwIP既可以移植到操作系统上运行，也可以在没有操作系统的情况下独立运行。</p><p>lwIP在结构上可分为四层：OS层、API层、核心层、硬件驱动层，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/60/ba5f483d0f1a6a5d241bde9c25e6d160.jpg?wh=2745x2524\" alt=\"\" title=\"lwIP架构图副本\"></p><p><strong>第一层</strong></p><p>MCU的业务层是lwIP的服务对象，也是其自身代码使用lwIP的地方。大部分时候我们都是从这里入手，通过netconn或lwip_api使用lwIP的各种功能函数。</p><p>在典型的TCP通信的客户端应用程序中，一般先要通过netconn_new创建一个struct netconn对象，然后调用netconn_connect连接到服务器，并返回成功或失败。成功后，可以调用netconn_write向服务器发送数据，也可以调用netconn_recv接收数据。最后，关闭连接并通过netconn_close释放资源。</p><p><strong>第二层</strong></p><p>lwIP的api层是netconn的功能代码所在的层，负责为上层代码提供netconn的api。习惯使用socket的同学也可以使用lwip_socket等函数，以标准的socket方式调用lwIP。新版本增加了http、mqtt等应用的代码，这些额外的应用对目前的物联网通信来说确实很方便。</p><p><strong>第三层</strong></p><p>lwIP的核心层存放了TCP/IP协议栈的核心代码，它不仅实现了大部分的TCP和UDP功能，还实现了DNS、ICMP、IGMP等协议，同时也实现了内存管理和网络接口功能。</p><p>该层提供了sys_arch模块设计，便于将lwIP移植到不同的操作系统，如线程创建、信号量、消息队列等功能。和操作系统相关的真正定义写在了lwip/include/sys.h文件中。</p><p><strong>第四层</strong></p><p>硬件驱动层提供PHY芯片驱动，用来匹配lwIP的使用。lwIP会调用该层的代码将组装好的数据包发送到网络，同时从网络接收数据包并进行分析，实现通信功能。</p><h3>lwIP的三套应用程序编程接口</h3><p>理清了架构，我们再说一说lwIP的应用程序编程接口，一共有三套。</p><p>原始API：原始的lwIP API。它通过事件回调机制开发应用程序。该应用编程接口提供了最佳的性能和优化的代码长度，但它增加了应用程序开发的复杂性。</p><p>Netconn API：是高级的有序API、需要实时操作系统（RTOS）的支持（提供进程间通信的方法）。Netconn API支持多线程。</p><p>BSD套接字API：类似伯克利的套接字API（在Netconn API上开发，需要注意NETCONN API 即为 Sequential API）。</p><p>对于以上三种接口，前者只需要裸机调用，后两种需要操作系统调用。因此，移植lwIP有两种方法，一种是只移植内核，不过这样之后只能基于RAW/Callback API编写应用程序。第二种是移植内核和上层API。这时应用程序编程可以使用三种API，即RAW/Callback API、顺序API和Socket API。</p><h2>lwIP执行流程</h2><p>现在，想必聪明的你已经理解了前文中的网络收发过程。</p><p>接下来，让我们顺着之前的思路来对应到lwIP在收发过程中的核心函数，具体过程我同样梳理了流程图。你可以结合图里关键的函数名以及步骤顺序，按这个顺序在IwIP代码中检索阅读。</p><h3>数据发送</h3><p>首先要说的是数据发送过程。</p><p>由于我们把lwIP作为Cosmos的一个内核组件来工作，自然要由lwIP接收来自内核上层发来的数据。内核上层首先会调用lwIP的netconn层的接口函数<strong>netconn_write</strong>，通过这个函数，数据正式流进lwIP组件层。</p><p>接着，netconn层调用lwIP组件的TCP层的接口函数tcp_write，在TCP层对数据首次进行打包。然后，TCP层将打包好的数据通过调用io_output函数，向下传递给lwIP组件的IP层，进行打包。</p><p>最后，IP层将打包好的数据发送给网卡驱动接口层netif，这里调用了实际的网卡驱动程序，将数据发送出去。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/2c/b31c19ff5c0f89729f0a3d2a42a2452c.jpg?wh=2455x3222\" alt=\"\" title=\"数据发送逻辑\"></p><h3>数据接收</h3><p>数据接收的步骤相比数据发送稍微多一些，但也不用害怕，跟住我的讲解思路一定可以理清这个过程。</p><p>数据接收需要应用程序首先调用lwIP的netconn层的netconn_recv接口。然后由netconn层调用sys_arch_mbox_fetch函数，进入监听等待相关的mbox。</p><p>接着，数据会进入网卡，驱动程序相关的函数负责把它复制到内存。再然后是调用ethernet_input函数，进入ethernet层。完成相关处理后，调用ip4_input函数，数据在lwIP组件的IP层对数据解包，进行相应处理之后，还会调用tcp_input函数，进入lwIP组件的TCP层对数据解包。</p><p>最后，调用sys_mbox_trypost函数把数据放入特定的mbox，也就是消息盒子里，这样等待监听的应用程序就能得到数据了。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/ef/d3e0530bb72990da0b56784a73e8ecef.jpg?wh=4030x2305\" alt=\"\" title=\"数据接收逻辑\"></p><p>在了解了lwIP组件收发数据的过程之后，就可以进行移植的相关工作了。lwIP的结构设计非常优秀，这让移植工作变得很容易。我们这里只要了解lwIP组件的<strong>sys_arch层的接口函数</strong>即可。</p><p>下面我们一起了解lwIP的移植细节。</p><h2>协议栈移植</h2><p>lwIP有两种移植模式，一种是NO_SYS，无操作系统模式，一种是有操作系统模式。用NO_SYS模式比较简单，你可以自行探索。</p><p>操作系统模式主要需要基于操作系统的 IPC 机制，对网络连接进行了抽象（信号量、邮箱/队列、互斥体等机制），从而保证内核与应用层API的通讯，这样做的好处是<strong>lwIP 内核线程可以只负责数据包的 TCP/IP 封装和拆封，而不用进行数据的应用层处理，从而极大地提高系统对网络数据包的处理效率。</strong></p><p>而这些操作系统模拟层的函数主要是在sys.h中声明的，我们一般在sys_arch.c文件中完成其定义。所以，我们很清楚，带操作系统的移植就是在无操作系统的基础上添加操作系统模拟层。</p><p>再接下来我们就看看操作系统模拟层的编写。</p><h3>有操作系统模式</h3><p>在之前的课程里我们已经正确实现了Cosmos操作系统了，现在我们就可以在Cosmos系统提供的IPC等机制基础之上，对照 sys.h 文件中声明的函数一一去实现了。</p><p>实际工程中完整移植网络栈，需要将后面表格里的这30多个函数全部实现。我会带你完成邮箱和系统线程相关的关键部分移植，其他函数的移植思路也大同小异，这里就不一一演示了。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/ff/51791a1817fca811aaa1c0240c4135ff.jpg?wh=902x1198\" alt=\"\" title=\"函数表格\"></p><p>从上表中我们可以发现，这些变量和函数主要面向信号量、互斥体和邮箱，包括创建、删除、释放和获取等各种操作，所以我们需要根据操作系统的规定来实现这些函数。</p><p>突然看到这么多功能，是不是有点慌？其实不用怕，因为这些功能的实现起来非常简单。首先，我们通过一个例子来看看邮箱功能的实现。</p><p>在lwIP中，用户代码通过邮箱与协议栈内部交互。邮箱本质上是指向数据的指针。API将指针传递给内核，内核通过这个指针访问数据，然后进行处理。相反，内核也是通过邮箱将数据传递给用户代码的。</p><p>具体代码如下，关键内容我都做了详细注释。</p><pre><code>/*创建一个空的邮箱。*/\nerr_t sys_mbox_new(sys_mbox_t *mbox, int size)\n{\nosMessageQDef(QUEUE, size, void *);\n*mbox = osMessageCreate(osMessageQ(QUEUE), NULL);\n#if SYS_STATS\n++lwip_stats.sys.mbox.used;\nif (lwip_stats.sys.mbox.max &lt; lwip_stats.sys.mbox.used) {\nlwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;\n}\n#endif /* SYS_STATS */\nif (*mbox == NULL)\nreturn ERR_MEM;\nreturn ERR_OK;\n}\n/*重新分配一个邮箱。如果邮箱被释放时，邮箱中仍有消息，在lwIP中这是出现编码错误的指示，并通知开发人员。*/\nvoid sys_mbox_free(sys_mbox_t *mbox)\n{\nif( osMessageWaiting(*mbox) )\n{\nportNOP();\n#if SYS_STATS\nlwip_stats.sys.mbox.err++;\n#endif /* SYS_STATS */\n}\nosMessageDelete(*mbox);\n#if SYS_STATS\n--lwip_stats.sys.mbox.used;\n#endif /* SYS_STATS */\n}\n/*发送消息到邮箱*/\nvoid sys_mbox_post(sys_mbox_t *mbox, void *data)\n{\nwhile(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);\n}\n/*尝试将消息发送到邮箱*/\nerr_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)\n{\nerr_t result;\nif ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)\n{\nresult = ERR_OK;\n}\nelse {\nresult = ERR_MEM;\n#if SYS_STATS\nlwip_stats.sys.mbox.err++;\n#endif /* SYS_STATS */\n}\nreturn result;\n}\n/*阻塞进程从邮箱获取消息*/\nu32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)\n{\nosEvent event;\nuint32_t starttime = osKernelSysTick();;\nif(timeout != 0)\n{\nevent = osMessageGet (*mbox, timeout);\nif(event.status == osEventMessage)\n{\n*msg = (void *)event.value.v;\nreturn (osKernelSysTick() - starttime);\n}\nelse\n{\nreturn SYS_ARCH_TIMEOUT;\n}\n}\nelse\n{\nevent = osMessageGet (*mbox, osWaitForever);\n*msg = (void *)event.value.v;\nreturn (osKernelSysTick() - starttime);\n}\n}\n/*尝试从邮箱获取消息*/\nu32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)\n{\nosEvent event;\nevent = osMessageGet (*mbox, 0);\nif(event.status == osEventMessage)\n{\n*msg = (void *)event.value.v;\nreturn ERR_OK;\n}\nelse\n{\nreturn SYS_MBOX_EMPTY;\n}\n}\n/*判断一个邮箱是否有效*/\nint sys_mbox_valid(sys_mbox_t *mbox)\n{\nif (*mbox == SYS_MBOX_NULL)\nreturn 0;\nelse\nreturn 1;\n}\n/*设置一个邮箱无效*/\nvoid sys_mbox_set_invalid(sys_mbox_t *mbox)\n{\n*mbox = SYS_MBOX_NULL;\n}\n// 创建一个新的信号量。而 &quot;count&quot;参数指示该信号量的初始状态\nerr_t sys_sem_new(sys_sem_t *sem, u8_t count)\n{\nosSemaphoreDef(SEM);\n*sem = osSemaphoreCreate (osSemaphore(SEM), 1);\nif(*sem == NULL)\n{\n#if SYS_STATS\n++lwip_stats.sys.sem.err;\n#endif /* SYS_STATS */\nreturn ERR_MEM;\n}\nif(count == 0) // Means it can't be taken\n{\nosSemaphoreWait(*sem,0);\n}\n#if SYS_STATS\n++lwip_stats.sys.sem.used;\nif (lwip_stats.sys.sem.max &lt; lwip_stats.sys.sem.used) {\nlwip_stats.sys.sem.max = lwip_stats.sys.sem.used;\n}\n#endif /* SYS_STATS */\nreturn ERR_OK;\n}\n</code></pre><p>此外还有一些函数也是协议栈需要的函数，特别是sys_thread_new函数，不但协议栈在初始化时需要用到，在后续我们实现各类基于lwIP的应用时也会用得到，它的具体实现如下。</p><pre><code>sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)\n{\nconst osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};\nreturn osThreadCreate(&amp;os_thread_def, arg);\n}\nosThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)\n{\nTaskHandle_t handle;\n#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )\nif((thread_def-&gt;buffer != NULL) &amp;&amp; (thread_def-&gt;controlblock != NULL)) {\nhandle = xTaskCreateStatic((TaskFunction_t)thread_def-&gt;pthread,(const portCHAR *)thread_def-&gt;name,\nthread_def-&gt;stacksize, argument, makeFreeRtosPriority(thread_def-&gt;tpriority),\nthread_def-&gt;buffer, thread_def-&gt;controlblock);\n}\nelse {\nif (xTaskCreate((TaskFunction_t)thread_def-&gt;pthread,(const portCHAR *)thread_def-&gt;name,\nthread_def-&gt;stacksize, argument, makeFreeRtosPriority(thread_def-&gt;tpriority),\n&amp;handle) != pdPASS) {\nreturn NULL;\n}\n}\n#elif( configSUPPORT_STATIC_ALLOCATION == 1 )\nhandle = xTaskCreateStatic((TaskFunction_t)thread_def-&gt;pthread,(const portCHAR *)thread_def-&gt;name,\nthread_def-&gt;stacksize, argument, makeFreeRtosPriority(thread_def-&gt;tpriority),\nthread_def-&gt;buffer, thread_def-&gt;controlblock);\n#else\nif (xTaskCreate((TaskFunction_t)thread_def-&gt;pthread,(const portCHAR *)thread_def-&gt;name,\nthread_def-&gt;stacksize, argument, makeFreeRtosPriority(thread_def-&gt;tpriority),\n&amp;handle) != pdPASS) {\nreturn NULL;\n}\n#endif\nreturn handle;\n}\n</code></pre><p>至此，基于Cosmos操作系统移植lwIP协议栈的关键部分就算完成了。</p><h2>重点回顾</h2><p>好，这节课的内容告一段落了，我来给你做个总结。</p><p>我们首先从数据发送接收的视角，观察了数据从用户态到内核态，再从内核态到流动到用户态的全过程。</p><p>接着，我们发现网络协议栈移植与DMA、内核的IPC、信号量、DMA等机制密切相关。理解网络栈移植的关键步骤，能够让我们更好地理解内核特性在工程中是如何应用的。</p><p>最后，我们实现了将lwIP网络协议栈的关键部分移植到Cosmos操作系统下。不过这节课我带你实现了邮箱和系统线程相关的关键部分，其他函数移植道理相通，感兴趣的同学可以自行探索。</p><h2>思考题</h2><p>我们已经了解到了操作系统内核和网络协议栈的关系，可是网络协议栈真的一定只能放在内核态实现么？</p><p>欢迎你在留言区跟我交流探讨。也欢迎你把这节课分享给自己的朋友、同事。</p><p>我是LMOS，我们下节课见！</p>","neighbors":{"left":{"article_title":"36 | 从URL到网卡：如何全局观察网络数据流动？","id":401467},"right":{"article_title":"38 | 从单排到团战：详解操作系统的宏观网络架构","id":404013}},"comments":[{"had_liked":false,"id":305246,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":true,"comment_ctime":1627891933,"is_pvip":false,"replies":[{"id":"110418","content":"相逢是缘你好，感谢你的留言。需要自己在Cosmos实现 ，这里代码只是为了演示移植的思路。先理解移植的核心思想即可，暂时不必深究。受限于工程规模，Cosmos系统的网络栈移植将会安排在项目正式开源之后排期开发，同学们敬请期待哈～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1627906376,"ip_address":"","comment_id":305246,"utype":2}],"discussion_count":1,"race_medal":0,"score":"9.2233720513676001e+18","product_id":100078401,"comment_content":"我们的 Cosmos 操作系统已经实现了xTaskCreateStatic、osSemaphoreCreate 等这些函数了吗？<br>一路跟着课程过来，没有发现呢，37课代码里面也没有呢","like_count":3,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524333,"discussion_content":"相逢是缘你好，感谢你的留言。需要自己在Cosmos实现 ，这里代码只是为了演示移植的思路。先理解移植的核心思想即可，暂时不必深究。受限于工程规模，Cosmos系统的网络栈移植将会安排在项目正式开源之后排期开发，同学们敬请期待哈～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627906376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305143,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1627860536,"is_pvip":false,"replies":[{"id":"110450","content":"期待老铁能够实现Cosmos用户待协议栈","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627954738,"ip_address":"","comment_id":305143,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35987598904","product_id":100078401,"comment_content":"由于历史的原因，主流的操作系统都是在内核实现网络协议栈，但是由于网络环境的日益复杂，用户对服务稳定性的要求越来越高。<br>内核网络协议栈的封闭性是一个很大的桎梏点，因此非内核网络协议栈早就被很多人实现了，例如 DPDK，号称能解决 c10m 问题。虽然现在内核协议栈仍然是主流，但可以预见的是非内核协议栈会越来被人接受，解决更多的实际需求。","like_count":9,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524294,"discussion_content":"期待老铁能够实现Cosmos用户待协议栈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640144,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoaJI2EYKYEmIwtEECSg8RqlHe3OVJ7yOfH6NdPZ7vGIFTneHvJ2EdTPticoIvvIcV649geuPjUqWQ/132","nickname":"cambrian","note":"","ucode":"794BF51C7BB33A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389724,"discussion_content":"dpdk xdp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629389651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305270,"user_name":"青玉白露","can_delete":false,"product_type":"c1","uid":2619436,"ip_address":"","ucode":"96FE2D4D2B94A0","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","comment_is_top":false,"comment_ctime":1627897685,"is_pvip":false,"replies":[{"id":"110448","content":"6666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627954596,"ip_address":"","comment_id":305270,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14512799573","product_id":100078401,"comment_content":"网络协议栈也可以放在用户态来执行。<br>需要注意的是，如今网速加快、网络环境复杂，多核的CPU在处理高速的网络请求时也会有很大的性能局限性。<br>而将网络协议栈放在用户态，就可以实现高度自定义，有关这方面的知识可以参考这个博客：https:&#47;&#47;www.cnblogs.com&#47;jmilkfan-fanguiju&#47;p&#47;12789805.html","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524341,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590595,"discussion_content":"牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665908741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305403,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1627961020,"is_pvip":false,"replies":[{"id":"110477","content":"感谢分享～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1627986765,"ip_address":"","comment_id":305403,"utype":2}],"discussion_count":3,"race_medal":0,"score":"10217895612","product_id":100078401,"comment_content":"找到个 lwIP的教程。<br>https:&#47;&#47;www.kancloud.cn&#47;jiejietop&#47;tcpip&#47;988547","like_count":2,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524375,"discussion_content":"感谢分享～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627986765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387820,"discussion_content":"还可以看下这个，https://www.artila.com/download/RIO/RIO-2010PG/lwip.pdf","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628434568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590594,"discussion_content":"牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665908728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329792,"user_name":"kocgockohgoh王裒","can_delete":false,"product_type":"c1","uid":2617112,"ip_address":"","ucode":"35EFABDE0D713D","user_header":"https://static001.geekbang.org/account/avatar/00/27/ef/18/6a620733.jpg","comment_is_top":false,"comment_ctime":1641540833,"is_pvip":false,"replies":[{"id":"120231","content":"操作系统","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641779314,"ip_address":"","comment_id":329792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641540833","product_id":100078401,"comment_content":"请问cosmos到底用的是nosys模式+ 模拟层实现的函数    还是带操作系统模式啊 有点晕","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544910,"discussion_content":"操作系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641779315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320044,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1636055290,"is_pvip":false,"replies":[{"id":"116086","content":"是的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1636139926,"ip_address":"","comment_id":320044,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636055290","product_id":100078401,"comment_content":"放在用户态是不是也有一个好处？由于网络数据包过来，假如原来给它分配的内存空间不够用（关键是还不能一直排队等）操作系统还要重新忙下手中的活，重新为它分配新的内存空间。再干别的，放在用户态的话。需求跟着用户态程序走（分配内存资源）翻译等任务跟着用户态程序走。操作系统不用在此之外重新去操心网络数据包的文件情况（例如，视频，照片等。），只需配合用户态程序工作就行（用户态需要调节用到的内核态指令）。这样大大利于网络的流畅稳定。<br>就像原来是参谋本部，管这管哪，中间存在很多需要通信功能问题（需要与用户态程序反复沟通，浪费时间和资源）现在是管大放小，实时任务由下面的将军（用户态程序）操心，操作系统管好后勤配合工作就行。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529852,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636139926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305142,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1627860031,"is_pvip":false,"replies":[{"id":"110451","content":"是的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627954750,"ip_address":"","comment_id":305142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627860031","product_id":100078401,"comment_content":"协议栈应该也可以放在用户态实现，这时候就需要绕过内核的协议栈，直接和网卡驱动程序通信","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524293,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305139,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1205777,"ip_address":"","ucode":"EB19F80070FE23","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/11/f7408e3e.jpg","comment_is_top":false,"comment_ctime":1627859103,"is_pvip":false,"replies":[{"id":"110452","content":"是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627954777,"ip_address":"","comment_id":305139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627859103","product_id":100078401,"comment_content":"理解软件的设计思想，最重要的是先要理解需求。而内核中的数据流转也只是为了满足网络收发的需求而进行的设计。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524291,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}