{"id":102562,"title":"21 | Python并发编程之Futures","content":"<p>你好，我是景霄。</p><p>无论对于哪门语言，并发编程都是一项很常用很重要的技巧。比如我们上节课所讲的很常见的爬虫，就被广泛应用在工业界的各个领域。我们每天在各个网站、各个App上获取的新闻信息，很大一部分便是通过并发编程版的爬虫获得。</p><p>正确合理地使用并发编程，无疑会给我们的程序带来极大的性能提升。今天这节课，我就带你一起来学习理解、运用Python中的并发编程——Futures。</p><h2>区分并发和并行</h2><p>在我们学习并发编程时，常常同时听到并发（Concurrency）和并行（Parallelism）这两个术语，这两者经常一起使用，导致很多人以为它们是一个意思，其实不然。</p><p>首先你要辨别一个误区，在Python中，并发并不是指同一时刻有多个操作（thread、task）同时进行。相反，某个特定的时刻，它只允许有一个操作发生，只不过线程/任务之间会互相切换，直到完成。我们来看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/3f/37cbce0eb67909990d83f21642fb863f.png?wh=1620*524\" alt=\"\"></p><p>图中出现了thread和task两种切换顺序的不同方式，分别对应Python中并发的两种形式——threading和asyncio。</p><p>对于threading，操作系统知道每个线程的所有信息，因此它会做主在适当的时候做线程切换。很显然，这样的好处是代码容易书写，因为程序员不需要做任何切换操作的处理；但是切换线程的操作，也有可能出现在一个语句执行的过程中（比如 x += 1），这样就容易出现race condition的情况。</p><!-- [[[read_end]]] --><p>而对于asyncio，主程序想要切换任务时，必须得到此任务可以被切换的通知，这样一来也就可以避免刚刚提到的 race condition的情况。</p><p>至于所谓的并行，指的才是同一时刻、同时发生。Python中的multi-processing便是这个意思，对于multi-processing，你可以简单地这么理解：比如你的电脑是6核处理器，那么在运行程序时，就可以强制Python开6个进程，同时执行，以加快运行速度，它的原理示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/3c/f6b4009c8a8589e8ec1a2bb10d4e183c.png?wh=1590*566\" alt=\"\"></p><p>对比来看，</p><ul>\n<li>并发通常应用于I/O操作频繁的场景，比如你要从网站上下载多个文件，I/O操作的时间可能会比CPU运行处理的时间长得多。</li>\n<li>而并行则更多应用于CPU heavy的场景，比如MapReduce中的并行计算，为了加快运行速度，一般会用多台机器、多个处理器来完成。</li>\n</ul><h2>并发编程之Futures</h2><h3>单线程与多线程性能比较</h3><p>接下来，我们一起通过具体的实例，从代码的角度来理解并发编程中的Futures，并进一步来比较其与单线程的性能区别。</p><p>假设我们有一个任务，是下载一些网站的内容并打印。如果用单线程的方式，它的代码实现如下所示（为了简化代码，突出主题，此处我忽略了异常处理）：</p><pre><code>import requests\nimport time\n\ndef download_one(url):\n    resp = requests.get(url)\n    print('Read {} from {}'.format(len(resp.content), url))\n    \ndef download_all(sites):\n    for site in sites:\n        download_one(site)\n\ndef main():\n    sites = [\n        'https://en.wikipedia.org/wiki/Portal:Arts',\n        'https://en.wikipedia.org/wiki/Portal:History',\n        'https://en.wikipedia.org/wiki/Portal:Society',\n        'https://en.wikipedia.org/wiki/Portal:Biography',\n        'https://en.wikipedia.org/wiki/Portal:Mathematics',\n        'https://en.wikipedia.org/wiki/Portal:Technology',\n        'https://en.wikipedia.org/wiki/Portal:Geography',\n        'https://en.wikipedia.org/wiki/Portal:Science',\n        'https://en.wikipedia.org/wiki/Computer_science',\n        'https://en.wikipedia.org/wiki/Python_(programming_language)',\n        'https://en.wikipedia.org/wiki/Java_(programming_language)',\n        'https://en.wikipedia.org/wiki/PHP',\n        'https://en.wikipedia.org/wiki/Node.js',\n        'https://en.wikipedia.org/wiki/The_C_Programming_Language',\n        'https://en.wikipedia.org/wiki/Go_(programming_language)'\n    ]\n    start_time = time.perf_counter()\n    download_all(sites)\n    end_time = time.perf_counter()\n    print('Download {} sites in {} seconds'.format(len(sites), end_time - start_time))\n    \nif __name__ == '__main__':\n    main()\n\n# 输出\nRead 129886 from https://en.wikipedia.org/wiki/Portal:Arts\nRead 184343 from https://en.wikipedia.org/wiki/Portal:History\nRead 224118 from https://en.wikipedia.org/wiki/Portal:Society\nRead 107637 from https://en.wikipedia.org/wiki/Portal:Biography\nRead 151021 from https://en.wikipedia.org/wiki/Portal:Mathematics\nRead 157811 from https://en.wikipedia.org/wiki/Portal:Technology\nRead 167923 from https://en.wikipedia.org/wiki/Portal:Geography\nRead 93347 from https://en.wikipedia.org/wiki/Portal:Science\nRead 321352 from https://en.wikipedia.org/wiki/Computer_science\nRead 391905 from https://en.wikipedia.org/wiki/Python_(programming_language)\nRead 321417 from https://en.wikipedia.org/wiki/Java_(programming_language)\nRead 468461 from https://en.wikipedia.org/wiki/PHP\nRead 180298 from https://en.wikipedia.org/wiki/Node.js\nRead 56765 from https://en.wikipedia.org/wiki/The_C_Programming_Language\nRead 324039 from https://en.wikipedia.org/wiki/Go_(programming_language)\nDownload 15 sites in 2.464231112999869 seconds\n</code></pre><p>这种方式应该是最直接也最简单的：</p><ul>\n<li>先是遍历存储网站的列表；</li>\n<li>然后对当前网站执行下载操作；</li>\n<li>等到当前操作完成后，再对下一个网站进行同样的操作，一直到结束。</li>\n</ul><p>我们可以看到总共耗时约2.4s。单线程的优点是简单明了，但是明显效率低下，因为上述程序的绝大多数时间，都浪费在了I/O等待上。程序每次对一个网站执行下载操作，都必须等到前一个网站下载完成后才能开始。如果放在实际生产环境中，我们需要下载的网站数量至少是以万为单位的，不难想象，这种方案根本行不通。</p><p>接着我们再来看，多线程版本的代码实现：</p><pre><code>import concurrent.futures\nimport requests\nimport threading\nimport time\n\ndef download_one(url):\n    resp = requests.get(url)\n    print('Read {} from {}'.format(len(resp.content), url))\n\n\ndef download_all(sites):\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_one, sites)\n\ndef main():\n    sites = [\n        'https://en.wikipedia.org/wiki/Portal:Arts',\n        'https://en.wikipedia.org/wiki/Portal:History',\n        'https://en.wikipedia.org/wiki/Portal:Society',\n        'https://en.wikipedia.org/wiki/Portal:Biography',\n        'https://en.wikipedia.org/wiki/Portal:Mathematics',\n        'https://en.wikipedia.org/wiki/Portal:Technology',\n        'https://en.wikipedia.org/wiki/Portal:Geography',\n        'https://en.wikipedia.org/wiki/Portal:Science',\n        'https://en.wikipedia.org/wiki/Computer_science',\n        'https://en.wikipedia.org/wiki/Python_(programming_language)',\n        'https://en.wikipedia.org/wiki/Java_(programming_language)',\n        'https://en.wikipedia.org/wiki/PHP',\n        'https://en.wikipedia.org/wiki/Node.js',\n        'https://en.wikipedia.org/wiki/The_C_Programming_Language',\n        'https://en.wikipedia.org/wiki/Go_(programming_language)'\n    ]\n    start_time = time.perf_counter()\n    download_all(sites)\n    end_time = time.perf_counter()\n    print('Download {} sites in {} seconds'.format(len(sites), end_time - start_time))\n\nif __name__ == '__main__':\n    main()\n\n## 输出\nRead 151021 from https://en.wikipedia.org/wiki/Portal:Mathematics\nRead 129886 from https://en.wikipedia.org/wiki/Portal:Arts\nRead 107637 from https://en.wikipedia.org/wiki/Portal:Biography\nRead 224118 from https://en.wikipedia.org/wiki/Portal:Society\nRead 184343 from https://en.wikipedia.org/wiki/Portal:History\nRead 167923 from https://en.wikipedia.org/wiki/Portal:Geography\nRead 157811 from https://en.wikipedia.org/wiki/Portal:Technology\nRead 91533 from https://en.wikipedia.org/wiki/Portal:Science\nRead 321352 from https://en.wikipedia.org/wiki/Computer_science\nRead 391905 from https://en.wikipedia.org/wiki/Python_(programming_language)\nRead 180298 from https://en.wikipedia.org/wiki/Node.js\nRead 56765 from https://en.wikipedia.org/wiki/The_C_Programming_Language\nRead 468461 from https://en.wikipedia.org/wiki/PHP\nRead 321417 from https://en.wikipedia.org/wiki/Java_(programming_language)\nRead 324039 from https://en.wikipedia.org/wiki/Go_(programming_language)\nDownload 15 sites in 0.19936635800002023 seconds\n</code></pre><p>非常明显，总耗时是0.2s左右，效率一下子提升了10倍多。</p><p>我们具体来看这段代码，它是多线程版本和单线程版的主要区别所在：</p><pre><code>   with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_one, sites)\n</code></pre><p>这里我们创建了一个线程池，总共有5个线程可以分配使用。executer.map()与前面所讲的Python内置的map()函数类似，表示对sites中的每一个元素，并发地调用函数download_one()。</p><p>顺便提一下，在download_one()函数中，我们使用的requests.get()方法是线程安全的（thread-safe），因此在多线程的环境下，它也可以安全使用，并不会出现race condition的情况。</p><p>另外，虽然线程的数量可以自己定义，但是线程数并不是越多越好，因为线程的创建、维护和删除也会有一定的开销。所以如果你设置的很大，反而可能会导致速度变慢。我们往往需要根据实际的需求做一些测试，来寻找最优的线程数量。</p><p>当然，我们也可以用并行的方式去提高程序运行效率。你只需要在download_all()函数中，做出下面的变化即可：</p><pre><code>with futures.ThreadPoolExecutor(workers) as executor\n=&gt;\nwith futures.ProcessPoolExecutor() as executor: \n</code></pre><p>在需要修改的这部分代码中，函数ProcessPoolExecutor()表示创建进程池，使用多个进程并行的执行程序。不过，这里我们通常省略参数workers，因为系统会自动返回CPU的数量作为可以调用的进程数。</p><p>我刚刚提到过，并行的方式一般用在CPU heavy的场景中，因为对于I/O heavy的操作，多数时间都会用于等待，相比于多线程，使用多进程并不会提升效率。反而很多时候，因为CPU数量的限制，会导致其执行效率不如多线程版本。</p><h3>到底什么是  Futures ？</h3><p>Python中的Futures模块，位于concurrent.futures和asyncio中，它们都表示带有延迟的操作。Futures会将处于等待状态的操作包裹起来放到队列中，这些操作的状态随时可以查询，当然，它们的结果或是异常，也能够在操作完成后被获取。</p><p>通常来说，作为用户，我们不用考虑如何去创建Futures，这些Futures底层都会帮我们处理好。我们要做的，实际上是去schedule这些Futures的执行。</p><p>比如，Futures中的Executor类，当我们执行executor.submit(func)时，它便会安排里面的func()函数执行，并返回创建好的future实例，以便你之后查询调用。</p><p>这里再介绍一些常用的函数。Futures中的方法done()，表示相对应的操作是否完成——True表示完成，False表示没有完成。不过，要注意，done()是non-blocking的，会立即返回结果。相对应的add_done_callback(fn)，则表示Futures完成后，相对应的参数函数fn，会被通知并执行调用。</p><p>Futures中还有一个重要的函数result()，它表示当future完成后，返回其对应的结果或异常。而as_completed(fs)，则是针对给定的future迭代器fs，在其完成后，返回完成后的迭代器。</p><p>所以，上述例子也可以写成下面的形式：</p><pre><code>import concurrent.futures\nimport requests\nimport time\n\ndef download_one(url):\n    resp = requests.get(url)\n    print('Read {} from {}'.format(len(resp.content), url))\n\ndef download_all(sites):\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        to_do = []\n        for site in sites:\n            future = executor.submit(download_one, site)\n            to_do.append(future)\n            \n        for future in concurrent.futures.as_completed(to_do):\n            future.result()\ndef main():\n    sites = [\n        'https://en.wikipedia.org/wiki/Portal:Arts',\n        'https://en.wikipedia.org/wiki/Portal:History',\n        'https://en.wikipedia.org/wiki/Portal:Society',\n        'https://en.wikipedia.org/wiki/Portal:Biography',\n        'https://en.wikipedia.org/wiki/Portal:Mathematics',\n        'https://en.wikipedia.org/wiki/Portal:Technology',\n        'https://en.wikipedia.org/wiki/Portal:Geography',\n        'https://en.wikipedia.org/wiki/Portal:Science',\n        'https://en.wikipedia.org/wiki/Computer_science',\n        'https://en.wikipedia.org/wiki/Python_(programming_language)',\n        'https://en.wikipedia.org/wiki/Java_(programming_language)',\n        'https://en.wikipedia.org/wiki/PHP',\n        'https://en.wikipedia.org/wiki/Node.js',\n        'https://en.wikipedia.org/wiki/The_C_Programming_Language',\n        'https://en.wikipedia.org/wiki/Go_(programming_language)'\n    ]\n    start_time = time.perf_counter()\n    download_all(sites)\n    end_time = time.perf_counter()\n    print('Download {} sites in {} seconds'.format(len(sites), end_time - start_time))\n\nif __name__ == '__main__':\n    main()\n\n# 输出\nRead 129886 from https://en.wikipedia.org/wiki/Portal:Arts\nRead 107634 from https://en.wikipedia.org/wiki/Portal:Biography\nRead 224118 from https://en.wikipedia.org/wiki/Portal:Society\nRead 158984 from https://en.wikipedia.org/wiki/Portal:Mathematics\nRead 184343 from https://en.wikipedia.org/wiki/Portal:History\nRead 157949 from https://en.wikipedia.org/wiki/Portal:Technology\nRead 167923 from https://en.wikipedia.org/wiki/Portal:Geography\nRead 94228 from https://en.wikipedia.org/wiki/Portal:Science\nRead 391905 from https://en.wikipedia.org/wiki/Python_(programming_language)\nRead 321352 from https://en.wikipedia.org/wiki/Computer_science\nRead 180298 from https://en.wikipedia.org/wiki/Node.js\nRead 321417 from https://en.wikipedia.org/wiki/Java_(programming_language)\nRead 468421 from https://en.wikipedia.org/wiki/PHP\nRead 56765 from https://en.wikipedia.org/wiki/The_C_Programming_Language\nRead 324039 from https://en.wikipedia.org/wiki/Go_(programming_language)\nDownload 15 sites in 0.21698231499976828 seconds\n</code></pre><p>这里，我们首先调用executor.submit()，将下载每一个网站的内容都放进future队列to_do，等待执行。然后是as_completed()函数，在future完成后，便输出结果。</p><p>不过，这里要注意，future列表中每个future完成的顺序，和它在列表中的顺序并不一定完全一致。到底哪个先完成、哪个后完成，取决于系统的调度和每个future的执行时间。</p><h3>为什么多线程每次只能有一个线程执行？</h3><p>前面我说过，同一时刻，Python主程序只允许有一个线程执行，所以Python的并发，是通过多线程的切换完成的。你可能会疑惑这到底是为什么呢？</p><p>这里我简单提一下全局解释器锁的概念，具体内容后面会讲到。</p><p>事实上，Python的解释器并不是线程安全的，为了解决由此带来的race condition等问题，Python便引入了全局解释器锁，也就是同一时刻，只允许一个线程执行。当然，在执行I/O操作时，如果一个线程被block了，全局解释器锁便会被释放，从而让另一个线程能够继续执行。</p><h2>总结</h2><p>这节课，我们首先学习了Python中并发和并行的概念与区别。</p><ul>\n<li>并发，通过线程和任务之间互相切换的方式实现，但同一时刻，只允许有一个线程或任务执行。</li>\n<li>而并行，则是指多个进程同时执行。</li>\n</ul><p>并发通常用于I/O操作频繁的场景，而并行则适用于CPU heavy的场景。</p><p>随后，我们通过下载网站内容的例子，比较了单线程和运用Futures的多线程版本的性能差异。显而易见，合理地运用多线程，能够极大地提高程序运行效率。</p><p>我们还一起学习了Futures的具体原理，介绍了一些常用函数比如done()、result()、as_completed()等的用法，并辅以实例加以理解。</p><p>要注意，Python中之所以同一时刻只允许一个线程运行，其实是由于全局解释器锁的存在。但是对I/O操作而言，当其被block的时候，全局解释器锁便会被释放，使其他线程继续执行。</p><h2>思考题</h2><p>最后给你留一道思考题。你能否通过查阅相关文档，为今天所讲的这个下载网站内容的例子，加上合理的异常处理，让程序更加稳定健壮呢？欢迎在留言区写下你的思考和答案，也欢迎你把今天的内容分享给你的同事朋友，我们一起交流、一起进步。</p><p></p>","neighbors":{"left":{"article_title":"20 | 揭秘 Python 协程","id":101855},"right":{"article_title":"22 | 并发编程之Asyncio","id":103358}},"comments":[{"had_liked":false,"id":107378,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1561522495,"is_pvip":false,"replies":[{"id":"39011","content":"回答的很对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561618913,"ip_address":"","comment_id":107378,"utype":1}],"discussion_count":4,"race_medal":0,"score":"272144462143","product_id":100026901,"comment_content":"思考题：<br>1. request.get 会触发：ConnectionError, TimeOut, HTTPError等，所有显示抛出的异常都是继承requests.exceptions.RequestException <br>2. executor.map(download_one, urls) 会触发concurrent.futures.TimeoutError<br>3. result() 会触发Timeout，CancelledError<br>4. as_completed() 会触发TimeOutError","like_count":64,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455492,"discussion_content":"回答的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561618913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310337,"discussion_content":"编写异常处理感觉不知道是不是很麻烦，你为什么不写写具体实现，是太麻烦但很简单，还是不仅麻烦，而且不好写？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601783130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461041,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4b/31/2f517a3d.jpg","nickname":"DR.HYDRA","note":"","ucode":"714965AB27878A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75897,"discussion_content":"请问如何找到，这些方法所会触发哪些exception的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575794169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1038415,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","nickname":"KaitoShy","note":"","ucode":"E2E2E9BD3F5048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1461041,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4b/31/2f517a3d.jpg","nickname":"DR.HYDRA","note":"","ucode":"714965AB27878A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76074,"discussion_content":"官方文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575808530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":75897,"ip_address":""},"score":76074,"extra":""}]}]},{"had_liked":false,"id":107611,"user_name":"BotterZhang","can_delete":false,"product_type":"c1","uid":1071717,"ip_address":"","ucode":"1378D5C34AFD42","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/65/cbe70852.jpg","comment_is_top":false,"comment_ctime":1561564740,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"194835093060","product_id":100026901,"comment_content":"关于concurrent写过一篇学习笔记：<br>https:&#47;&#47;www.zhangqibot.com&#47;post&#47;python-concurrent-futures&#47;<br>Python实现多线程&#47;多进程，大家常常会用到标准库中的threading和multiprocessing模块。<br>但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，实现了对threading和multiprocessing的进一步抽象，使得开发者只需编写少量代码即可让程序实现并行计算。","like_count":45,"discussions":[{"author":{"id":1946744,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b4/78/47011c75.jpg","nickname":"xavier","note":"","ucode":"E3C38864D3C8E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389405,"discussion_content":"博客挂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629266569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389020,"discussion_content":"博客挂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629094699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2369413,"avatar":"https://static001.geekbang.org/account/avatar/00/24/27/85/ddeeaf30.jpg","nickname":"dived","note":"","ucode":"141916A3BAF5A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374721,"discussion_content":"博客挂了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621325766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/21/2f/b29e8af8.jpg","nickname":"轻风悠扬","note":"","ucode":"F2276CE113BED1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267329,"discussion_content":"总结的很好，感谢提供","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589632890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107361,"user_name":"SCAR","can_delete":false,"product_type":"c1","uid":1031209,"ip_address":"","ucode":"38C0927FA3C5FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/29/022905e6.jpg","comment_is_top":false,"comment_ctime":1561518836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"130410537716","product_id":100026901,"comment_content":"future之与中文理解起来其实挺微妙，不过这与生活中大家熟知的期物在底层逻辑上是一致的，future英文词义中就有期货的意思，都是封存一个东西，平常你该干嘛就干嘛，可以不用去理会，在未来的某个时候去看结果就行，只是python中那个物是对象而已。而关键词是延迟，异步。<br>思考题：添加异常处理<br>def download_all(sites):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>        to_do = {}<br>        for site in sites:<br>            future = executor.submit(download_one, site)    <br>            to_do[future]=site<br>            <br>        for future in concurrent.futures.as_completed(to_do):<br>            try：<br>                res=future.result()<br>            except request.exceptions.HTTPError as e:<br>                e_msg=‘HTTP erro’<br>            except request.exceptions.ConnectionError as e:<br>                e_msg=‘Connection erro’<br>            else:<br>                e_msg=&#39;&#39;<br>            if  e_msg:<br>                site=to_do[future]<br>                Print(‘Error is {} from {}’.format(e_msg,site))<br>","like_count":30},{"had_liked":false,"id":153078,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1574154514,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"61703696658","product_id":100026901,"comment_content":"老师，我感觉您对并发和并行的理解是有问题的，并发是针对最初的单核CPU的，并行是针对现代的多核CPU，并且所有的调度行为都是基于线程的，一个进程中至少有一个线程，资源的分配是基与进程的，并不是只有多进程模型才可以同时在多个核心上运行的。","like_count":14,"discussions":[{"author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326070,"discussion_content":"确实是有歧义，多线程也可以被调度到多个CPU上，只是由于python的GIL的存在，不允许多个线程同时在多个CPU上运行吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605512348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326697,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605664354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326070,"ip_address":""},"score":326697,"extra":""},{"author":{"id":2320032,"avatar":"https://static001.geekbang.org/account/avatar/00/23/66/a0/c00fb984.jpg","nickname":"你说呢","note":"","ucode":"860F6FED5EFF15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1590953,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/a9/70fa676f.jpg","nickname":"Luke","note":"","ucode":"2C8A1FAB8B6301","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358024,"discussion_content":"你说的对，多线程可以在多核CPU上运行，但不允许同时运行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615904870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326070,"ip_address":""},"score":358024,"extra":""}]},{"author":{"id":2631573,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","nickname":"溜溜球","note":"","ucode":"BBA5E4405D9902","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576866,"discussion_content":"操作系统存在内核线程是允许多个cpu并行的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655820266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228852,"discussion_content":"老师理解的没有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586583463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1633352,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6LWpXbPSmCJI5N3EV3jOoUHaR3qKNhIzXnGDlyLuMqBCttZn1wSDbIsANIicacgMiaicib5iaUBYhcHA/132","nickname":"Geek_d36e4b","note":"","ucode":"ACBC2B93B0E3B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69053,"discussion_content":"后面GIL的那节有讲 , python的多线程实际上是伪并行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575255082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1633352,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6LWpXbPSmCJI5N3EV3jOoUHaR3qKNhIzXnGDlyLuMqBCttZn1wSDbIsANIicacgMiaicib5iaUBYhcHA/132","nickname":"Geek_d36e4b","note":"","ucode":"ACBC2B93B0E3B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70212,"discussion_content":"看到了，我说的是操作系统","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575336611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69053,"ip_address":""},"score":70212,"extra":""},{"author":{"id":1063313,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/91/16122ee6.jpg","nickname":"刘波3S","note":"","ucode":"94C3F11ECC92BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1633352,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6LWpXbPSmCJI5N3EV3jOoUHaR3qKNhIzXnGDlyLuMqBCttZn1wSDbIsANIicacgMiaicib5iaUBYhcHA/132","nickname":"Geek_d36e4b","note":"","ucode":"ACBC2B93B0E3B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334455,"discussion_content":"老师说的“GIL&#34; 在一个线程I/O阻塞的情况下是可以释放给另一个线程，这么说不算伪并行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607852567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69053,"ip_address":""},"score":334455,"extra":""}]}]},{"had_liked":false,"id":217558,"user_name":"Steve","can_delete":false,"product_type":"c1","uid":1072131,"ip_address":"","ucode":"9C4E9E62A79C3A","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/03/370ebbc8.jpg","comment_is_top":false,"comment_ctime":1589533639,"is_pvip":false,"replies":[{"id":"84949","content":"可以用 python 线程安全的容器，例如 Queue. 如果内存存不下，可以用数据库，而不是直接写文件。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1593301793,"ip_address":"","comment_id":217558,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27359337415","product_id":100026901,"comment_content":"老师，我有一个很类似的场景。之前我用单线程去下载所有页面。然后在每个页面解析出需要的内容放入一个集合里。如果改成并发的实现，多线程写一个集合(写文件也类似)，是不是有线程安全的问题。有没有小例子可以学习一下~","like_count":6,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495180,"discussion_content":"可以用 python 线程安全的容器，例如 Queue. 如果内存存不下，可以用数据库，而不是直接写文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593301793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108739,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1561870501,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27331674277","product_id":100026901,"comment_content":"需要加异常的应该就只有一个地方：requests.get()发送网页请求的时候。其它地方不涉及IO。也不涉及数据类型变化，不用做数据类型判断。<br>由于不能访问wiki，所以网页改了成了国内的。<br>-- ps: 和0.2s比起来太慢了。<br><br># -*- encoding -*-<br>&#39;&#39;&#39;<br>py 3.6<br>sulime<br>&#39;&#39;&#39;<br>import concurrent.futures<br>import threading<br>import requests<br>import time<br><br>now = lambda: time.perf_counter()<br><br>def download_one(url):<br>    try:<br>        req = requests.get(url)<br>        req.raise_for_status()<br>        print(&#39;Read {} from {}&#39;.format(len(req.content), url))<br>    except:<br>        print(&#39;404&#39;)<br><br>def download_all(sites):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>        executor.map(download_one, sites)<br><br>def main():<br>    sites = [<br>            &#39;https:&#47;&#47;www.baidu.com&#47;&#39;,<br>            &#39;https:&#47;&#47;pypi.org&#47;&#39;,<br>            &#39;https:&#47;&#47;www.sina.com.cn&#47;&#39;,<br>            &#39;https:&#47;&#47;www.163.com&#47;&#39;,<br>            &#39;https:&#47;&#47;news.qq.com&#47;&#39;,<br>            &#39;http:&#47;&#47;www.ifeng.com&#47;&#39;,<br>            &#39;http:&#47;&#47;www.ce.cn&#47;&#39;,<br>            &#39;https:&#47;&#47;news.baidu.com&#47;&#39;,<br>            &#39;http:&#47;&#47;www.people.com.cn&#47;&#39;,<br>            &#39;http:&#47;&#47;www.ce.cn&#47;&#39;,<br>            &#39;https:&#47;&#47;news.163.com&#47;&#39;,<br>            &#39;http:&#47;&#47;news.sohu.com&#47;&#39;<br>            ]<br>    start = now()<br>    download_all(sites)<br>    print(&#39;Download {} sites in {} s&#39;.format(len(sites), now() - start))<br><br>if __name__ == &#39;__main__&#39;:<br>    main()<br><br># Read 2443 from https:&#47;&#47;www.baidu.com&#47;<br># Read 6216 from https:&#47;&#47;news.qq.com&#47;<br># Read 699004 from https:&#47;&#47;www.163.com&#47;<br># Read 250164 from http:&#47;&#47;www.ifeng.com&#47;<br># Read 579572 from https:&#47;&#47;www.sina.com.cn&#47;<br># Read 107530 from http:&#47;&#47;www.ce.cn&#47;<br># Read 165901 from http:&#47;&#47;www.people.com.cn&#47;<br># Read 107530 from http:&#47;&#47;www.ce.cn&#47;<br># Read 210816 from https:&#47;&#47;news.163.com&#47;<br># Read 74060 from https:&#47;&#47;news.baidu.com&#47;<br># Read 174553 from http:&#47;&#47;news.sohu.com&#47;<br># Read 19492 from https:&#47;&#47;pypi.org&#47;<br># Download 12 sites in 2.8500169346527673 s<br># [Finished in 3.6s]","like_count":6,"discussions":[{"author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273597,"discussion_content":"你的网好多了，我的57s,问题我只打印出五条下载记录","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590475820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1281550,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8e/0e/3fbc418d.jpg","nickname":"youaresherlock","note":"","ucode":"B4D379C6B50DD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288243,"discussion_content":"厉害了，哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593692647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":273597,"ip_address":""},"score":288243,"extra":""},{"author":{"id":1005520,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/d0/b9312769.jpg","nickname":"北斗(宇)","note":"","ucode":"9532B48D7C29C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543781,"discussion_content":"你下载的网页size大吧,字节数就多,就慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641300524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":273597,"ip_address":""},"score":543781,"extra":""}]}]},{"had_liked":false,"id":107694,"user_name":"Geek_5bb182","can_delete":false,"product_type":"c1","uid":1524629,"ip_address":"","ucode":"35C3AF50311BFD","user_header":"","comment_is_top":false,"comment_ctime":1561597271,"is_pvip":false,"replies":[{"id":"39006","content":"可以参考https:&#47;&#47;stackoverflow.com&#47;questions&#47;29902908&#47;what-is-the-difference-between-concurrent-futures-and-asyncio-futures","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561618745,"ip_address":"","comment_id":107694,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27331401047","product_id":100026901,"comment_content":"老师你好，concurrent.futures 和 asyncio 中的Future 的区别是什么，在携程编程中","like_count":6,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455628,"discussion_content":"可以参考https://stackoverflow.com/questions/29902908/what-is-the-difference-between-concurrent-futures-and-asyncio-futures","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561618745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170222,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1578552277,"is_pvip":false,"replies":[{"id":"66787","content":"说的很对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579135619,"ip_address":"","comment_id":170222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23053388757","product_id":100026901,"comment_content":"学习到的知识点：<br>1. 并发和并行的区别，大佬通俗易懂的方式让我更深刻的体会到了程序到底是如何跑在多核机器上的<br>2. python中 Futures 特性，第一次接触到这个模块，待后续继续加深了解；<br>3. Python 中之所以同一时刻只允许一个线程运行，大佬解释了这是因为全局解释器锁的存在，而全局解释器锁又是为了解决 race condition而引入的，这个也从另一方面验证了我之前学习到的，python中多线程是无法利用多核的； <br>但是多线程无法利用多核也并不是一无是处，就像大佬在文中聊到的，多线程主要的适用场景就是 有IO延迟的场景，因为一个线程遇到IO延迟，它占用的全局解释器锁就会释放，而另一个线程即可以拿到锁开始执行； 这种在IO延迟场景中的并发，高效也是显而易见的；","like_count":5,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480888,"discussion_content":"说的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579135619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115149,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1563500029,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18743369213","product_id":100026901,"comment_content":"from multiprocessing.dummy import Pool as ThreadPool<br>with ThreadPool(processes=100) as executor:<br>    executor.map(func, iterable)<br><br>请问老师，Futures 和这种方式哪一种好呢？ 我在实际的网终请求中发现 Futures 请求成功的次数更少。 都是 100 个线程，处理 3000 个相同的请求。 <br>","like_count":4,"discussions":[{"author":{"id":1269304,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5e/38/72cbe03e.jpg","nickname":"卡乐","note":"","ucode":"E3A0EBD097B1CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257180,"discussion_content":"我也想知道，经常遇到有多个库都有一些相同或者类似的功能，不知道用哪个好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588523588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108766,"user_name":"羁绊","can_delete":false,"product_type":"c1","uid":1529393,"ip_address":"","ucode":"68CA15169C9DBF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er1RdQnOhMLv7dAwpBLAoUOM8icEnH8b1oSZ0cSYoryM6ng5cHcnsRRhYRny8NlrjuaQuOWy4e9Yqw/132","comment_is_top":false,"comment_ctime":1561877359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14446779247","product_id":100026901,"comment_content":"在使用executor.map()时候假如上面sites里面的url有链接超时报错的话，ThreadPoolExecutor会隐藏该异常，这个线程会在没有任何输出的情况下终止，然后线程继续执行","like_count":3},{"had_liked":false,"id":108733,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1561867751,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14446769639","product_id":100026901,"comment_content":"老师好，看到文中为了使用.as_complete()作的修改似乎做了重复的工作，我对比了使用.as_complete()和.submit()后直接result()，得到的是相同的结果。<br>-- 问1：这里所做的修改只是为了展示.as_complete的功能么？我查看了文档也没想明白。<br>-- 问2：.as_complete()可能会在什么场景下使用得比较多？<br><br>eg.2.`.submit()`后直接`.result()`<br>\t<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:<br>        for site in sites:<br>            future = executor.submit(download_one, site)<br>            print(future.result())","like_count":3,"discussions":[{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178673,"discussion_content":"相当于在主线程中等待所有任务执行完。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582187812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60657,"discussion_content":"submit()后直接调用result()会阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574743991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107534,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1561553396,"is_pvip":false,"replies":[{"id":"39008","content":"没错","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561618859,"ip_address":"","comment_id":107534,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10151487988","product_id":100026901,"comment_content":"总结下并发和并行的概念：<br><br>并发，是指遇到I&#47;O阻塞时（一般是网络I&#47;O或磁盘I&#47;O），通过多个线程之间切换执行多个任务（多线程）或单线程内多个任务之间切换执行的方式来最大化利用CPU时间，但同一时刻，只允许有一个线程或任务执行。适合I&#47;O阻塞频繁的业务场景。<br><br>并行，是指多个进程完全同步同时的执行。适合CPU密集型业务场景。","like_count":2,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455550,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561618859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249718,"discussion_content":"@helloworld 转发至个人的csdn可以嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587955600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249805,"discussion_content":"当然😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587963942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249718,"ip_address":""},"score":249805,"extra":""}]}]},{"had_liked":false,"id":107373,"user_name":"干布球","can_delete":false,"product_type":"c1","uid":1218173,"ip_address":"","ucode":"048ABC199D89B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","comment_is_top":false,"comment_ctime":1561521124,"is_pvip":false,"replies":[{"id":"39014","content":"submit之后","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561618979,"ip_address":"","comment_id":107373,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10151455716","product_id":100026901,"comment_content":"请问老师，future任务是调用submit后就开始执行，还是在调用as_completed之后才开始执行呢？","like_count":2,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455491,"discussion_content":"submit之后","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561618979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402,"discussion_content":"继续看源码，找到了run方法的调用，在生成_WorkItem实例后，会调用_adjust_thread_count方法，在这个方法中会调用run","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561534055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401,"discussion_content":"感觉文中的描述，个人认为是调用submit就开始执行，submit方法没会生成_WorkItem实例，但是进一步看源码并没有找到_WorkItem实例的run方法的调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561533828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336183,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1106929,"ip_address":"","ucode":"B2F562F717BD3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/f1/346bd356.jpg","comment_is_top":false,"comment_ctime":1645976375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5940943671","product_id":100026901,"comment_content":"老师，最近在实际的工程里面用到ProcessPoolExecutor，碰到这个问题：<br>concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.<br>怎么解决呢？<br>补充说明一下，我是flask应用，进程池是在某个模块的类方法里使用的","like_count":1},{"had_liked":false,"id":230563,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1593419429,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888386725","product_id":100026901,"comment_content":"异常处理：<br>def download_one_2(url):<br>    resp = None<br>    try:<br>        resp = requests.get(url, timeout=(3,7))<br>        resp.raise_for_status()<br>        resp.encoding = resp.apparent_encoding<br>    except requests.exceptions.ConnectTimeout:<br>        print(&#39;超时！&#39;)<br>    except requests.exceptions.ConnectionError:<br>        print(&#39;无效地址！&#39;)<br>    except requests.ConnectionError:<br>        print(&#39;超时！&#39;)<br>    except urllib3.exceptions.NewConnectionError:<br>        print(&quot;NewConnectionError&quot;)<br>    except urllib3.exceptions.MaxRetryError:<br>        print(&quot;超出最大重试次数&quot;)<br><br>    print(&#39;Read {} from {}&#39;.format(len(resp.content), url))","like_count":1},{"had_liked":false,"id":107659,"user_name":"简传宝","can_delete":false,"product_type":"c1","uid":1195882,"ip_address":"","ucode":"A38222C5BDA26A","user_header":"https://static001.geekbang.org/account/avatar/00/12/3f/6a/9dba4488.jpg","comment_is_top":false,"comment_ctime":1561594304,"is_pvip":false,"replies":[{"id":"39002","content":"没错。CPU-bound的任务主要是multi-processing，IO-bound的话，如果IO比较快，用多线程，如果IO比较慢，用asyncio，因为效率更加高","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561618461,"ip_address":"","comment_id":107659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5856561600","product_id":100026901,"comment_content":"老师好，请问是否可以理解为计算密集型任务用多进程，io密集型用多线程","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455611,"discussion_content":"没错。CPU-bound的任务主要是multi-processing，IO-bound的话，如果IO比较快，用多线程，如果IO比较慢，用asyncio，因为效率更加高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561618461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107345,"user_name":"无才不肖生","can_delete":false,"product_type":"c1","uid":1065687,"ip_address":"","ucode":"A2F83FC7405792","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/d7/1f1634af.jpg","comment_is_top":false,"comment_ctime":1561516705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856484001","product_id":100026901,"comment_content":"在submit()后只是放入队列而并未真正开始执行，as_completed时才真正去执行，对吗？<br>as_completed会不会有个别future并执行完而没有输出结果，还是说就一定都会完成","like_count":1},{"had_liked":false,"id":107221,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1561492256,"is_pvip":false,"replies":[{"id":"39019","content":"如果是多进程，则无所谓，可以并发运行。GIL是作用在线程上的，是不允许进程中的多线程同时运行","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561619213,"ip_address":"","comment_id":107221,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5856459552","product_id":100026901,"comment_content":"老师好，请问一下在python存在GIL的情况下，多进程是不是还是无法并发运行？谢谢老师","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455425,"discussion_content":"如果是多进程，则无所谓，可以并发运行。GIL是作用在线程上的，是不允许进程中的多线程同时运行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561619213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106929,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e3/f1/346bd356.jpg","nickname":"Bruce","note":"","ucode":"B2F562F717BD3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555105,"discussion_content":"我试了下多进程，什么情况下都无法提高效率呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646747583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399,"discussion_content":"python的GIL只在单个进程上起作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561532966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368,"discussion_content":"@大牛凯朋友，GIL不会在进程间产生互斥，所以它不会影响进程的并发。而且GIL的粒度一直在优化，一定程度上减少线程间的互斥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561510484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353166,"user_name":"曾彪彪","can_delete":false,"product_type":"c1","uid":1473709,"ip_address":"上海","ucode":"A815B6C3FA574D","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/ad/57b768f7.jpg","comment_is_top":false,"comment_ctime":1659228469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659228469","product_id":100026901,"comment_content":"因为全局解释器锁的存在，Python中同一时刻只有一个线程在工作，这是不是意味着Python 多线程没有race condition?","like_count":0},{"had_liked":false,"id":343976,"user_name":"GEEKBANG_9388667","can_delete":false,"product_type":"c1","uid":1267906,"ip_address":"","ucode":"FAF51FEFBB291A","user_header":"https://static001.geekbang.org/account/avatar/00/13/58/c2/51fa1f28.jpg","comment_is_top":false,"comment_ctime":1651151723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651151723","product_id":100026901,"comment_content":"老师 生成器和future可以一起使用吗？我用生成器打印出10G的文件，可以加入future之后就出现内存溢出情况","like_count":0},{"had_liked":false,"id":338367,"user_name":"后乐","can_delete":false,"product_type":"c1","uid":1264163,"ip_address":"","ucode":"058A631CA1A56B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/23/74bf8518.jpg","comment_is_top":false,"comment_ctime":1647440224,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1647440224","product_id":100026901,"comment_content":"进阶篇得反反复复看和实践体会～","like_count":0},{"had_liked":false,"id":320099,"user_name":"H.H","can_delete":false,"product_type":"c1","uid":2668479,"ip_address":"","ucode":"3C0BB1E2A3EC51","user_header":"https://static001.geekbang.org/account/avatar/00/28/b7/bf/815f0ec6.jpg","comment_is_top":false,"comment_ctime":1636081890,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636081890","product_id":100026901,"comment_content":"思考题：<br>def download_one(url)-&gt;str:<br>    try:<br>        resp = requests.get(url)<br>        print(&quot;Read {} from {}&quot;.format(len(resp.content),url))<br>        return resp.content<br>    except requests.exceptions.RequestException as e:<br>        print(e)<br>        return &#39;error&#39;<br>    except:<br>        return &#39;error&#39;<br><br>def download_all(sites):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>        to_do = []<br>        <br>        for site in sites:<br>            future = executor.submit(download_one,site)<br>            to_do.append(future)<br>        <br>        error_list = []<br>        try:<br>        <br>            for future in concurrent.futures.as_completed(to_do,timeout=0.5):<br>                result = future.result(timeout=0.1)<br>                print(len(result))<br>        except concurrent.futures.TimeoutError as e:<br>            print(&quot;time out:{}&quot;.format(e))<br>        except concurrent.futures.CancelledError as e:<br>            print(&quot;cancel error:{}&quot;.format(e))<br>            print(e)<br>        except Exception as e:<br>            print(&quot;other error:{}&quot;.format(e))<br>            ","like_count":0},{"had_liked":false,"id":284671,"user_name":"尚微","can_delete":false,"product_type":"c1","uid":1943718,"ip_address":"","ucode":"AC385A0B6D8FCD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er67Ir89QuLrBQBfibYGKoUqOayBGZFMqc8lraFIdoIxZNTtdOBPxbGVZtZB7bplfa1oL2J5HEuQFQ/132","comment_is_top":false,"comment_ctime":1616410528,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1616410528","product_id":100026901,"comment_content":"多线程程序是在线程之间来回切换运行的，那为什么采用多线程编程还能提高效率呢","like_count":0,"discussions":[{"author":{"id":1501591,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e9/97/c190359c.jpg","nickname":"Neo","note":"","ucode":"6A4EF447B88C8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364447,"discussion_content":"我的理解是: Python的(concurrency)多线程实际上是类似“单线程”，在等待IO操作的时候，很大概率“切换”回原来的线程，那实际上就没有发生线程的切换了。另外线程切换的时间损失应该是低于等待IO的时间的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617496226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263509,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1606144629,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606144629","product_id":100026901,"comment_content":"简单完成了以下思考题：<br>---<br><br>def download_all_as_completed(sites):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        to_do = []<br>        for site in sites:<br>            future = executor.submit(download_one, site)<br>            to_do.append(future)<br><br>        for future in concurrent.futures.as_completed(to_do, timeout=1):<br>            try:<br>                result = future.result()<br>            except Exception as exc:<br>                print(&#39;&lt;xx&gt; Threw an exception: %s&#39; % (exc))<br>            else:<br>                print(&#39;&lt;-- Read {} from {}&#39;.format(result[1], result[0]))<br><br>def download_all_with_callback(sites):<br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        for site in sites:<br>            future = executor.submit(download_one, site)<br>            future.add_done_callback(done_callback)<br><br>def done_callback(future):<br>    try:<br>        result = future.result()<br>    except Exception as exc:<br>        print(&#39;&lt;xx&gt; Threw an exception: %s&#39; % (exc))<br>    else:<br>        if result is not None:<br>            print(&#39;&lt;-- Read {} from {}&#39;.format(result[1], result[0]))<br>","like_count":0},{"had_liked":false,"id":243423,"user_name":"Leoorz","can_delete":false,"product_type":"c1","uid":1030657,"ip_address":"","ucode":"8912628AD6ADE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","comment_is_top":false,"comment_ctime":1598102789,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598102789","product_id":100026901,"comment_content":"今天尝试了对之前的一个CPU-bound的工程进行多进程的重构，遇到了一些问题，来分享一下过程及遇到的问题<br>问题背景:将多个json格式的文件读入并并行处理，最终输出到一个excel中，每个json文件对应一个excel的sheet<br>改造方式:<br>1. 每个json文件对应一类处理方式，已经抽象出了一个 BaseClass的process方法，多个SubClass继承该方法.<br>2. 子类实例化后，使用 futures.ProcessPoolExecutor 及 executor.submit(subclassItem.process, args) 的方式进行任务提交.<br>3. 为了防止subclassItem丢失从而找不到待写入excel中的数据，submit后，将subclassItem赋值给submit返回的future对象，以便在futures.as_completed的遍历时找到对象.<br>4. 子类处理process，将处理后待写入excel中的数据在process执行的最后写回子类的成员中<br>5. 待各process任务皆处理完毕后，遍历运行结束的futures，串行进行excel的sheet写入<br><br>问题1: 步骤3存入submit返回的future中的subclassItem的id，与进入subclassItem.process处理函数中看到的self的id不一致，这就导致步骤4回写的数据，与预期挂接的对象不是一个对象，从而回写的数据是空的，我在想是不是executor.submit(subclassItem.process, args)实际传入的对象是executor，但是同样打印了id，也不是相同的，所以就不清楚进入process处理函数中，实际的实例化对象是新创建的吗...<br>个人理解多进程的方式以对象方法的作为submit的方式应该是比较正常的使用场景，不知道自己哪里的使用姿势不对，网上也没找到讲类似的问题<br><br>问题2: <br>步骤5目前对excel的最终写入仍然是串行的，因为最开始尝试了把写入excel的动作也放入多进程的处理任务接口中，报了错，应该是多个进程访问了同一个资源，不知道是否还有其他方式，各位老哥帮忙看看","like_count":0,"discussions":[{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300443,"discussion_content":"我目前的方式是，在process最后再把真实处理的subclassItem返回出来，在遍历as_completed的时候通过result()将存有有效数据的对象再获取到，这肯定不是正确的姿势，求指点啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598104877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240941,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1597128566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597128566","product_id":100026901,"comment_content":"由于全局解释器锁的存在,Python 中同一时刻只允许一个线程运行，对 I&#47;O 操作而言，当其被 block 的时候，全局解释器锁便会被释放，使其他线程继续执行。","like_count":0},{"had_liked":false,"id":231292,"user_name":"王坤祥","can_delete":false,"product_type":"c1","uid":1003327,"ip_address":"","ucode":"FB988B9F381A33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","comment_is_top":false,"comment_ctime":1593646026,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593646026","product_id":100026901,"comment_content":"老师，异步编程和多线程编程，本质上有什么区别吗？看起来都是并发的","like_count":0,"discussions":[{"author":{"id":2977554,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLCmEAVBUFDcT4pChy93J4RKHA2OasbwWaIYXB70t1CJsmrD71sxnpWlDfY1diaLLKz1zUwDjzAKibGQ/132","nickname":"Geek_dcd08f","note":"","ucode":"1ECA7B63CA95A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569345,"discussion_content":"简单点说，异步是在单线程这个条件之下实现的，而多线程是使用多个线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651411432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221350,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1590479946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590479946","product_id":100026901,"comment_content":"为何我的代码 打印的日志少了许多, 没有read 很多次, 应该11次,但是只打印了5 次?<br>def download_all(urls):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:<br>        executor.map(download_one, urls)<br><br><br># -------- &gt;start https:&#47;&#47;www.baidu.com&#47;<br># -------- &gt;start https:&#47;&#47;www.news.qq.com&#47;<br># -------- &gt;start https:&#47;&#47;www.163.com&#47;<br># -------- &gt;start https:&#47;&#47;www.ifeng.com&#47;<br># -------- &gt;start https:&#47;&#47;www.sina.com.cn&#47;<br># read 2443 from https:&#47;&#47;www.baidu.com&#47;<br># -------- &gt;start https:&#47;&#47;www.ce.cn&#47;<br># read 251728 from https:&#47;&#47;www.ifeng.com&#47;<br># -------- &gt;start https:&#47;&#47;www.people.com.cn&#47;<br># -------- &gt;start https:&#47;&#47;www.news.163.com&#47;<br># -------- &gt;start https:&#47;&#47;www.news.baidu.com&#47;<br># -------- &gt;start https:&#47;&#47;www.news.sohu.com&#47;<br># -------- &gt;start https:&#47;&#47;www.pypi.org&#47;<br># read 491775 from https:&#47;&#47;www.163.com&#47;<br># read 527807 from https:&#47;&#47;www.sina.com.cn&#47;<br># read 21215 from https:&#47;&#47;www.pypi.org&#47;<br># download 11 site in 21.024155999999998 seconds<br><br>","like_count":0},{"had_liked":false,"id":221349,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1590479805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590479805","product_id":100026901,"comment_content":"def download_all(urls):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:<br>        todo = []<br>        for url in urls:<br>            future = executor.submit(download_one, url)<br>            todo.append(future)<br><br>        for future in concurrent.futures.as_completed(todo):<br>            future.result()  # 这一行 代码报错了, ssl.SSLCertVerificationError<br><br>如下执行结果:<br>-------- &gt;start https:&#47;&#47;www.baidu.com&#47;<br>-------- &gt;start https:&#47;&#47;www.news.qq.com&#47;<br>-------- &gt;start https:&#47;&#47;www.163.com&#47;<br>-------- &gt;start https:&#47;&#47;www.ifeng.com&#47;<br>read 251742 from https:&#47;&#47;www.ifeng.com&#47;<br>-------- &gt;start https:&#47;&#47;www.sina.com.cn&#47;<br>read 2443 from https:&#47;&#47;www.baidu.com&#47;<br>-------- &gt;start https:&#47;&#47;www.ce.cn&#47;<br><br>read 527508 from https:&#47;&#47;www.sina.com.cn&#47;<br>read 21304 from https:&#47;&#47;www.pypi.org&#47;<br>Traceback (most recent call last):<br>  File &quot;xxxxl\\Continuum\\anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py&quot;, line 600, in urlopen<br>    chunked=chunked)<br>  File &quot;D:\\Users\\xxxxx\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py&quot;, line 343, in _make_request<br>    self._validate_conn(conn)<br>  File &quot;D:\\xxxxx\\Local\\Continuum\\anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py&quot;, line 849, in _validate_conn<br>    conn.connect()<br>  File &quot;D:\\Users\\xxxxx\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\urllib3\\connection.py&quot;, line 376, in connect<br>    _match_hostname(cert, self.assert_hostname or hostname)<br>  File &quot;D:\\Users\\xxxxx\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\urllib3\\connection.py&quot;, line 386, in _match_hostname<br>    match_hostname(cert, asserted_hostname)<br>  File &quot;D:\\Users\\xxxxx\\AppData\\Local\\Continuum\\anaconda3\\lib\\ssl.py&quot;, line 323, in match_hostname<br>    % (hostname, &#39;, &#39;.join(map(repr, dnsnames))))<br>ssl.SSLCertVerificationError: (&quot;hostname &#39;www.ce.cn&#39; doesn&#39;t match either of <br>","like_count":0},{"had_liked":false,"id":217931,"user_name":"轻风悠扬","can_delete":false,"product_type":"c1","uid":1319215,"ip_address":"","ucode":"F2276CE113BED1","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/2f/b29e8af8.jpg","comment_is_top":false,"comment_ctime":1589671711,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589671711","product_id":100026901,"comment_content":"老师，我把您最后一个例子改成了add_done_callback, 我想问一下这个和concurrent.futures.as_completed有什么差别呢。好像都是会等待task结束后的返回结果。<br>import concurrent.futures<br>import requests<br>import time<br><br><br>def download_one(url):<br>    resp = requests.get(url)<br>    # print(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br>    return(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br><br><br>def download_all(sites):<br>    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>        # executor.map(download_one,sites)<br>        to_do = []<br>        for site in sites:<br>            future = executor.submit(download_one, site)<br>            to_do.append(future)<br><br>        for future in to_do:<br>            future.add_done_callback(lambda future: print(future.result()))<br><br><br>def main():<br>    sites = [<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Arts&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:History&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Society&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Biography&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Mathematics&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Technology&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Geography&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Portal:Science&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Computer_science&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Python_(programming_language)&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Java_(programming_language)&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;PHP&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Node.js&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;The_C_Programming_Language&#39;,<br>        &#39;https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Go_(programming_language)&#39;<br>    ]<br>    start_time = time.perf_counter()<br>    download_all(sites)<br>    end_time = time.perf_counter()<br>    print(&#39;Download {} sites in {} seconds&#39;.format(len(sites), end_time - start_time))","like_count":0},{"had_liked":false,"id":207900,"user_name":"Nemo","can_delete":false,"product_type":"c1","uid":1657039,"ip_address":"","ucode":"2B11D18D6FA2AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/48/cf/8c88e6c0.jpg","comment_is_top":false,"comment_ctime":1587211148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587211148","product_id":100026901,"comment_content":"module &#39;concurrent&#39; has no attribute &#39;features&#39;<br>py3.8 为啥会这样？","like_count":0},{"had_liked":false,"id":203451,"user_name":"shiziwen","can_delete":false,"product_type":"c1","uid":1016917,"ip_address":"","ucode":"ADADC770D82D66","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/55/1e40bd61.jpg","comment_is_top":false,"comment_ctime":1586195471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586195471","product_id":100026901,"comment_content":"老师在GitHub上的示例，有如下代码：<br>```<br># 多线程版下载<br>def download_all_futures(sites):<br>\twith concurrent.futures.ThreadPoolExecutor(max_workers = 5) as executor:<br>\t\texecutor.map(download_one, sites)<br>\t\t<br><br># 并行版<br>def download_all_futures_bx(sites):<br>\twith concurrent.futures.ThreadPoolExecutor() as executor:<br>\t\texecutor.map(download_one, sites)<br><br>```<br><br>请问这里的并行版本，是不是写错了？<br>文稿例给出的是with futures.ProcessPoolExecutor() as executor，跟上述代码不同。<br><br>谢谢","like_count":0},{"had_liked":false,"id":177505,"user_name":"MarDino","can_delete":false,"product_type":"c1","uid":1435900,"ip_address":"","ucode":"4A70C1B476F7E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/fc/c26b6207.jpg","comment_is_top":false,"comment_ctime":1581407023,"is_pvip":false,"replies":[{"id":"70366","content":"这个map函数的用法可以参照https:&#47;&#47;docs.python.org&#47;3&#47;library&#47;concurrent.futures.html","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1582612325,"ip_address":"","comment_id":177505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581407023","product_id":100026901,"comment_content":"想问下老师，该怎么向executor.map中的函数，传入多个参数？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483446,"discussion_content":"这个map函数的用法可以参照https://docs.python.org/3/library/concurrent.futures.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582612325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167649,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1577886810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577886810","product_id":100026901,"comment_content":"如果线程是遇到I&#47;O就切换，那和协程有什么区别呢？","like_count":0},{"had_liked":false,"id":153623,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574283976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574283976","product_id":100026901,"comment_content":"请问老师，多数编程语言的并行（Parallelism）,都是通过多线程实现（例如rxjava），因为线程是CPU调度的最小单元，为什么Python并行是通过多进程实现，多谢！","like_count":0},{"had_liked":false,"id":153473,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574239943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574239943","product_id":100026901,"comment_content":"Future 是一个任务队列模型，所有需要IO的任务，都进入队列，然后根据IO和CPU的使用来回调度任务，合理配置IO和CPU的资源。","like_count":0},{"had_liked":false,"id":153469,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574239755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574239755","product_id":100026901,"comment_content":"Concurrency -- 流水线，充分利用不同的设备，例如CPU，内存和网络，同一时刻，只有一个任务被CPU执行。<br>Parallelism -- 并行处理，充分利用多个CPU<br>多进程不会比多线程块，我个人以为线程是操作系统调度的最小单元，切换进程比切换线程代价大。","like_count":0},{"had_liked":false,"id":149765,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1573371625,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573371625","product_id":100026901,"comment_content":"老师给一些不存在的网站让我们去测试用例，机智的我换成了BAT的首页","like_count":0,"discussions":[{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178674,"discussion_content":"只是国外的网站，网络限制，并不是不存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582187992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140679,"user_name":"tsunami","can_delete":false,"product_type":"c1","uid":1384319,"ip_address":"","ucode":"254341C6AAA90B","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/7f/a8bb42c0.jpg","comment_is_top":false,"comment_ctime":1571027537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571027537","product_id":100026901,"comment_content":"老师，python不是不适合多线程吗，多线程由于GIL反而变慢了吗，这个只是针对cpu密集型的不适合多线程吗，IO密集型的可以使用python多线程吗？","like_count":0},{"had_liked":false,"id":140347,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1570886411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570886411","product_id":100026901,"comment_content":"并发是交替执行，同时只有一个任务执行。用于高I&#47;O程序。并行是多个进程同时运行，用于CPU-heavy程序。原来Python可以做并行运算的，建立线程池的时候不指定线程数量就行了。以前写并发程序比较少。<br>思考题，只写异常处理的地方吧。<br># 处理requests异常<br>\texcept ConnectionError as err:<br>\t\tprint(err)<br>\texcept HTTPError as err:<br>\t\tprint(err)<br>\texcept Timeout as err:<br>\t\tprint(err)<br>\t# 处理futures异常<br>\texcept TooManyRedirects as err:<br>\t\tprint(err)<br>\texcept CancelledError as err:<br>\t\tprint(err)<br>\texcept TimeoutError as err:<br>\t\tprint(err)<br>\texcept BrokenExecutor as err:<br>\t\tprint(err)<br>\texcept:<br>\t\tprint(&quot;发生错误&quot;)<br><br>课程的练习代码: https:&#47;&#47;github.com&#47;zwdnet&#47;PythonPractice","like_count":0},{"had_liked":false,"id":140007,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1570785126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570785126","product_id":100026901,"comment_content":"简单的加了个异常处理，请老师指正<br>#多线程实现网站内容下载演示<br>import concurrent.futures<br>import requests<br>import threading<br>import time<br><br>def download_one(url):<br>    resp = requests.get(url)<br>    print(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br>    <br>    #模拟下载任务出错<br>    print(1&#47;0)<br><br>def download_all(sites):<br>    try:<br>        #以下是用futures对象并发下载<br>        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>            to_do = []<br>            for site in sites:<br>                future = executor.submit(download_one, site)<br>                to_do.append(future)<br><br>            for future in concurrent.futures.as_completed(to_do):<br>                future.result()<br>                    <br>    except Exception as e:<br>        print(&#39;运行错误：&#39;,e)","like_count":0},{"had_liked":false,"id":128998,"user_name":"福布斯第一","can_delete":false,"product_type":"c1","uid":1244851,"ip_address":"","ucode":"6DA11E1E6819F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/b3/964eb5ac.jpg","comment_is_top":false,"comment_ctime":1567003975,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567003975","product_id":100026901,"comment_content":"关于windows运行 多进程 子函数print不打印问题：<br>The comments revealed that OP uses Windows as well as Spyder. Since Spyder redirects stdoutand Windows does not support forking, a new child process won&#39;t print into the Spyder console. This is simply due to the fact that stdout of the new child process is Python&#39;s vanilla stdout, which can also be found in sys.__stdout__.<br><br>解决：1.打印日志到文件。2.用返回值替代打印。（还是用mac或者linux来学吧。。。。。。）<br>","like_count":0,"discussions":[{"author":{"id":2027617,"avatar":"","nickname":"Geek_e2c610","note":"","ucode":"A4E4FF065EB966","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283193,"discussion_content":"vscode pychar应该都可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592208622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128997,"user_name":"福布斯第一","can_delete":false,"product_type":"c1","uid":1244851,"ip_address":"","ucode":"6DA11E1E6819F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/b3/964eb5ac.jpg","comment_is_top":false,"comment_ctime":1567003419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567003419","product_id":100026901,"comment_content":"import requests<br>import time<br>import concurrent.futures<br>import threading<br><br>def download_one(url):<br>    headers = {&quot;User-Agent&quot; : &quot;User-Agent:Mozilla&#47;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident&#47;5.0;&quot;}<br>    resp = requests.get(url,headers=headers)<br>    print(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br>    <br>def download_all(sites):<br>#     with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:<br>#         executor.map(download_one, sites)<br>    <br>    with concurrent.futures.ProcessPoolExecutor() as executor:<br>        executor.map(download_one, sites)<br><br>def main():<br>    sites = [<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;ARTS&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;History&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Society&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Biography&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Mathematics&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Technology&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Geography&#39;,<br>        &#39;https:&#47;&#47;baike.baidu.com&#47;item&#47;Science&#39;<br>    ]<br>    start_time = time.perf_counter()<br>    download_all(sites)<br>    end_time = time.perf_counter()<br>    print(&#39;Download {} sites in {} seconds&#39;.format(len(sites), end_time - start_time))<br>    <br>if __name__ == &#39;__main__&#39;:<br>    main()<br>输出：Download 8 sites in 0.25235257599979377 seconds<br>用多进程后为什么 download_one函数的 print内容没有打印出来呢。。。。。","like_count":0},{"had_liked":false,"id":118711,"user_name":"某彬","can_delete":false,"product_type":"c1","uid":1355849,"ip_address":"","ucode":"BB137DFE52250A","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/49/39238538.jpg","comment_is_top":false,"comment_ctime":1564420795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564420795","product_id":100026901,"comment_content":"老师，这里的future和前面的coroutine是什么关系？两者有什么区别吗？两者典型的使用场景是什么呢？","like_count":0},{"had_liked":false,"id":113558,"user_name":"刘润森","can_delete":false,"product_type":"c1","uid":1236556,"ip_address":"","ucode":"84101C670A6747","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/4c/a51ece16.jpg","comment_is_top":false,"comment_ctime":1563077284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563077284","product_id":100026901,"comment_content":"python安装不了futures","like_count":0},{"had_liked":false,"id":110088,"user_name":"章大蒜📍","can_delete":false,"product_type":"c1","uid":1527051,"ip_address":"","ucode":"B109218608DAFB","user_header":"https://static001.geekbang.org/account/avatar/00/17/4d/0b/ac1f7fec.jpg","comment_is_top":false,"comment_ctime":1562169503,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562169503","product_id":100026901,"comment_content":"没有看懂那个asyncio和thread的图？？？","like_count":0,"discussions":[{"author":{"id":1228290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","nickname":"w 🍍","note":"","ucode":"F2386C971EC58B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3699,"discussion_content":"横向是个time时间轴。 在同一时间，只会有一个线程运行，可以是thread1或者thread2或者thread3。  asyncio也是类似。   asyncio1/thread1的意思是， 这幅图对thread或者asyncio机制都适用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564718308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108775,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1561879054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561879054","product_id":100026901,"comment_content":"def download_one(url):<br>    try:<br>        resp = requests.get(url)  # 该方法是线程安全的，因此在多线程环境下可以安全使用，不会出现race condition<br>        print(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br>    except requests.exceptions.ConnectionError:<br>        print(&#39;ConnectionError&#39;)<br>...<br>测试了一下，都跑ConnectionError了，汗。。。<br><br>并发concurrency常用于IO密集型程序，并行parallelism常用于计算密集型程序。这个还蛮重要的。","like_count":0},{"had_liked":false,"id":108745,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1561871587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561871587","product_id":100026901,"comment_content":"补充：<br>看到楼1的回答，意识到自己没有注意到每个方法涉及的边界问题：异常。查看了对应的异常类，能想到的摘录如下：<br><br>- .map(func, *iterables, timeout=None)<br>  * 异常concurrent.futures.TimeoutError 超时<br>  * func调用异常（requests.get处处理）<br><br>- .result(timeout=None)<br>  * concurrent.futures.TimeError 超时<br>  * concurrent.futures.CancelledError 取消<br><br>- .ThreadPoolExecutor()<br>  * concurrent.future.BrokenThreadPool ThreadPoolExecutor初始化失败时","like_count":0},{"had_liked":false,"id":107415,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1561532560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561532560","product_id":100026901,"comment_content":"根据老师的代码，我对download_one函数做了如下修改，<br>def download_one(url):<br>    try:<br>        resp = requests.get(url,timeout=2)<br>        print(&#39;Read {} from {}&#39;.format(len(resp.content), url))<br>    except exceptions.Timeout as e:<br>        print(&quot;Timout error,{}&quot;,e)<br>    except Exception as e:<br>        print(&quot;Other error,{}&quot;,e)<br><br>1，我对request.get函数添加了timeout=2参数，不让响应时间过长。<br>2，我添加了timeout异常，如果响应时间过长，就报超时异常返回","like_count":0},{"had_liked":false,"id":107413,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1561532149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561532149","product_id":100026901,"comment_content":"改成多进程后以下print为什么不输出了？<br>print(&#39;Read {} from {}&#39;.format(len(resp.content), url))","like_count":0},{"had_liked":false,"id":107404,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1561530643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561530643","product_id":100026901,"comment_content":"如果提示：SSLError: HTTPSConnectionPool(host=&#39;en.wikipedia.org&#39;, port=443): Max retries exceeded with url: &#47;wiki&#47;Portal:Arts (Caused by SSLError(SSLError(&quot;bad handshake: SysCallError(10054, &#39;WSAECONNRESET&#39;)&quot;)))<br><br>请先翻墙","like_count":0},{"had_liked":false,"id":107377,"user_name":"干布球","can_delete":false,"product_type":"c1","uid":1218173,"ip_address":"","ucode":"048ABC199D89B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","comment_is_top":false,"comment_ctime":1561522009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561522009","product_id":100026901,"comment_content":"try:<br>\tdata = future.result()<br>except Exception as exc:<br>\tprint(&#39;%r generated an exception: %s&#39; % (url, exc))<br>else:<br>\tprint(&#39;%r page is %d bytes&#39; % (url, len(data)))","like_count":0},{"had_liked":false,"id":107304,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1561513175,"is_pvip":false,"replies":[{"id":"39017","content":"可以参考https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Thread_safety","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1561619112,"ip_address":"","comment_id":107304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561513175","product_id":100026901,"comment_content":"老师，请问什么是线程安全，什么是race condition呢？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455459,"discussion_content":"可以参考https://en.wikipedia.org/wiki/Thread_safety","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561619112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107278,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1561511173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561511173","product_id":100026901,"comment_content":"学习笔记:和c++中std::future的比较。<br><br>std::future的主要目的是用来在线程间传递数据。消费者调用std::future.get获取数据时，如果数据没有准备好，则线程会阻塞直到std::future变为ready。注意，对std::future的访问也需要用锁来保护。<br><br>std::async会返回一个future，由应用自己管理数据(即future)和任务(即async启动的函数)之间的对应关系。<br><br>而std:: packaged_task把这两者封装到了一起，作为一个整体方便了管理。<br><br>std::async不像python中协程中的async关键字，因为处理std::async返回的future时有可能会发生阻塞。<br><br>Python的future更像是加强版的std:: packaged_task，是把一个任务放入future，并可以过去执行结果和异常。","like_count":0},{"had_liked":false,"id":107271,"user_name":"Hoo-Ah","can_delete":false,"product_type":"c1","uid":1306913,"ip_address":"","ucode":"823093A6C7DEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/21/52e8267b.jpg","comment_is_top":false,"comment_ctime":1561510476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561510476","product_id":100026901,"comment_content":"加异常判断的话应该在获取result的时候加上。","like_count":0}]}