{"id":206200,"title":"19 | 重新认识数据结构（下）：有趣的“链表思维”","content":"<p>你好，我是胡光，欢迎回来。</p><p>上节课，我们着重介绍了数据结构的学习方法，就是把数据结构分成两部分进行学习：<strong>结构定义</strong>和<strong>结构操作</strong>。其中，结构定义是定义数据结构的样子和性质，结构操作就是数据结构的相关功能，并且在操作过程中需要维护相关结构的性质。在这个基础上，我们详细讲了链表的基础结构。</p><p>我们经常听到，算法中最有价值的是“算法思维”，其实在数据结构中，最有价值的也是“数据结构思维”。今天呢，我们就看看链表这种具体的数据结构，如何变成一种思维层面的数据结构，辅助我们进行思考。</p><h2>今日任务</h2><p>先来看一下今天这 10 分钟的任务吧。首先，我们定义一种数字名称，叫做“快乐数”。所谓快乐数就是经过有限次变换以后，等于 1 的数字。这个变换规则，给出一个非1的数字a ，把它的位数拎出来，求各个位数的平方和，得到一个数字b，如果数字b不是1，那就对数字b的每一位数再做平方和，得到数字c……经过不停的变换，确定最后能否得到 1。</p><p>例如，一开始的数字是19，经过变换规则  $1^2 + 9^2 = 82$，得到数字82；因为不是 1 ，所以接着做变换，就是 $8^2 + 2^2 = 68$，再做一次变换 $6^2 + 8^2 = 100$，最后一次做变换 $1^2 + 0^2 + 0^2 = 1$，得到了 1 以后，停止。</p><!-- [[[read_end]]] --><p>由于从 19 开始，通过有限次变换以后，能够到达数字 1，所以数字 19 是“快乐数”。在这个过程中，你应该明白，后面得到的82、68、100其实也是快乐数。所以今天我们要做的，就是给出一个正整数，你来判断这个数字是否是快乐数。</p><p>这个任务的难点，不在于判定哪些数字是快乐数，而在于如何判定一个数字不是快乐数。为什么这么说呢？因为不是快乐数，就说明原数字没有办法通过有限次变换，到达数字 1，那么经过多少次，才算是有限次呢？1 千次，1 万次还是10万次呢？你会发现，很难确定这个转换次数的上限。</p><p>你可能已经感觉到了这是一个有趣，但似乎又有点难度的任务。那就请你带着这份好奇和困惑，让我们用链表思维解决它！</p><h2>必知必会，查缺补漏</h2><p>先忘了上面这个任务，我们先从几个具体的例子，来学习链表相关的进阶操作。</p><h4>1.直观操作法：用数组判断链表中是否有环</h4><p>我要带你学习的第一个链表相关的问题呢，就是如何判断一个链表中有环。链表中为什么会有环呢？通过上一节课的学习，我们知道单向链表的最后一个节点，原本应该指向一个叫做 NULL 的空地址，代表整个链表结束。可你有没有想过，如果链表的最后一个节点，指向的不是一个空地址，而是链表中的一个点，那是不是就形成了链表内部的一个环？如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/25/fb/25e8197144387605db2862eecf68dffb.jpg?wh=2624*908\" alt=\"\" title=\"图1： 链表成环示意图\"><br>\n就如你所看到的，图中的8号节点，本应该是链表的最后一个节点，可它却指向了3号节点，这样就形成了一个以3、4、5、6、7、8号节点为循环状态的环形结构。当你使用指针遍历这个链表的时候，将会永无尽头。</p><p>那有没有什么办法，能够帮助我们判断在一个单向链表中，是否存在环呢？面对这个问题，你可能想要说，很简单啊，我只需要使用一个数组，记录出现过的节点信息，之后每次遍历到新节点，就判断这个节点是否在数组中有记录。如果有的话，说明链表中有环，如果遍历到了 NULL 地址，那就说明链表中无环。</p><p>上面这个方法看似可行，但数组会占用与链表等量的额外存储空间，并且效率太差了。假设链表有 n 个节点，当你经过第 1 个节点的时候，你需要在数组中查找 0 次；第 2 个节点的时候，需要在数组中查找 1 次；第 3 个节点需要查找 2 次。</p><p>依次类推，第 i 个节点，你需要在数组中查找 i - 1 次，可直到你遍历到第 n + 1个节点的时候，才会发现有重复。此时在数组中查找的总次数将会是 (n + 1) * n / 2 次，接近于 $n^2$ 次，这种时间复杂度，写作 $O(n^2)$。关于时间复杂度，简单来理解，它反映的其实是问题规模与运算次数之间的关系。</p><h4>2.快慢指针法：让判断链表是否有环变得简单</h4><p>接下来呢，我们来假设一种场景，在操场上有两个运动员从跑道起点出发跑步，一个速度比较快，一个速度比较慢。同时操场的能见度特别低，他们根本不知道跑道是不是环形的，可过了一段时间以后，两个人就确定了这个跑道是否环形，他俩是怎么做到的？</p><p>你稍微想一想，就会明白这里面的道理：如果跑道是环形的，那么速度快的运动员，在足够的时间里，终究会从速度慢的人后面追上来了，形成两人相遇的情况。如果跑到不是环形的，那速度快的运动员会最先跑到终点，两人不会相遇！这就是今天我们要讲的链表判环的方法，叫做：<strong>快慢指针法</strong>。<br>\n<img src=\"https://static001.geekbang.org/resource/image/18/9d/18e27e3f96ab152c4ead158a0a85d59d.jpg?wh=2484*1253\" alt=\"\" title=\"图2： 快慢指针法示意图\"><br>\n简单来说，就是我们把链表当成跑道，放上两个指针，一个指针每次走一步，另一个指针每次走两步，如果快的指针，先跑到了终点，说明链表中没有环，如果两个指针相遇了，则说明链表中有环。并且，我们很容易知道两个指针一定是在环内部相遇的。</p><p>如果把上述过程写成代码的话，如下所示：</p><pre><code>int hasCycle(struct Node *head) {\n    if (head == NULL) return 0;\n    // p 是慢指针，q 是快指针\n    struct Node *p = head, *q = head;\n    // 每次循环，p 走1步，q 走2步\n    do {\n        p = p-&gt;next;\n        q = q-&gt;next;\n        if (q == NULL) return 0;\n        q = q-&gt;next;\n    } while (p != q &amp;&amp; q); \n    return p == q;\n}\n</code></pre><p>代码比较简单，你可以自行阅读并学习。其中需要注意的是几个指针判空的语句，一定要保证指针非空的前提下，再用指针间接访问结构体字段，否则你的程序会瞬间崩溃。</p><h2>一起动手，搞事情</h2><p>前面讲了，如何判断链表有环。那么今天的“一起动手，搞事情”环节呢，我就给你留两个相关的子问题：</p><ol>\n<li>如何求解环的长度，如图1中，环的长度就是 5。</li>\n<li>如何找到环的起点，如图1中，3号点，就是环的起始点。</li>\n</ol><h2>快乐数判定问题</h2><p>准备完了前面这些基础知识以后，你可能还是摸不着头绪，不知道如何解决快乐数判定问题。那你可要跟住节奏了，下面就要进入将链表数据结构提升成为思维的阶段了。</p><p>首先，我们知道，整型表示的最大值是${2}^{31} - 1$，大约是 20 亿左右。如果就在这个整型范围内解决快乐数判定的问题，我们可以得到哪些有用的结论呢？下面，让我们分析一下。</p><p>由本节开头的例子可知，从19开始，依次得到的是：82、68、100、1这些数字。也就是说，从一个数字开始，按照快乐数的计算规则，会得到一串数字序列。这其中就蕴含着链表重要的结构思维：从当前节点，唯一映射到下一个节点。快乐数序列中的数字，就是链表中的节点，如果当前数字确定了，下一个数字也就是确定了的，就像数字19，下一个肯定是数字82，这种映射规则，就是链表节点之间的指向关系。</p><p>最后，我们做一个思维映射，一切就豁然开朗了。所谓快乐数序列，最终的目标是能到 1，这个数字 1，其实就可以看成是链表中的空地址。这样，我们就把快乐数问题，用链表思维做了一番改造，并且这种改造，一点儿违和感都没有。当你把这个思考过程搞清楚后，恭喜你，在这个过程中，你正在将你自己看待问题的方式，变得更加结构化，更加计算机化。</p><p>接下来我们分析一下，这个快乐数链表，最长能有多长？这个问题其实比较好分析，主要是思考究竟哪个数字，按照快乐数的计算规则，得到的下一个数字是最大的，这个最大的数字是多少。</p><p>稍加思索，你就知道，如果在整型范围内解决快乐数问题的话，1999999999 这个数字，按照各位平方和来进行计算，得到的下一个数字应该是 $(9*9^2 + 1) = 730$，也就是说，这个快乐数链表中，节点数量绝对不会超过 731 个。一个不超过 731 个节点的链表，还总也走不到末尾，说明什么？说明这个链表中有环！</p><p>至此，你会发现，<strong>判断一个数字是否是快乐数，等价于判断链表中是否有环</strong>。剩下的台词，我就不和你抢了，舞台留给你来发挥吧，代码我就不替你写了。加油！我相信，你一定写得出来。</p><h2>课程小结</h2><p>关于链表的内容，到这里就结束了。通过这两节，只是想让你记住一点：数据结构，不仅仅是计算机中的代码，更是我们思维的逻辑结构在计算机科学中的具体体现。</p><p>这种有趣的思维变换，才是算法和数据结构的真正魅力所在。有些技术的酷炫，是长在脸上的，让人一眼就能看到；而算法和数据结构的酷炫，从来都是那样的含蓄，那样的内敛，你只有深入到里面，才能感受到它的巨大魅力。我已经竭尽所能，试图将它的内在美描述出来，不知道你有没有 get 到，如果你没有 get 到，那一定是我的语言太过苍白，而不是算法数据结构没有魅力！</p><p>好了，今天先到这里了，我是胡光，我们下期见。</p>","comments":[{"had_liked":false,"id":183065,"user_name":"Cache","can_delete":false,"product_type":"c1","uid":1686477,"ip_address":"","ucode":"B2DAC13FC4EE7C","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","comment_is_top":false,"comment_ctime":1582947409,"is_pvip":false,"replies":[{"id":"70915","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1582993329,"ip_address":"","comment_id":183065,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18762816593","product_id":100043901,"comment_content":"思考题:<br>之前有见过这个链表成环的拓展题<br>一、 环的长度<br>思路: 从相遇节点开始，快慢指针继续走，直至相遇，走的次数就等于环的长度。很好理解，快指针是慢指针速度的一倍，就等价于一个慢指针走一个回路的距离，即是环的长度。<br><br>二、 求环的起点<br>思路:这个问题比较复杂点，不过画个图还是很好理解的。  <br>假设:  起始点到入环点的距离为   D<br>          相遇点到入环点的距离为   S1<br>          环的长度为R<br>所以:    慢指针走的距离     D ＋ S1<br>            快指针走的距离     D ＋ S1 + nR<br>又因为 快指针的速度 ＝ 两倍的慢指针的速度<br>方程为:<br>            2(D ＋ S1) ＝ D ＋ S1 ＋ nR<br>        得:             D ＝ nR - S1<br>从这里可以得出结论，在第一次相遇时，D ＝ R - S1<br>有了这个结论，只要弄两个指针，一个设置为首节点，一个设置为首次相遇节点，然后每一次依次走一步，直至相遇，就是入环点了。<br><br>有了这个思路，代码实现起来，最多只是Debug的过程了。","like_count":4,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485554,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582993329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2905625,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/56/19/d2c65c01.jpg","nickname":"星海","note":"","ucode":"3B6728A146B314","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559837,"discussion_content":"错了吧，假设D是10，R是3，那么快指针到达环口的时候，慢指针还需要5步才到达，然后快指针在环内绕圈，最终慢指针到达环口的时候快指针还差一步到环口，最终他们在环口的下一个地方相遇。然后按照结论一个设置在起点，一个设置在相遇点，每次依次走一步（相同速度），最终并不会相遇啊。。。而如果最后的步骤还是按原来2倍速度，那么当R是4的时候，设置后的相遇点和原来的相遇点一样啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648995945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593251,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","nickname":"doge","note":"","ucode":"9E2D4C8F9B4CBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194573,"discussion_content":"讲的真好啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583233453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183240,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1582981181,"is_pvip":true,"replies":[{"id":"71087","content":"对的，就是这个题。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583114768,"ip_address":"","comment_id":183240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14467883069","product_id":100043901,"comment_content":"快乐数 leetcode 第 202 题  https:&#47;&#47;leetcode-cn.com&#47;problems&#47;happy-number&#47;","like_count":4,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485613,"discussion_content":"对的，就是这个题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206639,"user_name":"Objective","can_delete":false,"product_type":"c1","uid":1543641,"ip_address":"","ucode":"408FA90F62353E","user_header":"","comment_is_top":false,"comment_ctime":1586912665,"is_pvip":false,"replies":[{"id":"77304","content":"因为后续所有数字映射到的下一个节点值都不会超过730，也就是说从1999999999这个数字以后，所有节点上的数字都在1到730之间，那你说最多多少个节点呢？","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1587000866,"ip_address":"","comment_id":206639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10176847257","product_id":100043901,"comment_content":"1999999999 这个数字，按照各位平方和来进行计算，得到的下一个数字应该是 (9*9^2 + 1) = 730，也就是说，这个快乐数链表中，节点数量绝对不会超过 731 个<br><br>請問為什麼计算得到的下一个数字代表节点数量？","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491847,"discussion_content":"因为后续所有数字映射到的下一个节点值都不会超过730，也就是说从1999999999这个数字以后，所有节点上的数字都在1到730之间，那你说最多多少个节点呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587000866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234225,"user_name":"Geek_79bb26","can_delete":false,"product_type":"c1","uid":2056095,"ip_address":"","ucode":"265AB8892DB087","user_header":"","comment_is_top":false,"comment_ctime":1594623624,"is_pvip":false,"replies":[{"id":"88437","content":"嗯嗯，你的思路没错的，这里估算一个上界，只是为了说明这个链表的长度是有限的，不会特别长。当我们遍历的时候，一旦超过了我们推导的上界长度，说明这个链表当中存在环。另外，我还会浏览这个栏目，只是回复速度可能不太快。d(^=^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1596526346,"ip_address":"","comment_id":234225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889590920","product_id":100043901,"comment_content":"1999999999 这个数字，按照各位平方和来进行计算，得到的下一个数字应该是 (9*9^2 + 1) = 730，也就是说，这个快乐数链表中，节点数量绝对不会超过 731 个<br><br>请问老师，照这个思路，730以内各个数位平方和最大数应该是699，平方和是81+81+36=198，那么链表节点数是否应该在199=（1+198）个以内；198以内各个数位平方和最大的数是99，平方和是162，那么链表节点数最大应该在164=（2+162）以内，或者可以推出31位整型数据快乐数链表的最大长度是164，谢谢老师，学的有点晚了，不知您是否还浏览这个栏目。","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501324,"discussion_content":"嗯嗯，你的思路没错的，这里估算一个上界，只是为了说明这个链表的长度是有限的，不会特别长。当我们遍历的时候，一旦超过了我们推导的上界长度，说明这个链表当中存在环。另外，我还会浏览这个栏目，只是回复速度可能不太快。d(^=^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596526346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183314,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1582992943,"is_pvip":false,"replies":[{"id":"71083","content":"非常棒，看得出来，是根据你自己的理解写出来的。所以，还有很多可以优化的地方。(笑哭)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583114560,"ip_address":"","comment_id":183314,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877960239","product_id":100043901,"comment_content":"int hasCycle(struct Node *head,int* rlong,int* begin) {<br>    if (head == NULL) return 0;<br>    &#47;&#47; p 是慢指针，q 是快指针<br>    struct Node * p = head, q = head;<br>    int np = 1,nq = 1;<br>    &#47;&#47; 每次循环，p 走1步，q 走2步<br>    do {<br>        p = p-&gt;next;<br>        q = q-&gt;next;<br>        np += 1;<br>        nq += 1;<br>        if (q == NULL) return 0;<br>        q = q-&gt;next;<br>        nq += 1;<br>    } while (p != q &amp;&amp; q);<br>\t*rlong = nq - np;<br>\tstruct Node * two=head;<br>\tint rangbe = 0;<br>\tdo{<br>\t\tp = p-&gt;next;<br>        two = two-&gt;next;<br>        rangbe++;<br>\t}while(p != two)<br>\t*begin = rangbe;<br>    return 1;<br>}","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485649,"discussion_content":"非常棒，看得出来，是根据你自己的理解写出来的。所以，还有很多可以优化的地方。(笑哭)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288795,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1618677349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618677349","product_id":100043901,"comment_content":"找环起始点的方法：定义快慢指针为fast = head-&gt;next, slow = head. 然后让他们相遇。相遇后，头结点指针和慢指针同时移动，走到head = slow-&gt;next停下。此时head指向的就是环的起点。<br>这题可以用数学证明出来。假设链表非环部分的长度是x1, 环的长度是x2， slow的步长是d，fast的步长是2d，总共走了m步，那么在slow和fast相遇时，前者走了md= x1 + L, 后者走了m2d = x1 -1 + x2 + L, 因此我们有x1 + 1 = x2 - L,也就是说，head和slow要相遇的距离相差1,也就是head走到环起始点时，slow肯定相差一个步长，因此head = slow-&gt;next就是循环出口<br>","like_count":0},{"had_liked":false,"id":251551,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601672000,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601672000","product_id":100043901,"comment_content":"茶艺师学编程<br><br>思考题：<br><br>1、求环的起始点<br>在使用快慢指针情况，当快指针遇到慢指针就停止，观察快慢指针指过的数字。找到第一次出现3次的数字（慢指针出现1次，快指针出现2次），则这个数字就是环的起点。<br><br>2、求环的长度<br>包括循环起点的循环体的长度&#47;2 + 链表开头到循环起点的举例","like_count":0},{"had_liked":false,"id":251497,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601615897,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601615897","product_id":100043901,"comment_content":"茶艺师学编程<br>快慢针<br>#include &lt;stdio.h&gt;<br>#include &lt;stdbool.h&gt;<br>int getnext(int x){<br>    int totalsum = 0;<br>    while(x &gt; 0){<br>        int d = x % 10;<br>        x = x &#47; 10;<br>        totalsum += d * d;<br>    }<br>    return totalsum;<br>}<br>bool isHappy(int n){<br>    int slowrunner = n;<br>    int fastrunner = getnext(n);<br>    while (fastrunner != 1 &amp;&amp; slowrunner != fastrunner){<br>        slowrunner = getnext(slowrunner);<br>        fastrunner = getnext(getnext(fastrunner));<br>        if(fastrunner == 1)return 1;<br>        if(fastrunner == slowrunner)return 0;<br>    }<br>}<br>int main(){<br>    int a;<br>    puts(&quot;请输入要判断的数字：&quot;) ;<br>    scanf(&quot;%d&quot;, &amp;a);<br>    int b;<br>    b = isHappy(a);<br>    if(b != 1)printf(&quot;\\n%d不是快乐数\\n&quot;, a);<br>    else printf(&quot;\\n%d是快乐数\\n&quot;, a);<br>    return 0;<br>}<br><br><br>  ","like_count":0},{"had_liked":false,"id":251495,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601615732,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601615732","product_id":100043901,"comment_content":"#include &lt;stdio.h&gt;<br>#include &lt;stdbool.h&gt;<br>#define NUMBER 1000<br>int Num(int x){<br>    int ret = 0;<br>    while(x){<br>        ret += (x % 10) * (x % 10);<br>        x &#47;= 10;<br>    }<br>    return ret;<br>}<br>bool isHappy(int n){<br>    if(n &lt;= 0)return false;<br>    while(n != 1){<br>        n = Num(n);<br>        if(n == 4)return false;<br>    }<br>    return true;<br>}<br>int main(){<br>    int AA[NUMBER] = {0};<br>    bool a;<br>    int ret = 0;<br>    for(int i = 0; i &lt;= NUMBER; i++){<br>        AA[i] = i;<br>    }<br>    for(int i = 0; i &lt;= NUMBER; i++){<br>        ret = Num(AA[i]);<br>        a = isHappy( ( ret );<br>        if(a == true){<br>            AA[i] = 1;}<br>    }<br>    for(int i = 1; i &lt;= NUMBER; i++){<br>   if(AA[i] != 1){<br>        printf(&quot;%d\\t&quot;, AA[i]);<br>       }<br>   }<br>return 0；<br>}","like_count":0},{"had_liked":false,"id":251491,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601614754,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601614754","product_id":100043901,"comment_content":"茶艺师学编程<br><br>终于终于开窍了一点。<br><br>老师所说的运用链表思维去解决快慢数问题，我居然傻憨憨地去试图拿链表去实现，在苦恼“在链表里先随着计算过程自动生成节点，再实现成环循环，那空间分配以及next指针怎么生成……”好久好久。<br><br>今天终于才想通，可以虚拟链表啊，不然老师说“链表思维”。<br><br>下面的代码，第一部分首先是用一般的办法实现的，第二部分是用链表快慢针实现的。","like_count":0},{"had_liked":false,"id":206919,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1586957240,"is_pvip":false,"replies":[{"id":"77392","content":"快慢指针，就是用来解决有环情况下，如何停下来的问题的。如果两个指针相遇了，说明有环，如果快指针最先跑到了null地址，说明链表无环，是一个直道。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1587018564,"ip_address":"","comment_id":206919,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1586957240","product_id":100043901,"comment_content":"虽然是9次9的平方相乘加，9*9^2为什么不直接写成9^3呢？这样计算机程序不理解吗？可是它会算啊。让运动员跑圈用不用定义“距离”，就跑一圈，即使是环形也不会相遇。另外想问问胡老师这个null地址是最终目的吗？并且是定点指向一定要去往的地址吗？如果到不了null地址就知道有环。这需要定义最大值吗？不然如何停下呢？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491950,"discussion_content":"快慢指针，就是用来解决有环情况下，如何停下来的问题的。如果两个指针相遇了，说明有环，如果快指针最先跑到了null地址，说明链表无环，是一个直道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587018564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183299,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1582989788,"is_pvip":false,"replies":[{"id":"71084","content":"恩，对的，是个笔误。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583114670,"ip_address":"","comment_id":183299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582989788","product_id":100043901,"comment_content":"示例代码中，p 和 q 应该是结构体指针类型而不是 int 类型吧","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485639,"discussion_content":"恩，对的，是个笔误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}