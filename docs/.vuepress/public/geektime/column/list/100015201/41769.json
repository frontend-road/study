{"id":41769,"title":"23 | 声明式API与Kubernetes编程范式","content":"<p>你好，我是张磊。今天我和你分享的主题是：声明式API与Kubernetes编程范式。</p><p>在前面的几篇文章中，我和你分享了很多Kubernetes的API对象。这些API对象，有的是用来描述应用，有的则是为应用提供各种各样的服务。但是，无一例外地，为了使用这些API对象提供的能力，你都需要编写一个对应的YAML文件交给Kubernetes。</p><p>这个YAML文件，正是Kubernetes声明式API所必须具备的一个要素。不过，是不是只要用YAML文件代替了命令行操作，就是声明式API了呢？</p><p>举个例子。我们知道，Docker Swarm的编排操作都是基于命令行的，比如：</p><pre><code>$ docker service create --name nginx --replicas 2  nginx\n$ docker service update --image nginx:1.7.9 nginx\n</code></pre><p>像这样的两条命令，就是用Docker Swarm启动了两个Nginx容器实例。其中，第一条create命令创建了这两个容器，而第二条update命令则把它们“滚动更新”成了一个新的镜像。</p><p>对于这种使用方式，我们称为<strong>命令式命令行操作</strong>。</p><p>那么，像上面这样的创建和更新两个Nginx容器的操作，在Kubernetes里又该怎么做呢？</p><p>这个流程，相信你已经非常熟悉了：我们需要在本地编写一个Deployment的YAML文件：</p><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n</code></pre><!-- [[[read_end]]] --><p>然后，我们还需要使用kubectl create命令在Kubernetes里创建这个Deployment对象：</p><pre><code>$ kubectl create -f nginx.yaml\n</code></pre><p>这样，两个Nginx的Pod就会运行起来了。</p><p>而如果要更新这两个Pod使用的Nginx镜像，该怎么办呢？</p><p>我们前面曾经使用过kubectl set image和kubectl edit命令，来直接修改Kubernetes里的API对象。不过，相信很多人都有这样的想法，我能不能通过修改本地YAML文件来完成这个操作呢？这样我的改动就会体现在这个本地YAML文件里了。</p><p>当然可以。</p><p>比如，我们可以修改这个YAML文件里的Pod模板部分，把Nginx容器的镜像改成1.7.9，如下所示：</p><pre><code>...\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n</code></pre><p>而接下来，我们就可以执行一句kubectl replace操作，来完成这个Deployment的更新：</p><pre><code>$ kubectl replace -f nginx.yaml\n</code></pre><p>可是，上面这种基于YAML文件的操作方式，是“声明式API”吗？</p><p>并不是。</p><p>对于上面这种先kubectl create，再replace的操作，我们称为<strong>命令式配置文件操作。</strong></p><p>也就是说，它的处理方式，其实跟前面Docker Swarm的两句命令，没什么本质上的区别。只不过，它是把Docker命令行里的参数，写在了配置文件里而已。</p><p><strong>那么，到底什么才是“声明式API”呢？</strong></p><p>答案是，kubectl apply命令。</p><p>在前面的文章中，我曾经提到过这个kubectl apply命令，并推荐你使用它来代替kubectl create命令（你也可以借此机会再回顾一下第12篇文章<a href=\"https://time.geekbang.org/column/article/40008\">《牛刀小试：我的第一个容器化应用》</a>中的相关内容）。</p><p>现在，我就使用kubectl apply命令来创建这个Deployment：</p><pre><code>$ kubectl apply -f nginx.yaml\n</code></pre><p>这样，Nginx的Deployment就被创建了出来，这看起来跟kubectl create的效果一样。</p><p>然后，我再修改一下nginx.yaml里定义的镜像：</p><pre><code>...\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n</code></pre><p>这时候，关键来了。</p><p>在修改完这个YAML文件之后，我不再使用kubectl replace命令进行更新，而是继续执行一条kubectl apply命令，即：</p><pre><code>$ kubectl apply -f nginx.yaml\n</code></pre><p>这时，Kubernetes就会立即触发这个Deployment的“滚动更新”。</p><p>可是，它跟kubectl replace命令有什么本质区别吗？</p><p>实际上，你可以简单地理解为，kubectl replace的执行过程，是使用新的YAML文件中的API对象，<strong>替换原有的API对象</strong>；而kubectl apply，则是执行了一个<strong>对原有API对象的PATCH操作</strong>。</p><blockquote>\n<p>类似地，kubectl set image和kubectl edit也是对已有API对象的修改。</p>\n</blockquote><p>更进一步地，这意味着kube-apiserver在响应命令式请求（比如，kubectl replace）的时候，一次只能处理一个写请求，否则会有产生冲突的可能。而对于声明式请求（比如，kubectl apply），<strong>一次能处理多个写操作，并且具备Merge能力</strong>。</p><p>这种区别，可能乍一听起来没那么重要。而且，正是由于要照顾到这样的API设计，做同样一件事情，Kubernetes需要的步骤往往要比其他项目多不少。</p><p>但是，如果你仔细思考一下Kubernetes项目的工作流程，就不难体会到这种声明式API的独到之处。</p><p>接下来，我就以Istio项目为例，来为你讲解一下声明式API在实际使用时的重要意义。</p><p>在2017年5月，Google、IBM和Lyft公司，共同宣布了Istio开源项目的诞生。很快，这个项目就在技术圈儿里，掀起了一阵名叫“微服务”的热潮，把Service Mesh这个新的编排概念推到了风口浪尖。</p><p>而Istio项目，实际上就是一个基于Kubernetes项目的微服务治理框架。它的架构非常清晰，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/1b/d38daed2fedc90e20e9d2f27afbaec1b.jpg?wh=1920*1080\" alt=\"\"><br>\n在上面这个架构图中，我们不难看到Istio项目架构的核心所在。<strong>Istio最根本的组件，是运行在每一个应用Pod里的Envoy容器</strong>。</p><p>这个Envoy项目是Lyft公司推出的一个高性能C++网络代理，也是Lyft公司对Istio项目的唯一贡献。</p><p>而Istio项目，则把这个代理服务以sidecar容器的方式，运行在了每一个被治理的应用Pod中。我们知道，Pod里的所有容器都共享同一个Network Namespace。所以，Envoy容器就能够通过配置Pod里的iptables规则，把整个Pod的进出流量接管下来。</p><p>这时候，Istio的控制层（Control Plane）里的Pilot组件，就能够通过调用每个Envoy容器的API，对这个Envoy代理进行配置，从而实现微服务治理。</p><p>我们一起来看一个例子。</p><p>假设这个Istio架构图左边的Pod是已经在运行的应用，而右边的Pod则是我们刚刚上线的应用的新版本。这时候，Pilot通过调节这两Pod里的Envoy容器的配置，从而将90%的流量分配给旧版本的应用，将10%的流量分配给新版本应用，并且，还可以在后续的过程中随时调整。这样，一个典型的“灰度发布”的场景就完成了。比如，Istio可以调节这个流量从90%-10%，改到80%-20%，再到50%-50%，最后到0%-100%，就完成了这个灰度发布的过程。</p><p>更重要的是，在整个微服务治理的过程中，无论是对Envoy容器的部署，还是像上面这样对Envoy代理的配置，用户和应用都是完全“无感”的。</p><p>这时候，你可能会有所疑惑：Istio项目明明需要在每个Pod里安装一个Envoy容器，又怎么能做到“无感”的呢？</p><p>实际上，<strong>Istio项目使用的，是Kubernetes中的一个非常重要的功能，叫作Dynamic Admission Control。</strong></p><p>在Kubernetes项目中，当一个Pod或者任何一个API对象被提交给APIServer之后，总有一些“初始化”性质的工作需要在它们被Kubernetes项目正式处理之前进行。比如，自动为所有Pod加上某些标签（Labels）。</p><p>而这个“初始化”操作的实现，借助的是一个叫作Admission的功能。它其实是Kubernetes项目里一组被称为Admission Controller的代码，可以选择性地被编译进APIServer中，在API对象创建之后会被立刻调用到。</p><p>但这就意味着，如果你现在想要添加一些自己的规则到Admission Controller，就会比较困难。因为，这要求重新编译并重启APIServer。显然，这种使用方法对Istio来说，影响太大了。</p><p>所以，Kubernetes项目为我们额外提供了一种“热插拔”式的Admission机制，它就是Dynamic Admission Control，也叫作：Initializer。</p><p>现在，我给你举个例子。比如，我有如下所示的一个应用Pod：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! &amp;&amp; sleep 3600']\n</code></pre><p>可以看到，这个Pod里面只有一个用户容器，叫作：myapp-container。</p><p>接下来，Istio项目要做的，就是在这个Pod YAML被提交给Kubernetes之后，在它对应的API对象里自动加上Envoy容器的配置，使这个对象变成如下所示的样子：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: ['sh', '-c', 'echo Hello Kubernetes! &amp;&amp; sleep 3600']\n  - name: envoy\n    image: lyft/envoy:845747b88f102c0fd262ab234308e9e22f693a1\n    command: [&quot;/usr/local/bin/envoy&quot;]\n    ...\n</code></pre><p>可以看到，被Istio处理后的这个Pod里，除了用户自己定义的myapp-container容器之外，多出了一个叫作envoy的容器，它就是Istio要使用的Envoy代理。</p><p>那么，Istio又是如何在用户完全不知情的前提下完成这个操作的呢？</p><p>Istio要做的，就是编写一个用来为Pod“自动注入”Envoy容器的Initializer。</p><p><strong>首先，Istio会将这个Envoy容器本身的定义，以ConfigMap的方式保存在Kubernetes当中</strong>。这个ConfigMap（名叫：envoy-initializer）的定义如下所示：</p><pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: envoy-initializer\ndata:\n  config: |\n    containers:\n      - name: envoy\n        image: lyft/envoy:845747db88f102c0fd262ab234308e9e22f693a1\n        command: [&quot;/usr/local/bin/envoy&quot;]\n        args:\n          - &quot;--concurrency 4&quot;\n          - &quot;--config-path /etc/envoy/envoy.json&quot;\n          - &quot;--mode serve&quot;\n        ports:\n          - containerPort: 80\n            protocol: TCP\n        resources:\n          limits:\n            cpu: &quot;1000m&quot;\n            memory: &quot;512Mi&quot;\n          requests:\n            cpu: &quot;100m&quot;\n            memory: &quot;64Mi&quot;\n        volumeMounts:\n          - name: envoy-conf\n            mountPath: /etc/envoy\n    volumes:\n      - name: envoy-conf\n        configMap:\n          name: envoy\n</code></pre><p>相信你已经注意到了，这个ConfigMap的data部分，正是一个Pod对象的一部分定义。其中，我们可以看到Envoy容器对应的containers字段，以及一个用来声明Envoy配置文件的volumes字段。</p><p>不难想到，Initializer要做的工作，就是把这部分Envoy相关的字段，自动添加到用户提交的Pod的API对象里。可是，用户提交的Pod里本来就有containers字段和volumes字段，所以Kubernetes在处理这样的更新请求时，就必须使用类似于git merge这样的操作，才能将这两部分内容合并在一起。</p><p>所以说，在Initializer更新用户的Pod对象的时候，必须使用PATCH API来完成。而这种PATCH API，正是声明式API最主要的能力。</p><p><strong>接下来，Istio将一个编写好的Initializer，作为一个Pod部署在Kubernetes中</strong>。这个Pod的定义非常简单，如下所示：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: envoy-initializer\n  name: envoy-initializer\nspec:\n  containers:\n    - name: envoy-initializer\n      image: envoy-initializer:0.0.1\n      imagePullPolicy: Always\n</code></pre><p>我们可以看到，这个envoy-initializer使用的envoy-initializer:0.0.1镜像，就是一个事先编写好的“自定义控制器”（Custom Controller），我将会在下一篇文章中讲解它的编写方法。而在这里，我要先为你解释一下这个控制器的主要功能。</p><p>我曾在第16篇文章<a href=\"https://time.geekbang.org/column/article/40583\">《编排其实很简单：谈谈“控制器”模型》</a>中和你分享过，一个Kubernetes的控制器，实际上就是一个“死循环”：它不断地获取“实际状态”，然后与“期望状态”作对比，并以此为依据决定下一步的操作。</p><p>而Initializer的控制器，不断获取到的“实际状态”，就是用户新创建的Pod。而它的“期望状态”，则是：这个Pod里被添加了Envoy容器的定义。</p><p>我还是用一段Go语言风格的伪代码，来为你描述这个控制逻辑，如下所示：</p><pre><code>for {\n  // 获取新创建的Pod\n  pod := client.GetLatestPod()\n  // Diff一下，检查是否已经初始化过\n  if !isInitialized(pod) {\n    // 没有？那就来初始化一下\n    doSomething(pod)\n  }\n}\n</code></pre><ul>\n<li>如果这个Pod里面已经添加过Envoy容器，那么就“放过”这个Pod，进入下一个检查周期。</li>\n<li>而如果还没有添加过Envoy容器的话，它就要进行Initialize操作了，即：修改该Pod的API对象（doSomething函数）。</li>\n</ul><p>这时候，你应该立刻能想到，Istio要往这个Pod里合并的字段，正是我们之前保存在envoy-initializer这个ConfigMap里的数据（即：它的data字段的值）。</p><p>所以，在Initializer控制器的工作逻辑里，它首先会从APIServer中拿到这个ConfigMap：</p><pre><code>func doSomething(pod) {\n  cm := client.Get(ConfigMap, &quot;envoy-initializer&quot;)\n}\n</code></pre><p>然后，把这个ConfigMap里存储的containers和volumes字段，直接添加进一个空的Pod对象里：</p><pre><code>func doSomething(pod) {\n  cm := client.Get(ConfigMap, &quot;envoy-initializer&quot;)\n  \n  newPod := Pod{}\n  newPod.Spec.Containers = cm.Containers\n  newPod.Spec.Volumes = cm.Volumes\n}\n</code></pre><p>现在，关键来了。</p><p>Kubernetes的API库，为我们提供了一个方法，使得我们可以直接使用新旧两个Pod对象，生成一个TwoWayMergePatch：</p><pre><code>func doSomething(pod) {\n  cm := client.Get(ConfigMap, &quot;envoy-initializer&quot;)\n\n  newPod := Pod{}\n  newPod.Spec.Containers = cm.Containers\n  newPod.Spec.Volumes = cm.Volumes\n\n  // 生成patch数据\n  patchBytes := strategicpatch.CreateTwoWayMergePatch(pod, newPod)\n\n  // 发起PATCH请求，修改这个pod对象\n  client.Patch(pod.Name, patchBytes)\n}\n</code></pre><p><strong>有了这个TwoWayMergePatch之后，Initializer的代码就可以使用这个patch的数据，调用Kubernetes的Client，发起一个PATCH请求</strong>。</p><p>这样，一个用户提交的Pod对象里，就会被自动加上Envoy容器相关的字段。</p><p>当然，Kubernetes还允许你通过配置，来指定要对什么样的资源进行这个Initialize操作，比如下面这个例子：</p><pre><code>apiVersion: admissionregistration.k8s.io/v1alpha1\nkind: InitializerConfiguration\nmetadata:\n  name: envoy-config\ninitializers:\n  // 这个名字必须至少包括两个 &quot;.&quot;\n  - name: envoy.initializer.kubernetes.io\n    rules:\n      - apiGroups:\n          - &quot;&quot; // 前面说过， &quot;&quot;就是core API Group的意思\n        apiVersions:\n          - v1\n        resources:\n          - pods\n</code></pre><p>这个配置，就意味着Kubernetes要对所有的Pod进行这个Initialize操作，并且，我们指定了负责这个操作的Initializer，名叫：envoy-initializer。</p><p>而一旦这个InitializerConfiguration被创建，Kubernetes就会把这个Initializer的名字，加在所有新创建的Pod的Metadata上，格式如下所示：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  initializers:\n    pending:\n      - name: envoy.initializer.kubernetes.io\n  name: myapp-pod\n  labels:\n    app: myapp\n...\n</code></pre><p>可以看到，每一个新创建的Pod，都会自动携带了metadata.initializers.pending的Metadata信息。</p><p>这个Metadata，正是接下来Initializer的控制器判断这个Pod有没有执行过自己所负责的初始化操作的重要依据（也就是前面伪代码中isInitialized()方法的含义）。</p><p><strong>这也就意味着，当你在Initializer里完成了要做的操作后，一定要记得将这个metadata.initializers.pending标志清除掉。这一点，你在编写Initializer代码的时候一定要非常注意。</strong></p><p>此外，除了上面的配置方法，你还可以在具体的Pod的Annotation里添加一个如下所示的字段，从而声明要使用某个Initializer：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata\n  annotations:\n    &quot;initializer.kubernetes.io/envoy&quot;: &quot;true&quot;\n    ...\n</code></pre><p>在这个Pod里，我们添加了一个Annotation，写明： <code>initializer.kubernetes.io/envoy=true</code>。这样，就会使用到我们前面所定义的envoy-initializer了。</p><p>以上，就是关于Initializer最基本的工作原理和使用方法了。相信你此时已经明白，<strong>Istio项目的核心，就是由无数个运行在应用Pod中的Envoy容器组成的服务代理网格</strong>。这也正是Service Mesh的含义。</p><blockquote>\n<p>备注：如果你对这个Demo感兴趣，可以在<a href=\"https://github.com/resouer/kubernetes-initializer-tutorial\">这个GitHub链接</a>里找到它的所有源码和文档。这个Demo，是我fork自Kelsey Hightower的一个同名的Demo。</p>\n</blockquote><p>而这个机制得以实现的原理，正是借助了Kubernetes能够对API对象进行在线更新的能力，这也正是<strong>Kubernetes“声明式API”的独特之处：</strong></p><ul>\n<li>首先，所谓“声明式”，指的就是我只需要提交一个定义好的API对象来“声明”，我所期望的状态是什么样子。</li>\n<li>其次，“声明式API”允许有多个API写端，以PATCH的方式对API对象进行修改，而无需关心本地原始YAML文件的内容。</li>\n<li>最后，也是最重要的，有了上述两个能力，Kubernetes项目才可以基于对API对象的增、删、改、查，在完全无需外界干预的情况下，完成对“实际状态”和“期望状态”的调谐（Reconcile）过程。</li>\n</ul><p>所以说，<strong>声明式API，才是Kubernetes项目编排能力“赖以生存”的核心所在</strong>，希望你能够认真理解。</p><p>此外，不难看到，无论是对sidecar容器的巧妙设计，还是对Initializer的合理利用，Istio项目的设计与实现，其实都依托于Kubernetes的声明式API和它所提供的各种编排能力。可以说，Istio是在Kubernetes项目使用上的一位“集大成者”。</p><blockquote>\n<p>要知道，一个Istio项目部署完成后，会在Kubernetes里创建大约43个API对象。</p>\n</blockquote><p>所以，Kubernetes社区也看得很明白：Istio项目有多火热，就说明Kubernetes这套“声明式API”有多成功。这，既是Google Cloud喜闻乐见的事情，也是Istio项目一推出就被Google公司和整个技术圈儿热捧的重要原因。</p><p>而在使用Initializer的流程中，最核心的步骤，莫过于Initializer“自定义控制器”的编写过程。它遵循的，正是标准的“Kubernetes编程范式”，即：</p><blockquote>\n<p><strong>如何使用控制器模式，同Kubernetes里API对象的“增、删、改、查”进行协作，进而完成用户业务逻辑的编写过程。</strong></p>\n</blockquote><p>这，也正是我要在后面文章中为你详细讲解的内容。</p><h2>总结</h2><p>在今天这篇文章中，我为你重点讲解了Kubernetes声明式API的含义。并且，通过对Istio项目的剖析，我为你说明了它使用Kubernetes的Initializer特性，完成Envoy容器“自动注入”的原理。</p><p>事实上，从“使用Kubernetes部署代码”，到“使用Kubernetes编写代码”的蜕变过程，正是你从一个Kubernetes用户，到Kubernetes玩家的晋级之路。</p><p>而，如何理解“Kubernetes编程范式”，如何为Kubernetes添加自定义API对象，编写自定义控制器，正是这个晋级过程中的关键点，也是我要在后面几篇文章中分享的核心内容。</p><p>此外，基于今天这篇文章所讲述的Istio的工作原理，尽管Istio项目一直宣称它可以运行在非Kubernetes环境中，但我并不建议你花太多时间去做这个尝试。</p><p>毕竟，无论是从技术实现还是在社区运作上，Istio与Kubernetes项目之间都是紧密的、唇齿相依的关系。如果脱离了Kubernetes项目这个基础，那么这条原本就不算平坦的“微服务”之路，恐怕会更加困难重重。</p><h2>思考题</h2><p>你是否对Envoy项目做过了解？你觉得为什么它能够击败Nginx以及HAProxy等竞品，成为Service Mesh体系的核心？</p><p>感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。</p>","neighbors":{"left":{"article_title":"22 | 撬动离线业务：Job与CronJob","id":41607},"right":{"article_title":"24 | 深入解析声明式API（一）：API对象的奥秘","id":41876}},"comments":[{"had_liked":false,"id":43524,"user_name":"周龙亭","can_delete":false,"product_type":"c1","uid":1004577,"ip_address":"","ucode":"21BD0DD15CFCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/21/8c13a2b4.jpg","comment_is_top":false,"comment_ctime":1543236327,"is_pvip":false,"replies":[{"id":"15726","content":"是的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1543371591,"ip_address":"","comment_id":43524,"utype":1}],"discussion_count":5,"race_medal":0,"score":"473989638887","product_id":100015201,"comment_content":"是因为envoy提供了api形式的配置入口，更方便做流量治理","like_count":110,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430416,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543371591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971269,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","nickname":"杨","note":"","ucode":"7EFEFE285975C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589136,"discussion_content":"目前不需要流量治理  暂时没使用istio","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664440917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542803,"discussion_content":"🐂🍺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640849030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1837179,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/08/7b/7f086546.jpg","nickname":"Alex","note":"","ucode":"70806CEA9AB15E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382763,"discussion_content":"🐂🍺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625715349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113140,"discussion_content":"牛🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577890424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32522,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539600361,"is_pvip":false,"replies":[{"id":"11849","content":"istio不就是例子？系统里完全可以有好几个initializer在改同一个pod，你直接replace了别人还玩不玩了？","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539602696,"ip_address":"","comment_id":32522,"utype":1}],"discussion_count":10,"race_medal":0,"score":"306482278377","product_id":100015201,"comment_content":"老师，用声明式api的好处没有体会太深刻。<br>如果在dosomething中merge出新的yaml，然后用replace会有什么缺点？<br>好像在这篇文章中仅仅提到声明式的可以多个客户端同时写。除此之外，还有其他优点吗？<br>也就是说修改对象比替换对象的优势在哪？","like_count":71,"discussions":[{"author":{"id":1203276,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/4c/ccf611c4.jpg","nickname":"miao linjie","note":"","ucode":"1C16D43A055213","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227715,"discussion_content":"主要是k8s的api都不是同步的，多个控制器可以同时修改一个pod。 如果一个控制器修改完后就直接replace掉了， 那很大可能会把其他控制器的修改覆盖掉。 ","likes_number":33,"is_delete":false,"is_hidden":false,"ctime":1586514441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203276,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/4c/ccf611c4.jpg","nickname":"miao linjie","note":"","ucode":"1C16D43A055213","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345146,"discussion_content":"如果同时有控制器修改同一个part内容，不知道会怎么样？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611669294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":227715,"ip_address":""},"score":345146,"extra":""},{"author":{"id":1292087,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b7/37/0290ff6e.jpg","nickname":"Veitor","note":"","ucode":"3397AC6D239195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203276,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/4c/ccf611c4.jpg","nickname":"miao linjie","note":"","ucode":"1C16D43A055213","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370636,"discussion_content":"所以声明式API的最主要的本质就是具有Merge能力？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1619488814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":227715,"ip_address":""},"score":370636,"extra":""}]},{"author":{"id":1651441,"avatar":"https://static001.geekbang.org/account/avatar/00/19/32/f1/fd24d52b.jpg","nickname":"青禾qingh","note":"","ucode":"453FC435B03790","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334202,"discussion_content":"那就不玩了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1607763925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1837179,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/08/7b/7f086546.jpg","nickname":"Alex","note":"","ucode":"70806CEA9AB15E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382764,"discussion_content":"声明式API的最主要的本质就是具有Merge能力","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1625715398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426804,"discussion_content":"istio不就是例子？系统里完全可以有好几个initializer在改同一个pod，你直接replace了别人还玩不玩了？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1539602696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145068,"avatar":"https://static001.geekbang.org/account/avatar/00/11/78/ec/f7f0d21a.jpg","nickname":"Dev-L","note":"","ucode":"485E940C3F17B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292422,"discussion_content":"patch的方式可以允许不同的initializer修改不同的part","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1595221122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533343,"discussion_content":"多个initializer修改同一个pod，只会merge，不会覆盖。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637841943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053419,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/eb/b2cba6c4.jpg","nickname":"兴浩","note":"","ucode":"E0BE135E97FCE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579422,"discussion_content":"patch额外提供了很多了扩展的钩子流程，replace就直接暴力替换了，没有扩展性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657441288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017721,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/79/1fc93cbe.jpg","nickname":"tglgame","note":"","ucode":"827AB8769B8683","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413910,"discussion_content":"感觉有些类似乐观锁的机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636606232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32355,"user_name":"Geek_zz","can_delete":false,"product_type":"c1","uid":1130682,"ip_address":"","ucode":"A3AC7C2991B50D","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/ba/2c8af305.jpg","comment_is_top":false,"comment_ctime":1539558958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"199108054574","product_id":100015201,"comment_content":"居然看一遍就记住了这节课的原理","like_count":46},{"had_liked":false,"id":32524,"user_name":"swordholder","can_delete":false,"product_type":"c1","uid":1002569,"ip_address":"","ucode":"3D1361126AD3CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/49/d21c134f.jpg","comment_is_top":false,"comment_ctime":1539600893,"is_pvip":false,"replies":[{"id":"11856","content":"不会啊。注意看apiserver的流程图，initializer发生在admission阶段，这个阶段完成后pod才会创建出来。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539609316,"ip_address":"","comment_id":32524,"utype":1}],"discussion_count":2,"race_medal":0,"score":"181928227325","product_id":100015201,"comment_content":"有个疑问，在envoy-initializer的“控制循环”中获取新创建的Pod，这个Pod是否已经在正常运行了？<br>Initializer 提交patch修改Pod对象，Kubernetes发现Pod更新，然后以“滚动升级”的方式更新运行中的Pod？","like_count":42,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426806,"discussion_content":"不会啊。注意看apiserver的流程图，initializer发生在admission阶段，这个阶段完成后pod才会创建出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539609316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533344,"discussion_content":"被initializer影响的pod在自动加的label里有pending字样，猜测应该是创建过程被pending住了，等待initializer做事。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637842070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251705,"user_name":"ch_ort","can_delete":false,"product_type":"c1","uid":1580926,"ip_address":"","ucode":"B79746E687F29E","user_header":"","comment_is_top":false,"comment_ctime":1601803371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164810560619","product_id":100015201,"comment_content":"通俗地说：如果要把一个东西存入冰箱。命令式API需要做的是：打开冰箱 -&gt; 放入东西 -&gt; 关掉冰箱。而声明式就是： 这个东西在冰箱里。<br><br><br><br>命令式请求与声明式请求：<br>（1）服务对于命令式请求，一次只能处理一个写请求，否则可能会导致冲突<br>（2）服务对于声明式请求，一次能处理多个请求，并且具备Merge的能力<br><br>kubectl replace命令与kubectl apply命令的本质区别在于，kubectl replace的执行过程，是使用新的YAML文件中的API对象，替换原有的API对象；而kubectl apply，则是执行了一个对原有API对象的PATCH（部分更新）操作<br><br>声明式API特点：<br>（1）我们只需要提交一个定义好的API对象来“声明”，我所期望的状态是什么样子<br>（2）声明式API允许由多个API写端，以PATCH的方式对API对象进行修改，而无需关心本地原始YAML文件的内容<br>（3）有了上述两个能力，Kubernetes项目才可以给予对API对象的增、删、改、查，在完全无需外界干预的情况下，完成对“实际状态”和“期望状态”的调谐（Reconcile）过程<br><br><br>","like_count":38},{"had_liked":false,"id":32753,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539688035,"is_pvip":false,"replies":[{"id":"11983","content":"是啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539745783,"ip_address":"","comment_id":32753,"utype":1}],"discussion_count":2,"race_medal":0,"score":"160453477987","product_id":100015201,"comment_content":"kubectl apply 是通过mvcc 实现的并发写吗？","like_count":37,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426885,"discussion_content":"是啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539745783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2268436,"avatar":"","nickname":"binf","note":"","ucode":"AE6D7CD6CAFE4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542682,"discussion_content":"mvcc还能并发写？。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640827620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32607,"user_name":"混沌渺无极","can_delete":false,"product_type":"c1","uid":1221896,"ip_address":"","ucode":"A8517768BF1E77","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/08/10b18682.jpg","comment_is_top":false,"comment_ctime":1539625732,"is_pvip":false,"replies":[{"id":"11898","content":"就是这么回事儿","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539652716,"ip_address":"","comment_id":32607,"utype":1}],"discussion_count":2,"race_medal":0,"score":"151863481092","product_id":100015201,"comment_content":"dynamic admission control有点像防火墙的DNAT，数据包即将进入路由表的瞬间被修改了目的地址，这样路由表就对数据包的修改[无感]。<br>patch就像多人使用git来进行文件的&quot;合并型&quot;修改。","like_count":35,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426832,"discussion_content":"就是这么回事儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539652716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1934785,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Pu41KPIhAp72l0N7kOFL738owSAIT5EyH0oUUMacQRWzeFV77QDjSDNTSFNvjNZib1myibvxAfQAsAY5KzsIia73w/132","nickname":"王鹏","note":"","ucode":"B79003C125BE00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576840,"discussion_content":"刚想说类似于git提交合并","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655807709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32588,"user_name":"huan","can_delete":false,"product_type":"c1","uid":1012286,"ip_address":"","ucode":"46CB95F6E4E5FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/3e/534db55d.jpg","comment_is_top":false,"comment_ctime":1539616972,"is_pvip":false,"replies":[{"id":"11899","content":"这确实是一个因素","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539652798,"ip_address":"","comment_id":32588,"utype":1}],"discussion_count":4,"race_medal":0,"score":"96028897484","product_id":100015201,"comment_content":"又查了下envoy的设计，感觉它支持热更新和热重启，应该很适合声明式规则的开发范式，这可以看做一种优势，相比而言，nginx的reload需要把worker进程退出，比较面向命令","like_count":22,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426826,"discussion_content":"这确实是一个因素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539652798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2640738,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4b/62/b060f4b5.jpg","nickname":"Nightwish","note":"","ucode":"FC4C213C4063E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386182,"discussion_content":"nginx 的reload 不会将work进程中的作业打断吧？envoy的热重启不想nginx 的reload?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627457153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1261493,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/b5/5fe77e16.jpg","nickname":"不经意间","note":"","ucode":"C39D98697ACB8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2640738,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4b/62/b060f4b5.jpg","nickname":"Nightwish","note":"","ucode":"FC4C213C4063E0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409121,"discussion_content":"个人理解。k8s的声明式api都是作用是体现在控制循环里的，下次循环就可以应用了。不像nginx需要创建work进程，且这些进程是要实时提供服务的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635383286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386182,"ip_address":""},"score":409121,"extra":""}]},{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345147,"discussion_content":"请问热更新，热重启怎么理解？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611669469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32360,"user_name":"DJH","can_delete":false,"product_type":"c1","uid":1256740,"ip_address":"","ucode":"2BDEF123B3DB6A","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/24/28acca15.jpg","comment_is_top":false,"comment_ctime":1539560695,"is_pvip":false,"replies":[{"id":"11809","content":"preset相当于initializer的子集，比较适合在发布流程里处理比较简单的情况。initializer是要写代码的。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539571050,"ip_address":"","comment_id":32360,"utype":1}],"discussion_count":2,"race_medal":0,"score":"87438906615","product_id":100015201,"comment_content":"请教老师，Initializer和Preset都能注入POD配置，那么这两种方法的适用场景有何不同？","like_count":20,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426740,"discussion_content":"preset相当于initializer的子集，比较适合在发布流程里处理比较简单的情况。initializer是要写代码的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539571050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153968,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/b0/30d6c3d8.jpg","nickname":"xiaohinata","note":"","ucode":"5402942AF518C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555058,"discussion_content":"刚好对此有疑问，网上没介绍区别的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646729939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37799,"user_name":"Lis","can_delete":false,"product_type":"c1","uid":1284254,"ip_address":"","ucode":"1D095DA2CE2C65","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/9e/b9069b65.jpg","comment_is_top":false,"comment_ctime":1541730094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74556174126","product_id":100015201,"comment_content":"老师好，课后作业的方式非常棒，可否在下一节课的开始先总结一下课后作业呢？","like_count":17},{"had_liked":false,"id":184147,"user_name":"lucasun","can_delete":false,"product_type":"c1","uid":1887574,"ip_address":"","ucode":"5B900BC7C36F43","user_header":"https://static001.geekbang.org/account/avatar/00/1c/cd/56/dca89081.jpg","comment_is_top":false,"comment_ctime":1583238435,"is_pvip":false,"replies":[{"id":"72839","content":"Istio 现在是admission hook。这部分功能变化太多了，最好是自己写个sidecar operator 来管理。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1584423431,"ip_address":"","comment_id":184147,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70302715171","product_id":100015201,"comment_content":"Initializer不是一直bata然后废弃了嘛，istio用的是MutatingAdmissionWebhook吧","like_count":16,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485909,"discussion_content":"Istio 现在是admission hook。这部分功能变化太多了，最好是自己写个sidecar operator 来管理。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584423431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533347,"discussion_content":"Mark.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637842367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39074,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1246046,"ip_address":"","ucode":"68E92087D486E0","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/5e/818a8b1b.jpg","comment_is_top":false,"comment_ctime":1542183488,"is_pvip":false,"replies":[{"id":"14131","content":"就不会注入成功了","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1542281949,"ip_address":"","comment_id":39074,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70261660224","product_id":100015201,"comment_content":"Initializer与新的pod 在git merge冲突了该怎么解决？","like_count":16,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428907,"discussion_content":"就不会注入成功了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1542281949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533345,"discussion_content":"Mark.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637842325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43861,"user_name":"羽翼1982","can_delete":false,"product_type":"c1","uid":1130194,"ip_address":"","ucode":"1C7362888B7E3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/d2/5f9d3fa7.jpg","comment_is_top":false,"comment_ctime":1543312491,"is_pvip":false,"replies":[{"id":"15723","content":"编程友好的api，方便容器化，配置方便","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1543371514,"ip_address":"","comment_id":43861,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65967821931","product_id":100015201,"comment_content":"所以这个问题的答案是什么呢？<br>我的理解是Envy性能更高，占用系统资源更少","like_count":15,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430527,"discussion_content":"编程友好的api，方便容器化，配置方便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543371514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60945,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1547597665,"is_pvip":false,"replies":[{"id":"22063","content":"service mesh is just a fancy way of microservice","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1548053718,"ip_address":"","comment_id":60945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44497270625","product_id":100015201,"comment_content":"服务网格最初是由linkerd项目提出概念的，lstio是另外一个后起之秀，使大家都关注到了边车代理模式和服务治理的新方法的巨大威力。文中应该笔误写错为微服务了。<br><br>不过瑕不掩瑜，本节写的极其精彩和深入浅出。","like_count":10,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436678,"discussion_content":"service mesh is just a fancy way of microservice","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548053718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32458,"user_name":"公众号：云原生Serverless","can_delete":false,"product_type":"c1","uid":1253954,"ip_address":"","ucode":"B615BD756C7552","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/42/79604ce6.jpg","comment_is_top":false,"comment_ctime":1539579059,"is_pvip":false,"replies":[{"id":"11831","content":"knative没啥特别的，暂时就不给篇幅了","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539581544,"ip_address":"","comment_id":32458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35899317427","product_id":100015201,"comment_content":"磊哥竟然穿插了istio的讲解，后续有没有计划讲讲knative呢","like_count":8,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426779,"discussion_content":"knative没啥特别的，暂时就不给篇幅了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539581544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32523,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539600478,"is_pvip":false,"replies":[{"id":"11857","content":"你的错误之处在于，patch数据只可能被PATCH API认识。你总想着让replace也能用patch数据，那replace不就成了patch api了？","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539609469,"ip_address":"","comment_id":32523,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31604371550","product_id":100015201,"comment_content":"老师，为什么修改对象可以多个客户端同时写，而替换不行？感觉还差一层窗户纸，老师帮我捅破:)<br>或者有什么资料可以让我更深入理解下吗？","like_count":7,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426805,"discussion_content":"你的错误之处在于，patch数据只可能被PATCH API认识。你总想着让replace也能用patch数据，那replace不就成了patch api了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539609469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513000,"avatar":"https://static001.geekbang.org/account/avatar/00/17/16/28/41aed84a.jpg","nickname":"Zwj","note":"","ucode":"6F1A01F27BEC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572914,"discussion_content":"replace导致pod只能保存其中一个客户端的所提交的状态，因为replace提交的是一个完整的pod模板。而patch使得大家所修改的部分都可以保留，patch提交的是各自修改的部分。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653039301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066638,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/8e/334d25ba.jpg","nickname":"BOB","note":"","ucode":"239C06A7CD3BD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2074,"discussion_content":"老师，可以这么理解不：\npatch有点类似于数据库乐观锁或者svn的版本控制，并发修改的时候客户端每次必须提交全量的资源清单到服务器，也就是说，前一个人的修改结果，后一个人要想增加点什么东西的话，必须获取到前一个人修改完毕的清单，然后再加。而patch则不然。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563245451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93813,"user_name":"Zhikun Lao","can_delete":false,"product_type":"c1","uid":1087490,"ip_address":"","ucode":"C39A437FCE1C8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/98/02/14e24394.jpg","comment_is_top":false,"comment_ctime":1557628139,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23032464619","product_id":100015201,"comment_content":"老师你好！<br>”如果你对这个 Demo 感兴趣，可以在这个 GitHub 链接里找到它的所有源码和文档。这个 Demo，是我 fork 自 Kelsey Hightower 的一个同名的 Demo“<br><br>我看这个initializer的plugin都已经没了，现在是不是都要写Admission hook了？ https:&#47;&#47;kubernetes.io&#47;docs&#47;reference&#47;access-authn-authz&#47;extensible-admission-controllers&#47;#<br><br>例如这个 https:&#47;&#47;github.com&#47;kubernetes&#47;kubernetes&#47;blob&#47;v1.13.0&#47;test&#47;images&#47;webhook&#47;main.go","like_count":5,"discussions":[{"author":{"id":1478151,"avatar":"","nickname":"Geek_7ec3a9","note":"","ucode":"31ADD1F469E29A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211446,"discussion_content":"是的，现在高版本的k8s非常不建议使用initializer，用webhook吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584851288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32880,"user_name":"gotojeff","can_delete":false,"product_type":"c1","uid":1212606,"ip_address":"","ucode":"1E49871F44F9E5","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/be/8350f94d.jpg","comment_is_top":false,"comment_ctime":1539721020,"is_pvip":false,"replies":[{"id":"11978","content":"哦哦，这个忘记贴了。没错，这个configmap需要使用envoy的配置文件创建出来，配置文件网上可以下到。kubectl create configmap envoy —from-file envoy.json","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539744159,"ip_address":"","comment_id":32880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23014557500","product_id":100015201,"comment_content":"Hi 老师<br>‘’‘有个疑问： name 为envoy的configmap是在哪里定义的呢？<br>2018-10-16<br> 作者回复<br>文中不是贴出来了？<br>’‘’<br>configmap模板中的 metadata - name是envoy-initializer，但是在下面的container volumes中的configmap name是envoy，我的疑惑是这是2个不同的configmap吧？后者是在其他地方定义的？<br>","like_count":5,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426906,"discussion_content":"哦哦，这个忘记贴了。没错，这个configmap需要使用envoy的配置文件创建出来，配置文件网上可以下到。kubectl create configmap envoy —from-file envoy.json","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539744159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32566,"user_name":"参悟","can_delete":false,"product_type":"c1","uid":1186023,"ip_address":"","ucode":"AAD3D8BB695658","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/e7/d58e287c.jpg","comment_is_top":false,"comment_ctime":1539612842,"is_pvip":true,"replies":[{"id":"11891","content":"但其实envoy发布的不算晚，称不上搭便车。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539616597,"ip_address":"","comment_id":32566,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23014449322","product_id":100015201,"comment_content":"我想envoy的成功，是因为它真正理解了k8s的技术精髓，并成功的应用到了当前最火的微服务领域，将微服务体系与K8S捆绑在一起，service mesh成为微服务新一代技术的代言，这无论从技术上还是战略上都赢得了google的芳心，成功也就水到渠成。","like_count":5,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426820,"discussion_content":"但其实envoy发布的不算晚，称不上搭便车。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539616597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32689,"user_name":"silver","can_delete":false,"product_type":"c1","uid":1186740,"ip_address":"","ucode":"908E3C8560D6E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/1b/b4/a6db1c1e.jpg","comment_is_top":false,"comment_ctime":1539668164,"is_pvip":false,"replies":[{"id":"11915","content":"API对象都有revision，所以apiserver处理merge的流程跟git server是一样的。这跟kubectl这关系，它只是个客户端。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539673253,"ip_address":"","comment_id":32689,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18719537348","product_id":100015201,"comment_content":"kubectl apply怎么做concurrency control呢？假设client A和B都有version 1的spec。然后他们在各自修改了spec之后call apply。假设client A的patch操作先成功，如果kubectl简单的与etcd里有的spec做一个diff，会不会出现一个client B把client A的更新个revert的情况？","like_count":4,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426861,"discussion_content":"API对象都有revision，所以apiserver处理merge的流程跟git server是一样的。这跟kubectl这关系，它只是个客户端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539673253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32500,"user_name":"Dillion","can_delete":false,"product_type":"c1","uid":1219687,"ip_address":"","ucode":"502EDF7ECA5569","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/67/c0128e6c.jpg","comment_is_top":false,"comment_ctime":1539591541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18719460725","product_id":100015201,"comment_content":"我对声明式API的理解是：apiserver与etcd在不断维护者某个对象各个属性字段。修改对象状态的方式是修改这个对象的属性。也就是，对象的属性作为API，暴露给用户，用户通过修改对象属性，实现对对象的修改。","like_count":4},{"had_liked":false,"id":281610,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1614827384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14499729272","product_id":100015201,"comment_content":"凭这篇Istio的文章就值回票价。","like_count":3},{"had_liked":false,"id":37018,"user_name":"王天明","can_delete":false,"product_type":"c1","uid":1012262,"ip_address":"","ucode":"60C51851C73A37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/26/7387fc89.jpg","comment_is_top":false,"comment_ctime":1541422898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14426324786","product_id":100015201,"comment_content":"按GitHub里的启动的pod envoy-initializer-xxxx报状态crashloopbackoff,日志显示backoff restarting failed container,不知道大家有没有遇到这种情况","like_count":3},{"had_liked":false,"id":35066,"user_name":"Pixar","can_delete":false,"product_type":"c1","uid":1197659,"ip_address":"","ucode":"E653387BA8EA16","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/5b/07858c33.jpg","comment_is_top":false,"comment_ctime":1540393132,"is_pvip":false,"replies":[{"id":"12532","content":"不是覆盖，是把他改成带envoy的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1540439754,"ip_address":"","comment_id":35066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14425295020","product_id":100015201,"comment_content":"可以这样理解吗？以istio 为例，其实存储在etcd 中的 pod 对象并没有 envoy 设置，所有的envoy 设置都是对象被etcd 取出后 initiater  加上去的？  initiater 加上去以后，会用含有envoy 配置的 对象复盖掉 etcd 中没有envoy 配置的吗？","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427433,"discussion_content":"不是覆盖，是把他改成带envoy的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540439754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32498,"user_name":"兵戈","can_delete":false,"product_type":"c1","uid":1017595,"ip_address":"","ucode":"0F1723EBCE1BC0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/fb/4add1a52.jpg","comment_is_top":false,"comment_ctime":1539591084,"is_pvip":false,"replies":[{"id":"11848","content":"官方文档其实不好意思说的太直接，所以，还不在点子上。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539596216,"ip_address":"","comment_id":32498,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14424492972","product_id":100015201,"comment_content":"针对磊哥的思考题，Envoy的官方文档有相关文章分析：https:&#47;&#47;www.envoyproxy.io&#47;docs&#47;envoy&#47;latest&#47;intro&#47;comparison<br>比如完备的 Http&#47;2 支持、高级负载均衡、可插入式架构、详细的统计分析等，可见Envoy这个组件比较完备且性能够好。","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426795,"discussion_content":"官方文档其实不好意思说的太直接，所以，还不在点子上。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539596216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2291160,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f5/d8/121e4b68.jpg","nickname":"Woa 🤞","note":"","ucode":"6033F496082F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546039,"discussion_content":"哈哈哈哈不好意思可还行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642135230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32423,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1539568168,"is_pvip":false,"replies":[{"id":"11807","content":"是啊，它们不就是直接patch api对象的嘛","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539570855,"ip_address":"","comment_id":32423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14424470056","product_id":100015201,"comment_content":"老师您好，我对声明式api还是没有太理解，除了apply还有其他的命令吗？您文中提到的kubectl set image和kubectl edit也算是声明式api吗","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426767,"discussion_content":"是啊，它们不就是直接patch api对象的嘛","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539570855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32418,"user_name":"huan","can_delete":false,"product_type":"c1","uid":1012286,"ip_address":"","ucode":"46CB95F6E4E5FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/3e/534db55d.jpg","comment_is_top":false,"comment_ctime":1539567575,"is_pvip":false,"replies":[{"id":"11808","content":"这个只是次要因素","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539570879,"ip_address":"","comment_id":32418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14424469463","product_id":100015201,"comment_content":"之前一直用nginx和haproxy，没用过envoy。<br>查了下官网，看envoy的核心特性之一是“small memory footprint”，我想这个特征特别适合envoy作为sidecar的角色注入到每个pod中（类似的用汇编写的pause容器一样的底层容器）","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426766,"discussion_content":"这个只是次要因素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539570879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57214,"user_name":"divfor","can_delete":false,"product_type":"c1","uid":1000315,"ip_address":"","ucode":"3B14C74252741D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/7b/0c7f8fbe.jpg","comment_is_top":false,"comment_ctime":1546687246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10136621838","product_id":100015201,"comment_content":"多路并发写我的理解是patchBytes := strategicpatch.CreateTwoWayMergePatch(pod, newPod)的时候pod的状态未必等于patch时候的pod状态，所以要先记下差异，中间给予其他写者机会，最后自己patch的时候只管自己记下的差异，而不动其他写者的部分。万一跟其他写者冲突了就失败吧，由人来解决","like_count":2},{"had_liked":false,"id":55242,"user_name":"blackpiglet","can_delete":false,"product_type":"c1","uid":1032928,"ip_address":"","ucode":"58AA8329C91767","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/e0/7188aa0a.jpg","comment_is_top":false,"comment_ctime":1546074422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10136009014","product_id":100015201,"comment_content":"看了 envoy 被选做 Isito 的 sidecar (或者说 service mesh 之所以出现) 而不是 NGINX 等老牌 Proxy 的原因，感觉 API 在 Cloud Native 环境下真的太重要了。","like_count":2},{"had_liked":false,"id":32557,"user_name":"北卡","can_delete":false,"product_type":"c1","uid":1218128,"ip_address":"","ucode":"2D947A61689FC6","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/50/bde525b1.jpg","comment_is_top":false,"comment_ctime":1539607841,"is_pvip":false,"replies":[{"id":"11890","content":"都可以做代理，但用法和实现大不一样。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539616554,"ip_address":"","comment_id":32557,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129542433","product_id":100015201,"comment_content":"对envoy不太明白，envoy和traefik有什么类似之处吗？","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426816,"discussion_content":"都可以做代理，但用法和实现大不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539616554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251738,"user_name":"ch_ort","can_delete":false,"product_type":"c1","uid":1580926,"ip_address":"","ucode":"B79746E687F29E","user_header":"","comment_is_top":false,"comment_ctime":1601818459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896785755","product_id":100015201,"comment_content":"声明式API，有PATCH和自动merge的能力，这样系统里完全可以有好几个initializer在改同一个pod，反之如果你直接replace了别人就没法玩了","like_count":1},{"had_liked":false,"id":230844,"user_name":"晞月520","can_delete":false,"product_type":"c1","uid":1845394,"ip_address":"","ucode":"4F05E02A5C1608","user_header":"https://static001.geekbang.org/account/avatar/00/1c/28/92/436735f5.jpg","comment_is_top":false,"comment_ctime":1593509322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888476618","product_id":100015201,"comment_content":"反正记住写yaml 好久行了 我也不想搞懂这个太理论的东西了","like_count":1},{"had_liked":false,"id":33304,"user_name":"cqc","can_delete":false,"product_type":"c1","uid":1099493,"ip_address":"","ucode":"18053C9C62805F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/e5/7e86498f.jpg","comment_is_top":false,"comment_ctime":1539776291,"is_pvip":false,"replies":[{"id":"12080","content":"可以尝试了解一下envoy的api","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539849234,"ip_address":"","comment_id":33304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834743587","product_id":100015201,"comment_content":"除了能想到envoy作为通用的sidecar可以提供更为完善的微服务治理能力之外，在代理网络流量方面，感觉其他两个软件也能做到。求解答^.^","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426962,"discussion_content":"可以尝试了解一下envoy的api","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539849234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32441,"user_name":"旭","can_delete":false,"product_type":"c1","uid":1263368,"ip_address":"","ucode":"1AC4D6A6F2D2A1","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/08/985632a6.jpg","comment_is_top":false,"comment_ctime":1539573695,"is_pvip":false,"replies":[{"id":"11836","content":"见service部分的讲解","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539581820,"ip_address":"","comment_id":32441,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834540991","product_id":100015201,"comment_content":"老师，我的Nodeport与master的ip不能访问，node的ip和nodeport是可以访问，把forward改成accept也还是不行，麻烦老师指点下，多谢了","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426771,"discussion_content":"见service部分的讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539581820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360004,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"北京","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1666112930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666112930","product_id":100015201,"comment_content":"2022-10-19, 打卡","like_count":0},{"had_liked":false,"id":359063,"user_name":"Geek_8ed998","can_delete":false,"product_type":"c1","uid":1793879,"ip_address":"上海","ucode":"1C164836354665","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLJHTX1IwEl1Eh1CCO2ejL2gKe08Vxib61UZz9l5WGA81ObK0Nk5MCZ3ic6IWcW5kyX0DtwBNMEMl2Q/132","comment_is_top":false,"comment_ctime":1665216010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665216010","product_id":100015201,"comment_content":"现在是不是通过MutatingWebhookConfiguration这个方式注入了","like_count":0},{"had_liked":false,"id":356503,"user_name":"新一","can_delete":false,"product_type":"c1","uid":1120598,"ip_address":"上海","ucode":"3E20BD71E23003","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/56/7fbe26b5.jpg","comment_is_top":false,"comment_ctime":1662369810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662369810","product_id":100015201,"comment_content":"这篇太精彩了，K8s就是会把复杂的东西，用简单的模式去实现，化繁为简，更接近本质","like_count":0},{"had_liked":false,"id":333495,"user_name":"wilson","can_delete":false,"product_type":"c1","uid":1033396,"ip_address":"","ucode":"E65744D1933F11","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/b4/1069f535.jpg","comment_is_top":false,"comment_ctime":1644386385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644386385","product_id":100015201,"comment_content":"1. envoy支持xds协议 能够动态地接受路由策略<br>2. envoy实现了istio底层所有的流量管控功能，包括限流 流量镜像等","like_count":0},{"had_liked":false,"id":332354,"user_name":"Geek_qiqingkai","can_delete":false,"product_type":"c1","uid":2458942,"ip_address":"","ucode":"52E13785F9CEA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUqxFg3hsV6C4l7j29gDJ6OToreAdgS5lIsQa9fe16Y0e7cUiaR5RaVnqpxWuzToQVGVRRaAwnbaw/132","comment_is_top":false,"comment_ctime":1643185344,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643185344","product_id":100015201,"comment_content":"这个是webhook吧","like_count":0},{"had_liked":false,"id":331029,"user_name":"窝窝头","can_delete":false,"product_type":"c1","uid":1063866,"ip_address":"","ucode":"5C2635ED6484F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/ba/3b30dcde.jpg","comment_is_top":false,"comment_ctime":1642385581,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642385581","product_id":100015201,"comment_content":"但是采用istio的话，平台上的容器也就相当于多了一倍","like_count":0},{"had_liked":false,"id":320063,"user_name":"小软的长颈鹿","can_delete":false,"product_type":"c1","uid":1244320,"ip_address":"","ucode":"ECAA0891DC55D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/a0/48997178.jpg","comment_is_top":false,"comment_ctime":1636073477,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636073477","product_id":100015201,"comment_content":"请问如果pod内存在使用过程中不够了，可以热扩容吗？还是一定要重启pod或者做滚动更新","like_count":0,"discussions":[{"author":{"id":2108027,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2a/7b/2092e1fd.jpg","nickname":"Wall-Eve","note":"","ucode":"FBF2FED8F13BD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542455,"discussion_content":"纵向扩缩容需要重启","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640755875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315781,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1633999610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633999610","product_id":100015201,"comment_content":"第二十三课:声明式API与Kubernetes编程范式<br>声明式API（kubectl apply）执行的是一个PATCH操作，一次能处理多个写操作，并具备merge的能力。<br><br>所谓的“声明式”，指的就是我只需要提交一个定义好的API对象来“声明”我所期望的状态是什么样子。“声明式API”允许多个API写端，以Patch的方式对API对象进行修改，而无需关心本地原始YAML文件的内容。正是具有以上两个重要能力，Kubernetes项目才可以基于对API对象的增、删、改、查，在完全无需外界干涉的情况下，完成对“实际状态”和“期望状态”的调谐“reconcile”过程。声明式API才是K8s的核心所在","like_count":0},{"had_liked":false,"id":307938,"user_name":"limix","can_delete":false,"product_type":"c1","uid":1166614,"ip_address":"","ucode":"76401FF54AE0D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/16/981cc4f8.jpg","comment_is_top":false,"comment_ctime":1629334047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629334047","product_id":100015201,"comment_content":"并发协同工作是api设计和实现需要解决的棘手问题，k8s声明式api很好的解决了这个问题，所以，优秀的api设计才是k8s的精髓所在~","like_count":0},{"had_liked":false,"id":281593,"user_name":"小丢👣","can_delete":false,"product_type":"c1","uid":1031711,"ip_address":"","ucode":"A7699F00418FC4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/1f/57c88dd1.jpg","comment_is_top":false,"comment_ctime":1614821456,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614821456","product_id":100015201,"comment_content":"应该是看的第三遍了，还是会有很多新的收获。","like_count":0,"discussions":[{"author":{"id":2589474,"avatar":"https://static001.geekbang.org/account/avatar/00/27/83/22/a44b65f5.jpg","nickname":"JamonJou","note":"","ucode":"C77E647E2FA7A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545145,"discussion_content":"温故而知新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641865283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268243,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1227639,"ip_address":"","ucode":"2067D3BCCA7C0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/77/e1391dd8.jpg","comment_is_top":false,"comment_ctime":1608111323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608111323","product_id":100015201,"comment_content":"这篇看了三遍，干货太多","like_count":0},{"had_liked":false,"id":248241,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1600077325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600077325","product_id":100015201,"comment_content":"因为基于声明式API吧,暴露API方便二次开发和调试","like_count":0},{"had_liked":false,"id":237402,"user_name":"WinnerYJ","can_delete":false,"product_type":"c1","uid":2057785,"ip_address":"","ucode":"2DE6B278319592","user_header":"https://static001.geekbang.org/account/avatar/00/1f/66/39/df4995ce.jpg","comment_is_top":false,"comment_ctime":1595820227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595820227","product_id":100015201,"comment_content":"灰度发布时，多半情况还需要按业务场景指定对应需要灰度发布的条件，比如全国推广到1000个机构，需要指定只推广到机构1,2,3,4,5，针对这几个机构做灰度发布，这类情况在哪儿进行配置。","like_count":0},{"had_liked":false,"id":236059,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1595299765,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595299765","product_id":100015201,"comment_content":"张老师，请问借助Admission机制可以实现LVM动态分配hostpath吗？ 借助LVM实现对容器写Host目录的限额？","like_count":0,"discussions":[{"author":{"id":1665646,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6a/6e/38738a57.jpg","nickname":"the outsider","note":"","ucode":"3209715E5AD7A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545199,"discussion_content":"同学，这个好，请问你那边有尝试吗？我最近想试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641873176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177272,"user_name":"pk","can_delete":false,"product_type":"c1","uid":1320620,"ip_address":"","ucode":"610C72807240BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/ac/af3e1511.jpg","comment_is_top":false,"comment_ctime":1581338499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581338499","product_id":100015201,"comment_content":"大神为什么不建议在非kubernetes环境下使用istio呢？能举例说明一些坑不？","like_count":0},{"had_liked":false,"id":142670,"user_name":"万丈尘","can_delete":false,"product_type":"c1","uid":1422351,"ip_address":"","ucode":"546FF45281EF6B","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/0f/84e32679.jpg","comment_is_top":false,"comment_ctime":1571452983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571452983","product_id":100015201,"comment_content":"istio怎么发音？好像是希腊语，启航的意思","like_count":0},{"had_liked":false,"id":102111,"user_name":"eyan422","can_delete":false,"product_type":"c1","uid":1226128,"ip_address":"","ucode":"AE6BA24EE95C05","user_header":"","comment_is_top":false,"comment_ctime":1560138704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560138704","product_id":100015201,"comment_content":"请问基于新版本的kubernetes,例如1.12, 1.13如何复现这个例子?还是要基于webhook实现Dynamic Admission Control了?<br><br>https:&#47;&#47;kubernetes.io&#47;docs&#47;reference&#47;access-authn-authz&#47;extensible-admission-controllers&#47;<br><br>谢谢","like_count":0},{"had_liked":false,"id":100734,"user_name":"AAA","can_delete":false,"product_type":"c1","uid":1309946,"ip_address":"","ucode":"8E612EEA059A84","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/fa/a5c17356.jpg","comment_is_top":false,"comment_ctime":1559628898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559628898","product_id":100015201,"comment_content":"部署demo完成后，kube describe 看不到envoy容器，怎么验证envoy容器是否已注入成功？","like_count":0},{"had_liked":false,"id":54691,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1545953340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545953340","product_id":100015201,"comment_content":"initializer的配置文件中并没有指定控制器envey-initializer","like_count":0},{"had_liked":false,"id":41859,"user_name":"Johnson","can_delete":false,"product_type":"c1","uid":1225037,"ip_address":"","ucode":"55B582953E49F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/4d/10c75b34.jpg","comment_is_top":false,"comment_ctime":1542862113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542862113","product_id":100015201,"comment_content":"istio没看太明白 打个tag有空再细看","like_count":0},{"had_liked":false,"id":38687,"user_name":"周娄子","can_delete":false,"product_type":"c1","uid":1228039,"ip_address":"","ucode":"18A1E6926C095A","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/07/bf8c31fb.jpg","comment_is_top":false,"comment_ctime":1542106108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542106108","product_id":100015201,"comment_content":"envoy最大的特性应该就是xDS了，天生微服务。传统nginx haproxy都没有特别完美的方案，kong这个利用openresty也算是一个比较好的方向，性能肯定没问题。","like_count":0},{"had_liked":false,"id":37050,"user_name":"jason_liew","can_delete":false,"product_type":"c1","uid":1062819,"ip_address":"","ucode":"7933547EC3354E","user_header":"","comment_is_top":false,"comment_ctime":1541432656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541432656","product_id":100015201,"comment_content":"看了装的istio貌似用的webhook admission. ","like_count":0},{"had_liked":false,"id":33307,"user_name":"小宇宙","can_delete":false,"product_type":"c1","uid":1029649,"ip_address":"","ucode":"BBFFC39CB9E26F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/11/e8506a04.jpg","comment_is_top":false,"comment_ctime":1539776716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539776716","product_id":100015201,"comment_content":"最后的问题，envoy的优势之一是可以做服务发现和主动的健康检查","like_count":0},{"had_liked":false,"id":32730,"user_name":"gotojeff","can_delete":false,"product_type":"c1","uid":1212606,"ip_address":"","ucode":"1E49871F44F9E5","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/be/8350f94d.jpg","comment_is_top":false,"comment_ctime":1539680904,"is_pvip":false,"replies":[{"id":"11927","content":"文中不是贴出来了？","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539691773,"ip_address":"","comment_id":32730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539680904","product_id":100015201,"comment_content":"有个疑问： name 为envoy的configmap是在哪里定义的呢？<br>","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426873,"discussion_content":"文中不是贴出来了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539691773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32718,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1539678338,"is_pvip":false,"replies":[{"id":"11926","content":"这跟kubectl有啥关系……kubelet但凡碰到latest就是强制拉取啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539691744,"ip_address":"","comment_id":32718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539678338","product_id":100015201,"comment_content":"老师您好，有个问题请教您，提交镜像的时候可以使用latest标签吗？如果image是latest的话，kubectl apply怎样强制重新拉取镜像呢？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426868,"discussion_content":"这跟kubectl有啥关系……kubelet但凡碰到latest就是强制拉取啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539691744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}