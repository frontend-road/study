{"id":651649,"title":"19｜Pointcut ：如何批量匹配代理方法？","content":"<p>你好，我是郭屹。今天我们继续手写MiniSpring。</p><p>到目前为止，我们已经初步实现了简单的AOP，做到了封装JDK的动态代理，并且定义了Advice，实现了调用前、调用时、调用后三个不同位置对代理对象进行增强的效果，而这些切面的定义也是配置在外部文件中的。我们现在在这个基础之上继续前进，引入Pointcut这个概念，批量匹配需要代理的方法。</p><h2>引入Pointcut</h2><p>我们再回头看一下代码，前面所有的代理方法，都是同一个名字——doAction。我们用以下代码将该方法名写死了，也就是说我们只认定这一个方法名为代理方法，而且名字是不能改的。</p><pre><code class=\"language-java\">if (method.getName().equals(\"doAction\")) {\n}\n</code></pre><p>如果我们需要增加代理方法，或者就算不增加，只是觉得这个方法名不好想换一个，怎么办呢？当前这种方法自然不能满足我们的需求了。而这种对多个方法的代理需求又特别重要，因为业务上有可能会想对某一类方法进行增强，统一加上监控日志什么的，这种情况下，如果要逐个指定方法名就太麻烦了。</p><p>进一步考虑，即便我们这里可以支持多个方法名，但是匹配条件仍然是equals，也就是说，规则仅仅是按照方法名精确匹配的，这样做太不灵活了。</p><!-- [[[read_end]]] --><p>因此这节课我们考虑用方法名匹配规则进行通配，而这个配置则允许应用开发程序员在XML文件中自定义。这就是我们常说的<strong>切点（Pointcut），按照规则匹配需要代理的方法</strong>。</p><p>我们先确定一下，这节课代码改造完毕后，配置文件是什么样子的，我把变动最大的地方放在下面，供你参考。</p><pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans&gt;\n   &lt;bean id=\"realaction\" class=\"com.test.service.Action1\" /&gt;\n   &lt;bena id=\"beforeAdvice\" class=\"com.test.service.MyBeforeAdvice\" /&gt;\n   &lt;bean id=\"advisor\" class=\"com.minis.aop.NameMatchMethodPointcutAdvisor\"&gt;\n      &lt;property type=\"com.minis.aop.Advice\" name=\"advice\" ref=\"beforeAdvice\"/&gt;\n      &lt;property type=\"String\" name=\"mappedName\" value=\"do*\"/&gt;\n   &lt;/bean&gt;\n   &lt;bean id=\"action\" class=\"com.minis.aop.ProxyFactoryBean\"&gt;\n      &lt;property type=\"String\" name=\"interceptorName\" value=\"advisor\" /&gt;\n      &lt;property type=\"java.lang.Object\" name=\"target\" ref=\"realaction\"/&gt;\n   &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre><p>由上述改动可以看出，我们新定义了一个NameMatchMethodPointcutAdvisor类作为Advisor，其中property属性中的value值为do*，这就是我们说的方法规则，也就是匹配所有以do开头的方法名称。这里你也可以根据实际的业务情况按照一定的规则配置自定义的代理方法，而不仅仅局限于简单的方法名精确相等匹配。</p><p>有了这个Pointcut，我们就能用一条规则来支持多个代理方法了，这非常有用。如果能实现这个配置，就达到了我们想要的效果。</p><p>为了实现这个目标，最后构建出一个合适的NameMatchMethodPointcutAdvisor，我们定义了MethodMatcher、Pointcut与PointcutAdvisor三个接口。</p><p>MethodMatcher这个接口代表的是方法的匹配算法，内部的实现就是看某个名是不是符不符合某个模式。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic interface MethodMatcher {\n    boolean matches(Method method, Class&lt;?&gt; targetCLass);\n}\n</code></pre><p>Pointcut接口定义了切点，也就是返回一条匹配规则。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic interface Pointcut {\n    MethodMatcher getMethodMatcher();\n}\n</code></pre><p>PointcutAdvisor接口扩展了Advisor，内部可以返回Pointcut，也就是说这个Advisor有一个特性：能支持切点Pointcut了。这也是一个常规的Advisor，所以可以放到我们现有的AOP框架中，让它负责来增强。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic interface PointcutAdvisor extends Advisor{\n    Pointcut getPointcut();\n}\n</code></pre><p>接口定义完毕之后，接下来就要有这些接口对应的实现。实际我们在原理上可以实现一系列不同的规则，但是现在我们只能简单地使用名称进行模式匹配，不过能通过这个搞清楚原理就可以了。</p><h2>如何匹配？</h2><p>我们先来看核心问题：<strong>如何匹配到方法？</strong>我们默认的实现是NameMatchMethodPointcut和NameMatchMethodPointcutAdvisor。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic class NameMatchMethodPointcut implements MethodMatcher, Pointcut{\n    private String mappedName = \"\";\n    public void setMappedName(String mappedName) {\n        this.mappedName = mappedName;\n    }\n    @Override\n    public boolean matches(Method method, Class&lt;?&gt; targetCLass) {\n        if (mappedName.equals(method.getName()) || isMatch(method.getName(), mappedName)) {\n            return true;\n        }\n        return false;\n    }\n    //核心方法，判断方法名是否匹配给定的模式\n    protected boolean isMatch(String methodName, String mappedName) {\n        return PatternMatchUtils.simpleMatch(mappedName, methodName);\n    }\n    @Override\n    public MethodMatcher getMethodMatcher() {\n        return null;\n    }\n}\n</code></pre><p>我们看到了，这个类的核心方法就是<strong>isMatch()</strong>，它用到了一个工具类叫<strong>PatterMatchUtils</strong>。我们看一下这个工具类是怎么进行字符串匹配的。</p><pre><code class=\"language-plain\">/**\n * 用给定的模式匹配字符串。\n * 模式格式: \"xxx*\", \"*xxx\", \"*xxx*\" 以及 \"xxx*yyy\"，*代表若干个字符。\n */\npublic static boolean simpleMatch( String pattern,&nbsp; String str) {\n    //先判断串或者模式是否为空\n\tif (pattern == null || str == null) {\n\t\treturn false;\n\t}\n    //再判断模式中是否包含*\n\tint firstIndex = pattern.indexOf('*');\n\tif (firstIndex == -1) {\n\t\treturn pattern.equals(str);\n\t}\n    //是否首字符就是*,意味着这个是*XXX格式\t\t\n    if (firstIndex == 0) {\n\t\tif (pattern.length() == 1) {  //模式就是*,通配全部串\n\t\t\treturn true;\n\t\t}\n\t\t//尝试查找下一个*\n        int nextIndex = pattern.indexOf('*', 1);\n\t\tif (nextIndex == -1) { //没有下一个*，说明后续不需要再模式匹配了，直接endsWith判断\n\t\t\treturn str.endsWith(pattern.substring(1));\n\t\t}\n        //截取两个*之间的部分\n\t\tString part = pattern.substring(1, nextIndex);\n\t\tif (part.isEmpty()) { //这部分为空，形如**，则移到后面的模式进行匹配\n\t\t\treturn simpleMatch(pattern.substring(nextIndex), str);\n\t\t}\n        //两个*之间的部分不为空，则在串中查找这部分子串\n\t\tint partIndex = str.indexOf(part);\n\t\twhile (partIndex != -1) {\n            //模式串移位到第二个*之后，目标字符串移位到字串之后，递归再进行匹配\n\t\t\tif (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tpartIndex = str.indexOf(part, partIndex + 1);\n\t\t}\n\t\treturn false;\n\t}\n\n    //对不是*开头的模式，前面部分要精确匹配，然后后面的子串重新递归匹配\n\treturn (str.length() &gt;= firstIndex &amp;&amp;\n\t\tpattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &amp;&amp;\n\t\tsimpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)));\n}\n</code></pre><p>看代码，整个匹配过程是一种扫描算法，从前往后扫描，按照 <code>*</code> 分节段一节一节匹配，因为长度不定，所以要用递归，详细说明代码上有注释。模式格式可以是:<code>\"xxx*\", \"*xxx\", \"*xxx*\"</code>以及<code>\"xxx*yyy\"</code>等。</p><p>有了上面的实现，我们就有了具体的匹配工具了。下面我们就来使用PatternMatchUtils这个工具类来进行字符串的匹配。</p><p>NameMatchMethodPointcutAdvisor的实现也比较简单，就是在内部增加了NameMatchMethodPointcut属性和MappedName属性。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic class NameMatchMethodPointcutAdvisor implements PointcutAdvisor{\n\tprivate Advice advice = null;\n\tprivate MethodInterceptor methodInterceptor;\n\tprivate String mappedName;\n\tprivate final NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();\n\tpublic NameMatchMethodPointcutAdvisor() {\n\t}\n\tpublic NameMatchMethodPointcutAdvisor(Advice advice) {\n\t\tthis.advice = advice;\n\t}\n\tpublic void setMethodInterceptor(MethodInterceptor methodInterceptor) {\n\t\tthis.methodInterceptor = methodInterceptor;\n\t}\n\tpublic MethodInterceptor getMethodInterceptor() {\n\t\treturn this.methodInterceptor;\n\t}\n\tpublic void setAdvice(Advice advice) {\n\t\tthis.advice = advice;\n\t\tMethodInterceptor mi = null;\n\t\tif (advice instanceof BeforeAdvice) {\n\t\t\tmi = new MethodBeforeAdviceInterceptor((MethodBeforeAdvice)advice);\n\t\t}\n\t\telse if (advice instanceof AfterAdvice){\n\t\t\tmi = new AfterReturningAdviceInterceptor((AfterReturningAdvice)advice);\n\t\t}\n\t\telse if (advice instanceof MethodInterceptor) {\n\t\t\tmi = (MethodInterceptor)advice;\n\t\t}\n\t\tsetMethodInterceptor(mi);\n\t}\n\t@Override\n\tpublic Advice getAdvice() {\n\t\treturn this.advice;\n\t}\n\t@Override\n\tpublic Pointcut getPointcut() {\n\t\treturn pointcut;\n\t}\n\tpublic void setMappedName(String mappedName) {\n\t\tthis.mappedName = mappedName;\n\t\tthis.pointcut.setMappedName(this.mappedName);\n\t}\n}\n</code></pre><p>上述实现代码对新增的Pointcut和MappedName属性进行了处理，这正好与我们定义的XML配置文件保持一致。而匹配的工作，则交给NameMatchMethodPointcut中的matches方法完成。如配置文件中的mappedName设置成了 <code>\"do*\"</code>，意味着所有do开头的方法都会匹配到。</p><pre><code class=\"language-plain\">&lt;bean id=\"advisor\" class=\"com.minis.aop.NameMatchMethodPointcutAdvisor\"&gt;\n&nbsp; &nbsp; &lt;property type=\"com.minis.aop.Advice\" name=\"advice\" ref=\"beforeAdvice\"/&gt;\n&nbsp; &nbsp; &lt;property type=\"String\" name=\"mappedName\" value=\"do*\"/&gt;\n&lt;/bean&gt;\n</code></pre><p>另外，我们还要注意setAdvice()这个方法，它现在通过advice来设置相应的Intereceptor，这一段逻辑以前是放在ProxyFactoryBean的initializeAdvisor()方法中的，现在移到了这里。现在这个新的Advisor就可以支持按照规则匹配方法来进行逻辑增强了。</p><h2>相关类的改造</h2><p>在上述工作完成后，相关的一些类也需要改造。JdkDynamicAopProxy类中的实现，现在我们不再需要将方法名写死了。你可以看一下改造之后的代码。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic class JdkDynamicAopProxy implements AopProxy, InvocationHandler {\n    Object target;\n    PointcutAdvisor advisor;\n    public JdkDynamicAopProxy(Object target, PointcutAdvisor advisor) {\n        this.target = target;\n        this.advisor = advisor;\n    }\n    @Override\n    public Object getProxy() {\n        Object obj = Proxy.newProxyInstance(JdkDynamicAopProxy.class.getClassLoader(), target.getClass().getInterfaces(), this);\n        return obj;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Class&lt;?&gt; targetClass = (target != null ? target.getClass() : null);\n        if (this.advisor.getPointcut().getMethodMatcher().matches(method, targetClass)) {\n            MethodInterceptor interceptor = this.advisor.getMethodInterceptor();\n            MethodInvocation invocation =\n                    new ReflectiveMethodInvocation(proxy, target, method, args, targetClass);\n            return interceptor.invoke(invocation);\n        }\n        return null;\n    }\n}\n</code></pre><p>看核心方法<strong>invoke()</strong>，以前的代码是 method.getName().equals(“doAction”)，即判断名字必须等于\"doAction\"，现在的判断条件则更具备扩展性了，是用Pointcut的matcher进行匹配校验。代码是 <code>this.advisor.getPointcut().getMethodMatcher().matches(method, targetClass))</code> 这一句。</p><p>原本定义的Advisor改为了更加具有颗粒度的PointcutAdvisor，自然连带着其他引用类也要一并修改。</p><p>DefaultAopProxyFactory的createAopProxy()方法中，Advisor参数现在就可以使用PointcutAdvisor类型了。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic class DefaultAopProxyFactory implements AopProxyFactory{\n    @Override\n    public AopProxy createAopProxy(Object target, PointcutAdvisor advisor) {\n        return new JdkDynamicAopProxy(target, advisor);\n    }\n}\n</code></pre><p>而ProxyFactoryBean可以简化一下。</p><pre><code class=\"language-java\">package com.minis.aop;\npublic class ProxyFactoryBean implements FactoryBean&lt;Object&gt;, BeanFactoryAware {\n    private BeanFactory beanFactory;\n    private AopProxyFactory aopProxyFactory;\n    private String interceptorName;\n    private String targetName;\n    private Object target;\n    private ClassLoader proxyClassLoader = ClassUtils.getDefaultClassLoader();\n    private Object singletonInstance;\n    private PointcutAdvisor advisor;\n    public ProxyFactoryBean() {\n        this.aopProxyFactory = new DefaultAopProxyFactory();\n    }\n\n    //省略一些getter/setter\n    \n    protected AopProxy createAopProxy() {\n        return getAopProxyFactory().createAopProxy(target, this.advisor);\n    }\n    @Override\n    public Object getObject() throws Exception {\n        initializeAdvisor();\n        return getSingletonInstance();\n    }\n    private synchronized void initializeAdvisor() {\n        Object advice = null;\n        MethodInterceptor mi = null;\n        try {\n            advice = this.beanFactory.getBean(this.interceptorName);\n        } catch (BeansException e) {\n            e.printStackTrace();\n        }\n        this.advisor = (PointcutAdvisor) advice;\n    }\n    private synchronized Object getSingletonInstance() {\n        if (this.singletonInstance == null) {\n            this.singletonInstance = getProxy(createAopProxy());\n        }\n        return this.singletonInstance;\n    }\n}\n</code></pre><p>可以看到，ProxyFactoryBean中的initializeAdvisor方法里，不再需要判断不同的Interceptor类型，相关实现被抽取到了NameMatchMethodPointcutAdvisor这个类中。</p><h2>测试</h2><p>最后，我们还是用以前的HelloWorldBean作为测试，现在可以这么写测试程序了。</p><pre><code class=\"language-plain\">\t@Autowired\n\tIAction action;\n\t\n\t@RequestMapping(\"/testaop\")\n\tpublic void doTestAop(HttpServletRequest request, HttpServletResponse response) {\n\t\taction.doAction();\n\t}\n\t@RequestMapping(\"/testaop2\")\n\tpublic void doTestAop2(HttpServletRequest request, HttpServletResponse response) {\n\t\taction.doSomething();\n\t}\t\n</code></pre><p>配置文件就是我们最早希望达成的样子。</p><pre><code class=\"language-plain\">&lt;bean id=\"realaction\" class=\"com.test.service.Action1\" /&gt;&nbsp;\n&lt;bena id=\"beforeAdvice\" class=\"com.test.service.MyBeforeAdvice\" /&gt;\n&lt;bean id=\"advisor\" class=\"com.minis.aop.NameMatchMethodPointcutAdvisor\"&gt;\n&nbsp; &nbsp; &lt;property type=\"com.minis.aop.Advice\" name=\"advice\" ref=\"beforeAdvice\"/&gt;\n&nbsp; &nbsp; &lt;property type=\"String\" name=\"mappedName\" value=\"do*\"/&gt;\n&lt;/bean&gt;&nbsp;&nbsp;\n&lt;bean id=\"action\" class=\"com.minis.aop.ProxyFactoryBean\"&gt;\n&nbsp; &nbsp; &lt;property type=\"String\" name=\"interceptorName\" value=\"advisor\" /&gt;\n&nbsp; &nbsp; &lt;property type=\"java.lang.Object\" name=\"target\" ref=\"realaction\"/&gt;\t\n&lt;/bean&gt;\n</code></pre><p>使用了新的Advisor，<strong>匹配规则是 <code>\"do*\"</code>，真正执行的类是Action1</strong>。</p><pre><code class=\"language-plain\">package com.test.service;\npublic class Action1 implements IAction {\n\t@Override\n\tpublic void doAction() {\n\t\tSystem.out.println(\"really do action1\");\n\t}\n\t@Override\n\tpublic void doSomething() {\n\t\tSystem.out.println(\"really do something\");\n\t}\n}\n</code></pre><p>这个Action1里面有两个方法，<strong>doAction和doSomething</strong>，名字都是以do开头的。因此，上面的配置规则会使业务程序在调用它们二者的时候，动态插入定义在MyBeforeAdvice里的逻辑。</p><h2>小结</h2><p>这节课，我们对查找方法名的办法进行了扩展，让系统可以按照某个规则来匹配方法名，这样便于统一处理。这个概念叫做Pointcut，熟悉数据库操作的人，可以把这个概念类比为SQL语句中的where条件。</p><p>基本的实现思路是使用一个特殊的Advisor，这个Advisor接收一个模式串，而这个模式串也是可以由用户配置在外部文件中的，然后提供isMatch() 方法，支持按照名称进行模式匹配。具体的字符串匹配工作，采用从前到后的扫描技术，分节段进行校验。</p><p>这两节课我们接触到了几个概念，我们再梳理一下。</p><ul>\n<li>Join Point：连接点，连接点的含义是指明切面可以插入的地方，这个点可以在函数调用时，或者正常流程中某一行等位置，加入切面的处理逻辑，来实现代码增强的效果。</li>\n<li>Advice：通知，表示在特定的连接点采取的操作。</li>\n<li>Advisor：通知者，它实现了Advice。</li>\n<li>Interceptor：拦截器，作用是拦截流程，方便处理。</li>\n<li>Pointcut：切点。</li>\n</ul><p>完整源代码参见 <a href=\"https://github.com/YaleGuo/minis\">https://github.com/YaleGuo/minis</a>。</p><h2>课后题</h2><p>学完这节课的内容，我也给你留一道思考题。</p><p>我们现在实现的匹配规则是按照*模式串进行匹配，如果需要支持不同的规则，应该如何改造我们的框架呢？</p><p>欢迎你在留言区与我交流讨论，也欢迎你把这节课分享给需要的朋友。我们下节课见！</p>","neighbors":{"left":{"article_title":"18｜拦截器 ：如何在方法前后进行拦截？","id":650471},"right":{"article_title":"20｜AutoProxyCreator：如何自动添加动态代理？","id":652748}},"comments":[{"had_liked":false,"id":373286,"user_name":"不是早晨，就是黄昏","can_delete":false,"product_type":"c1","uid":2645005,"ip_address":"河南","ucode":"B7132BA7740AFE","user_header":"https://static001.geekbang.org/account/avatar/00/28/5c/0d/9ec703ab.jpg","comment_is_top":false,"comment_ctime":1682339500,"is_pvip":false,"replies":[{"id":136364,"content":"advice是真正的要动态插入的业务增强逻辑。advisor则是一个管理类，它包了一个advice，还能寻找到符合条件的方法名进行增强。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1682425542,"ip_address":"澳大利亚","comment_id":373286,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"能不能说明以下Advice接口和Advisor接口之间的关系，更进一步的是设计上的关系。","like_count":3,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":615760,"discussion_content":"advice是真正的要动态插入的业务增强逻辑。advisor则是一个管理类，它包了一个advice，还能寻找到符合条件的方法名进行增强。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1682425542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373882,"user_name":"青莲","can_delete":false,"product_type":"c1","uid":1181787,"ip_address":"浙江","ucode":"6BA5D5D47DE38E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5b/2a342424.jpg","comment_is_top":false,"comment_ctime":1683286595,"is_pvip":false,"replies":[{"id":136599,"content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1683356557,"ip_address":"澳大利亚","comment_id":373882,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"每个匹配模式都可以实现PointcutAdvisor接口，尊循单一职责，如果要同时支持几种能力，可以考虑拐出一个管理类组合几种接口使用","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":617161,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683356557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373629,"user_name":"欧阳利","can_delete":false,"product_type":"c1","uid":1282578,"ip_address":"广东","ucode":"D12ABDF4B09ED5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SGicbDM2syIuJKTOkQqboZGD5E0UzhZpbbwOceWg4ZJwS6sR1Uyapo1L0wBZqf9cYiaFrniaSQ4bhAq1QLQDzPvTQ/132","comment_is_top":false,"comment_ctime":1682842041,"is_pvip":false,"replies":[{"id":136441,"content":"因为需要把interceptor, beforeadvice和afteradvice几种统一处理","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1682982899,"ip_address":"澳大利亚","comment_id":373629,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"为什么Interceptor需要实现Advice接口","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616588,"discussion_content":"因为需要把interceptor, beforeadvice和afteradvice几种统一处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1682982900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379661,"user_name":"Ben Guo","can_delete":false,"product_type":"c1","uid":2974700,"ip_address":"广东","ucode":"A8BD34C25D50DB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/8HibfYTXFWaeXsujL7j1ZEulbibhiaMrTxkm3PticiaP9q3fGv8vkp1XHo9zsVE7Bh9HzkNicOnicd9QHFR73cefiaR7Qg/132","comment_is_top":false,"comment_ctime":1692257016,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"1. NameMatchMethodPointcut的getMethodMatcher()应该返回 this，而不是null；\n2. JdkDynamicAopProxy的invoke方法，如果方法名不是mappedName匹配，应该要执行method.invoke()。 示例及源码中均返回null，导致该方法没有被执行。","like_count":1}]}