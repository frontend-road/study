{"id":780861,"title":"08｜用大模型实现自然语言的SQL查询","content":"<p>你好，我是黄佳。今天我们继续利用大模型的能力来构建简单又实用的工具。</p><p>今天我将带着你学习如何利用 Claude 大模型生成从简单到复杂的 SQL 查询语句。我们的目标是展示如何将自然语言问题转化为精确的 SQL 命令，以便有效地从数据库中提取所需信息。这样，我们就能充分地利用 Claude 的自然语言处理能力，简化和自动化 SQL 查询的生成过程，使得数据分析工作更加高效和直观。</p><p>这里，我们选用一个强大的模型——Claude-3 Opus。</p><p>下面就开始第一个实战：生成简单的SQL查询语句。</p><h2>生成 SQL 查询语句</h2><p>利用Claude这样一个大语言模型来生成SQL查询的关键步骤如下：</p><ol>\n<li>设置好要使用的大语言模型。</li>\n<li>创建一个测试数据库，并插入示例数据。</li>\n<li>获取数据库的Schema信息，并将其格式化为字符串。</li>\n<li>定义一个函数，将自然语言问题和数据库Schema发送给Claude，并获取生成的SQL查询。</li>\n<li>执行生成的SQL查询，并打印结果。</li>\n</ol><p>下面一步步来完成它。</p><h3>步骤 1：设置模型</h3><p>这一步是准备工作，创建大模型的客户端。</p><pre><code class=\"language-plain\">from dotenv import load_dotenv\nload_dotenv()\n\n# 导入Anthropic库\nfrom anthropic import Anthropic\n\n# 设置Anthropic API客户端\nclient = Anthropic()\nMODEL_NAME = \"claude-3-opus-20240229\"\n</code></pre><!-- [[[read_end]]] --><h3>步骤 2：设置测试数据库</h3><p>这一步仍然是准备工作。我们需要建立一个测试数据库。这涉及到定义表的结构（schema），并填充一些示例数据以供查询使用。</p><pre><code class=\"language-plain\"># 导入sqlite3库\nimport sqlite3\n\n# 设置Anthropic API客户端\nclient = Anthropic()\nMODEL_NAME = \"claude-3-opus-20240229\"\n\n# 连接到测试数据库(如果不存在则创建)\nconn = sqlite3.connect(\"test_db.db\")\ncursor = conn.cursor()\n\n# 创建示例表\ncursor.execute(\"\"\"\n&nbsp; &nbsp; CREATE TABLE IF NOT EXISTS employees (\n&nbsp; &nbsp; &nbsp; &nbsp; id INTEGER PRIMARY KEY,\n&nbsp; &nbsp; &nbsp; &nbsp; name TEXT,\n&nbsp; &nbsp; &nbsp; &nbsp; department TEXT,\n&nbsp; &nbsp; &nbsp; &nbsp; salary INTEGER\n&nbsp; &nbsp; )\n\"\"\")\n\n# 插入示例数据\nsample_data = [\n&nbsp; &nbsp; (6, \"黄佳\", \"销售\", 50000),\n&nbsp; &nbsp; (7, \"宁宁\", \"工程\", 75000),\n&nbsp; &nbsp; (8, \"谦谦\", \"销售\", 60000),\n&nbsp; &nbsp; (9, \"悦悦\", \"工程\", 80000),\n&nbsp; &nbsp; (10, \"黄仁勋\", \"市场\", 55000)\n]\ncursor.executemany(\"INSERT INTO employees VALUES (?, ?, ?, ?)\", sample_data)\nconn.commit()\n</code></pre><p>运行后没有出现错误提示信息，说明数据库表和数据都已经成功创建。</p><h3>步骤 3：向 Claude 提供数据库Schema</h3><p>接下来，我们将通过提示，向 Claude 提供数据库Schema。Schema应详细描述每个表的字段和类型，这有助于 Claude 理解表的结构和关联。</p><pre><code class=\"language-plain\"># 获取数据库Schema\nschema = cursor.execute(\"PRAGMA table_info(employees)\").fetchall()\nschema_str = \"CREATE TABLE EMPLOYEES (\\n\" + \"\\n\".join([f\"{col[1]} {col[2]}\" for col in schema]) + \"\\n)\"\nprint(\"数据库Schema:\")\nprint(schema_str)\n\n# 定义一个函数,将查询发送给Claude并获取响应\ndef ask_claude(query, schema):\n&nbsp; &nbsp; prompt = f\"\"\"这是一个数据库的Schema:\n\n{schema}\n\n根据这个Schema,你能输出一个SQL查询来回答以下问题吗?只输出SQL查询,不要输出其他任何内容。\n\n问题:{query}\n\"\"\"\n\n&nbsp; &nbsp; response = client.messages.create(\n&nbsp; &nbsp; &nbsp; &nbsp; model=MODEL_NAME,\n&nbsp; &nbsp; &nbsp; &nbsp; max_tokens=2048,\n&nbsp; &nbsp; &nbsp; &nbsp; messages=[{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"role\": 'user', \"content\": &nbsp;prompt\n&nbsp; &nbsp; &nbsp; &nbsp; }]\n&nbsp; &nbsp; )\n&nbsp; &nbsp; return response.content[0].text\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">数据库Schema:\nCREATE TABLE EMPLOYEES (\nid INTEGER\nname TEXT\ndepartment TEXT\nsalary INTEGER\n)\n</code></pre><h3>步骤 4：提出问题</h3><p>接下来向 Claude 提出自然语言形式的问题。下面的问题是一个简单的数据查询（查询特定员工的工资）。</p><pre><code class=\"language-plain\"># 示例自然语言问题\nquestion = \"工程部门员工的姓名和工资是多少?\"\n\n# 将问题发送给Claude并获取SQL查询\nsql_query = ask_claude(question, schema_str)\nprint(\"生成的SQL查询:\")\nprint(sql_query)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">生成的SQL查询:\nSELECT name, salary\nFROM EMPLOYEES\nWHERE department = '工程';\n</code></pre><p>结果显示Claude 的能力足以根据提供的问题生成对应的 SQL 查询语句。</p><h3>步骤 5：执行 SQL 查询并展示结果</h3><p>最后，我们将执行生成的 SQL 查询，并展示查询结果。</p><pre><code class=\"language-plain\"># 执行SQL查询并打印结果\nprint(\"查询结果:\")\nresults = cursor.execute(sql_query).fetchall()\n\nfor row in results:\n&nbsp; &nbsp; print(row)\n\n# 关闭数据库连接\nconn.close()\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">查询结果:\n('宁宁', 75000)\n('悦悦', 80000)\n</code></pre><p>SQL代码无误，查询结果也准确。至此，我们展示了从提问到获取答案的完整流程。</p><h2>测试 SQL 增、删、改语句</h2><p>除了数据查询，我们还可以让Claude根据自然语言指令生成INSERT、UPDATE和DELETE语句，实现对数据库的写入和修改操作。</p><p>代码示例如下：</p><pre><code class=\"language-plain\"># 插入新员工\nquestion = \"在销售部门增加一个新员工,姓名为张三,工资为45000\"  \nsql_query = ask_claude(question, schema_str)\ncursor.execute(sql_query)\nconn.commit()\n\n# 更新员工信息\nquestion = \"将黄佳的工资调整为55000\"\nsql_query = ask_claude(question, schema_str)\ncursor.execute(sql_query)\nconn.commit()\n\n# 删除员工\nquestion = \"删除市场部门的黄仁勋\"\nsql_query = ask_claude(question, schema_str)\ncursor.execute(sql_query)\nconn.commit()\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">INSERT INTO EMPLOYEES (name, department, salary)\nVALUES ('张三', '销售', 45000);\n\nUPDATE EMPLOYEES\nSET salary = 55000\nWHERE name = '黄佳';\n\nDELETE FROM EMPLOYEES\nWHERE name = '黄仁勋' AND department = '市场';\n</code></pre><p>通过这种方式，我们可以使用自然语言对数据库进行全面的操作，大大简化了数据管理的过程。</p><h2>生成更复杂的多表组合查询语句</h2><p>除了基本的数据查询外，我们还可以进一步增加难度，实现更复杂的场景。比如，通过多表连接和聚合查询，来计算每个部门的平均工资。</p><p>首先，我们创建含公司部门信息的新表。</p><pre><code class=\"language-plain\"># 创建部门表\ncursor.execute(\"\"\"\n&nbsp; &nbsp; CREATE TABLE IF NOT EXISTS departments (\n&nbsp; &nbsp; &nbsp; &nbsp; id INTEGER PRIMARY KEY,\n&nbsp; &nbsp; &nbsp; &nbsp; name TEXT,\n&nbsp; &nbsp; &nbsp; &nbsp; manager TEXT\n&nbsp; &nbsp; )\n\"\"\")\n\n# 插入示例数据\nsample_departments = [\n&nbsp; &nbsp; (1, \"销售\", \"王经理\"),\n&nbsp; &nbsp; (2, \"工程\", \"李经理\"),\n&nbsp; &nbsp; (3, \"市场\", \"张经理\")\n]\ncursor.executemany(\"INSERT INTO departments VALUES (?, ?, ?)\", sample_departments)\nconn.commit()\n</code></pre><p>然后，获取完整的数据库schema。</p><pre><code class=\"language-plain\"># 获取完整的数据库schema\ntables = [\"employees\", \"departments\"]\nschema_str = \"\"\nfor table in tables:\n&nbsp; &nbsp; schema = cursor.execute(f\"PRAGMA table_info({table})\").fetchall()\n&nbsp; &nbsp; schema_str += f\"CREATE TABLE {table} (\\n\" + \"\\n\".join([f\"{col[1]} {col[2]}\" for col in schema]) + \"\\n);\\n\\n\"\n\nprint(\"完整的数据库schema:\")\nprint(schema_str)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">完整的数据库schema:\nCREATE TABLE employees (\nid INTEGER\nname TEXT\ndepartment TEXT\nsalary INTEGER\n);\n\nCREATE TABLE departments (\nid INTEGER\nname TEXT\nmanager TEXT\n);\n</code></pre><p>在这个数据库Schema中，包含之前创建的employees的表信息，以及新建的departments信息。</p><p>下面，我们把数据库Schema传给Claude模型，并获取生成的SQL语句。</p><pre><code class=\"language-plain\"># 定义一个函数,将查询发送给Claude并获取响应\ndef ask_claude(query, schema):\n&nbsp; &nbsp; prompt = f\"\"\"这是一个数据库的schema:\n\n{schema}\n\n根据这个schema,你能输出一个SQL查询来回答以下问题吗?只输出SQL查询,不要输出其他任何内容。\n\n问题:{query}\n\"\"\"\n\n&nbsp; &nbsp; response = client.messages.create(\n&nbsp; &nbsp; &nbsp; &nbsp; model=MODEL_NAME,\n&nbsp; &nbsp; &nbsp; &nbsp; max_tokens=2048,\n&nbsp; &nbsp; &nbsp; &nbsp; messages=[{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"role\": 'user', \"content\": &nbsp;prompt\n&nbsp; &nbsp; &nbsp; &nbsp; }]\n&nbsp; &nbsp; )\n&nbsp; &nbsp; return response.content[0].text\n\n# 查询每个部门的员工人数和平均工资\nquestion = \"根据两个表之间的关系,列出每个部门的员工人数和平均工资\"\n\n# 将问题发送给Claude并获取SQL查询\nsql_query = ask_claude(question, schema_str)\nprint(\"生成的SQL查询:\")\nprint(sql_query)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">生成的SQL查询:\nSELECT\n&nbsp; &nbsp; d.name AS department,\n&nbsp; &nbsp; COUNT(e.id) AS num_employees,\n&nbsp; &nbsp; AVG(e.salary) AS avg_salary\nFROM\n&nbsp; &nbsp; departments d\nLEFT JOIN\n&nbsp; &nbsp; employees e ON d.name = e.department\nGROUP BY\n&nbsp; &nbsp; d.name;\n</code></pre><p>这个查询通过结合 departments 和 employees 两个表，为每个部门提供了员工数量和平均工资的数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/4d/c0a4231a5bff3509ff37a0296ae9334d.jpg?wh=1442x938\" alt=\"图片\"></p><p>最后，执行SQL查询并打印结果。</p><pre><code class=\"language-plain\"># 执行SQL查询并打印结果\nprint(\"查询结果:\")\nresults = cursor.execute(sql_query).fetchall()\n\nfor row in results:\n&nbsp; &nbsp; print(row)\n\n# 关闭数据库连接\nconn.close()\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">查询结果:\n('工程', 2, 77500.0)\n('市场', 1, 55000.0)\n('销售', 2, 55000.0)\n</code></pre><p>基于查询结果，我们可以绘制出各部门平均工资。</p><pre><code class=\"language-plain\">import matplotlib.pyplot as plt\nplt.rcParams[\"font.family\"]=['SimHei'] # 用来设定字体样式\nplt.rcParams['font.sans-serif']=['SimHei'] # 用来设定无衬线字体样式\nplt.rcParams['axes.unicode_minus']=False # 用来正常显示负号\n\n# 计算平均工资\ndepartments = [row[0] for row in results]\navg_salaries = [row[2] for row in results]\n\n# 生成条形图\nplt.figure(figsize=(8, 5))\nbars = plt.bar(departments, avg_salaries, color=['#1f77b4', '#ff7f0e', '#2ca02c']) &nbsp;# 为每个部门设置不同的颜色\n\n# 设置图表标题和标签\nplt.xlabel(\"部门\")\nplt.ylabel(\"平均工资\")\nplt.title(\"各部门平均工资\")\n\n# 添加网格线，提高图表的可读性\nplt.grid(True, linestyle='--', alpha=0.6)\n\n# 在每个条形图上方显示具体数值\nfor bar in bars:\n&nbsp; &nbsp; yval = bar.get_height()\n&nbsp; &nbsp; plt.text(bar.get_x() + bar.get_width()/2, yval, f'{int(yval)}', va='bottom', ha='center', color='black')\n\n# 保存图表到文件\nplt.savefig('Average_Salary_by_Department.png')\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/c8/1d/c88c52yyfb09e759863cda0b7537421d.png?wh=800x500\" alt=\"图片\"></p><p>好了，今天的课程就到此为止。这是相对轻松的一课，理论的东西很少，着重于启发大家思考如果利用大模型的能力来帮助自己的工作。</p><h2>总结时刻</h2><p>通过上述步骤，我们展示了如何使用 Claude 大模型精确地将自然语言转换为有效的 SQL 代码，生成从简单到复杂的 SQL 查询语句。这个过程体现了自然语言处理技术在数据管理和分析中的实际应用，使得即使是不熟悉 SQL 的用户也能轻松进行数据查询。</p><p>这种方法的应用不限于 SQL 查询，它也可以扩展到其他编程语言和技术领域，如自动代码生成、错误诊断和性能优化等。通过合理设计语言模型的提示和命令，我们能够最大化模型的潜能，解决更广泛的技术问题。</p><p>藉此，更值得一谈的问题也许是大模型时代对普通技术人员的影响。毫无疑问，大模型可以自动化很多标准和重复的查询任务，如数据检索、报告生成等。那么，随着这些基本操作的自动化，初级技术人员必须考虑升级转型，我们需要专注于更加策略性的任务，如数据架构设计、数据安全性和性能优化等高级领域。同时，掌握如何有效利用这些大模型进行流程自动化和效率提升也成为了一个重要的技能。</p><p>当然，尽管自动化会接管一些任务，但对高级技能和深入理解的需求将持续存在。数据库管理不仅仅是写查询，还包括管理数据库的健康、优化性能和确保数据一致性等多个方面，这些都需要深厚的专业知识。能力越全面，高级技术懂得越多，接触到的业务场景越复杂，沟通能力约优秀，我们就越安全。</p><h2>思考题</h2><ol>\n<li>\n<p>尽管我使用的是能力强大的 Claude-3 Opus 模型，但我鼓励你尝试其他模型，如GPT系列模型，甚至开源模型来完成本课任务。新的开源模型，如Mistral、Phi，以及中文开源模型Qwen等，同样可以通过适当的提示设计来执行复杂的任务。你可以使用 LangChain 等 LLM 开发框架来调用这些模型，或者直接从Hugging Face Transformers库下载模型，进行推理，并观察它们在类似任务上的表现。</p>\n</li>\n<li>\n<p>在我的示例中，数据库表的结构和关系都非常简单。在你的实际业务逻辑中，你可能需要设计几十个甚至成百上千个业务表，形成非常复杂的Schema，你能否尝试用Claude-3 Opus或GPT-4-Turbo这样的最强模型来处理复杂业务需求？</p>\n</li>\n</ol><p>期待你的分享，欢迎与我交流。如果今天的内容让你有所收获，也欢迎你把这节课转发给有需要的朋友！我们下节课再见！</p>","neighbors":{"left":{"article_title":"07｜用多步提示引导自动生成Python单元测试代码","id":780281},"right":{"article_title":"09｜构建能够读图的基于PDF的RAG系统","id":781413}},"comments":[{"had_liked":false,"id":391264,"user_name":"回到原点","can_delete":false,"product_type":"c1","uid":1162646,"ip_address":"上海","ucode":"95B48784A64271","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/96/da84604a.jpg","comment_is_top":false,"comment_ctime":1717749537,"is_pvip":false,"replies":[{"id":142306,"content":"gpt-4o比较强","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1717952574,"ip_address":"新加坡","comment_id":391264,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"用gpt-4-turbo弄了一些，每次出来的结果都不一样，感觉有点不太行啊，但是换了gpt-4o每次出来结果就一样了","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646424,"discussion_content":"gpt-4o比较强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717952574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":646433,"discussion_content":"老师我看到网上很多人说4o的优势就是快，但是也啰嗦了很多，但是其实没有gtp-4-turbo智能，我个人认为4o快，但是不感觉啰嗦，与gtp-4-turbo对比“智商”的话，我是体验不出来差别的。老师你是怎么认为的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717955641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646424,"ip_address":"广东","group_id":0},"score":646433,"extra":""}]}]},{"had_liked":false,"id":391266,"user_name":"liyinda0000","can_delete":false,"product_type":"c1","uid":1198421,"ip_address":"北京","ucode":"12D5C62716DAB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/55/b6c9c0f4.jpg","comment_is_top":false,"comment_ctime":1717750437,"is_pvip":false,"replies":[{"id":142305,"content":"可以准备所有的SQL Schema，和你真实场景中的SQL语句，收集100个数据，然后微调大模型。微调好了比较保险。我们后面微调篇里面会介绍流程。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1717952554,"ip_address":"新加坡","comment_id":391266,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"老师，感觉您的示例还是比较简单，如果正式环境写sql会很复杂，有什么好方法可以保障自然语言能够转化成正确的sql吗？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646423,"discussion_content":"可以准备所有的SQL Schema，和你真实场景中的SQL语句，收集100个数据，然后微调大模型。微调好了比较保险。我们后面微调篇里面会介绍流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717952554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391220,"user_name":"onemao","can_delete":false,"product_type":"c1","uid":1969439,"ip_address":"上海","ucode":"1CB4101525C2D1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rURvBicplInVqwb9rX21a4IkcKkITIGIo7GE1Tcp3WWU49QtwV53qY8qCKAIpS6x68UmH4STfEcFDJddffGC7lw/132","comment_is_top":false,"comment_ctime":1717637011,"is_pvip":false,"replies":[{"id":142260,"content":"本课内容很类似，但是据实战目测，Claude的能力强一些，错误少。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1717646435,"ip_address":"新加坡","comment_id":391220,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"跟langchian课里是不是类似啊，那里用的gpt，这里换成了Claude","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646246,"discussion_content":"本课内容很类似，但是据实战目测，Claude的能力强一些，错误少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717646435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392122,"user_name":"小风","can_delete":false,"product_type":"c1","uid":1180256,"ip_address":"浙江","ucode":"A5D04FF18880C0","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/60/8b9572ac.jpg","comment_is_top":false,"comment_ctime":1719995902,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"这个怎么使用本地的模型呢。https:&#47;&#47;modelscope.cn&#47;models&#47;senjia&#47;llama-3-8B-Instruct-text2sql\n就就像这个模型","like_count":0},{"had_liked":false,"id":391576,"user_name":"谢江涛","can_delete":false,"product_type":"c1","uid":2151319,"ip_address":"河南","ucode":"295E05E9A89759","user_header":"","comment_is_top":false,"comment_ctime":1718591780,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"老师，您好。这两个表之间的关系：employees e ON d.name = e.department，是大模型自动识别的吗？我们使用千问搭建的大模型环境不能正确识别两个表之间的关系，请问该如何处理？谢谢！","like_count":0}]}