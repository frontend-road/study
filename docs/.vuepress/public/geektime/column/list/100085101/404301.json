{"id":404301,"title":"01 | 实战：实现一个 ToDo 的应用（上）","content":"<p>你好，我是郑晔。</p><p>这一讲是我们整个专栏的第一节课。我在开篇词里说过，很多程序员之所以不写测试，一个重要的原因是不会写测试。所以，我们不玩虚的，第一节课直接带你上手实战。</p><p>我们要实现的是一个 ToDo 的应用，选择一个新项目开始，我们没有历史负担，对于学习如何写测试来说，是最容易的。整个实战分为了上下两节课，在这节课里，我们先来实现业务的核心部分，下一节课，我们把完整的应用实现出来。</p><p>这个 ToDo 应用本身非常简单，实现功能并不是我们这两节课的重点。一方面，你会看到如何解决问题的过程，比如，如何分解任务、如何设计测试场景、如何把测试场景转换为一个测试用例等等；另一方面，你也会看到，我是如何运用这些解决问题的过程一点点把问题解决掉，在整个开发的过程中如何写测试、写代码。</p><p>当你在实际工作中面对更复杂的问题时，这里面的代码对你的帮助可能不大，但这些解决问题的思路却会在工作中实际帮助到你。如果你订阅过我的前几个专栏，这算是一个完整的实战练习。</p><h2>项目前的准备</h2><p>在正式开始之前，我们一块来看下这个 ToDo 应用都有哪些具体需求（注：接下来的代码我会用Java来写，如果你没有购买过我的其他课程也没有关系，极客时间有免费试读额度，欢迎你点击文章里的超链接进行学习）。</p><!-- [[[read_end]]] --><ul>\n<li>添加 Todo 项。</li>\n</ul><pre><code>todo add &lt;item&gt;  \n\n1. &lt;item&gt;  \nItem &lt;itemIndex&gt; added\n</code></pre><ul>\n<li>完成 Todo 项。</li>\n</ul><pre><code>todo done &lt;itemIndex&gt;  \nItem &lt;itemIndex&gt; done.\n</code></pre><ul>\n<li>查看 Todo 列表，缺省情况下，只列出未完成的 Todo 项。</li>\n</ul><pre><code>todo list  1. &lt;item1&gt; 2. &lt;item2&gt;  \nTotal: 2 items\n</code></pre><ul>\n<li>使用 all 参数，查看所有的 Todo 项。</li>\n</ul><pre><code>todo list --all  \n1. &lt;item1&gt; \n2. &lt;item2&gt; \n3. [Done] &lt;item3&gt;  \nTotal: 3 items, 1 item done\n</code></pre><p>如果你订阅过我的<a href=\"https://time.geekbang.org/column/intro/100068401\">《代码之丑》</a>，你会发现，它就是我在《代码之丑》中给你布置的课堂练习作业的第一部分。如果你想对今天的内容有更深刻的理解，不妨先停下来，自己实现一遍这个需求，然后，再回过头看我是怎样解决这个问题的，对比一下实现方式的差异，记得要写测试哦！</p><p>为了厘清主线，不受细节的干扰，我在正文中只罗列了最关键的部分代码。如果你想看完整的代码，我在 GitHub 上为此专门建了<a href=\"https://github.com/dreamhead/geektime-todo\">一个项目</a>，你可以去参考。</p><p>具体的需求有了，我们接下来怎么动手实现这个应用呢？我们先来做一些基础的准备工作：</p><ul>\n<li>一个项目自动化；</li>\n<li>对需求进行简单的设计。</li>\n</ul><p>为什么要先从这些东西做起呢？我在《10x 程序员工作法》中曾经介绍过<a href=\"https://time.geekbang.org/column/article/77294\">迭代 0</a> 的概念，这是一个项目开始的基础准备，当然，因为我们这个是一个练习项目，所以，准备的内容相对来说，还比较少。</p><p>为什么要准备项目自动化呢？简单来说，就是防止自己犯一些低级错误。关于这个项目自动化中包含了哪些内容，我在《10x 程序员工作法》中也专门用了<a href=\"https://time.geekbang.org/column/article/86561\">一讲</a>的篇幅介绍，你如果有兴趣不妨去了解一下。</p><p>接下来，我们就要进行一些简单的设计了。</p><h2>设计先行</h2><p>虽说这个部分的要求是一个命令行的应用，但我们要知道，一个系统的业务核心与它呈现的方式并不是耦合在一起的。也就是说，命令行只是这个 ToDo 应用的一种呈现形式。在专栏后面你会看到，我们也可以把它改造成一个 REST 服务。</p><p>所以，我们首先要做一个设计，<strong>把核心的业务部分和命令行呈现的部分分开</strong>。在我们的工程中，它们分别被放到了两个模块里，一个是 todo-core，用来放置核心的业务部分；一个是 todo-cli，用来放置命令行相关的处理。这一讲，我们主要先来解决核心的业务部分，至于命令行相关的处理，那会是我们下一讲的主题。</p><p>我们先来处理核心的业务部分。这里的核心业务是什么呢？根据前面的需求，就只有三个操作：</p><ul>\n<li>添加一个 Todo 项；</li>\n<li>完成一个 Todo 项；</li>\n<li>Todo 项列表。</li>\n</ul><p>接下来，我们可以用 DDD 战术设计的方法进行一下识别各个概念（如果你不了解战术设计的基本过程，可以去看看《软件设计之美》中的关于<a href=\"https://time.geekbang.org/column/article/267843\">战术设计</a>的过程）。</p><p>首先是名词，这里我们的核心对象只有一个，就是 Todo 项。Todo 项的核心字段就是它的内容，也就是我们在命令行里写下的内容。</p><p>有了名词，我们就要识别动作了。我们先来看领域服务，这里我们可以有一个 Todo 项服务，对应着我们的操作，它应该包含三个方法：</p><ul>\n<li>addTodoItem，添加 Todo 项；</li>\n<li>markTodoItemDone，完成一个 Todo 项；</li>\n<li>list，列出所有的 Todo 项。</li>\n</ul><p>我们应用的需求比较简单，核心对象只有 Todo 项一个，也就不牵扯到多个对象的协同，所以我们这里就暂时不涉及到应用服务的设计。</p><p>服务只是操作，最终还要有一个地方把操作的结果存起来，在 DDD 中，这是 Repository 扮演的角色。所以，我们这里还需要一个 Todo 项的 Repository 用来处理与持久化相关的接口。</p><p>很多人一看到 Repository 这个概念，首先想到的是数据库，但正如你所见，这里并没有出现数据库。所以  Repository 并不是与数据库绑定在一起的，它只表示一种持久化的机制。在我们的这个版本实现里，这个 Repository 将会是一个文件的版本。</p><p>现在基本的设计有了，我们就要准备开始实现这个设计了。</p><h2>任务分解</h2><p>要从哪里开始实现呢？我们要<strong>从离我们需求最近的入口开始</strong>。通常来说，<strong>这个起点是应用服务</strong>，但是我们这里暂时没有应用服务，所以，我们可以从领域服务开始。</p><p>我们就按照需求的先后顺序，依次实现每个服务，首先是添加 Todo 项。</p><p>如果按照很多人通常的习惯，添加 Todo 项，就是创建一个 Todo 项，然后存在 Repository 里面。但这对我们的测试课来说是不够的，我们还得考虑一下这个行为要怎么测试。</p><p><strong>要想测试一个函数，一个函数最好是可测的。</strong>什么是可测的？就是通过函数的接口设计，我们给出特定的输入，它能给我们相应的输出。所以，一个函数最好是有返回值的。我们可以这样来设计添加 Todo 项的函数接口。</p><pre><code>TodoItem addTodoItem(final TodoParameter todoParameter);\n</code></pre><p>在这个函数签名中，TodoItem 表示一个 Todo 项，而 TodoParameter 表示创建一个 Todo 项所需的参数（很多人可能会选择字符串作为入口参数，我曾经在《代码之丑》中讲过，使用一个更有业务含义的名字，比直接使用基本类型会更清楚）。</p><p>有了这个函数签名，我知道你已经迫不及待地要开始写测试了。但请稍等一下，<strong>我们要先来考虑一下测试场景</strong>，因为很多人写代码只会考虑到正常的场景，趁着我们还没开始写代码，最好把能想到的各种场景都考虑一下。</p><p>首先想到的是添加一个正常的字符串，这是我们的正常情况，没有问题。但是，如果添加的字符串是一个空的，我们该怎么处理呢？</p><p>一般而言，处理空字符串的方式有两种。一种是返回一个空的 TodoItem，一种是抛出一个异常。到底使用哪种做法，我们要考虑一下二者语义的差别。返回一个空的 TodoItem，表示这是一个可以接受的场景。而抛出一个异常，表示这不是一个正常的场景，它是一个“异常”。</p><p>就我们这里的场景而言，我们要从业务思考一下，确实有人可能在调用我们的命令时给出的参数是空，但考虑到 <a href=\"https://time.geekbang.org/column/article/84374\">Fail Fast 原则</a>，这种错误属于入口参数错误，应该在入口检测出来，不应该传到业务核心里面。</p><p>所以，我们可以将空传给业务核心部分视为“异常”。同时，我们也确立好了<strong>一条设计规范：对于输入参数的检测，由入口部分代码进行处理</strong>。</p><p>基于这条设计规范的考虑，如果是一个空的字符串，那么根本就不应该传到我们的领域服务中，应该直接在入口参数检测中就应该消灭掉。换言之，TodoParameter 就不会出现空字符串。所以空字符串这个事，我们就暂且不考虑了。</p><p>不过，这倒给我们提了一个醒，如果是 TodoParameter 为空呢？这种情况也不应该出现，所以我们可以把它当做异常来处理。</p><p>现在，我们这里就有了两个测试场景：</p><ul>\n<li>添加正常的参数对象，返回一个创建好的 Todo 项；</li>\n<li>添加空的参数对象，抛出异常。</li>\n</ul><p>也许你还会想到几个场景，比如如果字符串重复了怎么办？答案是从目前的业务要求来说，字符串重复是可以接受的，只是添加了一个新的 Todo 项。所以，不需要为它做什么特殊的处理。</p><p>再有，如果存储到 Repository 的过程中出现了问题，比如磁盘满了，这样的问题属于不可恢复的异常，我们在业务处理中也做不了什么特殊的处理，只能把它抛出去。</p><p>一般来说，这种异常可以由 Repository 直接抛出一个 Runtime 异常，我们在业务处理不需要做什么。所以我们这里可以确立另外<strong>一条设计规范：Repository 的问题以运行时异常的形式抛出，业务层不需要做任何处理。</strong></p><p>好，我们现在已经考虑了最主要的场景，下面就到了动手写代码环节了。</p><h2>编写测试</h2><p>我们从第一个测试场景开始，这个场景关注的是正常的参数对象。我们首先要做的是，<strong>把测试场景具象化成一个测试用例</strong>。</p><p>把测试场景具象成一个测试用例，也就是要把测试场景中空泛的描述变成一个个具体的参数。比如，添加正常的字符串。什么叫一个正常的字符串呢？在我们这个案例里面，它是相对于空字符串而言的，所以，我们这里需要给出一个非空的字符串。</p><p>如果有业务人员给我们一个具体的例子那是最好，如果没有，我会使用一些在测试中常用的词汇，比如：foo、bar 之类的。</p><p>到这里，我们就很容易写出一个测试的基本结构。</p><pre><code>@Test\npublic void should_add_todo_item() {\n    TodoItemRepository repository = ...\n    TodoItemService service = new TodoItemService(repository);\n    TodoItem item = service.addTodoItem(new TodoParameter(&quot;foo&quot;));\n    assertThat(item.getContent()).isEqualTo(&quot;foo&quot;);\n}\n</code></pre><p>你会发现这还是一段未完成的代码，原因就在于，我们还没有对 repository 这个变量进行处理。我们现在处理的重点是在领域服务上，而 TodoItemRepository 到底要怎么实现，我们还没有考虑。</p><p>我们现在对于 TodoItemRepository 的述求是它只要有一个 save 接口就好，至于它是数据库还是文件，根本不是我们现在关心的重点。</p><p>只有一个接口，我们该怎么用它呢？我们可以用 Mock 框架模拟出一个有这样行为的对象。Mock 框架就是根据预期的参数，给出相应的结果，这个结果可能是返回值，也可能是抛出异常。关于 Mock 框架更多的介绍，我们会在后面的部分专门讲解。</p><p>下面是增加了 repository 初始化的代码。</p><pre><code>@Test\npublic void should_add_todo_item() {\n    TodoItemRepository repository = mock(TodoItemRepository.class);\n    when(repository.save(any())).then(returnsFirstArg());\n    TodoItemService service = new TodoItemService(repository);\n    \n    TodoItem item = service.addTodoItem(new TodoParameter(&quot;foo&quot;));\n    \n    assertThat(item.getContent()).isEqualTo(&quot;foo&quot;);\n}\n</code></pre><p>这里我们用到的 Mock 框架是 Mockito，这里面有一句代码你或许会有点陌生。</p><pre><code>when(repository.save(any())).then(returnsFirstArg());\n</code></pre><p>这句代码表示当我用任意参数调用这个 repository 对象的 save 方法时，我预期它返回第一个参数作为返回值。对应到我们这里的语义，就是存进去什么对象，就返回什么对象。</p><p>另外，这里面用到的断言程序库是 <a href=\"https://joel-costigliola.github.io/assertj/\">AssertJ</a>，它的 API 是流畅风格的 API（Fluent API），也就是连着的点点点。</p><p>有了这个测试，实现相应的代码就很容易了，相信你也很容易做到。</p><pre><code>public TodoItem addTodoItem(final TodoParameter todoParameter) {\n    final TodoItem item = new TodoItem(todoParameter.getContent());\n    return this.repository.save(item);\n}\n</code></pre><p>这里最核心的 TodoItem 目前只包括一个内容的字段。</p><pre><code>@Getter\npublic class TodoItem {\n    private final String content;\n    \n    public TodoItem(final String content) {\n        this.content = content;\n    }\n}\n</code></pre><p>接下来，我们再来实现下一个测试。有了第一个测试的基础，第二个测试的关注点是空对象，你也应该能够很容易得写出来。</p><pre><code>@Test\npublic void should_throw_exception_for_null_todo_item() {\n    assertThatExceptionOfType(IllegalArgumentException.class)\n            .isThrownBy(() -&gt; service.addTodoItem(null));\n}\n</code></pre><p>根据第二个测试，我们的 addTodoItem 方法就需要增加一条对于空对象的处理。</p><pre><code>public TodoItem addTodoItem(final TodoParameter todoParameter) {\n    if (todoParameter == null) {\n        throw new IllegalArgumentException(&quot;Null or empty content is not allowed&quot;);\n    }\n\n    final TodoItem item = new TodoItem(todoParameter.getContent());\n    return this.repository.save(item);\n}\n</code></pre><p>至此，添加 Todo 项的任务也算完成，我们可以运行一下命令做一下检查，看看我们是否有遗漏。</p><pre><code>./gradlew check\n</code></pre><p>这里的遗漏可能是由于编码风格，也可能是由于代码覆盖率导致，这也是我们为什么要把项目自动化放在最前面完成的原因。后面每完成一个任务，也应该运行一下这个命令，同样的事情，后面我就不再重复了。</p><p>到这里，关于如何添加测试编写代码的最基本思路，我们已经讲清楚了。接下来，我们来完成一个 Todo 项。完成 Todo 项的接口是这样的。</p><pre><code>TodoItem markTodoItemDone(TodoIndexParameter index);\n</code></pre><p>这里的入口参数是一个索引，只不过这里做了一次封装，封装出一个 TodoIndexParameter。</p><p>针对这个接口，我们考虑的测试场景包括：</p><ul>\n<li>对于一个已经存在的 Todo 项，将其标记已完成；</li>\n<li>如果索引超出现有的索引范围，则返回空。</li>\n</ul><p>对于一个索引，你可能也会想到索引为负的场景。但同之前一样，这个问题应该是属于在入口就检验出来的问题，所以我们封装一个 TodoIndexParameter，这样在业务层就不需要考虑索引为负的场景了。</p><p>对于最后一个场景，当索引超出索引范围，返回空。鉴于空指针总是一个容易引起问题的场景，所以，我们这里采用 Optional 替代直接返回对象（关于 Optional 使用的基本思路，我在《软件设计之美》中<a href=\"https://time.geekbang.org/column/article/258954\">讲过</a>，如果你感兴趣可以去回顾一下）。</p><pre><code>Optional&lt;TodoItem&gt; markTodoItemDone(TodoIndexParameter index);\n</code></pre><p>我们先来编写这个接口的第一个测试。</p><pre><code>@BeforeEach\npublic void setUp() {\n    this.repository = mock(TodoItemRepository.class);\n    this.service = new TodoItemService(this.repository);\n}\n\n\n@Test\npublic void should_mark_todo_item_as_done() {\n    when(repository.findAll()).thenReturn(ImmutableList.of(new TodoItem(&quot;foo&quot;)));\n    when(repository.save(any())).then(returnsFirstArg());\n    \n    final Optional&lt;TodoItem&gt; todoItem = service.markTodoItemDone(TodoIndexParameter.of(1));\n    \n    assertThat(todoItem).isPresent();\n    final TodoItem actual = todoItem.get();\n    assertThat(actual.isDone()).isTrue();\n}\n</code></pre><p>因为 service 的初始化和 repository 这个模拟对象的初始化几乎所有正常路径都要用到，所以，我们把它挪到 setUp 方法中，以便每个测试之前都能够运行它。</p><p>这个版本的实现采用了最为粗暴的方案，把所有的 Todo 项都加载到内存中，然后根据索引进行筛选。所以，这里我们用到了 findAll 方法。</p><p>这个实现不难，重要的变化是 TodoItem 需要有一个字段标记它的完成，代码如下。</p><pre><code>@Getter\npublic class TodoItem {\n    private final String content;\n    private boolean done;\n    \n    public TodoItem(final String content) {\n        this.content = content;\n        this.done = false;\n    }\n    \n    public void markDone() {\n        this.done = true;\n    }\n}\n</code></pre><p>后面两个测试场景以及相应的实现代码，你可以参考开源项目中的代码，这里就不一一罗列了。</p><p>最后是 Todo 项列表，它的接口相对比较简单。</p><pre><code>List&lt;TodoItem&gt; list(final boolean all);\n</code></pre><p>其中，all 参数为 true 时，列出所有的 Todo 项；false 的时候，列出未完成的 Todo 项。</p><p>在需求中，缺省情况罗列的是未完成的 Todo 项，这是过滤掉已完成的 Todo 项的结果。但是，如果我们简单的采用按照列表的顺序作为索引，这就产生一个问题，每当有一个 Todo 项完成之后，剩余 Todo 项的列表顺序就会发生改变，这其实是不合适的。所以，我们最好把索引放到 Todo 项的实体中。</p><pre><code>@Getter\npublic class TodoItem {\n    private long index;\n    private final String content;\n    private boolean done;\n    \n    public TodoItem(final String content) {\n        this.content = content;\n        this.done = false;\n    }\n    \n    public void assignIndex(final long index) {\n        this.index = index;\n    }\n    \n    public void markDone() {\n        this.done = true;\n    }\n}\n</code></pre><p>这里我们把索引的赋值可以在服务中完成，也可以在 Repository 保存的过程中完成。从目前的情况看，这个索引的值与 Repository 现有的 Todo 项个数紧密相关，所以，我们可以把它放在 保存到 Repository 的过程中完成。也就是说，保存一个 Todo 项时，如果这个 Todo 项没有索引，就为它赋一个索引，如果有索引，就更新相应的 Todo 项。</p><p>针对这个接口，我们考虑的测试场景包括：</p><ul>\n<li>如果有 Todo 项，罗列 Todo 项时，列出所有的 Todo 项；</li>\n<li>如果没有 Todo 项，罗列 Todo 项时，列出 Todo 项为空；</li>\n<li>如果有未完成的 Todo 项，罗列未完成 Todo 项，列出所有未完成的 Todo 项；</li>\n<li>如果没有未完成的 Todo 项，罗列未完成 Todo 项，列出的 Todo 项为空。</li>\n</ul><p>具体的代码也不在这里罗列了，你可以参考开源项目中的代码。</p><p>有时你会发现，虽然我们列出了很多测试场景，但当我们有了一些基础的代码之后，一些测试刚写完就通过了。比如，如果我们先写了罗列 Todo 项和罗列未完成 Todo 项的代码，后面两个测试场景很可能自然地就通过了。</p><p>这种情况在写测试的时候是很常见的，这说明，我们前面的代码已经很好地处理了这些情况。这并不说明这些测试场景是无用的，因为不同的实现方式并不能保证这些测试都是通过的，所以，既然我们已经为它们写了测试，保留在那里就好了。</p><p>到这里，我们已经把最核心的业务代码写完了，当然，它还不能完整地运行，因为它没有命令行的输入，也没有实现 Repository 的存储。但有了一个稳定的核心，这些东西都好办。下一讲，我们就来把这些东西都连接起来。</p><h2>总结时刻</h2><p>在这一讲里，我们实现 ToDo 应用的核心业务部分，这里面的重点并不是把代码写出来，我相信你有能力去编写完成这段代码。我在这里的描述更多的是在一个项目启动的初期要关注哪些内容，以及如何去着手去编写测试。</p><p>项目刚开始时，我们要准备哪些内容：</p><ul>\n<li>项目的自动化；</li>\n<li>针对需求进行初步的设计。</li>\n</ul><p>着手编写代码时，我们要怎么做呢？</p><ul>\n<li>对要实现的需求进行任务分解；</li>\n<li>在一个具体的需求任务中，我们可以从需求入口开始入手；</li>\n<li>设计一个可测试的函数；</li>\n<li>针对具体的函数，考虑测试场景；</li>\n<li>针对具体的测试场景，将场景具象化成测试用例。</li>\n</ul><p>在梳理的过程中，我们还会针对一些统一的情况作出一些约定，成为项目整体的设计规范，比如，在这里我们约定：</p><ul>\n<li>对于输入参数的检测，由入口部分代码进行处理；</li>\n<li>Repository 的问题以运行时异常的形式抛出，业务层不需要做任何处理。</li>\n</ul><p>在编码的过程中，我们也看到了：</p><ul>\n<li>根据不断增加的需求，逐渐改动我们的设计，这就是演化式设计的基本做法；</li>\n<li>我们对待测试也像对待代码一样，会消除代码中存在的一些坏味道。</li>\n</ul><p>如果今天的内容你只能记住一句话，那么请记住，<strong>细化测试场景，编写可测试的代码。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/d8/23/d8yy713c1c76376c9e17a42917637523.jpg?wh=2000x1073\" alt=\"\"></p><h2>思考题</h2><p>今天我分享了从一个需求入手，如何一步一步地写出测试。你在实际工作中是怎么做测试呢？如果你如果不做的话，原因又是什么呢？欢迎在留言区分享你的所见所闻。</p><h2>参考资料</h2><p><a href=\"https://time.geekbang.org/column/article/77294\">迭代0：启动开发之前，你应该准备什么？</a></p><p><a href=\"https://time.geekbang.org/column/article/86561\">一个好的项目自动化应该是什么样子的？</a></p><p><a href=\"https://time.geekbang.org/column/article/267843\">战术设计：如何像写故事一样找出模型？</a></p>","comments":[{"had_liked":false,"id":306923,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1628777748,"is_pvip":false,"replies":[{"id":"111182","content":"很多人是简单的事情做不好，复杂的事情搞不定","user_name":"作者回复","comment_id":306923,"uid":"1258861","ip_address":"","utype":1,"ctime":1628836185,"user_name_real":"郑晔"}],"discussion_count":3,"race_medal":0,"score":"48873418004","product_id":100085101,"comment_content":"这个例子比较简单，挺适合刚开始入门测试的人，但是同时，也可能会让开发觉得，这么简单的逻辑，一看就知道对不对、有没有问题了，何必还要用自动化测试进行覆盖呢？<br><br>一方面，这确实只是个例子，但是也不能因为简单，就不写用例，因为所有的代码都不可预知的在后面发生改变，那么作为后续的回归用例，也是一样有用的；<br><br>另一方面，需要关注 mock 的使用，实际业务场景很复杂，函数之间相互调用逻辑更是很常见，所以会经常用到 mock，但是 mock 也不可避免的会让我们规避了集成测试的测试点，所以怎么选取合适的 mock 点，并预知 mock 的风险，也是要了解的。<br><br>再补充，就算自己写了测试用例，也不要完全的依赖测试来发现所有的问题，代码思维、设计风格、编码习惯，这些预防问题发生的手段，才是最有效的。<br><br>以上，期待后续的精彩内容。","like_count":11,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524976,"discussion_content":"很多人是简单的事情做不好，复杂的事情搞不定","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628836185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025762,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a6/e2/5ce22802.jpg","nickname":"再见陛下","note":"","ucode":"42170293151A24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389081,"discussion_content":"唉，一头雾水，看不啊懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629111398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1019029,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","nickname":"sylan215","note":"","ucode":"5A2CF31BC69F40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1025762,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a6/e2/5ce22802.jpg","nickname":"再见陛下","note":"","ucode":"42170293151A24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389101,"discussion_content":"是我写的太晦涩了么……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629118613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389081,"ip_address":""},"score":389101,"extra":""}]}]},{"had_liked":false,"id":305905,"user_name":"李威","can_delete":false,"product_type":"c1","uid":1460961,"ip_address":"","ucode":"3409A9390BD1FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","comment_is_top":false,"comment_ctime":1628226392,"is_pvip":false,"replies":[{"id":"110700","content":"问题是，从实体开始要测什么呢？我们得有一个出发点，服务刚好可以和需求对上。","user_name":"作者回复","comment_id":305905,"uid":"1258861","ip_address":"","utype":1,"ctime":1628243989,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"27398030168","product_id":100085101,"comment_content":"文中是从sevice层入手写第一个测试，可否以整洁架构图中最内层的entity入手写第一个测试，代码实现也是按先实现内层，再逐步实现外层的代码？","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524556,"discussion_content":"问题是，从实体开始要测什么呢？我们得有一个出发点，服务刚好可以和需求对上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628243989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308421,"user_name":"asusual","can_delete":false,"product_type":"c1","uid":2735468,"ip_address":"","ucode":"AF9AA546D3794F","user_header":"https://static001.geekbang.org/account/avatar/00/29/bd/6c/a988846d.jpg","comment_is_top":false,"comment_ctime":1629615929,"is_pvip":false,"replies":[{"id":"111751","content":"多谢分享","user_name":"作者回复","comment_id":308421,"uid":"1258861","ip_address":"","utype":1,"ctime":1629767220,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"18809485113","product_id":100085101,"comment_content":"相比Junit,Spock框架测试起来要省事很多~","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525487,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629767220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311614,"user_name":"爪哇咿","can_delete":false,"product_type":"c1","uid":2754404,"ip_address":"","ucode":"2119B1185DFD5E","user_header":"","comment_is_top":false,"comment_ctime":1631340421,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14516242309","product_id":100085101,"comment_content":"我有个疑问，是否有必要为了满足单测的可测性让原本没有返回值的函数有返回值","like_count":3,"discussions":[{"author":{"id":2927088,"avatar":"","nickname":"woJA1wCgAAkNX5-PXWqkJYLbOqbxPL_g","note":"","ucode":"2916B7699974E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558987,"discussion_content":"想知道+1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648544603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1947974,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b9/46/604b3dcf.jpg","nickname":"蓝色海洋","note":"","ucode":"C1BF85D9E5C881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578266,"discussion_content":"没有返回值也可以检验传入变量的变化～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656636906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308438,"user_name":"小凯","can_delete":false,"product_type":"c1","uid":2160395,"ip_address":"","ucode":"4467791346C3ED","user_header":"https://static001.geekbang.org/account/avatar/00/20/f7/0b/403fbeba.jpg","comment_is_top":false,"comment_ctime":1629620317,"is_pvip":false,"replies":[{"id":"111708","content":"运行.&#47;gradlew，它会提你下载相应的gradle版本，这种做法就是为了保持所有人用一样的gradle版本。<br><br>BTW，gradle&#47;wrapper&#47;gradle-wrapper.properties里面包含了gradle的版本信息。","user_name":"作者回复","comment_id":308438,"uid":"1258861","ip_address":"","utype":1,"ctime":1629699621,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14514522205","product_id":100085101,"comment_content":"项目运行不起来 能贴一下具体的gradle版本信息吗？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525491,"discussion_content":"运行./gradlew，它会提你下载相应的gradle版本，这种做法就是为了保持所有人用一样的gradle版本。\n\nBTW，gradle/wrapper/gradle-wrapper.properties里面包含了gradle的版本信息。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629699621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342155,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1650074077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10240008669","product_id":100085101,"comment_content":"在工作中，我一般做测试的代码是那些看起来很容易做测试的部分，实际上其底层逻辑依然是：对我有能力做测试的代码做测试，很大部分代码都是没有能力做测试的，也就是说写出的代码是不具备可测试性的。另外，我会做大量的接口测试，实际上是一种集成测试或系统测试。","like_count":2},{"had_liked":false,"id":309059,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1629907090,"is_pvip":false,"replies":[{"id":"111884","content":"设计是演化出来的","user_name":"作者回复","comment_id":309059,"uid":"1258861","ip_address":"","utype":1,"ctime":1629940339,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10219841682","product_id":100085101,"comment_content":"谢谢老师一步一步的说明添加TodoItem字段: content -&gt; done -&gt; index","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525729,"discussion_content":"设计是演化出来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305750,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1628149759,"is_pvip":true,"replies":[{"id":"110659","content":"因为它很简单，我就放在一起了。如果复杂一点，我可能会考虑拆分。","user_name":"作者回复","comment_id":305750,"uid":"1258861","ip_address":"","utype":1,"ctime":1628173317,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10218084351","product_id":100085101,"comment_content":"List list(final boolean all);  这个接口不符合单一职责原则吧","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524500,"discussion_content":"因为它很简单，我就放在一起了。如果复杂一点，我可能会考虑拆分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628173317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347782,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654424367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949391663","product_id":100085101,"comment_content":"细化测试场景，编写可测试的代码。--记下来","like_count":1},{"had_liked":false,"id":331450,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1642589380,"is_pvip":true,"replies":[{"id":"121293","content":"加油加油！","user_name":"作者回复","comment_id":331450,"uid":"1258861","ip_address":"","utype":1,"ctime":1642982460,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":5,"score":"5937556676","product_id":100085101,"comment_content":"老师好，我是从10x程序员开始关注老师的课程，目前该课程已经学习完毕，受益匪浅。然后就开始继续学习软件设计之美，目前还在学习中。后来又看到代码之丑的ToDo项目，当时就在想也要参与一下。然后就思考怎么样才能写得出彩，第一点想到的就是要实践一下tdd。现在看到程序员的测试课这门课程，果然是英雄所见略同，哈哈哈！<br><br>因为我刚换了一个工作，主要会用C++来开发。所以这里先立个flag，使用C++来实践这个课程，采用tdd来实现这个ToDo的小项目。到时把GitHub工程发出来，请老师点评。<br><br>不过时间周期可能会比较长，我尽量努力。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547969,"discussion_content":"加油加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642982460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320121,"user_name":"chon","can_delete":false,"product_type":"c1","uid":1068925,"ip_address":"","ucode":"1C32170972F726","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7d/dd852b04.jpg","comment_is_top":false,"comment_ctime":1636088386,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5931055682","product_id":100085101,"comment_content":"老师，我用jacoco的maven plugin，运行后发现代码覆盖率为0，这部分的测试代码已写。同样写了不用mockito的测试代码，这个就能看到测试覆盖率不为0。网上说因为mockito也用了字节码增强，导致冲突。请问这个怎么解决？","like_count":1},{"had_liked":false,"id":306360,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1628512654,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5923479950","product_id":100085101,"comment_content":"should_mark_todo_item_as_done测试用例中<br>1)  actural.isDone是在哪实现的？TodoItem中没有这个方法。是使用注解实现的吗？<br>2） Optional&lt;TodoItem&gt; todoItem = service.markTodoItemDone(1)中1应该是TodoIndexParameter类型<br>3)  Java特性用的有点多，其他语言背景看的有点困难。运行时异常，Optional。希望老师能照顾一下，多解释一下或者提示一下其他语言对应的特性，谢谢","like_count":1,"discussions":[{"author":{"id":1337030,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/c6/d779dfb6.jpg","nickname":"松松","note":"","ucode":"EB2A80CF7BCA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388353,"discussion_content":"1）@Getter Lombok生成的，布尔类型是isX()，其它是getX()","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628730586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1187021,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","nickname":"Gojustforfun","note":"","ucode":"7513A40F27344F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1337030,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/c6/d779dfb6.jpg","nickname":"松松","note":"","ucode":"EB2A80CF7BCA4B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390567,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629894762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388353,"ip_address":""},"score":390567,"extra":""}]}]},{"had_liked":false,"id":305698,"user_name":"时尚女人的儿子😘","can_delete":false,"product_type":"c1","uid":1114960,"ip_address":"","ucode":"E522A9E0310979","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/50/c0021fc0.jpg","comment_is_top":false,"comment_ctime":1628124089,"is_pvip":false,"replies":[{"id":"110609","content":"围绕着目标去做测试，我没有特别的想过输入和输出。","user_name":"作者回复","comment_id":305698,"uid":"1258861","ip_address":"","utype":1,"ctime":1628145591,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"5923091385","product_id":100085101,"comment_content":"我在实现例如 TodoItemService 之前, 通常都会先测试它的 输入和输出, 两个类被测试完成后, 我才去开始用测试实现TodoItemService. 但看了您的实现手法, 一个测试集就已经能够覆盖到了输入输出.感觉您这样更简单些. 不知道我想的对不对, 还是应该一个模块对应一个测试集呢?","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524485,"discussion_content":"围绕着目标去做测试，我没有特别的想过输入和输出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628145591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025762,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a6/e2/5ce22802.jpg","nickname":"再见陛下","note":"","ucode":"42170293151A24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389082,"discussion_content":"目标难道不是输入和输出么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629111685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356813,"user_name":"Geek_a6ed5f","can_delete":false,"product_type":"c1","uid":3176026,"ip_address":"北京","ucode":"B9E2492DBC14EC","user_header":"","comment_is_top":false,"comment_ctime":1662607730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662607730","product_id":100085101,"comment_content":"github的地址是哪里？","like_count":0},{"had_liked":false,"id":349317,"user_name":"砖用冰西瓜","can_delete":false,"product_type":"c1","uid":1057075,"ip_address":"","ucode":"9FB3FAFC958A10","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/33/acacb6ac.jpg","comment_is_top":false,"comment_ctime":1655883405,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655883405","product_id":100085101,"comment_content":"我不是写 Java 的程序猿，有个问题，Java 是强类型，函数的参数的类型定义好了，在调用的时候如果用了 null，应该是不用单元测试也会报错吧？还需要在单元测试里面再验证一遍吗？","like_count":0},{"had_liked":false,"id":347614,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":2659123,"ip_address":"","ucode":"31A65C4C054B93","user_header":"https://static001.geekbang.org/account/avatar/00/28/93/33/2d4de22e.jpg","comment_is_top":false,"comment_ctime":1654225850,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654225850","product_id":100085101,"comment_content":"   @Test<br>    void should_not_list_without_item() {<br>        when(repository.findAll()).thenReturn(ImmutableList.of());<br><br>        List&lt;TodoItem&gt; items = service.list(true);<br>        &#47;&#47; assertThat(items).hasSize(0);  &#47;&#47; 这一行性能有问题, 替换成下面的更好<br>        assertThat(items).isEmpty();<br>    }","like_count":0},{"had_liked":false,"id":345883,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1015222,"ip_address":"","ucode":"27EB4A725CE14E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/b6/abdebdeb.jpg","comment_is_top":false,"comment_ctime":1652673564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652673564","product_id":100085101,"comment_content":"老师好，我一直有个问题比较困惑，我们在做单元测试的时候需要mock数据，比如说我下面这个例子：<br><br>```<br>public interface OrderService {<br>    Order create(Order order)<br>}<br><br>@Test<br>public void should_create_order() {<br>        Order mockOrder = mockOrder();<br>        OrderService subject = new OrderServiceImpl(orderRepository);<br>        when(orderRepository.save(any())).thenReturn(mockOrder);<br><br>        Order createdOrder = subject.create(mockOrder);<br>        这里对状态的测试好像没什么意义，因为createdOrder就是mockOrder, 而mockOrder是我们给的<br>    }<br>```<br>在这个例子中，OrderService接收一个Order entity的参数，通过orderRepository.save(order)持久化Order，然后return createdOrder，我的问题是：<br>1. 这个测试好像没什么用，因为你的返回值createdOrder其实就是测试里的mockOrder?<br>2. 这个OrderService.create(Order order)的设计是不是不对，我们是不是应该设计成OrderService.create(OrderDTO orderDto)，这样的话我们就不需要每次都得在调用方做DTO-&gt;entity的convert<br>3. 每次有xxxRepository.save()这样的调用我就感觉整个测试没什么意义，因为你的返回值很可能就是 return xxxRepository.save(xxx), 这种方法可能只能用行为测试，做不了状态测试。","like_count":0},{"had_liked":false,"id":345172,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1652089675,"is_pvip":false,"replies":[{"id":"126008","content":"你可以去找Java入门课程","user_name":"作者回复","comment_id":345172,"uid":"1258861","ip_address":"","utype":1,"ctime":1652168802,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1652089675","product_id":100085101,"comment_content":"老师，java 新手，课程中的思路我都能理解，但是如果自己手动实践还是有一些问题，可以考虑出一个java开发环境安装的视频吗？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571283,"discussion_content":"你可以去找Java入门课程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652168802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337700,"user_name":"程同学","can_delete":false,"product_type":"c1","uid":1974472,"ip_address":"","ucode":"2A10FA3C724C08","user_header":"https://static001.geekbang.org/account/avatar/00/1e/20/c8/b16eb6ed.jpg","comment_is_top":false,"comment_ctime":1646982740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646982740","product_id":100085101,"comment_content":"不懂Java，只懂JS。有咩有适合前端的测试课程","like_count":0},{"had_liked":false,"id":331699,"user_name":"微笑","can_delete":false,"product_type":"c1","uid":1685222,"ip_address":"","ucode":"C5EE55E23D2C57","user_header":"https://static001.geekbang.org/account/avatar/00/19/b6/e6/db12908c.jpg","comment_is_top":false,"comment_ctime":1642730612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642730612","product_id":100085101,"comment_content":"当代码技术负债太高，实际开发业务时根本没那么多时间写测试<br>最多就是关键逻辑，或者必要测试才会写<br>大多数都是接口集成测试。<br><br>适合新项项目、项目质量要求高","like_count":0},{"had_liked":false,"id":313182,"user_name":"🌿","can_delete":false,"product_type":"c1","uid":2066322,"ip_address":"","ucode":"5F819BBD11054E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/87/92/9ac4c335.jpg","comment_is_top":false,"comment_ctime":1632302919,"is_pvip":false,"replies":[{"id":"113440","content":"《软件设计之美》","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1632312590,"ip_address":"","comment_id":313182,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632302919","product_id":100085101,"comment_content":"关于应用服务的设计，老师哪个专栏或文章里面有详细说明？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527263,"discussion_content":"《软件设计之美》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632312590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312541,"user_name":"🌿","can_delete":false,"product_type":"c1","uid":2066322,"ip_address":"","ucode":"5F819BBD11054E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/87/92/9ac4c335.jpg","comment_is_top":false,"comment_ctime":1631858126,"is_pvip":false,"replies":[{"id":"113441","content":"没有太理解你的问题，TodoItem 的服务放到 TodoItemService 不是很正常的做法吗？","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1632312881,"ip_address":"","comment_id":312541,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1631858126","product_id":100085101,"comment_content":"老师，例子中，TodoItemService目前为止包含了TodoItem所有相关业务操作方法，但有些资料推荐将这些业务方法提取到单独Service里面，请问这2种方式各有什么优点，在实际开发中这2种方式各在什么情况下使用？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527010,"discussion_content":"没有太理解你的问题，TodoItem 的服务放到 TodoItemService 不是很正常的做法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632312881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2066322,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/87/92/9ac4c335.jpg","nickname":"🌿","note":"","ucode":"5F819BBD11054E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395534,"discussion_content":"我的意思是todoitemservice里面的3个方法，有些资料里面推荐分成3个service，比如：addtodoitemservice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632312992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2066322,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/87/92/9ac4c335.jpg","nickname":"🌿","note":"","ucode":"5F819BBD11054E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544109,"discussion_content":"常见情况下，一个Service是对一个实体的，这个实体的相关操作都放到这个Service中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641397473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":395534,"ip_address":""},"score":544109,"extra":""}]}]},{"had_liked":false,"id":311518,"user_name":"树懒先生","can_delete":false,"product_type":"c1","uid":1053292,"ip_address":"","ucode":"7749020DFA1127","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/6c/0f0cf9eb.jpg","comment_is_top":false,"comment_ctime":1631265750,"is_pvip":false,"replies":[{"id":"112885","content":"然","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631317885,"ip_address":"","comment_id":311518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631265750","product_id":100085101,"comment_content":"so, Service实现就在Service层。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526645,"discussion_content":"然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631317885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}