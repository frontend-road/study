{"id":406555,"title":"02｜词法分析：识别Token也可以很简单吗？","content":"<p>你好，我是宫文学。</p><p>上一节课，我们用了很简单的方法就实现了语法分析。但当时，我们省略了词法分析的任务，使用了一个Token的列表作为语法分析阶段的输入，而这个Token列表呢，就是词法分析的结果。</p><p>其实，编译器的第一项工作就是词法分析，也是你实现一门计算机语言的头一项基本功。今天，我们就来补补课，学习一下怎么实现词法分析功能，词法分析也就是把程序从字符串转换成Token串的过程。</p><p>词法分析难不难呢？我们来对比一下，语法分析的结果是一棵AST树，而词法分析的结果是一个列表。直观上看，列表就要比树结构简单一些，所以你大概会猜想到，词法分析应该会更简单一些。</p><p>那么，具体来说，<strong>词法分析要用什么算法呢？词法是不是也像语法一样有规则？词法规则又是如何表达的？这一节课，我会带着你实现一个词法分析器，来帮你掌握这些技能。</strong></p><p>在这里，我有个好消息告诉你。你在上一节课学到的语法分析的技能，很多可以用在词法分析中，这会大大降低你的学习难度。好了，我们开始了。</p><h2>词法分析的任务</h2><p>你已经知道，词法分析的任务就是把程序从字符串转变成Token串，那它该怎么实现呢？我们这里先不讲具体的算法，先来看看下面这张示意图，分析一下，我们人类的大脑是如何把这个字符串断成一个个Token的？<br>\n<img src=\"https://static001.geekbang.org/resource/image/bb/9d/bb2999fdb744515f715eac0d0eb4559d.jpg?wh=1920x851\" alt=\"图片\" title=\"图1：词法分析是把字符串转变为Token串\"><br>\n你可能首先会想到，借助字符串中的空白字符（包括空格、回车、换行），把这个字符串截成一段段的，每一段作为一个Token，行不行？</p><!-- [[[read_end]]] --><p>按照这个方法，function关键字可以被单独识别出来。但是你看，我们还有一些圆括号、花括号等等，这些符号跟前一个单词之间并没有空格或回车，我们怎么把它们断开呢？</p><p>OK，你可以说，凡是遇到圆括号、花括号、加号、减号、点号等这些符号，我们把它们单独作为Token识别出来就好了。比如，对于cat.weight这样的对象属性访问的场景，点符号就是一个单独的Token。</p><p>但是，你马上会发现这个规则仍然不能处理所有的情况，例如，对于一个浮点数的字面量“3.14”的情况，点符号是浮点数的一部分，不能作为单独的Token。我稍微解释一下，这里的字面量（Literal），是指写在程序中的常量值，包括整数值、浮点数值、字符串等。</p><p>此外，还有一些难处理的情况，比如像“==”、“+=”、“-=”、“- -”、“&amp;&amp;”这些由两个或两个以上字符构成的运算符，程序处理时是要跟“=”、“+”、“-”等区分开的。</p><p>再比如，在JavaScript/TypeScript中，十六进制的字面量用“0x”开头，里面有a到f的字母，比如0x1F4；八进制的字面量用“0”开头，后面跟0~7的数字；而二进制的字面量用“0b”开头，后面跟着0或1。</p><p>所以，你可以看到，做词法分析需要考虑的情况还挺多，不是用简单的一两个规则就能解决的，我们必须寻找一种系统性的解决方法。</p><p>在这里，为了让你对词法分析的任务有更全面的了解，我梳理了各种不同的处理工作，你可以看看下面这张表：<br>\n<img src=\"https://static001.geekbang.org/resource/image/ff/c1/fff3a97687d06a8062b94fcefee726c1.jpg?wh=1920x1080\" alt=\"图片\"><br>\n那么，如何用系统性的方法进行词法分析呢？</p><p>借助这节课一开头的提示，我们试一下能否用语法分析的方法来处理词法，也就是说<strong>像做语法分析一样，我们要先用一个规则来描述每个Token的词法，然后让程序基于词法规则来做处理。</strong></p><h2>词法规则</h2><p>同语法规则一样，我们可以用正则表达式来描述词法。在这里，标识符的规则是用字母开头，后面的字符可以是字母、数字或下划线，标识符的词法规则可以写成下面这样：</p><pre><code class=\"language-plain\">Identifier: [a-zA-Z_][a-zA-Z0-9_]* ;\n</code></pre><p>实际上，JavaScript的标识符是允许使用合法的Unicode字符的，我们这里做了简化。</p><p>看上去，词法规则跟上一节学过的语法规则没什么不同嘛，只不过词法的构成要素是字符，而语法的构成要素是Token。</p><p>表面上是这样，其实这里还是有一点不同的。实际上，词法规则使用的是正则文法（Formal Grammar），而语法规则使用的是上下文无关文法（Context-free Gammar，CFG）。正则文法是上下文无关文法的一个子集，至于对这两者差别的深入分析，我们还是放到后面的课上，这里我们先专注于完成词法分析功能。</p><p>我们再写一下前面讨论过的浮点数字面量的词法规则，这里同样是精简的版本，省略了指数部分、二进制、八进制以及十六进制的内容：</p><pre><code class=\"language-plain\">DecimalLiteral: IntegerLiteral '.' [0-9]* \n              | '.' [0-9]+\n              | IntegerLiteral \n              ;\nIntegerLiteral: '0' | [1-9] [0-9]* ;\n</code></pre><p>对于上面这个DecimalLiteral词法规则，我们总结一下有这几个特点：</p><ul>\n<li>一个合法的浮点数可以是好几种格式，3.14、.14、3等等都行；</li>\n<li>整数部分要么只有一个0，要么是1~9开头的数字；</li>\n<li>可以没有小数点前的整数部分，但这时候小数点后至少要有一位数字，否则这就只剩了一个点号了；</li>\n<li>也可以完全没有小数部分，只有整数部分。</li>\n</ul><p>好了，目前我们已经知道如何用词法规则来描述不同的Token了。接下来，我们要做的就是用程序实现这些词法规则，然后生成Token。</p><h2>用程序实现词法分析</h2><p>上节课我们在讲语法分析的时候，提到了递归下降算法。这个算法比较让人喜欢的一点是，程序结构基本上就是对语法规则的一对一翻译。</p><p>其实词法分析程序也是一样的，比如我们要识别一个浮点数，我们照样可以根据上述DecimalLiteral的几条规则一条条地匹配过去。</p><p>首先，我们匹配第一条规则，就是既有整数部分又有小数部分的情况；如果匹配不上，就尝试第二条规则，也就是以小数点开头的情况；如果还匹配不上，就尝试第三条，即只有整数部分的情况。只要这三条匹配里有一条成功，就意味着我们匹配浮点数成功。</p><p>我们来看看具体的程序实现：</p><pre><code class=\"language-plain\">if (this.isDigit(ch)){\n    this.stream.next();\n    let ch1 = this.stream.peek();\n    let literal:string = '';\n    //首先解析整数部分\n    if(ch == '0'){//暂不支持八进制、二进制、十六进制\n        if (!(ch1&gt;='1' &amp;&amp; ch1&lt;='9')){\n            literal = '0'; //整数部分只有0\n        }\n        else {报编译错误}\n    }\n    else if(ch&gt;='1' &amp;&amp; ch&lt;='9'){\n        literal += ch;\n        while(this.isDigit(ch1)){\n            ch = this.stream.next();\n            literal += ch;\n            ch1 = this.stream.peek();\n        }\n    }\n    //解析小数部分\n    if (ch1 == '.'){\n        literal += '.';\n        this.stream.next();\n        ch1 = this.stream.peek();\n        while(this.isDigit(ch1)){\n            ch = this.stream.next();\n            literal += ch;\n            ch1 = this.stream.peek();\n        }\n        return {kind:TokenKind.DecimalLiteral, text:literal};\n    }\n    else{\n        //返回一个整型直面量\n        return {kind:TokenKind.IntegerLiteral, text:literal};\n    }\n}\n//解析以.开头的小数，要求后面至少有一个数字\nelse if (ch == '.'){\n    this.stream.next();\n    let ch1 = this.stream.peek();\n    if (this.isDigit(ch1)){\n        //小数字面量\n        let literal = '.';\n        while(this.isDigit(ch1)){\n            ch = this.stream.next();\n            literal += ch;\n            ch1 = this.stream.peek();\n        }\n        return {kind:TokenKind.DecimalLiteral, text:literal};\n    }\n    else{\n        ...\n    }\n}\n</code></pre><p>如果浮点数匹配不成功呢？也没关系。其实计算机语言的词法规则分为很多条，有匹配浮点数的，也有匹配标识符的，还有匹配运算符的，等等。我们可以把这些词法规则依次匹配过去。只要某个规则匹配成功了，我们就算识别出了一种Token。</p><p>这么看来，<strong>词法分析的过程，就是依次匹配不同的词法规则的过程</strong>。匹配成功以后，就把这个Token从字符串中截下来，再去尝试匹配下一个Token。</p><p>这里有两个细节你要注意一下：一是当扫描到注释的时候，直接去掉，并不生成Token；第二是对于空白字符的处理，也是一样，直接去掉。所以整体的处理逻辑如下：</p><pre><code class=\"language-plain\">while (!EOF){\n  跳过空白字符；\n  如果是注释，丢弃掉；\n  尝试匹配词法规则1；\n  不成功，则回溯，尝试匹配词法规则2；\n  不成功，则回溯，尝试匹配词法规则3；\n  ...\n  直到成功匹配一个词法规则；\n}\n</code></pre><p>你根据这个逻辑，就可以写出整个词法分析程序了！</p><p>不过，你可能很快就发现了一个问题，我们的词法规则很多，可能有几十条甚至上百条。如果每次都从头开始依次尝试，会造成很多浪费，词法分析的性能也会很低，那我们有没有什么办法提速呢？</p><p>接下来，我们就把算法优化一下。</p><h2>有限自动机：提升词法分析性能</h2><p>怎么优化呢？你可能马上会想到一个好办法：虽然词法规则很多，但大部分Token都可以通过开头的第一个字符区分开。</p><ul>\n<li>如果第一个字符是-号，那么只可能是三种Token：- -，-=和-；</li>\n<li>如果第一个字符是一个字母，那么只可能是标识符或各种关键字；</li>\n<li>如果第一个字符是0，那么必然是十六进制字面量、八进制字面量或者二进制字面量。</li>\n</ul><p>你看，通过预读一个字符，程序可以马上缩小选择范围，使得性能大大提升。</p><p>尝到甜头以后，我们马上可以想到，如果需要的话，能不能再继续预读第二个字符，进一步确定是哪个Token呢？</p><p>当然是可以的。比如，对于- -、-=和-这三个Token，我们可以再往下预读一个字符。如果是-号，那么就收获一个- -Token；如果是=，那么就收获一个-=Token；除了这两种之外，后面不管是什么字符，我们都把-号单独作为一个Token提取出来。</p><p>我们把这个判断过程画成一个状态迁移图，这个状态迁移图我们叫做一个有限自动机。<br>\n<img src=\"https://static001.geekbang.org/resource/image/15/9f/15f7d80cf68cd903df93e5f15128ca9f.jpg?wh=1920x1027\" alt=\"图片\" title=\"图2：解析-、- -和==三种Token的有限自动机\"><br>\n恭喜你，到这里你已经在不知不觉间，实现出了教科书级的方法，也就是通过有限自动机（Finite-State Automata，FSA）来做词法分析了。</p><p>有限自动机可以分为两种。如果一个有限自动机针对每个输入，都会发生一次确定的迁移，这种有限自动机就被叫做确定性有限自动机（Determinisitic Finite-State Automata, DFA）。</p><p>与之对应的，是另一种有限自动机，叫做非确定性的有限自动机（Non-deterministic Finite-State Automata，NFA）。它在某些状态下，针对一个输入可能会迁移到不止一个状态，或者在没有任何输入的情况下，也会从一个状态迁移到另一个状态。</p><p>不过，任何一个NFA，都可以通过一个算法转换成DFA，这个算法你可以参见<a href=\"https://time.geekbang.org/column/article/137286\">《编译原理之美》</a>中的算法篇。</p><p>言归正传，我们刚才已经画出了能识别三种Token的有限自动机，我们还可以把这个有限自动机扩大，像下图一样增加对多行注释、/、/=、标识符、关键字和空白字符的处理能力。<br>\n<img src=\"https://static001.geekbang.org/resource/image/c3/16/c30a3db73cc926f9086d54cc4db99c16.jpg?wh=1920x1080\" alt=\"图片\" title=\"图3：增加了处理能力的有限自动机\"><br>\n你还可以继续扩展这个图，直到它能够提取所有的Token为止。有了这个大图之后，你就可以照着这个图写程序了。我这里给出了一个程序片段，供你参考。</p><pre><code class=\"language-plain\">//从字符串流中获取一个新Token。\nprivate getAToken():Token{\n    this.skipWhiteSpaces();\n    if (this.stream.eof()){\n        return {kind:TokenKind.EOF, text:\"\"};\n    }\n    else{\n        //预读一个Token\n        let ch:string = this.stream.peek();\n        //处理标识符（包含关键字）\n        if (this.isLetter(ch) || ch == '_'){\n            return this.parseIdentifer();\n        }\n        //处理字符串字面量\n        else if (ch == '\"'){\n            return this.parseStringLiteral();\n        }\n        else if (ch == '(' || ch == ')' || ch == '{' || ch == '}' || ch == '[' || ch == ']' || \n                 ch == ',' || ch == ';' || ch == ':' || ch == '?' || ch == '@'){\n            this.stream.next();\n            return {kind:TokenKind.Seperator,text:ch};\n        }\n        //处理多行注释、/、/=\n        else if (ch == '/'){\n            this.stream.next();\n            let ch1 = this.stream.peek();\n            if (ch1 == '*'){\n                this.skipMultipleLineComments();\n                return this.getAToken();\n            }\n            else if (ch1 == '/'){\n                this.skipSingleLineComment();\n                return this.getAToken();\n            }\n            else if (ch1 == '='){\n                this.stream.next();\n                return {kind:TokenKind.Operator,text:'/='};\n            }\n            else{\n                return {kind:TokenKind.Operator,text:'/'};\n            }\n        }\n        //处理+、+=、++\n        else if (ch == '+'){\n            this.stream.next();\n            let ch1 = this.stream.peek();\n            if (ch1 == '+'){\n                this.stream.next();\n                return {kind:TokenKind.Operator,text:'++'};\n            }else if (ch1 == '='){\n                this.stream.next();\n                return {kind:TokenKind.Operator,text:'+='};\n            }\n            else{\n                return {kind:TokenKind.Operator,text:'+'};\n            }\n        }\n        //省略了更多的情况……\n        else{ \n            //暂时去掉不能识别的字符\n            console.log(\"Unrecognized pattern meeting ': \" +ch+\"', at\" + this.stream.line + \" col: \" + this.stream.col);\n            this.stream.next();\n            return this.getAToken();\n        }\n    }\n}\n</code></pre><p>如果你仔细看上面的图3，你会发现，我的标识符和关键字都是统一处理的，因为标识符的词法其实已经包含了关键字。<strong>做词法分析的一个最佳实践，就是先把标识符和关键字统一提取出来，然后再从里面把关键字单独提取出来就行了。</strong></p><p>好了，前面我们通过“预读”的思路，升级了词法分析的算法，使之能够正确地提取出所有的Token。在这个过程中，我们已经不知不觉摸索出了编译原理教科书中都会讲的有限自动机算法。</p><p>可是这还没完。你可能会想到，采用有限自动机的情况下，程序每次都可以根据下一个输入，准确地确定接下来应该执行的逻辑，完全规避了回溯的问题。那我们是不是也可以用这个思路来提升语法分析的效率呢？好想法，我们现在就来试试看。</p><h2>思路迁移：提升语法分析效率</h2><p>我们先来回顾一下在语法分析中，回溯是怎么发生的，以及它会造成怎样的性能上的损失。</p><p>在语法分析的递归下降算法中，当一个语法规则由多个子规则构成时，我们采用的是挨个试的方法来进行匹配。比如，首先试一下某语句是否是一个函数声明，接着试一下它是否是一个函数调用。</p><p>在匹配某个语法规则失败的时候，我们需要把已经消化掉的Token还回去，恢复到没做匹配之前的状态，这个过程叫做回溯（Backtracking）。</p><p>由于整个算法是递归下降的，某一级的匹配失败也可能会导致上一级的失败，从而导致逐级回溯。比如，我们用下面的表达式的语法规则去匹配2+3*5的时候，就会发生逐级回溯的现象：</p><pre><code class=\"language-plain\">//加法表达式，可以是一个乘法表达式，或者是一个乘法表达式+另一个加法表达式\nadd : mul \n    | mul '+' add\n    ;\n//乘法表达式，可以是一个基础表达式，或者是一个基本表达式*另一个乘法表达式    \nmul : pri \n    | pri '*' mul \n    ;\n//基础表达式，可以是一个整形字面量，或者是括号括起来的一个加法表达式\npri : IntLiteral \n    | '(' add ')'\n    ;\n</code></pre><p>匹配过程是这样的：</p><pre><code class=\"language-plain\">2+3*5符合add规则吗？\n  -&gt;2+3*5符合mul规则吗？\n    -&gt;2+3*5符合pri规则吗？\n      -&gt;2+3*5符合IntLiteral吗？不符合，因为它显然不只是一个整数常量\n      -&gt;2+3*5符合'('add')'规则吗？不符合，因为第一个Token不是'('\n    -&gt;回溯到mul，去尝试第二个选项\n    -&gt;2+3*5符合pri '*' mul吗？\n      -&gt;匹配一个pri\n        -&gt;匹配一个IntLiteral，成功\n      -&gt;再匹配一个'*'，失败，遇到的是'+'\n  -&gt;回溯到add，去尝试第二个选项\n  -&gt;2+3*5符合mul '+' add吗？\n    -&gt;匹配一个mul\n      -&gt;匹配一个pri\n        -&gt;匹配一个IntLiteral,成功\n    -&gt;匹配一个'+'，成功\n    -&gt;匹配一个add\n    接下来，又回遇到一开头使用add规则的那种回溯的情形\n    ...        \n</code></pre><p>在这个例子中，我们还只是采用了3级嵌套的语法，如果语法的层次更多的话，由回溯造成的无用功就更多。从这里，你应该能体会到回溯的危害了。</p><p>不过，受到词法分析中预读字符的启发，我们在语法分析中也可以通过预读一个Token可以减少尝试的次数。比如，如果第一个Token是“function”关键字，那肯定是要匹配一个函数声明，这就不用考虑其他选项了，这不就可以提高性能了吗？</p><p>确实是这样的。在语法分析中，我们经常可以遇到有多个语法规则可供选择的情况。比如，在上一节的例子中，statement就有两种可能性，这还是简化的情况；在完整的语法规则中，statement有20多种可能性，像if语句、各种循环语句、各种声明等，都属于statement。在这种情况下，预读所带来的性能改善就非常可观了！</p><p><img src=\"https://static001.geekbang.org/resource/image/36/e4/364c5f9f20b8b5d04396ef92409fbae4.png?wh=616x1338\" alt=\"图片\"></p><p>为了通过预读实现性能的优化，我们需要知道每个语法规则开头的Token都可能有哪些。比如，if语句永远是以if开头的，这个比较简单。但有的语法规则就比较复杂一些，比如表达式语句，它本身就是由很多子规则构成的，所以其第一个Token有很多可能：</p><pre><code class=\"language-plain\">++i;   //第一个Token是++\nfoo(); //第一个Token是一个标识符\n\"Hello World\"; //第一个Token是一个字面量 \n(2+3); //第一个Token是括号       \n</code></pre><p>这怎么办呢？也好办。我们把表达式语句所有可能出现的第一个Token的集合，叫做First集合。</p><p>对于statement来说，我们可以求出每个子规则的First集合，只要所有的这些集合都没有交集，那么我们总是可以通过预读一个Token来决定采用哪条子规则的。</p><p>如果整个语法规则都只需要预读一个Token就可以实现，那么我们把这个语法规则叫做LL(1)文法，而我们刚才说到的通过预读来唯一确定分支路径的算法，就是LL(1)算法，这个算法避免了由于回溯而导致的性能开销。</p><p>不过，对于LL两个字母的含义，我们留到下节课再讲，你现在只要记住这种算法名称叫做LL算法就好了。LL(1)中的1，意思是需要预读一个Token。</p><p>另外，LL算法还有一种特殊情况需要处理，比如语句块中可以有一个语句列表（statementLIst），也可能是一个空语句块：</p><pre><code class=\"language-plain\">block\n    : '{' statementList? '}'\n    ;\nstatementList\n    : statement+\n    ;\n</code></pre><p>我们在解析语句块的时候，取出了“{”以后，后面可能是一个语句列表（statementList），也有可能直接遇到“}”，这就意味着这是一个空语句块，也就是“{}”。</p><p>那这个时候呢，我们在程序里要多加一个判断：如果预读的Token在statementList的First集合里，那么就要去解析一个statementList；而如果遇到的是“}”，那就没必要了。</p><p>由于这个“}”是出现在statemtnList之后的，我们可以说“}”属于statementList的Follow集合。我们根据statemntList的First和Follow集合，就能解决语法规则中statementList后面跟一个?号的情况。除了?号，在处理*号和+号的时候，也都会需要用到Follow集合。</p><p>总结起来，完整的LL算法，需要用到每个语法规则的First和Follow集合，来确定我们应该采用哪个子规则的分支，从而避免回溯，实现性能上的提升。</p><h2>课程小结</h2><p>好了，这一节课就先到这里了。这节课，我们不仅学到了如何做词法分析，还把语法分析的技能又提升了一级。</p><p>总结一下，词法分析也可以使用EBNF来描述词法规则，并且也可以使用类似递归下降的算法。不过，通过预读字符，我们可以降低尝试的次数。最终，通过构造一个有限自动机，我们可以对每一个输入都做一个确定的状态转移，从而高效地实现词法分析。</p><p>接着，我们把“预读”的思维放到了语法分析中的递归下降算法上，又介绍了First集合和Follow集合的概念，借助这两个集合，我们不需要回溯，也能够实现语法分析，从而大大提高了语法分析的效率。</p><h2>思考题</h2><p>最后我给你出了一个思考题。你看，我们在程序里需要处理负数字面量，比如-3。你认为，负数的负号应该是作为运算符来处理，分别解析成一个-号和一个字面量3，还是把-3整体作为一个字面量识别出来呢？为什么？</p><p>欢迎你和我一起学习编程语言，也欢迎你将这门课分享给更多对编程语言感兴趣的朋友。我是宫文学，我们下节课见。</p><h2>资源链接</h2><p><a href=\"https://gitee.com/richard-gong/craft-a-language/blob/master/02/play.ts\">这节课的示例代码在这里！</a></p>","comments":[{"had_liked":false,"id":306777,"user_name":"yjhmelody","can_delete":false,"product_type":"c1","uid":2083858,"ip_address":"","ucode":"F12A61542F40DD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cc/12/3d15531b.jpg","comment_is_top":false,"comment_ctime":1628697317,"is_pvip":false,"replies":[{"id":"111247","content":"答案在第六节的正文里，在这里我就不说了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628932291,"ip_address":"","comment_id":306777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10218631909","product_id":100085201,"comment_content":"首先考虑是否有一元运算符-，没有则为整体解析。然后考虑支不支持该运算符的重载，如果有则可能分开解析更好。其他情况均可以，取决于实现者如何看待这个-号","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524912,"discussion_content":"答案在第六节的正文里，在这里我就不说了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628932291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356954,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1662723296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662723296","product_id":100085201,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":350372,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1656857169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656857169","product_id":100085201,"comment_content":"老师能不能把每节课的要求列一下，因为不懂得太多，不知道理解到什么程度可以进入下一节","like_count":0},{"had_liked":false,"id":343801,"user_name":"Jack_1024","can_delete":false,"product_type":"c1","uid":2690027,"ip_address":"","ucode":"D6B1B5B24F2BEF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/icHMBoxO5zDicEgIOkFsZCsbicMAeaW3zd7e6YjJJKfvwu7Q8E3wtpXojfdClOeCGrPicJ16FBpEMicfpuDiariajibDSg/132","comment_is_top":false,"comment_ctime":1651061175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651061175","product_id":100085201,"comment_content":"这样实现是自举对吗？","like_count":0},{"had_liked":false,"id":330624,"user_name":"Gaollard","can_delete":false,"product_type":"c1","uid":1378779,"ip_address":"","ucode":"1B200F5E73C3E1","user_header":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","comment_is_top":false,"comment_ctime":1642073367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642073367","product_id":100085201,"comment_content":"我觉得都可以，比如 -5 - (20 * 2) 在词法分析阶段中 -5 可以作为一个 token，而后面的 &quot;-&quot; 可以被解析为 unary operator。","like_count":0},{"had_liked":false,"id":317810,"user_name":"喵咪爱吃肉","can_delete":false,"product_type":"c1","uid":1901074,"ip_address":"","ucode":"6CEA983AFF58AF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/02/12/ce3dc4c8.jpg","comment_is_top":false,"comment_ctime":1634976933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634976933","product_id":100085201,"comment_content":"能否给出一些运行的例子呢？这样运行代码时通过这个例子才更加理解，比如这个章节我大概理解是要干什么，但是没有一个测试用例，感觉有点茫然（可能是我比较笨～","like_count":0},{"had_liked":false,"id":312124,"user_name":"船","can_delete":false,"product_type":"c1","uid":2278641,"ip_address":"","ucode":"90FBC459D46AD6","user_header":"https://static001.geekbang.org/account/avatar/00/22/c4/f1/536fcb23.jpg","comment_is_top":false,"comment_ctime":1631631526,"is_pvip":false,"replies":[{"id":"113186","content":"02的代码，需要在命令行里，比01的play.js 在执行时 多输入一个命令行参数：node play.js xxx.js 。其中 xxx.js 是你要parse的js文件。","user_name":"作者回复","user_name_real":"然而","uid":"2537474","ctime":1631780136,"ip_address":"","comment_id":312124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631631526","product_id":100085201,"comment_content":"为什么在用cmd运行这节代码时会出现？<br>Usage: node D:\\craft-a-language\\02\\play.js FILENAME","like_count":0,"discussions":[{"author":{"id":2537474,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b8/02/b538e9f4.jpg","nickname":"然而","note":"","ucode":"F1F1E093925934","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526869,"discussion_content":"02的代码，需要在命令行里，比01的play.js 在执行时 多输入一个命令行参数：node play.js xxx.js 。其中 xxx.js 是你要parse的js文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631780136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307171,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1628920879,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1628920879","product_id":100085201,"comment_content":"谁能解释下这是js的什么写法？<br><br>var TokenKind;<br>(function (TokenKind) {<br>    TokenKind[TokenKind[&quot;Keyword&quot;] = 0] = &quot;Keyword&quot;;<br>    TokenKind[TokenKind[&quot;Identifier&quot;] = 1] = &quot;Identifier&quot;;<br>    TokenKind[TokenKind[&quot;StringLiteral&quot;] = 2] = &quot;StringLiteral&quot;;<br>    TokenKind[TokenKind[&quot;Seperator&quot;] = 3] = &quot;Seperator&quot;;<br>    TokenKind[TokenKind[&quot;Operator&quot;] = 4] = &quot;Operator&quot;;<br>    TokenKind[TokenKind[&quot;EOF&quot;] = 5] = &quot;EOF&quot;;<br>})(TokenKind || (TokenKind = {}));<br>;","like_count":0,"discussions":[{"author":{"id":1037208,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d3/98/60d13550.jpg","nickname":"Bryan","note":"","ucode":"BA9D6A278609F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389969,"discussion_content":"去看 ts 版本的代码，这是一个编译产物而已…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629546031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388854,"discussion_content":"这是 ts 枚举 类型的便利那个编译成js 的结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629014684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1628867,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","nickname":"有学识的兔子","note":"","ucode":"D1D654B1562FC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388831,"discussion_content":"我自己回答下：这是IIFE 立即调用函数表达式，即一个在定义时就会被立即执行的匿名函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629003570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306865,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1628755275,"is_pvip":false,"replies":[{"id":"111249","content":"答案在第六节的正文里，在这里我就不说了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628932361,"ip_address":"","comment_id":306865,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628755275","product_id":100085201,"comment_content":"-3作为一个负数字面量，会减少一个减法表达式，从这章的内容看，语法分析过程中会因为回溯会影响效率，减少不必要的规则表达式也是提升效率一种方式。从词法分析上把-3当作一个token识别出来，性能消耗可能并不多。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524953,"discussion_content":"答案在第六节的正文里，在这里我就不说了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628932361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306759,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1628692482,"is_pvip":false,"replies":[{"id":"111129","content":"你说的这两项任务，可能仅仅做词法分析是不够的，也会有语法分析和语义分析。<br>以JSON为例，每种JSON文件都会有自己的Schema，这些Schema往往也可以用EBNF描述，它就表达了某一类JSON的语法规则。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628761971,"ip_address":"","comment_id":306759,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1628692482","product_id":100085201,"comment_content":"如果要自己实现一个JSON parse、或者PDF parse，只需要识别Token即可，整个过程和写一个有限自动机一样，这些parse比写一门语言要来的简单吧<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524902,"discussion_content":"你说的这两项任务，可能仅仅做词法分析是不够的，也会有语法分析和语义分析。\n以JSON为例，每种JSON文件都会有自己的Schema，这些Schema往往也可以用EBNF描述，它就表达了某一类JSON的语法规则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628761971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1378779,"avatar":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","nickname":"Gaollard","note":"","ucode":"1B200F5E73C3E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545890,"discussion_content":"JSON 的解析确实比较简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642072771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306610,"user_name":"王","can_delete":false,"product_type":"c1","uid":1421591,"ip_address":"","ucode":"276FB133EF9627","user_header":"https://static001.geekbang.org/account/avatar/00/15/b1/17/4e533c1b.jpg","comment_is_top":false,"comment_ctime":1628644696,"is_pvip":false,"replies":[{"id":"111250","content":"答案在第六节的正文里，在这里我就不说了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628932376,"ip_address":"","comment_id":306610,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1628644696","product_id":100085201,"comment_content":"老师，我觉得应该把-3整体当做一个字面量解析。如果解析成一个-和一个3的话，就是减法运算了，减法是需要两个数的。如果非要解析为减法运算，是不是被减数还得默认设置为0","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524835,"discussion_content":"答案在第六节的正文里，在这里我就不说了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628932376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229516,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","nickname":"蓝士钦","note":"","ucode":"726EB5C8EF1249","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388304,"discussion_content":"还要考虑计算的优先级和结合性的问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628687976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253438,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/3e/e2f1b2af.jpg","nickname":"I WANN BE THAT GUY","note":"","ucode":"2B51E6A5452617","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388302,"discussion_content":"并不一定，-3,也可以是 unary expression","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628687541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306590,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1628622430,"is_pvip":true,"replies":[{"id":"111251","content":"答案在第六节的正文里。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628932388,"ip_address":"","comment_id":306590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628622430","product_id":100085201,"comment_content":"把-3作为整体，计算机中负数是用补码来表示负数的。这样把字符转换成数字方便了。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524822,"discussion_content":"答案在第六节的正文里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628932388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}