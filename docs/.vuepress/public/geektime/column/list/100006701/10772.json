{"id":10772,"title":"第29讲 | Java内存模型中的happen-before是什么？","content":"<p>Java语言在设计之初就引入了线程的概念，以充分利用现代处理器的计算能力，这既带来了强大、灵活的多线程机制，也带来了线程安全等令人混淆的问题，而Java内存模型（Java Memory Model，JMM）为我们提供了一个在纷乱之中达成一致的指导准则。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">Java内存模型中的happen-before是什么？</span></p>\n<h2>典型回答</h2>\n<p>Happen-before关系，是Java内存模型中保证多线程操作可见性的机制，也是对早期语言规范中含糊的可见性概念的一个精确定义。</p>\n<p>它的具体表现形式，包括但远不止是我们直觉中的synchronized、volatile、lock操作顺序等方面，例如：</p>\n<ul>\n<li>\n<p>线程内执行的每个操作，都保证happen-before后面的操作，这就保证了基本的程序顺序规则，这是开发者在书写程序时的基本约定。</p>\n</li>\n<li>\n<p>对于volatile变量，对它的写操作，保证happen-before在随后对该变量的读取操作。</p>\n</li>\n<li>\n<p>对于一个锁的解锁操作，保证happen-before加锁操作。</p>\n</li>\n<li>\n<p>对象构建完成，保证happen-before于finalizer的开始动作。</p>\n</li>\n<li>\n<p>甚至是类似线程内部操作的完成，保证happen-before其他Thread.join()的线程等。</p>\n</li>\n</ul><!-- [[[read_end]]] -->\n<p>这些happen-before关系是存在着传递性的，如果满足a happen-before b和b happen-before c，那么a happen-before c也成立。</p>\n<p>前面我一直用happen-before，而不是简单说前后，是因为它不仅仅是对执行时间的保证，也包括对内存读、写操作顺序的保证。仅仅是时钟顺序上的先后，并不能保证线程交互的可见性。</p>\n<h2>考点分析</h2>\n<p>今天的问题是一个常见的考察Java内存模型基本概念的问题，我前面给出的回答尽量选择了和日常开发相关的规则。</p>\n<p>JMM是面试的热点，可以看作是深入理解Java并发编程、编译器和JVM内部机制的必要条件，但这同时也是个容易让初学者无所适从的主题。对于学习JMM，我有一些个人建议：</p>\n<ul>\n<li>\n<p>明确目的，克制住技术的诱惑。除非你是编译器或者JVM工程师，否则我建议不要一头扎进各种CPU体系结构，纠结于不同的缓存、流水线、执行单元等。这些东西虽然很酷，但其复杂性是超乎想象的，很可能会无谓增加学习难度，也未必有实践价值。</p>\n</li>\n<li>\n<p>克制住对“秘籍”的诱惑。有些时候，某些编程方式看起来能起到特定效果，但分不清是实现差异导致的“表现”，还是“规范”要求的行为，就不要依赖于这种“表现”去编程，尽量遵循语言规范进行，这样我们的应用行为才能更加可靠、可预计。</p>\n</li>\n</ul>\n<p>在这一讲中，兼顾面试和编程实践，我会结合例子梳理下面两点：</p>\n<ul>\n<li>\n<p>为什么需要JMM，它试图解决什么问题？</p>\n</li>\n<li>\n<p>JMM是如何解决可见性等各种问题的？类似volatile，体现在具体用例中有什么效果？</p>\n</li>\n</ul>\n<p>注意，专栏中Java内存模型就是特指JSR-133中重新定义的JMM规范。在特定的上下文里，也许会与JVM（Java）内存结构等混淆，并不存在绝对的对错，但一定要清楚面试官的本意，有的面试官也会特意考察是否清楚这两种概念的区别。</p>\n<h2>知识扩展</h2>\n<p><strong>为什么需要JMM，它试图解决什么问题？</strong></p>\n<p>Java是最早尝试提供内存模型的语言，这是简化多线程编程、保证程序可移植性的一个飞跃。早期类似C、C++等语言，并不存在内存模型的概念（C++ 11中也引入了标准内存模型），其行为依赖于处理器本身的<a href=\"https://en.wikipedia.org/wiki/Memory_ordering\">内存一致性模型</a>，但不同的处理器可能差异很大，所以一段C++程序在处理器A上运行正常，并不能保证其在处理器B上也是一致的。</p>\n<p>即使如此，最初的Java语言规范仍然是存在着缺陷的，当时的目标是，希望Java程序可以充分利用现代硬件的计算能力，同时保持“书写一次，到处执行”的能力。</p>\n<p>但是，显然问题的复杂度被低估了，随着Java被运行在越来越多的平台上，人们发现，过于泛泛的内存模型定义，存在很多模棱两可之处，对synchronized或volatile等，类似指令重排序时的行为，并没有提供清晰规范。这里说的指令重排序，既可以是<a href=\"https://en.wikipedia.org/wiki/Instruction_scheduling\">编译器优化行为</a>，也可能是源自于现代处理器的<a href=\"https://en.wikipedia.org/wiki/Out-of-order_execution\">乱序执行</a>等。</p>\n<p>换句话说：</p>\n<ul>\n<li>\n<p>既不能保证一些多线程程序的正确性，例如最著名的就是双检锁（Double-Checked Locking，DCL）的失效问题，具体可以参考我在<a href=\"http://time.geekbang.org/column/article/8624\">第14讲</a>对单例模式的说明，双检锁可能导致未完整初始化的对象被访问，理论上这叫并发编程中的安全发布（Safe Publication）失败。</p>\n</li>\n<li>\n<p>也不能保证同一段程序在不同的处理器架构上表现一致，例如有的处理器支持缓存一致性，有的不支持，各自都有自己的内存排序模型。</p>\n</li>\n</ul>\n<p>所以，Java迫切需要一个完善的JMM，能够让普通Java开发者和编译器、JVM工程师，能够<strong>清晰地</strong>达成共识。换句话说，可以相对简单并准确地判断出，多线程程序什么样的执行序列是符合规范的。</p>\n<p>所以：</p>\n<ul>\n<li>\n<p>对于编译器、JVM开发者，关注点可能是如何使用类似<a href=\"https://en.wikipedia.org/wiki/Memory_barrier\">内存屏障</a>（Memory-Barrier）之类技术，保证执行结果符合JMM的推断。</p>\n</li>\n<li>\n<p>对于Java应用开发者，则可能更加关注volatile、synchronized等语义，如何利用类似happen-before的规则，写出可靠的多线程应用，而不是利用一些“秘籍”去糊弄编译器、JVM。</p>\n</li>\n</ul>\n<p>我画了一个简单的角色层次图，不同工程师分工合作，其实所处的层面是有区别的。JMM为Java工程师隔离了不同处理器内存排序的区别，这也是为什么我通常不建议过早深入处理器体系结构，某种意义上来说，这样本就违背了JMM的初衷。<br />\n<img src=\"https://static001.geekbang.org/resource/image/5d/e5/5d74ad650fa5d1cdf80df3b3062357e5.png?wh=755*445\" alt=\"\" /></p>\n<p><strong>JMM是怎么解决可见性等问题的呢？</strong></p>\n<p>在这里，我有必要简要介绍一下典型的问题场景。</p>\n<p>我在<a href=\"http://time.geekbang.org/column/article/10192\">第25讲</a>里介绍了JVM内部的运行时数据区，但是真正程序执行，实际是要跑在具体的处理器内核上。你可以简单理解为，把本地变量等数据从内存加载到缓存、寄存器，然后运算结束写回主内存。你可以从下面示意图，看这两种模型的对应。<br />\n<img src=\"https://static001.geekbang.org/resource/image/ff/61/ff8afc2561e8891bc74a0112905fed61.png?wh=665*420\" alt=\"\" /></p>\n<p>看上去很美好，但是当多线程共享变量时，情况就复杂了。试想，如果处理器对某个共享变量进行了修改，可能只是体现在该内核的缓存里，这是个本地状态，而运行在其他内核上的线程，可能还是加载的旧状态，这很可能导致一致性的问题。从理论上来说，多线程共享引入了复杂的数据依赖性，不管编译器、处理器怎么做重排序，都必须尊重数据依赖性的要求，否则就打破了正确性！这就是JMM所要解决的问题。</p>\n<p>JMM内部的实现通常是依赖于所谓的内存屏障，通过禁止某些重排序的方式，提供内存可见性保证，也就是实现了各种happen-before规则。与此同时，更多复杂度在于，需要尽量确保各种编译器、各种体系结构的处理器，都能够提供一致的行为。</p>\n<p>我以volatile为例，看看如何利用内存屏障实现JMM定义的可见性？</p>\n<p>对于一个volatile变量：</p>\n<ul>\n<li>\n<p>对该变量的写操作<strong>之后</strong>，编译器会插入一个<strong>写屏障</strong>。</p>\n</li>\n<li>\n<p>对该变量的读操作<strong>之前</strong>，编译器会插入一个<strong>读屏障</strong>。</p>\n</li>\n</ul>\n<p>内存屏障能够在类似变量读、写操作之后，保证其他线程对volatile变量的修改对当前线程可见，或者本地修改对其他线程提供可见性。换句话说，线程写入，写屏障会通过类似强迫刷出处理器缓存的方式，让其他线程能够拿到最新数值。</p>\n<p>如果你对更多内存屏障的细节感兴趣，或者想了解不同体系结构的处理器模型，建议参考JSR-133<a href=\"http://gee.cs.oswego.edu/dl/jmm/cookbook.html\">相关文档</a>，我个人认为这些都是和特定硬件相关的，内存屏障之类只是实现JMM规范的技术手段，并不是规范的要求。</p>\n<p><strong>从应用开发者的角度，JMM提供的可见性，体现在类似volatile上，具体行为是什么样呢？</strong></p>\n<p>我这里循序渐进的举两个例子。</p>\n<p>首先，前几天有同学问我一个问题，请看下面的代码片段，希望达到的效果是，当condition被赋值为false时，线程A能够从循环中退出。</p>\n<pre><code>// Thread A\nwhile (condition) {\n}\n\n// Thread B\ncondition = false;\n</code></pre>\n<p>这里就需要condition被定义为volatile变量，不然其数值变化，往往并不能被线程A感知，进而无法退出。当然，也可以在while中，添加能够直接或间接起到类似效果的代码。</p>\n<p>第二，我想举Brian Goetz提供的一个经典用例，使用volatile作为守卫对象，实现某种程度上轻量级的同步，请看代码片段：</p>\n<pre><code>Map configOptions;\nchar[] configText;\nvolatile boolean initialized = false;\n \n// Thread A\nconfigOptions = new HashMap();\nconfigText = readConfigFile(fileName);\nprocessConfigOptions(configText, configOptions);\ninitialized = true;\n \n// Thread B\nwhile (!initialized)\n  sleep();\n// use configOptions\n</code></pre>\n<p>JSR-133重新定义的JMM模型，能够保证线程B获取的configOptions是更新后的数值。</p>\n<p>也就是说volatile变量的可见性发生了增强，能够起到守护其上下文的作用。线程A对volatile变量的赋值，会强制将该变量自己和当时其他变量的状态都刷出缓存，为线程B提供可见性。当然，这也是以一定的性能开销作为代价的，但毕竟带来了更加简单的多线程行为。</p>\n<p>我们经常会说volatile比synchronized之类更加轻量，但轻量也仅仅是相对的，volatile的读、写仍然要比普通的读写要开销更大，所以如果你是在性能高度敏感的场景，除非你确定需要它的语义，不然慎用。</p>\n<p>今天，我从happen-before关系开始，帮你理解了什么是Java内存模型。为了更方便理解，我作了简化，从不同工程师的角色划分等角度，阐述了问题的由来，以及JMM是如何通过类似内存屏障等技术实现的。最后，我以volatile为例，分析了可见性在多线程场景中的典型用例。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？今天留给你的思考题是，给定一段代码，如何验证所有符合JMM执行可能？有什么工具可以辅助吗？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第28讲 | 谈谈你的GC调优思路?","id":10651},"right":{"article_title":"第30讲 | Java程序运行在Docker等容器环境有哪些新问题？","id":10975}},"comments":[{"had_liked":false,"id":19523,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":true,"comment_ctime":1533866450,"is_pvip":false,"replies":[{"id":"6856","content":"volatile只保证可见性","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1533995218,"ip_address":"","comment_id":19523,"utype":1}],"discussion_count":6,"race_medal":0,"score":"9.2233721801225994e+18","product_id":100006701,"comment_content":"杨老师，请教一个问题，望答复。<br>volatile boolean和atomicboolean 一样是原子性的吗？","like_count":34,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421879,"discussion_content":"volatile只保证可见性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533995218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397351,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/67/fcba0967.jpg","nickname":"zapup","note":"","ucode":"388D6BB5D7B137","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318592,"discussion_content":"volatile int state=1;\nstate++; // 此处不保证读、写原子性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603788620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097836,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","nickname":"随心而至","note":"","ucode":"31866865255101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340132,"discussion_content":"可以写程序验证的，并且可以在Java字节码和机器码层面来验证，可以参见我的一篇文章。https://www.jianshu.com/p/aa6a9a7035a9","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609912523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4833,"discussion_content":"volatile不能禁止指令重排？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565761527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1329547,"avatar":"https://static001.geekbang.org/account/avatar/00/14/49/8b/844e70df.jpg","nickname":"热心网友","note":"","ucode":"8779205D59C409","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6756,"discussion_content":"这里杨老师回答的意思主要是针对原子性来说的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567085692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4833,"ip_address":""},"score":6756,"extra":""},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307088,"discussion_content":"volatile就是用来禁止指令重排的，但这不等于原子性啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600492296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4833,"ip_address":""},"score":307088,"extra":""}]}]},{"had_liked":false,"id":16531,"user_name":"- -","can_delete":false,"product_type":"c1","uid":1090880,"ip_address":"","ucode":"BACB2763FD2D5D","user_header":"https://static001.geekbang.org/account/avatar/00/10/a5/40/ad00a484.jpg","comment_is_top":false,"comment_ctime":1532009128,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"259230046888","product_id":100006701,"comment_content":"个人觉得happens-before原则最难理解的就是和时间次序上的关系，就比如volatile变量的写操作happens-before其后的读操作，之前很难理解“其后”的含义，一直认为既然是先发生的操作，结果肯定对后续的操作可见啊，以至于认为这个原则是不是多余的。结合了jmm内存模型来看的话就很好理解了，一个操作完成，其结果只是在线程内可见的，在结果写回主存并被其他线程读取前，即使其他线程操作靠后，也无法看见其操作结果。所以才会有volatile、锁等一系列可见性原则的约束","like_count":61,"discussions":[{"author":{"id":1510177,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0b/21/f1aea35b.jpg","nickname":"let_me_go","note":"","ucode":"A5936F5C5E3D65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363905,"discussion_content":"深有同感,最开始觉得很多规定都是多此一举,是因为我一直站在了单线程的角度来看,认为很多规定本该如此,但是放在多线程的环境下,很多单线程下理所应到的事就不是那么理所应当了。思维提升","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1617325076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2302962,"avatar":"","nickname":"Geek_30bf18","note":"","ucode":"63DB0CA5C040F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377526,"discussion_content":"所以叫内存可见性，内存俩字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622695726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16313,"user_name":"Ab","can_delete":false,"product_type":"c1","uid":1039466,"ip_address":"","ucode":"8E9261782F025D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/6a/b5478b65.jpg","comment_is_top":false,"comment_ctime":1531878191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83136256815","product_id":100006701,"comment_content":"jmm可以从两个方面理解，一是抽象内存结构，jmm把内存结构抽象成主内存和线程本地内存两种，在计算时，从主内存中加载数据，在本地内存计算，然后在刷新到主内存，但这种模型有明显的一致性问题，二是jmm可以理解我一组保住内存可见性及成正确性的规范，因为这种模型存在明显的一致性问题，同时，由于java编译器指令重排序优化和cpu乱序执行优化的存在，使问题变得更加复杂，所以jmm基于内存屏障提供了类似sa if serial以及happens before的保障。从使用者的角度理解，jmm平衡了jvm工程师以及cpu工程师在性能上的需求和java程序员在简单性上的渴望，所以jmm在保证正确性的同时会最大限度的放宽对指令重排和乱序执行的限制。对于java程序员，jmm提供了如volatile和synchronized这样的顶层机制为程序员提供简单的编程模型。（参考老师的文章及java并发编程艺术 理解）","like_count":20},{"had_liked":false,"id":15664,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1531363337,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"57365938185","product_id":100006701,"comment_content":"刚看完文章，在看了下《深入JAVA虚拟机》的java内存模型章节，又加深点印象。这本书真不能像小说一样读！","like_count":14,"discussions":[{"author":{"id":1142198,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/b6/67f8f097.jpg","nickname":"L","note":"","ucode":"AFF206EF3DF651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562396,"discussion_content":"但是第一遍真的只能像读小说一样去读，要不然读不下去！！！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649818854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20020,"user_name":"蠢蠢欲动的腹肌","can_delete":false,"product_type":"c1","uid":1007326,"ip_address":"","ucode":"B10550BF463017","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/de/4e7ec66d.jpg","comment_is_top":false,"comment_ctime":1534216427,"is_pvip":false,"replies":[{"id":"7564","content":"对，这里有各种tricky的技巧","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1535038387,"ip_address":"","comment_id":20020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35893954795","product_id":100006701,"comment_content":"在网上看了下让双检锁生效的方法，除了用volatile修饰变量外，还有其他两种方式<br>1、用final 修饰变量<br>2、用本地线程的方式修复，即在创建对象时存取本地线程（final的），在get的时候再从本地取<br>","like_count":8,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422066,"discussion_content":"对，这里有各种tricky的技巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535038387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16317,"user_name":"Ab","can_delete":false,"product_type":"c1","uid":1039466,"ip_address":"","ucode":"8E9261782F025D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/6a/b5478b65.jpg","comment_is_top":false,"comment_ctime":1531879646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31596650718","product_id":100006701,"comment_content":"jmm可以从两个方面理解，第一个方面是jmm规范了一个抽象的内存结构，jmm运行时内存进行简化抽象得到了主内存和本地内存两块内存区域，在线程运行时，从主内存中加载数据到本地内存，在本地内存中完成计算后，在刷新到主内存。第二个方面是jmm可以理解我一组保证数据内存可见性和程序正确性的规则，由于这种内存模型存在很明显的数据一致性问题，再加上编译器的指令重排序和cpu乱序执行优化，使问题更加复杂了，而jmm就是通过类似内存屏障等手段保证了内存可见性问题以及在多线程环境下乱序优化和指令重排序带来的线程安全性问题。从使用者的角度理解，jmm实际上平衡了java程序员对简单性的渴望和jvm工程师cpu工程师对性能的追求的平衡，面向底层时，jmm在保证正确性的同时最大限度的放宽了对指令重排序和乱序执行优化的限制，面向上层jmm通过内存屏障实现了volatile和synchronized等内存语意，使程序员可以简单方便的应用这些特性来保证程序的程序的正确性。<br>","like_count":8},{"had_liked":false,"id":223511,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1591104457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27360908233","product_id":100006701,"comment_content":"volitaile的意义在于禁用缓存","like_count":7},{"had_liked":false,"id":20038,"user_name":"风轨","can_delete":false,"product_type":"c1","uid":1185844,"ip_address":"","ucode":"7B8A5233B61EB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/34/c082419c.jpg","comment_is_top":false,"comment_ctime":1534224331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27304028107","product_id":100006701,"comment_content":"先看了两遍，始终处于懵逼的状态，后来去把《深入理解java虚拟机》相关部分仔细阅读一下，再回来看终于看懂了！","like_count":7},{"had_liked":false,"id":272017,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1609912359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10199846951","product_id":100006701,"comment_content":"我之前翻译过JSR-133 Cookbook, 是中英文对照版的，英文不好的同学可以对照看看。<br>https:&#47;&#47;yellowstar5.cn&#47;direct&#47;The%20JSR-133%20Cookbook-chinese.html<br>","like_count":3},{"had_liked":false,"id":19482,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1533861539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10123796131","product_id":100006701,"comment_content":"1,验证出 “可见性问题”,这个很容复现<br>2,验证出“cpu指令优化重排”导致的如 双检锁 中对象未初始化完毕，即被使用问题。这个对象构造要慢，才容易复现<br>","like_count":2},{"had_liked":false,"id":134856,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1568943400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863910696","product_id":100006701,"comment_content":"配合深入理解Java虚拟机第12章食用，效果更佳","like_count":1},{"had_liked":false,"id":15614,"user_name":"甲韭","can_delete":false,"product_type":"c1","uid":1052321,"ip_address":"","ucode":"2E998B8CB17F4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/a1/152a5de1.jpg","comment_is_top":false,"comment_ctime":1531352657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826319953","product_id":100006701,"comment_content":"老师🙋‍♂️我有个问题：<br>有一个全局的ConcurrentHashMap&lt;String,Set&lt;Foo&gt;&gt;<br>Key是Foo的一个字符串属性<br>然后有一个方法<br>通过Foo.getStr() 以此为key判断是否存在map 中如果不存在就创建一个set添加到map<br>现在这个方法并发情况下第一次创建Set时会出现替换Set的问题，我想如何通过volitile解决？原谅学生愚钝.","like_count":1},{"had_liked":false,"id":315382,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1633872023,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1633872023","product_id":100006701,"comment_content":"jmm就是java内存模型规范，解决问题-<br>让程序员不需要特别关心底层cpu架构对于并发的影响。<br>jmm抽象了共享内存与工作内存，包含了一系列规则，如happen befor，只要遵循这个规范就可以解决多线程并发问题","like_count":0},{"had_liked":false,"id":307262,"user_name":"贝氏倭狐猴","can_delete":false,"product_type":"c1","uid":1100690,"ip_address":"","ucode":"0A89A70C48629C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/92/cfc1cfd3.jpg","comment_is_top":false,"comment_ctime":1628993409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628993409","product_id":100006701,"comment_content":"&quot;你可以简单理解为，把本地变量等数据从内存加载到缓存、寄存器，然后运算结束写回主内存。&quot;这句话有点疑问，因为从汇编指令来说，处理器也是可以接受主存作为单个操作数的。难道JVM的操作都是把主存拷入寄存器之后再操作，不用主存当成单个操作符的汇编指令？","like_count":0},{"had_liked":false,"id":305638,"user_name":"不归橙","can_delete":false,"product_type":"c1","uid":1319969,"ip_address":"","ucode":"4F3D84E9395F61","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/21/90b748a2.jpg","comment_is_top":false,"comment_ctime":1628081266,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1628081266","product_id":100006701,"comment_content":"二刷，感觉对“克制住对“秘籍”的诱惑”的描述不是很理解，老师可以举个例子吗？","like_count":0,"discussions":[{"author":{"id":1013056,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/40/279c1a86.jpg","nickname":"唐二哥","note":"","ucode":"43B1642C78A915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547205,"discussion_content":"面对问题很多时候有各种小技巧来解决，简称秘籍，但那些既不成体系，也没必要，不要沉迷其中自嗨，还是要走大路会比较顺。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642579960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296880,"user_name":"🐟🐙🐬🐆🦌🦍🐑🦃","can_delete":false,"product_type":"c1","uid":1531189,"ip_address":"","ucode":"2F954654BCE13B","user_header":"https://static001.geekbang.org/account/avatar/00/17/5d/35/b1eb964a.jpg","comment_is_top":false,"comment_ctime":1623209257,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623209257","product_id":100006701,"comment_content":"老师，线程在自己的工作内存中读写变量，变量是通过read load操作从主内存到工作内存的，在read原子操作说把变量从主内存读取到工作内存，以便随后的load操作，而load原子操作定为把从主内存read的变量load 工作内存的变量副本，这里read和load如何理解，实际上不就是吧内存的变量放入CPU高速缓存么，怎么就有2个操作，read和load","like_count":0},{"had_liked":false,"id":282148,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1615107478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615107478","product_id":100006701,"comment_content":"请问内存屏障和CPU fence指令是一个概念吗？看了好几篇文档，没有把两者区分开来。","like_count":0},{"had_liked":false,"id":272025,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1609913043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609913043","product_id":100006701,"comment_content":"为什么需要JMM？<br>不同CPU架构提供不同的内存屏障指令和内存一致性模型（主要由硬件工程师实现）；为了对上层隐藏各种CPU架构的不同，Doug Lea基于此又提出了JVM层面的LoadLoad，StoreStore等内存屏障（由JVM实现者实现）；然后JVM实现者则提供统一的Java内存模型（比如Java语言规范 第八版 17章）；然后我们这些普通的Java开发者就在这统一的Java内存模型上写跨平台的应用。<br>","like_count":0},{"had_liked":false,"id":192708,"user_name":"护爽使者","can_delete":false,"product_type":"c1","uid":1275464,"ip_address":"","ucode":"12DC35DD74671C","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/48/5ab89daa.jpg","comment_is_top":false,"comment_ctime":1584869159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584869159","product_id":100006701,"comment_content":"volatile 保证可见性，volatile 的 happens-before 怎么理解？","like_count":0},{"had_liked":false,"id":175159,"user_name":"S","can_delete":false,"product_type":"c1","uid":1518689,"ip_address":"","ucode":"2B02E9548DA952","user_header":"https://static001.geekbang.org/account/avatar/00/17/2c/61/bede8a20.jpg","comment_is_top":false,"comment_ctime":1580575723,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1580575723","product_id":100006701,"comment_content":"杨老师，请教个问题：<br>在说volatile可见性举的两个例子中，针对第一个，为什么在死循环中添加了一个System.out就会使死循环退出？这个System.out为啥会起到作用","like_count":1,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263200,"discussion_content":"不换行的print方法调用了java.io.PrintStream#write(String)，同样的synchronized(this)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589186847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263199,"discussion_content":"java.io.PrintStream#println的各种重载方法都调用了newLine()，而后者使用了synchronized(this)。此外println(String)方法一上来就会synchronized (this)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589186763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150218,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1573479949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573479949","product_id":100006701,"comment_content":"老师讲了JSR133里的1个规则, volatile","like_count":0},{"had_liked":false,"id":146375,"user_name":"ddddd🐳","can_delete":false,"product_type":"c1","uid":1451640,"ip_address":"","ucode":"EFEA2FBB27ECFE","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/78/ed0252c2.jpg","comment_is_top":false,"comment_ctime":1572509602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572509602","product_id":100006701,"comment_content":"关于volatile的这句描述-“对于 volatile 变量，对它的写操作，保证 happen-before 在随后对该变量的读取操作。”，我始终不理解，写了很多demo测试，也没弄清楚，老师能给个简单的demo code吗？；","like_count":0},{"had_liked":false,"id":124353,"user_name":"yzh","can_delete":false,"product_type":"c1","uid":1395798,"ip_address":"","ucode":"B6C06FEB731BDC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKcGBqEZQKHjq3XaSZRLmxrCykMEotI0yKWX7RbbPZh6xTdmNRsum2YxtHv33zHGFdVqxic1pIEn8Q/132","comment_is_top":false,"comment_ctime":1565865240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565865240","product_id":100006701,"comment_content":"老是，具体有什么工具可以验证JMM的所有执行可能","like_count":0},{"had_liked":false,"id":109928,"user_name":"浪尖","can_delete":false,"product_type":"c1","uid":1221820,"ip_address":"","ucode":"65A009976AFC6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/bc/02596f1a.jpg","comment_is_top":false,"comment_ctime":1562135807,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562135807","product_id":100006701,"comment_content":"读操作插入的屏障，不都是在volatile读之后吗？","like_count":0,"discussions":[{"author":{"id":1221820,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a4/bc/02596f1a.jpg","nickname":"浪尖","note":"","ucode":"65A009976AFC6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":895,"discussion_content":"对于volatile读应是这样的吧：\n    在每个volatile读操作的后面插入一个LoadLoad屏障；\n    在每个volatile读操作的后面插入一个LoadStore屏障。\n而文中是：\n    对该变量的读操作之前，编译器会插入一个读屏障\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562142134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101505,"user_name":"谢涛","can_delete":false,"product_type":"c1","uid":1108586,"ip_address":"","ucode":"458E15EB79A196","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/6a/e4443e5e.jpg","comment_is_top":false,"comment_ctime":1559832016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559832016","product_id":100006701,"comment_content":"茅塞顿开了，赞","like_count":0},{"had_liked":false,"id":72426,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1551622912,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1551622912","product_id":100006701,"comment_content":"单线程内的happens before和优化后的有序性不冲突吗？这里的happens before是指的高级语言语句级还是cpu指令级呢？","like_count":1,"discussions":[{"author":{"id":1541386,"avatar":"https://static001.geekbang.org/account/avatar/00/17/85/0a/e564e572.jpg","nickname":"N_H","note":"","ucode":"109B67557AB3CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19212,"discussion_content":"jvm级别吧，jvm以及java编译器实现了这样的规范","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569151122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69082,"user_name":"","can_delete":false,"product_type":"c1","uid":1027170,"ip_address":"","ucode":"","user_header":"","comment_is_top":false,"comment_ctime":1550657399,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1550657399","product_id":100006701,"comment_content":"杨老师，请教个问题，前面说到的volatile变量是在写操作之后，编译器插入一个写屏障，为什么不是在写操作之前，和我理解有点出入，望赐教。","like_count":0,"discussions":[{"author":{"id":2938089,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V71ITElU4RwprR74pPXB6LhIMrfeAHuHjicZmS7smy2tibBSMoA9awaTe86wziatYzoy3qVOGs0DnSTy6ah5L6bKA/132","nickname":"四喜丸子","note":"","ucode":"33D46CC1B747BA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578005,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656469653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18189,"user_name":"甲韭","can_delete":false,"product_type":"c1","uid":1052321,"ip_address":"","ucode":"2E998B8CB17F4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/a1/152a5de1.jpg","comment_is_top":false,"comment_ctime":1533181554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533181554","product_id":100006701,"comment_content":"之前的问题找到解决方法了，就是使用concurrenthashmap的computeIfAbsent方法，这个方法是加锁的.<br>文中提到的volatile的例子，我试了一下并没有复现出来，根据《深入理解JVM》这本书关于volatile的例子复现出来了，了解了volatile并不能保证字段线程安全<br>然后Brian Goetz的《java theory and practice:managing volatility》仔细拜读了一下，还是没有找到能够百分百复现出来的办法<br>请问有什么方法能够稳定复现出来文中的例子吗？","like_count":0},{"had_liked":false,"id":16548,"user_name":"philip","can_delete":false,"product_type":"c1","uid":1176596,"ip_address":"","ucode":"BBEF738A26800D","user_header":"https://static001.geekbang.org/account/avatar/00/11/f4/14/629d3a2d.jpg","comment_is_top":false,"comment_ctime":1532016422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532016422","product_id":100006701,"comment_content":"老师volatile变量的happens_befor中ues之前必须load。但是load了不中间不对变量进行操作，过一会再操作，但是其他线程已经操作了volitile变量。此时被加载到工作区的volatile变量再执行assgin操作时应该不会重新加载主存数据了对不？","like_count":0},{"had_liked":false,"id":16437,"user_name":"饭磊","can_delete":false,"product_type":"c1","uid":1111359,"ip_address":"","ucode":"5008C387B423DE","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/3f/5777c705.jpg","comment_is_top":false,"comment_ctime":1531961257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531961257","product_id":100006701,"comment_content":"老师我想问下 为什么jvm里面有时候说的是绑定，有时候说是分派，请问这俩什么区别呀","like_count":0},{"had_liked":false,"id":16427,"user_name":"超级玩家","can_delete":false,"product_type":"c1","uid":1029874,"ip_address":"","ucode":"D37E44E6C2E679","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/f2/c78f79e1.jpg","comment_is_top":false,"comment_ctime":1531958774,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1531958774","product_id":100006701,"comment_content":"杨大大，final除了不可变的作用，也能在一定程度上可以起到线程安全的作用？final是通过什么方式来做到线程安全的作用的？","like_count":1,"discussions":[{"author":{"id":2391701,"avatar":"","nickname":"Geek_a3890b","note":"","ucode":"BF67D080DAF96D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403978,"discussion_content":"不可变所以安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634202930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16066,"user_name":"mao","can_delete":false,"product_type":"c1","uid":1114652,"ip_address":"","ucode":"C8E0700E9A108A","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/1c/a0aba121.jpg","comment_is_top":false,"comment_ctime":1531757042,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1531757042","product_id":100006701,"comment_content":"java虚拟机规范中对对普通变量的赋值是不是也强制刷新到主内存","like_count":0},{"had_liked":false,"id":15724,"user_name":"刘杰","can_delete":false,"product_type":"c1","uid":1106503,"ip_address":"","ucode":"4B91701B322624","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/47/e910afec.jpg","comment_is_top":false,"comment_ctime":1531413949,"is_pvip":false,"replies":[{"id":"5471","content":"不清楚，这个我没想到规范中哪一条可以保证；<br>建议看看比较权威的文章 https:&#47;&#47;shipilev.net&#47;blog&#47;2014&#47;safe-public-construction&#47;#_safe_initialization","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531576088,"ip_address":"","comment_id":15724,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531413949","product_id":100006701,"comment_content":"您又说到了单例模式中的那个其他线程访问到未初始完成对象的问题，忍不住再问下，是否可以先用一个局部变量初始化对象，再把局部变量赋值给类成员？这样可以解决吗？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420533,"discussion_content":"不清楚，这个我没想到规范中哪一条可以保证；\n建议看看比较权威的文章 https://shipilev.net/blog/2014/safe-public-construction/#_safe_initialization","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531576088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15642,"user_name":"3W1H","can_delete":false,"product_type":"c1","uid":1066430,"ip_address":"","ucode":"F6B4864128103C","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","comment_is_top":false,"comment_ctime":1531358007,"is_pvip":false,"replies":[{"id":"5469","content":"和几个方法没关系","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531572078,"ip_address":"","comment_id":15642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531358007","product_id":100006701,"comment_content":"老师的例子里面的thread a,b的逻辑是在一个方法里面吗？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420491,"discussion_content":"和几个方法没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531572078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}