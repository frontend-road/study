{"id":741040,"title":"第 15 章 常用MySQL操作","content":"\n<p>前面阿铭已经介绍过MySQL的安装了，但是光会安装还不够，作为一个Linux运维工程师，你还需要掌握一些基本的操作，以满足日常管理工作所需。至于更深层次的内容，那是DBA（专门管理数据库的技术人员）所必须掌握的。</p>\n<h2 id=\"nav_point_312\">15.1 更改MySQL数据库root的密码</h2>\n<p>在前一章刚安装完MySQL，我们已经将MySQL的root用户密码修改为了aminglinux.com，登录时需要使用该密码才能登录，如下所示：</p>\n<pre class=\"code-rows\"><code># /usr/local/mysql/bin/mysql –uroot –p\n/usr/local/mysql/bin/mysql: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</code></pre>\n<p>结果报错了，这是因为阿铭的系统少一个库文件。解决办法为：</p>\n<pre class=\"code-rows\"><code># yum install -y ncurses-compat-libs</code></pre>\n<p>继续刚才的命令：</p>\n<pre class=\"code-rows\"><code># /usr/local/mysql/bin/mysql –uroot –p\nEnter password:\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 3\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;</code></pre>\n<p>输入正确的密码后，进入到了MySQL命令行界面里。退出时直接输入<code>quit</code>或者<code>exit</code>即可。细心的读者应该会发现，阿铭在上一条命令中使用的是绝对路径，这样很不方便。但是只单独输入一个<code>mysql</code>命令是不行的，因为/usr/local/mysql/bin不在<code>PATH</code>这个环境变量里。那么如何把它加入环境变量<code>PATH</code>中呢？方法如下：</p>\n<pre class=\"code-rows\"><code># PATH=$PATH:/usr/local/mysql/bin</code></pre>\n<p>但重启Linux后还会失效，所以需要让它开机加载，如下所示：</p>\n<pre class=\"code-rows\"><code># echo \"PATH=$PATH:/usr/local/mysql/bin\" &gt;&gt; /etc/profile\n# source /etc/profile\n# mysql -uroot -p\nEnter password:\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 4\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;</code></pre>\n<p>阿铭再来解释一下上一条命令中<code>-u</code>的含义，它用来指定要登录的用户，后面有无空格均可。root用户是MySQL自带的管理员用户，<code>-p</code>后面应该跟密码，如果没有跟，就需要手动输入。我们还可以直接将密码放到命令里，但这样就不太安全了：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p'aminglinux.com'\nmysql: [Warning] Using a password on the command line interface can be insecure.</code></pre>\n<p>我们同时得到一个警告。那么如何给root用户更改密码呢？操作方法如下：</p><!-- [[[read_end]]] -->\n<pre class=\"code-rows\"><code># mysqladmin -uroot -p'aminglinux.com' password 'linux.org'\nmysqladmin: [Warning] Using a password on the command line interface can be insecure.\nWarning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</code></pre>\n<p>这样就给MySQL的root用户更改了密码，注意在生产环境中不要设置这么简单的密码。在执行命令过程中它会返回一条警告信息，意思是在命令行下面暴露了密码，这样不安全。接下来使用新密码登录，如下所示：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p'linux.org'\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 7\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;</code></pre>\n<p>输入密码时需要加<code>-p</code>选项，后面可以直接跟密码。<code>-p</code>选项后面不可以有空格，密码可以不加单引号（但是密码中有特殊字符时就会出问题，所以最好还是加上单引号）。</p>\n<p>也许你会遇到忘记root密码的情况，此时就需要另外一种方法了。具体步骤如下。</p>\n<p>1) 更改配置文件：</p>\n<pre class=\"code-rows\"><code># vi /etc/my.cnf // 增加一行\nskip-grant-tables</code></pre>\n<p>2) 重启MySQL：</p>\n<pre class=\"code-rows\"><code># /etc/init.d/mysqld restart</code></pre>\n<p>3) 修改MySQL库的user表：</p>\n<pre class=\"code-rows\"><code># mysql -uroot // 此时不需要root密码就可以进入到mysql\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 3\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; UPDATE mysql.user SET authentication_string=PASSWORD('aming123') WHERE user='root' ;\nQuery OK, 1 row affected, 1 warning (0.06 sec)\nRows matched: 1 Changed: 1 Warnings: 1</code></pre>\n<p>4) 修改配置文件：</p>\n<p>编辑/etc/my.cnf，将刚刚增加的<code>skip-grant-tables</code>去掉。</p>\n<p>5) 重启MySQL：</p>\n<pre class=\"code-rows\"><code># /etc/init.d/mysqld restart</code></pre>\n<p>6) 使用新密码登录：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p'aming123'\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 2\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;</code></pre>\n<p>此时，可以使用新密码登录MySQL了。</p>\n<h2 id=\"nav_point_313\">15.2 连接数据库</h2>\n<p>你可以使用命令<code>mysql -u root -p</code>连接数据库，但这样连接的只是本地数据库<code>localhost</code>。很多时候需要连接网络中某一个主机上的MySQL，如下所示：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p -h192.168.72.128 -P3306\nEnter password:</code></pre>\n<p>其中，后面的<code>-P</code>（大写）用来指定远程主机MySQL的绑定端口，默认都是3306；<code>-h</code>用来指定远程主机的IP。除了<code>-h</code>指定远程主机外，还可以用<code>-S</code>来指定socket文件连接MySQL，如下所示：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -S/tmp/mysql.sock -p\nEnter password:</code></pre>\n<p>这个socket文件是Linux系统中进程之间用来通信的文件。</p>\n<h2 id=\"nav_point_314\">15.3 MySQL基本操作的常用命令</h2>\n<p>在日常工作中，难免会遇到一些与MySQL相关的操作,比如建库、建表、查询MySQL状态等。尽管我们不是专业的数据库管理员，但是最基本的操作还是要掌握的。</p>\n<h3 id=\"nav_point_315\">15.3.1 查询当前库</h3>\n<p>查询当前库的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show databases;\n+--------------------+\n| Database |\n+--------------------+\n| information_schema |\n| mysql |\n| performance_schema |\n| sys |\n+--------------------+\n4 rows in set (0.05 sec)</code></pre>\n<p>注意<code>mysql</code>命令的结尾处需要加一个分号。</p>\n<h3 id=\"nav_point_316\">15.3.2 查询某个库的表</h3>\n<p>首先需要切换到某个库里，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed</code></pre>\n<p>在切换库的时候，它提示这个操作会把当前库里的所有表的字段全部读一遍，你可以在启动MySQL的时候加上<code>-A</code>选项关闭这个特性（其实这个特性倒也不影响什么，你可以忽略它）。然后再把表列出来，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show tables;\n+---------------------------+\n| Tables_in_mysql |\n+---------------------------+\n| columns_priv |\n| db |\n| engine_cost |\n| event |\n| func |\n| general_log |\n| gtid_executed |\n| help_category |\n| help_keyword |\n| help_relation |\n| help_topic |\n| innodb_index_stats |\n| innodb_table_stats |\n| ndb_binlog_index |\n| plugin |\n| proc |\n| procs_priv |\n| proxies_priv |\n| server_cost |\n| servers |\n| slave_master_info |\n| slave_relay_log_info |\n| slave_worker_info |\n| slow_log |\n| tables_priv |\n| time_zone |\n| time_zone_leap_second |\n| time_zone_name |\n| time_zone_transition |\n| time_zone_transition_type |\n| user |\n+---------------------------+\n31 rows in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_317\">15.3.3 查看某个表的全部字段</h3>\n<p>查看表的全部字段的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; desc db;\n+-----------------------+---------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------------+---------------+------+-----+---------+-------+\n| Host | char(60) | NO | PRI | | |\n| Db | char(64) | NO | PRI | | |\n| User | char(32) | NO | PRI | | |\n| Select_priv | enum('N','Y') | NO | | N | |\n| Insert_priv | enum('N','Y') | NO | | N | |\n| Update_priv | enum('N','Y') | NO | | N | |\n| Delete_priv | enum('N','Y') | NO | | N | |\n| Create_priv | enum('N','Y') | NO | | N | |\n| Drop_priv | enum('N','Y') | NO | | N | |\n| Grant_priv | enum('N','Y') | NO | | N | |\n| References_priv | enum('N','Y') | NO | | N | |\n| Index_priv | enum('N','Y') | NO | | N | |\n| Alter_priv | enum('N','Y') | NO | | N | |\n| Create_tmp_table_priv | enum('N','Y') | NO | | N | |\n| Lock_tables_priv | enum('N','Y') | NO | | N | |\n| Create_view_priv | enum('N','Y') | NO | | N | |\n| Show_view_priv | enum('N','Y') | NO | | N | |\n| Create_routine_priv | enum('N','Y') | NO | | N | |\n| Alter_routine_priv | enum('N','Y') | NO | | N | |\n| Execute_priv | enum('N','Y') | NO | | N | |\n| Event_priv | enum('N','Y') | NO | | N | |\n| Trigger_priv | enum('N','Y') | NO | | N | |\n+-----------------------+---------------+------+-----+---------+-------+\n22 rows in set (0.00 sec)</code></pre>\n<p>另外，也可以使用下面这条命令，显示的信息会更详细，而且还可以把建表语句全部列出来，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show create table db\\G\n*************************** 1. row ***************************\n Table: db\nCreate Table: CREATE TABLE `db` (\n `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n PRIMARY KEY (`Host`,`Db`,`User`),\n KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n1 row in set (0.00 sec)</code></pre>\n<p>这条命令后面加了一个<code>\\G</code>，目的是让列出来的结果竖排显示，这样看起来更清晰；如果不加<code>\\G</code>，会有点乱。</p>\n<h3 id=\"nav_point_318\">15.3.4 查看当前是哪个用户</h3>\n<p>查看当前用户的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; select user();\n+----------------+\n| user() |\n+----------------+\n| root@localhost |\n+----------------+\n1 row in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_319\">15.3.5 查看当前所使用的数据库</h3>\n<p>查看当前数据库的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; select database();\n+------------+\n| database() |\n+------------+\n| mysql |\n+------------+\n1 row in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_320\">15.3.6 创建一个新库</h3>\n<p>新建一个库的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; create database db1;\nQuery OK, 1 row affected (0.05 sec)</code></pre>\n<h3 id=\"nav_point_321\">15.3.7 创建一个新表</h3>\n<p>新建一个表的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; use db1;\nDatabase changed\nmysql&gt; create table t1 (`id` int(4), `name` char(40));\nQuery OK, 0 rows affected (0.06 sec)</code></pre>\n<p>注意，这里的字段名<code>id</code>和<code>name</code>需要用反引号括起来。</p>\n<h3 id=\"nav_point_322\">15.3.8 查看当前数据库的版本</h3>\n<p>查看MySQL版本的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; select version();\n+------------+\n| version() |\n+------------+\n| 5.7.29-log |\n+------------+\n1 row in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_323\">15.3.9 查看MySQL的当前状态</h3>\n<p>查看MySQL当前状态的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show status;\n+-----------------------------------------------+-------------+\n| Variable_name | Value |\n+-----------------------------------------------+-------------+\n| Aborted_clients | 0 |\n| Aborted_connects | 2 |\n| Binlog_cache_disk_use | 0 |\n| Binlog_cache_use | 0 |\n| Binlog_stmt_cache_disk_use | 0 |\n| Binlog_stmt_cache_use | 3 |\n| Bytes_received | 1229 |\n| Bytes_sent | 41129 |\n| Com_admin_commands | 0 |\n| Com_assign_to_keycache | 0 |\n| Com_alter_db | 0 |\n| Com_alter_db_upgrade | 0 |</code></pre>\n<p>由于内容太长，阿铭没有列出全部信息，感兴趣的话可以上网搜索一下其中每一行的含义。</p>\n<h3 id=\"nav_point_324\">15.3.10 查看MySQL的参数</h3>\n<p>查看MySQL各参数的命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show variables;\n+-----------------------------------------+---------------------+\n| Variable_name | Value |\n+-----------------------------------------+---------------------+\n| auto_increment_increment | 1 |\n| auto_increment_offset | 1 |\n| autocommit | ON |\n| automatic_sp_privileges | ON |\n| back_log | 50 |\n| basedir | /usr/local/mysql/ |</code></pre>\n<p>限于篇幅，阿铭没有列出全部参数。其中有很多参数是可以在 /etc/my.cnf文件中定义的，并且有部分参数是可以在线编辑的。</p>\n<h3 id=\"nav_point_325\">15.3.11 修改MySQL的参数</h3>\n<p>举例来说，修改参数<code>max_connect_errors</code>的操作方法如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show variables like 'max_connect%';\n+--------------------+-------+\n| Variable_name | Value |\n+--------------------+-------+\n| max_connect_errors | 100 |\n| max_connections | 151 |\n+--------------------+-------+\n2 rows in set (0.01 sec)\n\nmysql&gt; set global max_connect_errors = 1000;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; show variables like 'max_connect_errors';\n+--------------------+-------+\n| Variable_name | Value |\n+--------------------+-------+\n| max_connect_errors | 1000 |\n+--------------------+-------+\n1 row in set (0.01 sec)</code></pre>\n<p>在MySQL命令行中，符号%类似于shell下的<code>*</code>，表示通配。使用命令<code>set global</code>可以临时修改某些参数，但是重启MySQL服务后这些修改会失效。所以，如果你想让这些修改恒久生效，就要在配置文件my.cnf中定义。</p>\n<h3 id=\"nav_point_326\">15.3.12 查看当前MySQL服务器的队列</h3>\n<p>查看服务器队列在日常的管理工作中最为频繁。因为使用它可以查看当前MySQL在干什么，也可以发现是否有锁表，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; show processlist;\n+----+------+-----------+------+---------+------+-------+------------------+\n| Id | User | Host | db | Command | Time | State | Info |\n+----+------+-----------+------+---------+------+-------+------------------+\n| 13 | root | localhost | db1 | Query | 0 | NULL | show processlist |\n+----+------+-----------+------+---------+------+-------+------------------+\n1 row in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_327\">15.3.13 创建一个普通用户并授权</h3>\n<p>授权命令如下：</p>\n<pre class=\"code-rows\"><code>mysql&gt; grant all on *.* to user1 identified by '123456';\nQuery OK, 0 rows affected (0.21 sec)</code></pre>\n<p>其中，<code>all</code>表示所有的权限（如读、写、查询、删除等操作）；<code>.</code>有两个<code>*</code>，前者表示所有的数据库，后者表示所有的表；<code>identified by</code>后面跟密码，密码用单引号括起来。这里的<code>user1</code>特指localhost上的<code>user1</code>。如果是给网络其他机器上的某个用户授权，则要执行如下命令：</p>\n<pre class=\"code-rows\"><code>mysql&gt; grant all on db1.* to 'user2'@'192.168.72.129' identified by '111222';\nQuery OK, 0 rows affected (0.01 sec)</code></pre>\n<p>其中，用户和主机的IP之间有一个符号<code>@</code>。另外，命令中主机IP可以用 <code>%</code> 替代，表示所有主机，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; grant all on db1.* to 'user3'@'%' identified by '231222';\nQuery OK, 0 rows affected (0.00 sec)</code></pre>\n<h2 id=\"nav_point_328\">15.4 常用的SQL语句</h2>\n<p>关系型数据库的SQL语句都是一样的。假如你之前学过SQL Server或者Oracle，便会觉得这部分内容非常熟悉。</p>\n<h3 id=\"nav_point_329\">15.4.1 查询语句</h3>\n<p>最常见的查询语句就是下面这两种形式。</p>\n<ul>\n<li><p>第一种形式</p>\n<pre class=\"code-rows\"><code>mysql&gt; select count(*) from mysql.user;\n+----------+\n| count(*) |\n+----------+\n| 6 |\n+----------+\n1 row in set (0.00 sec)</code></pre>\n<p>其中，<code>mysql.user</code>表示MySQL库的<code>user</code>表，<code>count(*)</code>表示表中共有多少行。</p>\n<p>&nbsp;</p>\n</li>\n<li><p>第二种形式</p>\n<pre class=\"code-rows\"><code>mysql&gt; select * from mysql.db;</code></pre>\n<p>它表示查询MySQL库的<code>db</code>表中的所有数据。当然也可以查询单个字段或者多个字段，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; select db from mysql.db;\nmysql&gt; select db,user from mysql.db;</code></pre>\n<p>同样，在查询语句中也可以使用万能匹配符 <code>%</code>，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; select * from mysql.db where host like '192.168.%';</code></pre>\n</li>\n</ul>\n<h3 id=\"nav_point_330\">15.4.2 插入一行</h3>\n<p>插入操作在MySQL中也很普遍，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; insert into db1.t1 values (1, 'abc');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; select * from db1.t1;\n+------+------+\n| id | name |\n+------+------+\n| 1 | abc |\n+------+------+\n1 row in set (0.01 sec)</code></pre>\n<h3 id=\"nav_point_331\">15.4.3 更改表的某一行</h3>\n<p>MySQL表里存放的数据支持更改某个字段，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; update db1.t1 set name='aaa' where id=1;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1 Changed: 1 Warnings: 0\n\nmysql&gt; select * from db1.t1;\n+------+------+\n| id | name |\n+------+------+\n| 1 | aaa |\n+------+------+\n1 row in set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_332\">15.4.4 清空某个表的数据</h3>\n<p>有时我们不希望删除表，而只是想清空某个表的数据，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; truncate table db1.t1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select * from db1.t1;\nEmpty set (0.00 sec)</code></pre>\n<h3 id=\"nav_point_333\">15.4.5 删除表</h3>\n<p>如果不需要某个表了，可以直接将其删除，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; drop table db1.t1;\nQuery OK, 0 rows affected (0.02 sec)</code></pre>\n<h3 id=\"nav_point_334\">15.4.6 删除数据库</h3>\n<p>表可以删除，当然数据库也可以删除，如下所示：</p>\n<pre class=\"code-rows\"><code>mysql&gt; drop database db1;\nQuery OK, 0 rows affected (0.01 sec)</code></pre>\n<h2 id=\"nav_point_335\">15.5 MySQL数据库的备份与恢复</h2>\n<p>备份和恢复MySQL数据库这部分内容非常重要，请牢固掌握。</p>\n<h3 id=\"nav_point_336\">15.5.1 MySQL备份</h3>\n<p>备份MySQL要使用<code>mysqldump</code>命令，具体用法如下：</p>\n<pre class=\"code-rows\"><code># mysqldump -uroot -p'aming123' mysql &gt;/tmp/mysql.sql</code></pre>\n<p>其中，<code>-u</code>和<code>-p</code>两个选项的使用方法和前面介绍的一样；后面的<code>mysql</code>指的是库名，然后重定向到一个文本文档里。备份做完后，你可以查看/tmp/mysql.sql这个文件里的内容。</p>\n<h3 id=\"nav_point_337\">15.5.2 MySQL的恢复</h3>\n<p>MySQL的恢复和备份正好相反，如下所示：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p'aming123' mysql &lt;/tmp/mysql.sql</code></pre>\n<p>关于MySQL的基本操作阿铭就介绍这么多。当然，学会了这些还远远不够，希望你能够在工作中学习到更多的知识。如果你对MySQL很感兴趣，不妨深入研究一下。</p>\n<h2 id=\"nav_point_338\">15.6 课后习题</h2>\n<p>(1) 如何更改系统环境变量<code>PATH</code>？</p>\n<p>(2) MySQL安装之后，如何给root用户更改密码？</p>\n<p>(3) 如何在不知道以前密码的情况下重置root密码？</p>\n<p>(4) 如何连接远程的MySQL服务器？</p>\n<p>(5) 如何查看当前MySQL的登录用户？</p>\n<p>(6) 在MySQL命令行下，如何切换到某个库？</p>\n<p>(7) 如何查看一个表都有哪些字段？</p>\n<p>(8) 如何查看某个表使用的是哪种数据库引擎？</p>\n<p>(9) 如何查看当前数据库有哪些队列？</p>\n<p>(10) 当有很多队列时，如何查看有哪些慢查询？</p>\n<p>(11) 如何查看当前MySQL的参数值？</p>\n<p>(12) 不重启MySQL服务，如何更改某个参数？</p>\n<p>(13) 用什么工具备份数据库？请区分<code>MyISAM</code>引擎和<code>innodb</code>引擎两种存储引擎的备份。（扩展内容，请查资料获取答案。）</p>\n<p>(14) 简单描述<code>MyISAM</code>和<code>innodb</code>引擎的区别。（扩展内容，请查资料获取答案。）</p>\n<p>(15) 如果你的MySQL服务不能启动，而当前终端又没有报错，该如何做？</p>\n<p>(16) 备份<code>MyISAM</code>引擎的数据库时，我们除了使用<code>mysqldump</code>工具外，还可以直接复制数据库的源数据（.frm、.MYD和.MYI这三种格式的数据），其中哪一个文件可以不复制？若想恢复该文件，该如何做？（扩展内容，请查资料获取答案。）</p>\n<p>(17) MySQL的命令历史文件在哪里？为了安全，我们其实可以做一个小处理，不让MySQL的命令历史记录在文档中，请想一想如何利用之前我们学过的知识做到。</p>\n<p>(18) 如何让MySQL的监听端口为3307，而不是默认的3306？</p>\n\n<br style=\"page-break-after:always\" />","comments":[]}