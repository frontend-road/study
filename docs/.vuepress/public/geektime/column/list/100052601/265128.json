{"id":265128,"title":"26 | 简单设计：难道一开始就要把设计做复杂吗？","content":"<p>你好！我是郑晔。</p><p>从专栏开始到现在，关于软件设计，我们已经聊了很多。在学习设计原则和模式这个部分时，我们看着每次的代码调整，虽然结果还不错，但不知道你脑子之中有没有闪过这样的疑问：</p><p>如果我的每段代码都这么写，会不会把设计做复杂了呢？</p><p>确实，几乎每个人在初学设计的时候，都会有用力过猛的倾向。如何把握设计的度，是每个做设计的人需要耐心锤炼的。所以，行业里有人总结了一些实践原则，给了我们一些启发性的规则，帮助我们把握设计的度。</p><p>我把这些原则放到这个部分的最后来讲，是因为它们并不是指导你具体如何编码的原则，它们更像是一种思考方法、一种行为准则。</p><p>好，我们就来看看这样的原则有哪些。</p><h2>KISS</h2><p>KISS原则，是“Keep it simple, stupid”的缩写，也就是保持简单、愚蠢的意思。它告诫我们，对于大多数系统而言，和变得复杂相比，<strong>保持简单能够让系统运行得更好</strong>。</p><p>很多程序员都知道这条原则，然而，很少人知道这条原则其实是出自美国海军。所以，它的适用范围远比我们以为的程序员社区要广泛得多。无论是制定一个目标，还是设计一个产品，抑或是管理一个公司，我们都可以用KISS作为一个统一的原则指导自己的工作。</p><p>这个原则看起来有点抽象，每个人对它都会有自己理解的角度，所以，每个人都会觉得它很有道理，而且，越是资深的人越会觉得它有道理。因为资深的人通常都是在自己的工作领域中，见识过因为复杂而引发的各种问题。比如说，堆了太多的功能，调整起来很费劲这样的情况。我们在专栏前面讲过的各种问题，很多时候都是由于复杂引起的。</p><!-- [[[read_end]]] --><p>所以，对资深的人来说，保持简单是一个再好不过的指引了。其实，每个人都可以针对自己的工作场景给出自己的阐释，比如：</p><ul>\n<li>如果有现成的程序库，就不要自己写；</li>\n<li>能用文本做协议就别用二进制；</li>\n<li>方法写得越小越好；</li>\n<li>能把一个基本的流程打通，软件就可以发布，无需那么多的功能；</li>\n<li>……</li>\n</ul><p>这种级别的原则听上去很有吸引力，但问题是，你并不能用它指导具体的工作。因为，怎么做叫保持简单，怎么做就叫复杂了呢？这个标准是没办法确定的。所以，有人基于自己的理解给出了一些稍微具体一点的原则。比如，在软件开发领域，你可能听说过的YAGNI和DRY原则。</p><h2>YAGNI</h2><p>YAGNI 是“You aren’t gonna need it”的缩写，也就是，你用不着它。这个说法来自于极限编程社区（Extreme Programming，简称 XP），我们可以把它理解成：<strong>如非必要，勿增功能</strong>。</p><p>我们在开篇词里就说过，软件设计对抗的是需求规模。一方面，我们会通过自己的努力，让软件在需求规模膨胀之后，依然能有一个平稳的发展；另一方面，我们还应该努力地控制需求的规模。</p><p>YAGNI就告诫我们，其实很多需求是不需要做的。很多产品经理以为很重要的功能实际上是没什么用的。人们常说二八原则，真正重要的功能大约只占20%，80%的功能可能大多数人都用不到。做了更多的功能，并不会得到更多的回报，但是，做了更多的功能，软件本身却会不断地膨胀，变得越发难以维护。</p><p>所以，在现实世界中，我们经常看到一些功能简单的东西不断涌现，去颠覆更复杂的东西。比如，虽然Word已经很强大了，但对于很多人而言，它还只是一个写字的工具，甚至它的重点排版功能都用得非常少。</p><p>于是，这就给了Markdown一个机会。它可以让我们专注写内容，而且简单的排版标记在日常沟通中也完全够用。至少，我已经不记得自己上一次用Word写东西是什么时候了。</p><p>我在<a href=\"http://https://time.geekbang.org/column/intro/100022301\">《10x 程序员工作法》</a>里写的大部分内容，实际上就是告诉你，什么样的做法可以规避哪些的不必要功能。通过这里的介绍，我们不难发现，YAGNI是一种上游思维，就是尽可能不去做不该做的事，从源头上堵住。从某种意义上说，它比其他各种设计原则都重要。</p><h2>DRY</h2><p>DRY是“Don’t repeat yourself”的缩写，也就是，<strong>不要重复自己</strong>。这个说法源自Andy Hunt和Dave Thomas的《程序员修炼之道》（The Pragmatic Programmer）。这个原则的阐述是这样的：</p><blockquote>\n<p>在一个系统中，每一处知识都必须有单一、明确、权威地表述。<br>\nEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p>\n</blockquote><p>每个人对于DRY原则的理解是千差万别的，最浅层的理解就是“不要复制粘贴代码”。不过，两个作者在二十年后的第二版特意强调，这个理解是远远不够的。<strong>DRY针对的是你对知识和意图的复制</strong>。它强调的是，在两个不同地方的两样东西表达的形式是不同的，但其要表达的内容却可能是相同的。</p><p>我从《程序员修炼之道》中借鉴了一个例子，看看我们怎么在实际的工作中运用 DRY 原则。下面是一段打印账户信息的代码，这种写法在实际的工作中也非常常见：</p><pre><code>public void printBalance(final Account account) {\n  System.out.printf(&quot;Debits: %10.2f\\n&quot;, account.getDebits());\n  System.out.printf(&quot;Credits: %10.2f\\n&quot;, account.getCredits());\n  if (account.getFees() &lt; 0) {\n    System.out.printf(&quot;Fees: %10.2f-\\n&quot;, -account.getFees());\n  } else {\n    System.out.printf(&quot;Fees: %10.2f\\n&quot;, account.getFees());\n  }\n\n  System.out.printf(&quot; ----\\n&quot;);\n\n  if (account.getBalance() &lt; 0) {\n    System.out.printf(&quot;Balance: %10.2f-\\n&quot;, -account.getBalance());\n  } else {\n    System.out.printf(&quot;Balance: %10.2f\\n&quot;, account.getBalance());\n  }\n}\n</code></pre><p>然而，在这段代码中，隐藏着一些重复。比如，对负数的处理显然是复制的，可以通过增加一个方法消除它：</p><pre><code>String formatValue(final double value) {\n  String result = String.format(&quot;%10.2f&quot;, Math.abs(value));\n  if (value &lt; 0) {\n    return result + &quot;-&quot;;\n  } else {\n    return result + &quot; &quot;;\n  }\n}\n\nvoid printBalance(final Account account) {\n  System.out.printf(&quot;Debits: %10.2f\\n&quot;, account.getDebits());\n  System.out.printf(&quot;Credits: %10.2f\\n&quot;, account.getCredits());\n  System.out.printf(&quot;Fees:%s\\n&quot;, formatValue(account.getFees()));\n  System.out.printf(&quot; ----\\n&quot;);\n  System.out.printf(&quot;Balance:%s\\n&quot;, formatValue(account.getBalance()));\n}\n</code></pre><p>还有，数字字段格式也是反复出现的，不过，格式与我们抽取出来的方法是一致的，所以，可以复用一下：</p><pre><code>String formatValue(final double value) {\n  String result = String.format(&quot;%10.2f&quot;, Math.abs(value));\n  if (value &lt; 0) {\n    return result + &quot;-&quot;;\n  } else {\n    return result + &quot; &quot;;\n  }\n}\n\nvoid printBalance(final Account account) {\n  System.out.printf(&quot;Debits: %s\\n&quot;, formatValue(account.getDebits()));\n  System.out.printf(&quot;Credits: %s\\n&quot;, formatValue(account.getCredits()));\n  System.out.printf(&quot;Fees:%s\\n&quot;, formatValue(account.getFees()));\n  System.out.printf(&quot; ----\\n&quot;);\n  System.out.printf(&quot;Balance:%s\\n&quot;, formatValue(account.getBalance()));\n}\n</code></pre><p>再有，这里面的打印格式其实也是重复的，如果我要在标签和金额之间加一个空格，相关的代码都要改，所以，这也是一个可以消除的重复：</p><pre><code>String formatValue(final double value) {\n  String result = String.format(&quot;%10.2f&quot;, Math.abs(value));\n  if (value &lt; 0) {\n    return result + &quot;-&quot;;\n  } else {\n    return result + &quot; &quot;;\n  }\n}\n\nvoid printLine(final String label, final String value) {\n  System.out.printf(&quot;%-9s%s\\n&quot;, label, value);\n}\n\nvoid reportLine(final String label, final double value) {\n  printLine(label + &quot;:&quot;, formatValue(value));\n}\n\nvoid printBalance(final Account account) {\n  reportLine(&quot;Debits&quot;, account.getDebits());\n  reportLine(&quot;Credits&quot;, account.getCredits());\n  reportLine(&quot;Fees&quot;, account.getFees());\n  System.out.printf(&quot; ----\\n&quot;);\n  reportLine(&quot;Balance&quot;, account.getBalance());\n}\n</code></pre><p>经过这样的修改，如果我们要改金额打印的格式，就去改formatValue方法；如果我们要改标签的格式，就去改reportLine方法。</p><p>可能对于有的人来说，这种调整的粒度太小了。不过，我想说的是，如果你的感觉是这样的话，证明你看问题的粒度太大了。</p><p>如果仔细品味这个修改，你就能从中感觉到它与我们之前说的分离关注点和单一职责原则有异曲同工的地方，没错，确实是这样的。在讲分离关注点和单一职责原则的时候，我强调的重点也是<strong>粒度要小</strong>。这个例子从某种程度上说，也是为它们增加了注脚。</p><p>虽然我们在这里讲的是代码，但DRY原则并不局限于写代码，比如：</p><ul>\n<li>注释和代码之间存在重复，可以尝试把代码写得更清晰；</li>\n<li>内部API在不同的使用者之间存在重复，可以通过中立格式进行API的定义，然后用工具生成文档、模拟 API 等等；</li>\n<li>开发人员之间做的事情存在重复，可以建立沟通机制降低重复；</li>\n<li>……</li>\n</ul><p>所有这些努力都是在试图减少重复，同时也是为了减少后期维护的成本。</p><h2>简单设计</h2><p>上面说的这三个原则都是在偏思维方式的层面，而下面这个原则稍稍往实际的工作中靠了一些，它就是简单设计（Simple Design）原则。</p><p>这个原则来自极限编程社区，它的提出者是Kent Beck（这个名字在我的两个专栏中已经出现了很多次，由此可见，他对现代软件开发的影响很大）。</p><p>简单设计之所以叫简单设计，因为它只包含了4条规则：</p><ul>\n<li>通过所有测试；</li>\n<li>消除重复；</li>\n<li>表达出程序员的意图；</li>\n<li>让类和方法的数量最小化。</li>\n</ul><p>这4条规则看起来很简单，但想做到，对于很多人来说，是一个非常大的挑战。Kent Beck是极限编程这种工作方式的创始人，所以，想满足他提出的简单设计原则，最好要做到与之配套的各种实践。</p><p>我们来逐一地看下每条规则。第1条是<strong>保证系统能够按照预期工作</strong>，其实，这一点对于大多数项目而言，已经是很高的要求了。怎么才能知道系统按照预期工作，那就需要有配套的自动化测试。大多数项目并不拥有自己的自动化测试，更何况是在开发阶段使用的单元测试，尤其是还得保证测试覆盖了大多数场景。</p><p>在XP实践中，想要拥有这种测试，最好是能够以测试驱动开发（Test Driven Development，简称 TDD）的方式工作。而你要想做好TDD，最根本的还是要懂设计，否则，你的代码就是不可测的，想给它写测试就是难上加难的事情。</p><p>后面3条规则其实说的是<strong>重构的方向</strong>，而重构也是XP的重要实践。第2条，消除重复，正如前面讲DRY原则所说的，你得能够发现重复，这需要你对分离关注点有着深刻的认识。第3条，表达出程序员的意图，我们需要编写有表达性的代码，这也需要你对“什么是有表达性的代码”有认识。我们在讲DSL曾经说过，代码要说明做什么，而不是怎么做。</p><p>第4条，让类和方法的数量最小化，则告诉我们不要过度设计，除非你已经看到这个地方必须要做一个设计，比如，留下适当的扩展点，否则，就不要做。</p><p>但是，有一点我们需要知道，能做出过度设计的前提，是已经懂得了设计的各种知识，这时才需要用简单设计的标准对自己进行约束。所以，所谓的简单设计，对大多数人而言，并不“简单”。</p><p>我们前面说了，简单设计的理念来自于极限编程社区，这是一个重要的敏捷流派。谈到敏捷，很多人以为做敏捷是不需要设计的，其实这是严重的误解。在敏捷实践的工程派，也就是XP这一派中，如果单看这些实践的步骤，你都会觉得都非常简单，无论是TDD也好，抑或是重构也罢，如果你没有对设计的理解，任何一个实践你都很难做好。</p><p>没有良好的设计，代码就没有可测试的接口，根本没有办法测试，TDD也就无从谈起。不懂设计，重构就只是简单的提取方法，改改名字，对代码的改进也是相当有限的。</p><p>简单设计，是Kent Beck这样的大师级程序员在经历了足够的积累，返璞归真之后提出的设计原则，它确实可以指导我们的日常工作，但前提是，我们需要把基础打牢。片面地追求敏捷实践，而忽视基本功，往往是舍本逐末的做法。</p><h2>总结时刻</h2><p>今天，我给你讲了一些启发性的编程原则，这些设计原则更像是一种思考方式，让我们在软件设计上有更高的追求：</p><ul>\n<li>KISS原则，Keep it simple, stupid，我们要让系统保持简单；</li>\n<li>YAGNI原则，You aren’t gonna need it，不要做不该做的需求；</li>\n<li>DRY原则，Don’t repeat yourself，不要重复自己，消除各种重复。</li>\n</ul><p>我们还讲了一个可以指导我们实际工作的简单设计原则，它有4条规则：</p><ul>\n<li>通过所有测试；</li>\n<li>消除重复；</li>\n<li>表达出程序员的意图；</li>\n<li>让类和方法的数量最小化。</li>\n</ul><p>软件设计相关的基础内容，到这里，我已经全部给你讲了一遍。然而，你可能会有疑问，有了这些东西之后，我该如何用呢？从下一讲开始，我们来聊聊，如果有机会从头开始的话，该如何设计一个软件。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>简单地做设计</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/f9/c455311f514e9d66f830597ba7a5c2f9.jpg?wh=2284*1700\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你分享一下，你还知道哪些让你受益匪浅的设计原则，欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"25 | 设计模式：每一种都是一个特定问题的解决方案","id":265121},"right":{"article_title":"27 | 领域驱动设计：如何从零开始设计一个软件？","id":266819}},"comments":[{"had_liked":false,"id":237570,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1595865391,"is_pvip":false,"replies":[{"id":"87769","content":"哈哈，是这样的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595893720,"ip_address":"","comment_id":237570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70315342127","product_id":100052601,"comment_content":"还记得老师在10X 里说过 ，“ 默认所有需求都不做，直到弄清楚为什么要做。用简单的设计，直到设计变得复杂 ”","like_count":17,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502463,"discussion_content":"哈哈，是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595893720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237621,"user_name":"monalisali","can_delete":false,"product_type":"c1","uid":1299521,"ip_address":"","ucode":"1FDEC87C133E28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJbh5FQajwKhNlMrkoSklPpOXBtEYXCLvuWibhfWIS9QxHWDqzhEHJzEdmtUiaiaqFjfpsr2LwgNGpbQ/132","comment_is_top":false,"comment_ctime":1595903657,"is_pvip":false,"replies":[{"id":"87800","content":"唉，祖传代码一言难尽啊！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595914874,"ip_address":"","comment_id":237621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40250609321","product_id":100052601,"comment_content":"很多公司的代码都是没有设计的，这种项目中所谓的“架构师”就是用最简单的3层结构，然后选一个框架实现IoC而已，项目基本没有自动化测试可言。如果项目已经开展好几年，也没人敢改了，一改就是大手术，改出问题还要担责任，只能越陷越深。。。。。。","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502483,"discussion_content":"唉，祖传代码一言难尽啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595914874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237378,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1595813477,"is_pvip":false,"replies":[{"id":"87686","content":"这个总结很到位。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595816275,"ip_address":"","comment_id":237378,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23070649957","product_id":100052601,"comment_content":"设计原则：<br>KISS原则<br>YAGNI原则<br>DRY原则<br>简单设计原则：<br>通过测试<br>消除重复<br>表达意图<br>让类和方法最小化<br>这些原则看起来都挺简单，但实际操作起来真的一点也不简单，对于大多数人来说所谓的过度设计其实是个伪命题，如果他能够过度设计至少说明他掌握了这些设计原则，但是我觉得真正理解这些设计原则的可能还是比较少","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502396,"discussion_content":"这个总结很到位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595816275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237426,"user_name":"行与修","can_delete":false,"product_type":"c1","uid":1241842,"ip_address":"","ucode":"11F21B663EF6D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/f2/2a9a6e9a.jpg","comment_is_top":false,"comment_ctime":1595826451,"is_pvip":false,"replies":[{"id":"87770","content":"软件设计必须多多思考。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595893746,"ip_address":"","comment_id":237426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14480728339","product_id":100052601,"comment_content":"大道至简，知易行难，所以还是要多学习借鉴，多动手，还要有一定的悟性才行～","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502412,"discussion_content":"软件设计必须多多思考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595893746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250705,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601199670,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5896166966","product_id":100052601,"comment_content":"对于大多数人来说其实是没有设计。<br><br>在对业务不是特别熟悉的情况下，估计很难一上来就按照领域驱动设计的思路建立模型，做出优雅的设计。如果能够按照 DRY 原则，或者前面的 SOLID 原则，把代码重构的漂亮一点就很好了。<br><br>YAGNI 和奥卡姆剃刀原则有点类似，中文翻译更像，“如非必要，勿增功能”，“如无必要勿增实体”。<br><br>思考题说要列举一下设计原则，我觉的有这篇里面的 KISS、YAGNI 和 DRY，加上之前的 SOLID，似乎已经足够了。<br><br>在网上找了一下，有人补充了 CARP, Composite &#47; Aggregate  Reuse Principle 组合&#47;聚合复用原则，“组合、聚合优于继承”；还有 LOD, Law of Demeter 迪米特法则（也叫做 LKP, Least Knowledge Principle 最小值是原则）。<br><br>迪米特法则和接口隔离原则比较接近，而组合&#47;聚合复用原则就比较像里氏替换原则的实现。","like_count":2},{"had_liked":false,"id":238745,"user_name":"82","can_delete":false,"product_type":"c1","uid":1476080,"ip_address":"","ucode":"F6BD958453701B","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/f0/d603e299.jpg","comment_is_top":false,"comment_ctime":1596279700,"is_pvip":false,"replies":[{"id":"88251","content":"后面巩固篇中有几个落地的例子，你可以看一下。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596375495,"ip_address":"","comment_id":238745,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891246996","product_id":100052601,"comment_content":"道理是知道，但实际上如何在新项目落地，在旧项目落地，都是一项巨大的挑战。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502841,"discussion_content":"后面巩固篇中有几个落地的例子，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596375495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237395,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1595818273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890785569","product_id":100052601,"comment_content":"模块化、轻量级","like_count":1},{"had_liked":false,"id":346321,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653023837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653023837","product_id":100052601,"comment_content":"简单地做设计--记下来","like_count":0},{"had_liked":false,"id":342260,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650162214,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650162214","product_id":100052601,"comment_content":"编程原则：<br>KISS 原则，Keep it simple, stupid，我们要让系统保持简单；<br>YAGNI 原则，You aren’t gonna need it，不要做不该做的需求；<br>DRY 原则，Don’t repeat yourself，不要重复自己，消除各种重复。<br>简单设计原则：<br>通过所有测试；<br>消除重复；<br>表达出程序员的意图；<br>让类和方法的数量最小化。<br>虽然简单，但是不简单。","like_count":0},{"had_liked":false,"id":319581,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635856418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635856418","product_id":100052601,"comment_content":"通过所有测试太难了！可以从Leetcode上解一道题体验一下！","like_count":0},{"had_liked":false,"id":288852,"user_name":"代码南","can_delete":false,"product_type":"c1","uid":1358064,"ip_address":"","ucode":"DF086DD016C892","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMF99R0aqIghGibzjOhkns6uw6cbQZem6g6dbLCL7IaU6VGmib7esn4SeVUrbnreKQggzQoWLF5Wibw/132","comment_is_top":false,"comment_ctime":1618730995,"is_pvip":false,"replies":[{"id":"105004","content":"欢迎学习其他几个我的专栏，也欢迎分享给小伙伴","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1619013830,"ip_address":"","comment_id":288852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618730995","product_id":100052601,"comment_content":"这一专栏，是我最喜欢的，我听了多遍，每一次都有新的感悟。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518750,"discussion_content":"欢迎学习其他几个我的专栏，也欢迎分享给小伙伴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619013830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259681,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1604808139,"is_pvip":false,"replies":[{"id":"100111","content":"一个人顶多只能看到未来的轮廓，不能可能看清楚全部的，所以，要随着看到的增多，相应地对自己进行修正。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611719345,"ip_address":"","comment_id":259681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604808139","product_id":100052601,"comment_content":"一直相信，架构是演进出来的，不可能有一蹴而就的银弹，这样的架构设计才能走的更远！","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509003,"discussion_content":"一个人顶多只能看到未来的轮廓，不能可能看清楚全部的，所以，要随着看到的增多，相应地对自己进行修正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611719345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256049,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603513983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603513983","product_id":100052601,"comment_content":"分离关注点最重要，不然就只能吃了不会解耦的亏。保持简单很重要，复杂的系统无法避免熵增，熵增只会带来混乱和灭亡。<br><br>设计得好就是正交分解，设计做得不好就是过度设计。<br><br>我之前也常说不要过度设计，可是连设计的知识都没掌握，怎么做设计都还不清晰，就去考虑过度设计，想想自己真是愚蠢噢。<br><br>还是得先全面学设计原则和实践案例，不要怕过度设计，不然怎么界定过度设计与简单设计都做不好，对人说起也没有说服力。","like_count":1},{"had_liked":false,"id":249804,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1600819438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600819438","product_id":100052601,"comment_content":"这节内容总结的漂亮，思想决定高度","like_count":0}]}