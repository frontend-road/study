{"id":270380,"title":"07｜正则表达式：实现文件内容的搜索和替换","content":"<p>你好，我是吴咏炜。</p><p>上面两讲里我们讨论了如何找到你想要查看/编辑的文件，及如何处理多个文件。今天我们来看一下如何在一个文件中搜索和替换内容，其核心主题就是正则表达式。</p><h2>正则表达式搜索</h2><p>通过 Vim 教程，你已经学到了搜索命令 <code>/</code> 和替换命令 <code>:s</code> 的基本用法。教程里没有提到的是，你输入的待查找的内容是被 Vim 当成正则表达式来看待的。正则表达式的学习资料很多（极客时间上就有专门的课程），完整学习也相当复杂，我们就不从头学习了。下面我们会简单讨论的，是 Vim 里的正则表达式，重点是它和其他常用正则表达式（正则表达式还是有很多种不同的风格的）的区别之处。如果你之前对正则表达式完全没有了解，建议你这儿暂停一下，先在网上搜索一下关于正则表达式的资料，了解它的基本概念和用法，然后继续阅读。</p><p>在一个搜索表达式里，或者称为模式（pattern；注意不要和 Vim 的 mode 混淆）里，<code>.</code>、<code>*</code>、<code>^</code>、<code>$</code>、<code>~</code>、<code>[]</code>、<code>\\</code> 是有特殊含义的字符：</p><ul>\n<li><code>.</code> 可以匹配除换行符外的任何字符：如 <code>a.</code> 可以匹配“aa”、“ab”、“ac”等，但不能匹配“a”、“b”或“ba”。如果需要匹配换行符（跨行匹配）的话，则需要使用 <code>\\_.</code>。</li>\n<li><code>*</code> 表示之前的匹配原（最普通的情况为单个字符）重复零次或多次：如 <code>aa*</code> 可以匹配“a”、“aa”或“aaa”，<code>a.*</code> 可以匹配“a”、“aa”、“abc”等等，但两者均不能匹配“b”。</li>\n<li><code>^</code> 匹配一行的开头，如果出现在模式的开头的话；在其他位置代表字符本身。</li>\n<li><code>$</code> 匹配一行的结尾，如果出现在模式的结尾的话；在其他位置代表字符本身。</li>\n<li><code>~</code> 匹配上一次替换的字符串，即如果上一次你把“foo”替换成了“bar”，那 <code>~</code> 就匹配“bar”。</li>\n<li><code>[…]</code> 匹配方括号内的任一字符；方括号内如果第一个字符是 <code>^</code>，表示对结果取反；除开头之外的 <code>-</code> 表示范围：如 <code>[A-Za-z]</code> 表示任意一个拉丁字母，<code>[^-+*/]</code> 表示除了“+”、“-”、“*”、“/”外的任意字符。</li>\n<li><code>\\</code> 的含义取决于下一个字符，在大部分的情况下，包括上面的这几个（<code>.</code>、<code>*</code>、<code>\\</code>、<code>^</code>、<code>$</code>、<code>~</code>、<code>[</code> 和 <code>]</code>），代表后面这个字符本身；在跟某些字符时则有特殊含义（后面我们会讨论最重要的那些）。</li>\n</ul><!-- [[[read_end]]] --><p>除此之外的字符都是普通字符，没有特殊含义。不过，需要注意的是，如果使用 <code>/</code> 开始一个搜索命令，或者在替换命令（<code>:s</code>）中使用 <code>/</code> 作为模式的分隔符，那模式中的 <code>/</code> 必须写作 <code>\\/</code> 才行，否则 Vim 看到 <code>/</code> 就会以为模式结束了，导致错误发生。</p><p>为了避免写模式的困扰，如果模式中使用“/”作为路径的分隔符，在替换命令中可以使用其他模式中没有的符号作为分隔符。比如，想把“/image/”全部替换成“/images/”的话，不要用 <code>:%s/\\/image\\//\\/images\\//g</code>，而应该用类似于 <code>:%s!/image/!/images/!g</code> 的写法。这只能适用于替换命令，而在使用 <code>/</code> 命令搜索时我们就没什么好办法了，只能把模式里的 <code>/</code> 写作 <code>\\/</code>。不过我们也可以取巧一下，用 <code>?</code> 向上、也就是反向搜索，只要记得 <code>n</code>、<code>N</code> 反过来用找下一个就行。</p><p>通过 <code>\\</code> 开始的特殊表达式有不少，如果你需要完整了解的话，可以去看看参考文档（<a href=\"https://yianwillis.github.io/vimcdoc/doc/pattern.html#pattern-overview\"><code>:help pattern-overview</code></a>）。我们下面先学习一下最基本的 6 个特殊模式项：</p><ul>\n<li><code>\\?</code> 表示之前的匹配原重复零次或一次：如 <code>aa\\?</code> 可以匹配“a”、“aa”，但不能完整匹配“aaa”（可以匹配其前两个字符、后两个或最后一个字符）。</li>\n<li><code>\\+</code> 表示之前的匹配原重复一次或多次：如 <code>aa\\+</code> 可以匹配“aa”、“aaa”，但不能匹配“a”或“b”。</li>\n<li><code>\\{n,m}</code> 表示之前的匹配原重复 n 到 m 遍之间，两个数字可以省略部分或全部：如 <code>a\\{3}</code>（可读作：3 个“a”）可以匹配“aaa” ，<code>a\\{,3}</code>（可读作：最多 3 个“a”）可以匹配“”、“a”、“aa”和“aaa”；两个数字都省略时等价于 <code>*</code>，也就是之前的匹配原可以重复零次或多次。</li>\n<li><code>\\(</code> 和 <code>\\)</code> 括起一个模式，将其组成为单个匹配原：如 <code>\\(foo\\)\\?</code> 可以表示单词“foo”出现零次或一次。<code>\\(</code> 和 <code>\\)</code> 还有一个附加作用，是捕获匹配的内容，按 <code>\\(</code> 出现的先后顺序，可以用 <code>\\1</code>、<code>\\2</code> 到 <code>\\9</code> 来引用。如果你不需要捕获匹配内容的话，用 <code>\\%(</code> 和 <code>\\)</code> 的性能更高。</li>\n<li><code>\\&amp;</code> 是分支内多个邻接（concat）的分隔符，概念上可以和<strong>与</strong>操作相比，表示每一项都需要匹配成功，然后取最后一项的结果返回：如 <code>.*foo.*\\&amp;.*bar.*</code> 匹配同时出现了“foo”和“bar”的完整行。相对来讲，<code>\\&amp;</code> 没那么常用。</li>\n<li><code>\\|</code> 是多个分支的分隔符，概念上可以和<strong>或</strong>操作相比，表示任意一项匹配成功即可：如 <code>foo\\|bar</code> 可匹配“foo”或“bar”两单词之一。</li>\n</ul><p>接下来，我再和你分享 13 个特殊模式项。虽然它们相对来说不那么必需，但掌握它们可以大大地提高程序员的编辑效率。</p><ul>\n<li><code>\\&lt;</code> 匹配单词的开头</li>\n<li><code>\\&gt;</code> 匹配单词的结尾</li>\n<li><code>\\s</code> 匹配空白字符 <code>&lt;Space&gt;</code> 和 <code>&lt;Tab&gt;</code></li>\n<li><code>\\S</code> 匹配非空白字符</li>\n<li><code>\\d</code> 匹配数字，相当于 <code>[0-9]</code></li>\n<li><code>\\D</code> 匹配非数字，相当于 <code>[^0-9]</code></li>\n<li><code>\\x</code> 匹配十六进制数字，相当于 <code>[0-9A-Fa-f]</code></li>\n<li><code>\\X</code> 匹配非十六进制数字，相当于 <code>[^0-9A-Fa-f]</code></li>\n<li><code>\\w</code> 匹配单词字符，相当于 <code>[0-9A-Za-z_]</code></li>\n<li><code>\\W</code> 匹配非单词字符，相当于 <code>[^0-9A-Za-z_]</code></li>\n<li><code>\\h</code> 匹配单词首字符，相当于 <code>[A-Za-z_]</code></li>\n<li><code>\\H</code> 匹配非单词首字符，相当于 <code>[^A-Za-z_]</code></li>\n<li><code>\\c</code> 忽略大小写进行匹配</li>\n</ul><p>以上我们讨论的实际上是 Vim 缺省设置下的正则表达式。通过选项（<a href=\"https://yianwillis.github.io/vimcdoc/doc/pattern.html#%2Fmagic\"><code>:help /magic</code></a>），我们可以对哪些字符有特殊意义进行一定程度的调整。不过一般情况下，我认为修改这个选项只会造成混乱、增加心智负担，因此我也就不在这儿展开了。</p><h3>搜索实例</h3><p>抽象地讨论正则表达式恐怕你也不容易记住，我们还是拿一些具体的例子来看一下吧。</p><p>首先，如果<strong>我们要查找某个函数，该怎么做呢？</strong>简单，按下 <code>/</code>，然后输入函数名，回车，不就行了？</p><p>错。这种方式对函数名是部分匹配，你搜 <code>begin</code> 还会得到 <code>begin1</code>、<code>_begin</code> 之类的结果。正确的方法是，要在前后加上匹配单词头尾的标记，如，<code>\\&lt;begin\\&gt;</code>。</p><p>顺便说一句，被誉为最有用的 Vim 提示，是把光标移到希望搜索的关键字上，然后按下 <code>*</code> 键。Vim 会提取光标下的关键字，并自动添加 <code>\\&lt;</code> 和 <code>\\&gt;</code> 进行搜索。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/4e/d037c4d999ccb36edc8886f1f507c14e.gif?wh=1372*1162\" alt=\"Fig7.1\" title=\"使用 * 搜索的示例；注意“unexpected”并没有被高亮\"></p><p>如果我要搜索 <code>begin</code> 或 <code>end</code> 呢？我想，你应该已经知道了，是：<code>/\\&lt;\\(begin\\|end\\)\\&gt;</code>。注意，写成 <code>/\\&lt;begin\\|end\\&gt;</code> 可是不对的。（为什么？你想明白了吗？）</p><p>对于 HTML，你应该多多少少有些了解。<strong>如果我们想匹配一下 HTML 标签的话，该怎么做呢？</strong></p><p>一个标签以 <code>&lt;</code> 开始，以 <code>&gt;</code> 结束。所以，最简单的模式应该是 <code>&lt;.\\+&gt;</code>，对吗？</p><p>不对，这个写法忽略了一行里可能有多个标签的事实：对于“&lt;h1&gt;title&lt;/h1&gt;”这样一个字符串，上面这个简单的模式会匹配整个字符串，而不是“&lt;h1&gt;”和“&lt;/h1&gt;”……</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/1d/c80f8930b2934cd315c6560dd31c661d.png?wh=1254*1002\" alt=\"Fig7.2\" title=\"HTML 标签的错误匹配\"></p><p>有一种解决方案是，排除不应该匹配的字符，把模式写成 <code>&lt;[^&gt;]\\+&gt;</code>：一对尖括号里有一个或多个不是“&gt;”的字符。不过，这样的写法会让像 <code>&gt;</code> 这样的结尾字符在模式中重复出现，因此这并不是最理想的写法。更好的方式是，使用最短匹配。</p><h3>最长匹配和最短匹配</h3><p>我们上面学到的 <code>*</code>、<code>\\?</code>、<code>\\+</code> 和 <code>\\{}</code> 都属于最长匹配（也叫贪婪匹配），也就是说，当模式既可以匹配一个较长的字符串，也可以匹配一个较短的字符串时，结果会是那个较长的字符串。</p><p>相应地，还有一种匹配叫做最短匹配，也就是在同时可以匹配较长的字符串和较短的字符串时，产生较短的匹配。在 Vim 里，最短匹配只有一种形式，<code>{-n,m}</code>，其意义和之前说的 <code>{n,m}</code> 基本相同，但结果是较短而非较长的字符串。</p><p>以上面的 HTML 标签匹配为例，使用最短匹配的话，我们可以把模式写成 <code>&lt;.\\{-1,}&gt;</code>，要求在一对尖括号里至少有一个字符，但越短越好。</p><h3>搜索加亮和取消</h3><p>如果你一边学一边在试验的话，就会发现，Vim 缺省在你输入搜索模式时就会高亮跟你输入的模式匹配的文本。这对验证你输入的模式是否正确，以及进行进一步的编辑，都是非常方便和重要的。用惯了 Vim，就会把它当成是一件理所当然的事——直到你被迫使用其他编辑器时才发现，一边输入正则表达式一边就能看到匹配的结果，原来不是谁都这样做的啊……</p><p>但也有些时候，我们已经做完了搜索或替换，和模式匹配的文本内容仍然还高亮着，非常碍眼。有些人就会随便搜索一个不存在的字符串来取消加亮，但这显然不是一种高效的处理方式。事实上，Vim 有一个专门命令来取消搜索加亮，这个命令就是 <code>:nohlsearch</code>，不要高亮搜索。</p><p>鉴于这个命令使用的频度实在是太高了，我们需要给它专门分配一个快捷键。请在 vimrc 中加入：</p><pre><code class=\"language-vim\">\" 停止搜索高亮的键映射\nnnoremap &lt;silent&gt; &lt;F2&gt;      :nohlsearch&lt;CR&gt;\ninoremap &lt;silent&gt; &lt;F2&gt; &lt;C-O&gt;:nohlsearch&lt;CR&gt;\n</code></pre><p>这样一来，在搜索或替换工作完成之后，只要按下 <code>&lt;F2&gt;</code> 就可以取消搜索加亮了。</p><hr><p>好，关于正则表达式的搜索部分，我们暂时就先学到这里。下面我们来看一下替换。</p><h2>正则表达式替换</h2><p>你可能要说了：替换不就是找到跟模式匹配的字符串，然后把它换成另外一个字符串么，有什么复杂的？</p><p>事实上，还真是有些复杂情况的。你在看下面这些复杂的替换情况时，也可以同时考虑下自己有没有解决方案：</p><ul>\n<li>你可能要保留匹配中的某些字符，而替换另外一些字符</li>\n<li>你可能要对匹配出的内容做大小写转换</li>\n<li>你可能需要“计算”出替换结果</li>\n<li>你可能需要决定一行里要替换单次还是多次，是自动替换还是要一一确认，等等</li>\n</ul><p>接下来，我们就分别看看这些复杂情况。</p><p>在这些情况里，最常用的显然就是<strong>在替换结果中保留匹配出的字符串</strong>了。前面说到 <code>\\(\\)</code> 除了将一个模式转变成匹配原外，还有一个作用是捕捉匹配的内容，按 <code>\\(</code> 的出现顺序依次编号为 1 到 9，并可以在模式和替换字符串中用 <code>\\1</code> 到 <code>\\9</code> 来访问。如果要在替换字符串中完整使用匹配内容的话，则可以使用 <code>\\0</code> 或 <code>&amp;</code>（字符“&amp;”也因此要在替换字符串中写成 <code>\\&amp;</code>）。</p><p>从搜索的角度，我们一般只关心匹配与否，而不关心匹配的大小。举个例子，如果我想找出作为函数调用的 <code>begin</code>，那我可以写成 <code>\\&lt;begin(</code>，虽然 <code>(</code> 不是我想匹配的内容（函数名称）的一部分。但从替换的角度，我需要在替换时再处理一下多匹配的内容，也是件麻烦事；在非匹配的内容比较复杂或者会变化的时候，尤其会是这样。所以 Vim 里还有专门标识匹配开始和结束的匹配原，分别是 <code>\\zs</code> 和 <code>\\ze</code>。对于这个例子，搜索模式就应该是 <code>\\&lt;begin\\ze(</code>。为了巩固前面学到的知识，你应该知道，这个模式也可以啰嗦地写成 <code>\\&lt;begin(\\&amp;begin</code> 或 <code>\\&lt;begin(\\&amp;.....</code>。</p><p>Vim 里还有一些<strong>大小写转换的特殊替换字符串</strong>。它们是：</p><ul>\n<li><code>\\U</code> 把下面的字符变成大写，直到 <code>\\E</code> 出现</li>\n<li><code>\\u</code> 把下一个字符变成大写</li>\n<li><code>\\L</code> 把下面的字符变成小写，直到 <code>\\E</code> 出现</li>\n<li><code>\\l</code> 把下一个字符变成小写</li>\n<li><code>\\E</code> 结束大小写转换</li>\n</ul><p>Vim 还能用 <code>\\=</code> 开始一个返回字符串的表达式，用来<strong>计算出一个替换结果</strong>。鉴于我们目前还没有讨论 Vim 脚本，这个我们就留到后面第 14 讲再说了。</p><p>跟常用的编程语言一样，Vim 的正则表达式中支持 <code>\\t</code>、<code>\\r</code>、<code>\\n</code> 等特殊转义字符，但在替换表达式中，由于一些技术原因（<a href=\"https://yianwillis.github.io/vimcdoc/doc/pattern.html#NL-used-for-Nul\"><code>:help NL-used-for-Nul</code></a>），<code>\\n</code> 插入的是空字符（NUL 或“\\0”），而非在模式中出现时代表的 LF。如果要插入正常的行尾符 LF 的话，我们得使用 <code>\\r</code>。这意味着如果想把一个回车变成两个的话，我们得别扭地写 <code>:s/\\n/\\r\\r/</code>，略遗憾。如果有特殊需要得插入 CR 的话，就要更别扭地输入 <code>\\&lt;C-V&gt;&lt;CR&gt;</code> 才行。还好，我们基本不会在替换时遇到要插入 CR 的情况……</p><p><strong>Vim 有很多用来控制替换的标志</strong>，你可以通过 <a href=\"https://yianwillis.github.io/vimcdoc/doc/change.html#:s_flags\"><code>:help s_flags</code></a> 查看详细的介绍，我就不一一列举了。今天这一讲中，我们只会用到最常用的一个标志，<code>g</code>，代表可以在一行内进行多次替换；没有这个标志的话，Vim 在一行里只会对第一个成功的匹配进行替换。</p><h3>替换实例</h3><p>同样，我们还是通过例子来巩固一下对正则表达式替换的理解。</p><p>先来看一个简单的，删除行尾的“//”注释。我们可以用这个命令</p><pre><code class=\"language-vim\">:%s!\\s*//.*$!!\n</code></pre><p>把零到多个空白字符后面出现的“//”直到行尾全部删除。</p><p>如果要删除“/* */”注释，那就复杂多了。首先，匹配内容可以跨行；其次，有跟 HTML 标签类似的问题，需要使用最短匹配。我们需要使用的命令是：</p><pre><code class=\"language-vim\">:%s!/\\*\\_.\\{-}\\*/!!g\n</code></pre><p>由于一行里可以有多个“/* */”注释，我们在替换命令的尾部还加上了 <code>g</code> 标志，允许一行里进行多次替换。</p><p>假设我们目前的编码规范规定，所有的函数名应该首字母大写（简单起见，我们假设所有的类名已经是首字母大写了，因而构造函数自动符合该要求，不会发生冲突；但其他很多函数名称仍然是小写字母开头），我们能不能用 Vim 的替换命令做到呢？答案也是肯定的。所有需要的知识点我们都已经讲过了，我就直接公布答案了：</p><pre><code class=\"language-vim\">:%s/\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze(/\\1\\u\\2/g\n</code></pre><p>这个命令比较长，请你慢慢体会一下，尝试去理解每一部分的意图。如果你有哪个点卡住了，可以留言给我，我再帮你详细分析一下。</p><h2>内容小结</h2><p>好了，今天的内容就讲到这里了。内容有点密集，我把要点再总结一下：</p><p>Vim 支持用 <code>/</code> 进行搜索和用 <code>:s</code> 进行替换，它们都用到了正则表达式。</p><p>在搜索的模式里，<code>.</code>、<code>*</code>、<code>^</code>、<code>$</code>、<code>~</code>、<code>[]</code>、<code>\\</code> 是有特殊含义的字符，你一定要记住它们的含义。在 <code>\\</code> 开始的特殊表达式中，最重要的是 <code>\\?</code>、<code>\\+</code>、<code>\\(\\)</code>、<code>\\|</code> 和 <code>\\{n,m}</code>。对于程序员来说，<code>\\&lt;</code>、<code>\\&gt;</code> 等匹配原对于提高编辑效率也非常重要。Vim 中的常用搜索命令 <code>*</code> 则会自动在搜索的关键字前后加上 <code>\\&lt;</code> 和 <code>\\&gt;</code>。</p><p>在替换时，我们需要特别记住 <code>\\1</code>、<code>\\2</code> 到 <code>\\9</code> 可以用来引用前面用 <code>\\(</code> 和 <code>\\)</code> 括起来的内容，字符“&amp;”出现在替换内容中需要使用反斜杠转义成 <code>\\&amp;</code>，否则代表完整的被匹配字符串。</p><p>正则表达式就可以算是一种独立的语言了，靠死记硬背是不行的。最后我还要建议你再把这一讲中的例子仔细看一下、尝试一下，多多练习是掌握正则表达式搜索和替换的必经之路。如果你日后遇到了这一讲没有覆盖的问题，可以再去查阅 Vim 的帮助文档 <a href=\"https://yianwillis.github.io/vimcdoc/doc/pattern.html#regexp\"><code>:help regexp</code></a>。</p><p>本讲我们在配置文件中只更改了一处，对应的标签是 <code>l7-unix</code> 和 <code>l7-windows</code>。</p><h2>课后练习</h2><p>有两道练习题，请你在课后尝试一下。练习对于掌握正则表达式是非常重要的。</p><ol>\n<li>\n<p>如果我要搜索“/* */”注释的话，搜索命令应该是什么样的？</p>\n</li>\n<li>\n<p>例子里只说了首字母大写，但实际的编码规范是要求把 begin_search_nocase 这样的函数名称转变成 BeginSearchNocase。请用 Vim 的替换命令完成这一任务。<strong>提示：</strong>可能需要一条以上的替换命令。</p>\n</li>\n</ol><p>我是吴咏炜，我们下一讲再见。</p>","comments":[{"had_liked":false,"id":240191,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1596784071,"is_pvip":false,"replies":[{"id":"88674","content":"就属你最牛了。这回我都了解了些新东西。😝","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1596785831,"ip_address":"","comment_id":240191,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44546457031","product_id":100055801,"comment_content":"课后练习:<br><br># 1. 如果要搜索“&#47;* *&#47;”注释的话<br>参考文中的替换正则表达式(第一个`:`是命令行模式的前缀,执行时不需要贴入.)<br>```<br>:%s!&#47;\\*\\_.\\{-}\\*&#47;!!g<br>```<br>稍作修改即可(第一个`&#47;`是查找命令的前缀,搜索时不需要贴入.)<br>```<br>&#47;\\&#47;\\*\\_.\\{-}\\*\\&#47;<br>```<br><br># 2. 把 begin_search_nocase 这样的函数名称转变成 BeginSearchNocase<br>可以分两步走:<br>1. 使用文中的命令,将首字母替换成大写<br>```<br>%s&#47;\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze(&#47;\\1\\u\\2&#47;g<br>```<br>2. 将函数名中`_`后面的字符替换成大写:<br>```<br>%s&#47;\\&lt;_*[A-Z]\\zs\\(\\w*\\)\\ze(&#47;\\=substitute(submatch(1),&#39;_\\+\\(\\w\\)&#39;,&#39;\\=toupper(submatch(1))&#39;,&#39;g&#39;)&#47;g<br>```<br><br>测试用例<br>替换前:<br>```<br>begin_search_nocase()<br>beGin_seaRch_noCase()<br>_beGin_seaRch_nocase_100_()<br><br>```<br>替换后:<br>```<br>BeginSearchNocase()<br>BeGinSeaRchNoCase()<br>_BeGinSeaRchNocase100_()<br>```<br><br>3. 两步合一步的搞法:(不太推荐)<br>```<br>%s&#47;\\&lt;_*\\zs\\([a-zA-Z]\\w*\\)\\ze(&#47;\\=substitute(substitute(submatch(1),&#39;^&#39;,&#39;_&#39;,&#39;&#39;),&#39;_\\+\\(\\w\\)&#39;,&#39;\\=toupper(submatch(1))&#39;, &#39;g&#39;)&#47;g<br>```<br>a. 使用`\\zs\\([a-zA-Z]\\w*\\)\\ze(`找到函数名的边界<br>b. 将提取出来的名称添加前缀`_`,方便后面的替换.`substitute(submatch(1),&#39;^&#39;,&#39;_&#39;,&#39;&#39;)`<br>c. 将名称中`_`后面的字符替换成大写.`substitute(&#39;步骤b返回的结果&#39;,&#39;_\\+\\(\\w\\)&#39;,&#39;\\=toupper(submatch(1))&#39;, &#39;g&#39;)`<br><br>4. 测试用例单词中间的大写字母并没变,按理说是需要变成小写的.<br>这个正则可以做到:<br>```<br>%s&#47;\\&lt;_*\\zs\\([a-zA-Z]\\w*\\)\\ze(&#47;\\=substitute(substitute(submatch(1),&#39;\\C\\(_\\)\\=\\(.\\)&#39;,&#39;\\=submatch(1)==&quot;&quot;?tolower(submatch(2)) : toupper(submatch(2))&#39;, &#39;g&#39;),&#39;^.&#39;,&#39;\\u&amp;&#39;, &#39;g&#39;)&#47;g<br>```<br>实现的效果是:<br>```<br>BeginSearchNocase()<br>BeginSearchNocase()<br>_BeginSearchNocase100_()<br>```<br><br># 开心的带货环节<br><br>强烈推荐一个vim中多光标的插件 [vim-visual-multi](https:&#47;&#47;github.com&#47;mg979&#47;vim-visual-multi)<br>我以前都是用`.`命令,或者宏来实现类似的效果,但是并不直观和方便.<br><br>第四个正则并不是我想到的,我只是把插件[vim-visual-multi](https:&#47;&#47;github.com&#47;mg979&#47;vim-visual-multi&#47;blob&#47;cb994375fcbf032adfef6d31d8fcfa59bab381c8&#47;autoload&#47;vm&#47;special&#47;case.vim#L22-L34) 中的代码拿来改了一下.<br><br>这个插件可以在vim中实现多光标编辑,实现Sublime中的那种效果.<br>我觉得比Sublime中的多行编辑还厉害多了.<br>就连7.5k stars的[vim-multiple-cursors](https:&#47;&#47;github.com&#47;terryma&#47;vim-multiple-cursors)都推荐使用`vim-visual-multi`.<br><br>可惜谷歌上都无法搜索到该插件的中文介绍.<br><br>--<br>如果是课后练习2中的需求,使用该插件,就非常非常简单了.<br>1. 在搜索命令中查找要匹配的函数名:(第一个`&#47;`不需要贴入)<br>```<br>&#47;\\&lt;_*\\zs[a-zA-Z]\\w*\\ze(<br>```<br>2. 在普通模式中全选文件内容 `ggVG`<br>3. 用插件的多光标来选中上次搜索的内容`&lt;leader&gt;&lt;leader&gt;f`<br>4. 唤出插件的字符转换功能`&lt;leader&gt;&lt;leader&gt;C`<br>   [:help vm-case-conversion] 有很多种转换规则,下划线转驼峰只是其中的一个功能.<br>5. 使用其中的`P`选项即可实现效果.<br><br>","like_count":11,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503368,"discussion_content":"就属你最牛了。这回我都了解了些新东西。😝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596785831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240149,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1596770728,"is_pvip":false,"replies":[{"id":"88669","content":"很好的经验分享。👍","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1596785369,"ip_address":"","comment_id":240149,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27366574504","product_id":100055801,"comment_content":"# 又是一篇非常全面的课程.<br>如果是0基础的人看了,估计就要入门到放弃了.哈哈.<br>正则本身就有点小复杂,再加上vi中有些模式跟主流的还不太一样.<br><br># 今天学到的新知识:<br>在正则中,我之前虽然也知道vim有贪婪模式和最短匹配,但是真没细究过.<br>今天看了老师的`&lt;.\\{-1,}&gt;`和`:%s!&#47;\\*\\_.\\{-}\\*&#47;!!g`,才知道这东西写起来也不复杂.<br>具体的可以查看帮助: `:help &#47;multi`<br>\t \\{-}    \\{-}    0 或更多        尽可能少<br><br># 我介绍下搜索中,我非常常用的特殊模式项:<br>`\\c` : 强制忽略大小消息<br>`\\C` : 强制开启大消息匹配<br>(`\\v`和`\\V`用的不多,但知道是怎么回事.)<br><br>另外,我一般会开启搜索相关的两个选项:<br>    set ignorecase                  &quot; Case insensitive search<br>    set smartcase                   &quot; Case sensitive when uc present<br>忽略大消息 和 智能大小写.<br>在查询的内容中有大写字母时,就区分大小写,否则就是不区分.<br>在确定只需要查询小写字母时,需要在搜索模式中加上`\\c`.<br><br># 补充下普通模式下的全字匹配光标所在的关键字<br>向后搜索<br>`*` : 是全字匹配,会在搜索关键字前后自动添加`\\&lt;`和`\\&gt;`<br>`g*`: 不开启全字匹配,不自动添加`\\&lt;`和`\\&gt;`<br>对应的还有 向前搜索<br>`#` : 全字匹配<br>`g#`: 不开启全字匹配<br><br>vim中的命令繁多,还是配套起来记记得更牢.<br><br># 对于取消搜索高亮,我也有这种需求.<br>我也是映射了快捷键,但只映射了普通模式的,没有映射插入模式的.<br>我的方式是在普通模式下,按删除键时,附带的取消高亮.<br>    nnoremap &lt;silent&gt; &lt;BS&gt; &lt;BS&gt;:nohlsearch&lt;CR&gt;<br>我也见过用如下按键映射的:<br>    nnoremap &lt;silent&gt; &lt;leader&gt;&#47; :nohlsearch&lt;CR&gt;<br>由于我的键盘上不方便按F1-12,所以可选择的映射键并不多.<br>","like_count":6,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503355,"discussion_content":"很好的经验分享。👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596785369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240301,"user_name":"Leoorz","can_delete":false,"product_type":"c1","uid":1030657,"ip_address":"","ucode":"8912628AD6ADE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","comment_is_top":false,"comment_ctime":1596856459,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10186791051","product_id":100055801,"comment_content":"vim下的正则、替换、匹配新知识整理：<br>1. \\zs \\ze的用法<br>:help ordinary-atom<br>&#47;\\zs  零宽断言左侧匹配 -- Matches at any position, and sets the start of the match there:<br>                                        The next char is the first char of the whole match.<br><br>&#47;\\ze  零宽断言右侧匹配 -- Matches at any position, and sets the end of the match there:<br>                                        The previous char is the last char of the whole match.<br><br>模板待匹配文本:<br>def __abc_def_hig(int a, int b)<br><br>vim匹配示例:<br>1.1 &#47;def\\zs_hig       -&gt;  _hig<br>1.2 &#47;def\\zs_hi\\zeg  -&gt;  _hi<br>1.3 &#47;def\\zshig         -&gt;  no match<br>1.4 &#47;def\\zs_hi\\zeg   -&gt;  _hi<br>1.5 &#47;def\\zs_hi\\ze(    -&gt;  no match<br><br>2. 非贪婪匹配模式<br>:help \\{-<br>\\{-n,m} matches n to m of the preceding atom, as few as possible<br>\\{-n}   matches n of the preceding atom<br>\\{-n,}  matches at least n of the preceding atom, as few as possible<br>\\{-,m}  matches 0 to m of the preceding atom, as few as possible<br>\\{-}    matches 0 or more of the preceding?? atom, as few as possible<br><br>vim中只有 {- 可以表示贪婪模式, 所以vim下表示 * + ? 三种量词的贪婪模式如下:<br>\\{-}    表示普通模式下的 *?<br>\\{-1,}  表示普通模式下的 +?<br>\\{-,1}  表示普通模式下的 ??<br><br>待匹配文本:<br>&lt;html&gt;<br>    &lt;head&gt; abbc def &lt;&#47;head&gt; &lt;p&gt; p1 &lt;&#47;p&gt;<br>&lt;&#47;html&gt;<br><br>vim匹配示例:<br>2.1 &#47;&lt;.*&gt;        -- 整行贪婪匹配, 首个&lt;与最后一个&gt;<br>2.2 &#47;&lt;.\\{-1,}&gt;   -- 匹配每个标签&lt;xxx&gt;<br><br>3. 单行模式(?s)<br>vim中使用 \\_. 表示单行模式, .原本只匹配非换行符的任意字符, 单行模式下匹配任意字符<br><br>4. 替换模式下可以使用自定义分隔符进行规避对串中的&#47;的进行转义<br>abc&#47;def&#47;haha&#47;xixi<br>vim示例:<br>4.1 :s&#47;abc\\&#47;def\\&#47;haha&#47;tihuan&#47;gc 使用默认&#47;作为分隔符, 可以看到并不易读<br>4.2 :s!abc&#47;def&#47;haha!tihuan!c    使用!作为分隔符<br><br>5. 替换字符串中, &amp;有特殊含义, 表示匹配的整个字符串<br><br>6. 容易记混的几个特殊字符:<br>有特殊含义的几个关键字符:<br>. * ^ $ []<br>需要转义的几个关键字符:<br>量词: \\? \\+ \\{m,n}<br>分组: \\(...\\|...\\)<br>位置: \\&lt; \\&gt;","like_count":2,"discussions":[{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297584,"discussion_content":"\\{- 非贪婪，笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596977942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241606,"user_name":"Ranger","can_delete":false,"product_type":"c1","uid":1248811,"ip_address":"","ucode":"7C5FD9187B281B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/2b/af4a43cb.jpg","comment_is_top":false,"comment_ctime":1597369367,"is_pvip":false,"replies":[{"id":"89260","content":"不是，就是处理标识符以“_”开始的情况。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597452709,"ip_address":"","comment_id":241606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892336663","product_id":100055801,"comment_content":":%s&#47;\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze(&#47;\\1\\u\\2&#47;g<br>你好，想问一下，\\&lt;\\(_*\\) ， 这里的 _ 是换行符的意思吗？ ","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503785,"discussion_content":"不是，就是处理标识符以“_”开始的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597452709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240072,"user_name":"Adoy","can_delete":false,"product_type":"c1","uid":1029966,"ip_address":"","ucode":"6D11EBAD640E6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b7/4e/d71e8d2f.jpg","comment_is_top":false,"comment_ctime":1596737685,"is_pvip":false,"replies":[{"id":"88667","content":"已经用了。极客时间的展示没有背景加灰，有时候不够明显。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1596785215,"ip_address":"","comment_id":240072,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891704981","product_id":100055801,"comment_content":"感谢老师用心分享，里面的知识都十分实用！有一个平板的小建议，正则表达式的命令能否用行内代码（markdown里应该是&#39;`&#39; 和 &#39;`&#39; )，看得眼花缭乱哈哈哈","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503328,"discussion_content":"已经用了。极客时间的展示没有背景加灰，有时候不够明显。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596785215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342035,"user_name":"阿鸡","can_delete":false,"product_type":"c1","uid":1589246,"ip_address":"","ucode":"F181422D4EB444","user_header":"https://static001.geekbang.org/account/avatar/00/18/3f/fe/35d1afbd.jpg","comment_is_top":false,"comment_ctime":1649985388,"is_pvip":false,"replies":[{"id":"125032","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1650027164,"ip_address":"","comment_id":342035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649985388","product_id":100055801,"comment_content":"2.  %s!\\(\\&lt;\\|_\\)\\([a-z]\\)!\\U\\2!g  <br>","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563574,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650027165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278775,"user_name":"Alvin-L","can_delete":false,"product_type":"c1","uid":1603052,"ip_address":"","ucode":"5AC96AAB75B720","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/ec/c60b29f5.jpg","comment_is_top":false,"comment_ctime":1613313929,"is_pvip":false,"replies":[{"id":"101374","content":"学习很努力啊。理解正确。<br><br>新年快乐！","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1613489817,"ip_address":"","comment_id":278775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613313929","product_id":100055801,"comment_content":":%s&#47;\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze(&#47;\\1\\u\\2&#47;g<br>[ 关键是要理解中间这段的意思(从:%s&#47;之后,一直到末尾&#47;g之前),<br>由于命令没有使用!,所以这条替换命令&#47;是作为功能符使用,&#47;前为模式串,&#47;后是替换串<br>1,模式串 \\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze( ,<br>2,替换串 \\1\\u\\2 <br>模式串再分成了四段 \\&lt; , \\(_*\\) , \\([a-z]\\w*\\) , &#47;ze( <br>\\&lt; 表示一个单词的开头<br>\\(_*\\): 分3节,最开头的 \\( 与末尾的 \\) 表示捕获包起来的内容作为一个分组,并将分组分配为1号,而中间包起来的 _* 表示重复出现任意次(0次1次多次)的下划线_<br>\\([a-z]\\w*\\) 也分3节,  \\( 与 \\) 捕获分组2号.中间的[a-z]\\w* 表示一个小写字母后跟着可重复出现任意次的单词<br>&#47;ze( 表示模式串匹配的结尾必须紧跟着&#39;(&#39;但不包括&#39;(&#39;<br><br>替换部分分成两段\\1 , \\u\\2 <br>\\1 表示在模式串匹配中捕捉到的1号分组的内容(即0个或多个下划线_)<br>\\u\\2 表示在模式串匹配中捕捉到的2号分组的内容(即1个小写字符跟着0个或多个标识符),将其第一个字符(即匹配里值得的那个小写字符)变为大写  <br><br>所以整个意思就是: 匹配到以下划线_开始(或者没有下划线_)第一个字符是小写字符后面跟着任意长度的标识符的字符串(且该字符串紧跟着左圆括号,但不包括左圆括号).然后将第一个小写字符变为大写字符<br>]  ","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515495,"discussion_content":"学习很努力啊。理解正确。\n\n新年快乐！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613489817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272508,"user_name":"pearl刘东洋","can_delete":false,"product_type":"c1","uid":2027794,"ip_address":"","ucode":"EB50A5726285C5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f1/12/c40d07bc.jpg","comment_is_top":false,"comment_ctime":1610103057,"is_pvip":true,"replies":[{"id":"98803","content":"1. 就是指“&lt;[^&gt;]\\+&gt;”里把“&gt;”重复了的情况。<br><br>2. 嗯嗯，是打字错误。我回头更正一下。谢谢。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1610155385,"ip_address":"","comment_id":272508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610103057","product_id":100055801,"comment_content":"两个疑问<br>1、不过，这样的写法会让像 &gt; 这样的结尾字符在模式中重复出现，因此这并不是最理想的写法——这句没太理解，有同学帮忙举例子解释一下吗？<br>2、\\H 匹配非单词首字符，相当于 ^[A-Za-z_]<br>这句应该是<br>\\H 匹配非单词首字符，相当于 [^A-Za-z_]<br>吧","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513296,"discussion_content":"1. 就是指“&amp;lt;[^&amp;gt;]\\+&amp;gt;”里把“&amp;gt;”重复了的情况。\n\n2. 嗯嗯，是打字错误。我回头更正一下。谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610155385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259847,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1604852746,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604852746","product_id":100055801,"comment_content":"打卡学习，内容较多需要慢慢消化和练习啊。","like_count":0},{"had_liked":false,"id":243190,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1597988948,"is_pvip":false,"replies":[{"id":"89700","content":":s 后面的符号是替换的间隔符，但有一定的限制范围。见 :help pattern-delimiter。“:s&#47;搜索&#47;替换&#47;标志”、“:s!搜索!替换!标志”、“:s#搜索#替换#标志”等等都可以的。<br><br>对，最后一个替换命令里，\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze( 是搜索模式，\\1\\u\\2 是替换模式。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598096189,"ip_address":"","comment_id":243190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597988948","product_id":100055801,"comment_content":"替换那边不是很理解，之前一直以为替换是像下面的格式，匹配的内容和替换的内容中间用空格分开<br><br>:%s matchpattern replacepattern<br><br>上面 3 个替换的例子，我尝试理解：<br><br>:%s!\\s*&#47;&#47;.*$!!<br><br>! 可以代替 \\, 是不是表示的就是替换后的内容，这里可以理解为直接删除。后面的 \\s*&#47;&#47;.*$!! 表示的是需要在文本中搜索的内容<br><br>:%s!&#47;\\*\\_.\\{-}\\*&#47;!!g<br><br>按上面的理解方式，第二个例子也是类似的，只不过需要搜索的内容是 &#47;\\*\\_.\\{-}\\*&#47;!!，另外最后的 g 表示一行内允许多次搜索<br><br>:%s&#47;\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze(&#47;\\1\\u\\2&#47;g<br><br>到这里就不是太理解了，\\&lt;\\(_*\\)\\([a-z]\\w*\\)\\ze( 表示的是需要搜索匹配的内容，后面才是需要替换的内容？<br><br>感觉主要是 ! 和 &#47; 还有 \\ 这三个东西放在一起，看得是真的有点混淆它们具体的意义。还请老师解答一下替换的结构","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504215,"discussion_content":":s 后面的符号是替换的间隔符，但有一定的限制范围。见 :help pattern-delimiter。“:s/搜索/替换/标志”、“:s!搜索!替换!标志”、“:s#搜索#替换#标志”等等都可以的。\n\n对，最后一个替换命令里，\\&amp;lt;\\(_*\\)\\([a-z]\\w*\\)\\ze( 是搜索模式，\\1\\u\\2 是替换模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598096189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242154,"user_name":"__@948CSheLL","can_delete":false,"product_type":"c1","uid":2091669,"ip_address":"","ucode":"3799653724B8FC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ea/95/3f2539cc.jpg","comment_is_top":false,"comment_ctime":1597625772,"is_pvip":false,"replies":[{"id":"89403","content":"% 代表所有行。也可以用“起始行号,结束行号&quot;的写法。不写，就只替换当前行了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597641282,"ip_address":"","comment_id":242154,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597625772","product_id":100055801,"comment_content":"老师您好，我想请问一下【:%s】和【:s】有什么区别？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503942,"discussion_content":"% 代表所有行。也可以用“起始行号,结束行号&amp;quot;的写法。不写，就只替换当前行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597641282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240990,"user_name":"Rock","can_delete":false,"product_type":"c1","uid":2078382,"ip_address":"","ucode":"EAC04BDC86B271","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b6/ae/38a37a83.jpg","comment_is_top":false,"comment_ctime":1597143947,"is_pvip":false,"replies":[{"id":"89079","content":"我也和你一样，靠搜索查有哪些教程。先自己看看吧，有没有适合自己的。没免费的好教程的话，可以考虑极客时间的，哈哈。还有，就是直接看文中的例子，通过例子去理解。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597155316,"ip_address":"","comment_id":240990,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597143947","product_id":100055801,"comment_content":"正则表达式有没有什么简单入门的教程","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503615,"discussion_content":"我也和你一样，靠搜索查有哪些教程。先自己看看吧，有没有适合自己的。没免费的好教程的话，可以考虑极客时间的，哈哈。还有，就是直接看文中的例子，通过例子去理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597155316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240702,"user_name":"YouCompleteMe","can_delete":false,"product_type":"c1","uid":1232859,"ip_address":"","ucode":"89B5A75DA85E0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cf/db/9693d08f.jpg","comment_is_top":false,"comment_ctime":1597040820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597040820","product_id":100055801,"comment_content":"2.<br><br>%s&#47;\\(\\&lt;\\|_\\)\\([a-z]\\)&#47;\\u\\2&#47;g","like_count":0},{"had_liked":false,"id":240314,"user_name":"Leoorz","can_delete":false,"product_type":"c1","uid":1030657,"ip_address":"","ucode":"8912628AD6ADE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","comment_is_top":false,"comment_ctime":1596858005,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1596858005","product_id":100055801,"comment_content":"课后练习:<br>1. 匹配 &#47;*...*&#47;<br>&#47;\\&#47;\\*\\_.\\{-}\\*\\&#47;  考虑最短匹配<br>2. begin_search_nocase 替换为 BeginSearchNocase 格式<br>:s&#47;\\(_*\\)\\([a-z]\\+\\)&#47;\\u\\2&#47;gc<br>写完这个表达式后，在想这个思考题的应用场景，比如全局替换<br>将所有 begin_search_nocase 的格式的函数定义、声明、使用的地方全部都替换为 BeginSearchNocase 格式，显然是行不通的，抛个问题大家可以讨论讨论","like_count":0,"discussions":[{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297356,"discussion_content":"你最后的这个问题,可以试试我说的这个插件 [vim-visual-multi](https://github.com/mg979/vim-visual-multi)\n\n只需要写一个能匹配到所有需要替换的变量名,剩下的事情就交给插件了.\n\n理想中的情况是:\n1. 录制一个宏(就是我的回复中提到的那几个步骤)\n2. 然后在所有打开的文件中执行该宏.\n3. 完事.\n\n可惜的是,我在每个buffer中单独手动执行宏,是可以的.但是放在bufdo中执行,就有点小问题.\n等我去提交一个Issue.������\n(这个作者的响应的速度超级快,我上次提交的问题,别人当天就给我解决了.)\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596884652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297586,"discussion_content":"赞赞，我用一下😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596978065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297356,"ip_address":""},"score":297586,"extra":""}]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297409,"discussion_content":"插件作者回复了, 这个`bufdo`和类似的命令禁用了许多自动命令以提高速度.所以,他这个插件也做不了啥.\n\n所以,我又尝试了其他方式,重新录制一个新宏,是可以实现这个效果的.\n就是在原来宏的基础上,加一个切换到下一个缓冲区的功能.即执行`:bnext`.\n\n然后使用数字+宏的方式来执行,这样就可以在所有的缓冲区上执行了.\n比如之前的宏是@a,那么就执行100@a,让这个宏执行100次.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596904552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240261,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1596812926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596812926","product_id":100055801,"comment_content":"有没有人遇到过 装了 nerdtree-git-plugin 但是却不显示git状态。<br>已经设置了mapCustom。<br>好气呀 也不报错， 也搜不到什么问题。","like_count":0}]}