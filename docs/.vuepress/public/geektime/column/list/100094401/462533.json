{"id":462533,"title":"加餐02｜深入TypeScript","content":"<p>你好，我是大圣。</p><p>在讲组件化的进阶开发篇之前，我想在全家桶实战篇的最后，用一讲的篇幅，来专门聊一下TypeScript。希望你在学完这一讲之后，能对TypeScript有一个全面的认识。</p><p>另外，今天我会设置很多实战练习，一边阅读一边敲代码的话，学习效果更好。而且，这次加餐中的全部代码都是可以在线完成的，建议你打开<a href=\"https://www.typescriptlang.org/play?#code/FAehAJC+9Q66MA3lHnrQMhGGO5QgB6F+E9gnU0AByhZBKA\">这个链接</a>，把下面的每行代码都跟着敲一遍。</p><h2>TypeScript入门</h2><p>对于TypeScript，你首先要了解的是，TypeScript 可以在JavaScript的基础上，对变量的数据类型加以限制。TypeScript 中最基本的数据类型包括布尔、数字、字符串、null、undefined，这些都很好理解。</p><p>在下面的代码中，我们分别定义了这几个数据类型的变量，你能看到，当我们把number类型的变量price赋值字符串时，就会报错，当我们把数组 me 的第一个元素 me[0] 的值修改为数字时，也会报错。</p><pre><code class=\"language-typescript\">let courseName:string = '玩转Vue 3全家桶'\nlet price:number = 129\nprice = '89' //类型报错\nlet isOnline:boolean = true\nlet courseSales:undefined\nlet timer:null = null\nlet me:[string,number] = [\"大圣\",18]\nme[0] = 1 //类型报错\n</code></pre><!-- [[[read_end]]] --><p>当你不确定某个变量是什么类型时，你可以使用any作为这个变量的类型。你可以用any标记任何属性，可以修改任何数据，访问任何方法也不会报错。也就是说，在TypeScript中，当你把变量的类型标记为any后，这个变量的使用就和JavaScript没啥区别了，错误只会在浏览器里运行的时候才会提示。</p><pre><code class=\"language-typescript\">let anyThing\nlet anyCourse :any = 1\nanyCourse = 'xx'\nconsole.log(anyCourse.a.b.c)\n</code></pre><p>然后我们可以使用enum去定义枚举类型，这样可以把类型限制在指定的场景之内。下面的代码中我们可以把课程评分限制在好、非常好和嘎嘎好三个值之内。</p><pre><code class=\"language-typescript\">enum 课程评分 {好,非常好,嘎嘎好}\nconsole.log(课程评分['好']===0)\nconsole.log(课程评分[0]==='好')\nlet scores = [课程评分['好'], 课程评分['嘎嘎好'], 课程评分['非常好']]\n\n</code></pre><p>然后我们可以通过学到的这些基础类型，通过组合的方式组合出新的类型，最常见的组合方式就是使用 | 实现类型联合。下面的代码中我们定义course1变量的类型为字符串或者数字，赋值为这两个类型都不会报错，还可以用来限制变量只能赋值为几个字符串的一个，score的取值只能是代码中三个值之一。</p><pre><code class=\"language-typescript\">let course1 : string|number = '玩转vue 3'\ncourse1 = 1\ncourse1 = true // 报错\n\ntype courseScore = '好' | '非常好' | '嘎嘎好'\nlet score1 :courseScore = '好'\nlet score2 :courseScore = '一般好' // 报错\n</code></pre><p>通过interface接口可以定义对象的类型限制。下面代码中我们定义了极客时间课程的类型，课程名是字符串，价格使用number[] 语法定义类型为数字组成的数组，讲师头像是string或者boolean，并且通过 ?设置为可选属性，课程地址使用readonly设置为只读属性，如果对课程地址进行修改就会报错。</p><pre><code class=\"language-typescript\">interface 极客时间课程 {\n    课程名字:string,\n    价格:number[],\n    受众:string,\n    讲师头像?:string|boolean,\n    readonly 课程地址:string\n}\nlet vueCourse: 极客时间课程 = {\n    课程名字:'玩转Vue 3全家桶',\n    价格:[59,'139'],\n    讲师头像:false,\n    课程地址:\"time.geekbang.org\"\n}\nvueCourse.课程地址 = 'e3.shengxinjing.cn' // 报错\n</code></pre><p>然后我们学一下函数的类型限制。其实函数的定义，参数和返回值本质上也是变量的概念，都可以进行类型的定义。下面的代码中我们定义了参数x和y是数字，返回值也是数字的add函数，定义好参数和返回值类型，函数的类型自然也就确定了。</p><pre><code class=\"language-typescript\">function 函数名(参数:参数类型):返回值类型{} //大致语法\nfunction add(x: number, y: number): number {\n    return x + y;\n}\nadd(1, 2);\n \n</code></pre><p>我们也可以使用变量的方式去定义函数，直接使用(参数类型) =&gt;返回值类型的语法去定义add1的变量类型，但是这样写出来的代码可读性稍差一些，我更建议你使用type或者interface关键字去定义函数的类型。下面代码中的addType和addType1都是很好的定义函数类型的方式：</p><pre><code>let add1:(a:number,b:number)=&gt;number = function(x: number, y: number): number {\n    return x + y;\n}\ntype addType = (a:number,b:number)=&gt;number\nlet add2:addType  = function(x: number, y: number): number {\n    return x + y;\n}\n\ninterface addType1{\n    (a:number,b:number):number\n}\nlet add3:addType1  = function(x: number, y: number): number {\n    return x + y;\n}\n</code></pre><p>如果你的函数本来就支持多个类型的参数，下面的代码中reverse函数既支持数字也支持字符串。<strong>我们的要求是如果参数是数字，返回值也要是数字，参数是字符串返回值也只能是字符串</strong>，所以参数和返回值都用number|string就没法精确地限制这个需求。我们需要使用函数重载的方式，定义多个函数的输入值和返回值类型，更精确地限制函数的类型。我们可以在<a href=\"https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/ref.ts#L72\">Vue 3的源码</a>看到Vue 3中ref函数的重载写法：</p><pre><code class=\"language-typescript\">function reverse(x: number): number\nfunction reverse(x: string): string\nfunction reverse(x: number | string): number | string | void {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n</code></pre><p>这样TypeScript里如何限制一个变量和函数类型，我们就大致入门了。这时候你肯定还有个疑问，<strong>日常开发中有很多浏览器上的变量和属性，这些怎么限制类型呢？</strong></p><p>关于宿主环境里的类型，TypeScript全部都给我们提供了，我们可以直接在代码中书写：Window是window的类型，HTMLElement是dom元素类型，NodeList是节点列表类型，MouseEvent是鼠标点击事件的类型……关于更多TypeScript的内置类型，你可以在<a href=\"https://github.com/Microsoft/TypeScript/tree/main/src/lib\">TypeScript的源码</a>中看到：</p><pre><code class=\"language-typescript\">let w:Window = window\nlet ele:HTMLElement = document.createElement('div')\nlet allDiv: NodeList = document.querySelectorAll('div')\n\nele.addEventListener('click',function(e:MouseEvent){\n    const args:IArguments = arguments\n    w.alert(1)\n    console.log(args)\n},false)\n\n</code></pre><p>除了浏览器的API，我们还会用到很多第三方框架，比如Vue、Element3等等，这些框架现在都提供了完美的类型可以直接使用。在<a href=\"https://time.geekbang.org/column/article/445880\">第18讲</a>中我们使用下面的代码Vue导出的Ref来限定数据是ref包裹的响应式数据：</p><pre><code class=\"language-typescript\"> import { ref ,Ref} from 'vue'\n interface Todo{ \n     title:string,\n      done:boolean\n }\n let todos:Ref = ref([{title:'学习Vue',done:false}])\n \n\n</code></pre><h2>泛型</h2><p>那么聊完上面的内容，你就已经能使用TypeScript实现很多项目的开发，把所有变量和函数出现的地方都定义好类型，就可以在编译阶段提前规避出很多报错。然而TypeScript的能力可不止于此，<strong>TypeScript可以进行类型编程，这会极大提高TypeScript在复杂场景下的应用场景。</strong></p><p>然后我们来看一下TypeScript中的泛型，这也是很多同学觉得TypeScript很难的最大原因。</p><p>首先我们看下面的代码，我们定一个idientity0函数，这个函数逻辑非常简单，就是直接返回参数，那么<strong>我们怎么确定返回值的类型呢？ </strong></p><p>因为输入值可以是任意属性，所以我们只能写出identity0这个函数，参数和返回值类型都是any，但是明显不能满足我们的需求。我们需要返回值的类型和参数一致，所以我们在函数名之后使用&lt;&gt;定一个泛型T，你可以理解这个T的意思就是给函数参数定义了一个类型变量，会在后面使用，相当于【<strong>type T = arg的类型</strong>】，返回值使用T这个类型就完成了这个需求。</p><pre><code class=\"language-typescript\">function identity0(arg: any): any {\n    return arg\n}\n// 相当于type T = arg的类型\nfunction identity&lt;T&gt;(arg: T): T {\n    return arg\n}\nidentity&lt;string&gt;('玩转vue 3全家桶') // 这个T就是string，所以返回值必须得是string\nidentity&lt;number&gt;(1)\n</code></pre><p>有了泛型之后，我们就有了把函数参数定义成类型的功能，我们就可以实现类似高阶函数的类型函数。下面的代码中我们使用keyof语法获得已知类型VueCourse5的属性列表，相当于 ‘name’|‘price’：</p><pre><code class=\"language-typescript\">interface VueCourse5 {\n    name:string,\n    price:number\n}\ntype CourseProps = keyof VueCourse5 // 只能是name和price选一个\nlet k:CourseProps = 'name'\nlet k1:CourseProps = 'p' // 改成price\n</code></pre><p>keyof可以帮助我们拆解已有类型，下一步我们需要使用extends来实现类型系统中的条件判断。我们定义类型函数ExtendsType，接受泛型参数T后，通过判断T是不是布尔值来返回不同的类型字符串，我们就可以通过ExtendsType传入不同的参数去返回不同的类型。</p><pre><code class=\"language-typescript\">// T extends U ? X : Y 类型三元表达式\n\ntype ExtendsType&lt;T&gt; = T extends boolean ? \"重学前端\" : \"玩转Vue 3\"\ntype ExtendsType1 = ExtendsType&lt;boolean&gt; // type ExtendsType1='重学前端'\ntype ExtendsType2 = ExtendsType&lt;string&gt; // type ExtendsType2='玩转Vue 3'\n</code></pre><p>extends相当于TypeScript世界中的条件语句，然后in关键字可以理解为TypeScript世界中的遍历。下面的代码中我们通过 k in Courses语法，相当于遍历了Courses所有的类型作为CourseObj的属性，值的类型是number。</p><pre><code class=\"language-typescript\">type Courses = '玩转Vue 3'|'重学前端'\ntype CourseObj = {\n    [k in Courses]:number // 遍历Courses类型作为key\n}\n// 上面的代码等于下面的定义\n// type CourseObj = {\n//     玩转Vue 3: number;\n//     重学前端: number;\n// }\n\n</code></pre><p>学完上面的语法，你就能完全搞懂<a href=\"https://time.geekbang.org/column/article/455487\">第18讲</a>里的getProperty函数。限制函数第二个参数只能是第一个参数的属性，并且返回值的类型，最后我们传递不存在的属性时，TypeScript就会报错。</p><pre><code class=\"language-typescript\">// K extends keyof T限制K的类型必须是T的属性之一\n// T[K]是值得类型\nfunction getProperty&lt;T, K extends keyof T&gt;(o: T, name: K): T[K] {\n    return o[name]\n}\nconst coursePrice:CourseObj = {\n    \"玩转Vue 3\":129,\n    \"重学前端\":129\n}\ngetProperty(coursePrice,'玩转Vue 3')\ngetProperty(coursePrice,'不学前端') // 报错\n</code></pre><p>然后我再给你讲解最后一个关键字infer。&lt;T&gt;让我们拥有了给函数的参数定义类型变量的能力，infer则是可以在extends之后的变量设置类型变量，更加细致地控制类型。下面的代码中我们定义了ReturnType类型函数，目的是返回传入函数的返回值类型。infer P的意思就是泛型T是函数类型，并且这个函数类型的返回类型是P。</p><pre><code class=\"language-typescript\">type Foo = () =&gt; CourseObj\n\n// 如果T是一个函数，并且函数返回类型是P就返回P\ntype ReturnType1&lt;T&gt; = T extends ()=&gt;infer P ?P:never \ntype Foo1 = ReturnType1&lt;Foo&gt;\n</code></pre><h2>实战练习</h2><p>有了上面的基础后，我们来几个实战的练习。以下所有的练习都可以在代码最后找到答案，我建议你一定要自己实现一遍才能有最多的收获。</p><p>代码地址：<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">https://www.typescriptlang.org/docs/handbook/utility-types.html</a></p><p>下面的代码中，我们首先定义类型Todo，有title、desc和done三个属性：</p><pre><code class=\"language-typescript\">interface Todo {\n  title: string\n  desc:string\n  done: boolean\n}\n\n</code></pre><p>首先第一题是，我们需要实现类型函数Partial1，返回的类型是Todo所有的属性都变成可选项。</p><pre><code class=\"language-typescript\">type partTodo = Partial1&lt;Todo&gt;\n// 和下面类型一致，鼠标移动到partTodo变量上也能看到\n// type partTodo = {\n//     title?: string | undefined;\n//     desc?: string | undefined;\n//     done?: boolean | undefined;\n// }\n</code></pre><p>这一题的答案见下面的代码，使用K in keyof T遍历所有T的属性后，使用 ?标记为可选属性。</p><pre><code class=\"language-typescript\">type Partial1&lt;T&gt; = {\n    [K in keyof T]?:T[K]\n}\n</code></pre><p>TypeScript中还有很多类似的函数，包括Pick、Omit、Diff等函数，你都可以自行实现一遍，更多工具类型函数你可以移步<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">TypeScript官方文档</a>。你也可以结合下面的代码工具函数的实现，到留言区中讨论一下分别实现了什么功能。</p><pre><code class=\"language-typescript\">type Exclude1&lt;T, K&gt; = T extends K ? never : T\ntype Pick1&lt;T, K extends keyof T&gt; = {\n    [P in K]: T[P]\n}\ntype Concat1&lt;T extends any[], U extends any[]&gt; = [...T, ...U]\n</code></pre><p>最后我们再来一个实战的练习，在实际项目开发中除了JavaScript、浏览器和第三方框架的类型，还有一个很重要的场景就是后端返回的数据类型。我们需要根据开发文档去定义好每个请求的类型，在下面的代码中，request作为发送请求的函数，可以传递url是字符串。<strong>那我们该如何定义Interface API，使其能够限制request只能有buy和comment两个请求地址，并且comment请求的参数中message是必传项呢？</strong></p><pre><code class=\"language-typescript\">import axios from 'axios'\n\nfunction request(url:string,obj:any){\n    return axios.post(url,obj)\n}\ninterface Api{\n\n}\nrequest('/course/buy',{id:1})\nrequest('/course/comment',{id:1,message:'嘎嘎好看'})\nrequest('/course/comment',{id:1}) //如果message必传 怎么类型提醒缺少参数\nrequest('/course/404',{id:1}) //接口不存在 类型怎么需要报错\n\n</code></pre><p>记得要先尝试自己实现一下，答案就在下面的代码中。在API类型中，我们定义了buy和comment两个属性，分别设置了当前请求所需要的参数都是必选项。然后我们通过在request中使用泛型T限制url，通过Api[T] 限制传递的参数，这样我们就得到了下面的报错示意图，在编译阶段就能通知你缺少message属性，并且404请求不存在，这可以极大提高我们开发的体验和效率。</p><pre><code class=\"language-typescript\">import axios from 'axios'\ninterface Api{\n    '/course/buy':{\n        id:number\n    },\n    '/course/comment':{\n        id:number,\n        message:string\n    }\n}\n\nfunction request&lt;T extends keyof Api&gt;(url:T,obj:Api[T]){\n    return axios.post(url,obj)\n}\n\nrequest('/course/buy',{id:1})\nrequest('/course/comment',{id:1,message:'嘎嘎好看'})\nrequest('/course/comment',{id:1}) //如果message必传 怎么类型提醒缺少参数\nrequest('/course/404',{id:1}) //接口不存在 类型怎么需要报错\n\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/0c/8e/0c52cee36238831a10e4004d6536f18e.png?wh=1420x612\" alt=\"图片\"></p><p>更多类型的练习，你可以访问<a href=\"https://github.com/type-challenges/type-challenges\">type-challenges</a> 这个项目自行尝试。现在你再去看项目或者框架源码中的TypeScript，是不是就没有那么晦涩了呢。</p><h2>总结</h2><p>今天想聊的TypeScript就结束啦，总结一下我们今天学到的内容吧。</p><p>首先我们学习了TypeScript的基本类型，包括数字字符串等等，然后我们可以通过这些基础类型组合出复杂的类型组合，并且可以通过type和interface关键字定义复杂对象的类型和函数的类型。</p><p>然后浏览器的相关变量和API类型TypeScript都已经内置了，包括HTMLElement、MouseEvent等等，第三方框架的类型我们可以直接导入使用，Vue中的Ref类型我们就会经常用来定义ref函数包裹的响应式数据。</p><p>接着我们学习了TypeScript进阶中最重要的概念：泛型。通过泛型我们可以在函数内部把类型变成变量使用，并且通过keyof、in、extends、infer等关键字组合出复杂的类型函数，可以更加精确地组合现有类型。</p><p>最后我们通过定义前后端的接口类型的案例，演示了在实战中我们如何通过类型系统提高联调和开发的体验。</p><p>有了这些TypeScript的知识储备，你才能更好地在Vue项目中使用TypeScript。由于JSX的本质就是JavaScript，所以TypeScript的诞生也给了JSX更好的类型推导，这是JSX相比于Template的另外一个优势。关于Vue和TypeScript开发组件的内容，我们下一讲开始全部使用TypeScript来实现。</p><h2>思考题</h2><p>最后，留一个思考题：我们实现的Partial1可以把类型的属性变成可选的，如果传递的类型是嵌套很多层的，如何实现Partial1的递归版本，才能把所有嵌套的属性都变成可选的呢？</p><p>欢迎你在评论区分享你的答案，也欢迎你把这一讲的内容分享给你的同事和朋友们，我们下一讲再见。</p>","comments":[{"had_liked":false,"id":334095,"user_name":"2345","can_delete":false,"product_type":"c1","uid":2689945,"ip_address":"","ucode":"C18D251C344A78","user_header":"","comment_is_top":false,"comment_ctime":1644742694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74659186726","product_id":100094401,"comment_content":"个人不觉得中文变量能帮助理解。","like_count":17},{"had_liked":false,"id":324578,"user_name":"cwang","can_delete":false,"product_type":"c1","uid":1465246,"ip_address":"","ucode":"04CB9F4CA2CEAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/9e/a8dec12d.jpg","comment_is_top":false,"comment_ctime":1638509299,"is_pvip":false,"replies":[{"id":"118042","content":"帮助理解哈哈 自己敲得时候可以不用","user_name":"作者回复","comment_id":324578,"uid":"1003715","ip_address":"","utype":1,"ctime":1638882693,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"31703280371","product_id":100094401,"comment_content":"不建议用中文变量名，其中一个原因是手敲的时候，需要来回转换中英文输入法。😅","like_count":7,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536861,"discussion_content":"帮助理解哈哈 自己敲得时候可以不用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638882693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324534,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1239362,"ip_address":"","ucode":"1B5EF54A2A56F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/42/1de79e71.jpg","comment_is_top":false,"comment_ctime":1638494188,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31703265260","product_id":100094401,"comment_content":"type RecursivePartial&lt;T&gt; = {<br>  [P in keyof T]?:<br>    T[P] extends (infer U)[] ? RecursivePartial&lt;U&gt;[] :<br>    T[P] extends object ? RecursivePartial&lt;T[P]&gt; :<br>    T[P];<br>};","like_count":7,"discussions":[{"author":{"id":2279433,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c8/09/b34b1473.jpg","nickname":"鱼腩","note":"","ucode":"54C97E73A75854","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537772,"discussion_content":"虽然看不懂，厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639186493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324580,"user_name":"cwang","can_delete":false,"product_type":"c1","uid":1465246,"ip_address":"","ucode":"04CB9F4CA2CEAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/9e/a8dec12d.jpg","comment_is_top":false,"comment_ctime":1638509651,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27408313427","product_id":100094401,"comment_content":"有个地方挺神奇的哈，不打印你是不会理解这段代码的。<br><br>enum 课程评分 { 好, 非常好, 嘎嘎好 }<br>console.log(课程评分[&#39;好&#39;] === 0) &#47;&#47; true<br>console.log(课程评分[0] === &#39;好&#39;)  &#47;&#47; true<br><br>为啥课程评分[&#39;好&#39;] === 0 ， 又 课程评分[0] === &#39;好&#39; 呢？<br><br>console.log(课程评分) <br><br>```<br>[LOG]: {<br>  &quot;0&quot;: &quot;好&quot;,<br>  &quot;1&quot;: &quot;非常好&quot;,<br>  &quot;2&quot;: &quot;嘎嘎好&quot;,<br>  &quot;好&quot;: 0,<br>  &quot;非常好&quot;: 1,<br>  &quot;嘎嘎好&quot;: 2<br>} <br>```<br>原来如此~<br><br><br>","like_count":6,"discussions":[{"author":{"id":2880444,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fy6KTCIk6JPGdOYbvsXJ4tkI6yawGibskzAs4S8ZeNDK8ibtJtSpd0TTaIgpkmEI7YNDg81d2ibLYx018dicDCndLQ/132","nickname":"Geek_b2b221","note":"","ucode":"7BF4941D13511A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559283,"discussion_content":"课程评分[课程评分[0]=&#34;好&#34;]=0","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1648688033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571474,"discussion_content":"数字索引数组的概念就是 key 从零开始~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652237731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342906,"user_name":"江南烟雨时","can_delete":false,"product_type":"c1","uid":1649735,"ip_address":"","ucode":"D1857E595D3E98","user_header":"https://static001.geekbang.org/account/avatar/00/19/2c/47/b0931f00.jpg","comment_is_top":false,"comment_ctime":1650529190,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18830398374","product_id":100094401,"comment_content":"一看就会，一做就废。","like_count":4},{"had_liked":false,"id":324987,"user_name":"ll","can_delete":false,"product_type":"c1","uid":1296458,"ip_address":"","ucode":"57C5DAC5B51036","user_header":"https://static001.geekbang.org/account/avatar/00/13/c8/4a/3a322856.jpg","comment_is_top":false,"comment_ctime":1638772414,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18818641598","product_id":100094401,"comment_content":"ts 是 js 的 “超集” 其将 js 缺失的 “静态类型” 补上了，此外实现了一些“新的特性”，例如，函数重载。<br>js 原生不支持这种语言特性，是可以自己写代码实现的。而 ts 原生提供了这些“特性”，对于使用者的“成本” 就是要额外学习一些“新语法”。当熟悉这些新的写法后，我们在工程上收获的就是所谓“出错要趁早”，在“编译阶段”就发现错误，不用等到“运行时”发生错误，造成更大的损失。额外的，静态类型系统也给 lint 类插件提供了“技术支持”，使得在编写代码的时候得到更好的提示。<br><br>简单说，ts “让”我们的是更严格的写代码，“先要有，才能用，后边不能随心变”。是不是太“严格”了，是“严格”了，这也动态语言与静态语言是经常被争论的一个点。但 ts 在“灵活性”上也作了工作，比如所谓的泛型，以及一系列与之配套的API。<br><br> 当然只谈感受作用不是很大，要想用的好，还是要不断的实践。","like_count":4},{"had_liked":false,"id":325265,"user_name":"require","can_delete":false,"product_type":"c1","uid":2820671,"ip_address":"","ucode":"3AA3DCE0CD73E6","user_header":"","comment_is_top":false,"comment_ctime":1638884155,"is_pvip":false,"replies":[{"id":"118324","content":"哈哈 主要是typescript起步和开发的时候需要更多时间去开发","user_name":"作者回复","comment_id":325265,"uid":"1003715","ip_address":"","utype":1,"ctime":1639398089,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10228818747","product_id":100094401,"comment_content":"学得时候是typescript, 用的时候就变成了anyscript😂","like_count":3,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538311,"discussion_content":"哈哈 主要是typescript起步和开发的时候需要更多时间去开发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324581,"user_name":"山雨","can_delete":false,"product_type":"c1","uid":1347997,"ip_address":"","ucode":"FDD8F75F130394","user_header":"https://static001.geekbang.org/account/avatar/00/14/91/9d/ff31f7a1.jpg","comment_is_top":false,"comment_ctime":1638510024,"is_pvip":false,"replies":[{"id":"118355","content":"sorry sorry 最近在赶稿子，稿子赶完回会整理下代码提交","user_name":"作者回复","comment_id":324581,"uid":"1003715","ip_address":"","utype":1,"ctime":1639400370,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10228444616","product_id":100094401,"comment_content":"大圣老师，实战篇代码啥时候更新","like_count":2,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538353,"discussion_content":"sorry sorry 最近在赶稿子，稿子赶完回会整理下代码提交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639400370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341513,"user_name":"杨林山","can_delete":false,"product_type":"c1","uid":1917746,"ip_address":"","ucode":"12EB364A5416AF","user_header":"","comment_is_top":false,"comment_ctime":1649668176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5944635472","product_id":100094401,"comment_content":"示例中Interface API的属性全都是固定接口名，那像restful方式的接口地址该如何定义呢？<br><br>get &#47;users&#47;:userId<br>","like_count":1},{"had_liked":false,"id":327350,"user_name":"风一样","can_delete":false,"product_type":"c1","uid":2818001,"ip_address":"","ucode":"5EA5129D487E43","user_header":"https://static001.geekbang.org/account/avatar/00/2a/ff/d1/7a4a6f4f.jpg","comment_is_top":false,"comment_ctime":1640075916,"is_pvip":false,"replies":[{"id":"119278","content":"用了Ref之后，todos后面的操作就会收到Ref类型的限制，你可以尝试读取一些todos其他的属性，typescript会给你对应的报错信息","user_name":"作者回复","comment_id":327350,"uid":"1003715","ip_address":"","utype":1,"ctime":1640229252,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5935043212","product_id":100094401,"comment_content":"请问老师，let todos:Ref = ref([{title:&#39;学习Vue&#39;,done:false}])这条语句中，用 Ref 和 不用 Ref，有什么区别呢？","like_count":1,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541001,"discussion_content":"用了Ref之后，todos后面的操作就会收到Ref类型的限制，你可以尝试读取一些todos其他的属性，typescript会给你对应的报错信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640229252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359159,"user_name":"前端队长","can_delete":false,"product_type":"c1","uid":1035766,"ip_address":"湖北","ucode":"2F6ACAD6568FDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/f6/ad85ac99.jpg","comment_is_top":false,"comment_ctime":1665297134,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1665297134","product_id":100094401,"comment_content":"type Partial1&lt;T&gt; = {<br>    [K in keyof T]?: T[K] extends object ? Partial1&lt;T[K]&gt; : T[K]<br>}<br>这样？","like_count":0},{"had_liked":false,"id":352508,"user_name":"恭喜恭喜 ！！！","can_delete":false,"product_type":"c1","uid":2284356,"ip_address":"","ucode":"4EC8250E77AC78","user_header":"https://static001.geekbang.org/account/avatar/00/22/db/44/fe39de59.jpg","comment_is_top":false,"comment_ctime":1658738828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658738828","product_id":100094401,"comment_content":"ts定义变量类型为undefined 或者null后还可以再重新赋值吗","like_count":0},{"had_liked":false,"id":349134,"user_name":"淡若清风过","can_delete":false,"product_type":"c1","uid":2816633,"ip_address":"","ucode":"A589310DD82EA7","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fa/79/c5cfe88c.jpg","comment_is_top":false,"comment_ctime":1655768152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655768152","product_id":100094401,"comment_content":"slots，attrs，emit这些是什么类型？","like_count":1},{"had_liked":false,"id":344172,"user_name":"YK菌","can_delete":false,"product_type":"c1","uid":2857882,"ip_address":"","ucode":"0D484DB48E854B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/9b/9a/7c87614b.jpg","comment_is_top":false,"comment_ctime":1651322392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651322392","product_id":100094401,"comment_content":"感觉大圣老师的语速是越来越快拉~~","like_count":0},{"had_liked":false,"id":341305,"user_name":"楼外楼","can_delete":false,"product_type":"c1","uid":1243180,"ip_address":"","ucode":"791F2CA15B8F1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sgEfkeMSIIibeH4l0HS8uwM6PGY3DSHoW5tV9l1hDQ06tr3OnI7F545Wdxsh59rqOKnzjLUpCcEqic3P9zZbKzPQ/132","comment_is_top":false,"comment_ctime":1649512367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649512367","product_id":100094401,"comment_content":"下面的泛型可以理解，但是 ts的 extends 用法理解起来确实吃力","like_count":0},{"had_liked":false,"id":334703,"user_name":"木子初秋","can_delete":false,"product_type":"c1","uid":2893706,"ip_address":"","ucode":"6DDCB55232E1B3","user_header":"https://static001.geekbang.org/account/avatar/00/2c/27/8a/d65e34c4.jpg","comment_is_top":false,"comment_ctime":1645084518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645084518","product_id":100094401,"comment_content":"看了之后，终于看懂了TS开发的项目中有很多的运用泛型的地方，对于泛型的理解老师讲的太通透了。","like_count":0},{"had_liked":false,"id":333886,"user_name":"Lanb Wang","can_delete":false,"product_type":"c1","uid":1445099,"ip_address":"","ucode":"6A59706642F691","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/eb/b101e3c6.jpg","comment_is_top":false,"comment_ctime":1644570690,"is_pvip":false,"replies":[{"id":"122068","content":"哈哈 ts确实需要多练","user_name":"作者回复","comment_id":333886,"uid":"1003715","ip_address":"","utype":1,"ctime":1644800300,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1644570690","product_id":100094401,"comment_content":"跟着敲了一遍，然后现在看自己敲得是啥子都不晓得<br>","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550893,"discussion_content":"哈哈 ts确实需要多练","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644800300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330215,"user_name":"起風了","can_delete":false,"product_type":"c1","uid":1392788,"ip_address":"","ucode":"2B49D13356A1F7","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/94/afd0919c.jpg","comment_is_top":false,"comment_ctime":1641868098,"is_pvip":false,"replies":[{"id":"120650","content":"type和interface都可以描述一个对象或者函数，并且都可以扩展，有几个小区别，首先type可以设置类型的别名，比如type Vue = string ,还可以用typeof获取实例的类型，interface可以直接合并生命，默认直接用interface即可","user_name":"作者回复","comment_id":330215,"uid":"1003715","ip_address":"","utype":1,"ctime":1642212970,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1641868098","product_id":100094401,"comment_content":"想问一下type和interface有什么区别?什么时候用type,什么时候用interface?","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546180,"discussion_content":"type和interface都可以描述一个对象或者函数，并且都可以扩展，有几个小区别，首先type可以设置类型的别名，比如type Vue = string ,还可以用typeof获取实例的类型，interface可以直接合并生命，默认直接用interface即可","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1642212971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324650,"user_name":"韩棒","can_delete":false,"product_type":"c1","uid":2816376,"ip_address":"","ucode":"C4AC49967B9874","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f9/78/0cb10cad.jpg","comment_is_top":false,"comment_ctime":1638525811,"is_pvip":false,"replies":[{"id":"118354","content":"这个不需要特殊配置","user_name":"作者回复","comment_id":324650,"uid":"1003715","ip_address":"","utype":1,"ctime":1639400343,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638525811","product_id":100094401,"comment_content":"大圣老师 Ref在使用的时候有一个 “Ref”仅表示类型，但在此处却作为值使用-ts。是需要配置tsconfig.json吗？","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538352,"discussion_content":"这个不需要特殊配置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639400343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324542,"user_name":"cwang","can_delete":false,"product_type":"c1","uid":1465246,"ip_address":"","ucode":"04CB9F4CA2CEAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/9e/a8dec12d.jpg","comment_is_top":false,"comment_ctime":1638495697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638495697","product_id":100094401,"comment_content":"So Cool !","like_count":0},{"had_liked":false,"id":324524,"user_name":"费城的二鹏","can_delete":false,"product_type":"c1","uid":1101293,"ip_address":"","ucode":"DE768A0CC3053D","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/ed/825d84ee.jpg","comment_is_top":false,"comment_ctime":1638491922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638491922","product_id":100094401,"comment_content":"太实用了，周末要亲手试试，避免用any，减少出错可能。","like_count":0},{"had_liked":false,"id":324519,"user_name":"海阔天空","can_delete":false,"product_type":"c1","uid":1327016,"ip_address":"","ucode":"16C87A0052A08B","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/a8/8da58e53.jpg","comment_is_top":false,"comment_ctime":1638487966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638487966","product_id":100094401,"comment_content":"如果可以的话，在项目中引用ts还是很有必要的。对项目的规范和要求也相对提升。","like_count":0}]}