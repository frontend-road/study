{"id":101719,"title":"36 | 进程间通信：遇到大项目需要项目组之间的合作才行","content":"<p>前面咱们接项目的时候，主要强调项目之间的隔离性。这是因为，我们刚开始接的都是小项目。随着我们接的项目越来越多，就难免遇到大项目，这就需要多个项目组进行合作才能完成。</p><p>两个项目组应该通过什么样的方式进行沟通与合作呢？作为老板，你应该如何设计整个流程呢？</p><h2>管道模型</h2><p>好在有这么多成熟的项目管理流程可以参考。最最传统的模型就是软件开发的<strong>瀑布模型</strong>（Waterfall Model）。所谓的瀑布模型，其实就是将整个软件开发过程分成多个阶段，往往是上一个阶段完全做完，才将输出结果交给下一个阶段。就像下面这张图展示的一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/c9/ed1fd2ede7a8fef5508c877e722345c9.png?wh=1303*1183\" alt=\"\"></p><p>这种模型类似进程间通信的<strong>管道模型</strong>。还记得咱们最初学Linux命令的时候，有下面这样一行命令：</p><pre><code>ps -ef | grep 关键字 | awk '{print $2}' | xargs kill -9\n</code></pre><p>这里面的竖线“|”就是一个管道。它会将前一个命令的输出，作为后一个命令的输入。从管道的这个名称可以看出来，管道是一种单向传输数据的机制，它其实是一段缓存，里面的数据只能从一端写入，从另一端读出。如果想互相通信，我们需要创建两个管道才行。</p><p>管道分为两种类型，“|” 表示的管道称为<strong>匿名管道</strong>，意思就是这个类型的管道没有名字，用完了就销毁了。就像上面那个命令里面的一样，竖线代表的管道随着命令的执行自动创建、自动销毁。用户甚至都不知道自己在用管道这种技术，就已经解决了问题。所以这也是面试题里面经常会问的，到时候千万别说这是竖线，而要回答背后的机制，管道。</p><!-- [[[read_end]]] --><p>另外一种类型是<strong>命名管道</strong>。这个类型的管道需要通过mkfifo命令显式地创建。</p><pre><code>mkfifo hello\n</code></pre><p>hello就是这个管道的名称。管道以文件的形式存在，这也符合Linux里面一切皆文件的原则。这个时候，我们ls一下，可以看到，这个文件的类型是p，就是pipe的意思。</p><pre><code># ls -l\nprw-r--r--  1 root root         0 May 21 23:29 hello\n</code></pre><p>接下来，我们可以往管道里面写入东西。例如，写入一个字符串。</p><pre><code># echo &quot;hello world&quot; &gt; hello\n</code></pre><p>这个时候，管道里面的内容没有被读出，这个命令就是停在这里的，这说明当一个项目组要把它的输出交接给另一个项目组做输入，当没有交接完毕的时候，前一个项目组是不能撒手不管的。</p><p>这个时候，我们就需要重新连接一个终端。在终端中，用下面的命令读取管道里面的内容：</p><pre><code># cat &lt; hello \nhello world\n</code></pre><p>一方面，我们能够看到，管道里面的内容被读取出来，打印到了终端上；另一方面，echo那个命令正常退出了，也即交接完毕，前一个项目组就完成了使命，可以解散了。</p><p>我们可以看出，瀑布模型的开发流程效率比较低下，因为团队之间无法频繁地沟通。而且，管道的使用模式，也不适合进程间频繁地交换数据。</p><p>于是，我们还得想其他的办法，例如我们是不是可以借鉴传统外企的沟通方式——邮件。邮件有一定的格式，例如抬头，正文，附件等，发送邮件可以建立收件人列表，所有在这个列表中的人，都可以反复地在此邮件基础上回复，达到频繁沟通的目的。</p><h2>消息队列模型</h2><p><img src=\"https://static001.geekbang.org/resource/image/ac/a4/ac6ad6c9e7e3831f6d813113ae1c5ba4.png?wh=1663*1303\" alt=\"\"></p><p>这种模型类似进程间通信的消息队列模型。和管道将信息一股脑儿地从一个进程，倒给另一个进程不同，消息队列有点儿像邮件，发送数据时，会分成一个一个独立的数据单元，也就是消息体，每个消息体都是固定大小的存储块，在字节流上不连续。</p><p>这个消息结构的定义我写在下面了。这里面的类型type和正文text没有强制规定，只要消息的发送方和接收方约定好即可。</p><pre><code>struct msg_buffer {\n    long mtype;\n    char mtext[1024];\n};\n</code></pre><p>接下来，我们需要创建一个消息队列，使用<strong>msgget函数</strong>。这个函数需要有一个参数key，这是消息队列的唯一标识，应该是唯一的。如何保持唯一性呢？这个还是和文件关联。</p><p>我们可以指定一个文件，ftok会根据这个文件的inode，生成一个近乎唯一的key。只要在这个消息队列的生命周期内，这个文件不要被删除就可以了。只要不删除，无论什么时刻，再调用ftok，也会得到同样的key。这种key的使用方式在这一章会经常遇到，这是因为它们都属于System V IPC进程间通信机制体系中。</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/msg.h&gt;\n\n\nint main() {\n  int messagequeueid;\n  key_t key;\n\n\n  if((key = ftok(&quot;/root/messagequeue/messagequeuekey&quot;, 1024)) &lt; 0)\n  {\n      perror(&quot;ftok error&quot;);\n      exit(1);\n  }\n\n\n  printf(&quot;Message Queue key: %d.\\n&quot;, key);\n\n\n  if ((messagequeueid = msgget(key, IPC_CREAT|0777)) == -1)\n  {\n      perror(&quot;msgget error&quot;);\n      exit(1);\n  }\n\n\n  printf(&quot;Message queue id: %d.\\n&quot;, messagequeueid);\n}\n</code></pre><p>在运行上面这个程序之前，我们先使用命令touch messagequeuekey，创建一个文件，然后多次执行的结果就会像下面这样：</p><pre><code># ./a.out \nMessage Queue key: 92536.\nMessage queue id: 32768.\n</code></pre><p>System V IPC体系有一个统一的命令行工具：ipcmk，ipcs和ipcrm用于创建、查看和删除IPC对象。</p><p>例如，ipcs -q就能看到上面我们创建的消息队列对象。</p><pre><code># ipcs -q\n\n\n------ Message Queues --------\nkey        msqid      owner      perms      used-bytes   messages    \n0x00016978 32768      root       777        0            0\n</code></pre><p>接下来，我们来看如何发送信息。发送消息主要调用<strong>msgsnd函数</strong>。第一个参数是message queue的id，第二个参数是消息的结构体，第三个参数是消息的长度，最后一个参数是flag。这里IPC_NOWAIT表示发送的时候不阻塞，直接返回。</p><p>下面的这段程序，getopt_long、do-while循环以及switch，是用来解析命令行参数的。命令行参数的格式定义在long_options里面。每一项的第一个成员“id”“type”“message”是参数选项的全称，第二个成员都为1，表示参数选项后面要跟参数，最后一个成员’i’‘t’'m’是参数选项的简称。</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/msg.h&gt;\n#include &lt;getopt.h&gt;\n#include &lt;string.h&gt;\n\n\nstruct msg_buffer {\n    long mtype;\n    char mtext[1024];\n};\n\n\nint main(int argc, char *argv[]) {\n  int next_option;\n  const char* const short_options = &quot;i:t:m:&quot;;\n  const struct option long_options[] = {\n    { &quot;id&quot;, 1, NULL, 'i'},\n    { &quot;type&quot;, 1, NULL, 't'},\n    { &quot;message&quot;, 1, NULL, 'm'},\n    { NULL, 0, NULL, 0 }\n  };\n  \n  int messagequeueid = -1;\n  struct msg_buffer buffer;\n  buffer.mtype = -1;\n  int len = -1;\n  char * message = NULL;\n  do {\n    next_option = getopt_long (argc, argv, short_options, long_options, NULL);\n    switch (next_option)\n    {\n      case 'i':\n        messagequeueid = atoi(optarg);\n        break;\n      case 't':\n        buffer.mtype = atol(optarg);\n        break;\n      case 'm':\n        message = optarg;\n        len = strlen(message) + 1;\n        if (len &gt; 1024) {\n          perror(&quot;message too long.&quot;);\n          exit(1);\n        }\n        memcpy(buffer.mtext, message, len);\n        break;\n      default:\n        break;\n    }\n  }while(next_option != -1);\n\n\n  if(messagequeueid != -1 &amp;&amp; buffer.mtype != -1 &amp;&amp; len != -1 &amp;&amp; message != NULL){\n    if(msgsnd(messagequeueid, &amp;buffer, len, IPC_NOWAIT) == -1){\n      perror(&quot;fail to send message.&quot;);\n      exit(1);\n    }\n  } else {\n    perror(&quot;arguments error&quot;);\n  }\n  \n  return 0;\n}\n</code></pre><p>接下来，我们可以编译并运行这个发送程序。</p><pre><code>gcc -o send sendmessage.c\n./send -i 32768 -t 123 -m &quot;hello world&quot;\n</code></pre><p>接下来，我们再来看如何收消息。收消息主要调用<strong>msgrcv函数</strong>，第一个参数是message queue的id，第二个参数是消息的结构体，第三个参数是可接受的最大长度，第四个参数是消息类型,最后一个参数是flag，这里IPC_NOWAIT表示接收的时候不阻塞，直接返回。</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/msg.h&gt;\n#include &lt;getopt.h&gt;\n#include &lt;string.h&gt;\n\n\nstruct msg_buffer {\n    long mtype;\n    char mtext[1024];\n};\n\n\nint main(int argc, char *argv[]) {\n  int next_option;\n  const char* const short_options = &quot;i:t:&quot;;\n  const struct option long_options[] = {\n    { &quot;id&quot;, 1, NULL, 'i'},\n    { &quot;type&quot;, 1, NULL, 't'},\n    { NULL, 0, NULL, 0 }\n  };\n  \n  int messagequeueid = -1;\n  struct msg_buffer buffer;\n  long type = -1;\n  do {\n    next_option = getopt_long (argc, argv, short_options, long_options, NULL);\n    switch (next_option)\n    {\n      case 'i':\n        messagequeueid = atoi(optarg);\n        break;\n      case 't':\n        type = atol(optarg);\n        break;\n      default:\n        break;\n    }\n  }while(next_option != -1);\n\n\n  if(messagequeueid != -1 &amp;&amp; type != -1){\n    if(msgrcv(messagequeueid, &amp;buffer, 1024, type, IPC_NOWAIT) == -1){\n      perror(&quot;fail to recv message.&quot;);\n      exit(1);\n    }\n    printf(&quot;received message type : %d, text: %s.&quot;, buffer.mtype, buffer.mtext);\n  } else {\n    perror(&quot;arguments error&quot;);\n  }\n  \n  return 0;\n}\n</code></pre><p>接下来，我们可以编译并运行这个发送程序。可以看到，如果有消息，可以正确地读到消息；如果没有，则返回没有消息。</p><pre><code># ./recv -i 32768 -t 123\nreceived message type : 123, text: hello world.\n# ./recv -i 32768 -t 123\nfail to recv message.: No message of desired type\n</code></pre><p>有了消息这种模型，两个进程之间的通信就像咱们平时发邮件一样，你来一封，我回一封，可以频繁沟通了。</p><h2>共享内存模型</h2><p><img src=\"https://static001.geekbang.org/resource/image/df/38/df910e4383885b1aceaafb52b9bb5638.png?wh=1258*1003\" alt=\"\"></p><p>但是有时候，项目组之间的沟通需要特别紧密，而且要分享一些比较大的数据。如果使用邮件，就发现，一方面邮件的来去不及时；另外一方面，附件大小也有限制，所以，这个时候，我们经常采取的方式就是，把两个项目组在需要合作的期间，拉到一个会议室进行合作开发，这样大家可以直接交流文档呀，架构图呀，直接在白板上画或者直接扔给对方，就可以直接看到。</p><p>可以看出来，共享会议室这种模型，类似进程间通信的<strong>共享内存模型</strong>。前面咱们讲内存管理的时候，知道每个进程都有自己独立的虚拟内存空间，不同的进程的虚拟内存空间映射到不同的物理内存中去。这个进程访问A地址和另一个进程访问A地址，其实访问的是不同的物理内存地址，对于数据的增删查改互不影响。</p><p>但是，咱们是不是可以变通一下，拿出一块虚拟地址空间来，映射到相同的物理内存中。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去。</p><p>共享内存也是System V IPC进程间通信机制体系中的，所以从它使用流程可以看到熟悉的面孔。</p><p>我们可以创建一个共享内存，调用shmget。在这个体系中，创建一个IPC对象都是xxxget，这里面第一个参数是key，和msgget里面的key一样，都是唯一定位一个共享内存对象，也可以通过关联文件的方式实现唯一性。第二个参数是共享内存的大小。第三个参数如果是IPC_CREAT，同样表示创建一个新的。</p><pre><code>int shmget(key_t key, size_t size, int flag);\n</code></pre><p>创建完毕之后，我们可以通过ipcs命令查看这个共享内存。</p><pre><code>#ipcs ­­--shmems\n\n\n------ Shared Memory Segments ------ ­­­­­­­­\nkey        shmid    owner perms    bytes nattch status\n0x00000000 19398656 marc  600    1048576 2      dest\n</code></pre><p>接下来，如果一个进程想要访问这一段共享内存，需要将这个内存加载到自己的虚拟地址空间的某个位置，通过shmat函数，就是attach的意思。其中addr就是要指定attach到这个地方。但是这个地址的设定难度比较大，除非对于内存布局非常熟悉，否则可能会attach到一个非法地址。所以，通常的做法是将addr设为NULL，让内核选一个合适的地址。返回值就是真正被attach的地方。</p><pre><code>void *shmat(int shm_id, const void *addr, int flag);\n</code></pre><p>如果共享内存使用完毕，可以通过shmdt解除绑定，然后通过shmctl，将cmd设置为IPC_RMID，从而删除这个共享内存对象。</p><pre><code>int shmdt(void *addr); \n\n\nint shmctl(int shm_id, int cmd, struct shmid_ds *buf);\n</code></pre><h2>信号量</h2><p>这里你是不是有一个疑问，如果两个进程attach同一个共享内存，大家都往里面写东西，很有可能就冲突了。例如两个进程都同时写一个地址，那先写的那个进程会发现内容被别人覆盖了。</p><p>所以，这里就需要一种保护机制，使得同一个共享的资源，同时只能被一个进程访问。在System V IPC进程间通信机制体系中，早就想好了应对办法，就是信号量（Semaphore）。因此，信号量和共享内存往往要配合使用。</p><p>信号量其实是一个计数器，主要用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</p><p>我们可以将信号量初始化为一个数值，来代表某种资源的总体数量。对于信号量来讲，会定义两种原子操作，一个是<strong>P操作</strong>，我们称为<strong>申请资源操作</strong>。这个操作会申请将信号量的数值减去N，表示这些数量被他申请使用了，其他人不能用了。另一个是<strong>V操作</strong>，我们称为<strong>归还资源操作</strong>，这个操作会申请将信号量加上M，表示这些数量已经还给信号量了，其他人可以使用了。</p><p>例如，你有100元钱，就可以将信号量设置为100。其中A向你借80元，就会调用P操作，申请减去80。如果同时B向你借50元，但是B的P操作比A晚，那就没有办法，只好等待A归还钱的时候，B的P操作才能成功。之后，A调用V操作，申请加上30元，也就是还给你30元，这个时候信号量有50元了，这时候B的P操作才能成功，才能借走这50元。</p><p>所谓<strong>原子操作</strong>（Atomic Operation），就是任何一块钱，都只能通过P操作借给一个人，不能同时借给两个人。也就是说，当A的P操作（借80）和B的P操作（借50），几乎同时到达的时候，不能因为大家都看到账户里有100就都成功，必须分个先来后到。</p><p>如果想创建一个信号量，我们可以通过semget函数。看，又是xxxget，第一个参数key也是类似的，第二个参数num_sems不是指资源的数量，而是表示可以创建多少个信号量，形成一组信号量，也就是说，如果你有多种资源需要管理，可以创建一个信号量组。</p><pre><code> int semget(key_t key, int num_sems, int sem_flags);\n</code></pre><p>接下来，我们需要初始化信号量的总的资源数量。通过semctl函数，第一个参数semid是这个信号量组的id，第二个参数semnum才是在这个信号量组中某个信号量的id，第三个参数是命令，如果是初始化，则用SETVAL，第四个参数是一个union。如果初始化，应该用里面的val设置资源总量。</p><pre><code>int semctl(int semid, int semnum, int cmd, union semun args);\n\n\nunion semun\n{\n  int val;\n  struct semid_ds *buf;\n  unsigned short int *array;\n  struct seminfo *__buf;\n};\n</code></pre><p>无论是P操作还是V操作，我们统一用semop函数。第一个参数还是信号量组的id，一次可以操作多个信号量。第三个参数numops就是有多少个操作，第二个参数将这些操作放在一个数组中。</p><p>数组的每一项是一个struct sembuf，里面的第一个成员是这个操作的对象是哪个信号量。</p><p>第二个成员就是要对这个信号量做多少改变。如果sem_op &lt; 0，就请求sem_op的绝对值的资源。如果相应的资源数可以满足请求，则将该信号量的值减去sem_op的绝对值，函数成功返回。</p><p>当相应的资源数不能满足请求时，就要看sem_flg了。如果把sem_flg设置为IPC_NOWAIT，也就是没有资源也不等待，则semop函数出错返回EAGAIN。如果sem_flg 没有指定IPC_NOWAIT，则进程挂起，直到当相应的资源数可以满足请求。若sem_op &gt; 0，表示进程归还相应的资源数，将 sem_op 的值加到信号量的值上。如果有进程正在休眠等待此信号量，则唤醒它们。</p><pre><code>int semop(int semid, struct sembuf semoparray[], size_t numops);\n\n\nstruct sembuf \n{\n  short sem_num; // 信号量组中对应的序号，0～sem_nums-1\n  short sem_op;  // 信号量值在一次操作中的改变量\n  short sem_flg; // IPC_NOWAIT, SEM_UNDO\n}\n</code></pre><p>信号量和共享内存都比较复杂，两者还要结合起来用，就更加复杂，它们内核的机制就更加复杂。这一节我们先不讲，放到本章的最后一节重点讲解。</p><h2>信号</h2><p>上面讲的进程间通信的方式，都是常规状态下的工作模式，对应到咱们平时的工作交接，收发邮件、联合开发等，其实还有一种异常情况下的工作模式。</p><p>例如出现线上系统故障，这个时候，什么流程都来不及了，不可能发邮件，也来不及开会，所有的架构师、开发、运维都要被通知紧急出动。所以，7乘24小时不间断执行的系统都需要有告警系统，一旦出事情，就要通知到人，哪怕是半夜，也要电话叫起来，处理故障。</p><p>对应到操作系统中，就是信号。信号没有特别复杂的数据结构，就是用一个代号一样的数字。Linux提供了几十种信号，分别代表不同的意义。信号之间依靠它们的值来区分。这就像咱们看警匪片，对于紧急的行动，都是说，“1号作战任务”开始执行，警察就开始行动了。情况紧急，不能啰里啰嗦了。</p><p>信号可以在任何时候发送给某一进程，进程需要为这个信号配置信号处理函数。当某个信号发生的时候，就默认执行这个函数就可以了。这就相当于咱们运维一个系统应急手册，当遇到什么情况，做什么事情，都事先准备好，出了事情照着做就可以了。</p><h2>总结时刻</h2><p>这一节，我们整体讲解了一下进程间通信的各种模式。你现在还能记住多少？</p><ul>\n<li>类似瀑布开发模式的管道</li>\n<li>类似邮件模式的消息队列</li>\n<li>类似会议室联合开发的共享内存加信号量</li>\n<li>类似应急预案的信号</li>\n</ul><p>当你自己使用的时候，可以根据不同的通信需要，选择不同的模式。</p><ul>\n<li>管道，请你记住这是命令行中常用的模式，面试问到的话，不要忘了。</li>\n<li>消息队列其实很少使用，因为有太多的用户级别的消息队列，功能更强大。</li>\n<li>共享内存加信号量是常用的模式。这个需要牢记，常见到一些知名的以C语言开发的开源软件都会用到它。</li>\n<li>信号更加常用，机制也比较复杂。我们后面会有单独的一节来解析。</li>\n</ul><h2>课堂练习</h2><p>这节课的程序，请你务必自己编译通过，搞清楚参数解析是怎么做的，这个以后你自己写程序的时候，很有用，另外消息队列模型的API调用流程，也要搞清楚，要知道他们都属于System V系列，后面我们学共享内存和信号量，能看到完全类似的API调用流程。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","neighbors":{"left":{"article_title":"35 | 块设备（下）：如何建立代理商销售模式？","id":101397},"right":{"article_title":"37 | 信号（上）：项目组A完成了，如何及时通知项目组B？","id":102281}},"comments":[{"had_liked":false,"id":105130,"user_name":"恩言","can_delete":false,"product_type":"c1","uid":1026855,"ip_address":"","ucode":"79771A313B9CCC","user_header":"","comment_is_top":false,"comment_ctime":1560925891,"is_pvip":false,"replies":[{"id":"49013","content":"想刷就刷呀，刷的漂亮","user_name":"作者回复","comment_id":105130,"uid":"1001590","ip_address":"","utype":1,"ctime":1567579717,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"70280402627","product_id":100024701,"comment_content":"正在刷第二遍的趣谈网络协议，也不知道为什么有一种冲动要表达一下自己的想法，虽然趣谈网络协议已经过去了很长时间，但在刷第二遍的时候从整个结构上看真的是太清晰了，层层的递进，感觉非常的棒。这次的操作系统这个系列我觉得也值得刷N遍，每次应该都会有不同的认识。","like_count":17,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454570,"discussion_content":"想刷就刷呀，刷的漂亮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105831,"user_name":"W.jyao","can_delete":false,"product_type":"c1","uid":1422582,"ip_address":"","ucode":"C57B3A78B6A795","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/f6/735673f7.jpg","comment_is_top":false,"comment_ctime":1561090423,"is_pvip":false,"replies":[{"id":"48881","content":"还没有","user_name":"作者回复","comment_id":105831,"uid":"1001590","ip_address":"","utype":1,"ctime":1567504218,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"44510763383","product_id":100024701,"comment_content":"老师有没有考虑过出网络编程专栏。期待","like_count":10,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454831,"discussion_content":"还没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567504218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384652,"discussion_content":"不是已经有了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626690003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104983,"user_name":"WB","can_delete":false,"product_type":"c1","uid":1350663,"ip_address":"","ucode":"E4748BC0ECAF04","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/07/14f1088b.jpg","comment_is_top":false,"comment_ctime":1560902782,"is_pvip":false,"replies":[{"id":"49017","content":"对的对的，还有sock文件","user_name":"作者回复","comment_id":104983,"uid":"1001590","ip_address":"","utype":1,"ctime":1567579794,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"44510575742","product_id":100024701,"comment_content":"进程间还可以利用socket通信","like_count":10,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454514,"discussion_content":"对的对的，还有sock文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110961,"user_name":"Geek_60f4a1","can_delete":false,"product_type":"c1","uid":1468006,"ip_address":"","ucode":"1CB782EBC30DE5","user_header":"https://static001.geekbang.org/account/avatar/00/16/66/66/2204a2eb.jpg","comment_is_top":false,"comment_ctime":1562403291,"is_pvip":false,"replies":[{"id":"46754","content":"加油","user_name":"作者回复","comment_id":110961,"uid":"1001590","ip_address":"","utype":1,"ctime":1566388248,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"18742272475","product_id":100024701,"comment_content":"白用那么多年Linux了，看了一点我都感觉惊呆了","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457144,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566388248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105253,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1560947488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18740816672","product_id":100024701,"comment_content":"system v这套api和文件操作那些api在形式上差别较大，所以现在用的多的是posix进程间通信那套东西。","like_count":4},{"had_liked":false,"id":106884,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1561421781,"is_pvip":false,"replies":[{"id":"48867","content":"哈哈，如果专栏也讲代码命名规则，也太严肃了吧","user_name":"作者回复","comment_id":106884,"uid":"1001590","ip_address":"","utype":1,"ctime":1567502075,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"14446323669","product_id":100024701,"comment_content":"mkfifo hello<br>觉得专栏里面的命名有点业余，这里举个例子，其他地方也有类似情况。","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455266,"discussion_content":"哈哈，如果专栏也讲代码命名规则，也太严肃了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567502075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007254,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","nickname":"莫名","note":"","ucode":"E28F2602BA25DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7388,"discussion_content":"哈哈，有点吹毛求疵了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567503052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104973,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1560901154,"is_pvip":false,"replies":[{"id":"49018","content":"是的","user_name":"作者回复","comment_id":104973,"uid":"1001590","ip_address":"","utype":1,"ctime":1567579802,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"14445803042","product_id":100024701,"comment_content":"socket估计要单独开一节","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454511,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268583,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1946744,"ip_address":"","ucode":"E3C38864D3C8E4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/b4/78/47011c75.jpg","comment_is_top":false,"comment_ctime":1608263259,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5903230555","product_id":100024701,"comment_content":"System V IPC 这个是啥呀，怎么突然就冒出来啦。有没有大手子给解释一下的呀","like_count":1,"discussions":[{"author":{"id":1885432,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epVWzibg2dH85GkbAvsIXLWRVbw4dYbmoGicQu8eCiaLszB9jjL4AcA6zvQIbzA0SUMFPuwbq1lbnzTA/132","nickname":"Geek_92c158","note":"","ucode":"5FA1BE6B8E8D20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376851,"discussion_content":"IPC is an abbreviation for Interprocess Communication","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622381192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227974,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1592531291,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5887498587","product_id":100024701,"comment_content":"&quot;消息队列其实很少使用，因为有太多的用户级别的消息队列，功能更强大&quot;<br><br>刘超刘老师好，做后台服务器开发，有多个业务线程，我们都是用消息队列来通信，请问这边的很少使用更具体是因为什么原因呢？哪些应用场景下的哪些功能不足所以才导致需要用到更强大的用户级别的消息队列呢？<br>作者回复: 你用的不是内核提供的消息队列吧<br>------------<br>服务器应用用C编写，进程内，不同模块分不同线程。使用的msgsnd，msgrcv这些系统调用，用的就是内核提供的消息队列呢","like_count":1,"discussions":[{"author":{"id":1018724,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/64/d8bf2f6f.jpg","nickname":"旻言","note":"","ucode":"563E6A83A50EC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319887,"discussion_content":"刘老师说的是进程间通信的消息队列，你说的是同一进程内的…直接简单链表加互斥锁都可以做到咯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604157167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1129976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","nickname":"LiYanbin","note":"","ucode":"2F50493F818909","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018724,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/64/d8bf2f6f.jpg","nickname":"旻言","note":"","ucode":"563E6A83A50EC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323618,"discussion_content":"我都不知道怎么回你的回答😅，首先，看你回答的意思，消息队列很少使用的原因是因为有好用的锁机制？ PS：不是用锁就比用消息队列好，上锁解锁都是需要性能消耗以及引入一定的复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604975648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319887,"ip_address":""},"score":323618,"extra":""}]},{"author":{"id":1501325,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/8d/41fb5da7.jpg","nickname":"甘俊","note":"","ucode":"A6B9541EC2B1AD","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310591,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601936337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107565,"user_name":"尚墨","can_delete":false,"product_type":"c1","uid":1300116,"ip_address":"","ucode":"114EE139168CB9","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJ6t1z92XYEzXpqpgpS1veBc5DNGhfRHFsHgE19qHqG0cevcIJRRsjIKxsSEcIPVP1nOkaVKLibb2xFq04A4KMY3/132","comment_is_top":false,"comment_ctime":1561557854,"is_pvip":false,"replies":[{"id":"48851","content":"赞","user_name":"作者回复","comment_id":107565,"uid":"1001590","ip_address":"","utype":1,"ctime":1567501106,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5856525150","product_id":100024701,"comment_content":"Python 线程使用系统原生线程指的就是这里吧。我之前写过 Python 多线程下载的脚本，用到了信号量，队列。","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455560,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567501106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356127,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"江苏","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1661999994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661999994","product_id":100024701,"comment_content":"Windows啥都不支持。","like_count":0},{"had_liked":false,"id":354604,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"江苏","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1660582097,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660582097","product_id":100024701,"comment_content":"感觉进程之间除了管道。其余的好像都没怎么用过","like_count":0},{"had_liked":false,"id":332406,"user_name":"Nicholas","can_delete":false,"product_type":"c1","uid":1214053,"ip_address":"","ucode":"3AEAFB3AF507BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/65/04ab01a5.jpg","comment_is_top":false,"comment_ctime":1643209511,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643209511","product_id":100024701,"comment_content":"为啥 proj_id 是1024?","like_count":0},{"had_liked":false,"id":292435,"user_name":"light","can_delete":false,"product_type":"c1","uid":2086274,"ip_address":"","ucode":"89F876C59A7046","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/W2O5VwL8wN6VIGPGCHIBIM1ageY2ic0kJpnRAD3I1BYkE8I2tkUef6AZOicwDm30PqgKR75bsWDicicEZvMf0ULLYQ/132","comment_is_top":false,"comment_ctime":1620820642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620820642","product_id":100024701,"comment_content":"进程间通讯方式：<br>1、匿名管道、命名管道<br>2、消息队列<br>3、共享内存加信号量<br>4、信号（系统应急才会使用）","like_count":0},{"had_liked":false,"id":255761,"user_name":"Yukon","can_delete":false,"product_type":"c1","uid":1390954,"ip_address":"","ucode":"16997781EB991E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Dic7mk7ia4Ln0bfFuMianpzg80ogAzPOelb1EUtXKWBVO0qwLc0jdq9K6gkfDlGI0mjX0KZTBm9jw7zMRuicsick2Lg/132","comment_is_top":false,"comment_ctime":1603423235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603423235","product_id":100024701,"comment_content":"讲的真好， 非常感谢","like_count":0},{"had_liked":false,"id":208283,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1587314390,"is_pvip":false,"replies":[{"id":"83791","content":"你用的不是内核提供的消息队列吧","user_name":"作者回复","comment_id":208283,"uid":"1001590","ip_address":"","utype":1,"ctime":1592359872,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1587314390","product_id":100024701,"comment_content":"&quot;消息队列其实很少使用，因为有太多的用户级别的消息队列，功能更强大&quot;<br><br>刘超刘老师好，做后台服务器开发，有多个业务线程，我们都是用消息队列来通信，请问这边的很少使用更具体是因为什么原因呢？哪些应用场景下的哪些功能不足所以才导致需要用到更强大的用户级别的消息队列呢？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492400,"discussion_content":"你用的不是内核提供的消息队列吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592359872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","nickname":"LiYanbin","note":"","ucode":"2F50493F818909","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284428,"discussion_content":"服务器应用用C编写，进程内，不同模块分不同线程。使用的msgsnd，msgrcv这些系统调用，用的就是内核提供的消息队列呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592531214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189701,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1362659,"ip_address":"","ucode":"76F2CAFA309437","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/e3/447aff89.jpg","comment_is_top":false,"comment_ctime":1584541397,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1584541397","product_id":100024701,"comment_content":"C语言相关的开源项目  老师推荐下！","like_count":0,"discussions":[{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384654,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626690083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166885,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1577623964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577623964","product_id":100024701,"comment_content":"看完共享内存和信号量回顾过来有一个问题，两个进程可以访问经过各自虚拟空间映射的这个内存是保存在用户空间还是内核空间？因为在用户空间映射到物理地址可能不同，是在内核空间吗？","like_count":0},{"had_liked":false,"id":132987,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1568293006,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1568293006","product_id":100024701,"comment_content":"老师  进程间通信的消息队列和kafka    rabbit那些是一类吗","like_count":0,"discussions":[{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160381,"discussion_content":"kafka那种是用户级别的消息队列，实际上是基于网络编程的。这个消息队列是系统中buffer的交互。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580797232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132986,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1568292914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568292914","product_id":100024701,"comment_content":"管道，命名管道   消息队列   共享内存  信号量pv操作","like_count":0},{"had_liked":false,"id":112757,"user_name":"眭东亮","can_delete":false,"product_type":"c1","uid":1449336,"ip_address":"","ucode":"E9F629828B4E55","user_header":"https://wx.qlogo.cn/mmopen/vi_32/7dSgJbCaoS5CnCI4toP6mPueW1f0eQ0Ua9LxymPqJjH49cNYkJK0s9NcvrapPU4gvZb12j2u3l2A8Rw5onlJMQ/132","comment_is_top":false,"comment_ctime":1562816666,"is_pvip":false,"replies":[{"id":"46693","content":"t是客户端和服务端约定好的，类型是long，数值随意，只要约定好就行","user_name":"作者回复","comment_id":112757,"uid":"1001590","ip_address":"","utype":1,"ctime":1566380809,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1562816666","product_id":100024701,"comment_content":"老师，.&#47;send -i 32768 -t 123 -m &quot;helllo world&quot;中 38267是消息队列的id ,但消息类型123是在哪里定义的？为什么输入“.&#47;send -i 0 -t wus33e -m &quot;hello”结果显示：fail to send message.: Invalid argument<br><br><br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457897,"discussion_content":"t是客户端和服务端约定好的，类型是long，数值随意，只要约定好就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566380809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110288,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1562222390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562222390","product_id":100024701,"comment_content":"可以的之前只知道这个线叫管道命令，没想过管道命令是用完就消失的匿名管道，之前一直默认这是一种格式类似三元表达式之类的。","like_count":0},{"had_liked":false,"id":110152,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1562202157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562202157","product_id":100024701,"comment_content":"老师，用户级别的消息队列和系统自身的消息队列有什么差别？今天只介绍了system v下的IPC方式，它与posix下的进程间通信的区别是什么？","like_count":0},{"had_liked":false,"id":108255,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1561705858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561705858","product_id":100024701,"comment_content":"老师，消息队列的方式有两个疑问：<br>1.最多能创建几个消息队列？每个消息队列最大消息数是多大？<br>2.发送消息时有大小限制吗？如果有，是多大？","like_count":0},{"had_liked":false,"id":106533,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1561340153,"is_pvip":false,"replies":[{"id":"38644","content":"您指的具体是？","user_name":"作者回复","comment_id":106533,"uid":"1001590","ip_address":"","utype":1,"ctime":1561419979,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561340153","product_id":100024701,"comment_content":"我最想看的阻塞非阻塞，同步异步一直还没有看到","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455126,"discussion_content":"您指的具体是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561419979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106336,"user_name":"一笔一画","can_delete":false,"product_type":"c1","uid":1495254,"ip_address":"","ucode":"2B9BC8ADF97106","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/d6/f335954b.jpg","comment_is_top":false,"comment_ctime":1561273274,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561273274","product_id":100024701,"comment_content":"请教下老师，system v和posix两套区别是什么？为什么要搞两套？","like_count":0,"discussions":[{"author":{"id":1037041,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/f1/c071cffa.jpg","nickname":"一只特立独行的猪","note":"","ucode":"421D0A6FE29127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281834,"discussion_content":"历史原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591827001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105986,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1561121166,"is_pvip":false,"replies":[{"id":"38650","content":"是的，要不这种资源是相关性不大的，比如线程池，要不就是还需要一次锁来强某个资源","user_name":"作者回复","comment_id":105986,"uid":"1001590","ip_address":"","utype":1,"ctime":1561420224,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561121166","product_id":100024701,"comment_content":"请问老师信号量仅仅是一个对资源数量的标识, 那怎么知道具体是哪个资源被申请和释放了呢, 如果不对具体的资源做标记, 不是还是可能引起冲突吗?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454904,"discussion_content":"是的，要不这种资源是相关性不大的，比如线程池，要不就是还需要一次锁来强某个资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561420224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105119,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1560923134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560923134","product_id":100024701,"comment_content":"共享内存的确常用, Android 的 Ashmen 共享内存就是基于 Linux 的共享内存操作","like_count":0},{"had_liked":false,"id":105104,"user_name":"W.jyao","can_delete":false,"product_type":"c1","uid":1422582,"ip_address":"","ucode":"C57B3A78B6A795","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/f6/735673f7.jpg","comment_is_top":false,"comment_ctime":1560917814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560917814","product_id":100024701,"comment_content":"命令行参数也可以算一种，哈哈。","like_count":0},{"had_liked":false,"id":105100,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1560916628,"is_pvip":false,"replies":[{"id":"49015","content":"就是系统调用的名称。","user_name":"作者回复","comment_id":105100,"uid":"1001590","ip_address":"","utype":1,"ctime":1567579760,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1560916628","product_id":100024701,"comment_content":"xxxget（）函数，从这个“get”字面意思上来说，是不是也有个资源池或者缓冲什么的机制？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454558,"discussion_content":"就是系统调用的名称。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}