{"id":88417,"title":"38 | 对象序列化的危害有多大？","content":"<p>如果一个函数或者对象，不管它位于多么遥远的地方，都可以在本地直接被调用，那该有多好呀！这是一个非常朴素、美好的想法。基于这个设想，诞生了很多伟大的技术和协议，比如远程过程调用（RPC）、远程方法调用（RMI）、分布式对象（Distributed Object）、组件对象模型（COM）、公共对象请求代理（CORBA）和简单对象访问协议（SOAP）等……这个列表还可以很长很长。</p><p>躲在这些协议背后的核心技术之一，就是<strong>序列化</strong>。简单地说，序列化就是要把一个使用场景中的一个函数或者对象以及它们的执行环境，打包成一段可以传输的数据，然后把该数据传输给另外一个使用场景。在这个使用场景中，该数据被拆解成适当的函数或者对象，包括该函数或者对象的执行环境。这样，该函数或者对象就可以在不同的场景下使用了。</p><p><strong>数据拆解的过程，就是反序列化</strong>。<strong>打包、传输、拆解是序列化技术的三个关键步骤</strong>。由于传输的是数据，打包和拆解可能使用不同的编程语言，运行在不同的操作系统上。这样就带来了跨平台和跨语言的好处。而数据能够传输，就意味着可以带来分布式的好处。数据当然也可以存储，而可以存储意味着相关对象的生命周期的延长，这是不是也是一个非常值得兴奋的特点？</p><!-- [[[read_end]]] --><p>的确是一个美妙的想法，对吧？ <strong>如果一个想法不是足够好，它也不会造成足够坏的影响。</strong></p><h2>评审案例</h2><p>我们用Java语言的例子来看看序列化的问题。先一起来看一段节选的Java代码。你能看出这段代码有什么问题吗？该怎么解决这个问题？</p><pre><code>public class Person implements Serializable {\n    // &lt;snipped&gt;\n    \n    private String firstName;\n    private String lastName;\n    private String birthday;\n    private String socialSecurityNumber;\n\n    public Person(String firstName, String lastName,\n            String birthday, String socialSecurityNumber) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthday = birthday;\n        this.socialSecurityNumber = socialSecurityNumber;\n    }\n\n    // &lt;snipped&gt;\n}\n</code></pre><p>注意，socialSecurityNumber表示社会保障号，是一个高度敏感、需要高度安全保护的数据。如果社会保障号以及姓名、生日等信息被泄露，那么冒名顶替者就可以用这个号码举债买房、买车，而真实用户则要背负相关的债务。一旦社会保障号被泄露，想要证明并不是你申请了贷款，远远不是一件轻而易举的事情。在有些国家，社会保障号的保护本身甚至都是一个不小的生意。 在一个信息系统中，除了本人以及授权用户，任何其他人都不应该获知社会保障号以及相关的个人信息。</p><p>上述的代码，存在泄露社会保障号以及相关的个人信息的巨大风险。</p><h2>案例分析</h2><p>打包、传输、拆解是序列化技术的三个关键步骤。我们来分别看看这三个步骤。</p><p>首先，打包环节会把一个Person实例里的姓名、生日、社会保障号等信息转化为二进制数据。这段数据可以被传输、存储和拆解。任何人看到这段二进制数据，都可以拆解，还原成一个Person实例，从而获得个人敏感信息。这段二进制数据在传输和存储的过程中，有可能被恶意的攻击者修改，从而影响Person实例的还原。如果这个实例涉及到具体的商业交易，那么通过这样的攻击，还可以修改交易对象。</p><p>你看，序列化后的每一个环节，都有可能遭受潜在的攻击。序列化的问题有多严重呢？据说，<strong>大约有一半的Java漏洞和序列化技术有直接或者间接的关系</strong>。而且，由于序列化可以使用的场景非常多，序列化对象既可以看又可以改，这样就导致序列化安全漏洞的等级往往非常高，影响非常大。甚至每年都会有公司专门收集、整理和分析序列化漏洞，这就加剧了序列化安全漏洞的影响，特别是对于那些没有及时修复的系统来说。</p><p>1997年，Java引入序列化技术，至今二十多年里，由于序列化技术本身的安全问题，Java尝尽了其中的酸楚。这是一个“美妙”的想法带来的可怕错误。如果有一天，Java废弃了序列化技术，那一点儿也不值得惊讶。毕竟，和得到的好处相比，要付出的代价实在是太沉重了！</p><p>如果你的应用还没有开始使用序列化技术，这很好，<strong>不要惦记序列化的好处，坚持不要使用序列化</strong>。如果你的应用已经使用了序列化技术，那么可以做些什么来防范或者降低序列化的风险呢？</p><h2>额外的防护</h2><p>序列化技术本身并没有内在的安全防护措施，这也是Java序列化为什么会这么令人诅丧的原因之一。如果一定要使用序列化技术，我们就需要设计、部署、加固序列化的安全防线。</p><p>我们先聊聊面对序列化带来的种种问题，该如何保护被序列化的敏感数据。</p><p><strong>首先推荐的方式是，含有敏感数据的类，不要支持序列化</strong>。当然，这也就主动放弃了序列化带来的好处。</p><p><strong>次优的方式是，不要序列化敏感数据，把敏感数据排除在序列化数据之外</strong>。比如，案例中的序列化数据可以抽象地表述为如下的四项：</p><pre><code>  firstName | lastName | birthday | socialSecurityNumber\n</code></pre><p>能不能把敏感的socialSecurityNumber和birthday排除在外呢？Java语言的关键字transient就是为这一功能设计的。</p><pre><code>public class Person implements Serializable {\n    // &lt;snipped&gt;\n    \n    private String firstName;\n    private String lastName;\n    private transient String birthday;              // sensitive data\n    private transient String socialSecurityNumber;  // sensitive data\n\n    public Person(String firstName, String lastName,\n            String birthday, String socialSecurityNumber) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthday = birthday;\n        this.socialSecurityNumber = socialSecurityNumber;\n    }\n\n    // &lt;snipped&gt;\n}\n</code></pre><p>如果把socialSecurityNumber和birthday变量声明为transient，对象实例的序列化就会把这两个变量排除在外。这个时候，序列化数据就不包含敏感数据了。</p><pre><code>  firstName | lastName\n</code></pre><p><strong>排除敏感数据的序列化，还有另一种办法，那就是指定可以序列化的非敏感数据</strong>。如果把transient关键字提供的变量声明看成一个黑名单模式，Java还提供了一个白名单模式。使用静态的serialPersistentFields变量，可以指定哪些变量可以序列化。上面的案例中，如果只序列化firstName和lastName变量，那么敏感的socialSecurityNumber和birthday变量自然就被排除在外了。</p><pre><code>public class Person implements Serializable {\n    // &lt;snipped&gt;\n    \n    private String firstName;\n    private String lastName;\n    private String birthday;              // sensitive data\n    private String socialSecurityNumber;  // sensitive data\n\n    // list of serializable fields\n    private static final ObjectStreamField[]\n        serialPersistentFields = {\n            new ObjectStreamField(&quot;firstName&quot;, Person.class),\n            new ObjectStreamField(&quot;lastName&quot;, Person.class)\n        };\n\n    // &lt;snipped&gt;\n}\n</code></pre><p>可是，如果把敏感数据排除在序列化数据之外，也就意味着敏感数据不会在拆解后的对象实例中出现。这就使得序列化之前的实例和反序列化之后的实例并不一致。这种差异的存在，就足以使得序列化名存实亡，反序列化后的对象实例可能就没有太多的实际意义了。</p><p>那么有没有一种方法，既可以保护敏感数据，也能保持对象实例序列化前后的等价呢？办法还是有的。</p><p>如果在一个完全可信任的环境下，既不用担心敏感信息的泄露，也不用担心敏感信息的修改，更不用担心对象会被用于非可信的环境，敏感数据可以正常实例化了。然而，这严重限制了对象的使用环境，如果用错了环境，就会面临严肃的安全问题。</p><p>如果对象有可能适用于非可信的环境，就要使用复杂一些的技术。比如使用加密和签名技术，解决“谁能看”和“谁能改”的安全问题。可是，复杂技术的使用，几乎意味着我们对性能要求做出了妥协。面对这样的妥协，是否还需要使用序列化，有时候也是一个两难的选择。</p><h2>小结</h2><p>通过对这个评审案例的讨论，我想和你分享下面两点个人看法。</p><ol>\n<li>\n<p><strong>序列化技术不是一个有安全保障的技术，序列化数据的传输和拆解过程都可能被攻击者利用</strong>；</p>\n</li>\n<li>\n<p><strong>要尽量避免敏感信息的序列化</strong>。</p>\n</li>\n</ol><p>除了上述我们说到的方法，敏感信息在序列化过程中的处理和保护，还有三种常见的方法：</p><ol>\n<li>\n<p>实现writeObject，主动地、有选择地序列化指定数据。writeObject和serialPersistentFields变量都是指定序列化数据，但区别在于writeObject()覆盖了序列化的缺省函数，所以编码可以更自由；</p>\n</li>\n<li>\n<p>实现writeReplace， 使用序列化代理；</p>\n</li>\n<li>\n<p>实现Externalizable接口。</p>\n</li>\n</ol><p>我们把这三种方法的使用，留给讨论区，欢迎你对这三种方法做总结、分析，并与我一起交流。</p><h2>一起来动手</h2><p>下面的这段Java代码，有一个隐藏的序列化安全问题。你能找到这个问题，并且解决掉这个问题吗？</p><pre><code>public class Person extends HashMap&lt;String, String&gt; {\n    // &lt;snipped&gt;\n    \n    public Person(String firstName, String lastName,\n            String birthday, String socialSecurityNumber) {\n        super();\n        super.put(&quot;firstName&quot;, firstName);\n        super.put(&quot;lastName&quot;, lastName);\n        super.put(&quot;birthday&quot;, birthday);\n        super.put(&quot;socialSecurityNumber&quot;, socialSecurityNumber);\n    }\n    // &lt;snipped&gt;\n}\n</code></pre><p>欢迎你把自己看到的问题和想到的解决方案写在留言区，我们一起来学习、思考、精进！</p><p>如果你觉得这篇文章有所帮助，欢迎点击“请朋友读”，把它分享给你的朋友或者同事。</p><p></p>","neighbors":{"left":{"article_title":"37 | 边界，信任的分水岭","id":88097},"right":{"article_title":"39 | 怎么控制好代码的权力？","id":88673}},"comments":[{"had_liked":false,"id":81899,"user_name":"杨孔来","can_delete":false,"product_type":"c1","uid":1219154,"ip_address":"","ucode":"2CEA33CAB6322E","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/52/a51cbdef.jpg","comment_is_top":false,"comment_ctime":1554080573,"is_pvip":false,"replies":[{"id":"29784","content":"HTTP&#47;Web","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554137426,"ip_address":"","comment_id":81899,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27323884349","product_id":100019601,"comment_content":"如果不用序列化，有哪些替代方案<br>","like_count":5,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445384,"discussion_content":"HTTP/Web","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554137426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87764,"user_name":"唐名之","can_delete":false,"product_type":"c1","uid":1004394,"ip_address":"","ucode":"F472C71E043E03","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JKKWS6TzhncvAA0p0NDiaATPIvMicSM76vNAg9IG1ibibcJYPAiaicYjZfq4gAV8GRtcTpOibfRD8vzqHBtL0ibmhwQsbg/132","comment_is_top":false,"comment_ctime":1555685743,"is_pvip":false,"replies":[{"id":"31593","content":"RPC一般要求在可信任的环境下使用。 检查使用环境，看看能不能切断外部修改、监听的可能性。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1555720984,"ip_address":"","comment_id":87764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440587631","product_id":100019601,"comment_content":"那我们平常用的rpc 框架dubbo也会有这个序列化安全问题吧，如果想加上签名验证感觉成本又比较大","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447590,"discussion_content":"RPC一般要求在可信任的环境下使用。 检查使用环境，看看能不能切断外部修改、监听的可能性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555720984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82487,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1554221978,"is_pvip":false,"replies":[{"id":"29931","content":"#3，双向认证，数据加密的场景可以。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554338638,"ip_address":"","comment_id":82487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14439123866","product_id":100019601,"comment_content":"1. 习题：birthday和socialSecurityNumber是敏感数据，不能序列化。<br><br>2. 现在序列化不是用json格式比较多吗，好处，可以跨语言、平台<br><br>3. 如果用序列化的话，数据传输用https+token(JSON Web Token)会不会解决？","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445611,"discussion_content":"#3，双向认证，数据加密的场景可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554338638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85801,"user_name":"Jerry Chan","can_delete":false,"product_type":"c1","uid":1182767,"ip_address":"","ucode":"6D99FDAD6A3FEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/2f/54f7f676.jpg","comment_is_top":false,"comment_ctime":1555238435,"is_pvip":false,"replies":[{"id":"30895","content":"保存到数据库里，其实也是一种序列化的形式。 这样的设计，需要把对象和数据库保护起来，切断中间攻击的机会。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1555297393,"ip_address":"","comment_id":85801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145173027","product_id":100019601,"comment_content":"不能序列化，能保存翻数据库里面去吗？","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446815,"discussion_content":"保存到数据库里，其实也是一种序列化的形式。 这样的设计，需要把对象和数据库保护起来，切断中间攻击的机会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555297393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81941,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1554084268,"is_pvip":false,"replies":[{"id":"29783","content":"序列化是一个运用广泛的技术，不独Java有。序列化的问题也有普遍性。不过，不同的对象，使用的场景不同，所以威胁也有很大区别。我没有研究过JSON的序列化，抱歉不能给你更多的建议。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554137403,"ip_address":"","comment_id":81941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10144018860","product_id":100019601,"comment_content":"老师好，请教一个问题，我没有接触过Java，平时主要用Golang，用到了大量的json.Marshal方法，我平时管这个也叫序列化。不知老师是否了解json.Marshal，这跟Java的序列化有什么区别吗，还是只是恰好同名？","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445400,"discussion_content":"序列化是一个运用广泛的技术，不独Java有。序列化的问题也有普遍性。不过，不同的对象，使用的场景不同，所以威胁也有很大区别。我没有研究过JSON的序列化，抱歉不能给你更多的建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554137403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113513,"user_name":"小钟","can_delete":false,"product_type":"c1","uid":1242438,"ip_address":"","ucode":"1ADA62DBC5E22C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/46/f45d23a2.jpg","comment_is_top":false,"comment_ctime":1563044707,"is_pvip":false,"replies":[{"id":"42008","content":"可以的，双向认证的HTTPS或者TLS可以搭建一个可信的环境。<br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1563464939,"ip_address":"","comment_id":113513,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858012003","product_id":100019601,"comment_content":"请问老师 https不能解决这个问题吗？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458255,"discussion_content":"可以的，双向认证的HTTPS或者TLS可以搭建一个可信的环境。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563464939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353278,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1659329417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659329417","product_id":100019601,"comment_content":"序列化技术不是一个有安全保障的技术，序列化数据的传输和拆解过程都可能被攻击者利用；要尽量避免敏感信息的序列化。--记下来","like_count":0},{"had_liked":false,"id":353277,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1659329261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659329261","product_id":100019601,"comment_content":"社会信用代码和生日不要序列化","like_count":0},{"had_liked":false,"id":141107,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1571115439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571115439","product_id":100019601,"comment_content":"之前做redo undo  都用的序列化。还好每步操作都要重新鉴权","like_count":0},{"had_liked":false,"id":82108,"user_name":"KingSwim","can_delete":false,"product_type":"c1","uid":1024043,"ip_address":"","ucode":"84DE14B7EB2580","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/2b/efa6dc2e.jpg","comment_is_top":false,"comment_ctime":1554121706,"is_pvip":false,"replies":[{"id":"29778","content":"可以，但是两端要持有相同的密钥。密钥的协商和分享很困难。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554136888,"ip_address":"","comment_id":82108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554121706","product_id":100019601,"comment_content":"不能加密之后系列化么，然后拿到数据解密再反系列化？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445471,"discussion_content":"可以，但是两端要持有相同的密钥。密钥的协商和分享很困难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554136888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}