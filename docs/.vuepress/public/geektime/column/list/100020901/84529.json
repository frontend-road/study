{"id":84529,"title":"45 | 答疑（五）：网络收发过程中，缓冲区位置在哪里？","content":"<p>你好，我是倪朋飞。</p><p>专栏更新至今，四大基础模块的最后一个模块——网络篇，我们就已经学完了。很开心你还没有掉队，仍然在积极学习思考和实践操作，热情地留言和互动。还有不少同学分享了在实际生产环境中，碰到各种性能问题的分析思路和优化方法，这里也谢谢你们。</p><p>今天是性能优化答疑的第五期。照例，我从网络模块的留言中，摘出了一些典型问题，作为今天的答疑内容，集中回复。同样的，为了便于你学习理解，它们并不是严格按照文章顺序排列的。</p><p>每个问题，我都附上了留言区提问的截屏。如果你需要回顾内容原文，可以扫描每个问题右下方的二维码查看。</p><h2>问题 1：网络收发过程中缓冲区的位置</h2><p><img src=\"https://static001.geekbang.org/resource/image/49/28/49649598767b9ef537169558ee6be128.png?wh=900*2514\" alt=\"\"></p><p>第一点，是网络收发过程中，收发队列和缓冲区位置的疑问。</p><p>在 <a href=\"https://time.geekbang.org/column/article/80898\">关于 Linux 网络，你必须要知道这些</a> 中，我曾介绍过 Linux 网络的收发流程。这个流程涉及到了多个队列和缓冲区，包括：</p><ul>\n<li>\n<p>网卡收发网络包时，通过 DMA 方式交互的<strong>环形缓冲区</strong>；</p>\n</li>\n<li>\n<p>网卡中断处理程序为网络帧分配的，内核数据结构 <strong>sk_buff 缓冲区</strong>；</p>\n</li>\n<li>\n<p>应用程序通过套接字接口，与网络协议栈交互时的<strong>套接字缓冲区。</strong></p>\n</li>\n</ul><p>不过相应的，就会有两个问题。</p><p>首先，这些缓冲区的位置在哪儿？是在网卡硬件中，还是在内存中？这个问题其实仔细想一下，就很容易明白——这些缓冲区都处于内核管理的内存中。</p><!-- [[[read_end]]] --><p>其中，<strong>环形缓冲区</strong>，由于需要 DMA 与网卡交互，理应属于网卡设备驱动的范围。</p><p><strong>sk_buff 缓冲区</strong>，是一个维护网络帧结构的双向链表，链表中的每一个元素都是一个网络帧（Packet）。虽然 TCP/IP 协议栈分了好几层，但上下不同层之间的传递，实际上只需要操作这个数据结构中的指针，而无需进行数据复制。</p><p><strong>套接字缓冲区</strong>，则允许应用程序，给每个套接字配置不同大小的接收或发送缓冲区。应用程序发送数据，实际上就是将数据写入缓冲区；而接收数据，其实就是从缓冲区中读取。至于缓冲区中数据的进一步处理，则由传输层的 TCP 或 UDP 协议来完成。</p><p>其次，这些缓冲区，跟前面内存部分讲到的 Buffer 和 Cache 有什么关联吗？</p><p>这个问题其实也不难回答。我在内存模块曾提到过，内存中提到的 Buffer ，都跟块设备直接相关；而其他的都是 Cache。</p><p>实际上，sk_buff、套接字缓冲、连接跟踪等，都通过 slab 分配器来管理。你可以直接通过 /proc/slabinfo，来查看它们占用的内存大小。</p><h2>问题 2：内核协议栈，是通过一个内核线程的方式来运行的吗</h2><p>第二个问题，内核协议栈的运行，是按照一个内核线程的方式吗？在内核中，又是如何执行网络协议栈的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/1c/9bea298bcc349e80f46c1a406472381c.png?wh=900*1050\" alt=\"\"></p><p>说到网络收发，在中断处理文章中我曾讲过，其中的软中断处理，就有专门的内核线程 ksoftirqd。每个 CPU 都会绑定一个 ksoftirqd 内核线程，比如， 2 个CPU 时，就会有 ksoftirqd/0 和 ksoftirqd/1 这两个内核线程。</p><p>不过要注意，并非所有网络功能，都在软中断内核线程中处理。内核中还有很多其他机制（比如硬中断、kworker、slab 等），这些机制一起协同工作，才能保证整个网络协议栈的正常运行。</p><p>关于内核中网络协议栈的工作原理，以及如何动态跟踪内核的执行流程，专栏后续还有专门的文章来讲。如果对这部分感兴趣，你可以先用我们提到过的 perf、systemtap、bcc-tools 等，试着来分析一下。</p><h2>问题 3：最大连接数是不是受限于 65535 个端口</h2><p><img src=\"https://static001.geekbang.org/resource/image/50/8c/504ddb710169cb247b349d0d8a32818c.png?wh=900*1050\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/0a/70/0a5cb5d25a4b09c5f46ca8941e9fca70.png?wh=900*1314\" alt=\"\"></p><p>我们知道，无论 TCP 还是 UDP，端口号都只占 16 位，也就说其最大值也只有 65535。那是不是说，如果使用 TCP 协议，在单台机器、单个 IP 地址时，并发连接数最大也只有 65535 呢？</p><p>对于这个问题，首先你要知道，Linux 协议栈，通过五元组来标志一个连接（即协议，源IP、源端口、目的IP、目的端口)。</p><p>明白了这一点，这个问题其实就有了思路。我们应该分客户端和服务器端，这两种场景来分析。</p><p>对客户端来说，每次发起 TCP 连接请求时，都需要分配一个空闲的本地端口，去连接远端的服务器。由于这个本地端口是独占的，所以客户端最多只能发起 65535 个连接。</p><p>对服务器端来说，其通常监听在固定端口上（比如 80 端口），等待客户端的连接。根据五元组结构，我们知道，客户端的IP和端口都是可变的。如果不考虑 IP 地址分类以及资源限制，服务器端的理论最大连接数，可以达到 2 的 48 次方（IP 为 32 位，端口号为 16 位），远大于65535。</p><p>所以，综合来看，客户端最大支持65535个连接，而服务器端可支持的连接数是海量的。当然，由于 Linux 协议栈本身的性能，以及各种物理和软件的资源限制等，这么大的连接数，还是远远达不到的（实际上，C10M 就已经很难了）。</p><h2>问题 4： “如何优化 NAT 性能”课后思考</h2><p><img src=\"https://static001.geekbang.org/resource/image/c6/a0/c623453e2e054d2f4407ab1e4a87f5a0.png?wh=1125*1981\" alt=\"\"></p><p>在 <a href=\"https://time.geekbang.org/column/article/83189\">如何优化 NAT 性能</a> 的最后， 我给你留了两个思考题。</p><p>MASQUERADE 是最常用的 SNAT 规则之一，通常用来为多个内网 IP 地址，提供共享的出口 IP。假设现在有一台 Linux 服务器，用了 MASQUERADE 方式，为内网所有 IP 提供出口访问功能。那么，</p><ul>\n<li>\n<p>当多个内网 IP 地址的端口号相同时，MASQUERADE 还能正常工作吗？</p>\n</li>\n<li>\n<p>内网 IP 地址数量或者请求数比较多的时候，这种使用方式有没有什么潜在问题呢？</p>\n</li>\n</ul><p>对于这两个思考题，我来也、ninuxer 等同学，都给出了不错的答案：</p><p><img src=\"https://static001.geekbang.org/resource/image/24/52/245ba322ff2975e56db18206f0797d52.png?wh=900*2247\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/f4/55/f41d8ad99120f22a7967e3afffe97555.png?wh=900*1050\" alt=\"\"></p><p>先看第一点，当多个内网 IP 地址的端口号相同时，MASQUERADE 当然仍可以正常工作。不过，你肯定也听说过，配置 MASQUERADE 后，需要各个应用程序去手动配置修改端口号。</p><p>实际上，MASQUERADE 通过 conntrack 机制，记录了每个连接的信息。而在刚才第三个问题 中，我提到过，标志一个连接需要五元组，只要这五元组不是同时相同，网络连接就可以正常进行。</p><p>再看第二点，在内网 IP 地址和连接数比较小时，这种方式的问题不大。但在 IP 地址或并发连接数特别大的情况下，就可能碰到各种各样的资源限制。</p><p>比如，MASQUERADE 既然把内部多个 IP ，转换成了相同的外网 IP（即 SNAT），那么，为了确保发送出去的源端口不重复，原来网络包的源端口也可能会被重新分配。这样的话，转换后的外网 IP 的端口号，就成了限制连接数的一个重要因素。</p><p>除此之外，连接跟踪、MASQUERADE机器的网络带宽等，都是潜在的瓶颈，并且还存在单点的问题。这些情况，在我们实际使用中都需要特别注意。</p><p>今天主要回答这些问题，同时也欢迎你继续在留言区写下疑问和感想，我会持续不断地解答。希望借助每一次的答疑，可以和你一起，把文章知识内化为你的能力，我们不仅在实战中演练，也要在交流中进步。</p><p></p>","comments":[{"had_liked":false,"id":76222,"user_name":"记忆","can_delete":false,"product_type":"c1","uid":1316682,"ip_address":"","ucode":"503DBE662BF544","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/4a/d8fd5563.jpg","comment_is_top":false,"comment_ctime":1552553020,"is_pvip":false,"replies":[{"id":"28166","content":"这是两个不同的概念，具体到数据上，内核协议栈都是操作指针，并不会在不同协议层之间复制数据","user_name":"作者回复","comment_id":76222,"uid":"1001282","ip_address":"","utype":1,"ctime":1552904524,"user_name_real":"倪朋飞"}],"discussion_count":6,"race_medal":0,"score":"70272029756","product_id":100020901,"comment_content":"老师你好，如果sk_buff 缓冲区 （socket buffer）不是套接字缓冲器区,那是不是还要进行一次数据的copy到套接字缓冲区，再通知应用程序有某个套接字数据可读了？那一帧数据到来，需要收包队列--&gt;sk_buff--&gt;套接字缓冲区--&gt;应用程序空间内存里，拷贝了3次呢？","like_count":16,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443222,"discussion_content":"这是两个不同的概念，具体到数据上，内核协议栈都是操作指针，并不会在不同协议层之间复制数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552904524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636551,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/c7/d0c0a613.jpg","nickname":"大地","note":"","ucode":"62D9098C0BCE13","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278668,"discussion_content":"这这个还是没有回答到底拷贝了几次，请问有最终的结论么？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591205009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1636551,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/c7/d0c0a613.jpg","nickname":"大地","note":"","ucode":"62D9098C0BCE13","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":304444,"discussion_content":"经过几个缓冲区就要拷贝几次，这很明显了。否则数据怎么从一个缓冲区到另一个缓冲区呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599571976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278668,"ip_address":""},"score":304444,"extra":""},{"author":{"id":1009527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/77/c1310aad.jpg","nickname":"剑衣清风","note":"","ucode":"470CD81F6612F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1636551,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/c7/d0c0a613.jpg","nickname":"大地","note":"","ucode":"62D9098C0BCE13","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":347075,"discussion_content":"参考下这篇文章 https://mp.weixin.qq.com/s/GoYDsfy9m0wRoXi_NCfCmg","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612147380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278668,"ip_address":""},"score":347075,"extra":""},{"author":{"id":1105816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/98/670d96c0.jpg","nickname":"流年似水","note":"","ucode":"048D320AFB576A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1009527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/77/c1310aad.jpg","nickname":"剑衣清风","note":"","ucode":"470CD81F6612F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586762,"discussion_content":"好文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662479137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347075,"ip_address":"江苏"},"score":586762,"extra":""}]},{"author":{"id":1333523,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/13/ff6f3ed5.jpg","nickname":"王章涛","note":"","ucode":"6EC55EC116A58D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552160,"discussion_content":"收包队列--&gt;sk_buff 这一层都是在内核里，并不会拷贝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645331649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73149,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1551832454,"is_pvip":false,"replies":[{"id":"26748","content":"嗯，谢谢分享。不过线上环境也不推荐一直运行在达到资源极限的场景，最好是预留一些资源以便应对异常情况","user_name":"作者回复","comment_id":73149,"uid":"1001282","ip_address":"","utype":1,"ctime":1551883927,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"27321636230","product_id":100020901,"comment_content":"[D45打卡]<br>四大模块学完了，接下来就是融会贯通了。😄<br><br>以前也知道socket连接是通过五元组唯一确定的，但实际写服务端程序时，还是会根据经验限定到65530。<br>现在想来，当时还是理解的不够透彻。<br>这个经验值当时是根据压力测试得来的，当时只用了一台机器去测连接数。🤦‍♂️如果用多个机器测可能好点。<br>另一个是服务器端单进程同时打开的文件数限制，平常限制的也是65535（可以继续调大）。一个进程默认还会打开2个文件，stdout stderr，所以需要再减2，如果有监听一个端口，还需要再减1。<br>有一次在生产环境中，同时连接数限制的是65535，结果到65533个连接时，把监听的端口给关闭了。（可能是所用框架导致的）虽然已有的连接未受影响，但之后就无法再接受新连接了。","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441936,"discussion_content":"嗯，谢谢分享。不过线上环境也不推荐一直运行在达到资源极限的场景，最好是预留一些资源以便应对异常情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551883927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90120,"user_name":"剑衣清风","can_delete":false,"product_type":"c1","uid":1009527,"ip_address":"","ucode":"470CD81F6612F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/77/c1310aad.jpg","comment_is_top":false,"comment_ctime":1556419706,"is_pvip":false,"replies":[{"id":"32536","content":"为客户端分配不同的端口去连接服务端，请求量大的时候还需要多机或多IP增大请求数","user_name":"作者回复","comment_id":90120,"uid":"1001282","ip_address":"","utype":1,"ctime":1556635251,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"18736288890","product_id":100020901,"comment_content":"老师你好，对于问题3我有个疑问<br><br>“对客户端来说，每次发起 TCP 连接请求时，都需要分配一个空闲的本地端口，去连接远端的服务器。由于这个本地端口是独占的，所以客户端最多只能发起 65535 个连接。”<br><br>那像 ab 这样的压测工具，是如何做到并发对服务端接口压测的？","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448396,"discussion_content":"为客户端分配不同的端口去连接服务端，请求量大的时候还需要多机或多IP增大请求数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556635251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52553,"discussion_content":"一台物理机，可以增加 ip 别名。来扩充5元组的个数","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1574066382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2116245,"avatar":"https://static001.geekbang.org/account/avatar/00/20/4a/95/4f6f93c3.jpg","nickname":"知行合一","note":"","ucode":"A53A002DF3A652","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364127,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617369330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73198,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1551838224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14436740112","product_id":100020901,"comment_content":"最近在广泛收集资料学习老师讲的C10K到C1000K的问题，打卡总结。","like_count":3},{"had_liked":false,"id":220872,"user_name":"向南","can_delete":false,"product_type":"c1","uid":2007213,"ip_address":"","ucode":"F4D2AB9D5DDFD9","user_header":"","comment_is_top":false,"comment_ctime":1590332181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10180266773","product_id":100020901,"comment_content":"又是满满的干货，专栏的学习有一半的精华在评论区啊","like_count":2},{"had_liked":false,"id":73140,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1551831182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10141765774","product_id":100020901,"comment_content":"打卡day47<br>很高兴一直没掉队，网络一直是我的短板，得补补","like_count":2},{"had_liked":false,"id":78408,"user_name":"青石","can_delete":false,"product_type":"c1","uid":1215531,"ip_address":"","ucode":"B0056AD6453322","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/2b/3ab96998.jpg","comment_is_top":false,"comment_ctime":1553141884,"is_pvip":false,"replies":[{"id":"28761","content":"可以简单这么理解，但实际上也不准确，对同一个网络报文来说，不同协议栈层处理的是同一个pkt不同位置的数据（同一个struct内部），而不是链表中的不同item。真要理解的话，还是推荐去看一下内核源码","user_name":"作者回复","comment_id":78408,"uid":"1001282","ip_address":"","utype":1,"ctime":1553318314,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5848109180","product_id":100020901,"comment_content":"@记忆的问题“老师你好，如果sk_buff 缓冲区 （socket buffer）不是套接字缓冲器区,那是不是还要进行一次数据的copy到套接字缓冲区，再通知应用程序有某个套接字数据可读了？那一帧数据到来，需要收包队列--&gt;sk_buff--&gt;套接字缓冲区--&gt;应用程序空间内存里，拷贝了3次呢？”<br><br>老师的回复是“这是两个不同的概念，具体到数据上，内核协议栈都是操作指针，并不会在不同协议层之间复制数据”。<br><br>我的理解是，收包队列、sk_buff、套接字缓冲区、应用程序空间内存，都是链接表结构，收保队列-&gt;sk_buff的过程，是sk_buff的指针指向收保队列的链头，再重新给收包队列分配空链表，内存上只是单纯的指针移动，并不涉及数据迁移。<br><br>不知道理解对不对，还请老师指正。","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444083,"discussion_content":"可以简单这么理解，但实际上也不准确，对同一个网络报文来说，不同协议栈层处理的是同一个pkt不同位置的数据（同一个struct内部），而不是链表中的不同item。真要理解的话，还是推荐去看一下内核源码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553318314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73391,"user_name":"腾达","can_delete":false,"product_type":"c1","uid":1079876,"ip_address":"","ucode":"72F9CFBA44FDEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL9hlAIKQ1sGDu16oWLOHyCSicr18XibygQSMLMjuDvKk73deDlH9aMphFsj41WYJh121aniaqBLiaMNg/132","comment_is_top":false,"comment_ctime":1551876489,"is_pvip":false,"replies":[{"id":"28036","content":"后面的案例还会讲到timeout的","user_name":"作者回复","comment_id":73391,"uid":"1001282","ip_address":"","utype":1,"ctime":1552748369,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5846843785","product_id":100020901,"comment_content":"能不能再出一个有关TIME_WAIT、peer reset、socket read timeout、socket connect timeout 方面有关的案例？ 类似java、php、nginx，做应用开发的会遇到很多这类问题。之前有网友提问：期待结合生产环境对这几个内核参数的讲解。目前生产环境下php服务器time_wait特别多，网络包的流程： NGINX代理&lt;——&gt;PHP服务器——&gt;redis&#47;mysql.. <br>高峰时期php服务器一共50k+的连接。49k+的time_wait。 我看到老师回复”后面会有的“。难道是《案例篇：如何优化NAT性能》里一笔带过的有关TIME_WAIT的东西？ 能否专门出一个偏开发人员方面的网络案例？ 网络篇里的案例大部分人都说不太跟的上，基础都不好，可能大部分人都是偏开发，网络接触的少，像NAT更是很少人接触了。希望再出一个偏开发人员适用的网络的案例","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442060,"discussion_content":"后面的案例还会讲到timeout的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552748369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73165,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1551834519,"is_pvip":false,"replies":[{"id":"26749","content":"这是可配置的，也可以开启reuseport交给你系统来选择","user_name":"作者回复","comment_id":73165,"uid":"1001282","ip_address":"","utype":1,"ctime":1551884161,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5846801815","product_id":100020901,"comment_content":"试着回答下同学的提问。<br>nginx fork出来的子进程数是可以配置的。<br>有连接请求时，可能是选一个子进程响应连接请求（这个不太确定，也可能是主进程建立连接了交给子进程）。","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441942,"discussion_content":"这是可配置的，也可以开启reuseport交给你系统来选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551884161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357358,"user_name":"胖子罗","can_delete":false,"product_type":"c1","uid":1308729,"ip_address":"上海","ucode":"AF45AEED6064B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/39/4089c9b5.jpg","comment_is_top":false,"comment_ctime":1663201399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663201399","product_id":100020901,"comment_content":"服务端最大连接数不是和文件描述符有关系吗","like_count":0},{"had_liked":false,"id":345168,"user_name":"lJ","can_delete":false,"product_type":"c1","uid":2562558,"ip_address":"","ucode":"CC29D06A16FF93","user_header":"https://static001.geekbang.org/account/avatar/00/27/19/fe/d31344db.jpg","comment_is_top":false,"comment_ctime":1652088002,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1652088002","product_id":100020901,"comment_content":"老师您好，关于“环形缓冲区，由于需要 DMA 与网卡交互，理应属于网卡设备驱动的范围”<br><br>我在<br>http:&#47;&#47;arthurchiao.art&#47;blog&#47;tuning-stack-rx-zh&#47;<br>  -&gt;2 收包过程俯瞰 部分的第三点中说 网卡（通过 DMA）将包 copy 到内核内存中的 ring buffer<br>这一块有点糊涂了<br>","like_count":0,"discussions":[{"author":{"id":1642766,"avatar":"https://static001.geekbang.org/account/avatar/00/19/11/0e/23d6a88f.jpg","nickname":"Shuai","note":"","ucode":"BE705668C66225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571782,"discussion_content":"https://stackoverflow.com/questions/47450231/what-is-the-relationship-of-dma-ring-buffer-and-tx-rx-ring-for-a-network-card","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652409081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344070,"user_name":"王子虾","can_delete":false,"product_type":"c1","uid":2667644,"ip_address":"","ucode":"22B1ABCF9FC671","user_header":"https://static001.geekbang.org/account/avatar/00/28/b4/7c/59e24b60.jpg","comment_is_top":false,"comment_ctime":1651221086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651221086","product_id":100020901,"comment_content":"老师，有个问题是，服务器能【同时】支持的最大连接数<br>不是有一个accept全连接队列么，是有128限制吧？这个和上面是不是和【而服务器端可支持的连接数是海量】矛盾啊，不是连接队列会爆么","like_count":0},{"had_liked":false,"id":337317,"user_name":"山岭小巨人","can_delete":false,"product_type":"c1","uid":1259567,"ip_address":"","ucode":"0F7905088B4C4D","user_header":"https://static001.geekbang.org/account/avatar/00/13/38/2f/3b4c70cf.jpg","comment_is_top":false,"comment_ctime":1646751141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646751141","product_id":100020901,"comment_content":"老师你好，对于最大连接数会不会超过65535的问题，判断的依据应该是 五元组或四元组（不包含协议）吧？<br>客户端如果只连接同一台服务器的同一个端口时，连接上限是65535；<br>如果客户端与 ServerA+Port 1 已经建立5万个连接，同时这个客户端应该还可以 与 ServerB+Port2 再建立5万个连接。因为这10万个连接的 四元组 不同","like_count":0},{"had_liked":false,"id":303548,"user_name":"tee","can_delete":false,"product_type":"c1","uid":1628215,"ip_address":"","ucode":"82E8D03E34ADAD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYeenVcfUP2PhW4V1y4EDptWibKBDia8lpic1KUuqaXwuydbyrnfXq9Emfbjxkddf10X6tk7vCTA6Fw/132","comment_is_top":false,"comment_ctime":1626852281,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626852281","product_id":100020901,"comment_content":"遇到一个奇怪的问题  用scp传输数据  默认的22端口很慢，改掉ssh的端口到10000 传输速度就很快了，中间没有安全设备，iptables也没做限制。这个会是套接字的缓冲区在影响吗？","like_count":0},{"had_liked":false,"id":285799,"user_name":"xingtianbj","can_delete":false,"product_type":"c1","uid":1009911,"ip_address":"","ucode":"F57D9F347AD0FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/f7/44bee670.jpg","comment_is_top":false,"comment_ctime":1617015517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617015517","product_id":100020901,"comment_content":"sk_buff 缓冲区和套接字缓冲区是不是一个东西，查了半天资料也没找到这两者的区别","like_count":0},{"had_liked":false,"id":282712,"user_name":"卡拉肖克","can_delete":false,"product_type":"c1","uid":1671071,"ip_address":"","ucode":"E0EC7616C35E5E","user_header":"https://static001.geekbang.org/account/avatar/00/19/7f/9f/257bd861.jpg","comment_is_top":false,"comment_ctime":1615372388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615372388","product_id":100020901,"comment_content":"老师您好，这边遇到个问题，数据卡在send-Q，发送不出去，连接过一会也断开了，这个问题应该从哪入手呢？","like_count":0},{"had_liked":false,"id":248529,"user_name":"Geek_03056e","can_delete":false,"product_type":"c1","uid":1509657,"ip_address":"","ucode":"6D4289AD71BC1A","user_header":"","comment_is_top":false,"comment_ctime":1600214751,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1600214751","product_id":100020901,"comment_content":"缓冲区有几个，在什么阶段，这个问题，困扰了很长时间了","like_count":0,"discussions":[{"author":{"id":1636551,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/c7/d0c0a613.jpg","nickname":"大地","note":"","ucode":"62D9098C0BCE13","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310707,"discussion_content":"一般困扰大家的都是那个所谓的socket缓冲区到底是个什么样的。\n\n1 网卡到内核的sk_buff(第1次copy，DMA)\n2 内核协议栈处理对sk_buff进行处理，然后到传输层(以TCP为例)的时候，将这个sk_buff挂在sock结构体的sk_receive_queue队列上(不涉及copy操作)，可以理解成这个队列就是socket在内核里的缓冲区。\n3 将sk_receive_queue队列上的数据拷贝到用户态的缓冲区(第2次拷贝，从内核态到用户态)\n\n可以看看这个哥们的源码分析(前后几篇有关联的可以都看一下)：\nhttps://www.cnblogs.com/wanpengcoder/p/11752133.html","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602010744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2268182,"avatar":"","nickname":"Geek_2a37b1","note":"","ucode":"A27487D7911D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1636551,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/c7/d0c0a613.jpg","nickname":"大地","note":"","ucode":"62D9098C0BCE13","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":352145,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614609188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310707,"ip_address":""},"score":352145,"extra":""}]}]},{"had_liked":false,"id":225222,"user_name":"jorin@zou","can_delete":false,"product_type":"c1","uid":1564869,"ip_address":"","ucode":"A8CEF7CCF33570","user_header":"https://static001.geekbang.org/account/avatar/00/17/e0/c5/c324a7de.jpg","comment_is_top":false,"comment_ctime":1591686750,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591686750","product_id":100020901,"comment_content":"接跟踪、MASQUERADE 机器的网络带宽等，都是潜在的瓶颈，并且还存在单点的问题？<br>这里的单点的问题具体是指？","like_count":0,"discussions":[{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336011,"discussion_content":"应该是MASQUERADE机器之间没有共享转换后的NAT信息，举个例子server A连接到Nat a,如果Nat a出现故障，Nat b是不知道Server A的Nat信息的。所以会存在单点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608451601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120752,"user_name":"胖胖虎","can_delete":false,"product_type":"c1","uid":1139121,"ip_address":"","ucode":"9CA8F99CC82944","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/b1/1261c177.jpg","comment_is_top":false,"comment_ctime":1564989715,"is_pvip":false,"replies":[{"id":"44391","content":"是的，除了内存拷贝优化，还减少了原来冗长的网络协议栈处理过程","user_name":"作者回复","comment_id":120752,"uid":"1001282","ip_address":"","utype":1,"ctime":1565014535,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"1564989715","product_id":100020901,"comment_content":"老师，现在有很多零拷贝的技术比如dpdk，比较pf_ring_zc。我的理解是，这些技术通过内存映射的方法，直接把网卡设备环形缓冲里的数据直接拷贝到了用户态，省略了先拷贝到sk_buff，再到socket缓冲区，再到应用程序这个过程。不知道我这个理解是否准确。","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461460,"discussion_content":"是的，除了内存拷贝优化，还减少了原来冗长的网络协议栈处理过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565014535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046745,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/d9/dc58bb9b.jpg","nickname":"SUNTOPO","note":"","ucode":"0DD7492725962C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268319,"discussion_content":"那网络协议还是要处理才行呀，难道把内核处理的流程放到用户态再执行一遍？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589762489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139121,"avatar":"https://static001.geekbang.org/account/avatar/00/11/61/b1/1261c177.jpg","nickname":"胖胖虎","note":"","ucode":"9CA8F99CC82944","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046745,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/d9/dc58bb9b.jpg","nickname":"SUNTOPO","note":"","ucode":"0DD7492725962C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306435,"discussion_content":"如果是使用内核bypass技术，同时还需要对数据包进行转发等操作，那么在用户态实现网络协议栈是一种途径。还有一种方式是用户态处理完再塞回内核继续做处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600267808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":268319,"ip_address":""},"score":306435,"extra":""}]}]},{"had_liked":false,"id":84972,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1554950581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554950581","product_id":100020901,"comment_content":"DAY45，打卡<br>","like_count":0},{"had_liked":false,"id":78960,"user_name":"我不吃甜食","can_delete":false,"product_type":"c1","uid":1086808,"ip_address":"","ucode":"1718E6D78F2852","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/58/95e9507d.jpg","comment_is_top":false,"comment_ctime":1553309375,"is_pvip":false,"replies":[{"id":"28781","content":"C10K篇里面已经讲过了","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1553319873,"ip_address":"","comment_id":78960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553309375","product_id":100020901,"comment_content":"老师好，能不能讲一下select，poll和epoll的本质区别？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444303,"discussion_content":"C10K篇里面已经讲过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553319873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73339,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1551863174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551863174","product_id":100020901,"comment_content":"有一篇收获满满","like_count":0},{"had_liked":false,"id":73219,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1551842180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551842180","product_id":100020901,"comment_content":"这一张满满干货，","like_count":0},{"had_liked":false,"id":73148,"user_name":"爱学习的小学生","can_delete":false,"product_type":"c1","uid":1413556,"ip_address":"","ucode":"040AB71F0394F2","user_header":"https://static001.geekbang.org/account/avatar/00/15/91/b4/d5d9e4fb.jpg","comment_is_top":false,"comment_ctime":1551832416,"is_pvip":false,"replies":[{"id":"26746","content":"正好反正，客户端会随机一个端口去连接80端口","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1551883762,"ip_address":"","comment_id":73148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551832416","product_id":100020901,"comment_content":"客户端和服务端nginx连接80端口时，nginx会fork出一个子进程选一个随机端口与客户端建立连接吗？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441935,"discussion_content":"正好反正，客户端会随机一个端口去连接80端口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551883762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}