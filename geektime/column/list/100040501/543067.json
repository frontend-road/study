{"id":543067,"title":"41｜对象传参和返回的最佳实践","content":"<p>你好，我是吴咏炜。</p><p>在<a href=\"https://time.geekbang.org/column/article/178940\">第 10 讲</a>我们讨论过，《C++ 核心指南》的 F.20 条款推荐我们优先使用返回对象的方式。在那里，我们简单地讨论了一些例外情况，并没有深入展开。同时，我们没有讨论传参形式的选择，而事实上，这两个问题是紧密相关的——尤其是考虑到出参和返回语句都是函数向外传递对象的方式。今天，我们就来深入探讨一下这个问题。</p><h2>传统的对象传递方式</h2><p>Herb Sutter 在 CppCon 2014 时早就总结过，传统的——即 C++98 的——对象传递方式应该是我们的基本出发点 <span class=\"orange\">[1]</span>。可以用表格示意如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/80/67eccdcc70dd9ce44d2b789d7c19ed80.png?wh=1649x381\" alt=\"\"></p><p>简单解释一下表格里的行列：</p><ul>\n<li>表格把对象的类型按复制代价分成三种，然后按出入参有四种不同的情况，分别进行讨论。</li>\n<li>复制代价低指相当于拷贝几个整数的开销；复制代价中指大于几个整数的开销，直至约 1 KB 的连续内存，且不涉及内存分配；除此之外属于代价高的情况。</li>\n<li>“出”指我们想要从函数中取得（返回）某个对象的情况；“入/出”指传递给函数且让函数修改该对象的情况；“入”指纯粹传递给函数作为参数且不修改该对象的情况；“入且保留一份”指函数会把参数指代的对象保存到某个地方，如类的成员变量或全局变量里。</li>\n</ul><p>当需要取得一个复制代价低到中的对象时，我们可以直接使用函数的返回值。由于 C++98 没有移动，复制代价高的对象只能使用出参的方式来返回，如容器。如果一个对象既是出参又是入参，那我们就只能使用按引用传递的出入参了。如果是纯粹的入参，那不管我们怎么使用，我们就只考虑复制代价：如果复制代价很低，比如小于等于两个指针的大小，那直接按值传递就好；否则，按 const 引用传递性能更高，明确表达了该函数不修改此入参的意图。对于入参的这两种方式，我们都无法修改调用方手里的对象。</p><!-- [[[read_end]]] --><p>对于表格右上角的复制代价高的对象返回，我们还有一种方式是把它分配在堆上，然后返回 <code>X*</code>。这样会带来内存分配的开销，但之后这个对象的传递就非常方便了，在很多场景下仍然是值得的。</p><h2>现代 C++ 的对象传递方式</h2><p>到了现代 C++，上面的建议仍然基本适用。不过，我们需要做一点小小的调整：</p><p><img src=\"https://static001.geekbang.org/resource/image/88/5e/8808e960166e4694ae9027a68a52b75e.png?wh=1653x423\" alt=\"\"></p><p>表格的形式基本不变，但我们加入了一些移动相关的情况。尤其是，对于是否可以使用函数返回值来返回对象，主要的衡量标准成了移动的代价。现在我们可以返回一个 <code>vector</code>，甚至一个 <code>vector</code> 的 <code>array</code>（在 <code>array</code> 不是很大的情况下）。对于 <code>unique_ptr</code> 或其他只能移动的对象，我们也可以参照 <code>int</code> 这样的小对象来处理，在除了出入参的情况外一律使用值的方式来传递和返回。</p><p>对于右上角的大对象返回，我们之前说过可以在堆上分配并返回指针。到了现代 C++，我们对此建议的修改是，使用 <code>unique_ptr</code>（如果不确定是否会“共享”）或 <code>make_shared</code>（如果确定需要共享）——有所有权的裸指针已经不再建议使用了。</p><p>这就是我们传递对象的基本方式了。如果我们对性能有特殊需求的话——比如，设计一些供其他人使用的公共库——那我们可能需要进一步细分后面移动相关的情况。</p><h3>针对移动的优化</h3><p><img src=\"https://static001.geekbang.org/resource/image/5a/fa/5a7db5275dc62277fd3bcd69a616c0fa.png?wh=1652x427\" alt=\"\"></p><p>黄色部分是我们针对移动进行的额外优化（和 Herb 不同，我觉得单独区分“入且移动一份”没什么意义——反而在概念上引发复杂性和矛盾——因而没有对这种情况单独进行讨论）。事实上，我们使用移动构造函数和移动赋值运算符（可以复习一下<a href=\"https://time.geekbang.org/column/article/169263\">第 2 讲</a>和<a href=\"https://time.geekbang.org/column/article/169268\">第 3 讲</a>），正是这种针对移动的优化。</p><p>再拿 Herb 的例子来说明一下。假设我们有一个 <code>employee</code> 类：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  …\n  void set_name(const string&amp; name)\n  {\n    name_ = name;\n  }\n\nprivate:\n  string name_;\n};\n</code></pre><p>考虑到我们传递的对象可能是个临时对象——如果我们传递字符串字面量的话，就会产生出一个临时的 <code>string</code> 对象——我们可以针对移动来优化一下：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  …\n  void set_name(const string&amp; name)\n  {\n    name_ = name;\n  }\n  void set_name(string&amp;&amp; name)\n  {\n    name_ = move(name);\n  }\n  …\n}\n</code></pre><p>这样，当参数是一个右值时，我们就可以使用这个右值引用的重载，直接把名字移到 <code>name_</code> 里，省去了复制字符串及潜在的内存分配开销。</p><p>需要注意的是，通常只有在你设计某些基础设施、需要达到较高的优化时，才需要这么去做。对于普通的 <code>employee</code> 类，这么做的必要性不高（<code>employee::set_name</code> 不会成为一个影响你程序性能的因素吧？）；而对于像 <code>std::string</code> 这样的基础库，那这样的优化就完全必要了。</p><h3>值传参？</h3><p>对以上的代码有一种简化的写法，值得探讨一下。它就是值传参：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  …\n  void set_name(string name)\n  {\n    name_ = move(name);\n  }\n  …\n}\n</code></pre><p>这里我们通过 <code>string</code> 的值传参，把两种情况合成了一种。当传进来的 <code>string</code> 是一个左值时，我们先进行一次拷贝构造，然后进行了一次移动赋值；当传进来的 <code>string</code> 是一个右值时，我们先进行一次移动构造，然后进行了一次移动赋值。这样，似乎我们以一次移动为代价，把两种情况归一了。看起来似乎还不错？</p><p>事实上，<a href=\"https://time.geekbang.org/column/article/169263\">第 2 讲</a>里 <code>smart_ptr</code> 的赋值运算符，我就是以这种方式来实现的。这种用法有一个专门的名字，叫“拷贝并交换惯用法”（copy-and-swap idiom）<span class=\"orange\">[2]</span>。它能优雅地归并拷贝和移动赋值运算符，取消自赋值检查，并实现强异常安全性。</p><p>但是，如果我们考虑到 <code>set_name</code> 有可能被多次重复调用的话（虽然对于这个类似乎并不太会发生），那这个实现对于左值有一个潜在的重大缺陷：不能充分利用已经分配的内存。因此，容器和字符串的标准实现中都不使用这种方式来赋值。我们也需要记住 Howard Hinnant 的话：“不要盲目地认为构造和赋值具有相同的开销。”—— 一般而言，容器和字符串的拷贝赋值开销小于拷贝构造。</p><p>当我们采用最平常不过的 <code>const string&</code> 的传参形式时，在函数体内是一个拷贝赋值操作。当 <code>name_</code> 的已分配空间比新名字的长度大时，我们不需要任何新的内存分配，拷贝赋值操作会直接把字符串复制到目标字符串缓冲区里。仅当目标缓冲区空间不足时，我们才会需要新的内存分配。可想而知，在典型的赋值场景下，在几次分配之后，缓冲区就足够大了，我们就不再会需要分配内存，因此我们后面就不再会有内存的分配和释放操作。</p><p>而当我们采用 <code>string</code> 的值传参时，对于左值参数，我们每次都必然会发生一次内存分配操作（通常还伴随着老的 <code>name_</code> 的内存释放）。因此，在有重复调用的场景下，值传参可能并不合适。</p><p>不过，这也意味着，值传参的方式对于构造函数是非常合适的（对象构造不可能发生多次）。我们完全可以写：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  employee(string name)\n    : name_(std::move(name))\n  {}\n  …\n};\n</code></pre><p>事实上，这也是 clangd 会提示我们做的一个现代化（modernize）的更改 <span class=\"orange\">[3]</span>。下面图里的提示来自 Vim 插件 YouCompleteMe（它内部使用 clangd）<span class=\"orange\">[4]</span>：</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/54/9d2f3eb1b085216c26d61075dddfd954.png?wh=1215x400\" alt=\"\"></p><p>如果你的构造函数有多个参数的话，这样写的好处尤其明显——因为如果我们使用左值和右值的重载的话，重载的数量会随着参数的数量而指数式上升！</p><h3>“不可教授”的极致性能传参方式</h3><p>有没有注意到 <code>set_name</code> 两种重载形式非常接近？它和我在<a href=\"https://time.geekbang.org/column/article/169268\">第 3 讲</a>里讨论完美转发时用的例子非常像，两个函数体内部唯一的区别就只是对 <code>std::move</code> 的调用了。我们确实可以把这个函数改造成模板形式，然后使用完美转发。考虑到参数不能是任意类型，我们再用 <code>enable_if</code> 加上了可对 <code>string</code> 赋值的限制。最终代码如下：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  …\n  template &lt;\n    typename S,\n    typename = enable_if_t&lt;\n      is_assignable_v&lt;string&amp;, S&gt;&gt;&gt;\n  void set_name(S&amp;&amp; name)\n  {\n    name_ = forward&lt;S&gt;(name);\n  }\n  …\n};\n</code></pre><p>对于已经读到这里（第 41 讲）的你来说，这种方式也不算太复杂吧？但是，它确实不简单了。写出这样代码的人需要了解 C++ 的下列知识点：</p><ul>\n<li><code>string</code> 有重用缓冲区空间的可能</li>\n<li>知道转发引用和完美转发</li>\n<li>知道 SFINAE 和 <code>enable_if</code></li>\n<li>知道标准库已经提供了相应的类型特征</li>\n</ul><p>难怪乎，Bjarne（C++ 之父）看到这样的代码，都感叹这“不可教授（Unteachable!）”了。</p><p>除了写这样代码的难度问题外，该代码还有下列问题：</p><ul>\n<li>对于不同形式的实参，会实际生成多份函数实例（本例中函数简单可内联，还问题不大）</li>\n<li>实现代码必须放在头文件里（至少在可以用 C++20 模块之前）</li>\n<li>因为这是个函数模板，它不能是虚函数</li>\n</ul><p>如果这些问题都可以接受的话，那我们获得的好处，就是性能了。Herb 实测了一些场景，这种写法确实可以获得最高的性能。他的测试结果总结在下图里：</p><p><img src=\"https://static001.geekbang.org/resource/image/07/a4/07867194438f549b1b2db38db13b60a4.png?wh=1755x998\" alt=\"\"></p><p>这张图里的四种不同颜色的柱子就是我们讨论过的几种不同的对象传递方式：</p><ol>\n<li>使用 <code>const string&amp;</code></li>\n<li>使用 <code>const string&amp;</code> 加 <code>string&amp;&amp;</code></li>\n<li>使用 <code>string</code> 值传参</li>\n<li>使用完美转发</li>\n</ol><p>对于 <code>string</code> 的左值（第一、二种情况）和右值（第三、四种情况），我们可以看到只有中等大小的左值情况下 <code>string</code> 值传参性能比较差，其他各种方式差异并不大。小字符串左值 <code>string</code> 值传参没有问题的原因是，<code>string</code> 一般都有小字符串优化，对于较短的字符串不需要进行堆上内存分配，因此左值值传参的问题要在字符串较长时才会暴露出来。而到了使用字符指针传参（第五、六种情况）给 <code>set_name</code> 这样的函数时，前三种方式都会临时构造一个 <code>string</code>，会多发生一次字符串复制和/或堆上内存分配；只有最后一种方式没有这种额外开销，本质上直接调用了 <code>string::operator=(const char*)</code>。</p><p>再强调一下，如果你的类不是处于代码瓶颈上、或潜在可能处于代码瓶颈上（当你设计某种基础库时），这样的大招很可能是不必要的。但 C++ 允许你在真正必要的时候写出这样的代码，让使用代码的人轻轻松松地获得性能的提升——他们并不需要关心 <code>set_name</code> 这样的函数的实现细节。</p><h2>字符串的特殊处理</h2><p>我们上面最后完美转发的大招实际上是因为字符串有特殊性——常见的字符串字面量不是一个 <code>string</code> 对象。那我们上面讨论的这些对象传递方式，对于字符串有什么其他需要定制的地方吗？</p><p>还真有。最主要的原因是，C++17 引入了 <code>string_view</code>（见<a href=\"https://time.geekbang.org/column/article/513719\">第 36 讲</a>）。对于“出”、“出/入”和“入且保留一份”的情况，我们仍然可以使用上面的建议（包括选择是不是使用完美转发）。不过，对于纯入参的情况，或者在“入且保留一份”的情况下你不打算使用移动优化的话，现在使用 <code>string_view</code> 是一个对字符串字面量更为友好的选择。</p><p>使用 <code>string_view</code> 的话，我们可以把 <code>set_name</code> 实现成：</p><pre><code class=\"language-cpp\">class employee {\npublic:\n  …\n  void set_name(string_view name)\n  {\n    name_ = name;\n  }\n  …\n};\n</code></pre><p>使用这一形式的话，我们代码的性能只会在使用字符串右值时略有损失，如使用 <code>emp.set_name(get_name_by_id(…))</code> 这样的代码。通常这不会是一个问题。</p><p>如果真需要极致优化的话，你仍然可以使用之前的方式，不过，需要注意，对于字符串字面量，形参 <code>string_view</code> 和 <code>string&amp;&amp;</code> 会导致重载有二义性。你需要使用完美转发的方式，或者使用形参为 <code>const char*</code>、<code>const string&amp;</code> 和 <code>string&amp;&amp;</code> 的三个重载。</p><h2>内容小结</h2><p>本讲我们讨论了对象传递的各种方式。对于大部分的情况，较为传统的对象传递方式仍然是较为合理的默认值。对于追求极致性能的情况，我们则可以使用重载、移动和完美转发来进行优化。</p><h2>课后思考</h2><p>如果我们需要对 <code>set_name</code> 成员函数写出 <code>noexcept</code> 说明的话，各个不同版本应分别怎么写？（答案可参考 Herb 的演讲。）</p><p>期待你的思考，也欢迎在留言区与我交流探讨！</p><h2><span class=\"reference\">参考资料</span></h2><p><span class=\"reference\">[1] Herb Sutter, “Back to the Basics! Essentials of Modern C++ Style” (CppCon 2014). <a href=\"https://www.youtube.com/watch?v=xnqTKD8uD64\">https://www.youtube.com/watch?v=xnqTKD8uD64</a></span></p><p><span class=\"reference\">[2] Stack Overflow, GManNickG’s answer to “What is the copy-and-swap idiom?”. <a href=\"https://stackoverflow.com/a/3279550/816999\">https://stackoverflow.com/a/3279550/816999</a></span></p><p><span class=\"reference\">[3] LLVM project, clangd. <a href=\"https://clangd.llvm.org/\">https://clangd.llvm.org/</a></span></p><p><span class=\"reference\">[4] Val Markovic et al., YouCompleteMe. <a href=\"https://ycm-core.github.io/YouCompleteMe/\">https://ycm-core.github.io/YouCompleteMe/</a></span></p>","comments":[{"had_liked":false,"id":366742,"user_name":"Geek_1a7863","can_delete":false,"product_type":"c1","uid":2896294,"ip_address":"河北","ucode":"0D95A8D3EE5B3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SZl2iaRGozGePt4eupmcmSkq336Y6FJCnMib7wuR4icjZLuuJjNHPHlXcKulNC6SXvpa6Wa8OQbwU9kWAsGO6D9AQ/132","comment_is_top":false,"comment_ctime":1674131619,"is_pvip":false,"replies":[{"id":133649,"content":"因为你写 x = y 的时候，x 的类型就应该是个左值引用。这里表达的就是允许从 S 类型（转发引用）到 string&amp;（右值引用）的赋值。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1674436694,"ip_address":"江苏","comment_id":366742,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在“不可教授”的极致性能传参方式小节中，模板参数 enable_if_t&lt;is_assignable_v&lt;string&amp;, S&gt;&gt;&gt;，为什么要用string的引用不用string呢？？","like_count":4},{"had_liked":false,"id":384460,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700983226,"is_pvip":false,"replies":[{"id":140276,"content":"如果使用 string&amp;&amp; 作为参数的话，是可以直接把字符串移动进去，不需要任何新内存分配，也不需要复制字符串内容。用 string_view 显然肯定会发生字符串内容复制，也有可能发生内存分配。\n\n没有生命周期陷阱，如果 name_ 的类型是 string 的话。（string_view 不适合作为成员变量的类型，很危险。）","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1701080591,"ip_address":"上海","comment_id":384460,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，这个版本的set_name：\n  void set_name(string_view name)\n  {\n    name_ = name;\n  }\n 为什么给set_name函数传入一个右值字符串，会存在性能损失？string_view直接绑定到了一个右值上，除了生命周期陷阱，应该没有其他性能损失吧？","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600469,"discussion_content":"因为你写 x = y 的时候，x 的类型就应该是个左值引用。这里表达的就是允许从 S 类型（转发引用）到 string&amp;（右值引用）的赋值。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1674436694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2049231,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/44/cf/5e02281c.jpg","nickname":"Add Oil！","note":"","ucode":"E0B72EE0A4E738","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":622947,"discussion_content":"string&amp; 是左值引用吧，是不是打错字了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1688839475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600469,"ip_address":"上海","group_id":0},"score":622947,"extra":""}]},{"author":{"id":2896294,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SZl2iaRGozGePt4eupmcmSkq336Y6FJCnMib7wuR4icjZLuuJjNHPHlXcKulNC6SXvpa6Wa8OQbwU9kWAsGO6D9AQ/132","nickname":"Geek_1a7863","note":"","ucode":"0D95A8D3EE5B3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600585,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674564851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380854,"user_name":"Ghostown","can_delete":false,"product_type":"c1","uid":1535367,"ip_address":"上海","ucode":"7F0291A9E58B05","user_header":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","comment_is_top":false,"comment_ctime":1694318511,"is_pvip":false,"replies":[{"id":138690,"content":"因为被赋值的对象本身有“容量”，所以（至少在若干次赋值之后）就不再有内存的分配，但会有内存的拷贝——这相比内存分配和释放来说就小多了。\n\n如果使用 const string&amp;、string&amp;&amp; 或 string 作为形参，那在实参为 const char* 且超过小字符串优化的允许范围时，都会临时构造一个 string，会多发生一次字符串复制和堆上内存分配，而只有完美转发的方式没有这种额外开销。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1694335951,"ip_address":"广东","comment_id":380854,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"吴老师请问，在Herb的那张图中，使用 const string&amp; 且入参是xvalue时为什么性能也很好？（我理解既然是生成了string的临时对象，那么就需要拷贝或内存分配）但是看图上似乎并没有发生拷贝&#47;内存分配？","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632627,"discussion_content":"如果使用 string&amp;&amp; 作为参数的话，是可以直接把字符串移动进去，不需要任何新内存分配，也不需要复制字符串内容。用 string_view 显然肯定会发生字符串内容复制，也有可能发生内存分配。\n\n没有生命周期陷阱，如果 name_ 的类型是 string 的话。（string_view 不适合作为成员变量的类型，很危险。）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701080591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2436694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2e/56/6f38de90.jpg","nickname":"V万能的小黑V","note":"","ucode":"262051F1B7847A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644168,"discussion_content":"我理解实参是个右值，构造了string_view之后string_view就没办法保证这个字符串的内存还存在了，再赋值给string进行内存读操作时就会有内存非法访问的问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715022787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356224,"user_name":"王小白白白","can_delete":false,"product_type":"c1","uid":1140277,"ip_address":"上海","ucode":"7049DA34B12208","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/35/1b14f2af.jpg","comment_is_top":false,"comment_ctime":1662050074,"is_pvip":false,"replies":[{"id":129782,"content":"是的，每次都构造了一个新的string。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1662369961,"ip_address":"上海","comment_id":356224,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"当我们采用 string 的值传参时，对于左值参数，我们每次都必然会发生一次内存分配操作（通常还伴随着老的 name_ 的内存释放。\n老师，这里的一次内存分配操作， 是指构造string参数吗","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627609,"discussion_content":"因为被赋值的对象本身有“容量”，所以（至少在若干次赋值之后）就不再有内存的分配，但会有内存的拷贝——这相比内存分配和释放来说就小多了。\n\n如果使用 const string&amp;、string&amp;&amp; 或 string 作为形参，那在实参为 const char* 且超过小字符串优化的允许范围时，都会临时构造一个 string，会多发生一次字符串复制和堆上内存分配，而只有完美转发的方式没有这种额外开销。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694335952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1535367,"avatar":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","nickname":"Ghostown","note":"","ucode":"7F0291A9E58B05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":627617,"discussion_content":"谢谢吴老师，和我之前想的不太一样。也就是说当形参是const string&amp; 且实参是xvalue（ prvalue也一样?），编译器并不会构造一个临时string对象赋给name_。那么name_ = name 这个赋值是直接拿的xvalue的值吗？恳请老师再指点一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694350081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627609,"ip_address":"上海","group_id":0},"score":627617,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1535367,"avatar":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","nickname":"Ghostown","note":"","ucode":"7F0291A9E58B05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628442,"discussion_content":"对。右值可以匹配 const string&amp;，所以最后就是拷贝了string里的内容，没有内存分配。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1695293234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627617,"ip_address":"新加坡","group_id":0},"score":628442,"extra":""}]}]},{"had_liked":false,"id":396495,"user_name":"Wanli","can_delete":false,"product_type":"c1","uid":3822630,"ip_address":"陕西","ucode":"FC0EE5DF657A75","user_header":"","comment_is_top":false,"comment_ctime":1734679765,"is_pvip":false,"replies":[{"id":143965,"content":"我个人几乎不用看视频的方式学习，但每个人可能都有最适合自己的方法。哪种顺畅用哪种，多尝试一下。这种问题别人的意见用处不大。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1735136979,"ip_address":"上海","comment_id":396495,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"对于C++primer 还没有看完的我来说，整本书难度是非常大的。第一遍基本上理解的太少了。但是我想问看书和看视频学习哪个好。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586601,"discussion_content":"是的，每次都构造了一个新的string。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662369961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357073,"user_name":"李聪磊","can_delete":false,"product_type":"c1","uid":1439748,"ip_address":"北京","ucode":"5FB1E5BEE08270","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/04/03aaf2dd.jpg","comment_is_top":false,"comment_ctime":1662913079,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"这篇文章把各种情况梳理的太棒了，受益匪浅！","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655524,"discussion_content":"我个人几乎不用看视频的方式学习，但每个人可能都有最适合自己的方法。哪种顺畅用哪种，多尝试一下。这种问题别人的意见用处不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1735136979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366742,"user_name":"Geek_1a7863","can_delete":false,"product_type":"c1","uid":2896294,"ip_address":"河北","ucode":"0D95A8D3EE5B3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SZl2iaRGozGePt4eupmcmSkq336Y6FJCnMib7wuR4icjZLuuJjNHPHlXcKulNC6SXvpa6Wa8OQbwU9kWAsGO6D9AQ/132","comment_is_top":false,"comment_ctime":1674131619,"is_pvip":false,"replies":[{"id":133649,"content":"因为你写 x = y 的时候，x 的类型就应该是个左值引用。这里表达的就是允许从 S 类型（转发引用）到 string&amp;（右值引用）的赋值。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1674436694,"ip_address":"江苏","comment_id":366742,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在“不可教授”的极致性能传参方式小节中，模板参数 enable_if_t&lt;is_assignable_v&lt;string&amp;, S&gt;&gt;&gt;，为什么要用string的引用不用string呢？？","like_count":4,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600469,"discussion_content":"因为你写 x = y 的时候，x 的类型就应该是个左值引用。这里表达的就是允许从 S 类型（转发引用）到 string&amp;（右值引用）的赋值。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1674436694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2049231,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/44/cf/5e02281c.jpg","nickname":"Add Oil！","note":"","ucode":"E0B72EE0A4E738","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":622947,"discussion_content":"string&amp; 是左值引用吧，是不是打错字了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1688839475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600469,"ip_address":"上海","group_id":0},"score":622947,"extra":""}]},{"author":{"id":2896294,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SZl2iaRGozGePt4eupmcmSkq336Y6FJCnMib7wuR4icjZLuuJjNHPHlXcKulNC6SXvpa6Wa8OQbwU9kWAsGO6D9AQ/132","nickname":"Geek_1a7863","note":"","ucode":"0D95A8D3EE5B3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600585,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674564851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384460,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700983226,"is_pvip":false,"replies":[{"id":140276,"content":"如果使用 string&amp;&amp; 作为参数的话，是可以直接把字符串移动进去，不需要任何新内存分配，也不需要复制字符串内容。用 string_view 显然肯定会发生字符串内容复制，也有可能发生内存分配。\n\n没有生命周期陷阱，如果 name_ 的类型是 string 的话。（string_view 不适合作为成员变量的类型，很危险。）","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1701080591,"ip_address":"上海","comment_id":384460,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，这个版本的set_name：\n  void set_name(string_view name)\n  {\n    name_ = name;\n  }\n 为什么给set_name函数传入一个右值字符串，会存在性能损失？string_view直接绑定到了一个右值上，除了生命周期陷阱，应该没有其他性能损失吧？","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632627,"discussion_content":"如果使用 string&amp;&amp; 作为参数的话，是可以直接把字符串移动进去，不需要任何新内存分配，也不需要复制字符串内容。用 string_view 显然肯定会发生字符串内容复制，也有可能发生内存分配。\n\n没有生命周期陷阱，如果 name_ 的类型是 string 的话。（string_view 不适合作为成员变量的类型，很危险。）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701080591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2436694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2e/56/6f38de90.jpg","nickname":"V万能的小黑V","note":"","ucode":"262051F1B7847A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644168,"discussion_content":"我理解实参是个右值，构造了string_view之后string_view就没办法保证这个字符串的内存还存在了，再赋值给string进行内存读操作时就会有内存非法访问的问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715022787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380854,"user_name":"Ghostown","can_delete":false,"product_type":"c1","uid":1535367,"ip_address":"上海","ucode":"7F0291A9E58B05","user_header":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","comment_is_top":false,"comment_ctime":1694318511,"is_pvip":false,"replies":[{"id":138690,"content":"因为被赋值的对象本身有“容量”，所以（至少在若干次赋值之后）就不再有内存的分配，但会有内存的拷贝——这相比内存分配和释放来说就小多了。\n\n如果使用 const string&amp;、string&amp;&amp; 或 string 作为形参，那在实参为 const char* 且超过小字符串优化的允许范围时，都会临时构造一个 string，会多发生一次字符串复制和堆上内存分配，而只有完美转发的方式没有这种额外开销。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1694335951,"ip_address":"广东","comment_id":380854,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"吴老师请问，在Herb的那张图中，使用 const string&amp; 且入参是xvalue时为什么性能也很好？（我理解既然是生成了string的临时对象，那么就需要拷贝或内存分配）但是看图上似乎并没有发生拷贝&#47;内存分配？","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627609,"discussion_content":"因为被赋值的对象本身有“容量”，所以（至少在若干次赋值之后）就不再有内存的分配，但会有内存的拷贝——这相比内存分配和释放来说就小多了。\n\n如果使用 const string&amp;、string&amp;&amp; 或 string 作为形参，那在实参为 const char* 且超过小字符串优化的允许范围时，都会临时构造一个 string，会多发生一次字符串复制和堆上内存分配，而只有完美转发的方式没有这种额外开销。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694335952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1535367,"avatar":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","nickname":"Ghostown","note":"","ucode":"7F0291A9E58B05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":627617,"discussion_content":"谢谢吴老师，和我之前想的不太一样。也就是说当形参是const string&amp; 且实参是xvalue（ prvalue也一样?），编译器并不会构造一个临时string对象赋给name_。那么name_ = name 这个赋值是直接拿的xvalue的值吗？恳请老师再指点一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694350081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627609,"ip_address":"上海","group_id":0},"score":627617,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1535367,"avatar":"https://static001.geekbang.org/account/avatar/00/17/6d/87/0b8bddb5.jpg","nickname":"Ghostown","note":"","ucode":"7F0291A9E58B05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628442,"discussion_content":"对。右值可以匹配 const string&amp;，所以最后就是拷贝了string里的内容，没有内存分配。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1695293234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627617,"ip_address":"新加坡","group_id":0},"score":628442,"extra":""}]}]},{"had_liked":false,"id":356224,"user_name":"王小白白白","can_delete":false,"product_type":"c1","uid":1140277,"ip_address":"上海","ucode":"7049DA34B12208","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/35/1b14f2af.jpg","comment_is_top":false,"comment_ctime":1662050074,"is_pvip":false,"replies":[{"id":129782,"content":"是的，每次都构造了一个新的string。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1662369961,"ip_address":"上海","comment_id":356224,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"当我们采用 string 的值传参时，对于左值参数，我们每次都必然会发生一次内存分配操作（通常还伴随着老的 name_ 的内存释放。\n老师，这里的一次内存分配操作， 是指构造string参数吗","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586601,"discussion_content":"是的，每次都构造了一个新的string。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662369961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396495,"user_name":"Wanli","can_delete":false,"product_type":"c1","uid":3822630,"ip_address":"陕西","ucode":"FC0EE5DF657A75","user_header":"","comment_is_top":false,"comment_ctime":1734679765,"is_pvip":false,"replies":[{"id":143965,"content":"我个人几乎不用看视频的方式学习，但每个人可能都有最适合自己的方法。哪种顺畅用哪种，多尝试一下。这种问题别人的意见用处不大。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1735136979,"ip_address":"上海","comment_id":396495,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"对于C++primer 还没有看完的我来说，整本书难度是非常大的。第一遍基本上理解的太少了。但是我想问看书和看视频学习哪个好。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655524,"discussion_content":"我个人几乎不用看视频的方式学习，但每个人可能都有最适合自己的方法。哪种顺畅用哪种，多尝试一下。这种问题别人的意见用处不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1735136979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357073,"user_name":"李聪磊","can_delete":false,"product_type":"c1","uid":1439748,"ip_address":"北京","ucode":"5FB1E5BEE08270","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/04/03aaf2dd.jpg","comment_is_top":false,"comment_ctime":1662913079,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"这篇文章把各种情况梳理的太棒了，受益匪浅！","like_count":1}]}