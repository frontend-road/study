{"id":326583,"title":"07 | 计算过程的正确性：如何设计正确的数据处理架构？","content":"<p>你好，我是任杰。这节课我和你聊一聊怎么设计一个能正确处理数据的架构。</p><p>只把一件事情做正确很容易，难的是把所有的事情都做正确。当然了，绝对的完美是很难达到的，那退而求其次，我们有没有可能设计出一种架构来减少犯错误的可能性呢？或者再退一步，如果出现了错误，我们能不能准确地知道错误出在什么地方呢？</p><p>金融行业是有强监管要求的。金融系统不仅仅要求你正确地实现系统，而且还要求你能解释系统为什么是正确的。</p><p>所以这节课我会带你掌握<strong>事件溯源</strong>（Event Sourcing）的核心设计。这个架构是金融行业多年来沉淀下来的行之有效的正确性解决方案。你掌握了这个架构，金融行业正确性的问题也就基本解决了。</p><h2>基本概念</h2><h3>游戏举例</h3><p>不知道你有没有玩过联网的5v5即时对战手游。10个人通过手机玩游戏，每个人都能看到其他人在游戏里的情况。虽然手机信号不太稳定，可能还会临时断网，但不管网络条件怎么恶劣，所有人手机里的游戏情况都是一样的。这就是多人游戏的正确性。</p><p>金融系统和游戏一样，对正确性都有很高的要求，这两个行业的架构也有类似之处。所以接下来我在介绍事件溯源设计的时候也会举一些游戏的例子，方便你理解。</p><h3>关键术语</h3><p>我们在<a href=\"https://time.geekbang.org/column/article/325378\">第4节课</a>和<a href=\"https://time.geekbang.org/column/article/327137\">第5节课</a>介绍了领域驱动设计。事件溯源是领域驱动设计理论关于正确性的重要内容。在事件溯源里有三个重要的术语：</p><!-- [[[read_end]]] --><p>1.命令（command）<br>\n2.事件（event）<br>\n3.状态（state）</p><p><strong>命令指的是系统收到的外部指令。</strong>比如你在玩游戏时，键盘和方向键的输入就是命令。</p><p>系统在收到外部的命令后，并不会马上执行，而是会先做一些检查，如果合理才会执行，不合理就不执行。比如说游戏里的地图都有边界，如果你控制的角色已经走到了墙角，再往前走就会碰到墙。这时如果游戏收到向前走的命令，游戏的边界碰撞检查算法就会判断这个命令是非法的。</p><p><strong>命令检查的结果就是事件。<strong>事件是合理的、一定要执行的事情。由于事件是正确性检查后的结果，事件的执行一定不会出问题。所以</strong>从逻辑上来说，只要生成了事件就一定要执行。<strong>一般我们会</strong>用英语的过去式来表示事件。</strong></p><p>比如在游戏里，让角色向右走的命令叫作\"move right\"，而对应的事件是\"<strong>moved</strong> right\"。这个小小的区别很重要，你要仔细体会。</p><p><strong>事件执行的结果是改变状态</strong>。还是沿用游戏的例子，你在游戏里看到的画面就是游戏的状态，比如你游戏角色的位置、装备、属性等等。</p><p>当系统的状态改变之后，外界会根据最新状态再产生新的命令，周而复始地执行。这就是用事件溯源设计的术语来描述你玩游戏的过程。</p><p>命令、事件和状态这三者之间的关系可以用下图来表示。<br>\n<img src=\"https://static001.geekbang.org/resource/image/e5/85/e50b2540c68e8b718908f5cacbfa3385.jpg?wh=2284*1291\" alt=\"\"></p><p>上面这幅图展现的是三者之间的<strong>静态关系</strong>。另一个角度是<strong>从时间的维度</strong>看这三者之间的动态关系。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/ab/e8da0fd566134661b34f4797227fa9ab.jpg?wh=2284*926\" alt=\"\"></p><h3>账务系统举例</h3><p>前面游戏的例子主要是为了方便让你理解命令、事件和状态这3个术语。掌握了这三个核心术语之后，我们再来看一个账务系统的例子。</p><p>账务系统负责记账，所以它管理着所有用户的账户金额信息，比如说你的现金余额、贷款等等。这些<strong>账户金额信息就属于状态</strong>。假设你现在账户余额有100元，你朋友的账户余额有200元，你们俩的金额状态示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/49/6e506f40c3eeeff7c0d1c746abd2fa49.jpg?wh=2284*1004\" alt=\"\"></p><p>假设你想通过手机转账的方式，转给你的朋友一块钱。这个<strong>转账请求是命令</strong>，会发送到账务系统。</p><p>账务系统在收到这个命令后会进行检查，判断这个命令是否合理。现在需要转账一块钱，而你的账户金额大于一块钱，所以转账是合理的。</p><p>既然合理，那么账务系统就会从命令生成事件，一共有两个。一个是从你的账户扣款一块钱，另一个事件是给你朋友账户入账一块钱。从这个账务系统的例子中你可以发现，<strong>一个命令可以生成多个事件。</strong></p><p>在我们这个转账例子里，一个转账命令会生成两个事件。示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/67/fdaa301dbc34efbb5c98e76394918b67.jpg?wh=2284*1404\" alt=\"\"></p><p>接下来是<strong>执行</strong>这两个事件。执行后会改变系统状态，也就是改变你们俩的余额情况。你的余额会变为99元，而你朋友的余额则变为201元，示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/41/3713d648efd2f1a1ac554c66e405d741.jpg?wh=2284*1064\" alt=\"\"></p><p>这时候你发现自己账户上还有一些余额，于是想尝试给你朋友转100元钱。但是当账务系统收到你的新转账命令后，会发现余额不足，无法完成转账。这时候系统应该怎么处理呢？</p><p><strong>当命令的检查不通过时，系统可以选择不生成事件，或者选择生成一个空事件（NOP）。</strong>生成空事件的好处是能在系统中记录某个命令在历史上曾经存在过。空事件的执行结果是不改变任何状态。这里你这两次转钱的流程示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/43/c9c04898c904aeb0297c1a57ef2d3243.jpg?wh=2284*970\" alt=\"\"></p><h2>如何处理命令和事件队列？</h2><p>掌握了事件溯源设计的三个核心术语后，我们再来看看相应的系统应该如何实现。</p><p>事件溯源设计的一个核心设计是<strong>所有的命令或者事件的处理都要有确定的顺序。</strong>同样的两个命令，如果它们俩到达的顺序不一样，生成的事件可能就会不一样。</p><p>比如说你现在的余额有100元。接下来有两个命令，一个命令是给你转账100元，一个命令是你打200元钱给你朋友。</p><p>如果你先收到100元钱，再付出去200元钱，那么你付钱的时候账户里刚好有200元，因此这两个命令的检查都能通过。但是如果你先转出去200元，再收到100元的话，系统会发现你在转200元钱出去的时候余额不足，所以这个命令会失败。</p><p>保证顺序的方法也不难，就是将所有的命令和事件都分别放到两个先入先出的队列（First In，First Out，FIFO）。一般这些队列会被保存到文件中。系统会从命令队列中逐一读取下一个命令，判断这个命令是否合理，然后将生成的所有事件放到事件队列末尾。示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/44/9c535af3cca79e65c81b1b82c6e50d44.jpg?wh=2284*1064\" alt=\"\"></p><p>在实现时还可以做一个小的优化。命令队列和事件队列虽然是两个不同的队列，但是由于它们的先后顺序是完全一致的，我们可以将这两个队列合并为一个队列。这时候的处理逻辑需要做一些小的调整。命令收到了之后，我们并不会马上存储下来。而是先处理这个命令，得到了对应的事件之后，再将命令和事件打包到一起，存到队列中。</p><p>下图列出了这个优化后的存储情况。你可以结合图片体会一下具体的区别：</p><p><img src=\"https://static001.geekbang.org/resource/image/70/d0/70d8e62c864c772fe3b8dd339ff20bd0.jpg?wh=2284*1613\" alt=\"\"></p><h2>怎样实现队列存储？</h2><p>事件溯源设计对于存储设备非常友好。无论是基于碟片的传统硬盘，还是新一代的SSD存储，事件溯源设计都能非常有效地利用存储设备提供的吞吐能力。</p><p>这是因为命令和事件这两个队列只会在末尾增加新的内容，而不会修改中间的内容。我们一般把这种访问方式叫作<strong>顺序写</strong>。与之对应的是<strong>随机读写</strong>。</p><p>你在挑选硬盘的时候，一般能看到硬盘生产商会公布两个硬盘速度，一个是顺序读写速度，另一个是随机读写速度。你会发现顺序读写的速度会快很多。所以事件溯源设计一般都能达到很高的读写效率。</p><p>请注意，当你将每个队列存储到文件时，需要存储的是两个文件，而不是一个。其中一个文件显然是队列的内容。另一个文件则是这个<strong>队列的索引文件</strong>，它记录了每个内容在队列中的位置。</p><p>在一些场景下，我们需要能定位到指定位置的内容，比如第3个命令是什么，或者第10个事件是什么。由于每个命令或者事件的内容大小会不一样，我们需要额外的索引文件来帮助我们定位。</p><p>由于位置信息和偏移量这两个数据的长度都是固定的，索引文件的每个内容都有固定大小，所以我们可以根据我们要的位置直接计算出索引文件的偏移量，然后根据索引文件找到队列文件的位置。计算的示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/45/1c/4522c6bac1d2ecae4c94a6e9f93c011c.jpg?wh=2199*1129\" alt=\"\"></p><h2>怎样执行事件和改变状态？</h2><p>解决了如何处理命令和事件之后，我们就剩下最后一件事情，那就是怎么执行事件和改变状态。</p><h3>自动机执行</h3><p>事件的执行用到了计算机里最经典的计算模型，叫作<strong>自动机</strong>。你可以将事件队列当作一个有始无终的磁带。你会从头开始依次读取每个事件。读取之后按事件内的指示来改变内存状态。然后挪到下一个位置，继续处理下一个事件。是不是很简单？自动机的示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/57/fe/57f6826aa93b86a78c8490b4b8acb3fe.jpg?wh=2199*1129\" alt=\"\"></p><p>这里有一个非常重要的限制你要牢记：<strong>自动机在执行事件的过程中不能有任何随机行为</strong>。这是为了保证整个系统能准确复现每一步计算，因为这样才能满足金融行业对每一步计算过程都能审计的要求。</p><p>对于没有随机性，我们要注意两点。</p><p>第一点是<strong>不要使用随机数。</strong>这里的随机数指的是真实的随机数，而不是伪随机数。真实的随机数一般会采用硬件的随机数发生器，每次读取都会读到不同内容。</p><p>伪随机数是一个算法和对应的初始值（也叫随机数的<strong>种子</strong>）。初始值一旦确定，伪随机数发生器所有接下来的随机数也就确定了，所以<strong>伪随机数其实并不是一个随机的事情。</strong>你需要将随机数的算法和初始的种子也记录到事件中，这样虽然看起来有随机数这几个字眼，但运行起来还是完全确定的。</p><p>另一点是<strong>不要有I/O</strong>（输入/输出）。准确地说是<strong>不要有来自外部的输入。</strong>外部输入有很多不确定性，比如输入到达的时间不确定，或者到达的内容每次都会变化，或者消息超时，什么都收不到。由于外部输入有太多的不确定性，一般要求不能有外部输入。</p><p>但是我们不能完全取消所有外部输入。这时候有一个折衷处理方式。你可以<strong>提前从外部获得输入，然后存储在事件队列中。</strong>这样在执行事件的时候就不会受到外部输入不确定性的影响了。</p><h3>时光机</h3><p>我们还是拿游戏举例，给你说明什么是时光机功能。一般来说游戏都可以存档。如果你游戏玩不下去了还可以读档，恢复之前的游戏状态。这个存档读档的过程就是坐时光机回到过去的过程。</p><p>事件溯源提供了更完美的时光机（time machine）功能。它能恢复到过去任何一个时间点的状态。你需要做的事情也很简单，只需要重置自动机状态，然后把事件一个一个执行，直到运行到你指定的时间点。如果你按照我前面指出的要求，保证自动机在执行过程中的每一步都是完全确定的，那么最终一定能准确地回到过去的状态。</p><p><strong>时光机给了金融系统审计的能力</strong>。由于过去所有的命令都得到了保留，你能解释状态是怎样一步一步从最开始的情况变到现在的样子。<strong>在互联网架构里我们更关注的是当前事实，所以架构设计时会倾向于记录状态，而不是原因。但是在金融系统里，我们更关注的是为什么，而非是什么，所以架构设计会倾向于记录原因</strong>。</p><h3>系统快照</h3><p><strong>时光机还给系统架构带来了一个副产品，那就是容灾能力。</strong>如果机器出了问题，状态全都丢失了。只要事件都在，事件溯源设计能保证一定能恢复到出问题前的状态。</p><p>但是这种容灾有一个问题。系统恢复的时间长短和事件的个数有关。事件多了可能恢复的事件会变得太长。所以我们需要针对性地优化恢复速度。</p><p>优化的方法很简单，只要将当前的系统状态全都保存到文件就可以了。我们一般称呼这个过程为<strong>打快照</strong>（Snapshot）。过了一段时间之后，如果想要恢复到系统的最新状态，你只需要先将快照文件加载到自动机里，然后从打快照的时间点开始执行后面的事件。</p><p>为了能让自动机找到下一个需要执行的事件，你<strong>需要将快照对应的事件位置也记录到快照里。</strong>打快照的示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/a2/8a55da94f3172527f0acb73f132d0ba2.png?wh=1920*1907\" alt=\"\"></p><p>有了打快照这个优化之后，系统恢复时间只和那些不在快照里的事件个数有关，跟事件的历史长度无关。所以<strong>打快照的频率决定了恢复时间，而不是事件的总个数。</strong></p><p>打快照频率有多种选择。你可以选择频繁地打快照，这样会减短系统恢复时间。但是考虑到系统打快照也需要时间，系统的运行时间会增加。或者你可以选择偶尔打快照，这样恢复时间变长，但是系统运行时间会变短。</p><p>幸运的是金融系统不需要过多思考打快照频率的问题。因为金融系统里有一个<strong>日切</strong>的概念。日切指的是在每天晚上12点的时候，你需要对当天的所有业务进行清点，确认无误后再开始下一天的工作，所以系统需要在每晚12点打一个快照。</p><p>除了每晚12点以外，金融行业一般还需要按月、季度和年度来进行业务清点工作。通常这些特殊的时间点也需要晚上12点整的状态，因此可以复用每天晚上日切的快照内容。但是也有可能碰到特殊时间点的要求，这时候需要单独打快照。</p><h2>怎样查询数据？</h2><p>到目前为止，我给你解释了事件溯源设计如何进行存储和计算，但是还没有说怎么查询数据。事件溯源设计对于查询有专门的术语，叫做<strong>CQRS</strong>（Command Query Responsibility Segregation），就是我们通常说的<strong>读写分离</strong>。这里的Command就是事件溯源里的Command。</p><p><strong>读写分离指的是写入的组件只负责写，查询的组件只负责读。</strong>这样做的优势是，写部分的存储和读部分的存储可以根据访问的特点来分别做优化。</p><p>读写分离不仅仅是事件溯源需要，在其他架构中也经常能看见。比如有些K/V存储在写入的时候，会选择一些写入速度较快的数据结构，像LSM树。在读取数据的时候则会选另一些读取速度快的数据结构，比如B+树。</p><p>事件溯源和其他设计不一样的地方在于，<strong>事件溯源既能查到当前内容，也能查到任何过去内容。</strong>我们先来看看怎么查询最近的内容。</p><p>思路很简单。如果我们将事件队列实时地复制出来，然后在另一台机器上用自动机执行这些事件，那么我们不就有最新的状态了吗？这就是状态机的<strong>读模式</strong>（Read Mode）。在读模式下，状态机只负责执行事件，不负责处理命令。示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/8d/2a57e5ee3543d977ff2d2ffab606638d.jpg?wh=1975*2008\" alt=\"\"></p><p>读模式自动机在游戏行业也经常能碰到。5v5即时对战手游在进行比赛的时候会有现场直播，讲解员会在电脑上实时讲解当前所有选手的对战情况。电脑就是用读模式复制了手机上所有的实时状态。</p><p>我们再来看看怎么查询历史状态。最直接的方案显然是利用时光机的功能。我们先找到距离查询时间最近的快照，然后从这个快照开始执行事件，直到碰到查询时间点。这时候的状态就是我们需要的状态。一般我们把这个重新计算历史状态的过程叫作<strong>回滚</strong>。</p><p>在进行架构设计时你可以选择将实时查询和历史查询的优势结合起来。你需要做的是搭建多个读模式自动机。其中一个永远保持在最新状态，剩下的根据历史查询的频率来选择固定在过去某个时间点，比如日切的时候。多个读模式自动机的示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/0b/1e0fbc8747a48ee71e3209b4f26f170b.png?wh=1920*1831\" alt=\"\"></p><h2>事件溯源正确性的数学本质是什么？</h2><p>我们在开篇词里提到会带你透过现象看本质。所以在给你讲完怎么实现事件溯源之后，最后我来带你了解一下事件溯源正确性的本质。</p><p>事件溯源的框架隶属于一个更大的系列，叫做<strong>不可变架构</strong>（Immutable Architecture）。在不可变架构里，所有数据都不能发生变化。所有这些不能变化的数据分为两大类，分别是事件（Event）和状态（State），分别用 <code>e</code> 和 <code>S</code> 来表示。</p><p>我们把前面讲到的自动机在数学上用函数 <code>f</code> 来表示。这个函数接受一个状态和事件，返回一个新的状态。如果我们把事件、状态和自动机结合在一起看，整个事件溯源的运行逻辑其实就是下面这个数学公式：</p><p>$$<br>\nS_{n}=f\\left(S_{n-1}, e_{n}\\right)<br>\n$$</p><p>如果你把公式里的所有 <code>S</code> 都展开，那么数学公式就会变成下面这个样子：</p><p>$$<br>\nS_{n}=f\\left(f\\left(\\ldots f\\left(f\\left(f\\left(S_{0}, e_{1}\\right), e_{2}\\right), e_{3}\\right) \\ldots\\right), e_{n-1}\\right)<br>\n$$</p><p>上面这个数学公式可能看不出来什么熟悉的东西。但是如果换个表现方式你可能就熟悉了。我们可以把 <code>f</code> 换成 <code>+</code> ，这样事件溯源的公式就会变成将当前状态和事件的求和，从而生成新的状态，所以数学公式也可以变成下面这个样子：</p><p>$$<br>\nS_{n}=S_{n-1}+e_{n}<br>\n$$</p><p>我们把简化后的数学公式展开之后可以发现，在事件溯源的设计里，<strong>任何一个时间点的状态等于之前所有事件效果的累积</strong>，就像下面这个公式表现的一样：</p><p>$$<br>\n\\begin{aligned}<br>\nS_{n} &amp;=S_{0}+e_{1}+e_{2}+\\ldots+e_{n-2}+e_{n-1} \\\\\\<br>\n&amp;=\\sum_{i=0}^{n-1} e_{i}<br>\n\\end{aligned}<br>\n$$</p><p>说到这里，我就可以给你解释，为什么在事件溯源里的我们会有那些假设了。</p><p>我们要求<strong>自动机是没有随机性的，原因是在数学里所有的数学函数都没有随机性</strong>，这样才能保证数学计算的结果是可以一步一步推演出来的。</p><p>另外，我们在<strong>记录事件的时候要求事件之间有顺序，这是因为自动机对应的函数一般是不可交换的（Non-commutative）。</strong></p><p>也就是说函数的参数交换顺序后会导致结果不一样，这也导致<strong>数据之间是线性序列（Linear Order）的关系。这个线性序列关系导致我们在存储的时候选择用FIFO队列的存储格式。</strong></p><p><strong>由于我们可以通过逻辑推导来验证数学计算的正确性，当事件溯源和数学公式之间有严格一一对应关系之后，我们就可以像验证数学公式一样来验证事件溯源结果的正确性。这就是事件溯源能保证金融系统正确性的本质原理。</strong></p><p>上面这些公式是用<strong>求和</strong>的方式来表示最终的状态是怎么得到的。在极限情况下，我们还可以有<strong>积分</strong>和<strong>微分</strong>表现形式。用积分的概念去理解的话，<strong>任何一个时间点的状态等于过去所有事件的积分</strong>，表示出来就是下面这个公式：</p><p>$$<br>\nS(T)=\\int_{t=0}^{T} e(t) d t<br>\n$$</p><p>微分的形式可能更有意义一些。<strong>每个事件是状态关于时间的导数</strong>，也就是下面的这个公式：</p><p>$$<br>\ne(t)=\\frac{d S(t)}{d t}<br>\n$$</p><p>微分和积分的形式更多的是让你从时间的角度来理解事件和状态之间的关系。你可以仔细体会一下。</p><h2>小结</h2><p>这节课我给你讲解了事件溯源设计这个架构设计思路。在事件溯源设计里，你重点要关注命令、事件和状态这三个术语。<strong>命令指的是我想要做什么，事件是我合理的行为会做出什么改变，状态就是改变的对象和结果。</strong></p><p>命令和事件都需要按照事件的先后顺序来处理。它们的存储也需要遵循同样的先后顺序。为了能定位到指定位置的内容，我们需要在存储数据的时候还同时存储一个位置的索引文件。</p><p>命令和事件都存储好之后，事件溯源设计里的状态机就可以从零开始，按顺序一一执行所有事件。我们要求所有执行的操作都具有可重复性，也就是不允许有随机性。这样就能确保我们多次从头执行，最终都能得到一样的结果。</p><p>这样要求有很多好处：既可以审计所有的状态变化过程，也可以有一定的容灾能力，同时还可以通过时光机和快照来让系统回滚到历史中任意一个时间点的状态。</p><p>事件溯源设计的查询需要遵循CQRS，也就是读写分离的架构。系统会有一个自动机负责处理所有的命令和事件，另外还有很多读模式的自动机负责提供查询服务。这些读模式自动机会将系统回滚到打快照的时间点，然后从这个时间点出发，计算查询时刻的历史状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/36/36cfb08a48ed311c89b94d27c55e6a36.jpg?wh=3075*2590\" alt=\"\"></p><h2>思考题</h2><p>我们在存储事件队列的时候需要存储两个文件。一个存储事件，另一个存储事件的索引。在现实中会出现各种异常的情况，比如机器可能会中途死机，这样有可能文件只写了一部分。</p><p>1.这时你应该如何检测文件是否完整？</p><p>2.这两个需要存储的文件，应该按照怎样的先后顺序存储呢？</p><p>欢迎你在留言区留下你的思考和疑问。如果这节课让你有所收获，也欢迎分享给你的同事、朋友，和他一起交流进步。</p>","neighbors":{"left":{"article_title":"06 | 计算输入的正确性：怎么选择正确时间的数据？","id":328625},"right":{"article_title":"08 | 计算结果的正确性：怎么保证计算结果是正确的？","id":330288}},"comments":[{"had_liked":false,"id":288652,"user_name":"LiuHu","can_delete":false,"product_type":"c1","uid":1039768,"ip_address":"","ucode":"284E2025C554BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/98/883c42b4.jpg","comment_is_top":true,"comment_ctime":1618580113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.2233720384734003e+18","product_id":100067701,"comment_content":"想了解事件溯源的同学推荐阅读：<br>https:&#47;&#47;docs.microsoft.com&#47;en-us&#47;previous-versions&#47;msp-n-p&#47;jj591559%28v=pandp.10%29?redirectedfrom=MSDN<br>","like_count":0},{"had_liked":false,"id":275011,"user_name":"华仔","can_delete":false,"product_type":"c1","uid":1098920,"ip_address":"","ucode":"851FF94CF5133A","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","comment_is_top":false,"comment_ctime":1611276679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18791145863","product_id":100067701,"comment_content":"感觉这个思路和会计记账的思路是一样的","like_count":4},{"had_liked":false,"id":272531,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1610114654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14495016542","product_id":100067701,"comment_content":"1、如何检测文件的完整性？<br><br>可以借鉴MYSQL的做法，在文件结构上想办法，就是在完成对文件的刷盘时，在文件中写一个标记：<br><br>对于redolog来说，就是有commit标识；<br>对于statement 格式的 binlog，最后会有 COMMIT；row 格式的 binlog，最后会有一个 XID event。而且还引入了 binlog-checksum 参数，用来验证 binlog 内容的正确性。<br><br>2、存储事件和存储事件的索引的存储顺序是怎样的？<br><br>应该是存储事件吧，只有事件真正的持久化以后，它的位置才会确定，也就是此时才可以被索引指向。或者说存储事件的过程是为了写，索引是为了读取，他们本身就构成一个线性一致性，起码是因果上的一致性。","like_count":3},{"had_liked":false,"id":305689,"user_name":"之渊","can_delete":false,"product_type":"c1","uid":1876212,"ip_address":"","ucode":"02B9299DBB4881","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a0/f4/7e122a67.jpg","comment_is_top":false,"comment_ctime":1628121804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10218056396","product_id":100067701,"comment_content":"明白很多关于事件溯源，这就是银行用事件溯源解决分布式事务问题了","like_count":2},{"had_liked":false,"id":272520,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1610110158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10200044750","product_id":100067701,"comment_content":"如何检测文件是否完整性？<br><br>事件定义一个格式，每个事件按照指定格式存储。事件体的结构类似如下：<br><br>1. 事件大小<br>2. 自定义魔数<br>3. 事件体 CRC 校验<br>4. 其他属性<br><br>两个需要存储的文件，应该按照怎么先后顺序存储。<br><br>索引文件重要性比较低，如果其真丢失，我觉得完全可以用事件存储重新再构建出来。<br><br>所以这里可以按照异步的方式，事件存储的时候仅仅存储到事件文件，然后通过异步的方式，存储到索引文件。<br><br>上面的办法，其实我是参考的的 rocketmq  消息存储机制，其实很多原理都是类似。","like_count":2},{"had_liked":false,"id":288651,"user_name":"LiuHu","can_delete":false,"product_type":"c1","uid":1039768,"ip_address":"","ucode":"284E2025C554BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/98/883c42b4.jpg","comment_is_top":false,"comment_ctime":1618579959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913547255","product_id":100067701,"comment_content":"Akka 的 PersistentActor 就是实现了事件溯源模式。<br>https:&#47;&#47;doc.akka.io&#47;docs&#47;akka&#47;current&#47;persistence.html<br>https:&#47;&#47;doc.akka.io&#47;docs&#47;akka&#47;current&#47;typed&#47;persistence.html#event-sourcing","like_count":1},{"had_liked":false,"id":280189,"user_name":"Geek_2655db","can_delete":false,"product_type":"c1","uid":1809331,"ip_address":"","ucode":"3BC81783F791BD","user_header":"","comment_is_top":false,"comment_ctime":1614129782,"is_pvip":false,"replies":[{"id":"102758","content":"这位同学你好。热点事件的处理取决于系统实现方式。如果是用数据库或者Redis，就会出现常见的高负载情况下的常见问题，比如加锁会影响速度，不加锁会影响正确性。<br><br>在最基本的事件溯源架构下，系统是单线程运行，因此没有多线程&#47;多进程访问的问题。另外状态也都在内存中，状态和计算可以同时恢复，永远一致。你可以想象为事件溯源是将计算逻辑放在了Redis内部。因此事件溯源在高负载环境下有一定的架构优势。","user_name":"作者回复","user_name_real":"任杰","uid":"2068304","ctime":1615694540,"ip_address":"","comment_id":280189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5909097078","product_id":100067701,"comment_content":"请问如何支持热点资源的事件溯源？比如金融账户的余额采用事件溯源的方式，当并发来的时候，如何在保证账户不透支的情况下，正确的记录事件并且给客户正确的响应？","like_count":1,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516011,"discussion_content":"这位同学你好。热点事件的处理取决于系统实现方式。如果是用数据库或者Redis，就会出现常见的高负载情况下的常见问题，比如加锁会影响速度，不加锁会影响正确性。\n\n在最基本的事件溯源架构下，系统是单线程运行，因此没有多线程/多进程访问的问题。另外状态也都在内存中，状态和计算可以同时恢复，永远一致。你可以想象为事件溯源是将计算逻辑放在了Redis内部。因此事件溯源在高负载环境下有一定的架构优势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615694540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359915,"user_name":"buynow","can_delete":false,"product_type":"c1","uid":1105118,"ip_address":"湖南","ucode":"655871D1E6CB15","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OkKvEddT1v8sKic6XrJEib3FoMxsyKMpT9znC3qicl9iaFj2B5MZ23kYkhmkUUJrhd2VNrnkpwxMRHbC9rBwibFc5Kg/132","comment_is_top":false,"comment_ctime":1666058631,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666058631","product_id":100067701,"comment_content":"这里有个疑问，命令队列和事件队列双队列时，如果命令队列取出执行判断然后生成了事件，但是这之前还有很多事件在事件队列中，这就导致判断命令判断时的余额信息和最终事件生效时不一致？","like_count":0},{"had_liked":false,"id":331675,"user_name":"DZ","can_delete":false,"product_type":"c1","uid":1047376,"ip_address":"","ucode":"58BF0042E31449","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/50/04071be6.jpg","comment_is_top":false,"comment_ctime":1642698234,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1642698234","product_id":100067701,"comment_content":"老师，请教下，使用事件溯源的账务系统，相同的记账请求重复发起了两次，没有类似幂等表的话，幂等性是如何保证的呢？","like_count":0,"discussions":[{"author":{"id":1056209,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/d1/f427b83e.jpg","nickname":"javaworker","note":"","ucode":"ABF9DDDBD3BDBF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574031,"discussion_content":"必须做幂等的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653807385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308490,"user_name":"liupan","can_delete":false,"product_type":"c1","uid":1612910,"ip_address":"","ucode":"C6C7C48BCCAE12","user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","comment_is_top":false,"comment_ctime":1629643533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629643533","product_id":100067701,"comment_content":"目前我们的订单系统也有人工的读写分离。有个订单主表，负责写入，根据不同业务类型，拆分不同的分表，然后分表根据不同业务支持不同的查询方式，主要用于列表查询，单记录查询还是查主表，怕拆分分表的时候有状态延迟","like_count":0},{"had_liked":false,"id":290460,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1619574715,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1619574715","product_id":100067701,"comment_content":"1. 这时你应该如何检测文件是否完整？<br>在修改文件时，可以表示文件状态，如果未写完，那么下次启动时自动将其回滚。<br>状态可以有：1，已创建，2，写入中，3，写入结束，4，数据完整性已校验<br>只有状态为4的时候才不会回滚。<br><br>2. 这两个需要存储的文件，应该按照怎样的先后顺序存储呢？<br>事件 和 索引，我认为需要先存储事件。因为索引是指向事件的。好比，字典的目录，得先有字典的正文内容才可以有目录。<br>先创建事件文件，写入完成时状态是3，然后开始写索引，这时候索引状态是3，索引已经指向了事件，然后把事件的状态更新到4，最后把索引的状态更新到4.<br><br>任何一个文件，状态没有达到4，都会被回滚。<br>并且同时，索引在回滚的同时，需要将事件文件一并回滚。","like_count":0,"discussions":[{"author":{"id":1339553,"avatar":"https://static001.geekbang.org/account/avatar/00/14/70/a1/30a3a68c.jpg","nickname":"韵芷依然御","note":"","ucode":"E8BF2BDF849F63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378066,"discussion_content":"同样的意见，先事件再索引。 到了T+1的索引那么一定可以保证T是完整的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623046215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288740,"user_name":"陈靖","can_delete":false,"product_type":"c1","uid":1147418,"ip_address":"","ucode":"8C9596A54DB5C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","comment_is_top":false,"comment_ctime":1618651016,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618651016","product_id":100067701,"comment_content":"请求老师，保证顺序执行的是不是就没法并发了，最多是尽量拆成多个互不影响的队列来分别执行，但最终如果都会影响同一个状态值，比如余额，还是没法并发？","like_count":0,"discussions":[{"author":{"id":1419723,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a9/cb/a431bde5.jpg","nickname":"木头发芽","note":"","ucode":"657B381C5DA963","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373895,"discussion_content":"对于单个用户来说是没办法并发了，不同用户是可以的。比如一个用户A要转出余额，同时用户B要转给A，这个时候就要排队，先到先执行。针对用户A的事件上读写锁。\n但其他用户还是可以同时执行的，可以并发。在数据库里就是行锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620910125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288649,"user_name":"LiuHu","can_delete":false,"product_type":"c1","uid":1039768,"ip_address":"","ucode":"284E2025C554BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/98/883c42b4.jpg","comment_is_top":false,"comment_ctime":1618579803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618579803","product_id":100067701,"comment_content":"Akka 的 PersistentActor 就是典型的实践溯源模式实现。","like_count":0},{"had_liked":false,"id":274438,"user_name":"燕羽阳","can_delete":false,"product_type":"c1","uid":1015063,"ip_address":"","ucode":"AF9430187F66EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/17/179b24f4.jpg","comment_is_top":false,"comment_ctime":1611022106,"is_pvip":false,"replies":[{"id":"100796","content":"燕羽阳你好。我会在后面第13节课详细讲解怎么在多个实例的情况下解决正确性的问题。","user_name":"作者回复","user_name_real":"任杰","uid":"2068304","ctime":1612593207,"ip_address":"","comment_id":274438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611022106","product_id":100067701,"comment_content":"转账的例子，单实例是否只能串行？<br>如果按userId分多实例，并且钱包有余额上线的限制。比如200元。<br>命令: A转账给B一元（A、B账户分别存储在节点1和节点2），在节点1执行，如何同时检测A和B的状态(余额)，及执行事件 ，才能防止B账户余额超过200元？","like_count":0,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514018,"discussion_content":"燕羽阳你好。我会在后面第13节课详细讲解怎么在多个实例的情况下解决正确性的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612593207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274168,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1610885166,"is_pvip":true,"replies":[{"id":"100119","content":"webmin同学，给你的学习热情点赞。07的思考题参考答案，你可以在答疑集锦（二）找到，希望对你有启发！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1611720362,"ip_address":"","comment_id":274168,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1610885166","product_id":100067701,"comment_content":"1. 每一个事件和事件索引，通过Hash算法生成定长验证串，保存在每个事件Head信息中；<br>2. 先写事件数据文件，再写事件索引文件，这样查询不会因为索引到检索到，而不到读到事件数据的问题。","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513928,"discussion_content":"webmin同学，给你的学习热情点赞。07的思考题参考答案，你可以在答疑集锦（二）找到，希望对你有启发！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611720362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273963,"user_name":"烟雨任平生","can_delete":false,"product_type":"c1","uid":1195598,"ip_address":"","ucode":"1F35063A5E680A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo89hTW7flS6zRKvF8W4dKia39bOVlL41MjqpSjAT1wnHenicZvmM2TUn7iaRmOic3y3epUEceuib3ZsRw/132","comment_is_top":false,"comment_ctime":1610768197,"is_pvip":false,"replies":[{"id":"100842","content":"这位同学你好。很不幸的是，在现实情况下很难做到整体架构的事件溯源。<br><br>事件溯源有两个假设，一个是所有命令之间存在线性关系，另一个是不具有随机性。但是复杂系统一般存在回路，这样消息之间就不再是线性关系。同时复杂系统一般会用到时钟，一旦业务跟时钟有关，那么很有可能具有随机性，因为时钟是不准确的。<br><br>所以，复杂系统不太可能实现整体的事件溯源。<br><br>简单的系统一般是线性的，这时候有可能将几个事件溯源的组件拼装成一个更大的事件溯源组件。<br><br>是否采用事件溯源设计取决于你觉得组件的正确性有多重要。如果一个组件重要到你需要了解它过去一步一步都发生了什么，那么就可以考虑。<br>","user_name":"作者回复","user_name_real":"任杰","uid":"2068304","ctime":1612675226,"ip_address":"","comment_id":273963,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610768197","product_id":100067701,"comment_content":"如果运用领域驱动设计把业务划分出多个领域服务如账户、用户、交易等，那么为了实现整体业务事件溯源，通常是否需要运用事件溯源方法论来设计每个领域服务？<br><br>如果答案是否的话，那么选取事件溯源的设计逻辑是怎样的？<br>","like_count":0,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513877,"discussion_content":"这位同学你好。很不幸的是，在现实情况下很难做到整体架构的事件溯源。\n\n事件溯源有两个假设，一个是所有命令之间存在线性关系，另一个是不具有随机性。但是复杂系统一般存在回路，这样消息之间就不再是线性关系。同时复杂系统一般会用到时钟，一旦业务跟时钟有关，那么很有可能具有随机性，因为时钟是不准确的。\n\n所以，复杂系统不太可能实现整体的事件溯源。\n\n简单的系统一般是线性的，这时候有可能将几个事件溯源的组件拼装成一个更大的事件溯源组件。\n\n是否采用事件溯源设计取决于你觉得组件的正确性有多重要。如果一个组件重要到你需要了解它过去一步一步都发生了什么，那么就可以考虑。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612675226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273894,"user_name":"Geek_74107b","can_delete":false,"product_type":"c1","uid":1521315,"ip_address":"","ucode":"85425A027D4A68","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FoE5JTn2hmicRVXiatP2ibbe10CTbiassOskjkqDWaWZ4dDIw4Z9KMrALLPIkVfdIbLYB5ro4U7AQ0elPtVDibt31sA/132","comment_is_top":false,"comment_ctime":1610709154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610709154","product_id":100067701,"comment_content":"问题：<br>1. 通过事件去改变状态，而不是接到命令直接改变状态，这样做的原因是？ 为了解耦命令和状态吗？类似生产者消费者模型？<br>2. 我看上面的描述，状态机和自动机好像没区别？<br>3. Sn​​=S0​+e1​+e2​+…+en−2​+en−1 这个公式少了一个en吧？<br><br>思考题：<br>1. 用WAL（write ahead log）？先生成log，即使down机了，后面可以通过log恢复。<br>2. 没想清楚顺序有啥区别<br>","like_count":0},{"had_liked":false,"id":272536,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1610115103,"is_pvip":false,"replies":[{"id":"98815","content":"tt你好。事件不会触发事件，而是触发命令。命令会再生成新的事件。命令可以有随机性，但是事件的执行一定不能有随机性。","user_name":"作者回复","user_name_real":"任杰","uid":"2068304","ctime":1610180280,"ip_address":"","comment_id":272536,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610115103","product_id":100067701,"comment_content":"命令的结果是生成事件，那事件也会触发新的事件，特别是当多个事件满足一定条件才会产生新的事件，该怎么处理呢？<br><br>比说双时序数据库，事件虽然客观上发生了，比如通货膨胀率是客观的，但是发生的当下人们并不知道具体的数值，只能进行估计，那估计的结果必然有一个随机变量，这不就引入随机性了么？","like_count":0,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513302,"discussion_content":"tt你好。事件不会触发事件，而是触发命令。命令会再生成新的事件。命令可以有随机性，但是事件的执行一定不能有随机性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610180280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272100,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1609932758,"is_pvip":false,"replies":[{"id":"100121","content":"给你的学习热情点赞。这节课思考题的答案，你可以在答疑集锦（二）找到，希望对你有启发！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1611720868,"ip_address":"","comment_id":272100,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1609932758","product_id":100067701,"comment_content":"事务，先索引再事件","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513154,"discussion_content":"给你的学习热情点赞。这节课思考题的答案，你可以在答疑集锦（二）找到，希望对你有启发！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611720868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]}]}