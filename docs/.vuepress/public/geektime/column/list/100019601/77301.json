{"id":77301,"title":"05 | 经验总结：如何给你的代码起好名字？","content":"<p>上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。”</p><p>之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。</p><p>给小孩取过名字的人都知道，取个好名字有多难，又要合八字，又要算五行，还要避尊者讳。 写程序给代码取名字更难，每天都要想很多名字。给孩子取名字，父母喜欢就行，给代码取名字，还要别人也喜欢。</p><h2>为什么需要一个好名字？</h2><p>名字要准确地代表它背后的东西，并且还能让代码干净漂亮。不然，我们的思路就会受到干扰，影响我们的思考和心情。</p><p>比如说，对于答案只有是与非两个选择的时候，我们通常使用布尔类型（boolean）。所以，取名字的时候，我们通常需要一个表达疑问的前缀，比如是不是“is”。</p><pre><code>public boolean isEmpty();     // String.isEmpty()\n</code></pre><p>但如果我们把这样的疑问前缀，使用到一个非布尔类型上，会有什么效果？</p><pre><code>public byte[] isEmpty();\n</code></pre><p>你是不是觉得如鲠在喉，对于代码要干什么百思不得其解？ 反正，我写这个例子的时候，感觉像是吃了五百只苍蝇！</p><p>名字就是沟通的方式，错误的命名很难让我们清楚地理解代码真实的意图。所以，混淆的命名很难让我们阅读和理解代码。</p><!-- [[[read_end]]] --><p>虽然编译器不关心命名的好坏，但是我们却可以从一个好名字中获得巨大的好处。</p><h2>为什么需要命名规范？</h2><p>虽然起一个好名字的重要性不言而喻，但命名规范的选择，以及执行程度，却是一个有争议的话题。有人喜欢这种规范，有人喜欢那种规范，有人干脆认为规范都太教条，真是众口难调。此外，即使已知且明确定义了命名规范，某些组织也无法始终如一地遵守它们，从而导致不一致和混淆。如果命名规范内部不一致，任意且难以记忆，这些挑战还会加剧。</p><p>所以使用一个好的命名规范是非常重要的，我们都能获得哪些好处呢？</p><ol>\n<li>\n<p>为标识符提供附加的信息，赋予标识符现实意义。帮助我们理顺编码的逻辑，减少阅读和理解代码的工作量；</p>\n</li>\n<li>\n<p>使代码审核变得更有效率，专注于更重要的问题，而不是争论语法和命名规范这类小细节，提高开发效率；</p>\n</li>\n<li>\n<p>提高代码的清晰度、可读性以及美观程度；</p>\n</li>\n<li>\n<p>避免不同产品之间的命名冲突。</p>\n</li>\n</ol><h2>有哪些常见的命名方法？</h2><p>尽管不同的编程环境、不同编程语言也需要沟通，但遗憾的是，到目前为止，还没有一种通用的命名方法。 在不同的场景下，程序员们有着不同的偏好。我们需要阅读很多代码，多了解一些命名方法，这样我们才能更好地理解不同风格的代码。</p><p>我来一一介绍下几种常见的命名方法。</p><p><strong>1.驼峰命名法（CamelCase）</strong></p><p>驼峰命名法指的是使用大小写混合的格式，单词之间不使用空格隔开或者连接字符连接的命名方式。它有两种格式：大驼峰命名法（UpperCamelCase）和小驼峰命名法（lowerCamelCase）。</p><p>大驼峰命名法的第一个单词以大写字母开始，其余的和小驼峰命名法相同。 比如：LastName, InputStream。</p><p>小驼峰命名法的第一个单词以小写字母开始，其他单词以大写字母开始，其余字母使用小写字母。 比如：firstName, toString。</p><p>有时候，一个名字可能有不只一种合理形式，比如缩略语（IPv6）或者异常的结构（iOS)。 为了减少这种不确定性，Google定义了以下的转换规则：</p><ol>\n<li>\n<p>从正常的表达形式开始，把短语转换成ASCII码，并且移除单引号。 例如，“Müller’s algorithm”转换为“Muellers algorithm”；</p>\n</li>\n<li>\n<p>如果上述结果含有其他标点符号，比如连字符，在该符号处，把这个结果切分成单词形式。 如果某个单词已经是驼峰形式，也相应地切分开来。 例如，“AdWords”切分成“ad words”，“non-current assets”切分成“non current assets”；</p>\n</li>\n<li>\n<p>将所有字母转换为小写字母，然后将每个单词的首字母大写，这样就得到了大驼峰式命名的形式； 如果第一个单词的首字母小写，就得到了小驼峰式命名的形式；</p>\n</li>\n<li>\n<p>将所有的单词连在一起，就是最后的标识符命名。</p>\n</li>\n</ol><p>下面的表格列出了不同例子的正确转换形式，和容易出错的转换形式 （出自“Google Java Style Guide”）。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/1d/f28217dc672df8bc968eccb57ce19c1d.png?wh=629*168\" alt=\"\"><br>\n<strong>2.蛇形命名法（snake_case）</strong></p><p>在蛇形命名法中，单词之间通过下划线“_”连接，比如“out_of_range”。</p><p><strong>3.串式命名法（kebab-case）</strong></p><p>在蛇形命名法中，单词之间通过连字符“-”连接，比如“background-color”。</p><p><strong>4.匈牙利命名法</strong></p><p>在匈牙利命名法中，标识符由一个或者多个小写字母开始，这些字母用来标识标识符的类型或者用途。标识符的剩余部分，可以采取其他形式的命名法，比如大驼峰命名法。</p><p>如果起始的小字母用来表示标识符的数据类型，这种命名法也被称为系统匈牙利命名法。 比如：</p><ul>\n<li>\n<p>lAccountNum标识一个_长整数_（首字母“l”，long）。</p>\n</li>\n<li>\n<p>szName标识一个_零字符结束的字符串_（首字母“sz”，zero-terminated string）。</p>\n</li>\n</ul><p>如果起始的小字母用来表示标识符的实际用途，这种命名法也被称为应用匈牙利命名法。 比如：</p><ul>\n<li>\n<p>rwPosition标识一个_行_（首字母“rw”，row）。</p>\n</li>\n<li>\n<p>usName标识一个_非安全字符串_（首字母“us”, unsafe string）。</p>\n</li>\n</ul><p>由于在微软产品中的广泛使用，匈牙利命名法曾经是一种流行的命名形式。然而，由于这种命名会带来不必要的记忆负担和阅读障碍，导致命名规则的执行和名称的维护都很困难，微软已经抛弃了这种命名形式。</p><p>由于历史的原因，还有很多代码使用这种命名形式。阅读这些代码时，你可以选择性地忽略这些表示类型或者用途的字母前缀。</p><h2>Java命名规范</h2><p>一段代码，是不是只能使用一种命名方法？ 一般来说，一个编码规范会组合使用这些命名方法，每一种命名方法都被规定了适用的范围。 这样就形成了命名规范。</p><p>比如，Java的命名规范可以使用下表来表示。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/b1/19cd98970ceceaed8247a586ba3895b1.png?wh=623*542\" alt=\"\"></p><p>需要注意的是，常量必须是真的不能改变的量，不打算改变或者能够改变的量都不能算作常量。</p><p>比如，下面的例子声明的是常量：</p><pre><code>static final short MAX_VALUE = 32767;\nstatic final Set&lt;String&gt; EMPTY_NAMES =\n        Collections.unmodifiableSet(Collections.emptySet());\n</code></pre><p>下面的例子声明的就不是常量，它们的值都可以改变：</p><pre><code>static short nonFinalShort = 32767;\nstatic final Set&lt;String&gt; mutableNames = Collections.emptySet();\nstatic final String[] names = { &quot;Alice&quot;, &quot;Bob&quot;, &quot;Tom&quot; };\n</code></pre><p>需要注意的是，方法标识符使用动词或者动词短语，这是传统的方法命名。如果能够分隔开配置（set）和使用（get），使用名词的方法标识符。比如Builder模式的接口设计。这个接口设计和命名惯例，我们以后再讨论。</p><h2>怎么取好名字？</h2><p>了解了命名方法后，你是不是想知道怎么取好名字呢？一般来说，给代码取名字，需要遵守如下三条原则。</p><p><strong>1.要有准确的意义</strong></p><p>名字要能够准确、完整地表达出它代表的意义，可以见字知意，名副其实。</p><p>比如，表达式“a = b - c”的语法是没有什么问题，可是该表达式代表的实际含义并不清楚。相比而言，“grossIncome = grossRevene - costOfGoodsSold”就有很准确、清晰的现实意义。这样的命名更容易阅读和理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/07/43/077720a9965c6daf354a3bc2518e4843.png?wh=623*130\" alt=\"\"></p><p><strong>2.严格遵守命名规范</strong></p><p>不同的编程环境，偏爱不同的命名规范，比如Java倾向于使用驼峰命名法，C语言倾向于使用蛇形命名法，CSS使用串式命名法。 尽管如此，如果定义了个性化的命名规范，请严格遵守自定义的命名规范，如果没有定义个性化的命名规范，我们就需要严格遵守业界普遍公认的命名规范。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/e3/7510f9e45dffa6664c410d0e72b534e3.png?wh=625*189\" alt=\"\"><br>\n<strong>3.可读性优先</strong></p><p>名字的可读性一定要优先考虑，一般需要注意以下几点。</p><ul>\n<li>\n<p>可读性强的名字优先于简短的名字，尽量使用完整的词汇。</p>\n</li>\n<li>\n<p>不要使用缩写、简写、缩略词，除非这些词语被广泛使用。</p>\n</li>\n<li>\n<p>不要使用太短的名字，比如一个字母，除非是广泛接受的特例（i/j/k/m/n表示临时使用的整数，c/d/e表示临时使用的字符）。</p>\n</li>\n<li>\n<p>避免含糊、混淆或者误导。</p>\n</li>\n</ul><p>另外，不要混合使用英文和汉语拼音。由于很多类库使用的是英文，如果使用汉语拼音命名，会造成事实上的拼音名字与英文名字的混用，所以也要尽量避免使用拼音命名。</p><p><img src=\"https://static001.geekbang.org/resource/image/99/16/99fbf25bc5c0aedb88cefe76c67d7816.png?wh=624*127\" alt=\"\"></p><h2>小结</h2><p>简言之，取名字要做到“信、达、雅”（准确、直观、优美）。“信”和“达”是基本要求，有才气的你可以有“雅”的追求。</p><p>取好名字是编写优秀代码最基础也是最重要的一项修炼。 你不妨试试上述的原则和规范，将它们用于新代码，或者整理老代码。 仅仅因为名字的优化，你就会立刻感受到代码质量的大幅度提升！</p><h2>一起来动手</h2><p>所以为了让你更好地实践，我找了一段Java代码。你来试试，这段代码中有哪些名字可以优化？ 欢迎你把优化的代码发在评论里，我们亲自感受下如何优化代码名字。</p><pre><code>import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    /**\n     * Given an array of integers, return indices of the two numbers\n     * such that they add up to a specific target.\n     */\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(&quot;No two sum solution&quot;);\n    }\n}\n</code></pre><p>备注：代码选自<a href=\"https://leetcode.com/problems/two-sum/\">https://leetcode.com/problems/two-sum/</a></p><p>你也可以把这篇文章分享给你的朋友或者同事，一起来讨论一下这道小小的练习题。</p><p></p>","neighbors":{"left":{"article_title":"04 | 代码规范的价值：复盘苹果公司的GoToFail漏洞","id":77048},"right":{"article_title":"06 | 代码整理的关键逻辑和最佳案例","id":77673}},"comments":[{"had_liked":false,"id":60529,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":true,"comment_ctime":1547489553,"is_pvip":false,"replies":[{"id":"21587","content":"改得漂亮！ 我真没有想到使用remain，语义会更清晰些。👍 类似的，参数名也不是很清晰，也可以改改。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547520984,"ip_address":"","comment_id":60529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233721071217009e+18","product_id":100019601,"comment_content":"思考题：<br>    1. 第四行：class Solution -&gt; class TwoSumSolution<br>    2. 第九行：public int[] twoSum(int[] nums, int target) { -&gt;<br>                   public int[] twoSumSolve(int[] numbers, int targetNumber) {<br>    3. 第十行：map -&gt; targetNumbersRemain<br>    4. 第十二行：complement -&gt; remain<br><br>望老师指点，感觉命名确实可以让程序变规范、写代码变高效、读起来更直观、管理起来更方便，谢谢老师","like_count":17,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436532,"discussion_content":"改得漂亮！ 我真没有想到使用remain，语义会更清晰些。👍 类似的，参数名也不是很清晰，也可以改改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547520984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60086,"user_name":"richey","can_delete":false,"product_type":"c1","uid":1003597,"ip_address":"","ucode":"4EC65BA051E1C5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4d/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1547441852,"is_pvip":true,"replies":[{"id":"21499","content":"如果名字没有超过20个字符，长一点也没关系。如果是代码内部使用标识符，要是使用它的代码还能保持在80个字符以内，再长一点也可以。毕竟，容易理解是最重要的。<br><br>确实有不方便的时候，可以使用首字母缩略词，比如把server name indication缩略成sni，使用类似于sniServerName这样的命名。 缩略语离开语境，就很难理解了，我们可以通过注释或者接口规范弥补这个缺陷，解释清楚缩略语代表什么意思，以及缩写的名字具体的含义。 比如说，<br><br>@param sniServerName the server name of a Server Name Indication (SNI)","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547445980,"ip_address":"","comment_id":60086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70266918588","product_id":100019601,"comment_content":"范老师，一直有个疑问，有时候为了方法名或类名更好的表意，会把名字起的比较长，但名字太长也感觉不太优雅，这方面有什么好的经验吗？","like_count":16,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436445,"discussion_content":"如果名字没有超过20个字符，长一点也没关系。如果是代码内部使用标识符，要是使用它的代码还能保持在80个字符以内，再长一点也可以。毕竟，容易理解是最重要的。\n\n确实有不方便的时候，可以使用首字母缩略词，比如把server name indication缩略成sni，使用类似于sniServerName这样的命名。 缩略语离开语境，就很难理解了，我们可以通过注释或者接口规范弥补这个缺陷，解释清楚缩略语代表什么意思，以及缩写的名字具体的含义。 比如说，\n\n@param sniServerName the server name of a Server Name Indication (SNI)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547445980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60016,"user_name":"J","can_delete":false,"product_type":"c1","uid":1189940,"ip_address":"","ucode":"B478E946266B17","user_header":"https://static001.geekbang.org/account/avatar/00/12/28/34/ef05d3db.jpg","comment_is_top":false,"comment_ctime":1547437284,"is_pvip":false,"replies":[{"id":"21501","content":"是的，工具可以帮助我们查一查。 <br><br>顺便的，FindBugs停止更新了，后继者是SpotBugs。前面的留言区有小伙伴提到过。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446369,"ip_address":"","comment_id":60016,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57382012132","product_id":100019601,"comment_content":"推荐FindBugs插件,不规范命名可以识别出来","like_count":14,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436438,"discussion_content":"是的，工具可以帮助我们查一查。 \n\n顺便的，FindBugs停止更新了，后继者是SpotBugs。前面的留言区有小伙伴提到过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213887,"avatar":"https://static001.geekbang.org/account/avatar/00/12/85/bf/5c5e86bb.jpg","nickname":"旺旺","note":"","ucode":"161B267F67EBCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289184,"discussion_content":"Python的也有类似工具吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594020288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61860,"user_name":"ownraul","can_delete":false,"product_type":"c1","uid":1080963,"ip_address":"","ucode":"37A3D24BE83D0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/83/27fd9c50.jpg","comment_is_top":false,"comment_ctime":1547820651,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31612591723","product_id":100019601,"comment_content":"一个好名字的确定，也是建立在业务模型稳定的基础之上，如果开发前不能把最终的业务名称用词确定下来，那是很难一下在代码层面把名字定完善的","like_count":7},{"had_liked":false,"id":59808,"user_name":"🍃Spring🍃","can_delete":false,"product_type":"c1","uid":1132727,"ip_address":"","ucode":"D9A160332F2EAC","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/b7/c41ee146.jpg","comment_is_top":false,"comment_ctime":1547426852,"is_pvip":false,"replies":[{"id":"21500","content":"👏此处有掌声👏","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446141,"ip_address":"","comment_id":59808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31612197924","product_id":100019601,"comment_content":"抛开编程，其实我们的工作是一种表达，或者沟通，不同的是我们在于两个截然不同的两个主体表达，第一个计算机，它有他的规范，只要满足就能实现。第二个就是人，我们自己，有章有法的表达就是最好的沟通。","like_count":8,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436400,"discussion_content":"👏此处有掌声👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77121,"user_name":"人脑逆向工程师","can_delete":false,"product_type":"c1","uid":1185233,"ip_address":"","ucode":"2B6C8163BAE6D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/d1/8c26c602.jpg","comment_is_top":false,"comment_ctime":1552839172,"is_pvip":true,"replies":[{"id":"28104","content":"😂坚持使用良好的变量命名，反过来也促进英文水平。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1552856256,"ip_address":"","comment_id":77121,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23027675652","product_id":100019601,"comment_content":"对国内程序员来说提升英语水平会比较明显有助于改善变量命名","like_count":5,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443587,"discussion_content":"😂坚持使用良好的变量命名，反过来也促进英文水平。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552856256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60715,"user_name":"雷小鸿","can_delete":false,"product_type":"c1","uid":1368897,"ip_address":"","ucode":"424DC9A532FFD7","user_header":"https://static001.geekbang.org/account/avatar/00/14/e3/41/bd0e3a04.jpg","comment_is_top":false,"comment_ctime":1547535954,"is_pvip":true,"replies":[{"id":"21688","content":"谢谢！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547571457,"ip_address":"","comment_id":60715,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23022372434","product_id":100019601,"comment_content":"简单说下我们dao层命名。一般我们dao层都是和数据库交互的。一个dao类对应一个数据库表。可以用数据库表名+dao这样。具体名字严格按照类命名规范。一个表映射一个实体dao类。这个dao类里面的方法只操作对应的表。如果你不是这样的dao。可以相同的业务放在一个dao里面。根据相同的业务命名。只是给那位同学提供参考不一定完全正确。","like_count":5,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436595,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547571457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64609,"user_name":"MOV AX,0","can_delete":false,"product_type":"c1","uid":1078440,"ip_address":"","ucode":"B2F5613DBDFF63","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/a8/bbea0049.jpg","comment_is_top":false,"comment_ctime":1548835038,"is_pvip":true,"replies":[{"id":"22917","content":"第一个问题是个好问题。我还没有看到过这方面的书面规范。一般情况下，我使用的方法是按照参数的关联度，或者参数的逻辑关系。<br><br>比如，String.valueOf(char[] data, int offset, int count)，最重要的是data，所以放在第一位。然后是从什么地方开始，使用多少个字符。<br><br>我们如果阅读这个方法的规范，它写的是“Returns the string representation of a specific subarray of the char array argument.” 首先提到的就是data这个参数，然后再说明data的附加条件。<br><br>我觉得可以试试，如何用语言把这个方法描述出来。参数出现的描述中顺序大致就可以是参数在方法中的出现顺序。<br><br>第二种初始化的顺序，也是我常用的顺序。<br><br>可能会有人觉得规范无聊，但是掌握了它的人都知道，好的规范，赏心悦目的代码，可以理清思路，提高效率，减少错误，减轻疲劳。只是大家不知道为什么好，就不知道为什么要规范。所以我也选择了一个不太讨好市场的方式，说了很多为什么好的道理。这确实不性感，不带劲！<br><br>我非常感谢你能给朋友推荐这个专栏。我希望这个专栏的打开方式是从这里看看为什么和一些小例子，找一个详尽的规范看看详细的怎么办，比如阿里巴巴的规范，Google的规范，Java自己的规范等等。然后，使用练手题练习一下，然后把学到的、认可的规范用到自己实际的代码里去。<br><br>写好代码，是一个长期的修行。我自己也在不停地琢磨怎么可以做的更好。共勉！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548912021,"ip_address":"","comment_id":64609,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14433736926","product_id":100019601,"comment_content":"编写这段代码时，有两个书写问题，也是我一直所困惑的：<br>1.参数中存在多种类型，是否有根据参数类型来在参数声明中，排列参数的规范呢？比如例子中的<br>(int[] numbers, int targetNumber)，我希望参数列表呈现出一种递减&#47;增的趋势，由集合到数值，再到布尔类型，或者反过来。例如：Map&lt;String, Object&gt; idNameMap, List&lt;CustomerDto&gt; customers, <br>long minBalance, boolean isMember。每个参数所包含元素的复杂度递增&#47;递减，让我觉得有一种美感。<br>不知老师怎么看？<br>2.类似1中的问题，在方法体内，初始化参数时，我希望参数的初始化顺序是由简至繁。虽然表述有歧义，<br>请看我之前贴的代码：<br>        int testTargetNumber = 7;<br>        int[] testNumbers = new int[]{1, 2, 3, 4, 5};<br>我希望在保证所有初始化的参数，尽量贴近它的首次调用点的前提下，做到简单类型先初始化，每行代码的长度从上至下由短到长。<br>       可能这些问题，看起来都很无聊没有太多可讨论的地方。但我认为编码就是艺术，艺术在于精进，再简单的东西也要尽量做的赏心悦目。起初这门课程上线时，我也有看大纲，很多已经从sonar刻到骨子里了，想着没有太大必要再买。但一位好友近期要转java开发，我也一时想不到什么特别好的书给他参考。某天点开极客时间，又看到这门课，买下来看了下，确实深有感触。如果自己都没确认好不好，不敢误人子弟。趁着这个机会推荐给他，我自己也再学一遍，也算与他共同学习吧，不知他有没机会看到这段话。也希望老师对我的代码给一点建议，感激不尽！","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438097,"discussion_content":"第一个问题是个好问题。我还没有看到过这方面的书面规范。一般情况下，我使用的方法是按照参数的关联度，或者参数的逻辑关系。\n\n比如，String.valueOf(char[] data, int offset, int count)，最重要的是data，所以放在第一位。然后是从什么地方开始，使用多少个字符。\n\n我们如果阅读这个方法的规范，它写的是“Returns the string representation of a specific subarray of the char array argument.” 首先提到的就是data这个参数，然后再说明data的附加条件。\n\n我觉得可以试试，如何用语言把这个方法描述出来。参数出现的描述中顺序大致就可以是参数在方法中的出现顺序。\n\n第二种初始化的顺序，也是我常用的顺序。\n\n可能会有人觉得规范无聊，但是掌握了它的人都知道，好的规范，赏心悦目的代码，可以理清思路，提高效率，减少错误，减轻疲劳。只是大家不知道为什么好，就不知道为什么要规范。所以我也选择了一个不太讨好市场的方式，说了很多为什么好的道理。这确实不性感，不带劲！\n\n我非常感谢你能给朋友推荐这个专栏。我希望这个专栏的打开方式是从这里看看为什么和一些小例子，找一个详尽的规范看看详细的怎么办，比如阿里巴巴的规范，Google的规范，Java自己的规范等等。然后，使用练手题练习一下，然后把学到的、认可的规范用到自己实际的代码里去。\n\n写好代码，是一个长期的修行。我自己也在不停地琢磨怎么可以做的更好。共勉！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548912021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59870,"user_name":"allean","can_delete":false,"product_type":"c1","uid":1051470,"ip_address":"","ucode":"A0D2DB4F219EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","comment_is_top":false,"comment_ctime":1547428852,"is_pvip":false,"replies":[{"id":"21508","content":"代码写的好看，真的心情好的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446655,"ip_address":"","comment_id":59870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14432330740","product_id":100019601,"comment_content":"认真规范自己写的代码，感觉很开心了","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436407,"discussion_content":"代码写的好看，真的心情好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111362,"user_name":"hshayq","can_delete":false,"product_type":"c1","uid":1237880,"ip_address":"","ucode":"F5435E14BCCD25","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/78/3321053c.jpg","comment_is_top":false,"comment_ctime":1562548129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152482721","product_id":100019601,"comment_content":"每次代码写到后面，都会词穷，不知道怎么命名","like_count":3},{"had_liked":false,"id":325710,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1639103504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5934070800","product_id":100019601,"comment_content":"原来_和-的命名方法也有名字：蛇形、串式","like_count":1},{"had_liked":false,"id":277505,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1612435672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907402968","product_id":100019601,"comment_content":"实在不知道该如何取，可以利用一些工具帮我们取名字，例如 codeif：https:&#47;&#47;unbug.github.io&#47;codelf&#47;","like_count":2},{"had_liked":false,"id":64806,"user_name":"MOV AX,0","can_delete":false,"product_type":"c1","uid":1078440,"ip_address":"","ucode":"B2F5613DBDFF63","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/a8/bbea0049.jpg","comment_is_top":false,"comment_ctime":1548915828,"is_pvip":true,"replies":[{"id":"22928","content":"这种ApiResult的处理方式让我想起了C语言时代的错误处理方式。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548919863,"ip_address":"","comment_id":64806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843883124","product_id":100019601,"comment_content":"非常感谢您的细心回复！实际工作中，确实会返回空集合，这也是我一直的习惯。因为在例子中返回异常，所以还是按异常来写了。main方法是写给其他初学者看的，刚开始工作时JUnit都不会，只会main来测... 有不少同学提到了阿里的代码规范插件，配合SonarLint更佳！我们公司对异常的处理，是使用了一个ApiResult的类封装返回结果，假设Facade接口内捕获了报错，会使用:<br>LOGGER.error(&quot;error msg in logger&quot;, e);<br>return result.error(&quot;error msg to invoker&quot;);<br>这样调用方，可以通过静态方法ApiResult.isSuccess(result)&#47;ApiResult.isFail(result)来判断接口调用是否成功，通过result.getMsg()即可获取错误信息。<br>对外接口是绝对不可以抛出异常的，内部调用的服务XxxxService是可以抛出异常的，DAL层不做参数校检且不对外提供服务，参数的校检和异常捕获也应在Service层完成。关于结果返回封装类，网上有很多实现可以参考。","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438187,"discussion_content":"这种ApiResult的处理方式让我想起了C语言时代的错误处理方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548919863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60852,"user_name":"加载中……","can_delete":false,"product_type":"c1","uid":1366948,"ip_address":"","ucode":"3E59A0A0784D0A","user_header":"https://static001.geekbang.org/account/avatar/00/14/db/a4/191be6ad.jpg","comment_is_top":false,"comment_ctime":1547562335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842529631","product_id":100019601,"comment_content":"我觉得dao层的方法，也应该根据不同的业务隔离，不提倡公用(复用)。复用既耦合，大部分业务复杂的CRUD系统，随着后续的维护工作的开展，dao复用带来的弊，比复用带来的利要大的多。","like_count":1},{"had_liked":false,"id":60535,"user_name":"草原上的奔跑","can_delete":false,"product_type":"c1","uid":1120348,"ip_address":"","ucode":"D69C617F767736","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/5c/1a58e8f6.jpg","comment_is_top":false,"comment_ctime":1547506001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842473297","product_id":100019601,"comment_content":"这节课给的命名规则很实用，既见树木，又见森林，范老师不仅告诉我们为什么要用命名编码规范，还说了不同语言业公认命名编码规范，自己不同的命名方法，驼峰，匈牙利，蛇形，串行。命名效果要信达雅。继续跟着范老师精进！","like_count":1},{"had_liked":false,"id":60182,"user_name":"等","can_delete":false,"product_type":"c1","uid":1276606,"ip_address":"","ucode":"8CEE29571ABF60","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/be/f4d837d3.jpg","comment_is_top":false,"comment_ctime":1547447215,"is_pvip":false,"replies":[{"id":"21559","content":"谢谢。我对数据库比较陌生了，小伙伴们能不能帮着回答下这个问题？<br><br>&gt; 如果多个（至少5个）方法调用同一个dao，这个dao要怎么命名好点？还是，以业务功能划分，把这个dao分开？<br>以前我做数据库代码的时候，数据库的设计一般按照业务逻辑来的。数据存取接口虽然不涉及具体的业务逻辑，但是由于数据库的设计是按照业务数据来做的，数据存取接口也是按照业务逻辑设计的。这样，接口的命名体现的也是业务数据处理的细分功能。命名的时候，也是使用业务的逻辑表达方式。<br><br>现代的数据库模型是什么样子的，我就不懂了。希望看留言区的小伙伴可以帮帮我。<br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547484971,"ip_address":"","comment_id":60182,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5842414511","product_id":100019601,"comment_content":"dao层，与数据库交换层，一般写sql语句，是不是用sql的功能来命名？ 比如getStudentinfo之类的","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436452,"discussion_content":"谢谢。我对数据库比较陌生了，小伙伴们能不能帮着回答下这个问题？\n\n&amp;gt; 如果多个（至少5个）方法调用同一个dao，这个dao要怎么命名好点？还是，以业务功能划分，把这个dao分开？\n以前我做数据库代码的时候，数据库的设计一般按照业务逻辑来的。数据存取接口虽然不涉及具体的业务逻辑，但是由于数据库的设计是按照业务数据来做的，数据存取接口也是按照业务逻辑设计的。这样，接口的命名体现的也是业务数据处理的细分功能。命名的时候，也是使用业务的逻辑表达方式。\n\n现代的数据库模型是什么样子的，我就不懂了。希望看留言区的小伙伴可以帮帮我。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547484971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366359,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","nickname":"Sisyphus235","note":"","ucode":"829CC4CE0FA96E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216825,"discussion_content":"是的，DAO 是 db 的具象化，方法一般都是操作 db 的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585487789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60040,"user_name":"等","can_delete":false,"product_type":"c1","uid":1276606,"ip_address":"","ucode":"8CEE29571ABF60","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/be/f4d837d3.jpg","comment_is_top":false,"comment_ctime":1547439530,"is_pvip":false,"replies":[{"id":"21488","content":"不好意思，dao是什么意思？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547444311,"ip_address":"","comment_id":60040,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5842406826","product_id":100019601,"comment_content":"老师您好，如果多个（至少5个）方法调用同一个dao，这个dao要怎么命名好点？还是，以业务功能划分，把这个dao分开？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436441,"discussion_content":"不好意思，dao是什么意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547444311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366359,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","nickname":"Sisyphus235","note":"","ucode":"829CC4CE0FA96E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216824,"discussion_content":"DAO 是 data access object，按照这个名字看它应该是 db 的映射，不是上层逻辑的载体，被多个逻辑 service 或者 controller 调用很正常，一般按照 db 用途命名，例如 featureInfoDAO","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585487706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59914,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1547430638,"is_pvip":false,"replies":[{"id":"21506","content":"嗯，又好了一点儿😄","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446555,"ip_address":"","comment_id":59914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5842397934","product_id":100019601,"comment_content":"学习完后，抬头看自己的代码，嗯，又挑出刺儿来了，好好优化吧，争取做到“雅”🤔","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436416,"discussion_content":"嗯，又好了一点儿😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59664,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1547397788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842365084","product_id":100019601,"comment_content":"打卡<br>","like_count":1},{"had_liked":false,"id":351545,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1657881293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657881293","product_id":100019601,"comment_content":"变量map应该取一个更有意义的名字，不然不知道map干嘛的","like_count":0},{"had_liked":false,"id":351544,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1657881188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657881188","product_id":100019601,"comment_content":"简言之，取名字要做到“信、达、雅”（准确、直观、优美）。“信”和“达”是基本要求，有才气的你可以有“雅”的追求。--记下来","like_count":0},{"had_liked":false,"id":321291,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636760671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636760671","product_id":100019601,"comment_content":"命名规范挺重要的，不好的命名除了让别人难懂，要不了多久自己都很难看懂，那真的是。。。特别是中文式命名，同音的情况下就笑料百出了~","like_count":0},{"had_liked":false,"id":96452,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1558427413,"is_pvip":false,"replies":[{"id":"34595","content":"👍","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1558464625,"ip_address":"","comment_id":96452,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558427413","product_id":100019601,"comment_content":"代码的命名规范没有共识，但可读性和效率却是大家都在追求的。<br>在实践命名的过程中，总是能感觉到代码内部命名和 REST 规则有某种联系。<br>package, module, class 都是资源，尽可能用名词，而 function 就像是 API，用动词&#47;动词短语获取资源。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450886,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558464625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67426,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1550143831,"is_pvip":false,"replies":[{"id":"23867","content":"建议你使用驼峰命名方法。匈牙利命名方法是历史遗留产物了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550157294,"ip_address":"","comment_id":67426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550143831","product_id":100019601,"comment_content":"老项目驼峰命名方法和匈牙利命名方法混着用，我是应该用哪种呢？求解 😄","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439191,"discussion_content":"建议你使用驼峰命名方法。匈牙利命名方法是历史遗留产物了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550157294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64621,"user_name":"MOV AX,0","can_delete":false,"product_type":"c1","uid":1078440,"ip_address":"","ucode":"B2F5613DBDFF63","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/a8/bbea0049.jpg","comment_is_top":false,"comment_ctime":1548836581,"is_pvip":true,"replies":[{"id":"22918","content":"问题在另外一个留言里回复过了，你找找看看。<br><br>我也理解编码不规范的程序员，他们还没有养成习惯。很多问题，形成氛围就好了。我的同事们一般都比较直爽，有的时候会说，这段代码我看的比较费劲，你加一段注释；这段代码通常不这么处理，你为什么这么干，加一段注释；这个参数无效这么办，规范里写清楚。我自己非常享受这样的氛围。<br><br>这样的氛围形成之前，先把自己的代码弄好，然后看看能不能影响你觉得可以影响的人。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548912899,"ip_address":"","comment_id":64621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548836581","product_id":100019601,"comment_content":"一直以来有两个疑惑：<br>1.参数列表中参数的排序规则.<br>  惯于将类型复杂度由高到低（或相反），排列函数参数，如：<br>    (Map&lt;String, Object&gt; idNameMap, List&lt;CustomerDto&gt; customers, long minBalance, boolean isMember)<br><br>2.方法中声明&#47;初始化参数的顺序.<br>  以尽量将参数声明&#47;初始化贴近首次调用位置，为前提下。<br>  惯于将类型复杂度由低到高，对各个参数声明&#47;初始化，如：<br>    boolean isMember = true;<br>    long minBalance = 20000;<br>    List&lt;CustomerDto&gt; customers = customerService.getByParams(params);<br>    Map&lt;String, Object&gt; idNameMap = customerWeixinService.getIdNameMapByParams(params); <br>个人觉得看起来比较有美感，但还未见有提过这方面的规范。<br>最早上线这门课程时，看了下大纲，感觉sonar里基本都提过了，就没有购买。<br>直到某天想起编码规范的事，想给朋友推荐一本书来参考，发现没有什么特别深入的书。<br>基本都是讲讲命名法之类的就没了，还不如sonar插件。本着推荐人一定要自己先验证的原则，<br>买来看了几篇，深有体会。公司很多旧代码，包括现有的一些工作已久的同事，注释都不好好写。<br>这个问题也不好提，比较尴尬，因为我也才工作一年多。也不知道我的朋友会不会看到这段话，<br>希望他通过这门课程，能够受益终生，我也将与他共同学习。同时也希望老师对我的代码给一些<br>宝贵的建议，谢谢！","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438104,"discussion_content":"问题在另外一个留言里回复过了，你找找看看。\n\n我也理解编码不规范的程序员，他们还没有养成习惯。很多问题，形成氛围就好了。我的同事们一般都比较直爽，有的时候会说，这段代码我看的比较费劲，你加一段注释；这段代码通常不这么处理，你为什么这么干，加一段注释；这个参数无效这么办，规范里写清楚。我自己非常享受这样的氛围。\n\n这样的氛围形成之前，先把自己的代码弄好，然后看看能不能影响你觉得可以影响的人。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548912899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64602,"user_name":"MOV AX,0","can_delete":false,"product_type":"c1","uid":1078440,"ip_address":"","ucode":"B2F5613DBDFF63","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/a8/bbea0049.jpg","comment_is_top":false,"comment_ctime":1548833361,"is_pvip":true,"replies":[{"id":"22915","content":"这个修改非常棒，特别是加入private的构造方法，废弃掉这个类的实例化，以及把方法声明为静态方法。这些都可以改进效率，使用起来更皮实。<br><br>还可以有改进，比如说不要使用IllegalArgumentException， 因为找不到可能是很正常的情况，使用异常会降低效率。留言区里有人使用返回空数组的做法，你可以参考一下。<br><br>另外，如果有条件，尽量把测试代码（main()）和接口代码分离开来。 main()是public的方法，如果放在一起，不能限制调用者使用这个方法，这可能不是我们想看到的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548910131,"ip_address":"","comment_id":64602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548833361","product_id":100019601,"comment_content":"import java.util.Arrays;<br>import java.util.HashMap;<br>import java.util.Map;<br><br>&#47;**<br> * Two sum solution util.<br> *<br> * @author Easley<br> * @date 2019&#47;1&#47;30<br> * @since 1.0.1<br> *&#47;<br>public final class TwoSumSolutionUtil {<br><br>    private TwoSumSolutionUtil() {<br>        throw new IllegalStateException(&quot;Error getting an instance of immutable class.&quot;);<br>    }<br><br>    &#47;**<br>     * Given an array of integers, return indices of the two numbers<br>     * such that they add up to a specific target.<br>     * @param numbers an array of integers.<br>     * @param targetNumber a specific target that may be added up to by two numbers in array.<br>     * @return an array of integers which contains the two numbers of solution.<br>     * @throws IllegalArgumentException numbers is empty or no solution<br>     *<br>     * @author Easley<br>     * @date 2019&#47;1&#47;30<br>     * @since 1.0.1<br>     *&#47;<br>    public static int[] getTwoSumSolution(int[] numbers, int targetNumber) {<br>        if (numbers == null || numbers.length == 0) {<br>            throw new IllegalArgumentException(&quot;numbers cannot be null or empty array.&quot;);<br>        }<br><br>        Map&lt;Integer, Integer&gt; numberIndexMap = new HashMap&lt;&gt;(16);<br>        for (int index = 0; index &lt; numbers.length; index++) {<br>            int remain = targetNumber - numbers[index];<br><br>            if (numberIndexMap.containsKey(remain)) {<br>                return new int[]{numberIndexMap.get(remain), index};<br>            }<br>            numberIndexMap.put(numbers[index], index);<br>        }<br>        throw new IllegalArgumentException(&quot;No solution.&quot;);<br>    }<br><br>    public static void main(String[] args) {<br>        int testTargetNumber = 7;<br>        int[] testNumbers = new int[]{1, 2, 3, 4, 5};<br><br>        System.out.println(&quot;-&gt; params:{numbers:&quot; + Arrays.toString(testNumbers) + &quot;, targetNumber:&quot; + testTargetNumber + &quot;}&quot;);<br>        System.out.println(&quot;-&gt; indices of solution numbers:&quot; + Arrays.toString(getTwoSumSolution(testNumbers, testTargetNumber)));<br>    }<br>}<br>注释有点啰嗦，但还是按照公司的规范来写的。个人英文水平比较一般，有语法表述错误的地方，还望见谅和指正！由于字数限制，将我的疑问放在下一条评论中。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438093,"discussion_content":"这个修改非常棒，特别是加入private的构造方法，废弃掉这个类的实例化，以及把方法声明为静态方法。这些都可以改进效率，使用起来更皮实。\n\n还可以有改进，比如说不要使用IllegalArgumentException， 因为找不到可能是很正常的情况，使用异常会降低效率。留言区里有人使用返回空数组的做法，你可以参考一下。\n\n另外，如果有条件，尽量把测试代码（main()）和接口代码分离开来。 main()是public的方法，如果放在一起，不能限制调用者使用这个方法，这可能不是我们想看到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548910131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64046,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1548646711,"is_pvip":true,"replies":[{"id":"22724","content":"哈哈，赶快用上，熟悉了就好了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548702855,"ip_address":"","comment_id":64046,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548646711","product_id":100019601,"comment_content":"看完了，赶紧去把自己代码命名规范一下，哈哈","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437830,"discussion_content":"哈哈，赶快用上，熟悉了就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548702855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62755,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1548148988,"is_pvip":false,"replies":[{"id":"22217","content":"C语言多用蛇形。会C，学Java很快。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548169626,"ip_address":"","comment_id":62755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548148988","product_id":100019601,"comment_content":"3. 串式命名法（kebab-case）<br>这里下一行有个错别字。<br><br>以前用驼峰法，现在跟着linux源码学，用蛇形命名法。<br>平时主要用C语言，对java语言很陌生，思考题看得不是不懂，看来要学习下java了。<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437338,"discussion_content":"C语言多用蛇形。会C，学Java很快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548169626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61141,"user_name":"阿姐的阿杰","can_delete":false,"product_type":"c1","uid":1001156,"ip_address":"","ucode":"89F5CF4D1E0C2D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/c4/128338f8.jpg","comment_is_top":false,"comment_ctime":1547626162,"is_pvip":false,"replies":[{"id":"21819","content":"Google的规范，会使用Ios，supportIos，但是我不认为这个用法的可读性好，但是supportiOS的可读性更差。supportIOS的确看起来更好。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547690085,"ip_address":"","comment_id":61141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547626162","product_id":100019601,"comment_content":"请教：iOS 这种写法算不算特殊情况的固定写法呢？比如 supportIOS 比 supportIos 看着更一目了然。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436756,"discussion_content":"Google的规范，会使用Ios，supportIos，但是我不认为这个用法的可读性好，但是supportiOS的可读性更差。supportIOS的确看起来更好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1547690085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60740,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1547541115,"is_pvip":false,"replies":[{"id":"21690","content":"嗯， 别用匈牙利命名法了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547571822,"ip_address":"","comment_id":60740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547541115","product_id":100019601,"comment_content":"感谢老师，我之前一直觉得匈牙利命名法不直观，跟同事讨论过，终于看到结论了。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436604,"discussion_content":"嗯， 别用匈牙利命名法了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547571822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60022,"user_name":"_xcc","can_delete":false,"product_type":"c1","uid":1298398,"ip_address":"","ucode":"8EB4B735D36E81","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/de/85555a93.jpg","comment_is_top":false,"comment_ctime":1547437648,"is_pvip":false,"replies":[{"id":"21503","content":"名不正，言不顺😂","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446469,"ip_address":"","comment_id":60022,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547437648","product_id":100019601,"comment_content":"有次命名, 发现起的名字大都相似, 把自己都弄乱了, 而且还是改的被人项目","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436439,"discussion_content":"名不正，言不顺😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59809,"user_name":"伟忠","can_delete":false,"product_type":"c1","uid":1112089,"ip_address":"","ucode":"FE77CF20ED6065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","comment_is_top":false,"comment_ctime":1547426983,"is_pvip":false,"replies":[{"id":"21509","content":"加油💪","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547446732,"ip_address":"","comment_id":59809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547426983","product_id":100019601,"comment_content":"好名字很重要，但真的很难，一直一直在努力","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436401,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547446732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59736,"user_name":"黄朋飞","can_delete":false,"product_type":"c1","uid":1107062,"ip_address":"","ucode":"A1E7E0460A1BCC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/76/a97242c0.jpg","comment_is_top":false,"comment_ctime":1547423414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547423414","product_id":100019601,"comment_content":"打卡","like_count":0}]}