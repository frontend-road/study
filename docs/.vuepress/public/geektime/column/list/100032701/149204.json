{"id":149204,"title":"29 | 渐入佳境：使用epoll和多线程模型","content":"<p>你好，我是盛延敏，这里是网络编程实战第29讲，欢迎回来。</p><p>在前面的第27讲和第28讲中，我介绍了基于poll事件分发的reactor反应堆模式，以及主从反应堆模式。我们知道，和poll相比，Linux提供的epoll是一种更为高效的事件分发机制。在这一讲里，我们将切换到epoll实现的主从反应堆模式，并且分析一下为什么epoll的性能会强于poll等传统的事件分发机制。</p><h2>如何切换到epoll</h2><p>我已经将所有的代码已经放置到<a href=\"https://github.com/froghui/yolanda\">GitHub</a>上，你可以自行查看或下载。</p><p>我们的网络编程框架是可以同时支持poll和epoll机制的，那么如何开启epoll的支持呢？</p><p>lib/event_loop.c文件的event_loop_init_with_name函数是关键，可以看到，这里是通过宏EPOLL_ENABLE来决定是使用epoll还是poll的。</p><pre><code>struct event_loop *event_loop_init_with_name(char *thread_name) {\n  ...\n#ifdef EPOLL_ENABLE\n    yolanda_msgx(&quot;set epoll as dispatcher, %s&quot;, eventLoop-&gt;thread_name);\n    eventLoop-&gt;eventDispatcher = &amp;epoll_dispatcher;\n#else\n    yolanda_msgx(&quot;set poll as dispatcher, %s&quot;, eventLoop-&gt;thread_name);\n    eventLoop-&gt;eventDispatcher = &amp;poll_dispatcher;\n#endif\n    eventLoop-&gt;event_dispatcher_data = eventLoop-&gt;eventDispatcher-&gt;init(eventLoop);\n    ...\n}\n</code></pre><p>在根目录下的CMakeLists.txt文件里，引入CheckSymbolExists，如果系统里有epoll_create函数和sys/epoll.h，就自动开启EPOLL_ENABLE。如果没有，EPOLL_ENABLE就不会开启，自动使用poll作为默认的事件分发机制。</p><!-- [[[read_end]]] --><pre><code># check epoll and add config.h for the macro compilation\ninclude(CheckSymbolExists)\ncheck_symbol_exists(epoll_create &quot;sys/epoll.h&quot; EPOLL_EXISTS)\nif (EPOLL_EXISTS)\n    #    Linux下设置为epoll\n    set(EPOLL_ENABLE 1 CACHE INTERNAL &quot;enable epoll&quot;)\n\n    #    Linux下也设置为poll\n    #    set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)\nelse ()\n    set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)\nendif ()\n</code></pre><p>但是，为了能让编译器使用到这个宏，需要让CMake往config.h文件里写入这个宏的最终值，configure_file命令就是起这个作用的。其中config.h.cmake是一个模板文件，已经预先创建在根目录下。同时还需要让编译器include这个config.h文件。include_directories可以帮我们达成这个目标。</p><pre><code>configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake\n        ${CMAKE_CURRENT_BINARY_DIR}/include/config.h)\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR}/include)\n</code></pre><p>这样，在Linux下，就会默认使用epoll作为事件分发。</p><p>那么前面的<a href=\"https://time.geekbang.org/column/article/146664\">27讲</a>和<a href=\"https://time.geekbang.org/column/article/148148\">28讲</a>中的程序案例如何改为使用poll的呢？</p><p>我们可以修改CMakeLists.txt文件，把Linux下设置为poll的那段注释下的命令打开，同时关闭掉原先设置为1的命令就可以了。 下面就是具体的示例代码。</p><pre><code># check epoll and add config.h for the macro compilation\ninclude(CheckSymbolExists)\ncheck_symbol_exists(epoll_create &quot;sys/epoll.h&quot; EPOLL_EXISTS)\nif (EPOLL_EXISTS)\n    #    Linux下也设置为poll\n     set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)\nelse ()\n    set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)\nendif (\n</code></pre><p>不管怎样，现在我们得到了一个Linux下使用epoll作为事件分发的版本，现在让我们使用它来编写程序吧。</p><h2>样例程序</h2><p>我们的样例程序和<a href=\"https://time.geekbang.org/column/article/148148\">第28讲</a>的一模一样，只是现在我们的事件分发机制从poll切换到了epoll。</p><pre><code>#include &lt;lib/acceptor.h&gt;\n#include &quot;lib/common.h&quot;\n#include &quot;lib/event_loop.h&quot;\n#include &quot;lib/tcp_server.h&quot;\n\nchar rot13_char(char c) {\n    if ((c &gt;= 'a' &amp;&amp; c &lt;= 'm') || (c &gt;= 'A' &amp;&amp; c &lt;= 'M'))\n        return c + 13;\n    else if ((c &gt;= 'n' &amp;&amp; c &lt;= 'z') || (c &gt;= 'N' &amp;&amp; c &lt;= 'Z'))\n        return c - 13;\n    else\n        return c;\n}\n\n//连接建立之后的callback\nint onConnectionCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection completed\\n&quot;);\n    return 0;\n}\n\n//数据读到buffer之后的callback\nint onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    printf(&quot;get message from tcp connection %s\\n&quot;, tcpConnection-&gt;name);\n    printf(&quot;%s&quot;, input-&gt;data);\n\n    struct buffer *output = buffer_new();\n    int size = buffer_readable_size(input);\n    for (int i = 0; i &lt; size; i++) {\n        buffer_append_char(output, rot13_char(buffer_read_char(input)));\n    }\n    tcp_connection_send_buffer(tcpConnection, output);\n    return 0;\n}\n\n//数据通过buffer写完之后的callback\nint onWriteCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;write completed\\n&quot;);\n    return 0;\n}\n\n//连接关闭之后的callback\nint onConnectionClosed(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection closed\\n&quot;);\n    return 0;\n}\n\nint main(int c, char **v) {\n    //主线程event_loop\n    struct event_loop *eventLoop = event_loop_init();\n\n    //初始化acceptor\n    struct acceptor *acceptor = acceptor_init(SERV_PORT);\n\n    //初始tcp_server，可以指定线程数目，这里线程是4，说明是一个acceptor线程，4个I/O线程，没一个I/O线程\n    //tcp_server自己带一个event_loop\n    struct TCPserver *tcpServer = tcp_server_init(eventLoop, acceptor, onConnectionCompleted, onMessage,\n                                                  onWriteCompleted, onConnectionClosed, 4);\n    tcp_server_start(tcpServer);\n\n    // main thread for acceptor\n    event_loop_run(eventLoop);\n}\n</code></pre><p>关于这个程序，之前一直没有讲到的部分是缓冲区对象buffer。这其实也是网络编程框架应该考虑的部分。</p><p>我们希望框架可以对应用程序封装掉套接字读和写的部分，转而提供的是针对缓冲区对象的读和写操作。这样一来，从套接字收取数据、处理异常、发送数据等操作都被类似buffer这样的对象所封装和屏蔽，应用程序所要做的事情就会变得更加简单，从buffer对象中可以获取已接收到的字节流再进行应用层处理，比如这里通过调用buffer_read_char函数从buffer中读取一个字节。</p><p>另外一方面，框架也必须对应用程序提供套接字发送的接口，接口的数据类型类似这里的buffer对象，可以看到，这里先生成了一个buffer对象，之后将编码后的结果填充到buffer对象里，最后调用tcp_connection_send_buffer将buffer对象里的数据通过套接字发送出去。</p><p>这里像onMessage、onConnectionClosed几个回调函数都是运行在子反应堆线程中的，也就是说，刚刚提到的生成buffer对象，encode部分的代码，是在子反应堆线程中执行的。这其实也是回调函数的内涵，回调函数本身只是提供了类似Handlder的处理逻辑，具体执行是由事件分发线程，或者说是event loop线程发起的。</p><p>框架通过一层抽象，让应用程序的开发者只需要看到回调函数，回调函数中的对象，也都是如buffer和tcp_connection这样封装过的对象，这样像套接字、字节流等底层实现的细节就完全由框架来完成了。</p><p>框架帮我们做了很多事情，那这些事情是如何做到的？在第四篇实战篇，我们将一一揭开答案。如果你有兴趣，不妨先看看实现代码。</p><h2>样例程序结果</h2><p>启动服务器，可以从屏幕输出上看到，使用的是epoll作为事件分发器。</p><pre><code>$./epoll-server-multithreads\n[msg] set epoll as dispatcher, main thread\n[msg] add channel fd == 5, main thread\n[msg] set epoll as dispatcher, Thread-1\n[msg] add channel fd == 9, Thread-1\n[msg] event loop thread init and signal, Thread-1\n[msg] event loop run, Thread-1\n[msg] event loop thread started, Thread-1\n[msg] set epoll as dispatcher, Thread-2\n[msg] add channel fd == 12, Thread-2\n[msg] event loop thread init and signal, Thread-2\n[msg] event loop run, Thread-2\n[msg] event loop thread started, Thread-2\n[msg] set epoll as dispatcher, Thread-3\n[msg] add channel fd == 15, Thread-3\n[msg] event loop thread init and signal, Thread-3\n[msg] event loop run, Thread-3\n[msg] event loop thread started, Thread-3\n[msg] set epoll as dispatcher, Thread-4\n[msg] add channel fd == 18, Thread-4\n[msg] event loop thread init and signal, Thread-4\n[msg] event loop run, Thread-4\n[msg] event loop thread started, Thread-4\n[msg] add channel fd == 6, main thread\n[msg] event loop run, main thread\n</code></pre><p>开启多个telnet客户端，连接上该服务器, 通过屏幕输入和服务器端交互。</p><pre><code>$telnet 127.0.0.1 43211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nfafaf\nsnsns\n^]\n\n\ntelnet&gt; quit\nConnection closed.\n</code></pre><p>服务端显示不断地从epoll_wait中返回处理I/O事件。</p><pre><code>[msg] epoll_wait wakeup, main thread\n[msg] get message channel fd==6 for read, main thread\n[msg] activate channel fd == 6, revents=2, main thread\n[msg] new connection established, socket == 19\nconnection completed\n[msg] epoll_wait wakeup, Thread-1\n[msg] get message channel fd==9 for read, Thread-1\n[msg] activate channel fd == 9, revents=2, Thread-1\n[msg] wakeup, Thread-1\n[msg] add channel fd == 19, Thread-1\n[msg] epoll_wait wakeup, Thread-1\n[msg] get message channel fd==19 for read, Thread-1\n[msg] activate channel fd == 19, revents=2, Thread-1\nget message from tcp connection connection-19\nafasf\n[msg] epoll_wait wakeup, main thread\n[msg] get message channel fd==6 for read, main thread\n[msg] activate channel fd == 6, revents=2, main thread\n[msg] new connection established, socket == 20\nconnection completed\n[msg] epoll_wait wakeup, Thread-2\n[msg] get message channel fd==12 for read, Thread-2\n[msg] activate channel fd == 12, revents=2, Thread-2\n[msg] wakeup, Thread-2\n[msg] add channel fd == 20, Thread-2\n[msg] epoll_wait wakeup, Thread-2\n[msg] get message channel fd==20 for read, Thread-2\n[msg] activate channel fd == 20, revents=2, Thread-2\nget message from tcp connection connection-20\nasfasfas\n[msg] epoll_wait wakeup, Thread-2\n[msg] get message channel fd==20 for read, Thread-2\n[msg] activate channel fd == 20, revents=2, Thread-2\nconnection closed\n[msg] epoll_wait wakeup, main thread\n[msg] get message channel fd==6 for read, main thread\n[msg] activate channel fd == 6, revents=2, main thread\n[msg] new connection established, socket == 21\nconnection completed\n[msg] epoll_wait wakeup, Thread-3\n[msg] get message channel fd==15 for read, Thread-3\n[msg] activate channel fd == 15, revents=2, Thread-3\n[msg] wakeup, Thread-3\n[msg] add channel fd == 21, Thread-3\n[msg] epoll_wait wakeup, Thread-3\n[msg] get message channel fd==21 for read, Thread-3\n[msg] activate channel fd == 21, revents=2, Thread-3\nget message from tcp connection connection-21\ndfasfadsf\n[msg] epoll_wait wakeup, Thread-1\n[msg] get message channel fd==19 for read, Thread-1\n[msg] activate channel fd == 19, revents=2, Thread-1\nconnection closed\n[msg] epoll_wait wakeup, main thread\n[msg] get message channel fd==6 for read, main thread\n[msg] activate channel fd == 6, revents=2, main thread\n[msg] new connection established, socket == 22\nconnection completed\n[msg] epoll_wait wakeup, Thread-4\n[msg] get message channel fd==18 for read, Thread-4\n[msg] activate channel fd == 18, revents=2, Thread-4\n[msg] wakeup, Thread-4\n[msg] add channel fd == 22, Thread-4\n[msg] epoll_wait wakeup, Thread-4\n[msg] get message channel fd==22 for read, Thread-4\n[msg] activate channel fd == 22, revents=2, Thread-4\nget message from tcp connection connection-22\nfafaf\n[msg] epoll_wait wakeup, Thread-4\n[msg] get message channel fd==22 for read, Thread-4\n[msg] activate channel fd == 22, revents=2, Thread-4\nconnection closed\n[msg] epoll_wait wakeup, Thread-3\n[msg] get message channel fd==21 for read, Thread-3\n[msg] activate channel fd == 21, revents=2, Thread-3\nconnection closed\n</code></pre><p>其中主线程的epoll_wait只处理acceptor套接字的事件，表示的是连接的建立；反应堆子线程的epoll_wait主要处理的是已连接套接字的读写事件。这幅图详细解释了这部分逻辑。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/dd/167e8e055d690a15f22cee8f114fb5dd.png?wh=1014*1128\" alt=\"\"></p><h2>epoll的性能分析</h2><p>epoll的性能凭什么就要比poll或者select好呢？这要从两个角度来说明。</p><p>第一个角度是事件集合。在每次使用poll或select之前，都需要准备一个感兴趣的事件集合，系统内核拿到事件集合，进行分析并在内核空间构建相应的数据结构来完成对事件集合的注册。而epoll则不是这样，epoll维护了一个全局的事件集合，通过epoll句柄，可以操纵这个事件集合，增加、删除或修改这个事件集合里的某个元素。要知道在绝大多数情况下，事件集合的变化没有那么的大，这样操纵系统内核就不需要每次重新扫描事件集合，构建内核空间数据结构。</p><p>第二个角度是就绪列表。每次在使用poll或者select之后，应用程序都需要扫描整个感兴趣的事件集合，从中找出真正活动的事件，这个列表如果增长到10K以上，每次扫描的时间损耗也是惊人的。事实上，很多情况下扫描完一圈，可能发现只有几个真正活动的事件。而epoll则不是这样，epoll返回的直接就是活动的事件列表，应用程序减少了大量的扫描时间。</p><p>此外， epoll还提供了更高级的能力——边缘触发。<a href=\"https://time.geekbang.org/column/article/143245\">第23讲</a>通过一个直观的例子，讲解了边缘触发和条件触发的区别。</p><p>这里再举一个例子说明一下。</p><p>如果某个套接字有100个字节可以读，边缘触发（edge-triggered）和条件触发（level-triggered）都会产生read ready notification事件，如果应用程序只读取了50个字节，边缘触发就会陷入等待；而条件触发则会因为还有50个字节没有读取完，不断地产生read ready notification事件。</p><p>在条件触发下（level-triggered），如果某个套接字缓冲区可以写，会无限次返回write ready notification事件，在这种情况下，如果应用程序没有准备好，不需要发送数据，一定需要解除套接字上的ready notification事件，否则CPU就直接跪了。</p><p>我们简单地总结一下，边缘触发只会产生一次活动事件，性能和效率更高。不过，程序处理起来要更为小心。</p><h2>总结</h2><p>本讲我们将程序框架切换到了epoll的版本，和poll版本相比，只是底层的框架做了更改，上层应用程序不用做任何修改，这也是程序框架强大的地方。和poll相比，epoll从事件集合和就绪列表两个方面加强了程序性能，是Linux下高性能网络程序的首选。</p><h2>思考题</h2><p>最后我给你布置两道思考题：</p><p>第一道，说说你对边缘触发和条件触发的理解。</p><p>第二道，对于边缘触发和条件触发，onMessage函数处理要注意什么？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步。</p>","comments":[{"had_liked":false,"id":141124,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571119283,"is_pvip":false,"replies":[{"id":"55095","content":"你可以再次注册这个write ready的事件啊，不是说只能注册一次就结束了，而是你注册了一次，它就通知你一次；而LT的情况下，可能你注册了一次，它通知你好多次。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571453935,"ip_address":"","comment_id":141124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74585563315","product_id":100032701,"comment_content":"在ET的情况下，write ready notification只会在套接字可写的时候通知一次的话，那个时候应用还没准备好数据，等到应用准备好数据时，却又没有通知了，会不会导致数据滞留发不出去？这种情况是怎么解决的呢？","like_count":17,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470674,"discussion_content":"你可以再次注册这个write ready的事件啊，不是说只能注册一次就结束了，而是你注册了一次，它就通知你一次；而LT的情况下，可能你注册了一次，它通知你好多次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571453935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174551,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1580272088,"is_pvip":false,"replies":[{"id":"68039","content":"makefile写得不错：）","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580623724,"ip_address":"","comment_id":174551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53119879640","product_id":100032701,"comment_content":"源代码看起来有点花了点时间，将这部分的代码从抽离了出来，便于大家跟踪代码理解，同时写了简单的makefile。代码地址：https:&#47;&#47;github.com&#47;kevinrsa&#47;epoll_server_multithreads 。如有不妥，联系删除","like_count":12,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482441,"discussion_content":"makefile写得不错：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580623724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140593,"user_name":" JJ","can_delete":false,"product_type":"c1","uid":1250967,"ip_address":"","ucode":"45EC52EFFC49FB","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/97/9e342700.jpg","comment_is_top":false,"comment_ctime":1571013155,"is_pvip":false,"replies":[{"id":"55077","content":"笔误，已经让编辑勘误了，感谢指正。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571452156,"ip_address":"","comment_id":140593,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31635784227","product_id":100032701,"comment_content":"边缘条件，当套接字缓冲区可写，会不断触发ready notification事件，不是应该条件触发才是这样吗？","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470456,"discussion_content":"笔误，已经让编辑勘误了，感谢指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571452156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32707,"discussion_content":"应该是文中写错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571058638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220052,"user_name":"rongyefeng","can_delete":false,"product_type":"c1","uid":1959482,"ip_address":"","ucode":"9A15D947E9D645","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","comment_is_top":false,"comment_ctime":1590144991,"is_pvip":false,"replies":[{"id":"82168","content":"不会再继续发送read_notification事件，必须等所有的100个字节被读完，才会发送下一个read_notification事件。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590930255,"ip_address":"","comment_id":220052,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23064981471","product_id":100032701,"comment_content":"如果应用程序只读取了 50 个字节，边缘触发就会陷入等待；<br>这里的陷入等待是什么意思呢","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496032,"discussion_content":"不会再继续发送read_notification事件，必须等所有的100个字节被读完，才会发送下一个read_notification事件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590930255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2401422,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","nickname":"geek","note":"","ucode":"FF0845140D72A9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540040,"discussion_content":"et模式下是等缓冲区再收到数据时才会发出读通知？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639925291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":496032,"ip_address":""},"score":540040,"extra":""}]}]},{"had_liked":false,"id":161523,"user_name":"张三说","can_delete":false,"product_type":"c1","uid":1065988,"ip_address":"","ucode":"F1BE933F314D6C","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/04/7904829d.jpg","comment_is_top":false,"comment_ctime":1576223389,"is_pvip":false,"replies":[{"id":"63924","content":"有没有跑例子程序呢？其实不用纠结，最新的测试表明，两者差别其实没有那么大。但是非要比一个差距的话，ET还是效率好一些，但是对应用程序开发者的要求高一些。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577604907,"ip_address":"","comment_id":161523,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23051059869","product_id":100032701,"comment_content":"老师，一直没搞懂ET和LT的性能区别，仅仅因为LT会多提醒一些次数就与ET相差明显的性能吗？一直很纠结这个问题","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477749,"discussion_content":"有没有跑例子程序呢？其实不用纠结，最新的测试表明，两者差别其实没有那么大。但是非要比一个差距的话，ET还是效率好一些，但是对应用程序开发者的要求高一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577604907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2123892,"avatar":"https://static001.geekbang.org/account/avatar/00/20/68/74/aea478ba.jpg","nickname":"我是管小亮","note":"","ucode":"A1C624CF9E1CA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299576,"discussion_content":"ET是除了问题，就一次性都处理了，而且必须处理，LT是不一定处理，所以会一直提醒，毫无疑问，LT效率相较更低些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597738625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142158,"user_name":"流浪地球","can_delete":false,"product_type":"c1","uid":1498137,"ip_address":"","ucode":"25210DCD353F97","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/19/c058bcbf.jpg","comment_is_top":false,"comment_ctime":1571301582,"is_pvip":false,"replies":[{"id":"55117","content":"可能是考虑不周，有可能的话麻烦提一个MR或者issue，大家一起来改。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571456928,"ip_address":"","comment_id":142158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18751170766","product_id":100032701,"comment_content":"细读了下老师git上的代码，套接字都是设置为非阻塞模式的，但并没有对返回值做判断处理，看上去好像是阻塞式的用法，求解？","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471010,"discussion_content":"可能是考虑不周，有可能的话麻烦提一个MR或者issue，大家一起来改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571456928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232957,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1594177715,"is_pvip":false,"replies":[{"id":"86804","content":"多读两遍会好很多","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594906638,"ip_address":"","comment_id":232957,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889145011","product_id":100032701,"comment_content":"27章以及以后源代码的难度提升了一个等级了。看了相当吃力呀。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500826,"discussion_content":"多读两遍会好很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594906638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1469608,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","nickname":"郑祖煌","note":"","ucode":"49A0D2E3279826","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291684,"discussion_content":"我用手敲了一遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207256,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1587038161,"is_pvip":false,"replies":[{"id":"77712","content":"是的，是所有感兴趣的事件集合。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587303511,"ip_address":"","comment_id":207256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5882005457","product_id":100032701,"comment_content":"老师，这个就绪列表是建立在事件集合之上的对吧。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492059,"discussion_content":"是的，是所有感兴趣的事件集合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587303511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205637,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1717235,"ip_address":"","ucode":"10962C711CBC11","user_header":"","comment_is_top":false,"comment_ctime":1586692399,"is_pvip":false,"replies":[{"id":"77711","content":"当前的实现并不会主动把I&#47;O读写事件从事件通道上摘除哦，所以并不需要重新注册该事件，onMessage就是一个简单的报文解析函数，所要做到的就是在条件触发情况下读完所有的字节，避免不断的再次被事件驱动。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587303494,"ip_address":"","comment_id":205637,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5881659695","product_id":100032701,"comment_content":"老师好，<br>针对第2题，目前想到onMessage函数应该要注意，如果当前程序无法处理该通知，应该要想办法再次注册该事件。<br><br>只是具体程序实现就不知道应该怎么写了，可能还要请老师说明一下 哈哈XD<br><br>谢谢老师^^","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491536,"discussion_content":"当前的实现并不会主动把I/O读写事件从事件通道上摘除哦，所以并不需要重新注册该事件，onMessage就是一个简单的报文解析函数，所要做到的就是在条件触发情况下读完所有的字节，避免不断的再次被事件驱动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587303494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1512599,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/88nXicqmkJWm3IXVfPfGQSk8SKIBVKjuC4qhzaCkf5Ud88uvKgS4Vf5AzCJ1uaFO0gpPnxdh4CowfhpxV1kSbXw/132","nickname":"lixin","note":"","ucode":"94D99DAFB6C929","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585184,"discussion_content":"那极端情况，用户态的缓存不够了。但是内核态缓存区还有数据。这个该如何处理。我想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661387150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":491536,"ip_address":"广东"},"score":585184,"extra":""}]}]},{"had_liked":false,"id":186497,"user_name":"丁小明","can_delete":false,"product_type":"c1","uid":1207622,"ip_address":"","ucode":"CC23857B8D75D5","user_header":"https://static001.geekbang.org/account/avatar/00/12/6d/46/e16291f8.jpg","comment_is_top":false,"comment_ctime":1583853346,"is_pvip":false,"replies":[{"id":"72372","content":"很简单，应用层需要对接收到的byte字节流进行编解码，为了方便，在应用层进行缓冲，之后进行编解码的操作，再送给业务逻辑层来处理。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584172912,"ip_address":"","comment_id":186497,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5878820642","product_id":100032701,"comment_content":"为什么 socket已经有缓冲区了，应用层还要缓冲区呢，比如发送，socket也会合并发送","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486780,"discussion_content":"很简单，应用层需要对接收到的byte字节流进行编解码，为了方便，在应用层进行缓冲，之后进行编解码的操作，再送给业务逻辑层来处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584172912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1736297,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9zRdkKuXMKh30ibeludlAsztmR4rD9iaiclPicOfIhbC4fWxGPz7iceb3o4hKx7qgX2dKwogYvT6VQ0g/132","nickname":"Initiative Thinker","note":"","ucode":"A884396A1581EF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391050,"discussion_content":"让业务与内核操作接偶分离，内核可以重新再将数据写入，而不需要等待业务层逻辑处理完成后，再去内核中读/写数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630247237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141707,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571213742,"is_pvip":false,"replies":[{"id":"55107","content":"还好吧，看一下CMake的文档，以前我一直用的Makefile, CMake也是现学的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571454461,"ip_address":"","comment_id":141707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5866181038","product_id":100032701,"comment_content":"看到CMake我就完全懵逼。。。。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470854,"discussion_content":"还好吧，看一下CMake的文档，以前我一直用的Makefile, CMake也是现学的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140734,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1571039402,"is_pvip":false,"replies":[{"id":"55083","content":"你需要什么样的README.md呢？第四篇会详细讲解这个框架的设计，也行你读完之后，可以写一个README.md push到git上呢？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571453281,"ip_address":"","comment_id":140734,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5866006698","product_id":100032701,"comment_content":"老师能不能为这个框架写一份README.md，我对这个实现很感兴趣","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470532,"discussion_content":"你需要什么样的README.md呢？第四篇会详细讲解这个框架的设计，也行你读完之后，可以写一个README.md push到git上呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571453281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34676,"discussion_content":"我也提了补一个流程图的建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571213703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","nickname":"CCC","note":"","ucode":"2E254444098267","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33714,"discussion_content":"后面一部分应该就会讲到，其实代码写的很清楚啃一下效果更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571141035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358610,"user_name":"Running man","can_delete":false,"product_type":"c1","uid":2075086,"ip_address":"浙江","ucode":"F3357D6696A5C1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","comment_is_top":false,"comment_ctime":1664467553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664467553","product_id":100032701,"comment_content":"event_loop.c编译链接不上pthread库，有哪位朋友知道如何修改cmakelist，gcc版本是11.2.0 ubuntu系统版本是11.2.0，对应内核版本5.15.0-41","like_count":0},{"had_liked":false,"id":299882,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1624892590,"is_pvip":false,"replies":[{"id":"109697","content":"嗯，也是有这方面的考虑，不过更多的还是事件处理的机制和效率的问题。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1626606049,"ip_address":"","comment_id":299882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624892590","product_id":100032701,"comment_content":"性能对比第一点，是否可以这样理解。select、poll在用户态声明的事件拷贝(我在这里理解拷贝，不是注册，因为下一次调用依旧要传入)到内核态，大量操作copy的情况下耗时不容小觑。而epoll是已经注册到对应的epoll实例。主要是省去了这个copy的时间","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522573,"discussion_content":"嗯，也是有这方面的考虑，不过更多的还是事件处理的机制和效率的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626606049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279193,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1613651346,"is_pvip":false,"replies":[{"id":"102007","content":"第一种。代码如下:<br><br>int handle_read(void *data) {<br>    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;<br>    struct buffer *input_buffer = tcpConnection-&gt;input_buffer;<br>    struct channel *channel = tcpConnection-&gt;channel;<br><br>    if (buffer_socket_read(input_buffer, channel-&gt;fd) &gt; 0) {<br>        &#47;&#47;应用程序真正读取Buffer里的数据<br>        if (tcpConnection-&gt;messageCallBack != NULL) {<br>            tcpConnection-&gt;messageCallBack(input_buffer, tcpConnection);<br>        }<br>    } else {<br>        handle_connection_closed(tcpConnection);<br>    }<br>}","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516708,"ip_address":"","comment_id":279193,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1613651346","product_id":100032701,"comment_content":"有个疑问，这个程序与下一章的HTTP服务器的设计，处理连接的时候，服务器什么时候会关闭对端的连接？<br>是不断与客户端交互，客户端发送关闭请求才关闭；还是处理完客户端的请求后，发送响应，再关闭","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515657,"discussion_content":"第一种。代码如下:\n\nint handle_read(void *data) {\n    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;\n    struct buffer *input_buffer = tcpConnection-&amp;gt;input_buffer;\n    struct channel *channel = tcpConnection-&amp;gt;channel;\n\n    if (buffer_socket_read(input_buffer, channel-&amp;gt;fd) &amp;gt; 0) {\n        //应用程序真正读取Buffer里的数据\n        if (tcpConnection-&amp;gt;messageCallBack != NULL) {\n            tcpConnection-&amp;gt;messageCallBack(input_buffer, tcpConnection);\n        }\n    } else {\n        handle_connection_closed(tcpConnection);\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589166,"discussion_content":"这里有个问题，连接如果未关闭并且客户端一直有数据交互，那么这里的读缓冲区一直在缓存数据，空间也会持续变大，但回调结束也没有得到释放，这样是否合理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664467924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247478,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1599719325,"is_pvip":false,"replies":[{"id":"92043","content":"是的，这样的写效率会变低。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601869433,"ip_address":"","comment_id":247478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599719325","product_id":100032701,"comment_content":"老师，所以不删除写事件，就不需要重新注册是吗？每次缓冲区由满变成可写都会通知一次，是这样理解吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505414,"discussion_content":"是的，这样的写效率会变低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601869433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242268,"user_name":"fedwing","can_delete":false,"product_type":"c1","uid":1743661,"ip_address":"","ucode":"2DFF902FD190C7","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9b/2d/f7fca208.jpg","comment_is_top":false,"comment_ctime":1597652724,"is_pvip":false,"replies":[{"id":"90113","content":"epoll_wait返回给用户空间需要处理的 I&#47;O 事件，用这个events来表示，这样我们才知道具体发生了什么事件。具体的例子可以参考第23章。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598794772,"ip_address":"","comment_id":242268,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597652724","product_id":100032701,"comment_content":"第一个角度是事件集合。在每次使用 poll 或 select 之前，都需要准备一个感兴趣的事件集合，系统内核拿到事件集合，进行分析并在内核空间构建相应的数据结构来完成对事件集合的注册。而 epoll 则不是这样，epoll 维护了一个全局的事件集合，通过 epoll 句柄，可以操纵这个事件集合，增加、删除或修改这个事件集合里的某个元素。要知道在绝大多数情况下，事件集合的变化没有那么的大，这样操纵系统内核就不需要每次重新扫描事件集合，构建内核空间数据结构。<br>  老师，这个不是很理解，看了下，前面的epoll实例代码，epoll_wait时，还是需要传入一个events（看起来是初始化了下）的，这个是做什么用的，我理解，epoll对象本身不是已经有它所关联的事件信息了吗（通过epoll_ctrl add进去）","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503963,"discussion_content":"epoll_wait返回给用户空间需要处理的 I/O 事件，用这个events来表示，这样我们才知道具体发生了什么事件。具体的例子可以参考第23章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598794772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242266,"user_name":"fedwing","can_delete":false,"product_type":"c1","uid":1743661,"ip_address":"","ucode":"2DFF902FD190C7","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9b/2d/f7fca208.jpg","comment_is_top":false,"comment_ctime":1597652518,"is_pvip":false,"replies":[{"id":"90112","content":"是的，完全正确。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598794318,"ip_address":"","comment_id":242266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597652518","product_id":100032701,"comment_content":"老师，请问下，我看用poll实现里的结构配图，可以用threadpool来解耦具体业务逻辑，epoll里的配图，没有这个，其实也是可以加的吧，本质上线程池解耦业务这部分应该是通用吧，只是在事件触发， 事件分发机制上的差别吧？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503961,"discussion_content":"是的，完全正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598794318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157699,"user_name":"林林","can_delete":false,"product_type":"c1","uid":1613227,"ip_address":"","ucode":"7B6318B971E430","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","comment_is_top":false,"comment_ctime":1575248442,"is_pvip":false,"replies":[{"id":"61032","content":"main reactor处理的是监听套接字上的事件，sub reactor处理的是已连接套接字上的事件，两个是不重合的。<br><br>如果处理了相同的socket，那么肯定需要通过锁-并发来控制，无形中就增加了处理的开销，降低了程序处理的效率。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575799687,"ip_address":"","comment_id":157699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575248442","product_id":100032701,"comment_content":"文稿中的框架示意图，我看到main reactor 和 sub reactor都各自运行了epoll,请问是否各自处理不同的socket？ 如果处理了相同的socket会发生什么吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476501,"discussion_content":"main reactor处理的是监听套接字上的事件，sub reactor处理的是已连接套接字上的事件，两个是不重合的。\n\n如果处理了相同的socket，那么肯定需要通过锁-并发来控制，无形中就增加了处理的开销，降低了程序处理的效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575799687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140652,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1571021413,"is_pvip":false,"replies":[{"id":"55079","content":"在第四篇会有详细的介绍，如果有疑问，可以沟通，我统一回复或答疑。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571452228,"ip_address":"","comment_id":140652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571021413","product_id":100032701,"comment_content":"看了github上面的lib目录，很多文件里的函数没有介绍，注释也不多。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470494,"discussion_content":"在第四篇会有详细的介绍，如果有疑问，可以沟通，我统一回复或答疑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571452228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140649,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1571021305,"is_pvip":false,"replies":[{"id":"55078","content":"好的，已经这么做了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571452170,"ip_address":"","comment_id":140649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571021305","product_id":100032701,"comment_content":"终于看到github地址了，建议每节课都写一下链接地址，没代码的章节除外。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470492,"discussion_content":"好的，已经这么做了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571452170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}