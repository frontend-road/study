{"id":545235,"title":"64｜RESTful Web Services（28）：如何重构Resource、SubResource等接口与实现？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，和UriTemplate整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethod\n<ul>\n<li><s>从Path标注中获取UriTemplate</s>\n<ul>\n<li>如不存在Path标注，则抛出异常</li>\n</ul>\n</li>\n<li><s>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法</s>\n<ul>\n<li><s>当请求与资源方法的Uri模版一致，且Http方法一致时，派分到该方法</s></li>\n<li><s>没有资源方法于请求的Uri和Http方法一致时，返回404</s></li>\n</ul>\n</li>\n<li><s>在处理请求派分时，可以支持多级子资源</s>\n<ul>\n<li><s>当没有资源方法可以匹配请求时，选择最优匹配SubResourceLocater，通过它继续进行派分</s></li>\n<li>如果SubResourceLocator也无法找到满足的请求时，返回404</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>package geektime.tdd.rest;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.ws.rs.HttpMethod;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.container.ResourceContext;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.HttpHeaders;\nimport jakarta.ws.rs.core.Response;\nimport java.lang.reflect.Method;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\ninterface ResourceRouter {\n    OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext);\n    interface Resource {\n        Optional&lt;ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n    interface RootResource extends Resource, UriHandler {\n    }\n    interface ResourceMethod extends UriHandler {\n        String getHttpMethod();\n        GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n    interface SubResourceLocator extends UriHandler {\n        Resource getSubResource(ResourceContext resourceContext, UriInfoBuilder uriInfoBuilder);\n    }\n}\nclass DefaultResourceRouter implements ResourceRouter {\n    private Runtime runtime;\n    private List&lt;RootResource&gt; rootResources;\n    public DefaultResourceRouter(Runtime runtime, List&lt;RootResource&gt; rootResources) {\n        this.runtime = runtime;\n        this.rootResources = rootResources;\n    }\n    @Override\n    public OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext) {\n        String path = request.getServletPath();\n        UriInfoBuilder uri = runtime.createUriInfoBuilder(request);\n        Optional&lt;ResourceMethod&gt; method = UriHandlers.mapMatched(path, rootResources, (result, resource) -&gt; findResourceMethod(request, resourceContext, uri, result, resource));\n        if (method.isEmpty()) return (OutboundResponse) Response.status(Response.Status.NOT_FOUND).build();\n        return (OutboundResponse) method.map(m -&gt; m.call(resourceContext, uri)).map(entity -&gt; Response.ok(entity).build())\n                .orElseGet(() -&gt; Response.noContent().build());\n    }\n    private Optional&lt;ResourceMethod&gt; findResourceMethod(HttpServletRequest request, ResourceContext resourceContext, UriInfoBuilder uri, Optional&lt;UriTemplate.MatchResult&gt; matched, RootResource handler) {\n        return handler.match(matched.get(), request.getMethod(),\n                Collections.list(request.getHeaders(HttpHeaders.ACCEPT)).toArray(String[]::new), resourceContext, uri);\n    }\n}\nclass RootResourceClass implements ResourceRouter.RootResource {\n    private PathTemplate uriTemplate;\n    private Class&lt;?&gt; resourceClass;\n    private ResourceMethods resourceMethods;\n    private SubResourceLocators subResourceLocators;\n    public RootResourceClass(Class&lt;?&gt; resourceClass) {\n        this.resourceClass = resourceClass;\n        this.uriTemplate = new PathTemplate(resourceClass.getAnnotation(Path.class).value());\n        this.resourceMethods = new ResourceMethods(resourceClass.getMethods());\n        this.subResourceLocators = new SubResourceLocators(resourceClass.getMethods());\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        builder.addMatchedResource(resourceContext.getResource(resourceClass));\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, method).or(() -&gt;\n                subResourceLocators.findSubResourceMethods(remaining, method, mediaTypes, resourceContext, builder));\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n}\nclass SubResource implements ResourceRouter.Resource {\n    private Object subResource;\n    private ResourceMethods resourceMethods;\n    private SubResourceLocators subResourceLocators;\n    public SubResource(Object subResource) {\n        this.subResource = subResource;\n        this.resourceMethods = new ResourceMethods(subResource.getClass().getMethods());\n        this.subResourceLocators = new SubResourceLocators(subResource.getClass().getMethods());\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, method).or(() -&gt; subResourceLocators.findSubResourceMethods(remaining, method, mediaTypes, resourceContext, builder));\n    }\n}\nclass DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n    private String httpMethod;\n    private UriTemplate uriTemplate;\n    private Method method;\n    public DefaultResourceMethod(Method method) {\n        this.method = method;\n        this.uriTemplate = new PathTemplate(Optional.ofNullable(method.getAnnotation(Path.class)).map(Path::value).orElse(&quot;&quot;));\n        this.httpMethod = Arrays.stream(method.getAnnotations()).filter(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class))\n                .findFirst().get().annotationType().getAnnotation(HttpMethod.class).value();\n    }\n    @Override\n    public String getHttpMethod() {\n        return httpMethod;\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    @Override\n    public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n        return null;\n    }\n    @Override\n    public String toString() {\n        return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n    }\n}\nclass ResourceMethods {\n    private Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; resourceMethods;\n    public ResourceMethods(Method[] methods) {\n        this.resourceMethods = getResourceMethods(methods);\n    }\n    private static Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; getResourceMethods(Method[] methods) {\n        return Arrays.stream(methods).filter(m -&gt; Arrays.stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(DefaultResourceMethod::new)\n                .collect(Collectors.groupingBy(ResourceRouter.ResourceMethod::getHttpMethod));\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findResourceMethods(String path, String method) {\n        return Optional.ofNullable(resourceMethods.get(method)).flatMap(methods -&gt; UriHandlers.match(path, methods, r -&gt; r.getRemaining() == null));\n    }\n}\nclass SubResourceLocators {\n    private final List&lt;ResourceRouter.SubResourceLocator&gt; subResourceLocators;\n    public SubResourceLocators(Method[] methods) {\n        subResourceLocators = Arrays.stream(methods).filter(m -&gt; m.isAnnotationPresent(Path.class) &amp;&amp;\n                        Arrays.stream(m.getAnnotations()).noneMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map((Function&lt;Method, ResourceRouter.SubResourceLocator&gt;) DefaultSubResourceLocator::new).toList();\n    }\n    public Optional&lt;ResourceRouter.SubResourceLocator&gt; findSubResource(String path) {\n        return UriHandlers.match(path, subResourceLocators);\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findSubResourceMethods(String path, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        return UriHandlers.mapMatched(path, subResourceLocators, (result, locator) -&gt; locator.getSubResource(resourceContext, builder).match(result.get(), method, mediaTypes, resourceContext, builder));\n    }\n    static class DefaultSubResourceLocator implements ResourceRouter.SubResourceLocator {\n        private PathTemplate uriTemplate;\n        private Method method;\n        public DefaultSubResourceLocator(Method method) {\n            this.method = method;\n            this.uriTemplate = new PathTemplate(method.getAnnotation(Path.class).value());\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return uriTemplate;\n        }\n        @Override\n        public String toString() {\n            return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n        }\n        @Override\n        public ResourceRouter.Resource getSubResource(ResourceContext resourceContext, UriInfoBuilder uriInfoBuilder) {\n            Object resource = uriInfoBuilder.getLastMatchedResource();\n            try {\n                Object subResource = method.invoke(resource);\n                uriInfoBuilder.addMatchedResource(subResource);\n                return new SubResource(subResource);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/5a6452b84f6b43cf8a8657e037af57d2/snapshots/fdddfb0213154b0c9f7a7cbbdb4c45c2-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/10c7f2db-182586c9655-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/d2837f8bddb740ce8783f22bb207da63/711cffdc41e244e0804ce67fe1746564-74e632a158c0c14a15eab20cad7ad608-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>后续任务要如何划分？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"63｜RESTful Web Services（27）：如何通过重构修改接口？","id":545232},"right":{"article_title":"65｜RESTful Web Services（29）：后续任务将要如何划分与实现？","id":549015}},"comments":[{"had_liked":false,"id":357288,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1510910,"ip_address":"上海","ucode":"FC7849B6F0FA9F","user_header":"https://static001.geekbang.org/account/avatar/00/17/0d/fe/4e5ba578.jpg","comment_is_top":false,"comment_ctime":1663139074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663139074","product_id":100109401,"comment_content":"amazing","like_count":0}]}