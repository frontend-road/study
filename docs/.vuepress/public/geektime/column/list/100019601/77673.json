{"id":77673,"title":"06 | 代码整理的关键逻辑和最佳案例","content":"<p>写一篇文章，要层次清楚、段落分明，写代码也是这样。杂志排版，要布局合理，阅读舒适，代码的编排也要这样。</p><p>可是很多人想的是，代码能工作就行，不用讲究格式；时间紧，哪有时间整理代码。</p><p>可事实上，干净整洁的代码带给我们的，远远不止格式上的赏心悦目，它更可以减少错误，提高我们的编程速度与效率。因为代码的层次结构、格式部署，是我们对自己思维的整理，也是我们思考逻辑的展现。</p><p>很多人不愿意整理代码，觉得这项工作很麻烦。其实代码的整理并不复杂，也不需要什么高深的技巧。有效地使用空行、空格和缩进，简单的分割与对齐，就可以使得代码的视觉效果甚至质量发生巨大的变化，理顺编码的思路，提高编码的效率。这是一个付出少、收获大，值得养成的好习惯。</p><h2>给代码分块</h2><p>其实整理代码，就是给代码分块。我们的大脑接收信息是按照分块的模式进行的。一块就是一个可识别的信息，它被安放到短期记忆的“插槽”里。信息块的实际信息量是可变的，但是越简单、越具体的信息块越容易被记住和理解。</p><p>一份好的报纸或者杂志，文章本身往往很简短，或者被分割为简短的块。使用小段落、子标题，大量留白，版面切割，尽一切可能分解文章、版面，让眼睛舒适，让大脑有时间停留下来接受每个信息快。</p><!-- [[[read_end]]] --><p>一个代码文件，可以看做是一个杂志版面。在这个版面里，我们要把代码整理成清晰的模块，这样每一小块在视觉上和逻辑上都是可以区分的，可以帮助我们阅读和记忆，减轻眼睛和大脑的疲劳。</p><p>比较下面的两种形式的语句。这两种形式，在实际逻辑上是完全相同的。但是，第二个语句使用了更细化的块，这样视觉形式和逻辑形式都是清晰直观的。</p><pre><code>if (firstName != null &amp;&amp; lastName != null)\n</code></pre><pre><code>if ((firstName != null) &amp;&amp; (lastName != null))\n</code></pre><p>如果一段代码放眼望去都是大块大块的，那对于一个初学者来说，阅读和理解就非常困难。他需要将复杂的表达式再次分解，分解到可以单独理解的变量和运算符，再重新组合。</p><p>你看，这样是不是很麻烦？</p><p>一个好的程序员，要识别并且区分代码块，让它们易于阅读和辨认。程序代码分块时，我们需要注意以下三个点。</p><ol>\n<li>\n<p><strong>保持代码块的单一性，一个代码块只能有一个目标</strong>。代码块内所有的内容都是为了一个目标服务的，不能把无关的内容放在同一个代码块里。同一个代码块里语句的相互联系比与相邻代码块里的语句关系更为紧密；</p>\n</li>\n<li>\n<p><strong>注意代码块的完整性</strong>。代码块是一个完整的信息块。一个代码块要表达一个相对完整的意思，不能一个意思没说完就分块了，就像话说了半句一样；</p>\n</li>\n<li>\n<p><strong>代码块数量要适当</strong>。代码块过多，会让人觉得路径太长，逻辑复杂，不容易阅读理解。一个基础的代码块最好不要超过25行（通常显示屏小半个页面），否则就会有增加阅读理解的困难。</p>\n</li>\n</ol><p>我们读文章的时候，如果段落划分合理，那么读一次差不多就能清楚地记住了。日常阅读的新闻、时事、娱乐报道，和学术著作相比，通常会使用更短的段落。这就是有意缩短信息快，使报道更加适合快速阅读的需要。</p><p>同样的，我们划分代码块，就是要让人清楚地阅读和理解。如果一个代码块太长，说明我们还可以进一步细分它。</p><h2>使用空白空间</h2><p>给代码分块的办法之一，就是有效地使用空白空间。空白的空间虽然没有内容，但会给我们重要的信息提示。因此我们写代码的时候，一定要合理地运用空白。</p><p>为什么呢？</p><p>靠近的代码会形成一个视觉块，并且具有隐含的关联。分开的代码，意味着上下两段代码的关联没有那么紧密。这种视觉效果会给我们暗示，代码靠得越近，代码之间的关系越紧密。</p><p>因此，空白区域，不仅仅可以用来分割代码，还展示了代码之间的关系。</p><p>代码的分块，通过空格、缩进和空行来整理，或者分割。其中空格可以进行逻辑区隔，用于同一行代码内部的信息分块。缩进用于水平分割，用于表示代码块的级别。空行用于垂直分割，用于分开同级别的不同代码块。</p><p>下面这个简图，可以直观地表示这种代码块的布局方式。</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/b7/4d810b8acbdc3a5413f53a432dc08eb7.png?wh=623*540\" alt=\"\"><br>\n或者，也可以参考下面的代码示例。 这段代码，也包含了使用空格区分同一行代码内部的信息块。</p><pre><code>package coding;\n\npublic class CodingFormat {\n    public static void main(String[] args) {\n        System.out.println(\n                &quot;German say hello with &quot;\n                + Greeting.GERMAN.getGreeting());\n    }\n\n    private static enum Greeting {\n        ENGLISH     (&quot;English&quot;,  &quot;Hello&quot;),\n        SPANISH     (&quot;Spanish&quot;,  &quot;Hola&quot;),\n        GERMAN      (&quot;German&quot;,   &quot;Hallo&quot;),\n        MANDARIN    (&quot;Mandarin&quot;, &quot;Ni Hao&quot;);\n\n        private final String language;\n        private final String greeting;\n\n        private Greeting(String language, String greeting) {\n            this.language = language;\n            this.greeting = greeting;\n        }\n\n        private String getGreeting() {\n            return greeting;\n        }\n        \n        private String getLanguage() {\n            return language;\n        }\n    }\n}\n</code></pre><p>那么到底如何利用空白空间呢？可以分为下面四个方法，我来一一讲解一下。</p><p><strong>同级别代码块靠左对齐</strong></p><p>我们阅读的习惯顺序是从左到右，代码也如此。因此不同行，但同级别的代码要靠左对齐。</p><p>比如，上面的CodingFormat例子中，main()方法和Greeting枚举类都是CodingFormat的下一级内容，属于同一级别的两个块。 两个代码块的左侧要对齐。</p><p>上面的CodingFormat例子中的枚举常量、枚举类的变量、枚举类的方法，也是属于同一级别的内容。 对应地，左侧要对齐。</p><p><strong>同级别代码块空行分割</strong></p><p>我们阅读代码总是从上往下读，不同行的同级别的代码块之间，要使用空行分割。</p><p>当我们读到一个空行的时候，我们的大脑就会意识到这部分的信息结束了，可以停留下来接受这段信息。 另外，我们阅读代码的时候，碰到空白行，我们也可以暂停，往回看几行，或者重新回顾一下整个代码块，梳理逻辑、加深理解。</p><p>比如，上面的CodingFormat例子中，main()方法和Greeting枚举类之间的空白行，getGreeting()和getLanguage()方法之间的空行，都是用来分割不同的信息块的。greeting变量和Greeting构造方法之间的空白行，表示变量声明结束，下面是开始定义类的方法，同样起到分割信息块的作用。</p><p><strong>下一级代码块向右缩进</strong></p><p>我们上面讲了同级别的代码格式，那么不同级别的呢？</p><p>区分不同行的不同级别的代码，可以使用缩进。缩进的目的是为了让我们更直观地看到缩进线，从而意识到代码之间的关系。</p><p>缩进虽然是一个共识，但怎么缩进是一个富有争议的话题。不同的语言，不同的程序员，有着不同的偏好。</p><p>我刚开始工作时，编写代码必须使用制表符缩进，并且要把制表符设置为四个字符空间。那个时候，还没有什么IDE可以依赖，大家都使用vi编辑器编写代码。缺省的，vi制表符使用八个字符空间。所以，那个时候我们看代码的第一件事，就是看看vi配置有没有把制表符设置为四个字符空间。 要不然的话，代码就凌乱得找不到头绪。</p><p>现在，OpenJDK的代码里已经不允许存在制表符了，缩进统一使用四个空格。也有的缩进规范使用两个空格，或者八个空格。</p><p>上面的CodingFormat例子中，我们使用了四个空格作为一个缩进单元。下面，我们看看两个空格的缩进，以及八个空格的缩进效果。</p><p>两个空格的缩进：</p><pre><code>package coding;\n\npublic class CodingFormat {\n  public static void main(String[] args) {\n    System.out.println(\n        &quot;German say hello with &quot; + Greeting.GERMAN.getGreeting());\n    }\n\n  private static enum Greeting {\n    ENGLISH     (&quot;English&quot;,  &quot;Hello&quot;),\n    SPANISH     (&quot;Spanish&quot;,  &quot;Hola&quot;),\n    GERMAN      (&quot;German&quot;,   &quot;Hallo&quot;),\n    MANDARIN    (&quot;Mandarin&quot;, &quot;Ni Hao&quot;);\n\n    private final String language;\n    private final String greeting;\n\n    private Greeting(String language, String greeting) {\n      this.language = language;\n      this.greeting = greeting;\n    }\n\n    private String getGreeting() {\n      return greeting;\n    }\n        \n    private String getLanguage() {\n      return language;\n    }\n  }\n}\n</code></pre><p>两个空格的缩进，可以为每一行语句释放出更多的空间，从而减少换行，方便我们使用较长标识符或者语句。</p><p>两个空格的缩进，视觉上，缩进线靠得太近，相对而言，更容易混淆代码的分块级别。这是两个空格缩进的一个小缺点。</p><p>我们再来看下八个空格的缩进：</p><pre><code>package coding;\n\npublic class CodingFormat {\n        public static void main(String[] args) {\n                System.out.println(\n                        &quot;German say hello with &quot;\n                        + Greeting.GERMAN.getGreeting());\n        }\n\n        private static enum Greeting {\n                ENGLISH     (&quot;English&quot;,  &quot;Hello&quot;),\n                SPANISH     (&quot;Spanish&quot;,  &quot;Hola&quot;),\n                GERMAN      (&quot;German&quot;,   &quot;Hallo&quot;),\n                MANDARIN    (&quot;Mandarin&quot;, &quot;Ni Hao&quot;);\n\n                private final String language;\n                private final String greeting;\n\n                private Greeting(String language, String greeting) {\n                        this.language = language;\n                        this.greeting = greeting;\n                }\n\n                private String getGreeting() {\n                        return greeting;\n                }\n        \n                private String getLanguage() {\n                        return language;\n                }\n        }\n}\n</code></pre><p>八个空格的缩进，视觉上可以看到缩进线明显，缩进的级别也容易辨认。</p><p>但过多的缩进空格也有缺点。它很容易超过每行字数的限制，比如屏幕每行可容纳字符的限制。特别是当我们使用较长标识符或者语句的时候，如果每行字符空间较小（手机屏幕），就很容易导致自动换行，让代码变得难以阅读。</p><p>另外，如果我们使用八个空格作为一个缩进单元，为了代码的整洁性，我们往往会被迫使用最少的缩进嵌套，这也导致了额外的复杂性，可读性就降低了。</p><p>由于我们倾向于使用有准确意义的命名，标识符的长度往往是一个不能忽视的因素。现在的编码规范，四个空格的缩进最为常见，二个空格的缩进次之，八个空格的缩进使用的较少。</p><p><strong>同行内代码块空格区隔</strong></p><p>我们上面讲的都是不同行的代码该如何注意格式。位于同一行内的代码块，同样需要注意。我们可以使用空格区分开不同的逻辑单元。</p><p>比如，逗号分隔符后要使用空格，以区分开下一个信息：</p><pre><code>String firstName, lastName;\n</code></pre><p>双目运算符或者多目运算符，运算符前后都要使用空格：</p><pre><code>firstName != null\n\n(firstName != null) &amp;&amp; (lastName != null)\n</code></pre><h2>一行一个行为</h2><p>上面我们讨论了代码块的一些整理办法。 那对于每一行代码，有没有整理办法呢?</p><p>当然是有的。</p><p>一个重要的原则是，每一行代码仅仅表示一个行为。这样每一行的代码才是一个常规大小的、可以识别的基础信息块。</p><p>比如说，下面的这行代码就包含了两个行为，一个是判断行为，一个是执行行为。 两个行为放在一行，这样的代码不仅看起来有些乱，我们的大脑处理起来也有些懵。</p><pre><code>if (variable != null) variable.doSomething();\n</code></pre><p>如果分隔开这两个行为，信息块的区隔会更明显，代码会更清晰：</p><pre><code>if (variable != null) {\n    variable.doSomething();\n}\n</code></pre><p>一般一个完整的表达式可以看作是一个独立的行为。</p><p>编辑器的宽度，屏幕的宽度，都是有限制的。当一个完整的表达式比较长时，就需要换行。</p><p><strong>基本的换行原则</strong></p><p>我们前面讨论的代码分块的基本思想，同样适用于换行。基本的换行规范需要考虑以下三点。</p><ol>\n<li>每行代码字符数的限制。一般情况下，每行代码不要超出80个字符（ 80个字符是传统终端的宽度，比如vi编译器）。由于屏幕尺寸和代码阅读终端的变化，现在的很多规范，开始使用120个字符的限制。所以我们编码的时候，需要留意一下；</li>\n<li>如果一行不足以容纳一个表达式，就需要换行；</li>\n<li>一般的换行原则包括以下五点。</li>\n</ol><ul>\n<li>在逗号后换行。</li>\n</ul><pre><code>String variable = anObject.getSomething(longExpressionOne,\n        longExpressionTwo, longExpressionThree);\n</code></pre><ul>\n<li>在操作符前换行。</li>\n</ul><pre><code>String varibale = longStringOne + longStringTwo\n        + longStringThree;\n</code></pre><ul>\n<li>高级别的换行优先。</li>\n</ul><pre><code>anObject.methodOne(parameterForMethodOne,\n        anObject.methodTwo(parameterForMethodTwo));\n\n/ conventional indentation\nint runningMiles = runningSpeedOne * runningTimeOne\n                 + runningSpeedTwo * runningTimeTwo;\n\n// confusing indentation                           \nint runningMiles = runningSpeedOne\n       * runningTimeOne + runningSpeedTwo\n       * runningTimeTwo;\n</code></pre><ul>\n<li>新的换行与上一行同级别表达式的开头对齐。</li>\n</ul><pre><code>anObject.methodOne(parameterOne,\n                   parameterTwo,\n                   parameterTwo);\n</code></pre><ul>\n<li>如果上述规则导致代码混乱或者代码太靠右，使用8个空格作为缩进（两个缩进单位）。</li>\n</ul><pre><code>anObject.methodOne(parameterForMethodOne,\n        anObject.methodTwo(parameterOneForMethodTwo,\n                parameterTwoForMethodTwo,\n                parameterThreeForMethodTwo));\n\n// bad indentation\nif ((conditionOne &amp;&amp; conditionTwo)\n    || (conditionThree &amp;&amp; conditionFour)) {\n    doSomething();  \n}\n\n// a better indentation, using 8 spaces for the indentation\nif ((conditionOne &amp;&amp; conditionTwo)\n        || (conditionThree &amp;&amp; conditionFour)) {\n    doSomething();  \n}\n</code></pre><h2>小结</h2><p>今天，我给你讲了整理代码的重要性以及一些方法。其实归根结底，整理代码有一个基本的思想，那就是把代码分割成大脑能够有效识别并记忆的信息块，通过合理地使用空行、空格和缩进，把这些信息块清晰地呈现出来。清晰的代码结构，可以帮助我们理顺编码的思路，提高编码的效率，减少编码的错误，提高代码的可读性，降低代码的维护成本。</p><p>总之，整理代码带给我们的好处，是很多的。</p><h2>一起来动手</h2><p>还记得我们上一节的练习题吗？上次我们改名字，这次我们来修改一下代码的编排。欢迎你把优化的代码公布在讨论区，也可以写下你的优化思路，我们一起来看看编排优化后的代码是不是更好阅读了呢？</p><pre><code>import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    /**\n     * Given an array of integers, return indices of the two numbers\n     * such that they add up to a specific target.\n     */\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(&quot;No two sum solution&quot;);\n    }\n}\n</code></pre><p>欢迎你把这篇文章分享给你的朋友或者同事，一起来探讨吧！</p><p></p>","neighbors":{"left":{"article_title":"05 | 经验总结：如何给你的代码起好名字？","id":77301},"right":{"article_title":"07 | 写好注释，真的是小菜一碟吗？","id":78086}},"comments":[{"had_liked":false,"id":74317,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1552188685,"is_pvip":false,"replies":[{"id":"27558","content":"先要区分类和方法。在面向对象的设计中，类表示的是一个对象。比如人，身份，铅笔，钱包等。一般地，名词或者可以看作名词的词，需要用类来表示。<br><br>方法，一般表示的是行为，也就是你说的执行一个功能。比如买菜，拖地，钓鱼，吃没吃过晚饭，有没有购房资格，都可以看作是行为或者判断。一般地，动词和形容词，或者类似的词，要用方法来表示。<br><br>通常地，一句话，有主语、谓语、宾语，主语和谓语一般表示为类，而谓语就是连接两个类的方法。 <br><br>举个例子，“授权的用户可以登录服务系统”这句话里的词语有“授权的&quot;, “用户”，“登录”，“服务系统”。那么，“用户”和“服务系统”就可以设计成类，而“授权的”是“用户”这个类的一个方法。“用户”和“服务系统”这两个类里，要分别有方法处理“登录”这个行为。<br><br>而Interface呢，一般用在高度抽象的场合。什么是高度抽象呢？ 比如说，我们知道资源的使用最后应该关闭，那么“关闭”就可以是一个高度抽象的方法。 不管是什么资源，什么类，都可以有一个“关闭”的方法。实现了“关闭”接口的类，都可以调用“关闭”这个方法。 这里面有一个小问题就是，房屋的门可以实现“关闭”，下水管道也可以实现“关闭。可是，房屋和下水管道之间，并没有可以继承的关系。这时候，Interface就可以突破class的继承限制，多个没有继承关系的类，都可以实现Interface。一个类，只能继承一个父类，但是可以实现多个Interface。 比如说，class MySubClass extends MyClass implements Closeablse, Comparable {&#47;&#47; snipped}。<br><br>不知道市面上还有没有&quot;面向对象软件构造&quot;这本书。太厚了，可以当作工具书查阅。 另外，多看看、琢磨琢磨Java标准类库的设计。这些API的设计，用“苛刻”这个词形容一点都不过分。这些API的背后，有着大量的权衡和考量，大部分都经得住了时间的考验。琢磨琢磨这些API的设计方式，也是一个学习设计的好办法。","user_name":"作者回复","comment_id":74317,"uid":"1111315","ip_address":"","utype":1,"ctime":1552423985,"user_name_real":"范学雷"}],"discussion_count":2,"race_medal":0,"score":"78861600013","product_id":100019601,"comment_content":"老师，像我这种没有项目经验，知道类、接口及其修饰符、方法，但不知道什么情况下使用：<br>1. 接口：是抽象方法的集合，一个实现接口的类，必须实现接口内所描述的所有方法。<br>         理解是当有些方法规定死的就要用接口，比如人的身份证，设置名字、地址、性别等<br><br>2. 类：类是一个模板，它描述一类对象的行为和状态。对象是类的实例化。<br>       访问控制修饰符：default、private、public、protected<br>       非访问修饰符：static、final、abstract（只能继承）、synchronized、transient<br>                     volatile<br>       继承、多态、<br>3.方法： 语句的集合，它们在一起执行一个功能。<br><br>这些基础概念都懂，但是就不知道怎么在项目中应用的，说懂好像又不懂，感觉基础不是很扎实一，我这种情况怎搞？有没有相关文章或书推荐一下，非常感谢？","like_count":19,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442527,"discussion_content":"先要区分类和方法。在面向对象的设计中，类表示的是一个对象。比如人，身份，铅笔，钱包等。一般地，名词或者可以看作名词的词，需要用类来表示。\n\n方法，一般表示的是行为，也就是你说的执行一个功能。比如买菜，拖地，钓鱼，吃没吃过晚饭，有没有购房资格，都可以看作是行为或者判断。一般地，动词和形容词，或者类似的词，要用方法来表示。\n\n通常地，一句话，有主语、谓语、宾语，主语和谓语一般表示为类，而谓语就是连接两个类的方法。 \n\n举个例子，“授权的用户可以登录服务系统”这句话里的词语有“授权的&amp;quot;, “用户”，“登录”，“服务系统”。那么，“用户”和“服务系统”就可以设计成类，而“授权的”是“用户”这个类的一个方法。“用户”和“服务系统”这两个类里，要分别有方法处理“登录”这个行为。\n\n而Interface呢，一般用在高度抽象的场合。什么是高度抽象呢？ 比如说，我们知道资源的使用最后应该关闭，那么“关闭”就可以是一个高度抽象的方法。 不管是什么资源，什么类，都可以有一个“关闭”的方法。实现了“关闭”接口的类，都可以调用“关闭”这个方法。 这里面有一个小问题就是，房屋的门可以实现“关闭”，下水管道也可以实现“关闭。可是，房屋和下水管道之间，并没有可以继承的关系。这时候，Interface就可以突破class的继承限制，多个没有继承关系的类，都可以实现Interface。一个类，只能继承一个父类，但是可以实现多个Interface。 比如说，class MySubClass extends MyClass implements Closeablse, Comparable {// snipped}。\n\n不知道市面上还有没有&amp;quot;面向对象软件构造&amp;quot;这本书。太厚了，可以当作工具书查阅。 另外，多看看、琢磨琢磨Java标准类库的设计。这些API的设计，用“苛刻”这个词形容一点都不过分。这些API的背后，有着大量的权衡和考量，大部分都经得住了时间的考验。琢磨琢磨这些API的设计方式，也是一个学习设计的好办法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1552423985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2437433,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V08zU7Y7mFiasQKa5GzeZGnNVibx3BAubXibevg1GuZoXu8AxpZHZpWzcSATKsviaDjnbAnxucPx4rCQ26wF1Ulmew/132","nickname":"赵欢","note":"","ucode":"DB9108320DF90B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361877,"discussion_content":"跨过这个坎，就海阔天空了，加油","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616771426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61359,"user_name":"Dream","can_delete":false,"product_type":"c1","uid":1071397,"ip_address":"","ucode":"D57D0E0B36D3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/25/0efc8b38.jpg","comment_is_top":false,"comment_ctime":1547686433,"is_pvip":false,"replies":[{"id":"21818","content":"嗯，我理解你的看法。这也是这个专栏不讨巧的地方。如果讲代码的话，我写的也轻松，你学的也带劲。其实，这也是我一直想和大家讨论的一个问题。<br><br>讲代码很重要。但是，看再多的代码，就这一节来说，我觉得都不如知道“大脑按块接受信息”这个行为模式重要。理解了基础的理论，所有的规范都不用死记硬背，你还可以创造新规范、改进旧规范。<br><br>有时候，我们对于一些规范很纠结，比如使用四个空格的缩进问题，比如if语句后要跟个括号的问题，也很难再实践中被遵守。为什么哪？ 说白了，就是不知道不这样做的危害。很多公司有一套一套的规则，就是执行不了。为啥呢？大家根本不知道规则对自己有什么好处。<br><br>编码规范这东西，随便网上找找，都是一大堆的规范。阿里的规范，Google的规范，Java的规范的规范，都可以找到，讲的比我们这个专栏要全要多。当我开始筹划这个专栏的时候，我给自己定下的目标，是让大家了解为什么；然后给一些例子，说明怎么办。理解了为什么，好多事情你自然就知道怎么办了，这样好多东西才可能成为你自己的东西，而不是我塞给你的东西。<br><br>很可惜的是，这样做的确存在很大的问题：理论成了我要硬塞给你的东西。所以，理论这一块，有人可能就有点抗拒。🤣又让我学没用的理论！<br><br>我们在看代码的时候，很少有人说，这是代码规范规定的，你必须这样改、那样改，按照规范改。这样说，可能没人愿意搭理我们。我们常说的是，这样看着不舒服，那样容易出问题，说的更多的是为什么。如果让我找一找为什么给出理论重要，也许更愉快地工作，算是一点吧。","user_name":"作者回复","comment_id":61359,"uid":"1111315","ip_address":"","utype":1,"ctime":1547689784,"user_name_real":"范学雷"}],"discussion_count":5,"race_medal":0,"score":"65972195873","product_id":100019601,"comment_content":"总感觉给出的一些理论，在现实开发有一些是没有必要的。如果每一篇就讲针对性很强的一段代码，不好吗，理论性的东西太多了，对实践转换率不强，","like_count":15,"discussions":[{"author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199867,"discussion_content":"附议一个，关于代码规范，how其实很多了，就想老师文中提到的，阿里的，google的，而且阿里的规范推广也很好，还有工具插件支持，但是why是不够的，个人觉得why才是这个专栏真的价值所在，值","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583634222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436847,"discussion_content":"嗯，我理解你的看法。这也是这个专栏不讨巧的地方。如果讲代码的话，我写的也轻松，你学的也带劲。其实，这也是我一直想和大家讨论的一个问题。\n\n讲代码很重要。但是，看再多的代码，就这一节来说，我觉得都不如知道“大脑按块接受信息”这个行为模式重要。理解了基础的理论，所有的规范都不用死记硬背，你还可以创造新规范、改进旧规范。\n\n有时候，我们对于一些规范很纠结，比如使用四个空格的缩进问题，比如if语句后要跟个括号的问题，也很难再实践中被遵守。为什么哪？ 说白了，就是不知道不这样做的危害。很多公司有一套一套的规则，就是执行不了。为啥呢？大家根本不知道规则对自己有什么好处。\n\n编码规范这东西，随便网上找找，都是一大堆的规范。阿里的规范，Google的规范，Java的规范的规范，都可以找到，讲的比我们这个专栏要全要多。当我开始筹划这个专栏的时候，我给自己定下的目标，是让大家了解为什么；然后给一些例子，说明怎么办。理解了为什么，好多事情你自然就知道怎么办了，这样好多东西才可能成为你自己的东西，而不是我塞给你的东西。\n\n很可惜的是，这样做的确存在很大的问题：理论成了我要硬塞给你的东西。所以，理论这一块，有人可能就有点抗拒。🤣又让我学没用的理论！\n\n我们在看代码的时候，很少有人说，这是代码规范规定的，你必须这样改、那样改，按照规范改。这样说，可能没人愿意搭理我们。我们常说的是，这样看着不舒服，那样容易出问题，说的更多的是为什么。如果让我找一找为什么给出理论重要，也许更愉快地工作，算是一点吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1547689784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039664,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dd/30/9d36ccaf.jpg","nickname":"桃源小盼","note":"","ucode":"3FA0819FD69FF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411896,"discussion_content":"支持老师，有机会的可以自己写写规范，可能更理解老师的课程规划。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636028363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390436,"discussion_content":"赞成老师观点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629825118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46553,"discussion_content":"赞成老师的观点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573180570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60957,"user_name":"草原上的奔跑","can_delete":false,"product_type":"c1","uid":1120348,"ip_address":"","ucode":"D69C617F767736","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/5c/1a58e8f6.jpg","comment_is_top":false,"comment_ctime":1547598626,"is_pvip":false,"replies":[{"id":"21723","content":"知道为什么乱，才好改。<br><br>这一篇的最后一节，我们会总结一些编码规范方面的一些心理学知识。到时候，你在回头看看这一篇的文章，可能会有新的收获。<br><br>编码规范比较杂，知道了背后的道理，运用的就自如些，方便些。","user_name":"作者回复","comment_id":60957,"uid":"1111315","ip_address":"","utype":1,"ctime":1547604312,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"40202304290","product_id":100019601,"comment_content":"今天这篇内容很实用，我现在也有整理代码的习惯，但是只是用的都比较零散，不像本篇中这么系统，而且范老师给出了理论依据。代码块，人体接受信息的方式。有实践方法，有理论支撑，以后整理代码也会更有目标性，同时，在要求别人整理代码时，也会有理有据。最后说一句，看到写的排版很乱的代码，很影响阅读代码的心情，以及理解代码的速度。","like_count":10,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436681,"discussion_content":"知道为什么乱，才好改。\n\n这一篇的最后一节，我们会总结一些编码规范方面的一些心理学知识。到时候，你在回头看看这一篇的文章，可能会有新的收获。\n\n编码规范比较杂，知道了背后的道理，运用的就自如些，方便些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547604312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62172,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1547967827,"is_pvip":false,"replies":[{"id":"22020","content":"这个办法不错。我是在纸上各种画。","user_name":"作者回复","comment_id":62172,"uid":"1111315","ip_address":"","utype":1,"ctime":1548031045,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"18727837011","product_id":100019601,"comment_content":"打卡<br>我有一个自己在实践且感觉不错的经验，分享一下:<br>举个栗子，我现在准备写一个控制器方法，我会先仔细想想要做一点什么？怎样的顺序？多想几次在脑袋里过一下，但是我不会深想到底怎么做，想好以后，我会先写注释（更准确说应该是提纲），以注释作为思路的引子同时也是一种代码实现思维的分块","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437124,"discussion_content":"这个办法不错。我是在纸上各种画。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548031045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61777,"user_name":"蓝色波浪","can_delete":false,"product_type":"c1","uid":1126716,"ip_address":"","ucode":"80977A27C7DCF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/3c/2433c7f5.jpg","comment_is_top":false,"comment_ctime":1547798026,"is_pvip":false,"replies":[{"id":"21931","content":"是的。","user_name":"作者回复","comment_id":61777,"uid":"1111315","ip_address":"","utype":1,"ctime":1547825036,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"18727667210","product_id":100019601,"comment_content":"&#47;&#47; conventional indentation<br>int runningMiles = runningSpeedOne * runningTimeOne +<br>                   runningSpeedTwo * runningTimeTwo;<br>这个是不是违背了在操作符前换行这个原则？","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436990,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547825036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61088,"user_name":"空知","can_delete":false,"product_type":"c1","uid":1013283,"ip_address":"","ucode":"C448E98238DD36","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","comment_is_top":false,"comment_ctime":1547618488,"is_pvip":false,"replies":[{"id":"21765","content":"嗯，我找找实际的代码。<br><br>就规范这一部分来说，你可以看看OpenJDK的String类的代码，或者其他基础类的代码，看看有什么可以改进的地方。 发现了问题，就给OpenJDK提交bug，提交补丁。<br><br>JDK用的太广泛了，每一个微小的修改，都会用到几十亿台设备上，都很有价值。还能成为OpenJDK成员😊","user_name":"作者回复","comment_id":61088,"uid":"1111315","ip_address":"","utype":1,"ctime":1547622582,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"18727487672","product_id":100019601,"comment_content":"老师可不可以多出些题目,可以结合实际练练手~~","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436738,"discussion_content":"嗯，我找找实际的代码。\n\n就规范这一部分来说，你可以看看OpenJDK的String类的代码，或者其他基础类的代码，看看有什么可以改进的地方。 发现了问题，就给OpenJDK提交bug，提交补丁。\n\nJDK用的太广泛了，每一个微小的修改，都会用到几十亿台设备上，都很有价值。还能成为OpenJDK成员😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547622582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62364,"user_name":"背着吉他的大漠狼","can_delete":false,"product_type":"c1","uid":1048796,"ip_address":"","ucode":"8ACC6661BAD396","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/dc/165a601f.jpg","comment_is_top":false,"comment_ctime":1548038835,"is_pvip":false,"replies":[{"id":"22035","content":"一般来说，一个大的逻辑可以分成更小的逻辑，并列的小逻辑或者下层的小逻辑。这些小逻辑，可以分割成代码块，或者包装成方法。所以，一个大块里，你还可以再分小块。<br><br>","user_name":"作者回复","comment_id":62364,"uid":"1111315","ip_address":"","utype":1,"ctime":1548041577,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"14432940723","product_id":100019601,"comment_content":"老师，有的时候，在一个代码块里面逻辑较多，远远超过了25行，这个时候我们是在这个块里写完，还是再分块，分块了又使得同一个目标不同的代码块了，希望老师能看到","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437184,"discussion_content":"一般来说，一个大的逻辑可以分成更小的逻辑，并列的小逻辑或者下层的小逻辑。这些小逻辑，可以分割成代码块，或者包装成方法。所以，一个大块里，你还可以再分小块。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548041577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60941,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1547597281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14432499169","product_id":100019601,"comment_content":"因为每一个编辑器的制表符显示出来不一样 有点编辑器 把制表符展示为4个空格 有的编辑器把制表符展示为8个空格 不统一 不同编辑器显示效果不同 使用4个空格就没有这个问题","like_count":3},{"had_liked":false,"id":96458,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1558429000,"is_pvip":false,"replies":[{"id":"34596","content":"“整理代码逻辑就能很好的分块”！ 这个总结很棒！","user_name":"作者回复","comment_id":96458,"uid":"1111315","ip_address":"","utype":1,"ctime":1558464706,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"10148363592","product_id":100019601,"comment_content":"留言里没有一条讨论习题的。。。<br><br>Line 2 后面习惯空两行，表示 import 和代码块之间的区分；<br>Line 8 后面空一行，表示注释的区分；<br>Line 10 后面空一行，表示初始化的区分；<br>Line 17 后面空一行，表示异常的区分；<br><br>空格、空行、缩进都是很好的视觉手段，加上 IDE 提供的收起和展开功能往往能让开发者很直观的看到代码的意图。整理代码逻辑就能很好的分块，我一般代码会分为“基础校检”，“初始化”，“核心代码逻辑” *n，“LBYL”的异常处理等","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450887,"discussion_content":"“整理代码逻辑就能很好的分块”！ 这个总结很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558464706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61103,"user_name":"lianlian","can_delete":false,"product_type":"c1","uid":1298468,"ip_address":"","ucode":"79B48B38259097","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOc0n02eNKflX5ey4TYl1NBfb0kicc20AgayEAGDYylalqHnLTeqMnaJ2iaZsLVmqEo0T0YViadU9Ig/132","comment_is_top":false,"comment_ctime":1547620974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10137555566","product_id":100019601,"comment_content":"哈哈哈，我发现我写得很规范","like_count":2},{"had_liked":false,"id":291924,"user_name":"Mr.yu","can_delete":false,"product_type":"c1","uid":1181786,"ip_address":"","ucode":"830BDDDA52B578","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5a/d1c64d21.jpg","comment_is_top":false,"comment_ctime":1620610076,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5915577372","product_id":100019601,"comment_content":"import java.util.HashMap;<br>import java.util.Map;<br><br>class Solution {<br><br><br>    &#47;**<br>     * Given an array of integers, return indices of the two numbers<br>     * such that they add up to a specific target.<br>     *&#47;<br>    public int[] twoSum(int[] nums, int target) {<br>        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br><br>        for (int i = 0; i &lt; nums.length; i++) {<br><br>            int complement = target - nums[i];<br>            if (map.containsKey(complement)) {<br>                return new int[] { map.get(complement), i };<br>            }else {<br><br>                map.put(nums[i], i);<br>            }<br>        }<br><br>        throw new IllegalArgumentException(&quot;No two sum solution&quot;);<br>    }<br>}","like_count":1},{"had_liked":false,"id":143942,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1571811124,"is_pvip":false,"replies":[{"id":"55603","content":"我通常使用第二种。第二种规范推荐的多些。","user_name":"作者回复","comment_id":143942,"uid":"1111315","ip_address":"","utype":1,"ctime":1571851529,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"5866778420","product_id":100019601,"comment_content":"1） <br>if (hiTail == null) {<br>    hiHead = e;<br>}<br>else {<br>    hiTail.next = e;<br>}<br>2） <br>if (hiTail == null) {<br>    hiHead = e;<br>} else {<br>    hiTail.next = e;<br>}<br><br>老师，这两种写法，哪种好呢","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471754,"discussion_content":"我通常使用第二种。第二种规范推荐的多些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571851529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111450,"user_name":"hshayq","can_delete":false,"product_type":"c1","uid":1237880,"ip_address":"","ucode":"F5435E14BCCD25","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/78/3321053c.jpg","comment_is_top":false,"comment_ctime":1562559645,"is_pvip":false,"replies":[{"id":"40638","content":"挺好的。我建议在括号后换行，便于阅读和搜索，看到括号就知道这是一个方法或者函数。每个参数一行，这也是容易理解、视觉效果好的编排方式。","user_name":"作者回复","comment_id":111450,"uid":"1111315","ip_address":"","utype":1,"ctime":1562596114,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"5857526941","product_id":100019601,"comment_content":"我写Python一般都是在括号后换行，比如<br>a = get(<br>    arg1,<br>    arg2,<br>    arg3<br>)<br>老师怎么看？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457360,"discussion_content":"挺好的。我建议在括号后换行，便于阅读和搜索，看到括号就知道这是一个方法或者函数。每个参数一行，这也是容易理解、视觉效果好的编排方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562596114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61027,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1547605492,"is_pvip":false,"replies":[{"id":"21740","content":"哈哈，这种形式，我一般使用一行。因为，换成两行不好看。<br><br>记一下笔记，我要记得把这一条修订进去！","user_name":"作者回复","comment_id":61027,"uid":"1111315","ip_address":"","utype":1,"ctime":1547607328,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":1,"score":"5842572788","product_id":100019601,"comment_content":"return new xxxModel（xxxservice.getxxx（））;<br>看样子不能这么写了，换两行喽","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436712,"discussion_content":"哈哈，这种形式，我一般使用一行。因为，换成两行不好看。\n\n记一下笔记，我要记得把这一条修订进去！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547607328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60917,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1547583264,"is_pvip":false,"replies":[{"id":"21709","content":"不谢，有收获就好。","user_name":"作者回复","comment_id":60917,"uid":"1111315","ip_address":"","utype":1,"ctime":1547600602,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"5842550560","product_id":100019601,"comment_content":"专栏看到现在，很有收获，规范了自己之前没有想到的很多地方，满满的干货，谢谢老师～","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436662,"discussion_content":"不谢，有收获就好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547600602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351574,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1657947281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657947281","product_id":100019601,"comment_content":"我感觉主要缺少是空行分割","like_count":0},{"had_liked":false,"id":325812,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1639147031,"is_pvip":false,"replies":[{"id":"118208","content":"Java也有第三方的自动格式化工具，也可以使用IDE。自动格式化，总是有不尽如人意的地方。","user_name":"作者回复","comment_id":325812,"uid":"1111315","ip_address":"","utype":1,"ctime":1639242402,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639147031","product_id":100019601,"comment_content":"如果Java能像Go一样统一格式就好了！按下保存，自动格式化","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537921,"discussion_content":"Java也有第三方的自动格式化工具，也可以使用IDE。自动格式化，总是有不尽如人意的地方。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639242402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321400,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636851497,"is_pvip":true,"replies":[{"id":"116786","content":"写多了， 就好了。","user_name":"作者回复","comment_id":321400,"uid":"1111315","ip_address":"","utype":1,"ctime":1636964019,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1636851497","product_id":100019601,"comment_content":"空格如果不习惯的话，使用ide的格式化就可以很好的处理。<br>代码总要回过头来整理，才能越来越好。总体感觉就是，一次性写好的可能性太小了。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530286,"discussion_content":"写多了， 就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636964019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296422,"user_name":"冯俊明","can_delete":false,"product_type":"c1","uid":2630218,"ip_address":"","ucode":"22F230D0B5C0EA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DIib9PmT6hkFXibalDGiabibUgZCCatBXd3EFjeWUZQLe0B32pTVQibMDVeAFPddLnttkTIytunlaqFVndicJFytuKnQ/132","comment_is_top":false,"comment_ctime":1622968621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622968621","product_id":100019601,"comment_content":"让规范成为习惯，增加代码的可读性和整洁性，使读者清晰易懂","like_count":0},{"had_liked":false,"id":278830,"user_name":"底层小学生","can_delete":false,"product_type":"c1","uid":2434549,"ip_address":"","ucode":"5EAAB052D8AC5C","user_header":"https://static001.geekbang.org/account/avatar/00/25/25/f5/be0e0c92.jpg","comment_is_top":false,"comment_ctime":1613373805,"is_pvip":false,"replies":[{"id":"101362","content":"到底是高优先级的先换行，还是低优先级的先换行，其实就是一个事情、一个格式的两种说法，每一种说法很流行，即使使用了看似是相反的词汇。这的确让人疑惑，前面也有同学有类似的疑问，你翻翻留言看看。出现这种词汇使用问题的原因，就在于你从哪里看换行，观察的地方不一样，就会有完全相反的词汇，即使是相同的代码。如果重新写的话，我可能就不再使用这样容易混淆的词汇了。我们要理解的关键，就是尽量保持高优先级的代码在同一行，这样容易识别，一眼就看出来计算顺序。<br><br>如果换行已经把计算优先级表达的足够清晰，没有括号也可以，加上括号当然也没有问题。","user_name":"作者回复","comment_id":278830,"uid":"1111315","ip_address":"","utype":1,"ctime":1613451943,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1613373805","product_id":100019601,"comment_content":"文章有个写错了吧：应该是低优先级的先换行，而且下面的代码既有乘号又有加号，是不是该加括号呢？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515521,"discussion_content":"到底是高优先级的先换行，还是低优先级的先换行，其实就是一个事情、一个格式的两种说法，每一种说法很流行，即使使用了看似是相反的词汇。这的确让人疑惑，前面也有同学有类似的疑问，你翻翻留言看看。出现这种词汇使用问题的原因，就在于你从哪里看换行，观察的地方不一样，就会有完全相反的词汇，即使是相同的代码。如果重新写的话，我可能就不再使用这样容易混淆的词汇了。我们要理解的关键，就是尽量保持高优先级的代码在同一行，这样容易识别，一眼就看出来计算顺序。\n\n如果换行已经把计算优先级表达的足够清晰，没有括号也可以，加上括号当然也没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613451943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143871,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1571801816,"is_pvip":false,"replies":[{"id":"55602","content":"收到;-)","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1571851416,"ip_address":"","comment_id":143871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571801816","product_id":100019601,"comment_content":"感觉Oracle JDK在代码规范做的很差，基础集合里面方法都是一大片一大片的，if或者for不加花括号等等，看的心累","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471733,"discussion_content":"收到;-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571851416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83055,"user_name":"浅吟且行的未来","can_delete":false,"product_type":"c1","uid":1012690,"ip_address":"","ucode":"029FE508EDDF70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/73/d2/1ed5d6bc.jpg","comment_is_top":false,"comment_ctime":1554385076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554385076","product_id":100019601,"comment_content":"赞老师，理论结合实际的方式很好！学到了原因，更容易理解规范！","like_count":0},{"had_liked":false,"id":73904,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1552028885,"is_pvip":false,"replies":[{"id":"27115","content":"一个大目标可以分解为小目标，大问题分解为小问题，这就是为什么会有缩进的逻辑。<br><br>方法独立的问题，我们后面还会谈到。 如果方法不独立，会有很多问题； 但是也做不到所有软件的所有方法都独立。<br><br>类一般是一个名词，表示一个对象；而方法一般可以使用动词，表示一种行为。从需求中找名词、动词（主语、谓语、宾语，形容词）这是一个常用的面向对象设计的办法。比如，一个授权的客户可以查询他的账户余额，客户、账户、余额，都是对象，可以考虑设计成类，而授权、查询，都是行为，可以考虑设计成方法。该怎么授权呢？ 又是一大堆的描述，这就是把大问题分解成小问题。<br><br>行为也可以设计成类，比如授权当作名词看，就可以是个类。这种情况，需要复用设计，分离出抽象行为的时候用的比较多。<br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1552115473,"ip_address":"","comment_id":73904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552028885","product_id":100019601,"comment_content":"一个代码块只能有一个目标，有点疑问：<br>1. 代码块是不是可以是类、接口、方法(函数)？<br><br>2. 如果类和方法的话，是不是可以理解类是实现大目标，方法实现小目标？<br>   我实现一个类，要使用几好个方法，方法一定要独立的吗？<br><br>3.方法和类的使用一直有点判断不了，在什么情况下使用类什么情况使用方法？<br>  我一个东西可以使用方法实现，也可以使用类实现，是不是能用方法就不用类？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442330,"discussion_content":"一个大目标可以分解为小目标，大问题分解为小问题，这就是为什么会有缩进的逻辑。\n\n方法独立的问题，我们后面还会谈到。 如果方法不独立，会有很多问题； 但是也做不到所有软件的所有方法都独立。\n\n类一般是一个名词，表示一个对象；而方法一般可以使用动词，表示一种行为。从需求中找名词、动词（主语、谓语、宾语，形容词）这是一个常用的面向对象设计的办法。比如，一个授权的客户可以查询他的账户余额，客户、账户、余额，都是对象，可以考虑设计成类，而授权、查询，都是行为，可以考虑设计成方法。该怎么授权呢？ 又是一大堆的描述，这就是把大问题分解成小问题。\n\n行为也可以设计成类，比如授权当作名词看，就可以是个类。这种情况，需要复用设计，分离出抽象行为的时候用的比较多。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552115473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68794,"user_name":"湮汐","can_delete":false,"product_type":"c1","uid":1106268,"ip_address":"","ucode":"FB6185621891E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/5c/86606d9c.jpg","comment_is_top":false,"comment_ctime":1550620183,"is_pvip":true,"replies":[{"id":"24476","content":"两种方式都很常见，“.”前面换行的稍微多一点。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550645628,"ip_address":"","comment_id":68794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550620183","product_id":100019601,"comment_content":"老师，有些时候，因为方法名太长比如aaa.bbb().ccc().ddd()这种结构，换行是应该在“.”前面还是后面？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439844,"discussion_content":"两种方式都很常见，“.”前面换行的稍微多一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550645628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68519,"user_name":"CGL","can_delete":false,"product_type":"c1","uid":1081507,"ip_address":"","ucode":"B3ED36D7AAAB15","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/a3/70e8f242.jpg","comment_is_top":false,"comment_ctime":1550537964,"is_pvip":false,"replies":[{"id":"24573","content":"IDEA看来很多人爱啊","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550684311,"ip_address":"","comment_id":68519,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1550537964","product_id":100019601,"comment_content":"Idea的ctrl shift enter了解一下","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439716,"discussion_content":"IDEA看来很多人爱啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550684311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547130,"discussion_content":"我用 Ctrl + Alt + L","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642555894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62897,"user_name":"黄朋飞","can_delete":false,"product_type":"c1","uid":1107062,"ip_address":"","ucode":"A1E7E0460A1BCC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/76/a97242c0.jpg","comment_is_top":false,"comment_ctime":1548204152,"is_pvip":false,"replies":[{"id":"22229","content":"如果有空间，双倍缩进或者缩进更多到和同级别的表达式对齐。只要多于双倍缩进，怎么好看怎么来。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548204664,"ip_address":"","comment_id":62897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548204152","product_id":100019601,"comment_content":"换行后应该和表达式的哪部分对齐呢？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437389,"discussion_content":"如果有空间，双倍缩进或者缩进更多到和同级别的表达式对齐。只要多于双倍缩进，怎么好看怎么来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548204664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62766,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1548151683,"is_pvip":false,"replies":[{"id":"22218","content":"是的，认为写好代码只有一种规范是不对的。所以，我们要理解规范要求背后的一些东西，这样就计较容易写出别人看的顺眼的代码。不过，如果一个项目有规范，还是要遵守的。审美偏好太难协调，每个人一套规范也很麻烦。<br><br>插件是个好东西。有些规范，也是我们思考的逻辑的延展。要是编写代码的时候，就主动使用规范，也能帮助我们写好代码。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548170216,"ip_address":"","comment_id":62766,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548151683","product_id":100019601,"comment_content":"感谢老师的讲解。规范的目的是提高代码可读性，便于交流。这些规范不是死板的，每个人可以根据自己的喜好，在不违背基本要求的前提下，选择自己认可的编码方式。不要过于纠结用哪一种方式。比如方法的{}花括弧，我就喜欢每个单独一行。另外可以使用一些代码格式化的插件，实现老师文中提到的一些基本编码格式。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437342,"discussion_content":"是的，认为写好代码只有一种规范是不对的。所以，我们要理解规范要求背后的一些东西，这样就计较容易写出别人看的顺眼的代码。不过，如果一个项目有规范，还是要遵守的。审美偏好太难协调，每个人一套规范也很麻烦。\n\n插件是个好东西。有些规范，也是我们思考的逻辑的延展。要是编写代码的时候，就主动使用规范，也能帮助我们写好代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548170216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61966,"user_name":"Kai","can_delete":false,"product_type":"c1","uid":1024088,"ip_address":"","ucode":"CD3FACF1803D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/58/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1547867756,"is_pvip":false,"replies":[{"id":"22019","content":"写好的代码可以自动化格式化一下。 还没写的代码，可以自己来格式化。这样编写代码的时候，心里的逻辑是清晰的，有利于编码速度，降低错误。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548030930,"ip_address":"","comment_id":61966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547867756","product_id":100019601,"comment_content":"可以使用一些lint工具自动格式化代码","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437052,"discussion_content":"写好的代码可以自动化格式化一下。 还没写的代码，可以自己来格式化。这样编写代码的时候，心里的逻辑是清晰的，有利于编码速度，降低错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548030930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61388,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1547688893,"is_pvip":false,"replies":[{"id":"21831","content":"规范有很多不同的审美偏好，上面你举得例子在实践中就很难协调。<br><br>以前，我个人喜欢第一种，我很清楚&#39;==&#39;和&#39;&amp;&amp;&#39;的运算符优先级，以及运算的顺序。但是，我的同事，有的就比较抗拒第一种，每次看到类似的代码，都会建议我改成第二种，要不然他们就会问我&#39;==&#39;和&#39;&amp;&amp;&#39;的运算顺序。现在，我有时候还是会使用第一种(难缠的惯性)，但是一旦我意识到可读性有了问题，我也愿意使用第二种。如果还没有养成习惯，总是使用第二种，可能是一个更简单的选择。<br><br>规范的一个其中好处，就是不让审美偏好的争执影响我们的工作。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547691881,"ip_address":"","comment_id":61388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547688893","product_id":100019601,"comment_content":"其实个人认为。划分代码块的话，主要还是参照可阅读性。<br>if（ a == b &amp;&amp; b == c）<br>和<br>if（（a == b） &amp;&amp; （b == c））<br>实际使用中我其实偏向于第一种。<br>比起第二种，反而第一种显得清爽直观一些。<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436859,"discussion_content":"规范有很多不同的审美偏好，上面你举得例子在实践中就很难协调。\n\n以前，我个人喜欢第一种，我很清楚&amp;#39;==&amp;#39;和&amp;#39;&amp;amp;&amp;amp;&amp;#39;的运算符优先级，以及运算的顺序。但是，我的同事，有的就比较抗拒第一种，每次看到类似的代码，都会建议我改成第二种，要不然他们就会问我&amp;#39;==&amp;#39;和&amp;#39;&amp;amp;&amp;amp;&amp;#39;的运算顺序。现在，我有时候还是会使用第一种(难缠的惯性)，但是一旦我意识到可读性有了问题，我也愿意使用第二种。如果还没有养成习惯，总是使用第二种，可能是一个更简单的选择。\n\n规范的一个其中好处，就是不让审美偏好的争执影响我们的工作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547691881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61361,"user_name":"orangleliu","can_delete":false,"product_type":"c1","uid":1010322,"ip_address":"","ucode":"E7D483823DF969","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/92/413f4633.jpg","comment_is_top":false,"comment_ctime":1547686463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547686463","product_id":100019601,"comment_content":"写写python也是极好的，pep8有个百分之80就猛做到如上了","like_count":0},{"had_liked":false,"id":61227,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1547641482,"is_pvip":true,"replies":[{"id":"21827","content":"写代码的时候，就要整理好，要不然写的过程容易出错。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547690683,"ip_address":"","comment_id":61227,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547641482","product_id":100019601,"comment_content":"整理代码，IDEA提供的快捷键整理挺方便的","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436792,"discussion_content":"写代码的时候，就要整理好，要不然写的过程容易出错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547690683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61151,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1547627960,"is_pvip":false,"replies":[{"id":"21828","content":"for语句后，可以没有空行，我们可以把整个for循环，看作一个大块。map.put前，可以加一个空行，看起来上面的语句是检查有没有找到，这一句，是处理没找到的状况。找到和没找到，可以看作两个小的块。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547691013,"ip_address":"","comment_id":61151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547627960","product_id":100019601,"comment_content":"import java.util.HashMap;<br>import java.util.Map;<br><br>class Solution {<br><br>\t&#47;**<br>\t * Given an array of integers, return indices of the two numbers such that<br>\t * they add up to a specific target.<br>\t *&#47;<br>\tpublic int[] twoSum(int[] nums, int target) {<br><br>\t\tMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br><br>\t\tfor (int i = 0; i &lt; nums.length; i++) {<br><br>\t\t\tint complement = target - nums[i];<br>\t\t\tif (map.containsKey(complement)) {<br>\t\t\t\treturn new int[] { map.get(complement), i };<br>\t\t\t}<br>\t\t\tmap.put(nums[i], i);<br><br>\t\t}<br><br>\t\tthrow new IllegalArgumentException(&quot;No two sum solution&quot;);<br>\t}<br>}<br><br>变量定义一行，循环一行，留白。处理逻辑紧凑一起，代码分块思想。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436762,"discussion_content":"for语句后，可以没有空行，我们可以把整个for循环，看作一个大块。map.put前，可以加一个空行，看起来上面的语句是检查有没有找到，这一句，是处理没找到的状况。找到和没找到，可以看作两个小的块。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547691013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61042,"user_name":"秦凯","can_delete":false,"product_type":"c1","uid":1069307,"ip_address":"","ucode":"523228E55CE480","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/fb/872e2cf1.jpg","comment_is_top":false,"comment_ctime":1547608028,"is_pvip":false,"replies":[{"id":"21745","content":"第六行，换行的时候，如果一行不是太长，或者区隔不够明显，我们通常使用双倍缩进。“基本的换行原则”这一小节的最后有讲这个问题。<br><br>第11到14行，对于枚举类型，有两种习惯。一种是小括号紧贴这标识符，不追求对齐，这是最常用的格式。另一种是要对其小括号以及每个参数，这是为了方便检查枚举定义是不是有问题，枚举个数多时，这个格式方便些。<br><br>按照最长的变量名的对齐，最长的变量名后面紧跟着小括号，是一种更常见的方式。你这个方式更好些。<br><br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547611678,"ip_address":"","comment_id":61042,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547608028","product_id":100019601,"comment_content":"关于两个空格的缩进示例代码有两个疑问的地方，分别是第6行和13行的缩进问题，特别是13行枚举后面的空格保留是否应该是最长的变量名后跟约定的缩进长度？感谢老师~<br><br>    ......<br>    System.out.println(<br>      &#47;&#47; 这里应该后面是两个空格，而不是四个空格？<br>        &quot;German say hello with &quot; + Greeting.GERMAN.getGreeting());<br>    }<br><br>  private static enum Greeting {<br>    ENGLISH     (&quot;English&quot;,  &quot;Hello&quot;),<br>    SPANISH     (&quot;Spanish&quot;,  &quot;Hola&quot;),<br>    GERMAN      (&quot;German&quot;,   &quot;Hallo&quot;),<br>    &#47;&#47; 这里应该后面是两个空格，而不是四个空格？<br>    MANDARIN    (&quot;Mandarin&quot;, &quot;Ni Hao&quot;);<br>    ......<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436720,"discussion_content":"第六行，换行的时候，如果一行不是太长，或者区隔不够明显，我们通常使用双倍缩进。“基本的换行原则”这一小节的最后有讲这个问题。\n\n第11到14行，对于枚举类型，有两种习惯。一种是小括号紧贴这标识符，不追求对齐，这是最常用的格式。另一种是要对其小括号以及每个参数，这是为了方便检查枚举定义是不是有问题，枚举个数多时，这个格式方便些。\n\n按照最长的变量名的对齐，最长的变量名后面紧跟着小括号，是一种更常见的方式。你这个方式更好些。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547611678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60969,"user_name":"🔗","can_delete":false,"product_type":"c1","uid":1367447,"ip_address":"","ucode":"2C543DF712A29A","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/97/ca05d568.jpg","comment_is_top":false,"comment_ctime":1547599773,"is_pvip":false,"replies":[{"id":"21736","content":"这个换行的目的，就是尽量把同一优先级的表达式保留在同一行，和低级别的区别开来。比如如果需要换行 a*b + c*d，应该把c*d这个表达式换到下一行。<br><br>我选择的词汇“高级别的换行优先”，的确有点让人迷惑。我再想想能不能表述的更清晰些。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547606955,"ip_address":"","comment_id":60969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547599773","product_id":100019601,"comment_content":"老师，高级别的换行优先，这里我有疑问。<br><br>runningMiles = runningSpeedOne * runningTimeOne<br>+ runningSpeedTwo * runningTimeTwo;<br>低价格的换行不是更容易理解吗？把同一优先级的表达式分开会不会误导读者？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436687,"discussion_content":"这个换行的目的，就是尽量把同一优先级的表达式保留在同一行，和低级别的区别开来。比如如果需要换行 a*b + c*d，应该把c*d这个表达式换到下一行。\n\n我选择的词汇“高级别的换行优先”，的确有点让人迷惑。我再想想能不能表述的更清晰些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547606955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60930,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1547595618,"is_pvip":true,"replies":[{"id":"21722","content":"我建议换行，加号放到下一行，这是传统的做法。<br><br>我自己使用惯了加号放在行末，☹惰性真的比较大。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547603947,"ip_address":"","comment_id":60930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547595618","product_id":100019601,"comment_content":"高级别优先换行，第二个示例，加号不用换行放在第二行吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436670,"discussion_content":"我建议换行，加号放到下一行，这是传统的做法。\n\n我自己使用惯了加号放在行末，☹惰性真的比较大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547603947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60922,"user_name":"云＆龙","can_delete":false,"product_type":"c1","uid":1363885,"ip_address":"","ucode":"F2F8CBF78AA594","user_header":"https://static001.geekbang.org/account/avatar/00/14/cf/ad/c639270f.jpg","comment_is_top":false,"comment_ctime":1547593736,"is_pvip":false,"replies":[{"id":"21708","content":"制表符缺省的是八个空格位，太长。 而且，不同的人，会使用不同的空格位，比如2个，四个，六个。这样，实际的显示就依赖于制表符的设置。只要设置不一样，显示就比较混乱，所以OpenJDK强制使用四个空格。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1547600575,"ip_address":"","comment_id":60922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547593736","product_id":100019601,"comment_content":"老师，您好，为什么openjdk要使用四个空格，不能使用制表符？？他们有什么区别吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436664,"discussion_content":"制表符缺省的是八个空格位，太长。 而且，不同的人，会使用不同的空格位，比如2个，四个，六个。这样，实际的显示就依赖于制表符的设置。只要设置不一样，显示就比较混乱，所以OpenJDK强制使用四个空格。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547600575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}