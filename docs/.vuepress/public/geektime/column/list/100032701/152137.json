{"id":152137,"title":"31丨性能篇答疑：epoll源码深度剖析","content":"<p>你好，我是盛延敏，今天是网络编程实战性能篇的答疑模块，欢迎回来。</p><p>在性能篇中，我主要围绕C10K问题进行了深入剖析，最后引出了事件分发机制和多线程。可以说，基于epoll的事件分发能力，是Linux下高性能网络编程的不二之选。如果你觉得还不过瘾，期望有更深刻的认识和理解，那么在性能篇的答疑中，我就带你一起梳理一下epoll的源代码，从中我们一定可以有更多的发现和领悟。</p><p>今天的代码有些多，建议你配合文稿收听音频。</p><h2>基本数据结构</h2><p>在开始研究源代码之前，我们先看一下epoll中使用的数据结构，分别是eventpoll、epitem和eppoll_entry。</p><p>我们先看一下eventpoll这个数据结构，这个数据结构是我们在调用epoll_create之后内核侧创建的一个句柄，表示了一个epoll实例。后续如果我们再调用epoll_ctl和epoll_wait等，都是对这个eventpoll数据进行操作，这部分数据会被保存在epoll_create创建的匿名文件file的private_data字段中。</p><pre><code>/*\n * This structure is stored inside the &quot;private_data&quot; member of the file\n * structure and represents the main data structure for the eventpoll\n * interface.\n */\nstruct eventpoll {\n    /* Protect the access to this structure */\n    spinlock_t lock;\n\n    /*\n     * This mutex is used to ensure that files are not removed\n     * while epoll is using them. This is held during the event\n     * collection loop, the file cleanup path, the epoll file exit\n     * code and the ctl operations.\n     */\n    struct mutex mtx;\n\n    /* Wait queue used by sys_epoll_wait() */\n    //这个队列里存放的是执行epoll_wait从而等待的进程队列\n    wait_queue_head_t wq;\n\n    /* Wait queue used by file-&gt;poll() */\n    //这个队列里存放的是该eventloop作为poll对象的一个实例，加入到等待的队列\n    //这是因为eventpoll本身也是一个file, 所以也会有poll操作\n    wait_queue_head_t poll_wait;\n\n    /* List of ready file descriptors */\n    //这里存放的是事件就绪的fd列表，链表的每个元素是下面的epitem\n    struct list_head rdllist;\n\n    /* RB tree root used to store monitored fd structs */\n    //这是用来快速查找fd的红黑树\n    struct rb_root_cached rbr;\n\n    /*\n     * This is a single linked list that chains all the &quot;struct epitem&quot; that\n     * happened while transferring ready events to userspace w/out\n     * holding -&gt;lock.\n     */\n    struct epitem *ovflist;\n\n    /* wakeup_source used when ep_scan_ready_list is running */\n    struct wakeup_source *ws;\n\n    /* The user that created the eventpoll descriptor */\n    struct user_struct *user;\n\n    //这是eventloop对应的匿名文件，充分体现了Linux下一切皆文件的思想\n    struct file *file;\n\n    /* used to optimize loop detection check */\n    int visited;\n    struct list_head visited_list_link;\n\n#ifdef CONFIG_NET_RX_BUSY_POLL\n    /* used to track busy poll napi_id */\n    unsigned int napi_id;\n#endif\n};\n</code></pre><p>你能看到在代码中我提到了epitem，这个epitem结构是干什么用的呢？</p><p>每当我们调用epoll_ctl增加一个fd时，内核就会为我们创建出一个epitem实例，并且把这个实例作为红黑树的一个子节点，增加到eventpoll结构体中的红黑树中，对应的字段是rbr。这之后，查找每一个fd上是否有事件发生都是通过红黑树上的epitem来操作。</p><!-- [[[read_end]]] --><pre><code>/*\n * Each file descriptor added to the eventpoll interface will\n * have an entry of this type linked to the &quot;rbr&quot; RB tree.\n * Avoid increasing the size of this struct, there can be many thousands\n * of these on a server and we do not want this to take another cache line.\n */\nstruct epitem {\n    union {\n        /* RB tree node links this structure to the eventpoll RB tree */\n        struct rb_node rbn;\n        /* Used to free the struct epitem */\n        struct rcu_head rcu;\n    };\n\n    /* List header used to link this structure to the eventpoll ready list */\n    //将这个epitem连接到eventpoll 里面的rdllist的list指针\n    struct list_head rdllink;\n\n    /*\n     * Works together &quot;struct eventpoll&quot;-&gt;ovflist in keeping the\n     * single linked chain of items.\n     */\n    struct epitem *next;\n\n    /* The file descriptor information this item refers to */\n    //epoll监听的fd\n    struct epoll_filefd ffd;\n\n    /* Number of active wait queue attached to poll operations */\n    //一个文件可以被多个epoll实例所监听，这里就记录了当前文件被监听的次数\n    int nwait;\n\n    /* List containing poll wait queues */\n    struct list_head pwqlist;\n\n    /* The &quot;container&quot; of this item */\n    //当前epollitem所属的eventpoll\n    struct eventpoll *ep;\n\n    /* List header used to link this item to the &quot;struct file&quot; items list */\n    struct list_head fllink;\n\n    /* wakeup_source used when EPOLLWAKEUP is set */\n    struct wakeup_source __rcu *ws;\n\n    /* The structure that describe the interested events and the source fd */\n    struct epoll_event event;\n};\n</code></pre><p>每次当一个fd关联到一个epoll实例，就会有一个eppoll_entry产生。eppoll_entry的结构如下：</p><pre><code>/* Wait structure used by the poll hooks */\nstruct eppoll_entry {\n    /* List header used to link this structure to the &quot;struct epitem&quot; */\n    struct list_head llink;\n\n    /* The &quot;base&quot; pointer is set to the container &quot;struct epitem&quot; */\n    struct epitem *base;\n\n    /*\n     * Wait queue item that will be linked to the target file wait\n     * queue head.\n     */\n    wait_queue_entry_t wait;\n\n    /* The wait queue head that linked the &quot;wait&quot; wait queue item */\n    wait_queue_head_t *whead;\n};\n</code></pre><h2>epoll_create</h2><p>我们在使用epoll的时候，首先会调用epoll_create来创建一个epoll实例。这个函数是如何工作的呢?</p><p>首先，epoll_create会对传入的flags参数做简单的验证。</p><pre><code>/* Check the EPOLL_* constant for consistency.  */\nBUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);\n\nif (flags &amp; ~EPOLL_CLOEXEC)\n    return -EINVAL;\n/*\n</code></pre><p>接下来，内核申请分配eventpoll需要的内存空间。</p><pre><code>/* Create the internal data structure (&quot;struct eventpoll&quot;).\n*/\nerror = ep_alloc(&amp;ep);\nif (error &lt; 0)\n  return error;\n</code></pre><p>在接下来，epoll_create为epoll实例分配了匿名文件和文件描述字，其中fd是文件描述字，file是一个匿名文件。这里充分体现了UNIX下一切都是文件的思想。注意，eventpoll的实例会保存一份匿名文件的引用，通过调用fd_install函数将匿名文件和文件描述字完成了绑定。</p><p>这里还有一个特别需要注意的地方，在调用anon_inode_get_file的时候，epoll_create将eventpoll作为匿名文件file的private_data保存了起来，这样，在之后通过epoll实例的文件描述字来查找时，就可以快速地定位到eventpoll对象了。</p><p>最后，这个文件描述字作为epoll的文件句柄，被返回给epoll_create的调用者。</p><pre><code>/*\n * Creates all the items needed to setup an eventpoll file. That is,\n * a file structure and a free file descriptor.\n */\nfd = get_unused_fd_flags(O_RDWR | (flags &amp; O_CLOEXEC));\nif (fd &lt; 0) {\n    error = fd;\n    goto out_free_ep;\n}\nfile = anon_inode_getfile(&quot;[eventpoll]&quot;, &amp;eventpoll_fops, ep,\n             O_RDWR | (flags &amp; O_CLOEXEC));\nif (IS_ERR(file)) {\n    error = PTR_ERR(file);\n    goto out_free_fd;\n}\nep-&gt;file = file;\nfd_install(fd, file);\nreturn fd;\n</code></pre><h2>epoll_ctl</h2><p>接下来，我们看一下一个套接字是如何被添加到epoll实例中的。这就要解析一下epoll_ctl函数实现了。</p><h3>查找epoll实例</h3><p>首先，epoll_ctl函数通过epoll实例句柄来获得对应的匿名文件，这一点很好理解，UNIX下一切都是文件，epoll的实例也是一个匿名文件。</p><pre><code>//获得epoll实例对应的匿名文件\nf = fdget(epfd);\nif (!f.file)\n    goto error_return;\n</code></pre><p>接下来，获得添加的套接字对应的文件，这里tf表示的是target file，即待处理的目标文件。</p><pre><code>/* Get the &quot;struct file *&quot; for the target file */\n//获得真正的文件，如监听套接字、读写套接字\ntf = fdget(fd);\nif (!tf.file)\n    goto error_fput;\n</code></pre><p>再接下来，进行了一系列的数据验证，以保证用户传入的参数是合法的，比如epfd真的是一个epoll实例句柄，而不是一个普通文件描述符。</p><pre><code>/* The target file descriptor must support poll */\n//如果不支持poll，那么该文件描述字是无效的\nerror = -EPERM;\nif (!tf.file-&gt;f_op-&gt;poll)\n    goto error_tgt_fput;\n...\n</code></pre><p>如果获得了一个真正的epoll实例句柄，就可以通过private_data获取之前创建的eventpoll实例了。</p><pre><code>/*\n * At this point it is safe to assume that the &quot;private_data&quot; contains\n * our own data structure.\n */\nep = f.file-&gt;private_data;\n</code></pre><h3>红黑树查找</h3><p>接下来epoll_ctl通过目标文件和对应描述字，在红黑树中查找是否存在该套接字，这也是epoll为什么高效的地方。红黑树（RB-tree）是一种常见的数据结构，这里eventpoll通过红黑树跟踪了当前监听的所有文件描述字，而这棵树的根就保存在eventpoll数据结构中。</p><pre><code>/* RB tree root used to store monitored fd structs */\nstruct rb_root_cached rbr;\n</code></pre><p>对于每个被监听的文件描述字，都有一个对应的epitem与之对应，epitem作为红黑树中的节点就保存在红黑树中。</p><pre><code>/*\n * Try to lookup the file inside our RB tree, Since we grabbed &quot;mtx&quot;\n * above, we can be sure to be able to use the item looked up by\n * ep_find() till we release the mutex.\n */\nepi = ep_find(ep, tf.file, fd);\n</code></pre><p>红黑树是一棵二叉树，作为二叉树上的节点，epitem必须提供比较能力，以便可以按大小顺序构建出一棵有序的二叉树。其排序能力是依靠epoll_filefd结构体来完成的，epoll_filefd可以简单理解为需要监听的文件描述字，它对应到二叉树上的节点。</p><p>可以看到这个还是比较好理解的，按照文件的地址大小排序。如果两个相同，就按照文件文件描述字来排序。</p><pre><code>struct epoll_filefd {\n\tstruct file *file; // pointer to the target file struct corresponding to the fd\n\tint fd; // target file descriptor number\n} __packed;\n\n/* Compare RB tree keys */\nstatic inline int ep_cmp_ffd(struct epoll_filefd *p1,\n                            struct epoll_filefd *p2)\n{\n\treturn (p1-&gt;file &gt; p2-&gt;file ? +1:\n\t\t   (p1-&gt;file &lt; p2-&gt;file ? -1 : p1-&gt;fd - p2-&gt;fd));\n}\n</code></pre><p>在进行完红黑树查找之后，如果发现是一个ADD操作，并且在树中没有找到对应的二叉树节点，就会调用ep_insert进行二叉树节点的增加。</p><pre><code>case EPOLL_CTL_ADD:\n    if (!epi) {\n        epds.events |= POLLERR | POLLHUP;\n        error = ep_insert(ep, &amp;epds, tf.file, fd, full_check);\n    } else\n        error = -EEXIST;\n    if (full_check)\n        clear_tfile_check_list();\n    break;\n</code></pre><h3>ep_insert</h3><p>ep_insert首先判断当前监控的文件值是否超过了/proc/sys/fs/epoll/max_user_watches的预设最大值，如果超过了则直接返回错误。</p><pre><code>user_watches = atomic_long_read(&amp;ep-&gt;user-&gt;epoll_watches);\nif (unlikely(user_watches &gt;= max_user_watches))\n    return -ENOSPC;\n</code></pre><p>接下来是分配资源和初始化动作。</p><pre><code>if (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))\n        return -ENOMEM;\n\n    /* Item initialization follow here ... */\n    INIT_LIST_HEAD(&amp;epi-&gt;rdllink);\n    INIT_LIST_HEAD(&amp;epi-&gt;fllink);\n    INIT_LIST_HEAD(&amp;epi-&gt;pwqlist);\n    epi-&gt;ep = ep;\n    ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);\n    epi-&gt;event = *event;\n    epi-&gt;nwait = 0;\n    epi-&gt;next = EP_UNACTIVE_PTR;\n</code></pre><p>再接下来的事情非常重要，ep_insert会为加入的每个文件描述字设置回调函数。这个回调函数是通过函数ep_ptable_queue_proc来进行设置的。这个回调函数是干什么的呢？其实，对应的文件描述字上如果有事件发生，就会调用这个函数，比如套接字缓冲区有数据了，就会回调这个函数。这个函数就是ep_poll_callback。这里你会发现，原来内核设计也是充满了事件回调的原理。</p><pre><code>/*\n * This is the callback that is used to add our wait queue to the\n * target file wakeup lists.\n */\nstatic void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,poll_table *pt)\n{\n    struct epitem *epi = ep_item_from_epqueue(pt);\n    struct eppoll_entry *pwq;\n\n    if (epi&gt;nwait &gt;= 0 &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) {\n        init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);\n        pwq-&gt;whead = whead;\n        pwq-&gt;base = epi;\n        if (epi-&gt;event.events &amp; EPOLLEXCLUSIVE)\n            add_wait_queue_exclusive(whead, &amp;pwq-&gt;wait);\n        else\n            add_wait_queue(whead, &amp;pwq-&gt;wait);\n        list_add_tail(&amp;pwq-&gt;llink, &amp;epi-&gt;pwqlist);\n        epi-&gt;nwait++;\n    } else {\n        /* We have to signal that an error occurred */\n        epi-&gt;nwait = -1;\n    }\n}\n</code></pre><h3>ep_poll_callback</h3><p>ep_poll_callback函数的作用非常重要，它将内核事件真正地和epoll对象联系了起来。它又是怎么实现的呢？</p><p>首先，通过这个文件的wait_queue_entry_t对象找到对应的epitem对象，因为eppoll_entry对象里保存了wait_queue_entry_t，根据wait_queue_entry_t这个对象的地址就可以简单计算出eppoll_entry对象的地址，从而可以获得epitem对象的地址。这部分工作在ep_item_from_wait函数中完成。一旦获得epitem对象，就可以寻迹找到eventpoll实例。</p><pre><code>/*\n * This is the callback that is passed to the wait queue wakeup\n * mechanism. It is called by the stored file descriptors when they\n * have events to report.\n */\nstatic int ep_poll_callback(wait_queue_entry_t *wait, unsigned mode, int sync, void *key)\n{\n    int pwake = 0;\n    unsigned long flags;\n    struct epitem *epi = ep_item_from_wait(wait);\n    struct eventpoll *ep = epi-&gt;ep;\n</code></pre><p>接下来，进行一个加锁操作。</p><pre><code>spin_lock_irqsave(&amp;ep-&gt;lock, flags);\n</code></pre><p>下面对发生的事件进行过滤，为什么需要过滤呢？为了性能考虑，ep_insert向对应监控文件注册的是所有的事件，而实际用户侧订阅的事件未必和内核事件对应。比如，用户向内核订阅了一个套接字的可读事件，在某个时刻套接字的可写事件发生时，并不需要向用户空间传递这个事件。</p><pre><code>/*\n * Check the events coming with the callback. At this stage, not\n * every device reports the events in the &quot;key&quot; parameter of the\n * callback. We need to be able to handle both cases here, hence the\n * test for &quot;key&quot; != NULL before the event match test.\n */\nif (key &amp;&amp; !((unsigned long) key &amp; epi-&gt;event.events))\n    goto out_unlock;\n</code></pre><p>接下来，判断是否需要把该事件传递给用户空间。</p><pre><code>if (unlikely(ep-&gt;ovflist != EP_UNACTIVE_PTR)) {\n  if (epi-&gt;next == EP_UNACTIVE_PTR) {\n      epi-&gt;next = ep-&gt;ovflist;\n      ep-&gt;ovflist = epi;\n      if (epi-&gt;ws) {\n          /*\n           * Activate ep-&gt;ws since epi-&gt;ws may get\n           * deactivated at any time.\n           */\n          __pm_stay_awake(ep-&gt;ws);\n      }\n  }\n  goto out_unlock;\n}\n</code></pre><p>如果需要，而且该事件对应的event_item不在eventpoll对应的已完成队列中，就把它放入该队列，以便将该事件传递给用户空间。</p><pre><code>/* If this file is already in the ready list we exit soon */\nif (!ep_is_linked(&amp;epi-&gt;rdllink)) {\n    list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);\n    ep_pm_stay_awake_rcu(epi);\n}\n</code></pre><p>我们知道，当我们调用epoll_wait的时候，调用进程被挂起，在内核看来调用进程陷入休眠。如果该epoll实例上对应描述字有事件发生，这个休眠进程应该被唤醒，以便及时处理事件。下面的代码就是起这个作用的，wake_up_locked函数唤醒当前eventpoll上的等待进程。</p><pre><code>/*\n * Wake up ( if active ) both the eventpoll wait list and the -&gt;poll()\n * wait list.\n */\nif (waitqueue_active(&amp;ep-&gt;wq)) {\n    if ((epi-&gt;event.events &amp; EPOLLEXCLUSIVE) &amp;&amp;\n                !((unsigned long)key &amp; POLLFREE)) {\n        switch ((unsigned long)key &amp; EPOLLINOUT_BITS) {\n        case POLLIN:\n            if (epi-&gt;event.events &amp; POLLIN)\n                ewake = 1;\n            break;\n        case POLLOUT:\n            if (epi-&gt;event.events &amp; POLLOUT)\n                ewake = 1;\n            break;\n        case 0:\n            ewake = 1;\n            break;\n        }\n    }\n    wake_up_locked(&amp;ep-&gt;wq);\n}\n</code></pre><h3>查找epoll实例</h3><p>epoll_wait函数首先进行一系列的检查，例如传入的maxevents应该大于0。</p><pre><code>/* The maximum number of event must be greater than zero */\nif (maxevents &lt;= 0 || maxevents &gt; EP_MAX_EVENTS)\n    return -EINVAL;\n\n/* Verify that the area passed by the user is writeable */\nif (!access_ok(VERIFY_WRITE, events, maxevents * sizeof(struct epoll_event)))\n    return -EFAULT;\n</code></pre><p>和前面介绍的epoll_ctl一样，通过epoll实例找到对应的匿名文件和描述字，并且进行检查和验证。</p><pre><code>/* Get the &quot;struct file *&quot; for the eventpoll file */\nf = fdget(epfd);\nif (!f.file)\n    return -EBADF;\n\n/*\n * We have to check that the file structure underneath the fd\n * the user passed to us _is_ an eventpoll file.\n */\nerror = -EINVAL;\nif (!is_file_epoll(f.file))\n    goto error_fput;\n</code></pre><p>还是通过读取epoll实例对应匿名文件的private_data得到eventpoll实例。</p><pre><code>/*\n * At this point it is safe to assume that the &quot;private_data&quot; contains\n * our own data structure.\n */\nep = f.file-&gt;private_data;\n</code></pre><p>接下来调用ep_poll来完成对应的事件收集并传递到用户空间。</p><pre><code>/* Time to fish for events ... */\nerror = ep_poll(ep, events, maxevents, timeout);\n</code></pre><h3>ep_poll</h3><p>还记得<a href=\"https://time.geekbang.org/column/article/143245\">第23讲</a>里介绍epoll函数的时候，对应的timeout值可以是大于0，等于0和小于0么？这里ep_poll就分别对timeout不同值的场景进行了处理。如果大于0则产生了一个超时时间，如果等于0则立即检查是否有事件发生。</p><pre><code>*/\nstatic int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,int maxevents, long timeout)\n{\nint res = 0, eavail, timed_out = 0;\nunsigned long flags;\nu64 slack = 0;\nwait_queue_entry_t wait;\nktime_t expires, *to = NULL;\n\nif (timeout &gt; 0) {\n    struct timespec64 end_time = ep_set_mstimeout(timeout);\n    slack = select_estimate_accuracy(&amp;end_time);\n    to = &amp;expires;\n    *to = timespec64_to_ktime(end_time);\n} else if (timeout == 0) {\n    /*\n     * Avoid the unnecessary trip to the wait queue loop, if the\n     * caller specified a non blocking operation.\n     */\n    timed_out = 1;\n    spin_lock_irqsave(&amp;ep-&gt;lock, flags);\n    goto check_events;\n}\n</code></pre><p>接下来尝试获得eventpoll上的锁：</p><pre><code>spin_lock_irqsave(&amp;ep-&gt;lock, flags);\n</code></pre><p>获得这把锁之后，检查当前是否有事件发生，如果没有，就把当前进程加入到eventpoll的等待队列wq中，这样做的目的是当事件发生时，ep_poll_callback函数可以把该等待进程唤醒。</p><pre><code>if (!ep_events_available(ep)) {\n    /*\n     * Busy poll timed out.  Drop NAPI ID for now, we can add\n     * it back in when we have moved a socket with a valid NAPI\n     * ID onto the ready list.\n     */\n    ep_reset_busy_poll_napi_id(ep);\n\n    /*\n     * We don't have any available event to return to the caller.\n     * We need to sleep here, and we will be wake up by\n     * ep_poll_callback() when events will become available.\n     */\n    init_waitqueue_entry(&amp;wait, current);\n    __add_wait_queue_exclusive(&amp;ep-&gt;wq, &amp;wait);\n</code></pre><p>紧接着是一个无限循环, 这个循环中通过调用schedule_hrtimeout_range，将当前进程陷入休眠，CPU时间被调度器调度给其他进程使用，当然，当前进程可能会被唤醒，唤醒的条件包括有以下四种：</p><ol>\n<li>当前进程超时；</li>\n<li>当前进程收到一个signal信号；</li>\n<li>某个描述字上有事件发生；</li>\n<li>当前进程被CPU重新调度，进入for循环重新判断，如果没有满足前三个条件，就又重新进入休眠。</li>\n</ol><p>对应的1、2、3都会通过break跳出循环，直接返回。</p><pre><code>//这个循环里，当前进程可能会被唤醒，唤醒的途径包括\n//1.当前进程超时\n//2.当前进行收到一个signal信号\n//3.某个描述字上有事件发生\n//对应的1.2.3都会通过break跳出循环\n//第4个可能是当前进程被CPU重新调度，进入for循环的判断，如果没有满足1.2.3的条件，就又重新进入休眠\nfor (;;) {\n    /*\n     * We don't want to sleep if the ep_poll_callback() sends us\n     * a wakeup in between. That's why we set the task state\n     * to TASK_INTERRUPTIBLE before doing the checks.\n     */\n    set_current_state(TASK_INTERRUPTIBLE);\n    /*\n     * Always short-circuit for fatal signals to allow\n     * threads to make a timely exit without the chance of\n     * finding more events available and fetching\n     * repeatedly.\n     */\n    if (fatal_signal_pending(current)) {\n        res = -EINTR;\n        break;\n    }\n    if (ep_events_available(ep) || timed_out)\n        break;\n    if (signal_pending(current)) {\n        res = -EINTR;\n        break;\n    }\n\n    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);\n\n    //通过调用schedule_hrtimeout_range，当前进程进入休眠，CPU时间被调度器调度给其他进程使用\n    if (!schedule_hrtimeout_range(to, slack, HRTIMER_MODE_ABS))\n        timed_out = 1;\n\n    spin_lock_irqsave(&amp;ep-&gt;lock, flags);\n}\n</code></pre><p>如果进程从休眠中返回，则将当前进程从eventpoll的等待队列中删除，并且设置当前进程为TASK_RUNNING状态。</p><pre><code>//从休眠中结束，将当前进程从wait队列中删除，设置状态为TASK_RUNNING，接下来进入check_events，来判断是否是有事件发生\n    __remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);\n    __set_current_state(TASK_RUNNING);\n</code></pre><p>最后，调用ep_send_events将事件拷贝到用户空间。</p><pre><code>//ep_send_events将事件拷贝到用户空间\n/*\n * Try to transfer events to user space. In case we get 0 events and\n * there's still timeout left over, we go trying again in search of\n * more luck.\n */\nif (!res &amp;&amp; eavail &amp;&amp;\n    !(res = ep_send_events(ep, events, maxevents)) &amp;&amp; !timed_out)\n    goto fetch_events;\n\n\nreturn res;\n</code></pre><h3>ep_send_events</h3><p>ep_send_events这个函数会将ep_send_events_proc作为回调函数并调用ep_scan_ready_list函数，ep_scan_ready_list函数调用ep_send_events_proc对每个已经就绪的事件循环处理。</p><p>ep_send_events_proc循环处理就绪事件时，会再次调用每个文件描述符的poll方法，以便确定确实有事件发生。为什么这样做呢？这是为了确定注册的事件在这个时刻还是有效的。</p><p>可以看到，尽管ep_send_events_proc已经尽可能的考虑周全，使得用户空间获得的事件通知都是真实有效的，但还是有一定的概率，当ep_send_events_proc再次调用文件上的poll函数之后，用户空间获得的事件通知已经不再有效，这可能是用户空间已经处理掉了，或者其他什么情形。还记得<a href=\"https://time.geekbang.org/column/article/141573\">第22讲</a>吗，在这种情况下，如果套接字不是非阻塞的，整个进程将会被阻塞，这也是为什么将非阻塞套接字配合epoll使用作为最佳实践的原因。</p><p>在进行简单的事件掩码校验之后，ep_send_events_proc将事件结构体拷贝到用户空间需要的数据结构中。这是通过__put_user方法完成的。</p><pre><code>//这里对一个fd再次进行poll操作，以确认事件\nrevents = ep_item_poll(epi, &amp;pt);\n\n/*\n * If the event mask intersect the caller-requested one,\n * deliver the event to userspace. Again, ep_scan_ready_list()\n * is holding &quot;mtx&quot;, so no operations coming from userspace\n * can change the item.\n */\nif (revents) {\n    if (__put_user(revents, &amp;uevent-&gt;events) ||\n        __put_user(epi-&gt;event.data, &amp;uevent-&gt;data)) {\n        list_add(&amp;epi-&gt;rdllink, head);\n        ep_pm_stay_awake(epi);\n        return eventcnt ? eventcnt : -EFAULT;\n    }\n    eventcnt++;\n    uevent++;\n</code></pre><h2>Level-triggered VS Edge-triggered</h2><p>在<a href=\"https://time.geekbang.org/column/article/143245\">前面的</a><a href=\"https://time.geekbang.org/column/article/143245\">文章</a>里，我们一直都在强调level-triggered和edge-triggered之间的区别。</p><p>从实现角度来看其实非常简单，在ep_send_events_proc函数的最后，针对level-triggered情况，当前的epoll_item对象被重新加到eventpoll的就绪列表中，这样在下一次epoll_wait调用时，这些epoll_item对象就会被重新处理。</p><p>在前面我们提到，在最终拷贝到用户空间有效事件列表中之前，会调用对应文件的poll方法，以确定这个事件是不是依然有效。所以，如果用户空间程序已经处理掉该事件，就不会被再次通知；如果没有处理，意味着该事件依然有效，就会被再次通知。</p><pre><code>//这里是Level-triggered的处理，可以看到，在Level-triggered的情况下，这个事件被重新加回到ready list里面\n//这样，下一轮epoll_wait的时候，这个事件会被重新check\nelse if (!(epi-&gt;event.events &amp; EPOLLET)) {\n    /*\n     * If this file has been added with Level\n     * Trigger mode, we need to insert back inside\n     * the ready list, so that the next call to\n     * epoll_wait() will check again the events\n     * availability. At this point, no one can insert\n     * into ep-&gt;rdllist besides us. The epoll_ctl()\n     * callers are locked out by\n     * ep_scan_ready_list() holding &quot;mtx&quot; and the\n     * poll callback will queue them in ep-&gt;ovflist.\n     */\n    list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);\n    ep_pm_stay_awake(epi);\n}\n</code></pre><h2>epoll VS poll/select</h2><p>最后，我们从实现角度来说明一下为什么epoll的效率要远远高于poll/select。</p><p>首先，poll/select先将要监听的fd从用户空间拷贝到内核空间, 然后在内核空间里面进行处理之后，再拷贝给用户空间。这里就涉及到内核空间申请内存，释放内存等等过程，这在大量fd情况下，是非常耗时的。而epoll维护了一个红黑树，通过对这棵黑红树进行操作，可以避免大量的内存申请和释放的操作，而且查找速度非常快。</p><p>下面的代码就是poll/select在内核空间申请内存的展示。可以看到select 是先尝试申请栈上资源, 如果需要监听的fd比较多, 就会去申请堆空间的资源。</p><pre><code>int core_sys_select(int n, fd_set __user *inp, fd_set __user *outp,\n               fd_set __user *exp, struct timespec64 *end_time)\n{\n    fd_set_bits fds;\n    void *bits;\n    int ret, max_fds;\n    size_t size, alloc_size;\n    struct fdtable *fdt;\n    /* Allocate small arguments on the stack to save memory and be faster */\n    long stack_fds[SELECT_STACK_ALLOC/sizeof(long)];\n\n    ret = -EINVAL;\n    if (n &lt; 0)\n        goto out_nofds;\n\n    /* max_fds can increase, so grab it once to avoid race */\n    rcu_read_lock();\n    fdt = files_fdtable(current-&gt;files);\n    max_fds = fdt-&gt;max_fds;\n    rcu_read_unlock();\n    if (n &gt; max_fds)\n        n = max_fds;\n\n    /*\n     * We need 6 bitmaps (in/out/ex for both incoming and outgoing),\n     * since we used fdset we need to allocate memory in units of\n     * long-words. \n     */\n    size = FDS_BYTES(n);\n    bits = stack_fds;\n    if (size &gt; sizeof(stack_fds) / 6) {\n        /* Not enough space in on-stack array; must use kmalloc */\n        ret = -ENOMEM;\n        if (size &gt; (SIZE_MAX / 6))\n            goto out_nofds;\n\n\n        alloc_size = 6 * size;\n        bits = kvmalloc(alloc_size, GFP_KERNEL);\n        if (!bits)\n            goto out_nofds;\n    }\n    fds.in      = bits;\n    fds.out     = bits +   size;\n    fds.ex      = bits + 2*size;\n    fds.res_in  = bits + 3*size;\n    fds.res_out = bits + 4*size;\n    fds.res_ex  = bits + 5*size;\n    ...\n</code></pre><p>第二，select/poll从休眠中被唤醒时，如果监听多个fd，只要其中有一个fd有事件发生，内核就会遍历内部的list去检查到底是哪一个事件到达，并没有像epoll一样, 通过fd直接关联eventpoll对象，快速地把fd直接加入到eventpoll的就绪列表中。</p><pre><code>static int do_select(int n, fd_set_bits *fds, struct timespec64 *end_time)\n{\n    ...\n    retval = 0;\n    for (;;) {\n        unsigned long *rinp, *routp, *rexp, *inp, *outp, *exp;\n        bool can_busy_loop = false;\n\n        inp = fds-&gt;in; outp = fds-&gt;out; exp = fds-&gt;ex;\n        rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;\n\n        for (i = 0; i &lt; n; ++rinp, ++routp, ++rexp) {\n            unsigned long in, out, ex, all_bits, bit = 1, mask, j;\n            unsigned long res_in = 0, res_out = 0, res_ex = 0;\n\n            in = *inp++; out = *outp++; ex = *exp++;\n            all_bits = in | out | ex;\n            if (all_bits == 0) {\n                i += BITS_PER_LONG;\n                continue;\n            }\n        \n        if (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,\n                   to, slack))\n        timed_out = 1;\n...\n</code></pre><h2>总结</h2><p>在这次答疑中，我希望通过深度分析epoll的源码实现，帮你理解epoll的实现原理。</p><p>epoll维护了一棵红黑树来跟踪所有待检测的文件描述字，黑红树的使用减少了内核和用户空间大量的数据拷贝和内存分配，大大提高了性能。</p><p>同时，epoll维护了一个链表来记录就绪事件，内核在每个文件有事件发生时将自己登记到这个就绪事件列表中，通过内核自身的文件file-eventpoll之间的回调和唤醒机制，减少了对内核描述字的遍历，大大加速了事件通知和检测的效率，这也为level-triggered和edge-triggered的实现带来了便利。</p><p>通过对比poll/select的实现，我们发现epoll确实克服了poll/select的种种弊端，不愧是Linux下高性能网络编程的皇冠。我们应该感谢Linux社区的大神们设计了这么强大的事件分发机制，让我们在Linux下可以享受高性能网络服务器带来的种种技术红利。</p>","neighbors":{"left":{"article_title":"30 | 真正的大杀器：异步I/O探索","id":150780},"right":{"article_title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","id":152668}},"comments":[]}