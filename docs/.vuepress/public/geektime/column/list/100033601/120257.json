{"id":120257,"title":"08 | 调用栈：为什么JavaScript代码会出现栈溢出？","content":"<p>在<a href=\"https://time.geekbang.org/column/article/119046\">上篇文章</a>中，我们讲到了，当一段代码被执行时，JavaScript引擎先会对其进行编译，并创建执行上下文。但是并没有明确说明到底什么样的代码才算符合规范。</p><p>那么接下来我们就来明确下，哪些情况下代码才算是“一段”代码，才会在执行之前就进行编译并创建执行上下文。一般说来，有这么三种情况：</p><ol>\n<li>当JavaScript执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。</li>\n<li>当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。</li>\n<li>当使用eval函数的时候，eval的代码也会被编译，并创建执行上下文。</li>\n</ol><p>好了，又进一步理解了执行上下文，那本节我们就在这基础之上继续深入，一起聊聊<strong>调用栈</strong>。学习调用栈至少有以下三点好处：</p><ol>\n<li>可以帮助你了解JavaScript引擎背后的工作原理；</li>\n<li>让你有调试JavaScript代码的能力；</li>\n<li>帮助你搞定面试，因为面试过程中，调用栈也是出境率非常高的题目。</li>\n</ol><p>比如你在写JavaScript代码的时候，有时候可能会遇到栈溢出的错误，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/70/0c9e2c4f7ee8ca59cfa99a6f51510470.png?wh=1142*490\" alt=\"\"></p><center><span class=\"reference\">栈溢出的错误</span></center><p>那为什么会出现这种错误呢？这就涉及到了<strong>调用栈</strong>的内容。你应该知道JavaScript中有很多函数，经常会出现在一个函数中调用另外一个函数的情况，<strong>调用栈就是用来管理函数调用关系的一种数据结构</strong>。因此要讲清楚调用栈，你还要先弄明白<strong>函数调用</strong>和<strong>栈结构</strong>。</p><!-- [[[read_end]]] --><h2>什么是函数调用</h2><p>函数调用就是运行一个函数，具体使用方式是使用函数名称跟着一对小括号。下面我们看个简单的示例代码：</p><pre><code>var a = 2\nfunction add(){\nvar b = 10\nreturn  a+b\n}\nadd()\n</code></pre><p>这段代码很简单，先是创建了一个add函数，接着在代码的最下面又调用了该函数。</p><p>那么下面我们就利用这段简单的代码来解释下函数调用的过程。</p><p>在执行到函数add()之前，JavaScript引擎会为上面这段代码创建全局执行上下文，包含了声明的函数和变量，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/da/7fa2ed18e702861890d767ea547533da.png?wh=1142*644\" alt=\"\"></p><center><span class=\"reference\">全局执行上下文</span></center><p>从图中可以看出，代码中全局变量和函数都保存在全局上下文的变量环境中。</p><p>执行上下文准备好之后，便开始执行全局代码，当执行到add这儿时，JavaScript判断这是一个函数调用，那么将执行以下操作：</p><ul>\n<li>首先，从<strong>全局执行上下文</strong>中，取出add函数代码。</li>\n<li>其次，对add函数的这段代码进行编译，并创建<strong>该函数的执行上下文</strong>和<strong>可执行代码</strong>。</li>\n<li>最后，执行代码，输出结果。</li>\n</ul><p>完整流程你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/53/ca/537efd9e96771dc50737117e615533ca.png?wh=1142*558\" alt=\"\"></p><center><span class=\"reference\">函数调用过程</span></center><p>就这样，当执行到add函数的时候，我们就有了两个执行上下文了——全局执行上下文和add函数的执行上下文。</p><p>也就是说在执行JavaScript时，可能会存在多个执行上下文，那么JavaScript引擎是如何管理这些执行上下文的呢？</p><p>答案是<strong>通过一种叫栈的数据结构来管理的</strong>。那什么是栈呢？它又是如何管理这些执行上下文呢？</p><h2>什么是栈</h2><p>关于栈，你可以结合这么一个贴切的例子来理解，一条单车道的单行线，一端被堵住了，而另一端入口处没有任何提示信息，堵住之后就只能后进去的车子先出来，这时这个堵住的单行线就可以被看作是一个<strong>栈容器</strong>，车子开进单行线的操作叫做<strong>入栈</strong>，车子倒出去的操作叫做<strong>出栈</strong>。</p><p>在车流量较大的场景中，就会发生反复的入栈、栈满、出栈、空栈和再次入栈，一直循环。</p><p>所以，栈就是类似于一端被堵住的单行线，车子类似于栈中的元素，栈中的元素满足<strong>后进先出</strong>的特点。你可以参看下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/05/5e2bb65019053abfd5e7710e41d1b405.png?wh=1142*667\" alt=\"\"></p><center><span class=\"reference\">栈示意图</span></center><h2>什么是JavaScript的调用栈</h2><p>JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为<strong>执行上下文栈</strong>，又称<strong>调用栈</strong>。</p><p>为便于你更好地理解调用栈，下面我们再来看段稍微复杂点的示例代码：</p><pre><code>var a = 2\nfunction add(b,c){\n  return b+c\n}\nfunction addAll(b,c){\nvar d = 10\nresult = add(b,c)\nreturn  a+result+d\n}\naddAll(3,6)\n</code></pre><p>在上面这段代码中，你可以看到它是在addAll函数中调用了add函数，那在整个代码的执行过程中，调用栈是怎么变化的呢？</p><p>下面我们就一步步地分析在代码的执行过程中，调用栈的状态变化情况。</p><p><strong>第一步，创建全局上下文，并将其压入栈底</strong>。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/1d/a5d7ec1f8f296412acc045835b85431d.png?wh=1142*765\" alt=\"\"></p><center><span class=\"reference\">全局执行上下文压栈</span></center><p>从图中你也可以看出，变量a、函数add和addAll都保存到了全局上下文的变量环境对象中。</p><p>全局执行上下文压入到调用栈后，JavaScript引擎便开始执行全局代码了。首先会执行a=2的赋值操作，执行该语句会将全局上下文变量环境中a的值设置为2。设置后的全局上下文的状态如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/1d/1d50269dbc5b4c69f83662ecdd977b1d.png?wh=1142*383\" alt=\"\"></p><center><span class=\"reference\">赋值操作改变执行上下文中的值</span></center><p>接下来，<strong>第二步是调用addAll函数</strong>。当调用该函数时，JavaScript引擎会编译该函数，并为其创建一个执行上下文，最后还将该函数的执行上下文压入栈中，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/52/7d6c4c45db4ef9b900678092e6c53652.png?wh=1142*794\" alt=\"\"></p><center><span class=\"reference\">执行addAll函数时的调用栈</span></center><p>addAll函数的执行上下文创建好之后，便进入了函数代码的执行阶段了，这里先执行的是d=10的赋值操作，执行语句会将addAll函数执行上下文中的d由undefined变成了10。</p><p>然后接着往下执行，<strong>第三步，当执行到add函数</strong>调用语句时，同样会为其创建执行上下文，并将其压入调用栈，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/37/ccfe41d906040031a7df1e4f1bce5837.png?wh=1142*843\" alt=\"\"></p><center><span class=\"reference\">执行add函数时的调用栈</span></center><p>当add函数返回时，该函数的执行上下文就会从栈顶弹出，并将result的值设置为add函数的返回值，也就是9。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/03/96/03ca801a5372f941bf17d6088fee0f96.png?wh=1142*863\" alt=\"\"></p><center><span class=\"reference\">add函数执行结束时的调用栈</span></center><p>紧接着addAll执行最后一个相加操作后并返回，addAll的执行上下文也会从栈顶部弹出，此时调用栈中就只剩下全局上下文了。最终如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/7b/d0ac1d6e77735338fa97cc9a3f6c717b.png?wh=1142*641\" alt=\"\"></p><center><span class=\"reference\">addAll函数执行结束时的调用栈</span></center><p>至此，整个JavaScript流程执行结束了。</p><p>好了，现在你应该知道了<strong>调用栈是JavaScript引擎追踪函数执行的一个机制</strong>，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。</p><h2>在开发中，如何利用好调用栈</h2><p>鉴于调用栈的重要性和实用性，那么接下来我们就一起来看看在实际工作中，应该如何查看和利用好调用栈。</p><h3>1. 如何利用浏览器查看调用栈的信息</h3><p>当你执行一段复杂的代码时，你可能很难从代码文件中分析其调用关系，这时候你可以在你想要查看的函数中加入断点，然后当执行到该函数时，就可以查看该函数的调用栈了。</p><p>这么说可能有点抽象，这里我们拿上面的那段代码做个演示，你可以打开“开发者工具”，点击“Source”标签，选择JavaScript代码的页面，然后在第3行加上断点，并刷新页面。你可以看到执行到add函数时，执行流程就暂停了，这时可以通过右边“call stack”来查看当前的调用栈的情况，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/a2/c0d303a289a535b87a6c445ba7f34fa2.png?wh=1142*636\" alt=\"\"></p><center><span class=\"reference\">查看函数调用关系</span></center><p>从图中可以看出，右边的“call stack”下面显示出来了函数的调用关系：栈的最底部是anonymous，也就是全局的函数入口；中间是addAll函数；顶部是add函数。这就清晰地反映了函数的调用关系，所以<strong>在分析复杂结构代码，或者检查Bug时，调用栈都是非常有用的</strong>。</p><p>除了通过断点来查看调用栈，你还可以使用console.trace()来输出当前的函数调用关系，比如在示例代码中的add函数里面加上了console.trace()，你就可以看到控制台输出的结果，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/ce/abfba06cd23a7704a6eb148cff443ece.png?wh=1142*832\" alt=\"\"></p><center><span class=\"reference\">使用trace函数输出当前调用栈信息</span></center><h3>2. 栈溢出（Stack Overflow）</h3><p>现在你知道了调用栈是一种用来管理执行上下文的数据结构，符合后进先出的规则。不过还有一点你要注意，<strong>调用栈是有大小的</strong>，当入栈的执行上下文超过一定数目，JavaScript引擎就会报错，我们把这种错误叫做<strong>栈溢出</strong>。</p><p>特别是在你写递归代码的时候，就很容易出现栈溢出的情况。比如下面这段代码：</p><pre><code>function division(a,b){\n    return division(a,b)\n}\nconsole.log(division(1,2))\n</code></pre><p>当执行时，就会抛出栈溢出错误，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/4d/b4f7196077d9ef4eac1ca6a279f2054d.png?wh=1142*652\" alt=\"\"></p><center><span class=\"reference\">栈溢出错误</span></center><p>从上图你可以看到，抛出的错误信息为：超过了最大栈调用大小（Maximum call stack size exceeded）。</p><p>那为什么会出现这个问题呢？这是因为当JavaScript引擎开始执行这段代码时，它首先调用函数division，并创建执行上下文，压入栈中；然而，这个函数是<strong>递归的，并且没有任何终止条件</strong>，所以它会一直创建新的函数执行上下文，并反复将其压入栈中，但栈是有容量限制的，超过最大数量后就会出现栈溢出的错误。</p><p>理解了栈溢出原因后，你就可以使用一些方法来避免或者解决栈溢出的问题，比如把递归调用的形式改造成其他形式，或者使用加入定时器的方法来把当前任务拆分为其他很多小任务。</p><h2>总结</h2><p>好了，今天的内容就讲到这里，下面来总结下今天的内容。</p><ul>\n<li>每调用一个函数，JavaScript引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后JavaScript引擎开始执行函数代码。</li>\n<li>如果在一个函数A中调用了另外一个函数B，那么JavaScript引擎会为B函数创建执行上下文，并将B函数的执行上下文压入栈顶。</li>\n<li>当前函数执行完毕后，JavaScript引擎会将该函数的执行上下文弹出栈。</li>\n<li>当分配的调用栈空间被占满时，会引发“堆栈溢出”问题。</li>\n</ul><p>栈是一种非常重要的数据结构，不光应用在JavaScript语言中，其他的编程语言，如C/C++、Java、Python等语言，在执行过程中也都使用了栈来管理函数之间的调用关系。所以栈是非常基础且重要的知识点，你必须得掌握。</p><h2>思考时间</h2><p>最后，我给你留个思考题，你可以看下面这段代码：</p><pre><code>function runStack (n) {\n  if (n === 0) return 100;\n  return runStack( n- 2);\n}\nrunStack(50000)\n</code></pre><p>这是一段递归代码，可以通过传入参数n，让代码递归执行n次，也就意味着调用栈的深度能达到n，当输入一个较大的数时，比如50000，就会出现栈溢出的问题，那么你能优化下这段代码，以解决栈溢出的问题吗？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":126619,"user_name":"徐承银","can_delete":false,"product_type":"c1","uid":1623836,"ip_address":"","ucode":"8500992DCD9232","user_header":"https://static001.geekbang.org/account/avatar/00/18/c7/1c/3bec7786.jpg","comment_is_top":false,"comment_ctime":1566437200,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"375228591952","product_id":100033601,"comment_content":"不进栈，就不会栈溢出了。function runStack (n) {<br>  if (n === 0) return 100;<br>  return setTimeout(function(){runStack( n- 2)},0);<br>}<br>runStack(50000)","like_count":87,"discussions":[{"author":{"id":1010463,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","nickname":"大前端洞见","note":"","ucode":"1FA227A25F6056","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179916,"discussion_content":"function runStack (n) {\n  if (n === 0) return 100;\n  return runStack.bind(null, n- 2); // 返回自身的一个版本\n}\n// 蹦床函数，避免递归\nfunction trampoline(f) {\n  while (f &amp;&amp; f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\ntrampoline(runStack(1000000))","likes_number":89,"is_delete":false,"is_hidden":false,"ctime":1582260945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1015930,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","nickname":"FreezeSoul","note":"","ucode":"0B67142C4EA3D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010463,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","nickname":"大前端洞见","note":"","ucode":"1FA227A25F6056","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208888,"discussion_content":"学习了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584587569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":179916,"ip_address":""},"score":208888,"extra":""},{"author":{"id":2286113,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e2/21/60adf96b.jpg","nickname":"stone","note":"","ucode":"65816E57253D0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010463,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","nickname":"大前端洞见","note":"","ucode":"1FA227A25F6056","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323159,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604890960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":179916,"ip_address":""},"score":323159,"extra":""},{"author":{"id":2631455,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/1f/42059b0f.jpg","nickname":"HXL","note":"","ucode":"97298EEC95BFCA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1010463,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","nickname":"大前端洞见","note":"","ucode":"1FA227A25F6056","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396607,"discussion_content":"感觉就是 入栈一个函数 执行完之后，再入栈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632460801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":179916,"ip_address":""},"score":396607,"extra":""}]},{"author":{"id":1549661,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a5/5d/22829a03.jpg","nickname":"等等 女皇","note":"","ucode":"81423644144550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388221,"discussion_content":"所有的函数执行一定是会进栈的啊，不进栈怎么js引擎怎么执行该函数。\n\n这里的原理是一下子进栈500个函数的执行上下文vs先清空调用栈的函数再去队列中取出一个函数。\n","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1628658692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2258397,"avatar":"https://static001.geekbang.org/account/avatar/00/22/75/dd/9affd4d5.jpg","nickname":"九千七","note":"","ucode":"1E385C88B3401A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357025,"discussion_content":"同步代码硬生生写成异步都不知道慢了多少倍了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1615727355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1881508,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKOmtA70aIMNqEvbE6HLcwQwszzIWMKPHn64OicZE5AtsSTOcXmIzIXpa4HzOBkRicFvFQnBptGSNvA/132","nickname":"Phil","note":"","ucode":"EC7119586AF6CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237466,"discussion_content":"hahaha, 这是传说中的sleep排序大法的变种","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1587145963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512860,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Rr8ABLicfgJHZ3xs3bXNjHdicwVN0zBiaFtIEXw4D1licedSuia3zicxJC4lqtrNwPmCeAW5UR2Ugia0dNfcvtXYnpOwQ/132","nickname":"LearnAndTry","note":"","ucode":"0ECF4398C870DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256492,"discussion_content":"鬼才。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1588487134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1721655,"avatar":"","nickname":"Geek_33e8a7","note":"","ucode":"0EAE7BC6FD9788","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292578,"discussion_content":"输出结果不对吧","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1595256776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1640823,"avatar":"","nickname":"Geek_zy1991","note":"","ucode":"3E9DBB03DE6D9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1721655,"avatar":"","nickname":"Geek_33e8a7","note":"","ucode":"0EAE7BC6FD9788","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304146,"discussion_content":"return 的定时器的ID","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599479848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292578,"ip_address":""},"score":304146,"extra":""}]},{"author":{"id":1338019,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/a3/82fa23f7.jpg","nickname":"何锦余","note":"","ucode":"153750511B9ADE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96350,"discussion_content":"如果需要拿这个 runStack 的返回值，你这个方法就行不通了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577061043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2217351,"avatar":"https://static001.geekbang.org/account/avatar/00/21/d5/87/bacd5b3e.jpg","nickname":"learning","note":"","ucode":"7EBA7BA7BF0FAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312610,"discussion_content":"楼主的没报错 但是输出结果怎么感觉不对 我知道的有蹦床函数和楼上@大前端洞见 一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602747724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311458,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/e2/f646601b.jpg","nickname":"爱烤火的鱼","note":"","ucode":"A12B4551D3B086","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287918,"discussion_content":"这是什么原理，求解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593589035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1602279,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL17rDiannrcya8o5PJVfZuSqmDLrTnvuU8239MDOeTXiaLx11M4Wc9YScWajxoibUnKaUTnriaFafLsw/132","nickname":"划水摸鱼小能手","note":"","ucode":"1B5E7CDD49AC49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1311458,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/e2/f646601b.jpg","nickname":"爱烤火的鱼","note":"","ucode":"A12B4551D3B086","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292756,"discussion_content":"异步调用，进队列吧。。感觉是这个，不知道对不对。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595321940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287918,"ip_address":""},"score":292756,"extra":""}]}]},{"had_liked":false,"id":189987,"user_name":"FreezeSoul","can_delete":false,"product_type":"c1","uid":1015930,"ip_address":"","ucode":"0B67142C4EA3D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","comment_is_top":false,"comment_ctime":1584589396,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"134728575572","product_id":100033601,"comment_content":"评论比文章更丰富系列","like_count":31,"discussions":[{"author":{"id":1311458,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/e2/f646601b.jpg","nickname":"爱烤火的鱼","note":"","ucode":"A12B4551D3B086","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287754,"discussion_content":"非常认同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593528321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":132594,"user_name":"黄晓杰","can_delete":false,"product_type":"c1","uid":1347324,"ip_address":"","ucode":"13A74763D292F9","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/fc/6c3dbc46.jpg","comment_is_top":false,"comment_ctime":1568170319,"is_pvip":false,"replies":[{"id":"50771","content":"执行上下文已经没了，只不过内部函数引用的变量还保存在堆上，所以不影响栈的操作，后面一节有分析这个问题！","user_name":"作者回复","comment_id":132594,"uid":"1141464","ip_address":"","utype":1,"ctime":1568185102,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"130417189199","product_id":100033601,"comment_content":"老师，我有一个疑问，调用栈是后进先出，那么当存在闭包时，某个函数的执行上下文还存在，那么其他函数的出栈是否受影响？","like_count":30,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467026,"discussion_content":"执行上下文已经没了，只不过内部函数引用的变量还保存在堆上，所以不影响栈的操作，后面一节有分析这个问题！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568185102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132228,"user_name":"Geek_8476da","can_delete":false,"product_type":"c1","uid":1623282,"ip_address":"","ucode":"9AE358E5F160AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","comment_is_top":false,"comment_ctime":1568046625,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"126122098209","product_id":100033601,"comment_content":"我测试出了栈的深度为12574","like_count":29,"discussions":[{"author":{"id":1339296,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6f/a0/f9cede41.jpg","nickname":"给我一片海","note":"","ucode":"9E6875283F3D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35800,"discussion_content":"我的是11432 反正大概就是11000多","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571305795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2162403,"avatar":"https://static001.geekbang.org/account/avatar/00/20/fe/e3/655ec58e.jpg","nickname":"RM.","note":"","ucode":"9F12CF06780CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1339296,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6f/a0/f9cede41.jpg","nickname":"给我一片海","note":"","ucode":"9E6875283F3D34","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338531,"discussion_content":"我和你的一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609307502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":35800,"ip_address":""},"score":338531,"extra":""}]},{"author":{"id":1375913,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/a9/51583515.jpg","nickname":"Dreamer。","note":"","ucode":"1CC4063839D24E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285044,"discussion_content":"怎么测?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592721202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1623282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","nickname":"Geek_8476da","note":"","ucode":"9AE358E5F160AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1375913,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/a9/51583515.jpg","nickname":"Dreamer。","note":"","ucode":"1CC4063839D24E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286515,"discussion_content":"用循环","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593193911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285044,"ip_address":""},"score":286515,"extra":""}]},{"author":{"id":1748290,"avatar":"","nickname":"vianem","note":"","ucode":"59A2D19426ABC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58321,"discussion_content":"firefox是两万多","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574668001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113186,"avatar":"https://static001.geekbang.org/account/avatar/00/20/3e/a2/67c01ee5.jpg","nickname":"Moxy","note":"","ucode":"33C14F3D510320","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391477,"discussion_content":"10457，MacBook air m1 8g","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630481297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1440735,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fb/df/8615f2d3.jpg","nickname":"kaiking","note":"","ucode":"DBE91C5855B9FD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369482,"discussion_content":"我是17979，这大概跟个人电脑配置有关吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619053679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2194683,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIia8vbJEhpFlu4ppkwRNJxibRBZ9rnPFL5gevWN7VmKCYdQEB64QnlMEiahLNoKt6KH7IjDXs7yXomg/132","nickname":"李乐勇","note":"","ucode":"0314C148C68B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363391,"discussion_content":"我的是12584","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617185806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/69/d2/8a53f0a3.jpg","nickname":"E","note":"","ucode":"80B68506B590EF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304682,"discussion_content":"我的是12537\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599642685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126578,"user_name":"ytd","can_delete":false,"product_type":"c1","uid":1038790,"ip_address":"","ucode":"C6AEA2D19E447A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/c6/8be8664d.jpg","comment_is_top":false,"comment_ctime":1566432273,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"126120483857","product_id":100033601,"comment_content":"改成循环不会栈溢出了，不过就有可能陷入死循环：<br>&#47;&#47; 优化<br>function runStack(n) {<br>    while (true) {<br>        if (n === 0) {<br>            return 100;<br>        }<br><br>        if (n === 1) { &#47;&#47; 防止陷入死循环<br>            return 200;<br>        }<br><br>        n = n - 2;<br>    }<br>}<br><br>console.log(runStack(50000));","like_count":29,"discussions":[{"author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538510,"discussion_content":"老师的例子本来就不严谨。while循环和递归调用可以相互转化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639427675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232276,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cd/94/0d44361e.jpg","nickname":"Jerryz","note":"","ucode":"9DAEEAAE70FA00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393725,"discussion_content":"还是可能死循环，把小于2的排除掉就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631580797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351219,"discussion_content":"因为JS是单线程的，我是不是可以理解为在单一时刻，有且只有一个调用栈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614179057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1815743,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V5Q9iapkWRXblWVn7fpnA5pOj7jKmxbt3XkS5MSZKtDsict5f03ZCEXiaBSQic4udMRnp2TZ3axkf1xqFia4sWRtWlw/132","nickname":"Geek_fa199c","note":"","ucode":"28C6DA31D545DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388310,"discussion_content":"应该说有且只有一个执行上下文","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628690721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351219,"ip_address":""},"score":388310,"extra":""}]}]},{"had_liked":false,"id":126568,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1566429347,"is_pvip":false,"replies":[{"id":"46880","content":"有尝试过尾优化会生效吗？","user_name":"作者回复","comment_id":126568,"uid":"1141464","ip_address":"","utype":1,"ctime":1566472351,"user_name_real":"李兵"}],"discussion_count":8,"race_medal":0,"score":"74580873379","product_id":100033601,"comment_content":"1. 改成尾递归调用（需要在严格模式下面生效）<br>function runStack (n, result=100) {<br>  if (n === 0) return result;<br>  return runStack( n- 2, result);<br>}<br>runStack(50000, 100)<br>2. 改成循环调用，不使用递归函数，就不存在堆栈溢出","like_count":17,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464060,"discussion_content":"有尝试过尾优化会生效吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566472351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514198,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1a/d6/5d601452.jpg","nickname":"zpo","note":"","ucode":"6B5EE554C92EE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5811,"discussion_content":"各大浏览器（除了safari）没部署尾调用优化，直接在浏览器上的控制台上调试尾递归的代码还是会出现栈溢出的问题。另外思考题中本身就是尾递归","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1566467757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038790,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d9/c6/8be8664d.jpg","nickname":"ytd","note":"","ucode":"C6AEA2D19E447A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5872,"discussion_content":"老师题目中的递归本身就是在函数尾部递归，如果浏览器或者node等宿主环境实现了对尾部递归进行优化的话，那么就不会出现栈溢出的情况，我在mac node环境下试了下，老师的代码还是栈溢出了，这就说明我电脑的宿主环境没有对尾递归进行优化。另外，想问下老师，尾递归的优化是不是只能靠宿主环境的编译器实现，编程者可以实现吗？优化方法又都有哪些呢？","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1566520920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1553505,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b4/61/1db459e5.jpg","nickname":"哎姆哦剋","note":"","ucode":"D2532A348F07E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319413,"discussion_content":"没啥区别，兄弟","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604024624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1816927,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/G5S9SXFiaeQH7DNUuXErMKhnFw5Rib2QrGkxUOugak9GLMibuanEBGxfZlA9icS5JWYMYE5s0yH6ucggcCJr9TwRSw/132","nickname":"Geek_43337f","note":"","ucode":"3F17C873DA35EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276421,"discussion_content":"不懂就问。这有啥区别吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590860337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1373624,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","nickname":"mfist","note":"","ucode":"4F99F422C23FB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5823,"discussion_content":"自己在node端，chrome浏览器控制台试了一下，尾递归优化默认关闭了。\n只有在safari上面是可以生效的。\n但是有个疑问，我看之前阮一峰老师文章介绍的JavaScript中尾递归优化递归函数中不能有中间变量，需要通过入参替换。但是我在safari测试的好像没有什么影响？谢谢\n\n换句话说就是您题目中的函数也天然是尾递归函数。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566474264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69411,"discussion_content":"尾递归也待看环境","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575286397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5696,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566440250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131604,"user_name":"yetta_xy","can_delete":false,"product_type":"c1","uid":1631044,"ip_address":"","ucode":"A7DCD391503540","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJ6t1z92XYEzbVf8eoPm5Tsu5Zgl0rKdYNFiaGKOOOn79rMClvWGoOJKRJgvrTCGD3ZK4JiaZic72wicrG72I5APGB4/132","comment_is_top":false,"comment_ctime":1567824092,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"70287300828","product_id":100033601,"comment_content":"老师您好，有个疑问。<br>addAll函数中的result变量没有用var声明，直接赋值的，这个变量应该存在于全局上下文的环境变量对象中吧？","like_count":16,"discussions":[{"author":{"id":2015302,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJrTNiaZuexNhAJx6bkozuiaBUGBAzfnibt3hfRn3D7BrxUD8PHUvoPicpBPb4LLgiaLzsBEEbVvOAjhdg/132","nickname":"倚阑听鼾","note":"","ucode":"8F6B13F5E6978E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284510,"discussion_content":"JS查找一个变量的时候，会从当前调用栈开始一层一层向上查找。如果查找到全局对象的时候还是没能找到这个变量，就会自动在全局对象中创建一个该变量并且赋值。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1592544957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2644234,"avatar":"https://static001.geekbang.org/account/avatar/00/28/59/0a/f9f08565.jpg","nickname":"Tony Ricky","note":"","ucode":"3B61294CA66C0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378132,"discussion_content":"试了一下，的确是成了一个全局变量的属性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623062954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1086570,"avatar":"https://static001.geekbang.org/account/avatar/00/10/94/6a/d40f64ec.jpg","nickname":"尝试者说","note":"","ucode":"305ABCD369E7D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79644,"discussion_content":"我也觉得很奇怪，在外面能访问到result","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576079791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159589,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b1/a5/424a2dcf.jpg","nickname":"扣扣羊","note":"","ucode":"57062CFC0C2A60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329685,"discussion_content":"这是简写。\n    var a=1\n    b=2\n等价于：\n    var a=1;\n    var b=2;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606447102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1509942,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0a/36/43b6e383.jpg","nickname":"Stanley","note":"","ucode":"F746ED381E9007","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1159589,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b1/a5/424a2dcf.jpg","nickname":"扣扣羊","note":"","ucode":"57062CFC0C2A60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333564,"discussion_content":"扯淡吧，var a = 1, b = 2 这种才是简写，不写分号 引擎会自动执行成一句，也就是说不加var，它就会在全局对象中给创建出一个result。不信就自己run一下就知道了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1607564282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329685,"ip_address":""},"score":333564,"extra":""}]}]},{"had_liked":true,"id":130598,"user_name":"黄榆","can_delete":false,"product_type":"c1","uid":1040176,"ip_address":"","ucode":"AA979FCDD4A33A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/30/95743ba5.jpg","comment_is_top":false,"comment_ctime":1567491648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65992001088","product_id":100033601,"comment_content":" https:&#47;&#47;kangax.github.io&#47;compat-table&#47;es6&#47;  这个网站可以看到各平台对作为es6特性的尾调用优化的支持情况，表格里面显示：桌面浏览器中只有safari 12 支持尾调用优化。我自己使用safari 12测试，严格模式下运行作者代码能正常得出结果。https:&#47;&#47;node.green&#47;#ESNEXT-strawman--stage-0--syntactic-tail-calls 这个网站则显示，目前版本的node.js不支持尾递归优化","like_count":15},{"had_liked":true,"id":127229,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1566615154,"is_pvip":true,"replies":[{"id":"47146","content":"调用栈有两个指标，最大栈容量和最大调用深度，满足其中任意一个就会栈溢出，不过具体多大和多深，这个没有研究过，你可以拿我留的作业那段代码去各平台测试下，应该很快就能测试出来最大调用深度。","user_name":"作者回复","comment_id":127229,"uid":"1141464","ip_address":"","utype":1,"ctime":1566658606,"user_name_real":"李兵"}],"discussion_count":3,"race_medal":1,"score":"40221320818","product_id":100033601,"comment_content":"关于调用栈的大小，不用的平台，比如浏览器，nodejs 怎么查看设置的，还是硬编码的？","like_count":9,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464389,"discussion_content":"调用栈有两个指标，最大栈容量和最大调用深度，满足其中任意一个就会栈溢出，不过具体多大和多深，这个没有研究过，你可以拿我留的作业那段代码去各平台测试下，应该很快就能测试出来最大调用深度。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566658606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350996,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/54/d43922b6.jpg","nickname":"正经工程师","note":"","ucode":"680B53F09A9CF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404216,"discussion_content":"我怎么感觉容量和深度是同一个概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634261602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640667,"avatar":"https://static001.geekbang.org/account/avatar/00/19/08/db/66cb568d.jpg","nickname":"余亚勇","note":"","ucode":"A45C8732E72B18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296655,"discussion_content":"测试结果最大调用深度是25000，如果是25001就溢出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596614493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126874,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1566511583,"is_pvip":false,"replies":[{"id":"46985","content":"可能我的题目出得不太好，误解我出题目的意思了，我的意思是runStack要执行50000次的，但是要避免栈溢出，改成斐波那契数列的列子可能好点。","user_name":"作者回复","comment_id":126874,"uid":"1141464","ip_address":"","utype":1,"ctime":1566536552,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"35926249951","product_id":100033601,"comment_content":"思考题当中的函数，如果输入参数是正偶数，那么不管数值多大，最后结果都是 100，除此之外，如果输入参数是负数或者是正奇数，甚至说是浮点数，那么使用递归方式调用会导致栈溢出，使用循环方式去实现会导致死循环，如果仅仅是基于当前的输入参数（50000）改写的话：<br>function runStack (n) {<br>  return 100;<br>}<br>runStack(50000);<br><br>当然也可以把递归改成循环的写法，但是要注意的是这时的输入参数仅限定于正偶数，否则会死循环：<br>function runStack (n) {<br>  while (n !== 0) {<br>    n -= 2;<br>  }<br><br>  return 100;<br>}<br>runStack(50000);","like_count":8,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464216,"discussion_content":"可能我的题目出得不太好，误解我出题目的意思了，我的意思是runStack要执行50000次的，但是要避免栈溢出，改成斐波那契数列的列子可能好点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566536552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128171,"user_name":"AICC","can_delete":false,"product_type":"c1","uid":1020746,"ip_address":"","ucode":"C1D18B1E8B2DCE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/4a/de82f373.jpg","comment_is_top":false,"comment_ctime":1566840636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31631611708","product_id":100033601,"comment_content":"老师会在什么地方讲解每节内容留下的思考题？比如像这节的尾调用问题，是否存在尾调用优化，至少目前看到的尝试方式在chrome上都会出现栈溢出，有说是v8移除了TCO,即尾调用优化，参考：https:&#47;&#47;stackoverflow.com&#47;questions&#47;42788139&#47;es6-tail-recursion-optimisation-stack-overflow<br>还有目前google提供的优化方式，但在chrome上目前还不支持，如下<br>function factorial(n, acc = 1) {<br>  if (n === 1) return acc;<br>  return continue factorial(n - 1, acc * n)<br>}","like_count":7},{"had_liked":false,"id":126950,"user_name":"Claire","can_delete":false,"product_type":"c1","uid":1633646,"ip_address":"","ucode":"5C8977F98D5DF7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYicHMnUdXqWMiaxqe3L3C20UTh2FgKpOyBwpZVVLYf7Z6gaCLoh6e0bgXQcH162IYVvUAiaXKJ53iaQ/132","comment_is_top":false,"comment_ctime":1566524960,"is_pvip":false,"replies":[{"id":"46990","content":"有测试过吗？这个特性我跟踪了很久，但是是都没效果的，所以这块内容我在课程里面也没提了","user_name":"作者回复","comment_id":126950,"uid":"1141464","ip_address":"","utype":1,"ctime":1566536954,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"31631296032","product_id":100033601,"comment_content":"运用尾递归，其实尾递归也会产生栈溢出问题，但是查资料看，很多编译器已经优化了尾递归，当编译器检测到一个函数调用是尾递归的时候，它就覆盖当前的活动记录而不是在栈中去创建一个新的","like_count":7,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464259,"discussion_content":"有测试过吗？这个特性我跟踪了很久，但是是都没效果的，所以这块内容我在课程里面也没提了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566536954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126672,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566445222,"is_pvip":false,"replies":[{"id":"46987","content":"是的 改成斐波那契数列会好点。<br><br>不过尾部优化似乎是没效果的","user_name":"作者回复","comment_id":126672,"uid":"1141464","ip_address":"","utype":1,"ctime":1566536644,"user_name_real":"李兵"}],"discussion_count":5,"race_medal":0,"score":"31631216294","product_id":100033601,"comment_content":"将递归改成迭代就好了，还可以使用尾递归优化。感觉老师这道题改成斐波那契数列会更好。<br><br>function runStack (n) {<br>  while (n &gt; 0) {<br>    n -= 2<br>  }<br>  return 100<br>}<br>runStack(50000)","like_count":7,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464111,"discussion_content":"是的 改成斐波那契数列会好点。\n\n不过尾部优化似乎是没效果的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566536644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1594335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/53/df/075734af.jpg","nickname":"NMS丶No3","note":"","ucode":"B850EF9E8F77E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353784,"discussion_content":"尾递归浏览器有兼容性 ... 我记得只有firefox支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615204179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051487,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHOZjqhVkWgUrUibLnXkiaFkhJdfWT2BZP3LldE3tArIoHASlhTSp8tiatiamLbQOjKeMcYHkAexoyCg/132","nickname":"江霖","note":"","ucode":"D197B3FD012944","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50202,"discussion_content":"老师我的理解不知道对不对，尾调用是不是只是将context中的VO释放掉了，减少了内存的消耗，但是context还是存在的所以没有效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573692925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","nickname":"Geek_8476da","note":"","ucode":"9AE358E5F160AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8784,"discussion_content":"循环不用调用栈吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568047069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/42/4543108b.jpg","nickname":"杨小事er","note":"","ucode":"301D688D91AF5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8028,"discussion_content":"http://www.ruanyifeng.com/blog/2015/04/tail-call.html 尾递归貌似是可以解决栈溢出的问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567760870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151328,"user_name":"心飞扬","can_delete":false,"product_type":"c1","uid":1650775,"ip_address":"","ucode":"72AF6BC8DEA026","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/57/29266196.jpg","comment_is_top":false,"comment_ctime":1573700009,"is_pvip":false,"replies":[{"id":"58393","content":"是的","user_name":"作者回复","comment_id":151328,"uid":"1141464","ip_address":"","utype":1,"ctime":1573791782,"user_name_real":"李兵"}],"discussion_count":2,"race_medal":0,"score":"27343503785","product_id":100033601,"comment_content":"addAll函数中的result并不在变量环境中，而是执行完add后才被放在this中","like_count":6,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474439,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573791782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507779,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c3/d0863c05.jpg","nickname":"chige888","note":"","ucode":"C3DB34EF454094","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394245,"discussion_content":"为什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631799793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142050,"user_name":"melon","can_delete":false,"product_type":"c1","uid":1023773,"ip_address":"","ucode":"7A80C20EBCAAA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/1d/ec173090.jpg","comment_is_top":false,"comment_ctime":1571284162,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27341087938","product_id":100033601,"comment_content":"老师没有提函数的入参和返回值，函数的入参和返回值是不是也在函数上下文的变量环境里呢？","like_count":6,"discussions":[{"author":{"id":1630111,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/9f/6db75dff.jpg","nickname":"Random","note":"","ucode":"4E164C8CF487FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255757,"discussion_content":"入参也会在变量环境中，是arguments对象，一个接收所有参数的变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588426891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1821835,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/cc/8b/0060a75c.jpg","nickname":"tomision","note":"","ucode":"92A251597DADB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164910,"discussion_content":"注意看图片：图片上有描述到函数参数也是在变量环境中的，但是返回值应该是不属于变量环境；这个其实可以去看 JavaScript 的语言规范，浏览器都是实现这个语言规范","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581236963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133399,"user_name":"轩爷","can_delete":false,"product_type":"c1","uid":1016658,"ip_address":"","ucode":"1C59F6A4E7ABAE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/52/d67f276d.jpg","comment_is_top":false,"comment_ctime":1568550896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27338354672","product_id":100033601,"comment_content":"亲测，Chrome【版本 77.0.3865.75（正式版本）（64 位）】和Firefox【67.0.4 (64 位)】都不支持尾调用优化，只有Safari【版本 12.1.2 (14607.3.9)】支持","like_count":6},{"had_liked":false,"id":176964,"user_name":"tomision","can_delete":false,"product_type":"c1","uid":1821835,"ip_address":"","ucode":"92A251597DADB0","user_header":"https://static001.geekbang.org/account/avatar/00/1b/cc/8b/0060a75c.jpg","comment_is_top":false,"comment_ctime":1581237551,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23056074031","product_id":100033601,"comment_content":"加入定时器的方法来把当前任务拆分为其他很多小任务：<br><br>function runStackPromise(n) {<br>  if (n === 0) return Promise.resolve(100)<br>  return Promise.resolve(n - 2).then(runStackPromise)<br>}<br><br>runStackPromise(500000).then(console.log)","like_count":5,"discussions":[{"author":{"id":3181408,"avatar":"https://static001.geekbang.org/account/avatar/00/30/8b/60/00a7d37a.jpg","nickname":"momo","note":"","ucode":"868DA7C7491C1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588851,"discussion_content":"和睡眠排序有异曲同工之妙","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664172982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243740,"user_name":"‏5102","can_delete":false,"product_type":"c1","uid":2116537,"ip_address":"","ucode":"476092AB890CF2","user_header":"https://static001.geekbang.org/account/avatar/00/20/4b/b9/2449c7b7.jpg","comment_is_top":false,"comment_ctime":1598261613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18778130797","product_id":100033601,"comment_content":"   思考题：基于迭代、模拟栈、异步的解决方案<br><br>    &#47;&#47; 使用迭代循环来代替栈<br>    function runStack(n) {<br>      while (n !== 0) n -= 2;<br>      return console.log(100) &amp;&amp; 100;<br>    }<br>    &#47;&#47; 使用数组来模拟栈<br>    function runStack(n) {<br>      const stack = [n]<br>      while (n !== 0) {<br>        n -= 2<br>        if (n !== 0) {<br>          stack.push(n)<br>        } else {<br>          return console.log(100) &amp;&amp; 100;<br>        }<br>      }<br>    }<br>    &#47;&#47; 使用异步来分块处理，注意异步队列也有上限，分块粒度不能太细<br>    function runStack(n, count = 0) {<br>      if (n === 0) return console.log(100) &amp;&amp; 100;<br>      if (count &gt; 5000) return setTimeout(runStack, 0, n - 2);<br>      return runStack(n - 2, count + 1)<br>    }<br>    runStack(50000)<br>    至于尾递归，很多浏览器都不支持，不然可以直接使用尾递归","like_count":5},{"had_liked":false,"id":282351,"user_name":"NMS丶No3","can_delete":false,"product_type":"c1","uid":1594335,"ip_address":"","ucode":"B850EF9E8F77E2","user_header":"https://static001.geekbang.org/account/avatar/00/18/53/df/075734af.jpg","comment_is_top":false,"comment_ctime":1615204090,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14500105978","product_id":100033601,"comment_content":"评论的为啥都这么复杂啊！直接这样不就好了 ... <br>其实要解决的问题就是不要递归入栈，所以我们把变量的声明都定义在一个栈里面，这样就不会重复入栈，就能解决问题了。<br>function runStack (n) { <br>    while (n !== 0) {<br>        n = n - 2<br>    }<br>    return 100;<br>}<br>runStack(50000)","like_count":3,"discussions":[{"author":{"id":1795414,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/56/b67fb80e.jpg","nickname":"王宁宁","note":"","ucode":"175476CDF09477","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571678,"discussion_content":"这题的本意是要尝试解决函数递归调用时栈溢出吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652343660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159371,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575608698,"is_pvip":true,"replies":[{"id":"60921","content":"执行上下文是一种语义，一种规范，这种如何实现的语言层面不用是不用关心的！<br><br><br>JS虚拟机可以用各种不同的方式去实现，只要最终能满足这种语义就可以了！<br><br><br>比如V8就是使用C++来实现的，无非就是如何分配数据，如何查找数据！","user_name":"作者回复","comment_id":159371,"uid":"1141464","ip_address":"","utype":1,"ctime":1575615971,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"14460510586","product_id":100033601,"comment_content":"执行上下问的本质是一个object吗","like_count":3,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477025,"discussion_content":"执行上下文是一种语义，一种规范，这种如何实现的语言层面不用是不用关心的！\n\n\nJS虚拟机可以用各种不同的方式去实现，只要最终能满足这种语义就可以了！\n\n\n比如V8就是使用C++来实现的，无非就是如何分配数据，如何查找数据！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575615971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137621,"user_name":"曾侃","can_delete":false,"product_type":"c1","uid":1200627,"ip_address":"","ucode":"A0E3A0AEF9046C","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/f3/f1c3ea02.jpg","comment_is_top":false,"comment_ctime":1569807807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14454709695","product_id":100033601,"comment_content":"老师好，第三张图函数调用过程是不是有点问题，函数的可执行代码里面是不是应该包含 b = 10？","like_count":3},{"had_liked":false,"id":126777,"user_name":"爱吃锅巴的沐泡","can_delete":false,"product_type":"c1","uid":1244560,"ip_address":"","ucode":"27451E4F1A22D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/90/ae39017f.jpg","comment_is_top":false,"comment_ctime":1566471309,"is_pvip":false,"replies":[{"id":"46970","content":"第一个：看成是一个引用，函数实体是保存到堆中的。堆栈结构后面章节会介绍。<br><br>第二个：如果一个函数带有参数，编译过程中，参数会通过参数列表保存到变量环境中<br><br>","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566529215,"ip_address":"","comment_id":126777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14451373197","product_id":100033601,"comment_content":"老师，有两个问题：<br>1、老师在文中写到“首先，从全局执行上下文中，取出 add 函数代码。”，这里是取到函数的引用，还是整个函数代码，函数的存储是怎样的？<br>2、声明带参的函数并调用的编译过程是怎样的，参数应该是和arguments有关吧，老师能详细说一下编译过程嘛？","like_count":3,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464162,"discussion_content":"第一个：看成是一个引用，函数实体是保存到堆中的。堆栈结构后面章节会介绍。\n\n第二个：如果一个函数带有参数，编译过程中，参数会通过参数列表保存到变量环境中\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566529215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156238,"user_name":"Zkerhcy","can_delete":false,"product_type":"c1","uid":1231133,"ip_address":"","ucode":"43A883F6FB6070","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/1d/c7586cfc.jpg","comment_is_top":false,"comment_ctime":1574841233,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164775825","product_id":100033601,"comment_content":"麻烦老师抽空把这节的思考题解释下哈，我是用阮一峰老师在《ES 6 标准入门》里讲的蹦床函数（trampoline）解决的。<br><br>function runStack(n) {<br>  if (n === 0) return 100<br>  return runStack.bind(null, n - 2)<br>}<br>&#47;&#47; runStack(50000)<br><br>function trampoline(f) {<br>  while (f &amp;&amp; f instanceof Function) {<br>    f = f()<br>  }<br>  return f<br>}<br><br>console.log(trampoline(runStack(50000)))<br>","like_count":2,"discussions":[{"author":{"id":1821835,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/cc/8b/0060a75c.jpg","nickname":"tomision","note":"","ucode":"92A251597DADB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164920,"discussion_content":"这个等于是自己手动实现了尾递归，你可以试试老师教的断点，runStack 函数每次执行，应该是保持非递归，只有 全局 -> trampoline -> bind新创建的runStack（除了第一次","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581237979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137753,"user_name":"Cris","can_delete":false,"product_type":"c1","uid":1473520,"ip_address":"","ucode":"F8A287134F1078","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/f0/269139d5.jpg","comment_is_top":false,"comment_ctime":1569836163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10159770755","product_id":100033601,"comment_content":"调用栈有两个指标，最大栈容量和最大调用深度。老师能稍微讲解下这两个指标吗？我感觉这两个指标指的都是调用栈中执行上下文的个数呢","like_count":2},{"had_liked":false,"id":137372,"user_name":"Geek_761448","can_delete":false,"product_type":"c1","uid":1468475,"ip_address":"","ucode":"4C720CC7CB581F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q0yUmgr5jpdukc2TsOZ85NrXiaicKESL6GD7dmK5LpiaJnts7ySNqGBkX4zFvBpKoXVJ8qZZxWnpLADk5R5XFnWPA/132","comment_is_top":false,"comment_ctime":1569725228,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10159659820","product_id":100033601,"comment_content":"老师,你这段代码中:<br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)<br>addAll函数中的result并不会变量提升吧?,也就是说并不会在addall的环境变量中出现result=undefined吧<br>","like_count":2,"discussions":[{"author":{"id":1389909,"avatar":"https://static001.geekbang.org/account/avatar/00/15/35/55/7c7c6acc.jpg","nickname":"nbsp","note":"","ucode":"DE76BEC9D0C81B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223654,"discussion_content":"我也发现这个问题了 并没有声明一个变量result把 这里我觉得也不会出现在环境变量中，应该是在代码执行阶段才创建的吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586243885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130825,"user_name":"郭纯","can_delete":false,"product_type":"c1","uid":1314521,"ip_address":"","ucode":"2613860B4642C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/d9/e61ce097.jpg","comment_is_top":false,"comment_ctime":1567557582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10157492174","product_id":100033601,"comment_content":"解决这样的问题  有几种方法 比如 不用递归 用循环 采用延时执行.最好的方法采用生成器 generator 参考协同的实现.","like_count":2},{"had_liked":false,"id":127442,"user_name":"tick","can_delete":false,"product_type":"c1","uid":1106123,"ip_address":"","ucode":"D2C864306C06CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOASyV1lpdkW6It8WQltNGj9021PTibqOwRUTccaSUEM1GmQThOTIRp9Eu7XNZZFfGGNveLbUSw9Q/132","comment_is_top":false,"comment_ctime":1566714491,"is_pvip":false,"replies":[{"id":"47422","content":"其实执行上下文也是存放在系统的堆区的，模拟的栈结构，他们和c语言的执行栈还是不一样的","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566821971,"ip_address":"","comment_id":127442,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10156649083","product_id":100033601,"comment_content":"老师，我可不可以这样理解，您所说的调用栈并不是严格意义上的栈，因为在addAll中调用add时，add的函数代码还是在全局上下文中，即此时栈中有全局上下文，addAll上下文，但此时还需要去访问栈底的全局上下文中取出add的函数代码，这样是不是不算是严格意义上的栈？","like_count":2,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464493,"discussion_content":"其实执行上下文也是存放在系统的堆区的，模拟的栈结构，他们和c语言的执行栈还是不一样的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566821971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106123,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOASyV1lpdkW6It8WQltNGj9021PTibqOwRUTccaSUEM1GmQThOTIRp9Eu7XNZZFfGGNveLbUSw9Q/132","nickname":"tick","note":"","ucode":"D2C864306C06CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6369,"discussion_content":"嗯嗯  可以理解，因为引擎要管理内存的话，应该就是放在虚拟内存的堆区，那addAll要去调用add时，是要去全局上下文中去取add的函数定义吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566871550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298127,"user_name":"花儿与少年","can_delete":false,"product_type":"c1","uid":1046304,"ip_address":"","ucode":"E2D685737E4F1B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/20/e2dfa9c2.jpg","comment_is_top":false,"comment_ctime":1623918698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918885994","product_id":100033601,"comment_content":"李兵老师  函数执行上下文和函数作用域是等价的概念吗","like_count":1},{"had_liked":false,"id":288520,"user_name":"刘至","can_delete":false,"product_type":"c1","uid":2246757,"ip_address":"","ucode":"030D761BDF4957","user_header":"https://static001.geekbang.org/account/avatar/00/22/48/65/3277386b.jpg","comment_is_top":false,"comment_ctime":1618503298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913470594","product_id":100033601,"comment_content":"李兵老师您好，本讲提到“管理执行上下文的栈称为执行上下文栈，又称调用栈”，然而第11讲提到箭头函数没有执行上下文，但通过chrome浏览器调试是箭头函数是有入栈的，如果箭头函数没有执行上下文是正确的，那么这个调用栈是不是不能称作执行上下文栈，应该叫函数调用栈。由此推论，js函数分为普通函数和箭头函数，普通函数有独立完整的执行上下文（变量环境、词法环境、outer、this)<br>,箭头函数没有独立完整的执行上下文(但有自己的作用域，变量环境、词法环境、outer)，依赖于外部函数的执行上下文（this），请多指教！","like_count":1},{"had_liked":false,"id":139094,"user_name":"wd2010","can_delete":false,"product_type":"c1","uid":1691581,"ip_address":"","ucode":"E194E4EFECA013","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/bd/4fa01a1c.jpg","comment_is_top":false,"comment_ctime":1570543692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865510988","product_id":100033601,"comment_content":"可以帮忙分析下这个吗？<br>```<br>function runStack(n) {<br>  if (n === 0) return &#39;完成&#39;;<br>  console.log(n)<br>  return () =&gt; runStack(n - 2);<br>}<br><br>var trampoline = f =&gt; (...args) =&gt; {<br>  let result = f(...args);<br>  while (typeof result === &quot;function&quot;) {<br>    result = result();<br>  }<br>  return result;<br>};<br><br>var run= trampoline(runStack);<br>run(50000);<br>```","like_count":1},{"had_liked":false,"id":127112,"user_name":"安思科","can_delete":false,"product_type":"c1","uid":1446237,"ip_address":"","ucode":"15FBE79CEDA0FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/5d/0d955f19.jpg","comment_is_top":false,"comment_ctime":1566556694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861523990","product_id":100033601,"comment_content":"就您说的只要把递归的那个return用setTimeout包一下就行了吧","like_count":1},{"had_liked":false,"id":126827,"user_name":"忘忧草的约定","can_delete":false,"product_type":"c1","uid":1114753,"ip_address":"","ucode":"F99D2F5D179B2A","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/81/489e1cd4.jpg","comment_is_top":false,"comment_ctime":1566484496,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5861451792","product_id":100033601,"comment_content":"我理解将内部的函数当成一个独立的子任务放到microstack任务队列里面去就可以了吧，这样当该任务执行的时候调用栈里面只有全局上下文","like_count":1,"discussions":[{"author":{"id":1347300,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/e4/f126ef1b.jpg","nickname":"芬兰湖边小画匠","note":"","ucode":"31289C9C4F4085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342484,"discussion_content":"宏任务，微任务都可以，只要不是同时递归入栈，而是通过回调队列和event loop来循环入栈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610695370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126766,"user_name":"林展翔","can_delete":false,"product_type":"c1","uid":1254011,"ip_address":"","ucode":"F1EA834AB9E758","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/7b/f8736786.jpg","comment_is_top":false,"comment_ctime":1566467598,"is_pvip":false,"replies":[{"id":"46878","content":"貌似没有其它办法","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566472289,"ip_address":"","comment_id":126766,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861434894","product_id":100033601,"comment_content":"老师, 可以问一下, 除了去捕获异常以外,  有没有什么办法能够跳过异常语句去执行剩下的 JS 语句.","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464157,"discussion_content":"貌似没有其它办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566472289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566826,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e8/6a/6438c61b.jpg","nickname":"小、sen","note":"","ucode":"0FEB3465198330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332995,"discussion_content":"肯定是没有的  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607412107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126625,"user_name":"Jim","can_delete":false,"product_type":"c1","uid":1625146,"ip_address":"","ucode":"4916FD76E09CF0","user_header":"","comment_is_top":false,"comment_ctime":1566438214,"is_pvip":false,"replies":[{"id":"46831","content":"词法环境下节就开始介绍了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566438828,"ip_address":"","comment_id":126625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861405510","product_id":100033601,"comment_content":"老师，您的执行上下文图里都会有一个变量环境和词法环境，可是为什么词法环境没有东西呢？请问变量环境和词法环境的区别是什么呢？","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464090,"discussion_content":"词法环境下节就开始介绍了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566438828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126587,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1096381,"ip_address":"","ucode":"443BD8B20285A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","comment_is_top":false,"comment_ctime":1566433770,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5861401066","product_id":100033601,"comment_content":"这个代码运行情况依赖入参，有三种情况：1、n=0，返回100；2、n为正偶数，递归n&#47;2次之后返回100；3、n为非上述情况，栈溢出。优化方案：判断参数n，1、2两种情况返回100，3的情况抛错。","like_count":1,"discussions":[{"author":{"id":1200627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/51/f3/f1c3ea02.jpg","nickname":"曾侃","note":"","ucode":"A0E3A0AEF9046C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6639,"discussion_content":"巧了😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567005974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126559,"user_name":"Hurry","can_delete":false,"product_type":"c1","uid":1138560,"ip_address":"","ucode":"12FEE2A50CC667","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/80/51269d88.jpg","comment_is_top":false,"comment_ctime":1566422669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861389965","product_id":100033601,"comment_content":"将递归，改成循环:<br>```<br>function runStack(n) {<br>        if (n === 0)<br>            return 100;<br>    }<br><br>    function run(n) {<br>        while (n &gt; 0) {<br>            runStack(n)<br>            n = n - 2;<br>        }<br><br>        return runStack(n)<br>    }<br><br>    run(50000)<br>```","like_count":1},{"had_liked":false,"id":359627,"user_name":"给我一片海","can_delete":false,"product_type":"c1","uid":1339296,"ip_address":"山东","ucode":"9E6875283F3D34","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/a0/f9cede41.jpg","comment_is_top":false,"comment_ctime":1665715313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665715313","product_id":100033601,"comment_content":"函数执行过程那张图是b = 10 不是d = 10","like_count":0},{"had_liked":false,"id":359421,"user_name":"🏴‍☠️","can_delete":false,"product_type":"c1","uid":1478157,"ip_address":"福建","ucode":"E62C53E781AF81","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8H9JoTQj0gmhgUhtozvFoNesW3fv7pow3IibGeLhakDz5aWlicA3UOjqSc5jWw9C0ibgFIemlK6DkrYUe9Sibcl9Vg/132","comment_is_top":false,"comment_ctime":1665510969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665510969","product_id":100033601,"comment_content":"函数调用表达式改成100就行了，结果都一样","like_count":0},{"had_liked":false,"id":358136,"user_name":"wilson","can_delete":false,"product_type":"c1","uid":1286793,"ip_address":"上海","ucode":"55CFA9D4AA9A19","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/89/7098b532.jpg","comment_is_top":false,"comment_ctime":1663930176,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663930176","product_id":100033601,"comment_content":"使用generate函数思想，可以解决","like_count":0},{"had_liked":false,"id":349808,"user_name":"丶 I Doser","can_delete":false,"product_type":"c1","uid":1542165,"ip_address":"","ucode":"9A3A33A7A3432D","user_header":"https://static001.geekbang.org/account/avatar/00/17/88/15/f731a880.jpg","comment_is_top":false,"comment_ctime":1656336821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656336821","product_id":100033601,"comment_content":"通过 setTimeout 的方式处理成宏任务，这样主执行栈每次就只压入一个函数执行，而不会像同步代码执行那样一下子把调用栈给撑爆了。<br><br>function runStack (n) {<br>  if (n === 0) return 100;<br>  return setTimeout(() =&gt; {runStack( n- 2)}, 0);<br>}<br>runStack(50000)","like_count":0},{"had_liked":false,"id":348541,"user_name":"themerz","can_delete":false,"product_type":"c1","uid":1323074,"ip_address":"","ucode":"C3E4C3794B6A0E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5wG9T8X0k290hWC79YPzWoJxqCyeFWicXibShpATzOTr0CMFpNgmR92rcDov5TjYbQp15wtCPvXe5g/132","comment_is_top":false,"comment_ctime":1655183364,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655183364","product_id":100033601,"comment_content":"function runStack(n){<br>  while(n&gt;0){<br>    n=n-2<br>  }<br>  return 100<br>}<br><br>runStack(50000)","like_count":0},{"had_liked":false,"id":347027,"user_name":"Geek_3b2d8c","can_delete":false,"product_type":"c1","uid":2746819,"ip_address":"","ucode":"77BBDC7294B345","user_header":"https://static001.geekbang.org/account/avatar/00/29/e9/c3/62e63a4f.jpg","comment_is_top":false,"comment_ctime":1653629101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653629101","product_id":100033601,"comment_content":"function runStack (n, callback) {<br>        setTimeout(() =&gt; {<br>        if (n === 0) return callback(100);<br>        runStack(n - 2, callback)<br>        console.log(n)<br>        });<br>    }<br>    <br>    runStack(50000, res =&gt; {<br>        console.log(res);<br>    })","like_count":0},{"had_liked":false,"id":340839,"user_name":"小m","can_delete":false,"product_type":"c1","uid":1094238,"ip_address":"","ucode":"D0BEC2EAC89A7E","user_header":"https://static001.geekbang.org/account/avatar/00/10/b2/5e/2a6e07b0.jpg","comment_is_top":false,"comment_ctime":1649172507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649172507","product_id":100033601,"comment_content":"出的题目本身就是尾递归了，为什么评论还有人说有用尾递归优化？？？不太明白，是我理解有误吗？","like_count":0},{"had_liked":false,"id":339537,"user_name":"lei","can_delete":false,"product_type":"c1","uid":1380214,"ip_address":"","ucode":"804BC951AE6715","user_header":"https://static001.geekbang.org/account/avatar/00/15/0f/76/96142690.jpg","comment_is_top":false,"comment_ctime":1648176485,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648176485","product_id":100033601,"comment_content":"老师，请教一个问题：<br><br>“当 JavaScript 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。”--这里的描述有点疑惑<br>全局执行上下文，在一个JavaScript的WEB应用中有且仅有一个呢？还是和应用的页面数目有有关呢？","like_count":0},{"had_liked":false,"id":337819,"user_name":"伍哥的传说","can_delete":false,"product_type":"c1","uid":2684954,"ip_address":"","ucode":"80AB86F28BF589","user_header":"https://static001.geekbang.org/account/avatar/00/28/f8/1a/6b5105f8.jpg","comment_is_top":false,"comment_ctime":1647077119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647077119","product_id":100033601,"comment_content":"function trampoline(f) {<br>    while(f &amp;&amp; f instanceof Function) {<br>      f = f();<br>    }<br>    return f;<br>  }<br>  function runStack(n) {<br>    if (n === 0) return 100;<br>    return runStack.bind(null, n - 2);<br>  }<br>  trampoline(runStack(50000))<br><br>蹦床函数（trampoline）可以将递归执行转为循环执行<br>这里的 f 返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题","like_count":0},{"had_liked":false,"id":336954,"user_name":"一七","can_delete":false,"product_type":"c1","uid":2930028,"ip_address":"","ucode":"681C7720FAB84B","user_header":"https://static001.geekbang.org/account/avatar/00/2c/b5/6c/18c5b2ed.jpg","comment_is_top":false,"comment_ctime":1646488809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646488809","product_id":100033601,"comment_content":"都2022年了，Chrome还没有支持尾调用优化。。。","like_count":0},{"had_liked":false,"id":328855,"user_name":"Geek_641df3","can_delete":false,"product_type":"c1","uid":2847229,"ip_address":"","ucode":"8095D5FAD17BD0","user_header":"","comment_is_top":false,"comment_ctime":1640919509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640919509","product_id":100033601,"comment_content":"result被意外创建成全局变量了吗，老师。","like_count":0},{"had_liked":false,"id":320879,"user_name":"Geek_3beb80","can_delete":false,"product_type":"c1","uid":2790031,"ip_address":"","ucode":"C7D5365E39D381","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/UIImmYqAmhyFp1scKEKnCJwfaLnhObQiaYOX1hVlR0RGgH6Psx4ue3R5Cib8naxZSAehk1DMUbWz8afzAKMibGHfA/132","comment_is_top":false,"comment_ctime":1636537683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636537683","product_id":100033601,"comment_content":"老师，执行上下午文和作用域是啥关系呢","like_count":0},{"had_liked":false,"id":316297,"user_name":"Geek_4ea9b4","can_delete":false,"product_type":"c1","uid":2663027,"ip_address":"","ucode":"4A71971A71D6CE","user_header":"","comment_is_top":false,"comment_ctime":1634264668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634264668","product_id":100033601,"comment_content":"  function runStack(n) {<br>    for (var i = n; i &gt;= 0; i = i - 2) {<br>      if (i == 0) {<br>        return 100<br>      }<br>    }<br>  }<br>  runStack(50000)","like_count":0},{"had_liked":false,"id":314178,"user_name":"Geek_a99323","can_delete":false,"product_type":"c1","uid":1709988,"ip_address":"","ucode":"87F80317099295","user_header":"","comment_is_top":false,"comment_ctime":1632887103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632887103","product_id":100033601,"comment_content":"可以用尾递归，因为尾递归的情况下，我们保持这个函数的入口环境没意义，所以我们就可以把这个函数的调用栈给优化掉。","like_count":0},{"had_liked":false,"id":309215,"user_name":"ronny","can_delete":false,"product_type":"c1","uid":2071110,"ip_address":"","ucode":"E2D3A70AAC89AA","user_header":"https://static001.geekbang.org/account/avatar/00/1f/9a/46/bb7d948e.jpg","comment_is_top":false,"comment_ctime":1629988073,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629988073","product_id":100033601,"comment_content":"function run(n) {<br>    while(n &gt; 0) {<br>        n = n - 2;<br>    }<br><br>    return 100;<br>}","like_count":0},{"had_liked":false,"id":303702,"user_name":"Qiang","can_delete":false,"product_type":"c1","uid":2703617,"ip_address":"","ucode":"3B3C7ADD9C2CA3","user_header":"","comment_is_top":false,"comment_ctime":1626937456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626937456","product_id":100033601,"comment_content":"&#47;&#47; 对于最后一道题思考题的答案应该是，把递归函数调用从调用栈移除出去到任务队列里执行，除了可以使用 setTimeout 还可以插入一句 await Promise.resolve() 实现，如以下代码：<br><br>async function runStack (n) {<br>  await Promise.resolve() &#47;&#47; 将函数从调用栈中移到任务队列<br>  if (n === 0) return 100; <br>  return runStack(n - 2);<br>}<br><br>await runStack(50000)<br><br>&#47;&#47; =============================================<br>&#47;&#47; 另外如果把题目改成以下代码，可能会让读者更容易明白老师想考察的避免栈溢出的目的，也更容易验证吧<br><br>function runStack (n) {<br>  if (n &lt; 1) return 0;<br>  return n + runStack(n-1);<br>}<br><br>runStack(1000000) &#47;&#47; 爆栈了<br><br>&#47;&#47; 对应的答案应该是：<br>async function runStack (n) {<br>  await Promise.resolve()<br>  if (n &lt; 1) return 0;<br>  const m = await runStack(n-1);<br>  return n + m;<br>}<br><br>await runStack(1000000) &#47;&#47; 不会爆栈了，但一百万的队列，在我 2017 款 MacBook Pro 上大概需要 13 秒来执行","like_count":0},{"had_liked":false,"id":290661,"user_name":"村里的帅逼","can_delete":false,"product_type":"c1","uid":2598865,"ip_address":"","ucode":"3460FE62A8868B","user_header":"","comment_is_top":false,"comment_ctime":1619680135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619680135","product_id":100033601,"comment_content":"老师，你前面说JS会先编译得到AST语法树，然后由解释器生成字节码，再执行字节码，这篇文章中说addAll函数调用时，先编译，创建执行上下文，再执行，然后是add函数一样的流程，那跟你之前讲的先编译生成执行上下文、字节码，再执行字节码是否冲突了？不是很理解，望老师解答一下","like_count":0},{"had_liked":false,"id":290305,"user_name":"麟","can_delete":false,"product_type":"c1","uid":1160077,"ip_address":"","ucode":"0479D13A8DB814","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8d/6cf65ead.jpg","comment_is_top":false,"comment_ctime":1619492697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619492697","product_id":100033601,"comment_content":"<br>function runStack (n) {<br>  if (n === 0) return 100;<br>  return runStack.bind(null,n-2);<br>}<br><br>function trampoline(f) {<br>  while (f &amp;&amp; f instanceof Function) {<br>    f = f();<br>  }<br>  return f;<br>}<br>trampoline(runStack(50000))<br>经典蹦床函数","like_count":0},{"had_liked":false,"id":289895,"user_name":"shark","can_delete":false,"product_type":"c1","uid":1203926,"ip_address":"","ucode":"312FB80175C8FF","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/d6/87189c9d.jpg","comment_is_top":false,"comment_ctime":1619256486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619256486","product_id":100033601,"comment_content":"请教个问题，文中说的函数体的代码是函数调用是才执行编译的，是每次调用都要去编译还是第一次执行时编译后面直接用呢？如果每次都编译，那么一个函数多次调用，不就很浪费性能？js是静态作用域不是动态作用域，在词法分析阶段应该就能确认对应函数的变量环境和词法环境的内容，为什么需要在调用时才是编译和生成对应的执行上下文呢？","like_count":0},{"had_liked":false,"id":289546,"user_name":"青岑","can_delete":false,"product_type":"c1","uid":1645257,"ip_address":"","ucode":"D4B56681F2439C","user_header":"https://static001.geekbang.org/account/avatar/00/19/1a/c9/b856e16e.jpg","comment_is_top":false,"comment_ctime":1619075053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619075053","product_id":100033601,"comment_content":"<br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)<br><br>这里 result 没有声明，是不是应该在全局上下文中。","like_count":0},{"had_liked":false,"id":284996,"user_name":"小徐","can_delete":false,"product_type":"c1","uid":1991387,"ip_address":"","ucode":"671BA40E7C7C76","user_header":"https://static001.geekbang.org/account/avatar/00/1e/62/db/740b46a0.jpg","comment_is_top":false,"comment_ctime":1616573888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616573888","product_id":100033601,"comment_content":"hhh 基于这个题来优化的话，<br>直接 function newRunStack(n){<br>    return 100;<br>}","like_count":0},{"had_liked":false,"id":283850,"user_name":"Geek_2014ce","can_delete":false,"product_type":"c1","uid":2136469,"ip_address":"","ucode":"167B4CCDA4D5BD","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/95/1e332315.jpg","comment_is_top":false,"comment_ctime":1615957372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615957372","product_id":100033601,"comment_content":"老师，有个问题请教下。函数执行完成就让当前执行上下文出栈，那闭包怎么处理呢？（当前函数执行完毕，return一个函数出去，这个函数没引用当前执行上下文变量。）","like_count":0},{"had_liked":false,"id":280405,"user_name":"Alan He","can_delete":false,"product_type":"c1","uid":2033513,"ip_address":"","ucode":"A0780F4619D388","user_header":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","comment_is_top":false,"comment_ctime":1614179699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614179699","product_id":100033601,"comment_content":"最大栈容量是不是说的栈本身的存储大小呢，如果只是说入栈的执行上下文个数，那么就与最大调用深度一个指标了。","like_count":0},{"had_liked":false,"id":280396,"user_name":"Alan He","can_delete":false,"product_type":"c1","uid":2033513,"ip_address":"","ucode":"A0780F4619D388","user_header":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","comment_is_top":false,"comment_ctime":1614177714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614177714","product_id":100033601,"comment_content":"测试`Chrome 88.0.4324.192`的栈深度为11383，超出比如11384即报错。","like_count":0},{"had_liked":false,"id":278881,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1613430126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613430126","product_id":100033601,"comment_content":"这是尾递归吧，在支持的浏览器上应该不会栈溢出的","like_count":0},{"had_liked":false,"id":275511,"user_name":"赵又胖了","can_delete":false,"product_type":"c1","uid":2007923,"ip_address":"","ucode":"0E5BD26DBCDD07","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a3/73/20fd86fe.jpg","comment_is_top":false,"comment_ctime":1611566546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611566546","product_id":100033601,"comment_content":"<br>    function runStack(n) {<br>        return function (){<br>            while (n!==0){<br>                n=n-2;<br>                if(n===0){<br>                    return 100; <br>                }<br>            }<br>        } <br>    } <br>    runStack(50000)();<br>可以用循环么","like_count":0},{"had_liked":false,"id":272654,"user_name":"jarryLee","can_delete":false,"product_type":"c1","uid":1631921,"ip_address":"","ucode":"1392ED306DA5F2","user_header":"","comment_is_top":false,"comment_ctime":1610188000,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610188000","product_id":100033601,"comment_content":"<br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)<br>这段代码中result是全局变量，请老师更正","like_count":0,"discussions":[{"author":{"id":1598828,"avatar":"https://static001.geekbang.org/account/avatar/00/18/65/6c/5cb98fc3.jpg","nickname":"locke","note":"","ucode":"DD0554D06C7937","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377394,"discussion_content":"函数里面的变量，怎么会是全局变量，只是没有声明而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622626889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261929,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1015564,"ip_address":"","ucode":"AF7565BB5EF164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/0c/392ce255.jpg","comment_is_top":false,"comment_ctime":1605581541,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1605581541","product_id":100033601,"comment_content":"最近开到了这样一道题目，用这里的知识好像解释不通了，万望老师解惑：<br>```<br>var a = 10;<br>{<br>    a = 99;<br>    function a() { } <br>    a=30<br>}<br>console.log(a);<br>```<br>解释代码的打印结果","like_count":0,"discussions":[{"author":{"id":1347300,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/e4/f126ef1b.jpg","nickname":"芬兰湖边小画匠","note":"","ucode":"31289C9C4F4085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342498,"discussion_content":"1.ES6规定块级作用域内可以声明函数，作用类似 let a = function() { }\n\n2.为了向后兼容，ES6附录规定ES6浏览器可以有自己的实现，作用类似于 var a = function() {}\n\n3. a= 99 改变的是全局作用域的a\n\n4. a=30 改变的是块级作用域内的 let a = function() { } 的值\n\n5. 这就很好的解释了为何打印的值是99","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610699408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1759808,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRPuYmxCsTaEroajHBWnBALgPW1PFYXviarfeCpvIGap5xZ3uo6XOyW6QA4ibvuyX0w3YsW0aYRf8w/132","nickname":"Geek_2753cc","note":"","ucode":"9A108A3E1FFC6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1347300,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/e4/f126ef1b.jpg","nickname":"芬兰湖边小画匠","note":"","ucode":"31289C9C4F4085","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350364,"discussion_content":"在块级作用域中，函数声明和变量声明不会提升吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613825897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342498,"ip_address":""},"score":350364,"extra":""}]},{"author":{"id":1656342,"avatar":"https://static001.geekbang.org/account/avatar/00/19/46/16/7eab6017.jpg","nickname":"undefined","note":"","ucode":"8114385B49FDFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353659,"discussion_content":"在函数声明的位置，会将目前块级作用域内的变量的值，同步到全局作用域（函数作用域）下。也就是说 function a() { } 在块级作用域里先被提升，然后赋值为99，然后在函数声明的位置会执行一次给外部的a的赋值操作，所以外部的a会变成99，然后下面的a=30不会影响外部的a","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615185889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2740364,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d0/8c/d18d1309.jpg","nickname":"不凉","note":"","ucode":"3A57D3845F921C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1656342,"avatar":"https://static001.geekbang.org/account/avatar/00/19/46/16/7eab6017.jpg","nickname":"undefined","note":"","ucode":"8114385B49FDFE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543633,"discussion_content":"在函数声明的位置，会将目前块级作用域内的变量的值，同步到全局作用域（函数作用域） 这句话 有详细的资料吗 ？大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641230250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353659,"ip_address":""},"score":543633,"extra":""},{"author":{"id":2740364,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d0/8c/d18d1309.jpg","nickname":"不凉","note":"","ucode":"3A57D3845F921C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1656342,"avatar":"https://static001.geekbang.org/account/avatar/00/19/46/16/7eab6017.jpg","nickname":"undefined","note":"","ucode":"8114385B49FDFE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543634,"discussion_content":"a = 99 为何会操作 外部的a ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641230359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353659,"ip_address":""},"score":543634,"extra":""}]}]},{"had_liked":false,"id":261336,"user_name":"王世昌","can_delete":false,"product_type":"c1","uid":2299674,"ip_address":"","ucode":"DAF76789ECE6B3","user_header":"","comment_is_top":false,"comment_ctime":1605275420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605275420","product_id":100033601,"comment_content":"这个函数的作用：偶数情况下输出100，奇数情况下死调用么？不知道这个函数到底要表达啥，如果不考虑奇数我就不用判断n是啥了直接return 100；换句话说，n没用","like_count":0},{"had_liked":false,"id":259047,"user_name":"Geek_8eba98","can_delete":false,"product_type":"c1","uid":1513283,"ip_address":"","ucode":"9E0A9350385E8C","user_header":"https://wx.qlogo.cn/mmopen/vi_32/5CveKicvahd32dXz4ER890MSicYnKm035v5IPG7PvLkGsQS5WQKa6ibibc65n6OG5Io6I5OuRDTS2G3ObWdLeL0ZUw/132","comment_is_top":false,"comment_ctime":1604623394,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1604623394","product_id":100033601,"comment_content":"觉得入栈出栈例子不够恰当。是不是可以举例为往瓶子里装饼干，后进入的会被先拿出来？","like_count":0,"discussions":[{"author":{"id":1940053,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/55/5baf78e6.jpg","nickname":"Jack","note":"","ucode":"7CE2CFB921D047","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387912,"discussion_content":"放肘子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628495842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347300,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/e4/f126ef1b.jpg","nickname":"芬兰湖边小画匠","note":"","ucode":"31289C9C4F4085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342499,"discussion_content":"吃货","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610700098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258471,"user_name":"Geek_fa7844","can_delete":false,"product_type":"c1","uid":2166551,"ip_address":"","ucode":"549F4B0C65EA37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/nE5MpJtqFzvJobFccuZMoazEDxpzrfav28OH6WYH2djc6Vg8ILXWHbtZOqcOk9VayMOJWMkpQxTwVia6wACeknQ/132","comment_is_top":false,"comment_ctime":1604454017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604454017","product_id":100033601,"comment_content":"最后的思考题为什么是执行n次？","like_count":0},{"had_liked":false,"id":251618,"user_name":"以梦为马","can_delete":false,"product_type":"c1","uid":1970740,"ip_address":"","ucode":"083379A0EDD7BE","user_header":"https://static001.geekbang.org/account/avatar/00/1e/12/34/15aff428.jpg","comment_is_top":false,"comment_ctime":1601730959,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601730959","product_id":100033601,"comment_content":"     我也来分享下 。<br>      let arr = [];<br>      async function runStack(n, maxSize = 1000) {<br>        if (!runStack.count) runStack.count = 0<br>        runStack.count++<br>        arr.push(n)<br>        if (n &lt;= 0) return 100<br>        if (runStack.count &lt; maxSize) {<br>          return runStack(n - 2)<br>        } else {<br>          runStack.count = runStack.count % maxSize || 0<br>          return new Promise(resolve =&gt; {<br>            setTimeout(async () =&gt; {<br>              resolve(await runStack(n - 2))<br>            }, 0)<br>          })<br>        }<br>      }<br>      &#47;&#47; runStack(50000)<br>      console.time(&#39;runStack&#39;)<br>      async function getResult() {<br>        console.log(await runStack(50000))<br>        console.timeEnd(&#39;runStack&#39;)<br>      }<br>      getResult()<br>      &#47;&#47; 100<br>      &#47;&#47; runStack: 162.694091796875 ms<br>      &#47;&#47; arr.length: 25001","like_count":0,"discussions":[{"author":{"id":1970740,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/12/34/15aff428.jpg","nickname":"以梦为马","note":"","ucode":"083379A0EDD7BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312137,"discussion_content":"比尾调用优化的性能差一些😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602592573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242782,"user_name":"Alison","can_delete":false,"product_type":"c1","uid":1133369,"ip_address":"","ucode":"A24829889BBB3F","user_header":"https://static001.geekbang.org/account/avatar/00/11/4b/39/9deda2f8.jpg","comment_is_top":false,"comment_ctime":1597839359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597839359","product_id":100033601,"comment_content":"function _run(n) {<br>  return n - 2<br>}<br>function runStack(n) {<br>  if (n === 0) return 100<br>  return _run(n)<br>}<br>runStack(50000)<br><br>_run的上下文会在执行之后被销毁，不会像之前runStack一样一直往调用栈里挤压runStack的上下文","like_count":0},{"had_liked":false,"id":242219,"user_name":"SSL","can_delete":false,"product_type":"c1","uid":1030373,"ip_address":"","ucode":"E007E54FABBD4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/e5/4e1463de.jpg","comment_is_top":false,"comment_ctime":1597635769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597635769","product_id":100033601,"comment_content":"尾递归不起作用还跟引擎有关系 https:&#47;&#47;imweb.io&#47;topic&#47;5a244260a192c3b460fce275","like_count":0},{"had_liked":false,"id":240449,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1596935835,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596935835","product_id":100033601,"comment_content":"调用栈压栈之前需要先编译目标代码块得到它的执行上下文","like_count":0},{"had_liked":false,"id":238534,"user_name":"大兔叽","can_delete":false,"product_type":"c1","uid":1336608,"ip_address":"","ucode":"E2720A83E5DBF8","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/20/65dd107f.jpg","comment_is_top":false,"comment_ctime":1596189697,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596189697","product_id":100033601,"comment_content":"http:&#47;&#47;kangax.github.io&#47;compat-table&#47;es6&#47;<br>在这里看es6的尾递归调用优化几乎全面飘红，还是分小任务比较靠谱","like_count":0},{"had_liked":false,"id":236027,"user_name":"老乡","can_delete":false,"product_type":"c1","uid":1172484,"ip_address":"","ucode":"90580F3B2F73A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/04/09ee0fd1.jpg","comment_is_top":false,"comment_ctime":1595294313,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595294313","product_id":100033601,"comment_content":"<br>function runStack (n) {<br>    if (n === 0) return 100;<br>    setTimeout(()=&gt;{<br>        return runStack( n- 2);<br>    })<br>    <br>  }<br>  runStack(50000);<br>你好老师，这样写确实runStack( n- 2) 是不会直接进入调用栈的，因为它是异步任务，这个我能理解，但是，虽然它是异步任务，最终会经历eventLoop也会被压入调用栈中执行的啊，那为什么不会栈溢出了呢？","like_count":0,"discussions":[{"author":{"id":1336608,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/20/65dd107f.jpg","nickname":"大兔叽","note":"","ucode":"E2720A83E5DBF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295413,"discussion_content":"我的理解是每次setTimeout都会创建一个宏任务推入事件循环队列，所以不会出现栈溢出的现象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596187641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232479,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1594015264,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594015264","product_id":100033601,"comment_content":"function _func(n){<br>    if (n === 0 || (n &gt; 0 &amp;&amp; n % 2 == 0)){<br>         return 100;<br>    }else{<br>        return null<br>    <br>    }<br><br><br>}","like_count":0},{"had_liked":false,"id":226763,"user_name":"bingmo","can_delete":false,"product_type":"c1","uid":1503447,"ip_address":"","ucode":"F92171460C0EA7","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/d7/82a2ffd4.jpg","comment_is_top":false,"comment_ctime":1592198360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592198360","product_id":100033601,"comment_content":"有个疑问：假设一个递归函数，如果每次调用都要有编译过程，效率会不会太低？是不是v8这个时候通过JIT把函数优化为二进制代码了？","like_count":0},{"had_liked":false,"id":224921,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1154047,"ip_address":"","ucode":"8B0EDECE3AB48D","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ff/3f2d5d19.jpg","comment_is_top":false,"comment_ctime":1591593099,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591593099","product_id":100033601,"comment_content":"老师好，我想问下，代码是一次性编译完，还是一边运行一边编译，上面老师说的:  当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文。只有运行的时候才会去调用函数，像老师这样说的话，是不是就是一边运行，一边编译","like_count":0,"discussions":[{"author":{"id":1810460,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a0/1c/385a4983.jpg","nickname":"oxygen","note":"","ucode":"AADC3BAF6D6DB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291120,"discussion_content":"从我个人理解来看，词法分析，语法分析这些都属于编译过程，生成AST，之后都不属于编译过程了；然后是到V8的解释器ignition，ignition解释AST生成字节码并且执行字节码的这部分都属于执行部分，不过首先解释器还是会去遍历AST一段一段进行解释嘛，首先肯定会创建全局执行上下文嘛，然后遇到函数调用就创建这个函数的执行上下文，这里面就包括创建作用域链，什么变量对象，绑定this之类的，都归在函数执行上下文里面了；完了就是转换成字节码开始真正执行函数。也就是说最后字节码执行才是真正的执行，解释过程会完全忽略掉没有被调用的函数声明，真正执行的是那些被调用的函数","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594711954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217462,"user_name":"超级王子面","can_delete":false,"product_type":"c1","uid":1993059,"ip_address":"","ucode":"7B3C5E8DBAA71B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKEJxeJdVVI7K9dsaCCTC1mpogpZSvAn3RgXJNUPV7gQu6QYGUiaZOtaaA5xwWIjlJAGoEiaSc7R3nQ/132","comment_is_top":false,"comment_ctime":1589508811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589508811","product_id":100033601,"comment_content":"用数组保存前面执行的结果，避免递归。先初始化数组arr为[100]，然后循环生成arr[i]=arr[i-1]-2直到，arr[n]。","like_count":0},{"had_liked":false,"id":210954,"user_name":"zhangbao","can_delete":false,"product_type":"c1","uid":1383052,"ip_address":"","ucode":"9CA3D465BFBBF1","user_header":"https://static001.geekbang.org/account/avatar/00/15/1a/8c/d91b01a6.jpg","comment_is_top":false,"comment_ctime":1587869985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587869985","product_id":100033601,"comment_content":"文中这段代码里的 result 赋值语句前应该使用 var 声明，否则会意外新创建全局变量，就不是图例中的效果了<br><br>```<br><br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)<br>```","like_count":0},{"had_liked":false,"id":208427,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1587355272,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587355272","product_id":100033601,"comment_content":"function runStack (n) {<br>版本 80.0.3987.163（正式版本） （64 位）<br><br>if (n === 0) return 100;<br>  return runStack( n- 1);<br>}<br>runStack(12575)  &#47;&#47;最大栈大小<br> ","like_count":0},{"had_liked":false,"id":185758,"user_name":"沧海一声笑","can_delete":false,"product_type":"c1","uid":1039904,"ip_address":"","ucode":"5297F2F4736B63","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","comment_is_top":false,"comment_ctime":1583676028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583676028","product_id":100033601,"comment_content":"最后一个思考题的解法应该是 自己用栈这个数据结构来模拟递归， 这样的题在大学的课程有学过，不满足终止条件的入栈，满足终止条件的出栈。 ","like_count":0},{"had_liked":false,"id":180340,"user_name":"大前端洞见","can_delete":false,"product_type":"c1","uid":1010463,"ip_address":"","ucode":"1FA227A25F6056","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","comment_is_top":false,"comment_ctime":1582260923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582260923","product_id":100033601,"comment_content":"function runStack (n) {<br>  if (n === 0) return 100;<br>  return runStack.bind(null, n- 2); &#47;&#47; 返回自身的一个版本<br>}<br>&#47;&#47; 蹦床函数，避免递归<br>function trampoline(f) {<br>  while (f &amp;&amp; f instanceof Function) {<br>    f = f();<br>  }<br>  return f;<br>}<br>trampoline(runStack(1000000))；<br>","like_count":0},{"had_liked":false,"id":175821,"user_name":"luckyone","can_delete":false,"product_type":"c1","uid":1820475,"ip_address":"","ucode":"1B94D56A026EB9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/c7/3b/2e49fef1.jpg","comment_is_top":false,"comment_ctime":1580841712,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580841712","product_id":100033601,"comment_content":"迭代或者尾递归，不过尾递归好像不同浏览器支持程度不一样","like_count":0},{"had_liked":false,"id":173935,"user_name":"MwumLi","can_delete":false,"product_type":"c1","uid":1274328,"ip_address":"","ucode":"9A8A72334ADF6E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLicryBoLjDicckia0c5bkOoAlYoR2I9NMK8BiaD7HCGxhS1eM9YSfDuUJuZC90uwv9FvHIVSsBoxFgZw/132","comment_is_top":false,"comment_ctime":1579791396,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579791396","product_id":100033601,"comment_content":"如果执行上小文仅仅包含当前函数范围内的变量，那么如果函数引用了全局变量，因为采用栈结构，那么该怎么找这个全局变量，总不能全部出栈吧？","like_count":0},{"had_liked":false,"id":161015,"user_name":"尝试者说","can_delete":false,"product_type":"c1","uid":1086570,"ip_address":"","ucode":"305ABCD369E7D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/6a/d40f64ec.jpg","comment_is_top":false,"comment_ctime":1576079664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576079664","product_id":100033601,"comment_content":"这段代码当addAll执行完成后，在全局仍能访问到result这个变量，那这个result是闭包还是全局变量吗？<br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)","like_count":0},{"had_liked":false,"id":159360,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575606060,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575606060","product_id":100033601,"comment_content":"eval函数创建的执行上下文，除了eval函数本身，是不是还有参数编译完成后代码所有的执行上下文？但是内部的上下文的创建应该也是由有没有函数生命来决定的吧，如果都是变量声明，其实不会创建新的执行上下文，是这样吗？","like_count":0},{"had_liked":false,"id":158811,"user_name":"匡晨辉","can_delete":false,"product_type":"c1","uid":1763707,"ip_address":"","ucode":"BF88FE410C20F4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e9/7b/b844f3a4.jpg","comment_is_top":false,"comment_ctime":1575457398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575457398","product_id":100033601,"comment_content":"老师您好，我有一个疑问： 我们知道全局上下文是所有执行单元共用的，当我们在一个执行单元中使用了全局上下文中的一个变量，全局上下文是被压如栈底了，我们的栈结构一般是栈顶弹出以后在取栈顶内容，我们当前执行单元还在执行中肯定不能弹出，那么他是怎么一步步取到栈底的内容的呢？","like_count":0},{"had_liked":false,"id":151675,"user_name":"Aaron 财","can_delete":false,"product_type":"c1","uid":1069643,"ip_address":"","ucode":"7FC87714C6A9AB","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/4b/9ef62520.jpg","comment_is_top":false,"comment_ctime":1573778566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573778566","product_id":100033601,"comment_content":"我还想就try catch捕抓异常抛出呢","like_count":0},{"had_liked":false,"id":151268,"user_name":"江霖","can_delete":false,"product_type":"c1","uid":1051487,"ip_address":"","ucode":"D197B3FD012944","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHOZjqhVkWgUrUibLnXkiaFkhJdfWT2BZP3LldE3tArIoHASlhTSp8tiatiamLbQOjKeMcYHkAexoyCg/132","comment_is_top":false,"comment_ctime":1573693162,"is_pvip":false,"replies":[{"id":"58391","content":"是的，result被默认分配到全局上下文中了，一般我都会加个var或者let来声明","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1573791630,"ip_address":"","comment_id":151268,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573693162","product_id":100033601,"comment_content":"<br>var a = 2<br>function add(b,c){<br>  return b+c<br>}<br>function addAll(b,c){<br>var d = 10<br>result = add(b,c)<br>return  a+result+d<br>}<br>addAll(3,6)<br>老师这段代码的result是不是应该在全局的context下","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474420,"discussion_content":"是的，result被默认分配到全局上下文中了，一般我都会加个var或者let来声明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573791630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151034,"user_name":"kvsjsm","can_delete":false,"product_type":"c1","uid":1711954,"ip_address":"","ucode":"A77CB68DF0DA5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1f/52/9e12d6b3.jpg","comment_is_top":false,"comment_ctime":1573645593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573645593","product_id":100033601,"comment_content":"    function run(n)<br>    {<br>        while(n!==0)<br>        {<br>            n=n-2;<br>            console.log(n);<br>        }<br>        console.log(&#39;得到结果100&#39;);<br>        return 100;<br>    }<br>    run(50000);","like_count":0},{"had_liked":false,"id":143747,"user_name":"Louis Hu","can_delete":false,"product_type":"c1","uid":1627255,"ip_address":"","ucode":"289E322B45B5EE","user_header":"https://static001.geekbang.org/account/avatar/00/18/d4/77/6d82909e.jpg","comment_is_top":false,"comment_ctime":1571788199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571788199","product_id":100033601,"comment_content":"请问下老师<br>循环跟递归函数的差异在哪里呢？","like_count":0},{"had_liked":false,"id":143743,"user_name":"Louis Hu","can_delete":false,"product_type":"c1","uid":1627255,"ip_address":"","ucode":"289E322B45B5EE","user_header":"https://static001.geekbang.org/account/avatar/00/18/d4/77/6d82909e.jpg","comment_is_top":false,"comment_ctime":1571787862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571787862","product_id":100033601,"comment_content":"请问下老师<br>递归初始化跟递归函数的差异在哪里呢？","like_count":0},{"had_liked":false,"id":137948,"user_name":"Geek_b42f75","can_delete":false,"product_type":"c1","uid":1609471,"ip_address":"","ucode":"DCE04A7A714EEA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKpW6pOyXOVXF31iaLJsxAqEoPs5pa4om9icGU8fEECAaA1ZPLB21TgyNRiaibypChBiaBrSs3iaMau4qzg/132","comment_is_top":false,"comment_ctime":1569934755,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1569934755","product_id":100033601,"comment_content":"您好，老师，想请教一个问题。<br>以下这种情况为什么不会发生栈溢出呢？<br>var i = 0;<br>(function fn() {<br>    console.log(i++);<br>    setTimeout(fn, 1000); <br>})();","like_count":0,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246147,"discussion_content":"事件循环机制，异步任务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587730408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154741,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9e/b5/a4b4f88f.jpg","nickname":"毕加索","note":"","ucode":"EFF944D268509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50370,"discussion_content":"你这是用setTimeout模拟了一个setInterval ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573711986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137540,"user_name":"花儿与少年","can_delete":false,"product_type":"c1","uid":1046304,"ip_address":"","ucode":"E2D685737E4F1B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/20/e2dfa9c2.jpg","comment_is_top":false,"comment_ctime":1569769689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569769689","product_id":100033601,"comment_content":"老师能否介绍下这个词法环境","like_count":0},{"had_liked":false,"id":137501,"user_name":"Louis","can_delete":false,"product_type":"c1","uid":1351094,"ip_address":"","ucode":"891D9EDD6D2851","user_header":"","comment_is_top":false,"comment_ctime":1569755121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569755121","product_id":100033601,"comment_content":"请问老师 如果在all函数执行过程中需要访问全局变量 这时候怎么处理呢？<br>需要逐个上下文出栈 直到找到对应的变量 然后再逐个压栈吗","like_count":0},{"had_liked":false,"id":134858,"user_name":"米农","can_delete":false,"product_type":"c1","uid":1609589,"ip_address":"","ucode":"A3911088F149D7","user_header":"https://static001.geekbang.org/account/avatar/00/18/8f/75/957476d5.jpg","comment_is_top":false,"comment_ctime":1568943624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568943624","product_id":100033601,"comment_content":"这个告诉不就是 尾递归 吗？最后一步调用自身。还是会溢出？","like_count":0},{"had_liked":false,"id":133621,"user_name":"芳华年月","can_delete":false,"product_type":"c1","uid":1625161,"ip_address":"","ucode":"79DFE01DCB6767","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/49/4fba1938.jpg","comment_is_top":false,"comment_ctime":1568622272,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1568622272","product_id":100033601,"comment_content":"function runStack (n) {<br>\tconsole.log(222)<br>  if (n === 0) return 100;<br>  setTimeout(()=&gt;{return runStack( n- 2)},0)<br>}<br>runStack(5000000)<br>老师，这样算解决了吗，打印是可以的，但不知道为什么时间函数是怎么避免栈溢出的","like_count":0,"discussions":[{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200246,"discussion_content":"我理解的是这些代码不是在一个栈中执行的， 使用setTimeout() , 把新的代码放到任务队列的末尾等前面的代码执行完了再执行。  具体的可以了解下  事件循环 和任务队列。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583671882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133619,"user_name":"芳华年月","can_delete":false,"product_type":"c1","uid":1625161,"ip_address":"","ucode":"79DFE01DCB6767","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/49/4fba1938.jpg","comment_is_top":false,"comment_ctime":1568621968,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1568621968","product_id":100033601,"comment_content":"function runStack (n) {<br>  if (n === 0) return 100;<br>  setTimeout(()=&gt;{return runStack( n- 2)},0)<br>}<br>runStack(5000000)<br>老师，这算解决了吗？我打印了一下确实有，但不知道这个为什么可以避免栈溢出","like_count":0},{"had_liked":false,"id":133381,"user_name":"奋斗达人","can_delete":false,"product_type":"c1","uid":1024497,"ip_address":"","ucode":"BE76F79260F75E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/f1/c260195b.jpg","comment_is_top":false,"comment_ctime":1568540338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568540338","product_id":100033601,"comment_content":"“执行上下文准备好之后，便开始执行全局代码”，老师，请问执行全局代码这时候还在编译阶段吗？这地方很绕，分编译和执行两部分，编译阶段又有执行上下文，不是很好理解。","like_count":0},{"had_liked":false,"id":132531,"user_name":"木易丶","can_delete":false,"product_type":"c1","uid":1614256,"ip_address":"","ucode":"8D526162BDE025","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/U23QibvwAbZ1Vc7bDOjiaicknrmzoWN6JsMwgyHU6FnotiarWicI5s6BxtCG4Rkia0akjtTMAzMqeUkajKb8nMwsXolA/132","comment_is_top":false,"comment_ctime":1568162683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568162683","product_id":100033601,"comment_content":"除了循环以外暂时没想出其它办法，尾递归优化不生效。","like_count":0},{"had_liked":false,"id":132053,"user_name":"Heartbeats","can_delete":false,"product_type":"c1","uid":1387926,"ip_address":"","ucode":"ED1B63B136C15E","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/96/2ba9df33.jpg","comment_is_top":false,"comment_ctime":1568014702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568014702","product_id":100033601,"comment_content":"&#47;**<br> * 优化思路：调用栈中只保留一个调用记录，就是让上一个函数不需要有啥保留的内容<br> * 1.尾递归优化<br> * 2.循环<br> *&#47;<br> <br>function runStack(n, result) {<br>\tif (n === 0) return result;<br>\treturn runStack(n - 2, result);<br>}<br><br>function main(n, result) {<br>\tconsole.log(runStack(n, result));<br>}<br>main(5000, 100);<br><br>&#47;&#47; es6<br>function runStack(n, result = 100) {<br>\tif (n === 0) return result;<br>\treturn runStack(n - 2, result);<br>}<br><br>console.log(runStack(5000));<br>","like_count":0},{"had_liked":false,"id":129251,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1567071261,"is_pvip":false,"replies":[{"id":"48245","content":"都没问题，不过我更倾向不用分号","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567146688,"ip_address":"","comment_id":129251,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567071261","product_id":100033601,"comment_content":"看文中的代码表达式中大部分结尾都没有加“;”号；JS规范中建议加还是不加“;”号？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465359,"discussion_content":"都没问题，不过我更倾向不用分号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567146688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622818,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c3/22/7db1d955.jpg","nickname":"孟","note":"","ucode":"8EE9736F7DCB3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24989,"discussion_content":"不写的封号人家会给你补的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570362893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127730,"user_name":"羽蝶曲","can_delete":false,"product_type":"c1","uid":1337216,"ip_address":"","ucode":"FEA9FB7F321874","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/80/dae518d2.jpg","comment_is_top":false,"comment_ctime":1566785449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566785449","product_id":100033601,"comment_content":"function runStack (n) {<br>  if (n === 0) return 100;<br>  if (n === 1) return 0;<br>  return runStack( n%2);<br>}<br>runStack(50000)<br>是这种意思吗？","like_count":0},{"had_liked":false,"id":127675,"user_name":"阿段","can_delete":false,"product_type":"c1","uid":1620143,"ip_address":"","ucode":"D9EA14A0BE1B69","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ExHHyMiauDKhjmy4n8rgA1e3IVRd8vegMAnOFC7u6p9aiaefEJEZKa2Pu5rARLbeNicuz9NFicpF5YXEFf35gNn2vQ/132","comment_is_top":false,"comment_ctime":1566778275,"is_pvip":false,"replies":[{"id":"47286","content":"👍","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566782114,"ip_address":"","comment_id":127675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566778275","product_id":100033601,"comment_content":"算法经典思想：循环消除尾递归","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464602,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566782114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127097,"user_name":"Geek_4d5914","can_delete":false,"product_type":"c1","uid":1629590,"ip_address":"","ucode":"183228CDF434B0","user_header":"","comment_is_top":false,"comment_ctime":1566553104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566553104","product_id":100033601,"comment_content":"现在v8不支持尾递归优化吧","like_count":0},{"had_liked":false,"id":127000,"user_name":"简简担单","can_delete":false,"product_type":"c1","uid":1390773,"ip_address":"","ucode":"5C25AC5B5D031D","user_header":"https://static001.geekbang.org/account/avatar/00/15/38/b5/c8fdefd2.jpg","comment_is_top":false,"comment_ctime":1566532598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566532598","product_id":100033601,"comment_content":"&#47;&#47; 改成迭代了<br>function runStack(n) {<br>  if (n === 0) return 100;<br>  return () =&gt; runStack(n - 2);<br>}<br><br>const trampoline = f =&gt; (...args) =&gt; {<br>  let result = f(...args);<br>  while (typeof result === &quot;function&quot;) {<br>    result = result();<br>  }<br>  return result;<br>};<br><br>const run= trampoline(runStack);<br>run(50000);","like_count":0},{"had_liked":false,"id":126753,"user_name":"潘启宝","can_delete":false,"product_type":"c1","uid":1624506,"ip_address":"","ucode":"8E697C7164F2E0","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/ba/f50e9ea4.jpg","comment_is_top":false,"comment_ctime":1566464402,"is_pvip":false,"replies":[{"id":"46877","content":"目前大多浏览器都不支持尾优化吧","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566472271,"ip_address":"","comment_id":126753,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566464402","product_id":100033601,"comment_content":"有一个词叫函数尾优化","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464149,"discussion_content":"目前大多浏览器都不支持尾优化吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566472271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622599,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/47/7e4a17fa.jpg","nickname":"月上秦少","note":"","ucode":"1B8151B8940466","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6014,"discussion_content":"Node环境下，支持尾递归优化么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566608927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126724,"user_name":"李懂","can_delete":false,"product_type":"c1","uid":1330436,"ip_address":"","ucode":"539E6639042C88","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/04/5e0d3713.jpg","comment_is_top":false,"comment_ctime":1566458875,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566458875","product_id":100033601,"comment_content":"function runStack(n){<br><br>\tvar _n=n;<br>\tfunction _runStack(n){<br>\t\t_n=n;<br>    }<br>\twhile(true){<br>\t\tif(_n===0){<br>\t\t\treturn 100;<br>\t\t}<br>\t\t<br>\t\t_runStack(_n-2);<br>\t}<br>}","like_count":0,"discussions":[{"author":{"id":1651618,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/a2/585be249.jpg","nickname":"草原上的骆驼🐫","note":"","ucode":"F0B12CB1FEED84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12961,"discussion_content":"你这样写有意义吗，n只是简单类型，再保存一个_n也没有多大必要呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568620126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126699,"user_name":"李懂","can_delete":false,"product_type":"c1","uid":1330436,"ip_address":"","ucode":"539E6639042C88","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/04/5e0d3713.jpg","comment_is_top":false,"comment_ctime":1566453181,"is_pvip":false,"replies":[{"id":"46868","content":"这个讲堆栈空间的时候会讲","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566466518,"ip_address":"","comment_id":126699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566453181","product_id":100033601,"comment_content":"想知道js原始类型和引用类型怎么创建的，存储在什么位置？变量对引用类型保存的是内存地址么？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464125,"discussion_content":"这个讲堆栈空间的时候会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566466518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126674,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566445309,"is_pvip":false,"replies":[{"id":"46848","content":"图用mac自带的keynote画的，我画的的比较原始，编辑MM帮整理过的。<br><br>关于闭包，执行结束后执行上下文依然会从调用栈中弹出来，但是相关内容不会销毁的。<br><br>第十节就要来详细讨论闭包了！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566448743,"ip_address":"","comment_id":126674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566445309","product_id":100033601,"comment_content":"老师你好，如果函数中有闭包，那执行上下文就不会被弹出了，这是一种什么情况？<br>栈的大小具体是多大，哪里可以看？<br>老师的图画得很好，用的是什么软件？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464112,"discussion_content":"图用mac自带的keynote画的，我画的的比较原始，编辑MM帮整理过的。\n\n关于闭包，执行结束后执行上下文依然会从调用栈中弹出来，但是相关内容不会销毁的。\n\n第十节就要来详细讨论闭包了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566448743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126661,"user_name":"Chao","can_delete":false,"product_type":"c1","uid":1108745,"ip_address":"","ucode":"DD7742F5537521","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/09/ba5f0135.jpg","comment_is_top":false,"comment_ctime":1566443306,"is_pvip":false,"replies":[{"id":"46988","content":"循环实现是可以的","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566536683,"ip_address":"","comment_id":126661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566443306","product_id":100033601,"comment_content":"递归是比较好理解的一种方式。 <br><br>runstack 目的是否最后能被减为0  return 100。<br>或者直接改循环  递减 ","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464108,"discussion_content":"循环实现是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566536683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126652,"user_name":"梦飞","can_delete":false,"product_type":"c1","uid":1347214,"ip_address":"","ucode":"931015DC7E93D6","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/8e/177e4b0c.jpg","comment_is_top":false,"comment_ctime":1566441634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566441634","product_id":100033601,"comment_content":"function callStack(n){<br>            if(n&lt;1) return 1090;<br>            return callStack(n&#47;2)<br>},<br>callStack(5000000)","like_count":0},{"had_liked":false,"id":126543,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1566405463,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1566405463","product_id":100033601,"comment_content":"没太明白老师说的优化是什么意思，改造了一下，去掉了递归的使用。<br><br>function runStack (n) {<br>    if (n &gt; 0 &amp;&amp; (n&amp;1)=== 0){<br>        return 100<br>    } else {<br>        throw new Error(&quot;illegal input!&quot;)<br>    }<br>}","like_count":0}]}