{"id":682824,"title":"20｜分库分表容量预估：分库分表的时候怎么计算需要多少个库多少个表？","content":"<p>你好，我是大明。今天我们来聊一下如何分库分表中确定容量的问题。</p><p>在分库分表的面试中，基本上面试官都会问你，你究竟分了几个库分了几个表。这是因为面试官比较关注数据库的数据量问题，如果容量预估不准确，那么后续就需要扩容，而扩容是一个非常麻烦和棘手的事情。</p><p>大部分人在准备面试的时候很少深入思考这个容量是怎么来的，因此面试官问到的时候就是一脸懵。那么今天我就带你深入讨论一下怎么计算分库分表的容量，并教你利用扩容展示自身的能力，尤其是后面会提到的<strong>利用流量复制和重放来做数据校验</strong>，是一个非常高级的技巧，足以证明你在系统设计上有丰富的经验了。</p><p>我们先从分区表说起。</p><h2>分区表</h2><p>大部分数据库都支持分区表。这里我以 MySQL 为例给你介绍一下分区表的主要特性。</p><p>在 MySQL 里，分区表是表的底层组织方式。简单来说，分区表就是把一张表分成几块，每一块存储在磁盘的一个地方，一块也叫做一个分区。比如典型的按月分区，是指每个月产生的数据在一个独立的区域。数据库可以单独处理某一块，也可以多块一起处理。</p><p>分区表的优缺点还是非常分明的。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/10/328f7d46c31fd45e9ba55b21f3dc2310.png?wh=1920x790\" alt=\"图片\"></p><p>虽然分区表的缺点很明显，但在一些场合，分区表还是非常好用的，尤其是一些跟时间有明显关系的业务场景，按照时间来进行分区要比直接使用分库分表更加简单高效。</p><!-- [[[read_end]]] --><h2>2 的幂与数据迁移</h2><p>如果你平时看过一些大厂发布的分库分表实战，你就可能注意到，大厂在容量规划的时候都是按照 2 的幂来规划的，比如说$4 \\times 2 \\times 8$ ，或者$8 \\times 4 \\times 32$。而且在扩容的时候，也是按照 2 的幂来进行的。也就是说，基本上扩容都是选择容量翻倍。这其实是因为 2 的特性，在使用哈希取余来进行分库分表的时候，可以使用位运算来计算余数，非常高效。</p><p>在扩容的时候，如果扩容为原来的 2 倍，那么<strong>只需要迁移一半的数据</strong>。假设原本的表是按照除以 4 的余数（%4）来分库分表的，分别是 tab_0、tab_1、tab_2、tab_3。现在扩容成原来的 2 倍，按照 8 的余数（%8）来分库分表。那么原本 tab_0 上的数据就需要移走一半。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/38/0c9e4b2ea3257a108960db7acd41c238.png?wh=1920x1041\" alt=\"图片\"></p><h2>面试准备</h2><p>想要面好分库分表容量预估这个部分，只了解前面这些知识点还是不够的，你还需要在公司内部弄清楚一些数据。</p><ul>\n<li>你们公司分库分表的实际情况，也就是说你们分了几个集群、几个库、几个表。</li>\n<li>你们公司核心业务或者你维护的业务数据库或数据表的数据量、TPS 和 QPS。</li>\n<li>你们公司是否使用过分区表，分区表是按照什么分区的，每个分区数据量大概是多少。</li>\n</ul><p>这些数据你在面试的时候，都要趁机讲出来。现在的人出去面试，很少有人能够把自己业务的各项数据说清楚，如果你能够说清楚，本身就是一件有竞争力的事情。</p><p>跟容量有关的问题可以称之为夺命连环 call，面试官会一路问下去。</p><ol>\n<li>为什么要分库分表？分区表可不可以？增加从库行不行？</li>\n<li>什么时候需要分库分表？</li>\n<li>分库分表的时候，是分库还是分表？还是既分库又分表？</li>\n<li>分多少库？分多少表？你是怎么计算出来的？</li>\n<li>万一容量预估得不准，估少了怎么办？</li>\n</ol><p>面试过程中，有些时候问法可能不一样，但是本质都是一回事，比如面试官会这样问。</p><ul>\n<li>如果数据库已经到了写瓶颈怎么办？要么优化写操作，要么分库。</li>\n<li>如果数据库已经到了读瓶颈怎么办？要么优化读操作，要么加从库，要么分库或分表。</li>\n</ul><h2>基本思路</h2><p>接下来我们就顺着面试官的提问思路一个个解答。</p><p>面试官问这一类问题的起点差不多都是“你为什么分库分表？”，比如你的项目经历里有跟数据库有关，看起来可以用分区表的内容，那么他就会问“为什么你要分库分表？分区表能不能解决问题？”</p><h3>为什么分库分表？</h3><p>排除刷 KPI 这种想法，分库分表只有一个原因，就是逼不得已了。在面试的时候分库分表是一个很高端的话题，但是在实践中，我一直以来的建议是不到逼不得已不要分库分表。</p><p>那什么情况是逼不得已需要使用分库分表呢？就是数据库遇到了<strong>性能瓶颈</strong>。</p><blockquote>\n<p>一句话总结分库分表，那就是数据库本身出现了性能问题，而且这些性能问题已经没办法通过 SQL 优化、索引优化之类的手段来解决了。</p>\n</blockquote><p>然后我们进一步将分库分表和分区表、读写分离进行对比，刷一个亮点。我们<strong>从硬件资源、并发、数据量</strong>三个引起性能瓶颈的角度去分析。</p><blockquote>\n<p>通常在分库分表之前应该优先考虑分区表和读写分离，因为这两种方案和分库分表比起来都更简单、好维护。<br>\n&nbsp;<br>\n如果是数据库本身硬件资源不足，那么不管是分区表还是读写分离都难以解决问题。比如说数据库网络带宽不够了，这种情况下分区表肯定解决不了；而如果是写操作引发的网络带宽不够，那么读写分离增加从库也解决不了。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/38/13/3810aa9d2f26d1c36f137f7f478fd213.png?wh=1920x1028\" alt=\"图片\"></p><blockquote>\n<p>如果是并发引起的问题，那么分区表和读写分离也不太能解决。比如说表锁，读写分离是没办法解决的，你就算增加 100 个从库，表锁都还是在主库上。分区表虽然因为有分区，可以减少并发竞争，但是如果某一个特定分区上已经遇到写瓶颈了，那么分区表也没用。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/12/23/12853cc4eeb1e45de89cb506c72ce523.png?wh=1920x593\" alt=\"图片\"></p><blockquote>\n<p>如果是单纯因为数据量过大而引起的性能瓶颈，读写分离也不太能够解决。举个例子来说，如果一个表有几千亿条数据，那么显然无论怎么加从库，单一一个查询都会很慢。如果数据量极大，以至于连索引都无法放入内存，此时查询性能极差。</p>\n</blockquote><p>如果上面的分析对你来说太难记，那么你可以记住这个简洁版。</p><ul>\n<li>对于写瓶颈来说，分区表可以缓解问题，而读写分离几乎没有效果，比如频繁地增删改操作。</li>\n<li>对于硬件瓶颈来说，读写分离、分区表基本上也解决不了，比如写操作引发的网络带宽问题。</li>\n</ul><p>最后总结一下，就是你的业务已经触及了<strong>主库写性能瓶颈</strong>，走投无路了。</p><blockquote>\n<p>我们这个业务数据库逼不得已要分库分表的原因就是主库现在已经不堪重负，可以认为 TPS 已经触及到硬件天花板了。虽然理论上我们还是可以购买更强的服务器来部署数据库实例，但是实在太贵了，而且业务增长也还是会触及新机器的性能瓶颈，那么索性分库分表一步到位。我们还准备了其他主从集群，将分库之后的数据库分散在不同的主从集群上，或者说分了数据源。</p>\n</blockquote><p>这里你还可以进一步指出，分库分表和读写分离、分区表都不是互斥的，可以结合在一起使用。</p><blockquote>\n<p>当然，并不是说分库分表之后就不能使用读写分离。实际上分库分表的数据库集群一般也是主从集群。不过分库分表和分区表混合使用的情况比较少，但理论上也是可行的。</p>\n</blockquote><p>最后你可以拔高一下，直戳问题的本质，关键词就是性能瓶颈。</p><blockquote>\n<p>目前业界有很多公司会出一些最佳实践之类的手册，告诉你数据量超过多少多少就要分库，比如说行数超过多少行，或者数据量超过多少 G 就要分表。<br>\n&nbsp;<br>\n但是这些最佳实践其实是一种偷懒的说法，是我们在日常实践中总结出来的很多表在这么一个量级下就会出现性能瓶颈。所以归根结底要不要分库分表，只需要看有没有性能瓶颈。<br>\n&nbsp;<br>\n而且但凡性能瓶颈可以用分区表或者读写分离解决，就不要着急使用分库分表。当然，如果用得起 Oracle 数据库，那就根本不需要分库分表了。</p>\n</blockquote><p>到这一步你就已经彻底解答了为什么要分库分表的问题。我相信到现在，你对什么时候分库、什么时候分表应该心中有数了。</p><h3>分库还是分表？</h3><p>这里我先给出一个适合在面试中回答的三条原则。</p><ol>\n<li>如果是数据库本身的硬件资源引起的性能瓶颈，那么就要分数据源。一句话来说，就是你得有更多的主从集群。</li>\n<li>如果是逻辑数据库引起的性能瓶颈，那么你就只需要在逻辑数据库这个层面进一步分库就可以了。</li>\n<li>如果是单表数据量过大、锁竞争等跟表维度相关的资源引发的性能问题，那么分表就可以了。</li>\n</ol><p>确认了要分库、分表或者同时分库分表之后，现在我们就要考虑分几个的问题了。</p><h3>容量估算</h3><p>分库分表容量确定需要依据两点：你现在有多少数据、你将来有多少数据。所以如果讨论到了容量估算的问题，你就要直接指出核心：<strong>现有数据和增长趋势。</strong>紧接着你就要从这两个点出发解释具体怎么算。</p><h4>存量数据</h4><p>存量数据是最好处理的。基本上你只需要简单计算一下就可以得到。</p><p>不过并不是所有存量数据都需要进行分库分表，部分不重要的、用不上的、历史悠久的数据，不如直接归档，或者放到大数据平台上。所以你真正需要计算的是那些还需要线上继续查询的数据的量。</p><h4>增长趋势</h4><p>这个就是计算难点，你需要考虑两点，一个是现有数据增长率，另一个是数据增长率的变化趋势。用数学术语来说，就是<strong>数据量的一阶导数和二阶导数</strong>。</p><p>那我们怎么知道数据的增长率，以及未来数据的增长率呢？其实这就要<strong>看公司的规划了</strong>。</p><blockquote>\n<p>数据的增长趋势只需要根据公司的战略规划来就可以。比如说今年公司的目标是业务翻倍，那么就可以认为今年数据的增长率是 100%。就算公司没有发布这一类的规划，但是产品经理肯定是背着 KPI的，问一下他们也就知道了。不过正常来说，一家公司都是有三五年规划的，照着规划来预估容量就可以了。</p>\n</blockquote><p>因为扩容非常复杂繁琐，所以这里你可以补充容量预估的原则——宁滥勿缺。</p><blockquote>\n<p>大体上，预估要料敌从宽，也就是按照业务可能的增长上限来评估。因为万一容量预估少了，还需要再扩容，这就比较麻烦了。</p>\n</blockquote><p>紧接着，还有一个可能出现的问题，就是究竟预估多长时间的数据？三五年还是十年？这个问题每个实际操刀分库分表的人答案估计都不一样。</p><p>我个人认为只需要预估未来三年就可以。但是有些公司很有钱同时害怕扩容，所以一开始可能就留足了余量，所以可以满足数十年的需要。</p><blockquote>\n<p>正常来说，预估容量需要考虑未来三年的数据增长情况，只需要确保三年内不会触发扩容就可以。但是三年也不是一个硬性标准，比如说有些公司比较害怕扩容，那么可能直接预估了五年、十年的容量。</p>\n</blockquote><p>但是，这种估计就是一厢情愿，不管你再怎么精打细算最终都有可能估少了。那么逼不得已就还是要扩容。</p><h2>扩容亮点</h2><p>如果我们是从头开始学扩容，那么会非常复杂。但是好在前面你已经学过了数据迁移，所以扩容对你来说已经是一个比较容易掌握的东西了。</p><p>扩容本质上就是两件事：扩容后的容量评估和数据迁移。</p><h3>扩容后的容量</h3><p>首先容量评估这个步骤要比初次分库分表简单得多，基本上都是按照 2 的倍数来进行扩容。</p><blockquote>\n<p>就容量评估来说，因为已经分库分表了，所以只需要按照已有容量的 2 倍来扩容就可以了。比如说现在是分了 4 个库，每个库 8 张表，那么就可以考虑扩容为 8 个库，每个库 8 张表；也可以考虑扩容成为 4 个库，每个库 16 张表。当然，直接扩容到 8 个库，每个库 16 张表也是可以的。</p>\n</blockquote><p>这里面我留了一个引导点，就是什么时候扩容库，什么时候扩容表？这个问题可以参考前面<strong>分库还是分表</strong>这部分知识来回答，它们本质上是同一个问题。</p><p>有一个问题虽然面试官不太可能会问到，但是你还是要有一个心理准备，就是有没有可能缩容？比如最开始的时候，你对业务非常乐观，认为需要 8 * 16 共 128 张表。但是后面可能大环境不好，又或者业务扩张不利，导致 128 张表的数据量都不多。自然就会产生这么一种想法，能不能缩容？</p><p>理论上是能缩容的，但是现在我还没听说哪家公司在分库分表之后又缩容的。所以如果面试官问到能否缩容，那么你就可以这么回答：</p><blockquote>\n<p>理论上是可以的，而且和扩容差不多，都是要解决容量问题和数据迁移问题。</p>\n</blockquote><h3>数据迁移</h3><p>数据迁移的过程和前面基本一样，唯一不一样的地方就是不管操作源表还是操作目标表，都是需要按照分库分表的规则来进行。所以你基本上可以套用之前的数据迁移方案。但是这里我再额外补充一个更加高级的数据校验方案。</p><p>这个校验方案就是<strong>流量复制与重放</strong>，就算你所在的公司没有类似的实践，你也可以跟面试官聊，因为除了少部分大厂做得还可以，其他公司基本上都没做过，或者做得很差。</p><p>方案的原理很简单，就是在保持以源表为准的双写阶段，录制线上的 HTTP 请求，然后再异步重放。拿到原本 HTTP 请求的响应和重放的响应，做一个比较。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/0a/067bc23a3f511527dea0e7aef662540a.png?wh=1920x854\" alt=\"图片\"></p><p>面试谈到数据校验的时候，你可以介绍一下这个方案，不过不建议你说自己用过这个方案，因为里面细节比较多，很容易翻车。这里我用一种设计了这个方案，但是因为复杂度过高所以没有实施的话术来介绍，关键词是<strong>流量录制和重放。</strong></p><blockquote>\n<p>在数据校验上，最开始的时候我设计过一个利用流量录制和重放来做数据校验的方案，真正从业务逻辑上校验数据的准确性、完整性和一致性。整体思路是在 HTTP 入口处引入一个流量复制组件。当有读请求过来的时候，就会把请求整体录制下来，然后异步地重放请求，再把重放请求的响应和原始响应进行对比，判断数据迁移有没有出错。</p>\n</blockquote><p>流量复制和重放一般来说就是使用 tcpcopy 或者 goreplay。有时间你可以去了解一下这两个中间件，学会如何使用就足够了。</p><p>这个数据校验方案有很多可以深挖的地方，所以你可以继续引导。</p><blockquote>\n<p>这个方案还是有比较多的问题，比如说 HTTPS 的问题、并发的问题。</p>\n</blockquote><h4>去除 HTTPS</h4><p>第一个问题是要解决流量复制过程中 HTTPS 协议的问题。那么基本都是在去除了 HTTPS 协议之后才开始录制流量的。简单来说就是放在了网关后面，网关会把 HTTPS 协议转成 HTTP 协议，这样你就可以录制流量了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/e3/3f0148033f74d3fc4e679yy304ce42e3.png?wh=1920x629\" alt=\"图片\"></p><blockquote>\n<p>我这个方案是准备在 Nginx 后面接入流量复制。用户和 Nginx 之间是 HTTPS 通信，但是 Nginx 和后面的服务器之间是 HTTP 通信，所以就可以避开 HTTPS 的问题。</p>\n</blockquote><h4>并发问题</h4><p>这算是一个比较大的亮点，因为擅长分析并发场景这一点就很有竞争力，你设想这样一个场景。</p><ul>\n<li>用户请求 id = 1 的数据，拿到了响应 name =“小红”。</li>\n<li>复制请求，得到数据 id=1，name=“小红”。</li>\n<li>紧接着，又来了一个请求，把 id = 1 的数据 name 更新成了 “小白”。</li>\n<li>数据同步成功，扩容后的目标表也更新成 id=1，name=“小白”。</li>\n<li>重放请求，最终重放得到的响应是 id=1，name=“小白”。</li>\n<li>误报数据不一致。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/89/06/8966167a3ea6db05ecc669a5d5590706.png?wh=1920x1032\" alt=\"图片\"></p><p>这种就是假阳性问题。你可以看到本身数据是一致的，但是因为并发问题，导致校验误报了。如果你还记得前面数据迁移是怎么修复数据的，那么你应该知道，这并没有什么影响。因为修复数据的时候，我们永远都是用源表最新的数据去覆盖目标表最新的数据。这种假阳性就是白做了修复的工作而已。</p><p>你可以进一步打消面试官的疑虑。</p><blockquote>\n<p>虽然这里有可能出现假阳性的问题，不过不足为惧，因为本身数据是一致的，而且假阳性很少出现，因为我们的业务就是一个读多写少的场景。并且流量也不打算 100% 复制，只是小比例复制流量就可以了。</p>\n</blockquote><p>这个流量复制与重放算是一个非常高级也非常难做好的东西，所以面试的时候大概率面试官是没有接触过类似的技术的，你可以放心说。面试官没做过就问不出细节，不太可能把你问倒。</p><h2>面试思路总结</h2><p>最后让我来总结一下这节课的重点。我们这节课先学习了 2 的幂在分库分表中的应用和对数据迁移的影响。</p><p>后面我详细地解释了这几个问题：</p><ol>\n<li>为什么分库分表？这要和分区表、读写分离对比，一句话总结就是有一些性能瓶颈只能用分库分表解决。</li>\n<li>分库还是分表？这就要看性能瓶颈能用分库解决还是能用分表解决。跟硬件资源相关的分数据源，跟逻辑数据库相关的分库，跟数据表相关的就分表。</li>\n<li>容量怎么估算？这要综合考虑已有数据和数据增长趋势，然后根据公司的规划来确定容量。</li>\n<li>扩容怎么扩？重新评估容量 + 数据迁移。数据迁移里面我介绍了一种新的面试思路，使用流量复制和重放来校验数据。</li>\n</ol><p>这一节课最后的流量录制与重放，在面试的时候是包装成了一个没有实施的方案，这也算是一个面试技巧。通过介绍一个高端但是没有实施的方案，进一步加深面试官对你的印象。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/28/840ced935905e52937b7yy9535be0728.png?wh=2010x1902\" alt=\"\"></p><h2>思考题</h2><p>最后，请你来思考几个问题。</p><ul>\n<li>在扩容的时候，我说 2 的幂翻倍扩容的话，只需要迁走一半的数据。如果改成用 3 的幂，原本你的数据是按照除以 3 的余数分库分表，现在变成除以 9 的余数分库分表，那么要迁走多少数据？</li>\n<li>网络上有一种说法是超过 2000 万行数据就要分表了，你知道这个 2000 万是怎么来的吗？</li>\n</ul><p>欢迎你把你的想法分享到评论区，我们一起讨论，也欢迎你把这节课分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":378772,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"重庆","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1690764156,"is_pvip":false,"replies":[{"id":138051,"content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890772,"ip_address":"广东","comment_id":378772,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"1.需要迁走2&#47;3的数据\n2.一般页的大小是16KB，每行数据大小按照1KB，B+树按照三层，主键按照8byte，地址是6byte，所以第一，二层大小为16*1024 &#47; (8+6) = 1170，总体大小就是1170*1170*16=21902400，大概就是2000万\n\n在扩容的时候，我说 2 的幂翻倍扩容的话，只需要迁走一半的数据。如果改成用 3 的幂，原本你的数据是按照除以 3 的余数分库分表，现在变成除以 9 的余数分库分表，那么要迁走多少数据？\n网络上有一种说法是超过 2000 万行数据就要分表了，你知道这个 2000 万是怎么来的吗？","like_count":7,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624755,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651357,"discussion_content":"如果单条数据只有200字节，那么可以存放5倍的数据，也就是一个亿，对吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726760864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378852,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1690879719,"is_pvip":false,"replies":[{"id":138045,"content":"是的，这种检测方式更加多的是验证流程没有问题，不是验证全部数据没有问题。验证全部数据是必须要全量校验与修复的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890061,"ip_address":"广东","comment_id":378852,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"流量复制与重放，这种数据检测机制不可能把所有的数据都检测一遍吧，肯定存在有的数据写了，但是没有去读的情况，或者历史数据大概率不会经常被请求，也就无法被检测到。","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624745,"discussion_content":"是的，这种检测方式更加多的是验证流程没有问题，不是验证全部数据没有问题。验证全部数据是必须要全量校验与修复的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378766,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"广东","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1690737165,"is_pvip":false,"replies":[{"id":138050,"content":"赞！厉害！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890759,"ip_address":"广东","comment_id":378766,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"第一个问题，迁移数据2&#47;3。\n第二个问题，增加索引深度。MySQL 默认是 16K 的页面，抛开它的配置 header，大概就是 15K，因此，非叶子节点的索引页面可放 15*1024&#47;12=1280 条数据，按照每行 1K 计算，每个叶子节点可以存 15 条数据。同理，三层就是 15*1280*1280=24576000 条数据。只有数据量达到 24576000 条时，深度才会增加为 4","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624754,"discussion_content":"赞！厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380308,"user_name":"Geek8004","can_delete":false,"product_type":"c1","uid":2328971,"ip_address":"上海","ucode":"B3828F6414BDB0","user_header":"","comment_is_top":false,"comment_ctime":1693355415,"is_pvip":false,"replies":[{"id":138544,"content":"比如说数据库使用的 Innodb 引擎的 buffer pool 这种整个实例共享的资源出现瓶颈。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693488752,"ip_address":"广东","comment_id":380308,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"逻辑数据库引起的性能瓶颈，这个怎么理解呀。能举个例子吗","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626925,"discussion_content":"比如说数据库使用的 Innodb 引擎的 buffer pool 这种整个实例共享的资源出现瓶颈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693488752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1794471,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/61/a7/cd571263.jpg","nickname":"Shintheair","note":"","ucode":"7DB39BCC3374AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":638878,"discussion_content":"感觉是整个集群的瓶颈？还是得扩集群吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710058220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":626925,"ip_address":"北京","group_id":0},"score":638878,"extra":""}]}]},{"had_liked":false,"id":378824,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1690851706,"is_pvip":false,"replies":[{"id":138046,"content":"1. MySQL 底层的分区表。你说的按月分区，事实上也是利用 MySQL 的底层分区机制。\n2. 不用…… Oracle 是真的强，之前我们的支付业务就是 Oracle 打天下，没有分库分表也撑住了。\n3. 你用了 nginx 配置转发流量就可以了。相当于，浏览器和 nginx 是 HTTPS，nginx 转发到你的后台服务，是 HTTP\n4. 成本高，收益不是很高。而且你注意到我里面讲到一个重放的时候，数据可能已经被修改过了的问题，难以解决，所以用起来效果不是很好。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890242,"ip_address":"广东","comment_id":378824,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请教老师几个问题：\nQ1：“分区表”是指业务层面的分表？还是MySQL内部底层实现的概念？我认为是业务层面的分表，比如按月分，就是业务层面；但是文中有一句“分区表是表的底层组织方式。简单来说，分区表就是把一张表分成几块，每一块存储在磁盘的一个地方”，这句话让我理解成“MySQL底层的分表”。\nQ2：用了Oracle就不用分库分表了吗？\n小型公司，可能用Oracle不用分库分表了。但中大型公司，用Oracle以后估计还需要使用分库分表吧，只不过分得少，比如用MySQL需要100个库，但用Oracle只需要10个库。是这样吗？\nQ3：Nginx将HTTPS转换为HTTP，是自动转换的吗？还是需要做一些配置？\nQ4：流量复制与重放为什么公司很少做？不准确吗？还是因为成本高？","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624747,"discussion_content":"1. MySQL 底层的分区表。你说的按月分区，事实上也是利用 MySQL 的底层分区机制。\n2. 不用…… Oracle 是真的强，之前我们的支付业务就是 Oracle 打天下，没有分库分表也撑住了。\n3. 你用了 nginx 配置转发流量就可以了。相当于，浏览器和 nginx 是 HTTPS，nginx 转发到你的后台服务，是 HTTP\n4. 成本高，收益不是很高。而且你注意到我里面讲到一个重放的时候，数据可能已经被修改过了的问题，难以解决，所以用起来效果不是很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390105,"user_name":"哆啦a喵","can_delete":false,"product_type":"c1","uid":3601364,"ip_address":"北京","ucode":"AE5E51BB43753D","user_header":"https://static001.geekbang.org/account/avatar/00/36/f3/d4/86a99ae0.jpg","comment_is_top":false,"comment_ctime":1714368681,"is_pvip":false,"replies":[{"id":141967,"content":"你说的是分区表吧？不能，因为分区表的理论是不太一样的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715230136,"ip_address":"广东","comment_id":390105,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请教老师一个问题，分片表又该怎么理解呢？查资料，实际上是类似分库，但是并没有分库，只是让表的存储在多个物理实例上？\n\n那分片相关的操作是不是也可以套用老师讲的这些面试技巧和亮点呀。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644387,"discussion_content":"你说的是分区表吧？不能，因为分区表的理论是不太一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715230136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389072,"user_name":"geek001","can_delete":false,"product_type":"c1","uid":3866128,"ip_address":"上海","ucode":"A1598FEF3AEE12","user_header":"","comment_is_top":false,"comment_ctime":1711503146,"is_pvip":false,"replies":[{"id":141991,"content":"不敢补充。我用什么数据都会有人来质疑的，所以就大家自己去测。比如说之前人在我面前说 4C8G 的机器撑住 10W QPS 不是有手就行，让我无力吐槽。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715231498,"ip_address":"广东","comment_id":389072,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"实在太干了，希望作者能补充一些数字支撑，常用的数据库硬件配置大概能抗住的iops tps 等。因为公司没有这个量级，没有清晰点的感受","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644413,"discussion_content":"不敢补充。我用什么数据都会有人来质疑的，所以就大家自己去测。比如说之前人在我面前说 4C8G 的机器撑住 10W QPS 不是有手就行，让我无力吐槽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715231498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378952,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1691039768,"is_pvip":false,"replies":[{"id":138139,"content":"基本上不太可能单独遇到，都是逻辑数据库出性能瓶颈了，那么所在的物理机器的瓶颈也差不多到了。\n\n所以我个人是比较认为，如果只是逻辑上分了库，但是实际上并没有分离，其实没太大的效果。比如说是在 10.10.1.1:3306 上面创建了两个数据库，db_0 和 db_1，我觉得就没啥效果。那么 db_0 遇到了什么跟硬件有关的性能瓶颈，db_1 也肯定遇到了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691412835,"ip_address":"广东","comment_id":378952,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"如果是逻辑数据库引起的性能瓶颈，那么你就只需要在逻辑数据库这个层面进一步分库就可以了。\n\n逻辑数据库可能有什么性能瓶颈呢？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625159,"discussion_content":"基本上不太可能单独遇到，都是逻辑数据库出性能瓶颈了，那么所在的物理机器的瓶颈也差不多到了。\n\n所以我个人是比较认为，如果只是逻辑上分了库，但是实际上并没有分离，其实没太大的效果。比如说是在 10.10.1.1:3306 上面创建了两个数据库，db_0 和 db_1，我觉得就没啥效果。那么 db_0 遇到了什么跟硬件有关的性能瓶颈，db_1 也肯定遇到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691412835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1181867,"avatar":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","nickname":"humor","note":"","ucode":"9B48C4C7BEC92C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":628984,"discussion_content":"文章最后的脑图中写的分逻辑数据库可以解决部分写瓶颈，这个怎么理解呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696483558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625159,"ip_address":"浙江","group_id":0},"score":628984,"extra":""}]}]},{"had_liked":false,"id":378802,"user_name":"ZhiguoXue_IT","can_delete":false,"product_type":"c1","uid":2639055,"ip_address":"北京","ucode":"EAA83F53B54520","user_header":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1690796843,"is_pvip":false,"replies":[{"id":138047,"content":"1.  是的。当然，你要全量迁移也可以，从研发工作量上来说没多少区别。无非就是迁移程序运行久一点还是短一点。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890379,"ip_address":"广东","comment_id":378802,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"1）我理解，比如扩容的时候，之前是8张表，我们新建16张表，即使按照2的倍数，迁移数据到新的表，还是需要全量迁移，作者的意思是前8张表不变，然后新加8张表吗？\n2）第二题就是从b+树的角度来衡量单表的存储量","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624748,"discussion_content":"1.  是的。当然，你要全量迁移也可以，从研发工作量上来说没多少区别。无非就是迁移程序运行久一点还是短一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}