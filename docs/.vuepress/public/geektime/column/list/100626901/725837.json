{"id":725837,"title":"13｜独立王国：初步了解Rust异步并发编程","content":"<p>你好，我是Mike。从今天开始，我们会用几节课的时间系统学习Rust异步并发编程。</p><p>和其他语言不大一样的是，异步 Rust（async Rust）相当于Rust世界里的一块儿新的王国，这个王国有一定的独立性，有它突出的特点。当然，独立并不代表封闭，我们前面所有的知识和经验仍然能顺利地在这个王国里发挥作用。</p><h2>async rust</h2><p>从Rust v1.39版本以后，Rust引入了async关键字，用于支持异步编程的工程学体验，使程序员可以用已经习惯了的同步代码书写方式来编写异步代码。</p><p>如果你了解过早期的JavaScript语言，你可能会对回调模式以及“回调地狱”有所了解。感兴趣的话，你可以搜索“回调地狱”这个关键词，看看它是如何产生的，以及可以用什么方式去解决。</p><p>JavaScript在ECMAScript 2017版本中引入了 <code>async/await</code> 关键字组合，用于改进JavaScript中异步编程体验，从此以后程序员可以用顺序的逻辑书写方式来写出异步执行的代码，而不是那种用回调方式把一段连续的逻辑切割成一小块一小块的。</p><p>Rust其实也差不多，它用类似的方式引入了 <code>async/.await</code> 关键字对。如果你对Mozilla公司有所了解的话，就不会感觉奇怪了，Mozilla是互联网标准组织的重要成员，JavaScript之父就在Mozilla公司，参与了JavaScript标准制定的全过程。同时，Mozilla还推出了Rust语言以及WebAssembly字节码规范。</p><!-- [[[read_end]]] --><h3>async 函数和块（代码片段）</h3><p>在Rust中，用上async的函数长这样：</p><pre><code class=\"language-plain\">async fn foo() {\n  \n}\n</code></pre><p>也就是在原来的fn前加上 async 修饰。另外，还有所谓的 async 块，也就是直接在 async 后面加花括号。</p><pre><code class=\"language-plain\">fn foo() {\n    async {\n      // 这就是async块\n    };\n}\n\nfn foo() {\n    async move { \n      // 加move，类似闭包，明确标识把用到的环境变量移动进来\n    };\n}\n</code></pre><p>上面的函数是可以编译通过的，但是这样写本身会有一些问题。</p><p>提示：</p><pre><code class=\"language-plain\">futures do nothing unless you `.await` or poll them\n</code></pre><p>翻译出来就是：futures不做任何事情，除非你用 <code>.await</code> 或轮询它们。</p><p>Rust中，async函数或块会被视作一个Future对象，类似于JS里的Promise，async 关键字只是用来定义这个Future对象，定义好的这片异步代码并不会自动执行，而是需要和async配对的 <code>.await</code> 去驱动它才会执行。</p><p>比如像下面这样：</p><pre><code class=\"language-plain\">fn foo() {\n&nbsp; &nbsp; let a = async {};\n&nbsp; &nbsp; a.await;            // 用.await驱动异步块\n}\n// 或者更紧凑的写法\nfn foo() {\n    async {}.await;\n}\n</code></pre><p>但是，上述代码是没办法通过编译的，会报这个错。</p><pre><code class=\"language-plain\">error[E0728]: `await` is only allowed inside `async` functions and blocks\n</code></pre><p>它提示说，<code>await</code> 关键字只能在async块或函数里使用。</p><p>于是得改成这样才行：</p><pre><code class=\"language-plain\">async fn foo() {\n    let a = async {};\n    a.await;\n}\n</code></pre><p>这里我们看到两条规则。</p><ol>\n<li>用async定义异步代码，用 <code>.await</code> 驱动执行。</li>\n<li>但是 <code>.await</code> 又只能在async块中调用。</li>\n</ol><p>细心的你可能一下子就推理出来了，这不就是鸡和蛋的问题吗？那么第一个最外层的 async 代码块或函数如何被调用呢？</p><p>我们知道，Rust的程序都是从main函数开始执行的。</p><pre><code class=\"language-plain\">fn main() {\n}\n</code></pre><p>即使是异步代码，也不能破坏这个规则。<br>\n我们试着这样写：</p><pre><code class=\"language-plain\">async fn main() {      // 在main函数前加一个async修饰\n    let a = async {};\n    a.await;\n}\n</code></pre><p>会报错：</p><pre><code class=\"language-plain\">error[E0752]: `main` function is not allowed to be `async`\n</code></pre><p>Rust 明确规定了，main函数前不能加async修饰。也就是说，只能写成这种形式。</p><pre><code class=\"language-plain\">fn main() {\n    let a = async {};\n    a.await;\n}\n</code></pre><p>但是前面又说过了，<code>.await</code> 只能写在async代码块或函数里。我们进入了一个两难的境地。如果就在目前这个体系里面寻找解决方案的话，那只能原地打转。</p><p><strong>这里必然要引入一种外部驱动机制</strong>。比如，有一个辅助函数，它可以接收Future，并驱动它，而不需要使用 <code>.await</code>。像下面这样就行了。</p><pre><code class=\"language-plain\">fn main() {\n    let a = async {};\n    block_on(a);  // 辅助驱动函数 block_on\n}\n</code></pre><p>那么，这个 <code>block_on()</code> 到底是什么呢？<br>\n<strong>这个 <code>block_on()</code> 可不是一个普通的函数，它必须是一个运行时（Runtime）的入口。在它下面，蕴藏着一整套运行时机制。</strong></p><p>到目前为止，我们已经知道，仅仅利用我们之前学到的Rust知识，还驱动不了异步代码，必须要借助于一种新的叫做运行时（Runtime）的机制才能处理。</p><p>目前Rust标准库中还没有内置一个官方的异步Runtime，不过Rust生态中有很多第三方的Runtime实现库，比如tokio、async-std等。而其中tokio应用最为广泛。<strong>通过几年的时间，tokio在第三方异步Runtime的激烈竞争中胜出，可以说它现在已经成为了Rust生态中异步运行时事实上的标准。</strong></p><p>我们下面就开始讲解这个运行时机制。</p><h3>异步运行时是什么？</h3><p>异步运行时是一个库，这个库包含一个响应器（reactor）和一个或多个执行器（executor）。它需要处理哪些事情呢？</p><ol>\n<li>执行异步代码。</li>\n<li>遇到 <code>.await</code> 的时候，判断能不能获取到结果。如果不能，CPU不会一直阻塞等，而是缓存当前任务的状态，然后将当前任务挂起，放到内部一个任务池中，同时向OS注册要监听等待的外部事件。</li>\n<li>询问或执行其他任务。如果所有任务都暂时没有进展，就会进入一个空闲（idle）状态，不会使CPU忙等待。</li>\n<li>只要某个任务对应所监听到的信号来了，也就是说有结果返回了，就会把对应的任务重新捡起来，并从缓存中恢复暂停前的状态，继续往下执行。从代码上看，就是从上一个 <code>.await</code> 后面的代码继续往下执行。</li>\n<li>遇到下一个 <code>.await</code>，就重复第1步～第4步。</li>\n<li>直到这个异步代码（函数）执行完毕，完成操作或返回结果。</li>\n</ol><p>总结起来，就是这6项任务。</p><ol>\n<li>异步代码的执行；</li>\n<li>任务的暂停；</li>\n<li>状态的缓存；</li>\n<li>外部事件的监听注册；</li>\n<li>外部信号来了后，唤醒对应的任务，恢复任务状态；</li>\n<li>多个任务间的调度。</li>\n</ol><p>总之，Rust异步运行时要干的事情还不少。要设计一个高效的异步运行时是一件相当有技术挑战的工作。后面我们会以tokio为例来介绍Rust中的异步编程。</p><h2>tokio异步编程</h2><p>下面我们来熟悉一下基于tokio runtime的代码范例。</p><h3>引入依赖</h3><p>首先，你得在Cargo.toml中引入tokio依赖。</p><pre><code class=\"language-plain\">tokio = { version = \"1\", features = [\"full\"] }\n</code></pre><h3>main函数</h3><p>然后，我们把tokio提供的一个属性宏标注在main函数上面，这样main函数前就可以加async修饰了。</p><p>像下面这样：</p><pre><code class=\"language-plain\">#[tokio::main]      // 这个是tokio库里面提供的一个属性宏标注\nasync fn main() {   // 注意 main 函数前面有 async \n    println!(\"Hello world\");\n}\n</code></pre><p>这个 <code>#[tokio::main]</code> 做的事情其实就是把用 async 修饰的 main 函数展开，展开会类似下面这个样子：</p><pre><code class=\"language-plain\">fn main() {\n    tokio::runtime::Builder::new_multi_thread()\n        .enable_all()\n        .build()\n        .unwrap()\n        .block_on(async {              // 注意这里block_on，里面是异步代码\n            println!(\"Hello world\");\n        })\n}\n</code></pre><p>也就是在main函数里构建一个Runtime实例，第二行代码的意思是 tokio 库下 Runtime 模块的 Builder 类型里的 <code>new_multi_thread()</code> 函数，整个路径用 <code>::</code> 号连接，<code>::</code> 也叫路径符。这个函数创建的是多线程版本的 Runtime 实例。</p><p><code>.enable_all()</code> 用于打开默认所有配置，<code>.build()</code> 用于真正创建实例，它返回一个用Result包起来的结果，<code>.unwrap()</code> 把这个 Result 解开，把Runtime实例拿出来，然后在这个实例上调用 <code>.block_on()</code> 函数。整个过程用的是<strong>链式调用风格</strong>，这个风格在其他语言中也很普遍，只要遵循前一个函数调用返回自身或者新的对象即可。</p><p><code>block_on()</code> 会执行异步代码，这样就把异步代码给加载到这个Runtime实例上并驱动起来了。</p><p>tokio还可以基于当前系统线程创建单线程的Runtime，你可以看一下示例。</p><pre><code class=\"language-plain\">#[tokio::main(flavor = \"current_thread\")]  // 属性标注里面配置参数\nasync fn main() {\n    println!(\"Hello world\");\n}\n</code></pre><p>展开后，是这个样子的：</p><pre><code class=\"language-plain\">fn main() {\n    tokio::runtime::Builder::new_current_thread()  // 注意这一句\n        .enable_all()\n        .build()\n        .unwrap()\n        .block_on(async {\n            println!(\"Hello world\");\n        })\n}\n</code></pre><p>单线程的Runtime由 <code>Builder::new_current_thread()</code>&nbsp;函数创建，代码的其他部分和多线程Runtime都一样。</p><h3>代码示例</h3><p>这里，我们先看几个例子，来了解一下基于tokio的代码长什么样子。</p><h4>文件写</h4><p>下面的例子展示了如何基于tokio做文件的写操作。</p><pre><code class=\"language-plain\">use tokio::fs::File;\nuse tokio::io::AsyncWriteExt;&nbsp;    // 引入AsyncWriteExt trait\n\nasync fn doit() -&gt; std::io::Result&lt;()&gt; {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; let mut file = File::create(\"foo.txt\").await.unwrap();&nbsp; // 创建文件\n&nbsp; &nbsp; file.write_all(b\"hello, world!\").await.unwrap();&nbsp; &nbsp; &nbsp; &nbsp; // 写入内容\n&nbsp; &nbsp; Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n&nbsp; &nbsp; let result = doit().await;&nbsp;  //&nbsp;注意这里的.await\n}\n</code></pre><h4>文件读</h4><p>下面的例子展示了如何基于tokio做文件的读操作。</p><pre><code class=\"language-plain\">use tokio::fs::File;\nuse tokio::io::AsyncReadExt;&nbsp; &nbsp;// 引入AsyncReadExt trait\n\nasync fn doit() -&gt; std::io::Result&lt;()&gt; {\n&nbsp; &nbsp; let mut file = File::open(\"foo.txt\").await.unwrap();  // 打开文件\n&nbsp; &nbsp; let mut contents = vec![];\n    // 将文件内容读到contents动态数组里面，注意传入的是可变引用\n&nbsp; &nbsp; file.read_to_end(&amp;mut contents).await.unwrap();  \n&nbsp; &nbsp; println!(\"len = {}\", contents.len());\n&nbsp; &nbsp; Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n&nbsp; &nbsp; let result = doit().await;  //&nbsp;注意这里的.await\n&nbsp; &nbsp; // process\n}\n</code></pre><p>可以看到，Rust的异步代码和JavaScript的异步代码非常类似，只不过JavaScript的 await 关键字是放在语句前面的。</p><h4>定时器操作</h4><p>下面的例子展示了如何基于tokio做定时器操作。</p><pre><code class=\"language-plain\">use tokio::time;\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() {\n    // 创建Interval实例\n    let mut interval = time::interval(Duration::from_millis(10));\n    // 滴答，立即执行\n    interval.tick().await;\n    // 滴答，这个滴答完成后，10ms过去了\n    interval.tick().await;\n    // 滴答，这个滴答完成后，20ms过去了\n    interval.tick().await;\n}\n</code></pre><p>上面示例里的时间段，<code>Duration::from_millis(10)</code> 表示创建一个10ms的时间段，我们在其他语言中更多是习惯直接传入一个数字，比如传 10000 进去，默认单位是 us。但是前面我们说过，Rust中会尽可能地类型化，因此这里定义了一个Duration类型，它可以接收来自s、ms、us等单位的数值来构造时间段。在这点上，Java和Rust是比较像的。</p><h3>tokio组件</h3><p>tokio发展到现在，已经是一个功能丰富、机制完善的Runtime框架了。它针对异步场景把Rust标准库里对应的类型和设施都重新实现了一遍。具体包含6个部分。</p><ul>\n<li>Runtime设施组件：你可以自由地配置创建基于系统单线程的Runtime和多线程的Runtime。</li>\n<li>轻量级任务 task：你可以把它理解成类似Go语言中的Goroutine这种轻量级线程，而不是操作系统层面的线程。</li>\n<li>异步输入输出（I/O）：网络模块net、文件操作模块fs、signal模块、process模块等。</li>\n<li>时间模块：定时器Interval等。</li>\n<li>异步场景下的同步原语：channel、Mutex锁等等。</li>\n<li>在异步环境下执行计算密集型任务的方案<code>spawn_blocking</code>等等。</li>\n</ul><p>通过对这些基础设施的重新实现，tokio为Rust异步编程的生态打下了坚实的基础，通过几年的发展，一些上层建筑蓬勃发展起来了。比如：</p><ul>\n<li>Hyper：HTTP 协议Server和Client的实现</li>\n<li>Axum：Web开发框架</li>\n<li>async-graphql：GraphQL开发框架</li>\n<li>tonic：gRPC框架的Rust实现</li>\n<li>……</li>\n</ul><h3>tokio底层机制</h3><p>下面我们来看一下tokio的底层魔法到底是什么？</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/68/cb7a4be8f0ae2f99f99967e2b8398b68.png?wh=2008x1328\" alt=\"\"></p><p>最底层是硬件、CPU等。在其上是操作系统，Linux、Windows、macOS 等。不同的操作系统会提供不同的异步抽象机制，比如 Linux 下有 epoll，macOS下有kqueue。</p><p>Tokio的异步Runtime能力实际正是建立在操作系统的这些异步机制上的。Tokio的reactor用来接收从操作系统的异步框架中传回的消息事件，然后通知 tokio waker 把对应的任务唤醒，放回 tokio executor 中执行。每一个任务会被抽象成一个Future来独立处理，而每一个Future在Rust中会被处理成一个结构体，用状态机的方式来管理。Tokio中还实现了对这些任务的安排调度机制。</p><p><span class=\"reference\">注：官方的 <a href=\"https://rust-lang.github.io/async-book/\">async book</a> 有对这个专题更深入的讲解：不过这本异步书写得偏难，并不适合新手，有兴趣的话可以翻阅一下。</span></p><h3>task：轻量级线程</h3><p>tokio提供了一种合作式（而非抢占式）的任务模型：每个任务task都可以看作是一个轻量级的线程，与操作系统线程相对。操作系统默认的线程机制需要消耗比较多的资源，一台普通服务器上能启动的总线程数一般最多也就几千个。而tokio的轻量级线程可以在一台普通服务器上创建上百万个。</p><h4>M：N模型</h4><p>tokio的这个模型是一种M：N模型，M表示轻量级线程的数量，N表示操作系统线程的数量。也就是说，它实际是将所有的轻量级线程映射到具体的N个操作系统线程上来执行，相当于在操作系统线程之上抽象了一层，这层抽象是否高效正是衡量一个Runtime好坏的核心标准。其中，操作系统线程数量N是可以由开发者自行配置的，最常用的默认配置是一个机器上有多少CPU逻辑处理器核，N就等于多少。</p><h4>合作式</h4><p>同时，tokio的轻量级线程之间的关系是一种合作式的。合作式的意思就是同一个CPU核上的任务大家是配合着执行（不同CPU核上的任务是并行执行的）。我们可以设想一个简单的场景，A和B两个任务被分配到了同一个CPU核上，A先执行，那么，只有在A异步代码中碰到 <code>.await</code> 而且不能立即得到返回值的时候，才会触发挂起，进而切换到任务B执行。</p><p>当任务B碰到 <code>.await</code> 时，又会回去检查一下任务A所await的那个值回来没有，如果回来了就唤醒任务A，从之前那个 <code>.await</code> 后面的语句继续执行；如果没回来就继续等待，或者看看能不能从其他核上拿点任务过来执行，因为此时任务A和任务B都在等待await的值回来。任何一个task里await的值回来后（会由操作系统向tokio通知一个事件），tokio就会唤醒对应的task继续往下执行。</p><p>也就是说，在一个task没有遇到 <code>.await</code> 之前，它是不会主动交出这个CPU核的，其他task也不能主动来抢占这个CPU核。所以tokio实现的这个模型叫做合作式的。和它相对的，Go语言自带的Runtime实现的Goroutine是一种抢占式的轻量级线程。</p><h4>非阻塞</h4><p>从前面代码的示范及讲解可以看到，在程序员这个视角看来，代码层面的效果是一个task（一段异步代码）遇到 <code>.await</code> 时，看起来就好像是被阻塞住了，会等待请求结果的返回。而从tokio底层的运行和调度机制来看，它又是非阻塞的。非阻塞的意思是，一个轻量级线程task的“卡住”，不会把用来承载它的操作系统线程给真正地卡住，OS线程被调度了新的任务执行。这样，CPU资源就没有被浪费。</p><p>这个task之间的调度工作是在tokio内部自动完成的，对程序员来说是不可见的。这样就带来了巨大的好处，程序员写异步并发代码，就跟之前写同步代码基本一样，顺着将逻辑写下去就行了。而不会因为去适应异步回调而把代码逻辑打碎分散到文件的各个地方。所以，tokio的task在真正执行的时候是非阻塞的，不会对系统资源造成浪费。</p><p>下面我们来看一下如何创建tokio task，这需要使用 <code>task::spawn()</code> 函数。</p><pre><code class=\"language-plain\">use tokio::task;\n\n#[tokio::main]\nasync fn main() {\n&nbsp; &nbsp; task::spawn(async {\n&nbsp; &nbsp; &nbsp; &nbsp; // 在这里执行异步任务\n&nbsp; &nbsp; });\n}\n</code></pre><p>在这个示例里，main函数里面创建了一个新的task，用来执行具体的任务。我们需要知道，tokio管理下的 <code>async fn main() {}</code> 本身就是一个task，相当于在main task中，创建了一个新的task来执行。这里，main task就是父task，新创建的这个task是子task。</p><p>那聪明的你可能要问了，这两个task之间的生存关系是怎样的呢？它们其实是没有关系的。在tokio中，子task的生存期有可能超过父task的生存期，也就是父task执行结束了，但子task还在执行。如果在父task里要等待子task执行完，再结束自己，保险的做法是用 JoinHandler。</p><p><span class=\"reference\">注：在main函数中有更多细节，如果main函数所在的task先结束了，会导致整个程序进程退出，有可能会强制杀掉那些新创建的子task。</span></p><pre><code class=\"language-plain\">use tokio::task;\n\n#[tokio::main]\nasync fn main() {\n    // 在这里执行异步任务\n    let task_a = task::spawn(async {    \n        \"hello world!\"\n    });\n    // ...\n    // 等待子任务结束，返回结果\n    let result = task_a.await.unwrap();\n    assert_eq!(result, \"hello world!\");\n}\n</code></pre><p>JoinHandler是什么意思呢？这个新概念跟task的管理相关。我们在main task中里创建一个新task后，<code>task::spawn()</code> 函数实际有一个返回值，它返回一个handler，这个handler可以让我们在main task里管理新创建的task。这个handler也可以用来指代这个新的task，相当于给这个task取了一个名字。比如示例里，我们就把这个新的任务命名为task_a，它的类型是 JoinHandler。在用 <code>spawn()</code> 创建task_a后，这个新任务就<strong>立即执行</strong>。</p><p><code>task_a.await</code> 会返回一个Result，所以上面代码中，需要加一个 <code>unwrap()</code> 把task_a真正的返回内容解包出来。至于对task的 <code>.await</code> 为什么会返回一个Result，而不是直接返回异步任务的返回值本身，是因为task里有可能会发生panic。你可以看一下例子。</p><pre><code class=\"language-plain\">use tokio::task;\n\n#[tokio::main]\nasync fn main() {\n    let task_a = task::spawn(async {\n        panic!(\"something bad happened!\")\n    });\n    // 当task_a里面panic时，对task handler进行.await，会得到Err\n    assert!(task_a.await.is_err());\n}\n</code></pre><p>由于task可能会panic，所以就得对task的返回值用Result包一层，这样方便在上一层的task里处理这种错误。<strong>在Rust中，只要过程中有可能返回错误，那就果断用Result包一层作为返回值，这是典型做法。</strong></p><p>有了 JoinHandler，我们可以方便地创建一批新任务，并等待它们的返回值。你可以看一下示例。</p><pre><code class=\"language-plain\">use tokio::task;\n\nasync fn my_background_op(id: i32) -&gt; String {\n    let s = format!(\"Starting background task {}.\", id);\n    println!(\"{}\", s);\n    s\n}\n\n#[tokio::main]\nasync fn main() {\n    let ops = vec![1, 2, 3];\n    let mut tasks = Vec::with_capacity(ops.len());\n    for op in ops {\n        // 任务创建后，立即开始运行，我们用一个Vec来持有各个任务的handler\n        tasks.push(tokio::spawn(my_background_op(op)));\n    }\n    let mut outputs = Vec::with_capacity(tasks.len());\n    for task in tasks {\n        outputs.push(task.await.unwrap());\n    }\n    println!(\"{:?}\", outputs);\n}\n// 输出\nStarting background task 1.\nStarting background task 2.\nStarting background task 3.\n</code></pre><p>上面示例里，我们用 tasks 这个动态数组持有3个异步任务的handler，<strong>它们是并发执行的</strong>。然后对 tasks 进行迭代，等待每个task执行完成，并且搜集任务的结果放到 outputs 动态数组里。最后打印出来。</p><p>可以看到，在tokio中创建一批任务并发执行非常简单，循环调用 <code>task::spawn()</code> 就行了，并且还能对创建的任务进行管理。</p><h3>哪些操作要加 <code>.await</code>？</h3><p>到目前为止，我们已经初步感知到了tokio的强大能力，确实很好用，也很直观。但是我们还有一个疑惑，在写异步代码的时候，我怎么知道哪些地方该加 <code>.await</code>，哪些地方不该加呢？</p><p>一个总体的原则是，<strong>涉及到I/O操作的，都可以加</strong>，因为tokio已经帮我们实现了一份异步的对应于Rust标准库的I/O实现。最常见的I/O操作就是网络I/O、磁盘I/O等等。具体来说，有几大模块。</p><ul>\n<li>net模块：网络操作；</li>\n<li>fs模块：文件操作；</li>\n<li>定时器操作：Interval、sleep等函数；</li>\n<li>channel：四种管道 oneshot、mpsc、watch、broadcast；</li>\n<li>signal模块：系统信号处理；</li>\n<li>process模块：调用系统命令等。</li>\n</ul><p>具体可以查看 <a href=\"https://docs.rs/tokio/1.32.0/tokio/index.html\">tokio API</a>。在查看API文档的时候，只要那个接口前面有 async 关键字修饰，那么使用的时候就需要加 <code>.await</code>。比如，<code>tokio::fs::read()</code> 的定义就是这样的：</p><pre><code class=\"language-plain\">pub async fn read(path: impl AsRef&lt;Path&gt;) -&gt; Result&lt;Vec&lt;u8&gt;&gt;\n</code></pre><p>而像其他的一些数据结构的基本操作，比如 <code>Vec&lt;T&gt;</code>、<code>HashMap&lt;K, V&gt;</code> 的操作等，由于它们都是在内存里执行，它们的接口前面也没有 async 关键字修饰，所以不需要也不能加 <code>.await</code>。</p><h2>小结</h2><p>这节课我们一起学习了Async Rust和tokio相关的基本概念。Async Rust在整个Rust的体系中，相对于std Rust来讲是一片新的领地。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/11/8d8befc6fc1fb09b5f496489b3bb3611.jpg?wh=1428x1344\" alt=\"\"></p><p>Rust中的 async 代码具有<strong>传染性</strong>，也就是说一个函数如果要调用一个async函数的话，它本身也需要是async函数。Rust在语言层面提供了 <code>async/.await</code> 语法的支持，但是其并没有提供一个官方的异步运行时，来对异步代码的执行进行驱动。而tokio是整个Rust生态中经历过激烈竞争后的异步运行时胜出者，具有强大的功能、丰富的特性和广泛的使用度。</p><p>tokio提供了一套轻量级线程模型，方便程序员使用Rust进行大规模并发程序开发，特别适合高性能Web服务器领域，也适合处理一般的异步业务。</p><h2>思考题</h2><p>为什么我们要把async Rust叫做“独立王国”呢？欢迎你把自己的思考分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"12｜智能指针：从所有权看智能指针","id":725815},"right":{"article_title":"14｜tokio实战：编写一个网络命令行程序","id":726207}},"comments":[{"had_liked":false,"id":384450,"user_name":"Geek_e72251","can_delete":false,"product_type":"c1","uid":3733050,"ip_address":"广东","ucode":"894904DE2E6AC0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VF71Gcf2C2bjYPFCRv0TPfwhkJmT5WhtusltuaXQM0KMDibdallNFypqWV6v2FJ4bqNwzujiaF5LEDeia7JMZTTtw/132","comment_is_top":false,"comment_ctime":1700929691,"is_pvip":false,"replies":[{"id":140270,"content":"1。从程序员人体工学视角看，async&#47;await 让我们好像在写顺序同步代码。\n2。从cpu执行视角来看，await等待那个task进展的时候，cpu跑去执行其他task了。\n\n这个在文章中有大段段落讲解。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701052199,"ip_address":"重庆","comment_id":384450,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"异步函数必须要.await得到返回结果才能够接着往下执行吗？那和同步函数有什么区别","like_count":6,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632596,"discussion_content":"1。从程序员人体工学视角看，async/await 让我们好像在写顺序同步代码。\n2。从cpu执行视角来看，await等待那个task进展的时候，cpu跑去执行其他task了。\n\n这个在文章中有大段段落讲解。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1701052199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2557688,"avatar":"https://static001.geekbang.org/account/avatar/00/27/06/f8/09ad484b.jpg","nickname":"学水","note":"","ucode":"F8B27FD11187EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":632859,"discussion_content":"那我理解，.await和java的future的.get()其实也一样，同样堵塞后会去执行别的任务，只是tokio在协程层面上的，语言runtime中的上下文切换比javd这种kernel thread在系统内核态上下文切换的成本要小得多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701471597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632596,"ip_address":"加拿大","group_id":0},"score":632859,"extra":""}]},{"author":{"id":2867445,"avatar":"","nickname":"WiHceeg","note":"","ucode":"5AA0BD044E3939","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":642503,"discussion_content":"我理解是这样的，.await确实是得到返回结果才能够接着往下执行后面的代码，如果不是要马上用到这个结果，spawn 后就先不要加.await ，它也会在后台跑着，等要用到返回结果之前再给 spawn 出来的 JoinHandle 加 .await","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713619145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019939,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/23/5c74e9b7.jpg","nickname":"$侯","note":"","ucode":"488B1BD3924E7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634564,"discussion_content":"如果你有陈天老师的课，可以去看38节，有详细的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703663946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3733050,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VF71Gcf2C2bjYPFCRv0TPfwhkJmT5WhtusltuaXQM0KMDibdallNFypqWV6v2FJ4bqNwzujiaF5LEDeia7JMZTTtw/132","nickname":"Geek_e72251","note":"","ucode":"894904DE2E6AC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019939,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/23/5c74e9b7.jpg","nickname":"$侯","note":"","ucode":"488B1BD3924E7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634590,"discussion_content":"谢谢，看了很有收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703685750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":634564,"ip_address":"广东","group_id":0},"score":634590,"extra":""}]}]},{"had_liked":false,"id":385995,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"北京","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","comment_is_top":false,"comment_ctime":1703815373,"is_pvip":false,"replies":[{"id":140676,"content":"好思考，后面会讲到这个","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703842143,"ip_address":"重庆","comment_id":385995,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"如果启动了多个异步任务，不想挨着顺序await（因为有可能后面启动的提前结束），有没有办法实现等待一批任务并且其中一个任务完成就返回处理呢？处理后再去等待其它未完成的任务。","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634729,"discussion_content":"好思考，后面会讲到这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703842143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384378,"user_name":"cfanbo","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"上海","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/269eb3d6.jpg","comment_is_top":false,"comment_ctime":1700738346,"is_pvip":false,"replies":[{"id":140245,"content":"是的，所以tokio还有spawn_blocking这个东西，专门用于这种阻塞式的任务。go是因为要统一一套机制，没办法，只能设计成抢占式，然而其实你对你要处理的业务一般是要预期的，rust这样更灵活。关于tokio的抢占式调度，也在构思中：https:&#47;&#47;docs.rs&#47;tokio&#47;latest&#47;tokio&#47;task&#47;index.html#unconstrained","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700793486,"ip_address":"重庆","comment_id":384378,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"也就是说，在一个 task 没有遇到 .await 之前，它是不会主动交出这个 CPU 核的，其他 task 也不能主动来抢占这个 CPU 核。所以 tokio 实现的这个模型叫做合作式的。和它相对的，Go 语言自带的 Runtime 实现的 Goroutine 是一种抢占式的轻量级线程。\n---\n这样如果一个task长期被执行，同一个cpu 上的其它 task将长期得不到执行，有失公平性的吗？go的抢占印象中就是解决这个不公平的问题","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632458,"discussion_content":"是的，所以tokio还有spawn_blocking这个东西，专门用于这种阻塞式的任务。go是因为要统一一套机制，没办法，只能设计成抢占式，然而其实你对你要处理的业务一般是要预期的，rust这样更灵活。关于tokio的抢占式调度，也在构思中：https://docs.rs/tokio/latest/tokio/task/index.html#unconstrained","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700793486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389488,"user_name":"青鸟飞鱼","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"四川","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1712728909,"is_pvip":false,"replies":[{"id":141736,"content":"死循环会占掉一个cpu 逻辑core，也就是那个core会一直100% running","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713027569,"ip_address":"加拿大","comment_id":389488,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"如果我写一个死循环，会不会有问题","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641815,"discussion_content":"死循环会占掉一个cpu 逻辑core，也就是那个core会一直100% running","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713027569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386497,"user_name":"三过rust门而不入","can_delete":false,"product_type":"c1","uid":3537445,"ip_address":"广东","ucode":"88ECCC99AB2672","user_header":"https://static001.geekbang.org/account/avatar/00/35/fa/25/e40eeb9c.jpg","comment_is_top":false,"comment_ctime":1704962839,"is_pvip":false,"replies":[{"id":140901,"content":"感谢反馈！！已经开始处理了🌹","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1705046987,"ip_address":"北京","comment_id":386497,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;667313965#:~:text=Rust%20%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3Rust%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%201%20async%20rust%20%E4%BB%8E%20Rust%20v1.39,%E5%87%BD%E6%95%B0%E5%89%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8A%A0%20async%20%E4%BF%AE%E9%A5%B0%E4%BA%86%E3%80%82%20...%207%20%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%20...%20%E6%9B%B4%E5%A4%9A%E9%A1%B9%E7%9B%AE\n被转载了唐老师，很多文章都转了","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635688,"discussion_content":"感谢反馈！！已经开始处理了🌹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705046987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384047,"user_name":"哄哄","can_delete":false,"product_type":"c1","uid":3779530,"ip_address":"北京","ucode":"F75FB23BEDC60A","user_header":"https://static001.geekbang.org/account/avatar/00/39/ab/ca/32d6c05d.jpg","comment_is_top":false,"comment_ctime":1700170861,"is_pvip":false,"replies":[{"id":140112,"content":"对，这块儿没做区分，有时会搞混，不知道一个符号是struct还是trait。这块儿可以在自己项目中约定，比如 trait 都以Tr结尾。trait 的scope机制大家在开始时都不适应，后面应该ide能帮助提示。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700216021,"ip_address":"重庆","comment_id":384047,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"rust的命名其他都挺好，就是有时候难以一眼分清引入的是struct还是trait。他们都是首字母大写驼峰命名，而且，程序用到什么trait就需要引用什么trait，不像python里引用类就行了。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631973,"discussion_content":"对，这块儿没做区分，有时会搞混，不知道一个符号是struct还是trait。这块儿可以在自己项目中约定，比如 trait 都以Tr结尾。trait 的scope机制大家在开始时都不适应，后面应该ide能帮助提示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700216021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2826132,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64Npva5ZKf4IPwhy6rDAX0L77QNESbalnXhnGKibcTbwtSaNC0hO6z0icO8DYI9Nf4xwg/132","nickname":"eriklee","note":"","ucode":"6F755DB7C29DD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632020,"discussion_content":"你这问题啥语言都有吧，IDE都有很好的提示啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700318858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386559,"user_name":"Geek_3b58b9","can_delete":false,"product_type":"c1","uid":3196265,"ip_address":"江苏","ucode":"E9DE52FD0B5E29","user_header":"","comment_is_top":false,"comment_ctime":1705072658,"is_pvip":false,"replies":[{"id":140941,"content":"运行时也可以裸机实现。 标准的桌面和server都是基于os的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705326533,"ip_address":"重庆","comment_id":386559,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"嵌入式系统中好像是用Embassy这个运行时的，既然运行时是依赖底层操作系统的，那嵌入式上用的这个运行时是基于什么的啊？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635882,"discussion_content":"运行时也可以裸机实现。 标准的桌面和server都是基于os的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705326533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385613,"user_name":"superggn","can_delete":false,"product_type":"c1","uid":3623568,"ip_address":"北京","ucode":"831CCD98B393FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","comment_is_top":false,"comment_ctime":1702974571,"is_pvip":false,"replies":[{"id":140567,"content":"就是这个思路。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703123579,"ip_address":"重庆","comment_id":385613,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"笔记：\n\nasync runtime &#47; 异步运行时\n\n- async fn &#47; async block 必须用 await 才能跑\n- await 必须写在 async block &#47; async fn 里\n- main 不能是 async 的 =&gt; main 里头不能有 await =&gt; 那 main 里写啥来驱动 async fn &#47; async block?\n- 这时就需要一个 async runtime &#47; 异步运行时\n- 简单来说就是一个可以写在 main 里的 await\n","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634243,"discussion_content":"就是这个思路。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1703123579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384785,"user_name":"哄哄","can_delete":false,"product_type":"c1","uid":3779530,"ip_address":"北京","ucode":"F75FB23BEDC60A","user_header":"https://static001.geekbang.org/account/avatar/00/39/ab/ca/32d6c05d.jpg","comment_is_top":false,"comment_ctime":1701517099,"is_pvip":false,"replies":[{"id":140318,"content":"一样的，pub use而已","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701740510,"ip_address":"重庆","comment_id":384785,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"请问，tokio::task::spawn和tokio::spawn的区别","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632988,"discussion_content":"一样的，pub use而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701740510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384076,"user_name":"Geek_72807e","can_delete":false,"product_type":"c1","uid":3570665,"ip_address":"山西","ucode":"9E9A6277605048","user_header":"","comment_is_top":false,"comment_ctime":1700227915,"is_pvip":false,"replies":[{"id":140163,"content":"先回答第二个问题，得都use 到当前 crate中来。\n\n第一个问题没懂什么意思哈。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700540978,"ip_address":"重庆","comment_id":384076,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"请问老师，如果crateA为crateB1.1版本实现了一个trait，而我的项目中依赖了crateB1.0版本，那么这个trait会失效吗？还有，我奇怪的是如果一个struct的trait分散在各个crate中，怎么能让这些trait都生效呢……","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632178,"discussion_content":"先回答第二个问题，得都use 到当前 crate中来。\n\n第一个问题没懂什么意思哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700540978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3570665,"avatar":"","nickname":"Geek_72807e","note":"","ucode":"9E9A6277605048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":632258,"discussion_content":"好的，老师，那第一个先忽略了，我再试试。今天反复调试，似乎是和版本有关系，版本不对编译不通过。\n\n第二个问题还有一点疑问，如果是在一个crate中为另一个crate中的自定义Error实现了一个From&lt;T=sth&gt;的泛型trait。这个情况想在第三个crate中使用该Error，怎么保证这个From一定生效呢……，因为From不需要引入，我编译失败了，不得不改库源码……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700584611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632178,"ip_address":"山西","group_id":0},"score":632258,"extra":""}]}]},{"had_liked":false,"id":384060,"user_name":"Apa琦","can_delete":false,"product_type":"c1","uid":3710982,"ip_address":"上海","ucode":"A4A76A4D7364EA","user_header":"https://static001.geekbang.org/account/avatar/00/38/a0/06/f0ca94ca.jpg","comment_is_top":false,"comment_ctime":1700199160,"is_pvip":false,"replies":[{"id":140110,"content":"对的，rust没有内置async runtime","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700215852,"ip_address":"重庆","comment_id":384060,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"tokio是完全使用操作系统的api实现的异步，那rust底层就没有提供异步的方法么。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631971,"discussion_content":"对的，rust没有内置async runtime","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700215852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384052,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"广东","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1700181594,"is_pvip":false,"replies":[{"id":140109,"content":"08里面有讲，18里面也要讲关于这个的处理方法。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700215833,"ip_address":"重庆","comment_id":384052,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"请问老师，如果异步函数返回的是 Result，那么就必须在 .await 后面继续调用 .unwrap() ？在实际项目里，有没有不使用 unwrap() 的写法吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631970,"discussion_content":"08里面有讲，18里面也要讲关于这个的处理方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700215833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389583,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"广东","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1712925595,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师，是 JoinHandle 而不是 JoinHandler!","like_count":1},{"had_liked":false,"id":396116,"user_name":"chai","can_delete":false,"product_type":"c1","uid":1202222,"ip_address":"天津","ucode":"C686EB1B1EBAB6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep66fdwo3ebSicKjf0iacAx4C2tZOthDDD4bSJqib1iauFBK6EoMSWUBp4UbbN2BQlib7mFR3hQD6MUwew/132","comment_is_top":false,"comment_ctime":1733154898,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"&quot;独立王国“是相对于rust同步机制来说的，在异步机制中，对其对应的同步机制，都重新实现了一遍，例如文件io、网络io等","like_count":0},{"had_liked":false,"id":391763,"user_name":"独钓寒江","can_delete":false,"product_type":"c1","uid":1203049,"ip_address":"中国香港","ucode":"2C81906FD88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","comment_is_top":false,"comment_ctime":1719046266,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"比如示例里，我们就把这个新的任务命名为 task_a，它的类型是 JoinHandler。在用 spawn() 创建 task_a 后，这个新任务就立即执行。--&gt; 不是应该碰到await才执行吗？","like_count":0},{"had_liked":false,"id":390433,"user_name":"Aioria","can_delete":false,"product_type":"c1","uid":1161407,"ip_address":"广东","ucode":"E7158D2E1C1B72","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/bf/3a6e8773.jpg","comment_is_top":false,"comment_ctime":1715327653,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师，这门课程中没有介绍线程方面的内容，是不是在实际开发中用异步编程就行了，除非特殊场景否则根本不需要用到线程相关操作呢？类似go语言中，只要使用协程就可以了。","like_count":0}]}