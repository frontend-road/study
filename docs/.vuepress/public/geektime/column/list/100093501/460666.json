{"id":460666,"title":"21｜函数：请叫我“一等公民”","content":"<p>你好，我是Tony Bai。</p><p>在前面的几讲中，我们学习了用于对现实世界实体抽象的类型，以及用来实现算法逻辑控制的几种控制结构。从这一讲开始，我们来学习一下Go代码中的基本功能逻辑单元：<strong>函数</strong>。</p><p>学到这里，相信你对Go中的函数已经不陌生了，因为我们在前面的示例程序中一直都在使用函数。函数是现代编程语言的基本语法元素，无论是在命令式语言、面向对象语言还是动态脚本语言中，函数都位列C位。</p><p>Go语言也不例外。在Go语言中，<strong>函数是唯一一种基于特定输入，实现特定任务并可返回任务执行结果的代码块</strong>（Go语言中的方法本质上也是函数）。如果忽略Go包在Go代码组织层面的作用，我们可以说 <strong>Go程序就是一组函数的集合</strong>，实际上，我们日常的Go代码编写大多都集中在实现某个函数上。</p><p>但“一龙生九子，九子各不同”！虽然各种编程语言都加入了函数这个语法元素，但各个语言中函数的形式与特点又有不同。那么Go语言中函数又有哪些独特之处呢？考虑到函数的重要性，我们会用三节课的时间，全面系统地讲解Go语言的函数。</p><p>在这一节课中，我们就先来学习一下函数基础，以及Go函数最与众不同的一大特点。我们先从最基本的函数声明开始说起。</p><h2>Go函数与函数声明</h2><p>函数对应的英文单词是 <strong>Function</strong>，Function这个单词原本是<strong>功能、职责</strong>的意思。编程语言使用Function这个单词，表示将一个大问题分解后而形成的、若干具有特定功能或职责的小任务，可以说十分贴切。函数代表的小任务可以在一个程序中被多次使用，甚至可以在不同程序中被使用，因此<strong>函数的出现也提升了整个程序界代码复用的水平</strong>。</p><!-- [[[read_end]]] --><p>那Go语言中，函数相关的语法形式是怎样的呢？我们先来看最常用的Go函数声明。</p><p>在Go中，我们定义一个函数的最常用方式就是使用<strong>函数声明</strong>。我们以Go标准库fmt包提供的Fprintf函数为例，看一下一个<strong>普通Go函数的声明</strong>长啥样：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/65/d7a5cea2778a833e54b22a5c38e34d65.jpg?wh=1920x769\" alt=\"图片\"></p><p>我们看到一个Go函数的声明由五部分组成，我们一个个来拆解一下。</p><p><strong>第一部分是关键字func</strong>，Go函数声明必须以关键字func开始。</p><p><strong>第二部分是函数名</strong>。函数名是指代函数定义的标识符，函数声明后，我们会通过函数名这个标识符来使用这个函数。在同一个Go包中，函数名应该是唯一的，并且它也遵守Go标识符的导出规则，也就是我们之前说的，首字母大写的函数名指代的函数是可以在包外使用的，小写的就只在包内可见。</p><p><strong>第三部分是参数列表。</strong>参数列表中声明了我们将要在函数体中使用的各个参数。参数列表紧接在函数名的后面，并用一个括号包裹。它使用逗号作为参数间的分隔符，而且每个参数的参数名在前，参数类型在后，这和变量声明中变量名与类型的排列方式是一致的。</p><p>另外，Go函数支持变长参数，也就是一个形式参数可以对应数量不定的实际参数。Fprintf就是一个支持变长参数的函数，你可以看到它第三个形式参数a就是一个变长参数，而且变长参数与普通参数在声明时的不同点，就在于它会在类型前面增加了一个“…”符号。关于函数对变长参数的支持，我们在后面还会再讲。</p><p><strong>第四部分是返回值列表</strong>。返回值承载了函数执行后要返回给调用者的结果，返回值列表声明了这些返回值的类型，返回值列表的位置紧接在参数列表后面，两者之间用一个空格隔开。不过，上图中比较特殊，Fprintf函数的返回值列表不仅声明了返回值的类型，还声明了返回值的名称，这种返回值被称为<strong>具名返回值</strong>。多数情况下，我们不需要这么做，只需声明返回值的类型即可。</p><p><strong>最后，放在一对大括号内的是函数体</strong>，函数的具体实现都放在这里。不过，函数声明中的<strong>函数体是可选的</strong>。如果没有函数体，说明这个函数可能是在Go语言之外实现的，比如使用汇编语言实现，然后通过链接器将实现与声明中的函数名链接到一起。没有函数体的函数声明是更高级的话题了，你感兴趣可以自己去了解一下，我们这里还是先打好基础。</p><p>看到这里，你可能会问：<strong>同为声明，为啥函数声明与之前学过的变量声明在形式上差距这么大呢</strong>? 变量声明中的变量名、类型名和初值与上面的函数声明是怎么对应的呢？</p><p>为了让更好地理解函数声明，也给我们后续的讲解做铺垫，这里我们就横向对比一下，把上面的函数声明等价转换为变量声明的形式看看：</p><p><img src=\"https://static001.geekbang.org/resource/image/53/5c/533ebf8fef6605166a846ef74a321b5c.jpg?wh=1920x772\" alt=\"图片\"></p><p>转换后的代码不仅和之前的函数声明是等价的，而且这也是完全合乎Go语法规则的代码。对照一下这两张图，你是不是有一种豁然开朗的感觉呢？<strong>这不就是在声明一个类型为函数类型的变量吗</strong>！</p><p>我们看到，函数声明中的函数名其实就是变量名，函数声明中的func关键字、参数列表和返回值列表共同构成了<strong>函数类型</strong>。而参数列表与返回值列表的组合也被称为<strong>函数签名</strong>，它是决定两个函数类型是否相同的决定因素。因此，函数类型也可以看成是由func关键字与函数签名组合而成的。</p><p>通常，在表述函数类型时，我们会省略函数签名参数列表中的参数名，以及返回值列表中的返回值变量名。比如上面Fprintf函数的函数类型是：</p><pre><code class=\"language-plain\">func(io.Writer, string, ...interface{}) (int, error)\n</code></pre><p>这样，如果两个函数类型的函数签名是相同的，即便参数列表中的参数名，以及返回值列表中的返回值变量名都是不同的，那么这两个函数类型也是相同类型，比如下面两个函数类型：</p><pre><code class=\"language-plain\">func (a int, b string) (results []string, err error)\nfunc (c int, d string) (sl []string, err error)\n</code></pre><p>如果我们把这两个函数类型的参数名与返回值变量名省略，那它们都是 <code>func (int, string) ([]string, error)</code>，因此它们是相同的函数类型。</p><p>到这里，我们可以得到这样一个结论：<strong>每个函数声明所定义的函数，仅仅是对应的函数类型的一个实例</strong>，就像 <code>var a int = 13</code>这个变量声明语句中a是int类型的一个实例一样。</p><p>如果你还记得前面第17讲中、使用复合类型字面值对结构体类型变量进行显式初始化的内容，你一定会觉得上面这种、用变量声明来声明函数变量的形式，似曾相识，我们把这两种形式都以最简化的样子表现出来，看下面代码：</p><pre><code class=\"language-plain\">s := T{}      // 使用复合类型字面值对结构体类型T的变量进行显式初始化\nf := func(){} // 使用变量声明形式的函数声明\n</code></pre><p>这里，T{}被称为复合类型字面值，那么处于同样位置的func(){}是什么呢？Go语言也为它准备了一个名字，叫“<strong>函数字面值</strong>（Function Literal）”。我们可以看到，函数字面值由函数类型与函数体组成，它特别像一个没有函数名的函数声明，因此我们也叫它<strong>匿名函数</strong>。匿名函数在Go中用途很广，稍后我们会细讲。</p><p>讲到这里，你可能会想：既然是等价的，那我以后就用这种变量声明的形式来声明一个函数吧。万万不可！我这里只是为了帮你理解函数声明做了一个等价变换。在Go中的绝大多数情况，我们还是会通过传统的函数声明来声明一个特定函数类型的实例，也就是我们俗称的“定义一个函数”。</p><p>好了，横向对比就到此为止了，现在我们继续回到函数声明中来， 详细看看函数声明的重要组成部分——参数。</p><h3>函数参数的那些事儿</h3><p>函数参数列表中的参数，是函数声明的、用于函数体实现的局部变量。由于函数分为声明与使用两个阶段，在不同阶段，参数的称谓也有不同。在函数声明阶段，我们把参数列表中的参数叫做<strong>形式参数</strong>（Parameter，简称形参），在函数体中，我们使用的都是形参；而在函数实际调用时传入的参数被称为<strong>实际参数</strong>（Argument，简称实参）。为了便于直观理解，我绘制了这张示意图，你可以参考一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bc/93/bc9de182b5843779036f10f7cf53f993.jpg?wh=1920x1114\" alt=\"图片\"></p><p>当我们实际调用函数的时候，实参会传递给函数，并和形式参数逐一绑定，编译器会根据各个形参的类型与数量，来检查传入的实参的类型与数量是否匹配。只有匹配，程序才能继续执行函数调用，否则编译器就会报错。</p><p>Go语言中，函数参数传递采用是<strong>值传递</strong>的方式。所谓“值传递”，就是将实际参数在内存中的表示<strong>逐位拷贝</strong>（Bitwise Copy）到形式参数中。对于像整型、数组、结构体这类类型，它们的内存表示就是它们自身的数据内容，因此当这些类型作为实参类型时，值传递拷贝的就是它们自身，传递的开销也与它们自身的大小成正比。</p><p>但是像string、切片、map这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。这种只拷贝“描述符”，不拷贝实际数据内容的拷贝过程，也被称为<strong>“浅拷贝”</strong>。</p><p>不过函数参数的传递也有两个例外，当函数的形参为接口类型，或者形参是变长参数时，简单的值传递就不能满足要求了，这时Go编译器会介入：对于类型为接口类型的形参，Go编译器会把传递的实参赋值给对应的接口类型形参；对于为变长参数的形参，Go编译器会将零个或多个实参按一定形式转换为对应的变长形参。</p><p>那么这里，零个或多个传递给变长形式参数的实参，被Go编译器转换为何种形式了呢？我们通过下面示例代码来看一下：</p><pre><code class=\"language-plain\">func myAppend(sl []int, elems ...int) []int {\n    fmt.Printf(\"%T\\n\", elems) // []int\n    if len(elems) == 0 {\n        println(\"no elems to append\")\n        return sl\n    }\n\n    sl = append(sl, elems...)\n    return sl\n}\n\nfunc main() {\n    sl := []int{1, 2, 3}\n    sl = myAppend(sl) // no elems to append\n    fmt.Println(sl) // [1 2 3]\n    sl = myAppend(sl, 4, 5, 6)\n    fmt.Println(sl) // [1 2 3 4 5 6]\n}\n</code></pre><p>我们重点看一下代码中的myAppend函数，这个函数基于append，实现了向一个整型切片追加数据的功能。它支持变长参数，它的第二个形参elems就是一个变长参数。myAppend函数通过Printf输出了变长参数的类型。执行这段代码，我们将看到变长参数elems的类型为[]int。</p><p>这也就说明，在Go中，<strong>变长参数实际上是通过切片来实现的</strong>。所以，我们在函数体中，就可以使用切片支持的所有操作来操作变长参数，这会大大简化了变长参数的使用复杂度。比如myAppend中，我们使用len函数就可以获取到传给变长参数的实参个数。</p><p>到这里，我们已经学习了函数声明的两个部分。接下来，我们再看看函数声明的最后一部分，返回值列表。</p><h3>函数支持多返回值</h3><p>和其他主流静态类型语言，比如C、C++和Java不同，Go函数<strong>支持多返回值</strong>。多返回值可以让函数将更多结果信息返回给它的调用者，Go语言的错误处理机制很大程度就是建立在多返回值的机制之上的，这个我们在后续课程中还会详细讲解。</p><p>函数返回值列表从形式上看主要有三种：</p><pre><code class=\"language-plain\">func foo()                       // 无返回值\nfunc foo() error                 // 仅有一个返回值\nfunc foo() (int, string, error)  // 有2或2个以上返回值\n</code></pre><p>如果一个函数没有显式返回值，那么我们可以像第一种情况那样，在函数声明中省略返回值列表。而且，如果一个函数仅有一个返回值，那么通常我们在函数声明中，就不需要将返回值用括号括起来，如果是2个或2个以上的返回值，那我们还是需要用括号括起来的。</p><p>在函数声明的返回值列表中，我们通常会像上面例子那样，仅列举返回值的类型，但我们也可以像fmt.Fprintf函数的返回值列表那样，为每个返回值声明变量名，这种带有名字的返回值被称为<strong>具名返回值</strong>（Named Return Value）。这种具名返回值变量可以像函数体中声明的局部变量一样在函数体内使用。</p><p>那么在日常编码中，我们究竟该使用普通返回值形式，还是具名返回值形式呢？</p><p><strong>Go标准库以及大多数项目代码中的函数，都选择了使用普通的非具名返回值形式。</strong>但在一些特定场景下，具名返回值也会得到应用。比如，当函数使用defer，而且还在defer函数中修改外部函数返回值时，具名返回值可以让代码显得更优雅清晰。关于defer的使用，我们会在后面课程中还会细讲。</p><p>再比如，当函数的返回值个数较多时，每次显式使用return语句时都会接一长串返回值，这时，我们用具名返回值可以让函数实现的可读性更好一些，比如下面Go标准库time包中的parseNanoseconds函数就是这样：</p><pre><code class=\"language-plain\">// $GOROOT/src/time/format.go\nfunc parseNanoseconds(value string, nbytes int) (ns int, rangeErrString string, err error) {\n    if !commaOrPeriod(value[0]) {\n        err = errBad\n        return\n    }\n    if ns, err = atoi(value[1:nbytes]); err != nil {\n        return\n    }\n    if ns &lt; 0 || 1e9 &lt;= ns {\n        rangeErrString = \"fractional second\"\n        return\n    }\n\n    scaleDigits := 10 - nbytes\n    for i := 0; i &lt; scaleDigits; i++ {\n        ns *= 10\n    }\n    return\n}\n</code></pre><p>了解了上面这些有关Go函数的基础知识后，接下来，我们来学习Go函数与众不同的一个特点，这个特点使得Go函数具有更大的灵活性和表达力。</p><h2>函数是“一等公民”</h2><p>这个特点就是，<strong>函数在Go语言中属于“一等公民（First-Class Citizen）”</strong>。要知道，并不是在所有编程语言中函数都是“一等公民”。</p><p>那么，什么是编程语言的“一等公民”呢？关于这个名词，业界和教科书都没有给出精准的定义。我们这里可以引用一下wiki发明人、C2站点作者<a href=\"http://c2.com/\">沃德·坎宁安(Ward Cunningham)</a>对“一等公民”的<a href=\"http://wiki.c2.com//?FirstClass\">解释</a>：</p><blockquote>\n<p>如果一门编程语言对某种语言元素的创建和使用没有限制，我们可以像对待值（value）一样对待这种语法元素，那么我们就称这种语法元素是这门编程语言的“一等公民”。拥有“一等公民”待遇的语法元素可以存储在变量中，可以作为参数传递给函数，可以在函数内部创建并可以作为返回值从函数返回。</p>\n</blockquote><p>基于这个解释，我们来看看Go语言的函数作为“一等公民”，表现出的各种行为特征。</p><p><strong>特征一：Go函数可以存储在变量中。</strong></p><p>按照沃德·坎宁安对一等公民的解释，身为一等公民的语法元素是可以存储在变量中的。其实，这点我们在前面理解函数声明时已经验证过了，这里我们再用例子简单说明一下：</p><pre><code class=\"language-plain\">var (\n    myFprintf = func(w io.Writer, format string, a ...interface{}) (int, error) {\n        return fmt.Fprintf(w, format, a...)\n    }\n)\n\nfunc main() {\n    fmt.Printf(\"%T\\n\", myFprintf) // func(io.Writer, string, ...interface {}) (int, error)\n    myFprintf(os.Stdout, \"%s\\n\", \"Hello, Go\") // 输出Hello，Go\n}\n</code></pre><p>在这个例子中，我们把新创建的一个匿名函数赋值给了一个名为myFprintf的变量，通过这个变量，我们便可以调用刚刚定义的匿名函数。然后我们再通过Printf输出myFprintf变量的类型，也会发现结果与我们预期的函数类型是相符的。</p><p><strong>特征二：支持在函数内创建并通过返回值返回。</strong></p><p>Go函数不仅可以在函数外创建，还可以在函数内创建。而且由于函数可以存储在变量中，所以函数也可以在创建后，作为函数返回值返回。我们来看下面这个例子：</p><pre><code class=\"language-plain\">func setup(task string) func() {\n    println(\"do some setup stuff for\", task)\n    return func() {\n        println(\"do some teardown stuff for\", task)\n    }\n}\n\nfunc main() {\n    teardown := setup(\"demo\")\n    defer teardown()\n    println(\"do some bussiness stuff\")\n}\n</code></pre><p>这个例子，模拟了执行一些重要逻辑之前的上下文建立（setup），以及之后的上下文拆除（teardown）。在一些单元测试的代码中，我们也经常会在执行某些用例之前，建立此次执行的上下文（setup），并在这些用例执行后拆除上下文（teardown），避免这次执行对后续用例执行的干扰。</p><p>在这个例子中，我们在setup函数中创建了这次执行的上下文拆除函数，并通过返回值的形式，将这个拆除函数返回给了setup函数的调用者。setup函数的调用者，在执行完对应这次执行上下文的重要逻辑后，再调用setup函数返回的拆除函数，就可以完成对上下文的拆除了。</p><p>从这段代码中我们也可以看到，setup函数中创建的拆除函数也是一个匿名函数，但和前面我们看到的匿名函数有一个不同，这个不同就在于这个匿名函数使用了定义它的函数setup的局部变量task，这样的匿名函数在Go中也被称为<strong>闭包</strong>（Closure）。</p><p>闭包本质上就是一个匿名函数或叫函数字面值，它们可以引用它的包裹函数，也就是创建它们的函数中定义的变量。然后，这些变量在包裹函数和匿名函数之间共享，只要闭包可以被访问，这些共享的变量就会继续存在。显然，Go语言的闭包特性也是建立在“函数是一等公民”特性的基础上的，后面我们还会讲解涉及到闭包的内容。</p><p><strong>特征三：作为参数传入函数。</strong></p><p>既然函数可以存储在变量中，也可以作为返回值返回，那我们可以理所当然地想到，把函数作为参数传入函数也是可行的。比如我们在日常编码时经常使用、标准库time包的AfterFunc函数，就是一个接受函数类型参数的典型例子。你可以看看下面这行代码，这里通过AfterFunc函数设置了一个2秒的定时器，并传入了时间到了后要执行的函数。这里传入的就是一个匿名函数：</p><pre><code class=\"language-plain\">time.AfterFunc(time.Second*2, func() { println(\"timer fired\") })\n</code></pre><p><strong>特征四：拥有自己的类型。</strong></p><p>通过我们前面的讲解，你可以知道，作为一等公民的整型值拥有自己的类型int，而这个整型值只是类型int的一个实例，其他作为一等公民的字符串值、布尔值等类型也都拥有自己类型。那函数呢？</p><p>在前面讲解函数声明时，我们曾得到过这样一个结论：每个函数声明定义的函数仅仅是对应的函数类型的一个实例，就像 <code>var a int = 13</code> 这个变量声明语句中的a，只是int类型的一个实例一样。换句话说，每个函数都和整型值、字符串值等一等公民一样，拥有自己的类型，也就是我们讲过的<strong>函数类型</strong>。</p><p>我们甚至可以基于函数类型来自定义类型，就像基于整型、字符串类型等类型来自定义类型一样。下面代码中的HandlerFunc、visitFunc就是Go标准库中，基于函数类型进行自定义的类型：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// $GOROOT/src/sort/genzfunc.go\ntype visitFunc func(ast.Node) ast.Visitor\n</code></pre><p>到这里，我们已经可以看到，Go函数确实表现出了沃德·坎宁安诠释中“一等公民”的所有特征：Go函数可以存储在变量中，可以在函数内创建并通过返回值返回，可以作为参数传递给其他函数，可以拥有自己的类型。通过这些分析，你也能感受到，和C/C++等语言中的函数相比，作为“一等公民”的Go函数拥有难得的灵活性。</p><p>那么在实际生产中，我们怎么才能发挥出这种灵活性的最大效用，帮助我们写出更加优雅简洁的Go代码呢？接下来，我们就看几个这方面的例子。</p><h2>函数“一等公民”特性的高效运用</h2><p><strong>应用一：函数类型的妙用</strong></p><p>Go函数是“一等公民”，也就是说，它拥有自己的类型。而且，整型、字符串型等所有类型都可以进行的操作，比如显式转型，也同样可以用在函数类型上面，也就是说，<strong>函数也可以被显式转型</strong>。并且，这样的转型在特定的领域具有奇妙的作用，一个最为典型的示例就是标准库http包中的HandlerFunc这个类型。我们来看一个使用了这个类型的例子：</p><pre><code class=\"language-plain\">func greeting(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Welcome, Gopher!\\n\")\n}                    \n\nfunc main() {\n    http.ListenAndServe(\":8080\", http.HandlerFunc(greeting))\n}\n</code></pre><p>这我们日常最常见的、用Go构建Web Server的例子。它的工作机制也很简单，就是当用户通过浏览器，或者类似curl这样的命令行工具，访问Web server的8080端口时，会收到“Welcome, Gopher!”这样的文字应答。我们在09讲曾讲过使用http包编写web server的方法，但当时我没有进一步讲解其中的原理，这一节课中我们就补上这一点。</p><p>我们先来看一下http包的函数ListenAndServe的源码：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\nfunc ListenAndServe(addr string, handler Handler) error {\n    server := &amp;Server{Addr: addr, Handler: handler}\n    return server.ListenAndServe()\n}\n</code></pre><p>函数ListenAndServe会把来自客户端的http请求，交给它的第二个参数handler处理，而这里handler参数的类型http.Handler，是一个自定义的接口类型，它的源码是这样的：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\ntype Handler interface {\n    ServeHTTP(ResponseWriter, *Request)\n}\n</code></pre><p>我们还没有系统学习接口类型，你现在只要知道接口是一组方法的集合就好了。这个接口只有一个方法ServeHTTP，他的函数类型是 <code>func(http.ResponseWriter, *http.Request)</code>。这和我们自己定义的http请求处理函数greeting的类型是一致的，但是我们没法直接将greeting作为参数值传入，否则编译器会报错：</p><pre><code class=\"language-plain\">func(http.ResponseWriter, *http.Request) does not implement http.Handler (missing ServeHTTP method)\n</code></pre><p>这里，编译器提示我们，函数greeting还没有实现接口Handler的方法，无法将它赋值给Handler类型的参数。现在我们再回过头来看下代码，代码中我们也没有直接将greeting传给ListenAndServe函数，而是将 <code>http.HandlerFunc(greeting)</code> 作为参数传给了ListenAndServe。那这个http.HandlerFunc究竟是什么呢？我们直接来看一下它的源码：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\n\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(w, r).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n        f(w, r)\n}\n</code></pre><p>通过它的源码我们看到，HandlerFunc是一个基于函数类型定义的新类型，它的底层类型为函数类型 <code>func(ResponseWriter, *Request)</code> 。这个类型有一个方法ServeHTTP，然后实现了Handler接口。也就是说 <code>http.HandlerFunc(greeting)</code> 这句代码的真正含义，是将函数greeting显式转换为HandlerFunc类型，后者实现了Handler接口，满足ListenAndServe函数第二个参数的要求。</p><p>另外，之所以<code>http.HandlerFunc(greeting)</code>这段代码可以通过编译器检查，正是因为HandlerFunc的底层类型是 <code>func(ResponseWriter, *Request)</code> ，与greeting函数的类型是一致的，这和下面整型变量的显式转型原理也是一样的：</p><pre><code class=\"language-plain\">type MyInt int\nvar x int = 5\ny := MyInt(x) // MyInt的底层类型为int，类比HandlerFunc的底层类型为func(ResponseWriter, *Request)\n</code></pre><p><strong>应用二：利用闭包简化函数调用。</strong></p><p>我们前面讲过，Go闭包是在函数内部创建的匿名函数，这个匿名函数可以访问创建它的函数的参数与局部变量。我们可以利用闭包的这一特性来简化函数调用，这里我们看一个具体例子：</p><pre><code class=\"language-plain\">func times(x, y int) int {\n\treturn x * y\n}\n</code></pre><p>在上面的代码中，times函数用来进行两个整型数的乘法。我们使用times函数的时候需要传入两个实参，比如：</p><pre><code class=\"language-plain\">times(2, 5) // 计算2 x 5\ntimes(3, 5) // 计算3 x 5\ntimes(4, 5) // 计算4 x 5\n</code></pre><p>不过，有些场景存在一些高频使用的乘数，这个时候我们就没必要每次都传入这样的高频乘数了。那我们怎样能省去高频乘数的传入呢? 我们看看下面这个新函数partialTimes：</p><pre><code class=\"language-plain\">func partialTimes(x int) func(int) int {\n\treturn func(y int) int {\n\t\treturn times(x, y)\n\t}\n}\n</code></pre><p>这里，partialTimes的返回值是一个接受单一参数的函数，这个由partialTimes函数生成的匿名函数，使用了partialTimes函数的参数x。按照前面的定义，这个匿名函数就是一个闭包。partialTimes实质上就是用来生成以x为固定乘数的、接受另外一个乘数作为参数的、闭包函数的函数。当程序调用partialTimes(2)时，partialTimes实际上返回了一个调用times(2,y)的函数，这个过程的逻辑类似于下面代码：</p><pre><code class=\"language-plain\">timesTwo = func(y int) int {\n    return times(2, y)\n}\n</code></pre><p>这个时候，我们再看看如何使用partialTimes，分别生成以2、3、4为固定高频乘数的乘法函数，以及这些生成的乘法函数的使用方法：</p><pre><code class=\"language-plain\">func main() {\n\ttimesTwo := partialTimes(2)   // 以高频乘数2为固定乘数的乘法函数\n\ttimesThree := partialTimes(3) // 以高频乘数3为固定乘数的乘法函数\n\ttimesFour := partialTimes(4)  // 以高频乘数4为固定乘数的乘法函数\n\tfmt.Println(timesTwo(5))   // 10，等价于times(2, 5)\n\tfmt.Println(timesTwo(6))   // 12，等价于times(2, 6)\n\tfmt.Println(timesThree(5)) // 15，等价于times(3, 5)\n\tfmt.Println(timesThree(6)) // 18，等价于times(3, 6)\n\tfmt.Println(timesFour(5))  // 20，等价于times(4, 5)\n\tfmt.Println(timesFour(6))  // 24，等价于times(4, 6)\n}\n</code></pre><p>你可以看到，通过partialTimes，我们生成了三个带有固定乘数的函数。这样，我们在计算乘法时，就可以减少参数的重复输入。你看到这里可能会说，这种简化的程度十分有限啊！</p><p>不是的。这里我只是举了一个比较好理解的简单例子，在那些动辄就有5个以上参数的复杂函数中，减少参数的重复输入给开发人员带去的收益，可要比这个简单的例子大得多。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我们讲解了Go代码中的基本功能逻辑单元：函数。函数这种语法元素的诞生，源于将大问题分解为若干小任务与代码复用。</p><p>Go语言中定义一个函数的最常用方式就是使用<strong>函数声明</strong>。函数声明虽然形式上与我们之前学过的变量声明不同，但本质其实是一致的，我们可以通过一个等价转换，将函数声明转换为一个以函数名为变量名、以函数字面值为初值的函数变量声明形式。这个转换是你深入理解函数的关键。</p><p>我们对函数字面值再进行了拆解。函数字面值是由函数类型与函数体组成的，而函数类型则是由func关键字+函数签名组成。再拆解，函数签名又包括函数的参数列表与返回值列表。通常我们说函数签名时，会省去参数名与返回值变量名，只保留各自的类型信息。函数签名相同的两个函数类型就是相同的函数类型。</p><p>而且，Go函数采用值传递的方式进行参数传递，对于string、切片、map等类型参数来说，这种传递方式传递的仅是“描述符”信息，是一种“浅拷贝”，这点你一定要牢记。Go函数支持多返回值，Go语言的错误处理机制就是建立在多返回值的基础上的。</p><p>最后，与传统的C、C++、Java等静态编程语言中的函数相比，Go函数的最大特点就是它属于Go语言的“一等公民”。Go函数具备一切作为“一等公民”的行为特征，包括函数可以存储在变量中、支持函数内创建并通过返回值返回、支持作为参数传递给函数，以及拥有自己的类型等。这些“一等公民”的特征，让Go函数表现出极大的灵活性。日常编码中，我们也可以利用这些特征进行一些巧妙的代码设计，让代码的实现更简化。</p><h2>思考题</h2><p>函数“一等公民”特性的高效运用的例子，显然不限于我们今天提到的这两个，这里我想让你思考一下，你还能列举出其他的高效运用函数“一等公民”特性的例子吗？</p><p>欢迎你把这节课分享给更多对Go语言的函数感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"20｜控制结构：Go中的switch语句有哪些变化？","id":455912},"right":{"article_title":"22｜函数：怎么结合多返回值进行错误处理？","id":461821}},"comments":[{"had_liked":false,"id":324760,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638605493,"is_pvip":true,"replies":[{"id":117958,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827698,"ip_address":"","comment_id":324760,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"HandlerFunc还有另一半故事，就是函数也可以实现接口","like_count":39},{"had_liked":false,"id":323913,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638216405,"is_pvip":false,"replies":[{"id":117576,"content":"对的。但作为入门课，就不谈那么多概念了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260547,"ip_address":"","comment_id":323913,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"partialTimes 的例子就是传说中的柯里化啊","like_count":20,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536584,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579145,"discussion_content":"这点真的厉害，函数也是一种可实现接口的类型","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1657193479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587160,"discussion_content":"我也是才发现，以前一直都以为只有结构体才能有方法.....","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1662859508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594302,"discussion_content":"type MyFunc func(a int, b int) int\n\n// 1\nfunc (m MyFunc) myname(a int, b int) int {\n\tc := m(a, b)\n\treturn c\n}\n\n// 2\nfunc myname2(m1 MyFunc, a int, b int) int {\n\treturn m1(a, b)\n}\n\n请教一下，函数也可以实现接口，有什么好处呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668962805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350386,"user_name":"一打七","can_delete":false,"product_type":"c1","uid":1241197,"ip_address":"","ucode":"D242C5EF70C176","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/6d/3e570bb8.jpg","comment_is_top":false,"comment_ctime":1656865107,"is_pvip":false,"replies":[{"id":127499,"content":"如果第二个参数只是一个函数类型，那那些Mux、middleware等就很难实现了。现在的各种Mux、middleware都是基于Handler这个接口类型实现的。\n\n也就说如果第二个参数是函数类型，那么很难对其进行扩展了。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1656986977,"ip_address":"","comment_id":350386,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"ListenAndServe的第二个参数为什么要定义成接口类型？如果定义成函数类型，不就可以不用强转，直接传入了吗","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534711,"discussion_content":"对的。但作为入门课，就不谈那么多概念了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3294642,"avatar":"https://static001.geekbang.org/account/avatar/00/32/45/b2/24dee83c.jpg","nickname":"Ppppppp","note":"","ucode":"5AD679CC53B6D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604957,"discussion_content":"我说怎么有种似曾相识的感觉 &gt;.&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676521357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2684096,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f4/c0/4c4e5cba.jpg","nickname":"阿创有点忙_","note":"","ucode":"148CC86727F1F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578924,"discussion_content":"https://baike.baidu.com/item/%E6%9F%AF%E9%87%8C%E5%8C%96/10350525?fr=aladdin","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657094053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329675,"user_name":"zhoufeng","can_delete":false,"product_type":"c1","uid":1447741,"ip_address":"","ucode":"6F92F7866F9EB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","comment_is_top":false,"comment_ctime":1641463891,"is_pvip":false,"replies":[{"id":120478,"content":"看看我写的这篇文章 https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;NCM-RrzxYiAUlAAYshdAaQ 也许能解答你的疑问。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642041260,"ip_address":"","comment_id":329675,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师，使用type定义了一个新的类型后，为什么不需要显式转换。我写了一段代码说明我的问题。\n\nfunc main() {\n\tvar c cal=add   &#47;&#47;为什么这里不需要cal(add)转换？\n\tfmt.Printf(&quot;result is:%d&quot;,c(3,4))\n}\n\ntype cal func(int,int) int  &#47;&#47;定义了一个新的类型\n\nfunc add(a int,b int) int {\n\treturn a+b\n}","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578713,"discussion_content":"如果第二个参数只是一个函数类型，那那些Mux、middleware等就很难实现了。现在的各种Mux、middleware都是基于Handler这个接口类型实现的。\n\n也就说如果第二个参数是函数类型，那么很难对其进行扩展了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656986977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587161,"discussion_content":"好像老师在第30讲中说的水平组合，用接口类型作为参数实现解耦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662859623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":578713,"ip_address":"辽宁","group_id":0},"score":587161,"extra":""}]},{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600425,"discussion_content":"总的来说，如果将参数定义成函数类型，抽象程度不够，传参时只能传函数类型进来。而接口作为参数的话，只要是实现了这个接口的实例都可以传进来，这个实例可以是结构体、也可以是函数、也可以是自定义类型。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1674352632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328324,"user_name":"Geek_fightingDC","can_delete":false,"product_type":"c1","uid":1843027,"ip_address":"","ucode":"EF7F7316ADFF49","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83equSjO9AVmwhvyhTZzk6icNTSED9s1sUdFZSfqTHq2PmZ4MibMFX58C8qDW2a4cjiaFvAdiaRchsLz54g/132","comment_is_top":false,"comment_ctime":1640668703,"is_pvip":false,"replies":[{"id":120404,"content":"👍。就是一种类型！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995516,"ip_address":"","comment_id":328324,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go语言中的函数可以理解为一种类型。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545695,"discussion_content":"看看我写的这篇文章 https://mp.weixin.qq.com/s/NCM-RrzxYiAUlAAYshdAaQ 也许能解答你的疑问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642041260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1447741,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","nickname":"zhoufeng","note":"","ucode":"6F92F7866F9EB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":546668,"discussion_content":"感谢老师，看了您的文章明白了，这里add函数的底层类型和cal类型都不是defined type，且签名一样，不需要显式转换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642387147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545695,"ip_address":"","group_id":0},"score":546668,"extra":""},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1447741,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","nickname":"zhoufeng","note":"","ucode":"6F92F7866F9EB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574656,"discussion_content":"cal的类型是defined type；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654236429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546668,"ip_address":"","group_id":0},"score":574656,"extra":""},{"author":{"id":1202962,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/12/368a7e70.jpg","nickname":"妖精Jaroyao","note":"","ucode":"AAFC382BB7AAFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578250,"discussion_content":"根据博客里对go规范的摘要：x&#39;s type V and T have identical underlying types and at least one of V or T is not a defined type.\n如果x的类型V与类型T具有相同的底层类型，并且V和T至少有一个不是defined type，那么x可以赋值给类型T的变量。\n\n只要有一个不是defined type，就具备隐式转换的能力","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1656602030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574656,"ip_address":"","group_id":0},"score":578250,"extra":""}]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585209,"discussion_content":"cal是defined type，但是add是函数，是非defined type，而且二者有相同的底层类型，所以它们可以直接赋值，不需要显式转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661397872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324052,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1638272052,"is_pvip":false,"replies":[{"id":117966,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828040,"ip_address":"","comment_id":324052,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"wire 中使用函数作为返回值，统一回收资源也很方便","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545554,"discussion_content":"👍。就是一种类型！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358293,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1664176368,"is_pvip":false,"replies":[{"id":130383,"content":"你理解的没错，如果你例子中的代码在包的顶层，即不再任何函数内部，那么这个不是闭包。这里匿名函数中的变量t并非捕捉，而仅仅是访问一个包级变量t。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664185017,"ip_address":"北京","comment_id":358293,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go 闭包是在函数内部创建的匿名函数，这个匿名函数可以访问创建它的函数的参数与局部变量。\n在函数外面创建的匿名函数就不能叫闭包了吧\nvar t int\nvar myFprintf = func (){\n\t\tfmt.Println(t)\n\t}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536592,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329261,"user_name":"0mfg","can_delete":false,"product_type":"c1","uid":1393948,"ip_address":"","ucode":"D83530DB25D25A","user_header":"","comment_is_top":false,"comment_ctime":1641261501,"is_pvip":false,"replies":[{"id":120439,"content":"星球中已经答复。这里贴出来供其他学员参考：在http包中的server.go的\n\nfunc (c *conn) serve(ctx context.Context) 方法中。\n\nr在同包的readRequest中定义。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998921,"ip_address":"","comment_id":329261,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"白老师好，课程中如下示例代码，我用IDE跳转查看net&#47;http包源代码，始终没有找到f(w, r)这里函数调用的w和r实参是从哪里得到的。作为小白我的这个问题在网上搜了很多net&#47;http包源码解析的文章也没看到讲解这个内容的。个人理解r是不是从收到的tcp&#47;ip包逐步解包到http层，从http包头和body里获取相应的信息然后赋值给http.Request结构体，然后得到r实参，如果理解没错源代码实现在哪或者如何查找呢？w实参如何得到又是如何得到的。希望白老师在百忙中能够指点一二，也祝白老师新年快乐，万事如意。\n\ntype HandlerFunc func(ResponseWriter, *Request)\n\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n        f(w, r)\n}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588864,"discussion_content":"你理解的没错，如果你例子中的代码在包的顶层，即不再任何函数内部，那么这个不是闭包。这里匿名函数中的变量t并非捕捉，而仅仅是访问一个包级变量t。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664185017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370747,"user_name":"Geek_0bb91a","can_delete":false,"product_type":"c1","uid":2936389,"ip_address":"广东","ucode":"EBEDC86692468D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vfDFyK7FdmyvvgFbB5Nuv7Uo4Fia15PO4ABqLcwkA7IBEFqaGgPOAs0a79c05SI4U0vhqSX31ICh0KxpRP4WrBg/132","comment_is_top":false,"comment_ctime":1679200061,"is_pvip":false,"replies":[{"id":135296,"content":"第1行是定义了一个新类型HandlerFunc，它的底层类型是一个函数类型：func(ResponseWriter, *Request)。\n第2行是新类型HandlerFunc实现了一个方法：ServeHTTP。由于实现了该方法，HandlerFunc这个类型就实现了Handler接口：\n\ntype Handler interface {\n    ServeHTTP(ResponseWriter, *Request)\n}\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1679309256,"ip_address":"北京","comment_id":370747,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\n&#47;&#47; $GOROOT&#47;src&#47;net&#47;http&#47;server.go\n\n1-&gt; type HandlerFunc func(ResponseWriter, *Request)\n\n&#47;&#47; ServeHTTP calls f(w, r).\n2-&gt; func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n        f(w, r)\n}\n\n——————————————\n文章中这个地方我看不懂，请教老师， 第一行是定义了一个函数类型&lt; func(ResponseWriter, *Request) &gt;的变量 &lt; HandlerFunc &gt;   \n第二行 我看不懂它的语法格式是表达了什么 ？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545600,"discussion_content":"星球中已经答复。这里贴出来供其他学员参考：在http包中的server.go的\n\nfunc (c *conn) serve(ctx context.Context) 方法中。\n\nr在同包的readRequest中定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1393948,"avatar":"","nickname":"0mfg","note":"","ucode":"D83530DB25D25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":545605,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642000250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545600,"ip_address":"","group_id":0},"score":545605,"extra":""}]},{"author":{"id":1393948,"avatar":"","nickname":"0mfg","note":"","ucode":"D83530DB25D25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544530,"discussion_content":"老师求回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641547757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368774,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"广东","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1676692193,"is_pvip":false,"replies":[{"id":134327,"content":"Go于2007年诞生，2009年开源，swift在2014年才发布（虽然内部开发实时间可能早于2014）:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1676771705,"ip_address":"辽宁","comment_id":368774,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"和swift几乎一模一样。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609951,"discussion_content":"第1行是定义了一个新类型HandlerFunc，它的底层类型是一个函数类型：func(ResponseWriter, *Request)。\n第2行是新类型HandlerFunc实现了一个方法：ServeHTTP。由于实现了该方法，HandlerFunc这个类型就实现了Handler接口：\n\ntype Handler interface {\n    ServeHTTP(ResponseWriter, *Request)\n}\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679309256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324760,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638605493,"is_pvip":true,"replies":[{"id":117958,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827698,"ip_address":"","comment_id":324760,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"HandlerFunc还有另一半故事，就是函数也可以实现接口","like_count":39,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536584,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579145,"discussion_content":"这点真的厉害，函数也是一种可实现接口的类型","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1657193479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587160,"discussion_content":"我也是才发现，以前一直都以为只有结构体才能有方法.....","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1662859508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594302,"discussion_content":"type MyFunc func(a int, b int) int\n\n// 1\nfunc (m MyFunc) myname(a int, b int) int {\n\tc := m(a, b)\n\treturn c\n}\n\n// 2\nfunc myname2(m1 MyFunc, a int, b int) int {\n\treturn m1(a, b)\n}\n\n请教一下，函数也可以实现接口，有什么好处呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668962805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323913,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638216405,"is_pvip":false,"replies":[{"id":117576,"content":"对的。但作为入门课，就不谈那么多概念了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260547,"ip_address":"","comment_id":323913,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"partialTimes 的例子就是传说中的柯里化啊","like_count":20,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534711,"discussion_content":"对的。但作为入门课，就不谈那么多概念了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3294642,"avatar":"https://static001.geekbang.org/account/avatar/00/32/45/b2/24dee83c.jpg","nickname":"Ppppppp","note":"","ucode":"5AD679CC53B6D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604957,"discussion_content":"我说怎么有种似曾相识的感觉 &gt;.&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676521357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2684096,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f4/c0/4c4e5cba.jpg","nickname":"阿创有点忙_","note":"","ucode":"148CC86727F1F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578924,"discussion_content":"https://baike.baidu.com/item/%E6%9F%AF%E9%87%8C%E5%8C%96/10350525?fr=aladdin","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657094053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350386,"user_name":"一打七","can_delete":false,"product_type":"c1","uid":1241197,"ip_address":"","ucode":"D242C5EF70C176","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/6d/3e570bb8.jpg","comment_is_top":false,"comment_ctime":1656865107,"is_pvip":false,"replies":[{"id":127499,"content":"如果第二个参数只是一个函数类型，那那些Mux、middleware等就很难实现了。现在的各种Mux、middleware都是基于Handler这个接口类型实现的。\n\n也就说如果第二个参数是函数类型，那么很难对其进行扩展了。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1656986977,"ip_address":"","comment_id":350386,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"ListenAndServe的第二个参数为什么要定义成接口类型？如果定义成函数类型，不就可以不用强转，直接传入了吗","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578713,"discussion_content":"如果第二个参数只是一个函数类型，那那些Mux、middleware等就很难实现了。现在的各种Mux、middleware都是基于Handler这个接口类型实现的。\n\n也就说如果第二个参数是函数类型，那么很难对其进行扩展了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656986977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587161,"discussion_content":"好像老师在第30讲中说的水平组合，用接口类型作为参数实现解耦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662859623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":578713,"ip_address":"辽宁","group_id":0},"score":587161,"extra":""}]},{"author":{"id":2968936,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/4d/68/df7b8144.jpg","nickname":"淮屿","note":"","ucode":"B5F6C61E2EAA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600425,"discussion_content":"总的来说，如果将参数定义成函数类型，抽象程度不够，传参时只能传函数类型进来。而接口作为参数的话，只要是实现了这个接口的实例都可以传进来，这个实例可以是结构体、也可以是函数、也可以是自定义类型。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1674352632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329675,"user_name":"zhoufeng","can_delete":false,"product_type":"c1","uid":1447741,"ip_address":"","ucode":"6F92F7866F9EB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","comment_is_top":false,"comment_ctime":1641463891,"is_pvip":false,"replies":[{"id":120478,"content":"看看我写的这篇文章 https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;NCM-RrzxYiAUlAAYshdAaQ 也许能解答你的疑问。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642041260,"ip_address":"","comment_id":329675,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师，使用type定义了一个新的类型后，为什么不需要显式转换。我写了一段代码说明我的问题。\n\nfunc main() {\n\tvar c cal=add   &#47;&#47;为什么这里不需要cal(add)转换？\n\tfmt.Printf(&quot;result is:%d&quot;,c(3,4))\n}\n\ntype cal func(int,int) int  &#47;&#47;定义了一个新的类型\n\nfunc add(a int,b int) int {\n\treturn a+b\n}","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545695,"discussion_content":"看看我写的这篇文章 https://mp.weixin.qq.com/s/NCM-RrzxYiAUlAAYshdAaQ 也许能解答你的疑问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642041260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1447741,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","nickname":"zhoufeng","note":"","ucode":"6F92F7866F9EB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":546668,"discussion_content":"感谢老师，看了您的文章明白了，这里add函数的底层类型和cal类型都不是defined type，且签名一样，不需要显式转换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642387147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545695,"ip_address":"","group_id":0},"score":546668,"extra":""},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1447741,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","nickname":"zhoufeng","note":"","ucode":"6F92F7866F9EB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574656,"discussion_content":"cal的类型是defined type；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654236429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546668,"ip_address":"","group_id":0},"score":574656,"extra":""},{"author":{"id":1202962,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/12/368a7e70.jpg","nickname":"妖精Jaroyao","note":"","ucode":"AAFC382BB7AAFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578250,"discussion_content":"根据博客里对go规范的摘要：x&#39;s type V and T have identical underlying types and at least one of V or T is not a defined type.\n如果x的类型V与类型T具有相同的底层类型，并且V和T至少有一个不是defined type，那么x可以赋值给类型T的变量。\n\n只要有一个不是defined type，就具备隐式转换的能力","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1656602030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574656,"ip_address":"","group_id":0},"score":578250,"extra":""}]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585209,"discussion_content":"cal是defined type，但是add是函数，是非defined type，而且二者有相同的底层类型，所以它们可以直接赋值，不需要显式转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661397872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328324,"user_name":"Geek_fightingDC","can_delete":false,"product_type":"c1","uid":1843027,"ip_address":"","ucode":"EF7F7316ADFF49","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83equSjO9AVmwhvyhTZzk6icNTSED9s1sUdFZSfqTHq2PmZ4MibMFX58C8qDW2a4cjiaFvAdiaRchsLz54g/132","comment_is_top":false,"comment_ctime":1640668703,"is_pvip":false,"replies":[{"id":120404,"content":"👍。就是一种类型！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995516,"ip_address":"","comment_id":328324,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go语言中的函数可以理解为一种类型。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545554,"discussion_content":"👍。就是一种类型！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324052,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1638272052,"is_pvip":false,"replies":[{"id":117966,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828040,"ip_address":"","comment_id":324052,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"wire 中使用函数作为返回值，统一回收资源也很方便","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536592,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358293,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1664176368,"is_pvip":false,"replies":[{"id":130383,"content":"你理解的没错，如果你例子中的代码在包的顶层，即不再任何函数内部，那么这个不是闭包。这里匿名函数中的变量t并非捕捉，而仅仅是访问一个包级变量t。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664185017,"ip_address":"北京","comment_id":358293,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go 闭包是在函数内部创建的匿名函数，这个匿名函数可以访问创建它的函数的参数与局部变量。\n在函数外面创建的匿名函数就不能叫闭包了吧\nvar t int\nvar myFprintf = func (){\n\t\tfmt.Println(t)\n\t}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588864,"discussion_content":"你理解的没错，如果你例子中的代码在包的顶层，即不再任何函数内部，那么这个不是闭包。这里匿名函数中的变量t并非捕捉，而仅仅是访问一个包级变量t。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664185017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329261,"user_name":"0mfg","can_delete":false,"product_type":"c1","uid":1393948,"ip_address":"","ucode":"D83530DB25D25A","user_header":"","comment_is_top":false,"comment_ctime":1641261501,"is_pvip":false,"replies":[{"id":120439,"content":"星球中已经答复。这里贴出来供其他学员参考：在http包中的server.go的\n\nfunc (c *conn) serve(ctx context.Context) 方法中。\n\nr在同包的readRequest中定义。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998921,"ip_address":"","comment_id":329261,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"白老师好，课程中如下示例代码，我用IDE跳转查看net&#47;http包源代码，始终没有找到f(w, r)这里函数调用的w和r实参是从哪里得到的。作为小白我的这个问题在网上搜了很多net&#47;http包源码解析的文章也没看到讲解这个内容的。个人理解r是不是从收到的tcp&#47;ip包逐步解包到http层，从http包头和body里获取相应的信息然后赋值给http.Request结构体，然后得到r实参，如果理解没错源代码实现在哪或者如何查找呢？w实参如何得到又是如何得到的。希望白老师在百忙中能够指点一二，也祝白老师新年快乐，万事如意。\n\ntype HandlerFunc func(ResponseWriter, *Request)\n\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n        f(w, r)\n}","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545600,"discussion_content":"星球中已经答复。这里贴出来供其他学员参考：在http包中的server.go的\n\nfunc (c *conn) serve(ctx context.Context) 方法中。\n\nr在同包的readRequest中定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1393948,"avatar":"","nickname":"0mfg","note":"","ucode":"D83530DB25D25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":545605,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642000250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545600,"ip_address":"","group_id":0},"score":545605,"extra":""}]},{"author":{"id":1393948,"avatar":"","nickname":"0mfg","note":"","ucode":"D83530DB25D25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544530,"discussion_content":"老师求回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641547757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370747,"user_name":"Geek_0bb91a","can_delete":false,"product_type":"c1","uid":2936389,"ip_address":"广东","ucode":"EBEDC86692468D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vfDFyK7FdmyvvgFbB5Nuv7Uo4Fia15PO4ABqLcwkA7IBEFqaGgPOAs0a79c05SI4U0vhqSX31ICh0KxpRP4WrBg/132","comment_is_top":false,"comment_ctime":1679200061,"is_pvip":false,"replies":[{"id":135296,"content":"第1行是定义了一个新类型HandlerFunc，它的底层类型是一个函数类型：func(ResponseWriter, *Request)。\n第2行是新类型HandlerFunc实现了一个方法：ServeHTTP。由于实现了该方法，HandlerFunc这个类型就实现了Handler接口：\n\ntype Handler interface {\n    ServeHTTP(ResponseWriter, *Request)\n}\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1679309256,"ip_address":"北京","comment_id":370747,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\n&#47;&#47; $GOROOT&#47;src&#47;net&#47;http&#47;server.go\n\n1-&gt; type HandlerFunc func(ResponseWriter, *Request)\n\n&#47;&#47; ServeHTTP calls f(w, r).\n2-&gt; func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n        f(w, r)\n}\n\n——————————————\n文章中这个地方我看不懂，请教老师， 第一行是定义了一个函数类型&lt; func(ResponseWriter, *Request) &gt;的变量 &lt; HandlerFunc &gt;   \n第二行 我看不懂它的语法格式是表达了什么 ？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609951,"discussion_content":"第1行是定义了一个新类型HandlerFunc，它的底层类型是一个函数类型：func(ResponseWriter, *Request)。\n第2行是新类型HandlerFunc实现了一个方法：ServeHTTP。由于实现了该方法，HandlerFunc这个类型就实现了Handler接口：\n\ntype Handler interface {\n    ServeHTTP(ResponseWriter, *Request)\n}\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679309256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368774,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"广东","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1676692193,"is_pvip":false,"replies":[{"id":134327,"content":"Go于2007年诞生，2009年开源，swift在2014年才发布（虽然内部开发实时间可能早于2014）:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1676771705,"ip_address":"辽宁","comment_id":368774,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"和swift几乎一模一样。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605588,"discussion_content":"Go于2007年诞生，2009年开源，swift在2014年才发布（虽然内部开发实时间可能早于2014）:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676771705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356870,"user_name":"暴躁的蜗牛","can_delete":false,"product_type":"c1","uid":3008370,"ip_address":"北京","ucode":"9B159C820C5524","user_header":"https://static001.geekbang.org/account/avatar/00/2d/e7/72/4cec29a8.jpg","comment_is_top":false,"comment_ctime":1662654933,"is_pvip":false,"replies":[{"id":129888,"content":"对于这些string、切片这些类型来说，传递“描述符”好比将指针包在盒子里面的“值传递”。这些“描述符”的组成中其实都包含指针。\n\n如果传递string或切片的指针，实际传递的也是描述符的地址，并非内容的地址。\n\n示例：\n\nvar s string = &quot;hello&quot;\nfoo(s) &#47;&#47; 传递 描述符的值\nfoo(&amp;s) &#47;&#47; 传递描述符的地址而已\n\nmap特殊，其“描述符”自身就是一个指针。\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1662705676,"ip_address":"北京","comment_id":356870,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"但是像 string、切片、map 这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。这种只拷贝“描述符”，不拷贝实际数据内容的拷贝过程，也被称为“浅拷贝”。\n\n这个传递描述符 和 传递 指针地址有什么区别","like_count":2},{"had_liked":false,"id":349189,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1655791586,"is_pvip":false,"replies":[{"id":127145,"content":"为啥没有使用-&gt;语法，这个我还真不清楚。也许就像你说的，都使用(.)保持形式一致统一。但似乎没有官方说法，至少我没有找到🙂。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655893352,"ip_address":"","comment_id":349189,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"结构体传参，也是显示copy，所以有成本，如果不担心数据被修改，我理解改成传指针就可以了。\n但为啥 go 把 c 语言里面的指针引用（-&gt;）给干掉了，统一改成了（.）, 编译器帮忙把活给干了？是为了降低开发者负担吗？\n谢谢老师。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587037,"discussion_content":"对于这些string、切片这些类型来说，传递“描述符”好比将指针包在盒子里面的“值传递”。这些“描述符”的组成中其实都包含指针。\n\n如果传递string或切片的指针，实际传递的也是描述符的地址，并非内容的地址。\n\n示例：\n\nvar s string = &#34;hello&#34;\nfoo(s) // 传递 描述符的值\nfoo(&amp;s) // 传递描述符的地址而已\n\nmap特殊，其“描述符”自身就是一个指针。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662705676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324217,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1638340675,"is_pvip":false,"replies":[{"id":117971,"content":"1. 所谓“命令式语言”是英文imperative languages的一种翻译。命令式的语言的一个特点就是程序员要完成是一件事，需要自己一步一步告诉\n机器如何做，即把执行步骤用编程语言的语法罗列出来。如今主流的编程语言，如c, c++, java, go, python, ruby,无论是否是静态语言还是动态语言，无论是否支持面向对象编程，本质上都是命令式语言。那什么不是命令式语言呢？与命令式语言相对的是声明式语言，最常见的就是SQL，它的特点是你只要输入你想要的结果，语言引擎知道该执行什么步骤。历史上还有一种叫prolog的逻辑编程语言也是声明式的，如果对prolog感兴趣，可以看看我参与翻译的《七周七语言》一书。\n\n2. 没有函数体的函数声明 更多用在go语言runtime实现层面，应用层极少使用，这方面参考资料甚少。\n~                                                                                              ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829081,"ip_address":"","comment_id":324217,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感谢Tony Bai老师这一讲关于函数的内容，全篇都是干货。另外，有几个小问题，麻烦解惑。\n\n1. 命令式语言一般是指哪些语言呢？\n\n2. 关于Go中没有函数体的函数声明，有推荐阅读的资料吗？\n\nPS ：希望后面能有利用闭包简化函数调用的更多例子。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536598,"discussion_content":"1. 所谓“命令式语言”是英文imperative languages的一种翻译。命令式的语言的一个特点就是程序员要完成是一件事，需要自己一步一步告诉\n机器如何做，即把执行步骤用编程语言的语法罗列出来。如今主流的编程语言，如c, c++, java, go, python, ruby,无论是否是静态语言还是动态语言，无论是否支持面向对象编程，本质上都是命令式语言。那什么不是命令式语言呢？与命令式语言相对的是声明式语言，最常见的就是SQL，它的特点是你只要输入你想要的结果，语言引擎知道该执行什么步骤。历史上还有一种叫prolog的逻辑编程语言也是声明式的，如果对prolog感兴趣，可以看看我参与翻译的《七周七语言》一书。\n\n2. 没有函数体的函数声明 更多用在go语言runtime实现层面，应用层极少使用，这方面参考资料甚少。\n~                                                                                              ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323832,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1638177118,"is_pvip":true,"replies":[{"id":117580,"content":"对于类型为接口类型的形参，实参赋值不是简单的值拷贝，而是有一次“装箱”操作，这个操作是go compiler植入的代码完成的。这块还没讲到interface，所以一笔带过了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638261160,"ip_address":"","comment_id":323832,"utype":1}],"discussion_count":5,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“对于类型为接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参”，这句话没怎么看明白接口类型形参的特殊性，烦请老师指点一下。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536598,"discussion_content":"1. 所谓“命令式语言”是英文imperative languages的一种翻译。命令式的语言的一个特点就是程序员要完成是一件事，需要自己一步一步告诉\n机器如何做，即把执行步骤用编程语言的语法罗列出来。如今主流的编程语言，如c, c++, java, go, python, ruby,无论是否是静态语言还是动态语言，无论是否支持面向对象编程，本质上都是命令式语言。那什么不是命令式语言呢？与命令式语言相对的是声明式语言，最常见的就是SQL，它的特点是你只要输入你想要的结果，语言引擎知道该执行什么步骤。历史上还有一种叫prolog的逻辑编程语言也是声明式的，如果对prolog感兴趣，可以看看我参与翻译的《七周七语言》一书。\n\n2. 没有函数体的函数声明 更多用在go语言runtime实现层面，应用层极少使用，这方面参考资料甚少。\n~                                                                                              ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359499,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"辽宁","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1665576447,"is_pvip":false,"replies":[{"id":130743,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665632321,"ip_address":"辽宁","comment_id":359499,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"今天的课程解决了 我前端时间 工作中 遇到的一个疑惑。 很不错","like_count":1,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534545,"discussion_content":"运行一下应该就明白了\n\nfunc showType(i interface{}) {\n\tfmt.Printf(&#34;%T %v \\n&#34;, i, i)\n}\n\nfunc main() {\n\tvar i int = 10\n\tvar f float64 = 10.0\n\tvar b bool = true\n\tvar s string = &#34;hello&#34;\n\n\tshowType(i)\n\tshowType(f)\n\tshowType(b)\n\tshowType(s)\n}\n\n输出\n\nint 10 \nfloat64 10 \nbool true \nstring hello ","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1638216826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534809,"discussion_content":"大佬厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638282010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534545,"ip_address":"","group_id":0},"score":534809,"extra":""}]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534719,"discussion_content":"对于类型为接口类型的形参，实参赋值不是简单的值拷贝，而是有一次“装箱”操作，这个操作是go compiler植入的代码完成的。这块还没讲到interface，所以一笔带过了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638261160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534807,"discussion_content":"了解了，谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638281843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534719,"ip_address":"","group_id":0},"score":534807,"extra":""}]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535039,"discussion_content":"希望老师讲接口的时候能再讲讲这块儿的知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357679,"user_name":"liian2019","can_delete":false,"product_type":"c1","uid":1503741,"ip_address":"北京","ucode":"22F639944F0EA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epvjpicXzEv02d9ztRzIWIicbejyFTTtRA5K6oYmdicq9HQgGfRn3DLytTHQ6CHspb0TibqFkMibhBXj2g/132","comment_is_top":false,"comment_ctime":1663556110,"is_pvip":false,"replies":[{"id":130226,"content":"什么情况？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663638762,"ip_address":"北京","comment_id":357679,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"写了7 8年java，在这一章看傻了...","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590237,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665632321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349992,"user_name":"Geek_25f93f","can_delete":false,"product_type":"c1","uid":2917509,"ip_address":"","ucode":"D5932373E8EEA2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5JKZO1Ziax3Ky03noshpVNyEvZw0pUwjLcHrHRo1XNPKXdmCE88homb6ltA15CdVRnjzjgGs3Ex42CaDbeYzNuQ/132","comment_is_top":false,"comment_ctime":1656492716,"is_pvip":false,"replies":[{"id":127371,"content":"介绍这方面的资料的确不多，可以看看“Go语言高级编程”那本书中是否有相关介绍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656541708,"ip_address":"","comment_id":349992,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，你文中说的 “如果没有函数体，说明这个函数可能是在 Go 语言之外实现的，比如使用汇编语言实现，然后通过链接器将实现与声明中的函数名链接到一起。没有函数体的函数声明是更高级的话题了“ 这方面有可以阅读的文章吗？我看标准库的代码就很多是只有定义函数的部分。然后runtime目录很多汇编代码文件，它们是怎么链接起来的啊？而且看起来也不是x86的汇编\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588261,"discussion_content":"什么情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663638762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062906,"avatar":"https://static001.geekbang.org/account/avatar/00/10/37/fa/e1721c98.jpg","nickname":"yanghp","note":"","ucode":"D7E17A5DC9FC5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641581,"discussion_content":"应该喜欢上才对，这才能体会到go比java的灵活之处","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712799844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346324,"user_name":"Leo (OBS)","can_delete":false,"product_type":"c1","uid":1623301,"ip_address":"","ucode":"379FC6B5730FF4","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/05/86496ab9.jpg","comment_is_top":false,"comment_ctime":1653025938,"is_pvip":false,"replies":[{"id":126371,"content":"这句代码的含义就是：执行setup这个函数，然后将返回值保存到teardown这个变量中。只不过setup这个函数的返回值是一个函数类型罢了。由此可以推导出短变量声明的teardown的类型也是一个函数func()类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653057155,"ip_address":"","comment_id":346324,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，在本科defer的例子中 我发现执行到\n\n    teardown := setup(&quot;demo&quot;) \n这一句时就已经执行了setup函数里语句，只不过这时没有执行return。\n那是否可以认为当把函数和入参一起赋值给变量的时候，变量实际上保存的是函数的返回值？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572935,"discussion_content":"这句代码的含义就是：执行setup这个函数，然后将返回值保存到teardown这个变量中。只不过setup这个函数的返回值是一个函数类型罢了。由此可以推导出短变量声明的teardown的类型也是一个函数func()类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653057155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336508,"user_name":"千乘万骑走北邙","can_delete":false,"product_type":"c1","uid":1741176,"ip_address":"","ucode":"F8286352B192DE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/91/78/1f93dfb5.jpg","comment_is_top":false,"comment_ctime":1646193358,"is_pvip":false,"replies":[{"id":123109,"content":"1. 对于类型为接口类型(比如interface{})的实参，将其他类型(比如int)变量作为实参传递给函数时，不是逐字节拷贝，而是通过编译器将其他类型变量“装箱”为一个接口类型\n2. 变长参数会被转换为切片。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646476467,"ip_address":"","comment_id":336508,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请老师帮忙解答：\n1。“对于类型为接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参”，赋值和前边说的逐字拷贝是什么关系？\n2。“对于为变长参数的形参，Go 编译器会将零个或多个实参按一定形式转换为对应的变长形参”，变长参数转成数组，意思还是拷贝描述符么？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554580,"discussion_content":"1. 对于类型为接口类型(比如interface{})的实参，将其他类型(比如int)变量作为实参传递给函数时，不是逐字节拷贝，而是通过编译器将其他类型变量“装箱”为一个接口类型\n2. 变长参数会被转换为切片。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646476467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325979,"user_name":"Quinn(indochinetoto)","can_delete":false,"product_type":"c1","uid":2429388,"ip_address":"","ucode":"F2B90F67CD63C8","user_header":"https://static001.geekbang.org/account/avatar/00/25/11/cc/e38f4c30.jpg","comment_is_top":false,"comment_ctime":1639290885,"is_pvip":false,"replies":[{"id":119082,"content":"1. “这里的 (f HandlerFunc) 写在函数名ServeHTTP 前面” 说明ServeHTTP是HanderFunc类型的一个方法，后面第24讲有讲解；\n2. partialTimes的返回值的类型就是一个函数类型，函数类型由func+函数签名组成。而函数签名又是由函数参数列表与返回值列表组成的。这里我们要返回的函数类型为func(int) int。所以必须把函数类型写完整。\n\n如果你自己定义一个函数foo，它的返回值是一个func(int)，那foo声明可以这样来：\n\nfunc foo() func(int) {\n .... ...\n}","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640053821,"ip_address":"","comment_id":325979,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有两个问题请教：\n1. &#47;&#47; ServeHTTP calls f(w, r)\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { f(w, r)}\n这里的 (f HandlerFunc) 写在函数名ServeHTTP 前面， 意思是绑定这个函数给HandlerFunc类型？\n\n2. func partialTimes(x int) func(int) int {\n这里return值需要写成&quot;func(int) int&quot;, 我试了一下 不加最后的int, 得到错误&quot; can not use func literal (type func(int) int) as type func(int) in return argument\n所以当定义一个return函数的函数时，那个匿名函数的返回值类型也是需要定义出来的， 是吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554580,"discussion_content":"1. 对于类型为接口类型(比如interface{})的实参，将其他类型(比如int)变量作为实参传递给函数时，不是逐字节拷贝，而是通过编译器将其他类型变量“装箱”为一个接口类型\n2. 变长参数会被转换为切片。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646476467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356870,"user_name":"暴躁的蜗牛","can_delete":false,"product_type":"c1","uid":3008370,"ip_address":"北京","ucode":"9B159C820C5524","user_header":"https://static001.geekbang.org/account/avatar/00/2d/e7/72/4cec29a8.jpg","comment_is_top":false,"comment_ctime":1662654933,"is_pvip":false,"replies":[{"id":129888,"content":"对于这些string、切片这些类型来说，传递“描述符”好比将指针包在盒子里面的“值传递”。这些“描述符”的组成中其实都包含指针。\n\n如果传递string或切片的指针，实际传递的也是描述符的地址，并非内容的地址。\n\n示例：\n\nvar s string = &quot;hello&quot;\nfoo(s) &#47;&#47; 传递 描述符的值\nfoo(&amp;s) &#47;&#47; 传递描述符的地址而已\n\nmap特殊，其“描述符”自身就是一个指针。\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1662705676,"ip_address":"北京","comment_id":356870,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"但是像 string、切片、map 这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。这种只拷贝“描述符”，不拷贝实际数据内容的拷贝过程，也被称为“浅拷贝”。\n\n这个传递描述符 和 传递 指针地址有什么区别","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587037,"discussion_content":"对于这些string、切片这些类型来说，传递“描述符”好比将指针包在盒子里面的“值传递”。这些“描述符”的组成中其实都包含指针。\n\n如果传递string或切片的指针，实际传递的也是描述符的地址，并非内容的地址。\n\n示例：\n\nvar s string = &#34;hello&#34;\nfoo(s) // 传递 描述符的值\nfoo(&amp;s) // 传递描述符的地址而已\n\nmap特殊，其“描述符”自身就是一个指针。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662705676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349189,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1655791586,"is_pvip":false,"replies":[{"id":127145,"content":"为啥没有使用-&gt;语法，这个我还真不清楚。也许就像你说的，都使用(.)保持形式一致统一。但似乎没有官方说法，至少我没有找到🙂。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655893352,"ip_address":"","comment_id":349189,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"结构体传参，也是显示copy，所以有成本，如果不担心数据被修改，我理解改成传指针就可以了。\n但为啥 go 把 c 语言里面的指针引用（-&gt;）给干掉了，统一改成了（.）, 编译器帮忙把活给干了？是为了降低开发者负担吗？\n谢谢老师。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577029,"discussion_content":"为啥没有使用-&gt;语法，这个我还真不清楚。也许就像你说的，都使用(.)保持形式一致统一。但似乎没有官方说法，至少我没有找到🙂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655893352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603025,"discussion_content":"比如slice等，描述符里面封装了指针，这样客户代码使用.比起-&gt;就间接一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675910239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324217,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1638340675,"is_pvip":false,"replies":[{"id":117971,"content":"1. 所谓“命令式语言”是英文imperative languages的一种翻译。命令式的语言的一个特点就是程序员要完成是一件事，需要自己一步一步告诉\n机器如何做，即把执行步骤用编程语言的语法罗列出来。如今主流的编程语言，如c, c++, java, go, python, ruby,无论是否是静态语言还是动态语言，无论是否支持面向对象编程，本质上都是命令式语言。那什么不是命令式语言呢？与命令式语言相对的是声明式语言，最常见的就是SQL，它的特点是你只要输入你想要的结果，语言引擎知道该执行什么步骤。历史上还有一种叫prolog的逻辑编程语言也是声明式的，如果对prolog感兴趣，可以看看我参与翻译的《七周七语言》一书。\n\n2. 没有函数体的函数声明 更多用在go语言runtime实现层面，应用层极少使用，这方面参考资料甚少。\n~                                                                                              ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829081,"ip_address":"","comment_id":324217,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感谢Tony Bai老师这一讲关于函数的内容，全篇都是干货。另外，有几个小问题，麻烦解惑。\n\n1. 命令式语言一般是指哪些语言呢？\n\n2. 关于Go中没有函数体的函数声明，有推荐阅读的资料吗？\n\nPS ：希望后面能有利用闭包简化函数调用的更多例子。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577029,"discussion_content":"为啥没有使用-&gt;语法，这个我还真不清楚。也许就像你说的，都使用(.)保持形式一致统一。但似乎没有官方说法，至少我没有找到🙂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655893352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603025,"discussion_content":"比如slice等，描述符里面封装了指针，这样客户代码使用.比起-&gt;就间接一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675910239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323832,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1638177118,"is_pvip":true,"replies":[{"id":117580,"content":"对于类型为接口类型的形参，实参赋值不是简单的值拷贝，而是有一次“装箱”操作，这个操作是go compiler植入的代码完成的。这块还没讲到interface，所以一笔带过了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638261160,"ip_address":"","comment_id":323832,"utype":1}],"discussion_count":5,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“对于类型为接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参”，这句话没怎么看明白接口类型形参的特殊性，烦请老师指点一下。","like_count":2,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534545,"discussion_content":"运行一下应该就明白了\n\nfunc showType(i interface{}) {\n\tfmt.Printf(&#34;%T %v \\n&#34;, i, i)\n}\n\nfunc main() {\n\tvar i int = 10\n\tvar f float64 = 10.0\n\tvar b bool = true\n\tvar s string = &#34;hello&#34;\n\n\tshowType(i)\n\tshowType(f)\n\tshowType(b)\n\tshowType(s)\n}\n\n输出\n\nint 10 \nfloat64 10 \nbool true \nstring hello ","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1638216826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534809,"discussion_content":"大佬厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638282010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534545,"ip_address":"","group_id":0},"score":534809,"extra":""}]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534719,"discussion_content":"对于类型为接口类型的形参，实参赋值不是简单的值拷贝，而是有一次“装箱”操作，这个操作是go compiler植入的代码完成的。这块还没讲到interface，所以一笔带过了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638261160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534807,"discussion_content":"了解了，谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638281843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534719,"ip_address":"","group_id":0},"score":534807,"extra":""}]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535039,"discussion_content":"希望老师讲接口的时候能再讲讲这块儿的知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359499,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"辽宁","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1665576447,"is_pvip":false,"replies":[{"id":130743,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665632321,"ip_address":"辽宁","comment_id":359499,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"今天的课程解决了 我前端时间 工作中 遇到的一个疑惑。 很不错","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590237,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665632321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357679,"user_name":"liian2019","can_delete":false,"product_type":"c1","uid":1503741,"ip_address":"北京","ucode":"22F639944F0EA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epvjpicXzEv02d9ztRzIWIicbejyFTTtRA5K6oYmdicq9HQgGfRn3DLytTHQ6CHspb0TibqFkMibhBXj2g/132","comment_is_top":false,"comment_ctime":1663556110,"is_pvip":false,"replies":[{"id":130226,"content":"什么情况？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663638762,"ip_address":"北京","comment_id":357679,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"写了7 8年java，在这一章看傻了...","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588261,"discussion_content":"什么情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663638762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062906,"avatar":"https://static001.geekbang.org/account/avatar/00/10/37/fa/e1721c98.jpg","nickname":"yanghp","note":"","ucode":"D7E17A5DC9FC5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641581,"discussion_content":"应该喜欢上才对，这才能体会到go比java的灵活之处","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712799844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349992,"user_name":"Geek_25f93f","can_delete":false,"product_type":"c1","uid":2917509,"ip_address":"","ucode":"D5932373E8EEA2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5JKZO1Ziax3Ky03noshpVNyEvZw0pUwjLcHrHRo1XNPKXdmCE88homb6ltA15CdVRnjzjgGs3Ex42CaDbeYzNuQ/132","comment_is_top":false,"comment_ctime":1656492716,"is_pvip":false,"replies":[{"id":127371,"content":"介绍这方面的资料的确不多，可以看看“Go语言高级编程”那本书中是否有相关介绍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656541708,"ip_address":"","comment_id":349992,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，你文中说的 “如果没有函数体，说明这个函数可能是在 Go 语言之外实现的，比如使用汇编语言实现，然后通过链接器将实现与声明中的函数名链接到一起。没有函数体的函数声明是更高级的话题了“ 这方面有可以阅读的文章吗？我看标准库的代码就很多是只有定义函数的部分。然后runtime目录很多汇编代码文件，它们是怎么链接起来的啊？而且看起来也不是x86的汇编\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578137,"discussion_content":"介绍这方面的资料的确不多，可以看看“Go语言高级编程”那本书中是否有相关介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656541708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346324,"user_name":"Leo (OBS)","can_delete":false,"product_type":"c1","uid":1623301,"ip_address":"","ucode":"379FC6B5730FF4","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/05/86496ab9.jpg","comment_is_top":false,"comment_ctime":1653025938,"is_pvip":false,"replies":[{"id":126371,"content":"这句代码的含义就是：执行setup这个函数，然后将返回值保存到teardown这个变量中。只不过setup这个函数的返回值是一个函数类型罢了。由此可以推导出短变量声明的teardown的类型也是一个函数func()类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653057155,"ip_address":"","comment_id":346324,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，在本科defer的例子中 我发现执行到\n\n    teardown := setup(&quot;demo&quot;) \n这一句时就已经执行了setup函数里语句，只不过这时没有执行return。\n那是否可以认为当把函数和入参一起赋值给变量的时候，变量实际上保存的是函数的返回值？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578137,"discussion_content":"介绍这方面的资料的确不多，可以看看“Go语言高级编程”那本书中是否有相关介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656541708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336508,"user_name":"千乘万骑走北邙","can_delete":false,"product_type":"c1","uid":1741176,"ip_address":"","ucode":"F8286352B192DE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/91/78/1f93dfb5.jpg","comment_is_top":false,"comment_ctime":1646193358,"is_pvip":false,"replies":[{"id":123109,"content":"1. 对于类型为接口类型(比如interface{})的实参，将其他类型(比如int)变量作为实参传递给函数时，不是逐字节拷贝，而是通过编译器将其他类型变量“装箱”为一个接口类型\n2. 变长参数会被转换为切片。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646476467,"ip_address":"","comment_id":336508,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请老师帮忙解答：\n1。“对于类型为接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参”，赋值和前边说的逐字拷贝是什么关系？\n2。“对于为变长参数的形参，Go 编译器会将零个或多个实参按一定形式转换为对应的变长形参”，变长参数转成数组，意思还是拷贝描述符么？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572935,"discussion_content":"这句代码的含义就是：执行setup这个函数，然后将返回值保存到teardown这个变量中。只不过setup这个函数的返回值是一个函数类型罢了。由此可以推导出短变量声明的teardown的类型也是一个函数func()类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653057155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325979,"user_name":"Quinn(indochinetoto)","can_delete":false,"product_type":"c1","uid":2429388,"ip_address":"","ucode":"F2B90F67CD63C8","user_header":"https://static001.geekbang.org/account/avatar/00/25/11/cc/e38f4c30.jpg","comment_is_top":false,"comment_ctime":1639290885,"is_pvip":false,"replies":[{"id":119082,"content":"1. “这里的 (f HandlerFunc) 写在函数名ServeHTTP 前面” 说明ServeHTTP是HanderFunc类型的一个方法，后面第24讲有讲解；\n2. partialTimes的返回值的类型就是一个函数类型，函数类型由func+函数签名组成。而函数签名又是由函数参数列表与返回值列表组成的。这里我们要返回的函数类型为func(int) int。所以必须把函数类型写完整。\n\n如果你自己定义一个函数foo，它的返回值是一个func(int)，那foo声明可以这样来：\n\nfunc foo() func(int) {\n .... ...\n}","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640053821,"ip_address":"","comment_id":325979,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有两个问题请教：\n1. &#47;&#47; ServeHTTP calls f(w, r)\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { f(w, r)}\n这里的 (f HandlerFunc) 写在函数名ServeHTTP 前面， 意思是绑定这个函数给HandlerFunc类型？\n\n2. func partialTimes(x int) func(int) int {\n这里return值需要写成&quot;func(int) int&quot;, 我试了一下 不加最后的int, 得到错误&quot; can not use func literal (type func(int) int) as type func(int) in return argument\n所以当定义一个return函数的函数时，那个匿名函数的返回值类型也是需要定义出来的， 是吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540406,"discussion_content":"1. “这里的 (f HandlerFunc) 写在函数名ServeHTTP 前面” 说明ServeHTTP是HanderFunc类型的一个方法，后面第24讲有讲解；\n2. partialTimes的返回值的类型就是一个函数类型，函数类型由func+函数签名组成。而函数签名又是由函数参数列表与返回值列表组成的。这里我们要返回的函数类型为func(int) int。所以必须把函数类型写完整。\n\n如果你自己定义一个函数foo，它的返回值是一个func(int)，那foo声明可以这样来：\n\nfunc foo() func(int) {\n .... ...\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640053821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2429388,"avatar":"https://static001.geekbang.org/account/avatar/00/25/11/cc/e38f4c30.jpg","nickname":"Quinn(indochinetoto)","note":"","ucode":"F2B90F67CD63C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540003,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639916257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538999,"discussion_content":"尝试解答一下哈哈哈\n第一个问题如果学过其他的面向对象的语言的话，可以理解成HandlerFunc是个类【Go中是结构体】，func (f HandlerFunc) ServeHTTP 代表HandlerFunc这个类实现了ServeHTTP 这个方法；在Go里面就是说的ServeHTTP 这个函数和HandlerFunc类型绑定了，现在ServeHTTP 变成了一个方法，也相当于HandlerFunc类型的一个行为，方法调用的话就要用“变量.方法名(实参列表)”的形式了，而不能直接“函数名(实参列表)”来调用了\n第二个问题，如果不是空的返回值，应该是需要定义出来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639574671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324067,"user_name":"tsingwong","can_delete":false,"product_type":"c1","uid":1029757,"ip_address":"","ucode":"602331BEA4D713","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/7d/2ea95dc0.jpg","comment_is_top":false,"comment_ctime":1638277537,"is_pvip":false,"replies":[{"id":117967,"content":"可以复习一下第13讲 go字符串的内部表示。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828226,"ip_address":"","comment_id":324067,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"&gt; 但是像 string、切片、map 这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。\n这句话里的 string 也是传递的描述符怎么理解呢？","like_count":1},{"had_liked":false,"id":323928,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1638234204,"is_pvip":true,"replies":[{"id":117575,"content":"你说的“静态方法”是指函数么？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260515,"ip_address":"","comment_id":323928,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，您好，请教个问题哈，何时使用静态方法，何时使用结构体的方法呢？我理解需要用到结构体的全局变量的时候担心并发问题，会调用结构体的方法。但是也可以都以参数的形式传递。特别是我们业务代码中的crud，除了接口的具体实现需要结构体，其他的貌似都可以用静态方法，还望老师解惑，多谢老师","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534710,"discussion_content":"你说的“静态方法”是指函数么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1337146,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","nickname":"Summer  空城","note":"","ucode":"6BDBB70FB6F709","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534810,"discussion_content":"是的，老师。也就是请教下什么时候用方法，什么时候用函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638282111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534710,"ip_address":"","group_id":0},"score":534810,"extra":""},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337146,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","nickname":"Summer  空城","note":"","ucode":"6BDBB70FB6F709","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":535040,"discussion_content":"同学为什么把函数称为静态方法，感觉有点奇怪，这是从哪里看到的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534810,"ip_address":"","group_id":0},"score":535040,"extra":""},{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","nickname":"Noya","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535074,"discussion_content":"java吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638345565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535040,"ip_address":"","group_id":0},"score":535074,"extra":""}]}]},{"had_liked":false,"id":390590,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715736540,"is_pvip":false,"replies":[{"id":142091,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870135,"ip_address":"辽宁","comment_id":390590,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"1. go语言的函数，基本定义和c语言等类似，形为func 函数名（参数列表）返回值列表{函数体}\n2. go的参数传递是值传递，所以对于数组等直接存储的复合结构开销大，一般用切片、map等作为参数更合适\n3. 作为一等公民，函数可以作为变量，在函数体中定义（闭包），可以作为返回值。这让go的编程更加灵活，比如高频乘法时生成一个新函数简化编码","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645212,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715870135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323749,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1638150168,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"一等公民的概念终于知道从哪里来的了","like_count":8,"discussions":[{"author":{"id":2749964,"avatar":"https://static001.geekbang.org/account/avatar/00/29/f6/0c/ce4bcaa0.jpg","nickname":"我是小forever","note":"","ucode":"9B7F076E8C6B67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534314,"discussion_content":"ZCMU?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638159880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2749964,"avatar":"https://static001.geekbang.org/account/avatar/00/29/f6/0c/ce4bcaa0.jpg","nickname":"我是小forever","note":"","ucode":"9B7F076E8C6B67","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535035,"discussion_content":"这是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638339452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534314,"ip_address":"","group_id":0},"score":535035,"extra":""}]}]},{"had_liked":false,"id":323971,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1638244009,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"将函数作为值，就变成了一等值","like_count":2},{"had_liked":false,"id":323874,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1638190273,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":4,"product_id":100093501,"comment_content":"以前一直觉得，函数是公民就是因为用的相当普遍。不过，在go里面，函数充当了太多角色，把面向对象对简化了","like_count":2},{"had_liked":false,"id":323834,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1638177571,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"觉得在递归等实现上应该有新意，可以精妙的实现一些算法，比如深搜之类的。","like_count":1},{"had_liked":false,"id":338574,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1647574652,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师同学好，想问，关于函数是一等公民的问题。\n\n如果基于前三个特征【不含有自己的数据类型】，那么JS， PHP中的函数均属于一等公民。\n第四个特征跟一等公民的关系是怎样的呢？ \n另外，我们是不是不应该太在意是否为一等公民这件事，而应该更加关注语言中函数使用的灵活性，有效性。\n\n另附上【Js的代码暂未编写实践】\nPHP代码验证如下：\n&lt;?php\n\n&#47;&#47; 验证函数在PHP中是否具有一等公民的特征\n&#47;&#47; 如果一门编程语言对某种语言元素的创建和使用没有限制，我们可以像对待值（value）一样对待这种语法元素，那么我们就称这种语法元素是这门编程语言的“一等公民”。\n&#47;&#47; 拥有“一等公民”待遇的语法元素可以存储在变量中，===&gt; 1\n&#47;&#47; 可以作为参数传递给函数，===&gt; 2\n&#47;&#47; 可以在函数内部创建并可以作为返回值从函数返回 ===&gt; 3\n\n&#47;&#47; Exec main\n&#47;&#47; 特征1: 支持\n$func = function ($name){\n    echo $name . PHP_EOL;\n};\n$func(&quot;特征1 - 函数字面量&quot;);\n\n(function (){\n    &#47;&#47; 特征2\n    &#47;&#47; 具名函数\n    run(&quot;varFunc&quot;);\n    &#47;&#47; 匿名函数\n    run(\n        function (){\n            echo &quot;特征2 - 匿名函数&quot; . PHP_EOL;\n        }\n    );\n\n    &#47;&#47; 特征三\n    function subFunc(){\n        echo &quot;特征3 - 子函数调用&quot; . PHP_EOL;\n        return function (){\n            echo &quot;特征3 - 子函数返回值 - 函数调用&quot; . PHP_EOL;\n        };\n    }\n\n    $finalFunc = subFunc();\n    &#47;&#47; 返回值函数调用\n    $finalFunc();\n}\n)();\n\n&#47;&#47; 特征二 -- 支持\nfunction run($func){\n    $func();\n}\n\nfunction varFunc(){\n    echo &quot;特征2 - 具名函数&quot; . PHP_EOL;;\n}\n\n&#47;&#47; 输出结果\n&#47;&#47; ➜  learning_of_php git:(master) ✗ php 函数&#47;匿名函数&#47;index2.php\n&#47;&#47; 特征1 - 函数字面量\n&#47;&#47; 特征2 - 具名函数\n&#47;&#47; 特征2 - 匿名函数\n&#47;&#47; 特征3 - 子函数调用\n&#47;&#47; 特征3 - 子函数返回值 - 函数调用\n\n&#47;&#47; 结论：PHP也是函数为一等公民","like_count":0,"discussions":[{"author":{"id":2749964,"avatar":"https://static001.geekbang.org/account/avatar/00/29/f6/0c/ce4bcaa0.jpg","nickname":"我是小forever","note":"","ucode":"9B7F076E8C6B67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534314,"discussion_content":"ZCMU?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638159880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2749964,"avatar":"https://static001.geekbang.org/account/avatar/00/29/f6/0c/ce4bcaa0.jpg","nickname":"我是小forever","note":"","ucode":"9B7F076E8C6B67","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535035,"discussion_content":"这是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638339452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534314,"ip_address":"","group_id":0},"score":535035,"extra":""}]}]},{"had_liked":false,"id":324067,"user_name":"tsingwong","can_delete":false,"product_type":"c1","uid":1029757,"ip_address":"","ucode":"602331BEA4D713","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/7d/2ea95dc0.jpg","comment_is_top":false,"comment_ctime":1638277537,"is_pvip":false,"replies":[{"id":117967,"content":"可以复习一下第13讲 go字符串的内部表示。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828226,"ip_address":"","comment_id":324067,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"&gt; 但是像 string、切片、map 这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。\n这句话里的 string 也是传递的描述符怎么理解呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536593,"discussion_content":"可以复习一下第13讲 go字符串的内部表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535042,"discussion_content":"看看前面关系string类型的内存表示文章？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638340412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1029757,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b6/7d/2ea95dc0.jpg","nickname":"tsingwong","note":"","ucode":"602331BEA4D713","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535066,"discussion_content":"嗯嗯，看了下回忆起来了。跟 string 的底层实现有关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638344830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535042,"ip_address":"","group_id":0},"score":535066,"extra":""}]}]},{"had_liked":false,"id":323928,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1638234204,"is_pvip":true,"replies":[{"id":117575,"content":"你说的“静态方法”是指函数么？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260515,"ip_address":"","comment_id":323928,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，您好，请教个问题哈，何时使用静态方法，何时使用结构体的方法呢？我理解需要用到结构体的全局变量的时候担心并发问题，会调用结构体的方法。但是也可以都以参数的形式传递。特别是我们业务代码中的crud，除了接口的具体实现需要结构体，其他的貌似都可以用静态方法，还望老师解惑，多谢老师","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536593,"discussion_content":"可以复习一下第13讲 go字符串的内部表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535042,"discussion_content":"看看前面关系string类型的内存表示文章？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638340412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1029757,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b6/7d/2ea95dc0.jpg","nickname":"tsingwong","note":"","ucode":"602331BEA4D713","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535066,"discussion_content":"嗯嗯，看了下回忆起来了。跟 string 的底层实现有关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638344830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535042,"ip_address":"","group_id":0},"score":535066,"extra":""}]}]},{"had_liked":false,"id":390590,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715736540,"is_pvip":false,"replies":[{"id":142091,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870135,"ip_address":"辽宁","comment_id":390590,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"1. go语言的函数，基本定义和c语言等类似，形为func 函数名（参数列表）返回值列表{函数体}\n2. go的参数传递是值传递，所以对于数组等直接存储的复合结构开销大，一般用切片、map等作为参数更合适\n3. 作为一等公民，函数可以作为变量，在函数体中定义（闭包），可以作为返回值。这让go的编程更加灵活，比如高频乘法时生成一个新函数简化编码","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534710,"discussion_content":"你说的“静态方法”是指函数么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1337146,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","nickname":"Summer  空城","note":"","ucode":"6BDBB70FB6F709","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534810,"discussion_content":"是的，老师。也就是请教下什么时候用方法，什么时候用函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638282111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534710,"ip_address":"","group_id":0},"score":534810,"extra":""},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337146,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","nickname":"Summer  空城","note":"","ucode":"6BDBB70FB6F709","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":535040,"discussion_content":"同学为什么把函数称为静态方法，感觉有点奇怪，这是从哪里看到的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534810,"ip_address":"","group_id":0},"score":535040,"extra":""},{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","nickname":"Noya","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535074,"discussion_content":"java吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638345565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535040,"ip_address":"","group_id":0},"score":535074,"extra":""}]}]},{"had_liked":false,"id":323749,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1638150168,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"一等公民的概念终于知道从哪里来的了","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645212,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715870135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323971,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1638244009,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"将函数作为值，就变成了一等值","like_count":2},{"had_liked":false,"id":323874,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1638190273,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":4,"product_id":100093501,"comment_content":"以前一直觉得，函数是公民就是因为用的相当普遍。不过，在go里面，函数充当了太多角色，把面向对象对简化了","like_count":2},{"had_liked":false,"id":323834,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1638177571,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"觉得在递归等实现上应该有新意，可以精妙的实现一些算法，比如深搜之类的。","like_count":1},{"had_liked":false,"id":338574,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1647574652,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师同学好，想问，关于函数是一等公民的问题。\n\n如果基于前三个特征【不含有自己的数据类型】，那么JS， PHP中的函数均属于一等公民。\n第四个特征跟一等公民的关系是怎样的呢？ \n另外，我们是不是不应该太在意是否为一等公民这件事，而应该更加关注语言中函数使用的灵活性，有效性。\n\n另附上【Js的代码暂未编写实践】\nPHP代码验证如下：\n&lt;?php\n\n&#47;&#47; 验证函数在PHP中是否具有一等公民的特征\n&#47;&#47; 如果一门编程语言对某种语言元素的创建和使用没有限制，我们可以像对待值（value）一样对待这种语法元素，那么我们就称这种语法元素是这门编程语言的“一等公民”。\n&#47;&#47; 拥有“一等公民”待遇的语法元素可以存储在变量中，===&gt; 1\n&#47;&#47; 可以作为参数传递给函数，===&gt; 2\n&#47;&#47; 可以在函数内部创建并可以作为返回值从函数返回 ===&gt; 3\n\n&#47;&#47; Exec main\n&#47;&#47; 特征1: 支持\n$func = function ($name){\n    echo $name . PHP_EOL;\n};\n$func(&quot;特征1 - 函数字面量&quot;);\n\n(function (){\n    &#47;&#47; 特征2\n    &#47;&#47; 具名函数\n    run(&quot;varFunc&quot;);\n    &#47;&#47; 匿名函数\n    run(\n        function (){\n            echo &quot;特征2 - 匿名函数&quot; . PHP_EOL;\n        }\n    );\n\n    &#47;&#47; 特征三\n    function subFunc(){\n        echo &quot;特征3 - 子函数调用&quot; . PHP_EOL;\n        return function (){\n            echo &quot;特征3 - 子函数返回值 - 函数调用&quot; . PHP_EOL;\n        };\n    }\n\n    $finalFunc = subFunc();\n    &#47;&#47; 返回值函数调用\n    $finalFunc();\n}\n)();\n\n&#47;&#47; 特征二 -- 支持\nfunction run($func){\n    $func();\n}\n\nfunction varFunc(){\n    echo &quot;特征2 - 具名函数&quot; . PHP_EOL;;\n}\n\n&#47;&#47; 输出结果\n&#47;&#47; ➜  learning_of_php git:(master) ✗ php 函数&#47;匿名函数&#47;index2.php\n&#47;&#47; 特征1 - 函数字面量\n&#47;&#47; 特征2 - 具名函数\n&#47;&#47; 特征2 - 匿名函数\n&#47;&#47; 特征3 - 子函数调用\n&#47;&#47; 特征3 - 子函数返回值 - 函数调用\n\n&#47;&#47; 结论：PHP也是函数为一等公民","like_count":0}]}