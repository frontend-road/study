{"id":447723,"title":"18｜控制结构：if的“快乐路径”原则","content":"<p>你好，我是Tony Bai。</p><p>1984年图灵奖获得者、著名计算机科学家尼古拉斯·沃斯（Niklaus Wirth）提出过著名的“程序=数据结构+算法”的公式。在前面的课程中，我们花了很多时间讲解了Go语言的基本数据类型和复合数据类型，这些对应的就是公式中数据结构，通过这些数据类型我们可以建立起复杂的数据结构。</p><p>那么公式中的算法呢？算法是对真实世界运作规律的抽象，是解决真实世界中问题的步骤。在计算机世界中，再复杂的算法都可以通过顺序、分支和循环这三种基本的控制结构构造出来。</p><p>顺序结构自然不用说了，我们要关注的主要是后面两个。所以，这一节课开始的连续三节课，我们都会聚焦于Go语言中的分支和循环这两种控制结构。</p><p>那么Go语言对分支与循环两种控制结构的支持是怎么样的呢？针对程序的分支结构，Go提供了if和switch-case两种语句形式；而针对循环结构，Go只保留了for这一种循环语句形式。这节课我们就先从Go语言分支结构之一的if语句开始讲起。</p><h2>Go中的分支结构之认识if语句</h2><p>在<a href=\"https://time.geekbang.org/column/article/426282\">01讲</a>中我们提到过，Go语言是站在C语言等的肩膀之上诞生与成长起来的。Go语言继承了C语言的很多语法，这里就包括控制结构。但Go也不是全盘照搬，而是在继承的基础上又加上了自己的一些优化与改进，比如：</p><!-- [[[read_end]]] --><ul>\n<li>Go坚持“一件事情仅有一种做法的理念”，只保留了for这一种循环结构，去掉了C语言中的while和do-while循环结构；</li>\n<li>Go填平了C语言中switch分支结构中每个case语句都要以break收尾的“坑”；</li>\n<li>Go支持了type switch特性，让“类型”信息也可以作为分支选择的条件；</li>\n<li>Go的switch控制结构的case语句还支持表达式列表，让相同处理逻辑的多个分支可以合并为一个分支，等等。</li>\n</ul><p>如果你这个时候还不是很懂我提到的这些改进点，没有关系，在后面的几节课中，我会为你详细讲解Go关于控制结构的各个优化和改进点。</p><p>那么，Go中的if语句又有什么创新点呢？我们先来认识一下Go中的if语句。</p><p>if语句是Go语言中提供的一种分支控制结构，它也是Go中最常用、最简单的分支控制结构。它会根据<strong>布尔表达式</strong>的值，在两个分支中选择一个执行。我们先来看一个最简单的、单分支结构的if语句的形式：</p><pre><code class=\"language-plain\">if boolean_expression {\n    // 新分支\n}\n\n// 原分支\n</code></pre><p><strong>分支结构是传统结构化程序设计中的基础构件</strong>，这个if语句中的代码执行流程就等价于下面这幅流程图：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/58/a619411ccc716aa76b0352b1303b0f58.jpg?wh=1448x958\" alt=\"图片\"></p><p>从图中我们可以看到，代码执行遇到if分支结构后，首先会对其中的布尔表达式（boolean_expression）进行求值，如果求值结果为true，那么程序将进入<strong>新分支</strong>执行，如果布尔表达式的求值结果为false，代码就会继续沿着原分支的路线继续执行。</p><p><strong>虽然各种编程语言几乎都原生支持了if语句，但Go的if语句依然有着自己的特点：</strong></p><p>第一，和Go函数一样，if语句的分支代码块的左大括号与if关键字在同一行上，这也是Go代码风格的统一要求，gofmt工具会帮助我们实现这一点；</p><p>第二，if语句的布尔表达式整体不需要用括号包裹，一定程度上减少了开发人员敲击键盘的次数。而且，if关键字后面的条件判断表达式的求值结果必须是布尔类型，即要么是true，要么是false：</p><pre><code class=\"language-plain\">if runtime.GOOS == \"linux\" {\n    println(\"we are on linux os\")\t  \n}\n</code></pre><p>如果判断的条件比较多，我们可以用多个逻辑操作符连接起多个条件判断表达式，比如这段代码就是用了多个逻辑操作符&amp;&amp;来连接多个布尔表达式：</p><pre><code class=\"language-plain\">if (runtime.GOOS == \"linux\") &amp;&amp; (runtime.GOARCH == \"amd64\") &amp;&amp;\n    (runtime.Compiler != \"gccgo\") {\n    println(\"we are using standard go compiler on linux os for amd64\")\n}\n</code></pre><p>除了逻辑操作符&amp;&amp;之外，Go还提供了另外两个逻辑操作符，我总结到了这张表里。</p><p><img src=\"https://static001.geekbang.org/resource/image/20/5a/20d286415d01e25c74a47ef209b1e55a.jpg?wh=1920x823\" alt=\"图片\"></p><p>你可能也注意到了，上面示例代码中的每个布尔表达式都被小括号括上了，这又是什么原因呢？这是为了降低你在阅读和理解这段代码时，面对操作符优先级的心智负担，这也是我个人的编码习惯。</p><p>Go语言的操作符是有优先级的。这里你要记住，一元操作符，比如上面的逻辑非操作符，具有最高优先级，其他操作符的优先级如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/ff/3db5140917f57a38929c127a7d5867ff.jpg?wh=1429x577\" alt=\"\"></p><p>操作符优先级决定了操作数优先参与哪个操作符的求值运算，我们以下面代码中if语句的布尔表达式为例：</p><pre><code class=\"language-plain\">func main() {\n    a, b := false,true\n    if a &amp;&amp; b != true {\n        println(\"(a &amp;&amp; b) != true\")\n        return\n    }\n    println(\"a &amp;&amp; (b != true) == false\")\n}\n</code></pre><p>执行这段代码会输出什么呢？你第一次读这段代码的时候，可能会认为输出(a &amp;&amp; b) != true，但实际上我们得到的却是a &amp;&amp; (b != true) == false。这是为什么呢？</p><p>这段代码的关键就在于，if后面的布尔表达式中的操作数b是先参与&amp;&amp;的求值运算，还是先参与!=的求值运算。根据前面的操作符优先级表，我们知道，!=的优先级要高于&amp;&amp;，因此操作数b先参与的是!=的求值运算，这样if后的布尔表达式就等价于a &amp;&amp; (b != true) ，而不是我们最初认为的(a &amp;&amp; b) != true。</p><p>如果你有时候也会记不住操作符优先级，不用紧张。从学习和使用C语言开始，我自己就记不住这么多操作符的优先级，况且不同编程语言的操作符优先级还可能有所不同，所以我个人倾向在if布尔表达式中，使用<strong>带有小括号的子布尔表达式</strong>来清晰地表达判断条件。</p><p>这样做不仅可以消除了自己记住操作符优先级的学习负担，同时就像前面说的，当其他人阅读你的代码时，也可以很清晰地看出布尔表达式要表达的逻辑关系，这能让我们代码的可读性更好，更易于理解，不会因记错操作符优先级顺序而产生错误的理解。</p><p><strong>除了上面的最简形式，Go语言的if语句还有其他多种形式，比如二分支结构和多（N）分支结构。</strong></p><p>二分支控制结构比较好理解。比如下面这个例子，当boolean_expression求值为true时，执行分支1，否则，执行分支2：</p><pre><code class=\"language-plain\">if boolean_expression {\n\t// 分支1\n} else {\n\t// 分支2\n}\n</code></pre><p>多分支结构由于引入了else if，理解起来稍难一点点，它的标准形式是这样的：</p><pre><code class=\"language-plain\">if boolean_expression1 {\n\t// 分支1\n} else if boolean_expression2 {\n\t// 分支2\n\n... ...\n\n} else if boolean_expressionN {\n\t// 分支N\n} else {\n\t// 分支N+1\n}\n</code></pre><p>我们以下面这个四分支的代码为例，看看怎么拆解这个多分支结构：</p><pre><code class=\"language-plain\">if boolean_expression1 {\n    // 分支1\n} else if boolean_expression2 {\n    // 分支2\n} else if boolean_expression3 {\n    // 分支3\n} else {\n    // 分支4\n} \n</code></pre><p>要理解这个略复杂一些的分支结构，其实很简单。我们只需要把它做一下等价变换，变换为我们熟悉的二分支结构就好了，变换后的代码如下：</p><pre><code class=\"language-plain\">if boolean_expression1 {\n    // 分支1\n} else {\n    if boolean_expression2 {\n        // 分支2\n    } else { \n        if boolean_expression3 {\n            // 分支3\n        } else {\n            // 分支4\n        } \n    }\n}\n</code></pre><p>这样等价转换后，我们得到一个层层缩进的二分支结构，通过上面我们对二分支的分析，再来理解这个结构就十分容易了。</p><h2>支持声明if语句的自用变量</h2><p>无论是单分支、二分支还是多分支结构，我们都可以在if后的布尔表达式前，进行一些变量的声明，在if布尔表达式前声明的变量，我叫它<strong>if语句的自用变量</strong>。顾名思义，这些变量只可以在if语句的代码块范围内使用，比如下面代码中的变量a、b和c：</p><pre><code class=\"language-plain\">func main() {\n    if a, c := f(), h(); a &gt; 0 {\n        println(a)\n    } else if b := f(); b &gt; 0 {\n        println(a, b)\n    } else {\n        println(a, b, c)\n    }\n}\n</code></pre><p>我们可以看到自用变量声明的位置是在每个if语句的后面，布尔表达式的前面，而且，由于声明本身是一个语句，所以我们需要把它和后面的布尔表达式通过分号分隔开。</p><p>这里又涉及到了代码块与作用域的概念，这是我们在<a href=\"https://time.geekbang.org/column/article/436915\">第11讲</a>中学习到的内容。如果你觉得概念有些模糊了，可以回过头去复习一下。根据<a href=\"https://time.geekbang.org/column/article/436915\">第11讲</a>中的讲解，我们知道，上面代码中声明的变量a、b、c都位于各级if的隐式代码块中，它们的作用域起始于它声明所在的代码块，并一直可扩展至嵌入到这个代码块的所有内层代码块中。</p><p><strong>在if语句中声明自用变量是Go语言的一个惯用法</strong>，这种使用方式直观上可以让开发者有一种代码行数减少的感觉，提高可读性。同时，由于这些变量是if语句自用变量，它的作用域仅限于if语句的各层隐式代码块中，if语句外部无法访问和更改这些变量，这就让这些变量具有一定隔离性，这样你在阅读和理解if语句的代码时也可以更聚焦。</p><p>不过前面我们<a href=\"https://time.geekbang.org/column/article/436915\">第11讲</a>也重点提到过，Go控制结构与短变量声明的结合是“变量遮蔽”问题出没的重灾区，你在这点上一定要注意。</p><p>到这里，我们已经学过了if分支控制结构的所有形式，也了解了if语句通过短变量声明形式声明自用变量的优点与不足。那么在日常开发中，这些if分支控制结构形式是随意使用的吗？有什么优化方案吗？</p><h2>if语句的“快乐路径”原则</h2><p>我们已经学了if分支控制结构的三种形式了，从可读性上来看，单分支结构要优于二分支结构，二分支结构又优于多分支结构。那么显然，我们<strong>在日常编码中要减少多分支结构，甚至是二分支结构的使用，这会有助于我们编写出优雅、简洁、易读易维护且不易错的代码</strong>。</p><p>我们用一个具体的例子直观地体会一下我的这个观点，下面是两段逻辑相同但形式不同的伪代码段：</p><pre><code class=\"language-plain\">//伪代码段1：\n\nfunc doSomething() error {\n\tif errorCondition1 {\n\t\t// some error logic\n\t\t... ...\n\t\treturn err1\n\t}\n\t\n\t// some success logic\n\t... ...\n\n\tif errorCondition2 {\n\t\t// some error logic\n\t\t... ...\n\t\treturn err2\n\t}\n\n\t// some success logic\n\t... ...\n\treturn nil\n}\n\n// 伪代码段2：\n\nfunc doSomething() error {\n\tif successCondition1 {\n\t\t// some success logic\n\t\t... ...\n\n\t\tif successCondition2 {\n\t\t\t// some success logic\n\t\t\t... ...\n\n\t\t\treturn nil\n\t\t} else {\n\t\t\t// some error logic\n\t\t\t... ...\n\t\t\treturn err2\n\t\t}\n\t} else {\n\t\t// some error logic\n\t\t... ...\n\t\treturn err1\n\t}\n}\n</code></pre><p>即便你是刚入门的Go新手，你大概也能看出上面代码的优劣。</p><p>我们看看只使用了单分支控制结构的伪代码段1，我们看到代码段1有这几个特点：</p><ul>\n<li>没有使用else分支，失败就立即返回；</li>\n<li>“成功”逻辑始终“居左”并延续到函数结尾，没有被嵌入到if的布尔表达式为true的代码分支中；</li>\n<li>整个代码段布局扁平，没有深度的缩进；</li>\n</ul><p>而另外一个实现了同样逻辑的伪代码段2，就使用了带有嵌套的二分支结构，它的特点如下：</p><ul>\n<li>整个代码段呈现为“锯齿状”，有深度缩进；</li>\n<li>“成功”逻辑被嵌入到if的布尔表达式为true的代码分支中；</li>\n</ul><p>很明显，伪代码段1的逻辑更容易理解，也更简洁。Go社区把这种if语句的使用方式称为if语句的“<strong>快乐路径</strong>（Happy Path）”原则，所谓“快乐路径”也就是成功逻辑的代码执行路径，它的特点是这样的：</p><ul>\n<li>仅使用单分支控制结构；</li>\n<li>当布尔表达式求值为false时，也就是出现错误时，在单分支中快速返回；</li>\n<li>正常逻辑在代码布局上始终“靠左”，这样读者可以从上到下一眼看到该函数正常逻辑的全貌；</li>\n<li>函数执行到最后一行代表一种成功状态。</li>\n</ul><p>Go社区推荐Gopher们在使用if语句时尽量符合这些原则，如果你的函数实现代码不符合“快乐路径”原则，你可以按下面步骤进行重构：</p><ul>\n<li>尝试将“正常逻辑”提取出来，放到“快乐路径”中；</li>\n<li>如果无法做到上一点，很可能是函数内的逻辑过于复杂，可以将深度缩进到else分支中的代码析出到一个函数中，再对原函数实施“快乐路径”原则。</li>\n</ul><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>分支控制结构是构造现实中复杂算法的三大基础控制结构之一，Go语言通过if与switch语句对分支控制结构提供了支持。在这节课中，我们重点讲解了if语句，我建议你记住以下几点：</p><p>第一，if语句是Go语言中最常用的分支控制语句，也是最简单的分支控制结构。if语句通过对布尔表达式的求值决定了后续代码执行要进入的哪条分支。当需要复杂条件判断时，我们可以使用逻辑操作符连接多个布尔表达式，作为if语句的判断条件表达式。如果这么做了，我们还要注意各个操作符的优先级，我个人建议尽量用小括号对各个布尔表达式进行清晰地隔离，这样可以提升代码可读性。</p><p>第二，Go的if语句提供了多种使用形式，包括单分支、双分支以及多分支。多分支理解起来略有难度，我们可以将它等价转换为双分支来理解。</p><p>第三，if语句支持在布尔表达式前声明自用变量，这些变量作用域仅限于if语句的代码块内部。使用if自用变量可以一定程度简化代码，并增强与同函数内其他变量的隔离，但这也十分容易导致变量遮蔽问题，你使用时一定要注意。</p><p>最后一点，if语句的三种使用形式的复杂度与可读性不一，我们建议在使用if语句时尽量符合“快乐路径”原则，这个原则通常只使用最容易理解的单分支结构，所有正常代码均“靠左”，这让函数内代码逻辑一目了然，提升了代码可读性与可维护性。</p><h2>思考题</h2><p>今天，我依然出了一个思考题：如果一个if语句使用了多分支结构，如下面代码这样，那么if语句中的几个布尔表达式如何排列能达到最好的效果呢？</p><p>提示一下，几个布尔表达式能够被命中的概率是不同的，你在答案中可以自行假设一下。期待在留言区看到你的分析。</p><pre><code class=\"language-plain\">func foo() {\n    if boolean_expression1 {\n\n    } else if boolean_expression2 {\n\n    } else if boolean_expression3 {\n\n    } else {\n\n    }\n}\n</code></pre><p>欢迎你把这节课分享给更多对Go语言中的if语句感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"17｜复合数据类型：用结构体建立对真实世界的抽象","id":446840},"right":{"article_title":"19｜控制结构：Go的for循环，仅此一种","id":450944}},"comments":[{"had_liked":false,"id":322726,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1637569432,"is_pvip":true,"replies":[{"id":"117531","content":"厉害！👍","user_name":"作者回复","comment_id":322726,"uid":"1026224","ip_address":"","utype":1,"ctime":1638179066,"user_name_real":"编辑"}],"discussion_count":10,"race_medal":0,"score":"212090966936","product_id":100093501,"comment_content":"<br>如果加上“布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少”，这个条件，那么最优的性能最好的写法应该是最大概率的放到最前面，因此可以改成如下：<br><br>func foo() {<br>    if boolean_expression3{<br><br>        return<br>    }<br>    if boolean_expression2 {<br><br>        return<br>    }<br>    if boolean_expression1 {<br><br>        return<br>    }<br><br>     else代码<br>     return<br>}<br><br>那为什么命中的最多，写到前面，是最好的呢，这里面主要涉及到2个技术点：流水线技术和分支预测<br>流水线技术：简单的说，一条 CPU 指令的执行是由 取指令-指令译码-指令执行-结果回写组成的(简单的说哈，真实的流水线是更长更复杂的)；第一条指令译码的时候，就可以去取第二条指令，因此可以通过流水线技术提高CPU的使用率。<br>分支预测：如果没有任何分支预测，那么就是按照程序的代码顺序执行，那么执行到if上一句的时候，指令译码就是if语句，取指令就是if语句块的第一句，那么if如果不满足的话，就会执行JMP指令，跳转到else，因此流水线中的取指令与指令译码其实是无用功。因此在没有任何分支预测优化的情况下，if语句需要把概率更高的条件写到最上面，更能体现流水线的威力。<br><br>但是现代计算机都有分支预测的优化，比如动态分支预测等技术，但是不管怎么说，把概率最大的放到最上面，还是很有必要的。<br><br>问题：在C语言中，有类似这样的宏定义，可以使用 __builtin_expect函数，主动提示那个分支的代码的概率更高，在go中是否也有类似的方法？还是说现在的编后端编译技术已经比较智能，不需要甚至禁止程序员手动指定分支预测了。<br>#define likely(x)      __builtin_expect(!!(x), 1)<br>#define unlikely(x)    __builtin_expect(!!(x), 0)<br>","like_count":49,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534396,"discussion_content":"厉害！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638179066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532517,"discussion_content":"简单从 Go 语言层面的执行也可以看出，概率大的放前面代码执行返回的越快越早。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637633825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2419502,"avatar":"https://static001.geekbang.org/account/avatar/00/24/eb/2e/90fea784.jpg","nickname":"柒","note":"","ucode":"D41241629321A1","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588678,"discussion_content":"分支预测技术，cpu会去根据历史执行情况，自动预测，执行概率高的放在后面也没有影响。 fast fail 方式更简洁易懂，有些人可能会说失败的情况概率很低，放在前面会影响性能，这想多了，难道cpu是根据你的先后顺序去进行分支预测吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663986052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025239,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","nickname":"Aliliin","note":"","ucode":"61F9A09BB6650F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539515,"discussion_content":"我就喜欢这种写法，不喜欢 else else 的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639735530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532521,"discussion_content":"主要是现在的编程语言都建议Fail-fast，比如说参数检验放到最前面，如果失败直接返回，那么在这种情况下，参数不合法其实是低概率事件，所以Fail-fast与概率高的放到最前面就冲突了。\n\n但是如果支持likely或者unlikely之类的话，那么就不重要了，参数交验即符合Fail-fast，同时也满足现在的编程习惯，只需要在参数交验加上unlikely就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637634342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":5,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":532843,"discussion_content":"同学你说的可能比较零碎，读完了也没太明白个所以然。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637718436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532521,"ip_address":""},"score":532843,"extra":"{\"user_type\":1}"},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532868,"discussion_content":"可以搜索流水线技术和分支预测等关键字，查询相关资料，网上的很多资料是有例子的，比较好明白。\n\n如果你说的是Fail-fast，一般的写法都是先检验参数，通过后才会执行业务逻辑，但是参数不合法其实是低概率事件，因此先交验参数其实是把低概率事件放到了函数的最上面，与咱们了解的流水线技术是相悖的，因此可能就是分支预测智能调整了，或者是程序员手动指定，通过unlikely、likely之类的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1637722703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532843,"ip_address":""},"score":532868,"extra":"{\"user_type\":1}"},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":532991,"discussion_content":"谢谢回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637748266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532868,"ip_address":""},"score":532991,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":322655,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1637544106,"is_pvip":true,"replies":[{"id":"117154","content":"改成快乐路径方式是ok的。<br><br>可能思考题没说清楚。这里说的“效果最好”，指的是这段代码的执行性能最好。<br><br>提示一下：如果从统计概率而言，布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少，那么排列应该如何变<br>化才能让这段代码执行性能最好呢？","user_name":"作者回复","comment_id":322655,"uid":"1026224","ip_address":"","utype":1,"ctime":1637562703,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"23112380586","product_id":100093501,"comment_content":"可以改成这样子吧<br><br>func foo() {<br>    if boolean_expression1 {<br><br>        return<br>    } <br>    if boolean_expression2 {<br><br>        return<br>    } <br>    if boolean_expression3 {<br><br>        return<br>    } <br><br>     else代码<br>    return<br>}","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532244,"discussion_content":"改成快乐路径方式是ok的。\n\n可能思考题没说清楚。这里说的“效果最好”，指的是这段代码的执行性能最好。\n\n提示一下：如果从统计概率而言，布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少，那么排列应该如何变\n化才能让这段代码执行性能最好呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637562703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532383,"discussion_content":"执行从前往后，boolean_expression3 &gt; boolean_expression2 &gt; boolean_expression1 这样的顺序比较好吗？\n但是如果后面的条件有依赖于前面的判断通过结果的，应该就不能调整这个顺序了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637590533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532244,"ip_address":""},"score":532383,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":322985,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1637679443,"is_pvip":false,"replies":[{"id":"117560","content":"是的。尽量写简洁易读的代码才是王道。","user_name":"作者回复","comment_id":322985,"uid":"1026224","ip_address":"","utype":1,"ctime":1638256909,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18817548627","product_id":100093501,"comment_content":"对于if的“快乐路径”原则深表认同，每次看见同事写的四五层以上的 if else 语句，有种“想死” 的冲动。<br><br>自以为逻辑能力很强，殊不知自己一时爽，后来者却无法维护这样的代码了。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534683,"discussion_content":"是的。尽量写简洁易读的代码才是王道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638256909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322996,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1637681038,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10227615630","product_id":100093501,"comment_content":"把命中率高的依次放前面，性能会好些。需要注意的是，并不是所有if都遵从快乐原则，毕竟很多逻辑只是简单确定一个值，return的逻辑在下面。Happy Path还是更是适合错误判断，而不是单纯选择","like_count":2,"discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532820,"discussion_content":"同学能举个例就更好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637715783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335007,"user_name":"Empty","can_delete":false,"product_type":"c1","uid":1237261,"ip_address":"","ucode":"AD6C95A503B991","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/0d/ecf81935.jpg","comment_is_top":false,"comment_ctime":1645253080,"is_pvip":true,"replies":[{"id":"122604","content":"✅","user_name":"作者回复","comment_id":335007,"uid":"1026224","ip_address":"","utype":1,"ctime":1645604070,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940220376","product_id":100093501,"comment_content":"func foo() {<br>\tif boolean_expression1 {<br><br>\t\treturn<br>\t}<br>\tif boolean_expression2 {<br><br>\t\treturn<br>\t}<br>\tif boolean_expression3 {<br><br>\t\treturn<br>\t}<br><br>\telse代码<br>\treturn<br>}<br><br>从代码的可读性来讲应该写成这个样子，但是多个if条件的排列顺序要综合命中概率、条件判断复杂度、业务优先级等方面去考虑","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552816,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645604070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322812,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637597126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5932564422","product_id":100093501,"comment_content":"跟着老师的风格走，多个 if 条件组合的时候加上括号提高可读性。快乐路径很有意思，比 Fail-fast 更吸引眼球","like_count":1},{"had_liked":false,"id":322774,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1637581307,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5932548603","product_id":100093501,"comment_content":"if快乐路径，其实就是减少不必要的嵌套，让代码结构简单明了。<br>思考题里，条件的优先级应该是命中率高的排前面，else 有时候似乎没太必要写。","like_count":1},{"had_liked":false,"id":322740,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1637572153,"is_pvip":true,"replies":[{"id":"117530","content":"相对于第一个深层嵌套的“不易读”，下面虽然verbose一些，但代码一目了然啊。不知你是否有同样感觉。","user_name":"作者回复","comment_id":322740,"uid":"1026224","ip_address":"","utype":1,"ctime":1638179023,"user_name_real":"编辑"}],"discussion_count":4,"race_medal":0,"score":"5932539449","product_id":100093501,"comment_content":"还是之前的问题，happy path似乎让comma ok不再简洁<br><br>comma ok:<br>```go<br>\tm := map[string]int {<br>\t\t&quot;v1&quot;: 1,<br>\t\t&quot;v2&quot;: 2,<br>\t\t&quot;v3&quot;: 3,<br>\t}<br><br>\tif v1, ok := m[&quot;v1&quot;]; ok {<br>\t\tif v2, ok := m[&quot;v2&quot;]; ok {<br>\t\t\tif v3, ok := m[&quot;v3&quot;]; ok {<br>\t\t\t\tfmt.Println(v1 + v2 + v3)<br>\t\t\t}<br>\t\t}<br>\t}<br>```<br><br>happy path:<br>```go<br>\tv1, ok := m[&quot;v1&quot;]<br>\tif !ok {<br>\t\treturn<br>\t}<br>\t<br>\tv2, ok := m[&quot;v2&quot;]<br>\tif !ok {<br>\t\treturn<br>\t}<br>\t<br>\tv3, ok := m[&quot;v3&quot;]<br>\tif !ok {<br>\t\treturn<br>\t}<br>\t<br>\tfmt.Println(v1 + v2 + v3)<br>```<br><br>换种写法也一样：<br>```go<br>\tif _, ok := m[&quot;v1&quot;]; !ok {<br>\t\treturn<br>\t}<br>\tv1 := m[&quot;v1&quot;]<br>\t<br>\tif _, ok := m[&quot;v2&quot;]; !ok {<br>\t\treturn<br>\t}<br>\tv2 := m[&quot;v2&quot;]<br>\t<br>\tif _, ok := m[&quot;v3&quot;]; !ok {<br>\t\treturn<br>\t}<br>\tv3 := m[&quot;v3&quot;]<br><br>\tfmt.Println(v1 + v2 + v3)<br>```","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534395,"discussion_content":"相对于第一个深层嵌套的“不易读”，下面虽然verbose一些，但代码一目了然啊。不知你是否有同样感觉。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638179023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534449,"discussion_content":"我只是觉得用if comma ok原本是为了节省些代码，结果按照某种惯用写法却没有节省成。不知道是不是设计的时候欠考虑了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638192057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534395,"ip_address":""},"score":534449,"extra":""}]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532510,"discussion_content":"同意，还是下面的代码简洁点，深度嵌套也不好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637633332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532341,"discussion_content":"个人觉的还是下面简洁， 深度嵌套的 得好好琢磨一下， 并且不美观。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637581894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322666,"user_name":"Forest","can_delete":false,"product_type":"c1","uid":1707743,"ip_address":"","ucode":"B75CB4919FF25A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","comment_is_top":false,"comment_ctime":1637546951,"is_pvip":false,"replies":[{"id":"117150","content":"可能思考题没说清楚。这里说的“效果最好”，指的是这段代码的执行性能最好。<br><br>提示一下：如果从统计概率而言，布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少，那么排列应该如何变化才能让这段代码执行性能最好呢？<br><br>btw，使用switch-case，说明你基础很好。","user_name":"作者回复","comment_id":322666,"uid":"1026224","ip_address":"","utype":1,"ctime":1637560906,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":2,"score":"5932514247","product_id":100093501,"comment_content":"使用switch case；<br>func foo() {<br>\tswitch expression {<br>\tcase condition1:<br><br>\tcase condition2:<br><br>\tcase condition3:<br>\t\t<br>\tdefault:<br>\t\t<br>\t}<br>}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532231,"discussion_content":"可能思考题没说清楚。这里说的“效果最好”，指的是这段代码的执行性能最好。\n\n提示一下：如果从统计概率而言，布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少，那么排列应该如何变化才能让这段代码执行性能最好呢？\n\nbtw，使用switch-case，说明你基础很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637560906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322652,"user_name":"My.life","can_delete":false,"product_type":"c1","uid":1587746,"ip_address":"","ucode":"8A6849BED73FC9","user_header":"https://static001.geekbang.org/account/avatar/00/18/3a/22/1f554137.jpg","comment_is_top":false,"comment_ctime":1637543915,"is_pvip":false,"replies":[{"id":"117153","content":"笔误，后续编辑会改一下。不影响后续的理解。感谢指出。","user_name":"作者回复","comment_id":322652,"uid":"1026224","ip_address":"","utype":1,"ctime":1637562382,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5932511211","product_id":100093501,"comment_content":"<br>func main() {<br>    a, b := true, false<br>    if a &amp;&amp; b != true {<br>        println(&quot;(a &amp;&amp; b) != true&quot;)<br>        return<br>    }<br>    println(&quot;a &amp;&amp; (b != true) == true&quot;)<br>}<br><br><br>为什么我输出的是(a &amp;&amp; b) != true","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532242,"discussion_content":"笔误，后续编辑会改一下。不影响后续的理解。感谢指出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637562382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359772,"user_name":"温雅小公子","can_delete":false,"product_type":"c1","uid":2260390,"ip_address":"河北","ucode":"9EA63E36D7C85C","user_header":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","comment_is_top":false,"comment_ctime":1665850858,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1665850858","product_id":100093501,"comment_content":"在“代码之丑”专栏里也看到快乐路径的写法了，使用起来真的很快乐。","like_count":0},{"had_liked":false,"id":359430,"user_name":"城铠唐","can_delete":false,"product_type":"c1","uid":1267363,"ip_address":"辽宁","ucode":"1D7BFC505F9716","user_header":"https://static001.geekbang.org/account/avatar/00/13/56/a3/0030ca96.jpg","comment_is_top":false,"comment_ctime":1665538772,"is_pvip":true,"replies":[{"id":"130724","content":"不妨细说一下 怎么使用map解耦？","user_name":"作者回复","comment_id":359430,"uid":"1026224","ip_address":"辽宁","utype":1,"ctime":1665547396,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1665538772","product_id":100093501,"comment_content":"可以使用 map 数据类型，进行解耦","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590131,"discussion_content":"不妨细说一下 怎么使用map解耦？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665547397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356501,"user_name":"🐎","can_delete":false,"product_type":"c1","uid":1054094,"ip_address":"北京","ucode":"DD325A4DD40153","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/8e/8fc00a53.jpg","comment_is_top":false,"comment_ctime":1662368905,"is_pvip":false,"replies":[{"id":"129809","content":"👍","user_name":"作者回复","comment_id":356501,"uid":"1026224","ip_address":"北京","utype":1,"ctime":1662461555,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1662368905","product_id":100093501,"comment_content":"这个其他语言里一般叫做 early return（尽早返回）😁","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586724,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662461555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1054094,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/8e/8fc00a53.jpg","nickname":"🐎","note":"","ucode":"DD325A4DD40153","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586731,"discussion_content":"白老师好活跃👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662466216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586724,"ip_address":"山东"},"score":586731,"extra":""}]}]},{"had_liked":false,"id":351885,"user_name":"徐曙辉","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/0c15c18a.jpg","comment_is_top":false,"comment_ctime":1658278603,"is_pvip":true,"replies":[{"id":"128100","content":"&quot;快乐路径&quot;原则本身就是为了优化掉else，减小代码复杂度的。","user_name":"作者回复","comment_id":351885,"uid":"1026224","ip_address":"","utype":1,"ctime":1658402220,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1658278603","product_id":100093501,"comment_content":"优化else方法能否举例说明?","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580917,"discussion_content":"&#34;快乐路径&#34;原则本身就是为了优化掉else，减小代码复杂度的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658402220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348204,"user_name":"Tristana","can_delete":false,"product_type":"c1","uid":1006227,"ip_address":"","ucode":"FC47CF6A5868D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/93/e081b4de.jpg","comment_is_top":false,"comment_ctime":1654844904,"is_pvip":true,"replies":[{"id":"126866","content":"✅","user_name":"作者回复","comment_id":348204,"uid":"1026224","ip_address":"","utype":1,"ctime":1654853648,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1654844904","product_id":100093501,"comment_content":"假设每个表达式被命中概率为 boolean_expression1 &gt; boolean_expression2 &gt; boolean_expression3 , 可以将程序逻辑调整为命中率高的表达式放在最前面，命中后直接返回，调整后的逻辑如下<br><br>```<br>func foo() {<br>    if boolean_expression1 {<br>        return 结果1<br>    } <br><br>    if boolean_expression2 {<br>       return 结果2<br>    } <br><br>    if boolean_expression3 {<br>        return 结果3<br>    } <br><br><br>    return 结果5<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575470,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654853648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343059,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650613682,"is_pvip":true,"replies":[{"id":"125347","content":"👍","user_name":"作者回复","comment_id":343059,"uid":"1026224","ip_address":"","utype":1,"ctime":1650751795,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1650613682","product_id":100093501,"comment_content":"依据被命中的概率，依次由高到低，把命中概率最高的放在最前面。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566729,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650751795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338161,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1647329847,"is_pvip":true,"replies":[{"id":"123631","content":"👍","user_name":"作者回复","comment_id":338161,"uid":"1026224","ip_address":"","utype":1,"ctime":1647396746,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1647329847","product_id":100093501,"comment_content":"文章评论读完～","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556470,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647396746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322944,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637667412,"is_pvip":false,"replies":[{"id":"117554","content":"是这样的。","user_name":"作者回复","comment_id":322944,"uid":"1026224","ip_address":"","utype":1,"ctime":1638256203,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":2,"score":"1637667412","product_id":100093501,"comment_content":"我在觉得记运算符优先级没有必要，按照自己的需求去括号括起来，大家的理解都不会有误差","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534676,"discussion_content":"是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638256203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322854,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1637633624,"is_pvip":false,"replies":[{"id":"117553","content":"你理解的对。","user_name":"作者回复","comment_id":322854,"uid":"1026224","ip_address":"","utype":1,"ctime":1638256165,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1637633624","product_id":100093501,"comment_content":"“如果从统计概率而言，布尔表达式3在这段代码中实际被命中的机会更多，布尔表达式2次之，布尔表达式1最少”这句话中从统计概率而言？应该说假如从实际执行情况中发现布尔表达式 3 被执行的更多？或者通过分析，发现条件 3 在更多的场景下容易满足？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534675,"discussion_content":"你理解的对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638256165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}