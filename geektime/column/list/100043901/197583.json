{"id":197583,"title":"13 | 程序设计原则：把计算过程交给计算机","content":"<p>你好，我是胡光，欢迎回来。</p><p>上一节中，咱们说了数学思维对于编程的重要性，并且跟你介绍了一种最重要的程序设计思维：数学归纳法。这个思维，不仅可以帮助我们设计程序，而且还可以帮助我们理解及证明程序的正确性。</p><p>不过说了这些数学对编程的重要性，可能你还觉得不过瘾，感觉只是停留在理论层面，还是有一层窗户纸没有捅破。今天呢，我就给你带来一道具体的编程问题，从这个具体的问题中，让你过把瘾。</p><h2>一道简单的数学题</h2><p>首先，我们先看一道很简单的数学问题，求出 1000 以内所有 3 或 5 倍数的数字的和。什么意思呢？我们先缩小范围，就是求10 以内，所有 3 或 5 的倍数。我们很快就能找到，这里有 3、5、6、9 ，它们相加之和是 23。注意，这里说的是 10 以内，所以不包括 10。</p><p>回到1000以内这个原问题，这个问题其实很简单，可能你现在就想马上撸起袖子开始写代码了。可别急，听我给你分析分析怎么做，才算是又好又快地用程序，解决这个实际的数学问题。</p><h4>1.把计算过程，交给计算机</h4><p>一个简单的疑问，我们为什么要写程序，让计算机帮我们算这个问题呢？那是因为，计算机的计算速度，比我们人类要快上几百几千倍不止，出错率也比我们要低得多。我们写程序的一个目的，就是减少我们人类在解决问题中的<strong>具体计算过程</strong>，那什么叫做具体计算过程呢？</p><!-- [[[read_end]]] --><p>例如，当你写一行代码“ 3 + 5 ”的时候，这是把计算过程交给了计算机，而如果你直接在程序中写上了 8 这个结果的时候，相当于你自己做了这个计算过程。因此，所谓减少我们的具体计算过程，就是能在程序中写 3 + 5，就写 3 + 5，不要写 8。</p><p>这就是我要强调的，要把计算过程交给计算机来做，而不是我们自己来做，毕竟计算机是很擅长做这种事情的，你没必要替它省这个事儿。在这样的指导思想下，我们先来看下面这段程序：</p><pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int sum = 0;\n    for (int i = 1; i &lt; 1000; i++) {\n        sum += i * (i % 3 == 0 || i % 5 == 0);  \n    }\n    printf(&quot;%d\\n&quot;, sum);\n    return 0;\n}\n</code></pre><p>这段程序中，循环遍历1000以内的所有整数，然后把 3 或 5 的倍数累加到变量 sum 中，最后输出 sum 变量的值，就是 1000 以内，所有 3 或 5 的倍数和。</p><p>其中有一个编程技巧，就是利用条件表达式 (i % 3 == 0 || i % 5 == 0) 与数字 i 相乘，条件表达式等于 1 的时候，说明 i 是 3 或 5 的倍数，sum 累加的值就是 i * 1 就是 i 的值；而当条件表达式不成立的时候，sum 累加的值就是 0。<strong>掌握这个编程技巧，关键是理解条件表达式的值。</strong></p><p>看完了程序的基本逻辑以后，我们来想想，在上述的程序中，有哪个数字，是我们人为计算得到，然后再写到程序中的？你会发现，根本没有。也就是说，我们将所有的计算过程，都交给了计算机，让它来帮我们完成。而我们做的，仅仅是描述这个计算过程，所以这份程序是一份合格的程序。</p><h4>2. 数学思维：提升计算效率</h4><p>为什么评价上面的程序，只是一份合格的程序呢？我们想象这么个场景，你是一个老板，手底下有一个工人，你的目的要让工人抬来一桶水。你可能有两种吩咐工人做事的方法：第一种，让工人拿个水瓢，去到 3 里以外，一瓢一瓢的打水，他来来回回跑好几趟，才能打满一桶水。第二种方式，就是你让工人去库房里面拿个水桶，然后再到 3 里以外去打一桶水回来，这样工人只需要跑一趟就能完成任务。</p><p>在这两个方法中，第一种工人打满一桶水的效率，明显要差于第二种，而造成这样的结果，是因为你作为老板，教给工人的方法不同，导致效率上的差别。</p><p>而在编程中呢，计算机其实就像示例中的工人，你教给它什么方法，它就执行什么方法，任务完成的效率，和计算机没关系，而是和你完成程序，所教给计算机的方法有关系。这个方法呢，就是我们前文中所说的“算法”。</p><p>再回到之前那个要求出 1000 以内所有 3 或 5 倍数的数字和的程序，程序虽然完成了任务，可是完成的效率不够高效。</p><p>下面我们就把数学类的算法思维，加进程序中，看看效果吧。记住，加入数学思维的同时，也要保证，将计算过程留给计算机。首先来看如下程序：</p><pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int sum3 = (3 + 999 / 3 * 3) * (999 / 3) / 2;\n    int sum5 = (5 + 999 / 5 * 5) * (999 / 5) / 2;\n    int sum15 = (15 + 999 / 15 * 15) * (999 / 15) / 2;\n    printf(&quot;%d\\n&quot;, sum3 + sum5 - sum15);\n    return 0;\n}\n</code></pre><p>上面程序中，有三个整型变量分别代表 1000 以内所有 3 的倍数的和 sum3，所有 5 的倍数的和 sum5，和所有 15 倍数的和 sum15。最后呢，用 sum3 + sum5 - sum15 的值，代表了 3 或 5 的倍数的和。你对这个结果可能有点反应不过来，听我继续给你解释。</p><p>假设，我们现在手上有两个集合，第一个集合中装的是所有 3 的倍数，第二个集合中装的是所有 5 的倍数，想想两个集合的交集是什么？是不是就是所有 15 的倍数。那么当我们用第一个集合的所有元素和，加上第二个集合中的所有元素和的时候，两个集合交集中的元素，被重复加了一次。所以，最后再减去两个集合交集中的元素和即可。如上所述的程序思路，你可以参考如下示意图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/11/4f/11df28dd9816e329c693e370e5596e4f.jpg?wh=2089*1133\" alt=\"\" title=\"图1:问题的集合表示\"></p><p>看完了程序思路以后，我们来具体看一下其中的代码，就拿 sum3 的计算过程来举例，其实使用的就是“等差数列求和公式”，如果你忘了等差数列求和公式，请看下图：<br>\n<img src=\"https://static001.geekbang.org/resource/image/2a/96/2adc14943c92dc45db6cd7a4273f3096.jpg?wh=2229*1159\" alt=\"\" title=\"图2： 等差数列求和公式\"></p><p>我们再来回顾一下程序，在编写这个程序的过程中，其中有哪些数字是我们计算得到的么？你会发现没有一个是我们直接计算得到的，哪怕是5 的倍数995这个数字，也是我们通过一段代码算得到的。</p><p>而对于这段代码呢，咱们可以详细解释一下，首先用 1000 以内最后一个数字 999 除以 5，会得到在1000 以内 5 的倍数有多少个。为什么会得到这个结果呢？这个就要说说 C 语言中的整型间的除法问题了。</p><p>在 C 语言中，两个整型数字相除，结果会做<strong>向零取整</strong>，什么是 向零取整呢？解释这个概念之前，先要介绍一下<strong>向下取整</strong>的概念，所谓向下取整，就是取小于等于当前数字的第一个整数。</p><p>例如，4.9 向下取整，就是 4，因为小于等于 4.9 的第一个整数就是 4。那么 -1.5 向下取整等于多少呢？这里需要注意，结果是 -2，不是 -1，因为小于等于 -1.5 的第一个整数是 -2，而 -1 比 -1.5 要大。</p><p>当你明白了什么是向下取整以后，就很好理解向零取整了，那就是取当前数字和 0 之间，与前数字距离最近的整数。对于正数来说，向零取整的结果和向下取整的结果相同，而对于负数来说结果恰好相反。</p><p>咱们还是拿 -1.5 举例，向下取整是 -2，可是向零取整就不同了，向零取整是在当前数字与 0 之间，取一个距离当前数字最近的整数，取到的就是 -1。<br>\n<img src=\"https://static001.geekbang.org/resource/image/2d/5d/2d0ed3409b33a106e38b10e2827a405d.jpg?wh=2314*1080\" alt=\"\" title=\"图3： 向下取整与向零取整\"></p><p>理解了 C 语言中的整数除法规则以后，我们再回到题目中看一下，题目中用 999 / 5 得到的就是 1000 以内有多少个 5 的倍数的数字，然后再用这个数字乘以 5 就得到了 1000 以内，最后一个 5 的倍数的数字。</p><p>这时候你可能又问了，为什么要这么麻烦呢？何不直接写一个 995 呢？你算得没错，995 确实是 1000 以内最后一个 5 的倍数。可你别忘了，今天我想教给你的是“把计算过程，交给计算机”，也就意味着计算5的倍数，可能还轻松一点儿，那要是计算 7 的倍数呢？13 的倍数呢？9973 的倍数呢？你会发现，还是计算机比你更适合做具体的计算。所以记住：将计算过程，留给计算机。</p><h2>一起动手，搞事情</h2><p>在做今天的思考题之前，我们先来弄清楚两个说法，“平方和”以及“和的平方”。</p><p>例如，10 以内自然数的平方和就是：</p><p>1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2 = <strong>385</strong></p><p>也就是 1 到 10 每个数字的平方相加之和。</p><p>而，10 以内自然数的和的平方就是：</p><p>(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) ^ 2 = <strong>3025</strong></p><p>也就是 1 到10 所有数字相加之和，然后再取平方的值。</p><h4>思考题：和的平方减平方和</h4><p>今天我们的思考题呢，分成两个子问题：</p><blockquote>\n<p>1.请编写一个程序，计算 100 以内自然数“和的平方”与“平方和”的差。<br>\n2.通过今天的学习，我们复习了等差数列求和公式，那你能否通过查阅资料，推导得到等差数列的平方和公式呢？</p>\n</blockquote><h2>课程小结</h2><p>好了，最后我们来做一下今天的课程小结吧。通过今天这个简单的小任务，我希望你记住如下三点：</p><ol>\n<li>具体的计算过程，计算机比你更擅长，所以请把具体的计算过程，留给计算机。</li>\n<li>编写程序，其实是在描述和规定计算过程，而描述的方式不同，效率也不同。</li>\n<li>不同的效率过程，就是我们所谓的不同的算法过程，记住：算法很重要。</li>\n</ol><p>关于“算法很重要”这句话，你可能有点儿听腻了，可我还是要强调一遍：所谓算法，叫得上来名字的算法是算法，还有很多叫不上来的名字，其实也是算法。两者放在一起，统一被描述成为“算法思维”。你想掌握一个有名字的算法很容易，可要掌握“算法思维”可就没那么容易了，这是需要很长一段时间的锻炼、总结和积累。</p><p>好了，今天就到这里了，不积跬步，无以至千里，希望你在看完本节课后，自己也多加练习体会。我是胡光，我们下期见。</p>","comments":[{"had_liked":false,"id":179319,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1581961288,"is_pvip":false,"replies":[{"id":"69701","content":"d(^_^o)，成长是一个过程，找到自己的节奏，不懈怠，不匆忙。坚持，加油！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1582019042,"ip_address":"","comment_id":179319,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5876928584","product_id":100043901,"comment_content":"#include&lt;stdio.h&gt;<br>int main(){<br>\tint i;<br>\tprintf(&quot;Please input a number\\n&quot;);<br>\tscanf(&quot;%d&quot;,&amp;i);<br>\tint squareofsum = (i*(i+1)&#47;2)*(i*(i+1)&#47;2);<br>\tint sumofsquare = (1 + i) * (1 + i) * i &#47; 4 + i * (i * i - 1) &#47; 12;<br>\tint result = squareofsum - sumofsquare;<br>\tprintf(&quot;the result of the difference between sumofsquare and squareofsum is %d&quot;,result);<br>}<br>本科学数学的，保到了计算机读研，公式推导什么的都还行，发现代码能力和计算机底层的一些知识都很弱，对照了其他同学的答案，发现最近没有把计算封装成一个函数，也没有考虑差不为1的情况，写出来的东西很难复用，好想开学之前快点提高自己的代码能力啊","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484201,"discussion_content":"d(^_^o)，成长是一个过程，找到自己的节奏，不懈怠，不匆忙。坚持，加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582019042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042208,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","nickname":"潮汐","note":"","ucode":"F5E4F6DF9CEA9E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201773,"discussion_content":"你的sumofsquare公式是不是有点问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583836338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178912,"user_name":"不便明言","can_delete":false,"product_type":"c1","uid":1800640,"ip_address":"","ucode":"745571262B75B0","user_header":"https://static001.geekbang.org/account/avatar/00/1b/79/c0/4c35b6ab.jpg","comment_is_top":false,"comment_ctime":1581853577,"is_pvip":false,"replies":[{"id":"70097","content":"完全正确","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1582372080,"ip_address":"","comment_id":178912,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5876820873","product_id":100043901,"comment_content":"#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int n, Sum_squares, squares_Sum, balance;<br>\tprintf(&quot;请输入一个序列最大的数字:\\n&quot;);<br>\tscanf(&quot;%d&quot;, &amp;n);<br>\tn -= 1;<br>\tSum_squares =(n* (n + 1) &#47; 2)* (n * (n + 1) &#47; 2);<br>\tsquares_Sum = n * (n + 1) * (2 * n + 1) &#47; 6;<br>\tbalance = Sum_squares - squares_Sum;<br>\tprintf(&quot;%d以内和的平方是%d,平方和是%d,差为%d\\n&quot;, n+1, Sum_squares, squares_Sum, balance);<br>\tsystem(&quot;pause&quot;);<br>\t}","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484016,"discussion_content":"完全正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582372080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277048,"discussion_content":"但是我在vscode上跑出来的答案好像不太对，跑出来是24174150\n但是答案应该是25164150","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590988511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277018,"discussion_content":"而且还有提示信息，非常简单易懂！点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590982644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277017,"discussion_content":"你的代码更加通用，点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590982540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178230,"user_name":"栾~龟虽寿！","can_delete":false,"product_type":"c1","uid":1504671,"ip_address":"","ucode":"219B38C08979FE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","comment_is_top":false,"comment_ctime":1581634845,"is_pvip":false,"replies":[{"id":"69147","content":"^_^","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581647342,"ip_address":"","comment_id":178230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876602141","product_id":100043901,"comment_content":"老师说的，递归不能算，一种算法，领教了，这次课，提现了，算法的基础是数学，我说一句，算法和数学都是前人的智慧结晶。","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483715,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581647342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228521,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1592725023,"is_pvip":true,"replies":[{"id":"86277","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1594400254,"ip_address":"","comment_id":228521,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1592725023","product_id":100043901,"comment_content":"茶艺师学编程<br><br>&#47;*编写程序，计算 100 以内自然数“和的平方”与“平方和”的差<br>以及等差数列的平方和公式 *&#47;<br>#include &lt;stdio.h&gt;<br>int main(){<br>    int sum2 = 0;<br>    int sum1 = (((1 + 99) * 99) &#47; 2) * (((1 + 99) * 99) &#47; 2);&#47;&#47;和的平方<br>    for(int i = 0; i &lt; 100; i++){&#47;&#47;平方和<br>        sum2 += i * i;<br>    }<br>    printf(&quot;%d\\n&quot;, sum1 - sum2);<br>    int a1, d, n;<br>    scanf(&quot;%d %d %d&quot;, &amp;a1, &amp;d, &amp;n);<br>    int sum3 = n*a1*a1+n*d*(n-1)+n*(n-1)*(2*n-1)*d*d&#47;6;&#47;&#47;等差数列的平方和公式<br>    printf(&quot;使用循环方法计算的平方和：%d\\n使用平方和公式算出的结果：%d&quot;, sum2, sum3);<br>    return 0;<br>}<br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499062,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594400254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223013,"user_name":"信念","can_delete":false,"product_type":"c1","uid":1673076,"ip_address":"","ucode":"3D32CA6E096CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","comment_is_top":false,"comment_ctime":1590981645,"is_pvip":false,"replies":[{"id":"83509","content":"代码中的 sum1计算，可以分成两步，会减少编码错误的概率。第一步 sum1 计算得到1--100的和值，第二步，计算 sum1的平方。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592207274,"ip_address":"","comment_id":223013,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1590981645","product_id":100043901,"comment_content":"https:&#47;&#47;github.com&#47;spiritfaith&#47;Hello-Git&#47;blob&#47;master&#47;think_everyone13.c","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496988,"discussion_content":"代码中的 sum1计算，可以分成两步，会减少编码错误的概率。第一步 sum1 计算得到1--100的和值，第二步，计算 sum1的平方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592207274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673076,"avatar":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","nickname":"信念","note":"","ucode":"3D32CA6E096CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283186,"discussion_content":"好的，老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592207745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222999,"user_name":"信念","can_delete":false,"product_type":"c1","uid":1673076,"ip_address":"","ucode":"3D32CA6E096CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/87/74/68c35700.jpg","comment_is_top":false,"comment_ctime":1590978848,"is_pvip":false,"replies":[{"id":"83510","content":"不是的~~你再好好想想，这是等差数列的项数。等比数列的增长吓死人的：3 9 27 81 ....","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592207346,"ip_address":"","comment_id":222999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590978848","product_id":100043901,"comment_content":"int sum3 = (3 + 999 &#47; 3 * 3) * (999 &#47; 3) &#47; 2;<br>999 &#47; 3 * 3<br>这个用的应该是等比数列的通项公式求的第n项","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496985,"discussion_content":"不是的~~你再好好想想，这是等差数列的项数。等比数列的增长吓死人的：3 9 27 81 ....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592207346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220737,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1590316526,"is_pvip":false,"replies":[{"id":"83522","content":"非常不错，还做了相关的函数封装！赞！","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592213676,"ip_address":"","comment_id":220737,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590316526","product_id":100043901,"comment_content":"实现  <br><br>```c<br>#include&lt;stdio.h&gt;<br><br>int hepingfang(int n) {<br>    return (1 + n) * (1 + n) * n &#47; 4 + n * (n * n - 1) &#47; 12;<br>}<br><br>int pingfanghe(int n) {<br>    return (1 + n) * (1 + n) * n &#47; 4 + n * (n * n - 1) &#47; 12;<br>}<br><br>int main() {<br>    &#47;&#47;计算 100 以内自然数“和的平方”与“平方和”的差<br>    int n;<br>    scanf(&quot;%d&quot;,&amp;n);<br>    printf(&quot;%d - %d = %d\\n&quot;,hepingfang(n),pingfanghe(n),hepingfang(n)-pingfanghe(n));<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496225,"discussion_content":"非常不错，还做了相关的函数封装！赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592213676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218596,"user_name":"Noah●^●","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1589839856,"is_pvip":false,"replies":[{"id":"83535","content":"哈哈哈哈，你这种发现很不错，也挺新颖的。赞一个","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1592214650,"ip_address":"","comment_id":218596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589839856","product_id":100043901,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br><br>int n;<br>ll sum_pow, pow_sum = 1;<br><br>int main(void)<br>{<br>    scanf(&quot;%d&quot;, &amp;n);<br>    sum_pow = ((1 + n) * n &#47; 2) * ((1 + n) * n &#47; 2);<br>    &#47;&#47;发现之间是一个等差数列<br>    &#47;&#47;1+(1+3)+(1+3+5)+....+(1+3+5+.....an)<br><br>    int start = 1;<br>    int d = 2;<br>    int x = 1;<br>    int cur = start;<br>    for (int i = 2; i &lt;= n; i++) &#47;&#47; x 1+x+2 1+x+2+(x+2+2) 1+x+2+(1+2+2)+(1+2+2+2)<br>    {<br>        x += d;<br>        cur += x;<br>        pow_sum += cur;<br>    }<br>    printf(&quot;%lld\\n&quot;, sum_pow - pow_sum);<br>    return 0;<br>}<br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495520,"discussion_content":"哈哈哈哈，你这种发现很不错，也挺新颖的。赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592214650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204680,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1586441413,"is_pvip":false,"replies":[{"id":"76581","content":"为啥要转成二进制算啊？没看懂你的意思，整形变量里面存储的值，就是二进制啊，你在程序中计算的时候，本质上就是二进制在计算啊。只有你在用%d输出的时候，计算机才会用十进制给你展示出来。记住，进制不影响计算结果。进制也不重要。重要的是相关数字代表的数字量。2个翻一倍，就是4个，在任何进制下，都是4个，只是表示形式不同。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1586497490,"ip_address":"","comment_id":204680,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1586441413","product_id":100043901,"comment_content":"计算机的计算都是天然的能力，1、把1-100都转换二进制然后按位与运算，之后把这个数平方再转回十进制；2、把1-100转换二进制再把每个转换后的二进制平方，得到结果再按位与运算，算完再转回十进制，这不也是平方和吗？不知道计算机这样操作数不算用递归替换数学公式计算呢？是不是把过程按计算机自己的语言操作会变的更简单呢？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491248,"discussion_content":"为啥要转成二进制算啊？没看懂你的意思，整形变量里面存储的值，就是二进制啊，你在程序中计算的时候，本质上就是二进制在计算啊。只有你在用%d输出的时候，计算机才会用十进制给你展示出来。记住，进制不影响计算结果。进制也不重要。重要的是相关数字代表的数字量。2个翻一倍，就是4个，在任何进制下，都是4个，只是表示形式不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586497490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485365,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","nickname":"1043","note":"","ucode":"AAA69CC175AEE3","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227565,"discussion_content":"哈哈，是啊，计算机本质就是用二进制逻辑运算，我怎么把自己搞糊涂了，😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586501521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186403,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1583836715,"is_pvip":false,"replies":[{"id":"72094","content":"可以参考后面习题答疑文章中，我给出的通项公式的推导过程，推导公差为 d 时候的情况。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583936160,"ip_address":"","comment_id":186403,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1583836715","product_id":100043901,"comment_content":"    int n;<br>    scanf(&quot;%d&quot;, &amp;n);<br>    int sumOfSquares = n*(2*n+1)*(n+1)&#47;6;<br>    int squareOfSum = ((1+n)*n&#47;2) * ((1+n)*n&#47;2);<br>    int res = squareOfSum - sumOfSquares;<br>    printf(&quot;和平方：%d - 平方和：%d = %d\\n&quot;, squareOfSum, sumOfSquares, res);<br><br>这里想问等差数列如果差不等于1，平方和的公式又是什么呢？<br>网上查的一个说法是：na1²+n(n-1)d+n(n-1)(2n-1)d²，但这个公式套1就不成立！","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486742,"discussion_content":"可以参考后面习题答疑文章中，我给出的通项公式的推导过程，推导公差为 d 时候的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583936160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178335,"user_name":"Jinlee","can_delete":false,"product_type":"c1","uid":1644723,"ip_address":"","ucode":"8EDA9B0C5184EA","user_header":"https://static001.geekbang.org/account/avatar/00/19/18/b3/848ffa10.jpg","comment_is_top":false,"comment_ctime":1581663431,"is_pvip":false,"replies":[{"id":"69203","content":"d(^_^o)","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1581687675,"ip_address":"","comment_id":178335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581663431","product_id":100043901,"comment_content":"&#47;* 已知：①等差数列前n项和Sn = (a1+an)*n&#47;2<br>等差数列前n项平方和Tn = (a1+an)**2*n&#47;4+nd**2(n**2-1)&#47;12 <br>*&#47;<br>#include &lt;stdio.h&gt;<br><br>int sum(int n, int d, int a1, int an){<br>int sum1, sum2;<br>sum1 = (a1 + an) * n &#47; 2;<br>sum2 = (a1 + an) * (a1 + an) * n &#47; 4 + n * (n * n - 1) &#47; 12;<br>printf(&quot;100以内自然数“和的平方”与“平方和”的差:%d&quot;, sum1 * sum1 - sum2);<br>return;<br>}<br><br>int main(){<br>sum(99, 1, 1, 99);<br>return 0;<br>}<br><br>任意公差的等差数列前n项平方和的公式推导还挺麻烦的，直接抄了过来@__@","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483761,"discussion_content":"d(^_^o)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581687675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}