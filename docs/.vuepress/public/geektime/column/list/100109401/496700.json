{"id":496700,"title":"08｜TDD中的驱动（1）：驱动的极限是什么？","content":"<p>你好，我是徐昊。从今天开始，我们来讨论一下测试驱动开发中的驱动是什么意思。</p><p>在上节课，我们讨论了测试驱动中测试的性质。它们不是“单元测试”，而是不同粒度的功能测试。或者如我建议的那样，你可以叫它们“单元级别功能测试”。</p><p>那么这些单元级别功能测试将会如何驱动我们的开发呢？今天我们就来讨论一下这个问题。</p><h2>如果当初我们那么做了</h2><p><a href=\"https://time.geekbang.org/column/article/496699\">上节课</a>我们讲到，TDD中测试针对的粒度是独立的功能上下文或变化点。测试验证功能上下文或变化点符合功能需求。</p><p>对于相同的功能，如果我们划分的功能上下文不同，会有什么结果呢？回看之前的TDD演示，在<a href=\"https://time.geekbang.org/column/article/494207\">第一讲</a>中，我们讨论了三种实现方式：</p><ol>\n<li>从给定的参数列表中寻找对应选项，并根据选项类型读取参数；</li>\n<li>将参数列表按照选项，分割成由选项名称和参数组成的数组；</li>\n<li>将参数列表按照选项，分解成由选项名称和参数组成的映射。</li>\n</ol><p>这三种选择实际上就划分了不同的<strong>功能上下文</strong>。当时出于实现方式复杂度的考虑，我选择了第一种实现方式。即，从功能上下文的角度考虑，也就是从API视角出发，将全部功能当作一个上下文。那么如果我们当时选择了其他的实现方式，会如何呢？请看接下来的视频演示。</p><p><video poster=\"https://media001.geekbang.org/f807a6f207324c28907c7b0474ae8075/snapshots/7b5b659f1c0345458d3928426d16225c-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/1f163e47-17fba7f8bd5-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/60cf3888ce794c338ad57ce07afe5823/be65755fe7f24ba6809f60c9484facea-f01ea31cae424dcd363a9d6a44cf1b99-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>好，到此为止，通过红/绿循环，我们实现了参数分割的功能。剩下的部分，其实与我们之前展示的相差不多。我稍微演示一两个测试，其他的你可以自行操作。</p><!-- [[[read_end]]] --><p><video poster=\"https://media001.geekbang.org/da25ec3bd13b4446b80af8995af08e44/snapshots/2a0f5ccbb234408e88bb95b33eb868e4-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/167bb9c3-17fba7f8921-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/96b36b1a4dce495f8cae7cb1470ca41d/5a8b09d791c14d25a37802e66112ad4a-a1bfb084fbe5df8fd524dad2420247cb-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>可以发现，对比第一次我们做的实现，不同的<strong>实现策略</strong>，隐含着不同的<strong>功能上下文</strong>划分。针对不同的功能上下文，我们编写对应的单元级别功能测试来验证其功能。在这些单元级别功能测试的指引下，我们逐步完成了软件的功能。也就是说，功能上下文的划分，指引我们编写测试；在测试的驱动下，我们逐步完成功能上下文的实现。</p><p>从这里，我们似乎可以窥探到测试驱动开发的核心要点：单元级别功能测试能够驱动其对应单元（功能上下文或变化点）的<strong>外在功能需求</strong>。而对于<strong>对应单元之内功能</strong>的实现，测试就没有办法了。</p><p>以上面演示的视频为例，我们需要将参数列表进行分解。但参数列表的分解是Args.parse内部实现的方式。当我们从功能测试的角度测试Args.parse时，是无法得知Args.parse是如何处理参数列表的。所以，无论是这节课的实现方式，还是<a href=\"https://time.geekbang.org/column/article/494207\">第一讲</a>里的实现方式。从Args.parse这个<strong>功能上下文来看</strong>，测试是<strong>极端类似</strong>的。</p><p>如果我们要驱动单元内的功能实现，该怎么办呢？那么就需要将这个单元对应的功能上下文，分解为更小的上下文，并将功能需求在这个上下文中加以分解。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/de/fc/de596yycd58a77a8a005773aef84c2fc.jpg?wh=5614x2707\" alt=\"\"></p><p>比如上面演示的视频中，Args.parse是一个大的功能上下文。按照我们的实现思路，我们将它分解成了一个小的功能上下文：将参数列表分解为映射。那么我们可以将参数列表分解放入另外一个单元（Args.toMap)，对它进行测试，从而驱动它的实现。</p><p>也就是说，单元级别功能测试<strong>无法驱动</strong>小于其测试单元的功能需求，也<strong>无法驱动</strong>单元内的实现方式，需要进一步拆分功能上下文才可以。而指引功能上下文拆分的方式有很多，比如有不同的实现思路、架构等。</p><h2>TDD的极限</h2><p>曾经有些人希望通过构造难以用测试驱动出实现的需求，来证明TDD不是一种有效的开发方法。对于这些人，我都懒得回应。</p><p>第一，是因为这样的需求一点儿都不难构造；第二，TDD并没有宣称它是所有开发问题的答案，所以找到一个反例又能说明什么呢？第三，TDD的效用在于将研发过程工程化。</p><p>那么无法通过TDD有效实现需求，也只意味着这类问题不能有效工程化而已。排除一个错误答案，并不代表能找到正确的答案。</p><p>根据我们<a href=\"https://time.geekbang.org/column/article/496699\">上一节</a>的讨论，让TDD丧失驱动力最简单的办法，<strong>就是指明某个单元内的实现细节</strong>。比如，使用<strong>冒泡法</strong>对数组进行排序。因为从功能角度来说，冒泡法还是快排序，是没有差别的：</p><pre><code>@Test\npublic void should_sort_by_bubble_sort() {\n  assertArrayEquals(new int[] {1, 2, 3}, bubbleSort(3, 1, 2));\n}\n\n@Test\npublic void should_sort_by_bubble_sort() {\n  assertArrayEquals(new int[] {1, 2, 3}, quickSort(3, 1, 2));\n}\n</code></pre><p>如果我们需要在测试中体现不同排序算法的差异，以驱动不同的实现，那么就需要改用行为验证。请观看接下来的视频演示：</p><p><video poster=\"https://media001.geekbang.org/5eccfe77a2084038a2fb38e26a60c079/snapshots/064bfcb5b90d4ef08f29884589ac1e25-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/304f7ffa-17fba7f856c-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/2ad4c399cb2744e5aefec0792f180388/a93173d2fd3442689a71c5d3c7a0ab3f-2c94feeb50bdd99d31356de2d3c04503-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>至此，我们可以明白，<strong>测试驱动开发的主要关注点在于功能在单元（模块）间的分配，而对于模块内怎么实现，需要你有自己的想法</strong>。当然Kent Beck说得更直接：TDD可以提高效率，但不能避免愚蠢。</p><h2>如果真的不知道怎么实现</h2><p>如果真的不知道该怎么实现，要怎么办呢？那么TDD仍然可以帮你提高效率。就是这么神奇！</p><p>还是以ArgsTest为例，如果我就是不知道参数分解这一步到底要怎么实现，那么我能怎么办呢？</p><p><video poster=\"https://media001.geekbang.org/41d6d1b2372a49ac8f1b9cf37182d1da/snapshots/fb78a5d77d734907a66e09fe12c3acc6-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/407f791d-17fba7f81cf-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/2b7ca0c20b724909a2933cd77bed3cc7/a05df95218ce47e494f6e6c2758f5a3c-5ace9f81320901ff4454dcc53e3eb235-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>正如视频中演示的，就算你真的不知道某个关键的功能要如何实现，只要你能列出对于这个单元的期待，<strong>那么你仍然可以完成其余功能，然后再找人帮忙！</strong></p><p>只不过此时，你就算找人帮忙，对于这个模块的输入输出也已经了然于胸。当然，你还可以写一组测试，验证别人帮你写的代码是否真的可以完成你想要的功能。甚至你还可以带着测试代码到Stack Overflow上去求助，肯定会有意想不到的收获。</p><h2>小结</h2><p>这节课我们讨论了测试驱动开发到底驱动了什么：功能在单元（模块）间的分配。我们也讲了，测试驱动开发在什么地方会失去驱动力：单元（模块）内的实现方式。</p><p>那么很有意思的事就来了，从“驱动”的角度来说，TDD实际上并不是一种编码技术（Coding Technique），它无法帮助实现你不会写的代码，你必须要知道如何实现这些功能；但是一旦你明确了要实现的功能，并且知道要怎么实现，TDD可以帮助你更好地将功能放置到不同的单元。也就是说，<strong>TDD“驱动”的是架构，因而实际是一种架构技术</strong>。</p><p>是的，这正是我们讲的编码架构师（Coding Architect），也是真正的实干型而非PPT型架构师（当然你可以省略地讲，这是真正的架构师）。这也是为什么TDD也被看作Test Driven Design。当然，我觉得Test Driven Development其实描述得更全面。</p><h2>思考题</h2><p>请从架构的角度出发，思考红/绿/重构循环，分别发挥了什么作用？</p><p><strong>编辑来信</strong>：</p><blockquote>\n<p>TDD是一项技能，唯有动手实操、反复练习，才能有所小成。为了帮助你更快地进步，徐昊老师特发起了<strong>“TDD专栏首发·代码评点”</strong>活动。<br>\n<strong>　</strong><br>\n在第一个实战项目结束后，我们会根据你提交的<a href=\"https://jinshuju.net/f/TvdN15\">学习反馈</a>，手动选出其中几位进行代码评点与解疑答惑。而评点的详细内容我们也将制成加餐，展示在专栏里，供其他同学学习与参考。<br>\n<strong>　</strong><br>\n划重点！如果学完第1-10讲再写反馈，将会大大提高你入选的机会！另，此次收集时间截至4月3日零点。所以非常希望你能跟上我们的更新进度，多动手实操，并记录学习体会。<br>\n<strong>　</strong><br>\n最后，希望我们都能好好学习，更上层楼！</p>\n</blockquote>","neighbors":{"left":{"article_title":"07｜TDD中的测试（3）：集成测试还是单元测试？","id":496699},"right":{"article_title":"09｜TDD中的驱动（2）：重构发挥了什么作用？","id":496701}},"comments":[{"had_liked":false,"id":339960,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1648514057,"is_pvip":false,"replies":[{"id":"124323","content":"答案就是实现不了","user_name":"作者回复","user_name_real":"编辑","uid":"2537798","ctime":1648537555,"ip_address":"","comment_id":339960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78957925385","product_id":100109401,"comment_content":"最长碰到的挑战就是问：TDD如何驱动某个算法的实现。这篇文章给了很好的答案。","like_count":18,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558974,"discussion_content":"答案就是实现不了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648537555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341551,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1649687929,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27419491705","product_id":100109401,"comment_content":"红：搭建一个框架；<br>绿：实现了框架；<br>重构：改进了框架。<br>是一个从无到有，从有到完善的架构演进过程。","like_count":6},{"had_liked":false,"id":340065,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1648564031,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14533465919","product_id":100109401,"comment_content":"原来以为可以学好了 TDD 在 LeetCode 上大杀四方，看来我想多了！<br>多谢老师告知 TDD 不能做什么","like_count":3,"discussions":[{"author":{"id":1111175,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","nickname":"俊伟","note":"","ucode":"7905B4F25637F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565389,"discussion_content":"leetcode上简单的算法其实不用TDD，但是复杂一点的可以拆分不同功能单元的算法是可以的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1650458428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","nickname":"张铁林","note":"","ucode":"4AB8BC6CDAC0A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560970,"discussion_content":"能不能大杀四方，首先要去杀呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649504711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1108258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","nickname":"张铁林","note":"","ucode":"4AB8BC6CDAC0A3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561171,"discussion_content":"被反杀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649568448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":560970,"ip_address":""},"score":561171,"extra":""}]}]},{"had_liked":false,"id":341265,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1649489766,"is_pvip":false,"replies":[{"id":"124743","content":"设计可以模糊 需求不行 需求必须清楚","user_name":"作者回复","user_name_real":"编辑","uid":"2537798","ctime":1649495907,"ip_address":"","comment_id":341265,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10239424358","product_id":100109401,"comment_content":"請問老師，我體會到的一個現實情況是實現跟設計常常是同時進行的。也就是說大多情況拿到一個需求，開始只有一個模糊的設計。對於功能模塊的劃分，各模塊對外接口具體參數等，是在實現的時候逐步明確清晰的。如果ㄧ上來對邊界就十分明確，自然很容易ㄧ個個寫成測試，再一個個實現pass就行了。但這種情況很少。您怎麼看？","like_count":2,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560945,"discussion_content":"设计可以模糊 需求不行 需求必须清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649495908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340093,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1648601787,"is_pvip":false,"replies":[{"id":"124368","content":"但是可以知道自己到底是哪不会","user_name":"作者回复","user_name_real":"编辑","uid":"2537798","ctime":1648606044,"ip_address":"","comment_id":340093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10238536379","product_id":100109401,"comment_content":"TDD 不能做什么？<br><br>- 不能窥探方法内是如何实现的，例如对于一个排序算法，只能验证结果是否符合预期，不能验证使用了哪种算法（冒泡、插入等）<br>- 不能求解自己不会的问题，例如：<br>  - 自己没有思路的算法题<br>  - 破解世界七大数学难题获得高额奖金","like_count":2,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559086,"discussion_content":"但是可以知道自己到底是哪不会","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648606044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340122,"user_name":"枫中的刀剑","can_delete":false,"product_type":"c1","uid":1322387,"ip_address":"","ucode":"4B086F538184AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/93/0f1cbf44.jpg","comment_is_top":false,"comment_ctime":1648612470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943579766","product_id":100109401,"comment_content":"红：以代码的形式呈现功能最终的样子，以终为始的思想，通过测试迫使自己去思考功能的上下文。<br>绿：将想法变为现实。通过红的步骤我们可以只专注在一个小的上下文上来思考如何实现，降低认知负担。<br>重构： 对功能和结构再次调整，消除不合理的地方，朝更好的设计前进。","like_count":1},{"had_liked":false,"id":356488,"user_name":"Kea","can_delete":false,"product_type":"c1","uid":2445002,"ip_address":"广东","ucode":"B417CE8139E385","user_header":"https://static001.geekbang.org/account/avatar/00/25/4e/ca/fdc5eb78.jpg","comment_is_top":false,"comment_ctime":1662362170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662362170","product_id":100109401,"comment_content":"道生一 一生二 二生三 三生万物 tdd 可以帮助你高效且工程化地由一生二 二生三 三生万物 但是不能帮你如何实现道 本质你还得知道道是什么 而且 tdd 本身也是一种道","like_count":0},{"had_liked":false,"id":349930,"user_name":"Geek_a03aa5","can_delete":false,"product_type":"c1","uid":2831425,"ip_address":"","ucode":"700D44BF7AC3D2","user_header":"","comment_is_top":false,"comment_ctime":1656460369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656460369","product_id":100109401,"comment_content":"红：这个需求很简单，怎么实现我不管<br>绿：不要跟老夫说设计模式、面向对象，jQuery 一把梭.jpg<br>重构：改掉上面产生的坏味道<br><br>在每个阶段只需要达成一个小目标，个人感觉是用来降低开发过程中的认知负担的好办法。<br>","like_count":0},{"had_liked":false,"id":344485,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1651582132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651582132","product_id":100109401,"comment_content":"如此看TDD驅動的實現方向是按測試金字塔從頂到底？從端到端到UT？","like_count":0},{"had_liked":false,"id":344230,"user_name":"keep_curiosity","can_delete":false,"product_type":"c1","uid":1246273,"ip_address":"","ucode":"794DC1D3FB9214","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/41/082e2706.jpg","comment_is_top":false,"comment_ctime":1651382595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651382595","product_id":100109401,"comment_content":"# TDD 打卡＃学习打卡","like_count":0},{"had_liked":false,"id":340111,"user_name":"Frode","can_delete":false,"product_type":"c1","uid":1503064,"ip_address":"","ucode":"B7B8DBF9980EA1","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/58/d05ec302.jpg","comment_is_top":false,"comment_ctime":1648607589,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648607589","product_id":100109401,"comment_content":"1. TDD“驱动”的是架构，因而实际是一种架构技术。<br>2. 测试驱动开发到底驱动了什么：功能在单元（模块）间的分配。我们也讲了，测试驱动开发在什么地方会失去驱动力：单元（模块）内的实现方式<br>3. 如果我们要驱动单元内的功能实现，该怎么办呢？那么就需要将这个单元对应的功能上下文，分解为更小的上下文，并将功能需求在这个上下文中加以分解。<br>4. 如果真的不知道怎么实现？拆分功能，可以先mock出来，然后实现可以实现的，再想办法解决，例如请教他人","like_count":0}]}