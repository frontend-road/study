{"id":473414,"title":"29｜接口：为什么nil接口不等于nil？","content":"<p>你好，我是Tony Bai。</p><p>上一讲我们学习了Go接口的基础知识与设计惯例，知道Go接口是构建Go应用骨架的重要元素。从语言设计角度来看，Go语言的接口（interface）和并发（concurrency）原语是我最喜欢的两类Go语言语法元素。Go语言核心团队的技术负责人Russ Cox也曾说过这样一句话：“<strong>如果要从Go语言中挑选出一个特性放入其他语言，我会选择接口</strong>”，这句话足以说明接口这一语法特性在这位Go语言大神心目中的地位。</p><p>为什么接口在Go中有这么高的地位呢？这是因为<strong>接口是Go这门静态语言中唯一“动静兼备”的语法特性</strong>。而且，接口“动静兼备”的特性给Go带来了强大的表达能力，但同时也给Go语言初学者带来了不少困惑。要想真正解决这些困惑，我们必须深入到Go运行时层面，看看Go语言在运行时是如何表示接口类型的。在这一讲中，我就带着你一起深入到接口类型的运行时表示层面看看。</p><p>好，在解惑之前，我们先来看看接口的静态与动态特性，看看“动静皆备”到底是什么意思。</p><h2>接口的静态特性与动态特性</h2><p>接口的<strong>静态特性</strong>体现在<strong>接口类型变量具有静态类型</strong>，比如 <code>var err error</code> 中变量err的静态类型为error。拥有静态类型，那就意味着编译器会在编译阶段对所有接口类型变量的赋值操作进行类型检查，编译器会检查右值的类型是否实现了该接口方法集合中的所有方法。如果不满足，就会报错：</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">var err error = 1 // cannot use 1 (type int) as type error in assignment: int does not implement error (missing Error method)\n</code></pre><p>而接口的<strong>动态特性</strong>，就体现在接口类型变量在运行时还存储了右值的真实类型信息，这个右值的真实类型被称为接口类型变量的<strong>动态类型</strong>。你看一下下面示例代码：</p><pre><code class=\"language-plain\">var err error\nerr = errors.New(\"error1\")\nfmt.Printf(\"%T\\n\", err)  // *errors.errorString\n</code></pre><p>我们可以看到，这个示例通过errros.New构造了一个错误值，赋值给了error接口类型变量err，并通过fmt.Printf函数输出接口类型变量err的动态类型为*errors.errorString。</p><p>那接口的这种“动静皆备”的特性，又带来了什么好处呢？</p><p>首先，接口类型变量在程序运行时可以被赋值为不同的动态类型变量，每次赋值后，接口类型变量中存储的动态类型信息都会发生变化，这让Go语言可以像动态语言（比如Python）那样拥有使用 <a href=\"https://en.wikipedia.org/wiki/Duck_typing\">Duck Typing（鸭子类型）</a>的灵活性。所谓鸭子类型，就是指某类型所表现出的特性（比如是否可以作为某接口类型的右值），不是由其基因（比如C++中的父类）决定的，而是由类型所表现出来的行为（比如类型拥有的方法）决定的。</p><p>比如下面的例子：</p><pre><code class=\"language-plain\">type QuackableAnimal interface {\n    Quack()\n}\n\ntype Duck struct{}\n\nfunc (Duck) Quack() {\n    println(\"duck quack!\")\n}\n\ntype Dog struct{}\n\nfunc (Dog) Quack() {\n    println(\"dog quack!\")\n}\n\ntype Bird struct{}\n\nfunc (Bird) Quack() {\n    println(\"bird quack!\")\n}                         \n                          \nfunc AnimalQuackInForest(a QuackableAnimal) {\n    a.Quack()             \n}                         \n                          \nfunc main() {             \n    animals := []QuackableAnimal{new(Duck), new(Dog), new(Bird)}\n    for _, animal := range animals {\n        AnimalQuackInForest(animal)\n    }  \n}\n</code></pre><p>这个例子中，我们用接口类型QuackableAnimal来代表具有“会叫”这一特征的动物，而Duck、Bird和Dog类型各自都具有这样的特征，于是我们可以将这三个类型的变量赋值给QuackableAnimal接口类型变量a。每次赋值，变量a中存储的动态类型信息都不同，Quack方法的执行结果将根据变量a中存储的动态类型信息而定。</p><p>这里的Duck、Bird、Dog都是“鸭子类型”，但它们之间并没有什么联系，之所以能作为右值赋值给QuackableAnimal类型变量，只是因为他们表现出了QuackableAnimal所要求的特征罢了。</p><p>不过，与动态语言不同的是，Go接口还可以保证“动态特性”使用时的安全性。比如，编译器在编译期就可以捕捉到将int类型变量传给QuackableAnimal接口类型变量这样的明显错误，决不会让这样的错误遗漏到运行时才被发现。</p><p>接口类型的动静特性让我们看到了接口类型的强大，但在日常使用过程中，很多人都会产生各种困惑，其中最经典的一个困惑莫过于“nil的error值不等于nil”了。下面我们来详细看一下。</p><h2>nil error值 != nil</h2><p>这里我们直接来看一段改编自<a href=\"https://go.dev/doc/faq#nil_error\">GO FAQ中的例子</a>的代码：</p><pre><code class=\"language-plain\">type MyError struct {\n    error\n}\n\nvar ErrBad = MyError{\n    error: errors.New(\"bad things happened\"),\n}\n\nfunc bad() bool {\n    return false\n}\n\nfunc returnsError() error {\n    var p *MyError = nil\n    if bad() {\n        p = &amp;ErrBad\n    }\n    return p\n}\n\nfunc main() {\n    err := returnsError()\n    if err != nil {\n        fmt.Printf(\"error occur: %+v\\n\", err)\n        return\n    }\n    fmt.Println(\"ok\")\n}\n</code></pre><p>在这个例子中，我们的关注点集中在returnsError这个函数上面。这个函数定义了一个<code>*MyError</code> 类型的变量p，初值为nil。如果函数bad返回false，returnsError函数就会直接将p（此时p = nil）作为返回值返回给调用者，之后调用者会将returnsError函数的返回值（error接口类型）与nil进行比较，并根据比较结果做出最终处理。</p><p>如果你是一个初学者，我猜你的的思路大概是这样的：p为nil，returnsError返回p，那么main函数中的err就等于nil，于是程序输出 <strong>ok</strong> 后退出。</p><p>但真实的运行结果是什么样的呢？我们来看一下：</p><pre><code class=\"language-plain\">error occur: &lt;nil&gt;\n</code></pre><p>我们看到，示例程序并未如我们前面预期的那样输出ok。程序显然是进入了错误处理分支，输出了err的值。那这里就有一个问题了：明明returnsError函数返回的p值为nil，为什么却满足了 <code>if err != nil</code> 的条件进入错误处理分支呢？</p><p>要想弄清楚这个问题，我们需要进一步了解接口类型变量的内部表示。</p><h2>接口类型变量的内部表示</h2><p>接口类型“动静兼备”的特性也决定了它的变量的内部表示绝不像一个静态类型变量（如int、float64）那样简单，我们可以在<code>$GOROOT/src/runtime/runtime2.go</code> 中找到接口类型变量在运行时的表示：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/runtime2.go\ntype iface struct {\n    tab  *itab\n    data unsafe.Pointer\n}\n\ntype eface struct {\n    _type *_type\n    data  unsafe.Pointer\n}\n</code></pre><p>我们看到，在运行时层面，接口类型变量有两种内部表示：<code>iface</code> 和 <code>eface</code>，这两种表示分别用于不同的接口类型变量：</p><ul>\n<li>eface用于表示没有方法的空接口（empty interface）类型变量，也就是interface{}类型的变量；</li>\n<li>iface用于表示其余拥有方法的接口interface类型变量。</li>\n</ul><p>这两个结构的共同点是它们都有两个指针字段，并且第二个指针字段的功能相同，都是指向当前赋值给该接口类型变量的动态类型变量的值。</p><p>那它们的不同点在哪呢？就在于eface表示的空接口类型并没有方法列表，因此它的第一个指针字段指向一个<code>_type</code> 类型结构，这个结构为该接口类型变量的动态类型的信息，它的定义是这样的：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/type.go\n\ntype _type struct {\n    size       uintptr\n    ptrdata    uintptr // size of memory prefix holding all pointers\n    hash       uint32\n    tflag      tflag\n    align      uint8\n    fieldAlign uint8\n    kind       uint8\n    // function for comparing objects of this type\n    // (ptr to object A, ptr to object B) -&gt; ==?\n    equal func(unsafe.Pointer, unsafe.Pointer) bool\n    // gcdata stores the GC type data for the garbage collector.\n    // If the KindGCProg bit is set in kind, gcdata is a GC program.\n    // Otherwise it is a ptrmask bitmap. See mbitmap.go for details.\n    gcdata    *byte\n    str       nameOff\n    ptrToThis typeOff\n}\n</code></pre><p>而iface除了要存储动态类型信息之外，还要存储接口本身的信息（接口的类型信息、方法列表信息等）以及动态类型所实现的方法的信息，因此iface的第一个字段指向一个 <code>itab</code> 类型结构。itab结构的定义如下：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/runtime2.go\ntype itab struct {\n    inter *interfacetype\n    _type *_type\n    hash  uint32 // copy of _type.hash. Used for type switches.\n    _     [4]byte\n    fun   [1]uintptr // variable sized. fun[0]==0 means _type does not implement inter.\n}\n</code></pre><p>这里我们也可以看到，itab结构中的第一个字段 <code>inter</code> 指向的interfacetype结构，存储着这个接口类型自身的信息。你看一下下面这段代码表示的interfacetype类型定义， 这个interfacetype结构由类型信息（typ）、包路径名（pkgpath）和接口方法集合切片（mhdr）组成。</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/type.go\ntype interfacetype struct {\n    typ     _type\n    pkgpath name\n    mhdr    []imethod\n}\n</code></pre><p>itab结构中的字段<code>_type</code> 则存储着这个接口类型变量的动态类型的信息，字段 <code>fun</code> 则是动态类型已实现的接口方法的调用地址数组。</p><p>下面我们再结合例子用图片来直观展现eface和iface的结构。首先我们看一个用eface表示的空接口类型变量的例子：</p><pre><code class=\"language-plain\">type T struct {\n    n int\n    s string\n}\n\nfunc main() {\n    var t = T {\n        n: 17,\n        s: \"hello, interface\",\n    }\n    \n    var ei interface{} = t // Go运行时使用eface结构表示ei\n}\n</code></pre><p>这个例子中的空接口类型变量ei在Go运行时的表示是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/ae/2d8f103e2973d2e31c9f4237e6799eae.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到空接口类型的表示较为简单，图中上半部分_type字段指向它的动态类型T的类型信息，下半部分的data则是指向一个T类型的实例值。</p><p>我们再来看一个更复杂的用iface表示非空接口类型变量的例子：</p><pre><code class=\"language-plain\">type T struct {\n    n int\n    s string\n}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\ntype NonEmptyInterface interface {\n    M1()\n    M2()\n}\n\nfunc main() {\n    var t = T{\n        n: 18,\n        s: \"hello, interface\",\n    }\n    var i NonEmptyInterface = t\n}\n</code></pre><p>和eface比起来，iface的表示稍微复杂些。我也画了一幅表示上面NonEmptyInterface接口类型变量在Go运行时表示的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/36/44/369810ba10b9b8792d8edfd8e931b344.jpg?wh=1980x1080\" alt=\"\"></p><p>由上面的这两幅图，我们可以看出，每个接口类型变量在运行时的表示都是由两部分组成的，针对不同接口类型我们可以简化记作：<code>eface(_type, data)</code>和 <code>iface(tab, data)</code>。</p><p>而且，虽然eface和iface的第一个字段有所差别，但tab和_type可以统一看作是动态类型的类型信息。Go语言中每种类型都会有唯一的_type信息，无论是内置原生类型，还是自定义类型都有。Go运行时会为程序内的全部类型建立只读的共享_type信息表，因此拥有相同动态类型的同类接口类型变量的_type/tab信息是相同的。</p><p>而接口类型变量的data部分则是指向一个动态分配的内存空间，这个内存空间存储的是赋值给接口类型变量的动态类型变量的值。未显式初始化的接口类型变量的值为<code>nil</code>，也就是这个变量的_type/tab和data都为nil。</p><p>也就是说，我们判断两个接口类型变量是否相等，只需判断_type/tab以及data是否都相等即可。两个接口变量的_type/tab不同时，即两个接口变量的动态类型不相同时，两个接口类型变量一定不等。</p><p>当两个接口变量的_type/tab相同时，对data的相等判断要有区分。当接口变量的动态类型为指针类型时(*T)，Go不会再额外分配内存存储指针值，而会将动态类型的指针值直接存入data字段中，这样data值的相等性决定了两个接口类型变量是否相等；当接口变量的动态类型为非指针类型(T)时，我们判断的将不是data指针的值是否相等，而是判断data指针指向的内存空间所存储的数据值是否相等，若相等，则两个接口类型变量相等。</p><p>不过，通过肉眼去辨别接口类型变量是否相等总是困难一些，我们可以引入一些 <strong>helper函数</strong>。借助这些函数，我们可以清晰地输出接口类型变量的内部表示，这样就可以一目了然地看出两个变量是否相等了。</p><p>由于eface和iface是runtime包中的非导出结构体定义，我们不能直接在包外使用，所以也就无法直接访问到两个结构体中的数据。不过，Go语言提供了println预定义函数，可以用来输出eface或iface的两个指针字段的值。</p><p>在编译阶段，编译器会根据要输出的参数的类型将println替换为特定的函数，这些函数都定义在<code>$GOROOT/src/runtime/print.go</code> 文件中，而针对eface和iface类型的打印函数实现如下：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/print.go\nfunc printeface(e eface) {\n    print(\"(\", e._type, \",\", e.data, \")\")\n}\n\nfunc printiface(i iface) {\n    print(\"(\", i.tab, \",\", i.data, \")\")\n}\n</code></pre><p>我们看到，printeface和printiface会输出各自的两个指针字段的值。下面我们就来使用println函数输出各类接口类型变量的内部表示信息，并结合输出结果，解析接口类型变量的等值比较操作。</p><h3>第一种：nil接口变量</h3><p>我们前面提过，未赋初值的接口类型变量的值为nil，这类变量也就是nil接口变量，我们来看这类变量的内部表示输出的例子：</p><pre><code class=\"language-plain\">func printNilInterface() {\n\t// nil接口变量\n\tvar i interface{} // 空接口类型\n\tvar err error     // 非空接口类型\n\tprintln(i)\n\tprintln(err)\n\tprintln(\"i = nil:\", i == nil)\n\tprintln(\"err = nil:\", err == nil)\n\tprintln(\"i = err:\", i == err)\n}\n</code></pre><p>运行这个函数，输出结果是这样的：</p><pre><code class=\"language-plain\">(0x0,0x0)\n(0x0,0x0)\ni = nil: true\nerr = nil: true\ni = err: true\n</code></pre><p>我们看到，无论是空接口类型还是非空接口类型变量，一旦变量值为nil，那么它们内部表示均为<code>(0x0,0x0)</code>，也就是类型信息、数据值信息均为空。因此上面的变量i和err等值判断为true。</p><h3>第二种：空接口类型变量</h3><p>下面是空接口类型变量的内部表示输出的例子：</p><pre><code class=\"language-plain\">  func printEmptyInterface() {\n      var eif1 interface{} // 空接口类型\n      var eif2 interface{} // 空接口类型\n      var n, m int = 17, 18\n  \n      eif1 = n\n      eif2 = m\n\n      println(\"eif1:\", eif1)\n      println(\"eif2:\", eif2)\n      println(\"eif1 = eif2:\", eif1 == eif2) // false\n  \n      eif2 = 17\n      println(\"eif1:\", eif1)\n      println(\"eif2:\", eif2)\n      println(\"eif1 = eif2:\", eif1 == eif2) // true\n \n      eif2 = int64(17)\n      println(\"eif1:\", eif1)\n      println(\"eif2:\", eif2)\n      println(\"eif1 = eif2:\", eif1 == eif2) // false\n }\n</code></pre><p>这个例子的运行输出结果是这样的：</p><pre><code class=\"language-plain\">eif1: (0x10ac580,0xc00007ef48)\neif2: (0x10ac580,0xc00007ef40)\neif1 = eif2: false\neif1: (0x10ac580,0xc00007ef48)\neif2: (0x10ac580,0x10eb3d0)\neif1 = eif2: true\neif1: (0x10ac580,0xc00007ef48)\neif2: (0x10ac640,0x10eb3d8)\neif1 = eif2: false\n</code></pre><p>我们按顺序分析一下这个输出结果。</p><p>首先，代码执行到第11行时，eif1与eif2已经分别被赋值整型值17与18，这样eif1和eif2的动态类型的类型信息是相同的（都是0x10ac580），但data指针指向的内存块中存储的值不同，一个是17，一个是18，于是eif1不等于eif2。</p><p>接着，代码执行到第16行的时候，eif2已经被重新赋值为17，这样eif1和eif2不仅存储的动态类型的类型信息是相同的（都是0x10ac580），data指针指向的内存块中存储值也相同了，都是17，于是eif1等于eif2。</p><p>然后，代码执行到第21行时，eif2已经被重新赋值了int64类型的数值17。这样，eif1和eif2存储的动态类型的类型信息就变成不同的了，一个是int，一个是int64，即便data指针指向的内存块中存储值是相同的，最终eif1与eif2也是不相等的。</p><p>从输出结果中我们可以总结一下：<strong>对于空接口类型变量，只有_type和data所指数据内容一致的情况下，两个空接口类型变量之间才能划等号</strong>。另外，Go在创建eface时一般会为data重新分配新内存空间，将动态类型变量的值复制到这块内存空间，并将data指针指向这块内存空间。因此我们多数情况下看到的data指针值都是不同的。</p><h3>第三种：非空接口类型变量</h3><p>这里，我们也直接来看一个非空接口类型变量的内部表示输出的例子：</p><pre><code class=\"language-plain\">type T int\n\nfunc (t T) Error() string { \n    return \"bad error\"\n}\n\nfunc printNonEmptyInterface() { \n    var err1 error // 非空接口类型\n    var err2 error // 非空接口类型\n    err1 = (*T)(nil)\n    println(\"err1:\", err1)\n    println(\"err1 = nil:\", err1 == nil)\n\n    err1 = T(5)\n    err2 = T(6)\n    println(\"err1:\", err1)\n    println(\"err2:\", err2)\n    println(\"err1 = err2:\", err1 == err2)\n\n    err2 = fmt.Errorf(\"%d\\n\", 5)\n    println(\"err1:\", err1)\n    println(\"err2:\", err2)\n    println(\"err1 = err2:\", err1 == err2)\n}   \n</code></pre><p>这个例子的运行输出结果如下：</p><pre><code class=\"language-plain\">err1: (0x10ed120,0x0)\nerr1 = nil: false\nerr1: (0x10ed1a0,0x10eb310)\nerr2: (0x10ed1a0,0x10eb318)\nerr1 = err2: false\nerr1: (0x10ed1a0,0x10eb310)\nerr2: (0x10ed0c0,0xc000010050)\nerr1 = err2: false\n</code></pre><p>我们看到上面示例中每一轮通过println输出的err1和err2的tab和data值，要么data值不同，要么tab与data值都不同。</p><p>和空接口类型变量一样，只有tab和data指的数据内容一致的情况下，两个非空接口类型变量之间才能划等号。这里我们要注意err1下面的赋值情况：</p><pre><code class=\"language-plain\">err1 = (*T)(nil)\n</code></pre><p>针对这种赋值，println输出的err1是（0x10ed120, 0x0），也就是非空接口类型变量的类型信息并不为空，数据指针为空，因此它与nil（0x0,0x0）之间不能划等号。</p><p>现在我们再回到我们开头的那个问题，你是不是已经豁然开朗了呢？开头的问题中，从returnsError返回的error接口类型变量err的数据指针虽然为空，但它的类型信息（iface.tab）并不为空，而是*MyError对应的类型信息，这样err与nil（0x0,0x0）相比自然不相等，这就是我们开头那个问题的答案解析，现在你明白了吗？</p><h3>第四种：空接口类型变量与非空接口类型变量的等值比较</h3><p>下面是非空接口类型变量和空接口类型变量之间进行比较的例子：</p><pre><code class=\"language-plain\">func printEmptyInterfaceAndNonEmptyInterface() {\n\tvar eif interface{} = T(5)\n\tvar err error = T(5)\n\tprintln(\"eif:\", eif)\n\tprintln(\"err:\", err)\n\tprintln(\"eif = err:\", eif == err)\n\n\terr = T(6)\n\tprintln(\"eif:\", eif)\n\tprintln(\"err:\", err)\n\tprintln(\"eif = err:\", eif == err)\n}\n</code></pre><p>这个示例的输出结果如下：</p><pre><code class=\"language-plain\">eif: (0x10b3b00,0x10eb4d0)\nerr: (0x10ed380,0x10eb4d8)\neif = err: true\neif: (0x10b3b00,0x10eb4d0)\nerr: (0x10ed380,0x10eb4e0)\neif = err: false\n</code></pre><p>你可以看到，空接口类型变量和非空接口类型变量内部表示的结构有所不同（第一个字段：_type vs. tab)，两者似乎一定不能相等。但Go在进行等值比较时，类型比较使用的是eface的_type和iface的tab._type，因此就像我们在这个例子中看到的那样，当eif和err都被赋值为 <code>T(5)</code>时，两者之间是划等号的。</p><p>好了，到这里，我们已经学完了各类接口类型变量在运行时层的表示。我们可以通过println可以查看这个表示信息，从中我们也知道了接口变量只有在类型信息与值信息都一致的情况下才能划等号。</p><h2>输出接口类型变量内部表示的详细信息</h2><p>不过，println输出的接口类型变量的内部表示信息，在一般情况下都是足够的，但有些时候又显得过于简略，比如在上面最后一个例子中，如果仅凭 <code>eif: (0x10b3b00,0x10eb4d0)</code>和 <code>err: (0x10ed380,0x10eb4d8)</code>的输出，我们是无法想到两个变量是相等的。</p><p>那这时如果我们能输出接口类型变量内部表示的详细信息（比如：tab._type），那势必可以取得事半功倍的效果。接下来我们就看看这要怎么做。</p><p>前面提到过，eface和iface以及组成它们的itab和_type都是runtime包下的非导出结构体，我们无法在外部直接引用它们。但我们发现，组成eface、iface的类型都是基本数据类型，我们完全可以通过<strong>“复制代码”</strong>的方式将它们拿到runtime包外面来。</p><p>不过，这里要注意，由于runtime中的eface、iface，或者它们的组成可能会随着Go版本的变化发生变化，因此这个方法不具备跨版本兼容性。也就是说，基于Go 1.17版本复制的代码，可能仅适用于使用Go 1.17版本编译。这里我们就以Go 1.17版本为例看看：</p><pre><code class=\"language-plain\">// dumpinterface.go \ntype eface struct {\n    _type *_type\n    data  unsafe.Pointer\n}\n\ntype tflag uint8\ntype nameOff int32\ntype typeOff int32\n\ntype _type struct {\n    size       uintptr\n    ptrdata    uintptr // size of memory prefix holding all pointers\n    hash       uint32\n    tflag      tflag\n    align      uint8\n    fieldAlign uint8\n    kind       uint8\n    // function for comparing objects of this type\n    // (ptr to object A, ptr to object B) -&gt; ==?\n    equal func(unsafe.Pointer, unsafe.Pointer) bool\n    // gcdata stores the GC type data for the garbage collector.\n    // If the KindGCProg bit is set in kind, gcdata is a GC program.\n    // Otherwise it is a ptrmask bitmap. See mbitmap.go for details.\n    gcdata    *byte\n    str       nameOff\n    ptrToThis typeOff\n}\n\ntype iface struct {\n    tab  *itab\n    data unsafe.Pointer\n}\n\ntype itab struct {\n    inter *interfacetype\n    _type *_type\n    hash  uint32 // copy of _type.hash. Used for type switches.\n    _     [4]byte\n    fun   [1]uintptr // variable sized. fun[0]==0 means _type does not implement inter.\n}\n\n... ...\n\nconst ptrSize = unsafe.Sizeof(uintptr(0))\n\nfunc dumpEface(i interface{}) {\n    ptrToEface := (*eface)(unsafe.Pointer(&amp;i))\n    fmt.Printf(\"eface: %+v\\n\", *ptrToEface)\n\n    if ptrToEface._type != nil {\n        // dump _type info\n        fmt.Printf(\"\\t _type: %+v\\n\", *(ptrToEface._type))\n    }\n\n    if ptrToEface.data != nil {\n        // dump data\n        switch i.(type) {\n        case int:\n            dumpInt(ptrToEface.data)\n        case float64:\n            dumpFloat64(ptrToEface.data)\n        case T:\n            dumpT(ptrToEface.data)\n\n        // other cases ... ...\n        default:\n            fmt.Printf(\"\\t unsupported data type\\n\")\n        }\n    }\n    fmt.Printf(\"\\n\")\n}\n\nfunc dumpItabOfIface(ptrToIface unsafe.Pointer) {\n    p := (*iface)(ptrToIface)\n    fmt.Printf(\"iface: %+v\\n\", *p)\n\n    if p.tab != nil {\n        // dump itab\n        fmt.Printf(\"\\t itab: %+v\\n\", *(p.tab))\n        // dump inter in itab\n        fmt.Printf(\"\\t\\t inter: %+v\\n\", *(p.tab.inter))\n\n        // dump _type in itab\n        fmt.Printf(\"\\t\\t _type: %+v\\n\", *(p.tab._type))\n\n        // dump fun in tab\n        funPtr := unsafe.Pointer(&amp;(p.tab.fun))\n        fmt.Printf(\"\\t\\t fun: [\")\n        for i := 0; i &lt; len((*(p.tab.inter)).mhdr); i++ {\n            tp := (*uintptr)(unsafe.Pointer(uintptr(funPtr) + uintptr(i)*ptrSize))\n            fmt.Printf(\"0x%x(%d),\", *tp, *tp)\n        }\n        fmt.Printf(\"]\\n\")\n    }\n}\n\nfunc dumpDataOfIface(i interface{}) {\n    // this is a trick as the data part of eface and iface are same\n    ptrToEface := (*eface)(unsafe.Pointer(&amp;i))\n\n    if ptrToEface.data != nil {\n        // dump data\n        switch i.(type) {\n        case int:\n            dumpInt(ptrToEface.data)\n        case float64:\n            dumpFloat64(ptrToEface.data)\n        case T:\n            dumpT(ptrToEface.data)\n\n        // other cases ... ...\n\n        default:\n            fmt.Printf(\"\\t unsupported data type\\n\")\n        }\n    }\n    fmt.Printf(\"\\n\")\n}\n\nfunc dumpT(dataOfIface unsafe.Pointer) {\n    var p *T = (*T)(dataOfIface)\n    fmt.Printf(\"\\t data: %+v\\n\", *p)\n}\n... ...\n\n</code></pre><p>这里我挑选了关键部分，省略了部分代码。上面这个dumpinterface.go中提供了三个主要函数:</p><ul>\n<li>dumpEface: 用于输出空接口类型变量的内部表示信息；</li>\n<li>dumpItabOfIface: 用于输出非空接口类型变量的tab字段信息；</li>\n<li>dumpDataOfIface: 用于输出非空接口类型变量的data字段信息；</li>\n</ul><p>我们利用这三个函数来输出一下前面printEmptyInterfaceAndNonEmptyInterface函数中的接口类型变量的信息：</p><pre><code class=\"language-plain\">package main\n\nimport \"unsafe\"\n\ntype T int\n\nfunc (t T) Error() string {\n    return \"bad error\"\n}\n\nfunc main() {\n    var eif interface{} = T(5)\n    var err error = T(5)\n    println(\"eif:\", eif)\n    println(\"err:\", err)\n    println(\"eif = err:\", eif == err)\n    \n    dumpEface(eif)\n    dumpItabOfIface(unsafe.Pointer(&amp;err))\n    dumpDataOfIface(err)\n}\n</code></pre><p>运行这个示例代码，我们得到了这个输出结果：</p><pre><code class=\"language-plain\">eif: (0x10b38c0,0x10e9b30)\nerr: (0x10eb690,0x10e9b30)\neif = err: true\neface: {_type:0x10b38c0 data:0x10e9b30}\n\t _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n\t data: bad error\n\niface: {tab:0x10eb690 data:0x10e9b30}\n\t itab: {inter:0x10b5e20 _type:0x10b38c0 hash:1156555957 _:[0 0 0 0] fun:[17454976]}\n\t\t inter: {typ:{size:16 ptrdata:16 hash:235953867 tflag:7 align:8 fieldAlign:8 kind:20 equal:0x10034c0 gcdata:0x10d2418 str:3666 ptrToThis:26848} pkgpath:{bytes:&lt;nil&gt;} mhdr:[{name:2592 ityp:43520}]}\n\t\t _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n\t\t fun: [0x10a5780(17454976),]\n\t data: bad error\n</code></pre><p>从输出结果中，我们看到eif的_type（0x10b38c0）与err的tab._type（0x10b38c0）是一致的，data指针所指内容（“bad error”）也是一致的，因此 <code>eif == err</code> 表达式的结果为true。</p><p>再次强调一遍，上面这个实现可能仅在Go 1.17版本上测试通过，并且在输出iface或eface的data部分内容时只列出了int、float64和T类型的数据读取实现，没有列出全部类型的实现，你可以根据自己的需要实现其余数据类型。dumpinterface.go的完整代码你可以在<a href=\"https://github.com/bigwhite/publication/tree/master/column/timegeek/go-first-course/29\">这里</a>找到。</p><p>我们现在已经知道了，接口类型有着复杂的内部结构，所以我们将一个类型变量值赋值给一个接口类型变量值的过程肯定不会像 <code>var i int = 5</code> 那么简单，那么接口类型变量赋值的过程是怎样的呢？其实接口类型变量赋值是一个“装箱”的过程。</p><h2>接口类型的装箱（boxing）原理</h2><p><strong>装箱（boxing）</strong>是编程语言领域的一个基础概念，一般是指把一个值类型转换成引用类型，比如在支持装箱概念的Java语言中，将一个int变量转换成Integer对象就是一个装箱操作。</p><p>在Go语言中，将任意类型赋值给一个接口类型变量也是<strong>装箱</strong>操作。有了前面对接口类型变量内部表示的学习，我们知道<strong>接口类型的装箱实际就是创建一个eface或iface的过程</strong>。接下来我们就来简要描述一下这个过程，也就是接口类型的装箱原理。</p><p>我们基于下面这个例子中的接口装箱操作来说明：</p><pre><code class=\"language-plain\">// interface_internal.go\n\n  type T struct {\n      n int\n      s string\n  }\n  \n  func (T) M1() {}\n  func (T) M2() {}\n  \n  type NonEmptyInterface interface {\n      M1()\n      M2()\n  }\n  \n  func main() {\n      var t = T{\n          n: 17,\n          s: \"hello, interface\",\n      }\n      var ei interface{}\n      ei = t\n \n      var i NonEmptyInterface\n      i = t\n      fmt.Println(ei)\n      fmt.Println(i)\n  }\n</code></pre><p>这个例子中，对ei和i两个接口类型变量的赋值都会触发装箱操作，要想知道Go在背后做了些什么，我们需要“下沉”一层，也就是要输出上面Go代码对应的汇编代码：</p><pre><code class=\"language-plain\">$go tool compile -S interface_internal.go &gt; interface_internal.s\n</code></pre><p>对应 <code>ei = t</code> 一行的汇编如下：</p><pre><code class=\"language-plain\">    0x0026 00038 (interface_internal.go:24) MOVQ    $17, \"\"..autotmp_15+104(SP)\n    0x002f 00047 (interface_internal.go:24) LEAQ    go.string.\"hello, interface\"(SB), CX\n    0x0036 00054 (interface_internal.go:24) MOVQ    CX, \"\"..autotmp_15+112(SP)\n    0x003b 00059 (interface_internal.go:24) MOVQ    $16, \"\"..autotmp_15+120(SP)\n    0x0044 00068 (interface_internal.go:24) LEAQ    type.\"\".T(SB), AX\n    0x004b 00075 (interface_internal.go:24) LEAQ    \"\"..autotmp_15+104(SP), BX\n    0x0050 00080 (interface_internal.go:24) PCDATA  $1, $0\n    0x0050 00080 (interface_internal.go:24) CALL    runtime.convT2E(SB)\n</code></pre><p>对应i = t一行的汇编如下：</p><pre><code class=\"language-plain\">    0x005f 00095 (interface_internal.go:27) MOVQ    $17, \"\"..autotmp_15+104(SP)\n    0x0068 00104 (interface_internal.go:27) LEAQ    go.string.\"hello, interface\"(SB), CX\n    0x006f 00111 (interface_internal.go:27) MOVQ    CX, \"\"..autotmp_15+112(SP)\n    0x0074 00116 (interface_internal.go:27) MOVQ    $16, \"\"..autotmp_15+120(SP)\n    0x007d 00125 (interface_internal.go:27) LEAQ    go.itab.\"\".T,\"\".NonEmptyInterface(SB), AX\n    0x0084 00132 (interface_internal.go:27) LEAQ    \"\"..autotmp_15+104(SP), BX\n    0x0089 00137 (interface_internal.go:27) PCDATA  $1, $1\n    0x0089 00137 (interface_internal.go:27) CALL    runtime.convT2I(SB)\n</code></pre><p>在将动态类型变量赋值给接口类型变量语句对应的汇编代码中，我们看到了 <code>convT2E</code> 和 <code>convT2I</code> 两个runtime包的函数。这两个函数的实现位于<code>$GOROOT/src/runtime/iface.go</code> 中：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/iface.go\n\nfunc convT2E(t *_type, elem unsafe.Pointer) (e eface) {\n    if raceenabled {\n        raceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2E))\n    }\n    if msanenabled {\n        msanread(elem, t.size)\n    }\n    x := mallocgc(t.size, t, true)\n    typedmemmove(t, x, elem)\n    e._type = t\n    e.data = x\n    return\n}\n\nfunc convT2I(tab *itab, elem unsafe.Pointer) (i iface) {\n    t := tab._type\n    if raceenabled {\n        raceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2I))\n    }\n    if msanenabled {\n        msanread(elem, t.size)\n    }\n    x := mallocgc(t.size, t, true)\n    typedmemmove(t, x, elem)\n    i.tab = tab\n    i.data = x\n    return\n}\n</code></pre><p>convT2E用于将任意类型转换为一个eface，convT2I用于将任意类型转换为一个iface。两个函数的实现逻辑相似，主要思路就是根据传入的类型信息（convT2E的_type和convT2I的tab._type）分配一块内存空间，并将elem指向的数据拷贝到这块内存空间中，最后传入的类型信息作为返回值结构中的类型信息，返回值结构中的数据指针（data）指向新分配的那块内存空间。</p><p>由此我们也可以看出，经过装箱后，箱内的数据，也就是存放在新分配的内存空间中的数据与原变量便无瓜葛了，比如下面这个例子：</p><pre><code class=\"language-plain\">func main() {\n\tvar n int = 61\n\tvar ei interface{} = n\n\tn = 62  // n的值已经改变\n\tfmt.Println(\"data in box:\", ei) // 输出仍是61\n}\n</code></pre><p>那么convT2E和convT2I函数的类型信息是从何而来的呢？</p><p>其实这些都依赖Go编译器的工作。编译器知道每个要转换为接口类型变量（toType）和动态类型变量的类型（fromType），它会根据这一对类型选择适当的convT2X函数，并在生成代码时使用选出的convT2X函数参与装箱操作。</p><p>不过，装箱是一个有性能损耗的操作，因此Go也在不断对装箱操作进行优化，包括对常见类型如整型、字符串、切片等提供系列快速转换函数：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/iface.go\nfunc convT16(val any) unsafe.Pointer     // val must be uint16-like\nfunc convT32(val any) unsafe.Pointer     // val must be uint32-like\nfunc convT64(val any) unsafe.Pointer     // val must be uint64-like\nfunc convTstring(val any) unsafe.Pointer // val must be a string\nfunc convTslice(val any) unsafe.Pointer  // val must be a slice\n</code></pre><p>这些函数去除了typedmemmove操作，增加了零值快速返回等特性。</p><p>同时Go建立了staticuint64s区域，对255以内的小整数值进行装箱操作时<a href=\"https://github.com/golang/go/issues/17725\">不再分配新内存</a>，而是利用staticuint64s区域的内存空间，下面是staticuint64s的定义：</p><pre><code class=\"language-plain\">// $GOROOT/src/runtime/iface.go\n// staticuint64s is used to avoid allocating in convTx for small integer values.\nvar staticuint64s = [...]uint64{\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n\t... ...\n}\n</code></pre><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>接口类型作为参与构建Go应用骨架的重要参与者，在Go语言中有着很高的地位。它这个地位的取得离不开它拥有的“动静兼备”的语法特性。Go接口的动态特性让Go拥有与动态语言相近的灵活性，而静态特性又在编译阶段保证了这种灵活性的安全。</p><p>要更好地理解Go接口的这两种特性，我们需要深入到Go接口在运行时的表示层面上去。接口类型变量在运行时表示为eface和iface，eface用于表示空接口类型变量，iface用于表示非空接口类型变量。只有两个接口类型变量的类型信息（eface._type/iface.tab._type）相同，且数据指针（eface.data/iface.data）所指数据相同时，两个接口类型变量才是相等的。</p><p>我们可以通过println输出接口类型变量的两部分指针变量的值。而且，通过拷贝runtime包eface和iface相关类型源码，我们还可以自定义输出eface/iface详尽信息的函数，不过要注意的是，由于runtime层代码的演进，这个函数可能不具备在Go版本间的移植性。</p><p>最后，接口类型变量的赋值本质上是一种装箱操作，装箱操作是由Go编译器和运行时共同完成的，有一定的性能开销，对于性能敏感的系统来说，我们应该尽量避免或减少这类装箱操作。</p><h2>思考题</h2><p>像nil error值 != nil那个例子中的“坑”你在日常编码时有遇到过吗？可以和我们分享一下吗？另外，我们这节课中的这个例子如何修改，才能让它按我们最初的预期结果输出呢？</p><p>欢迎在留言区分享你的经验和想法。也欢迎你把这节课分享给更多对Go接口感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","comments":[{"had_liked":false,"id":329453,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1641354219,"is_pvip":false,"replies":[{"id":120467,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642038695,"ip_address":"","comment_id":329453,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题有2 种方法：\n1）returnsError() 函数不返回 error 非空接口类型，而是直接返回结构体指针 *MyError（明确的类型，阻止自动装箱）；\n2）不要直接 err != nil 这样判断，而是使用类型断言来判断：\nif e, ok := err.(*MyError); ok &amp;&amp; e != nil {\n    fmt.Printf(&quot;error occur: %+v\\n&quot;, e)\n    return\n}\n\nPS：Go 的“接口”在编程中需要特别注意，必须搞清楚接口类型变量在运行时的表示，以避免踩坑！！！","like_count":23},{"had_liked":false,"id":328488,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1640751323,"is_pvip":false,"replies":[{"id":120354,"content":"受宠若惊😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641894304,"ip_address":"","comment_id":328488,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师讲的太好， 这一篇 知识密度相当大啊， \n就这一篇就值专栏的价格了。\n感谢老师如此用心的输出。","like_count":18,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545675,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642038695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328421,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1640721042,"is_pvip":true,"replies":[{"id":120412,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995963,"ip_address":"","comment_id":328421,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"修改方法:\n1. 把returnsError()里面p的类型改为error\n2. 删除p，直接return &amp;ErrBad或者nil","like_count":16,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545286,"discussion_content":"受宠若惊😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641894305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342723,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650433252,"is_pvip":false,"replies":[{"id":125224,"content":"正确。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650493735,"ip_address":"","comment_id":342723,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师， 请问这里发生装箱了吗？ 返回类型是error， 是一个接口， p是*MyError， p的方法列表覆盖了error这个接口， 所以是可以赋值给error类型的变量。 \n这个过程发生了隐式转换，赋值给接口类型，做装箱创建iface， \np != nil就成了 (&amp;tab, 0x0) != (0x0, 0x0)\n\nfunc returnsError() error {    \n    var p *MyError = nil    \n    if bad() {\n        p = &amp;ErrBad\n    }\n    return p\n}\n\n这样理解对吗？","like_count":12,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545564,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg","nickname":"Middleware","note":"","ucode":"C0028293ECDD47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542798,"discussion_content":"不愧是华为字节网易遥","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640847510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025239,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","nickname":"Aliliin","note":"","ucode":"61F9A09BB6650F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548275,"discussion_content":"不愧是华为字节网易遥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643108236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329171,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1641194449,"is_pvip":false,"replies":[{"id":120436,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998086,"ip_address":"","comment_id":329171,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"原来装箱是这样：将任意类型赋值给一个接口类型变量就是装箱操作。\n接口类型的装箱实际就是创建一个 eface 或 iface 的过程","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565543,"discussion_content":"正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650493735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350401,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656896943,"is_pvip":false,"replies":[{"id":127492,"content":"好问题。\n\n为什么输出bad error而不是5，是因为我们的dumpT函数的实现：\n\nfunc dumpT(dataOfIface unsafe.Pointer) {\n    var p *T = (*T)(dataOfIface)\n    fmt.Printf(&quot;\\t data: %+v\\n&quot;, *p)\n}\n\n这里的Printf使用了%+v。\n\n在标准库fmt包的manual（https:&#47;&#47;pkg.go.dev&#47;fmt）中有，当verb为%v时，如果操作数实现了error接口，那么Printf将会调用这个操作数的Error方法将其转换为字符串。\n\n原文：If an operand implements the error interface, the Error method will be invoked to convert the object to a string\n\n所以这里输出的是bad error。\n\n可以再举一个简单的例子：\n\npackage main\n  \nimport &quot;fmt&quot;\n\ntype T int\n\nfunc (t T) Error() string {\n    return &quot;bad error&quot;\n}\n\nfunc main() {\n    var t = T(5)\n\n    fmt.Printf(&quot;%d\\n&quot;, t) &#47;&#47; 5\n    fmt.Printf(&quot;%v\\n&quot;, t) &#47;&#47; bad error\n}\n\n\n\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656969942,"ip_address":"","comment_id":350401,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"eif: (0x10b38c0,0x10e9b30)\nerr: (0x10eb690,0x10e9b30)\neif = err: true\neface: {_type:0x10b38c0 data:0x10e9b30}\n   _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n   data: bad error\n\niface: {tab:0x10eb690 data:0x10e9b30}\n   itab: {inter:0x10b5e20 _type:0x10b38c0 hash:1156555957 _:[0 0 0 0] fun:[17454976]}\n     inter: {typ:{size:16 ptrdata:16 hash:235953867 tflag:7 align:8 fieldAlign:8 kind:20 equal:0x10034c0 gcdata:0x10d2418 str:3666 ptrToThis:26848} pkgpath:{bytes:&lt;nil&gt;} mhdr:[{name:2592 ityp:43520}]}\n     _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n     fun: [0x10a5780(17454976),]\n   data: bad error 请问为什么data会是bad error不应该是5吗","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545597,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2535320,"avatar":"https://static001.geekbang.org/account/avatar/00/26/af/98/5bdfb679.jpg","nickname":"Mike","note":"","ucode":"3DBBE5332C1307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606145,"discussion_content":"到这里终于看懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676972143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329552,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1641397494,"is_pvip":false,"replies":[{"id":120470,"content":"好多人提出来了，后续定弄个加餐说说指针。不过需要把所有正文都更完后，编辑老师催的紧，你了解的:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642039187,"ip_address":"","comment_id":329552,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go 指针这块，感觉可以单独抽出一讲来讲下，并且结合unsafe 讲解，不知道大白老师能否满足大家的愿望呢？😂","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578697,"discussion_content":"好问题。\n\n为什么输出bad error而不是5，是因为我们的dumpT函数的实现：\n\nfunc dumpT(dataOfIface unsafe.Pointer) {\n    var p *T = (*T)(dataOfIface)\n    fmt.Printf(&#34;\\t data: %+v\\n&#34;, *p)\n}\n\n这里的Printf使用了%+v。\n\n在标准库fmt包的manual（https://pkg.go.dev/fmt）中有，当verb为%v时，如果操作数实现了error接口，那么Printf将会调用这个操作数的Error方法将其转换为字符串。\n\n原文：If an operand implements the error interface, the Error method will be invoked to convert the object to a string\n\n所以这里输出的是bad error。\n\n可以再举一个简单的例子：\n\npackage main\n  \nimport &#34;fmt&#34;\n\ntype T int\n\nfunc (t T) Error() string {\n    return &#34;bad error&#34;\n}\n\nfunc main() {\n    var t = T(5)\n\n    fmt.Printf(&#34;%d\\n&#34;, t) // 5\n    fmt.Printf(&#34;%v\\n&#34;, t) // bad error\n}\n\n\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656969942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336010,"user_name":"郑泽洲","can_delete":false,"product_type":"c1","uid":1447496,"ip_address":"","ucode":"EA1B540A040875","user_header":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","comment_is_top":false,"comment_ctime":1645846146,"is_pvip":false,"replies":[{"id":122861,"content":"好问题！\n\n假设按照你说的，interface中直接用原先的值，那么interface类型在runtime中的表示一定是(type, ptr)的二元组。而ptr指向原值的地址。这样的情况下，看个例子：\n\nfunc foo(i interface{}) {\n   i.(int) = 8\n}\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\nprintln(a) &#47;&#47; a = 7 这似乎还说得过去。\n\n但是如果将i传递给函数foo：\nfoo(i) \n\nfoo对i的修改将都反映到a上：\n\nprintln(a) &#47;&#47; a = 8\n\n这与值拷贝语义似乎有悖。\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645997675,"ip_address":"","comment_id":336010,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师，接口类型装箱过程为什么普遍要把原来的值复制一份到data？（除了staticuint64s等特例）直接用原来的值不行吗，还能提升点性能","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553623,"discussion_content":"好问题！\n\n假设按照你说的，interface中直接用原先的值，那么interface类型在runtime中的表示一定是(type, ptr)的二元组。而ptr指向原值的地址。这样的情况下，看个例子：\n\nfunc foo(i interface{}) {\n   i.(int) = 8\n}\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\nprintln(a) // a = 7 这似乎还说得过去。\n\n但是如果将i传递给函数foo：\nfoo(i) \n\nfoo对i的修改将都反映到a上：\n\nprintln(a) // a = 8\n\n这与值拷贝语义似乎有悖。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645997675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3198641,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFEQibKmCdPwFMncjfPFficY97fdnZWFxFbu8uze8REXB5S6gMtxRsESWibBmEFibBsaaj0ZkKmWPtEA/132","nickname":"义务教育漏网之鱼","note":"","ucode":"DE23BC762FD57B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":613496,"discussion_content":"那如果原值是个指针类型的，是不是就存在这个问题了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681358058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553623,"ip_address":"湖北","group_id":0},"score":613496,"extra":""}]},{"author":{"id":1447496,"avatar":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","nickname":"郑泽洲","note":"","ucode":"EA1B540A040875","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608628,"discussion_content":"谢谢老师解答。正在二刷，争取更深入掌握。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678547081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328497,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1640754043,"is_pvip":false,"replies":[{"id":120420,"content":"判相等不要看data指针的值，要看data指针指向的内存块中存储的值是否相同。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996683,"ip_address":"","comment_id":328497,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师您好，在   eif2 = 17 这个操作后，输出后的data  ,0xc00007ef48 和0x10eb3d0 不相等呀，为甚么说他们是一样的\neif1: (0x10ac580,0xc00007ef48)\neif2: (0x10ac580,0x10eb3d0)","like_count":5,"discussions":[{"author":{"id":2049562,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aQmhiahazRFUA4W3r1hdxxreSB5Pl54IwAJ8bwN6j02lzicydWAfPFbWx1LSFtzXH8MkI0jUKjlpUtmQBoZ4kReA/132","nickname":"Geek_99b47c","note":"","ucode":"D25E22C1D84E09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542520,"discussion_content":"指针指向的值相同，文中有讲的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640771848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545574,"discussion_content":"判相等不要看data指针的值，要看data指针指向的内存块中存储的值是否相同。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641996683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542813,"discussion_content":"不是指针的值相同，是指向的内容相同就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640852572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328971,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1640963983,"is_pvip":false,"replies":[{"id":120433,"content":"1. 没有啥特殊含义。我们自己写代码，不要用以下划线为前缀的命名方式。\n2. 指针加餐后续应该会加上。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997626,"ip_address":"","comment_id":328971,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"大白老师的这一节干货很多，读的意犹未尽。有几个疑惑点，麻烦老师解忧。\n\n1. 文中类似：“_type” 这种命名，前面加下划线，这种有什么含义呢？\n\n2. 文中关于打印两类接口内部详细信息的代码中，运用了大量的 * 还有 &amp; 再加上  unsafe.Pointer 的使用，看起来会非常困惑，希望老师后面能讲一讲Go的指针吧。刚从动态语言转过来，确实应该好好理解一下。不然后面写出来的代码一定会有很多潜在的风险。","like_count":3,"discussions":[{"author":{"id":2049562,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aQmhiahazRFUA4W3r1hdxxreSB5Pl54IwAJ8bwN6j02lzicydWAfPFbWx1LSFtzXH8MkI0jUKjlpUtmQBoZ4kReA/132","nickname":"Geek_99b47c","note":"","ucode":"D25E22C1D84E09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542520,"discussion_content":"指针指向的值相同，文中有讲的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640771848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545574,"discussion_content":"判相等不要看data指针的值，要看data指针指向的内存块中存储的值是否相同。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641996683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542813,"discussion_content":"不是指针的值相同，是指向的内容相同就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640852572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329453,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1641354219,"is_pvip":false,"replies":[{"id":120467,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642038695,"ip_address":"","comment_id":329453,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题有2 种方法：\n1）returnsError() 函数不返回 error 非空接口类型，而是直接返回结构体指针 *MyError（明确的类型，阻止自动装箱）；\n2）不要直接 err != nil 这样判断，而是使用类型断言来判断：\nif e, ok := err.(*MyError); ok &amp;&amp; e != nil {\n    fmt.Printf(&quot;error occur: %+v\\n&quot;, e)\n    return\n}\n\nPS：Go 的“接口”在编程中需要特别注意，必须搞清楚接口类型变量在运行时的表示，以避免踩坑！！！","like_count":23,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545675,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642038695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328488,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1640751323,"is_pvip":false,"replies":[{"id":120354,"content":"受宠若惊😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641894304,"ip_address":"","comment_id":328488,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师讲的太好， 这一篇 知识密度相当大啊， \n就这一篇就值专栏的价格了。\n感谢老师如此用心的输出。","like_count":18,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545286,"discussion_content":"受宠若惊😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641894305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328421,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1640721042,"is_pvip":true,"replies":[{"id":120412,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995963,"ip_address":"","comment_id":328421,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"修改方法:\n1. 把returnsError()里面p的类型改为error\n2. 删除p，直接return &amp;ErrBad或者nil","like_count":16,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545564,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg","nickname":"Middleware","note":"","ucode":"C0028293ECDD47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542798,"discussion_content":"不愧是华为字节网易遥","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640847510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025239,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","nickname":"Aliliin","note":"","ucode":"61F9A09BB6650F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548275,"discussion_content":"不愧是华为字节网易遥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643108236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342723,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650433252,"is_pvip":false,"replies":[{"id":125224,"content":"正确。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650493735,"ip_address":"","comment_id":342723,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师， 请问这里发生装箱了吗？ 返回类型是error， 是一个接口， p是*MyError， p的方法列表覆盖了error这个接口， 所以是可以赋值给error类型的变量。 \n这个过程发生了隐式转换，赋值给接口类型，做装箱创建iface， \np != nil就成了 (&amp;tab, 0x0) != (0x0, 0x0)\n\nfunc returnsError() error {    \n    var p *MyError = nil    \n    if bad() {\n        p = &amp;ErrBad\n    }\n    return p\n}\n\n这样理解对吗？","like_count":12,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565543,"discussion_content":"正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650493735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329171,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1641194449,"is_pvip":false,"replies":[{"id":120436,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998086,"ip_address":"","comment_id":329171,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"原来装箱是这样：将任意类型赋值给一个接口类型变量就是装箱操作。\n接口类型的装箱实际就是创建一个 eface 或 iface 的过程","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545597,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2535320,"avatar":"https://static001.geekbang.org/account/avatar/00/26/af/98/5bdfb679.jpg","nickname":"Mike","note":"","ucode":"3DBBE5332C1307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606145,"discussion_content":"到这里终于看懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676972143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350401,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656896943,"is_pvip":false,"replies":[{"id":127492,"content":"好问题。\n\n为什么输出bad error而不是5，是因为我们的dumpT函数的实现：\n\nfunc dumpT(dataOfIface unsafe.Pointer) {\n    var p *T = (*T)(dataOfIface)\n    fmt.Printf(&quot;\\t data: %+v\\n&quot;, *p)\n}\n\n这里的Printf使用了%+v。\n\n在标准库fmt包的manual（https:&#47;&#47;pkg.go.dev&#47;fmt）中有，当verb为%v时，如果操作数实现了error接口，那么Printf将会调用这个操作数的Error方法将其转换为字符串。\n\n原文：If an operand implements the error interface, the Error method will be invoked to convert the object to a string\n\n所以这里输出的是bad error。\n\n可以再举一个简单的例子：\n\npackage main\n  \nimport &quot;fmt&quot;\n\ntype T int\n\nfunc (t T) Error() string {\n    return &quot;bad error&quot;\n}\n\nfunc main() {\n    var t = T(5)\n\n    fmt.Printf(&quot;%d\\n&quot;, t) &#47;&#47; 5\n    fmt.Printf(&quot;%v\\n&quot;, t) &#47;&#47; bad error\n}\n\n\n\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656969942,"ip_address":"","comment_id":350401,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"eif: (0x10b38c0,0x10e9b30)\nerr: (0x10eb690,0x10e9b30)\neif = err: true\neface: {_type:0x10b38c0 data:0x10e9b30}\n   _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n   data: bad error\n\niface: {tab:0x10eb690 data:0x10e9b30}\n   itab: {inter:0x10b5e20 _type:0x10b38c0 hash:1156555957 _:[0 0 0 0] fun:[17454976]}\n     inter: {typ:{size:16 ptrdata:16 hash:235953867 tflag:7 align:8 fieldAlign:8 kind:20 equal:0x10034c0 gcdata:0x10d2418 str:3666 ptrToThis:26848} pkgpath:{bytes:&lt;nil&gt;} mhdr:[{name:2592 ityp:43520}]}\n     _type: {size:8 ptrdata:0 hash:1156555957 tflag:15 align:8 fieldAlign:8 kind:2 equal:0x10032e0 gcdata:0x10e9a60 str:4946 ptrToThis:58496}\n     fun: [0x10a5780(17454976),]\n   data: bad error 请问为什么data会是bad error不应该是5吗","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578697,"discussion_content":"好问题。\n\n为什么输出bad error而不是5，是因为我们的dumpT函数的实现：\n\nfunc dumpT(dataOfIface unsafe.Pointer) {\n    var p *T = (*T)(dataOfIface)\n    fmt.Printf(&#34;\\t data: %+v\\n&#34;, *p)\n}\n\n这里的Printf使用了%+v。\n\n在标准库fmt包的manual（https://pkg.go.dev/fmt）中有，当verb为%v时，如果操作数实现了error接口，那么Printf将会调用这个操作数的Error方法将其转换为字符串。\n\n原文：If an operand implements the error interface, the Error method will be invoked to convert the object to a string\n\n所以这里输出的是bad error。\n\n可以再举一个简单的例子：\n\npackage main\n  \nimport &#34;fmt&#34;\n\ntype T int\n\nfunc (t T) Error() string {\n    return &#34;bad error&#34;\n}\n\nfunc main() {\n    var t = T(5)\n\n    fmt.Printf(&#34;%d\\n&#34;, t) // 5\n    fmt.Printf(&#34;%v\\n&#34;, t) // bad error\n}\n\n\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656969942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329552,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1641397494,"is_pvip":false,"replies":[{"id":120470,"content":"好多人提出来了，后续定弄个加餐说说指针。不过需要把所有正文都更完后，编辑老师催的紧，你了解的:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642039187,"ip_address":"","comment_id":329552,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go 指针这块，感觉可以单独抽出一讲来讲下，并且结合unsafe 讲解，不知道大白老师能否满足大家的愿望呢？😂","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545680,"discussion_content":"好多人提出来了，后续定弄个加餐说说指针。不过需要把所有正文都更完后，编辑老师催的紧，你了解的:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642039187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336010,"user_name":"郑泽洲","can_delete":false,"product_type":"c1","uid":1447496,"ip_address":"","ucode":"EA1B540A040875","user_header":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","comment_is_top":false,"comment_ctime":1645846146,"is_pvip":false,"replies":[{"id":122861,"content":"好问题！\n\n假设按照你说的，interface中直接用原先的值，那么interface类型在runtime中的表示一定是(type, ptr)的二元组。而ptr指向原值的地址。这样的情况下，看个例子：\n\nfunc foo(i interface{}) {\n   i.(int) = 8\n}\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\nprintln(a) &#47;&#47; a = 7 这似乎还说得过去。\n\n但是如果将i传递给函数foo：\nfoo(i) \n\nfoo对i的修改将都反映到a上：\n\nprintln(a) &#47;&#47; a = 8\n\n这与值拷贝语义似乎有悖。\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645997675,"ip_address":"","comment_id":336010,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请教老师，接口类型装箱过程为什么普遍要把原来的值复制一份到data？（除了staticuint64s等特例）直接用原来的值不行吗，还能提升点性能","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545680,"discussion_content":"好多人提出来了，后续定弄个加餐说说指针。不过需要把所有正文都更完后，编辑老师催的紧，你了解的:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642039187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328497,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1640754043,"is_pvip":false,"replies":[{"id":120420,"content":"判相等不要看data指针的值，要看data指针指向的内存块中存储的值是否相同。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996683,"ip_address":"","comment_id":328497,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师您好，在   eif2 = 17 这个操作后，输出后的data  ,0xc00007ef48 和0x10eb3d0 不相等呀，为甚么说他们是一样的\neif1: (0x10ac580,0xc00007ef48)\neif2: (0x10ac580,0x10eb3d0)","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553623,"discussion_content":"好问题！\n\n假设按照你说的，interface中直接用原先的值，那么interface类型在runtime中的表示一定是(type, ptr)的二元组。而ptr指向原值的地址。这样的情况下，看个例子：\n\nfunc foo(i interface{}) {\n   i.(int) = 8\n}\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\nprintln(a) // a = 7 这似乎还说得过去。\n\n但是如果将i传递给函数foo：\nfoo(i) \n\nfoo对i的修改将都反映到a上：\n\nprintln(a) // a = 8\n\n这与值拷贝语义似乎有悖。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645997675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3198641,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFEQibKmCdPwFMncjfPFficY97fdnZWFxFbu8uze8REXB5S6gMtxRsESWibBmEFibBsaaj0ZkKmWPtEA/132","nickname":"义务教育漏网之鱼","note":"","ucode":"DE23BC762FD57B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":613496,"discussion_content":"那如果原值是个指针类型的，是不是就存在这个问题了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681358058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553623,"ip_address":"湖北","group_id":0},"score":613496,"extra":""}]},{"author":{"id":1447496,"avatar":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","nickname":"郑泽洲","note":"","ucode":"EA1B540A040875","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608628,"discussion_content":"谢谢老师解答。正在二刷，争取更深入掌握。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678547081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328971,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1640963983,"is_pvip":false,"replies":[{"id":120433,"content":"1. 没有啥特殊含义。我们自己写代码，不要用以下划线为前缀的命名方式。\n2. 指针加餐后续应该会加上。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997626,"ip_address":"","comment_id":328971,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"大白老师的这一节干货很多，读的意犹未尽。有几个疑惑点，麻烦老师解忧。\n\n1. 文中类似：“_type” 这种命名，前面加下划线，这种有什么含义呢？\n\n2. 文中关于打印两类接口内部详细信息的代码中，运用了大量的 * 还有 &amp; 再加上  unsafe.Pointer 的使用，看起来会非常困惑，希望老师后面能讲一讲Go的指针吧。刚从动态语言转过来，确实应该好好理解一下。不然后面写出来的代码一定会有很多潜在的风险。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545593,"discussion_content":"1. 没有啥特殊含义。我们自己写代码，不要用以下划线为前缀的命名方式。\n2. 指针加餐后续应该会加上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641997626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603565,"discussion_content":"在C语言时代，_开头的变量表明约定为内部变量，仅在文件内部使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676257565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376794,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1687421552,"is_pvip":false,"replies":[{"id":137357,"content":"这显然是“伪代码”。那个评论内容的前提是“假设按照你说的，interface中直接用原先的值”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1687504604,"ip_address":"美国","comment_id":376794,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"tony bai 老师，翻看评论留言中，发现有一处你是这样写的：\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\n\n通过前面的知识，i.(int)  是类型断言，通常是 v，ok := i.(int)，这里的 i.(int) = 7 该怎么理解呢？","like_count":2},{"had_liked":false,"id":362140,"user_name":"wu526","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"北京","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1668212525,"is_pvip":false,"replies":[{"id":131793,"content":"好问题！\n\n问题在于fmt.Printf函数！它在打印error接口类型的实例时，会调用该实例的Error方法以获得表示该error类型的字符串。\n\n在MyError未实现Error方法前，你说tab.fun也是有值的，这个值和你实现Error方法后的值一样么，我怀疑这个值是一个不可访问的地址。\n\n如果这个地址是不可访问的地址，那么Printf调用导致panic就合情合理了。\n\n但是当你手工实现了Error方法，那么这个tab.fun字段的值就应该是Error方法的合法地址，这时你Printf调用Error方法就不会报错。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668408521,"ip_address":"北京","comment_id":362140,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师我将 returnsErro()改为如下的方式,\nfunc returnsError() error {\n\tvar p MyError\n\treturn p\n}\n然后在main()中使用\nerr := returnsError()\nif err != nil {\n\tfmt.Printf(&quot;error :%+v\\n&quot;, err)  &#47;&#47; 输出: error :%!v(PANIC=Error method: runtime error: invalid memory address or nil pointer dereferenc\n}\n\n如果在MyError 显式实现 error的Error()函数, 就不会报错了, 即:\nfunc (MyError) Error() string {\n\treturn &quot;bad things happend&quot;\n}\n\n我用 dumpItabOfIface(unsafe.Pointer(&amp;err)) 查看一下输出, 发现不管是否显式实现 MyError 中的 Error(),\ntab.fun 字段都是有值的，因此就很疑惑为什么显式实现了 Error()就不会报错呢？ 麻烦白老师帮我解惑一下，谢谢~~","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621691,"discussion_content":"这显然是“伪代码”。那个评论内容的前提是“假设按照你说的，interface中直接用原先的值”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687504604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339739,"user_name":"Kepler","can_delete":false,"product_type":"c1","uid":1214303,"ip_address":"","ucode":"0C9CA3DB8B3CF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","comment_is_top":false,"comment_ctime":1648350084,"is_pvip":false,"replies":[{"id":124188,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648424893,"ip_address":"","comment_id":339739,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这篇有点高强度对抗啊","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558628,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648424893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330785,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1642159575,"is_pvip":true,"replies":[{"id":120907,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642412105,"ip_address":"","comment_id":330785,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"虽然是Go语言第一课，但这一部分讲得很深入，而且很厉害的一点是，把难以理解的技术细节隐藏的刚刚好，这一篇要再看几遍。白老师真是讲课的高手啊👍👍","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558628,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648424893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328616,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1640789677,"is_pvip":false,"replies":[{"id":120423,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996830,"ip_address":"","comment_id":328616,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"返回 *MyError 而不是 error","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545581,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641996830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543149,"discussion_content":"同学，你这回答感觉满分呀。哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640963629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369912,"user_name":"路边的猪","can_delete":false,"product_type":"c1","uid":2057354,"ip_address":"辽宁","ucode":"92F7C082E44FC4","user_header":"https://static001.geekbang.org/account/avatar/00/1f/64/8a/bc8cb43c.jpg","comment_is_top":false,"comment_ctime":1678117798,"is_pvip":false,"replies":[{"id":134876,"content":"“接口的动态特性，就体现在接口类型变量在运行时还存储了右值的真实类型信息，这个右值的真实类型被称为接口类型变量的动态类型”\n\n例子中输出了err的动态类型：*error.errorString！\n\n编译期能不能给err赋值是接口类型变量静态特性的体现。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1678226361,"ip_address":"辽宁","comment_id":369912,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var err error\nerr = errors.New(&quot;error1&quot;)\nfmt.Printf(&quot;%T\\n&quot;, err)  &#47;&#47; *errors.errorString\n\n为什么说这里的 errors.New(&quot;error1&quot;) 赋值给err 是体现动态性了呢？\nerrors.New(&quot;error1&quot;) 能不能赋值给 err 不是也是在编译阶段就能知道了吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545581,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641996830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543149,"discussion_content":"同学，你这回答感觉满分呀。哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640963629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368990,"user_name":"吃两块云","can_delete":false,"product_type":"c1","uid":2383857,"ip_address":"上海","ucode":"A50874612046AF","user_header":"https://static001.geekbang.org/account/avatar/00/24/5f/f1/c66c8c51.jpg","comment_is_top":false,"comment_ctime":1676975289,"is_pvip":false,"replies":[{"id":134374,"content":"哈哈哈哈，你太可爱了","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1676984618,"ip_address":"北京","comment_id":368990,"utype":2}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"实在是太干了，喝了两瓶水才咽下去。","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606167,"discussion_content":"哈哈哈哈，你太可爱了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676984618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361856,"user_name":"二进制傻瓜","can_delete":false,"product_type":"c1","uid":1073261,"ip_address":"北京","ucode":"FA8E76339CF512","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/6d/3c2a5143.jpg","comment_is_top":false,"comment_ctime":1667917467,"is_pvip":false,"replies":[{"id":131660,"content":"加油💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988478,"ip_address":"北京","comment_id":361856,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"木有看懂，还得多看几遍。","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606167,"discussion_content":"哈哈哈哈，你太可爱了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676984618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337682,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1646969577,"is_pvip":false,"replies":[{"id":123520,"content":"问题挺多，我粗略答一下：\n\n问题 1-3: 这就是一个例子，故意呈现出这样的效果。\n问题4: 没看明白。\n问题5: var p MyError这么初始化后，MyError类型里面的error为nil，导致panic\n问题6: 可以。\n问题7：是的。 ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647090268,"ip_address":"","comment_id":337682,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这篇文章看了好几遍，一直在纠结文章开头的那个代码示例看不懂\nfunc returnsError() error {    \n    var p *MyError = nil    \n    if bad() {\n        p = &amp;ErrBad\n    }\n    return p\n}\n1）通过returnsError函数是不是可以翻译成：该函数返回的是一个实现了error变量，而这个变量具体是什么类型的不清楚。\n2）为什么 使用 MyError 指针类型定义 p\n3）为什么返回的是 p（一个指向实现了error接口的指针？）\n4）既然接口的返回值是一个接口类型，那么只能确定使用该返回值的方法，而不是值，因为值并不确定是什么类型的，所以在使用值时必须先断言才能合理的使用其值（个人理解）。在main函数中直接使用返回值 == nil 判断，结果是不可预测的，可以是说是逻辑上是不允许的（为什么go的设计者不在编译的时候报错报错呢？这个应该可以判断的吧）。\n5）于是我把函数代码简化成下面这样\nfunc returnsError() error {\n\tvar p MyError\n\treturn p\n}\n然后在main函数中使用\nerr := returnsError()\nif err != nil {\n\tfmt.Printf(&quot;error occur: %+v\\n&quot;, err)\n\treturn\n}\n发现 err 包含运行时错误：\nerror occur: %!v(PANIC=Error method: runtime error: invalid memory address or nil pointer dereference) 无效内存地址或nil指针引用\n是不是因为函数返回的结果要求是error指针类型的，而函数返回的是空指针，空指针不是error类型的指针，所以报着个错呢？\n6）把returnsError 再次修改\nfunc returnsError() *MyError {\n\tvar p *MyError\n\treturn p\n}\n这样这样在main函数中就不会报错了，可以把main函数翻译成这样的人类语言对么? “通过returnsError获取 MyError类型的指针，如果这个指针不为空的话，则说明有错误返回”\n\n7）装箱&#47;拆箱 是不是就是解决接口类型参数在传输过程中，“动态”类型的问题？\n\n\n\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555877,"discussion_content":"问题挺多，我粗略答一下：\n\n问题 1-3: 这就是一个例子，故意呈现出这样的效果。\n问题4: 没看明白。\n问题5: var p MyError这么初始化后，MyError类型里面的error为nil，导致panic\n问题6: 可以。\n问题7：是的。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647090268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":2659871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","nickname":"ivhong","note":"","ucode":"9947B228807AC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555984,"discussion_content":"非常感谢老师百忙之中的回复，深深\n鞠躬🙇\n第四个问题我可能没表达清楚，在尝试表述一下：\n函数的返回值类型定义为“接口类型”，那么调用函数只能确定返回值是实现了“某接口”，从而能确定返回值可以使用哪些方法，而不能直接这么使用(返回值==nil)，因为返回值的具体类型不可预料，例如返回值是某结构体类型的话，结构体类型的变量是不能和nil作比较的。如果想使用返回值所代表“值”的含义，必须先断言，确定具体值得类型，才可以使用。\n例子中直接使用返回值和nil作比较，本身就不合理！\n我问得问题是：如果我理解的没问题的话，在编译阶段就可以确定接口类型返回值不能直接使用它的值，go的设计者怎么不这么做呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647157174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555877,"ip_address":"","group_id":0},"score":555984,"extra":""},{"author":{"id":1045910,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","nickname":"Aeins","note":"","ucode":"D5BF220767541D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2659871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","nickname":"ivhong","note":"","ucode":"9947B228807AC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574346,"discussion_content":"1. 接口支持和 nil 做比较。是合理的\n2. 如果需要接口中的动态值，用类型断言或者 type-switch（错误处理那章应该有）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653987616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555984,"ip_address":"","group_id":0},"score":574346,"extra":""},{"author":{"id":2029976,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f9/98/53740221.jpg","nickname":"齐大柱","note":"","ucode":"694BBCA988C1DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":575045,"discussion_content":"老师您好，您问题5的解答我有些疑惑：为何MyError类型里面的error为nil，就会导致panic呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654569323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555877,"ip_address":"","group_id":0},"score":575045,"extra":""}]}]},{"had_liked":false,"id":330322,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1641910810,"is_pvip":false,"replies":[{"id":121538,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442331,"ip_address":"","comment_id":330322,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"mark，回头在反复读，干货太多了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548900,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643442331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376794,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1687421552,"is_pvip":false,"replies":[{"id":137357,"content":"这显然是“伪代码”。那个评论内容的前提是“假设按照你说的，interface中直接用原先的值”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1687504604,"ip_address":"美国","comment_id":376794,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"tony bai 老师，翻看评论留言中，发现有一处你是这样写的：\n\nvar a int = 6\nvar i interface{} = a\ni.(int) = 7\n\n通过前面的知识，i.(int)  是类型断言，通常是 v，ok := i.(int)，这里的 i.(int) = 7 该怎么理解呢？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621691,"discussion_content":"这显然是“伪代码”。那个评论内容的前提是“假设按照你说的，interface中直接用原先的值”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687504604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362140,"user_name":"wu526","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"北京","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1668212525,"is_pvip":false,"replies":[{"id":131793,"content":"好问题！\n\n问题在于fmt.Printf函数！它在打印error接口类型的实例时，会调用该实例的Error方法以获得表示该error类型的字符串。\n\n在MyError未实现Error方法前，你说tab.fun也是有值的，这个值和你实现Error方法后的值一样么，我怀疑这个值是一个不可访问的地址。\n\n如果这个地址是不可访问的地址，那么Printf调用导致panic就合情合理了。\n\n但是当你手工实现了Error方法，那么这个tab.fun字段的值就应该是Error方法的合法地址，这时你Printf调用Error方法就不会报错。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668408521,"ip_address":"北京","comment_id":362140,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师我将 returnsErro()改为如下的方式,\nfunc returnsError() error {\n\tvar p MyError\n\treturn p\n}\n然后在main()中使用\nerr := returnsError()\nif err != nil {\n\tfmt.Printf(&quot;error :%+v\\n&quot;, err)  &#47;&#47; 输出: error :%!v(PANIC=Error method: runtime error: invalid memory address or nil pointer dereferenc\n}\n\n如果在MyError 显式实现 error的Error()函数, 就不会报错了, 即:\nfunc (MyError) Error() string {\n\treturn &quot;bad things happend&quot;\n}\n\n我用 dumpItabOfIface(unsafe.Pointer(&amp;err)) 查看一下输出, 发现不管是否显式实现 MyError 中的 Error(),\ntab.fun 字段都是有值的，因此就很疑惑为什么显式实现了 Error()就不会报错呢？ 麻烦白老师帮我解惑一下，谢谢~~","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593645,"discussion_content":"好问题！\n\n问题在于fmt.Printf函数！它在打印error接口类型的实例时，会调用该实例的Error方法以获得表示该error类型的字符串。\n\n在MyError未实现Error方法前，你说tab.fun也是有值的，这个值和你实现Error方法后的值一样么，我怀疑这个值是一个不可访问的地址。\n\n如果这个地址是不可访问的地址，那么Printf调用导致panic就合情合理了。\n\n但是当你手工实现了Error方法，那么这个tab.fun字段的值就应该是Error方法的合法地址，这时你Printf调用Error方法就不会报错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668408521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022129,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","nickname":"wu526","note":"","ucode":"69282EB175B48E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593791,"discussion_content":"谢谢老师的回复，这两个地址是不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668526827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339739,"user_name":"Kepler","can_delete":false,"product_type":"c1","uid":1214303,"ip_address":"","ucode":"0C9CA3DB8B3CF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","comment_is_top":false,"comment_ctime":1648350084,"is_pvip":false,"replies":[{"id":124188,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648424893,"ip_address":"","comment_id":339739,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这篇有点高强度对抗啊","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593645,"discussion_content":"好问题！\n\n问题在于fmt.Printf函数！它在打印error接口类型的实例时，会调用该实例的Error方法以获得表示该error类型的字符串。\n\n在MyError未实现Error方法前，你说tab.fun也是有值的，这个值和你实现Error方法后的值一样么，我怀疑这个值是一个不可访问的地址。\n\n如果这个地址是不可访问的地址，那么Printf调用导致panic就合情合理了。\n\n但是当你手工实现了Error方法，那么这个tab.fun字段的值就应该是Error方法的合法地址，这时你Printf调用Error方法就不会报错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668408521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022129,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","nickname":"wu526","note":"","ucode":"69282EB175B48E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593791,"discussion_content":"谢谢老师的回复，这两个地址是不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668526827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330785,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1642159575,"is_pvip":true,"replies":[{"id":120907,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642412105,"ip_address":"","comment_id":330785,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"虽然是Go语言第一课，但这一部分讲得很深入，而且很厉害的一点是，把难以理解的技术细节隐藏的刚刚好，这一篇要再看几遍。白老师真是讲课的高手啊👍👍","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546744,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642412105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328616,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1640789677,"is_pvip":false,"replies":[{"id":120423,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996830,"ip_address":"","comment_id":328616,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"返回 *MyError 而不是 error","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546744,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642412105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369912,"user_name":"路边的猪","can_delete":false,"product_type":"c1","uid":2057354,"ip_address":"辽宁","ucode":"92F7C082E44FC4","user_header":"https://static001.geekbang.org/account/avatar/00/1f/64/8a/bc8cb43c.jpg","comment_is_top":false,"comment_ctime":1678117798,"is_pvip":false,"replies":[{"id":134876,"content":"“接口的动态特性，就体现在接口类型变量在运行时还存储了右值的真实类型信息，这个右值的真实类型被称为接口类型变量的动态类型”\n\n例子中输出了err的动态类型：*error.errorString！\n\n编译期能不能给err赋值是接口类型变量静态特性的体现。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1678226361,"ip_address":"辽宁","comment_id":369912,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var err error\nerr = errors.New(&quot;error1&quot;)\nfmt.Printf(&quot;%T\\n&quot;, err)  &#47;&#47; *errors.errorString\n\n为什么说这里的 errors.New(&quot;error1&quot;) 赋值给err 是体现动态性了呢？\nerrors.New(&quot;error1&quot;) 能不能赋值给 err 不是也是在编译阶段就能知道了吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608019,"discussion_content":"“接口的动态特性，就体现在接口类型变量在运行时还存储了右值的真实类型信息，这个右值的真实类型被称为接口类型变量的动态类型”\n\n例子中输出了err的动态类型：*error.errorString！\n\n编译期能不能给err赋值是接口类型变量静态特性的体现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678226361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607891,"discussion_content":"是下面那句 `fmt.Printf(&#34;%T\\n&#34;, err)  // *errors.errorString` 体现了动态性吧，打印出了 err 的具体类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678178765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368990,"user_name":"吃两块云","can_delete":false,"product_type":"c1","uid":2383857,"ip_address":"上海","ucode":"A50874612046AF","user_header":"https://static001.geekbang.org/account/avatar/00/24/5f/f1/c66c8c51.jpg","comment_is_top":false,"comment_ctime":1676975289,"is_pvip":false,"replies":[{"id":134374,"content":"哈哈哈哈，你太可爱了","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1676984618,"ip_address":"北京","comment_id":368990,"utype":2}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"实在是太干了，喝了两瓶水才咽下去。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608019,"discussion_content":"“接口的动态特性，就体现在接口类型变量在运行时还存储了右值的真实类型信息，这个右值的真实类型被称为接口类型变量的动态类型”\n\n例子中输出了err的动态类型：*error.errorString！\n\n编译期能不能给err赋值是接口类型变量静态特性的体现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678226361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607891,"discussion_content":"是下面那句 `fmt.Printf(&#34;%T\\n&#34;, err)  // *errors.errorString` 体现了动态性吧，打印出了 err 的具体类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678178765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361856,"user_name":"二进制傻瓜","can_delete":false,"product_type":"c1","uid":1073261,"ip_address":"北京","ucode":"FA8E76339CF512","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/6d/3c2a5143.jpg","comment_is_top":false,"comment_ctime":1667917467,"is_pvip":false,"replies":[{"id":131660,"content":"加油💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988478,"ip_address":"北京","comment_id":361856,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"木有看懂，还得多看几遍。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593183,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667988478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337682,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1646969577,"is_pvip":false,"replies":[{"id":123520,"content":"问题挺多，我粗略答一下：\n\n问题 1-3: 这就是一个例子，故意呈现出这样的效果。\n问题4: 没看明白。\n问题5: var p MyError这么初始化后，MyError类型里面的error为nil，导致panic\n问题6: 可以。\n问题7：是的。 ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647090268,"ip_address":"","comment_id":337682,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这篇文章看了好几遍，一直在纠结文章开头的那个代码示例看不懂\nfunc returnsError() error {    \n    var p *MyError = nil    \n    if bad() {\n        p = &amp;ErrBad\n    }\n    return p\n}\n1）通过returnsError函数是不是可以翻译成：该函数返回的是一个实现了error变量，而这个变量具体是什么类型的不清楚。\n2）为什么 使用 MyError 指针类型定义 p\n3）为什么返回的是 p（一个指向实现了error接口的指针？）\n4）既然接口的返回值是一个接口类型，那么只能确定使用该返回值的方法，而不是值，因为值并不确定是什么类型的，所以在使用值时必须先断言才能合理的使用其值（个人理解）。在main函数中直接使用返回值 == nil 判断，结果是不可预测的，可以是说是逻辑上是不允许的（为什么go的设计者不在编译的时候报错报错呢？这个应该可以判断的吧）。\n5）于是我把函数代码简化成下面这样\nfunc returnsError() error {\n\tvar p MyError\n\treturn p\n}\n然后在main函数中使用\nerr := returnsError()\nif err != nil {\n\tfmt.Printf(&quot;error occur: %+v\\n&quot;, err)\n\treturn\n}\n发现 err 包含运行时错误：\nerror occur: %!v(PANIC=Error method: runtime error: invalid memory address or nil pointer dereference) 无效内存地址或nil指针引用\n是不是因为函数返回的结果要求是error指针类型的，而函数返回的是空指针，空指针不是error类型的指针，所以报着个错呢？\n6）把returnsError 再次修改\nfunc returnsError() *MyError {\n\tvar p *MyError\n\treturn p\n}\n这样这样在main函数中就不会报错了，可以把main函数翻译成这样的人类语言对么? “通过returnsError获取 MyError类型的指针，如果这个指针不为空的话，则说明有错误返回”\n\n7）装箱&#47;拆箱 是不是就是解决接口类型参数在传输过程中，“动态”类型的问题？\n\n\n\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593183,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667988478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330322,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1641910810,"is_pvip":false,"replies":[{"id":121538,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442331,"ip_address":"","comment_id":330322,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"mark，回头在反复读，干货太多了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555877,"discussion_content":"问题挺多，我粗略答一下：\n\n问题 1-3: 这就是一个例子，故意呈现出这样的效果。\n问题4: 没看明白。\n问题5: var p MyError这么初始化后，MyError类型里面的error为nil，导致panic\n问题6: 可以。\n问题7：是的。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647090268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":2659871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","nickname":"ivhong","note":"","ucode":"9947B228807AC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555984,"discussion_content":"非常感谢老师百忙之中的回复，深深\n鞠躬🙇\n第四个问题我可能没表达清楚，在尝试表述一下：\n函数的返回值类型定义为“接口类型”，那么调用函数只能确定返回值是实现了“某接口”，从而能确定返回值可以使用哪些方法，而不能直接这么使用(返回值==nil)，因为返回值的具体类型不可预料，例如返回值是某结构体类型的话，结构体类型的变量是不能和nil作比较的。如果想使用返回值所代表“值”的含义，必须先断言，确定具体值得类型，才可以使用。\n例子中直接使用返回值和nil作比较，本身就不合理！\n我问得问题是：如果我理解的没问题的话，在编译阶段就可以确定接口类型返回值不能直接使用它的值，go的设计者怎么不这么做呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647157174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555877,"ip_address":"","group_id":0},"score":555984,"extra":""},{"author":{"id":1045910,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","nickname":"Aeins","note":"","ucode":"D5BF220767541D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2659871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","nickname":"ivhong","note":"","ucode":"9947B228807AC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574346,"discussion_content":"1. 接口支持和 nil 做比较。是合理的\n2. 如果需要接口中的动态值，用类型断言或者 type-switch（错误处理那章应该有）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653987616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555984,"ip_address":"","group_id":0},"score":574346,"extra":""},{"author":{"id":2029976,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f9/98/53740221.jpg","nickname":"齐大柱","note":"","ucode":"694BBCA988C1DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":575045,"discussion_content":"老师您好，您问题5的解答我有些疑惑：为何MyError类型里面的error为nil，就会导致panic呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654569323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555877,"ip_address":"","group_id":0},"score":575045,"extra":""}]}]},{"had_liked":false,"id":328467,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1640746198,"is_pvip":true,"replies":[{"id":120406,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995550,"ip_address":"","comment_id":328467,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这次课很干。需要再学一遍","like_count":1},{"had_liked":false,"id":376771,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1687341502,"is_pvip":false,"replies":[{"id":137358,"content":"用新go版本编译并输出汇编可以看到使用了哪个runtime的函数。具体有什么优化，这个还没深入研究过。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1687504885,"ip_address":"美国","comment_id":376771,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony bai 老师，我在 go 1.18.3 版本中已经找不到 convT2E 和 convT2I 两个 runtime 包的函数了，老师能讲讲后来的版本中，这两个函数是被哪几个函数取代了吗？ 做了什么优化。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621692,"discussion_content":"用新go版本编译并输出汇编可以看到使用了哪个runtime的函数。具体有什么优化，这个还没深入研究过。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687504885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329239,"user_name":"Bynow","can_delete":false,"product_type":"c1","uid":2735072,"ip_address":"","ucode":"1E4F3ADD65CF18","user_header":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","comment_is_top":false,"comment_ctime":1641233217,"is_pvip":false,"replies":[{"id":120438,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998818,"ip_address":"","comment_id":329239,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"将 returnsError 返回签名更改为 *MyError ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545599,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329071,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1641094203,"is_pvip":false,"replies":[{"id":120128,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641540895,"ip_address":"","comment_id":329071,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这节学到很多！","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545599,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641998818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366218,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"湖南","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1673490479,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":" 装箱 inerface=struct 和前面说的 i.(T) 好像一对反操作","like_count":2},{"had_liked":false,"id":358678,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"福建","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1664532180,"is_pvip":true,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"nil error ！= nil的价值是啥，data为空，itab有类型信息的接口变量这种东西有什么具体使用场景吗？ 如果只是因为实现的原因，我觉得就是go在挖坑，典型的违背了直觉啊","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544500,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641540896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390732,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1716116291,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节通过一个接口变量赋值为nil和nil比较不相等的例子引出了接口类型运行时的细节\n1、接口类型会根据空接口和非空接口采用两种不同的结构体表示（eface和iface）\n2、前者记录了动态类型的类型信息（_type)还有动态类型的数值引用；后者不仅要记录接口的信息，同时还要记录（_type动态类型的结构）\n3、接口类型的比较需要_type和data引用都完全一致才相等，但是要注意，如果是空接口和非空接口比较，会采用非空接口的_type变量进行比较，data字段如果是指针类型则会解指针判断，如果是非指针类型则直接比较\n4、接口类型变量赋值的本质是一个装箱操作，赋值后等式右端的变量data域会进行拷贝，有性能开销，这点需要注意。\n\n思考题：\n1、通过明确的类型返回避免自动装箱\n2、通过类型断言来避免直接==nil","like_count":0,"discussions":[{"author":{"id":1270612,"avatar":"https://static001.geekbang.org/account/avatar/00/13/63/54/84e7c168.jpg","nickname":"g4","note":"","ucode":"EFA0709EFDF4DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616682,"discussion_content":"设计缺陷？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683082972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328467,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1640746198,"is_pvip":true,"replies":[{"id":120406,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641995550,"ip_address":"","comment_id":328467,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这次课很干。需要再学一遍","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545556,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376771,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1687341502,"is_pvip":false,"replies":[{"id":137358,"content":"用新go版本编译并输出汇编可以看到使用了哪个runtime的函数。具体有什么优化，这个还没深入研究过。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1687504885,"ip_address":"美国","comment_id":376771,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony bai 老师，我在 go 1.18.3 版本中已经找不到 convT2E 和 convT2I 两个 runtime 包的函数了，老师能讲讲后来的版本中，这两个函数是被哪几个函数取代了吗？ 做了什么优化。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545556,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641995550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329239,"user_name":"Bynow","can_delete":false,"product_type":"c1","uid":2735072,"ip_address":"","ucode":"1E4F3ADD65CF18","user_header":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","comment_is_top":false,"comment_ctime":1641233217,"is_pvip":false,"replies":[{"id":120438,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641998818,"ip_address":"","comment_id":329239,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"将 returnsError 返回签名更改为 *MyError ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621692,"discussion_content":"用新go版本编译并输出汇编可以看到使用了哪个runtime的函数。具体有什么优化，这个还没深入研究过。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687504885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329071,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1641094203,"is_pvip":false,"replies":[{"id":120128,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641540895,"ip_address":"","comment_id":329071,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这节学到很多！","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544500,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641540896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366218,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"湖南","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1673490479,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":" 装箱 inerface=struct 和前面说的 i.(T) 好像一对反操作","like_count":2},{"had_liked":false,"id":358678,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"福建","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1664532180,"is_pvip":true,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"nil error ！= nil的价值是啥，data为空，itab有类型信息的接口变量这种东西有什么具体使用场景吗？ 如果只是因为实现的原因，我觉得就是go在挖坑，典型的违背了直觉啊","like_count":2,"discussions":[{"author":{"id":1270612,"avatar":"https://static001.geekbang.org/account/avatar/00/13/63/54/84e7c168.jpg","nickname":"g4","note":"","ucode":"EFA0709EFDF4DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616682,"discussion_content":"设计缺陷？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683082972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390732,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1716116291,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节通过一个接口变量赋值为nil和nil比较不相等的例子引出了接口类型运行时的细节\n1、接口类型会根据空接口和非空接口采用两种不同的结构体表示（eface和iface）\n2、前者记录了动态类型的类型信息（_type)还有动态类型的数值引用；后者不仅要记录接口的信息，同时还要记录（_type动态类型的结构）\n3、接口类型的比较需要_type和data引用都完全一致才相等，但是要注意，如果是空接口和非空接口比较，会采用非空接口的_type变量进行比较，data字段如果是指针类型则会解指针判断，如果是非指针类型则直接比较\n4、接口类型变量赋值的本质是一个装箱操作，赋值后等式右端的变量data域会进行拷贝，有性能开销，这点需要注意。\n\n思考题：\n1、通过明确的类型返回避免自动装箱\n2、通过类型断言来避免直接==nil","like_count":0}]}