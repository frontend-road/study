{"id":256765,"title":"学习路径 | 分布式协议与算法你应该这么学","content":"<p>你好，我是韩健。</p><p>在正式开始学习这门课之前，我想先和你聊一聊怎么学，因为掌握了学习路径、建立了全局观之后，你才能达到事半功倍的效果。</p><p>我们都知道，分布式协议和算法（为了不啰嗦，咱们下文都简称分布式算法）很实用、也很火，很多后端工程师在面试的时候，都会被问及分布式、高可用、一致性这些专业名词背后的算法原理和实现方式。</p><p>但是分布式算法也是比较新的，快速发展的。比如，1989年莱斯利·兰伯特（Leslie Lamport）提出了Paxos，2006年，谷歌研发团队让Paxos在生产环境中落地，但是Paxos缺乏编程实现的必须细节，最终的算法实现仍是建立在一个未证明的算法之上。再后来，也就是到了2013，斯坦福大学的迭戈·安加罗（Diego Ongaro）和约翰·奥斯特霍德（John Ousterhout）提出了Raft，但是2016年，Raft仍在解决成员变更的Bug。</p><p>正因为技术比较新，所以尚未能沉淀为书，很多同学都找不到分布式算法方面的经典书籍，再加上互联网上中文资料错误多，他们在学习相关的分布式算法的时候，会觉得吃力和困惑。</p><p>那么，如何才能掌握一个相对新、而且又在蓬勃快速发展的技术知识呢？这就是我这节课想要跟你分享的内容：<strong>如何高效地学习和掌握分布式算法？</strong></p><!-- [[[read_end]]] --><p>在我看来，开发分布式系统最关键的就是根据场景特点，选择合适的算法，在一致性和可用性之间妥协折中，而妥协折中的关键就在于能否理解各算法的特点。</p><p>也就是说，我们先要弄清楚每个算法的特点是什么，适合怎样的场景，这样当你在开发分布式系统时，才能做到心中有数，游刃有余地选择适合的算法，来解决实际场景的问题。</p><p>那么问题来了：这些算法究竟有什么特点？适合怎样的场景呢？</p><h2>分布式算法的四度空间</h2><p>为了帮你更好地理解最常用的分布式算法的特点，我从拜占庭容错、一致性、性能和可用性四个纬度帮你整理了一张表，你可以对照着看一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/33/1cc7514e341fab7bd7044b37285f4433.jpg?wh=1142*785\" alt=\"\"></p><h2>拜占庭容错</h2><p>拜占庭错误是莱斯利·兰伯特在《拜占庭将军问题》中提出的一个错误模型，描述了一个完全不可信的场景，除了存在故障行为，还存在恶意行为。顾名思义，拜占庭容错（Byzantine Fault Tolerance，BFT），就是指能容忍拜占庭错误了。</p><p>而非拜占庭容错，又叫故障容错（Crash Fault Tolerance，CFT），解决的是分布式系统中存在故障，但不存在恶意节点的共识问题，比如进程崩溃、服务器硬件故障等。</p><p>一般而言，在可信环境（比如企业内网）中，系统具有故障容错能力就可以了，常见的算法有二阶段提交协议（2PC）、TCC（Try-Confirm-Cancel）、Paxos算法、ZAB协议、Raft算法、Gossip协议、Quorum NWR算法。</p><p>而在不可信的环境（比如有人做恶）中，这时系统需要具备拜占庭容错能力，常见的拜占庭容错算法有POW算法、PBFT算法。</p><h2>一致性</h2><p>一般来讲，我们将一致性分为三类。</p><ul>\n<li>强一致性：保证写操作完成后，任何后续访问都能读到更新后的值。</li>\n<li>弱一致性：写操作完成后，系统不能保证后续的访问都能读到更新后的值。</li>\n<li>最终一致性：保证如果对某个对象没有新的写操作了，最终所有后续访问都能读到相同的最近更新的值。</li>\n</ul><p>但是我要提醒你注意，强一致性是具有多种含义的。</p><p>首先，在埃里克·布鲁尔的猜想中，CAP中的强一致性（也就是C）是指ACID的C，系统状态的一致性，而这种一致性，可以通过二阶段提交协议来实现。</p><p>其次，在CAP定理中，CAP中的强一致性（也就是C）是指原子一致性（也就是线性一致性）。其中，Paxos、Raft能实现线性一致性，而ZooKeeper基于读性能的考虑，它通过ZAB协议提供的是最终一致性。</p><p>一般而言，在需要系统状态的一致性时，你可以考虑采用二阶段提交协议、TCC。在需要数据访问是的强一致性时，你可考虑Raft算法。在可用性优先的系统，你可以采用Gossip协议来实现最终一致性，并实现Quorum NWR来提供强一致性。</p><h2>可用性</h2><p>可用性说的是任何来自客户端的请求，不管访问哪个非故障节点，都能得到响应数据，但不保证是同一份最新数据，可用性强调的是服务可用。</p><p>一般来讲，采用Gossip协议实现最终一致性系统，它的可用性是最高的，因为哪怕只有一个节点，集群还能在运行并提供服务。其次是Paxos算法、ZAB协议、Raft算法、Quorum NWR算法、PBFT算法、POW算法，它们能容忍一定数节点故障。</p><p>最后是二阶段提交协议、TCC，只有当所有节点都在运行时，才能工作，可用性最低。</p><h2>性能</h2><p>一般来讲，采用Gossip协议的AP型分布式系统，具备水平扩展能力，读写性能是最高的。其次是Paxos算法、ZAB协议、Raft算法，因为它们都是领导者模型，写性能受限于领导者，读性能取决于一致性实现。最后是二阶段提交协议和TCC，因为在实现事务时，需要预留和锁定资源，性能相对低。</p><p>以上就是这些算法的特点了，了解完这部分内容之后，我想你一定有这样的疑问：“老韩，这些算法看起来很深奥，我怎样才能搞懂它们呢？按部就班的学吗？”</p><p>根据我多年的经验，你之所以觉得这些算法和相关的分布式技术，学起来比较难，是因为它们比较新，缺乏体系化。如果这时有个全景图，帮你建立全局观，那么你就可以体系化的理解相关算法了，在提高学习效率同时，也能在实际场景中“按图索骥”的选用相关的算法，而这些就是我接下来想和你具体聊一聊的。</p><h2>专栏内容该如何学？</h2><p><strong>拜占庭将军问题：最复杂的分布式容错模型</strong><br>\n<strong>难度：</strong>一颗星<br>\n<strong>学习材料：</strong> 01讲、加餐 | 拜占庭将军问题：如何基于签名消息实现作战计划的一致性？</p><p>拜占庭容错是分布式领域最复杂的容错模型，是你必须要了解的。另外，口信消息型拜占庭问题之解、签名消息型拜占庭问题之解，你可以通过预设不同的忠将数、叛将数，来推演下，在推演中学习和掌握。</p><p><strong>CAP理论：酸碱平衡之道</strong><br>\n<strong>难度：</strong> 二颗星<br>\n<strong>学习材料：</strong> 02讲、03讲、04讲</p><p>学习CAP理论的关键，不是仅仅知道CAP不可能三角，而是要能在C和A之间，根据实际场景特点，妥协权衡折中。这也是CAP猜想提出的初衷，希望业界能重视可用性，而不是只考虑ACID。</p><p><strong>分布式事务：进退与共</strong><br>\n<strong>难度：</strong> 二颗星<br>\n<strong>学习材料：</strong> 03讲，加餐 | MySQL XA是如何实现分布式事务的，加餐 | TCC如何实现指令的原子性</p><p>事务是指具有ACID特性的一组操作，要么全部执行，要么全部不执行，实现的是系统状态的一致性。一般在支付，或其他需要原子操作的场景下比较常用。</p><p>实现分布式事务，最常用的方法是二阶段提交协议和TCC，这两个算法的适用场景是不同的，二阶段提交协议实现的是数据层面的事务，比如XA规范采用的就是二阶段提交协议；TCC实现的是业务层面的事务，比如当操作不仅仅是数据库操作，还涉及其他业务系统的访问操作时，这时就应该考虑TCC了。</p><p><strong>分布式强一致性：你必须给我最新的数据</strong><br>\n<strong>难度：</strong> 五颗星<br>\n<strong>学习内容：</strong> 05讲、06讲、07讲、08讲、09讲、10讲。</p><p>很多同学经常误解的一个点，就是将Consensus（共识）当成了一致性，也就是称为Paxos、Raft为一致性算法，其实Paxos和Raft是共识算法。而之所以出现这个问题，是因为在很多中文文章中，将Consensus和Consistency都翻译成了一致性，其实这样是不合适的，因为共识（Consensus）和一致性（Consistency）是两个完全不同的概念。</p><ul>\n<li>共识：各节点就指定值（Value）达成共识，而且达成共识后的值，就不再改变了。</li>\n<li>一致性：是指写操作完成后，能否从各节点上读到最新写入的数据，如果立即能读到，就是强一致性，如果最终能读到，就是最终一致性。</li>\n</ul><p>提到共识算法，Paxos是一个必须要提及的话题，而且ZAB协议、Raft算法都可以看作是Paxos变种，所以，你需要了解Paxos算法。</p><p>但因为Paxos算法的可理解性和可编程性痛点突出，所以在实际场景中，最常的共识算法是Raft，我们可以基于Raft实现强一致性系统，Raft是需要彻底掌握的，在学习时，你可以结合17讲、18讲、19讲、20讲来一起学习，从前传（Paxos）到理论，再到实战，彻底吃透和掌握。</p><p>而一致哈希是常用的寻址算法，能突破集群性能的领导者限制，也是需要我们掌握的。</p><p><strong>分布式最终一致性：数据旧点没关系</strong><br>\n<strong>难度：</strong>三颗星<br>\n<strong>学习材料：</strong> 11讲、12讲。</p><p>无论实现分布式事务还是强一致性，性能和可用性都是挑战，在一些对性能或可用性要求比较高的场景，比如时序数据、统计数据、状态数据（QQ登录状态），最终一致性是首选，因为最终一致性系统不仅能提供出色的性能，还能实现水平扩展。而Gossip协议是实现最终一致性的常用方法。</p><p>如果实现了最终一致性，但有时可能需要临时提供强一致性能力，这个时候，你可以用Quorum NWR来实现。</p><p><strong>ZAB协议：ZooKeeper背后的一致性秘密</strong><br>\n<strong>难度：</strong> 二颗星<br>\n<strong>学习材料：</strong> 15讲，加餐 | ZAB协议（一）：主节点崩溃了，怎么办？加餐 | ZAB协议（二）：如何从故障中恢复？加餐 | ZAB协议（三）：如何处理读写请求？</p><p>ZooKeeper是一个常用的分布式协调服务，而且ZAB协议在共识算法的发展过程中起到了一个承前启后的作用，它受Paxos算法、原子广播协议的启发，又影响到后来的Raft算法。但从实战的角度，ZAB协议的实现，无法剥离ZooKeeper代码独立使用，<strong>所以这部分内容，我建议日常使用ZooKeeper的同学仔细学习一下，其他同学的话，可以选学。</strong></p><p><strong>拜占庭容错算法：有人作恶，如何达成共识</strong><br>\n<strong>难度：</strong> 二颗星<br>\n<strong>学习材料：</strong> 13讲、14讲，加餐 | PBFT算法：如何替换作恶的领导者？</p><p>在一个完全不可信的环境中（比如有人作恶），如果需要达成共识，那么我们就必须考虑拜占庭容错算法，常用的拜占庭容错算法有POW算法、PBFT算法，它们在区块链中应用广泛。</p><p><strong>实战：实践是最好的学习方式</strong><br>\n<strong>难度：</strong>四颗星<br>\n<strong>学习材料：</strong> 16讲、17讲、18讲、19讲、20讲。</p><p>你可能有这样的体会，技术的学习往往是在模仿中开始的，在实战中顿悟升华。分布式算法的学习也不例外，技术是需要在实战中学习，也只有在实战中，你才能真正的理解技术。</p><p>他山之石，可以攻玉，为了帮助你更好地理解实际场景中一致性的实现，我会剖析InfluxDB企业版的一致性实现（强一致性和最终一致性两个方案）。也会分析一个流行的Raft实现（Hashicorp Raft），除了在代码中理解Raft算法，也会带你熟悉一下Hashicorp Raft的API接口，最终在19、20讲，带你使用API接口开发实现自己的分布式KV系统。</p><p>我啰嗦了那么多，其实就是为了让你更高效地掌握常用的分布式算法。另外，为了帮你更好的理解算法的特点和整体学习的思路，我做了个知识地图，方便你梳理整个知识体系。</p><p><img src=\"https://static001.geekbang.org/resource/image/12/13/122bdf34957c6277352ea51c43552213.png?wh=3094*1824\" alt=\"\"></p><h2>总结</h2><p>生有涯知无涯，只有抓住技术本质，才能举一反三，以不变应万变。而本课程我带你了解的这些算法和理论，都是最经典和经得起时间检验的。</p><p>但学习的过程绝不会一帆风顺，如果你在学习过程中有困惑、茫然，甚至是沮丧，希望你能多留言，咱们聊一聊，一起想想办法，<strong>让我们把分布式算法学习这件意义非凡的事情坚持下去，一起攻克分布式系统设计的关键难题。</strong></p><p>现在，就让我们正式开始分布式算法之旅吧！一起享受技术的乐趣。</p>","neighbors":{"left":{"article_title":"开篇词 | 想成为分布式高手？那就先把协议和算法烂熟于心吧","id":195652},"right":{"article_title":"01 | 拜占庭将军问题：有叛徒的情况下，如何才能达成共识？","id":195662}},"comments":[{"had_liked":false,"id":252126,"user_name":"小何","can_delete":false,"product_type":"c1","uid":1067516,"ip_address":"","ucode":"EFD72AB3CA2AF7","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/fc/5627215c.jpg","comment_is_top":false,"comment_ctime":1602134534,"is_pvip":true,"replies":[{"id":"92160","content":"加一颗星:)，系统状态的一致性，可以理解为操作要么全部成功，要么全部失败，各节点处于一个一致的状态；数据访问的一致性，可以理解为写操作完成后，能否读取到最新数据，如果写操作完成后，读操作都能读取到最新数据，那么就是强一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602226970,"ip_address":"","comment_id":252126,"utype":1}],"discussion_count":5,"race_medal":0,"score":"70321611270","product_id":100046101,"comment_content":"“一般而言，在需要系统状态的一致性时，你可以考虑采用二阶段提交协议、TCC。在需要数据访问是的强一致性时，你可考虑 Raft 算法。在可用性优先的系统，你可以采用 Gossip 协议来实现最终一致性，并实现 Quorum NWR 来提供强一致性。”<br>老师，能解释一下上文中的需要系统状态的一致性和数据访问的一致性？","like_count":16,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506722,"discussion_content":"加一颗星:)，系统状态的一致性，可以理解为操作要么全部成功，要么全部失败，各节点处于一个一致的状态；数据访问的一致性，可以理解为写操作完成后，能否读取到最新数据，如果写操作完成后，读操作都能读取到最新数据，那么就是强一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602226970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1219258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9a/ba/f5eb2a66.jpg","nickname":"咕噜男爵-Tony","note":"","ucode":"8C841851AC767F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":552172,"discussion_content":"埃里克·布鲁尔的猜想 和 CAP定理不是一回事吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645336630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":506722,"ip_address":""},"score":552172,"extra":""}]},{"author":{"id":1522824,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3c/88/e83528da.jpg","nickname":"uking","note":"","ucode":"41005AC547327B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344828,"discussion_content":"对，这么解释的话是不是更应该理解为原子性，是不是要换个方式理解下：以前我们所讲的原子性是指单机中对数据操作的原子性，对数据更新的一组操作在单机的数据库系统中要么全部执行，要么全部不执行，而这里所讲的是分布式系统中的节点，要么在所有节点中都成功，要么在所有节点中都失败","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611581265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298018,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3Mf5ickZ4gwXXM0kO04EtWY6icTswVNSg1H8bhy72b5ErNjbmKkawcneovickGfmK1OkfhfIZ2Fib77e2uLIsiaH4aw/132","nickname":"lcken","note":"","ucode":"9F7CD55370D94B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338710,"discussion_content":"“系统状态的一致性，可以理解为操作要么全部成功，要么全部失败，各节点处于一个一致的状态。 ”这不应该是原子性吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609343101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111985,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","nickname":"Frank","note":"","ucode":"9DADD72C193296","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1298018,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3Mf5ickZ4gwXXM0kO04EtWY6icTswVNSg1H8bhy72b5ErNjbmKkawcneovickGfmK1OkfhfIZ2Fib77e2uLIsiaH4aw/132","nickname":"lcken","note":"","ucode":"9F7CD55370D94B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550418,"discussion_content":"像，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644539866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338710,"ip_address":""},"score":550418,"extra":""}]}]},{"had_liked":false,"id":289720,"user_name":"赵学习","can_delete":false,"product_type":"c1","uid":1829065,"ip_address":"","ucode":"2B660A158C4C3E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/x3cpRvAjkpyCiaibTJlvhlaE6g5XUgDYH24ZISWzZUO5mDkfW0fPJJDWnwa8V6c3FYxnVasFMTGc4xqaoWkuXXsA/132","comment_is_top":false,"comment_ctime":1619153698,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57453728546","product_id":100046101,"comment_content":"为什么大多数人都说zk是cp的，有说强一致的，又说顺序一致的，这里又说zab是最终一致的，希望后面阅读中能找到合适的答案！","like_count":13,"discussions":[{"author":{"id":1120408,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/98/6567af28.jpg","nickname":"胡雪松","note":"","ucode":"958103BCC03C65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384427,"discussion_content":"弄明白了吗？我看到也很纳闷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626587834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1693576,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","nickname":"庄周梦蝶","note":"","ucode":"7878ED3EB11E97","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379006,"discussion_content":"老师怎么不解答下咧 ，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623586402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296536,"user_name":"离境”","can_delete":false,"product_type":"c1","uid":1895314,"ip_address":"","ucode":"7186EF2BEF8956","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/STqKg1kLgvRuduQfo0R2E2osYBian7XrQAjSWmOwL9nyZVhq7vyLPnlGcgvguFV4aV7ToWLFiauEMKy96KWHKBVg/132","comment_is_top":false,"comment_ctime":1623034047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14507935935","product_id":100046101,"comment_content":"之前看其他文章，搞得自己云里雾里的，希望在这拨开云雾","like_count":3},{"had_liked":false,"id":245045,"user_name":"--","can_delete":false,"product_type":"c1","uid":1075167,"ip_address":"","ucode":"A262E3991E69DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/df/8b85d0d9.jpg","comment_is_top":false,"comment_ctime":1598794124,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10188728716","product_id":100046101,"comment_content":"我觉得线性一致性有点绕，所以补充一个线性一致性的说明：https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Consistency_model#Sequential_consistency<br>线性一致性是属于强一致性的，但是它是“稍弱”的强一致性，因为在算法系统的内部，写操作的提交并不是所有的节点都是同时应用的。而系统状态的一致性，写操作的提交是同时应用的，所以它是“稍强”的一致性。之所以说它们都是强一致的，那是因为一致性是对外部系统访问算法系统而言，只有写操作提交之后，外部系统都能读取到最新的值。如有不正确之处，麻烦指教。","like_count":2,"discussions":[{"author":{"id":1075167,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/df/8b85d0d9.jpg","nickname":"--","note":"","ucode":"A262E3991E69DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310346,"discussion_content":"我对线性一致性的理解是写操作的提交不需要所有节点同时进行。你举的第一个例子是强一致的，只有所有的节点都成功才能返回成功。第二个例子是线性一致性的，比如主从是半同步的一主三从，等待的ack是2，那么只需要两个从写成功就行了，不需要三个都成功。强一致比线性一致性要求高说的是如果你要写成功的话，强一致要求所有都写成功，而线性一致性不需要所有写成功。你的第一个例子说的一个失败就能返回没错，但是支付这件事没成功啊。假设是有一台机器宕机了，那么第一个例子一直都不能成功，而第二个例子却能成功，所以说第二个例子的可用性是更强的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601788728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512642,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","nickname":"侧耳倾听","note":"","ucode":"5BF2A2440B54F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302935,"discussion_content":"我觉得你说的有些模糊，我对于你的评论的理解，线性一致性中所谓的线性是指什么？对于分布式系统，比如支付，垂直划分为多个服务，每个服务一块业务，你完成一次支付需要通过ABCD服务后返回给用户支付完成，这四个服务的数据需要强一致性，其中任何一方失败都为支付失败。而所谓的系统一致性是类似于数据库主从，修改主库后数据同步给从库，在这一整个系统内数据保持一致性。从这来看反而线性一致性对数据强一致性要求更高，系统一致性反而低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599092662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297506,"user_name":"庄周梦蝶","can_delete":false,"product_type":"c1","uid":1693576,"ip_address":"","ucode":"7878ED3EB11E97","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","comment_is_top":false,"comment_ctime":1623586165,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5918553461","product_id":100046101,"comment_content":"老师分布式的脑裂问题、羊群问题能讲讲吗？面试中经常问到","like_count":1,"discussions":[{"author":{"id":1010914,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIgYQgM25OaLGNWPUg5NSrQuCrPNicHqNgB9lsJGMalNU18sibF4cdYxKPuwgVsIc1m5ha5voHrY9Lg/132","nickname":"jacoffee","note":"","ucode":"B3BFD39138400B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569357,"discussion_content":"基于个人的理解:\n1. 脑裂问题(split-brain)，一般是因leader选举而导致某种情况下集群中出现了两个leader，比如说老的leader因为通讯或者其它故障未定时上报状态。一般会通过fencing的策略，来拒绝老的leader操作以避免数据不一，比如说HDFS中会利用epoch(可以简单理解为版本号)来避免老的leader向Journal Node中写入改动。\n2. 羊群效应(herd effect)，第一次接触这个概念是在Zookeeper的leader选举中，当未能成为/election/路径下最小的瞬时节点时，这个时候就需要监听leader node对应的路径，但如果客户端同时监听的话，当leader node释放或者是挂掉的时候，多个客户端会同时收到通知，这个就称之为羊群效应。Zookeeper的改进方案是，未能成leader客户端，监听/election路径下比自己小的znode。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651413370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239122,"user_name":"ONENESS2019","can_delete":false,"product_type":"c1","uid":1501620,"ip_address":"","ucode":"F8CCF2118B29D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/UyjYSHTkMsqodhBJlbzL01Y3tRklSQzleSRbWvwZcYdTdGiczJEJT8dbTfrmcTFicEhMIEaSaeN4zCjNP1WUG2fg/132","comment_is_top":false,"comment_ctime":1596441230,"is_pvip":false,"replies":[{"id":"97183","content":"加一颗星:)，TCC最终一致性，指的是系统状态的最终一致。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1607849148,"ip_address":"","comment_id":239122,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5891408526","product_id":100046101,"comment_content":"在四度空间的表格中，TCC应该是强一致性吧。在一致性标题下，还强调了强一致性的两种不用理解。前后有矛盾呀","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502989,"discussion_content":"加一颗星:)，TCC最终一致性，指的是系统状态的最终一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607849148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084291,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","nickname":"路人","note":"","ucode":"55FF703DE772D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299973,"discussion_content":"tcc是最终一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597891478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355637,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"广东","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1661580171,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661580171","product_id":100046101,"comment_content":"现在，raft还有bug吗？","like_count":0},{"had_liked":false,"id":347305,"user_name":"逍遥","can_delete":false,"product_type":"c1","uid":1013003,"ip_address":"","ucode":"570969BCFC96EF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/0b/553d4ec4.jpg","comment_is_top":false,"comment_ctime":1653913661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653913661","product_id":100046101,"comment_content":"读了两边，还是有点懵逼，但是觉得很有料。期待下个月重读的时候能有很深入的理解！","like_count":0},{"had_liked":false,"id":325370,"user_name":"零零玲","can_delete":false,"product_type":"c1","uid":2326769,"ip_address":"","ucode":"F993CC91AF3FE1","user_header":"","comment_is_top":false,"comment_ctime":1638933570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638933570","product_id":100046101,"comment_content":"老师，是否可以理解为可用性高的协议性能也一定高？？","like_count":0},{"had_liked":false,"id":318419,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1635296699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635296699","product_id":100046101,"comment_content":"棒棒的，系统整理各个算法区别和学习方法，收货多","like_count":0},{"had_liked":false,"id":295676,"user_name":"Dear。","can_delete":false,"product_type":"c1","uid":1035607,"ip_address":"","ucode":"FF9BD22F77CE8C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/57/94d49207.jpg","comment_is_top":false,"comment_ctime":1622540659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622540659","product_id":100046101,"comment_content":"「CAP关注的是数据」这个说法成立吗","like_count":0},{"had_liked":false,"id":274418,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1611018010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611018010","product_id":100046101,"comment_content":"系统状态一致性是指原子性吧","like_count":0},{"had_liked":false,"id":231987,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1593821440,"is_pvip":false,"replies":[{"id":"86545","content":"加一颗星:)，学而时习之不亦说乎，有问题多留言，咱们多交流。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1594742318,"ip_address":"","comment_id":231987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593821440","product_id":100046101,"comment_content":"😂😂在回头看的时候，发现自己只记得大概。正好复习下。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500465,"discussion_content":"加一颗星:)，学而时习之不亦说乎，有问题多留言，咱们多交流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594742318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231571,"user_name":"Geek.Kwok","can_delete":false,"product_type":"c1","uid":1043668,"ip_address":"","ucode":"80D38825D990F9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/d4/8f877895.jpg","comment_is_top":false,"comment_ctime":1593713148,"is_pvip":false,"replies":[{"id":"86335","content":"学习中，遇到问题，多留言交流，一起解决:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1594558596,"ip_address":"","comment_id":231571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593713148","product_id":100046101,"comment_content":"老师的总结很棒，给我们指明了学习和实践的框架","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500353,"discussion_content":"学习中，遇到问题，多留言交流，一起解决:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594558596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231523,"user_name":"任禹潼","can_delete":false,"product_type":"c1","uid":1369245,"ip_address":"","ucode":"BFDD83CA34E202","user_header":"","comment_is_top":false,"comment_ctime":1593697643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593697643","product_id":100046101,"comment_content":"必须给个赞","like_count":0},{"had_liked":false,"id":231474,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1593682564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593682564","product_id":100046101,"comment_content":"老师，这个加餐点赞！","like_count":0}]}