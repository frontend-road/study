{"id":132477,"title":"54 | 理解Disruptor（上）：带你体会CPU高速缓存的风驰电掣","content":"<p>坚持到底就是胜利，终于我们一起来到了专栏的最后一个主题。让我一起带你来看一看，CPU到底能有多快。在接下来的两讲里，我会带你一起来看一个开源项目Disruptor。看看我们怎么利用CPU和高速缓存的硬件特性，来设计一个对于性能有极限追求的系统。</p><p>不知道你还记不记得，在<a href=\"https://time.geekbang.org/column/article/107477\">第37讲</a>里，为了优化4毫秒专门铺设光纤的故事。实际上，最在意极限性能的并不是互联网公司，而是高频交易公司。我们今天讲解的Disruptor就是由一家专门做高频交易的公司LMAX开源出来的。</p><p>有意思的是，Disruptor的开发语言，并不是很多人心目中最容易做到性能极限的C/C++，而是性能受限于JVM的Java。这到底是怎么一回事呢？那通过这一讲，你就能体会到，其实只要通晓硬件层面的原理，即使是像Java这样的高级语言，也能够把CPU的性能发挥到极限。</p><h2>Padding Cache Line，体验高速缓存的威力</h2><p>我们先来看看Disruptor里面一段神奇的代码。这段代码里，Disruptor在RingBufferPad这个类里面定义了p1，p2一直到p7 这样7个long类型的变量。</p><pre><code>abstract class RingBufferPad\n{\n    protected long p1, p2, p3, p4, p5, p6, p7;\n}\n</code></pre><p>我在看到这段代码的第一反应是，变量名取得不规范，p1-p7这样的变量名没有明确的意义啊。不过，当我深入了解了Disruptor的设计和源代码，才发现这些变量名取得恰如其分。因为这些变量就是没有实际意义，只是帮助我们进行<strong>缓存行填充</strong>（Padding Cache Line），使得我们能够尽可能地用上CPU高速缓存（CPU Cache）。那么缓存行填充这个黑科技到底是什么样的呢？我们接着往下看。</p><!-- [[[read_end]]] --><p>不知道你还记不记得，我们在<a href=\"https://time.geekbang.org/column/article/107422\">35讲</a>里面的这个表格。如果访问内置在CPU里的L1 Cache或者L2 Cache，访问延时是内存的1/15乃至1/100。而内存的访问速度，其实是远远慢于CPU的。想要追求极限性能，需要我们尽可能地多从CPU Cache里面拿数据，而不是从内存里面拿数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/a6/d39b0f2b3962d646133d450541fb75a6.png?wh=1142*588\" alt=\"\"></p><p>CPU Cache装载内存里面的数据，不是一个一个字段加载的，而是加载一整个缓存行。举个例子，如果我们定义了一个长度为64的long类型的数组。那么数据从内存加载到CPU Cache里面的时候，不是一个一个数组元素加载的，而是一次性加载固定长度的一个缓存行。</p><p>我们现在的64位Intel CPU的计算机，缓存行通常是64个字节（Bytes）。一个long类型的数据需要8个字节，所以我们一下子会加载8个long类型的数据。也就是说，一次加载数组里面连续的8个数值。这样的加载方式使得我们遍历数组元素的时候会很快。因为后面连续7次的数据访问都会命中缓存，不需要重新从内存里面去读取数据。这个性能层面的好处，我在第37讲的第一个例子里面为你演示过，印象不深的话，可以返回去看看。</p><p>但是，在我们不使用数组，而是使用单独的变量的时候，这里就会出现问题了。在Disruptor的RingBuffer（环形缓冲区）的代码里面，定义了一个RingBufferFields类，里面有indexMask和其他几个变量，用来存放RingBuffer的内部状态信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/f6/23adbbc656243ce85fdb8c7fab42ecf6.jpeg?wh=2278*1996\" alt=\"\"></p><p>CPU在加载数据的时候，自然也会把这个数据从内存加载到高速缓存里面来。不过，这个时候，高速缓存里面除了这个数据，还会加载这个数据前后定义的其他变量。这个时候，问题就来了。Disruptor是一个多线程的服务器框架，在这个数据前后定义的其他变量，可能会被多个不同的线程去更新数据、读取数据。这些写入以及读取的请求，会来自于不同的 CPU Core。于是，为了保证数据的同步更新，我们不得不把CPU Cache里面的数据，重新写回到内存里面去或者重新从内存里面加载数据。</p><p>而我们刚刚说过，这些CPU Cache的写回和加载，都不是以一个变量作为单位的。这些动作都是以整个Cache Line作为单位的。所以，当INITIAL_CURSOR_VALUE 前后的那些变量被写回到内存的时候，这个字段自己也写回到了内存，这个常量的缓存也就失效了。当我们要再次读取这个值的时候，要再重新从内存读取。这也就意味着，读取速度大大变慢了。</p><pre><code>......\n\nabstract class RingBufferPad\n{\n    protected long p1, p2, p3, p4, p5, p6, p7;\n}\n\t\n\nabstract class RingBufferFields&lt;E&gt; extends RingBufferPad\n{\n    ......    \n    private final long indexMask;\n\tprivate final Object[] entries;\n\tprotected final int bufferSize;\n\tprotected final Sequencer sequencer;\n    ......    \n}\n\npublic final class RingBuffer&lt;E&gt; extends RingBufferFields&lt;E&gt; implements Cursored, EventSequencer&lt;E&gt;, EventSink&lt;E&gt;\n{\n    ......    \n    protected long p1, p2, p3, p4, p5, p6, p7;\n    ......\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/93/b1/9330b8fb1e8de3f62d34c6f85f268db1.jpeg?wh=2776*1249\" alt=\"\"></p><p>面临这样一个情况，Disruptor里发明了一个神奇的代码技巧，这个技巧就是缓存行填充。Disruptor 在 RingBufferFields里面定义的变量的前后，分别定义了7个long类型的变量。前面的7个来自继承的 RingBufferPad 类，后面的7个则是直接定义在 RingBuffer 类里面。这14个变量没有任何实际的用途。我们既不会去读他们，也不会去写他们。</p><p>而RingBufferFields里面定义的这些变量都是final的，第一次写入之后不会再进行修改。所以，一旦它被加载到CPU Cache之后，只要被频繁地读取访问，就不会再被换出Cache了。这也就意味着，对于这个值的读取速度，会是一直是CPU Cache的访问速度，而不是内存的访问速度。</p><h2>使用RingBuffer，利用缓存和分支预测</h2><p>其实这个利用CPU Cache的性能的思路，贯穿了整个Disruptor。Disruptor整个框架，其实就是一个高速的<a href=\"https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem\">生产者-消费者模型</a>（Producer-Consumer）下的队列。生产者不停地往队列里面生产新的需要处理的任务，而消费者不停地从队列里面处理掉这些任务。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/56/659082942118e7c69eb3807b00f5f556.jpeg?wh=2566*2356\" alt=\"\"></p><p>如果你熟悉算法和数据结构，那你应该非常清楚，如果要实现一个队列，最合适的数据结构应该是链表。我们只要维护好链表的头和尾，就能很容易实现一个队列。生产者只要不断地往链表的尾部不断插入新的节点，而消费者只需要不断从头部取出最老的节点进行处理就好了。我们可以很容易实现生产者-消费者模型。实际上，Java自己的基础库里面就有LinkedBlockingQueue这样的队列库，可以直接用在生产者-消费者模式上。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/0e/45d4c7c8b0cb1f056684199e39660f0e.jpeg?wh=1894*3151\" alt=\"\"></p><p>不过，Disruptor里面并没有用LinkedBlockingQueue，而是使用了一个RingBuffer这样的数据结构，这个RingBuffer的底层实现则是一个固定长度的数组。比起链表形式的实现，数组的数据在内存里面会存在空间局部性。</p><p>就像上面我们看到的，数组的连续多个元素会一并加载到CPU Cache里面来，所以访问遍历的速度会更快。而链表里面各个节点的数据，多半不会出现在相邻的内存空间，自然也就享受不到整个Cache Line加载后数据连续从高速缓存里面被访问到的优势。</p><p>除此之外，数据的遍历访问还有一个很大的优势，就是CPU层面的分支预测会很准确。这可以使得我们更有效地利用了CPU里面的多级流水线，我们的程序就会跑得更快。这一部分的原理如果你已经不太记得了，可以回过头去复习一下<a href=\"https://time.geekbang.org/column/article/102166\">第25讲</a>关于分支预测的内容。</p><h2>总结延伸</h2><p>好了，不知道讲完这些，你有没有体会到Disruptor这个框架的神奇之处呢？</p><p>CPU从内存加载数据到CPU Cache里面的时候，不是一个变量一个变量加载的，而是加载固定长度的Cache Line。如果是加载数组里面的数据，那么CPU就会加载到数组里面连续的多个数据。所以，数组的遍历很容易享受到CPU Cache那风驰电掣的速度带来的红利。</p><p>对于类里面定义的单独的变量，就不容易享受到CPU Cache红利了。因为这些字段虽然在内存层面会分配到一起，但是实际应用的时候往往没有什么关联。于是，就会出现多个CPU Core访问的情况下，数据频繁在CPU Cache和内存里面来来回回的情况。而Disruptor很取巧地在需要频繁高速访问的变量，也就是RingBufferFields里面的indexMask这些字段前后，各定义了7个没有任何作用和读写请求的long类型的变量。</p><p>这样，无论在内存的什么位置上，这些变量所在的Cache Line都不会有任何写更新的请求。我们就可以始终在Cache Line里面读到它的值，而不需要从内存里面去读取数据，也就大大加速了Disruptor的性能。</p><p>这样的思路，其实渗透在Disruptor这个开源框架的方方面面。作为一个生产者-消费者模型，Disruptor并没有选择使用链表来实现一个队列，而是使用了RingBuffer。RingBuffer底层的数据结构则是一个固定长度的数组。这个数组不仅让我们更容易用好CPU Cache，对CPU执行过程中的分支预测也非常有利。更准确的分支预测，可以使得我们更好地利用好CPU的流水线，让代码跑得更快。</p><h2>推荐阅读</h2><p>今天讲的是Disruptor，推荐的阅读内容自然是Disruptor的官方文档。作为一个开源项目，Disruptor在自己<a href=\"https://github.com/LMAX-Exchange/disruptor/wiki/Introduction\">GitHub</a>上有很详细的设计文档，推荐你好好阅读一下。</p><p>这里面不仅包含了怎么用好Disruptor，也包含了整个Disruptor框架的设计思路，是一份很好的阅读学习材料。另外，Disruptor的官方文档里，还有很多文章、演讲，详细介绍了这个框架，很值得深入去看一看。Disruptor的源代码其实并不复杂，很适合用来学习怎么阅读开源框架代码。</p><h2>课后思考</h2><p>今天我们讲解了缓存行填充，你可以试试修改Disruptor的代码，看看在没有缓存行填充和有缓存行填充的情况下的性能差异。你也可以尝试直接修改Disruptor的源码和<a href=\"https://github.com/LMAX-Exchange/disruptor/blob/master/src/perftest/java/com/lmax/disruptor/immutable/CustomPerformanceTest.java\">性能测试代码</a>，看看运行的结果是什么样的。</p><p>欢迎你把你的测试结果写在留言区，和大家一起讨论、分享。如果有收获，你也可以把这篇文章分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":132036,"user_name":"小海海","can_delete":false,"product_type":"c1","uid":1158040,"ip_address":"","ucode":"C2FB9B6BCB4631","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/98/6f29f4f2.jpg","comment_is_top":false,"comment_ctime":1568010624,"is_pvip":false,"replies":[{"id":"51029","content":"我回头重新看了一下代码，我觉得你说的是对的，Padding对应的是RingBufferFields里面的字段，而不应该是INITIAL_CURSOR_VALUE，我去订正一下。<br>","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568443662,"ip_address":"","comment_id":132036,"utype":1}],"discussion_count":4,"race_medal":0,"score":"177661669760","product_id":100026001,"comment_content":"老师，有个疑惑的地方：文中讲了RingBuffer类利用缓存行填充来解决INITIAL_CURSOR_VALUE伪共享的问题，但是我记得Java对象内存布局是：实例变量放在堆区，静态变量属于类，放在方法区，而堆区和方法区在内存里肯定是隔离开的，但是RingBuffer的前后填充字段都是实例字段，而INITIAL_CURSOR_VALUE是静态常量，所以实际运行中他们肯定不是紧密排列在一起的，那么就解决不了伪共享的问题了，况且RingBuffer的子类RingBufferFields还有其他实例字段，如：indexMask、entries、bufferSize、sequencer，这些字段都是final修饰的，即对象构建后不会再修改，所以我理解前后的缓存行填充守护的应该是这几个字段，而且从子类RingBufferFields的命名也可以看出前面那几个字段才是想要缓存的字段。希望得到老师的回复，另外课程快结束了，一路跟下来收获很大，我准备这段时间二刷来巩固下^_^","like_count":42,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466729,"discussion_content":"我回头重新看了一下代码，我觉得你说的是对的，Padding对应的是RingBufferFields里面的字段，而不应该是INITIAL_CURSOR_VALUE，我去订正一下。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568443662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1995082,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","nickname":"余巍","note":"","ucode":"B0819C42A82371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321762,"discussion_content":"注意一下类是abstract。父子类属性原理。pad父类填充属性在前，field父类的属性被保护在中间，ringbuffer子类填充属性在最后。这样就杜绝被其他cache line影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604629748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","nickname":"w 🍍","note":"","ucode":"F2386C971EC58B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39393,"discussion_content":"RingBuffer里也有p1~p7，是保护谁呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571921326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350677,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/15/719f1f44.jpg","nickname":"等风来","note":"","ucode":"5B7FF74A51F534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28954,"discussion_content":"仅final修饰， 会在方法区吗， 不需要static修饰吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570719294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169236,"user_name":"山间竹","can_delete":false,"product_type":"c1","uid":1696212,"ip_address":"","ucode":"FA7F16EF01D659","user_header":"https://static001.geekbang.org/account/avatar/00/19/e1/d4/1b5ac51e.jpg","comment_is_top":false,"comment_ctime":1578299183,"is_pvip":false,"replies":[{"id":"68090","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580632696,"ip_address":"","comment_id":169236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"151902154543","product_id":100026001,"comment_content":"在java8中，jvm团队搞出了@Contended注解来进行支持，在你需要避免“false sharing”的字段上标记注解，这可以暗示虚拟机“这个字段可以分离到不同的cache line中”，这是JEP 142的目标。","like_count":36,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480474,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580632696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131495,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1567767786,"is_pvip":false,"replies":[{"id":"51052","content":"没错，看来你读的时候很仔细地思考过。<br><br>当我们的对于数据修改，修改了cache之后，这个数据如果要同步到主内存，那么就会需要通过MSEI协议来在各个CPU Core的Cache里面保持数据同步。<br><br>那么是否需要同步主内存，会引发另外一个知识点，就是Memory Barrier&#47;Fence，这部分知识点其实还可以单独拿来说两讲。你可以先去搜索上面的关键词，了解一下。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568449765,"ip_address":"","comment_id":131495,"utype":1}],"discussion_count":2,"race_medal":0,"score":"91762081002","product_id":100026001,"comment_content":"这个是不是和前面讲的msei有一定关系啊，请徐老师点拨","like_count":22,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466485,"discussion_content":"没错，看来你读的时候很仔细地思考过。\n\n当我们的对于数据修改，修改了cache之后，这个数据如果要同步到主内存，那么就会需要通过MSEI协议来在各个CPU Core的Cache里面保持数据同步。\n\n那么是否需要同步主内存，会引发另外一个知识点，就是Memory Barrier/Fence，这部分知识点其实还可以单独拿来说两讲。你可以先去搜索上面的关键词，了解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568449765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1411096,"avatar":"https://static001.geekbang.org/account/avatar/00/15/88/18/9744d5ec.jpg","nickname":"小超人","note":"","ucode":"0D8A433F3E3737","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400993,"discussion_content":"这科技也太黑了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633516059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174851,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1580436063,"is_pvip":false,"replies":[{"id":"68026","content":"-_-_aaa 同学，<br><br>你好，indexMask是一个第一次写入之后就不变动的变量了。你可以看到在代码里面这是一个Java的final变量。<br><br>前后7个就是因为8个long正好64byte，这样cache line无论在哪个位置被加载，这64个byte在第一次加载到cache line之后就不再需要更新了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580615446,"ip_address":"","comment_id":174851,"utype":1}],"discussion_count":5,"race_medal":1,"score":"74594880095","product_id":100026001,"comment_content":"“而 Disruptor 很取巧地在需要频繁高速访问的变量，也就是 RingBufferFields 里面的 indexMask 这些字段前后，各定义了 7 个没有任何作用和读写请求的 long 类型的变量。”为什么前后各7个，cache line 就没有写的请求，就是因为8个long正好64byte吗，为什么没有写的呢？","like_count":18,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482546,"discussion_content":"-_-_aaa 同学，\n\n你好，indexMask是一个第一次写入之后就不变动的变量了。你可以看到在代码里面这是一个Java的final变量。\n\n前后7个就是因为8个long正好64byte，这样cache line无论在哪个位置被加载，这64个byte在第一次加载到cache line之后就不再需要更新了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580615446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276628,"discussion_content":"老师的第二段话，如同醍醐灌顶啊！我一下子明白了为啥是前后7个long了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590920233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391541,"discussion_content":"我这么理解不知道对不对，如果是前面只有6个，那前面第7个数据进行修改的时候，就可能会导致我们要保护的 fields 里面个第一个数据作为同一个cache line的数据同步主内存，导致再次读取这第一个数据的时候，需要再从内存里面读取，就达不到我们想要使用高速缓存提升速度的目的了。\n老师原文是这一段在说这个：“CPU 在加载数据的时候，自然也会把这个数据从内存加载到高速缓存里面来。不过，这个时候，高速缓存里面除了这个数据，还会加载这个数据前后定义的其他变量。这个时候，问题就来了。Disruptor 是一个多线程的服务器框架，在这个数据前后定义的其他变量，可能会被多个不同的线程去更新数据、读取数据。这些写入以及读取的请求，会来自于不同的 CPU Core。于是，为了保证数据的同步更新，我们不得不把 CPU Cache 里面的数据，重新写回到内存里面去或者重新从内存里面加载数据。而我们刚刚说过，这些 CPU Cache 的写回和加载，都不是以一个变量作为单位的。这些动作都是以整个 Cache Line 作为单位的。所以，当 INITIAL_CURSOR_VALUE （这里的INITIAL_CURSOR_VALUE 可能有点问题，我理解它指的可以是我们定义RingBufferFields的第一个字段对应的final变量indexMask）前后的那些变量被写回到内存的时候，这个字段自己也写回到了内存，这个常量的缓存也就失效了。当我们要再次读取这个值的时候，要再重新从内存读取。这也就意味着，读取速度大大变慢了。”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630502990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2023574,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/FXUzj6S2tq6iabBMGM6Z1DJTrGaroYECkD8Cictv4Xya0PvyqLicoNsk2KUEpaxoAC3iaPCxsUjgG9JslJk15iaK8icQ/132","nickname":"孙立","note":"","ucode":"7AB3E34DEA6D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376185,"discussion_content":"空间换时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622006463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1560680,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d0/68/75786df4.jpg","nickname":"。","note":"","ucode":"10DD3A46CAC658","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324790,"discussion_content":"这样说的话，是会出现从前或者从后加载的情况，那么为什么会出现这种情况呢，是因为编译阶段重排序导致么？还是说内存加载的时候有什么不一样的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605170702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131323,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1567720260,"is_pvip":false,"replies":[{"id":"51123","content":"提点谈不上，对于芯片和硬件我连从业者都还算不上。<br><br>不过过去几年的繁荣主要是来自于Intel CPU的极限性能提升已经到头了。所以反而大家回头去找其他的解决方案，在体系结构层面又有了很多新的机会。<br><br>我觉得大家都可以去读一读 David Patterson 老爷爷的 &lt;计算机体系结构新黄金时代：历史、挑战和机遇&gt; 这个访谈<br><br>https:&#47;&#47;www.bilibili.com&#47;video&#47;av46710093&#47;","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568537047,"ip_address":"","comment_id":131323,"utype":1}],"discussion_count":2,"race_medal":0,"score":"65992229700","product_id":100026001,"comment_content":"    老师今天说的这个东西其实就是MQ：只不过现在的MQ基本上是在充分利用内存&#47;缓存，而disruptor其实是在利用CPU cache。刘超老师有一点确实没有说错“计算机组成原理和操作系统相辅相成”：学到今天去相互结合确实发现这种收益远比单独学习好。<br>      扩展的问老师一个问题：现在所谓的智能芯片或者说前端时间提出的智能芯片，会对后续产生革命性影响么？毕竟硬件的i5到现在差不多十多年了其实进步不大，这十余年最大的变化莫过于内存容量的暴涨造就了nosql、MQ的兴起，如果说将来cache的变化是吧同样可能早就类似于老师今天所说的Disruptor这种基于CPU Cache技术的兴起。<br>        今年华为的AI CPU、老美那边的云计算CPU似乎实验室测试已经通过了：毕竟从奔腾4之后到现在近20年了，老师今天所说的又刚好符合现在关键硬件CPU的革新时期？老师对此是如何看待？希望老师能提点。","like_count":16,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466388,"discussion_content":"提点谈不上，对于芯片和硬件我连从业者都还算不上。\n\n不过过去几年的繁荣主要是来自于Intel CPU的极限性能提升已经到头了。所以反而大家回头去找其他的解决方案，在体系结构层面又有了很多新的机会。\n\n我觉得大家都可以去读一读 David Patterson 老爷爷的 &amp;lt;计算机体系结构新黄金时代：历史、挑战和机遇&amp;gt; 这个访谈\n\nhttps://www.bilibili.com/video/av46710093/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568537047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8356,"discussion_content":"AI  cpu是啥？协处理器吗，其实协处理器远没有通用处理器复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567939011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131425,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1567748907,"is_pvip":false,"replies":[{"id":"51050","content":"是的，篇幅有限，所以没有太具体解释False Sharing和Memory Fence，欢迎大家留言分析这两部分知识点。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568449556,"ip_address":"","comment_id":131425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48812389163","product_id":100026001,"comment_content":"最好说明一下，这种填充cache line的手法是为了防止False Sharing","like_count":11,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466445,"discussion_content":"是的，篇幅有限，所以没有太具体解释False Sharing和Memory Fence，欢迎大家留言分析这两部分知识点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568449556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131857,"user_name":"易儿易","can_delete":false,"product_type":"c1","uid":1242864,"ip_address":"","ucode":"B15D1031CA841E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","comment_is_top":false,"comment_ctime":1567938817,"is_pvip":false,"replies":[{"id":"51119","content":"谢谢支持。Disruptor在2011年开源的时候其实是让很多Java开发同学们感到惊艳的，是很值得仔细研读的一份代码","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568536603,"ip_address":"","comment_id":131857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23042775297","product_id":100026001,"comment_content":"经典的东西总是容易被频繁引用，disruptor记得没错应该是在java并发实战专栏里被王宝令老师讲过，今天又一次学习，加深了印象……拍个双响马屁：两位老师都有很高的水准，深入浅出！","like_count":5,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466647,"discussion_content":"谢谢支持。Disruptor在2011年开源的时候其实是让很多Java开发同学们感到惊艳的，是很值得仔细研读的一份代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568536603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139750,"user_name":"等风来","can_delete":false,"product_type":"c1","uid":1350677,"ip_address":"","ucode":"5B7FF74A51F534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/15/719f1f44.jpg","comment_is_top":false,"comment_ctime":1570717582,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14455619470","product_id":100026001,"comment_content":"老师， 我对于前后7个long有点疑惑， 我大概知道是为了防止被换出， 但就是不知道为什么可以😂， 可以举例说明一下吗","like_count":3,"discussions":[{"author":{"id":1377529,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ia5olchDzerJDeAzoY4XZrEOmqhjDJrO6ZfQU8CjWmkxwhtM6fwc16nq7Jpqr4t9ILlDSQjKHcogBpXiaIuW4IIA/132","nickname":"一君","note":"","ucode":"DF21D6074DA06F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534812,"discussion_content":"字段都是final的，不会被改动。假如字段是a,b，那么缓存行里面可能是p2,p3,p4,p5,p6,p7,a,b，都不可改动，所以就不会往主内存更新了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638282492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2023574,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/FXUzj6S2tq6iabBMGM6Z1DJTrGaroYECkD8Cictv4Xya0PvyqLicoNsk2KUEpaxoAC3iaPCxsUjgG9JslJk15iaK8icQ/132","nickname":"孙立","note":"","ucode":"7AB3E34DEA6D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376184,"discussion_content":"64个字节加载后，没有修改，所以不需要换出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622006393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259097,"user_name":"余巍","can_delete":false,"product_type":"c1","uid":1995082,"ip_address":"","ucode":"B0819C42A82371","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","comment_is_top":false,"comment_ctime":1604630156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10194564748","product_id":100026001,"comment_content":"注意一下类是abstract。父子类属性原理。pad父类填充属性在前，field父类的属性被保护在中间，ringbuffer子类填充属性在最后。这样就杜绝被其他cache line影响。","like_count":1},{"had_liked":false,"id":318622,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1635352777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5930320073","product_id":100026001,"comment_content":"这一系列文章太赞了，这几天一有空就看，完全停不下来！真实场景代码配合原理，特别是各个文末推荐的阅读，真所谓授之以渔。","like_count":2},{"had_liked":false,"id":174850,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1580435362,"is_pvip":false,"replies":[{"id":"68028","content":"-_-_aaa同学，<br><br>你好，64位是内存寻址空间，通常也是数据通路的字长（word size）<br>这个和缓存行之间没有对应关系。<br>我们也可以把缓存行设计成 16个word，也就是128 Bytes，但是并不会叫他128位计算机。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580615749,"ip_address":"","comment_id":174850,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5875402658","product_id":100026001,"comment_content":"“我们现在的 64 位 Intel CPU 的计算机，缓存行通常是 64 个字节（Bytes）”，64位为什么不是64bit而是设计成64Byte的缓存行，感觉应该叫64比特intel CPU的计算机。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482545,"discussion_content":"-_-_aaa同学，\n\n你好，64位是内存寻址空间，通常也是数据通路的字长（word size）\n这个和缓存行之间没有对应关系。\n我们也可以把缓存行设计成 16个word，也就是128 Bytes，但是并不会叫他128位计算机。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580615749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146645,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1572592143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867559439","product_id":100026001,"comment_content":"赞，之前还以 计算机组成原理主要是架构师 选择技术 硬件 的时候使用的，原来在代码层面也可以这样使用。不过虽然能看懂他代码的意思，但是还不不太理解他是如何实现的，怎么写可以做到这样的，需要进一步的研究一下","like_count":1},{"had_liked":false,"id":131649,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567835371,"is_pvip":false,"replies":[{"id":"51121","content":"谢谢支持","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568536717,"ip_address":"","comment_id":131649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862802667","product_id":100026001,"comment_content":"老师讲得实在是太好了。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466558,"discussion_content":"谢谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568536717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351803,"user_name":"Geek_e9a05e","can_delete":false,"product_type":"c1","uid":2835263,"ip_address":"","ucode":"32E1804CE6364D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/zUZMSvia9ByR2YbkeB9T4oymlzDCEsxUb4xPUNo39xgehdF0uqtWBRz5avLI3U5vS0XWVEKNWDpFtFib6s9v5kNA/132","comment_is_top":false,"comment_ctime":1658201507,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658201507","product_id":100026001,"comment_content":"请教一下大家，老师文中说了数组形式的数据进行遍历访问时，会增加分支预测的准确性，我不太理解，为什么呢？","like_count":0},{"had_liked":false,"id":330078,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1641789125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641789125","product_id":100026001,"comment_content":"有意思 ","like_count":0},{"had_liked":false,"id":318242,"user_name":"Honer","can_delete":false,"product_type":"c1","uid":1795410,"ip_address":"","ucode":"1617B19D043E11","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/52/a662d972.jpg","comment_is_top":false,"comment_ctime":1635213820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635213820","product_id":100026001,"comment_content":"这个缓冲行填充让我想起了内存对齐","like_count":0},{"had_liked":false,"id":281648,"user_name":"赵源😈","can_delete":false,"product_type":"c1","uid":1609114,"ip_address":"","ucode":"3D438CC59126F2","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/9a/61db513f.jpg","comment_is_top":false,"comment_ctime":1614839437,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614839437","product_id":100026001,"comment_content":"一直有个问题想问老师：老师的表格中L1 cache 和L2 cache价格一样，但是L2更慢，那为什么不去掉L2 cache呢？","like_count":0,"discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378782,"discussion_content":"估计大小不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623400309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253809,"user_name":"InvisibleDes","can_delete":false,"product_type":"c1","uid":1566802,"ip_address":"","ucode":"56908581681771","user_header":"https://static001.geekbang.org/account/avatar/00/17/e8/52/931888d7.jpg","comment_is_top":false,"comment_ctime":1602904348,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602904348","product_id":100026001,"comment_content":"对分支预测的执行很有利，这一点没有看懂","like_count":1},{"had_liked":false,"id":246437,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1599344292,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599344292","product_id":100026001,"comment_content":"老师，现在只读变量使用地越来越多，为什么CPU没有提供特定的指令来优化只读变量的高速缓存（至少给开发人员一个选择，让这些变量尽量存在高速缓存而不调出）。不然也不会逼得Disruptor采用非常令人费解的填充方法，让字段常驻在缓存中。","like_count":0,"discussions":[{"author":{"id":1934606,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/85/0e/ad39a252.jpg","nickname":"西塞尔","note":"","ucode":"F1AA53B3B405E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340447,"discussion_content":"不是常驻，而是相互影响。JD8之后就有提供原生注解来实现这样的操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610008307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144634,"user_name":"拓山","can_delete":false,"product_type":"c1","uid":1545647,"ip_address":"","ucode":"11FE9CF3821898","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","comment_is_top":false,"comment_ctime":1571986656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571986656","product_id":100026001,"comment_content":"这个填充思路 闻所未闻。<br>实在脑洞大开，赞！","like_count":0},{"had_liked":false,"id":133417,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1568557247,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1568557247","product_id":100026001,"comment_content":"从该专栏的每一讲的每一个主题开始、夯实基础：我们未来生活的可能性就是靠这些点点滴滴串联起来的<br><br>day54 笔记 ：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11518304.html","like_count":0,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347469,"discussion_content":"你这原封不动的照搬啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612238047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312290,"discussion_content":"你这原封不动的照搬啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602653805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/59/1f/a3679b09.jpg","nickname":"肖某某","note":"","ucode":"A1D06FAD40FB33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209830,"discussion_content":"你这原封不动的照搬啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584679148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}