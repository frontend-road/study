{"id":277715,"title":"13｜YouCompleteMe：Vim 里的自动完成","content":"<p>你好，我是吴咏炜。</p><p>在集成开发环境里，自动完成是一个非常重要的功能。可是 Vim 并不能真正理解你输入的代码，因此它自身无法提供自动完成的功能。不过，Vim 仍然提供了一些接口，允许第三方的软件实现这样的功能，并和 Vim 自身进行集成。<a href=\"https://github.com/ycm-core/YouCompleteMe\">YouCompleteMe</a>（简称YCM）就是这样的一个第三方软件，今天，我就为你详细介绍一下它。</p><p>YCM 对 C++ 程序员最为适合，它可以提供其他工具实现不了的功能。而且，它也适用于很多其他语言，包括 C 家族的各种语言和其他常用的语言，如 Python、Java 和 Go 等。即使在 YCM 不直接支持你使用的语言的时候，它仍然能通过标识符完成功能提供比没有 YCM（和其他语言支持插件）时更好的编辑体验。因此，我推荐你使用这个插件。</p><h2>YouCompleteMe</h2><h3>功能简介</h3><p>首先我来介绍一下 YCM 的基本功能吧。根据它的主页（我的翻译）：</p><blockquote>\n<p>YouCompleteMe 是一个快速、即输即查、模糊搜索的 Vim 代码完成引擎。它实际上有好几个完成引擎：<br>\n&nbsp;</p>\n<ul>\n<li>一个基于标识符的引擎，可以在任何编程语言中工作</li>\n<li>一个强大的基于 clangd 的引擎，可以为 C/C++/Objective-C/Objective-C++/CUDA（C 家族语言）提供原生的语义代码完成</li>\n<li>一个基于 Jedi 的完成引擎，可以支持 Python 2 和 3</li>\n<li>一个基于 OmniSharp-Roslyn 的完成引擎，用来支持 C#</li>\n<li>一个基于 Gopls 的完成引擎，支持 Go</li>\n<li>一个基于 TSServer 的完成引擎，支持 JavaScript 和 TypeScript</li>\n<li>一个基于 rls 的完成引擎，支持 Rust</li>\n<li>一个基于 jdt.ls 的完成引擎，支持 Java</li>\n<li>一个通用的语言服务器协议（LSP）实现，用来支持任何其他有 LSP 服务器的语言</li>\n<li>还有一个基于 omnifunc 的完成器，使用 Vim 的全能补全（omnicomplete）系统提供的数据来为很多其他语言提供语义完成</li>\n</ul>\n</blockquote><!-- [[[read_end]]] --><p>其实，Vim 里的自动完成插件并不止这一个，但 YCM 是比较成熟也比较全面的。虽说它的安装配置有一定的复杂性，但比起另外一些要求你独立安装、配置语言服务器的方案，它至少能一次性搞定插件和你需要的语言支持，所以反而算是简单的了。我最近的主要开发语言是 C、C++、Python 和 Vim 脚本，因此这也算是个很完美的匹配了。</p><p>下面是一个简单的示例，展示了 YCM 的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/a9/ee16421c2d6e17108e60d43c2a174ea9.gif?wh=1000*854\" alt=\"Fig13.1\" title=\"YCM 的 C++ 示例\"></p><p>总体上，你只要在 YCM 给你提示的时候，敲 <code>&lt;Tab&gt;</code> 来选择合适的选项，然后继续往下输入就行。由于 YCM 使用模糊匹配，你只要输入你希望的标识符中的每一段中的若干字符，就可以快速把候选项减到你要的内容敲一两下 <code>&lt;Tab&gt;</code> 就能出来。事实上，我后来发现，在 <code>std::</code> 后只要输入 <code>mu</code> 就足以让 <code>make_unique</code> 成为第一选择了。</p><p>不过，这里面最让我吃惊的还是，clangd 引擎居然能在我只提供部分头文件的情况下（完全不提供是不行的），自动帮我插入正确的头文件并保持其字母序排列。这个功能我以前还真还没有见过！</p><h3>安装</h3><h4>Ubuntu 下的 apt 安装</h4><p>如果你使用一个较新的 Linux 发布版，有可能系统本身已经自带了 YCM。虽然这个版本多半会有点老，但对于有些人来说，可能也够用了。毕竟，Linux 下的包安装确实方便。我们就先以 Ubuntu 为例，来介绍 Linux 包管理器下的安装过程。</p><p>首先，我们需要使用 apt 命令来安装 YCM，命令是：</p><pre><code class=\"language-bash\">sudo apt install vim-youcompleteme\n</code></pre><p>这步成功之后，YCM 就已经被安装到了你的系统上。不过，在你个人的 Vim 配置里，仍然还没有启用 YCM。要启用的话，可以输入下面的命令：</p><pre><code class=\"language-bash\">vim-addon-manager install youcompleteme\n</code></pre><p>这个命令之后，你会在你的 ~/.vim/plugin 目录下看到 youcompleteme.vim 的符号链接。这样，安装就算完成了。</p><h4>手动安装</h4><p>如果你的系统不直接提供 YCM，或者你想要使用最新版本的 YCM，那你就需要手工编译安装了。安装之前，你需要确保你的系统上有 CMake、Python 3 和平台主流的 C++ 编译器，即 Linux 上的 GCC，macOS 上的 Clang，及 Windows 上的 MSVC。如果要安装其他语言（如 Java 和 Go）的支持，也同样要准备好相应语言的环境，这些在 YCM 的主页上有介绍，我就先不多说了。</p><p>因为 YCM 是一个需要编译组件的插件，所以我不建议你用 Vim 的包管理器来安装，那样会出什么错都搞不清楚。大致安装过程是：</p><ol>\n<li>选择安装目录</li>\n<li>签出 YCM</li>\n<li>根据你需要使用的语言使用合适的选项，来进行编译安装</li>\n</ol><p>下面，我们就快速地过一下。</p><p>首先，我们需要给 YCM 一个独立的安装目录。这个目录应该在 pack 下面，但不要放在包管理器使用的目录下，以免发生冲突。我的选择是“我的”，my。因为希望 YCM 直接启动，所以最后需要放到这个目录的 start 子目录下。换句话说，Unix 上的 ~/.vim/pack/my/start，Windows 上的 ~\\vimfiles\\pack\\my\\start。</p><p>然后，我们就应当在这个目录下签出 YCM。可以在进到这个子目录里面后，使用下面的命令（Windows 下面去掉“\\”全部写一行，或者把“\\”换成“^”）：</p><pre><code class=\"language-bash\">git clone --recurse-submodules \\\n          --shallow-submodules \\\n    https://github.com/ycm-core/YouCompleteMe.git\n</code></pre><p>最后就是编译安装了。主要工作由 install.py 来完成，但如果我们不提供额外的选项，YCM 不会安装上面说的那些特定语言的语义完成引擎。我们需要显式地提供相应语言的选项：</p><ul>\n<li><code>--clang-completer</code>，基于 libclang 的老 C 族语言引擎</li>\n<li><code>--clangd-completer</code>，基于 clangd 的新实验 C 族语言引擎</li>\n<li><code>--cs-completer</code>，C# 引擎</li>\n<li><code>--go-completer</code>，Go 引擎</li>\n<li><code>--rust-completer</code>，Rust 引擎</li>\n<li><code>--java-completer</code>，Java 引擎</li>\n<li><code>--ts-completer</code>，JavaScript 和 TypeScript 引擎</li>\n<li><code>--all</code>，除 clangd 外的上述索引引擎</li>\n</ul><p>关于 clangd，我多说一句。虽然这个引擎被标为实验状态，但它的易用性和功能确实比老的引擎有了巨大的提升。同样是上面的代码，如果用老的 libclang 引擎的话，效果是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/8c/0ba17b6b2231f4fd76315c5dac3ecd8c.gif?wh=998*856\" alt=\"Fig13.2\" title=\"使用 libclang 的自动完成示例\"></p><p>我们可以看到：</p><ul>\n<li>老版本不会添加 <code>#include</code> 结束的 <code>&gt;</code> 或 <code>\"</code></li>\n<li>老版本不会自动添加头文件</li>\n<li>老版本不会提供函数原型提示</li>\n<li>老版本不会在输入中时刻提醒当前有错误（这倒不算是件坏事）</li>\n</ul><p>所以，如果你编译和使用 clangd 支持没有问题，那就用它吧。对我来说，使用 libclang 引擎可能有两个理由：</p><ul>\n<li>clangd 支持编译不过（我遇到过）</li>\n<li>机器配置低，clangd 太慢了（我的机器上能感到性能差异，但 clangd 的响应速度完全可以接受）</li>\n</ul><p>你可以同时安装这两个引擎，然后通过你的 vimrc 配置文件来选择使用哪一个，使用 <code>let g:ycm_use_clangd = 0</code> 就是使用老引擎，这个值设为 1 或者干脆不设，则是使用新引擎。</p><p>另外一个要提醒你的地方是，编译环境应尽可能干净，不要暴露出自己用的第三方库的路径。我就碰到过因为环境变量里设了 Boost 库的包含路径，从而导致 YCM 编译出错的情况。YCM 自己已经包含了所需的依赖库，系统的和用户自己安装的类似库如果版本不合适的话，反而会对 YCM 造成干扰。</p><p>（此外，也告诉你一下我编译 clangd 时遇到的失败情况，也供你参考一下。我的原因是自己编译了 Python 3，由于系统上缺了一些开发包，导致 Python 功能不完整，到运行 YCM 的安装脚本时才暴露出来。我很高兴我后来花点时间解决了问题，因为 clangd 的功能真的强大很多。）</p><h3>配置</h3><h4>项目配置</h4><p>像我上面的简单例子，YCM 是可以不需要配置就能直接工作的。但如果环境稍微复杂一点，C/C++ 程序就可能会出现识别错误。原因通常是以下三种：</p><ul>\n<li>头文件没找到，可能是因为项目内部路径比较复杂，也可能是因为编译器的头文件不是在 Clang 查找的默认位置下面</li>\n<li>项目需要特别的宏定义</li>\n<li>项目需要特定的 C 或 C++ 标准，或特定的编译器选项</li>\n</ul><p>这些情况如果出现的话，你需要让 YCM 了解项目的相应信息。</p><p>YCM 在 clangd 下的推荐做法是在源代码或其某个父目录下放一个 CMake 输出的 compile_commands.json 文件（可在 cmake 命令行上加上 <code>-DCMAKE_EXPORT_COMPILE_COMMANDS=1</code> 来产生此文件）。这种方式最为通用和严格，因为 CMake 输出的这个编译命令文件里包含每一个源文件的编译命令，因此只要你的 CMake 配置是正确的，YCM 通常就能正确识别，哪怕你每个文件的编译选项不同都没有关系。它可以给 YCM 提供完整的项目编译信息，使得查找一个符号的引用成为可能。如果你的工程里，这个文件产生在一个 build 目录下的话，别忘了你需要在项目的根目录下执行类似下面的命令：</p><pre><code class=\"language-bash\">ln -s build/compile_commands.json .\n</code></pre><p>使用 compile_commands.json 也有缺点。CMake 在这个编译命令文件里放置的是绝对路径，因此，把源代码放在一个共享位置供不同的系统使用就会有麻烦。此外，只有少数 CMake 产生器支持 <code>CMAKE_EXPORT_COMPILE_COMMANDS</code>，特别是，Windows 上默认的 Visual Studio 产生器不支持输出这个文件。抛开这些问题，如果项目比较大的话，clangd 的“编译”会消耗 CPU 和内存，也是一个可能的负面因素。但我们同时要记住，这种开销是让 YCM 能看到整个项目而不只是单个文件的代价。</p><p>如果因为某种问题你决定不使用编译命令文件这一方法，那 YCM 的经典做法是在文件所在目录或其父目录下寻找一个名字叫 .ycm_extra_conf.py 的文件。找到之后，它就会弹出一个提醒，提示用户是不是要载入这个文件，运行其中的代码来得到需要的配置信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/47/889f835a5cb12359250b44f70e06d547.png?wh=1128*444\" alt=\"Fig13.3\" title=\"YCM 的配置载入提示\"></p><p>虽然这个恼人的提示可以关掉，但这实际上会带来潜在的安全问题，毕竟 YCM 是会运行其中的 Python 代码的。此外，写这个文件也算是件麻烦事吧，尤其对不熟悉 Python 的人而言。</p><p>在 2014—2015 年期间，有人维护了一个叫 ycmconf 的插件，以一种我喜欢的方式解决了这个问题。不过，今天再直接用这个插件，就有点问题了。所以我在 GitHub 上复刻了这个插件，并进行了更新。如果你使用 YCM 进行 C 系语言的自动完成，那我推荐你安装 adah1972/ycmconf 这个插件。</p><p>这个插件支持两种简单的方式来配置 C/C++ 的自动识别：</p><ol>\n<li>使用 CMake 输出的 compile_commands.json 文件（由于 YCM 目前已经直接支持该文件，这只对较老版本的 YCM 有意义）</li>\n<li>使用上一讲（拓展 2）里用的 .clang_complete 配置文件</li>\n</ol><p>目前我当然是以第 2 种方式来使用这个插件了：手写一个 .clang_complete 很简单，非常适合临时写的小程序。但它的问题是，这个文件对整个目录有效。所以如果你在其中写了像 <code>-std=c++14</code> 这样的选项，选择某一特定 C++ 标准，那这个选项对于 C 文件就是错的了，YCM 就会抱怨。不过解决起来也很容易，像上面说的情况，让 C 文件单独占一个子目录或者平行目录都可以消除此问题。</p><p>不管是哪种方法，你都需要确保配置文件在源代码的目录下或其父目录下。YCM 和 ycmconf 的搜索规则都是从源代码的所在位置往上找有没有满足文件名约定的文件，并在找到第一个时终止。</p><h4>全局配置</h4><p>YCM 有很多命令，但它默认只对少量的功能进行了键映射，其中最重要的就是 <code>&lt;Tab&gt;</code> 了。在使用中，我觉得自动修正和跳转功能值得单独进行一下键映射：</p><pre><code class=\"language-vim\">nnoremap &lt;Leader&gt;fi :YcmCompleter FixIt&lt;CR&gt;\nnnoremap &lt;Leader&gt;gt :YcmCompleter GoTo&lt;CR&gt;\nnnoremap &lt;Leader&gt;gd :YcmCompleter GoToDefinition&lt;CR&gt;\nnnoremap &lt;Leader&gt;gh :YcmCompleter GoToDeclaration&lt;CR&gt;\nnnoremap &lt;Leader&gt;gr :YcmCompleter GoToReferences&lt;CR&gt;\n</code></pre><p>自动修正功能可以参考下图的演示。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/a3/1cc7ca1e72aea567b971f878eb1b98a3.gif?wh=1158*788\" alt=\"Fig13.4\" title=\"YCM 自动修正功能的演示\"></p><p>自动修正的范围很广，小到修正一个拼写错误或者漏写名空间这样的问题，大到提供安全方面或代码风格现代化的调整（它可以利用你的 <a href=\"https://clang.llvm.org/extra/clang-tidy/\">Clang-Tidy</a> 配置来向你报告错误和提供修正建议）。有了它，编码工作真的轻松了许多。</p><p>我们这儿有四种跳转：</p><ol>\n<li><code>GoTo</code>，无脑跳转，最常用的就是这个功能，如果能跳转到定义，就跳转到定义，否则就跳转到声明。</li>\n<li><code>GoToDefinition</code>，顾名思义，就是跳转到定义。</li>\n<li><code>GoToDeclaration</code>，专门跳转到声明。</li>\n<li><code>GoToReferences</code>，可以用来查出一个符号被引用的地方（libclang 引擎不支持该命令）。</li>\n</ol><p>注意，对 C 族语言来说，只有让 clangd 看到你的项目的 compile_commands.json 文件，才能使用 <code>GoToReferences</code> 这个命令查找整个项目里符号被引用的地方；否则，你只能查出当前 Vim 里可见的引用，而非整个项目。</p><p>YCM 有很多配置参数，有些在默认状态下工作得不是很好。我通常会配置下面这些：</p><pre><code class=\"language-vim\">let g:ycm_auto_hover = ''\nlet g:ycm_complete_in_comments = 1\nlet g:ycm_filetype_whitelist = {\n      \\ 'c': 1,\n      \\ 'cpp': 1,\n      \\ 'python': 1,\n      \\ 'vim': 1,\n      \\ 'sh': 1,\n      \\ 'zsh': 1,\n      \\ }\nlet g:ycm_goto_buffer_command = 'split-or-existing-window'\nlet g:ycm_key_invoke_completion = '&lt;C-Z&gt;'\n</code></pre><p>第一项 <code>ycm_auto_hover</code> 用来禁用光标在一个符号上长期停留出现的自动文档提示。未禁用时的效果如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/53/96/53a1e8f6886ac25a751bfb33c2942896.png?wh=1142*749\" alt=\"Fig13.5\" title=\"YCM 的自动浮动提示\"></p><p>这个自动提示不能说一点用都没有，但它很容易成为写代码时的干扰，所以我还是把它禁用了。</p><p>第二项 <code>ycm_complete_in_comments</code> 表示我希望在写注释的时候也能启用自动完成——毕竟注释里通常也要写代码里的变量、函数名什么的。</p><p>第三项 <code>ycm_filetype_whitelist</code> 用来仅对白名单列表里的文件类型才启用 YCM。没有这一项，YCM 在打开一些特殊类型的文件时可能会报错，有时候也会导致打开的延迟。我就明确一下，让它只在我常用的源代码类型里才启用。</p><p>第四项 <code>ycm_goto_buffer_command</code> 用来告诉 YCM，当跳转的目的文件尚未打开时，用分割窗口的方式打开新文件；如果已经打开则跳转到相应的窗口。其他的可能值是 <code>'same-buffer'</code>，在同一个缓冲区的位置打开（除非这个位置因为文件修改的原因不能被替换），及 <code>'split'</code>，除非跳转目的在同一个文件，永远在新分割的窗口打开。</p><p>第五项 <code>ycm_key_invoke_completion</code> 用来定义手工启用语义完成的按键。在你输入时，YCM 会自动尝试标识符匹配，而当你输入 <code>.</code>、<code>-&gt;</code>、<code>::</code> 或这个按键时，YCM 则会启用语义完成，来给出当前上下文中允许出现的符号。这个按键默认是 <code>&lt;C-Space&gt;</code>，在某些操作系统上是不能用的（如 Mac 和老的 Windows），所以我改成了 <code>&lt;C-Z&gt;</code>。你也可以选择你自己喜欢的按键（但要注意映射冲突问题：Vim 里在插入模式下的可用键不多，事实上只有在终端下容易出问题的 <code>&lt;C-S&gt;</code> 和 <code>&lt;C-Z&gt;</code> 在 Vim 里没有默认功能）。</p><h3>使用</h3><p>说了这么多，实际上 YCM 大部分使用方法我也已经提到了。它基本上只要你使用 <code>&lt;Tab&gt;</code> 就能使用，你如果不理睬它的提示，它也不会对你造成什么干扰（我遇到过一些 Vim 的插件，虽然能提供些有用的提示，但是会侵入式地影响正常输入，那就只能删除/禁用了）。其他最重要的功能，我们也已经进行了按键映射，上面也都有了初步的描述。</p><p>还有一个可能有用的命令，不能通过按键映射，那就是重命名的重构。这个命令需要你把光标移到要修改的符号上，然后输入的命令里要有新的名称。比如，如果你要把一个 <code>foo</code> 符号重命名成 <code>bar</code>，需要把光标移动 <code>foo</code> 上面，然后输入：</p><pre><code class=\"language-vim\">:YcmCompleter RefactorRename bar\n</code></pre><p>命令虽然略长，但你一样可以用 <code>&lt;Tab&gt;</code> 来自动完成，所以你多打不了几个字符的。</p><p>YCM 默认只在屏幕底部显示当前行的问题，并且显示很可能被截断。要看到所有的代码问题，可以使用命令 <code>:YcmDiags</code>。</p><p>此外 YCM 还有一些调试命令，一般不需要使用，我这边就不介绍了。你可以自己在帮助文档里查看。</p><h2>RTags（选学）</h2><p>因为有段时间我只能用 libclang 引擎，不能查找符号的引用，因此我安装了另外一个开源工具，<a href=\"https://github.com/Andersbakken/rtags\">RTags</a>，来弥补这一缺憾。在使用 clangd 的情况下，RTags 已经不那么必要了。它仍然提供了一些特别的功能，并且 Linux 发布版里可能仍只提供了 libclang 引擎的 YCM，因此我就把这部分作为选学提供了，相当于本讲内部的一个小加餐。爱折腾并且使用非 Windows 环境（RTags 尚不支持 Windows）的小伙伴们可以把这部分读完，其他人就跳到内容小结吧。</p><h3>安装</h3><p>这次我就只讲自己构建安装的大概过程了。如果你的平台支持二进制安装，相信你应该可以自己搞定了。</p><p>首先我们要安装 RTags 本身。安装前，我们需要确认所在的平台有 CMake、C++ 编译器和 libclang 的开发包。这些都有了之后，我们选一个目录，执行下面的命令就可以编译安装了：</p><pre><code class=\"language-bash\">git clone --recursive https://github.com/Andersbakken/rtags.git\ncd rtags\nmkdir build\ncd build\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Release ..\nmake -j4\nsudo make install\n</code></pre><p>在这些命令都正常执行之后，你就已经把 RTags 的命令安装到了 /usr/local 下面。</p><p>随后我们安装 RTags 和 Vim 集成的插件。这个比较简单，用你的包管理器安装 lyuts/vim-rtags 即可。在配置文件里，我通常只做一处调整：</p><pre><code class=\"language-vim\">let g:rtagsUseLocationList = 0\n</code></pre><p>这是因为 vim-rtags 默认使用位置列表（location list）而不是快速修复窗口。我们之前没有介绍过位置列表，我就快速引用一下文档：</p><blockquote>\n<p>位置列表是一个窗口局部的快速修复列表。由 <code>:lvimgrep</code>、<code>:lgrep</code>、<code>:lhelpgrep</code>、<code>:lmake</code> 等命令产生，它们生成位置列表而不是对应的 <code>:vimgrep</code>、<code>:grep</code>、<code>:helpgrep</code>、<code>:make</code> 生成的快速修复列表。</p>\n<p>位置列表和窗口相关联，而每个窗口都要单独的位置列表。一个位置列表只能和一个窗口相关联。位置列表和快速修复列表相互独立。</p>\n</blockquote><p>我通常不怎么使用位置列表，主要是为了简单，可以使用固定的快捷键。</p><h3>运行和项目配置</h3><p>RTags 是一个客户端/服务器端架构的程序。但它不是用 TCP/IP，而是 Unix 域套接字，一个用户只能运行一个服务器，可以支持多个客户端。启动服务器端的命令非常简单，就是：</p><pre><code class=\"language-bash\">rdm &amp;\n</code></pre><p>我这儿用了 <code>&amp;</code>，让 rdm 在后台运行，但输出仍能直接从终端上看到。在我们刚开始学习使用 RTags 时，我们仍需多多监控 rdm 的输出。</p><p>在某个项目中启用 RTags，最简单的方式就是使用 CMake 输出的 compile_commands.json 文件。我们只需要在这个目录下执行以下命令：</p><pre><code class=\"language-bash\">rc -J .\n</code></pre><p>随后我们就能看到运行 rdm 的那个窗口屏幕哗哗地翻滚，忙着“编译”代码。等到 rdm 忙完了，项目索引就算完成了。而当你修改代码时，rdm 会看到你修改，然后就会自动编译相关的文件，保持索引为最新。</p><p>有没有注意到我上面编译 RTags 的命令已经生成了 compile_commands.json 文件？所以，如果你没有现成的其他 CMake 项目，你可以用这个项目本身来进行搜索。</p><h3>使用</h3><p>如果我们使用默认的 vim-rtags 键映射的话，我们只需要把光标移到一个符号上面，然后输入 <code>\\rf</code>（理解为 find references）即可。下面是一个示例：</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/9b/3f67961bc0bf2c08d8f50ed5b090af9b.gif?wh=1468*870\" alt=\"Fig13.6\" title=\"Vim-rtags 的使用示例\"></p><p>这个结果出来的速度比用 <code>:grep</code> 可快多了！</p><p>它还有很多其他命令，可以用来查找定义、<strong>查找父类</strong>、<strong>查找子类</strong>、<strong>显示调用树</strong>，等等。有些功能在 YCM 里并没有对应物，这也是 RTags 的价值了。你可以在 <a href=\"https://github.com/lyuts/vim-rtags\">vim-rtags 的主页</a>上查看学习所有这些命令及其快捷键。</p><h2>内容小结</h2><p>在本讲中，我们主要介绍了 YouCompleteMe 这个重量级插件，包括其安装和配置。我们可以看到，在插件的帮助下，我们可以获得不输于集成开发环境的自动完成体验，同时，仍然享受 Vim 的快速启动和强大编辑功能。最后我们花了一点点时间介绍了 RTags 工具和 vim-rtags 插件，它在你写 C 族语言而不能使用 clangd 引擎时会特别有帮助。</p><p>YCM 的参数和键映射我写到了示例配置文件里，对应的标签是 <code>l13-unix</code> 和 <code>l13-windows</code>。</p><h2>课后练习</h2><p>今天学完之后的主要任务，当然就是把 YouCompleteMe 装起来、配置好了。它的使用反而是相当简单的，大部分情况下使用 <code>&lt;Tab&gt;</code> 就行。</p><p>至于 RTags，Unix 下的 C++ 程序员们可以根据自己的兴趣，决定是否捣腾一下。这个工具还是有点可玩性的。</p><p>如果遇到什么问题，欢迎留言和我讨论。我们下一讲再见！</p>","neighbors":{"left":{"article_title":"12｜语法加亮和配色方案：颜即正义","id":275752},"right":{"article_title":"14｜Vim 脚本简介：开始你的深度定制","id":280172}},"comments":[{"had_liked":false,"id":259426,"user_name":"leaf","can_delete":false,"product_type":"c1","uid":1060139,"ip_address":"","ucode":"B2CFF00AFA7494","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGiax48CJGAJpha4pJksPia7J7HsiatYwjBA9w1bkrDicXfQz1SthaG3w1KJ2ibOxpia5wfbQ/132","comment_is_top":false,"comment_ctime":1604723319,"is_pvip":false,"replies":[{"id":"94372","content":"这个命令本来就是设计用来输入符号的，如果是取光标下的符号，用 GoToDefinition 子命令不挺好？<br><br>如果是不想手工输入前面这串，可以类似这样定义：<br><br>:nnoremap &lt;Leader&gt;gs :YcmCompleter GoToSymbol <br><br>这样，敲入 \\gs 即可自动输入命令的前面部分。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1604815769,"ip_address":"","comment_id":259426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5899690615","product_id":100055801,"comment_content":"请问老师，我想给ycm的GoToSymbol命令也定义一个快捷键，但发现这个命令不是默认取当前光标下的符号，而是要自己输入带查找的symbol，这样的快捷键应该如何定义？","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508936,"discussion_content":"这个命令本来就是设计用来输入符号的，如果是取光标下的符号，用 GoToDefinition 子命令不挺好？\n\n如果是不想手工输入前面这串，可以类似这样定义：\n\n:nnoremap &amp;lt;Leader&amp;gt;gs :YcmCompleter GoToSymbol \n\n这样，敲入 \\gs 即可自动输入命令的前面部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604815769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245950,"user_name":"doge","can_delete":false,"product_type":"c1","uid":1593251,"ip_address":"","ucode":"9E2D4C8F9B4CBC","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","comment_is_top":false,"comment_ctime":1599118962,"is_pvip":false,"replies":[{"id":"90440","content":"无论如何，cscope没有使用的必要了吧，如果你用C++的话。如果用上编译数据库的话，YCM基本已经满足需求了。ctags和rtags勉强有部分补缺的作用，cscope我看不出来有啥用处。<br><br>类继承你是说查看有什么子类吗？这个在rtags里有，但如果要跟商业软件比界面的漂亮，那肯定是没戏的。<br><br>我试了你说的这个插件，还有点意思。但是，跟其他类似插件一样，单纯依赖名字的加亮，在C++里玩不转——把我的很普通的成员变量next都当成标准库里的函数名称来加亮了。<br><br>朴素点，不是为了朴素，而只是不愿看到错误行为时的无奈之举。如果有插件能进行完全正确的加亮，又不会拖慢编辑的速度，我干吗不用呢？;-)","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1599181200,"ip_address":"","comment_id":245950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5894086258","product_id":100055801,"comment_content":"说一下用后感吧，跳转的速度和精度上比vscode和clion要迅速很多，就是快捷键比较多，得多用熟能生巧才行。<br>另一个就是得ctags+cscope+YCM+rtags一起用才能得到最好的跳转体验。<br>基本就是C-] \\gt \\rj \\rT轮番上阵，哈哈！<br>整体感觉还是非常良好的，不过如果CLion没那么卡和吃内存就好了，CLion的类继承关系这一块的体验很好，不知道vim这一块有没有类似的操作，另外CLion的调试也很适合小白使用。但Clion经常用着用着就卡死了，尴尬。<br>当然如果vim实在玩不转，vscode和CLion还是可以作为替代的，哈哈。<br>最后一点就是高亮配色方案的事，老师好像比较喜欢朴素的色调，但我看多色调习惯了，最后用了octol&#47;vim-cpp-enhanced-highlight这个插件，但感觉还是挺一般的。不知道有没有大神有啥推荐的配置。<br>","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505016,"discussion_content":"无论如何，cscope没有使用的必要了吧，如果你用C++的话。如果用上编译数据库的话，YCM基本已经满足需求了。ctags和rtags勉强有部分补缺的作用，cscope我看不出来有啥用处。\n\n类继承你是说查看有什么子类吗？这个在rtags里有，但如果要跟商业软件比界面的漂亮，那肯定是没戏的。\n\n我试了你说的这个插件，还有点意思。但是，跟其他类似插件一样，单纯依赖名字的加亮，在C++里玩不转——把我的很普通的成员变量next都当成标准库里的函数名称来加亮了。\n\n朴素点，不是为了朴素，而只是不愿看到错误行为时的无奈之举。如果有插件能进行完全正确的加亮，又不会拖慢编辑的速度，我干吗不用呢？;-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599181200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357878,"user_name":"谁家内存泄露了","can_delete":false,"product_type":"c1","uid":2436042,"ip_address":"上海","ucode":"CDDA3BE17FE40E","user_header":"https://static001.geekbang.org/account/avatar/00/25/2b/ca/71ff1fd7.jpg","comment_is_top":false,"comment_ctime":1663727593,"is_pvip":false,"replies":[{"id":"130350","content":"我用过 Ubuntu 20.04，上面直接带的 YCM 版本比较老，是不支持这个功能的。自己安装新版本（需要自己运行 install.py 来安装 clangd）就可以。","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1664031570,"ip_address":"上海","comment_id":357878,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1663727593","product_id":100055801,"comment_content":"请问老师，我安装了ycm，采用的是在ubuntu上直接用apt安装的方式；<br>在c++的工程中添加了对应的json文件；<br>现在的现象是函数&#47;符号能够跳转了，但是无法查找相关的引用即没有这个命令：YcmCompleter GoToReferences，这个问题您有什么思路吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588730,"discussion_content":"我用过 Ubuntu 20.04，上面直接带的 YCM 版本比较老，是不支持这个功能的。自己安装新版本（需要自己运行 install.py 来安装 clangd）就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664031570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2436042,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2b/ca/71ff1fd7.jpg","nickname":"谁家内存泄露了","note":"","ucode":"CDDA3BE17FE40E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588401,"discussion_content":"-- 这个问题通过重新手动安装YCM的方式解决了，安装的是当前时间github上的最新版本，注意两点：\n---- 1 参考的教程为：https://www.mintimate.cn/2022/05/05/vimYouCompleteMe/\n---- 2 安装ycm的install.py脚本时，输入的参数视自己的开发语言而定，我用C/C++，所以传入的参数为：--clangd-completer\n-- 猜测是Ubuntu自带的ycm包的版本较老，支持功能有限。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663744320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357599,"user_name":"Qfeng","can_delete":false,"product_type":"c1","uid":1466121,"ip_address":"上海","ucode":"1248E70012BBA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/5f/09/2ec44412.jpg","comment_is_top":false,"comment_ctime":1663469019,"is_pvip":false,"replies":[{"id":"130217","content":"拿同样环境的机器安装，然后把整个 .vim 目录复制过去。","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1663593551,"ip_address":"上海","comment_id":357599,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1663469019","product_id":100055801,"comment_content":"公司内网无法访问网络，只能通过外网电脑下载好后拷贝的方式传输文件进入。这种情况下试过，无法安装YCM，它会在安装的时候访问github，请问老师这种问题可以如何绕过？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588217,"discussion_content":"拿同样环境的机器安装，然后把整个 .vim 目录复制过去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663593551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295126,"user_name":"軟件賺硬幣","can_delete":false,"product_type":"c1","uid":1736543,"ip_address":"","ucode":"0BB619B53A3046","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7f/5f/1d82812f.jpg","comment_is_top":false,"comment_ctime":1622257052,"is_pvip":false,"replies":[{"id":"107188","content":"请再仔细看看配置部分，我特地讲到了 .ycm_extra_conf.py 文件，及我为解决这个问题准备的 adah1972&#47;ycmconf 插件。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1622365591,"ip_address":"","comment_id":295126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622257052","product_id":100055801,"comment_content":"老师好，我是Linux初学者。我的Ubuntu20.04下面运行了<br>sudo apt install vim-youcompleteme，<br>vim-addon-manager install youcompleteme两行代码之后，然后用vim打开新文件，还是用不了ycm。显示NoExtraConfDetected: No .ycm_extra_conf.py file detected, so no compile flags are available…（后面字体看不到了，笔记本屏幕限制）","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520956,"discussion_content":"请再仔细看看配置部分，我特地讲到了 .ycm_extra_conf.py 文件，及我为解决这个问题准备的 adah1972/ycmconf 插件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622365591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259781,"user_name":"supakito","can_delete":false,"product_type":"c1","uid":1387156,"ip_address":"","ucode":"3060AB5E0D4E24","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gKnIR8mga02s9xdQoxyJBibmuxHGhfQ8WZicia3Ie4wBQKg4Zc1oVoS03mvaCD46je9xCza25qXc3w6KMckpS0BqQ/132","comment_is_top":false,"comment_ctime":1604833454,"is_pvip":false,"replies":[{"id":"94418","content":"没有比较。这个补全的方法不同，比较耗算力，而且对大项目是需要付费的，我没有尝试。<br><br>对于这类工具我持审慎怀疑：如果它真能预测得很好，那是不是说明代码中的重复有点多了？<br><br>不过，那只是个人没有使用过的瞎猜测。实践是检验真理的标准。你自己试试不就得了？适合自己的就是好的，适合你的不一定适合其他人，反过来也一样。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1604894919,"ip_address":"","comment_id":259781,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1604833454","product_id":100055801,"comment_content":"老师，感觉最近tabnine好像很火的样子，不知道和ycm相比，哪个更好用一些？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509024,"discussion_content":"没有比较。这个补全的方法不同，比较耗算力，而且对大项目是需要付费的，我没有尝试。\n\n对于这类工具我持审慎怀疑：如果它真能预测得很好，那是不是说明代码中的重复有点多了？\n\n不过，那只是个人没有使用过的瞎猜测。实践是检验真理的标准。你自己试试不就得了？适合自己的就是好的，适合你的不一定适合其他人，反过来也一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604894919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323198,"discussion_content":"再补个说明。根据 https://zhuanlan.zhihu.com/p/73811872 下的讨论，似乎实际使用体验并没有那么好？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604895186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256497,"user_name":"浩浩","can_delete":false,"product_type":"c1","uid":1580841,"ip_address":"","ucode":"47558B9C9B7368","user_header":"https://static001.geekbang.org/account/avatar/00/18/1f/29/c7a69190.jpg","comment_is_top":false,"comment_ctime":1603638814,"is_pvip":true,"replies":[{"id":"93363","content":"可能就是下载&#47;网络出了问题。我目前试下来是可以成功的，clangd的URL跟你的完全相同。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1603645775,"ip_address":"","comment_id":256497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603638814","product_id":100055801,"comment_content":"brew list. 安装了一下软件<br>=============================<br>autoconf\tcmake\t\tfzf\t\tgettext\t\ticu4c\t\tlua\t\tnode\t\tpkg-config\tpython@3.9\truby\t\tuniversal-ctags<br>automake\tcscope\t\tgdbm\t\tgo\t\tlibyaml\t\tmacvim\t\topenssl@1.1\tpython@3.8\treadline\tsqlite\t\txz<br><br>ycm 只加 clangd  选项以下报错 【我需要自己安装 clangd 吗，请问？】<br>=======================<br><br>Downloading Clangd from https:&#47;&#47;dl.bintray.com&#47;ycm-core&#47;clangd&#47;clangd-10.0.0-x86_64-apple-darwin.tar.bz2...<br>ERROR: downloaded Clangd archive does not match checksum.<br>","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508033,"discussion_content":"可能就是下载/网络出了问题。我目前试下来是可以成功的，clangd的URL跟你的完全相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603645775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253997,"user_name":"gigglesun","can_delete":false,"product_type":"c1","uid":1012912,"ip_address":"","ucode":"7AE6C7DCE06063","user_header":"","comment_is_top":false,"comment_ctime":1603011123,"is_pvip":false,"replies":[{"id":"92784","content":"在同样软件配置的机器上，使用git命令和安装命令，完全结束了（建议测试一下）再拷贝结果。<br><br>安装过程中也会下载东西的，所以不能在目标机上执行安装命令。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1603067596,"ip_address":"","comment_id":253997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603011123","product_id":100055801,"comment_content":"YouCompleteMe可以通过离线的方式安装吗？ 公司的服务器不能连接外网，我可以在自己的电脑通过<br><br>git clone --recurse-submodules \\<br>          --shallow-submodules \\<br>    https:&#47;&#47;github.com&#47;ycm-core&#47;YouCompleteMe.git<br>装好后，把这个YouCompleteMe文件夹拷贝到公司服务器，然后我再额外的安装对应的语言引擎这样安装吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507242,"discussion_content":"在同样软件配置的机器上，使用git命令和安装命令，完全结束了（建议测试一下）再拷贝结果。\n\n安装过程中也会下载东西的，所以不能在目标机上执行安装命令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603067596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252658,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1602425014,"is_pvip":false,"replies":[{"id":"92403","content":"如果报的错是跟clang相关的话，可能是vim-youcompleteme没有正确地依赖到libclang1上。我在Ubuntu 20.04 LTS上碰到过，运行sudo apt install libclang1可以解决该问题。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1602504489,"ip_address":"","comment_id":252658,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1602425014","product_id":100055801,"comment_content":"老师我这里 ubuntu 使用 apt install vim-youcompleteme 后，提示找不到引擎，估计是还需要单独安装，最后还是用了编译安装的方式。我也安装了 vim-autopairs，确实带来了很多困扰，最头痛的就是需要只输入一对的第一个符号的情况，每次输入都会自动输出两个，然后删除第二个又会自动把第一个给删除...看了老师的留言，果断把它删除了。������","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506826,"discussion_content":"如果报的错是跟clang相关的话，可能是vim-youcompleteme没有正确地依赖到libclang1上。我在Ubuntu 20.04 LTS上碰到过，运行sudo apt install libclang1可以解决该问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602504489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024461,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","nickname":"瀚海星尘","note":"","ucode":"90F418299EA3BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315345,"discussion_content":"老师，我用的也是20lts。试了还是不行，但是另外发现缺了 python 的依赖，我的python 是通过 miniconda 装的，补全了依赖后发现 ycm 服务一直没办法启动，提示是 ycm_core 文件没有找到，上github上看了下，出现这个报错都是自行编译没编译成功导致的，但是我的理解是通过包安装应该不用通过 python 编译？而且对应目录下也是有这个文件的，捣鼓了好久感觉头大，回头再慢慢研究😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603265395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1024461,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","nickname":"瀚海星尘","note":"","ucode":"90F418299EA3BF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318930,"discussion_content":"Miniconda 估计和 Ubuntu 自带的 Vim 和 YCM 是不能一起工作的——系统装的包肯定是依赖系统的 Python。用 apt 安装 python-is-python3，把 Conda 的 Python 移出默认的路径试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603885474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315345,"ip_address":""},"score":318930,"extra":""}]}]},{"had_liked":false,"id":245272,"user_name":"doge","can_delete":false,"product_type":"c1","uid":1593251,"ip_address":"","ucode":"9E2D4C8F9B4CBC","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","comment_is_top":false,"comment_ctime":1598881558,"is_pvip":false,"replies":[{"id":"90200","content":"如果是编译不过，那你可能得向作者报告 bug 了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598888353,"ip_address":"","comment_id":245272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598881558","product_id":100055801,"comment_content":"ubuntu环境按照老师的命令安装rtags失败，报错<br>rtags&#47;src&#47;rct&#47;rct&#47;Apply.h:46:10: error: unknown<br>      type name &#39;size_t&#39;; did you mean &#39;std::size_t&#39;?<br>最后直接下载release 2.3.8的tarball编译成功。。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504826,"discussion_content":"如果是编译不过，那你可能得向作者报告 bug 了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598888353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245165,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1598852785,"is_pvip":false,"replies":[{"id":"90237","content":"我对 YCM 的 JavaScipt 支持没有细节了解，只能凭经验随便说两句了。<br><br>1. 在 C++ 里，如果没有编译命令文件的支持，也只能支持到差不多程度，但从来没见过跳不到“后面”的情况，毕竟，工具应该是把整个文件的符号分析出来的。<br><br>2. Vim 的 &lt;C-O&gt; 键是跳回，这个跟插件无关，哪儿都可以用。<br><br>应该按照 YCM 的要求，安装时使用 --ts-completer 选项就行。如果效果不好，那是能力问题。像 C++ 用 rtags 属于老版本引擎能力不足，rtags 本身和 YCM 没有任何集成关系。用了 clangd 引擎就基本上不需要 rtags 了。<br><br>对于 JavaScript，也许你可以严肃考虑一下 coc.nvim 这个选项。完成引擎本身的开发方式也决定了它的重点，YCM 明显是偏向 C++ 的。而 coc.nvim 本身就依赖于node.js，在 JavaScript 上如果强于 YCM，我完全不会意外，虽然我没有用过。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598931665,"ip_address":"","comment_id":245165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598852785","product_id":100055801,"comment_content":"安老师给的步骤安装了 YCM，试着编辑了 javascript 文件，感觉有几个地方不是太清楚：<br><br>1. YCM 中的跳转(GoTo)貌似只能在单个文件中跳转，不能跳转到其它的文件中去？有些时候，如果需要跳转到函数，只能跳转到前面的定义和声明，无法跳转到后面的定义和声明。当无法跳转的时候，右下方会出现 `KeyError: &#39;file&#39;` 的错误，或者是提示你使用命令不恰当的错误<br><br>2. YCM 支持回跳吗？就是跳转到一个定义或者声明处，然后再回到跳转前的地方，感觉这个对浏览代码时特别有用<br><br>是不是除了安装 YCM，还得相应安装配套的其它插件（比如 C++ 的话就需要 rtags）。感觉好难������","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504805,"discussion_content":"我对 YCM 的 JavaScipt 支持没有细节了解，只能凭经验随便说两句了。\n\n1. 在 C++ 里，如果没有编译命令文件的支持，也只能支持到差不多程度，但从来没见过跳不到“后面”的情况，毕竟，工具应该是把整个文件的符号分析出来的。\n\n2. Vim 的 &amp;lt;C-O&amp;gt; 键是跳回，这个跟插件无关，哪儿都可以用。\n\n应该按照 YCM 的要求，安装时使用 --ts-completer 选项就行。如果效果不好，那是能力问题。像 C++ 用 rtags 属于老版本引擎能力不足，rtags 本身和 YCM 没有任何集成关系。用了 clangd 引擎就基本上不需要 rtags 了。\n\n对于 JavaScript，也许你可以严肃考虑一下 coc.nvim 这个选项。完成引擎本身的开发方式也决定了它的重点，YCM 明显是偏向 C++ 的。而 coc.nvim 本身就依赖于node.js，在 JavaScript 上如果强于 YCM，我完全不会意外，虽然我没有用过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598931665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244173,"user_name":"YouCompleteMe","can_delete":false,"product_type":"c1","uid":1232859,"ip_address":"","ucode":"89B5A75DA85E0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cf/db/9693d08f.jpg","comment_is_top":false,"comment_ctime":1598417761,"is_pvip":false,"replies":[{"id":"89960","content":"1. 不是插件，就是手工设置了 statusline。没讲这个是因为大部分人应该会去使用 Airline（后面会讲），大概不会手工设了。现在手机上看不了当前配置，应该就是 http:&#47;&#47;wyw.dcweb.cn&#47;vim&#47;_vimrc.html 的样子加上 fugitive 提供的 Git 信息。<br><br>2. 括号补全是个看似很小、实际很复杂的功能。你希望它很自动，同时又希望可以盲打，还能不影响删除之类的操作，都做好不容易。前不久我看到一个看似不错的补全插件，都已经写了一段推荐文字了，结果在编辑某段 Vim 脚本时发现会导致我根本无法删除我想要删除的部分。那就卸载了。不好用的功能不如不用。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598488126,"ip_address":"","comment_id":244173,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598417761","product_id":100055801,"comment_content":"老师，我有两个疑问：<br>1.截图里是否使用了statusline的插件，我的用了老师的配置，没有显示 [+] &#47; utf-8 &#47; 当前行百分比。<br>2.老师平时写代码会使用括号自动补全吗～","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504507,"discussion_content":"1. 不是插件，就是手工设置了 statusline。没讲这个是因为大部分人应该会去使用 Airline（后面会讲），大概不会手工设了。现在手机上看不了当前配置，应该就是 http://wyw.dcweb.cn/vim/_vimrc.html 的样子加上 fugitive 提供的 Git 信息。\n\n2. 括号补全是个看似很小、实际很复杂的功能。你希望它很自动，同时又希望可以盲打，还能不影响删除之类的操作，都做好不容易。前不久我看到一个看似不错的补全插件，都已经写了一段推荐文字了，结果在编辑某段 Vim 脚本时发现会导致我根本无法删除我想要删除的部分。那就卸载了。不好用的功能不如不用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598488126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244144,"user_name":"know-one","can_delete":false,"product_type":"c1","uid":1747626,"ip_address":"","ucode":"A6AC95CCC4F617","user_header":"","comment_is_top":false,"comment_ctime":1598409785,"is_pvip":false,"replies":[{"id":"89885","content":"这个我不知道（Python写对象继承似乎都很少）。看看有没有其他同学知道吧。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598421607,"ip_address":"","comment_id":244144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598409785","product_id":100055801,"comment_content":"请问python有没有哪个插件能显示继承关系？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504500,"discussion_content":"这个我不知道（Python写对象继承似乎都很少）。看看有没有其他同学知道吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598421607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244087,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1598400661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598400661","product_id":100055801,"comment_content":"ycm确实难装，以前总想着通过插件方式来装， 今天才知道 其中的原理。 ","like_count":0},{"had_liked":false,"id":244074,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1598373145,"is_pvip":false,"replies":[{"id":"89881","content":"又最快。😄<br><br>如果重命名常用的话，也可以自己定义个短命令，如：<br><br>:command -nargs=1 RR YcmCompleter RefactorRename &lt;args&gt;","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598410219,"ip_address":"","comment_id":244074,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598373145","product_id":100055801,"comment_content":"有些功能确实很吸引人。<br>比如自动补全时自动用正则过滤候选词。<br><br>曾经我也折腾过ycm，但由于有些东西不会用，自己没调通，最终也放弃了。<br>要是能早些看到这篇文章，应该会少走不少弯路。<br><br>对于老师说的这个重构变量名需要手敲的问题，<br>:YcmCompleter RefactorRename bar<br>在golang中有个小插件解决了这个问题，<br>它是用快捷键在命令行触发一个提示框，告知你想把当前光标下的变量重命名为啥，等你输入完毕按回车后再替换。<br><br>这个功能实现起来应该也不复杂。<br>如果这个重构功能还蛮常用的话，可以折腾一下。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504469,"discussion_content":"又最快。😄\n\n如果重命名常用的话，也可以自己定义个短命令，如：\n\n:command -nargs=1 RR YcmCompleter RefactorRename &amp;lt;args&amp;gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598410219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301089,"discussion_content":"看了下,golang中重命名当前光标下的变量名,是`vim-go`这个大插件提供的.\n核心的逻辑比较清晰,就是提示并等待输入.\n见这里:\nhttps://github.com/fatih/vim-go/blob/7c14e8ae5de7f4562c365249c83abc4d0e0d906c/autoload/go/rename.vim#L8-L14\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598405342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}