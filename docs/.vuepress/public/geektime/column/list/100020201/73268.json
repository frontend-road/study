{"id":73268,"title":"22 | 从阿里内部产品看海量数据处理系统的设计（下）：架构与创新","content":"<p>上一期，Doris提出了目前阿里巴巴海量KV存储方面的问题，给出了Doris的业务价值、设计目标和技术指标。但是Doris项目组还必须证明自己有已经经过论证的架构技术方案，可以实现前面设定的目标，立项后可以迅速启动执行，不需要再去摸索尝试，风险可以把控。</p><p>因此，PPT后面的内容主要就是阐述<span class=\"orange\">Doris的架构方案和创新设计</span>。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/5b/eb949889c4fe1823ced433ea59123a5b.png?wh=1244*798\" alt=\"\"></p><p>Doris是一种支持Key、Value数据结构的分布式存储系统，核心要解决的问题是分布式路由、分布式集群伸缩、分布式数据冗余与失效转移。所以Doris把分布式存储系统很重要的一块，也就是数据存储部分转移出去，使用第三方软件完成，当时选择Berkeley DB作为Doris的底层存储Store，Doris自己专注于分布式技术实现。</p><p>Doris的主要访问模型是，应用程序KV Client启动后，连接控制中心Administration，从控制中心获得整个Doris集群的服务器部署信息及路由算法，Client使用Key作为参数进行路由计算，计算得到集群中某些服务器作为当前Key、Value数据存储的服务器节点；然后KV Client使用自定义的通信协议将数据和命令传输给服务器上的Data Server组件，DataServer再调用本地的Berkeley DB将数据存储到本地磁盘。</p><!-- [[[read_end]]] --><p>Doris的核心技术就是这个架构模型上创新性地实现了自己独特的<strong>分区路由算法、失效转移策略、集群伸缩设计方案</strong>。并在项目开发过程中，将这个三个技术创新申请了技术专利。下面我们重点看下这三个技术创新。</p><h2>分区路由算法</h2><p><img src=\"https://static001.geekbang.org/resource/image/01/d6/019cd0d87daf9d356bd7326cd2a928d6.png?wh=1058*778\" alt=\"\"></p><p>Doris采用一种基于虚拟节点的分区路由算法，Key使用余数Hash算法计算得到虚拟节点下标。</p><pre><code>虚拟节点下标 = hash(md5(key)) mod 虚拟节点个数\n</code></pre><p>虚拟节点和物理服务器节点之间计算建立一个映射关系，通过映射关系查找实际要访问的物理服务器IP地址。</p><p>路由算法在初始化的时候就预先设立一个较大的数字，比如100000，当存储服务器集群需要伸缩的时候，要增加一个服务器，虚拟节点和下标计算算法不变，仅仅调整虚拟节点和物理服务器节点的映射关系就可以了，如PPT中图2所示。</p><p>这种基于虚拟节点的分区路由算法相对于传统的一致性Hash路由算法，可以获得更好的数据负载均衡，即数据在各个服务器上的存储分布更加均衡。在集群伸缩、增加服务器的时候可以做到更少迁移数据。在实践中，这种算法的一个更大优势是，如果将物理存储的文件系统和虚拟节点关联，即一个虚拟节点对应一个物理存储文件，那么当集群扩容，进行数据迁移的时候，就可以以文件为单位进行数据拷贝，这样迁移速度和运维成本都非常低。</p><p>这个基于虚拟节点的分区路由算法的关键难点是，如何计算虚拟节点与物理节点的映射关系，特别是在增加服务器的时候，如何重新计算这个映射关系，使新的映射关系依然处于负载均衡的状态，也就是每个物理节点映射的虚拟节点个数差不太多相同。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/b8/0a9dde28106a7b279048d755390638b8.png?wh=1054*782\" alt=\"\"></p><p>项目组抽象了一个数学公式完成映射关系的计算，你可以看上面PPT示例。</p><h2>失效转移策略</h2><p>在前面在技术指标上，曾经承诺Doris的可用性为99.997%，保证数据可用性的策略主要是数据存储冗余备份和数据访问失效转移。</p><p>我们先看下Doris如何实现冗余备份。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/5e/cd2bd7fc384155e29a2b0dad4c92575e.png?wh=1058*788\" alt=\"\"></p><p>Doris将存储服务器集群分成多个group（默认情况下为2个group），数据写操作的时候，根据分区路由算法，在每个group里计算一个服务器地址，异步并发同时向多个group的服务器上写入数据，以此保证数据有多个备份。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/fc/eba8dc671ec1a750fae74221a0782cfc.png?wh=1052*688\" alt=\"\"></p><p>当KV Client访问某台服务器失败的时候，Doris会启动失效转移策略。具体来说，Doris将失效分为三种情况：瞬时失效、临时失效、永久失效，不同情况采用不同的失效转移策略。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/0d/0584b85e62b7917fce2f11f587ea8e0d.png?wh=1054*738\" alt=\"\"></p><p>当第一次不能访问服务器的时候，Doris认为这是瞬时失效，会进行访问重试，如果三次重试后仍然失败，就会把失败信息提交给控制中心。控制中心检测该服务器心跳是否正常，并进行尝试访问，如果访问失败，就将该服务器标记为临时失效，并通知所有KV Client应用程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/e8/8fb946ae9879bfbfdf403a8b686605e8.png?wh=1052*774\" alt=\"\"></p><p>KV Client应用程序收到服务器失效通知的时候，启动临时失效策略，将原本需要写入到失效节点（图中的物理节点2）的数据写入临时日志节点（图中的物理节点X），而读操作则只访问正常的物理节点1。</p><p>当临时失效节点2恢复正常运行，系统会将失效期间写入临时日志节点X的数据合并恢复到物理节点2，这段时间物理节点2只提供写服务，不提供读服务。当所有数据恢复完毕，集群访问恢复正常。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/87/390216499d8a68f9f9f607bd18fc8987.png?wh=1058*692\" alt=\"\"></p><p>而对于永久失效的节点，需要添加新的服务器以代替下线的服务器，基本策略就是将另一个group正常使用的服务器数据拷贝到新添加的服务器上即可。</p><p>需要说明的是，上述三种失效转移过程，除了服务器永久失效后，需要工程师手动添加服务器，并到控制中心添加新服务器配置、激活启用外，其他情况不需要任何人工干预，全部自动化完成。</p><h2>集群伸缩设计</h2><p>分布式系统的一个重要设计目标是集群弹性可伸缩，如果当前的服务器数目不能满足业务的负载压力要求，那么就添加更多的服务器去增强处理能力。对于分布式数据存储服务器的伸缩性扩容而言，必然伴随着数据的迁移，就是将原先服务器中的部分数据迁移到新的服务器上。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/fe/ddaf1e4c4e13be3bb1085f2dda9ecefe.png?wh=1074*796\" alt=\"\"></p><p>具体过程为：</p><p>1.向集群中一个分组group添加新的物理服务器，部署并启动Doris服务器进程。</p><p>2.将这个group的所有服务器设置为临时失效。</p><p>3.使用路由算法重新计算加入服务器后的虚拟节点分布，并把需要迁移的虚拟节点对应的物理文件拷贝到新服务器上。</p><p>4.设置group所有服务器临时失效恢复，将扩容期间的数据更新写回到这些服务器。</p><p>至此，PPT最前面提出的设计目标，经过一系列的关键技术设计分析，证明是技术是可行的，风险是可控的，可以启动开发了。</p><p>实际上当时项目组大概花了半年的时间开发Doris系统，部署上线以后，阿里巴巴多个业务产品接入Doris，并在极少运维的情况下，无故障运行了数年。后来服务器集群经过几次扩容，规模达到数百台服务器，实践证明当时的设计是经得起考验的。</p><p>最后，我想再说一下关于专利的事。公司一般都是希望能够申请更多的技术专利，这样在跟其他公司进行专利大战的时候才能做到“手中有枪，心中不慌”，特别是在遇到“专利流氓”的时候。所以大部分公司对工程师申请技术专利都比较支持。</p><p>大一点的公司法务部门通常会有专门的知识产权律师，他们会帮助工程师申请技术专利，工程师只要按照一般写技术文档的写法写一个技术交底书给公司律师，律师审核后会让专门的专利代理公司帮助编写专门的技术专利申请书，所以工程师申请专利的工作量并不大。</p><p>很多公司为了支持申请技术专利，会有很多奖励，比如申请成功一个专利会有几万的奖励，这对于工程师也是一笔不错的收入。做技术的同学可以关注下自己公司的专利奖励政策，如果还没有相关的专利奖励，正好你也可以借此机会说服公司管理层在这方面增加一些激励，这是一件利国家、利公司、利自己的好事。</p><h2>小结</h2><p>分布式数据存储系统是分布式系统中最有技术挑战的领域之一。其他的各种分布式系统，由于对数据的一致性和系统的可用性要求并没有那么高 ，所以技术难度和挑战相对没有分布式存储系统这么高。自己参与设计、开发这样的系统，会对分布式系统，乃至大数据系统有更深刻地理解，希望这两期专栏能引导你从开发者的视角，看待分布式大数据系统是如何设计开发出来的，从而对大数据技术有新的认识和领悟。</p><p>如果你在工作中遇到有技术挑战的项目，可以尽量找机会去参与，你能收获的不仅仅是最终开发出来的产品和公司的认可，还有自己技术的提升和更有想象力的职业前景。</p><h2>思考题</h2><p>今天的文中提到，Doris的分区路由算法在设计的时候，提出了一个数学模型计算虚拟节点和物理节点的映射关系。但是最后在开发过程中，项目组并没有使用这个数学模型进行计算，你能想到的实现算法还有什么呢？</p><p>你也可以在Doris的源代码中找到相关代码，分析Doris的最终实现算法和你的思考有什么异同。</p><p>欢迎你点击“请朋友读”，把今天的文章分享给好友。也欢迎你写下自己的思考或疑问，与我和其他同学一起讨论。</p><hr><p>扩展阅读：</p><p>对专利感兴趣的同学可以进一步阅读Doris产品申请的三个技术专利：</p><p><a href=\"http://www.soopat.com/Patent/201110325238\">http://www.soopat.com/Patent/201110325238</a></p><p><a href=\"http://www.soopat.com/Patent/201110294092\">http://www.soopat.com/Patent/201110294092</a></p><p><a href=\"http://www.soopat.com/Patent/201110285802\">http://www.soopat.com/Patent/201110285802</a></p><p>Doris源代码地址：</p><p><a href=\"https://github.com/itisaid/Doris\">https://github.com/itisaid/Doris</a></p>","neighbors":{"left":{"article_title":"21 | 从阿里内部产品看海量数据处理系统的设计（上）：Doris的立项","id":73047},"right":{"article_title":"23 | 大数据基准测试可以带来什么好处？","id":73644}},"comments":[{"had_liked":false,"id":63965,"user_name":"vigo","can_delete":false,"product_type":"c1","uid":1086295,"ip_address":"","ucode":"036CEE5F3FABE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/57/3ffdfc8d.jpg","comment_is_top":false,"comment_ctime":1548632700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57383207548","product_id":100020201,"comment_content":"智慧书，不仅说技术，还育人😄","like_count":14},{"had_liked":false,"id":282005,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1615010556,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40269716220","product_id":100020201,"comment_content":"遵循老师的5-20-2原则，5分钟没看进去，放弃，等待下一次偶遇","like_count":10,"discussions":[{"author":{"id":2440414,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/udFtP9pbRmYiawNS9RyCib4fI1UicBWg6vh11znB737Viboibc3NpSIsaAJOyJA0INwLdKqQibpsXKMiaRYAU9KMCenZg/132","nickname":"Geek_ZH","note":"","ucode":"149CE604A227D5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574604,"discussion_content":"哈哈哈 俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654173486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114662,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1563358828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40218064492","product_id":100020201,"comment_content":"专栏真的是从 0 开始学大数据吗？看哭了，只能看懂一二两章","like_count":10},{"had_liked":false,"id":50943,"user_name":"玉剑冰锋","can_delete":false,"product_type":"c1","uid":1214202,"ip_address":"","ucode":"8EA56A71BA5B22","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/fa/4bcd7365.jpg","comment_is_top":false,"comment_ctime":1545092358,"is_pvip":false,"replies":[{"id":"18404","content":"1.Doris没有做数据压缩<br>2.Doris当时版本没有做完整性（正确性）验证，但是可以简单做多读，然后进行数据对比验证，不过这样要求的数据备份数要更多。<br>3.不会，路由算法保证负载均衡，但是如果虚拟节点数和物理节点数相差不大时，会有数据倾斜，所以要求一开始设计的虚拟节点要足够多，是未来最大物理节点数的十倍以上<br>","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1545114266,"ip_address":"","comment_id":50943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40199798022","product_id":100020201,"comment_content":"您好老师，请教几个问题1.架构设计中数据压缩比及数据存储时效策略是如何设计的？2.数据的完整性如何验证？3.后期运行过程中尤其是某个节点存储空间低于其他节点时，是否会发生数据倾斜的问题？","like_count":9,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433194,"discussion_content":"1.Doris没有做数据压缩\n2.Doris当时版本没有做完整性（正确性）验证，但是可以简单做多读，然后进行数据对比验证，不过这样要求的数据备份数要更多。\n3.不会，路由算法保证负载均衡，但是如果虚拟节点数和物理节点数相差不大时，会有数据倾斜，所以要求一开始设计的虚拟节点要足够多，是未来最大物理节点数的十倍以上\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545114266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63052,"user_name":"大京京","can_delete":false,"product_type":"c1","uid":1030473,"ip_address":"","ucode":"DBA709EA031FDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b9/49/daa1f0b6.jpg","comment_is_top":false,"comment_ctime":1548237486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18728106670","product_id":100020201,"comment_content":"有部分ppt内容是不准确的。新增一个物理节点，你前面说的算法是无法保证key1的路由节点pn1不移动的。只是数据迁移的时候，你是每个现有节点都各自迁移自己的一部分去新节点，现有节点之间不做迁移而已。","like_count":4},{"had_liked":false,"id":51133,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1545119270,"is_pvip":false,"replies":[{"id":"18606","content":"分片在group内分片，这里节点1，2分属不同group，存放的是同一份数据的两个拷贝","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1545190216,"ip_address":"","comment_id":51133,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135053862","product_id":100020201,"comment_content":"老师你好，请问下，关于fail over部分，物理节点1，物理节点2是分别存储两片数据，当物理节点2挂掉的时候，文章中说物理节点1提供所有的read操作，我想问的是，节点1，2负责两片不同的数据，节点1如何承担原本访问节点2的读操作？谢谢。","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433300,"discussion_content":"分片在group内分片，这里节点1，2分属不同group，存放的是同一份数据的两个拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545190216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137279,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1569676129,"is_pvip":false,"replies":[{"id":"53688","content":"谢谢😄","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1570603182,"ip_address":"","comment_id":137279,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864643425","product_id":100020201,"comment_content":"和redis的分片方式类似呀😄，你是虚拟节点，她是哈希槽。和一致性哈希也挺像的，只是虚拟节点和物理节点的映射更加的灵活可控。<br>老师牛逼，致敬！","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469016,"discussion_content":"谢谢😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570603182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220775,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","nickname":"送普选","note":"","ucode":"AB2C98BB9C3A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32702,"discussion_content":"确实，Redis的Slot配置没有直接可以定制的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571058531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119867,"user_name":"weiruan85","can_delete":false,"product_type":"c1","uid":1069949,"ip_address":"","ucode":"8CFD7B198759E3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ng7NIuMhg8E3U6DjwJlTKFcEYsTtFJkiag22G13JXSiaobpibfI6MicKg93VNqQnG7Rkvl2OfCsAaSksCAVbNDp8zw/132","comment_is_top":false,"comment_ctime":1564715035,"is_pvip":false,"replies":[{"id":"44655","content":"在临时失效和恢复过程中，同一份数据的值在不同服务器上可能是不同的，不满足CAP中的C。但是Doris会选择正确的服务器读取数据，保证用户访问的数据是一致的，即用户一致性，失效恢复结束，多个数据拷贝的值也会恢复一致，即最终一致性。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1565167294,"ip_address":"","comment_id":119867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859682331","product_id":100020201,"comment_content":"老师，文章中还有几个重要的问题没有提交：1. 这种设计下，cap是如何抉择的。  在发生网络分区的时候，是选择C 还是A  ？ 按照文章中的内容，感觉Doris没有采用逻辑日志复制的技术实现，而是采用了双写的实现思路，当时在设计时为什么这么考虑呢。  如果是双写，那么cap理论是不是就不太适用了，备份的数据和primary数据一定是一致的。 当网络发生分区后，执行故障转移，一直保证数据的一致性。 ","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461102,"discussion_content":"在临时失效和恢复过程中，同一份数据的值在不同服务器上可能是不同的，不满足CAP中的C。但是Doris会选择正确的服务器读取数据，保证用户访问的数据是一致的，即用户一致性，失效恢复结束，多个数据拷贝的值也会恢复一致，即最终一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565167294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52136,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1545316498,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5840283794","product_id":100020201,"comment_content":"感谢老师分享阿里巴巴的内部分布式数据库系统的立项过程。能了解行业头部的大公司，是如何作出如此重大决定，并快速落地支持、加速公司的成长。<br><br>我虽然是计算机专业毕业，但并没有计算机工业领域的工作经历，所以可能对其中的一些细节缺乏应有的感知力，这个慢慢来吧。<br><br>我目前在大型国企总部工作，在互联网+的大势下，公司立项了采购监督信息化课题，旨在借助大数据技术，实现采购管理全过程，事前、事中、事后的风险防控与预警体系。有效降低违法违规行为，提高效率。我正在参与这个课题，但是对项目中大数据技术的切入点，没有明确的思路，想听听老师建议。谢谢","like_count":1},{"had_liked":false,"id":51649,"user_name":"William","can_delete":false,"product_type":"c1","uid":1070727,"ip_address":"","ucode":"3FAA4908CBC7BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/87/2b5c7370.jpg","comment_is_top":false,"comment_ctime":1545216999,"is_pvip":false,"replies":[{"id":"19093","content":"虚拟节点数分别是3333 3333 3334","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1545394858,"ip_address":"","comment_id":51649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840184295","product_id":100020201,"comment_content":"还有一个疑问请帮忙解答一下：<br>在集群伸缩设计方案中，假如一开始只有两台物理机，有10000个虚拟节点，那么每台物理机各存储5000个虚拟节点的数据;现在增加一台物理机，那么最后的数据存储效果是物理机分别存储5000，2500，2500个虚拟节点的数据吗？这样算不算数据倾斜？","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433553,"discussion_content":"虚拟节点数分别是3333 3333 3334","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545394858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339333,"user_name":"高志权","can_delete":false,"product_type":"c1","uid":2681599,"ip_address":"","ucode":"37F690BEDACE96","user_header":"","comment_is_top":false,"comment_ctime":1648039065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648039065","product_id":100020201,"comment_content":"评论一下","like_count":0},{"had_liked":false,"id":328389,"user_name":"张伟建","can_delete":false,"product_type":"c1","uid":2864697,"ip_address":"","ucode":"3FD8466502E952","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b6/39/b07e9d5c.jpg","comment_is_top":false,"comment_ctime":1640699113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640699113","product_id":100020201,"comment_content":"好难，努力学多点","like_count":0},{"had_liked":false,"id":267185,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1607645452,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1607645452","product_id":100020201,"comment_content":"把虚拟节点均分到物理节点上，每次新增物理节点，重新计算均值，把新增前物理节点上大于均值部分放到新增物理节点上。<br>算法实现上由于依赖前一次分配状态，需要从一个物理节点开始计算，虚拟节点和物理节点不会很多的话，这部分运算时间可以忽略不计。<br>数据分布还是需要调整虚拟节点个数达到均衡","like_count":0},{"had_liked":false,"id":264657,"user_name":"Kerry","can_delete":false,"product_type":"c1","uid":1160223,"ip_address":"","ucode":"D634EBC6ECD781","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/1f/4107c044.jpg","comment_is_top":false,"comment_ctime":1606564858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606564858","product_id":100020201,"comment_content":"“路由算法在初始化的时候就预先设立一个较大的数字，比如 100000”，这个数字是用来做什么的呢？","like_count":0},{"had_liked":false,"id":183363,"user_name":"Knuth","can_delete":false,"product_type":"c1","uid":1083616,"ip_address":"","ucode":"21298EF9BBB91A","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/e0/292508a4.jpg","comment_is_top":false,"comment_ctime":1583029277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583029277","product_id":100020201,"comment_content":"doris是如何判定一个节点是瞬时失效、临时失效、永久失效<br>在做failover的第一个问题就是，如何判定节点失效，这里老板你定义了几个状态，具体是怎么量化来判定呢？ 在实际的过程中是否存在误判的情况以及如何应对呢","like_count":0},{"had_liked":false,"id":168784,"user_name":"Jun","can_delete":false,"product_type":"c1","uid":1120678,"ip_address":"","ucode":"0FAB76D99153ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/a6/7ae63d7e.jpg","comment_is_top":false,"comment_ctime":1578159197,"is_pvip":false,"replies":[{"id":"65449","content":"有公式，具体可以参考专利文献 http:&#47;&#47;www2.soopat.com&#47;Patent&#47;201110294092?lx=FMSQ 或者项目源码。<br><br>这个算法相对一致性hash的优势文中有比较。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1578198358,"ip_address":"","comment_id":168784,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578159197","product_id":100020201,"comment_content":"李老师，你好。感觉老师是山西人。如果是，那么老乡你好。这一章的数学公式是从物理节点映射的虚拟节点。实际请求到来时，应该是虚拟节点到物理节点，有公式吗？还是直接用一个映射表？另外使用一致性哈希加虚拟节点也是比较好的方案，不需要复杂的节点映射了。亚麻的dynamo就是这么做的。","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480336,"discussion_content":"有公式，具体可以参考专利文献 http://www2.soopat.com/Patent/201110294092?lx=FMSQ 或者项目源码。\n\n这个算法相对一致性hash的优势文中有比较。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578198358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182553,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0b/59/08065309.jpg","nickname":"雨亦奇","note":"","ucode":"90E2182C70B99A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571152,"discussion_content":"山西人是怎么感觉出来的？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652088649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140845,"user_name":"送普选","can_delete":false,"product_type":"c1","uid":1220775,"ip_address":"","ucode":"AB2C98BB9C3A5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","comment_is_top":false,"comment_ctime":1571058415,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571058415","product_id":100020201,"comment_content":"虚拟节点设计的很多，再和物理节点映射，和Redis的数据Slot再映射到物理机有点像。<br>另外存储系统单独分离出来有更大的灵活性，和 Apache Pulsar有点类似。<br>故障检测通过心跳，加请求时汇报广播，想起之前公司基于做的一个中间件的数据层也是这样。<br>技术要解决的问题有很多是一样的，原理和实现都是相通的。","like_count":0,"discussions":[{"author":{"id":1220775,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","nickname":"送普选","note":"","ucode":"AB2C98BB9C3A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32787,"discussion_content":"数据层记得也是分区双写，节点恢复时也有一段时间先写key，同步完成后再正常可读写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571061150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94427,"user_name":"Hunter Liu","can_delete":false,"product_type":"c1","uid":1474463,"ip_address":"","ucode":"BD1FD203A295DC","user_header":"https://static001.geekbang.org/account/avatar/00/16/7f/9f/ca7b20cd.jpg","comment_is_top":false,"comment_ctime":1557809080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557809080","product_id":100020201,"comment_content":"一遍不太能吃透，待我多读几遍，看到各种大牛留言也很开阔视野","like_count":0},{"had_liked":false,"id":73380,"user_name":"张飞","can_delete":false,"product_type":"c1","uid":1405598,"ip_address":"","ucode":"836F612B8E9C8A","user_header":"https://static001.geekbang.org/account/avatar/00/15/72/9e/69606254.jpg","comment_is_top":false,"comment_ctime":1551873769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551873769","product_id":100020201,"comment_content":"老师，节点映射关系个公式没看明白，可以解释一下吗？ 一个虚拟节点对应两个对等的物理节点是什么意思？两个公式分别用来计算什么的呢？","like_count":0},{"had_liked":false,"id":53678,"user_name":"Sam.张朝","can_delete":false,"product_type":"c1","uid":1132448,"ip_address":"","ucode":"FB20554D94B250","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","comment_is_top":false,"comment_ctime":1545709026,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545709026","product_id":100020201,"comment_content":"请教下，作为android开发工程师，小程序、H5、后台Java开发都有一定经验，对从事大数据研发工作的优势有哪些，特别是在和招聘HR，或者公司技术Leader 沟通时，如何阐明自己的优势，有何更有效的沟通，拿下一份工作？","like_count":0},{"had_liked":false,"id":53443,"user_name":"lanpay","can_delete":false,"product_type":"c1","uid":1057703,"ip_address":"","ucode":"15BE115858BEBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/23/a7/3f084b33.jpg","comment_is_top":false,"comment_ctime":1545645383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545645383","product_id":100020201,"comment_content":"看来借鉴的是Dynamo，据说增减节点有好多坑呢😜","like_count":0},{"had_liked":false,"id":51645,"user_name":"William","can_delete":false,"product_type":"c1","uid":1070727,"ip_address":"","ucode":"3FAA4908CBC7BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/87/2b5c7370.jpg","comment_is_top":false,"comment_ctime":1545216164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545216164","product_id":100020201,"comment_content":"文章写得非常棒，受益非浅!有个疑问请帮忙解答一下，谢谢!<br>文章在冗余备份实现方式中提到整个方案是双写保护可用性的，但是在临时失效的fail over 中数据恢复后变成双读的？(原文：物理节点2临时失效及恢复期间物理节点1承担所有的read操作)","like_count":0}]}