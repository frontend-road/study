{"id":414478,"title":"06｜get hands dirty：SQL查询工具怎么一鱼多吃？","content":"<p>你好，我是陈天。</p><p>通过 HTTPie 和 Thumbor 的例子，相信你对 Rust 的能力和代码风格有了比较直观的了解。之前我们说过Rust的应用范围非常广，但是这两个例子体现得还不是太明显。</p><p>有同学想看看，在实际工作中有大量生命周期标注的代码的样子；有同学对 Rust 的宏好奇；有同学对 Rust 和其它语言的互操作感兴趣；还有同学想知道 Rust 做客户端的感觉。所以，我们今天就来<strong>用一个很硬核的例子把这些内容都涵盖进来</strong>。</p><p>话不多说，我们直接开始。</p><h2>SQL</h2><p>我们工作的时候经常会跟各种数据源打交道，数据源包括数据库、Parquet、CSV、JSON 等，而打交道的过程无非是：数据的获取（fetch）、过滤（filter）、投影（projection）和排序（sort）。</p><p>做大数据的同学可以用类似 Spark SQL 的工具来完成各种异质数据的查询，但是我们平时用 SQL 并没有这么强大。因为虽然用 SQL 对数据库做查询，任何 DBMS 都支持，如果想用 SQL 查询 CSV 或者 JSON，就需要很多额外的处理。</p><p>所以如果能有一个简单的工具，<strong>不需要引入 Spark，就能支持对任何数据源使用 SQL 查询</strong>，是不是很有意义？</p><p>比如，如果你的 shell 支持这样使用是不是爽爆了？<img src=\"https://static001.geekbang.org/resource/image/3e/7c/3e8e6586d8599e39a6704cf82352cd7c.jpg?wh=1920x703\" alt=\"\"><br>\n再比如，我们的客户端会从服务器 API 获取数据的子集，如果这个子集可以在前端通过 SQL 直接做一些额外查询，那将非常灵活，并且用户可以得到即时的响应。</p><!-- [[[read_end]]] --><p>软件领域有个著名的<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%BC%E6%9E%97%E6%96%AF%E6%BD%98%E7%AC%AC%E5%8D%81%E5%AE%9A%E5%BE%8B\">格林斯潘第十定律</a>：</p><blockquote>\n<p>任何 C 或 Fortran 程序复杂到一定程度之后，都会包含一个临时开发的、不合规范的、充满程序错误的、运行速度很慢的、只有一半功能的 Common Lisp 实现。</p>\n</blockquote><p>我们仿照它来一个程序君第四十二定律：</p><blockquote>\n<p>任何 API 接口复杂到一定程度后，都会包含一个临时开发的、不合规范的、充满程序错误的、运行速度很慢的、只有一半功能的 SQL 实现。</p>\n</blockquote><p>所以，我们今天就来设计一个可以对任何数据源使用 SQL 查询，并获得结果的库如何？当然，作为一个 MVP（Mimimu Viable Product），我们就暂且只支持对 CSV 的 SQL 查询。不单如此，我们还希望这个库可以给 Python3 和 Node.js 使用。</p><p>猜一猜这个库要花多少行代码？今天难度比较大，怎么着要 500 行吧？我们暂且以 500 行代码为基准来挑战。</p><h2>设计分析</h2><p>我们首先需要一个 SQL 解析器。在 Rust 下，写一个解析器并不困难，可以用 <a href=\"https://github.com/serde-rs/serde\">serde</a>、用任何 <a href=\"https://en.wikipedia.org/wiki/Parser_combinator\">parser combinator</a> 或者 <a href=\"https://en.wikipedia.org/wiki/Parsing_expression_grammar\">PEG parser</a> 来实现，比如 <a href=\"https://github.com/Geal/nom\">nom</a> 或者 <a href=\"https://github.com/pest-parser/pest\">pest</a>。不过 SQL 解析，这种足够常见的需求，Rust 社区已经有方案，我们用 <a href=\"https://github.com/sqlparser-rs/sqlparser-rs\">sqlparser-rs</a>。</p><p>接下来就是如何把 CSV 或者其它数据源加载为 DataFrame。</p><p>做过数据处理或者使用过 <a href=\"https://pandas.pydata.org/pandas-docs/stable/index.html\">pandas</a> 的同学，应该对 DataFrame 并不陌生，它是一个矩阵数据结构，其中每一列可能包含不同的类型，可以在 DataFrame 上做过滤、投影和排序等操作。</p><p>在 Rust 下，我们可以用 <a href=\"https://github.com/pola-rs/polars\">polars</a> ，来完成数据从 CSV 到 DataFrame 的加载和各种后续操作。</p><p>确定了这两个库之后，后续的工作就是：如何把 sqlparser 解析出来的抽象语法树 <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST</a>（Abstract Syntax Tree），映射到 polars 的 DataFrame 的操作上。</p><p>抽象语法树是用来描述复杂语法规则的工具，小到 SQL 或者某个 DSL，大到一门编程语言，其语言结构都可以通过 AST 来描述，如下图所示（来源：<a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">wikipedia</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/80/2f60e2d0a908e84ef33634d840ea6380.png?wh=800x903\" alt=\"图片\"></p><p>如何在 SQL 语法和 DataFrame 的操作间进行映射呢？比如我们要从数据中选出三列显示，那这个 “select a, b, c” 就要能映射到 DataFrame 选取 a、b、c 三列输出。</p><p>polars 内部有自己的 AST 可以把各种操作聚合起来，最后一并执行。比如对于 “where a &gt; 10 and b &lt; 5”， Polars 的表达式是：<code>col(\"a\").gt(lit(10)).and(col(\"b\").lt(lit(5)))</code>。col 代表列，gt/lt 是大于/小于，lit 是字面量的意思。</p><p>有了这个认知，“对 CSV 等源进行 SQL 查询”核心要解决的问题变成了，<strong>如何把一个 AST（ SQL AST ）转换成另一个 AST（ DataFrame AST ）</strong>。</p><p>等等，这不就是宏编程（对于 Rust 来说，是过程宏）做的事情么？因为进一步分析二者的数据结构，我们可以得到这样的对应关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/72/ddd4995deecc4b7897bf73beb0e2cb72.jpg?wh=1920x1266\" alt=\"\"></p><p>你看，我们要做的主要事情其实就是，在两个数据结构之间进行转换。所以，写完今天的代码，你肯定会对宏有足够的信心。</p><p>宏编程并没有什么大不了的，抛开 quote/unquote，它主要的工作就是把一棵语法树转换成另一颗语法树，而这个转换的过程深入下去，不过就是数据结构到数据结构的转换而已。所以一句话总结：<strong>宏编程的主要流程就是实现若干 From<t> 和 TryFrom<t></t></t></strong>，是不是很简单。</p><p>当然，这个转换的过程非常琐碎，如果语言本身没有很好的模式匹配能力，进行宏编程绝对是对自己非人道的折磨。</p><p>好在 Rust 有很棒的模式匹配支持，它虽然没有 Erlang/Elixir 的模式匹配那么强大，但足以秒杀绝大多数的编程语言。待会你在写的时候，能直观感受到。</p><h2>创建一个 SQL 方言</h2><p>好，分析完要做的事情，接下来就是按部就班写代码了。</p><p>我们用  <code>cargo new queryer --lib</code> 生成一个库。用 VSCode 打开生成的目录，创建和 src 平级的 examples，并在 Cargo.toml 中添加代码：</p><pre><code class=\"language-bash\">[[example]]\nname = \"dialect\"\n\n[dependencies]\nanyhow = \"1\" # 错误处理，其实对于库我们应该用 thiserror，但这里简单起见就不节外生枝了\nasync-trait = \"0.1\" # 允许 trait 里有 async fn\nsqlparser = \"0.10\" # SQL 解析器\npolars = { version = \"0.15\", features = [\"json\", \"lazy\"] } # DataFrame 库\nreqwest = { version = \"0.11\", default-features = false, features = [\"rustls-tls\"] } # 我们的老朋友 HTTP 客户端\ntokio = { version = \"1\", features = [\"fs\"]} # 我们的老朋友异步库，我们这里需要异步文件处理\ntracing = \"0.1\" # 日志处理\n\n[dev-dependencies]\ntracing-subscriber = \"0.2\" # 日志处理\ntokio = { version = \"1\", features = [\"full\"]} # 在 example 下我们需要更多的 tokio feature\n</code></pre><p>依赖搞定。因为对 sqlparser 的功能不太熟悉，这里写个 example 尝试一下，它会在 examples 目录下寻找 <a href=\"http://dialect.rs\">dialect.rs</a> 文件。</p><p>所以，我们创建 examples/dialect.rs 文件，并写一些测试 sqlparser 的代码：</p><pre><code class=\"language-rust\">use sqlparser::{dialect::GenericDialect, parser::Parser};\n\nfn main() {\n    tracing_subscriber::fmt::init();\n\n    let sql = \"SELECT a a1, b, 123, myfunc(b), * \\\n    FROM data_source \\\n    WHERE a &gt; b AND b &lt; 100 AND c BETWEEN 10 AND 20 \\\n    ORDER BY a DESC, b \\\n    LIMIT 50 OFFSET 10\";\n\n    let ast = Parser::parse_sql(&amp;GenericDialect::default(), sql);\n    println!(\"{:#?}\", ast);\n}\n</code></pre><p>这段代码用一个 SQL 语句来测试<code>Parser::parse_sql</code>会输出什么样的结构。当你写库代码时，如果遇到不明白的第三方库，可以用撰写 example 这种方式先试一下。<br>\n我们运行 <code>cargo run --example dialect</code>查看结果：</p><pre><code class=\"language-rust\">Ok([Query(\n    Query {\n        with: None,\n        body: Select(\n            Select {\n                distinct: false,\n                top: None,\n                projection: [ ... ],\n\t\t\t\t\t\t\t\tfrom: [ TableWithJoins { ... } ],\n\t\t\t\t\t\t\t\tselection: Some(BinaryOp { ... }),\n                ...\n            }\n        ),\n        order_by: [ OrderByExpr { ... } ],\n        limit: Some(Value( ... )),\n        offset: Some(Offset { ... })\n    }\n])\n</code></pre><p>我把这个结构简化了一下，你在命令行里看到的，会远比这个复杂。</p><p>写到第9行这里，你有没有突发奇想，<strong>如果 SQL 中的 FROM 子句后面可以接一个 URL 或者文件名该多好</strong>？这样，我们可以从这个 URL 或文件中读取数据。就像开头那个 “select * from ps” 的例子，把 ps 命令作为数据源，从它的输出中很方便地取数据。</p><p>但是普通的 SQL 语句是不支持这种写法的，不过 sqlparser 允许你创建自己的 SQL 方言，那我们就来尝试一下。</p><p>创建 src/dialect.rs 文件，添入下面的代码：</p><pre><code class=\"language-rust\">use sqlparser::dialect::Dialect;\n\n#[derive(Debug, Default)]\npub struct TyrDialect;\n\n// 创建自己的 sql 方言。TyrDialect 支持 identifier 可以是简单的 url\nimpl Dialect for TyrDialect {\n    fn is_identifier_start(&amp;self, ch: char) -&gt; bool {\n        ('a'..='z').contains(&amp;ch) || ('A'..='Z').contains(&amp;ch) || ch == '_'\n    }\n\n    // identifier 可以有 ':', '/', '?', '&amp;', '='\n    fn is_identifier_part(&amp;self, ch: char) -&gt; bool {\n        ('a'..='z').contains(&amp;ch)\n            || ('A'..='Z').contains(&amp;ch)\n            || ('0'..='9').contains(&amp;ch)\n            || [':', '/', '?', '&amp;', '=', '-', '_', '.'].contains(&amp;ch)\n    }\n}\n\n/// 测试辅助函数\npub fn example_sql() -&gt; String {\n    let url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.csv\";\n\n    let sql = format!(\n        \"SELECT location name, total_cases, new_cases, total_deaths, new_deaths \\\n        FROM {} where new_deaths &gt;= 500 ORDER BY new_cases DESC LIMIT 6 OFFSET 5\",\n        url\n    );\n\n    sql\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use sqlparser::parser::Parser;\n\n    #[test]\n    fn it_works() {\n        assert!(Parser::parse_sql(&amp;TyrDialect::default(), &amp;example_sql()).is_ok());\n    }\n}\n</code></pre><p>这个代码主要实现了 sqlparser 的 Dialect trait，可以重载 SQL 解析器判断标识符的方法。之后我们需要在 src/lib.rs 中添加</p><pre><code class=\"language-rust\">mod dialect;\n</code></pre><p>引入这个文件，最后也写了一个测试，你可以运行  <code>cargo test</code> 测试一下看看。<br>\n测试通过！现在我们可以正常解析出这样的 SQL 了：</p><pre><code class=\"language-sql\">SELECT * from https://abc.xyz/covid-cases.csv where new_deaths &gt;= 500\n</code></pre><p>Cool！你看，大约用了 10 行代码（第 7 行到第 19 行），通过添加可以让 URL 合法的字符，就实现了一个自己的支持 URL 的 SQL 方言解析。</p><p>为什么这么厉害？因为通过 trait，你可以很方便地做<a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\">控制反转（Inversion of Control）</a>，在 Rust 开发中，这是很常见的一件事情。</p><h2>实现 AST 的转换</h2><p>刚刚完成了SQL解析，接着就是用polars做AST转换了。</p><p>由于我们不太了解 polars 库，接下来还是先测试一下怎么用。创建 examples/covid.rs（记得在 Cargo.toml 中添加它哦），手工实现一个 DataFrame 的加载和查询：</p><pre><code class=\"language-rust\">use anyhow::Result;\nuse polars::prelude::*;\nuse std::io::Cursor;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    tracing_subscriber::fmt::init();\n\n    let url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.csv\";\n    let data = reqwest::get(url).await?.text().await?;\n\n    // 使用 polars 直接请求\n    let df = CsvReader::new(Cursor::new(data))\n        .infer_schema(Some(16))\n        .finish()?;\n\n    let filtered = df.filter(&amp;df[\"new_deaths\"].gt(500))?;\n    println!(\n        \"{:?}\",\n        filtered.select((\n            \"location\",\n            \"total_cases\",\n            \"new_cases\",\n            \"total_deaths\",\n            \"new_deaths\"\n        ))\n    );\n\n    Ok(())\n}\n</code></pre><p>如果我们运行这个 example，可以得到一个打印得非常漂亮的表格，它从 GitHub 上的 <a href=\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.csv\">owid-covid-latest.csv</a> 文件中，读取并查询 new_deaths 大于 500 的国家和区域：<br>\n<img src=\"https://static001.geekbang.org/resource/image/31/69/3117645de41cc1d0d6d320c5dd6d2c69.png?wh=1682x1254\" alt=\"\"></p><p>我们最终要实现的就是这个效果，通过解析一条做类似查询的 SQL，来进行相同的数据查询。怎么做呢？</p><p>今天一开始已经分析过了，<strong>主要的工作就是把 sqlparser 解析出来的 AST 转换成 polars 定义的 AST</strong>。再回顾一下 SQL AST 的输出：</p><pre><code class=\"language-rust\">Ok([Query(\n    Query {\n        with: None,\n        body: Select(\n            Select {\n                distinct: false,\n                top: None,\n                projection: [ ... ],\n\t\t\t\t\t\t\t\tfrom: [ TableWithJoins { ... } ],\n\t\t\t\t\t\t\t\tselection: Some(BinaryOp { ... }),\n                ...\n            }\n        ),\n        order_by: [ OrderByExpr { ... } ],\n        limit: Some(Value( ... )),\n        offset: Some(Offset { ... })\n    }\n])\n</code></pre><p>这里的 Query 是 Statement enum 其中一个结构。SQL 语句除了查询外，还有插入数据、删除数据、创建表等其他语句，我们今天不关心这些，只关心 Query。</p><p>所以，可以创建一个文件 src/convert.rs，<strong>先定义一个数据结构 Sql 来描述两者的对应关系，然后再实现 Sql 的 TryFrom<statement> trait</statement></strong>：</p><pre><code class=\"language-rust\">/// 解析出来的 SQL\npub struct Sql&lt;'a&gt; {\n    pub(crate) selection: Vec&lt;Expr&gt;,\n    pub(crate) condition: Option&lt;Expr&gt;,\n    pub(crate) source: &amp;'a str,\n    pub(crate) order_by: Vec&lt;(String, bool)&gt;,\n    pub(crate) offset: Option&lt;i64&gt;,\n    pub(crate) limit: Option&lt;usize&gt;,\n}\n\nimpl&lt;'a&gt; TryFrom&lt;&amp;'a Statement&gt; for Sql&lt;'a&gt; {\n    type Error = anyhow::Error;\n\t\tfn try_from(sql: &amp;'a Statement) -&gt; Result&lt;Self, Self::Error&gt; {\n        match sql {\n            // 目前我们只关心 query (select ... from ... where ...)\n            Statement::Query(q) =&gt; {\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n}\n</code></pre><p>框有了，继续写转换。我们看 Query 的结构：它有一个 body，是 Select 类型，其中包含 projection、from、select。在 Rust 里，我们可以用一个赋值语句，同时使用模式匹配加上数据的解构，将它们都取出来：</p><pre><code class=\"language-rust\">let Select {\n    from: table_with_joins,\n    selection: where_clause,\n    projection,\n\n    group_by: _,\n    ..\n} = match &amp;q.body {\n    SetExpr::Select(statement) =&gt; statement.as_ref(),\n    _ =&gt; return Err(anyhow!(\"We only support Select Query at the moment\")),\n};\n</code></pre><p>一句话，从匹配到取引用，再到将引用内部几个字段赋值给几个变量，都完成了，真是太舒服了！这样能够极大提高生产力的语言，你怎能不爱它？</p><p>我们再看一个处理 Offset 的例子，需要把 sqlparser 的 Offset 转换成 i64，同样，可以实现一个 TryFrom trait。这次是在 match 的一个分支上，做了数据结构的解构。</p><pre><code class=\"language-rust\">use sqlparser::ast::Offset as SqlOffset;\n\n// 因为 Rust trait 的孤儿规则，我们如果要想对已有的类型实现已有的 trait，\n// 需要简单包装一下\n\npub struct Offset&lt;'a&gt;(pub(crate) &amp;'a SqlOffset);\n\n/// 把 SqlParser 的 offset expr 转换成 i64\nimpl&lt;'a&gt; From&lt;Offset&lt;'a&gt;&gt; for i64 {\n    fn from(offset: Offset) -&gt; Self {\n        match offset.0 {\n            SqlOffset {\n                value: SqlExpr::Value(SqlValue::Number(v, _b)),\n                ..\n            } =&gt; v.parse().unwrap_or(0),\n            _ =&gt; 0,\n        }\n    }\n}\n</code></pre><p>是的，数据的解构也可以在分支上进行，如果你还记得第三讲中谈到的 if let / while let，也是这个用法。这样对模式匹配的全方位支持，你用得越多，就会越感激 Rust 的作者，尤其在开发过程宏的时候。</p><p>从这段代码中还可以看到，定义的数据结构 Offset 使用了生命周期标注 &lt;'a&gt;，这是因为内部使用了 SqlOffset 的引用。有关生命周期的知识，我们很快就会讲到，这里你暂且不需要理解为什么要这么做。</p><p>整个 src/convert.rs 主要都是通过模式匹配，进行不同子类型之间的转换，代码比较无趣，而且和上面的代码类似，我就不贴了，你可以在这门课程的 <a href=\"https://github.com/tyrchen/geektime-rust/blob/master/06_queryer/queryer/src/convert.rs\">GitHub repo</a> 下的 06_queryer/queryer/src/convert.rs 中获取。</p><p>未来你在 Rust 下写过程宏（procedure macro），干的基本就是这个工作，只不过，最后你需要把转换后的 AST 使用 quote 输出成代码。在这个例子里，我们不需要这么做，polars 的 lazy 接口直接能处理 AST。</p><p>说句题外话，我之所以不厌其烦地讲述数据转换的这个过程，是因为它是我们编程活动中非常重要的部分。你想想，我们写代码，主要都在处理什么？<strong>绝大多数处理逻辑都是把数据从一个接口转换成另一个接口</strong>。</p><p>以我们熟悉的用户注册流程为例：</p><ol>\n<li>用户的输入被前端校验后，转换成 CreateUser 对象，然后再转换成一个 HTTP POST 请求。</li>\n<li>当这个请求到达服务器后，服务器将其读取，再转换成服务器的 CreateUser 对象，这个对象在校验和正规化（normalization）后被转成一个 ORM 对象（如果使用 ORM 的话），然后 ORM 对象再被转换成 SQL，发送给数据库服务器。</li>\n<li>数据库服务器将 SQL 请求包装成一个 <a href=\"https://en.wikipedia.org/wiki/Write-ahead_logging\">WAL</a>（Write-Ahead Logging），这个 WAL 再被更新到数据库文件中。</li>\n</ol><p>整个数据转换过程如下图所示：<img src=\"https://static001.geekbang.org/resource/image/f0/e9/f0c1ab58fbe1e97f8938f01ca97c3ae9.jpg?wh=1920x653\" alt=\"\"></p><p>这样的处理流程，由于它和业务高度绑定，往往容易被写得很耦合，久而久之就变成了难以维护的意大利面条。<strong>好的代码，<strong><strong>应该</strong></strong>是每个主流程都清晰简约，代码恰到好处地出现<strong><strong>在</strong></strong>那里，让人不需要注释也能明白作者在写什么。</strong></p><p>这就意味着，我们要把那些并不重要的细节封装在单独的地方，封装的粒度以一次写完、基本不需要再变动为最佳，或者即使变动，它的影响也非常局部。</p><p>这样的代码，方便阅读、容易测试、维护简单，处理起来更是一种享受。Rust 标准库的 From<t> / TryFrom<t> trait ，就是出于这个目的设计的，非常值得我们好好使用。</t></t></p><h2>从源中取数据</h2><p>完成了 AST 的转换，接下来就是从源中获取数据。</p><p>我们通过对 Sql 结构的处理和填充，可以得到 SQL FROM 子句里的数据源，这个源，我们规定它必须是以 http(s):// 或者 file:// 开头的字符串。因为，以 http 开头我们可以通过 URL 获取内容，file 开头我们可以通过文件名，打开本地文件获取内容。</p><p>所以拿到了这个描述了数据源的字符串后，很容易能写出这样的代码：</p><pre><code class=\"language-rust\">/// 从文件源或者 http 源中获取数据\nasync fn retrieve_data(source: impl AsRef&lt;str&gt;) -&gt; Result&lt;String&gt; {\n    let name = source.as_ref();\n    match &amp;name[..4] {\n        // 包括 http / https\n        \"http\" =&gt; Ok(reqwest::get(name).await?.text().await?),\n        // 处理 file://&lt;filename&gt;\n        \"file\" =&gt; Ok(fs::read_to_string(&amp;name[7..]).await?),\n        _ =&gt; Err(anyhow!(\"We only support http/https/file at the moment\")),\n    }\n}\n</code></pre><p>代码看起来很简单，但未来并不容易维护。因为一旦你的 HTTP 请求获得的结果需要做一些后续的处理，这个函数很快就会变得很复杂。那该怎么办呢？</p><p>如果你回顾前两讲我们写的代码，相信你心里马上有了答案：<strong>可以用 trait 抽取 fetch 的逻辑，定义好接口，然后改变 retrieve_data 的实现</strong>。</p><p>所以下面是 src/fetcher.rs 的完整代码：</p><pre><code class=\"language-rust\">use anyhow::{anyhow, Result};\nuse async_trait::async_trait;\nuse tokio::fs;\n\n// Rust 的 async trait 还没有稳定，可以用 async_trait 宏\n#[async_trait]\npub trait Fetch {\n    type Error;\n    async fn fetch(&amp;self) -&gt; Result&lt;String, Self::Error&gt;;\n}\n\n/// 从文件源或者 http 源中获取数据，组成 data frame\npub async fn retrieve_data(source: impl AsRef&lt;str&gt;) -&gt; Result&lt;String&gt; {\n    let name = source.as_ref();\n    match &amp;name[..4] {\n        // 包括 http / https\n        \"http\" =&gt; UrlFetcher(name).fetch().await,\n        // 处理 file://&lt;filename&gt;\n        \"file\" =&gt; FileFetcher(name).fetch().await,\n        _ =&gt; return Err(anyhow!(\"We only support http/https/file at the moment\")),\n    }\n}\n\nstruct UrlFetcher&lt;'a&gt;(pub(crate) &amp;'a str);\nstruct FileFetcher&lt;'a&gt;(pub(crate) &amp;'a str);\n\n#[async_trait]\nimpl&lt;'a&gt; Fetch for UrlFetcher&lt;'a&gt; {\n    type Error = anyhow::Error;\n\n    async fn fetch(&amp;self) -&gt; Result&lt;String, Self::Error&gt; {\n        Ok(reqwest::get(self.0).await?.text().await?)\n    }\n}\n\n#[async_trait]\nimpl&lt;'a&gt; Fetch for FileFetcher&lt;'a&gt; {\n    type Error = anyhow::Error;\n\n    async fn fetch(&amp;self) -&gt; Result&lt;String, Self::Error&gt; {\n        Ok(fs::read_to_string(&amp;self.0[7..]).await?)\n    }\n}\n</code></pre><p>这看上去似乎没有收益，还让代码变得更多。但它把 retrieve_data 和具体每一种类型的处理分离了，还是我们之前讲的思想，通过开闭原则，构建低耦合、高内聚的代码。这样未来我们修改 UrlFetcher 或者 FileFetcher，或者添加新的 Fetcher，对 retrieve_data 的变动都是最小的。</p><p>现在我们完成了SQL的解析、实现了从SQL到DataFrame的AST的转换，以及数据源的获取。挑战已经完成一大半了，就剩主流程逻辑了。</p><h2>主流程</h2><p>一般我们在做一个库的时候，不会把内部使用的数据结构暴露出去，而是会用自己的数据结构包裹它。</p><p>但这样代码有一个问题：<strong>原有数据结构的方法，如果我们想暴露出去，每个接口都需要实现一遍</strong>，虽然里面的代码就是一句简单的 proxy，但还是很麻烦。这是我自己在使用很多语言的一个痛点。</p><p>正好在 queryer 库里也会有这个问题：SQL 查询后的结果，会放在一个 polars 的 DataFrame 中，但我们不想直接暴露这个 DataFrame 出去。因为一旦这么做，未来我们想加额外的 metadata，就无能为力了。</p><p>所以我定义了一个 DataSet，包裹住 DataFrame。可是，我还想暴露 DataSet 的接口，它有好多函数，总不能挨个 proxy 吧？</p><p>不用。Rust 提供了 Deref 和 DerefMut trait 做这个事情，它允许类型在解引用时，可以解引用到其它类型。我们后面在介绍 Rust 常用 trait 时，会详细介绍这两个 trait，现在先来看的 DataSet 怎么处理：</p><pre><code class=\"language-rust\">#[derive(Debug)]\npub struct DataSet(DataFrame);\n\n/// 让 DataSet 用起来和 DataFrame 一致\nimpl Deref for DataSet {\n    type Target = DataFrame;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.0\n    }\n}\n\n/// 让 DataSet 用起来和 DataFrame 一致\nimpl DerefMut for DataSet {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut Self::Target {\n        &amp;mut self.0\n    }\n}\n\n// DataSet 自己的方法\nimpl DataSet {\n    /// 从 DataSet 转换成 csv\n    pub fn to_csv(&amp;self) -&gt; Result&lt;String&gt; {\n        ...\n    }\n}\n</code></pre><p>可以看到，DataSet 在解引用时，它的 Target 是 DataFrame，这样 DataSet 在用户使用时，就和 DataFrame 一致了；我们还为 DataSet 实现了 to_csv 方法，可以把查询结果生成出 CSV。</p><p>好，定义好 DataSet，核心函数 query 实现起来其实很简单：先解析出我们要的 Sql 结构，然后从 source 中读入一个 DataSet，做 filter / order_by / offset / limit / select 等操作，最后返回 DataSet。</p><p>DataSet 的定义和 query 函数都在 src/lib.rs，它的完整代码如下：</p><pre><code class=\"language-rust\">use anyhow::{anyhow, Result};\nuse polars::prelude::*;\nuse sqlparser::parser::Parser;\nuse std::convert::TryInto;\nuse std::ops::{Deref, DerefMut};\nuse tracing::info;\n\nmod convert;\nmod dialect;\nmod loader;\nmod fetcher;\nuse convert::Sql;\nuse loader::detect_content;\nuse fetcher::retrieve_data;\n\npub use dialect::example_sql;\npub use dialect::TyrDialect;\n\n#[derive(Debug)]\npub struct DataSet(DataFrame);\n\n/// 让 DataSet 用起来和 DataFrame 一致\nimpl Deref for DataSet {\n    type Target = DataFrame;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.0\n    }\n}\n\n/// 让 DataSet 用起来和 DataFrame 一致\nimpl DerefMut for DataSet {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut Self::Target {\n        &amp;mut self.0\n    }\n}\n\nimpl DataSet {\n    /// 从 DataSet 转换成 csv\n    pub fn to_csv(&amp;self) -&gt; Result&lt;String&gt; {\n        let mut buf = Vec::new();\n        let writer = CsvWriter::new(&amp;mut buf);\n        writer.finish(self)?;\n        Ok(String::from_utf8(buf)?)\n    }\n}\n\n/// 从 from 中获取数据，从 where 中过滤，最后选取需要返回的列\npub async fn query&lt;T: AsRef&lt;str&gt;&gt;(sql: T) -&gt; Result&lt;DataSet&gt; {\n    let ast = Parser::parse_sql(&amp;TyrDialect::default(), sql.as_ref())?;\n\n    if ast.len() != 1 {\n        return Err(anyhow!(\"Only support single sql at the moment\"));\n    }\n\n    let sql = &amp;ast[0];\n\n    // 整个 SQL AST 转换成我们定义的 Sql 结构的细节都埋藏在 try_into() 中\n    // 我们只需关注数据结构的使用，怎么转换可以之后需要的时候才关注，这是\n    // 关注点分离，是我们控制软件复杂度的法宝。\n    let Sql {\n        source,\n        condition,\n        selection,\n        offset,\n        limit,\n        order_by,\n    } = sql.try_into()?;\n\n    info!(\"retrieving data from source: {}\", source);\n\n    // 从 source 读入一个 DataSet\n    // detect_content，怎么 detect 不重要，重要的是它能根据内容返回 DataSet\n    let ds = detect_content(retrieve_data(source).await?).load()?;\n\n    let mut filtered = match condition {\n        Some(expr) =&gt; ds.0.lazy().filter(expr),\n        None =&gt; ds.0.lazy(),\n    };\n\n    filtered = order_by\n        .into_iter()\n        .fold(filtered, |acc, (col, desc)| acc.sort(&amp;col, desc));\n\n    if offset.is_some() || limit.is_some() {\n        filtered = filtered.slice(offset.unwrap_or(0), limit.unwrap_or(usize::MAX));\n    }\n\n    Ok(DataSet(filtered.select(selection).collect()?))\n}\n</code></pre><p>在 query 函数的主流程中，整个 SQL AST 转换成了我们定义的 Sql 结构，细节都埋藏在 try_into() 中，我们只需关注数据结构 Sql 的使用，怎么转换之后需要的时候再关注。</p><p>这就是<a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">关注点分离（Separation of Concerns）</a>，是我们控制软件复杂度的法宝。Rust  标准库中那些经过千锤百炼的 trait，就是用来帮助我们写出更好的、复杂度更低的代码。</p><p>主流程里有个 detect_content 函数，它可以识别文本内容，选择相应的加载器把文本加载为 DataSet，因为目前只支持 CSV，但未来可以支持 JSON 等其他格式。这个函数定义在 src/loader.rs 里，我们创建这个文件，并添入下面的代码：</p><pre><code class=\"language-rust\">use crate::DataSet;\nuse anyhow::Result;\nuse polars::prelude::*;\nuse std::io::Cursor;\n\npub trait Load {\n    type Error;\n    fn load(self) -&gt; Result&lt;DataSet, Self::Error&gt;;\n}\n\n#[derive(Debug)]\n#[non_exhaustive]\npub enum Loader {\n    Csv(CsvLoader),\n}\n\n#[derive(Default, Debug)]\npub struct CsvLoader(pub(crate) String);\n\nimpl Loader {\n    pub fn load(self) -&gt; Result&lt;DataSet&gt; {\n        match self {\n            Loader::Csv(csv) =&gt; csv.load(),\n        }\n    }\n}\n\npub fn detect_content(data: String) -&gt; Loader {\n    // TODO: 内容检测\n    Loader::Csv(CsvLoader(data))\n}\n\nimpl Load for CsvLoader {\n    type Error = anyhow::Error;\n\n    fn load(self) -&gt; Result&lt;DataSet, Self::Error&gt; {\n        let df = CsvReader::new(Cursor::new(self.0))\n            .infer_schema(Some(16))\n            .finish()?;\n        Ok(DataSet(df))\n    }\n}\n</code></pre><p>同样，通过 trait，我们虽然目前只支持 CsvLoader，但保留了为未来添加更多 Loader 的接口。</p><p>好，现在这个库就全部写完了，尝试编译一下。如果遇到了问题，不要着急，可以在这门课的 <a href=\"https://github.com/tyrchen/geektime-rust/blob/master/06_queryer/queryer\">GitHub repo</a> 里获取完整的代码，然后对应修改你本地的错误。</p><p>如果代码编译通过了，你可以修改之前的 examples/covid.rs，使用 SQL 来查询测试一下：</p><pre><code class=\"language-rust\">use anyhow::Result;\nuse queryer::query;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    tracing_subscriber::fmt::init();\n\n    let url = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.csv\";\n\n    // 使用 sql 从 URL 里获取数据\n    let sql = format!(\n        \"SELECT location name, total_cases, new_cases, total_deaths, new_deaths \\\n        FROM {} where new_deaths &gt;= 500 ORDER BY new_cases DESC\",\n        url\n    );\n    let df1 = query(sql).await?;\n    println!(\"{:?}\", df1);\n\n    Ok(())\n}\n</code></pre><p>Bingo！一切正常，我们完成了，用 SQL 语句请求网络上的某个 CSV ，并对 CSV 做查询和排序，返回结果的正确无误！<br>\n<img src=\"https://static001.geekbang.org/resource/image/be/7f/be4577cd181ea6e9fc44f5b6e735867f.png?wh=1662x1256\" alt=\"\"></p><p>用 tokei 查看代码行数，可以看到，用了 375 行，远低于 500 行的目标！</p><pre><code class=\"language-bash\">❯ tokei src/\n-------------------------------------------------------------------------------\n Language            Files        Lines         Code     Comments       Blanks\n-------------------------------------------------------------------------------\n Rust                    5          466          375           22           69\n-------------------------------------------------------------------------------\n Total                   5          466          375           22           69\n-------------------------------------------------------------------------------\n</code></pre><p>在这么小的代码量下，我们在架构上做了很多为解耦考虑的工作：整个架构被拆成了 Sql Parser、Fetcher、Loader 和 query 四个部分。<br>\n<img src=\"https://static001.geekbang.org/resource/image/35/1d/3580d96a85486849c9535cbdc6a6e51d.jpg?wh=1920x777\" alt=\"\"><br>\n其中未来可能存在变化的 Fetcher 和 Loader 可以轻松扩展，比如我们一开始提到的那个 “select * from ps”，可以用一个 StdoutFetcher 和 TsvLoader 来处理。</p><h2>支持其它语言</h2><p>现在我们的核心代码写完了，有没有感觉自己成就感爆棚，实现的queryer工具可以在 Rust 下作为一个库，提供给其它 Rust 程序用，这很美妙。</p><p>但我们的故事还远不止如此。这么牛的功能，只能 Rust 程序员享用，太暴殄天物了。毕竟独乐乐不如众乐乐。所以，我们来试着<strong>将它集成到其它语言，比如常用的 Node.js/Python</strong>。</p><p>Node.js/Python 中有很多高性能的代码，都是 C/C++ 写的，但跨语言调用往往涉及繁杂的接口转换代码，所以用 C/C++ ，写这些接口转换的时候非常痛苦。</p><p>我们看看如果用 Rust 的话，能否避免这些繁文缛节？毕竟，我们对使用 Rust ，为其它语言提供高性能代码，有很高的期望，如果这个过程也很复杂，那怎么用得起来？</p><p>对于 queryer 库，我们想暴露出来的主要接口是：query，用户传入一个 SQL 字符串和一个输出类型的字符串，返回一个按照 SQL 查询处理过的、符合输出类型的字符串。比如对 Python 来说，就是下面的接口：</p><pre><code class=\"language-python\">def query(sql, output = 'csv')\n</code></pre><p>好，我们来试试看。</p><p>先创建一个新的目录 queryer 作为 workspace，把现有的 queryer 移进去，成为它的子目录。然后，我们创建一个 Cargo.toml，包含以下代码：</p><pre><code class=\"language-bash\">[workspace]\n\nmembers = [\n  \"queryer\",\n  \"queryer-py\"\n]\n</code></pre><h3>Python</h3><p>我们在 workspace 的根目录下， <code>cargo new queryer-py --lib</code> ，生成一个新的 crate。在 queryer-py 下，编辑 Cargo.toml：</p><pre><code class=\"language-bash\">[package]\nname = \"queryer_py\" # Python 模块需要用下划线\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[lib]\ncrate-type = [\"cdylib\"] # 使用 cdylib 类型\n\n[dependencies]\nqueryer = { path = \"../queryer\" } # 引入 queryer\ntokio = { version = \"1\", features = [\"full\"] }\n\n[dependencies.pyo3] # 引入 pyo3\nversion = \"0.14\"\nfeatures = [\"extension-module\"]\n\n[build-dependencies]\npyo3-build-config = \"0.14\"\n</code></pre><p>Rust 和 Python 交互的库是 <a href=\"https://github.com/PyO3/pyo3\">pyo3</a>，感兴趣你可以课后看它的文档。在 src/lib.rs 下，添入如下代码：</p><pre><code class=\"language-rust\">use pyo3::{exceptions, prelude::*};\n\n#[pyfunction]\npub fn example_sql() -&gt; PyResult&lt;String&gt; {\n    Ok(queryer::example_sql())\n}\n\n#[pyfunction]\npub fn query(sql: &amp;str, output: Option&lt;&amp;str&gt;) -&gt; PyResult&lt;String&gt; {\n    let rt = tokio::runtime::Runtime::new().unwrap();\n    let data = rt.block_on(async { queryer::query(sql).await.unwrap() });\n    match output {\n        Some(\"csv\") | None =&gt; Ok(data.to_csv().unwrap()),\n        Some(v) =&gt; Err(exceptions::PyTypeError::new_err(format!(\n            \"Output type {} not supported\",\n            v\n        ))),\n    }\n}\n\n#[pymodule]\nfn queryer_py(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n    m.add_function(wrap_pyfunction!(query, m)?)?;\n    m.add_function(wrap_pyfunction!(example_sql, m)?)?;\n    Ok(())\n}\n</code></pre><p>即使我不解释这些代码，你也基本能明白它在干嘛。我们为 Python 模块提供了两个接口 example_sql 和 query。</p><p>接下来在 queryer-py 目录下，创建 virtual env，然后用 <code>maturin develop</code> 构建 python 模块：</p><pre><code class=\"language-bash\">python3 -m venv .env\nsource .env/bin/activate\npip install maturin ipython\nmaturin develop\n</code></pre><p>构建完成后，可以用 ipython 测试：</p><pre><code class=\"language-bash\">In [1]: import queryer_py\n\nIn [2]: sql = queryer_py.example_sql()\n\nIn [3]: print(queryer_py.query(sql, 'csv'))\nname,total_cases,new_cases,total_deaths,new_deaths\nIndia,32649947.0,46759.0,437370.0,509.0\nIran,4869414.0,36279.0,105287.0,571.0\nAfrica,7695475.0,33957.0,193394.0,764.0\nSouth America,36768062.0,33853.0,1126593.0,1019.0\nBrazil,20703906.0,27345.0,578326.0,761.0\nMexico,3311317.0,19556.0,257150.0,863.0\n\nIn [4]: print(queryer_py.query(sql, 'json'))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-4-7082f1ffe46a&gt; in &lt;module&gt;\n----&gt; 1 print(queryer_py.query(sql, 'json'))\n\nTypeError: Output type json not supported\n</code></pre><p>Cool！仅仅写了 20 行代码，就让我们的模块可以被 Python 调用，错误处理也很正常。你看，在用 Rust 库的基础上，我们稍微写一些辅助代码，就能够让它和不同的语言集成起来。我觉得这是 Rust 非常有潜力的使用方向。</p><p>毕竟，对很多公司来说，原有的代码库想要完整迁移到 Rust 成本很大，但是通过 Rust 和各个语言轻便地集成，可以把部分需要高性能的代码迁移到 Rust，尝到甜头，再一点点推广。这样，Rust 就能应用起来了。</p><h2>小结</h2><p>回顾这周的 Rust 代码之旅，我们先做了个 HTTPie，流程简单，青铜级难度，你学完所有权，理解了基本的 trait 后就能写。</p><p>之后的 Thumbor，引入了异步、泛型和更多的 trait，白银级难度，在你学完类型系统，对异步稍有了解后，应该可以搞定。</p><p>今天的 Queryer，使用了大量的 trait ，来让代码结构足够符合开闭原则和关注点分离，用了不少生命周期标注，来减少不必要的内存拷贝，还做了不少复杂的模式匹配来获取数据，是黄金级难度，在学完本课程的进阶篇后，你应该可以理解这些代码。</p><p>很多人觉得 Rust 代码很难写，尤其是泛型数据结构和生命周期搅在一起的时候。但在前两个例子里，生命周期的标注只出现过了一次。所以，<strong>其实大部分时候，你的代码并不需要复杂的生命周期标注</strong>。</p><p>只要对所有权和生命周期的理解没有问题，如果你陷入了无休止的生命周期标注，和编译器痛苦地搏斗，那你也许要停下来先想一想：</p><p>编译器如此不喜欢我的写法，会不会我的设计本身就有问题呢？我是不是该使用更好的数据结构？我是不是该重新设计一下？我的代码是不是过度耦合了？</p><p>就像茴香豆的茴字有四种写法一样，同一个需求，用相同的语言，不同的人也会有不同的写法。但是，<strong>优秀的设计一定是产生简单易读的代码，而不是相反</strong>。</p><p>好，这周的代码之旅就告一段落了，接下来我们就要展开一段壮丽的探险，你将会像比尔博·巴金斯那样，在通往孤山的冒险之旅中，一点点探索迷人的中土世界。等到我们学完了所有权、类型系统、trait、智能指针等内容之后，再来看这三个实例，相信你会有不一样的感悟。我也会在后续的课程中，根据已学内容，回顾今天写的代码，继续优化和完善它们。</p><h2>思考题</h2><p>Node.js 的处理和 Python 非常类似，但接口不太一样，就作为今天的思考题让你尝试一下。小提示：Rust 和 nodejs 间交互可以使用 <a href=\"https://github.com/neon-bindings/neon\">neon</a>。</p><p>欢迎在留言区分享你的思考。你的 Rust 学习第六次打卡成功，我们下一讲见！</p><h2>参考资料</h2><p>我们的 queryer 库目前使用到了操作系统的功能，比如文件系统，所以它无法被编译成 WebAssembly。未来如果能移除对操作系统的依赖，这个代码还能被编译成 WASM，供 Web 前端使用。</p><p>如果想在 iOS/Android 下使用这个库，可以用类似 Python/Node.js 的方法做接口封装，Mozilla 提供了一个 <a href=\"https://github.com/mozilla/uniffi-rs\">uniffi</a> 的库，它自己的 Firefox  各个端也是这么处理的：</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/f2/ab423b37a2c4b6bc3f5c17ca2c2e1af2.png?wh=3641x2386\" alt=\"\"></p><p>对于桌面开发，Rust 下有一个很有潜力的客户端开发工具 <a href=\"https://github.com/tauri-apps/tauri\">tauri</a>，它很有机会取代很多使用 Electron 的场合。</p><p>我写了一个简单的 tuari App 叫 data-viewer，如果你感兴趣的话，可以在 <a href=\"https://github.com/tyrchen/geektime-rust/blob/master/06_queryer/data-viewer\">github repo</a> 下的 data-viewer 目录下看 tauri 使用 queryer 的代码，下面是运行后的效果。为了让代码最简单，前端没有用任何框架，如果你是一名前端开发者，可以用 Vue 或者 React 加上一个合适的 CSS 库让整个界面变得更加友好。<br>\n<img src=\"https://static001.geekbang.org/resource/image/82/e7/826ef4913c54c81f8a5fa25ca92481e7.png?wh=2000x1433\" alt=\"\"></p>","comments":[{"had_liked":false,"id":310386,"user_name":"葡萄","can_delete":false,"product_type":"c1","uid":1018673,"ip_address":"","ucode":"6E8597D1B09807","user_header":"http://thirdwx.qlogo.cn/mmopen/ajNVdqHZLLDoDeeNST87MZEdfT8n7yEWp06KsFCTs2ssFh2tbHu413nibrRObOia1Zn9pqiaHgIicVkSHRZM3LHOEA/132","comment_is_top":true,"comment_ctime":1630636850,"is_pvip":false,"replies":[{"id":"112460","content":"👍","user_name":"作者回复","comment_id":310386,"uid":"1079375","ip_address":"","utype":1,"ctime":1630651484,"user_name_real":"Tyr"}],"discussion_count":2,"race_medal":0,"score":"9.2233721157948006e+18","product_id":100085301,"comment_content":"老师的课程消除了对解决这类问题(自己实现一个解析器的扩展)的恐惧，或者说以前一直在使用高级封装的语言，对这些偏低层一点的东西总是不敢触碰，一点点分析下来，完全没有想象中的那么难。哈哈，这就是get hands dirty的精要吧。学习rust很好，听老师讲课更好，感谢老师。","like_count":18,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526212,"discussion_content":"👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630651484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401568,"avatar":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","nickname":"记事本","note":"","ucode":"FA942636EE0CC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554264,"discussion_content":"好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646291922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312901,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":true,"comment_ctime":1632110603,"is_pvip":false,"replies":[{"id":"113367","content":"说得非常好！<br><br>对于「有着复杂业务逻辑的高性能服务器」，除了你说的这些，还有在处理的整个 pipeline 中要考虑引入 hook  做事件通知，以满足日志，监控等需求。在第 21 讲我们讨论 KV server 的时候，会逐步把你说的这些点都体现到。","user_name":"作者回复","comment_id":312901,"uid":"1079375","ip_address":"","utype":1,"ctime":1632153991,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"9.2233721115012997e+18","product_id":100085301,"comment_content":"<br>陈天老师，学完了这节课程，我觉得你和陈皓老师给了我新的启发。<br><br>在陈皓老师的《左耳听风》的《编程的本质》一节，提到了这么两个公式<br><br>（1）程序=算法+数据结构<br>（2）算法=逻辑+控制<br><br>我从这两个公式中领悟出：“程序=逻辑抽象+数据结构+控制”。数据结构是业务逻辑的静态的描述，它用术语表示数据结构的定义，而逻辑抽象是动态的，是对业务流程的抽象。<br><br>您在课程里所说的“绝大多数处理逻辑都是把数据从一个接口转换成另一个接口。”、“好的代码，应该是每个主流程都清晰简约，代码恰到好处地出现在那里，让人不需要注释也能明白作者在写什么”<br><br>与陈皓老师的“有效地分离 Logic、Control 和 Data 是写出好程序的关键所在！”，其实表达的是同一个意思。写任何代码，设计好Logic和Data，业务流程就算完成了（功能性需求），然后在这个基础上不断地优化Control，就能提高代码性能（非功能性需求）。<br><br>以“高性能网络编程”为例，网络编程的业务逻辑是“客户机-服务器模型”：<br><br>（1）客户进程发送请求<br>（2）服务进程处理请求（可能会访问某些本地或远程资源）<br>（3）服务进程发送响应<br>（4）客户进程处理响应<br><br>在这个过程中所体现的就是您所说的“绝大多数处理逻辑都是把数据从一个接口转换成另一个接口”的过程：<br><br>（1）客户进程中的业务数据变成请求数据包<br>（2）请求数据包编码成字节流发送到网络上<br>（3）服务进程获得字节流把它解码成请求数据包<br>（4）服务进程根据请求数据包访问资源得到结果<br>（5）客户进程把结果数据变成响应数据包<br>（6）响应数据包编码成字节流发送到网络上<br>（7）客户进程获得字节流把它解码成响应数据包<br>（8）客户进程处理响应数据包<br><br>对于一个最简单的iterative echo server来说，一次服务一个客户端，字节码解码成字符串，业务逻辑就是把客户端发来的再原封不动编码成字节码发回去就可以了。<br><br>然而对于一个有着复杂业务逻辑的高性能服务器来说，要考虑的点就不一样了：<br>（1）要实现字节码和“自定义消息”之间的来回转换，就要自定义Codec，甚至要引入protobuffer&#47;flatbuffer，并实现消息的注册机制<br>（2）要一次服务多个客户端，就要引入epoll&#47;kqueue这样的IO multiplexing机制，实现单个线程监听多个socket fd，甚至one-loop-per-thread，并做好网络连接管理，关闭服务器的时候不能硬着陆，要优雅关闭：等待所有网络连接接收并处理完消息再退出<br>（3）要提高IO性能，就要引入nonblocking IO<br>（4）要避免复杂业务逻辑占用IO线程资源，就要引入工作者线程池，把服务端对消息的处理放到另一个线程中执行，并做好IO线程和工作者线程的同步<br>（5）如果服务端要访问远程资源，就要引入配置，在服务启动时装配好各种mysql或者redis的handle，甚至自己实现一个connector访问其他的服务<br><br>这些都是属于Control范畴要考虑的东西。Logic决定了程序复杂度的下限，Control决定了上限。把Logic和Control混在一起，往往是写出来的代码难以维护的原因。","like_count":18,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527153,"discussion_content":"说得非常好！\n\n对于「有着复杂业务逻辑的高性能服务器」，除了你说的这些，还有在处理的整个 pipeline 中要考虑引入 hook  做事件通知，以满足日志，监控等需求。在第 21 讲我们讨论 KV server 的时候，会逐步把你说的这些点都体现到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632153991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310368,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":true,"comment_ctime":1630633207,"is_pvip":false,"replies":[{"id":"112458","content":"👍 全都跟下来啦。可以试着写写 nodejs 的支持。如果有疑问，可以去 github repo 里找答案 :)","user_name":"作者回复","comment_id":310368,"uid":"1079375","ip_address":"","utype":1,"ctime":1630651035,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"9.2233720642551992e+18","product_id":100085301,"comment_content":"In [1]:  import queryer_py<br><br>In [2]: sql = queryer_py.example_sql()<br><br>In [3]: print(queryer_py.query(sql, &#39;csv&#39;))<br>name,total_cases,new_cases,total_deaths,new_deaths<br>European Union,36489548.0,84973.0,766627.0,541.0<br>India,32857937.0,47092.0,439529.0,509.0<br>South America,36922209.0,37641.0,1131322.0,1104.0<br>Iran,5025233.0,33170.0,108393.0,599.0<br>Africa,7821187.0,30793.0,196917.0,639.0<br>Brazil,20804215.0,27345.0,581150.0,737.0<br><br>本周最骄傲、最爽的demo：<br><br>```shell<br>$ tree .<br><br>.<br>├── httpie<br>│   ├── src<br>│   └── target<br>├── queryer_all<br>│   ├── queryer<br>│   ├── queryer-py<br>│   └── target<br>├── scrape_url<br>│   ├── src<br>│   └── target<br>├── thumbor<br>│   ├── src<br>│   └── target<br>```","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526208,"discussion_content":"👍 全都跟下来啦。可以试着写写 nodejs 的支持。如果有疑问，可以去 github repo 里找答案 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630651035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310341,"user_name":"Fenix","can_delete":false,"product_type":"c1","uid":1074098,"ip_address":"","ucode":"AA8C1EECDFD405","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/b2/9223bc53.jpg","comment_is_top":false,"comment_ctime":1630599339,"is_pvip":true,"replies":[{"id":"112440","content":"👍 希望能够帮到","user_name":"作者回复","comment_id":310341,"uid":"1079375","ip_address":"","utype":1,"ctime":1630632139,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"61760141483","product_id":100085301,"comment_content":"太赞了，这种教学模式，处理问题的思路很有启发","like_count":14,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526202,"discussion_content":"👍 希望能够帮到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630632139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313549,"user_name":"Geek_01c6d8","can_delete":false,"product_type":"c1","uid":2051145,"ip_address":"","ucode":"E93426CB6535A1","user_header":"","comment_is_top":false,"comment_ctime":1632490078,"is_pvip":false,"replies":[{"id":"113748","content":"谢谢抬爱！","user_name":"作者回复","comment_id":313549,"uid":"1079375","ip_address":"","utype":1,"ctime":1632798987,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"31697261150","product_id":100085301,"comment_content":"全网最好的rust课程，没有之一！！！","like_count":8,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527387,"discussion_content":"谢谢抬爱！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632798987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310516,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1630716916,"is_pvip":true,"replies":[{"id":"112500","content":"我就是在需要的时候查阅，并不会系统地去一篇篇读。对于要了解的数据结构，我会去看它都实现了哪些 trait。未来你会逐渐明白这非常重要。有时候甚至被数据结构自己提供了哪些功能更重要。","user_name":"作者回复","comment_id":310516,"uid":"1079375","ip_address":"","utype":1,"ctime":1630734309,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"27400520692","product_id":100085301,"comment_content":"老师如何有效阅读docs.rs，我看你引入来的crate的文档，但是不知道如何有效学习？","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526259,"discussion_content":"我就是在需要的时候查阅，并不会系统地去一篇篇读。对于要了解的数据结构，我会去看它都实现了哪些 trait。未来你会逐渐明白这非常重要。有时候甚至被数据结构自己提供了哪些功能更重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630734309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311435,"user_name":"Colt","can_delete":false,"product_type":"c1","uid":1117983,"ip_address":"","ucode":"7BDB5F469E325D","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/1f/e894ae27.jpg","comment_is_top":false,"comment_ctime":1631237631,"is_pvip":false,"replies":[{"id":"112857","content":"谢谢赞赏！","user_name":"作者回复","comment_id":311435,"uid":"1079375","ip_address":"","utype":1,"ctime":1631242091,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"23106074111","product_id":100085301,"comment_content":"老师的思路非常正，这几次实践课可以看出RUST的魅力和优雅，能力有限需要多品几次","like_count":5,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526601,"discussion_content":"谢谢赞赏！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631242091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310407,"user_name":"老荀","can_delete":false,"product_type":"c1","uid":1214893,"ip_address":"","ucode":"C32E743518DECD","user_header":"https://static001.geekbang.org/account/avatar/00/12/89/ad/4efd929a.jpg","comment_is_top":false,"comment_ctime":1630643863,"is_pvip":true,"replies":[{"id":"112465","content":"谢谢！这周先给大家看看 Rust 能做什么，怎么做。下周起就要从堆和栈的关系入手讲所有权啦。","user_name":"作者回复","comment_id":310407,"uid":"1079375","ip_address":"","utype":1,"ctime":1630651670,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"23105480343","product_id":100085301,"comment_content":"太强了！这种实战性质的教学正是大家都需要的！不是那种重复啰嗦语法细节的烂课程","like_count":5,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526225,"discussion_content":"谢谢！这周先给大家看看 Rust 能做什么，怎么做。下周起就要从堆和栈的关系入手讲所有权啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630651670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310360,"user_name":"拉斯特","can_delete":false,"product_type":"c1","uid":2738694,"ip_address":"","ucode":"1E69B8052C1F59","user_header":"https://static001.geekbang.org/account/avatar/00/29/ca/06/a110cc63.jpg","comment_is_top":false,"comment_ctime":1630631617,"is_pvip":false,"replies":[{"id":"112441","content":"谢谢夸奖！希望能够帮到。","user_name":"作者回复","comment_id":310360,"uid":"1079375","ip_address":"","utype":1,"ctime":1630632158,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"18810500801","product_id":100085301,"comment_content":"通过一个实际案例展现了rust的特性，设计模式的使用，决解问题的思路和设计过程。简直不要太棒～","like_count":5,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526207,"discussion_content":"谢谢夸奖！希望能够帮到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630632158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336756,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1646355692,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14531257580","product_id":100085301,"comment_content":"总算磕磕绊绊把这节跟下来了，还没劝退！<br><br>一个小问题的解决方案：<br>提示dns error<br>PanicException: called `Result::unwrap()` on an `Err` value: error sending request for url (https:&#47;&#47;raw.githubusercontent.com&#47;owid&#47;covid-19-data&#47;master&#47;public&#47;data&#47;latest&#47;owid-covid-latest.csv): error trying to connect: dns error: 请求的名称有效，但是找不到请求的类型的数据。 (os error 11004)<br><br>Caused by:<br>    0: error trying to connect: dns error: 请求的名称有效，但是找不到请求的类型的数据。 (os error 11004)<br>    1: dns error: 请求的名称有效，但是找不到请求的类型的数据。 (os error 11004)<br>    2: 请求的名称有效，但是找不到请求的类型的数据。 (os error 11004)<br><br>windows解决方案：<br>1、查找 ip https:&#47;&#47;ipaddress.com&#47;website&#47;raw.githubusercontent.com<br>2、修改hosts ，C:\\Windows\\System32\\drivers\\etc<br>新增 如185.199.109.133 raw.githubusercontent.com 的ip地址，保存<br>","like_count":3},{"had_liked":false,"id":310642,"user_name":"玄澈","can_delete":false,"product_type":"c1","uid":2675290,"ip_address":"","ucode":"268FA9DFCD3E18","user_header":"https://static001.geekbang.org/account/avatar/00/28/d2/5a/63af190e.jpg","comment_is_top":false,"comment_ctime":1630816200,"is_pvip":false,"replies":[{"id":"112559","content":"首先 deref 的用途不是模拟继承。它最根源的需求是为只能指针提供对内部数据的方便的访问：https:&#47;&#47;doc.rust-lang.org&#47;std&#47;ops&#47;trait.Deref.html。当你需要你的数据结构在使用时用起来可以感觉和内部的数据类似时，可以使用 Deref trait。比如我可以构建一个 Memmap  结构，把文件 mmap 到内存中，但如果我提供一系列额外的接口，会让使用者很不方便，但我把它 deref 到 &amp;[u8]，让用户操作起来像一个内存 buffer，用起来就很舒服。当然，滥用它会给使用者带来一些困惑，所以标准文档建议只有在构建智能指针时使用。<br><br>我的建议：<br>1. 简单的数据结构的封装。像我 DataSet 的使用那样。<br>2. 智能指针。比如你要实现一个 SmartString，在 &lt; 24 字节时使用栈上的内存，更大的字符串才使用 String。这样的场合，如果不用 Deref，使用起来会非常不友好。","user_name":"作者回复","comment_id":310642,"uid":"1079375","ip_address":"","utype":1,"ctime":1630861515,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"14515718088","product_id":100085301,"comment_content":"老师你好，有观点认为用 Deref 模拟继承通常不是好的做法。例如：https:&#47;&#47;www.zhihu.com&#47;question&#47;36488041<br>https:&#47;&#47;rust-unofficial.github.io&#47;patterns&#47;anti_patterns&#47;deref.html<br>有好处也有坏处，我们该如何权衡以至于防止滥用呢。","like_count":4,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526297,"discussion_content":"首先 deref 的用途不是模拟继承。它最根源的需求是为只能指针提供对内部数据的方便的访问：https://doc.rust-lang.org/std/ops/trait.Deref.html。当你需要你的数据结构在使用时用起来可以感觉和内部的数据类似时，可以使用 Deref trait。比如我可以构建一个 Memmap  结构，把文件 mmap 到内存中，但如果我提供一系列额外的接口，会让使用者很不方便，但我把它 deref 到 &amp;amp;[u8]，让用户操作起来像一个内存 buffer，用起来就很舒服。当然，滥用它会给使用者带来一些困惑，所以标准文档建议只有在构建智能指针时使用。\n\n我的建议：\n1. 简单的数据结构的封装。像我 DataSet 的使用那样。\n2. 智能指针。比如你要实现一个 SmartString，在 &amp;lt; 24 字节时使用栈上的内存，更大的字符串才使用 String。这样的场合，如果不用 Deref，使用起来会非常不友好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630861515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310483,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1630673759,"is_pvip":false,"replies":[{"id":"112485","content":"非常棒！","user_name":"作者回复","comment_id":310483,"uid":"1079375","ip_address":"","utype":1,"ctime":1630686963,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"14515575647","product_id":100085301,"comment_content":"Node 来了：<br><br>```js<br>node <br>Welcome to Node.js v14.17.5.<br>Type &quot;.help&quot; for more information.<br>&gt; const rs = require(&#39;.&#39;)<br>undefined<br>&gt; rs.example_sql()<br>&#39;SELECT location name, total_cases, new_cases, total_deaths, new_deaths FROM https:&#47;&#47;raw.githubusercontent.com&#47;owid&#47;covid-19-data&#47;master&#47;public&#47;data&#47;latest&#47;owid-covid-latest.csv where new_deaths &gt;= 500 ORDER BY new_cases DESC LIMIT 6 OFFSET 5&#39;<br>```<br><br>爽～","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526247,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630686963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310395,"user_name":"茶底","can_delete":false,"product_type":"c1","uid":1188926,"ip_address":"","ucode":"687DD3686A84D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg","comment_is_top":false,"comment_ctime":1630639096,"is_pvip":false,"replies":[{"id":"112455","content":"太激动了，所以7个字里手误了2个吗😂","user_name":"编辑回复","comment_id":310395,"uid":"2547771","ip_address":"","utype":2,"ctime":1630645602,"user_name_real":"叶如芊"}],"discussion_count":1,"race_medal":0,"score":"14515540984","product_id":100085301,"comment_content":"今天这个雀食帅","like_count":3,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526216,"discussion_content":"太激动了，所以7个字里手误了2个吗😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630645602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336487,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1646185133,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10236119725","product_id":100085301,"comment_content":"老师，请教一个问题，代码中下载github中的covid-19 data的csv，在我的macpro上运行报错，提示oserror 61,connection refused，同样的代码在windows上运行是ok的，请问想在mac上运行该如何排查这个错误呢？","like_count":2},{"had_liked":false,"id":323456,"user_name":"施泰博","can_delete":false,"product_type":"c1","uid":2718966,"ip_address":"","ucode":"E88E4E737398EF","user_header":"https://static001.geekbang.org/account/avatar/00/29/7c/f6/028f80a8.jpg","comment_is_top":false,"comment_ctime":1637911207,"is_pvip":false,"replies":[{"id":"118887","content":"broken pipe 一般是服务端关闭而客户端还在继续发送数据，可以看看你的客户端是否多个 request 之间间隔时间太久而没有 keep-alive。如果没有线索，可以抓包看看，是不是在多个 reqest 间收到了 FIN&#47;RST。","user_name":"作者回复","comment_id":323456,"uid":"1079375","ip_address":"","utype":1,"ctime":1639850524,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10227845799","product_id":100085301,"comment_content":"reqwest 请求，broken pipe怎么破？","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539848,"discussion_content":"broken pipe 一般是服务端关闭而客户端还在继续发送数据，可以看看你的客户端是否多个 request 之间间隔时间太久而没有 keep-alive。如果没有线索，可以抓包看看，是不是在多个 reqest 间收到了 FIN/RST。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639850524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315755,"user_name":"null","can_delete":false,"product_type":"c1","uid":1374135,"ip_address":"","ucode":"A6E989C8B0BC39","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/b7/4097aa22.jpg","comment_is_top":false,"comment_ctime":1633964169,"is_pvip":false,"replies":[{"id":"115291","content":":) ","user_name":"作者回复","comment_id":315755,"uid":"1079375","ip_address":"","utype":1,"ctime":1635132920,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"10223898761","product_id":100085301,"comment_content":"理论时长：24:58，实际时常：24小时","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528160,"discussion_content":":) ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635132920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311487,"user_name":"兴小狸","can_delete":false,"product_type":"c1","uid":1140825,"ip_address":"","ucode":"8A1CDD3F0A59C0","user_header":"","comment_is_top":false,"comment_ctime":1631254033,"is_pvip":false,"replies":[{"id":"112864","content":"别着急，看不懂是正常的。体会一下写法，知道这段代码在干啥就行。先把学习的兴趣搞起来，才能撑住后面细致（枯燥）的语法学习。要是实在心里慌，你也可以配着中文的文档同步学，攒攒基础语法知识。","user_name":"编辑回复","comment_id":311487,"uid":"2547771","ip_address":"","utype":2,"ctime":1631254523,"user_name_real":"叶如芊"}],"discussion_count":1,"race_medal":0,"score":"10221188625","product_id":100085301,"comment_content":"说实话，越敲越慌，我完全不知道在做啥子~","like_count":2,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526631,"discussion_content":"别着急，看不懂是正常的。体会一下写法，知道这段代码在干啥就行。先把学习的兴趣搞起来，才能撑住后面细致（枯燥）的语法学习。要是实在心里慌，你也可以配着中文的文档同步学，攒攒基础语法知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631254523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311202,"user_name":"noisyes","can_delete":false,"product_type":"c1","uid":2538540,"ip_address":"","ucode":"94EC310B284AD2","user_header":"https://static001.geekbang.org/account/avatar/00/26/bc/2c/963688bb.jpg","comment_is_top":false,"comment_ctime":1631103687,"is_pvip":false,"replies":[{"id":"112789","content":"后面还会有更牛逼的 :)","user_name":"作者回复","comment_id":311202,"uid":"1079375","ip_address":"","utype":1,"ctime":1631150455,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"10221038279","product_id":100085301,"comment_content":"我只能说牛逼","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526520,"discussion_content":"后面还会有更牛逼的 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631150455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338762,"user_name":"TimJuly","can_delete":false,"product_type":"c1","uid":1065064,"ip_address":"","ucode":"56FE7BF7447DEA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eooNCNEO0vhRiagdrCnNW2LWzzV4g5tXJ9KkTu9hegCTx6lBrA06AZ3Uylb2wdKjvtrmZUWkKKHTGA/132","comment_is_top":false,"comment_ctime":1647704056,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5942671352","product_id":100085301,"comment_content":"世界上最好的语言嵌入 rust：<br>php -dextension=.&#47;target&#47;debug&#47;libqueryer.dylib test.php<br>Ok(DataSet(shape: (3, 5)<br>+-----------------------+-------------+-----------+--------------+------------+<br>| name                  | total_cases | new_cases | total_deaths | new_deaths |<br>| ---                   | ---         | ---       | ---          | ---        |<br>| str                   | f64         | f64       | f64          | f64        |<br>+=======================+=============+===========+==============+============+<br>| &quot;Lower middle income&quot; | 8.6854748e7 | 2.14076e5 | 1.290687e6   | 581        |<br>+-----------------------+-------------+-----------+--------------+------------+<br>| &quot;Upper middle income&quot; | 1.2277862e8 | 2.01718e5 | 2.473506e6   | 1539       |<br>+-----------------------+-------------+-----------+--------------+------------+<br>| &quot;South America&quot;       | 5.5508796e7 | 8.6086e4  | 1.270783e6   | 689        |<br>+-----------------------+-------------+-----------+--------------+------------+<br>))","like_count":1},{"had_liked":false,"id":331576,"user_name":"no-one","can_delete":false,"product_type":"c1","uid":1476425,"ip_address":"","ucode":"43D4C5450AAC83","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/49/1796143f.jpg","comment_is_top":false,"comment_ctime":1642660890,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5937628186","product_id":100085301,"comment_content":"数据集不能用，有没有什么办法解决，无法直接访问raw.githubusercontents.com，我配置https:&#47;&#47;raw.staticdn.net&#47;owid&#47;covid-19-data&#47;master&#47;public&#47;data&#47;latest&#47;owid-covid-latest.csv 但是还是报错<br><br>Error: error sending request for url (https:&#47;&#47;raw.githubusercontents.com&#47;owid&#47;covid-19-data&#47;master&#47;public&#47;data&#47;latest&#47;owid-covid-latest.csv): connection error: broken pipe<br><br>Caused by:<br>    0: connection error: broken pipe<br>    1: broken pipe","like_count":1,"discussions":[{"author":{"id":2991652,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/a6/24/961129f1.jpg","nickname":"forever 蒙","note":"","ucode":"472EB8946A3F96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575571,"discussion_content":"同样数据集不能用\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654936613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330037,"user_name":"沐佑","can_delete":false,"product_type":"c1","uid":2372564,"ip_address":"","ucode":"2643B3CB341906","user_header":"https://static001.geekbang.org/account/avatar/00/24/33/d4/02774d66.jpg","comment_is_top":false,"comment_ctime":1641745833,"is_pvip":false,"replies":[{"id":"120702","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642293595,"ip_address":"","comment_id":330037,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5936713129","product_id":100085301,"comment_content":"如果引入pyo3遇到这个问题：unresolved macro `proc_macro_call!`<br>请参考：https:&#47;&#47;github.com&#47;rust-analyzer&#47;rust-analyzer&#47;issues&#47;6835","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546311,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642293596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080653,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","nickname":"老实人Honey","note":"","ucode":"EA4AB5C0C33090","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545962,"discussion_content":"关掉错误提示？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642093185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311496,"user_name":"兴小狸","can_delete":false,"product_type":"c1","uid":1140825,"ip_address":"","ucode":"8A1CDD3F0A59C0","user_header":"","comment_is_top":false,"comment_ctime":1631257018,"is_pvip":false,"replies":[{"id":"112878","content":"你可以看到，我对外部包的数据结构做了一层封装，从内存布局的角度，这封装是不存在的，从类型系统的角度，这层封装可以让我为「我的类型」实现 From trait。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631284418,"ip_address":"","comment_id":311496,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926224314","product_id":100085301,"comment_content":"&#47;&#47;&#47; 把 SqlParser 的 SelectItem 转换成 DataFrame 的 Expr<br>像这些功能，是为外部引入的结构实现某些特定的 trait 吗？这样算修改外部包的功能吗？","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526635,"discussion_content":"你可以看到，我对外部包的数据结构做了一层封装，从内存布局的角度，这封装是不存在的，从类型系统的角度，这层封装可以让我为「我的类型」实现 From trait。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631284418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311265,"user_name":"yyxxccc","can_delete":false,"product_type":"c1","uid":2759441,"ip_address":"","ucode":"BEC53F4F4922B8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/1b/11/5e235665.jpg","comment_is_top":false,"comment_ctime":1631150298,"is_pvip":false,"replies":[{"id":"112799","content":"哈哈看完觉得不错，一定要动手写写，体验会完全不一样。不过课程还是要给大家讲清楚知识点嘛，感性一把还是得理性回来。你如果有兴趣可以自己做些拓展或者其他小项目再感受一下","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1631152535,"ip_address":"","comment_id":311265,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5926117594","product_id":100085301,"comment_content":"陈老师再来几个白金，王者级难度的👍，这一讲看得我地铁坐过站了😂。","like_count":2,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526542,"discussion_content":"哈哈看完觉得不错，一定要动手写写，体验会完全不一样。不过课程还是要给大家讲清楚知识点嘛，感性一把还是得理性回来。你如果有兴趣可以自己做些拓展或者其他小项目再感受一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631152535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310419,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1630648244,"is_pvip":true,"replies":[{"id":"112481","content":"宏编程不过是把给你的 AST（和文中 SQL 解析出来的东西类似）中的某些部分转换成其它 AST 或者数据结构的过程。等收集好需要的信息，最后就是若干 quote 生成目标代码收尾。所以我说它的主要流程就是不停地在做 From&#47;TryFrom。不是说 From&#47;TryFrom 就是宏编程。代码里是没有定义宏，但你在真正处理过程宏的时候，80% 的代码和 convert.rs 里做的事情类似。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1630684055,"ip_address":"","comment_id":310419,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925615540","product_id":100085301,"comment_content":"『宏编程的主要流程就是实现若干 From和 TryFrom』这里有点绕。是说实现From trait的工作可以算是一种宏编程吗？毕竟代码里只是实现了trait，没有定义宏。","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526230,"discussion_content":"宏编程不过是把给你的 AST（和文中 SQL 解析出来的东西类似）中的某些部分转换成其它 AST 或者数据结构的过程。等收集好需要的信息，最后就是若干 quote 生成目标代码收尾。所以我说它的主要流程就是不停地在做 From/TryFrom。不是说 From/TryFrom 就是宏编程。代码里是没有定义宏，但你在真正处理过程宏的时候，80% 的代码和 convert.rs 里做的事情类似。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630684055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358179,"user_name":"鍾泳璟","can_delete":false,"product_type":"c1","uid":3178110,"ip_address":"广东","ucode":"ED407D0E8919BD","user_header":"https://static001.geekbang.org/account/avatar/00/30/7e/7e/6181039c.jpg","comment_is_top":false,"comment_ctime":1664005769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664005769","product_id":100085301,"comment_content":"Covid.rs 在 examples 的部分代码有报错请的调整为<br><br><br>let filtered = df.filter(&amp;df.column(&quot;new_deaths&quot;)?.gt(500)?)?;<br>    println!(<br>        &quot;{:?}&quot;,<br>        filtered.select([<br>            &quot;location&quot;,<br>            &quot;total_cases&quot;,<br>            &quot;new_cases&quot;,<br>            &quot;total_deaths&quot;,<br>            &quot;new_deaths&quot;<br>        ])<br>    );","like_count":0},{"had_liked":false,"id":356841,"user_name":"风斩断晚霞","can_delete":false,"product_type":"c1","uid":2160093,"ip_address":"湖北","ucode":"74BC020047A2B4","user_header":"https://static001.geekbang.org/account/avatar/00/20/f5/dd/bb991e80.jpg","comment_is_top":false,"comment_ctime":1662631221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662631221","product_id":100085301,"comment_content":"数据集可以用我这个。。 https:&#47;&#47;gitee.com&#47;ekoclike&#47;get&#47;raw&#47;main&#47;qwe.csv","like_count":0},{"had_liked":false,"id":355011,"user_name":"暂时用这个名字和头像","can_delete":false,"product_type":"c1","uid":1049013,"ip_address":"北京","ucode":"39B8F94C750FC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b5/d53eb811.jpg","comment_is_top":false,"comment_ctime":1660974061,"is_pvip":false,"replies":[{"id":"129153","content":"写稿的当时老师都是跑过的，不过rust语言和相关库更新快，如果文稿中代码运行有误，一是可以参考github上的最新代码，二是可以去留言区找找相关讨论","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1661003876,"ip_address":"北京","comment_id":355011,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1660974061","product_id":100085301,"comment_content":"为啥课程绝大多数代码都无法运行的？老师有跑过的吗<br>error[E0308]: mismatched types<br>   --&gt; 06_queryer&#47;queryer&#47;src&#47;lib.rs:78:59<br>    |<br>78  |         .fold(filtered, |acc, (col, desc)| acc.sort(&amp;col, desc));<br>    |                                                ----       ^^^^ expected struct `SortOptions`, found `bool`<br>    |                                                |<br>    |                                                arguments to this function are incorrect<br>    |<br>note: associated function defined here<br>   --&gt; &#47;root&#47;.cargo&#47;registry&#47;src&#47;github.com-1ecc6299db9ec823&#47;polars-lazy-0.23.2&#47;src&#47;frame&#47;mod.rs:271:12<br>    |<br>271 |     pub fn sort(self, by_column: &amp;str, options: SortOptions) -&gt; Self {<br>    |            ^^^^<br>","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584654,"discussion_content":"写稿的当时老师都是跑过的，不过rust语言和相关库更新快，如果文稿中代码运行有误，一是可以参考github上的最新代码，二是可以去留言区找找相关讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661003876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352511,"user_name":"Rootrl","can_delete":false,"product_type":"c1","uid":1035390,"ip_address":"","ucode":"50FE3BBA92D417","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/7e/0d050964.jpg","comment_is_top":false,"comment_ctime":1658740052,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658740052","product_id":100085301,"comment_content":"被老师这“三板斧”镇住了。。 得，还是看完后面再来做项目吧~","like_count":0},{"had_liked":false,"id":348778,"user_name":"小杰","can_delete":false,"product_type":"c1","uid":2853200,"ip_address":"","ucode":"BBDF8E9F348F65","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","comment_is_top":false,"comment_ctime":1655384578,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655384578","product_id":100085301,"comment_content":"&#47;&#47;最后终于打印出来了。<br>In [1]: import queryer_py<br><br>In [2]: sql = queryer_py.example_sql()<br><br>In [3]: print(queryer_py.query(sql, &#39;csv&#39;))<br>name,total_cases,new_cases,total_deaths,new_deaths<br>World,324247961.0,3315994.0,5536264.0,7912.0<br>World,311269128.0,3188197.0,5501583.0,6425.0<br>World,320931967.0,3182700.0,5528352.0,8217.0<br>World,314300524.0,3031399.0,5510916.0,9333.0<br>World,303867545.0,2943889.0,5485492.0,7290.0<br>High income,172625621.0,2821346.0,2017981.0,6039.0<br><br>node 的版本<br>➜  queryer-js node<br>Welcome to Node.js v14.16.0.<br>Type &quot;.help&quot; for more information.<br>&gt; let sql = require(&#39;.&#39;)<br>undefined<br>&gt; sql.query()<br>&#39;name,total_cases,new_cases,total_deaths,new_deaths\\n&#39; +<br>  &#39;World,324247830.0,3315981.0,5536265.0,7913.0\\n&#39; +<br>  &#39;World,311269022.0,3188191.0,5501583.0,6425.0\\n&#39; +<br>  &#39;World,320931849.0,3182697.0,5528352.0,8217.0\\n&#39; +<br>  &#39;World,314300414.0,3031395.0,5510916.0,9333.0\\n&#39; +<br>  &#39;World,303867451.0,2943887.0,5485492.0,7290.0\\n&#39; +<br>  &#39;High income,172625462.0,2821336.0,2017982.0,6039.0\\n&#39;<br><br><br>&#47;&#47; 老师能我看下我写的代码吗？我看了neno的官方文档，好像不能多个参数的function，只能是“FunctionContext”，所以方法里面的，sql和csv都写死了。<br>fn query (mut cx: FunctionContext) -&gt; JsResult&lt;JsString&gt;{<br>    let rt = tokio::runtime::Runtime::new().unwrap();<br>    let data = rt.block_on(async { queryer::query(queryer::example_sql()).await.unwrap() });<br>    Ok(cx.string(data.to_csv().unwrap()))<br>}<br><br><br>#[neon::main]<br>fn main(mut cx: ModuleContext) -&gt; NeonResult&lt;()&gt; {<br>    cx.export_function(&quot;query&quot;, query)?;<br>    Ok(())<br>}","like_count":0},{"had_liked":false,"id":348777,"user_name":"小杰","can_delete":false,"product_type":"c1","uid":2853200,"ip_address":"","ucode":"BBDF8E9F348F65","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","comment_is_top":false,"comment_ctime":1655384568,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655384568","product_id":100085301,"comment_content":"&#47;&#47; 这篇文章看了我3天，算是我看的非常认真的文档，真的是只能一个一个来<br><br>&#47;&#47; 分析：<br>&#47;&#47; 1、使用 sqlparser 解析sql<br><br>&#47;&#47; 2、使用 polars 对 csv -&gt; (转化) DataFrame<br><br>&#47;&#47; 3、sql ast -&gt; （映射）DataFrame, 用代码库的方式表达就是 SqlParser AST -&gt; （转化）Polars AST<br>&#47;&#47; 此过程叫语法之间的转化，也叫数据结构的转化<br><br><br>&#47;&#47; 文件：<br>&#47;&#47; examples&#47;dialect.rs 文件，查看 sqlparser的AST<br><br>&#47;&#47; src&#47;dialect.rs文件，测试是否能正常解析自定的方言sql <br>&#47;&#47;（SELECT * from https:&#47;&#47;abc.xyz&#47;covid-cases.csv where new_deaths &gt;= 500）<br><br>&#47;&#47; example&#47;covid.rs, 实现一个DataFrame的加载和查询<br><br>&#47;&#47; 接下来的重点来了，src&#47;convert.rs, 定义一个数据结构来描述两者对应的关系<br>&#47;&#47; 这个是本篇文章的核心，看老师的讲解还好，但是真正去看完整的代码，整个人都是懵的，特别是涉及到rust的生命周期。其实就是自己用的少<br><br>&#47;&#47; 获取数据，将retrieve_data 和具体每一种类型的处理分离，实现低耦合、高内聚 <br><br>&#47;&#47; 主流程，在解引用就挺懵的。所以这个文件就看得云里雾里","like_count":0},{"had_liked":false,"id":341958,"user_name":"兴小狸","can_delete":false,"product_type":"c1","uid":1140825,"ip_address":"","ucode":"8A1CDD3F0A59C0","user_header":"","comment_is_top":false,"comment_ctime":1649931353,"is_pvip":false,"replies":[{"id":"125093","content":"先有个大概感觉，后面具体掌握为什么要这么写会更有针对性。如果实在懵逼，get hands dirty部分可以先跳过，后面多学点再回来，加油～","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1650262310,"ip_address":"","comment_id":341958,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1649931353","product_id":100085301,"comment_content":"唔~我代码抄了一半都是不懂的，我这样抄有效吗？老师。我也不理解为啥要这样写，也不知道这样实现的道理","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564507,"discussion_content":"先有个大概感觉，后面具体掌握为什么要这么写会更有针对性。如果实在懵逼，get hands dirty部分可以先跳过，后面多学点再回来，加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650262311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335800,"user_name":"嵩","can_delete":false,"product_type":"c1","uid":1082928,"ip_address":"","ucode":"7CB4B8EAD84E8F","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/30/a5eff028.jpg","comment_is_top":false,"comment_ctime":1645692836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645692836","product_id":100085301,"comment_content":"可以说学完这一章就燃起来了～","like_count":0},{"had_liked":false,"id":333873,"user_name":"Alice","can_delete":false,"product_type":"c1","uid":1926134,"ip_address":"","ucode":"6D8F901229B182","user_header":"https://static001.geekbang.org/account/avatar/00/1d/63/f6/225df928.jpg","comment_is_top":false,"comment_ctime":1644568272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644568272","product_id":100085301,"comment_content":"sqlparser [0.14.0] 2022-02-09 版本修改增加了对通配符 WildCard 的限制，如果只是为了让教程代码快速通过，可以删除 WildCard 的模式匹配编译即可<br><br>&#47;&#47; SqlExpr::Wildcard =&gt; Ok(Self::Wildcard),<br><br>Add FunctionArgExpr and remove Expr::[Qualified]Wildcard<br><br>该修改的 PR 入口：https:&#47;&#47;github.com&#47;sqlparser-rs&#47;sqlparser-rs&#47;pull&#47;378","like_count":0},{"had_liked":false,"id":331753,"user_name":"matrix","can_delete":false,"product_type":"c1","uid":1679933,"ip_address":"","ucode":"7D085F45C8A0DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ygRfx93LO1ziazydV4eZRGdqkxJVXJzbnFWicvzibnmYdvjYdiaya2wS4EbAURxKnMXbt9rrGsN4DINsc2XzAKibtuA/132","comment_is_top":false,"comment_ctime":1642751007,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1642751007","product_id":100085301,"comment_content":"陈天老师， polars 升级到0.18之后， Expr这个enum中的类型的属性都变成了 Arc&lt;str&gt; ，这种情况下该怎么转换Identifier这些值呢?","like_count":0,"discussions":[{"author":{"id":1926134,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/63/f6/225df928.jpg","nickname":"Alice","note":"","ucode":"6D8F901229B182","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550508,"discussion_content":"可以尝试这样的写法：Arc::from(alias.to_string())\n\n如果你已经学完了大多数课程内容，可以阅读一下和这个问题有关的 RFC 文档：\nhttps://github.com/rust-lang/rfcs/blob/master/text/1845-shared-from-slice.md","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644572374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330826,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1642184525,"is_pvip":true,"replies":[{"id":"120751","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642308063,"ip_address":"","comment_id":330826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642184525","product_id":100085301,"comment_content":"neno done<br>```rs<br>use neon::prelude::*;<br><br>fn example_sql(mut cx: FunctionContext) -&gt; JsResult&lt;JsString&gt; {<br>    Ok(cx.string(queryer::example_sql()))<br>}<br><br>fn query(mut cx: FunctionContext) -&gt; JsResult&lt;JsString&gt; {<br>    let sql = cx.argument::&lt;JsString&gt;(0)?;<br>    let output = cx.argument_opt(1);<br>    let rt = tokio::runtime::Runtime::new().unwrap();<br>    let data = rt.block_on(async { queryer::query(sql.value(&amp;mut cx)).await.unwrap() });<br>    if let Some(v) = output {<br>        let csv: Handle&lt;JsString&gt; = v.downcast(&amp;mut cx).unwrap();<br>        let csv = csv.value(&amp;mut cx);<br>        if csv.eq(&quot;csv&quot;) {<br>            return Ok(cx.string(data.to_csv().unwrap()));<br>        }<br>        return cx.throw_error(format!(<br>            &quot;Output type {} not supported&quot;,<br>            csv<br>        ));<br>    } else {<br>        return Ok(cx.string(data.to_csv().unwrap()));<br>    }<br><br>}<br><br>#[neon::main]<br>fn main(mut cx: ModuleContext) -&gt; NeonResult&lt;()&gt; {<br>    cx.export_function(&quot;example_sql&quot;, example_sql)?;<br>    cx.export_function(&quot;query&quot;, query)?;<br>    Ok(())<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546389,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642308063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330672,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1642093017,"is_pvip":true,"replies":[{"id":"120683","content":"这个恐怕要好好看 pyo3 的文档","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642292295,"ip_address":"","comment_id":330672,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642093017","product_id":100085301,"comment_content":"pyo3这个例子，现在有点跑不动了。<br>ld: symbol(s) not found for architecture x86_64<br>          clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>https:&#47;&#47;github.com&#47;PyO3&#47;pyo3&#47;issues&#47;1800，暂时不是很懂为什么","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546292,"discussion_content":"这个恐怕要好好看 pyo3 的文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642292295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005944,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/78/4f384f93.jpg","nickname":"龙","note":"","ucode":"B353E8002D2BF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556078,"discussion_content":"一开始也是报这个错，后来发现是少了build.rs，加上老师的这个文件就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647187171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328478,"user_name":"上沅同学","can_delete":false,"product_type":"c1","uid":1238646,"ip_address":"","ucode":"CDE043A508E4EA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/76/26f555ce.jpg","comment_is_top":false,"comment_ctime":1640749313,"is_pvip":false,"replies":[{"id":"120774","content":"lol","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642309445,"ip_address":"","comment_id":328478,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1640749313","product_id":100085301,"comment_content":"讲的太棒了！就是没怎么看懂，要慢慢啃。。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546413,"discussion_content":"lol","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328065,"user_name":"Geek_9d1ee1","can_delete":false,"product_type":"c1","uid":2541935,"ip_address":"","ucode":"D09037B4B3EE53","user_header":"","comment_is_top":false,"comment_ctime":1640511149,"is_pvip":false,"replies":[{"id":"120782","content":"Trait 和实现 Trait 的 Struct 只要其中一个是自己定义的就可以避免孤儿规则","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642309713,"ip_address":"","comment_id":328065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640511149","product_id":100085301,"comment_content":"回来看这个代码，发现个问题，<br><br>&#47;&#47;&#47; 把 SqlParser 的 BinaryOperator 转换成 DataFrame 的 Operator<br>impl TryFrom&lt;Operation&gt; for Operator {...}<br><br>这里 Operator 是个外部的(Polars 里的) Type, 为什么可以为这个实现 TryFrom","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546421,"discussion_content":"Trait 和实现 Trait 的 Struct 只要其中一个是自己定义的就可以避免孤儿规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323588,"user_name":"Lambda","can_delete":false,"product_type":"c1","uid":1867180,"ip_address":"","ucode":"F7A95A0491D298","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7d/ac/a6026f3b.jpg","comment_is_top":false,"comment_ctime":1638006916,"is_pvip":true,"replies":[{"id":"118883","content":"b（￣▽￣）d","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639850091,"ip_address":"","comment_id":323588,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638006916","product_id":100085301,"comment_content":"我看不懂, 但我大受震撼","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539844,"discussion_content":"b（￣▽￣）d","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639850091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320109,"user_name":"Roy Liang","can_delete":false,"product_type":"c1","uid":1098898,"ip_address":"","ucode":"1DF5FC831A35DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/92/338b5609.jpg","comment_is_top":false,"comment_ctime":1636083547,"is_pvip":false,"replies":[{"id":"116344","content":"你可以自己打印，或者在运行时传入相应的环境变量：https:&#47;&#47;docs.rs&#47;polars-core&#47;0.17.0&#47;src&#47;polars_core&#47;fmt.rs.html#324-461","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636526110,"ip_address":"","comment_id":320109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636083547","product_id":100085301,"comment_content":"怎样才能使DataSet显示超过8行8列，现在超过这个数就有行或者列用省略号代替了","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529878,"discussion_content":"你可以自己打印，或者在运行时传入相应的环境变量：https://docs.rs/polars-core/0.17.0/src/polars_core/fmt.rs.html#324-461","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636526110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319956,"user_name":"Roy Liang","can_delete":false,"product_type":"c1","uid":1098898,"ip_address":"","ucode":"1DF5FC831A35DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/92/338b5609.jpg","comment_is_top":false,"comment_ctime":1636018043,"is_pvip":false,"replies":[{"id":"116347","content":"在数据处理中，用到的 json 一般是 ndjson：http:&#47;&#47;ndjson.org&#47;","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636526222,"ip_address":"","comment_id":319956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636018043","product_id":100085301,"comment_content":"我自己实现了JsonReader，不知道为什么不支持标准的JSON，只支持这种格式（外层没有中括号，对象之间没有逗号分隔只有换行，成员不能是嵌套的JSON）<br>{&quot;a&quot;:1, &quot;b&quot;:2.0, &quot;c&quot;:false, &quot;d&quot;:&quot;4&quot;}<br>{&quot;a&quot;:-10, &quot;b&quot;:-3.5, &quot;c&quot;:true, &quot;d&quot;:&quot;4&quot;}","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529827,"discussion_content":"在数据处理中，用到的 json 一般是 ndjson：http://ndjson.org/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636526222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319314,"user_name":"宁信","can_delete":false,"product_type":"c1","uid":2819142,"ip_address":"","ucode":"1EFF0C4182412F","user_header":"https://static001.geekbang.org/account/avatar/00/2b/04/46/c673e5ad.jpg","comment_is_top":false,"comment_ctime":1635739899,"is_pvip":false,"replies":[{"id":"116386","content":"有没有可能你意外改动了？把这个目录删了再重新拉试试看","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636556389,"ip_address":"","comment_id":319314,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635739899","product_id":100085301,"comment_content":"error: missing `struct` for struct definition<br>  --&gt; &#47;Users&#47;pundix041&#47;.cargo&#47;registry&#47;src&#47;github.com-1ecc6299db9ec823&#47;http-0.2.5&#47;src&#47;header&#47;map.rs:45:4<br>   |<br>45 | pub structHeaderMap&lt;T = HeaderValue&gt; {<br>   |    ^<br>   |<br>help: add `struct` here to parse `structHeaderMap` as a public struct<br>   |<br>45 | pub struct structHeaderMap&lt;T = HeaderValue&gt; {<br><br><br>http 0.2.5包，我看文档都是正确的，偏偏我编译时自动拉下来的包，struct HeaderMap少了个空格，导致编译不过，这是为啥啊","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529588,"discussion_content":"有没有可能你意外改动了？把这个目录删了再重新拉试试看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636556389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318503,"user_name":"石头","can_delete":false,"product_type":"c1","uid":1013081,"ip_address":"","ucode":"D72F9EDFABFFBA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/59/bd80584f.jpg","comment_is_top":false,"comment_ctime":1635316689,"is_pvip":false,"replies":[{"id":"116577","content":"首先你要使用 release build，debug binary 携带很多调试信息，所以很大。如果你想进一步缩减大小，可以看：https:&#47;&#47;github.com&#47;johnthagen&#47;min-sized-rust","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636642386,"ip_address":"","comment_id":318503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635316689","product_id":100085301,"comment_content":"针对 js，为啥编译出来的index.node 那么大呢？ 比较好奇。<br><br>```bash<br>(.env) ➜  queryer-js git:(master) ✗ du -h index.node<br> 23M\tindex.node<br>```","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529275,"discussion_content":"首先你要使用 release build，debug binary 携带很多调试信息，所以很大。如果你想进一步缩减大小，可以看：https://github.com/johnthagen/min-sized-rust","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636642386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318093,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1635147871,"is_pvip":false,"replies":[{"id":"116589","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636644090,"ip_address":"","comment_id":318093,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635147871","product_id":100085301,"comment_content":"来来来，看看俺的😆:<br>node<br>https:&#47;&#47;github.com&#47;Rust-Beginner&#47;queryer&#47;blob&#47;master&#47;queryer-node&#47;README.md<br><br>老师在获取 sql 和 output 参数的时候用的都是cx.argument，但我运行的时候发现如果只传一个参数会直接报 TypeError: not enough arguments。改用 cx.argument_opt 就好了，具体参考我的代码。<br><br>另外我的输出使用 console.table 美化了一下，还处理了查询结果为空的情况。<br><br>web前端<br>https:&#47;&#47;github.com&#47;Rust-Beginner&#47;queryer&#47;blob&#47;master&#47;queryer-fed&#47;README.md<br><br>作为一名前端er，界面是不能马马虎虎哒，用户体验也要有一点～～<br>和老师的比起来，高下立判哈哈哈（对不起😂<br>","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529101,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636644090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098898,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/92/338b5609.jpg","nickname":"Roy Liang","note":"","ucode":"1DF5FC831A35DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412177,"discussion_content":"clone了代码，怎么使用呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636095241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317761,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1634951202,"is_pvip":false,"replies":[{"id":"115230","content":"从语言的表现力来说，Rust 比 java 更好，但总体代码量是个跟具体实现非常相关的东西，你可以认为二者代码量在一个数量级。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635121461,"ip_address":"","comment_id":317761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634951202","product_id":100085301,"comment_content":"不知道重写一下DataX的数据同步核心需要多少行代码","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528959,"discussion_content":"从语言的表现力来说，Rust 比 java 更好，但总体代码量是个跟具体实现非常相关的东西，你可以认为二者代码量在一个数量级。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635121461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315343,"user_name":"三叶虫tlb","can_delete":false,"product_type":"c1","uid":1010499,"ip_address":"","ucode":"A8236974932E6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/43/b6bcab56.jpg","comment_is_top":false,"comment_ctime":1633847742,"is_pvip":false,"replies":[{"id":"114431","content":"哈哈不然怎么叫黄金级难度呢，难度高才有挑战的快乐，加油加油💪","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1634003458,"ip_address":"","comment_id":315343,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1633847742","product_id":100085301,"comment_content":"这节好难","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527939,"discussion_content":"哈哈不然怎么叫黄金级难度呢，难度高才有挑战的快乐，加油加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634003458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312772,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1631980586,"is_pvip":true,"replies":[{"id":"113406","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632240402,"ip_address":"","comment_id":312772,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631980586","product_id":100085301,"comment_content":"终于跑通了基本款了<br>DataSet(shape: (8, 5)<br>+------------------+--------------+-----------+--------------+------------+<br>| name             | total_cases  | new_cases | total_deaths | new_deaths |<br>| ---              | ---          | ---       | ---          | ---        |<br>| str              | f64          | f64       | f64          | f64        |<br>+==================+==============+===========+==============+============+<br>| &quot;World&quot;          | 2.27649349e8 | 5.93099e5 | 4.679137e6   | 8881       |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;North America&quot;  | 5.0443159e7  | 2.36269e5 | 1.025098e6   | 3151       |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;United States&quot;  | 4.1993789e7  | 2.07886e5 | 6.72635e5    | 2635       |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;Asia&quot;           | 7.3737284e7  | 1.90107e5 | 1.096865e6   | 2820       |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;Europe&quot;         | 5.7839559e7  | 1.2877e5  | 1.204783e6   | 1783       |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;European Union&quot; | 3.7314706e7  | 5.2745e4  | 7.63775e5    | 544        |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;South America&quot;  | 3.7334191e7  | 1.9913e4  | 1.145044e6   | 654        |<br>+------------------+--------------+-----------+--------------+------------+<br>| &quot;Russia&quot;         | 7.130245e6   | 1.9589e4  | 1.93111e5    | 771        |<br>+------------------+--------------+-----------+--------------+------------+","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527106,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632240402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312771,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1631978219,"is_pvip":true,"replies":[{"id":"113405","content":"没有关系。Rust 编译器会处理。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632240392,"ip_address":"","comment_id":312771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631978219","product_id":100085301,"comment_content":"DataSet 在lib.rs，Load在loader.rs，lib.rs和loader.rs存在互相依赖的关系，这样子好吗，有个疑问请教下老师","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527105,"discussion_content":"没有关系。Rust 编译器会处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632240392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311906,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1631527473,"is_pvip":false,"replies":[{"id":"113013","content":"基础语法后面会讲，但是如果泛讲就没啥意思了，语法的理解重难点会是课程的重点，所以学到具体语法的时候，也推荐搭配加餐里的基础资料来学习和练习。","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1631531535,"ip_address":"","comment_id":311906,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1631527473","product_id":100085301,"comment_content":"第一次学，直接上三盘硬菜，真的很懵逼。。。请问基本的语法后面还会涵盖嘛？还需不需要找其他资料补下基本语法？","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526790,"discussion_content":"基础语法后面会讲，但是如果泛讲就没啥意思了，语法的理解重难点会是课程的重点，所以学到具体语法的时候，也推荐搭配加餐里的基础资料来学习和练习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631531535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311125,"user_name":"cool~doudou💯","can_delete":false,"product_type":"c1","uid":1019392,"ip_address":"","ucode":"B4F0E04C86EDB4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJCoNOgDmxPbMHmttcSa0LJShp2x4PkvAJw4eicvmUK487lPJZlDbhDbDtBcA49YBDQt9VMlvdqd7Q/132","comment_is_top":false,"comment_ctime":1631081371,"is_pvip":false,"replies":[{"id":"112750","content":"哈哈哈","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1631081671,"ip_address":"","comment_id":311125,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1631081371","product_id":100085301,"comment_content":"我擦，老师好，我在听课的时候发现，这个声音为啥这么熟悉，仔细一想原来我在油管上看老师的rust课程，看了三遍，那几天全是这个声音在脑子里 ， 这个声音我都快魔杖了","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526482,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631081671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310864,"user_name":"Geek_be0d87","can_delete":false,"product_type":"c1","uid":2192311,"ip_address":"","ucode":"8259B623EEDCC6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/bqWMox7TsotHiapiaEbJG6YKLfOqYib1b65oW5FA2qiboazIjfSia3VdP90aMKtg3qsibIviaRsYSp9aFia2hYEqgumibug/132","comment_is_top":false,"comment_ctime":1630938538,"is_pvip":false,"replies":[{"id":"112656","content":"哈哈，谢谢厚爱。现在我先把这门课做好。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1630951205,"ip_address":"","comment_id":310864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630938538","product_id":100085301,"comment_content":"老师 再开个程序设计的课吧","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526380,"discussion_content":"哈哈，谢谢厚爱。现在我先把这门课做好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630951205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310469,"user_name":"Akon Convict","can_delete":false,"product_type":"c1","uid":1044453,"ip_address":"","ucode":"364E1CA9F347C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ef/e5/7ee97c9a.jpg","comment_is_top":false,"comment_ctime":1630665030,"is_pvip":true,"replies":[{"id":"112484","content":"就是要这个震撼的效果（开玩笑😁）现在大家都不太理解语法，都在一个字一个字抄写代码，（当然之前学过一些的大佬会在留言区分享作业）所以不理解非常正常，也不要担心，后面都会讲到。这周的挑战目标很简单，运行出来，就达标了。","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1630686710,"ip_address":"","comment_id":310469,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1630665030","product_id":100085301,"comment_content":"这一堆特性基本上看懵了。","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526245,"discussion_content":"就是要这个震撼的效果（开玩笑😁）现在大家都不太理解语法，都在一个字一个字抄写代码，（当然之前学过一些的大佬会在留言区分享作业）所以不理解非常正常，也不要担心，后面都会讲到。这周的挑战目标很简单，运行出来，就达标了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630686710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310420,"user_name":"lwx","can_delete":false,"product_type":"c1","uid":1438618,"ip_address":"","ucode":"4ECE8D7662884A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0tOImISYW8gQfsjAneCdic5B0lLLmmyicQyAaD3pDG9K0vzQBL8FG2hF0pY30035mcic7ftYgjpKDeb5mIH2QHepA/132","comment_is_top":false,"comment_ctime":1630648992,"is_pvip":false,"replies":[{"id":"112482","content":"多读多写多思考，你也可以越来越牛逼 :)","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1630684125,"ip_address":"","comment_id":310420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630648992","product_id":100085301,"comment_content":"看完只有一个感觉，天哥牛逼","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526231,"discussion_content":"多读多写多思考，你也可以越来越牛逼 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630684125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}