{"id":672766,"title":"16｜梦幻联动：智能提词，秒变专业画师","content":"<p>你好，我是键盘，我们来玩转绘图魔法。</p><p>作为文章素材，配图是对读者的第一道具象的感官冲击。绘图AI的出现彻底改变了创作图片的方式，当一个新事物让原来做事的边际成本无限趋于0的时候，它就是一个伟大的变革。但它对于普通人来讲却仿佛遥不可及，中间隔着人类对各种AI的了解屏障。</p><p>以Midjourney为例，实际拥抱绘图AI的时候，你会遇到不少麻烦。</p><ul>\n<li><strong>劝退的门槛：</strong>想要入门AI绘图，最快的方式是啃一遍<a href=\"https://docs.midjourney.com/docs/quick-start\">官方英文指引</a>，了解必要的基础。还要至少花一个月（$30）的时间，亲手输出上千张图找到基础的手感，这是一周目。之后还要花1-2周目尝试各种题材和参数，才能真正入门。</li>\n<li><strong>写不出prompt：</strong>有需求，没结果。网上分享的提词器和模版只能照搬，不得章法。</li>\n<li><strong>控制不了画面：</strong>非专业选手会在这一步团灭。很多同学都听说过SD + ControlNet可以很好地控制画面，但是倒在了部署SD和显卡这两步，根本摸不到主界面。</li>\n</ul><p>简而言之，看似简单几句的prompt，就是开不了口。</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/05/2abd6f4dd79501ef942a10a8ebafd505.png?wh=1920x457\" alt=\"图片\" title=\"开不了口\"></p><p>有没可能把这道“了解屏障”击碎呢？答案是联动2个当今的顶流AI，指挥GPT创作绘图prompt（以下用“提词”指代），绘图AI负责创作，动动口就把图给画了。</p><!-- [[[read_end]]] --><p>我选取的绘图AI是Midjourney（以下简称MJ），这套方法适用于任何绘图AI，比如Stable Diffusion（以下简称SD）、<a href=\"https://labs.openai.com/\">Dall-E</a>，甚至可以迁移到动态的 <a href=\"https://kaiber.ai/\">Kaiber</a> 以及 <a href=\"https://research.runwayml.com/gen1\">GEN-1</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/ea/edcaa8b5788d8cdba0a1e878381498ea.png?wh=1920x612\" alt=\"图片\"></p><p><strong>解题的关键可以拆解为4点。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/9b/a2/9b61859599b560120742bb920a44d7a2.png?wh=1920x599\" alt=\"图片\"></p><ol>\n<li><strong>话中有</strong>“<strong><strong>画</strong></strong>”<strong>。</strong>在GPT中，用一个短提示语就能生成完整细致的绘图prompt，主打方便高效。</li>\n<li><strong>知其所以然。</strong>生成的结果不能只是一大段给AI看的咒语，要形成专业、完整的结构参考，包括画面要素、完整的中文描述和清晰、明确的英文绘图prompt。这些构成要素会帮助你理解画面的细节和生成过程，是你控制画面的切入点，后续替换关键词会方便得多。</li>\n<li><strong>去除干扰。</strong>绘图prompt里面的描述并不是都有效，能不能“降噪”，直接萃取精华？</li>\n<li><strong>具备可扩展性</strong><strong>。</strong>一份结果还不够，能不能指定风格、题材、画幅比例等细节，后续复用？</li>\n</ol><p>下面我们挨个来解决。</p><h2>教给GPT：用GPT来提词</h2><p>AI的优势就是学得远远比人快。想要自己写绘图prompt，最佳策略就是先教AI写，让TA来帮我们解决落地困难的问题。我们边用边学，体验多了自然就有手感。这也是快速应用新技术的通用方法。</p><h3>✦ 轻松提词</h3><p>想要以小搏大，让GPT根据一个短提示语轻松说出整张画面的话，使用指令集就能实现。你可以在指令集中定义一个范例主题分支作为首次输出的示例，它有两个作用：</p><ol>\n<li>检验GPT的理解。</li>\n<li>到MJ中运行提词，检验结果。</li>\n</ol><p>而后续的输出，只要不断更换主题就好。比如：/key 长河落日、/key 小鹿喝水、/key 熊猫睡在云中……有时候遗漏了 <code>/key</code> 前缀，GPT也会自动容错。通过这种高效的方式，把GPT当成ATM来提图。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">/key：&lt;河边树屋（默认范例）&gt; #用于生成创作主题的提示语\n</code></pre><h3>✦ 多维击破</h3><p>要打造GPT绘图提词器，最简单粗暴的方法当然就是GPT直接输出一句英文的绘图prompt，我们贴到MJ里面出图。但是这种盲盒流程用起来就很难受，不懂的细节还是不懂。</p><p>所以，我们要一步一步推着GPT思考，不仅要拿到这个绘图prompt，还要了解它的来龙去脉。有了步骤展开，被激活的慢思维也会促使GPT输出更专业的效果。展开什么呢？<strong>绘图prompt的构成要素和细节维度。</strong></p><p><strong>首先，让GPT把最重要的主题明确出来</strong>。没有主题，所有细节都没有意义。主题由短提示语智能扩展而来，扩展框架参考之前分享过的<a href=\"https://time.geekbang.org/column/article/671109\">主题结构5要素</a>“谁（和谁）+在哪里+做什么+什么时间+怎么做”。具体怎么做呢？看prompt。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">一、主题框架：\n## 主题：\n**根据/key，用一句话描述清晰、具体的画面框架（中文）** \n说明： \n- 主题描述框架： Who/Sth., Where, What(do), When, How \n- Who/Sth. 为必不可少的核心，加上 Where、What、When、How 中任意 1 到4 个，组成简洁、连贯的句子&nbsp;\n</code></pre><p>举个例子，提交指令 <code>/key 飞鹰</code>，GPT会勾勒出一个完整的画面框架：一只雄鹰翱翔天际，清晨，鸟瞰。这里跟现实中的绘画草图是一样的。</p><p><strong>搭好这个大框架之后，<strong><strong>再</strong></strong>构建主题所在的具体环境细节</strong><strong>。</strong>这个模块我们分2步走。</p><p><strong>第一步，</strong><strong>环境描述。</strong>让GPT用一个表格，把每个细节维度的描述都列出来，让你知其所以然。在后续的使用中，你可以根据这个表格，选择我们整理过的<a href=\"https://time.geekbang.org/column/article/671109\">绘图词典</a>来改变画面。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">环境描述：\n## 环境\n使用表格来描述主题所处环境的细节（2列、中文）： \n维度（材质 Material，色彩 Color，光 Lighting Design，构图 Composition，景别 Shot type，视角 View，风格 Style，画幅比例 Aspect ratio）+细节（每个细节描述&lt;30字） \n\n要点： \n- 灵活运用专业摄影、绘画领域的知识来创造画面； \n- Lighting Design最重要，需要更多的细节； \n- 应用专业的构图手法，构建富有层次的、有张力的、有视觉冲击的画面； \n- 基于/orient和/ar，根据画面的最佳呈现效果来选择合适的一种画幅比例 (宽:高)。 \n</code></pre><p>prompt的要点部分包含一种细化人设的方法，要求GPT调用专业的知识来创造高水准的画面。摄影是光的游戏，绘画同样也可以。现在我们有了一句话就能讲清楚的主题框架，也有了交代各个维度细节的环境描述。</p><p><strong>第二步，</strong><strong>整合出一个完整、明确且有细节的画面描述。</strong></p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">画面描述： \n## 画面描述： \n将主题和环境描述拼合输出，形成明确的，有细节的完整画面。\n</code></pre><p>GPT会进一步填充为这样清晰、具体的画面描述：一只威武的雄鹰翱翔在广阔的蓝天，鸟瞰视角，下面是山谷和郁郁葱葱的森林，柔和的阳光，对角线构图，写实。16:9。</p><p><strong>主题框架+环境描述+画面描述，<strong><strong>这3部分是给人看的</strong></strong>，帮你知其所以然</strong><strong>。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/02/a1/02c47ae20b9c63fbc8544a8130576fa1.png?wh=1920x612\" alt=\"图片\"></p><h3>✦ 降噪</h3><p>接下来的绘图prompt是给绘图AI看的，需要萃取精华，再做一个转译，打磨成一个符合MJ语法规范的高质量绘图prompt。</p><p>降噪是市面上目前所有提词器没有做到的细节。为什么要降噪？高手的秘诀就是没有多余的动作，没用的东西只会影响拔刀的速度。</p><p>我用中文描述词来举个例子（最终会用英文，效果更好）。</p><p>“画一只看起来很可爱的小狗，在温馨的花园里戏水，叫声清脆，令人陶醉，暖光，写实照片的风格。”这个绘图描述里就有大半是噪音，实际上只有“一只可爱的小狗在温馨的花园里戏水，写实。”这部分是有效的。</p><p><strong>我将“降噪”</strong><strong>拆解为3个要点，通过少量样本提示（Few-Shot）教给GPT。</strong></p><ol>\n<li><strong>去除无法形成明确画面的描述</strong>。（Few-Shot CoT）</li>\n</ol><ul>\n<li>无法形成画面的废话：create a, generate a……去掉。</li>\n<li>连接词：as if, feel like, means……去冗余。</li>\n<li>可以压缩的：the style is minimalism, in the style of minimalism等等，留着minimal（极简）就够了。</li>\n</ul><ol start=\"2\">\n<li><strong>近似的描述合并为更简洁的表达</strong>。（Few-Shot）</li>\n</ol><ul>\n<li>sunny day 和 sunny，合并为 sunny day。</li>\n<li>warm color（暖色）和 cozy（舒适），合并为 cozy light（舒适光线）。</li>\n<li>magic 和 magical atmosphere，合并为 magical atmosphere（魔法氛围）。</li>\n</ul><ol start=\"3\">\n<li><strong>描述词汇要符合逻辑，避免冲突</strong>。（Few-Shot）</li>\n</ol><ul>\n<li>photorealistic（写实）和 anime style（二次元）冲突。</li>\n<li>3D 和 watercolor 冲突。</li>\n<li>expansive view（广阔视野）和 close-up（特写）冲突。</li>\n</ul><p>另外分享一个实用技巧，<strong>用成对的符号把描述维度包成</strong> <code>[块状信息]</code> <strong>，形成清晰、好读的结构。不过这里的重点是让自己读起来舒服，而不是某种规范。</strong>在MJ中，除了特定的权重符号 <code>::</code> 和参数前缀 <code>--</code>，是不解析 <code>[]</code>、 <code>()</code> 之类的符号的。</p><p>举几个例子。在环境描述中，用 [a, b, c] 的方式，包裹多个同类的描述。</p><ul>\n<li>色彩描述 <code>[vivid color, warm colors]</code>，意思是生动的暖色。</li>\n<li>打光 <code>[cinematic lighting, rim light, ambient light]</code>，即影视光效、轮廓光、环境光。</li>\n<li>视角 <code>[low angle, close-up]</code>，就是低视角特写。</li>\n</ul><blockquote>\n<p><strong>延伸阅读</strong><br>\n<strong>　</strong><br>\n()、[] 和 {} 等包裹符号，在SD里面还能影响权重，这也侧面说明了结构化的重要性，迁移使用的时候自己变通就好。<br>\n<strong>　</strong><br>\n在SD中使用()英文括号可增加括号中Tag在画面中的权重 x1.1，两个括号产生的效果是权重x1.1^2，也就是x1.21，[] 可减小Tag权重x0.91。在NovelAi官网中，使用 {} 增加权重x1.05。</p>\n</blockquote><h3>✦ 具备可扩展性</h3><p>满足基础需求之后，想要细节控制更加精确，就要扩展指令集。加入风格参考、构图方向和比例的偏好、MJ专用的风格化参数s（数值越高，艺术性越强，取值 [0,1000] ）。最后，加上标配的“帮助”模块。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">## 🔮 指令：\n/style：使用表格输出10种风格参考&lt;序号、英文、中文、描述（描述&lt;30字）&gt;，供用户选择，例如：anime、watercolor、CyberPunk、isometric\n/orient：&lt;横（默认）、竖&gt; #画幅方向 \n/ar：偏好比例，w:h，例如 3:2 \n/s：&lt;无（默认）、750&gt; #风格化参数，高=750 \n/help：输出指令菜单，提供帮助\n</code></pre><p>这里说下 <code>/orient</code> 和 <code>/ar</code> 两个部分。如果你按默认的画幅比例1:1来输出，可用性就会很差，因此在环境描述中我要求GPT智能选择合适的画幅。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">基于/orient和/ar，根据画面的最佳呈现效果来选择合适的一种画幅比例 (宽:高)。 \n</code></pre><p>你可以通过 <code>/ar</code> 指令来精准控制比例，覆盖这个智能比例。比如说极客时间的题图就可以用 <code>/ar 1142:640</code>。</p><blockquote>\n<p><strong>延伸阅读</strong><br>\n<strong>　</strong><br>\n常用的画幅比例（不区分方向）有长画幅 2:1、影视 16:9 、明信片和人物肖像 3:2、常见的头图 4:3、唱片封面1:1……等等。</p>\n</blockquote><p>因为MJ有专用的画幅参数 <code>ar</code>，所以还要要求GPT做一次转译。最后我会在“prompt参考”示例中补充参数的位置和拼接示例。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">将画幅转化为 --ar width:height 的形式。\n</code></pre><p>所有模块都交代清楚之后，再给GPT甩2个完整的示例，从局部到整体，让GPT把写绘图prompt这件事学得明明白白。</p><p>我是基于主题框架、环境描述和降噪示例的要求来设计prompt示例的，<strong>保证完整的示例和前方的局部示例前后一致</strong>，规避让GPT凌乱的冲突描述。</p><pre><code class=\"language-markdown\">## Prompt 参考x2：\n\nA magical glowing crystal blue lake set in front of a forest of pine trees set on a mountain, tiny yellow flowers in the grass around the lake, summer, nighttime, deep colors, [warm light, moonlight, cinematic lighting], progressive composition, expansive view, [35mm , long lens], photorealistic. —ar 16:9&nbsp;\n\nA cute 3D isometric shop, sakura forest in background, [dappled sunlight, limned light], [animal crossing, game art], minimal. --ar 2:3 --s 750\n</code></pre><p>标题隔断中用 <code>x2</code> 告诉GPT这是两个示例，避免它误以为是一个prompt的两部分。额外的好处是不需要在下面标示多余的序号，否则GPT可能就会将它们连带输出。<strong>示例应该求质不求量，通常2</strong><strong>-</strong><strong>3个就足够体现差异化了。</strong></p><p>这2个prompt我用MJ的最新的描述词诊断指令 <code>/shorten</code> 做了全面质检，用这个方式来量化降噪效果，确保GPT得到专业的指点。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/b3/2e69d052cf84f976934b80567cd4eab3.png?wh=1920x1167\" alt=\"图片\" title=\"MJ 的 /shorten 指令\"></p><p><strong>最后记得，简洁是手段，清晰才是目的。</strong>图稿左侧的质检中除了误判的lens，其他的都是有用的，不需要降噪。（long lens =长焦，long =长，但也有可能MJ读懂了35mm焦距 + long的上下文组合。）</p><h2>贴贴大法：提词，打开MJ直接画</h2><p>现在我们整合正式prompt，进入跑机。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/bb/7d63yy6770d76111f48f7a1a0db03fbb.png?wh=1920x1120\" alt=\"图片\" title=\"提词器 prompt\"></p><h3><strong>✦ 任务1：验收范例效果</strong></h3><p>运行prompt，扣1，看默认的“河边树屋”范例会生成什么样的具体画面？</p><center> \n🤖️ ChatGPT\n</center><p><img src=\"https://static001.geekbang.org/resource/image/3f/02/3fe339cf5285d322a20ff8c3096bf102.png?wh=4710x1370\" alt=\"图片\"></p><p>对于生成的绘图prompt，可以先用 <code>/shorten</code> 质检一下，看需要来迭代细节。下图左侧的图片中，emphasizing开始往后的Token得分较低，所以这里我要求去掉权重很低的感受增强类描述。</p><p><img src=\"https://static001.geekbang.org/resource/image/fe/04/fec5cf41bd957aa796000f3b33053304.png?wh=1920x605\" alt=\"图片\"></p><p>由于这个画面属于景观类，可以用MJ的景观模式Scenic来呈现最佳效果。先输入 <code>/settings</code>，有2种方式来设置。</p><ol>\n<li>在Midjourney Bot中选择niji 5模式。</li>\n<li>在niji · journey Bot中选择Scenic Style模式。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/92/c0/9211ddcd1954a222ebc61ac4a5d84cc0.png?wh=1920x757\" alt=\"图片\" title=\"各种模式和参数，使用 /settings 指令设置\"></p><p>假如你使用MJ的二次元模型niji，设置完就可以使用 <code>/imagine</code> 命令来发送prompt，使用默认的Midjourney就要手动加上 <code>--style scenic</code> 后缀，效果一样。</p><center> \n🪄 Scenic Style\n</center><pre><code class=\"language-markdown\">A treehouse by a peaceful river, warm light through the windows, natural wooden texture, deep blue tones contrasting with warm lights, moonlight illuminating the clear river, a dynamic diagonal formed by the river flowing from left to right, slightly low angle view, realism and fantasy --ar 16:9 --style scenic \n</code></pre><center> \n🎨 MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/de/33/def091fbcdee6f59545e094yyb550c33.png?wh=1920x1076\" alt=\"图片\" title=\"河边树屋 x 4\"></p><h3><strong>✦ 任务2：替换提示词</strong></h3><p>搞定一个画面了，那试试换个提示语呢？我将关键提示换成了“林中小鹿”，验收新成果。</p><center> \n🤖️ ChatGPT\n</center><p><img src=\"https://static001.geekbang.org/resource/image/bc/c8/bc07e93c8ed8d2a6926761eaaf96e3c8.png?wh=1920x661\" alt=\"图片\"></p><p>GPT的中文还是不够准确，“慈祥的小鹿”都出来了，不过后面正式prompt翻译的是gentle（温和的），没有问题。</p><center> \n🪄 v 5.2\n</center><pre><code class=\"language-markdown\">A gentle deer grazing in an early spring forest, warm sunlight filtering through fresh green leaves onto its smooth fur, warm tones contrasting with fresh green, deer centered among trees, cartoon style, ambient light creating beautiful shadows. --ar 3:2\n</code></pre><p>看看下面的图片，林中时见鹿，溪午不闻钟。MJ换种方式为你写诗。</p><center> \n🎨 MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/94/82/94ae1c5yy07c46db5bc8b9e9f83bcf82.png?wh=1920x1280\" alt=\"图片\" title=\"林中小鹿 x 4\"></p><p>我们再用Niji模型做个对照，试试卡通风格在二次元模式下效果会被放大多少？闭着眼睛回车就可以了。</p><center> \n🎨 MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/88/d3/8842ba88e706c98b8ea9cf1fb96b32d3.png?wh=1920x853\" alt=\"图片\" title=\"林中小鹿 x 6\"></p><p>如果前3次出图完全符合预期，就可以使用 <code>--repeat</code> 指令来暴力输出了，比如说 <code>--repeat 10</code>，你就可以得到4*10=40张图。配合最新版⚡️Turbo Mode，大概7秒出一组四宫格，换算下来一张图1秒不到。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/df/96e9b945ea7fc17aec0838c5f502a6df.png?wh=1920x466\" alt=\"图片\" title=\"Repeat x ⚡️Turbo Mode\"></p><p>3:2画幅是标准明信片比例，蓝牙接上桌面打印机，几秒钟就能亲手拿到一张美美的装饰卡片。</p><h3>✦ 任务3：指定风格</h3><p>使用 <code>/style</code> 指令让GPT输出10组风格参考，用序号选一个等角视图（isometric），附上新的提示语“春天的咖啡屋”。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/74/23d2c9dc899530ffd7a7d1bbc80c4c74.png?wh=4824x1556\" alt=\"图片\"></p><p>得到的绘图prompt我们使用MJ默认的5.2模型来绘制（–ar 1:1为默认值，可省略）。</p><center> \n🪄 v 5.2\n</center><pre><code class=\"language-markdown\">An isometric view of a coffee shop in a bustling city during a spring morning, wooden and glass exterior, adorned with fresh flowers, warm colors, sunlight streaming in through large windows, coffee aroma filling the air\n</code></pre><center> \n🎨 MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/0a/e0/0a2ebaaf59a3f205928e66705e4dc9e0.png?wh=2048x2048\" alt=\"\" title=\"春天的咖啡屋 x 4\"></p><p>细节挺丰富，假如你认为画面比较复杂，可以在绘图prompt里加入万能的极简提示词<code>minimal</code>，让整体更清爽。</p><center> \n🎨 MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/9b/44/9bef6918c8471d12eaa03859cf022344.png?wh=2048x2048\" alt=\"\" title=\"春天的咖啡屋，极简 x 4\"></p><h3>✦ 挑战：替换描述</h3><p>手上有绘图词典或者喜欢一些特定描述的小伙伴，这个时候就可以在GPT提供的框架上调整细节了。还是“春天的咖啡屋”这个主题，比如说你很喜欢Switch的动森风格，就可以加入animal crossing（动森）和形容词cute来调整画风，画幅比例也可以按需改动。</p><center> \n🎨 v 5.2\n</center><pre><code class=\"language-markdown\">isometric view of a cute coffee shop during a spring morning, wooden and glass exterior, cozy sunlight, animal crossing --ar 3:4 \n</code></pre><center> \n🎨  MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/8f/69/8f65fcc3ca101be99386ebbbbb757469.png?wh=1920x1699\" alt=\"图片\" title=\"春天的咖啡屋，可爱动森 x 6\"></p><p>刚开始替换细节的时候，照着GPT输出的环境维度表格，一换一。例如，isometric替换为anime style、animal crossing替换为Ghibli（吉卜力）。在练习中按这种套路尝试脱离提词器，慢慢地你就能够自己灵活处理结构和书写顺序。</p><center> \n🪄 v 5.2\n</center><pre><code class=\"language-markdown\">Anime style, a cute coffee shop during a spring morning, wooden and glass exterior, cozy sunlight, Ghibli --ar 3:4 \n</code></pre><center> \n🎨  MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/1d/09/1d387015692d0368451860fc86f14409.png?wh=1920x637\" alt=\"图片\" title=\"春天的咖啡屋，吉卜力 x 4\"></p><p>MJ对吉卜力、新海诚（Makoto Shinkai）和皮克斯（Pixar）等等大咖画风的把握是不错的，通过聚类这些描述词再合入我们整理的<a href=\"https://time.geekbang.org/column/article/671109\">绘图词典</a>，提词后的替换细节的可玩性也就大大提升。这么简单的变换方式，也能让你获得掌控画面的愉悦感。</p><h3>✦ 控制：细节参数</h3><p>最后我们来看细节参考控制，这里分享一种指令合并设置的方法，省去繁琐的多次确认。我输入的是长画幅的山谷落霞，并开启高风格化，让MJ生成的结果更具艺术性。“风格化”参数s你可以代入GPT的temperature去理解，数值的高低影响着结果的创造性。</p><center> \n💬 Prompt\n</center><pre><code class=\"language-markdown\">/key 山谷落霞\n/ar 1:2\n/s 750\n</code></pre><center> \n🤖️ ChatGPT\n</center><p><img src=\"https://static001.geekbang.org/resource/image/a5/2f/a556bdac054e75ff17c07ebcc0068b2f.png?wh=1680x618\" alt=\"图片\"></p><center> \n🪄 v 5.2\n</center><pre><code class=\"language-markdown\">A rustic cabin by a clear stream in a valley at sunset, warm yellow light from the cabin, sunset colors reflected in the water, warm color palette. --ar 1:2 --s 750\n</code></pre><center> \n🎨  MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/7b/22/7b1291be4940f75eb2824fe61bfda022.png?wh=1920x956\" alt=\"图片\" title=\"山谷落霞，竖版 x 4\"></p><p>MJ V5.1之后大幅改善了容易出现黑边的问题，超出16:9的长画幅再也不用担心令人头疼的高废片率了，可以敞开去“画”。</p><p>另外，我们的<strong>绘图prompt实际上是主体加后缀参数的结构</strong>，只要改动比例，画面表现都会大不相同。本质上是因为画幅在这里是一种智能取景比例，而不是一种粗暴裁剪。1:2更强调纵深，2:1更突出视野。</p><center> \n🎨  MJ\n</center><p><img src=\"https://static001.geekbang.org/resource/image/e5/15/e5c83f2e1513cacf8cfdbd743102b915.png?wh=3072x1536\" alt=\"\" title=\"山谷落霞，横版 x 4\"></p><h2>应用实例</h2><p>这套提词器的结构化特性可以助你轻松提取实用模版，用于各种制作。比如说，我们可以3步设计自己的T恤。</p><ol>\n<li><strong>从日常输出效果还不错的类型里提取一个模版，改动目标关键词。</strong></li>\n</ol><p>比如我们出了一组卡通表现很稳定的prompt，把题材替换成T-shirt，主题变成主角的描述就可以了。</p><center>\n🪄 绘图prompt 模版\n</center><pre><code class=\"language-markdown\">Chibi [主题], cute, sweetcore, comic vector illustration style, t-shirt, minimal, art --s 750\n#翻译：Q版 [主题]，可爱，超甜，卡通矢量插画，T恤，极简，艺术\n#不难看出，构建模版就是 [块状信息] 的另一个作用。\n</code></pre><p>抓一只皮卡丘试试。</p><center> \n🪄 绘图prompt：爱的闪电转圈圈（in a swirling bolt circle）\n</center><pre><code class=\"language-markdown\">Chibi [pikachu in a swirling bolt circle], cute, sweetcore, comic vector illustration style, t-shirt, minimal, art --niji 5 --style expressive --s 750\n</code></pre><ol start=\"2\">\n<li>出图。有了批量参数，即使你想百里挑一也轻而易举。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/a6/b5/a684a9252529d6020bf137de4f0a53b5.png?wh=1920x850\" alt=\"图片\"></p><ol start=\"3\">\n<li>一键<a href=\"https://vectorizer.ai/\">转矢量</a>，然后将SVG文件交给商家，等着收衣服。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/e8/19/e8f1d6d1ae10e546e2197778310b3d19.png?wh=1920x866\" alt=\"图片\"></p><p>自助画图，不再求人。</p><h2>小黑板</h2><p>我在<a href=\"https://time.geekbang.org/column/article/663631\">突破局限</a>这节课就讲过将GPT用作超级大中枢，通过联动来放大它的优势，最终达到1+1&gt;2的效果。这节课，我们的目标是打造一个人人能用的GPT提词器，用GPT生成的绘图prompt来轻松创作图片素材。</p><p>GPT提词器主要解决了这4个问题。</p><ol>\n<li>用一个短提示语就能创作，边用边学。</li>\n<li>获得专业、完整的结构参考。中文的构成和连贯的描述部分让人看懂，清晰、明确的绘图prompt交给MJ。</li>\n<li>萃取绘图prompt精华，更精准，更好替换。</li>\n<li>可以指定风格、题材、画幅比例等细节，让你对画面有更好的把控。</li>\n</ol><p>实现的方法是通过多维击破来教给GPT。这个过程中，除了<strong>需要综合运用已掌握的prompt技巧，还需要靠自身的专业理解来完成系统化的拆解和示例。</strong>比如前面的3段结构，也就是主题框架、环境细节和中文描述，交待绘图prompt的来龙去脉，最后基于对MJ的理解，再进行降噪和转移，形成一套系统、可用的输出。<strong>这就是AI还无法取代的能力，人类还没有那么不堪嘛。</strong></p><p>通过跑机验收，我们掌握了几个新技巧。</p><ul>\n<li>安排一个范例主题，让GPT根据范例才生成第一套参考。</li>\n<li>用提示词优化指令 <code>/shorten</code> 来做prompt质检。</li>\n<li>初始质量验收满意，就可以使用批量生成参数来加速创作。</li>\n<li>多指令合并设置，省去繁琐的多次确认。</li>\n<li>小参数，大影响，改动参数也能控制画面表现。</li>\n</ul><p><strong>要点：</strong></p><h2><img src=\"https://static001.geekbang.org/resource/image/01/b0/01f2cdeyyf53480204057e15464cbeb0.png?wh=1920x807\" alt=\"图片\"></h2><h2>踏浪扬帆</h2><p>尽情去画吧，祝你玩得开心。</p><p>期待在评论区看到你的思考或感受分享，也欢迎你将这节课分享给感兴趣的朋友们，戳此加入<a href=\"http://jinshuju.net/f/oI1KKM\">课程交流群</a>，我们“毕业典礼”再叙。</p><h2>附｜GPT 提词器</h2><ul>\n<li>最佳效果：GPT-4</li>\n<li>稳定性较差：ChatGPT</li>\n<li>插件：不需要</li>\n<li>字数：903</li>\n<li>声明：本人设仅供个人学习体验，未经许可不得商用。</li>\n</ul><pre><code class=\"language-markdown\">你是一位专业 AI 画师，请根据以下说明来开启创作任务。\n\n## 🔮 指令菜单：\n/key：&lt;河边树屋（默认范例）&gt; #用于生成创作主题的提示语\n/style：使用表格输出10种风格参考&lt;序号、英文、中文、描述（描述&lt;30字）&gt;，供用户选择，例如：anime、watercolor、CyberPunk、isometric\n/orient：&lt;横（默认）、竖&gt; #画幅方向\n/ar：偏好比例，w:h，例如 3:2\n/s：&lt;无（默认）、750&gt; #风格化参数，高=750\n/help：输出指令菜单，提供帮助\n&nbsp;\n一、主题框架：\n## 主题：\n**根据/key，用一句话描述清晰、具体的画面框架（中文）**\n说明：\n- 主题框架： Who/Sth., Where, What(do), When, How\n- Who/Sth. 为必不可少的核心，加上 Where、What、When、How 中任意 1 到4 个，组成简洁、连贯的句子\n\n二、环境描述：\n## 环境：\n使用表格来描述主题所处环境的细节（2列、中文）：\n维度（材质 Material，色彩 Color，光 Lighting Design，构图 Composition，景别 Shot type，视角 View，风格 Style，画幅比例 Aspect ratio）+细节（每个细节描述&lt;30字）\n\n要点：\n- 灵活运用专业摄影、绘画领域的知识来创造画面；\n- Lighting Design最重要，需要更多的细节；\n- 应用专业的构图手法，构建富有层次的、有张力的、有视觉冲击的画面；\n- 基于/orient和/ar，根据画面的最佳呈现效果来选择合适的一种画幅比例 (宽:高)。\n\n三、画面描述：\n## 画面描述：\n将主题和环境描述拼合输出，形成明确的，有细节的完整画面。\n\n四、提炼：\n## 🪄 PROMPT：\n*保留画面的细节，提炼并翻译为英文 prompt，斜体，用, 做分隔符，不使用.*\n\n提炼要求x5：\n1、无法形成明确画面的描述或连接词，请去除，例如：\n- create a, generate a… #无法形成画面，去除\n- features, as if, feel like, means… #连接词，去除\n- The style is… #可以压缩的表达，去除\n\n2、近似的描述合并，例如：　　　　　　\n- sunny day，sunny = sunny day\n- warm color，cozy = cozy light\n- magic，magical atmosphere = magical atmosphere\n\n3、描述要符合逻辑，避免冲突，例如：\n- photorealistic 和 anime style 冲突\n- 3D 和 watercolor 冲突\n- expansive view 和 close up 冲突\n\n4、环境模块中，用 [a, b, c] 的方式，包裹多个同类的描述，例如：\n- 色彩：[vivid color, warm colors]\n- 光：[cinematic lighting, rim light, ambient light]\n- 视角：[close-up, low angle]\n\n5、将画幅转化为 --ar width:height 的形式。\n\n## Prompt 参考x2：\nA magical glowing crystal blue lake in front of a forest of pine trees set on a mountain, tiny yellow flowers in the grass around the lake, summer, nighttime, deep colors, [warm light, moonlight, cinematic lighting], progressive composition, expansive view, [35mm , long lens], photorealistic. —ar 16:9\n\nA 3D isometric shop in sakura forest, [dappled sunlight, warm light], animal crossing, minimal. --ar 2:3 --s 750\n\n输出项：主题框架+环境描述+画面描述+提炼\n\n请一步一步思考，开始创作前，用表格输出指令菜单，先和用户确认，例如：/s 750。\n用户回复“1”保持默认。\n</code></pre>","comments":[{"had_liked":false,"id":377447,"user_name":"Geek_3715","can_delete":false,"product_type":"c1","uid":1897726,"ip_address":"北京","ucode":"F72E32F8E70F83","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/fe/ea593199.jpg","comment_is_top":false,"comment_ctime":1688521602,"is_pvip":false,"replies":[{"id":137556,"content":"感谢耐心阅读，也很高兴能给到帮助。\n\nBTW，prompt确实是很舒服的自然语言编程，没有那么多条条框框。\n","user_name":"作者回复","user_name_real":"编辑","uid":3588216,"ctime":1688573518,"ip_address":"广东","comment_id":377447,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"主要课程学完了，老师的课程让我对chatGPT有不少新的理解。\n举一个例子，处理事情的能力从一维到二维了，我原来以为利用GPT的工作方式是，让它帮我做一件单一的事，包括（总结，作诗，写计划），我再进行加工组合。现在通过精心设计的prompt，可以一步到位实现复杂的业务逻辑，直接拿成果，简直就是“面向GPT编程”。\n而且，也有很多详实的例子，感谢！","like_count":3,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622712,"discussion_content":"感谢耐心阅读，也很高兴能给到帮助。\n\nBTW，prompt确实是很舒服的自然语言编程，没有那么多条条框框。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688573518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e1/be/e7c7bb94.jpg","nickname":"福禄妹妹","note":"","ucode":"8E235B85E2BE50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654624,"discussion_content":"“面向GPT编程”。感觉好精准呀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733132295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389207,"user_name":"0.0","can_delete":false,"product_type":"c1","uid":2246077,"ip_address":"广东","ucode":"9080F7DD748B29","user_header":"https://static001.geekbang.org/account/avatar/00/22/45/bd/df16cf9d.jpg","comment_is_top":false,"comment_ctime":1711857076,"is_pvip":false,"replies":[{"id":141656,"content":"展开说说","user_name":"作者回复","user_name_real":"编辑","uid":3588216,"ctime":1712424164,"ip_address":"广东","comment_id":389207,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"Child in a wooden boat collecting white lotus flowers in a pond, summer evening, [white lotus, green lotus leaves, orange-red sunset], soft reflection lighting, three-part composition, close-up, eye-level view, Chinese ink painting style, --ar 4:3\n\n秀","like_count":0,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641269,"discussion_content":"展开说说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712424164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377535,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1688654424,"is_pvip":false,"replies":[{"id":137560,"content":"基础篇的markdown","user_name":"作者回复","user_name_real":"编辑","uid":3588216,"ctime":1688666286,"ip_address":"广东","comment_id":377535,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"一些标记是OpenAI或MJ的规则吗？\n文中用到很多特殊标志，比如： ##, &#47;等。 这些符号会被OpenAI或MJ当做特殊标记吗？ 如果是的话，感觉像编程了，类似于C语言等的语法规则了。","like_count":0,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622801,"discussion_content":"基础篇的markdown","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688666286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378366,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"广东","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1690158155,"is_pvip":true,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"老师可以补充 json 这种结构化提示词的方法吗?","like_count":0,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624116,"discussion_content":"个人很不推荐JSON提示词输入，很多时候是丢一份JSON数据让代码解析器直接处理。因为JSON的{嵌套结构}非常占地方，更麻烦的是你的Token会翻个1.5倍左右。\n\n单纯追求结构化的话，善用换行和符号隔断就是最轻量的做法。\n\n输出方面，JSON就很有用，可以补充要求“用JSON输出”，再拿去做包括格式转换、数据清洗的二次处理，得到目标结果。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1690220156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}