{"id":109331,"title":"38 | 高速缓存（下）：你确定你的数据更新了么？","content":"<p>在我工作的十几年里，写了很多Java的程序。同时，我也面试过大量的Java工程师。对于一些表示自己深入了解和擅长多线程的同学，我经常会问这样一个面试题：“<strong>volatile这个关键字有什么作用？</strong>”如果你或者你的朋友写过Java程序，不妨来一起试着回答一下这个问题。</p><p>就我面试过的工程师而言，即使是工作了多年的Java工程师，也很少有人能准确说出volatile这个关键字的含义。这里面最常见的理解错误有两个，一个是把volatile当成一种锁机制，认为给变量加上了volatile，就好像是给函数加了sychronized关键字一样，不同的线程对于特定变量的访问会去加锁；另一个是把volatile当成一种原子化的操作机制，认为加了volatile之后，对于一个变量的自增的操作就会变成原子性的了。</p><pre><code>// 一种错误的理解，是把volatile关键词，当成是一个锁，可以把long/double这样的数的操作自动加锁\nprivate volatile long synchronizedValue = 0;\n\n// 另一种错误的理解，是把volatile关键词，当成可以让整数自增的操作也变成原子性的\nprivate volatile int atomicInt = 0;\namoticInt++;\n</code></pre><p>事实上，这两种理解都是完全错误的。很多工程师容易把volatile关键字，当成和锁或者数据数据原子性相关的知识点。而实际上，volatile关键字的最核心知识点，要关系到Java内存模型（JMM，Java Memory Model）上。</p><p>虽然JMM只是Java虚拟机这个进程级虚拟机里的一个内存模型，但是这个内存模型，和计算机组成里的CPU、高速缓存和主内存组合在一起的硬件体系非常相似。理解了JMM，可以让你很容易理解计算机组成里CPU、高速缓存和主内存之间的关系。</p><!-- [[[read_end]]] --><h2>“隐身”的变量</h2><p>我们先来一起看一段Java程序。这是一段经典的volatile代码，来自知名的Java开发者网站<a href=\"https://dzone.com/articles/java-volatile-keyword-0\">dzone.com</a>，后续我们会修改这段代码来进行各种小实验。</p><pre><code>public class VolatileTest {\n    private static volatile int COUNTER = 0;\n\n    public static void main(String[] args) {\n        new ChangeListener().start();\n        new ChangeMaker().start();\n    }\n\n    static class ChangeListener extends Thread {\n        @Override\n        public void run() {\n            int threadValue = COUNTER;\n            while ( threadValue &lt; 5){\n                if( threadValue!= COUNTER){\n                    System.out.println(&quot;Got Change for COUNTER : &quot; + COUNTER + &quot;&quot;);\n                    threadValue= COUNTER;\n                }\n            }\n        }\n    }\n\n    static class ChangeMaker extends Thread{\n        @Override\n        public void run() {\n            int threadValue = COUNTER;\n            while (COUNTER &lt;5){\n                System.out.println(&quot;Incrementing COUNTER to : &quot; + (threadValue+1) + &quot;&quot;);\n                COUNTER = ++threadValue;\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) { e.printStackTrace(); }\n            }\n        }\n    }\n}\n</code></pre><p>我们先来看看这个程序做了什么。在这个程序里，我们先定义了一个volatile的int类型的变量，COUNTER。</p><p>然后，我们分别启动了两个单独的线程，一个线程我们叫ChangeListener。另一个线程，我们叫ChangeMaker。</p><p>ChangeListener这个线程运行的任务很简单。它先取到COUNTER当前的值，然后一直监听着这个COUNTER的值。一旦COUNTER的值发生了变化，就把新的值通过println打印出来。直到COUNTER的值达到5为止。这个监听的过程，通过一个永不停歇的while循环的忙等待来实现。</p><p>ChangeMaker这个线程运行的任务同样很简单。它同样是取到COUNTER的值，在COUNTER小于5的时候，每隔500毫秒，就让COUNTER自增1。在自增之前，通过println方法把自增后的值打印出来。</p><p>最后，在main函数里，我们分别启动这两个线程，来看一看这个程序的执行情况。程序的输出结果并不让人意外。ChangeMaker函数会一次一次将COUNTER从0增加到5。因为这个自增是每500毫秒一次，而ChangeListener去监听COUNTER是忙等待的，所以每一次自增都会被ChangeListener监听到，然后对应的结果就会被打印出来。</p><pre><code>Incrementing COUNTER to : 1\nGot Change for COUNTER : 1\nIncrementing COUNTER to : 2\nGot Change for COUNTER : 2\nIncrementing COUNTER to : 3\nGot Change for COUNTER : 3\nIncrementing COUNTER to : 4\nGot Change for COUNTER : 4\nIncrementing COUNTER to : 5\nGot Change for COUNTER : 5\n</code></pre><p>这个时候，我们就可以来做一个很有意思的实验。如果我们把上面的程序小小地修改一行代码，把我们定义COUNTER这个变量的时候，设置的volatile关键字给去掉，会发生什么事情呢？你可以自己先试一试，看结果是否会让你大吃一惊。</p><pre><code>private static int COUNTER = 0;\n</code></pre><p>没错，你会发现，我们的ChangeMaker还是能正常工作的，每隔500ms仍然能够对COUNTER自增1。但是，奇怪的事情在ChangeListener上发生了，我们的ChangeListener不再工作了。在ChangeListener眼里，它似乎一直觉得COUNTER的值还是一开始的0。似乎COUNTER的变化，对于我们的ChangeListener彻底“隐身”了。</p><pre><code>Incrementing COUNTER to : 1\nIncrementing COUNTER to : 2\nIncrementing COUNTER to : 3\nIncrementing COUNTER to : 4\nIncrementing COUNTER to : 5\n</code></pre><p>这个有意思的小程序还没有结束，我们可以再对程序做一些小小的修改。我们不再让ChangeListener进行完全的忙等待，而是在while循环里面，小小地等待上5毫秒，看看会发生什么情况。</p><pre><code>static class ChangeListener extends Thread {\n    @Override\n    public void run() {\n        int threadValue = COUNTER;\n        while ( threadValue &lt; 5){\n            if( threadValue!= COUNTER){\n                System.out.println(&quot;Sleep 5ms, Got Change for COUNTER : &quot; + COUNTER + &quot;&quot;);\n                threadValue= COUNTER;\n            }\n            try {\n                Thread.sleep(5);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n    }\n}\n</code></pre><p>好了，不知道你有没有自己动手试一试呢？又一个令人惊奇的现象要发生了。虽然我们的COUNTER变量，仍然没有设置volatile这个关键字，但是我们的ChangeListener似乎“睡醒了”。在通过Thread.sleep(5)在每个循环里“睡上“5毫秒之后，ChangeListener又能够正常取到COUNTER的值了。</p><pre><code>Incrementing COUNTER to : 1\nSleep 5ms, Got Change for COUNTER : 1\nIncrementing COUNTER to : 2\nSleep 5ms, Got Change for COUNTER : 2\nIncrementing COUNTER to : 3\nSleep 5ms, Got Change for COUNTER : 3\nIncrementing COUNTER to : 4\nSleep 5ms, Got Change for COUNTER : 4\nIncrementing COUNTER to : 5\nSleep 5ms, Got Change for COUNTER : 5\n</code></pre><p>这些有意思的现象，其实来自于我们的Java内存模型以及关键字volatile的含义。<strong>那volatile关键字究竟代表什么含义呢？它会确保我们对于这个变量的读取和写入，都一定会同步到主内存里，而不是从Cache里面读取。</strong>该怎么理解这个解释呢？我们通过刚才的例子来进行分析。</p><p>刚刚第一个使用了volatile关键字的例子里，因为所有数据的读和写都来自主内存。那么自然地，我们的ChangeMaker和ChangeListener之间，看到的COUNTER值就是一样的。</p><p>到了第二段进行小小修改的时候，我们去掉了volatile关键字。这个时候，ChangeListener又是一个忙等待的循环，它尝试不停地获取COUNTER的值，这样就会从当前线程的“Cache”里面获取。于是，这个线程就没有时间从主内存里面同步更新后的COUNTER值。这样，它就一直卡死在COUNTER=0的死循环上了。</p><p>而到了我们再次修改的第三段代码里面，虽然还是没有使用volatile关键字，但是短短5ms的Thead.Sleep给了这个线程喘息之机。既然这个线程没有这么忙了，它也就有机会把最新的数据从主内存同步到自己的高速缓存里面了。于是，ChangeListener在下一次查看COUNTER值的时候，就能看到ChangeMaker造成的变化了。</p><p>虽然Java内存模型是一个隔离了硬件实现的虚拟机内的抽象模型，但是它给了我们一个很好的“缓存同步”问题的示例。也就是说，如果我们的数据，在不同的线程或者CPU核里面去更新，因为不同的线程或CPU核有着自己各自的缓存，很有可能在A线程的更新，到B线程里面是看不见的。</p><h2>CPU高速缓存的写入</h2><p>事实上，我们可以把Java内存模型和计算机组成里的CPU结构对照起来看。</p><p>我们现在用的Intel CPU，通常都是多核的的。每一个CPU核里面，都有独立属于自己的L1、L2的Cache，然后再有多个CPU核共用的L3的Cache、主内存。</p><p>因为CPU Cache的访问速度要比主内存快很多，而在CPU Cache里面，L1/L2的Cache也要比L3的Cache快。所以，上一讲我们可以看到，CPU始终都是尽可能地从CPU Cache中去获取数据，而不是每一次都要从主内存里面去读取数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/07/41/0723f72f3016fede96b545e2898c0541.jpeg?wh=1546*1126\" alt=\"\"></p><p>这个层级结构，就好像我们在Java内存模型里面，每一个线程都有属于自己的线程栈。线程在读取COUNTER的数据的时候，其实是从本地的线程栈的Cache副本里面读取数据，而不是从主内存里面读取数据。如果我们对于数据仅仅只是读，问题还不大。我们在上一讲里，已经看到Cache Line的组成，以及如何从内存里面把对应的数据加载到Cache里。</p><p>但是，对于数据，我们不光要读，还要去写入修改。这个时候，有两个问题来了。</p><p><strong>第一个问题是，写入Cache的性能也比写入主内存要快，那我们写入的数据，到底应该写到Cache里还是主内存呢？如果我们直接写入到主内存里，Cache里的数据是否会失效呢？</strong>为了解决这些疑问，下面我要给你介绍两种写入策略。</p><h3>写直达（Write-Through）</h3><p><img src=\"https://static001.geekbang.org/resource/image/8b/d3/8b9ad674953bf36680e815247de235d3.jpeg?wh=1006*1996\" alt=\"\"></p><p>最简单的一种写入策略，叫作写直达（Write-Through）。在这个策略里，每一次数据都要写入到主内存里面。在写直达的策略里面，写入前，我们会先去判断数据是否已经在Cache里面了。如果数据已经在Cache里面了，我们先把数据写入更新到Cache里面，再写入到主内存里面；如果数据不在Cache里，我们就只更新主内存。</p><p>写直达的这个策略很直观，但是问题也很明显，那就是这个策略很慢。无论数据是不是在Cache里面，我们都需要把数据写到主内存里面。这个方式就有点儿像我们上面用volatile关键字，始终都要把数据同步到主内存里面。</p><h3>写回（Write-Back）</h3><p><img src=\"https://static001.geekbang.org/resource/image/67/0d/67053624d6aa2a5c27c295e1fda4890d.jpeg?wh=1540*2986\" alt=\"\"></p><p>这个时候，我们就想了，既然我们去读数据也是默认从Cache里面加载，能否不用把所有的写入都同步到主内存里呢？只写入CPU Cache里面是不是可以？</p><p>当然是可以的。在CPU Cache的写入策略里，还有一种策略就叫作写回（Write-Back）。这个策略里，我们不再是每次都把数据写入到主内存，而是只写到CPU Cache里。只有当CPU Cache里面的数据要被“替换”的时候，我们才把数据写入到主内存里面去。</p><p>写回策略的过程是这样的：如果发现我们要写入的数据，就在CPU Cache里面，那么我们就只是更新CPU Cache里面的数据。同时，我们会标记CPU Cache里的这个Block是脏（Dirty）的。所谓脏的，就是指这个时候，我们的CPU Cache里面的这个Block的数据，和主内存是不一致的。</p><p>如果我们发现，我们要写入的数据所对应的Cache Block里，放的是别的内存地址的数据，那么我们就要看一看，那个Cache Block里面的数据有没有被标记成脏的。如果是脏的话，我们要先把这个Cache Block里面的数据，写入到主内存里面。然后，再把当前要写入的数据，写入到Cache里，同时把Cache Block标记成脏的。如果Block里面的数据没有被标记成脏的，那么我们直接把数据写入到Cache里面，然后再把Cache Block标记成脏的就好了。</p><p>在用了写回这个策略之后，我们在加载内存数据到Cache里面的时候，也要多出一步同步脏Cache的动作。如果加载内存里面的数据到Cache的时候，发现Cache Block里面有脏标记，我们也要先把Cache Block里的数据写回到主内存，才能加载数据覆盖掉Cache。</p><p>可以看到，在写回这个策略里，如果我们大量的操作，都能够命中缓存。那么大部分时间里，我们都不需要读写主内存，自然性能会比写直达的效果好很多。</p><p>然而，无论是写回还是写直达，其实都还没有解决我们在上面volatile程序示例中遇到的问题，也就是<strong>多个线程，或者是多个CPU核的缓存一致性的问题。这也就是我们在写入修改缓存后，需要解决的第二个问题。</strong></p><p>要解决这个问题，我们需要引入一个新的方法，叫作MESI协议。这是一个维护缓存一致性协议。这个协议不仅可以用在CPU Cache之间，也可以广泛用于各种需要使用缓存，同时缓存之间需要同步的场景下。今天的内容差不多了，我们放在下一讲，仔细讲解缓存一致性问题。</p><h2>总结延伸</h2><p>最后，我们一起来回顾一下这一讲的知识点。通过一个使用Java程序中使用volatile关键字程序，我们可以看到，在有缓存的情况下会遇到一致性问题。volatile这个关键字可以保障我们对于数据的读写都会到达主内存。</p><p>进一步地，我们可以看到，Java内存模型和CPU、CPU Cache以及主内存的组织结构非常相似。在CPU Cache里，对于数据的写入，我们也有写直达和写回这两种解决方案。写直达把所有的数据都直接写入到主内存里面，简单直观，但是性能就会受限于内存的访问速度。而写回则通常只更新缓存，只有在需要把缓存里面的脏数据交换出去的时候，才把数据同步到主内存里。在缓存经常会命中的情况下，性能更好。</p><p>但是，除了采用读写都直接访问主内存的办法之外，如何解决缓存一致性的问题，我们还是没有解答。这个问题的解决方案，我们放到下一讲来详细解说。</p><h2>推荐阅读</h2><p>如果你是一个Java程序员，我推荐你去读一读 <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp03304/index.html\">Fixing Java Memory Model</a> 这篇文章。读完这些内容，相信你会对Java里的内存模型和多线程原理有更深入的了解，并且也能更好地和我们计算机底层的硬件架构联系起来。</p><p>对于计算机组成的CPU高速缓存的写操作处理，你也可以读一读《计算机组成与设计：硬件/软件接口》的5.3.3小节。</p><h2>课后思考</h2><p>最后，给你留一道思考题。既然volatile关键字，会让所有的数据写入都要到主内存。你可以试着写一个小的程序，看看使用volatile关键字和不使用volatile关键字，在数据写入的性能上会不会有差异，以及这个差异到底会有多大。</p><p>欢迎把你写的程序分享到留言区。如果有困难，你也可以把这个问题分享给你朋友，拉上他一起讨论完成，并在留言区写下你们讨论后的结果。</p><p></p>","neighbors":{"left":{"article_title":"37 | 高速缓存（上）：“4毫秒”究竟值多少钱？","id":107477},"right":{"article_title":"39 | MESI协议：如何让多核CPU的高速缓存保持一致？","id":109874}},"comments":[{"had_liked":false,"id":116195,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1563800798,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"568499483870","product_id":100026001,"comment_content":"volatile关键字在用C语言编写嵌入式软件里面用得很多，不使用volatile关键字的代码比使用volatile关键字的代码效率要高一些，但就无法保证数据的一致性。volatile的本意是告诉编译器，此变量的值是易变的，每次读写该变量的值时务必从该变量的内存地址中读取或写入，不能为了效率使用对一个“临时”变量的读写来代替对该变量的直接读写。编译器看到了volatile关键字，就一定会生成内存访问指令，每次读写该变量就一定会执行内存访问指令直接读写该变量。若是没有volatile关键字，编译器为了效率，只会在循环开始前使用读内存指令将该变量读到寄存器中，之后在循环内都是用寄存器访问指令来操作这个“临时”变量，在循环结束后再使用内存写指令将这个寄存器中的“临时”变量写回内存。在这个过程中，如果内存中的这个变量被别的因素（其他线程、中断函数、信号处理函数、DMA控制器、其他硬件设备）所改变了，就产生数据不一致的问题。另外，寄存器访问指令的速度要比内存访问指令的速度快，这里说的内存也包括缓存，也就是说内存访问指令实际上也有可能访问的是缓存里的数据，但即便如此，还是不如访问寄存器快的。缓存对于编译器也是透明的，编译器使用内存读写指令时只会认为是在读写内存，内存和缓存间的数据同步由CPU保证。","like_count":133,"discussions":[{"author":{"id":1510495,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","nickname":"hello","note":"","ucode":"C6FC61A90F202B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375381,"discussion_content":"L123缓存和寄存器不一样，寄存器是程序可以操作的，L123是对程序透明的，程序是访问不到的。所以编译器是如何通过关键字volatile来控制用不用L123缓存的呢？\n答案是内存屏障指令，在访问这个变量前后插入内存屏障指令，迫使cpu不使用L123缓存。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1621598435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374150,"discussion_content":"记住，这里说的是C/C++中的volatile，和java中的volatile是有区别的\n\n对于 C#/Java ，`volatile`告诉编译器永远不要缓存变量的值，因为变量的值可能会超出程序本身的范围。然后，如果变量“在其控制范围之外”更改，编译器将避免可能导致问题的任何优化。\n\n在** C/C++ ** 中，开发嵌入式系统或设备驱动程序(需要读取或写入内存映射的硬件设备)时需要`volatile`。特定设备寄存器的内容可以随时更改，因此您需要使用`volatile`关键字来确保编译器不会对此类访问进行优化。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1621043129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78931,"discussion_content":"理解volatile 关键两点，1、软件只能控制cpu 寄存器值的是否更新 2、寄存器的值来源（缓存，内存）和去处（缓存，内存）由硬件控制，并且由硬件需要保证缓存一致性。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1576033852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243906,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fb/02/1b74615c.jpg","nickname":"树军","note":"","ucode":"7BC6F00B94FB2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296943,"discussion_content":"你说的非常好，我觉得老师讲的是错的，volatile不是空隙Cache的，而且告诉编译器不能优化这个变量。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596709692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389477,"discussion_content":"哦看到 缓存和内存的数据同步已经由cpu保证了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629288808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389476,"discussion_content":"内存也包括缓存？。。。   那么volatile关键字的内存访问指令也是会访问缓存？？？那volatile是如何保证值最新的呢？ 你说的内存访问指令包括的缓存是否单指的cpu共享的l3缓存？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629288728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163970,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1576836232,"is_pvip":false,"replies":[{"id":"68662","content":"Knight²º¹⁸同学，<br><br>你好，你说的有道理，我去修改一下。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581238397,"ip_address":"","comment_id":163970,"utype":1}],"discussion_count":7,"race_medal":0,"score":"319404416136","product_id":100026001,"comment_content":"Java sleep 解释有问题，sleep 并不是说线程有时间去主内存中读取变量，而是 sleep 的线程会让出cpu，线程被唤醒后才会去重新加载变量。","like_count":75,"discussions":[{"author":{"id":1089754,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","nickname":"Knight²º¹⁸","note":"","ucode":"BDCB830B6A730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164931,"discussion_content":"我并不是科班出身，老师这门课程让我受益匪浅，因为Java接触的比较多，恰好了解这个点。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581240238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1512642,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","nickname":"侧耳倾听","note":"","ucode":"5BF2A2440B54F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1089754,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","nickname":"Knight²º¹⁸","note":"","ucode":"BDCB830B6A730F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263900,"discussion_content":"我觉得作者表达的也没有错，从MESI协议的角度看待这个问题，首先两个CPU初始cache line都是S，当A修改cache中的值前，会将B中的cache修改为I，然后A中的状态修改为M，假设此时B重新从内存加载数据，那么A就应该将cache中的数据同步到主存，B应该读出来的值是最新的。但是实际是B进入了死循环状态，也就是说B并没有从主存重新加载数据，所以作者的说法也就说的通了，此时B的利用率应该是100%，CPU确实没有余力去处理总线发送过来的将cache line修改为无效的信号，B的状态应该一直都是S","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589263667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164931,"ip_address":""},"score":263900,"extra":""},{"author":{"id":2026074,"avatar":"","nickname":"尼古拉斯","note":"","ucode":"82EE35B505C09A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1089754,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","nickname":"Knight²º¹⁸","note":"","ucode":"BDCB830B6A730F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319835,"discussion_content":"    static class ChangeListener extends Thread {\n        @Override\n        public void run() {\n            Integer i = Integer.MAX_VALUE;\n            int threadValue = COUNTER;\n            while (threadValue < 5){\n                if(threadValue!= COUNTER){\n                    System.out.println(&#34;Got Change for COUNTER : &#34; + COUNTER + &#34;&#34;);\n                    threadValue= COUNTER;\n                }else{\n                   i--;\n                }\n            }\n        }\n    }\n\n这个怎么解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604133617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164931,"ip_address":""},"score":319835,"extra":""}]},{"author":{"id":1304195,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtlEYuHnR8VdRkNPcmkIqTM9DKahpcpicDdBvcmBWMIAAhBrd0QNWvl09slqrzB5TibryVcIfPmb7Q/132","nickname":"raisecomer","note":"","ucode":"32EA488E46471F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106279,"discussion_content":"不过，在第二段代码中，listener线程的时间片运行完了，会被让出CPU，等它有机会重新获得CPU时，也有可能重新加载counter变量，这样的话，第二段代码也能正确获得counter修改后的值，不太明白第二和第三段代码的为何不一致。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577527426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478599,"discussion_content":"Knight²º¹⁸同学，\n\n你好，你说的有道理，我去修改一下。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581238397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2676330,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d6/6a/1d844a27.jpg","nickname":"冲冲冲","note":"","ucode":"4DA7596B5AFD51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580016,"discussion_content":"不对吧，官方文档说了sleep之后不会缓存的\n In particular, the compiler does not have to flush writes cached in registers out to shared memory before a call to Thread.sleep or Thread.yield, nor does the compiler have to reload values cached in registers after a call to Thread.sleep or Thread.yield.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657807366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1390669,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLAK6F4BFT5ewhJEeZrjmRx5HxP8tvnNpJcpLlotHiadp0s6aL3d7LfMHEuQP6tibu80wUy8micVu4oQ/132","nickname":"InfoQ_e077cb303519","note":"","ucode":"2CCA309DB2EF46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2676330,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d6/6a/1d844a27.jpg","nickname":"冲冲冲","note":"","ucode":"4DA7596B5AFD51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580604,"discussion_content":"哥们文档是哪里的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658286598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580016,"ip_address":""},"score":580604,"extra":""}]}]},{"had_liked":false,"id":116097,"user_name":"林三杠","can_delete":false,"product_type":"c1","uid":1012832,"ip_address":"","ucode":"E667F986D07DC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/60/0403b575.jpg","comment_is_top":false,"comment_ctime":1563785494,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"78873196822","product_id":100026001,"comment_content":"反复看了几次写回策略，才看明白。主要是“如果我们发现，我们要写入的数据所对应的 Cache Block 里，放的是别的内存地址的数据”这句。同一个cache地址可能被多个进程使用，使用前需要确认是否是自己的数据，是的话，直接写，不是自己的而且被标记为脏数据，需要同步回主内存。老师，我理解的对吧？","like_count":19,"discussions":[{"author":{"id":1147711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/83/3f/bc2ea80d.jpg","nickname":"陌.寒哲","note":"","ucode":"B7079FF211D712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94860,"discussion_content":"别的内存地址的数据，并不是指别的进程，缓存是内存地址取模得到的，就同一个进程甚至同一个线程，都有可能遇到别的内存地址的数据啊，看过上一篇应该就很清楚","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576995801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1147711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/83/3f/bc2ea80d.jpg","nickname":"陌.寒哲","note":"","ucode":"B7079FF211D712","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389475,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629288412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":94860,"ip_address":""},"score":389475,"extra":""}]},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138495,"discussion_content":"是自己的，直接覆盖，并标记为脏；不是自己的并且是脏标记，丢到主内存去，把自己的覆盖进来，标记为脏。如果不是自己但是没有脏标记文中没说，我觉得应该直接覆盖，并标记为脏。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579248226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270775,"discussion_content":"如果不是自己但是没有脏标记->应该把内存中的数据读取到cache block吧，然后再写入数据到cache block吧，上面的流程图里写了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590052267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":138495,"ip_address":""},"score":270775,"extra":""},{"author":{"id":1367877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VqgchrJWswwSLmxf1ict6icDDlZG5wChBEiaiblnJAQEdu1nYtB4EZq07mibUurOSDFr16dho6DhGyOpIW4eib57lK8Q/132","nickname":"箭指流云","note":"","ucode":"21571A7D60B10D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352774,"discussion_content":"如果不是自己的没有标记脏，说明缓存中的数据和内存中的数据是一致的。将需要写入的数据直接在缓存中覆盖，标记为脏就行了，为什么需要把内存中的数据读取到缓存中，然后再进行覆盖，标记为脏呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614846454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270775,"ip_address":""},"score":352774,"extra":""},{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1367877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VqgchrJWswwSLmxf1ict6icDDlZG5wChBEiaiblnJAQEdu1nYtB4EZq07mibUurOSDFr16dho6DhGyOpIW4eib57lK8Q/132","nickname":"箭指流云","note":"","ucode":"21571A7D60B10D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532230,"discussion_content":"同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637560790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352774,"ip_address":""},"score":532230,"extra":"{\"user_type\":1}"}]},{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37184,"discussion_content":"我也有同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571540021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164748,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1577085748,"is_pvip":false,"replies":[{"id":"68141","content":"Hash同学，<br><br>👍，加油，从实践中有所体会是最好的学习方法。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580651930,"ip_address":"","comment_id":164748,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70296562484","product_id":100026001,"comment_content":"不加volatitle关键字<br><br> private static int num = 1;<br>    public static void main(String[] args) {<br>        int[] arr = new int[8000000];<br>        for (int i = 0; i &lt; 8000000; i++) {<br>            arr[i] = num;<br>            num++;<br>        }<br>运行时间为：28毫秒<br><br>加了关键字<br>private static volatile int num = 1;<br>    public static void main(String[] args) {<br>        int[] arr = new int[8000000];<br>        for (int i = 0; i &lt; 8000000; i++) {<br>            arr[i] = num;<br>            num++;<br>        }<br><br>运行的时间为128毫秒","like_count":16,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478881,"discussion_content":"Hash同学，\n\n👍，加油，从实践中有所体会是最好的学习方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580651930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354332,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ec/9c/b4acd768.jpg","nickname":"Sarah","note":"","ucode":"FDC8A0D30EAE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379574,"discussion_content":"在C#里，加不加volatile都是20ms","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623988054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232965,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1594178422,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35953916790","product_id":100026001,"comment_content":"volatile 关键字去掉，变量的更新是先从内存中把变量加载到自己的缓存， ChangeMaker 线程把变量COUNTER = 0 加载到自己的缓存，并在自己的缓存内更新。ChangeMaker 每次更新完成后，会进行sleep，此时回把更新的数据同步到内存中。而 ChangeListener 线程，也是先从内存中获取数据，因为他自己的缓存内没有该变量。ChangeListener 线程，第一次从内存中读取到的变量值是0，因为车此时 ChangeMaker 线程对变量的更新还没有同步到内存，ChangeListener 线程从内存读取到0，并把该值加载到缓存，之后进行循环，每次循环都是从自己的缓存中读取数据，所以ChangeListener线程从每次循环从缓存中获取的变量值是0；<br>ChangeListener 线程修改为在循环内Thread.sleep(5)。线程休眠结束后，每次休眠结束，线程都会在从内存中在读取一次数据，这时休眠时间为5秒，刚好ChangeMaker 线程每次更新也休眠5秒，这时，ChangeMaker线程对变量的更新，在同步到内存后，刚好被ChangeListener 线程读取到；<br>所以，能得出结论，sleep之后，线程有足够的时间将缓存同步到内存，如果没有sleep，线程一直在执行，就没有时间将缓存数据同步到内存，同时，每次sleep之后，线程都会从内存中在读取一次数据到缓存，而不是sleep之后，还是读取自己的缓存数据。<br>Java 内存模型是一个隔离了硬件实现的虚拟机内的抽象模型，不同的线程或 CPU 核有着自己各自的缓存，缓存会导致可见性问题，可见性是并发bug的源头之一。所以java引入volatile关键字，能解决缓存带来的线程之间可见性的问题。java内存模型中规定，一个线程对volatile修饰变量的写操作先发与另一线程对于该变量的读操作，也就是说，针对volatile修饰的变量，一个线程要想读取到别的线程更新后的数据，就必须从内存中读取，而一个线程的写操作要想被别的线程看到，就必须保证在更新完之后，同步到内存中。所以volatile关键字的作用，就是确保变量的读取和写入，一定会同步到主内存，而不基于cpu缓存中的数据进行读取和写入。<br>要实现对volatile修饰的变量，每次的读取和写入，一定会同步到主内存。java的实现方案是利用内存屏障来实现，而内存屏障的实现，是基于cpu指令来实现的。经过volatile修饰的变量。在经过jvm解释器解释成机器码后，都会插入一写内存屏障的cpu指令，这些cpu指令的作用就是确保，每次对volatile修饰的变量的更新，都必须同步到内存，而每次读取volatile修饰的变量，都必须从内存中获取，而不是直接从cpu缓存获取。<br>所以Java内存模型隔离了具体的硬件实现，这些内存屏障的指令都是jvm在解释执行的时候加上的，程序员只需要在代码中用volatile 修饰即可，至于volatile 底层的实现，都是基于 java 的内存模式实现的。","like_count":8,"discussions":[{"author":{"id":1628434,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d9/12/71db1407.jpg","nickname":"L","note":"","ucode":"A5CB3F1B4975BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541029,"discussion_content":"西门吹~牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640238465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226369,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1592051346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27361855122","product_id":100026001,"comment_content":"简而言之，volatile变量就是禁用Cache ","like_count":6},{"had_liked":false,"id":143620,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1571746187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23046582667","product_id":100026001,"comment_content":"看了后面MESI协议的介绍，反而对本章示例程序有疑问，程序(2)中，虽然去掉了volatile的关键字，但ChangeListener应该接收到“写失效”的广播，然后中断忙等，再去内存获取最新数据。那有没有广播到ChangeListener的cpu cache呢？ 本人i5-8250U, ChangeListener需要至少大于等于Thread.sleep(495)才能和程序(1)的测试结果一样，这是咋回事？","like_count":5},{"had_liked":false,"id":240004,"user_name":"树军","can_delete":false,"product_type":"c1","uid":1243906,"ip_address":"","ucode":"7BC6F00B94FB2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/02/1b74615c.jpg","comment_is_top":false,"comment_ctime":1596710300,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18776579484","product_id":100026001,"comment_content":"老师，这讲里对volatile的解释是完全错的，cache从CPU的角度来看，对程序员是透明的，从软件看过去不会存在不一致的情况，只有在多master访问的时候才会关心，比如DMA等。这里的不一致不是由cache造成的，而是编译器对变量优化造成的，忙等待中，如果没有volatile关键字，编译器认为这个变量不会被改变，分配一个临时变量，一般就是一个寄存器，每次访问都直接访问寄存器，而不去访问真实的地址造成的","like_count":4,"discussions":[{"author":{"id":2970895,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/o60fbNDEphdEwdxID9CzuK5Oy37xX9jNnSPGNkPTbEC9qfZ0icOCj4JiavEoj2H1XEsosDulT6iaKBCJGzt1DtCmQ/132","nickname":"Geek_d88316","note":"","ucode":"76D40D5B6316BB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572027,"discussion_content":"c语言中可以看汇编，就是优化成寄存器中了，并不是文中说的没有时间去更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652568564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2325145,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkF14X58pdmTgBWwWzxVicJ0LQjNXiceL3xSj73eC4AZheyIPtf8tyqTicbP4VXia1TmDlm9rlCNCuDQ/132","nickname":"Geek_c2c8d1","note":"","ucode":"60B48691C86D6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385490,"discussion_content":"volatile 关键字不管是从嵌入式C还是从Java里面讲，其核心就是为了去保证对共享数据的操作，能够写回内存，而不是快速的读取寄存器或缓存，导致数据不一致而产生的问题，个人觉得这里的解释并没有问题。对程序员来说，就算是C程序员，你能够操纵到的内存也只能到主内存，而CPU内部的寄存器 和 缓存，除非是CPU特定开放给你，否则你是看不见的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627095413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224677,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f2/25/da66d3bb.jpg","nickname":"3","note":"","ucode":"262F048333F064","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354892,"discussion_content":"对程序员不是透明的 是有cpu指令控制的，而且你说的volatie寄存器 是指c语言的volatile吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615358584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116084,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1563783337,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14448685225","product_id":100026001,"comment_content":"上面的流程图中，有一步是从主内存读取数据到cache block 我觉得这一步是多余的，因为下面接下来的一步是写入数据到cache block，之后都要写入新数据了，为啥还要读，不理解？","like_count":3,"discussions":[{"author":{"id":1517311,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEbZZ65d5ibzjadyKq6Odjs5eeSJGwxnfBAv7gKjp6vG5GUdz9YrXq54KZeAEsS1OfahWVZurXODg/132","nickname":"Akizuki","note":"","ucode":"2B48169ED18AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3140,"discussion_content":"不是多余的，写入的数据可能只是 cache block 的一小部分","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1564217366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1124948,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/54/c9990105.jpg","nickname":"bro.","note":"","ucode":"D65283CD869804","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1517311,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEbZZ65d5ibzjadyKq6Odjs5eeSJGwxnfBAv7gKjp6vG5GUdz9YrXq54KZeAEsS1OfahWVZurXODg/132","nickname":"Akizuki","note":"","ucode":"2B48169ED18AC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3328,"discussion_content":"不可能吧，如果不是同一个缓存块的数据，每一个缓存块还需要维护嘛，显然是不能再细分块了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564397289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3140,"ip_address":""},"score":3328,"extra":""},{"author":{"id":1030816,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg","nickname":"likun","note":"","ucode":"9145ED059CCC6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1517311,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEbZZ65d5ibzjadyKq6Odjs5eeSJGwxnfBAv7gKjp6vG5GUdz9YrXq54KZeAEsS1OfahWVZurXODg/132","nickname":"Akizuki","note":"","ucode":"2B48169ED18AC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85792,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576575783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3140,"ip_address":""},"score":85792,"extra":""},{"author":{"id":2270904,"avatar":"","nickname":"102447","note":"","ucode":"82B85EFB6AB052","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1517311,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEbZZ65d5ibzjadyKq6Odjs5eeSJGwxnfBAv7gKjp6vG5GUdz9YrXq54KZeAEsS1OfahWVZurXODg/132","nickname":"Akizuki","note":"","ucode":"2B48169ED18AC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332591,"discussion_content":"牛逼,这个理解能力了得！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607266958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3140,"ip_address":""},"score":332591,"extra":""}]},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138500,"discussion_content":"我也觉得是多余的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579248468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257794,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1604132359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10194066951","product_id":100026001,"comment_content":"老师，不带valotile的关键字未更新，是java编译器，jit做的优化，jit会认为数据没有变更，优化成不再去跟cpu交互读取数据了，就是说没带valotile的变量，数据只读取了一次","like_count":2},{"had_liked":false,"id":225349,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1591720789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10181655381","product_id":100026001,"comment_content":"讲解思路清晰，并且很实用，“所谓脏的，就是指这个时候，我们的 CPU Cache 里面的这个 Block 的数据，和主内存是不一致的。”这个解释很到位。","like_count":3},{"had_liked":false,"id":197673,"user_name":"o_O","can_delete":false,"product_type":"c1","uid":1257283,"ip_address":"","ucode":"7C469AE3DA323B","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/43/e24212bb.jpg","comment_is_top":false,"comment_ctime":1585391034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175325626","product_id":100026001,"comment_content":"thread sleep做上下文切换难道不会保留缓存中的数据吗，如果保存了下次恢复不还是脏数据吗，什么时候从内存读取的呢？","like_count":1},{"had_liked":false,"id":172672,"user_name":"许先森","can_delete":false,"product_type":"c1","uid":1795371,"ip_address":"","ucode":"1F42D4A6B5C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","comment_is_top":false,"comment_ctime":1579249033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169183625","product_id":100026001,"comment_content":"总结写回：如果要写入的数据就在CPU高速缓存中，则直接覆盖，并标记为脏；如果不在，去找到对应的高速缓存块；找到之后，如果发现高速缓存块被标记脏，则把里面的数据“丢到”内中去，腾出位置，然后覆盖新数据进去，并且标记为脏；如果发现高速缓存块没有被标记为脏，则不管三七二十一，管你原来数据在内存有没有“备份”，我直接覆盖新数据进去，并且比较为脏。","like_count":1},{"had_liked":false,"id":143636,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1571749445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10161684037","product_id":100026001,"comment_content":"比如，下面的程序，volatile变量count 每次都要写回到内存（Memory）中，而sum是线程栈的本地变量， 每次都只会写到线程栈中（可以对应CPU Cache）。所以最后add()&#47;add2()方法的耗时，近似于Memory访问速度&#47;CPU Cache访问速度。<br>public class VolatilePerformanceTest {<br>    private static volatile int count =0;<br><br>    &#47;**<br>     * count++注意并不是原子操作。<br>     *&#47;<br>    public static void add(){<br>        for(long i=0; i&lt; 100000000; i++){<br>            count++;<br>        }<br>    }<br>    public static void add2(){<br>        int sum = 0;<br>        for(int i=0; i&lt; 100000000; i++){<br>            sum++;<br>        }<br>    }<br><br>    public static void main(String[] args){<br>        long start =System.currentTimeMillis();<br>        &#47;&#47;753 ms<br>        add();<br>        System.out.println(System.currentTimeMillis() - start);<br>        start= System.currentTimeMillis();<br>        &#47;&#47;7ms<br>        add2();<br>        System.out.println(System.currentTimeMillis() - start);<br>    }<br>}","like_count":2},{"had_liked":false,"id":117114,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1563970890,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10153905482","product_id":100026001,"comment_content":"请问老师在写回策略中检查Cache Block是不是别的内存地址的数据是啥意思, 一个cache block不是对应一个内存block吗?","like_count":2,"discussions":[{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30604,"discussion_content":"这个cache block 是CPU的缓存，你得理解为什么要用写回策略， 为了不用每次数据更新都去操作主存，这样就可以提高效率。时间局部性， 一个数据访问了短时间会被再次访问。比如我们拿数据缓存有就拿缓存的，不用每次都到数据库拿，因为每次都从数据库拿，对比缓存来说太慢了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570845886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138498,"discussion_content":"第一，图里的Cache Block是缓存块。第二，上一节就说了，13、21、29的内存块都对应高速缓存块5，多对1的关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579248384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240270,"avatar":"","nickname":"梅坊帝卿","note":"","ucode":"702F019BA3356C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51993,"discussion_content":"不是 可以对应多个 比如上一节多对一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573981433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1147461,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/45/981ac8ab.jpg","nickname":"lcp","note":"","ucode":"3C9975BFF7654E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1240270,"avatar":"","nickname":"梅坊帝卿","note":"","ucode":"702F019BA3356C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138308,"discussion_content":"上一节说的应该是：多个 cache block 对应一个 cache line，cache block 是在内存里面的存储单位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579235058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51993,"ip_address":""},"score":138308,"extra":""}]}]},{"had_liked":false,"id":116059,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1563779819,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10153714411","product_id":100026001,"comment_content":"写回的内存写入策略的那张图中，为什么会有从主内存读取数据到cache block这一步呢？反正读入了主内存的数据也要被当前的数据覆盖掉的","like_count":2,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138501,"discussion_content":"其实作者想表达的意思应该是从内存读取想写入的新数据覆盖进来，后面“写入数据到高速缓存中”重复了，感觉有点多余，容易误导人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579248613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475340,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/0c/b9e39db4.jpg","nickname":"韩俊臣","note":"","ucode":"D6A15C025570D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37239,"discussion_content":"同问，而且如果是该cache block没有被标为脏的话，为啥还要从主内存再写入一遍数据？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571556006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277082,"user_name":"ano","can_delete":false,"product_type":"c1","uid":1783342,"ip_address":"","ucode":"7DE64BDFA78550","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/2e/376a3551.jpg","comment_is_top":false,"comment_ctime":1612255789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907223085","product_id":100026001,"comment_content":"volatile为什么不 从cpu的 L3 cache里读写？L3 cache是多个core共享的，同样可以解决这个并发的问题","like_count":1},{"had_liked":false,"id":240361,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1149084,"ip_address":"","ucode":"A9E46C9FDB3275","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/9c/cbc463e6.jpg","comment_is_top":false,"comment_ctime":1596876769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891844065","product_id":100026001,"comment_content":"对未使用volatile修饰的共享变量，ChangeMaker在其Cache中对该变量进行修改，要想在ChangeListener能监听到，如下两个条件缺一不可：<br>1、ChangeMaker中对变量修改后，必须调用sleep，这样当前CPU核才有空闲时间将修改后的变量值同步到主内存。<br>2、ChangeListener在读变量的过程中，也必须sleep，这样当前CPU核才有空闲时间从主内存中重新加载变量值。<br>说到底，这也是JMM的一种策略","like_count":1},{"had_liked":false,"id":232599,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1594046325,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5889013621","product_id":100026001,"comment_content":"老师好，想问一下，java内存模型里面的每个线程的缓存是不是就是cpu的cache呢？还是说java也实现了一套类似于cpu，l1cache的模型？","like_count":1,"discussions":[{"author":{"id":1810189,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZHw73tgCqGKhvticUWGRz4icgicu4hFWfKtacoFJeItH7maNuNUmjnEgDTJvOibwUWgGV0p6guNPibMVWDV4BUmEmlA/132","nickname":"Ethan","note":"","ucode":"75F613D58909DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301260,"discussion_content":"同问！！望解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598454203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172668,"user_name":"许先森","can_delete":false,"product_type":"c1","uid":1795371,"ip_address":"","ucode":"1F42D4A6B5C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","comment_is_top":false,"comment_ctime":1579248768,"is_pvip":false,"replies":[{"id":"68074","content":"许先森同学，<br><br>是的，这里指的是Cache，不是主内存。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580631262,"ip_address":"","comment_id":172668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5874216064","product_id":100026001,"comment_content":"文中有写：“写回策略的过程是这样的：如果发现我们要写入的数据，就在 CPU Cache 里面，那么我们就只是更新 CPU Cache 里面的数据。同时，我们会标记 CPU Cache 里的这个 Block 是脏（Dirty）的。所谓脏的，就是指这个时候，我们的 CPU Cache 里面的这个 Block 的数据，和主内存是不一致的。”<br>所以图里的Cache Block指的是CPU高速缓存块，不是内存块。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481812,"discussion_content":"许先森同学，\n\n是的，这里指的是Cache，不是主内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580631262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161982,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1576423240,"is_pvip":false,"replies":[{"id":"68138","content":"🙏 谢谢支持","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580651171,"ip_address":"","comment_id":161982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871390536","product_id":100026001,"comment_content":"讲得好啊，透彻","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477937,"discussion_content":"🙏 谢谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580651171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350513,"user_name":"一頭蠻牛","can_delete":false,"product_type":"c1","uid":1209653,"ip_address":"","ucode":"887E596A1DBF2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","comment_is_top":false,"comment_ctime":1656980344,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1656980344","product_id":100026001,"comment_content":"老师讲的很好 唯一就是不该用Java来距离 增加了理解的复杂程度","like_count":1},{"had_liked":false,"id":343532,"user_name":"小杰","can_delete":false,"product_type":"c1","uid":2853200,"ip_address":"","ucode":"BBDF8E9F348F65","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","comment_is_top":false,"comment_ctime":1650894470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650894470","product_id":100026001,"comment_content":"public class testVolatileRunTime {<br>    private static  int COUNTER = 0;<br>    public static void main(String[] args) {<br>        long starTime = System.currentTimeMillis();<br>        &#47;&#47;计算循环读写COUNTER的时间<br>        int[] arr = new int[8000000];<br>        for (int i = 0; i &lt; 8000000; i++) {<br>           arr[i] = COUNTER;<br>           COUNTER++;<br>        }<br>        long endTime = System.currentTimeMillis();<br>        long Time = endTime - starTime;<br>        System.out.println(Time);<br>    }<br>}<br>建议大家去跑一下。差别还是很大的","like_count":0},{"had_liked":false,"id":336626,"user_name":"jameswu","can_delete":false,"product_type":"c1","uid":2907330,"ip_address":"","ucode":"A3537F45B0EB57","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5c/c2/d17cc923.jpg","comment_is_top":false,"comment_ctime":1646265829,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646265829","product_id":100026001,"comment_content":"整个讲的挺好的，但是volatile的例子不好。volatile是告诉编译器优化用的…每次编译器看到它修饰的变量时，都会生成dptr，从内存拿数，而不是寄存器","like_count":0},{"had_liked":false,"id":313936,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1632747355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632747355","product_id":100026001,"comment_content":"get缓存一致性问题…","like_count":0},{"had_liked":false,"id":301424,"user_name":"Geek_d60492","can_delete":false,"product_type":"c1","uid":2599089,"ip_address":"","ucode":"9A79B12F0D3D63","user_header":"https://static001.geekbang.org/account/avatar/00/27/a8/b1/092b658f.jpg","comment_is_top":false,"comment_ctime":1625672213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625672213","product_id":100026001,"comment_content":"写直达在缓存命中的前提下可以理解为CPU同时向Cache和主存写入吗？如果是的话为了提高CPU执行效率是否可以将写主存过程通过异步缓冲区的方式写回呢？","like_count":0},{"had_liked":false,"id":296245,"user_name":"菽绣","can_delete":false,"product_type":"c1","uid":1755477,"ip_address":"","ucode":"60955E14C39C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c9/55/0e627a31.jpg","comment_is_top":false,"comment_ctime":1622858471,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1622858471","product_id":100026001,"comment_content":"L1指令缓存和L1数据缓存为什么不能合并呢","like_count":0,"discussions":[{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540424,"discussion_content":"前面讲cpu的时候有讲， 但是我也不理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640056440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061803,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/ab/d8ba4242.jpg","nickname":"哒哒哒","note":"","ucode":"9378AD329F8AE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383119,"discussion_content":"我理解分开还是为了效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625910514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281434,"user_name":"mghio","can_delete":false,"product_type":"c1","uid":1213078,"ip_address":"","ucode":"74883EDE4FD0DC","user_header":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","comment_is_top":false,"comment_ctime":1614749889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614749889","product_id":100026001,"comment_content":"MacBook Pro (13-inch, 2020, Two Thunderbolt 3 ports)，处理器：1.4 GHz 四核 Intel Core i5 使用 Java 的 volatile 关键字没有这个效果，另 JDK 版本为：openjdk 11.","like_count":0},{"had_liked":false,"id":253659,"user_name":"Ishmael","can_delete":false,"product_type":"c1","uid":1312115,"ip_address":"","ucode":"87CAF00A0BB25A","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/73/89148275.jpg","comment_is_top":false,"comment_ctime":1602820197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602820197","product_id":100026001,"comment_content":"总线这个概念 好像就是EventBus吧 果然软硬不分家","like_count":0},{"had_liked":false,"id":239985,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1149084,"ip_address":"","ucode":"A9E46C9FDB3275","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/9c/cbc463e6.jpg","comment_is_top":false,"comment_ctime":1596706831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596706831","product_id":100026001,"comment_content":"写回的场景如下：<br>数据A准备写回到Cache Line，就说明之前从内存中被加载到Cache Line，因此该Cache Line肯定不为空，至于其中的数据，有如下两种情况：<br>1、存放的是数据A<br>CPU直接将A写入到Cache Line，并标记该数据为脏。脏的意思是，该数据在Cache Line和内存中不是一致的。<br><br>2、存放的是其它数据B，这时又分为如下两种情况：<br>     2.1、B为脏<br>            将B写入内存，保证内存中的B是最新的值。然后才会将A写入到 <br>            Cache Line，并标记位脏。<br>     2.2、B不为脏<br>             不为脏就说明内存中的B的值就是最新的，就没必要重新写入到内存。此时只需要将A写入到 Cache Line，并标记位脏。<br><br>","like_count":0},{"had_liked":false,"id":239128,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1149084,"ip_address":"","ucode":"A9E46C9FDB3275","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/9c/cbc463e6.jpg","comment_is_top":false,"comment_ctime":1596442349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596442349","product_id":100026001,"comment_content":"public class VolatileTest {<br>    private static volatile int withVolatileSum = 0;<br>    private static int withoutVolatileSum = 0;<br><br>    public static void main(String[] args) {<br>        withVolatile();<br>        withoutVolatile();<br>    }<br><br>    public static void withVolatile() {<br>        long start = System.currentTimeMillis();<br>        for (int i = 0; i &lt; 10000; i++) {<br>            for (int j = 0; j &lt; 10000; j++) {<br>                withVolatileSum += 1;<br>            }<br>        }<br>        System.out.println(System.currentTimeMillis() - start);<br>    }<br><br>    public static void withoutVolatile() {<br>        long start = System.currentTimeMillis();<br>        for (int i = 0; i &lt; 10000; i++) {<br>            for (int j = 0; j &lt; 10000; j++) {<br>                withoutVolatileSum += 1;<br>            }<br>        }<br>        System.out.println(System.currentTimeMillis() - start);<br>    }<br><br>}<br>运行结果：<br>729<br>13<br>差别很大","like_count":0},{"had_liked":false,"id":226370,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1592051559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592051559","product_id":100026001,"comment_content":"public class VolatileTest3 {<br>    private static volatile int COUNTER = 0;<br>    static int count = 0;<br>    static int size = 100000000;<br><br>    public static void main(String[] args) {<br><br>        long start2 = System.currentTimeMillis();<br>        for (int i = 0; i &lt; size; i++) {<br>            COUNTER = i;<br>        }<br>        System.out.println(&quot; volatile 耗时：&quot; + (System.currentTimeMillis() - start2));<br><br>        long start = System.currentTimeMillis();<br>        for (int i = 0; i &lt; size; i++) {<br>            count = i;<br>        }<br>        System.out.println(&quot; 非 volatile 耗时：&quot; + (System.currentTimeMillis() - start));<br><br>    }<br><br>}<br><br><br><br> volatile 耗时：672<br> 非 volatile 耗时：8","like_count":0},{"had_liked":false,"id":222553,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1590833346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590833346","product_id":100026001,"comment_content":"\t&#47;&#47; increacing counter to 1.<br>\t&#47;&#47;increacing counter to 2.<br>\t&#47;&#47;increacing counter to 3.<br>\t&#47;&#47;increacing counter to 4.<br>\t&#47;&#47;increacing counter to 5.<br>\t&#47;&#47;got change for counter: 1.\t<br><br><br>\t&#47;&#47; 老师， 我 counter 用 volatile 修饰, 同时，我去掉了 ChangeListener 和 ChangeMaker 中的 所有sleep操作， 再无其他修改。<br>\t&#47;&#47; 线程最终都正确退出了， 但结果 ChangeMaker 看到了增加到 1， 2， 3， 4， 5 的过程<br>\t&#47;&#47; 而 ChangeListener 只看到了 1， 请问老师 为什么ChangeListener 只看到了 1 就退出了？","like_count":0},{"had_liked":false,"id":217604,"user_name":"陈金龙","can_delete":false,"product_type":"c1","uid":1571152,"ip_address":"","ucode":"684F1C733A6C27","user_header":"https://static001.geekbang.org/account/avatar/00/17/f9/50/d0ea075b.jpg","comment_is_top":false,"comment_ctime":1589544394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589544394","product_id":100026001,"comment_content":"惊喜啊，作为一个半路出家的程序员，一直没理解volatile关键字的含义，今天听老师一讲，豁然开朗。","like_count":0},{"had_liked":false,"id":187191,"user_name":"信长","can_delete":false,"product_type":"c1","uid":1746710,"ip_address":"","ucode":"294D19040C09C0","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a7/16/b2ff3f70.jpg","comment_is_top":false,"comment_ctime":1584057423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584057423","product_id":100026001,"comment_content":"这一章我看得特别慢，因为，写得太好了，学到很多知识","like_count":0},{"had_liked":false,"id":181440,"user_name":"jason0606","can_delete":false,"product_type":"c1","uid":1215860,"ip_address":"","ucode":"0081C861734359","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/74/3bb89151.jpg","comment_is_top":false,"comment_ctime":1582541269,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582541269","product_id":100026001,"comment_content":"写回策略里面，假如读取到的cache block是干净的，为什么还要从主内存里面读取一次数据，然后再去覆盖他？ 希望老师能够讲解下","like_count":0,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207937,"discussion_content":"缓存是一对多的，只有在缓存地址跟将要写入数据地址相同的情况下才能直接写，并标记为脏；当地址不一致就分两种情况，第一种是缓存的其他内存快的数据，需要将其先放回内存，然后同步自己内存和缓存地址，然后写入和更改数据，第二种是里面啥都没有，需要将缓存的信息跟内存同步，然后写入数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584526281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179921,"user_name":"Geek_aa8017","can_delete":false,"product_type":"c1","uid":1748911,"ip_address":"","ucode":"286195887103C2","user_header":"","comment_is_top":false,"comment_ctime":1582121977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582121977","product_id":100026001,"comment_content":"JMM中的线程栈内存是对应到物理的CPU Cache吗","like_count":0},{"had_liked":false,"id":156606,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574921776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574921776","product_id":100026001,"comment_content":"1.这篇文章讨论的是单个线程数据一致性问题。（下一节，多个线程，或者是多个 CPU 核的缓存一致性的问题）<br>2.知识点：volatile 关键字究竟代表什么含义呢？它会确保我们对于这个变量的读取和写入，都一定会同步到主内存里，而不是从 Cache 里面读取。","like_count":0},{"had_liked":false,"id":152843,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1574087898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574087898","product_id":100026001,"comment_content":"volatile关键字会让数据都写入主内存，在多线程中一个线程的变量使用此关键字更改了变量之后，对其他线程这个改变可感知的。write through方式是无论缓存中有没有数据都更新到主内存。write back 是更新缓存，当需要把缓存中的脏数据交换出去时，数据时才会更新到主内存","like_count":0},{"had_liked":false,"id":126429,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1566386115,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1566386115","product_id":100026001,"comment_content":"基础不牢、地洞山摇、我来补基础啦：<br>day38 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11353749.html","like_count":0,"discussions":[{"author":{"id":1112415,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/5f/b0a125a9.jpg","nickname":"chp","note":"","ucode":"F0A2442230CD45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383436,"discussion_content":"别抄袭了。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626095362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1149084,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/9c/cbc463e6.jpg","nickname":"仰望星空","note":"","ucode":"A9E46C9FDB3275","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296953,"discussion_content":"这样真的好吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596712798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82708,"discussion_content":"你这是把老师的抄一遍，你别人还需要订阅老师的专利吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576369476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119808,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1564706732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564706732","product_id":100026001,"comment_content":"volatile 会直接写内存吗？会不会直接写l3","like_count":0},{"had_liked":false,"id":117112,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1563970729,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563970729","product_id":100026001,"comment_content":"请问老师这节课出现的cache block和上节课的内存 bolck是不是一个概念?","like_count":0,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138502,"discussion_content":"不是，图里的cache block是缓存块，确实不严谨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579248641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116171,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1563797393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563797393","product_id":100026001,"comment_content":"老师你好，作类比的话，是不是Java主内存对应的是CPU的3级缓存。多个线程多个CPU最后在L3上读数据是一致性的?期待后面的缓存一致性的维护，会不会出行脏读脏写的情况。","like_count":0},{"had_liked":false,"id":116057,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1563779511,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563779511","product_id":100026001,"comment_content":"老师好，JMM中的线程栈内存是对应到CPU Cache吗？以及JMM的主内存对应到硬件的主内存吗？JMM和cpu cpu cache 主内存之间的关系是相似的，还是就是同一个东西呢？","like_count":0,"discussions":[{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161752,"discussion_content":"jmm的线程栈只供当前线程使用，所以可以理解为对应到cpu的cache.其主内存对和cpu的主内存是一个东西，只不过是2种场景下的不同叫法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580916381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116040,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1563777175,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1563777175","product_id":100026001,"comment_content":"程序没有写，我简答一下，如果不使用volatile关键字，相当于使用写直达，没有使用cpu cache。性能应该相差一个数量级。","like_count":0,"discussions":[{"author":{"id":1240126,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","nickname":"宋不肥","note":"","ucode":"32B34AF579C91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2650,"discussion_content":"确实说反了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563844664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2610,"discussion_content":"大哥，说反了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563786692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116031,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1563774595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563774595","product_id":100026001,"comment_content":"在jdk5之前由于java的乱序执行导致volatile关键字还是有可能不可见的 后来引入了happen-before规则 才让volatile具有可见性 但是volatile并不具有原子性 也就是跟管程（synchronized）还是有区别的","like_count":0},{"had_liked":false,"id":115851,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1563757647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563757647","product_id":100026001,"comment_content":"这个缓存模型只适用于Java吗，其他语音呢，老师可否引申一下","like_count":0},{"had_liked":false,"id":115848,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1563757482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563757482","product_id":100026001,"comment_content":"老师好!写回的优势是多次局部命中的时候可以打包写回减少开销是么?","like_count":0}]}