{"id":99260,"title":"52 | GCD的常用方法分析和使用","content":"<p><strong>PDF 课件和源代码下载地址：</strong></p><p><a href=\"https://gitee.com/geektime-geekbang/geektime-ios-course\">https://gitee.com/geektime-geekbang/geektime-ios-course</a></p>","comments":[{"had_liked":false,"id":216493,"user_name":"ME进哥哥","can_delete":false,"product_type":"c3","uid":1586175,"ip_address":"","ucode":"B893EFD71C5C5A","user_header":"https://static001.geekbang.org/account/avatar/00/18/33/ff/ac79e58a.jpg","comment_is_top":false,"comment_ctime":1589271063,"is_pvip":false,"replies":[{"id":81235,"content":"不对哈。就像在课程中说的，同步和异步，与主线程和非主线程，不是一个维度的概念哈。我们可以生成任意的线程，而系统UI绘制的线程成为主线程。在任何线程我们都可以同步执行或者异步执行我们的代码，同步和异步一般来说，都是指在同一个线程中的执行顺序。","user_name":"作者回复","user_name_real":"zzz","uid":1041455,"ctime":1590151774,"ip_address":"","comment_id":216493,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"主线程执行最好使用同步","like_count":1,"discussions":[{"author":{"id":1041455,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJ3dLlYr6tznfnZXJNsD7Jw48BVnFSib3RO3VWEN0pgebRY1jaR8YXLQ6iaAjTsFiamOWSA3UPAa37A/132","nickname":"Geek_e7jq8k","note":"","ucode":"352964E5D793DA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494839,"discussion_content":"不对哈。就像在课程中说的，同步和异步，与主线程和非主线程，不是一个维度的概念哈。我们可以生成任意的线程，而系统UI绘制的线程成为主线程。在任何线程我们都可以同步执行或者异步执行我们的代码，同步和异步一般来说，都是指在同一个线程中的执行顺序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590151774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122377,"user_name":"沙亮亮","can_delete":false,"product_type":"c3","uid":1099492,"ip_address":"","ucode":"E6CF0D5B1E6691","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/e4/ec572f55.jpg","comment_is_top":false,"comment_ctime":1565352557,"is_pvip":false,"replies":[{"id":45367,"content":"这里可以深入的了解一下Runloop的原理和应用。由于课程的定位这里没有深入的进行讲解，不是特别严谨，可以简单的理解为如果在mainQueue中执行dispatch_async，block中的代码不会再当前的runloop中执行，从现象上来看就是会先执行GCD下面的代码，然后在之后的runloop中执行gcd当中的代码。","user_name":"作者回复","user_name_real":"dequanzhu","uid":1041455,"ctime":1565762853,"ip_address":"","comment_id":122377,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"gcd的主队列的异步任务执行原理是啥样的，主队列里不能开子线程，只能用主线程","like_count":1,"discussions":[{"author":{"id":1041455,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJ3dLlYr6tznfnZXJNsD7Jw48BVnFSib3RO3VWEN0pgebRY1jaR8YXLQ6iaAjTsFiamOWSA3UPAa37A/132","nickname":"Geek_e7jq8k","note":"","ucode":"352964E5D793DA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462227,"discussion_content":"这里可以深入的了解一下Runloop的原理和应用。由于课程的定位这里没有深入的进行讲解，不是特别严谨，可以简单的理解为如果在mainQueue中执行dispatch_async，block中的代码不会再当前的runloop中执行，从现象上来看就是会先执行GCD下面的代码，然后在之后的runloop中执行gcd当中的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565762853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471563,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/4b/328b1c57.jpg","nickname":"Schrödinger","note":"","ucode":"D5A248760D0206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288041,"discussion_content":"这个很好理解，相当于你自己往你家的信箱里扔了三封信，扔完三封信后，你又跑到信箱把信取出去读。信箱相当于queue，而你就是线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593618407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225857,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c3","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1591876012,"is_pvip":false,"replies":[{"id":84686,"content":"这个理解是不对的。同步和异步是目的，多线程是实现异步的手段。同步、异步和多线程没有一一对应的关系。同一个线程可以是同步也可以是异步。同时异步和并发也没有关系，并发通常是为了提高利用率，而异步通常是为了保证结果不阻塞当前执行。","user_name":"作者回复","user_name_real":"zzz","uid":1041455,"ctime":1593000855,"ip_address":"","comment_id":225857,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"同步和异步是相对目前进程中多个线程而言的，同步执行多个线程，线程之间会等待。异步执行多个线程，线程之间不会等待。\n串行和并行是相对一个线程里面的多个任务而言的，一个线程如果串行多个任务，任务之间也会等待。并行多个任务，任务之间不会等待。\n视频中异步执行并发队列加载图片，只是因为我们只做了加载了一个图片的任务，不能够很明确的表现并发的概念。我们异步执行一个串行队列也能达到这样的效果吧？过如果回调里面加载多个图片资源是不是更能说明并发的概念。","like_count":0,"discussions":[{"author":{"id":1041455,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJ3dLlYr6tznfnZXJNsD7Jw48BVnFSib3RO3VWEN0pgebRY1jaR8YXLQ6iaAjTsFiamOWSA3UPAa37A/132","nickname":"Geek_e7jq8k","note":"","ucode":"352964E5D793DA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498019,"discussion_content":"这个理解是不对的。同步和异步是目的，多线程是实现异步的手段。同步、异步和多线程没有一一对应的关系。同一个线程可以是同步也可以是异步。同时异步和并发也没有关系，并发通常是为了提高利用率，而异步通常是为了保证结果不阻塞当前执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593000855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471563,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/4b/328b1c57.jpg","nickname":"Schrödinger","note":"","ucode":"D5A248760D0206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288048,"discussion_content":"串行和并行就是，我把任务分配出去，取任务的人在去任务时，在意不在意任务的先后顺序。如果在意，那就是串行。不在意那就是并行，但如果就你一个人取，也并行不起来。\n\n所以串行，并行是队列的属性，描述的是取任务时任务被取出的顺序。\n\n而同步和异步呢，是描述行为主体的属性（如人或线程）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593619248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471563,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/4b/328b1c57.jpg","nickname":"Schrödinger","note":"","ucode":"D5A248760D0206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288044,"discussion_content":"任何计算机问题都可以从生活中找到原型。我觉得你理解对了的，但是可能稍有些片面。\n\n同步和异步：一定要分清楚和谁同步，多线程比较好理解，如果把人这个个体看为一个线程，那么同步和异步就是你和别人行为的同步与异步。如果是单线程就是你此刻行为和下一刻行为的同步与异步。\n\n同步和异步本身都是字面意思，通俗地讲就是等还是不等。我们两个人一起跑，我等你就是我同步你的跑步节奏，异步就是我不等你，我一直往前跑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593618844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185081,"user_name":"罗十十十","can_delete":false,"product_type":"c3","uid":1021482,"ip_address":"","ucode":"3DCD72D62FCBC0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/2a/f9a3f277.jpg","comment_is_top":false,"comment_ctime":1583479900,"is_pvip":false,"replies":[{"id":71722,"content":"回顾了下视频，在10分到12分左右的代码，视屏中没有写*呀，不知道是不是哪里遗漏了。回归这个问题，dispatch_queue_global_t 我们看下他的定义，是typedef NSObject&lt;OS_dispatch_queue_global&gt; *dispatch_queue_global_t;   所以是不需要，也不应该使用*的。\n","user_name":"作者回复","user_name_real":"zzz","uid":1041455,"ctime":1583667736,"ip_address":"","comment_id":185081,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"```\ndispatch_queue_global_t downloadQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_queue_main_t mainQueue = dispatch_get_main_queue();\n```\n这俩变量 我用*号开头，例如*downloadQueue， 会报错：\n```\nImplicit conversion of an Objective-C pointer to &#39;__strong dispatch_queue_global_t *&#39; (aka &#39;NSObject&lt;OS_dispatch_queue_global&gt; *__strong *&#39;) is disallowed with ARC\n```\n不知道 老师的为啥没报错 -。-","like_count":0,"discussions":[{"author":{"id":1041455,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJ3dLlYr6tznfnZXJNsD7Jw48BVnFSib3RO3VWEN0pgebRY1jaR8YXLQ6iaAjTsFiamOWSA3UPAa37A/132","nickname":"Geek_e7jq8k","note":"","ucode":"352964E5D793DA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486242,"discussion_content":"回顾了下视频，在10分到12分左右的代码，视屏中没有写*呀，不知道是不是哪里遗漏了。回归这个问题，dispatch_queue_global_t 我们看下他的定义，是typedef NSObject&amp;lt;OS_dispatch_queue_global&amp;gt; *dispatch_queue_global_t;   所以是不需要，也不应该使用*的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583667736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285731,"user_name":"Geek__2099","can_delete":false,"product_type":"c3","uid":1457784,"ip_address":"","ucode":"01444B60F18A66","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep8unibCib9rdHib0D6Rf6TjecPQu1yic0G9sjzriczlTcwGHP6DaxtEmHyN7pCrD9zV7OSegyf7EUBvaA/132","comment_is_top":false,"comment_ctime":1616992988,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"串行与并行，是针对多个线程之间执行顺序说的。异步与同步是针对代码块与代码块之间执行顺序的。\n\n线程之间关系，强调了 代码执行所处的物理资源是独立的。不同线程内的代码之间，作为一个整体，关注在业务上是否有前后依赖关系。\n有：是串行；没有：是并行。\n\n代码块之间关系，强调了代码执行背后的业务逻辑是相关的，与可承载的物理资源是否独立无关，即是否需要在同一线程中 这个决策的依据，是由其业务逻辑关系来决定。它同样在业务上关注是否有前后依赖关系。\n如果执行顺序必须是先后关系，那么就是同步关系。\n如果执行顺序不要求是先后关系，那么可以是同步关系，也可以是异步关系。\n如采取异步关系，考虑的是效率等非业务正确性因素。如不影响主线程的业务目标，异步不必须用多线程来实现。\n只有认为异步在主线程中会影响主线程目标时，才需向系统申请额外的物理资源投入，就是非主线程，来协助完成。\n但是申请了单独的物理资源，在执行时与主线程之间是并行还是串行，这个是由业务判断的。\n本视屏中，没有指明先后关系，应该是并行执行的。而系统得到了这个判断后，自行调度在时间轴上，两线程代码执行没有先后约束，即并行执行。\n本文中图片下载处理，先考虑到避免影响ui主线程中代码执行，故采取异步执行。所以在执行异步前，先申请单独的非主线程资源，然后在该资源中执行下载代码块。 而下载处理完成后，再将显示图片的代码块，调度到主线程中运行。而这个调度何时发起，因只有非主线程知道，所以发起调度指令的代码也要放在非主线程的代码块中。 \n关于调度的原理和机制，是由系统的runloop模块负责的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n本文中，编写的代码默认是在主线程中执行的，这是一个前提。\n图片下载和处理，这部分代码块，由于\n\n","like_count":1},{"had_liked":false,"id":381843,"user_name":"Ericpoon","can_delete":false,"product_type":"c3","uid":1051587,"ip_address":"广东","ucode":"3D09FD429FE9CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/c3/3385cd46.jpg","comment_is_top":false,"comment_ctime":1695962902,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"非主队列，是什么时候创建的请问，是app启动时一并创建，还是我们调用get_queue时想创建？谢谢🙏！","like_count":0},{"had_liked":false,"id":225853,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c3","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1591875406,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100025901,"comment_content":"老师可以详细说一下，同步，异步，与串行，并发有什么关系吗。视频中是创建了并发的线程，并且异步执行了。可以说一下哪里体现了异步执行，哪里体现了并发吗？ 并且在GCD的block回调中是要防止循环引用的吧？","like_count":0}]}