{"id":402223,"title":"04 | 内存友好的数据结构该如何细化设计？","content":"<p>你好，我是蒋德钧。今天我们来聊聊，Redis中是如何通过优化设计数据结构，来提升内存利用率的。</p><p>我们知道Redis是内存数据库，所以，高效使用内存对Redis的实现来说非常重要。而实际上，Redis主要是通过两大方面的技术来提升内存使用效率的，分别是<strong>数据结构的优化设计与使用</strong>，以及<strong>内存数据按一定规则淘汰</strong>。</p><p>关于内存数据按规则淘汰，这是通过Redis内存替换策略实现的，也就是将很少使用的数据从内存中淘汰，从而把有限的内存空间用于保存会被频繁访问的数据。这部分的设计与实现，主要和内存替换策略有关，我会在后面的缓存模块给你详细介绍。</p><p>所以这节课，我主要是带你学习Redis数据结构在面向内存使用效率方面的优化，其中包括两方面的设计思路：一是<strong>内存友好的数据结构设计</strong>；二是<strong>内存友好的数据使用方式</strong>。</p><p>这两方面的设计思路和实现方法是具有通用性的，当你在设计系统软件时，如果需要对内存使用精打细算，以便节省内存开销，这两种设计方法和实现考虑就非常值得学习和掌握。</p><p>好，接下来，我们就先来学习下内存友好的数据结构设计。</p><h2>内存友好的数据结构</h2><p>首先要知道，在Redis中，有三种数据结构针对内存使用效率做了设计优化，分别是简单动态字符串（SDS）、压缩列表（ziplist）和整数集合（intset）。下面，我们就分别来学习一下。</p><!-- [[[read_end]]] --><h3>SDS的内存友好设计</h3><p>实际上，我在<a href=\"https://time.geekbang.org/column/article/400314\">第2讲</a>中就已经给你介绍过SDS的结构设计，这里我们先做个简单的回顾：SDS设计了不同类型的结构头，包括sdshdr8、sdshdr16、sdshdr32和sdshdr64。这些不同类型的结构头可以适配不同大小的字符串，从而避免了内存浪费。</p><p>不过，SDS除了使用精巧设计的结构头外，在保存较小字符串时，其实还使用了<strong>嵌入式字符串</strong>的设计方法。这种方法避免了给字符串分配额外的空间，而是可以让字符串直接保存在Redis的基本数据对象结构体中。</p><p>所以这也就是说，要想理解嵌入式字符串的设计与实现，我们就需要先来了解下，Redis使用的基本数据对象结构体redisObject是什么样的。</p><h4>redisObject结构体与位域定义方法</h4><p>redisObject结构体是在server.h文件中定义的，主要功能是用来保存键值对中的值。这个结构一共定义了4个元数据和一个指针。</p><ul>\n<li><strong>type</strong>：redisObject的数据类型，是应用程序在Redis中保存的数据类型，包括String、List、Hash等。</li>\n<li><strong>encoding</strong>：redisObject的编码类型，是Redis内部实现各种数据类型所用的数据结构。</li>\n<li><strong>lru</strong>：redisObject的LRU时间。</li>\n<li><strong>refcount</strong>：redisObject的引用计数。</li>\n<li><strong>ptr</strong>：指向值的指针。</li>\n</ul><p>下面的代码展示了redisObject结构体的定义：</p><pre><code>typedef struct redisObject {\n    unsigned type:4; //redisObject的数据类型，4个bits\n    unsigned encoding:4; //redisObject的编码类型，4个bits\n    unsigned lru:LRU_BITS;  //redisObject的LRU时间，LRU_BITS为24个bits\n    int refcount; //redisObject的引用计数，4个字节\n    void *ptr; //指向值的指针，8个字节\n} robj;\n</code></pre><p>从代码中我们可以看到，在type、encoding和lru三个变量后面都有一个冒号，并紧跟着一个数值，表示该元数据占用的比特数。其中，type和encoding分别占4bits。而lru占用的比特数，是由server.h中的宏定义LRU_BITS决定的，它的默认值是24bits，如下所示：</p><pre><code>#define LRU_BITS 24\n</code></pre><p>而这里我想让你学习掌握的，就是这种<strong>变量后使用冒号和数值的定义方法</strong>。这实际上是C语言中的<strong>位域定义方法</strong>，可以用来有效地节省内存开销。</p><p>这种方法比较适用的场景是，当一个变量占用不了一个数据类型的所有bits时，就可以使用位域定义方法，把一个数据类型中的bits，划分成多个位域，每个位域占一定的bit数。这样一来，一个数据类型的所有bits就可以定义多个变量了，从而也就有效节省了内存开销。</p><p>此外，你可能还会发现，对于type、encoding和lru三个变量来说，它们的数据类型都是unsigned。已知一个unsigned类型是4字节，但这三个变量，是分别占用了一个unsigned类型4字节中的4bits、4bits和24bits。因此，相较于三个变量，每个变量用一个4字节的unsigned类型定义来说，使用位域定义方法可以让三个变量只用4字节，最后就能节省8字节的开销。</p><p>所以，当你在设计开发内存敏感型的软件时，就可以把这种位域定义方法使用起来。</p><p>好，了解了redisObject结构体和它使用的位域定义方法以后，我们再来看嵌入式字符串是如何实现的。</p><h4>嵌入式字符串</h4><p>前面我说过，SDS在保存比较小的字符串时，会使用嵌入式字符串的设计方法，将字符串直接保存在redisObject结构体中。然后在redisObject结构体中，存在一个指向值的指针ptr，而一般来说，这个ptr指针会指向值的数据结构。</p><p>这里我们就以创建一个String类型的值为例，Redis会调用<strong>createStringObject函数</strong>，来创建相应的redisObject，而这个redisObject中的ptr指针，就会指向SDS数据结构，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/23/f6be6811ea3618a8aae047b29b0bfa23.jpg?wh=1909x749\" alt=\"\"></p><p>在Redis源码中，createStringObject函数会根据要创建的字符串的长度，决定具体调用哪个函数来完成创建。</p><p>那么针对这个createStringObject函数来说，它的参数是<strong>字符串ptr</strong>和<strong>字符串长度len</strong>。当len的长度大于OBJ_ENCODING_EMBSTR_SIZE_LIMIT这个宏定义时，createStringObject函数会调用createRawStringObject函数，否则就调用createEmbeddedStringObject函数。而在我们分析的Redis 5.0.8源码版本中，这个OBJ_ENCODING_EMBSTR_SIZE_LIMIT默认定义为44字节。</p><p>这部分代码如下所示：</p><pre><code>#define OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44\nrobj *createStringObject(const char *ptr, size_t len) {\n    //创建嵌入式字符串，字符串长度小于等于44字节\n    if (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)\n        return createEmbeddedStringObject(ptr,len);\n    //创建普通字符串，字符串长度大于44字节\n    else\n        return createRawStringObject(ptr,len);\n}\n</code></pre><p>现在，我们就来分析一下createStringObject函数的源码实现，以此了解大于44字节的普通字符串和小于等于44字节的嵌入式字符串分别是如何创建的。</p><p>首先，对于<strong>createRawStringObject函数</strong>来说，它在创建String类型的值的时候，会调用createObject函数。</p><blockquote>\n<p>补充：createObject函数主要是用来创建Redis的数据对象的。因为Redis的数据对象有很多类型，比如String、List、Hash等，所以在createObject函数的两个参数中，有一个就是用来表示所要创建的数据对象类型，而另一个是指向数据对象的指针。</p>\n</blockquote><p>然后，createRawStringObject函数在调用createObject函数时，会传递OBJ_STRING类型，表示要创建String类型的对象，以及传递指向SDS结构的指针，如以下代码所示。这里<strong>需要注意</strong>的是，指向SDS结构的指针是由sdsnewlen函数返回的，而sdsnewlen函数正是用来创建SDS结构的。</p><pre><code>robj *createRawStringObject(const char *ptr, size_t len) {\n    return createObject(OBJ_STRING, sdsnewlen(ptr,len));\n}\n</code></pre><p>最后，我们再来进一步看下<strong>createObject函数</strong>。这个函数会把参数中传入的、指向SDS结构体的指针直接赋值给redisObject中的ptr，这部分的代码如下所示：</p><pre><code>robj *createObject(int type, void *ptr) {\n    //给redisObject结构体分配空间\n\t  robj *o = zmalloc(sizeof(*o));\n\t  //设置redisObject的类型\n\t  o-&gt;type = type;\n\t  //设置redisObject的编码类型，此处是OBJ_ENCODING_RAW，表示常规的SDS\n\t  o-&gt;encoding = OBJ_ENCODING_RAW;\n\t  //直接将传入的指针赋值给redisObject中的指针。\n    o-&gt;ptr = ptr;\n    o-&gt;refcount = 1;\n    …\n    return o;\n}\n</code></pre><p>为了方便理解普通字符串创建方法，我画了一张图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/ba/92ba6c70129843d7e48a7c074a5737ba.jpg?wh=2000x940\" alt=\"\"></p><p>这也就是说，在创建普通字符串时，Redis需要分别给redisObject和SDS分别分配一次内存，这样就既带来了内存分配开销，同时也会导致内存碎片。因此，当字符串小于等于44字节时，Redis就使用了嵌入式字符串的创建方法，以此减少内存分配和内存碎片。</p><p>而这个创建方法，就是由我们前面提到的<strong>createEmbeddedStringObject函数</strong>来完成的，该函数会使用一块连续的内存空间，来同时保存redisObject和SDS结构。这样一来，内存分配只有一次，而且也避免了内存碎片。</p><p>createEmbeddedStringObject函数的原型定义如下，它的参数就是从createStringObject函数参数中获得的字符串指针ptr，以及字符串长度len。</p><pre><code>robj *createEmbeddedStringObject(const char *ptr, size_t len)\n</code></pre><p>那么下面，我们就来具体看看，createEmbeddedStringObject函数是如何把redisObject和SDS放置在一起的。</p><p>首先，createEmbeddedStringObject函数会<strong>分配一块连续的内存空间</strong>，这块内存空间的大小等于redisObject结构体的大小、SDS结构头sdshdr8的大小和字符串大小的总和，并且再加上1字节。注意，这里最后的1字节是SDS中加在字符串最后的结束字符“\\0”。</p><p>这块连续内存空间的分配情况如以下代码所示：</p><pre><code>robj *o = zmalloc(sizeof(robj)+sizeof(struct sdshdr8)+len+1);\n</code></pre><p>你也可以参考下图，其中展示了这块内存空间的布局。</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/e1/ec4aed7402b4d5310c37a468e5e403e1.jpg?wh=2000x426\" alt=\"\"></p><p>好，那么createEmbeddedStringObject函数在分配了内存空间之后，就会<strong>创建SDS结构的指针sh，并把sh指向这块连续空间中SDS结构头所在的位置</strong>，下面的代码显示了这步操作。其中，o是redisObject结构体的变量，o+1表示将内存地址从变量o开始移动一段距离，而移动的距离等于redisObject这个结构体的大小。</p><pre><code>struct sdshdr8 *sh = (void*)(o+1);\n</code></pre><p>经过这步操作后，sh指向的位置就如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/56/cdf446e96d90ff03db1083a0bd557056.jpg?wh=2000x487\" alt=\"\"></p><p>紧接着，createEmbeddedStringObject函数会<strong>把redisObject中的指针ptr，指向SDS结构中的字符数组</strong>。</p><p>如以下代码所示，其中sh是刚才介绍的指向SDS结构的指针，属于sdshdr8类型。而sh+1表示把内存地址从sh起始地址开始移动一定的大小，移动的距离等于sdshdr8结构体的大小。</p><pre><code>o-&gt;ptr = sh+1;\n</code></pre><p>这步操作完成后，redisObject结构体中的指针ptr的指向位置就如下图所示，它会指向SDS结构头的末尾，同时也是字符数组的起始位置：</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/0d/2e8f1387e6e7b7a6c6b9e431e53dd60d.jpg?wh=2000x539\" alt=\"\"></p><p>最后，createEmbeddedStringObject函数会<strong>把参数中传入的指针ptr指向的字符串，拷贝到SDS结构体中的字符数组，并在数组最后添加结束字符</strong>。这部分代码如下所示：</p><pre><code>memcpy(sh-&gt;buf,ptr,len);\nsh-&gt;buf[len] = '\\0';\n</code></pre><p>下面这张图，也展示了createEmbeddedStringObject创建嵌入式字符串的过程，你可以再整体来看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/72/b3153b3064e8edea801c5b1b4f6d9372.jpg?wh=2000x1125\" alt=\"\"></p><p>总之，你可以记住，Redis会通过设计实现一块连续的内存空间，把redisObject结构体和SDS结构体紧凑地放置在一起。这样一来，对于不超过44字节的字符串来说，就可以避免内存碎片和两次内存分配的开销了。</p><p>而除了嵌入式字符串之外，Redis还设计了压缩列表和整数集合，这也是两种紧凑型的内存数据结构，所以下面我们再来学习下它们的设计思路。</p><h3>压缩列表和整数集合的设计</h3><p>首先你要知道，List、Hash和Sorted Set这三种数据类型，都可以使用压缩列表（ziplist）来保存数据。压缩列表的函数定义和实现代码分别在ziplist.h和ziplist.c中。</p><p>不过，我们在ziplist.h文件中其实根本看不到压缩列表的结构体定义。这是因为压缩列表本身就是一块连续的内存空间，它通过使用不同的编码来保存数据。</p><p>这里为了方便理解压缩列表的设计与实现，我们先来看看它的<strong>创建函数ziplistNew</strong>，如下所示：</p><pre><code>unsigned char *ziplistNew(void) {\n    //初始分配的大小\n    unsigned int bytes = ZIPLIST_HEADER_SIZE+ZIPLIST_END_SIZE;\n    unsigned char *zl = zmalloc(bytes);\n    …\n   //将列表尾设置为ZIP_END\n    zl[bytes-1] = ZIP_END;\n    return zl;\n}\n</code></pre><p>实际上，ziplistNew函数的逻辑很简单，就是创建一块连续的内存空间，大小为ZIPLIST_HEADER_SIZE和ZIPLIST_END_SIZE的总和，然后再把该连续空间的最后一个字节赋值为ZIP_END，表示列表结束。</p><p>另外你要注意的是，在上面代码中定义的三个宏ZIPLIST_HEADER_SIZE、ZIPLIST_END_SIZE和ZIP_END，在ziplist.c中也分别有定义，分别表示ziplist的列表头大小、列表尾大小和列表尾字节内容，如下所示。</p><pre><code>//ziplist的列表头大小，包括2个32 bits整数和1个16bits整数，分别表示压缩列表的总字节数，列表最后一个元素的离列表头的偏移，以及列表中的元素个数\n#define ZIPLIST_HEADER_SIZE     (sizeof(uint32_t)*2+sizeof(uint16_t))\n//ziplist的列表尾大小，包括1个8 bits整数，表示列表结束。\n#define ZIPLIST_END_SIZE        (sizeof(uint8_t))\n//ziplist的列表尾字节内容\n#define ZIP_END 255 \n</code></pre><p>那么，在创建一个新的ziplist后，该列表的内存布局就如下图所示。注意，此时列表中还没有实际的数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/10/a09c893fe8bbafca9ec61b38165f3810.jpg?wh=2000x349\" alt=\"\"></p><p>然后，当我们往ziplist中插入数据时，ziplist就会根据数据是字符串还是整数，以及它们的大小进行不同的编码。这种根据数据大小进行相应编码的设计思想，正是Redis为了节省内存而采用的。</p><p><strong>那么，ziplist是如何进行编码呢？</strong>要学习编码的实现，我们要先了解ziplist中列表项的结构。</p><p>ziplist列表项包括三部分内容，分别是<strong>前一项的长度（prevlen）</strong>、<strong>当前项长度信息的编码结果（encoding）</strong>，以及<strong>当前项的实际数据（data）</strong>。下面的图展示了列表项的结构（图中除列表项之外的内容分别是ziplist内存空间的起始和尾部）。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/d5/864539a743ab9911fde71366463fc8d5.jpg?wh=2000x749\" alt=\"\"></p><p>实际上，所谓的编码技术，就是指<strong>用不同数量的字节来表示保存的信息</strong>。在ziplist中，编码技术主要应用在列表项中的prevlen和encoding这两个元数据上。而当前项的实际数据data，则正常用整数或是字符串来表示。</p><p>所以这里，我们就先来看下<strong>prevlen的编码设计</strong>。ziplist中会包含多个列表项，每个列表项都是紧挨着彼此存放的，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/fc/eb734ed4a3718b28404ba90fdbe1a5fc.jpg?wh=2000x723\" alt=\"\"></p><p>而为了方便查找，每个列表项中都会记录前一项的长度。因为每个列表项的长度不一样，所以如果使用相同的字节大小来记录prevlen，就会造成内存空间浪费。</p><p>我给你举个例子，假设我们统一使用4字节记录prevlen，如果前一个列表项只是一个字符串“redis”，长度为5个字节，那么我们用1个字节（8 bits）就能表示256字节长度（2的8次方等于256）的字符串了。此时，prevlen用4字节记录，其中就有3字节是浪费掉了。</p><p>好，我们再回过头来看，ziplist在对prevlen编码时，会先调用<strong>zipStorePrevEntryLength函数</strong>，用于判断前一个列表项是否小于254字节。如果是的话，那么prevlen就使用1字节表示；否则，zipStorePrevEntryLength函数就调用zipStorePrevEntryLengthLarge函数进一步编码。这部分代码如下所示：</p><pre><code>//判断prevlen的长度是否小于ZIP_BIG_PREVLEN，ZIP_BIG_PREVLEN等于254\nif (len &lt; ZIP_BIG_PREVLEN) {\n   //如果小于254字节，那么返回prevlen为1字节\n   p[0] = len;\n   return 1;\n} else {\n   //否则，调用zipStorePrevEntryLengthLarge进行编码\n   return zipStorePrevEntryLengthLarge(p,len);\n}\n</code></pre><p>也就是说，<strong>zipStorePrevEntryLengthLarge函数</strong>会先将prevlen的第1字节设置为254，然后使用内存拷贝函数memcpy，将前一个列表项的长度值拷贝至prevlen的第2至第5字节。最后，zipStorePrevEntryLengthLarge函数返回prevlen的大小，为5字节。</p><pre><code>if (p != NULL) {\n    //将prevlen的第1字节设置为ZIP_BIG_PREVLEN，即254\n    p[0] = ZIP_BIG_PREVLEN;\n\t//将前一个列表项的长度值拷贝至prevlen的第2至第5字节，其中sizeof(len)的值为4\n    memcpy(p+1,&amp;len,sizeof(len));\n    …\n}\n//返回prevlen的大小，为5字节\nreturn 1+sizeof(len);\n</code></pre><p>好，在了解了prevlen使用1字节和5字节两种编码方式后，我们再来学习下<strong>encoding的编码方法</strong>。</p><p>我们知道，一个列表项的实际数据，既可以是整数也可以是字符串。整数可以是16、32、64等字节长度，同时字符串的长度也可以大小不一。</p><p>所以，ziplist在zipStoreEntryEncoding函数中，针对整数和字符串，就分别使用了不同字节长度的编码结果。下面的代码展示了zipStoreEntryEncoding函数的部分代码，你可以看到当数据是不同长度字符串或是整数时，编码结果的长度len大小不同。</p><pre><code>//默认编码结果是1字节\n\tunsigned char len = 1;\n\t//如果是字符串数据\n\tif (ZIP_IS_STR(encoding)) {\n\t    //字符串长度小于等于63字节（16进制为0x3f）\n        if (rawlen &lt;= 0x3f) {\n            //默认编码结果是1字节\n            …\n        }\n    //字符串长度小于等于16383字节（16进制为0x3fff） \n        else if (rawlen &lt;= 0x3fff) {   \n            //编码结果是2字节\n            len += 1;\n            …\n        }\n    //字符串长度大于16383字节\n \n        else {\n            //编码结果是5字节\n            len += 4;\n            …\n        }\n    } else {\n        /* 如果数据是整数，编码结果是1字节*/\n        if (!p) return len;\n        ...\n    }\n</code></pre><p>简而言之，针对不同长度的数据，使用不同大小的元数据信息（prevlen和encoding），这种方法可以有效地节省内存开销。当然，除了ziplist之外，Redis还设计了一个内存友好的数据结构，这就是<strong>整数集合（intset）</strong>，它是作为底层结构来实现Set数据类型的。</p><p>和SDS嵌入式字符串、ziplist类似，整数集合也是一块连续的内存空间，这一点我们从整数集合的定义中就可以看到。intset.h和intset.c分别包括了整数集合的定义和实现。</p><p>下面的代码展示了intset的结构定义。我们可以看到，整数集合结构体中记录数据的部分，就是一个int8_t类型的整数数组contents。从内存使用的角度来看，整数数组就是一块连续内存空间，所以这样就避免了内存碎片，并提升了内存使用效率。</p><pre><code>typedef struct intset {\n    uint32_t encoding;\n    uint32_t length;\n    int8_t contents[];\n} intset;\n</code></pre><p>好了，到这里，我们就已经了解了Redis针对内存开销所做的数据结构优化，分别是SDS嵌入式字符串、压缩列表和整数集合。</p><p>而除了对数据结构做优化，Redis在数据访问上，也会尽量节省内存开销，接下来我们就一起来学习下。</p><h2>节省内存的数据访问</h2><p>我们知道，在Redis实例运行时，有些数据是会被经常访问的，比如常见的整数，Redis协议中常见的回复信息，包括操作成功（“OK”字符串）、操作失败（ERR），以及常见的报错信息。</p><p>所以，为了避免在内存中反复创建这些经常被访问的数据，Redis就采用了<strong>共享对象</strong>的设计思想。这个设计思想很简单，就是把这些常用数据创建为共享对象，当上层应用需要访问它们时，直接读取就行。</p><p>现在我们就来做个假设。有1000个客户端，都要保存“3”这个整数。如果Redis为每个客户端，都创建了一个值为3的redisObject，那么内存中就会有大量的冗余。而使用了共享对象方法后，Redis在内存中只用保存一个3的redisObject就行，这样就有效节省了内存空间。</p><p>以下代码展示的是server.c文件中，<strong>创建共享对象的函数createSharedObjects</strong>，你可以看下。</p><pre><code>void createSharedObjects(void) {\n   …\n   //常见回复信息\n   shared.ok = createObject(OBJ_STRING,sdsnew(&quot;+OK\\r\\n&quot;));\n   shared.err = createObject(OBJ_STRING,sdsnew(&quot;-ERR\\r\\n&quot;));\n   …\n   //常见报错信息\n shared.nokeyerr = createObject(OBJ_STRING,sdsnew(&quot;-ERR no such key\\r\\n&quot;));\n shared.syntaxerr = createObject(OBJ_STRING,sdsnew(&quot;-ERR syntax error\\r\\n&quot;));\n   //0到9999的整数\n   for (j = 0; j &lt; OBJ_SHARED_INTEGERS; j++) {\n        shared.integers[j] =\n          makeObjectShared(createObject(OBJ_STRING,(void*)(long)j));\n        …\n    }\n   …\n}\n</code></pre><h2>小结</h2><p>降低内存开销，对于Redis这样的内存数据库来说非常重要。今天这节课，我们了解了Redis用于优化内存使用效率的两种方法：内存优化的数据结构设计和节省内存的共享数据访问。</p><p>那么，对于实现数据结构来说，如果想要节省内存，Redis就给我们提供了两个优秀的设计思想：一个是<strong>使用连续的内存空间</strong>，避免内存碎片开销；二个是<strong>针对不同长度的数据，采用不同大小的元数据</strong>，以避免使用统一大小的元数据，造成内存空间的浪费。</p><p>另外在数据访问方面，你也要知道，<strong>使用共享对象</strong>其实可以避免重复创建冗余的数据，从而也可以有效地节省内存空间。不过，共享对象主要适用于<strong>只读场景</strong>，如果一个字符串被反复地修改，就无法被多个请求共享访问了。所以这一点，你在应用时也需要注意一下。</p><h2>每课一问</h2><p>SDS判断是否使用嵌入式字符串的条件是44字节，你知道为什么是44字节吗？</p><p>欢迎在留言区分享你的思考过程，我们一起交流讨论。如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":305366,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1627930062,"is_pvip":true,"discussion_count":9,"race_medal":0,"score":"332340411854","product_id":100084301,"comment_content":"1、要想理解 Redis 数据类型的设计，必须要先了解 redisObject。<br><br>Redis 的 key 是 String 类型，但 value 可以是很多类型（String&#47;List&#47;Hash&#47;Set&#47;ZSet等），所以 Redis 要想存储多种数据类型，就要设计一个通用的对象进行封装，这个对象就是 redisObject。<br><br>&#47;&#47; server.h<br>typedef struct redisObject {<br>    unsigned type:4;<br>    unsigned encoding:4;<br>    unsigned lru:LRU_BITS;<br>    int refcount;<br>    void *ptr;<br>} robj;<br><br>其中，最重要的 2 个字段：<br><br>- type：面向用户的数据类型（String&#47;List&#47;Hash&#47;Set&#47;ZSet等）<br>- encoding：每一种数据类型，可以对应不同的底层数据结构来实现（SDS&#47;ziplist&#47;intset&#47;hashtable&#47;skiplist等）<br><br>例如 String，可以用 embstr（嵌入式字符串，redisObject 和 SDS 一起分配内存），也可以用 rawstr（redisObject 和 SDS 分开存储）实现。<br><br>又或者，当用户写入的是一个「数字」时，底层会转成 long 来存储，节省内存。<br><br>同理，Hash&#47;Set&#47;ZSet 在数据量少时，采用 ziplist 存储，否则就转为 hashtable 来存。<br><br>所以，redisObject 的作用在于：<br><br>1) 为多种数据类型提供统一的表示方式<br>2) 同一种数据类型，底层可以对应不同实现，节省内存<br>3）支持对象共享和引用计数，共享对象存储一份，可多次使用，节省内存<br><br>redisObject 更像是连接「上层数据类型」和「底层数据结构」之间的桥梁。<br><br>2、关于 String 类型的实现，底层对应 3 种数据结构：<br><br>- embstr：小于 44 字节，嵌入式存储，redisObject 和 SDS 一起分配内存，只分配 1 次内存<br>- rawstr：大于 44 字节，redisObject 和 SDS 分开存储，需分配 2 次内存<br>- long：整数存储（小于 10000，使用共享对象池存储，但有个前提：Redis 没有设置淘汰策略，详见 object.c 的 tryObjectEncoding 函数）<br><br>3、ziplist 的特点：<br><br>1) 连续内存存储：每个元素紧凑排列，内存利用率高<br>2) 变长编码：存储数据时，采用变长编码（满足数据长度的前提下，尽可能少分配内存）<br>3）寻找元素需遍历：存放太多元素，性能会下降（适合少量数据存储）<br>4) 级联更新：更新、删除元素，会引发级联更新（因为内存连续，前面数据膨胀&#47;删除了，后面要跟着一起动）<br><br>List、Hash、Set、ZSet 底层都用到了 ziplist。<br><br>4、intset 的特点：<br><br>1) Set 存储如果都是数字，采用 intset 存储<br>2) 变长编码：数字范围不同，intset 会选择 int16&#47;int32&#47;int64 编码（intset.c 的 _intsetValueEncoding 函数）<br>3）有序：intset 在存储时是有序的，这意味着查找一个元素，可使用「二分查找」（intset.c 的 intsetSearch 函数）<br>4) 编码升级&#47;降级：添加、更新、删除元素，数据范围发生变化，会引发编码长度升级或降级<br><br>课后题：SDS 判断是否使用嵌入式字符串的条件是 44 字节，你知道为什么是 44 字节吗？<br><br>嵌入式字符串会把 redisObject 和 SDS 一起分配内存，那在存储时结构是这样的：<br><br>- redisObject：16 个字节<br>- SDS：sdshdr8（3 个字节）+ SDS 字符数组（N 字节 + \\0 结束符 1 个字节）<br><br>Redis 规定嵌入式字符串最大以 64 字节存储，所以 N = 64 - 16(redisObject) - 3(sdshr8) - 1(\\0)， N = 44 字节。","like_count":78,"discussions":[{"author":{"id":1024726,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a2/d6/97370dfc.jpg","nickname":"onno","note":"","ucode":"FB7E829037DA10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544432,"discussion_content":"我看set类型是intset和hash底层，能知道set对ziplist的使用在哪儿吗","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641521212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391243,"discussion_content":"intset没有降级吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630370825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387573,"discussion_content":"大佬，大于10000的整数是怎么存的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628258796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387588,"discussion_content":"正常分配内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628263254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387573,"ip_address":""},"score":387588,"extra":""}]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387104,"discussion_content":"我记得第一季说过 redis 的 key 也是使用 redisObject 实现的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627987447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":387107,"discussion_content":"那说明描述不准确，key是String。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627989772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387104,"ip_address":""},"score":387107,"extra":""},{"author":{"id":1303597,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/2d/acaca6b9.jpg","nickname":"斩弦","note":"","ucode":"CEDCD754284712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387990,"discussion_content":"我按照前文理解是type为string类型的redisobject吧，这样理解对吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628520437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387107,"ip_address":""},"score":387990,"extra":""}]},{"author":{"id":1095445,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","nickname":"董宗磊","note":"","ucode":"D7005A328BC2EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387077,"discussion_content":"老兄，Hash/Set/ZSet 在数据量少时，采用 ziplist 存储，否则就转为 hashtable 来存。\n\n这里 zset 应该是 skiplist，不是hashtable吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627975961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1095445,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","nickname":"董宗磊","note":"","ucode":"D7005A328BC2EE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387078,"discussion_content":"hastable + skiplist。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627976109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387077,"ip_address":""},"score":387078,"extra":""}]}]},{"had_liked":false,"id":305409,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1627962123,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"242146130699","product_id":100084301,"comment_content":"Kaito大佬描述的已经很详细了，44是因为 N = 64 - 16(redisObject) - 3(sdshr8) - 1(\\0)， N = 44 字节。那么为什么是64减呢，为什么不是别的，因为在目前的x86体系下，一般的缓存行大小是64字节，redis为了一次能加载完成，因此采用64自己作为embstr类型(保存redisObject)的最大长度。","like_count":57},{"had_liked":false,"id":305399,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1627960191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61757502335","product_id":100084301,"comment_content":"先回答老师的问题：为什么嵌入式字符串是以44字节为边界？<br><br>在了解这个问题之前，我们来了解一下jemalloc 分配内存机制，jemalloc 为了减少分配的内存空间大小不是2的幂次，在每次分配内存的时候都会返回2的幂次的空间大小，比如我需要分配5字节空间，jemalloc 会返回8字节，15字节会返回16字节。其常见的分配空间大小有： 8, 16, 32, 64, ..., 2kb, 4kb, 8kb。<br><br>但是这种方式也可能会造成，空间的浪费，比如我需要33字节，结果给我64字节，为了解决这个问题jemalloc将内存分配划分为，小内存（small_class）和大内存（large_class）通过不同的内存大小使用不同阶级策略，比如小内存允许存在48字节等方式。<br><br>Redis的嵌入式字符串，头部空间大小（redisObject + sdshdr8 + 1）已经去到了20字节，为了仍然能够满足jemalloc的64字节范围(48的太小了)，所以限制为44字节大小<br><br><br>此外总结一下阅读本文后的理解：<br><br>redis为了充分提高内存利用率，从几个方面入手：<br>\t1、淘汰不在使用的内存空间（后面章节会详细说明）<br>\t2、紧凑型的内存设计<br>\t3、实例内存共享<br><br><br>在为了提高内存利用率，redis做出了以下努力：<br>\t1、设计实现了SDS<br>\t2、设计实现了ziplist<br>\t3、设计实现了intset<br>\t4、搭配redisObject设计了嵌入式字符串<br>\t5、设计了共享对象（共享内存大部是常量实例）<br><br>此外补充一下老师文章中的内容，ziplist虽然能带来内存的节省，但是本质上是时间换空间的结果，当插入或者删除元素的时候由于内存使用率的变化，每次都有可能导致previous_entry_length 等字段需要扩展&#47;缩小字节大小，从而导致一种现象【连锁更新】，就是每次更新或者删除的时候都要取重新修改head中的字节大小，从而带来性能开销，当然这种情况比较极端基本上不会触发。","like_count":15},{"had_liked":false,"id":329487,"user_name":"政由葛氏","can_delete":false,"product_type":"c1","uid":2668029,"ip_address":"","ucode":"8650B30DF0F894","user_header":"https://static001.geekbang.org/account/avatar/00/28/b5/fd/6c200288.jpg","comment_is_top":false,"comment_ctime":1641367528,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18821236712","product_id":100084301,"comment_content":"44字节是因为加上sds首部和redisobject后，大小为64字节，正好是CPU Cache Line的大小，CPU访问内存读取数据时以cache line为单位，一次读取64字节的数据，如果整个结构体起始地址64字节对齐，一次内存IO就可以读取全部数据","like_count":4},{"had_liked":false,"id":305401,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1627960596,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"14512862484","product_id":100084301,"comment_content":"原先embstr的限制长度是39，现在提升到了44，还是归功于sdshdr变成sdshdr8，头减少了5字节。<br>注释：The current limit of 44 is chosen so that the biggest string object. we allocate as EMBSTR will still fit into the 64 byte arena of jemalloc.","like_count":3,"discussions":[{"author":{"id":1135631,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/0f/48ef6a7d.jpg","nickname":"路人","note":"","ucode":"02FC717E0A4FB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403306,"discussion_content":"你看的书是对应的是3.0版本的源代码  老师的代码分析是5.0的 仔细对比下两个版本的代码区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634047428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135631,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/0f/48ef6a7d.jpg","nickname":"路人","note":"","ucode":"02FC717E0A4FB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403305,"discussion_content":"高版本的 sds 加入了 sdshdr 新的设计   SDS 结构中有一个元数据 flags，表示的是 SDS 类型。事实上，SDS 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。这 5 种类型的主要区别就在于，它们数据结构中的字符数组现有长度 len 和分配空间长度 alloc，这两个元数据的数据类型不同。 内存对齐方式不同 带来了 内存空间的优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634047378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1185222,"avatar":"https://static001.geekbang.org/account/avatar/00/12/15/c6/85aa63bf.jpg","nickname":"金金","note":"","ucode":"DA77801974655B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387209,"discussion_content":"你好，我在看redis设计与实现时，介绍embstr的限制长度是39，和老师课上介绍的44不一样，因此我有些疑惑。而你回答中说此项归功于sdshdr变成sdshdr8，头减少了5字节，可否请你更加详细的说明一下，非常感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628052769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305661,"user_name":"阿梵杰～","can_delete":false,"product_type":"c1","uid":1312635,"ip_address":"","ucode":"EBF291933B16E3","user_header":"https://static001.geekbang.org/account/avatar/00/14/07/7b/db7fa67e.jpg","comment_is_top":false,"comment_ctime":1628089523,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5923056819","product_id":100084301,"comment_content":"而 sh+1 表示把内存地址从 sh 起始地址开始移动一定的大小，移动的距离等于 sdshdr8 结构体的大小。<br><br>o-&gt;ptr = sh+1;<br><br>【请教】为啥 +1 移动的距离就等于 sdshdr8 结构体的大小呢？ 有大佬赐教下吗 ？？","like_count":1,"discussions":[{"author":{"id":1312635,"avatar":"https://static001.geekbang.org/account/avatar/00/14/07/7b/db7fa67e.jpg","nickname":"阿梵杰～","note":"","ucode":"EBF291933B16E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387433,"discussion_content":" ~~( ﹁ ﹁ ) ~~~ 没有大佬，自己当大佬 \n\n其实 地址+1 根据指针的类型不同而不同，+1尺度是由此指针指向的元素的大小就决定的，这里相当于移动 sizeof(sdshdr8 *sh)。\n\n其实文中已经说了 “移动的距离等于 sdshdr8 结构体的大小”，只是c语言基础不扎实，所以一下子没读懂 ━(￣ー￣*|||━━","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628166644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387553,"discussion_content":"优秀，我对这个地方也有疑惑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628241281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392618,"discussion_content":"C语言指针的基本玩法～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631073069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355112,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"广东","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1661091957,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661091957","product_id":100084301,"comment_content":"server.c中看到struct sharedObjectsStruct shared;<br>，createSharedObjects函数里只看到对shared变量赋值，在代码里没看到如何将这个变量搞到共享内存里？","like_count":0},{"had_liked":false,"id":355110,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"广东","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1661091608,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661091608","product_id":100084301,"comment_content":"zipStoreEntryEncoding函数里为什么判断rawlen长度0x3f 0x3fff后直接没有判断0x3fffffff直接len+4了？","like_count":0},{"had_liked":false,"id":344313,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1651464959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651464959","product_id":100084301,"comment_content":" ziplist 为啥不直接用这种结构体定义 不更清晰吗？<br>struct  __attribute__ ((__packed__))  zipList {<br>        uint32_t totalBytes;<br>        uint32_t lastItemOffset;<br>        uint16_t itemCount;<br>        char items[0];<br>    };","like_count":0},{"had_liked":false,"id":340488,"user_name":"涛涛","can_delete":false,"product_type":"c1","uid":1039256,"ip_address":"","ucode":"4C47A3FB33EEFE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/98/60ced4c8.jpg","comment_is_top":false,"comment_ctime":1648862498,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1648862498","product_id":100084301,"comment_content":"为什么是prelen ？列表是倒序遍历的吗","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572719,"discussion_content":"可以正序也可以倒序，所以存了上一项的长度和当前项的长度","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652929975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336099,"user_name":"下弦月","can_delete":false,"product_type":"c1","uid":1993910,"ip_address":"","ucode":"F8300DD9338B4F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/6c/b6/c23dc24f.jpg","comment_is_top":false,"comment_ctime":1645927811,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1645927811","product_id":100084301,"comment_content":"intset能存储非整形数据吗，比如说字符串","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572713,"discussion_content":"不能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652927836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334738,"user_name":"Geek_227a72","can_delete":false,"product_type":"c1","uid":2417911,"ip_address":"","ucode":"385B764D9AEAE8","user_header":"","comment_is_top":false,"comment_ctime":1645095343,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1645095343","product_id":100084301,"comment_content":"使用了连续内存空间只是避免了外内存碎片开销吧？","like_count":0},{"had_liked":false,"id":308454,"user_name":"青玄","can_delete":false,"product_type":"c1","uid":1356135,"ip_address":"","ucode":"C61BD9BCEFEF66","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/67/1d3c2f25.jpg","comment_is_top":false,"comment_ctime":1629625551,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1629625551","product_id":100084301,"comment_content":"你好，文中描述的ziplist结构与另一个专栏《redis核心技术与实战》中的11讲描述的不一致？可以说明一下吗？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572731,"discussion_content":"ziplist没有相关结构体的定义，就是一段连续的指针，命名不必太过纠结，这两边都是对的。\n这篇里，encoding表示当前节点的长度编码+长度，第一季把这俩拆开了也就是这里的encoding=encoding+len。\n不过第一季说的len4字节是不对的，而应该是这篇里说的：“当数据是不同长度字符串或是整数时，编码结果的长度 len 大小不同”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652940048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306009,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1628299262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628299262","product_id":100084301,"comment_content":"内存友好可以从以下三个方面考虑：<br><br>1. 内存碎片的优化。redis作为内存大户使用了对内存碎片更友好内存分配器(jemalloc)<br><br>2. 内部数据结构对内存做很多的特殊优化<br>\t1. 使用更利于内存的数据结构，在变大之后又可以自动切换到其他数据结构<br>\t\ta. sds在初始化时使用最小的数据结构随着变大可以扩大到sdshdr8&#47;sdshdr16&#47;sdshdr32&#47;sdshdr64<br>\t\tb. hash&#47;set优先使用zipilst，之后扩展为skiplist<br>\t2. 对小字符符串在结构体中直接内嵌字符串的方式来避免一次内存分配<br>\t3. 尽量使用连续内存(ziplist&#47;intset),首先避免了避免内存碎片，这种数据结构对排序也很友好<br><br>3. 针对公共对象使用sharedObject来避免相同对象的多次内存分配","like_count":0},{"had_liked":false,"id":305955,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1628242044,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1628242044","product_id":100084301,"comment_content":"这篇确实难度有增加，涉及到了内存分配，而且对于 C 语言的功底也是有要求的。<br><br>课后题，44 怎么来的，objet.c 文件中有定义：<br> * The current limit of 44 is chosen so that the biggest string object<br> * we allocate as EMBSTR will still fit into the 64 byte arena of jemalloc. *&#47;<br><br>就是说用 64 字节存放连续的内存空间，这个内存空间包含以下部分：<br>  redisObject<br>  SDS 结构头<br>sdshdr8<br>  字符串大小<br>  1 字节空字符<br><br>而这个字符串大小就是我们要找的 44 字节。<br><br>下面看下怎么算出来的：<br><br>RedisObject 占用 16 字节。由4个部分组成：<br>\ttype 占用 半个字节<br>\tencoding 占用半个字节<br>\tLRU_BITS占用 3 个字节<br>\t*ptr 占用 8个字节<br>\t<br>sdshdr8 占用 3 字节<br>还有一个空字符 占用 1 字节<br><br>64-16-3-1=44","like_count":0,"discussions":[{"author":{"id":1107305,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e5/69/719ec5d0.jpg","nickname":"Jian","note":"","ucode":"17ED4919F22DEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388743,"discussion_content":"看你描述的RedisObject字节数相加=12不是16吧，应该还需加上refcount的4字节","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628932354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305566,"user_name":"董宗磊","can_delete":false,"product_type":"c1","uid":1095445,"ip_address":"","ucode":"D7005A328BC2EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","comment_is_top":false,"comment_ctime":1628048499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628048499","product_id":100084301,"comment_content":"这个专栏的难度感觉有点高了，有些对着代码也看不太懂，更不要说能记住了。老师有什么好的学习思路建议吗？","like_count":0}]}