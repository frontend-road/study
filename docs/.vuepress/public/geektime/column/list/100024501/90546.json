{"id":90546,"title":"16 | 性能监控：衡量 App 质量的那把尺","content":"<p>你好，我是戴铭。</p><p>通常情况下，App 的性能问题虽然不会导致 App不可用，但依然会影响到用户体验。如果这个性能问题不断累积，达到临界点以后，问题就会爆发出来。这时，影响到的就不仅仅是用户了，还有负责App开发的你。</p><p>为了能够主动、高效地发现性能问题，避免App质量进入无人监管的失控状态，我们就需要对App的性能进行监控。目前，对App的性能监控，主要是从线下和线上两个维度展开。</p><p>今天这篇文章，我就从这两个方面来和你聊聊如何做性能监控这个话题。接下来，我们就先看看苹果官方的线下性能监控王牌 Instruments。</p><h2>Instruments</h2><p>关于线下性能监控，苹果公司官方就有一个性能监控工具Instruments。它是一款被集成在 Xcode 里，专门用来在线下进行性能分析的工具。</p><p>Instruments的功能非常强大，比如说Energy Log就是用来监控耗电量的，Leaks就是专门用来监控内存泄露问题的，Network就是用来专门检查网络情况的，Time Profiler就是通过时间采样来分析页面卡顿问题的。</p><p>如下图所示，就是Instruments的各种性能检测工具。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/e9/087ddcf91e5c222804f753389edf2de9.png?wh=1690*3410\" alt=\"\"></p><center><span class=\"reference\">图1 Instruments 提供的各种性能检测工具</span></center><!-- [[[read_end]]] --><p>除了对各种性能问题进行监控外，<strong>最新版本的Instruments 10还有以下两大优势</strong>：</p><ol>\n<li>\n<p>Instruments基于os_signpost 架构，可以支持所有平台。</p>\n</li>\n<li>\n<p>Instruments由于标准界面（Standard UI）和分析核心（Analysis Core）技术，使得我们可以非常方便地进行自定义性能监测工具的开发。当你想要给Instruments内置的工具换个交互界面，或者新创建一个工具的时候，都可以通过自定义工具这个功能来实现。</p>\n</li>\n</ol><p>其实，Instruments的这些优势也不是与生俱来的，都是伴随着移动开发技术的发展而演进来的。就比如说自定义工具的功能吧，这是因为App的规模越来越大，往往还涉及到多个团队合作开发、集成多个公司SDK的情况，所以我们就需要以黑盒的方式来进行性能监控。这样的需求，也就迫使苹果公司要不断地增强Instruments的功能。</p><p>从整体架构来看，Instruments 包括Standard UI 和 Analysis Core 两个组件，它的所有工具都是基于这两个组件开发的。而且，你如果要开发自定义的性能分析工具的话，完全基于这两个组件就可以实现。</p><p><strong>开发一款自定义Instruments工具</strong>，主要包括以下这几个步骤：</p><ol>\n<li>\n<p>在Xcode中，点击File &gt; New &gt; Project；</p>\n</li>\n<li>\n<p>在弹出的Project模板选择界面，将其设置为macOS；</p>\n</li>\n<li>\n<p>选择 Instruments Package，点击后即可开始自定义工具的开发了。如下图所示。</p>\n</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/e5/be/e51d838fda0c79ff0a48566ec87305be.png?wh=1436*1034\" alt=\"\"></p><center><span class=\"reference\">图2 开发自定义Instrument工具</span></center><p>经过上面的三步之后，会在新创建的工程里面生成一个.instrpkg 文件，接下来的开发过程主要就是对这个文件的配置工作了。这些配置工作中最主要的是要完成Standard UI 和 Analysis Core 的配置。</p><p>上面这些内容，就是你在开发一个自定义Instruments工具时，需要完成的编码工作了。可以看到，Instruments 10版本的自定义工具开发还是比较简单的。与此同时，苹果公司还提供了大量的代码片段，帮助你进行个性化的配置。你可以<a href=\"https://help.apple.com/instruments/developer/mac/current/\">点击这个链接</a>，查看官方指南中的详细教程。</p><p>如果你想要更好地进行个性化定制，就还需要再了解Instruments收集和处理数据的机制，也就是<strong>分析核心（Analysis Core ）的工作原理</strong>。</p><p>Analysis Core收集和处理数据的过程，可以大致分为以下这三步：</p><ol>\n<li>\n<p>处理我们配置好的各种数据表，并申请存储空间 store；</p>\n</li>\n<li>\n<p>store去找数据提供者，如果不能直接找到，就会通过 Modeler 接收其他store 的输入信号进行合成；</p>\n</li>\n<li>\n<p>store 获得数据源后，会进行 Binding Solution 工作来优化数据处理过程。</p>\n</li>\n</ol><p>这里需要强调的是，在我们通过store找到的这些数据提供者中，对开发者来说最重要的就是 os_signpost。os_signpost 的主要作用，是让你可以在程序中通过编写代码来获取数据。你可以在工程中的任何地方通过 os_signpost API ，将需要的数据提供给 Analysis Core。</p><p>苹果公司在 WWDC 2018 Session 410 <a href=\"https://developer.apple.com/videos/play/wwdc2018/410\">Creating Custom Instruments</a> 里提供了一个范例：通过 os_signpost API 将图片下载的数据提供给 Analysis Core 进行监控观察。这个示例在 App 的代码如下所示：</p><pre><code>os_signpost(.begin, log: parsinglog, name:&quot;Parsing&quot;, &quot;Parsing started SIZE:%ld&quot;, data.count)\n// Decode the JSON we just downloaded\nlet result = try jsonDecoder.decode(Trail.self, from: data)\nos_signpost(.end, log: parsingLog, name:&quot;Parsing&quot;, &quot;Parsing finished&quot;)\n</code></pre><p>需要注意的是，上面代码中，os_signpost 的 begin 和 end 需要成对出现。</p><p>上面这段代码就是使用 os_signpost 的 API 获取了程序里的数据。接下来，我们再看看 Instruments 是如何通过配置数据表来使用这些数据的。配置的数据表的 XML 设计如下所示：</p><pre><code>&lt;os-signpost-interval-schema&gt;\n&lt;id&gt;json-parse&lt;/id&gt;\n&lt;title&gt;Image Download&lt;/title&gt;\n&lt;subsystem&gt;&quot;com.apple.trailblazer&lt;/subsystem&gt;\n&lt;category&gt;&quot;Networking&lt;/category&gt;\n&lt;name&gt;&quot;Parsing&quot;&lt;/name&gt;\n&lt;start-pattern&gt;\n&lt;message&gt;&quot;Parsing started SIZE:&quot; ?data-size&lt;/message&gt; \n&lt;/start-pattern&gt;\n&lt;column&gt;\n&lt;mnemonic&gt;data-size&lt;/mnemonic&gt;\n&lt;title&gt;JSON Data Size&lt;/title&gt;\n&lt;type&gt;size-in-bytes&lt;/type&gt;\n&lt;expression&gt;?data-size&lt;/expression&gt;\n&lt;/column&gt;\n&lt;/os-signpost-interval-schema&gt;\n</code></pre><p>这里，我们配置数据表是要对数据输出进行可视化配置，从而可以将代码中的数据展示出来。如下图所示，就是对下载图片大小监控的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/b2/cdf512c900bac905b21d28202386b8b2.png?wh=1482*997\" alt=\"\"></p><center><span class=\"reference\">图3 对下载图片大小的监控</span></center><p>通过上面的分析我们可以看到，Instruments 10通过提供 os_signpost API 的方式使得开发者监控自定义的性能指标时更方便，从而解决了在此之前只能通过重新建设工具来完成的问题。并且，Instruments通过 XML 标准数据接口解耦展示和数据分析的思路，也非常值得我们借鉴和学习。</p><p>在线下性能监控中，Instruments可以说是王者，但却对线上监控无能为力。那么，对于线上的性能监控，我们应该怎么实现呢？</p><h2>线上性能监控</h2><p>对于线上性能监控，我们需要先明白两个原则：</p><ol>\n<li>\n<p>监控代码不要侵入到业务代码中；</p>\n</li>\n<li>\n<p>采用性能消耗最小的监控方案。</p>\n</li>\n</ol><p>线上性能监控，主要集中在CPU使用率、FPS的帧率和内存这三个方面。接下来，我们就分别从这三个方面展开讨论吧。</p><h3>CPU使用率的线上监控方法</h3><p>App作为进程运行起来后会有多个线程，每个线程对CPU 的使用率不同。各个线程对CPU使用率的总和，就是当前App对CPU 的使用率。明白了这一点以后，我们也就摸清楚了对CPU使用率进行线上监控的思路。</p><p>在iOS系统中，你可以在 usr/include/mach/thread_info.h 里看到线程基本信息的结构体，其中的cpu_usage 就是 CPU使用率。结构体的完整代码如下所示：</p><pre><code>struct thread_basic_info {\n  time_value_t    user_time;     // 用户运行时长\n  time_value_t    system_time;   // 系统运行时长\n  integer_t       cpu_usage;     // CPU 使用率\n  policy_t        policy;        // 调度策略\n  integer_t       run_state;     // 运行状态\n  integer_t       flags;         // 各种标记\n  integer_t       suspend_count; // 暂停线程的计数\n  integer_t       sleep_time;    // 休眠的时间\n};\n</code></pre><p>因为每个线程都会有这个 thread_basic_info 结构体，所以接下来的事情就好办了，你只需要定时（比如，将定时间隔设置为2s）去遍历每个线程，累加每个线程的 cpu_usage 字段的值，就能够得到当前App所在进程的 CPU 使用率了。实现代码如下：</p><pre><code>+ (integer_t)cpuUsage {\n    thread_act_array_t threads; //int 组成的数组比如 thread[1] = 5635\n    mach_msg_type_number_t threadCount = 0; //mach_msg_type_number_t 是 int 类型\n    const task_t thisTask = mach_task_self();\n    //根据当前 task 获取所有线程\n    kern_return_t kr = task_threads(thisTask, &amp;threads, &amp;threadCount);\n    \n    if (kr != KERN_SUCCESS) {\n        return 0;\n    }\n    \n    integer_t cpuUsage = 0;\n    // 遍历所有线程\n    for (int i = 0; i &lt; threadCount; i++) {\n        \n        thread_info_data_t threadInfo;\n        thread_basic_info_t threadBaseInfo;\n        mach_msg_type_number_t threadInfoCount = THREAD_INFO_MAX;\n        \n        if (thread_info((thread_act_t)threads[i], THREAD_BASIC_INFO, (thread_info_t)threadInfo, &amp;threadInfoCount) == KERN_SUCCESS) {\n            // 获取 CPU 使用率\n            threadBaseInfo = (thread_basic_info_t)threadInfo;\n            if (!(threadBaseInfo-&gt;flags &amp; TH_FLAGS_IDLE)) {\n                cpuUsage += threadBaseInfo-&gt;cpu_usage;\n            }\n        }\n    }\n    assert(vm_deallocate(mach_task_self(), (vm_address_t)threads, threadCount * sizeof(thread_t)) == KERN_SUCCESS);\n    return cpuUsage;\n}\n</code></pre><p>在上面这段代码中，task_threads 方法能够取到当前进程中的线程总数 threadCount 和所有线程的数组 threads。</p><p>接下来，我们就可以通过遍历这个数组来获取单个线程的基本信息。其中，线程基本信息的结构体是 thread_basic_info_t，这个结构体里就包含了我们需要的 CPU 使用率的字段 cpu_usage。然后，我们累加这个字段就能够获取到当前的整体 CPU 使用率。</p><p>到此，我们就实现了对CPU使用率的线上监控。接下来，我们再看看对FPS的线上监控方法吧。</p><h3>FPS 线上监控方法</h3><p>FPS 是指图像连续在显示设备上出现的频率。FPS低，表示App不够流畅，还需要进行优化。</p><p>但是，和前面对CPU使用率和内存使用量的监控不同，iOS系统中没有一个专门的结构体，用来记录与FPS相关的数据。但是，对FPS的监控也可以比较简单的实现：通过注册 CADisplayLink 得到屏幕的同步刷新率，记录每次刷新时间，然后就可以得到 FPS。具体的实现代码如下：</p><pre><code>- (void)start {\n    self.dLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(fpsCount:)];\n    [self.dLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];\n}\n\n// 方法执行帧率和屏幕刷新率保持一致\n- (void)fpsCount:(CADisplayLink *)displayLink {\n    if (lastTimeStamp == 0) {\n        lastTimeStamp = self.dLink.timestamp;\n    } else {\n        total++;\n        // 开始渲染时间与上次渲染时间差值\n        NSTimeInterval useTime = self.dLink.timestamp - lastTimeStamp;\n        if (useTime &lt; 1) return;\n        lastTimeStamp = self.dLink.timestamp;\n        // fps 计算\n        fps = total / useTime; \n        total = 0;\n    }\n}\n</code></pre><h3>内存使用量的线上监控方法</h3><p>通常情况下，我们在获取 iOS 应用内存使用量时，都是使用task_basic_info 里的 resident_size 字段信息。但是，我们发现这样获得的内存使用量和 Instruments 里看到的相差很大。后来，在 2018 WWDC Session 416 <a href=\"https://developer.apple.com/videos/play/wwdc2018/416/\">iOS Memory Deep Dive</a>中，苹果公司介绍说 phys_footprint 才是实际使用的物理内存。</p><p>内存信息存在 task_info.h （完整路径 usr/include/mach/task.info.h）文件的 task_vm_info 结构体中，其中phys_footprint 就是物理内存的使用，而不是驻留内存 resident_size。结构体里和内存相关的代码如下：</p><pre><code>struct task_vm_info {\n  mach_vm_size_t  virtual_size;       // 虚拟内存大小\n  integer_t region_count;             // 内存区域的数量\n  integer_t page_size;\n  mach_vm_size_t  resident_size;      // 驻留内存大小\n  mach_vm_size_t  resident_size_peak; // 驻留内存峰值\n\n  ...\n\n  /* added for rev1 */\n  mach_vm_size_t  phys_footprint;     // 物理内存\n\n  ...\n</code></pre><p>OK，类似于对CPU使用率的监控，我们只要从这个结构体里取出phys_footprint 字段的值，就能够监控到实际物理内存的使用情况了。具体实现代码如下：</p><pre><code>uint64_t memoryUsage() {\n    task_vm_info_data_t vmInfo;\n    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;\n    kern_return_t result = task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &amp;vmInfo, &amp;count);\n    if (result != KERN_SUCCESS)\n        return 0;\n    return vmInfo.phys_footprint;\n}\n</code></pre><p>从以上三个线上性能监控方案可以看出，它们的代码和业务逻辑是完全解耦的，监控时基本都是直接获取系统本身提供的数据，没有额外的计算量，因此对 App 本身的性能影响也非常小，满足了我们要考虑的两个原则。</p><h2>小结</h2><p>在今天这篇文章中，我和你分享了如何通过线下和线上监控，去掌控App的性能。</p><p>关于线下的性能监控，我们可以使用苹果官方的Instruments 去解决性能监控的问题。同时，我还和你分享了如何使用 Instruments 的 os_signpost API 来完成自定义的性能数据监控工具开发。</p><p>关于线上的性能监控，我们需要在不影响性能的前提下，去监控线上的性能问题。在这一部分内容中，我主要和你介绍了对CPU使用率、内存使用量和FPS的线上监控方案。</p><p>最后，我还要再和你提一个建议。作为一名 iOS 开发者，与其一起开始到处去寻找各种解决方案，不如先摸透苹果公司自己的库和工具，这里面的设计思想和演进包含有大量可以吸取和学习的知识。掌握好了这些知识，你也就能够开发出适合自己团队的工具了。这，也正是我没有在这篇文章中和你介绍第三方线上性能监控工具的原因。</p><h2>课后小作业</h2><p>Instruments 可以自定义性能数据的监控，那么接下来就请你看下，你现在工程中有哪些数据是需要监控的，然后新建一个自定义 Instruments 工具将其监控起来吧。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"15 | 日志监控：怎样获取 App 中的全量日志？","id":90185},"right":{"article_title":"17 | 远超你想象的多线程的那些坑","id":90870}},"comments":[{"had_liked":false,"id":86939,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1555484563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83159863187","product_id":100024501,"comment_content":"CADisplayLink:与屏幕刷新频率的计时器同步，每次屏幕刷新都会调用一次，所以可以获取到一秒钟屏幕刷新的次数。<br>线下监控：Instrument，一个工具检测所有。<br>线上监控：CPU使用直接获取所有线程的cpu_usage计算综合，内存消耗使用task_basic_info的phys_footprint，FPS用CADisplayLink。","like_count":20},{"had_liked":false,"id":98977,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1559122868,"is_pvip":false,"replies":[{"id":"38605","content":"推荐的话，做的好的是蚂蚁的 mPaaS","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387856,"ip_address":"","comment_id":98977,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18738992052","product_id":100024501,"comment_content":"要不还是介绍下第三方的监控平台，小公司，监控后台都没人做啊","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451915,"discussion_content":"推荐的话，做的好的是蚂蚁的 mPaaS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86753,"user_name":"小阳哥","can_delete":false,"product_type":"c1","uid":1146840,"ip_address":"","ucode":"58848E5B54F734","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/d8/36512951.jpg","comment_is_top":false,"comment_ctime":1555457175,"is_pvip":true,"replies":[{"id":"31693","content":"不会的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555863392,"ip_address":"","comment_id":86753,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18735326359","product_id":100024501,"comment_content":"每2s去遍历线程 这个不会有问题吗？","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447153,"discussion_content":"不会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555863392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1459863,"avatar":"https://static001.geekbang.org/account/avatar/00/16/46/97/ddd4b05f.jpg","nickname":"爱上我们的微笑","note":"","ucode":"40CDB7AB0991CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":531175,"discussion_content":"哈哈哈😄这么久才回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637244989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":447153,"ip_address":""},"score":531175,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":86402,"user_name":"Onion","can_delete":false,"product_type":"c1","uid":1361456,"ip_address":"","ucode":"C36A7492AFA245","user_header":"https://static001.geekbang.org/account/avatar/00/14/c6/30/55a03b70.jpg","comment_is_top":false,"comment_ctime":1555375637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440277525","product_id":100024501,"comment_content":"监控起来如何分析，有实践方案嘛","like_count":3},{"had_liked":false,"id":87210,"user_name":"一代真龙","can_delete":false,"product_type":"c1","uid":1454738,"ip_address":"","ucode":"9B5900D62E0C64","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/92/78e66924.jpg","comment_is_top":false,"comment_ctime":1555548499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145483091","product_id":100024501,"comment_content":"线上电量监控是监控不了的。现有的方案都是不可行的，没有参考价值。","like_count":2},{"had_liked":false,"id":86941,"user_name":"李二柱子","can_delete":false,"product_type":"c1","uid":1078186,"ip_address":"","ucode":"4A58F2C473642A","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/aa/442e9eb1.jpg","comment_is_top":false,"comment_ctime":1555485683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145420275","product_id":100024501,"comment_content":"对于性能的监控有没有衡量标准，如何衡量优劣？","like_count":3},{"had_liked":false,"id":210230,"user_name":"CoderY","can_delete":false,"product_type":"c1","uid":1251205,"ip_address":"","ucode":"8F50E7F7EF6A2E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PjTbTVicNs9wpgmmpxvSK6orvN2E4wOmQ1ukSNMd5icoFEulcA21QaQvtp6ADvgOicnibPLZQop91ISU6cyQmfKJwg/132","comment_is_top":false,"comment_ctime":1587701245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882668541","product_id":100024501,"comment_content":"文中提到“集成多个公司 SDK 的情况，所以我们就需要以黑盒的方式来进行性能监控”，请问大佬这块具体怎么监控？","like_count":1},{"had_liked":false,"id":125287,"user_name":"张玉棠","can_delete":false,"product_type":"c1","uid":1203564,"ip_address":"","ucode":"40BF9506955A0B","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6c/40bb7d92.jpg","comment_is_top":false,"comment_ctime":1566138549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861105845","product_id":100024501,"comment_content":"time profile 工具再最新的xcode版本上收集不到数据，作者你有遇到过吗？","like_count":1},{"had_liked":false,"id":99222,"user_name":"小城","can_delete":false,"product_type":"c1","uid":1506522,"ip_address":"","ucode":"AB9B38617F64FB","user_header":"https://static001.geekbang.org/account/avatar/00/16/fc/da/1f1254e6.jpg","comment_is_top":false,"comment_ctime":1559179080,"is_pvip":false,"replies":[{"id":"38604","content":"是的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387775,"ip_address":"","comment_id":99222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854146376","product_id":100024501,"comment_content":"内存线上监控，不是针对多个线程，而是直接从结构体里面取出phys_footprint就可以？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452025,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91418,"user_name":"异界","can_delete":false,"product_type":"c1","uid":1467312,"ip_address":"","ucode":"90D4DF44C81B7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/b0/b91fc19b.jpg","comment_is_top":false,"comment_ctime":1557033087,"is_pvip":false,"replies":[{"id":"32722","content":"不会","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1557052318,"ip_address":"","comment_id":91418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852000383","product_id":100024501,"comment_content":"图片名字，使用中文，会影响性能吗（项目中90％以上使用的中文命名图片）？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448912,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557052318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86458,"user_name":"drq","can_delete":false,"product_type":"c1","uid":1472758,"ip_address":"","ucode":"824FC464184FAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/78/f6/231cb5cd.jpg","comment_is_top":false,"comment_ctime":1555379270,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5850346566","product_id":100024501,"comment_content":"app耗电量怎么监控呢","like_count":1,"discussions":[{"author":{"id":1001918,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/be/970590a0.jpg","nickname":"故胤道长","note":"","ucode":"CC42C4CD543833","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180943,"discussion_content":"Xcode Debug Gauge有high level的overview，也可以用 energy log instrument 分析","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1582324791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1456751,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3a/6f/6ae4bcfd.jpg","nickname":"麦子","note":"","ucode":"160838EC0CED4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001918,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/be/970590a0.jpg","nickname":"故胤道长","note":"","ucode":"CC42C4CD543833","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210345,"discussion_content":"大神潜伏在评论区😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584717974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180943,"ip_address":""},"score":210345,"extra":""}]},{"author":{"id":1635693,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f5/6d/9cdebb65.jpg","nickname":"王齐","note":"","ucode":"3EAD86A3448E2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332932,"discussion_content":"https://perfdog.qq.com/ 腾讯的性能狗也不错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607397286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309383,"user_name":"...","can_delete":false,"product_type":"c1","uid":1020427,"ip_address":"","ucode":"35C881D8AA1C5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/0b/2ccf7908.jpg","comment_is_top":false,"comment_ctime":1630078062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630078062","product_id":100024501,"comment_content":"内存泄露线上监控如何做呢","like_count":0},{"had_liked":false,"id":119691,"user_name":"Yest","can_delete":false,"product_type":"c1","uid":1409087,"ip_address":"","ucode":"1E82B6355890C0","user_header":"https://static001.geekbang.org/account/avatar/00/15/80/3f/bc65b009.jpg","comment_is_top":false,"comment_ctime":1564653682,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1564653682","product_id":100024501,"comment_content":"戴老师。cpu_usage是千分比吗？我打印的最高是1000<br>(lldb) p threadBaseInfo-&gt;cpu_usage<br>(integer_t) $10 = 965<br><br>看原文解释 是百分比啊<br>integer_t       cpu_usage;      &#47;* scaled cpu usage percentage *&#47;","like_count":0,"discussions":[{"author":{"id":1857126,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZmm5lWL0PlY7P8SRw7iaB9An0MbLCAP8jS4t2yZd9v4pUtP49UCHfWbUFiaaSeQaRYPMXVo5pE1Jg/132","nickname":"度木","note":"","ucode":"473334134C6682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413718,"discussion_content":"thread_info.h里面有个TH_USAGE_SCALE， 最后的cpu_usage需要除以这个scale","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636547752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471806,"avatar":"https://static001.geekbang.org/account/avatar/00/16/75/3e/71b16443.jpg","nickname":"Struggle","note":"","ucode":"C769D8FFD9C1B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287758,"discussion_content":"用模拟器跑的，直接看模拟器的cpu 使用率，好像是除以10才对的上？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593529158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94379,"user_name":"毛成方","can_delete":false,"product_type":"c1","uid":1459289,"ip_address":"","ucode":"DFBF3D464D8D7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","comment_is_top":false,"comment_ctime":1557798114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557798114","product_id":100024501,"comment_content":"threadBaseInfo = (thread_basic_info_data_t)threadInfo;<br>xcode8.2 无法强制转换<br>请问得更新xcode？","like_count":0},{"had_liked":false,"id":92618,"user_name":"月落泉","can_delete":false,"product_type":"c1","uid":1458702,"ip_address":"","ucode":"FC03912F1EBB83","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/0e/21b8025f.jpg","comment_is_top":false,"comment_ctime":1557306846,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1557306846","product_id":100024501,"comment_content":"mach_task_self()这个函数报错Implicit declaration of function &#39;mach_task_self&#39; is invalid in C99，如何处理","like_count":0,"discussions":[{"author":{"id":1741557,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/92/f5/77fa70bb.jpg","nickname":"谢立颖","note":"","ucode":"10EB71210C01B5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48709,"discussion_content":"#include <mach/mach_init.h>","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573520901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046550,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxY3fx9Cs0BCxyuOqdlMY8UFZul9TEVp1rAKD16z3VHncBpfHAficsdHrxN6wUqH4xWFiby31iaZWA/132","nickname":"guoran","note":"","ucode":"D16D9F97219D9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294205,"discussion_content":"楼上说对，不过直接引入<mach/mach.h>会更方便，里面含有你所用到的所有相关头文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595828028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89205,"user_name":"政","can_delete":false,"product_type":"c1","uid":1234640,"ip_address":"","ucode":"F17443038872DE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/d0/259e7ce3.jpg","comment_is_top":false,"comment_ctime":1556106575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556106575","product_id":100024501,"comment_content":"有个问题，就是用instrument的leak功能的时候，app运行起来会比较卡。不知道自定义的instrument会不会也有这个问题。","like_count":0},{"had_liked":false,"id":86956,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1555487010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555487010","product_id":100024501,"comment_content":"Xcode 还有这么牛的功能","like_count":0},{"had_liked":false,"id":86943,"user_name":"国朋","can_delete":false,"product_type":"c1","uid":1220641,"ip_address":"","ucode":"B6EA8785E495C4","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/21/b20b2f44.jpg","comment_is_top":false,"comment_ctime":1555485731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555485731","product_id":100024501,"comment_content":"老哥，询问个问题，APP第一次安装，安装后会提示网络权限，提示权限时APP有什么活动吗，触发网络访问的代码后面的程序是出于等待状态，还是已经执行了呢","like_count":0}]}