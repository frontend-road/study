{"id":111289,"title":"29 | 实战（四）：怎么设计一个“画图”程序？","content":"<p>你好，我是七牛云许式伟。</p><p>今天继续我们的画图程序。上一讲完成后，我们的画图程序不只是功能实用，并且还支持了离线编辑与存储。</p><p>今天我们开始考虑服务端。</p><p>我们从哪里开始？</p><p>第一步，我们要考虑的是网络协议。</p><h2>网络协议</h2><p>为了简化，我们暂时不考虑多租户带授权的场景。后面我们在下一章服务端开发篇会继续实战这个画图程序，将其改造为多租户。</p><p>在浏览器中，一个浏览器的页面编辑的是一个文档，不同页面编辑不同的文档。所以在我们的浏览器端的 dom.js 里面，大家可以看到，我们的 DOM 模型是单文档的设计。</p><p>但显然，服务端和浏览器端这一点是不同的，就算没有多租户，但是多文档是跑不了的。我们不妨把 QPaint 的文档叫drawing，如此服务端的功能基本上是以下这些：</p><ul>\n<li>创建新 drawing 文档；</li>\n<li>获取 drawing 文档；</li>\n<li>删除 drawing 文档；</li>\n<li>在 drawing 文档中创建一个新 shape；</li>\n<li>取 drawing 文档中的一个 shape；</li>\n<li>修改 drawing 文档中的一个 shape，包括移动位置、修改图形样式；</li>\n<li>修改 drawing 文档中的一个 shape 的 zorder 次序（浏览器端未实现）；</li>\n<li>删除 drawing 文档的一个 shape。</li>\n</ul><p>完整的网络协议见下表：</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/c3/1b174cea94808537e21c5328ad2b8bc3.png?wh=760*1115\" alt=\"\"></p><p>其中<code>&lt;Shape&gt;</code>是这样的：</p><!-- [[[read_end]]] --><pre><code>&quot;path&quot;: {\n    &quot;points&quot;: [\n        {&quot;x&quot;: &lt;X&gt;, &quot;y&quot;: &lt;Y&gt;},\n        ...\n    ],\n    &quot;close&quot;: &lt;Boolean&gt;,\n    &quot;style&quot;: &lt;ShapeStyle&gt;\n}\n</code></pre><p>或:</p><pre><code>&quot;line&quot;: {\n    &quot;pt1&quot;: {&quot;x&quot;: &lt;X&gt;, &quot;y&quot;: &lt;Y&gt;},\n    &quot;pt2&quot;: {&quot;x&quot;: &lt;X&gt;, &quot;y&quot;: &lt;Y&gt;},\n    &quot;style&quot;: &lt;ShapeStyle&gt;\n}\n</code></pre><p>或：</p><pre><code>&quot;rect&quot;: {\n    &quot;x&quot;: &lt;X&gt;,\n    &quot;y&quot;: &lt;Y&gt;,\n    &quot;width&quot;: &lt;Width&gt;,\n    &quot;height&quot;: &lt;Height&gt;,\n    &quot;style&quot;: &lt;ShapeStyle&gt;\n}\n</code></pre><p>或：</p><pre><code>&quot;ellipse&quot;: {\n    &quot;x&quot;: &lt;X&gt;,\n    &quot;y&quot;: &lt;Y&gt;,\n    &quot;radiusX&quot;: &lt;RadiusX&gt;,\n    &quot;radiusY&quot;: &lt;RadiusY&gt;,\n    &quot;style&quot;: &lt;ShapeStyle&gt;\n}\n</code></pre><p>其中<code>&lt;ShapeStyle&gt;</code>是这样的：</p><pre><code>{\n    &quot;lineWidth&quot;: &lt;Width&gt;,  // 线宽\n    &quot;lineColor&quot;: &lt;Color&gt;,  // 线型颜色\n    &quot;fillColor&quot;: &lt;Color&gt;   // 填充色\n}\n</code></pre><p>其中<code>&lt;ZorderOperation&gt;</code>可能的值为：</p><ul>\n<li>\"top\": 到最顶</li>\n<li>\"bottom\": 到最底</li>\n<li>\"front\": 往前一层</li>\n<li>\"back\": 往后一层</li>\n</ul><p>整体来说，这套网络协议比较直白体现了其对应的功能含义。我们遵循这样一套网络协议定义的范式：</p><ul>\n<li>创建对象：POST /objects</li>\n<li>修改对象：POST /objects/<code>&lt;ObjectID&gt;</code></li>\n<li>删除对象：DELETE /objects/<code>&lt;ObjectID&gt;</code></li>\n<li>查询对象：GET /objects/<code>&lt;ObjectID&gt;</code></li>\n</ul><p>其实还有一个列出对象，只不过我们这里没有用到：</p><ul>\n<li>列出所有对象：GET /objects</li>\n<li>列出符合条件的对象：GET /objects?key=value</li>\n</ul><p>另外，有一个在网络设计时需要特别注意的点是：对重试的友好性。</p><p>为什么我们必须要充分考虑重试的友好性？因为网络是不稳定的。这意味着，在发生一次网络请求失败时，在一些场景下你不一定能确定请求的真实状态。</p><p>在小概率的情况下，有可能服务端已经执行了预期的操作，只不过返还给客户端的时候网络出现了问题。在重试时你以为只是重试，但实际上是同一个操作执行了两遍。</p><p>所谓重试的友好性，是指同一个操作执行两遍，其执行结果和只执行一遍一致。</p><p>只读操作，比如查询对象或列出对象，毫无疑问显然是重试友好的。</p><p>创建对象（POST /objects）往往容易被实现为重试不友好的，执行两遍会创建出两个对象来。我们对比一下这里创建新drawing和创建新shape的差别：</p><pre><code>POST /drawings\n</code></pre><pre><code>POST /drawings/&lt;DrawingID&gt;/shapes\nContent-Type: application/json\n\n{\n    &quot;id&quot;: &lt;ShapeID&gt;,\n    &lt;Shape&gt;\n}\n</code></pre><p>可以看到，创建新 shape 时传入了 ShapeID，也就是说是由客户（浏览器端）分配 ShapeID。这样做的好处是如果上一次服务端已经执行过该对象的创建，可以返回对象已经存在的错误（我们用 status = 409 冲突来表示）。</p><p>而创建新 drawing 并没有传入什么参数，所以不会发生什么冲突，重复调用就会创建两个新 drawing 出来。</p><p>通过以上分析，我们可以认为：创建新 shape 是重试友好的，而创建 drawing 不是重试友好的。那么怎么解决这个问题？有这么几种可能：</p><ul>\n<li>客户端传 id（和上面创建新 shape 一样）；</li>\n<li>客户端传 name；</li>\n<li>客户端传 uuid。</li>\n</ul><p>当然这三种方式本质上的差别并不大。比如客户端传 name，如果后面其他操作引用时用的也是 name，那么本质上这个 name 就是 id。</p><p>传 uuid 可以认为是一种常规重试友好的改造手法。这里 uuid 并没有实际含义，你可以理解为它是 drawing 的唯一序列号，也可以理解为网络请求的唯一序列号。当然这两种不同理解的网络协议表现上会略有不同，如下：</p><pre><code>POST /drawings\nContent-Type: application/json\n\n{\n    &quot;uuid&quot;: &lt;DrawingUUID&gt;\n}\n</code></pre><pre><code>POST /drawings\nContent-Type: application/json\nX-Req-Uuid: &lt;RequestUUID&gt;\n</code></pre><p>修改对象和删除对象，往往是比较容易做到重试友好。但这并不绝对，比如我们这个例子中 “修改shape的顺序”，它的网络协议是这样的：</p><pre><code>POST /drawings/&lt;DrawingID&gt;/shapes/&lt;ShapeID&gt;\nContent-Type: application/json\n\n{\n    &quot;zorder&quot;: &lt;ZorderOperation&gt;\n}\n</code></pre><p>其中<code>&lt;ZorderOperation&gt;</code>可能的值为：</p><ul>\n<li>\"top\": 到最顶</li>\n<li>\"bottom\": 到最底</li>\n<li>\"front\": 往前一层</li>\n<li>\"back\": 往后一层</li>\n</ul><p>在 ZorderOperation 为 \"front\" 或 \"back\" 时，重复执行两遍就会导致 shape 往前（或往后）移动 2 层。</p><p>怎么调整？</p><p>有两个办法。一个方法是把修改操作用绝对值表示，而不是相对值。比如 ZorderOperation 为 \"front\" 或 \"back\" 是相对值，但是 Zorder = 5 是绝对值。</p><p>另一个方法是通用的，就是用请求的序列号（RequestUUID），这个方法在上面创建新 drawing 已经用过了，这里还可以用：</p><pre><code>POST /drawings/&lt;DrawingID&gt;/shapes/&lt;ShapeID&gt;\nContent-Type: application/json\nX-Req-Uuid: &lt;RequestUUID&gt;\n\n{\n    &quot;zorder&quot;: &lt;ZorderOperation&gt;\n}\n</code></pre><p>当然用请求序列号是有额外代价的，因为这意味着服务端要把最近执行成功的所有的请求序列号（RequestUUID）记录下来，在收到带请求序列号的请求时，检查该序列号的请求是否已经成功执行，已经执行过就报冲突。</p><p>在网络协议的设计上，还有一个业务相关的细节值得一提。</p><p>细心的你可能留意到，我们 Shape 的 json 表示，在网络协议和 localStorage 存储的格式并不同。在网络协议中是：</p><pre><code>{\n    &quot;id&quot;: &lt;ShapeID&gt;,\n    &quot;path&quot;: {\n        &quot;points&quot;: [\n            {&quot;x&quot;: &lt;X&gt;, &quot;y&quot;: &lt;Y&gt;},\n            ...\n        ],\n        &quot;close&quot;: &lt;Boolean&gt;,\n        &quot;style&quot;: &lt;ShapeStyle&gt;\n    }  \n}\n</code></pre><p>而在 localStorage 中的是：</p><pre><code>{\n    &quot;type&quot;: &quot;path&quot;,\n    &quot;id&quot;: &lt;ShapeID&gt;,\n    &quot;points&quot;: [\n        {&quot;x&quot;: &lt;X&gt;, &quot;y&quot;: &lt;Y&gt;},\n        ...\n    ],\n    &quot;close&quot;: &lt;Boolean&gt;,\n    &quot;style&quot;: &lt;ShapeStyle&gt;\n}\n</code></pre><p>从结构化数据的 Schema 设计角度，localStorage 中的实现是无 Schema 模式，过于随意。这是因为 localStorage 只是本地自己用的缓存，影响范围比较小，故而我们选择了怎么方便怎么来的模式。而网络协议未来有可能作为业务的开放 API ，需要严谨对待。</p><h2>版本升级</h2><p>另外，这个画图程序毕竟只是一个 DEMO 程序，所以还有一些常见网络协议的问题并没有在考虑范围之内。</p><p>比如从更长远的角度，网络协议往往还涉及协议的版本管理问题。网络协议是一组开放 API 接口，一旦放出去了就很难收回，需要考虑协议的兼容。</p><p>为了便于未来协议升级的边界，很多网络协议都会带上版本号。比如：</p><pre><code>POST /v1/objects\nPOST /v1/objects/&lt;ObjectID&gt;\nDELETE /v1/objects/&lt;ObjectID&gt;\nGET /v1/objects/&lt;ObjectID&gt;\nGET /v1/objects?key=value\n</code></pre><p>在协议发生了不兼容的变更时，我们会倾向于升级版本，比如升为 v2 版本：</p><pre><code>POST /v2/objects\nPOST /v2/objects/&lt;ObjectID&gt;\nDELETE /v2/objects/&lt;ObjectID&gt;\nGET /v2/objects/&lt;ObjectID&gt;\nGET /v2/objects?key=value\n</code></pre><p>这样做有这么一些好处：</p><ul>\n<li>可以逐步下线旧版本的流量，一段时间内让两个版本的协议并存；</li>\n<li>可以新老版本的业务服务器相互独立，前端由 nginx 或其他的应用网关来分派。</li>\n</ul><h2>第一个实现版本</h2><p>聊完了网络协议，我们就要开始考虑服务端的实现。在选择第一个实现版本怎么做时，有这样几种可能性。</p><p>第一种，当然是常规的憋大招模式。直接做业务架构设计、架构评审、编码、测试，并最后上线。</p><p>第二种，是做一个 Mock 版本的服务端程序。</p><p>两者有什么区别？</p><p>区别在于，服务端程序从架构设计角度，就算是非业务相关的通用型问题也是很多的，比如高可靠和高可用。</p><p>高可靠是指数据不能丢。就算服务器的硬盘坏了，数据也不能丢。这还没什么，很多服务甚至要求，在机房层面出现大面积事故比如地震，也不能出现数据丢失。</p><p>高可用是指服务不能存在单点故障。任何一台甚至几台服务器停机了，用户还要能够正常访问。一些服务比如支付宝，甚至要求做到跨机房的异地双活。在一个机房故障时，整个业务不能出现中断。</p><p>在没有好的基础设施下，要做好一个好的服务端程序并不那么容易。所以另一个选择是先做一个 Mock 版本的服务端程序。</p><p>这不是增加了工作量？有什么意义？</p><p>其一，是让团队工作并行。不同团队协作的基础就是网络协议。一个快速被打造的 Mock 的最小化版本服务端，可以让前端不用等待后端。而后端则可以非常便捷地自主针对网络协议进行单元测试，做很高的测试覆盖率以保证质量，进度不受前端影响。</p><p>其二 ，是让业务逻辑最快被串联，快速验证网络协议的有效性。中途如果发现网络协议不满足业务需求，可以及时调整过来。</p><p>所以我们第一版的服务端程序，是 Mock 的版本。Mock 版本不必考虑太多服务端领域的问题，它的核心价值就是串联业务。所以 Mock 版本的服务器甚至不需要依赖数据库，直接所有的业务逻辑基于内存中的数据结构就行。</p><p>代码如下：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/tree/v29/paintdom\">https://github.com/qiniu/qpaint/tree/v29/paintdom</a></li>\n</ul><p>正式版画图程序的服务端，我们会在后面服务端开发一章的实战中继续去完成。</p><p>从架构角度来说，这个 paintdom 程序分为两层：Model 层和 Controller 层。</p><p>我们首先看一下 Model 层。它的源代码是：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v29/paintdom/shape.go\">paintdom/shape.go</a></li>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v29/paintdom/drawing.go\">paintdom/drawing.go</a></li>\n</ul><p>Model 层与网络无关，有的只是纯纯粹粹的业务核心逻辑。它实现了一个多文档版本的画图程序，逻辑结构也是一棵 DOM 树，只不过比浏览器端多了一层：</p><ul>\n<li>Document =&gt; Drawing =&gt; Shape =&gt; ShapeStyle</li>\n</ul><p>浏览器端的 QPaintDoc，对应的是这里的 Drawing，而不是这里的 Document。</p><p>我们再来看一下 Controller 层。它的源代码是：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v29/paintdom/service.go\">paintdom/service.go</a></li>\n</ul><p>Controller 层实现的是网络协议。你可能觉得奇怪，我为什么会把网络协议层看作 Controller 层，那么 MVC 中 View 层去了哪里。</p><p>首先服务端程序大部分情况下并不需要显示模块，所以不存在 View 层。网络协议层为什么可以看作 Controller 层，是因为它负责接受用户输入。只不过用户输入不是我们日常理解的用户交互，而是来自某个自动化控制（Automation）程序的 API 请求。</p><p>虽然这个 paintdom 程序的实现，有一些 Go 语言相关的知识点是挺值得讲的，尤其是网络协议实现相关的部分。不过我这里就不做展开了，感兴趣的同学可以自行学习一下 Go 语言。</p><p>总体来说，业务逻辑相关的部分理解起来相对容易，我们这里不再赘述。</p><h2>结语</h2><p>今天我们重点讨论了 “画图” 程序的网络协议，给出了常规网络协议设计上的一些考量点。网络协议的地位非常关键，它是一个 B/S 或 C/S 程序前后端耦合的使用界面，因而也是影响团队开发效率的关键点。</p><p>如何及早稳定网络协议？如何及早让前端程序员可以与服务端联调？这些都是我们应该重点关注的地方。</p><p>定义清楚网络协议后，我们给出了满足我们定义的网络协议的第一个服务端实现版本 paintdom 程序，用于串联业务逻辑。这个实现版本是 Mock 程序，它只关注业务逻辑，不关心服务端程序的固有的高可靠、高可用等需求。后续在下一章服务端开发中，我们会继续迭代它。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们会把这个 paintdom 服务端程序，和我们的 paintweb 画图程序串联起来。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":119341,"user_name":"且看海棠笑一回","can_delete":false,"product_type":"c1","uid":1461404,"ip_address":"","ucode":"B5DD9C590253B8","user_header":"https://static001.geekbang.org/account/avatar/00/16/4c/9c/9d0d4692.jpg","comment_is_top":false,"comment_ctime":1564565791,"is_pvip":false,"replies":[{"id":"43815","content":"一起加油！下一讲结束实战，不过也是比较难的一块硬骨头。我后面会反复扳开来谈这个案例。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564586545,"ip_address":"","comment_id":119341,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57399140639","product_id":100025201,"comment_content":"进入“画图”程序实战后，文章从一开始的高屋建瓴逐渐进入到架构具体的繁枝细节，每一章的内容都需要很长时间才能消化，也意识到自己在宏观架构层面代码应该如何有效组织的能力非常欠缺。<br>留言区和收藏数相比前面章节也少了许多，不知道到底有多少同学可以坚持到这里，架构之路任重道远，许老师加油，大家一起加油！","like_count":13,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460858,"discussion_content":"一起加油！下一讲结束实战，不过也是比较难的一块硬骨头。我后面会反复扳开来谈这个案例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564586545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046424,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f7/98/e39aad6b.jpg","nickname":"小林枫","note":"","ucode":"F811592BE1E27E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344535,"discussion_content":"只能慢慢理解了,毕竟大部都是普通人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611491303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118854,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1564452823,"is_pvip":false,"replies":[{"id":"43580","content":"我只认这种，相对优雅","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564454972,"ip_address":"","comment_id":118854,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27334256599","product_id":100025201,"comment_content":"老师，我对你说的那个“网络协议的版本升级问题”很有兴趣，虽然你只提到了其中一种，就是在url中加版本号v1，v2这种形式，但是我看过不少文章，有不少文章指责在url上添加版本号是非常典型的破坏REST语义的行为，对网络协议的版本升级问题，似乎没有一个特别好的方案，无论是写在url上，还是写在queryString上，都有各自的问题。这个问题能否深入探讨一下","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460616,"discussion_content":"我只认这种，相对优雅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564454972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210900,"discussion_content":"加到 header？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584789682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332463,"avatar":"https://static001.geekbang.org/account/avatar/00/14/54/ef/3cdfd916.jpg","nickname":"yuhao0x0628","note":"","ucode":"BFD472974828A5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3479,"discussion_content":"我家的解決方案是放在 header 裡面，不破壞路由，也不多帶參數","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564529513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1598272,"avatar":"https://static001.geekbang.org/account/avatar/00/18/63/40/b9615c81.jpg","nickname":"Jeyrce.Lu","note":"","ucode":"11D2607A2FDEA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558353,"discussion_content":"放在请求头，或者路由，或者querystring，要么通过域名来转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648229602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503506,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","nickname":"你为啥那么牛","note":"","ucode":"1ABC604A54A8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53344,"discussion_content":"升级系统 我也是用v1来表示，当时被人嗤之以鼻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574160271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118765,"user_name":"tingye","can_delete":false,"product_type":"c1","uid":1391463,"ip_address":"","ucode":"54F7A44066DF5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","comment_is_top":false,"comment_ctime":1564446430,"is_pvip":false,"replies":[{"id":"43558","content":"网络协议的确是一个有歧义的词","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564452144,"ip_address":"","comment_id":118765,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23039282910","product_id":100025201,"comment_content":"文中网络协议改成接口协议似乎更好理解","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460564,"discussion_content":"网络协议的确是一个有歧义的词","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564452144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012205,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/71/ed/45ab9f03.jpg","nickname":"八哥","note":"","ucode":"ED2E09CBBFC060","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3406,"discussion_content":"接口确实更通俗一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564460588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118791,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1244612,"ip_address":"","ucode":"2D8F82FE6877FF","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/c4/26217aa4.jpg","comment_is_top":false,"comment_ctime":1564447924,"is_pvip":false,"replies":[{"id":"43576","content":"路由怎么解释可以看一下go代码。至于用post还是put，这个一定程度来说只是一个习惯问题","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564453191,"ip_address":"","comment_id":118791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18744317108","product_id":100025201,"comment_content":"老师，咱们采用的应该是restful协议，那为啥修改不用put，而是跟新建同一个post呢？这样做路由层区分怎么做呢？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460579,"discussion_content":"路由怎么解释可以看一下go代码。至于用post还是put，这个一定程度来说只是一个习惯问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564453191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124690,"user_name":"立耳","can_delete":false,"product_type":"c1","uid":1497753,"ip_address":"","ucode":"99C8E4DC67ED01","user_header":"https://static001.geekbang.org/account/avatar/00/16/da/99/80222c2a.jpg","comment_is_top":false,"comment_ctime":1565945360,"is_pvip":false,"replies":[{"id":"45807","content":"是一个可能性，只不过这意味着url route模块需要根据http header来路由，这大部分标准url route可能并不支持，需要自己实现。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1565971279,"ip_address":"","comment_id":124690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450847248","product_id":100025201,"comment_content":"API版本是不是也可以放到Header中来完成，类似于UUID，这样接口形式基本保持一致？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463279,"discussion_content":"是一个可能性，只不过这意味着url route模块需要根据http header来路由，这大部分标准url route可能并不支持，需要自己实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565971279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125026,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1566048372,"is_pvip":false,"replies":[{"id":"45870","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1566060215,"ip_address":"","comment_id":125026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155982964","product_id":100025201,"comment_content":"简单梳理一下服务端的流程:<br>        sharp.go定义了各种图形相关的结构体，drawing.go描述了doc的组成、操作drawing<br>和sharp的各种方法。<br>        service.go定义了服务端实际的处理流程，首先初始化doc对象，然后创建service实例并将doc对象作为service的参数传入以便操作doc对象。接下来启动http端口侦听，指定了侦听端口和请求处理handle。这样当客户端向服务端发送请求时，侦听端口就会接收到。服务端接收到请求后，调用ServerHTTP在内部进行路由解析并调用对应的请求处理函数。<br>        在具体请求函数内部又调用了doc对象的相关处理函数实现对模型数据的操作。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463404,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566060215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119205,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1001410,"ip_address":"","ucode":"32646D78CC0389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/c2/e9fa4cf6.jpg","comment_is_top":false,"comment_ctime":1564536793,"is_pvip":false,"replies":[{"id":"43754","content":"1、看mock和实际程序的差距，两种可能都有；2、mock价值往往是阶段性的，到后期维护协议和正式程序的一致性成本会高于价值，而且往往已经有稳定版本的服务端程序可用","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564548325,"ip_address":"","comment_id":119205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154471385","product_id":100025201,"comment_content":"请问许老师，迭代是直接在mock程序上一点点修改实现了吗？等迭代完成，mock程序是否还有存在必要？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460787,"discussion_content":"1、看mock和实际程序的差距，两种可能都有；2、mock价值往往是阶段性的，到后期维护协议和正式程序的一致性成本会高于价值，而且往往已经有稳定版本的服务端程序可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564548325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125801,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1566261395,"is_pvip":false,"replies":[{"id":"46238","content":"确实是弱共识","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1566266913,"ip_address":"","comment_id":125801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861228691","product_id":100025201,"comment_content":"稍微较真一点讨论一下RESTful API里面关于verb的用法，因为相关的讨论实在是太多了，google一搜就可以得到一大把。<br><br>一种惯例是:把对资源的局部修改是用patch操作的，而post提现的是资源从无到有的创建动作，类似地put操作用来表示移动资源，里面的内容可能不变化。<br><br>上面表述的惯用法貌似是一种弱共识，具体例子可参考Kubernetes的API设计。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463697,"discussion_content":"确实是弱共识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566266913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119598,"user_name":"一粟","can_delete":false,"product_type":"c1","uid":1584386,"ip_address":"","ucode":"005282A0ED315A","user_header":"https://static001.geekbang.org/account/avatar/00/18/2d/02/61490096.jpg","comment_is_top":false,"comment_ctime":1564632778,"is_pvip":false,"replies":[{"id":"43890","content":"还在理解，目前还没有看清楚趋势","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564646915,"ip_address":"","comment_id":119598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859600074","product_id":100025201,"comment_content":"请问老师看好GraphQL吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460971,"discussion_content":"还在理解，目前还没有看清楚趋势","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564646915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118817,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1564449401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859416697","product_id":100025201,"comment_content":"打卡跟进，这几节课需要时间消化一下","like_count":1},{"had_liked":false,"id":337020,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":1140080,"ip_address":"","ucode":"DFE3078B632026","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/70/7e137498.jpg","comment_is_top":false,"comment_ctime":1646555540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646555540","product_id":100025201,"comment_content":"我好像没有get dao","like_count":0},{"had_liked":false,"id":288358,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1618423286,"is_pvip":false,"replies":[{"id":"104708","content":"前半截正解，后半截关于重复提交，可以有更优雅的方案，不需要与前端耦合。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1618523854,"ip_address":"","comment_id":288358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618423286","product_id":100025201,"comment_content":"在画图程序中,我们的业务封装和实现主要在前端,后端的功能好像就提供了数据的持久化,以及基于持久化的crud操作,但是在我们的开发中,后端负责的事情很多很杂,业务的封装就是一个实体类,所有的处理都在service层完成.以前我觉得这样也代码一点问题都没有,但是学习了架构课后,我才意识到,我以前是在用面向对象语言写面向过程代码.要是能够像老师一样分装业务模型,后端代码也会好些优雅很多.<br><br>还有关于重复提交的问题,我的解决办法是利用提交按钮来解决.提交按钮点击后,直到请求响应完成之前都不能再点.<br>","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518600,"discussion_content":"前半截正解，后半截关于重复提交，可以有更优雅的方案，不需要与前端耦合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618523854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181192,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1582515488,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582515488","product_id":100025201,"comment_content":"其实通过request-uuid来做到post请求密等防治冲突，这里面还是会遇到一个问题：客户端用户点击表单创建按钮，由于网络问题一段时间内没有响应，那么用户就会再次点击创建按钮（我说的这种情况当然是前端没有做“按钮变灰”等措施，做了效果也不大）那么后端就必定要根据接口协议结构来判断出是否是同一个请求，比如通过定义值对象来判断一个request body是否相等，但这样就显得这个api很厚重。想问下这种情况下一般是如何解决的","like_count":0,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388628,"discussion_content":"如果创建成功，前端应该跳转吧。不跳转就不生成新的uuid","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628857696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142398,"user_name":"Fs","can_delete":false,"product_type":"c1","uid":1083184,"ip_address":"","ucode":"0AD0EFB5544B9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","comment_is_top":false,"comment_ctime":1571363207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571363207","product_id":100025201,"comment_content":"后端看着一章简单","like_count":0},{"had_liked":false,"id":132632,"user_name":"科春","can_delete":false,"product_type":"c1","uid":1500869,"ip_address":"","ucode":"5766A7E9B9F497","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/c5/d7aa290b.jpg","comment_is_top":false,"comment_ctime":1568181040,"is_pvip":false,"replies":[{"id":"50732","content":"应用层协议为什么就不算网络协议？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1568182429,"ip_address":"","comment_id":132632,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1568181040","product_id":100025201,"comment_content":"http是应用层协议，并不是网络协议啊？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467046,"discussion_content":"应用层协议为什么就不算网络协议？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568182429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500869,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e6/c5/d7aa290b.jpg","nickname":"科春","note":"","ucode":"5766A7E9B9F497","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9534,"discussion_content":"从OSI模型来理解，在网络层的协议才是网络协议，例如rip、ospf、ip、eigrp等。如果从编程者角度看，只要是利用网络的协议就叫网络协议感觉有些不妥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568182820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118781,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1564447471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564447471","product_id":100025201,"comment_content":"请问这么看之前的浏览器端是MVP，后端是MC? ","like_count":0},{"had_liked":false,"id":118723,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1564440832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564440832","product_id":100025201,"comment_content":"起床打卡 29","like_count":0}]}