{"id":362940,"title":"11 | 打开首页之一：一个案例，带你搞懂基础硬件设施的性能问题","content":"<p>你好，我是高楼。</p><p>这节课我要带你来看一个完整的性能分析案例的第一部分，用打开首页接口做压力场景，来分析下性能问题。通过这个案例，你将看到各种基础硬件设施层面的性能问题，比如由虚机超分导致的性能问题、CPU运行模式下的性能问题、IO高、硬件资源耗尽但TPS很低的问题等等。</p><p>如果你是从零开始做一个完整的项目，那么这些问题很可能是你首先要去面对的。并且，把它们解决好，是性能分析人员必备的一种能力。同时，你还会看到针对不同计数器采集的数据，我们的分析链路是不同的，而这个分析链路就是我一直强调的证据链，如果你不清楚可以再回顾一下<a href=\"https://time.geekbang.org/column/article/355982\">第3讲</a>。</p><p>通过这节课，我希望你能明白，有些性能问题其实并没有那么单一，而且不管性能问题出在哪里，我们都必须去处理。</p><p>好，不啰嗦了，下面我们就把打开首页接口的性能瓶颈仔细扒一扒。</p><h2>看架构图</h2><p>在每次分析性能瓶颈之前，我都会画这样一张图，看看这个接口会涉及到哪些服务和技术组件，这对我们后续的性能分析会有很大的帮助。</p><p><img src=\"https://static001.geekbang.org/resource/image/69/8d/6913fb342aa32fae5b46c6f1ecddc58d.png?wh=845*685\" alt=\"\"></p><p>如果你有工具可以直接展示，那就更好了。如果没有，那我建议你不要自信地认为自己可以记住一个简单的架构。相信我，哪怕是在纸上简单画一画，都会对你后面的分析思路有很大的帮助。</p><p>回到上面这张图，我们可以清楚地看到这个打开首页的逻辑是：User - Gateway(Redis)- Portal - (Redis,MySQL)。</p><!-- [[[read_end]]] --><h2>顺便看下代码逻辑</h2><p>在做打开首页的基准场景之前，我建议你先看一眼这个接口的代码实现逻辑，从代码中可以看到这个接口在做哪些动作。根据这些动作，我们可以分析它们的后续链路。</p><p>这个代码的逻辑很简单，就是列出首页上的各种信息，然后返回一个JSON。</p><pre><code>public HomeContentResult contentnew() {\n        HomeContentResult result = new HomeContentResult();\n        if (redisService.get(&quot;HomeContent&quot;) == null) {\n            //首页广告\n            result.setAdvertiseList(getHomeAdvertiseList());\n            //品牌推荐\n            result.setBrandList(homeDao.getRecommendBrandList(0, 6));\n            //秒杀信息\n            result.setHomeFlashPromotion(getHomeFlashPromotion());\n            //新品推荐\n            result.setNewProductList(homeDao.getNewProductList(0, 4));\n            //人气推荐\n            result.setHotProductList(homeDao.getHotProductList(0, 4));\n            //专题推荐\n            result.setSubjectList(homeDao.getRecommendSubjectList(0, 4));\n            redisService.set(&quot;HomeContent&quot;, result);\n        }\n        Object homeContent = redisService.get(&quot;HomeContent&quot;);\n        // result = JSON.parseObject(homeContent.toString(), HomeContentResult.class);\n        result = JSONUtil.toBean(JSONUtil.toJsonPrettyStr(homeContent), HomeContentResult.class);\n\n        return result;\n}\n</code></pre><p>我们可以看到，这里面一共调用了6个方法，并且这些方法都是直接到数据库里做了查询，如此而已。</p><h2>确定压力数据</h2><p>了解完代码逻辑后，我们上10个线程试运行一下，看看在一个个线程递增的过程中，TPS会有什么样的趋势。</p><p>运行之后，我们得到这样的结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/87/0f/876yya208a923dd9c42fe9538063b10f.png?wh=1830*535\" alt=\"\"></p><p>从结果来看，在一开始，一个线程会产生40左右的TPS。这里我们就要思考一下了：<strong>如果想要执行一个场景，<strong><strong>并且这个场景</strong></strong>可以压出打开首页接口的最大TPS，<strong><strong>我们</strong></strong>应该<strong><strong>怎么</strong></strong>设置压力工具中的线程数、递增策略<strong><strong>和</strong></strong>持续执行策略呢？</strong></p><p>对此，我们先看看Portal应用节点所在机器的硬件使用情况，了解一下TPS趋势和资源使用率之间的关系。这个机器的情况如下图所示（注意，我跳过了Gateway所在的节点）：</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/67/d991a5548f72d6f7bcf0257c40da6b67.png?wh=1828*912\" alt=\"\"></p><p>可以看到，当前Portal节点所在的机器是8C16G（虚拟机），并且这个机器基本上没什么压力。</p><p>现在我们先不计算其他资源，只考虑8C16G的配置情况。如果TPS是线性增长的话，那么当该机器的CPU使用率达到 100%的时候，TPS大概就是800左右。因此，我们压力工具中的线程数应该设置为：</p><p>$$ 线程数 = 800 TPS \\div 40 TPS = 20 个线程$$</p><p>不过，在压力持续的过程中，TPS和资源使用率之间的等比关系应该是做不到的。因为在压力过程中，各种资源的消耗都会增加一些响应时间，这些也都属于正常的响应时间损耗。</p><p>在确定了压力工具的线程数之后，我们再来看递增策略怎么设置。</p><p>我希望递增时间可以增加得慢一些，以便于我们查看各环节性能数据的反应。根据<a href=\"https://time.geekbang.org/column/article/355019\">第2讲</a>中的性能分析决策树，在这样的场景中，我们有不少计数器需要分析查看，所以我设置为30秒上一个线程，也就是说递增周期为600秒。</p><p>在确定好压力参数后，我们的试运行场景就可以在JMeter中设置为如下值：</p><pre><code> &lt;stringProp name=&quot;ThreadGroup.num_threads&quot;&gt;20&lt;/stringProp&gt;\n        &lt;stringProp name=&quot;ThreadGroup.ramp_time&quot;&gt;600&lt;/stringProp&gt;\n        &lt;boolProp name=&quot;ThreadGroup.scheduler&quot;&gt;true&lt;/boolProp&gt;\n        &lt;stringProp name=&quot;ThreadGroup.duration&quot;&gt;700&lt;/stringProp&gt;\n</code></pre><p>设置好试运行参数后，我们就可以在这样的场景下进一步设置足够的线程来运行，以达到资源使用率的最大化。</p><p>你可能会疑惑：难道不用更高的线程了吗？如果你想做一个正常的场景，那确实不需要用更高的线程了；如果你就是想知道压力线程加多了是什么样子，那你可以试试。我在性能场景执行时，也经常用各种方式压着玩。</p><p>不过，话说回来，确实有一种情况需要我们正儿八经地增加更多的压力，那就是你的响应时间已经增加了，可是增加得又不多，TPS也不再上升。这时候，我们拆分响应时间是比较困难的，特别是当一些系统很快的时候，响应时间可能只是几个毫秒之间。所以，在这种情况下，我们需要多增加一些线程，让响应时间慢的地方更清晰地表现出来，这样也就更容易拆分时间。</p><p>通过压力场景的递增设置（前面算的是只需要20个线程即可达到最大值，而这里，我把压力线程设置为100启动场景，目的是为了看到递增到更大压力时的TPS趋势以及响应时间的增加，这样更容易做时间的拆分），我们看到这个接口的响应时间确实在慢慢增加，并且随着线程数的增加，响应时间很快就上升到了几百毫秒。这是一个明显的瓶颈，我们自然是不能接受的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/b9/b51a9979095ba9bd963e657b96fyy0b9.png?wh=1834*474\" alt=\"\"></p><p>接下来，我们就要好好分析一下这个响应时间究竟消耗到了哪里。</p><h2>拆分时间</h2><p>我们前面提到，打开首页的逻辑是：User - Gateway(Redis)- Portal - (Redis,MySQL)，那我们就按照这个逻辑，借助链路监控工具SkyWalking把响应时间具体拆分一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/99/1d3b42340dd5dfdda16bdf1332d34c99.png?wh=1803*761\" alt=\"\"></p><ul>\n<li><strong>User —Gateway之间的时间消耗</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/bd/b9/bd8117bdc6124d95893b16c7653be7b9.png?wh=266*661\" alt=\"\"></p><p>我们看到，User - Gateway之间的时间消耗慢慢上升到了150毫秒左右。</p><ul>\n<li><strong>Gateway响应时间</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/73/37/733a7e7f13ea455826aee0bbb2393237.png?wh=268*472\" alt=\"\"></p><p>gateway上也消耗了150毫秒，这就说明user到gateway之间的网络并没有多少时间消耗，在毫秒级。</p><ul>\n<li><strong>Gateway —Portal之间的时间消耗</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/f9/fe/f9ac563b64d7a1c6e923d8222fdfyyfe.png?wh=263*666\" alt=\"\"></p><p>在Portal上，响应时间只消耗了50毫秒左右。我们再到Portal上看一眼。</p><ul>\n<li><strong>Portal响应时间</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/72/49/721ae8d7ef027fdc56dd05860cafa849.png?wh=258*467\" alt=\"\"></p><p>Portal的响应时间是50毫秒左右，和我们上面看到的时间一致。</p><p>通过上述对响应时间的拆分，我们可以确定是Gateway消耗了响应时间，并且这个时间达到了近100毫秒。所以，我们下一步定位的目标就是Gateway了。</p><h2>定位Gateway上的响应时间消耗</h2><h4>第一阶段：分析st cpu</h4><p>既然Gateway上的响应时间消耗很高，我们自然就要查一下这台主机把时间消耗在了哪里。</p><p>我们的分析逻辑仍然是<strong>先看全局监控，后看定向监控</strong>。全局监控要从整个架构开始看起，然后再确定某个节点上的资源消耗。注意，在看全局监控时，我们要从最基础的查起，而分析的过程中最基础的就是操作系统了。</p><p>通过top命令，我们可以看到Gateway节点上的资源情况，具体如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/f5/c5af9b566db8bdeb7fc8d6ea448aa2f5.png?wh=1298*559\" alt=\"\"></p><p>其中，st cpu达到了15%左右。我们知道，st cpu是指虚拟机被宿主机上的其他应用或虚拟机抢走的CPU，它的值这么高显然是不太正常的。所以，我们要进一步查看st cpu异常的原因。</p><p>我们用mpstat命令先来看看宿主机（运行Gateway的虚拟机所在的物理机）上的资源表现：</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/90/f40e7c2f2a790b289b6d2332dbc47390.png?wh=1186*448\" alt=\"\"></p><p>可以看到，CPU还有20%没有用完，说明宿主机还有空间。不过，宿主机的CPU使用率已经不小了，而消耗这些宿主机的就只有虚拟机里的应用。所以，我们要查一下是不是某个虚拟机的CPU消耗特别高。宿主机上的KVM列表如下：</p><pre><code>  [root@dell-server-3 ~]# virsh list --all\n Id    名称                         状态\n----------------------------------------------------\n 12    vm-jmeter                      running\n 13    vm-k8s-worker-8                running\n 14    vm-k8s-worker-7                running\n 15    vm-k8s-worker-9                running\n\n[root@dell-server-3 ~]#\n</code></pre><p>可以看到，在这个宿主机上跑了四个虚拟机，那我们就具体看一下这四个虚拟机的资源消耗情况。</p><ul>\n<li><strong>vm-jmeter</strong></li>\n</ul><pre><code>   top - 23:42:49 up 28 days,  8:14,  6 users,  load average: 0.61, 0.48, 0.38\nTasks: 220 total,   1 running, 218 sleeping,   1 stopped,   0 zombie\n%Cpu0  :  6.6 us,  3.5 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  0.0 si,  1.4 st\n%Cpu1  :  6.5 us,  1.8 sy,  0.0 ni, 88.2 id,  0.0 wa,  0.0 hi,  0.4 si,  3.2 st\nKiB Mem :  3880180 total,   920804 free,  1506128 used,  1453248 buff/cache\nKiB Swap:  2097148 total,  1256572 free,   840576 used.  2097412 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                  \n 7157 root      20   0 3699292 781204  17584 S  27.8 20.1   1:09.44 java                                                                                                                     \n    9 root      20   0       0      0      0 S   0.3  0.0  30:25.77 rcu_sched                                                                                                                \n  376 root      20   0       0      0      0 S   0.3  0.0  16:40.44 xfsaild/dm-\n</code></pre><ul>\n<li><strong>vm-k8s-worker-8</strong></li>\n</ul><pre><code>top - 23:43:47 up 5 days, 22:28,  3 users,  load average: 9.21, 6.45, 5.74\nTasks: 326 total,   1 running, 325 sleeping,   0 stopped,   0 zombie\n%Cpu0  : 20.2 us,  3.7 sy,  0.0 ni, 60.7 id,  0.0 wa,  0.0 hi,  2.9 si, 12.5 st\n%Cpu1  : 27.3 us,  7.4 sy,  0.0 ni, 50.2 id,  0.0 wa,  0.0 hi,  3.7 si, 11.4 st\n%Cpu2  : 29.9 us,  5.6 sy,  0.0 ni, 48.5 id,  0.0 wa,  0.0 hi,  4.9 si, 11.2 st\n%Cpu3  : 31.2 us,  5.6 sy,  0.0 ni, 47.6 id,  0.0 wa,  0.0 hi,  4.5 si, 11.2 st\n%Cpu4  : 25.6 us,  4.3 sy,  0.0 ni, 52.7 id,  0.0 wa,  0.0 hi,  3.6 si, 13.7 st\n%Cpu5  : 26.0 us,  5.2 sy,  0.0 ni, 53.5 id,  0.0 wa,  0.0 hi,  4.1 si, 11.2 st\n%Cpu6  : 19.9 us,  6.2 sy,  0.0 ni, 57.6 id,  0.0 wa,  0.0 hi,  3.6 si, 12.7 st\n%Cpu7  : 27.3 us,  5.0 sy,  0.0 ni, 53.8 id,  0.0 wa,  0.0 hi,  2.3 si, 11.5 st\nKiB Mem : 16265688 total,  6772084 free,  4437840 used,  5055764 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 11452900 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                  \n13049 root      20   0 9853712 593464  15752 S 288.4  3.6  67:24.22 java                                                                                                                     \n 1116 root      20   0 2469728  57932  16188 S  12.6  0.4 818:40.25 containerd                                                                                                               \n 1113 root      20   0 3496336 118048  38048 S  12.3  0.7 692:30.79 kubelet                                                                                                                  \n 4961 root      20   0 1780136  40700  17864 S  12.3  0.3 205:51.15 calico-node                                                                                                              \n 3830 root      20   0 2170204 114920  33304 S  11.6  0.7 508:00.00 scope                                                                                                                    \n 1118 root      20   0 1548060 111768  29336 S  11.3  0.7 685:27.95 dockerd                                                                                                                  \n 8216 techstar  20   0 2747240 907080 114836 S   5.0  5.6   1643:33 prometheus                                                                                                               \n21002 root      20   0 9898708 637616  17316 S   3.3  3.9 718:56.99 java                                                                                                                     \n 1070 root      20   0 9806964 476716  15756 S   2.0  2.9 137:13.47 java                                                                                                                     \n11492 root      20   0  441996  33204   4236 S   1.3  0.2  38:10.49 gvfs-udisks2-vo  \n</code></pre><ul>\n<li><strong>vm-k8s-worker-7</strong></li>\n</ul><pre><code>top - 23:44:22 up 5 days, 22:26,  3 users,  load average: 2.50, 1.67, 1.13\nTasks: 308 total,   1 running, 307 sleeping,   0 stopped,   0 zombie\n%Cpu0  :  4.2 us,  3.5 sy,  0.0 ni, 82.3 id,  0.0 wa,  0.0 hi,  1.7 si,  8.3 st\n%Cpu1  :  6.2 us,  2.7 sy,  0.0 ni, 82.8 id,  0.0 wa,  0.0 hi,  1.4 si,  6.9 st\n%Cpu2  :  5.2 us,  2.8 sy,  0.0 ni, 84.0 id,  0.0 wa,  0.0 hi,  1.0 si,  6.9 st\n%Cpu3  :  4.5 us,  3.8 sy,  0.0 ni, 81.2 id,  0.0 wa,  0.0 hi,  1.4 si,  9.2 st\n%Cpu4  :  4.4 us,  2.4 sy,  0.0 ni, 83.3 id,  0.0 wa,  0.0 hi,  1.4 si,  8.5 st\n%Cpu5  :  5.5 us,  2.4 sy,  0.0 ni, 84.5 id,  0.0 wa,  0.0 hi,  1.0 si,  6.6 st\n%Cpu6  :  3.7 us,  2.7 sy,  0.0 ni, 85.6 id,  0.0 wa,  0.0 hi,  0.7 si,  7.4 st\n%Cpu7  :  3.1 us,  1.7 sy,  0.0 ni, 84.7 id,  0.0 wa,  0.0 hi,  1.4 si,  9.0 st\nKiB Mem : 16265688 total,  8715820 free,  3848432 used,  3701436 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 12019164 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                  \n18592 27        20   0 4588208 271564  12196 S  66.9  1.7 154:58.93 mysqld                                                                                                                   \n 1109 root      20   0 2381424 105512  37208 S   9.6  0.6 514:18.00 kubelet                                                                                                                  \n 1113 root      20   0 1928952  55556  16024 S   8.9  0.3 567:43.53 containerd                                                                                                               \n 1114 root      20   0 1268692 105212  29644 S   8.6  0.6 516:43.38 dockerd                                                                                                                  \n 3122 root      20   0 2169692 117212  33416 S   7.0  0.7 408:21.79 scope                                                                                                                    \n 4132 root      20   0 1780136  43188  17952 S   6.0  0.3 193:27.58 calico-node                                                                                                              \n 3203 nfsnobo+  20   0  116748  19720   5864 S   2.0  0.1  42:43.57 node_exporter                                                                                                            \n12089 techstar  20   0 5666480   1.3g  23084 S   1.3  8.5  78:04.61 java                                                                                                                     \n 5727 root      20   0  449428  38616   4236 S   1.0  0.2  49:02.98 gvfs-udisks2-vo  \n</code></pre><ul>\n<li><strong>vm-k8s-worker-9</strong></li>\n</ul><pre><code> top - 23:45:23 up 5 days, 22:21,  4 users,  load average: 12.51, 10.28, 9.19\nTasks: 333 total,   4 running, 329 sleeping,   0 stopped,   0 zombie\n%Cpu0  : 20.1 us,  7.5 sy,  0.0 ni, 43.3 id,  0.0 wa,  0.0 hi, 13.4 si, 15.7 st\n%Cpu1  : 20.1 us, 11.2 sy,  0.0 ni, 41.4 id,  0.0 wa,  0.0 hi, 11.9 si, 15.3 st\n%Cpu2  : 23.8 us, 10.0 sy,  0.0 ni, 35.4 id,  0.0 wa,  0.0 hi, 14.2 si, 16.5 st\n%Cpu3  : 15.1 us,  7.7 sy,  0.0 ni, 49.1 id,  0.0 wa,  0.0 hi, 12.2 si, 15.9 st\n%Cpu4  : 22.8 us,  6.9 sy,  0.0 ni, 40.5 id,  0.0 wa,  0.0 hi, 14.7 si, 15.1 st\n%Cpu5  : 17.5 us,  5.8 sy,  0.0 ni, 50.0 id,  0.0 wa,  0.0 hi, 10.6 si, 16.1 st\n%Cpu6  : 22.0 us,  6.6 sy,  0.0 ni, 45.1 id,  0.0 wa,  0.0 hi, 11.0 si, 15.4 st\n%Cpu7  : 19.2 us,  8.0 sy,  0.0 ni, 44.9 id,  0.0 wa,  0.0 hi,  9.8 si, 18.1 st\nKiB Mem : 16265688 total,  2567932 free,  7138952 used,  6558804 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  8736000 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                  \n24122 root      20   0 9890064 612108  16880 S 201.0  3.8   1905:11 java                                                                                                                     \n 2794 root      20   0 2307652 161224  33464 S  57.7  1.0   1065:54 scope                                                                                                                    \n 1113 root      20   0 2607908  60552  15484 S  13.8  0.4   1008:04 containerd                                                                                                               \n 1109 root      20   0 2291748 110768  39140 S  12.8  0.7 722:41.17 kubelet                                                                                                                  \n 1114 root      20   0 1285500 108664  30112 S  11.1  0.7 826:56.51 dockerd                                                                                                                  \n   29 root      20   0       0      0      0 S   8.9  0.0  32:09.89 ksoftirqd/4                                                                                                              \n    6 root      20   0       0      0      0 S   8.2  0.0  41:28.14 ksoftirqd/0                                                                                                              \n   24 root      20   0       0      0      0 R   8.2  0.0  41:00.46 ksoftirqd/3                                                                                                              \n   39 root      20   0       0      0      0 R   8.2  0.0  41:08.18 ksoftirqd/6                                                                                                              \n   19 root      20   0       0      0      0 S   7.9  0.0  39:10.22 ksoftirqd/2                                                                                                              \n   14 root      20   0       0      0      0 S   6.2  0.0  40:58.25 ksoftirqd/1    \n</code></pre><p>很显然，worker-9的si（中断使用的CPU）和st（被偷走的CPU）都不算低。那这种情况就比较奇怪了，虚拟机本身都没有很高的CPU使用率，为什么st还这么高呢？难道CPU只能用到这种程度？</p><p>来，我们接着查下去。</p><h4>第二阶段：查看物理机CPU运行模式</h4><p>在这个阶段，我们要查一下服务里有没有阻塞。就像前面提到的，我们要从全局监控的角度，来考虑所查看的性能分析计数器是不是完整，以免出现判断上的偏差。不过，我去查看了线程栈的具体内容，看到线程栈中并没有Blocked啥的，那我们就只能再回到物理机的配置里看了。</p><p>那对于物理机CPU，我们还有什么可看的呢？即使你盖上被子蒙着头想很久，从下到上把所有的逻辑都理一遍，也找不出什么地方会有阻塞。那我们就只有看宿主机的CPU运行模式了。</p><pre><code>-- 物理机器1\n[root@hp-server ~]# cpupower frequency-info\nanalyzing CPU 0:\n  driver: pcc-cpufreq\n  CPUs which run at the same hardware frequency: 0\n  CPUs which need to have their frequency coordinated by software: 0\n  maximum transition latency:  Cannot determine or is not supported.\n  hardware limits: 1.20 GHz - 2.10 GHz\n  available cpufreq governors: conservative userspace powersave ondemand performance\n  current policy: frequency should be within 1.20 GHz and 2.10 GHz.\n                  The governor &quot;conservative&quot; may decide which speed to use\n                  within this range.\n  current CPU frequency: 1.55 GHz (asserted by call to hardware)\n  boost state support:\n    Supported: yes\n    Active: yes\n\n-- 物理机器2\n[root@dell-server-2 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\npowersave\n[root@dell-server-2 ~]# cpupower frequency-info\nanalyzing CPU 0:\n  driver: intel_pstate\n  CPUs which run at the same hardware frequency: 0\n  CPUs which need to have their frequency coordinated by software: 0\n  maximum transition latency:  Cannot determine or is not supported.\n  hardware limits: 1.20 GHz - 2.20 GHz\n  available cpufreq governors: performance powersave\n  current policy: frequency should be within 1.20 GHz and 2.20 GHz.\n                  The governor &quot;powersave&quot; may decide which speed to use\n                  within this range.\n  current CPU frequency: 2.20 GHz (asserted by call to hardware)\n  boost state support:\n    Supported: no\n    Active: no\n    2200 MHz max turbo 4 active cores\n    2200 MHz max turbo 3 active cores\n    2200 MHz max turbo 2 active cores\n    2200 MHz max turbo 1 active cores\n\n-- 物理机器3\n[root@dell-server-3 ~]# cpupower frequency-info\nanalyzing CPU 0:\n  driver: intel_pstate\n  CPUs which run at the same hardware frequency: 0\n  CPUs which need to have their frequency coordinated by software: 0\n  maximum transition latency:  Cannot determine or is not supported.\n  hardware limits: 1.20 GHz - 2.20 GHz\n  available cpufreq governors: performance powersave\n  current policy: frequency should be within 1.20 GHz and 2.20 GHz.\n                  The governor &quot;powersave&quot; may decide which speed to use\n                  within this range.\n  current CPU frequency: 2.20 GHz (asserted by call to hardware)\n  boost state support:\n    Supported: no\n    Active: no\n    2200 MHz max turbo 4 active cores\n    2200 MHz max turbo 3 active cores\n    2200 MHz max turbo 2 active cores\n    2200 MHz max turbo 1 active cores\n\n-- 物理机器4\n[root@lenvo-nfs-server ~]# cpupower frequency-info\nanalyzing CPU 0:\n  driver: acpi-cpufreq\n  CPUs which run at the same hardware frequency: 0\n  CPUs which need to have their frequency coordinated by software: 0\n  maximum transition latency: 10.0 us\n  hardware limits: 2.00 GHz - 2.83 GHz\n  available frequency steps:  2.83 GHz, 2.00 GHz\n  available cpufreq governors: conservative userspace powersave ondemand performance\n  current policy: frequency should be within 2.00 GHz and 2.83 GHz.\n                  The governor &quot;conservative&quot; may decide which speed to use\n                  within this range.\n  current CPU frequency: 2.00 GHz (asserted by call to hardware)\n  boost state support:\n    Supported: no\n    Active: no\n</code></pre><p>可以看到，没有一个物理机是运行在performance模式之下的。</p><p>在这里，我们需要对CPU的运行模式有一个了解：</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/82/8cd3a3bee80eb77bf348b1a063a90682.jpg?wh=2000*1263\" alt=\"\"></p><p>既然我们是性能分析人员，那自然要用performance模式了，所以我们把CPU模式修改如下：</p><pre><code>-- 物理机器1\n[root@hp-server ~]# cpupower -c all frequency-set -g performance\nSetting cpu: 0\nSetting cpu: 1\nSetting cpu: 2\nSetting cpu: 3\nSetting cpu: 4\nSetting cpu: 5\nSetting cpu: 6\nSetting cpu: 7\nSetting cpu: 8\nSetting cpu: 9\nSetting cpu: 10\nSetting cpu: 11\nSetting cpu: 12\nSetting cpu: 13\nSetting cpu: 14\nSetting cpu: 15\nSetting cpu: 16\nSetting cpu: 17\nSetting cpu: 18\nSetting cpu: 19\nSetting cpu: 20\nSetting cpu: 21\nSetting cpu: 22\nSetting cpu: 23\nSetting cpu: 24\nSetting cpu: 25\nSetting cpu: 26\nSetting cpu: 27\nSetting cpu: 28\nSetting cpu: 29\nSetting cpu: 30\nSetting cpu: 31\n[root@hp-server ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\nperformance\n[root@hp-server ~]#\n\n-- 物理机器2\n[root@dell-server-2 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\npowersave\n[root@dell-server-2 ~]# cpupower -c all frequency-set -g performance\nSetting cpu: 0\nSetting cpu: 1\nSetting cpu: 2\nSetting cpu: 3\nSetting cpu: 4\nSetting cpu: 5\nSetting cpu: 6\nSetting cpu: 7\nSetting cpu: 8\nSetting cpu: 9\nSetting cpu: 10\nSetting cpu: 11\nSetting cpu: 12\nSetting cpu: 13\nSetting cpu: 14\nSetting cpu: 15\n[root@dell-server-2 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\nperformance\n[root@dell-server-2 ~]#\n\n-- 物理机器3\n[root@dell-server-3 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\npowersave\n[root@dell-server-3 ~]#  cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\npowersave\n[root@dell-server-3 ~]# cpupower -c all frequency-set -g performance\nSetting cpu: 0\nSetting cpu: 1\nSetting cpu: 2\nSetting cpu: 3\nSetting cpu: 4\nSetting cpu: 5\nSetting cpu: 6\nSetting cpu: 7\nSetting cpu: 8\nSetting cpu: 9\nSetting cpu: 10\nSetting cpu: 11\nSetting cpu: 12\nSetting cpu: 13\nSetting cpu: 14\nSetting cpu: 15\n[root@dell-server-3 ~]#  cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\nperformance\n[root@dell-server-3 ~]#\n\n-- 物理机器4\n[root@lenvo-nfs-server ~]# cpupower -c all frequency-set -g performance\nSetting cpu: 0\nSetting cpu: 1\nSetting cpu: 2\nSetting cpu: 3\n[root@lenvo-nfs-server ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\nperformance\n[root@lenvo-nfs-server ~]# \n</code></pre><p>在我们一顿操作猛如虎之后，性能会怎么样呢？</p><p>结果，性能并没有好起来……这里我就不截图了，因为图和一开始的那张场景运行图一样。</p><p>在这里我们要知道，以上的分析过程说明不止是这个问题点，还有其他资源使用有短板我们没有找到。没办法，我们只能接着查。</p><h2>总结</h2><p>在这节课中，我们通过压力工具中的曲线，判断了瓶颈的存在。然后通过SkyWalking拆分了响应时间。</p><p>在确定了响应时间消耗点之后，我们又开始了两个阶段的分析：第一个阶段的证据链是从现象开始往下分析的，因为st cpu是指宿主机上的其他应用的消耗导致了此虚拟机的cpu资源被消耗，所以，我们去宿主机上去查了其他的虚拟机。这里我们要明确CPU资源应该用到什么样的程度，在发现了资源使用不合理之后，再接着做第二阶段的判断。</p><p>在第二阶段中，我们判断了CPU运行模式。在物理机中，如果我们自己不做主动的限制，CPU的消耗是没有默认限制的，所以我们才去查看CPU的运行模式。</p><p>但是，即便我们分析并尝试解决了以上的问题，TPS仍然没什么变化。可见，在计数器的分析逻辑中，虽然我们做了优化动作，但系统仍然有问题。只能说我们当前的优化手段，只解决了木桶中的最短板，但是其他短板，我们还没有找到。</p><p>请你注意，这并不是说我们这节课的分析优化过程没有意义。要知道，这些问题不解决，下一个问题也不会出现。所以，我们这节课的分析优化过程也非常有价值。</p><p>下节课，我们接着来找打开首页接口的性能瓶颈。</p><h2>课后作业</h2><p>最后，请你思考一下：</p><ol>\n<li>为什么我们看到虚拟机中st cpu高，就要去查看宿主机上的其他虚拟机？如果在宿主机上看到st cpu高，我们应该做怎样的判断？</li>\n<li>CPU的运行模式在powersave时，CPU的运行逻辑是什么？</li>\n</ol><p>记得在留言区和我讨论、交流你的想法，每一次思考都会让你更进一步。</p><p>如果这节课让你有所收获，也欢迎你分享给你的朋友，共同学习进步。我们下一讲再见！</p>","comments":[{"had_liked":false,"id":288258,"user_name":"Geek_bbe4c8","can_delete":false,"product_type":"c1","uid":2534029,"ip_address":"","ucode":"4FD182C6BB0B05","user_header":"","comment_is_top":false,"comment_ctime":1618382526,"is_pvip":false,"replies":[{"id":"104651","content":"根据资源来计算的。因为40TPS的时候，你看图上面的CPU使用率，也才5%左右，要用到100%的话，不是有20倍吗？所以是40x20。","user_name":"作者回复","comment_id":288258,"uid":"1785562","ip_address":"","utype":1,"ctime":1618406465,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"27388186302","product_id":100074001,"comment_content":"“只考虑 8C16G 的配置情况。如果 TPS 是线性增长的话，那么当该机器的 CPU 使用率达到 100% 的时候，TPS 大概就是 800 左右。”<br>老师，这里的TPS 800是怎么得到的？没太懂","like_count":6,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518562,"discussion_content":"根据资源来计算的。因为40TPS的时候，你看图上面的CPU使用率，也才5%左右，要用到100%的话，不是有20倍吗？所以是40x20。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618406465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297702,"user_name":"sierlu","can_delete":false,"product_type":"c1","uid":1449460,"ip_address":"","ucode":"3CBAB057E90FDA","user_header":"","comment_is_top":false,"comment_ctime":1623740176,"is_pvip":false,"replies":[{"id":"108113","content":"在下一节课中有资源利用率的数据。你可以参考着看。我们这个案例是一个接一个的。哈哈。 ","user_name":"作者回复","comment_id":297702,"uid":"1785562","ip_address":"","utype":1,"ctime":1623764341,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"10213674768","product_id":100074001,"comment_content":"1.如果虚拟机的st高，可能怀疑是该宿主机的其他虚拟机在竞争cpu资源，那么其他虚拟机应该也会出现st高的情况，可能是cpu资源超分配，如果物理机确实st高，且虚拟机的应用也需要用这么多，则需要对物理机进行扩容，或者将宿主机上的虚拟机器迁移到其它宿主机<br>2.powersave模式应该是一个最低频率使用模式，降低cpu的用电量，温度。<br>另外高老师，后来调节这个工作模式后，虽然压测业务指标没有变化但是建议应该再贴一下虚拟机的资源使用情况，这个工作模式的更改是否确实解决了降低了si，st？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521913,"discussion_content":"在下一节课中有资源利用率的数据。你可以参考着看。我们这个案例是一个接一个的。哈哈。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623764341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304602,"user_name":"悦霖","can_delete":false,"product_type":"c1","uid":1786180,"ip_address":"","ucode":"6707B62806147F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/41/44/00ea2279.jpg","comment_is_top":false,"comment_ctime":1627518435,"is_pvip":false,"replies":[{"id":"110304","content":"这个取决于对操作系统的理解了，宿主机的cpu在这里只给虚拟机用，虚拟机st cpu高了，说明宿主机cpu没用完，而没用完，只有去查阻塞和运行模式了。 ","user_name":"作者回复","comment_id":304602,"uid":"1785562","ip_address":"","utype":1,"ctime":1627704630,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"5922485731","product_id":100074001,"comment_content":"高老师，st高，看了宿主机cpu使用率还有空闲，为啥就直接去看是否有阻塞，以及没阻塞后cpu运行模式，这个证据链感觉不连续啊？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524095,"discussion_content":"这个取决于对操作系统的理解了，宿主机的cpu在这里只给虚拟机用，虚拟机st cpu高了，说明宿主机cpu没用完，而没用完，只有去查阻塞和运行模式了。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627704630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288407,"user_name":"张鱼","can_delete":false,"product_type":"c1","uid":2065141,"ip_address":"","ucode":"EA6E96B26C08AB","user_header":"https://static001.geekbang.org/account/avatar/00/1f/82/f5/c692c259.jpg","comment_is_top":false,"comment_ctime":1618457620,"is_pvip":false,"replies":[{"id":"104705","content":"先做全局监控就可以 。","user_name":"作者回复","comment_id":288407,"uid":"1785562","ip_address":"","utype":1,"ctime":1618491353,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"5913424916","product_id":100074001,"comment_content":"全局监控、定向监控，这个监控的时机是怎么把握的？是跑脚本之前，将两者都监控起来。发现性能问题，先看全局监控，再去看定向监控？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518616,"discussion_content":"先做全局监控就可以 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618491353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288370,"user_name":"start","can_delete":false,"product_type":"c1","uid":1593006,"ip_address":"","ucode":"402CF635D6067C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1uP7K0RUIQZ87oXE5GVDDclD3GRIDPRyhYfmSic7hq9GBYvjibgBaSPXLTWYjEqbSYbwFhunw6ibntgLa3C7VyibWw/132","comment_is_top":false,"comment_ctime":1618447826,"is_pvip":false,"replies":[{"id":"104672","content":"Skywalking中自动生成的。","user_name":"作者回复","comment_id":288370,"uid":"1785562","ip_address":"","utype":1,"ctime":1618458690,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"5913415122","product_id":100074001,"comment_content":"老师你上面的架构图用什么工具画的？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518605,"discussion_content":"Skywalking中自动生成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618458690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358979,"user_name":"Olivia","can_delete":false,"product_type":"c1","uid":1038245,"ip_address":"四川","ucode":"BE840A032F1DF4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/a5/6e047fbc.jpg","comment_is_top":false,"comment_ctime":1665112487,"is_pvip":false,"replies":[{"id":"130963","content":"如果想获得好的硬件性能，就要一直打开。","user_name":"作者回复","comment_id":358979,"uid":"1785562","ip_address":"四川","utype":1,"ctime":1666191323,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1665112487","product_id":100074001,"comment_content":"老师您说的做性能要打开performance模式，指的是性能测试时打开，还是性能调优都要打开，如果是后者，那意味着生产上都要打开performance 模式？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590971,"discussion_content":"如果想获得好的硬件性能，就要一直打开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666191323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350292,"user_name":"Geek_0ddc27","can_delete":false,"product_type":"c1","uid":3040702,"ip_address":"北京","ucode":"FC9DD03C787D02","user_header":"","comment_is_top":false,"comment_ctime":1656755731,"is_pvip":false,"replies":[{"id":"129326","content":"我查查，看看是不是手误了。","user_name":"作者回复","comment_id":350292,"uid":"1785562","ip_address":"北京","utype":1,"ctime":1661335317,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1656755731","product_id":100074001,"comment_content":"通过上述对响应时间的拆分，我们可以确定是 Gateway 消耗了响应时间，并且这个时间达到了近 100 毫秒。所以，我们下一步定位的目标就是 Gateway 了。高老师，gateway不是消耗了150吗，怎么后面又说100了呢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585124,"discussion_content":"我查查，看看是不是手误了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661335317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327348,"user_name":"*回眸*·wdlcoke","can_delete":false,"product_type":"c1","uid":1499362,"ip_address":"","ucode":"8D5ECCD274601F","user_header":"https://static001.geekbang.org/account/avatar/00/16/e0/e2/6054de3f.jpg","comment_is_top":false,"comment_ctime":1640075103,"is_pvip":true,"replies":[{"id":"119428","content":"promethes也有windows_exporter的第三方监控插件。但有没有被抢走的CPU计数器，我不清楚。在我的工作经历中，windows做为服务端用非常少。","user_name":"作者回复","comment_id":327348,"uid":"1785562","ip_address":"","utype":1,"ctime":1640480505,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640075103","product_id":100074001,"comment_content":"老师：<br>       windows服务怎么查看虚拟机被宿主机上的其他应用或虚拟机抢走的 CPU，有没有windows服务器监控工具的套装？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541599,"discussion_content":"promethes也有windows_exporter的第三方监控插件。但有没有被抢走的CPU计数器，我不清楚。在我的工作经历中，windows做为服务端用非常少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640480505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306837,"user_name":"涵涵","can_delete":false,"product_type":"c1","uid":2685828,"ip_address":"","ucode":"83D93651C76934","user_header":"https://static001.geekbang.org/account/avatar/00/28/fb/84/a1f866e7.jpg","comment_is_top":false,"comment_ctime":1628739725,"is_pvip":false,"replies":[{"id":"111168","content":"没懂这个问题是要问啥。","user_name":"作者回复","comment_id":306837,"uid":"1785562","ip_address":"","utype":1,"ctime":1628827610,"user_name_real":"高楼(Zee)"}],"discussion_count":2,"race_medal":0,"score":"1628739725","product_id":100074001,"comment_content":"Portal 节点所在的机器是 8C16G（虚拟机），通过Portal计算TPS 800，如果gateway虚拟机只有2C4G怎么办？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524941,"discussion_content":"没懂这个问题是要问啥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628827610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2685828,"avatar":"https://static001.geekbang.org/account/avatar/00/28/fb/84/a1f866e7.jpg","nickname":"涵涵","note":"","ucode":"83D93651C76934","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389573,"discussion_content":"gateway机器的cpu内存比业务服务器的低，会不会影响TPS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629343611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293304,"user_name":"小孔丞相","can_delete":false,"product_type":"c1","uid":2538946,"ip_address":"","ucode":"CAFB7A07BFE345","user_header":"https://static001.geekbang.org/account/avatar/00/26/bd/c2/7ae92f28.jpg","comment_is_top":false,"comment_ctime":1621329180,"is_pvip":false,"replies":[{"id":"106252","content":"开源工具kuboard自带的。 配置几下就行了。 <br>图怎么画出来的不是关键问题，自己手工画一下也是一样的。我觉得还是多思考一下关键问题。不要纠结于这些细节。","user_name":"作者回复","comment_id":293304,"uid":"1785562","ip_address":"","utype":1,"ctime":1621394728,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"1621329180","product_id":100074001,"comment_content":"架构拓扑图是用什么画的呀","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520149,"discussion_content":"开源工具kuboard自带的。 配置几下就行了。 \n图怎么画出来的不是关键问题，自己手工画一下也是一样的。我觉得还是多思考一下关键问题。不要纠结于这些细节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621394728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288360,"user_name":"小龙","can_delete":false,"product_type":"c1","uid":1211484,"ip_address":"","ucode":"8D7968F629F419","user_header":"https://static001.geekbang.org/account/avatar/00/12/7c/5c/36151f3f.jpg","comment_is_top":false,"comment_ctime":1618436162,"is_pvip":false,"replies":[{"id":"104673","content":"这问题也太大了。按我前面讲的逻辑给出数据来，我可以帮你分析。 如果你只是这么问，我只能告诉仔细看这个专栏中的内容。","user_name":"作者回复","comment_id":288360,"uid":"1785562","ip_address":"","utype":1,"ctime":1618458795,"user_name_real":"高楼(Zee)"}],"discussion_count":1,"race_medal":0,"score":"1618436162","product_id":100074001,"comment_content":"老师， TPS 呈现周期性抖动该怎么去分析？ ","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518601,"discussion_content":"这问题也太大了。按我前面讲的逻辑给出数据来，我可以帮你分析。 如果你只是这么问，我只能告诉仔细看这个专栏中的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618458795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}