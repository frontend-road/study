{"id":466221,"title":"25｜方法：方法集合与如何选择receiver类型？","content":"<p>你好，我是Tony Bai。</p><p>在上一节中我们开启了Go方法的学习，了解了Go语言中方法的组成、声明和实质。可以说，我们已经正式入门Go方法了。</p><p>入门Go方法后，和函数一样，我们要考虑如何进行方法设计的问题。由于在Go语言中，<strong>方法本质上就是函数</strong>，所以我们之前讲解的、关于函数设计的内容对方法也同样适用，比如错误处理设计、针对异常的处理策略、使用defer提升简洁性，等等。</p><p>但关于Go方法中独有的receiver组成部分，却没有现成的、可供我们参考的内容。而据我了解，初学者在学习Go方法时，最头疼的一个问题恰恰就是<strong>如何选择receiver参数的类型</strong>。</p><p>那么，在这一讲中，我们就来学习一下不同receiver参数类型对Go方法的影响，以及我们选择receiver参数类型时的一些经验原则。</p><h2>receiver参数类型对Go方法的影响</h2><p>要想为receiver参数选出合理的类型，我们先要了解不同的receiver参数类型会对Go方法产生怎样的影响。在上一节课中，我们分析了Go方法的本质，得出了“Go方法实质上是<strong>以方法的receiver参数作为第一个参数的普通函数</strong>”的结论。</p><p>对于函数参数类型对函数的影响，我们是很熟悉的。那么我们能不能将方法等价转换为对应的函数，再通过分析receiver参数类型对函数的影响，从而间接得出它对Go方法的影响呢？</p><!-- [[[read_end]]] --><p>我们可以基于这个思路试试看。我们直接来看下面例子中的两个Go方法，以及它们等价转换后的函数：</p><pre><code class=\"language-plain\">func (t T) M1() &lt;=&gt; F1(t T)\nfunc (t *T) M2() &lt;=&gt; F2(t *T)\n</code></pre><p>这个例子中有方法M1和M2。M1方法是receiver参数类型为T的一类方法的代表，而M2方法则代表了receiver参数类型为*T的另一类。下面我们分别来看看不同的receiver参数类型对M1和M2的影响。</p><ul>\n<li><strong>首先，当receiver参数的类型为T时：</strong><br>\n当我们选择以T作为receiver参数类型时，M1方法等价转换为<code>F1(t T)</code>。我们知道，Go函数的参数采用的是值拷贝传递，也就是说，F1函数体中的t是T类型实例的一个副本。这样，我们在F1函数的实现中对参数t做任何修改，都只会影响副本，而不会影响到原T类型实例。</li>\n</ul><p>据此我们可以得出结论：当我们的方法M1采用类型为T的receiver参数时，代表T类型实例的receiver参数以值传递方式传递到M1方法体中的，实际上是<strong>T类型实例的副本</strong>，M1方法体中对副本的任何修改操作，都不会影响到原T类型实例。</p><ul>\n<li><strong>第二，当receiver参数的类型为*T时：</strong><br>\n当我们选择以*T作为receiver参数类型时，M2方法等价转换为<code>F2(t *T)</code>。同上面分析，我们传递给F2函数的t是T类型实例的地址，这样F2函数体中对参数t做的任何修改，都会反映到原T类型实例上。</li>\n</ul><p>据此我们也可以得出结论：当我们的方法M2采用类型为*T的receiver参数时，代表*T类型实例的receiver参数以值传递方式传递到M2方法体中的，实际上是<strong>T类型实例的地址</strong>，M2方法体通过该地址可以对原T类型实例进行任何修改操作。</p><p>我们再通过一个更直观的例子，证明一下上面这个分析结果，看一下Go方法选择不同的receiver类型对原类型实例的影响：</p><pre><code class=\"language-plain\">package main\n  \ntype T struct {\n    a int\n}\n\nfunc (t T) M1() {\n    t.a = 10\n}\n\nfunc (t *T) M2() {\n    t.a = 11\n}\n\nfunc main() {\n    var t T\n    println(t.a) // 0\n\n    t.M1()\n    println(t.a) // 0\n\n    p := &amp;t\n    p.M2()\n    println(t.a) // 11\n}\n</code></pre><p>在这个示例中，我们为基类型T定义了两个方法M1和M2，其中M1的receiver参数类型为T，而M2的receiver参数类型为*T。M1和M2方法体都通过receiver参数t对t的字段a进行了修改。</p><p>但运行这个示例程序后，我们看到，方法M1由于使用了T作为receiver参数类型，它在方法体中修改的仅仅是T类型实例t的副本，原实例并没有受到影响。因此M1调用后，输出t.a的值仍为0。</p><p>而方法M2呢，由于使用了*T作为receiver参数类型，它在方法体中通过t修改的是实例本身，因此M2调用后，t.a的值变为了11，这些输出结果与我们前面的分析是一致的。</p><p>了解了不同类型的receiver参数对Go方法的影响后，我们就可以总结一下，日常编码中选择receiver的参数类型的时候，我们可以参考哪些原则。</p><h2>选择receiver参数类型的第一个原则</h2><p>基于上面的影响分析，我们可以得到选择receiver参数类型的第一个原则：<strong>如果Go方法要把对receiver参数代表的类型实例的修改，反映到原类型实例上，那么我们应该选择*T作为receiver参数的类型</strong>。</p><p>这个原则似乎很好掌握，不过这个时候，你可能会有个疑问：如果我们选择了*T作为Go方法receiver参数的类型，那么我们是不是只能通过*T类型变量调用该方法，而不能通过T类型变量调用了呢？这个问题恰恰也是上节课我们遗留的一个问题。我们改造一下上面例子看一下：</p><pre><code class=\"language-plain\">  type T struct {\n      a int\n  }\n  \n  func (t T) M1() {\n      t.a = 10\n  }\n \n func (t *T) M2() {\n     t.a = 11\n }\n \n func main() {\n     var t1 T\n     println(t1.a) // 0\n     t1.M1()\n     println(t1.a) // 0\n     t1.M2()\n     println(t1.a) // 11\n \n     var t2 = &amp;T{}\n     println(t2.a) // 0\n     t2.M1()\n     println(t2.a) // 0\n     t2.M2()\n     println(t2.a) // 11\n }\n</code></pre><p>我们先来看看类型为T的实例t1。我们看到它不仅可以调用receiver参数类型为T的方法M1，它还可以直接调用receiver参数类型为*T的方法M2，并且调用完M2方法后，t1.a的值被修改为11了。</p><p>其实，T类型的实例t1之所以可以调用receiver参数类型为*T的方法M2，都是Go编译器在背后自动进行转换的结果。或者说，t1.M2()这种用法是Go提供的“语法糖”：Go判断t1的类型为T，也就是与方法M2的receiver参数类型*T不一致后，会自动将<code>t1.M2()</code>转换为<code>(&amp;t1).M2()</code>。</p><p>同理，类型为*T的实例t2，它不仅可以调用receiver参数类型为*T的方法M2，还可以调用receiver参数类型为T的方法M1，这同样是因为Go编译器在背后做了转换。也就是，Go判断t2的类型为*T，与方法M1的receiver参数类型T不一致，就会自动将<code>t2.M1()</code>转换为<code>(*t2).M1()</code>。</p><p>通过这个实例，我们知道了这样一个结论：<strong>无论是T类型实例，还是*T类型实例，都既可以调用receiver为T类型的方法，也可以调用receiver为*T类型的方法</strong>。这样，我们在为方法选择receiver参数的类型的时候，就不需要担心这个方法不能被与receiver参数类型不一致的类型实例调用了。</p><h2>选择receiver参数类型的第二个原则</h2><p>前面我们第一个原则说的是，当我们要在方法中对receiver参数代表的类型实例进行修改，那我们要为receiver参数选择*T类型，但是如果我们不需要在方法中对类型实例进行修改呢？这个时候我们是为receiver参数选择T类型还是*T类型呢？</p><p>这也得分情况。一般情况下，我们通常会为receiver参数选择T类型，因为这样可以缩窄外部修改类型实例内部状态的“接触面”，也就是尽量少暴露可以修改类型内部状态的方法。</p><p>不过也有一个例外需要你特别注意。考虑到Go方法调用时，receiver参数是以值拷贝的形式传入方法中的。那么，<strong>如果receiver参数类型的size较大</strong>，以值拷贝形式传入就会导致较大的性能开销，这时我们选择*T作为receiver类型可能更好些。</p><p>以上这些可以作为我们<strong>选择receiver参数类型的第二个原则</strong>。</p><p>到这里，你可能会发出感慨：即便有两个原则，这似乎依旧很容易掌握！不要大意，这可没那么简单，这两条只是基础原则，还有一条更难理解的原则在下面呢。</p><p>不过在讲解这第三条原则之前，我们先要了解一个基本概念：<strong>方法集合</strong>（Method Set），它是我们理解第三条原则的前提。</p><h2>方法集合</h2><p>在了解方法集合是什么之前，我们先通过一个示例，直观了解一下为什么要有方法集合，它主要用来解决什么问题：</p><pre><code class=\"language-plain\">type Interface interface {\n    M1()\n    M2()\n}\n\ntype T struct{}\n\nfunc (t T) M1()  {}\nfunc (t *T) M2() {}\n\nfunc main() {\n    var t T\n    var pt *T\n    var i Interface\n\n    i = pt\n    i = t // cannot use t (type T) as type Interface in assignment: T does not implement Interface (M2 method has pointer receiver)\n}\n</code></pre><p>在这个例子中，我们定义了一个接口类型Interface以及一个自定义类型T。Interface接口类型包含了两个方法M1和M2，代码中还定义了基类型为T的两个方法M1和M2，但它们的receiver参数类型不同，一个为T，另一个为*T。在main函数中，我们分别将T类型实例t和*T类型实例pt赋值给Interface类型变量i。</p><p>运行一下这个示例程序，我们在<code>i = t</code>这一行会得到Go编译器的错误提示，Go编译器提示我们：<strong>T没有实现Interface类型方法列表中的M2，因此类型T的实例t不能赋值给Interface变量</strong>。</p><p>可是，为什么呀？为什么*T类型的pt可以被正常赋值给Interface类型变量i，而T类型的t就不行呢？如果说T类型是因为只实现了M1方法，未实现M2方法而不满足Interface类型的要求，那么*T类型也只是实现了M2方法，并没有实现M1方法啊？</p><p>有些事情并不是表面看起来这个样子的。了解方法集合后，这个问题就迎刃而解了。同时，<strong>方法集合也是用来判断一个类型是否实现了某接口类型的唯一手段</strong>，可以说，“<strong>方法集合决定了接口实现</strong>”。更具体的分析，我们等会儿再讲。</p><p>那么，什么是类型的方法集合呢？</p><p>Go中任何一个类型都有属于自己的方法集合，或者说方法集合是Go类型的一个“属性”。但不是所有类型都有自己的方法呀，比如int类型就没有。所以，对于没有定义方法的Go类型，我们称其拥有空方法集合。</p><p>接口类型相对特殊，它只会列出代表接口的方法列表，不会具体定义某个方法，它的方法集合就是它的方法列表中的所有方法，我们可以一目了然地看到。因此，我们下面重点讲解的是非接口类型的方法集合。</p><p>为了方便查看一个非接口类型的方法集合，我这里提供了一个函数dumpMethodSet，用于输出一个非接口类型的方法集合：</p><pre><code class=\"language-plain\">func dumpMethodSet(i interface{}) {\n    dynTyp := reflect.TypeOf(i)\n\n    if dynTyp == nil {\n        fmt.Printf(\"there is no dynamic type\\n\")\n        return\n    }\n\n    n := dynTyp.NumMethod()\n    if n == 0 {\n        fmt.Printf(\"%s's method set is empty!\\n\", dynTyp)\n        return\n    }\n\n    fmt.Printf(\"%s's method set:\\n\", dynTyp)\n    for j := 0; j &lt; n; j++ {\n        fmt.Println(\"-\", dynTyp.Method(j).Name)\n    }\n    fmt.Printf(\"\\n\")\n}\n</code></pre><p>下面我们利用这个函数，试着输出一下Go原生类型以及自定义类型的方法集合，看下面代码：</p><pre><code class=\"language-plain\">type T struct{}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\nfunc (*T) M3() {}\nfunc (*T) M4() {}\n\nfunc main() {\n    var n int\n    dumpMethodSet(n)\n    dumpMethodSet(&amp;n)\n\n    var t T\n    dumpMethodSet(t)\n    dumpMethodSet(&amp;t)\n}\n</code></pre><p>运行这段代码，我们得到如下结果：</p><pre><code class=\"language-plain\">int's method set is empty!\n*int's method set is empty!\nmain.T's method set:\n- M1\n- M2\n\n*main.T's method set:\n- M1\n- M2\n- M3\n- M4\n</code></pre><p>我们看到以int、*int为代表的Go原生类型由于没有定义方法，所以它们的方法集合都是空的。自定义类型T定义了方法M1和M2，因此它的方法集合包含了M1和M2，也符合我们预期。但*T的方法集合中除了预期的M3和M4之外，居然还包含了类型T的方法M1和M2！</p><p>不过，这里程序的输出并没有错误。</p><p>这是因为，Go语言规定，*T类型的方法集合包含所有以*T为receiver参数类型的方法，以及所有以T为receiver参数类型的方法。这就是这个示例中为何*T类型的方法集合包含四个方法的原因。</p><p>这个时候，你是不是也找到了前面那个示例中为何<code>i = pt</code>没有报编译错误的原因了呢？我们同样可以使用dumpMethodSet工具函数，输出一下那个例子中pt与t各自所属类型的方法集合：</p><pre><code class=\"language-plain\">type Interface interface {\n    M1()\n    M2()\n}\n\ntype T struct{}\n\nfunc (t T) M1()  {}\nfunc (t *T) M2() {}\n\nfunc main() {\n    var t T\n    var pt *T\n    dumpMethodSet(t)\n    dumpMethodSet(pt)\n}\n</code></pre><p>运行上述代码，我们得到如下结果：</p><pre><code class=\"language-plain\">main.T's method set:\n- M1\n\n*main.T's method set:\n- M1\n- M2\n</code></pre><p>通过这个输出结果，我们可以一目了然地看到T、*T各自的方法集合。</p><p>我们看到，T类型的方法集合中只包含M1，没有Interface类型方法集合中的M2方法，这就是Go编译器认为变量t不能赋值给Interface类型变量的原因。</p><p>在输出的结果中，我们还看到*T类型的方法集合除了包含它自身定义的M2方法外，还包含了T类型定义的M1方法，*T的方法集合与Interface接口类型的方法集合是一样的，因此pt可以被赋值给Interface接口类型的变量i。</p><p>到这里，我们已经知道了所谓的<strong>方法集合决定接口实现</strong>的含义就是：如果某类型T的方法集合与某接口类型的方法集合相同，或者类型T的方法集合是接口类型I方法集合的超集，那么我们就说这个类型T实现了接口I。或者说，方法集合这个概念在Go语言中的主要用途，就是用来判断某个类型是否实现了某个接口。</p><p>有了方法集合的概念做铺垫，选择receiver参数类型的第三个原则已经呼之欲出了，下面我们就来看看这条原则的具体内容。</p><h2>选择receiver参数类型的第三个原则</h2><p>理解了方法集合后，我们再理解第三个原则的内容就不难了。这个原则的选择依据就是<strong>T类型是否需要实现某个接口</strong>，也就是是否存在将T类型的变量赋值给某接口类型变量的情况。</p><p>如果<strong>T类型需要实现某个接口</strong>，那我们就要使用T作为receiver参数的类型，来满足接口类型方法集合中的所有方法。</p><p>如果T不需要实现某一接口，但*T需要实现该接口，那么根据方法集合概念，*T的方法集合是包含T的方法集合的，这样我们在确定Go方法的receiver的类型时，参考原则一和原则二就可以了。</p><p>如果说前面的两个原则更多聚焦于类型内部，从单个方法的实现层面考虑，那么这第三个原则则是更多从全局的设计层面考虑，聚焦于这个类型与接口类型间的耦合关系。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>我们前面已经知道，Go方法本质上也是函数。所以Go方法设计的多数地方，都可以借鉴函数设计的相关内容。唯独Go方法的receiver部分，我们是没有现成经验可循的。这一讲中，我们主要学习的就是如何为Go方法的receiver参数选择类型。</p><p>我们先了解了不同类型的receiver参数对Go方法行为的影响，这是我们进行receiver参数选型的前提。</p><p>在这个前提下，我们提出了receiver参数选型的三个经验原则，虽然课程中我们是按原则一到三的顺序讲解的，<strong>但实际进行Go方法设计时，我们首先应该考虑的是原则三，即T类型是否要实现某一接口。</strong></p><p>如果T类型需要实现某一接口的全部方法，那么我们就需要使用T作为receiver参数的类型来满足接口类型方法集合中的所有方法。</p><p>如果T类型不需要实现某一接口，那么我们就可以参考原则一和原则二来为receiver参数选择类型了。也就是，如果Go方法要把对receiver参数所代表的类型实例的修改反映到原类型实例上，那么我们应该选择*T作为receiver参数的类型。否则通常我们会为receiver参数选择T类型，这样可以减少外部修改类型实例内部状态的“渠道”。除非receiver参数类型的size较大，考虑到传值的较大性能开销，选择*T作为receiver类型可能更适合。</p><p>在理解原则三时，我们还介绍了Go语言中的一个重要概念：<strong>方法集合</strong>。它在Go语言中的主要用途就是判断某个类型是否实现了某个接口。方法集合像“胶水”一样，将自定义类型与接口隐式地“粘结”在一起，我们后面理解带有类型嵌入的类型时还会借助这个概念。</p><h2>思考题</h2><p>方法集合是一个很重要也很实用的概念，我们在下一节课还会用到这个概念帮助我们理解具体的问题。所以这里，我给你出了一道与方法集合有关的预习题。</p><p>如果一个类型T包含两个方法M1和M2：</p><pre><code class=\"language-plain\">type T struct{}\n\nfunc (T) M1()\nfunc (T) M2()\n</code></pre><p>然后，我们再使用类型定义语法，又基于类型T定义了一个新类型S：</p><pre><code class=\"language-plain\">type S T\n</code></pre><p>那么，这个S类型包含哪些方法呢？*S类型又包含哪些方法呢？请你自己分析一下，然后借助dumpMethodSet函数来验证一下你的结论。</p><p>欢迎你把这节课分享给更多对Go方法感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"24｜方法：理解“方法”的本质","id":465174},"right":{"article_title":"26｜方法：如何用类型嵌入模拟实现“继承”？","id":467225}},"comments":[{"had_liked":false,"id":325767,"user_name":"Geek_99b47c","can_delete":false,"product_type":"c1","uid":2049562,"ip_address":"","ucode":"D25E22C1D84E09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aQmhiahazRFUA4W3r1hdxxreSB5Pl54IwAJ8bwN6j02lzicydWAfPFbWx1LSFtzXH8MkI0jUKjlpUtmQBoZ4kReA/132","comment_is_top":false,"comment_ctime":1639122603,"is_pvip":false,"replies":[{"id":"119092","content":"👍，抢答正确:)","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640054707,"ip_address":"","comment_id":325767,"utype":1}],"discussion_count":3,"race_medal":0,"score":"216387487403","product_id":100093501,"comment_content":"S 类型 和 *S 类型都没有包含方法，因为type S T 定义了一个新类型。<br>但是如果用 type S = T 则S和*S类型都包含两个方法。","like_count":51,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540417,"discussion_content":"👍，抢答正确:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537818,"discussion_content":"同学总结的不错。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639208373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363671,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","nickname":"不负青春不负己🤘","note":"","ucode":"A6DD8E8B20EA6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538435,"discussion_content":"确实是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639405167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325698,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1639100921,"is_pvip":false,"replies":[{"id":"118803","content":"是有点这种感觉哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639804353,"ip_address":"","comment_id":325698,"utype":1}],"discussion_count":4,"race_medal":2,"score":"78948512249","product_id":100093501,"comment_content":"其实相比 Rust，Go 的糖更少，而且时而多，时而少，让开发者会很困惑，甚至前后矛盾。*T 和 T调用方法时编译器互相转换，哇，真贴心，真舒服。但是方法集合，又被 Go 反手打了一巴掌。的确解决了 C 语言的诸多问题，但对比 Rust 的一些处理方案，的确会让人不爽。","like_count":19,"discussions":[{"author":{"id":1037891,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","nickname":"cc","note":"","ucode":"68E69205A7D5BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563894,"discussion_content":"是感到很困惑，行为不一致...","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1650107742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537801,"discussion_content":"感觉并不矛盾，分清楚调用时的优化，和接口赋值的要求，我感觉就不冲突","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639198308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539676,"discussion_content":"是有点这种感觉哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639804353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537819,"discussion_content":"老师你是怎么看这个问题的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639208560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325703,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1639102015,"is_pvip":false,"replies":[{"id":"118797","content":"我再举例说一下“如果 T 类型需要实现某个接口” 这句的含义。现在有一个接口类型I，一个自定义非接口类型T，这句的含义就是 我们希望 <br><br>var i I <br>var t T<br>i = t<br><br>这段代码是ok的。即t可以赋值给i。<br><br>如果是*T实现了I，那么不能保证T也会实现I。所以我们在设计一个自定义类型T的方法时，考虑是否T需要实现某个接口。如果需要，方法receiver参数的类型应该是T。如果T不需要，那么用*T或T就都可以了。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639804185,"ip_address":"","comment_id":325703,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31703873087","product_id":100093501,"comment_content":"老师：<br>如果 T 类型需要实现某个接口，那我们就要使用 T 作为 receiver 参数的类型，来满足接口类型方法集合中的所有方法。<br>这段描述感觉不对，根据上面举的例子来说，应该是使用 *T 作为 receiver参数的类型，来满足接口类型方法集合中的所有方法。","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539670,"discussion_content":"我再举例说一下“如果 T 类型需要实现某个接口” 这句的含义。现在有一个接口类型I，一个自定义非接口类型T，这句的含义就是 我们希望 \n\nvar i I \nvar t T\ni = t\n\n这段代码是ok的。即t可以赋值给i。\n\n如果是*T实现了I，那么不能保证T也会实现I。所以我们在设计一个自定义类型T的方法时，考虑是否T需要实现某个接口。如果需要，方法receiver参数的类型应该是T。如果T不需要，那么用*T或T就都可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538055,"discussion_content":"这里确实有点绕哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639316059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537817,"discussion_content":"老师表述的没有问题吧？ 这里的前提是想要用T类型来实现接口呀。而不是*T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639208016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2855599,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/92/af/ad02ae4b.jpg","nickname":"扣剑书生","note":"","ucode":"6F5FD189D2916C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537651,"discussion_content":"注意理解老师说的下一句的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639129310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325844,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1639190403,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"18819059587","product_id":100093501,"comment_content":"对于 类型 T 能不能 使用 *T 的方式，取决于 T 类型是不是可寻址的，在方法集合中也体现出来了，默认 T 类型是不包含 *T 的方法的","like_count":4,"discussions":[{"author":{"id":2712334,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/pWlCcThica6hHNnzw1Nj76otnzq5eo6lAkVr8kEy8ZV22Y01hPseJGPDt4K45xANMKY9a33YqjEmskIwQf0hkWg/132","nickname":"Geek_0827c6","note":"","ucode":"19D7C50E46BE9F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572720,"discussion_content":"临时变量不可寻址, map 元素也是, \n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652930620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325872,"user_name":"左耳朵东","can_delete":false,"product_type":"c1","uid":1160678,"ip_address":"","ucode":"60134ACF12BB52","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","comment_is_top":false,"comment_ctime":1639206631,"is_pvip":false,"replies":[{"id":"119086","content":"其实这里的“T类型是否要实现接口”的含义是是否存在将T类型值赋值给接口类型的情况。如果存在，则必须用T作为receiver，如果不存在，按原则1和2。我让编辑更新了原文，增加了说明。希望增加后大家理解起来更容易些。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640054388,"ip_address":"","comment_id":325872,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14524108519","product_id":100093501,"comment_content":"如果因为 T 类型需要实现某一接口而使用 T 作为 receiver 参数的类型，那如果我想把在方法里对 t 的修改反映到原 T 类型实例上，何做到呢？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540411,"discussion_content":"其实这里的“T类型是否要实现接口”的含义是是否存在将T类型值赋值给接口类型的情况。如果存在，则必须用T作为receiver，如果不存在，按原则1和2。我让编辑更新了原文，增加了说明。希望增加后大家理解起来更容易些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540775,"discussion_content":"老师，那如果确实要用T来做receiver，就是存在将T类型值赋值给接口类型的情况，又想把方法内的修改反映到方法外的原实例上，就像这个同学说的那样，应该怎么做呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640161379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540411,"ip_address":""},"score":540775,"extra":""}]},{"author":{"id":2735072,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","nickname":"Bynow","note":"","ucode":"1E4F3ADD65CF18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538507,"discussion_content":"接收*T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639416352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538139,"discussion_content":"使用*T作为receiver或者额外增加一个*T为receiver的method","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639334459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537866,"discussion_content":"同学，这个问题问的不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639231404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325807,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1639142961,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"14524044849","product_id":100093501,"comment_content":"*T 会把修改反应到原类型实例；*T 会对性能开销有关系；T 和 *T 的方法会隐式转换；实际进行 Go 方法设计时，我们首先应该考虑的是原则三，即 T 类型是否要实现某一接口，如要实现某一接口，使用 T 作为 receiver 参数的类型，来满足接口类型方法集合中的所有方法。","like_count":3},{"had_liked":false,"id":325826,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","comment_is_top":false,"comment_ctime":1639155533,"is_pvip":false,"replies":[{"id":"118819","content":"能不能得到非导出方法的信息取决于reflect包是否提供对应的能力，要不留个作业：探索一下reflect包，看是否能得到非导出方法的列表。:)","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639804932,"ip_address":"","comment_id":325826,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10229090125","product_id":100093501,"comment_content":"老师，dumpMethodSet 函数只能统计导出方法的，有没有办法把非导出方法的也统计出来？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539692,"discussion_content":"能不能得到非导出方法的信息取决于reflect包是否提供对应的能力，要不留个作业：探索一下reflect包，看是否能得到非导出方法的列表。:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/86/dba8214e.jpg","nickname":"星期三。","note":"","ucode":"EF3C461AB5399D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553226,"discussion_content":"未导出的字段是可以获取到的，但是未导出的方法列表是获取不到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645774242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325745,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1639114997,"is_pvip":false,"replies":[{"id":"119091","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640054688,"ip_address":"","comment_id":325745,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10229049589","product_id":100093501,"comment_content":"S类型和*S类型都是 空方法，因为S是新的类型，它不能调用T的方法，必须显示转换之后才可以调用，所以本身的S或*S类型都不具有任何的方法","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540416,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325922,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1639232189,"is_pvip":false,"replies":[{"id":"119093","content":"问题1和问题2： go弱化了指针的作用，因此大纲里没有专门讲指针，看来必须用一篇加餐把指针好好说一下了。<br><br>问题3：那句英文是一个提醒。提醒的是NumMethod对于interface类型来说，其统计的方法数量包含非导出方法。<br><br>问题4： 的确是表述不精确的问题，我让编辑老师改一下。","user_name":"作者回复","user_name_real":"作者","uid":"1026224","ctime":1640055251,"ip_address":"","comment_id":325922,"utype":1}],"discussion_count":5,"race_medal":0,"score":"5934199485","product_id":100093501,"comment_content":"追更老师的文章到现在，解答了我之前很多的困惑。也发现了一些新问题，希望老师抽空解答一下。<br><br>1. var t1 T   t2 := &amp;t   和  var t2 = &amp;T{} ，这两种对结构体 T 的实例化方式有什么区别呢？ 我从别的语言转到Go，就是很多时候被Go的一些奇奇怪怪的写法绕晕了。<br><br>2. &amp; 和 * 能不能 单独好好讲讲，看Go的代码，都是满屏的 &amp; 和 * ，对于动态语言的人来说，真的很难适应。<br><br>3. 文中的 NumMethod 方法，我点开方法的源码处的注释部分，这么写：“Note that NumMethod counts unexported methods only for interface types.”  这里的 unexported 代表的是未导出的意思，应该统计的是未导出的方法，但是我看文中统计了 导出方法的个数，感觉不理解。<br><br>4. 文中说：“Interface 接口类型包含了两个方法 M1 和 M2，它们的基类型都是 T。 ”  我想的是这句话表述有问题的，仅仅才接口的方法列表中，是看不出它们的基类型的呀。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540419,"discussion_content":"问题1和问题2： go弱化了指针的作用，因此大纲里没有专门讲指针，看来必须用一篇加餐把指针好好说一下了。\n\n问题3：那句英文是一个提醒。提醒的是NumMethod对于interface类型来说，其统计的方法数量包含非导出方法。\n\n问题4： 的确是表述不精确的问题，我让编辑老师改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640055251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735072,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","nickname":"Bynow","note":"","ucode":"1E4F3ADD65CF18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538506,"discussion_content":"建议先看下go 入门教程并且用gin写个小东西，感受下，再来看比较好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639416266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2735072,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","nickname":"Bynow","note":"","ucode":"1E4F3ADD65CF18","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539480,"discussion_content":"谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639727375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538506,"ip_address":""},"score":539480,"extra":""}]},{"author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538141,"discussion_content":"1. 后者就是简写吧  3. 注释的意思是只有接口类型在调用NumMethod时会额外统计unexported方法的数量，其他的类型不会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639335622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1184102,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","nickname":"Geralt","note":"","ucode":"2F31ED777D06A0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":538225,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639373606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538141,"ip_address":""},"score":538225,"extra":""}]}]},{"had_liked":false,"id":325827,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","comment_is_top":false,"comment_ctime":1639156064,"is_pvip":false,"replies":[{"id":"118806","content":"嵌入多个不同类型呗，你要说的“实现”是这样的么:)","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639804386,"ip_address":"","comment_id":325827,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5934123360","product_id":100093501,"comment_content":"老师，go 方法可以“多实现”（“多继承”）吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539679,"discussion_content":"嵌入多个不同类型呗，你要说的“实现”是这样的么:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537805,"discussion_content":"通过实现 Interface 可以达到 Java 中：继承、多态的效果，搜索了半天写出的代码\n\n```go\npackage main\n\nimport &#34;fmt&#34;\n\ntype Game interface {\n\tFullName() string\n}\n\ntype LoL struct {\n\tName string\n}\n\ntype Diablo3 struct {\n\tName string\n}\n\nfunc (g LoL) FullName() string {\n\treturn g.Name\n}\n\nfunc (g Diablo3) FullName() string {\n\treturn g.Name\n}\n\nfunc ShowName(g Game) {\n\tfmt.Println(&#34;接口的威力 &#34;, g.FullName())\n}\n\nfunc main() {\n\tlol := LoL{&#34;英雄联盟&#34;}\n\tShowName(lol)\n\n\tdiablo := Diablo3{&#34;暗黑破壞神III&#34;}\n\tShowName(diablo)\n}\n```","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639200887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537821,"discussion_content":"同学，你的这个代码最多能体现出来的是多实现的概念吧？ 楼主的意思是还有多继承呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639209179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537805,"ip_address":""},"score":537821,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537836,"discussion_content":"实现继承类中的接口，就能实现继承","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639215698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537821,"ip_address":""},"score":537836,"extra":""}]}]},{"had_liked":false,"id":325795,"user_name":"哈哈哈哈哈","can_delete":false,"product_type":"c1","uid":2828322,"ip_address":"","ucode":"0350A8A8A3DD74","user_header":"https://static001.geekbang.org/account/avatar/00/2b/28/22/ebc770dc.jpg","comment_is_top":false,"comment_ctime":1639132511,"is_pvip":false,"replies":[{"id":"119088","content":"&amp;是取地址操作符。这样t2这个变量的实际类型为*T，即T类型的指针类型。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640054533,"ip_address":"","comment_id":325795,"utype":1}],"discussion_count":7,"race_medal":0,"score":"5934099807","product_id":100093501,"comment_content":" var t2 = &amp;T{} 中＆是什么意思？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540413,"discussion_content":"&amp;是取地址操作符。这样t2这个变量的实际类型为*T，即T类型的指针类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539216,"discussion_content":"1、&amp; 取址符，表示取 T{} 的地址（指针）；\n2、* 在两种情况：\n1）用在类型前表示这个类型的指针类型，如 *T，表示类型 T 的指针类型；\n2）用在指针的常量或变量中时表示“取值符”，表示取这个指针对应的地址存放的原类型的常量或变量的值，如有一个指针变量 t := *T，取它的值：v := *t","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639643885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540506,"discussion_content":"总结的不错，同学。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640072161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539216,"ip_address":""},"score":540506,"extra":""},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585788,"discussion_content":"第二条有点瑕疵，可能是笔误吧。   如有一个指针变量  t := &amp;i   v:=*t  表示取t代表的内存地址中的值， 指针的指针也同理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661826846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539216,"ip_address":"美国"},"score":585788,"extra":""}]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539217,"discussion_content":"总结的不知道对不对，希望老师（@Tony Bai）和各位同学可以指点一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639643958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125662,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2d/1e/4a93ebb5.jpg","nickname":"Aaron Liu","note":"","ucode":"DECCD16350C2A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537856,"discussion_content":"这是一颗糖🍬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639226508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537806,"discussion_content":"获取指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639201170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325789,"user_name":"Geek_0b92d9","can_delete":false,"product_type":"c1","uid":2835237,"ip_address":"","ucode":"9212443F63B64B","user_header":"","comment_is_top":false,"comment_ctime":1639130319,"is_pvip":true,"replies":[{"id":"119089","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640054639,"ip_address":"","comment_id":325789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934097615","product_id":100093501,"comment_content":"都是空方法集合。并没有定义 receiver 为 S 或者 &amp;S 的方法","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540414,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325705,"user_name":"叶鑫","can_delete":false,"product_type":"c1","uid":2398283,"ip_address":"","ucode":"E455E77BF498CE","user_header":"https://static001.geekbang.org/account/avatar/00/24/98/4b/39908079.jpg","comment_is_top":false,"comment_ctime":1639102353,"is_pvip":false,"replies":[{"id":"118609","content":":)","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639564272,"ip_address":"","comment_id":325705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934069649","product_id":100093501,"comment_content":"真是太棒了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538963,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639564272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325701,"user_name":"无双","can_delete":false,"product_type":"c1","uid":1238757,"ip_address":"","ucode":"405779043D091E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/e5/e3daa1a7.jpg","comment_is_top":false,"comment_ctime":1639101405,"is_pvip":false,"replies":[{"id":"118801","content":"go语言弱化了指针的作用。至少指针没有在c中地位那么高。所以大纲没有安排，后续看是否用加餐补充吧。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1639804310,"ip_address":"","comment_id":325701,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5934068701","product_id":100093501,"comment_content":"可以讲一下go的指针吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539674,"discussion_content":"go语言弱化了指针的作用。至少指针没有在c中地位那么高。所以大纲没有安排，后续看是否用加餐补充吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537655,"discussion_content":"go语言指针是阉割版， 有啥好讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639130365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354913,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"北京","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1660878866,"is_pvip":true,"replies":[{"id":"129106","content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1660894874,"ip_address":"北京","comment_id":354913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1660878866","product_id":100093501,"comment_content":"思考题回答：type S T  相当于定义了一个新的类型，和T是完全不同的类型，测试结果，main.S&#39;s method set is empty!<br>*main.S&#39;s method set is empty!<br><br>","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584527,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660894874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351581,"user_name":"Return12321","can_delete":false,"product_type":"c1","uid":1134694,"ip_address":"","ucode":"F7A3C5ED02E1D9","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","comment_is_top":false,"comment_ctime":1657956010,"is_pvip":false,"replies":[{"id":"127896","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1658096423,"ip_address":"","comment_id":351581,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657956010","product_id":100093501,"comment_content":"func main() {<br>\ttype S T<br>\tvar s1 S<br>\ttool.DumpMethodSet(s1)<br>\ttool.DumpMethodSet(&amp;s1)<br><br>\ttype L = T<br>\tvar l1 L<br>\ttool.DumpMethodSet(l1)<br>\ttool.DumpMethodSet(&amp;l1)<br>}<br><br>output：<br>main.S&#39;s method set is empty<br>*main.S&#39;s method set is empty<br>main.T&#39;s method set:<br>- M1<br>- M2<br><br>*main.T&#39;s method set:<br>- M1<br>- M2<br>- M3<br>- M4<br><br>type S T 定义了一个新类型","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580315,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658096424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343911,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1651116608,"is_pvip":true,"replies":[{"id":"125654","content":"是的。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1651270683,"ip_address":"","comment_id":343911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651116608","product_id":100093501,"comment_content":"S&#39;s method set is empty!<br>*S&#39;s method set is empty!<br>我的理解是type S T是定义了一个新类型。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568935,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651270683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333564,"user_name":"白辉","can_delete":false,"product_type":"c1","uid":2841731,"ip_address":"","ucode":"F587062FA2AACF","user_header":"","comment_is_top":false,"comment_ctime":1644406925,"is_pvip":false,"replies":[{"id":"121974","content":"T类型的实例可以调用receiver 为 *T 类型的方法 =&gt; 这个是go语法糖，不要与方法集合的概念弄混。方法集合更多用于决定是否实现了某个接口。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1644591536,"ip_address":"","comment_id":333564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644406925","product_id":100093501,"comment_content":"老师，您好，根据本节课内容有如下两个结论，那么T类型的实例可以调用receiver 为 *T 类型的方法，不能说明T类型的方法集合包含*T类型的方法吗？<br><br>1 通过这个实例，我们知道了这样一个结论：无论是 T 类型实例，还是 *T 类型实例，都既可以调用 receiver 为 T 类型的方法，也可以调用 receiver 为 *T 类型的方法。<br>2  Go 语言规定，*T 类型的方法集合包含所有以 *T 为 receiver 参数类型的方法，以及所有以 T 为 receiver 参数类型的方法。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550570,"discussion_content":"T类型的实例可以调用receiver 为 *T 类型的方法 =&gt; 这个是go语法糖，不要与方法集合的概念弄混。方法集合更多用于决定是否实现了某个接口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644591536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329596,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1641439966,"is_pvip":true,"replies":[{"id":"120476","content":"1. 好像没有这个优化。<br>2. 我不能确定，但你的想法很新颖。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1642040768,"ip_address":"","comment_id":329596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641439966","product_id":100093501,"comment_content":"白老师，这课有两个疑问：<br>1. 当函数传递T类型的参数时，编译有办法判断对T类型是否有修改吗？如果没有修改的话，是否可以把参数转化为类似常量指针的方式引用，例如传递一个数组，如果没对数组修改 ，完全可以只传递一个指针。<br>2. 对于receiver选择的原则三：对T类型的限制比 *T 类型多，是不是因为有些时候一个T类型的对象无法获取它的地址，例如const 对象，但是一个T的指针类型，总是可以转换为 T类型的对象。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545692,"discussion_content":"1. 好像没有这个优化。\n2. 我不能确定，但你的想法很新颖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642040768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328407,"user_name":"River","can_delete":false,"product_type":"c1","uid":1915496,"ip_address":"","ucode":"F194C87D8AA306","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/68/373b90c8.jpg","comment_is_top":false,"comment_ctime":1640706358,"is_pvip":false,"replies":[{"id":"120417","content":"t2类型为*T，即它是一个指针类型的变量。在指针类型变量前面加上*号，即*t2。这个操作叫指针的解引用操作，即返回指针所指的内存地址中的对象的值。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1641996449,"ip_address":"","comment_id":328407,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640706358","product_id":100093501,"comment_content":"&quot;同理，类型为 *T 的实例 t2，它不仅可以调用 receiver 参数类型为 *T 的方法 M2，还可以调用 receiver 参数类型为 T 的方法 M1，这同样是因为 Go 编译器在背后做了转换。也就是，Go 判断 t2 的类型为 *T，与方法 M1 的 receiver 参数类型 T 不一致，就会自动将t2.M1()转换为(*t2).M1()。&quot;<br>老师这一段最后，（*t2）等于T类型了吗？前面（&amp;t1）等于*T类型好理解，*号对于类型和类型实例用法不一样吗？这个确实懵","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545569,"discussion_content":"t2类型为*T，即它是一个指针类型的变量。在指针类型变量前面加上*号，即*t2。这个操作叫指针的解引用操作，即返回指针所指的内存地址中的对象的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641996449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326792,"user_name":"JabariH","can_delete":false,"product_type":"c1","uid":1983181,"ip_address":"","ucode":"F7CC3390CDB6AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/42/cd/09b568fc.jpg","comment_is_top":false,"comment_ctime":1639702151,"is_pvip":false,"replies":[{"id":"119115","content":"jupyter lab没用过，但它的输出应该有误。<br><br>$go version<br>go version go1.16.5 darwin&#47;amd64<br><br> $go run testmethodset1.go<br>int&#39;s method set is empty!<br>*int&#39;s method set is empty!<br>main.T&#39;s method set:<br>- M1<br>- M2<br><br>*main.T&#39;s method set:<br>- M1<br>- M2<br>- M3<br>- M4<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640061242,"ip_address":"","comment_id":326792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639702151","product_id":100093501,"comment_content":"# go version: 1.16.5<br>func dumpMethodSet(i interface{}) {<br>    dynTyp := reflect.TypeOf(i)<br><br>    if dynTyp == nil {<br>        fmt.Printf(&quot;there is no dynamic type\\n&quot;)<br>        return<br>    }<br><br>    n := dynTyp.NumMethod()<br>    if n == 0 {<br>        fmt.Printf(&quot;%s&#39;s method set is empty!\\n&quot;, dynTyp)<br>        return<br>    }<br><br>    fmt.Printf(&quot;%s&#39;s method set:\\n&quot;, dynTyp)<br>    for j := 0; j &lt; n; j++ {<br>        fmt.Println(&quot;-&quot;, dynTyp.Method(j).Name)<br>    }<br>    fmt.Printf(&quot;\\n&quot;)<br>}<br><br>type T struct{}<br><br>func (T) M1() {}<br>func (T) M2() {}<br><br>func (*T) M3() {}<br>func (*T) M4() {}<br><br>func main() {<br>    var n int<br>    dumpMethodSet(n)<br>    dumpMethodSet(&amp;n)<br><br>    var t T<br>    dumpMethodSet(t)<br>    dumpMethodSet(&amp;t)<br>}<br><br>main()<br><br>在jupyter lab上的go kernel输出的是：<br>int&#39;s method set is empty!<br>*int&#39;s method set is empty!<br>struct {}&#39;s method set is empty!<br>*struct {}&#39;s method set is empty!<br><br>用的是go 1.16.5。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540466,"discussion_content":"jupyter lab没用过，但它的输出应该有误。\n\n$go version\ngo version go1.16.5 darwin/amd64\n\n $go run testmethodset1.go\nint&#39;s method set is empty!\n*int&#39;s method set is empty!\nmain.T&#39;s method set:\n- M1\n- M2\n\n*main.T&#39;s method set:\n- M1\n- M2\n- M3\n- M4\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640061242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326205,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1639419549,"is_pvip":true,"replies":[{"id":"119067","content":"其实你这个例子里，已经包含了对第三个原则的判断过程，那就是T不需要实现 Interface 接口，于是决策过程才会继续去考虑第一个原则。","user_name":"作者回复","user_name_real":"编辑","uid":"1026224","ctime":1640039197,"ip_address":"","comment_id":326205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639419549","product_id":100093501,"comment_content":"原则三：“如果 T 类型需要实现某一接口的全部方法，那么我们就需要使用 T 作为 receiver 参数的类型来满足接口类型方法集合中的所有方法。”<br><br>似乎这是一句正确的废话？<br><br>“实际进行 Go 方法设计时，我们首先应该考虑的是原则三，即 T 类型是否要实现某一接口”。这似乎也是有问题的。假设有这样的定义：<br><br>type Interface interface {<br>\tGet() int<br>\tSet(n int)<br>}<br><br>type T struct {<br>\ta int<br>}<br><br>按照原则三，T要实现Interface的话就要实现receiver为T的方法：<br><br>func (t T) Get() int {<br>\treturn t.a<br>}<br><br>func (t T) Set(n int) {<br>\tt.a = n<br>}<br><br>但这样写没有实际意义，因为接口中Set()方法的语义隐含着要实现receiver为*T的方法。即此时需先通过原则一判断T是否要实现接口。<br>","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540353,"discussion_content":"其实你这个例子里，已经包含了对第三个原则的判断过程，那就是T不需要实现 Interface 接口，于是决策过程才会继续去考虑第一个原则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640039197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}