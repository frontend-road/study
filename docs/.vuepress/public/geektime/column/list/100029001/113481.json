{"id":113481,"title":"31 | 时代之风（下）：HTTP/2内核剖析","content":"<p>今天我们继续上一讲的话题，深入HTTP/2协议的内部，看看它的实现细节。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/17/8903a45c632b64c220299d5bc64ef717.png?wh=1142*586\" alt=\"\"></p><p>这次实验环境的URI是“/31-1”，我用Wireshark把请求响应的过程抓包存了下来，文件放在GitHub的“wireshark”目录。今天我们就对照着抓包来实地讲解HTTP/2的头部压缩、二进制帧等特性。</p><h2>连接前言</h2><p>由于HTTP/2“事实上”是基于TLS，所以在正式收发数据之前，会有TCP握手和TLS握手，这两个步骤相信你一定已经很熟悉了，所以这里就略过去不再细说。</p><p>TLS握手成功之后，客户端必须要发送一个“<strong>连接前言</strong>”（connection preface），用来确认建立HTTP/2连接。</p><p>这个“连接前言”是标准的HTTP/1请求报文，使用纯文本的ASCII码格式，请求方法是特别注册的一个关键字“PRI”，全文只有24个字节：</p><pre><code>PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\n</code></pre><p>在Wireshark里，HTTP/2的“连接前言”被称为“<strong>Magic</strong>”，意思就是“不可知的魔法”。</p><p>所以，就不要问“为什么会是这样”了，只要服务器收到这个“有魔力的字符串”，就知道客户端在TLS上想要的是HTTP/2协议，而不是其他别的协议，后面就会都使用HTTP/2的数据格式。</p><!-- [[[read_end]]] --><h2>头部压缩</h2><p>确立了连接之后，HTTP/2就开始准备请求报文。</p><p>因为语义上它与HTTP/1兼容，所以报文还是由“Header+Body”构成的，但在请求发送前，必须要用“<strong>HPACK</strong>”算法来压缩头部数据。</p><p>“HPACK”算法是专门为压缩HTTP头部定制的算法，与gzip、zlib等压缩算法不同，它是一个“有状态”的算法，需要客户端和服务器各自维护一份“索引表”，也可以说是“字典”（这有点类似brotli），压缩和解压缩就是查表和更新表的操作。</p><p>为了方便管理和压缩，HTTP/2废除了原有的起始行概念，把起始行里面的请求方法、URI、状态码等统一转换成了头字段的形式，并且给这些“不是头字段的头字段”起了个特别的名字——“<strong>伪头字段</strong>”（pseudo-header fields）。而起始行里的版本号和错误原因短语因为没什么大用，顺便也给废除了。</p><p>为了与“真头字段”区分开来，这些“伪头字段”会在名字前加一个“:”，比如“:authority” “:method” “:status”，分别表示的是域名、请求方法和状态码。</p><p>现在HTTP报文头就简单了，全都是“Key-Value”形式的字段，于是HTTP/2就为一些最常用的头字段定义了一个只读的“<strong>静态表</strong>”（Static Table）。</p><p>下面的这个表格列出了“静态表”的一部分，这样只要查表就可以知道字段名和对应的值，比如数字“2”代表“GET”，数字“8”代表状态码200。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/0c/769dcf953ddafc4573a0b4c3f0321f0c.png?wh=1142*719\" alt=\"\"></p><p>但如果表里只有Key没有Value，或者是自定义字段根本找不到该怎么办呢？</p><p>这就要用到“<strong>动态表</strong>”（Dynamic Table），它添加在静态表后面，结构相同，但会在编码解码的时候随时更新。</p><p>比如说，第一次发送请求时的“user-agent”字段长是一百多个字节，用哈夫曼压缩编码发送之后，客户端和服务器都更新自己的动态表，添加一个新的索引号“65”。那么下一次发送的时候就不用再重复发那么多字节了，只要用一个字节发送编号就好。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/6f/5fa90e123c68855140e2b40f4f73c56f.png?wh=1142*357\" alt=\"\"></p><p>你可以想象得出来，随着在HTTP/2连接上发送的报文越来越多，两边的“字典”也会越来越丰富，最终每次的头部字段都会变成一两个字节的代码，原来上千字节的头用几十个字节就可以表示了，压缩效果比gzip要好得多。</p><h2>二进制帧</h2><p>头部数据压缩之后，HTTP/2就要把报文拆成二进制的帧准备发送。</p><p>HTTP/2的帧结构有点类似TCP的段或者TLS里的记录，但报头很小，只有9字节，非常地节省（可以对比一下TCP头，它最少是20个字节）。</p><p>二进制的格式也保证了不会有歧义，而且使用位运算能够非常简单高效地解析。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/e3/615b49f9d13de718a34b9b98359066e3.png?wh=1142*575\" alt=\"\"></p><p>帧开头是3个字节的<strong>长度</strong>（但不包括头的9个字节），默认上限是2^14，最大是2^24，也就是说HTTP/2的帧通常不超过16K，最大是16M。</p><p>长度后面的一个字节是<strong>帧类型</strong>，大致可以分成<strong>数据帧</strong>和<strong>控制帧</strong>两类，HEADERS帧和DATA帧属于数据帧，存放的是HTTP报文，而SETTINGS、PING、PRIORITY等则是用来管理流的控制帧。</p><p>HTTP/2总共定义了10种类型的帧，但一个字节可以表示最多256种，所以也允许在标准之外定义其他类型实现功能扩展。这就有点像TLS里扩展协议的意思了，比如Google的gRPC就利用了这个特点，定义了几种自用的新帧类型。</p><p>第5个字节是非常重要的<strong>帧标志</strong>信息，可以保存8个标志位，携带简单的控制信息。常用的标志位有<strong>END_HEADERS</strong>表示头数据结束，相当于HTTP/1里头后的空行（“\\r\\n”），<strong>END_STREAM</strong>表示单方向数据发送结束（即EOS，End of Stream），相当于HTTP/1里Chunked分块结束标志（“0\\r\\n\\r\\n”）。</p><p>报文头里最后4个字节是<strong>流标识符</strong>，也就是帧所属的“流”，接收方使用它就可以从乱序的帧里识别出具有相同流ID的帧序列，按顺序组装起来就实现了虚拟的“流”。</p><p>流标识符虽然有4个字节，但最高位被保留不用，所以只有31位可以使用，也就是说，流标识符的上限是2^31，大约是21亿。</p><p>好了，把二进制头理清楚后，我们来看一下Wireshark抓包的帧实例：</p><p><img src=\"https://static001.geekbang.org/resource/image/57/03/57b0d1814567e6317c8de1e3c04b7503.png?wh=1142*585\" alt=\"\"></p><p>在这个帧里，开头的三个字节是“00010a”，表示数据长度是266字节。</p><p>帧类型是1，表示HEADERS帧，负载（payload）里面存放的是被HPACK算法压缩的头部信息。</p><p>标志位是0x25，转换成二进制有3个位被置1。PRIORITY表示设置了流的优先级，END_HEADERS表示这一个帧就是完整的头数据，END_STREAM表示单方向数据发送结束，后续再不会有数据帧（即请求报文完毕，不会再有DATA帧/Body数据）。</p><p>最后4个字节的流标识符是整数1，表示这是客户端发起的第一个流，后面的响应数据帧也会是这个ID，也就是说在stream[1]里完成这个请求响应。</p><h2>流与多路复用</h2><p>弄清楚了帧结构后我们就来看HTTP/2的流与多路复用，它是HTTP/2最核心的部分。</p><p>在上一讲里我简单介绍了流的概念，不知道你“悟”得怎么样了？这里我再重复一遍：<strong>流是二进制帧的双向传输序列</strong>。</p><p>要搞明白流，关键是要理解帧头里的流ID。</p><p>在HTTP/2连接上，虽然帧是乱序收发的，但只要它们都拥有相同的流ID，就都属于一个流，而且在这个流里帧不是无序的，而是有着严格的先后顺序。</p><p>比如在这次的Wireshark抓包里，就有“0、1、3”一共三个流，实际上就是分配了三个流ID号，把这些帧按编号分组，再排一下队，就成了流。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/33/688630945be2dd51ca62515ae498db33.png?wh=1142*598\" alt=\"\"></p><p>在概念上，一个HTTP/2的流就等同于一个HTTP/1里的“请求-应答”。在HTTP/1里一个“请求-响应”报文来回是一次HTTP通信，在HTTP/2里一个流也承载了相同的功能。</p><p>你还可以对照着TCP来理解。TCP运行在IP之上，其实从MAC层、IP层的角度来看，TCP的“连接”概念也是“虚拟”的。但从功能上看，无论是HTTP/2的流，还是TCP的连接，都是实际存在的，所以你以后大可不必再纠结于流的“虚拟”性，把它当做是一个真实存在的实体来理解就好。</p><p>HTTP/2的流有哪些特点呢？我给你简单列了一下：</p><ol>\n<li>流是可并发的，一个HTTP/2连接上可以同时发出多个流传输数据，也就是并发多请求，实现“多路复用”；</li>\n<li>客户端和服务器都可以创建流，双方互不干扰；</li>\n<li>流是双向的，一个流里面客户端和服务器都可以发送或接收数据帧，也就是一个“请求-应答”来回；</li>\n<li>流之间没有固定关系，彼此独立，但流内部的帧是有严格顺序的；</li>\n<li>流可以设置优先级，让服务器优先处理，比如先传HTML/CSS，后传图片，优化用户体验；</li>\n<li>流ID不能重用，只能顺序递增，客户端发起的ID是奇数，服务器端发起的ID是偶数；</li>\n<li>在流上发送“RST_STREAM”帧可以随时终止流，取消接收或发送；</li>\n<li>第0号流比较特殊，不能关闭，也不能发送数据帧，只能发送控制帧，用于流量控制。</li>\n</ol><p>这里我又画了一张图，把上次的图略改了一下，显示了连接中无序的帧是如何依据流ID重组成流的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/7e/b49595a5a425c0e67d46ee17cc212e7e.png?wh=1142*735\" alt=\"\"></p><p>从这些特性中，我们还可以推理出一些深层次的知识点。</p><p>比如说，HTTP/2在一个连接上使用多个流收发数据，那么它本身默认就会是长连接，所以永远不需要“Connection”头字段（keepalive或close）。</p><p>你可以再看一下Wireshark的抓包，里面发送了两个请求“/31-1”和“/favicon.ico”，始终用的是“56095&lt;-&gt;8443”这个连接，对比一下<a href=\"https://time.geekbang.org/column/article/100502\">第8讲</a>，你就能够看出差异了。</p><p>又比如，下载大文件的时候想取消接收，在HTTP/1里只能断开TCP连接重新“三次握手”，成本很高，而在HTTP/2里就可以简单地发送一个“RST_STREAM”中断流，而长连接会继续保持。</p><p>再比如，因为客户端和服务器两端都可以创建流，而流ID有奇数偶数和上限的区分，所以大多数的流ID都会是奇数，而且客户端在一个连接里最多只能发出2^30，也就是10亿个请求。</p><p>所以就要问了：ID用完了该怎么办呢？这个时候可以再发一个控制帧“GOAWAY”，真正关闭TCP连接。</p><h2>流状态转换</h2><p>流很重要，也很复杂。为了更好地描述运行机制，HTTP/2借鉴了TCP，根据帧的标志位实现流状态转换。当然，这些状态也是虚拟的，只是为了辅助理解。</p><p>HTTP/2的流也有一个状态转换图，虽然比TCP要简单一点，但也不那么好懂，所以今天我只画了一个简化的图，对应到一个标准的HTTP“请求-应答”。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/b4/d389ac436d8100406a4a488a69563cb4.png?wh=1142*941\" alt=\"\"></p><p>最开始的时候流都是“<strong>空闲</strong>”（idle）状态，也就是“不存在”，可以理解成是待分配的“号段资源”。</p><p>当客户端发送HEADERS帧后，有了流ID，流就进入了“<strong>打开</strong>”状态，两端都可以收发数据，然后客户端发送一个带“END_STREAM”标志位的帧，流就进入了“<strong>半关闭</strong>”状态。</p><p>这个“半关闭”状态很重要，意味着客户端的请求数据已经发送完了，需要接受响应数据，而服务器端也知道请求数据接收完毕，之后就要内部处理，再发送响应数据。</p><p>响应数据发完了之后，也要带上“END_STREAM”标志位，表示数据发送完毕，这样流两端就都进入了“<strong>关闭</strong>”状态，流就结束了。</p><p>刚才也说过，流ID不能重用，所以流的生命周期就是HTTP/1里的一次完整的“请求-应答”，流关闭就是一次通信结束。</p><p>下一次再发请求就要开一个新流（而不是新连接），流ID不断增加，直到到达上限，发送“GOAWAY”帧开一个新的TCP连接，流ID就又可以重头计数。</p><p>你再看看这张图，是不是和HTTP/1里的标准“请求-应答”过程很像，只不过这是发生在虚拟的“流”上，而不是实际的TCP连接，又因为流可以并发，所以HTTP/2就可以实现无阻塞的多路复用。</p><h2>小结</h2><p>HTTP/2的内容实在是太多了，为了方便学习，我砍掉了一些特性，比如流的优先级、依赖关系、流量控制等。</p><p>但只要你掌握了今天的这些内容，以后再看RFC文档都不会有难度了。</p><ol>\n<li><span class=\"orange\">HTTP/2必须先发送一个“连接前言”字符串，然后才能建立正式连接；</span></li>\n<li><span class=\"orange\">HTTP/2废除了起始行，统一使用头字段，在两端维护字段“Key-Value”的索引表，使用“HPACK”算法压缩头部；</span></li>\n<li><span class=\"orange\">HTTP/2把报文切分为多种类型的二进制帧，报头里最重要的字段是流标识符，标记帧属于哪个流；</span></li>\n<li><span class=\"orange\">流是HTTP/2虚拟的概念，是帧的双向传输序列，相当于HTTP/1里的一次“请求-应答”；</span></li>\n<li><span class=\"orange\">在一个HTTP/2连接上可以并发多个流，也就是多个“请求-响应”报文，这就是“多路复用”。</span></li>\n</ol><h2>课下作业</h2><ol>\n<li>HTTP/2的动态表维护、流状态转换很复杂，你认为HTTP/2还是“无状态”的吗？</li>\n<li>HTTP/2的帧最大可以达到16M，你觉得大帧好还是小帧好？</li>\n<li>结合这两讲，谈谈HTTP/2是如何解决“队头阻塞”问题的。</li>\n</ol><p>欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/49/3dfab162c427fb3a1fa16494456ae449.png?wh=1769*3648\" alt=\"unpreview\"></p><p></p>","comments":[{"had_liked":false,"id":121421,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1565138528,"is_pvip":false,"replies":[{"id":"44671","content":"good。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174132,"ip_address":"","comment_id":121421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"177658797664","product_id":100029001,"comment_content":"1.还是无状态,流状态只是表示流是否建立，单次请求响应的状态。并非会话级的状态保持<br>2.小帧好，少量多次，万一拥堵重复的的少。假设大帧好，只要分流不用分帧了。<br>3.每一个请求响应都是一个流，流和流之间可以并行，流内的帧还是有序串行。","like_count":42,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461782,"discussion_content":"good。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121503,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1565149130,"is_pvip":false,"replies":[{"id":"44665","content":"http&#47;1里的请求都是排队处理的，所以有队头阻塞。<br><br>http&#47;2的请求是乱序的，彼此不依赖，所以没有队头阻塞。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173882,"ip_address":"","comment_id":121503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65989658570","product_id":100029001,"comment_content":"3、首先要明确造成“队头阻塞”的原因，因为http1里的请求和应答是没有序号标识的，导致了无法将乱序的请求和应答关联起来，也就是必须等待起始请求的应答先返回，则后续请求的应答都会延迟，这就是“队头阻塞”，而http2采用了虚拟的“流”，每次的请求应答都会分配同一个流id，而同一个流id里的帧又都是有序的，这样根据流id就可以标识出同一次的请求应答，不用再等待起始请求的应答先返回了，解决了“队头阻塞”","like_count":16,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461824,"discussion_content":"http/1里的请求都是排队处理的，所以有队头阻塞。\n\nhttp/2的请求是乱序的，彼此不依赖，所以没有队头阻塞。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565173882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121681,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1565182122,"is_pvip":false,"replies":[{"id":"44701","content":"对，虽然是部分解决，但对于http&#47;1来说已经是一个很大的进步了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565185479,"ip_address":"","comment_id":121681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48809822378","product_id":100029001,"comment_content":"HTTP&#47;2 底层还是依赖 TCP 传输，没有解决队头阻塞的问题啊，这就是为何 HTTP&#47;3 要基于 UDP 来传输","like_count":11,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461901,"discussion_content":"对，虽然是部分解决，但对于http/1来说已经是一个很大的进步了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565185479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121672,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1565181064,"is_pvip":false,"replies":[{"id":"44697","content":"是的，不过动态表也有淘汰机制，服务器可以自己定制策略，不会过度占用内存。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565182566,"ip_address":"","comment_id":121672,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40219886728","product_id":100029001,"comment_content":"服务端是不是要为每一个客户端都单独维护一份索引表？连接的客户端多了的话内存不就OOM了嘛","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461898,"discussion_content":"是的，不过动态表也有淘汰机制，服务器可以自己定制策略，不会过度占用内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565182566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121570,"user_name":"想个昵称好难","can_delete":false,"product_type":"c1","uid":1361035,"ip_address":"","ucode":"34355FBA7DF463","user_header":"https://static001.geekbang.org/account/avatar/00/14/c4/8b/a9fbaea6.jpg","comment_is_top":false,"comment_ctime":1565160824,"is_pvip":false,"replies":[{"id":"44675","content":"是的，客户端和服务器维护各自的动态表，收发各一张表，但字典里的内容必须是一致的，否则索引号就对不上了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174680,"ip_address":"","comment_id":121570,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31629931896","product_id":100029001,"comment_content":"老师您好,打扰您实在是抱歉,想请教您一个问题,您在文中说HTTP&#47;2会在两端维护“Key-Value”的索引表,静态表应该是一摸一样的,那动态表俩边一样吗?如果一样的话,同步是比较难做的事情吧,我看RFC文档中是这么写的,”When used for bidirectional communication, such as in HTTP, the encoding and decoding dynamic tables maintained by an endpoint are completely independent, i.e., the request and response dynamic tables are separate.“, 所以我的理解是,动态表在客户端和服务器各自都有俩个表,一个是用来保存客户端发送的message的header,另外一个是保存服务器发送的header, 我看stackoverflow中也是这么写的,https:&#47;&#47;stackoverflow.com&#47;questions&#47;53003333&#47;how-does-headers-keep-sync-in-both-client-and-server-side-in-http-2, 如果我有哪个地方理解错了,麻烦下老师指点一下<br><br>","like_count":8,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461856,"discussion_content":"是的，客户端和服务器维护各自的动态表，收发各一张表，但字典里的内容必须是一致的，否则索引号就对不上了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377393,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","nickname":"何用","note":"","ucode":"B0C6E8176AE6FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331100,"discussion_content":"服务端不止两个表吧，它需要为建立连接的每个客户端都单独维护两个表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606788220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121493,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1565147882,"is_pvip":false,"replies":[{"id":"44666","content":"说的很好，也可以这么表述“语法上有状态，语义上无状态”。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173915,"ip_address":"","comment_id":121493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31629918954","product_id":100029001,"comment_content":"1、http的“无状态”是指对事务处理没有记忆，每个请求之间都是独立的，这与HPACK算法里的动态表、流状态转换是两回事。HPACK算法里维护动态表是用于头部压缩，而流状态转换只是表示一次请求应答里流的状态，都不会记录之前事务的信息","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461816,"discussion_content":"说的很好，也可以这么表述“语法上有状态，语义上无状态”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565173915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230749,"user_name":"好好好","can_delete":false,"product_type":"c1","uid":1546855,"ip_address":"","ucode":"EE1878ADC840B6","user_header":"https://static001.geekbang.org/account/avatar/00/17/9a/67/73f384f9.jpg","comment_is_top":false,"comment_ctime":1593482660,"is_pvip":false,"replies":[{"id":"85207","content":"<br>1.http协议要求请求-响应必须一来一回，上一个请求没有处理完，下一个请求是不能发出去的。一个tcp连接上的http请求必然是串行。<br><br>2.管道模式可以顺序发出多个请求，但响应也必须顺序响应。这些都是http&#47;1.1里规定的。<br><br>3.再对比http&#47;2，一个tcp连接里有多个流，每个流就是一个请求，所以多个请求可以并发，“复用”在了一个连接里。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593486246,"ip_address":"","comment_id":230749,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27363286436","product_id":100029001,"comment_content":"老师，我还是无法理解HTTP1.X无法实现多路复用的具体原因。如果我在HTTP1.X版本的一个TCP连接下同时发送多个请求，会发生什么情况呢？造成这个情况的具体原因又是什么呢？","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500021,"discussion_content":"\n1.http协议要求请求-响应必须一来一回，上一个请求没有处理完，下一个请求是不能发出去的。一个tcp连接上的http请求必然是串行。\n\n2.管道模式可以顺序发出多个请求，但响应也必须顺序响应。这些都是http/1.1里规定的。\n\n3.再对比http/2，一个tcp连接里有多个流，每个流就是一个请求，所以多个请求可以并发，“复用”在了一个连接里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593486246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567771,"discussion_content":"刚看到这个,原来是这样保证帧顺序到达... 所以HTTP请求顺序到达也是这么保证的么\n作者回复: \n1.由tcp保证帧是顺序到达的，因为tcp是有序的字节流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650986917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567770,"discussion_content":"我的理解是这样:\n1.http 1.0有了长连接但是没有管道,所以还是请求--响应 请求--响应\n2.http 1.1有了管道模式,但是多个请求报文没法唯一标识,server响应的时候没法标识自己响应的是哪个请求,所以得按顺序响应.\n  ps:但是感觉这样如果发送顺序和收到的顺序不一样是不是会有问题呢?\n3.http 2里每个请求都属于不同的流 服务器可以通过流标识分别响应到对应的流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650986598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2368078,"avatar":"https://static001.geekbang.org/account/avatar/00/24/22/4e/2e081d9c.jpg","nickname":"hao","note":"","ucode":"371A47DD4510E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377701,"discussion_content":"可不可以理解成HTTP/1.x相当于HTTP/2只有1个流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622780563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121575,"user_name":"想个昵称好难","can_delete":false,"product_type":"c1","uid":1361035,"ip_address":"","ucode":"34355FBA7DF463","user_header":"https://static001.geekbang.org/account/avatar/00/14/c4/8b/a9fbaea6.jpg","comment_is_top":false,"comment_ctime":1565161135,"is_pvip":false,"replies":[{"id":"44663","content":"指的是协议本身的数据格式，而不是负载（payload）的格式。<br><br>你看http&#47;1，请求行、头、body里的分隔符，都是ASCII码。<br><br>而http&#47;2，是二进制帧，用字节、位来表示信息，没有ASCII码。<br><br>你可以把自己想象成协议的解析器，你看到的协议头是什么格式，文本还是二进制。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173687,"ip_address":"","comment_id":121575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27334964911","product_id":100029001,"comment_content":"还有一个问题想请教下老师,您之前在《HTTP的前世今生》上有一段回复是说,只要是HTTP&#47;1.1，就都是文本格式，虽然里面的数据可能是二进制，但分隔符还是文本，这些都会 在“进阶篇”里讲, 不过我看到现在还是有点迷惑,所二进制协议和文本协议的区别是什么呢?可以按照stackoverflow中https:&#47;&#47;stackoverflow.com&#47;questions&#47;2645009&#47;binary-protocols-v-text-protocols  的回答来理解吗?","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461858,"discussion_content":"指的是协议本身的数据格式，而不是负载（payload）的格式。\n\n你看http/1，请求行、头、body里的分隔符，都是ASCII码。\n\n而http/2，是二进制帧，用字节、位来表示信息，没有ASCII码。\n\n你可以把自己想象成协议的解析器，你看到的协议头是什么格式，文本还是二进制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565173687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121549,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565157650,"is_pvip":false,"replies":[{"id":"44673","content":"我个人认为小帧比较好，当然如果在某些特定场景里，比如下载大文件，可以适当加大。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174304,"ip_address":"","comment_id":121549,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23039994130","product_id":100029001,"comment_content":"HTTP&#47;2 的动态表维护、流状态转换很复杂，你认为 HTTP&#47;2 还是“无状态”的吗？<br>还是无状态的，对上层应用来说，动态表维护、流状态转换这些操作对它不可见。<br><br>HTTP&#47;2 的帧最大可以达到 16M，你觉得大帧好还是小帧好？<br>大帧好，应该小帧需要很多额外的头信息，有数据冗余。小帧可以当出差错时，只转输出错的帧，细粒度控制。<br><br>结合这两讲，谈谈 HTTP&#47;2 是如何解决“队头阻塞”问题的。<br>因为流可以并发，一个流被阻塞了，并不影响其它的流。","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461844,"discussion_content":"我个人认为小帧比较好，当然如果在某些特定场景里，比如下载大文件，可以适当加大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2913864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MYShyjtRtib2GIQiaK4hV3ZP9pQ1qiaS74DA4K4YHY4SIiaFDfsCKgiaMWwm9zFsSn3bt5pawp5Kdn5MWgiaw5909nug/132","nickname":"Geek_aa1c31","note":"","ucode":"1AC14C053638AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580029,"discussion_content":"如果一个流被阻塞了的话（Http2应用层已经没有阻塞问题， 所以假设你这里说的是tcp层面的组设），应该是全部的流都会被阻塞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657816853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224718,"discussion_content":"tcp协议里明确定义了状态转换，而http/2可以说是语法有状态，语义无状态，看你在哪个层次来看了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586325293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008348,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/dc/8876c73b.jpg","nickname":"moooofly","note":"","ucode":"4A20795C281B6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6832,"discussion_content":"“还是无状态的，对上层应用来说，动态表维护、流状态转换这些操作对它不可见”-- 按照这个说法，我是不是应该将 tcp 协议也归为 无状态 的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567134346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130230,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1003156,"ip_address":"","ucode":"4060B4E2EF1D13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/94/0b22b6a2.jpg","comment_is_top":false,"comment_ctime":1567409103,"is_pvip":false,"replies":[{"id":"48582","content":"<br>1.由tcp保证帧是顺序到达的，因为tcp是有序的字节流。<br><br>2.同样是由tcp实现，具体细节就太底层了，有兴趣可以研究tcp协议。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1567413046,"ip_address":"","comment_id":130230,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18747278287","product_id":100029001,"comment_content":"1、一个流中的多个帧是有序的，但是在二进制帧协议中，并没有看到这个序号，请问下老师，这个序号是在哪里？或者一个流中的多个帧是如何保证有序的？<br>2、如果出现丢帧的情况是如何重传的？","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465866,"discussion_content":"\n1.由tcp保证帧是顺序到达的，因为tcp是有序的字节流。\n\n2.同样是由tcp实现，具体细节就太底层了，有兴趣可以研究tcp协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567413046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":567772,"discussion_content":"解惑了，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650986960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":465866,"ip_address":""},"score":567772,"extra":""}]}]},{"had_liked":false,"id":121431,"user_name":"sunxu","can_delete":false,"product_type":"c1","uid":1547968,"ip_address":"","ucode":"A84CB050EDB9A1","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/c0/69ae8a58.jpg","comment_is_top":false,"comment_ctime":1565139273,"is_pvip":false,"replies":[{"id":"44669","content":"Nginx作为代理，实际上就把传输链路拆分成了两个部分，下游因为使用了http&#47;2，所以肯定会有性能提升。<br><br>而上游还是http&#47;1，所以瓶颈就在这里，但因为后台系统的服务能力都很强，网络也好，所以不会有太大影响。<br><br>当然，如果全用http&#47;2就更好了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174086,"ip_address":"","comment_id":121431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18745008457","product_id":100029001,"comment_content":"想问一下，nginx前端采用http2, 反向代理到应用服务使用的http1.1, 这种方式对请求响应有提升吗？","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461787,"discussion_content":"Nginx作为代理，实际上就把传输链路拆分成了两个部分，下游因为使用了http/2，所以肯定会有性能提升。\n\n而上游还是http/1，所以瓶颈就在这里，但因为后台系统的服务能力都很强，网络也好，所以不会有太大影响。\n\n当然，如果全用http/2就更好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202464,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1585992490,"is_pvip":false,"replies":[{"id":"76047","content":"说的很对。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586222772,"ip_address":"","comment_id":202464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470894378","product_id":100029001,"comment_content":"1：HTTP&#47;2 的动态表维护、流状态转换很复杂，你认为 HTTP&#47;2 还是“无状态”的吗？<br>还是无状态的，因为第二次交互并不需要保留或者知道是否在之前已经有过一次交互了，假设后面的服务是个集群第一次请求和第二次请求负载打到的机器不同也没关系，另外动态表应该可以重新创建吧！<br>另外，用代号表示语义是不是也是一种空间换时间的运用，虽然只是减少了传输空间增加了两头的存储空间。<br><br>2：HTTP&#47;2 的帧最大可以达到 16M，你觉得大帧好还是小帧好？<br>大帧好还是小帧好，我觉得应该看场景，如果网络不稳定小帧好因为丢失重传的成本低，也可以传输更多的数据帧提高并行度。不过如果网络稳定，帧小必然帧头多对于而数据是放在帧体区的是不是针对大文件下载之类的需求就有些浪费了呢？<br><br>3：结合这两讲，谈谈 HTTP&#47;2 是如何解决“队头阻塞”问题的。<br>HTTP&#47;2的连接好似一座桥，桥上可以过许多的车辆（数据帧），他们可以并发来走，而车队中的车辆是有顺序的她们组成一个车队（一次请求或响应报文），所以，先出发的车队不一定先到，因为车队之间是并行互不阻塞的。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490592,"discussion_content":"说的很对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586222772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147124,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1572800093,"is_pvip":true,"replies":[{"id":"56810","content":"总结的不错。<br><br>1.可以说是语义无状态，语法有状态。<br><br>2.通常都认为较小的帧比较好，粒度小，流的并行度就高。<br><br>3.http&#47;2在tcp层有队头阻塞，所以就出了http&#47;3。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572829350,"ip_address":"","comment_id":147124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14457701981","product_id":100029001,"comment_content":"1 http的无状态是针对应用层的吧，多个请求之前不会有影响，http2虽然有维护一些状态的信息，但这是针对流的信息，所以我认为http2也还是无状态的<br>2 不知道大小帧哪个好，大帧头部占比会少一点，但在TCP层会需要拆分成小帧，可能会多耗点时间，太大的帧TCP发送缓存区也要设的大一点吧<br>3  http2相比http1.1有了流ID来标识请求响应，因此同一个连接就可以同时进行多个流的传输，但由于TCP的收发窗口的确认机制，并发性还是会受到限制。<br><br>总结：<br>http2连接的建立<br>建立完成TLS连接之后，发送连接前言PRI * HTTP&#47;2.0\\r\\n\\r\\nSM\\r\\n\\r\\n，这样后面的报文就会使用http2的格式<br>报文格式：<br>帧长度  3byte    默认上限为16k 最大为2^24<br>帧类型  1byte   大致分为数据帧和控制帧，最高可表示256种，可自己扩展<br>标志位   1byte   携带简单的控制信息<br>流ID    4byte  其中最高位为0，客户端发起的流id为奇数，服务器发起的流id为偶数，0号流为控制流<br><br>请求头字段采用HPACK的方式来进行压缩，有静态表来存储二元组（字段 ，value）和index之间的关系，静态表里找不到的key value，可以放在动态表里。<br>","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473158,"discussion_content":"总结的不错。\n\n1.可以说是语义无状态，语法有状态。\n\n2.通常都认为较小的帧比较好，粒度小，流的并行度就高。\n\n3.http/2在tcp层有队头阻塞，所以就出了http/3。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572829350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123660,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1565741771,"is_pvip":false,"replies":[{"id":"45328","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565743888,"ip_address":"","comment_id":123660,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450643659","product_id":100029001,"comment_content":"哈夫曼编码的使用是HTTP2协议里面一个不容忽视的要素，该编码方式很好地保证了所有信息的平均码长最短而互相不构成前缀关系，易于解码。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462761,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565743888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315022,"user_name":"Jasmine","can_delete":false,"product_type":"c1","uid":1585145,"ip_address":"","ucode":"E54999CC612A7C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIuTjCibv0afd7SSdLicfNk0f7KO5ga9VMleD1hc2DtQfianK20ht06SekClKV7M8UXLRHqQLm9hJ3ow/132","comment_is_top":false,"comment_ctime":1633661610,"is_pvip":false,"replies":[{"id":"114098","content":"流里的帧是由tcp来传输的，而tcp是有序的字节流，所以http&#47;2流里的帧必然会是按照发送的顺序先后到达，不会是乱序。<br><br>所以，在tcp层面来看，帧是乱序的，但在流的层面来看，帧是有序的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633667000,"ip_address":"","comment_id":315022,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10223596202","product_id":100029001,"comment_content":"老师，同一个流内部，相同类型的帧，比如DATA[3]和DATA[3]怎么区分先后顺序呢？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527861,"discussion_content":"流里的帧是由tcp来传输的，而tcp是有序的字节流，所以http/2流里的帧必然会是按照发送的顺序先后到达，不会是乱序。\n\n所以，在tcp层面来看，帧是乱序的，但在流的层面来看，帧是有序的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633667000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288342,"user_name":"张欣","can_delete":false,"product_type":"c1","uid":2448960,"ip_address":"","ucode":"557C42848C77E6","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/40/dee7906c.jpg","comment_is_top":false,"comment_ctime":1618413954,"is_pvip":false,"replies":[{"id":"104668","content":"<br>1.当然了，它的下层是tcp，传输的可靠性必须由tcp保证。<br><br>2.看帧结构，里面只有流id。因为帧是顺序发的，顺序由tcp保证，所以不需要序号。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618450571,"ip_address":"","comment_id":288342,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10208348546","product_id":100029001,"comment_content":"老师，您好：<br>1，http2也是依赖于tcp来保证他自己帧数据的完整性么？他自己有检测数据完整性的功能么<br>2，http2的帧的排序序号也是保存在帧头部里面的么？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518596,"discussion_content":"\n1.当然了，它的下层是tcp，传输的可靠性必须由tcp保证。\n\n2.看帧结构，里面只有流id。因为帧是顺序发的，顺序由tcp保证，所以不需要序号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618450571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684113,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","nickname":"zero","note":"","ucode":"27019747CA63FF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545235,"discussion_content":"http2种说的帧的乱序指的是不同消息之间的顺序，同一个消息之间的帧还是有序的，由tcp保证，它实际上解决的是http对头堵塞问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641883182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230687,"user_name":"好好好","can_delete":false,"product_type":"c1","uid":1546855,"ip_address":"","ucode":"EE1878ADC840B6","user_header":"https://static001.geekbang.org/account/avatar/00/17/9a/67/73f384f9.jpg","comment_is_top":false,"comment_ctime":1593453787,"is_pvip":false,"replies":[{"id":"85180","content":"<br>1.http&#47;1.1的管道虽然可以发多个请求，但仍然是顺序处理，有队头阻塞，所以很少有服务器、浏览器支持，基本上没用。<br><br>2.http&#47;1.1既然是顺序请求，那么就只能是串行处理，也就无法像http&#47;2那样多路复用了。<br><br>3.多个并发的http&#47;1.1请求，服务器可以根据tcp连接来区分，不可能是“无法区分”的，这个说法不知道是哪里来的，我认为这个是错误的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593479671,"ip_address":"","comment_id":230687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183388379","product_id":100029001,"comment_content":"想请问下老师，我在别的地方看到http1.1有管道机制可以同时发送请求，服务端会根据请求顺序返回内容。那为什么还说http1.x如果同时发送请求，服务端无法区分数据是哪个请求所以实现不了多路复用呢？希望老师解答下。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499993,"discussion_content":"\n1.http/1.1的管道虽然可以发多个请求，但仍然是顺序处理，有队头阻塞，所以很少有服务器、浏览器支持，基本上没用。\n\n2.http/1.1既然是顺序请求，那么就只能是串行处理，也就无法像http/2那样多路复用了。\n\n3.多个并发的http/1.1请求，服务器可以根据tcp连接来区分，不可能是“无法区分”的，这个说法不知道是哪里来的，我认为这个是错误的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593479671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229803,"user_name":"Maske","can_delete":false,"product_type":"c1","uid":1696847,"ip_address":"","ucode":"A19BB41A47E852","user_header":"https://static001.geekbang.org/account/avatar/00/19/e4/4f/df6d810d.jpg","comment_is_top":false,"comment_ctime":1593150616,"is_pvip":true,"replies":[{"id":"84801","content":"说的非常好。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593172477,"ip_address":"","comment_id":229803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183085208","product_id":100029001,"comment_content":"1.还是无状态，http2虽然实现了多路复用，但是本质没有变，因为服务端永远不会自动记录上次请求的相关数据，客户端的每一次请求都需要表明其身份。<br>2.小帧好。因为http2的一个一个请求都分解为了一个一个帧，在同一个tcp&#47;ip连接层面上表现为无序收发的，小帧有利于提高并行请求或响应。<br>3.通过分解一个一个请求或响应报文数据为多个帧，将同一个请求或响应的帧贴上相同的streamid来作为标识，使得在连接层面上变为无序收发，而且这些帧是并行的，因此不需要等待前一个请求响应结束才能进行下一个请求，实现了多路复用。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499645,"discussion_content":"说的非常好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593172477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121424,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1565138648,"is_pvip":false,"replies":[{"id":"44670","content":"是的，会发生tcp层的队头阻塞，下一次http&#47;3会讲。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174119,"ip_address":"","comment_id":121424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155073240","product_id":100029001,"comment_content":"老师好!TCP网络不好的时候会降速，http2的话是一个帧没收到就会导致TCP降速么?","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461784,"discussion_content":"是的，会发生tcp层的队头阻塞，下一次http/3会讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303476,"user_name":"dawn","can_delete":false,"product_type":"c1","uid":1121701,"ip_address":"","ucode":"979CE356267183","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIpF5euTNx3GOkmf515HFh1ahAzogerLfIyLia2AspTIR9fkU6icGbo2ungo23cdM5s9dUjZGMno7ZA/132","comment_is_top":false,"comment_ctime":1626824319,"is_pvip":false,"replies":[{"id":"109857","content":"不行，流结束后需要新起一个流，序号顺序增长，到最大值tcp就要关闭。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626843434,"ip_address":"","comment_id":303476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5921791615","product_id":100029001,"comment_content":"老师，一个流处理完一次请求响应后可以用于下一次请求吗，就是客户端不用新起一个流，复用这个流","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523697,"discussion_content":"不行，流结束后需要新起一个流，序号顺序增长，到最大值tcp就要关闭。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626843434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281356,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1614700994,"is_pvip":false,"replies":[{"id":"102163","content":"这里我们还是要适当地理解网络协议栈。<br><br>每个层次只关心它自己的部分，对于上层是什么格式什么内容都不关心。<br><br>所以在http&#47;2里，当把http&#47;2的帧交给下面的tcp的时候，tcp是看不到帧、流等概念的，就是一些二进制数据，它会按照自己的规则去分段发送。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1614735720,"ip_address":"","comment_id":281356,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5909668290","product_id":100029001,"comment_content":"老师您好，我有一个疑问。<br> http:是将整个请求的报文传递给 传输层，传输层又将上层的报文 分成多个报文段，然后 发给 IP层。<br><br> http2:是 每个请求报文 先分成不同的帧，然后 乱序 发到传输层。<br>        那么传输层是等一个完整流到达才开始分段，还是说接受到混合内容(多个请求的混合帧对应内容)，就开始分段，走下面的流程呢？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516370,"discussion_content":"这里我们还是要适当地理解网络协议栈。\n\n每个层次只关心它自己的部分，对于上层是什么格式什么内容都不关心。\n\n所以在http/2里，当把http/2的帧交给下面的tcp的时候，tcp是看不到帧、流等概念的，就是一些二进制数据，它会按照自己的规则去分段发送。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614735720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2913864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MYShyjtRtib2GIQiaK4hV3ZP9pQ1qiaS74DA4K4YHY4SIiaFDfsCKgiaMWwm9zFsSn3bt5pawp5Kdn5MWgiaw5909nug/132","nickname":"Geek_aa1c31","note":"","ucode":"1AC14C053638AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580030,"discussion_content":"HTTP1是将完整的报文交给TCP层， 而在HTTP2中是将完整的报文分成帧交给TCP层","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657817604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238462,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1596175829,"is_pvip":false,"replies":[{"id":"88089","content":"同一个流里的帧是有序的，在tcp层是按先后顺序发的，不是 乱序。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596179094,"ip_address":"","comment_id":238462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891143125","product_id":100029001,"comment_content":"HTTP2 通过流ID来实现乱序frame的分组。那么对于同一个流的frame，又是如何组装的呢？很有可能同一个流的不同帧到达的时间点不同，接收方要怎么辩识正确的顺序呢？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502756,"discussion_content":"同一个流里的帧是有序的，在tcp层是按先后顺序发的，不是 乱序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596179094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143795,"user_name":"- shadow -","can_delete":false,"product_type":"c1","uid":1676738,"ip_address":"","ucode":"97B68447A75354","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/c2/afbb3f61.jpg","comment_is_top":false,"comment_ctime":1571793389,"is_pvip":false,"replies":[{"id":"55512","content":"这个你不用担心，下层的程序会自动做处理。<br><br>当然，现在我们应该都尽量小写字段名。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1571796048,"ip_address":"","comment_id":143795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5866760685","product_id":100029001,"comment_content":"老师你好，http2的头字段都是要求小写的，那服务端要升级到支持http2岂不是很难？因为很多头字段都是定义在程序里，我记得首字母是大写","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471691,"discussion_content":"这个你不用担心，下层的程序会自动做处理。\n\n当然，现在我们应该都尽量小写字段名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571796048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121519,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565150560,"is_pvip":false,"replies":[{"id":"44672","content":"如果有可能就尽量用http&#47;2，HPack、流都可以提升性能，具体能提升多少就要看应用场景了，需要做测试。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565174193,"ip_address":"","comment_id":121519,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860117856","product_id":100029001,"comment_content":"老师你好，nginx反向代理与服务端应用间有必要使用HTTP2吗？对性能提升大吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461834,"discussion_content":"如果有可能就尽量用http/2，HPack、流都可以提升性能，具体能提升多少就要看应用场景了，需要做测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565174193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347160,"user_name":"海绵薇薇","can_delete":false,"product_type":"c1","uid":1601296,"ip_address":"","ucode":"37C7CC2EB81909","user_header":"https://static001.geekbang.org/account/avatar/00/18/6f/10/bfbf81dc.jpg","comment_is_top":false,"comment_ctime":1653753256,"is_pvip":false,"replies":[{"id":"126584","content":"http&#47;2的hpack字典必须两端同步更新， 使用单独的流，不会出现你说的这个问题，更详细的实现过程要看RFC了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1653794086,"ip_address":"","comment_id":347160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653753256","product_id":100029001,"comment_content":"老师好:)<br>因为HTTP2是乱序发送，所以是如何维护两端的动态表一致的呢？<br><br>例如：两端的动态表是2: b, 3: c。第一个请求加了一个变成了1: a, 2: b, 3: c，第二个请求使用了1（1: a）。但是第二个请求先到的服务端，那这个1就变成了(2: b)。然后第一个请求到了，服务端的动态才会变成1: a, 2: b, 3: c。这样第二个请求的索引1在服务端获取的信息和客户端对应不上，这个问题是怎么解决的呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574012,"discussion_content":"http/2的hpack字典必须两端同步更新， 使用单独的流，不会出现你说的这个问题，更详细的实现过程要看RFC了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653794086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338884,"user_name":"Geek_eddc37","can_delete":false,"product_type":"c1","uid":2902560,"ip_address":"","ucode":"291629CA905FC6","user_header":"","comment_is_top":false,"comment_ctime":1647771417,"is_pvip":false,"replies":[{"id":"124066","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1648081070,"ip_address":"","comment_id":338884,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1647771417","product_id":100029001,"comment_content":"感觉 http&#47;2 就是在 tcp 上面再封装了一层。原先是觉得 应用层的 http&#47;1 完整交付作为一次请求应答过程 必须完整交付之后才能进行下一次的请求应答 所以会存在着 队头阻塞的问题 所以之后才会想在 tcp 上建立多重连接 在多重连接上 并发执行 http 来解决队头阻塞问题，但这样子代价是比较大的。所以http&#47;2的做法是 在tcp上封装一层，引入流的概念，将原先在多个端口上的tcp连接换成在一个端口上的不同流连接，无论多少个流底层都是一次tcp连接，不同流互相隔离，互不影响，双方都可以建立流，在流上进行通信，其次把一次报文，分解成多个帧，有点类似于http&#47;1 分块传输（被分解成一个个tcp的报文），解决了队头阻塞的问题，实现了多路复用。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558060,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648081071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567777,"discussion_content":"解决问题的经典方式:加个中间层 😁\n在tls和http中间加一层(hpack+stream),这样就可以按照需要重新定义报文格式和传输方式了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650987332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328159,"user_name":"忧天小鸡","can_delete":false,"product_type":"c1","uid":1073947,"ip_address":"","ucode":"A1412BDC108FD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","comment_is_top":false,"comment_ctime":1640577718,"is_pvip":false,"replies":[{"id":"119529","content":"是的，http&#47;2只会用一个tcp连接，也就是一个socket，把http信息切成小块来传输，实现多路复用。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1640645745,"ip_address":"","comment_id":328159,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640577718","product_id":100029001,"comment_content":"这个多路复用流，在TCP层下是如何工作的？scoket共享同一个？<br>那是不是说代码底层，HTTP&#47;2需要使用一个scoket单例？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542036,"discussion_content":"是的，http/2只会用一个tcp连接，也就是一个socket，把http信息切成小块来传输，实现多路复用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640645745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305611,"user_name":"假于物","can_delete":false,"product_type":"c1","uid":2708739,"ip_address":"","ucode":"2775796BFD4D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/55/03/1092fb6a.jpg","comment_is_top":false,"comment_ctime":1628069683,"is_pvip":false,"replies":[{"id":"110574","content":"当然是一个帧头只能对应一个帧体了，但流里可以有多个数据帧。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1628085657,"ip_address":"","comment_id":305611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628069683","product_id":100029001,"comment_content":"老师，帧头和数据帧对应关系是怎么样的？<br>1对1还是1对多？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524449,"discussion_content":"当然是一个帧头只能对应一个帧体了，但流里可以有多个数据帧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628085657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302109,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1626084548,"is_pvip":false,"replies":[{"id":"109323","content":"展开tcp数据，是不是在里面。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626137265,"ip_address":"","comment_id":302109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626084548","product_id":100029001,"comment_content":"老师 请问下我为啥重放你的包 看不到http 只能看到tcp呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523185,"discussion_content":"展开tcp数据，是不是在里面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626137265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295954,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1622682513,"is_pvip":false,"replies":[{"id":"107441","content":"alpn是在tls协议里发送的，preface是在tls建连成功，确认使用http&#47;2后才发送的。<br><br>理解的很对。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622707103,"ip_address":"","comment_id":295954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622682513","product_id":100029001,"comment_content":"老师问下  连接前言  和  带有ALPN扩展字段的请求  的发送顺序是什么样的呢  是浏览器先发送带有ALPN扩展字段的请求，服务器响应后确认使用http2通信然后浏览器再发连接前言吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521277,"discussion_content":"alpn是在tls协议里发送的，preface是在tls建连成功，确认使用http/2后才发送的。\n\n理解的很对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622707103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295296,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1622351485,"is_pvip":false,"replies":[{"id":"107189","content":"<br>1.帧类型和帧标志位的作用不一样，标志位字段的含义会因为帧类型而变化，这样设计对人对计算机都好理解好处理。<br><br>2.控制帧是用来控制流的，header&#47;body要用数据帧。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622368511,"ip_address":"","comment_id":295296,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622351485","product_id":100029001,"comment_content":"老师请问为什么要定义帧类型字段呢  直接通过帧标志字段判断可以吗<br>另外控制帧是不是不能传输header或者body的数据？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521024,"discussion_content":"\n1.帧类型和帧标志位的作用不一样，标志位字段的含义会因为帧类型而变化，这样设计对人对计算机都好理解好处理。\n\n2.控制帧是用来控制流的，header/body要用数据帧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622368511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287573,"user_name":"脱缰的野马__","can_delete":false,"product_type":"c1","uid":1447569,"ip_address":"","ucode":"D5F993E7232C61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","comment_is_top":false,"comment_ctime":1618036194,"is_pvip":false,"replies":[{"id":"104426","content":"hpack的字典必须是每个连接单独维护，不然很快就撑爆了。<br><br>这也是http&#47;2的一个弱点，一旦断开连接就要重建字典。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618043638,"ip_address":"","comment_id":287573,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1618036194","product_id":100029001,"comment_content":"老师你好，请问 这里HTTP&#47;2进行头部压缩的静态表和动态表是在什么维度下维护的呢？换句话说就是每一个HTTP&#47;2建立的连接都会有其独自的静态表和动态表 还是 这个静态表和动态表是全局唯一的，HTTP&#47;2 当前建立的和新生成的连接都复用这一份静态表和动态表？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518352,"discussion_content":"hpack的字典必须是每个连接单独维护，不然很快就撑爆了。\n\n这也是http/2的一个弱点，一旦断开连接就要重建字典。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618043638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567782,"discussion_content":"每次连接都要重建字典,怪不得无状态 😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650987474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567779,"discussion_content":"哇,正是我想问的,感谢解惑!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650987418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284418,"user_name":"Rick","can_delete":false,"product_type":"c1","uid":1502914,"ip_address":"","ucode":"9B41FCA5B4E526","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/c2/873cc8d9.jpg","comment_is_top":false,"comment_ctime":1616234965,"is_pvip":false,"replies":[{"id":"103145","content":"差不多，具体细节我没有太关注，得看rfc了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1616245970,"ip_address":"","comment_id":284418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616234965","product_id":100029001,"comment_content":"请教一下，使用HPACK压缩头部时，如果需要淘汰一个索引时，客户端和服务端是怎么同步的呢？使用控制帧来实现吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517341,"discussion_content":"差不多，具体细节我没有太关注，得看rfc了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616245970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260893,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1605148939,"is_pvip":true,"replies":[{"id":"94738","content":"注意协议是分层的，HTTP&#47;2在TLS之上，在wireshark里再点一下，进去就是HTTP&#47;2了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1605157302,"ip_address":"","comment_id":260893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605148939","product_id":100029001,"comment_content":"老师您好 有个wireshark的问题想请教一下<br>31-1.pcapng这个文件放到wireshark中 协议的部分不显示http2显示的是TLSv1.2，这个需要什么特殊设置么<br>多谢老师回复","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509317,"discussion_content":"注意协议是分层的，HTTP/2在TLS之上，在wireshark里再点一下，进去就是HTTP/2了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605157302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259193,"user_name":"王晓聪","can_delete":false,"product_type":"c1","uid":1375214,"ip_address":"","ucode":"FAE8648A33BD62","user_header":"https://static001.geekbang.org/account/avatar/00/14/fb/ee/e574554d.jpg","comment_is_top":false,"comment_ctime":1604649289,"is_pvip":false,"replies":[{"id":"94262","content":"这个跟具体的hpack算法有关，需要用它来标记authority做编码解码，不太好一下子解释清楚，想研究可以看RFC7541。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1604661159,"ip_address":"","comment_id":259193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604649289","product_id":100029001,"comment_content":"针对文中 “但如果表里只有 Key 没有 Value，或者是自定义字段根本找不到该怎么办呢？这就要用到“动态表”（Dynamic Table），它添加在静态表后面，结构相同，但会在编码解码的时候随时更新。” 这段话，有个问题咨询下老师。类似文中的静态表中 &quot;:authority&quot; ，它本身是只有key 没有value的，是需要在动态表中添加，那么为什么还需要在静态表中放这个字段呢？<br><br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508874,"discussion_content":"这个跟具体的hpack算法有关，需要用它来标记authority做编码解码，不太好一下子解释清楚，想研究可以看RFC7541。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604661159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252118,"user_name":"十六","can_delete":false,"product_type":"c1","uid":1427791,"ip_address":"","ucode":"C8698BF57097C4","user_header":"https://static001.geekbang.org/account/avatar/00/15/c9/4f/cf86fe90.jpg","comment_is_top":false,"comment_ctime":1602130645,"is_pvip":false,"replies":[{"id":"92135","content":"这个不在协议的规定之内，需要实现自己确定，其实我们不需要太关心这些细节，如果确实感兴趣可以去看rfc。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1602161870,"ip_address":"","comment_id":252118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602130645","product_id":100029001,"comment_content":"客户端和服务端维护的字典在哪个区域？有效期是多久呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506720,"discussion_content":"这个不在协议的规定之内，需要实现自己确定，其实我们不需要太关心这些细节，如果确实感兴趣可以去看rfc。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602161870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249890,"user_name":"吃饭","can_delete":false,"product_type":"c1","uid":1692756,"ip_address":"","ucode":"AF0D7165D5F049","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","comment_is_top":false,"comment_ctime":1600844040,"is_pvip":false,"replies":[{"id":"91576","content":"http&#47;2的确比较复杂，建议结合实验环境和抓包来学习。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1600852156,"ip_address":"","comment_id":249890,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600844040","product_id":100029001,"comment_content":"太多了，要啃好几遍","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506049,"discussion_content":"http/2的确比较复杂，建议结合实验环境和抓包来学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600852156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247487,"user_name":" 尿布","can_delete":false,"product_type":"c1","uid":1476323,"ip_address":"","ucode":"D1C8BDA7540962","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/e3/a31f6869.jpg","comment_is_top":false,"comment_ctime":1599721072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599721072","product_id":100029001,"comment_content":"HEADS帧后还可以接特殊的“CONTINUATION”帧，发送特别大的头，最后一个“CONTINUATION”需要设置标志位END_HEADERS表示头结束<br><br>服务器发起流推送需要使用“PUSH_PROMISE”帧，状态转换与客户端流基本类似，只是方向不同<br><br>在“RST_STREAM”和“GOAWAY”帧里可以携带32位的错误代码，表示终止流的原因，它是真正的“错误”，与状态码的含义是不同的","like_count":0},{"had_liked":false,"id":238468,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1596176832,"is_pvip":false,"replies":[{"id":"88088","content":"这个好像前面已经有很多同学问过了，简单来说，http&#47;1是用ASCII码人类可读的格式来定义的，而http&#47;2是用字节、位机器可读的格式来定义的。<br><br>可以再参考一下留言区的讨论。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596179052,"ip_address":"","comment_id":238468,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1596176832","product_id":100029001,"comment_content":"还有一个问题。本来HTTP&#47;1 也是用二进制在 网络上传输（底层的frame），那和HTTP&#47;2的这个二进制帧有何不同呢？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502760,"discussion_content":"这个好像前面已经有很多同学问过了，简单来说，http/1是用ASCII码人类可读的格式来定义的，而http/2是用字节、位机器可读的格式来定义的。\n\n可以再参考一下留言区的讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596179052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212902,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","nickname":"旅途","note":"","ucode":"5022477E8E9441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299115,"discussion_content":"传输层都是tcp用二进制传输","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597567536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236218,"user_name":"风","can_delete":false,"product_type":"c1","uid":1147929,"ip_address":"","ucode":"AFDBEFA49F269E","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/19/7ed2ffa6.jpg","comment_is_top":false,"comment_ctime":1595349460,"is_pvip":true,"replies":[{"id":"87293","content":"当然了，一次客户端-服务器请求用的就是一个流，所以流id必须是一个，可以再仔细看一下课程正文，里面应该说清楚了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595379169,"ip_address":"","comment_id":236218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595349460","product_id":100029001,"comment_content":"老师,请教一下 客户端发送帧数据会带上流id 服务端响应数据是否也会带上流id？如果会的话这两个流id是一样的吗？如果不会的话 那怎么知道这个响应对应的是哪个请求？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501989,"discussion_content":"当然了，一次客户端-服务器请求用的就是一个流，所以流id必须是一个，可以再仔细看一下课程正文，里面应该说清楚了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595379169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231258,"user_name":"@_@","can_delete":false,"product_type":"c1","uid":1925632,"ip_address":"","ucode":"AE2A083919B638","user_header":"https://static001.geekbang.org/account/avatar/00/1d/62/00/35e43b9c.jpg","comment_is_top":false,"comment_ctime":1593616663,"is_pvip":false,"replies":[{"id":"85397","content":"双向发送数据，两边可以同时收发，这个就和tcp连接是一样的。<br><br>但按照http协议，客户端必须发送完请求后才能接收服务器的响应，或者至少要发送完请求头。<br><br>应该说是客户端发送完请求头后就可以同时接收响应数据和发body，服务器在接收完请求头后就可以同时发送响应数据和接收body。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593652133,"ip_address":"","comment_id":231258,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593616663","product_id":100029001,"comment_content":"3. 流是双向的，一个流里面客户端和服务器都可以发送或接收数据帧，也就是一个“请求 - 应答”来回；<br>老师，我对您所说的这点不太明白，既然是&quot;请求-应答&quot;来回，那如果是双向的，是不是可以理解成边请求边应答呀？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500221,"discussion_content":"双向发送数据，两边可以同时收发，这个就和tcp连接是一样的。\n\n但按照http协议，客户端必须发送完请求后才能接收服务器的响应，或者至少要发送完请求头。\n\n应该说是客户端发送完请求头后就可以同时接收响应数据和发body，服务器在接收完请求头后就可以同时发送响应数据和接收body。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593652133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1925632,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/62/00/35e43b9c.jpg","nickname":"@_@","note":"","ucode":"AE2A083919B638","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288299,"discussion_content":"是不是可以理解成一个&#34;请求-响应&#34;是同时进行的，而非&#34;队头阻塞&#34;。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593703850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226193,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1591975616,"is_pvip":false,"replies":[{"id":"83330","content":"是的， 可以参考最后的优化总结篇。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592023529,"ip_address":"","comment_id":226193,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1591975616","product_id":100029001,"comment_content":"用了HTTP2以后，HTTP时代的一些前端优化手段，比如雪碧图，是不是就不需要了？因为多路复用，已经不存在重复建立连接的问题了？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498142,"discussion_content":"是的， 可以参考最后的优化总结篇。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218509,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1589812011,"is_pvip":false,"replies":[{"id":"80785","content":"当然，只要是在h2，所有数据都是加密的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589845081,"ip_address":"","comment_id":218509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589812011","product_id":100029001,"comment_content":"老师 请问下，header  和body  都转换成帧数据了，那么 是不是 通讯过程中，header 和body。会按照同样的方式，加密传输呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495490,"discussion_content":"当然，只要是在h2，所有数据都是加密的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589845081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206591,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586905246,"is_pvip":false,"replies":[{"id":"77213","content":"可以参考其他同学的回答。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586926728,"ip_address":"","comment_id":206591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586905246","product_id":100029001,"comment_content":"认识了连接和流两个层面，第一个问题还是不确定怎么保证无状态的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491836,"discussion_content":"可以参考其他同学的回答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586926728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205123,"user_name":"Larry","can_delete":false,"product_type":"c1","uid":1623342,"ip_address":"","ucode":"3495A11DE756BA","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/2e/0326eefc.jpg","comment_is_top":false,"comment_ctime":1586534335,"is_pvip":false,"replies":[{"id":"76700","content":"ASCII字符本身也是用二进制来表示的啊，所以不是问题。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586585481,"ip_address":"","comment_id":205123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586534335","product_id":100029001,"comment_content":"文本协议中，ascii可以表示数字和字符。那二进制帧如何传输字符呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491396,"discussion_content":"ASCII字符本身也是用二进制来表示的啊，所以不是问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586585481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175417,"user_name":"GodMaker","can_delete":false,"product_type":"c1","uid":1809440,"ip_address":"","ucode":"336D7F9091A716","user_header":"","comment_is_top":false,"comment_ctime":1580714471,"is_pvip":false,"replies":[{"id":"68255","content":"<br>问题2，不是buffer的原因，而是因为小帧更容易在网络不稳定的时候重发，比如1k，那么丢失只要重发1k，而大帧就要重发大量的数据，导致带宽浪费。<br><br>问题3，因为http&#47;2使用流来发送请求，而流在连接上是并发的，彼此没有阻塞关系，所以就不会导致队头阻塞。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1580782765,"ip_address":"","comment_id":175417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580714471","product_id":100029001,"comment_content":"问题2中使用小帧更好的原因可否是大帧需要更大的buffer空间，从而给服务器和客户端带来更大的压力?<br>问题3的意思是不是HTTP2支持先发后收?这样就不会造成阻塞了。然后HTTP2是否对并发连接和域名分片没有那么强的依赖?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482722,"discussion_content":"\n问题2，不是buffer的原因，而是因为小帧更容易在网络不稳定的时候重发，比如1k，那么丢失只要重发1k，而大帧就要重发大量的数据，导致带宽浪费。\n\n问题3，因为http/2使用流来发送请求，而流在连接上是并发的，彼此没有阻塞关系，所以就不会导致队头阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580782765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132710,"user_name":"candy","can_delete":false,"product_type":"c1","uid":1449024,"ip_address":"","ucode":"9CA127B28F1058","user_header":"","comment_is_top":false,"comment_ctime":1568198371,"is_pvip":false,"replies":[{"id":"50879","content":"http&#47;2采用是的加密通信，不解密是看不了的，需要在wireshark里指定SSLKEYLOGFILE，可参考“安全篇”。<br><br>只要指定了对应的log文件，例如31-1.log，就能看到明文了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1568250012,"ip_address":"","comment_id":132710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568198371","product_id":100029001,"comment_content":"为啥我打开31-1的pcap文件 看不到老师截图里面的抓包内容 只有TCP的报文","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467081,"discussion_content":"http/2采用是的加密通信，不解密是看不了的，需要在wireshark里指定SSLKEYLOGFILE，可参考“安全篇”。\n\n只要指定了对应的log文件，例如31-1.log，就能看到明文了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568250012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121999,"user_name":"信信","can_delete":false,"product_type":"c1","uid":1303865,"ip_address":"","ucode":"8DF0EC045579FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/e5/39/951f89c8.jpg","comment_is_top":false,"comment_ctime":1565266813,"is_pvip":false,"replies":[{"id":"44864","content":"我在自己的实验环境又试了一下uri“http:&#47;&#47;www.chrono.com&#47;18-1?dst=&#47;15-1?name=a.json”<br><br>会跳转，而且是两个请求，304和200。你的请求是访问的本地OpenResty吗？<br><br>这里回复说不清楚，可以去GitHub上提issue。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565313704,"ip_address":"","comment_id":121999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565266813","product_id":100029001,"comment_content":"上次留言说：课程里的所有链接都返回200，和访问http:&#47;&#47;www.chrono.com&#47;一个效果，是一个由众多js，css组成的网站。。。<br>作者: 建议打开开发者工具，看看uri是如何处理的。<br><br>比如http:&#47;&#47;www.chrono.com&#47;18-1?dst=&#47;15-1?name=a.json，应该是跳转到15-1。<br><br>有用开发者工具，显示的状态码就是200，并未跳转到15-1。。。。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462050,"discussion_content":"我在自己的实验环境又试了一下uri“http://www.chrono.com/18-1?dst=/15-1?name=a.json”\n\n会跳转，而且是两个请求，304和200。你的请求是访问的本地OpenResty吗？\n\n这里回复说不清楚，可以去GitHub上提issue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565313704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121873,"user_name":"sunözil","can_delete":false,"product_type":"c1","uid":1447909,"ip_address":"","ucode":"8C57787EF32ECE","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/e5/4939b0c6.jpg","comment_is_top":false,"comment_ctime":1565239941,"is_pvip":false,"replies":[{"id":"44866","content":"这个话题有点大，单就Web服务来说，应该上https，然后加上waf安全防护，其他的还有防火墙、访问控制、身份认证、备份、审计什么的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565313981,"ip_address":"","comment_id":121873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565239941","product_id":100029001,"comment_content":"老师 ，想请教一下，作为一个软件开发商，只交付系统不涉及硬件。需要在哪些方面保障系统安全性？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461985,"discussion_content":"这个话题有点大，单就Web服务来说，应该上https，然后加上waf安全防护，其他的还有防火墙、访问控制、身份认证、备份、审计什么的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565313981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121506,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1565149456,"is_pvip":false,"replies":[{"id":"44667","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173928,"ip_address":"","comment_id":121506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565149456","product_id":100029001,"comment_content":"2、小帧好，如果多个流的帧可以在同一个tcp数据段发送的话，就可以提高网络利用率","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461826,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565173928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121486,"user_name":"我行我素","can_delete":false,"product_type":"c1","uid":1224678,"ip_address":"","ucode":"4C69542FAB0671","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/e6/9c77acff.jpg","comment_is_top":false,"comment_ctime":1565146289,"is_pvip":false,"replies":[{"id":"44668","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173958,"ip_address":"","comment_id":121486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565146289","product_id":100029001,"comment_content":"请求复用。拆分传输，一个请求头被阻塞，不会影响其他请求","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461811,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565173958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}