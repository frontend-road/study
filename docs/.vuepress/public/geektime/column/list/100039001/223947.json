{"id":223947,"title":"70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？","content":"<p>上两节课，我们学习了访问者模式。在23种设计模式中，访问者模式的原理和实现可以说是最难理解的了，特别是它的代码实现。其中，用Single Dispatch来模拟Double Dispatch的实现思路尤其不好理解。不知道你有没有将它拿下呢？如果还没有弄得很清楚，那就要多看几遍、多自己动脑经琢磨一下。</p><p>今天，我们学习另外一种行为型模式，备忘录模式。这个模式理解、掌握起来不难，代码实现比较灵活，应用场景也比较明确和有限，主要是用来防丢失、撤销、恢复等。所以，相对于上两节课，今天的内容学起来相对会比较轻松些。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>备忘录模式的原理与实现</h2><p>备忘录模式，也叫快照（Snapshot）模式，英文翻译是Memento Design Pattern。在GoF的《设计模式》一书中，备忘录模式是这么定义的：</p><blockquote>\n<p>Captures and externalizes an object’s internal state so that it can be restored later, all without violating encapsulation.</p>\n</blockquote><p>翻译成中文就是：在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。</p><!-- [[[read_end]]] --><p>在我看来，这个模式的定义主要表达了两部分内容。一部分是，存储副本以便后期恢复。这一部分很好理解。另一部分是，要在不违背封装原则的前提下，进行对象的备份和恢复。这部分不太好理解。接下来，我就结合一个例子来解释一下，特别带你搞清楚这两个问题：</p><ul>\n<li>为什么存储和恢复副本会违背封装原则？</li>\n<li>备忘录模式是如何做到不违背封装原则的？</li>\n</ul><p>假设有这样一道面试题，希望你编写一个小程序，可以接收命令行的输入。用户输入文本时，程序将其追加存储在内存文本中；用户输入“:list”，程序在命令行中输出内存文本的内容；用户输入“:undo”，程序会撤销上一次输入的文本，也就是从内存文本中将上次输入的文本删除掉。</p><p>我举了个小例子来解释一下这个需求，如下所示：</p><pre><code>&gt;hello\n&gt;:list\nhello\n&gt;world\n&gt;:list\nhelloworld\n&gt;:undo\n&gt;:list\nhello\n</code></pre><p>怎么来编程实现呢？你可以打开IDE自己先试着编写一下，然后再看我下面的讲解。整体上来讲，这个小程序实现起来并不复杂。我写了一种实现思路，如下所示：</p><pre><code>public class InputText {\n  private StringBuilder text = new StringBuilder();\n\n  public String getText() {\n    return text.toString();\n  }\n\n  public void append(String input) {\n    text.append(input);\n  }\n\n  public void setText(String text) {\n    this.text.replace(0, this.text.length(), text);\n  }\n}\n\npublic class SnapshotHolder {\n  private Stack&lt;InputText&gt; snapshots = new Stack&lt;&gt;();\n\n  public InputText popSnapshot() {\n    return snapshots.pop();\n  }\n\n  public void pushSnapshot(InputText inputText) {\n    InputText deepClonedInputText = new InputText();\n    deepClonedInputText.setText(inputText.getText());\n    snapshots.push(deepClonedInputText);\n  }\n}\n\npublic class ApplicationMain {\n  public static void main(String[] args) {\n    InputText inputText = new InputText();\n    SnapshotHolder snapshotsHolder = new SnapshotHolder();\n    Scanner scanner = new Scanner(System.in);\n    while (scanner.hasNext()) {\n      String input = scanner.next();\n      if (input.equals(&quot;:list&quot;)) {\n        System.out.println(inputText.getText());\n      } else if (input.equals(&quot;:undo&quot;)) {\n        InputText snapshot = snapshotsHolder.popSnapshot();\n        inputText.setText(snapshot.getText());\n      } else {\n        snapshotsHolder.pushSnapshot(inputText);\n        inputText.append(input);\n      }\n    }\n  }\n}\n</code></pre><p>实际上，备忘录模式的实现很灵活，也没有很固定的实现方式，在不同的业务需求、不同编程语言下，代码实现可能都不大一样。上面的代码基本上已经实现了最基本的备忘录的功能。但是，如果我们深究一下的话，还有一些问题要解决，那就是前面定义中提到的第二点：要在不违背封装原则的前提下，进行对象的备份和恢复。而上面的代码并不满足这一点，主要体现在下面两方面：</p><ul>\n<li>第一，为了能用快照恢复InputText对象，我们在InputText类中定义了setText()函数，但这个函数有可能会被其他业务使用，所以，暴露不应该暴露的函数违背了封装原则；</li>\n<li>第二，快照本身是不可变的，理论上讲，不应该包含任何set()等修改内部状态的函数，但在上面的代码实现中，“快照“这个业务模型复用了InputText类的定义，而InputText类本身有一系列修改内部状态的函数，所以，用InputText类来表示快照违背了封装原则。</li>\n</ul><p>针对以上问题，我们对代码做两点修改。其一，定义一个独立的类（Snapshot类）来表示快照，而不是复用InputText类。这个类只暴露get()方法，没有set()等任何修改内部状态的方法。其二，在InputText类中，我们把setText()方法重命名为restoreSnapshot()方法，用意更加明确，只用来恢复对象。</p><p>按照这个思路，我们对代码进行重构。重构之后的代码如下所示：</p><pre><code>public class InputText {\n  private StringBuilder text = new StringBuilder();\n\n  public String getText() {\n    return text.toString();\n  }\n\n  public void append(String input) {\n    text.append(input);\n  }\n\n  public Snapshot createSnapshot() {\n    return new Snapshot(text.toString());\n  }\n\n  public void restoreSnapshot(Snapshot snapshot) {\n    this.text.replace(0, this.text.length(), snapshot.getText());\n  }\n}\n\npublic class Snapshot {\n  private String text;\n\n  public Snapshot(String text) {\n    this.text = text;\n  }\n\n  public String getText() {\n    return this.text;\n  }\n}\n\npublic class SnapshotHolder {\n  private Stack&lt;Snapshot&gt; snapshots = new Stack&lt;&gt;();\n\n  public Snapshot popSnapshot() {\n    return snapshots.pop();\n  }\n\n  public void pushSnapshot(Snapshot snapshot) {\n    snapshots.push(snapshot);\n  }\n}\n\npublic class ApplicationMain {\n  public static void main(String[] args) {\n    InputText inputText = new InputText();\n    SnapshotHolder snapshotsHolder = new SnapshotHolder();\n    Scanner scanner = new Scanner(System.in);\n    while (scanner.hasNext()) {\n      String input = scanner.next();\n      if (input.equals(&quot;:list&quot;)) {\n        System.out.println(inputText.toString());\n      } else if (input.equals(&quot;:undo&quot;)) {\n        Snapshot snapshot = snapshotsHolder.popSnapshot();\n        inputText.restoreSnapshot(snapshot);\n      } else {\n        snapshotsHolder.pushSnapshot(inputText.createSnapshot());\n        inputText.append(input);\n      }\n    }\n  }\n}\n</code></pre><p>实际上，上面的代码实现就是典型的备忘录模式的代码实现，也是很多书籍（包括GoF的《设计模式》）中给出的实现方法。</p><p>除了备忘录模式，还有一个跟它很类似的概念，“备份”，它在我们平时的开发中更常听到。那备忘录模式跟“备份”有什么区别和联系呢？实际上，这两者的应用场景很类似，都应用在防丢失、恢复、撤销等场景中。它们的区别在于，备忘录模式更侧重于代码的设计和实现，备份更侧重架构设计或产品设计。这个不难理解，这里我就不多说了。</p><h2>如何优化内存和时间消耗？</h2><p>前面我们只是简单介绍了备忘录模式的原理和经典实现，现在我们再继续深挖一下。如果要备份的对象数据比较大，备份频率又比较高，那快照占用的内存会比较大，备份和恢复的耗时会比较长。这个问题该如何解决呢？</p><p>不同的应用场景下有不同的解决方法。比如，我们前面举的那个例子，应用场景是利用备忘录来实现撤销操作，而且仅仅支持顺序撤销，也就是说，每次操作只能撤销上一次的输入，不能跳过上次输入撤销之前的输入。在具有这样特点的应用场景下，为了节省内存，我们不需要在快照中存储完整的文本，只需要记录少许信息，比如在获取快照当下的文本长度，用这个值结合InputText类对象存储的文本来做撤销操作。</p><p>我们再举一个例子。假设每当有数据改动，我们都需要生成一个备份，以备之后恢复。如果需要备份的数据很大，这样高频率的备份，不管是对存储（内存或者硬盘）的消耗，还是对时间的消耗，都可能是无法接受的。想要解决这个问题，我们一般会采用“低频率全量备份”和“高频率增量备份”相结合的方法。</p><p>全量备份就不用讲了，它跟我们上面的例子类似，就是把所有的数据“拍个快照”保存下来。所谓“增量备份”，指的是记录每次操作或数据变动。</p><p>当我们需要恢复到某一时间点的备份的时候，如果这一时间点有做全量备份，我们直接拿来恢复就可以了。如果这一时间点没有对应的全量备份，我们就先找到最近的一次全量备份，然后用它来恢复，之后执行此次全量备份跟这一时间点之间的所有增量备份，也就是对应的操作或者数据变动。这样就能减少全量备份的数量和频率，减少对时间、内存的消耗。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>备忘录模式也叫快照模式，具体来说，就是在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。这个模式的定义表达了两部分内容：一部分是，存储副本以便后期恢复；另一部分是，要在不违背封装原则的前提下，进行对象的备份和恢复。</p><p>备忘录模式的应用场景也比较明确和有限，主要是用来防丢失、撤销、恢复等。它跟平时我们常说的“备份”很相似。两者的主要区别在于，备忘录模式更侧重于代码的设计和实现，备份更侧重架构设计或产品设计。</p><p>对于大对象的备份来说，备份占用的存储空间会比较大，备份和恢复的耗时会比较长。针对这个问题，不同的业务场景有不同的处理方式。比如，只备份必要的恢复信息，结合最新的数据来恢复；再比如，全量备份和增量备份相结合，低频全量备份，高频增量备份，两者结合来做恢复。</p><h2>课堂讨论</h2><p>今天我们讲到，备份在架构或产品设计中比较常见，比如，重启Chrome可以选择恢复之前打开的页面，你还能想到其他类似的应用场景吗？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？","id":222762},"right":{"article_title":"71 | 命令模式：如何利用命令模式实现一个手游后端架构？","id":224549}},"comments":[{"had_liked":false,"id":205766,"user_name":"DexterPoker","can_delete":false,"product_type":"c1","uid":1612721,"ip_address":"","ucode":"F3A2094DA7CEF2","user_header":"https://static001.geekbang.org/account/avatar/00/18/9b/b1/61dd29ad.jpg","comment_is_top":false,"comment_ctime":1586737261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"336594186349","product_id":100039001,"comment_content":"MySQL数据库低频全量备份，结合binlog增量备份，来恢复数据。","like_count":79},{"had_liked":false,"id":231736,"user_name":"张晋 🇨🇳","can_delete":false,"product_type":"c1","uid":2002268,"ip_address":"","ucode":"DC20FB284DB730","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8d/5c/a3e67232.jpg","comment_is_top":false,"comment_ctime":1593761965,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"139032715437","product_id":100039001,"comment_content":"看了王争老师很多课了，觉得都很好，但是不知道是疲惫了还是这个模式不是很重要，感觉没讲好，后面查看了网上资料才知道<br>Originator：发起者，负责创建一个备忘录，并且可以记录、恢复自身的内部状态。可以根据需要决定Memento保存自身的那些内部状态<br>Memento：备忘录，用于存储Originator的状态，防止Originator以外的的对象访问Memento<br>Caretaker：备忘录管理者，负责存储备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象。<br><br>作者：MrTrying<br>链接：https:&#47;&#47;www.jianshu.com&#47;p&#47;78b519d39fe5<br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><br>可能老师觉得比较基础所以没讲吧，感觉听的云里雾里的。","like_count":33,"discussions":[{"author":{"id":1463740,"avatar":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","nickname":"Yeyw","note":"","ucode":"C9D20DB91C3BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365626,"discussion_content":"不是一样的吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617853003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105744,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/50/b9955f61.jpg","nickname":"皮聪","note":"","ucode":"75D9E182BC00E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558755,"discussion_content":"思想确实是一样的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648452982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546004,"discussion_content":"这一讲确实讲的不好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642126194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304021,"discussion_content":"我觉得是不太重要，应用场景有限","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599451950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206015,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1586773287,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"96076053799","product_id":100039001,"comment_content":"游戏存档是不是很典型的例子？想当年，玩《勇者斗恶龙》的时候，打不过boss不断回到存档的地方，不断尝试。","like_count":23,"discussions":[{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260006,"discussion_content":"游戏存档大部分只要存某一个节点就够了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1588838068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291517,"discussion_content":"游戏存档，个人感觉是，存储存档点，玩家的各类信息（等级，装备，属性，血量等）即可。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594861118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205805,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1586742072,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"91781055288","product_id":100039001,"comment_content":"想起了Redis主从同步的增量和全量模式","like_count":21,"discussions":[{"author":{"id":1461075,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4b/53/f797f031.jpg","nickname":"无道win","note":"","ucode":"0C026BB03A53EA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263196,"discussion_content":"也可以类比redis的持久化策略RDB以及AOF","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589186231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205757,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1586736122,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"44536409082","product_id":100039001,"comment_content":"老师用词太过主观了，灌输访问者模式难理解的潜意识。我倒觉得 Single Dispatch 和 Double Dispatch 容易理解，反倒是今天的备忘模式难理解了。。。","like_count":11,"discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259701,"discussion_content":"可能在那里爬过坑，有心理阴影","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1588812000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287131,"discussion_content":"备忘录是对源对象的快照，也就是给拥有状态的对象的备份。使用一个新的类也就是快照类，获取源对象的内部状态，提供给外部使用，从而不影响源对象的使用，满足封装的特性","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593387633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1463740,"avatar":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","nickname":"Yeyw","note":"","ucode":"C9D20DB91C3BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365623,"discussion_content":"我觉得都简单，单双发的描述不好理解，实际上都很简单的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617852929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459980,"avatar":"https://static001.geekbang.org/account/avatar/00/16/47/0c/f2f0245e.jpg","nickname":"🐶","note":"","ucode":"D9E46DDB64BA77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350908,"discussion_content":"我反而觉得这个好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614070537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336838,"discussion_content":"可能觉得难理解的讲的多,容易理解的讲的少,虽然我也感觉这个没看明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608713837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045062,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","nickname":"Garwen","note":"","ucode":"C76346E1734AB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276699,"discussion_content":"心有同感，但是在想老师是不是视野更宽，可能文章中有老师铺垫比较好理解，但是换个例子换个场景就不太好理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590930867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238496,"user_name":"Smile @ Life","can_delete":false,"product_type":"c1","uid":1293907,"ip_address":"","ucode":"320EDAD5A8BE56","user_header":"https://static001.geekbang.org/account/avatar/00/13/be/53/eda4b622.jpg","comment_is_top":false,"comment_ctime":1596184963,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35955923331","product_id":100039001,"comment_content":"redis通过备份的形式进行持久化，分为两种模式<br>1、RDS：低频率全量备份<br>2、AOF: 高频率增量备份<br>而在AOF模式下通过配置auto-aof-rewrite来达到全量备份和增量备份相结合以减小AOF的备份大小<br>https:&#47;&#47;redis.io&#47;topics&#47;persistence","like_count":8},{"had_liked":false,"id":209445,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1587550295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35947288663","product_id":100039001,"comment_content":"还有比如word写文章的时候，选择撤销。这也是一种备忘录模式的实现。可以参考这个文章https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;J5a5ZcNCBBExpyCpU2o3wg","like_count":8},{"had_liked":false,"id":230089,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1593255210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31658026282","product_id":100039001,"comment_content":"理一下备忘录模式诞生的过程：<br>1.对于备份这个需求，一开始自然的想法是一个备份类（snapshot）里面保存一份数据（inputText）来做备份。inputText原来是用来表示数据的，没有提供setText这样的方法的必要，但是由于需要备份，使得inputText需要提供setText方法以便实现备份需求<br>2.为了实现备份需求，提供了setText方法，破坏了inputText原来的封装特性，即：类只需暴露有限的必要访问接口。这本不应该是inputText所应该提供的接口<br>3.为了解决破坏封装性问题，备忘录模式里面单独定义了用来备份的数据类（String）。从而备份的需求就不影响原来的inputText的设计了<br>4.除了备份还需要恢复，这个需求就不得不改动原来inputText的设计了，因为恢复的目标就是inputText，所以inputText需要提供相关恢复的restore方法<br>以上便诞生了备忘录模式：单独用一个新的类保存原来的数据（备份），原来对象提供新接口接收数据恢复（恢复）","like_count":7},{"had_liked":false,"id":206135,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1586792250,"is_pvip":false,"replies":[{"id":"86795","content":"嗯嗯，多谢！<br>","user_name":"作者回复","comment_id":206135,"uid":"1190123","ip_address":"","utype":1,"ctime":1594904553,"user_name_real":"王争"}],"discussion_count":3,"race_medal":1,"score":"23061628730","product_id":100039001,"comment_content":"System.out.println(inputText.toString());  ---&gt;    System.out.println(inputText.getText());","like_count":5,"discussions":[{"author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90786,"discussion_content":"小意见：这个性能测试的结果怕是不够精确。\n\n源码用的是 System.currentTimeMillis()(https://github.com/gdhucoder/Algorithms4/blob/91be7c63fcb0c0ccb917017bb77ae15c69031050/Ch_1_4/_Stopwatch.java#L16)，但是 currentTimeMillis 会有 15ms 左右的误差。https://stackoverflow.com/a/180179，参见第一条评论。\n\n一般来说，基于 JMH 的测试结果，才会被大家认可。\n","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1576778513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90812,"discussion_content":"棒！多谢指出！我看一下JMH","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576797156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":90812,"extra":""},{"author":{"id":1137481,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5b/49/ab0aa354.jpg","nickname":"TengYeh","note":"","ucode":"03D86E198BE8E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281331,"discussion_content":"感谢，认识了JMH","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591712836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":281331,"extra":""},{"author":{"id":1333040,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGXndj5N66z9fEbAetic0c0apELF9Xyj2cEFbuVeUhXW7iazxDbF3iaKq2xVorVN1swMfIVHne3tURA/132","nickname":"华夏明天","note":"","ucode":"813671834896E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406373,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634742803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":406373,"extra":""}]},{"author":{"id":1533352,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","nickname":"Kang","note":"","ucode":"6FD3642D6455AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305423,"discussion_content":"正则用起来确实很有难度，之前因为一个正则表达式贪婪回溯导致cpu100%，现在挺惧怕开发人员写正则的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1599919010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303585,"discussion_content":"正则不是说它不好， 他的匹配是可以优化， 但是说真的，在公司里面 大部分人知道正则这么个玩意，但是 一堆正则摆在那不加注释，读起来真的费劲， 也非常没必要","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599307449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347955,"avatar":"https://static001.geekbang.org/account/avatar/00/14/91/73/c50fb3e8.jpg","nickname":"Jawn Weak","note":"","ucode":"15E4117A0C775D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104454,"discussion_content":"每篇都在看你的评论和你的github, 感谢","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1577435399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1347955,"avatar":"https://static001.geekbang.org/account/avatar/00/14/91/73/c50fb3e8.jpg","nickname":"Jawn Weak","note":"","ucode":"15E4117A0C775D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104953,"discussion_content":"受宠若惊，一起加油💪！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577455460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":104454,"ip_address":""},"score":104953,"extra":""}]},{"author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204360,"discussion_content":"大佬的专研精神确实值得学习，这个Pattern的作用以前真没注意过","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584160900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204458,"discussion_content":"show me the code😄","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584175448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204360,"ip_address":""},"score":204458,"extra":""}]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376369,"discussion_content":"正则怎么说呢。站在个人开发的立场是没错的，在整个软件设计那就存在一定问题，还是结合实际开发做取舍，没有对错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622098296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240510,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UXCLpCDP4o2LFpLIrEup2arUOHzwhPY3X8nOoNSRwS6NgNiaQEduN8exnEDicc8goGCARIthOzwEpGATpiadzv3oQ/132","nickname":"formain","note":"","ucode":"D0B7816D6A40E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88420,"discussion_content":"知行合一，赞👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576714251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1607649,"avatar":"https://static001.geekbang.org/account/avatar/00/18/87/e1/7620e1b9.jpg","nickname":"小小光头","note":"","ucode":"D897582E93A6AA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87559,"discussion_content":"能和这样的大神一起学习真是太好辣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576673309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1607649,"avatar":"https://static001.geekbang.org/account/avatar/00/18/87/e1/7620e1b9.jpg","nickname":"小小光头","note":"","ucode":"D897582E93A6AA","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":87769,"discussion_content":"谬赞啦！我不是大神，但确实很辣🤩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576678526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":87559,"ip_address":""},"score":87769,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86927,"discussion_content":"正则是个好选择，主要是需要掌握正则对有些同学来说有一定的难度，所以呢，就针对“不要使用同事可能不懂的技术来实现代码”这个指导原则来看，正则还是需要斟酌下。\n\n但是，我们还是可以去验证和学会，比如你去研究的效率，就很赞呀，嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576632759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":86971,"discussion_content":"是的，正则掌握起来的确有点难度。尤其是一些写的很weird的正则，根本就看不懂😂。我记得有些常用的校验应该是有写好校验库可以直接使用。　","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576634911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86927,"ip_address":""},"score":86971,"extra":""}]}]},{"had_liked":false,"id":210808,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1587827796,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"18767696980","product_id":100039001,"comment_content":"我的电脑重不关机！","like_count":5,"discussions":[{"author":{"id":1222578,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a7/b2/274a4192.jpg","nickname":"漂泊的小飘","note":"","ucode":"25C0CA4887D8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236210,"discussion_content":"个人认为自己写了练手 放到自己的开源项目里面。重复的轮子不要直接提到公司项目的代码库比较好。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1587082556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1773278,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/0e/de/58e87ee4.jpg","nickname":"德鲁大叔","note":"","ucode":"DEF7B044BB756A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340421,"discussion_content":"我们不造轮子，但要懂造轮子的原理，必要时可以自己造","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609999234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1466995,"avatar":"https://static001.geekbang.org/account/avatar/00/16/62/73/a471b058.jpg","nickname":"刘博","note":"","ucode":"B7707E935533C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331924,"discussion_content":"只能说看问题的角度不一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607006199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287578,"discussion_content":"API调用师，哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593485244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380085,"discussion_content":"在完成工作的时候一定不要忘记自我提升。顶。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624335495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124989,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/7d/6fa73e96.jpg","nickname":"cheppin","note":"","ucode":"2111C9C5FB6636","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355839,"discussion_content":"造轮子的目地是了解轮子，更好使用轮子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615478860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1059944,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","nickname":"天敌","note":"","ucode":"CD29A622197197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300639,"discussion_content":"个人认为有时间并且希望提升自己可以自己造轮子试试，没有时间调调API不香吗。而且各个轮子的实现难度也很有差异=。=","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598198850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289629,"discussion_content":"造轮子是个人修养，如果有一天轮子无法满足使用场景，可不是要顶上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594168699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277663,"discussion_content":"调包侠。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591088509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91011,"discussion_content":"言之有理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576805732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227790,"user_name":"Geek_5227ac","can_delete":false,"product_type":"c1","uid":1607208,"ip_address":"","ucode":"8C468F5C45696E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiay65IMyD82E59Xnbp370ChMG3N9XQuXoKwfhZJ19zotzKMlJhwzBDxE61bp26jdkf54NY9L41yg/132","comment_is_top":false,"comment_ctime":1592481567,"is_pvip":false,"replies":[{"id":"83990","content":"优化内存和时间这一部分的方法确实有点类似prototype的设计思路。不过，备忘录本身并不是为了优化内存和时间，你可以看看文章的前半段解释。","user_name":"作者回复","comment_id":227790,"uid":"1190123","ip_address":"","utype":1,"ctime":1592525286,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"14477383455","product_id":100039001,"comment_content":"感觉很像prototype原型模式啊，比如考虑到内存，时间的消耗采用增量备份这里，老师能说下具体有什么区别吗？","like_count":3,"discussions":[{"author":{"id":1732780,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","nickname":"面向百度编程","note":"","ucode":"8FE04A019D71D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218244,"discussion_content":"所有知识到最后都是哲学问题么","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585636345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205586,"discussion_content":"如果没有目的，就不要运球。赞","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584324018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123103,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/1f/6452b2e8.jpg","nickname":"刘清斌","note":"","ucode":"775B053AF87B53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87602,"discussion_content":"奥卡姆剃刀原则，简单就是最有效","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576674742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238221,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","nickname":"Rain","note":"","ucode":"6A270D922A3B9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93262,"discussion_content":"赞一下杜锋那段","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576917470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205821,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1586743810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471645698","product_id":100039001,"comment_content":"备份的应用场景:<br>1. 游戏有自动备份功能, 掉线&#47;下线再次上线时, 可以继续之前的游戏;<br>2. Android提供了Activity状态的备份&#47;恢复, 当App处于后台, Activity被系统回收前会调用onSavedInstanceState()备份, App切回前台Activity会重建, 可以通过onRestoreInstanceState()恢复之前的状态.","like_count":3},{"had_liked":false,"id":205756,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1586735643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471637531","product_id":100039001,"comment_content":"打卡：今日学习备忘录模式，收获如下：<br>备忘录模式是在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。个人觉得理解起来就是解决对象状态一致性问题，主要是在代码设计上不要违背封装原则，如果能打破封装原则，那么就有可能对象的状态不一致了，后面恢复后对象状态就不一致了。备忘录模式与备份相似，前者注重代码设计，后者注重架构和产品设计。在大对象备份过程中，需要考虑存储以及恢复的时间，可以使用一定的策略，如只备份恢复必要的信息，如全量备份和增量备份相结合。<br>对于课堂讨论还有其他场景：数据库备份与恢复，Git版本管理，虚拟机生成快照与恢复等。","like_count":3},{"had_liked":false,"id":218640,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1589849429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179784021","product_id":100039001,"comment_content":"备忘录模式实现关键是利用栈的数据结构<br><br>课后思考<br>JDBC rollback 和 save point rollback","like_count":2},{"had_liked":false,"id":205999,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1586771009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176705601","product_id":100039001,"comment_content":"浏览器的后退、前进功能，也可以看作是一种“备份”","like_count":2},{"had_liked":false,"id":282022,"user_name":"...？","can_delete":false,"product_type":"c1","uid":1590038,"ip_address":"","ucode":"8CB8669180F9D8","user_header":"https://static001.geekbang.org/account/avatar/00/18/43/16/d18be4c5.jpg","comment_is_top":false,"comment_ctime":1615019118,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5909986414","product_id":100039001,"comment_content":"以前做过白板软件，手写字的笔画支持撤销，重做功能，每写一笔就把前一步的画面存到撤销栈里，每次撤销一笔把当前画面存到重做栈，并从撤销栈pop一个画面，重做就从重做栈恢复一个画面，限定栈的大小，就可以支持撤销几次和重做几次，但是当时还没学过设计模式，傻乎乎的做全量保存，根本不考虑性能","like_count":2},{"had_liked":false,"id":240588,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1596987693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891954989","product_id":100039001,"comment_content":"redis rdb aof","like_count":1},{"had_liked":false,"id":214868,"user_name":"好饿早知道送外卖了","can_delete":false,"product_type":"c1","uid":1132304,"ip_address":"","ucode":"AED22DB5BF8FC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","comment_is_top":false,"comment_ctime":1588838096,"is_pvip":false,"discussion_count":2,"race_medal":2,"score":"5883805392","product_id":100039001,"comment_content":"最常见的就是编译器啊，哈哈","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478304,"discussion_content":"嗯嗯 我的意思不能为了用新技术而引入新技术 不过也没那么绝对 设计问题本来就没有绝对的对重庆更多的是弄明白道理之后 根据实际场景自己去权衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366355,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hjusice0zQC87lFvFOZmThoQhSBbFSouafmTIvaCUEV7EPcoxJeic6jfohQ668ricDspE4F8hHmORWhAsle5jbCw/132","nickname":"学习学习再学习","note":"","ucode":"D72EE19D148B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572019,"discussion_content":"我认为也即是，不要炫技，单纯为了用新技术而用新技术。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652544490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2706250,"avatar":"https://static001.geekbang.org/account/avatar/00/29/4b/4a/31e564f9.jpg","nickname":"袁志林 上午专注工作不微信","note":"","ucode":"E7534D13A40B8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555963,"discussion_content":"我觉得，不要引入偏门或者即将落伍的技术。如果基础技术，或者更好的技术 值得尝试。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647145097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2789067,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/8e/cb/1efcaf20.jpg","nickname":"Justway","note":"","ucode":"75966B5533C872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585205,"discussion_content":"应该是用之前要和团队沟通好，我要用XXX新技术了，大家都同意之后再使用。不要自己默默就用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661395447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210803,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1587826972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882794268","product_id":100039001,"comment_content":"看文章第一个联想到的是mysql事务的undo log","like_count":1},{"had_liked":false,"id":207859,"user_name":"微光倾城","can_delete":false,"product_type":"c1","uid":1305992,"ip_address":"","ucode":"7C9938EC29D574","user_header":"https://static001.geekbang.org/account/avatar/00/13/ed/88/0d608525.jpg","comment_is_top":false,"comment_ctime":1587198647,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5882165943","product_id":100039001,"comment_content":"看到标题就想到了git...","like_count":2,"discussions":[{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572136,"discussion_content":"深有体会。想起当初只工作一年多的自己，就特别喜欢套各种设计模式，写各种性能高的算法。甚至舍去了很多代码可读性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652617512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393162,"discussion_content":"赞👍 做减法比做加法更难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631273046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2096765,"avatar":"","nickname":"Geek_cde7db","note":"","ucode":"D8A7F8EA700009","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296493,"discussion_content":"如果领导说给它弄复杂点，好让需求方加钱，你怎么办嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596554437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1017181,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/5d/ec94b66d.jpg","nickname":"程序袁帅","note":"","ucode":"C281CA64EC91A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2096765,"avatar":"","nickname":"Geek_cde7db","note":"","ucode":"D8A7F8EA700009","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317511,"discussion_content":"怼回去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603554523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296493,"ip_address":""},"score":317511,"extra":""}]}]},{"had_liked":false,"id":206325,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1586840105,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5881807401","product_id":100039001,"comment_content":"1.码码时，一般都是临时变量存储对象的克隆对象，以实现备份。并不会作用的备忘录模式（编码成本在那里）。请问这个在什么场景应用好？能有收益大于成本的体现。","like_count":1,"discussions":[{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285351,"discussion_content":"好的酒神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592813687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205910,"user_name":"hanazawakana","can_delete":false,"product_type":"c1","uid":1251721,"ip_address":"","ucode":"E0F6FACBFE7D15","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","comment_is_top":false,"comment_ctime":1586755231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881722527","product_id":100039001,"comment_content":"MySQL也会定期做全备份，然后还有binlog redolog这样的增量备份","like_count":1},{"had_liked":false,"id":205892,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1586751622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881718918","product_id":100039001,"comment_content":"1.从开发上将,在使用定时任务Quartz的时候,会进行对应的备份,方便我们在项目重启后从数据库中反序列化回来,利用了一个外部工具来进行了备份<br>2.在整体架构中,MySQL就是使用全量备份和增量备份相结合的方式进行了备份,我们自己的项目也是一星期一次全量,配合binlog回滚<br>3.在生活中,我记得XBox上的极限竞速游戏提供了回滚功能,就是使用的备份来方便撞车后直接回溯操作","like_count":2},{"had_liked":false,"id":205801,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1586741870,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5881709166","product_id":100039001,"comment_content":"每次更新服务打补丁都要备份一个当前版本了。","like_count":1},{"had_liked":false,"id":205765,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1586736896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881704192","product_id":100039001,"comment_content":"mysql和redis的快照功能","like_count":1},{"had_liked":false,"id":205763,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1586736785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881704081","product_id":100039001,"comment_content":"mysql数据库基于时间点的数据恢复也该是备忘录模式实现的","like_count":1},{"had_liked":false,"id":205759,"user_name":"Modern","can_delete":false,"product_type":"c1","uid":1239720,"ip_address":"","ucode":"23B741F694F7D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/a8/72e43f12.jpg","comment_is_top":false,"comment_ctime":1586736493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881703789","product_id":100039001,"comment_content":"将软件配置导出，转给他人，他人用此文件初始化软件，比如快捷键外观字体等的设置<br>打开软件可以任意选择一个曾经工作的项目，可以打开之前的编辑状态","like_count":1},{"had_liked":false,"id":205727,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586713596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881680892","product_id":100039001,"comment_content":"IDE每次退出重新打开都有之前打开的代码窗口，git呢？","like_count":1},{"had_liked":false,"id":343798,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1651059775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651059775","product_id":100039001,"comment_content":"redis的 RDB和AOF","like_count":0},{"had_liked":false,"id":340113,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1648608609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648608609","product_id":100039001,"comment_content":"redis 的持久化  rdb和aof","like_count":0},{"had_liked":false,"id":335300,"user_name":"源不息","can_delete":false,"product_type":"c1","uid":2739750,"ip_address":"","ucode":"2B9FF0B611BC9E","user_header":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","comment_is_top":false,"comment_ctime":1645445060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645445060","product_id":100039001,"comment_content":"1. 各种软件的撤销功能<br>2. redis 的RDB 和 AOF<br>","like_count":0},{"had_liked":false,"id":328724,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1640853171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640853171","product_id":100039001,"comment_content":"redis RDB和AOF","like_count":0},{"had_liked":false,"id":327434,"user_name":"xamarin2018","can_delete":false,"product_type":"c1","uid":1229832,"ip_address":"","ucode":"3266697A707C83","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/08/d90ded4e.jpg","comment_is_top":false,"comment_ctime":1640135021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640135021","product_id":100039001,"comment_content":"我们常见的游戏的存档备份啦，Redis的备份啦，安卓端的Activity的状态恢复啦","like_count":0},{"had_liked":false,"id":319590,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1635860105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635860105","product_id":100039001,"comment_content":"MySQL的 redo log就是使用备忘录模式实现。","like_count":0},{"had_liked":false,"id":318039,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1635129441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635129441","product_id":100039001,"comment_content":"我们之前在做一个同步白板时，绘制的图形，支持撤销，恢复操作，就是这个场景","like_count":0},{"had_liked":false,"id":311216,"user_name":"愿望","can_delete":false,"product_type":"c1","uid":1429904,"ip_address":"","ucode":"B7E3F13D841E8F","user_header":"https://static001.geekbang.org/account/avatar/00/15/d1/90/a9277d66.jpg","comment_is_top":false,"comment_ctime":1631109204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631109204","product_id":100039001,"comment_content":"大数据业务涉及的数据仓库(DW),要保存数据的历史,这个是不是换一个备忘录模式的典型应用场景呢?","like_count":0},{"had_liked":false,"id":311042,"user_name":"愿望","can_delete":false,"product_type":"c1","uid":1429904,"ip_address":"","ucode":"B7E3F13D841E8F","user_header":"https://static001.geekbang.org/account/avatar/00/15/d1/90/a9277d66.jpg","comment_is_top":false,"comment_ctime":1631029111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631029111","product_id":100039001,"comment_content":"备忘录模式适合用来做缓存吗?","like_count":0},{"had_liked":false,"id":309775,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1630328163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630328163","product_id":100039001,"comment_content":"Redis的持久化","like_count":0},{"had_liked":false,"id":288248,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1618379911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618379911","product_id":100039001,"comment_content":"存储和恢复，但是不能违背面向对象封装的原则。<br>低频全量和高频增量相结合，是完美的备份方案。","like_count":0},{"had_liked":false,"id":275159,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1611364429,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611364429","product_id":100039001,"comment_content":"InputText 类和 Snapshot 类保存的数据一样，为什么不能合并为一个类呢？这样不是更节省内存吗？","like_count":0,"discussions":[{"author":{"id":2418674,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e7/f2/9883115a.jpg","nickname":"魅影","note":"","ucode":"6CAA41A86C137E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343595,"discussion_content":"请问lambda要怎么调试代码呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611106772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1014260,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/79/f4/d85e7e58.jpg","nickname":"看山","note":"","ucode":"F030DD58D0BDC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2418674,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e7/f2/9883115a.jpg","nickname":"魅影","note":"","ucode":"6CAA41A86C137E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343607,"discussion_content":"断点不香吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611110243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":343595,"ip_address":""},"score":343607,"extra":""}]},{"author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300978,"discussion_content":"有道理！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598351442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268948,"user_name":"@@fighting","can_delete":false,"product_type":"c1","uid":1236394,"ip_address":"","ucode":"7235C1E74549AE","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/aa/859544fd.jpg","comment_is_top":false,"comment_ctime":1608443458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608443458","product_id":100039001,"comment_content":"mongodb 的 wiredTiger 引擎也是类似的备份方式","like_count":0},{"had_liked":false,"id":266349,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1607310125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607310125","product_id":100039001,"comment_content":"两个疑问：<br>class InputText： 为什么要有setText方法，以及为什么使用replace (this.text.replace(0, this.text.length(), text);) 而不是直接替换 this.text = new StringBuilder(text)<br><br>if (input.equals(&quot;:undo&quot;)) { InputText snapshot = snapshotsHolder.popSnapshot(); inputText.setText(snapshot.getText()); }<br><br>这里是不是可以直接使用 inputText = snapshotsHolder.popSnapshot();<br><br><br>static class InputText {<br>        private StringBuilder text = new StringBuilder();<br>        public String getText() {<br>            return text.toString();<br>        }<br>        public void append(String input) {<br>            text.append(input);<br>        }<br>        &#47;&#47; 移除set方法<br>    }<br>    static class SnapshotHolder {<br>        private Stack&lt;InputText&gt; snapshots = new Stack &lt;&gt;();<br>        public InputText popSnapshot() {<br>            return snapshots.pop();<br>        }<br>        public void pushSnapshot(InputText inputText) {<br>            InputText deepCloneInputText = new InputText();<br>            deepCloneInputText.append(inputText.getText());<br>            snapshots.push(deepCloneInputText);<br>        }<br>    }<br>    public static void main(String[] args) {<br>        InputText inputText = new InputText();<br>        SnapshotHolder snapshotHolder = new SnapshotHolder();<br>        Scanner scanner = new Scanner(System.in);<br>        while (scanner.hasNext()) {<br>            String input = scanner.next();<br>            if (input.equals(&quot;:list&quot;)) {<br>                System.out.println(inputText.getText());<br>            } else if (input.equals(&quot;:undo&quot;)) {<br>                inputText = snapshotHolder.popSnapshot();<br>                &#47;&#47; 直接替换<br>            } else {<br>                snapshotHolder.pushSnapshot(inputText);<br>                inputText.append(input);<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":260620,"user_name":"查理","can_delete":false,"product_type":"c1","uid":1111297,"ip_address":"","ucode":"A9FEA901E3A05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/01/5389295c.jpg","comment_is_top":false,"comment_ctime":1605072155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605072155","product_id":100039001,"comment_content":"业务中有哪些应用场景呢？","like_count":0},{"had_liked":false,"id":259657,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1604803075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604803075","product_id":100039001,"comment_content":"第一种实现是不是可以理解为，将对输入的文本对象的处理逻辑和对快照的处理逻辑耦合在了一起？","like_count":0},{"had_liked":false,"id":254341,"user_name":"Zoey","can_delete":false,"product_type":"c1","uid":1642231,"ip_address":"","ucode":"CEEB0E30B3AA4C","user_header":"https://static001.geekbang.org/account/avatar/00/19/0e/f7/821e4243.jpg","comment_is_top":false,"comment_ctime":1603102330,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603102330","product_id":100039001,"comment_content":"感觉跟Mysql的数据恢复模式一模一样。。","like_count":0},{"had_liked":false,"id":248855,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1600335380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600335380","product_id":100039001,"comment_content":"数据同步也算备份吧，OLTP --&gt; OLAP 可以用这两种方式实现，在源库资源充足的时候，进行全量备份，或者利用 mysql binlog 特性，伪装成从库，把数据发送到 MQ 中，MQ 发到目标库中，然后进行增量同步（备份）。<br>还有 Redis 主从同步，第一次 redis从库同步主库，会发送个 FULLRESYNC 命令，进行全量复制，从库本地完成数据加载后，之后就进行增量同步（备份）。","like_count":0},{"had_liked":false,"id":232302,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1593950524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593950524","product_id":100039001,"comment_content":"备份模式：就是备份上一个操作的数据，用于之后有条件的恢复。需要保证备份的不可变。<br>mysql也存在备份的架构，即数据从master同步到slave也是有一个snapshot。mysql定时生成snapshot文件，对于增量的是用binglog保存。恢复数据的时候根据snapshot再执行增量binglog。","like_count":0},{"had_liked":false,"id":227802,"user_name":"CarlXu","can_delete":false,"product_type":"c1","uid":1585713,"ip_address":"","ucode":"6A5DF4459907C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/32/31/449513a1.jpg","comment_is_top":false,"comment_ctime":1592484756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592484756","product_id":100039001,"comment_content":"我们最常用的不是开发工具里面代码的修改, 撤销, 反撤销么,  每天至少都操作几十次呢.","like_count":0},{"had_liked":false,"id":222067,"user_name":"ACE_Killer09","can_delete":false,"product_type":"c1","uid":1618019,"ip_address":"","ucode":"4ED9D2A521A237","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqQVYE1EfqibdyNsnjFibHW4jee0Q3qMMeRhqqVQUn5Ix9fFl3Zfzf0xpdrGypxHUmBCyiczfyEaPoWA/132","comment_is_top":false,"comment_ctime":1590668521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590668521","product_id":100039001,"comment_content":"例子代码写的有点奇葩，注意输入时候是下一次生效的<br>snapshotsHolder.pushSnapshot(inputText);<br>inputText.append(input);<br><br>pop时取的是前一次的值。","like_count":0},{"had_liked":false,"id":217082,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1589418405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589418405","product_id":100039001,"comment_content":"浏览器的前进后退是不是也算一种备忘","like_count":0},{"had_liked":false,"id":216082,"user_name":"贺宇","can_delete":false,"product_type":"c1","uid":1445040,"ip_address":"","ucode":"55854825CC4AD2","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/b0/26c0e53f.jpg","comment_is_top":false,"comment_ctime":1589186367,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589186367","product_id":100039001,"comment_content":"mysql事务的隔离型","like_count":0},{"had_liked":false,"id":205799,"user_name":"君哥聊技术","can_delete":false,"product_type":"c1","uid":1325816,"ip_address":"","ucode":"2C9A22BCE4C79E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","comment_is_top":false,"comment_ctime":1586741815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586741815","product_id":100039001,"comment_content":"数据库的mvcc机制，现在一些分布式事务的实现方式也用到了这种思想","like_count":0},{"had_liked":false,"id":205758,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1586736280,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586736280","product_id":100039001,"comment_content":"想到的是redis中数据的备份和恢复，通过全量和增量备份结合来做恢复。","like_count":0},{"had_liked":false,"id":205755,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1586735508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586735508","product_id":100039001,"comment_content":"高频增量也是数据库事务隔离用的方法","like_count":0},{"had_liked":false,"id":205747,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1586733930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586733930","product_id":100039001,"comment_content":"电脑待机后启动恢复到待机前最后一个状态。","like_count":0}]}