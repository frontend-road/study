{"id":176850,"title":"08 | 易用性改进 I：自动类型推断和初始化","content":"<p>你好，我是吴咏炜。</p><p>在之前的几讲里，我们已经多多少少接触到了一些 C++11 以来增加的新特性。下面的两讲，我会重点讲一下现代 C++（C++11/14/17）带来的易用性改进。</p><p>就像我们 <a href=\"https://time.geekbang.org/column/article/169177\">[开篇词]</a> 中说的，我们主要是介绍 C++ 里好用的特性，而非让你死记规则。因此，这里讲到的内容，有时是一种简化的说法。对于日常使用，本讲介绍的应该能满足大部分的需求。对于复杂用法和边角情况，你可能还是需要查阅参考资料里的明细规则。</p><h2>自动类型推断</h2><p>如果要挑选 C++11 带来的最重大改变的话，自动类型推断肯定排名前三。如果只看易用性或表达能力的改进的话，那它就是“舍我其谁”的第一了。</p><h3>auto</h3><p>自动类型推断，顾名思义，就是编译器能够根据表达式的类型，自动决定变量的类型（从 C++14 开始，还有函数的返回类型），不再需要程序员手工声明（<span class=\"orange\">[1]</span>）。但需要说明的是，<code>auto</code> 并没有改变 C++ 是静态类型语言这一事实——使用 <code>auto</code> 的变量（或函数返回值）的类型仍然是编译时就确定了，只不过编译器能自动帮你填充而已。</p><p>自动类型推断使得像下面这样累赘的表达式成为历史：</p><pre><code class=\"language-c++\">// vector&lt;int&gt; v;\nfor (vector&lt;int&gt;::iterator\n       it = v.begin(),\n       end = v.end();\n     it != end; ++it) {\n  // 循环体\n}\n</code></pre><!-- [[[read_end]]] --><p>现在我们可以直接写（当然，是不使用基于范围的 for 循环的情况）：</p><pre><code class=\"language-c++\">for (auto it = v.begin(), end = v.end();\n     it != end; ++it) {\n  // 循环体\n}\n</code></pre><p>不使用自动类型推断时，如果容器类型未知的话，我们还需要加上 <code>typename</code>（注意此处 const 引用还要求我们写 <code>const_iterator</code> 作为迭代器的类型）：</p><pre><code class=\"language-c++\">template &lt;typename T&gt;\nvoid foo(const T&amp; container)\n{\n  for (typename T::const_iterator\n         it = v.begin(),\n    …\n}\n</code></pre><p>如果 <code>begin</code> 返回的类型不是该类型的 <code>const_iterator</code> 嵌套类型的话，那实际上不用自动类型推断就没法表达了。这还真不是假设。比如，如果我们的遍历函数要求支持 C 数组的话，不用自动类型推断的话，就只能使用两个不同的重载：</p><pre><code class=\"language-c++\">template &lt;typename T, std::size_t N&gt;\nvoid foo(const T (&amp;a)[N])\n{\n  typedef const T* ptr_t;\n  for (ptr_t it = a, end = a + N;\n       it != end; ++it) {\n    // 循环体\n  }\n}\n\ntemplate &lt;typename T&gt;\nvoid foo(const T&amp; c)\n{\n  for (typename T::const_iterator\n         it = c.begin(),\n         end = c.end();\n       it != end; ++it) {\n    // 循环体\n  }\n}\n</code></pre><p>如果使用自动类型推断的话，再加上 C++11 提供的全局 <code>begin</code> 和 <code>end</code> 函数，上面的代码可以统一成：</p><pre><code class=\"language-c++\">template &lt;typename T&gt;\nvoid foo(const T&amp; c)\n{\n  using std::begin;\n  using std::end;\n  // 使用依赖参数查找（ADL）；见 [strong_begin][2][strong_end]\n  for (auto it = begin(c),\n       ite = end(c);\n       it != ite; ++it) {\n    // 循环体\n  }\n}\n</code></pre><p>从这个例子可见，自动类型推断不仅降低了代码的啰嗦程度，也提高了代码的抽象性，使我们可以用更少的代码写出通用的功能。</p><p><code>auto</code> 实际使用的规则类似于函数模板参数的推导规则（<span class=\"orange\">[3]</span>）。当你写了一个含 <code>auto</code> 的表达式时，相当于把 <code>auto</code> 替换为模板参数的结果。举具体的例子：</p><ul>\n<li><code>auto a = expr;</code> 意味着用 <code>expr</code> 去匹配一个假想的 <code>template &lt;typename T&gt; f(T)</code> 函数模板，结果为值类型。</li>\n<li><code>const auto&amp; a = expr;</code> 意味着用 <code>expr</code> 去匹配一个假想的 <code>template &lt;typename T&gt; f(const T&amp;)</code> 函数模板，结果为常左值引用类型。</li>\n<li><code>auto&amp;&amp; a = expr;</code> 意味着用 <code>expr</code> 去匹配一个假想的 <code>template &lt;typename T&gt; f(T&amp;&amp;)</code> 函数模板，根据<a href=\"https://time.geekbang.org/column/article/169268\">[第 3 讲]</a> 中我们讨论过的转发引用和引用坍缩规则，结果是一个跟 <code>expr</code> 值类别相同的引用类型。</li>\n</ul><h3>decltype</h3><p><code>decltype</code> 的用途是获得一个表达式的类型，结果可以跟类型一样使用。它有两个基本用法：</p><ul>\n<li><code>decltype(变量名)</code> 可以获得变量的精确类型。</li>\n<li><code>decltype(表达式)</code> （表达式不是变量名，但包括 <code>decltype((变量名))</code> 的情况）可以获得表达式的引用类型；除非表达式的结果是个纯右值（prvalue），此时结果仍然是值类型。</li>\n</ul><p>如果我们有 <code>int a;</code>，那么：</p><ul>\n<li><code>decltype(a)</code> 会获得 <code>int</code>（因为 <code>a</code> 是 <code>int</code>）。</li>\n<li><code>decltype((a))</code> 会获得 <code>int&amp;</code>（因为 <code>a</code> 是 lvalue）。</li>\n<li><code>decltype(a + a)</code> 会获得 <code>int</code>（因为 <code>a + a</code> 是 prvalue）。</li>\n</ul><h3>decltype(auto)</h3><p>通常情况下，能写 <code>auto</code> 来声明变量肯定是件比较轻松的事。但这儿有个限制，你需要在写下 <code>auto</code> 时就决定你写下的是个引用类型还是值类型。根据类型推导规则，<code>auto</code> 是值类型，<code>auto&amp;</code> 是左值引用类型，<code>auto&amp;&amp;</code> 是转发引用（可以是左值引用，也可以是右值引用）。使用 <code>auto</code> 不能通用地根据表达式类型来决定返回值的类型。不过，<code>decltype(expr)</code> 既可以是值类型，也可以是引用类型。因此，我们可以这么写：</p><pre><code class=\"language-c++\">decltype(expr) a = expr;\n</code></pre><p>这种写法明显不能让人满意，特别是表达式很长的情况（而且，任何代码重复都是潜在的问题）。为此，C++14 引入了 <code>decltype(auto)</code> 语法。对于上面的情况，我们只需要像下面这样写就行了。</p><pre><code class=\"language-c++\">decltype(auto) a = expr;\n</code></pre><p>这种代码主要用在通用的转发函数模板中：你可能根本不知道你调用的函数是不是会返回一个引用。这时使用这种语法就会方便很多。</p><h3>函数返回值类型推断</h3><p>从 C++14 开始，函数的返回值也可以用 <code>auto</code> 或 <code>decltype(auto)</code> 来声明了。同样的，用 <code>auto</code> 可以得到值类型，用 <code>auto&amp;</code> 或 <code>auto&amp;&amp;</code> 可以得到引用类型；而用 <code>decltype(auto)</code> 可以根据返回表达式通用地决定返回的是值类型还是引用类型。</p><p>和这个形式相关的有另外一个语法，后置返回值类型声明。严格来说，这不算“类型推断”，不过我们也放在一起讲吧。它的形式是这个样子：</p><pre><code class=\"language-c++\">auto foo(参数) -&gt; 返回值类型声明\n{\n  // 函数体\n}\n</code></pre><p>通常，在返回类型比较复杂、特别是返回类型跟参数类型有某种推导关系时会使用这种语法。以后我们会讲到一些实例。今天暂时不多讲了。</p><h3>类模板的模板参数推导</h3><p>如果你用过 <code>pair</code> 的话，一般都不会使用下面这种形式：</p><pre><code class=\"language-c++\">pair&lt;int, int&gt; pr{1, 42};\n</code></pre><p>使用 <code>make_pair</code> 显然更容易一些：</p><pre><code class=\"language-c++\">auto pr = make_pair(1, 42);\n</code></pre><p>这是因为函数模板有模板参数推导，使得调用者不必手工指定参数类型；但 C++17 之前的类模板却没有这个功能，也因而催生了像 <code>make_pair</code> 这样的工具函数。</p><p>在进入了 C++17 的世界后，这类函数变得不必要了。现在我们可以直接写：</p><pre><code class=\"language-c++\">pair pr{1, 42};\n</code></pre><p>生活一下子变得简单多了！</p><p>在初次见到 <code>array</code> 时，我觉得它的主要缺点就是不能像 C 数组一样自动从初始化列表来推断数组的大小了：</p><pre><code class=\"language-c++\">int a1[] = {1, 2, 3};\narray&lt;int, 3&gt; a2{1, 2, 3}; // 啰嗦\n// array&lt;int&gt; a3{1, 2, 3}; 不行\n</code></pre><p>这个问题在 C++17 里也是基本不存在的。虽然不能只提供一个模板参数，但你可以两个参数全都不写 🤣：</p><pre><code class=\"language-c++\">array a{1, 2, 3};\n// 得到 array&lt;int, 3&gt;\n</code></pre><p>这种自动推导机制，可以是编译器根据构造函数来自动生成：</p><pre><code class=\"language-c++\">template &lt;typename T&gt;\nstruct MyObj {\n  MyObj(T value);\n  …\n};\n\nMyObj obj1{string(\"hello\")};\n// 得到 MyObj&lt;string&gt;\nMyObj obj2{\"hello\"};\n// 得到 MyObj&lt;const char*&gt;\n</code></pre><p>也可以是手工提供一个推导向导，达到自己需要的效果：</p><pre><code class=\"language-c++\">template &lt;typename T&gt;\nstruct MyObj {\n  MyObj(T value);\n  …\n};\n\nMyObj(const char*) -&gt; MyObj&lt;string&gt;;\n\nMyObj obj{\"hello\"};\n// 得到 MyObj&lt;string&gt;\n</code></pre><p>更多的技术细节请参见参考资料 <span class=\"orange\">[4]</span>。</p><h3>结构化绑定</h3><p>在讲关联容器的时候我们有过这样一个例子：</p><pre><code class=\"language-c++\">multimap&lt;string, int&gt;::iterator\n  lower, upper;\nstd::tie(lower, upper) =\n  mmp.equal_range(\"four\");\n</code></pre><p>这个例子里，返回值是个 <code>pair</code>，我们希望用两个变量来接收数值，就不得不声明了两个变量，然后使用 <code>tie</code> 来接收结果。在 C++11/14 里，这里是没法使用 <code>auto</code> 的。好在 C++17 引入了一个新语法，解决了这个问题。目前，我们可以把上面的代码简化为：</p><pre><code class=\"language-c++\">auto [lower, upper] =\n  mmp.equal_range(\"four\");\n</code></pre><p>这个语法使得我们可以用 <code>auto</code> 声明变量来分别获取 <code>pair</code> 或 <code>tuple</code> 返回值里各个子项，可以让代码的可读性更好。</p><p>关于这个语法的更多技术说明，请参见参考资料 <span class=\"orange\">[5]</span>。</p><h2>列表初始化</h2><p>在 C++98 里，标准容器比起 C 风格数组至少有一个明显的劣势：不能在代码里方便地初始化容器的内容。比如，对于数组你可以写：</p><pre><code class=\"language-c++\">int a[] = {1, 2, 3, 4, 5};\n</code></pre><p>而对于 <code>vector</code> 你却得写：</p><pre><code class=\"language-c++\">vector&lt;int&gt; v;\nv.push(1);\nv.push(2);\nv.push(3);\nv.push(4);\nv.push(5);\n</code></pre><p>这样真是又啰嗦，性能又差，显然无法让人满意。于是，C++ 标准委员会引入了列表初始化，允许以更简单的方式来初始化对象。现在我们初始化容器也可以和初始化数组一样简单了：</p><pre><code class=\"language-c++\">vector&lt;int&gt; v{1, 2, 3, 4, 5};\n</code></pre><p>同样重要的是，这不是对标准库容器的特殊魔法，而是一个通用的、可以用于各种类的方法。从技术角度，编译器的魔法只是对 <code>{1, 2, 3}</code> 这样的表达式自动生成一个初始化列表，在这个例子里其类型是 <code>initializer_list&lt;int&gt;</code>。程序员只需要声明一个接受 <code>initializer_list</code> 的构造函数即可使用。从效率的角度，至少在动态对象的情况下，容器和数组也并无二致，都是通过拷贝（构造）进行初始化。</p><p>对于初始化列表在构造函数外的用法和更多的技术细节，请参见参考资料 <span class=\"orange\">[6]</span>。</p><h2>统一初始化</h2><p>你可能已经注意到了，我在代码里使用了大括号 <code>{}</code> 来进行对象的初始化。这当然也是 C++11 引入的新语法，能够代替很多小括号 <code>()</code> 在变量初始化时使用。这被称为统一初始化（uniform initialization）。</p><p>大括号对于构造一个对象而言，最大的好处是避免了 C++ 里“最令人恼火的语法分析”（the most vexing parse）。我也遇到过。假设你有一个类，原型如下：</p><pre><code class=\"language-c++\">class utf8_to_wstring {\npublic:\n  utf8_to_wstring(const char*);\n  operator wchar_t*();\n};\n</code></pre><p>然后你在 Windows 下想使用这个类来帮助转换文件名，打开文件：</p><pre><code class=\"language-c++\">ifstream ifs(\n  utf8_to_wstring(filename));\n</code></pre><p>你随后就会发现，<code>ifs</code> 的行为无论如何都不正常。最后，要么你自己查到，要么有人告诉你，上面这个写法会被编译器认为是和下面的写法等价的：</p><pre><code class=\"language-c++\">ifstream ifs(\n  utf8_to_wstring filename);\n</code></pre><p>换句话说，编译器认为你是声明了一个叫 <code>ifs</code> 的函数，而不是对象！</p><p>如果你把任何一对小括号替换成大括号（或者都替换，如下），则可以避免此类问题：</p><pre><code class=\"language-c++\">ifstream ifs{\n  utf8_to_wstring{filename}};\n</code></pre><p>推而广之，你几乎可以在所有初始化对象的地方使用大括号而不是小括号。它还有一个附带的特点：当一个构造函数没有标成 <code>explicit</code> 时，你可以使用大括号不写类名来进行构造，如果调用上下文要求那类对象的话。如：</p><pre><code class=\"language-c++\">Obj getObj()\n{\n  return {1.0};\n}\n</code></pre><p>如果 Obj 类可以使用浮点数进行构造的话，上面的写法就是合法的。如果有无参数、多参数的构造函数，也可以使用这个形式。除了形式上的区别，它跟 <code>Obj(1.0)</code> 的主要区别是，后者可以用来调用 <code>Obj(int)</code>，而使用大括号时编译器会拒绝“窄”转换，不接受以 <code>{1.0}</code> 或 <code>Obj{1.0}</code> 的形式调用构造函数 <code>Obj(int)</code>。</p><p>这个语法主要的限制是，如果一个类既有使用初始化列表的构造函数，又有不使用初始化列表的构造函数，那编译器会<strong>千方百计</strong>地试图调用使用初始化列表的构造函数，导致各种意外。所以，如果给一个推荐的话，那就是：</p><ul>\n<li>如果一个类没有使用初始化列表的构造函数时，初始化该类对象可全部使用统一初始化语法。</li>\n<li>如果一个类有使用初始化列表的构造函数时，则只应用在初始化列表构造的情况。</li>\n</ul><p>关于这个语法的更多详细用法讨论，请参见参考资料 <span class=\"orange\">[7]</span>。</p><h2>类数据成员的默认初始化</h2><p>按照 C++98 的语法，数据成员可以在构造函数里进行初始化。这本身不是问题，但实践中，如果数据成员比较多、构造函数又有多个的话，逐个去初始化是个累赘，并且很容易在增加数据成员时漏掉在某个构造函数中进行初始化。为此，C++11 增加了一个语法，允许在声明数据成员时直接给予一个初始化表达式。这样，当且仅当构造函数的初始化列表中不包含该数据成员时，这个数据成员就会自动使用初始化表达式进行初始化。</p><p>这个句子有点长。我们看个例子：</p><pre><code class=\"language-c++\">class Complex {\npublic:\n  Complex()\n    : re_(0) , im_(0) {}\n  Complex(float re)\n    : re_(re), im_(0) {}\n  Complex(float re, float im)\n    : re_(re) , im_(im) {}\n  …\n\nprivate:\n  float re_;\n  float im_;\n};\n</code></pre><p>假设由于某种原因，我们不能使用缺省参数来简化构造函数，我们可以用什么方式来优化上面这个代码呢？</p><p>使用数据成员的默认初始化的话，我们就可以这么写：</p><pre><code class=\"language-c++\">class Complex {\npublic:\n  Complex() {}\n  Complex(float re) : re_(re) {}\n  Complex(float re, float im)\n    : re_(re) , im_(im) {}\n\nprivate:\n  float re_{0};\n  float im_{0};\n};\n</code></pre><p>第一个构造函数没有任何初始化列表，所以类数据成员的初始化全部由默认初始化完成，<code>re_</code> 和 <code>im_</code> 都是 0。第二个构造函数提供了 <code>re_</code> 的初始化，<code>im_</code> 仍由默认初始化完成。第三个构造函数则完全不使用默认初始化。</p><h2>内容小结</h2><p>在本讲中，我们介绍了现代 C++ 引入的几个易用性改进：自动类型推断，初始化列表，及类数据成员的默认初始化。使用这些特性非常简单，可以立即简化你的 C++ 代码，而不会引入额外的开销。唯一的要求只是你不要再使用那些上古时代的老掉牙编译器了……</p><h2>课后思考</h2><p>你使用过现代 C++ 的这些特性了吗？如果还没有的话，哪些特性你打算在下一个项目里开始使用？</p><p>欢迎留言来分享你的看法。</p><h2><span class=\"reference\">参考资料</span></h2><p><span class=\"reference\">[1] cppreference.com, “Placeholder type specifiers”. <a href=\"https://en.cppreference.com/w/cpp/language/auto\">https://en.cppreference.com/w/cpp/language/auto</a> </span></p><p><span class=\"reference\">[1a] cppreference.com, “占位符类型说明符”. <a href=\"https://zh.cppreference.com/w/cpp/language/auto\">https://zh.cppreference.com/w/cpp/language/auto</a> </span></p><p><span class=\"reference\">[2] Wikipedia, “Argument-dependent name lookup”. <a href=\"https://en.wikipedia.org/wiki/Argument-dependent_name_lookup\">https://en.wikipedia.org/wiki/Argument-dependent_name_lookup</a> </span></p><p><span class=\"reference\">[2a] 维基百科, “依赖于实参的名字查找”. <a href=\"https://zh.wikipedia.org/zh-cn/%E4%BE%9D%E8%B5%96%E4%BA%8E%E5%AE%9E%E5%8F%82%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE\">https://zh.wikipedia.org/zh-cn/依赖于实参的名字查找</a> </span></p><p><span class=\"reference\">[3] cppreference.com, “Template argument deduction”. <a href=\"https://en.cppreference.com/w/cpp/language/template_argument_deduction\">https://en.cppreference.com/w/cpp/language/template_argument_deduction</a> </span></p><p><span class=\"reference\">[3a] cppreference.com, “模板实参推导”. <a href=\"https://zh.cppreference.com/w/cpp/language/template_argument_deduction\">https://zh.cppreference.com/w/cpp/language/template_argument_deduction</a> </span></p><p><span class=\"reference\">[4] cppreference.com, “Class template argument deduction”. <a href=\"https://en.cppreference.com/w/cpp/language/class_template_argument_deduction\">https://en.cppreference.com/w/cpp/language/class_template_argument_deduction</a> </span></p><p><span class=\"reference\">[4a] cppreference.com, “类模板实参推导”. <a href=\"https://zh.cppreference.com/w/cpp/language/class_template_argument_deduction\">https://zh.cppreference.com/w/cpp/language/class_template_argument_deduction</a> </span></p><p><span class=\"reference\">[5] cppreference.com, “Structured binding declaration”. <a href=\"https://en.cppreference.com/w/cpp/language/structured_binding\">https://en.cppreference.com/w/cpp/language/structured_binding</a> </span></p><p><span class=\"reference\">[5a] cppreference.com, “结构化绑定声明”. <a href=\"https://zh.cppreference.com/w/cpp/language/structured_binding\">https://zh.cppreference.com/w/cpp/language/structured_binding</a> </span></p><p><span class=\"reference\">[6] cppreference.com, “std::initializer_list”. <a href=\"https://en.cppreference.com/w/cpp/utility/initializer_list\">https://en.cppreference.com/w/cpp/utility/initializer_list</a> </span></p><p><span class=\"reference\">[6a] cppreference.com, “std::initializer_list”. <a href=\"https://en.cppreference.com/w/cpp/utility/initializer_list\">https://en.cppreference.com/w/cpp/utility/initializer_list</a> </span></p><p><span class=\"reference\">[7] Scott Meyers, <em>Effective Modern C++</em>, item 7. O’Reilly Media, 2014. 有中文版（高博译，中国电力出版社，2018 年）</span></p>","neighbors":{"left":{"article_title":"07 | 迭代器和好用的新for循环","id":176842},"right":{"article_title":"09 | 易用性改进 II：字面量、静态断言和成员函数说明符","id":176916}},"comments":[{"had_liked":false,"id":169051,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1578268009,"is_pvip":false,"replies":[{"id":65585,"content":"仍然是第3讲里的规则，左值得到左值引用，右值得到右值引用（但要注意右值引用是个左值）：\n\nint x = 42;\nint&amp; a = x;\nint&amp;&amp; b = 42;\nauto&amp;&amp; c = a; &#47;&#47; int&amp;\nauto&amp;&amp; d = b; &#47;&#47; int&amp;\nauto&amp;&amp; e = std::move(b); &#47;&#47; int&amp;&amp;\n","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1578282647,"ip_address":"","comment_id":169051,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，文中提到auto&amp;&amp; a = expr; 推断结果是一个跟 expr 值类别相同的引用类型。那么如果expr是左值引用或右值引用，对应的推断类型又是啥呢？","like_count":21},{"had_liked":false,"id":161667,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1576291160,"is_pvip":false,"replies":[{"id":61587,"content":"识货。😇\n\n毕竟这个专栏的篇幅是 30 讲，不是 60 讲或 100 讲啊。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576304088,"ip_address":"","comment_id":161667,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"建议各位如果文章中有没看懂的地方，去看看老师在文末的参考资料，这些也都是好东西","like_count":14,"discussions":[{"author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286443,"discussion_content":"“右值引用是个左值”这种表达，我觉得最好改为“身为右值引用的这个变量，是个左值”","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593177647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480414,"discussion_content":"仍然是第3讲里的规则，左值得到左值引用，右值得到右值引用（但要注意右值引用是个左值）：\n\nint x = 42;\nint&amp;amp; a = x;\nint&amp;amp;&amp;amp; b = 42;\nauto&amp;amp;&amp;amp; c = a; // int&amp;amp;\nauto&amp;amp;&amp;amp; d = b; // int&amp;amp;\nauto&amp;amp;&amp;amp; e = std::move(b); // int&amp;amp;&amp;amp;\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578282647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161794,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1576330438,"is_pvip":false,"replies":[{"id":61644,"content":"是说如果一个类Obj既有：\n\nObj(initializer_list&lt;int&gt;);\n\n又有：\n\nObj(double);\n\n那你想调用后面那个构造函数，就别用 Obj{1.0} 这种形式，而用 Obj(1.0)。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576394238,"ip_address":"","comment_id":161794,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"如果一个类有使用初始化列表的构造函数时，则只应用在初始化列表构造的情况。\n是说{1.0}这种形式只用在初始化列表构造的情况吗？ 什么是初始化列表构造的情况？不明白","like_count":8,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477805,"discussion_content":"识货。😇\n\n毕竟这个专栏的篇幅是 30 讲，不是 60 讲或 100 讲啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576304088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225737,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1591843654,"is_pvip":false,"replies":[{"id":83183,"content":"语言规则要求。在编译器不知道T是啥（模板定义中，尚未实例化）的情况下，显式通知编译器T::const_iterator是个类型。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1591854590,"ip_address":"","comment_id":225737,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在使用模板的时候为什么T是容器的时候前面要加上一个typename??\n比如typename T::const_iterator it = v.begin()","like_count":6,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497971,"discussion_content":"语言规则要求。在编译器不知道T是啥（模板定义中，尚未实例化）的情况下，显式通知编译器T::const_iterator是个类型。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591854590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178723,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1581788507,"is_pvip":false,"replies":[{"id":69375,"content":"对。C++11刚出来时，对T&amp;&amp;没有专门的术语，是Scott Meyers发明了“万能引用”这一术语来描述。后来标准委员会认识到我们需要一个专门术语，在C++17把这个概念用“转发引用”来描述了。为什么叫这个名字，可以参见：\n\nhttps:&#47;&#47;isocpp.org&#47;files&#47;papers&#47;N4164.pdf","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1581825416,"ip_address":"","comment_id":178723,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"转发引用就是万能引用吗😁😂","like_count":4,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497971,"discussion_content":"语言规则要求。在编译器不知道T是啥（模板定义中，尚未实例化）的情况下，显式通知编译器T::const_iterator是个类型。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591854590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319024,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":2736474,"ip_address":"","ucode":"811D111BEC0298","user_header":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","comment_is_top":false,"comment_ctime":1635515499,"is_pvip":false,"replies":[{"id":115696,"content":"你举的这个例子相当复杂。常见情况下，一般不会用引用绑定去绑定到一个带引用的 tuple 上，所以我也不讨论这样的特殊情况了。\n\n对于这个例子，编译器的第一步动作是：\n\nconst auto&amp; e = tpl;\n\n我们随即得到 e 的类型是 const std::tuple&lt;float &amp;, char &amp;&amp;, int&gt;&amp;。\n\na、b、c 本质上就是 get&lt;0&gt;(e)、get&lt;1&gt;(e)、get&lt;2&gt;(e) 的语法糖了。对于 tuple 里的引用成员，get 的结果就是这个引用成员，所以没有 const：你对它修改时没有改变 tuple 本身，而是改变它指向的内容（可以把引用改成指针来想象一下；引用可以看作会自动解引用的指针）。对于 tuple 里的非引用成员，get 的结果实际是指向 tuple 的引用（即使你获得的结果不是引用）。这就好比 s.int_value 的类型是整数，但你修改了 s.int_value 会修改 s 一样。\n\n下面的例子可以帮助你理解：\n\n    int n = 0;\n    std::tuple&lt;int*, int&gt; tup{&amp;n, n};\n    auto&amp; [p, m] = tup;\n    m = 1;\n\n到此为止，tup 里的整数也变成了 1。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1635646016,"ip_address":"","comment_id":319024,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师我在练习结构化绑定的时候发现一个问题，下面这个例子\nint p = 1;\nchar l = 1;\nint m = 1;\nstd::tuple&lt;float &amp;, char &amp;&amp;, int&gt; tpl(p, std::move(l), m);\nconst auto&amp;[a, b, c] = tpl;\n\n最终a,b,c类型的推断结果为float &amp; a, char &amp;&amp; b, const int&amp; c\n引用类型的cosnt限定被忽略了,我去查资料查到\nCv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a typedef or of a template type argument, in which case the cv-qualifiers are ignored.\n我在测试的时候感觉很混乱，到底什么情况下会出现ill-formed的Cv-qualified references。","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483936,"discussion_content":"对。C++11刚出来时，对T&amp;amp;&amp;amp;没有专门的术语，是Scott Meyers发明了“万能引用”这一术语来描述。后来标准委员会认识到我们需要一个专门术语，在C++17把这个概念用“转发引用”来描述了。为什么叫这个名字，可以参见：\n\nhttps://isocpp.org/files/papers/N4164.pdf","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581825416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172654,"user_name":"Geek_b68b74","can_delete":false,"product_type":"c1","uid":1780585,"ip_address":"","ucode":"7CB026A020D513","user_header":"","comment_is_top":false,"comment_ctime":1579246446,"is_pvip":false,"replies":[{"id":67063,"content":"就看你要不要保持值类别了。在应用的代码，一般写 auto 更安全。如果你是写通用的模板代码，那可能就需要写 decltype(auto) 了。但你得仔细考虑一下对象的生命期问题，确保不会返回一个过期的引用。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1579359550,"ip_address":"","comment_id":172654,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"什么时候该用auto，什么时候该用decltype呢？隐隐知道怎么用，但不知道具体的规则是什么呢","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529463,"discussion_content":"你举的这个例子相当复杂。常见情况下，一般不会用引用绑定去绑定到一个带引用的 tuple 上，所以我也不讨论这样的特殊情况了。\n\n对于这个例子，编译器的第一步动作是：\n\nconst auto&amp;amp; e = tpl;\n\n我们随即得到 e 的类型是 const std::tuple&amp;lt;float &amp;amp;, char &amp;amp;&amp;amp;, int&amp;gt;&amp;amp;。\n\na、b、c 本质上就是 get&amp;lt;0&amp;gt;(e)、get&amp;lt;1&amp;gt;(e)、get&amp;lt;2&amp;gt;(e) 的语法糖了。对于 tuple 里的引用成员，get 的结果就是这个引用成员，所以没有 const：你对它修改时没有改变 tuple 本身，而是改变它指向的内容（可以把引用改成指针来想象一下；引用可以看作会自动解引用的指针）。对于 tuple 里的非引用成员，get 的结果实际是指向 tuple 的引用（即使你获得的结果不是引用）。这就好比 s.int_value 的类型是整数，但你修改了 s.int_value 会修改 s 一样。\n\n下面的例子可以帮助你理解：\n\n    int n = 0;\n    std::tuple&amp;lt;int*, int&amp;gt; tup{&amp;amp;n, n};\n    auto&amp;amp; [p, m] = tup;\n    m = 1;\n\n到此为止，tup 里的整数也变成了 1。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635646016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2736474,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","nickname":"阿白","note":"","ucode":"811D111BEC0298","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410113,"discussion_content":"还有一个问题b的类型为什么会是右值引用类型，声明的时候是auto&amp;，照理来说不被声明为auto&amp;&amp;，应该是不能被推导为右值引用类型的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635601684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2736474,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","nickname":"阿白","note":"","ucode":"811D111BEC0298","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410936,"discussion_content":"一样的道理。const auto&amp; 是针对 e 的，如果 tuple 里是引用，tuple 本身的值类别和 const 性对结果没有影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635816116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":410113,"ip_address":"","group_id":0},"score":410936,"extra":""}]}]},{"had_liked":false,"id":162754,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576584932,"is_pvip":false,"replies":[{"id":61895,"content":"1. 文稿中不是完整的代码。我拿下面的完整代码测试是没有问题的：\n\n#include &lt;string&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct MyObj {\n    MyObj(T value)\n        : value_(value) {}\n    T value_;\n};\n\nMyObj(const char*) -&gt; MyObj&lt;string&gt;;\n\nint main()\n{\n    MyObj obj{&quot;hello&quot;};\n}\n\n2. const char* 就是 char const*，没有区别，是同一个东西，都是指向常字符的指针（指针指向的内容不可更改）。如果写成 char* const，那就不一样了——那是指向字符的常指针（指针本身不可更改，指向的内容可更改）。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576632928,"ip_address":"","comment_id":162754,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师您好，我对下面这两个疑惑有些不解：\n1. 就是我在编译文稿中的推导向导的时候，提示错误：class template argument deduction failed:\nMyObj(const char*) -&gt; MyObj&lt;std::string&gt;;\n2. MyObj obj2{&quot;hello&quot;}; 这句话编译器自动推断出来的类型是：MyObj&lt;char const*&gt; 而不是文稿中注释的MyObj&lt;const char*&gt;\n\n编译器：g++7.4.0\n\n","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478140,"discussion_content":"1. 文稿中不是完整的代码。我拿下面的完整代码测试是没有问题的：\n\n#include &amp;lt;string&amp;gt;\n\nusing namespace std;\n\ntemplate &amp;lt;typename T&amp;gt;\nstruct MyObj {\n    MyObj(T value)\n        : value_(value) {}\n    T value_;\n};\n\nMyObj(const char*) -&amp;gt; MyObj&amp;lt;string&amp;gt;;\n\nint main()\n{\n    MyObj obj{&amp;quot;hello&amp;quot;};\n}\n\n2. const char* 就是 char const*，没有区别，是同一个东西，都是指向常字符的指针（指针指向的内容不可更改）。如果写成 char* const，那就不一样了——那是指向字符的常指针（指针本身不可更改，指向的内容可更改）。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576632928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87040,"discussion_content":"嗯嗯，谢谢老师，我再试一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576639670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298449,"user_name":"怪兽","can_delete":false,"product_type":"c1","uid":1324007,"ip_address":"","ucode":"3342C55CB83B08","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","comment_is_top":false,"comment_ctime":1624111480,"is_pvip":false,"replies":[{"id":108285,"content":"对，对于遍历关联容器，你写的是标准的惯用法。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1624159019,"ip_address":"","comment_id":298449,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"我孤陋寡闻了，C++的语法分析竟然会在隐式函数转换上失败，我试了一下，如果这样写就可以：\nifstream ifs(utf8_to_wstring(filename).operator wchar_t*());\n另外，我在使用map容器的时候，总是first、second，我觉得应用结构化绑定更直观些，那么是否依旧可以使用&amp;(引用)符号呢？例如auto&amp;，这样就不会发生拷贝了吧：\n\tstd::map&lt;int, string&gt; students;\n\tfor (const auto&amp; [id, name] : students)\n\t{\n\t\tcout &lt;&lt; id &lt;&lt; name &lt;&lt; endl;\n\t}\n","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522142,"discussion_content":"对，对于遍历关联容器，你写的是标准的惯用法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624159019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292559,"user_name":"chang","can_delete":false,"product_type":"c1","uid":2596026,"ip_address":"","ucode":"594EF8CB4477BD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2ibrq71Y5Ww3KDRibDxF1gt9YDEPuZkv4ITHEP1u4vvjpPDukkLoK4ngQy1hKKzccnsicLkUAda7sPpibR6Kyb0cfQ/132","comment_is_top":false,"comment_ctime":1620877447,"is_pvip":false,"replies":[{"id":105977,"content":"你定义的形式是拷贝初始化。去掉sv后面的等号即可。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1620952815,"ip_address":"","comment_id":292559,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师好。有点没有搞懂，StrVec是一个自定义的存储std::string元素类型的动态数组：\nclass StrVec {\npublic:\n\texplicit StrVec(initializer_list&lt;std::string&gt; ls);\n};\n\n当上面这个构造函数指定为explicit时，StrVec sv={&quot;hello&quot;, &quot;world&quot;}; 这样定义会报错；当不指定explicit时，这样定义ok，不知为啥？","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522142,"discussion_content":"对，对于遍历关联容器，你写的是标准的惯用法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624159019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169051,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1578268009,"is_pvip":false,"replies":[{"id":65585,"content":"仍然是第3讲里的规则，左值得到左值引用，右值得到右值引用（但要注意右值引用是个左值）：\n\nint x = 42;\nint&amp; a = x;\nint&amp;&amp; b = 42;\nauto&amp;&amp; c = a; &#47;&#47; int&amp;\nauto&amp;&amp; d = b; &#47;&#47; int&amp;\nauto&amp;&amp; e = std::move(b); &#47;&#47; int&amp;&amp;\n","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1578282647,"ip_address":"","comment_id":169051,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，文中提到auto&amp;&amp; a = expr; 推断结果是一个跟 expr 值类别相同的引用类型。那么如果expr是左值引用或右值引用，对应的推断类型又是啥呢？","like_count":21,"discussions":[{"author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286443,"discussion_content":"“右值引用是个左值”这种表达，我觉得最好改为“身为右值引用的这个变量，是个左值”","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593177647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480414,"discussion_content":"仍然是第3讲里的规则，左值得到左值引用，右值得到右值引用（但要注意右值引用是个左值）：\n\nint x = 42;\nint&amp;amp; a = x;\nint&amp;amp;&amp;amp; b = 42;\nauto&amp;amp;&amp;amp; c = a; // int&amp;amp;\nauto&amp;amp;&amp;amp; d = b; // int&amp;amp;\nauto&amp;amp;&amp;amp; e = std::move(b); // int&amp;amp;&amp;amp;\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578282647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161667,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1576291160,"is_pvip":false,"replies":[{"id":61587,"content":"识货。😇\n\n毕竟这个专栏的篇幅是 30 讲，不是 60 讲或 100 讲啊。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576304088,"ip_address":"","comment_id":161667,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"建议各位如果文章中有没看懂的地方，去看看老师在文末的参考资料，这些也都是好东西","like_count":14,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477805,"discussion_content":"识货。😇\n\n毕竟这个专栏的篇幅是 30 讲，不是 60 讲或 100 讲啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576304088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161794,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1576330438,"is_pvip":false,"replies":[{"id":61644,"content":"是说如果一个类Obj既有：\n\nObj(initializer_list&lt;int&gt;);\n\n又有：\n\nObj(double);\n\n那你想调用后面那个构造函数，就别用 Obj{1.0} 这种形式，而用 Obj(1.0)。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576394238,"ip_address":"","comment_id":161794,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"如果一个类有使用初始化列表的构造函数时，则只应用在初始化列表构造的情况。\n是说{1.0}这种形式只用在初始化列表构造的情况吗？ 什么是初始化列表构造的情况？不明白","like_count":8,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477863,"discussion_content":"是说如果一个类Obj既有：\n\nObj(initializer_list&amp;lt;int&amp;gt;);\n\n又有：\n\nObj(double);\n\n那你想调用后面那个构造函数，就别用 Obj{1.0} 这种形式，而用 Obj(1.0)。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576394238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225737,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1591843654,"is_pvip":false,"replies":[{"id":83183,"content":"语言规则要求。在编译器不知道T是啥（模板定义中，尚未实例化）的情况下，显式通知编译器T::const_iterator是个类型。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1591854590,"ip_address":"","comment_id":225737,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在使用模板的时候为什么T是容器的时候前面要加上一个typename??\n比如typename T::const_iterator it = v.begin()","like_count":6,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477863,"discussion_content":"是说如果一个类Obj既有：\n\nObj(initializer_list&amp;lt;int&amp;gt;);\n\n又有：\n\nObj(double);\n\n那你想调用后面那个构造函数，就别用 Obj{1.0} 这种形式，而用 Obj(1.0)。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576394238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178723,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1581788507,"is_pvip":false,"replies":[{"id":69375,"content":"对。C++11刚出来时，对T&amp;&amp;没有专门的术语，是Scott Meyers发明了“万能引用”这一术语来描述。后来标准委员会认识到我们需要一个专门术语，在C++17把这个概念用“转发引用”来描述了。为什么叫这个名字，可以参见：\n\nhttps:&#47;&#47;isocpp.org&#47;files&#47;papers&#47;N4164.pdf","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1581825416,"ip_address":"","comment_id":178723,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"转发引用就是万能引用吗😁😂","like_count":4,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483936,"discussion_content":"对。C++11刚出来时，对T&amp;amp;&amp;amp;没有专门的术语，是Scott Meyers发明了“万能引用”这一术语来描述。后来标准委员会认识到我们需要一个专门术语，在C++17把这个概念用“转发引用”来描述了。为什么叫这个名字，可以参见：\n\nhttps://isocpp.org/files/papers/N4164.pdf","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581825416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319024,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":2736474,"ip_address":"","ucode":"811D111BEC0298","user_header":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","comment_is_top":false,"comment_ctime":1635515499,"is_pvip":false,"replies":[{"id":115696,"content":"你举的这个例子相当复杂。常见情况下，一般不会用引用绑定去绑定到一个带引用的 tuple 上，所以我也不讨论这样的特殊情况了。\n\n对于这个例子，编译器的第一步动作是：\n\nconst auto&amp; e = tpl;\n\n我们随即得到 e 的类型是 const std::tuple&lt;float &amp;, char &amp;&amp;, int&gt;&amp;。\n\na、b、c 本质上就是 get&lt;0&gt;(e)、get&lt;1&gt;(e)、get&lt;2&gt;(e) 的语法糖了。对于 tuple 里的引用成员，get 的结果就是这个引用成员，所以没有 const：你对它修改时没有改变 tuple 本身，而是改变它指向的内容（可以把引用改成指针来想象一下；引用可以看作会自动解引用的指针）。对于 tuple 里的非引用成员，get 的结果实际是指向 tuple 的引用（即使你获得的结果不是引用）。这就好比 s.int_value 的类型是整数，但你修改了 s.int_value 会修改 s 一样。\n\n下面的例子可以帮助你理解：\n\n    int n = 0;\n    std::tuple&lt;int*, int&gt; tup{&amp;n, n};\n    auto&amp; [p, m] = tup;\n    m = 1;\n\n到此为止，tup 里的整数也变成了 1。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1635646016,"ip_address":"","comment_id":319024,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师我在练习结构化绑定的时候发现一个问题，下面这个例子\nint p = 1;\nchar l = 1;\nint m = 1;\nstd::tuple&lt;float &amp;, char &amp;&amp;, int&gt; tpl(p, std::move(l), m);\nconst auto&amp;[a, b, c] = tpl;\n\n最终a,b,c类型的推断结果为float &amp; a, char &amp;&amp; b, const int&amp; c\n引用类型的cosnt限定被忽略了,我去查资料查到\nCv-qualified references are ill-formed except when the cv-qualifiers are introduced through the use of a typedef or of a template type argument, in which case the cv-qualifiers are ignored.\n我在测试的时候感觉很混乱，到底什么情况下会出现ill-formed的Cv-qualified references。","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529463,"discussion_content":"你举的这个例子相当复杂。常见情况下，一般不会用引用绑定去绑定到一个带引用的 tuple 上，所以我也不讨论这样的特殊情况了。\n\n对于这个例子，编译器的第一步动作是：\n\nconst auto&amp;amp; e = tpl;\n\n我们随即得到 e 的类型是 const std::tuple&amp;lt;float &amp;amp;, char &amp;amp;&amp;amp;, int&amp;gt;&amp;amp;。\n\na、b、c 本质上就是 get&amp;lt;0&amp;gt;(e)、get&amp;lt;1&amp;gt;(e)、get&amp;lt;2&amp;gt;(e) 的语法糖了。对于 tuple 里的引用成员，get 的结果就是这个引用成员，所以没有 const：你对它修改时没有改变 tuple 本身，而是改变它指向的内容（可以把引用改成指针来想象一下；引用可以看作会自动解引用的指针）。对于 tuple 里的非引用成员，get 的结果实际是指向 tuple 的引用（即使你获得的结果不是引用）。这就好比 s.int_value 的类型是整数，但你修改了 s.int_value 会修改 s 一样。\n\n下面的例子可以帮助你理解：\n\n    int n = 0;\n    std::tuple&amp;lt;int*, int&amp;gt; tup{&amp;amp;n, n};\n    auto&amp;amp; [p, m] = tup;\n    m = 1;\n\n到此为止，tup 里的整数也变成了 1。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635646016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2736474,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","nickname":"阿白","note":"","ucode":"811D111BEC0298","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410113,"discussion_content":"还有一个问题b的类型为什么会是右值引用类型，声明的时候是auto&amp;，照理来说不被声明为auto&amp;&amp;，应该是不能被推导为右值引用类型的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635601684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2736474,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c1/5a/4d4e6200.jpg","nickname":"阿白","note":"","ucode":"811D111BEC0298","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410936,"discussion_content":"一样的道理。const auto&amp; 是针对 e 的，如果 tuple 里是引用，tuple 本身的值类别和 const 性对结果没有影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635816116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":410113,"ip_address":"","group_id":0},"score":410936,"extra":""}]}]},{"had_liked":false,"id":172654,"user_name":"Geek_b68b74","can_delete":false,"product_type":"c1","uid":1780585,"ip_address":"","ucode":"7CB026A020D513","user_header":"","comment_is_top":false,"comment_ctime":1579246446,"is_pvip":false,"replies":[{"id":67063,"content":"就看你要不要保持值类别了。在应用的代码，一般写 auto 更安全。如果你是写通用的模板代码，那可能就需要写 decltype(auto) 了。但你得仔细考虑一下对象的生命期问题，确保不会返回一个过期的引用。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1579359550,"ip_address":"","comment_id":172654,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"什么时候该用auto，什么时候该用decltype呢？隐隐知道怎么用，但不知道具体的规则是什么呢","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481808,"discussion_content":"就看你要不要保持值类别了。在应用的代码，一般写 auto 更安全。如果你是写通用的模板代码，那可能就需要写 decltype(auto) 了。但你得仔细考虑一下对象的生命期问题，确保不会返回一个过期的引用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579359550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162754,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576584932,"is_pvip":false,"replies":[{"id":61895,"content":"1. 文稿中不是完整的代码。我拿下面的完整代码测试是没有问题的：\n\n#include &lt;string&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct MyObj {\n    MyObj(T value)\n        : value_(value) {}\n    T value_;\n};\n\nMyObj(const char*) -&gt; MyObj&lt;string&gt;;\n\nint main()\n{\n    MyObj obj{&quot;hello&quot;};\n}\n\n2. const char* 就是 char const*，没有区别，是同一个东西，都是指向常字符的指针（指针指向的内容不可更改）。如果写成 char* const，那就不一样了——那是指向字符的常指针（指针本身不可更改，指向的内容可更改）。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576632928,"ip_address":"","comment_id":162754,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师您好，我对下面这两个疑惑有些不解：\n1. 就是我在编译文稿中的推导向导的时候，提示错误：class template argument deduction failed:\nMyObj(const char*) -&gt; MyObj&lt;std::string&gt;;\n2. MyObj obj2{&quot;hello&quot;}; 这句话编译器自动推断出来的类型是：MyObj&lt;char const*&gt; 而不是文稿中注释的MyObj&lt;const char*&gt;\n\n编译器：g++7.4.0\n\n","like_count":2,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481808,"discussion_content":"就看你要不要保持值类别了。在应用的代码，一般写 auto 更安全。如果你是写通用的模板代码，那可能就需要写 decltype(auto) 了。但你得仔细考虑一下对象的生命期问题，确保不会返回一个过期的引用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579359550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298449,"user_name":"怪兽","can_delete":false,"product_type":"c1","uid":1324007,"ip_address":"","ucode":"3342C55CB83B08","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","comment_is_top":false,"comment_ctime":1624111480,"is_pvip":false,"replies":[{"id":108285,"content":"对，对于遍历关联容器，你写的是标准的惯用法。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1624159019,"ip_address":"","comment_id":298449,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"我孤陋寡闻了，C++的语法分析竟然会在隐式函数转换上失败，我试了一下，如果这样写就可以：\nifstream ifs(utf8_to_wstring(filename).operator wchar_t*());\n另外，我在使用map容器的时候，总是first、second，我觉得应用结构化绑定更直观些，那么是否依旧可以使用&amp;(引用)符号呢？例如auto&amp;，这样就不会发生拷贝了吧：\n\tstd::map&lt;int, string&gt; students;\n\tfor (const auto&amp; [id, name] : students)\n\t{\n\t\tcout &lt;&lt; id &lt;&lt; name &lt;&lt; endl;\n\t}\n","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478140,"discussion_content":"1. 文稿中不是完整的代码。我拿下面的完整代码测试是没有问题的：\n\n#include &amp;lt;string&amp;gt;\n\nusing namespace std;\n\ntemplate &amp;lt;typename T&amp;gt;\nstruct MyObj {\n    MyObj(T value)\n        : value_(value) {}\n    T value_;\n};\n\nMyObj(const char*) -&amp;gt; MyObj&amp;lt;string&amp;gt;;\n\nint main()\n{\n    MyObj obj{&amp;quot;hello&amp;quot;};\n}\n\n2. const char* 就是 char const*，没有区别，是同一个东西，都是指向常字符的指针（指针指向的内容不可更改）。如果写成 char* const，那就不一样了——那是指向字符的常指针（指针本身不可更改，指向的内容可更改）。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576632928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87040,"discussion_content":"嗯嗯，谢谢老师，我再试一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576639670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292559,"user_name":"chang","can_delete":false,"product_type":"c1","uid":2596026,"ip_address":"","ucode":"594EF8CB4477BD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2ibrq71Y5Ww3KDRibDxF1gt9YDEPuZkv4ITHEP1u4vvjpPDukkLoK4ngQy1hKKzccnsicLkUAda7sPpibR6Kyb0cfQ/132","comment_is_top":false,"comment_ctime":1620877447,"is_pvip":false,"replies":[{"id":105977,"content":"你定义的形式是拷贝初始化。去掉sv后面的等号即可。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1620952815,"ip_address":"","comment_id":292559,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师好。有点没有搞懂，StrVec是一个自定义的存储std::string元素类型的动态数组：\nclass StrVec {\npublic:\n\texplicit StrVec(initializer_list&lt;std::string&gt; ls);\n};\n\n当上面这个构造函数指定为explicit时，StrVec sv={&quot;hello&quot;, &quot;world&quot;}; 这样定义会报错；当不指定explicit时，这样定义ok，不知为啥？","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519876,"discussion_content":"你定义的形式是拷贝初始化。去掉sv后面的等号即可。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620952815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1907446,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/1a/f6/5f31c067.jpg","nickname":"Kirito U2","note":"","ucode":"D69F02FDBCC41B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547151,"discussion_content":"加上explicit，编译器会拒绝const char* 到 string类型的隐式转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642559931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201470,"user_name":"xl000","can_delete":false,"product_type":"c1","uid":1117935,"ip_address":"","ucode":"6FEABE7F7D0DC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ef/030e6d27.jpg","comment_is_top":false,"comment_ctime":1585792117,"is_pvip":false,"replies":[{"id":75427,"content":"区别不是写在正文里了么？\n\n对，在某些情况下它就相当于 auto&amp; a = exp;。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1585838740,"ip_address":"","comment_id":201470,"utype":1}],"discussion_count":2,"race_medal":2,"score":3,"product_id":100040501,"comment_content":"老师，decltype(auto) a = expr;这种写法，根auto a = expr;有什么区别呢？它能正确地推断出需要写auto&amp; a = expr;的情况？","like_count":1},{"had_liked":false,"id":165877,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1577337972,"is_pvip":false,"replies":[{"id":63269,"content":"唉……想办法看看能不能把工具链先升级上去，并测试有没有问题吧。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1577355905,"ip_address":"","comment_id":165877,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"auto 用了不少，真的好用，其他的都没有真正用到。工作中的项目都不支持11，只能自己学习的时候使用了。","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479301,"discussion_content":"唉……想办法看看能不能把工具链先升级上去，并测试有没有问题吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577355905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504234,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","nickname":"EncodedStar","note":"","ucode":"03958CA7DDD6AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104304,"discussion_content":"现在工作底层都不敢尝试新的东西。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577423015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286444,"discussion_content":"个人感觉，有了using起别名语的法之后，并不需要auto了啊。除非程序员本身也不知道表达式的值是什么类型，但在这种情况下，后续代码他也没法写（不知道什么类型，就不知道有哪些接口、变量可用）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593178208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1504234,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","nickname":"EncodedStar","note":"","ucode":"03958CA7DDD6AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286449,"discussion_content":"auto不只是通用变量名呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593178698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286444,"ip_address":"","group_id":0},"score":286449,"extra":""}]}]},{"had_liked":false,"id":162724,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576581472,"is_pvip":false,"replies":[{"id":61885,"content":"就是 begin 和 end。对象 c 所属类型所在的名空间里的这两个函数将被优先使用。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576626009,"ip_address":"","comment_id":162724,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师您好，就是您文稿中的代码：\ntemplate &lt;typename T&gt;void foo(const T&amp; c){  using std::begin;  using std::end;  &#47;&#47;  使用依赖参数查找（ADL）；见  &lt;span class=&quot;orange&quot;&gt;[2]  for (auto it = begin(c),       ite = end(c);       it != ite; ++it) {    &#47;&#47;  循环体  }}\n我这里有个疑惑，就是这里哪一句可以体现出ADL呀？（ADL我理解的是：编译器根据传入的参数来推断出该命名空间中正确的函数）\n谢谢老师的回复","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478131,"discussion_content":"就是 begin 和 end。对象 c 所属类型所在的名空间里的这两个函数将被优先使用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576626009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161519,"user_name":"皓首不倦","can_delete":false,"product_type":"c1","uid":1144626,"ip_address":"","ucode":"FA7D282DD40D83","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/32/02416d97.jpg","comment_is_top":false,"comment_ctime":1576221933,"is_pvip":false,"replies":[{"id":61590,"content":"Boost 也没什么特别神秘的方法吧。不用 Boost，方法也应该相似的。\n\n我个人一般用 Scott Meyers 教的一个办法：\n\n#define TYPE_DISPLAY(var) \\\n    static type_displayer&lt;decltype(var)&gt; type_display_test\n\ntemplate &lt;typename T&gt;  &#47;&#47; declaration only for type_displayer;\nclass type_displayer;\n\n用的时候，就写 TYPE_DISPLAY(变量名字);。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576304595,"ip_address":"","comment_id":161519,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师您好 我记得以前自己对auto的推导进行学习的时候 想看推导出的到底是什么类型 需要用boost库的一些特殊api 才行 auto推出来到底什么时候带引用 什么时候不带引用有时记不清楚 希望能直接把auto推出来的类型名字包括带不带引用符号打出来看下 请问下只用标准库的api 的话 有什么方便的方法能把一个变量的完整类型信息打印出来看吗","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477745,"discussion_content":"Boost 也没什么特别神秘的方法吧。不用 Boost，方法也应该相似的。\n\n我个人一般用 Scott Meyers 教的一个办法：\n\n#define TYPE_DISPLAY(var) \\\n    static type_displayer&amp;lt;decltype(var)&amp;gt; type_display_test\n\ntemplate &amp;lt;typename T&amp;gt;  // declaration only for type_displayer;\nclass type_displayer;\n\n用的时候，就写 TYPE_DISPLAY(变量名字);。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576304595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076506,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6d/1a/d1d44258.jpg","nickname":"千鲤湖","note":"","ucode":"C626F15967C219","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87013,"discussion_content":"找到了这个，可以运行了看。\n\nhttps://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c\n\ntemplate <typename T>\nconstexpr std::string_view type_name()\n{\n    return __PRETTY_FUNCTION__;\n}\n\n#define TYPE_DISPLAY(var) static type_display<decltype(var)> type_display_test\n\ntemplate <typename T>\nclass type_display\n{\n  public:\n    type_display()\n    {   \n        std::cout << type_name<T>() << std::endl;\n    }   \n};\n\nint main()\n{\n    std::vector<int> b;\n    auto &amp; a = b;\n    TYPE_DISPLAY(a);\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576637571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144626,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/32/02416d97.jpg","nickname":"皓首不倦","note":"","ucode":"FA7D282DD40D83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81991,"discussion_content":"感谢老师的回复，我理解的话老师的方式是直接看编译器输出来的错误信息里面带的类型信息\n刚回去查了一下boost里面是boost::typeindex::type_id_with_var<decltype(var)>().pretty_name() 获取变量的类型描述字符串，还是您的方式比较方便些，谢谢您的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576306656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394919,"user_name":"Geek_2824a2","can_delete":false,"product_type":"c1","uid":2321211,"ip_address":"广东","ucode":"F007964A735C0F","user_header":"","comment_is_top":false,"comment_ctime":1728805025,"is_pvip":false,"replies":[{"id":143408,"content":"那就再给些例子：\n\n1\n1 + 2\na\na + 3\na + b\na++\n*a\na-&gt;b\nc ? a : b","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1728962732,"ip_address":"上海","comment_id":394919,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师能对“表达式”的概念做更深的说明吗？书里的“表达式是操作符和操作数的序列”的描述还是比较抽象","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652451,"discussion_content":"那就再给些例子：\n\n1\n1 + 2\na\na + 3\na + b\na++\n*a\na-&gt;b\nc ? a : b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728962732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386789,"user_name":"Kakapo","can_delete":false,"product_type":"c1","uid":3812336,"ip_address":"陕西","ucode":"F4A5FC0E29C1CD","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2b/f0/c5f70ccb.jpg","comment_is_top":false,"comment_ctime":1705565294,"is_pvip":false,"replies":[{"id":141019,"content":"如果是自己写业务代码，那模板的必要性不一定高——它更多用在库和工具里。但在 C++ 里使用也是越来越多的。\n\n右值不一样一点，如果有可能用移动语义来优化行为的话，你自己写类也是需要考虑的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1705751142,"ip_address":"上海","comment_id":386789,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师你好，这几讲中的好多东西，比如右值，完美转发，auto, delctype等，您给的例子很多都是搭配模板使用的。在现在C++开发中，除了STL，在自己代码中是不是模板应用非常广泛？模板是不是已经成了了现代C++应用开发中必要的一环？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636183,"discussion_content":"如果是自己写业务代码，那模板的必要性不一定高——它更多用在库和工具里。但在 C++ 里使用也是越来越多的。\n\n右值不一样一点，如果有可能用移动语义来优化行为的话，你自己写类也是需要考虑的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705751142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384792,"user_name":"Think async.","can_delete":false,"product_type":"c1","uid":3622235,"ip_address":"广东","ucode":"85881F8B19F4D6","user_header":"https://static001.geekbang.org/account/avatar/00/37/45/5b/cd4e78bd.jpg","comment_is_top":false,"comment_ctime":1701527257,"is_pvip":false,"replies":[{"id":140334,"content":"谢谢🙏。确实写书也在计划中的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1701820768,"ip_address":"上海","comment_id":384792,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"感觉吴老师写的真好，之前看过 Effective Modern C++，虽然老师说的这些里面基本都讲过，但是感觉就是看起来顺很多（虽然有可能和我看的是翻译版有关），文笔感觉很不错呢，而且有一些突出的接地气的强调，例如“千方百计”的调用带初始化列表的构造函数，并且给出了很多经验之谈，谢谢！顺便我想问一下，老师为什么不考虑出成书呢，感觉影响力可能会更大一些，而且会保存的或许更久一些。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633084,"discussion_content":"谢谢🙏。确实写书也在计划中的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1701820768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3622235,"avatar":"https://static001.geekbang.org/account/avatar/00/37/45/5b/cd4e78bd.jpg","nickname":"Think async.","note":"","ucode":"85881F8B19F4D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":634528,"discussion_content":"太好了！一定第一时间拜读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703607072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633084,"ip_address":"广东","group_id":0},"score":634528,"extra":""}]}]},{"had_liked":false,"id":345234,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1652148073,"is_pvip":false,"replies":[{"id":126186,"content":"不等价，两个都是大错特错。\n\n前一个是返回本地变量的引用，未定义行为，但应该能通过编译。\n\n后一个是拿左值引用绑定到一个临时对象上，编译都过不去。\n\n不过，后者如果把“auto&amp;”改成“const auto&amp;”或“auto&amp;&amp;”的话，代码就合法了——生命周期延长规则就生效了。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1652606552,"ip_address":"","comment_id":345234,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"请问同样是在函数中返回一个对象，一个是定义函数的返回值类型为引用：A&amp; func(...)  { ... A a; ... return a; }，另一个则是通过类型推导为函数返回值绑定类型：auto&amp; a = func(...) {... return a; }。这两者是等价的吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572116,"discussion_content":"不等价，两个都是大错特错。\n\n前一个是返回本地变量的引用，未定义行为，但应该能通过编译。\n\n后一个是拿左值引用绑定到一个临时对象上，编译都过不去。\n\n不过，后者如果把“auto&amp;”改成“const auto&amp;”或“auto&amp;&amp;”的话，代码就合法了——生命周期延长规则就生效了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1652606552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1940105,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","nickname":"A君","note":"","ucode":"FE96F089C2312C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572359,"discussion_content":"谢谢老师的解答。再问下const auto&amp;是万金油么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652741611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572116,"ip_address":"","group_id":0},"score":572359,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1940105,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","nickname":"A君","note":"","ucode":"FE96F089C2312C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573071,"discussion_content":"不修改指向内容的话，是这样。另见第 37 讲。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653191298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572359,"ip_address":"","group_id":0},"score":573071,"extra":""}]}]},{"had_liked":false,"id":314355,"user_name":"常振华","can_delete":false,"product_type":"c1","uid":2062252,"ip_address":"","ucode":"D61B40E1CCEFD5","user_header":"","comment_is_top":false,"comment_ctime":1632984038,"is_pvip":false,"replies":[{"id":113883,"content":"让新手上手更容易，让代码更简洁。\n\n确实不是每个人都喜欢每个 C++ 的新特性。一门有着众多用户的庞大语言，要改进是很不容易的。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1633146250,"ip_address":"","comment_id":314355,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"说实话，我不觉得这些语法更易用，虽然增加了灵活性，但是越灵活的东西就越复杂。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527658,"discussion_content":"让新手上手更容易，让代码更简洁。\n\n确实不是每个人都喜欢每个 C++ 的新特性。一门有着众多用户的庞大语言，要改进是很不容易的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633146250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288307,"user_name":"201201511","can_delete":false,"product_type":"c1","uid":2054857,"ip_address":"","ucode":"1B36FFAF9DD9E2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJp4KDwoPkxZFyq0ButALJdrm4eEbkxVdA0PeDLAZ2Kicg7kr7WxAEqkgV8VOLtHybhJ1UNh32Q3Nw/132","comment_is_top":false,"comment_ctime":1618402326,"is_pvip":false,"replies":[{"id":104664,"content":"哪儿来的要求？我看不出这样的要求能有什么好处。\n\n难道只允许一个构造函数，或者不允许默认成员初始化么？只要有超过一个构造函数，又有默认成员初始化，我感觉基本上就会违反这一条了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1618445860,"ip_address":"","comment_id":288307,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"class Complex {public: Complex() {} Complex(float re) : re_(re) {} Complex(float re, float im) : re_(re) , im_(im) {}private: float re_{0}; float im_{0};};\n\n功能安全26262要求，构造函数不要同时使用默认初始化和列表初始化，想请教下，从c++角度看这个要求有合理性吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518585,"discussion_content":"哪儿来的要求？我看不出这样的要求能有什么好处。\n\n难道只允许一个构造函数，或者不允许默认成员初始化么？只要有超过一个构造函数，又有默认成员初始化，我感觉基本上就会违反这一条了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618445860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201470,"user_name":"xl000","can_delete":false,"product_type":"c1","uid":1117935,"ip_address":"","ucode":"6FEABE7F7D0DC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ef/030e6d27.jpg","comment_is_top":false,"comment_ctime":1585792117,"is_pvip":false,"replies":[{"id":75427,"content":"区别不是写在正文里了么？\n\n对，在某些情况下它就相当于 auto&amp; a = exp;。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1585838740,"ip_address":"","comment_id":201470,"utype":1}],"discussion_count":2,"race_medal":2,"score":3,"product_id":100040501,"comment_content":"老师，decltype(auto) a = expr;这种写法，根auto a = expr;有什么区别呢？它能正确地推断出需要写auto&amp; a = expr;的情况？","like_count":1,"discussions":[{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281997,"discussion_content":"唯一的区别就是decltype(auto)既可以是值类型也可以是引用类型,而auto直能是引用类型","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591858911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490343,"discussion_content":"区别不是写在正文里了么？\n\n对，在某些情况下它就相当于 auto&amp;amp; a = exp;。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585838740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165877,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1577337972,"is_pvip":false,"replies":[{"id":63269,"content":"唉……想办法看看能不能把工具链先升级上去，并测试有没有问题吧。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1577355905,"ip_address":"","comment_id":165877,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"auto 用了不少，真的好用，其他的都没有真正用到。工作中的项目都不支持11，只能自己学习的时候使用了。","like_count":1,"discussions":[{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281997,"discussion_content":"唯一的区别就是decltype(auto)既可以是值类型也可以是引用类型,而auto直能是引用类型","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591858911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490343,"discussion_content":"区别不是写在正文里了么？\n\n对，在某些情况下它就相当于 auto&amp;amp; a = exp;。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585838740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162724,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576581472,"is_pvip":false,"replies":[{"id":61885,"content":"就是 begin 和 end。对象 c 所属类型所在的名空间里的这两个函数将被优先使用。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576626009,"ip_address":"","comment_id":162724,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师您好，就是您文稿中的代码：\ntemplate &lt;typename T&gt;void foo(const T&amp; c){  using std::begin;  using std::end;  &#47;&#47;  使用依赖参数查找（ADL）；见  &lt;span class=&quot;orange&quot;&gt;[2]  for (auto it = begin(c),       ite = end(c);       it != ite; ++it) {    &#47;&#47;  循环体  }}\n我这里有个疑惑，就是这里哪一句可以体现出ADL呀？（ADL我理解的是：编译器根据传入的参数来推断出该命名空间中正确的函数）\n谢谢老师的回复","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479301,"discussion_content":"唉……想办法看看能不能把工具链先升级上去，并测试有没有问题吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577355905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504234,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","nickname":"EncodedStar","note":"","ucode":"03958CA7DDD6AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104304,"discussion_content":"现在工作底层都不敢尝试新的东西。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577423015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286444,"discussion_content":"个人感觉，有了using起别名语的法之后，并不需要auto了啊。除非程序员本身也不知道表达式的值是什么类型，但在这种情况下，后续代码他也没法写（不知道什么类型，就不知道有哪些接口、变量可用）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593178208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1504234,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","nickname":"EncodedStar","note":"","ucode":"03958CA7DDD6AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286449,"discussion_content":"auto不只是通用变量名呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593178698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286444,"ip_address":"","group_id":0},"score":286449,"extra":""}]}]},{"had_liked":false,"id":161519,"user_name":"皓首不倦","can_delete":false,"product_type":"c1","uid":1144626,"ip_address":"","ucode":"FA7D282DD40D83","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/32/02416d97.jpg","comment_is_top":false,"comment_ctime":1576221933,"is_pvip":false,"replies":[{"id":61590,"content":"Boost 也没什么特别神秘的方法吧。不用 Boost，方法也应该相似的。\n\n我个人一般用 Scott Meyers 教的一个办法：\n\n#define TYPE_DISPLAY(var) \\\n    static type_displayer&lt;decltype(var)&gt; type_display_test\n\ntemplate &lt;typename T&gt;  &#47;&#47; declaration only for type_displayer;\nclass type_displayer;\n\n用的时候，就写 TYPE_DISPLAY(变量名字);。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576304595,"ip_address":"","comment_id":161519,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师您好 我记得以前自己对auto的推导进行学习的时候 想看推导出的到底是什么类型 需要用boost库的一些特殊api 才行 auto推出来到底什么时候带引用 什么时候不带引用有时记不清楚 希望能直接把auto推出来的类型名字包括带不带引用符号打出来看下 请问下只用标准库的api 的话 有什么方便的方法能把一个变量的完整类型信息打印出来看吗","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478131,"discussion_content":"就是 begin 和 end。对象 c 所属类型所在的名空间里的这两个函数将被优先使用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576626009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394919,"user_name":"Geek_2824a2","can_delete":false,"product_type":"c1","uid":2321211,"ip_address":"广东","ucode":"F007964A735C0F","user_header":"","comment_is_top":false,"comment_ctime":1728805025,"is_pvip":false,"replies":[{"id":143408,"content":"那就再给些例子：\n\n1\n1 + 2\na\na + 3\na + b\na++\n*a\na-&gt;b\nc ? a : b","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1728962732,"ip_address":"上海","comment_id":394919,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师能对“表达式”的概念做更深的说明吗？书里的“表达式是操作符和操作数的序列”的描述还是比较抽象","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477745,"discussion_content":"Boost 也没什么特别神秘的方法吧。不用 Boost，方法也应该相似的。\n\n我个人一般用 Scott Meyers 教的一个办法：\n\n#define TYPE_DISPLAY(var) \\\n    static type_displayer&amp;lt;decltype(var)&amp;gt; type_display_test\n\ntemplate &amp;lt;typename T&amp;gt;  // declaration only for type_displayer;\nclass type_displayer;\n\n用的时候，就写 TYPE_DISPLAY(变量名字);。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576304595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076506,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6d/1a/d1d44258.jpg","nickname":"千鲤湖","note":"","ucode":"C626F15967C219","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87013,"discussion_content":"找到了这个，可以运行了看。\n\nhttps://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c\n\ntemplate <typename T>\nconstexpr std::string_view type_name()\n{\n    return __PRETTY_FUNCTION__;\n}\n\n#define TYPE_DISPLAY(var) static type_display<decltype(var)> type_display_test\n\ntemplate <typename T>\nclass type_display\n{\n  public:\n    type_display()\n    {   \n        std::cout << type_name<T>() << std::endl;\n    }   \n};\n\nint main()\n{\n    std::vector<int> b;\n    auto &amp; a = b;\n    TYPE_DISPLAY(a);\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576637571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144626,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/32/02416d97.jpg","nickname":"皓首不倦","note":"","ucode":"FA7D282DD40D83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81991,"discussion_content":"感谢老师的回复，我理解的话老师的方式是直接看编译器输出来的错误信息里面带的类型信息\n刚回去查了一下boost里面是boost::typeindex::type_id_with_var<decltype(var)>().pretty_name() 获取变量的类型描述字符串，还是您的方式比较方便些，谢谢您的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576306656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386789,"user_name":"Kakapo","can_delete":false,"product_type":"c1","uid":3812336,"ip_address":"陕西","ucode":"F4A5FC0E29C1CD","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2b/f0/c5f70ccb.jpg","comment_is_top":false,"comment_ctime":1705565294,"is_pvip":false,"replies":[{"id":141019,"content":"如果是自己写业务代码，那模板的必要性不一定高——它更多用在库和工具里。但在 C++ 里使用也是越来越多的。\n\n右值不一样一点，如果有可能用移动语义来优化行为的话，你自己写类也是需要考虑的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1705751142,"ip_address":"上海","comment_id":386789,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"老师你好，这几讲中的好多东西，比如右值，完美转发，auto, delctype等，您给的例子很多都是搭配模板使用的。在现在C++开发中，除了STL，在自己代码中是不是模板应用非常广泛？模板是不是已经成了了现代C++应用开发中必要的一环？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652451,"discussion_content":"那就再给些例子：\n\n1\n1 + 2\na\na + 3\na + b\na++\n*a\na-&gt;b\nc ? a : b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728962732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384792,"user_name":"Think async.","can_delete":false,"product_type":"c1","uid":3622235,"ip_address":"广东","ucode":"85881F8B19F4D6","user_header":"https://static001.geekbang.org/account/avatar/00/37/45/5b/cd4e78bd.jpg","comment_is_top":false,"comment_ctime":1701527257,"is_pvip":false,"replies":[{"id":140334,"content":"谢谢🙏。确实写书也在计划中的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1701820768,"ip_address":"上海","comment_id":384792,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"感觉吴老师写的真好，之前看过 Effective Modern C++，虽然老师说的这些里面基本都讲过，但是感觉就是看起来顺很多（虽然有可能和我看的是翻译版有关），文笔感觉很不错呢，而且有一些突出的接地气的强调，例如“千方百计”的调用带初始化列表的构造函数，并且给出了很多经验之谈，谢谢！顺便我想问一下，老师为什么不考虑出成书呢，感觉影响力可能会更大一些，而且会保存的或许更久一些。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636183,"discussion_content":"如果是自己写业务代码，那模板的必要性不一定高——它更多用在库和工具里。但在 C++ 里使用也是越来越多的。\n\n右值不一样一点，如果有可能用移动语义来优化行为的话，你自己写类也是需要考虑的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705751142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345234,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1652148073,"is_pvip":false,"replies":[{"id":126186,"content":"不等价，两个都是大错特错。\n\n前一个是返回本地变量的引用，未定义行为，但应该能通过编译。\n\n后一个是拿左值引用绑定到一个临时对象上，编译都过不去。\n\n不过，后者如果把“auto&amp;”改成“const auto&amp;”或“auto&amp;&amp;”的话，代码就合法了——生命周期延长规则就生效了。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1652606552,"ip_address":"","comment_id":345234,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"请问同样是在函数中返回一个对象，一个是定义函数的返回值类型为引用：A&amp; func(...)  { ... A a; ... return a; }，另一个则是通过类型推导为函数返回值绑定类型：auto&amp; a = func(...) {... return a; }。这两者是等价的吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633084,"discussion_content":"谢谢🙏。确实写书也在计划中的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1701820768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3622235,"avatar":"https://static001.geekbang.org/account/avatar/00/37/45/5b/cd4e78bd.jpg","nickname":"Think async.","note":"","ucode":"85881F8B19F4D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":634528,"discussion_content":"太好了！一定第一时间拜读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703607072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633084,"ip_address":"广东","group_id":0},"score":634528,"extra":""}]}]},{"had_liked":false,"id":314355,"user_name":"常振华","can_delete":false,"product_type":"c1","uid":2062252,"ip_address":"","ucode":"D61B40E1CCEFD5","user_header":"","comment_is_top":false,"comment_ctime":1632984038,"is_pvip":false,"replies":[{"id":113883,"content":"让新手上手更容易，让代码更简洁。\n\n确实不是每个人都喜欢每个 C++ 的新特性。一门有着众多用户的庞大语言，要改进是很不容易的。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1633146250,"ip_address":"","comment_id":314355,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"说实话，我不觉得这些语法更易用，虽然增加了灵活性，但是越灵活的东西就越复杂。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572116,"discussion_content":"不等价，两个都是大错特错。\n\n前一个是返回本地变量的引用，未定义行为，但应该能通过编译。\n\n后一个是拿左值引用绑定到一个临时对象上，编译都过不去。\n\n不过，后者如果把“auto&amp;”改成“const auto&amp;”或“auto&amp;&amp;”的话，代码就合法了——生命周期延长规则就生效了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1652606552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1940105,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","nickname":"A君","note":"","ucode":"FE96F089C2312C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572359,"discussion_content":"谢谢老师的解答。再问下const auto&amp;是万金油么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652741611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572116,"ip_address":"","group_id":0},"score":572359,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1940105,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","nickname":"A君","note":"","ucode":"FE96F089C2312C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573071,"discussion_content":"不修改指向内容的话，是这样。另见第 37 讲。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653191298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572359,"ip_address":"","group_id":0},"score":573071,"extra":""}]}]},{"had_liked":false,"id":288307,"user_name":"201201511","can_delete":false,"product_type":"c1","uid":2054857,"ip_address":"","ucode":"1B36FFAF9DD9E2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJp4KDwoPkxZFyq0ButALJdrm4eEbkxVdA0PeDLAZ2Kicg7kr7WxAEqkgV8VOLtHybhJ1UNh32Q3Nw/132","comment_is_top":false,"comment_ctime":1618402326,"is_pvip":false,"replies":[{"id":104664,"content":"哪儿来的要求？我看不出这样的要求能有什么好处。\n\n难道只允许一个构造函数，或者不允许默认成员初始化么？只要有超过一个构造函数，又有默认成员初始化，我感觉基本上就会违反这一条了。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1618445860,"ip_address":"","comment_id":288307,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100040501,"comment_content":"class Complex {public: Complex() {} Complex(float re) : re_(re) {} Complex(float re, float im) : re_(re) , im_(im) {}private: float re_{0}; float im_{0};};\n\n功能安全26262要求，构造函数不要同时使用默认初始化和列表初始化，想请教下，从c++角度看这个要求有合理性吗？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527658,"discussion_content":"让新手上手更容易，让代码更简洁。\n\n确实不是每个人都喜欢每个 C++ 的新特性。一门有着众多用户的庞大语言，要改进是很不容易的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633146250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182261,"user_name":"JDY","can_delete":false,"product_type":"c1","uid":1848474,"ip_address":"","ucode":"4B6F55332BE6DC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","comment_is_top":false,"comment_ctime":1582738758,"is_pvip":false,"replies":[{"id":70585,"content":"你是说 IDE，而不是编译器吧……\n\n如果 Windows 上的话，就用 Visual Studio 2019 Community Edition 好了。\n\nMac 上的话，应该 Xcode 可以。\n\nLinux 上不知道有很好用又免费的。如果只要求免费，试试 Vim 加 clang_complete（事实上，这是我的日常配置，但如果不是日常玩 Vim 的，我不推荐这个方案）。如果接受付费，可以用 CLion。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1582776874,"ip_address":"","comment_id":182261,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"这个我觉得我很有发言权，尤其是对auto， 刚开始学的时候用vscode，每次都给我识别不了，然后居然果断放弃了auto！现在看来真是浪费啊，老师能不能推荐一个很好的支持c++11的编译器呢？","like_count":0},{"had_liked":false,"id":178722,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1581787708,"is_pvip":false,"replies":[{"id":69400,"content":"我的意思是，这个类我们本来也可以用下面的方式：\n\nclass Complex {\n…\n  Complex(float re = 0, float im = 0)\n    : re_(re) , im_(im) {}\n};\n\n假如我们不用这种方式的话，该怎么办？","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1581833203,"ip_address":"","comment_id":178722,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"假设由于某种原因，我们不能使用缺省参数来简化构造函数，我们可以用什么方式来优化上面这个代码呢？\n&quot;缺省参数简化构造函数&quot;不太懂，就是函数的默认参数吗？好像不算简化吧🤔","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483935,"discussion_content":"我的意思是，这个类我们本来也可以用下面的方式：\n\nclass Complex {\n…\n  Complex(float re = 0, float im = 0)\n    : re_(re) , im_(im) {}\n};\n\n假如我们不用这种方式的话，该怎么办？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581833203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176041,"user_name":"tr","can_delete":false,"product_type":"c1","uid":1758903,"ip_address":"","ucode":"020AB6A704CD43","user_header":"","comment_is_top":false,"comment_ctime":1580917314,"is_pvip":false,"replies":[{"id":68436,"content":"123456789 有 27 位有效数字（二进制），而 32 位的 float 类型的有效数字数是 24。你说损失了不？\n\n详见\n\nhttps:&#47;&#47;zh.wikipedia.org&#47;zh-cn&#47;%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\n","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1580959034,"ip_address":"","comment_id":176041,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"老师，不明白为什么\nfloat x =｛123456789LL｝；这种算做类型收窄，会编译报错？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483002,"discussion_content":"123456789 有 27 位有效数字（二进制），而 32 位的 float 类型的有效数字数是 24。你说损失了不？\n\n详见\n\nhttps://zh.wikipedia.org/zh-cn/%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580959034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164910,"user_name":"Qi","can_delete":false,"product_type":"c1","uid":1771110,"ip_address":"","ucode":"F49A2516CBE78B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/06/66/f8c9166e.jpg","comment_is_top":false,"comment_ctime":1577109958,"is_pvip":false,"replies":[{"id":62850,"content":"坚持向前看啊😄\n\n看看工具链有没有升级版本可以支持更新的标准？","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1577117915,"ip_address":"","comment_id":164910,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":" 还在用Ti很旧的arm板子做开发，工具链都不支持C++11了，还是坚持看到现在了。。。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478946,"discussion_content":"坚持向前看啊😄\n\n看看工具链有没有升级版本可以支持更新的标准？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577117915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164373,"user_name":"常常要奋斗","can_delete":false,"product_type":"c1","uid":1040721,"ip_address":"","ucode":"C7734D856CDDF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e1/51/54525d50.jpg","comment_is_top":false,"comment_ctime":1576955182,"is_pvip":false,"replies":[{"id":62450,"content":"哈哈，真是的。谢谢。回头改一下。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576983609,"ip_address":"","comment_id":164373,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"\n“这个语法主要的限制是，如果一个构造函数既有使用初始化列表的构造函数，又有不使用初始化列表的构造函数”，应该是如果一个类既有...又有...～","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478946,"discussion_content":"坚持向前看啊😄\n\n看看工具链有没有升级版本可以支持更新的标准？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577117915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163023,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576641567,"is_pvip":false,"replies":[{"id":61924,"content":"“龟腚”而已。参考资料 [4a] 里有的：\n\n“用户定义推导指引必须指名一个类模板，且必须在类模板的同一语义作用域（可以是命名空间或外围类）中引入，而且对于成员类模板，必须拥有同样的访问，但推导指引不成为该作用域的成员。”","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576646633,"ip_address":"","comment_id":163023,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"谢谢老师上次耐心的回复。\n上次问题: 就是我在编译文稿中的推导向导的时候，提示错误：class template argument deduction failed:\n\nMyObj(const char*) -&gt; MyObj&lt;std::string&gt;;\n\n我是将推导向导写在了函数体内部，导致报错，如果写在函数体外部是正常的，所以我有个疑问:\n为什么写在函数体外部是可以的呀？\n写在函数体外部和内部给编译器带来了什么区别？(为什么写在函数内部就报错了😂)\n谢谢老师的讲解","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478216,"discussion_content":"“龟腚”而已。参考资料 [4a] 里有的：\n\n“用户定义推导指引必须指名一个类模板，且必须在类模板的同一语义作用域（可以是命名空间或外围类）中引入，而且对于成员类模板，必须拥有同样的访问，但推导指引不成为该作用域的成员。”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576646633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87147,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576647234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87146,"discussion_content":"搜嘎，明白了。原来是规定😂\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576647212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162047,"user_name":"中山浪子","can_delete":false,"product_type":"c1","uid":1055296,"ip_address":"","ucode":"25D0F8462473D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","comment_is_top":false,"comment_ctime":1576456313,"is_pvip":false,"replies":[{"id":61671,"content":"内容太多，这两个话题都会讨论到，但可能不会太深。具体参见目录。第 19、20、27 讲。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576459099,"ip_address":"","comment_id":162047,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"吴老有没有打算在网络编程和多线程这几个点上做一个剖析呢？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477944,"discussion_content":"内容太多，这两个话题都会讨论到，但可能不会太深。具体参见目录。第 19、20、27 讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576459099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161765,"user_name":"海生","can_delete":false,"product_type":"c1","uid":1119247,"ip_address":"","ucode":"27E459D96E9E55","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/0f/91f0194d.jpg","comment_is_top":false,"comment_ctime":1576319710,"is_pvip":false,"replies":[{"id":61638,"content":"C++，不是 C。这是两种不同的语言。\n\n这个专栏讲的内容是比较确定的，你可以看目录。后面我会讲到函数式和多线程，CAS 可以稍微讲一下。其他内容大概不会覆盖到了……\n\n算法本身很零散，又不算难理解。在我讲到的个别算法之外，其他大家自己看应该不会很复杂。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576389409,"ip_address":"","comment_id":161765,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"目前的话，c11用的比较多，c17估计大多数以前的老久代码都是不支持的。bind 和functional 实现类似Java的面向interface编程的方式比auto应用影响更大吧，毕竟c 是强语言，类型声明是应该的义务。老师后续能不能讲讲进程编程和多线程，CAS,disruptor类的。algorithm 库里面的东西也很多，值得讲讲。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477848,"discussion_content":"C++，不是 C。这是两种不同的语言。\n\n这个专栏讲的内容是比较确定的，你可以看目录。后面我会讲到函数式和多线程，CAS 可以稍微讲一下。其他内容大概不会覆盖到了……\n\n算法本身很零散，又不算难理解。在我讲到的个别算法之外，其他大家自己看应该不会很复杂。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576389409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161528,"user_name":"小一日一","can_delete":false,"product_type":"c1","uid":1301097,"ip_address":"","ucode":"0A506C2B918C14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtVXiaJbfkpeXH4udkPUIlFte7z3HWMebdogk8jFpgFEkJ0ruGiawUMUcZj9RLpLkIWxV7QOzbHoSg/132","comment_is_top":false,"comment_ctime":1576224643,"is_pvip":false,"replies":[{"id":61557,"content":"先升级编译器，解决任何编译问题，再用测试来确保没有问题。\n\n编译期和语言对向后兼容性一直保持得很好的，原则上不应该有问题。不能太保守了。（但也不要激进地每个新版本都升。）","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576276055,"ip_address":"","comment_id":161528,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"由于维护优化的是公司10年前的老代码，gcc版本停留在了古老的4.8.5，我在写新项目和新特性时只能使用C++11特性，老师今天讲的C++11引入的所有特性我都在使用，如数据成员的默认初始化，统一初始化，列表初始化，后置返回值类型，decltype，auto，而C++14和17引入的结构化绑定，类模板的模板参数推导，decltype(auto)无法使用，只有望洋兴叹，留口水的份。\n\n我想问一下，别人是否也有我一样由于编译器受限无法使用C++新特性的情况？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477848,"discussion_content":"C++，不是 C。这是两种不同的语言。\n\n这个专栏讲的内容是比较确定的，你可以看目录。后面我会讲到函数式和多线程，CAS 可以稍微讲一下。其他内容大概不会覆盖到了……\n\n算法本身很零散，又不算难理解。在我讲到的个别算法之外，其他大家自己看应该不会很复杂。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576389409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161484,"user_name":"Cheng","can_delete":false,"product_type":"c1","uid":1543326,"ip_address":"","ucode":"264C35C2DE20AF","user_header":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","comment_is_top":false,"comment_ctime":1576216042,"is_pvip":false,"replies":[{"id":61555,"content":"这个已经讲到过了。不会再单独讲。\n\n你上面的变量命名有问题，会让人误以为 it 是个迭代器。它只是元素的引用，并不是迭代器。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576275684,"ip_address":"","comment_id":161484,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"         for(auto &amp;it : list)\n         {\n \n         }\n这个用法不知后面是否有讲到？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477733,"discussion_content":"这个已经讲到过了。不会再单独讲。\n\n你上面的变量命名有问题，会让人误以为 it 是个迭代器。它只是元素的引用，并不是迭代器。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576275684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182261,"user_name":"JDY","can_delete":false,"product_type":"c1","uid":1848474,"ip_address":"","ucode":"4B6F55332BE6DC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","comment_is_top":false,"comment_ctime":1582738758,"is_pvip":false,"replies":[{"id":70585,"content":"你是说 IDE，而不是编译器吧……\n\n如果 Windows 上的话，就用 Visual Studio 2019 Community Edition 好了。\n\nMac 上的话，应该 Xcode 可以。\n\nLinux 上不知道有很好用又免费的。如果只要求免费，试试 Vim 加 clang_complete（事实上，这是我的日常配置，但如果不是日常玩 Vim 的，我不推荐这个方案）。如果接受付费，可以用 CLion。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1582776874,"ip_address":"","comment_id":182261,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"这个我觉得我很有发言权，尤其是对auto， 刚开始学的时候用vscode，每次都给我识别不了，然后居然果断放弃了auto！现在看来真是浪费啊，老师能不能推荐一个很好的支持c++11的编译器呢？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485277,"discussion_content":"你是说 IDE，而不是编译器吧……\n\n如果 Windows 上的话，就用 Visual Studio 2019 Community Edition 好了。\n\nMac 上的话，应该 Xcode 可以。\n\nLinux 上不知道有很好用又免费的。如果只要求免费，试试 Vim 加 clang_complete（事实上，这是我的日常配置，但如果不是日常玩 Vim 的，我不推荐这个方案）。如果接受付费，可以用 CLion。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582776874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178722,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1581787708,"is_pvip":false,"replies":[{"id":69400,"content":"我的意思是，这个类我们本来也可以用下面的方式：\n\nclass Complex {\n…\n  Complex(float re = 0, float im = 0)\n    : re_(re) , im_(im) {}\n};\n\n假如我们不用这种方式的话，该怎么办？","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1581833203,"ip_address":"","comment_id":178722,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"假设由于某种原因，我们不能使用缺省参数来简化构造函数，我们可以用什么方式来优化上面这个代码呢？\n&quot;缺省参数简化构造函数&quot;不太懂，就是函数的默认参数吗？好像不算简化吧🤔","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485277,"discussion_content":"你是说 IDE，而不是编译器吧……\n\n如果 Windows 上的话，就用 Visual Studio 2019 Community Edition 好了。\n\nMac 上的话，应该 Xcode 可以。\n\nLinux 上不知道有很好用又免费的。如果只要求免费，试试 Vim 加 clang_complete（事实上，这是我的日常配置，但如果不是日常玩 Vim 的，我不推荐这个方案）。如果接受付费，可以用 CLion。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582776874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176041,"user_name":"tr","can_delete":false,"product_type":"c1","uid":1758903,"ip_address":"","ucode":"020AB6A704CD43","user_header":"","comment_is_top":false,"comment_ctime":1580917314,"is_pvip":false,"replies":[{"id":68436,"content":"123456789 有 27 位有效数字（二进制），而 32 位的 float 类型的有效数字数是 24。你说损失了不？\n\n详见\n\nhttps:&#47;&#47;zh.wikipedia.org&#47;zh-cn&#47;%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\n","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1580959034,"ip_address":"","comment_id":176041,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"老师，不明白为什么\nfloat x =｛123456789LL｝；这种算做类型收窄，会编译报错？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483935,"discussion_content":"我的意思是，这个类我们本来也可以用下面的方式：\n\nclass Complex {\n…\n  Complex(float re = 0, float im = 0)\n    : re_(re) , im_(im) {}\n};\n\n假如我们不用这种方式的话，该怎么办？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581833203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164910,"user_name":"Qi","can_delete":false,"product_type":"c1","uid":1771110,"ip_address":"","ucode":"F49A2516CBE78B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/06/66/f8c9166e.jpg","comment_is_top":false,"comment_ctime":1577109958,"is_pvip":false,"replies":[{"id":62850,"content":"坚持向前看啊😄\n\n看看工具链有没有升级版本可以支持更新的标准？","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1577117915,"ip_address":"","comment_id":164910,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":" 还在用Ti很旧的arm板子做开发，工具链都不支持C++11了，还是坚持看到现在了。。。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483002,"discussion_content":"123456789 有 27 位有效数字（二进制），而 32 位的 float 类型的有效数字数是 24。你说损失了不？\n\n详见\n\nhttps://zh.wikipedia.org/zh-cn/%E5%96%AE%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580959034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164373,"user_name":"常常要奋斗","can_delete":false,"product_type":"c1","uid":1040721,"ip_address":"","ucode":"C7734D856CDDF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e1/51/54525d50.jpg","comment_is_top":false,"comment_ctime":1576955182,"is_pvip":false,"replies":[{"id":62450,"content":"哈哈，真是的。谢谢。回头改一下。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576983609,"ip_address":"","comment_id":164373,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"\n“这个语法主要的限制是，如果一个构造函数既有使用初始化列表的构造函数，又有不使用初始化列表的构造函数”，应该是如果一个类既有...又有...～","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478736,"discussion_content":"哈哈，真是的。谢谢。回头改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576983609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163023,"user_name":"lyfei","can_delete":false,"product_type":"c1","uid":1757471,"ip_address":"","ucode":"31ACC702BE6FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","comment_is_top":false,"comment_ctime":1576641567,"is_pvip":false,"replies":[{"id":61924,"content":"“龟腚”而已。参考资料 [4a] 里有的：\n\n“用户定义推导指引必须指名一个类模板，且必须在类模板的同一语义作用域（可以是命名空间或外围类）中引入，而且对于成员类模板，必须拥有同样的访问，但推导指引不成为该作用域的成员。”","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576646633,"ip_address":"","comment_id":163023,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"谢谢老师上次耐心的回复。\n上次问题: 就是我在编译文稿中的推导向导的时候，提示错误：class template argument deduction failed:\n\nMyObj(const char*) -&gt; MyObj&lt;std::string&gt;;\n\n我是将推导向导写在了函数体内部，导致报错，如果写在函数体外部是正常的，所以我有个疑问:\n为什么写在函数体外部是可以的呀？\n写在函数体外部和内部给编译器带来了什么区别？(为什么写在函数内部就报错了😂)\n谢谢老师的讲解","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478736,"discussion_content":"哈哈，真是的。谢谢。回头改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576983609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162047,"user_name":"中山浪子","can_delete":false,"product_type":"c1","uid":1055296,"ip_address":"","ucode":"25D0F8462473D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","comment_is_top":false,"comment_ctime":1576456313,"is_pvip":false,"replies":[{"id":61671,"content":"内容太多，这两个话题都会讨论到，但可能不会太深。具体参见目录。第 19、20、27 讲。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576459099,"ip_address":"","comment_id":162047,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"吴老有没有打算在网络编程和多线程这几个点上做一个剖析呢？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478216,"discussion_content":"“龟腚”而已。参考资料 [4a] 里有的：\n\n“用户定义推导指引必须指名一个类模板，且必须在类模板的同一语义作用域（可以是命名空间或外围类）中引入，而且对于成员类模板，必须拥有同样的访问，但推导指引不成为该作用域的成员。”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576646633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87147,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576647234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757471,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d1/1f/2cd395eb.jpg","nickname":"lyfei","note":"","ucode":"31ACC702BE6FEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87146,"discussion_content":"搜嘎，明白了。原来是规定😂\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576647212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161765,"user_name":"海生","can_delete":false,"product_type":"c1","uid":1119247,"ip_address":"","ucode":"27E459D96E9E55","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/0f/91f0194d.jpg","comment_is_top":false,"comment_ctime":1576319710,"is_pvip":false,"replies":[{"id":61638,"content":"C++，不是 C。这是两种不同的语言。\n\n这个专栏讲的内容是比较确定的，你可以看目录。后面我会讲到函数式和多线程，CAS 可以稍微讲一下。其他内容大概不会覆盖到了……\n\n算法本身很零散，又不算难理解。在我讲到的个别算法之外，其他大家自己看应该不会很复杂。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576389409,"ip_address":"","comment_id":161765,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"目前的话，c11用的比较多，c17估计大多数以前的老久代码都是不支持的。bind 和functional 实现类似Java的面向interface编程的方式比auto应用影响更大吧，毕竟c 是强语言，类型声明是应该的义务。老师后续能不能讲讲进程编程和多线程，CAS,disruptor类的。algorithm 库里面的东西也很多，值得讲讲。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477944,"discussion_content":"内容太多，这两个话题都会讨论到，但可能不会太深。具体参见目录。第 19、20、27 讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576459099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161528,"user_name":"小一日一","can_delete":false,"product_type":"c1","uid":1301097,"ip_address":"","ucode":"0A506C2B918C14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtVXiaJbfkpeXH4udkPUIlFte7z3HWMebdogk8jFpgFEkJ0ruGiawUMUcZj9RLpLkIWxV7QOzbHoSg/132","comment_is_top":false,"comment_ctime":1576224643,"is_pvip":false,"replies":[{"id":61557,"content":"先升级编译器，解决任何编译问题，再用测试来确保没有问题。\n\n编译期和语言对向后兼容性一直保持得很好的，原则上不应该有问题。不能太保守了。（但也不要激进地每个新版本都升。）","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576276055,"ip_address":"","comment_id":161528,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"由于维护优化的是公司10年前的老代码，gcc版本停留在了古老的4.8.5，我在写新项目和新特性时只能使用C++11特性，老师今天讲的C++11引入的所有特性我都在使用，如数据成员的默认初始化，统一初始化，列表初始化，后置返回值类型，decltype，auto，而C++14和17引入的结构化绑定，类模板的模板参数推导，decltype(auto)无法使用，只有望洋兴叹，留口水的份。\n\n我想问一下，别人是否也有我一样由于编译器受限无法使用C++新特性的情况？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477751,"discussion_content":"先升级编译器，解决任何编译问题，再用测试来确保没有问题。\n\n编译期和语言对向后兼容性一直保持得很好的，原则上不应该有问题。不能太保守了。（但也不要激进地每个新版本都升。）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576276055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1635120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f3/30/8a8b2155.jpg","nickname":"Zephyr","note":"","ucode":"1DF3525146BFE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81989,"discussion_content":"线上六十多台环境都是4.6.1，每次编译都要解决GLIBC版本太高的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576306186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1635120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f3/30/8a8b2155.jpg","nickname":"Zephyr","note":"","ucode":"1DF3525146BFE7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82044,"discussion_content":"GLIBC 版本和 GCC 版本应该是独立不相关事件。如果你在某个 distro 上用官方的新编译器（如 Red Hat 的情况），或者自己手工编译一个 GCC，那个 GLIBC 版本没理由会变。你需要的是在发布时附上 GCC 的运行时环境，可以用 LD_LIBRARY_PATH 来指定。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576313507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81989,"ip_address":"","group_id":0},"score":82044,"extra":""}]},{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81855,"discussion_content":"我有同样的情况，领导太保守了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576289639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81977,"discussion_content":"领导首先求无过吧。但领导也是可以说服的。\n\n说服的第一步，至少确保升级编译器不会带来问题——有问题你有能力可以解决。这个之后再谈向大家宣传好处。好处很明显的时候，领导当然会接受的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576303912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81855,"ip_address":"","group_id":0},"score":81977,"extra":""}]}]},{"had_liked":false,"id":161484,"user_name":"Cheng","can_delete":false,"product_type":"c1","uid":1543326,"ip_address":"","ucode":"264C35C2DE20AF","user_header":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","comment_is_top":false,"comment_ctime":1576216042,"is_pvip":false,"replies":[{"id":61555,"content":"这个已经讲到过了。不会再单独讲。\n\n你上面的变量命名有问题，会让人误以为 it 是个迭代器。它只是元素的引用，并不是迭代器。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576275684,"ip_address":"","comment_id":161484,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100040501,"comment_content":"         for(auto &amp;it : list)\n         {\n \n         }\n这个用法不知后面是否有讲到？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477751,"discussion_content":"先升级编译器，解决任何编译问题，再用测试来确保没有问题。\n\n编译期和语言对向后兼容性一直保持得很好的，原则上不应该有问题。不能太保守了。（但也不要激进地每个新版本都升。）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576276055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1635120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f3/30/8a8b2155.jpg","nickname":"Zephyr","note":"","ucode":"1DF3525146BFE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81989,"discussion_content":"线上六十多台环境都是4.6.1，每次编译都要解决GLIBC版本太高的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576306186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1635120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f3/30/8a8b2155.jpg","nickname":"Zephyr","note":"","ucode":"1DF3525146BFE7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82044,"discussion_content":"GLIBC 版本和 GCC 版本应该是独立不相关事件。如果你在某个 distro 上用官方的新编译器（如 Red Hat 的情况），或者自己手工编译一个 GCC，那个 GLIBC 版本没理由会变。你需要的是在发布时附上 GCC 的运行时环境，可以用 LD_LIBRARY_PATH 来指定。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576313507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81989,"ip_address":"","group_id":0},"score":82044,"extra":""}]},{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81855,"discussion_content":"我有同样的情况，领导太保守了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576289639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81977,"discussion_content":"领导首先求无过吧。但领导也是可以说服的。\n\n说服的第一步，至少确保升级编译器不会带来问题——有问题你有能力可以解决。这个之后再谈向大家宣传好处。好处很明显的时候，领导当然会接受的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576303912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81855,"ip_address":"","group_id":0},"score":81977,"extra":""}]}]},{"had_liked":false,"id":161479,"user_name":"泰伦卢","can_delete":false,"product_type":"c1","uid":1141994,"ip_address":"","ucode":"FEA6B43C8D4FF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/ea/e03fec22.jpg","comment_is_top":false,"comment_ctime":1576214365,"is_pvip":false,"replies":[{"id":61554,"content":"多自己试验例子来体会一下。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576275482,"ip_address":"","comment_id":161479,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"初始化列表那里还没怎么看明白唉，还是得多补习补习","like_count":0},{"had_liked":false,"id":161296,"user_name":"我不生产bug，我只是bug的搬运工","can_delete":false,"product_type":"c1","uid":1757474,"ip_address":"","ucode":"C70AEAF23665C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKEyibia4u3kq3bia4ZiaARfvj7fRqyAN9DIqaQytdy5IsPsfpl9UCdgiaF88tTyia5w1dBynyzkatDt2A/132","comment_is_top":false,"comment_ctime":1576168596,"is_pvip":false,"replies":[{"id":61551,"content":"代码怎么看起来好看怎么用。😂","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576274876,"ip_address":"","comment_id":161296,"utype":1}],"discussion_count":3,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"想知道auto到底什么情况下用，什么情况下不要用auto，用多了会不会造成阅读困难","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477730,"discussion_content":"多自己试验例子来体会一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576275482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201540,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1585801586,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"上学的时候看了一遍c++ primer，学到的全是c++98。工作遇到c++14或17新语法时，一头雾水。只能在工作中慢慢摸索，一直想看到一篇只讲新老版本c++每一个区别的文章。发现这篇对我来说真的适合","like_count":3},{"had_liked":false,"id":297603,"user_name":"Geek_dddde9","can_delete":false,"product_type":"c1","uid":2652522,"ip_address":"","ucode":"D14EF94033662A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIowerMFjqhnvMUkicDpc8jKfia2sUJgUcR1ceicqoNANib79D8e5pHv2fRiblXm8zkia4MPmp5k0ByiaUbg/132","comment_is_top":false,"comment_ctime":1623661794,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"主要还是用auto  统一初始化  默认初始化 范围for，这种确实很容易简化代码","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477680,"discussion_content":"代码怎么看起来好看怎么用。😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576274876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543326,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","nickname":"Cheng","note":"","ucode":"264C35C2DE20AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81052,"discussion_content":"auto现在很常见，没见到会对阅读造成重大影响。除了导致编译错误，一般都能用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576216170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244537,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/79/d42c4c68.jpg","nickname":"不成熟的萌","note":"","ucode":"4F5059446D062D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1543326,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","nickname":"Cheng","note":"","ucode":"264C35C2DE20AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84180,"discussion_content":"感觉更多还是配合range for使用。或者声明迭代器类型的时候使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576493942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81052,"ip_address":"","group_id":0},"score":84180,"extra":""}]}]},{"had_liked":false,"id":161479,"user_name":"泰伦卢","can_delete":false,"product_type":"c1","uid":1141994,"ip_address":"","ucode":"FEA6B43C8D4FF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/ea/e03fec22.jpg","comment_is_top":false,"comment_ctime":1576214365,"is_pvip":false,"replies":[{"id":61554,"content":"多自己试验例子来体会一下。","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576275482,"ip_address":"","comment_id":161479,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"初始化列表那里还没怎么看明白唉，还是得多补习补习","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477730,"discussion_content":"多自己试验例子来体会一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576275482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161296,"user_name":"我不生产bug，我只是bug的搬运工","can_delete":false,"product_type":"c1","uid":1757474,"ip_address":"","ucode":"C70AEAF23665C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKEyibia4u3kq3bia4ZiaARfvj7fRqyAN9DIqaQytdy5IsPsfpl9UCdgiaF88tTyia5w1dBynyzkatDt2A/132","comment_is_top":false,"comment_ctime":1576168596,"is_pvip":false,"replies":[{"id":61551,"content":"代码怎么看起来好看怎么用。😂","user_name":"作者回复","user_name_real":"吴咏炜","uid":1645639,"ctime":1576274876,"ip_address":"","comment_id":161296,"utype":1}],"discussion_count":3,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"想知道auto到底什么情况下用，什么情况下不要用auto，用多了会不会造成阅读困难","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477680,"discussion_content":"代码怎么看起来好看怎么用。😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576274876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543326,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","nickname":"Cheng","note":"","ucode":"264C35C2DE20AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81052,"discussion_content":"auto现在很常见，没见到会对阅读造成重大影响。除了导致编译错误，一般都能用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576216170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244537,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/79/d42c4c68.jpg","nickname":"不成熟的萌","note":"","ucode":"4F5059446D062D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1543326,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/9e/e4da36d2.jpg","nickname":"Cheng","note":"","ucode":"264C35C2DE20AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84180,"discussion_content":"感觉更多还是配合range for使用。或者声明迭代器类型的时候使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576493942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81052,"ip_address":"","group_id":0},"score":84180,"extra":""}]}]},{"had_liked":false,"id":201540,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1585801586,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"上学的时候看了一遍c++ primer，学到的全是c++98。工作遇到c++14或17新语法时，一头雾水。只能在工作中慢慢摸索，一直想看到一篇只讲新老版本c++每一个区别的文章。发现这篇对我来说真的适合","like_count":3},{"had_liked":false,"id":297603,"user_name":"Geek_dddde9","can_delete":false,"product_type":"c1","uid":2652522,"ip_address":"","ucode":"D14EF94033662A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIowerMFjqhnvMUkicDpc8jKfia2sUJgUcR1ceicqoNANib79D8e5pHv2fRiblXm8zkia4MPmp5k0ByiaUbg/132","comment_is_top":false,"comment_ctime":1623661794,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100040501,"comment_content":"主要还是用auto  统一初始化  默认初始化 范围for，这种确实很容易简化代码","like_count":0}]}