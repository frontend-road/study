{"id":193221,"title":"39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","content":"<p>在<a href=\"https://time.geekbang.org/column/article/179644\">第25节</a>、<a href=\"https://time.geekbang.org/column/article/179673\">第26节</a>中，我们讲了如何对一个性能计数器框架进行分析、设计与实现，并且实践了之前学过的一些设计原则和设计思想。当时我们提到，小步快跑、逐步迭代是一种非常实用的开发模式。所以，针对这个框架的开发，我们分多个版本来逐步完善。</p><p>在第25、26节课中，我们实现了框架的第一个版本，它只包含最基本的一些功能，在设计与实现上还有很多不足。所以，接下来，我会针对这些不足，继续迭代开发两个版本：版本2和版本3，分别对应第39节和第40节的内容。</p><p>在版本2中，我们会利用之前学过的重构方法，对版本1的设计与实现进行重构，解决版本1存在的设计问题，让它满足之前学过的设计原则、思想、编程规范。在版本3中，我们再对版本2进行迭代，并且完善框架的功能和非功能需求，让其满足第25节课中罗列的所有需求。</p><p>话不多说，让我们正式开始版本2的设计与实现吧！</p><h2>回顾版本1的设计与实现</h2><p>首先，让我们一块回顾一下版本1的设计与实现。当然，如果时间充足，你最好能再重新看一下第25、26节的内容。在版本1中，整个框架的代码被划分为下面这几个类。</p><ul>\n<li>MetricsCollector：负责打点采集原始数据，包括记录每次接口请求的响应时间和请求时间戳，并调用MetricsStorage提供的接口来存储这些原始数据。</li>\n<li>MetricsStorage和RedisMetricsStorage：负责原始数据的存储和读取。</li>\n<li>Aggregator：是一个工具类，负责各种统计数据的计算，比如响应时间的最大值、最小值、平均值、百分位值、接口访问次数、tps。</li>\n<li>ConsoleReporter和EmailReporter：相当于一个上帝类（God Class），定时根据给定的时间区间，从数据库中取出数据，借助Aggregator类完成统计工作，并将统计结果输出到相应的终端，比如命令行、邮件。</li>\n</ul><!-- [[[read_end]]] --><p>MetricCollector、MetricsStorage、RedisMetricsStorage的设计与实现比较简单，不是版本2重构的重点。今天，我们重点来看一下Aggregator和ConsoleReporter、EmailReporter这几个类。</p><p><strong>我们先来看一下Aggregator类存在的问题。</strong></p><p>Aggregator类里面只有一个静态函数，有50行左右的代码量，负责各种统计数据的计算。当要添加新的统计功能的时候，我们需要修改aggregate()函数代码。一旦越来越多的统计功能添加进来之后，这个函数的代码量会持续增加，可读性、可维护性就变差了。因此，我们需要在版本2中对其进行重构。</p><pre><code>public class Aggregator {\n  public static RequestStat aggregate(List&lt;RequestInfo&gt; requestInfos, long durationInMillis) {\n    double maxRespTime = Double.MIN_VALUE;\n    double minRespTime = Double.MAX_VALUE;\n    double avgRespTime = -1;\n    double p999RespTime = -1;\n    double p99RespTime = -1;\n    double sumRespTime = 0;\n    long count = 0;\n    for (RequestInfo requestInfo : requestInfos) {\n      ++count;\n      double respTime = requestInfo.getResponseTime();\n      if (maxRespTime &lt; respTime) {\n        maxRespTime = respTime;\n      }\n      if (minRespTime &gt; respTime) {\n        minRespTime = respTime;\n      }\n      sumRespTime += respTime;\n    }\n    if (count != 0) {\n      avgRespTime = sumRespTime / count;\n    }\n    long tps = (long)(count / durationInMillis * 1000);\n    Collections.sort(requestInfos, new Comparator&lt;RequestInfo&gt;() {\n      @Override\n      public int compare(RequestInfo o1, RequestInfo o2) {\n        double diff = o1.getResponseTime() - o2.getResponseTime();\n        if (diff &lt; 0.0) {\n          return -1;\n        } else if (diff &gt; 0.0) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n \n    if (count != 0) {\n      int idx999 = (int)(count * 0.999);\n      int idx99 = (int)(count * 0.99);\n      p999RespTime = requestInfos.get(idx999).getResponseTime();\n      p99RespTime = requestInfos.get(idx99).getResponseTime();\n    }\n    RequestStat requestStat = new RequestStat();\n    requestStat.setMaxResponseTime(maxRespTime);\n    requestStat.setMinResponseTime(minRespTime);\n    requestStat.setAvgResponseTime(avgRespTime);\n    requestStat.setP999ResponseTime(p999RespTime);\n    requestStat.setP99ResponseTime(p99RespTime);\n    requestStat.setCount(count);\n    requestStat.setTps(tps);\n    return requestStat;\n  }\n}\n\npublic class RequestStat {\n  private double maxResponseTime;\n  private double minResponseTime;\n  private double avgResponseTime;\n  private double p999ResponseTime;\n  private double p99ResponseTime;\n  private long count;\n  private long tps;\n  //...省略getter/setter方法...\n}\n</code></pre><p><strong>我们再来看一下ConsoleReporter和EmailReporter这两个类存在的问题。</strong></p><p>ConsoleReporter和EmailReporter两个类中存在代码重复问题。在这两个类中，从数据库中取数据、做统计的逻辑都是相同的，可以抽取出来复用，否则就违反了DRY原则。</p><p>整个类负责的事情比较多，不相干的逻辑糅合在里面，职责不够单一。特别是显示部分的代码可能会比较复杂（比如Email的显示方式），最好能将这部分显示逻辑剥离出来，设计成一个独立的类。</p><p>除此之外，因为代码中涉及线程操作，并且调用了Aggregator的静态函数，所以代码的可测试性也有待提高。</p><pre><code>public class ConsoleReporter {\n  private MetricsStorage metricsStorage;\n  private ScheduledExecutorService executor;\n\n  public ConsoleReporter(MetricsStorage metricsStorage) {\n    this.metricsStorage = metricsStorage;\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n  }\n\n  public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {\n    executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        long durationInMillis = durationInSeconds * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        System.out.println(&quot;Time Span: [&quot; + startTimeInMillis + &quot;, &quot; + endTimeInMillis + &quot;]&quot;);\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(stats));\n      }\n    }, 0, periodInSeconds, TimeUnit.SECONDS);\n  }\n\n}\n\npublic class EmailReporter {\n  private static final Long DAY_HOURS_IN_SECONDS = 86400L;\n\n  private MetricsStorage metricsStorage;\n  private EmailSender emailSender;\n  private List&lt;String&gt; toAddresses = new ArrayList&lt;&gt;();\n\n  public EmailReporter(MetricsStorage metricsStorage) {\n    this(metricsStorage, new EmailSender(/*省略参数*/));\n  }\n\n  public EmailReporter(MetricsStorage metricsStorage, EmailSender emailSender) {\n    this.metricsStorage = metricsStorage;\n    this.emailSender = emailSender;\n  }\n\n  public void addToAddress(String address) {\n    toAddresses.add(address);\n  }\n\n  public void startDailyReport() {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.DATE, 1);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date firstTime = calendar.getTime(); \n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        // TODO: 格式化为html格式，并且发送邮件\n      }\n    }, firstTime, DAY_HOURS_IN_SECONDS * 1000);\n  }\n\n}\n</code></pre><h2>针对版本1的问题进行重构</h2><p>Aggregator类和ConsoleReporter、EmailReporter类主要负责统计显示的工作。在第26节中，我们提到，如果我们把统计显示所要完成的功能逻辑细分一下，主要包含下面4点：</p><ol>\n<li>根据给定的时间区间，从数据库中拉取数据；</li>\n<li>根据原始数据，计算得到统计数据；</li>\n<li>将统计数据显示到终端（命令行或邮件）；</li>\n<li>定时触发以上三个过程的执行。</li>\n</ol><p>之前的划分方法是将所有的逻辑都放到ConsoleReporter和EmailReporter这两个上帝类中，而Aggregator只是一个包含静态方法的工具类。这样的划分方法存在前面提到的一些问题，我们需要对其进行重新划分。</p><p>面向对象设计中的最后一步是组装类并提供执行入口，所以，组装前三部分逻辑的上帝类是必须要有的。我们可以将上帝类做的很轻量级，把核心逻辑都剥离出去，形成独立的类，上帝类只负责组装类和串联执行流程。这样做的好处是，代码结构更加清晰，底层核心逻辑更容易被复用。按照这个设计思路，具体的重构工作包含以下4个方面。</p><ul>\n<li>第1个逻辑：根据给定时间区间，从数据库中拉取数据。这部分逻辑已经被封装在MetricsStorage类中了，所以这部分不需要处理。</li>\n<li>第2个逻辑：根据原始数据，计算得到统计数据。我们可以将这部分逻辑移动到Aggregator类中。这样Aggregator类就不仅仅是只包含统计方法的工具类了。按照这个思路，重构之后的代码如下所示：</li>\n</ul><pre><code>public class Aggregator {\n  public Map&lt;String, RequestStat&gt; aggregate(\n          Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos, long durationInMillis) {\n    Map&lt;String, RequestStat&gt; requestStats = new HashMap&lt;&gt;();\n    for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n      String apiName = entry.getKey();\n      List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n      RequestStat requestStat = doAggregate(requestInfosPerApi, durationInMillis);\n      requestStats.put(apiName, requestStat);\n    }\n    return requestStats;\n  }\n\n  private RequestStat doAggregate(List&lt;RequestInfo&gt; requestInfos, long durationInMillis) {\n    List&lt;Double&gt; respTimes = new ArrayList&lt;&gt;();\n    for (RequestInfo requestInfo : requestInfos) {\n      double respTime = requestInfo.getResponseTime();\n      respTimes.add(respTime);\n    }\n\n    RequestStat requestStat = new RequestStat();\n    requestStat.setMaxResponseTime(max(respTimes));\n    requestStat.setMinResponseTime(min(respTimes));\n    requestStat.setAvgResponseTime(avg(respTimes));\n    requestStat.setP999ResponseTime(percentile999(respTimes));\n    requestStat.setP99ResponseTime(percentile99(respTimes));\n    requestStat.setCount(respTimes.size());\n    requestStat.setTps((long) tps(respTimes.size(), durationInMillis/1000));\n    return requestStat;\n  }\n\n  // 以下的函数的代码实现均省略...\n  private double max(List&lt;Double&gt; dataset) {}\n  private double min(List&lt;Double&gt; dataset) {}\n  private double avg(List&lt;Double&gt; dataset) {}\n  private double tps(int count, double duration) {}\n  private double percentile999(List&lt;Double&gt; dataset) {}\n  private double percentile99(List&lt;Double&gt; dataset) {}\n  private double percentile(List&lt;Double&gt; dataset, double ratio) {}\n}\n</code></pre><ul>\n<li>第3个逻辑：将统计数据显示到终端。我们将这部分逻辑剥离出来，设计成两个类：ConsoleViewer类和EmailViewer类，分别负责将统计结果显示到命令行和邮件中。具体的代码实现如下所示：</li>\n</ul><pre><code>public interface StatViewer {\n  void output(Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills);\n}\n\npublic class ConsoleViewer implements StatViewer {\n  public void output(\n          Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills) {\n    System.out.println(&quot;Time Span: [&quot; + startTimeInMillis + &quot;, &quot; + endTimeInMills + &quot;]&quot;);\n    Gson gson = new Gson();\n    System.out.println(gson.toJson(requestStats));\n  }\n}\n\npublic class EmailViewer implements StatViewer {\n  private EmailSender emailSender;\n  private List&lt;String&gt; toAddresses = new ArrayList&lt;&gt;();\n\n  public EmailViewer() {\n    this.emailSender = new EmailSender(/*省略参数*/);\n  }\n\n  public EmailViewer(EmailSender emailSender) {\n    this.emailSender = emailSender;\n  }\n\n  public void addToAddress(String address) {\n    toAddresses.add(address);\n  }\n\n  public void output(\n          Map&lt;String, RequestStat&gt; requestStats, long startTimeInMillis, long endTimeInMills) {\n    // format the requestStats to HTML style.\n    // send it to email toAddresses.\n  }\n}\n</code></pre><ul>\n<li>第4个逻辑：组装类并定时触发执行统计显示。在将核心逻辑剥离出来之后，这个类的代码变得更加简洁、清晰，只负责组装各个类（MetricsStorage、Aggegrator、StatViewer）来完成整个工作流程。重构之后的代码如下所示：</li>\n</ul><pre><code>public class ConsoleReporter {\n  private MetricsStorage metricsStorage;\n  private Aggregator aggregator;\n  private StatViewer viewer;\n  private ScheduledExecutorService executor;\n\n  public ConsoleReporter(MetricsStorage metricsStorage, Aggregator aggregator, StatViewer viewer) {\n    this.metricsStorage = metricsStorage;\n    this.aggregator = aggregator;\n    this.viewer = viewer;\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n  }\n\n  public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {\n    executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        long durationInMillis = durationInSeconds * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; requestStats = aggregator.aggregate(requestInfos, durationInMillis);\n        viewer.output(requestStats, startTimeInMillis, endTimeInMillis);\n      }\n    }, 0L, periodInSeconds, TimeUnit.SECONDS);\n  }\n\n}\n\npublic class EmailReporter {\n  private static final Long DAY_HOURS_IN_SECONDS = 86400L;\n\n  private MetricsStorage metricsStorage;\n  private Aggregator aggregator;\n  private StatViewer viewer;\n\n  public EmailReporter(MetricsStorage metricsStorage, Aggregator aggregator, StatViewer viewer) {\n    this.metricsStorage = metricsStorage;\n    this.aggregator = aggregator;\n    this.viewer = viewer;\n  }\n\n  public void startDailyReport() {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.DATE, 1);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date firstTime = calendar.getTime();\n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = aggregator.aggregate(requestInfos, durationInMillis);\n        viewer.output(stats, startTimeInMillis, endTimeInMillis);\n      }\n    }, firstTime, DAY_HOURS_IN_SECONDS * 1000);\n  }\n} \n</code></pre><p>经过上面的重构之后，我们现在再来看一下，现在框架该如何来使用。</p><p>我们需要在应用启动的时候，创建好ConsoleReporter对象，并且调用它的startRepeatedReport()函数，来启动定时统计并输出数据到终端。同理，我们还需要创建好EmailReporter对象，并且调用它的startDailyReport()函数，来启动每日统计并输出数据到制定邮件地址。我们通过MetricsCollector类来收集接口的访问情况，这部分收集代码会跟业务逻辑代码耦合在一起，或者统一放到类似Spring AOP的切面中完成。具体的使用代码示例如下：</p><pre><code>public class PerfCounterTest {\n  public static void main(String[] args) {\n    MetricsStorage storage = new RedisMetricsStorage();\n    Aggregator aggregator = new Aggregator();\n\n    // 定时触发统计并将结果显示到终端\n    ConsoleViewer consoleViewer = new ConsoleViewer();\n    ConsoleReporter consoleReporter = new ConsoleReporter(storage, aggregator, consoleViewer);\n    consoleReporter.startRepeatedReport(60, 60);\n\n    // 定时触发统计并将结果输出到邮件\n    EmailViewer emailViewer = new EmailViewer();\n    emailViewer.addToAddress(&quot;wangzheng@xzg.com&quot;);\n    EmailReporter emailReporter = new EmailReporter(storage, aggregator, emailViewer);\n    emailReporter.startDailyReport();\n\n    // 收集接口访问数据\n    MetricsCollector collector = new MetricsCollector(storage);\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 123, 10234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 223, 11234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 323, 12334));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 23, 12434));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 1223, 14234));\n\n    try {\n      Thread.sleep(100000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre><h2>Review版本2的设计与实现</h2><p>现在，我们Review一下，针对版本1重构之后，版本2的设计与实现。</p><p>重构之后，MetricsStorage负责存储，Aggregator负责统计，StatViewer（ConsoleViewer、EmailViewer）负责显示，三个类各司其职。ConsoleReporter和EmailReporter负责组装这三个类，将获取原始数据、聚合统计、显示统计结果到终端这三个阶段的工作串联起来，定时触发执行。</p><p>除此之外，MetricsStorage、Aggregator、StatViewer三个类的设计也符合迪米特法则。它们只与跟自己有直接相关的数据进行交互。MetricsStorage输出的是RequestInfo相关数据。Aggregator类输入的是RequestInfo数据，输出的是RequestStat数据。StatViewer输入的是RequestStat数据。</p><p>针对版本1和版本2，我画了一张它们的类之间依赖关系的对比图，如下所示。从图中，我们可以看出，重构之后的代码结构更加清晰、有条理。这也印证了之前提到的：面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/34/1303d16f75c7266cef9105f540c54834.jpg?wh=3263*1463\" alt=\"\"></p><p>刚刚我们分析了代码的整体结构和依赖关系，我们现在再来具体看每个类的设计。</p><p>Aggregator类从一个只包含一个静态函数的工具类，变成了一个普通的聚合统计类。现在，我们可以通过依赖注入的方式，将其组装进ConsoleReporter和EmailReporter类中，这样就更加容易编写单元测试。</p><p>Aggregator类在重构前，所有的逻辑都集中在aggregate()函数内，代码行数较多，代码的可读性和可维护性较差。在重构之后，我们将每个统计逻辑拆分成独立的函数，aggregate()函数变得比较单薄，可读性提高了。尽管我们要添加新的统计功能，还是要修改aggregate()函数，但现在的aggregate()函数代码行数很少，结构非常清晰，修改起来更加容易，可维护性提高。</p><p>目前来看，Aggregator的设计还算合理。但是，如果随着更多的统计功能的加入，Aggregator类的代码会越来越多。这个时候，我们可以将统计函数剥离出来，设计成独立的类，以解决Aggregator类的无限膨胀问题。不过，暂时来说没有必要这么做，毕竟将每个统计函数独立成类，会增加类的个数，也会影响到代码的可读性和可维护性。</p><p>ConsoleReporter和EmailReporter经过重构之后，代码的重复问题变小了，但仍然没有完全解决。尽管这两个类不再调用Aggregator的静态方法，但因为涉及多线程和时间相关的计算，代码的测试性仍然不够好。这两个问题我们留在下一节课中解决，你也可以留言说说的你解决方案。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要掌握的重点内容。</p><p>面向对象设计中的最后一步是组装类并提供执行入口，也就是上帝类要做的事情。这个上帝类是没办法去掉的，但我们可以将上帝类做得很轻量级，把核心逻辑都剥离出去，下沉形成独立的类。上帝类只负责组装类和串联执行流程。这样做的好处是，代码结构更加清晰，底层核心逻辑更容易被复用。</p><p>面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。当我们要实现某个功能的时候，不管如何设计，所需要编写的代码量基本上是一样的，唯一的区别就是如何将这些代码划分到不同的类中。不同的人有不同的划分方法，对应得到的代码结构（比如类与类之间交互等）也不尽相同。</p><p>好的设计一定是结构清晰、有条理、逻辑性强，看起来一目了然，读完之后常常有一种原来如此的感觉。差的设计往往逻辑、代码乱塞一通，没有什么设计思路可言，看起来莫名其妙，读完之后一头雾水。</p><h2>课堂讨论</h2><ol>\n<li>今天我们提到，重构之后的ConsoleReporter和EmailReporter仍然存在代码重复和可测试性差的问题，你可以思考一下，应该如何解决呢？</li>\n<li>从上面的使用示例中，我们可以看出，框架易用性有待提高：ConsoleReporter和EmailReporter的创建过程比较复杂，使用者需要正确地组装各种类才行。对于框架的易用性，你有没有什么办法改善一下呢？</li>\n</ol><p>欢迎在留言区写下你的思考和想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","id":193093},"right":{"article_title":"40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","id":193555}},"comments":[{"had_liked":false,"id":174999,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580519690,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"207738949898","product_id":100039001,"comment_content":"问题1，reporter可测性差的问题，可以mock storage，将request信息到map中。<br>&#47;&#47; mock<br>MetricsStorage storage = new MockRedisMetricsStorage();<br><br>问题2，reporter的创建过程可以使用简单工厂方法。Aggregator完全没有必要暴露出来，可以隐藏。<br>ConsoleReporter consoleReporter = ReporterFactory.createConsoleReporter(storage);<br><br>争哥的代码我复制下来，并且跟着重构了一下，想跑跑看的同学请参考：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u39","like_count":49},{"had_liked":false,"id":174868,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580443417,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83184822041","product_id":100039001,"comment_content":"1. 看了下，ConoleReporter和EmailReporter的核心区别在于使用的显示器不同，另外就是调度的频次不同，第二个不同是可以通用化的，可以提取出一个抽象的调度器（把查询数据、调用聚合统计对象的代码都放进去），支持每秒、分、时、天调度；ConsoleReportor和EmailReporter都使用这个调度器，自己只维护对应的显示器对象的引用就可以了。","like_count":20},{"had_liked":false,"id":174852,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1580436080,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"70299912816","product_id":100039001,"comment_content":"课后思考：<br>1. 将两个reporter中的run里的逻辑单独提取出来做成一个公共函数void doReport(duration, endTime, startTime)，这个函数易于单独测试，两个reporter类中调用doReport，因为两个reporter类中并无特殊的逻辑处理，只使用了jdk本身提供的功能，我们可以相信jdk本身的正确性，所以这块就可以不写单元测试了，这就简化了测试也解决了重复代码的问题。<br>","like_count":17},{"had_liked":false,"id":174870,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580443473,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"66004952913","product_id":100039001,"comment_content":"2. 如果使用Spring Boot之类的框架，就可以利用框架做自动注入；如果没有，则可以用工厂方法设计模式来拼比掉复杂的对象创建过程","like_count":16},{"had_liked":false,"id":174913,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580456197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44530129157","product_id":100039001,"comment_content":"课堂讨论<br><br>1. 今天我们提到，重构之后的 ConsoleReporter 和 EmailReporter 仍然存在代码重复和可测试性差的问题，你可以思考一下，应该如何解决呢？<br><br>   ConsoleReporter和EmailReporter的代码重复集中在viewer#output()部分.可以抽象一个AbsReporter,将重复代码放在基类中,并让ConsoleReporter和EmailReporter继承自AbsReporter. 这里基类与衍生类完全符合is-a关系, 但并未使用多态性. <br><br>2. 从上面的使用示例中，我们可以看出，框架易用性有待提高：ConsoleReporter 和 EmailReporter 的创建过程比较复杂，使用者需要正确地组装各种类才行。对于框架的易用性，你有没有什么办法改善一下呢？<br><br>​       可以使用builder模式改造, 提供更友好的依赖注入方式. 除此以外, 还应编写良好的注释, 帮助客户端程序员正确的使用框架.<br><br>​\t\t示例:<br><br>​\t\tConsoleReporter instance = ConsoleReporter.Builder()<br><br>​\t\t    .setMetricsStorate(storage)<br><br>​\t\t    .setAggregator(aggregator)<br><br>​\t\t\t.setStatViewer(viewer)<br><br>​\t\t\t.setExecutor(executor)<br><br>​\t\t\t.build();","like_count":11},{"had_liked":false,"id":189146,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1584460272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27354264048","product_id":100039001,"comment_content":"这句话太赞同了：面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。当我们要实现某个功能的时候，不管如何设计，所需要编写的代码量基本上是一样的，唯一的区别就是如何将这些代码划分到不同的类中。不同的人有不同的划分方法，对应得到的代码结构（比如类与类之间交互等）也不尽相同。","like_count":7},{"had_liked":false,"id":174969,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580483719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350287495","product_id":100039001,"comment_content":"1.将定时和输出报表这两件事分离。单独的定时线程，在关键的时间点都触发一个事件。输出报表的两个类去监听自己关心的时间job的事件（生产消费模式）。如此一来，定时触发好不好使不再是我api使用方考虑的事。我只需要测试对应输出报表的业务是否正常。然后就控制台和邮件这两个报表类，其生成报表的逻辑是一样的，仅仅是展示的“方式”不一样。所以让我选，我会合并这两个类，生成报表的逻辑为私有方法，然后单独写一个控制台输出的public方法和邮箱输出的public方法（输出模式多，且存在组合需求的话会采用分发+约定的方式，降低调用方负担）。那么这个类，生成报表逻辑公用，两个输出方法是走的api，所以也不关心，我只需要测试 报表生成的逻辑即可。<br><br>2.越灵活自然越复杂。 约定大于配置呗。除了业务埋点必须实现，其他都可以约定。","like_count":7},{"had_liked":false,"id":300479,"user_name":"时熵","can_delete":false,"product_type":"c1","uid":1095280,"ip_address":"","ucode":"3CDAE8628117D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/b6/70/33e87a4f.jpg","comment_is_top":false,"comment_ctime":1625192268,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18805061452","product_id":100039001,"comment_content":"Aggregator重构后时间复杂度感觉上升了好多","like_count":5,"discussions":[{"author":{"id":2960877,"avatar":"","nickname":"冯仁彬","note":"","ucode":"6E5CA08BC6366B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585581,"discussion_content":"可以不用拆分成max,min这么细粒度的函数，把需要遍历计算才能得到结果的逻辑放到一个函数，只依赖sum和count的逻辑放到一个函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661680494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535910,"discussion_content":"确实 之前其实能想到  这个aggregator想 函数职责单一 就得这样 但是这样 以前放在一个 for里面就能做完的事 现在得 循环四五次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638603448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174853,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1580436787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18760305971","product_id":100039001,"comment_content":"1. 可定义父类，重复代码抽取为函数进行复用<br>2. 用工厂方法，屏蔽创建过程","like_count":5},{"had_liked":false,"id":260484,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1605020929,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14489922817","product_id":100039001,"comment_content":"老师，大家好，有个问题一直困扰着我，看到老师这里也存在，希望老师和同学们帮我解惑：max和min等拆分成独立的函数之前，一个for循环就可以同时完成计算；拆分之后，每个独立的方法都要循环一次，如果数据很大，这样就很耗时间，而且我总觉得一个for循环能解决多个问题特别的爽，有一种一石二鸟的感觉，但是拆分之后代码逻辑更加清晰，我不知道要怎么取舍了","like_count":4,"discussions":[{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325632,"discussion_content":"个人建议是，如果多次循环不是性能的瓶颈，就拆开多次循环。如果一次循环遍历非常难耗时，那就在一个循环中解决。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605368100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327769,"discussion_content":"确实这样思考更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605942779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325632,"ip_address":""},"score":327769,"extra":""},{"author":{"id":2432694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/1e/b6/54125f94.jpg","nickname":"STOP-LIFE","note":"","ucode":"D0773824CA9E2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354312,"discussion_content":"MAX和min作为一个计算主题拆分成一个类似于bean类的操作，实现statiscs接口完成统计就好了。一次循环，类似于函数式编程传计算体","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615273500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327769,"ip_address":""},"score":354312,"extra":""},{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2432694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/1e/b6/54125f94.jpg","nickname":"STOP-LIFE","note":"","ucode":"D0773824CA9E2D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406084,"discussion_content":"我查了一下，还是不清楚要如何做，方便写一下大致的代码思路吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634698210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354312,"ip_address":""},"score":406084,"extra":""}]}]},{"had_liked":false,"id":175008,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1580525940,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14465427828","product_id":100039001,"comment_content":"1. Reporter中线程调用的run方法可以单独提取一个方法不依赖额外的线程去调用，方便单元测试。<br>2. 另外Reporter中的线程模型是否可以单独提取出一个类，该类负责按需创建线程，并且调用实际的埋点统计方法。<br>3. 可以借助框架层面依赖注入的方式，更为简单的构造Reporter类。","like_count":3},{"had_liked":false,"id":176984,"user_name":"- -","can_delete":false,"product_type":"c1","uid":1338203,"ip_address":"","ucode":"FBB2869AD5FEA5","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/5b/16a93d9d.jpg","comment_is_top":false,"comment_ctime":1581242375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10171176967","product_id":100039001,"comment_content":"下面是目前的想法，希望后面能颠覆现在的想法哈哈<br>1、虽然这两个类的执行逻辑代码是一致的，但是这两个类是属于串联执行过程的上帝类，它们的实现代码逻辑是重复的，但语义上是属于不一样的功能，所以其实没有代码重复的问题。<br>这两个类的测试我觉得应该不叫单元测试而是集成测试了吧？所以应该是把函数里的各个小函数分别做单元测试。还有一个问题，像类似得到统计数据这种函数应该怎么进行测试呢?比如aggregate()就很难进行测试。<br>2、可以设有默认的组装类，只有当需要另外指定其它组装类的时候才需要使用者亲自创建组装类，这应该也是符合框架的易用性及扩展性的。","like_count":2},{"had_liked":false,"id":176378,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1581045214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170979806","product_id":100039001,"comment_content":"打卡～看完一遍理解不是很深刻，准备手敲一遍。","like_count":2},{"had_liked":false,"id":174836,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580426319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170360911","product_id":100039001,"comment_content":"仔细学习分析一下重构后带来的好处，解决了哪些问题","like_count":2},{"had_liked":false,"id":174828,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580404990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170339582","product_id":100039001,"comment_content":"打卡","like_count":2},{"had_liked":false,"id":324753,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5933571168","product_id":100039001,"comment_content":"report重复的问题 其他逻辑本相同只是传递的view不同 ，可以抽出相同的逻辑 通过依赖注入 注入不同的view实现即可","like_count":1},{"had_liked":false,"id":324752,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5933570894","product_id":100039001,"comment_content":"代码的重构其实就是一个不断取舍的过程。为了满足我现在的区别 我应该做些什么 这么做有哪些得失","like_count":1},{"had_liked":false,"id":343249,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650726021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650726021","product_id":100039001,"comment_content":"1.调度逻辑大体相同，可以抽象一个通用的调度执行函数来负责调度逻辑。显示output的方法不一样。我们将调度逻辑抽象出一个方法，同时内部真正执行显示output的时候再调用另一个doPut的方法，解决了代码重复的问题，同时相较于以前测试友好程度提高了，不需要耦合线程调度的逻辑。<br><br>2.可以在两个reporter类的内部使用builder建造者模式，来创建对象。可以默认实例化一些暂时统一的类，比如Aggregator类就可以在builder内部实例化，隐藏了大部分的组装逻辑。提供给外部调用者只需要关注statViewer接口的注入即可。<br><br>代码放到GitHub上了，感兴趣的小伙伴可以参考一下：<br>https:&#47;&#47;github.com&#47;yukunqi&#47;designPattern&#47;tree&#47;master&#47;src&#47;com&#47;designPattern","like_count":0},{"had_liked":false,"id":343247,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650725581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650725581","product_id":100039001,"comment_content":"1.调度逻辑大体相同，可以抽象一个通用的调度执行函数来负责调度逻辑。显示output的方法不一样。我们将调度逻辑抽象出一个方法，同时内部真正执行显示output的时候再调用另一个doPut的方法，解决了代码重复的问题，同时相较于以前测试友好程度提高了，不需要耦合线程调度的逻辑。<br><br>2.可以在两个reporter类的内部使用builder建造者模式，来创建对象。可以默认实例化一些暂时统一的类，比如A&#39;g&#39;g&#39;re&#39;ga&#39;to&#39;r","like_count":0},{"had_liked":false,"id":324754,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638603914","product_id":100039001,"comment_content":"问题2  工厂模式 虽然我很少用...但是工厂貌似是这样来着","like_count":0},{"had_liked":false,"id":317902,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1635044464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635044464","product_id":100039001,"comment_content":"1、面向对象设计的上帝类，入口类是必要的，尽量剥离核心逻辑，下称形成独立类。上帝类只负责组装类和串联执行流程<br>2、实现功能，不管如何设计代码量基本相同，最好的做法就是把合适的代码放到合适的类中<br>3、好的设计结构清晰、有条理、逻辑性强。差的设计往往逻辑、代码乱塞一通，看起来莫名其妙、一头雾水","like_count":0},{"had_liked":false,"id":297136,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1623322688,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1623322688","product_id":100039001,"comment_content":"评论区都是大神","like_count":0},{"had_liked":false,"id":294847,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1622108915,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1622108915","product_id":100039001,"comment_content":"课堂讨论一：可以使用继承，多态来解决这个问题，将重复的代码抽象到父类中。<br>课堂讨论二：可以使用工程模式将组装隐藏起来，只暴露创建方法。","like_count":0},{"had_liked":false,"id":261298,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605261449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605261449","product_id":100039001,"comment_content":"1. 把线程中执行的业务代码抽到单独的函数或者类中，这样就增加了可测试性，同时run方法的内容也变得干净；<br>2. 可以增加有参的构造函数，而且可以根据需求设计不同构造参数来创建对象。","like_count":0},{"had_liked":false,"id":247702,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1599797980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599797980","product_id":100039001,"comment_content":"问题2：“框架易用性有待提高：ConsoleReporter 和 EmailReporter 的创建过程比较复杂，使用者需要正确地组装各种类才行。” 这明显可以应用创建型设计模式，工厂模式、建造者模式，或者使用约定的默认配置。","like_count":0},{"had_liked":false,"id":247340,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599662930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599662930","product_id":100039001,"comment_content":"1.对于Reporter类可测试不好的问题，可以把执行和组装解耦开来。这样可以对组装逻辑进行单独测试，不会受制于运行方式的限制<br>2.依赖的类，通过依赖注入的方式，解耦组装逻辑","like_count":0},{"had_liked":false,"id":238373,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1596155511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596155511","product_id":100039001,"comment_content":"问题1：俩reporter核心逻辑抽象为task抽象类子类，task抽象类负责逻辑整合，俩子类中doReporter实现真正的逻辑执行，使用线程调度类去调度task；<br>问题2：创建者模式<br><br>    ","like_count":0},{"had_liked":false,"id":229018,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1592881035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592881035","product_id":100039001,"comment_content":"打卡39","like_count":0},{"had_liked":false,"id":226871,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1592220432,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1592220432","product_id":100039001,"comment_content":"1.大方向上可以使用模板方法统一主流程业务，根据具体的细节进行子类定制化实现，这样主流程清晰明了，子类流程只需要关注实现细节即可。<br>2.可以采用抽象工厂方法实现处理。","like_count":0},{"had_liked":false,"id":199032,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1585476835,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585476835","product_id":100039001,"comment_content":"自己尝试了下代码，觉得emailViewer里面不该有添加地址的方法，添加地址的相关操作应该放在emailSender的相关代码中，我觉得这才叫相关的代码放在一起，在emailView中添加如下的代码:<br><br>public void addAddress(String address) {<br>        emailSender.addToAddress(address);<br>    }<br><br>而在emailSender中，执行具体的添加地址的逻辑，这样感觉比较舒服点：<br><br> private List&lt;String&gt; toAddressList;<br><br>    public EmailSender() {<br>        this.toAddressList = new ArrayList&lt;&gt;();<br>    }<br><br>    public void addToAddress(String address) {<br>        toAddressList.add(address);<br>    }<br><br>以上均是个人见解，还望争哥指导下。。。。","like_count":0},{"had_liked":false,"id":189371,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1584506841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584506841","product_id":100039001,"comment_content":"讲得挺好的，马上学到最感兴趣的设计模式了，哈哈","like_count":0},{"had_liked":false,"id":189263,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1584494390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584494390","product_id":100039001,"comment_content":"代码在手机上看，还是不够方便，用电脑💻学习效果更好些。","like_count":0},{"had_liked":false,"id":187867,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584261841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584261841","product_id":100039001,"comment_content":"1. 将email 和 console这两个reporter类里的定时器相关逻辑单独实现。且他们依赖一个包含doReport()的接口。<br>2. 使用一个reporter类实现第1条将的接口。这样就将重复获取信息并计算的代码合并一处了。且这个逻辑可测试了。<br>3. 上帝调用仅通过这个reporter类启动两个执行规则。","like_count":0},{"had_liked":false,"id":186819,"user_name":"超","can_delete":false,"product_type":"c1","uid":1005939,"ip_address":"","ucode":"D574815D4A3496","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/73/e0aa8c84.jpg","comment_is_top":false,"comment_ctime":1583934069,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583934069","product_id":100039001,"comment_content":"Aggregator 重构后一个循环变成了N个循环，这算是性能上的问题吗？","like_count":0},{"had_liked":false,"id":186348,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583828821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583828821","product_id":100039001,"comment_content":"课后题<br>2.利用工厂，将组装的对象封装进去，通过工厂调用","like_count":0},{"had_liked":false,"id":185862,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1583715917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583715917","product_id":100039001,"comment_content":"1. 可以抽象出一个接口或者AbstractReporter类，把共同的逻辑放到这个类中；<br>2. 用工程方法解决","like_count":0},{"had_liked":false,"id":185518,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1583597796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583597796","product_id":100039001,"comment_content":"1、大函数拆分为独立小函数（大功能拆分成独立小功能），解耦和单一<br>2、重复代码抽象成继承子类关系，复用<br>3、组合类解决拆分后的流程","like_count":0},{"had_liked":false,"id":185461,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583587260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583587260","product_id":100039001,"comment_content":"ConsoleReporter和EmailReporter可以抽象出一个抽象类，通用的地方复用，然后传不同的行为进去。","like_count":0},{"had_liked":false,"id":184752,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583396191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583396191","product_id":100039001,"comment_content":"首先回答第二个问题,对于创建不叫复杂的类,我们可以考虑使用工厂类设计模式,来进行处理,将一些固定不变的类放在工厂类创建,尽可能缩小传入的参数,如果是使用了依赖注入框架,那么也可以交由框架进行组合创建注入<br>然后是第一个问题,既然我们的viewer已经实现了相同的接口,那么为什么不能继续抽象,抽象出另一个接口,reporterTask接口中,存在对应的定时发送的任务,传入对应的viewer和参数,然后对应不同的发送,实现不同的reporterTask接口呢?","like_count":0},{"had_liked":false,"id":183672,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1583114011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583114011","product_id":100039001,"comment_content":"1. 可以提取出一的 Reporter 抽象类，将公共的执行逻辑放在 Reporter 中，Reporter 可以定义一个抽象的方法供 EmailReporter和ConsoleReporter重写，实现其具体的业务逻辑。","like_count":0},{"had_liked":false,"id":179913,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582120980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582120980","product_id":100039001,"comment_content":"最后一张图很强大！","like_count":0},{"had_liked":false,"id":177203,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1581320700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581320700","product_id":100039001,"comment_content":"打卡, 看完一遍感觉理解不太深刻, 打算抽时间手敲一遍, 加深理解","like_count":0},{"had_liked":false,"id":177126,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1581298554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581298554","product_id":100039001,"comment_content":"结构清晰是关键","like_count":0},{"had_liked":false,"id":174999,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580519690,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"207738949898","product_id":100039001,"comment_content":"问题1，reporter可测性差的问题，可以mock storage，将request信息到map中。<br>&#47;&#47; mock<br>MetricsStorage storage = new MockRedisMetricsStorage();<br><br>问题2，reporter的创建过程可以使用简单工厂方法。Aggregator完全没有必要暴露出来，可以隐藏。<br>ConsoleReporter consoleReporter = ReporterFactory.createConsoleReporter(storage);<br><br>争哥的代码我复制下来，并且跟着重构了一下，想跑跑看的同学请参考：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u39","like_count":49},{"had_liked":false,"id":174868,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580443417,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83184822041","product_id":100039001,"comment_content":"1. 看了下，ConoleReporter和EmailReporter的核心区别在于使用的显示器不同，另外就是调度的频次不同，第二个不同是可以通用化的，可以提取出一个抽象的调度器（把查询数据、调用聚合统计对象的代码都放进去），支持每秒、分、时、天调度；ConsoleReportor和EmailReporter都使用这个调度器，自己只维护对应的显示器对象的引用就可以了。","like_count":20},{"had_liked":false,"id":174852,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1580436080,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"70299912816","product_id":100039001,"comment_content":"课后思考：<br>1. 将两个reporter中的run里的逻辑单独提取出来做成一个公共函数void doReport(duration, endTime, startTime)，这个函数易于单独测试，两个reporter类中调用doReport，因为两个reporter类中并无特殊的逻辑处理，只使用了jdk本身提供的功能，我们可以相信jdk本身的正确性，所以这块就可以不写单元测试了，这就简化了测试也解决了重复代码的问题。<br>","like_count":17},{"had_liked":false,"id":174870,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580443473,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"66004952913","product_id":100039001,"comment_content":"2. 如果使用Spring Boot之类的框架，就可以利用框架做自动注入；如果没有，则可以用工厂方法设计模式来拼比掉复杂的对象创建过程","like_count":16},{"had_liked":false,"id":174913,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580456197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44530129157","product_id":100039001,"comment_content":"课堂讨论<br><br>1. 今天我们提到，重构之后的 ConsoleReporter 和 EmailReporter 仍然存在代码重复和可测试性差的问题，你可以思考一下，应该如何解决呢？<br><br>   ConsoleReporter和EmailReporter的代码重复集中在viewer#output()部分.可以抽象一个AbsReporter,将重复代码放在基类中,并让ConsoleReporter和EmailReporter继承自AbsReporter. 这里基类与衍生类完全符合is-a关系, 但并未使用多态性. <br><br>2. 从上面的使用示例中，我们可以看出，框架易用性有待提高：ConsoleReporter 和 EmailReporter 的创建过程比较复杂，使用者需要正确地组装各种类才行。对于框架的易用性，你有没有什么办法改善一下呢？<br><br>​       可以使用builder模式改造, 提供更友好的依赖注入方式. 除此以外, 还应编写良好的注释, 帮助客户端程序员正确的使用框架.<br><br>​\t\t示例:<br><br>​\t\tConsoleReporter instance = ConsoleReporter.Builder()<br><br>​\t\t    .setMetricsStorate(storage)<br><br>​\t\t    .setAggregator(aggregator)<br><br>​\t\t\t.setStatViewer(viewer)<br><br>​\t\t\t.setExecutor(executor)<br><br>​\t\t\t.build();","like_count":11},{"had_liked":false,"id":189146,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1584460272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27354264048","product_id":100039001,"comment_content":"这句话太赞同了：面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。当我们要实现某个功能的时候，不管如何设计，所需要编写的代码量基本上是一样的，唯一的区别就是如何将这些代码划分到不同的类中。不同的人有不同的划分方法，对应得到的代码结构（比如类与类之间交互等）也不尽相同。","like_count":7},{"had_liked":false,"id":174969,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580483719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350287495","product_id":100039001,"comment_content":"1.将定时和输出报表这两件事分离。单独的定时线程，在关键的时间点都触发一个事件。输出报表的两个类去监听自己关心的时间job的事件（生产消费模式）。如此一来，定时触发好不好使不再是我api使用方考虑的事。我只需要测试对应输出报表的业务是否正常。然后就控制台和邮件这两个报表类，其生成报表的逻辑是一样的，仅仅是展示的“方式”不一样。所以让我选，我会合并这两个类，生成报表的逻辑为私有方法，然后单独写一个控制台输出的public方法和邮箱输出的public方法（输出模式多，且存在组合需求的话会采用分发+约定的方式，降低调用方负担）。那么这个类，生成报表逻辑公用，两个输出方法是走的api，所以也不关心，我只需要测试 报表生成的逻辑即可。<br><br>2.越灵活自然越复杂。 约定大于配置呗。除了业务埋点必须实现，其他都可以约定。","like_count":7},{"had_liked":false,"id":300479,"user_name":"时熵","can_delete":false,"product_type":"c1","uid":1095280,"ip_address":"","ucode":"3CDAE8628117D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/b6/70/33e87a4f.jpg","comment_is_top":false,"comment_ctime":1625192268,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18805061452","product_id":100039001,"comment_content":"Aggregator重构后时间复杂度感觉上升了好多","like_count":5,"discussions":[{"author":{"id":2960877,"avatar":"","nickname":"冯仁彬","note":"","ucode":"6E5CA08BC6366B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585581,"discussion_content":"可以不用拆分成max,min这么细粒度的函数，把需要遍历计算才能得到结果的逻辑放到一个函数，只依赖sum和count的逻辑放到一个函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661680494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535910,"discussion_content":"确实 之前其实能想到  这个aggregator想 函数职责单一 就得这样 但是这样 以前放在一个 for里面就能做完的事 现在得 循环四五次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638603448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174853,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1580436787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18760305971","product_id":100039001,"comment_content":"1. 可定义父类，重复代码抽取为函数进行复用<br>2. 用工厂方法，屏蔽创建过程","like_count":5},{"had_liked":false,"id":260484,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1605020929,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14489922817","product_id":100039001,"comment_content":"老师，大家好，有个问题一直困扰着我，看到老师这里也存在，希望老师和同学们帮我解惑：max和min等拆分成独立的函数之前，一个for循环就可以同时完成计算；拆分之后，每个独立的方法都要循环一次，如果数据很大，这样就很耗时间，而且我总觉得一个for循环能解决多个问题特别的爽，有一种一石二鸟的感觉，但是拆分之后代码逻辑更加清晰，我不知道要怎么取舍了","like_count":4,"discussions":[{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325632,"discussion_content":"个人建议是，如果多次循环不是性能的瓶颈，就拆开多次循环。如果一次循环遍历非常难耗时，那就在一个循环中解决。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605368100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327769,"discussion_content":"确实这样思考更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605942779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325632,"ip_address":""},"score":327769,"extra":""},{"author":{"id":2432694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/1e/b6/54125f94.jpg","nickname":"STOP-LIFE","note":"","ucode":"D0773824CA9E2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354312,"discussion_content":"MAX和min作为一个计算主题拆分成一个类似于bean类的操作，实现statiscs接口完成统计就好了。一次循环，类似于函数式编程传计算体","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615273500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327769,"ip_address":""},"score":354312,"extra":""},{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2432694,"avatar":"https://static001.geekbang.org/account/avatar/00/25/1e/b6/54125f94.jpg","nickname":"STOP-LIFE","note":"","ucode":"D0773824CA9E2D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406084,"discussion_content":"我查了一下，还是不清楚要如何做，方便写一下大致的代码思路吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634698210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354312,"ip_address":""},"score":406084,"extra":""}]}]},{"had_liked":false,"id":175008,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1580525940,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14465427828","product_id":100039001,"comment_content":"1. Reporter中线程调用的run方法可以单独提取一个方法不依赖额外的线程去调用，方便单元测试。<br>2. 另外Reporter中的线程模型是否可以单独提取出一个类，该类负责按需创建线程，并且调用实际的埋点统计方法。<br>3. 可以借助框架层面依赖注入的方式，更为简单的构造Reporter类。","like_count":3},{"had_liked":false,"id":176984,"user_name":"- -","can_delete":false,"product_type":"c1","uid":1338203,"ip_address":"","ucode":"FBB2869AD5FEA5","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/5b/16a93d9d.jpg","comment_is_top":false,"comment_ctime":1581242375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10171176967","product_id":100039001,"comment_content":"下面是目前的想法，希望后面能颠覆现在的想法哈哈<br>1、虽然这两个类的执行逻辑代码是一致的，但是这两个类是属于串联执行过程的上帝类，它们的实现代码逻辑是重复的，但语义上是属于不一样的功能，所以其实没有代码重复的问题。<br>这两个类的测试我觉得应该不叫单元测试而是集成测试了吧？所以应该是把函数里的各个小函数分别做单元测试。还有一个问题，像类似得到统计数据这种函数应该怎么进行测试呢?比如aggregate()就很难进行测试。<br>2、可以设有默认的组装类，只有当需要另外指定其它组装类的时候才需要使用者亲自创建组装类，这应该也是符合框架的易用性及扩展性的。","like_count":2},{"had_liked":false,"id":176378,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1581045214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170979806","product_id":100039001,"comment_content":"打卡～看完一遍理解不是很深刻，准备手敲一遍。","like_count":2},{"had_liked":false,"id":174836,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580426319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170360911","product_id":100039001,"comment_content":"仔细学习分析一下重构后带来的好处，解决了哪些问题","like_count":2},{"had_liked":false,"id":174828,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580404990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170339582","product_id":100039001,"comment_content":"打卡","like_count":2},{"had_liked":false,"id":324753,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5933571168","product_id":100039001,"comment_content":"report重复的问题 其他逻辑本相同只是传递的view不同 ，可以抽出相同的逻辑 通过依赖注入 注入不同的view实现即可","like_count":1},{"had_liked":false,"id":324752,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5933570894","product_id":100039001,"comment_content":"代码的重构其实就是一个不断取舍的过程。为了满足我现在的区别 我应该做些什么 这么做有哪些得失","like_count":1},{"had_liked":false,"id":343249,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650726021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650726021","product_id":100039001,"comment_content":"1.调度逻辑大体相同，可以抽象一个通用的调度执行函数来负责调度逻辑。显示output的方法不一样。我们将调度逻辑抽象出一个方法，同时内部真正执行显示output的时候再调用另一个doPut的方法，解决了代码重复的问题，同时相较于以前测试友好程度提高了，不需要耦合线程调度的逻辑。<br><br>2.可以在两个reporter类的内部使用builder建造者模式，来创建对象。可以默认实例化一些暂时统一的类，比如Aggregator类就可以在builder内部实例化，隐藏了大部分的组装逻辑。提供给外部调用者只需要关注statViewer接口的注入即可。<br><br>代码放到GitHub上了，感兴趣的小伙伴可以参考一下：<br>https:&#47;&#47;github.com&#47;yukunqi&#47;designPattern&#47;tree&#47;master&#47;src&#47;com&#47;designPattern","like_count":0},{"had_liked":false,"id":343247,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1650725581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650725581","product_id":100039001,"comment_content":"1.调度逻辑大体相同，可以抽象一个通用的调度执行函数来负责调度逻辑。显示output的方法不一样。我们将调度逻辑抽象出一个方法，同时内部真正执行显示output的时候再调用另一个doPut的方法，解决了代码重复的问题，同时相较于以前测试友好程度提高了，不需要耦合线程调度的逻辑。<br><br>2.可以在两个reporter类的内部使用builder建造者模式，来创建对象。可以默认实例化一些暂时统一的类，比如A&#39;g&#39;g&#39;re&#39;ga&#39;to&#39;r","like_count":0},{"had_liked":false,"id":324754,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638603914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638603914","product_id":100039001,"comment_content":"问题2  工厂模式 虽然我很少用...但是工厂貌似是这样来着","like_count":0},{"had_liked":false,"id":317902,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1635044464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635044464","product_id":100039001,"comment_content":"1、面向对象设计的上帝类，入口类是必要的，尽量剥离核心逻辑，下称形成独立类。上帝类只负责组装类和串联执行流程<br>2、实现功能，不管如何设计代码量基本相同，最好的做法就是把合适的代码放到合适的类中<br>3、好的设计结构清晰、有条理、逻辑性强。差的设计往往逻辑、代码乱塞一通，看起来莫名其妙、一头雾水","like_count":0},{"had_liked":false,"id":297136,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1623322688,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1623322688","product_id":100039001,"comment_content":"评论区都是大神","like_count":0},{"had_liked":false,"id":294847,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1622108915,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1622108915","product_id":100039001,"comment_content":"课堂讨论一：可以使用继承，多态来解决这个问题，将重复的代码抽象到父类中。<br>课堂讨论二：可以使用工程模式将组装隐藏起来，只暴露创建方法。","like_count":0},{"had_liked":false,"id":261298,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605261449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605261449","product_id":100039001,"comment_content":"1. 把线程中执行的业务代码抽到单独的函数或者类中，这样就增加了可测试性，同时run方法的内容也变得干净；<br>2. 可以增加有参的构造函数，而且可以根据需求设计不同构造参数来创建对象。","like_count":0},{"had_liked":false,"id":247702,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1599797980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599797980","product_id":100039001,"comment_content":"问题2：“框架易用性有待提高：ConsoleReporter 和 EmailReporter 的创建过程比较复杂，使用者需要正确地组装各种类才行。” 这明显可以应用创建型设计模式，工厂模式、建造者模式，或者使用约定的默认配置。","like_count":0},{"had_liked":false,"id":247340,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599662930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599662930","product_id":100039001,"comment_content":"1.对于Reporter类可测试不好的问题，可以把执行和组装解耦开来。这样可以对组装逻辑进行单独测试，不会受制于运行方式的限制<br>2.依赖的类，通过依赖注入的方式，解耦组装逻辑","like_count":0},{"had_liked":false,"id":238373,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1596155511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596155511","product_id":100039001,"comment_content":"问题1：俩reporter核心逻辑抽象为task抽象类子类，task抽象类负责逻辑整合，俩子类中doReporter实现真正的逻辑执行，使用线程调度类去调度task；<br>问题2：创建者模式<br><br>    ","like_count":0},{"had_liked":false,"id":229018,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1592881035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592881035","product_id":100039001,"comment_content":"打卡39","like_count":0},{"had_liked":false,"id":226871,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1592220432,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1592220432","product_id":100039001,"comment_content":"1.大方向上可以使用模板方法统一主流程业务，根据具体的细节进行子类定制化实现，这样主流程清晰明了，子类流程只需要关注实现细节即可。<br>2.可以采用抽象工厂方法实现处理。","like_count":0},{"had_liked":false,"id":199032,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1585476835,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585476835","product_id":100039001,"comment_content":"自己尝试了下代码，觉得emailViewer里面不该有添加地址的方法，添加地址的相关操作应该放在emailSender的相关代码中，我觉得这才叫相关的代码放在一起，在emailView中添加如下的代码:<br><br>public void addAddress(String address) {<br>        emailSender.addToAddress(address);<br>    }<br><br>而在emailSender中，执行具体的添加地址的逻辑，这样感觉比较舒服点：<br><br> private List&lt;String&gt; toAddressList;<br><br>    public EmailSender() {<br>        this.toAddressList = new ArrayList&lt;&gt;();<br>    }<br><br>    public void addToAddress(String address) {<br>        toAddressList.add(address);<br>    }<br><br>以上均是个人见解，还望争哥指导下。。。。","like_count":0},{"had_liked":false,"id":189371,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1584506841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584506841","product_id":100039001,"comment_content":"讲得挺好的，马上学到最感兴趣的设计模式了，哈哈","like_count":0},{"had_liked":false,"id":189263,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1584494390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584494390","product_id":100039001,"comment_content":"代码在手机上看，还是不够方便，用电脑💻学习效果更好些。","like_count":0},{"had_liked":false,"id":187867,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584261841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584261841","product_id":100039001,"comment_content":"1. 将email 和 console这两个reporter类里的定时器相关逻辑单独实现。且他们依赖一个包含doReport()的接口。<br>2. 使用一个reporter类实现第1条将的接口。这样就将重复获取信息并计算的代码合并一处了。且这个逻辑可测试了。<br>3. 上帝调用仅通过这个reporter类启动两个执行规则。","like_count":0},{"had_liked":false,"id":186819,"user_name":"超","can_delete":false,"product_type":"c1","uid":1005939,"ip_address":"","ucode":"D574815D4A3496","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/73/e0aa8c84.jpg","comment_is_top":false,"comment_ctime":1583934069,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583934069","product_id":100039001,"comment_content":"Aggregator 重构后一个循环变成了N个循环，这算是性能上的问题吗？","like_count":0,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230536,"discussion_content":"对于这种非业务系统，也非关键的支撑系统，这么写问题不大。Martin Flower的《重构》里也是这么推荐的，当然如果实际发现真的有非常大的性能问题，还可以继续优化。但是优先考虑的是单一职责","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586750905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186348,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583828821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583828821","product_id":100039001,"comment_content":"课后题<br>2.利用工厂，将组装的对象封装进去，通过工厂调用","like_count":0},{"had_liked":false,"id":185862,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1583715917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583715917","product_id":100039001,"comment_content":"1. 可以抽象出一个接口或者AbstractReporter类，把共同的逻辑放到这个类中；<br>2. 用工程方法解决","like_count":0},{"had_liked":false,"id":185518,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1583597796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583597796","product_id":100039001,"comment_content":"1、大函数拆分为独立小函数（大功能拆分成独立小功能），解耦和单一<br>2、重复代码抽象成继承子类关系，复用<br>3、组合类解决拆分后的流程","like_count":0},{"had_liked":false,"id":185461,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583587260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583587260","product_id":100039001,"comment_content":"ConsoleReporter和EmailReporter可以抽象出一个抽象类，通用的地方复用，然后传不同的行为进去。","like_count":0},{"had_liked":false,"id":184752,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583396191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583396191","product_id":100039001,"comment_content":"首先回答第二个问题,对于创建不叫复杂的类,我们可以考虑使用工厂类设计模式,来进行处理,将一些固定不变的类放在工厂类创建,尽可能缩小传入的参数,如果是使用了依赖注入框架,那么也可以交由框架进行组合创建注入<br>然后是第一个问题,既然我们的viewer已经实现了相同的接口,那么为什么不能继续抽象,抽象出另一个接口,reporterTask接口中,存在对应的定时发送的任务,传入对应的viewer和参数,然后对应不同的发送,实现不同的reporterTask接口呢?","like_count":0},{"had_liked":false,"id":183672,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1583114011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583114011","product_id":100039001,"comment_content":"1. 可以提取出一的 Reporter 抽象类，将公共的执行逻辑放在 Reporter 中，Reporter 可以定义一个抽象的方法供 EmailReporter和ConsoleReporter重写，实现其具体的业务逻辑。","like_count":0},{"had_liked":false,"id":179913,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582120980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582120980","product_id":100039001,"comment_content":"最后一张图很强大！","like_count":0},{"had_liked":false,"id":177203,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1581320700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581320700","product_id":100039001,"comment_content":"打卡, 看完一遍感觉理解不太深刻, 打算抽时间手敲一遍, 加深理解","like_count":0},{"had_liked":false,"id":177126,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1581298554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581298554","product_id":100039001,"comment_content":"结构清晰是关键","like_count":0}]}