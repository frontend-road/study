{"id":70562,"title":"08 | 事务到底是隔离的还是不隔离的？","content":"<blockquote>\n<p>你好，我是林晓斌。<br>\n你现在看到的这篇文章是我重写过的。在第一版文章发布之后，我发现在介绍事务可见性规则时，由于引入了太多概念，导致理解起来很困难。随后，我索性就重写了这篇文章。<br>\n现在的用户留言中，还能看到第一版文章中引入的up_limit_id的概念，为了避免大家产生误解，再此特地和大家事先说明一下。</p>\n</blockquote><p>我在第3篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务T启动的时候会创建一个视图read-view，之后事务T执行期间，即使有其他事务修改了数据，事务T看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。</p><p>但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务要更新一行，如果刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？</p><p>我给你举一个例子吧。下面是一个只有两行的表的初始化语句。</p><pre><code>mysql&gt; CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `k` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, k) values(1,1),(2,2);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/82/d6/823acf76e53c0bdba7beab45e72e90d6.png?wh=910*509\" alt=\"\"></p><center>图1 事务A、B、C的执行流程</center><p>这里，我们需要注意的是事务的启动时机。</p><p>begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作InnoDB表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用start transaction with consistent snapshot 这个命令。</p><!-- [[[read_end]]] --><blockquote>\n<p>第一种启动方式，一致性视图是在执行第一个快照读语句时创建的；<br>\n第二种启动方式，一致性视图是在执行start transaction with consistent snapshot时创建的。</p>\n</blockquote><p>还需要注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认autocommit=1。</p><p>在这个例子中，事务C没有显式地使用begin/commit，表示这个update语句本身就是一个事务，语句完成的时候会自动提交。事务B在更新了行之后查询; 事务A在一个只读事务中查询，并且时间顺序上是在事务B的查询之后。</p><p>这时，如果我告诉你事务B查到的k的值是3，而事务A查到的k的值是1，你是不是感觉有点晕呢？</p><p>所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对InnoDB的事务和锁有更进一步的理解。</p><p>在MySQL里，有两个“视图”的概念：</p><ul>\n<li>一个是view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是create view … ，而它的查询方法与表一样。</li>\n<li>另一个是InnoDB在实现MVCC时用到的一致性读视图，即consistent read view，用于支持RC（Read Committed，读提交）和RR（Repeatable Read，可重复读）隔离级别的实现。</li>\n</ul><p>它没有物理结构，作用是事务执行期间用来定义“我能看到什么数据”。</p><p>在第3篇文章<a href=\"https://time.geekbang.org/column/article/68963\">《事务隔离：为什么你改了我还看不见？》</a>中，我跟你解释过一遍MVCC的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把read view拆开。你可以结合这两篇文章的说明来更深一步地理解MVCC。</p><h1>“快照”在MVCC里是怎么工作的？</h1><p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p><p>这时，你会说这看上去不太现实啊。如果一个库有100G，那么我启动一个事务，MySQL就要拷贝100G的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。</p><p>实际上，我们并不需要拷贝出这100G的数据。我们先来看看这个快照是怎么实现的。</p><p>InnoDB里面每个事务有一个唯一的事务ID，叫作transaction id。它是在事务开始的时候向InnoDB的事务系统申请的，是按申请顺序严格递增的。</p><p>而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把transaction id赋值给这个数据版本的事务ID，记为row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p><p>也就是说，数据表中的一行记录，其实可能有多个版本(row)，每个版本有自己的row trx_id。</p><p>如图2所示，就是一个记录被多个事务连续更新后的状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/ed/68d08d277a6f7926a41cc5541d3dfced.png?wh=1142*856\" alt=\"\"></p><center>图2 行状态变更图</center><p>图中虚线框里是同一行数据的4个版本，当前最新版本是V4，k的值是22，它是被transaction id 为25的事务更新的，因此它的row trx_id也是25。</p><p>你可能会问，前面的文章不是说，语句更新会生成undo log（回滚日志）吗？那么，<strong>undo log在哪呢？</strong></p><p>实际上，图2中的三个虚线箭头，就是undo log；而V1、V2、V3并不是物理上真实存在的，而是每次需要的时候根据当前版本和undo log计算出来的。比如，需要V2的时候，就是通过V4依次执行U3、U2算出来。</p><p>明白了多版本和row trx_id的概念后，我们再来想一下，InnoDB是怎么定义那个“100G”的快照的。</p><p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。</p><p>因此，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。</p><p>当然，如果“上一个版本”也不可见，那就得继续往前找。还有，如果是这个事务自己更新的数据，它自己还是要认的。</p><p>在实现上， InnoDB为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务ID。“活跃”指的就是，启动了但还没提交。</p><p>数组里面事务ID的最小值记为低水位，当前系统里面已经创建过的事务ID的最大值加1记为高水位。</p><p>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。</p><p>而数据版本的可见性规则，就是基于数据的row trx_id和这个一致性视图的对比结果得到的。</p><p>这个视图数组把所有的row trx_id 分成了几种不同的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/5e/882114aaf55861832b4270d44507695e.png?wh=1142*856\" alt=\"\"></p><center>图3 数据版本可见性规则</center><p>这样，对于当前事务的启动瞬间来说，一个数据版本的row trx_id，有以下几种可能：</p><ol>\n<li>\n<p>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；</p>\n</li>\n<li>\n<p>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；</p>\n</li>\n<li>\n<p>如果落在黄色部分，那就包括两种情况<br>\na.  若 row trx_id在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>\nb.  若 row trx_id不在数组中，表示这个版本是已经提交了的事务生成的，可见。</p>\n</li>\n</ol><p>比如，对于图2中的数据来说，如果有一个事务，它的低水位是18，那么当它访问这一行数据时，就会从V4通过U3计算出V3，所以在它看来，这一行的值是11。</p><p>你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，生成的版本一定属于上面的2或者3(a)的情况，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。</p><p>所以你现在知道了，<strong>InnoDB利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</strong></p><p>接下来，我们继续看一下图1中的三个事务，分析下事务A的语句返回的结果，为什么是k=1。</p><p>这里，我们不妨做如下假设：</p><ol>\n<li>\n<p>事务A开始前，系统里面只有一个活跃事务ID是99；</p>\n</li>\n<li>\n<p>事务A、B、C的版本号分别是100、101、102，且当前系统里只有这四个事务；</p>\n</li>\n<li>\n<p>三个事务开始前，(1,1）这一行数据的row trx_id是90。</p>\n</li>\n</ol><p>这样，事务A的视图数组就是[99,100], 事务B的视图数组是[99,100,101], 事务C的视图数组是[99,100,101,102]。</p><p>为了简化分析，我先把其他干扰语句去掉，只画出跟事务A查询逻辑有关的操作：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/49/9416c310e406519b7460437cb0c5c149.png?wh=1142*856\" alt=\"\"></p><center>图4 事务A查询数据逻辑图</center><p>从图中可以看到，第一个有效更新是事务C，把数据从(1,1)改成了(1,2)。这时候，这个数据的最新版本的row trx_id是102，而90这个版本已经成为了历史版本。</p><p>第二个有效更新是事务B，把数据从(1,2)改成了(1,3)。这时候，这个数据的最新版本（即row trx_id）是101，而102又成为了历史版本。</p><p>你可能注意到了，在事务A查询的时候，其实事务B还没有提交，但是它生成的(1,3)这个版本已经变成当前版本了。但这个版本对事务A必须是不可见的，否则就变成脏读了。</p><p>好，现在事务A要来读数据了，它的视图数组是[99,100]。当然了，读数据都是从当前版本读起的。所以，事务A查询语句的读数据流程是这样的：</p><ul>\n<li>找到(1,3)的时候，判断出row trx_id=101，比高水位大，处于红色区域，不可见；</li>\n<li>接着，找到上一个历史版本，一看row trx_id=102，比高水位大，处于红色区域，不可见；</li>\n<li>再往前找，终于找到了（1,1)，它的row trx_id=90，比低水位小，处于绿色区域，可见。</li>\n</ul><p>这样执行下来，虽然期间这一行数据被修改过，但是事务A不论在什么时候查询，看到这行数据的结果都是一致的，所以我们称之为一致性读。</p><p>这个判断规则是从代码逻辑直接转译过来的，但是正如你所见，用于人肉分析可见性很麻烦。</p><p>所以，我来给你翻译一下。一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：</p><ol>\n<li>\n<p>版本未提交，不可见；</p>\n</li>\n<li>\n<p>版本已提交，但是是在视图创建后提交的，不可见；</p>\n</li>\n<li>\n<p>版本已提交，而且是在视图创建前提交的，可见。</p>\n</li>\n</ol><p>现在，我们用这个规则来判断图4中的查询结果，事务A的查询语句的视图数组是在事务A启动的时候生成的，这时候：</p><ul>\n<li>(1,3)还没提交，属于情况1，不可见；</li>\n<li>(1,2)虽然提交了，但是是在视图数组创建之后提交的，属于情况2，不可见；</li>\n<li>(1,1)是在视图数组创建之前提交的，可见。</li>\n</ul><p>你看，去掉数字对比后，只用时间先后顺序来判断，分析起来是不是轻松多了。所以，后面我们就都用这个规则来分析。</p><h1>更新逻辑</h1><p>细心的同学可能有疑问了：<strong>事务B的update语句，如果按照一致性读，好像结果不对哦？</strong></p><p>你看图5中，事务B的视图数组是先生成的，之后事务C才提交，不是应该看不见(1,2)吗，怎么能算出(1,3)来？</p><p><img src=\"https://static001.geekbang.org/resource/image/86/9f/86ad7e8abe7bf16505b97718d8ac149f.png?wh=1142*856\" alt=\"\"></p><center>图5 事务B更新逻辑图</center><p>是的，如果事务B在更新之前查询一次数据，这个查询返回的k的值确实是1。</p><p>但是，当它要去更新数据的时候，就不能再在历史版本上更新了，否则事务C的更新就丢失了。因此，事务B此时的set k=k+1是在（1,2）的基础上进行的操作。</p><p>所以，这里就用到了这样一条规则：<strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。</strong></p><p>因此，在更新的时候，当前读拿到的数据是(1,2)，更新后生成了新版本的数据(1,3)，这个新版本的row trx_id是101。</p><p>所以，在执行事务B查询语句的时候，一看自己的版本号是101，最新数据的版本号也是101，是自己的更新，可以直接使用，所以查询得到的k的值是3。</p><p>这里我们提到了一个概念，叫作当前读。其实，除了update语句外，select语句如果加锁，也是当前读。</p><p>所以，如果把事务A的查询语句select * from t where id=1修改一下，加上lock in share mode 或 for update，也都可以读到版本号是101的数据，返回的k的值是3。下面这两个select语句，就是分别加了读锁（S锁，共享锁）和写锁（X锁，排他锁）。</p><pre><code>mysql&gt; select k from t where id=1 lock in share mode;\nmysql&gt; select k from t where id=1 for update;\n</code></pre><p>再往前一步，假设事务C不是马上提交的，而是变成了下面的事务C’，会怎么样呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/6e/cda2a0d7decb61e59dddc83ac51efb6e.png?wh=906*565\" alt=\"\"></p><center>图6 事务A、B、C'的执行流程</center><p>事务C’的不同是，更新后并没有马上提交，在它提交前，事务B的更新语句先发起了。前面说过了，虽然事务C’还没提交，但是(1,2)这个版本也已经生成了，并且是当前的最新版本。那么，事务B的更新语句会怎么处理呢？</p><p>这时候，我们在上一篇文章中提到的“两阶段锁协议”就要上场了。事务C’没提交，也就是说(1,2)这个版本上的写锁还没释放。而事务B是当前读，必须要读最新版本，而且必须加锁，因此就被锁住了，必须等到事务C’释放这个锁，才能继续它的当前读。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/92/540967ea905e8b63630e496786d84c92.png?wh=1142*856\" alt=\"\"></p><center>图7 事务B更新逻辑图（配合事务C'）</center><p>到这里，我们把一致性读、当前读和行锁就串起来了。</p><p>现在，我们再回到文章开头的问题：<strong>事务的可重复读的能力是怎么实现的？</strong></p><p>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p><p>而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：</p><ul>\n<li>在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；</li>\n<li>在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。</li>\n</ul><p>那么，我们再看一下，在读提交隔离级别下，事务A和事务B的查询语句查到的k，分别应该是多少呢？</p><p>这里需要说明一下，“start transaction with consistent snapshot; ”的意思是从这个语句开始，创建一个持续整个事务的一致性快照。所以，在读提交隔离级别下，这个用法就没意义了，等效于普通的start transaction。</p><p>下面是读提交时的状态图，可以看到这两个查询语句的创建视图数组的时机发生了变化，就是图中的read view框。（注意：这里，我们用的还是事务C的逻辑直接提交，而不是事务C’）</p><p><img src=\"https://static001.geekbang.org/resource/image/18/be/18fd5179b38c8c3804b313c3582cd1be.jpg?wh=1142*856\" alt=\"\"></p><center>图8 读提交隔离级别下的事务状态图</center><p>这时，事务A的查询语句的视图数组是在执行这个语句的时候创建的，时序上(1,2)、(1,3)的生成时间都在创建这个视图数组的时刻之前。但是，在这个时刻：</p><ul>\n<li>(1,3)还没提交，属于情况1，不可见；</li>\n<li>(1,2)提交了，属于情况3，可见。</li>\n</ul><p>所以，这时候事务A查询语句返回的是k=2。</p><p>显然地，事务B查询结果k=3。</p><h1>小结</h1><p>InnoDB的行数据有多个版本，每个数据版本有自己的row trx_id，每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据row trx_id和一致性视图确定数据版本的可见性。</p><ul>\n<li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；</li>\n<li>对于读提交，查询只承认在语句启动前就已经提交完成的数据；</li>\n</ul><p>而当前读，总是读取已经提交完成的最新版本。</p><p>你也可以想一下，为什么表结构不支持“可重复读”？这是因为表结构没有对应的行数据，也没有row trx_id，因此只能遵循当前读的逻辑。</p><p>当然，MySQL 8.0已经可以把表结构放在InnoDB字典里了，也许以后会支持表结构的可重复读。</p><p>又到思考题时间了。我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有“字段c和id值相等的行”的c值清零，但是却发现了一个“诡异”的、改不掉的情况。请你构造出这种情况，并说明其原理。</p><pre><code>mysql&gt; CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert into t(id, c) values(1,1),(2,2),(3,3),(4,4);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/9b/0b/9b8fe7cf88c9ba40dc12e93e36c3060b.png?wh=486*661\" alt=\"\"><br>\n复现出来以后，请你再思考一下，在实际的业务开发中有没有可能碰到这种情况？你的应用代码会不会掉进这个“坑”里，你又是怎么解决的呢？</p><p>你可以把你的思考和观点写在留言区里，我会在下一篇文章的末尾和你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><h1>上期问题时间</h1><p>我在上一篇文章最后，留给你的问题是：怎么删除表的前10000行。比较多的留言都选择了第二种方式，即：在一个连接中循环执行20次 delete from T limit 500。</p><p>确实是这样的，第二种方式是相对较好的。</p><p>第一种方式（即：直接执行delete from T limit 10000）里面，单个语句占用时间长，锁的时间也比较长；而且大事务还会导致主从延迟。</p><p>第三种方式（即：在20个连接中同时执行delete from T limit 500），会人为造成锁冲突。</p><p>评论区留言点赞板：</p><blockquote>\n<p>@Tony Du的评论，详细而且准确。<br>\n@Knight²º¹⁸ 提到了如果可以加上特定条件，将这10000行天然分开，可以考虑第三种。是的，实际上在操作的时候我也建议你尽量拿到ID再删除。<br>\n@荒漠甘泉 提了一个不错的问题，大家需要区分行锁、MDL锁和表锁的区别。对InnoDB表更新一行，可能过了MDL关，却被挡在行锁阶段。</p>\n</blockquote>","neighbors":{"left":{"article_title":"07 | 行锁功过：怎么减少行锁对性能的影响？","id":70215},"right":{"article_title":"09 | 普通索引和唯一索引，应该怎么选择？","id":70848}},"comments":[{"had_liked":false,"id":45211,"user_name":"夏日雨","can_delete":false,"product_type":"c1","uid":1117422,"ip_address":"","ucode":"D8066F89D3A8A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/ee/7667642c.jpg","comment_is_top":true,"comment_ctime":1543561271,"is_pvip":false,"replies":[{"id":"16101","content":"你的问题被引用最多，我回复你哈，其它同学看过来😄<br><br>好吧，今天的课后问题其实比较简单，本来是隐藏在思考题里的彩蛋，被你问出来了哈。<br><br>Innodb 要保证这个规则：事务启动以前所有还没提交的事务，它都不可见。<br><br>但是只存一个已经提交事务的最大值是不够的。 因为存在一个问题，那些比最大值小的事务，之后也可能更新（就是你说的98这个事务）<br><br>所以事务启动的时候还要保存“现在正在执行的所有事物ID列表”，如果一个row trx_id在这列表中，也要不可见。<br><br>虽然踩破了彩蛋，还是赞你的思考哈，置顶让大家学习😄","user_name":"作者回复","comment_id":45211,"uid":"1264162","ip_address":"","utype":1,"ctime":1543592961,"user_name_real":"林晓斌"}],"discussion_count":39,"race_medal":0,"score":"9.2233735072771994e+18","product_id":100020801,"comment_content":"老师你好，有个问题不太理解，对于文中的例子假设transaction id为98的事务在事务A执行select（Q2）之前更新了字段，那么事务A发现这个字段的row trx_id是98，比自己的up_limit_id要小，那此时事务A不就获取到了transaction id为98的事务更新后的值了吗？<br>换句话说对于文中&quot;之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id&quot;这句话不太理解， up_limit_id是已经提交事务id的最大值，那也可能存在一个没有提交的id小于up_limit_id的事务对数据进行更新？还是说transaction id比up_limit_id小的事务都是保证已经提交的？","like_count":342,"discussions":[{"author":{"id":2762605,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VCibicCsgOTaavtUD2r42e13IH57YosJTliaAI3mDloZNVnDpAoDQplD4r1KCalGObRSAPQZ791iblGSxnicuVwNacg/132","nickname":"Geek_fcd697","note":"","ucode":"EABE04EF8D698C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403890,"discussion_content":"1. 事务ID是根据启动时间递增的，事务ID越大，启动越迟。但事务提交时间与ID（或者说启动时间）无关，事务ID小的，也可以提前提交\n2. 例子：【99 100 101 102】 事务ID按启动时间递增，但是提交时间与ID无关，假设事务101已提交，其余未提交。\n3. 考虑创建事务100一致性视图时，\n创建一致性视图时，分为三部分：\n绿色部分：事务创建前已提交的最大事务及当前事务 ：如已提交的101和当前事务100\n黄色部分：活跃事务列表，即视图创建前尚未提交 如【99 102】\n红色部分：未启动事务，如【103， 104】\n    低水位是 活跃列表中未提交的ID 最小的事务，如 99（注意而非101的事务!!!），低于这个ID的事务都是已提交的\n     高水位是103 尚未开始\n4. 考虑创建事务100一致性视图时，其他row trx_id版本事务对事务100 是否可见：\n（a）row trx_id < 99, 落在绿色部分，版本已提交，且在视图创建且提交， 是可见的（如95）\n（b）row trx_id >= 103 落在红色，不可见\n（c） row_trx_id >=99 且<=102. 落在黄色部分，则要判断row_trx_id 是否在活跃列表里，上例活跃列表为【99、 102】:\n         row_trx_id = 99\\102 在活跃列表，属于视图100创建前 未提交，不可见\n         row_trx_id = 100\\101 不在活跃列表，在绿色部分，属于视图创建前提交的，或者属于当前事务，可见\n\n\n","likes_number":44,"is_delete":false,"is_hidden":false,"ctime":1634178340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1105958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","nickname":"猫头鹰爱拿铁","note":"","ucode":"24266B58968428","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2762605,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VCibicCsgOTaavtUD2r42e13IH57YosJTliaAI3mDloZNVnDpAoDQplD4r1KCalGObRSAPQZ791iblGSxnicuVwNacg/132","nickname":"Geek_fcd697","note":"","ucode":"EABE04EF8D698C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539238,"discussion_content":"说的很清楚很有条理，让我茅塞顿开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639646302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":403890,"ip_address":""},"score":539238,"extra":""},{"author":{"id":2743848,"avatar":"https://static001.geekbang.org/account/avatar/00/29/de/28/5d9b85df.jpg","nickname":"T","note":"","ucode":"880813CB38329E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","nickname":"猫头鹰爱拿铁","note":"","ucode":"24266B58968428","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":555724,"discussion_content":"谢谢，总算弄明白了，不过这个事务ID小的，也可以提前提交；应该改成事物id大的，也可以先提交","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647048588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539238,"ip_address":""},"score":555724,"extra":""},{"author":{"id":1120547,"avatar":"https://static001.geekbang.org/account/avatar/00/11/19/23/849beae4.jpg","nickname":"高山高","note":"","ucode":"4F1D91E3C3FBB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2762605,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VCibicCsgOTaavtUD2r42e13IH57YosJTliaAI3mDloZNVnDpAoDQplD4r1KCalGObRSAPQZ791iblGSxnicuVwNacg/132","nickname":"Geek_fcd697","note":"","ucode":"EABE04EF8D698C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571186,"discussion_content":"写的真好！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652105097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":403890,"ip_address":""},"score":571186,"extra":""}]},{"author":{"id":1801058,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/62/ec94cee4.jpg","nickname":"彭文达","note":"","ucode":"8DCC27EC5AF263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359081,"discussion_content":"散了散了，我还以为我懵逼了😂","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1616115687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235441,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d9/f1/a00711f8.jpg","nickname":"X  W  z","note":"","ucode":"915BA1CF6090F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341761,"discussion_content":"1、此文应该没有这个问题吧（现在）,评论中的问题对应了活跃数组。\n2、这个评论对应的可能是最初版的课程（这个课程可能没有这个表述），后来作者修正了。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1610514352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2276157,"avatar":"","nickname":"Geek_8e10bb","note":"","ucode":"DE2A23E8A96725","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1235441,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d9/f1/a00711f8.jpg","nickname":"X  W  z","note":"","ucode":"915BA1CF6090F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346225,"discussion_content":"我也觉得好像没有这个问题，看得一脸懵。现在的文章里说数组中存的是：所有启动了但未提交的事务","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611890232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341761,"ip_address":""},"score":346225,"extra":""},{"author":{"id":1885105,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDLwebZ5QuDYh5MkGtbglXWs2FBCKV5DZkZ0eJwH7wezc5ianGHJUJJ5qvGnuic9QFpMaCeMD8khIQ/132","nickname":"刘小刀","note":"","ucode":"D7F2F6F10439F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2276157,"avatar":"","nickname":"Geek_8e10bb","note":"","ucode":"DE2A23E8A96725","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381870,"discussion_content":"作者重新写了这篇，他们看的是老版本","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625270614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":346225,"ip_address":""},"score":381870,"extra":""}]},{"author":{"id":1293877,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/35/dd79037e.jpg","nickname":"a...Z","note":"","ucode":"5A5A44903785FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63786,"discussion_content":"我觉得是这样的,不对之处,请指出,事务的id是严格递增的.在进行一致性非锁定读的时候,select 有两个条件,1.事务创建id <=当前事务id,保证了是事务开启前提交的和自己事务提交的.2.查询删除版本号为空,或者删除版本号大于当前事务id的,保证获取的行数据不是在次事务版本号以前修改的的,这样就不会产生这个问题了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574910683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430960,"discussion_content":"你的问题被引用最多，我回复你哈，其它同学看过来😄\n\n好吧，今天的课后问题其实比较简单，本来是隐藏在思考题里的彩蛋，被你问出来了哈。\n\nInnodb 要保证这个规则：事务启动以前所有还没提交的事务，它都不可见。\n\n但是只存一个已经提交事务的最大值是不够的。 因为存在一个问题，那些比最大值小的事务，之后也可能更新（就是你说的98这个事务）\n\n所以事务启动的时候还要保存“现在正在执行的所有事物ID列表”，如果一个row trx_id在这列表中，也要不可见。\n\n虽然踩破了彩蛋，还是赞你的思考哈，置顶让大家学习😄","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1543592961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1202105,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/b9/5b317572.jpg","nickname":"超","note":"","ucode":"F33DC41DEC04AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535023,"discussion_content":"老师,不太明白您说的.“正在执行的所有事务id列表”,和上文中说的 活跃数组应该是一样的吧\n按照上面的知识,活跃数组为已启动未提交事务id的数组.  不可能存在A活跃数组[99,100]确定,还存在98之后再更新的问题吧,不然A的活跃数组应该为[98,99,100]了.","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638332587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":430960,"ip_address":""},"score":535023,"extra":""},{"author":{"id":2627775,"avatar":"https://static001.geekbang.org/account/avatar/00/28/18/bf/d4875382.jpg","nickname":"多寻","note":"","ucode":"489D955CF7EC42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1202105,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/b9/5b317572.jpg","nickname":"超","note":"","ucode":"F33DC41DEC04AB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542815,"discussion_content":"对, 我也是这么问题, 感觉老师讲的前后矛盾, 高水位不应该在数组中,应该是独立在数组之外的概念, 后面的图 ,它又莫名奇妙的包含在了数组中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640853148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535023,"ip_address":""},"score":542815,"extra":""}]},{"author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337298,"discussion_content":"靠，up_limit_id原来是低水位，终于懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608865757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2225284,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kO8FVqlcKxoFgFiaGpDSr3qtAb2wprviaVknOiaAtqedKPTmyk3nFRXcZXqEQR3kibClvscwKB5MZDoKIibKhH07KicA/132","nickname":"Geek_e4aacf","note":"","ucode":"CB7D1566C2D415","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344427,"discussion_content":"我还以为是高水位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611461035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337298,"ip_address":""},"score":344427,"extra":""},{"author":{"id":2615876,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ea/44/b6c628c6.jpg","nickname":"Geek_yb","note":"","ucode":"850ED56C2FE196","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373775,"discussion_content":"靠 ，谢了兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620870273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337298,"ip_address":""},"score":373775,"extra":""},{"author":{"id":1242497,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/81/92d01e3a.jpg","nickname":"Sean","note":"","ucode":"2521FB6292F304","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383218,"discussion_content":"问题说up_limit_id说的是已经提交事务最大ID，文章老师说的是低水位是 视图数组的最小值，是未提交的。这两个能不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625994733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337298,"ip_address":""},"score":383218,"extra":""}]},{"author":{"id":1721278,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAhj2fB8NI2TPI1SNicgiciczuMUHyAb9HHBkkKJHrgtR162fsicaTqdAneHfuVX7icDXaVibDHstM9L47g/132","nickname":"Geek_0c1732","note":"","ucode":"6276D0412CCE51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326579,"discussion_content":"对于可重复读事务，事务开启时创建读视图，记录当前活跃的事务ID，凡属这个读视图中的事务ID提交的数据对于当前事务都不可见。但是对于已提交读的事务，每次查询时创建一个读视图，因此在查询语句查询之前其他事务提交的数据都可见","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605620230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2278559,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c4/9f/a01e4bd1.jpg","nickname":"海浪","note":"","ucode":"091941B3556B4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325621,"discussion_content":"所以事务启动的时候还要保存“现在正在执行的所有事物ID列表”--我觉得这句话应该改成：所以【一致性视图】启动的时候还要保存“现在正在执行的所有事物ID列表”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605365881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100228,"discussion_content":"3a 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577243622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821728,"avatar":"","nickname":"600988292","note":"","ucode":"24BAE2B7A7B1E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536185,"discussion_content":"看的我一脸懵逼 98在哪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638711482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032000,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bf/40/94eaca1b.jpg","nickname":"wei","note":"","ucode":"8B14D27AE7C54E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394166,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631763012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655117,"avatar":"https://static001.geekbang.org/account/avatar/00/19/41/4d/f6d6d13a.jpg","nickname":"啊良梓是我","note":"","ucode":"E42FC1A60D331C","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337320,"discussion_content":"按照判断规则：他是在视图创建之后提交的所以不可见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608873118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113915,"avatar":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","nickname":"致良知","note":"","ucode":"73C722E31B726A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332640,"discussion_content":"太难了 评论这还是再多读几遍吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607278527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/71/b8c99cf5.jpg","nickname":"Mr.Li","note":"","ucode":"6BBFE118103125","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298619,"discussion_content":"我有个疑问这个没提交的事务98，会不会出现在数组里？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597364749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/71/b8c99cf5.jpg","nickname":"Mr.Li","note":"","ucode":"6BBFE118103125","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301879,"discussion_content":"会出现。\n因为事务ID虽然在生成的时候保证了有序递增，但每个事务的生命周期是不确定的，所以，可能出现，虽然落在高、低水位之间，但却是已经提交了的事务，这时就需要根据活跃数组中具体的值来判断是否是在生成当前事务之前就已经提交的事务。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1598692565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298619,"ip_address":""},"score":301879,"extra":""},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/71/b8c99cf5.jpg","nickname":"Mr.Li","note":"","ucode":"6BBFE118103125","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301882,"discussion_content":"你其实还可以思考下，为什么不直接判断该事务ID是否存在于活跃事务数组中呢？这样还简便得多呀！\n     确实，这样实现起来简单，但效率不行。上述方式，虽然实现和理解起来稍微复杂，但效率很高，实现它的一个前提条件就是事务ID要根据创建时间有序递增，才能快速鉴别出一定可见和一定不可见的情况（情况1、2）。其实我觉得实现的原理思想和布隆过滤器的思想很相似，先快速鉴别出一定可见和不可见的数据（第1、2种），然后对于可能可见和可能不可见的数据（第3种）通过活跃数组进行精确判断。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598692632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298619,"ip_address":""},"score":301882,"extra":""},{"author":{"id":1962297,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","nickname":"恶魔果实","note":"","ucode":"691CD833C984AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/71/b8c99cf5.jpg","nickname":"Mr.Li","note":"","ucode":"6BBFE118103125","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303355,"discussion_content":"所以InnoDB的隔离级别到底是用锁 还是 MVCC实现的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599215373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298619,"ip_address":""},"score":303355,"extra":""}]},{"author":{"id":2039495,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1e/c7/27867465.jpg","nickname":"TPL","note":"","ucode":"F221C524734475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283194,"discussion_content":"在进行update操作的时候，InnoDB会进行两个操作：1、插入一行新纪录，保存当前系统版本号作为行版本号 2、同时保存当前系统版本号到原来的行作为行删除标志。\n那么查询的时候，查询的范围为版本小于当前事务版本并且删除版本未定义或者删除版本大于事务版本。这样98就不会被看见了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592208810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2039495,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1e/c7/27867465.jpg","nickname":"TPL","note":"","ucode":"F221C524734475","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576298,"discussion_content":"说的啥玩意儿...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655404237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":283194,"ip_address":""},"score":576298,"extra":""}]},{"author":{"id":1109323,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/4b/0ddfa9ad.jpg","nickname":"小刚z","note":"","ucode":"7453F096F6631C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272410,"discussion_content":"现在正在执行的所有事物ID列表 这句话的意思是不是就是上面提到的活跃数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590301819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109323,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/4b/0ddfa9ad.jpg","nickname":"小刚z","note":"","ucode":"7453F096F6631C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301880,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598692568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":272410,"ip_address":""},"score":301880,"extra":""}]}]},{"had_liked":false,"id":44975,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":true,"comment_ctime":1543537154,"is_pvip":false,"replies":[{"id":"16012","content":"早<br><br>赞<br><br>置顶了<br><br>明天课后问题时间直接指针引用了哈😄<br><br>补充一下：上面说的“如果失败就重新起一个事务”，里面判断是否成功的标准是 affected_rows 是不是等于预期值。 <br>比如我们这个例子里面预期值本来是4，当然实际业务中这种语句一般是匹配唯一主键，所以预期住值一般是1。<br><br>","user_name":"作者回复","comment_id":44975,"uid":"1264162","ip_address":"","utype":1,"ctime":1543537849,"user_name_real":"林晓斌"}],"discussion_count":44,"race_medal":0,"score":"9.2233729618162995e+18","product_id":100020801,"comment_content":"早。<br>思考题，RR下，用另外一个事物在update执行之前，先把所有c值修改，应该就可以。比如update t set c = id + 1。<br>这个实际场景还挺常见——所谓的“乐观锁”。时常我们会基于version字段对row进行cas式的更新，类似update ...set ... where id = xxx and version = xxx。如果version被其他事务抢先更新，则在自己事务中更新失败，trx_id没有变成自身事务的id，同一个事务中再次select还是旧值，就会出现“明明值没变可就是更新不了”的“异象”（anomaly）。解决方案就是每次cas更新不管成功失败，结束当前事务。如果失败则重新起一个事务进行查询更新。<br>记得某期给老师留言提到了，似乎只有MySQL是在一致性视图下采用这种宽松的update机制。也许是考虑易用性吧。其他数据库大多在内部实现cas，只是失败后下一步动作有区别。","like_count":215,"discussions":[{"author":{"id":1110522,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7x045Wg58RRz5Tl2SDd6tVmII34Yub4KupAAc3mMInBREsRmGzregkqMyTjKcmprgnznGusLGCScTCTvfxJPpg/132","nickname":"Geek_7bfa8b","note":"","ucode":"7ED7F2DE53C39B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384279,"discussion_content":"这让我想起了我们项目里面的很多问题啊？大家看看是不是？比如说一个方法开启了一个事务，在开始的时候取select出值，然后后面再用乐观锁update，但是并没有看影响的行数。。。然后继续一连串的查询数据出来继续操作，过后再完成这个事务方法。那是不是非常容易出现这种旧数据问题啊？","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1626478502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293877,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/35/dd79037e.jpg","nickname":"a...Z","note":"","ucode":"5A5A44903785FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63794,"discussion_content":"意思应该是这样的,乐观锁机制就是版本号一致才可以进行操作数据,selelct的时候是版本A,update的时候新事务,版本号为B,这个时候update的时候,版本号version B !=A,所以更新不成功,如果先update c之后将版本号提升为次事务的版本号,这时候version B=B,可以更新成功\n","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1574911176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331822,"discussion_content":"用另外一个事物在update执行之前，先把所有c值修改，应该就可以。比如update t set c = id + 1。 与题目中最后c列的值不一致，不严谨， 后面需要在set c = 0 执行后，使用 update t set c = id ，重新改回来","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1606987165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1809686,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/16/a2fb8136.jpg","nickname":"季某人","note":"","ucode":"1EEF2A58C3BD79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350010,"discussion_content":"没毛病","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613658686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331822,"ip_address":""},"score":350010,"extra":""},{"author":{"id":2417787,"avatar":"","nickname":"He1senber9","note":"","ucode":"F4C626E78EC087","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350509,"discussion_content":"最后C列的值是A事务中的select的结果，而这个结果是基于A的快照读（不是当前读）。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1613898908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331822,"ip_address":""},"score":350509,"extra":""}]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430886,"discussion_content":"早\n\n赞\n\n置顶了\n\n明天课后问题时间直接指针引用了哈😄\n\n补充一下：上面说的“如果失败就重新起一个事务”，里面判断是否成功的标准是 affected_rows 是不是等于预期值。 \n比如我们这个例子里面预期值本来是4，当然实际业务中这种语句一般是匹配唯一主键，所以预期住值一般是1。\n\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1543537849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095174,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b6/06/2d7bed7b.jpg","nickname":"beacon","note":"","ucode":"40B688BA69724A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360509,"discussion_content":"里面判断是否成功的标准是 affected_rows 是不是等于预期值。 老师说的这个是第一次select后然后update的affected_rows应该是第一次select的值，然后由于其他事务更新导致affected_rows变了所以更新失败，trx_id没有更新，所以还是第二次select的trx_id还是快照度的trx_id","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616466638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2123257,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhqDU299SMLoEGMpJYFXtuwiadG0Friaia4fyu2ZJBokpTsTIpibouicaz9JItEYS1EAhLCqB0S3HWA3A/132","nickname":"Geek_1bd897","note":"","ucode":"5EE4879CA5E35D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391831,"discussion_content":"不明白为啥叫乐观锁，update会加行锁啊，已经有锁了，为啥还叫乐观锁呢？乐观锁不是无锁吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630650897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2344355,"avatar":"","nickname":"Geek_e2e6da","note":"","ucode":"809A022858E748","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2123257,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhqDU299SMLoEGMpJYFXtuwiadG0Friaia4fyu2ZJBokpTsTIpibouicaz9JItEYS1EAhLCqB0S3HWA3A/132","nickname":"Geek_1bd897","note":"","ucode":"5EE4879CA5E35D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":393838,"discussion_content":"MVCC的本质是想实现乐观锁，但是在更新数据的时候由于二阶段提交，还是要加排他锁。所以只能说innoDB实现的MVCC并不是完全的，就是你所说的两者实际上是矛盾的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631614999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391831,"ip_address":""},"score":393838,"extra":""},{"author":{"id":1035612,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","nickname":"刘強","note":"","ucode":"B2E41BB894A727","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2123257,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhqDU299SMLoEGMpJYFXtuwiadG0Friaia4fyu2ZJBokpTsTIpibouicaz9JItEYS1EAhLCqB0S3HWA3A/132","nickname":"Geek_1bd897","note":"","ucode":"5EE4879CA5E35D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":576815,"discussion_content":"哈哈，update加的锁是数据库自己保证内部数据一致性，乐观锁是保证业务一致性的。也就是说，数据库加的锁并不能保证业务数据一致。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1655797754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391831,"ip_address":""},"score":576815,"extra":""}]},{"author":{"id":2351720,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e2/68/ce547a12.jpg","nickname":"zjm1314","note":"","ucode":"63B0EAB7045054","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340450,"discussion_content":"所以本质乐观锁也不是乐观锁，而是乐观的悲观锁，还是因为update会加行锁，所以下一个update要等待上一个update释放锁，释放锁后再当前读，那后一个update是被当前度阻塞了，还是当前读完后加锁阻塞了？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610009011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1963881,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGv4zdYM3t0W8S9gjW1pmaLs870wyxqcsnbEB91pBjZ6XbDdiafLkGxOEsdvkXYGQvdn3USbtC5pg/132","nickname":"Geek_62dccd","note":"","ucode":"95D166F059F824","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284738,"discussion_content":"加锁不是可以强制当前读么，share model不香么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592621420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1002317,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4b/4d/0239bc19.jpg","nickname":"益军","note":"","ucode":"5629FA62A01F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1963881,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGv4zdYM3t0W8S9gjW1pmaLs870wyxqcsnbEB91pBjZ6XbDdiafLkGxOEsdvkXYGQvdn3USbtC5pg/132","nickname":"Geek_62dccd","note":"","ucode":"95D166F059F824","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309342,"discussion_content":"我也是这么理解，一个事务内实现CAS，采用select .. lock in share mode ，比新事务轮询更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601262333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284738,"ip_address":""},"score":309342,"extra":""},{"author":{"id":1228424,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/88/8d15796f.jpg","nickname":"John","note":"","ucode":"A46AF2906C38C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1963881,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGv4zdYM3t0W8S9gjW1pmaLs870wyxqcsnbEB91pBjZ6XbDdiafLkGxOEsdvkXYGQvdn3USbtC5pg/132","nickname":"Geek_62dccd","note":"","ucode":"95D166F059F824","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310122,"discussion_content":"这个应该还是要看具体场景的。。。。不然乐观锁和悲观锁就没有并存的意义了。如果并发更新冲突更高，当然是乐观锁的代价更高。但是如果并发更新冲突并不高，相对来说每次参入更新操作条件计算的查询都直接加S锁也是一个可观的消耗，而且如果当前事务不提交，还会阻塞加了S锁的行的更新操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601631426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284738,"ip_address":""},"score":310122,"extra":""}]},{"author":{"id":1019332,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","nickname":"长期规划","note":"","ucode":"5EF65E9115834B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2681,"discussion_content":"在提交读模式下，应该不会出现老师文末提的那个问题吧？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563857450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1308783,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/6f/080973cf.jpg","nickname":"Edward","note":"","ucode":"10FAADF92D05F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019332,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","nickname":"长期规划","note":"","ucode":"5EF65E9115834B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6776,"discussion_content":"读提交模式下，update依旧失败，不过失败后的查询，看到的就是导致此次update失败那个事务修改后的数据","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1567093868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2681,"ip_address":""},"score":6776,"extra":""},{"author":{"id":1019332,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","nickname":"长期规划","note":"","ucode":"5EF65E9115834B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1308783,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/6f/080973cf.jpg","nickname":"Edward","note":"","ucode":"10FAADF92D05F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7136,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567398961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6776,"ip_address":""},"score":7136,"extra":""}]},{"author":{"id":2913796,"avatar":"","nickname":"Geek_5b7833","note":"","ucode":"E2D24A410416F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584326,"discussion_content":"既然都用了乐观锁了，为什么还要把乐观锁的代码放到事物里呢，使用乐观锁不就是为了不使用事物吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660750172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399498,"discussion_content":"如果失败就重新起一个事务进行更新，如果新的事务执行时再碰到这种情况 怎么办呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632975352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1101234,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/b2/807137b9.jpg","nickname":"北方易初","note":"","ucode":"C57FDBD37F43E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581203,"discussion_content":"都说了，重试了，你重试只重试 1 次呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658595314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":399498,"ip_address":""},"score":581203,"extra":""}]},{"author":{"id":2604432,"avatar":"https://static001.geekbang.org/account/avatar/00/27/bd/90/99ab3369.jpg","nickname":"局外人","note":"","ucode":"B8E2ED7A8ABE11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392119,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630842980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2689813,"avatar":"https://static001.geekbang.org/account/avatar/00/29/0b/15/d2b7d7be.jpg","nickname":"BCool","note":"","ucode":"E6C2B78F379988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384866,"discussion_content":"为啥我用update t set c=1;替换update t set c=0 where id=c;就可以更改呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626776152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1715553,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKH6CnTy5gWanRrNQzmktuRDayERVnP8rS9BA40K3GKLMBMEmLgP9qS9r4XJicTgwpUWib0V2PK6mibQ/132","nickname":"Geek_636aea","note":"","ucode":"79CF04F3EB58A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2689813,"avatar":"https://static001.geekbang.org/account/avatar/00/29/0b/15/d2b7d7be.jpg","nickname":"BCool","note":"","ucode":"E6C2B78F379988","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411050,"discussion_content":"你这属于根本没理解为什么第二个语句改不了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635838288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384866,"ip_address":""},"score":411050,"extra":""}]},{"author":{"id":2355573,"avatar":"","nickname":"Geek_c1891e","note":"","ucode":"19150ADBD9F071","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349813,"discussion_content":"第一个事务中update t set c=0 where id=c; 的时候当前读发现没有满足id=c的列就不更新了，不更新就不更新呗，结束事务不就完事了。这个也不是问题吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613563718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349595,"discussion_content":"这个赞。发现了乐观锁的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613359075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344536,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611492562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113915,"avatar":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","nickname":"致良知","note":"","ucode":"73C722E31B726A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332641,"discussion_content":"这个问题 描述的很好 老师你留的那个问题是这个意思吗 我怎么完全没看出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607278730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1780698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2b/da/fa630993.jpg","nickname":"旧时光。","note":"","ucode":"E9612FD41567BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327148,"discussion_content":"这个地方不懂。一个会话开启有了读锁，另外一个会话想要修改数据不是应该去拿读锁然后进行等待么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605754347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1970443,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx1V1QAxC4NHaxYZGyuibBN8lcURJWc5nrnO4yic1kxnDemYV2FJGialf47kYX9qtDnZZOfe1SJeLicg/132","nickname":"lleft","note":"","ucode":"D573EB509455AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1780698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2b/da/fa630993.jpg","nickname":"旧时光。","note":"","ucode":"E9612FD41567BD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370179,"discussion_content":"RR隔离级别下select是快照读，如果要阻塞别的事务的修改必须要当前读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619319170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327148,"ip_address":""},"score":370179,"extra":""}]},{"author":{"id":1951832,"avatar":"","nickname":"Geek_bef3ae","note":"","ucode":"D1CA954B1E1973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281508,"discussion_content":"思考题直接用快照读就可以构造出这种诡异现象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591754547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259886,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/6e/a91cc104.jpg","nickname":"小一","note":"","ucode":"1AC8CA7C7B7946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46521,"discussion_content":"为什么匹配主键 预期值会是一呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573177424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1259886,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/6e/a91cc104.jpg","nickname":"小一","note":"","ucode":"1AC8CA7C7B7946","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220531,"discussion_content":"唯一主键","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585890349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46521,"ip_address":""},"score":220531,"extra":""}]},{"author":{"id":1259886,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/6e/a91cc104.jpg","nickname":"小一","note":"","ucode":"1AC8CA7C7B7946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46520,"discussion_content":"自己的事务更新失败，是其他事务抢先了？题里没说到有其他事务呀？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573177359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1721168,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/43/50/abb4ca1e.jpg","nickname":"凡","note":"","ucode":"80C2A6452AB9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1259886,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/6e/a91cc104.jpg","nickname":"小一","note":"","ucode":"1AC8CA7C7B7946","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166970,"discussion_content":"老师不是让你自己构建场景嘛\n","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1581434583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46520,"ip_address":""},"score":166970,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7333,"discussion_content":"还是没有明白@约书亚的答案！这和文章中刚开始列举的例子是同一个例子啊！文章中事务B是可以看到事务c的修改的，同样这里应该也能更新成功啊，不会出现这种“诡异”的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567495772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":9,"child_discussions":[{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55053,"discussion_content":"该UPDATE语句起前有个事务修改了这个值，然后改UPDATE语句当前读，发现VERSION不等于，导致更新失败，然后改CAS操作会补偿，继续查询VERSION的值，因为只能查到当前TRX_ID之前的VERSION的值，然后再继续执行UPDATE，UPDATE又处罚当前读，与补偿查询VERSION的值不相等，导致一直失败，解决办法：结束当前事务，再新启动一个事务进行","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574335908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7333,"ip_address":""},"score":55053,"extra":""},{"author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":162014,"discussion_content":"不是应该阻塞等待嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580952837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55053,"ip_address":""},"score":162014,"extra":""},{"author":{"id":1721168,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/43/50/abb4ca1e.jpg","nickname":"凡","note":"","ucode":"80C2A6452AB9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166972,"discussion_content":"不会，更新了直接 commit，锁释放了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581434648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":162014,"ip_address":""},"score":166972,"extra":""}]}]},{"had_liked":false,"id":46031,"user_name":"心雨鑫晴","can_delete":false,"product_type":"c1","uid":1246707,"ip_address":"","ucode":"37A42C19B98F1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","comment_is_top":true,"comment_ctime":1543836509,"is_pvip":false,"replies":[{"id":"16502","content":"好问题，有很深入的思考哈<br><br>代码实现上，获取视图数组和高水位是在事务系统的锁保护下做的，可以认为是原子操作，期间不能创建事务。<br>","user_name":"作者回复","comment_id":46031,"uid":"1264162","ip_address":"","utype":1,"ctime":1543866184,"user_name_real":"林晓斌"}],"discussion_count":22,"race_medal":0,"score":"9.2233725537946993e+18","product_id":100020801,"comment_content":"老师，我有一个问题。当开启事务时，需要保存活跃事务的数组（A），然后获取高水位（B）。我的疑问就是，在这两个动作之间（A和B之间）会不会产生新的事务？如果产生了新的事务，那么这个新的事务相对于当前事务就是可见的，不管有没有提交。","like_count":120,"discussions":[{"author":{"id":1976524,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/28/cc/4ce28507.jpg","nickname":"一旦","note":"","ucode":"E0D94CCA859E26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269692,"discussion_content":"其实文章图画的不好。什么叫当前事务，文章中讲的是当前活跃事务，我假设图表示的就是当前活跃事务。那么，这个图就画的不够好。在当前活跃事务中间肯定隔着很多已提交事务。其次图画的会让人感觉这是严格有序而且递增的，实际存在很多间隙。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1589938284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1158349,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/cd/fda6374f.jpg","nickname":"Louis","note":"","ucode":"BC667839F17937","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1976524,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/28/cc/4ce28507.jpg","nickname":"一旦","note":"","ucode":"E0D94CCA859E26","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279395,"discussion_content":"朴实无华的旦总 你来了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591339179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269692,"ip_address":""},"score":279395,"extra":""},{"author":{"id":1976524,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/28/cc/4ce28507.jpg","nickname":"一旦","note":"","ucode":"E0D94CCA859E26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1158349,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/cd/fda6374f.jpg","nickname":"Louis","note":"","ucode":"BC667839F17937","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284017,"discussion_content":"嗯？你是李？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592414459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279395,"ip_address":""},"score":284017,"extra":""},{"author":{"id":1665194,"avatar":"https://static001.geekbang.org/account/avatar/00/19/68/aa/4b58cfd3.jpg","nickname":"神韵","note":"","ucode":"0337AC63C9FBD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1976524,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/28/cc/4ce28507.jpg","nickname":"一旦","note":"","ucode":"E0D94CCA859E26","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295043,"discussion_content":"       他的当前事务就是指活跃事务。在低水位和高水位之间，可能已经隔着很多已经提交的事务，和你说的一样。但是我认为这个当前事务应该包括未提交和已经提交的事务序列号，你感觉呢？我下面论证：\n       还有后面的解释：如果版本号落在黄色部分，黄色部分分明写的是活跃事务对吧，但是为啥还会存在两种情况呢（在数组中不可见；不在数组中可见。），这个就纳闷了。只能说是在低水位和高水位之间，包括未提交（在数组中不可见）和提交（不在数组中可见）的事务，这样才符合有两种情况。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1596074042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269692,"ip_address":""},"score":295043,"extra":""}]},{"author":{"id":1228290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","nickname":"w 🍍","note":"","ucode":"F2386C971EC58B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398587,"discussion_content":"【当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。  】  那这个高水位，其实就是当前事务的id吧？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1632816677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2272450,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/28t7w9ZKyfjJXkyJoCqSzFWmDIwjfcCT3D8GHIaX4OFyPKrIbeSU8ZOiae4fkIHkCoiaCGdGP4icdmoJCrc9nxjMg/132","nickname":"Geek_a42094","note":"","ucode":"3E13DD46FF77C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1228290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","nickname":"w 🍍","note":"","ucode":"F2386C971EC58B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406703,"discussion_content":"我也想问啊啊啊啊，非常疑惑，但是图里面当前事务的箭头为啥画在了低水位和高水位之间呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1634823292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":398587,"ip_address":""},"score":406703,"extra":""},{"author":{"id":2804690,"avatar":"","nickname":"呵呵哒","note":"","ucode":"C08AA79F71D193","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2272450,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/28t7w9ZKyfjJXkyJoCqSzFWmDIwjfcCT3D8GHIaX4OFyPKrIbeSU8ZOiae4fkIHkCoiaCGdGP4icdmoJCrc9nxjMg/132","nickname":"Geek_a42094","note":"","ucode":"3E13DD46FF77C0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407148,"discussion_content":"开始了事务不一定是马上创建视图，文中有提到。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1634915675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":406703,"ip_address":""},"score":407148,"extra":""},{"author":{"id":2028957,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","nickname":"Geek2014","note":"","ucode":"9EB356D8DF287E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2804690,"avatar":"","nickname":"呵呵哒","note":"","ucode":"C08AA79F71D193","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411747,"discussion_content":"可是文中说的是，启动事务的瞬间，创建的视图数组。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635992787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":407148,"ip_address":""},"score":411747,"extra":""}]},{"author":{"id":2169950,"avatar":"https://static001.geekbang.org/account/avatar/00/21/1c/5e/69d6797b.jpg","nickname":"Unique","note":"","ucode":"FE8E79B3B95AFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310258,"discussion_content":"感觉作者没有回答到点上，  事务是严格递增的，那么在A和B之间，就不会产生新的事务啊，即使在这个过程中产生了新的事务，那么也不可能在A和B之间","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1601717600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2069664,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/94/a0/84342a0d.jpg","nickname":"@","note":"","ucode":"BD87484261ED85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2169950,"avatar":"https://static001.geekbang.org/account/avatar/00/21/1c/5e/69d6797b.jpg","nickname":"Unique","note":"","ucode":"FE8E79B3B95AFF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325293,"discussion_content":"大哥，你都递增了，最高水位还能是B啊\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605263868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310258,"ip_address":""},"score":325293,"extra":""},{"author":{"id":2455765,"avatar":"https://static001.geekbang.org/account/avatar/00/25/78/d5/256d9a90.jpg","nickname":"丶","note":"","ucode":"E58127DDC683B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2169950,"avatar":"https://static001.geekbang.org/account/avatar/00/21/1c/5e/69d6797b.jpg","nickname":"Unique","note":"","ucode":"FE8E79B3B95AFF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393001,"discussion_content":"他可能想问的是在上述 A，B 这两个过程 创建的新的事务会不会作为可见事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631199460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310258,"ip_address":""},"score":393001,"extra":""}]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431313,"discussion_content":"好问题，有很深入的思考哈\n\n代码实现上，获取视图数组和高水位是在事务系统的锁保护下做的，可以认为是原子操作，期间不能创建事务。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543866184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2032894,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/fe/60db4684.jpg","nickname":"菜波","note":"","ucode":"DA7DED66709FA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395772,"discussion_content":"问题的意思应该是： 程序已经拿到活跃数组了比如是[A]，这个时候又新进来了个C，然后程序拿出高水位是B。这样事务C就是在高低水位之间而有不在活跃数组里，会导致未提交的C也能被读到\n我想追问一下，这样程序上先拿B，再拿活跃数组是不是就能解决这个问题，保证了活跃数组一定是记录完整的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632336922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1357359,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b6/2f/f0def7b8.jpg","nickname":"juven","note":"","ucode":"A4D0B88B742264","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348903,"discussion_content":"意思是活跃事务是1,2, 然后来3了, 获取最高水位是4,那么3对于当前事务就是提交可见的,好像是要加锁的样子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612771989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2001093,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/88/c5/2fc6b23a.jpg","nickname":"奋斗洪吕石堕落红绿💩","note":"","ucode":"8C81C0B0A2F7A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311293,"discussion_content":"话说生成数组A到生成高水位之间产生了新的事物也没关系啊，这个时候产生的新事物不存在数组A里，切事物ID大于高水位，处于文章图中的红色不可见状态，其实在获取活跃事物数组时，这个可见和不可见就已经明确了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602299664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311484,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/fc/f18b97c3.jpg","nickname":"王大英","note":"","ucode":"38C751FBBE8D4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6676,"discussion_content":"请问那一个事务开始后，他的高水位还会随着新事务的增加实时增长吗，还是就固定在本事务开始的那一刹那了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567046771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1311484,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/fc/f18b97c3.jpg","nickname":"王大英","note":"","ucode":"38C751FBBE8D4D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42500,"discussion_content":"高水位不会变了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572685220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6676,"ip_address":""},"score":42500,"extra":""},{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1311484,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/fc/f18b97c3.jpg","nickname":"王大英","note":"","ucode":"38C751FBBE8D4D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106233,"discussion_content":"当事务隔离级别是可重复读时肯定不变（也就是文章中说的一个事务一个一致性视图），但是读已提交肯定是变的，因为每次查询都会生成一个新的一致性视图（也就是文章中说的一个查询一个一致性视图）。另外，可重复读可以理解为就是“只固定在创建事务那一刻的读已提交”，更能明白了我觉得。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577524557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6676,"ip_address":""},"score":106233,"extra":""},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142946,"discussion_content":"他问的就是一个事务开始后，不管是RR还是RC，在一个事务开始后，肯定是相对于这个事务进行事务数组的整理，以及计算出属于这个事务数组的高水位值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579485687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106233,"ip_address":""},"score":142946,"extra":""}]}]},{"had_liked":false,"id":46908,"user_name":"ithunter","can_delete":false,"product_type":"c1","uid":1060905,"ip_address":"","ucode":"D8827BD1801325","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/29/7d34099d.jpg","comment_is_top":true,"comment_ctime":1543999905,"is_pvip":false,"replies":[{"id":"16801","content":"你这个问题很有趣。我想到一个不错的解法。不过我先置顶。让别的同学来回答看看。<br><br>好问题，谁有想法po出来。","user_name":"作者回复","comment_id":46908,"uid":"1264162","ip_address":"","utype":1,"ctime":1544027787,"user_name_real":"林晓斌"}],"discussion_count":57,"race_medal":0,"score":"9.2233723390465004e+18","product_id":100020801,"comment_content":"请教一个问题，业务上有这样的需求，A、B两个用户，如果互相喜欢，则成为好友。设计上是有两张表，一个是like表，一个是friend表，like表有user_id、liker_id两个字段，我设置为复合唯一索引即uk_user_id_liker_id。语句执行顺序是这样的：<br>以A喜欢B为例：<br>1、先查询对方有没有喜欢自己（B有没有喜欢A）<br>select * from like where user_id = B and liker_id = A<br>2、如果有，则成为好友<br>insert into friend<br>3、没有，则只是喜欢关系<br>insert into like<br><br>如果A、B同时喜欢对方，会出现不会成为好友的问题。因为上面第1步，双方都没喜欢对方。第1步即使使用了排他锁也不行，因为记录不存在，行锁无法生效。请问这种情况，在mysql锁层面有没有办法处理","like_count":70,"discussions":[{"author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309435,"discussion_content":"我觉得你的语句顺序应该有点错误，我的理解是互相喜欢才能成为好友，也就意味着like表里有一条 user_id = B and liker_id = A和一条user_id = A and liker_id = B。friend表能才可能会有一条A、B好友的记录，所以如果是A喜欢B，应该是先执行插入，然后提交，然后再去查询B是否喜欢A，如果喜欢，则往friend表里插一条数据。","likes_number":32,"is_delete":false,"is_hidden":false,"ctime":1601289252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213495,"avatar":"https://static001.geekbang.org/account/avatar/00/12/84/37/a13d867a.jpg","nickname":"zc","note":"","ucode":"07900D4B6A3135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65248,"discussion_content":"这是一个写偏序问题，发生的原因是select的时候是并发的，只要查询时带上锁即可破解。\nselect * from like where (user_id = B and liker_id = A ) or  (user_id = A and liker_id = B )  for update","likes_number":20,"is_delete":false,"is_hidden":false,"ctime":1574991569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1882517,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b9/95/cabab54b.jpg","nickname":"tong","note":"","ucode":"966DEDE81081D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1213495,"avatar":"https://static001.geekbang.org/account/avatar/00/12/84/37/a13d867a.jpg","nickname":"zc","note":"","ucode":"07900D4B6A3135","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381776,"discussion_content":"如果sql执行的顺序是这样的，问题更加严重了呢；\n两个事务同时开启，同时加锁select，如果数据都不存在，两个事务同时阻塞\n并发量小，还没问题，并发量大了，直接打爆数据库线程","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625207266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65248,"ip_address":""},"score":381776,"extra":""},{"author":{"id":2725596,"avatar":"https://static001.geekbang.org/account/avatar/00/29/96/dc/8adf8971.jpg","nickname":"幼稚园的小朋友","note":"","ucode":"EF63C355BD58A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1882517,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b9/95/cabab54b.jpg","nickname":"tong","note":"","ucode":"966DEDE81081D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540230,"discussion_content":"数据不存在 事务也不会阻塞 找不到数据 会释放锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639995397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":381776,"ip_address":""},"score":540230,"extra":""},{"author":{"id":1054827,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/6b/a1448af1.jpg","nickname":"贝影","note":"","ucode":"19545C8DCBF8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1213495,"avatar":"https://static001.geekbang.org/account/avatar/00/12/84/37/a13d867a.jpg","nickname":"zc","note":"","ucode":"07900D4B6A3135","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543323,"discussion_content":"题主说了啊，两个同时喜欢的时候like表里都没有A和B的数据，你怎么锁呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641091538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65248,"ip_address":""},"score":543323,"extra":""}]},{"author":{"id":1022507,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOpANMwDibLmj5IGJh6dTw300sZ1BHM5sG3sZv1A1rvCHOiblPD3jgFOiaMVVujtctWnQbVFoNPpRgw/132","nickname":"alioo","note":"","ucode":"F36A38C1F5FFAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5323,"discussion_content":"like表增加1列r，值为1表示userid 喜欢 likeid,值为2则相反。在向like表插入时，比较下userid与likeid ascii值大小，ascii值小的始终放到前面，如果发生了userid与likeid交换的情况则列r值为2。\n这个样子当同时互相喜欢时，后插入like表的唯一联合主键索引就会提示冲突，插入失败，这个时候将他们插入firend表即可","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1566178756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043325,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/c9xpiakQ3OC1AlfCeW03lLnnb7mj5v35Hib8YDs66zpnVib2n2qFichFmFp2Ec4QDPR0dKh38MkBBLyD3bE4NiaanZQ/132","nickname":"龙晓","note":"","ucode":"FAF34F1C65D103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341811,"discussion_content":"这种情况是like表里应该有两条数据，第一条a like b，第二条 b like a。而提问者试图在插入这两条数据的同时，更新friend表。\n这样做的问题是如果两条数据是并发更新时，就会出现找不到相互like的数据，如果有个先后，第一条提交后那么后插入的数据，能找到匹配关系并同时更新friend表。\n所以解决这个问题，我认为分两步走是对的，不要放在同一个事物里面，\n一方面缩短了单个事物长度，降低并发堵塞风险；另一方面能很好的解决上面遇到的问题。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1610530006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1993133,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/69/ad/0ba9f9f0.jpg","nickname":"ging_96","note":"","ucode":"F8936FC04BBFFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290120,"discussion_content":"喜欢和好友其实是两个业务，所以应该拆成两个事务。\n喜欢的业务，开启一个事务，insert like表，提交事务。\n查询是否是好友业务，如果没有friend表，只需要写sql查询，是否A喜欢B并且B喜欢A即可。如果有friend表，其实是多维护一张表，我认为在目前提供的业务场景下不合适。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1594349606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2249670,"avatar":"","nickname":"mofee888","note":"","ucode":"F1FB6F68DCF802","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1993133,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/69/ad/0ba9f9f0.jpg","nickname":"ging_96","note":"","ucode":"F8936FC04BBFFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331375,"discussion_content":"确实拆开比较合适，业务上可以有一个队列专门处理成为好友的任务，在insert like 以后，任一个任务到队列中去异步处理friend","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606837583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290120,"ip_address":""},"score":331375,"extra":""}]},{"author":{"id":1088010,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9a/0a/922615cf.jpg","nickname":"PhilZhang","note":"","ucode":"383F1A792C7DF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218329,"discussion_content":"insert like 表，提交事务，再select like表看对方是否喜欢你，是的话insert friend ","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1585648671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1041495,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/57/bbd0dd6c.jpg","nickname":"你的微笑` 让我不知所措","note":"","ucode":"0F6F0ED31D360F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088010,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9a/0a/922615cf.jpg","nickname":"PhilZhang","note":"","ucode":"383F1A792C7DF9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282930,"discussion_content":"会有一个问题，insert like成功后，后面insert friend奔溃掉了，这样就会虽然两个人都喜欢了对方，但依然不是好友","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592121855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":218329,"ip_address":""},"score":282930,"extra":""},{"author":{"id":1088010,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9a/0a/922615cf.jpg","nickname":"PhilZhang","note":"","ucode":"383F1A792C7DF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1041495,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/57/bbd0dd6c.jpg","nickname":"你的微笑` 让我不知所措","note":"","ucode":"0F6F0ED31D360F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283015,"discussion_content":"先提交一下是为了防止不可读，没考虑到两个事务回滚的问题，如果这三步放在一个事务，隔离级别设置成读未提交，也就是允许脏读，好像可以？\n\n评论区没看见完美的答案，有一个悲观锁的答案逻辑行得通，但是效率好像不太行，有什么高见吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592143583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282930,"ip_address":""},"score":283015,"extra":""}]},{"author":{"id":1341276,"avatar":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","nickname":"bingo","note":"","ucode":"DD96820EC8871D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312597,"discussion_content":"A喜欢B 和 B喜欢A 都放在一行可以实现。like表设计四个字段，分别是 user_id_a, \n   user_id_b,    is_a_like_b,    is_b_like_a。在业务层查询时要保证 user_id_a < user_id_b。\n\n这样就把 A喜欢B 和 B喜欢A 两种状态都放在一行实现。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1602744376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1341276,"avatar":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","nickname":"bingo","note":"","ucode":"DD96820EC8871D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330141,"discussion_content":"小于是什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606538277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312597,"ip_address":""},"score":330141,"extra":""},{"author":{"id":2284132,"avatar":"","nickname":"Geek_5d486f","note":"","ucode":"B3F70C6D2D1C51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334622,"discussion_content":"我理解的是类似于乐观锁，不知道对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607919549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330141,"ip_address":""},"score":334622,"extra":""}]},{"author":{"id":1618220,"avatar":"","nickname":"Geek_64246c","note":"","ucode":"4C7B4F1480550D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179609,"discussion_content":"去掉friend表不好吗","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1582244501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236163,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","nickname":"Flash","note":"","ucode":"E285075C9E0B02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26949,"discussion_content":"mysql层面不知道有什么好办法没，我觉得可以通过异步消息队列，让喜欢对方的这个请求动作按顺序执行。就可以避免同时喜欢对方时，在数据库层面没有记录的情况。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1570625548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663305,"avatar":"","nickname":"Geek_96366d","note":"","ucode":"23547F1E2A5C4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381622,"discussion_content":"看半天没看懂题干啥意思，😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1625147344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1657429,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwTZdUafC5YM7bCASt8icUnoyYfV4hUHulexibDI7B4eaokTxYXHFtoic97DBlCAU9j5Jw4QUuGhyZQ/132","nickname":"Carisy","note":"","ucode":"67E887967347BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209741,"discussion_content":"每次都假设对方喜欢自己并去插入这条记录，如果duplicatekey那么说明对方喜欢自己，并成为好友，如果插入成功rollback成为单相思","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584668390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2695423,"avatar":"https://static001.geekbang.org/account/avatar/00/29/20/ff/c71812ed.jpg","nickname":"FF","note":"","ucode":"0FD06A258BABCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1657429,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwTZdUafC5YM7bCASt8icUnoyYfV4hUHulexibDI7B4eaokTxYXHFtoic97DBlCAU9j5Jw4QUuGhyZQ/132","nickname":"Carisy","note":"","ucode":"67E887967347BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409037,"discussion_content":"这样做肯定是不行的，一个人是可以喜欢多个人的  实际场景不会只有用户A和B","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635357147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209741,"ip_address":""},"score":409037,"extra":""}]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431594,"discussion_content":"你这个问题很有趣。我想到一个不错的解法。不过我先置顶。让别的同学来回答看看。\n\n好问题，谁有想法po出来。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1544027787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2819752,"avatar":"","nickname":"Geek_85350c","note":"","ucode":"52CB2606C7CFD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":567656,"discussion_content":"林老师，您的好想法是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650968638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":431594,"ip_address":""},"score":567656,"extra":""}]},{"author":{"id":2093851,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIdnSiabibmLk7teCAGI3p3duEnpfKO3icUriaDjQHXtk3icSZibNH2IAyl0RA85edZY4lehqmy3uguQcUQ/132","nickname":"夏至","note":"","ucode":"5A1C441C464550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389623,"discussion_content":"先插入喜欢记录记录，马上提交，再检查是否为朋友和加朋友。\n其实就是让检查和交朋友不在一个事物就好。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1629360885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1480717,"avatar":"https://static001.geekbang.org/account/avatar/00/16/98/0d/fb77a32c.jpg","nickname":"Tim","note":"","ucode":"3AAA9FD3D8DDDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2093851,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIdnSiabibmLk7teCAGI3p3duEnpfKO3icUriaDjQHXtk3icSZibNH2IAyl0RA85edZY4lehqmy3uguQcUQ/132","nickname":"夏至","note":"","ucode":"5A1C441C464550","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391462,"discussion_content":"如果是主从延迟导致的不能马上读到有什么好的办法么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630476164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389623,"ip_address":""},"score":391462,"extra":""}]},{"author":{"id":1795942,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/67/66/b164d46e.jpg","nickname":"爱老孙的男人","note":"","ucode":"61B80AD2965B98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305709,"discussion_content":"喜欢和好友分成两个功能，两个事务，方法解耦","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600065331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1565949,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e4/fd/3bf6d263.jpg","nickname":"W","note":"","ucode":"C500B4113258F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52792,"discussion_content":"先写like表，然后再判断写不写friend，不开事务，可行不?","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574085403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1612674,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKT7Exm9wh9wtJYvB33mEwcUmNKfkzYjk56GrPUsllwc5iaklMSJ0eaaTbKuAFgQaFLtDSIfUcogGQ/132","nickname":"nirvana","note":"","ucode":"1DD07B5F2C6E03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46087,"discussion_content":"分两个事务，先写like表，事务提交；再起另一个事务判断是否需要insert friend；","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573118593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044546,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/42/7728d4f5.jpg","nickname":"艿艿","note":"","ucode":"8F727AB7A7F6B2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30868,"discussion_content":"可以考虑去掉 freid 表，然后在 like 表上加个字段，是否相互 like 。\n也就是说，如果是 a 和 b 是 fried ，会有一条 a,b 和 b,a 。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570866090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1612674,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKT7Exm9wh9wtJYvB33mEwcUmNKfkzYjk56GrPUsllwc5iaklMSJ0eaaTbKuAFgQaFLtDSIfUcogGQ/132","nickname":"nirvana","note":"","ucode":"1DD07B5F2C6E03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1044546,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/42/7728d4f5.jpg","nickname":"艿艿","note":"","ucode":"8F727AB7A7F6B2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":46080,"discussion_content":"这样貌似不行；同时互相喜欢，可能会有 (a, b, 不互相like) (b, a, 不互相like)的情况；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573117708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30868,"ip_address":""},"score":46080,"extra":""}]},{"author":{"id":1596029,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKoaiaB1nRDO4MPAFrSHXHRNKP1rtJiaUsfXjiazvDic24ibicCeYFUyG6k8FbhBLhQDhCBqAh3MsL3g6Hw/132","nickname":"Geek_a2c349","note":"","ucode":"260A8FB49AAB8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1179,"discussion_content":"like表必写，写完再判断是否写friend表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562338640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","nickname":"lttzzlll","note":"","ucode":"FA160F7C02ABAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338296,"discussion_content":"拆成两步来做(两个事务), 第一个只管 “关注” 第二个只管 &#34;好友&#34;, 简单不出错, 不需要考虑性能。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609234949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099151,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c5/8f/80443115.jpg","nickname":"微笑的向日葵","note":"","ucode":"90659BD4413DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309460,"discussion_content":"顺序是select like.  Insert  like.select like for update. Commit   / select friend  insert friend \n\n最后如果唯一索性报错就返回  catch 毕竟现实中这种概率较小业务系统是能catch住不会有性能问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601294789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184658,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","nickname":"飞翔","note":"","ucode":"0641211EE9DA5C","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20515,"discussion_content":"你这种场景不就是探探这种相亲配对吗，如过互相喜欢就配对成功^_^","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569324208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139247,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/2f/6fe8ee9e.jpg","nickname":"李靖峰","note":"","ucode":"AA4DE3E91A1FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1014,"discussion_content":"先写like表，然后select采用“当前读”的方式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562233311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1606814,"avatar":"https://static001.geekbang.org/account/avatar/00/18/84/9e/df874964.jpg","nickname":"laiwenqiang","note":"","ucode":"8CBF1B13949525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139247,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/2f/6fe8ee9e.jpg","nickname":"李靖峰","note":"","ucode":"AA4DE3E91A1FFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4926,"discussion_content":"这样会有死锁吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565835601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1014,"ip_address":""},"score":4926,"extra":""},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1606814,"avatar":"https://static001.geekbang.org/account/avatar/00/18/84/9e/df874964.jpg","nickname":"laiwenqiang","note":"","ucode":"8CBF1B13949525","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72676,"discussion_content":"insert like之后提交，select like新起一个事务呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575514653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4926,"ip_address":""},"score":72676,"extra":""},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1606814,"avatar":"https://static001.geekbang.org/account/avatar/00/18/84/9e/df874964.jpg","nickname":"laiwenqiang","note":"","ucode":"8CBF1B13949525","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142942,"discussion_content":"只是当前读，不会涉及到锁的问题吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579485520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4926,"ip_address":""},"score":142942,"extra":""}]},{"author":{"id":1460409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIhhoNoj21A1zcIvDoeU2VfnnJKm6YJsTwKPu566kvZfMnzUOfOxGqKap7QqcJL8fDGhdMP8JtoBw/132","nickname":"Geek_964568","note":"","ucode":"5451BF09113A17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553068,"discussion_content":"仅使用 like 表，包含字段 a_name, b_name, like_count。\n第一步： select count(1) from like where a_name = &#34;A&#34; , b_name =&#34;B&#34; for update;\n第二步：\n          不存在： insert into like () value (&#34;A&#34;,&#34;B&#34;, 0);\n        存在：  update  like_count = like_count + 1 where  a_name = &#34;A&#34; , b_name =&#34;B&#34; ;\n第三步：select * from like where like_count = 2；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645705062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548585,"discussion_content":"从业务层面， 可以将firend表中建立一个唯一联合索引引uk_userId1_userId2， userId大的存在userId1字段里， userId小的存在userId2字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643270523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238337,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/41/ffe533ba.jpg","nickname":"尚帝","note":"","ucode":"6F1703FD5A23A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535364,"discussion_content":"先插入，在查询别人是否喜欢自己，跟进结果操作friend表，同个事务执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638419631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2132568,"avatar":"","nickname":"Geek_82987a","note":"","ucode":"74463032C42F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406839,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634834900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630084,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/84/ec6370d4.jpg","nickname":"琳娜贝儿","note":"","ucode":"58182140C43E93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406693,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634821844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240062,"avatar":"https://static001.geekbang.org/account/avatar/00/12/eb/fe/630ca0c3.jpg","nickname":"天使也掉毛","note":"","ucode":"9885AF38D468C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351449,"discussion_content":"1\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614268630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2355573,"avatar":"","nickname":"Geek_c1891e","note":"","ucode":"19150ADBD9F071","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349816,"discussion_content":"1. insert like之后提交一个高可用的异步事件处理 是否需要insert friend，2.在查询是否互相like的时候使用 select...for share mode（强制在RR中读未提交）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613564794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528536,"avatar":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","nickname":"绿箭侠","note":"","ucode":"B994F558A98E29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279475,"discussion_content":"题设没有交代清楚，让后面看评论的人一头雾水，我是想了半天。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591351049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1108575,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epvfuORK5yyr6oibkYia21FkkALudjKmlm3uuzv0rpaQVyYp0HLahLAtd0Rk8c7js8SoJHlLCqtXDZw/132","nickname":"ccwxiaohu","note":"","ucode":"09B73B27F503FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1528536,"avatar":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","nickname":"绿箭侠","note":"","ucode":"B994F558A98E29","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280721,"discussion_content":"想了半天没想明白，求大佬指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591606008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279475,"ip_address":""},"score":280721,"extra":""}]},{"author":{"id":1440429,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/ad/3fa02ac7.jpg","nickname":"星期八","note":"","ucode":"D8C66E7F61B0D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257391,"discussion_content":"这如果A、B同时喜欢对方，会出现不会成为好友的问题。因为上面第1步，双方都没喜欢对方。这块是否矛盾了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588565053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1362139,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/UV1icsjmNzqgdaETzGR9Pdr0BPnrS4AgtZfe9ZOP3n6ZFTDI5ecubRDhn9PHXLuSRC4VCo8Wk3fNhpywWA7fgKg/132","nickname":"艾特","note":"","ucode":"0DAA4291DEF970","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1440429,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/ad/3fa02ac7.jpg","nickname":"星期八","note":"","ucode":"D8C66E7F61B0D1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327268,"discussion_content":"我想他的意思是两个人同时操作喜欢对方，而在之前双方都没有喜欢对方，也就是在like表里不存在双方数据。而在并发的情况下，第一步判断是不成立的。导致无法成为朋友。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605778848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":257391,"ip_address":""},"score":327268,"extra":""},{"author":{"id":1104869,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/e5/26c2f7de.jpg","nickname":"奔跑的小黄牛","note":"","ucode":"C4E014CA41CB66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1362139,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/UV1icsjmNzqgdaETzGR9Pdr0BPnrS4AgtZfe9ZOP3n6ZFTDI5ecubRDhn9PHXLuSRC4VCo8Wk3fNhpywWA7fgKg/132","nickname":"艾特","note":"","ucode":"0DAA4291DEF970","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381610,"discussion_content":"我想是这个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625142404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327268,"ip_address":""},"score":381610,"extra":""}]},{"author":{"id":1269600,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5f/60/7ea2d646.jpg","nickname":"我是爹","note":"","ucode":"E02D8A7A916B61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213026,"discussion_content":"1. 使用 update 的方式；根据update更新的结果去操作接下来的两条语句\n2. user_id、like_user_id、friend_user_id 这种方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585043930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187285,"discussion_content":"把a和b加上关系md5放到表里，每次去查可好？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582729130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810051,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0uyg1IicbEhLwsgM2A2ROoyVdWdmUqZfQfs6G67w9m3hdRNBMOQJatQoACj3qNGgj2KVIgricaYiaQ/132","nickname":"木得感情的编码机器","note":"","ucode":"9C6CD47ADCB8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168328,"discussion_content":"用触发器吧。不管是否成为好友，like表是一定要插入的，插入后触发另一个处理好友的事务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581572736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1615539,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI6LXcIqb5K48nia8d4zmdsD1M9AZeyXoGrLzX5xvqfN0fqXOsYKUWLbZvZ8TtJCXWmYbCkCXg93dQ/132","nickname":"漏脚脖","note":"","ucode":"214AE52EC201E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19755,"discussion_content":"不要friend表不行吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569221566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652085,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKORTofsU89GYKtywquzKuEiabvZnEOonfMYKuCPlo8GDlXqZuJdBicu0XtlaeodH4BnmHV1kldSAwQ/132","nickname":"未来怎样","note":"","ucode":"4E54EB62595B27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13003,"discussion_content":"写frient表的前提是必写like表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568628310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45309,"user_name":"包包up","can_delete":false,"product_type":"c1","uid":1073495,"ip_address":"","ucode":"A6F51A62A8B362","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/57/6f3c81dd.jpg","comment_is_top":true,"comment_ctime":1543582839,"is_pvip":false,"replies":[{"id":"16094","content":"👍🏿<br><br>我在学习过程中也是最喜欢这种“自己推翻自己结论”的快感","user_name":"作者回复","comment_id":45309,"uid":"1264162","ip_address":"","utype":1,"ctime":1543589219,"user_name_real":"林晓斌"}],"discussion_count":10,"race_medal":0,"score":"9.2233722789164995e+18","product_id":100020801,"comment_content":"以下是一个错误的理解，在编写评论的过程中用前面刚学到的知识把自己的结论推翻，有一种快感，所以还是决定发出来。 哈哈~<br><br>事务A(100) | 事务B(101)<br>-------------------<br>             | select(1)<br>-------------------<br>             | update  <br>-------------------<br>  update  |<br>-------------------<br>              | select(2) <br>-------------------<br>事务A B在事务启动时的up_limit_id为99<br>事务B update 之后表格的每一行的row_trx_id变为101 <br>事务A 再update 之后每一行的row_trx_id变为100<br>事务B的select(2)时因为隔离级别是RR，所以去遍历的时候找row_trx_id&lt;=101的版本返回，优先找到版本为100的，就会导致select(2)并没有取到自己的更新。<br>对于对于自己的修改也认这句话和undo-log的介绍，我觉的这种情况下会获取不到自己更新的最新的数据。不知道我理解的对不对。<br><br>不对！因为事务A的update是会被行锁锁住的，而且锁是要在事务B结束之后才释放，所以不存在在事务B的update之后还在事务中被事务A给更新，导致上面的问题。","like_count":56,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430980,"discussion_content":"👍🏿\n\n我在学习过程中也是最喜欢这种“自己推翻自己结论”的快感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543589219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1756491,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/cd/4b/36acd180.jpg","nickname":"Hhhhcl","note":"","ucode":"588D28DA42AFEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65777,"discussion_content":"啥意思...看懵了.. \n就是说 事务B update加了写锁， 等到事务B commit之后 ，事务A才能执行语句 是吗？","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1575028248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015189,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","nickname":"我是曾经那个少年","note":"","ucode":"9F02F7FF147D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1756491,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/cd/4b/36acd180.jpg","nickname":"Hhhhcl","note":"","ucode":"588D28DA42AFEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334242,"discussion_content":"是的，他就是表达这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607777277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65777,"ip_address":""},"score":334242,"extra":""}]},{"author":{"id":1575571,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0a/93/a189ec16.jpg","nickname":"Eric","note":"","ucode":"7EB511C384BD7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289740,"discussion_content":"是真的没有看懂你在说什么。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594197069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1393889,"avatar":"","nickname":"auauauau","note":"","ucode":"297390A0D6ED42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307438,"discussion_content":"赞，我也有类似困惑，虽然困惑的点不一样，但是最终实验发现有行锁确保不会有内种情况发生","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600650853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937317,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8f/a5/d613dfc7.jpg","nickname":"小正","note":"","ucode":"D6D68DCC9650FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583390,"discussion_content":"重新拜读老师的课程，突然有个疑问，既然rr是通过一致性视图（活动tx_id数组）实现的，那么间隙锁是不是没有必要了？因为在rr事务开始后，新插入的数据的 row tx_id是不可见的，也不影响rr读，不用一定要锁住间隙才对？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660092968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2042484,"avatar":"","nickname":"Geek_3b36f1","note":"","ucode":"0401E0BAA4BF01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297750,"discussion_content":"看懂了，但你表达的不明确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597046247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228560,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","nickname":"BD","note":"","ucode":"A95CF8C3EDC228","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290736,"discussion_content":"这个就是两阶段锁的作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594596115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2287841,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e8/e1/6045b299.jpg","nickname":"LPF","note":"","ucode":"036C552D7251E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1228560,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","nickname":"BD","note":"","ucode":"A95CF8C3EDC228","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324876,"discussion_content":"就是写锁互斥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605183961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290736,"ip_address":""},"score":324876,"extra":""}]},{"author":{"id":1757384,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL41RCmZy6An5SLXPmXU6ea5yvweBGPicedqQ0xjuaYp1PY1CSlUuNwgV3BNpbWzdJwXlWZAVicrtPg/132","nickname":"啦啦啦","note":"","ucode":"76BBA994C40F23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279011,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591272843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44955,"user_name":"墨萧","can_delete":false,"product_type":"c1","uid":1032229,"ip_address":"","ucode":"07FFC5D1B5C1FA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/25/348b4d76.jpg","comment_is_top":true,"comment_ctime":1543534690,"is_pvip":false,"replies":[{"id":"15992","content":"咱们例子里面，事务C是直接提交的，再执行一个GET 就是另外一个事务了… <br><br>如果你说的是用begin 来启动一个多语句事务，那么事务c在更新后查询，还是看到row trx_id是102的。  【注意：如果它还没提交，101根本生成不出来，因为事务B被行锁挡着呢】","user_name":"作者回复","comment_id":44955,"uid":"1264162","ip_address":"","utype":1,"ctime":1543536835,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"9.2233721071177994e+18","product_id":100020801,"comment_content":"可重复读情况下，事务c的102早于事务b的101，如果事务c再get k，那不是就取得101的值了？不太明白。","like_count":16,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430872,"discussion_content":"咱们例子里面，事务C是直接提交的，再执行一个GET 就是另外一个事务了… \n\n如果你说的是用begin 来启动一个多语句事务，那么事务c在更新后查询，还是看到row trx_id是102的。  【注意：如果它还没提交，101根本生成不出来，因为事务B被行锁挡着呢】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543536835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142964,"discussion_content":"纠正一下，事务C的102早于事务B的101，确切来说是事务C提交早于事务B，事务C开始是晚于事务B的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579486178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44954,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1126910,"ip_address":"","ucode":"341694ACBAB258","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/fe/30a17a9d.jpg","comment_is_top":true,"comment_ctime":1543534593,"is_pvip":true,"replies":[{"id":"15991","content":"1. 判断可见性两个规则：一个是up_limit_id ,另一个是“自己修改的”；这里用到第二个规则<br><br>2.  这时候事务Bup_limit_id还是99","user_name":"作者回复","comment_id":44954,"uid":"1264162","ip_address":"","utype":1,"ctime":1543536551,"user_name_real":"林晓斌"}],"discussion_count":3,"race_medal":0,"score":"9.2233720899378995e+18","product_id":100020801,"comment_content":"老师在文中说: &quot;所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。&quot;，<br>1. 这里不参考up_limit_id了吗？<br>2. 如果参考，事务B的up_limit_id是在执行update语句前重新计算的，还是在执行Q1语句前重新计算的？<br>","like_count":12,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430871,"discussion_content":"1. 判断可见性两个规则：一个是up_limit_id ,另一个是“自己修改的”；这里用到第二个规则\n\n2.  这时候事务Bup_limit_id还是99","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543536551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153854,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/3e/732c2db5.jpg","nickname":"杨瑞","note":"","ucode":"524021112D548C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301139,"discussion_content":"低水位为什么用up_limit_id来表示？看评论一直以为up_limit_id是高水位，后来网上找了一下发现up_limit_id是低水位，low_limit_id是高水位，感觉有点费解","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598421571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153854,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/3e/732c2db5.jpg","nickname":"杨瑞","note":"","ucode":"524021112D548C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337296,"discussion_content":"made，看到你这才明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608865354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301139,"ip_address":""},"score":337296,"extra":""}]}]},{"had_liked":false,"id":45247,"user_name":"某、人","can_delete":false,"product_type":"c1","uid":1308784,"ip_address":"","ucode":"ADB42AA12A11C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","comment_is_top":false,"comment_ctime":1543567528,"is_pvip":false,"replies":[{"id":"16139","content":"👍🏿<br><br>本篇知识点全get","user_name":"作者回复","comment_id":45247,"uid":"1264162","ip_address":"","utype":1,"ctime":1543628752,"user_name_real":"林晓斌"}],"discussion_count":20,"race_medal":0,"score":"877716895912","product_id":100020801,"comment_content":"这篇理论知识很丰富,需要先总结下<br>1.innodb支持RC和RR隔离级别实现是用的一致性视图(consistent read view)<br><br>2.事务在启动时会拍一个快照,这个快照是基于整个库的.<br>基于整个库的意思就是说一个事务内,整个库的修改对于该事务都是不可见的(对于快照读的情况)<br>如果在事务内select t表,另外的事务执行了DDL t表,根据发生时间,要嘛锁住要嘛报错(参考第六章)<br><br>3.事务是如何实现的MVCC呢?<br>(1)每个事务都有一个事务ID,叫做transaction id(严格递增)<br>(2)事务在启动时,找到已提交的最大事务ID记为up_limit_id。<br>(3)事务在更新一条语句时,比如id=1改为了id=2.会把id=1和该行之前的row trx_id写到undo log里,<br>并且在数据页上把id的值改为2,并且把修改这条语句的transaction id记在该行行头<br>(4)再定一个规矩,一个事务要查看一条数据时,必须先用该事务的up_limit_id与该行的transaction id做比对,<br>如果up_limit_id&gt;=transaction id,那么可以看.如果up_limit_id&lt;transaction id,则只能去undo log里去取。去undo log查找数据的时候,也需要做比对,必须up_limit_id&gt;transaction id,才返回数据<br><br>4.什么是当前读,由于当前读都是先读后写,只能读当前的值,所以为当前读.会更新事务内的up_limit_id为该事务的transaction id<br><br>5.为什么rr能实现可重复读而rc不能,分两种情况<br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>    而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读","like_count":204,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430967,"discussion_content":"👍🏿\n\n本篇知识点全get","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543628752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1394997,"avatar":"https://static001.geekbang.org/account/avatar/00/15/49/35/4fc7bc20.jpg","nickname":"大鼻子先生","note":"","ucode":"4F9ED4A302B60C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143365,"discussion_content":"关于第3点”如果up_limit_id>=transaction id,那么可以看“，我觉得还需要比对transaction id是否存在于当前正在运行的事务，如果存在则不能看，不存在能看；关于第4点“会更新事务内的up_limit_id为该事务的transaction id”，应该是会更新行记录的transaction id为该事务的transaction id吧？ 不知我的理解是否正确","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1579503178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1387960,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","nickname":"无名道长","note":"","ucode":"0F694D17459CC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279260,"discussion_content":"3(2)是不是有点问题呢？应该是当前事务id的最大值+1，不管有没有提交？？？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591317585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1673801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","nickname":"YellowDuck","note":"","ucode":"9F1D2473CBA59B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1387960,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","nickname":"无名道长","note":"","ucode":"0F694D17459CC0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284198,"discussion_content":"肯定是这样..\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592470475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279260,"ip_address":""},"score":284198,"extra":""},{"author":{"id":1308784,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","nickname":"某、人","note":"","ucode":"ADB42AA12A11C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1387960,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","nickname":"无名道长","note":"","ucode":"0F694D17459CC0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357511,"discussion_content":"当前事务有一个专门的表格来存的。这个表格里事务的数据也不能查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615815764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279260,"ip_address":""},"score":357511,"extra":""}]},{"author":{"id":1063422,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/fe/99465085.jpg","nickname":"Adrian","note":"","ucode":"C11789EA4AFC69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392531,"discussion_content":"由于当前读都是先读后写,这句话写的不太对，select ...for update，不一定写，但是当前读","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631029476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1987547,"avatar":"","nickname":"学徒","note":"","ucode":"95956442ECB8C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357447,"discussion_content":"数据页上的数据也是mvcc吗？如果不是的话，直接更新数据页的数据是不是可能把一些rr事务的数据覆盖掉了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615807862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1308784,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","nickname":"某、人","note":"","ucode":"ADB42AA12A11C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1987547,"avatar":"","nickname":"学徒","note":"","ucode":"95956442ECB8C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357510,"discussion_content":"极端情况下是的，老版本的数据去undo log查。事务的数据都有mvcc特性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615815661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":357447,"ip_address":""},"score":357510,"extra":""},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1308784,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","nickname":"某、人","note":"","ucode":"ADB42AA12A11C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587187,"discussion_content":"老版本数据除了undo log，也有可能是被标记的删除字段，一般出现于在线更新场景","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662873500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":357510,"ip_address":"广东"},"score":587187,"extra":""}]},{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55060,"discussion_content":"如果up_limit_id>=transaction id,那么可以看。这个不太懂，不是当前trxid小于低位才能看吗？为什么小于高位呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574336323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1320901,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL3HXyQ70efQjb92ueicfuQiaemP8nmdbsG4DbGRGKtIVf57aRjDX78n2Vu4N6L0zibZAlMLDM161ekg/132","nickname":"aur0ra","note":"","ucode":"907D53065562A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67566,"discussion_content":"up_limit_id 是最后提交事务id 就是所谓的低位","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575139178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55060,"ip_address":""},"score":67566,"extra":""},{"author":{"id":2672712,"avatar":"","nickname":"Geek_e66f6b","note":"","ucode":"C08DA6C23E97C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1320901,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL3HXyQ70efQjb92ueicfuQiaemP8nmdbsG4DbGRGKtIVf57aRjDX78n2Vu4N6L0zibZAlMLDM161ekg/132","nickname":"aur0ra","note":"","ucode":"907D53065562A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409289,"discussion_content":"up limit （低水位）到底是怎么定义的呢？\n课程写的是 当前活跃事务数组内，tranID最小的那个值，评论写的是已提交的事务中，tranid最大的那个值。这两个不一样吧?是哪个错了?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635409788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":67566,"ip_address":""},"score":409289,"extra":""}]},{"author":{"id":2457860,"avatar":"https://static001.geekbang.org/account/avatar/00/25/81/04/853bc40f.jpg","nickname":"岑寂","note":"","ucode":"C602B1D7F45D32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400041,"discussion_content":"第五点中的（2）,为什么gaplock能实现当前读的可重复读呀？看其他资料说是gaplock用来解决幻读的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633148292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2359187,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ff/93/f3717c1a.jpg","nickname":"一袋米要扛几楼","note":"","ucode":"83F0C8453CE683","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394180,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631769808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1668117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLgibqHsl97Oq3nvnEVz7V3kaGKLmia0Ja8c4yXO7QeLKiakganRJomNGgYToW4RnFs60zibDTHicjE5w/132","nickname":"学而不思则惘","note":"","ucode":"8ED2B08AA5A755","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379892,"discussion_content":"老哥，提个问题，readview里的所有活跃事务Id如何理解，做事务操作的时候，那一行数据不是应该被互斥锁锁住么，那怎么会有活跃Id的说法，不是应该只有一个事务在操作数据么？这东西我实在想不明白，，可以的话加个VX好么老哥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624212875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1308784,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","nickname":"某、人","note":"","ucode":"ADB42AA12A11C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1668117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLgibqHsl97Oq3nvnEVz7V3kaGKLmia0Ja8c4yXO7QeLKiakganRJomNGgYToW4RnFs60zibDTHicjE5w/132","nickname":"学而不思则惘","note":"","ucode":"8ED2B08AA5A755","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393204,"discussion_content":"读和写都能叫做一个事务，这里主要是说读与写，不是写与写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631287298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379892,"ip_address":""},"score":393204,"extra":""}]},{"author":{"id":1627397,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d5/05/8fd8ca4c.jpg","nickname":"快快乐乐","note":"","ucode":"D093D8D5836FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342143,"discussion_content":"只能说 一个字赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610596712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4c/43/150c70c2.jpg","nickname":"陈松Plus","note":"","ucode":"0074BDECFA3D1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333277,"discussion_content":"mark, 感谢老师和层主。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607494197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304870,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e9/26/ee614fd4.jpg","nickname":"依山观澜","note":"","ucode":"F93BDCAB56B9B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332008,"discussion_content":"解决了我的疑惑，undo日志只存在修改前的数据，如果所有的数据都是根据undo推算的，那么最新的数据是从哪里取的 我一开始以为是结合redo，但是细想 redo不过只是记录了修改后的值，并且redo是循环记录，最后始终被擦除，同步到磁盘，想想不太可能，第4条有点解惑 还是评论香","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607044892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134042,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/da/2869833a.jpg","nickname":"活在梦里","note":"","ucode":"D530453C349393","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36531,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571389953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50180,"user_name":"lucky star","can_delete":false,"product_type":"c1","uid":1311928,"ip_address":"","ucode":"C61FC9CA1C8A60","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/b8/3fd2f448.jpg","comment_is_top":false,"comment_ctime":1544887284,"is_pvip":false,"replies":[{"id":"18029","content":"嗯嗯，分析得很对。<br><br>茅塞顿开的感觉很好，恭喜🎉🎈","user_name":"作者回复","comment_id":50180,"uid":"1264162","ip_address":"","utype":1,"ctime":1544897114,"user_name_real":"林晓斌"}],"discussion_count":16,"race_medal":0,"score":"413861747700","product_id":100020801,"comment_content":"答案：<br>      分析： 假设有两个事务A和B， 且A事务是更新c=0的事务； 给定条件： 1， 事务A update 语句已经执行成功， 说明没有另外一个活动中的事务在执行修改条件为id in 1,2,3,4或c in 1,2,3,4, 否则update会被锁阻塞； 2，事务A再次执行查询结果却是一样， 说明什么？说明事务B把id或者c给修改了， 而且已经提交了， 导致事务A“当前读”没有匹配到对应的条件； 事务A的查询语句说明了事务B执行更新后，提交事务B一定是在事务A第一条查询语句之后执行的； <br><br>所以执行顺序应该是：<br>1， 事务A select * from t;<br>2,   事务B update t set c = c + 4;  &#47;&#47; 只要c或者id大于等于5就行;  当然这行也可以和1调换， 不影响<br>3,   事务B commit;<br>4,   事务A update t set c = 0 where id = c; &#47;&#47; 当前读； 此时已经没有匹配的行<br>5， 事务A select * from t;<br><br>读完第三篇后就陷入了事务执行原理的泥潭中了， 也找了不少相关资料， 但总感觉还不是特别明白， 今天看完这篇终于茅塞顿开呀， 仿佛打通了任督二脉了。。。。<br>","like_count":96,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432906,"discussion_content":"嗯嗯，分析得很对。\n\n茅塞顿开的感觉很好，恭喜🎉🎈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544897114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1951832,"avatar":"","nickname":"Geek_bef3ae","note":"","ucode":"D1CA954B1E1973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281517,"discussion_content":"需要这么麻烦的构造吗？第一个事务先开始查询，然后第二个事务再修改，这样第一个事务再次查询的时候，数据还是没有变。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591756440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250580,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/14/21e0807e.jpg","nickname":"gm","note":"","ucode":"0E39AE5BE34E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409743,"discussion_content":"事务A执行update时，是当前读，但是条件不满足，更新记录数为0，并未影响数据版本","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635500321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335858,"discussion_content":"RR下普通读是快照读，但是自己修改的会被读到，两次普通select数据是一样的证明有其他事务修改了数据使update不成立","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608356830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1559541,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kEOm2xpFyn0WVH04ibTyadaXKPowWfzPaOv1ibGrM2Y4eTSbSGYibvibZKW0dRibJqX8dnwMEwGZoDAiaicJ4gR0JWeVw/132","nickname":"Lyn4ever","note":"","ucode":"D4D32B7A9EBFAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248128,"discussion_content":"可重复读不是读取的是事物开启前的状态吗？为什么会在A事务中update的时候读取到B事务提交的数据呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587832237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1984312,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/47/38/edd279d6.jpg","nickname":"对方正在输入...","note":"","ucode":"69404813C6A47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1559541,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kEOm2xpFyn0WVH04ibTyadaXKPowWfzPaOv1ibGrM2Y4eTSbSGYibvibZKW0dRibJqX8dnwMEwGZoDAiaicJ4gR0JWeVw/132","nickname":"Lyn4ever","note":"","ucode":"D4D32B7A9EBFAA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288386,"discussion_content":"update语句是当前读","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593740102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":248128,"ip_address":""},"score":288386,"extra":""},{"author":{"id":1285652,"avatar":"","nickname":"mycat","note":"","ucode":"6878BD32D042F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1559541,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kEOm2xpFyn0WVH04ibTyadaXKPowWfzPaOv1ibGrM2Y4eTSbSGYibvibZKW0dRibJqX8dnwMEwGZoDAiaicJ4gR0JWeVw/132","nickname":"Lyn4ever","note":"","ucode":"D4D32B7A9EBFAA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309340,"discussion_content":"只有在查询的时候，才是可重复读，在更新的时候，需要当前读，然后再更新。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601261674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":248128,"ip_address":""},"score":309340,"extra":""}]},{"author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135154,"discussion_content":"我理解错了，第三步虽然改了数据，但是第五步查询到的结果是事务启动时候的视图，结果保持不变。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579073422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2340596,"avatar":"","nickname":"阳台","note":"","ucode":"CD76C0917139AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375090,"discussion_content":"怎么把数据修改回来啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621479978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1883737,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/be/59/d890189f.jpg","nickname":"小猫","note":"","ucode":"615CF321850403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2340596,"avatar":"","nickname":"阳台","note":"","ucode":"CD76C0917139AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409262,"discussion_content":"不需要修改回来，如果改回来就把别人的更新覆盖掉了。\n实际上这个问题真正需要解决的是事物执行前后的一致性问题。在这个事务中需要保证第二条update语句与第一条select保持一致。只需要把第一个select改成当前读（select for update）锁住满足条件的行，这样的话update语句就不会被别人影响，第三条语句就正常select就可以，因为一定能读到自己的修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635404547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375090,"ip_address":""},"score":409262,"extra":""}]},{"author":{"id":1112540,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/dc/0a1eeb4c.jpg","nickname":"schwarzeni","note":"","ucode":"C1969191F334BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334003,"discussion_content":"厉害，我按照你的思路复现出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607690804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331864,"discussion_content":"看到这里好像可以回答之前留言的： 需要将c重新修改为原来的值是多余了。 因为在RR隔离下， 事务A在事务B执行commit之后也是拿不到执行之后的结果的，这时候A已经开始了事务，保持了一致性读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606995972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135146,"discussion_content":"可是作业中，第五步重新查询出来的结果和第一步是一样的。但是第三步已经改了数据了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579072747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143004,"discussion_content":"在RR级别下，事务A开始时就获取到了数据，但是事务B进行了全表自增更新，并提交了事务，即使事务A在更新时即使拿到了行锁，但是已经没有满足条件的数据了，事务B提交的事务时间是晚于事务A视图创建的时间的，所以事务B提交的值是不可见的。故，第五步与第一步的结果是一样的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579487282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":135146,"ip_address":""},"score":143004,"extra":""},{"author":{"id":1309374,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fa/be/23b540ed.jpg","nickname":"Wch","note":"","ucode":"AC876A96389B65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351398,"discussion_content":"谢谢，懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614258898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143004,"ip_address":""},"score":351398,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8845,"discussion_content":"@lucky star你的评论也让我从课后习题的泥潭中终于挣扎出来了！赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568082383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47447,"user_name":"沙亮亮","can_delete":false,"product_type":"c1","uid":1099492,"ip_address":"","ucode":"E6CF0D5B1E6691","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/e4/ec572f55.jpg","comment_is_top":false,"comment_ctime":1544144766,"is_pvip":false,"replies":[{"id":"16920","content":"谢谢你，我倍受鼓舞呀😄","user_name":"作者回复","comment_id":47447,"uid":"1264162","ip_address":"","utype":1,"ctime":1544148233,"user_name_real":"林晓斌"}],"discussion_count":3,"race_medal":0,"score":"349436495742","product_id":100020801,"comment_content":"买了很多专栏，丁奇老师绝对是为读者考虑最为细致的，不管是从回复大家的提问，还是从学习者角度考虑优化文章内容，最后到思考题的讲解，都是最细致的","like_count":81,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431769,"discussion_content":"谢谢你，我倍受鼓舞呀😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544148233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2252648,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5f/68/8e4407c7.jpg","nickname":"💡","note":"","ucode":"8AB762A8CDFEF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":588546,"discussion_content":"这个钱花得真的值！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663827821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":431769,"ip_address":"浙江"},"score":588546,"extra":""}]},{"author":{"id":2563453,"avatar":"https://static001.geekbang.org/account/avatar/00/27/1d/7d/f2fd5159.jpg","nickname":"成电嘤嘤怪","note":"","ucode":"C08B7BEFA018A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368950,"discussion_content":"这个钱花得真的值！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618887508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109529,"user_name":"婉月*^_^*","can_delete":false,"product_type":"c1","uid":1469005,"ip_address":"","ucode":"33112807D6BDC5","user_header":"https://static001.geekbang.org/account/avatar/00/16/6a/4d/bcf6db3a.jpg","comment_is_top":false,"comment_ctime":1562051590,"is_pvip":false,"discussion_count":16,"race_medal":0,"score":"323684598790","product_id":100020801,"comment_content":"感觉图三的黄色块上的文字有一点点误导，其实黄色块只是大于低水位小于高水位，但是黄色块中也有已提交的事务，并不是全都是未提交事务，而黄色块里的事务提交没提交，正是要通过活跃事务数组判断的。黄色块中的事务，且在活跃事务数组中的部分，是生成快照时还未提交的事务；黄色块中的事务，且不在活跃事务数组中的部分，是生成快照时已经提交了的事务。<br>总的来说，事务ID高于高水位（当前系统里已经创建过的事务ID的最大值）的一定是建立快照时还没创建的，那么对当前事务不可见；小于高水位的且在活跃事务数组中的，说明建立快照时它还在活跃，一定是还没提交的，那么对当前事务不可见；小于高水位且不在活跃事务数组中的，说明建立了快照时它已经提交了，那么对当前事务可见。<br>希望我没说错。。。","like_count":75,"discussions":[{"author":{"id":2153703,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/e7/a318c901.jpg","nickname":"Moonlighting","note":"","ucode":"FDBC5C36CE08CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588642,"discussion_content":"其实把 3b去掉就对了，b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663922271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1842929,"avatar":"","nickname":"180","note":"","ucode":"199241B0F19CC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561243,"discussion_content":"黄色部分 已提交的事物id 和 自己的事务id 可见， 其他不可见。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649584020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398176,"discussion_content":"全对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632748620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1719757,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3d/cd/b74e13cd.jpg","nickname":"会飞的猪排","note":"","ucode":"EC463251A271EE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387425,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628161019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519205,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/65/1386d411.jpg","nickname":"xiaowei123456","note":"","ucode":"7ADFDBE234C936","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349559,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613313486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1962000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUWdGOkmDx6yVZY7gibV7kflrWBnVJibuMIeTNTOprymdtCNz7MOWOib9Cib0pyc8bxx1vtsrXmvl03g/132","nickname":"Geek_ZHYLook","note":"","ucode":"D1940E5FBA4284","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337297,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608865656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2017791,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c9/ff/810bf4e8.jpg","nickname":"大雄","note":"","ucode":"12613BE2C22D8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332181,"discussion_content":"我也有这个理解，在黄色区块并且不在活动ID列表，事务是已经提交的，对当前事务可见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607086736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2183195,"avatar":"https://static001.geekbang.org/account/avatar/00/21/50/1b/456acce2.jpg","nickname":"K","note":"","ucode":"1A126BFF3289D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331228,"discussion_content":"希望作者大大改下图 我开始看的一脸懵逼 后来才想明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606811731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046550,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxY3fx9Cs0BCxyuOqdlMY8UFZul9TEVp1rAKD16z3VHncBpfHAficsdHrxN6wUqH4xWFiby31iaZWA/132","nickname":"guoran","note":"","ucode":"D16D9F97219D9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325067,"discussion_content":"我也是这样理解的，有人能否在这里给予确认一下不😂?不过这里有1个疑问就是低水位是事务ID最小的作为分界，这就很模糊了，那绿色区域的事务ID是不是和黄色区域以及红色区域其实没关系，意思是并非是顺序的，可能是随机的?绿区可能有事务ID为20，黄色区域事务ID以及红色区域事务ID可能为5、6、7……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605231136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2679054,"avatar":"","nickname":"Geek_ade41a","note":"","ucode":"1D9F1FA9CD3204","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2046550,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxY3fx9Cs0BCxyuOqdlMY8UFZul9TEVp1rAKD16z3VHncBpfHAficsdHrxN6wUqH4xWFiby31iaZWA/132","nickname":"guoran","note":"","ucode":"D16D9F97219D9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381709,"discussion_content":"不可能的，黄色区域的ID肯定都是大于低水位的，而绿色区域的都是小于低水位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625191752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325067,"ip_address":""},"score":381709,"extra":""},{"author":{"id":2957885,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/22/3d/06de5315.jpg","nickname":"_","note":"","ucode":"AC93E55704E308","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2679054,"avatar":"","nickname":"Geek_ade41a","note":"","ucode":"1D9F1FA9CD3204","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559463,"discussion_content":"这个图没画好，绿色区域是已提交事务。低水位（是当前事务生成一致性图时活跃数组最小事务id）。假设：当前活跃A事务为99，开始事务时活跃数组为98，99。B事务100，开启时98，100，那么对于事务B的一致性图99就在绿色区域（已提交事务）。99&gt;98(当前低水位),且在绿色已提交事务区域。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648784811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":381709,"ip_address":""},"score":559463,"extra":""}]},{"author":{"id":1716827,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/5b/d0c7e813.jpg","nickname":"luo","note":"","ucode":"1A1DA8EB916ECF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305264,"discussion_content":"赞同，这里我也被困惑了会，但后面多看了几遍也是这样想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599834750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dd/c5/9ae99a7f.jpg","nickname":"¾阳光","note":"","ucode":"C67D0E18F6158D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283201,"discussion_content":"说的很不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592210493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583588,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/e4/ade74d94.jpg","nickname":"hejun","note":"","ucode":"DCF01B4159178F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260969,"discussion_content":"赞，我也是这么理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588920177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332244,"avatar":"https://static001.geekbang.org/account/avatar/00/14/54/14/84d49453.jpg","nickname":"杜鑫","note":"","ucode":"D7651198B2C487","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242410,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587478544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812807,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","nickname":"御风","note":"","ucode":"51C8212BE06364","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159547,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580704904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47656,"user_name":"csoulsi","can_delete":false,"product_type":"c1","uid":1227336,"ip_address":"","ucode":"96C9BBE9097FB3","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/48/c892a35b.jpg","comment_is_top":false,"comment_ctime":1544173115,"is_pvip":true,"replies":[{"id":"17024","content":"这是个好问题，也是并发业务常见的问题。<br><br>一开始Select 加锁虽然可以，但是会比较严重地影响并发数。<br><br>比较简单的做法是update语句的where 部分加一个条件： where nun &gt;=200 .<br>然后在程序里判断这个update 语句的affected_rows, <br>如果等于1 那就是符合预期；<br>如果等于0，那表示库存不够减了，业务要处理一下去，比如提示“库存不足”","user_name":"作者回复","comment_id":47656,"uid":"1264162","ip_address":"","utype":1,"ctime":1544205717,"user_name_real":"林晓斌"}],"discussion_count":21,"race_medal":0,"score":"306486851131","product_id":100020801,"comment_content":"老师，<br>这两天反复读这篇文章，想到一个业务上的问题：减库存的场景<br>当前库存：num=200<br>假如多线程并发：<br>AB同时开启事务，A先请求到行锁，<br>A：<br>start transaction;<br>select num from t where num&gt;0;先查询当前库存值（num&gt;0）<br>update t set num=num-200; 库存减量<br><br>B：<br>start transaction;<br>select num from t where num&gt;0;先查询当前库存值（num&gt;0）<br>update t set num=num-200; 库存减量<br>----结果---<br>A：查询到num=200,做了库存减量成了0<br>B：事务启动后，查询到也是200，等 A 释放了行锁，B进行update，直接变成 -200<br>但是 B 查询时，时有库存的，因此才减库存，结果变成负的。<br>老师，对于这种场景，怎么避免减成负值？<br>给 select 加读锁或者写锁吗 ？这种select 加锁，对业务影响大吗？<br>","like_count":71,"discussions":[{"author":{"id":1556722,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c0/f2/1b2ed786.jpg","nickname":"巴萨巴萨！！！","note":"","ucode":"C204AD44347738","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294179,"discussion_content":"用乐观锁控制下就好了，先查询在更新，先查询除了num=200，更新的时候where条件挂上num = 200就好了，如：update t set num=num-200 where num = 200;这个语句时当前读，如果num已经被人从200改成了0，那么这个语句执行是不成功的。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1595820188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1282648,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/58/b4f6365d.jpg","nickname":"小北","note":"","ucode":"3A23079E4AA92E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1556722,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c0/f2/1b2ed786.jpg","nickname":"巴萨巴萨！！！","note":"","ucode":"C204AD44347738","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390166,"discussion_content":"应该是 >= 200 吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629698889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294179,"ip_address":""},"score":390166,"extra":""},{"author":{"id":2032894,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/fe/60db4684.jpg","nickname":"菜波","note":"","ucode":"DA7DED66709FA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1556722,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c0/f2/1b2ed786.jpg","nickname":"巴萨巴萨！！！","note":"","ucode":"C204AD44347738","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395773,"discussion_content":"我也这么用过，但是实测发现在并发条件下更新，完全的cas会导致较多的更新失败。其实这里解决的是num不能被减成负，所以使用num>=200来保证就可以了。既保证业务正确，也提高并发性能","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1632337245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294179,"ip_address":""},"score":395773,"extra":""}]},{"author":{"id":2009461,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/a9/75/dbccd12d.jpg","nickname":"稻草人","note":"","ucode":"6694EE2CD36B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354323,"discussion_content":"确实会出现这种情况，就是根据条件select出主键ID，然后根据主键ID去update字段，那么就可能会误伤。最好的做法就是在update的条件中除了主键ID外还要再加上之前select的条件，才能避免这种误伤情况。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1615275738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467281,"avatar":"https://static001.geekbang.org/account/avatar/00/16/63/91/05f491f1.jpg","nickname":"lm a cat","note":"","ucode":"8269EB2082BD43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46081,"discussion_content":"1  select   version from  table  where id=1\nupdate  table set num=num-200 where id=1 and version=(查询到的值)\n2 update table  set num=num-200 where id=1 and num-200>0\n1 和2 感觉 2的并发会更高。1限定死了值。2只要num-200>0 就可以。2会不会出现其他问题? 希望老师给解答下\n\n\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573117708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1467281,"avatar":"https://static001.geekbang.org/account/avatar/00/16/63/91/05f491f1.jpg","nickname":"lm a cat","note":"","ucode":"8269EB2082BD43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288849,"discussion_content":"1是乐观锁(你怎么没写version=version+1?), 如果并发写入很频繁, 那么失败也会很频繁. \n2是自带行级锁 (当然1的update也有自带行级锁), 写入会串行, 解决并发量适中的场景也只能这样. 如果并发太高, 那就是hot key problem, 后来的写入会timeout. 这就要用(写)缓存或者消息队列来辅助处理了. ","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1593911405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46081,"ip_address":""},"score":288849,"extra":""},{"author":{"id":3007210,"avatar":"","nickname":"Geek_a1699c","note":"","ucode":"CF7DB00BE36B77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574218,"discussion_content":"请问：写入会串行是个啥情况呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653906712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288849,"ip_address":""},"score":574218,"extra":""}]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431845,"discussion_content":"这是个好问题，也是并发业务常见的问题。\n\n一开始Select 加锁虽然可以，但是会比较严重地影响并发数。\n\n比较简单的做法是update语句的where 部分加一个条件： where nun &amp;gt;=200 .\n然后在程序里判断这个update 语句的affected_rows, \n如果等于1 那就是符合预期；\n如果等于0，那表示库存不够减了，业务要处理一下去，比如提示“库存不足”","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1544205717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135151,"discussion_content":"老师这个答案完美，直接利用行锁和当前读解决，不使用视图","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579073166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1210505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLUz2nCCzSKibFJibtoAJXo2lP3tmeRUe2EqmQr4kYbCv5q4eexhfN3XicynSx5uZ5EREumRwZxqHjGw/132","nickname":"小跳蛙","note":"","ucode":"6C4DADD8414F9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222559,"discussion_content":"老师的解决方法是不是CAS乐观锁并发更改","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586156959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":135151,"ip_address":""},"score":222559,"extra":""},{"author":{"id":1116934,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKR4f3mAqslFT42Cp95y62vClKsDbIiaAgQh7vMcc58K2jc1BWnovkBJMDTWuREcA9TWbtbGUtVqjQ/132","nickname":"张晨辉","note":"","ucode":"50710F2CE6594F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLUz2nCCzSKibFJibtoAJXo2lP3tmeRUe2EqmQr4kYbCv5q4eexhfN3XicynSx5uZ5EREumRwZxqHjGw/132","nickname":"小跳蛙","note":"","ucode":"6C4DADD8414F9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286863,"discussion_content":"是的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593313105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222559,"ip_address":""},"score":286863,"extra":""},{"author":{"id":1587367,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kDAfyOQibroSCUliaG2tiachpaKyuPGd6eyRe20ibvb3R1QjSrLSufevBIOLQjAJpricM6mqeJJ4pccnbgKIfvoFnKw/132","nickname":"Geek_bcdbd4","note":"","ucode":"681F337C89A216","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLUz2nCCzSKibFJibtoAJXo2lP3tmeRUe2EqmQr4kYbCv5q4eexhfN3XicynSx5uZ5EREumRwZxqHjGw/132","nickname":"小跳蛙","note":"","ucode":"6C4DADD8414F9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302968,"discussion_content":"是用的更新时用的是当前读不是版本快照吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599099703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222559,"ip_address":""},"score":302968,"extra":""}]},{"author":{"id":1238337,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/41/ffe533ba.jpg","nickname":"尚帝","note":"","ucode":"6F1703FD5A23A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535369,"discussion_content":"where＞200相当于乐观锁，业务根据乐观锁更新结果反馈处理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638420813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2249670,"avatar":"","nickname":"mofee888","note":"","ucode":"F1FB6F68DCF802","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331378,"discussion_content":"并发场景下，uodate 的时候能加上条件要尽量加上条件","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606837851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448440,"avatar":"https://static001.geekbang.org/account/avatar/00/16/19/f8/b4c169b6.jpg","nickname":"凌晨一点","note":"","ucode":"09CA420DD0BA3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197419,"discussion_content":"我从另外一个角度来说下吧，rr是强隔离级别，你设成rc的级别会更好吧，因为rc总能查到最新的行数据快照。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583419761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1073487,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/4f/e0b71e72.jpg","nickname":"我是谁","note":"","ucode":"D6C67E29D62EA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448440,"avatar":"https://static001.geekbang.org/account/avatar/00/16/19/f8/b4c169b6.jpg","nickname":"凌晨一点","note":"","ucode":"09CA420DD0BA3A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263732,"discussion_content":"单纯rc应该不行，并发情况下，b selelct的时候可能a还没有commit，这个时候b select的数据还是a update之前的数据","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589244951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":197419,"ip_address":""},"score":263732,"extra":""},{"author":{"id":1464213,"avatar":"https://static001.geekbang.org/account/avatar/00/16/57/95/a4d02ec6.jpg","nickname":"李仕国","note":"","ucode":"81EBB4CAFF4422","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1073487,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/4f/e0b71e72.jpg","nickname":"我是谁","note":"","ucode":"D6C67E29D62EA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278054,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591145823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263732,"ip_address":""},"score":278054,"extra":""}]},{"author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397876,"discussion_content":"当前读对B事务为什么没起作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632699240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408091,"discussion_content":"起作用啊，不是结果变成-200了吗？题主的问题是，用select查询到的200，如果作为程序应用的判断条件，然后直接执行update语句，其实就出问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635174233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397876,"ip_address":""},"score":408091,"extra":""}]},{"author":{"id":1508329,"avatar":"https://static001.geekbang.org/account/avatar/00/17/03/e9/6358059c.jpg","nickname":"GalaxyCreater","note":"","ucode":"C79E8A088D57CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139944,"discussion_content":"select加锁也不一定可以，select解锁完到执行update之间也会存在漏洞，值被其他事务改了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579333862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1007271,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","nickname":"BitInit","note":"","ucode":"BDDDA0F51B1EFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1508329,"avatar":"https://static001.geekbang.org/account/avatar/00/17/03/e9/6358059c.jpg","nickname":"GalaxyCreater","note":"","ucode":"C79E8A088D57CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210997,"discussion_content":"加锁应该可以的，事务A对select加写锁，其他的事务都会阻塞在读取num上，只有事务A在commit后才会释放该锁，其他事务才能又加锁读取到num的值。但是这样所有线程对num的读取和修改都串行了，所以非常影响并发数","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1584798564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":139944,"ip_address":""},"score":210997,"extra":""}]}]},{"had_liked":false,"id":122660,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1565457298,"is_pvip":false,"replies":[{"id":"45006","content":"厉害了。。~","user_name":"作者回复","comment_id":122660,"uid":"1264162","ip_address":"","utype":1,"ctime":1565507009,"user_name_real":"林晓斌"}],"discussion_count":5,"race_medal":0,"score":"280738331538","product_id":100020801,"comment_content":"事物就像一根线，排前排后看创建。提交顺序要看清，否则结果搞不清。","like_count":65,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462349,"discussion_content":"厉害了。。~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565507009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232984,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/58/ac40120f.jpg","nickname":"biubiubiu","note":"","ucode":"3310E95533D22B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284781,"discussion_content":"nb","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592635350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101234,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/b2/807137b9.jpg","nickname":"北方易初","note":"","ucode":"C57FDBD37F43E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581245,"discussion_content":"这是打油诗呀。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658661474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1721924,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/46/44/c81e9f3d.jpg","nickname":"🤔","note":"","ucode":"1B26D84CC444B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409439,"discussion_content":"你要考研呐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635433216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1946751,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b4/7f/33d825e7.jpg","nickname":"Ｎull","note":"","ucode":"05887BD66FC33E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398577,"discussion_content":"这么哲学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632815005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46017,"user_name":"☞","can_delete":false,"product_type":"c1","uid":1302793,"ip_address":"","ucode":"6FAEF05F234D2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/09/9483f537.jpg","comment_is_top":false,"comment_ctime":1543834181,"is_pvip":false,"replies":[{"id":"16473","content":"你设计一个“比低水位大，但是在当前事务启动前，就已经提交了的例子😄","user_name":"作者回复","comment_id":46017,"uid":"1264162","ip_address":"","utype":1,"ctime":1543845723,"user_name_real":"林晓斌"}],"discussion_count":32,"race_medal":0,"score":"164752591429","product_id":100020801,"comment_content":"老师您好：<br>    今天重新看了一下这章您的修改地方，有个地方不明白<br>    落在黄色区域未提交事务集合部分怎么还要分类，低水位+高水位不就是这个数组了吗，之前说，这个数组是记录事务启动瞬间，所有已经启动还未提交的事务ID，那不应该是未提交的事务吗，不就应该是不可读的吗<br>之前说的是启动时会获取一个最大row trx_id，所有大于这个id都不认，这个id肯定是已经提交了的事务的才对啊，这个id不才应该是数组的高水位吗，这里有点懵了","like_count":38,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431305,"discussion_content":"你设计一个“比低水位大，但是在当前事务启动前，就已经提交了的例子😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543845723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583588,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/e4/ade74d94.jpg","nickname":"hejun","note":"","ucode":"DCF01B4159178F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260965,"discussion_content":"老师说了以下这段话：\n在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。\n我对这段话的理解，举个例子来说明。\n假如当前系统已经创建过的事务 ID的最大值是6，那么系统过去创建过的事务ID有1，2，3，4，5，6。假如现在是事务4开启了一致性视图，在开启的瞬间，得到“活跃”事务ID数组[3，4，5]。然后事务4算得，低水位3，高水位7（当前最大事务ID 6+1）。\n然后事务4读取数据的row trx_id，判断如下：\n1、row trx_id 为1，2时，由于小于低水位3，所以1，2在绿色区域，对事务4可见。\n2、row trx_id 为7，8，9或更大时，由于都大于或等于高水位7，所以都在红色区域，对事务4不可见。且无论他们是否已提交，不用管，一律不可见。\n3、row trx_id 为6，大于低水位3，小于高水位7，也就是在所谓的黄色区域，但是6又不在活跃数组[3，4，5]中，那么推断6只能在绿色区域中。就是说6是在事务4一致性视图开启前，已提交的事务。\n第3点就是老师说的判定方法里的3(b)，刚开始也是没搞懂，反复看了老师说的那段话就想通了。","likes_number":36,"is_delete":false,"is_hidden":false,"ctime":1588919763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":15,"child_discussions":[{"author":{"id":1961855,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ef/7f/8b69e4aa.jpg","nickname":"二月","note":"","ucode":"0624B1B40CDBF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1583588,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/e4/ade74d94.jpg","nickname":"hejun","note":"","ucode":"DCF01B4159178F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274660,"discussion_content":"看了你的评论，终于弄懂了，不容易，感谢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590595376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":260965,"ip_address":""},"score":274660,"extra":""},{"author":{"id":1229219,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/JJNEztkFUvLGlyjT85WSNKewk6UkKwLKVMYx9ddjoicibrBkxhMONP8Jx2NxF4Ny5eq6FNfQZgK8eDLZmY4cRQvg/132","nickname":"yk","note":"","ucode":"DE563958F422BD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1583588,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/e4/ade74d94.jpg","nickname":"hejun","note":"","ucode":"DCF01B4159178F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279872,"discussion_content":"这个活跃数据是在事务启动瞬间创建的，事务的ID又是在启动的时候申请的，栗子里边ID为4的事务，难道不是应该早就已经启动了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591441231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":260965,"ip_address":""},"score":279872,"extra":""},{"author":{"id":1040831,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e1/bf/7b22efac.jpg","nickname":"seafooler","note":"","ucode":"F9603E3907711A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1229219,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/JJNEztkFUvLGlyjT85WSNKewk6UkKwLKVMYx9ddjoicibrBkxhMONP8Jx2NxF4Ny5eq6FNfQZgK8eDLZmY4cRQvg/132","nickname":"yk","note":"","ucode":"DE563958F422BD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":289883,"discussion_content":"一致性视图不一定是十五启动的时候就开启的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594257944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279872,"ip_address":""},"score":289883,"extra":""}]},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3632,"discussion_content":"因为事务ID的提交情况并不一定按照事务ID的大小有序排列的，已提交的事务ID是不连续的。在文章中的“落在黄色区域”，只是说明事务ID的数值在黄色的区间内，但是它有可能不在事务启动时，创建的活跃事务的ID数组里。","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1564649124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016574,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c5/3e/3df0c488.jpg","nickname":"jiyoujiu","note":"","ucode":"7A3EAA2DA97A78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275571,"discussion_content":"理解了，3b的问题主要是因为readview记录的是当前活跃的事务，这样数组中间自然不是单调递增的\n例如：当前活跃事务【2，3，5，7】，其中5为当前事务id，7为hw，中间事务4，6已经不是活跃事务了，它们在事务5生成readview时已经提交。这时候在进行读取操作的时候考虑的就是3b的情况。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1590731463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1310327,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fe/77/b9efc48d.jpg","nickname":"A","note":"","ucode":"63DBB5F185EEF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2016574,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c5/3e/3df0c488.jpg","nickname":"jiyoujiu","note":"","ucode":"7A3EAA2DA97A78","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299002,"discussion_content":"所以问题的关键在于:\na: 获取事务id 5;\nb：生成 事务5的数组;\na+b操作并不是原子的，而b操作自身是原子的，而由于a+b操作并不原子导致b操作生成的数组元素在当前事务5和高水位之间不连续，小于5的也可能不连续，也就是图片中黄色区域并不连续，不连续的元素中存在 在a 和b 操作之间，提交的事务（x集合），x这部分就是3b的情况。\n所以图片黄色部分叫 未提交事务集合 是有问题的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597503951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275571,"ip_address":""},"score":299002,"extra":""},{"author":{"id":1393889,"avatar":"","nickname":"auauauau","note":"","ucode":"297390A0D6ED42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1310327,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fe/77/b9efc48d.jpg","nickname":"A","note":"","ucode":"63DBB5F185EEF2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307487,"discussion_content":"你给我讲明白了 a原子性 b原子性 a+b并不是原子性，类比volatile变量 ++","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600667113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299002,"ip_address":""},"score":307487,"extra":""},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2016574,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c5/3e/3df0c488.jpg","nickname":"jiyoujiu","note":"","ucode":"7A3EAA2DA97A78","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371393,"discussion_content":"\n当前事务是5，6就算提交了也不可见，因为它是当前事务启动之后的事务，在红色部分，否则就更矛盾了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619753878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275571,"ip_address":""},"score":371393,"extra":""}]},{"author":{"id":1221753,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a4/79/35ab3a19.jpg","nickname":"spuryin","note":"","ucode":"17474DCB7D293D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91314,"discussion_content":"所以黄色区域，不应该叫做未提交事务集合？","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1576826404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1815212,"avatar":"","nickname":"Geek_8b6021","note":"","ucode":"2EBCA91FFA1BD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1221753,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a4/79/35ab3a19.jpg","nickname":"spuryin","note":"","ucode":"17474DCB7D293D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290537,"discussion_content":"我感觉也是，名字上有点误导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594526907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":91314,"ip_address":""},"score":290537,"extra":""}]},{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274885,"discussion_content":"你这个比作者写的好理解，他画的那个数组的图有误导性 ，会让人以为那个三个颜色都是数组 其实不然","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1590628654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388314,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4RdOss6AW97KUaufOFIhQGMWJoRJvSZiayJBa36ic0A3M27hUFSBZhy4ZoXOp6gj1apln2N86icZEg1Z1f5PLEp8A/132","nickname":"Geek_wuming","note":"","ucode":"AE749892284E3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239232,"discussion_content":"比如 21 22 23 24 25 26 27 28 29  这九个transaction id  26是当前的事务id  21是低水位(启动未提交) 29是高水位  ，当前活跃的是21 22 23 25 26 27。 同时24，26，28是已经提交了的事务id, 所以26的视图数组就是【21 22 23 25 26 27】，因此才会有这a， b两种情况。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587286015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105977,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/39/efc464b4.jpg","nickname":"zzd","note":"","ucode":"0117D09E43097B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46849,"discussion_content":"同样的疑问，翻到这里茅塞顿开。感谢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573218008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697605,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/KUWZH9adGNsjZ6m9hYh6ttoibgcUnaplS7XGlYuyUybLpdLPZDB56QAlzfQ8wSfs8Pd1T9RiaY7sYibD2wgrCo0UQ/132","nickname":"xyh","note":"","ucode":"CD0C45A63F434E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335427,"discussion_content":"建议看一下这篇文章http://mysql.taobao.org/monthly/2014/12/01/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608192474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319323,"discussion_content":"获取事务id 和 创建一致性视图 是两个操作:\n获取事务id: 是在begin事务的时候.\n创建一致性视图: 是在事务的第一条语句执行的时候.\n\n可以这么理解吗? @老师 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603984255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1011855,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/tkIyPeagl941T4kXmMiaqjyGesub9XB1Pwnb2KmAupWPNkTt2DQCuhG5AZsaAaF2cttUUx6HPicy78dCvZg6Yx6A/132","nickname":"liyongda","note":"","ucode":"D8FA17D93184C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561160,"discussion_content":"这个我试了，不是在begin的时候分配的trx_id，而是在第一条语句的时候分配的。\n查information_schema.innodb_trx就可以看到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649564342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319323,"ip_address":""},"score":561160,"extra":""}]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143019,"discussion_content":"所以，比低水位大，在当前事务启动前，就有事务提交的id，在处理低水位那个事务id事务时，如果该事务有select操作，那它也只能获取小于低水位值的那个up_limit_id的那个事务的值，不能获取这个比低水位大，并提交的那个事务id（假如它是已提交事务的up_limit_id)。备注：此处的up_limit_id是指的已提交事务的最大id值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579487797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45090,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1056767,"ip_address":"","ucode":"30300D7B752917","user_header":"https://static001.geekbang.org/account/avatar/00/10/1f/ff/aadcf237.jpg","comment_is_top":false,"comment_ctime":1543544956,"is_pvip":false,"replies":[{"id":"16047","content":"赞👍🏿<br>慢慢来","user_name":"作者回复","comment_id":45090,"uid":"1264162","ip_address":"","utype":1,"ctime":1543549486,"user_name_real":"林晓斌"}],"discussion_count":7,"race_medal":0,"score":"156162367612","product_id":100020801,"comment_content":"我不是dba，这个课程还是需要一些基础才会更有帮助，有些章节对我来说确实看起来有些吃力，但是在坚持，一遍看不懂看两遍、三遍，同时查漏补缺的去找一些资料补充盲点，还组了个一起学习的群，希望能坚持下去，收获满满","like_count":36,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430919,"discussion_content":"赞👍🏿\n慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543549486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141745,"discussion_content":"这篇文章我看了不下十遍，终于看明白了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1579439990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292635,"discussion_content":"后端开发，但是我觉得学习这个挺好的，只有明白了原理，后续自己写sql的时候才能更加如鱼得水，更注重性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595291625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152145,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/91/6d6ca42f.jpg","nickname":"怀草诗","note":"","ucode":"78F8B9B4628F15","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217356,"discussion_content":"原来这是写给dba看的？怪不得这篇我看的还是很吃力的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585548265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1250137,"avatar":"https://static001.geekbang.org/account/avatar/00/13/13/59/d4cb046c.jpg","nickname":"Harry","note":"","ucode":"1F7F0BE8508455","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1152145,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/91/6d6ca42f.jpg","nickname":"怀草诗","note":"","ucode":"78F8B9B4628F15","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":237907,"discussion_content":"这篇真的是信息量爆炸。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587196318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217356,"ip_address":""},"score":237907,"extra":""},{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1152145,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/91/6d6ca42f.jpg","nickname":"怀草诗","note":"","ucode":"78F8B9B4628F15","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":312299,"discussion_content":"不是给dba看的,dba的难多了哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602657636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217356,"ip_address":""},"score":312299,"extra":""}]},{"author":{"id":1448440,"avatar":"https://static001.geekbang.org/account/avatar/00/16/19/f8/b4c169b6.jpg","nickname":"凌晨一点","note":"","ucode":"09CA420DD0BA3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197401,"discussion_content":"有群号嘛想加入一起学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583419466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45355,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1543595753,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"113212745449","product_id":100020801,"comment_content":"这是典型的“丢失更新”问题。一个事务的更新操作被另外一个事务的更新操作覆盖。在RR状态下，普通select的时候是会获得旧版本数据的，但是update的时候就检索到最新的数据。<br>解决方法：在读取的过程中设置一个排他锁，在 begin 事务里， select 语句中增加 for update 后缀，这样可以保证别的事务在此事务完成commit前无法操作记录。参考《MySQL技术内幕 InnoDB存储引擎》","like_count":26,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398186,"discussion_content":"是个解决方案，但不是最优，会影响select并发性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632749313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374983,"discussion_content":"这会严重影响并发数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621430411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375099,"discussion_content":"这毫无疑问会影响并发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621482361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374983,"ip_address":""},"score":375099,"extra":""}]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335859,"discussion_content":"这没有覆盖把","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608356915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47499,"user_name":"Sinyo","can_delete":false,"product_type":"c1","uid":1307297,"ip_address":"","ucode":"57B243E7AB86A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAibnPX9jW8kqLcIfibjic8GbkQkEUYyFKJkc39hZhibVlNrqwTjdLozkqibI2IwACd5YzofYickNxFnZg/132","comment_is_top":false,"comment_ctime":1544148320,"is_pvip":false,"replies":[{"id":"16951","content":"赞，这个想通的感觉是很爽的","user_name":"作者回复","comment_id":47499,"uid":"1264162","ip_address":"","utype":1,"ctime":1544153019,"user_name_real":"林晓斌"}],"discussion_count":5,"race_medal":0,"score":"100328396128","product_id":100020801,"comment_content":"原来在同一行数据，最新版本的 row trx_id 是可能会小于旧版本的 row trx_id的，这里才搞明白(惭愧脸)。。","like_count":23,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431785,"discussion_content":"赞，这个想通的感觉是很爽的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544153019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106294,"discussion_content":"对，事务的提交顺序，和开启顺序没有关系","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1577528789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42508,"discussion_content":"后面开启事务，可能先提交","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572685950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206229,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","nickname":"Gopher","note":"","ucode":"3C1F9012BB486D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318668,"discussion_content":"row trx id的大小并不能说明版本大小么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603802623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312301,"discussion_content":"哈哈哈,可以,你也懂了,那个99.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602657984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45904,"user_name":"薛畅","can_delete":false,"product_type":"c1","uid":1307437,"ip_address":"","ucode":"1B665F467169F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/2d/711d73b2.jpg","comment_is_top":false,"comment_ctime":1543816188,"is_pvip":false,"replies":[{"id":"16392","content":"在这版里面就是用“低水位”来作为活跃的最小ID的概念，<br><br>嗯其实是为了理解原理，用了不同的表述方式哈。<br><br>后面发现上一版的描述方法太公式化了，不利于人工分析","user_name":"作者回复","comment_id":45904,"uid":"1264162","ip_address":"","utype":1,"ctime":1543817496,"user_name_real":"林晓斌"}],"discussion_count":4,"race_medal":0,"score":"83148194812","product_id":100020801,"comment_content":"评论区的好多留言都认为 up_limit_id 是已经提交事务 id 的最大值，但是老师并未指出有何不对，这让我很困惑。<br>老师在第二版的文章中通篇未提 up_limit_id，但是文章中有这么一段话：“InnoDB 为每个事务构造了一个数组，用来保存这个事务启动启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位”。那么这个 up_limit_id 指的是不是数组里面事务 ID 的最小值，假如是的话，那么 up_limit_id 并不是已经提交事务 id 的最大值，而是活跃事物的最小值。","like_count":19,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431262,"discussion_content":"在这版里面就是用“低水位”来作为活跃的最小ID的概念，\n\n嗯其实是为了理解原理，用了不同的表述方式哈。\n\n后面发现上一版的描述方法太公式化了，不利于人工分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543817496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467758,"avatar":"https://static001.geekbang.org/account/avatar/00/16/65/6e/8b74b1b0.jpg","nickname":"菜鸟成神之路","note":"","ucode":"7C4ACBE03F6C8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55872,"discussion_content":"mark下，up_limit_id是活跃事务的最小值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574407778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1642924,"avatar":"https://static001.geekbang.org/account/avatar/00/19/11/ac/6863a480.jpg","nickname":"宁超","note":"","ucode":"52F1CE95D0EE47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16718,"discussion_content":"你怎么知道是第二版的？我也和你有同样的矛盾，哪里来的 up_limit_id，这片今天看了三篇，做了一篇笔记。到现在看评论才通透了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568905049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1810051,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0uyg1IicbEhLwsgM2A2ROoyVdWdmUqZfQfs6G67w9m3hdRNBMOQJatQoACj3qNGgj2KVIgricaYiaQ/132","nickname":"木得感情的编码机器","note":"","ucode":"9C6CD47ADCB8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642924,"avatar":"https://static001.geekbang.org/account/avatar/00/19/11/ac/6863a480.jpg","nickname":"宁超","note":"","ucode":"52F1CE95D0EE47","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168341,"discussion_content":"哈哈，我看置顶问题也是一脸懵逼，他到底在说什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581573968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":16718,"ip_address":""},"score":168341,"extra":""}]}]},{"had_liked":false,"id":65257,"user_name":"赵孔胜","can_delete":false,"product_type":"c1","uid":1143925,"ip_address":"","ucode":"914AF151130748","user_header":"https://static001.geekbang.org/account/avatar/00/11/74/75/4bf3a04b.jpg","comment_is_top":false,"comment_ctime":1549165767,"is_pvip":false,"replies":[{"id":"23188","content":"👍<br><br>这个跟我文章的方案是不是差不多的？<br>不过把字段名改成 less_userid 和 greater_userid，确实更好理解了哦。<br>新春快乐~","user_name":"作者回复","comment_id":65257,"uid":"1264162","ip_address":"","utype":1,"ctime":1549270791,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"78858577095","product_id":100020801,"comment_content":"请教一个问题，业务上有这样的需求，A、B两个用户，如果互相喜欢，则成为好友。设计上是有两张表，一个是like表，一个是friend表，like表有user_id、liker_id两个字段，我设置为复合唯一索引即uk_user_id_liker_id。语句执行顺序是这样的：<br>以A喜欢B为例：<br>1、先查询对方有没有喜欢自己（B有没有喜欢A）<br>select * from like where user_id = B and liker_id = A<br>2、如果有，则成为好友<br>insert into friend<br>3、没有，则只是喜欢关系<br>insert into like<br><br>如果A、B同时喜欢对方，会出现不会成为好友的问题。因为上面第1步，双方都没喜欢对方。第1步即使使用了排他锁也不行，因为记录不存在，行锁无法生效。请问这种情况，在mysql锁层面有没有办法处理<br><br>-----<br><br>关于这个问题，之前遇到过一个面试题有点类似，我想到的方案是，like表的结构可以类似<br>```<br><br>CREATE TABLE `like` (<br>\t`less_userid` BIGINT(20) NOT NULL DEFAULT &#39;0&#39;,<br>\t`greater_userid` BIGINT(20) NOT NULL DEFAULT &#39;0&#39;,<br>\t`like_flag` BIGINT(20) NOT NULL DEFAULT &#39;0&#39;,<br>\tPRIMARY KEY(`less_userid`,`greater_userid`)<br>) ENGINE=InnoDB;<br><br><br>```<br>，当然也可以用`less_userid`和`greater_userid`字段建唯一索引，而不是主键。<br><br>`less_userid`表示更小的userid， `greater_userid`表示更大的userid，`like_flag`表示谁like谁，例如1表示`less_userid` like `greater_userid`，2表示`greater_userid` like `less_userid`，3表示互相like。每个like都是直接插入，如果发现唯一键冲突，update `like_flag`，取或运算，如果`like_flag`等于3，说明互相like了。<br>","like_count":18,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438376,"discussion_content":"👍\n\n这个跟我文章的方案是不是差不多的？\n不过把字段名改成 less_userid 和 greater_userid，确实更好理解了哦。\n新春快乐~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549270791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810051,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0uyg1IicbEhLwsgM2A2ROoyVdWdmUqZfQfs6G67w9m3hdRNBMOQJatQoACj3qNGgj2KVIgricaYiaQ/132","nickname":"木得感情的编码机器","note":"","ucode":"9C6CD47ADCB8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168346,"discussion_content":"也是一种方案，只是如果考虑其他业务需求的话，分开friend表和like表会减少多场景下对只有一个like表的并发操作。比如你要拉好友列表出来，同时还有人在like你，容易造成锁竞争。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581574183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45162,"user_name":"york","can_delete":false,"product_type":"c1","uid":1318852,"ip_address":"","ucode":"EE938B81A7FC04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGMibYc0m7cDHMsNRBUur2NPVnlBZFXoNjWomibfjnHeAO3XRt27VaH3WNtdUX11d3uIT1ZHWCxLeg/132","comment_is_top":false,"comment_ctime":1543553095,"is_pvip":false,"replies":[{"id":"16147","content":"那就是没复现😄","user_name":"作者回复","comment_id":45162,"uid":"1264162","ip_address":"","utype":1,"ctime":1543629939,"user_name_real":"林晓斌"}],"discussion_count":9,"race_medal":0,"score":"74557997127","product_id":100020801,"comment_content":"思考题为何我做出来成功修改为0了啊？","like_count":17,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430943,"discussion_content":"那就是没复现😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543629939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1670731,"avatar":"https://static001.geekbang.org/account/avatar/00/19/7e/4b/eafd4ff0.jpg","nickname":"看这个灯泡，真亮！","note":"","ucode":"97C644859B138F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25467,"discussion_content":"估计你需要开启另外一个事务, 然后, 在这个事务里面:\nbegin; update t `c`=`id`+1; commit; select * from t; \n这样他的更新就没有更新数据..\n但是由于mvcc的原因,  读取的数据还是以前的数据.\n\n如果数据更新成功对当前的事务, \n才是可见的, 但是事务没更新成功..所以对当前的事务的\n读取, 不可见..","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1570530675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2350585,"avatar":"","nickname":"Geek_0ddc80","note":"","ucode":"57B8C059E6800D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332978,"discussion_content":"题目没有commit；只开启事务没有提交事务","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607406571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312300,"discussion_content":"哈哈哈,没看清题目.上套了吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602657916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2283935,"avatar":"","nickname":"Geek_0a1b92","note":"","ucode":"3F73A3AD365E95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323325,"discussion_content":"没有复现我猜是因为没看清题目, 题目要求是构造, 不是执行这个sql后就能得到更新失败, 你需要开启另外的事务去复现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604916945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","nickname":"厉害了我的国","note":"","ucode":"CD0A54A1B998AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260838,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588906577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1725343,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep0icNIl01hycNvkTKHFtLMcxtJ8Nr48KOicUBA7jdbOjx41l1pkoic3l0Xftib4RsgeIkPV4y4cA6MPw/132","nickname":"Geek_1d80ef","note":"","ucode":"2695F603FE80E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244789,"discussion_content":"没复现+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587630533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197178,"avatar":"https://static001.geekbang.org/account/avatar/00/12/44/7a/d27c1ed3.jpg","nickname":"西边一抹残阳","note":"","ucode":"6836AB08783DC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211714,"discussion_content":"我也没复现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584883313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307457,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/41/30fff133.jpg","nickname":"Feanmy","note":"","ucode":"844C7A72338F11","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31611,"discussion_content":"同样没复现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570939957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107330,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1368287,"ip_address":"","ucode":"0D9C324B8A283F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epneksFUmXohq1dYibPBuzrHjZtdPSFUpfxscJklV5UUkrCdMCK83nn6hsiblD8WJlnyLHoicIib4aMag/132","comment_is_top":false,"comment_ctime":1561515019,"is_pvip":false,"replies":[{"id":"40803","content":"好问题👍<br><br>是这样的，只读事务不分配id，是5.6以后的优化；<br>其实也不是不分配id，只是不分配自增的id，随机分配的那个也是事务id的。<br><br>这里简化为同一个机制（等同于都是按照老版本来说），比较便于理解哈<br><br>很细致👍","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1562698785,"ip_address":"","comment_id":107330,"utype":1}],"discussion_count":3,"race_medal":0,"score":"65986024459","product_id":100020801,"comment_content":"老师好,第45篇有说到.只读事物不分配trx_id,那么事务A为什么 事务Id为100啊?","like_count":15,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455471,"discussion_content":"好问题👍\n\n是这样的，只读事务不分配id，是5.6以后的优化；\n其实也不是不分配id，只是不分配自增的id，随机分配的那个也是事务id的。\n\n这里简化为同一个机制（等同于都是按照老版本来说），比较便于理解哈\n\n很细致👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562698785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2988434,"avatar":"","nickname":"Geek_b15af6","note":"","ucode":"1C892255484FDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":567751,"discussion_content":"如果是随机分配的事务id,不是递增生成的，怎么去判断高低水位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650985226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":455471,"ip_address":""},"score":567751,"extra":""}]},{"author":{"id":1788647,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","nickname":"汉江","note":"","ucode":"01622D984B8F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337566,"discussion_content":"原来是版本的问题  看文章的时候一直有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608976593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49005,"user_name":"阿狸爱JAVA","can_delete":false,"product_type":"c1","uid":1033566,"ip_address":"","ucode":"597971781B1500","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","comment_is_top":false,"comment_ctime":1544587223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48789227479","product_id":100020801,"comment_content":"只是理解一下这感觉身体被掏空，如果为我自己去实现这样的功能，我只想静静，何况我看到的只是冰山一角。不得不说很佩服👍","like_count":11},{"had_liked":false,"id":46211,"user_name":"☞","can_delete":false,"product_type":"c1","uid":1302793,"ip_address":"","ucode":"6FAEF05F234D2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/09/9483f537.jpg","comment_is_top":false,"comment_ctime":1543885137,"is_pvip":false,"replies":[{"id":"16546","content":"比低水位大的不一定已经提交了哦<br><br>比如一个事务启动时当前活跃事务是[99,100,102], 而101已经提交了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543890330,"ip_address":"","comment_id":46211,"utype":1}],"discussion_count":5,"race_medal":0,"score":"48788525393","product_id":100020801,"comment_content":"老师回复“你设计一个“比低水位大，但是在当前事务启动前，就已经提交了的例子😄”<br>我意思说比低水位大的肯定是已经提交的事务啊，这样的话黄色区域肯定都是已经提交的事务啊，为什么还要区分已经提交和还没有提交的事务呢？应该都是不可读的才对吧<br>如果是RC的话，可以理解成每次读之前会再去黄色区域看看有没有提交，但是RR应该就不会再去读黄色区域了才对","like_count":11,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431377,"discussion_content":"比低水位大的不一定已经提交了哦\n\n比如一个事务启动时当前活跃事务是[99,100,102], 而101已经提交了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543890330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2043619,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","nickname":"Geek_b37487","note":"","ucode":"B6E202603B1A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284647,"discussion_content":"其实应该是\n假设事务A的id是100，事务B的id是101，事务C是102\n\n虽然事务A先开启，但是在它还创建完readview之前，事务B就先提交了，但是事务C还没有提交\n\n\n此时，事务A的活跃数组是【100-102】里面没有101 但是101这个数字的大小落在了事务A的活跃数组范围内\n\n所以满足在黄色区间 但不在数组中 ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592575432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255820,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/8c/3a810521.jpg","nickname":"CaptainBerg","note":"","ucode":"4033CF49863F7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254519,"discussion_content":"当前事务时100的话，也能看到101的是吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588332480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1356566,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b3/16/51cdf149.jpg","nickname":"小笨孩","note":"","ucode":"64260D1891C7D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1255820,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/8c/3a810521.jpg","nickname":"CaptainBerg","note":"","ucode":"4033CF49863F7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280077,"discussion_content":"是的，因为101在100创建一致性视图已经提交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591490615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":254519,"ip_address":""},"score":280077,"extra":""}]},{"author":{"id":1307392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/00/01137172.jpg","nickname":"Bobo","note":"","ucode":"7D5D9D84359B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223429,"discussion_content":"可以理解为事务ID<当前事务ID，并且不在活跃事务ID列表中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586223356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130186,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1567398829,"is_pvip":false,"replies":[{"id":"48709","content":"先自己设计，然后对照经典设计，非常好的学习方法👍","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1567481255,"ip_address":"","comment_id":130186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40222104493","product_id":100020801,"comment_content":"老师，这个课程我之前看了几篇文章，但都理解不深，而且很快就忘了。昨天，我自己设想：如果让我来设计数据库，该如何实现呢？<br>功能都是慢慢叠加的，我先实现两个最基本的要求，如下<br>1. 事务的原子性，即要么全部成功，要么全部失败，不允许有中间态<br>2. 事务未提交前，不可见，提交后，才可见<br>我暂时只考虑最简单的场景：隔离级别为提交读，不考虑并发修改，不考虑持久化<br>对于第2点，我想，如果一个事务直接修改原数据，那肯定有问题，因为另一个事务在读取的时候就直接读取到了未提交的数据。自然的，就先想到了快照，<br>事务修改记录时，拷贝一份快照，修改快照。这样，当另一个事务读数据时，读到的还是原始数据。另外，当事务提交后，用该事务的快照替换原数据记录，<br>在替换的时候，需要加锁，防止其它事务读到脏数据。由于替换是在内存中完成的，而且就是简单的赋值操作，所以非常快。这样其它事务再读取时，读到<br>的就是最新的记录。总结一下：用快照技术实现事务提交前不可见，提交后可见，而且能实现读写不互斥<br>对于第1点，其实在实现第2点时，也实现了。<br>通过这个简单的例子，我对MVCC中的快照有了基本的认识，而且印象深刻。当然，还需要实现对数据库的更多要求，比如在可重复读隔离级别下，需要设置回滚段，每行<br>记录增加版本号，每个事务也增加版本号；考虑并发修改的要求，需要对写的记录加写锁，等等。","like_count":9,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465848,"discussion_content":"先自己设计，然后对照经典设计，非常好的学习方法👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567481255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121720,"user_name":"王康","can_delete":false,"product_type":"c1","uid":1099810,"ip_address":"","ucode":"76C95D76658752","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/22/f1cbcb3d.jpg","comment_is_top":false,"comment_ctime":1565191426,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40219897090","product_id":100020801,"comment_content":"个人感觉<br>1. 事务启动时分配数组中的未提交事务 trx_id 不一定连续, 而缺少的就是创建比低水位事务晚, 但在当前事务创建之前已提交的事务<br>[0, 低水位] 的事务是可以确认已提交的, 一定可见<br>(低水位, 高水位] 的事务只能说比低水位创建的晚, 但是否还未提交取决于是否存在于当前事务的未提交数组<br>(高水位, 正无穷) 的事务还未创建, 一定不可见<br>请问我这样理解有问题吗, 如果没有问题的话, 感觉图 3 是否应该换一种方式表述, 将原有三部分的表述改为<br>1. 已创建且已提交<br>2. 已创建但未必提交<br>3. 未创建且为提交<br>是否会更好","like_count":9,"discussions":[{"author":{"id":1529909,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7yEJ1jD54Sk6EZGg9fXZNCZHfuJYzp6Z1N7kgbtb6JZeHvNo3nhicvGgy3f6EbIqibYKunicZZHgOQ/132","nickname":"Geek_1485e9","note":"","ucode":"0214BDC7DF379C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244743,"discussion_content":"是这个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587626901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308705,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/21/f7d3e0f7.jpg","nickname":"刘朝炳","note":"","ucode":"E758BC27B1EE2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40499,"discussion_content":"赞同上述观点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572225264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95355,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1558027116,"is_pvip":false,"discussion_count":18,"race_medal":0,"score":"35917765484","product_id":100020801,"comment_content":"“如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。“<br><br><br>这句话实在想不明白了，既然落在了黄色部分，怎么可能存在不在数组中的情况？如果不在数组中了，就说明不在低水位和高水位的范围内，那么就不在当前的一致性视图中了，那也就是说没有落在黄色部分。。。  感觉很矛盾啊！","like_count":8,"discussions":[{"author":{"id":1109279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/1f/f54cdf54.jpg","nickname":"豪","note":"","ucode":"24E52375C86E93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21315,"discussion_content":"发现很多人对这块都不理解\n结合老师的回复:&#34;比如一个事务启动时当前活跃事务是[99,100,102], 而101已经提交了&#34;\n这个101应该就是在黄色区域,但不在数组内\n\n所以黄色区域是[99,100,101,102],数组是[99,100,102]\n黄色区域是事务ID介于高低水位之间的集合,图中的黄色区域写着 &#34;未提交事务集合&#34;,很容易认为就是数组\n\n不知道我的理解对不对","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1569466708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1134522,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ba/6cefa19a.jpg","nickname":"昂头的笑脸","note":"","ucode":"005611C256E559","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/1f/f54cdf54.jpg","nickname":"豪","note":"","ucode":"24E52375C86E93","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113162,"discussion_content":"如果是这样的话，黄色区域是不是就不应该被写为“未提交事务集合”？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577890710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":21315,"ip_address":""},"score":113162,"extra":""},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/1f/f54cdf54.jpg","nickname":"豪","note":"","ucode":"24E52375C86E93","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143053,"discussion_content":"数组我认为你解释的对，但是黄色区域就矛盾了，你说黄色是未提交事务，那101又已经提交了，那让我咋理解，提交了还放在未提交，请给我一个完美的解释，哈哈。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579488662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":21315,"ip_address":""},"score":143053,"extra":""},{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256314,"discussion_content":"你这个回复真他娘是个人才，非常认同，既然是有可能以及提交的事务，为啥叫未提交事务集合呢？明明就有可能存在已经提交的事务啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588470559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143053,"ip_address":""},"score":256314,"extra":""}]},{"author":{"id":1101473,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/a1/76f4e230.jpg","nickname":"toyz","note":"","ucode":"47209F04FF8982","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1691,"discussion_content":"在数组中的都是未提交的事务id，如果比当前事务晚开始但是早提交的就是你说的情况了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562816404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101473,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/a1/76f4e230.jpg","nickname":"toyz","note":"","ucode":"47209F04FF8982","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5252,"discussion_content":"没明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566114973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1691,"ip_address":""},"score":5252,"extra":""},{"author":{"id":1676246,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/d6/040e4965.jpg","nickname":"Omer","note":"","ucode":"8EE3E531313265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201404,"discussion_content":"意思就是比当前事务晚开始但是在当前事务生成快照之前提交的就是你说的情况了，那事务id更大的也是可见的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583797434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5252,"ip_address":""},"score":201404,"extra":""},{"author":{"id":1047073,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fa/21/abb7bfe3.jpg","nickname":"Vongola","note":"","ucode":"F2FDAEBC049CBC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1676246,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/d6/040e4965.jpg","nickname":"Omer","note":"","ucode":"8EE3E531313265","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224564,"discussion_content":"同意，也就是说事务分配id是在begin;的时候，但是视图的创建是在执行第一句sql时，当然，如果是以start transaction with consistent snapshot开启事务，这两个操作就是同时，这一点很重要，但是老师没有在文章中说到transactionId和视图创建不是同时的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586315566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":201404,"ip_address":""},"score":224564,"extra":""}]},{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106351,"discussion_content":"三个颜色区域只是通过低水位和高水位划分出来的，而在黄色区域中是可能存在本事务启动时已经提交的事务（不在视图数组），以及在本事务启动时未提交的事务（在视图数组），不要认为&#34;事务数组=黄色区域&#34;,而是&#34;黄色区域>=视图数组&#34;。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577533251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256313,"discussion_content":"作者应该说明白黄色区域不等同于活跃的事务数组，那个示意图有很大的误导性，我第一次看就很不理解，为啥在黄色区域的还不在活跃的事务数组中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588470462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106351,"ip_address":""},"score":256313,"extra":""}]},{"author":{"id":2630997,"avatar":"https://static001.geekbang.org/account/avatar/00/28/25/55/5145bdf5.jpg","nickname":"无尽光芒","note":"","ucode":"EC9E15128FE8E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375698,"discussion_content":"黄色部分存放的是当前事物开启时已开启但未提交范围内的所有事物（事物可能提交，也可能没提交），没提交的在数组内，已提交不在数组内，但数组黄色部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621821470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48903,"user_name":"小卡向前冲","can_delete":false,"product_type":"c1","uid":1124914,"ip_address":"","ucode":"1C8908A61FA00B","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/32/6354a589.jpg","comment_is_top":false,"comment_ctime":1544577183,"is_pvip":false,"replies":[{"id":"17562","content":"这回理解到位了😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544581970,"ip_address":"","comment_id":48903,"utype":1}],"discussion_count":9,"race_medal":0,"score":"35904315551","product_id":100020801,"comment_content":"明白了，是我之前对高低水位的定义没有搞清楚：RR隔离级别下，事务A在执行Select时，要重算read-view,此时数组是[99, 100, 101]，系统最大事务id是102，故低水位是99，高水位是102+1=103。<br>这样就可以推出来了~~","like_count":8,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432411,"discussion_content":"这回理解到位了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544581970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143038,"discussion_content":"你还是没理解透吧，按照事务数组的说法，你获取到的是[99,100,101]，对于当前事务高水位是102，你不能想当然的说来了一个最大事务是102，如果真有102，那也应该存在于事务数组中，否则我只能理解102是已提交事务，那就更不能将其用于计算高水位是多少了，也不可能是103。高水位是相对于每个事务视图创建时而言的，它是未开始事务，也就是还没有的事务。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579488306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312302,"discussion_content":"他是想表达RC级别下的那个场景的,确实是理解到了.不过他写错了.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602658370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143038,"ip_address":""},"score":312302,"extra":""},{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312303,"discussion_content":"写成了RR","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602658390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143038,"ip_address":""},"score":312303,"extra":""},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356486,"discussion_content":"这个高水位我看得也是一脸懵逼，从上面的文章看我还是赞同你的这个说法。如果获取的是[99,100,101]，如果还存在一个已经提交了的102，那么此时的高水位应该是 102+1 = 103了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615608264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143038,"ip_address":""},"score":356486,"extra":""}]},{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396048,"discussion_content":"我也一直有这个疑问，文中“所以，事务 A 查询语句的读数据流程是这样的：找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；” 这几句话一直没明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632386161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408100,"discussion_content":"事务A启动时，它的read-view活跃事务集合是｛99，100｝。当事务A执行select的时候，最新的值是（1，3），但是它的row tx_id是101，是事务A启动后生成的read view之后提交的事务，所以事务A根据自己的read view是看不到的。然后根据undo log，需要返回这一行的上一个版本--就是row tx_id为102的（1,2）。事务A再根据自己的read view 判断，undo log返回的版本仍然不可见。所以，undo log继续返回上一个版本。直到返回的版本它的row tx_id 在自己的read view 集合里为止。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635175180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":396048,"ip_address":""},"score":408100,"extra":""},{"author":{"id":2706935,"avatar":"https://static001.geekbang.org/account/avatar/00/29/4d/f7/0a4e21b1.jpg","nickname":"北松山","note":"","ucode":"35C19D270E989D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":414773,"discussion_content":"哈哈，我感觉你没理解他问的点，他问的要是A事务启动时，高水位不应该为101吗，这时候为什么说“找到 (1,3) 的时候，判断出 row trx_id=101，比高水位【大】”，这个大字是从哪里体现出来的？不应该是相等吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636894919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408100,"ip_address":""},"score":414773,"extra":""},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2706935,"avatar":"https://static001.geekbang.org/account/avatar/00/29/4d/f7/0a4e21b1.jpg","nickname":"北松山","note":"","ucode":"35C19D270E989D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530555,"discussion_content":"😀只有丁老师的专栏能过了那么久，还能回去再刷文章的了。确实，前后文章都理解不了这句话里的【大】。不过，判断原理应该大家都理解了的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637104393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":414773,"ip_address":""},"score":530555,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":47905,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1544252099,"is_pvip":false,"replies":[{"id":"17105","content":"是的，最后这个“可能”说得很好，<br>可能在，也可能不在，就用“是否在数组中”来判断","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544333498,"ip_address":"","comment_id":47905,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35903990467","product_id":100020801,"comment_content":"想请教一下老师, 在数据可见性规则那一部分中的第三种可能的b情况: &quot;若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。&quot;对于这部分内容我开始不是很理解, 后来反复思考了一下, 可见性规则这部分是不是在说明这种情况:  因为数据的row trx_id是依次递增的, 但是事务由于创建和提交的时间不可预期所以transactionId可能是跳跃的, 所以假如有事务A, 比A的transactionId大的数据的row trx_id对于事务A一定不可见, 但是比A的transactionId小的数据的row trx_id也可能在A的事务数组中, 所以要判断一次. 不知道这么理解对不对?","like_count":8,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431936,"discussion_content":"是的，最后这个“可能”说得很好，\n可能在，也可能不在，就用“是否在数组中”来判断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544333498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335853,"discussion_content":"我是这样思考的；\n比如现在事务的最大id是8，当前事务id是7，id为1,3，5的事务已经提交，所以这个事务的视图数组为[2,4,6,7,8,],高水位为9，那么id为1的事务是可见的，视图数组是有间隙的，判断一行是否可见，看row trx_id,比如有一行记录的trx_id为5，进行下面判断：\n1、判断是否大于等于高水位，结果没有，进行2判断；\n2、判断是否小于低水位2，结果没有；进行3判断；\n3、发现5不在视图数组里，证明是已经提交的记录，可见\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608353743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46714,"user_name":"算不出流源","can_delete":false,"product_type":"c1","uid":1178209,"ip_address":"","ucode":"B6CFEF672E3E1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/61/691e2936.jpg","comment_is_top":false,"comment_ctime":1543973410,"is_pvip":false,"replies":[{"id":"16683","content":"都是“事务启动”的时候申请，<br><br>所以是第一个操作表的语句。<br><br>也可以是执行start transaction with consistent snapshot这个语句的时候","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543975001,"ip_address":"","comment_id":46714,"utype":1}],"discussion_count":4,"race_medal":0,"score":"35903711778","product_id":100020801,"comment_content":"“InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。”<br><br>老师您好，请问是begin&#47;start transaction语句就申请到了trx_id，还是执行了第一个操作数据表的语句才有了trx_id呢？","like_count":8,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431515,"discussion_content":"都是“事务启动”的时候申请，\n\n所以是第一个操作表的语句。\n\n也可以是执行start transaction with consistent snapshot这个语句的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543975001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178426,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/3a/3dc7c61c.jpg","nickname":"꧁༺༻꧂","note":"","ucode":"8BFD5C1F6ED235","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409749,"discussion_content":"我觉得这里逻辑完全不自洽：\n既然事务ID是事务开始的时候创建，并且是严格递增的（原子性），此时怎么会有比当前事务ID大的事务？？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635501612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336412,"discussion_content":"那按老师的回答理解，使用begin时，就是遇到第一个Sql时才会启动事务，而不是在输入完begin时启动事务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608566556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398241,"discussion_content":"应该是这样。可以这样测试，先执行begin，不commit，去表information_schema.innodb_trx中查询，是没有这个事务记录的，直到执行第一个sql语句才会有","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632753934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336412,"ip_address":""},"score":398241,"extra":""}]}]},{"had_liked":false,"id":169946,"user_name":"最初的印象","can_delete":false,"product_type":"c1","uid":1228852,"ip_address":"","ucode":"4DD68307FA274E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/34/0574bb44.jpg","comment_is_top":false,"comment_ctime":1578480076,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31643251148","product_id":100020801,"comment_content":"可以先看一下这篇文章，https:&#47;&#47;mp.weixin.qq.com&#47;s?__biz=MzAxOTc0NzExNg==&amp;mid=2665514468&amp;idx=1&amp;sn=7e62cc31ea0849d99bd30dec6d0b291f&amp;chksm=80d67da7b7a1f4b1d4f34c80e565566c427e00b5bfa97aad05f36d2266baf69a8d3f002243d2&amp;mpshare=1&amp;scene=1&amp;srcid=0416e6NsRMR2wSNIQHu1sjrY&amp;sharer_sharetime=1578456375794&amp;sharer_shareid=9f8d8535bcc8066cc734d87ec668425e&amp;key=7530264ccf69a99b1b5c2640b873746bc4c38a8885fb26160a513a7b18d4e6125d94e28005d82acadd18b9b5557a217d2092f420abb4def2d24ef6d08df8e2ba704ea1476a0f621b14ead670f27dc651&amp;ascene=1&amp;uin=NjEzNjAzNDU%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;exportkey=AVZ5Wtfj8%2Bqz%2FbF753RsweU%3D&amp;pass_ticket=yNqxQoTmGGyi73%2BB15l69K7muijjXSMl%2BvEfxLmMlPE%3D","like_count":7,"discussions":[{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298955,"discussion_content":"这文章有错误呀，MySQL的RR级别是没有幻读问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597490058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1095136,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b5/e0/fc3ac264.jpg","nickname":"stronger.","note":"","ucode":"AD0F2BE338824C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577243,"discussion_content":"MySQL RR级别有幻读的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655982763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298955,"ip_address":""},"score":577243,"extra":""}]}]},{"had_liked":false,"id":79279,"user_name":"梓鉴","can_delete":false,"product_type":"c1","uid":1200534,"ip_address":"","ucode":"679A69C47169DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/96/2c7b7cfc.jpg","comment_is_top":false,"comment_ctime":1553424111,"is_pvip":false,"replies":[{"id":"30023","content":"不是，因为在计算高水位之前，可能别的事务也创建出来了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554432736,"ip_address":"","comment_id":79279,"utype":1}],"discussion_count":6,"race_medal":0,"score":"31618195183","product_id":100020801,"comment_content":"老师你好，对于row trx_id， 当事务启动的时候，会生成保存所有活跃事务id的数组，以及生成高水位。按稳重高水位定义，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位，而事务id是按申请顺序严格递增的， 那是不是可以理解为 “高水位 = 当前启动事务id + 1” ？ ","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444428,"discussion_content":"不是，因为在计算高水位之前，可能别的事务也创建出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554432736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396050,"discussion_content":"你以为自己是最大的时候，其实已经有人超过你了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632386297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398238,"discussion_content":"我觉得有两个可能性会导致当前事务id不是高水位，一是生成当前活跃事务id数组和生成高水位事务id是两个独立的步骤，在这中间可能产生了别的事务；二是 事务一致性视图readview和产生事务id的时机本就不一样，可能生成readview，产生活跃事务id数组时，本事务的id还未生成，最后导致高水位事务id小于当前事务id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632753714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2555914,"avatar":"https://static001.geekbang.org/account/avatar/00/27/00/0a/078e4347.jpg","nickname":"东","note":"","ucode":"98A57ADA38A7DF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":406199,"discussion_content":"第二点正确，begin命令后，第一条select命令开始read view，第一条更新语句创建transaction id","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634719431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":398238,"ip_address":""},"score":406199,"extra":""}]},{"author":{"id":1759947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMibvaCUaca7IhdeAMID7YT921tIJcicJsRmTv5We02Lje88LicfmiciaM5UmmWTH6p8RewMRZbA85QGA/132","nickname":"Geek_134276","note":"","ucode":"1E5A61D4D02E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69201,"discussion_content":"&#34;在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID&#34; 那么是不是当前事务ID就是最大值呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575270370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1759947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMibvaCUaca7IhdeAMID7YT921tIJcicJsRmTv5We02Lje88LicfmiciaM5UmmWTH6p8RewMRZbA85QGA/132","nickname":"Geek_134276","note":"","ucode":"1E5A61D4D02E4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73616,"discussion_content":"如果事务ID是在begin时分配，而数组是在第一个操作时生成，那中间的时间就有可能有另外的事务创建出来。不知道我理解的对不对。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575562069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69201,"ip_address":""},"score":73616,"extra":""}]}]},{"had_liked":false,"id":49007,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1544587411,"is_pvip":false,"replies":[{"id":"17624","content":"也谢谢你，说明你的问题质量高哦。<br><br>其实我没有回复大家所有的评论，<br>不过问得认真详细的、又跟其他同学问题不重复的问题，我会尽量全部回复，<br><br>因为把问题问清楚本身是要花心思的，不能辜负呀<br><br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544609041,"ip_address":"","comment_id":49007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31609358483","product_id":100020801,"comment_content":"这个必须要单独回复一下老师：<br>我的所有留言老师都一一回复，问题全部都解释的很清楚。在学校其实mysql用的非常简单，真的要说一下这个课实在太好了，把原理讲得简单易懂，并且评论里的讨论加深了自己的认知。<br>所以真的很感谢老师~~感谢感谢","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432458,"discussion_content":"也谢谢你，说明你的问题质量高哦。\n\n其实我没有回复大家所有的评论，\n不过问得认真详细的、又跟其他同学问题不重复的问题，我会尽量全部回复，\n\n因为把问题问清楚本身是要花心思的，不能辜负呀\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544609041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47495,"user_name":"进阶的码农","can_delete":false,"product_type":"c1","uid":1017821,"ip_address":"","ucode":"D8991282640334","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/dd/4f53f95d.jpg","comment_is_top":false,"comment_ctime":1544148181,"is_pvip":false,"replies":[{"id":"16923","content":"黄色区域只是高水位和低水位之间，但是不是连续自然数集合哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544148470,"ip_address":"","comment_id":47495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31608919253","product_id":100020801,"comment_content":"文中黄色区域不就是代表当前事务启动时的活跃数组吗，因为黄色区域两个边界是低水位和高水位。既然这样怎么会有 row tx_id在黄色区域 但是又不在数组里的情况呢。是我理解的有问题吗 请指教","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431783,"discussion_content":"黄色区域只是高水位和低水位之间，但是不是连续自然数集合哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544148470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45913,"user_name":"Sawyer","can_delete":false,"product_type":"c1","uid":1011280,"ip_address":"","ucode":"34DC7FBB01FE6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/50/c85284da.jpg","comment_is_top":false,"comment_ctime":1543817431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31608588503","product_id":100020801,"comment_content":"简单的总结一下：<br>1. 一致性识图，保证了当前事务从启动到提交期间，读取到的数据是一致的（包括当前事务的修改）。<br>2. 当前读，保证了当前事务修改数据时，不会丢失其他事务已经提交的修改。<br>3. 两阶段锁协议，保证了当前事务修改数据时，不会丢失其他事务未提交的修改。<br>4. RR是通过事务启动时创建一致性识图来实现，RC是语句执行时创建一致性识图来实现。","like_count":7},{"had_liked":false,"id":74362,"user_name":"刘志兵","can_delete":false,"product_type":"c1","uid":1441734,"ip_address":"","ucode":"A90C2FA49EDC23","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/c6/8b5cbe97.jpg","comment_is_top":false,"comment_ctime":1552202694,"is_pvip":false,"replies":[{"id":"27194","content":"1. 事务A申请到trx_id<br>2. 事务B启动，申请到 trx_id<br>3. 事务C启动，申请到 trx_id<br>4. 事务A创建视图数组","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1552228944,"ip_address":"","comment_id":74362,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27322006470","product_id":100020801,"comment_content":"老师您好，评论区有人说高水位就是当前trx_id, 我也是这样认为，看你回复的是可能高水位会略大一些，我想了很久，除了文章中提到的高水位是最大trx_id + 1之外，还是没想明白这个略大是出现在什么场景下，老师能给举个例子吗，谢谢！","like_count":6,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442550,"discussion_content":"1. 事务A申请到trx_id\n2. 事务B启动，申请到 trx_id\n3. 事务C启动，申请到 trx_id\n4. 事务A创建视图数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552228944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2317270,"avatar":"","nickname":"Geek_e5f501","note":"","ucode":"72A713EBAAFE41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327582,"discussion_content":"那事务A创建的视图数组中，包括事务B和事务C的trx_id么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605866366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2317270,"avatar":"","nickname":"Geek_e5f501","note":"","ucode":"72A713EBAAFE41","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408110,"discussion_content":"看老师这里假设的场景，是包括的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635175629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327582,"ip_address":""},"score":408110,"extra":""}]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60000,"discussion_content":"就是图8读提交的例子嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574695969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45490,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543653375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27313457151","product_id":100020801,"comment_content":"把该讲内容总结为几个问题, 大家复习的时候可以先尝试回答这些问题检查自己的掌握程度:<br><br>\t1. <br>MySQL中的两个视图分别应该如何理解?<br>\t2. <br>row trx_id 和 up_limit_id的定义是什么?<br>\t3. <br>MVCC的实现机制是怎样的?<br>\t4. <br>一致性读的概念是什么? 事务的可重复读是怎么毅力一致性读实现的?<br>\t5. <br>当前读的概念是什么? 什么语句会采用当前读的机制?<br><br>","like_count":6},{"had_liked":false,"id":75616,"user_name":"唐僧洗头爱飘柔","can_delete":false,"product_type":"c1","uid":1203894,"ip_address":"","ucode":"3E4EBC8AEC649A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/b6/a6bc2065.jpg","comment_is_top":false,"comment_ctime":1552439883,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"23027276363","product_id":100020801,"comment_content":"老师，文中图3 数据可见性规则内容中，3（b）的描述不太理解，能否举一个具体场景？","like_count":5,"discussions":[{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106329,"discussion_content":"比如事务启动时已提交事务为23，89，进行中事务为45，新事务id为108，则是视图数组就是[45,108],如某行记录&#34;row trx_id为89&#34;，89明显不在视图数组，而是已提交事务生成的版本记录，肯定可见。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577531670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143081,"discussion_content":"你这么解释不对吧。事务id是顺序递增的，对于当前事务45的事务视图创建时，89肯定不会出现的，即使出现，那也是在事务视图创建之后的事情，即使89创建了并且已提交了，那也是提交晚于事务45视图创建时间的，肯定不可见呐。\n那按照这个穿越逻辑来思考，即使就说事务45执行时，89已经创建了，那低水位可能是45，也可能是小于45，反正是那个活跃数组中的低水位值，那我想问，它select时，是可见23呢还是89呢？89比(x,45]大，那老师中的例子就有点意思了，得再解释解释。如果23那还说得通，至少比低水位id值小，可读这个值。\n以上是个人理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579489414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106329,"ip_address":""},"score":143081,"extra":""},{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577188,"discussion_content":"“你这么解释不对吧。事务id是顺序递增的，对于当前事务45的事务视图创建时，89肯定不会出现的，即使出现，那也是在事务视图创建之后的事情，即使89创建了并且已提交了，那也是提交晚于事务45视图创建时间的，肯定不可见呐。”-&gt;我要表述的是108的新事务可以看到89的修改，是我写的不具体，这就是@唐僧洗头爱飘柔提到的可能的一种场景，以上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655963008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143081,"ip_address":""},"score":577188,"extra":""}]}]},{"had_liked":false,"id":67585,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1550202277,"is_pvip":false,"replies":[{"id":"24002","content":"厉害了，这个是我在第45篇要讲的😆<br>其实两次都是申请的，只是根据事务的读写性质不同，分配trxid的规则不一样","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550298575,"ip_address":"","comment_id":67585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23025038757","product_id":100020801,"comment_content":"老师，<br>我实际验证了一下，在通过start transaction with consistent snapshot启动过了一个事务后，我查看了一下innodb_trx，发现这个事务的trx_id是281479535353408，很大，而且似乎在同一个session中启动的会话得到的trx_id是保持不变的。当执行任何加MDL写锁的语句后，trx_id会变成一个很小的数字，118378。<br>之后又执行了多次start transaction with consistent snapshot; commit; 语句，但是再次执行加MDL写锁的语句后，trx_id的值是118379。<br>所以，文中的”在事务开始的时候向innodb申请“似乎应该改成”每次进行添加MDL写锁的语句的时候向innodb申请“？<br>另外，这个trx_id似乎并不是顺序递增的，有的时候会一下子加10多，这个还没找到规律。","like_count":5,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439262,"discussion_content":"厉害了，这个是我在第45篇要讲的😆\n其实两次都是申请的，只是根据事务的读写性质不同，分配trxid的规则不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550298575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64837,"user_name":"绿里奇迹","can_delete":false,"product_type":"c1","uid":1173341,"ip_address":"","ucode":"E1E7BC3AAEC86A","user_header":"https://static001.geekbang.org/account/avatar/00/11/e7/5d/a99d32d5.jpg","comment_is_top":false,"comment_ctime":1548921971,"is_pvip":false,"replies":[{"id":"22948","content":"本来是看不见的，<br>但是session B的update语句把数据改了（注意，在update的时候是当前读），<br>改完以后，这个记录上的事务id就变成B的事务id。<br>之后事务B执行select的时候，发现这个记录是自己更新的，就要可见","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548936898,"ip_address":"","comment_id":64837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23023758451","product_id":100020801,"comment_content":"版本已提交，但是是在视图创建后提交的，不可见<br>那为什么第一个例子中的事务B能够读到事务C的更改。<br>事务C的提交在事务B start transaction with...之后。","like_count":5,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438200,"discussion_content":"本来是看不见的，\n但是session B的update语句把数据改了（注意，在update的时候是当前读），\n改完以后，这个记录上的事务id就变成B的事务id。\n之后事务B执行select的时候，发现这个记录是自己更新的，就要可见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548936898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62155,"user_name":"Zzz","can_delete":false,"product_type":"c1","uid":1116272,"ip_address":"","ucode":"4AA47797F48315","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKTjelrQaLYOSVK2rsFeia0G8ASTIftib5PTOx4pTqdnfwb0NiaEFGRgS661nINyZx9sUg/132","comment_is_top":false,"comment_ctime":1547961985,"is_pvip":false,"replies":[{"id":"21990","content":"我也是《高性能MySQL》的忠实读者哈。<br>主要是来源于我以前做云服务的时候解决用户的问题的过程中，去研究背后的原理的一些积累吧。<br><br>当前读 在官方文档中对应的是“Locking reads”，叫做加锁读也是可以的，不过平时大家说起来就是“读当前最新值”，所以叫当前读也挺理解的。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547972491,"ip_address":"","comment_id":62155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23022798465","product_id":100020801,"comment_content":"请教下老师，这些知识您是通过什么途径获得的呢，比如创建一致性视图的时机、方式，当前读等等。几篇文章看过来，谢谢您解决了我一直以来的不少困惑。我曾经在《高性能MySQL》、《MySQL技术内幕：InnoDB存储引擎》、《深入浅出MySQL》这些还算知名的书上翻阅过，都无法解决我的疑惑。包括MySQL官方提供的Reference Manual ，比如对于MVCC，有提过视图和undo，但是没有您讲得清晰；有提过MVCC一致性读到的数据对于update这种指令不适用（就是说可以看到别人已提交修改后的数据，外在表现在affect rows上），但是没有提到“当前读”这个概念。您是通过阅读源码知道这些知识的吗，还是有更官方的文档，而我没有接触到。","like_count":5,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437118,"discussion_content":"我也是《高性能MySQL》的忠实读者哈。\n主要是来源于我以前做云服务的时候解决用户的问题的过程中，去研究背后的原理的一些积累吧。\n\n当前读 在官方文档中对应的是“Locking reads”，叫做加锁读也是可以的，不过平时大家说起来就是“读当前最新值”，所以叫当前读也挺理解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547972491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228796,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1592811424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18772680608","product_id":100020801,"comment_content":"就这一篇文章，我觉得花的钱值了","like_count":4},{"had_liked":false,"id":63048,"user_name":"无菇朋友","can_delete":false,"product_type":"c1","uid":1035562,"ip_address":"","ucode":"80482C5F0464A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/2a/bdbed6ed.jpg","comment_is_top":false,"comment_ctime":1548236675,"is_pvip":false,"replies":[{"id":"22272","content":"实现上不包括<br>不过无所谓的，因为如果是自己更新的，总是可见的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548239338,"ip_address":"","comment_id":63048,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18728105859","product_id":100020801,"comment_content":"老师请教一个问题，事务A启动时，当前活动事务列表包不包括自己的trx_id","like_count":4,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437450,"discussion_content":"实现上不包括\n不过无所谓的，因为如果是自己更新的，总是可见的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548239338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259646,"avatar":"","nickname":"xubeauty","note":"","ucode":"A7990FDBA7ED82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410383,"discussion_content":"这一篇有点晦涩，建议结合https://zhuanlan.zhihu.com/p/418300709食用\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635682795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54370,"user_name":"嘉嘉☕","can_delete":false,"product_type":"c1","uid":1059771,"ip_address":"","ucode":"632A5CC4B53BB1","user_header":"https://static001.geekbang.org/account/avatar/00/10/2b/bb/5cf70df8.jpg","comment_is_top":false,"comment_ctime":1545835843,"is_pvip":false,"replies":[{"id":"19736","content":"但是创建数组得时候，已经比“启动瞬间”稍晚一会儿了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545841600,"ip_address":"","comment_id":54370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18725705027","product_id":100020801,"comment_content":"老师还有一个问题<br>对于当前事物启动瞬时来说，高水位就是它自己的id+1吧？","like_count":4,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434436,"discussion_content":"但是创建数组得时候，已经比“启动瞬间”稍晚一会儿了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545841600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46149,"user_name":"信信","can_delete":false,"product_type":"c1","uid":1303865,"ip_address":"","ucode":"8DF0EC045579FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/e5/39/951f89c8.jpg","comment_is_top":false,"comment_ctime":1543854430,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18723723614","product_id":100020801,"comment_content":"老师您好，有处疑问，文中说：“对于图 2 中的数据来说，如果有一个事务，它的低水位是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 计算出 V3。”看上去像是一定会取小于低水位的值。那假如我的事务id是27，活跃数组是18，19，26，这样的话事务id为25的数据我也认呀。恳请老师解惑。","like_count":4,"discussions":[{"author":{"id":1101473,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/a1/76f4e230.jpg","nickname":"toyz","note":"","ucode":"47209F04FF8982","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1686,"discussion_content":"你的事务是27，低水位是18，说明25落在高水位和低水位之间，但是25又不在活跃数组里，说明已经提交，所以id是25的事务数据是得认的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1562815507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2679054,"avatar":"","nickname":"Geek_ade41a","note":"","ucode":"1D9F1FA9CD3204","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381715,"discussion_content":"我也是在这里很困惑，觉得这一行的数据不一定就是11了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625192634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45281,"user_name":"way","can_delete":false,"product_type":"c1","uid":1302713,"ip_address":"","ucode":"AD1CBEBA5FDBA9","user_header":"https://static001.geekbang.org/account/avatar/00/13/e0/b9/bca7ff9a.jpg","comment_is_top":false,"comment_ctime":1543576264,"is_pvip":false,"replies":[{"id":"16135","content":"是不是执行过程有误，整个过程里面并没有把b 赋值成10过，怎么会查出来10？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543628306,"ip_address":"","comment_id":45281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18723445448","product_id":100020801,"comment_content":"MySQL分为当前读和快照读。一般情况下，select是快照读，dml操作是当前读。RC和RR的区别就是创建read view 的时间不一样。rc在每个当前读的时候创建，rr在事物开始的时候创建。<br>之前遇到个问题，请老师帮忙解答下。<br>rr 隔离级别<br>数据demo <br>a b 都不是主键。b 上有普通索引<br>-------<br>a b<br>-------<br>1 2<br>10 5<br>-----<br>#session 1<br>select * from t where a = 10 ;<br>b=5<br>#session 2<br>select * from t where a = 10 ;<br>b=5<br>#session 1<br>update t set b = 100 where a = 10 ;<br>rows matched 1 effect 1 change 1<br>select * from t where a = 10 ;<br>#b = 100<br>#session 2 <br>update t set b = 100 where a = 10 ;<br>--阻塞，等session 1 commit 以后<br>rows matched 1 effect 0 change 0<br>此时<br>#session 2 <br>select * from t where a = 10 ;<br>结果是 b = 10 <br>在mysql 8.0 里面测试，session2 最后的值是100 。percona server 5.7.18一下是 10 ，所以这是低版本的bug 对吧？","like_count":4,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430975,"discussion_content":"是不是执行过程有误，整个过程里面并没有把b 赋值成10过，怎么会查出来10？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543628306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45202,"user_name":"倪大人","can_delete":false,"product_type":"c1","uid":1193052,"ip_address":"","ucode":"4798D69F3E86FB","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/5c/6b4757a0.jpg","comment_is_top":false,"comment_ctime":1543560347,"is_pvip":false,"replies":[{"id":"16142","content":"不一样，读提交隔离级别下，首先是不加锁的。<br><br>还有，你考虑下，一个语句开始执行的之后，执行期间别的事务修改了数据的情况<br><br>PS： 这是个好问题","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543629063,"ip_address":"","comment_id":45202,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18723429531","product_id":100020801,"comment_content":"对于读提交，查询只承认在语句启动前就已经提交完成的数据；<br>而当前读，总是读取已经提交完成的最新版本。<br><br>老师请问下读提交和当前读有什么区别吗，我理解这两个都是读到已提交的最新版本？如果是的话，那为什么读提交这种隔离级别不直接基于当前读做呢，每次去算一下up_limit_id不麻烦吗o.o","like_count":4,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430957,"discussion_content":"不一样，读提交隔离级别下，首先是不加锁的。\n\n还有，你考虑下，一个语句开始执行的之后，执行期间别的事务修改了数据的情况\n\nPS： 这是个好问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543629063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1874999,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/9c/37/253ea895.jpg","nickname":"我不是码农","note":"","ucode":"EB4BB711CC54B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550365,"discussion_content":"读提交是发生在普通查询，这是一套逻辑；当前读是发生在要加行锁的情况下，这是另一套逻辑。\n当前读期间是无法修改记录的。\n这是我的理解，不对请老师指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644497958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122576,"user_name":"lingyun.G","can_delete":false,"product_type":"c1","uid":1217990,"ip_address":"","ucode":"C45A88D71ECC8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/c6/400c1297.jpg","comment_is_top":false,"comment_ctime":1565427487,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14450329375","product_id":100020801,"comment_content":"老师好，看文中关于低水位和高水位的描述和图，有以下两点疑惑。简单起见，我先把原文抄录过来。<br><br>----------------------------------------<br>这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：<br><br>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；<br><br>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br><br>如果落在黄色部分，那就包括两种情况<br>a.  若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>----------------------------------------<br><br>以下是我的疑惑。<br><br>1、在一个事务启动的瞬间那个时刻，必定是库里面 trx_id 最大的事务，怎么还会有 trx_id 落入红色区域呢？<br><br>2、文中图 3 中将黄色区域描述为「未提交事务集合」，刚开始我一直以为黄色区域就是文中说的为<br>事务开启时刻为每个事务生成的活跃事务数组，如果这样的话，落在黄色区域为啥还区分 a，b 两种情况呢。直到看到评论中你说「你设计一个比低水位大，但是在当前事务启动前，就已经提交了的例子」才恍然大悟。这样的话就又产生了新的问题，低水位和高水位之间已经存在已提交的事务了，图 3 中将黄色区域描述为「未提交事务集合」是否还准确呢？<br><br>PS：原谅我有点钻牛角尖了。","like_count":3,"discussions":[{"author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":162259,"discussion_content":"我觉得第一个问题你理解错了 老师的意思是数据里的row trx_id这个值可能是红色区域里的(row trx_id跟当前事务的trx_id不是一个概念) 当一个事务启动的瞬间 trx_id确实是最大的 但是不代表后面就不在有事务启动 当你读数据的时候拿到的row trx_id的值可能就是超过高水位的值 这个时候就不能读取 需要undo到上一个版本\n\n第二个问题 我觉得老师的那个图没毛病 那个图是指某个瞬间所有事务的集合 没有说这个集合里的事务一定按大小排列 是按他们是否提交这一状态归类 比如绿色区域是[45,48] 黄色区域里是[46,47] 红色区域里有[49,50] 这不是没毛病么","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580978019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1229219,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/JJNEztkFUvLGlyjT85WSNKewk6UkKwLKVMYx9ddjoicibrBkxhMONP8Jx2NxF4Ny5eq6FNfQZgK8eDLZmY4cRQvg/132","nickname":"yk","note":"","ucode":"DE563958F422BD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279885,"discussion_content":"我觉得你说的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591444242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":162259,"ip_address":""},"score":279885,"extra":""}]},{"author":{"id":1261360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/30/23f6b413.jpg","nickname":"五十九秒","note":"","ucode":"1F34F62193CFF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282413,"discussion_content":"我觉得就不应该有b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591966946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256319,"discussion_content":"第一个问题，假如事务已经启动，但是在这个事务启动后，后续的事务对这一行数据做了更新，你肯定是不可见的，例子为：当前启动最大事务是4 ，row_trx_id 是4 启动后事务5对数据进行了修改，row_trx_id是5.那么这个事务5肯定就大于你那个4，所以5不可见。\n第二个问题，那个黄色区域应该声明不等同于活跃事务数组，且不应该叫未提交事务集合，明明就存在已经提交的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588470925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1464074,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia6I8k83V5ohrAtASOqQH1ibicotV4wwRgRdTd587zib55V2kVW0eFIJxo3OIrLJ2yx8MFtg9vMYJaLQ/132","nickname":"AlexZFX","note":"","ucode":"2061383AF4B27A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156560,"discussion_content":"第一个问题，如果不是 start transaction with consistent snapshot 的形式启动的事务的话，这个快照(即这个数组)会在第一次select的时候生成，所以就有可能出现落入红色区域的 trx_id。\n第二个问题，感觉理解了就行了，可能老师描述略带瑕疵。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580379818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98641,"user_name":"吃饭睡觉打酱油","can_delete":false,"product_type":"c1","uid":1071668,"ip_address":"","ucode":"95EC98C2B5045B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","comment_is_top":false,"comment_ctime":1559047577,"is_pvip":false,"replies":[{"id":"35319","content":"RR和RC在一致性视图上的差别是<br>RR的视图是在事务启动的第一个语句创建的，之后事务存续期间都不变；<br>RC是在每个语句开始执行的时候，都创建一个视图，每个视图只管自己一个语句","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1559060879,"ip_address":"","comment_id":98641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14443949465","product_id":100020801,"comment_content":"老师，抱歉，还有疑惑是否可以解答下，在RR级别下，事务获取到的一致性视图数组是静态的么，高水位是当前创建的最大事务id+1，可否认为是当前事务的id+1（事务创建的时候，视图数组和高水位难道不是和事务创建的时候一起确定的么）？在RC级别下，事务获取的一致性视图是动态的，事务中可能出现多次查询，期间会产生别的事务，所以高水位只能是当前创建的最大事务id+1而不能是当前事务id+1。","like_count":3,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451767,"discussion_content":"RR和RC在一致性视图上的差别是\nRR的视图是在事务启动的第一个语句创建的，之后事务存续期间都不变；\nRC是在每个语句开始执行的时候，都创建一个视图，每个视图只管自己一个语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559060879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81545,"user_name":"诸葛村夫","can_delete":false,"product_type":"c1","uid":1055492,"ip_address":"","ucode":"E4E3655D62CF52","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/04/caad53e0.jpg","comment_is_top":false,"comment_ctime":1553939790,"is_pvip":false,"replies":[{"id":"29641","content":"可以先放一下，看完后面的文章再来复习哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554047645,"ip_address":"","comment_id":81545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14438841678","product_id":100020801,"comment_content":"这篇啃起来有点吃力","like_count":3,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445246,"discussion_content":"可以先放一下，看完后面的文章再来复习哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554047645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72700,"user_name":"啊啊啊哦哦","can_delete":false,"product_type":"c1","uid":1309877,"ip_address":"","ucode":"68C7153ECAAC57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","comment_is_top":false,"comment_ctime":1551697153,"is_pvip":false,"replies":[{"id":"26659","content":"Undo log的写入策略和数据是一样的（WAL）","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551848700,"ip_address":"","comment_id":72700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14436599041","product_id":100020801,"comment_content":"老师undo log 有缓冲吗。像redo log那样","like_count":3,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441693,"discussion_content":"Undo log的写入策略和数据是一样的（WAL）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551848700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68671,"user_name":"五个半柠檬ci","can_delete":false,"product_type":"c1","uid":1272081,"ip_address":"","ucode":"7A59415866C658","user_header":"https://static001.geekbang.org/account/avatar/00/13/69/11/3edeabf3.jpg","comment_is_top":false,"comment_ctime":1550570209,"is_pvip":false,"replies":[{"id":"24997","content":"高水位不在视图数组里面哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550999618,"ip_address":"","comment_id":68671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14435472097","product_id":100020801,"comment_content":"老师好，想问个有关高水位和transaction id计算顺序的问题。<br><br>从文中截了两端话：<br>1. “数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1记为高水位。这个视图数组和高水位，就组成了当前事务的一致性视图”。<br>2. “事务 A 开始前，系统里面只有一个活跃事务 ID 是 99；事务 A、B、C 的版本号分别是 100、101、102……这样，事务 A 的视图数组就是 [99,100]”。<br><br>这样看来，开启一个事物时，先计算一致性视图数组的高水位，再给当前事物一个transaction id。因为，如果先给当前事物transaction id，那A的版本号应该就是100了，此时计算高水位应该就是101，那A的视图数组就应该是[99, 100, 101]了，和结论不符。<br><br>这样理解对吗？","like_count":3,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439790,"discussion_content":"高水位不在视图数组里面哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550999618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45264,"user_name":"某、人","can_delete":false,"product_type":"c1","uid":1308784,"ip_address":"","ucode":"ADB42AA12A11C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/70/f3a33a14.jpg","comment_is_top":false,"comment_ctime":1543572620,"is_pvip":false,"replies":[{"id":"16137","content":"👍🏿<br><br>看一下置顶评论里面我的一个回复哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543628494,"ip_address":"","comment_id":45264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14428474508","product_id":100020801,"comment_content":"接上一篇更正:<br>rc不是没有gap.情况稍显复杂,基本上就是replace和insert有唯一索引的情况加next-key lock(还分X和S)<br>老师我有个问题:<br>假如A开启事务up_limit_id为100,B开启事务up_limit_id为110,C开启事务up_limit_id为120<br>A trx101   <br>select ;      B tid111<br>                   select;             C tid121<br>\t\t\t                 update;<br>update                              commit;<br>commit;                             <br>                  select;<br>C最先把row tid改写为121,A随后把该行的row tid更改为101.那么B第二次去判断110&gt;101,那不是就能查到A更改的数据了？","like_count":3,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430970,"discussion_content":"👍🏿\n\n看一下置顶评论里面我的一个回复哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543628494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230120,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1024763,"ip_address":"","ucode":"F6B5C64BC99FB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","comment_is_top":false,"comment_ctime":1593268946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183203538","product_id":100020801,"comment_content":"思考题的核心是更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。rr 模式下select 读到的是事务开始前数据，如果有其他事务更新过数据导致事务内的更新时当前读找不到id = c 的数据。数据没有修改，那么事务没内再执行查询就查到就还是事务开始时的数据。就会出现思考题现象。如果关闭事务再查询你会发现数据已经变了。只是因为可重复读的情况下事务内不可见变化。","like_count":2},{"had_liked":false,"id":185885,"user_name":"蛋炒饭加鸡蛋","can_delete":false,"product_type":"c1","uid":1628398,"ip_address":"","ucode":"C75E27B9FB3336","user_header":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","comment_is_top":false,"comment_ctime":1583719867,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10173654459","product_id":100020801,"comment_content":"“好，现在事务 A 要来读数据了，它的视图数组是[99,100]。当然了，读数据都是从当前版本读起的。所以，事务 A 查询语句的读数据流程是这样的：<br>找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；”<br>老师，对于当前已经创建事务的最大ID就是A事务自己的100，如果按照文中的规则，+1就变成101了，但是您又说找到（1，3）的时候，row trx_id=101，比高水位大，此时事务A的高水位是多少呢？","like_count":2,"discussions":[{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396058,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632387544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118098,"user_name":"Mr.钧👻","can_delete":false,"product_type":"c1","uid":1249939,"ip_address":"","ucode":"D781E030E79245","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg","comment_is_top":false,"comment_ctime":1564239451,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10154174043","product_id":100020801,"comment_content":"老师你好，请问要怎么样打开两个seesion呢？用navicat可以做到吗？","like_count":2,"discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42512,"discussion_content":"启动两个终端就行了，然后用 begin 开始事务","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572686253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135310,"discussion_content":"navicat 连接后，开两个查询窗口就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579085280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101929,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","nickname":"张德","note":"","ucode":"31FE63E8725EFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3500,"discussion_content":"这个我也不太懂   有谁能说一下吗   就那种sql语句交叉执行  应该怎么实验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564539798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1810051,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0uyg1IicbEhLwsgM2A2ROoyVdWdmUqZfQfs6G67w9m3hdRNBMOQJatQoACj3qNGgj2KVIgricaYiaQ/132","nickname":"木得感情的编码机器","note":"","ucode":"9C6CD47ADCB8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101929,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","nickname":"张德","note":"","ucode":"31FE63E8725EFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168374,"discussion_content":"用do sleep(秒数); 来实现休眠，让别的事务穿插进来执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581576740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3500,"ip_address":""},"score":168374,"extra":""}]}]},{"had_liked":false,"id":98576,"user_name":"热心市民小侯","can_delete":false,"product_type":"c1","uid":1347767,"ip_address":"","ucode":"0F7D64B5F7193B","user_header":"https://static001.geekbang.org/account/avatar/00/14/90/b7/711aa6f9.jpg","comment_is_top":false,"comment_ctime":1559034110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148968702","product_id":100020801,"comment_content":"看完之后，感叹一下，老师真的是太强了！","like_count":2},{"had_liked":false,"id":97688,"user_name":"💯","can_delete":false,"product_type":"c1","uid":1528043,"ip_address":"","ucode":"49E69000CB4753","user_header":"https://static001.geekbang.org/account/avatar/00/17/50/eb/77672c63.jpg","comment_is_top":false,"comment_ctime":1558749685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148684277","product_id":100020801,"comment_content":"请问老师，我在5.7的代码里，发现事务生成数组的时候，是不包括本身的事务id的，你在图4中是包含的。<br>ps:   ReadView::copy_trx_ids","like_count":2},{"had_liked":false,"id":76923,"user_name":"ANTIPE","can_delete":false,"product_type":"c1","uid":1446155,"ip_address":"","ucode":"0BC6609DB877F8","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/0b/433b5fe8.jpg","comment_is_top":false,"comment_ctime":1552751979,"is_pvip":false,"replies":[{"id":"28919","content":"静态的<br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1553420468,"ip_address":"","comment_id":76923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142686571","product_id":100020801,"comment_content":"有一点疑问，事务启动时创建的“活跃”事务ID数组是静态的还是会随着数组中事务的结束作动态调整？为什么会出现文中描述的“落在黄色部分，但row trx_id 不在数组中，并且对应版本已提交”的情况？<br>另外，解答一下ithunter关于互相喜欢成为好友的问题：这个执行逻辑就有些问题，为什么不将第3步放到第1步来做，先创建like关系再创建friend关系，只需要保证不会创建出重复的friend关系就可以了。","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443504,"discussion_content":"静态的\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553420468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49683,"user_name":"杰哥长得帅","can_delete":false,"product_type":"c1","uid":1241993,"ip_address":"","ucode":"5A7FD1794F62D7","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/89/fcfecb46.jpg","comment_is_top":false,"comment_ctime":1544752225,"is_pvip":false,"replies":[{"id":"17912","content":"这个就是文中的session B 不是？<br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544762684,"ip_address":"","comment_id":49683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134686817","product_id":100020801,"comment_content":"老师，您说：<br>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；<br>那么为什么不能避免幻读呢<br><br>还有一种现象：<br>当前事务x中查询出a值为1，另外一个事务将a值加一，当前事务查询到a值仍然为一，但是如果在当前事务对a update加一，查询出来的a就变成3了","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432719,"discussion_content":"这个就是文中的session B 不是？\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544762684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48971,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1544583930,"is_pvip":false,"replies":[{"id":"17586","content":"哦，好吧，第一段你说的对，还有select ... for update, 我之前回复的时候误以为你只是说update语句哈<br><br>第二段也对。update 和select... for update都会加行的写锁，都不能并发的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544586372,"ip_address":"","comment_id":48971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134518522","product_id":100020801,"comment_content":"关于之前的疑惑：<br>之前问了个问题，老师的答复是：行锁一般不是sql语句指定的，在innodb自动加的。<br>那 sql语句中 ...... for update 这个语法，不就是上锁吗？。<br>这个锁和innodb加的锁是什么关系？？<br><br>我自己的猜测答案：<br>在隔离级别处于可重复读：innodb为了防止并发更新，针对更新的数据都会自动加上行锁。那么实际上两个事务同时执行update同一条语句的操作，是不会发生并发问题的。业务上写的sql语句加上了for update是为了保证 “当前读”，读到最新的数据。因为如果没有for update，应该是读不到当前数据的，而是处于 “快照读”。<br>所以总结一下：for update主要是为了读取到最新数据，即使没有for update，但是只要两个事务同时更新同一条数据，那么就必然会有阻塞等待的过程。<br>我这么理解对吗？","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432445,"discussion_content":"哦，好吧，第一段你说的对，还有select ... for update, 我之前回复的时候误以为你只是说update语句哈\n\n第二段也对。update 和select... for update都会加行的写锁，都不能并发的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544586372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48723,"user_name":"小卡向前冲","can_delete":false,"product_type":"c1","uid":1124914,"ip_address":"","ucode":"1C8908A61FA00B","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/32/6354a589.jpg","comment_is_top":false,"comment_ctime":1544522611,"is_pvip":false,"replies":[{"id":"17490","content":"[99,100,101], 高水位是103，还是可以推得出来的吧","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544524282,"ip_address":"","comment_id":48723,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10134457203","product_id":100020801,"comment_content":"老师你好，我有一点不太明白：提交的例子中，事务A进行查询时，事务B未提交，事务C已提交；那么，此时事务A的read-view 数组是多少呢？按照文章中的说法，我认为应该还是[99, 100]，但是这样无法推出查询结果是2。<br>请问，我是在哪里理解有误么？另，看评论中有人提到了up_limit_id 这个值在文中似乎没有提及，但是如果引入这个变量的话，就可以解决我上面的问题了。","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432329,"discussion_content":"[99,100,101], 高水位是103，还是可以推得出来的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544524282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810051,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0uyg1IicbEhLwsgM2A2ROoyVdWdmUqZfQfs6G67w9m3hdRNBMOQJatQoACj3qNGgj2KVIgricaYiaQ/132","nickname":"木得感情的编码机器","note":"","ucode":"9C6CD47ADCB8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168398,"discussion_content":"文章是不是修改过，为什么文中说事务A的水位是 [99,100]，你们怎么都在说 [99,100,101]？事务A在开始时不是加了参数吗，在开始就创建一致性视图，不应该从头到尾都是99,100吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581578943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143220,"discussion_content":"在RC级别下，事务A高水位是103，在RR级别下事务A高水位是101","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579496087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222238,"discussion_content":"101+1不应该是102吗为什么是103？活跃事务组的最大值+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586102892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143220,"ip_address":""},"score":222238,"extra":""}]}]},{"had_liked":false,"id":46219,"user_name":"算不出流源","can_delete":false,"product_type":"c1","uid":1178209,"ip_address":"","ucode":"B6CFEF672E3E1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/61/691e2936.jpg","comment_is_top":false,"comment_ctime":1543885835,"is_pvip":false,"replies":[{"id":"16545","content":"1. 有可能高水位会略大一点<br><br>2. 高低之间要有一些已经提交过的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543890229,"ip_address":"","comment_id":46219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133820427","product_id":100020801,"comment_content":"疑问一：图3是否有误？当前事务的txid必定等于高水位吧？因为“在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。”说明在事务启动瞬间它的txid必定是系统里最高的水位。<br><br>疑问二：事务启动的时候为什么InnoDB要为事务构造一个“数组”，不是保存高低水位就可以了吗？","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431383,"discussion_content":"1. 有可能高水位会略大一点\n\n2. 高低之间要有一些已经提交过的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543890229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45408,"user_name":"欧阳波","can_delete":false,"product_type":"c1","uid":1124750,"ip_address":"","ucode":"A19B46DBC4FEBF","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/8e/f6241f28.jpg","comment_is_top":false,"comment_ctime":1543633787,"is_pvip":false,"replies":[{"id":"16172","content":"如果业务上是接受清空的，truncate没问题😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543638609,"ip_address":"","comment_id":45408,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133568379","product_id":100020801,"comment_content":"老师好 我是一个java开发 看了前面文章 提到 清空索引空间问题 我们现在得表所有的删除都用truncate 不用delete是否合理","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431022,"discussion_content":"如果业务上是接受清空的，truncate没问题😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543638609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45266,"user_name":"🚶🏻_____路人丙","can_delete":false,"product_type":"c1","uid":1299950,"ip_address":"","ucode":"86F77BE38D4DCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/ee/762ca3f9.jpg","comment_is_top":false,"comment_ctime":1543572976,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10133507568","product_id":100020801,"comment_content":"老师你好第一次提问不是dba，有个疑问，事务不是先拿到锁的先执行么，为啥图3，事务C先执行？","like_count":2,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333376,"discussion_content":"锁不是启动事务时加的 , 是到具体执行语句时开始加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607509127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143189,"discussion_content":"这只是举例的场景，有的后拿到事务先执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579494665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45056,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1198258,"ip_address":"","ucode":"4D6257B8D63FA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/b2/cca85581.jpg","comment_is_top":false,"comment_ctime":1543541754,"is_pvip":false,"replies":[{"id":"16033","content":"Begin之后的第一个语句算启动事务<br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543542755,"ip_address":"","comment_id":45056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133476346","product_id":100020801,"comment_content":"老师您好，事务启动是begin就记录up_limit_id还是begin之后的第一条select语句开始记录up_limit_id?我测试中，客户端A 执行begin后但没执行select，客户端B开始事务修改提交后，客户端A再次select会读到这个修改值。而另一种begin后直接select,此后客户端B开始事务修改后，客户端Aselect就是第一次Select的值。","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430908,"discussion_content":"Begin之后的第一个语句算启动事务\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305933,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1628235552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923202848","product_id":100020801,"comment_content":"老师，问您一个问题，文章里说事务启动瞬间，会构造一个数组，这个数组是个动态数组？这样在他之后启动的事务id也都能接着加过来，然后HW会不断增加？","like_count":1},{"had_liked":false,"id":289789,"user_name":"贾伟成","can_delete":false,"product_type":"c1","uid":1725348,"ip_address":"","ucode":"F1BAC95DE82931","user_header":"https://static001.geekbang.org/account/avatar/00/1a/53/a4/4552cdbd.jpg","comment_is_top":false,"comment_ctime":1619175123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5914142419","product_id":100020801,"comment_content":"对于文中的：<br>    这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：<br>    1. 如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；<br>    2. 如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br>    3. 如果落在黄色部分，那就包括两种情况<br>        a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>        b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br><br>改为下面这样，是不是更合理些：<br>    1. 如果落在绿色部分，表示这个版本是已提交的事务，这个数据是可见的；<br>    2. 如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br>    3. 如果落在黄色部分，那就包括两种情况<br>        a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>        b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的或者是当前事务自己生成的，可见。","like_count":1},{"had_liked":false,"id":273308,"user_name":"龙晓","can_delete":false,"product_type":"c1","uid":1043325,"ip_address":"","ucode":"FAF34F1C65D103","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/c9xpiakQ3OC1AlfCeW03lLnnb7mj5v35Hib8YDs66zpnVib2n2qFichFmFp2Ec4QDPR0dKh38MkBBLyD3bE4NiaanZQ/132","comment_is_top":false,"comment_ctime":1610530571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905497867","product_id":100020801,"comment_content":"我也来留个言吧，主要是MVCC实现这块，前前后后通读了这篇文章五六遍，又回过头看了几遍第三章，结合网上一些论坛文章，花了两天时间，总算有了一些眉目，同时对比了之后也能感觉到丁奇的文章确实干货满满！<br>MVCC实现中有两个关键点：<br>第一是row_trx_id是dml事务也就是更新或删除事务才有的，查询的事务id不一样（可以测试一下），每个查询开始的步骤就是根据row_trx_id是否提交来构建一个针对每行未提交的事务id数组readview(注意：每行一个row_trx_id数组)，<br>事务id是全局单调递增的，所以每次查询事务开始都会取走当时全局最大的事务id，针对每行row_trx_id小于等于这个事务id的未提交事务id构成readview数组。<br>第二是根据该数组来判断位于表中或undolog中的行数据是否可见，规则如下：<br>1、如果row_trx_id小于数组最小值，说明transactionid比readview创建时未提交的最小事务id还小，肯定是已经提交的，可见；<br>2、如果row_trx_id大于数组最大值，说明改行的事务在本查询之后发生，属于未来事务，不可见；<br>3、如果row_trx_id位于数组最大值和最小值之间，有两种情况：<br>   a、如果row_trx_id能在数组中查到，说明readview创建时，该事务未提交，即本查询开始时该事务还未提交，不可见；<br>   b、如果row_trx_id在数组中查不到，但是比最大值小，比最大值大，说明本查询开始时，该行事务已经开始，查不到说明事务已提交，可见。<br><br>容易绕进去的地方：<br>可重复读是事务开始时创建一次readview数组，后面不会变，即使后面事务提交了也不会从readview中删除，所以哪怕我们看到查询结果时事务已经提交了，我们仍然看不到，因为readview没变；<br>读提交是每次查询时重新生成readview数组，如果在查询执行前，事务提交了，那么重新生成的readview数组中就看不到该事务id了，因为readview数组保存的是未提交事务id数组，所以提交后可见。","like_count":1},{"had_liked":false,"id":259321,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1604680527,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5899647823","product_id":100020801,"comment_content":"内容好多，需要吸收一下。","like_count":1},{"had_liked":false,"id":248526,"user_name":"creed","can_delete":false,"product_type":"c1","uid":1911117,"ip_address":"","ucode":"617CA912AE9CD1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3wia2iaNnpnfRYs5O1OIYWhv7oEXSiaArqc9tIkicKVxBLUCycdBoNvzMfF2GRl89e7oJ2icZNCvdMD5iaibcOVemX5GA/132","comment_is_top":false,"comment_ctime":1600213541,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5895180837","product_id":100020801,"comment_content":"老师好，我有个疑问。<br>我起了两个一致性快照，如下：<br>sql1：<br>start transaction with consistent snapshot; <br>SELECT telephone FROM `user`;  <br>UPDATE `user` SET telephone =2;<br>SELECT telephone FROM `user`;<br>COMMIT<br><br>sql2：<br>start transaction with consistent snapshot;<br>SELECT telephone FROM `user`;<br>UPDATE `user` SET telephone =3;<br>SELECT telephone FROM `user`;<br>COMMIT<br><br>表中只有一行数据我执行sql1的update没有commit，在执行sql2的update会等待锁。<br><br><br>但是用当前读不会锁住，直接执行成功。<br>UPDATE `user` SET telephone =telephone+1;<br><br>这是为什么呢？","like_count":1,"discussions":[{"author":{"id":1911117,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3wia2iaNnpnfRYs5O1OIYWhv7oEXSiaArqc9tIkicKVxBLUCycdBoNvzMfF2GRl89e7oJ2icZNCvdMD5iaibcOVemX5GA/132","nickname":"creed","note":"","ucode":"617CA912AE9CD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307616,"discussion_content":"晕了，再次实验没有出现当前读直接执行成功","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600697635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2351720,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e2/68/ce547a12.jpg","nickname":"zjm1314","note":"","ucode":"63B0EAB7045054","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1911117,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3wia2iaNnpnfRYs5O1OIYWhv7oEXSiaArqc9tIkicKVxBLUCycdBoNvzMfF2GRl89e7oJ2icZNCvdMD5iaibcOVemX5GA/132","nickname":"creed","note":"","ucode":"617CA912AE9CD1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340464,"discussion_content":"不会成功，还是被阻塞住","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610011103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307616,"ip_address":""},"score":340464,"extra":""}]},{"author":{"id":1911117,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3wia2iaNnpnfRYs5O1OIYWhv7oEXSiaArqc9tIkicKVxBLUCycdBoNvzMfF2GRl89e7oJ2icZNCvdMD5iaibcOVemX5GA/132","nickname":"creed","note":"","ucode":"617CA912AE9CD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307609,"discussion_content":"@老师，能帮忙回答一下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600695472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237298,"user_name":"慌张而黑糖","can_delete":false,"product_type":"c1","uid":1638878,"ip_address":"","ucode":"B4416885A301C8","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/de/bf524817.jpg","comment_is_top":false,"comment_ctime":1595772083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890739379","product_id":100020801,"comment_content":"“版本已提交，但是是在视图创建后提交的，不可见；”对于这句话我有点疑问？<br>就是之前我在很多地方看到有这样一段描述“在m_up_limit_id和m_low_limit_id之间的事务是否可见会判断该事物的id是否在m_ids数组里，不在的话就是可见的”。<br>我在想就是有没有这样一种情况，事务A线启动然后创建了视图，事务B在事务A之后启动并创建了视图，操作后提交，在事务A之前提交，这个事务B是不在m_ids数组里的，它是如何判断不可见的呢？还是说我对m_low_limit_id的理解有误，我的理解是m_low_limit_id它是max_trx_id当前未分配出去的值如果事务Aid为1，事务Bid为2，那m_low_limit_id是不是应该为3。这里如果有个图就好了，口述描述的不是很明白，之前我在部落发了个问题，上面有个图，结合图可能更容易理解我问的。困扰我很长时间了，找了很多资料也没找到想要的答案","like_count":1},{"had_liked":false,"id":217994,"user_name":"Geek_30fab2","can_delete":false,"product_type":"c1","uid":1938695,"ip_address":"","ucode":"833A3FBFC04527","user_header":"","comment_is_top":false,"comment_ctime":1589688720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884656016","product_id":100020801,"comment_content":"RC和RR隔离级别最主要就是生成ReadView的时机不同前者是每次查询都重新生成ReadView后者则是只认准第一次生成ReadView，而在于多事务读主要是小于或者等于活跃事务都可见，并且是基于快照读！而update会自动加行锁中的X锁，select不管加X锁还是S锁都是当前读！当前读其实就是最新的数据，快照读其实就是读的undo日志里面的旧值","like_count":1},{"had_liked":false,"id":173269,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1579491247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874458543","product_id":100020801,"comment_content":"老师，请教一个问题，RR与RC只是视图创建的位置不同，数据判断与读取的逻辑应该是相同的。我想问，当前正在执行事务B，id=45，此时已提交视图里面有已提交视图23，89两个版本，那如果执行select操作，是应该读23还是89？","like_count":1},{"had_liked":false,"id":171322,"user_name":"我就是不吃糖醋肉","can_delete":false,"product_type":"c1","uid":1597417,"ip_address":"","ucode":"F94A1D333C664F","user_header":"https://static001.geekbang.org/account/avatar/00/18/5f/e9/bf1f05ca.jpg","comment_is_top":false,"comment_ctime":1578901959,"is_pvip":false,"replies":[{"id":"66453","content":"“快照”是整库的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1578926882,"ip_address":"","comment_id":171322,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873869255","product_id":100020801,"comment_content":"老师你好，您举例都是单表t的情况，假设我的事务中间有2个表，t1和t2，那么事务的流程是怎么样的呢？t1的快照和t2的快照是同一时刻生成的吗？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481295,"discussion_content":"“快照”是整库的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578926882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161529,"user_name":"bvb09","can_delete":false,"product_type":"c1","uid":1335882,"ip_address":"","ucode":"6318AEA6A59E29","user_header":"https://static001.geekbang.org/account/avatar/00/14/62/4a/eaea95fe.jpg","comment_is_top":false,"comment_ctime":1576224732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871192028","product_id":100020801,"comment_content":"关于高水位和视图数组，我是这么理解的：<br>时刻\t        操作\t                                                            事务id<br>00:00:01\t开启事务\t                                                    tx_id=98<br>00:00:02\t开启事务\t                                                    tx_id=99<br>00:00:03\t开启事务\t                                                    tx_id=100<br>00:00:04\t提交事务100\t<br>00:00:05\t开始拍照，记录活跃的未提交事务id集合, {98, 99}\t<br>00:00:05\t计算高水位事务，tx_id为101\t<br><br>此时，来分析下：<br>1、如果小于98的（低水位），肯定可见<br>2、如果大于101，不可见，因为在我拍照的那一瞬间，101事务还是未生成的<br>3、你会发现丢了tx_id为100的，其实100已经在我拍照之前已经提交了，而他却不在活跃的数组中，所以说落在98到101之间的存在两种情况（高水位和低水位之间的黄色部分），要么可见，要么不可见。例如：98和99不可见，100是可见的。<br>这是我的理解，希望对大家有一定的帮助。","like_count":1},{"had_liked":false,"id":151051,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1573647658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868614954","product_id":100020801,"comment_content":"接上一条，我的疑惑解答了。按照老师假设的情况，对于事务A来说，启动的时候，当前系统中的已创建的最大事务ID应该是它自己100，高水位也就为101。get到了哈哈","like_count":1},{"had_liked":false,"id":125260,"user_name":"杨宝强","can_delete":false,"product_type":"c1","uid":1189290,"ip_address":"","ucode":"B2352D7EA24F31","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/aa/ced0170d.jpg","comment_is_top":false,"comment_ctime":1566133186,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5861100482","product_id":100020801,"comment_content":"老师， 我有一个地方非常不理解，或者哪位同学看到能否帮我解答一下，<br>就是在用 transaction id 举例子的时候， 事务A启动之前只有一个事务ID为99的事务，然后就这个地方我非常不理解，为什么事务A的数组是 【99， 100】，我根据文章中的对高水位的定义，100即为A的高水位，那事务A的事务ID又是多少呢，99的话不是事务A之前启动的那个事务嘛，真的绕不过来了。。。 求解答！！","like_count":1,"discussions":[{"author":{"id":1453053,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2b/fd/7013289d.jpg","nickname":"温故而知新可以为师矣","note":"","ucode":"FADCDFA9F9E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106379,"discussion_content":"我想你可能是被例子中&#34;高水位和事务A的id恰巧相同&#34;搞晕了。\n1：事务A的事务id就是100\n2：高水位就是100\n3：大于高水位就是后续启动的事务，如事务B 101，事务C 102。\n4：（该条不明白可忽略，看1，2，3即可）mysql正常分配的事务id并非+1递增的，而是+n，因此如果按照真实的情况，高水位是99+1=100，而事务A的事务id就是99+n后，可能是109或118（反正是+n后的值）。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577534576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143193,"discussion_content":"老师的意思是，在创建事务A之前已经有一个活跃事务99了，现在事务A的id续延100，那此时的事务A高水位是101，活跃事务数组【99,100】。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579494858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1602420,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/74/3bf4b74e.jpg","nickname":"阿德","note":"","ucode":"186D5E19E3CB6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6453,"discussion_content":"原文是“事务 A 开始前，系统里面只有一个活跃事务 ID 是 99；”，我理解是99也是一个正在开启中的事务（还未提交），而100就是事务A自己的事务ID了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566907097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124459,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1565887922,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5860855218","product_id":100020801,"comment_content":"1.对于可重复读，一致性视图是在事务开始的时候创建的，由于事务ID严格递增，因此该事务ID在他自己的视图数组中是最大的<br>2.对与读提交，一致性视图是在执行sql时才创建，因此该事务的ID在他自己的视图数组中位置不确定<br>一开始只看了可重复读，我说怎么可能会在视图数组中出现比当前事务ID还大的呢，看到后面读提交才明白","like_count":1,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276986,"discussion_content":"不对，事务的开始有两个语句:begin和start with snapshot。\nbegin:执行第一条sql语句时才创建事务id和一致性视图。\nstart with snapshot:立即创建事务id和一致性视图。\n可重复读的一致性视图的结束是commit语句。\n在提交读中，一致性视图在每条sql语句创建的时候都会重新创建，这时候start with snapshot会失效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590978668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107789,"user_name":"L.Messi","can_delete":false,"product_type":"c1","uid":1204364,"ip_address":"","ucode":"617C37A23380B1","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/8c/742cd162.jpg","comment_is_top":false,"comment_ctime":1561608931,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5856576227","product_id":100020801,"comment_content":"老师，关于事务利用 undo log 进行回滚，我有个问题：以图6为例，假设事务B update 执行完了，C&#39;在commit之前突然挂了，这时 C&#39; 要回滚，那么最终这一行上 k 的值会是什么情况呢？事务B也会跟着回滚吗？","like_count":1,"discussions":[{"author":{"id":1612570,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Xibh27ZicBhXls5KsPibBXZI4RKlR0MUbUiaEuOS2ORibKaxWSicpIjd4lvWUWqtNAde7EeDDTpWKAiapGdHeaiaDqczWQ/132","nickname":"。。。。。","note":"","ucode":"985B1561AC9152","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3738,"discussion_content":"事务C都没提交，事务B的update会被阻塞住。如果事务C挂了，事务B的update会获得行锁继续执行，k=2","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564740032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92265,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1557217289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852184585","product_id":100020801,"comment_content":"DAY8，打卡","like_count":1},{"had_liked":false,"id":91548,"user_name":"东青","can_delete":false,"product_type":"c1","uid":1001046,"ip_address":"","ucode":"D7FF3299721F19","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/56/5e83f44b.jpg","comment_is_top":false,"comment_ctime":1557052963,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5852020259","product_id":100020801,"comment_content":"文中：现在事务 A 要来读数据了，它的视图数组是 [99,100]。当然了，读数据都是从当前版本读起的。所以，事务 A 查询语句的读数据流程是这样的：找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；<br>---------------------------<br>这里我不是太明白，事务A此时视图数组是 [99,100]，那么高水位就是 101，找到 (1,3) 的时候，判断出row trx_id=101，两者不是相等吗？","like_count":1,"discussions":[{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396062,"discussion_content":"+1，我也没想明白这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632387742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80123,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1553608649,"is_pvip":false,"replies":[{"id":"30226","content":"回滚其实就是把最新的版本(还没提交）删掉。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554655656,"ip_address":"","comment_id":80123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848575945","product_id":100020801,"comment_content":"提问前先感谢老师辛勤的劳动，这次是我2刷本课程，老师的课程每次读都能学到新的东西。我的问题是，如果事务最终并没有正常提交而是发生了回滚，那么在回滚的逻辑中是否包含将文中所说的回滚段中相应txid对应的修改记录删除的逻辑？innodb中回滚端的实现是否和文中示意图中一样使用类似链表的方式实现的呢？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444759,"discussion_content":"回滚其实就是把最新的版本(还没提交）删掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554655656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71867,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1551456557,"is_pvip":false,"replies":[{"id":"26048","content":"😆，(๑•̀ㅂ•́)و✧加油","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551489465,"ip_address":"","comment_id":71867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846423853","product_id":100020801,"comment_content":"截止今日，本节最耗脑力！<br>是个人原因还是。。。？😂<br>但是我相信坚持学习，多看多想总会透彻的。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441370,"discussion_content":"😆，(๑•̀ㅂ•́)و✧加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551489465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69340,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1550719900,"is_pvip":false,"replies":[{"id":"24635","content":"之前那个描述太复杂了，按照这个改写的版本理解吧😆<br><br>@ithunter 同学提的问题，在第15篇有展开","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550726995,"ip_address":"","comment_id":69340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845687196","product_id":100020801,"comment_content":"@ithunter 的 A 和 B 互相喜欢的问题，想到了一个方案，但是需要额外处理 insert t_friend 冲突的情况：<br>1. 调整了 insert into t_like 的位置<br>2. select 时加 S 锁，读当前值<br><br>```sql<br># A 喜欢 B<br>start transaction with consistent snapshot;<br>insert into t_like(user_id, liker_id) values (&#39;A&#39;, &#39;B&#39;);<br>select * from t_like where user_id = &#39;B&#39; and liker_id = &#39;A&#39; lock in share mode;<br>insert into t_friend<br>commit;<br>```<br><br>```sql<br># B 喜欢 A<br>start transaction with consistent snapshot;<br>insert into t_like(user_id, liker_id) values (&#39;B&#39;, &#39;A&#39;);<br>select * from t_like where user_id = &#39;A&#39; and liker_id = &#39;B&#39; lock in share mode;<br>insert into t_friend<br>commit;<br>```<br><br><br>------<br><br>老师，您好！<br>评论里几乎都是提 &quot;up_limit_id&quot;，但是我在文章里找了几遍，都没看到相关内容。<br>只有在课程列表第 8 课的展示简介里，看到 &quot;up_limit_id&quot; 这个关键字。<br>文章内容是否有调整？调整前的文章可否也放出来让同学们学习？<br>","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440069,"discussion_content":"之前那个描述太复杂了，按照这个改写的版本理解吧😆\n\n@ithunter 同学提的问题，在第15篇有展开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550726995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65879,"user_name":"evil","can_delete":false,"product_type":"c1","uid":1320143,"ip_address":"","ucode":"F05DB49B479EAE","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/cf/064ce4ac.jpg","comment_is_top":false,"comment_ctime":1549717918,"is_pvip":false,"replies":[{"id":"23412","content":"1. 这三个字段都不是用来表示“删除”的，删除就是delete mark，标记在数据上<br>2. 是的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549875227,"ip_address":"","comment_id":65879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5844685214","product_id":100020801,"comment_content":"老师你好，在这一章我有几个问题想确认，在隔离级别为consistent read<br>1.当删除表里面数据的时候，官方文档说该行数据不会立刻删除而是，会进行一个标记删除， 但是官方文档里面说，每一行只有三个隐藏字段 ，6-byte DB_TRX_ID ， 7-byte DB_ROLL_PTR，6-byte DB_ROW_ID，请问哪个字段是来表示删除的，或者说还是由另外的一个文件再维护？<br>2.当一个表里面存在非聚合索引的时候，因为做的是标记删除，当某个事务去做查询的时候，如何知道该行数据已经删除了，每个非聚合索引每一个索引数据都会有一个标示位吗？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438623,"discussion_content":"1. 这三个字段都不是用来表示“删除”的，删除就是delete mark，标记在数据上\n2. 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549875227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63198,"user_name":"书豪","can_delete":false,"product_type":"c1","uid":1068091,"ip_address":"","ucode":"212FBDE59E8457","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/3b/2780fc51.jpg","comment_is_top":false,"comment_ctime":1548296880,"is_pvip":false,"replies":[{"id":"22382","content":"没区别， 当前活跃的事务id列表，就是视图数组","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548298124,"ip_address":"","comment_id":63198,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843264176","product_id":100020801,"comment_content":"老师在置顶帖@夏日雨的提问中回答说到，所有事物启动时还要保存“现在正在执行的所有事物ID列表”，不明白这里所说的正在执行的和文章中提到的‘当前正在“活跃的”所有事物ID’，这两者之间有什么区别呢？“正在执行”和“当前活跃的”区别在哪里？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437498,"discussion_content":"没区别， 当前活跃的事务id列表，就是视图数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548298124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62409,"user_name":"阿邱","can_delete":false,"product_type":"c1","uid":1281762,"ip_address":"","ucode":"A3D1A90E01D83D","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/e2/1e70c61d.jpg","comment_is_top":false,"comment_ctime":1548049514,"is_pvip":false,"replies":[{"id":"22088","content":"是在“视图创建”这个时刻之后，才提交的，所以不可见。<br><br>看文章的时候心态要平和，否则其实是浪费自己的时间，并没有什么好处的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548077123,"ip_address":"","comment_id":62409,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5843016810","product_id":100020801,"comment_content":"2.版本已提交，但是是在视图创建后提交的，不可见；<br>写东西能不能逻辑清晰一点？什么叫视图创建后提交？问题来源在哪里？必须每一点都逻辑清楚，中途断片别人怎么看得下去？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437201,"discussion_content":"是在“视图创建”这个时刻之后，才提交的，所以不可见。\n\n看文章的时候心态要平和，否则其实是浪费自己的时间，并没有什么好处的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1548077123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263932,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","nickname":"静静聆听","note":"","ucode":"0A8600CB928EFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285354,"discussion_content":"我感觉这段聊天莫名搞笑啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592814343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55907,"user_name":"窗外","can_delete":false,"product_type":"c1","uid":1311172,"ip_address":"","ucode":"1E8F2D9439E7F3","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/c4/21c2cde4.jpg","comment_is_top":false,"comment_ctime":1546345045,"is_pvip":false,"replies":[{"id":"20126","content":"我说的整库是专指“整库中的所有Innodb”哈，嗯嗯忘记强调了<br><br>MyISAM 表没处理，所以每次要读数据的时候都去直接读最新的，没有可重复读这个特性","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546348126,"ip_address":"","comment_id":55907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841312341","product_id":100020801,"comment_content":"在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。<br><br>有个疑问啊，对于库中的 myisam 表是怎么处理的？<br><br>作者回复<br>MyISAM 不支持事务…<br><br>就是考虑到 myisam 不支持事务，所以才想知道，做快照时对 myisam 表是怎么处理的，因为您不是说基于整库的嘛，整库肯定包括各种引擎的表啊","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434877,"discussion_content":"我说的整库是专指“整库中的所有Innodb”哈，嗯嗯忘记强调了\n\nMyISAM 表没处理，所以每次要读数据的时候都去直接读最新的，没有可重复读这个特性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546348126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55326,"user_name":"myf","can_delete":false,"product_type":"c1","uid":1303289,"ip_address":"","ucode":"028A99B2FA01EB","user_header":"","comment_is_top":false,"comment_ctime":1546131468,"is_pvip":false,"replies":[{"id":"20055","content":"是不是在事务中没提交？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546171598,"ip_address":"","comment_id":55326,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841098764","product_id":100020801,"comment_content":"笔误，是相差几十毫秒，是业务日志显示已经插入成功，返回了影响行数1，然后启动的查询没查到，有点奇怪<br>-----------------------------------------------------------------------<br>请教一下，我在mysql实践中遇到个问题，就是同一个后台服务的方法A中执行了插入一条数据成功后，然后方法B中去查询发现没查到这条数据，其中方法B是一个异步方法（另一线程），看日志发现查询是在插入后几十微妙，这是不是出现幻读了，有什么办法解决吗？隔离级别是Repeatedable Read，数据库没有读写分离，查询条件也是唯一索引的。<br>2018-12-28<br> 作者回复<br>这个不是幻读呀，这个是写入了查不到<br><br>你看的“查询在插入之后几十微秒发起”，这个日志是客户端日志，还是数据库日志？<br>数据库除非特别定制，否则没有微秒单位，<br>如果是业务发送端的话，有可能查询是后发先到哦，毕竟才差几十微秒…<br>","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434740,"discussion_content":"是不是在事务中没提交？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546171598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48044,"user_name":"杰之7","can_delete":false,"product_type":"c1","uid":1297232,"ip_address":"","ucode":"F7DA2E21085332","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/50/66d0bd7f.jpg","comment_is_top":false,"comment_ctime":1544329492,"is_pvip":false,"replies":[{"id":"17135","content":"👍🏿，总结得不错","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544354076,"ip_address":"","comment_id":48044,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839296788","product_id":100020801,"comment_content":"这讲的内容是前面事务和锁的综合，没有前面的知识结构，不可能对这讲的原理和过程有清晰的认识。通过这讲的学习，先写下这讲最经典的两句话，一，可重复读，查询只承认在事务启动前就就已经提交完成的数数据。二、对于读提交，查询只承认在语句启动前就已经提交完成的数据。第一句话解释的老师文章开始抛给我们的问题，也就是为什么是1的原因。第二句话解释在读提交状态下，为什么是2的原因。当然，老师还分析了更新逻辑，对于更新数据先读后写，读是读当前值，这就解释了为什么第二个事物是3的原因。在事物C‘这种情况西，只能等事物C‘释放后，才会继续读，这样将事务和锁的知识又联系的起来。写的感受，这篇文章是我目前为止能力之中感受到最好的一篇文章，还挺难，但我能搞定它。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432002,"discussion_content":"👍🏿，总结得不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544354076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48023,"user_name":"gentleman♥️","can_delete":false,"product_type":"c1","uid":1119062,"ip_address":"","ucode":"0BAC746A70038C","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/56/6a062937.jpg","comment_is_top":false,"comment_ctime":1544324265,"is_pvip":false,"replies":[{"id":"17137","content":"对","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544354158,"ip_address":"","comment_id":48023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839291561","product_id":100020801,"comment_content":"这个 update语句和row rxid生成的时候 说明数据已经写入数据页了吧？那个unlog就是方便来回滚的对吗？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431991,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544354158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47257,"user_name":"bing","can_delete":false,"product_type":"c1","uid":1067589,"ip_address":"","ucode":"6ADAA36B2B732C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/45/04a13bf9.jpg","comment_is_top":false,"comment_ctime":1544089925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839057221","product_id":100020801,"comment_content":"&#47;&#47; 判断数据对应的聚簇索引中的事务id在这个readview中是否可见<br>bool changes_visible<br>(<br>        <br>trx_id_t<br>        id<br>,<br> <br>&#47;&#47; 记录的id<br>    <br>const<br> <br>table_name_t<br>&amp;<br> name<br>)<br> <br>const<br>MY_ATTRIBUTE<br>((<br>warn_unused_result<br>))<br>{<br>    ut_ad<br>(<br>id <br>&gt;<br> <br>0<br>);<br>    <br>&#47;&#47; 如果当前记录id &lt; 事务链表的最小值或者等于创建该readview的id就是它自己,那么是可见的<br>    <br>if<br> <br>(<br>id <br>&lt;<br> m_up_limit_id <br>||<br> id <br>==<br> m_creator_trx_id<br>)<br> <br>{<br>        <br>return<br>(<br>true<br>);<br>    <br>}<br>    check_trx_id_sanity<br>(<br>id<br>,<br> name<br>);<br>    <br>&#47;&#47; 如果该记录的事务id大于事务链表中的最大值,那么不可见<br>    <br>if<br> <br>(<br>id <br>&gt;=<br> m_low_limit_id<br>)<br> <br>{<br>        <br>return<br>(<br>false<br>);<br>        <br>&#47;&#47; 如果事务链表是空的,那也是可见的<br>    <br>}<br> <br>else<br> <br>if<br> <br>(<br>m_ids<br>.<br>empty<br>())<br> <br>{<br>        <br>return<br>(<br>true<br>);<br>    <br>}<br>    <br>const<br> <br>ids_t<br>::<br>value_type<br>*<br>    p <br>=<br> m_ids<br>.<br>data<br>();<br>    <br>&#47;&#47;判断是否在ReadView中，如果在说明在创建ReadView时 此条记录还处于活跃状态则不应该查询到，否则说明创建ReadView是此条记录已经是不活跃状态则可以查询到<br>    <br>return<br>(!<br>std<br>::<br>binary_search<br>(<br>p<br>,<br> p <br>+<br> m_ids<br>.<br>size<br>(),<br> id<br>));<br>}<br><br>读源码证明","like_count":1},{"had_liked":false,"id":47251,"user_name":"bing","can_delete":false,"product_type":"c1","uid":1067589,"ip_address":"","ucode":"6ADAA36B2B732C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/45/04a13bf9.jpg","comment_is_top":false,"comment_ctime":1544089365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839056661","product_id":100020801,"comment_content":"当行记录的事务ID在活动范围之中时，判断是否在活动链表中，如果在就不可见，如果不在就是可见的。<br>　　for (i = 0; i &lt; n_ids; i++) {<br>　　　　trx_id_t view_trx_id<br>　　　　　　= read_view_get_nth_trx_id(view, n_ids - i - 1);<br>　　　　if (trx_id &lt;= view_trx_id) {<br>　　　　return(trx_id != view_trx_id);<br>　　　　}<br>　　}<br><br>新建事务(当前事务)与正在内存中commit 的事务不在活跃事务链表中。<br>新建事务(当前事务)与正在内存中commit 的事务不在活跃事务链表中。<br>新建事务(当前事务)与正在内存中commit 的事务不在活跃事务链表中。<br>求解释<br><br>","like_count":1},{"had_liked":false,"id":46728,"user_name":"DanielAnton","can_delete":false,"product_type":"c1","uid":1308521,"ip_address":"","ucode":"69D49AC70898B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/69/d8dba3de.jpg","comment_is_top":false,"comment_ctime":1543974850,"is_pvip":false,"replies":[{"id":"16685","content":"是的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543979216,"ip_address":"","comment_id":46728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838942146","product_id":100020801,"comment_content":"问个问题，事务 A 的视图数组是 [99,100]，那么低水位是 99 ，高水位是 101？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431519,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543979216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46635,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1543967676,"is_pvip":false,"replies":[{"id":"16667","content":"是，事务是在事务启动时候生成的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543974140,"ip_address":"","comment_id":46635,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838934972","product_id":100020801,"comment_content":"老师好，您在文章中说begin不是事物的起点，第一个执行的innodb表操作的时候，事物才开始，那么申请事物id也是在第一个操作inodb表的时候申请的吗？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431497,"discussion_content":"是，事务是在事务启动时候生成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543974140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46410,"user_name":"阿洛飛","can_delete":false,"product_type":"c1","uid":1192991,"ip_address":"","ucode":"46038E357CF970","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1f/ef171ece.jpg","comment_is_top":false,"comment_ctime":1543917646,"is_pvip":false,"replies":[{"id":"16591","content":"最后一段，需要指出“由于更新没有成功”，这几行数据的row trx_id 没变，所以再查还是查不出来","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543920996,"ip_address":"","comment_id":46410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838884942","product_id":100020801,"comment_content":"标准答案的话个人觉得有些超过了已有的知识点的范围，CAS啊，乐观锁和悲观锁等等这些概念在没有提示的情况下实在想不出来，或许老师给些提示会更好<br><br>不知道从已有知识的角度去理解的对还是不对：<br>在RR事务隔离情况下，SessionA和SessionB的事务是隔离的，也就是说SessionA的视图列表中并看不到SessionB的更新，当SessionB更新了之后SessionA要更新id=c的row，因为更新语句是需要读当前值的，所以这里SessionA的更新语句看到的当前值中id和c都是不想等的，所以更新无效<br><br>又由于是RR事务的隔离，所以SessionA更新后Select出来的内容依然是SessinA视图中的可见的内容<br><br>不知道这么理解是否正确，还请老师指正","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431450,"discussion_content":"最后一段，需要指出“由于更新没有成功”，这几行数据的row trx_id 没变，所以再查还是查不出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543920996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46257,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1543890307,"is_pvip":false,"replies":[{"id":"16548","content":"这个可以理解为一个链表，最新版本是链表的入口哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543891254,"ip_address":"","comment_id":46257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838857603","product_id":100020801,"comment_content":"新改过的文章里，还是存在问题<br>如果transaction id是严格递增并唯一，按文章的解释，mysql如何知道哪个是最新版本的呢？我开始以为mysql的机制是取最大transaction id来作为最新版本，但是文章上说transaction id 101可以取代transaction id 102变成最新版本，如果说，小transaction id能作为最新版本，MySQL如何识别哪个transaction id是数据的最新版本？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431398,"discussion_content":"这个可以理解为一个链表，最新版本是链表的入口哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543891254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45532,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1543663375,"is_pvip":false,"replies":[{"id":"16204","content":"一波三折呀😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543664186,"ip_address":"","comment_id":45532,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838630671","product_id":100020801,"comment_content":"本来看完第一遍认为自己理解了，结果看完评论区的留言，懵逼了。果断再看了一遍，敲了几行sql，再到纸上上画了几篇，这会儿总算理解了评论区其他童鞋问的问题了。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431081,"discussion_content":"一波三折呀😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543664186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45497,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1543655300,"is_pvip":false,"replies":[{"id":"16206","content":"嗯，这是一种做法的，分析得挺好","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543664303,"ip_address":"","comment_id":45497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838622596","product_id":100020801,"comment_content":"学习总结：<br>1、不可重复读，相对于update和remove，幻读是相对于insert<br>2、mvcc只能在rc及rr级别下才能使用，mvcc在数据行增加隐藏列（undo log指针，事务版本号（数据行的当前事务版本和当前行的删除版本）），在事务进行删除时，更新删除版本号，update时将其数据写入undo log中并且更新当前事务版本，更新undo log指针<br>3、rr级别下，在开启事务时将其当前数据行的最新版本号更新到up_limit_id变量中，up_limit_id事务已经结束的版本号，比如88事务已经停止，89事务对其行进行更新过，但是89事务还未提交，为此需将其up_limit_id保存为88，防止89对数据行进行更新，导致不可重复读，up_limit_id变量只能在自身事务对其数据行进行更新时，才将其改变为自身的事务版本号，select是快照读，除了for update（需要获取x锁），读取的数据行只能是行的系统版本号小于up_limit_id或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始之前已经存在，要么是事务自身插入或修改的数据，行的删除版本要么未定义，要么大于当前事务版本号，这可以确保事务读取到的行，在事务开始之前未被删除，由于当前行存放的是最新的版本号，为此需根据其undo log获取数据行，当前读是需要获取x锁，为此读取到的数据是最新的数据，当一个事务要对其一行进行更新时，需获取x锁，读取到的数据是最新的数据，rr级别存在幻读在select级别mvcc不会出现幻读，当前读，根据next-key锁，行锁和gap锁，在一定上下范围解决了幻读<br>3、rc级别由于每次执行sql时，都会重新计算up_limit_id，读取到的数据都是最新的数据，存在不可重复读<br>4、undo log中的数据什么时候？当没有事务再需要它的时候，就可以删掉，即事务中的up_limit_id都大于此数据中的版本号<br>5、思考题，和java中的cas，判断内存中的数据是否是预期的数据，如果是就更新，如果不是证明数据已经过期，事务基于数据行版本，更新数据时，如果当前行的版本号大于事务的版本号，另起事务进行重新更新，有点感觉像自旋锁的味道，如果更新失败，先把值值，读取出来，然后在重新更新，不知道老师我理解的对不对","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431065,"discussion_content":"嗯，这是一种做法的，分析得挺好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543664303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45482,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543652260,"is_pvip":false,"replies":[{"id":"16198","content":"这个问题没看明白…","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543655655,"ip_address":"","comment_id":45482,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838619556","product_id":100020801,"comment_content":"row Trx-id不是最大的就是最新版本，但是rc时候最大up-limit-id,102都成为历史版本，还读取，感觉好奇怪，如果c在执行一个事物读到的数据?怎么知道那个数据是最新版本，因为最新版本数据对应的row Trx-id并不是最新数据","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431059,"discussion_content":"这个问题没看明白…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543655655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45473,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543650965,"is_pvip":false,"replies":[{"id":"16192","content":"不会肯定相等，你想下如果有多个事务一起读同一行… ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543655484,"ip_address":"","comment_id":45473,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838618261","product_id":100020801,"comment_content":"transaction-id 和row Trx-id 两者值应该一直是相等的吧","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431053,"discussion_content":"不会肯定相等，你想下如果有多个事务一起读同一行… ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543655484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45459,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1543646813,"is_pvip":false,"replies":[{"id":"16177","content":"嗯嗯，把这些名词和他们的逻辑理得很清楚呢😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543650276,"ip_address":"","comment_id":45459,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838614109","product_id":100020801,"comment_content":"mvcc的实现原理，一行数据有多次更新，一次更新操作都有一个事务，事务id是申请的，递增的叫做transactionid。每一次修改都会有一回滚日志undolog，多个版本就是通过undolog计算出来的。每一次修改都会有一回滚日志undolog，多个版本就是通过undolog计算出来的。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431048,"discussion_content":"嗯嗯，把这些名词和他们的逻辑理得很清楚呢😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543650276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45421,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543636945,"is_pvip":false,"replies":[{"id":"16169","content":"在这个题目背景里，99这个事务没有更新这一行的 😓","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543638481,"ip_address":"","comment_id":45421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838604241","product_id":100020801,"comment_content":"事物A开始之前up-limit-time 是99，对应这个数据的k值是多少？你为啥还是取row Trx-Id为90的k的值，不应该是99对应k值？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431030,"discussion_content":"在这个题目背景里，99这个事务没有更新这一行的 😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543638481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45321,"user_name":"DanielAnton","can_delete":false,"product_type":"c1","uid":1308521,"ip_address":"","ucode":"69D49AC70898B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/69/d8dba3de.jpg","comment_is_top":false,"comment_ctime":1543586498,"is_pvip":false,"replies":[{"id":"16121","content":"注意，row trx_id 是“数据版本”才有的概念（名字里故意加了个row )，up_limit_id才是事务的<br><br>你再重新理解下哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624533,"ip_address":"","comment_id":45321,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838553794","product_id":100020801,"comment_content":"那么，它在读到（1，3）的时候，就满足了 up_limit_id（102）&gt;= row trx_id（101）的条件，所以返回了 k = 3。事务 A 的 row trx_id 不应该是 100 吗？所以应该是 up_limit_id（102） &gt;= row trx_id（100）吧。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430982,"discussion_content":"注意，row trx_id 是“数据版本”才有的概念（名字里故意加了个row )，up_limit_id才是事务的\n\n你再重新理解下哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45258,"user_name":"周巘","can_delete":false,"product_type":"c1","uid":1312476,"ip_address":"","ucode":"0939DF7F083662","user_header":"https://static001.geekbang.org/account/avatar/00/14/06/dc/1a504e09.jpg","comment_is_top":false,"comment_ctime":1543569823,"is_pvip":false,"replies":[{"id":"16138","content":"看一下置顶评论答复哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543628580,"ip_address":"","comment_id":45258,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838537119","product_id":100020801,"comment_content":"老师好 我想请问一下 如果文章中99号事务提交了 98号事务还没有提交 那么这三个事务的up_limit_id应该还是99 然后在事务A(id=100)的两次读过程中 98号事务提交并且修改了这一行 此时row trx_id=98 将会小于up_limit_id=99 那么事务A的两次读请求结果不就不一样了吗? 请老师解惑 谢谢<br><br>","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430969,"discussion_content":"看一下置顶评论答复哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543628580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45131,"user_name":"Tony Du","can_delete":false,"product_type":"c1","uid":1001661,"ip_address":"","ucode":"F5FCC400E615EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/bd/6c7d4230.jpg","comment_is_top":false,"comment_ctime":1543548599,"is_pvip":false,"replies":[{"id":"16151","content":"自己改的要看到，事务启动时还没提交的看不到<br><br>理解上可以认为就这两条","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630212,"ip_address":"","comment_id":45131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838515895","product_id":100020801,"comment_content":"在RR隔离级别下，对于文中的例子，“所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是101，最新数据的版本号也是101，可以用，所以 Q1 得到的 k 的值是3”，<br>这里事务B的 up_limit_id 应该还是99，此时数据的最新版本是101，则这里通过up_limit_id判断数据可见性原则是不适用的（如果Q1能够看到k=3），那是否还有其他的数据可见性原则？（比如当自己修改过数据之后，看一下自己当前transaction的版本号？）<br>如果存在多个数据可见性原则，那这些原则的优先级是怎么样的（即先用哪条原则，后用哪条原则），请老师解惑。<br>","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430932,"discussion_content":"自己改的要看到，事务启动时还没提交的看不到\n\n理解上可以认为就这两条","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45097,"user_name":"Geek_7c1218","can_delete":false,"product_type":"c1","uid":1142687,"ip_address":"","ucode":"8C2B26D1A995E7","user_header":"https://static001.geekbang.org/account/avatar/00/11/6f/9f/71fa279a.jpg","comment_is_top":false,"comment_ctime":1543545437,"is_pvip":false,"replies":[{"id":"16046","content":"Begin不算事务启动哦，所以咱们俩是一致的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543549451,"ip_address":"","comment_id":45097,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838512733","product_id":100020801,"comment_content":"对于可重复读，查询只承认在事务启动前就已经提交完成的数据；<br><br>这个应该是第一次查询时 不是事务启动时吧","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430920,"discussion_content":"Begin不算事务启动哦，所以咱们俩是一致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543549451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45078,"user_name":"keepmoving","can_delete":false,"product_type":"c1","uid":1283564,"ip_address":"","ucode":"0EAC0DB74AB3AC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ4GbaLSZhuibIujCTJAusp0faVqXM15tqicqrM5Urd3ic5XytM1OTXd1jdFeboAgfxN33dpyhNjg4zw/132","comment_is_top":false,"comment_ctime":1543544048,"is_pvip":false,"replies":[{"id":"16155","content":"我跟你是一致的，<br><br>如果是 begin; select ... 这种用法，<br><br>事务是在select语句才正式启动","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630504,"ip_address":"","comment_id":45078,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838511344","product_id":100020801,"comment_content":"在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。<br>老师，这句话有点疑问，在可重复读隔离级别下，事务视图应该是在事务第一个查询执行时建立的吧，在下面这个例子中<br>demo1<br>A1: start transaction;<br>A2: select * from t;<br>         B1: start transaction;<br>         B2: insert into t values (4, wangwu);<br>         B3: commit;<br>A3: select * from t;<br><br>demo2<br>A1: start transaction;<br>         B1: start transaction;<br>         B2: insert into t values (4, wangwu);<br>         B3: commit;<br>A2: select * from t;<br><br>demo1的A3和A2读到的数据是一样的即读不到B事务新插入的数据，但是demo2里的A2却可以读到B事务新插入的数据，能解答一下么？","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430915,"discussion_content":"我跟你是一致的，\n\n如果是 begin; select ... 这种用法，\n\n事务是在select语句才正式启动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45062,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1207298,"ip_address":"","ucode":"11D3604DADD31F","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/02/cdeeea90.jpg","comment_is_top":false,"comment_ctime":1543542682,"is_pvip":false,"replies":[{"id":"16040","content":"准确描述是“事务启动时”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543543733,"ip_address":"","comment_id":45062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838509978","product_id":100020801,"comment_content":"思考题：<br>事务A：<br>       begin;<br>       select * from t;<br>       &#47;*<br>        *这个时候执行了事务B<br>      *&#47;<br>       update t set c=0 where id=c;<br>       select * from t;<br>事务B：<br>     update set c = 0 where id = c;<br><br>有一个疑问，对于可重复读，查询应该是只承认事务中第一个查询语句前已经提交完成的数据吧。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430909,"discussion_content":"准确描述是“事务启动时”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543543733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45016,"user_name":"魏春河","can_delete":false,"product_type":"c1","uid":1117048,"ip_address":"","ucode":"DDD2998C157639","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg","comment_is_top":false,"comment_ctime":1543539650,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5838506946","product_id":100020801,"comment_content":"思考题：<br>   begin<br>   up_limit_id = 100;<br>   1. select (row trx_id = 100)<br>        这里另外一个事务里执行了 set c= 0 where id = c 并提交；trx_id = 102;<br>  2 . update 执行(当前读) ，所以找不到符合条件的数据。<br><br> 3. select <br>     up_limit_id 依然是 100；<br><br>所以结果就如思考题中截图所示。<br>   ","like_count":1},{"had_liked":false,"id":44934,"user_name":"小四","can_delete":false,"product_type":"c1","uid":1259428,"ip_address":"","ucode":"A2F56965EEE3CF","user_header":"","comment_is_top":false,"comment_ctime":1543511264,"is_pvip":false,"replies":[{"id":"15995","content":"是1，手误抱歉。<br><br>👍🏿一边看一边验证哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543537049,"ip_address":"","comment_id":44934,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838478560","product_id":100020801,"comment_content":"显然地，语句 Q1 的查询结果 k=1。这个测试后发现是3？请老师确认下","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430864,"discussion_content":"是1，手误抱歉。\n\n👍🏿一边看一边验证哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543537049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360252,"user_name":"Ingenuousness","can_delete":false,"product_type":"c1","uid":1887853,"ip_address":"北京","ucode":"543617BF7E0328","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ce/6d/22601088.jpg","comment_is_top":false,"comment_ctime":1666341152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666341152","product_id":100020801,"comment_content":"老师你好，想问个问题。对于题目中的事务A&#47;B&#47;C, 为什么C 可以拿到行锁并且修改成功呢？<br>按照上节课讲的，事务B在开启的时候就会申请行锁，直到commit以后才归还。","like_count":0},{"had_liked":false,"id":360177,"user_name":"_仅此、而已","can_delete":false,"product_type":"c1","uid":2666814,"ip_address":"广东","ucode":"3F578C39CB2202","user_header":"https://static001.geekbang.org/account/avatar/00/28/b1/3e/b7003159.jpg","comment_is_top":false,"comment_ctime":1666255580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666255580","product_id":100020801,"comment_content":"复现：<br><br>通过在事务1update之前另启动一个事务修改数据，让事务1的update的sql无法找到条件匹配的记录即可，然后事务1就会update0条数据，后续的第二个查询因为是可重复读所以会通过MVCC查询到跟第一次查询记录一致的结果，因为最新的数据的row trx_id比事务1大，所以只会读取第一次select时读到的版本。<br><br>如果没有第二个事务的干扰，正常的结果应该是update更新4条数据，然后第二个selct查到的数据c都为0，因为最新的数据的row trx_id就是该事务本身。<br><br>实际的业务开发：<br><br>并没有碰到这类情况，因为业务比较简单，在更新时多半都是通过主键作为判断条件，且主键基本不会被修改。<br><br>假设如果有这种坑，应该如何避免？<br><br>这种在update时对上一次的select结果有一定依赖的情况，个人感觉应该通过select ... for update的方式对查询出来记录加上行锁，不允许别的事务进行修改，这样update的结果就能与预期相符。<br><br>不过这个场景下是需要对所有数据加锁，限制的范围比较大，实际开发中最好根据业务的需要选择更加细粒度的判断条件，让加锁的行数满足最低需求即可，提高并发度","like_count":0},{"had_liked":false,"id":358403,"user_name":"St.BerNard","can_delete":false,"product_type":"c1","uid":2052967,"ip_address":"湖北","ucode":"C6E9040A431867","user_header":"https://static001.geekbang.org/account/avatar/00/1f/53/67/df793423.jpg","comment_is_top":false,"comment_ctime":1664273669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664273669","product_id":100020801,"comment_content":"老师你好，关于redo和binlog我还有点疑问，这两个文件都是commit的时候才存磁盘的吗？ 如果commit阶段，binlog存盘成功，但是redolog存盘失败了，会发生什么？","like_count":0},{"had_liked":false,"id":355224,"user_name":"Geek_57d1cd","can_delete":false,"product_type":"c1","uid":3066484,"ip_address":"重庆","ucode":"29DA67F657C2EE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEtAN5k3v81g1ACetxPzHyqUCZjbQGl2vqibJ8aMHmolQrss4mWwLJH6sKSEc6XNsaISq7Rea9qrw/132","comment_is_top":false,"comment_ctime":1661185556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661185556","product_id":100020801,"comment_content":"那么问题来了，作者大大：如图二所示简单的循序递增事务去update，是可以找到的。比如，事务25上一个是事务17，事务17上一个是事务15。<br>但是图一 图四组合解释的这个栗子，是怎么找到事务101的上个版本是事务102的。如果没有记录本事务id所更新的历史事务id，上面两个栗子好像解释不通，或者说是我没理解。请作者大大解惑","like_count":0},{"had_liked":false,"id":355144,"user_name":"HELLO！","can_delete":false,"product_type":"c1","uid":1956594,"ip_address":"广东","ucode":"D01D3B7234D93D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/da/f2/f871c9ab.jpg","comment_is_top":false,"comment_ctime":1661135832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661135832","product_id":100020801,"comment_content":"老师你好，文中说 InnoDB 为每个事务构建数组，用来记录这个事务启动瞬间当前“活跃”的事务ID，那么这个数组中的事务提交之后是不是也要更新这个数组中的事务ID呢？","like_count":0},{"had_liked":false,"id":354957,"user_name":"xingshouzhyan","can_delete":false,"product_type":"c1","uid":2051062,"ip_address":"湖南","ucode":"BFDD6987C12F68","user_header":"","comment_is_top":false,"comment_ctime":1660906729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660906729","product_id":100020801,"comment_content":"作者您好，您写得很好。<br>但是您为了让我们更好地理解，您模糊了一些概念，让我们真正去理解MVCC时带来了一些困扰。<br><br>就本文地例子，事物A执行 start transaction with consistent snapshot;时，是只读事物，<br>根据你&#39;自增id用完了怎么办&#39;中关于trx_id的描述，MVCC数组中的trx_id为读写事物的id。<br>我们认为当前活跃的事物ID 99就是一个读写事物的trx_id，则事物A的一致性视图为[99],同理，事物B的一致性视图为[99]。<br><br>对于事物C,基于文章中没有其它事物的假设，则此时事物C应该分配的读写事物ID为100，则事物C的一致性视图为[99,100](如果不算事物C自己的，那就是【99】，不知道到底算不算)，那你之后的分析逻辑就不应该是这样的<br><br>您写得很好，不过我一开是看的时候，总认为MVCC中高水位，就是当前事物ID+1，看了您&#39;自增id用完了怎么办&#39;之后，又发现你这篇文章写得有点让人困扰<br><br>不仔究不感觉，一细究就把自己绕进去了","like_count":0},{"had_liked":false,"id":354859,"user_name":"聆风","can_delete":false,"product_type":"c1","uid":2220702,"ip_address":"浙江","ucode":"940F86CAEE4569","user_header":"","comment_is_top":false,"comment_ctime":1660825456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660825456","product_id":100020801,"comment_content":"核心：可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。","like_count":0},{"had_liked":false,"id":354697,"user_name":"Geek_323a60","can_delete":false,"product_type":"c1","uid":2797976,"ip_address":"四川","ucode":"CDC276EC255411","user_header":"","comment_is_top":false,"comment_ctime":1660700390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660700390","product_id":100020801,"comment_content":"在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务“启动”瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。<br>----------------<br>老师，我对这个启动的理解有些疑问。这个“启动”说的是执行了 start 命令之后，第一次select 操作之前吗？还是说也是 select 操作之后，才算“启动”？","like_count":0},{"had_liked":false,"id":354214,"user_name":"ʘᴗʘ小白帽ʘᴗʘ","can_delete":false,"product_type":"c1","uid":1304567,"ip_address":"上海","ucode":"3519C67C3B1533","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/f7/8427bb06.jpg","comment_is_top":false,"comment_ctime":1660190199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660190199","product_id":100020801,"comment_content":"老师好，可以谈谈for update么","like_count":0},{"had_liked":false,"id":353429,"user_name":"听秋","can_delete":false,"product_type":"c1","uid":2564684,"ip_address":"江苏","ucode":"03CCD3B14980FA","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/4c/d413494f.jpg","comment_is_top":false,"comment_ctime":1659433031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659433031","product_id":100020801,"comment_content":"老师，transaction id 和45讲中的max_trx_id是什么关系？","like_count":0},{"had_liked":false,"id":352328,"user_name":"Edgar Huang","can_delete":false,"product_type":"c1","uid":2709243,"ip_address":"","ucode":"9369D45C0C5A00","user_header":"https://static001.geekbang.org/account/avatar/00/29/56/fb/3342e017.jpg","comment_is_top":false,"comment_ctime":1658560115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658560115","product_id":100020801,"comment_content":"老师关于row trx id在事务数组的情况的解释中是感觉有误呢？<br><br>如果落在黄色部分，那就包括两种情况<br>  a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>  b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br><br>如果row trx_id在数组中，也有可能是未提交的事物生成的呢，应该是和自己的事务的trx_id比较吧","like_count":0},{"had_liked":false,"id":351674,"user_name":"肖玉琦","can_delete":false,"product_type":"c1","uid":2537415,"ip_address":"","ucode":"E5B418996C790A","user_header":"","comment_is_top":false,"comment_ctime":1658079508,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1658079508","product_id":100020801,"comment_content":"太赞了，谢谢老师","like_count":0},{"had_liked":false,"id":351190,"user_name":"王楷程","can_delete":false,"product_type":"c1","uid":1938215,"ip_address":"","ucode":"C53850ECCFC42E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/93/27/7d2ad04c.jpg","comment_is_top":false,"comment_ctime":1657599034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657599034","product_id":100020801,"comment_content":"老师你好，最后的读提交时的状态图，事务B在设置k时已经拿到了写锁（行锁），然后直到commit时才能释放，为什么事务A此时可以读取到k的值，它不是想要获取读锁（行锁），但是应该会阻塞等到事务B commit之后才能读取到k的值吧？<br>我对这一点好疑惑...","like_count":0},{"had_liked":false,"id":350742,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1641319,"ip_address":"","ucode":"E1184E76B14431","user_header":"https://static001.geekbang.org/account/avatar/00/19/0b/67/dc49a1a8.jpg","comment_is_top":false,"comment_ctime":1657155799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657155799","product_id":100020801,"comment_content":"这一篇 感觉看的比较懵，要多看几遍了","like_count":0},{"had_liked":false,"id":349274,"user_name":"Geek_0bdff2","can_delete":false,"product_type":"c1","uid":2924837,"ip_address":"","ucode":"D1E5B79C58491D","user_header":"","comment_is_top":false,"comment_ctime":1655861515,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1655861515","product_id":100020801,"comment_content":"我用的是mysql5.6,使用begin或者start transaction开启事务的时候,第一个执行增删改查的任何一个语句都会开启事务并生成事务id,但是我看评论里说只有在执行非select语句时才会开启事务,特地来请教一下各位大佬这个问题","like_count":0},{"had_liked":false,"id":348499,"user_name":"老袁","can_delete":false,"product_type":"c1","uid":1215637,"ip_address":"","ucode":"0968F54699BCDB","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/95/a6d85a18.jpg","comment_is_top":false,"comment_ctime":1655136325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655136325","product_id":100020801,"comment_content":"老师，看到这我觉得这篇文章还缺少的内容：<br>1，怎么看系统有没有死锁？<br>2，出现死锁怎么解决？<br>3，锁的升级过程是怎么样的？比如什么情况下会有行锁？什么情况下会升级为表锁？","like_count":0},{"had_liked":false,"id":347256,"user_name":"pikachu","can_delete":false,"product_type":"c1","uid":1344991,"ip_address":"","ucode":"8B25A1D481ED65","user_header":"https://static001.geekbang.org/account/avatar/00/14/85/df/c19ca1b0.jpg","comment_is_top":false,"comment_ctime":1653878504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653878504","product_id":100020801,"comment_content":"​\t用另外一个事物在update执行之前，先把所有c值修改，应该就可以。比如update t set c = id + 1。因为是可重复读隔离级别，在begin的时候创建了视图，如果没有事务B，事务A在更新完之后，会将数据的事务id设为自己的事务id，这样下一个查询语句可以看到自己的更新结果。<br><br>​\t但是因为有了事务B的更新，将事务A的更新阻塞了（行锁），事务B更新完之后，事务A更新的匹配条件不成立了，导致更新 0 rows affected。下一个查询事务也因为数据事务id已经是事务B的事务id，而且事务B是晚于事务A开启的，事务B修改的数据处于高水位中，事务A看不到新更新的数据，只能根据undo log 去找之前的数据。","like_count":0},{"had_liked":false,"id":347115,"user_name":"苏成","can_delete":false,"product_type":"c1","uid":2668694,"ip_address":"","ucode":"80A8E7B243DD73","user_header":"https://static001.geekbang.org/account/avatar/00/28/b8/96/716ba431.jpg","comment_is_top":false,"comment_ctime":1653725888,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1653725888","product_id":100020801,"comment_content":"之前看@WL老哥的评论，我也给大家整理一些问题<br>1.事务的隔离和不隔离分别体现在什么方面?(查询和更新)<br><br>2.start transaction 、begin和start transaction with consistent snapshot的区别？<br><br>3.mysql之中的两个试图分别是什么作用以及区别是什么？<br><br>4.Mysql之中事务版本是如何存储的以及每一个版本是如何得来的？<br><br>5.事务是如何实现MVCC的(一致性读&#47;快照读)？<br><br>6.事务的可重复读的能力是怎么实现的？可重复读和读提交的实现逻辑的区别？","like_count":0},{"had_liked":false,"id":345211,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1652110424,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1652110424","product_id":100020801,"comment_content":"终于理解了MVCC。","like_count":0},{"had_liked":false,"id":343839,"user_name":"陈好好","can_delete":false,"product_type":"c1","uid":2842931,"ip_address":"","ucode":"6DD6088CAAB8FA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/U8ppqr0xkmXlMOOk22tY1Ik844S2jcia2YtKyaicgxy7jC2mv8ZibHbFdA5aVh4agOmYfbMxQBlb9Hyygnvvd3JPA/132","comment_is_top":false,"comment_ctime":1651073954,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651073954","product_id":100020801,"comment_content":"老师好，我有个问题：在RR隔离级别下，文中说快照是开启事务时生成的。但是我之前的认知和以下实验都表示快照是第一次查询时生成的。老师能解下惑吗<br>session 1       session 2<br>begin；         begin;<br>                    update k=k+1;<br>                    commit;<br>select 查出<br>k是+1过的；","like_count":0},{"had_liked":false,"id":342357,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1650206376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650206376","product_id":100020801,"comment_content":"课后题：因为更新操作是当前读，所以只要在更新操作之前，通过其他事务将表t中的id和c字段的值修改成不相等，然后提交事务，那么这个更新操作就不会修改成功任何数据。<br>","like_count":0},{"had_liked":false,"id":342191,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1581878,"ip_address":"","ucode":"5A232B7388EB2C","user_header":"https://static001.geekbang.org/account/avatar/00/18/23/36/8bc95dca.jpg","comment_is_top":false,"comment_ctime":1650094389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650094389","product_id":100020801,"comment_content":"是只有可重复读才有当前读的现象吗？？","like_count":0},{"had_liked":false,"id":341386,"user_name":"张毅朋","can_delete":false,"product_type":"c1","uid":2037528,"ip_address":"","ucode":"61C06FB231B095","user_header":"https://static001.geekbang.org/account/avatar/00/1f/17/18/3f46df92.jpg","comment_is_top":false,"comment_ctime":1649575067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649575067","product_id":100020801,"comment_content":"老师好，我理解的一致性试图就是一个current_transaction_ids[]和current_transaction_counter。<br>判断当前数据版本是否可见的方式就是数据的row_trx_id小于current_transaction_counter且不在current_transaction_ids[]内。<br>老师文中的低水位感觉是为了对应高水位而提出的，也可能是为了减少比对而提取的中间过程数据。","like_count":0},{"had_liked":false,"id":340432,"user_name":"东泽","can_delete":false,"product_type":"c1","uid":2770660,"ip_address":"","ucode":"7B621B43909E07","user_header":"https://static001.geekbang.org/account/avatar/00/2a/46/e4/0860c82f.jpg","comment_is_top":false,"comment_ctime":1648810936,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648810936","product_id":100020801,"comment_content":"请教一下，在图六的这种情况下，事务A的查询操作涉及了什么锁，他有么有和事务B产生锁争用？谢谢！","like_count":0},{"had_liked":false,"id":339801,"user_name":"寥若晨星","can_delete":false,"product_type":"c1","uid":1447739,"ip_address":"","ucode":"2E87E43687DE72","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","comment_is_top":false,"comment_ctime":1648392835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648392835","product_id":100020801,"comment_content":"小结中“对于可重复读，查询只承认在事务启动前就已经提交完成的数据”是错误的；正确的应该是“只承认视图创建前已经提交完成的数据”；可以进行简单的验证：<br>表t(id,k)   插入两行(1,1),(2,2)；<br>时间点1-&gt;事务A：先begin，然后执行select * from t where id=2 for update;<br>时间点2-&gt;事务B：执行update t set k=k+1 where id=1;并提交<br>时间点3-&gt;事务A：select * from t where id=1;（事务A在时间点1已经开启，按照小结中的结论事务B提交的数据是不被事务A承认的，此时k应该等于1；但是实际此处k=2）<br>","like_count":0},{"had_liked":false,"id":337955,"user_name":"MMMMMCCLXXVII","can_delete":false,"product_type":"c1","uid":1691723,"ip_address":"","ucode":"8FC1C89CF4513D","user_header":"https://static001.geekbang.org/account/avatar/00/19/d0/4b/f2c95fc2.jpg","comment_is_top":false,"comment_ctime":1647179447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647179447","product_id":100020801,"comment_content":"如果不用db_trx_id，用时间戳可不可以，一行记录，在一个事务修改后，将提交的那一刻的时间戳记录下来。那么之后开启的事务，他的视图，是所有在这个事务开启的时间戳之前的数据版本显示出来。","like_count":0},{"had_liked":false,"id":337846,"user_name":"下一站天晴","can_delete":false,"product_type":"c1","uid":2932823,"ip_address":"","ucode":"F6CB9C039EB337","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c0/57/f7ec9485.jpg","comment_is_top":false,"comment_ctime":1647090807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647090807","product_id":100020801,"comment_content":"哦哦，明白了，原来是要构造这样的不可更改且查询显示为截图的情景。也就是可以对其中涉及的快照读和当前读的时间差内先更新一波，这样虽然快照读符合条件的记录就不会被当前读的更新语句作用到了。","like_count":0},{"had_liked":false,"id":337844,"user_name":"下一站天晴","can_delete":false,"product_type":"c1","uid":2932823,"ip_address":"","ucode":"F6CB9C039EB337","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c0/57/f7ec9485.jpg","comment_is_top":false,"comment_ctime":1647090273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647090273","product_id":100020801,"comment_content":"为什么在MySQL8.0.25中不能复现课后问题了呢","like_count":0},{"had_liked":false,"id":337231,"user_name":"陈坤","can_delete":false,"product_type":"c1","uid":1044533,"ip_address":"","ucode":"DADE8D9C40B2F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/35/a5ded70c.jpg","comment_is_top":false,"comment_ctime":1646708118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646708118","product_id":100020801,"comment_content":"老师你好，如下有些疑问，本页最开头：<br>第一种启动方式，一致性视图是在执行第一个快照读语句时创建的；<br>第二种启动方式，一致性视图是在执行 start transaction with consistent snapshot 时创建的。<br><br>这两种方式 如图有什么区别呢？","like_count":0},{"had_liked":false,"id":335778,"user_name":"朱传俊","can_delete":false,"product_type":"c1","uid":1931332,"ip_address":"","ucode":"3F608556075934","user_header":"https://static001.geekbang.org/account/avatar/00/1d/78/44/b1b344a4.jpg","comment_is_top":false,"comment_ctime":1645686210,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645686210","product_id":100020801,"comment_content":"这一节我愿称之为最强","like_count":0},{"had_liked":false,"id":335171,"user_name":"鲁·本","can_delete":false,"product_type":"c1","uid":1209939,"ip_address":"","ucode":"F1DEB30C21B48E","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/53/21d62a23.jpg","comment_is_top":false,"comment_ctime":1645370816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645370816","product_id":100020801,"comment_content":"b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>老师，这种情况是什么场景下会出现？","like_count":0},{"had_liked":false,"id":334898,"user_name":"子豪sirius","can_delete":false,"product_type":"c1","uid":1117023,"ip_address":"","ucode":"E8D08D2D33E785","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/5f/2cc4060c.jpg","comment_is_top":false,"comment_ctime":1645174094,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645174094","product_id":100020801,"comment_content":"老师讲得很详细，还要慢慢细看理解~~~想问一下这些知识老师最初是怎么获得的？是官方有相关资料可以查看？还是通过研究源码？","like_count":0},{"had_liked":false,"id":334719,"user_name":"张可夫斯基","can_delete":false,"product_type":"c1","uid":1076487,"ip_address":"","ucode":"3B8DF6D98583F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","comment_is_top":false,"comment_ctime":1645089950,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645089950","product_id":100020801,"comment_content":"即时改过，也还是显得有些复杂，建议同学们先去搞清楚MVCC机制，再来看就更容易理解。","like_count":0},{"had_liked":false,"id":334138,"user_name":"Demter","can_delete":false,"product_type":"c1","uid":1158439,"ip_address":"","ucode":"BE3B6F726916CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/27/5556ae50.jpg","comment_is_top":false,"comment_ctime":1644761336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644761336","product_id":100020801,"comment_content":"为啥可重复读性能读提交低呢？","like_count":0},{"had_liked":false,"id":333942,"user_name":"neo","can_delete":false,"product_type":"c1","uid":1214495,"ip_address":"","ucode":"1A8EF0BAC4CFFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/1f/0656d769.jpg","comment_is_top":false,"comment_ctime":1644628861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644628861","product_id":100020801,"comment_content":"老师你好，举的例子中当事务B更新完数据未提交的时候，其他连接执行普通select是什么逻辑呢，怎么实现读已提交呢","like_count":0},{"had_liked":false,"id":333883,"user_name":"刘新旺","can_delete":false,"product_type":"c1","uid":2393292,"ip_address":"","ucode":"69F38D4DBF2879","user_header":"https://static001.geekbang.org/account/avatar/00/24/84/cc/801194ac.jpg","comment_is_top":false,"comment_ctime":1644569992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644569992","product_id":100020801,"comment_content":"我在percona 5.5.30 和mysql 8.0中测试课后问题都是正常更新的","like_count":0},{"had_liked":false,"id":333761,"user_name":"xiaoxlm","can_delete":false,"product_type":"c1","uid":2400819,"ip_address":"","ucode":"9F4DF8000C6749","user_header":"","comment_is_top":false,"comment_ctime":1644501397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644501397","product_id":100020801,"comment_content":"本章的思考题，结果是&quot;0 rows affected&quot; 是因为没有id 等于 值是 c的行吧。<br>我把id=1 是能查到修改结果的","like_count":0},{"had_liked":false,"id":332495,"user_name":"7号滨仔","can_delete":false,"product_type":"c1","uid":2868538,"ip_address":"","ucode":"861249E7C0EF31","user_header":"https://static001.geekbang.org/account/avatar/00/2b/c5/3a/5423cadd.jpg","comment_is_top":false,"comment_ctime":1643275160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643275160","product_id":100020801,"comment_content":"请问rc的read-view 是什么？没法按照之前事务号列表规则来判断啊？","like_count":0},{"had_liked":false,"id":332177,"user_name":"段大帅","can_delete":false,"product_type":"c1","uid":2452998,"ip_address":"","ucode":"BEC6C0F8FC087A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLJiaPZmuibaYl31dUKXtfVHxia1j04BLo7spbVTlicVy0DZGXwfhyW2abVFksgo6uvArF4ORX3JkQ0NA/132","comment_is_top":false,"comment_ctime":1643081803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643081803","product_id":100020801,"comment_content":"完全理透的瞬间，有种瞬间打通了任督二脉的感觉 ，感谢老师！！","like_count":0},{"had_liked":false,"id":331631,"user_name":"lw","can_delete":false,"product_type":"c1","uid":1234087,"ip_address":"","ucode":"7C7A8B7EA7615D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/a7/d61813d2.jpg","comment_is_top":false,"comment_ctime":1642678895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642678895","product_id":100020801,"comment_content":"<br>本章知识点小结:<br><br>        1、两种启动事务的区别<br>            a. begin&#47;start transaction: 一致性视图在执行第一个快照读语句时创建。（注意，是读而非写）<br>            b. start transaction with consistent snapshot：一致性视图在执行该语句立刻创建（注意: 这个在RC下无意义，等效于a）<br>        <br>        2、低水位：活跃数组的最小trxId，高水位：系统中最大trxId+1；活跃数组: 数组中开启还未提交的trxId数组；<br>            低水位和高水位之间是包含已提交事务的<br><br>        3、row trxId 获取时机：第一句执行非select 的DOM语句时产生；read view: 第一次执行select时产生<br>        <br>        2、快照读和当前读<br>            a. 快照读: 适用于select<br>                ① 其它事务未提交，不可见<br>                ② 其它事务提交，但是是在当前事务的视图创建之后提交，不可见<br>                ③ 其它事务提交，在当前事务的视图创建之前提交，可见<br>            b. 当前读: 适用于update、select + read&#47;write lock<br>                在a的②中，如果此时的场景是update或者加锁 select，则，会读取最新的数据在进行更新<br>                如果此时其它事务也是执行update，则此时当前事务会阻塞<br>        3、rr和rc区别<br>            rr在创建一致性视图是在事务开始时创建（根据开启事务的方式）<br>            rc在每条select语句都会创建一个视图, update 依旧是当前读","like_count":0},{"had_liked":false,"id":327739,"user_name":"sunflower","can_delete":false,"product_type":"c1","uid":1533999,"ip_address":"","ucode":"E1E494D59F88C7","user_header":"https://static001.geekbang.org/account/avatar/00/17/68/2f/fb25a9ef.jpg","comment_is_top":false,"comment_ctime":1640259268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640259268","product_id":100020801,"comment_content":"感谢感谢 学到了","like_count":0},{"had_liked":false,"id":326830,"user_name":"爱优美","can_delete":false,"product_type":"c1","uid":1313887,"ip_address":"","ucode":"8AADCF8C74EEC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/5f/0902d87f.jpg","comment_is_top":false,"comment_ctime":1639713432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639713432","product_id":100020801,"comment_content":"这篇文章再刷已是一个月之后，很奇怪，这次看有点意思了。","like_count":0},{"had_liked":false,"id":326705,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1639636615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639636615","product_id":100020801,"comment_content":"如何复现？<br>1、如果要复现老师问题里面的例子，需要两个事务，分别是事务A和事务B；<br>2、首先事务A先启动，并执行SELECT * FROM t,这时事务A已经生成了读视图，并且这个读视图如果没有当前读的情况下会一直复用。<br>3、然后开始事务B(隐式提交)、执行UPDATE t SET c = 0 WHERE id = c;<br>4、在事务A中执行：UPDATE t SET c = 0 WHERE id = c  （UPDATE会先读在写,读取的是的记录的最新版本）<br>5、在事务A中执行：SELECT * FROM t; 结果发现事务A中无法更新成功。<br><br>为什么事务A中无法更新成功？<br>事务A在执行 SELECT * FROM t (快照读)时，生成了读视图，事务B执行 UPDATE t SET c = 0 WHERE id = c并且隐式提交事务，然后事务A UPDATE t SET c = 0 WHERE id = c ，由于UPDATE属于当前读，当前读值读取的是记录的最新版本，所以读取到的是事务A更新后的记录，记录里面没有 id = c的数据，导致没有更新成功。然后再次使用快照读读取到的依旧是原始的数据。","like_count":0},{"had_liked":false,"id":325972,"user_name":"小刘","can_delete":false,"product_type":"c1","uid":1625914,"ip_address":"","ucode":"8017FB710CCB09","user_header":"https://static001.geekbang.org/account/avatar/00/18/cf/3a/ba5b4375.jpg","comment_is_top":false,"comment_ctime":1639284917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639284917","product_id":100020801,"comment_content":"一直没想明白，低水位为什么取当前活跃最小trx_id, 而高水位要取当前活跃最大trx_id + 1。 为什么要+1呢，高低水位相等也没有关系啊","like_count":0},{"had_liked":false,"id":325282,"user_name":"Geek_a0b00e","can_delete":false,"product_type":"c1","uid":2849772,"ip_address":"","ucode":"6509CABE634F40","user_header":"","comment_is_top":false,"comment_ctime":1638889617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638889617","product_id":100020801,"comment_content":"有个问题，不开启事务操作数据，那它的trx id记录的啥呢","like_count":0},{"had_liked":false,"id":324826,"user_name":"余生第一天","can_delete":false,"product_type":"c1","uid":1479418,"ip_address":"","ucode":"839432FBAFE49F","user_header":"https://static001.geekbang.org/account/avatar/00/16/92/fa/b8a5e342.jpg","comment_is_top":false,"comment_ctime":1638672452,"is_pvip":false,"replies":[{"id":"118295","content":"5.x及以前版本放在 ibdata1 ibdata2 这组文件里<br>新版本可以配置为单独文件组","user_name":"作者回复","user_name_real":"编辑","uid":"1264162","ctime":1639385197,"ip_address":"","comment_id":324826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638672452","product_id":100020801,"comment_content":"老师好，请问下undo log是存储在哪里的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538259,"discussion_content":"5.x及以前版本放在 ibdata1 ibdata2 这组文件里\n新版本可以配置为单独文件组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639385197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322887,"user_name":"Coool","can_delete":false,"product_type":"c1","uid":1701702,"ip_address":"","ucode":"1D1AB3270B02B9","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/46/209ca424.jpg","comment_is_top":false,"comment_ctime":1637645602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637645602","product_id":100020801,"comment_content":"老师，这个实验的大环境是隔离级别为read-committed还是repeatable-read？第一个实验中我测出来A事务读取的值是2。","like_count":0},{"had_liked":false,"id":322875,"user_name":"申某人","can_delete":false,"product_type":"c1","uid":1837308,"ip_address":"","ucode":"7A9AE97528873A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/08/fc/f42e324e.jpg","comment_is_top":false,"comment_ctime":1637639577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637639577","product_id":100020801,"comment_content":"我的mysql版本为5.7.29，autocommit = 1，tx_isolation = REPEATABLE-READ，开启事务使用的是start transaction with consistent snapshot命令，按照老师的步骤操作，为什么事务A查出来的依然是2呢？希望有大佬解答一下。","like_count":0},{"had_liked":false,"id":322576,"user_name":"moonfox","can_delete":false,"product_type":"c1","uid":1526355,"ip_address":"","ucode":"902BFF40EFA9FA","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","comment_is_top":false,"comment_ctime":1637486245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637486245","product_id":100020801,"comment_content":"老师您好，已经第3次刷课程，每次都有新的收获，感觉到了真的是知道的越多，不知道的就越多，现在有关于多数据版本是如何定位记录行的问题，具体问题如下，万望百忙中解答一下呢。<br><br>在RR下，表t，字段为id, c1,c2，对应数据为(1,1,1),(2,2,2),(3,3,3)。<br><br>事务A使用begin启动，查询 select c1 from t where c2=2;返回结果 c1=2。<br><br>事务B更新 update t set c2=20 where id=2;提交。此时数据为(1,1,1),(2,2,20),(3,3,3)。<br><br>事务A再次查询select c1 from t where c2=2时，根据一致性视图，返回结果依然是 c1=2。<br><br>我的问题是：在多版本数据下，mysql是如何定位数据行的呢。当事务A再次查询时，内存页page中的数据已经更新，已经没有c2=2的这条记录了，对于事务A来说，mysql是如何定位到这条记录的呢，无论全表扫描，还是B+树搜索，都已经没有c2=2了。因为只有定位到这种记录，才能查找它的历史版吧？从而找到c2=2","like_count":0},{"had_liked":false,"id":322494,"user_name":"moonfox","can_delete":false,"product_type":"c1","uid":1526355,"ip_address":"","ucode":"902BFF40EFA9FA","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","comment_is_top":false,"comment_ctime":1637419487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637419487","product_id":100020801,"comment_content":"当使用start transaction with consistent snapshot启动事务时，会马上生成事务和一致性视图<br><br>疑问：在这个其间也会生成其他事务吗？即在事务创建后到生成一致性视图期间，会有其他事务生成吗","like_count":0},{"had_liked":false,"id":322421,"user_name":"Geek_be775f","can_delete":false,"product_type":"c1","uid":2848324,"ip_address":"","ucode":"B40A323802EA96","user_header":"","comment_is_top":false,"comment_ctime":1637379097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637379097","product_id":100020801,"comment_content":"都是， 对于 图1 的结果 ， 我感觉 事务A读取的 k值应该是 2吧， 因数事务A读的时候 ， 此时的快照数组 顺序是 [99,100,102,101],  虽然101还未提交对 A不可见，但是 102已经提交事务了，是可以读取到事务C提交的最新值的。所以事务A读取的应该是 2，不是1","like_count":0},{"had_liked":false,"id":320803,"user_name":"Geek_c2328a","can_delete":false,"product_type":"c1","uid":2759677,"ip_address":"","ucode":"8D8516E6DEB572","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8XibXEJesm3fWM4tjmibNiaf1UMG6UphUiaKwCOCYTG5RmY63GUApFbIlwpmwl9p02HVeiazgovYbTGA/132","comment_is_top":false,"comment_ctime":1636515139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636515139","product_id":100020801,"comment_content":"老师您好，我想问一下快照是在事务开始时候就生成吗？还是在事务第一次读的时候生成呢？我本地用mysql测试发现一些问题：<br><br>1. T1时刻事务A和事务B同时开始；<br>2. T2时刻事务A修改数据后Commit<br>3. T3时刻事务B去查询数据，查询到的是事务A修改之后的数据；<br><br>如果T1时候，事务B启动后立即进行一次读，那么事务B T3时刻读到的就是修改前的数据","like_count":0},{"had_liked":false,"id":320036,"user_name":"小肥","can_delete":false,"product_type":"c1","uid":1157618,"ip_address":"","ucode":"0CC43CA3CDA880","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/f2/f3a574c6.jpg","comment_is_top":false,"comment_ctime":1636045391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636045391","product_id":100020801,"comment_content":"“事务 A 的查询语句的视图数组是在执行这个语句的时候创建的”和“一致性视图是在执行 start transaction with consistent snapshot 时创建的”？不能理解，感觉互相矛盾，老师能解疑吗？","like_count":0},{"had_liked":false,"id":319381,"user_name":"Geek1185","can_delete":false,"product_type":"c1","uid":2028954,"ip_address":"","ucode":"47BEE492EF4C1A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9a/63dc81a2.jpg","comment_is_top":false,"comment_ctime":1635767078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635767078","product_id":100020801,"comment_content":"本次课后题一直没能复现，加过是C变为 2 3 4 5，这个跟我的认识是一样得。<br>想知道一下原因。","like_count":0},{"had_liked":false,"id":318999,"user_name":"꧁༺༻꧂","can_delete":false,"product_type":"c1","uid":1178426,"ip_address":"","ucode":"8BFD5C1F6ED235","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/3a/3dc7c61c.jpg","comment_is_top":false,"comment_ctime":1635500948,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1635500948","product_id":100020801,"comment_content":"老师你好，我有个问题，上面说，如果 版本落在黄色区间，并且 trx_id 不在 m_ids中，那么可见。我认为 应该还需要跟当前事务ID对比才能决定，小于当前事务ID才可见。<br><br>比如，当前事务ID=100，min_trx_id = 90, max_trx_id = 110 , m_ids = [90, 100, 109]<br>此时，有一条数据记录 row_trx_id = 105，因为 事务系统分配事务ID是严格递增的，那么创建 当前事务100的时候，必然不存在105的事务，所以不能看到105这个事务的数据。<br><br>不知道我的理解是否正确呢？","like_count":0},{"had_liked":false,"id":317521,"user_name":"Geek_a42094","can_delete":false,"product_type":"c1","uid":2272450,"ip_address":"","ucode":"3E13DD46FF77C0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/28t7w9ZKyfjJXkyJoCqSzFWmDIwjfcCT3D8GHIaX4OFyPKrIbeSU8ZOiae4fkIHkCoiaCGdGP4icdmoJCrc9nxjMg/132","comment_is_top":false,"comment_ctime":1634823243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634823243","product_id":100020801,"comment_content":"InnoDB里面每个事务有一个唯一的事务ID，叫作 transaction id。它是在事务开始的时候向InnoDB的事务系统申请的，是按申请顺序严格递增的。<br><br><br>上面这句话 是否可以理解成 高水位+1就是当前事务id 呢？ 因为事务ID是按照申请顺序严格递增的，但是图中，当前事务的箭头为什么指到了，低水位和高水位之间呢？","like_count":0},{"had_liked":false,"id":317232,"user_name":"Geek_7de5c5","can_delete":false,"product_type":"c1","uid":2816189,"ip_address":"","ucode":"8226F480278EF1","user_header":"","comment_is_top":false,"comment_ctime":1634717873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634717873","product_id":100020801,"comment_content":"为什么我看到的思考题图片里面 少了update c=c+1？<br>是不是作者重新08的时候，一不小心删掉了<br>","like_count":0},{"had_liked":false,"id":316529,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1634370479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634370479","product_id":100020801,"comment_content":"思考题：<br>场景构造：<br>1. 首先启动一个带一致性视图的事物A<br>2.然后在另一个进程中，执行Update语句，该事物记为B，该事物是立即提交的<br>3.再在事物A中执行UPDATE语句，虽然启动了带一致性视图的事物，但更新语句是在当前版本的数据基基础上执行的，因此，此时c字段变成0，所以UPDATE语句并未更新任何一行数据。<br>4.接下来仍然在事物A中，执行select * from t，由于事物带一致性视国，而事物本身的update语句并未做出任何修改，事物B的更新是在事物A启动之后发生的也是不可见的，因此，只能读到在事物A之前的数据，所以，从现象上看事物A无法更新数据<br>要避免这种现象，个人理解：对于普通的数据更新操作，不要启动带一致性视图的事物","like_count":0},{"had_liked":false,"id":315724,"user_name":"陈洋","can_delete":false,"product_type":"c1","uid":1828326,"ip_address":"","ucode":"F9AF63AD3DAD9B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibk5bXAHP7jzLAMKsbrdjMxJ3icbr1vmcp9j9LXrRSSSK3eTWjgf0ZBvrvSIy9xL3ySzQ5ym42zVw/132","comment_is_top":false,"comment_ctime":1633954273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633954273","product_id":100020801,"comment_content":"老师讲的好，但是一两遍是不能完全理解的，还是要多看几遍，才能理清楚其中的细节","like_count":0},{"had_liked":false,"id":315216,"user_name":"葱味黑咖啡","can_delete":false,"product_type":"c1","uid":2063970,"ip_address":"","ucode":"9BF75E8CCF8E0B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/8YX35AFKL60uUNM5YGloEx8uDbv0VGB5VddYvqKDgPRiauyW1ggJIs9p6B7ad3AricFMZAp8ahAqP4FmzaTP1few/132","comment_is_top":false,"comment_ctime":1633751141,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1633751141","product_id":100020801,"comment_content":"这一章真的干货满满，读了几遍才完全理解，太棒了","like_count":0},{"had_liked":false,"id":314895,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1633534632,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1633534632","product_id":100020801,"comment_content":"老师确认如下两个问题：<br>1、 图3，红色部分的第一个值 是 高水位是吧，即 当前系统里面已经创建过的事务 ID 的最大值加 1 ？<br>2、 文中的 “找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；” 这句话是错的吧，应该是等于高水位，此时事务A的的高水位是101。<br><br>请问老师这样理解对不对？","like_count":0},{"had_liked":false,"id":314652,"user_name":"特立独行的猪","can_delete":false,"product_type":"c1","uid":1465344,"ip_address":"","ucode":"1440F96375740A","user_header":"https://static001.geekbang.org/account/avatar/00/16/5c/00/5d11e68d.jpg","comment_is_top":false,"comment_ctime":1633302843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633302843","product_id":100020801,"comment_content":"1.innodb支持RC和RR隔离级别实现是用的一致性视图(consistent read view)<br><br>2.事务在启动时会拍一个快照,这个快照是基于整个库的.<br>基于整个库的意思就是说一个事务内,整个库的修改对于该事务都是不可见的(对于快照读的情况)<br>如果在事务内select t表,另外的事务执行了DDL t表,根据发生时间,要嘛锁住要嘛报错(参考第六章)<br><br>3.事务是如何实现的MVCC呢?<br>(1)每个事务都有一个事务ID,叫做transaction id(严格递增)<br>(2)事务在启动时,找到已提交的最大事务ID记为up_limit_id。<br>(3)事务在更新一条语句时,比如id=1改为了id=2.会把id=1和该行之前的row trx_id写到undo log里,<br>并且在数据页上把id的值改为2,并且把修改这条语句的transaction id记在该行行头<br>(4)再定一个规矩,一个事务要查看一条数据时,必须先用该事务的up_limit_id与该行的transaction id做比对,<br>如果up_limit_id&gt;=transaction id,那么可以看.如果up_limit_id&lt;transaction id,则只能去undo log里去取。去undo log查找数据的时候,也需要做比对,必须up_limit_id&gt;transaction id,才返回数据<br><br>4.什么是当前读,由于当前读都是先读后写,只能读当前的值,所以为当前读.会更新事务内的up_limit_id为该事务的transaction id<br><br>5.为什么rr能实现可重复读而rc不能,分两种情况<br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>    而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读","like_count":0},{"had_liked":false,"id":314499,"user_name":"小华哥","can_delete":false,"product_type":"c1","uid":1178380,"ip_address":"","ucode":"546EF8803E101F","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/0c/85d60820.jpg","comment_is_top":false,"comment_ctime":1633147671,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1633147671","product_id":100020801,"comment_content":"这一节还是没太理解，得多读几遍","like_count":0},{"had_liked":false,"id":314046,"user_name":"w 🍍","can_delete":false,"product_type":"c1","uid":1228290,"ip_address":"","ucode":"F2386C971EC58B","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","comment_is_top":false,"comment_ctime":1632816683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632816683","product_id":100020801,"comment_content":"【当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。  】  那这个高水位，其实就是当前事务的id吧？","like_count":0},{"had_liked":false,"id":313956,"user_name":"戒酒的李白","can_delete":false,"product_type":"c1","uid":2166073,"ip_address":"","ucode":"744E1A22761647","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","comment_is_top":false,"comment_ctime":1632754886,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632754886","product_id":100020801,"comment_content":"问个问题，如何获取系统已经生成的事务的最大值？哪里有这个信息呢","like_count":0},{"had_liked":false,"id":313896,"user_name":"何小事儿","can_delete":false,"product_type":"c1","uid":1015752,"ip_address":"","ucode":"1EA5F37230B032","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/c8/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1632730445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632730445","product_id":100020801,"comment_content":"有个问题一直有争论，就是多事务并发产生的幻读问题在mysl RR的隔离级别到底有没有完全解决，有的说是通过 MVCC+ Next-Key锁完全解决了，也有的说并没有完全解决，只是一定程度上解决了，有些疑惑，不知道您是怎么看的 ？","like_count":0},{"had_liked":false,"id":313815,"user_name":"一魄","can_delete":false,"product_type":"c1","uid":1134574,"ip_address":"","ucode":"71541125D4AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","comment_is_top":false,"comment_ctime":1632697606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632697606","product_id":100020801,"comment_content":"RR 级别是如何解决幻读的？在文中没找到答案","like_count":0},{"had_liked":false,"id":313354,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1632387180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632387180","product_id":100020801,"comment_content":"从老师第二版版的文中“图 4 事务 A 查询数据逻辑图”开始看，<br>看到“所以，事务 A 查询语句的读数据流程是这样的” 这里：<br><br>我想了很久没想明白，找到 (1,3) 的时候，判断出 row trx_id=101，此时A事务中的高水位是103，<br>当前系统中最大的事务id=102，高水位等于最大事务id+1；为什么文中说row trx_id=101比高水位大，明明是小呀？ 谁能解答一下呢","like_count":0},{"had_liked":false,"id":313338,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1632382523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632382523","product_id":100020801,"comment_content":"数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位<br><br>好，现在事务 A 要来读数据了，它的视图数组是[99,100]。当然了，读数据都是从当前版本读起的。<br><br>所以，事务 A 查询语句的读数据流程是这样的：找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；<br><br>这里是不是矛盾，A的高水位是103，row trx_id=101并没有比高水位大呀？我一直么看明白这个，有谁能帮忙解答一下吗？不胜感激！","like_count":0},{"had_liked":false,"id":312883,"user_name":"zqq","can_delete":false,"product_type":"c1","uid":1007453,"ip_address":"","ucode":"3BBDBF95107C66","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/5d/211d2edd.jpg","comment_is_top":false,"comment_ctime":1632103475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632103475","product_id":100020801,"comment_content":"三刷，这里就想到《MYSQL高性能》的坑，mvcc部分讲的不对，以前好多次面试都是按照书上的原理讲的，不知道挂了有没有这个原因","like_count":0},{"had_liked":false,"id":312532,"user_name":"十三","can_delete":false,"product_type":"c1","uid":2159775,"ip_address":"","ucode":"C04734CC3E3992","user_header":"https://static001.geekbang.org/account/avatar/00/20/f4/9f/933bea91.jpg","comment_is_top":false,"comment_ctime":1631851237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631851237","product_id":100020801,"comment_content":"从图中可以看到，第一个有效更新是事务 C，把数据从 (1,1) 改成了 (1,2)。这时候，这个数据的最新版本的 row trx_id 是 102，而 90 这个版本已经成为了历史版本。  为啥必须先是执行事务C呢？？？","like_count":0},{"had_liked":false,"id":311760,"user_name":"刘佳奇","can_delete":false,"product_type":"c1","uid":2756889,"ip_address":"","ucode":"857DCD20B70D74","user_header":"https://static001.geekbang.org/account/avatar/00/2a/11/19/5c63bf7f.jpg","comment_is_top":false,"comment_ctime":1631451116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631451116","product_id":100020801,"comment_content":"老师你好，这节课上的例子中，A的读是在B事务提交之前读的，但是B事务里有update操作，所以按两阶段锁来说，B事务应该已经给这一行加了行锁。此时A不应该是只能等到B事务结束后才能执行吗？如果是这样的话，那在读提交隔离级别下，A最终应该读出3才对。因为A一定会等到B提交后才能读。希望老师解答一下","like_count":0},{"had_liked":false,"id":310217,"user_name":"A 拽丫头","can_delete":false,"product_type":"c1","uid":1470434,"ip_address":"","ucode":"F875D99D18DF6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","comment_is_top":false,"comment_ctime":1630551679,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630551679","product_id":100020801,"comment_content":"老师，sorry。看你对 @约书亚的回复 明白了，解决这种场景的方法，针对这句<br>“比如我们这个例子里面预期值本来是4，当然实际业务中一般是匹配唯一主键，所以预期值一般是1”<br><br>对于这个1的由来不是很懂(•̀⌄•́)，老师收下我的膝盖，可否讲解下","like_count":0},{"had_liked":false,"id":310215,"user_name":"A 拽丫头","can_delete":false,"product_type":"c1","uid":1470434,"ip_address":"","ucode":"F875D99D18DF6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","comment_is_top":false,"comment_ctime":1630550957,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630550957","product_id":100020801,"comment_content":"老师针对文章结尾留的问题，看了下一篇的答案，答案中提到   出现的原因有2种<br>1.  版本已提交，但是是在视图创建后提交的，不可见<br>2.  版本未提交不可见<br><br>在答案结尾部分说到，业务中如果要绕过这类问题，@约书亚 提到的乐观锁，可解次问题。但我看了后有疑问<br><br>乐观锁只是在数据行增加了一个显示的数据版本号  version，更新时，将 version 作为 where 中的一部分，但此时session B，已经将数据更新了，加不加 version session A 更新的结果都是0行，所以感觉乐观锁也没解决此问题呀？","like_count":0},{"had_liked":false,"id":309695,"user_name":"欢少の不忘初心","can_delete":false,"product_type":"c1","uid":2563344,"ip_address":"","ucode":"9A7ABCC07682C2","user_header":"https://static001.geekbang.org/account/avatar/00/27/1d/10/a73d63ba.jpg","comment_is_top":false,"comment_ctime":1630307419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630307419","product_id":100020801,"comment_content":"老师，这一篇的难度是不是比前几篇大呀，看起来比较吃力","like_count":0},{"had_liked":false,"id":308492,"user_name":"FF","can_delete":false,"product_type":"c1","uid":1133758,"ip_address":"","ucode":"89DB3329AAEAB2","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/be/25919d4b.jpg","comment_is_top":false,"comment_ctime":1629643734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629643734","product_id":100020801,"comment_content":"这个一致性视图产生的活跃事务数组应该是copy的一份，<br>不会随着后面事务的变化而变化","like_count":0},{"had_liked":false,"id":307966,"user_name":"nwc","can_delete":false,"product_type":"c1","uid":2349067,"ip_address":"","ucode":"2FEDB3D6D5C12A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIXeicJJQk6sbWzIQfVRHoUIPkQYyXRFZ6V0O42ddCic9ypt0liciaPFwicicfpo5HJ3ibicNtL5wkXlcib5CQ/132","comment_is_top":false,"comment_ctime":1629342147,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629342147","product_id":100020801,"comment_content":"看完这篇文章有一个疑惑，查询了诸多资料，也无法解开，希望大家能够集思广益一下。<br><br>文章中说，事务开始时，维护了一个数组，记录了当前系统中正在执行的事务ID，其中最小的事务ID为低水位，最大的ID值加一为高水位。<br><br>我的疑问在这个正在执行的事务ID的最大值，这个ID个人感觉就是当前正在执行的这个事务的ID，因为事务ID实在这个事务的视图生成时分配的，而且是按照递增的规律严格执行的，那么在当前这个事务的视图生成时，维护的当前正在执行的所有事务的ID中，当前事务的ID肯定是最大的事务ID。<br><br>不知道我的理解有没有什么问题。","like_count":0},{"had_liked":false,"id":306932,"user_name":"周岸","can_delete":false,"product_type":"c1","uid":1795561,"ip_address":"","ucode":"ABC57ADC936635","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/e9/ea8f8145.jpg","comment_is_top":false,"comment_ctime":1628780621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628780621","product_id":100020801,"comment_content":"老师，想问一下事务id是什么时候分配的，是在执行start transaction时就分配了还是执行start transaction之后的第一个dml语句时才分配？？","like_count":0},{"had_liked":false,"id":305627,"user_name":"Bing","can_delete":false,"product_type":"c1","uid":1485605,"ip_address":"","ucode":"26D7BAF0E1A9F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/25/5e10aacf.jpg","comment_is_top":false,"comment_ctime":1628075779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628075779","product_id":100020801,"comment_content":"如果更新某个字段，在索引树上是怎么处理的呢？范围查找的MVCC是怎么实现的？","like_count":0},{"had_liked":false,"id":304844,"user_name":"Tsang","can_delete":false,"product_type":"c1","uid":2720215,"ip_address":"","ucode":"5B46AD25EA5BB9","user_header":"https://static001.geekbang.org/account/avatar/00/29/81/d7/629ee141.jpg","comment_is_top":false,"comment_ctime":1627637086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627637086","product_id":100020801,"comment_content":"糟糕，这一集看不懂了，有一点看不懂下面就全看不懂了","like_count":0},{"had_liked":false,"id":304179,"user_name":"张素华","can_delete":false,"product_type":"c1","uid":1944374,"ip_address":"","ucode":"AB2B788B7130C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ab/36/106a30d4.jpg","comment_is_top":false,"comment_ctime":1627288093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627288093","product_id":100020801,"comment_content":"老师，想请教一下，图1的例子，事务A读的时候，事务B拿到了写锁未释放，事务A是不是应该阻塞？ ，读写前面不是说互斥的吗","like_count":0},{"had_liked":false,"id":303949,"user_name":"꧁༺༻꧂","can_delete":false,"product_type":"c1","uid":1178426,"ip_address":"","ucode":"8BFD5C1F6ED235","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/3a/3dc7c61c.jpg","comment_is_top":false,"comment_ctime":1627118580,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1627118580","product_id":100020801,"comment_content":"老师，我有一个问题哈，回滚的事物，undo log如何记录呢，是不是就不存在了呀？比如有两个事物A、B，tx ID分别为100、101，当前值的row tx-id 为99，tx 100 更新了值， row tx-id为100，之后rollback了，101开始执行，一致性视图中row tx-id应该为99。是不是在rollback语句执行的时候，会把这个tx-id重新更改为最新有效记录的tx id？","like_count":0},{"had_liked":false,"id":303404,"user_name":"雨后重习","can_delete":false,"product_type":"c1","uid":2306070,"ip_address":"","ucode":"FEF7871D7F22E5","user_header":"https://static001.geekbang.org/account/avatar/00/23/30/16/ebe77870.jpg","comment_is_top":false,"comment_ctime":1626769877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626769877","product_id":100020801,"comment_content":"老师我想请教一个问题：在rr隔离级别下mvcc机制是通过版本比较的方式读取数据，如果一个事务（事务id为101）插入一条数据那么他就会创造一个新的版本，这时另一个事务（事务id为102 注：事务101还未提交）进行范围查询比较数据版本发现102在数组中不可读取，那理应不出现幻读问题。那mvcc机制为什么解决不了幻读问题。","like_count":0},{"had_liked":false,"id":302718,"user_name":"吉吉","can_delete":false,"product_type":"c1","uid":1126111,"ip_address":"","ucode":"5A5DAB5B49D0F1","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/df/59725073.jpg","comment_is_top":false,"comment_ctime":1626344487,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626344487","product_id":100020801,"comment_content":"(1)事务A: <br>BEGIN;<br>SELECT * FROM t;<br>(2)事务B【隐式提交】: <br>UPDATE t <br>SET c = 0 <br>WHERE<br>\tid = c;<br>&#47;&#47; 此时C的值都已经是0<br>(3)事务A: <br>UPDATE t <br>SET c = 0 <br>WHERE<br>\tid = c;<br>&#47;&#47; 【UPDATE】属于当前读，由于此时C的值都已经是0，即id=c没有符合条件的记录可更新 @1<br>SELECT * FROM t;<br>&#47;&#47; 普通【SELECT】属于快照读，读出来的记录c都是原来的值<br>SELECT * FROM t FOR UPDATE;<br>&#47;&#47; 普通【SELECT .. FOR UPDATE】属于当前读，读出来的记录c都是最新值 @2<br>&#47;&#47; 在不执行COMMIT之前，可以多次尝试执行@1【快照读】和@2【当前读:读取最新的数据】，对应的结果都一样<br>COMMIT;<br>&#47;&#47; 最后提交事务，@1和@2查询结果都一致","like_count":0},{"had_liked":false,"id":300425,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1625151086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625151086","product_id":100020801,"comment_content":"<br>事务的提交过程 以及数据的查询方式<br>1 事务在 start transaction with consistent snapshot 的时候，创建事务的快照。<br>   1.1 事务的快照，是基于整个库的。<br>2 数据库中的数据是有多个版本的，每次更新的时候，都会生成行的一下 事务的id和行数据，老的 事务id和行数据也是被保留的（这里的行数据其实是根据数据更新时候的undo log 计算出来的）。<br>   快照就是事务开始时候，的数据版本。<br>3  按照可重复读的原理，事务在开始的时候，承认在它之前已经提交的事务的数据，在它之后 事务更新的数据，它是不认的。（这里的前后，是每个事务 是保存有一个 数组的，保存着 活跃区，在它之前的事务）<br>   因此 已经提交事务最大值 称之为低水位， 还未提交事务最大值 +1 为高水位。这之间就是未提交集合。<br>4 对于活跃区 更新数据，总是更新 最后提交的数据，就算一直事务在一个数据前面，它更新数据时，时候的数据也是最新的数据。因为在更新数据的时候有 锁。。 这称之为 当前读 像保证了，数据更新的一致性。","like_count":0},{"had_liked":false,"id":300368,"user_name":"星龙驹","can_delete":false,"product_type":"c1","uid":2112462,"ip_address":"","ucode":"4388832D912271","user_header":"https://static001.geekbang.org/account/avatar/00/20/3b/ce/9ddbcd0d.jpg","comment_is_top":false,"comment_ctime":1625128973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625128973","product_id":100020801,"comment_content":"不知道会不会收到回复。<br>这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；如果落在黄色部分，那就包括两种情况a.  若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>这个3.b 不就是落在绿色位置吗？怎么会是黄色位置？","like_count":0},{"had_liked":false,"id":300046,"user_name":"熊猫","can_delete":false,"product_type":"c1","uid":1080238,"ip_address":"","ucode":"23C85117A16BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","comment_is_top":false,"comment_ctime":1624962542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624962542","product_id":100020801,"comment_content":"老师，是不是这里和第2讲的redo log可以串起来:多版本数据合并？","like_count":0},{"had_liked":false,"id":299400,"user_name":"微笑","can_delete":false,"product_type":"c1","uid":1363834,"ip_address":"","ucode":"6E8E2964D0191F","user_header":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","comment_is_top":false,"comment_ctime":1624611220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624611220","product_id":100020801,"comment_content":"一个事物中，首先执行select查询操作，这个时候会生成一致性视图readView,而readView里面的组成参数里面的creator_trx_id为0，之后在这个事物里面有执行了update操作，数据引擎下发Transaction_id，那这个时候这个事物就有了Transaction_id了，那这个事物第一次查询时候生成的一致性事物的creator_trx_id=0是否需要更换？","like_count":0},{"had_liked":false,"id":298058,"user_name":"tong","can_delete":false,"product_type":"c1","uid":1882517,"ip_address":"","ucode":"966DEDE81081D0","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b9/95/cabab54b.jpg","comment_is_top":false,"comment_ctime":1623898455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623898455","product_id":100020801,"comment_content":"首先自己没有复现，复现不成功<br>思考题嘛，还是自己想办法复现的，看了下面有个同学的留言，get到了<br>需要使用到mysql 的mvcc multi-version concurrency control<br>复现需要新开一个会话，事务，类似<br>begin：<br>update t set c = id + 2；<br>commit;<br><br>此时，第一个会话事务，update t set c=0 where id=c;<br>update时候，为了避免上述文中，讲到的，丢失其他事物的更新，需要使用当前读<br>导致更新失败<br><br>实战：<br>mysql这种宽松的更新机制<br>类似数据库中，表字段version，根据affect rows来判断，下步操作的步骤<br>","like_count":0},{"had_liked":false,"id":297028,"user_name":"归零","can_delete":false,"product_type":"c1","uid":1103208,"ip_address":"","ucode":"C99B8E93009A46","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/68/2201b6b9.jpg","comment_is_top":false,"comment_ctime":1623287986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623287986","product_id":100020801,"comment_content":"老师咨询一个问题，如果用begin开启，然后后续的执行只有查询语句(select),按照老师的讲解，是应该没有事务id的，那么MVCC该如何实现呢？怎么比较高水位和低水位呢？谢谢","like_count":0},{"had_liked":false,"id":296818,"user_name":"小哪吒","can_delete":false,"product_type":"c1","uid":1350991,"ip_address":"","ucode":"252087A733355C","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/4f/273ffb51.jpg","comment_is_top":false,"comment_ctime":1623168751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623168751","product_id":100020801,"comment_content":"关于高低水位 3.b. 场景(如果落在黄色部分，若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见)，，<br>InnoDB can avoid the overhead associated with setting up the transaction ID (TRX_ID field) for transactions that are known to be read-only. A transaction ID is only needed for a transaction that might perform write operations or locking reads such as SELECT ... FOR UPDATE. Eliminating unnecessary transaction IDs reduces the size of internal data structures that are consulted each time a query or data change statement constructs a read view.","like_count":0},{"had_liked":false,"id":296229,"user_name":"等风来","can_delete":false,"product_type":"c1","uid":1350677,"ip_address":"","ucode":"5B7FF74A51F534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/15/719f1f44.jpg","comment_is_top":false,"comment_ctime":1622821880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622821880","product_id":100020801,"comment_content":"从21节加锁文章回过头来看， 在可重复读级别下， 一致性视图在第一次快照读开启有了新的认识。<br>比如说lock in share mode&#47;for update当前读下，并不会开启一致性视图欧， 各位同学注意了欧。","like_count":0},{"had_liked":false,"id":295994,"user_name":"每皮","can_delete":false,"product_type":"c1","uid":1493064,"ip_address":"","ucode":"BAF7770FF959FF","user_header":"https://static001.geekbang.org/account/avatar/00/16/c8/48/cf7238e5.jpg","comment_is_top":false,"comment_ctime":1622696095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622696095","product_id":100020801,"comment_content":"“在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。”事务是不是mysql实例级别的，如果是的话，快照是不是应该基于mysql实例？","like_count":0},{"had_liked":false,"id":295540,"user_name":"耶马","can_delete":false,"product_type":"c1","uid":2288362,"ip_address":"","ucode":"3A3CF67B016CDB","user_header":"https://static001.geekbang.org/account/avatar/00/22/ea/ea/77a59153.jpg","comment_is_top":false,"comment_ctime":1622468434,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622468434","product_id":100020801,"comment_content":"这篇文章看了第三遍后,查了查资料,从作者的角度来说,目的就是告诉你们在不同的隔离级别情况下 查询的数据是不一样的,内部走的是mvcc,mvcc是如何存储的,顺便举个栗子给你们看看","like_count":0},{"had_liked":false,"id":294201,"user_name":"jeakiry","can_delete":false,"product_type":"c1","uid":1509008,"ip_address":"","ucode":"A436FB6C610A4F","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/90/7592bd6a.jpg","comment_is_top":false,"comment_ctime":1621829047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621829047","product_id":100020801,"comment_content":"InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。<br><br><br>这个可以理解为全库唯一么？不同表之间也不会有重复","like_count":0},{"had_liked":false,"id":294189,"user_name":"森林中的书生","can_delete":false,"product_type":"c1","uid":2588344,"ip_address":"","ucode":"B73AB2A3E74884","user_header":"https://static001.geekbang.org/account/avatar/00/27/7e/b8/49631ba9.jpg","comment_is_top":false,"comment_ctime":1621823931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621823931","product_id":100020801,"comment_content":" RC级别下，每一次更新操作都会产生新的readview，那么当前事务ID是不是也要每次创建新的呢？","like_count":0},{"had_liked":false,"id":293046,"user_name":"袁巧","can_delete":false,"product_type":"c1","uid":2353261,"ip_address":"","ucode":"CC89E3DC39E36D","user_header":"https://static001.geekbang.org/account/avatar/00/23/e8/6d/d67dc5a1.jpg","comment_is_top":false,"comment_ctime":1621172338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621172338","product_id":100020801,"comment_content":"最后一个问题，我在mysql中执行完<br>update t set c=0 where id=c;<br>后，c变成0了啊，为什么和文章中的结果不一样啊？","like_count":0},{"had_liked":false,"id":292386,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1620802566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620802566","product_id":100020801,"comment_content":"这篇文章很好的 将 一致性视图 事物 和行锁 放到一起做了分析。","like_count":0},{"had_liked":false,"id":292377,"user_name":"冉野","can_delete":false,"product_type":"c1","uid":1137353,"ip_address":"","ucode":"2CAEA424996876","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/c9/933ee0a8.jpg","comment_is_top":false,"comment_ctime":1620800221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620800221","product_id":100020801,"comment_content":"老师，您好，有个疑问想请教你，事务C的更新操作为什么不像上一讲行锁所在的事务还未提交，事务C会被阻塞呢？","like_count":0},{"had_liked":false,"id":290617,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1619660344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619660344","product_id":100020801,"comment_content":"一直想不明白，mysql的高水位为何是当前最大的活跃事务+1呢     加1有什么目的？","like_count":0},{"had_liked":false,"id":290501,"user_name":"Niverkk","can_delete":false,"product_type":"c1","uid":2179875,"ip_address":"","ucode":"F9220C10107E44","user_header":"https://static001.geekbang.org/account/avatar/00/21/43/23/d98fb8f7.jpg","comment_is_top":false,"comment_ctime":1619592922,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1619592922","product_id":100020801,"comment_content":"老师总结的简单易懂","like_count":0},{"had_liked":false,"id":290319,"user_name":"奔四男人小硬硬","can_delete":false,"product_type":"c1","uid":1582340,"ip_address":"","ucode":"F57DEEF89A9BCC","user_header":"https://static001.geekbang.org/account/avatar/00/18/25/04/2aac90c8.jpg","comment_is_top":false,"comment_ctime":1619495500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619495500","product_id":100020801,"comment_content":"让我缓一缓","like_count":0},{"had_liked":false,"id":290314,"user_name":"Allen答案","can_delete":false,"product_type":"c1","uid":2569846,"ip_address":"","ucode":"AAC932E4ADB2C2","user_header":"","comment_is_top":false,"comment_ctime":1619494325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619494325","product_id":100020801,"comment_content":"老师，您好，不知道现在发评论您是否还能看到，我现在有个疑问：根据图5的示例，事务B更新后查询，是当前读，所以拿到的结果是最新版本的（1,3），但是在更新前查询的结果是（1,1），只是更新了一次k的值就从1变成了3，这样是想要的结果么？怎么感觉有点不太符合逻辑呢，这里有点不太清楚，希望能得到解答，谢谢老师","like_count":0},{"had_liked":false,"id":290151,"user_name":"何敬健📷","can_delete":false,"product_type":"c1","uid":1801009,"ip_address":"","ucode":"B47DCBB2AAA36E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7b/31/01e1476b.jpg","comment_is_top":false,"comment_ctime":1619405123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619405123","product_id":100020801,"comment_content":"首先解释几个概念，视图数组：是用来保存当前事务启动瞬间，正在“活跃”的所有事务id。所谓“活跃”，就是启动了但是未提交的。低水位：就是这个活跃数组中最小的事务id。高水位：现在系统中创建过的事务的最大值+1，这里高水位不能理解为当前事务ID+1，因为在创建数组的时候已经比当前事务启动瞬间晚一些了，在计算高水位的时候，可能别的事务也创建出来了。这个视图数组和高水位就组成了当前事务的read-view，数据版本的可见性规则，就是基于数据的row trx_id,和这个一致性视图做对比得到的。下面开始将绿色区域，黄色区域，红色区域的问题。<br><br>![image-20210426103444217](https:&#47;&#47;manster.oss-cn-beijing.aliyuncs.com&#47;img&#47;image-20210426103444217.png)<br><br>首先，数组中都是活跃的事务，比最小活跃的事务id小的（低水位）都是已经提交的，数据可见，这没有问题。比当前事务id创建后已有的最大事务id+1（高水位）大的都是未来的事务，数据都不可见，也没有问题。黄色区域，都说老师命名有问题，但是你认为命名什么名字好？是不是想想都不合适，我认为，在对黄色区域内的事务id作出判断前，黄色区域叫未提交事务集合没问题，可以暂时认为黄色区域都是未提交的，现在需要做出判断，1. 当黄色区域中的事务id在活跃数组中时，那么这个事务一定是活跃的未提交的，所以不可见 2. 当黄色区域中的事务id不在活跃数组中，那么就说明它是不活跃的就是已提交的事务，判断完成后，黄色中的一部分就是绿色区域的了，剩下的就还是未提交事务。","like_count":0},{"had_liked":false,"id":289768,"user_name":"wsyzwddsg111","can_delete":false,"product_type":"c1","uid":2582372,"ip_address":"","ucode":"7C59E81ECFF8AB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/sTmCOXh19off3uvUDIsDic4SYJGulgl1v6o3R4E32OZCkZAVzZw751jg9Tya8jLicxKzQWHC4Bu6o08J55YJib9oQ/132","comment_is_top":false,"comment_ctime":1619169202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619169202","product_id":100020801,"comment_content":"tx_id在min-max之间，不是必定会在活跃事务数组内吗？","like_count":0},{"had_liked":false,"id":289758,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":1242497,"ip_address":"","ucode":"2521FB6292F304","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/81/92d01e3a.jpg","comment_is_top":false,"comment_ctime":1619168106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619168106","product_id":100020801,"comment_content":"为什么A的视图数组是「99，100」 ，A启动start transaction with consistent snapshot时候，事务ID是100 ，也就是当前最大的事务ID是100，高水位不是100+1=101吗？ A的视图数组应该是「99，101」才对啊？<br><br>难倒A执行start transaction with consistent snapshot 是先创建视图数组  再申请trx_id的？？？？<br>有点迷惑！！！","like_count":0},{"had_liked":false,"id":288669,"user_name":"jackiesteed","can_delete":false,"product_type":"c1","uid":1434913,"ip_address":"","ucode":"78C374E8A53E29","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqWa00uqgukb0sPD16VkHAlP7KibaChCmBIA7y9LficdWv7yguibJeicV2dwQakIQbI7RuqzpdHNQjriaw/132","comment_is_top":false,"comment_ctime":1618595163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618595163","product_id":100020801,"comment_content":"老师你好, 有个问题, <br>图五中, 两个更新不应该会使用行锁互斥吗,  <br>如果B先开启事务, C的更新会被阻塞, 此时的值不应该是(1,2)吗?<br>如果C先开启事务, B会被阻塞, 此时虽然结果是(1,3) 但是属于事务串行执行 , 跟当前读就没关系了吧","like_count":0},{"had_liked":false,"id":288139,"user_name":"EUGL","can_delete":false,"product_type":"c1","uid":2557996,"ip_address":"","ucode":"FF7BDEFC95187A","user_header":"https://static001.geekbang.org/account/avatar/00/27/08/2c/96ab5c83.jpg","comment_is_top":false,"comment_ctime":1618319138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618319138","product_id":100020801,"comment_content":"我也觉得这个问题很有趣，但是我更期待老师的答案！！","like_count":0},{"had_liked":false,"id":288099,"user_name":"Geek_a7fd0f","can_delete":false,"product_type":"c1","uid":1445778,"ip_address":"","ucode":"24C2FF3610FE9C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhD6Zib0sPIL1ia8obYgICUCjhE3MKib647IVKibC1Qq7gFp31sagtLJ3OjdicibKw9DZMltG4Lj30icKlg/132","comment_is_top":false,"comment_ctime":1618297960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618297960","product_id":100020801,"comment_content":"我有两个疑问：1:、\t文中说到：对于图 2 中的数据来说，如果有一个事务，它的低水位是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 计算出 V3，所以在它看来，这一行的值是 11，但是假设这个事务的高水位是26,25不在视图数组中，则查到的值是22？2、怎么理解事务启动瞬间？可不可以认为视图数组中的事务ID值都小于当前事务ID的值，可不可以认为高水位-1就是当前事务的ID？","like_count":0},{"had_liked":false,"id":287451,"user_name":"Steven","can_delete":false,"product_type":"c1","uid":1253652,"ip_address":"","ucode":"3FE64459842015","user_header":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","comment_is_top":false,"comment_ctime":1617956520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617956520","product_id":100020801,"comment_content":"本篇非常烧脑，花了些时间反复读，收获满满，非常感谢。<br>也要感谢留意的其他同学，很有启发。","like_count":0},{"had_liked":false,"id":287158,"user_name":"孤傲的虎王","can_delete":false,"product_type":"c1","uid":2536451,"ip_address":"","ucode":"FE9B90D6EEBAFB","user_header":"https://static001.geekbang.org/account/avatar/00/26/b4/03/677fd301.jpg","comment_is_top":false,"comment_ctime":1617798996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617798996","product_id":100020801,"comment_content":"为什么按照答案，我复现的结果是session b修改后的结果呢？","like_count":0},{"had_liked":false,"id":286042,"user_name":"Geek_c36c25","can_delete":false,"product_type":"c1","uid":2536615,"ip_address":"","ucode":"B118FD1BEB655A","user_header":"","comment_is_top":false,"comment_ctime":1617117541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617117541","product_id":100020801,"comment_content":"老师你好，文中图3的说明有点看不明白，在第3种可能的前提是落到黄色部分，而黄色部分代表的是未提交事务的集合。已经落到黄色部分了为什么还有(b)情况不在数组中的情况，而且还是已提交的事务。","like_count":0},{"had_liked":false,"id":284403,"user_name":"一路顺风","can_delete":false,"product_type":"c1","uid":2032032,"ip_address":"","ucode":"D46B7F92D65189","user_header":"https://static001.geekbang.org/account/avatar/00/1f/01/a0/07ca2bd2.jpg","comment_is_top":false,"comment_ctime":1616230073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616230073","product_id":100020801,"comment_content":"高水位为什么不能等于当前事务 ID+1 呢","like_count":0},{"had_liked":false,"id":284178,"user_name":"团队组建中","can_delete":false,"product_type":"c1","uid":2064977,"ip_address":"","ucode":"9ADA622C1F443C","user_header":"","comment_is_top":false,"comment_ctime":1616115305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616115305","product_id":100020801,"comment_content":"老师好，请教您。讲视图的时候，说V4回滚到V2，这里V4和V2视图是有两个不同事务产生的，为什么能回滚呢？","like_count":0},{"had_liked":false,"id":284022,"user_name":"Geek_a852c8","can_delete":false,"product_type":"c1","uid":2206508,"ip_address":"","ucode":"D925A9D71A76BA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/O6qftWBakkjQHrAhF5tia21GKkQxibJaPy2nWUKc9eiaouaqb67Hj60RRKgjgHhzPmaxaHkLszcNYrDSkj21lPylQ/132","comment_is_top":false,"comment_ctime":1616038811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616038811","product_id":100020801,"comment_content":"<br><br>读未提交： 判断条件：直接看到最新版本是什么就显示什么<br>不可重复读： ？ <br>可重复度： 判断条件： 这一行的trx_id &lt; 自己的事务id &amp;&amp; 这一行的trx_id 不在数组中<br><br>那不可重复读的判断条件是啥？<br>","like_count":0},{"had_liked":false,"id":284017,"user_name":"Geek_a852c8","can_delete":false,"product_type":"c1","uid":2206508,"ip_address":"","ucode":"D925A9D71A76BA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/O6qftWBakkjQHrAhF5tia21GKkQxibJaPy2nWUKc9eiaouaqb67Hj60RRKgjgHhzPmaxaHkLszcNYrDSkj21lPylQ/132","comment_is_top":false,"comment_ctime":1616037860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616037860","product_id":100020801,"comment_content":"mysql&gt; begin;<br>Query OK, 0 rows affected<br><br>mysql&gt; select * from t;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 1 |<br>|  2 | 2 |<br>|  3 | 3 |<br>|  4 | 4 |<br>+----+---+<br>4 rows in set<br><br>mysql&gt; update t set c = 0 where id =c ;<br>Query OK, 4 rows affected<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select * from t<br>    -&gt; ;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 0 |<br>|  2 | 0 |<br>|  3 | 0 |<br>|  4 | 0 |<br>+----+---+<br>4 rows in set<br><br><br>好像我按照老师的来。发现改变了。。是rr的","like_count":0},{"had_liked":false,"id":284000,"user_name":"轻松的鱼","can_delete":false,"product_type":"c1","uid":1219198,"ip_address":"","ucode":"F4FF653209C47B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIEl3fX9nvzUF26ekUIicp4sgA5jZ1mGvGMhIHkwJabbjt9h5uTLw5zzU1U6JZbCSpRXBNQwuejLJg/132","comment_is_top":false,"comment_ctime":1616034575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616034575","product_id":100020801,"comment_content":"突然想到一个问题：<br>RR隔离级别时一个事物的一致性视图不会变化，意味着每次读取的数据也不会变化，为什么 RR 隔离级别还要用上 gap lock 来解决幻读？从原理上来看不需要 gap lock 也能保证可重复读啊","like_count":0},{"had_liked":false,"id":283187,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1649057,"ip_address":"","ucode":"4F42DAA5DB5C38","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","comment_is_top":false,"comment_ctime":1615611534,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615611534","product_id":100020801,"comment_content":"“现在事务 A 要来读数据了，它的视图数组是[99,100]。当然了，读数据都是从当前版本读起的。所以，事务 A 查询语句的读数据流程是这样的：<br>找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；<br>接着，找到上一个历史版本，一看 row trx_id=102，比高水位大，处于红色区域，不可见；<br>再往前找，终于找到了（1,1)，它的 row trx_id=90，比低水位小，处于绿色区域，可见。”<br><br>“数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。”<br><br>我的问题是：高水位跟着对应的视图走，即每创建一个视图就有一个低水位和高水位。是不是就意味着高水位一定是事务视图数组的最大值 +1 呢？如果不是，那么上面的事务A 的高水位可能104(trx_id=103已经提交了)，那这个时候在走上面的步骤是不是有问题？那上面的事务A 的高水位又该是多少呢？<br>","like_count":0},{"had_liked":false,"id":282840,"user_name":"小胖架构","can_delete":false,"product_type":"c1","uid":2081893,"ip_address":"","ucode":"D6314E57694013","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c4/65/d6005a4d.jpg","comment_is_top":false,"comment_ctime":1615434336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615434336","product_id":100020801,"comment_content":"老师您好，mysql这个bug：https:&#47;&#47;bugs.mysql.com&#47;bug.php?id=102913 能帮我解读一下原因吗？","like_count":0},{"had_liked":false,"id":281860,"user_name":"鲁大喵","can_delete":false,"product_type":"c1","uid":1093794,"ip_address":"","ucode":"BC880649611A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/a2/3757fc18.jpg","comment_is_top":false,"comment_ctime":1614928846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614928846","product_id":100020801,"comment_content":"理一下几个关键点<br>tx_id：事务开始时分配递增的ID<br>mvcc：每一行数据可能有多个版本（row tx_id）<br>undo log：版本链，从当前（最新）指向后一个（实际上一个版本值由当前值+undo log计算出）<br>mvcc view：事务开始后第一条innodb语句时创建（创建实际是维护当前活跃的事务数组，明确高低水位，查询时与高低水位对比确定是否可看到该事务）<br>一致性读：版本未提交，不可见；版本在视图创建后提交，不可见；版本在视图创建前提交，可见<br>当前读：更新数据都是先读后写，读只能读当前值，即最新已提交的值，即使是其他事务提交自己本该“可重复读”的，因为涉及到更新，如果以自身开始时view的值，就会导致其他事务更新的值丢失，所以是新增一个版本（如果其他事务未提交呢？显然等待锁释放）<br>可重复读核心：一致性读，即事务开启后创建的视图view<br>读提交和可重复读区别：每个语句执行时开启视图","like_count":0},{"had_liked":false,"id":281475,"user_name":"小然","can_delete":false,"product_type":"c1","uid":2359008,"ip_address":"","ucode":"D0D85AAA1246BC","user_header":"https://static001.geekbang.org/account/avatar/00/23/fe/e0/5b0db40e.jpg","comment_is_top":false,"comment_ctime":1614759701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614759701","product_id":100020801,"comment_content":"这个章节，每次看都有新收获。很棒！","like_count":0},{"had_liked":false,"id":278915,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1613460713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1613460713","product_id":100020801,"comment_content":"要理解事务, 需要了解 版本链和 ReadView , 文中没有提到 隐藏列和ReadView 的数据结构, 导致一些不明确的地方, 看了下面的数据结构就可以明白<br>1. 聚簇索引记录中包含两个 隐藏列<br>    1. `trx_id`  当一个事务对某条聚簇索引记录进行修改时, 都会把该事务的事务id 赋值给它<br>    2. `roll_pointer` 记录了旧版本的 `undo log` 指针, 可以找到该记录修改前的信息, 一般只会记录一些索引列, 以及被更新的列的信息<br>2. 版本链<br>    1. 其实就是 `undo log` 链<br>3. ReadView 包含以下内容<br>    1. `m_ids` 生成 ReadView 时, 当前系统中活跃的读写事务的事务id列表<br>    2. `min_trx_id`  生成 ReadView 时, 当前系统中活跃的读写事务中 **最小的事务id**<br>    3. `max_trx_id`  生成 ReadView 时, 系统应该分配的 **下一个事务的事务 id**<br>    4. `creator_trx_id` 生成 ReadView 的事务的 事务id<br>4. 最后利用 ReadView 和 `undo log` 就可以找到对应版本的数据","like_count":0},{"had_liked":false,"id":276313,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1611885000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611885000","product_id":100020801,"comment_content":"二刷第5天：温故知新：1. begin&#47;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。<br>2. 更新的时候或者read in share mode，select for update的时候也是当前读。<br>3.课后练习题，看了答案以后。加深了，trx_row_id view的理解，明天需要再复习下这个知识点。","like_count":0},{"had_liked":false,"id":275179,"user_name":"玩","can_delete":false,"product_type":"c1","uid":1308330,"ip_address":"","ucode":"8B77B32EF1B44B","user_header":"https://static001.geekbang.org/account/avatar/00/13/f6/aa/860d584e.jpg","comment_is_top":false,"comment_ctime":1611372566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611372566","product_id":100020801,"comment_content":"老师，关于行数据有多个版本这里我有些困惑，旧版本里的值仅仅包含旧的事务id吗？如果旧版本里也有值的话，按道理是可以不用借助 undo log 就可以从最新值往前推算出旧值的吧（文中你说新的版本里，可以获取旧的事务id）","like_count":0},{"had_liked":false,"id":273437,"user_name":"wzp_hd","can_delete":false,"product_type":"c1","uid":2365448,"ip_address":"","ucode":"4FE001E4B6B581","user_header":"https://static001.geekbang.org/account/avatar/00/24/18/08/f7bb7c21.jpg","comment_is_top":false,"comment_ctime":1610595197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610595197","product_id":100020801,"comment_content":"“InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。”<br><br><br>有一个问题没有想明白，如果事务启动的瞬间，没有正在活跃的事务，数组是不是就是空的。那这种情况低水位怎么计算呢？","like_count":0},{"had_liked":false,"id":273378,"user_name":"致良知","can_delete":false,"product_type":"c1","uid":2113915,"ip_address":"","ucode":"73C722E31B726A","user_header":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","comment_is_top":false,"comment_ctime":1610576665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610576665","product_id":100020801,"comment_content":"老师你好 如果两个事务AB 都使用select for update，相同的行 都需要进行更新和插入 会爆出deadlock 这是怎么回事呢？","like_count":0},{"had_liked":false,"id":272450,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1610092746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610092746","product_id":100020801,"comment_content":"始终没有想明白，数据版本可见性规则的 3(b），是什么情况下出现的？求解答。。。","like_count":0},{"had_liked":false,"id":272431,"user_name":"刘剑","can_delete":false,"product_type":"c1","uid":2399421,"ip_address":"","ucode":"7B2CFD70541ADB","user_header":"https://static001.geekbang.org/account/avatar/00/24/9c/bd/6da43bdb.jpg","comment_is_top":false,"comment_ctime":1610088837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610088837","product_id":100020801,"comment_content":"老师，我有个问题哈，上期的问题，如果表不是用自增ID当主键，第二种方式不是有可能造成删除的不是一开始想删除的前10000行吗","like_count":0},{"had_liked":false,"id":272265,"user_name":"zjm1314","can_delete":false,"product_type":"c1","uid":2351720,"ip_address":"","ucode":"63B0EAB7045054","user_header":"https://static001.geekbang.org/account/avatar/00/23/e2/68/ce547a12.jpg","comment_is_top":false,"comment_ctime":1610010796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610010796","product_id":100020801,"comment_content":"update s=1, version=version+1 where version=1;<br><br>update s=2, version=version+1 where version=1;<br><br><br>第一个update 的时候锁住了这行，所以第二个update被阻塞了，那这个阻塞是阻塞了第二个update的当前读呢，还是阻塞了什么<br>如果是当前读被阻塞了，那么第一个update提交后，第二个udpate是又进行了一次当前读，查不到数据了所以affected_rows=0","like_count":0},{"had_liked":false,"id":271523,"user_name":"NullPointerException","can_delete":false,"product_type":"c1","uid":1672137,"ip_address":"","ucode":"CE823125E9985F","user_header":"https://static001.geekbang.org/account/avatar/00/19/83/c9/0b25d9eb.jpg","comment_is_top":false,"comment_ctime":1609680546,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609680546","product_id":100020801,"comment_content":"事物启动时创建一个数组，就不会再变了吗？如果当前启动时一个事物没有提交，但当前事务运行过程中另一个事务提交了，数组不变的话岂不是读不到提交事物的更新了？？","like_count":0},{"had_liked":false,"id":271139,"user_name":"Edon du","can_delete":false,"product_type":"c1","uid":1074742,"ip_address":"","ucode":"1648624751AAE9","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/36/b4a4e6fb.jpg","comment_is_top":false,"comment_ctime":1609409215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609409215","product_id":100020801,"comment_content":"今天是2020年的最后一天了，愿各位小伙伴们能够以梦为马，不负韶华。","like_count":0},{"had_liked":false,"id":270505,"user_name":"啊良梓是我","can_delete":false,"product_type":"c1","uid":1655117,"ip_address":"","ucode":"E42FC1A60D331C","user_header":"https://static001.geekbang.org/account/avatar/00/19/41/4d/f6d6d13a.jpg","comment_is_top":false,"comment_ctime":1609147417,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1609147417","product_id":100020801,"comment_content":"老师我有个问题，就是 假如有 事务3 和事务4，数字代表事务，然后大概的执行顺序是<br>默认表和值<br>id    name<br>1      default<br>--------------------<br>  3                                                                                             4<br>begin                                                                                      begin<br>update x set name = &#39;3update&#39; where id = 1              <br>                                                                              A:  select name from x where id = 1<br>commit                                                                    <br>                                                                                commit<br><br>我的问题就是按照分析的话，A应该是拿到 default值的，但是我这边看到一些资料，看到就是用行创建版本号 和 删除版本号来进行分析的话，<br>                                                  创建版本号     删除版本号<br>                                                         0                   null<br>事务3 update 之后                             0                     3<br>                                        insert         3                  null <br>那么事务4应该是可以拿到最新的 ‘3update’  ；我觉得我是在哪里理解错了的，就是这个插入创建版本号和删除版本号的时机问题，这里我是有点疑惑，是不是要commit之后才能插入版本号的？如果这样子理解的话，还是拿到defaul值的？<br>那commit 之后再插入的话，假如在A之后再加一个select 按照版本号的分析，拿到那个值？<br>难搞哦","like_count":0},{"had_liked":false,"id":270179,"user_name":"Geek8819","can_delete":false,"product_type":"c1","uid":2028950,"ip_address":"","ucode":"521AEDAB2EED81","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/96/e963b41b.jpg","comment_is_top":false,"comment_ctime":1608971412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608971412","product_id":100020801,"comment_content":"个人不理解mysql为什么这样设计 同样是快照隔离，其他数据库（比如postgres）都会自动检测丢失更新 难道这样不是更合理吗","like_count":0},{"had_liked":false,"id":270152,"user_name":"@","can_delete":false,"product_type":"c1","uid":2069664,"ip_address":"","ucode":"BD87484261ED85","user_header":"https://static001.geekbang.org/account/avatar/00/1f/94/a0/84342a0d.jpg","comment_is_top":false,"comment_ctime":1608957621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608957621","product_id":100020801,"comment_content":"老师 MVCC实现的RR隔离级别下，如果一个事务快照读的数据（行记录）被另一个事务在此记录上加锁了，那第一个事务的快照读是会被阻塞还是查看该行id不受锁影响？","like_count":0},{"had_liked":false,"id":269992,"user_name":"啊良梓是我","can_delete":false,"product_type":"c1","uid":1655117,"ip_address":"","ucode":"E42FC1A60D331C","user_header":"https://static001.geekbang.org/account/avatar/00/19/41/4d/f6d6d13a.jpg","comment_is_top":false,"comment_ctime":1608869660,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1608869660","product_id":100020801,"comment_content":"按照下一节的说法， 就是a事务的创建时间节点的瞬间，所创建的视图 数组，包含的a事务当前创建时间节点还没提交的所有事务。那这个数组，感觉像是不递增的了？<br>会存在这种情况吗 [99,100,89,98,101,102] ?那这个边界怎么界定呢假如a事务的transaction id 是 102 ？ 那最小的是89 还是99？","like_count":0},{"had_liked":false,"id":269061,"user_name":"David.cui","can_delete":false,"product_type":"c1","uid":1302228,"ip_address":"","ucode":"AB46F310403612","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/d4/b83c4185.jpg","comment_is_top":false,"comment_ctime":1608514143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608514143","product_id":100020801,"comment_content":"这时，如果我告诉你事务 B 查到的 k 的值是 3，而事务 A 查到的 k 的值是 1，你是不是感觉有点晕呢？~~~~老师，我理解事务C自动提交id=1 的数据行，事务C结束后K=2了。等到事务A查询的时候，我理解Id=1的应该查询到K=2才对啊。不知道这样理解是否正确","like_count":0},{"had_liked":false,"id":268799,"user_name":"梦江","can_delete":false,"product_type":"c1","uid":2059155,"ip_address":"","ucode":"B5FD2835863460","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","comment_is_top":false,"comment_ctime":1608353956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608353956","product_id":100020801,"comment_content":"老师，判断可见性的的<br>1. 如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数<br>据是可见的<br>为什么还可能是当前事务自己生成？","like_count":0},{"had_liked":false,"id":268357,"user_name":"TT","can_delete":false,"product_type":"c1","uid":1466771,"ip_address":"","ucode":"2D8CE3E45DA7A4","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/93/3191eafa.jpg","comment_is_top":false,"comment_ctime":1608168485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608168485","product_id":100020801,"comment_content":"### 事务的启动时机是什么时候<br>* 不同的启动方式，事务的启动时机不同；<br>* begin&#47;start transaction 都可以开启一个事务，但这并不是事务的起点，一直到执行第一个操作 InnoDB 表的语句，事务才真正开始；<br>* 如果想立马开启事务，可以使用 start transaction with consistent snapshot<br><br>### 视图的创建时机<br>* 通过begin&#47;start transaction启动事务，一致性视图在第一个读快照语句时生成；<br>* 通过tart transaction with consistent snapshot启动的事务，视图立即被创建<br><br>### mysql里两种视图的概念<br>* 一个是 view，它是通过查询语句定义的虚拟表，查询方法和表一样<br>* 一个是InnoDB实现MVCC时用到的“一致性读”视图，用于支持 RC 和 RR<br><br>### InnoDB是如何秒级创建快照的<br>* 严格来说不是快照，实质上是保存了数据的多个版本，同时保存了各个版本之间的关系（undo log），由新的版本可以推算得出旧版本；<br>* 具体表现为数据表中的每行记录都可能存在多个版本，每个版本都对应着一个 transaction id，记为 row trx_id，这个 transaction id 是系统为每个事务分配的唯一id，它按照事务启动的顺序严格递增<br><br>### 快照在mvcc里是如何工作的<br>* 事务启动的时候会被分配一个 trx_id，当该事务获取某行数据时，会对比这行数据的当前trx_id，<br>    * 发现比自己大，那说明这个是被自己之后的事务更新的数据，不认，需要继续查找上一个版本；<br>    * 如果和自己的 trx_id 一样，说明是自己所做的更改，要认<br>    * 如果比自己的 trx_id 小，说明是在自己启动以前这个数据就被更新掉了，也要认；<br><br>### 一致性视图里更新逻辑是怎样的<br>更新数据都是**先读后写**，并且这个读都是**当前读**<br><br>### 读提交和可重复复的逻辑区别是什么<br><br>* 可重复读隔离级别下，事务开启以后创建一个一致性读视图，整个事务过过程中读查询都使用这个视图<br>* 读提交隔离级别下，每个语句执行前都会重新计算出一个视图","like_count":0},{"had_liked":false,"id":268034,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1608035549,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608035549","product_id":100020801,"comment_content":"信息量大 都是干货","like_count":0},{"had_liked":false,"id":267677,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1607869176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607869176","product_id":100020801,"comment_content":"😂过了好长时间在看这篇文章居然看懂了，哈哈","like_count":0},{"had_liked":false,"id":267623,"user_name":"Geek_0de4be","can_delete":false,"product_type":"c1","uid":1702968,"ip_address":"","ucode":"A9CD809FE0C562","user_header":"https://static001.geekbang.org/account/avatar/00/19/fc/38/28c3140a.jpg","comment_is_top":false,"comment_ctime":1607849463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607849463","product_id":100020801,"comment_content":"太强了，各位，结合作者跟留言区的大佬，整个流程把握到脉络了，知识太硬了，还得多啃几遍。","like_count":0},{"had_liked":false,"id":267145,"user_name":"起风了","can_delete":false,"product_type":"c1","uid":2065485,"ip_address":"","ucode":"797156126BF3CF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/84/4d/ea14d7fe.jpg","comment_is_top":false,"comment_ctime":1607608023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607608023","product_id":100020801,"comment_content":"每次读完文章，我觉得我大概懂了，但是一看留言。我懂了是假的！","like_count":0},{"had_liked":false,"id":266841,"user_name":"依山观澜","can_delete":false,"product_type":"c1","uid":1304870,"ip_address":"","ucode":"F93BDCAB56B9B7","user_header":"https://static001.geekbang.org/account/avatar/00/13/e9/26/ee614fd4.jpg","comment_is_top":false,"comment_ctime":1607502572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607502572","product_id":100020801,"comment_content":"希望老师回答一下我的问题，我在同一个事务中操作这些语句，去掉第一个查询语句，返回的值和加上第一条查询语句返回的值，是不一样的<br>begin;<br>update t set c = 0 where id = c;<br>select * from t ;<br>这样执行返回的值是 c的值依次是0 0 0 0 ,是符合预期的 因为可以看见自己的改变<br>第二种情况<br>begin;<br>select * from t ;<br>update t set c = 0 where id = c;<br>select * from t ;<br>这样的返回值是c 是 1,2,3,4 读不到自己的改变，希望有人解惑<br>","like_count":0},{"had_liked":false,"id":266839,"user_name":"依山观澜","can_delete":false,"product_type":"c1","uid":1304870,"ip_address":"","ucode":"F93BDCAB56B9B7","user_header":"https://static001.geekbang.org/account/avatar/00/13/e9/26/ee614fd4.jpg","comment_is_top":false,"comment_ctime":1607502359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607502359","product_id":100020801,"comment_content":"希望老师回答一下我的问题，我不知道是我操作出错，还是我没理解到问题，最后留下的问题，我在同一个事务中操作","like_count":0},{"had_liked":false,"id":264617,"user_name":"Yc","can_delete":false,"product_type":"c1","uid":1661365,"ip_address":"","ucode":"407776D104D6F8","user_header":"https://static001.geekbang.org/account/avatar/00/19/59/b5/26d3c637.jpg","comment_is_top":false,"comment_ctime":1606547831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606547831","product_id":100020801,"comment_content":"这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：<br>1：如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；<br><br>老师请问下对于第一种的  或者是当前事务自己生成的，我理解是应该落在黄色区域吧？<br>当前事务自己生成的一个数据版本，这个版本记录为自己的事务ID，按道理应该是落到黄色区域，难道事务未提交自己修改的数据版本还没有记录trx_id吗，或者说针对于本事务的修改可见的逻辑是单独的","like_count":0},{"had_liked":false,"id":263989,"user_name":"Geek_ac56bc","can_delete":false,"product_type":"c1","uid":2337994,"ip_address":"","ucode":"61D53DD002F0CB","user_header":"","comment_is_top":false,"comment_ctime":1606308366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606308366","product_id":100020801,"comment_content":"“所以，如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3  ”  这里是否有误，不应该是k=2吗，读取的时候，事务B还没提交呢。","like_count":0},{"had_liked":false,"id":263703,"user_name":"Louis","can_delete":false,"product_type":"c1","uid":1158349,"ip_address":"","ucode":"BC667839F17937","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/cd/fda6374f.jpg","comment_is_top":false,"comment_ctime":1606223653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606223653","product_id":100020801,"comment_content":"看了第三遍这篇文章，终于彻底弄懂了，拨开云雾开清天的感觉真的太棒了。","like_count":0},{"had_liked":false,"id":262584,"user_name":"Wangyf","can_delete":false,"product_type":"c1","uid":2226219,"ip_address":"","ucode":"349068A07CB1D4","user_header":"https://static001.geekbang.org/account/avatar/00/21/f8/2b/339660f1.jpg","comment_is_top":false,"comment_ctime":1605773378,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605773378","product_id":100020801,"comment_content":"我从别的网站上以及一本讲 MySQL 的书，红白相间有一只灰色的鸟的书上看到的 MVCC。我说说我看到的。它会在表的后面添加两列内容，第一列是保存时间（create_id版本号），第二列是删除时间（delete_id版本号）。插入一条记录，保存时间里的内容是插入操作的事务的 ID，删除时间为空，还没有删除。<br>然后之后有另一个事务来删除某一行的记录，删除时会把该事务的 ID 填写到“删除时间”的列中。<br>当有第三个事务来执行 select 语句时，在 “select * from t” 的后面会添加两个条件，create_id &lt;= 事务id and delete_id &gt; 事务id。第一个条件保证读取的数据都是之前已经插入好的，或者是自己插进去的数据。后者保证读到的数据是在自己之前没被删除的数据。<br>老师这样理解对吗？","like_count":0},{"had_liked":false,"id":261825,"user_name":"黑白颠倒","can_delete":false,"product_type":"c1","uid":2167240,"ip_address":"","ucode":"E79D2540C3F668","user_header":"https://static001.geekbang.org/account/avatar/00/21/11/c8/889846a7.jpg","comment_is_top":false,"comment_ctime":1605532354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605532354","product_id":100020801,"comment_content":"你好，我不太理解图一的执行时间顺序，是A先执行然后B再开始执行C最后开始执行吗？","like_count":0},{"had_liked":false,"id":261371,"user_name":"怕什么，抱紧我","can_delete":false,"product_type":"c1","uid":1318633,"ip_address":"","ucode":"CBCEA76E9EF33B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_is_top":false,"comment_ctime":1605296160,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605296160","product_id":100020801,"comment_content":"&quot;如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。&quot;<br><br>当前事务开启后,另一事务的修改对当前事务是不可见的,这里为什么又变成对当前事务可见了！~有谁知道的解释解释？","like_count":0},{"had_liked":false,"id":261311,"user_name":"@","can_delete":false,"product_type":"c1","uid":2069664,"ip_address":"","ucode":"BD87484261ED85","user_header":"https://static001.geekbang.org/account/avatar/00/1f/94/a0/84342a0d.jpg","comment_is_top":false,"comment_ctime":1605266317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605266317","product_id":100020801,"comment_content":"老师看完后，有个疑惑点，按照文章所说，实际上事务隔离性级别中的读提交实际上实现的话仅仅利用MVCC就可以做到，（而开始这些级别的定义数据库系统说的是锁释放时机的不同，读提交相当于在事务commit时释放读锁，从而达到这一点隔离性）但是我觉得MVCC无需锁机制也能实现读提交级别隔离性，不知道我说的是否有问题？希望老师解惑","like_count":0},{"had_liked":false,"id":259825,"user_name":"happy","can_delete":false,"product_type":"c1","uid":2225487,"ip_address":"","ucode":"356ECB08C79998","user_header":"https://static001.geekbang.org/account/avatar/00/21/f5/4f/4deaab37.jpg","comment_is_top":false,"comment_ctime":1604847063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604847063","product_id":100020801,"comment_content":"看不懂啊 怎么救救我","like_count":0},{"had_liked":false,"id":259157,"user_name":"陈小渣👻","can_delete":false,"product_type":"c1","uid":1374445,"ip_address":"","ucode":"6B968B06C76C63","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/ed/60fb8fba.jpg","comment_is_top":false,"comment_ctime":1604642973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604642973","product_id":100020801,"comment_content":"总结  未提交的版本，不可见，对于已经提交的版本判断这个提交是在视图之前还是在视图之后，之前则可见，之后则不可见（在我启动之后才提交的，不认）","like_count":0},{"had_liked":false,"id":259037,"user_name":"黯风","can_delete":false,"product_type":"c1","uid":1484392,"ip_address":"","ucode":"6F663CCB13979D","user_header":"https://static001.geekbang.org/account/avatar/00/16/a6/68/199d4a9b.jpg","comment_is_top":false,"comment_ctime":1604621799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604621799","product_id":100020801,"comment_content":"老师，快照会为全库每行数据更新row trx_id吗？这个操作为何能达到秒级？","like_count":0},{"had_liked":false,"id":258523,"user_name":"卖火柴的托儿索","can_delete":false,"product_type":"c1","uid":1451295,"ip_address":"","ucode":"A9C7412E75DA82","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/1f/8e304ec0.jpg","comment_is_top":false,"comment_ctime":1604473308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604473308","product_id":100020801,"comment_content":"慢慢的开始看不见车尾灯了，有没有和我一样的？","like_count":0},{"had_liked":false,"id":258311,"user_name":"龙晓","can_delete":false,"product_type":"c1","uid":1043325,"ip_address":"","ucode":"FAF34F1C65D103","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/c9xpiakQ3OC1AlfCeW03lLnnb7mj5v35Hib8YDs66zpnVib2n2qFichFmFp2Ec4QDPR0dKh38MkBBLyD3bE4NiaanZQ/132","comment_is_top":false,"comment_ctime":1604380039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604380039","product_id":100020801,"comment_content":"老师您好！已经过去很长时间了，我不知道您还会不会看到这条留言，但是我很期待。<br>我在高性能mysql第三版中看到Innodb的MVCC实现是通过在每行记录后面保存两个隐藏的列来实现的，这两个列，一个保存了行的创建时间，一个保存了行的过期时间(或删除时间)。<br>文中提到update的实现是这样的：Innodb会插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。<br>期间没有提到undolog，我不知道作者是不是有意隐去undolog，只说了实现的大致原理。<br>我的问题如下：<br>1、update操作时，是否新增了物理行？<br>2、保存的过期行是在undolog还是在原表中？<br>3、如果原物理行和新增行同时存在，主键索引是否冲突，怎么处理呢？<br>4、如果原表中新增了行，又保留了原行，那为什么还需要undolog呢，已经实现MVCC了啊","like_count":0},{"had_liked":false,"id":256986,"user_name":"Geek_536b54","can_delete":false,"product_type":"c1","uid":1887586,"ip_address":"","ucode":"F62BC7781D9212","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhicDSmL4vicPADhxxzOzukMar8nV5Tc3ic2dz4FQIxMX3WmX5a2V3sdD121eWpvfQI8NXIkkDZoDFw/132","comment_is_top":false,"comment_ctime":1603805805,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603805805","product_id":100020801,"comment_content":"老师说，一致性视图是在执行第一个快照&#39;读语句&#39;时创建的 <br>然而老师又说过事务开始就会向 InnoDB 的事务系统申请事务 ID，判断事物开启条件的一种是使用begin并且执行第一个&#39;操作 &#39;InnoDB 表的语句，所以我第一句只执行非select的dml语句就会生成事务id，但是并不会生成一致性视图，在我要执行select的时候 其它事物可能已经创建。所以对于视图数组就会出现比当前事务id还大并且没有提交的事物，同理也会出现比当前事务还小且没有提交的事物。所以假如当前事务id为88 ，活跃数组就可能有[72,79,88,90,91] 不连续的原因也知道吧，就是因为在生成一致性视图的时候中间短事务早就提交了<br>对于可见性如果读取数据中事物id在当前活跃数组有，说明是我创建视图的时候还在活跃的事务我是不能看的。如果不在并且在数组范围内说明是我在开启事务时到创建视图期间已经提交的事务，我是可以查看的。如果小于活跃数组的最小值， 这个最小值也可以叫做已经提交事务的最大值,（也不绝对，其实数组最小值就是代表小于它的事务都是在我创建一致性视图的时候已经提交了）所以可见。大于数组最大值 就是（我创建一致性视图时候当前已经分配的事务ID的最大值+1）那么就不可见","like_count":0,"discussions":[{"author":{"id":1887586,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhicDSmL4vicPADhxxzOzukMar8nV5Tc3ic2dz4FQIxMX3WmX5a2V3sdD121eWpvfQI8NXIkkDZoDFw/132","nickname":"Geek_536b54","note":"","ucode":"F62BC7781D9212","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318803,"discussion_content":"欢迎指正，也希望老师回答下是否准确，我是折腾两天才搞明白 5555~~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603852818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256576,"user_name":"祥子先生","can_delete":false,"product_type":"c1","uid":1960493,"ip_address":"","ucode":"4D3F3301880933","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ea/2d/2f6f585b.jpg","comment_is_top":false,"comment_ctime":1603682271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603682271","product_id":100020801,"comment_content":"当开启事务时，需要保存活跃事务的数组（A），然后获取高水位（B）。这个高水位是不是就当前事务的ID？","like_count":0},{"had_liked":false,"id":256155,"user_name":"猫王者","can_delete":false,"product_type":"c1","uid":1248924,"ip_address":"","ucode":"224826F4BA8443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/9c/cb9da823.jpg","comment_is_top":false,"comment_ctime":1603539375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603539375","product_id":100020801,"comment_content":"明白了， 低水位 数组内， 高水位是创建视图那一刻的系统内最大事务id+1","like_count":0},{"had_liked":false,"id":256143,"user_name":"猫王者","can_delete":false,"product_type":"c1","uid":1248924,"ip_address":"","ucode":"224826F4BA8443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/9c/cb9da823.jpg","comment_is_top":false,"comment_ctime":1603536884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603536884","product_id":100020801,"comment_content":"最后已提交读的例子，<br>A 在读的时候生成活跃id数组是[101],也就是只有B事务处在活跃状态，此时读到的101状态下的记录(1,3)判定为不可见，往上找到102版本，也就是C事务提交的版本，但是C事务大于101，不是处于红色区域了吗，按照上面的逻辑不是应该对A不可见吗<br>还是说高水位的判断规则只是适用可重复读？（我看好多文章对这个高水位的判定都没有指明是不是只适用于可重复读）","like_count":0},{"had_liked":false,"id":253721,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1111805,"ip_address":"","ucode":"F73CF74433168D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/fd/2c619dde.jpg","comment_is_top":false,"comment_ctime":1602843357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602843357","product_id":100020801,"comment_content":"根据版本号以及Undo Logs计算出他需要的版本对应的数据<br>如何select * from t where c &gt; 2<br>这种语句如果包含了很多历史版本数据，都要通过undolog计算字段c对应版本的值，mysql怎么保证查询性能的","like_count":0},{"had_liked":false,"id":253486,"user_name":"大眼睛charlyne","can_delete":false,"product_type":"c1","uid":1200597,"ip_address":"","ucode":"74BC5988BA2453","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/d5/c0a4ec9f.jpg","comment_is_top":false,"comment_ctime":1602751093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602751093","product_id":100020801,"comment_content":"RR也是有幻觉的","like_count":0},{"had_liked":false,"id":253110,"user_name":"一生平安","can_delete":false,"product_type":"c1","uid":1518657,"ip_address":"","ucode":"D90D2B9182539D","user_header":"https://static001.geekbang.org/account/avatar/00/17/2c/41/8aed852f.jpg","comment_is_top":false,"comment_ctime":1602601306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602601306","product_id":100020801,"comment_content":"每看一篇都很享受，感谢作者的付出！","like_count":0},{"had_liked":false,"id":250649,"user_name":"小组长","can_delete":false,"product_type":"c1","uid":1168855,"ip_address":"","ucode":"43DF0A444DC2B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/d5/d7/cb1ea1b8.jpg","comment_is_top":false,"comment_ctime":1601185578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601185578","product_id":100020801,"comment_content":"老师你好，可重复读是在一致性视图找低水位的前一个数据版本，为什么要构造数组，直接记录最低水位不久行了吗？","like_count":0},{"had_liked":false,"id":249339,"user_name":"fusion","can_delete":false,"product_type":"c1","uid":1388534,"ip_address":"","ucode":"83D68543435122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoMGQgj0b7PWkqB2dL2hejUrvkQA5NNHw4EibMu23XhLnHVR9vrK9jicG5EfG9BzHVyW4dY5czuc9iaw/132","comment_is_top":false,"comment_ctime":1600600213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600600213","product_id":100020801,"comment_content":"我使用GRANT INSERT, UPDATE, DELETE, CREATE, INDEX ON *.* TO &#39;test&#39;@&#39;%&#39; 给test用户授权，可以实现test用户新建的库不用特意授权就可以在新库上建表、建索引、增删改查数据，但是同事test用户也能操作其他用户的库表了，到底要如何给test用户授权，才能实现test可以新建库，在新库上进行所有操作、同时能删除自己新建的库，而不能操作其他用户的库表呢？","like_count":0},{"had_liked":false,"id":249338,"user_name":"fusion","can_delete":false,"product_type":"c1","uid":1388534,"ip_address":"","ucode":"83D68543435122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoMGQgj0b7PWkqB2dL2hejUrvkQA5NNHw4EibMu23XhLnHVR9vrK9jicG5EfG9BzHVyW4dY5czuc9iaw/132","comment_is_top":false,"comment_ctime":1600599931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600599931","product_id":100020801,"comment_content":"老师，我在mysql想建一个用户test，平时开发使用test用户不用root。<br>用test用户可以创建数据库，在新库上可以做所有操作，也可以删除自己建的库，如何给test用户授权，不用每次建库后，用root给test授权新库所有权限。","like_count":0},{"had_liked":false,"id":249131,"user_name":"Geek8819","can_delete":false,"product_type":"c1","uid":2028950,"ip_address":"","ucode":"521AEDAB2EED81","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/96/e963b41b.jpg","comment_is_top":false,"comment_ctime":1600442937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600442937","product_id":100020801,"comment_content":"“每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id” 林老师想问一下那如果一个事物对同一条数据修改多次，undo log如何记录？","like_count":0},{"had_liked":false,"id":248931,"user_name":"答案在风中","can_delete":false,"product_type":"c1","uid":1009548,"ip_address":"","ucode":"2CDD5A15D37121","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/8c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1600367646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600367646","product_id":100020801,"comment_content":"“当前读”若读到的数据最终被回滚那就产生了脏读，这是不可接受的，所以必须确保“当前读”读到的数据是最终会被提交的数据（此提交是发生在当前视图创建之后）。那么怎么确保“当前读“的数据最终会被提交呢？这里引入了“锁”机制，将对数据的读写变为了串行话，将当前视图下对数据的当前读阻塞至能够确认数据的当前变更被提交（即C的事务被提交）<br>","like_count":0},{"had_liked":false,"id":248466,"user_name":"ltknow","can_delete":false,"product_type":"c1","uid":2009398,"ip_address":"","ucode":"8C1F0F36D374E7","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a9/36/e49b9ccb.jpg","comment_is_top":false,"comment_ctime":1600174035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600174035","product_id":100020801,"comment_content":"有点像java内存模型的happens-before原则","like_count":0},{"had_liked":false,"id":248314,"user_name":"Yong","can_delete":false,"product_type":"c1","uid":1912653,"ip_address":"","ucode":"0ADA75C5C68619","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL3OaibxsOia5ZET1iaBsPwDM6NS43lAUTdItqkwZ66fGaaXtjOQYL73IsvY0foscUZlkaZSQPPQNexA/132","comment_is_top":false,"comment_ctime":1600098726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600098726","product_id":100020801,"comment_content":"老师，图5事务B更新逻辑中，如果事务B在set k=k+1之前有一次读，那么此时k=1,而在set k=k+1之后的get k =3,是否造成了“不可重复读”？","like_count":0},{"had_liked":false,"id":248209,"user_name":"Geek_b2933e","can_delete":false,"product_type":"c1","uid":1370020,"ip_address":"","ucode":"B9398B99B9914D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKUmQ9Vu1JmWw1ZMIZvN6QibLuSVibiaPQrO5TzCOYNfu4T74vMvXJk12J7C0jZGYhUJWET0h0AG0Rw/132","comment_is_top":false,"comment_ctime":1600064990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600064990","product_id":100020801,"comment_content":"读提交 与 可重复读的区别：可重复读只有在事务开始的时候创建一个一致性视图，之后的读操作就延用这个视图。而读提交是事务中的每次操作都会更新这个一致性视图。<br><br>一致性读、当前读、行锁：一致性读就是只能读视图数组创建之前的数据。当前读就是先读后写，需要读到最新的数据。行锁是只要加锁就需要等待。","like_count":0},{"had_liked":false,"id":247304,"user_name":"Geek_531c87","can_delete":false,"product_type":"c1","uid":2169855,"ip_address":"","ucode":"8BB7D73B859E9F","user_header":"","comment_is_top":false,"comment_ctime":1599654049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599654049","product_id":100020801,"comment_content":"老师还有一个问题，落在绿色部分，要么是之前事务提交的，要么就是自身提交的。怎么可能是自身提交的呢？","like_count":0},{"had_liked":false,"id":247300,"user_name":"Geek_531c87","can_delete":false,"product_type":"c1","uid":2169855,"ip_address":"","ucode":"8BB7D73B859E9F","user_header":"","comment_is_top":false,"comment_ctime":1599652852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599652852","product_id":100020801,"comment_content":"老师您您好，高低水位没有看明白。我是这么理解的：一个事务维护一个数组，存放当前所有活动的事务。此时低水位为最小ID号的事务。但是高水位呢？是不是一定总是自身？","like_count":0},{"had_liked":false,"id":246234,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1599215351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599215351","product_id":100020801,"comment_content":"所以InnoDB的隔离级别到底是用 锁（读锁写锁意向锁那些东西） 还是 MVCC实现的？","like_count":0},{"had_liked":false,"id":246000,"user_name":"崔经刚","can_delete":false,"product_type":"c1","uid":1827943,"ip_address":"","ucode":"207FDF850860C4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/P5lTnAkviacPGu5S5XJQGQdTpvkSjAVU9Nu2EYicIpMAjiaNP8aXDtfcIHicSnHw2fVIoqTWGGg48rZVzcficUlbgmw/132","comment_is_top":false,"comment_ctime":1599128484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599128484","product_id":100020801,"comment_content":"老师，关于图8，即使是在读提交隔离级别，由于事务B未提交，所以事务A是会被锁住的吧。因为三个事务操作的都是同一行数据。","like_count":0},{"had_liked":false,"id":245778,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1599049728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599049728","product_id":100020801,"comment_content":"先开启A事务，查询后id和c全相等。此时开启B事务，并且执行update t c=c+1 where c=id 然后commit B事务。此时A事务中再执行update c=0 where c=id。因为update是当前读，因此读到的结果中id已经不等于c了，从而没有一行匹配","like_count":0},{"had_liked":false,"id":244594,"user_name":"小明～","can_delete":false,"product_type":"c1","uid":2140562,"ip_address":"","ucode":"816F639452D2BF","user_header":"https://static001.geekbang.org/account/avatar/00/20/a9/92/d9ab26d2.jpg","comment_is_top":false,"comment_ctime":1598587070,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598587070","product_id":100020801,"comment_content":"思考题我在Mysql5.7的版本下，好像更新成功了？查看了事务隔离级别也是RR，也开启了自动提交事务。<br>","like_count":0},{"had_liked":false,"id":244389,"user_name":"小明～","can_delete":false,"product_type":"c1","uid":2140562,"ip_address":"","ucode":"816F639452D2BF","user_header":"https://static001.geekbang.org/account/avatar/00/20/a9/92/d9ab26d2.jpg","comment_is_top":false,"comment_ctime":1598499963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598499963","product_id":100020801,"comment_content":"start transaction with consistent SNAPSHOT是在RR级别下才有效的，RC级别下相当于begin transaction，可是RR级别下，事务不就是在启动的时候就开启了吗，也就是说start transaction with consistent SNAPSHOT 和 begin transaction是一样的，那么start transaction with consistent SNAPSHOT这个语句，不管是在RR,还是RC,都好像没有意义了？","like_count":0},{"had_liked":false,"id":242771,"user_name":"InfoQ_c52d919fc8a0","can_delete":false,"product_type":"c1","uid":2006890,"ip_address":"","ucode":"D8DDD4C9FC46AF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIhmCBvXm9Ht0qHn3RxwlfH2MAsCJZibDSdu98PQa405rPWmIc6DLz7zHJY1EhtlAeWwmvDJuWfvZw/132","comment_is_top":false,"comment_ctime":1597837105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597837105","product_id":100020801,"comment_content":"有个疑问：为什么说如果落在绿色部分，表示这个版本可能是是当前事务自己生成的？","like_count":0},{"had_liked":false,"id":242745,"user_name":"城北时公","can_delete":false,"product_type":"c1","uid":2034418,"ip_address":"","ucode":"4719AE65CB564D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKG6nZXNOaobCtd2XQbnoh0QcovEDn6MfqXxhC4niaAeK8BZ7a2l87Q4wDE00FNUXS9MeOyLrmZWAw/132","comment_is_top":false,"comment_ctime":1597829749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597829749","product_id":100020801,"comment_content":"老师，我对其中一个知识点有一点歧义，事务是在第一次操作InnoDB的时候才正式开启的，那么“操作InnoDB”包不包括select操作，还是只包括写操作呢？","like_count":0},{"had_liked":false,"id":241599,"user_name":"GavinShang","can_delete":false,"product_type":"c1","uid":1566023,"ip_address":"","ucode":"B7022CBCC3363D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL5m7EKg270xsdpRy1MbO2DANuZI22FQavrmCW7F5gJDznHUacdxMGIhmoxjH1ge5AXoJ1PzmuUIA/132","comment_is_top":false,"comment_ctime":1597367494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597367494","product_id":100020801,"comment_content":"如果落在黄色部分，那就包括两种情况<br>a.  若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br><br>老师上面是文中截取内容 ，不太理解，黄区是未提交事物区，那怎么还有落在了黄区但是事物已经提交的情况<br><br>盼复老师指点","like_count":0},{"had_liked":false,"id":240917,"user_name":"gerry pang","can_delete":false,"product_type":"c1","uid":1068169,"ip_address":"","ucode":"54BD1D8DE1DBBF","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/89/e698c0a9.jpg","comment_is_top":false,"comment_ctime":1597117004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597117004","product_id":100020801,"comment_content":"脏读、不可重复读、幻读区别：<br>脏读：<br>\t* 定义：一个事务可以读到另外一个事务中未提交的数据<br>\t* 条件：在读未提交隔级别出现<br>\t* 原因：事务之间没有隔离<br>\t* 解决：在实现 MVCC 时用到的一致性读视图( consistent read view)，一条语句执行期间，它的一致性视图是不会修改的<br><br>不可重复读：<br>\t* 定义：B事务读取了两次数据，在这两次的读取过程中A事务修改了数据，B事务的这两次读取出来的数据不一样。 B事务这种读取的结果，即为不可重复读（Nonrepeatable Read）<br>\t* 条件：在读未提交，读已提交隔离级别 <br>\t* 原因：每一个语句执行前都会重新算出一个新的视图<br>\t* 解决：MVCC +一致性读（consistent read）, 修改创建视图时机，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图<br><br>幻读：<br>\t* 定义：一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。幻读仅专指“新插入的行”。<br>\t* 条件：幻读在“当前读”下才会出现。<br>\t* 原因：行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”<br>\t* 解决：间隙锁 (Gap Lock)<br><br>老师不知道我这样理解有没有问题","like_count":0},{"had_liked":false,"id":239522,"user_name":"素还真","can_delete":false,"product_type":"c1","uid":1269156,"ip_address":"","ucode":"9ABA456355F7E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/5d/a4/2e4b6d33.jpg","comment_is_top":false,"comment_ctime":1596554021,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1596554021","product_id":100020801,"comment_content":"老师，学完您的课程，MySQL这块的水平 能到p7还是p8吗？","like_count":0,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297888,"discussion_content":"纸上得来终觉浅 觉知此事要躬行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597103251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1234998,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/36/badf4003.jpg","nickname":"卡洛梅特","note":"","ucode":"A9997083BF684A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":378771,"discussion_content":"说的没错\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623397072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297888,"ip_address":""},"score":378771,"extra":""}]}]},{"had_liked":false,"id":238389,"user_name":"暗夜泪心","can_delete":false,"product_type":"c1","uid":1138025,"ip_address":"","ucode":"57404D76FA1A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/5d/69/4601a427.jpg","comment_is_top":false,"comment_ctime":1596157799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596157799","product_id":100020801,"comment_content":"一致性视图是在执行第一个快照读语句时创建的。关于这个我有一个问题 。 <br>session1 <br>begin;<br>insert into t values(70,70,70);<br>       session2<br>       insert into t values(80,80,80);<br>select * from t;<br>这个查询能查询到session2的insert；是符合老师说的这个逻辑的。但是如果session1的insert不在事务里。为什么session1回滚的时候， 会把insert回滚那。","like_count":0},{"had_liked":false,"id":238128,"user_name":"神韵","can_delete":false,"product_type":"c1","uid":1665194,"ip_address":"","ucode":"0337AC63C9FBD1","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/aa/4b58cfd3.jpg","comment_is_top":false,"comment_ctime":1596075300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596075300","product_id":100020801,"comment_content":"作者你好！<br>问题：你文字的黄色部分写的是未提交的事务数组，这个我有点疑问，我认为是一个递增序列（包含未提交事务和已经提交事务的集合）。<br>我的解释：假设一个数据版本号落在黄色部分，也就是未提交的活跃事务（视图数组），但是为啥还会存在两种情况呢？<br>1、在视图数组中不可见；<br>2、不在视图数组中可见；<br>对于第二种情况是什么原因？落在黄色部分是未提交事务，就是落在视图数组中，怎么会不在视图数组种？黄色部分的所有数据版本号对于视图数组来说是创建之后才提交的，都是不可见。<br>只能说黄色部分是包括未提交和提交的事务，这个就不是视图数组了，这样才符合有两种情况吧？<br><br>我下面的例子（我把当前事务比做未提交和已提交事务集合，也就是你的黄色区域）<br>假设事务55在启动时记录一致性视图为[50，51，55] + 56，数据50就是低水位，56就是高水位。<br>假如此时的数据版本号为49-50-54<br>1、50&lt;54&lt;56，最新数据版本54落在当前事务=黄色区域-低水位和高水位之间，并且不在视图数组[50，51，55]中，可见，结束。","like_count":0},{"had_liked":false,"id":238116,"user_name":"神韵","can_delete":false,"product_type":"c1","uid":1665194,"ip_address":"","ucode":"0337AC63C9FBD1","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/aa/4b58cfd3.jpg","comment_is_top":false,"comment_ctime":1596073437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596073437","product_id":100020801,"comment_content":"对于这样一个场景：<br>       事务A开启事务查询未关闭，事务B删除了数据直接提交，事务C开启事务查询，事务A再次查询。<br>这个过程对应的数据版本号是怎么样的，或者说事务删除后，会记录删除时的数据版本号吗？","like_count":0},{"had_liked":false,"id":237832,"user_name":"巴萨巴萨！！！","can_delete":false,"product_type":"c1","uid":1556722,"ip_address":"","ucode":"C204AD44347738","user_header":"https://static001.geekbang.org/account/avatar/00/17/c0/f2/1b2ed786.jpg","comment_is_top":false,"comment_ctime":1595984223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595984223","product_id":100020801,"comment_content":"老师您好，还有一个疑问，文中有这么一段：这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；  但是后面又把当前事务的事务ID分到了事务数组中(黄色部分)，对于A事务的分析事务数组竟然是[99,100]，按照前面那句话100应该处于绿色部分啊，这有点矛盾啊。<br>      那么当前事务是处于事务数组中(黄色部分)，还是处于已提交事务中(绿色部分)呢？","like_count":0},{"had_liked":false,"id":237003,"user_name":"慧","can_delete":false,"product_type":"c1","uid":1658778,"ip_address":"","ucode":"E0FC2EF7AE33B2","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/9a/e71af464.jpg","comment_is_top":false,"comment_ctime":1595647946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595647946","product_id":100020801,"comment_content":"根据图3分析图8 在rc的隔离级别下，事务A在执行查询时创建的视图数组是什么样的呢？如果跟之前的理论一样除了创建视图时机不同，那么在查询时创建视图也既是创建数组，那么此时的数组是【99 100  101】101是落在黄色区域但是包含在数组中，不可见，102落在红色区域，不可见，这种分析的结论就跟事实不同了？希望老师指点一下。","like_count":0},{"had_liked":false,"id":236846,"user_name":"前方的灯有点弱","can_delete":false,"product_type":"c1","uid":2058455,"ip_address":"","ucode":"5CEDBCF3DDC991","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","comment_is_top":false,"comment_ctime":1595562126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595562126","product_id":100020801,"comment_content":"打卡：一个小程序员路过，对MySQL经常用，前几节都看懂了，但是这里，看了四遍才懂","like_count":0},{"had_liked":false,"id":236380,"user_name":"张旭","can_delete":false,"product_type":"c1","uid":1256155,"ip_address":"","ucode":"8029AFFC0AF9D4","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/db/86437192.jpg","comment_is_top":false,"comment_ctime":1595404231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595404231","product_id":100020801,"comment_content":"老师，普通的select查询会开启事务吗？  我在一个事务中新增一条数据但是并没有提交，然后立马用 select k from t where id=1 lock in share mode;  读取那条数据，为什么会卡住","like_count":0},{"had_liked":false,"id":234798,"user_name":"adrian_xia","can_delete":false,"product_type":"c1","uid":1101454,"ip_address":"","ucode":"957C329EAFD31C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/8e/204736bb.jpg","comment_is_top":false,"comment_ctime":1594798224,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594798224","product_id":100020801,"comment_content":"对于该问题，可以通过以下时序进行复现<br>1.  事务A开启<br>2. 事务A查询，此时由于select语句使用快照读方式，所以根据当前数据生成read view。<br>3. 事务B开启，并且修改事务A所查询的数据并提交，此时当前数据已经被修改。<br>4. 事务A做更新操作，由于update语句的先读后改的逻辑，使用当前读做查询，由于id=c的记录在数据库中并不存在，所以更新条数为0。<br>5. 事务A再次进行数据查询，依旧使用快照读的方式，导致查询结果依旧为事务A开启时查询的数据快照。<br><br>简单的解决方法，我们使用select for update对数据进行锁定，防止其他线程对要修改的数据进行修改，这样能够保证我们查询的结果，在修改的时候依旧存在。<br><br>","like_count":0},{"had_liked":false,"id":234654,"user_name":"zapup","can_delete":false,"product_type":"c1","uid":1397351,"ip_address":"","ucode":"388D6BB5D7B137","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/67/fcba0967.jpg","comment_is_top":false,"comment_ctime":1594741831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594741831","product_id":100020801,"comment_content":"啊啊啊！开头对 B 的情况为何是 3 完全无法理解，憋了好久好久到后面才看到是因为「当前读」，憋得吐血啦~","like_count":0},{"had_liked":false,"id":233938,"user_name":"小能","can_delete":false,"product_type":"c1","uid":2063014,"ip_address":"","ucode":"39EAAC8443B83C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7a/a6/e37fbbd8.jpg","comment_is_top":false,"comment_ctime":1594525153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594525153","product_id":100020801,"comment_content":"好烧脑，我喜欢","like_count":0},{"had_liked":false,"id":233801,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1594456601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594456601","product_id":100020801,"comment_content":"老师好，数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。其实每行数据有多个版本，并不是这条记录物理上存在多条，而是每个版本是通过undo log计算出来的。我的理解对吧。","like_count":0},{"had_liked":false,"id":233355,"user_name":"oldman","can_delete":false,"product_type":"c1","uid":1133711,"ip_address":"","ucode":"6BACE2832B4429","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","comment_is_top":false,"comment_ctime":1594296464,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594296464","product_id":100020801,"comment_content":"有个问题一直没搞明白。B事务读取到的值不应该是2的吗？B的执行update t set k=k+1 where id =1;这个的时候，虽然C的提交了，但是B的事务在开始的时间C的数据并没有提交，那这个时间B的数据读取到的k的值不应该是1的吗，然后加1，再查询不就是2了吗，最后查询结果不应该是2的吗？我自己操作了一下，确实是3，但是还是不是很理解，请老师给解答一下。","like_count":0,"discussions":[{"author":{"id":2161178,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/xPesDE8uvIIxGovBGOXibpAaBY4QmtkHfvwVjbsiaS2aHNULTewnDGVmicE5yfZn7HsrSMAcrG85rzs6F4icgVeE5Q/132","nickname":"大雄哆啦","note":"","ucode":"0A52764D54A6E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309142,"discussion_content":"c执行完就提交了，B执行update时c已提交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601197392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233291,"user_name":"Jiek","can_delete":false,"product_type":"c1","uid":2050537,"ip_address":"","ucode":"99D2E5B5BEE6D8","user_header":"https://static001.geekbang.org/account/avatar/00/1f/49/e9/b7d96f43.jpg","comment_is_top":false,"comment_ctime":1594280450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594280450","product_id":100020801,"comment_content":"老师您好，上文中提到当前读，除了 update set a+=1; 会先加读锁后加写锁 会当前读外，还提到&quot;select 语句如果加锁，也是当前读。&quot;;<br>我的问题：在事务级别 读未提交，读提交，可重复读中，select语句会默认加读锁吗？<br>我的推断：上文提到 需要 在select语句加上 for update 或者 lock in 这种指定的读写锁，才会用到当前读，而如果没有指定，则不会当前读。当前读需要加锁才会生效，所以推断 select语句是不会默认加读锁。而update语句则会自动加写锁。<br>（串行化隔离级别除外，因为每操作一条语句都会加读写锁阻塞等待）<br>我这么理解是合理的吗？","like_count":0},{"had_liked":false,"id":231363,"user_name":"TT","can_delete":false,"product_type":"c1","uid":1051844,"ip_address":"","ucode":"5E2A92D77601AB","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/c4/06bf4ad1.jpg","comment_is_top":false,"comment_ctime":1593657720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593657720","product_id":100020801,"comment_content":"老师请问, 这边文章的所有读操作, 都是在事务中读取的, 想问一下如果一个读操作没有开启事务, 流程是怎么样的?","like_count":0},{"had_liked":false,"id":231355,"user_name":"柯南爱上指针","can_delete":false,"product_type":"c1","uid":2034669,"ip_address":"","ucode":"5BF7E8AC28F9CF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0b/ed/4969d2f8.jpg","comment_is_top":false,"comment_ctime":1593656811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593656811","product_id":100020801,"comment_content":"老师您好，当事务的隔离级别是可以重复读的时候，<br>start transaction with consistent snapshot命令<br>和start transaction命令，当这两个命令执行的时候就都会一致性视图吗？？？我理解应该是这样子的","like_count":0},{"had_liked":false,"id":230289,"user_name":"KLOOOP","can_delete":false,"product_type":"c1","uid":1220981,"ip_address":"","ucode":"1BBF897219786F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erkQ49YqAySHOlynF8fC7Z65ic0icmWYKVJFicAiam4RFcyzZK5IqWI9KYaicaEqw3B24ibaKSicqTOdwDzQ/132","comment_is_top":false,"comment_ctime":1593337922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593337922","product_id":100020801,"comment_content":"&quot;所以，如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。&quot; 开始时读到这儿感觉很不解，返回k=3岂不就脏读了么。后来经过自己动手实践，当执行select * from t where id = 1 lock in share mode 或 select * from t where id = 1 for update 时会被阻塞，需要等事务2提交完事务，此时读出的值为3。","like_count":0},{"had_liked":false,"id":230281,"user_name":"Joshua 兆甲","can_delete":false,"product_type":"c1","uid":1244179,"ip_address":"","ucode":"473223055AC083","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/13/11f8062e.jpg","comment_is_top":false,"comment_ctime":1593335660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593335660","product_id":100020801,"comment_content":"不知道现在还能不能提问<br>事务如果嵌套，内层事务提交，外层怎样<br>内层事务回滚，外层怎样","like_count":0},{"had_liked":false,"id":228727,"user_name":"Rosan","can_delete":false,"product_type":"c1","uid":1275726,"ip_address":"","ucode":"D0B0EBB13E866B","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/4e/4d25019a.jpg","comment_is_top":false,"comment_ctime":1592795570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592795570","product_id":100020801,"comment_content":"图 3 数据版本可见性规则<br>我觉得这里的“未提交事务集合”描述不太准确<br>应该是“部分已提交+未提交事务集合”","like_count":0},{"had_liked":false,"id":228516,"user_name":"许凯","can_delete":false,"product_type":"c1","uid":1604645,"ip_address":"","ucode":"4F11AD41CB0244","user_header":"https://static001.geekbang.org/account/avatar/00/18/7c/25/70134099.jpg","comment_is_top":false,"comment_ctime":1592722980,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592722980","product_id":100020801,"comment_content":"判断逻辑就是：id小于高水位，且不在活跃的数组里面。低水位仅仅是上面这个逻辑的快捷版。","like_count":0},{"had_liked":false,"id":228292,"user_name":"biubiubiu","can_delete":false,"product_type":"c1","uid":1232984,"ip_address":"","ucode":"3310E95533D22B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/58/ac40120f.jpg","comment_is_top":false,"comment_ctime":1592635489,"is_pvip":false,"replies":[{"id":"84359","content":"事务提交后，他的trx_id就会从数组中拿走","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1592812410,"ip_address":"","comment_id":228292,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1592635489","product_id":100020801,"comment_content":"若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>老师这句话不明白，能解释一下吗","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498988,"discussion_content":"事务提交后，他的trx_id就会从数组中拿走","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592812410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336512,"discussion_content":"如果提交后从数组中删除，那这个read view就不是静态的了，但文章中说是静态的，这比较矛盾呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608612262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228136,"user_name":"ʘᴗʘ小白帽ʘᴗʘ","can_delete":false,"product_type":"c1","uid":1304567,"ip_address":"","ucode":"3519C67C3B1533","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/f7/8427bb06.jpg","comment_is_top":false,"comment_ctime":1592564952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592564952","product_id":100020801,"comment_content":"这篇文章看了好几遍，中间部分讲的不太好理解。 ","like_count":0},{"had_liked":false,"id":227757,"user_name":"YellowDuck","can_delete":false,"product_type":"c1","uid":1673801,"ip_address":"","ucode":"9F1D2473CBA59B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","comment_is_top":false,"comment_ctime":1592470986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592470986","product_id":100020801,"comment_content":"看到好多同学对这个水位有疑问，丁老师的那张图确实画的有点影响理解。我理了下，希望可以给大家带来帮助<br>事务开始时会记录下当前的活跃事务数组；<br>高水位的trx_id为当前的trx_id + 1，事务trx_id大于等于高水位值的事务都是在当前事务开启时刻之后开始的，无法读到；<br>某个事务的trx_id小于等于本事务的高水位值，分两种情况：<br>若该trx_id不在活跃数组中，则说明已经提交，之后可以读到；<br>若该trx_id在活跃数组中，则说明该事务在本事务开始瞬间时刻未提交，之后不可以读到；","like_count":0},{"had_liked":false,"id":227299,"user_name":"Geek_dd1024","can_delete":false,"product_type":"c1","uid":1902979,"ip_address":"","ucode":"AC546465354513","user_header":"","comment_is_top":false,"comment_ctime":1592354956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592354956","product_id":100020801,"comment_content":"老师您好，请问文中图8的情况，事物A的tx id还是100么，是开启时生成id还是执行sql时生成？","like_count":0},{"had_liked":false,"id":226299,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1413399,"ip_address":"","ucode":"FB3851E3A79C3B","user_header":"https://static001.geekbang.org/account/avatar/00/15/91/17/89c3d249.jpg","comment_is_top":false,"comment_ctime":1592028251,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592028251","product_id":100020801,"comment_content":"老师，在第三讲事务隔离中讲到的读提交的概念是：一个事务提交之后，他所做的变更才会被看到。<br>在这一讲中又提到：在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。<br>在读提交的事务隔离中，按照第三讲中说的，事务b还没有commit，所以事务A查询到的是事务Bupdate之前的。但是这一讲中说的，却是事务B提交之前的，update之后的值2.<br>我有点晕了。麻烦老师帮忙解释下？？","like_count":0,"discussions":[{"author":{"id":2161178,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/xPesDE8uvIIxGovBGOXibpAaBY4QmtkHfvwVjbsiaS2aHNULTewnDGVmicE5yfZn7HsrSMAcrG85rzs6F4icgVeE5Q/132","nickname":"大雄哆啦","note":"","ucode":"0A52764D54A6E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309145,"discussion_content":"A查询的是C事务update提交后的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601197836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226204,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1591979879,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591979879","product_id":100020801,"comment_content":"若如果落在黄色部分，且 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。应该不会有这种情况吧？","like_count":0,"discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282608,"discussion_content":"这个问题，我后来想明白了，就是老师后面的问题提到的彩蛋，哎，可恨啊，这么好的课程，我尽然现在才看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592025978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225428,"user_name":"Geek_bef3ae","can_delete":false,"product_type":"c1","uid":1951832,"ip_address":"","ucode":"D1CA954B1E1973","user_header":"","comment_is_top":false,"comment_ctime":1591754614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591754614","product_id":100020801,"comment_content":"思考题直接用快照读就可以构造出这种诡异现象，在更新之前直接先查询，在这个事务中无论查询多少次，都看不到更新的数据。","like_count":0},{"had_liked":false,"id":225307,"user_name":"得芸娘足矣","can_delete":false,"product_type":"c1","uid":1529474,"ip_address":"","ucode":"F49F658809FDA5","user_header":"https://static001.geekbang.org/account/avatar/00/17/56/82/cee545ab.jpg","comment_is_top":false,"comment_ctime":1591711620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591711620","product_id":100020801,"comment_content":"如果落在黄色部分，那就包括两种情况：<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见<br>既然都落在了黄色的部分，那不就是应该是未提交的，为什么又说是已经提交的事务生成的？","like_count":0},{"had_liked":false,"id":225225,"user_name":"刘涛","can_delete":false,"product_type":"c1","uid":1065522,"ip_address":"","ucode":"688680F96BD9E1","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/32/6edba05d.jpg","comment_is_top":false,"comment_ctime":1591687354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591687354","product_id":100020801,"comment_content":"老师你好，我有个问题：<br>图 3 数据版本可见性规则 下面的第3点b中“若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。”<br>不是很理解，如果是可重复读，应该是事务开启的时候生成视图，比如下面文中例子里面A事务，在事务C提交之后，读取到的值依然是1。感觉这个地方应该是不可见吧。<br>如果是读提交，是可见的。","like_count":0},{"had_liked":false,"id":224881,"user_name":"jiangchuan","can_delete":false,"product_type":"c1","uid":1322714,"ip_address":"","ucode":"1A4CA8A73B7F88","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/da/15f95b7b.jpg","comment_is_top":false,"comment_ctime":1591582661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591582661","product_id":100020801,"comment_content":"这里有位大哥用 python 实现事务, 可以结合者看理解的更彻底: https:&#47;&#47;levelup.gitconnected.com&#47;implementing-your-own-transactions-with-mvcc-bba11cab8e70","like_count":0},{"had_liked":false,"id":224359,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1591353679,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591353679","product_id":100020801,"comment_content":"b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br><br>这个当前事务的视图数组 和 图3的黄色区域不是一回事儿 ？？  没理解，麻烦老师再解释一下 ？！","like_count":0,"discussions":[{"author":{"id":1528536,"avatar":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","nickname":"绿箭侠","note":"","ucode":"B994F558A98E29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279527,"discussion_content":"唯一的解释就是row trx_id大小在低水位和高水位之间，其实是已提交的事务，对文章表述上的理解偏差！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591363508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224003,"user_name":"Geek_76f04f","can_delete":false,"product_type":"c1","uid":2020720,"ip_address":"","ucode":"2A3D34C303E19A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d5/70/93a34aa5.jpg","comment_is_top":false,"comment_ctime":1591253782,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591253782","product_id":100020801,"comment_content":"老师我用的mysql8.0测试您的问题，发现可以成功的update。。。是不是8.0 和5.x在结构上有什么大的调整？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295101,"discussion_content":"先起个事务a，获取快照后 再起另外一个事务b，事务b把c全部更新成0后提交。事务a再执行更新操作就更新0条，执行查询操作就显示快照时候的结果了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596090665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222655,"user_name":"shiziwen","can_delete":false,"product_type":"c1","uid":1016917,"ip_address":"","ucode":"ADADC770D82D66","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/55/1e40bd61.jpg","comment_is_top":false,"comment_ctime":1590863066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590863066","product_id":100020801,"comment_content":"关于文中的“InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。”不是很理解，快照都包含哪些数据呢？<br>是指的row trx_id的数组？<br><br>所以关于文中的问题“如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。”，还是有疑问。<br><br>文中说“实际上，我们并不需要拷贝出这 100G 的数据”，那快照都包含什么呢？<br>如果一个事务启动的时候，有100万条数据，快照包含哪些数据呢？<br><br>","like_count":0},{"had_liked":false,"id":221614,"user_name":"Geek_55e386","can_delete":false,"product_type":"c1","uid":1795793,"ip_address":"","ucode":"5A727F1323C2D0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zxkns28cIAUZIt3WjDb8G26qiccT84d9GMr9ZpbYR60TU1ibqSj9NoYVHlJvGF1kOltkqNDmEfJCqPuYVkue3WHg/132","comment_is_top":false,"comment_ctime":1590549074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590549074","product_id":100020801,"comment_content":"我的慢日志里面有大量的 SELECT &#47;*!40001 SQL_NO_CACHE *&#47; * &#39;XXX&#39;<br>表可能都是几百万的数据，部分过千万，导致锁表；没有备份计划，不懂这个sql从哪里发出","like_count":0},{"had_liked":false,"id":221408,"user_name":"leichenlei","can_delete":false,"product_type":"c1","uid":1950449,"ip_address":"","ucode":"D63AFE172CB5A7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c2/f1/0cf79684.jpg","comment_is_top":false,"comment_ctime":1590494687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590494687","product_id":100020801,"comment_content":"图 3 数据版本可见性规则  中的 黄色部分 被标注为：未提交部分。<br><br>读这篇文章的时候造成一些困扰，感觉黄色部分应该是：未提交+已提交","like_count":0},{"had_liked":false,"id":221266,"user_name":"decli","can_delete":false,"product_type":"c1","uid":1150065,"ip_address":"","ucode":"856C710A0A4092","user_header":"https://static001.geekbang.org/account/avatar/00/11/8c/71/373c3974.jpg","comment_is_top":false,"comment_ctime":1590458760,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590458760","product_id":100020801,"comment_content":"RR级别。先启动事务A并且update id=1的数据，再启动事务B update id=2的数据并提交，事务A执行select能够看到事务B的修改呀，应该是在第一个select的时候创建的read view，不是事务启动的时候吧🧛🧛🧛","like_count":0},{"had_liked":false,"id":218796,"user_name":"阿尔法","can_delete":false,"product_type":"c1","uid":1466999,"ip_address":"","ucode":"6BB7189DB32B10","user_header":"https://static001.geekbang.org/account/avatar/00/16/62/77/ca301676.jpg","comment_is_top":false,"comment_ctime":1589876458,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589876458","product_id":100020801,"comment_content":"老师好，文中的示例图是用的什么画的呢？","like_count":0},{"had_liked":false,"id":217304,"user_name":"雪の雫·雨の音","can_delete":false,"product_type":"c1","uid":1997293,"ip_address":"","ucode":"0693DA3939A321","user_header":"https://static001.geekbang.org/account/avatar/00/1e/79/ed/4737a49b.jpg","comment_is_top":false,"comment_ctime":1589461350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589461350","product_id":100020801,"comment_content":"老师您好！我有两个问题：<br>1、获取视图数组与获取高水位之间两个动作是原子的吗？因为如果不是的话，如果有另外一个事务在这个事务获取视图数组之后，获取高水位之前这个时间段里完成了申请事务id，更新数据并提交事务的操作，那么这个事务id是不会出现在视图数组且小于高水位的。这样的话就会接受这个事务所做的修改了，不是吗？<br>2、您在评论里面回复了说事务A申请事务id与获取视图数组之间是有时间差的，如果在这段时间里另外一个事务B申请事务id，更新数据并提交事务，那么事务B所做的更新是否会对事务A可见？若在事务B之后有事务C也申请了事务id，那么事务B的id肯定是小于高水位的，而且不会被记录到事务A的视图数组内。","like_count":0},{"had_liked":false,"id":217250,"user_name":"天斓海琼","can_delete":false,"product_type":"c1","uid":1488931,"ip_address":"","ucode":"0BD579B063C72C","user_header":"https://static001.geekbang.org/account/avatar/00/16/b8/23/85c7911c.jpg","comment_is_top":false,"comment_ctime":1589448950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589448950","product_id":100020801,"comment_content":"老师请教个问题：我执行后出现如下情况？你说复现是这种情况吗？<br><br>mysql&gt; select *  from t;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 1 |<br>|  2 | 2 |<br>|  3 | 3 |<br>|  4 | 4 |<br>+----+---+<br>4 rows in set (0.02 sec)<br><br>mysql&gt; update t set c=0 where id = c;<br>Query OK, 4 rows affected (0.00 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select *  from t;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 0 |<br>|  2 | 0 |<br>|  3 | 0 |<br>|  4 | 0 |<br>+----+---+<br>4 rows in set (0.03 sec)<br><br>mysql&gt; ","like_count":0},{"had_liked":false,"id":216793,"user_name":"lee","can_delete":false,"product_type":"c1","uid":1106955,"ip_address":"","ucode":"027B1CC9912249","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/0b/6e335eb2.jpg","comment_is_top":false,"comment_ctime":1589344055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589344055","product_id":100020801,"comment_content":"老师您好，我做一个案例，trx2先于trx1启动，这样的话trx1 readview中活跃数组是trx2, trx2执行update然后commit，然后trx1执行select，是可以看看到trx2的执行结果的，这样是不是就矛盾了trx2还在trx1的活跃数组中，但是也能看到trx2的执行结果","like_count":0},{"had_liked":false,"id":215108,"user_name":"厉害了我的国","can_delete":false,"product_type":"c1","uid":1052191,"ip_address":"","ucode":"CD0A54A1B998AA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","comment_is_top":false,"comment_ctime":1588906542,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588906542","product_id":100020801,"comment_content":"复现不出思考题的现象，设置了autocommit = 1，隔离级别是RR，但是update后，select再查出来的结果是更新后的。。。为啥","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295102,"discussion_content":"先起个事务a，获取快照后 再起另外一个事务b，事务b把c全部更新成0后提交。事务a再执行更新操作就更新0条，执行查询操作就显示快照时候的结果了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596090716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213802,"user_name":"BugBean","can_delete":false,"product_type":"c1","uid":1834181,"ip_address":"","ucode":"B51232281AD9BC","user_header":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","comment_is_top":false,"comment_ctime":1588565622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588565622","product_id":100020801,"comment_content":"总结：<br>1.MVCC快照原理：每行数据除了保留当前数据版本还会用undo_log保留历史版本，同时记录修改数据的tx_id，一致性读会根据tx_id和一致性视图确定数据版本的可见性<br>2.一致性视图实现原理：事务开启（或执行sql）时会创建一个视图数组，记录当前活跃的tx_id，取数组最小值为低水位，当前max(tx_id)+1为高水位，小于低水位的可见，高于高水位的不可见，在低水位和高水位之间的如果在数组上的不可见，否则可见。可简单理解为：1.版本未提交，不可见；2.版本已提交，但是在创建一致性视图之后提交，不可见；3.版本已提交，在创建一致性视图之前提交，可见<br>3.数据更新时使用的是当前读，当前读一定会读到最新版本的数据","like_count":0},{"had_liked":false,"id":213772,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1440429,"ip_address":"","ucode":"D8C66E7F61B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/ad/3fa02ac7.jpg","comment_is_top":false,"comment_ctime":1588557834,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588557834","product_id":100020801,"comment_content":"1 可重复读 读一致 认可事物开始前的版本<br>2 读提交 认可语句开始前的版本<br>3 当前读 总是读最新提交的版本","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276988,"discussion_content":"当前读的本质是对要读取的行加互斥锁也就是X锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590979391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213766,"user_name":"xaviers","can_delete":false,"product_type":"c1","uid":1879918,"ip_address":"","ucode":"58D51C4DDC5BA8","user_header":"https://static001.geekbang.org/account/avatar/00/1c/af/6e/30fb83f1.jpg","comment_is_top":false,"comment_ctime":1588556667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588556667","product_id":100020801,"comment_content":"老师早上好，文中有个地方有点疑惑。<br><br>原文：比如，对于图 2 中的数据来说，如果有一个事务，它的低水位是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 计算出 V3，所以在它看来，这一行的值是 11。<br><br>疑惑：仅凭低水位是18，并不能判断出该事务能访问到的数据版本是V几吧？老师应该是想说“高水位18”？是手误写错吗？","like_count":0},{"had_liked":false,"id":213531,"user_name":"frankie","can_delete":false,"product_type":"c1","uid":1794060,"ip_address":"","ucode":"813D1352B68A21","user_header":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","comment_is_top":false,"comment_ctime":1588466754,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1588466754","product_id":100020801,"comment_content":"有一个问题哈：关于一行数据的row_trx_id落在那个低水位和高水位之间的黄色部分不是很明白，既然在事务启动瞬间会创建一个事务的数组，那么示意图低水位和高水位之间的黄色区域就是这个数组啊，你文章讲假如row_trx_id落在黄色区域，为什么下面还区分a,b来判断这个row_trx_id是否在数组呢？","like_count":0,"discussions":[{"author":{"id":1296344,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTICH91vZqTRwmqKiayH78A0QujX7y8Cq0ocbz7Yvicp3U0kHF1PLKDxhsdmMic2e6gUyuOgPDCZpE3eA/132","nickname":"Geek_1a873d","note":"","ucode":"71E91FCEB4837C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260284,"discussion_content":"同感。应该说，只有“低水位”之前的row trx_id的数据版本是可见的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588858965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1296344,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTICH91vZqTRwmqKiayH78A0QujX7y8Cq0ocbz7Yvicp3U0kHF1PLKDxhsdmMic2e6gUyuOgPDCZpE3eA/132","nickname":"Geek_1a873d","note":"","ucode":"71E91FCEB4837C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261597,"discussion_content":"这个文章下面有人在讨论这个问题 解释的挺清楚的 可以看看🤓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588985893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":260284,"ip_address":""},"score":261597,"extra":""}]}]},{"had_liked":false,"id":212147,"user_name":"王凯","can_delete":false,"product_type":"c1","uid":1066040,"ip_address":"","ucode":"52FD9ED35AA506","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/38/8e05dac1.jpg","comment_is_top":false,"comment_ctime":1588067089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588067089","product_id":100020801,"comment_content":"图 8中，可重复读和读已提交隔离级别，两者在同样顺序操作下的，事务A读到数据不一样，是基于两者视图不同完成的。可重复读是从事务开始创建的视图数组一直不会改变，读已提交的这个视图是在每个 SQL 语句开始执行的时候创建，在看数据是否可见的时候，只需要通过相应的视图数组，根据高低水位判断规则顺着修改操作的形成的回滚链比对事务ID即可。","like_count":0},{"had_liked":false,"id":211328,"user_name":"Danfēng","can_delete":false,"product_type":"c1","uid":1237583,"ip_address":"","ucode":"E5B3451F1D0441","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/4f/df01f65e.jpg","comment_is_top":false,"comment_ctime":1587949092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587949092","product_id":100020801,"comment_content":"话说以前我们更新数据看到很多人喜欢在业务层+1，事物期间有其他更新的话，这个更新不就是覆盖了别人的更新？","like_count":0},{"had_liked":false,"id":211141,"user_name":"诺然123","can_delete":false,"product_type":"c1","uid":1324843,"ip_address":"","ucode":"85492F5AB974D4","user_header":"","comment_is_top":false,"comment_ctime":1587902637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587902637","product_id":100020801,"comment_content":"&quot;如图 2 所示，就是一个记录被多个事务连续更新后的状态。&quot;对这句话有个疑问，事务15、17是否commit。如果事务15没有commit,那事务17不会阻塞吗？如果已经commit,回滚日志可能被放入了待清理的链表，这个时候还可以回滚吗？","like_count":0},{"had_liked":false,"id":210834,"user_name":"Lyn4ever","can_delete":false,"product_type":"c1","uid":1559541,"ip_address":"","ucode":"D4D32B7A9EBFAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/kEOm2xpFyn0WVH04ibTyadaXKPowWfzPaOv1ibGrM2Y4eTSbSGYibvibZKW0dRibJqX8dnwMEwGZoDAiaicJ4gR0JWeVw/132","comment_is_top":false,"comment_ctime":1587832140,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587832140","product_id":100020801,"comment_content":"可重复读和当前读是一样的吗？","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276992,"discussion_content":"可重复读是事务的四种隔离级别中的一种。\n在可以重复读隔离级别下执行update语句，该update语句会读取该行中的最新数据，这叫做当前读，当前读就是读取最新数据的意思。因为同样一行的数据有多个版本，而当前读就是取最新的那个版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590979923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210668,"user_name":"初级码农007","can_delete":false,"product_type":"c1","uid":1067588,"ip_address":"","ucode":"2FE76DB747DB22","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/44/097daa02.jpg","comment_is_top":false,"comment_ctime":1587805304,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587805304","product_id":100020801,"comment_content":"老师你好，有个问题请教下：update语句都是先读后更新，并且是当前读，那是不是数据库自动帮我们执行了一条select for update 的语句？","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276994,"discussion_content":"是的，当前读就是会加互斥锁的不过是系统自动加的，而for update是我们手动显示加互斥锁的意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590980053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209879,"user_name":"起风","can_delete":false,"product_type":"c1","uid":1942240,"ip_address":"","ucode":"EE43398805B692","user_header":"https://static001.geekbang.org/account/avatar/00/1d/a2/e0/571cb1b4.jpg","comment_is_top":false,"comment_ctime":1587630786,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587630786","product_id":100020801,"comment_content":"图6的事务C‘例子我不太理解。我理解的重复读是在一个事务中读到的数据都是相同的。难道更新例外？？假如事务C‘提交前再将k修改为4，事务B在提交前再修改一次K+1，此时当前读读到的K值不就等于4了？岂不是又不同了，那么事务B提交产生的K结果是5吗？","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276996,"discussion_content":"更新就是例外。update可以理解为先读取再赋值，在语句读取行的时候是会加互斥锁的，而且它读到的行是最新行，在赋值时会将自己的事务id赋值到该行，因为是我修改了这一行，这一行的事务id当然要是我的事务id，所以我以后的select语句当然能看见我自己修改过的行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590980361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209859,"user_name":"起风","can_delete":false,"product_type":"c1","uid":1942240,"ip_address":"","ucode":"EE43398805B692","user_header":"https://static001.geekbang.org/account/avatar/00/1d/a2/e0/571cb1b4.jpg","comment_is_top":false,"comment_ctime":1587627036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587627036","product_id":100020801,"comment_content":"请问老师，图一的事务A按照你说的“数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。”那么事务A的低水位是99，高水位由于事务b和c未开始，所以是100+1=101是吗？","like_count":0},{"had_liked":false,"id":208185,"user_name":"红颜铭心","can_delete":false,"product_type":"c1","uid":1889026,"ip_address":"","ucode":"18F94E5444C71A","user_header":"","comment_is_top":false,"comment_ctime":1587295175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587295175","product_id":100020801,"comment_content":"事务是如何实现的MVCC呢?<br>\t1.每个事务启动都有一个事务ID，即为transaction id(严格递增)<br>\t2.收集当前未提交的事务id，存入活跃事务id数组id_arr<br>\t3.快照读:读取行记录的row trx_id，并和当前事务id进行比较，流程如下：<br>\t\t1）row trx_id &lt; id_arr[0]，处于低水位可见，直接读取<br>\t\t2) row trx_id = transaction id，当前事务提交，直接读取<br>\t\t3）row trx_id not in id_arr &amp;&amp; id_arr[0]&lt; trx_id &lt; id_arr[max]，事务中间水位且已提交，直接读取(事务提交顺序，和开启顺序没有关系)<br>\t\t4）row trx_id in id_arr，当前活跃事务提交的(即视图创建后提交)，不可直接读取，通过unlog向前查找<br>\t\t5）row trx_id &gt; id_arr[max]，事务高水位且已提交(即视图创建后提交)，不可直接读取，通过unlog向前查找<br>unlog向前查找流程<br>\t1.修改聚集索引记录时，会存储回滚段指针和事务id<br>\t2.通过回滚段指针找到undolog，将当前事务id和回滚段中的row trx_id进行比较，比较流程如上所述<br>\t3.事务更新操作，会将聚簇索引和事务id存储到unlog，并将回滚段指针指向新的记录<br>\t4.若没有比unlog中row trx_id更早的transaction id，删除回滚段日志","like_count":0},{"had_liked":false,"id":208173,"user_name":"红颜铭心","can_delete":false,"product_type":"c1","uid":1889026,"ip_address":"","ucode":"18F94E5444C71A","user_header":"","comment_is_top":false,"comment_ctime":1587291398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587291398","product_id":100020801,"comment_content":"每个事务启动都有标识，即为trx_id，活跃事务表示还未提交<br><br>事务A(100)启动时 活跃事务id<br>[99,100]<br><br>事务B(101)启动时 活跃事务id<br>[99,100,101]<br><br>事务C(102)启动时 活跃事务id<br>[99,100,101,102]<br><br>事务D(110)启动时 活跃事务id<br>[99,100,101,102,110]<br><br>不同事务版本下 value的值<br>value    30 30  40  50<br>trx_id   90 108 102 101<br><br>事务D读取value trx_id=110 发现在活跃事务范围内 不可见<br>继续向前读取    trx_id=102 发现在活跃事务范围内 不可见<br>继续向前读取    trx_id=108 发现不在活跃事务范围内 但处于中间水位 可见<br><br>事务C读取value trx_id=101 发现在活跃事务范围内 不可见<br>继续向前读取    trx_id=102 发现为自己提交 可见value=102<br><br>事务B读取value trx_id=101 发现为自己提交 可见value=50<br><br>事务A读取value trx_id=101 处于高水位 不可见<br>继续向前读取    trx_id=102 发现为高水位 不可见<br>继续向前读取    trx_id=90  发现为低水位 可见<br><br>查看原则:<br>已提交的事务     |  中间事务(自己的事务)       |  未来事务<br><br>              低水位                      高水位<br><br>已提交的事务&amp;自己的事务  数据可见<br>未来事务              数据不可见<br>中间事务<br>\t1.事务id在活跃事务数组内部    表示这个版本是未提交   数据不可见<br>\t2.事务id不在活跃事务内部     表示这个版本是已经提交  数据可见( 事务启动时创建trx_id，其他并发事务也创建trx_id，在统计活跃事务时，trx_id较大的事务有可能已经提交了，但仍处于中间水位)","like_count":0},{"had_liked":false,"id":207759,"user_name":"donkey703","can_delete":false,"product_type":"c1","uid":1967080,"ip_address":"","ucode":"A48EA2D28A7557","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoeZJ1aW5LkAlaKqXEpvrnSk0ibUcLFjz8pDmWpuvm8RD3e79icAALsEurUwXOs0UjVQRxuImxCsHQQ/132","comment_is_top":false,"comment_ctime":1587175458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587175458","product_id":100020801,"comment_content":"首先，你定义了一个事务数组的概念，指的就是当前时刻，启动了但未提交的事务ID的集合，这个数组的范围就是低水位和高水位之间。你后面拿当前row_txid做判断（1）row_txid&lt;低水位（2）row_txid&gt;高水位（3）低水位&lt;row_txid&lt;高水位，但是这里逻辑你又分出两层判断是什么意思？txid肯定是在数组了啊，怎么还判断不在数组","like_count":0},{"had_liked":false,"id":207671,"user_name":"学文化的流氓","can_delete":false,"product_type":"c1","uid":1336275,"ip_address":"","ucode":"6D9412976EE8B0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KibvgwBjrsVOiayuViaoQfyNts8xMsztwe0Fg24icicFW7YeJaPQhAGhdNZjWWhyxOian0SCdibhiaerLbhuefkiaP1EooQ/132","comment_is_top":false,"comment_ctime":1587133951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587133951","product_id":100020801,"comment_content":"所以，如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。下面这两个 select 语句，就是分别加了读锁（S 锁，共享锁）和写锁（X 锁，排他锁）。<br><br>---------------------------------------------------------<br>老师，有个疑惑想问一下，上面这种情况，按照图1的例子修改，如果事务A执行了加锁的select ，但是事务B已经拿到了这行的写锁了吧，这样事务A就会等待，直到事务B 提交之后，才能读到3吧。这样就不符合图1的流程了。不知道想的对不对","like_count":0},{"had_liked":false,"id":207479,"user_name":"田鹏原","can_delete":false,"product_type":"c1","uid":1114957,"ip_address":"","ucode":"8BC100F01ED11C","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/4d/dd9c2e96.jpg","comment_is_top":false,"comment_ctime":1587091240,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587091240","product_id":100020801,"comment_content":"事务提交后,对提交前开启的事务可见 不可见,不是和隔离级别有关系嘛.","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277002,"discussion_content":"具体将是和一致性视图创没创建有关。select总是去一致性视图中select。\n假如你先提交，我再创建一致性视图，那我的select自然就能看见你的修改。\n假如我先创建一致性视图，你再提交，我的一致性视图中没有你的修改，那我select自然就不能看见你的修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590980793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207042,"user_name":"9080","can_delete":false,"product_type":"c1","uid":1114072,"ip_address":"","ucode":"D4DFBBC1B8394D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/d8/fa77b4eb.jpg","comment_is_top":false,"comment_ctime":1586999240,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586999240","product_id":100020801,"comment_content":"老师，对于update操作会走当前读，insert操作是不是不会走当前读呢","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277005,"discussion_content":"insert只要插入数据不需要读取，应该就没有什么当前读吧，不过在可重复读隔离级别中，为了避免幻读会加间隙锁拒绝insert。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590980986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205588,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1586679709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586679709","product_id":100020801,"comment_content":"从早上看到晚上 终于看懂了。。。","like_count":0},{"had_liked":false,"id":203989,"user_name":"Vongola","can_delete":false,"product_type":"c1","uid":1047073,"ip_address":"","ucode":"F2FDAEBC049CBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/21/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1586315608,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1586315608","product_id":100020801,"comment_content":"不知道我这么理解对不对。<br>事务分配id是在begin;的时候，但是视图的创建是在执行第一句sql时，当然，如果是以start transaction with consistent snapshot开启事务，这两个操作就是同时，这一点很重要，但是老师没有在文章中说到transactionId和视图创建不是同时的。","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277008,"discussion_content":"begin:在执行第一条sql语句时分配事务id和创建一致性视图。\nstart transaction with consist snapshot:在执行本语句时分配事务id和创建一致性视图，不过这个语句在提交读级别下会失效。\n提交读级别下会在执行第一条SQL语句时分配事务id，每一条SQL语句都会创建一致性视图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590981237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203308,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1586169285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586169285","product_id":100020801,"comment_content":"mysql&gt; begin;<br>Query OK, 0 rows affected (0.04 sec)<br> <br>mysql&gt; select * from t;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 1 |<br>|  2 | 2 |<br>|  3 | 3 |<br>|  4 | 4 |<br>+----+---+<br>4 rows in set (0.04 sec)<br> <br>mysql&gt; update t set c=0 where id=c;<br>Query OK, 4 rows affected (0.04 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br> <br>mysql&gt; select * from t;<br>+----+---+<br>| id | c |<br>+----+---+<br>|  1 | 0 |<br>|  2 | 0 |<br>|  3 | 0 |<br>|  4 | 0 |<br>+----+---+<br>4 rows in set (0.04 sec)<br> <br>mysql&gt; <br>mysql&gt; show variables like &#39;transaction_isolation&#39;;<br>+-----------------------+-----------------+<br>| Variable_name         | Value           |<br>+-----------------------+-----------------+<br>| transaction_isolation | REPEATABLE-READ |<br>+-----------------------+-----------------+<br>1 row in set (0.04 sec)<br> <br>mysql&gt; <br><br><br>为什么我的四条记录更新了。。。","like_count":0},{"had_liked":false,"id":202985,"user_name":"lji","can_delete":false,"product_type":"c1","uid":1724244,"ip_address":"","ucode":"5791B86037F129","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zxrG3SKctHcdRcCw5Z3W5Ur0Opaziaj6r6otPpmzZrdIFf5Ref5dyEZQALa7DXn3ViaeWiaTiaeghQA4R5ib8x74JYg/132","comment_is_top":false,"comment_ctime":1586097639,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1586097639","product_id":100020801,"comment_content":"关于事务 ID 分配时机是事务一开始就拿到还是在执行（增删改）操作才能拿到。<br>我看图中显示是事务一开始就先有了个 ID，我在其他地方看到的 “某个事务执行过程中对某个表执行了增、删、改操作，那么InnoDB存储引擎就会给它分配一个独一无二的事务id”。这里产生了疑问~还请解答","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277009,"discussion_content":"开启事务的方式有两种。\nbegin:在执行第一条sql语句时分配事务id和创建一致性视图。\nstart transaction with consist snapshot:在执行本语句时分配事务id和创建一致性视图，不过这个语句在提交读级别下会失效。\n提交读级别下会在执行第一条SQL语句时分配事务id，每一条SQL语句都会创建一致性视图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590981534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202386,"user_name":"浮生醉","can_delete":false,"product_type":"c1","uid":1783354,"ip_address":"","ucode":"7549E41BD65511","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/3a/335db90a.jpg","comment_is_top":false,"comment_ctime":1585981083,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585981083","product_id":100020801,"comment_content":"里我们提到了一个概念，叫作当前读。其实，除了 update 语句外，select 语句如果加锁，也是当前读。所以，如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3<br><br>老师上面讲的这里有点疑问，原来的执行顺序是<br>事务A开启 -&gt;事务B开启--&gt;事务B更新--&gt;事务A查询--&gt;事务B提交<br>哪怕事务A的查询是当前读，由于事务B的更新还没有提交，A需要等待B释放锁，这个时候当前读还是不能读到最新的把 还是K=1","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277010,"discussion_content":"是的，是你这样的，update语句的当前读系统会默认加互斥锁，而for update是你指定加互斥锁。它们两个都使用了互斥锁，只不过一个是系统加的，一个是你指定加的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590981737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202170,"user_name":"、落叶为你舞","can_delete":false,"product_type":"c1","uid":1756562,"ip_address":"","ucode":"A196460774A33F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cd/92/f75a00dd.jpg","comment_is_top":false,"comment_ctime":1585915750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585915750","product_id":100020801,"comment_content":"老师看一下我这样分有问题吗？<br>- 如果大于 up_limit_id：<br>  - 若 row trx_id 不是当前事务 id，，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br>  - 若 row trx_id 是当前事务 id，表示这个版本是当前事务自己生成的，这个数据是可见的；<br>- 如果小于等于 up_limit_id：<br>  - 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>  - 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。","like_count":0},{"had_liked":false,"id":201879,"user_name":"lm a cat","can_delete":false,"product_type":"c1","uid":1467281,"ip_address":"","ucode":"8269EB2082BD43","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/91/05f491f1.jpg","comment_is_top":false,"comment_ctime":1585872036,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585872036","product_id":100020801,"comment_content":"如果在可重复读级别下，事务A先读后计算好值，直接设置k=2，是否会覆盖事务B设置的k=3。这种情况并不是k=k+1，当前读还能有效吗？","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277014,"discussion_content":"事务B的k=3是通过update设置的吗，如果是，那么由于二阶段锁协议，事务B在update k=3是拿到了该行的互斥锁，并且将k赋值为3，这一行的互斥锁知道事务B commit才会释放。\n因此你说事务A直接设置update=2，事务A这时候应该拿不到这一行的互斥锁，它会一直等待，知道B释放了这一行的锁A才能拿到。\n\n不会覆盖B的k＝3，由于MVCC协议它会生成该行的另一个版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590982209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201088,"user_name":"Geek_2ac804","can_delete":false,"product_type":"c1","uid":1518795,"ip_address":"","ucode":"EDF69B20030BB8","user_header":"","comment_is_top":false,"comment_ctime":1585713725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585713725","product_id":100020801,"comment_content":"老师，我感觉你这里的高水位与当前事务id的关系并没有说清楚，这里的高水位是不是指的就是当前事务id？","like_count":0},{"had_liked":false,"id":201067,"user_name":"Geek_2ac804","can_delete":false,"product_type":"c1","uid":1518795,"ip_address":"","ucode":"EDF69B20030BB8","user_header":"","comment_is_top":false,"comment_ctime":1585711861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585711861","product_id":100020801,"comment_content":"建议老师将本课时里的：“这个视图数组把所有的 row trx_id 分成了几种不同的情况。“这句话删除。实际上数组并未做到分类这个作用，红绿黄是我们对trans ID进行的分类，在说到黄色分类的时候，需要结合视图数组进行说明而已。","like_count":0},{"had_liked":false,"id":201014,"user_name":"小桓","can_delete":false,"product_type":"c1","uid":1887605,"ip_address":"","ucode":"0C6547372A9298","user_header":"https://static001.geekbang.org/account/avatar/00/1c/cd/75/7da006a5.jpg","comment_is_top":false,"comment_ctime":1585705669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585705669","product_id":100020801,"comment_content":"那老师  mysql 采集oracle的数据库 经常出现快照过旧的原因应该是什么，既然已经拍了一个快照了，那么我在哪个时间段查询到的跟后面再插入的数据应该是不冲突的吧。","like_count":0},{"had_liked":false,"id":200149,"user_name":"吃鸡吃鸡","can_delete":false,"product_type":"c1","uid":1199348,"ip_address":"","ucode":"7C54E2C1A3E8B2","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/f4/8eda0b19.jpg","comment_is_top":false,"comment_ctime":1585550789,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585550789","product_id":100020801,"comment_content":"有两个地方不理解，如果老师看到了请帮忙解答：<br>1、事务ID是事务启动时向innodb的事务系统申请的，是按照申请顺序严格递增的。那么，一致性视图中的高水位是否就是当前事务id+1？<br>2、update操作是当前读，会创建一致性视图么？","like_count":0,"discussions":[{"author":{"id":1520918,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqR1uIibq33Kr6TcwLFG7tOGRW3wpaTib6KwRcChicGRTC8CGG4Pder06lSQM0hHZibeCEEu6Gs8BloSQ/132","nickname":"InfoQ_9211fd77452a","note":"","ucode":"CB234C8E82C527","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277016,"discussion_content":"应该select语句才会创建一致性视图，update语句不会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590982291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198113,"user_name":"甲小蛙","can_delete":false,"product_type":"c1","uid":1475627,"ip_address":"","ucode":"B611FDDE514C9F","user_header":"https://static001.geekbang.org/account/avatar/00/16/84/2b/ba495eea.jpg","comment_is_top":false,"comment_ctime":1585410007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585410007","product_id":100020801,"comment_content":"看完后感觉很通透，老师讲得好，也可以一撇数据库引擎设计者的风采👍","like_count":0},{"had_liked":false,"id":197133,"user_name":"我们在路上","can_delete":false,"product_type":"c1","uid":1183518,"ip_address":"","ucode":"0DB77DB7C64C47","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/1e/6b6eb987.jpg","comment_is_top":false,"comment_ctime":1585360014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585360014","product_id":100020801,"comment_content":"老师，row trx_id是对每个事务的，还是对每行记录的？如果是对每行记录的，一个事务中更新多条记录，row trx_id应该会有重复的吧?","like_count":0},{"had_liked":false,"id":196888,"user_name":"王立","can_delete":false,"product_type":"c1","uid":1904760,"ip_address":"","ucode":"44A4EF95403731","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWiaZb7a2JAcDQ0kYYy2knpK8sTqicvG2Ukb1HdeE0fMMSINiagU401uibLicbIXVwRG7coDyDTOuYCSA/132","comment_is_top":false,"comment_ctime":1585321254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585321254","product_id":100020801,"comment_content":"第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。<br>102在红色部分，不应该忽略吗？？","like_count":0},{"had_liked":false,"id":196056,"user_name":"追梦","can_delete":false,"product_type":"c1","uid":1197685,"ip_address":"","ucode":"634A19055525B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/75/9f80409f.jpg","comment_is_top":false,"comment_ctime":1585232821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585232821","product_id":100020801,"comment_content":"去年中开始接触这个技术分享，一直看看停停，知道最近才有时间系统地看完，收益良多","like_count":0},{"had_liked":false,"id":195404,"user_name":"LOST","can_delete":false,"product_type":"c1","uid":1909835,"ip_address":"","ucode":"5CAE095974CCA4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/24/4b/6457b730.jpg","comment_is_top":false,"comment_ctime":1585185635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585185635","product_id":100020801,"comment_content":"老师，对于图8的分析有点不理解，为啥(1,3) 是属于情况 1？(1,2)属于情况 3？能否详细说说？（1,3）明明不是在事务A的视图数组里面吗？","like_count":0},{"had_liked":false,"id":194886,"user_name":"后凋","can_delete":false,"product_type":"c1","uid":1439421,"ip_address":"","ucode":"D63C7FF73AE06E","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/bd/9eb00295.jpg","comment_is_top":false,"comment_ctime":1585116313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585116313","product_id":100020801,"comment_content":"老师请指教：<br>问题1：高水位为啥是当前系统已经创建过的事务id的最大值加1<br>MySQL源码:<br>m_low_limit_id = trx_sys-&gt;max_trx_id;<br>按源码来说，高水位应该是活跃事务链表(trx_sys)中事务id最大的值被赋值吧？<br><br>问题2：源码中定义了当前事务id,我觉着 活跃事务链表(trx_sys)中不包含当前事务id?<br>以下是MySQL源码<br>\t&#47;** The read should not see any transaction with trx id &gt;= this<br>\tvalue. In other words, this is the &quot;high water mark&quot;. *&#47;<br>\ttrx_id_t\tm_low_limit_id;<br><br>\t&#47;** The read should see all trx ids which are strictly<br>\tsmaller (&lt;) than this value.  In other words, this is the<br>\tlow water mark&quot;. *&#47;<br>\ttrx_id_t\tm_up_limit_id;<br><br>\t&#47;** trx id of creating transaction, set to TRX_ID_MAX for free<br>\tviews. *&#47;<br>\ttrx_id_t\tm_creator_trx_id;<br><br>\t&#47;** Set of RW transactions that was active when this snapshot<br>\twas taken *&#47;<br>\tids_t\t\tm_ids;","like_count":0},{"had_liked":false,"id":194209,"user_name":"我是爹","can_delete":false,"product_type":"c1","uid":1269600,"ip_address":"","ucode":"E02D8A7A916B61","user_header":"https://static001.geekbang.org/account/avatar/00/13/5f/60/7ea2d646.jpg","comment_is_top":false,"comment_ctime":1585037678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585037678","product_id":100020801,"comment_content":"如果事务 B 在 事务 C 之前 ， 执行了查询 select k from table where id=1;<br>这个时候， 事务 B 更新的时候会是 什么情况","like_count":0},{"had_liked":false,"id":193911,"user_name":"库尔斯","can_delete":false,"product_type":"c1","uid":1085569,"ip_address":"","ucode":"BC2F220993C3ED","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIG210UcWicnKgOjBJC3CUxiaRImsiaqscVLyABrA4Kshm7hReicSuyRvfe1x07ydoT8WknNh2QLxU3rA/132","comment_is_top":false,"comment_ctime":1584980255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584980255","product_id":100020801,"comment_content":"“在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“<br>老师，既然这个活跃事务数组是该事务启动瞬间创建的，那该事务的id就应该是最大的，为什么还有后面说的“当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。”","like_count":0},{"had_liked":false,"id":192877,"user_name":"*.小涛","can_delete":false,"product_type":"c1","uid":1077163,"ip_address":"","ucode":"DE9C2362C5B224","user_header":"https://static001.geekbang.org/account/avatar/00/10/6f/ab/519714d3.jpg","comment_is_top":false,"comment_ctime":1584877436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584877436","product_id":100020801,"comment_content":"很仔细","like_count":0},{"had_liked":false,"id":191796,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1584797006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584797006","product_id":100020801,"comment_content":"从开始的看文章吃力，到目前的流畅。大多时候，每篇的评论都能刷一个小时以上，集思广益，学习了不少。","like_count":0},{"had_liked":false,"id":190121,"user_name":"jjyyun","can_delete":false,"product_type":"c1","uid":1592576,"ip_address":"","ucode":"8824654F673087","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIzE6JOuXsOamCWiaq8sHHVyCK44bdIOEqnE42veoZPEqxs5IJ8RT1Hicz0ZlPQFcbEFSwjV7icrfEw/132","comment_is_top":false,"comment_ctime":1584604514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584604514","product_id":100020801,"comment_content":"“begin&#47;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令”，看到这个觉得和第三章隔离级别下创建一致性视图的例子有点矛盾，仔细看才发现第三章的例子中，事务A在启动之后执行了select，不看这一章就会以为begin之后就创建了一致性视图，如果分析正确，希望老师在第三章那边做个说明。","like_count":0},{"had_liked":false,"id":189738,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1584544562,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584544562","product_id":100020801,"comment_content":"老师你好，文章里说“begin&#47;start transaction 启动方式，一致性视图是在执行第一个快照读语句时创建的；”高低水位，和视图数组都是执行第一个读语句时创建的吗？另外trx_id是begin时就创建的还是执行第一个读语句时创建的？","like_count":0},{"had_liked":false,"id":189107,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1584455850,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1584455850","product_id":100020801,"comment_content":"什么情况下提交的事务还会在数组中呢。","like_count":0,"discussions":[{"author":{"id":1475017,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/WnBSns7n0sHzbXaoKyr5SKpnyxNMu1ib0uN3JKic4DVJqWvVqYFtPSxNo2fQfnpg47QxaVK1BPdL6hEZeTLXMmGQ/132","nickname":"Geek_7efe82","note":"","ucode":"BA827CF76C3D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212333,"discussion_content":"还有一种情况是读提交的场景，就拿图2来说，如果图中的事务提交顺序改为B>A>C（B最先提交，A在select的时候，C还未提交），那么就出现了事务id在黄色区域，但是不在数组中情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584961475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475017,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/WnBSns7n0sHzbXaoKyr5SKpnyxNMu1ib0uN3JKic4DVJqWvVqYFtPSxNo2fQfnpg47QxaVK1BPdL6hEZeTLXMmGQ/132","nickname":"Geek_7efe82","note":"","ucode":"BA827CF76C3D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212113,"discussion_content":"个人觉得多个事务是有概率并发执行的，此时多个线程可能会统一先拿到事务id，然后再开始执行，这时事务id大的可能在事务id小的创建视图数组之前就已经提交了，虽然属于黄色区域，但是不在数组中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584936100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187600,"user_name":"崔岩","can_delete":false,"product_type":"c1","uid":1341851,"ip_address":"","ucode":"3745C1AC840BE1","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/9b/4b6c66fe.jpg","comment_is_top":false,"comment_ctime":1584169269,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584169269","product_id":100020801,"comment_content":"老师，我有一个疑问想请教下，就是图8那种情况，事务102已经提交了，然后事物101在读取的时候会创建readview，［100，101］，那么102大于最大的101不在这个范围内，应该读取不到才对啊？","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280237,"discussion_content":"RC下，语句执行的时候才分配事务id，这样的话ABC事务的id应该为102 101 100，这时按代码逻辑去分析，事务A的视图数组为[101,102],100小于低水位，所以事务C产生的数据版本对A可见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591516755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186803,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1583929953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583929953","product_id":100020801,"comment_content":"1.“事务 A 的视图数组就是[99,100], 事务 B 的视图数组是[99,100,101], 事务 C 的视图数组是[99,100,101,102]”，为什么这里面的99不是90呢，99要怎么理解呢？2.A&#47;B&#47;C当前trx_id是100&#47;101&#47;102,那么是不是他们的低水位是都是99，高水位是101&#47;102&#47;103？","like_count":0},{"had_liked":false,"id":186533,"user_name":"秦穆之","can_delete":false,"product_type":"c1","uid":1489177,"ip_address":"","ucode":"709C49BFCBB776","user_header":"https://static001.geekbang.org/account/avatar/00/16/b9/19/f4ef2c9a.jpg","comment_is_top":false,"comment_ctime":1583859003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583859003","product_id":100020801,"comment_content":"每次读都有不同的收获。","like_count":0},{"had_liked":false,"id":183901,"user_name":"Iflei","can_delete":false,"product_type":"c1","uid":1351215,"ip_address":"","ucode":"812264ADE9CB33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AyccJq7eg6w3aCn7AxpicdplGhhY2xYOJLd9q2Xcjqxdbb6HO7rU4p37oxCjUnrcydpQVjNgcIhxOLKsI4w2KWQ/132","comment_is_top":false,"comment_ctime":1583159435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583159435","product_id":100020801,"comment_content":"老师，3a感觉挺疑惑的，落在黄色部分不就是在数组中吗？","like_count":0},{"had_liked":false,"id":183653,"user_name":"小李子","can_delete":false,"product_type":"c1","uid":1196293,"ip_address":"","ucode":"C5593E33CA6F4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/05/5ba603f2.jpg","comment_is_top":false,"comment_ctime":1583107956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583107956","product_id":100020801,"comment_content":"老师好，文中说，高水位是当前系统已经创建过的最大事务id+1，然后后面 《图4 事务A查询数据逻辑图》下，对事务A的分析，说事务A的视图数组是[99,100]，对于事务B产生的数据(1,3)，版本是101，“比高水位大”，此时不是还有事务id是102的么，那高水位至少也是102+1=103，为什么会比高水位大呢？","like_count":0},{"had_liked":false,"id":183647,"user_name":"小李子","can_delete":false,"product_type":"c1","uid":1196293,"ip_address":"","ucode":"C5593E33CA6F4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/05/5ba603f2.jpg","comment_is_top":false,"comment_ctime":1583106295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583106295","product_id":100020801,"comment_content":"老师好，关于《图3  数据版本可见性规则》，有几个问题想请教一下：<br>问题1、水平方向从左到右，是代表事务ID越来越大吗？<br>问题2：如果数据版本的row trx_id落在绿色部分，文中说该版本是已提交的事务或者当前事务自己生成的，那么如果是当前事务自己生成的话，会把当前事务的id赋值给row trx_id，那岂不是说，当前事务就是已提交事务（绿色部分为已提交事务）？<br>问题3：如果数据版本的row trx_id落在红色部分，这种情况是怎么产生的，将来启动的事务不是还没生成吗，数据版本怎么会被赋值为这样的值？<br>问题4：如果数据版本的row trx_id落在黄色部分，其中的b情况，是否意思是，这类事务，它的id是晚于最小活跃事务id对应的事务启动的，但它是在当前事务启动之前已经提交的事务？","like_count":0},{"had_liked":false,"id":182247,"user_name":"乔丹","can_delete":false,"product_type":"c1","uid":1217413,"ip_address":"","ucode":"D832A9F97A0C7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/85/f5d9474c.jpg","comment_is_top":false,"comment_ctime":1582733537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582733537","product_id":100020801,"comment_content":"看了两遍，终于看明白了。<br> 核心就是搞清楚视图产生时，当前row trx_id是多少，自己的id是多少。<br>1. 先找和row trx_id= self id的版本；<br>2. 若找不到, 则找自己最低水位的row trx_id的版本取数据。<br><br>read commit模式，就是每个语句都会生成一个视图。 直接查最新提交的那个版本数据就行了。<br>","like_count":0},{"had_liked":false,"id":181998,"user_name":"独舟泛海","can_delete":false,"product_type":"c1","uid":1238514,"ip_address":"","ucode":"E35C8CEFAF062D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/f2/21ea4d37.jpg","comment_is_top":false,"comment_ctime":1582689567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582689567","product_id":100020801,"comment_content":"每个数据的row trx_id就是事务的id，那么这个一定不是有序的吧？<br>V1，V2，V3，V4是逻辑意义上的数据版本吗","like_count":0},{"had_liked":false,"id":181818,"user_name":"InfoQ_5bf9066b4c66","can_delete":false,"product_type":"c1","uid":1289147,"ip_address":"","ucode":"DDC7002C73B3F1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJB3WhdjBiaQ2kwWeKzry3GUnzlUYrJxc5Jaecz8ET8TNG1R8sZYQnhAHaric4Sw3MjluOQZcPF8ohg/132","comment_is_top":false,"comment_ctime":1582639191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582639191","product_id":100020801,"comment_content":"InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。<br>并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。<br>这两句好像有点绕啊，唯一的事务ID叫transaction id，又把 transaction id 赋值给事务ID，意思是这俩就是一模一样的？","like_count":0},{"had_liked":false,"id":181484,"user_name":"湛","can_delete":false,"product_type":"c1","uid":1228275,"ip_address":"","ucode":"08D2E233A952C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/f3/a59e8c99.jpg","comment_is_top":false,"comment_ctime":1582549703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582549703","product_id":100020801,"comment_content":"请问这个版本号和创建版本号 和删除版本号有什么关系","like_count":0},{"had_liked":false,"id":180192,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1582207612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582207612","product_id":100020801,"comment_content":"事务是通过mvcc来实现的。最终状态+undolog实现。其中每个undolog都被打上 事务编号；在rr模式下，当启动一个事务的时候，会将当前正在活跃的事务编号记录下来。然后 比当前事务号小的同时不再活跃队列中的编号可见。其他的都不可见。","like_count":0},{"had_liked":false,"id":178779,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1149152,"ip_address":"","ucode":"8736333CBF3F0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/e0/576c9598.jpg","comment_is_top":false,"comment_ctime":1581822405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581822405","product_id":100020801,"comment_content":"老师有个疑惑希望能解答下，数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位，在老师的实验图4里，视图数组事物A低水位是99，高水位应该是100+1吧，这样就和事物B相等了?","like_count":0},{"had_liked":false,"id":178659,"user_name":"张德检","can_delete":false,"product_type":"c1","uid":1000997,"ip_address":"","ucode":"3433BFEBB1EC57","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/25/74c54c5a.jpg","comment_is_top":false,"comment_ctime":1581774790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581774790","product_id":100020801,"comment_content":"文章中的事务A是只读事务，只读事务的trx_id不应该是0吗？不分配事务ID","like_count":0},{"had_liked":false,"id":178556,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1512942,"ip_address":"","ucode":"D9A45EA47908C9","user_header":"https://static001.geekbang.org/account/avatar/00/17/15/ee/f461168f.jpg","comment_is_top":false,"comment_ctime":1581742230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581742230","product_id":100020801,"comment_content":"之前对只重复读的隔离级别只是停留在字面的理解上，现在看了这篇文章，豁然开朗，对MVCC的理解又更上一层；且对update更新数据时采用当前读这个理解更是点睛之笔。","like_count":0},{"had_liked":false,"id":177919,"user_name":"SnowsonZ","can_delete":false,"product_type":"c1","uid":1446972,"ip_address":"","ucode":"5AF76D55CCDC8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/14/3c/d6be29f3.jpg","comment_is_top":false,"comment_ctime":1581528649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581528649","product_id":100020801,"comment_content":"一致性视图，当前读，行锁。<br>MVCC: 多版本并发控制。多版本： 利用undo log和事务id记录一条数据的多个版本。  并发：多个事务，涉及前后同时更新操作，则后者被行锁阻塞。  当前读： 事务中更新操作时，一定读取最新的数据。一致性视图： 可重复读： 事务开启时获取视图。  读提交： 每次执行SQL前重新获取视图","like_count":0},{"had_liked":false,"id":177916,"user_name":"SnowsonZ","can_delete":false,"product_type":"c1","uid":1446972,"ip_address":"","ucode":"5AF76D55CCDC8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/14/3c/d6be29f3.jpg","comment_is_top":false,"comment_ctime":1581528067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581528067","product_id":100020801,"comment_content":"“如果落在黄色部分，那就包括两种情况<br>a.  若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。”<br><br>黄色部分为低水位和高水位之间，那不不应该都在数组中吗？","like_count":0},{"had_liked":false,"id":177007,"user_name":"月迷津渡","can_delete":false,"product_type":"c1","uid":1264111,"ip_address":"","ucode":"2B18B2FE3DAC3B","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/ef/02401473.jpg","comment_is_top":false,"comment_ctime":1581247435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581247435","product_id":100020801,"comment_content":"这篇讲的太好了，茅塞顿开","like_count":0},{"had_liked":false,"id":175463,"user_name":"风中劲草","can_delete":false,"product_type":"c1","uid":1819016,"ip_address":"","ucode":"C6E6B0678B705D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL74XxxFCSm80YQ5mWu1DicGUY1jJZHiabC9IMALicpsSwsNqZkY6QY1tX4FaDiaNrjJNh6Kz7WuYwWEQ/132","comment_is_top":false,"comment_ctime":1580725889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580725889","product_id":100020801,"comment_content":"是否可以这么理解，begin&#47;start transaction事务的启动是在第一次加排它锁的时候开始的，commit关闭事务的时候释放锁？","like_count":0},{"had_liked":false,"id":174940,"user_name":"李荣凯","can_delete":false,"product_type":"c1","uid":1520177,"ip_address":"","ucode":"D7567E80F800E7","user_header":"https://static001.geekbang.org/account/avatar/00/17/32/31/b6770a2d.jpg","comment_is_top":false,"comment_ctime":1580467109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580467109","product_id":100020801,"comment_content":"老师我一直有一个疑惑：<br>  文中图3黄色部分是未提交事务集合怎么还会包含已经提交了的事务啊？<br>如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>视图数组不是包括事务启动瞬间所有启动了但是没有提交的事务id,并不包含b情况的已经提交了的事务生成的trx_id啊","like_count":0},{"had_liked":false,"id":174780,"user_name":"kater","can_delete":false,"product_type":"c1","uid":1501696,"ip_address":"","ucode":"EDF14202C421CC","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/00/1b5a8af1.jpg","comment_is_top":false,"comment_ctime":1580379614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580379614","product_id":100020801,"comment_content":"感谢这补充的一讲让我走出了前面的谜团，尤其是图解+分析，很详细，基础学完了才发一条评论，继续学习","like_count":0},{"had_liked":false,"id":174709,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1580358202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580358202","product_id":100020801,"comment_content":"请教下老师，实际判断时是否可以只考虑高水位和数组？<br>1.大于等于高水位则未开始事务，不可见；<br>2.小于高水位继续判断是否在未提交数组中，存在则不可见，不存在则是已完成提交，可见","like_count":0},{"had_liked":false,"id":174439,"user_name":"Untitled","can_delete":false,"product_type":"c1","uid":1039464,"ip_address":"","ucode":"8DD6ABA3E81A2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/68/006ba72c.jpg","comment_is_top":false,"comment_ctime":1580208803,"is_pvip":false,"replies":[{"id":"67794","content":"👍 刚好不能出门，充实的春节~","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1580224619,"ip_address":"","comment_id":174439,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1580208803","product_id":100020801,"comment_content":"老师把前面几节和本节的知识串了起来讲，把前面看不懂的问题在本节的例子里似乎解决了。我现在是大概扫一遍课程所有内容，对于只会基本用mysql的增删改查语句的我来说，老师的思考题，没有会做的。。。。。但只是短暂的！【不过看了下课表安排，这只是基础知识部分，优优地不敢往下学习实战部分】。年初一-初四，都花在看课上，还是挺充实的。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482401,"discussion_content":"👍 刚好不能出门，充实的春节~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580224619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174041,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1579919989,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1579919989","product_id":100020801,"comment_content":"当前读的那条规则感觉比较隐蔽，但也没什么不好的。<br><br>一致性读、当前读、两阶段提交，这些概念我还得再琢磨一下。<br><br>对于课后题，比较有意思的是，我这边没有办法复现，能够执行那条 update 语句。我的 MySQL 版本是 8.0.13，操作系统是 MacOS，不知道是不是被修复了？<br><br>如果想要复现，是不是需要再开一个命令行，然后执行 begin; ？自己试了一下，没有成功。<br><br>如果能够复现出来的话，那么就是说 MySQL 没有查询到 id=c 的行，不知道别的数据库是否允许这样的操作，看起来似乎比较奇怪。更新语句的意思似乎是说，如果两列的值一样，则把后一列置零。<br><br>如果是在开发过程中，对于比较大的表，这种操作是不是会占用太长的时间？<br><br>那么如果让应用来更新是不是比用 SQL 语句更新更好？","like_count":0},{"had_liked":false,"id":172589,"user_name":"Iqexception","can_delete":false,"product_type":"c1","uid":1109901,"ip_address":"","ucode":"597A335EAC50A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/8d/5c0d2e9c.jpg","comment_is_top":false,"comment_ctime":1579228652,"is_pvip":true,"replies":[{"id":"66923","content":"都是“当前读”<br>不过这里说“读”不太恰当，可以认为是会访问最新版本（并加锁）","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1579233381,"ip_address":"","comment_id":172589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579228652","product_id":100020801,"comment_content":"除了更新操作，删除和插入是当前读还是快照读。delete from 。。，insert as。。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481785,"discussion_content":"都是“当前读”\n不过这里说“读”不太恰当，可以认为是会访问最新版本（并加锁）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579233381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171123,"user_name":"sudo","can_delete":false,"product_type":"c1","uid":1188517,"ip_address":"","ucode":"EA0F8116999557","user_header":"http://thirdwx.qlogo.cn/mmopen/g7TWmGqjoiaSFWknFpTPAia5rPOmzEZiaGK8icd5HGEXlfaYJBoKvLn5BkqGkyTZOqDTC3NMHXUbH3tdLJzicAyickRYdP4xcM3ajia/132","comment_is_top":false,"comment_ctime":1578852558,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578852558","product_id":100020801,"comment_content":"<br>有一点疑问：数据库数据txid 为90。当前有个未提交的事务 txid 为99 创建事务A时 事务A的txid 为100，事务A的一致性视图为 [99, 100]。按照高水位的定位：当前系统创建事务的最大txid+1。难道这里的“当前系统工程创建的事务最大txid 不包括事务A的100”。<br><br>绿色：90<br>黄色：99.100<br>红色：101……","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143285,"discussion_content":"当前系统最大事务id就是100啊，所以高水位是101。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579498897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171121,"user_name":"sudo","can_delete":false,"product_type":"c1","uid":1188517,"ip_address":"","ucode":"EA0F8116999557","user_header":"http://thirdwx.qlogo.cn/mmopen/g7TWmGqjoiaSFWknFpTPAia5rPOmzEZiaGK8icd5HGEXlfaYJBoKvLn5BkqGkyTZOqDTC3NMHXUbH3tdLJzicAyickRYdP4xcM3ajia/132","comment_is_top":false,"comment_ctime":1578852530,"is_pvip":false,"replies":[{"id":"66422","content":"多少可重复读","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1578900159,"ip_address":"","comment_id":171121,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578852530","product_id":100020801,"comment_content":"如果没有开启事务，select 是不是都是当前读？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481246,"discussion_content":"多少可重复读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578900159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170751,"user_name":"悉数沉淀","can_delete":false,"product_type":"c1","uid":1536066,"ip_address":"","ucode":"D84136FC8889BA","user_header":"https://static001.geekbang.org/account/avatar/00/17/70/42/82c2947a.jpg","comment_is_top":false,"comment_ctime":1578705861,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1578705861","product_id":100020801,"comment_content":"delete from t limit 20000为什么会造成主从延迟呢<br>","like_count":0,"discussions":[{"author":{"id":1303322,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/1a/061e77b6.jpg","nickname":"亢星东","note":"","ucode":"5E4063E83B2BB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305677,"discussion_content":"这个记录回滚日志，那么日志会很大，同步日志也需要很长时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600053595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143298,"discussion_content":"因为mysqldump占据着表的mdl读锁，而binlog有可能被阻塞，则主从延迟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579499388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170129,"user_name":"爱上飞飞的面码","can_delete":false,"product_type":"c1","uid":1102362,"ip_address":"","ucode":"3399E3DC30776E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/1a/19365924.jpg","comment_is_top":false,"comment_ctime":1578535745,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1578535745","product_id":100020801,"comment_content":"如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；  <br>这段不太理解，当前事务自己生成的不是在黄红部分吗？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143300,"discussion_content":"当前事务生成的在黄色部分啊，没在红色部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579499441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1102362,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/1a/19365924.jpg","nickname":"爱上飞飞的面码","note":"","ucode":"3399E3DC30776E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147854,"discussion_content":"文中说在绿色部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579678449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143300,"ip_address":""},"score":147854,"extra":""},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1102362,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/1a/19365924.jpg","nickname":"爱上飞飞的面码","note":"","ucode":"3399E3DC30776E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157141,"discussion_content":"当前事务生成的在黄色部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580445729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":147854,"ip_address":""},"score":157141,"extra":""}]}]},{"had_liked":false,"id":169723,"user_name":"小笨的爱人","can_delete":false,"product_type":"c1","uid":1051953,"ip_address":"","ucode":"A40788BEDB9DC8","user_header":"https://static001.geekbang.org/account/avatar/00/10/0d/31/74478b8f.jpg","comment_is_top":false,"comment_ctime":1578414877,"is_pvip":false,"replies":[{"id":"66228","content":"是的，感谢指出，我们勘误下","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1578753899,"ip_address":"","comment_id":169723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578414877","product_id":100020801,"comment_content":"老师您好这一句是不是多个（第）：第一种启动方式，一致性视图是在第执行第一个快照读语句时创建的；","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480693,"discussion_content":"是的，感谢指出，我们勘误下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578753899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169149,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1578280787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578280787","product_id":100020801,"comment_content":"在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图","like_count":0},{"had_liked":false,"id":167669,"user_name":"昂头的笑脸","can_delete":false,"product_type":"c1","uid":1134522,"ip_address":"","ucode":"005611C256E559","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/ba/6cefa19a.jpg","comment_is_top":false,"comment_ctime":1577890394,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577890394","product_id":100020801,"comment_content":"问个问题： 图3中的黄色区域已经是未提交事务了，为什么图3下面的描述第3点，还在说如果事务已经提交了呢？ 是不是矛盾了？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143592,"discussion_content":"因为在这个一致性视图下，有可能开始是未提交，后来又提交了呢，比如102那个位置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579515787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167556,"user_name":"xu_xuanjie","can_delete":false,"product_type":"c1","uid":1624667,"ip_address":"","ucode":"C60311B38ACEF9","user_header":"https://static001.geekbang.org/account/avatar/00/18/ca/5b/f01eed53.jpg","comment_is_top":false,"comment_ctime":1577858455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577858455","product_id":100020801,"comment_content":"--------- 可重复读 ---------<br>1、行(row)  -&gt; 启动事务(事务trx_id) -&gt; 多个事务多版本(每个版本row trx_id)<br>2、数组 = 事务启动瞬间(事务trx_id) + &quot;活跃&quot;的所有事务 = 数组低水位(数组中trx_id最小)-数组高水位(系统创建过的最大trx_id+1) = 事务的一致性视图(read-view)<br>数组特点：<br>a 这个数组是针对某一个启动事务(trx_id)构造的<br>b 这个数组中的所有事务都是未提交状态<br><br>3、数据版本的可见性 = [row trx_id] 与 [数组] 的对比结果：<br>a、版本未提交，不可见 (row trx_id在数组中不可见);<br>b、版本已提交，但是是在视图创建后提交的，不可见 (row trx_id不在数组中且是数组构造之后的不可见，用俗话说：分手前的事和我有关系，分手后与我无关)；<br>c、版本已提交，而且是在视图创建前提交的，可见 (row trx_id不在数组中且是数组构造之前的可见)。<br><br>4、当前读(最新row trx_id)：a、update语句,  先读后改（如果行锁被占有就要等待）;  b、加锁的select语句<br><br>--------- 读提交 ---------<br>5、读提交在执行语句时重新构造数组，如果事务未提交会存在数组中，属于第3点a结果(不可见)；如果事务已提交，由于重新构造数组所以提交的事务肯定只在构造数组之前，属于第3点c结果(可见)。<br>老师，这是我读完文章的理解，不知是否理解有偏差？","like_count":0},{"had_liked":false,"id":166843,"user_name":"learn more","can_delete":false,"product_type":"c1","uid":1128702,"ip_address":"","ucode":"0EF628B2E0F95E","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/fe/00ddeb81.jpg","comment_is_top":false,"comment_ctime":1577613150,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577613150","product_id":100020801,"comment_content":"看了不知道多少遍，第一遍看的时候差点奔溃，最近再来看时发现好像懂了。有个问题，文中提到<br>“比如，对于图 2 中的数据来说，如果有一个事务，它的低水位是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 计算出 V3，所以在它看来，这一行的值是 11。”<br>我觉得这个答案不准确，为什么呢？因为只假设了低水位是 18 ，没有确定高水位的值，那么 25 有可能落在黄色区域但是数组中并不存在，也就是 3-b 的情况，所以我的答案是：11 或 22","like_count":0,"discussions":[{"author":{"id":1188517,"avatar":"http://thirdwx.qlogo.cn/mmopen/g7TWmGqjoiaSFWknFpTPAia5rPOmzEZiaGK8icd5HGEXlfaYJBoKvLn5BkqGkyTZOqDTC3NMHXUbH3tdLJzicAyickRYdP4xcM3ajia/132","nickname":"sudo","note":"","ucode":"EA0F8116999557","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131857,"discussion_content":"同样的疑问。\n还有一点疑问：数据库数据txid 为90。当前有个未提交的事务 txid 为99 创建事务A时 事务A的txid 为100，事务A的一致性视图为 [99, 100]。按照高水位的定位：当前系统创建事务的最大txid+1。难道这里的“当前系统工程创建的事务最大txid 不包括事务A的100”。\n绿色：90\n黄色：99.100\n红色：101……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578852468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165801,"user_name":"书中迷梦","can_delete":false,"product_type":"c1","uid":1103010,"ip_address":"","ucode":"1C6B697F41698F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/a2/fa41c8a8.jpg","comment_is_top":false,"comment_ctime":1577324718,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577324718","product_id":100020801,"comment_content":"把可重复读和读已提交两个事物级别讲的挺清楚，有点没有支出的是，select ...from  X  where  xxx for update 这个坑，就是条件最好是主键索引或者唯一索引的字段，不然就可能会导致表锁","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143594,"discussion_content":"为啥。只是当前读而矣。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579515865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165569,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1577261840,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577261840","product_id":100020801,"comment_content":"图8是不是错了，按照时间顺序的话，应该是A（102） B（101）C（100）吧","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145491,"discussion_content":"没错，你不能按发生时间算，按谁先申请资源算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579569744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165496,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1577245671,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577245671","product_id":100020801,"comment_content":"老师，求解3b情况是如何发生的。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145495,"discussion_content":"比如事务C，如果在update下面加一条select，此时3b就发生了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579569799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163473,"user_name":"迷","can_delete":false,"product_type":"c1","uid":1294716,"ip_address":"","ucode":"F280A7D44470F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/7c/63f60a17.jpg","comment_is_top":false,"comment_ctime":1576727095,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576727095","product_id":100020801,"comment_content":"老师你好，我有一个问题，上面举例的都是不同事务之间数据的可见性，如果一个事务中：<br>    (id,v) -&gt;(1,1)<br>    start transaction;<br>    update t set v = v+1 where id = 1;<br>    select v from t where id = 1;<br>    此时v的值应该是2，但是为何是2呢<br>   分析：<br>        此事务开启时 v 的值是1，虽然update了，但是并未提交，理论上应该2是不可见的，但是查到的是2","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145510,"discussion_content":"已经提交了，只是没有显示声明罢了，而此时就遵循的是“对于一个事务视图来说，自己的更新总是可见的”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579569972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163011,"user_name":"Mr._CYJ","can_delete":false,"product_type":"c1","uid":1055317,"ip_address":"","ucode":"7DE3AE1483CFE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/55/ac1873fb.jpg","comment_is_top":false,"comment_ctime":1576639843,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576639843","product_id":100020801,"comment_content":"老师，请问下，落在黄色部分 的第二种情况，怎么会出现呢？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145526,"discussion_content":"比如事务C，如果在update下面加一条select，此时3b就发生了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579570134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162121,"user_name":"Geek_b617bf","can_delete":false,"product_type":"c1","uid":1220552,"ip_address":"","ucode":"9BAFC3B184B1D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/c8/0318c83e.jpg","comment_is_top":false,"comment_ctime":1576463733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576463733","product_id":100020801,"comment_content":"这章的知识挺有用的，面试高频题","like_count":0},{"had_liked":false,"id":159640,"user_name":" 臣馟飞扬","can_delete":false,"product_type":"c1","uid":1116188,"ip_address":"","ucode":"F2F882B7678055","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/1c/ef15e661.jpg","comment_is_top":false,"comment_ctime":1575711404,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575711404","product_id":100020801,"comment_content":"如果落在黄色部分，那就包括两种情况：<br>a.  若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b.  若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>----------------------<br>实在理解不了。。。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145527,"discussion_content":"比如事务C，如果在update下面加一条select，此时3b就发生了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579570170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158439,"user_name":"样儿","can_delete":false,"product_type":"c1","uid":1640757,"ip_address":"","ucode":"AB01047991559C","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/35/7d2ced23.jpg","comment_is_top":false,"comment_ctime":1575370761,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575370761","product_id":100020801,"comment_content":"begin;<br>select * from t where id = 1;<br>update t set name = &#39;xxxx&#39; where id = 1;<br>select * from t where id = 1;<br>commit;<br>老师，为什么我测试的时候。上面的两次select 查询 出来的结果是一样的。中间update后，后一个查询到的还是和第一次一样。mysql 8.0.15，隔离级别RR","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145532,"discussion_content":"不太可能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579570297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158094,"user_name":"Geek_d432e7","can_delete":false,"product_type":"c1","uid":1736444,"ip_address":"","ucode":"11FCAA56EE8120","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZJjl8bEt5zdqufZ304Ra0eibWtJPoVqpMjhu5xgd0o2oAj1ib6MBBWicHzTSFkEPiahxWwiaGsPib4S6N38kCFF0pDDg/132","comment_is_top":false,"comment_ctime":1575332647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575332647","product_id":100020801,"comment_content":"这个提交的概念与传统事务提交的概念不同，此处的提交属于mvcc机制内部提交，而非传统意义的提交，此处的提交并非是将整个事务完成提交操作，而是在mvcc内部生成一个新的数据版本的概念。","like_count":0},{"had_liked":false,"id":157412,"user_name":"aur0ra","can_delete":false,"product_type":"c1","uid":1320901,"ip_address":"","ucode":"907D53065562A2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL3HXyQ70efQjb92ueicfuQiaemP8nmdbsG4DbGRGKtIVf57aRjDX78n2Vu4N6L0zibZAlMLDM161ekg/132","comment_is_top":false,"comment_ctime":1575140410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575140410","product_id":100020801,"comment_content":"对于可不可读整理了一下，有不对之处请指出哈<br>up_limit_id 事务开始前最后提交的事务id<br>trx_id_list[] 事务开始前未提交的事务列表<br>t_id 当前数据行的事务id<br>undo_t_id_list[] 数据行历史版本t_id列表<br><br>判断当前行数据可不可看形如 <br>a = func (t_id, up_limit_id, trx_list) bool {<br>    if(t_id &lt;= up_limit_id &amp;&amp; ![trx_list]){<br>        return true<br>    }<br>    return false<br>}<br><br>if(a(t_id, up_limit_id, trx_list)){ &#47;&#47;判断当前行是否可读<br>    return 当前数据<br>}<br>for (t_id in undo_tid_list){&#47;&#47;如果不可读则去UNDOLOG里面找可读的历史数据<br>    if(a(t_id, up_limit_id, trx_list)){<br>        return undo重放该数据(xxxx)<br>    }<br>}<br><br>另外","like_count":0},{"had_liked":false,"id":157326,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1667551,"ip_address":"","ucode":"A7832351182AEC","user_header":"https://static001.geekbang.org/account/avatar/00/19/71/df/5c17092d.jpg","comment_is_top":false,"comment_ctime":1575110037,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575110037","product_id":100020801,"comment_content":"丁老师您好，关于“高水位“有个问题，引用原文「当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。」再加上我看有个评论里面您回复在创建事务的一致性视图时，系统会加锁保护，保证不会有心的事务产生，那么这个高水位不就一直是当前事务的ID了吗？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295110,"discussion_content":"及时是rr也不一定是当前事务id+1，因为获取事务id和生成视图这两步不是原子的，可能刚好有新的事务id申请了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596092199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145547,"discussion_content":"不是，活跃数组里面的id是未提交的事务，也有可能比这些事务id大的事务已经完成，但是在此时创建的事务视图的高水位应该按照最大事务id+1算，不能按照当前事务算。你如果按照RR，应该是按照当前事务id+1。如果按照RC，那我所说的你就会感觉更明显了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579570618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157097,"user_name":"陈浩","can_delete":false,"product_type":"c1","uid":1705648,"ip_address":"","ucode":"B75B253D4002C8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/06/b0/067878ae.jpg","comment_is_top":false,"comment_ctime":1575030428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575030428","product_id":100020801,"comment_content":"图3中，黄色为未提交事务集合 , 当 row trx_id 落在黄色集合中：<br>  a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>  b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>我的理解：当 row trx_id 落在黄色集合中，那就是未提交事务集合，就算后来提交了，也是不可见的。那  “b. 若 row trx_id 不在数组中……” 中的数组是什么数组 ？整句话又是什么意思？<br>","like_count":0},{"had_liked":false,"id":157087,"user_name":"陈浩","can_delete":false,"product_type":"c1","uid":1705648,"ip_address":"","ucode":"B75B253D4002C8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/06/b0/067878ae.jpg","comment_is_top":false,"comment_ctime":1575028226,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575028226","product_id":100020801,"comment_content":"老师，我有2个问题： <br>  1. transaction id 是在 begin;之后生成的，还是在生成一致性视图的时候生成的？<br>  2. transaction id 和 未提交事务集合是同时生成的吗？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295112,"discussion_content":"如果用start transaction with consistent snapshot替代begin就是直接生成了id，不用等到执行语句了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596092431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145555,"discussion_content":"1、begin是执行到第一个操作InnoDB表的语句，事务才开始启动，也就是一致性视图是在执行第一个快照语句时创建的。\n2、应该是把未提交的事务id都创建了，然后做成一个视图数组吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579570852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156126,"user_name":"枫","can_delete":false,"product_type":"c1","uid":1310357,"ip_address":"","ucode":"819CA7B97DD7E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/95/39856e4e.jpg","comment_is_top":false,"comment_ctime":1574822172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574822172","product_id":100020801,"comment_content":"这篇文章看了4遍才看懂。。。","like_count":0},{"had_liked":false,"id":155277,"user_name":"Simple life","can_delete":false,"product_type":"c1","uid":1571460,"ip_address":"","ucode":"1902D7F72FB43F","user_header":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","comment_is_top":false,"comment_ctime":1574673713,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574673713","product_id":100020801,"comment_content":"在更新逻辑部分有一段话：<br>    所以，在执行事务 B 查询语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，是自己的更新，可以直接使用，所以查询得到的 k 的值是 3。<br>假设又有个事务D在事务B的update 与 select 之间又更新了，事务B本次select 会看到的是什么值呢？还是当前事务更新的值吗？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145566,"discussion_content":"RR级别下，还是当前事务更新的值，因为事务B还没有提交，事务D即使想执行update会阻塞，因为行锁的作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152618,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1574051480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574051480","product_id":100020801,"comment_content":"RR默认情况下，`BEGIN&#47;START STANSACTION`，创建一个`READ-VIEW`，不单是读(SELECT)的情况，其他`DML`语句也会触发创建。","like_count":0},{"had_liked":false,"id":151979,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1573826814,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573826814","product_id":100020801,"comment_content":"老师，在实际中，一般都默认设置DB的隔离级别为提交读吧。只有特殊情况下，才用到重复读？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145567,"discussion_content":"MySql默认是RR，SqlServer和Oracle是RC","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151978,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1573826420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573826420","product_id":100020801,"comment_content":"为何一个数据要有多个版本呢？我的理解<br>原因一：实现读和写不互斥，修改时不能直接修改原数据<br>原因二：为了支持可重复读隔离级别，在可重复读隔离级别下，不同时刻启动的两个事务，在都启动后的任一时刻，看到的View可能都不一样","like_count":0},{"had_liked":false,"id":151963,"user_name":"小于子","can_delete":false,"product_type":"c1","uid":1253735,"ip_address":"","ucode":"D47E878CA9CB3E","user_header":"https://static001.geekbang.org/account/avatar/00/13/21/67/e6f17ef0.jpg","comment_is_top":false,"comment_ctime":1573823238,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573823238","product_id":100020801,"comment_content":"老师请教一下:外部事务已经插入了一条记录这时还未提交，同时这时有一个内部事务进来，应该怎么配置内部事务的隔离级别才能查询不到外部提交的记录呢？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145572,"discussion_content":"根据你的场景，插入还未提交，RR或者RC都查不到啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151048,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1573647463,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1573647463","product_id":100020801,"comment_content":"对于事务 A 查询语句的读数据流程中的第一步，读到数据 (1 ，3)的时候，这个时候的高水位按定义“系统中已经创建过的最大的事务 ID + 1”，应该为事务C的ID+1,即103。文中说“判断出 row trx_id=101，比高水位大，处于红色区域，不可见”，101不是比高水位小，按我的判断，落在黄色区域，然后事务A的数组视图不存在101，这样的话这个时候的数据版本不应该是可见的吗？<br>或许是我对于高水位的理解有问题？望丁老师解答一下，♪(･ω･)ﾉ","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145586,"discussion_content":"对于RR级别下，事务A的高水位是101，你要看事务视图创建时，系统当时已创建的最大事务id，当时创建的最大ID是100.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1019725,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","nickname":"学个球","note":"","ucode":"7343F3C0CA981D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182603,"discussion_content":"谢谢你的解惑！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582440207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145586,"ip_address":""},"score":182603,"extra":""},{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396061,"discussion_content":"不对吧，在创建事务id数组的时候，有可能其它事务也新创建了，这个时候事务的id会一直增大，并不是事务创建视图的那一瞬间的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632387720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145586,"ip_address":""},"score":396061,"extra":""}]}]},{"had_liked":false,"id":150419,"user_name":"anchor","can_delete":false,"product_type":"c1","uid":1083124,"ip_address":"","ucode":"24EECD40CC54C2","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/f4/331f33a7.jpg","comment_is_top":false,"comment_ctime":1573531366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573531366","product_id":100020801,"comment_content":"这篇文章看了几遍，按事务数组推下RC情况: 关于事务数组内，数据的事务id落在黄色区域内，如果在数组内存在，说明事务未提交，不可一见；数组内不存在，可见【问题:黄色区域内的事务id会变更吗？如果某个事务提交了？如不会变那这种情况只能是后启动的事务先执行成功提交了，否则是会被锁锁住的，这么理解对吗？】，对于在RC情况的查询，当语句执行时候才会生成事务数组 90|100,101|103 (102已提交不会在黄色区域内)，这时候读，101在黄色内，不可见，上一个是102，黄色区域内不存在102可见，所以是2","like_count":0},{"had_liked":false,"id":147115,"user_name":"Geek_55a272","can_delete":false,"product_type":"c1","uid":1674602,"ip_address":"","ucode":"7B12A9B322B3BF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJPHfGiaByESiaHPWbfQicjgap3unxDsxlG6JuUCNvEFJNLibNjeX4CQYNtsvXBXqTpBERUIPyiagGBXbg/132","comment_is_top":false,"comment_ctime":1572797522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572797522","product_id":100020801,"comment_content":"思考题:<br>表象原因:update 的影响行数是0rows 更新失败。<br>深层次原因:<br>原本的行的数据已经被更新为 0了,被其他事务 没有重新更新。<br>为什么查询结果仍然是原结果呢?<br>因为mvcc模式下 rr读的是当前事务id的最新数据项的值，同时 update失败 ，导致数据项没有记住当前的事务id<br>所以 select语句读的是事务开始的时候的数据项。 <br>解决方案:重新起一个事务 <br>可以基于cas 重试的思路。","like_count":0},{"had_liked":false,"id":146206,"user_name":"yc","can_delete":false,"product_type":"c1","uid":1670122,"ip_address":"","ucode":"2E01505284DC4E","user_header":"https://static001.geekbang.org/account/avatar/00/19/7b/ea/a64f7822.jpg","comment_is_top":false,"comment_ctime":1572456357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572456357","product_id":100020801,"comment_content":"老师有一个场景麻烦看看我理解得对不：有一张表主键是snid，我select状态为0的记录去遍历然后update（事务1），遍历的过程中某记录x被修改了status为1（事务2）。事务1的update条件是where snid ＝ k and status ＝0，那么事务1依然可以遍历到记录x但是update记录x时affect rows为0，因为update是当前读的，事务2已经在事务1去update之前把记录x状态修改了不为0；如果事务1的update条件是where snid ＝ k则仍然可以更新这条记录，因为snid不变。","like_count":0},{"had_liked":false,"id":146205,"user_name":"yc","can_delete":false,"product_type":"c1","uid":1670122,"ip_address":"","ucode":"2E01505284DC4E","user_header":"https://static001.geekbang.org/account/avatar/00/19/7b/ea/a64f7822.jpg","comment_is_top":false,"comment_ctime":1572456153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572456153","product_id":100020801,"comment_content":"请问老师以下场景我的理解是否正确：假设有一张表主键是snid，我select状态为0的记录去遍历然后update（事务1），遍历的过程中某记录x被修改了状态为1（事务2）。如果事务1的update条件是where snid ＝ k and status ＝0那么当我遍历到x记录并去update时，affect rows为0，因为更新是当前读的，事务2已经把该记录状态修改了不为0；如果事务1的update条件是where snid ＝ k则仍然可以更新这条记录，因为snid不变。","like_count":0},{"had_liked":false,"id":145593,"user_name":"董航","can_delete":false,"product_type":"c1","uid":1231787,"ip_address":"","ucode":"9CA208FD26F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/ab/1aac53bf.jpg","comment_is_top":false,"comment_ctime":1572322429,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572322429","product_id":100020801,"comment_content":"三刷，还是有收获，一下子看到了第八章","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145590,"discussion_content":"一看你就是没看评论区。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144587,"user_name":"Juc","can_delete":false,"product_type":"c1","uid":1217566,"ip_address":"","ucode":"EF82A73FAA7F8D","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/1e/973cda79.jpg","comment_is_top":false,"comment_ctime":1571973508,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571973508","product_id":100020801,"comment_content":"老师在事务A读数据的时候提到：<br>找到（1,3）的时候，判断出row trx_id=101,比高水位高，处于红色区域，不可见<br>高水位是当前系统里面已经创建过的事务ID的最大值+1，不就是103吗？<br>那101不是小于103，怎么就处于红色区域了？望老师解答","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145591,"discussion_content":"对于RR级别下，事务A的高水位是101，你要看事务视图创建时，系统当时已创建的最大事务id，当时创建的最大ID是100.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143555,"user_name":"Zubin","can_delete":false,"product_type":"c1","uid":1063979,"ip_address":"","ucode":"7390CD129F106E","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/2b/1a8660e9.jpg","comment_is_top":false,"comment_ctime":1571730248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571730248","product_id":100020801,"comment_content":"“当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。”<br>老师这个 +1 我觉得很奇怪，为什么要 +1 呢，比如我当前事务就是最大事务，那么加一后的下个事务，也不在数组中，又等于高水位，其实不是变成可见了？","like_count":0},{"had_liked":false,"id":143548,"user_name":"Zubin","can_delete":false,"product_type":"c1","uid":1063979,"ip_address":"","ucode":"7390CD129F106E","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/2b/1a8660e9.jpg","comment_is_top":false,"comment_ctime":1571729689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571729689","product_id":100020801,"comment_content":"“当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位”<br>老师这个我比较困扰我，“已经创建过的事务 ID 的最大值”，会不会就是当前事务 ID ，什么情况下不是当前事务 ID 呢？","like_count":0},{"had_liked":false,"id":143058,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1571624900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571624900","product_id":100020801,"comment_content":"mysqld -u root --transaction-isolation=repeatable-read  &amp;<br>Session1:                <br>begin; --第1步<br>select * from t; --第2步        <br>update t set c = 0 where id =c; --第6步<br>select * from t; --第7步<br>Session2:<br>begin; --第3步<br>update t set c = id + 1;--第4步<br>commit;--第5步<br><br>由于是可重复读，即使session2提交了，根据情况1，session1中第7步看到的仍然是原来的数据；而更新是当前读，所以Session1中第6步，看到的是最新的数据（id和c已经不等了）。","like_count":0},{"had_liked":false,"id":139875,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1046791,"ip_address":"","ucode":"091A0D95EE5E3C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/07/ee1bbd42.jpg","comment_is_top":false,"comment_ctime":1570759276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570759276","product_id":100020801,"comment_content":"数组里面的事务列表是 [ 92,93,95] ，但是事务94已经提交了，此时低水位是92，高水位是96, 事务94不在低水位区域，也不在高水位区域。它属于黄色区域3b场景。因为事务94可以先于95提交了。","like_count":0},{"had_liked":false,"id":139487,"user_name":"Geek_3d4013","can_delete":false,"product_type":"c1","uid":1497164,"ip_address":"","ucode":"99D29ED0FB38A8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLyHHeFsCArmvVRpvfic8uvG6qYJRCZHDb485ZaGzZStdQaexmhNa40xuJAnE5sjxshc067764WWcg/132","comment_is_top":false,"comment_ctime":1570667696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570667696","product_id":100020801,"comment_content":"版本一会是90，一会是99，应该是99吧！","like_count":0},{"had_liked":false,"id":139021,"user_name":"xiangxg8","can_delete":false,"product_type":"c1","uid":1634725,"ip_address":"","ucode":"710AB1E959A443","user_header":"","comment_is_top":false,"comment_ctime":1570527712,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1570527712","product_id":100020801,"comment_content":"这个高低水位这里好难理解，文章中说“在实现上,InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID,活跃指的就是，启动了但还没提交”。但是图3中又说，视图数组把所有的 row trx_id 分成了几种不同的情况，绿色的低水位代表已提交的事务。前面说数据中保存的是未提交，后面又说视图数组中又包含已提交。<br>","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145594,"discussion_content":"再仔细的自我理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579571985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138729,"user_name":"stand by me","can_delete":false,"product_type":"c1","uid":1643251,"ip_address":"","ucode":"66E43DD6441354","user_header":"https://static001.geekbang.org/account/avatar/00/19/12/f3/e54dae78.jpg","comment_is_top":false,"comment_ctime":1570434685,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1570434685","product_id":100020801,"comment_content":"老师您好，首先非常感谢您写的文章，收获挺大的，解决了很多困惑。<br><br>我这里有一个小疑问:<br>文中的&quot;b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。&quot;<br><br>这里的row trx_id不在数组中但是却又是在已开始却未提交事务里面，这个在什么样的情况下才会出现呢，这个集合不应该是包含了所有的已开始未提交事务id吗","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295118,"discussion_content":"同一条数据的trx_id数组不是严格从大到小的链表，而是undolog时间顺序的链表。快照的trxid数组，也不可能是严格连续递增的，就会存在（1,3,9,11）这种情况，trxid的比较也是先判断是不是落在快照trxid数组的范围，在判断是不是再里面真实存在的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596093507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145597,"discussion_content":"比如在事务C中的update后面加个select，是不是select可以获取值，这个可以认为是3b的解释吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135769,"user_name":"刘其润","can_delete":false,"product_type":"c1","uid":1389459,"ip_address":"","ucode":"613641C3C18BCE","user_header":"https://static001.geekbang.org/account/avatar/00/15/33/93/3f221bb8.jpg","comment_is_top":false,"comment_ctime":1569257277,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1569257277","product_id":100020801,"comment_content":"请教老师个问题，事务B在事务update之前把c的值改了，那么事务A因为没有匹配行没有改成功，理解；但是为什么事务A select查出来的是B改之前的值，因为开启事务时的一致性视图吗，有update不是当前读吗？不是应该读的是B改完后的值吗？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145599,"discussion_content":"update是要获取当前读，select拿的就是一致性视图创建时获取的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135700,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1569243089,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1569243089","product_id":100020801,"comment_content":"那么问题来了，有了当前读为什么还要乐观锁","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145601,"discussion_content":"要是有两个访问是并发的，那本应该最后k是4，现在还是为3.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280245,"discussion_content":"你说的什么鬼啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591518098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145601,"ip_address":""},"score":280245,"extra":""}]}]},{"had_liked":false,"id":130931,"user_name":"9080","can_delete":false,"product_type":"c1","uid":1114072,"ip_address":"","ucode":"D4DFBBC1B8394D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/d8/fa77b4eb.jpg","comment_is_top":false,"comment_ctime":1567579241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567579241","product_id":100020801,"comment_content":"1. 幻读定义到底是什么？<br>一般定义：事务T1读取了满足某条件的一个数据集，事务T2插入了一行或者多行数据满足了T1的选择条件，导致事务T1再次使用同样的选择条件读取的时候，得到了比第一次读取更多的数据集。<br>2. 在RR级别下，如果是快照读，那么其实是可以避免幻读的。如果是快照读+当前读，那么其实是不能避免幻读的。有的书籍和资料说mysql在RR级别是解决幻读的，依据是不能把快照读和当前读得到的结果不一样这种情况认为是幻读，那么在Mysql下到底该怎么去理解幻读？","like_count":0},{"had_liked":false,"id":129305,"user_name":"Dthan","can_delete":false,"product_type":"c1","uid":1177838,"ip_address":"","ucode":"B5DEB7D050981D","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/ee/2cf560f5.jpg","comment_is_top":false,"comment_ctime":1567083677,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567083677","product_id":100020801,"comment_content":"老师，有个问题请教下，每行数据的多个版本存放在哪，整个库的数据不是很多吗？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145604,"discussion_content":"当前版本数据就一条，多个版本放在undo log中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128540,"user_name":"阿德","can_delete":false,"product_type":"c1","uid":1602420,"ip_address":"","ucode":"186D5E19E3CB6E","user_header":"https://static001.geekbang.org/account/avatar/00/18/73/74/3bf4b74e.jpg","comment_is_top":false,"comment_ctime":1566898194,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566898194","product_id":100020801,"comment_content":"“第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。”   这里有点不清楚： 事务B set k=k+1时，步骤不应该跟事务A那样——先找到 (1,2) ，判断出 row trx_id=102，比高水位大，处于红色区域，不可见；然后再找row trx_id=90吗","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145606,"discussion_content":"update操作就不按照那个路子了，而是当前读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127171,"user_name":"Carey","can_delete":false,"product_type":"c1","uid":1295041,"ip_address":"","ucode":"D31D1ECFAE0027","user_header":"https://static001.geekbang.org/account/avatar/00/13/c2/c1/48785057.jpg","comment_is_top":false,"comment_ctime":1566575979,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566575979","product_id":100020801,"comment_content":"老师，有几个问题：<br>1、高水位是数组里面事务ID最大值加1吗？<br>2、 row trx_id如果落在图3的绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的。后者是怎么发生的，老师能举例说明一下吗？<br>3、事务A的高水位是多少？为什么小于101？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145609,"discussion_content":"1、高水位是创建一致性视图时，此时已有的最大事务id是多少，并不一定是数组里面的，不过在RR级别下，个人认为应该是视图数组里面的。在RC级别下就不一定了。\n2、比如事务C，在update之后，进行select，其实应该是走的3b吧，个人理解啊。\n3、在RR级别下，事务A的高水位是101.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123145,"user_name":"白鸟","can_delete":false,"product_type":"c1","uid":1440343,"ip_address":"","ucode":"8E1F24E49B3026","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/57/02c162dd.jpg","comment_is_top":false,"comment_ctime":1565615125,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565615125","product_id":100020801,"comment_content":"老师您好，我想问一下 既然有了MVCC 为什么还需要行锁呢？是有什么情况是MVCC无法解决只能靠行锁来实现的吗？谢谢～！","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145611,"discussion_content":"比如update、delete同时发生。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122659,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1565455164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565455164","product_id":100020801,"comment_content":"事物ID 有淘汰机制么老师？什么时候会淘汰呢？ ","like_count":0},{"had_liked":false,"id":122413,"user_name":"爱因诗贤","can_delete":false,"product_type":"c1","uid":1528379,"ip_address":"","ucode":"150C439B87CED1","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/3b/7a2610a6.jpg","comment_is_top":false,"comment_ctime":1565361274,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565361274","product_id":100020801,"comment_content":"老师，我遇到一个很神奇的问题，我用的主从数据库，按照本篇文章操作，结果t表变成了只读状态，不能更新了，关也关不掉，reload数据库也失败，请问这是怎么造成的，只要update，过一会就会提示lock wait timeout exceeded ;try restaring transaction","like_count":0,"discussions":[{"author":{"id":1528379,"avatar":"https://static001.geekbang.org/account/avatar/00/17/52/3b/7a2610a6.jpg","nickname":"爱因诗贤","note":"","ucode":"150C439B87CED1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4406,"discussion_content":"select * from information_schema.innodb_trx\n\nkill 34529    用这个之后才把死锁解除掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565364150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121683,"user_name":"jirui","can_delete":false,"product_type":"c1","uid":1046872,"ip_address":"","ucode":"1933E6C27602B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoGtqDt9bjmqtS3Y3v6tFmI0TRAOic61JQGh5QFicthicEicJzjn9K76mG21yicxhu3ecT4qbwx90C0c2g/132","comment_is_top":false,"comment_ctime":1565182245,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565182245","product_id":100020801,"comment_content":"找历史版本的细节过程是怎样实现的？个人理解好像是通过redo logo，那redo log是怎么设计的，如何做到快速定位到记录相关的redo_log信息","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145615,"discussion_content":"应该是找undo log吧。备份数据是redo log","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121530,"user_name":"Code Go","can_delete":false,"product_type":"c1","uid":1189903,"ip_address":"","ucode":"FBC7C15A76EF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/28/0f/9fa76d07.jpg","comment_is_top":false,"comment_ctime":1565153479,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565153479","product_id":100020801,"comment_content":"老师，我想问一下，事务是在执行里面第一条语句的时候才算开启，那么transaction id是在begin的时候生成，还是在执行第一条语句的时候生成啊？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145625,"discussion_content":"第一条语句的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579573314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119995,"user_name":"爱因诗贤","can_delete":false,"product_type":"c1","uid":1528379,"ip_address":"","ucode":"150C439B87CED1","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/3b/7a2610a6.jpg","comment_is_top":false,"comment_ctime":1564748215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564748215","product_id":100020801,"comment_content":"老师后面有没有其他课程，您的课太经典了","like_count":0},{"had_liked":false,"id":119904,"user_name":"z_G","can_delete":false,"product_type":"c1","uid":1189242,"ip_address":"","ucode":"02C3F667A23217","user_header":"","comment_is_top":false,"comment_ctime":1564724681,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564724681","product_id":100020801,"comment_content":"请问，如果两个session处在不同的事务隔离级别该如何处理？比如事务A处在读提交级别，事物B处在可重复读级别，然后这两个事务同时发生。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145629,"discussion_content":"不太可能，你怎么可能同时用两个引擎呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579573382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119757,"user_name":"传达室王师傅","can_delete":false,"product_type":"c1","uid":1599903,"ip_address":"","ucode":"ACA7125572328F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLkDr90EFeibu1WCKX8zLTzxspwTvmxf0vrjQGleWGDngVIMDaPeibicBD7G3kt2HH8Voe83Ta92OMcQ/132","comment_is_top":false,"comment_ctime":1564673713,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564673713","product_id":100020801,"comment_content":"虽然当前读解释了事务b能读到最新值，但是我还是不明白，对于事务b，更新前读的是值是1，更新后读的值是3，在同一个事务里，不就不是一致性读了吗？也不是可重复读啊。望老师赐教","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145632,"discussion_content":"update操作是执行当前读，select可以获取自己同一个事务的更新。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579573449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119652,"user_name":"AA","can_delete":false,"product_type":"c1","uid":1103583,"ip_address":"","ucode":"CADCB958D6DA1B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/df/1e4ecd94.jpg","comment_is_top":false,"comment_ctime":1564646083,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564646083","product_id":100020801,"comment_content":"老师，请问下set autocommit=0和start transition 和begin区别","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145648,"discussion_content":"首先start transaction与begin没有区别。\n当set autocommit=0时，禁用自动提交事务，每个SQL语句或者语句块之后都要通过commit显式提交事务。\nstart transaction/begin，挂起自动提交事务，执行构成事务的每条语句，然后通过commit将修改提交至数据库。\n这么看来，三者并没有什么太区别。不过begin/start结束后，如果之前的autocommit=1那就会自动回到自动提交事务模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579573984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119082,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1564499731,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564499731","product_id":100020801,"comment_content":"老师，不是说视图数组实现上不包括自己的transaction_id吗，怎么图4，A的transaction_id=100，然后视图数组又是[99,100]呀？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145650,"discussion_content":"谁说不包含的。我咋没看到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579574040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118560,"user_name":"陈耿伟","can_delete":false,"product_type":"c1","uid":1532171,"ip_address":"","ucode":"7B3B1BF22371FC","user_header":"https://static001.geekbang.org/account/avatar/00/17/61/0b/d94852de.jpg","comment_is_top":false,"comment_ctime":1564388095,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564388095","product_id":100020801,"comment_content":"老师,你好,在事务B读取数据的时候,数组是[99,100,101],而此时该行数据版本是102,应该是不可见的,那按道理,事务B就会找到版本90的呀,读到的应该是(1,1),更新完应该是(1,2),这里是我理解有误还是写错了呀?","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145651,"discussion_content":"你理解错了，谁说该行数据版本为102，明明是101，高水位是102","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579574083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117996,"user_name":"Geek_feb353","can_delete":false,"product_type":"c1","uid":1458684,"ip_address":"","ucode":"59B71C6A84689D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ57v6PaIS3wZIqA5eEFyrOdsYcTicSmvpX8s8icUJcFTicFHt2Bh9z4WonglpQjf8UjNN9V8icRVtmOw/132","comment_is_top":false,"comment_ctime":1564208878,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564208878","product_id":100020801,"comment_content":"老师，我觉得你的图三有些引起歧义的地方。中间黄色部分不应该叫未提交事务集合。比如，当前活跃数组是[99， 100， 101]， 102已经提交，这时启动事务，id=103。那低水位=99，高水位=104。102在黄色区域，但并不是未提交的事务。不知道我的理解对不对","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145674,"discussion_content":"为啥又103了，理解错误。事务B的id是101","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579574941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117331,"user_name":"0620","can_delete":false,"product_type":"c1","uid":1294569,"ip_address":"","ucode":"859FE1B28446BC","user_header":"https://static001.geekbang.org/account/avatar/00/13/c0/e9/e91d7d05.jpg","comment_is_top":false,"comment_ctime":1564025008,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564025008","product_id":100020801,"comment_content":"老师好，有一个问题：<br>高水位是当前系统里面已经创建过的事务 ID 的最大值加 1，事务ID的分配实际是什么，如果是事务开始时，那高水位是不就是自己的事务ID加1？<br><br>","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145676,"discussion_content":"这个在RR级别下可能是这样，在RC级别下就不是了。个人理解啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579574984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117123,"user_name":"五只鱼","can_delete":false,"product_type":"c1","uid":1322684,"ip_address":"","ucode":"666F1DAE39EA9C","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/bc/811f8cdd.jpg","comment_is_top":false,"comment_ctime":1563972708,"is_pvip":false,"replies":[{"id":"43027","content":"👍开心😆<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1564066575,"ip_address":"","comment_id":117123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563972708","product_id":100020801,"comment_content":"这篇文章解决了一堆之前的疑问 ","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459832,"discussion_content":"👍开心😆\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564066575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116625,"user_name":"锋风封","can_delete":false,"product_type":"c1","uid":1116935,"ip_address":"","ucode":"8E1528DF975D82","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/07/9b0446a7.jpg","comment_is_top":false,"comment_ctime":1563883143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563883143","product_id":100020801,"comment_content":"一个问题RR级别下是可重复读，那么看下来如果事物A里面查询条件一致应该是不变的，当事物B更新里该条数据的时候，那么事物A再次去查询该条数据应该是不变的但是我去更新这条数据呢？事物B已经提交的情况下行锁是被释放的。又是当前读那么B的更新应该是会影响到的吧？所以当前读的读是没有隔离级别的？","like_count":0},{"had_liked":false,"id":116493,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1563857384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563857384","product_id":100020801,"comment_content":"文末的问题，我理解在提交读的模式下不会出现吧，因为都是用当前读。而在RR模式下，更新是当前读，而查询是非当前读，才导致两者不一致","like_count":0},{"had_liked":false,"id":115761,"user_name":"陈包佳","can_delete":false,"product_type":"c1","uid":1576712,"ip_address":"","ucode":"9DAAC87C75D91F","user_header":"https://static001.geekbang.org/account/avatar/00/18/0f/08/7abf466e.jpg","comment_is_top":false,"comment_ctime":1563720551,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563720551","product_id":100020801,"comment_content":"老师，有个疑问。对于文中所举的例子，一个事务的低水位是18，读取的值根据row_trx_id应该是11。我假设该事务的transcation_id=26，且transcation_id=25的事务已提交，那当前事务读取的值是不是应该是22。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145679,"discussion_content":"不明白啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115453,"user_name":"阳光总在风雨后","can_delete":false,"product_type":"c1","uid":1134710,"ip_address":"","ucode":"67335717472592","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHDCyrQLakSwOQXrF8eE6HQvXP4h5tjpe4dRAZbA1qpSbLw7RYreD7feDThptpicicR7SBaalaus3A/132","comment_is_top":false,"comment_ctime":1563590859,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563590859","product_id":100020801,"comment_content":"@约书亚的问题，是不是这三步包在一个事物里，设置隔离级别是串行","like_count":0},{"had_liked":false,"id":115234,"user_name":"草帽寒风","can_delete":false,"product_type":"c1","uid":1216984,"ip_address":"","ucode":"49251EE81F4E58","user_header":"","comment_is_top":false,"comment_ctime":1563514662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563514662","product_id":100020801,"comment_content":"请问老师，为什么落在黄色部分包含两种情况？落在黄色部分的row trix id不是一定在数组内吗","like_count":0},{"had_liked":false,"id":114837,"user_name":"ZHU～JM","can_delete":false,"product_type":"c1","uid":1590912,"ip_address":"","ucode":"1B29556D705C0B","user_header":"https://static001.geekbang.org/account/avatar/00/18/46/80/45d989e5.jpg","comment_is_top":false,"comment_ctime":1563414695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563414695","product_id":100020801,"comment_content":"老师8.0版本的思考题答案会把所有的c都变成0.","like_count":0},{"had_liked":false,"id":113707,"user_name":"鹿先生","can_delete":false,"product_type":"c1","uid":1147495,"ip_address":"","ucode":"496222D648BB98","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/67/cc0e5b46.jpg","comment_is_top":false,"comment_ctime":1563124445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563124445","product_id":100020801,"comment_content":"文中“比如，对于图 2 中的数据来说，如果有一个事务，它的低水位是18，那么当它访问这一行数据时，就会从V4通过U3计算出V3，所以在它看来，这一行的值是11”<br>老师我感觉不一定吧，虽然row trx_id为25时大于低水位18，但是也是有可能可见的吧，就像图三中的黄色部份也存在已经提交的事务啊<br>","like_count":0},{"had_liked":false,"id":113242,"user_name":"东风第一枝","can_delete":false,"product_type":"c1","uid":1402697,"ip_address":"","ucode":"0CD0F62E90DAD8","user_header":"https://static001.geekbang.org/account/avatar/00/15/67/49/864dba17.jpg","comment_is_top":false,"comment_ctime":1562923189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562923189","product_id":100020801,"comment_content":"一口气看完8节，不得不说，写的很赞，疑问基本在留言里能看到答案，MySQL进阶必备。","like_count":0},{"had_liked":false,"id":112153,"user_name":"王斯拉","can_delete":false,"product_type":"c1","uid":1593957,"ip_address":"","ucode":"D00DD3CE432189","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/65/320eccb3.jpg","comment_is_top":false,"comment_ctime":1562675720,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562675720","product_id":100020801,"comment_content":"老师您好，好几章都提到了mvcc，随着不停的对某个数据做操作，版本会越来越多，数据量也就会越来越大，那么会在什么时候来删除老版本呢？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145681,"discussion_content":"为啥要删除老版本，如果删除的话，你可以删除undo log","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111824,"user_name":"任鹏斌","can_delete":false,"product_type":"c1","uid":1104086,"ip_address":"","ucode":"34319B05EA6E74","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg","comment_is_top":false,"comment_ctime":1562627776,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562627776","product_id":100020801,"comment_content":"老师好有个疑问，文中说InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。<br>如此当前事务启动瞬间就应该是系统分配的最大id，又有关于高水位的描述为最大事务id加1,不明白最大事务id为什么不等于当前事务id。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145688,"discussion_content":"对于RR级别可能当前就是最大事务id，但是在RC级别下就不一定是了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111739,"user_name":"likun","can_delete":false,"product_type":"c1","uid":1030816,"ip_address":"","ucode":"9145ED059CCC6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg","comment_is_top":false,"comment_ctime":1562592830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562592830","product_id":100020801,"comment_content":"老师 你好 问个问题呐<br>每个事务的的trx_id 是在开始事务的时候申请的吧 这里开始事务应该指的是创建事务吧 而不是启动事务。<br>也就是说在某一事务开始和真正启动之间的这段时间 可能有其他事务也会开始 那么在事务启动时创建一致性读视图时，视图数组里最大值有可能大于当前正在启动的事务id,而高水位的值减一应该是大于或等于视图数组里的最大值。 我这么理解是对的吗？老师 。希望老师有空看到可以帮忙解惑 谢谢。","like_count":0},{"had_liked":false,"id":110076,"user_name":"小样","can_delete":false,"product_type":"c1","uid":1458635,"ip_address":"","ucode":"538ECAB5A8BAE4","user_header":"https://static001.geekbang.org/account/avatar/00/16/41/cb/e0ce5161.jpg","comment_is_top":false,"comment_ctime":1562167565,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1562167565","product_id":100020801,"comment_content":"除了 update 语句外，select 语句如果加锁，也是当前读。<br><br>所以，如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。<br>老师这个怎么理解，为啥事物A能读到B未提交的值啊，加了锁不是应该等A提交了才能更新吗","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145690,"discussion_content":"这个只是读啊，你就是加锁读了，也得释放锁吧。不冲突啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280251,"discussion_content":"你这个答非所问的，他描述的场景应该是A的当前读会被B事务所阻塞，不可能读到事务B的修改，只有当事务B提交了释放了id=1这行数据的行锁后，事务A才获取锁读出K=3结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591518856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145690,"ip_address":""},"score":280251,"extra":""}]}]},{"had_liked":false,"id":109992,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1562146666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562146666","product_id":100020801,"comment_content":"老师好，关于C&#39;这里您的解释我没太看懂，您在文中说事务B是当前读，需要读最新的版本，而且需要加锁，这里这个加锁，指的应该不是select语句吧？是不是指的是Update语句?我试了一下，按照上面的操作，如果去掉update语句，事务B的执行是没有受到影响的，老师能不能帮忙解惑一下？","like_count":0},{"had_liked":false,"id":109972,"user_name":"见＆不见","can_delete":false,"product_type":"c1","uid":1342533,"ip_address":"","ucode":"53C6167BB03424","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/45/19e24f98.jpg","comment_is_top":false,"comment_ctime":1562143628,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562143628","product_id":100020801,"comment_content":"老师 mysql 事务 锁  索引 这期间的关系错综复杂 有没有类似xmind的思维导图呢 有的话还请丢个链接","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145693,"discussion_content":"自己画一下，可能更清晰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109970,"user_name":"见＆不见","can_delete":false,"product_type":"c1","uid":1342533,"ip_address":"","ucode":"53C6167BB03424","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/45/19e24f98.jpg","comment_is_top":false,"comment_ctime":1562143276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562143276","product_id":100020801,"comment_content":"老师 mysql  事务 锁 索引通过这几篇来看 其中关系错综复杂 有没有类似xmind的导图呢 还请丢个链接","like_count":0},{"had_liked":false,"id":109248,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1561987517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561987517","product_id":100020801,"comment_content":"老师， 这个row_trx_id 是从这条数据被创建，这个trx_row_id的值就一直存在的嘛？<br>还是说，一条数据的row_trx_id 也是随着没有实务能回滚到这一版本的时候，就会被删除了嘛？ 就像undo的日志一样那种……","like_count":0},{"had_liked":false,"id":109244,"user_name":"加载中……","can_delete":false,"product_type":"c1","uid":1366948,"ip_address":"","ucode":"3E59A0A0784D0A","user_header":"https://static001.geekbang.org/account/avatar/00/14/db/a4/191be6ad.jpg","comment_is_top":false,"comment_ctime":1561987202,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561987202","product_id":100020801,"comment_content":"老师您好，请教个问题：如过隔离级别是 read committed的情况，用begin开启事务，随后有一个select语句，那么transaction id是在begin语句分配的，还是select语句？我的理解是在select语句分配的。如果是在repeatable read的隔离级别下，就是在begin语句时候分配的。不知道理解对不对。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145695,"discussion_content":"RR级别下，用begin也应该是在select语句时分配的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108540,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1561796764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561796764","product_id":100020801,"comment_content":"惭愧，我先跳过，回头再看","like_count":0},{"had_liked":false,"id":108470,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1561778890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561778890","product_id":100020801,"comment_content":"刚才在mysql8.0上执行了一下，报下面这个错误：<br><br>0\t28\t11:16:48\tupdate t set c = 0 where id = c\tError Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column. <br> To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.\t0.000 sec<br><br>然后又去搜索执行了sql_safe_updates=off的设置<br><br>再去update t set c =0 where id = c;<br><br>执行成功。<br>","like_count":0},{"had_liked":false,"id":107727,"user_name":"yrw96","can_delete":false,"product_type":"c1","uid":1224643,"ip_address":"","ucode":"4AA27B435174F3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/KU20Lw92H0Gyl076o4XANqsMh3geEt7fX06rUyMxZHGsc0Xia9XpWsibaTaMEMOmCbf26UQzFa7LRMRQbyicAOibEQ/132","comment_is_top":false,"comment_ctime":1561600212,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561600212","product_id":100020801,"comment_content":"老师你好，想请教个问题，关于事务A读取“当前的值”，我进行以下两种测试<br>第一种情况：<br>在事务B未commit，我在事务A进行select k from t where id=1 lock in share mode;和selectk from t where id=1 for update 查询都是报Lock wait timeout exceeded; try restarting transaction错误。<br>第二种情况：<br>事务B已commit，在事务A执行select k from t where id=1 lock in share mode;和selectk from t where id=1 for update就可以查到当前读的K值为3.<br>根据以上两种情况来看，第一种情况出现了“两阶段锁协议”的情况，进行update操作，加了写锁，要等事务B提交了，才释放写锁。<br>那lock in share mode和for update这两种加锁查询，是不是要在事务B commit后才能在事务A查询到k的当前读值为: 3呢？<br>","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223109,"discussion_content":"肯定呀，事务B没提交id=1这行记录的行锁就没释放所以会有锁超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586186249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106941,"user_name":"daydaynobug","can_delete":false,"product_type":"c1","uid":1336773,"ip_address":"","ucode":"C6923405EB62BA","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/c5/97003360.jpg","comment_is_top":false,"comment_ctime":1561426873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561426873","product_id":100020801,"comment_content":"老师，您好，这几天遇到一个业务上的问题，有这样一个逻辑：查询数据库中一条记录，如果不存在就插入一条记录。问题发生在要查询的记录不存在情况下，用户可能会连续发送请求，导致第二次查询在第一次插入记录之前也执行完成，然后会重复插入，想了以下方法解决了问题：事务内使用select ... for update，使用这种方法解决的，但是只有在查询条件不使用主键时才会成功，因为使用主键查询，记录不存在时是不会加锁的，所以只能使用其他字段，导致加表锁。<br>我能想到的方法全是通过加表锁实现的，但是总觉得有更好的方法，又一直查不到，所以想请教老师，","like_count":0},{"had_liked":false,"id":104922,"user_name":"Geek_e95920","can_delete":false,"product_type":"c1","uid":1344701,"ip_address":"","ucode":"193C44DAC1699C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/HLDjKFe3k6EsKg2AzW7UPp6EiaxotnDciaIxCHtBWibbb0GAJXc2LfDCJwv3sL2QZAudndqUU31cicq4oMrGXibLaTA/132","comment_is_top":false,"comment_ctime":1560871358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560871358","product_id":100020801,"comment_content":"“找到 (1,3) 的时候，判断出 row trx_id=10...<br>接着，找到上一个历史版本，一看 row trx_id=102...<br>再往前找，终于找到了（1,1)，它的 row trx_id=...”<br><br>历史版本是怎样找的？又是如何应用的？<br><br>好像InnoDB每行数据包含几个隐藏字段，有个DB_TRX_ID标识最后一次修改的事务ID，是否就是文中row trx_id=101？<br><br>有个回滚指针字段，指向uodolog，通过undolog回滚记录，得到上一个历史版本？<br><br>这个历史版本也是这样一种行记录格式？也有这些隐藏字段？同样的方式再通过DB_TRX_ID判断是否有效，然后通过DB_ROLL_PTR字段再回滚, .... ?<br><br>删除的情况呢？如何考虑？<br><br>如何判断哪些事务的更新是可见的，这里看明白了，但是如何应用undolog找到历史版本，以及相关的模型实现是怎样的，相关的行记录的几个隐藏字段，这里感觉还是没有讲清楚，还是不太明白，希望老师能再解答下这个地方，谢谢！<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":103739,"user_name":"大宝","can_delete":false,"product_type":"c1","uid":1102771,"ip_address":"","ucode":"224458E5D1A35A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/b3/4f5550c0.jpg","comment_is_top":false,"comment_ctime":1560500776,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1560500776","product_id":100020801,"comment_content":"【问题】<br>老师，你在开始分析事务B的k=3，事务A的k=1是在将事务隔离级别设为“可重复读”级别的前提下；<br>后来得出事务B的k=3，事务A的k=2是在将隔离级别设置为“读提交”的前提下对吗？因为没看到你设置隔离级别。","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145696,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579575695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103714,"user_name":"易轻尘","can_delete":false,"product_type":"c1","uid":1136684,"ip_address":"","ucode":"0D0CB9D6D45A70","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/2c/92c7ce3b.jpg","comment_is_top":false,"comment_ctime":1560496545,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560496545","product_id":100020801,"comment_content":"思考题：复现语句如下<br>| T1 | T2 |<br>| --- | --- |<br>| xxx | begin; |<br>| xxx | select * from t; |<br>| update t set id=id+1 where id=c; | xxx |<br>| xxx | update t set c=0 where id=c |<br>| xxx | select * from t; # 发现没变 |<br><br>原因：T2进行update时，where语句是当前读，此时id值已经被T1修改，所以where没有选择到预想中的affected-rows，导致更新失败。<br>如果将T2的第一个select语句变为for update&#47;for share，则使T1在T2提交之前都不能执行update语句，可以保证T2的更新成功，但会降低并发度。这种解决方案是悲观锁的思想：其他事务肯定会和我争着改数据，所以我一定要提前加个锁。<br>第二个方案是借鉴CAS(compare and swap)机制，它使用的就是乐观锁思想，只在更新的时候通过版本号检查一下数据是否是我们期望的那个版本，如果不是，则不停的重试更新。","like_count":0},{"had_liked":false,"id":102385,"user_name":"Tunayoyo","can_delete":false,"product_type":"c1","uid":1447213,"ip_address":"","ucode":"E77AFDE575CE04","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/2d/8447e8c8.jpg","comment_is_top":false,"comment_ctime":1560214842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560214842","product_id":100020801,"comment_content":"老铁，实验发现：B事务在更新时已经加行锁，所以A事务select 不能以加S锁或者X锁的方式“当前读”；<br>可能在C事务提交后（锁已经释放），在B事务中举例说明加S锁或者X锁来展示“当前读”会好些~","like_count":0},{"had_liked":false,"id":100543,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1559574697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559574697","product_id":100020801,"comment_content":"老师你好，问个问题，在可重复读情况下，一个事务中，如果我要基于某个查询出来的数据作为判断条件，那么如果这个查询不是当前读，是不是会有问题，比如说select  id  from  t<br>如果判断逻辑是查询出来的id值等于3我就进行下一个操作，但是其实这个id的值最新的版本是4了，是不是就会有问题","like_count":0},{"had_liked":false,"id":100478,"user_name":"怒龙ｚｈａｏ","can_delete":false,"product_type":"c1","uid":1547898,"ip_address":"","ucode":"67E52C7C1C8088","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/7a/0880ee6f.jpg","comment_is_top":false,"comment_ctime":1559562556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559562556","product_id":100020801,"comment_content":"如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>数据版本可见性规则，b中的已经提交了的事务生成的，我不是很明白，前面不是说已经提交的是在绿色区域，为什么这块黄色区域即保存当前未提交的区域会有","like_count":0},{"had_liked":false,"id":98867,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1559110005,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559110005","product_id":100020801,"comment_content":"mysql8.0是不是做了优化呀，怎么我这里执行是可以的？？？<br><br>begin ;<br>select * from test_tbl3;<br><br>update test_tbl3 set c=0 where id=c;<br><br>select * from test_tbl3;<br><br>查询结果c已经全部变成0了。。。。<br>我的mysql版本是8.0.11","like_count":0},{"had_liked":false,"id":96425,"user_name":"书木子谢明","can_delete":false,"product_type":"c1","uid":1259879,"ip_address":"","ucode":"3090C080A570BE","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/67/743128f7.jpg","comment_is_top":false,"comment_ctime":1558419556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558419556","product_id":100020801,"comment_content":"     您好，我有个疑问，文中提到：“begin&#47;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。”<br>      这段描述在设置数据库隔离级别为”可重复读“下，成立吗？如果使这样，仅使用”start transaction“ 的”可重复读“ 与 ”读提交“ 貌似没有什么区别了？","like_count":0},{"had_liked":false,"id":94777,"user_name":"老妖纣王","can_delete":false,"product_type":"c1","uid":1357582,"ip_address":"","ucode":"C07A398ADFC38E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b7/0e/20ed751b.jpg","comment_is_top":false,"comment_ctime":1557894774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557894774","product_id":100020801,"comment_content":"老师你好，通过阅读这篇文章和评论留言后，有几个问题想梳理一下：<br>1.当前事务处在什么水位问题，还是拿文中的例子描述一下，文中假设启动事务A时只有一个活跃事务ID99，现在改成2种情况，第一种情况启动事务A时,一个活跃事务ID98，一个已提交事务ID99并且是最大事务ID，这个时候事务A启动后的视图数组就是[98,100]，事务A获取数据trx_id是99，这样是不是文中3（b）的情况。第二种情况启动事务A时，一个活跃事务ID98，一个活跃事务ID99且是最大事务ID，并且还在事务Aselect之前更新了数据行，这时启动事务A时的视图数组[98,99,100],事务A获取数据trx_id是也是99，这样是不是文中3（a）的情况，回滚循环比对。然后如果事务ID99执行完毕后，视图数组是不是又改回了[98,100]?<br>2. 03篇文章中提到的回滚段日志，是不是就是这篇中所说的undo log，如果是的话，按道理来说事务全部停止，undo log就会全部清空，那么回滚段日志不是就减少了吗，文件大小不是会变小？但是前面文章说的，即使长事务最终提交，回滚段被清理，文件也不会变小。这句话感觉是和理论上冲突了。","like_count":0},{"had_liked":false,"id":94768,"user_name":"ZHANG","can_delete":false,"product_type":"c1","uid":1442437,"ip_address":"","ucode":"BAFD110AE33328","user_header":"https://static001.geekbang.org/account/avatar/00/16/02/85/9a81a973.jpg","comment_is_top":false,"comment_ctime":1557891612,"is_pvip":false,"replies":[{"id":"34305","content":"1. 对的<br>2. 对的<br>3. 额，这个描述不是很准确。不过感觉意思到了^_^ <br>    比如可重复读下，select ... lock in share mode,  也是当前读的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1558260846,"ip_address":"","comment_id":94768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557891612","product_id":100020801,"comment_content":"不知道现在留言会不会收到回复。<br>老师你好，我这样理解有没有问题呢：<br>1.比如图1中的事务B，只有到了执行update的时候才会去获取这一行的行锁，而事务C的update在事务B的update之前，所以事务C能先执行成功。<br>2.MySQL的默认隔离级别是可重复读<br>3.可重复读的核心是一致性读，那可不可以这样理解：读提交的核心就是当前读","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450198,"discussion_content":"1. 对的\n2. 对的\n3. 额，这个描述不是很准确。不过感觉意思到了^_^ \n    比如可重复读下，select ... lock in share mode,  也是当前读的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558260846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94322,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1557783461,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1557783461","product_id":100020801,"comment_content":"老师我这么理解行吗？<br>例子2：<br>在事务C1提交之前，事务B是不能创建RR视图或者使用当前读创建视图的。  <br>例子1：<br>事务B使用了当前读，我理解为事务B把RR视图的窗口做了重建，这种窗口重建的情况是加锁读写引起的。  <br>总结一下：<br>事务中不加锁的语句会创建RR视图，而加锁的语句会根据当前读判断是否需要重建RR视图，如果需要重建RR视图却未能获得需要的锁，（尽管已经销毁了过去的RR视图）则不能创建新的RR视图，直到获得需要的锁。  <br><br>RR视图的创建和销毁需要考虑两个因素：事务，锁。两者发生时间的不一致面提高了并发性，却造成了理解上的困难。","like_count":0,"discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42777,"discussion_content":"既然老师没有回复，我就回复一下自己吧，我理解的根本没有什么视图概念，视图只是假假想的，有的只是版本比较。\n我不知道那个水位高低是不是官方解释的时候做的比喻（因为我在其他blog上也见过），但是我大胆的猜想一下是因为与 undolog 中只包含修改数据使用到的 trx_id，而真实情况是只读事务也会分配 trx_id，用只读事务的 trx_id 与 undolog 中的 trx_id 比较时，引入这个水位概念会更加便于理解，否则这个比喻看起来有点多此一举。\nMVCC虽然可提高并发性，但是是不是只能提高一致性读的并发性呢？或者是怎么提高并发性的，我觉得这个问题可能更值得思考...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572778679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93287,"user_name":"mooneal","can_delete":false,"product_type":"c1","uid":1177114,"ip_address":"","ucode":"7E43AD3661BBFD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1F8TyS4mNfhRib2nHvLZ1azGyYQj2fjr9G1RFkOINo2Mx1JYHLN7FEU9FGg5ibictp1QAQeNUFZlTVLdb8QgkJnow/132","comment_is_top":false,"comment_ctime":1557450230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557450230","product_id":100020801,"comment_content":"不知道老师还看不看得到，我想提个问题。业务背景:<br>用Spring开发的时候。有一段代码加了@transactional 注解，但在这个方法里进行实际数据库操作之前，有一段很耗时的http调用外部接口的代码。<br><br>问题：<br>我原来的想法是，调用外部接口的代码时间长，会带来长事务的问题，所以开启事务的注解应该放在，操作数据库的代码之前。<br><br>现在的疑惑是，即使@Transactional注解包括了http请求，但真正开启事务的时间点，是不是还是进行数据库操作的时候，如果是，应该不会导致长事务问题吧<br><br><br>","like_count":0},{"had_liked":false,"id":92369,"user_name":"晓明","can_delete":false,"product_type":"c1","uid":1361583,"ip_address":"","ucode":"376907ECF35AB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/c6/af/8fd3b96c.jpg","comment_is_top":false,"comment_ctime":1557240336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557240336","product_id":100020801,"comment_content":"select的时候同时查询双向关系并且加排他锁即可","like_count":0},{"had_liked":false,"id":92339,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1557236525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557236525","product_id":100020801,"comment_content":"MVCC多版本控制，每个事务都会严格递增的事务id，基于此每行都会有多个row_rxt_id。当不同事务隔离级别下创建的一致性视图时保存当前事务id和一组当前活跃的事务，根据当前事务id和活跃事务组的提交状态对比得出哪些事务可见，基于可见事务来构建事务快照。这个叫做一致性读。<br>而更新操作需要当前读，所以碰到还未提交的更新事务时会阻塞。<br><br>不知道理解对不对？","like_count":0},{"had_liked":false,"id":91403,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1557026672,"is_pvip":false,"replies":[{"id":"32865","content":"这一篇是比较难的。。<br><br>但是这个概念又很重要，加油了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1557155211,"ip_address":"","comment_id":91403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557026672","product_id":100020801,"comment_content":"看这个数据库的文章，真的好吃力！","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448908,"discussion_content":"这一篇是比较难的。。\n\n但是这个概念又很重要，加油了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557155211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91322,"user_name":"希","can_delete":false,"product_type":"c1","uid":1034680,"ip_address":"","ucode":"3BD96417BF265A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c9/b8/abe0d903.jpg","comment_is_top":false,"comment_ctime":1556979435,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556979435","product_id":100020801,"comment_content":"对于上一篇问题的解答，有一个疑问？<br>limit 10000是大事务，那么limit 500就不是了吗？具体哪种方式最佳是否应该根据实际性能来定（莫名感觉这个区分是否为大事务的数量级，没有前提）","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145702,"discussion_content":"根据实际情况可以调整数量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579576004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90278,"user_name":"阿蒙","can_delete":false,"product_type":"c1","uid":1482578,"ip_address":"","ucode":"C94DB735417153","user_header":"https://static001.geekbang.org/account/avatar/00/16/9f/52/e5e8e80b.jpg","comment_is_top":false,"comment_ctime":1556465231,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556465231","product_id":100020801,"comment_content":"老师你好，图8 事务ID是不是有错，RC隔离级别，start transaction with consistent snapshot等效于start transaction，事务ID是在第一条操作表语句时候生成的，那A事务ID是102，B事务ID是101，C事务ID是100？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145722,"discussion_content":"这个你说的是在理的，的确应该是这样，不过id只是一个符号，理解就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579576749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90102,"user_name":"tyy","can_delete":false,"product_type":"c1","uid":1302149,"ip_address":"","ucode":"C3B436E6562744","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/85/da98e390.jpg","comment_is_top":false,"comment_ctime":1556415538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556415538","product_id":100020801,"comment_content":"第八节，在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。<br>这个数组里都是活跃的事务ID，为什么下边的图里会有已提交的事务？","like_count":0},{"had_liked":false,"id":88972,"user_name":"啊一","can_delete":false,"product_type":"c1","uid":1128038,"ip_address":"","ucode":"0278A8BBF40B3C","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/66/5cc806ee.jpg","comment_is_top":false,"comment_ctime":1556036622,"is_pvip":false,"replies":[{"id":"32285","content":"“快照”在 MVCC 里是怎么工作的？<br><br>这一节讲的就是这个问题呀<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1556384754,"ip_address":"","comment_id":88972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556036622","product_id":100020801,"comment_content":"我想问的问题是，mysql是如何创建快照的。如果数据库里的数据真的是很大，那为什么能在事务开始的时候快速的创建快照。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447965,"discussion_content":"“快照”在 MVCC 里是怎么工作的？\n\n这一节讲的就是这个问题呀\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556384754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86497,"user_name":"Kermit Sun","can_delete":false,"product_type":"c1","uid":1245430,"ip_address":"","ucode":"9B0560FB228629","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/f6/f6cf138c.jpg","comment_is_top":false,"comment_ctime":1555383801,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1555383801","product_id":100020801,"comment_content":"当前系统里面已经创建过的事务id+1记为高水位，这个id+1是不是就可以理解为当前事务申请到的id？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145734,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579577426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86175,"user_name":"坚果英雄","can_delete":false,"product_type":"c1","uid":1323214,"ip_address":"","ucode":"D9E87EAEFE922C","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/ce/19ce9c98.jpg","comment_is_top":false,"comment_ctime":1555319663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555319663","product_id":100020801,"comment_content":"老师好，在RR隔离级别下，用START TRANSACTION WITH CONSISTENT READ启动一个事务，为了维持一致性读，之后其它事务的所有更新每一个版本的undo都要保留，至事务结束为止！那么问题来了，如果事务一直不结束，undo是否会一直增长下去？","like_count":0},{"had_liked":false,"id":84030,"user_name":"Oliver","can_delete":false,"product_type":"c1","uid":1250815,"ip_address":"","ucode":"4459105302CDB8","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/ff/8f8b757b.jpg","comment_is_top":false,"comment_ctime":1554771420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554771420","product_id":100020801,"comment_content":"老师，你好，有个问题请教一下：<br>线上有个http 服务，每次cgi请求都会从db查询、更改或更新数据。所有的请求都是通过事务进行操作的，但是从innodb_trx中会发现较多未提交的事务（有的长达两个小时，但最终还是会提交），但是在业务层并没有发现请求有超时。未提交的事务中没有显示正在执行的语句，也没有锁冲突。这种问题的定位思路有建议？<br>目前想找出哪次业务逻辑发起的事务没有提交？有办法在业务层获取到db的事务ID？（db的访问组件用的是sqlalchemy）","like_count":0},{"had_liked":false,"id":83511,"user_name":"渡劫达摩","can_delete":false,"product_type":"c1","uid":1465391,"ip_address":"","ucode":"A7005CBB34B698","user_header":"https://static001.geekbang.org/account/avatar/00/16/5c/2f/a9c8d42f.jpg","comment_is_top":false,"comment_ctime":1554633459,"is_pvip":false,"replies":[{"id":"30757","content":"会的<br>而且之后每个查询都会更新一次这个数组哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1555148586,"ip_address":"","comment_id":83511,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554633459","product_id":100020801,"comment_content":"老师，我有个疑问，当数据库是可重复读模式时，开启一个事务也会创建一个数组来记录当前所有活跃的事务id。那如果只是提交读的话，开启事务的时候，还会创建数组保存事务id，来支持有些事务不可见性吗","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446052,"discussion_content":"会的\n而且之后每个查询都会更新一次这个数组哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555148586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83285,"user_name":"小罗希冀","can_delete":false,"product_type":"c1","uid":1311995,"ip_address":"","ucode":"88416458FF0041","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","comment_is_top":false,"comment_ctime":1554517165,"is_pvip":false,"replies":[{"id":"30150","content":"事务A启动，创建事务A的视图；<br>事务B启动，更新，提交；<br>这时候在事务A的视图数组里面，没有B，但是B已经提交了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554608661,"ip_address":"","comment_id":83285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554517165","product_id":100020801,"comment_content":"重新再看一次这篇文章，在这处地方产生疑惑<br>原文：“若 row trx_id 不在数组中，表示这个版本是已经提交的事务生成，数据可见”<br>疑惑之处：既然是已提交的事务，该事务又怎么会处于黄色区域呢？<br>望老师解答，谢谢","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445960,"discussion_content":"事务A启动，创建事务A的视图；\n事务B启动，更新，提交；\n这时候在事务A的视图数组里面，没有B，但是B已经提交了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554608661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80916,"user_name":"幺果爸","can_delete":false,"product_type":"c1","uid":1374121,"ip_address":"","ucode":"3A7BA87777560A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/a9/c646b3d9.jpg","comment_is_top":false,"comment_ctime":1553754916,"is_pvip":false,"replies":[{"id":"29647","content":"😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554048877,"ip_address":"","comment_id":80916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553754916","product_id":100020801,"comment_content":"不是专业DBA，这篇反复读了几遍，才搞明白一些，老师这篇重写的非常好，扔出来一大堆概念我估计要失眠了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445018,"discussion_content":"😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554048877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80021,"user_name":"张志浩","can_delete":false,"product_type":"c1","uid":1306686,"ip_address":"","ucode":"CDE5C62741C799","user_header":"https://static001.geekbang.org/account/avatar/00/13/f0/3e/93448c09.jpg","comment_is_top":false,"comment_ctime":1553594052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553594052","product_id":100020801,"comment_content":"老师你好，一条数据未被事务更新时，数据的隐藏列DB_TRX_ID的值是怎么样的。比如，事务99对一条数据做了更新，然后到了当前事务199，这条数据都没有被更新过，此时这条数据的隐藏列DB_TRX_ID是99还是会变成199？一直很疑惑，全库快照的时候，隐藏列的值是如何变化的，是快照的时候全库变更（感觉不太可能），还是只有更新这条数据了，DB_TRX_ID的值才会变更，望老师回答","like_count":0},{"had_liked":false,"id":79791,"user_name":"allean","can_delete":false,"product_type":"c1","uid":1051470,"ip_address":"","ucode":"A0D2DB4F219EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","comment_is_top":false,"comment_ctime":1553558567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553558567","product_id":100020801,"comment_content":"原文：在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。<br>问题：这个数组保存的是事务ID吗？既然是启动瞬间，为什么是所有事务ID啊？请老师有时间解答一下，感谢！","like_count":0},{"had_liked":false,"id":77342,"user_name":"L!en6o","can_delete":false,"product_type":"c1","uid":1054472,"ip_address":"","ucode":"E0931CB8998260","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/08/566fb246.jpg","comment_is_top":false,"comment_ctime":1552910008,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552910008","product_id":100020801,"comment_content":"事务B的语句：update ... select ... ;这里的select语句是不是当前读？；那么是不是开启事务的select也是当前读？","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145729,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579577202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77186,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1552879715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552879715","product_id":100020801,"comment_content":"为什么我的结果和你的不一样？<br>Database changed<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>4 rows in set (0.03 sec)<br><br>mysql&gt; update t set c=0 where id=c;<br>Query OK, 4 rows affected (0.02 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    0 |<br>|  2 |    0 |<br>|  3 |    0 |<br>|  4 |    0 |<br>+----+------+<br>4 rows in set (0.00 sec)","like_count":0},{"had_liked":false,"id":76969,"user_name":"刀尖红叶","can_delete":false,"product_type":"c1","uid":1028694,"ip_address":"","ucode":"05693C09019B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/56/8842ef4d.jpg","comment_is_top":false,"comment_ctime":1552789366,"is_pvip":false,"replies":[{"id":"28817","content":"有<br><br>rc是语句启动的时候生成","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1553344846,"ip_address":"","comment_id":76969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552789366","product_id":100020801,"comment_content":"只有 rr 才有 read view？rc 隔离界别会有 read view 吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443520,"discussion_content":"有\n\nrc是语句启动的时候生成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553344846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76968,"user_name":"ANTIPE","can_delete":false,"product_type":"c1","uid":1446155,"ip_address":"","ucode":"0BC6609DB877F8","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/0b/433b5fe8.jpg","comment_is_top":false,"comment_ctime":1552789156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552789156","product_id":100020801,"comment_content":"低水位指的是活跃事务ID数组中最小的事务ID，高水位指的是当前系统中存在的最大事务ID(并不是数组中的最大事务ID)，这就可以理解下面的三种情况了。","like_count":0},{"had_liked":false,"id":76876,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1552735388,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552735388","product_id":100020801,"comment_content":"数据行的事务id是不是会在扫描redo持久化到磁盘的时候去掉呀","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145740,"discussion_content":"是undo log","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579577661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74913,"user_name":"洗澡水","can_delete":false,"product_type":"c1","uid":1150808,"ip_address":"","ucode":"D3133D0525C816","user_header":"","comment_is_top":false,"comment_ctime":1552312822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552312822","product_id":100020801,"comment_content":"老师你好，有个关于事务”原子性“的问题麻烦您帮我解疑：事务的原子性，指的到底是”要么都做，要么都不做（经典的银行转账问题）“还是指的是”这个事务是在一个 CPU 时间片内执行完的，不会被系统拆分多个 时间片分开执行“。还有存储过程是原子性的么？在多线程高并发的情况下是不是存储过程也会出现类似”加了100次，结果小于100“这种情况？以前提前是事务隔离级别设置为默认的 RR。","like_count":0},{"had_liked":false,"id":73705,"user_name":"21克","can_delete":false,"product_type":"c1","uid":1045053,"ip_address":"","ucode":"D22881BCE136BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/3d/656b66f0.jpg","comment_is_top":false,"comment_ctime":1551961439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551961439","product_id":100020801,"comment_content":"高手，总结能力值得学习","like_count":0},{"had_liked":false,"id":73640,"user_name":"刘志兵","can_delete":false,"product_type":"c1","uid":1441734,"ip_address":"","ucode":"A90C2FA49EDC23","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/c6/8b5cbe97.jpg","comment_is_top":false,"comment_ctime":1551946589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551946589","product_id":100020801,"comment_content":"真的是讲的太好了，没有基础，读了三遍总算是理解了，感谢老师！","like_count":0},{"had_liked":false,"id":73624,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1084291,"ip_address":"","ucode":"55FF703DE772D7","user_header":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","comment_is_top":false,"comment_ctime":1551942576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551942576","product_id":100020801,"comment_content":"老师，你好，你说的里面的诧异的情况，我这边怎么没发现，隔离级别也是RR，求解释，演示如下：<br>mysql&gt; CREATE TABLE `t` (<br>    -&gt;   `id` int(11) NOT NULL,<br>    -&gt;   `c` int(11) DEFAULT NULL,<br>    -&gt;   PRIMARY KEY (`id`)<br>    -&gt; ) ENGINE=InnoDB;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into t(id, c) values(1,1),(2,2),(3,3),(4,4);<br>Query OK, 4 rows affected (0.00 sec)<br>Records: 4  Duplicates: 0  Warnings: 0<br><br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; update t set c=0 where id=c;<br>Query OK, 4 rows affected (0.00 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    0 |<br>|  2 |    0 |<br>|  3 |    0 |<br>|  4 |    0 |<br>+----+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; show variables like &#39;%tx%&#39;;<br>+---------------+-----------------+<br>| Variable_name | Value           |<br>+---------------+-----------------+<br>| tx_isolation  | REPEATABLE-READ |<br>| tx_read_only  | OFF             |<br>+---------------+-----------------+<br>2 rows in set, 1 warning (0.00 sec)<br><br>mysql&gt; show variables like &#39;%version%&#39;;<br>+-------------------------+------------------------------+<br>| Variable_name           | Value                        |<br>+-------------------------+------------------------------+<br>| innodb_version          | 5.7.25                       |<br>| protocol_version        | 10                           |<br>| slave_type_conversions  |                              |<br>| tls_version             | TLSv1,TLSv1.1                |<br>| version                 | 5.7.25                       |<br>| version_comment         | MySQL Community Server (GPL) |<br>| version_compile_machine | x86_64                       |<br>| version_compile_os      | Win64                        |<br>+-------------------------+------------------------------+<br>8 rows in set, 1 warning (0.00 sec)<br>","like_count":0},{"had_liked":false,"id":72855,"user_name":"啊啊啊哦哦","can_delete":false,"product_type":"c1","uid":1309877,"ip_address":"","ucode":"68C7153ECAAC57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","comment_is_top":false,"comment_ctime":1551747986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551747986","product_id":100020801,"comment_content":"1.图3可见性规则。第三点中的 b实在不理解 。 若row trx-id落在黄色部分。时。如果 row trx-id不在数组中。 竟然都落在黄色中了。为什么不在数组中。感觉3中的b就是第1点吧。<br>2.读提交情况下。  每次语句执行的时候都会生成一致性视图 那就说明 一次事物中。每次执行语句都会重新分配一个事物id 吗。要不然。文章中的。事务c 是后开始先提交了。事务a 可以读到（1，2） 按照上面试图逻辑有点不通","like_count":0},{"had_liked":false,"id":72735,"user_name":"木子","can_delete":false,"product_type":"c1","uid":1390997,"ip_address":"","ucode":"66B9C493F25B11","user_header":"https://static001.geekbang.org/account/avatar/00/15/39/95/a72ef023.jpg","comment_is_top":false,"comment_ctime":1551707596,"is_pvip":false,"replies":[{"id":"27090","content":"看下21篇","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1552111839,"ip_address":"","comment_id":72735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551707596","product_id":100020801,"comment_content":"老师你好，我想问一下上期的问题：在删除数据的时候，一次删除的数据量比较大的时候，为什么会有锁，这个锁又是什么锁呢？能分析一下这个删除的过程吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441716,"discussion_content":"看下21篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552111839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72696,"user_name":"李刚","can_delete":false,"product_type":"c1","uid":1424487,"ip_address":"","ucode":"BFA253F932F01B","user_header":"https://static001.geekbang.org/account/avatar/00/15/bc/67/2e19e8ef.jpg","comment_is_top":false,"comment_ctime":1551696510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551696510","product_id":100020801,"comment_content":"ithunter的问题，很好设计啊。你把喜欢的这个操作，当做一个日志表。A喜欢B记录一条，B喜欢A再记录一条，全部直接插入进去。\r\r然后再 判断这2条数据，是否都存在，都存在就插入到好友表里。","like_count":0},{"had_liked":false,"id":72103,"user_name":"k先生","can_delete":false,"product_type":"c1","uid":1221532,"ip_address":"","ucode":"76D292DC62B52D","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/9c/8a14b7db.jpg","comment_is_top":false,"comment_ctime":1551519942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551519942","product_id":100020801,"comment_content":"老师，您的本节课的问题我运行了，结果成功了。更新为了0，msyql版本为 5.7.23 ，centos 系统。请问老师版本多少？","like_count":0},{"had_liked":false,"id":71666,"user_name":"kabuka","can_delete":false,"product_type":"c1","uid":1246009,"ip_address":"","ucode":"932DD1E875D850","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/39/18956b2e.jpg","comment_is_top":false,"comment_ctime":1551408696,"is_pvip":false,"replies":[{"id":"26075","content":"&quot;如果事务b在c update之前查询了一下，应该会得到1，之后c更新到2，然后b更新到3&quot;<br><br>这个并没有影响可重复读的约定，因为可重复读是对“一致性读”才有效，最后的“然后b更新到3”，用的是当前读，语义上就是要看到最新的 。<br><br>不看到最新的反而麻烦了，等于是把c的更新给覆盖了，丢失数据。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551509624,"ip_address":"","comment_id":71666,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551408696","product_id":100020801,"comment_content":"针对图一我有个疑问，如果事务b在c update之前查询了一下，应该会得到1，之后c更新到2，然后b更新到3，最后b查询获得3，这样的话对于b来说两次查询到的值不符合预期啊，那还能叫可重复读吗？不好意思，我不是dba,基础有点差，请老师帮忙看下","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441265,"discussion_content":"&amp;quot;如果事务b在c update之前查询了一下，应该会得到1，之后c更新到2，然后b更新到3&amp;quot;\n\n这个并没有影响可重复读的约定，因为可重复读是对“一致性读”才有效，最后的“然后b更新到3”，用的是当前读，语义上就是要看到最新的 。\n\n不看到最新的反而麻烦了，等于是把c的更新给覆盖了，丢失数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551509624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71424,"user_name":"Demter","can_delete":false,"product_type":"c1","uid":1158439,"ip_address":"","ucode":"BE3B6F726916CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/27/5556ae50.jpg","comment_is_top":false,"comment_ctime":1551339240,"is_pvip":false,"replies":[{"id":"25553","content":"可以加入这个事实考虑下：低水位id比这个事务自己的id小，而且可能小很多","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551350847,"ip_address":"","comment_id":71424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551339240","product_id":100020801,"comment_content":"row trx_id的几种可能中，第一种可能和第3（b）种可能有什么区别？<br><br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441144,"discussion_content":"可以加入这个事实考虑下：低水位id比这个事务自己的id小，而且可能小很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551350847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69481,"user_name":"Cy190622","can_delete":false,"product_type":"c1","uid":1381528,"ip_address":"","ucode":"578D804C29248E","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/98/0251b8fd.jpg","comment_is_top":false,"comment_ctime":1550754273,"is_pvip":false,"replies":[{"id":"24678","content":"看一下下一篇末尾的复现步骤哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550760866,"ip_address":"","comment_id":69481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550754273","product_id":100020801,"comment_content":"老师，我按照建表语句创建的表。怎么在执行update语句的时候，可以直接将c置为0的。为什么不能置零。我不是太明白，希望您能解答一下。先感谢老师回答。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440142,"discussion_content":"看一下下一篇末尾的复现步骤哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550760866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69346,"user_name":"happyhacker","can_delete":false,"product_type":"c1","uid":1033027,"ip_address":"","ucode":"8AFE882890F736","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/43/4adc5704.jpg","comment_is_top":false,"comment_ctime":1550721221,"is_pvip":false,"replies":[{"id":"24637","content":"就是没复现^_^<br>看一下下期的最后","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550727895,"ip_address":"","comment_id":69346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550721221","product_id":100020801,"comment_content":"老师好，我是在您重写第8篇之后看到的。关于课后问题，我在8.0.13下执行是无法复现的。<br>```<br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; update t set c= 0 where id = c;<br>Query OK, 4 rows affected (0.00 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    0 |<br>|  2 |    0 |<br>|  3 |    0 |<br>|  4 |    0 |<br>+----+------+<br>4 rows in set (0.00 sec)<br>```","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440072,"discussion_content":"就是没复现^_^\n看一下下期的最后","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550727895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65907,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1549764479,"is_pvip":false,"replies":[{"id":"23411","content":"新年好<br><br>好问题<br>这两个概念的关系是：<br>视图数组是活跃事务ID的集合，这个集合里，最小的事务id记为Min_id, 最大的事务id记为Max_id<br>黄色区间就是 [Min_id, Max_id] 这个区间<br><br>PS：Min_id就是低水位","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549874519,"ip_address":"","comment_id":65907,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1549764479","product_id":100020801,"comment_content":"“在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。”<br>“如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见”<br>老师新年好，这两段话有点矛盾，前一段定义了“活跃”事务是启动了但还没提交，后面一段又说不在数组中是已经提交了的事务生成，那么黄色段是个区间还是活跃事务数组呢？从后面解释来理解是个区间，谢谢老师解答。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438637,"discussion_content":"新年好\n\n好问题\n这两个概念的关系是：\n视图数组是活跃事务ID的集合，这个集合里，最小的事务id记为Min_id, 最大的事务id记为Max_id\n黄色区间就是 [Min_id, Max_id] 这个区间\n\nPS：Min_id就是低水位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549874519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65141,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1549075368,"is_pvip":false,"replies":[{"id":"23191","content":"新春快乐~<br>你这两个问题刚好是一起的^_^<br><br><br>1. 在RR隔离级别，不会；<br>2. 如果是RC，那么每次语句执行的时候，重新生成一次一致性视图","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549271104,"ip_address":"","comment_id":65141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549075368","product_id":100020801,"comment_content":"老师，我有2问题:<br>1:当启动事务的时候，我们生成一致性视图数组（低水位，活跃，高水位），如果后面有新的事务生成或者提交 这个数组会变动吗?<br>2:老师这堂课应该只是讲的是rr的处理方式，如果是rc，当前事务是怎么查看到 在当前事务处理过程中提交的事务呢?","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438333,"discussion_content":"新春快乐~\n你这两个问题刚好是一起的^_^\n\n\n1. 在RR隔离级别，不会；\n2. 如果是RC，那么每次语句执行的时候，重新生成一次一致性视图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549271104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64459,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1548807759,"is_pvip":false,"replies":[{"id":"22824","content":"👍","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548810024,"ip_address":"","comment_id":64459,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1548807759","product_id":100020801,"comment_content":"清楚了，老师厉害，之前只陷入前半部分，没看后面的当前读，觉得有脏读的矛盾","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438009,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548810024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64277,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1548731737,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1548731737","product_id":100020801,"comment_content":"好，现在事务 A 要来读数据了，它的视图数组是 [99,100]。当然了，读数据都是从当前版本读起的。所以，事务 A 查询语句的读数据流程是这样的：<br><br>找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；<br>接着，找到上一个历史版本，一看 row trx_id=102，比高水位大，处于红色区域，不可见；<br>再往前找，终于找到了（1,1)，它的 row trx_id=90，比低水位小，处于绿色区域，可见。<br>老师，能说明一下事务b的找数过程吗？比如事务b中先是update语句怎么找，接着是select怎么找，我现在卡在这节没理解，谢谢<br>","like_count":0},{"had_liked":false,"id":63952,"user_name":"奋斗心","can_delete":false,"product_type":"c1","uid":1247286,"ip_address":"","ucode":"06A195AB0B6570","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/36/98be3d69.jpg","comment_is_top":false,"comment_ctime":1548612418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548612418","product_id":100020801,"comment_content":"思考题：不理解由于update t set c = id + 1 能实现效果。即使由于CAS原因导致update t set c=0 where id = c失败。update t set c = id + 1 这句不应该执行成功了吗？意思是说update t set c=0 where id = c失败后，update t set c = id + 1  会回滚？","like_count":0},{"had_liked":false,"id":63624,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1548420011,"is_pvip":true,"replies":[{"id":"22499","content":"是的，以前那个写法太啰嗦了😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548427003,"ip_address":"","comment_id":63624,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1548420011","product_id":100020801,"comment_content":"在8.0的文档中：SELECT ... FOR SHARE is a replacement for SELECT ... LOCK IN SHARE MODE, but LOCK IN SHARE MODE remains available for backward compatibility. The statements are equivalent.<br><br>和for update格式保持一致，也更容易理解了。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437656,"discussion_content":"是的，以前那个写法太啰嗦了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548427003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63424,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1548351559,"is_pvip":false,"replies":[{"id":"22458","content":"不是 “已提交的在绿色区域” 哦<br><br>而是 “在事务a启动的时候，已提交的在绿色区域”。<br>在事务a启动的时候， 102这个事务还没提交的。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548382276,"ip_address":"","comment_id":63424,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1548351559","product_id":100020801,"comment_content":"老师，请教下面您说的这句话“接着，找到上一个历史版本，一看 row trx_id=102，比高水位大，处于红色区域，不可见；”事务a的视图数组是[99,100],按照已提交的在绿色区域（已提交或者事务自己改的都在绿色区域）的话，这时应该能读trx_id=102的吧？为何处于红色区域","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437580,"discussion_content":"不是 “已提交的在绿色区域” 哦\n\n而是 “在事务a启动的时候，已提交的在绿色区域”。\n在事务a启动的时候， 102这个事务还没提交的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548382276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63212,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1548299501,"is_pvip":false,"replies":[{"id":"22390","content":"这个解释是对的呀<br>图1我们就是在RR下讨论的。<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548306891,"ip_address":"","comment_id":63212,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1548299501","product_id":100020801,"comment_content":"我还有点疑问请教老师，事务c是立刻commit，表里变成2，分两种情况讨论：<br>场景1:如果隔离级别是RC，那么b的update看到的也是2，将它更新成3，再select出来3，但还没commit，而a只能看到c提交的2<br><br>场景2:如果隔离级别是RR，那么b的update看到的也是1，将它更新成2，再select出来2，但还没commit，而a只能看到c未提交的1","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437503,"discussion_content":"这个解释是对的呀\n图1我们就是在RR下讨论的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548306891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63151,"user_name":"唐国舜","can_delete":false,"product_type":"c1","uid":1169737,"ip_address":"","ucode":"9024874D34C442","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/49/09691c94.jpg","comment_is_top":false,"comment_ctime":1548289728,"is_pvip":false,"replies":[{"id":"22371","content":"你说的“更新时要再读一次吧”是指再更新一次事务的视图数组吗？<br><br>更新的时候，如果更新成功，最新版本会使用“当前事务的id”，所以能看到；<br><br>如果更新没成功，就看不到了。<br><br>所以并没有“再读一次”哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548292345,"ip_address":"","comment_id":63151,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1548289728","product_id":100020801,"comment_content":"第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。，老师，我对这个还没理解，读一致性从事务开始算，事务a看到1可以理解，但事务b是更新后再读，在事务开始时【99-101】，更新时要再读一次吧，要不怎么感知到102的事务？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437484,"discussion_content":"你说的“更新时要再读一次吧”是指再更新一次事务的视图数组吗？\n\n更新的时候，如果更新成功，最新版本会使用“当前事务的id”，所以能看到；\n\n如果更新没成功，就看不到了。\n\n所以并没有“再读一次”哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548292345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63108,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1548256341,"is_pvip":false,"replies":[{"id":"22351","content":"你给我举个例子吧^_^ 以防我对pg概念理解偏差回答错误哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548257632,"ip_address":"","comment_id":63108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548256341","product_id":100020801,"comment_content":"请教老师，文中提到在MySQL的RR隔离级别下的当前读用到了锁，请问这样是否可以避免在postgres之类没有使用当前读来实现RR隔离级别的数据库中产生的写偏序问题？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437474,"discussion_content":"你给我举个例子吧^_^ 以防我对pg概念理解偏差回答错误哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548257632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62438,"user_name":"无菇朋友","can_delete":false,"product_type":"c1","uid":1035562,"ip_address":"","ucode":"80482C5F0464A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/2a/bdbed6ed.jpg","comment_is_top":false,"comment_ctime":1548057805,"is_pvip":false,"replies":[{"id":"22085","content":"忽略这个哈，因为这篇文章后来重写了<br>一楼的同学很认真，他看过上一个版本的，这个问题是基于上一个版本的😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548076849,"ip_address":"","comment_id":62438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548057805","product_id":100020801,"comment_content":"最高赞的老哥的问题，不就是对应着3(a)的情况","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437213,"discussion_content":"忽略这个哈，因为这篇文章后来重写了\n一楼的同学很认真，他看过上一个版本的，这个问题是基于上一个版本的😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548076849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62405,"user_name":"阿邱","can_delete":false,"product_type":"c1","uid":1281762,"ip_address":"","ucode":"A3D1A90E01D83D","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/e2/1e70c61d.jpg","comment_is_top":false,"comment_ctime":1548048616,"is_pvip":false,"replies":[{"id":"22089","content":"这个问题的上下文是？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548077139,"ip_address":"","comment_id":62405,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1548048616","product_id":100020801,"comment_content":"按理说前面的事务id应该小啊，怎么还大呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437199,"discussion_content":"这个问题的上下文是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548077139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145858,"discussion_content":"因为有可能后申请的事务先提交了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579584735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62403,"user_name":"阿邱","can_delete":false,"product_type":"c1","uid":1281762,"ip_address":"","ucode":"A3D1A90E01D83D","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/e2/1e70c61d.jpg","comment_is_top":false,"comment_ctime":1548048351,"is_pvip":false,"replies":[{"id":"22087","content":"是指哪些段落呢？<br>这篇文章我是重写过三次了，其他同学的反馈来看还是可以的<br>把你不清楚的地方指出来吧，<br>可能有时候只是一个点卡住了而已","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548077026,"ip_address":"","comment_id":62403,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1548048351","product_id":100020801,"comment_content":"文章很难让人读懂，真费劲，写技术文档必须每个字都非常严谨，否则别人很难读懂，你自己当然读得懂，或者直接举个简单现实更容易懂些，看技术文档还得自己看一些原始的东西，很难跟上别人的思路，除非写的很通俗易懂。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437197,"discussion_content":"是指哪些段落呢？\n这篇文章我是重写过三次了，其他同学的反馈来看还是可以的\n把你不清楚的地方指出来吧，\n可能有时候只是一个点卡住了而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548077026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145859,"discussion_content":"将每个字都消化一下还是可以明白的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579584767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62161,"user_name":"Zzz","can_delete":false,"product_type":"c1","uid":1116272,"ip_address":"","ucode":"4AA47797F48315","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKTjelrQaLYOSVK2rsFeia0G8ASTIftib5PTOx4pTqdnfwb0NiaEFGRgS661nINyZx9sUg/132","comment_is_top":false,"comment_ctime":1547965472,"is_pvip":false,"replies":[{"id":"21991","content":"可重复读隔离级别下，事务B的视图数组和高水位，执行期间都不会修改的。<br>A提交了对B的一致性视图没影响。<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547972688,"ip_address":"","comment_id":62161,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1547965472","product_id":100020801,"comment_content":"老师。我看到&quot;某、人&quot;同学说“一个事务要查看一条数据时,必须先用该事务的up_limit_id与该行的transaction id做比对,如果up_limit_id&gt;=transaction id,那么可以看...&quot;, &quot;什么是当前读,由于当前读都是先读后写,只能读当前的值,所以为当前读.会更新事务内的up_limit_id为该事务的transaction id&quot;。关于“更新事务up_limit_id”这个说法，我有疑惑，我做了以下的实验（MySQL 5.7.14）：表t原始数据(7,2)，(8,3).<br>A                                                                       |B<br>start transaction with consistent snapshot;          |<br>                                                                         |start transaction with consistent snapshot;<br>insert(9,3)                                                          |<br>                                                                         |select 看到的仍是(7,2)，(8,3)<br>update t set c=1 where id=7                              |<br>select 看到的是(7,1)，(8,3), (9,3)                         |select 看到的仍是(7,2)，(8,3)<br>commit;                                                            |<br>                                                                        |select 看到的仍是(7,2)，(8,3)<br>                                                                        |update t set c=4 where c=3<br>                                                                        |select 看到的是(7,2)，(8,4), (9,4)<br>我的疑问是如果事务B修改了up_limit_id为事务A的transaction id，那事务B最终select应该能看到(7,1)。 <br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437121,"discussion_content":"可重复读隔离级别下，事务B的视图数组和高水位，执行期间都不会修改的。\nA提交了对B的一致性视图没影响。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547972688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315049,"avatar":"https://static001.geekbang.org/account/avatar/00/14/10/e9/f5e55ccf.jpg","nickname":"小鬼","note":"","ucode":"52EE8A18B90C6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572384,"discussion_content":"相当于老师在文章中的事务A和事务C","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652755857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61770,"user_name":"panda","can_delete":false,"product_type":"c1","uid":1094963,"ip_address":"","ucode":"D1E82CEF1520FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/b5/33/2af9ccd1.jpg","comment_is_top":false,"comment_ctime":1547797019,"is_pvip":false,"replies":[{"id":"21917","content":"事务启动时申请自己的trxid，但是创建视图列表的时候，是“稍微晚一点”的，这里有时间差，中间可能有别的事务也提交啦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547802876,"ip_address":"","comment_id":61770,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547797019","product_id":100020801,"comment_content":"高水位不是当前事务自己吗? 当前事务启动瞬间 它的线程号应该是最大的啊<br> &quot;当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水&quot;<br>为什么不是?<br><br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436985,"discussion_content":"事务启动时申请自己的trxid，但是创建视图列表的时候，是“稍微晚一点”的，这里有时间差，中间可能有别的事务也提交啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547802876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61273,"user_name":"Geek_515b9e","can_delete":false,"product_type":"c1","uid":1335734,"ip_address":"","ucode":"2D041B7679A2AF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dlj3u0jzg1gmCSxZ6daxUhhjtjmgqIwdOyalaEXYDYyQxibOsQdTrKFPPRs2I2XCHoehNaYUPrIffia9ZnR9efqQ/132","comment_is_top":false,"comment_ctime":1547651000,"is_pvip":false,"replies":[{"id":"21796","content":"图1 的事务B是在事务A之后才创建的呀，<br><br>然后我没看懂你这个问题的逻辑。。你重新理一下再发一个😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547658870,"ip_address":"","comment_id":61273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547651000","product_id":100020801,"comment_content":"老师您好，start transaction with consistent snapshot 这个命令是启动马上开启事务，那么图一中事务b是在事务a开始之前就创建了呀。为什么还可以看到c修改的数据呢，忘老师解答。。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436809,"discussion_content":"图1 的事务B是在事务A之后才创建的呀，\n\n然后我没看懂你这个问题的逻辑。。你重新理一下再发一个😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547658870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61185,"user_name":"旧时光、","can_delete":false,"product_type":"c1","uid":1304473,"ip_address":"","ucode":"BED36D3500CCD7","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/99/8dbfe583.jpg","comment_is_top":false,"comment_ctime":1547634068,"is_pvip":false,"replies":[{"id":"21792","content":"这个不是死锁啊，这个是锁等待超时","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547653613,"ip_address":"","comment_id":61185,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547634068","product_id":100020801,"comment_content":"老师，5.7.17  REPEATABLE-READ 执行图6中事务B的update时返回死锁了。什么情况？<br>mysql&gt; update t set k=k+1 where id=1;<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436777,"discussion_content":"这个不是死锁啊，这个是锁等待超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547653613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60011,"user_name":"liuq","can_delete":false,"product_type":"c1","uid":1304009,"ip_address":"","ucode":"88437D66C547C4","user_header":"https://static001.geekbang.org/account/avatar/00/13/e5/c9/36fdec8e.jpg","comment_is_top":false,"comment_ctime":1547436765,"is_pvip":false,"replies":[{"id":"21512","content":"在当前事务启动前就已经提交了，不在数组中，但是比低水位高。<br>你想下这种场景，按照时间顺序：<br>事务A启动 ，假设trx_id是1；<br>事务B启动，假设trx_id是2；<br>事务B提交；<br>事务C启动，这时候C的低水位是1，因为A还没提交。所对于C的事务数组里是没有2的，但是“2&gt;低水位（也就是1）”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547447048,"ip_address":"","comment_id":60011,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547436765","product_id":100020801,"comment_content":"怎么在别人问题下回复呢，或者引用别人的问题？<br>有个问题一直卡着：<br><br>老师您好：<br>今天重新看了一下这章您的修改地方，有个地方不明白<br>落在黄色区域未提交事务集合部分怎么还要分类，低水位+高水位不就是这个数组了吗，之前说，这个数组是记录事务启动瞬间，所有已经启动还未提交的事务ID，那不应该是未提交的事务吗，不就应该是不可读的吗<br>之前说的是启动时会获取一个最大row trx_id，所有大于这个id都不认，这个id肯定是已经提交了的事务的才对啊，这个id不才应该是数组的高水位吗，这里有点懵了<br>2018-12-03作者回复  你设计一个“比低水位大，但是在当前事务启动前，就已经提交了的例子😄<br>---------------------------------<br>无法理解，在当前事务启动前就已经提交了，不是已经不活跃了吗，怎么还在快照数组中<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436436,"discussion_content":"在当前事务启动前就已经提交了，不在数组中，但是比低水位高。\n你想下这种场景，按照时间顺序：\n事务A启动 ，假设trx_id是1；\n事务B启动，假设trx_id是2；\n事务B提交；\n事务C启动，这时候C的低水位是1，因为A还没提交。所对于C的事务数组里是没有2的，但是“2&amp;gt;低水位（也就是1）”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547447048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58994,"user_name":"scarlett🦌","can_delete":false,"product_type":"c1","uid":1304906,"ip_address":"","ucode":"C725D8EC73E3D7","user_header":"https://static001.geekbang.org/account/avatar/00/13/e9/4a/db2252f6.jpg","comment_is_top":false,"comment_ctime":1547267161,"is_pvip":false,"replies":[{"id":"21350","content":"👍","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547269197,"ip_address":"","comment_id":58994,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547267161","product_id":100020801,"comment_content":"顿悟了，读一直是一致性读，更新是当前已提交的基础上更新。感谢作者的分享，支持","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436268,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547269197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58964,"user_name":"scarlett🦌","can_delete":false,"product_type":"c1","uid":1304906,"ip_address":"","ucode":"C725D8EC73E3D7","user_header":"https://static001.geekbang.org/account/avatar/00/13/e9/4a/db2252f6.jpg","comment_is_top":false,"comment_ctime":1547261485,"is_pvip":false,"replies":[{"id":"21348","content":"因为B又修改了这个数据一次<br>等于最新的数据结果是B自己修改的，它就要可见","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547269161,"ip_address":"","comment_id":58964,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547261485","product_id":100020801,"comment_content":"例子中的事务C是在事务B后启动的，对B而言属于范围区间，按照文中的结论，在可重复读隔离级别下，B不应该可见C的执行结果，B为什么选出来是3<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436261,"discussion_content":"因为B又修改了这个数据一次\n等于最新的数据结果是B自己修改的，它就要可见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547269161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58492,"user_name":"几近虚年","can_delete":false,"product_type":"c1","uid":1355831,"ip_address":"","ucode":"28CD6486EED8E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","comment_is_top":false,"comment_ctime":1547090579,"is_pvip":false,"replies":[{"id":"21173","content":"👍一起学习","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547134389,"ip_address":"","comment_id":58492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547090579","product_id":100020801,"comment_content":"昨天看了2遍始终不是很明白，今天早上来看，很多知识点就感觉明白了。<br>一致性视图、行锁、当前读，基本连通起来了，老师的课文讲的真好。<br>以前只会写sql语句，什么增删查改，自从决定好好学习下原理，看了老师的文章，很多东西都明白了。对以后写代码也有很多帮助，代码的顺序，sql语句的优化等。<br>多谢老师！","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436090,"discussion_content":"👍一起学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547134389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58461,"user_name":"目人可分😁","can_delete":false,"product_type":"c1","uid":1155558,"ip_address":"","ucode":"37487B09CCDEB8","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/e6/c0577a54.jpg","comment_is_top":false,"comment_ctime":1547086116,"is_pvip":true,"replies":[{"id":"21076","content":"哈哈👍🏿这个状态很好","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547089100,"ip_address":"","comment_id":58461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547086116","product_id":100020801,"comment_content":"这些天才开始撸您的文章，看完这篇文章之后，一开始我是很懵的状态，各种碎片化的知识在大脑中一直萦绕，似乎看到了光明但是又很灰暗，之后我下班之后一直在想，在关联所有学知识，经历了挺痛苦的理解和推翻 在重新理解的过程，现在我感觉有种挣脱束缚的自由感，谢谢您老师！","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436072,"discussion_content":"哈哈👍🏿这个状态很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547089100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58077,"user_name":"jiaobuchongจุ๊บ","can_delete":false,"product_type":"c1","uid":1118938,"ip_address":"","ucode":"0AEE4E579DC3A2","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg","comment_is_top":false,"comment_ctime":1546994292,"is_pvip":false,"replies":[{"id":"21121","content":"对的 ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1547119078,"ip_address":"","comment_id":58077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546994292","product_id":100020801,"comment_content":"1、start transaction with consistent snapshot; 执行完，就已经创建了 read view，read view 包括两部分 up_limit_id 和 事务活跃数组。事务小于  up_limit_id 的事务是可见的，活跃事务数组中已经提交的是可见的，本身事务做的 dml 是可见的。<br>2、如果是 begin 创建的事务，read view 会在第一次执行 select 的时候创建 read view。<br>3、更新是当前读。 ","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435894,"discussion_content":"对的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547119078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57915,"user_name":"byronwx","can_delete":false,"product_type":"c1","uid":1090933,"ip_address":"","ucode":"034EA3266CBBC0","user_header":"https://static001.geekbang.org/account/avatar/00/10/a5/75/41602108.jpg","comment_is_top":false,"comment_ctime":1546940224,"is_pvip":false,"replies":[{"id":"20879","content":"这篇文章上线以后重写过，之前用up_limit_id的概念，但是那个判断标准有点复杂，重写的版本去掉了这个概念，之前大家理解不准确只要是我的锅😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546949177,"ip_address":"","comment_id":57915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546940224","product_id":100020801,"comment_content":"感觉评论区很多人把 up_limit_id 的概念搞错了。<br>原文“当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位”","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435828,"discussion_content":"这篇文章上线以后重写过，之前用up_limit_id的概念，但是那个判断标准有点复杂，重写的版本去掉了这个概念，之前大家理解不准确只要是我的锅😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546949177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57730,"user_name":"fdconan","can_delete":false,"product_type":"c1","uid":1244596,"ip_address":"","ucode":"01C71C6E9FD1E4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLv9HJIW4OACkjlwOQJ9cU7HzvaDFYkACWCib2lzOMef9ZiaGDTVFqjPicpVK5KDRbBRVGGHrMHQO1Rw/132","comment_is_top":false,"comment_ctime":1546876626,"is_pvip":false,"replies":[{"id":"20818","content":"啊？就是说得一直往一直往前直到最后找到自己可见的版本","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546914551,"ip_address":"","comment_id":57730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546876626","product_id":100020801,"comment_content":"请教下，文章说：当然，如果“上一个版本”也不可见，那就得继续往前找。这个不太好理解。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435725,"discussion_content":"啊？就是说得一直往一直往前直到最后找到自己可见的版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546914551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57452,"user_name":"spraith","can_delete":false,"product_type":"c1","uid":1141702,"ip_address":"","ucode":"7FBC54DF0BBF50","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/c6/2534e14a.jpg","comment_is_top":false,"comment_ctime":1546793609,"is_pvip":false,"replies":[{"id":"20685","content":"其它同学的评论中有答复了😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546798392,"ip_address":"","comment_id":57452,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546793609","product_id":100020801,"comment_content":"“如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。”<br>这里的b，怎么会不在“活跃”数组中的？黄色是在高低水位之间，这之间的事务id都记在活跃数组中，所以按理来说应该不可能出现b情况啊，想不明白，求解答","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435581,"discussion_content":"其它同学的评论中有答复了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546798392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57449,"user_name":"信信","can_delete":false,"product_type":"c1","uid":1303865,"ip_address":"","ucode":"8DF0EC045579FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/e5/39/951f89c8.jpg","comment_is_top":false,"comment_ctime":1546793015,"is_pvip":false,"replies":[{"id":"20686","content":"1. 你说的对，我文中意思是事务B提交后返回版本号是101的数据；<br>2. 事务创建后，在获取视图数组前，有可能出现别的事务启动","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546799781,"ip_address":"","comment_id":57449,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546793015","product_id":100020801,"comment_content":"老师您好，文章中提到：<br>如果把事务 A 的查询语句 select * from t where id=1 修改一下，加上 lock in share mode 或 for update，也都可以读到版本号是 101 的数据，返回的 k 的值是 3。我认为这里会因为事务B未提交而被阻塞。请老师指正。此外，还有个问题：什么情况下高水位会大于自己的事务id？文中举例的几个事务id也都是等于视图数组的高水位的。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435580,"discussion_content":"1. 你说的对，我文中意思是事务B提交后返回版本号是101的数据；\n2. 事务创建后，在获取视图数组前，有可能出现别的事务启动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546799781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56945,"user_name":"山人","can_delete":false,"product_type":"c1","uid":1302051,"ip_address":"","ucode":"666E99D3CAB955","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/23/be735002.jpg","comment_is_top":false,"comment_ctime":1546584389,"is_pvip":false,"replies":[{"id":"20571","content":"不一定是自己的，可能是“比低水位后启动的、但是已经提交了的事务”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546609775,"ip_address":"","comment_id":56945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546584389","product_id":100020801,"comment_content":"老师你好！<br>针对图3，“数据版本可见性规则”的几种可能性解释的3(b)有疑惑：若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br>既然落在黄色部分，就是未提交的事务。怎么后面说是已经提交了的事务生成的呢？如果理解为：当前事务自己生成的，是不是更合理些。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435325,"discussion_content":"不一定是自己的，可能是“比低水位后启动的、但是已经提交了的事务”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546609775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56472,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1230417,"ip_address":"","ucode":"44F3D4DB3F5678","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","comment_is_top":false,"comment_ctime":1546474612,"is_pvip":false,"replies":[{"id":"20361","content":"A晚于B提，说明最新的版本是A生成的对吧<br><br>然后C去读数据的时候，就从最新版本开始读，先读到A生成这个，由于对C可见，就直接读走了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546480924,"ip_address":"","comment_id":56472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546474612","product_id":100020801,"comment_content":"老师，C查询一行数据， A和B都对这行数据进行了提交，这种情况下也是根据transid和事物启动时的数组来看A和B对于C都是可见的，但是A的transid小于B，A也晚于B提交，那是怎么保证C看到的是 A提交的数据？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435055,"discussion_content":"A晚于B提，说明最新的版本是A生成的对吧\n\n然后C去读数据的时候，就从最新版本开始读，先读到A生成这个，由于对C可见，就直接读走了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546480924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56320,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1230417,"ip_address":"","ucode":"44F3D4DB3F5678","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","comment_is_top":false,"comment_ctime":1546421642,"is_pvip":false,"replies":[{"id":"20271","content":"不是，你想这个序列：<br>A启动，更新id=1, <br>     B 启动更新id=2，提交； <br>A更新id=2，再提交；<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546424238,"ip_address":"","comment_id":56320,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546421642","product_id":100020801,"comment_content":"老师，我现在理解是  当A对一行进行操作时，开启事务，创建transid，然后B再对这一行操作时，必须要等到A提交释放锁后啊才可以继续操作，所以说明transid是严格递增的，查询一行数据时只查找transid最大的数据就可以了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434986,"discussion_content":"不是，你想这个序列：\nA启动，更新id=1, \n     B 启动更新id=2，提交； \nA更新id=2，再提交；\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546424238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56181,"user_name":"雪候鸟","can_delete":false,"product_type":"c1","uid":1121047,"ip_address":"","ucode":"B7A82676DFD39F","user_header":"https://static001.geekbang.org/account/avatar/00/11/1b/17/64e18a78.jpg","comment_is_top":false,"comment_ctime":1546400707,"is_pvip":false,"replies":[{"id":"20230","content":"就是直接读最新版本，连有没有提交都不管","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546402006,"ip_address":"","comment_id":56181,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546400707","product_id":100020801,"comment_content":"我想问问读未提交隔离级别是怎么实现的","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434951,"discussion_content":"就是直接读最新版本，连有没有提交都不管","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546402006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56077,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1230417,"ip_address":"","ucode":"44F3D4DB3F5678","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","comment_is_top":false,"comment_ctime":1546391590,"is_pvip":false,"replies":[{"id":"20169","content":"不是啊，此时C拿到的是A操作后的结果哦。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546393592,"ip_address":"","comment_id":56077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546391590","product_id":100020801,"comment_content":"老师，有三个事务，事务A先启动tranid是100，事务B再启动tranid是101，都对id=1的行操作，B先操作然后提交，A再操作然后提交，此时C开启事务执行查询id=1的行，那它应该拿的是tranid为101的数据，这样不就读不到最新的了吗","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434928,"discussion_content":"不是啊，此时C拿到的是A操作后的结果哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546393592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56001,"user_name":"Manjusaka","can_delete":false,"product_type":"c1","uid":1156145,"ip_address":"","ucode":"622B7C97CFDC92","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/31/e48393bf.jpg","comment_is_top":false,"comment_ctime":1546369991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546369991","product_id":100020801,"comment_content":"问题应该就是 MySQL RR 下的幻读吧<br>官府在我理解看来也是一种不可重读，不过作用的范围也不一样<br>目前看起来比较好的解决方案就是 CAS ，最暴力的就是串行化<br>复现的话，记得提交事务，不然在老师的 SQL 会被锁住","like_count":0},{"had_liked":false,"id":55884,"user_name":"窗外","can_delete":false,"product_type":"c1","uid":1311172,"ip_address":"","ucode":"1E8F2D9439E7F3","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/c4/21c2cde4.jpg","comment_is_top":false,"comment_ctime":1546339669,"is_pvip":false,"replies":[{"id":"20122","content":"MyISAM 不支持事务… ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546341986,"ip_address":"","comment_id":55884,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546339669","product_id":100020801,"comment_content":"在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。<br><br>有个疑问啊，对于库中的 myisam 表是怎么处理的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434874,"discussion_content":"MyISAM 不支持事务… ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546341986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55427,"user_name":"myf","can_delete":false,"product_type":"c1","uid":1303289,"ip_address":"","ucode":"028A99B2FA01EB","user_header":"","comment_is_top":false,"comment_ctime":1546172209,"is_pvip":false,"replies":[{"id":"20057","content":"额…这样描述比较难这么回答了😓","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546194501,"ip_address":"","comment_id":55427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546172209","product_id":100020801,"comment_content":"数据库是设置auto conmmit的，而且这种问题不是必然出现，是偶尔出现<br>--------------------------------<br>笔误，是相差几十毫秒，是业务日志显示已经插入成功，返回了影响行数1，然后启动的查询没查到，有点奇怪<br>--------------------------------<br> 作者回复<br>是不是在事务中没提交？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434768,"discussion_content":"额…这样描述比较难这么回答了😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546194501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55426,"user_name":"spraith","can_delete":false,"product_type":"c1","uid":1141702,"ip_address":"","ucode":"7FBC54DF0BBF50","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/c6/2534e14a.jpg","comment_is_top":false,"comment_ctime":1546172070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546172070","product_id":100020801,"comment_content":"我想到一种更容易理解的方法来说明innodb的mvcc。如下：<br>我们可以在现实中找到同样的问题，然后对现实问题进行解决。<br>我想到的是这样的，假设有六个人（对应于六个事务，人员编号对应于事务id）一起修改及阅读一本书（可对应整个数据库），并且有如下规则：1.同一页书同一个时刻只能允许一个人修改（页对应于一行记录，这条规则对应于行锁）2.某个人翻开书的瞬间（对应于事务开始），在他把书放下之前，不管这期间有多少人在改这本书，他看到的内容是不变的（对应于可重复读）。<br>再假设六人改书的顺序：除了3号，其他人都是改了某些页的内容，并且按编号依次顺序修改，而3号则是第三个参与进来的人，他只看书，看书的时间一直持续到了第6号人把书改完。<br>上面这种假设是符合常理的，因为现实中确实可能出现这样的场景（当然现实中不一定是改书了）。好了，现实问题已经构建完成，接下来我们就思考一下如何帮3号更高效地实现规则2。<br>首先最容易想到的是3号拿到的是他参与瞬间的整本书的复印件，这样是不会被其他人修改打扰了，但是复印整本书，效率只能是“呵呵”了。<br>继续想改进的办法。3号想，我进来的时候，2号已经改完了，所以我直接看他的版本就行（即不用管id比自己小的事务），但是456号的改动是在我未看完期间，他们的改动量相对于整个书是很小的，我能否让他们把各自的改动都记下来，分别记为d4，d5，d6（d是delta，增量的意思），dn的内容只需要记录哪个人（事务）改了哪页内容（哪条记录），并且要记录某页书最后一次是被谁改动的。<br>这样，当3号读到当前的某页书记录着被6号改动了，那只需要把当前页的内容-d6-d5-d4 就可以得到3号刚进来时的同一页书的内容了，如果看到某页被2号改动，直接读，如果看到被4号改动，则回退一下d4即可。<br>这种方案明显比复印整个书的方案要节省空间和时间。<br>现在回到数据库的mvcc，来把一些还未对应进去的数据库术语对进去：d4这些增量，本质上和数据库的undo log是一样的；低水位则对应于4号，高水位在这个例子中，至少是比6号更大的事务id（高低水位的边界有点记不太清楚，可能会有1的差异，主要能理解意思就行）；undolog的清除时机也很明显了，就是要能保证可以还原到3号的那个版本，d4（不包含d4）以前的都删除。","like_count":0},{"had_liked":false,"id":55372,"user_name":"林千景","can_delete":false,"product_type":"c1","uid":1137556,"ip_address":"","ucode":"4A15DB40B91346","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/94/091258c2.jpg","comment_is_top":false,"comment_ctime":1546151808,"is_pvip":false,"replies":[{"id":"20050","content":"在可重复读的时候，高水位这个指是事务创建的时候，保存起来的。<br><br>虽然后来变成103，但是sessionA 的事务数组和高水位都没有改变，所以判断的时候102是大于它的高水位的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546169234,"ip_address":"","comment_id":55372,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546151808","product_id":100020801,"comment_content":"图4事务A读数据的时候，此时最大事务ID是102，read-view是[99，100，10]，所以低水位是99，高水位是103。当前数据版本是(1,3),事务ID是103，文中说【找到 (1,3) 的时候，判断出 row trx_id=102，比高水位大，处于红色区域，不可见】;可是102不是比103小么？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434753,"discussion_content":"在可重复读的时候，高水位这个指是事务创建的时候，保存起来的。\n\n虽然后来变成103，但是sessionA 的事务数组和高水位都没有改变，所以判断的时候102是大于它的高水位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546169234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55309,"user_name":"林千景","can_delete":false,"product_type":"c1","uid":1137556,"ip_address":"","ucode":"4A15DB40B91346","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/94/091258c2.jpg","comment_is_top":false,"comment_ctime":1546103176,"is_pvip":false,"replies":[{"id":"20035","content":"是指那一个图？ 具体指明图几哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1546134366,"ip_address":"","comment_id":55309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546103176","product_id":100020801,"comment_content":"高水位是103，row trx_id=101为什么会比高水位大？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434733,"discussion_content":"是指那一个图？ 具体指明图几哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546134366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54974,"user_name":"myf","can_delete":false,"product_type":"c1","uid":1303289,"ip_address":"","ucode":"028A99B2FA01EB","user_header":"","comment_is_top":false,"comment_ctime":1545990425,"is_pvip":false,"replies":[{"id":"19888","content":"这个不是幻读呀，这个是写入了查不到<br><br>你看的“查询在插入之后几十微秒发起”，这个日志是客户端日志，还是数据库日志？<br>数据库除非特别定制，否则没有微秒单位，<br>如果是业务发送端的话，有可能查询是后发先到哦，毕竟才差几十微秒…","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545994448,"ip_address":"","comment_id":54974,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545990425","product_id":100020801,"comment_content":"请教一下，我在mysql实践中遇到个问题，就是同一个后台服务的方法A中执行了插入一条数据成功后，然后方法B中去查询发现没查到这条数据，其中方法B是一个异步方法（另一线程），看日志发现查询是在插入后几十微妙，这是不是出现幻读了，有什么办法解决吗？隔离级别是Repeatedable Read，数据库没有读写分离，查询条件也是唯一索引的。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434637,"discussion_content":"这个不是幻读呀，这个是写入了查不到\n\n你看的“查询在插入之后几十微秒发起”，这个日志是客户端日志，还是数据库日志？\n数据库除非特别定制，否则没有微秒单位，\n如果是业务发送端的话，有可能查询是后发先到哦，毕竟才差几十微秒…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545994448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54645,"user_name":"灰机。","can_delete":false,"product_type":"c1","uid":1168534,"ip_address":"","ucode":"E4CF629C836901","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/96/b257de7f.jpg","comment_is_top":false,"comment_ctime":1545921564,"is_pvip":false,"replies":[{"id":"19842","content":"额，事务id递增的，怎会98创建的时候，101提交了😓","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545961785,"ip_address":"","comment_id":54645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545921564","product_id":100020801,"comment_content":"老师，您好我有个问题，事务在创建快照的时候，数据版本是否可见是由数据版本小于等于当前事务id决定，这个地方有点不解，比如同时并发五个事务，事务id分别为98,99,100,101,102，假如在事务98创建活跃数组的时候101已经提交，那么事务98的活跃数组就为98,99,100,102，此时事务101对98是可见的，这和数据版本小于等于当前事务id可见有点矛盾，我觉得应该是按活跃数组来确定，第一种只是大致上的，对么，老师","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434524,"discussion_content":"额，事务id递增的，怎会98创建的时候，101提交了😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545961785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54501,"user_name":"D.L","can_delete":false,"product_type":"c1","uid":1339142,"ip_address":"","ucode":"E6DA186C4BB972","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/06/82d8bdfb.jpg","comment_is_top":false,"comment_ctime":1545883730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545883730","product_id":100020801,"comment_content":"您好，请问tcc下是怎么实现分支事务能够看到其他分支事务修改的内容的？gts可以吗？","like_count":0},{"had_liked":false,"id":54443,"user_name":"Mr.钧👻","can_delete":false,"product_type":"c1","uid":1249939,"ip_address":"","ucode":"D781E030E79245","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg","comment_is_top":false,"comment_ctime":1545871739,"is_pvip":false,"replies":[{"id":"19747","content":"也包含提交了的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545875343,"ip_address":"","comment_id":54443,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545871739","product_id":100020801,"comment_content":"老师，我有个疑问，数据版本可见性规则图中，落在黄色部分，为什么会有a b两种情况呢？既然数组包含的，都是启动未提交的事务，应该都不可见才对吧？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434455,"discussion_content":"也包含提交了的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545875343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54296,"user_name":"嘉嘉☕","can_delete":false,"product_type":"c1","uid":1059771,"ip_address":"","ucode":"632A5CC4B53BB1","user_header":"https://static001.geekbang.org/account/avatar/00/10/2b/bb/5cf70df8.jpg","comment_is_top":false,"comment_ctime":1545822501,"is_pvip":false,"replies":[{"id":"19685","content":"就是说，这时候应该按照3+1=4来算才对，对吧<br><br><br>但是如果还当作2，算成2+1=3，前面等更新结果就等于没做了，这个丢失是不能接受的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545832276,"ip_address":"","comment_id":54296,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545822501","product_id":100020801,"comment_content":"老师, 请问一下,<br>------------------------<br>但是，当它要去更新数据的时候，就不能再在历史版本上更新了，否则事务 C 的更新就丢失了。<br>因此，事务 B 此时的 set k=k+1是在（1,2）的基础上进行的操作。<br>------------------------<br>这个地方我比较疑惑, <br>为什么不能让C的更新丢失呢 ?<br>C来得早, 而且已经提交了, 被后面的更新所覆盖不是很正常吗 ?<br>没太想明白这块, 希望老师能给解惑<br>谢谢","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434420,"discussion_content":"就是说，这时候应该按照3+1=4来算才对，对吧\n\n\n但是如果还当作2，算成2+1=3，前面等更新结果就等于没做了，这个丢失是不能接受的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545832276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53934,"user_name":"Geek_fe79fa","can_delete":false,"product_type":"c1","uid":1292732,"ip_address":"","ucode":"2511528A6DD447","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EfYxc1HovSS5fMHKyhSiaG00H2CG5Z9XU6ibV9aBiagWFH4Co53icq2uCFZs3ksHEz9OHK6SxCUicwVdwyrhgRLiaR8A/132","comment_is_top":false,"comment_ctime":1545763975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545763975","product_id":100020801,"comment_content":"老师好，事务里的一致性读，不受其他事务锁（update操作的行锁、select读锁、排他锁）的阻塞影响，其读取结果受事务隔离的影响。不知这样理解正确不？","like_count":0},{"had_liked":false,"id":53879,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1545747331,"is_pvip":false,"replies":[{"id":"19526","content":"你理解的对，快照读是不会有幻读的。<br>但是这时候如果select是用lock in share mode ，就会看到新插入的数据了。<br><br>第20篇专门讲幻读哈😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545753657,"ip_address":"","comment_id":53879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545747331","product_id":100020801,"comment_content":"这章读完瞬间觉的茅塞顿开，希望在老师的带领下对MySQL的理解能有一个质的提升(∩_∩)。但是又有一个疑问。就是如果说根据一致性视图读取可见数据，那么RR级别下为什么不能阻止幻读呢。例如RR级别下，session A先执行select范围查找开启一致性视图(使用begin开启事物)，此时session B在A之后开启事物恰好insert了一条符合A范围查找的数据并立刻commit，然后A又执行了同样的语句。如果按照一致性视图B插入的数据RTX_ID大于A的事物ID那么A就不会读取到B插入的数据。这样的话岂不就可以防止幻读了？那么为什么MVCC不能有效防止幻读？百度了一下，甚至有人说就是因为MVCC才引入了幻读。还请老师解惑一下。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434276,"discussion_content":"你理解的对，快照读是不会有幻读的。\n但是这时候如果select是用lock in share mode ，就会看到新插入的数据了。\n\n第20篇专门讲幻读哈😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545753657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53122,"user_name":"heat nan","can_delete":false,"product_type":"c1","uid":1153826,"ip_address":"","ucode":"52D5CB17CE80E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/22/dd04892a.jpg","comment_is_top":false,"comment_ctime":1545609000,"is_pvip":false,"replies":[{"id":"19267","content":"这两个比起来，还是“将来启动”更准确些😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545616325,"ip_address":"","comment_id":53122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545609000","product_id":100020801,"comment_content":"老师，你说的落在红色区域的是由将来启动的事务  是否不准确？是否应该是比当前事务id大的且没提交的","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434038,"discussion_content":"这两个比起来，还是“将来启动”更准确些😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545616325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52977,"user_name":"是我的海","can_delete":false,"product_type":"c1","uid":1197457,"ip_address":"","ucode":"4BCE240829676A","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/91/afda3094.jpg","comment_is_top":false,"comment_ctime":1545561580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545561580","product_id":100020801,"comment_content":"这篇文章真的是全程高能，看了快一下午，从头开始仔细梳理了下，仿佛明白了很多东西。<br>有个问题想请教老师，就是MDL 锁跟 我在其他地方看到的意向锁是一回事么 ？ ","like_count":0},{"had_liked":false,"id":52670,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1008071,"ip_address":"","ucode":"9FE5F43055D3AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/c7/b64ac05e.jpg","comment_is_top":false,"comment_ctime":1545470225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545470225","product_id":100020801,"comment_content":"老师2个问题<br>1:trx_id 始终自增，不会超长么，是用什么类型存储的，db大量开启事物跑了一年这个trx_id得多大<br>2: 如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。<br><br>既然是落在黄色区域，不就都是当前事务开启时活跃的trx-id 么，为啥会不在数组内","like_count":0},{"had_liked":false,"id":51687,"user_name":"A劳","can_delete":false,"product_type":"c1","uid":1322786,"ip_address":"","ucode":"D1DAE17339D149","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/22/eb149a87.jpg","comment_is_top":false,"comment_ctime":1545224057,"is_pvip":false,"replies":[{"id":"18745","content":"没有提交呀，堵住了……<br>要等C’提交了才B才能继续的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545236882,"ip_address":"","comment_id":51687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545224057","product_id":100020801,"comment_content":"好呀！有个问题没太明白.<br>哪个事务C&#39;的，和事务B修改同一条数据，为啥事务C&#39;都没提交，事务B也能修改？不是应该有行锁的x锁吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433572,"discussion_content":"没有提交呀，堵住了……\n要等C’提交了才B才能继续的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545236882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51585,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1545203874,"is_pvip":false,"replies":[{"id":"18696","content":"低于高水位，但是提交了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545223359,"ip_address":"","comment_id":51585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545203874","product_id":100020801,"comment_content":"row trx_id 当前事务以前的事务提交的数据==》绿色部分 本事务是可见的<br>row trx_id 当前事务以后的事务提交的数据==》红色色部分 本事务是不可见的<br>row trx_id 在数组中，由其它事务提交的，那肯定是不可见的，因为隔离级别为3。<br>row trx_id 不在数组中，怎么会出现不在数组中的情况呢，是不是高水位？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433524,"discussion_content":"低于高水位，但是提交了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545223359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51562,"user_name":"xinzhong","can_delete":false,"product_type":"c1","uid":1334329,"ip_address":"","ucode":"8AC3B0349D10D1","user_header":"","comment_is_top":false,"comment_ctime":1545200214,"is_pvip":false,"replies":[{"id":"18964","content":"啊，你说的对，👍🏿细致<br><br>我勘误一下","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545333521,"ip_address":"","comment_id":51562,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545200214","product_id":100020801,"comment_content":"&quot;所以，如果把事务 B 的查询语句 select * from t where id=1 修改一下...&quot;,这里是不是应该是事务A，B无论加不加锁都应该读到3，因为3是他更新的","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433512,"discussion_content":"啊，你说的对，👍🏿细致\n\n我勘误一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545333521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51551,"user_name":"xinzhong","can_delete":false,"product_type":"c1","uid":1334329,"ip_address":"","ucode":"8AC3B0349D10D1","user_header":"","comment_is_top":false,"comment_ctime":1545198348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545198348","product_id":100020801,"comment_content":"对于置顶留言夏日雨自己的理解，既然98事务没有提交，那么事务A的列表不就变成了[98,99,100]了吗，按照作者文中讲的不会出现你说的那种情况吧？所以事务A的up_limit_id应该是98，而不是99了吧？不知道是不是这样","like_count":0},{"had_liked":false,"id":51542,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1545196644,"is_pvip":false,"replies":[{"id":"18965","content":"就是当前活跃事务ID数组呀","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545333591,"ip_address":"","comment_id":51542,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545196644","product_id":100020801,"comment_content":"里面有个视图数组，不是当前活跃的事务ID组成的数组么","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433506,"discussion_content":"就是当前活跃事务ID数组呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545333591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51102,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1302241,"ip_address":"","ucode":"D798B831A89AAF","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/e1/f648c746.jpg","comment_is_top":false,"comment_ctime":1545114027,"is_pvip":false,"replies":[{"id":"18518","content":"会呀，但是如果别的事务提交了，就就没有锁等待了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545158164,"ip_address":"","comment_id":51102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545114027","product_id":100020801,"comment_content":"林老师，图五那里：更新数据都是先读后写的，而这个读，只能读当前的值，称为“当...“<br>这里更新同一行数据不是会有锁么？？？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433286,"discussion_content":"会呀，但是如果别的事务提交了，就就没有锁等待了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545158164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50915,"user_name":"王木鱼","can_delete":false,"product_type":"c1","uid":1305803,"ip_address":"","ucode":"BD17E305A87E6E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/cb/27033e11.jpg","comment_is_top":false,"comment_ctime":1545065593,"is_pvip":false,"replies":[{"id":"18348","content":"不是，这里要说的就是非加锁查","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545101078,"ip_address":"","comment_id":50915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545065593","product_id":100020801,"comment_content":"文中的这个语句：<br>“是的，如果事务 B 在更新之前查询一次数据，这个查询返回的 ...”<br>是不是应该改为<br>“是的，如果事务 B 在更新之前查询一次数据(加锁查询)，这个查询返回的 ...”<br>才是正确的？<br>否则这个语句就是思考题了，刚好证明思考题情况不存在。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433175,"discussion_content":"不是，这里要说的就是非加锁查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545101078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50634,"user_name":"🐋","can_delete":false,"product_type":"c1","uid":1268764,"ip_address":"","ucode":"4B21DE5D65E1DA","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/1c/7a2e8bee.jpg","comment_is_top":false,"comment_ctime":1545018578,"is_pvip":false,"replies":[{"id":"18282","content":"不是，<br>整个update语句走的当前读，因此where读的就是事务B修改后的值啦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1545056298,"ip_address":"","comment_id":50634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545018578","product_id":100020801,"comment_content":"思考题：<br>事务A：<br>begin;<br>select * from t;<br>&#47;*<br>*这个时候执行了事务B<br>*&#47;<br>update t set c= c + 1 where id=c;<br>select * from t;<br><br>事务B：<br>update set c = c + 1 where id = c;<br><br>请问老师在事务A中update语句set部分c读取到事务B更新后的值，而where 部分id读取的c是事务A一致性视图中的值，由于两者不一致导致更新记录为零的对吗？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433044,"discussion_content":"不是，\n整个update语句走的当前读，因此where读的就是事务B修改后的值啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545056298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50623,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1545017403,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545017403","product_id":100020801,"comment_content":"老师启动了事务，此事并未执行任何语句，会生成trx_id么？<br><br>看了您对@算不出流源的会发，发现有<br>“都是“事务启动”的时候申请，<br><br>所以是第一个操作表的语句。<br><br>也可以是执行start transaction with consistent snapshot这个语句的时候”<br><br>我的理解是申明事务的时候不会生成。<br>然后假设有crud操作的时候，才会生成对么？","like_count":0},{"had_liked":false,"id":50609,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1545016290,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545016290","product_id":100020801,"comment_content":"老师，针对 @崔根禄 的问题，如果不仅仅从数据库层面考虑，<br>是不是也可以加一个业务锁，比如用redis，设置一个 key ： lock_kucun 如有值，则说明正在由线程在操作此任务，<br>后续的去排队，等上一个执行完了，再接着执行。然后校验是否有剩余。<br>","like_count":0},{"had_liked":false,"id":48634,"user_name":"Chenl07","can_delete":false,"product_type":"c1","uid":1089132,"ip_address":"","ucode":"0A0A086168A8F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0FI2bUjegtznv7XPC9DB9RJaqiaMiamWkibibPOibuUC3DCvI7XMvBANr6sDjRNbc1jwPic9pIaFxrdaib88VqUJKXSTQ/132","comment_is_top":false,"comment_ctime":1544502413,"is_pvip":false,"replies":[{"id":"17482","content":"阻塞一般就提示为阻塞了，也可能根本就是并发太大…","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544523861,"ip_address":"","comment_id":48634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544502413","product_id":100020801,"comment_content":"老师，我碰到一个问题：数据库show processlist存在大量opening tabale的情况，此时数据库接近瘫痪，这个跟阻塞有关么？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432284,"discussion_content":"阻塞一般就提示为阻塞了，也可能根本就是并发太大…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544523861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48592,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1544492528,"is_pvip":false,"replies":[{"id":"17491","content":"描述反了哦：行锁一般不是SQL语句指定的，在innodb自动加的😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544524357,"ip_address":"","comment_id":48592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544492528","product_id":100020801,"comment_content":"关于事务A，B与C‘的疑惑：<br>因为事务C是更新后马上提交，B的update属于 当前读 的情况。<br>而事务C‘是获取了行锁，所以B必须阻塞等待C&#39;提交后，再进行 当前读。<br>我的疑惑在于，行锁一般都是sql语句指定的，而不是innodb自动加的，如果在事务C&#39;update语句中，我没有获取行锁，那么事务B在update的时候获取到的值肯定不是2，而是1，最后结果也是2。这种情况就是因为没有加行锁，而发生了并发问题。<br>老师您看我这么理解是正确吗？？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432262,"discussion_content":"描述反了哦：行锁一般不是SQL语句指定的，在innodb自动加的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544524357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48469,"user_name":"雯子Arωeฅ","can_delete":false,"product_type":"c1","uid":1244518,"ip_address":"","ucode":"0B6601CBDBD6FF","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/66/8db1f464.jpg","comment_is_top":false,"comment_ctime":1544449104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544449104","product_id":100020801,"comment_content":"老师，有个问题，为什么我把autocommit设置为0。 然后按照start transaction 启动事物，但是为啥不能启动多个事物","like_count":0},{"had_liked":false,"id":48156,"user_name":"滔滔","can_delete":false,"product_type":"c1","uid":1303342,"ip_address":"","ucode":"6968B5771AF79D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/2e/77ad18f4.jpg","comment_is_top":false,"comment_ctime":1544371539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544371539","product_id":100020801,"comment_content":"老师您好，像update t set k=1 where id=1这条更新语句是不是不需要先获得当前读的值，因此不需要先获得读锁而是直接获得排它锁然后更新值？","like_count":0},{"had_liked":false,"id":48112,"user_name":"小罗希冀","can_delete":false,"product_type":"c1","uid":1311995,"ip_address":"","ucode":"88416458FF0041","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","comment_is_top":false,"comment_ctime":1544358940,"is_pvip":false,"replies":[{"id":"17145","content":"额，是这样的，原来的太公式化了，平时我们在判断的时候，用起来麻烦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544364822,"ip_address":"","comment_id":48112,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544358940","product_id":100020801,"comment_content":"刚刚重看了一下这一篇文章，发现里面内容的描述改了很多，但是我还是认为之前的讲得比较清楚，现在新版的都把up_limit_id的介绍删除了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432032,"discussion_content":"额，是这样的，原来的太公式化了，平时我们在判断的时候，用起来麻烦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544364822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47896,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1544250326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544250326","product_id":100020801,"comment_content":"老师真的很负责, 这周的内容比上周看讲得更细致了","like_count":0},{"had_liked":false,"id":47481,"user_name":"ithunter","can_delete":false,"product_type":"c1","uid":1060905,"ip_address":"","ucode":"D8827BD1801325","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/29/7d34099d.jpg","comment_is_top":false,"comment_ctime":1544146988,"is_pvip":false,"replies":[{"id":"16918","content":"为了让互相喜欢都操作同一行，你可以多一个字段，表示关系。比如等于1 是A喜欢B， 等于2 B喜欢2 ，等于三互相喜欢。<br>展开比较复杂，我放到答疑篇了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544148049,"ip_address":"","comment_id":47481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544146988","product_id":100020801,"comment_content":"老师，我提的问题：A、B相互喜欢的问题，我觉得是不是另外建一个用户喜欢操作表user_like_op，字段为 包含user_id，并为唯一索引。在A喜欢B时，加 X锁，select * from user_like_op where user_id = A for update，select * from user_like_op where user_id = B for update，把流程做到事务里。不知道您的解法是什么？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431780,"discussion_content":"为了让互相喜欢都操作同一行，你可以多一个字段，表示关系。比如等于1 是A喜欢B， 等于2 B喜欢2 ，等于三互相喜欢。\n展开比较复杂，我放到答疑篇了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544148049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47451,"user_name":"王虹凯","can_delete":false,"product_type":"c1","uid":1018862,"ip_address":"","ucode":"CA01E64E125CFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/ee/56823fd7.jpg","comment_is_top":false,"comment_ctime":1544145038,"is_pvip":false,"replies":[{"id":"16919","content":"对于可见性和视图数组这个理解很好","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544148131,"ip_address":"","comment_id":47451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544145038","product_id":100020801,"comment_content":"不能层级的回复留言，好尴尬，有些针对留言的讨论不能进行。<br>针对前面有个建立好友关系的，我觉得就查询是否有记录和插入表可以从其他业务中剥离（其他不必需要的），让整个事务尽可能小，而且这个查询判断可以走RC,尽量减少RR对乐观锁带来的不命中。另外，这种场景，我觉得可以异步去做，配合一个内存级别的bitmap 操作判断是否被喜欢以及好友关系bitmap,减少通过db判断。<br><br>针对问题-创建数组和最大上限的过程中，新事务ID：假如没有锁，那新创建的事务，也肯定会比最大的事务ID大，就算不在数组，在边界判断就不满足条件了。<br><br>欢迎讨论！<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431770,"discussion_content":"对于可见性和视图数组这个理解很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544148131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47298,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1544102801,"is_pvip":false,"replies":[{"id":"16869","content":"是，其实是大于等于都算","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544105009,"ip_address":"","comment_id":47298,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544102801","product_id":100020801,"comment_content":"现在事务 A 要来读数据了，它的视图数组是 [99,100]。当然了，读数据都是从当前版本读起的。所以，事务 A 查询语句的读数据流程是这样的：<br><br>找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见。<br>有个疑问，<br>为何会比高水位大？事物A当前事物数组99和100,高水位是当前系统中最大的事物id加1,高水位至少是101,应该是大于等于高水位就是处于红色区域吧？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431727,"discussion_content":"是，其实是大于等于都算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544105009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47265,"user_name":"Sinyo","can_delete":false,"product_type":"c1","uid":1307297,"ip_address":"","ucode":"57B243E7AB86A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAibnPX9jW8kqLcIfibjic8GbkQkEUYyFKJkc39hZhibVlNrqwTjdLozkqibI2IwACd5YzofYickNxFnZg/132","comment_is_top":false,"comment_ctime":1544093946,"is_pvip":false,"replies":[{"id":"16860","content":"不能，最新的就是101，图中画的那样","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544095082,"ip_address":"","comment_id":47265,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544093946","product_id":100020801,"comment_content":"第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。<br><br>老师，请问这里可不可以理解成事务B用102替代了原来的101，最新的还是102呢？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431719,"discussion_content":"不能，最新的就是101，图中画的那样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544095082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47256,"user_name":"bing","can_delete":false,"product_type":"c1","uid":1067589,"ip_address":"","ucode":"6ADAA36B2B732C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/45/04a13bf9.jpg","comment_is_top":false,"comment_ctime":1544089882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544089882","product_id":100020801,"comment_content":"当检索到的数据的事务ID表示的是当前事务自己修改的数据(数据行的DBTRXID = mcreatortrx_id) 时，数据可见。<br><br>所有上面讲的有点问题","like_count":0},{"had_liked":false,"id":47248,"user_name":"Lei","can_delete":false,"product_type":"c1","uid":1317945,"ip_address":"","ucode":"3371230860C7C3","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/39/aafcb4e2.jpg","comment_is_top":false,"comment_ctime":1544089060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544089060","product_id":100020801,"comment_content":"置顶留言中”现在正在执行的所有事物ID列表” 和文章中的<br>”用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交”<br>不是一个意思吗？  正在执行，不就是以启动未提交吗？","like_count":0},{"had_liked":false,"id":47225,"user_name":"骑蜗牛上高速","can_delete":false,"product_type":"c1","uid":1302286,"ip_address":"","ucode":"36648D52A76CF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoTiazkXvN29ebN6eotq8xu2pUGbQkrOduwBQsXmicsMBKl9qbfoggjBPacaIgk44zsjxlpbBgOcdaQ/132","comment_is_top":false,"comment_ctime":1544080911,"is_pvip":false,"replies":[{"id":"16846","content":"是的，提交的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544084336,"ip_address":"","comment_id":47225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544080911","product_id":100020801,"comment_content":"因此，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。<br><br>老师，这里的这句话 “如果一个数据版本是在我启动之前生成的，就认” 有个前提条件得是提交了的事务吧？ ","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431703,"discussion_content":"是的，提交的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544084336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47218,"user_name":"李","can_delete":false,"product_type":"c1","uid":1188596,"ip_address":"","ucode":"4E69496C6AF335","user_header":"","comment_is_top":false,"comment_ctime":1544079463,"is_pvip":false,"replies":[{"id":"16849","content":"已经提交了的<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544084558,"ip_address":"","comment_id":47218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544079463","product_id":100020801,"comment_content":"如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见<br><br><br><br>我的问题是，落在黄色部分的还是都是事务启动时活跃的其他事务，那么应该都会落在数组里面，为什么还有不在数组的情况呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431699,"discussion_content":"已经提交了的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544084558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47150,"user_name":"hetiu","can_delete":false,"product_type":"c1","uid":1056127,"ip_address":"","ucode":"35D9338C3ABD20","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","comment_is_top":false,"comment_ctime":1544064329,"is_pvip":false,"replies":[{"id":"16836","content":"说的哪个图…","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544071479,"ip_address":"","comment_id":47150,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544064329","product_id":100020801,"comment_content":"老师，请教个问题，RR事务read view开始时间应该是在第一条CRUD语句，而不是BEGIN或START吧？也就是说，A事务SELECT时，所有已经commit的结果都是可以看到的。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431681,"discussion_content":"说的哪个图…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544071479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47012,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1544018968,"is_pvip":false,"replies":[{"id":"16777","content":"是的，事务提交了，就不属于活跃，再创建视图数组，数组里就没它了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1544019998,"ip_address":"","comment_id":47012,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544018968","product_id":100020801,"comment_content":"在读提交隔离级别下，事物数组是如何维护的？活跃的事物处于黄色区域，如果某个黄色区域的事物提交了，数据就是可见的，事物是否从数组中移出？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431637,"discussion_content":"是的，事务提交了，就不属于活跃，再创建视图数组，数组里就没它了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544019998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46749,"user_name":"DanielAnton","can_delete":false,"product_type":"c1","uid":1308521,"ip_address":"","ucode":"69D49AC70898B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/69/d8dba3de.jpg","comment_is_top":false,"comment_ctime":1543977055,"is_pvip":false,"replies":[{"id":"16700","content":"嗯，这段说的是过程，你说的是结果，咱俩没矛盾哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543983557,"ip_address":"","comment_id":46749,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543977055","product_id":100020801,"comment_content":"文中这里“事务 B 是当前读，必须要读最新版本，而且必须加锁，因此，就被锁住了，必须等到事务 C&#39; 释放这个锁，才能继续它的当前读。”我的理解是，行锁不是唯一的吗，事务 B 此时应该是被阻塞了吧，只有等到 C’释放锁，它才能竞争获取当前锁吧。请老师指教。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431527,"discussion_content":"嗯，这段说的是过程，你说的是结果，咱俩没矛盾哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543983557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46449,"user_name":"Lane","can_delete":false,"product_type":"c1","uid":1008257,"ip_address":"","ucode":"F70459D1BBD9F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","comment_is_top":false,"comment_ctime":1543928559,"is_pvip":true,"replies":[{"id":"16621","content":"变量要少，“讲清楚”这个能力，我也在学习中😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543933231,"ip_address":"","comment_id":46449,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543928559","product_id":100020801,"comment_content":"重写以后果然就看懂了...之前真的没看懂，有点晦涩","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431461,"discussion_content":"变量要少，“讲清楚”这个能力，我也在学习中😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543933231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46428,"user_name":"sayhelen","can_delete":false,"product_type":"c1","uid":1045814,"ip_address":"","ucode":"5DA3DCA403B44E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH6lQA2ib1sV9hdJF7gnfFegC8egDPssYFDpJYUU6ZpAtTMZLdU3ApLYJZkxnKBrXibGUYxUabUnkg/132","comment_is_top":false,"comment_ctime":1543923725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543923725","product_id":100020801,"comment_content":"留个笔记，update inster等语句执行时也是一个事务，会执行 commit","like_count":0},{"had_liked":false,"id":46416,"user_name":"城市之光","can_delete":false,"product_type":"c1","uid":1064767,"ip_address":"","ucode":"896E9D1CA64F2E","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/3f/c7f28e47.jpg","comment_is_top":false,"comment_ctime":1543918303,"is_pvip":false,"replies":[{"id":"16598","content":"不在这个数组中，表示提交了。<br>因为视图数组只记录那些“当前活跃事务ID”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543927616,"ip_address":"","comment_id":46416,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543918303","product_id":100020801,"comment_content":"老师，3(b)“若 row trx_id 不在数组中”，对于事务启动当前瞬间正活跃的事务组成的数组，row trx_id 能落在未提交事务中，而又不这个数级中，什么情形下会出现这样的记录呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431454,"discussion_content":"不在这个数组中，表示提交了。\n因为视图数组只记录那些“当前活跃事务ID”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543927616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46359,"user_name":"supertizzy","can_delete":false,"product_type":"c1","uid":1071488,"ip_address":"","ucode":"6A042C5AF76428","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/80/dc4a799f.jpg","comment_is_top":false,"comment_ctime":1543907295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543907295","product_id":100020801,"comment_content":"@约书亚 的评论。个人觉得在mysql innodb引擎中，增加version字段实现乐观锁的方式在实际应用场景中有点多此一举的味道。在对某一行进行cas更改的时候，针对该行记录innodb会加行锁（排他锁），update ...set ... where id = xxx and version = xxx，其他的线程依旧是阻塞的，并没有起到一个“无锁”的效果。那么我是不是可以理解为这种设计是针对没有行锁的情况下？","like_count":0},{"had_liked":false,"id":46336,"user_name":"Geek_a9a978","can_delete":false,"product_type":"c1","uid":1302883,"ip_address":"","ucode":"05B240381C4901","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/63/2808fcc1.jpg","comment_is_top":false,"comment_ctime":1543903292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543903292","product_id":100020801,"comment_content":"事务的 id 是在事务&quot;开始&quot;还是事务&quot;启动&quot;时分配的呢？<br>按道理应该是事务&quot;开始&quot;的时候，但如果这样，文中黄色&quot;未提交的事务集合&quot;是否还应当包括&quot;已开始&quot;但&quot;未启动&quot;的事务？如果包括的话，而数组又是所有&quot;已启动但未提交&quot;的事务，第三条中是否不在数组中的还应当包括这种&quot;已开始&quot;但&quot;未启动&quot;的事务？那这种也应当是不可见的？","like_count":0},{"had_liked":false,"id":46323,"user_name":"☞","can_delete":false,"product_type":"c1","uid":1302793,"ip_address":"","ucode":"6FAEF05F234D2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/09/9483f537.jpg","comment_is_top":false,"comment_ctime":1543900053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543900053","product_id":100020801,"comment_content":"老师能麻烦举一个即在黄色区域，又可读的例子吗，我还是认为黄色区域的肯定是我事务启动时，其他事务还未提交的，这部分数据我感觉在RR下怎样都是不可读的才对","like_count":0},{"had_liked":false,"id":46290,"user_name":"tinsang","can_delete":false,"product_type":"c1","uid":1066414,"ip_address":"","ucode":"89AE9D3837BEFA","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/ae/a213a2a3.jpg","comment_is_top":false,"comment_ctime":1543893733,"is_pvip":false,"replies":[{"id":"16564","content":"换用低水位来理解哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543898116,"ip_address":"","comment_id":46290,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1543893733","product_id":100020801,"comment_content":"事务在启动时,找到已提交的最大事务ID记为up_limit_id，按照文中所提的，B的是101，C是102，B最后提交更新，那最大的事务ID不就是102吗？可是最新更新的是101呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431409,"discussion_content":"换用低水位来理解哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543898116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145868,"discussion_content":"事务B和事务C是两个事务，创建的时间是不同的，拍快照的时间也是不同的，所以初始数据也不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579585480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46288,"user_name":"☞","can_delete":false,"product_type":"c1","uid":1302793,"ip_address":"","ucode":"6FAEF05F234D2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/09/9483f537.jpg","comment_is_top":false,"comment_ctime":1543893593,"is_pvip":false,"replies":[{"id":"16565","content":"黄色区域是“高水位和低水位之间的事务ID”<br><br>这个数组不保证是“连续自然数”的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543898182,"ip_address":"","comment_id":46288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543893593","product_id":100020801,"comment_content":"b. 若 row trx_id 不在数组中，表示这个版本已经提交事务产生的，是可读的<br>老师我还是不太懂这个啊，落在黄色区域，我可以理解为是还没提交的事务ID啊，您这边之前说<br>innodb为每个事务构造了一个数组，用来保存这个事务启动瞬间，所有已经启动但是还未提交的事物ID <br>那怎么可能又落在黄色区域，row trx_id又不在数组中呢<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431408,"discussion_content":"黄色区域是“高水位和低水位之间的事务ID”\n\n这个数组不保证是“连续自然数”的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543898182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46190,"user_name":"菜鸟萌新","can_delete":false,"product_type":"c1","uid":1310673,"ip_address":"","ucode":"2EF2CD8AA4D865","user_header":"https://static001.geekbang.org/account/avatar/00/13/ff/d1/e1ed0666.jpg","comment_is_top":false,"comment_ctime":1543882746,"is_pvip":false,"replies":[{"id":"16557","content":"高水位可能比当前事务大，因为创建事务后，到创建事务视图之间的执行代码期间，可能有新事务创建出来。<br><br>忽略up_limit_id 吧😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543892104,"ip_address":"","comment_id":46190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543882746","product_id":100020801,"comment_content":"老师，请问一个问题，低水位和up_limit_id不是相等的吧，高水位我理解是当前事物","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431365,"discussion_content":"高水位可能比当前事务大，因为创建事务后，到创建事务视图之间的执行代码期间，可能有新事务创建出来。\n\n忽略up_limit_id 吧😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543892104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46169,"user_name":"大龄小学生","can_delete":false,"product_type":"c1","uid":1057111,"ip_address":"","ucode":"AA7860B88FB0F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/57/ee02ef41.jpg","comment_is_top":false,"comment_ctime":1543879076,"is_pvip":false,"replies":[{"id":"16559","content":"除非你设置了隔离级别为“读未提交”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543892137,"ip_address":"","comment_id":46169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543879076","product_id":100020801,"comment_content":"老师是不是没提交的事务查询不到。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431361,"discussion_content":"除非你设置了隔离级别为“读未提交”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543892137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46111,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1543848631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543848631","product_id":100020801,"comment_content":"老师有一个问题，文章开始说 change buffer 不适用于写完之后立刻读取的场景，我的理解是 记录 change buffer 之后，如果要读就得先purge，将数据保存在硬盘上，然后再读取到内存中；但是文章末尾说 需要把 Page2 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果；那么这个过程是在内存中做的，这个过程相比数据没有在内存中的普通查询多了一次 purge 的过程而已，所以这种查询消耗最多是&quot;随机访问的 IO 的次数不会减少，反而增加了 change buffer 的维护代价&quot;是吗？想和老师确认一下 purge 的过程需要先把数据读到内存然后更新之后放回到硬盘还是直接更新硬盘的数据？purge 发生在哪儿","like_count":0},{"had_liked":false,"id":46076,"user_name":"泰格杨","can_delete":false,"product_type":"c1","uid":1182151,"ip_address":"","ucode":"DF23BD9D31B536","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/c7/861b4a70.jpg","comment_is_top":false,"comment_ctime":1543842355,"is_pvip":false,"replies":[{"id":"16482","content":"额，还在呀。<br><br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543846879,"ip_address":"","comment_id":46076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543842355","product_id":100020801,"comment_content":"文稿是不是有缺失？落在黄色部分的2种情况是啥？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431327,"discussion_content":"额，还在呀。\n\na. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；\nb. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543846879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46038,"user_name":"dpqb","can_delete":false,"product_type":"c1","uid":1306457,"ip_address":"","ucode":"307B472C1B3ED1","user_header":"https://static001.geekbang.org/account/avatar/00/13/ef/59/3e454a59.jpg","comment_is_top":false,"comment_ctime":1543838083,"is_pvip":false,"replies":[{"id":"16476","content":"这俩是同一个概念的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543846154,"ip_address":"","comment_id":46038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543838083","product_id":100020801,"comment_content":"请问下老师，您说的那个正在执行的事务的id列表怎么理解呢?和活跃的事务ID数组有什么区别呢?因为我理解的活跃的事务不就是正在执行的事务吗?还是等待的事务不算是正在执行?","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431314,"discussion_content":"这俩是同一个概念的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543846154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46028,"user_name":"Smile","can_delete":false,"product_type":"c1","uid":1021017,"ip_address":"","ucode":"2002460CB3D869","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/59/ac2aa72b.jpg","comment_is_top":false,"comment_ctime":1543836094,"is_pvip":true,"replies":[{"id":"16475","content":"1. 摒弃那个吧😄 我都觉得绕了<br>2. 你的理解是对的，但(a)和(b)的定义不同改。因为我们说的是跟“视图数组”的对比，而RR的视图数组是在事务启动的时候创建的，之后不会改了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543846063,"ip_address":"","comment_id":46028,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543836094","product_id":100020801,"comment_content":"老师，您好，有两个问题还麻烦抽空解答一下：<br>问题1:<br>上个版本中为：事务启动的时候，找到所有已经提交的事务 ID 的最大值，记为 up_limit_id。<br>    --  这个up_limit_id 是否可以理解为 是 最接近低水位的成功提交的 trx_id  （考虑还有回滚的，所以不一定是 减1的值）<br><br>=== <br><br>问题2:<br>如果落在黄色部分，那就包括两种情况 <br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见<br>  <br>-------------------<br><br>针对(a)， RR和RC都能理解;<br>针对(b)， RR 应该也是认为不可见吧，因为已经 row trx_id &gt; up_limit_id了， 而RC能可见是不是因为 在事物启动的一瞬间虽然 row trx_id 还未提交，但是当执行到某个语句时，对应的row trx_id已经提交了，所以能可见。<br> <br>因此，图3中黄色部分的未提交数据，是否理解为事物启动时的视图，在RC下，随着事物的执行，这些事物有可能会变成提交状态，对应(b)的可见性<br><br>望老师解答。感谢！<br><br><br><br><br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431310,"discussion_content":"1. 摒弃那个吧😄 我都觉得绕了\n2. 你的理解是对的，但(a)和(b)的定义不同改。因为我们说的是跟“视图数组”的对比，而RR的视图数组是在事务启动的时候创建的，之后不会改了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543846063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45925,"user_name":"melon","can_delete":false,"product_type":"c1","uid":1023773,"ip_address":"","ucode":"7A80C20EBCAAA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/1d/ec173090.jpg","comment_is_top":false,"comment_ctime":1543819616,"is_pvip":false,"replies":[{"id":"16395","content":"单独绿色的字和绿色的线标出来了😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543820661,"ip_address":"","comment_id":45925,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543819616","product_id":100020801,"comment_content":"老师有一点不太明白，当前事务自己生成的为什么会落在绿色部分呢？当前事务的ID应该是大于或等于低水位的，为什么不是落在黄色部分呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431274,"discussion_content":"单独绿色的字和绿色的线标出来了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543820661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45852,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1543803505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543803505","product_id":100020801,"comment_content":"看明白了，辛苦老师！","like_count":0},{"had_liked":false,"id":45835,"user_name":"Jason_鹏","can_delete":false,"product_type":"c1","uid":1179329,"ip_address":"","ucode":"4A3DCAAC531724","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/c1/6c99fff4.jpg","comment_is_top":false,"comment_ctime":1543801929,"is_pvip":false,"replies":[{"id":"16386","content":"对… 谢谢，我更新下… 我这手残😓 ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543808512,"ip_address":"","comment_id":45835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543801929","product_id":100020801,"comment_content":"“因为之后的更新，生成的版本一定属于上面的 2 或者 3(b) 的情况，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了”这块是不是应该改成“生成的版本一定属于上面的2或者3（a）”","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431230,"discussion_content":"对… 谢谢，我更新下… 我这手残😓 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543808512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45825,"user_name":"似水流年","can_delete":false,"product_type":"c1","uid":1304443,"ip_address":"","ucode":"D114A8E273133C","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/7b/71da8283.jpg","comment_is_top":false,"comment_ctime":1543801111,"is_pvip":false,"replies":[{"id":"16390","content":"在黄色区域是因为，这些事务是在“低水位事务之后”开启的，但是又在“当前事务启动前”提交的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543809732,"ip_address":"","comment_id":45825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543801111","product_id":100020801,"comment_content":"原文”如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。”中，b段落，为什么row trx_id不在数组中，不是未来提交事务，而不是已提交事务？这个row trx_id如果是已提交事务，怎么又在黄色区域，不在绿色已提交区域？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431221,"discussion_content":"在黄色区域是因为，这些事务是在“低水位事务之后”开启的，但是又在“当前事务启动前”提交的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543809732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45810,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1543798962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543798962","product_id":100020801,"comment_content":"这篇讲清楚了所有事物隔离级别的原理。","like_count":0},{"had_liked":false,"id":45807,"user_name":"潘健","can_delete":false,"product_type":"c1","uid":1308360,"ip_address":"","ucode":"01C1387B5E3022","user_header":"https://static001.geekbang.org/account/avatar/00/13/f6/c8/d89de7c4.jpg","comment_is_top":false,"comment_ctime":1543798854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543798854","product_id":100020801,"comment_content":"老师重新改写了一遍啊，辛苦，精益求精啊。    1.up-limit-id概念没了，用低水位，高水位来代替了。<br>2.增补了一个场景，当前正在执行的事务中存在的row trx-ID也不可见。<br>3.还增加了事务c&#39;场景，加了个锁等待。<br>感觉第二版比第一版知识量还多啊，大概是先入为主的概念，我怎么还是觉得第一版的uo-limit-id更好理解呢！","like_count":0},{"had_liked":false,"id":45756,"user_name":"刀斧手何在","can_delete":false,"product_type":"c1","uid":1202572,"ip_address":"","ucode":"B99D7ECC3EE954","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/8c/ba81a832.jpg","comment_is_top":false,"comment_ctime":1543771933,"is_pvip":false,"replies":[{"id":"16344","content":"没有😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543799797,"ip_address":"","comment_id":45756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543771933","product_id":100020801,"comment_content":"老师，有没语句能看到up-limit-id。和read-view","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431195,"discussion_content":"没有😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543799797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45755,"user_name":"刀斧手何在","can_delete":false,"product_type":"c1","uid":1202572,"ip_address":"","ucode":"B99D7ECC3EE954","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/8c/ba81a832.jpg","comment_is_top":false,"comment_ctime":1543771667,"is_pvip":false,"replies":[{"id":"16350","content":"试一下 start transaction with consistent snapshot 验证文章中的结论哈，这样印象更深刻","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543800472,"ip_address":"","comment_id":45755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543771667","product_id":100020801,"comment_content":"从测试中看 innodb的事务id 应该是第一条sql后才分配的。而不是begin 时候分配的。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431194,"discussion_content":"试一下 start transaction with consistent snapshot 验证文章中的结论哈，这样印象更深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543800472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45748,"user_name":"到道可道","can_delete":false,"product_type":"c1","uid":1031181,"ip_address":"","ucode":"12B94B6C26BE0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/0d/00424e81.jpg","comment_is_top":false,"comment_ctime":1543767613,"is_pvip":true,"replies":[{"id":"16270","content":"对的，可重复读是这样","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543768654,"ip_address":"","comment_id":45748,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1543767613","product_id":100020801,"comment_content":"这是由于采用begin显示声明了一个事务，在本次事务没结束前，在本事务内做的查询操作，都是对事务开始前的版本的查询，可以加for update或共享锁的当前读来获取最新的值。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431189,"discussion_content":"对的，可重复读是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543768654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45740,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1543764726,"is_pvip":false,"replies":[{"id":"16269","content":"你现在看一下09篇的“课后问题时间”哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543768616,"ip_address":"","comment_id":45740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543764726","product_id":100020801,"comment_content":"老师，在整理的时候又发现一个问题，请指导一下。<br>如果在A启动之前有另外一个事务D没有提交， 它的trx_id为98, 在Q1之后，它进行了提交，操作也是k=k+1，那这一行的最新的记录应该是{v:4, trx_id:98}。这么一来，当进行Q2操作的时候，读取到的row trx_id为98, 小于事务A的trx_id100。那这个时候是不是就要的起了呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431185,"discussion_content":"你现在看一下09篇的“课后问题时间”哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543768616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45648,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1543737297,"is_pvip":false,"replies":[{"id":"16268","content":"其实规则里面还有一个活跃事务判断。<br><br>本来要留着下一篇说的…<br><br>后面发现这篇的描述规则不好人工判断，<br>我把08篇重写了，你再看下😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543765010,"ip_address":"","comment_id":45648,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543737297","product_id":100020801,"comment_content":"原文：【好，现在事务 A 要来读数据了，它的 up_limit_id 是 99。当然了，读数据都是从当前版本读起的。所以，Q2 的读数据流程是这样的：<br>  ● 找到 (1,3) 的时候，判断出 row trx_id=101 大于 up_limit_id，要不起；<br>  ● 接着，找到上一个历史版本，一看 row trx_id=102，还是要不起；<br>  ● 再往前找，终于找到了（1,1)，它的 row trx_id=90，是可以承认的数据。】<br>问题：林老师，假设事务C执行完后，来了一个事务D：查询select k from t where id = 1;查询执行两次，一次在B事务提交前，一次再B事务提交后，此时D得到的up_limit_id=102，第一次查询时，得到的k=2，第二次查询时，事务B已经提交了，那up_limit_id=102,row trx_id=101,所以读到了B提交以后的结果，即第二次k=3，同一个事务两次读取结果不一致。我这个逻辑哪里有问题呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431136,"discussion_content":"其实规则里面还有一个活跃事务判断。\n\n本来要留着下一篇说的…\n\n后面发现这篇的描述规则不好人工判断，\n我把08篇重写了，你再看下😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543765010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45559,"user_name":"Sinyo","can_delete":false,"product_type":"c1","uid":1307297,"ip_address":"","ucode":"57B243E7AB86A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAibnPX9jW8kqLcIfibjic8GbkQkEUYyFKJkc39hZhibVlNrqwTjdLozkqibI2IwACd5YzofYickNxFnZg/132","comment_is_top":false,"comment_ctime":1543673640,"is_pvip":false,"replies":[{"id":"16239","content":"一致性读下A一直读的是90这个版本的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543720106,"ip_address":"","comment_id":45559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543673640","product_id":100020801,"comment_content":"第二个有效更新是事务 B，把数据从 (1,2) 改成了 (1,3)。这时候，这个数据的最新版本（即 row trx_id）是 101，而 102 又成为了历史版本。<br><br>老师，请问这里102不是最大的row trx_id吗？如果最大即最新，那么前面事务A的Q2读到的还是102吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431094,"discussion_content":"一致性读下A一直读的是90这个版本的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543720106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45557,"user_name":"王宝龙","can_delete":false,"product_type":"c1","uid":1328175,"ip_address":"","ucode":"C5A945E44FE89E","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/2f/42a8d353.jpg","comment_is_top":false,"comment_ctime":1543672402,"is_pvip":false,"replies":[{"id":"16241","content":"👍🏿<br><br>从评论区获得灵感很棒","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543720208,"ip_address":"","comment_id":45557,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543672402","product_id":100020801,"comment_content":"刚开始没注意作者说要复现，以为这是一个固定的知识点，于是根据作者正片篇文章的知识点来做步骤分析，但思来想去，依然无解。于是开始查看评论的答案，看到了置顶评论，然后依据他的思路进行了复现，果然效果浮现了，同时，思路也明朗了。<br><br>**复现思路**：在事务期间，开启另外一个客户端，执行“update set c=c+1 where id=c”，此时所有的值修改了，就会出现作者问题中的效果。<br><br>那么我就来班门弄斧，详细分析一下问题的解题思路。<br><br>1. 开启事务，创建一致性视图，假定分配的 transaction id 为 101，up_limit_id 为 100。<br>2. 在第一次 select 时，数据未修改，则会看到1、2、3、4。<br>3. 在执行更新前，先去开启另一个客户端，执行 SQL 对每一行的 c 累加 1（假定该更新的事务的 transaction id 为 102）。<br>4. 再在当前事务中，执行更新。更新操作是遵循“当前读”规则，此时实际的数据已更新，并且每一行（row）的 trx_id 为 102，那么 id=c 的条件判断，则无法匹配到任何行，以至于最终得到的结果是影响行数为 0。<br>4. 由于是事务隔离级别是 RR（Repeatable Read）可重复读规则，而 select 遵循的是“一致性读”规则。所以，在执行 select 查询时up_limit_id 为 100，而每一行版本已经成为了 102，所以会根据 undo log 计算版本回退为 100 时的数据，最终你看到的数据依然是 1、2、3、4。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431093,"discussion_content":"👍🏿\n\n从评论区获得灵感很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543720208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45528,"user_name":"鲁旭光","can_delete":false,"product_type":"c1","uid":1320402,"ip_address":"","ucode":"A686CE04EEF41E","user_header":"https://static001.geekbang.org/account/avatar/00/14/25/d2/704eca21.jpg","comment_is_top":false,"comment_ctime":1543660987,"is_pvip":false,"replies":[{"id":"16205","content":"对数据的增删改查都是MDL读锁，<br><br>06篇再细看下？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543664242,"ip_address":"","comment_id":45528,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543660987","product_id":100020801,"comment_content":"看图1，根据MDL特性，事务A开启了读锁，事务B开启了读锁，事务A和事务B都是读锁，不互斥，但是到事务C开启了写锁，读写互斥，事务C应该进入锁等待，事务C的更新操作，应该等事务A和事务B提交后才能执行吧。为什么事务C的更新操作先执行了呢？<br>请老师解惑下，多谢！","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431079,"discussion_content":"对数据的增删改查都是MDL读锁，\n\n06篇再细看下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543664242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45489,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543653336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543653336","product_id":100020801,"comment_content":"思考题: 因为更新是当前读, 所以如果有另外的事务先执行了一次更新操作, 本事务在执行的时候就会根据的值进行判断和更新, 于是可能就会出现无法更新的情况. ","like_count":0},{"had_liked":false,"id":45488,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1543653199,"is_pvip":false,"replies":[{"id":"16189","content":"Begin和start transaction是一样的<br><br>如果要马上启动事务，是start transaction with consistent snapshot","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543655295,"ip_address":"","comment_id":45488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543653199","product_id":100020801,"comment_content":"没有复现的同学，记得不要用begin而是改用start transaction.<br>是不是只有老师才有回复的权限？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431063,"discussion_content":"Begin和start transaction是一样的\n\n如果要马上启动事务，是start transaction with consistent snapshot","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543655295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45479,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543651642,"is_pvip":false,"replies":[{"id":"16197","content":"执行Q1的时候，事务B已经更新过了，(1,3)已经生成出来了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543655621,"ip_address":"","comment_id":45479,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543651642","product_id":100020801,"comment_content":"执行事务B的Q1语句时候，一看自己版本好是101，最新数据版本号不是102？是在事物C基础上读到新的值。上面描述是不是错了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431057,"discussion_content":"执行Q1的时候，事务B已经更新过了，(1,3)已经生成出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543655621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45474,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543651179,"is_pvip":false,"replies":[{"id":"16194","content":"历史版本的意思就是“有人更新了，产生一个新版本，原来的版本就变成历史版本”","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543655535,"ip_address":"","comment_id":45474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543651179","product_id":100020801,"comment_content":"row trx-id不是小的才会成为历史版本？难道这个id大小没关系？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431054,"discussion_content":"历史版本的意思就是“有人更新了，产生一个新版本，原来的版本就变成历史版本”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543655535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45454,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1543645755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543645755","product_id":100020801,"comment_content":"这一篇文章非常厉害了，值了值了","like_count":0},{"had_liked":false,"id":45439,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1543641637,"is_pvip":false,"replies":[{"id":"16178","content":"当前事务再更新，成功了的话，就是就是看到自己更新的，<br><br>自己更新生成的版本自己是要可见的（transaction_id=row trx_id)","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543650466,"ip_address":"","comment_id":45439,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543641637","product_id":100020801,"comment_content":"老师 ， 看了@约书亚 的回答还有个疑问点 。 说到另起一个事务在 当前事务update前 先修改掉 <br><br>问题 ：<br><br>另起一个事务在当前事务更新前修改 ， 如果新起的事物没有提交 ，那么当前的事物没有办法执行更新语句 ，会一直堵塞。<br>如果新起的事物提交后 ，当前事务再更新，那么当前事务更新的数据行是最新的 ，再去查询也应该是当前事务更新的值<br><br>所以为什么会看不到新的值还是没有理解😞","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431039,"discussion_content":"当前事务再更新，成功了的话，就是就是看到自己更新的，\n\n自己更新生成的版本自己是要可见的（transaction_id=row trx_id)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543650466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45434,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543640444,"is_pvip":false,"replies":[{"id":"16180","content":"额，开头的三个事务就是操作现象呀，你是希望什么样的，给我举个例子。如果能更方便说明问题，后面文章我好参考着写","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543650807,"ip_address":"","comment_id":45434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543640444","product_id":100020801,"comment_content":"这个要是有案例操作现象操作就好了，会更易理解。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431038,"discussion_content":"额，开头的三个事务就是操作现象呀，你是希望什么样的，给我举个例子。如果能更方便说明问题，后面文章我好参考着写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543650807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45429,"user_name":"perkyoung","can_delete":false,"product_type":"c1","uid":1308321,"ip_address":"","ucode":"9EFB0BC6A6D5D6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia2mqq4pWHVYtN9fXZ91iajnE0ib3JqQejD9oo7kusbY64uDPrib1yOBzowoFCA4ORHUDF3HEWCZIMQ/132","comment_is_top":false,"comment_ctime":1543638924,"is_pvip":false,"replies":[{"id":"16181","content":"是的，事务并不是在begin启动的，而是begin 之后的第一个语句，才算事务启动","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543650934,"ip_address":"","comment_id":45429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543638924","product_id":100020801,"comment_content":"图一，在 RR 隔离级别下，如果 begin 下面不紧跟着一个 select 语句，那 Q2的结果应该是3，所以视图应该是在事务的第一个查询语句的时候创建的，而不是事务一启动就创建了，我的 mysql 版本是5.1.73；望指教。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431036,"discussion_content":"是的，事务并不是在begin启动的，而是begin 之后的第一个语句，才算事务启动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543650934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45428,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543638712,"is_pvip":false,"replies":[{"id":"16184","content":"额，<br>Row trx_id 是行上的， up_limit_id是事务视图的<br><br>你再看看？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543652250,"ip_address":"","comment_id":45428,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543638712","product_id":100020801,"comment_content":"很多没有说清楚，哪个先提交，row Tex-id和up-limit-id 有什么区别？是不是两者都要比较再去读或者更新","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431035,"discussion_content":"额，\nRow trx_id 是行上的， up_limit_id是事务视图的\n\n你再看看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543652250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45427,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1543638539,"is_pvip":false,"replies":[{"id":"16179","content":"表格里面从上到下是时间顺序","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543650694,"ip_address":"","comment_id":45427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543638539","product_id":100020801,"comment_content":"这里是c先提交的事物，然后b，在是a？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431034,"discussion_content":"表格里面从上到下是时间顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543650694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45423,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1543637146,"is_pvip":false,"replies":[{"id":"16282","content":"希望重写的版本可以解决更多😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543774983,"ip_address":"","comment_id":45423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543637146","product_id":100020801,"comment_content":"这篇文章细节满满 很多模棱两可的疑问不攻自破了 受益匪浅 。 谢谢老师 🙏","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431032,"discussion_content":"希望重写的版本可以解决更多😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543774983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45420,"user_name":"绵呀绵","can_delete":false,"product_type":"c1","uid":1011916,"ip_address":"","ucode":"EED6DA32DB23F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/cc/a99b8bf9.jpg","comment_is_top":false,"comment_ctime":1543636677,"is_pvip":true,"replies":[{"id":"16170","content":"你再看一遍06篇呗😄<br><br>如果还没理解，把你被锁住后的show processlist发出来","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543638559,"ip_address":"","comment_id":45420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543636677","product_id":100020801,"comment_content":"老师请教一个问题，有个表A里面有300条数据，每次alter 增加字段都会卡住，一直执行不了，然后导致后面查询A表的请求全部锁死了，只能强制断开alter增加字段操作，手动删除锁死的请求pid，请问，理论上我执行alter表的时候，会锁住整个表但数据才300条应该很快就更新完成了，为什么一直卡住。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431029,"discussion_content":"你再看一遍06篇呗😄\n\n如果还没理解，把你被锁住后的show processlist发出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543638559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45391,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1305601,"ip_address":"","ucode":"D49723FEA66731","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/01/978d54af.jpg","comment_is_top":false,"comment_ctime":1543630709,"is_pvip":false,"replies":[{"id":"16201","content":"一致性读的时候，只有未提交的版本都直接认为不可见（包括可重复读隔离级别和读提交隔离级别）","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543656039,"ip_address":"","comment_id":45391,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543630709","product_id":100020801,"comment_content":"有个问题 如果commit之前就生成了历史版本，当前版本的记录，那么如果之前的一个update没有commit，没有释放锁，那后来新的一个事务select会不会因为那一行还有锁而提取全表数据等待呢？一致性读的时候读不是不加锁的吗？那这种情况怎么办呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431015,"discussion_content":"一致性读的时候，只有未提交的版本都直接认为不可见（包括可重复读隔离级别和读提交隔离级别）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543656039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45354,"user_name":"📆","can_delete":false,"product_type":"c1","uid":1219314,"ip_address":"","ucode":"1D0C14DB6F40C4","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/f2/64d1c380.jpg","comment_is_top":false,"comment_ctime":1543595002,"is_pvip":false,"replies":[{"id":"16117","content":"表示你还没有复现题目的现象，可以参考一下评论区其它答案哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624024,"ip_address":"","comment_id":45354,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543595002","product_id":100020801,"comment_content":"老师你好，我想问下，我用的mysql5.7，最后成功改成0了，是有哪里不对吗？<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; update t set c=0 where c=id;<br>Query OK, 4 rows affected (0.01 sec)<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>mysql&gt; select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    0 |<br>|  2 |    0 |<br>|  3 |    0 |<br>|  4 |    0 |<br>+----+------+<br>4 rows in set (0.00 sec)<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430996,"discussion_content":"表示你还没有复现题目的现象，可以参考一下评论区其它答案哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45345,"user_name":"jimmy","can_delete":false,"product_type":"c1","uid":1302059,"ip_address":"","ucode":"8F0C2BF762C33F","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/2b/2702fcbe.jpg","comment_is_top":false,"comment_ctime":1543592922,"is_pvip":false,"replies":[{"id":"16119","content":"如果所有事务的一致性读的结果，都不需要再用到它的时候。<br><br>比如我们例子中，Q2执行前， row trx_id=101 102的两个版本，就不能删除，因为事务A还需要依赖他们","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624318,"ip_address":"","comment_id":45345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543592922","product_id":100020801,"comment_content":"老师，问个问题，一个历史row版本可以删除的依据是什么，您文中提到的是没有事物再使用这个版本了，感觉这句话还是很空洞，能不能具体说一下？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430991,"discussion_content":"如果所有事务的一致性读的结果，都不需要再用到它的时候。\n\n比如我们例子中，Q2执行前， row trx_id=101 102的两个版本，就不能删除，因为事务A还需要依赖他们","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45342,"user_name":"风雪","can_delete":false,"product_type":"c1","uid":1316279,"ip_address":"","ucode":"ADCA51048AF096","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ1bf1wUGI2KnSBpUs4EyyxoRvfHY9J3T8R7g32cfnosl3M4UIYagYvANpSpGRNT6YCNWK2buh2Tg/132","comment_is_top":false,"comment_ctime":1543591908,"is_pvip":false,"replies":[{"id":"16118","content":"其实临时表不能完全避免，不过如果只是两表join应该还是可以的<br><br>贴一下你的表结构和查询语句","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624095,"ip_address":"","comment_id":45342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543591908","product_id":100020801,"comment_content":"老师临时表怎么避免，我已经用join和注意使用第一张表的列了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430990,"discussion_content":"其实临时表不能完全避免，不过如果只是两表join应该还是可以的\n\n贴一下你的表结构和查询语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45338,"user_name":"liao xueqiang","can_delete":false,"product_type":"c1","uid":1310325,"ip_address":"","ucode":"68713441579F6B","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/75/46742f12.jpg","comment_is_top":false,"comment_ctime":1543591038,"is_pvip":false,"replies":[{"id":"16120","content":"（1，3）的row trx_id 是等于101的呀，事务B更新产生的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624399,"ip_address":"","comment_id":45338,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543591038","product_id":100020801,"comment_content":"那么，它在读到（1,3) 的时候，就满足了 up_limt_id(102) ≥row trx_id(101) 的条件，所以返回了 k=3。<br>这有问题吧，101是最新版本，102是历史版本啊。应该up_limt_id(101) ≥row trx_id(102) 吧","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430988,"discussion_content":"（1，3）的row trx_id 是等于101的呀，事务B更新产生的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45295,"user_name":"HardMan","can_delete":false,"product_type":"c1","uid":1310152,"ip_address":"","ucode":"F1E979A4AC03FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/c8/5aa7ae1b.jpg","comment_is_top":false,"comment_ctime":1543578220,"is_pvip":false,"replies":[{"id":"16123","content":"看置顶回答哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624568,"ip_address":"","comment_id":45295,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543578220","product_id":100020801,"comment_content":"和 @夏日雨 一样的问题。<br><br><br>老师你好，有个问题不太理解，对于文中的例子假设transaction id为98的事务在事务A执行select（Q2）之前更新了字段，那么事务A发现这个字段的row trx_id是98，比自己的up_limit_id要小，那此时事务A不就获取到了transaction id为98的事务更新后的值了吗？<br>换句话说对于文中&quot;之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id&quot;这句话不太理解， up_limit_id是已经提交事务id的最大值，那也可能存在一个没有提交的id小于up_limit_id的事务对数据进行更新？还是说transaction id比up_limit_id小的事务都是保证已经提交的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430979,"discussion_content":"看置顶回答哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45294,"user_name":"HardMan","can_delete":false,"product_type":"c1","uid":1310152,"ip_address":"","ucode":"F1E979A4AC03FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/c8/5aa7ae1b.jpg","comment_is_top":false,"comment_ctime":1543578219,"is_pvip":false,"replies":[{"id":"16125","content":"看置顶回答哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624611,"ip_address":"","comment_id":45294,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543578219","product_id":100020801,"comment_content":"和 @夏日雨 一样的问题。<br><br><br>老师你好，有个问题不太理解，对于文中的例子假设transaction id为98的事务在事务A执行select（Q2）之前更新了字段，那么事务A发现这个字段的row trx_id是98，比自己的up_limit_id要小，那此时事务A不就获取到了transaction id为98的事务更新后的值了吗？<br>换句话说对于文中&quot;之后的更新，产生的新的数据版本的 row trx_id 都会大于 up_limit_id&quot;这句话不太理解， up_limit_id是已经提交事务id的最大值，那也可能存在一个没有提交的id小于up_limit_id的事务对数据进行更新？还是说transaction id比up_limit_id小的事务都是保证已经提交的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430978,"discussion_content":"看置顶回答哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45284,"user_name":"产品助理","can_delete":false,"product_type":"c1","uid":1019821,"ip_address":"","ucode":"39A76D346A96E9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/ad/6e3e9e15.jpg","comment_is_top":false,"comment_ctime":1543576781,"is_pvip":false,"replies":[{"id":"16102","content":"嗯嗯，检查环境是好习惯，也可以不加global，这样本连接直接生效哦","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543593099,"ip_address":"","comment_id":45284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543576781","product_id":100020801,"comment_content":"提醒一下，自己看到前面的时候进行测试，发现执行结果与老师分享的不一致，困惑了一下。<br><br>后想到当前要求是：可重复读的场景下，于是检查事务隔离级别：<br><br>SELECT @@tx_isolation; <br><br>结果却是 READ-COMMITTED 读提交。。<br><br>所以调整后就可以了：set global  TRANSACTION ISOLATION LEVEL REPEATABLE READ;<br><br>-- 执行后记得重新连接Mysql。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430977,"discussion_content":"嗯嗯，检查环境是好习惯，也可以不加global，这样本连接直接生效哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543593099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45283,"user_name":"HardMan","can_delete":false,"product_type":"c1","uid":1310152,"ip_address":"","ucode":"F1E979A4AC03FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/c8/5aa7ae1b.jpg","comment_is_top":false,"comment_ctime":1543576322,"is_pvip":false,"replies":[{"id":"16124","content":"看置顶回答哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624589,"ip_address":"","comment_id":45283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543576322","product_id":100020801,"comment_content":"和@周巘 一样的问题。<br><br> 老师好 我想请问一下 如果文章中99号事务提交了 98号事务还没有提交 那么这三个事务的up_limit_id应该还是99 然后在事务A(id=100)的两次读过程中 98号事务提交并且修改了这一行 此时row trx_id=98 将会小于up_limit_id=99 那么事务A的两次读请求结果不就不一样了吗? 请老师解惑 谢谢","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430976,"discussion_content":"看置顶回答哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45274,"user_name":"amazon1011","can_delete":false,"product_type":"c1","uid":1001032,"ip_address":"","ucode":"BD745BDCBD7059","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/48/e959b1e0.jpg","comment_is_top":false,"comment_ctime":1543574937,"is_pvip":false,"replies":[{"id":"16136","content":"是全局变量，事务启动后拷贝为这个事务自己的内部变量的<br><br>不是gtid 哈，trx_id是innodb 的机制，gtid 是server 层的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543628421,"ip_address":"","comment_id":45274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543574937","product_id":100020801,"comment_content":"请问最大事务ID是保存在系统里面的一个全局变量吗?是excution_gtid?如果并发写很大，这个产生事务id的生成器会不会成为瓶颈?","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430973,"discussion_content":"是全局变量，事务启动后拷贝为这个事务自己的内部变量的\n\n不是gtid 哈，trx_id是innodb 的机制，gtid 是server 层的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543628421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45269,"user_name":"🚶🏻_____路人丙","can_delete":false,"product_type":"c1","uid":1299950,"ip_address":"","ucode":"86F77BE38D4DCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/ee/762ca3f9.jpg","comment_is_top":false,"comment_ctime":1543573722,"is_pvip":false,"replies":[{"id":"16126","content":"假设呀… ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543624652,"ip_address":"","comment_id":45269,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543573722","product_id":100020801,"comment_content":"老师你好，请问图3假设第三点，三个事务开始之前，这一行得数据row trx_id为啥就是90？这个值是如何得到的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430972,"discussion_content":"假设呀… ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543624652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45250,"user_name":"杜明欣","can_delete":false,"product_type":"c1","uid":1198150,"ip_address":"","ucode":"7B010119294F99","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIqWaVic6yGdicbM2ca4KaJLo3oVtxnpea9hb2zMKSvM2UNiadF5l3PW88QJibcKiaf5b61c0cVa72ZYjw/132","comment_is_top":false,"comment_ctime":1543568500,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1543568500","product_id":100020801,"comment_content":"对于一行数据来讲，数据版本大的对应的事务id不一定是最大的，这个是否会有什么影响","like_count":0,"discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145873,"discussion_content":"没啥影响啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579585819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45219,"user_name":"swordholder","can_delete":false,"product_type":"c1","uid":1002569,"ip_address":"","ucode":"3D1361126AD3CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/49/d21c134f.jpg","comment_is_top":false,"comment_ctime":1543562058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543562058","product_id":100020801,"comment_content":"分布式数据库TiDB实现了可重复读隔离级别，但它没有“当前读”这个概念，参看它的文档：<br><br>“与MySQL可重复读隔离级别的区别”  https:&#47;&#47;pingcap.com&#47;docs-cn&#47;sql&#47;transaction-isolation&#47; <br><br> TiDB在事务中的update语句也用的是snapshot版本，而不是“当前读”。<br><br> 老师如何评价TiDB的这种实现方式？","like_count":0},{"had_liked":false,"id":45189,"user_name":"库淘淘","can_delete":false,"product_type":"c1","uid":1310240,"ip_address":"","ucode":"90813B0C46E978","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqibSwKPg7hiapc49qoM4dibhM3fYANPjfltF2ibBZ3dHX2hibjg5EIIcziahrmjO5R2XrcRibvU39TQS7jg/132","comment_is_top":false,"comment_ctime":1543558370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543558370","product_id":100020801,"comment_content":"session 1;<br>begin;<br>select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br><br>session 2;<br>update t set c=0 where id=c;<br>Rows matched: 4  Changed: 4  Warnings: 0<br><br>session 1;<br>update t set c=0 where id=c;<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 0  Changed: 0  Warnings: 0<br><br>select * from t;<br>select * from t;<br>+----+------+<br>| id | c    |<br>+----+------+<br>|  1 |    1 |<br>|  2 |    2 |<br>|  3 |    3 |<br>|  4 |    4 |<br>+----+------+<br>原理：是可重复读隔离级别下，<br>session1 中因update 当前读 发现没有适合条件的更新，未更新成功，<br>select 读继续保持最开始select快照；<br><br>解决方案 可以再事务update语句后面加入 commit work and chain;","like_count":0},{"had_liked":false,"id":45185,"user_name":"董航","can_delete":false,"product_type":"c1","uid":1231787,"ip_address":"","ucode":"9CA208FD26F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/ab/1aac53bf.jpg","comment_is_top":false,"comment_ctime":1543558209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543558209","product_id":100020801,"comment_content":"个人觉得，吧read-view理解为当前活跃事务表就好理解了，网上看到的一篇写的还行<br>https:&#47;&#47;skydh.github.io&#47;2017&#47;12&#47;27&#47;mysql%20%E4%BA%8B%E5%8A%A1%EF%BC%8C%E9%94%81%EF%BC%8C%E4%B8%8E%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB&#47;","like_count":0},{"had_liked":false,"id":45184,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1305601,"ip_address":"","ucode":"D49723FEA66731","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/01/978d54af.jpg","comment_is_top":false,"comment_ctime":1543558194,"is_pvip":false,"replies":[{"id":"16145","content":"好问题，<br><br>没commit也写，也生成版本，但是是未提交的，还加着锁。<br><br>正文再引入这个大家看晕了，偷偷没提。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543629846,"ip_address":"","comment_id":45184,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543558194","product_id":100020801,"comment_content":"有个问题 ，是不是只有commit了之后的数据才会被加到有历史版本和当前版本的记录中呢 没有commit 是不是就是自己知道 存在内存的某个角落呢？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430952,"discussion_content":"好问题，\n\n没commit也写，也生成版本，但是是未提交的，还加着锁。\n\n正文再引入这个大家看晕了，偷偷没提。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543629846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45183,"user_name":"小罗希冀","can_delete":false,"product_type":"c1","uid":1311995,"ip_address":"","ucode":"88416458FF0041","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","comment_is_top":false,"comment_ctime":1543557812,"is_pvip":false,"replies":[{"id":"16146","content":"我去确认了一下图，都标出来了呀","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543629902,"ip_address":"","comment_id":45183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543557812","product_id":100020801,"comment_content":"ABC事务 的流程图，那个语句是Q1，那个是Q2，Q3？看的有点晕，就是这里看不懂，经常在下文中看到这些Q1、Q2、Q3都有一种不知所云的感觉","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430951,"discussion_content":"我去确认了一下图，都标出来了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543629902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45151,"user_name":"我是曾经那个少年","can_delete":false,"product_type":"c1","uid":1015189,"ip_address":"","ucode":"9F02F7FF147D14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","comment_is_top":false,"comment_ctime":1543550928,"is_pvip":false,"replies":[{"id":"16095","content":"就是开三个客户端按顺序模拟呀","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543589307,"ip_address":"","comment_id":45151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543550928","product_id":100020801,"comment_content":"早！老师有什么办法能模拟你文章的例子。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430941,"discussion_content":"就是开三个客户端按顺序模拟呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543589307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45137,"user_name":"fery","can_delete":false,"product_type":"c1","uid":1258444,"ip_address":"","ucode":"873DDAE414D1CB","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/cc/2c73c8c4.jpg","comment_is_top":false,"comment_ctime":1543549153,"is_pvip":false,"replies":[{"id":"16152","content":"单线程跟自己是不会死锁的<br><br>另外对你描述的这个背景有点疑惑，统计历史数据每天的数据，为什么用 insert into select. ?","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630293,"ip_address":"","comment_id":45137,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543549153","product_id":100020801,"comment_content":"老师，请问我可以请教一个问题吗？存储过程统计历史数据的每天数据，使用insert   into  select (可能会多张表，有的是大表)  ，会造成死锁吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430936,"discussion_content":"单线程跟自己是不会死锁的\n\n另外对你描述的这个背景有点疑惑，统计历史数据每天的数据，为什么用 insert into select. ?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45117,"user_name":"春困秋乏夏打盹","can_delete":false,"product_type":"c1","uid":1210807,"ip_address":"","ucode":"CCC558EF504F4B","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/b7/989824f7.jpg","comment_is_top":false,"comment_ctime":1543547363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543547363","product_id":100020801,"comment_content":"session1 更新失效，是session2在更新提交之后，session1的update是当前读，读到id=c的不存在，所以更新失败","like_count":0},{"had_liked":false,"id":45116,"user_name":"帅子","can_delete":false,"product_type":"c1","uid":1308589,"ip_address":"","ucode":"5173C5FFAA145A","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/ad/4a5acd62.jpg","comment_is_top":false,"comment_ctime":1543547358,"is_pvip":false,"replies":[{"id":"16154","content":"参考一下其它评论的复现步骤","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630433,"ip_address":"","comment_id":45116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543547358","product_id":100020801,"comment_content":"思考题，好像不符合预期，mysql5.7，有点疑惑<br>mysql root@127.0.0.1:test&gt; select @@transaction_isolation;<br>+---------------------------+<br>| @@transaction_isolation   |<br>|---------------------------|<br>| REPEATABLE-READ           |<br>+---------------------------+<br>1 row in set<br>Time: 0.002s<br>mysql root@127.0.0.1:test&gt; desc test;<br>+---------+---------+--------+-------+-----------+---------+<br>| Field   | Type    | Null   | Key   |   Default | Extra   |<br>|---------+---------+--------+-------+-----------+---------|<br>| id      | int(11) | NO     | PRI   |    &lt;null&gt; |         |<br>| c       | int(11) | YES    |       |    &lt;null&gt; |         |<br>+---------+---------+--------+-------+-----------+---------+<br><br><br>mysql root@127.0.0.1:test&gt; begin;<br>Query OK, 0 rows affected<br>Time: 0.001s<br>mysql root@127.0.0.1:test&gt; select * from test;<br>+------+-----+<br>|   id |   c |<br>|------+-----|<br>|    1 |   1 |<br>|    2 |   2 |<br>|    3 |   3 |<br>|    4 |   4 |<br>|    5 |   5 |<br>+------+-----+<br>5 rows in set<br>Time: 0.002s<br>mysql root@127.0.0.1:test&gt; update test set c=0 where id=c;<br>Query OK, 5 rows affected<br>Time: 0.002s<br>mysql root@127.0.0.1:test&gt; select * from test;<br>+------+-----+<br>|   id |   c |<br>|------+-----|<br>|    1 |   0 |<br>|    2 |   0 |<br>|    3 |   0 |<br>|    4 |   0 |<br>|    5 |   0 |<br>+------+-----+","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430927,"discussion_content":"参考一下其它评论的复现步骤","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45111,"user_name":"库淘淘","can_delete":false,"product_type":"c1","uid":1310240,"ip_address":"","ucode":"90813B0C46E978","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqibSwKPg7hiapc49qoM4dibhM3fYANPjfltF2ibBZ3dHX2hibjg5EIIcziahrmjO5R2XrcRibvU39TQS7jg/132","comment_is_top":false,"comment_ctime":1543547134,"is_pvip":false,"replies":[{"id":"16097","content":"规则就是“找最大的”😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543589604,"ip_address":"","comment_id":45111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543547134","product_id":100020801,"comment_content":"读提交隔离下。 这时，事务 A 的 Q2 语句开始执行的时候，由于事务 B（101）、C（102）都已经提交了，所以 Q2 的 up_limit_id 的值就应该是事务 C 的 transaction id，即 102。  这个有个疑问 up_limit_id不应该是最后提交的 事务B(101)吗 为何是最先提交的 102呢","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430924,"discussion_content":"规则就是“找最大的”😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543589604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45104,"user_name":"憶海拾貝","can_delete":false,"product_type":"c1","uid":1054727,"ip_address":"","ucode":"99E883A8601DED","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/07/9f5f5dd3.jpg","comment_is_top":false,"comment_ctime":1543546595,"is_pvip":false,"replies":[{"id":"16044","content":"分析不错，不过 For update对业务并发度影响比较大哦<br><br>“锁一个表的所有行” 还是行锁蛤，<br><br>如果这么定义，应该不会这么升级吧？","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543549388,"ip_address":"","comment_id":45104,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543546595","product_id":100020801,"comment_content":"看似更新不了,实际上是更新语句执行时(当前读)读到的数据, 与查询语句执行时(快照读)读到的数据不同所致.<br>只需要在更新语句执行前, 开启另一个事务破坏`id=c`条件. 比如执行`update t set c=id+1`提交即可.<br><br>解决方式, 可以直接用`select...for update`来查询, 先加锁再读.<br><br>构造场景的时候想到一个问题, InnoDB的行锁什么情况下会升级为表锁?","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430922,"discussion_content":"分析不错，不过 For update对业务并发度影响比较大哦\n\n“锁一个表的所有行” 还是行锁蛤，\n\n如果这么定义，应该不会这么升级吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543549388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45102,"user_name":"锅子","can_delete":false,"product_type":"c1","uid":1323048,"ip_address":"","ucode":"4A9143AFB07FF2","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/28/6e019a7a.jpg","comment_is_top":false,"comment_ctime":1543545689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543545689","product_id":100020801,"comment_content":"思考题<br>session1                                                        session2<br>begin;<br>select * from t;<br>                                                    update t set c=100 where id=c;<br>update t set c=0 where id=c;<br>select * from t;","like_count":0},{"had_liked":false,"id":45101,"user_name":"路过","can_delete":false,"product_type":"c1","uid":1316401,"ip_address":"","ucode":"7152C19ED024CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/16/31/ae8adf82.jpg","comment_is_top":false,"comment_ctime":1543545657,"is_pvip":false,"replies":[{"id":"16045","content":"表示你没有复现这个情况哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543549419,"ip_address":"","comment_id":45101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543545657","product_id":100020801,"comment_content":"在5.7.24中测试今天的思考题，结果是c都变成了0。和您贴出的结果不同。没有想明白为什么。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430921,"discussion_content":"表示你没有复现这个情况哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543549419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45085,"user_name":"先听","can_delete":false,"product_type":"c1","uid":1151409,"ip_address":"","ucode":"82D8DA7A2FEB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/91/b1/fb117c21.jpg","comment_is_top":false,"comment_ctime":1543544749,"is_pvip":false,"replies":[{"id":"16099","content":"你找个地方把复现过程写一下，这里贴地址。 GitHub 或者博客、长微博都可以","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543589664,"ip_address":"","comment_id":45085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543544749","product_id":100020801,"comment_content":"老师，我是那个提问mysql 5.5, 5.7, 8.0 问题的人。具体的参数太多了，这里贴不下。有没有需要重点贴出的参数呢？或者是否给我个什么命令然后我执行一下后把结果发给您。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430918,"discussion_content":"你找个地方把复现过程写一下，这里贴地址。 GitHub 或者博客、长微博都可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543589664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45070,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1543543806,"is_pvip":false,"replies":[{"id":"16157","content":"在内存里，专门有个地方存锁信息，“这一行现在是我的了”，类似这样的信息","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630632,"ip_address":"","comment_id":45070,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543543806","product_id":100020801,"comment_content":"感觉可以理解成，只要操作需要对记录加锁，他就会使用当前读。那么这个加锁的过程到底是怎么样的呢，锁是存放在内存里的吗？这块后续还会有专门讲解吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430912,"discussion_content":"在内存里，专门有个地方存锁信息，“这一行现在是我的了”，类似这样的信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45066,"user_name":"姜磊","can_delete":false,"product_type":"c1","uid":1311017,"ip_address":"","ucode":"2E3F1C23FBDF71","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/29/11c1c2f7.jpg","comment_is_top":false,"comment_ctime":1543542859,"is_pvip":false,"replies":[{"id":"16039","content":"有Limit ，都是总共锁10000行","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543543683,"ip_address":"","comment_id":45066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543542859","product_id":100020801,"comment_content":"老师你好，关于上期的问题，假设我的T表很大，第一种方法只需要全表扫描一次，第二种需要全表扫描20次吧？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430910,"discussion_content":"有Limit ，都是总共锁10000行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543543683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45029,"user_name":"suke","can_delete":false,"product_type":"c1","uid":1007753,"ip_address":"","ucode":"C0287C31A4F45B","user_header":"","comment_is_top":false,"comment_ctime":1543540695,"is_pvip":false,"replies":[{"id":"16036","content":"Update语句是“当前读”的逻辑，所以它拿到的k 是2哦<br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543542955,"ip_address":"","comment_id":45029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543540695","product_id":100020801,"comment_content":"老师，在重复读级别下，b事务中，执行update t set k=k+1 where k=1这句时，where条件中得到的k=1 ，k+1以后，不应该是2，么，为什么是3，您的文章里说，如果是2，c事务就失效了，所以 执行where语句和执行k=k+1不是在同一个逻辑一致性下执行的？那这样可重复读的语义是不是没有保证？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430900,"discussion_content":"Update语句是“当前读”的逻辑，所以它拿到的k 是2哦\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45002,"user_name":"live","can_delete":false,"product_type":"c1","uid":1302139,"ip_address":"","ucode":"931CDDFB92C404","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/7b/49810dd8.jpg","comment_is_top":false,"comment_ctime":1543538893,"is_pvip":false,"replies":[{"id":"16041","content":"尴尬😅 赞大家细致","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543543765,"ip_address":"","comment_id":45002,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543538893","product_id":100020801,"comment_content":"显然地，语句 Q1 的查询结果 k=1，哈哈，这里我想了半天，也应该是3啊，原来大家都有此疑问","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430892,"discussion_content":"尴尬😅 赞大家细致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543543765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44992,"user_name":"武者","can_delete":false,"product_type":"c1","uid":1313648,"ip_address":"","ucode":"C3FF2AB69F5C31","user_header":"https://static001.geekbang.org/account/avatar/00/14/0b/70/a2c1723c.jpg","comment_is_top":false,"comment_ctime":1543538184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543538184","product_id":100020801,"comment_content":"可重复读 需保证查询前后一致<br>我一直认为这是相对其他查询的<br>当前的提交和查询都在一个事物里怎么还查不到变化的结果","like_count":0},{"had_liked":false,"id":44991,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1305601,"ip_address":"","ucode":"D49723FEA66731","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/01/978d54af.jpg","comment_is_top":false,"comment_ctime":1543538098,"is_pvip":false,"replies":[{"id":"16042","content":"你要问的应该是一致性读， 不加","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543543800,"ip_address":"","comment_id":44991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543538098","product_id":100020801,"comment_content":"请问可重复读会给行加锁吗","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430889,"discussion_content":"你要问的应该是一致性读， 不加","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543543800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44967,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1126910,"ip_address":"","ucode":"341694ACBAB258","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/fe/30a17a9d.jpg","comment_is_top":false,"comment_ctime":1543536233,"is_pvip":true,"replies":[{"id":"15993","content":"… 为啥不提交，bug 吗 😄<br><br>无关不计算也不判断，就是读未提交；<br>如果不计算，但是判断，那就是用事务的up_limit_id, 就是可重复读","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543536961,"ip_address":"","comment_id":44967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543536233","product_id":100020801,"comment_content":"文中说: “读提交是在每条语执行前计算up_limit_id”，如果不计算会怎样？就变成了读未提交吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430882,"discussion_content":"… 为啥不提交，bug 吗 😄\n\n无关不计算也不判断，就是读未提交；\n如果不计算，但是判断，那就是用事务的up_limit_id, 就是可重复读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543536961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44965,"user_name":"BigMortal","can_delete":false,"product_type":"c1","uid":1302057,"ip_address":"","ucode":"6236118A0FFCBB","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/29/71685b0b.jpg","comment_is_top":false,"comment_ctime":1543536060,"is_pvip":false,"replies":[{"id":"15996","content":"继续哈🤝","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543537093,"ip_address":"","comment_id":44965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543536060","product_id":100020801,"comment_content":"##思考题：<br>#问题复现：<br>session 1：                                        session2：<br>t1:begin：(up_limit_id1)<br>t2:select * from t;                                t2:begin;  (up_limit_id2)<br>                                                        t3:update t set c=0 where id=c;  <br>                                                        t4:commit                                                        <br>t5:update t set c=0 where id=c; (need             <br>t6:select * from t;  <br>#原理：<br><br><br>                               ","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430881,"discussion_content":"继续哈🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543537093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44956,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1126910,"ip_address":"","ucode":"341694ACBAB258","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/fe/30a17a9d.jpg","comment_is_top":false,"comment_ctime":1543534800,"is_pvip":true,"replies":[{"id":"16159","content":"是自己更新的，就不用比了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543630757,"ip_address":"","comment_id":44956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543534800","product_id":100020801,"comment_content":"老师在文中说: &quot;所以，在执行事务 B 的 Q1 语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，可以用，所以 Q1 得到的 k 的值是 3。&quot;，<br>1. 这里不参考up_limit_id吗？<br>2. 如果参考，事务B的up_limit_id是在update语句执行前重新计算的，还是在Q1语句执行前重新计算的？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430873,"discussion_content":"是自己更新的，就不用比了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543630757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44939,"user_name":"虚爱凯平","can_delete":false,"product_type":"c1","uid":1260564,"ip_address":"","ucode":"EA8A7A4498BC86","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AwEHMTGSmVsia3WZDyIicBQPAfS11lBZ0yUappicPzfmGDmMwkje1UoqKK3UJ6FCBdsZyiauuV1SEfcrFzWfx9n1RQ/132","comment_is_top":false,"comment_ctime":1543514252,"is_pvip":false,"replies":[{"id":"15994","content":"是的… 抱歉写错了，已经发起修改","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1543537013,"ip_address":"","comment_id":44939,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1543514252","product_id":100020801,"comment_content":"最后读提交隔离级别下, Q1的查询结构应该是k=3吧?","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430867,"discussion_content":"是的… 抱歉写错了，已经发起修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543537013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145874,"discussion_content":"怎么可能是K=3，事务B还没有提交，事务A执行select，此时只能看到事务C提交过的，k=2才是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579586019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}