{"id":360133,"title":"08 | 并发、在线和TPS到底是什么关系？","content":"<p>你好，我是高楼。</p><p>在性能领域中，我们经常用“并发用户数”来判断一个系统是否达到性能需求，比如说用“系统支持1000用户”这样的描述来说明性能需求。但是并发是怎么个并发法？它和TPS之间是什么关系？并发用户数和在线用户数又是什么关系呢？</p><p>这样的问题长期以来困扰着性能工程师们。不管是网上看到的文章或者是各个群里的讨论，我们都能听到不同的声音。所以，我即便是冒着引起争论的危险，也要写一下这个问题。</p><h2>典型的争论</h2><p>有一天，有个小伙跟我说，他和同事们看到我上一个专栏<a href=\"https://time.geekbang.org/column/intro/100042501\">《性能测试实战30讲》</a>中的文章后，在公司会议室吵翻了天，有一个同事还把微积分都搬出来了。我很高兴听到这样的争论，就像战国时期的稷下学宫一样，不争论，哪有那么辉煌的文明高峰呢。</p><p>他们的争论点是这样的：有一个项目，性能目标是对一个底层是Kubernetes、上层是微服务架构的系统进行容量评估（系统性能验证）。而他们的争论点就在于这个容量评估的方法。</p><p>对于评估方法，他们分成了两个流派。第一种是根据DAU（Daily Active User，日活跃用户数量）和用户业务模型，推导出并发用户数（工具中未来的线程数）。而第二种反对第一种，认为第一种估算不合理，要站在服务端层面，去推导 服务端要承载的 并发请求数（TPS）。</p><!-- [[[read_end]]] --><p>这个小伙说，在两个流派争论的过程中，有一些概念无法达成一致，包括用户、工具中的线程数、TPS和响应时间。后来他又告诉我，第一种流派的评估方法突出用户，但没有考虑用户的动作。第二种流派则从用户操作的角度出发，按照操作频率，计算“用户操作次数/时间段”，以这个为需要达到的TPS，加上他们自己设定的容忍度RT，反过来推算并发用户数。</p><p>在争议的过程中，大家都没说服对方。第一种认为第二种偏差可能会更大；第二种认为，不讲业务指标换算成技术指标就是耍流氓。其中有一个同事，甚至弄出了一个公式：</p><p>$并发用户数 = TPS \\times RT$</p><p>所以，这场争论的结果就是：没有结果。</p><p>现在我们不妨思考一下，上面的争论中到底谁对呢？他们给出的公式哪个合理呢？</p><p>我给你举个例子来说（为了简化问题，以下示意图不考虑响应时间的变化）：</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/23/a7ff0b6856d499dcbf289594fdc70923.jpg?wh=2000*1204\" alt=\"\"></p><p>你看，在这个示意图中，压力线程是5个，在1秒内每个线程可以完成5次请求。根据上面的公式，我们应该得到的结论是：</p><p>$并发 = TPS \\times RT = 25(事务总数) \\times 0.2(响应时间) = 5$</p><p>这个5，显然是并发线程的个数，但是这个并发线程是从用户角度出发的吗？显然不是的。因为从示意图上看，每一个事务才是一个真实的用户。</p><p>这就涉及到一个关键的概念，并发到底是什么？</p><p>在百度百科上是这样描述的：</p><blockquote>\n<p>并发，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。</p>\n</blockquote><p>在WiKi上是这样描述的：</p><blockquote>\n<p>In computer science, concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems. In more technical terms, concurrency refers to the decomposability of a program, algorithm, or problem into order-independent or partially-ordered components or units of computation.</p>\n</blockquote><p>这两个描述看上去有点不太一样，所以我们要理解它们其中的共性和差异。如果你用英文描述的角度来理解并发，我觉得不用运行性能场景就能知道并发是多少，数一下处理器有几个核就行了。如果你用中文描述的角度来理解，那就必须考虑在“时间段”内完成了多少。</p><p>说了这么多，你还要注意一点，<strong>这些描述都是在处理器的层级来描述的。</strong></p><p>那站在用户的角度，你觉得怎么描述更合理呢？在我看来，更合理的描述是：<strong>并发是在单位时间内完成的事务（T）的个数。如果这个事务（T）是用户的操作，那就是并发的用户了。</strong></p><p>我们现在再回到前面的那个例子，公式中如果对应的是100TPS，就是100并发了。而不是10个并发，因为10个并发是没有“时间段”的概念的。</p><h2>行业内的谬传</h2><p>在《性能测试实战30讲》中的<a href=\"https://time.geekbang.org/column/article/178080\">第3讲</a>，我也描述过并发和在线之间的关系。其中也描述了两个在网上最常见的且被描述成“业界标准”、“经典公式”的计算公式，来自于一篇Eric Man Wong 写的文章——《Method for Estimating the Number of Concurrent Users》。为了给你省些麻烦，我把这两个公式列在这里。</p><blockquote>\n<p>平均并发用户数的计算（公式一）：<br>\n$C = nL \\div T$<br>\n其中： C 是平均的并发用户数；n 是 Login Session 的数量；L 是 Login session 的平均长度；T 指考察的时间段长度。</p>\n</blockquote><blockquote>\n<p>并发用户数峰值计算（公式二）：<br>\n$C’ \\approx C + 3\\times \\sqrt[]{C}$<br>\n其中：C’指并发用户数的峰值，C 就是上一个公式中得到的平均的并发用户数。该公式是假设用户的 Login session 产生符合泊松分布而估算得到的。</p>\n</blockquote><p>显然上述公式中没有提“在线用户数”。而在原文中，“在线用户数”是假设出来的，包括Little定律，和这两个公式的逻辑是一样的。以上两个公式的问题，我在上一个专栏中已经详细描述了，这里不再啰嗦了，如果你有兴趣，可以去看《性能测试实战30讲》中的<a href=\"https://time.geekbang.org/column/article/178080\">第3讲</a>。只是在上一篇中，我没有对其中的公式进行详细的解释，所以我觉得写得不够完整。</p><p>下面我跟你讲一下这两个公式为什么不能称为“业界标准”、“经典公式”。</p><p>首先，在原文中，作者用这张图表达了用户并发的状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/5a/40c5169yy32be453de1992092620ed5a.png?wh=1716*976\" alt=\"\"></p><p>并且假设了用户到达率是符合泊松分布的，于是代入了泊松分布的公式。作者因为泊松分布是用于对随机和独立事件的到达率进行建模的最可行、最常用的工具，并且在大部分的统计学书中都能找得到，所以就假设了这个前提。</p><p>但是，这个跳跃直接就把很多情况给过滤掉了，因为你的系统到达率可能不是泊松分布，而是其他分布，比如说这些分布类型：</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/c3/8ee5d3a53d5bda36c4e4a6a354f381c3.png?wh=2234*1368\" alt=\"\"></p><p>如果想确定你的系统是属于哪种分布，就需要分析用户数据。虽然泊松分布很常用，但对于一个特定的系统来说，还是不行的，比如说地铁系统。2018年，有一篇针对北京地铁客流量的分析论文中就有说明，北京地铁客流量随时间分布如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/b0/b82b20a112907373a2d796cb1c780db0.png?wh=1124*817\" alt=\"\"></p><p>针对上述客流进行分析之后，作者得到客流数据是符合伽玛分布的，于是根据不同的高峰时段进行了细分，然后得到如下分布拟合结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/13/151ayy2f78f2c37823464203796eae13.png?wh=914*1006\" alt=\"\"></p><p>由此，你就可以知道，在文章《Method for Estimating the Number of Concurrent Users》中，假设用户到达率是符合泊松分布的，只描述了一种可能的结果，所以我们前面提到的这两个计算公式，自然也就不能成为“业界标准”。</p><blockquote>\n<p>平均并发用户数的计算（公式一）：<br>\n$C = nL \\div T$<br>\n其中： C 是平均的并发用户数；n 是 Login Session 的数量；L 是 Login session 的平均长度；T 指考察的时间段长度。</p>\n</blockquote><blockquote>\n<p>并发用户数峰值计算（公式二）：<br>\n$C’ \\approx C + 3\\times \\sqrt[]{C}$<br>\n其中：C’指并发用户数的峰值，C 就是上一个公式中得到的平均的并发用户数。该公式是假设用户的 Login session 产生符合泊松分布而估算得到的。</p>\n</blockquote><p>并且在这篇文章中，作者在后面又将泊松分布近似到了正态分布，而第二个公式就是通过标准正态分布中平均值等于0、标准差等于1，对应到标准正态分布的统计表中查找的结果。</p><p>那么，问题就来了：</p><ol>\n<li>\n<p>我们的系统是像上图中展示的那样，一个用户和系统没有等待时间的交互吗？这只是假设了一个最简单的场景。如果你的场景不是这个最简单的场景，那公式一就不好使了。</p>\n</li>\n<li>\n<p>在公式二中假设了C是泊松分布的，这就意味着，你要想使用这个公式，首先就得确定在你的系统中，用户的到达率是符合泊松分布的。而我们在系统中做这样的分析时，你会看到，很多系统都是无法满足这个条件的。</p>\n</li>\n<li>\n<p>在原文中也说明了，C说的是平均值。正因为是平均值，所以这个C和并发用户的峰值误差会比较大。</p>\n</li>\n<li>\n<p>公式二是通过将泊松分布近似到标准正态分布中平均值等于0、标准差等于1的情况下得出的，那你想想，你的系统中平均用户数符合这个条件吗？</p>\n</li>\n<li>\n<p>这两个公式实际上是针对一个最简单的业务，进行的假设推导。而我们的系统，可能支持的是多种业务操作，那对于这些业务操作，我们是否需要把每个都算一遍呢？</p>\n</li>\n<li>\n<p>在技术的层面，不管是在线用户，还是并发用户，都是要体现到请求级别的。但是这两个公式显然没有达到这个级别。在原文中，作者是拿请求做了示例，但是这只是用来算请求速率和带宽的。</p>\n</li>\n<li>\n<p>还有一个大问题就是，这种并发用户数估算方法是在一个业务功能上做的。如果一个系统有多个业务功能，那显然就不能这样计算了。</p>\n</li>\n</ol><p>综上，你就可以知道，所谓的“业界公认”的计算公式，其实有很多的限制条件。并且，我们很难在真实的场景中，把它的这个逻辑套用到自己的系统中去。</p><p>在2011年，有一篇国内的论文《The Estimation Method of Common Testing Parameters in Software Stress Testing》用了切比雪夫不等式来做的计算，你有兴趣也可以去看一下。</p><p>我并不是想否认这些人所做的努力，我只是希望性能从业人员能看清楚问题在哪里。如果你做了各种统计分析之后，发现能够满足原文中的各种假设条件，那上面的公式就可以用。如果不满足，那显然我们不能生搬硬套。</p><h2><strong>实践出真知</strong></h2><p>既然我们在行业内对并发用户、在线用户、TPS这个关键的关系如此重视，又没有统一可用的落地参考，而一些人的努力也得不到有效的印证。那我们是不是就没有办法了呢？</p><p>当然不是。接下来，我想通过一个具体的实践，让你看到这个关键点的推导逻辑，然后你再来思考如何在自己的系统中落地。</p><p>在这里，我用一个电商系统的下单示例来做操作，请你不要过于关注系统是什么类型的，我希望你能瞪大眼睛看清楚这里面的逻辑。</p><p>我先说明一下，因为我要做的操作是**从用户角度出发的。所以，在这里我搭建了一个有用户界面的系统来做这个示例，这主要是为了给你讲清楚在线用户、并发用户和TPS之间的关系。</p><p>这个示例的前端操作总共有7步，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/b5/5ef9785b3657e37bbd9da1953a9490b5.jpg?wh=3257*5130\" alt=\"\"></p><p>（注：上图中显示的最后一个图是退出后的界面，没有操作，所以总共是7步操作。）</p><p>现在我们就是要知道这个操作全过程中产生了哪些请求。具体的请求日志如下所示：</p><pre><code>{&quot;client_ip&quot;:&quot;59.109.155.203&quot;,&quot;local_time&quot;:&quot;27/Mar/2021:23:16:50 +0800&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;:&quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;23293&quot;,&quot;http_x_forwarded_for&quot;:&quot;-&quot;,&quot;upstream_addr&quot;:&quot;127.0.0.1:8180&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;upstream_response_time&quot;:&quot;0.000&quot;}\n中间省略98行\n{&quot;client_ip&quot;:&quot;59.109.155.203&quot;,&quot;local_time&quot;:&quot;27/Mar/2021:23:21:00 +0800&quot;,&quot;request&quot;:&quot;GET /resources/common/fonts/iconfont.ttf?t=1499667026218 HTTP/1.1&quot;,&quot;status&quot;:&quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;159540&quot;,&quot;http_x_forwarded_for&quot;:&quot;-&quot;,&quot;upstream_addr&quot;:&quot;127.0.0.1:8180&quot;,&quot;request_time&quot;:&quot;0.259&quot;,&quot;upstream_response_time&quot;:&quot;0.005&quot;}\n</code></pre><p>这是一个用户从打开首页、登录、选择商品、下单、退出整个流程的全部操作日志，总共100条。我们先不管是静态资源还是接口调用。现在我们主要来说一下，这些请求是怎么转化为TPS的，而TPS和在线用户、并发用户之间又是什么关系。</p><h2>在线用户和TPS之间的关系</h2><p>我们一定要从实际操作的级别来看在线用户和TPS之间的关系才可以，要不然只是臆想，是无法服众的。</p><p>上面我们已经通过一个用户的操作抓取了相应的日志（包括静态资源）。这个用户也显然就是一个在线用户了。</p><ul>\n<li><strong>单个在线用户的TPS计算</strong></li>\n</ul><p>从上面的时间窗口来看，这个用户的整个操作流程是从23:16:50到23:21:00，时间窗口总共是250秒（这么巧，是一个吉利数字），请求总共是100个。但是我们通常都会设置事务的，对不对？这时我们就得来掰扯掰扯事务是怎么定义的了。</p><ol>\n<li>\n<p>如果你把事务T设置为每个请求一个事务，那显然，你就不用计算了，一个用户需要的就是0.4TPS。对应的TPS计算如下：<br>\n$1(用户)\\times 100(请求数) \\div 250(时间窗口) \\approx 0.4(请求数/秒)$</p>\n</li>\n<li>\n<p>如果你把事务定义到每个业务操作的级别，对应前面我们说的，总共是7个业务操作，而这7个业务操作是在250秒内完成的，那对应的TPS就是：<br>\n$1(用户)\\times 7(单业务操作级事务)\\div 250(时间窗口)\\approx 0.028 (TPS)$</p>\n<p>也就是说如果你把事务定义在业务操作级别，在这个示例中，一个用户就需要0.028TPS。请注意，这里面的每一个事务的请求数并不一致哦。</p>\n</li>\n<li>\n<p>如果你把事务定义到整个用户级别（通常情况下，业务部门会这样要求，因为只有做完了这些步骤才是一个业务完成了），那显然这250秒内只完成了1个事务。那对应的TPS就是：<br>\n$1(用户)\\times 1(完整用户级事务)\\div 250(时间窗口) \\approx 0.004 (TPS)$</p>\n</li>\n</ol><p>你看，把事务大小定义在不同级别时，我们得到的结果必然是不一样的。所以，我们如果在项目中只是简单地说，性能需求是要达到多少多少TPS这样的笼统需求，就必然会导致不同的人理解的TPS内容不一样。所以，如果有人让你实现1000TPS，那你就要问，T是什么级别的？</p><p>请你注意，在这个逻辑中，我没有把业务模型加进来一起讨论，因为加了业务模型，反而会让问题变得更复杂。</p><ul>\n<li><strong>多在线用户的TPS计算</strong></li>\n</ul><p>上面的计算是根据一个用户的操作进行的，那如果是另一个用户呢？再操作一遍指定不会是恰好250秒了吧。并且，如果有成千上万个用户呢？那也必然不会全都用250秒。所以，这个前提条件就成了一个难点。</p><p>为此，我们先假设（注意，我这里做的假设只是为了后续的计算方便，并不是说这个假设条件是成立的）系统中有100000用户都是平均250秒完成业务，并且是在一个小时内完成的（这个数据已经非常集中了）。那你就可以计算需要多少TPS了。</p><ol>\n<li>\n<p>请求级的TPS：<br>\n$(100000(用户) \\times 100(请求数)) \\div 3600(秒) \\approx 2,777.78(TPS)$</p>\n</li>\n<li>\n<p>单业务操作级TPS：<br>\n$(100000(用户) \\times 7(业务操作))) \\div 3600(秒) \\approx 194.44(TPS)$</p>\n</li>\n<li>\n<p>用户级TPS：<br>\n$(100000(用户) \\times 1(用户级) \\div 3600(秒) \\approx 27.78(TPS)$</p>\n</li>\n</ol><p>通过这样的计算，我们就可以知道需要多少TPS来和在线用户对应。</p><ul>\n<li><strong>峰值在线用户的TPS计算</strong></li>\n</ul><p>显然上面是按一小时内所有的用户都平均分布的方式算的，如果有峰值呢？这个算法就不对了吧？这就是为什么我说要历史业务峰值的原因，具体统计过程请见我们<a href=\"https://time.geekbang.org/column/article/358483\">第6讲</a>内容。</p><p>线上业务峰值的统计时间段越短，显然是越准确的。如果我们从生产上统计出来10万用户是在1小时内完成的。其中，1万用户在1个小时内的某1分钟内完成业务。这样的数据其实已经达到大型电商的秒杀级别了。那根据上面的计算方式，我们可以得到：</p><ol>\n<li>\n<p>请求级的TPS：<br>\n$(10000(用户) \\times 100(请求数)) \\div 60(秒) \\approx 16,666.67(TPS)$</p>\n</li>\n<li>\n<p>单业务操作级TPS：<br>\n$(10000(用户) \\times 7(业务操作))) \\div 60(秒) \\approx 1,166.67(TPS)$</p>\n</li>\n<li>\n<p>用户级TPS：<br>\n$(10000(用户) \\times 1(用户级) \\div 60(秒) \\approx 166.67(TPS)$</p>\n</li>\n</ol><p><strong>想要得到精确的峰值TPS，其实很明显的前提就是统计的时间段够不够精准。</strong></p><p>通过以上的计算过程，我们可以知道在包括静态资源的时候，在线用户数怎么转化到相对应的不同级别的TPS。对于不包括静态资源的计算过程，你也可以根据上面的逻辑自行计算。</p><h2>并发用户和TPS之间的关系</h2><p>从上面的在线用户计算示例中，相信你已经发现，在日志中两个操作之间的是有时间间隔的。那如果一个用户在操作的时候没有间隔，TPS应该是多少呢？</p><p>通过JMeter录制浏览器的行为，我们先把同样的操作步骤变成JMeter脚本，然后再回放一下，抓一下日志，看看在没有停顿的时候，一个完整的用户流程需要多长时间。日志如下：</p><pre><code>{&quot;client_ip&quot;:&quot;59.109.155.203&quot;,&quot;local_time&quot;:&quot;28/Mar/2021:01:08:56 +0800&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;:&quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;23293&quot;,&quot;http_x_forwarded_for&quot;:&quot;-&quot;,&quot;upstream_addr&quot;:&quot;127.0.0.1:8180&quot;,&quot;request_time&quot;:&quot;0.109&quot;,&quot;upstream_response_time&quot;:&quot;0.109&quot;}\n中间省略98行\n{&quot;client_ip&quot;:&quot;59.109.155.203&quot;,&quot;local_time&quot;:&quot;28/Mar/2021:01:09:02 +0800&quot;,&quot;request&quot;:&quot;GET /resources/common/fonts/iconfont.ttf?t=1499667026218 HTTP/1.1&quot;,&quot;status&quot;:&quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;159540&quot;,&quot;http_x_forwarded_for&quot;:&quot;-&quot;,&quot;upstream_addr&quot;:&quot;127.0.0.1:8180&quot;,&quot;request_time&quot;:&quot;0.005&quot;,&quot;upstream_response_time&quot;:&quot;0.005&quot;}\n</code></pre><p>从时间戳上来看，从第一个请求到最后一个请求，共有100个请求，总共用了6秒（请你注意这个响应时间，为了让你看得更清楚，我只截了一个用户的完整请求。实际上这里应该是用压力场景中的包括这些请求的平均响应时间）。</p><p>同样地，我们来计算一下对应的TPS。</p><ol>\n<li>\n<p>请求级的TPS：<br>\n$1(用户) \\times 100(请求数) \\div 6(秒) \\approx 16.67(TPS)$</p>\n</li>\n<li>\n<p>单业务操作级TPS：<br>\n$1(用户) \\times 7(业务操作) \\div 6(秒) \\approx 1.17(TPS)$</p>\n</li>\n<li>\n<p>用户级TPS：<br>\n$1(用户) \\times 1(用户级) \\div 6(秒) \\approx 0.17(TPS)$</p>\n</li>\n</ol><p>我们可以对应算一下，一个没有停顿的用户（并发用户）相当于多少个有停顿的用户（在线用户）呢？在这个转换的过程中，我们暂时不考虑请求的区别。那么，显然是：</p><p>$16.67\\div0.4=1.17\\div0.028=0.17\\div0.004 ≈ 41.79（倍）$</p><p>你用哪个级别的TPS来算都是一样的。</p><p>这样，我们就清楚了，并发度就是：</p><p>$1(并发用户) \\div 41.79(在线用户) \\approx 2.4\\% (也即是6/250) $</p><p>那么，如果你录制了脚本并且没有设置停顿时间（你可以叫Think Time或等待时间），如果你想支持的是10万在线用户在一小时内完成所有业务，那么支持的对应并发用户数就是：</p><p>$ 100000(在线用户)\\times 2.4\\% = 2,400(并发用户) $</p><p>而我们一个线程跑出来的请求级的TPS是16.67，要想模拟出10万用户的在线，我们需要的压力线程数就是：</p><p>$2,777.78(10万在线用户时的请求级TPS) \\div 16.67(一个压力线程的请求级TPS) \\approx 167(压力线程)$</p><p>讲到这里，我们总结一下前面所讲的公式。</p><p><strong>在线用户数和压力线程之间的关系：</strong></p><ul>\n<li>\n<p>用请求级TPS计算：</p>\n<p>$压力线程 = \\frac{(在线用户数 \\times 单用户请求数)}{峰值采样时间段} \\div 一个压力线程的请求级TPS$</p>\n</li>\n<li>\n<p>用单业务操作级TPS计算：</p>\n<p>$压力线程 = \\frac{(在线用户数 \\times 单用户业务操作数)}{峰值采样时间段} \\div 一个压力线程的业务操作级TPS$</p>\n</li>\n<li>\n<p>用用户级TPS计算：</p>\n<p>$压力线程 = \\frac{(在线用户数 \\times 单用户完整业务数(也就是1)}{峰值采样时间段} \\div 一个压力线程的用户级TPS$</p>\n</li>\n</ul><p><strong>并发用户数的计算：</strong></p><ul>\n<li>$并发用户数 = 在线用户数\\times\\frac{有停顿时间的单线程TPS}{无停顿时间的单线程TPS}$</li>\n</ul><p><strong>并发度：</strong></p><ul>\n<li>$并发度 = \\frac{并发用户}{在线用户} \\times 100\\% （取值要在同一时间段）$</li>\n</ul><p>从以上的计算逻辑中，我们可以看到，这其中有几个关键数据：</p><ol>\n<li>在线用户数。这个值可以从日志中取到；</li>\n<li>在线用户数统计的时间段。这个值也可以从日志中取到；</li>\n<li>用户级操作的完整业务流时间（记得多采样一些数据，计算平均时间）。这个值也是从日志中取到；</li>\n<li>无停顿时间的完整业务流时间。这个值从压力工具中可以取到；</li>\n<li>单用户完整业务流的请求数。这个值可以从日志中取到。</li>\n</ol><h2>“思考时间”到底怎么用？</h2><p>在性能行业中，在线用户和并发用户换算的过程里，有一个概念我们是万万不能跳过的，那就是“思考时间”。因为有太多的人想用思考时间来描述真实在线用户操作时的停顿了，所以，下面我们就来说说这个重要的概念。</p><p>思考时间自从Mercury（LoadRunner最原始的厂商）进入中国市场灌输BTO（Business Technique Optimization）概念时，就随着LoadRunner的普遍使用而渐渐地深入人心。</p><p>但是，如果你想用它，却没有那么容易。</p><p>在前面的示例中，我们看到了一个用户的完整的业务流操作用了250秒，其中就包括了思考时间。对于用户来说是做了7个操作，但是对于系统来说是什么呢？我们先看一下这些操作在时间上的分布。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/db/14c42989985487c7af59733820cd63db.png?wh=2294*538\" alt=\"\"></p><p>（注：上图中多出来的请求是一些自动触发的，我们可以忽略掉。）</p><p>你可以看到，每个操作之间实际上都是有间隔的。而这个时间间隔就是我们在性能脚本中经常说的思考时间（Think Time）。如果你想设置思考时间，就得把每两个操作之间的时间间隔拿到。</p><p>并且，注意哦！<strong>你不是只取一个用户的就够了，而是要把大量的真实用户的操作时间间隔拿到</strong>，然后再做平均值、标准方差的计算，最后再配置到压力工具中。</p><p>在我的工作经验中，几乎没有一家企业可以做到这一点的。每当我看到这样的情形时，我都建议他们不要用思考时间了，因为即使用了也并不能说明他们模拟了真实用户的行为。</p><h2>为什么不能用用户会话的超时时间来计算？</h2><p>因为用户的在线时间比较难统计，并且操作的间隔也比较难得到，所以有人提出用用户登录之后的会话（Session）超时时间来做计算。我先画一个示意图，再来给你解析一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/ef/b5ccaf9302b7fbea20482fac7099f1ef.jpg?wh=2000*1210\" alt=\"\"></p><p>（注：在上图中，一个带箭头的线表示一个完整的用户级的业务流操作。）</p><p>用这个思路来计算并发用户的人，通常都会这样说：</p><blockquote>\n<p>你看，一个用户进入系统之后会做一些操作，这时并发是1；但第一个用户还没操作完，第二个用户就进来了，这时的并发就是2；那也有可能用户接着进来，所以并发也有可能变成3…</p>\n</blockquote><p>是不是看起来非常合理？在我们前面提到的那个《Method for Estimating the Number of Concurrent Users》中就用了这个思维逻辑。那问题是什么呢？问题有两个：</p><ul>\n<li>\n<p>问题1，你能画出图中的红线吗？显然不能，因为它们是时间点呀！你在系统中做统计的时候，怎么可能拿到时间点的数据呢？不管你的日志记得有多细，就算到纳秒级，那也是时间段。</p>\n</li>\n<li>\n<p>问题2，在系统中，用户的行为可以像图中这样用一条直线来表示吗？显然也不能，从前面我们截的用户操作间隔图中就可以看到，一个用户在操作期间都认为自己是在线的，但是在请求的级别，中间其实是有停顿的。所以，即使一个用户一直在系统中操作，他发出的请求，也不会像水流一样源源不断。</p>\n</li>\n</ul><p>我们知道，Session是一串保存在用户端和系统中的字符串。在用户和系统交互的过程中，带着Session就可以识别请求。但是，并不是说用户和系统因为Session的存在，就一直有交互并且没有间隔。</p><p>所以，计算Session个数，可以让我们知道有多少用户是在线的，但是，并不是说这些用户和系统有交互。</p><p>对于Session的配置，如果它的有效期是30分钟，那在这30分钟内，用户的操作都会被识别。但是，在这30分钟内，用户并不见得要有请求，就连TCP连接都可能没有保持。对于短连接的系统，请求结束，TCP连接会立即断掉；对于长连接系统，我们要发心跳才能保持连接，不过也仅仅是保持连接，也不见得有数据交互。</p><p>所以，<strong>Session仅仅是消耗着保存字符串的那部分内存，来做用户和系统之间的识别，并不能用来做性能中的并发用户数计算。</strong></p><h2>RPS和TPS之间到底有没有争议？</h2><p>我记得在网上看到过一篇文章，大意是说不建议用TPS（每秒事务数）来衡量系统的性能，而是建议用RPS（每秒请求数）衡量。并且，文章把TPS模式描述为“令人震惊的存在行业多年的误操作”。在我的学员群中，也有过类似的讨论。</p><p>对于RPS和TPS，你可以看到很多人各执一词，并且针锋相对。关键是，这些人居然谁都说服不了谁，然后这个问题就变成了一个哲学问题。</p><p>看了一圈文章之后，如果我理解的没错，大概的争议点是这样的：</p><ol>\n<li>\n<p>TPS是从压力工具的角度来说的，但是因为TPS会受到响应时间的影响，所以不建议采用TPS模式。</p>\n</li>\n<li>\n<p>在接口串行请求时，由于各种异常问题的出现，TPS不能反映出后端服务的每秒请求数。</p>\n</li>\n<li>\n<p>TPS反映的是业务视角，RPS反映的是服务端视角。</p>\n</li>\n</ol><p>这些说法看似是成立的，但是有什么误差呢。下面我们来一条一条理解一下。</p><ol>\n<li>\n<p>在请求-响应的同步逻辑中，TPS必然是和响应时间成反比关系的。那么受响应时间影响，TPS也是合情合理的。而我们要分析的就是，这种响应时间会变长的性能问题。难道用了RPS模式就不关注响应时间了吗？</p>\n<p>在异步逻辑中，我们要是只关注发送出去多少请求，显然无法反映出系统的完整的处理能力。所以，第一点争论其实是不存在的。</p>\n</li>\n<li>\n<p>即便接口是串行的，并且后端流程长，会在各个节点产生多个请求，那后端请求也肯定是大于压力工具中的TPS的。那在一个固定的场景中，压力工具中的TPS和后端的请求数，不是必然成线性关系吗？</p>\n<p>如果有异常出现，有报错啥的，导致了后端某些服务的请求变少了，这种情况不就正是我们要分析的性能问题吗？ 所以，第二点也是不应该有争议的。</p>\n</li>\n<li>\n<p>这个说法就更奇怪了。本来就没有人把压力工具中的TPS和服务端的RPS混为一谈。这两者是不同的统计手法，为什么会作为争议出现呢？它们本来就在不同的角度，更不应该做为对立的论点呀。所以，第三点也是不应该有争议的。</p>\n</li>\n</ol><p>我用一个示意图来说明一下请求和TPS之间的关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/8e/d70e5d37165f8c53a8989259bbc4028e.jpg?wh=2000*1210\" alt=\"\"></p><p>如上图所示，如果压力工具中的一个线程（图中人的位置）发出一个请求（也就是在图中0的位置），系统中共产生了4个请求（图中的0、1、2、3位置）。不管这些请求是同步还是异步，这些请求都是真实存在的。如果再来一个线程，也发同样的一个请求，那系统中必然总共产生8个请求，这个逻辑很清楚。</p><p>如果我们把压力工具中线程的请求做为一个T（压力工具中的事务数），那它对应的后端就应该是4个R（后端请求总数）。请你注意，在压力工具中是无法统计出后端的4个请求的，而且，这也是没有必要统计的。这个统计工作，我们应该留给业务监控、日志监控的系统去做，不用再去增加压力工具的负担。</p><p>显然请求和TPS是线性关系，除非你发的不是这个请求，而是其他的请求，或者是你改变了参数。</p><p>如果你愿意关注后端RPS，就去关注；如果愿意关注压力工具的TPS，也无所谓。但是，<strong>在一个项目的具体实践中，不管是RPS还是TPS，一定要说出来，并且大家都能有同样的理解的。</strong></p><p>既然TPS、RPS是线性的，那我们实在是没有必要把这两个角度当成是对立面来看待，因为这不仅会增加性能理解的复杂度，也没有实际的价值。也就是说，这根本就不是一个争议点。</p><h2>总结</h2><p>在这节课中，我努力地把在线用户数、并发用户数、并发度和TPS之间的关系做了深入的剖析。如果你在跟不同职位的人沟通时，请注意关心一下他们想说的并发、在线、TPS到底在哪个层级，因为要是不在一个频道上，是无法达成一致结论的。</p><p>在你做性能项目时，如果可以取得其中的关键数据，那就可以根据我们前面讲的相应公式做计算。而这个计算逻辑，不止是对HTTP有效，对任何一个协议也都是有效的。</p><p>在这节课中，我也把在线用户数、并发用户数、并发度和TPS之间存在的误解做了详细的说明，也对一些行业谬传做了深入的解析。从中你可以知道，偏向业务层或TPS层的思路都是不对的，只有将它们关联起来，才是合理的从技术到业务的思考逻辑。</p><p>希望你能理解，并将它们之间的关系真正理透。</p><h2>课后作业</h2><p>这就是今天的全部内容，最后请你思考一下：</p><ol>\n<li>如何获取有效的在线用户的TPS（不管是哪个层级的TPS）？</li>\n<li>性能场景中不包括静态资源的隐患是什么？</li>\n</ol><p>记得在留言区和我讨论、交流你的想法，每一次思考都会让你更进一步。</p><p>如果这节课让你有所收获，也欢迎你分享给你的朋友，共同学习进步。我们下一讲再见！</p>","neighbors":{"left":{"article_title":"07 | 性能场景的数据到底应该做成什么样子？","id":359221},"right":{"article_title":"09 | 如何设计全局和定向监控策略？","id":361138}},"comments":[{"had_liked":false,"id":296066,"user_name":"sky_you","can_delete":false,"product_type":"c1","uid":2647818,"ip_address":"","ucode":"3169CB6C9C9601","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9ay1I6KWdnn0MX1JSfic0xdmWLcD1Jh1Fx2AP67d6Kicr71HH5jOKHrUZbTmfsLTQDNTTroCbcTzA/132","comment_is_top":false,"comment_ctime":1622728338,"is_pvip":false,"replies":[{"id":"107487","content":"那只能凭感觉做了。为了生活，还是昧着良心随便给个结论吧。哈哈。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1622770637,"ip_address":"","comment_id":296066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35982466706","product_id":100074001,"comment_content":"其实我很想问一下，假如没有日志，就是一个新系统，什么参照数据都没有。客户也无法给出性能目标。最多给你个单个功能，比如一个按钮不能超过三秒。然后我一天要处理多少个订单。<br><br>在这种情况下，性能测试是不是没有必要做了？<br>老板会在做之前问，评估一下，我们能做出来多少并发的东西？我这个搞性能的是不是可以递交辞职报告了？？？","like_count":8,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521309,"discussion_content":"那只能凭感觉做了。为了生活，还是昧着良心随便给个结论吧。哈哈。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622770637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287235,"user_name":"大白","can_delete":false,"product_type":"c1","uid":2030039,"ip_address":"","ucode":"41304E2743BDB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B7mcB2ZFuTbB4OgjR9nXQsL6nlZFLq6Y1XDicdp8KhoNmzLCRsvEJxD584SampUsialBgYuxN3ibfXJHqdx0RMWmA/132","comment_is_top":false,"comment_ctime":1617850708,"is_pvip":false,"replies":[{"id":"104291","content":"1. 用日志系统可以统计。自己写代码也可以。一次性的工作，难度大也值得。<br>2. 嗯，这一点提的好。我应该加到正文中去。<br>3. 是的。本来也应该是把业务模型考虑进去的。<br>4. 对老板来说，是这样的。本来这个话题就是为了回答业务容量的问题。<br>5. 小伙子机灵呀。这是完全可以的。<br>6. 不管是大范围，还是小范围的计算，都可以，就看要回答的是什么问题。<br>7. 这个你可以试试去做一下。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1617852444,"ip_address":"","comment_id":287235,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14502752596","product_id":100074001,"comment_content":"用户级操作的完整业务流时间（记得多采样一些数据，计算平均时间）。这个值也是从日志中取到；<br><br>1、这个平均业务流时间，才是最重要的核心机制，日志统计是大工程，难度较大<br><br>2、样本要尽量多，而且比例要到位，样本起码尽量要制定走完整个流程的用户比例和未走完流程的用例比例保持接近。这样才能满足真实用户的操作分布，因为每一个事务流程中的用户的思考时间由于业务的特殊性必然不一致。<br><br>3、按照这样理解，每个T的事务并发度其实都是不一样的，我感觉还是要做更细致的拆分。但是感觉这样就回到业务模型了啦。<br><br>4、 所以我思前想后在有日志的情况下，并发度的计算最大用处应该是最完容量测试后，最容量评估用的<br><br>5、如果是这样我是不是也可以业务模型的来反射出容量评估呢？ 例如我业务模型的通过日志采集完，1分钟内的 7个业务的比例和总的业务量&#47;60s，就是平均TPS1，那么我照业务模型实际跑出来的TPS2，那么容量评估就是 TPS1时的在线用户*(TPS2&#47;TPS1)<br>6、此时TPS2&#47;TPS1其实也是并发度的一种计算，而不在是文中一个用户连续走完所有的业务时间，其中的6秒，按照文中的思路想好像是那么回事，但是仔细想好像过于极端了！因为用户真实场景是通过大量样本的统计的平均时间，而这个6S确实一个且单用户的样本数据  。<br>7、5中的问题点，就是TPS1的在线用户数的统计问题了，那么就统计出1分钟内的在线用户即可","like_count":3,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518242,"discussion_content":"1. 用日志系统可以统计。自己写代码也可以。一次性的工作，难度大也值得。\n2. 嗯，这一点提的好。我应该加到正文中去。\n3. 是的。本来也应该是把业务模型考虑进去的。\n4. 对老板来说，是这样的。本来这个话题就是为了回答业务容量的问题。\n5. 小伙子机灵呀。这是完全可以的。\n6. 不管是大范围，还是小范围的计算，都可以，就看要回答的是什么问题。\n7. 这个你可以试试去做一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617852444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296073,"user_name":"sky_you","can_delete":false,"product_type":"c1","uid":2647818,"ip_address":"","ucode":"3169CB6C9C9601","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9ay1I6KWdnn0MX1JSfic0xdmWLcD1Jh1Fx2AP67d6Kicr71HH5jOKHrUZbTmfsLTQDNTTroCbcTzA/132","comment_is_top":false,"comment_ctime":1622731148,"is_pvip":false,"replies":[{"id":"107486","content":"全新的系统在试运行阶段采集统计数据。<br>要不然就只能凭经验蒙了。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1622770573,"ip_address":"","comment_id":296073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10212665740","product_id":100074001,"comment_content":"在线用户数。这个值可以从日志中取到；<br>在线用户数统计的时间段。这个值也可以从日志中取到；<br>用户级操作的完整业务流时间（记得多采样一些数据，计算平均时间）。这个值也是从日志中取到；<br>无停顿时间的完整业务流时间。这个值从压力工具中可以取到；<br>单用户完整业务流的请求数。这个值可以从日志中取到。<br><br>老师 全新的系统怎么办？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521312,"discussion_content":"全新的系统在试运行阶段采集统计数据。\n要不然就只能凭经验蒙了。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622770573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310985,"user_name":"jy","can_delete":false,"product_type":"c1","uid":1785172,"ip_address":"","ucode":"F4E179C435451B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ6G2xZvNRmhyXBjmGbI5G8icGCCMPupr6yxZ1IcURwp7GTRHcpWGWpg9A0fLlyicmVdDwzqZqwiaOQ/132","comment_is_top":false,"comment_ctime":1631009165,"is_pvip":false,"replies":[{"id":"112768","content":"说得对。<br>这个计算前提我在文中描述过“不考虑业务模型”了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1631147128,"ip_address":"","comment_id":310985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925976461","product_id":100074001,"comment_content":"【抛砖引玉】<br>本文计算有个前提，就是在线用户也走了完整流程，<br>而实际场景中，<br>1、在线用户，不一定做了操作，<br>2、哪怕做了操作，也不一定是一个完整业务流程，可能只做了其中部分操作，比如查询商品。<br>所以，只计算在线用户的tps这样来获取并发度是不严谨的，而且要这种方式，考虑不同情况，感觉复杂度很高。<br><br>所以，我觉得更合理的办法还是统计时间段的在线用户（定时统计在线用户，比如在redis里面的token，根据采样数据在excel做透视图，根据趋势看平均大概是多少&lt;性能实战里面老师说的tps约么是多少的方式&gt;），并发度=无停顿时间tps&#47;在线用户。","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526425,"discussion_content":"说得对。\n这个计算前提我在文中描述过“不考虑业务模型”了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631147128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309270,"user_name":"byyy","can_delete":false,"product_type":"c1","uid":2684815,"ip_address":"","ucode":"A165C7CDB88419","user_header":"","comment_is_top":false,"comment_ctime":1630027892,"is_pvip":false,"replies":[{"id":"111992","content":"看起来你算的是对的哦。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1630067653,"ip_address":"","comment_id":309270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924995188","product_id":100074001,"comment_content":"多在线用户的 TPS 计算<br>1.请求级的 TPS：<br>(100000(用户)×100(请求数))÷3600(秒)≈2,777.78(TPS)<br>2.单业务操作级 TPS：<br>(100000(用户)×7(业务操作)))÷3600(秒)≈194.44(TPS)<br>3.用户级 TPS：<br>(100000(用户)×1(用户级)÷3600(秒)≈27.78(TPS)<br><br>老师，关于上面这个计算，如果把业务模型加进去考虑，我下面这样的计算过程对不对，如果不对，帮我指点一下。<br>假设系统架构是jmeter-gateway-系统A-系统B-系统C-系统D，压力从gateway进来后，到系统A，系统A调用系统B通过feign调用，后面调用都一样，不走gateway。<br>实际上，每个用户不可能都会完成文中的7个业务操作，所以才会出现业务模型中各个业务之间的比例不是1:1的情况。<br>如果把业务模型考虑进去，我觉得多在线用户的TPS计算应该是这样。<br>1.请求级的 TPS：<br>(从系统A,B,C,D的日志中统计出3600秒这个时间窗口内请求的总数量)÷3600(秒)≈请求级别的TPS<br>2.单业务操作级 TPS：<br>(从gateway的日志中统计出3600秒这个时间窗口内各个业务操作的总数量)÷3600(秒)≈单业务操作级 TPS<br>3.用户级 TPS：<br>首先，从gateway日志中得到3600秒这个时间窗口的业务模型，假设业务模型为：登录20%,查询40%,添加购物20%,订单10%,支付10%，<br>其次，从业务模型还可以得到100个T（这个T指的是业务操作级别的事务）对应40个T（这个T指的是用户级别的事务），因为我们从第2步(单业务操作级的TPS计算)中已经得到3600秒时间窗口内业务操作的总数量，假设这个数量为a，所以a对应的用户级别的事务就是(40&#47;100)*a，<br>所以用户级别的TPS应该这样计算：<br>用户级 TPS≈((40&#47;100)*a)÷3600(秒)<br><br>","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525806,"discussion_content":"看起来你算的是对的哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630067653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301279,"user_name":"byyy","can_delete":false,"product_type":"c1","uid":2684815,"ip_address":"","ucode":"A165C7CDB88419","user_header":"","comment_is_top":false,"comment_ctime":1625620038,"is_pvip":false,"replies":[{"id":"109120","content":"1. 这要看日志中有没有这个计数器。在线用户数，有的系统放在日志中，有的放在数据库、缓存中。这个你要根据自己的系统来判断。<br>2. 请结合06篇一起来理解。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1625648482,"ip_address":"","comment_id":301279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920587334","product_id":100074001,"comment_content":"老师，我有2个问题，帮我解答下<br>1.&quot;在线用户数。这个值可以从日志中取到；&quot;<br>在线用户数的计算原理是怎样的，怎么通过日志来得到在线用户数？<br>2.&quot;请你注意，在这个逻辑中，我没有把业务模型加进来一起讨论，因为加了业务模型，反而会让问题变得更复杂。&quot;<br>如果把业务模型加进去的话，是怎么样的逻辑？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522955,"discussion_content":"1. 这要看日志中有没有这个计数器。在线用户数，有的系统放在日志中，有的放在数据库、缓存中。这个你要根据自己的系统来判断。\n2. 请结合06篇一起来理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625648482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299138,"user_name":"A0桑荫不徙","can_delete":false,"product_type":"c1","uid":1761168,"ip_address":"","ucode":"C1AF4111F79D00","user_header":"https://static001.geekbang.org/account/avatar/00/1a/df/90/35eb6526.jpg","comment_is_top":false,"comment_ctime":1624491033,"is_pvip":true,"replies":[{"id":"108481","content":"这个是为了计算并发度，在线用户总数是统计出来的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1624495849,"ip_address":"","comment_id":299138,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919458329","product_id":100074001,"comment_content":"我们可以对应算一下，一个没有停顿的用户（并发用户）相当于多少个有停顿的用户（在线用户）呢？在这个转换的过程中，我们暂时不考虑请求的区别。<br>这个在线用户数不是统计出来的吗，咋还能计算呢，实在没明白，越想越想不明白，这个计算也没明白","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522343,"discussion_content":"这个是为了计算并发度，在线用户总数是统计出来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624495849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298652,"user_name":"sierlu","can_delete":false,"product_type":"c1","uid":1449460,"ip_address":"","ucode":"3CBAB057E90FDA","user_header":"","comment_is_top":false,"comment_ctime":1624250092,"is_pvip":false,"replies":[{"id":"108479","content":"我只是做个假设，前提是每个人操作一遍。如果有循环操作的话，那假设前提就变了。就得重新算了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1624491937,"ip_address":"","comment_id":298652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919217388","product_id":100074001,"comment_content":"老是我不是把压力线程当成用户了，我换一个问法，文中说的是10万用户再一个小时内操作一次业务流程，操作时长250s,通过计算并发用户是2400，并发度是2.4%，那10万个用户再一个小时内有停顿的操作，但是结束又循环操作业务流程（相当于每一个用户一小时应该操作了3600&#47;250=14次），每次业务操作时长250 的并发度又该怎么算呢？在线用户数×无停顿时间的单线程TPS&#47;有停顿时间的单线程TPS，按照老师的算法并发度还是2.4%。所以我感觉这个算法需要有个前提，就是这个一小时内用户应该是有停顿的操作完一次后，又循环去操作，求老师解答疑惑~谢谢老师～","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522198,"discussion_content":"我只是做个假设，前提是每个人操作一遍。如果有循环操作的话，那假设前提就变了。就得重新算了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624491937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297313,"user_name":"言希","can_delete":false,"product_type":"c1","uid":1785875,"ip_address":"","ucode":"87E80087CFECA8","user_header":"https://static001.geekbang.org/account/avatar/00/1b/40/13/3e77a4a0.jpg","comment_is_top":false,"comment_ctime":1623427539,"is_pvip":false,"replies":[{"id":"107969","content":"真实环境中要用真实的大量的用户来做统计才是正确的。 这篇主要是解释清楚其中的关键逻辑。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1623469342,"ip_address":"","comment_id":297313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918394835","product_id":100074001,"comment_content":"首先在线用户数和并发度怎么算的？其实再第一个专栏中已经提出，而这个专栏是从1个用户的视角分析了在线用户数，大概意思是找出用户真实操作场景下的TPS，然后找出并发下的TPS，因为单一用户真实操作场景下用户再一个用户T中只执行了一次；那么反推真实操作场景下的TPS&#47;1个用户下并发下执行的TPS数就是在线用户数；但是真实中肯定不会只有一个用户所以这个计算过程只是参考供大家思考即可；","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521793,"discussion_content":"真实环境中要用真实的大量的用户来做统计才是正确的。 这篇主要是解释清楚其中的关键逻辑。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623469342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287261,"user_name":"大白","can_delete":false,"product_type":"c1","uid":2030039,"ip_address":"","ucode":"41304E2743BDB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B7mcB2ZFuTbB4OgjR9nXQsL6nlZFLq6Y1XDicdp8KhoNmzLCRsvEJxD584SampUsialBgYuxN3ibfXJHqdx0RMWmA/132","comment_is_top":false,"comment_ctime":1617860460,"is_pvip":false,"replies":[{"id":"104306","content":"理解正确。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1617884511,"ip_address":"","comment_id":287261,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5912827756","product_id":100074001,"comment_content":"1、如何获取有效的在线用户的 TPS（不管是哪个层级的 TPS）？<br>通过分析日志，我现在用的是ELK，获取时间段内的TPS和在线用户数<br><br>2、性能场景中不包括静态资源的隐患是什么？<br>不能真实模型用户行为，比如用nginx做静态资源代理服务器，不做的话就会减少nginx的压力<br>但是静态资源这块更多的设计是前端性能了吧，比如压缩、缓存这些","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518250,"discussion_content":"理解正确。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617884511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1712509,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Cyuxk6Ej9B5G9icGd2h9OicjdbuWMsQsB0cOZoRXLN6zX5bfmCXB4yHiaicOcE5OUicGDIaodS9T4Ws6lGBibFWoSlKQ/132","nickname":"Geek_081377","note":"","ucode":"62FC733855B002","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372408,"discussion_content":"ELK哪个指标获取在线用户数呢，找百度都没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620309818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358944,"user_name":"Olivia","can_delete":false,"product_type":"c1","uid":1038245,"ip_address":"四川","ucode":"BE840A032F1DF4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/a5/6e047fbc.jpg","comment_is_top":false,"comment_ctime":1665049082,"is_pvip":false,"replies":[{"id":"130962","content":"用无停顿的算并发，然后才能算并发度。","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1666191300,"ip_address":"四川","comment_id":358944,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1665049082","product_id":100074001,"comment_content":"高老师，重看这一章节又疑惑了，在线用户数应该是有个业务上的目标值，并发度也应该是和业务有关的，比如一个普通的信息发布系统，只有一些一般的查询请求，并发度应该是比较低的，而一个请求比较频繁的游戏系统，并发度应该是比较高的，但是文章中计算并发度的公式，用到了有停顿时的TPS和无停顿时的TPS，其中有停顿的TPS是基于业务确定的，假设两个都是一般信息查询的业务，完成一次查询业务的有停顿TPS假设是一致的，无停顿的TPS实际上是当前两个系统分别有多快的体现，那怎么这个反过来成了倒推并发度的因素呢？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590970,"discussion_content":"用无停顿的算并发，然后才能算并发度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666191300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358812,"user_name":"Geek_e8c95e","can_delete":false,"product_type":"c1","uid":3194241,"ip_address":"四川","ucode":"6234501C61381E","user_header":"","comment_is_top":false,"comment_ctime":1664809891,"is_pvip":false,"replies":[{"id":"130961","content":"我算错了吗？公式是对的，我再算一遍。","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1666191217,"ip_address":"四川","comment_id":358812,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1664809891","product_id":100074001,"comment_content":"文章计算10万在线用户，需要167压力线程，而根据专栏1计算逻辑  100000(在线用户)×2.4%(并发度)÷16.67(每个线程tps)=144(压力线程)，到底哪一个是正确的呢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590969,"discussion_content":"我算错了吗？公式是对的，我再算一遍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666191217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337539,"user_name":"Yolo甲第","can_delete":false,"product_type":"c1","uid":2697059,"ip_address":"","ucode":"E9590318822534","user_header":"https://static001.geekbang.org/account/avatar/00/29/27/63/4abc36ad.jpg","comment_is_top":false,"comment_ctime":1646882785,"is_pvip":false,"replies":[{"id":"123593","content":"1. kibana不就是采集的总请求吗？<br>2. 这个应该没有固定的参考倍数。不同的业务产生峰值标准方差不一样。 ","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1647242599,"ip_address":"","comment_id":337539,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646882785","product_id":100074001,"comment_content":"1、现在的kibana应该可以采集到高峰期的uv和业务的总请求数，去看单个的用户在通过在线用户数乘的话，应该没有直接去采集总请求数和在线用户准确吧？<br>2、假定业务模型不变，tps随用户成线性增长，那么在线10w用户，tps=1666，那么我要满足20w用户，是不是tps直接是二倍，保险期间应该更多一点，是不是有个参考倍数？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556186,"discussion_content":"1. kibana不就是采集的总请求吗？\n2. 这个应该没有固定的参考倍数。不同的业务产生峰值标准方差不一样。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647242599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317255,"user_name":"Geek_704e0c","can_delete":false,"product_type":"c1","uid":1544269,"ip_address":"","ucode":"4338A5A5320DE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIGad4UtSm2JrcqoRooSnHJQyoic3uCW6UjsGdudahgQ1xria0ic9iaSqF2iaEkwJj4C9MH6dRub9hukTg/132","comment_is_top":false,"comment_ctime":1634722721,"is_pvip":false,"replies":[{"id":"115042","content":"和场景执行有关呀。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1634808604,"ip_address":"","comment_id":317255,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1634722721","product_id":100074001,"comment_content":"上面计算出来的并发用户数有什么意义","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528736,"discussion_content":"和场景执行有关呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634808604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2857075,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/98/73/d9f3cbdb.jpg","nickname":"哄哄","note":"","ucode":"2CE5DBF8F73DCC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555961,"discussion_content":"不明白为什么和 场景执行 有关？\n请教下：\n对于文中提到的 并发用户数2400，线程数 167， jmeter 中设置线程数的时候这2个值应该用哪个值？另一个值怎么用？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647142789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528736,"ip_address":""},"score":555961,"extra":""}]}]},{"had_liked":false,"id":316009,"user_name":"啸龙","can_delete":false,"product_type":"c1","uid":2807321,"ip_address":"","ucode":"ACE8C52AD8D329","user_header":"https://static001.geekbang.org/account/avatar/00/2a/d6/19/dafc61a8.jpg","comment_is_top":false,"comment_ctime":1634106893,"is_pvip":false,"replies":[{"id":"114677","content":"因为很多人仍然认为压力工具的线程数是用户数，这个逻辑是性能行业中一直以来存在的误解。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1634535788,"ip_address":"","comment_id":316009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634106893","product_id":100074001,"comment_content":"文中描述 “并发是在单位时间内完成的事务（T）的个数。如果这个事务（T）是用户的操作，那就是并发的用户了。“<br>这句话是否可理解为不用再关注最大并发用户数，因为最大并发用户数就是用户级别的TPS，那为什么好多性能需求还强调最大并发用户数，是概念的问题？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528235,"discussion_content":"因为很多人仍然认为压力工具的线程数是用户数，这个逻辑是性能行业中一直以来存在的误解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634535788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312493,"user_name":"X_man","can_delete":false,"product_type":"c1","uid":2339893,"ip_address":"","ucode":"98BCA359FCFCFE","user_header":"https://static001.geekbang.org/account/avatar/00/23/b4/35/3c5335d3.jpg","comment_is_top":false,"comment_ctime":1631842127,"is_pvip":false,"replies":[{"id":"114800","content":"1，显然不是。<br>2，在我的理念中并发是用tps承载的。<br>","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1634689524,"ip_address":"","comment_id":312493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631842127","product_id":100074001,"comment_content":"老师您好。看了你的文章产生几个疑问<br>1、线程数是不是就是虚拟用户数？<br>2、并发用户数这个是等于线程数还是等于TPS数？我以前一直以为线程数是并发用户数相等，后面直到我看到高楼老师的这篇文章，<br>因为TPS来衡量服务器性能指标这个我是清楚的，但是平时测试的时候客户还有老板他们更关心的是并发用户，经常会问系统支持多少并发用户？我只能告诉他们支持多少TPS，因为他们的理解并发数就是线程数，虽然我不这么理解但是跟他们解释清楚很难<br>希望老师能帮我解惑","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526986,"discussion_content":"1，显然不是。\n2，在我的理念中并发是用tps承载的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310804,"user_name":"罗伟","can_delete":false,"product_type":"c1","uid":2362278,"ip_address":"","ucode":"9A1E3AA6BF31AF","user_header":"","comment_is_top":false,"comment_ctime":1630918329,"is_pvip":false,"replies":[{"id":"112772","content":"1，满足业务需求就可以达到上线要求。如果不是有其他目的，我觉得不用往上压，没有意义，只会增加成本。<br>2，压力线程的多少取决于业务场景有多大，不以业界或专家经验为标准。<br>3，单个压力机跑jmeter线程里，压力线程数要不要向上设置，取决于业务，不是有没有必要。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1631147554,"ip_address":"","comment_id":310804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630918329","product_id":100074001,"comment_content":"你好，老师，在一个项目压测中，有两个项目指标：1、tps为10000  2 、6万并发6秒内处理完<br>第一个：压出的结果是10000tps（已经符合业务需求），使用的是1000 jmeter线程数。但是我用5000线程数的时候，报错数增加10%，这个时候我的系统要不要优化呢。<br>第二个：这边的业务要求使用10000的并发再次压测，大量报错，要求需要优化。<br>我的理解6万6秒内就是10000tps，1000 的线程足够符合要求了。现在已经混乱了，需要请教两个问题：<br>1、如果tps达到了业务需求，这个时候需不需要往上压测，为啥往上压测，往上报错率增加，这个到底要不要修复。<br>2、您压测的经验中，压测10000 jmeter 线程是经常会遇到的吗？我查了一些网上资料，说是很多性能专家，jmeter 5000的并发数压测都是很少。<br>3、您写两个专题文档文章我都看了，但是并没有说明白，为啥jmeter 并发数没必要向上设置。jmeter 到底是怎么产生压力的。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526361,"discussion_content":"1，满足业务需求就可以达到上线要求。如果不是有其他目的，我觉得不用往上压，没有意义，只会增加成本。\n2，压力线程的多少取决于业务场景有多大，不以业界或专家经验为标准。\n3，单个压力机跑jmeter线程里，压力线程数要不要向上设置，取决于业务，不是有没有必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631147554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302693,"user_name":"Mingyan","can_delete":false,"product_type":"c1","uid":1344408,"ip_address":"","ucode":"02F222332B9045","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/98/fab9bd2a.jpg","comment_is_top":false,"comment_ctime":1626337224,"is_pvip":false,"replies":[{"id":"109638","content":"那当然不一样。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1626491806,"ip_address":"","comment_id":302693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626337224","product_id":100074001,"comment_content":"lr里面有个pacing，例如1s发送一个请求；那么1个vuser 每1s发10个请求，pacing设置0.1s；跟10个vusers 每个vuser发1个请求，pacing设置1s。这样对服务器压力是一样的吗？ 感觉具体某一个时间点一个发的是1个请求和10个vuser同时发的10个请求对服务器压力不一样呀","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523389,"discussion_content":"那当然不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626491806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298147,"user_name":"sierlu","can_delete":false,"product_type":"c1","uid":1449460,"ip_address":"","ucode":"3CBAB057E90FDA","user_header":"","comment_is_top":false,"comment_ctime":1623923803,"is_pvip":false,"replies":[{"id":"108241","content":"你先得改变压力线程就是用户的惯性思维逻辑才能觉得不混淆。<br>一个压力线程在单位时间里迭代了几次就是几个并发用户，因为我们是用tps来承载并发这个概念的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1624004864,"ip_address":"","comment_id":298147,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1623923803","product_id":100074001,"comment_content":"高老师，回头再看这个文章，感觉文章中的并发用户和并发线程有些混淆，“一个没有停顿的用户（并发用户）相当于多少个有停顿的用户（在线用户）呢”，这里的并发用户明明就是一个压力线程呀。后面又算出来并发用户和压力线程数不一样。因为文章中提到的一个小时内10万用户在使用250s完成业务，那并发用户应该指的是多少个用户循环操作多少次就可以在1小时内完成10万用户的调用量才对呀。应该是（3600&#47;250）*并发用户数=10万在线用户数。希望指点下？感谢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522033,"discussion_content":"你先得改变压力线程就是用户的惯性思维逻辑才能觉得不混淆。\n一个压力线程在单位时间里迭代了几次就是几个并发用户，因为我们是用tps来承载并发这个概念的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624004864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382887,"discussion_content":"迭代之后就换用户了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625755519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1449460,"avatar":"","nickname":"sierlu","note":"","ucode":"3CBAB057E90FDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379600,"discussion_content":"老是我不是把压力线程当成用户了，我换一个问法，文中说的是10万用户再一个小时内操作一次业务流程，操作时长250s,通过计算并发用户是2400，并发度是2.4%，那10万个用户再一个小时内有停顿的操作，但是结束又循环操作业务流程（相当于每一个用户一小时应该操作了3600/250=14次），每次业务操作时长250 的并发度又该怎么算呢？在线用户数×无停顿时间的单线程TPS/有停顿时间的单线程TPS，按照老师的算法并发度还是2.4%。所以我感觉这个算法需要有个前提，就是这个一小时内用户应该是有停顿的操作完一次后，又循环去操作，求老师解答疑惑~呜呜呜~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624006874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297316,"user_name":"言希","can_delete":false,"product_type":"c1","uid":1785875,"ip_address":"","ucode":"87E80087CFECA8","user_header":"https://static001.geekbang.org/account/avatar/00/1b/40/13/3e77a4a0.jpg","comment_is_top":false,"comment_ctime":1623428337,"is_pvip":false,"replies":[{"id":"107968","content":"结合真实用户的操作思考一下就容易理解了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1623469260,"ip_address":"","comment_id":297316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623428337","product_id":100074001,"comment_content":"关于本章算在线用户数的地方，还是有些不太理解；hh，明天再来看看；","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521794,"discussion_content":"结合真实用户的操作思考一下就容易理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623469260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291507,"user_name":"mushan79","can_delete":false,"product_type":"c1","uid":1560297,"ip_address":"","ucode":"C6A2540F91A6E8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgJnia6D3YcRFGgW4cObUhYWSBbaPibnH1gtvc7g5Ul9J2c6gXBZNHIY4cMnJaJz28MUAEMhnfmhuw/132","comment_is_top":false,"comment_ctime":1620312467,"is_pvip":false,"replies":[{"id":"105642","content":"这篇文章中的TPS，就是第一个专栏中通过日志统计出来的数据哇。这两个是一回事。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1620452348,"ip_address":"","comment_id":291507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620312467","product_id":100074001,"comment_content":"老师，看完这篇有点疑惑<br>1、我记得在第一个专栏里，在线用户数、并发用户数都是通过日志统计出来，从而得到并发度，是以真实的生产数据为背景的<br>2、这篇文章里的并发用户数是通过公式推导出来，其中无停顿时间的TPS也是用工具去发请求时统计出来的，这样计算出来的并发用户数应该和真实的存在偏离吧？有点疑惑这样推算是否接近真实情况<br>希望老师看到能帮忙解答下，谢谢~","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519489,"discussion_content":"这篇文章中的TPS，就是第一个专栏中通过日志统计出来的数据哇。这两个是一回事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620452348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288417,"user_name":"wfw123","can_delete":false,"product_type":"c1","uid":2535237,"ip_address":"","ucode":"973FA0927218F3","user_header":"","comment_is_top":false,"comment_ctime":1618462280,"is_pvip":false,"replies":[{"id":"104704","content":"看来对工具使用还不熟悉呀。jmeter中的事务是可以设置的。不一定要用请求级的。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1618491338,"ip_address":"","comment_id":288417,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1618462280","product_id":100074001,"comment_content":"jmeter工具中的tps 应该属于请求级的tps吧","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518621,"discussion_content":"看来对工具使用还不熟悉呀。jmeter中的事务是可以设置的。不一定要用请求级的。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618491338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2535237,"avatar":"","nickname":"wfw123","note":"","ucode":"973FA0927218F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367893,"discussion_content":"意思是把接口加到事物控制器下，如果事物控制器包含一整套流程的接口，那就是业务级，如果事物只包含一个接口，可以说是单业务级；而总的请求次数属于请求级的，这样理解对嘛","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618491743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374994,"discussion_content":"对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621432255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287152,"user_name":"xhkk","can_delete":false,"product_type":"c1","uid":1093421,"ip_address":"","ucode":"B36B04D83B6C70","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/2d/3dd65e6b.jpg","comment_is_top":false,"comment_ctime":1617797642,"is_pvip":false,"replies":[{"id":"104261","content":"请看【单个在线用户的 TPS 计算】那一段的第一个算式。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1617804057,"ip_address":"","comment_id":287152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617797642","product_id":100074001,"comment_content":"没有停顿和有停顿之间换算的时候<br>16.67÷0.4，这里的0.4表示什么？怎么来的？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518206,"discussion_content":"请看【单个在线用户的 TPS 计算】那一段的第一个算式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617804057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}