{"id":206274,"title":"09 | Raft算法（三）：如何解决成员变更的问题？","content":"<p>你好，我是韩健。</p><p>在日常工作中，你可能会遇到服务器故障的情况，这时你就需要替换集群中的服务器。如果遇到需要改变数据副本数的情况，则需要增加或移除集群中的服务器。总的来说，在日常工作中，集群中的服务器数量是会发生变化的。</p><p>讲到这儿，也许你会问：“老韩，Raft是共识算法，对集群成员进行变更时（比如增加2台服务器），会不会因为集群分裂，出现2个领导者呢？”</p><p>在我看来，的确会出现这个问题，因为Raft的领导者选举，建立在“大多数”的基础之上，那么当成员变更时，集群成员发生了变化，就可能同时存在新旧配置的2个“大多数”，出现2个领导者，破坏了Raft集群的领导者唯一性，影响了集群的运行。</p><p>而关于成员变更，不仅是Raft算法中比较难理解的一部分，非常重要，也是Raft算法中唯一被优化和改进的部分。比如，最初实现成员变更的是联合共识（Joint Consensus），但这个方法实现起来难，后来Raft的作者就提出了一种改进后的方法，单节点变更（single-server changes）。</p><p>为了帮你掌握这块内容，今天我除了带你了解成员变更问题的本质之外，还会讲一下如何通过单节点变更的方法，解决成员变更的问题。学完本讲内容之后，你不仅能理解成员变更的问题和单节点变更的原理，也能更好地理解Raft源码实现，掌握解决成员变更问题的方法。</p><!-- [[[read_end]]] --><p>在开始今天内容之前，我先介绍一下“配置”这个词儿。因为常听到有同学说，自己不理解配置（Configuration）的含义，从而不知道如何理解论文中的成员变更。</p><p>的确，配置是成员变更中一个非常重要的概念，我建议你这么理解：它就是在说集群是哪些节点组成的，是集群各节点地址信息的集合。比如节点A、B、C组成的集群，那么集群的配置就是[A, B, C]集合。</p><p>理解了这一点之后，咱们先来看一道思考题。</p><p>假设我们有一个由节点A、B、C组成的Raft集群，现在我们需要增加数据副本数，增加2个副本（也就是增加2台服务器），扩展为由节点A、B、C、D、E， 5个节点组成的新集群：</p><p><img src=\"https://static001.geekbang.org/resource/image/85/04/853b678cb8a088ce1bc9f91fc62bde04.jpg?wh=1142*400\" alt=\"\"></p><p>那么Raft算法是如何保障在集群配置变更时，集群能稳定运行，不出现2个领导者呢？带着这个问题，我们正式进入今天的学习。</p><p>老话说得好，“认识问题，才能解决问题”。为了帮你更好地理解单节点变更的方法，我们先来看一看，成员变更时，到底会出现什么样的问题？</p><h2>成员变更的问题</h2><p>在我看来，在集群中进行成员变更的最大风险是，可能会同时出现2个领导者。比如在进行成员变更时，节点A、B和C之间发生了分区错误，节点A、B组成旧配置中的“大多数”，也就是变更前的3节点集群中的“大多数”，那么这时的领导者（节点A）依旧是领导者。</p><p>另一方面，节点C和新节点D、E组成了新配置的“大多数”，也就是变更后的5节点集群中的“大多数”，它们可能会选举出新的领导者（比如节点C）。那么这时，就出现了同时存在2个领导者的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/9e/827a4616e65633015c1f77f3425b1a9e.jpg?wh=1142*293\" alt=\"\"></p><p>如果出现了2个领导者，那么就违背了“领导者的唯一性”的原则，进而影响到集群的稳定运行。你要如何解决这个问题呢？也许有的同学想到了一个解决方法。</p><p>因为我们在启动集群时，配置是固定的，不存在成员变更，在这种情况下，Raft的领导者选举能保证只有一个领导者。也就是说，这时不会出现多个领导者的问题，那我可以先将集群关闭再启动新集群啊。也就是先把节点A、B、C组成的集群关闭，然后再启动节点A、B、C、D、E组成的新集群。</p><p><strong>在我看来，这个方法不可行。</strong> 为什么呢？因为你每次变更都要重启集群，意味着在集群变更期间服务不可用，肯定不行啊，太影响用户体验了。想象一下，你正在玩王者荣耀，时不时弹出一个对话框通知你：系统升级，游戏暂停3分钟。这体验糟糕不糟糕？</p><p>既然这种方法影响用户体验，根本行不通，那到底怎样解决成员变更的问题呢？<strong>最常用的方法就是单节点变更。</strong></p><h2>如何通过单节点变更解决成员变更的问题？</h2><p>单节点变更，就是通过一次变更一个节点实现成员变更。如果需要变更多个节点，那你需要执行多次单节点变更。比如将3节点集群扩容为5节点集群，这时你需要执行2次单节点变更，先将3节点集群变更为4节点集群，然后再将4节点集群变更为5节点集群，就像下图的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/55/7e2b1caf3c68c7900d6a7f71e7a3a855.jpg?wh=1142*790\" alt=\"\"></p><p>现在，让我们回到开篇的思考题，看看如何用单节点变更的方法，解决这个问题。为了演示方便，我们假设节点A是领导者：</p><p><img src=\"https://static001.geekbang.org/resource/image/25/40/25cabfbad4627ec4c39b8d32a567d440.jpg?wh=1142*670\" alt=\"\"></p><p>目前的集群配置为[A, B, C]，我们先向集群中加入节点D，这意味着新配置为[A, B, C, D]。成员变更，是通过这么两步实现的：</p><ul>\n<li>第一步，领导者（节点A）向新节点（节点D）同步数据；</li>\n<li>第二步，领导者（节点A）将新配置[A, B, C, D]作为一个日志项，复制到新配置中所有节点（节点A、B、C、D）上，然后将新配置的日志项应用（Apply）到本地状态机，完成单节点变更。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7f/07/7f687461706f3b226d79a55b618e4c07.jpg?wh=1142*486\" alt=\"\"></p><p>在变更完成后，现在的集群配置就是[A, B, C, D]，我们再向集群中加入节点E，也就是说，新配置为[A, B, C, D, E]。成员变更的步骤和上面类似：</p><ul>\n<li>第一步，领导者（节点A）向新节点（节点E）同步数据；</li>\n<li>第二步，领导者（节点A）将新配置[A, B, C, D, E]作为一个日志项，复制到新配置中的所有节点（A、B、C、D、E）上，然后再将新配置的日志项应用到本地状态机，完成单节点变更。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7d/43/7d3b5da84db682359ab82579fdd2e243.jpg?wh=1142*427\" alt=\"\"></p><p>这样一来，我们就通过一次变更一个节点的方式，完成了成员变更，保证了集群中始终只有一个领导者，而且集群也在稳定运行，持续提供服务。</p><p>我想说的是，在正常情况下，<strong>不管旧的集群配置是怎么组成的，旧配置的“大多数”和新配置的“大多数”都会有一个节点是重叠的。</strong> 也就是说，不会同时存在旧配置和新配置2个“大多数”：</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/b8/5fe7c8d90857737d7314263eae2166b8.jpg?wh=1142*906\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/4a/27/4a00b7e1b89922cd9f785c6f153aca27.jpg?wh=1142*899\" alt=\"\"></p><p>从上图中你可以看到，不管集群是偶数节点，还是奇数节点，不管是增加节点，还是移除节点，新旧配置的“大多数”都会存在重叠（图中的橙色节点）。</p><p>需要你注意的是，在分区错误、节点故障等情况下，如果我们并发执行单节点变更，那么就可能出现一次单节点变更尚未完成，新的单节点变更又在执行，导致集群出现2个领导者的情况。</p><p>如果你遇到这种情况，可以在领导者启动时，创建一个NO_OP日志项（也就是空日志项），只有当领导者将NO_OP日志项应用后，再执行成员变更请求。这个解决办法，你记住就可以了，可以自己在课后试着研究下。具体的实现，可参考Hashicorp Raft的源码，也就是runLeader()函数中：</p><pre><code>noop := &amp;logFuture{\n        log: Log{\n               Type: LogNoop,\n        },\n}\nr.dispatchLogs([]*logFuture{noop})\n</code></pre><p>当然，有的同学会好奇“联合共识”，在我看来，因为它难以实现，很少被Raft实现采用。比如，除了Logcabin外，未见到其他常用Raft实现采用了它，所以这里我就不多说了。如果你有兴趣，可以自己去阅读论文，加深了解。</p><h2>内容小结</h2><p>以上就是本节课的全部内容了，本节课我主要带你了解了成员变更的问题和单节点变更的方法，我希望你明确这样几个重点。</p><ol>\n<li>\n<p>成员变更的问题，主要在于进行成员变更时，可能存在新旧配置的2个“大多数”，导致集群中同时出现两个领导者，破坏了Raft的领导者的唯一性原则，影响了集群的稳定运行。</p>\n</li>\n<li>\n<p>单节点变更是利用“一次变更一个节点，不会同时存在旧配置和新配置2个‘大多数’”的特性，实现成员变更。</p>\n</li>\n<li>\n<p>因为联合共识实现起来复杂，不好实现，所以绝大多数Raft算法的实现，采用的都是单节点变更的方法（比如Etcd、Hashicorp Raft）。其中，Hashicorp Raft单节点变更的实现，是由Raft算法的作者迭戈·安加罗（Diego Ongaro）设计的，很有参考价值。</p>\n</li>\n</ol><p>除此之外，考虑到本节课是Raft算法的最后一讲，所以在这里，我想多说几句，帮助你更好地理解Raft算法。</p><p>有很多同学把Raft当成一致性算法，其实Raft不是一致性算法而是共识算法，是一个Multi-Paxos算法，实现的是如何就一系列值达成共识。并且，Raft能容忍少数节点的故障。虽然Raft算法能实现强一致性，也就是线性一致性（Linearizability），但需要客户端协议的配合。在实际场景中，我们一般需要根据场景特点，在一致性强度和实现复杂度之间进行权衡。比如Consul实现了三种一致性模型。</p><ul>\n<li>\n<p>default：客户端访问领导者节点执行读操作，领导者确认自己处于稳定状态时（在leader leasing时间内），返回本地数据给客户端，否则返回错误给客户端。在这种情况下，客户端是可能读到旧数据的，比如此时发生了网络分区错误，新领导者已经更新过数据，但因为网络故障，旧领导者未更新数据也未退位，仍处于稳定状态。</p>\n</li>\n<li>\n<p>consistent：客户端访问领导者节点执行读操作，领导者在和大多数节点确认自己仍是领导者之后返回本地数据给客户端，否则返回错误给客户端。在这种情况下，客户端读到的都是最新数据。</p>\n</li>\n<li>\n<p>stale：从任意节点读数据，不局限于领导者节点，客户端可能会读到旧数据。</p>\n</li>\n</ul><p>一般而言，在实际工程中，Consul的consistent就够用了，可以不用线性一致性，只要能保证写操作完成后，每次读都能读到最新值就可以了。比如为了实现幂等操作，我们使用一个编号(ID)来唯一标记一个操作，并使用一个状态字段（nil/done）来标记操作是否已经执行，那么只要我们能保证设置了ID对应状态值为done后，能立即和一直读到最新状态值就可以了，也就通过防止操作的重复执行，实现了幂等性。</p><p>总的来说，Raft算法能很好地处理绝大部分场景的一致性问题，我推荐你在设计分布式系统时，优先考虑Raft算法，当Raft算法不能满足现有场景需求时，再去调研其他共识算法。</p><p>比如我负责过多个QQ后台的海量服务分布式系统，其中配置中心、名字服务以及时序数据库的META节点，采用了Raft算法。在设计时序数据库的DATA节点一致性时，基于水平扩展、性能和数据完整性等考虑，就没采用Raft算法，而是采用了Quorum NWR、失败重传、反熵等机制。这样安排不仅满足了业务的需求，还通过尽可能采用最终一致性方案的方式，实现系统的高性能，降低了成本。</p><h2>课堂思考</h2><p>在最后，我给你留了一个思考题，强领导者模型会限制集群的写性能，那你想想看，有什么办法能突破Raft集群的写性能瓶颈呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"08 | Raft算法（二）：如何复制日志？","id":205784},"right":{"article_title":"10 | 一致哈希算法：如何分群，突破集群的“领导者”限制？","id":207426}},"comments":[{"had_liked":false,"id":183648,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1583106381,"is_pvip":false,"replies":[{"id":"77619","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587231889,"ip_address":"","comment_id":183648,"utype":1}],"discussion_count":5,"race_medal":1,"score":"237806307661","product_id":100046101,"comment_content":"可以参考Kafka的分区和ES的主分片副本分片这种机制，虽然写入只能通过leader写，但每个leader可以负责不同的片区，来提高写入的性能","like_count":55,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485739,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587231889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351284,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9e/74/6f64f4df.jpg","nickname":"congyh","note":"","ucode":"7E084C6563168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195617,"discussion_content":"sharding+replica","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583291632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107398,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e5/c6/11e0f717.jpg","nickname":"苍漠胡杨","note":"","ucode":"E19B685A05F893","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217034,"discussion_content":"hyperledge的orderer的raft的多channel就是这么用的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585495860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548404,"discussion_content":"分片恐怕不行，因为raft是基于日志apply的，你日志分片了就不连续了，除非基于业务做sharding","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643184946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589989,"avatar":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","nickname":"Eclipse","note":"","ucode":"E7EB0BA99FA644","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198206,"discussion_content":"相当于多主多副本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583487628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183637,"user_name":"XHH","can_delete":false,"product_type":"c1","uid":1179952,"ip_address":"","ucode":"3EF89099982977","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/30/cb3a729e.jpg","comment_is_top":false,"comment_ctime":1583090650,"is_pvip":false,"replies":[{"id":"76369","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586376591,"ip_address":"","comment_id":183637,"utype":1}],"discussion_count":1,"race_medal":0,"score":"139022044122","product_id":100046101,"comment_content":"1、leader可以合并请求<br>2、leader提交日志和日志复制RPC两个步骤可以并行和批量处理 <br>3、leader可以并发和异步对所有follower 并发日志复制，同时可以利用pipeline的方式提高效率<br>4、每个节点启动多个raft实例，对请求进行hash或者range后，让每个raft实例负责部分请求<br>","like_count":32,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485736,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586376591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213745,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588549292,"is_pvip":false,"replies":[{"id":"79463","content":"加一颗星:)，C如果属于旧配置，它无法得到D的投票，因为旧配置不包括D，所以C不会成为leader。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588783422,"ip_address":"","comment_id":213745,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83192927916","product_id":100046101,"comment_content":"韩老师您好~ (A,B,C) 三个旧配置A是leader，然后加入D，然后网络分区为(A,B)和(C,D), 那么A依旧赢得大多数选票而是leader.  C因为分区，所以也开始发起选举，赢得了C、D的选票，注意哦~ ，C也是旧配置哦~ 那么C不也就成为leader了么?  所以不就出现了2个leader了么?  也就是D作为新配置固然无法成为leader，但是C作为旧配置还是可以成为leader的呀~ 希望您能指点一下. 但是我说一下我的看法，我的看法是——您一开始在&quot;成员变更的问题&quot;中举的例子貌似有点问题——应该是C、D、E中的D或者E会成为新配置中的leader而不是C节点会成为新配置中的leader，因为C的（旧）配置中原本就没有D、E，它即便获取到D、E的选票也不能认为自己得票过半，这样就能解释的通了。","like_count":20,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493860,"discussion_content":"加一颗星:)，C如果属于旧配置，它无法得到D的投票，因为旧配置不包括D，所以C不会成为leader。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588783422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284975,"discussion_content":"分区之后，\n如果C使用旧的配置，旧的配置中不包含D，所以C没法选举成为leader\n如果C已经是新的配置，成员数量为4，选举需要有3个投票，所以C也没法选举成为leader；","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1592704002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208172,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1587291397,"is_pvip":false,"replies":[{"id":"77702","content":"加一颗星:)，问题1：集群一般放在同一个机房中的，公网存在网络抖动、消息丢失等问题，网络分区，更准确的说，是指任意数量的消息丢失或者高延迟，这在同一个机房内，也是无法避免，比如进程崩溃了、机器高负载等。问题2：不会，旧领导者A会退位，在leader lease（比如Hashicorp raft的默认值是500ms）到期后，而且即使在leader lease期间，旧领导者也无法执行领导者的功能，因为他无法联系上大多数节点，所以，这时，准确来说，只有一个领导者，B，也就是，不存在脑裂问题的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587301162,"ip_address":"","comment_id":208172,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61716833541","product_id":100046101,"comment_content":"韩老师，有个问题，其实在实际生产环境中，是不是应该尽量避免网络分区才是重点，例如把某个集群的机器，尽量放在同一个内网中。举个我想到的例子，ABC三个节点，A在网络1，BC在网络2，初始化时，A成为了领导者，后来在网络2的单节点D加入集群，此时正好出现网络分区，BCD重新重新选举，得到B是领导者，后面网络通讯恢复了，这样即使采用单节点变更的方式，不也同样会出现了脑裂了吗？不知道我的理解正不正确，求解答。","like_count":15,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492368,"discussion_content":"加一颗星:)，问题1：集群一般放在同一个机房中的，公网存在网络抖动、消息丢失等问题，网络分区，更准确的说，是指任意数量的消息丢失或者高延迟，这在同一个机房内，也是无法避免，比如进程崩溃了、机器高负载等。问题2：不会，旧领导者A会退位，在leader lease（比如Hashicorp raft的默认值是500ms）到期后，而且即使在leader lease期间，旧领导者也无法执行领导者的功能，因为他无法联系上大多数节点，所以，这时，准确来说，只有一个领导者，B，也就是，不存在脑裂问题的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587301162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184136,"user_name":"黄海峰","can_delete":false,"product_type":"c1","uid":1275357,"ip_address":"","ucode":"E9340719BC96B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dd/9ead6e69.jpg","comment_is_top":false,"comment_ctime":1583234045,"is_pvip":false,"replies":[{"id":"77616","content":"加一颗星:)，如果主节点是静态配置的，宕机了怎么办呢？选择哪个节点作为从节点呢？副本数据不一致，怎么处理呢？共识算法，实现的是强一致性和分区容错能力。场景决定了系统形态。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587229448,"ip_address":"","comment_id":184136,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44532907005","product_id":100046101,"comment_content":"老师，这种共识算法只是用于p2p的分布式系统吧，像hadoop&#47;spark这些大数据分布式系统都是主从模式，部署就决定了谁是master，根本就不用这些共识算法了。。。相对比主从模式更可靠更可控啊，因为没有这些这么复杂的选举逻辑。。除了区块链，其他系统用p2p是不是有什么不可取代的必要性呢？","like_count":11,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485903,"discussion_content":"加一颗星:)，如果主节点是静态配置的，宕机了怎么办呢？选择哪个节点作为从节点呢？副本数据不一致，怎么处理呢？共识算法，实现的是强一致性和分区容错能力。场景决定了系统形态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587229448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1296635,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c8/fb/1e282c37.jpg","nickname":"Jungggle","note":"","ucode":"CEF098BDED51BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237947,"discussion_content":"那master的ha呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587199356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314009,"user_name":"达子不一般","can_delete":false,"product_type":"c1","uid":1315527,"ip_address":"","ucode":"A91C8DB45184F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","comment_is_top":false,"comment_ctime":1632799188,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"35992537556","product_id":100046101,"comment_content":"我的理解：单节点变更是如何解决同时出现多个主的<br><br>每次仅扩(缩)容一个节点，扩(缩)容多个节点需进行多次(非并行)。<br><br>- 扩容<br><br>1. 假设当前集群有2n+1个节点<br><br>多数是n+1，扩容一个节点到2n+2，多数是n+2，按旧集群多数n+1和新集群多数n+2相加，共需要2n+3个节点才能选举出2个主，扩容后的节点数只有2n+2,所以不会出现多个主<br><br>2. 假设当前集群有2n个节点<br><br>多数是n+1，扩容一个节点到2n+1，多数是n+1，按旧集群多数n+1和新集群多数n+1相加，共需要2n+2个节点才能选举出2个主，扩容后的节点数只有2n+1,所以不会出现多个主<br><br>- 缩容<br><br>1. 假设当前集群有2n+1个节点<br><br>多数是n+1，缩容一个节点到2n，多数是n+1，按旧集群多数n+1和新集群多数n+1相加，共需要2n+2个节点才能选举出2个主，缩容后的节点数只有2n,所以不会出现多个主<br><br>2. 假设当前集群有2n个节点<br><br>多数是n+1，缩容一个节点到2n-1，多数是n，按旧集群多数n+1和新集群多数n相加，共需要2n+1个节点才能选举出2个主，缩容后的节点数只有2n-1,所以不会出现多个主","like_count":8,"discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554032,"discussion_content":"厉害厉害\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646191191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245332,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erBa6myQhVACFTGc25OA7BbF5YHMvkoMMWfzWBBMNS68ZdrytJ4N5fakhbp0NWXicicP8MsxMVicVX4A/132","nickname":"呵呵哒小朋友","note":"","ucode":"91BF4116573A6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533302,"discussion_content":"终于明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637834611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184215,"user_name":"朱东旭","can_delete":false,"product_type":"c1","uid":1242338,"ip_address":"","ucode":"C48DD620A63868","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/e2/dbc4a5f2.jpg","comment_is_top":false,"comment_ctime":1583248128,"is_pvip":false,"replies":[{"id":"71428","content":"在中文中，很多资料将Consensus翻译成了一致性，和Consistency同义，其实应该翻译成共识，共识算法是实现一系列值的共识的。可以这么理解，但基于Raft，能实现强一致性，也就是线性一致性。后续规划了一篇，会具体说说这些内容。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583389323,"ip_address":"","comment_id":184215,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31648019200","product_id":100046101,"comment_content":"一致性算法与共识算法的区别是啥，raft以领导者的日志为准，不就是保证了数据的最终一致吗。","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485931,"discussion_content":"在中文中，很多资料将Consensus翻译成了一致性，和Consistency同义，其实应该翻译成共识，共识算法是实现一系列值的共识的。可以这么理解，但基于Raft，能实现强一致性，也就是线性一致性。后续规划了一篇，会具体说说这些内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583389323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067667,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/93/8986789d.jpg","nickname":"C生万物","note":"","ucode":"1D6DC5C5055C1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287211,"discussion_content":"所以规划的哪一篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593400954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183867,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1583150666,"is_pvip":false,"replies":[{"id":"71208","content":"关于Raft的一些高级特性，比如客户端协议、uncommited log丢失、指令重复执行等，在加餐篇，规划了一讲，统一补充，所以这里关于线性一致性没有展开聊。<br>需要客户端协议的配合，才能实现“exactly once”，实现线性一致性，但很多时候，只要指令重复执行，对最终的结果没有影响，就够用了。更多细节，我会在加餐篇，具体说说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583196521,"ip_address":"","comment_id":183867,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27352954442","product_id":100046101,"comment_content":"一般而言，在实际工程中，Consul 的 consistent 就够用了，可以不用线性一致性，<br><br>这句话是不是笔误了？","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485804,"discussion_content":"关于Raft的一些高级特性，比如客户端协议、uncommited log丢失、指令重复执行等，在加餐篇，规划了一讲，统一补充，所以这里关于线性一致性没有展开聊。\n需要客户端协议的配合，才能实现“exactly once”，实现线性一致性，但很多时候，只要指令重复执行，对最终的结果没有影响，就够用了。更多细节，我会在加餐篇，具体说说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583196521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067667,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/93/8986789d.jpg","nickname":"C生万物","note":"","ucode":"1D6DC5C5055C1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287209,"discussion_content":"所以到底是哪篇加餐","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1593400894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2934024,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCM9kqSfdPjnAorrxYBVSBVjknF0ia5uzzskw7YG7Jib99AGN81SSWAZjBRV00g7ZCZap6dxX1RBjQ/132","nickname":"Geek_4ecdbf","note":"","ucode":"6F84C7F5F0B666","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1067667,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/93/8986789d.jpg","nickname":"C生万物","note":"","ucode":"1D6DC5C5055C1C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555410,"discussion_content":"我也在找 是哪篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646896137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287209,"ip_address":""},"score":555410,"extra":""}]},{"author":{"id":1283537,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/d1/7d3834ef.jpg","nickname":"笑若海","note":"","ucode":"A10EF247EE4B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196629,"discussion_content":"\n我也以为作者笔误，应该是default。想不通为啥一般情况下要用consistent这么严格的限制。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583366226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194328,"discussion_content":"我以为consistent模式，就是为了实现读上的线性一致性\n看起来不是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583207398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261949,"user_name":"ξ！","can_delete":false,"product_type":"c1","uid":1636657,"ip_address":"","ucode":"F9797D21EBE10E","user_header":"https://static001.geekbang.org/account/avatar/00/18/f9/31/b75cc6d5.jpg","comment_is_top":false,"comment_ctime":1605585655,"is_pvip":false,"replies":[{"id":"95822","content":"加一颗星:)，1. 向领导者“申请”，由领导者完成节点添加。2. 如何发现领导者，与实现有关，一般来说，可以采用这么两种实现：a. 若非领导者节点接收到“添加节点”请求时，返回领导者信息给新节点，然后新节点重新发送请求；b. 若非领导者节点接收到“添加节点”请求时，将该请求转发给领导者。具体实现，可参考19、20讲的代码。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606401861,"ip_address":"","comment_id":261949,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23080422135","product_id":100046101,"comment_content":"老师，在配置单节点加入的时候，是怎么发现当前集群的呢，难道是在配置的时候就将集群的节点信息写入了么，即便这样的话，当前节点是怎么发现当前集群的领导者呢，在新节点加入的时候他是怎么知道当前集群的领导者的呢，这个发现领导者的过程是新节点主动发起的rpc还是领导者的心跳发现的呢","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509674,"discussion_content":"加一颗星:)，1. 向领导者“申请”，由领导者完成节点添加。2. 如何发现领导者，与实现有关，一般来说，可以采用这么两种实现：a. 若非领导者节点接收到“添加节点”请求时，返回领导者信息给新节点，然后新节点重新发送请求；b. 若非领导者节点接收到“添加节点”请求时，将该请求转发给领导者。具体实现，可参考19、20讲的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606401861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228608,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1592752182,"is_pvip":false,"replies":[{"id":"88129","content":"加一颗星:)，一次单节点变更完成后，再执行下一次单节点变更，是能保证只有一个领导者的正确性的，而引入NO_OP 日志项，是为了确保可能的在执行的单节点变更，已执行完成。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596209712,"ip_address":"","comment_id":228608,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23067588662","product_id":100046101,"comment_content":"NO_OP这个空日志项该怎么理解呢，为了防止出现多个领导者？怎么防止的呢","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499101,"discussion_content":"加一颗星:)，一次单节点变更完成后，再执行下一次单节点变更，是能保证只有一个领导者的正确性的，而引入NO_OP 日志项，是为了确保可能的在执行的单节点变更，已执行完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596209712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2036705,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/13/e1/6939ae4f.jpg","nickname":"knight劉先生","note":"","ucode":"CEE9BFC8D3D969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582368,"discussion_content":"我理解，相当一个 tag 标记，告诉后来者，现在是否有节点正在加入集群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659410137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191365,"user_name":"static","can_delete":false,"product_type":"c1","uid":1138754,"ip_address":"","ucode":"1697966367370E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfReHXMbPaxO890ib9GvY9iciclPIUvaAYMYON4scP7ElXCPVzicghF0SH5HN2LqibYOrdrppC7DuSpw/132","comment_is_top":false,"comment_ctime":1584765900,"is_pvip":false,"replies":[{"id":"77188","content":"加一颗星:)，我后面会做个补充:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586891622,"ip_address":"","comment_id":191365,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23059602380","product_id":100046101,"comment_content":"老师好，想请教一个困扰我很久的关于Raft算法的一个问题。<br>在分布式锁场景下（使用Raft算法），A客户端向leader申请获取锁（set lock），此时leader应用lock信息日志，并RPC复制日志信息给follower节点，此时follower节点还没应用到状态机，leader收到大部分follower成功信息，自己应用了状态机并返回客户端说set lock成功，但此时leader宕机了，其中一个follower变为leader，此时客户端B来获取锁，发现leader没有lock信息（因为follower将lock信息应用到状态机靠leader心跳传递，但刚刚leader宕机了没来得及传递），客户端B此时获取锁也成功了，这不就破坏了锁的同步性吗？Raft算法是如何保证这种场景下的强一致性（线性一致性）？","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488159,"discussion_content":"加一颗星:)，我后面会做个补充:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586891622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284330,"discussion_content":"旧的leader挂掉了，新的leader选举，因为上一步旧的leader挂掉之前已经将日志项复制到半数以上的节点并且这些节点的日志索引要比其他节点要大，所以新的选举出来的leader肯定还是这半数以上的节点中的某一个，之后新leader会将这些节点的日志信息同步状态机（新leader和这些副本间如何将未提交日志同步状态机的细节还不清楚）。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1592495654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1682027,"avatar":"https://static001.geekbang.org/account/avatar/00/19/aa/6b/ab9a072a.jpg","nickname":"对与错","note":"","ucode":"EF55733E3BD78B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532767,"discussion_content":"新选出来的leader是有这个日志项，但是这个日志项可能是未提交状态，也就是说这个日志项不会被客户端查询到，那么对于clientB来说就没有加锁","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637681166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284330,"ip_address":""},"score":532767,"extra":"{\"user_type\":1}"}]},{"author":{"id":1751378,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b9/52/3f0251b9.jpg","nickname":"coldwalker","note":"","ucode":"B86846C0B36DD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545729,"discussion_content":"可以用这种方法解决：新leader当选时，马上append一条空日志，在这条空日志commit前不处理客户端请求。在完整版的raft论文的6.4节中有提到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642045733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246520,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erY7671v8F2joiaBbnCPsbJ6ExFruIMDsd9HRSORsOZgbzBrKibDibU9CRCGghI56hUiampklDWzMFc4A/132","nickname":"华子","note":"","ucode":"91DFE5F9BB8D32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237751,"discussion_content":"锁不是完全匿名的，客户端A和B分别向不同的leader申请锁，锁的ID应该相同，即使新的Leader没有见过这个锁ID，它也可以选择让B等待．退一步来说，旧的leader已经宕机了，按道理Ａ持有的锁已经可以释放．以上是个人猜测．","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587181512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223987,"user_name":"慢动作","can_delete":false,"product_type":"c1","uid":1133945,"ip_address":"","ucode":"62C944F4A4D8AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","comment_is_top":false,"comment_ctime":1591250999,"is_pvip":true,"replies":[{"id":"87277","content":"加一颗星:)，主要在于成员变更是一个过程，比如，C是领导者，它在处理D、E的配置变更，而此时C与A、B发生了分区错误，那么，A、B仍是旧配置，C、D、E组成了新配置，此时新、旧的都满足“大多数”，都会选举出的领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595346712,"ip_address":"","comment_id":223987,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14476152887","product_id":100046101,"comment_content":"老师好，有个疑问，集群加入节点都是通过leader处理的，那文章开头3节点到5节点，为什么a还是旧配置，c却是新配置？","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497325,"discussion_content":"加一颗星:)，主要在于成员变更是一个过程，比如，C是领导者，它在处理D、E的配置变更，而此时C与A、B发生了分区错误，那么，A、B仍是旧配置，C、D、E组成了新配置，此时新、旧的都满足“大多数”，都会选举出的领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595346712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285239,"discussion_content":"我也有这个问题； 如果加入前后A 作为leader 一直未变，那边分区之后可能出现的两个leader的案例应该为：ADE和BC 出现网络分区；\nA D E： 因为A 是leader，应该是最先应用新配置，并同步到其它节点；3个节点在新配置下leader 有效；\nB C：老的两个follower 节点，还是认可3个节点的集群配置；在分区后可选出新的leader","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592788704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334999,"discussion_content":"你这种是A与BC出现分区的场景吧，文章说的是AB与C分区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608045517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285239,"ip_address":""},"score":334999,"extra":""}]}]},{"had_liked":false,"id":186736,"user_name":"刘学","can_delete":false,"product_type":"c1","uid":1309769,"ip_address":"","ucode":"98716A686F1D6C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/49/bd2ff785.jpg","comment_is_top":false,"comment_ctime":1583915560,"is_pvip":false,"replies":[{"id":"77785","content":"加一颗星:)，是的。但在实现上，还有另外一种方式，也是Diego Ongaro设计的，先变更配置，新节点不具有投票权（领导者选举、日志提交），领导者向新节点同步日志，新节点的日志追赶上后，赋予新节点投票权。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587335534,"ip_address":"","comment_id":186736,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14468817448","product_id":100046101,"comment_content":"韩老师你好，我想到的可以解决因为强领导者导致的写性能瓶颈的办法是多分片，这样多个raft流程并发执行，不同的分片的master落在不同的机器上就可以很好的解决这个问题。在加入新节点后的第一步时，主节点向新加入的节点同步数据，那就意味着主节点需要支持向非本组成员的节点同步数据的功能对么？","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486857,"discussion_content":"加一颗星:)，是的。但在实现上，还有另外一种方式，也是Diego Ongaro设计的，先变更配置，新节点不具有投票权（领导者选举、日志提交），领导者向新节点同步日志，新节点的日志追赶上后，赋予新节点投票权。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587335534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411868,"discussion_content":"先变更配置不具有投票权？如果最初是三节点，这时第四节点加进来，然后header挂了，不参与投票就达不到大多数选不出新header了啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636023079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185269,"user_name":"Infinite_gao","can_delete":false,"product_type":"c1","uid":1235607,"ip_address":"","ucode":"9FBFEDED8790A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","comment_is_top":false,"comment_ctime":1583550257,"is_pvip":false,"replies":[{"id":"71599","content":"上面那个配置变更，是联合共识，在实际中使用的少，文中介绍的是常用的，也是Raft作者后来设计补充的一个方法，单节点变更。<br>新加入的节点，先同步日志，日志复制rpc。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583591100,"ip_address":"","comment_id":185269,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14468452145","product_id":100046101,"comment_content":"老师讲的深入浅出，可是有个疑问，为什么配置从老的阶段到中间阶段再到新阶段的这个过程没有进行阐述呢，配置的自动转换过程对于理解细节非常重要。C(old)-&gt;C(old,new)-&gt;C(new)。<br>还有就是新加入的节点开始是通过什么类型的消息与原leader通信的，通信的信息细节是什么，是选举请求吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486309,"discussion_content":"上面那个配置变更，是联合共识，在实际中使用的少，文中介绍的是常用的，也是Raft作者后来设计补充的一个方法，单节点变更。\n新加入的节点，先同步日志，日志复制rpc。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583591100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235607,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","nickname":"Infinite_gao","note":"","ucode":"9FBFEDED8790A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200011,"discussion_content":"谢谢老师的回复，新加入的节点，先同步日志，日志复制rpc。\n我的理解是：\n1. 新节点的在加入前就写好了配置文件(里面包含现在系统的leader+follower, 不确定这时有没有new的信息)。\n2.新节点加入启动时，连接leader(这一步的请求是什么类型？通信的细节是什么？)\n3.连接成功建立后，leader开始想新节点同步日志，用的日志复制rpc(这一步的疑问是，在日志同步的过程中，新节点开始被标记成正常节点吗？能参与投票选取吗？还有就是新的配置信息是在最后同步过去的吗？)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583645264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207886,"user_name":"华子","can_delete":false,"product_type":"c1","uid":1246520,"ip_address":"","ucode":"91DFE5F9BB8D32","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erY7671v8F2joiaBbnCPsbJ6ExFruIMDsd9HRSORsOZgbzBrKibDibU9CRCGghI56hUiampklDWzMFc4A/132","comment_is_top":false,"comment_ctime":1587206706,"is_pvip":false,"replies":[{"id":"77593","content":"加一颗星:)，问题1：配置是指集群各节点地址信息的集合，加入新节点时，是需要知道新节点的地址信息的。问题2：一次加入两台或以上，会出现2个“大多数”，也就是可能同时出现2个领导者，联合共识算法可以解决这个问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587219199,"ip_address":"","comment_id":207886,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10177141298","product_id":100046101,"comment_content":"1. 所谓的＂配置＂就是指集群中的节点要知道新加入节点的IP地址等信息吗？<br>2. 而之所以不能一次性加入两台或以上的节点，是因为无法保证＂同时＂加入？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492267,"discussion_content":"加一颗星:)，问题1：配置是指集群各节点地址信息的集合，加入新节点时，是需要知道新节点的地址信息的。问题2：一次加入两台或以上，会出现2个“大多数”，也就是可能同时出现2个领导者，联合共识算法可以解决这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587219199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284985,"discussion_content":"同时加入2个节点，可能出现多个leader的例子：\n原始集群有 ABC 3个节点，加入DE节点， A为leader，出现分区； ADE和 BC；\n分区后，A使用新配置：ADE 3个达到多数，A还是leader； \nBC 使用旧配置，2个能选举出新的leader；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592705196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186155,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1583767543,"is_pvip":false,"replies":[{"id":"77614","content":"加一颗星:)，领导者必须有“大多数”选票，才能当选，如果不存在2个“大多数”，就无法产生2个领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587227809,"ip_address":"","comment_id":186155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173702135","product_id":100046101,"comment_content":"老师  麻烦解答下 如果旧配置的大多数和新的大多数数量相等 并且有重叠的 这时候为什么不会产生两个领导者呢 是因为只能选重叠的做领导者吗?如果新的大多数数量大于旧配置 ,领导者就会在新的大多数中产生吗?","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486648,"discussion_content":"加一颗星:)，领导者必须有“大多数”选票，才能当选，如果不存在2个“大多数”，就无法产生2个领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587227809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185921,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1583724932,"is_pvip":false,"replies":[{"id":"77636","content":"加一颗星:)，问题1：所谓“重叠”，是指不会同时存在2个“大多数”。问题2：这个情况是需要避免和保证不出现的，具体方法是联合共识、单节点变更。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587239827,"ip_address":"","comment_id":185921,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10173659524","product_id":100046101,"comment_content":"我想说的是，在正常情况下，不管旧的集群配置是怎么组成的，旧配置的“大多数”和新配置的“大多数”都会有一个节点是重叠的。 <br>-----------------------------------------------------------<br>对于老师上述说法 和 配图有点不理解 为何会发生这样的情况？ 以及非正常情况下出现两个主节点呢 需要怎么处理？","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486553,"discussion_content":"加一颗星:)，问题1：所谓“重叠”，是指不会同时存在2个“大多数”。问题2：这个情况是需要避免和保证不出现的，具体方法是联合共识、单节点变更。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587239827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218892,"discussion_content":"我也没有看明白","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585711836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027117,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/2d/f067545d.jpg","nickname":"未明","note":"","ucode":"FC39B1593EF62C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254235,"discussion_content":"- 节点数 -> 多数节点数 -> 剩余节点数\n- 2n -> n + 1 -> n -1\n- 2n + 1 -> n + 1 -> n (上一状态的多数节点数 n + 1 比 剩余节点数多1)\n- 2n + 2 -> n + 2 -> n  (上一状态的多数节点数 n + 1 比 剩余节点数多1)\n- ...\n- 也就是说在要求多数一致和存在分区的情况下，不可能出现两个领导者节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588302407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185915,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1583724409,"is_pvip":false,"replies":[{"id":"76360","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586374058,"ip_address":"","comment_id":185915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173659001","product_id":100046101,"comment_content":"提升写性能需要单机限制，修改为多主节点形式，分片负载均衡。如redis集群方式 jedis-cluster 使用一致性hash分片负载 提升读写能力。 ","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486549,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586374058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184121,"user_name":"EidLeung","can_delete":false,"product_type":"c1","uid":1120259,"ip_address":"","ucode":"0F16DDB4779D1F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/03/ef0efcc4.jpg","comment_is_top":false,"comment_ctime":1583228575,"is_pvip":false,"replies":[{"id":"71316","content":"第一句话，说的是如何保证每次都能读取到最新值。第二句话，说的是，在很多场景中，我们不需要线性一致性，能保证写操作完成后，每次读都能读到最新值就可以了，比如，指令重复执行，对最终的结果没有影响。因为线性一致性实现复杂，需要客户端协议的配合，才能实现“exactly once”，实现线性一致性。<br>关于Raft的一些高级特性，比如客户端协议、uncommited log丢失、指令重复执行等，在加餐篇，规划了一讲，所以这里关于线性一致性没有展开聊。更多细节，我会在加餐篇，具体说说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583289546,"ip_address":"","comment_id":184121,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10173163167","product_id":100046101,"comment_content":"老师，有个地方没懂：<br>“consistent：客户端访问领导者节点执行读操作，领导者在和大多数节点确认自己仍是领导者之后返回本地数据给客户端，否则返回错误给客户端。在这种情况下，客户端读到的都是最新数据。”和“一般而言，在实际工程中，Consul 的 consistent 就够用了，可以不用线性一致性，只要能保证写操作完成后，每次读都能读到最新值就可以了。”这两句话有点矛盾，没懂。<br>第一句说读数据时需要向节点确认自己是领导者，应该是客户端读的时候领导者再向其他节点确认自己还是领导者，确认完成后再返回客户端数据。<br>第二句说，写的时候确认是领导者（写完成），读的时候就是最新的值。<br>这样第二句话在“写后出现网络分区导致已经选取了新的领导者，新的领导者又写入了数据，而旧的领导者还没退位的情况，此时读的数据应该不是最新的”（这个应该是default模型啊：写的时候保证写入，读的时候直接读）。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485894,"discussion_content":"第一句话，说的是如何保证每次都能读取到最新值。第二句话，说的是，在很多场景中，我们不需要线性一致性，能保证写操作完成后，每次读都能读到最新值就可以了，比如，指令重复执行，对最终的结果没有影响。因为线性一致性实现复杂，需要客户端协议的配合，才能实现“exactly once”，实现线性一致性。\n关于Raft的一些高级特性，比如客户端协议、uncommited log丢失、指令重复执行等，在加餐篇，规划了一讲，所以这里关于线性一致性没有展开聊。更多细节，我会在加餐篇，具体说说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583289546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195497,"discussion_content":"同疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583284344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183848,"user_name":"振超","can_delete":false,"product_type":"c1","uid":1103529,"ip_address":"","ucode":"D55B896810DBBF","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/a9/ffd70fdc.jpg","comment_is_top":false,"comment_ctime":1583145115,"is_pvip":false,"replies":[{"id":"76367","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586376381,"ip_address":"","comment_id":183848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173079707","product_id":100046101,"comment_content":"既然一个 raft 集群只能有一个 leader 节点，那么可以缩小集群的粒度，即将一个大的 raft 集群分成若干个 group，这样每个 group 范围内都有一个能够支持写操作的 leader 节点，整体上就有多个节点能够响应写操作，从而提升写性能，上层可以采取路由策略对数据进行分片。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485800,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586376381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296698,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1623118841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918086137","product_id":100046101,"comment_content":"简单推一下逐个添加成员的正确性：<br>原本集群有n个节点，添加1个新节点，此时出现网络分区<br>假设x为旧配置，y为新配置，有x+y=n+1<br>（1）如果x&gt;n&#47;2+1（旧配置选的出主节点），由x=n+1-y，得出n&#47;2&gt;y，不满足y&gt;(n+1)&#47;2+1，说明新配置中是选不出主的<br>（2）如果y&gt;(n+1)&#47;2+1（新配置选的出主节点），由y=n+1-x，得出(n-1)&#47;2&gt;x，不满足x&gt;n&#47;2+1，说明旧配置中是选不出主的<br>","like_count":1},{"had_liked":false,"id":201071,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1585711966,"is_pvip":false,"replies":[{"id":"75985","content":"加一颗星:)，方法1可以考虑的，方法2，不太合适，日志复制和应用日志到状态机本身就是分开的，通过心跳同步数据，有延迟，太慢了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586189573,"ip_address":"","comment_id":201071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880679262","product_id":100046101,"comment_content":"不知道可不可行<br>1、批量写，合并请求<br>2、优化二阶段提交，不等到大多数成功。用心跳同步数据","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490231,"discussion_content":"加一颗星:)，方法1可以考虑的，方法2，不太合适，日志复制和应用日志到状态机本身就是分开的，通过心跳同步数据，有延迟，太慢了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586189573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183717,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1583119720,"is_pvip":false,"replies":[{"id":"77618","content":"加一颗星:)，分集群，multi raft是个方法。另外，这里不涉及到事务，事务是具有ACID特性的操作序列，与共识算法是没关系的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587231873,"ip_address":"","comment_id":183717,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5878087016","product_id":100046101,"comment_content":"课后思考的问题是个好问题，貌似没有通用可行的办法，必须具体问题具体分析了，有个思路是使用数据分区以分散负载的办法，这个办法目前许多大型系统也在用，但是因为事务不能夸分区，这个办法限制性会比较大。<br>期望看到老师给出的方案。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485759,"discussion_content":"加一颗星:)，分集群，multi raft是个方法。另外，这里不涉及到事务，事务是具有ACID特性的操作序列，与共识算法是没关系的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587231873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183651,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1583107300,"is_pvip":true,"replies":[{"id":"76368","content":"加一颗星:)，有的，这些是实现相关的，以Hashicorp raft为例，在17讲中有介绍。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586376529,"ip_address":"","comment_id":183651,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5878074596","product_id":100046101,"comment_content":"Raft 算法的日志项是不是可以分为多种类型，比如：数据日志项，配置日志项，空日志项.......这样的话,日志项里面是不是有个类型字段可以进行区分的？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485741,"discussion_content":"加一颗星:)，有的，这些是实现相关的，以Hashicorp raft为例，在17讲中有介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586376529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336036,"user_name":"Danta","can_delete":false,"product_type":"c1","uid":1069235,"ip_address":"","ucode":"69E257F9CF500F","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/b3/084e2dde.jpg","comment_is_top":false,"comment_ctime":1645860717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645860717","product_id":100046101,"comment_content":"no_op是不是类似于一个barrier","like_count":1},{"had_liked":false,"id":332392,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1643198063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643198063","product_id":100046101,"comment_content":"希望作者还能看到回答一下：评论里你说到“引入NO_OP 日志项，是为了确保可能的在执行的单节点变更，已执行完成”，请问NO_OP 日志项是如何确保节点变更执行完成的？是强行NO_OP 日志项apply到所有节点上才允许下一次节点变更的操作吗？NO_OP 日志项跟一般的日志项的处理是不是不同的，一般的日志项是否是允许leader累积一定数量再一次过发给follower的？并且follower也不需要马上apply","like_count":0},{"had_liked":false,"id":324702,"user_name":"Geek_wyq","can_delete":false,"product_type":"c1","uid":2848612,"ip_address":"","ucode":"E20CC23E665879","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIShQFfZkuPib0K09UHAGnsGMiaAWhYX9pxogWIH68swS4foNkgwHTKZcNablWI50S4fn856LnI88OQ/132","comment_is_top":false,"comment_ctime":1638571533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638571533","product_id":100046101,"comment_content":"变更时为什么会产生“新旧节点的两个大多数”？节点变更的详细过程是什么？，所谓“重叠”具体指的是什么，老师能不能讲详细一点，没有接触过raft，感觉云里雾里","like_count":0},{"had_liked":false,"id":320197,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1636116275,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636116275","product_id":100046101,"comment_content":"问两个问题，希望作者回答下，感谢。<br>1.配置应用到所有节点的状态机上的两个步骤，如果执行的同时有新的数据写入，那怎么处理？是否还是要阻塞才能完成？另外这时是得复制到所有节点上才apply而不是像一般日志复制到majority就apply是吧？<br>2.“在分区错误、节点故障等情况下，如果并发执行单节点变更，导致集群出现 2 个领导者的情况。”能举个例子吗？我怎么感觉应该没影响啊。","like_count":0,"discussions":[{"author":{"id":2700925,"avatar":"https://static001.geekbang.org/account/avatar/00/29/36/7d/eab0d26a.jpg","nickname":"丹尼尔-雪碧","note":"","ucode":"F098396F4B7500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554709,"discussion_content":"一个结点只要加入集群后，无论是否故障都是集群的一份子。节点的分区，故障都只会影响主节点的选举。举个例子，当前节点总数为6.，【A、B、C、D、E，F】，A为master，如果出现network partition，【A、B、C】和【D、E、F】，那么原本的A因为没有得到大多数follower的回应（大于或等于4个），那么（即使仍然在lease期）A其实是不能继续“服务”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646561745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310352,"user_name":"杨赛军","can_delete":false,"product_type":"c1","uid":1050917,"ip_address":"","ucode":"12F314F9E6F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/25/2db95c79.jpg","comment_is_top":false,"comment_ctime":1630628589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630628589","product_id":100046101,"comment_content":"tikv 的raft group架构值得学习","like_count":0},{"had_liked":false,"id":300667,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1625298971,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625298971","product_id":100046101,"comment_content":"可以通过保证已知配置节点个数一般以上保证不出现两个leader，比如 5 个节点， 可能组成  A 3个节点，B 两个节点， 因为B 没有到达 5&#47;2 s，所以B 不能出现leader ，这样有问题吗","like_count":0},{"had_liked":false,"id":297518,"user_name":"高峰","can_delete":false,"product_type":"c1","uid":1146082,"ip_address":"","ucode":"45C4C494400498","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/e2/7654211f.jpg","comment_is_top":false,"comment_ctime":1623594205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623594205","product_id":100046101,"comment_content":"打个广告:由于业务发展需要，字节tiktok招存储方向工程师&#47;负责人，base深圳。有兴趣的同学欢迎加微信(YFtogther)聊。","like_count":0},{"had_liked":false,"id":296693,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1623117581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623117581","product_id":100046101,"comment_content":"新加的节点D由leader A同步数据后，再把集群全部节点[A,B,C,D]同步到其他节点，那应该可以有这个推论吧：原leader A和新节点D的配置总是新配置","like_count":0},{"had_liked":false,"id":268780,"user_name":"王伟建","can_delete":false,"product_type":"c1","uid":1019576,"ip_address":"","ucode":"320CC5B6CE063F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/b8/31671fba.jpg","comment_is_top":false,"comment_ctime":1608347281,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1608347281","product_id":100046101,"comment_content":"老师，有个问题想确认一下：<br>文中的单节点变更，应该只是说针对集群处于正常情况下才能保证只有一个领导者的情况的吧？我的理解是，在集群处于分区错误的情况下，不管是正常单节点变更，还是并发的单节点变更，应该都不能保证只有一个领导者的。<br>另外关于分区错误，这种场景在现实中会发生的很频繁吗?如果发生了分区错误，对于raft算法来说，它是基于上节课所说的，关于任期编号的【候选人或者领导者发现自己的编号比其它节点编号小，便会立即恢复成跟随者状态】这条规则来解决分区恢复时的新领导选举的吗？","like_count":0,"discussions":[{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412246,"discussion_content":"第一个问题，上面的例子已经写的很清晰了，为什么不能一次增加两个节点，就是因为网络分区下会可能造成两个leader的产生，所以才采用每次只能增加一个节点，所以每次变更一个节点是不会有问题的，即便在网络分区的环境下。\n第二个问题，分区的情况主要是看网络环境，例如你整个集群物理跨度大的肯定几率就比较大了，但系统运行正常的情况是90%。raft主要是为了强一致性，要保证数据的百分百正确，不能说发生错误几率小就不用去关注小概率事件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636116955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268085,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1608047551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608047551","product_id":100046101,"comment_content":"我觉得应该要强调一下旧配置和旧配置的大多数，不然看着容易晕。比如[A、B、C]新增D。A是leader，C、D与A、B出现分区，由于A、B都能与leader A通信，所以它们并不用额外做什么，那A和B继续用旧配置：[A、B、C]，其大多数也就是[A、B]（[A、C]或者[B、C]也行，但C失联了，所以用[A、B]）。C因为和D在一起，所以C和D都用新配置：[A、B、C、D]，新配置的大多数为[A、C、D]或者[B、C、D]，由于C只能与D联系到，故无法得到3张票，从而C、D这个分区选不出主","like_count":0},{"had_liked":false,"id":265678,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1397271,"ip_address":"","ucode":"B62BEA525A64A1","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/17/083d67fb.jpg","comment_is_top":false,"comment_ctime":1606979329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606979329","product_id":100046101,"comment_content":"韩老师您好，Raft协议里有两个重要的参数，HeartTimeout，ElectionTimeOut，应该如何正确理解这两个参数？？<br><br>网上大部分理解是说，hearttimeout指定的是leader心跳频率，electiontimeout指定的是多久收不到消息变成候选人状态。<br><br>但是我怎么感觉heart指定的是多久收不到心跳就会变成候选人，而election指定的是，若此间内选举没成功，将重新发起选举请求。","like_count":0},{"had_liked":false,"id":264047,"user_name":"加油加油","can_delete":false,"product_type":"c1","uid":2032995,"ip_address":"","ucode":"4326347ED6E532","user_header":"https://static001.geekbang.org/account/avatar/00/1f/05/63/dd59ad18.jpg","comment_is_top":false,"comment_ctime":1606319242,"is_pvip":false,"replies":[{"id":"95821","content":"加一颗星:)，会的，节点故障不会影响节点是否在集群中，只要将节点加入到了集群中，它就一直是这个集群中的成员。节点故障只会影响“哪个节点是领导者”，而领导者选举，能保证集群中只有一个领导者的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606400990,"ip_address":"","comment_id":264047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606319242","product_id":100046101,"comment_content":"老师您好，请教一个问题，如果在集中式架构的分布式集群中如果出现了节点故障该怎么恢复，正常来说可能会触发新一轮的选主，但是这个节点恢复正常之后还有机会加入到集群当中吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510401,"discussion_content":"加一颗星:)，会的，节点故障不会影响节点是否在集群中，只要将节点加入到了集群中，它就一直是这个集群中的成员。节点故障只会影响“哪个节点是领导者”，而领导者选举，能保证集群中只有一个领导者的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606400990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256423,"user_name":"ξ！","can_delete":false,"product_type":"c1","uid":1636657,"ip_address":"","ucode":"F9797D21EBE10E","user_header":"https://static001.geekbang.org/account/avatar/00/18/f9/31/b75cc6d5.jpg","comment_is_top":false,"comment_ctime":1603621194,"is_pvip":false,"replies":[{"id":"95914","content":"加一颗星:)，Raft是共识算法，因为它是为了解决一系列连续值的共识而设计的。基于Raft共识算法，我们能实现一致性（比如线性一致性）。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606555888,"ip_address":"","comment_id":256423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603621194","product_id":100046101,"comment_content":"raft是共识算法而不是一致性算法是不是因为在日志复制需要伴随下一次心跳发生的时候一起传输，在客户端发送值到应用上值之间数据不是准确的,,,不知道这么说对不对","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508014,"discussion_content":"加一颗星:)，Raft是共识算法，因为它是为了解决一系列连续值的共识而设计的。基于Raft共识算法，我们能实现一致性（比如线性一致性）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606555888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248828,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1600327310,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1600327310","product_id":100046101,"comment_content":"为什么没有noop会导致两个领导者？新的配置如果没有得到多数派同意不是还没有commit吗？","like_count":0,"discussions":[{"author":{"id":2799111,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epq2AfJ26y9tJJXcpqPeXSbogecjhxGYT5guIZqmqlMPPOkfnIWX8bukBBZicQ63G6LArKia3u5WrHQ/132","nickname":"Geek_c28984","note":"","ucode":"4EB1613293DDE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572800,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652962730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241622,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597373200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597373200","product_id":100046101,"comment_content":"可以参考MySQL的分库分表,利用一个字段,进行相关的集群拆分操作,然后在不同集群上进行读和写操作","like_count":0},{"had_liked":false,"id":241261,"user_name":"bin的技术小屋","can_delete":false,"product_type":"c1","uid":1049047,"ip_address":"","ucode":"478603A9AB13B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/d7/f835081c.jpg","comment_is_top":false,"comment_ctime":1597228787,"is_pvip":false,"replies":[{"id":"95927","content":"加一颗星:)，如果需要实现强一致性，那么当follower节点接收到读请求时，应该拒绝响应数据，并返回领导者地址信息给客户端，客户端重试访问领导者节点来请求数据，可结合19、20讲的程序代码来理解。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606565276,"ip_address":"","comment_id":241261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597228787","product_id":100046101,"comment_content":"老师，这几讲都是再讲raft协议写相关的内容，能否讲下怎么处理读请求的？现在理解了写的过程，但是对于如何保证读的一致性还是不明白。因为客户端写请求，leader节点等到大部分follower复制日志rpc响应成功后，就响应客户端了，但是这时并不是所有的follower节点复制了最新的日志项，也不是所有的follower和leader日志项保持一致。如果在这一瞬间，客户端发起读请求，正好访问到日志落后的follower 节点上，raft是怎么处理的？如何保证强一致性","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503686,"discussion_content":"加一颗星:)，如果需要实现强一致性，那么当follower节点接收到读请求时，应该拒绝响应数据，并返回领导者地址信息给客户端，客户端重试访问领导者节点来请求数据，可结合19、20讲的程序代码来理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606565276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240216,"user_name":"EveryDayIsNew","can_delete":false,"product_type":"c1","uid":1316926,"ip_address":"","ucode":"776B81EF6830FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","comment_is_top":false,"comment_ctime":1596790538,"is_pvip":false,"replies":[{"id":"95949","content":"加一颗星:)，单节点变更，是一次变更一个节点，所以这两个节点不是一次性加进来的，是两次变更。“图示”未列举通讯细节，节点变更只能在领导者节点上执行，即新节点向领导者请求加入集群。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606573220,"ip_address":"","comment_id":240216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596790538","product_id":100046101,"comment_content":"那个A,B,C , 新增两个D，E的分区没看明白，这种两个节点是怎么一次性加进来的，加入新节点应该是给leader进行报告通信吧，然后leader再把新节点信息同步给集群的其他节点吧，按图貌似主节点A是不知道有新节点加入的；还是新节点加入可以直接给任何一个节点发假如申请，不是强主模型都应该找leader吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503377,"discussion_content":"加一颗星:)，单节点变更，是一次变更一个节点，所以这两个节点不是一次性加进来的，是两次变更。“图示”未列举通讯细节，节点变更只能在领导者节点上执行，即新节点向领导者请求加入集群。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606573220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238881,"user_name":"林万伟","can_delete":false,"product_type":"c1","uid":1188304,"ip_address":"","ucode":"099CC4B8CC5B1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/d0/aa5422f2.jpg","comment_is_top":false,"comment_ctime":1596355321,"is_pvip":false,"replies":[{"id":"92466","content":"加一颗星:)，不能，但这是合理的，因为新配置项并未复制到大多数节点上；访问新领导者A执行单节点变更。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602599269,"ip_address":"","comment_id":238881,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596355321","product_id":100046101,"comment_content":"老师，关于单节点变更，我有个疑问：<br> 假如一开始是3个节点A、B、C，C为leader，这时候加入新节点D，C节点发送配置变更通知后，挂掉了，此时D是新配置[A,B,C,D]，但是B和C节点都是旧配置[A,B,C]，那么此时A节点发起选举投票，并且当选，那么之前C节点作为leader同步的新配置更新[A,B,C,D],是否还能在A和B上面生效呢？<br>如果发生这种情况，后续节点是如何添加进去的呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502880,"discussion_content":"加一颗星:)，不能，但这是合理的，因为新配置项并未复制到大多数节点上；访问新领导者A执行单节点变更。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602599269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230286,"user_name":"Story","can_delete":false,"product_type":"c1","uid":1238865,"ip_address":"","ucode":"433F18FA8E28F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/51/9a357c5b.jpg","comment_is_top":false,"comment_ctime":1593336958,"is_pvip":false,"replies":[{"id":"88132","content":"加一颗星:)，C可以成为领导者，比如，C等待领导者心跳超时后，它成为候选人，请求A、B、C投票给自己，那么，在得到B、C的选票后，它将成为领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596211129,"ip_address":"","comment_id":230286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593336958","product_id":100046101,"comment_content":"我想请教下节点移除时的选举问题，假如开始时有[A、B、C、D]的配置，A为领导者，现在想移除节点D，首先领导者A向其他节点发起配置[A、B、C]变更请求，假设C成功接受到了新配置[A、B、C]，这时领导者A发生了故障，那么A、B的配置应该是[A、B、C、D]，这种情况好像新旧配置都无法选举领导者，是这么回事吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499826,"discussion_content":"加一颗星:)，C可以成为领导者，比如，C等待领导者心跳超时后，它成为候选人，请求A、B、C投票给自己，那么，在得到B、C的选票后，它将成为领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596211129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207797,"user_name":"华子","can_delete":false,"product_type":"c1","uid":1246520,"ip_address":"","ucode":"91DFE5F9BB8D32","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erY7671v8F2joiaBbnCPsbJ6ExFruIMDsd9HRSORsOZgbzBrKibDibU9CRCGghI56hUiampklDWzMFc4A/132","comment_is_top":false,"comment_ctime":1587181750,"is_pvip":false,"replies":[{"id":"77594","content":"加一颗星:)，AddVoter是Hashicorp Raft的函数吗？如果是，可以的，实现了单节点变更，是安全的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587219526,"ip_address":"","comment_id":207797,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587181750","product_id":100046101,"comment_content":"这一节说的是成员变更时发生网络分区导致出现两个领导者，那么走正常的流程AddVoter不可以吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492242,"discussion_content":"加一颗星:)，AddVoter是Hashicorp Raft的函数吗？如果是，可以的，实现了单节点变更，是安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587219526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195593,"user_name":"李","can_delete":false,"product_type":"c1","uid":1119312,"ip_address":"","ucode":"5C0FAA211F2E26","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","comment_is_top":false,"comment_ctime":1585201499,"is_pvip":true,"replies":[{"id":"75996","content":"说的是如何更改集群配置，比如，将一个3节点Raft集群扩容为5节点Raft集群。你这样想象下，如果是你，你该如何做成员变更呢？并保证集群中不会同时出现多个领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586195639,"ip_address":"","comment_id":195593,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585201499","product_id":100046101,"comment_content":"单节点成员变更讲的是啥？看不明白","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489122,"discussion_content":"说的是如何更改集群配置，比如，将一个3节点Raft集群扩容为5节点Raft集群。你这样想象下，如果是你，你该如何做成员变更呢？并保证集群中不会同时出现多个领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586195639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191419,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1584772080,"is_pvip":false,"replies":[{"id":"76012","content":"加一颗星:)，这属于一种情况，可以这么理解。另外，加入d节点后，是4节点集群了，“大多数”是3，需要c、b、d选举一个领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586201866,"ip_address":"","comment_id":191419,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584772080","product_id":100046101,"comment_content":"我在想，为啥新旧大多数，只会有一个大多数。我觉得重叠的是领导者节点。比如a,b,c节点加入d个节点，领导者节点是a。然后a和cb发生分区故障。c,b会发生选举其中一个是领导者，然后a发现自己不满足大多数，变成追随者，节点增加失败，这样理解对不对？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488169,"discussion_content":"加一颗星:)，这属于一种情况，可以这么理解。另外，加入d节点后，是4节点集群了，“大多数”是3，需要c、b、d选举一个领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586201866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185610,"user_name":"Infinite_gao","can_delete":false,"product_type":"c1","uid":1235607,"ip_address":"","ucode":"9FBFEDED8790A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","comment_is_top":false,"comment_ctime":1583645335,"is_pvip":false,"replies":[{"id":"77784","content":"加一颗星:)，问题1：新节点，需要先将地址信息发送给领导者，由领导者将新节点加入到集群中。问题2：这个可以自己实现，比如，在19、20讲，我们实现的是http协议。问题3：先同步数据，此时节点不具有投票权，日志追赶上后，再变更配置。<br>","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587334361,"ip_address":"","comment_id":185610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583645335","product_id":100046101,"comment_content":"谢谢老师的回复，新加入的节点，先同步日志，日志复制rpc。<br>我的理解是：<br>1. 新节点的在加入前就写好了配置文件(里面包含现在系统的leader+follower, 不确定这时有没有new的信息)。<br>2.新节点加入启动时，连接leader(这一步的请求是什么类型？通信的细节是什么？)<br>3.连接成功建立后，leader开始想新节点同步日志，用的日志复制rpc(这一步的疑问是，在日志同步的过程中，新节点开始被标记成正常节点吗？能参与投票选取吗？还有就是新的配置信息是在最后同步过去的吗？)。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486437,"discussion_content":"加一颗星:)，问题1：新节点，需要先将地址信息发送给领导者，由领导者将新节点加入到集群中。问题2：这个可以自己实现，比如，在19、20讲，我们实现的是http协议。问题3：先同步数据，此时节点不具有投票权，日志追赶上后，再变更配置。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587334361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185097,"user_name":"Infinite_gao","can_delete":false,"product_type":"c1","uid":1235607,"ip_address":"","ucode":"9FBFEDED8790A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","comment_is_top":false,"comment_ctime":1583481645,"is_pvip":false,"replies":[{"id":"77775","content":"加一颗星:）,问题1：可以访问任意节点，如果节点是跟随者，比如，可以返回领导者地址信息给新节点，然后新节点访问领导者，并将地址信息发送给领导者。问题2：是的，接收新节点的地址信息时，执行单节点变更，将新节点加入到集群中。更多信息，可以参考19、20讲的分析或实现，来辅助理解。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587311546,"ip_address":"","comment_id":185097,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583481645","product_id":100046101,"comment_content":"老师好，我有以下细节问题不清楚，还希望您能帮忙解惑。<br>1. 新节点加入时，如何与leader节点取得通信，也是先作为候选者发送选取请求（term=0），然后会收到leader节点的回复，从而知道了leader节点的信息？<br>2. 配置信息是什么时候leader节点进行跟新的，是发现了第一步中有新的候选节点想它发送了选举请求后，在响应候选节点leader节点信息的同时，leader节点更新了配置信息？<br>   还是新加入的节点在加入前自身就配置好了新的配置信息（3-&gt;4），然后在与leader节点连接上后，是leader节点pull过来，还是新加入的节点push过去。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486250,"discussion_content":"加一颗星:）,问题1：可以访问任意节点，如果节点是跟随者，比如，可以返回领导者地址信息给新节点，然后新节点访问领导者，并将地址信息发送给领导者。问题2：是的，接收新节点的地址信息时，执行单节点变更，将新节点加入到集群中。更多信息，可以参考19、20讲的分析或实现，来辅助理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587311546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184950,"user_name":"bc","can_delete":false,"product_type":"c1","uid":1009801,"ip_address":"","ucode":"3899698EA715EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/89/173601c5.jpg","comment_is_top":false,"comment_ctime":1583457617,"is_pvip":false,"replies":[{"id":"76192","content":"加一颗星:)，跟随者，可以返回领导者地址信息给客户端，然后客户端直接访问领导者；也可以扮演“代理”的角色，转发请求给领导者。如何实现，取决于系统设计，更多信息，可以参考19、20讲。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286515,"ip_address":"","comment_id":184950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583457617","product_id":100046101,"comment_content":"一般服务器集群收到的客户端的请求都是均等的吧，客户端也并不知道集群中哪个是领导，如果是follower收到客户端的请求，该如何处理？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486183,"discussion_content":"加一颗星:)，跟随者，可以返回领导者地址信息给客户端，然后客户端直接访问领导者；也可以扮演“代理”的角色，转发请求给领导者。如何实现，取决于系统设计，更多信息，可以参考19、20讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184291,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1583284429,"is_pvip":false,"replies":[{"id":"76364","content":"加一颗星:)，不会，因为新配置包含4个节点（也就是A、B、C、D），“大多数”是3，C、D两个节点是无法选举出一个领导者的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586375601,"ip_address":"","comment_id":184291,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1583284429","product_id":100046101,"comment_content":"有个疑问<br>集群开始（A,B,C）,然后加入D,这个时候如果出现分区故障，C和A,B断开了，<br>这时加入D,会不会导致<br>旧配置中（A,B,C）中只有A和B了，然后C和新加入的D组成了新配置(C,D)<br>新配置中（C,D）中只有C,D,然后根据随机时间的方式进行选举，是不是依旧会出现两个领导者呀","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485964,"discussion_content":"加一颗星:)，不会，因为新配置包含4个节点（也就是A、B、C、D），“大多数”是3，C、D两个节点是无法选举出一个领导者的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586375601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179952,"avatar":"https://static001.geekbang.org/account/avatar/00/12/01/30/cb3a729e.jpg","nickname":"XHH","note":"","ucode":"3EF89099982977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195768,"discussion_content":"c和d才两个节点，选举不成功的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583306022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179952,"avatar":"https://static001.geekbang.org/account/avatar/00/12/01/30/cb3a729e.jpg","nickname":"XHH","note":"","ucode":"3EF89099982977","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335002,"discussion_content":"不是的，主要原因是新配置是ABCD，不是CD。2个节点要选可以选成功，C投自己，D投C，获取到100%的支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608046447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195768,"ip_address":""},"score":335002,"extra":""}]}]},{"had_liked":false,"id":184156,"user_name":"NICK","can_delete":false,"product_type":"c1","uid":1069035,"ip_address":"","ucode":"0B7A9C3DF8DED8","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/eb/3165ae4c.jpg","comment_is_top":false,"comment_ctime":1583239706,"is_pvip":false,"replies":[{"id":"71429","content":"是否会同时出现2个领导者的关键在于，是否同时存在2个大多数。比如5节点集群，不管如何分区，都不会同时选举出2个领导者的，因为，不存在2个大多数（也就是6个节点），但可能会出现，老领导者的lease还没超时，新领导者已经选举出来了的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583389558,"ip_address":"","comment_id":184156,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1583239706","product_id":100046101,"comment_content":"当由于网络原因出现分区的时候，例如【A，B，C，D，E】集群,A是领导者，由于网络原因分成两个区【A,B,C】和【D，E】，一段时间后网络恢复，这样是否会出现两个领导者？如果是那该如何处理呢？如果不是，那选举或同步的步骤是怎样的呢？一直不明吧这个地方，望老师可以指点一下，谢谢","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485912,"discussion_content":"是否会同时出现2个领导者的关键在于，是否同时存在2个大多数。比如5节点集群，不管如何分区，都不会同时选举出2个领导者的，因为，不存在2个大多数（也就是6个节点），但可能会出现，老领导者的lease还没超时，新领导者已经选举出来了的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583389558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235607,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","nickname":"Infinite_gao","note":"","ucode":"9FBFEDED8790A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198142,"discussion_content":"这种情况D,E那个分区永远不会选出领导者，因为根据配置，这个分区的节点哪一个也不能得到大多数的选票","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1583480511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257235,"discussion_content":"我觉得层主想问的应该是【A,B,C,D,E】A是leader，分区为【A,B】和【C、D、E】吧~ 那么A因为在其leader lease期间无法联系上半数以上的节点是会stepdown的，也就是退位. 而【C、D、E】会选出新王——例如C。如果在A的leader lease内就分区恢复了，那么因为A的term比C的term小，所以A也会变成follower","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588551053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195503,"discussion_content":"是不是说raft算法中，集群中是不会出现两个领导者的，因为最终会根据日志，根据任期最终决定最终的主是谁，而集群扩充中出现的两个领导者，在当分区恢复时，集群会决定一个唯一的领导者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583284591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396579,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4f/63/8fc3b65e.jpg","nickname":"减肥的小熊熊","note":"","ucode":"E13D1CBB89DF7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194817,"discussion_content":"分区后的【D、E】分区会重新进行选举，此时【A、B、C】和【D、E】两个集群的Term是不同的，如果分区恢复，则会根据Term进行日志一致性恢复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583243562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396579,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4f/63/8fc3b65e.jpg","nickname":"减肥的小熊熊","note":"","ucode":"E13D1CBB89DF7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257234,"discussion_content":"D、E选不出leader的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588550914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194817,"ip_address":""},"score":257234,"extra":""}]}]},{"had_liked":false,"id":184064,"user_name":"郭行知","can_delete":false,"product_type":"c1","uid":1856845,"ip_address":"","ucode":"082C7E34FE6847","user_header":"https://static001.geekbang.org/account/avatar/00/1c/55/4d/2b2834a9.jpg","comment_is_top":false,"comment_ctime":1583216677,"is_pvip":false,"replies":[{"id":"71286","content":"如果熟悉Golang的话，推荐Hashicorp Raft，也可以直接研究Logcabin。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583252599,"ip_address":"","comment_id":184064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583216677","product_id":100046101,"comment_content":"如果我要看具体的 raft 实现，您更推荐哪个开源代码库？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485874,"discussion_content":"如果熟悉Golang的话，推荐Hashicorp Raft，也可以直接研究Logcabin。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583252599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184005,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1583202935,"is_pvip":false,"replies":[{"id":"71287","content":"不会同时存在2个大多数的，也就是不会同时有2个领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583252637,"ip_address":"","comment_id":184005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583202935","product_id":100046101,"comment_content":"老师好，想问一下consistent模式下，领导者在和大多数节点确认自己仍是领导者之后返回本地数据给客户端，如果发生分区，那么会不会有2个领导者都收到自己分区的大多数节点确认，那么返回数据给客户端呢？怎么避免这种情况的。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485850,"discussion_content":"不会同时存在2个大多数的，也就是不会同时有2个领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583252637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183968,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1583188771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583188771","product_id":100046101,"comment_content":"为了强一致性，leader应该有个读写锁，有可能在某些情况读锁去除，写锁保留可以优化性能。","like_count":0},{"had_liked":false,"id":183929,"user_name":"分目","can_delete":false,"product_type":"c1","uid":1514976,"ip_address":"","ucode":"AEAD7F19C2FCC3","user_header":"https://static001.geekbang.org/account/avatar/00/17/1d/e0/7e7ef7c2.jpg","comment_is_top":false,"comment_ctime":1583163297,"is_pvip":false,"replies":[{"id":"77617","content":"加一颗星:)，我来举一个例子，A、B、C三节点，A是领导者，现在加入2个节点D、E，发生了分区错误，分割成了A、B和C、D、E，因为旧配置的大多数（<br>A、B），这时A继续是领导者；新配置大多数（C、D、E）选举出了新的领导者，比如C，这时就同时存在2个领导者了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587231479,"ip_address":"","comment_id":183929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583163297","product_id":100046101,"comment_content":"老师，你好，有个疑问，raft算法的领导者是超过半数的选举同意就可以成为领导者，那剩余节点到达随机超时时间后，也应该是按照规则成为跟随者（故障节点，故障恢复之后，也应该成为跟随者）；那么在节点增加时候，同时增加多个节点有可能导致出现两个领导者（文中提到可能存在旧的节点配置跟新增加节点配置一致的情况，导致新配置也选举出一个领导者），其中旧的那个节点配置跟它之前的领导者配置不一致的原因是什么?是刚好之前节点故障，在增加节点的时候恢复了么?希望老师解答，谢谢！","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485825,"discussion_content":"加一颗星:)，我来举一个例子，A、B、C三节点，A是领导者，现在加入2个节点D、E，发生了分区错误，分割成了A、B和C、D、E，因为旧配置的大多数（\nA、B），这时A继续是领导者；新配置大多数（C、D、E）选举出了新的领导者，比如C，这时就同时存在2个领导者了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587231479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183889,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1583155650,"is_pvip":false,"replies":[{"id":"76366","content":"加一颗星:)，其实你后面的一句话，就是一种解决办法，是实现。那么，咱们反过来理解，如果没有这些实现，是不是问题就会发生，也就是问题是存在的呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586376355,"ip_address":"","comment_id":183889,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583155650","product_id":100046101,"comment_content":"&quot;在分区错误、节点故障等情况下，如果我们并发执行单节点变更，那么就可能出现一次单节点变更尚未完成，新的单节点变更又在执行，导致集群出现 2 个领导者的情况。&quot; <br>这个是为什么呢？单节点变更第一步不就是请求领导者复制数据嘛，当有两个单节点变成同时发起的时候，领导者应该可以发觉并且制止吧","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485811,"discussion_content":"加一颗星:)，其实你后面的一句话，就是一种解决办法，是实现。那么，咱们反过来理解，如果没有这些实现，是不是问题就会发生，也就是问题是存在的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586376355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257242,"discussion_content":"一次变更未完成，另一次变更又开始执行——一波未平一波又起，那么你想一下这种情况，3节点集群，并发执行3次单节点变更，那么实际上最后6个节点都只知道这个集群只有4个节点，那么一旦分区为3+3，岂不是有可能脑裂?","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588552199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}