{"id":472927,"title":"32｜编译原理（上）：手写一个迷你Vue 3 Compiler的入门原理","content":"<p>你好，我是大圣。</p><p>前面我们用了四讲，学习了Vue在浏览器中是如何执行的，你可以参考上一讲结尾的Vue执行全景图来回顾一下。在Vue中，组件都是以虚拟DOM的形式存在，加载完毕之后注册effect函数。这样组件内部的数据变化之后，用Vue的响应式机制做到了通知组件更新，内部则使用patch函数实现了虚拟DOM的更新，中间我们也学习了位运算、最长递增子序列等算法。</p><p>这时候你肯定还有一个疑问，那就是虚拟DOM是从哪来的？我们明明写的是template和JSX，这也是吃透Vue源码最后一个难点：Vue中的Compiler。</p><p>下图就是Vue核心模块依赖关系图，reactivity和runtime我们已经剖析完毕，迷你版本的代码你可以在<a href=\"https://github.com/shengxinjing/weiyouyi\">GitHub</a>中看到。今天开始我将用三讲的内容，给你详细讲解一下Vue在编译的过程中做了什么。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/15/59f10ba0b6a6ed5fb956ca05016fde15.jpg?wh=1888x982\" alt=\"图片\"></p><p>编译原理也属于计算机中的一个重要学科，Vue的compiler是在Vue场景下的实现，目的就是实现template到render函数的转变。</p><p>我们第一步需要先掌握编译原理的基本概念。Vue官方提供了模板编译的<a href=\"https://vue-next-template-explorer.netlify.app/#%7B%22src%22%3A%22%3Cdiv%20id%3D%5C%22app%5C%22%3E%5Cn%20%20%20%20%3Cdiv%20%40click%3D%5C%22()%3D%3Econsole.log(xx)%5C%22%20%3Aid%3D%5C%22name%5C%22%3E%7B%7Bname%7D%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3Ch1%20%3Aname%3D%5C%22title%5C%22%3E%E7%8E%A9%E8%BD%ACvue3%3C%2Fh1%3E%5Cn%20%20%20%20%3Cp%20%3E%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%3C%2Fp%3E%5Cn%3C%2Fdiv%3E%5Cn%22%2C%22ssr%22%3Afalse%2C%22options%22%3A%7B%22mode%22%3A%22module%22%2C%22filename%22%3A%22Foo.vue%22%2C%22prefixIdentifiers%22%3Afalse%2C%22hoistStatic%22%3Atrue%2C%22cacheHandlers%22%3Atrue%2C%22scopeId%22%3Anull%2C%22inline%22%3Afalse%2C%22ssrCssVars%22%3A%22%7B%20color%20%7D%22%2C%22compatConfig%22%3A%7B%22MODE%22%3A3%7D%2C%22whitespace%22%3A%22condense%22%2C%22bindingMetadata%22%3A%7B%22TestComponent%22%3A%22setup-const%22%2C%22setupRef%22%3A%22setup-ref%22%2C%22setupConst%22%3A%22setup-const%22%2C%22setupLet%22%3A%22setup-let%22%2C%22setupMaybeRef%22%3A%22setup-maybe-ref%22%2C%22setupProp%22%3A%22props%22%2C%22vMySetupDir%22%3A%22setup-const%22%7D%2C%22optimizeBindings%22%3Afalse%7D%7D\">在线演示</a>。下图左侧代码是我们写的template，右侧代码就是compiler模块解析城的render函数，我们今天的任务就是能够实现一个迷你的compiler。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/33/23/3326bd4f65d0714c4920e6d37e1be923.png?wh=1920x608\" alt=\"图片\"></p><h2>整体流程</h2><p>上述转化的过程可以分为下面的示意图几步来实现。</p><p>首先，代码会被解析成一个对象，这个对象有点像虚拟DOM的概念，用来描述template的代码关系，这个对象就是抽象语法树（简称AST，后面我们细讲）。然后通过transform模块对代码进行优化，比如识别Vue中的语法，静态标记、最后通过generate模块生成最终的render函数。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/6d/9aaa7b24f6b9ff0cef5f70151ddd926d.jpg?wh=1920x1747\" alt=\"图片\"></p><p>理清了流程，我们动手完成具体代码实现。用下面的代码就能实现上述的流程图里的内容。其中parse函数负责生成抽象语法树AST，transform函数负责语义转换，generate函数负责最终的代码生成。</p><pre><code class=\"language-javascript\">\nfunction compiler(template) {\n  const ast = parse(template);\n  transform(ast)\n  const code = generate(ast)\n  return code\n}\n\nlet template = `&lt;div id=\"app\"&gt;\n  &lt;div @click=\"()=&gt;console.log(xx)\" :id=\"name\"&gt;{{name}}&lt;/div&gt;\n  &lt;h1 :name=\"title\"&gt;玩转vue3&lt;/h1&gt;\n  &lt;p &gt;编译原理&lt;/p&gt;\n&lt;/div&gt;\n`\n\nconst renderFunction = compiler(template)\nconsole.log(renderFunction)\n</code></pre><p>我们先来看下parse函数如何实现。template转成render函数是两种语法的转换，这种代码转换的需求其实计算机的世界中非常常见。比如我们常用的Babel，就是把ES6的语法转成低版本浏览器可以执行的代码。</p><h2>tokenizer的迷你实现</h2><p>首先，我们要对template进行词法分析，把模板中的&lt;div&gt;,  @click, {{}}等语法识别出来，转换成一个个的token。你可以理解为把template的语法进行了分类，这一步我们叫tokenizer。</p><p>下面的代码就是tokenizer的迷你实现。我们使用tokens数组存储解析的结果，然后对模板字符串进行循环，在template中，&lt; &gt; / 和空格都是关键的分隔符，如果碰见&lt;字符，我们需要判断下一个字符的状态。如果是字符串我们就标记tagstart；如果是/，我们就知道是结束标签，标记为tagend，最终通过push方法把分割之后的token存储在数组tokens中返回。</p><pre><code class=\"language-javascript\">function tokenizer(input) {\n  let tokens = []\n  let type = ''\n  let val = ''\n  // 粗暴循环\n  for (let i = 0; i &lt; input.length; i++) {\n    let ch = input[i]\n    if (ch === '&lt;') {\n      push()\n      if (input[i + 1] === '/') {\n        type = 'tagend'\n      } else {\n        type = 'tagstart'\n      }\n    } if (ch === '&gt;') {\n      if(input[i-1]=='='){\n        //箭头函数\n      }else{\n        push()\n        type = \"text\"\n        continue\n      }\n    } else if (/[\\s]/.test(ch)) { // 碰见空格截断一下\n      push()\n      type = 'props'\n      continue\n    }\n    val += ch\n  }\n  return tokens\n\n  function push() {\n    if (val) {\n      if (type === \"tagstart\") val = val.slice(1) // &lt;div =&gt; div\n      if (type === \"tagend\") val = val.slice(2)   //  &lt;/div  =&gt; div\n      tokens.push({\n        type,\n        val\n      })\n      val = ''\n    }\n  }\n}\n</code></pre><p>实现了上面的代码，我们就得到了解析之后的token数组。</p><h2>生成抽象语法树</h2><p>下面的数组中，我们分别用tagstart、props tagend和text标记，用它们标记了全部内容。然后下一步我们需要把这个数组按照标签的嵌套关系转换成树形结构，这样才能完整地描述template标签的关系。</p><pre><code class=\"language-javascript\">[\n&nbsp; { type: 'tagstart', val: 'div' },\n&nbsp; { type: 'props', val: 'id=\"app\"' },\n&nbsp; { type: 'tagstart', val: 'div' },\n&nbsp; { type: 'props', val: '@click=\"()=console.log(xx)\"' },\n&nbsp; { type: 'props', val: ':id=\"name\"' },\n&nbsp; { type: 'text', val: '{{name}}' },\n&nbsp; { type: 'tagend', val: 'div' },\n&nbsp; { type: 'tagstart', val: 'h1' },\n&nbsp; { type: 'props', val: ':name=\"title\"' },\n&nbsp; { type: 'text', val: '玩转vue3' },\n&nbsp; { type: 'tagend', val: 'h1' },\n&nbsp; { type: 'tagstart', val: 'p' },\n&nbsp; { type: 'text', val: '编译原理' },\n&nbsp; { type: 'tagend', val: 'p' },\n&nbsp; { type: 'tagend', val: 'div' }\n</code></pre><p>然后我们分析token数组，看看它是如何转化成一个体现语法规则的树形结构的。<br>\n就像我们用虚拟DOM描述页面DOM结构一样，我们使用树形结构描述template的语法，这个树我们称之为抽象语法树，简称AST。</p><p>下面的代码中我们用parse函数实现AST的解析。过程是这样的，首先我们使用一个AST对象作为根节点。然后通过walk函数遍历整个tokens数组，根据token的类型不同，生成不同的node对象。最后根据tagend的状态来决定walk的递归逻辑，最终实现了整棵树的构建。</p><pre><code class=\"language-javascript\">function parse(template) {\n  const tokens = tokenizer(template)\n  let cur = 0\n  let ast = {\n    type: 'root',\n    props:[],\n    children: []\n  }\n  while (cur &lt; tokens.length) {\n    ast.children.push(walk())\n  }\n  return ast\n\n  function walk() {\n    let token = tokens[cur]\n    if (token.type == 'tagstart') {\n      let node = {\n        type: 'element',\n        tag: token.val,\n        props: [],\n        children: []\n      }\n      token = tokens[++cur]\n      while (token.type !== 'tagend') {\n        if (token.type == 'props') {\n          node.props.push(walk())\n        } else {\n          node.children.push(walk())\n        }\n        token = tokens[cur]\n      }\n      cur++\n      return node\n    }\n    if (token.type === 'tagend') {\n      cur++\n      // return token\n    }\n    if (token.type == \"text\") {\n      cur++\n      return token\n    }\n    if (token.type === \"props\") {\n      cur++\n      const [key, val] = token.val.replace('=','~').split('~')\n      return {\n        key,\n        val\n      }\n    }\n  }\n}\n</code></pre><p>上面的代码会生成抽象语法树AST，这个树的结构如下面代码所示，通过type和children描述整个template的结构。</p><pre><code class=\"language-javascript\">{\n&nbsp; \"type\": \"root\",\n&nbsp; \"props\": [],\n&nbsp; \"children\": [\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; \"type\": \"element\",\n&nbsp; &nbsp; &nbsp; \"tag\": \"div\",\n&nbsp; &nbsp; &nbsp; \"props\": [\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"key\": \"id\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"\\\"app\\\"\"\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; \"children\": [\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"element\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"tag\": \"div\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"props\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"key\": \"@click\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"\\\"()\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"key\": \":id\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"\\\"name\\\"\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"children\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"text\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"{{name}}\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"element\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"tag\": \"h1\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"props\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"key\": \":name\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"\\\"title\\\"\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"children\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"text\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"玩转vue3\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"element\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"tag\": \"p\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"props\": [],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"children\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"text\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"val\": \"编译原理\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; }\n&nbsp; ]\n}\n</code></pre><h2>语义分析和优化</h2><p>有了抽象语法树之后，我们还要进行语义的分析和优化，也就是说，我们要在这个阶段理解语句要做的事。咱们结合例子来理解会更容易。</p><p>在template这个场景下，两个大括号包裹的字符串就是变量，@click就是事件监听。</p><p>下面的代码中我们使用transform函数实现这个功能，这一步主要是理解template中Vue的语法，并且为最后生成的代码做准备。我们使用context对象存储AST所需要的上下文，如果我们用到了变量{{}}，就需要引入toDisplayString函数，上下文中的helpers存储的就是我们用到的工具函数。</p><pre><code class=\"language-javascript\">function transform(ast) {\n  // 优化一下ast\n  let context = {\n    // import { toDisplayString , createVNode , openBlock , createBlock } from \"vue\"\n    helpers:new Set(['openBlock','createVnode']), // 用到的工具函数 \n  }\n  traverse(ast, context)\n  ast.helpers = context.helpers\n}\n</code></pre><p>然后我们使用traverse函数递归整个AST，去优化AST的结构，并且在这一步实现简单的静态标记。</p><p>当节点标记为element的时候，我们递归调用整个AST，内部挨个遍历AST所有的属性，我们默认使用ast.flag标记节点的动态状态。如果属性是@开头的，我们就认为它是Vue中的事件绑定，使用arg.flag|= PatchFlags.EVENT 标记当前节点的事件是动态的，需要计算diff，这部分位运算的知识点我们在上一讲已经学习过了。</p><p>然后冒号开头的就是动态的属性传递，并且把class和style标记了不同的flag。如果都没有命中的话，就使用static:true，标记当前节点位是静态节点。</p><pre><code class=\"language-javascript\">function traverse(ast, context){\n  switch(ast.type){\n    case \"root\":\n      context.helpers.add('createBlock')\n      // log(ast)\n    case \"element\":\n      ast.children.forEach(node=&gt;{\n        traverse(node,context)\n      })\n      ast.flag = 0\n      ast.props = ast.props.map(prop=&gt;{\n        const {key,val} = prop\n        if(key[0]=='@'){\n          ast.flag |= PatchFlags.EVENT // 标记event需要更新\n          return {\n            key:'on'+key[1].toUpperCase()+key.slice(2),\n            val\n          }\n        }\n        if(key[0]==':'){\n          const k = key.slice(1)\n          if(k==\"class\"){\n            ast.flag |= PatchFlags.CLASS // 标记class需要更新\n\n          }else if(k=='style'){\n            ast.flag |= PatchFlags.STYLE // 标记style需要更新\n          }else{\n            ast.flag |= PatchFlags.PROPS // 标记props需要更新\n          }\n          return{\n            key:key.slice(1),\n            val\n          }\n        }\n        if(key.startsWith('v-')){\n          // pass such as v-model \n        }\n        //标记static是true 静态节点\n        return {...prop,static:true} \n      })\n      break\n    case \"text\":\n      // trnsformText\n      let re = /\\{\\{(.*)\\}\\}/g\n      if(re.test(ast.val)){\n        //有{{\n          ast.flag |= PatchFlags.TEXT // 标记props需要更新\n          context.helpers.add('toDisplayString')\n          ast.val = ast.val.replace(/\\{\\{(.*)\\}\\}/g,function(s0,s1){\n            return s1\n          })\n      }else{\n        ast.static = true\n      }\n  }\n}  \n\n</code></pre><p>经过上面的代码标记优化之后，项目在数据更新之后，浏览器计算虚拟dom diff运算的时候，就会执行类似下面的代码逻辑。</p><p><strong>我们通过在compiler阶段的标记，让template产出的虚拟DOM有了更精确的状态，可以越过大部分的虚拟DOM的diff计算，极大提高Vue的运行时效率，这个思想我们日常开发中也可以借鉴学习。</strong></p><pre><code class=\"language-javascript\">if(vnode.static){\n  return \n}\nif(vnode.flag &amp; patchFlag.CLASS){\n  遍历class 计算diff  \n}else if(vnode.flag &amp; patchFlag.STYLE){\n  计算style的diff\n}else if(vnode.flag &amp; patchFlag.TEXT){\n  计算文本的diff\n}\n</code></pre><p>接下来，我们基于优化之后的AST生成目标代码，也就是generate函数要做的事：遍历整个AST，拼接成最后要执行的函数字符串。</p><p>下面的代码中，我们首先把helpers拼接成import语句，并且使用walk函数遍历整个AST，在遍历的过程中收集helper集合的依赖。最后，在createVnode的最后一个参数带上ast.flag进行状态的标记。</p><pre><code class=\"language-javascript\">function generate(ast) {\n  const {helpers} = ast \n\n  let code = `\nimport {${[...helpers].map(v=&gt;v+' as _'+v).join(',')}} from 'vue'\\n\nexport function render(_ctx, _cache, $props){\n  return(_openBlock(), ${ast.children.map(node=&gt;walk(node))})}`\n\n  function walk(node){\n    switch(node.type){\n      case 'element':\n        let {flag} = node // 编译的标记\n        let props = '{'+node.props.reduce((ret,p)=&gt;{\n          if(flag.props){\n            //动态属性\n            ret.push(p.key +':_ctx.'+p.val.replace(/['\"]/g,'') )\n          }else{\n            ret.push(p.key +':'+p.val )\n          }\n\n          return ret\n        },[]).join(',')+'}'\n        return `_createVnode(\"${node.tag}\",${props}),[\n          ${node.children.map(n=&gt;walk(n))}\n        ],${JSON.stringify(flag)}`\n        break\n      case 'text':\n        if(node.static){\n          return '\"'+node.val+'\"'\n        }else{\n          return `_toDisplayString(_ctx.${node.val})`\n        }\n        break\n    }\n  }\n  return code\n}\n</code></pre><h2>最终实现效果</h2><p>最后我们执行一下代码，看下效果输出的代码。可以看到，它已经和Vue输出的代码很接近了，到此为止，我们也实现了一个非常迷你的Vue compiler，这个产出的render函数最终会和组件的setup函数一起组成运行时的组件对象。</p><pre><code class=\"language-javascript\">function compiler(template) {\n  const ast = parse(template);\n  transform(ast)\n\n  const code = generate(ast)\n  return code\n}\n\nlet template = `&lt;div id=\"app\"&gt;\n  &lt;div @click=\"()=&gt;console.log(xx)\" :id=\"name\"&gt;{{name}}&lt;/div&gt;\n  &lt;h1 :name=\"title\"&gt;玩转vue3&lt;/h1&gt;\n  &lt;p &gt;编译原理&lt;/p&gt;\n&lt;/div&gt;\n`\n\nconst renderFunction = compiler(template)\nconsole.log(renderFunction)\n\n// 下面是输出结果\nimport { openBlock as _openBlock, createVnode as _createVnode, createBlock as _createBlock, toDisplayString as _toDisplayString } from 'vue'\n\nexport function render(_ctx, _cache, $props) {\n  return (_openBlock(), _createVnode(\"div\", { id: \"app\" }), [\n    _createVnode(\"div\", { onClick: \"()=&gt;console.log(xx)\", id: \"name\" }), [\n      _toDisplayString(_ctx.name)\n    ], 24, _createVnode(\"h1\", { name: \"title\" }), [\n      \"玩转vue3\"\n    ], 8, _createVnode(\"p\", {}), [\n      \"编译原理\"\n    ], 0\n  ], 0)\n}\n\n</code></pre><h2>总结</h2><p>我们总结一下今天所学的内容。今天，我带你手写了一个非常迷你的Vue compiler，这也是我们学习框架源码的时候一个比较正确的思路：在去看实际的源码之前，先通过迷你版本的实现，熟悉整个Vue compiler工作的主体流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/0d/ce5d04ae043d4247b4yy03e91353620d.jpg?wh=1920x453\" alt=\"图片\"></p><p>通过这个迷你的compiler，我们学习了编译原理的入门知识：包括parser的实现、AST是什么，AST的语义化优化和代码生成generate模块，这给我们下一讲弄清楚Vue的compiler的核心逻辑打下了良好的理论基础。</p><p>我想提醒你注意一个优化方法，我们实现的迷你compiler也实现了属性的静态标记，通过在编译期间的标记方式，让虚拟DOM在运行时有更多的状态，从而能够精确地控制更新。这种编译时的优化也能够对我们项目开发有很多指引作用，我会在剖析完Vue的compiler之后，在第34讲那里跟你分享一下实战中如何使用编译优化的思想。</p><h2>思考题</h2><p>最后留一个思考题吧，Vue的compiler输出的代码会有几个hoisted开头的变量，这几个变量有什么用处呢？欢迎在评论区分享你的答案，也欢迎你把这一讲分享给你的同事和朋友们，我们下一讲再见！</p>","neighbors":{"left":{"article_title":"31｜虚拟DOM（下）：想看懂虚拟DOM算法，先刷个算法题","id":471017},"right":{"article_title":"33 | 编译原理（中）：Vue Compiler模块全解析","id":473181}},"comments":[{"had_liked":false,"id":346315,"user_name":"陈坚泓","can_delete":false,"product_type":"c1","uid":2461961,"ip_address":"","ucode":"75258EE1BF1C2A","user_header":"https://static001.geekbang.org/account/avatar/00/25/91/09/6f0b987a.jpg","comment_is_top":false,"comment_ctime":1653018100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653018100","product_id":100094401,"comment_content":"const [key, val] = token.val.replace(&#39;=&#39;,&#39;~&#39;).split(&#39;~&#39;)  <br>是不是可以写成<br>const [key, val] = token.val.split(&#39;=&#39;)  <br><br>备注里 &#47;&#47; trnsformText    估计是拼错了 ","like_count":0},{"had_liked":false,"id":341699,"user_name":"Blueberry","can_delete":false,"product_type":"c1","uid":2942699,"ip_address":"","ucode":"072EF4E4A9F447","user_header":"https://static001.geekbang.org/account/avatar/00/2c/e6/eb/58da8565.jpg","comment_is_top":false,"comment_ctime":1649775675,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649775675","product_id":100094401,"comment_content":"template语法需要经过这么一系列的编译，那h函数呢，是经过什么变成了最后的render语法?","like_count":0},{"had_liked":false,"id":333029,"user_name":"名字好长的大林","can_delete":false,"product_type":"c1","uid":1998008,"ip_address":"","ucode":"FF5887D3E5DE9B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7c/b8/b4e0dfb0.jpg","comment_is_top":false,"comment_ctime":1643987257,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1643987257","product_id":100094401,"comment_content":"PatchFlags 这个变量没有给？？","like_count":0,"discussions":[{"author":{"id":2817674,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/fe/8a/8b5f5a66.jpg","nickname":"下一个起跑点","note":"","ucode":"5EDC478AE4CBA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576416,"discussion_content":"上一节已经讲过了，那里有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655533097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332687,"user_name":"神瘦","can_delete":false,"product_type":"c1","uid":1607746,"ip_address":"","ucode":"900C5845D88274","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/42/176ddd62.jpg","comment_is_top":false,"comment_ctime":1643473720,"is_pvip":false,"replies":[{"id":"121572","content":"收到，已经更新啦，谢谢反馈","user_name":"编辑回复","comment_id":332687,"uid":"1501385","ip_address":"","utype":2,"ctime":1643492651,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643473720","product_id":100094401,"comment_content":"“tokenizer 的迷你实现”这个地方“把模板中的”这几个字后面一大段空白呢，你们那边能看到吗？检查下呢","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548988,"discussion_content":"收到，已经更新啦，谢谢反馈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643492651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329555,"user_name":"openbilibili","can_delete":false,"product_type":"c1","uid":1354408,"ip_address":"","ucode":"57CF3971A268B9","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/a8/6ca767ca.jpg","comment_is_top":false,"comment_ctime":1641404043,"is_pvip":false,"replies":[{"id":"120224","content":"我们这个毕竟是迷你的版本，考虑的情况比较少，基本只考虑了最核心的解析路径，边缘case不断完善的时候，框架也会越来越清晰，这里可以参考vue-compiler-core的实现","user_name":"作者回复","comment_id":329555,"uid":"1003715","ip_address":"","utype":1,"ctime":1641774330,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1641404043","product_id":100094401,"comment_content":"template中的p标签 不能有空格 不然解析不了","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544898,"discussion_content":"我们这个毕竟是迷你的版本，考虑的情况比较少，基本只考虑了最核心的解析路径，边缘case不断完善的时候，框架也会越来越清晰，这里可以参考vue-compiler-core的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641774331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329179,"user_name":"斜月浮云","can_delete":false,"product_type":"c1","uid":1008933,"ip_address":"","ucode":"25CECBB175DA02","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/25/c6de04bc.jpg","comment_is_top":false,"comment_ctime":1641197674,"is_pvip":false,"replies":[{"id":"120855","content":"cool   我检查一下  ","user_name":"作者回复","comment_id":329179,"uid":"1003715","ip_address":"","utype":1,"ctime":1642339846,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":1,"score":"1641197674","product_id":100094401,"comment_content":"hoisted开头的变量用于静态节点提升，说白了就是在整个生命周期中只需要进行一次创建，有效节省不必要的性能开销。<br><br>话说最后的generate代码明显不对啊，createVnode的后括号阔歪了哦~🙂","like_count":0,"discussions":[{"author":{"id":1003715,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/c3/0aa50246.jpg","nickname":"花果山大圣","note":"","ucode":"25C0A36D628037","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546560,"discussion_content":"cool   我检查一下  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642339846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2826309,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/20/45/6c8bb3aa.jpg","nickname":"小花（fa）","note":"","ucode":"7F88A9F990712B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552953,"discussion_content":"hoisted_4是静态标签可以理解，hoisted_2, hoisted_3 是动态属性id，name,这部分怎么解释呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645666484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}