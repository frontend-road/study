{"id":1512,"title":"23 | 分布式系统的技术栈","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p>\n<p>正如我们前面所说的，构建分布式系统的目的是增加系统容量，提高系统的可用性，转换成技术方面，也就是完成下面两件事。</p>\n<ul>\n<li><strong>大流量处理</strong>。通过集群技术把大规模并发请求的负载分散到不同的机器上。</li>\n<li><strong>关键业务保护</strong>。提高后台服务的可用性，把故障隔离起来阻止多米诺骨牌效应（雪崩效应）。如果流量过大，需要对业务降级，以保护关键业务流转。</li>\n</ul>\n<p>说白了就是干两件事。一是提高整体架构的吞吐量，服务更多的并发和流量，二是为了提高系统的稳定性，让系统的可用性更高。</p>\n<h1>提高架构的性能</h1>\n<p>咱们先来看看，提高系统性能的常用技术。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a9/17/a9edeae125a80f381003d8d9d0056317.png?wh=863*321\" alt=\"\" /></p>\n<ul>\n<li>\n<p><strong>缓存系统</strong>。加入缓存系统，可以有效地提高系统的访问能力。从前端的浏览器，到网络，再到后端的服务，底层的数据库、文件系统、硬盘和CPU，全都有缓存，这是提高快速访问能力最有效的手段。对于分布式系统下的缓存系统，需要的是一个缓存集群。这其中需要一个Proxy来做缓存的分片和路由。</p>\n</li>\n<li>\n<p><strong>负载均衡系统</strong>。负载均衡系统是水平扩展的关键技术，它可以使用多台机器来共同分担一部分流量请求。</p>\n</li>\n<li>\n<p><strong>异步调用</strong>。异步系统主要通过消息队列来对请求做排队处理，这样可以把前端的请求的峰值给“削平”了，而后端通过自己能够处理的速度来处理请求。这样可以增加系统的吞吐量，但是实时性就差很多了。同时，还会引入消息丢失的问题，所以要对消息做持久化，这会造成“有状态”的结点，从而增加了服务调度的难度。</p>\n</li>\n<li>\n<p><strong>数据分区和数据镜像</strong>。<strong>数据分区</strong>是把数据按一定的方式分成多个区（比如通过地理位置），不同的数据区来分担不同区的流量。这需要一个数据路由的中间件，会导致跨库的Join和跨库的事务非常复杂。而<strong>数据镜像</strong>是把一个数据库镜像成多份一样的数据，这样就不需要数据路由的中间件了。你可以在任意结点上进行读写，内部会自行同步数据。然而，数据镜像中最大的问题就是数据的一致性问题。</p>\n</li>\n</ul>\n<!-- [[[read_end]]] -->\n<p>对于一般公司来说，在初期，会使用读写分离的数据镜像方式，而后期会采用分库分表的方式。</p>\n<h1>提高架构的稳定性</h1>\n<p>接下来，咱们再来看看提高系统系统稳定性的一些常用技术。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/be/79/befd21e1b41a257c5028f8c1bc7fa279.png?wh=865*315\" alt=\"\" /></p>\n<ul>\n<li>\n<p><strong>服务拆分</strong>。服务拆分主要有两个目的：一是为了隔离故障，二是为了重用服务模块。但服务拆分完之后，会引入服务调用间的依赖问题。</p>\n</li>\n<li>\n<p><strong>服务冗余</strong>。服务冗余是为了去除单点故障，并可以支持服务的弹性伸缩，以及故障迁移。然而，对于一些有状态的服务来说，冗余这些有状态的服务带来了更高的复杂性。其中一个是弹性伸缩时，需要考虑数据的复制或是重新分片，迁移的时候还要迁移数据到其它机器上。</p>\n</li>\n<li>\n<p><strong>限流降级</strong>。当系统实在扛不住压力时，只能通过限流或者功能降级的方式来停掉一部分服务，或是拒绝一部分用户，以确保整个架构不会挂掉。这些技术属于保护措施。</p>\n</li>\n<li>\n<p><strong>高可用架构</strong>。通常来说高可用架构是从冗余架构的角度来保障可用性。比如，多租户隔离，灾备多活，或是数据可以在其中复制保持一致性的集群。总之，就是为了不出单点故障。</p>\n</li>\n<li>\n<p><strong>高可用运维</strong>。高可用运维指的是DevOps中的CI/CD（持续集成/持续部署）。一个良好的运维应该是一条很流畅的软件发布管线，其中做了足够的自动化测试，还可以做相应的灰度发布，以及对线上系统的自动化控制。这样，可以做到“计划内”或是“非计划内”的宕机事件的时长最短。</p>\n</li>\n</ul>\n<p>上述这些技术非常有技术含量，而且需要投入大量的时间和精力。</p>\n<h1>分布式系统的关键技术</h1>\n<p>而通过上面的分析，我们可以看到，引入分布式系统，会引入一堆技术问题，需要从以下几个方面来解决。</p>\n<ul>\n<li>\n<p><strong>服务治理</strong>。服务拆分、服务调用、服务发现、服务依赖、服务的关键度定义……服务治理的最大意义是需要把服务间的依赖关系、服务调用链，以及关键的服务给梳理出来，并对这些服务进行性能和可用性方面的管理。</p>\n</li>\n<li>\n<p><strong>架构软件管理</strong>。服务之间有依赖，而且有兼容性问题，所以，整体服务所形成的架构需要有架构版本管理、整体架构的生命周期管理，以及对服务的编排、聚合、事务处理等服务调度功能。</p>\n</li>\n<li>\n<p><strong>DevOps</strong>。分布式系统可以更为快速地更新服务，但是对于服务的测试和部署都会是挑战。所以，还需要DevOps的全流程，其中包括环境构建、持续集成、持续部署等。</p>\n</li>\n<li>\n<p><strong>自动化运维</strong>。有了DevOps后，我们就可以对服务进行自动伸缩、故障迁移、配置管理、状态管理等一系列的自动化运维技术了。</p>\n</li>\n<li>\n<p><strong>资源调度管理</strong>。应用层的自动化运维需要基础层的调度支持，也就是云计算IaaS层的计算、存储、网络等资源调度、隔离和管理。</p>\n</li>\n<li>\n<p><strong>整体架构监控</strong>。如果没有一个好的监控系统，那么自动化运维和资源调度管理只可能成为一个泡影，因为监控系统是你的眼睛。没有眼睛，没有数据，就无法进行高效运维。所以说，监控是非常重要的部分。这里的监控需要对三层系统（应用层、中间件层、基础层）进行监控。</p>\n</li>\n<li>\n<p><strong>流量控制</strong>。最后是我们的流量控制，负载均衡、服务路由、熔断、降级、限流等和流量相关的调度都会在这里，包括灰度发布之类的功能也在这里。</p>\n</li>\n</ul>\n<p>此时，你会发现，要做好这么多的技术，或是要具备这么多的能力，简直就是一个门槛，是一个成本巨高无比的技术栈，看着就头晕。要实现出来得投入多少人力、物力和时间啊。是的，这就是分布式系统中最大的坑。</p>\n<p>不过，我们应该庆幸自己生活在了一个非常不错的年代。今天有一个技术叫——Docker，通过Docker以及其衍生出来的Kubernetes 之类的软件或解决方案，大大地降低了做上面很多事情的门槛。Docker把软件和其运行的环境打成一个包，然后比较轻量级地启动和运行。在运行过程中，因为软件变成了服务可能会改变现有的环境。但是没关系，当你重新启动一个Docker的时候，环境又会变成初始化状态。</p>\n<p>这样一来，我们就可以利用Docker的这个特性来把软件在不同的机器上进行部署、调度和管理。如果没有Docker或是Kubernetes，那么你可以认为我们还活在“原始时代”。</p>\n<p>现在你知道为什么Docker这样的容器化虚拟化技术是未来了吧。因为分布式系统已经是完全不可逆转的技术趋势了。</p>\n<p>但是，上面还有很多的技术是Docker及其周边技术没有解决的，所以，依然还有很多事情要做。那么，如果是一个一个地去做这些技术的话，就像是我们在撑开一张网里面一个一个的网眼，本质上这是使蛮力的做法。我们希望可以找到系统的“纲”，一把就能张开整张网。那么，这个纲在哪里呢？</p>\n<h1>分布式系统的“纲”</h1>\n<p>总结一下上面讲述的内容，你不难发现，分布式系统有五个关键技术，它们是：</p>\n<ul>\n<li>全栈系统监控；</li>\n<li>服务/资源调度；</li>\n<li>流量调度；</li>\n<li>状态/数据调度；</li>\n<li>开发和运维的自动化。</li>\n</ul>\n<p>而最后一项——开发和运维的自动化，是需要把前四项都做到了，才有可能实现的。所以，最为关键是下面这四项技术，即应用整体监控、资源和服务调度、状态和数据调度及流量调度，它们是构建分布式系统最最核心的东西。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/8e/db/8e92e2dff4f66147c014f930aa678fdb.jpg?wh=2556x1006\" alt=\"\" /><br />\n后面的课程中，我会一项一项地解析这些关键技术。</p>\n<h1>小结</h1>\n<p>回顾一下今天的要点内容。首先，我总结了分布式系统需要干的两件事：一是提高整体架构的吞吐量，服务更多的并发和流量，二是为了提高系统的稳定性，让系统的可用性更高。然后分别从这两个方面阐释，需要通过哪些技术来实现，并梳理出其中的技术难点及可能会带来的问题。最后，欢迎你分享一下你在解决系统的性能和可用性方面使用到的方法和技巧。</p>\n<p>虽然Docker及其衍生出来的Kubernetes等软件或解决方案，能极大地降低很多事儿的门槛。但它们没有解决的问题还有很多，需要掌握分布式系统的五大关键技术，从根本上解决问题。后面我将陆续撰写几篇文章一一阐述这几大关键技术，详见文末给出的《分布式系统架构的本质》系列文章的目录。</p>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/1411\">分布式系统架构的冰与火</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1505\">从亚马逊的实践，谈分布式系统的难点</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1513\">分布式系统关键技术：全栈监控</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1604\">分布式系统关键技术：服务调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1609\">分布式系统关键技术：流量与数据调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1610\">洞悉PaaS平台的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2080\">推荐阅读：分布式系统架构经典资料</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2421\">推荐阅读：分布式数据调度相关论文</a></li>\n</ul>\n","neighbors":{"left":{"article_title":"22 | 从亚马逊的实践，谈分布式系统的难点","id":1505},"right":{"article_title":"24 | 分布式系统关键技术：全栈监控","id":1513}},"comments":[{"had_liked":false,"id":1492,"user_name":"二进制之路","can_delete":false,"product_type":"c1","uid":1008395,"ip_address":"","ucode":"67C84B013147B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/0b/ad56aeb4.jpg","comment_is_top":false,"comment_ctime":1513261542,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"946406066662","product_id":100002201,"comment_content":"陈大讲的比较有高度，我来说点具体的，做Java后端开发可能会涉及的一些性能优化。进程内缓存，如用Map、List来缓存一些基础数据。如果需要更灵活的操作缓存数据，如自动过期或定期更新，可以使用Guava的LoadingCache。为了减少对Java GC的影响，或者避免用户态与内核态的数据拷贝成本，也可以使用直接内存。但要小心使用，无节制的使用或者没回收内存将可能带来灾难性的后果，例如Netty就有监测是否有内存泄漏的开关，Netty在这方面已经玩得很溜了。大数据量的缓存，或者需要支持分布式访问，可以考虑使用Redis，记得设置过期时间哦。对于不需要实时响应或同步处理的请求，可以通过消息队列来实现异步化，根据实际业务场景来异步反馈结果，或者只须持久化数据。消息队列在削峰方面非常有用，可以很好的应对突发流量，或者是业务在促销期间的高峰，从而让业务下游可以平滑的处理请求。应用服务间的调用可以采用批量发送来提高吞吐。IO密集型的操作或调用可以适当增加线程数，调高调用线程数对于跨机房调用有非常大的提升作用。服务之间尽量同机房或就近机房部署，降低延迟。减少大对象，降低对象存活时间，从而降低Full GC的可能性。有些语言或第三方的API内部逻辑很耗时，必要时可自己实现，如BeanUtils.copyProperties方法。无锁化，如数据分片存储，ThreadLocal。减小锁粒度，减小锁的范围，通常锁代码块优于锁方法。使用乐观锁，如Java中的原子类采用自旋+CAS。","like_count":221,"discussions":[{"author":{"id":1148262,"avatar":"","nickname":"delete is create","note":"","ucode":"12A64AF8D50C00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89613,"discussion_content":"老哥 发个博客关注一波\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576758909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88841,"discussion_content":"老哥，太溜了，你这一段话包含太多知识点。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576734292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2156536,"avatar":"https://static001.geekbang.org/account/avatar/00/20/e7/f8/45d479f9.jpg","nickname":"LanceMai","note":"","ucode":"611A6544B0077D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580630,"discussion_content":"你好，“IO密集型的操作或调用可以适当增加线程数”怎么理解？增加线程数应该不能减少IO数吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658301496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2156536,"avatar":"https://static001.geekbang.org/account/avatar/00/20/e7/f8/45d479f9.jpg","nickname":"LanceMai","note":"","ucode":"611A6544B0077D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590214,"discussion_content":"提高并发。比如每次操作都是几百ms甚至更高，那么处理这个开启多线程就会更好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665624824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580630,"ip_address":"北京"},"score":590214,"extra":""}]},{"author":{"id":1877737,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/a6/e9/2438fe6b.jpg","nickname":"Hong Kyun","note":"","ucode":"9751401F5B628A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391967,"discussion_content":"干货满满！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630735325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188421,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ2I86HeBpalVk0Oic35vicibN2rCibxYDe3ibJD1jMw7ichEUBM0yIgPMnmp8ibXtkMLfia8go3qD62WYf8A/132","nickname":"Geek_f35f41","note":"","ucode":"D23428DBD9BE1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351980,"discussion_content":"老哥太强了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614556908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793425,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5d/91/9b6fb4ad.jpg","nickname":"daiwf","note":"","ucode":"2C78451F5488BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309940,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601534707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/70/b9907b0e.jpg","nickname":"高科","note":"","ucode":"81A4DDF41D3C1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246960,"discussion_content":"具体的知识点确实不少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587791221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117035,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0b/6b/bfa6f7f9.jpg","nickname":"Wisee","note":"","ucode":"EADD95F86DC2AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161115,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580869189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148262,"avatar":"","nickname":"delete is create","note":"","ucode":"12A64AF8D50C00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89612,"discussion_content":"老哥  服","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576758895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66693,"discussion_content":"Java高手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575098734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1498,"user_name":"刘斌","can_delete":false,"product_type":"c1","uid":1018833,"ip_address":"","ucode":"F158A5C437D8F0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/d1/915f7aa6.jpg","comment_is_top":false,"comment_ctime":1513299665,"is_pvip":false,"replies":[{"id":"121","content":"举个例子，CentOS的版本和其中各个软件版本。架构的版本管理就是管理架构中每个服务的版本。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1513656740,"ip_address":"","comment_id":1498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65937809105","product_id":100002201,"comment_content":"架构的版本，不太理解怎么管理架构的版本。是通过一系列的中间件的版本决定的么？","like_count":15,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415428,"discussion_content":"举个例子，CentOS的版本和其中各个软件版本。架构的版本管理就是管理架构中每个服务的版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1513656740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1487,"user_name":"子悠","can_delete":false,"product_type":"c1","uid":1000383,"ip_address":"","ucode":"070BB09477E8A8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/bf/9a982bc1.jpg","comment_is_top":false,"comment_ctime":1513225878,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"65937735318","product_id":100002201,"comment_content":"这个系列的文章真是干货","like_count":15},{"had_liked":false,"id":103724,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1560497884,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"53100105436","product_id":100002201,"comment_content":"如果不是之前半个月我学习了微服务架构，文中很多名词我都不理解，无法接受地去学习。现在回过头来看这个分布式，就好很多了。很多时候，是需要有基础的，有理解的在学习，凭空想象对于技术来说是坚决不可行的","like_count":12},{"had_liked":false,"id":162567,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1576555972,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"44526228932","product_id":100002201,"comment_content":"收获<br><br>1. 构建分布式系统的目的是增加系统容量，提高系统的可用性，转换成技术方面，也就是完成下面两件事。<br>-- 大流量处理。通过集群技术把大规模并发请求的负载分散到不同的机器上。<br>-- 关键业务保护。提高后台服务的可用性，把故障隔离起来阻止多米诺骨牌效应（雪崩效应）。如果流量过大，需要对业务降级，以保护关键业务流转。<br><br>说白了就是干两件事。一是提高整体架构的吞吐量，服务更多的并发和流量，二是为了提高系统的稳定性，让系统的可用性更高<br><br>2.提高架构性能<br>1.缓存：缓存系统 缓存分区，缓存命中，缓存更新<br>2.负载均衡：网关系统 负载均衡，服务路由，服务发现<br>3.异步调用：异步系统 消息队列，消息持久，异步事务<br>4.数据镜像：数据镜像 数据同步，数据分离，数据一致性<br>5.数据分区：数据分区 分区策略，数据访问层，数据一致性<br><br>3.提高架构稳定性：<br>1.服务拆分：服务治理 服务调用，依赖，隔离<br>2.服务冗余：服务调度 弹性伸缩，故障转移，服务发现<br>3.限流降级：降级限流 异步队列服务降级，限流熔断<br>4.高可用架构：高可用架构 多租户系统，宰被多活，高可用服务<br>5.高可用运维：高可用运维 全栈监控 devops，自动化运维<br><br><br>4.引入的问题<br>但是引入分布式系统，会引入一堆技术问题, 解决方法:<br>-- 服务治理<br>-- 架构软件管理<br>-- DevOps。<br>-- 自动化运维。<br>-- 资源调度管理<br>-- 整体架构监控。<br>-- 流量控制。<br><br>备注:<br>由上可知, 要实现出来得投入多少人力、物力和时间啊。是的，这就是分布式系统中最大的坑。<br><br>5.引入的问题的解决方案  --- Docker<br>我们应该庆幸自己生活在了一个非常不错的年代。今天有一个技术叫——Docker，通过 Docker 以及其衍生出来的 Kubernetes 之类的软件或解决方案，大大地降低了做上面很多事情的门槛。<br><br>现在你知道为什么 Docker 这样的容器化虚拟化技术是未来了吧。因为分布式系统已经是完全不可逆转的技术趋势了。<br><br>6.总结  -- 分布式系统的“纲”<br>总结一下上面讲述的内容，你不难发现，分布式系统有五个关键技术，它们是：<br>-- 全栈系统监控；<br>-- 服务 &#47; 资源调度；<br>-- 流量调度；<br>-- 状态 &#47; 数据调度；<br>-- 开发和运维的自动化。<br><br><br>而最后一项 —— 开发和运维的自动化，是需要把前四项都做到了，才有可能实现的。<br>所以，最为关键是下面这四项技术，即应用整体监控、资源和服务调度、状态和数据调度及流量调度，它们是构建分布式系统最最核心的东西.<br><br>Over","like_count":10},{"had_liked":false,"id":1862,"user_name":"安晓辉","can_delete":false,"product_type":"c1","uid":1040051,"ip_address":"","ucode":"6ADFB3FC2BD62D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/b3/921f3e39.jpg","comment_is_top":false,"comment_ctime":1514891039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35874629407","product_id":100002201,"comment_content":"这个系列超级赞！","like_count":8},{"had_liked":false,"id":59311,"user_name":"Dale","can_delete":false,"product_type":"c1","uid":1010056,"ip_address":"","ucode":"DD4717C06E417D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/69/88/528442b0.jpg","comment_is_top":false,"comment_ctime":1547349559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23022186039","product_id":100002201,"comment_content":"受益匪浅，分布式系统中各个组件的调用链和组件监控做的不够好，这方面大公司运维很吃力","like_count":5},{"had_liked":false,"id":69245,"user_name":"xueyuan","can_delete":false,"product_type":"c1","uid":1128121,"ip_address":"","ucode":"3DE20A723EBAFE","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/b9/3b28f67c.jpg","comment_is_top":false,"comment_ctime":1550705156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18730574340","product_id":100002201,"comment_content":"相见恨晚","like_count":4},{"had_liked":false,"id":24956,"user_name":"FeiFei","can_delete":false,"product_type":"c1","uid":1045586,"ip_address":"","ucode":"01CD655DD4E56C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/52/10c4d863.jpg","comment_is_top":false,"comment_ctime":1537233279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18717102463","product_id":100002201,"comment_content":"分布式架构的技术栈很多。<br>文章列举的已经是超大型分布式系统所需要的技术栈了。<br>但对于规模较小的公司，文中许多内容不需要实践的过于深。<br>架构是渐进式进化的，一口成不了个大胖子。","like_count":4},{"had_liked":false,"id":100953,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1559695104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14444596992","product_id":100002201,"comment_content":"分布式系统提高了系统的吞吐量，加大并发性能，可以实现关键业务保护。对于分布式系统主要注意下面的两方面：<br>提高系统的性能，可以在各级实现缓存技术，做负载均衡的调度，通过异步而非同步反问加大吞吐量，提高系统的并发。<br>提高系统的稳定性，包括服务拆分，服务治理，自动化部署运维，全站监控等。<br>抓住系统的纲，主要是实现全站资源服务的系统监控，从而让系统有了眼睛，服务和资源的调度，流量调度，数据和流量的调度，从而能够达到自动化运维和部署","like_count":3},{"had_liked":false,"id":8724,"user_name":"Geek_22d08b","can_delete":false,"product_type":"c1","uid":1120757,"ip_address":"","ucode":"3812B4113B7B46","user_header":"","comment_is_top":false,"comment_ctime":1526386575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14411288463","product_id":100002201,"comment_content":"请问如果采用阿里云华为云的话，那么多技术要实现是不是只要购买阿里云他们相应的产品，然后配置下就可以了，就没程序员什么事了？","like_count":3},{"had_liked":false,"id":113651,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1563105343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153039935","product_id":100002201,"comment_content":"看了一些专栏，发现大佬总是能从更高纬度来思考一项技术的来龙去脉，让读的人能全局了解，赞了","like_count":2},{"had_liked":false,"id":67275,"user_name":"Smilywd","can_delete":false,"product_type":"c1","uid":1157089,"ip_address":"","ucode":"014FF8A3277C4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/e1/0e3ca7d8.jpg","comment_is_top":false,"comment_ctime":1550119777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140054369","product_id":100002201,"comment_content":"异步，持久化，状态管理，方便监控和自动修复，提升吞吐量，也一定程度上保证了稳定性","like_count":2},{"had_liked":false,"id":1494,"user_name":"永靖","can_delete":false,"product_type":"c1","uid":1030310,"ip_address":"","ucode":"6CE95F363AC211","user_header":"https://wx.qlogo.cn/mmopen/vi_32/2nM9PaEsM4UiaUc0R3iaiaOumFVkcugGhdUObpEBq0bEKnjF6DSTmjsibFbmJHtUphfXsFGd1ueJwMoonia3jicyPC1w/132","comment_is_top":false,"comment_ctime":1513296156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10103230748","product_id":100002201,"comment_content":"你说服务需要具备，4个接口，start，stop，appconfig，healthcheck。<br>有2点疑问，1start不是系统外部命令行启动的时候，运行的main函数？2appconfig，很多参数比如配置文件或者配置文件地址，都应该是允许时传人参数，允许时可以读取配置，可以修改部分配置，例如修改日志打印级别等，是不是这些？","like_count":2},{"had_liked":false,"id":1477,"user_name":"永靖","can_delete":false,"product_type":"c1","uid":1030310,"ip_address":"","ucode":"6CE95F363AC211","user_header":"https://wx.qlogo.cn/mmopen/vi_32/2nM9PaEsM4UiaUc0R3iaiaOumFVkcugGhdUObpEBq0bEKnjF6DSTmjsibFbmJHtUphfXsFGd1ueJwMoonia3jicyPC1w/132","comment_is_top":false,"comment_ctime":1513213725,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10103148317","product_id":100002201,"comment_content":"全栈监控的各项核心技术指标能给详细介绍一下吗","like_count":2,"discussions":[{"author":{"id":1360712,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","nickname":"天草二十六","note":"","ucode":"3165EE3007527B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269080,"discussion_content":"在后面的文章有说明，这里只是一个大纲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589864083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1475,"user_name":"Case","can_delete":false,"product_type":"c1","uid":1000917,"ip_address":"","ucode":"FCB90A23131650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/d5/d3b92d32.jpg","comment_is_top":false,"comment_ctime":1513213363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10103147955","product_id":100002201,"comment_content":"高内聚低耦合，强大的可扩展性，从很多大型软件后台，都可以看到他们的发展趋势，基本就是分而治之，随着业务发展而形成很多独立的模块，然而那是花了大量时间和人力来实现的，拥抱docker+云时代。","like_count":2},{"had_liked":false,"id":1472,"user_name":"李志博","can_delete":false,"product_type":"c1","uid":1009109,"ip_address":"","ucode":"F3C72573B3C112","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/d5/88beb15a.jpg","comment_is_top":false,"comment_ctime":1513211133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10103145725","product_id":100002201,"comment_content":"马上要搞监控了，超级期待监控的文章","like_count":2},{"had_liked":false,"id":271213,"user_name":".","can_delete":false,"product_type":"c1","uid":1690879,"ip_address":"","ucode":"2DFC0B63781500","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/ff/0e7fc131.jpg","comment_is_top":false,"comment_ctime":1609473109,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5904440405","product_id":100002201,"comment_content":"即使过了3年多了，陈大讲的这些东西依旧是非常有价值的，分布式系统架构或许并没有我们现在想的那么神秘莫测。","like_count":1},{"had_liked":false,"id":111161,"user_name":"Vance","can_delete":false,"product_type":"c1","uid":1174028,"ip_address":"","ucode":"D9659824312D87","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/0c/d79ae60d.jpg","comment_is_top":false,"comment_ctime":1562495163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857462459","product_id":100002201,"comment_content":"分布式架构系统的技术栈还是比较深的。","like_count":1},{"had_liked":false,"id":96918,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1558535302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853502598","product_id":100002201,"comment_content":"高吞吐，高稳定，那分布式的纲是什么呢","like_count":1},{"had_liked":false,"id":55282,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1546089643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5841056939","product_id":100002201,"comment_content":"厉害，提纲挈领，一把抓住了分布式之网的大纲，需要多读几遍，然后顺藤摸瓜，逐步深入研究。","like_count":1},{"had_liked":false,"id":34996,"user_name":"小羊","can_delete":false,"product_type":"c1","uid":1181968,"ip_address":"","ucode":"AD3EDB239E3EE3","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/10/10026ba8.jpg","comment_is_top":false,"comment_ctime":1540377554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835344850","product_id":100002201,"comment_content":"架构性能提高：<br>1.缓存：缓存系统 缓存分区，缓存命中，缓存更新<br>2.负载均衡：网关系统 负载均衡，服务路由，服务发现<br>3.异步调用：异步系统 消息队列，消息持久，异步事务<br>4.数据镜像：数据镜像 数据同步，数据分离，数据一致性<br>5.数据分区：数据分区 分区策略，数据访问层，数据一致性<br><br>架构稳定性：<br>1.服务拆分：服务治理 服务调用，依赖，隔离<br>2.服务冗余：服务调度 弹性伸缩，故障转移，服务发现<br>3.限流降级：降级限流 异步队列服务降级，限流熔断<br>4.高可用架构：高可用架构 多租户系统，宰被多活，高可用服务<br>5.高可用运维：高可用运维  全栈监控 devops，自动化运维<br><br><br>","like_count":1},{"had_liked":false,"id":13465,"user_name":"关冕","can_delete":false,"product_type":"c1","uid":1149625,"ip_address":"","ucode":"23EA083AB2A1D7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/b9/2b739dec.jpg","comment_is_top":false,"comment_ctime":1529657936,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824625232","product_id":100002201,"comment_content":"“架构软件管理”可以再展开讲一下吗？","like_count":1},{"had_liked":false,"id":12515,"user_name":"猪猪","can_delete":false,"product_type":"c1","uid":1096096,"ip_address":"","ucode":"D9C5BD348316A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/b9/a0/2e702efd.jpg","comment_is_top":false,"comment_ctime":1528887879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5823855175","product_id":100002201,"comment_content":"真的是干货，不错","like_count":1},{"had_liked":false,"id":4430,"user_name":"朱海峰","can_delete":false,"product_type":"c1","uid":1021494,"ip_address":"","ucode":"D96D2CA8975DBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/36/0025b51d.jpg","comment_is_top":false,"comment_ctime":1522107820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5817075116","product_id":100002201,"comment_content":"老师，分布式 ，去中心化，讲讲","like_count":1},{"had_liked":false,"id":1645,"user_name":"雪花飘飘","can_delete":false,"product_type":"c1","uid":1025882,"ip_address":"","ucode":"7B986C68308E62","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/5a/2f98b96a.jpg","comment_is_top":false,"comment_ctime":1513905888,"is_pvip":true,"replies":[{"id":"262","content":"后面的文章会讲的","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1514099761,"ip_address":"","comment_id":1645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5808873184","product_id":100002201,"comment_content":"陈老师，希望讲解下分布式事物的实现方式","like_count":1,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415486,"discussion_content":"后面的文章会讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1514099761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1481,"user_name":"最初的信仰","can_delete":false,"product_type":"c1","uid":1009472,"ip_address":"","ucode":"F47066B5E457FE","user_header":"","comment_is_top":false,"comment_ctime":1513215995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5808183291","product_id":100002201,"comment_content":"期待后面的文章","like_count":1},{"had_liked":false,"id":351935,"user_name":"LanceMai","can_delete":false,"product_type":"c1","uid":2156536,"ip_address":"","ucode":"611A6544B0077D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e7/f8/45d479f9.jpg","comment_is_top":false,"comment_ctime":1658301217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658301217","product_id":100002201,"comment_content":"请问 服务复本 是什么意思？","like_count":0},{"had_liked":false,"id":316704,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1634519439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634519439","product_id":100002201,"comment_content":"监控收集的数据带来了数据运营，指导服务运营，中间件运营，基础组件运营。慢慢演变成paas平台，降低运维成本！","like_count":0},{"had_liked":false,"id":314008,"user_name":"白果园的格里高力","can_delete":false,"product_type":"c1","uid":2662446,"ip_address":"","ucode":"6E80CBF405065F","user_header":"https://static001.geekbang.org/account/avatar/00/28/a0/2e/787cbac0.jpg","comment_is_top":false,"comment_ctime":1632799031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632799031","product_id":100002201,"comment_content":"在左耳老师的带领下俯瞰分布式技术全貌，有种一览众山小的爽快感受。<br>尽管有些概念还不是很明白，既是因为自己基础薄弱，又或许是在这节概述性的课中没必要过度展开。<br>我的小结：为了提升大流量处理能力和应用的稳定性、可用性，我们引入了分布式；分布式技术有很多手段（略），但同时也引入了很多问题（略）；解决这些问题的技术也有很多，但是最关键的三项技术分别是：监控、调度（服务、资源，状态、数据的，流量的）、自动化运维","like_count":0},{"had_liked":false,"id":277812,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1612600495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612600495","product_id":100002201,"comment_content":"把专栏写成了教科书。这总结的太全面了。","like_count":0},{"had_liked":false,"id":238577,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1596202315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596202315","product_id":100002201,"comment_content":"都能看懂，但是没做过。我就是那种没吃过什么，只见过什么跑的人。需要更深入一点😀","like_count":0},{"had_liked":false,"id":212173,"user_name":"simonren","can_delete":false,"product_type":"c1","uid":1974906,"ip_address":"","ucode":"DFB59C705310C2","user_header":"","comment_is_top":false,"comment_ctime":1588070723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588070723","product_id":100002201,"comment_content":"一是提高整体架构的吞吐量，服务更多的并发和流量，二是为了提高系统的稳定性，让系统的可用性更高。","like_count":0},{"had_liked":false,"id":211398,"user_name":"Geek_130e9e","can_delete":false,"product_type":"c1","uid":1587628,"ip_address":"","ucode":"518AAF2F228C17","user_header":"","comment_is_top":false,"comment_ctime":1587957831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587957831","product_id":100002201,"comment_content":"IO密集型的操作或调用可以适当增加线程数，调高调用线程数提升跨机房调用。全站监控、服务治理、自动化部署运维、服务拆分等，提高系统稳定性。在各级实现缓存，提高系统性能，使负载均衡调度，提高系统并发，加大吞吐量，异步而非同步反问。","like_count":0},{"had_liked":false,"id":211009,"user_name":"Geek_dwq","can_delete":false,"product_type":"c1","uid":1817279,"ip_address":"","ucode":"7DC6BFCF746787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wI2LwgvwseNqXwkF67zicD9UXBSle9DPhmL6uyKG9Nib6NLfU3OuKYuSQ4DHCWxIQecnqell2vKVvNX8boox0B8w/132","comment_is_top":false,"comment_ctime":1587880844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587880844","product_id":100002201,"comment_content":"分布式学习提纲，非常不错！","like_count":0},{"had_liked":false,"id":210854,"user_name":"刘欣洲","can_delete":false,"product_type":"c1","uid":1020871,"ip_address":"","ucode":"767B7D80D01623","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/c7/1640226d.jpg","comment_is_top":false,"comment_ctime":1587840403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587840403","product_id":100002201,"comment_content":"老师讲的真好，有高度，有深度","like_count":0},{"had_liked":false,"id":210560,"user_name":"毛毛狗","can_delete":false,"product_type":"c1","uid":1036692,"ip_address":"","ucode":"E71AB99F70C4B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d1/94/5d28ddea.jpg","comment_is_top":false,"comment_ctime":1587787491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587787491","product_id":100002201,"comment_content":"提高系统的性能，可以在各级实现缓存技术，做负载均衡的调度，通过异步而非同步反问加大吞吐量，提高系统的并发。<br>提高系统的稳定性，包括服务拆分，服务治理，自动化部署运维，全站监控等。<br>抓住系统的纲，主要是实现全站资源服务的系统监控，从而让系统有了眼睛，服务和资源的调度，流量调度，数据和流量的调度，从而能够达到自动化运维和部署","like_count":0},{"had_liked":false,"id":210559,"user_name":"毛毛狗","can_delete":false,"product_type":"c1","uid":1036692,"ip_address":"","ucode":"E71AB99F70C4B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d1/94/5d28ddea.jpg","comment_is_top":false,"comment_ctime":1587787477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587787477","product_id":100002201,"comment_content":"服务拆分主要有两个目的：一是为了隔离故障，二是为了重用服务模块。但服务拆分完之后，会引入服务调用间的依赖问题。","like_count":0},{"had_liked":false,"id":195585,"user_name":"半盏流年","can_delete":false,"product_type":"c1","uid":1921458,"ip_address":"","ucode":"FCE008CD80CF44","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/b2/e0f26113.jpg","comment_is_top":false,"comment_ctime":1585199685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585199685","product_id":100002201,"comment_content":"不明觉厉","like_count":0},{"had_liked":false,"id":195199,"user_name":"GZC","can_delete":false,"product_type":"c1","uid":1928513,"ip_address":"","ucode":"1A96BC07D8BC42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6d/41/256f7238.jpg","comment_is_top":false,"comment_ctime":1585145836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585145836","product_id":100002201,"comment_content":"全栈监控正在搞，学以致用了","like_count":0},{"had_liked":false,"id":187400,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1584102000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584102000","product_id":100002201,"comment_content":"之前对应用整体监控重视远远不足，以至于前端发起的一条请求，最后失败了，到底数据流转到哪个服务失败了，定位起来非常困难，可能是前端的问题、后台服务的问题、计算引擎的问题，各个环节对这条数据进行了哪些处理，只能去查日志，浪费了大量的时间。<br>建立监控系统，而不是靠人的“勤奋”去排查问题！","like_count":0},{"had_liked":false,"id":163505,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1576734329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576734329","product_id":100002201,"comment_content":"知识回顾:分布式主要解决整体吞吐量和可用性问题，五大关键技术是服务监控，服务治理及调度，数据调度，流量调度和开发和运维自动化，这就是分布式系统的纲，需要一一掌握。docker能够帮助我们更好的解决上面这些问题，但是很有很长的路要走。<br>每一个关键技术都有相关的开源框架，值得好好去研究","like_count":0},{"had_liked":false,"id":163248,"user_name":"Geek_Heiko","can_delete":false,"product_type":"c1","uid":1469881,"ip_address":"","ucode":"54B0D22008F7EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/VfE7OiboMc7SKwOiczAJDWo3T4WJn0dVW8yPEpVRUFtk6ib0DUicN1eDfpel1UAgp8ia4kqEjXSVXOVHcoZKXhq7k4w/132","comment_is_top":false,"comment_ctime":1576675637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576675637","product_id":100002201,"comment_content":"皓叔，我在这里，将这些关键技术&amp;#34;打包一下&amp;#34;，记为: f= f( r, s)* f( d, s)其中，全栈系统监控用函数来表示，即我们所熟悉的 f( x); f( r, s)表示资源和服务的调度结果; f( d, s)表示系统中数据及其状态的组合;而 f则表示分布式系统中，运行时由于调度资源 r,服务 s,数据 d及其状态 s所产生的流量。这道公式主要根据自己的直观感受为方便记忆和理解而想出来的，并不代表实际的运算及其结果。请问下这样是否可以作为临时的想法呢？有没有什么致命的要点或者没有覆盖到呢？","like_count":0},{"had_liked":false,"id":162890,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1576629104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576629104","product_id":100002201,"comment_content":"有一点疑问，将服务部署与docker，后面重启后恢复初始状态的前提，此服务是无状态的，不然是否会有数据丢失风险。","like_count":0},{"had_liked":false,"id":162874,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1576627783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576627783","product_id":100002201,"comment_content":"这篇文章把分布式主要的技术点都提到了。按着大纲走可以把分布式中可能的问题以及应对措施掌握。实际开发中，这么多技术点，我们可以当checklist来审核我们的架构和系统。但真正开发更多还是依赖现有的技术框架。Spring微服务实战，这本书把基于Java的框架介绍得通俗易懂，其实与本文中技术点基本是相同的，不同语言在生态方面有很大不同。<br>项目中有基于Spring搭的服务，确实复杂同时性能不高。要把分布式用起来和用好是有很大差异的","like_count":0},{"had_liked":false,"id":162872,"user_name":"stars","can_delete":false,"product_type":"c1","uid":1055100,"ip_address":"","ucode":"8A75D9E1909729","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/7c/25abe455.jpg","comment_is_top":false,"comment_ctime":1576627374,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576627374","product_id":100002201,"comment_content":"就如陈老师说的，监控是服务的眼睛，没了眼睛其他限流，熔断都是很难做的，而现实中多少公司其实就没有眼睛，而且为了分布式而分布式","like_count":0},{"had_liked":false,"id":162790,"user_name":"Geek_沐沐","can_delete":false,"product_type":"c1","uid":1758315,"ip_address":"","ucode":"0C08DD322D175E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLYORrZtISWLEXXZyd2XJ0u7JBAADgCsETRnI3bsIceO6uqhMF8icicWOE6Hnzg8vd26OAFjSBHSE0Q/132","comment_is_top":false,"comment_ctime":1576590151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576590151","product_id":100002201,"comment_content":"干货值得好好研究","like_count":0},{"had_liked":false,"id":162711,"user_name":"yousa","can_delete":false,"product_type":"c1","uid":1638184,"ip_address":"","ucode":"FF812950550AE8","user_header":"https://static001.geekbang.org/account/avatar/00/18/ff/28/97925b10.jpg","comment_is_top":false,"comment_ctime":1576579788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576579788","product_id":100002201,"comment_content":"分布式系统的本质就是高性能和高可用","like_count":0},{"had_liked":false,"id":162459,"user_name":"Haan","can_delete":false,"product_type":"c1","uid":1388133,"ip_address":"","ucode":"7A7BBE0D0CD39E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq8qpSvBoZz89u3BhGXWLibs2OibCkZl8bx74aLSJ58f467bR8anNaTiccJklcqjBdhfvvJpvLVmYesA/132","comment_is_top":false,"comment_ctime":1576541916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576541916","product_id":100002201,"comment_content":"干货","like_count":0},{"had_liked":false,"id":149168,"user_name":"🐒王子 ♡桃桃。","can_delete":false,"product_type":"c1","uid":1350615,"ip_address":"","ucode":"1FD9BCD3459DC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/d7/3e4eb062.jpg","comment_is_top":false,"comment_ctime":1573172885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573172885","product_id":100002201,"comment_content":"感谢大神","like_count":0},{"had_liked":false,"id":138432,"user_name":"Salina喜欢计算机","can_delete":false,"product_type":"c1","uid":1374667,"ip_address":"","ucode":"90EDC4654AABF4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/cb/26889909.jpg","comment_is_top":false,"comment_ctime":1570238618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570238618","product_id":100002201,"comment_content":"讲的太好了！这200块花的太值了！谢谢老师。","like_count":0},{"had_liked":false,"id":2222,"user_name":"进阶的码农","can_delete":false,"product_type":"c1","uid":1017821,"ip_address":"","ucode":"D8991282640334","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/dd/4f53f95d.jpg","comment_is_top":false,"comment_ctime":1516349996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1516349996","product_id":100002201,"comment_content":"全是干货 受益匪浅 谢谢浩子哥","like_count":0},{"had_liked":false,"id":1603,"user_name":"Xiang","can_delete":false,"product_type":"c1","uid":1000070,"ip_address":"","ucode":"374744FF627C00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/86/d05de870.jpg","comment_is_top":false,"comment_ctime":1513763504,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1513763504","product_id":100002201,"comment_content":"en hao","like_count":0},{"had_liked":false,"id":1500,"user_name":"木偶","can_delete":false,"product_type":"c1","uid":1006092,"ip_address":"","ucode":"28D116FB93E106","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/0c/3b8c3a1c.jpg","comment_is_top":false,"comment_ctime":1513300468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513300468","product_id":100002201,"comment_content":"干货满满 每一项都可以 单独拿出来 深入调研学习","like_count":0}]}