{"id":391089,"title":"17 | 打包部署：你的应用是如何上线的？","content":"<p>你好，我是王沛。今天我们来聊聊React 应用的打包和部署。</p><p>从这节课开始，我们就进入了扩展篇的学习。通过基础篇和实战篇的学习，你应该对如何开发一个 React 应用已经心中有数了。但是我们也要知道，仅仅学会开发是不够的。在此基础之上，掌握打包部署、单元测试，以及了解React 生态圈的一些常用项目，才能真正完成一个应用的开发。</p><p>所以在扩展篇我会对上述内容做一个整体的介绍，让你使用React 进行开发时，没有知识盲区，能够完整应对应用的整个开发过程。</p><p>同时，我需要强调的是，我们在扩展篇的学习目标是<strong>总体把握，消除知识盲区。</strong>所以我会以介绍重要知识点为主，将我认为最重要或者最常用的概念、机制拎出来，让你有的放矢地进行学习。当然，每一篇的内容如果你想要深入学习，还需要去官方文档或者专门的教程去详细了解。</p><p>今天这节课，我将介绍最主流的打包工具 Webpack，通过了解它的基本概念和常用配置，让你能在完成 React 的应用开发之后，知道该怎么打包成可部署的应用。</p><h2>为什么需要了解 Webpack？</h2><p>我个人一直认为，每个前端开发者不一定要精通Webpack，但有必要进行了解，至少要能看得懂一个 Webpack 的配置文件，以及遇到问题时能知道是 Webpack 的问题，还是自己代码的问题。</p><!-- [[[read_end]]] --><p>通常来说，我们都是通过脚手架工具创建一个应用，或者加入到一个已有的项目开发中。这个时候，我们并不需要知道该怎么配置 Webpack ，只要能开发业务逻辑就可以了。这与使用 Java、Swift 等等编程语言是有些类似的，我们不太需要关注源代码是通过什么编译器如何打包成最后的应用程序的，因为 IDE 已经帮我们把这些事情做好了。</p><p>所以说，我们可以不精通 Webpack，但要知道它是什么，帮我们做了哪些事情。这样的话，在遇到问题的时候，我们就能知道是哪个环节出了问题，以便进一步寻找解决问题的方案。</p><p>举个例子，在进行 React 开发时，如果遇到下面的错误，如果是你，会从哪里着手解决呢？<br>\n<img src=\"https://static001.geekbang.org/resource/image/87/d0/87210271c78301ef914de921987b98d0.png?wh=1224x650\" alt=\"\"></p><p>实际上，这是在 React 开发时经常遇到的一个错误。很多同学一遇到时，就不知该从哪里下手，这正是对应用的打包流程不够了解造成的。</p><p>我们仔细观察下错误提示，可以发现两个重要的信息：</p><ol>\n<li><strong>Failed to compile</strong><strong>：</strong>表示这是在编译阶段报的错误，也就是从你的源代码编译到可以由浏览器运行的代码。</li>\n<li><strong>SyntaxError</strong><strong>：</strong>表明这个错误是个语法错误。要么是你的语法真的写错了，要么就是编译器没有正确配置，因此无法识别这样的代码。比如在这个例子中，错误提示其实已经很明确了，JSX 的语法没有启用。而 JSX 是由 babel-loader 处理的，因此你的着手点就应该确认 babel 有没有在 Webpack 中正确配置。</li>\n</ol><p>所以我们可以看到，只有了解代码的打包流程，才能在遇到问题时找到正确的解决方向。下面我们就来看下 Webpack 的基本工作原理，了解你的源代码最终是如何打包成最终在浏览器中运行的代码的。</p><h2>Webpack 的基本工作原理</h2><p>Webpack 是目前最为主流的前端应用打包工具，它的<strong>核心思路</strong>是将源代码以及图片、样式文件等资源文件都视为模块，然后通过提供对不同类型资源的处理器，将它们进行统一处理，形成最终可在浏览器运行的代码。</p><p>下面这张图就显示了 Webpack 的工作机制：</p><p><img src=\"https://static001.geekbang.org/resource/image/18/b7/185ae80af6722b1c0bb0453d3e080ab7.png?wh=2174x990\" alt=\"\"></p><p>Webpack 不仅是用于打包最终发布出去的应用程序，而且还能在开发时，为我们提供开发时服务器。它可以通过监测源代码的变化并实时编译，让我们能在代码发生变化时，及时看到运行的效果。</p><p>Webpack 对于开发环境和生产环境的配置会有所区别，但基本流程是一致的。总体来说，Webpack 的配置会分为下面三个部分。</p><ol>\n<li>输入输出配置：定义你的应用程序的入口，以及打包结果输出的文件夹位置。</li>\n<li>配置对于每一类资源文件的处理器：比如说，对 JavaScript 是用 babel-loader 去编译；对 less 文件则是用 less-loader 去编译；图片则用 file-loader去处理。你在项目中能使用哪些技术或者资源，完全取决于配置了哪些 loader。</li>\n<li>插件配置：除了核心的源代码编译和打包流程，Webpack 还支持插件扩展功能，可以通过插件生成额外的打包结果，或者进行一些其它的处理。比如打包过程生成 index.html，源代码分析报表，提取 CSS 到独立文件，代码压缩，等等。</li>\n</ol><p>为了方便你理解，这里给你举一个简单的例子，我们来看看一个标准的 Webpack 配置文件究竟长什么样：</p><pre><code>const HtmlWebpackPlugin = require('html-webpack-plugin');\nconst path = require('path');\n\n\nmodule.exports = {\n  entry: {\n    // 定义应用的入口点 src/app.js，并命名为 main\n    main: path.resolve(__dirname, './src/app.js'),\n  },\n  output: {\n    // 打包输出的文件名，这里将生成 main.bundle.js\n    filename: '[name].bundle.js',\n    // 定义打包结果的输出位置\n    path: path.resolve(__dirname, 'build'),\n  },\n  module: {\n    // 定义处理源文件的规则，rules 下会按顺序使用匹配的规则\n    rules: [\n      {\n        // 遇到 .js 结尾的文件则使用这个规则\n        test: /\\.js$/,\n        // 忽略 node_modules 目录下的 js 文件\n        exclude: /node_modules/,\n        use: {\n          // 使用 babel-loader 处理 js\n          loader: 'babel-loader',\n          // babel-loader 的一些选项\n          options: {\n            presets: ['@babel/preset-env'],\n          },\n        },\n      },\n    ],\n  },\n  plugins: [\n    // 使用 HtmlWebpackPlugin 生成一个 index.html，其中自动引入 js\n    // 并配置了页面的 title\n    new HtmlWebpackPlugin({\n      title: 'Webpack Output',\n    }),\n  ],\n};\n</code></pre><p>针对这段配置代码，我们一般会把它存储为 webpack.config.js 这样一个文件，这样在我们的项目下运行 webpack 命令，就会使用这个文件作为配置。</p><p>代码中其实已经很直观了，我们不仅定义了输入输出，还配置了 babel-loader，用于编译 JavaScript 文件到兼容主流浏览器的代码。同时，还为 babel-loader 设置了参数 presets，例子中这个参数的值 @babel/preset-env可以确保 Babel 能够处理 JSX 等语法。最后，我们通过一个 HtmlWebpackPlugin，来自动生成 index.html。</p><p>在这几块配置中，主要的复杂度其实都集中在 loader 和 plugin。</p><h2>理解 loader 和 plugin</h2><p>loader 和 plugin 是 Webpack 最核心的两个概念，了解了这两个核心概念，我们就能掌握 Webpack 是如何处理你的代码，并最终生成打包结果。</p><p>为了理解它们的工作机制，我们来看一个 <a href=\"https://lesscss.org/\">Less</a> 文件处理的例子，看看要如何配置 Webpack，才能在项目中使用 Less 作为 Css 的预处理器。</p><p>Less 允许我们通过更强大的机制去写 Css，比如可以定义变量，允许嵌套的规则定义，等等。要让一个 Less 文件最终打包到目标文件中，并被浏览器运行，那么首先需要把 Less 代码转换成 Css，再通过 style 标记插入到浏览器中。</p><p>这个过程涉及到三个 loader，如下：</p><ol>\n<li>less-loader：用于将 Less 代码转换成 Css。</li>\n<li>css-loader：用于处理 Css 中的 import、url 等语句，以便能分析出图片等静态资源打包到最终结果。</li>\n<li>style-loader：会自动生成代码，并将打包后的 Css 插入到页面 style 标签。这个 loader 会将 Css 打包到 js 文件中，在应用运行时，自动生成的代码再把这些 css 应用到页面上。</li>\n</ol><p>从中可以看到，这个过程涉及到 loader 的一个重要机制：<strong>链式使用</strong><strong>。</strong>前面一个 loader 的输出结果，可以作为后一个 loader 的输入，这样的话，整个编译过程可以由各个独立的 loader 完成不同的步骤，一方面让每个步骤的任务更加明确，另外也可以让 loader 得以重用。</p><p>比如说如果项目要支持 sass 作为 Css 预处理器，那么顺序就是 sass-loader -&gt; css-loader -&gt; style-loader。可以看到，我们只要替换 less-loader 为 sass-loader，后两个 loader 是完全一样的。</p><p>那么，支持 css loader 的 Webpack 配置就可以用如下代码来实现：</p><pre><code>module.exports = {\n  // ...\n  module: {\n    rules: [\n      // ...\n      {\n        // 检测 less 文件\n        test: /\\.less$/,\n        // 使用了三个 loader，注意执行顺序是数组的倒序\n        // 也就是先执行 less-loader\n        use: ['style-loader', 'css-loader', 'less-loader'],\n      },\n    ],\n  },\n  //...\n};\n</code></pre><p>可以看到，在 module.rules 配置项中我们增加了一条规则，用于 Less 文件的处理。并使用了三个 loader ，用于将 less 代码最终打包到 JavaScript 文件中。</p><p>可能有同学会问了，为什么 CSS 代码会进入到 JavaScript 文件中呢？最终它是怎么应用到页面的呢？其实背后的过程主要是，生成的 CSS 代码会以字符串的形式作为一个模块打包到最终结果，然后在运行时由 style-loader 提供的一个函数 injectStylesIntoStyleTag ，来将这个模块加入到页面的 style 标签中，从而最终生效。</p><p>比如如下代码，就展示了 injectStylesIntoStyleTag 这个函数的核心部分：<strong>创建 style 标签</strong>。这里你不需要完全理解代码的内容，只需要知道它是用来动态使用 CSS 代码就可以了。</p><pre><code>function insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n\n    if (!target) {\n      throw new Error(&quot;Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.&quot;);\n    }\n\n\n    target.appendChild(style);\n  }\n\n\n  return st\n</code></pre><p>通过上面的例子，你应该已经能明白 loader 的工作原理了。想要在我们的项目中使用不同的语言，只需增加相应的 loader 就行了。比如要支持 typescript，就是配置 ts-loader，要支持 Vue 就是配置 vue-loader。</p><p>在这里，我们也看到 CSS 代码之所以能进入到最终的 JavaScript 包，是因为 style-loader 做了这个事情。那么如果我们想让生成的 CSS 文件和 JavaScript 文件分开，应该如何做呢？</p><p>这就需要使用到 plugin 了。同时呢，我们还要从 rules 中去掉 style-loader 这个配置，以避免 CSS 进入到 JavaScript 文件中。</p><p>实现提取 CSS 模块到单独 CSS 文件的 plugin 是 <strong>mini-css-extract-plugin</strong>，下面的代码就展示了这个 plugin 的用法：</p><pre><code>const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.less$/,\n        // 去掉 style-loader\n        use: ['css-loader', 'less-loader'],\n      },\n    ],\n  },\n  plugins: [\n    // ...\n    // 引入提取 CSS 的插件以及参数\n    new MiniCssExtractPlugin({\n      filename: 'static/css/[name].[contenthash:8].css',\n    }),\n  ],\n};\n</code></pre><p>这样，你只需要简单地引入 mini-css-extract-plugin 这个 plugin，就能识别到所有的 CSS 模块，完成 CSS 文件的生成了。</p><p>同时，通过刚才讲的例子，你应该也能看到 plugin 和 loader 的一个区别，就是 loader 主要用于处理不同类型的资源，将它们转换成模块；而 plugin 通常用于生成一些除了 JavaScript bundle 之外的一些打包结果，比如例子中的 index.html 和 css 文件。</p><h2>小结</h2><p>Webpack 作为目前前端开发中最为主流的构建和打包工具，它的功能非常强大。这也意味着要完整掌握它的用法，需要花费不少的精力。</p><p>当然，它虽然很重要，但并不意味着我们每个人都需要精通它的配置，以及 loader 、plugin 的开发方式。大多数情况下，只需要理解它的<strong>基本工作机制</strong>就可以了，这样已经足够你在遇到问题时，能够定位到究竟是代码问题，还是打包配置的问题。</p><p>总结来说，从这样一个前提出发，这节课我们主要介绍了 Webpack 的基本工作原理，以及 loader、plugin 这两个最核心的概念。学习的目标就是能够读懂一个 Webpack 的配置，知道自己的代码是如何最终转换成最后的 Web 应用的。当然，如果你对 Webpack 非常感兴趣，想要深入学习，可以多看<a href=\"https://webpack.js.org/\">官方文档</a>或者专门的 Webpack 教程。</p><h2>思考题</h2><p>在进行源代码打包时，通常还有一个重要的步骤，就是代码的混淆和压缩。那么在理解了 loader 和 plugin 之后，你觉得混淆和压缩这个功能，应该用 loader 还是 plugin 去实现呢？</p><p>欢迎把你的思考和想法分享在留言区，我会和你交流讨论。也欢迎把课程分享给你的同事或朋友，共同进步。我们下节课再见！</p>","neighbors":{"left":{"article_title":"16 | 按需加载：如何提升应用打开速度？","id":390121},"right":{"article_title":"18 | 单元测试：自定义 Hooks 应该如何进行单元测试？","id":391977}},"comments":[[{"had_liked":false,"id":301101,"user_name":"江谢木","can_delete":false,"product_type":"c1","uid":1563403,"ip_address":"","ucode":"E1B1B0F0F03D41","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","comment_is_top":false,"comment_ctime":1625536904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53165144456","product_id":100079901,"comment_content":"loader是针对不同类型文件间做转换、关系处理，最终生成js模块，而plugin是针对某一文件在打包过程的某一时刻做处理。混淆和压缩是针对文件进行的，所以应该用plugin。","like_count":13},{"had_liked":false,"id":300873,"user_name":"简单","can_delete":false,"product_type":"c1","uid":1113560,"ip_address":"","ucode":"3881AB829048C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/d8/1d8c38a8.jpg","comment_is_top":false,"comment_ctime":1625412343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31690183415","product_id":100079901,"comment_content":"混淆和压缩应该用plugin，loader主要做转换","like_count":8},{"had_liked":false,"id":301926,"user_name":"何以解忧","can_delete":false,"product_type":"c1","uid":1915533,"ip_address":"","ucode":"4DFE2BDBAF4919","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","comment_is_top":false,"comment_ctime":1625976800,"is_pvip":true,"replies":[{"id":"110357","content":"嗯，可以这么理解，loader 更多的是对资源的处理，plugin 则是补充处理。","user_name":"作者回复","comment_id":301926,"uid":"1018676","ip_address":"","utype":1,"ctime":1627821515,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"18805845984","product_id":100079901,"comment_content":"感觉loader像是编译阶段的，plugin像是编译后的整体的个性化处理","like_count":5},{"had_liked":false,"id":301629,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1625792484,"is_pvip":false,"replies":[{"id":"110411","content":"因为 loader 是按照数组倒序执行的，也就是从最后一个开始执行。","user_name":"作者回复","comment_id":301629,"uid":"1018676","ip_address":"","utype":1,"ctime":1627890949,"user_name_real":"Nate"}],"discussion_count":3,"race_medal":1,"score":"5920759780","product_id":100079901,"comment_content":"<br>支持 css loader 的 Webpack 配置中，style-loader 为什么是最后一个执行呢？从数组的顺序来看，它应该是在 0 的位置呀。<br>","like_count":2,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523046,"discussion_content":"因为 loader 是按照数组倒序执行的，也就是从最后一个开始执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627890949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2693152,"avatar":"https://static001.geekbang.org/account/avatar/00/29/18/20/d6350706.jpg","nickname":"苏宇","note":"","ucode":"247AF73761E612","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384611,"discussion_content":"loader的use是倒序执行的，可参见webpack文档：\nhttps://webpack.js.org/concepts/loaders/#loader-features","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626678484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2876591,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e4/af/f8cf4bc2.jpg","nickname":"Light 胖虎","note":"","ucode":"D5FCFE14172D31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554133,"discussion_content":"感觉也可以理解为，第一个位是最基础的，越往后面越复杂，所以解析下来的话应该是越来越细，可以方便理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646225639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]]}