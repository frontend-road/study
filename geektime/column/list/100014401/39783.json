{"id":39783,"title":"11 | 服务发布和引用的实践","content":"<p>在<a href=\"http://time.geekbang.org/column/article/14425\">专栏第4期</a>，我给你讲解了服务发布和引用常见的三种方式：Restful API、XML配置以及IDL文件。今天我将以XML配置方式为例，给你讲解<span class=\"orange\">服务发布和引用的具体实践以及可能会遇到的问题</span>。</p>\n<p>首先我们一起来看下XML配置方式，服务发布和引用的具体流程是什么<!-- [[[read_end]]] -->样的。</p>\n<h2>XML配置方式的服务发布和引用流程</h2>\n<p><strong>1. 服务提供者定义接口</strong></p>\n<p>服务提供者发布服务之前首先要定义接口，声明接口名、传递参数以及返回值类型，然后把接口打包成JAR包发布出去。</p>\n<p>比如下面这段代码，声明了接口UserLastStatusService，包含两个方法getLastStatusId和getLastStatusIds，传递参数一个是long值、一个是long数组，返回值一个是long值、一个是map。</p>\n<pre><code>package com.weibo.api.common.status.service;\n\npublic interface UserLastStatusService {\n     * @param uids\n     * @return\n     */\n    public long getLastStatusId(long uid);\n\n    /**\n     *\n     * @param uids\n     * @return\n     */\n    public Map&lt;Long, Long&gt; getLastStatusIds(long[] uids);\n}\n</code></pre>\n<p><strong>2. 服务提供者发布接口</strong></p>\n<p>服务提供者发布的接口是通过在服务发布配置文件中定义接口来实现的。</p>\n<p>下面我以一个具体的服务发布配置文件user-last-status.xml来给你讲解，它定义了要发布的接口userLastStatusLocalService，对外暴露的协议是Motan协议，端口是8882。并且针对两个方法getLastStatusId和getLastStatusIds，通过requestTimeout=&quot;300&quot;单独定义了超时时间是300ms，通过retries=&quot;0&quot;单独定义了调用失败后重试次数为0，也就是不重试。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; \n      xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n      xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; \n     xsi:schemaLocation=&quot;http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context-2.5.xsd\nhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\nhttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n&quot;&gt;\n\n   &lt;motan:service ref=&quot;userLastStatusLocalService&quot;\n            requestTimeout=&quot;50&quot; retries=&quot;2&quot;    interface=&quot;com.weibo.api.common.status.service.UserLastStatusService&quot;\n            basicService=&quot;serviceBasicConfig&quot; export=&quot;motan:8882&quot;&gt;\n   &lt;motan:method name=&quot;getLastStatusId&quot; requestTimeout=&quot;300&quot;\n              retries=&quot;0&quot; /&gt;\n   &lt;motan:method name=&quot;getLastStatusIds&quot; requestTimeout=&quot;300&quot;\n              retries=&quot;0&quot; /&gt;\n&lt;/motan:service&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p>然后服务发布者在进程启动的时候，会加载配置文件user-last-status.xml，把接口对外暴露出去。</p>\n<p><strong>3. 服务消费者引用接口</strong></p>\n<p>服务消费者引用接口是通过在服务引用配置文件中定义要引用的接口，并把包含接口定义的JAR包引入到代码依赖中。</p>\n<p>下面我再以一个具体的服务引用配置文件user-last-status-client.xml来给你讲解，它定义服务消费者引用了接口commonUserLastStatusService，接口通信协议是Motan。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; \n      xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n      xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; \n     xsi:schemaLocation=&quot;http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context-2.5.xsd\nhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\nhttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n&quot;&gt;\n   &lt;motan:protocol name=&quot;motan&quot; default=&quot;true&quot; loadbalance=&quot;${service.loadbalance.name}&quot; /&gt;\n&lt;motan:basicReferer id=&quot;userLastStatusServiceClientBasicConfig&quot;\n               protocol=&quot;motan&quot;  /&gt;\n\n&lt;!-- 导出接口 --&gt;\n&lt;motan:referer id=&quot;commonUserLastStatusService&quot; interface=&quot;com.weibo.api.common.status.service.UserLastStatusService&quot;\n            basicReferer=&quot;userLastStatusServiceClientBasicConfig&quot; /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p>然后服务消费者在进程启动时，会加载配置文件user-last-status-client.xml来完成服务引用。</p>\n<p>上面所讲的服务发布和引用流程看似比较简单，但在实际使用过程中，还是有很多坑的，比如在实际项目中经常会遇到这个问题：一个服务包含了多个接口，可能有上行接口也可能有下行接口，每个接口都有超时控制以及是否重试等配置，如果有多个服务消费者引用这个服务，是不是每个服务消费者都必须在服务引用配置文件中定义？</p>\n<p>你可以先思考一下这个问题，联系自己的实践经验，是否有理想的解决方案呢？</p>\n<h2>服务发布和引用的那些坑</h2>\n<p>根据我的项目经验，在一个服务被多个服务消费者引用的情况下，由于业务经验的参差不齐，可能不同的服务消费者对服务的认知水平不一，比如某个服务可能调用超时了，最好可以重试来提供调用成功率。但可能有的服务消费者会忽视这一点，并没有在服务引用配置文件中配置接口调用超时重试的次数，<strong>因此最好是可以在服务发布的配置文件中预定义好类似超时重试次数</strong>，即使服务消费者没有在服务引用配置文件中定义，也能继承服务提供者的定义。这就是下面要讲的服务发布预定义配置。</p>\n<p><strong>1. 服务发布预定义配置</strong></p>\n<p>以下面的服务发布配置文件server.xml为例，它提供了一个服务contentSliceRPCService，并且明确了其中三个方法的调用超时时间为500ms以及超时重试次数为3。</p>\n<pre><code>&lt;motan:service ref=&quot;contentSliceRPCService&quot;       interface=&quot;cn.sina.api.data.service.ContentSliceRPCService&quot;\n            basicService=&quot;serviceBasicConfig&quot; export=&quot;motan:8882&quot; &gt;\n   &lt;motan:method name=&quot;saveContent&quot; requestTimeout=&quot;500&quot;\n              retries=&quot;3&quot; /&gt;\n   &lt;motan:method name=&quot;deleteContent&quot; requestTimeout=&quot;500&quot;\n              retries=&quot;3&quot; /&gt;\n   &lt;motan:method name=&quot;updateContent&quot; requestTimeout=&quot;500&quot;\n              retries=&quot;3&quot; /&gt;\n&lt;/motan:service&gt;\n</code></pre>\n<p>假设服务引用的配置文件client.xml的内容如下，那么服务消费者就会默认继承服务发布配置文件中设置的方法调用的超时时间以及超时重试次数。</p>\n<pre><code>&lt;motan:referer id=&quot;contentSliceRPCService&quot; interface=&quot;cn.sina.api.data.service.ContentSliceRPCService&quot;     basicReferer=&quot;contentSliceClientBasicConfig&quot; &gt;\n&lt;/motan:referer&gt;\n</code></pre>\n<p>通过服务发布预定义配置可以解决多个服务消费者引用服务可能带来的配置复杂的问题，这样是不是最优的解决方案呢？</p>\n<p>实际上我还遇到过另外一种极端情况，一个服务提供者发布的服务有上百个方法，并且每个方法都有各自的超时时间、重试次数等信息。服务消费者引用服务时，完全继承了服务发布预定义的各项配置。这种情况下，服务提供者所发布服务的详细配置信息都需要存储在注册中心中，这样服务消费者才能在实际引用时从服务发布预定义配置中继承各种配置。</p>\n<p>这里就存在一种风险，当服务提供者发生节点变更，尤其是在网络频繁抖动的情况下，所有的服务消费者都会从注册中心拉取最新的服务节点信息，就包括了服务发布配置中预定的各项接口信息，这个信息不加限制的话可能达到1M以上，如果同时有上百个服务消费者从注册中心拉取服务节点信息，在注册中心机器部署为百兆带宽的情况下，很有可能会导致网络带宽打满的情况发生。</p>\n<p>面对这种情况，<strong>最好的办法是把服务发布端的详细服务配置信息转移到服务引用端</strong>，这样的话注册中心中就不需要存储服务提供者发布的详细服务配置信息了。这就是下面要讲的服务引用定义配置。</p>\n<p><strong>2. 服务引用定义配置</strong></p>\n<p>以下面的服务发布配置文件为例，它详细定义了服务userInfoService的各个方法的配置信息，比如超时时间和重试次数等。</p>\n<pre><code>&lt;motan:service ref=&quot;userInfoService&quot; requestTimeout=&quot;50&quot; retries=&quot;2&quot;                   interface=&quot;cn.sina.api.user.service.UserInfoService&quot; basicService=&quot;serviceBasicConfig&quot;&gt;\n&lt;motan:method name=&quot;addUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateUserPortrait&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;modifyUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;addUserTags&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;delUserTags&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;processUserCacheByNewMyTriggerQ&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;modifyObjectUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;addObjectUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateObjectUserPortrait&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateObjectManager&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;add&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;deleteObjectManager&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;getUserAttr&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getUserAttrList&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getAllUserAttr&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getUserAttr2&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    \n    &lt;/motan:service&gt;\n</code></pre>\n<p>可以像下面一样，把服务userInfoService的详细配置信息转移到服务引用配置文件中。</p>\n<pre><code>&lt;motan:referer id=&quot;userInfoService&quot; interface=&quot;cn.sina.api.user.service.UserInfoService&quot; basicReferer=&quot;userClientBasicConfig&quot;&gt;\n    &lt;motan:method name=&quot;addUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateUserPortrait&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;modifyUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;addUserTags&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;delUserTags&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;processUserCacheByNewMyTriggerQ&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;modifyObjectUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;addObjectUserInfo&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateObjectUserPortrait&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;updateObjectManager&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;add&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;deleteObjectManager&quot; requestTimeout=&quot;300&quot; retries=&quot;0&quot;/&gt;\n    &lt;motan:method name=&quot;getUserAttr&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getUserAttrList&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getAllUserAttr&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n    &lt;motan:method name=&quot;getUserAttr2&quot; requestTimeout=&quot;300&quot; retries=&quot;1&quot; /&gt;\n&lt;/motan:referer&gt;\n</code></pre>\n<p>这样的话，服务发布配置文件可以简化为下面这段代码，是不是信息精简了许多。</p>\n<pre><code>&lt;motan:service ref=&quot;userInfoService&quot; requestTimeout=&quot;50&quot; retries=&quot;2&quot;                   interface=&quot;cn.sina.api.user.service.UserInfoService&quot; basicService=&quot;serviceBasicConfig&quot;&gt;\n    &lt;/motan:service&gt;\n</code></pre>\n<p>在进行类似的服务详细信息配置，由服务发布配置文件迁移到服务引用配置文件的过程时，尤其要注意迁移步骤问题，这就是接下来我要给你讲的服务配置升级问题。</p>\n<p><strong>3. 服务配置升级</strong></p>\n<p>实际项目中，我就经历过一次服务配置升级的过程。由于引用服务的服务消费者众多，并且涉及多个部门，升级步骤就显得异常重要，通常可以按照下面步骤操作。</p>\n<ul>\n<li>\n<p>各个服务消费者在服务引用配置文件中添加服务详细信息。</p>\n</li>\n<li>\n<p>服务提供者升级两台服务器，在服务发布配置文件中删除服务详细信息，并观察是否所有的服务消费者引用时都包含服务详细信息。</p>\n</li>\n<li>\n<p>如果都包含，说明所有服务消费者均完成升级，那么服务提供者就可以删除服务发布配置中的服务详细信息。</p>\n</li>\n<li>\n<p>如果有不包含服务详细信息的服务消费者，排查出相应的业务方进行升级，直至所有业务方完成升级。</p>\n</li>\n</ul>\n<h2>总结</h2>\n<p>今天我给你介绍了XML配置方式的服务发布和引用的具体流程，简单来说就是服务提供者定义好接口，并且在服务发布配置文件中配置要发布的接口名，在进程启动时加载服务发布配置文件就可以对外提供服务了。而服务消费者通过在服务引用配置文件中定义相同的接口名，并且在服务引用配置文件中配置要引用的接口名，在进程启动时加载服务引用配置文件就可以引用服务了。</p>\n<p>在业务具体实践过程中可能会遇到引用服务的服务消费者众多，对业务的敏感度参差不齐的问题，所以在服务发布的时候，最好预定义好接口的各种配置。在服务规模不大，业务比较简单的时候，这样做比较合适。但是对于复杂业务，虽然服务发布时预定义好接口的各种配置，但在引用的服务消费者众多且同时访问的时候，可能会引起网络风暴。这种情况下，比较保险的方式是，把接口的各种配置放在服务引用配置文件里。</p>\n<p>在进行服务配置升级过程时，要考虑好步骤，在所有服务消费者完成升级之前，服务提供者还不能把服务的详细信息去掉，否则可能会导致没有升级的服务消费者引用异常。</p>\n<h2>思考题</h2>\n<p>如果你在实际项目中采用过XML配置的服务发布和应用方式，是否还遇到过其他问题？你是如何解决的呢？</p>\n<p>欢迎你在留言区写下自己的思考，与我一起讨论。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":26612,"user_name":"沙漠之鹰","can_delete":false,"product_type":"c1","uid":1222887,"ip_address":"","ucode":"9FB290B874317F","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/e7/b86938a1.jpg","comment_is_top":false,"comment_ctime":1537696433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"117501813425","product_id":100014401,"comment_content":"一个接口上百个方法，设计上是否不合理","like_count":28},{"had_liked":false,"id":24396,"user_name":"echo＿陈","can_delete":false,"product_type":"c1","uid":1080794,"ip_address":"","ucode":"EFAEADA8A05906","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/da/780f149e.jpg","comment_is_top":false,"comment_ctime":1536973904,"is_pvip":false,"replies":[{"id":"8936","content":"是的，兼容性很重要","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1536995692,"ip_address":"","comment_id":24396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57371548752","product_id":100014401,"comment_content":"遇到过版本变更时序列化兼容问题<br>我们用的dubbo，经常会出现，某个dubbo接口的API升级：包含新增方法，或者某个方法的入参或者返回值新增字段。<br>我们的服务提供者更新消费者并不是一定要更新，如果我的api改动没有改动某个消费者调用的方法或者那个消费者可以兼容提供者的改动，那么消费者是可以不升级的。也就是允许系统中存在：服务提供者依赖的api是1.1版本，而服务消费者依赖的的api的jar包是1.0版本……这样的情况。<br>以前用hessian2做序列化方式，服务提供者单方面引用新版本api，老的消费者一样能正常调用。可是有同事听说FST序列化更快更强……于是某些接口改动了序列化方式为FST……发现这时依赖老版本api的服务都异常了……<br>经验：性能是一方面，但也要考虑业务兼容性","like_count":14,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423968,"discussion_content":"是的，兼容性很重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536995692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36478,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1226695,"ip_address":"","ucode":"710E4AC60A119F","user_header":"https://static001.geekbang.org/account/avatar/00/12/b7/c7/3ff2ba37.jpg","comment_is_top":false,"comment_ctime":1541124496,"is_pvip":false,"replies":[{"id":"13209","content":"放在客户端本地","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1541425501,"ip_address":"","comment_id":36478,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27310928272","product_id":100014401,"comment_content":"这个服务引用配置文件放在哪里","like_count":7,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427884,"discussion_content":"放在客户端本地","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541425501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274193,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibXsyqvXBW8sjMuZoEXMBic8AcfGYgcKibUXMXUw9pJrlicFibN4ziadluP9YnUa4djT2M9lUKxrbd4HA/132","nickname":"昆泽","note":"","ucode":"EBEF3EF1A24C33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324751,"discussion_content":"服务发布配置文件是从注册中心获取的，服务引用配置文件如何获取、及时更新？不是存在跟服务发布配置文件一样的问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605165900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98003,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1558869450,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18738738634","product_id":100014401,"comment_content":"对于超大规模的分布式系统来说 服务详细配置信息放到消费者侧的方案不可取 因为涉及服务众多 底层服务根本不知道有多少上层服务对其有依赖 <br><br>所以服务详细描述文件还是要放在配置中心里 解耦提供者与消费者 <br>同时对提供者和配置中心提出要求<br>1 提供者：保证接口前向兼容<br>2 配置中心：明确性能规格 设置限流策略","like_count":5},{"had_liked":false,"id":35000,"user_name":"智哥哥","can_delete":false,"product_type":"c1","uid":1040008,"ip_address":"","ucode":"B1CCFE086C39FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/88/34337eba.jpg","comment_is_top":false,"comment_ctime":1540378273,"is_pvip":false,"replies":[{"id":"12864","content":"极客目前没有这个功能，这里是抽取的代码片段，可以看下开源motan的实现","user_name":"作者回复","user_name_real":"古月中心相心","uid":"1010144","ctime":1540956333,"ip_address":"","comment_id":35000,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18720247457","product_id":100014401,"comment_content":"&lt;motan:service ref=&quot;userLastStatusLocalService&quot;<br>            requestTimeout=&quot;50&quot; retries=&quot;2&quot;    interface=&quot;com.weibo.api.common.status.service.UserLastStatusService&quot;<br>            basicService=&quot;serviceBasicConfig&quot; export=&quot;motan:8882&quot;&gt;<br>   &lt;motan:method name=&quot;getLastStatusId&quot; requestTimeout=&quot;300&quot;<br>              retries=&quot;0&quot; &#47;&gt;<br>   &lt;motan:method name=&quot;getLastStatusIds&quot; requestTimeout=&quot;300&quot;<br>              retries=&quot;0&quot; &#47;&gt;<br>&lt;&#47;motan:service&gt;<br>这里的userLastStatusLocalService定义在哪呢？ <br><br>可以提个建议：每一章都把源码打包附加到文章尾部可以吗？只提供部分源码比较容易把人弄的越来越晕","like_count":4,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427408,"discussion_content":"极客目前没有这个功能，这里是抽取的代码片段，可以看下开源motan的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540956333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32143,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1539434281,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"14424336169","product_id":100014401,"comment_content":"使用dubbo遇到的一些坑。<br><br>之前没有形成规范，很多发布的服务都没有配置retry-time和和timeout导致经常出一些莫名其妙的问题。有些业务办理接口没有做幂等，接口超时导致重试，产生脏数据等。<br><br>后续主要通过团队形成一些规范来规避问题。<br><br>","like_count":4},{"had_liked":false,"id":25816,"user_name":"Sonny721","can_delete":false,"product_type":"c1","uid":1104291,"ip_address":"","ucode":"C95DD306BFBE54","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/a3/2856b5b5.jpg","comment_is_top":false,"comment_ctime":1537444577,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14422346465","product_id":100014401,"comment_content":"多个服务消费者调用了服务提供者A，如果服务提供者A的接口参数发生变化，那所有消费者都需要变更，是否有好的解决方案呢？","like_count":3,"discussions":[{"author":{"id":1027789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ae/cd/3bffed26.jpg","nickname":"kitten","note":"","ucode":"E451DE087CB7CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354943,"discussion_content":"接口多版本呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615367111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2815900,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/f7/9c/69c5c5dc.jpg","nickname":"越锋利","note":"","ucode":"63E9E3F3C7D53D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407794,"discussion_content":"接口要向下兼容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635124051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382267,"discussion_content":"配置路路由规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625493138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196563,"discussion_content":"这个感觉无解，毕竟消费者是没有办法热升级的，服务提供者尽量保证向前兼容很重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583339307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24558,"user_name":"Geek_af3d01","can_delete":false,"product_type":"c1","uid":1107401,"ip_address":"","ucode":"58C5FDD61C955E","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/c9/fa9199d0.jpg","comment_is_top":false,"comment_ctime":1537143480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422045368","product_id":100014401,"comment_content":"目前只会spring cloud ，dubbo没有细研究过 只是看dubbo 官网会使用，觉得体系都差不多 没有太多机会去实战","like_count":3},{"had_liked":false,"id":314932,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1633592856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10223527448","product_id":100014401,"comment_content":"服务发布和引用的步骤是：<br>  1、服务提供者定义接口，包括接口名，方法名，方法入参，方法出参等<br>  2、在服务发布配置文件中配置接口名、通信协议、端口号，方法调用超时时间和重试次数<br>  3、在服务引用配置文件中配置接口名、通信协议<br><br>服务发布预定义配置：为了解决多个服务消费者引用同一个服务的问题，可以用服务发布预定义配置的方式来减少消费者端的配置工作。<br><br>服务引用定义配置：但是随着服务方法数量的增多，每个方法都有自己的超时时间和重试次数信息，服务提供者所发布服务的详细配置信息都需要存储在注册中心中，配置信息占据内存容量会过大，每个消费者通过注册中心拉取最新配置信息时，会导致网络带宽被打满的情况。这种情况下，最好是把服务发布端的详细服务配置信息转移到服务引用端，注册中心中就不需要存储服务提供者发布的详细服务配置信息。<br><br>服务配置升级：服务升级就是把配置信息从服务发布配置文件中迁移到服务引用配置文件中。需要按照特定的流程来，先通过升级两台服务器观察升级是否成功，如果没问题再进行全部服务器的升级。","like_count":3},{"had_liked":false,"id":259255,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1604663956,"is_pvip":true,"discussion_count":1,"race_medal":5,"score":"10194598548","product_id":100014401,"comment_content":"目前用到的微服务，都是基于REST的接口，没有使用XML形式的接口，对于文中提到的服务引用文件，不是很清楚，是不是可以把它理解为Feign中的服务接口文件？","like_count":2,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382268,"discussion_content":"就类似于mybatis和mapper文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625493202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54170,"user_name":"雍","can_delete":false,"product_type":"c1","uid":1070728,"ip_address":"","ucode":"33FD0A37A41ACF","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/88/1cf945fe.jpg","comment_is_top":false,"comment_ctime":1545799966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135734558","product_id":100014401,"comment_content":"服务发布预定义配置如果遇到提供者接口超级多的极端情况的话建议把配置信息转移到服务信用配制中。请问老师如果这么做的话那不就每一个客户端都要配置一份了吗？这样的话客户端配制参差不齐的问题又出现了，总觉得这里跟您前面讲的矛盾了","like_count":3},{"had_liked":false,"id":324936,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1638748216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5933715512","product_id":100014401,"comment_content":"motan这么多方法定义在xml，上一个见到的，还是struts2.","like_count":1},{"had_liked":false,"id":103494,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1560467957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855435253","product_id":100014401,"comment_content":"MOTAN是细到方法级别的，我们的JSF是到接口级别，我认为调用的详细信息应该放在调用端。方法级别针对每个调用方的限流MOTAN是怎么实现的？","like_count":2},{"had_liked":false,"id":69612,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1550797293,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5845764589","product_id":100014401,"comment_content":"客户端是怎么知道服务端在哪里，ip地址或者域名没看到在配置文件中配置呀","like_count":1,"discussions":[{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196565,"discussion_content":"通过服务发现，一般有专门的注册中心干这个事情的，服务提供方把自己的实例注册到注册中心，消费者起来的时候去注册中心查~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583339379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67861,"user_name":"shine","can_delete":false,"product_type":"c1","uid":1423598,"ip_address":"","ucode":"8372A2EBC237E5","user_header":"https://static001.geekbang.org/account/avatar/00/15/b8/ee/c0bc62ae.jpg","comment_is_top":false,"comment_ctime":1550302795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845270091","product_id":100014401,"comment_content":"课程中提到的服务引用配置文件：user-last-status-client.xml和client.xml是同一个文件吗？<br>那些坑里，1. 服务发布预定义配置 和 2. 服务引用定义配置 是不是只有这二种配置方式，而且是相互对立的，要根据实际情况选择？","like_count":2},{"had_liked":false,"id":325638,"user_name":"WeDataSphere","can_delete":false,"product_type":"c1","uid":1597612,"ip_address":"","ucode":"2D8B29DAA31DF8","user_header":"https://static001.geekbang.org/account/avatar/00/18/60/ac/1d8c0ef0.jpg","comment_is_top":false,"comment_ctime":1639055812,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639055812","product_id":100014401,"comment_content":"如果服务提供者和服务消费者不在同一台机器，是不是消费者机器需要拷贝提供者的jar，以达到本地调用的效果？","like_count":0},{"had_liked":false,"id":296059,"user_name":"木石头","can_delete":false,"product_type":"c1","uid":1105897,"ip_address":"","ucode":"8B7BC3988579A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLxEbhSEziblBNFkQF7iblTiaC4Q6A0dib8riciaPUn10o2FaPRJnWxQq1KRUbRPPmBU5zluwibUqFUZJSg/132","comment_is_top":false,"comment_ctime":1622723225,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1622723225","product_id":100014401,"comment_content":"目前我们的微服务用的springcloud，服务间调用用Feigh，这个Feign调用应该是另一种形式的服务发布和应用吧","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382269,"discussion_content":"是的，feign集成了spring mvc的注解，底层基于http","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625493366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280003,"user_name":"悦开心","can_delete":false,"product_type":"c1","uid":1679208,"ip_address":"","ucode":"790F0EE086644B","user_header":"https://static001.geekbang.org/account/avatar/00/19/9f/68/d7b9d0d1.jpg","comment_is_top":false,"comment_ctime":1614051131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614051131","product_id":100014401,"comment_content":"请教：在服务配置升级过程中，服务消费者众多，如何观察是否所有服务消费者引用时都包含了服务详细信息？","like_count":1},{"had_liked":false,"id":280002,"user_name":"悦开心","can_delete":false,"product_type":"c1","uid":1679208,"ip_address":"","ucode":"790F0EE086644B","user_header":"https://static001.geekbang.org/account/avatar/00/19/9f/68/d7b9d0d1.jpg","comment_is_top":false,"comment_ctime":1614050991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614050991","product_id":100014401,"comment_content":"请教下，在服务配置升级过程中，如何观察所有服务消费者引用时都包含了服务详细信息？","like_count":0},{"had_liked":false,"id":221879,"user_name":"马振","can_delete":false,"product_type":"c1","uid":1136329,"ip_address":"","ucode":"94234F533219C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","comment_is_top":false,"comment_ctime":1590627446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590627446","product_id":100014401,"comment_content":"使用mota协议，不需要引入包之类的操作吗？","like_count":0},{"had_liked":false,"id":206905,"user_name":"benying","can_delete":false,"product_type":"c1","uid":1247522,"ip_address":"","ucode":"DEBAB485F381CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","comment_is_top":false,"comment_ctime":1586955593,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586955593","product_id":100014401,"comment_content":"并观察是否所有的服务消费者引用时都包含服务详细信息<br><br>请问这个如何观察？谢谢","like_count":0},{"had_liked":false,"id":164427,"user_name":"Geek_6ea8f7","can_delete":false,"product_type":"c1","uid":1497495,"ip_address":"","ucode":"8711EF9355FD87","user_header":"","comment_is_top":false,"comment_ctime":1576986947,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576986947","product_id":100014401,"comment_content":"同一个接口，如果客户端和服务端同时定义了超时时间和重试次数，哪个生效?","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382270,"discussion_content":"以客户端的为准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625493396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1865777,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/78/31/c7574423.jpg","nickname":"嗝~~！","note":"","ucode":"E739C327BF68E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285672,"discussion_content":"客户端","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592911089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108358,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1561727750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561727750","product_id":100014401,"comment_content":"motan支持多版本发布吗？跟dubbo异同点能讲下吗？","like_count":0},{"had_liked":false,"id":57881,"user_name":"招耳","can_delete":false,"product_type":"c1","uid":1001825,"ip_address":"","ucode":"D163E1A6377CF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/61/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1546934317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546934317","product_id":100014401,"comment_content":"为什么要每个方法都声明出来呢?直接到类呢 ","like_count":0},{"had_liked":false,"id":39340,"user_name":"英宁","can_delete":false,"product_type":"c1","uid":1241380,"ip_address":"","ucode":"C6CB1C4FFCADC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/24/d15cf6af.jpg","comment_is_top":false,"comment_ctime":1542251162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542251162","product_id":100014401,"comment_content":"“服务提供者所发布服务的详细配置信息都需要存储在注册中心中，这样服务消费者才能在实际引用时从服务发布预定义配置中继承各种配置。”，没看懂这里为啥，是有些详细信息服务端配置放不了嚒？比如说呢？","like_count":0},{"had_liked":false,"id":32462,"user_name":"王晓军","can_delete":false,"product_type":"c1","uid":1213617,"ip_address":"","ucode":"B27E9FB5861B99","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/b1/72e7744e.jpg","comment_is_top":false,"comment_ctime":1539581166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539581166","product_id":100014401,"comment_content":"胡老师，如何合理的规划mianx前端的服务和面向服务的服务，您有什么建议吗？还是说，任何一个服务都可以由前端调用也可以由其他的服务调用","like_count":0},{"had_liked":false,"id":32173,"user_name":"有渔@蔡","can_delete":false,"product_type":"c1","uid":1099829,"ip_address":"","ucode":"4AB669229892C8","user_header":"","comment_is_top":false,"comment_ctime":1539476502,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1539476502","product_id":100014401,"comment_content":"这里的mota协议跟dubbo是什么关系？","like_count":0,"discussions":[{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196567,"discussion_content":"我理解这里的 motan协议是一种传输协议，类似 HTTP 这样，只不过它是由微博自己实现的RPC传输协议","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583339541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32146,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1539434921,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1539434921","product_id":100014401,"comment_content":"并观察是否所有的服务消费者引用时都包含服务详细信息。<br>服务端怎么看到消费者的引用配置？","like_count":0},{"had_liked":false,"id":30950,"user_name":"吴浩","can_delete":false,"product_type":"c1","uid":1142224,"ip_address":"","ucode":"EA91647FF05EA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/d0/6c2b8877.jpg","comment_is_top":false,"comment_ctime":1539051515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539051515","product_id":100014401,"comment_content":"服务配置升级哪里没大看懂<br><br>    服务提供者升级两台服务器，在服务发布配置文件中删除服务详细信息，并观察所有的服务消费者引用时都包含服务详细信息。<br><br>     最后得出如果包含则升级成功，我想问，不是已经删除了发布配置文件中的服务详细信息，那怎么还是包含则升级成功，觉得上面那句&quot;在服务发布配置文件中删除服务详细信息&quot;话，应该是删除升级两台服务器以外的其他服务器发布配置文件的服务详细信息吧","like_count":0},{"had_liked":false,"id":30832,"user_name":"wuhulala","can_delete":false,"product_type":"c1","uid":1191143,"ip_address":"","ucode":"6DBF2C9E19B930","user_header":"https://static001.geekbang.org/account/avatar/00/12/2c/e7/3c0eba8b.jpg","comment_is_top":false,"comment_ctime":1539007536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539007536","product_id":100014401,"comment_content":"老师您好 在接口定义好之后 如何减轻消费者对api的强依赖性  比如A服务接口变动之后 增删参数 导致了B消费者调用失败 比如序列化问题 如何提高这种容错性呢","like_count":0},{"had_liked":false,"id":25447,"user_name":"莲花","can_delete":false,"product_type":"c1","uid":1220494,"ip_address":"","ucode":"3260F7DA59332D","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/8e/45ffff8f.jpg","comment_is_top":false,"comment_ctime":1537331404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537331404","product_id":100014401,"comment_content":"dubbo本身就会有provider和consumer的xml定义配置。这个和引用文件什么关系？没怎么明白","like_count":1},{"had_liked":false,"id":25355,"user_name":"张振华","can_delete":false,"product_type":"c1","uid":1201810,"ip_address":"","ucode":"292EFD886FC55A","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/92/5cea89e6.jpg","comment_is_top":false,"comment_ctime":1537318891,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537318891","product_id":100014401,"comment_content":"Spring. cloud.呢","like_count":0},{"had_liked":false,"id":24438,"user_name":"少帅","can_delete":false,"product_type":"c1","uid":1045791,"ip_address":"","ucode":"EF88F62C236594","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/1f/577265ea.jpg","comment_is_top":false,"comment_ctime":1537004546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537004546","product_id":100014401,"comment_content":"注解貌似没有找到方法级别的配置","like_count":0}]}