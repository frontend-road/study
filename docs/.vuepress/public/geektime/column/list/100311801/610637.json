{"id":610637,"title":"01｜DDD小传：领域驱动设计为什么这么火？","content":"<p>你好，我是钟敬。</p><p>今天咱们正式开始学习领域驱动设计（DDD）。</p><p>虽然DDD在这几年越来越流行，但是对于它的一些基本问题，业界仍然有很多不同看法。</p><p>有人说，DDD是划时代的创新；但也有人说，DDD只是新瓶装旧酒，毫无新意；有人认为，DDD仅仅是为了开发微服务；也有人认为，DDD只是一种面向对象编程的方法；还有人以为，DDD只是少数高手的专利。</p><p>这些看法都是片面的，说明还有不少人并没有真正理解DDD的基本概念。对基本概念缺乏了解，必然会影响对DDD的理解和学习。</p><p>所以，这节课咱们先聊聊DDD是什么，DDD的来源，DDD解决了什么问题以及DDD在这几年流行起来的原因。了解了这些，相信你对上面的问题就会有一个正确的认识，也会为后续的学习打下基础。</p><h2>DDD说的是什么？</h2><p>2003年，Eric Evans 写了《领域驱动设计：软件核心复杂性应对之道》一书，正式提出了这种方法。领域驱动设计的英文是 Domain-Driven Design，所以简称 DDD。下面就是这本书的中英文封面：</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/8e/e49e4df868dfaa8d13552c3b1e79498e.jpg?wh=1920x1006\" alt=\"图片\" title=\"《领域驱动设计：软件核心复杂性应对之道》的中英文封面\"></p><p>按照作者自己的说法，“DDD是一种开发复杂软件的方法”。</p><p>为了把意思说得更透彻，我把作者的原话做一个扩展：“DDD是一种开发<strong>复杂</strong>软件的<strong>系统化</strong>的<strong>方法学</strong>和<strong>思想</strong>”。咱们下面掰一下这句话。</p><!-- [[[read_end]]] --><p>首先，到底<strong>什么是方法学？</strong></p><p>方法学的英文名是 methodology。这么说吧，假如你Java代码写得特别溜，那么可以说你掌握了面向对象的<strong>编程方法</strong>；假如你还很熟悉面向对象的设计原则，掌握很多设计模式，那可以说你懂面向对象的<strong>设计方法</strong>；假如你能为业务概念构建领域模型，那么你就懂了面向对象的<strong>分析方法。<strong>面向对象的分析、设计、编码三种方法融会贯通，成为一个有机的整体，这个叫面向对象的</strong>方法学</strong>。</p><p>我们发现，很多小伙伴都能熟练掌握编程方法，其中一些小伙伴，能掌握设计方法，但掌握分析方法的，就很少了。而分析方法，或者说领域建模的方法，正是DDD的重点。关于什么是领域建模，咱们在后面的课程中还会详细讲。</p><p>刚才说，DDD是<strong>系统化</strong>的方法学。那么<strong>什么是系统化呢</strong>？</p><p>咱们用数学举个例子。古代数学家祖冲之花了一辈子时间，用“割圆术”把圆周率算到小数点后7位，在当时已经是世界领先了。而现在的大学生，只要掌握了微积分，用一天的时间算出来的圆周率，就比祖冲之一辈子算出来的还准。</p><p>那么是不是可以说，现在随便一个大学生，智商都比祖冲之高呢？这可不见得。之所以我们算得比祖冲之准，是因为前辈们总结了微积分这套方法，我们站在了巨人的肩膀上才能做到。微积分，就是解决高等数学问题的系统化的方法。</p><p>所以，系统化方法的作用在于，提供了一套相对容易的步骤，能够使我们这些中等智商的人，也能做到原来高智商的人才能做到的事情，从而让你能够省出时间和脑力，来探索更复杂的问题。在软件开发领域，DDD就是这样一套系统化的方法学。</p><p>不过，据说有人问过Evans本人：“DDD是一种方法学吗？” Evans说，DDD不只是一种方法学，更重要的是背后的一套开发软件的思想和哲学。那么，<strong>DDD中又蕴含着哪些思想和哲学呢？</strong></p><p>归纳一下，大概有构建知识、分而治之、抓大放小、统一语言、抽象化、可视化、协作以及演进等等。凡是说到思想，都是一些大词儿，听起来都对，但是感觉好像没什么用，关键是不知道怎么落地。</p><p><strong>而DDD恰恰是通过总结了一套系统化的方法学，能够把这些大词落地</strong>。具体做法，我们会在后续的课程中讲解。</p><h2>DDD的来源</h2><p>为了让你进一步理解DDD的含义，我们再了解一下DDD的来源。</p><p>按照作者在原书中的说法，DDD是来自面向对象的方法学和敏捷软件开发。DDD对它们进行了总结和提炼，使之更容易学习和实践。</p><p>业界有一句话 “DDD 就是 OO Done right”。OO就是面向对象，也就是说把面向对象做对了，就是DDD。也可以反过来说，面向对象本来就是“领域驱动”的。</p><p>不过，面向对象方法学从80年代兴起，到了 2000 年前后已经走向成熟。那么问题就来了：既然有了面向对象，我们为什么还要提DDD呢？这是因为传统的面向对象方法学仍然存在一些问题。</p><h2>传统面向对象方法学的问题</h2><p>早期面向对象的成功，主要是在几个特定的领域，比如计算机语言、图形用户界面、办公自动化软件等等，但在企业应用方面还没有取得成功。所谓企业应用，包括像银行的贷款系统、保险公司的理赔系统、电信公司的计费系统等等。</p><p>那个时候的面向对象方法学还不能很好地应用于企业应用，大体上有以下几个原因。</p><p><strong>第一个原因是，很多开发人员走了一条只重技术不重业务的弯路。</strong>企业应用是用来解决业务问题的，所以我们应该首先把业务研究清楚，再通过技术手段来实现。但很多开发人员把主要精力放到技术的研究上，比如语言、框架、工具等等。以为把技术学会了，自然就能把系统开发好。</p><p>重技术、不重业务的思想造成了业务和技术人员之间难以相互理解，技术人员难以真正满足业务需求，如果连需求的方向都搞错了，那么技术再纯熟也会南辕北辙。这样的弯路走了十几年，早期面向对象方法学的大好形势也就烟消云散了。</p><p><strong>第二个原因是，围绕业务进行开发的方法本身就不好学。</strong>面向对象方法学主要是围绕领域建模开展的。领域建模这个东西，看老师傅做的时候好像挺简单，新手一上去，怎么做都不对。</p><p>这是因为，领域建模是一种“手艺”。凡是手艺，都不是看看书、学学理论就能掌握的，而是要经过实践中的磨炼。很多小伙伴听了DDD的课，也看了DDD的书，但是没法在实践中真正解决复杂的问题，就是因为没掌握这门手艺。</p><p><strong>第三个原因是，早期面向对象方法学主要考虑的是建模技术，很少考虑协作问题。</strong>历史上很多伟大的软件开始时都是个人作品，比如UNIX和C语言。作者在一开始是写给自己用的，所以并不存在协作问题。但是企业应用则不同，多数都是团队作战。即使只有一线开发人员，也免不了和需求方打交道。所以协作变得很重要。</p><p><strong>最后一个原因是难以适应变化。</strong>企业应用的需求往往变化频繁，很多变化根本无法预料。传统的面向对象方法学也很少讨论怎样应对变化的需求。</p><h2>DDD的解决之道</h2><p>可以说，DDD正是为了解决上面这些问题而提出的。首先你从“领域驱动设计”这个名字就可以看出来。“领域”指的就是软件系统要解决的业务问题，也可以叫“业务领域”。用领域来驱动设计，就是说要从业务出发进行系统的设计。强调这个原则，就是希望把开发者从只重技术的弯路上拉回来。</p><p>要搞清业务，就要学会领域建模。前面也说了，这并不好学，那怎么办？DDD采用了“模式”的方法。</p><p>我们都知道，老专家做事比新手做得好，说明专家心里一定有些新手不知道的东西。这些东西以前不容易讲清楚，后来有人把专家心里的这些高招都进行了系统化的梳理，每一条都是解决特定难题的通用的解决方案，这就是所谓“模式”。</p><p>计算机界最有名的是设计模式，后来又有分析模式、架构模式等等。读这些讲模式的书，就好像同时有好几个大师在给你讲课一样。通过学习模式，原来不容易掌握的东西就变得相对容易了。</p><p>Eric Evans 正是对面向对象方法学和敏捷软件开发方法进行了提炼，总结出了一套围绕领域建模进行软件开发的模式，一共有四十多个。这些模式成为《领域驱动设计》这本书的主体。</p><p>除了模式，书里还有一套相关的原则和实践。其中最基础的模式包括：模型驱动设计，实体、值对象等等。这些在后续的课程中，咱们都会讲清楚。</p><p>另一方面，领域驱动设计非常强调业务人员和技术人员要一起协作进行领域建模，在这个过程中提炼领域知识。和协作密切相关的模式有通用语言、模型驱动设计、限界上下文等等。实际上，这几个模式贯穿了整个DDD。</p><p>此外，DDD提出了所谓“柔性设计”的概念，使得模型和系统可以随着需求的变化而演进。什么意思呢？书里打了一个比方：这就好比一副新的皮手套，开始时整副手套都很僵硬；戴得久了，关节处就会自然变得柔软，而其他部分还是比较硬的。</p><p>同样，在软件设计中，也不是一开始就把所有地方都设计得很灵活，而是先进行“足够的”和“整洁的”设计。</p><p>随着业务变化，将变化频繁的部分重构得越来越灵活，而不常变化的部分则保持不变。也就是说，模型中的哪些部分需要设计得灵活，是自然演进形成的，这样就避免了“过度设计”。这个过程就是柔性设计。而这个重构的过程，也是不断加深领域知识理解的过程。</p><p>关于协作和演进，正是DDD的来源之一，敏捷软件开发所解决的重点问题。</p><h2>从“沉寂”到“爆火”</h2><p>看到这里，你是不是觉得DDD还不错呀？不过，《领域驱动设计》这本书其实是2003年写的，到现在将近20年了。直到最近几年，才真正开始普及起来。</p><p>你可能会问了，既然DDD这么好，为什么之前不火，现在才火起来呢？</p><p>其实，在DDD刚出现的时候，很多企业软件还不太复杂。一些复杂的软件，变化也不像现在这样频繁。甚至还有一些企业，干脆每隔四五年把原来的系统推翻重建一次。</p><p>另一方面，当时一些新兴的产业，例如互联网，还处在跑马圈地、野蛮生长的阶段。这时关注的是系统快速上线，抢占市场，至于软件质量好不好，容不容易维护，暂时不是考虑的重点。</p><p>在这种情况下，DDD就成了一种“屠龙术”。杀龙是一项比较困难的技术，但是就算学会了，全世界也找不到几条龙，所以屠龙术就显得没有什么用处。DDD就面临着这样的尴尬，或者说，从整个业界来看，必要性还不够强。</p><p>另一方面，DDD普及的一些前提条件也还没准备好。</p><p>首先是敏捷软件开发刚刚出现不久，还不普及。如果没有迭代开发、持续重构、测试驱动、持续集成等敏捷实践的支持，构建良好的领域模型并在代码上落地是很困难的。</p><p>其次是配套的开发框架还不成熟。那时J2EE 还被认为是企业应用事实上的标准，而基于这种框架开发程序，是很难和DDD的领域模型相衔接的。2004年，Spring 发布了1.0版，从技术上基本解决了EJB的问题，理论上可以比较好地支持DDD。然而Spring的真正普及，还要假以时日。</p><p>那么DDD为什么在这几年又火起来了呢？</p><p><strong>首先是，数字化时代的到来，使DDD变得非常有必要。</strong></p><p>数字化时代，技术逐渐成为企业核心竞争力的主要因素，无论业务还是系统都变得更加复杂。因此，如何将业务和技术融为一体，就成了很多企业的主要问题，而这正是DDD的主要优势。</p><p>行业竞争的加剧也要求系统具有更好的用户体验、更高的质量、更快地满足变化的需求。这些问题很难解决，必须引入系统化的方法。再说了，云计算、微服务等新技术架构的产生，也需要方法学的支持。可以说，“恶龙”已经遍地都是，“屠龙术”终于有了用武之地。</p><p><strong>第二，DDD普及的道路已经铺好，这项技术逐渐变得可行。</strong></p><p>现在，敏捷软件开发已经普及。迭代、演进、协作等思想已经深入人心。DevOps技术应用得也日益广泛。而且Spring boot等轻量级框架已经得到广泛使用。这些框架支持了领域模型与具体技术的关注点分离，使开发人员从技术细节中解放出来，将更多的精力投入到领域逻辑本身的分析和设计。</p><p>再者，相关的架构实践也已经研究得比较透彻，像整洁架构、事件驱动架构以及CQRS等等，都有力地支持了DDD的落地实施。DDD本身也在不断完善，比如补充了像领域事件等新的模式，出现了事件风暴等新的实践。</p><p>可以说是天时地利人和皆备，DDD 终于咸鱼翻身、星火燎原了。</p><h2>总结</h2><p>好，现在我们来总结一下。</p><p>今天我们介绍了DDD的概念、内容，以及近年来兴起的原因。总的来说，DDD是一种开发<strong>复杂</strong>软件的<strong>系统化</strong>的<strong>方法学</strong>和<strong>思想。</strong></p><p>DDD建立在面向对象方法学和敏捷软件开发方法之上，一方面保留了面向对象的精华，另一方面又弥补了早期方法的不足。</p><p>DDD从面向对象和敏捷中提炼出了一套原则、模式和实践，使面向对象方法学在企业应用中更加容易学习和掌握。</p><p>DDD的核心是领域建模。领域模型是浓缩的领域知识。此外，DDD还重视业务与技术人员的沟通，以及如何应对变化。</p><p>最后，我想说，数字化时代为软件开发带来了新的挑战。如何实现业技融合，如何应对复杂多变的需求，如何防止架构和代码的腐化等问题，需要新的解决办法。而DDD正是顺应了时代的要求，才日益普及起来。</p><h2>思考题</h2><p>下面有两道思考题：</p><p>1.有人说DDD的目的就是为了开发微服务，你同意这种说法吗，为什么？</p><p>2.有人说DDD是创新，有人说不是，你的看法是怎样的呢？</p><p>欢迎在评论区分享你的想法。下一节课，我们将从实战中体会DDD的魅力，开启第一个迭代。</p>","neighbors":{"left":{"article_title":"开篇词｜带你吃透DDD","id":610620},"right":{"article_title":"02｜迭代一概述：怎样开启一个麻雀虽小五脏俱全的项目？","id":611168}},"comments":[{"had_liked":false,"id":363963,"user_name":"骆驼、","can_delete":false,"product_type":"c1","uid":1443660,"ip_address":"广东","ucode":"252ECDB1524867","user_header":"https://static001.geekbang.org/account/avatar/00/16/07/4c/f9852f8f.jpg","comment_is_top":true,"comment_ctime":1670397019,"is_pvip":false,"replies":[{"id":132336,"content":"很多要点您都说得不错。有一点要澄清一下，作为微服务划分依据的，是“限界上下文”而不是领域。等到后面学到限界上下文，我再说说它和领域、子域的关系。\n关于您指出的微服务粒度过细的问题，确实很常见，这一点也会在后面讲限界上下文的时候讨论。现在先说一点，就是微服务的粒度可以参考团队的“认知边界”。您可以先琢磨琢磨。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670506753,"ip_address":"广东","comment_id":363963,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1、我觉得DDD的出现是为了应对业务需求多变的场景，它将业务划分为不同领域，同一类业务形成一个领域聚集在一起，不同业务相互隔离，当需求变更时，只需要变动业务对应的领域部分即可，一般都是结合设计模式进行开发，保证系统的可维护性，另外在代码层面上体现在尽可能的减少代码之间的耦合，避免牵一发而动全身。而微服务在我看来是一种系统架构设计，他的出现是主要为了解决单体应用无法支撑高并发的业务场景，但是微服务如何划分一直没有一个明确的概念，而DDD领域划分的思想就与微服务的划分相一致，这就导致DDD是微服务划分的一种重要手段。但是这里面如果DDD领域划分的过于细致，就会导致微服务的数量就会增多，对于一般企业而言没有那么多的资源去维护这种情况，我也不知道该咋解决。\n2、对于我来说DDD应该算是创新，毕竟工作5年了，之前接触过的项目一直采用的是MVC模式开发，很多地方一开始设计的可能很好，随着开发时间的推移，到后来却越来越难维护，有的时候改一行代码，其他的地方就出问题了，耦合性太强，结果不得不导致重新写代码了。而DDD就明确要求各领域之间相互隔离，不能直接引用，就自然而然的解耦了","like_count":7,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595950,"discussion_content":"很多要点您都说得不错。有一点要澄清一下，作为微服务划分依据的，是“限界上下文”而不是领域。等到后面学到限界上下文，我再说说它和领域、子域的关系。\n关于您指出的微服务粒度过细的问题，确实很常见，这一点也会在后面讲限界上下文的时候讨论。现在先说一点，就是微服务的粒度可以参考团队的“认知边界”。您可以先琢磨琢磨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670506753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760458,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/1f/0a/3dd0cabc.jpg","nickname":"黑夜看星星","note":"","ucode":"20A2FDA0CC5DC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628561,"discussion_content":"其他方法学不也是再做类似的事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695527928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363917,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"广东","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":true,"comment_ctime":1670338372,"is_pvip":true,"replies":[{"id":132281,"content":"是的，DDD是方法学层面，微服务是架构风格层面。DDD抽象于具体的架构风格。DDD可以帮助设计微服务，但不仅仅用于微服务。领域模型确实是DDD中最有价值的部分之一。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670340583,"ip_address":"广东","comment_id":363917,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"其实我有一点怀疑 DDD 现在很”火“这个说法，在 Google trends 上可以看到 DDD 的热度不及 2004 年高峰时的一半，另外就是似乎在国内相对热度比较高。\n\n还是打算认真的学习一下 DDD，看能否在理解业务和编写代码上有所帮助。\n\nDDD 的目的显然不是为了开发微服务，可能两者背后有一些相同的想法，DDD 出现的早，而微服务大概要晚十多年的样子。DDD 是”开发复杂软件的系统化方法学和思想“，微服务显然不是。\n\n我觉的 DDD 可以算是创新，但是更有价值的可能是通过 DDD 的方法论建立起来的领域模型。","like_count":4,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601191,"discussion_content":"如果看了专栏后面的内容，这个专栏其实包括的内容很多，有点类似于”基于DDD的面向对象分析、设计、编码课“\n\n面向对象方法学应用于企业应用的难点：不重视业务，领域建模困难，协作问题，适应变化；\n\nDDD 的解决方案：从业务出发进行系统设计，基于模式的领域建模，业务和技术协同建模提炼知识，柔性设计。\n\n敏捷软件：协作和演进\n\nDDD 普及的前提条件：重视软件质量，拥抱变化，长期运维；敏捷实践落地（迭代开发、持续重构、测试驱动、持续集成）；配套框架（Spring？）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1675134912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595776,"discussion_content":"是的，DDD是方法学层面，微服务是架构风格层面。DDD抽象于具体的架构风格。DDD可以帮助设计微服务，但不仅仅用于微服务。领域模型确实是DDD中最有价值的部分之一。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1670340584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363911,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"广东","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":true,"comment_ctime":1670334330,"is_pvip":false,"replies":[{"id":132274,"content":"1.关于微服务的回答很到位呀。微服务是一种架构风格（或者说架构模式）；DDD是方法学层面，抽象于具体的架构风格。微服务固然用得上，单体也用得上，无服务器架构也成，或者将来才出现的某种架构风格，说不定也行。\n2.你先给出了“创新”的评价标准，然后再评价DDD，说明了思维的严谨。等我们听听更多同学的意见，再归纳一下。\n\n关于“挖坟”嘛，广东人更喜欢说“咸鱼翻生” 😊","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670339045,"ip_address":"广东","comment_id":363911,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1.不同意。时间线上先后倒置，所以至少 Evans 不会是为了微服务而ddd；时代在变化，ddd的“目的”也可能变化（也许就是因为解决了微服务拆分这个问题才火起来的呢，哪怕跟初衷不一样了，但价值高呀）。但我不这么认为，因为哪怕是现在，也不是所有公司都适合引入微服务(技术基础不具备&#47;组织结构不匹配&#47;业务特性不需要), 但大部分业务领域（特殊规则非事件流的还是搞不定，比如特定的复杂计算公式）都可以用ddd来提炼和构建认知，两者间是解偶松散的。所以能够支撑微服务拆分可能是ddd被挖坟的起因，但不是它能站住脚的全部因素，ddd的目的就是为了开发为服务总归有些片面。\n2.定个调，软件设计的创新就是提高长期迭代的效率。ddd目前能看到一些成果（至少咨询公司能卖了不是），所以能说它是一种创新。但这个成果不多，因为没有大杀器级别的软件产品来证实（仅靠咨询公司的瓶颈），所以创新得可能没有那么突出。","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595767,"discussion_content":"1.关于微服务的回答很到位呀。微服务是一种架构风格（或者说架构模式）；DDD是方法学层面，抽象于具体的架构风格。微服务固然用得上，单体也用得上，无服务器架构也成，或者将来才出现的某种架构风格，说不定也行。\n2.你先给出了“创新”的评价标准，然后再评价DDD，说明了思维的严谨。等我们听听更多同学的意见，再归纳一下。\n\n关于“挖坟”嘛，广东人更喜欢说“咸鱼翻生” 😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670339045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363896,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"广东","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":true,"comment_ctime":1670319458,"is_pvip":false,"replies":[{"id":132275,"content":"“尽信DDD不如不用DDD”这句说的很棒。提到模式，说明您肯定是看过原书的。事件风暴虽然在课里面也讲得比较细，但可能还算不上DDD的核心。关于DDD对代码的影响，确实不会特别细，但可能比一般同学想象的要“细”。DDD和整洁代码结合，就非常好了。等课程讲到代码的时候，我们再探讨。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670339388,"ip_address":"广东","comment_id":363896,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"尽信DDD不如不用DDD。\n\nDDD不能算一门完善的理论，它是出自工程师之手，目前还只能算是经验的总结和模式的梳理（当然，DDD思想也在不断完善中，例如“事件风暴建模法”是后面才引入到DDD核心内容中的），它能解决的问题是针对业务复杂性如何优化软件的架构。\n\n对于性能问题以及代码细节上的结构问题，它并不能提供足够的帮助。所以当我们在应用DDD的时候，如果发现它并没有把我们的代码变成“完美的”、“理想化”的代码，反而造成了一些麻烦，不妨审视一下，我们是否已经过渡依赖了DDD，对它寄予了过大的期望。\n\n反之，如果以平常心来对待DDD，和Eric Evans一样，把它当成一套模式的集合，发现哪个模式对我们有用就拿来用一下，不能用也不要勉强(DDD的限界上下文、聚合、实体、值对象等等，都可以认为是一种模式)，以这种拿来主义的心态去使用DDD，反而可能会渐入佳境，也不会造成太大负担。","like_count":32,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595769,"discussion_content":"“尽信DDD不如不用DDD”这句说的很棒。提到模式，说明您肯定是看过原书的。事件风暴虽然在课里面也讲得比较细，但可能还算不上DDD的核心。关于DDD对代码的影响，确实不会特别细，但可能比一般同学想象的要“细”。DDD和整洁代码结合，就非常好了。等课程讲到代码的时候，我们再探讨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670339388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003886,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/51/6e/efb76357.jpg","nickname":"一只豆","note":"","ucode":"73953B25ADC953","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601772,"discussion_content":"拿来主义的想法 肯定极端了。建议站在 业务技术融合的位置看DDD。位置偏了，评价不会对。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1675408838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595748,"discussion_content":"首先，思路赞同。但怕就怕在，基础还没学明白，就开始飞，结果二手三手越来越玄乎。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1670331648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363902,"user_name":"Geek_d1bbb0","can_delete":false,"product_type":"c1","uid":2850164,"ip_address":"广东","ucode":"026DCACA44DAF2","user_header":"","comment_is_top":false,"comment_ctime":1670326380,"is_pvip":false,"replies":[{"id":132278,"content":"说的很好！\n关于“软件设计方法”，我再补充两句。“设计”有广义狭义之分。狭义的设计，是与“分析”相对而言的，例如系统设计、架构设计、代码设计等等；广义的设计，包含了分析和狭义的设计，泛指给出一个需求，得到解决方案的过程。“领域驱动设计”中说的设计，是广义的设计。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670339859,"ip_address":"广东","comment_id":363902,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1、感觉DDD是一种软件设计方法，微服务是一种软件架构方式\n2、DDD是对过去软件设计方法的改良。","like_count":6,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595772,"discussion_content":"说的很好！\n关于“软件设计方法”，我再补充两句。“设计”有广义狭义之分。狭义的设计，是与“分析”相对而言的，例如系统设计、架构设计、代码设计等等；广义的设计，包含了分析和狭义的设计，泛指给出一个需求，得到解决方案的过程。“领域驱动设计”中说的设计，是广义的设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670339860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364014,"user_name":"bighero","can_delete":false,"product_type":"c1","uid":1506963,"ip_address":"广东","ucode":"0F7AC36FE256E6","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/93/c7baea71.jpg","comment_is_top":false,"comment_ctime":1670425994,"is_pvip":false,"replies":[{"id":132765,"content":"DDD是方法学层面，微服务是架构风格层面，同样的方法学可以用于不同的架构风格。\n关于创新，您的回答最富诗意呀。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1671414840,"ip_address":"广东","comment_id":364014,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1.DDD的目的：DDD出现应该追溯到2004年，那是个单体架构盛行的年代。很多逻辑处理不在应用层，而是在数据库层。而且面向对象也刚刚行成大气候，但是开发大项目单体业务应用，却还非常繁杂，逻辑复用性差等问题。DDD的出现主要是为了上浮业务逻辑从数据库层到应用层 达到高内聚低耦合目的而建立的一些业务领域的oo原则。\n\n2.DDD它是一种实践方法论。不可否认它是一种创新。它的创新在老oo的基础上进行的一种创新方法论。它首次大胆的提出了限界上下文这一方法论，这是oo一切对象复杂网络关系的大胆切割。大有“庖丁解牛，目无全牛”的艺术与哲学感。如果说oo仅仅是技术，那么分了限界才算接近了“道”。也是“技近乎于道”的一种体现。又怎能不说是种创新创举。","like_count":4,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597043,"discussion_content":"DDD是方法学层面，微服务是架构风格层面，同样的方法学可以用于不同的架构风格。\n关于创新，您的回答最富诗意呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671414840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363956,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"广东","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1670389403,"is_pvip":false,"replies":[{"id":132323,"content":"最好再结合重构、持续集成、迭代开发等实践。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670418248,"ip_address":"广东","comment_id":363956,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"《领域驱动设计：软件核心复杂性应对之道》开始没几页作者就说：好的模型是改出来的。\n看到这里我想到了 TDD，不然没人敢改代码\n从编码实现的角度看：没有 TDD 很难 DDD","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595873,"discussion_content":"最好再结合重构、持续集成、迭代开发等实践。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1670418248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375967,"user_name":"赫伯伯","can_delete":false,"product_type":"c1","uid":1154294,"ip_address":"河北","ucode":"85722DBCB88E9C","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/f6/eca921d9.jpg","comment_is_top":false,"comment_ctime":1686189755,"is_pvip":false,"replies":[{"id":137195,"content":"产品经理和客户聊需求时，一般不会用到领域模型。领域模型用在产品经理和开发团队，尤其是架构师的沟通。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1686447517,"ip_address":"广东","comment_id":375967,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"DDD 适合一线产品经理或者业务分析师学习，近距离接触客户，才能理解业务。除非工程师是驻场的，否则在大后方就别妄图理解和应用 DDD 了","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620685,"discussion_content":"产品经理和客户聊需求时，一般不会用到领域模型。领域模型用在产品经理和开发团队，尤其是架构师的沟通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686447517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364886,"user_name":"Jays","can_delete":false,"product_type":"c1","uid":1024273,"ip_address":"广东","ucode":"D1EF31928E4274","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/11/153f4dad.jpg","comment_is_top":false,"comment_ctime":1671653747,"is_pvip":false,"replies":[{"id":133023,"content":"祝成功！","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1672234354,"ip_address":"广东","comment_id":364886,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"10年前第一次接触DDD相关概念时，顿时就解答了「为什么平时写的代码看起来那么别扭」，首当其冲就是当时泛滥成灾的「贫血模型」和「事务脚本」等。DDD是很棒的方法论，虽然落地很难，但我认为这个方向是对的，它能使OO done right.","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597820,"discussion_content":"祝成功！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672234354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364607,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"广东","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1671181489,"is_pvip":false,"replies":[{"id":132781,"content":"协作确实是一个核心点","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1671419263,"ip_address":"广东","comment_id":364607,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"DDD我觉得主要解决了以前的软件工程理论中留下的两个问题\n一个是业务与技术关系的关系， 提供一系列方法，以业务为出发点，构建技术解决方案\n一个是与非技术人员的协作问题，提供一些列方法，实现技术员与各个其他岗位的有机的协作","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597059,"discussion_content":"协作确实是一个核心点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671419264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364186,"user_name":"程序员吾真本","can_delete":false,"product_type":"c1","uid":1047630,"ip_address":"广东","ucode":"C63E268F02900B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/4e/c0f25dcb.jpg","comment_is_top":false,"comment_ctime":1670635642,"is_pvip":false,"replies":[{"id":132408,"content":"没错，既包括业务和开发的协作，也包括开发团队内部各角色的协作，还包括和测试的协作。统一语言同理。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670806300,"ip_address":"广东","comment_id":364186,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"痛点中的“协作”问题，除了“开发人员与需求人员”之间的协作，是不是还包括“分析设计人员与开发人员”之间的协作？在有些企业，不写代码的架构师做分析与设计工作；之后交给程序员写代码；然后架构师就去做另一个系统的分析与设计。貌似人尽其才，但实则阻碍了从编码中发现分析和设计不合理的问题并做改进的实践。程序员发现分析和设计的问题，又不好打扰架构师，于是自作主张改动设计。有些改动合理，有些则不合理。最终结果就是分析设计与代码脱节，让前者只能挂在墙上。","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596231,"discussion_content":"没错，既包括业务和开发的协作，也包括开发团队内部各角色的协作，还包括和测试的协作。统一语言同理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670806300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364102,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1015222,"ip_address":"广东","ucode":"27EB4A725CE14E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/b6/abdebdeb.jpg","comment_is_top":false,"comment_ctime":1670548317,"is_pvip":false,"replies":[{"id":132360,"content":"您这个问题很有意思。TW内部确实有人结合起来用。四色建模法来源于Coad 的《Java Modeling In Color With UML》，所以叫“彩色建模法”可能更符合原意。如果有时间，我后面会专门写一篇文章比较两者的关系。大体来说，彩色建模中的四种类型，都是DDD中说的实体，而不是值对象。“人地物”（party,place,thing）指先于具体业务活动而存在的事物，比如说我们例子中的员工、组织、客户等等；“时间性实体”（moment, interval）代表包含起止时间关注点的事物，一般是业务活动相关的实体，比如我们例子中的合同、项目；“描述性实体”（description），对应于我们一般说的字典性的表，其实有点微妙，因为和值对象有关系（本身不是值对象），比如我们课程后面才会讲到的“组织类别”；“角色”（role）说明实体在一个关联中充当什么，既可以是一个单独的实体，也可以“缩”成UML中的“角色”，这些也可以在后面课程讲完建模后再聊。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670556789,"ip_address":"广东","comment_id":364102,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"我比较好奇DDD和四色建模法之间的异同，之前胡皓老师也提到建模相关，但是提四色建模比较多，很少提到DDD，所以在TW这几种建模方式是结合使用的么？","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596008,"discussion_content":"您这个问题很有意思。TW内部确实有人结合起来用。四色建模法来源于Coad 的《Java Modeling In Color With UML》，所以叫“彩色建模法”可能更符合原意。如果有时间，我后面会专门写一篇文章比较两者的关系。大体来说，彩色建模中的四种类型，都是DDD中说的实体，而不是值对象。“人地物”（party,place,thing）指先于具体业务活动而存在的事物，比如说我们例子中的员工、组织、客户等等；“时间性实体”（moment, interval）代表包含起止时间关注点的事物，一般是业务活动相关的实体，比如我们例子中的合同、项目；“描述性实体”（description），对应于我们一般说的字典性的表，其实有点微妙，因为和值对象有关系（本身不是值对象），比如我们课程后面才会讲到的“组织类别”；“角色”（role）说明实体在一个关联中充当什么，既可以是一个单独的实体，也可以“缩”成UML中的“角色”，这些也可以在后面课程讲完建模后再聊。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1670556789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1936061,"avatar":"","nickname":"Geek_a4db47","note":"","ucode":"3D3713B2D7C609","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601950,"discussion_content":"老师你好，除了 DDD 和四色建模还有哪些常见的建模方式？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675522899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363971,"user_name":"特修斯之船","can_delete":false,"product_type":"c1","uid":1068192,"ip_address":"广东","ucode":"C041A289017D0C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/a0/6cfdefa6.jpg","comment_is_top":false,"comment_ctime":1670403770,"is_pvip":true,"replies":[{"id":132324,"content":"看了不少大家对创新的界定了，您这又是一种，到时我们总结一下。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670418326,"ip_address":"广东","comment_id":363971,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1. DDD的目的是对业务知识的封装和隔离\n2. DDD是经验论，经验算是指导，还谈不上创新","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595874,"discussion_content":"看了不少大家对创新的界定了，您这又是一种，到时我们总结一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670418326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363899,"user_name":"老狗","can_delete":false,"product_type":"c1","uid":1540332,"ip_address":"广东","ucode":"80927B4D31CFCE","user_header":"https://static001.geekbang.org/account/avatar/00/17/80/ec/b6149cbf.jpg","comment_is_top":false,"comment_ctime":1670322276,"is_pvip":false,"replies":[{"id":132276,"content":"正解！关于创新的问题，等多听点同学们的看法，再聊细一点。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670339521,"ip_address":"广东","comment_id":363899,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1. DDD 是一系列相互关联的模式的“聚合” 应对复杂的业务场景，的确有助于微服务的划分，但是不限于微服务，复杂业务的系统都合适\n2. DDD更多的是一种总结性创新，更很多操作和模式在DDD书前就有，但是有两样创新，一方面是成体系的把这些模式聚合起来，另一方面是的确也总结了诸如统一语言之类的新模式","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595770,"discussion_content":"正解！关于创新的问题，等多听点同学们的看法，再聊细一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670339521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595752,"discussion_content":"1.应该是限界上下午有助于微服务划分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670332434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364748,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"广东","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1671445983,"is_pvip":false,"replies":[{"id":132822,"content":"说得对","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1671455497,"ip_address":"广东","comment_id":364748,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"DDD是一种方法论，具体实现可以很灵活","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597130,"discussion_content":"说得对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671455498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364294,"user_name":"AngryShoes","can_delete":false,"product_type":"c1","uid":2094062,"ip_address":"广东","ucode":"28E4485EE997AA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgXlnRwqBvzlSWTrv4eZ4hSOhXnr6NOKzVFUIHJbhIEjpkvSjlJEg3xf3Th7uKcUw9I200QDpbdg/132","comment_is_top":false,"comment_ctime":1670768159,"is_pvip":false,"replies":[{"id":132395,"content":"您对面向对象的理解很到位呀","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670803941,"ip_address":"广东","comment_id":364294,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"DDD是一种为解决业务问题而产生的一整套系统的方法。个人认为就好比上学时学习到的数理理论或者公式用来解题的一个过程。这个过程我们是站在前人总结出来的理论或公式这个肩膀上去做的。DDD也一样是站在面向对象的基础上去解决业务问题，要去解决业务问题肯定要了解业务，能够识别业务领域，面向对象本身就是把现实世界的客观事物进行抽象，可以把业务领域抽象成业务模型，这是一个领域建模的过程，进而通过面向对象设计和面向对象编程来落地实施。所以说DDD是建立在面向对象基础上的一种系统的方法学。","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596218,"discussion_content":"您对面向对象的理解很到位呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670803941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364118,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"广东","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1670554388,"is_pvip":false,"replies":[{"id":132362,"content":"这确实是很具体的实践难题了，您先看完迭代一一直到代码的部分，看有没有启发。关于从现有系统反推领域模型的事情，我们也经常做，算是比较高级的内容，在课程最后的一课会讲。关于战略还是战术重要，这要看项目具体要解决的问题，难以一概而论。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670557216,"ip_address":"广东","comment_id":364118,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"老师相关的数据和之前的DDD实战课也都去看过了解过, 在日常的代码也尝试着去做过, 但是很困难. 目前公司的业务主要以电商物联网,以及客户关系为主, 系统框架因为老系统的原因包含了多种框架. 书中也提到过战略设计比战术设计更重要, 即便就现有的业务模块来反推做战略设计也是困难重重, 画出来的草图最后都变成了复杂的蜘蛛网.","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596012,"discussion_content":"这确实是很具体的实践难题了，您先看完迭代一一直到代码的部分，看有没有启发。关于从现有系统反推领域模型的事情，我们也经常做，算是比较高级的内容，在课程最后的一课会讲。关于战略还是战术重要，这要看项目具体要解决的问题，难以一概而论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670557216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393546,"user_name":"存在","can_delete":false,"product_type":"c1","uid":2254854,"ip_address":"北京","ucode":"F3217DC5B799BB","user_header":"https://static001.geekbang.org/account/avatar/00/22/68/06/e74b5675.jpg","comment_is_top":false,"comment_ctime":1724164954,"is_pvip":false,"replies":[{"id":143637,"content":"1 是的，DDD作为一种方法学，是抽象于具体的结构模式的。DDD 既适用于微服务，也适用于其他架构模式，例如单体模式或无服务器模式，甚至可能适用于将来才出现的某种架构模式。\n2 是的，在继承前人面向对象方法学的基础上，具有一定的创新性。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731399959,"ip_address":"广东","comment_id":393546,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1 不同意，我认为DDD是一种开发模式，一种最佳的面向对象开发实践，偏向于思想层面，它不仅在于编码，也包括团队协作等事项。微服务是一种服务架构方式，具体的服务管理和交互的实现方式。\n2 对于我们大多数人都是一种创新，开发模式的创新。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653694,"discussion_content":"1 是的，DDD作为一种方法学，是抽象于具体的结构模式的。DDD 既适用于微服务，也适用于其他架构模式，例如单体模式或无服务器模式，甚至可能适用于将来才出现的某种架构模式。\n2 是的，在继承前人面向对象方法学的基础上，具有一定的创新性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731399960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393459,"user_name":"小桥流水","can_delete":false,"product_type":"c1","uid":1011273,"ip_address":"北京","ucode":"C1582AE2FB5299","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/49/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1723892147,"is_pvip":false,"replies":[{"id":143638,"content":"是的，DDD是方法学层面，微服务是架构模式层面，方法学独立于架构模式。具体的架构模式（例如微服务）可以用于实现 DDD，但其他架构模式（例如单体）也可以。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731400040,"ip_address":"广东","comment_id":393459,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"DDD是面向业务领域&#47;本质&#47;元数据的&#47;稳态的\n微服务是面向实现层 与ddd不是一个层次","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653695,"discussion_content":"是的，DDD是方法学层面，微服务是架构模式层面，方法学独立于架构模式。具体的架构模式（例如微服务）可以用于实现 DDD，但其他架构模式（例如单体）也可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731400041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385329,"user_name":"下吧下吧我要发芽","can_delete":false,"product_type":"c1","uid":1513025,"ip_address":"山东","ucode":"DB946E6925D423","user_header":"https://static001.geekbang.org/account/avatar/00/17/16/41/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1702453064,"is_pvip":false,"replies":[{"id":140487,"content":"非常好！","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1702804232,"ip_address":"广东","comment_id":385329,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"\n1、目的不是为了开发微服务，而是一种解决复杂软件设计的方法（从需求、服务拆分）；\n当然在微服务的拆分过程中，参考DDD的领域建模之后进行领域的拆分，同时知道分层分域；\n2、DDD有着二十多年的时间，是在工程实践过程中总结出来的一种模式、方法，当然随着软件行业的发展，他也在逐步的换发新的生命，有创新，但不是从无到有的发明创新。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633930,"discussion_content":"非常好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702804232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376587,"user_name":"呼啦啦~","can_delete":false,"product_type":"c1","uid":1281850,"ip_address":"广东","ucode":"7E5BAB3E2BB37F","user_header":"https://static001.geekbang.org/account/avatar/00/13/8f/3a/b15e7392.jpg","comment_is_top":false,"comment_ctime":1687008388,"is_pvip":false,"replies":[{"id":137277,"content":"为服务不是 Martin Fowler 提出的吗？","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1687058633,"ip_address":"广东","comment_id":376587,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"叨叨一下自己对微服务的看法。\n微服务最早是Google提出的，最早是为了解决大规模协作的问题：能够让更大人数规模的工程师同时参与到协作完成复杂的业务系统，早期的单体时代，单体能够支撑的协作规模有限。\n当然微服务不可避免的带来了很多问题，如微服务数量增加代码的发布问题，微服务之间需要相互调用带来的性能、一致性等问题，业务链条上某个微服务挂了之后带来的可用性问题。工程师们发明了一大堆概念、框架、基础设施来填这些坑，如CICD解决了发布的问题，各种一致性框架、同步异步缓存技术，容错措施、微服务治理措施。特别是k8s基础设施的兴起，让微服务可以向死而生，即时挂了之后也可以迅速拉起来，可用性大大提升，好像整出了点儿新的东西。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621281,"discussion_content":"为服务不是 Martin Fowler 提出的吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687058633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376586,"user_name":"呼啦啦~","can_delete":false,"product_type":"c1","uid":1281850,"ip_address":"广东","ucode":"7E5BAB3E2BB37F","user_header":"https://static001.geekbang.org/account/avatar/00/13/8f/3a/b15e7392.jpg","comment_is_top":false,"comment_ctime":1687007828,"is_pvip":false,"replies":[{"id":137276,"content":"祝你成功 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1687058569,"ip_address":"广东","comment_id":376586,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"到目前为止，认为面向对象是编码的“术”，DDD是将业务需求落地为系统实现的“术”；希望读完专栏之后能够对我的认知进行一些冲击","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621279,"discussion_content":"祝你成功 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687058569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003445,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/b5/991e5342.jpg","nickname":"任智慧","note":"","ucode":"BC9A0A53944271","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636481,"discussion_content":"易中天讲的好，术可传，道不可传","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706197842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368343,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1322811,"ip_address":"天津","ucode":"02C3847652D3CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHfQPjwdyOLYsbF6T2rUSILRc3VsNmMcNJkEEd3TvbfcYProhE8jrKD7EozLTpJ94N7SnbBcTnOA/132","comment_is_top":false,"comment_ctime":1676217188,"is_pvip":true,"replies":[{"id":134205,"content":"后面分层架构那一节会详细讲。不过ddd的核心还是领域建模。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1676420003,"ip_address":"广东","comment_id":368343,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"老师，我很不理解的一个问题就是DDD在落地时候和以前的MVC到底有什么区别？在项目分层时候到底如何划分会更好？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604650,"discussion_content":"后面分层架构那一节会详细讲。不过ddd的核心还是领域建模。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676420003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367693,"user_name":"sqnv_geek","can_delete":false,"product_type":"c1","uid":2179895,"ip_address":"广东","ucode":"B23265E1862E4F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/a4nwicfbEpwqfm8En9iapFqGoOpVg0p0N4ZjIFAdWQMiaxT0JT9OpYrM5ud1OliaLAUhhiaHDjY8mxmNfSbgBNAAGTQ/132","comment_is_top":false,"comment_ctime":1675429790,"is_pvip":false,"replies":[{"id":133940,"content":"侵入性强，违反面向对象，开发繁琐","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1675559226,"ip_address":"广东","comment_id":367693,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"ejb的问题是什么？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601966,"discussion_content":"侵入性强，违反面向对象，开发繁琐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675559226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366788,"user_name":"H","can_delete":false,"product_type":"c1","uid":3326979,"ip_address":"山西","ucode":"06D57447BF1A47","user_header":"https://static001.geekbang.org/account/avatar/00/32/c4/03/511aa353.jpg","comment_is_top":false,"comment_ctime":1674216092,"is_pvip":false,"replies":[{"id":133638,"content":"大佬不敢当，共同进步！","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674268209,"ip_address":"广东","comment_id":366788,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"22年下旬落地了ddd。但是对一些还是有疑问。 (˃ ⌑ ˂ഃ )所以学习大佬的课","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600369,"discussion_content":"大佬不敢当，共同进步！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674268210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364318,"user_name":"白发青年","can_delete":false,"product_type":"c1","uid":1354401,"ip_address":"广东","ucode":"2E1462D891717B","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/a1/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1670823580,"is_pvip":false,"replies":[{"id":132417,"content":"完全可以结合，下节课有提到","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670838808,"ip_address":"广东","comment_id":364318,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"你好，使用了DDD后，传统的需求工程的方法，比如用例分析，是否还可以结合使用？还是完全抛弃？谢谢！","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596276,"discussion_content":"完全可以结合，下节课有提到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670838808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364257,"user_name":"Din","can_delete":false,"product_type":"c1","uid":1013276,"ip_address":"广东","ucode":"02B38F4C612882","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/1c/e709be94.jpg","comment_is_top":false,"comment_ctime":1670732989,"is_pvip":false,"replies":[{"id":132397,"content":"嗯，一个是方法学层面，一个是架构风格层面。一套方法学可以用于不同的架构风格。\n微创新的说法很妙。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670804166,"ip_address":"广东","comment_id":364257,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"1. DDD当然不只是为了开发微服务。不过是领域驱动的限界上下文与微服务的拆分以及服务之间天然的物理隔离match上了\n\n2. DDD算是微创新吧。正如老师文中所讲，DDD是结合了敏捷开发和面向对象思想（也算是站在了巨人的肩上），提炼了一套原则、模式和实践。加上DDD自身武器库的扩充，才让我们看到了一个完整软件开发的体系。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596220,"discussion_content":"嗯，一个是方法学层面，一个是架构风格层面。一套方法学可以用于不同的架构风格。\n微创新的说法很妙。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670804166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364207,"user_name":"喆","can_delete":false,"product_type":"c1","uid":1021657,"ip_address":"广东","ucode":"542E4D8FF40EEF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/d9/a252585b.jpg","comment_is_top":false,"comment_ctime":1670651543,"is_pvip":false,"replies":[{"id":132404,"content":"您理解得很到位，祝您成功！","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670805352,"ip_address":"广东","comment_id":364207,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"1. DDD能解决微服务当中的一些问题，比如：给服务的拆分提供一些理论依据。但它并不是专门给微服务用的，只是它提供的思想和模式，恰好能够解决微服务要解决的一些问题而已。\n2.我认为DDD有他创新的地方，比如：他鼓励业务团队和技术团队共同进行领域建模，让业务团队与开发团队之间存在了一个有必要的交集，从而减少了软件需求从业务需求到技术落地过程中的信息损耗。但是他并不是一个翻天覆地的创新，本质上还是对面向对象的总结与提炼，提供一些固定的模式以解决一些特定的问题。如果具备良好面向对象设计的理论知识和丰富的面向对象的开发经验，没有DDD同样能够做出质量属性良好的软件。虽然不属于创新，DDD却将这些面向独享的理论知识和实践经验变成了一种可供交流学习的模式，这更像是面向对象的传道者。\n3.我们公司目前正在在一个比较核心的项目上实践DDD，我对DDD抱有一定的期待。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596227,"discussion_content":"您理解得很到位，祝您成功！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670805352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364115,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"广东","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1670553955,"is_pvip":false,"replies":[{"id":132363,"content":"希望这门课也能帮到您，祝您成功！","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670557251,"ip_address":"广东","comment_id":364115,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"包括之前看的 DDD实战课, 对于提高代码有很大帮助, 让自己的代码更接近面向对象编程, 而不是过程. ","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596013,"discussion_content":"希望这门课也能帮到您，祝您成功！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670557251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364079,"user_name":"Leo_Fan","can_delete":false,"product_type":"c1","uid":1270348,"ip_address":"广东","ucode":"8866EBB5E40F10","user_header":"https://static001.geekbang.org/account/avatar/00/13/62/4c/59438c6d.jpg","comment_is_top":false,"comment_ctime":1670499781,"is_pvip":false,"replies":[{"id":132351,"content":"您说的挺好。相信您一定能实现目标 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670510172,"ip_address":"广东","comment_id":364079,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100311801,"comment_content":"1、DDD不是微服务，微服务是DDD落地的一种方式\n2、DDD 不是创新，更像是总结\n3、支持钟老师，希望自己不会烂尾","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595969,"discussion_content":"您说的挺好。相信您一定能实现目标 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670510172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364046,"user_name":"李威","can_delete":false,"product_type":"c1","uid":1460961,"ip_address":"广东","ucode":"3409A9390BD1FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","comment_is_top":false,"comment_ctime":1670474522,"is_pvip":false,"replies":[{"id":132346,"content":"妥妥的“实用主义”呀 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670509610,"ip_address":"广东","comment_id":364046,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"管他是不是创新，好使就得了。更好使了，那就是创新；不好使的话，叫“发明”都没用。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595963,"discussion_content":"妥妥的“实用主义”呀 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670509610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363995,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"广东","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1670415490,"is_pvip":false,"replies":[{"id":132325,"content":"一种思想以及一套方法。准确地说属于软件开发方法学层面。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1670421580,"ip_address":"广东","comment_id":363995,"utype":1}],"discussion_count":4,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"ddd 是什么还没明白,是一种思想?","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595876,"discussion_content":"一种思想以及一套方法。准确地说属于软件开发方法学层面。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1670421580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3326979,"avatar":"https://static001.geekbang.org/account/avatar/00/32/c4/03/511aa353.jpg","nickname":"H","note":"","ucode":"06D57447BF1A47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600335,"discussion_content":"ddd是一种看待世界的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674216153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111208,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/a8/15501a28.jpg","nickname":"Mario","note":"","ucode":"34B9D39C949446","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597203,"discussion_content":"ddd 是什么? 说的直接些吧 , 这个是 做系统顶层设计和CTO/架构师 必备 知识体系 ;  参加 技术沙龙的 聊天话题; (2) 没有ddd 不影响 写代码; 也不影响 做复杂业务;  (3) 没有 ddd 影响什么? 可能影响复杂架构的 分工, 当掰扯不明白分工的时候 就拿 bounded context 说事, 领域边界决定 架构分工 ;  总而言之 ddd 不一定是解决 如何写代码的问题, 它 解决的是 设计问题 ;  ddd 落地落的好 的话呢 就是 如何 写代码的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671525651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/51/8d/c5e93d59.jpg","nickname":"李勇","note":"","ucode":"A3B4D4A31623B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596365,"discussion_content":"1不同意，ddd是业务的方法学，而微服务是对复杂业务的划分，两者不是同一个东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670918130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381558,"user_name":"barnabas","can_delete":false,"product_type":"c1","uid":1212438,"ip_address":"上海","ucode":"87FB55480C5C84","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpaa2pEggFCtaX455yukBbnhoD95AG2WAfyUxG69xFnYyR93A0PibACNgZaEZpDq8t8XkgTAibzaRw/132","comment_is_top":false,"comment_ctime":1695379242,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"微服务是一种架构方式，而DDD个人理解是一种设计的方法论，把领域逻辑通过模型内化到实现层面，即充血模型。这套方法使领域知识通过分工良好的模块代码得以传承，通过分离关注点编码实现不被技术框架束缚，复杂系统可以比较好的演进","like_count":1},{"had_liked":false,"id":371207,"user_name":"风揽明月","can_delete":false,"product_type":"c1","uid":3074275,"ip_address":"浙江","ucode":"89937129F1B68E","user_header":"https://static001.geekbang.org/account/avatar/00/2e/e8/e3/e8fd8682.jpg","comment_is_top":false,"comment_ctime":1679634781,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"DDD我理解是梳理业务边界的架构，然后在业务边界里面建模；微服务是梳理系统层面边界架构，然后对系统性能和可用性设计。它们的结合点在于常规操作下我们都会按照业务边界去划分系统边界，所以DDD就映射到微服务了。但是，DDD可不仅仅是解决微服务架构的，它也可以解决单体架构的。有些人说DDD很好，但是我个人理解，只是对开发理解好，对回归测试是灾难，但是也有解决方案，它带来的风险是很大的，所以它适合大型稳定需求的场景，并不适合需求多变的场景。还有一个观点就是，oo是一个极端，ddd也是个极端，很多公司其实都是实施的是中间态方案！个人观点不喜勿喷","like_count":1,"discussions":[{"author":{"id":1158156,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/0c/f3e37765.jpg","nickname":"夏","note":"","ucode":"2DE213960503A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621752,"discussion_content":"为什么说对回归测试是灾难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687597292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363904,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"北京","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1670326978,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"小项目采用DDD会增加研发的心智负担","like_count":1,"discussions":[{"author":{"id":2672433,"avatar":"https://static001.geekbang.org/account/avatar/00/28/c7/31/2ac906cd.jpg","nickname":"海明没有威","note":"","ucode":"CB132C10C8CBCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622821,"discussion_content":"我猜应该是改变开发习惯导致了心智负担的加大，不是DDD，也不是别的什么模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1688698875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506963,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/93/c7baea71.jpg","nickname":"bighero","note":"","ucode":"0F7AC36FE256E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595883,"discussion_content":"这话不对，小项目可以用他的领域分析法。可以快速清晰分析好模块。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670427795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393451,"user_name":"小桥流水","can_delete":false,"product_type":"c1","uid":1011273,"ip_address":"北京","ucode":"C1582AE2FB5299","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/49/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1723874210,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100311801,"comment_content":"ddd是确定系统的1、关键稳定步骤及其关系 2、步骤中主要元素及方法","like_count":0}]}