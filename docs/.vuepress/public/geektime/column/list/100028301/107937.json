{"id":107937,"title":"24 | 实战：处理四层流量，实现Memcached Server","content":"<p>你好，我是温铭。</p><p>在前面几节课中，我们介绍了不少处理请求的 Lua API ，不过它们都是和七层相关的。除此之外，OpenResty 其实还提供了 <code>stream-lua-nginx-module</code> 模块来处理四层的流量。它提供的指令和 API ，与 <code>lua-nginx-module</code> 基本一致。</p><p>今天，我就带你一起用 OpenResty 来实现一个 memcached server，而且大概只需要 100 多行代码就可以完成。在这个小的实战中，我们会用到不少前面学过的内容，也会带入一些后面测试和性能优化章节的内容。</p><p>所以，我希望你能够明确一点，我们这节课的重点，不在于你必须读懂每一行代码的具体作用，而是你要从需求、测试、开发等角度，把 OpenResty 如何从零开发一个项目的全貌了然于心。</p><h2>原始需求和技术方案</h2><p>在开发之前，我们都需要明白需求是什么，到底是用来解决什么问题的，否则就会在迷失在技术选择中。比如看到我们今天的主题，你就应该先反问一下自己，为什么要实现一个 memcached server 呢？直接安装一个原版的 memcached 或者 redis 不就行了吗？</p><p>我们知道，HTTPS 流量逐渐成为主流，但一些比较老的浏览器并不支持 session ticket，那么我们就需要在服务端把 session ID 存下来。如果本地存储空间不够，就需要一个集群进行存放，而这个数据又是可以丢弃的，所以选用 memcached 就比较合适。</p><!-- [[[read_end]]] --><p>这时候，直接引入 memcached ，应该是最简单直接的方案。但出于以下几个方面的考虑，我还是选择使用 OpenResty 来造一个轮子：</p><ul>\n<li>第一，直接引入会多引入一个进程，增加部署和维护成本；</li>\n<li>第二，这个需求足够简单，只需要 get 和 set 操作，并且支持过期即可；</li>\n<li>第三，OpenResty 有 stream 模块，可以很快地实现这个需求。</li>\n</ul><p>既然要实现 memcached server，我们就需要先弄明白它的协议。memcached 的协议可以支持 TCP 和 UDP，这里我选择 TCP，下面是 get 和 set 命令的具体协议：</p><pre><code>Get\n根据 key 获取 value\nTelnet command: get &lt;key&gt;*\\r\\n\n\n示例：\nget key\nVALUE key 0 4 data END\n\n</code></pre><pre><code>Set\n存储键值对到 memcached 中\nTelnet command：set &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; [noreply]\\r\\n&lt;value&gt;\\r\\n\n\n示例：\nset key 0 900 4 data\nSTORED\n</code></pre><p>除了 get 和 set 外，我们还需要知道 memcached 的协议的“错误处理”是怎么样做的。“错误处理”对于服务端的程序是非常重要的，我们在编写程序时，除了要处理正常的请求，也要考虑到各种异常。比如下面这样的场景：</p><ul>\n<li>memcached 发送了一个get、set 之外的请求，我要怎么处理呢？</li>\n<li>服务端出错，我要给 memcached 的客户端一个什么样的反馈呢？</li>\n</ul><p>同时，我们希望写出能够兼容 memcached 的客户端程序。这样，使用者就不用区分这是 memcached 官方的版本，还是 OpenResty 实现的版本了。</p><p>下面这张图出自memcached 的文档，描述了出错的时候，应该返回什么内容和具体的格式，你可以用做参考：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/b0/3767ed0047e34aabaa7bf7d568438ab0.png?wh=1974*1446\" alt=\"\"></p><p>现在，再来确定下技术方案。我们知道，OpenResty 的 shared dict 可以跨各个 worker 来使用，把数据放在 shared dict 里面，和放在 memcached 里面非常类似——它们都支持 get 和 set 操作，并且在进程重启后数据就丢失了。所以，使用 shared dict 来模拟 memcached 是非常合适的，它们的原理和行为都是一致的。</p><h2>测试驱动开发</h2><p>接下来就要开始动工了。不过，基于测试驱动开发的思想，在写具体的代码之前，让我们先来构造一个最简单的测试案例。这里我们不用 <code>test::nginx</code> 框架，毕竟它的上手难度也不低，我们不妨先用熟悉的 <code>resty</code> 来手动测试下：</p><pre><code>$ resty -e 'local memcached = require &quot;resty.memcached&quot;\n    local memc, err = memcached:new()\n\n    memc:set_timeout(1000) -- 1 sec\n    local ok, err = memc:connect(&quot;127.0.0.1&quot;, 11212)\n    local ok, err = memc:set(&quot;dog&quot;, 32)\n    if not ok then\n        ngx.say(&quot;failed to set dog: &quot;, err)\n        return\n    end\n\n    local res, flags, err = memc:get(&quot;dog&quot;)\n    ngx.say(&quot;dog: &quot;, res)'\n</code></pre><p>这段测试代码，使用 <code>lua-rety-memcached</code> 客户端库发起 connect 和 set 操作，并假设 memcached 的服务端监听本机的 11212 端口。</p><p>看起来应该没有问题了吧。你可以在自己的机器上执行一下这段代码，不出意外的话，会返回 <code>failed to set dog: closed</code> 这样的错误提示，因为此时服务并没有启动。</p><p>到现在为止，你的技术方案就已经明确了，那就是使用 stream 模块来接收和发送数据，同时使用 shared dict 来存储数据。</p><p>衡量需求是否完成的指标也很明确，那就是跑通上面这段代码，并把 dog 的实际值给打印出来。</p><h2>搭建框架</h2><p>那还等什么，开始动手写代码吧！</p><p>我个人的习惯，是先搭建一个最小的可以运行的代码框架，然后再逐步地去填充代码。这样的好处是，在编码过程中，你可以给自己设置很多小目标；而且在完成一个小目标后，测试案例也会给你正反馈。</p><p>让我们先来设置好 Nginx 的配置文件，因为stream 和 shared dict 要在其中预设。下面是我设置的配置文件：</p><pre><code>stream {\n    lua_shared_dict memcached 100m;\n    lua_package_path 'lib/?.lua;;';\n    server {\n        listen 11212;\n        content_by_lua_block {\n            local m = require(&quot;resty.memcached.server&quot;)\n            m.run()\n        }\n    }\n}\n</code></pre><p>你可以看到，这段配置文件中有几个关键的信息：</p><ul>\n<li>首先，代码运行在 Nginx 的 stream 上下文中，而非 HTTP 上下文中，并且监听了 11212 端口；</li>\n<li>其次，shared dict 的名字为 memcached，大小是 100M，这些在运行期是不可以修改的；</li>\n<li>另外，代码所在目录为 <code>lib/resty/memcached</code>, 文件名为 <code>server.lua</code>, 入口函数为 <code>run()</code>，这些信息你都可以从<code>lua_package_path</code> 和 <code>content_by_lua_block</code> 中找到。</li>\n</ul><p>接着，就该搭建代码框架了。你可以自己先动手试试，然后我们一起来看下我的框架代码：</p><pre><code>local new_tab = require &quot;table.new&quot;\nlocal str_sub = string.sub\nlocal re_find = ngx.re.find\nlocal mc_shdict = ngx.shared.memcached\n\nlocal _M = { _VERSION = '0.01' }\n\nlocal function parse_args(s, start)\nend\n\nfunction _M.get(tcpsock, keys)\nend\n\nfunction _M.set(tcpsock, res)\nend\n\nfunction _M.run()\n    local tcpsock = assert(ngx.req.socket(true))\n\n    while true do\n        tcpsock:settimeout(60000) -- 60 seconds\n        local data, err = tcpsock:receive(&quot;*l&quot;)\n\n        local command, args\n        if data then\n            local from, to, err = re_find(data, [[(\\S+)]], &quot;jo&quot;)\n            if from then\n                command = str_sub(data, from, to)\n                args = parse_args(data, to + 1)\n            end\n        end\n\n        if args then\n            local args_len = #args\n            if command == 'get' and args_len &gt; 0 then\n                _M.get(tcpsock, args)\n            elseif command == &quot;set&quot; and args_len == 4 then\n                _M.set(tcpsock, args)\n            end\n        end\n    end\nend\n\nreturn _M\n</code></pre><p>这段代码，便实现了入口函数 <code>run()</code> 的主要逻辑。虽然我还没有做异常处理，依赖的 <code>parse_args</code>、<code>get</code> 和 <code>set</code> 也都是空函数，但这个框架已经完整表达了memcached server 的逻辑。</p><h2>填充代码</h2><p>接下来，让我们按照代码的执行顺序，逐个实现这几个空函数。</p><p>首先，我们可以根据 memcached <a href=\"https://github.com/memcached/memcached/blob/master/doc/protocol.txt\">的协议</a><a href=\"https://github.com/memcached/memcached/blob/master/doc/protocol.txt\">文档</a>，解析 memcached 命令的参数：</p><pre><code>local function parse_args(s, start)\n    local arr = {}\n\n    while true do\n        local from, to = re_find(s, [[\\S+]], &quot;jo&quot;, {pos = start})\n        if not from then\n            break\n        end\n\n        table.insert(arr, str_sub(s, from, to))\n\n        start = to + 1\n    end\n\n    return arr\nend\n</code></pre><p>这里，我的建议是，先用最直观的方式来实现一个版本，不用考虑任何性能的优化。毕竟，完成总是比完美更重要，而且，基于完成的逐步优化才可以趋近完美。</p><p>接下来，我们就来实现下 <code>get</code> 函数。它可以一次查询多个键，所以下面代码中我用了一个 for 循环：</p><pre><code>function _M.get(tcpsock, keys)\n    local reply = &quot;&quot;\n\n    for i = 1, #keys do\n        local key = keys[i]\n        local value, flags = mc_shdict:get(key)\n        if value then\n            local flags  = flags or 0\n            reply = reply .. &quot;VALUE&quot; .. key .. &quot; &quot; .. flags .. &quot; &quot; .. #value .. &quot;\\r\\n&quot; .. value .. &quot;\\r\\n&quot;\n        end\n    end\n    reply = reply ..  &quot;END\\r\\n&quot;\n\n    tcpsock:settimeout(1000)  -- one second timeout\n    local bytes, err = tcpsock:send(reply)\nend\n</code></pre><p>其实，这里最核心的代码只有一行：<code>local value, flags = mc_shdict:get(key)</code>，也就是从 shared dict 中查询到数据；至于其余的代码，都在按照 memcached 的协议拼接字符串，并最终 send 到客户端。</p><p>最后，我们再来看下 <code>set</code> 函数。它将接收到的参数转换为 shared dict API 的格式，把数据储存了起来；并在出错的时候，按照 memcached 的协议做出处理：</p><pre><code>function _M.set(tcpsock, res)\n    local reply =  &quot;&quot;\n\n    local key = res[1]\n    local flags = res[2]\n    local exptime = res[3]\n    local bytes = res[4]\n\n    local value, err = tcpsock:receive(tonumber(bytes) + 2)\n\n    if str_sub(value, -2, -1) == &quot;\\r\\n&quot; then\n        local succ, err, forcible = mc_shdict:set(key, str_sub(value, 1, bytes), exptime, flags)\n        if succ then\n            reply = reply .. “STORED\\r\\n&quot;\n        else\n            reply = reply .. &quot;SERVER_ERROR &quot; .. err .. “\\r\\n”\n        end\n    else\n        reply = reply .. &quot;ERROR\\r\\n&quot;\n    end\n\n    tcpsock:settimeout(1000)  -- one second timeout\n    local bytes, err = tcpsock:send(reply)\nend\n</code></pre><p>另外，在填充上面这几个函数的过程中，你可以用测试案例来做检验，并用 <code>ngx.log</code> 来做 debug。比较遗憾的是，OpenResty 中并没有断点调试的工具，所以我们都是使用 <code>ngx.say</code> 和 <code>ngx.log</code> 来调试的，在这方面可以说是还处于刀耕火种的时代。</p><h2>写在最后</h2><p>这个实战项目到现在就接近尾声了，最后，我想留一个动手作业。你可以把上面 memcached server 的实现代码，完整地运行起来，并通过测试案例吗？</p><p>今天的作业题估计要花费你不少的精力了，不过，这还是一个原始的版本，还没有错误处理、性能优化和自动化测试，这些就要放在后面继续完善了。我也希望通过后面内容的学习，你最终能够完成一个完善的版本。</p><p>如果对于今天的讲解或者自己的实践有什么疑惑，欢迎你留言和我讨论。也欢迎你把这篇文章转发给你的同事朋友，我们一起实战，一起进步。</p><p></p>","neighbors":{"left":{"article_title":"23 | [视频]导读lua-resty-requests：优秀的lua-resty-*是如何编写的？","id":105621},"right":{"article_title":"25 | 答疑（二）：特权进程的权限到底是什么？","id":108662}},"comments":[{"had_liked":false,"id":115889,"user_name":"2xshu","can_delete":false,"product_type":"c1","uid":1188473,"ip_address":"","ucode":"71584CB9676EDF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKsz8j0bAayjSne9iakvjzUmvUdxWEbsM9iasQ74spGFayIgbSE232sH2LOWmaKtx1WqAFDiaYgVPwIQ/132","comment_is_top":false,"comment_ctime":1563762269,"is_pvip":false,"replies":[{"id":"42829","content":"最大的不同之处在于可以支持集群，而共享字典只能是单机使用。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1563973484,"ip_address":"","comment_id":115889,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23038598749","product_id":100028301,"comment_content":"老师，这篇文章我反复看了几遍。其实我还是没有领会做这个项目的真正目的和使用场景呢。因为我理解的是即是做了这样封装，和直接使用ngx.shared.DICT感觉没什么区别呢？ngx.shared.DICT操作也是原子操作的，并且ngx.shared.DICT也是一个全局共享的变量。","like_count":5,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459333,"discussion_content":"最大的不同之处在于可以支持集群，而共享字典只能是单机使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563973484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1113575,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/e7/64301a9e.jpg","nickname":"大佬A","note":"","ucode":"606937F189CF13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":549873,"discussion_content":"如果是为了集群的话，是不是就直接用memcached就好了啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644285618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459333,"ip_address":""},"score":549873,"extra":""},{"author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113575,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/e7/64301a9e.jpg","nickname":"大佬A","note":"","ucode":"606937F189CF13","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576949,"discussion_content":"文章说了为了这么个简单的需求，引入memcached会增加进程和运维复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655862752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549873,"ip_address":""},"score":576949,"extra":""}]},{"author":{"id":1544926,"avatar":"","nickname":"illman","note":"","ucode":"16D96A74AF6D28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337671,"discussion_content":"这也是我想问的问题，答案直截了当，为了上集群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609036098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","nickname":"连边","note":"","ucode":"54B5DA38449728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3508,"discussion_content":"你调通了，方便在哪里分享一下你的代码吗？语法上的问题，我这边都解决了。我总感觉那个测试用例跑不通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564542674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115362,"user_name":"罐头瓶子","can_delete":false,"product_type":"c1","uid":1283945,"ip_address":"","ucode":"B14CAA526AB01A","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/69/80945634.jpg","comment_is_top":false,"comment_ctime":1563543381,"is_pvip":false,"replies":[{"id":"42830","content":"👍","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1563973513,"ip_address":"","comment_id":115362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18743412565","product_id":100028301,"comment_content":"openresty lua的断点调试现在可以使用vscode插件的方式来实现。插件的名字叫luaide，我现在正在使用，挺好用的。","like_count":4,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459075,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563973513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115170,"user_name":"katichar","can_delete":false,"product_type":"c1","uid":1490007,"ip_address":"","ucode":"22736911F30E2C","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/57/e66d8571.jpg","comment_is_top":false,"comment_ctime":1563502823,"is_pvip":false,"replies":[{"id":"42838","content":"走了一层外部的网络通信，性能会有一些影响，但貌似也是当前的一个方案。最好是内部打通，期望 OpenResty 实现这个功能。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1563973883,"ip_address":"","comment_id":115170,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10153437415","product_id":100028301,"comment_content":"在http和stream之前实现数据共享，如果对性能有要求，是不是resty.memcached是一个比较好的方案？","like_count":2,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458998,"discussion_content":"走了一层外部的网络通信，性能会有一些影响，但貌似也是当前的一个方案。最好是内部打通，期望 OpenResty 实现这个功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563973883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2844,"discussion_content":"resty.memcached只是一个客户端啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563965402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117989,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1564207389,"is_pvip":true,"replies":[{"id":"43610","content":"是的，这种错误是可以忽略的","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1564469625,"ip_address":"","comment_id":117989,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5859174685","product_id":100028301,"comment_content":"我在执行这里的例子的时候，解决了一些语法错误之后，已经能够正常的在resty -e执行时设置和获得key value了，但是在服务器侧循环报一个错误，2019&#47;07&#47;27 13:35:43 [error] 25017#25017: *1 attempt to receive data on a closed socket: u:00007FDA656A5530, c:00007FDA655FE3F0, ft:0 eof:1, client: 127.0.0.1, server: 0.0.0.0:11212。这个错误，通过设置指令lua_socket_log_errors off;的确关闭了错误的循环打印，这里的根本原因是，因为server.lua里是一个循环，然后客户端断开socket了，服务侧还在循环读取数据，导致一直提示这个错误吗？","like_count":1,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460213,"discussion_content":"是的，这种错误是可以忽略的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564469625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/43/b6bcab56.jpg","nickname":"三叶虫tlb","note":"","ucode":"A8236974932E6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365794,"discussion_content":"我也遇到这问题，研究下在receive时把error处理，跳出循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617884341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019835,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/bb/7068f251.jpg","nickname":"老姜","note":"","ucode":"FB7962F08A9F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3251,"discussion_content":"我也遇到了这个问题，日志把硬盘都打满了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564353717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1544719,"avatar":"","nickname":"Geek_Wx.71","note":"","ucode":"59D6B01906CACD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019835,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/bb/7068f251.jpg","nickname":"老姜","note":"","ucode":"FB7962F08A9F3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17795,"discussion_content":"我之前也遇到，后来调通了，没记错的话代码里面少了个空格，结果一晚上打了800G日志。。&#34;VALUE &#34;这里需要一个空格","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568981266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3251,"ip_address":""},"score":17795,"extra":""}]}]},{"had_liked":false,"id":117381,"user_name":"Geek_Wx.71","can_delete":false,"product_type":"c1","uid":1544719,"ip_address":"","ucode":"59D6B01906CACD","user_header":"","comment_is_top":false,"comment_ctime":1564036287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859003583","product_id":100028301,"comment_content":"- -终于调通了...标点符号&quot;&quot; &#39;&#39; “” ， tonumber()<br>最要命的是少个空格","like_count":1},{"had_liked":false,"id":325706,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2858431,"ip_address":"","ucode":"24D1E66E284411","user_header":"","comment_is_top":false,"comment_ctime":1639102639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639102639","product_id":100028301,"comment_content":"有个挺严重的问题，get函数，在一次请求成功之后，客户端已经关闭的情况下，服务器还在不停的给客户端发送数据，不停的对一个对端已经关闭的文件描述符进行写动作，这个地方应该做个判断，如果send错误，就结束循环，不知道nginx内部处理sigpipe信号没有，我觉得应该是处理了，这是最基本的常识，写一个对端关闭的文件描述符，默认动作是结束进程的，会导致程序coredump，忽略掉这个信号，通过如果写错误，则关闭文件描述符释放资源和进行判断。<br>导致只要发送一次请求，导致服务器不停的死循环，向一个对端关了的描述符发送数据，不停的打日志，好端端的，把我的电脑弄的很卡，不过这都是测试代码，如果大家有一定常识或者钻研精神，都能解决","like_count":0},{"had_liked":false,"id":325611,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2858431,"ip_address":"","ucode":"24D1E66E284411","user_header":"","comment_is_top":false,"comment_ctime":1639042259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639042259","product_id":100028301,"comment_content":"搭是搭上了，跑也出点效果了，可惜没存进去数据，不太熟悉函数，一会nginx的函数，一会lua的函数，一会又是openresty的函数，我了个去了，人的大脑只能跟踪三件事，要不是对这三部分都差不多熟悉的花，搞这个还真的会费挺大的劲，这很多初学者找不到哪是哪，真的在所难免。lua和nginx加一起，再封装出来openresty函数，行吧，我搭成了，至于函数接口不对，程序跑飞了的问题，算是从1到优的过程了，不纠结了，我已经是合格的初级架构师了，搭完了","like_count":0},{"had_liked":false,"id":242804,"user_name":"小宇子2B","can_delete":false,"product_type":"c1","uid":1254615,"ip_address":"","ucode":"E360188C65EAEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","comment_is_top":false,"comment_ctime":1597845934,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597845934","product_id":100028301,"comment_content":"\\r\\n是两个字节吗？感觉应该是四个字节<br>自己调试的时候使用telnet发送\\r\\n，在str_sub(value, -2, -1)只能获取到\\n而获取不到\\r","like_count":0,"discussions":[{"author":{"id":1903361,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0b/01/33605fc7.jpg","nickname":"Geek_rdd","note":"","ucode":"9BACC4E6963353","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581485,"discussion_content":"你用telnet 发送\\r\\n 是发了4个字符，而不是CRLF，你如果在telnet里只敲回车就是两个字节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658806891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187918,"user_name":"贺钧威","can_delete":false,"product_type":"c1","uid":1218353,"ip_address":"","ucode":"3E1FC908C28E29","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/31/76485177.jpg","comment_is_top":false,"comment_ctime":1584277815,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584277815","product_id":100028301,"comment_content":"老师，我在执行 resty 脚本的时候，运行到 mc_shdict:set() 方法导致了一个报错 &#47;openresty&#47;1.15.8.2&#47;lualib&#47;resty&#47;core&#47;shdict.lua:186: attempt to compare string with number，这是什么原因，我看文中用的参数也是字符串类型的","like_count":0,"discussions":[{"author":{"id":1010499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/43/b6bcab56.jpg","nickname":"三叶虫tlb","note":"","ucode":"A8236974932E6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365742,"discussion_content":"我也是有这个错误，tonumber()转成数字就好。local succ, err, forcible = mc_shdict:set(key, str_sub(value, 1, bytes), tonumber(exptime), tonumber(flags)) ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617873654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179738,"user_name":"fangminyu","can_delete":false,"product_type":"c1","uid":1597290,"ip_address":"","ucode":"8D136E4BBAC1C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL4jnwQhhibicA13DTmyW6vPHaP9FnhYVAEMUiaBRjTy7Gzx9qeuUmCSia06ibC7gMr0RiblXUQZZfBEjpQ/132","comment_is_top":false,"comment_ctime":1582086259,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582086259","product_id":100028301,"comment_content":"温大师，你的教程非常好，我还在入门中，基本功能已经调通了，但是发现有个严重问题，每次测试指套test一断开链接就有这样的问题：<br>2020&#47;02&#47;19 12:21:03 [error] 10681#123902: *2 attempt to receive data on a closed socket: u:00000000031192E0, c:00007FD6670081F0, ft:0 eof:1, client: 127.0.0.1, server: 0.0.0.0:11212<br><br>我网上搜了一圈也没找到办法，这个打印到底是从哪里来的？怎么解决？","like_count":0,"discussions":[{"author":{"id":1142524,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/fc/b25150d7.jpg","nickname":"jawe","note":"","ucode":"6DB8BF50767629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530814,"discussion_content":"这是这段代码里面出来的，\nwhile true do\n    tcpsock:settimeout(600000)\n    local data, err = tcpsock:receive(&#34;*l&#34;)。\n因为客户端和服务器保持这长连接状态，此时客户端关闭了，导致服务器接收不到数据。所以会一直循环打印。因此我在这里加了一个判断\nwhile true do\n    tcpsock:settimeout(600000)\n    local data, err = tcpsock:receive(&#34;*l&#34;)\n\n    if err then\n      local m = ngx.re.match(err, &#34;^closed&#34;)\n      if m then\n        ngx.exit(1)\n      end\n    end\n    local command, res\n不知是否有更好的解决方案，期待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637153401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135054,"user_name":"姚坤","can_delete":false,"product_type":"c1","uid":1206244,"ip_address":"","ucode":"73C2B70E875DA9","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/e4/42ea7a9a.jpg","comment_is_top":false,"comment_ctime":1568991188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568991188","product_id":100028301,"comment_content":"我测试运行过程中需要将 function _M.get(tcpsock, keys) 中的这一行：reply = reply .. &quot;VALUE &quot; .. key .. &quot; &quot; .. flags .. &quot; &quot; .. #value .. &quot;\\r\\n&quot; .. value .. &quot;\\r\\n&quot; 的 “VALUE&quot;后加一个空格。<br>否则返回的是nil。<br>跟踪到memcached.lua中的get 函数有如下判断<br>local flags, len = match(line, &#39;^VALUE %S+ (%d+) (%d+)$&#39;)<br>    if not flags then<br>        return nil, nil, line<br>    end<br>","like_count":0},{"had_liked":false,"id":131340,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1567728157,"is_pvip":false,"replies":[{"id":"50713","content":"你使用 memcached 的客户端，都是支持一致性 hash 这样的算法，这样就等于是实现了集群储存了。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1568171931,"ip_address":"","comment_id":131340,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567728157","product_id":100028301,"comment_content":"请问老师，你在@2xshu同学的留言里提到了这个实现支持集群，而共享字典只能单机使用，我没有理解，请问支持集群是指可以跨物理机共享存储么？那具体是如何做到的呢？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466397,"discussion_content":"你使用 memcached 的客户端，都是支持一致性 hash 这样的算法，这样就等于是实现了集群储存了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568171931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9511,"discussion_content":"明白了，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568178759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126056,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1566302385,"is_pvip":false,"replies":[{"id":"49369","content":"要看下循环里面具体做了什么","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1567651512,"ip_address":"","comment_id":126056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566302385","product_id":100028301,"comment_content":"我写了一个空的代码，直接写一个死循环，会直接导致cpu 100%。这是正常情况？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463805,"discussion_content":"要看下循环里面具体做了什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567651512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119094,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1564502630,"is_pvip":false,"replies":[{"id":"43748","content":"你给的链接中没有具体的报错信息。另外，&#47;usr&#47;local&#47;openresty3&#47;lib&#47;resty&#47;memached 这个目录是拼写错了吗？最后的目录名应该 memcached 而不是 memached，少了一个字母 c","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1564543226,"ip_address":"","comment_id":119094,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564502630","product_id":100028301,"comment_content":"老师见字好。我来实现文中逻辑，但是最后总说我连接close，详情如下：https:&#47;&#47;www.iffor.cn&#47;job&#47;openresty-memcached-server.html，有时间的时候帮我看看。我这边准备按照memcache去找一找原因。","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460742,"discussion_content":"你给的链接中没有具体的报错信息。另外，/usr/local/openresty3/lib/resty/memached 这个目录是拼写错了吗？最后的目录名应该 memcached 而不是 memached，少了一个字母 c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564543226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","nickname":"连边","note":"","ucode":"54B5DA38449728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3514,"discussion_content":"2019/07/31 11:40:19 [error] 61528#0: *2 kevent() reported about an closed connection (54: Connection reset by peer), context: ngx.timer\nfailed to set dog: connection reset by peer\n\n那个文件夹是我拼写错了。\n我能确定的是，nginx层面，没有配置错，因为已经监听端口了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564544696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118970,"user_name":"洁","can_delete":false,"product_type":"c1","uid":1510376,"ip_address":"","ucode":"154C10D830FB70","user_header":"https://static001.geekbang.org/account/avatar/00/17/0b/e8/1deb2efc.jpg","comment_is_top":false,"comment_ctime":1564476583,"is_pvip":false,"replies":[{"id":"43747","content":"是哪一部分的问题呢？有具体的报错吗？","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1564542983,"ip_address":"","comment_id":118970,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564476583","product_id":100028301,"comment_content":"老师，这次示例memcached server还是没有调通，您在后面答疑的时候能大约讲一下吗","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460693,"discussion_content":"是哪一部分的问题呢？有具体的报错吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564542983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117136,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1563975090,"is_pvip":false,"replies":[{"id":"43609","content":"是的，这个需要修改下","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1564468551,"ip_address":"","comment_id":117136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563975090","product_id":100028301,"comment_content":"如果是为了实现memcached集群，那服务端口就不能监听127.0.0.1了，对吧","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459835,"discussion_content":"是的，这个需要修改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564468551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117090,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1563965927,"is_pvip":false,"replies":[{"id":"42822","content":"直接使用共享字典就没有办法做到集群了，只能用本机的内存资源","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1563973043,"ip_address":"","comment_id":117090,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1563965927","product_id":100028301,"comment_content":"和2xshu同学的感受一样，使用共享字典封装模拟成memcached服务，和直接使用共享字典，对于项目需求到低有啥本质区别，对于这个项目需求直接使用共享字典不就行了嘛，为啥还要费事的去封装一遍呢，求解惑。","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459816,"discussion_content":"直接使用共享字典就没有办法做到集群了，只能用本机的内存资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563973043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","nickname":"连边","note":"","ucode":"54B5DA38449728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3467,"discussion_content":"不封装成为网络的形势，就是单机的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564501662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}