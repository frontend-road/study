{"id":601611,"title":"08｜系统隔离：如何应对高并发流量冲击？","content":"<p>你好，我是徐长龙，今天我想跟你聊聊如何做好系统隔离。</p><p>我曾经在一家教育培训公司做架构师，在一次续报活动中，我们的系统出现了大规模崩溃。在活动开始有五万左右的学员同时操作，大量请求瞬间冲击我们的服务器，导致服务端有大量请求堆积，最终系统资源耗尽停止响应。我们不得不重启服务，并对接口做了限流，服务才恢复正常。</p><p>究其原因，我们习惯性地将公用的功能和数据做成了内网服务，这种方式虽然可以提高服务的复用性，但也让我们的服务非常依赖内网服务。当外网受到流量冲击时，内网也会受到放大流量的冲击，过高的流量很容易导致内网服务崩溃，进而最终导致整个网站无法响应。</p><p>事故后我们经过详细复盘，最终一致认为这次系统大规模崩溃，核心还是在于系统隔离性做得不好，业务极易相互影响。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/5e/681126bc525bd8e42334396911fb655e.jpg?wh=1920x1293\" alt=\"图片\" title=\"改造前的系统部署结构\"></p><p>如果系统隔离性做得好，在受到大流量冲击时，只会影响被冲击的应用服务，即使某个业务因此崩溃，也不会影响到其他业务的正常运转。这就要求我们的架构要有能力隔离多个应用，并且能够隔离内外网流量，只有如此才能够保证系统的稳定。</p><h2>拆分部署和物理隔离</h2><p>为了提高系统的稳定性，我们决定对系统做隔离改造，具体如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/2a/f3febbcef999929421d075b2be59082a.jpg?wh=3988x2685\" alt=\"\"><br>\n也就是说，每个内、外网服务都会部署在独立的集群内，同时每个项目都拥有自己的网关和数据库。而外网服务和内网必须通过网关才能访问，外网向内网同步数据是用Kafka来实现的。</p><!-- [[[read_end]]] --><h2>网关隔离和随时熔断</h2><p>在这个改造方案中有两种网关：外网网关和内网网关。每个业务都拥有独立的外网网关（可根据需要调整）来对外网流量做限流。当瞬时流量超过系统承受能力时，网关会让超编的请求排队阻塞一会儿，等服务器QPS高峰过后才会放行，这个方式比起直接拒绝客户端请求来说，可以给用户更好的体验。</p><p>外网调用内网的接口必须通过内网网关。外网请求内网接口时，内网网关会对请求的来源系统和目标接口进行鉴权，注册授权过的外网服务只能访问对其授权过的内网接口，这样可以严格管理系统之间的接口调用。</p><p><img src=\"https://static001.geekbang.org/resource/image/22/e8/22fe686ed16d4e457bc00372f1ca92e8.jpg?wh=1920x1293\" alt=\"图片\"></p><p>同时，我们在开发期间要时刻注意，内网网关在流量增大的时候要做熔断，这样可以避免外网服务强依赖内网接口，保证外网服务的独立性，确保内网不受外网流量冲击。并且外网服务要保证内网网关断开后，仍旧能正常独立运转一小时以上。</p><p>但是你应该也发现了，这样的隔离不能实时调用内网接口，会给研发造成很大的困扰。要知道常见外网业务需要<strong>频繁</strong>调用内网服务获取<strong>基础数据</strong>才能正常工作，而且内网、外网同时对<strong>同一份数据做决策的话，</strong>很容易出现混乱。</p><h2>减少内网API互动</h2><p>为了防止共享的数据被多个系统同时修改，我们会在活动期间把参与活动的数据和库存做推送，然后自动锁定，这样做可以防止其他业务和后台对数据做修改。若要禁售，则可以通过后台直接调用前台业务接口来操作；活动期间也可以添加新的商品到外网业务中，但只能增不能减。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/d4/89b2bcc6a1f0019dee14b7df2a1cfcd4.jpg?wh=3988x2685\" alt=\"\" title=\"通过缓存推送实现商品数据的同步\"></p><p>这样的实现方式既可以保证一段时间内数据决策的唯一性，也可以保证内外网的隔离性。</p><p>不过你要注意，这里的锁定操作只是为了保证数据同步不出现问题，活动高峰过后数据不能一直锁定，否则会让我们的业务很不灵活。</p><p>因为我们需要把活动交易结果同步回内网，而同步期间外网还是能继续交易的。如果不保持锁定，数据的流向不小心会成为双向同步，这种双向同步很容易出现混乱，系统要是因此出现问题就很难修复，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/92/b9/9262da6d7a3bfc72b9d9c01a9c9f0fb9.jpg?wh=3988x2685\" alt=\"\" title=\"并发决策会导致数据无法决策同步\"></p><p>我们从图中可以看到，两个系统因为没有实时互动的接口，数据是完全独立的，但是在回传外网数据到内网时，库存如果在两个系统之间来回传递，就很容易出现同步冲突进而导致混乱。那怎么避免类似的问题呢？</p><p>其实只有保证数据同步是单向的，才能取消相互锁定操作。我们可以<strong>规定所有库存决策由外网业务服务决定</strong>，后台对库存操作时必须经过外网业务决策后才能继续操作，这样的方式比锁定数据更加灵活。而外网交易后要向内网同步交易结果，只能通过队列方式推送到内网。</p><p>事实上，使用队列同步数据并不容易，其中有很多流程和细节需要我们去打磨，以减少不同步的情况。好在我们使用的队列很成熟，提供了很多方便的特性帮助我们降低同步风险。</p><p>现在我们来看下整体的数据流转，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/95/bf/95b2bd9b5e0f6f89eb9373ef5d7236bf.jpg?wh=1920x859\" alt=\"图片\" title=\"数据流转\"></p><p>后台系统推送数据到Redis或数据库中，外网服务通过Kafka把结果同步到内网，扣减库存需通知外网服务扣减成功后方可同步操作。</p><h2><strong>分布式队列控流和离线同步</strong></h2><p>我们刚才提到，外网和内网做同步用的是Kafka分布式队列，主要因为它有以下几个优点：</p><ul>\n<li>队列拥有良好吞吐并且能够<strong>动态扩容</strong>，可应对各种流量冲击场景；</li>\n<li>可通过动态控制内网消费线程数，从而实现<strong>内网流量可控；</strong></li>\n<li>内网消费服务在高峰期可以<strong>暂时离线</strong>，内网服务可以临时做一些停机升级操作；</li>\n<li>内网服务如果出现bug，导致消费数据丢失，可以对队列<strong>消息进行回放</strong>实现重新消费；</li>\n<li>Kafka是分区消息同步，消息是顺序的，很少会乱序，可以帮我们实现<strong>顺序同步；</strong></li>\n<li><strong>消息内容可以保存</strong>很久，加入TraceID后查找方便并且透明，利于排查各种问题。</li>\n</ul><p>两个系统之间的数据同步是一件很复杂、很繁琐的事情，而使用Kafka可以把这个实时过程变成异步的，再加上消息可回放，流量也可控，整个过程变得轻松很多。</p><p>在“数据同步”中最难的一步就是保证顺序，接下来我具体介绍一下我们当时是怎么做的。</p><p>当用户在外网业务系统下单购买一个商品时，外网服务会扣减本地缓存中的库存。库存扣减成功后，外网会创建一个订单并发送创建订单消息到消息队列中。当用户在外网业务支付订单后，外网业务订单状态会更新为“已支付”，并给内网发送支付成功的消息到消息队列中，发送消息实现如下：</p><pre><code class=\"language-go\">type ShopOrder struct {\n   TraceId    string `json:trace_id`      // trace id 方便跟踪问题\n   OrderNo    string `json:order_no`      // 订单号\n   ProductId  string `json:\"product_id\"`  // 课程id\n   Sku        string `json:\"sku\"`         // 课程规格 sku\n   ClassId    int32  `json:\"class_id\"`    // 班级id\n   Amount     int32  `json:amount,string` // 金额，分\n   Uid        int64  `json:uid,string`    // 用户uid\n   Action     string `json:\"action\"`      // 当前动作 create：创建订单、pay：支付订单、refund：退费、close：关闭订单\n   Status     int16  `json:\"status\"`      // 当前订单状态 0 创建 1 支付 2 退款 3 关闭\n   Version    int32  `json:\"version\"`     // 版本，会用当前时间加毫秒生成一个时间版本，方便后端对比操作版本，如果收到消息的版本比上次操作的时间还小忽略这个事件\n   UpdateTime int32  `json:\"update_time\"` // 最后更新时间\n   CreateTime int32  `json:\"create_time\"` // 订单创建日期\n}\n\n//发送消息到内网订单系统\nresp, err := sendQueueEvent(\"order_event\", shopOrder{...略}, 消息所在分区)\nif err != nil {\n  return nil, err\n}\n\nreturn resp, nil\n</code></pre><p>可以看到，我们在发送消息的时候已经通过某些依据（如订单号、uid）算出这条消息应该投放到哪个分区内，Kafka同一个分区内的消息是顺序的。</p><p>那为什么要保证消费顺序呢？其实核心在于我们的数据操作必须按顺序执行，如果不按顺序，就会出现很多奇怪的场景。</p><p>比如“用户执行创建订单、支付订单、退费”这一系列操作，消费进程很有可能会先收到退费消息，但由于还没收到创建订单和支付订单的消息，退费操作在此时就无法进行。</p><p>当然，这只是个简单的例子，如果碰到更多步骤乱序的话，数据会更加混乱。所以我们如果想做好数据同步，就要尽量保证数据是顺序的。</p><p>不过，我们在前面讲Kafka的优点时也提到了，队列在大部分时间是能够保证顺序性的，但是在极端情况下仍会有乱序发生。为此，我们在业务逻辑上需要做兼容，即使无法自动解决，也要记录好相关日志以方便后续排查问题。</p><p>不难发现，因为这个“顺序”的要求，我们的数据同步存在很大难度，好在Kafka是能够长时间保存消息的。如果在同步过程中出现问题，除了通过日志对故障进行修复外，我们还可以将故障期间的流量进行重放（重放要保证同步幂等）。</p><p>这个特性让我们可以做很多灵活的操作，甚至可以在流量高峰期，暂时停掉内网消费服务，待系统稳定后再开启，落地用户的交易。</p><p>除了数据同步外，我们还需要对内网的流量做到掌控，我们可以通过动态控制线程数来实现控制内网流量的速度。</p><p>好，今天这节课就讲到这里，相信你已经对“如何做好系统隔离”这个问题有了比较深入的理解，期望你在生产过程中能具体实践一下这个方案。</p><h2>总结</h2><p>系统的隔离需要我们投入大量的时间和精力去打磨，这节课讲了很多会对系统稳定性产生影响的关键特性，让我们整体回顾一下。</p><p>为了实现系统的隔离，我们在外网服务和内网服务之间设立了接口网关，只有通过网关才能调用内网接口服务。并且我们设定了在大流量冲击期间，用熔断内网接口的交互方式来保护内网。而外网所需的所有数据，在活动开始之前都要通过内网脚本推送到商城本地的缓存中，以此来保证业务的运转。</p><p>同时，外网成功成交的订单和同步信息通过分布式、可实时扩容和可回放的消息队列投递到了内网，内网会根据内部负载调整消费线程数来实现流量可控的消息消费。由此，我们实现了两个系统之间的同步互动。</p><p>我把这节课的关键知识画成了导图，供你参考：<br>\n<img src=\"https://static001.geekbang.org/resource/image/2d/db/2d32237cb44d5d79ac6670fddb5503db.jpg?wh=3988x1846\" alt=\"\"></p><h2>思考题</h2><p>用什么方法能够周期检查出两个系统之间不同步的数据？</p><p>欢迎你在留言区与我交流讨论，我们下节课见！</p>","comments":[{"had_liked":false,"id":361915,"user_name":"LecKey","can_delete":false,"product_type":"c1","uid":1510904,"ip_address":"北京","ucode":"04C9A1AE1F72ED","user_header":"https://static001.geekbang.org/account/avatar/00/17/0d/f8/3e1d5765.jpg","comment_is_top":false,"comment_ctime":1667969230,"is_pvip":false,"replies":[{"id":131672,"content":"你好，这个思考没毛病","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668041607,"ip_address":"北京","comment_id":361915,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"外网与没网的区别：\n外网是一般是针对用户端，直接对接用户使用，需要做公网解析；\n内网一般是公司技术服务节点，不需要公网解析且不对外服务，都是外网服务上做单独解析才能访问内网服务，访问内网会比公网获取数据速度更快，减少了一层解析。\n\n一般大点的公司都会做外网和内网隔离，以保障服务安全和稳定。","like_count":3,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593225,"discussion_content":"你好，这个思考没毛病","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668041607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673990,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/06/fb3be14a.jpg","nickname":"TableBear","note":"","ucode":"A2C0562EEA2725","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593247,"discussion_content":"看了老半天，不清楚为啥有内网外网。看了老哥的解释通了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668050898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369259,"user_name":"dk.wu","can_delete":false,"product_type":"c1","uid":2938336,"ip_address":"广东","ucode":"E9091207B646DB","user_header":"https://static001.geekbang.org/account/avatar/00/2c/d5/e0/addca785.jpg","comment_is_top":false,"comment_ctime":1677295397,"is_pvip":false,"replies":[{"id":134646,"content":"不错，这里补充一句，如果是单方向的数据同步可以给数据都带上一个通用的版本号，要同步的数据如果有变更就+1这个版本号，这样很方便对比筛选。这样做通用服务可以更抽象一些","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1677560882,"ip_address":"北京","comment_id":369259,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"“不同步”是否应该调整为“没同步”？\n这块可以理解为数据同步场景的一个警示牌，如何做到数据同步完整性的检测机制和补偿机制？\n没同步的数据可以识别为三种情况：（1）外网服务端推送异常（2）内网服务消费异常（3）还在队列排队（4）其他。\n从隔离性出发，可以独立一个审计检测服务，对比内外网已同步服务，识别到的未同步数据，可以触发重新走kafka同步。至于识别的方法，是traceId还是其他业务Id，还得看抽象通用性。\n","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607022,"discussion_content":"不错，这里补充一句，如果是单方向的数据同步可以给数据都带上一个通用的版本号，要同步的数据如果有变更就+1这个版本号，这样很方便对比筛选。这样做通用服务可以更抽象一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677560882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371615,"user_name":"Spoon","can_delete":false,"product_type":"c1","uid":1959822,"ip_address":"浙江","ucode":"2FF9193AD482C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","comment_is_top":false,"comment_ctime":1680101988,"is_pvip":false,"replies":[{"id":135629,"content":"同步必然会有代价的。推荐在事务外。一般来说降低发送失败概率更划算，我这采用的是落盘后扫描发送队列，最后如果发送失败，每天晚上还有脚本核对，发现差异人工分析对比。补下相关遗漏漏洞","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1680267636,"ip_address":"北京","comment_id":371615,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"用户在外网业务系统下单购买一个商品时，外网服务会扣减本地缓存中的库存。库存扣减成功后，外网会创建一个订单并发送创建订单消息到消息队列中\n针对这段有以下疑问\n1.库存扣减+订单创建应该是一个事务操作，创建订单消息并发送是在事务内还是在事务外？\n2.针对问题1，如果在事务内，因为消息发完，下游收到这个消息（此时事务未提交），下游并没有查到该订单，此时的解决方案有哪些？\n3.针对问题1，如果在事务外，消息发送失败怎么办（事务已经提交，怎么回滚）？\n","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611724,"discussion_content":"同步必然会有代价的。推荐在事务外。一般来说降低发送失败概率更划算，我这采用的是落盘后扫描发送队列，最后如果发送失败，每天晚上还有脚本核对，发现差异人工分析对比。补下相关遗漏漏洞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1680267636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371545,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"北京","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1680055581,"is_pvip":false,"replies":[{"id":135806,"content":"：）分布式队列思路都是类似的，有很多特性是雷同的，实际用起来后会发现总需要放弃一些特性","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1680774386,"ip_address":"北京","comment_id":371545,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"这里边的kafka换成rocketmq 没有任何问题还多了更多的特性。。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612542,"discussion_content":"：）分布式队列思路都是类似的，有很多特性是雷同的，实际用起来后会发现总需要放弃一些特性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680774387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654608,"discussion_content":"之前没有补充完整，kafka的并行消费能力只能靠partiton num。除非对于消费qos0的业务，可以自己开启多线程消费，否则，业务的量级多了，消息堆积是个问题，就需要提前设计解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733109095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371176,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"广东","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1679621758,"is_pvip":false,"replies":[{"id":135432,"content":"你好，这里是有讲到的，主要是用队列将结果推送到内网，将数据的一些决策放到外网服务去决策","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1679658382,"ip_address":"北京","comment_id":371176,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"“同时，我们在开发期间要时刻注意，内网网关在流量增大的时候要做熔断，这样可以避免外网服务强依赖内网接口，保证外网服务的独立性，确保内网不受外网流量冲击。并且外网服务要保证内网网关断开后，仍旧能正常独立运转一小时以上。”\n\n内网断网后，仍然可访问一小时，解决方案，是把所有的操作记录缓存到外网服务内部，然后等着内网服务上线后，再推送给内网服务么？这部分细节本文没有体现，有点疑惑。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610641,"discussion_content":"你好，这里是有讲到的，主要是用队列将结果推送到内网，将数据的一些决策放到外网服务去决策","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679658382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365891,"user_name":"ARM","can_delete":false,"product_type":"c1","uid":2314165,"ip_address":"北京","ucode":"788FD0DBD39B94","user_header":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","comment_is_top":false,"comment_ctime":1673183536,"is_pvip":false,"replies":[{"id":133288,"content":"你好，ARM，所有操作都在外网服务决策，内网只是同步结果","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1673228526,"ip_address":"北京","comment_id":365891,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"“这个特性让我们可以做很多灵活的操作，甚至可以在流量高峰期，暂时停掉内网消费服务，待系统稳定后再开启，落地用户的交易”  那订单的状态流转会不会出问题，因为消息都在kafka没落库。比如我买东西，创建订单，我支付的时候，怎么显示已支付？退费怎么退费？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598926,"discussion_content":"你好，ARM，所有操作都在外网服务决策，内网只是同步结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673228526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363627,"user_name":"Layne","can_delete":false,"product_type":"c1","uid":1479934,"ip_address":"北京","ucode":"1FEAACD900AB39","user_header":"https://static001.geekbang.org/account/avatar/00/16/94/fe/5fbf1bdc.jpg","comment_is_top":false,"comment_ctime":1669892710,"is_pvip":true,"replies":[{"id":132151,"content":"你好，Layne，你说到了关键点，所以分区依据最好是能保证一定随机性，一般常见使用自增id或者某些比较分散的数据，如uid及订单id是snowflake算出来的，并且hash分区的算法足够发散","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669898006,"ip_address":"北京","comment_id":363627,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"老师，在上面说到数据指定到Kafka某个分区上，这样会出现数据倾斜问题吧，导致Kafka的集群性能出问题吧？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595279,"discussion_content":"你好，Layne，你说到了关键点，所以分区依据最好是能保证一定随机性，一般常见使用自增id或者某些比较分散的数据，如uid及订单id是snowflake算出来的，并且hash分区的算法足够发散","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669898006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1479934,"avatar":"https://static001.geekbang.org/account/avatar/00/16/94/fe/5fbf1bdc.jpg","nickname":"Layne","note":"","ucode":"1FEAACD900AB39","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":595282,"discussion_content":"但是这样不在同一个分区的话，就没办法保证顺序性了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669898275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595279,"ip_address":"广东","group_id":0},"score":595282,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1479934,"avatar":"https://static001.geekbang.org/account/avatar/00/16/94/fe/5fbf1bdc.jpg","nickname":"Layne","note":"","ucode":"1FEAACD900AB39","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":595286,"discussion_content":"如果想保持分散性的话，如果是订单支付类，可以按用户uid的可以保证分散性，因为每次用户下单的并发不高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669898638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595282,"ip_address":"北京","group_id":0},"score":595286,"extra":""},{"author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":598877,"discussion_content":"老师的意思是不是 根据订单的id选择kafka分区，一个订单的流转就在这个kafka分区做，其他的订单在其他分区做。这样保证订单维度分散在不同的kafka分区即可，因此需要业务的雪花算法足够分散就不会导致数据倾斜。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1673182312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595286,"ip_address":"浙江","group_id":0},"score":598877,"extra":""}]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611354,"discussion_content":"分区是容易保证的放入的时候 指定分区的条件即可 按照业务字段来 业务字段随机即可 例如幂等字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680055648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363140,"user_name":"RiseL","can_delete":false,"product_type":"c1","uid":1651174,"ip_address":"北京","ucode":"1AFDA53E274958","user_header":"https://static001.geekbang.org/account/avatar/00/19/31/e6/3fae5e6f.jpg","comment_is_top":false,"comment_ctime":1669284442,"is_pvip":false,"replies":[{"id":132050,"content":"你好，risel，这就是隔离的关键，业务用数据都推送到业务内了","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669293075,"ip_address":"北京","comment_id":363140,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"外网服务要保证内网网关断开后，仍旧能正常独立运转一小时以上，数据都是内网来的，内网挂了，外网功能还怎么正常运行呢","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594693,"discussion_content":"你好，risel，这就是隔离的关键，业务用数据都推送到业务内了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669293075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3183263,"avatar":"https://static001.geekbang.org/account/avatar/00/30/92/9f/d5255fe8.jpg","nickname":"snake","note":"","ucode":"0C7398D3A68119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595795,"discussion_content":"外网都用的缓存吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670378970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":3183263,"avatar":"https://static001.geekbang.org/account/avatar/00/30/92/9f/d5255fe8.jpg","nickname":"snake","note":"","ucode":"0C7398D3A68119","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599527,"discussion_content":"一部分，还有一些是数据库～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673576792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595795,"ip_address":"北京","group_id":0},"score":599527,"extra":""}]}]},{"had_liked":false,"id":362132,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"北京","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1668179615,"is_pvip":true,"replies":[{"id":131842,"content":"你好，大脸猫，这个数据量会大一些并且全局要有tso服务才行","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668647700,"ip_address":"北京","comment_id":362132,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"可以通过给数据打tag或者版本号，然后周期性的对比同一笔数据的tag或者版本号是否一致，如果不一致，以tag或者版本号新的那一条为准","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593903,"discussion_content":"你好，大脸猫，这个数据量会大一些并且全局要有tso服务才行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668647700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361914,"user_name":"LecKey","can_delete":false,"product_type":"c1","uid":1510904,"ip_address":"北京","ucode":"04C9A1AE1F72ED","user_header":"https://static001.geekbang.org/account/avatar/00/17/0d/f8/3e1d5765.jpg","comment_is_top":false,"comment_ctime":1667968905,"is_pvip":false,"replies":[{"id":131670,"content":"你好，加深下问题：那么更新操作同一条数据如何避免","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668041529,"ip_address":"北京","comment_id":361914,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"课后思考：每条数据都有唯一的数据标识(一般是自增id，或者有规律一串数字唯一id)，而且一般都是小到大，根据这个最大值应该就能判断出来。\n\n如果数据不同步应该找到对应数据节点做补偿操作","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593223,"discussion_content":"你好，加深下问题：那么更新操作同一条数据如何避免","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668041529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1510904,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/f8/3e1d5765.jpg","nickname":"LecKey","note":"","ucode":"04C9A1AE1F72ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":593386,"discussion_content":"龙哥好，更新带来的数据不一致的情况，我个人认为要看具体业务，如果是实时性要求不高的可以用事件队列处理，如果要求强一致性那最好的方式应该是分布式事务保证了，\n\n不知道我理解对不对，望龙哥大佬指正，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668142035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593223,"ip_address":"北京","group_id":0},"score":593386,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1510904,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/f8/3e1d5765.jpg","nickname":"LecKey","note":"","ucode":"04C9A1AE1F72ED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593922,"discussion_content":"思路没问题～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668657485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593386,"ip_address":"北京","group_id":0},"score":593922,"extra":""},{"author":{"id":1347740,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/9c/53d0f906.jpg","nickname":"黄豆豆","note":"","ucode":"5D47A4E3BAD3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1510904,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/f8/3e1d5765.jpg","nickname":"LecKey","note":"","ucode":"04C9A1AE1F72ED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595263,"discussion_content":"分布式事务的落地其实很难的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669884709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593386,"ip_address":"江苏","group_id":0},"score":595263,"extra":""}]}]},{"had_liked":false,"id":361883,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1667956049,"is_pvip":false,"replies":[{"id":131627,"content":"你好，peter，很高兴收到你的提问，内外网是通用的说法，基本对于内网api是没有鉴权可以随便调用的，只有大规模的互联网公司系统模块之间才会做鉴权隔离，外网是指对外给用户提供服务的入口，一般外网有统一入口，入口之外都是外网","user_name":"作者回复","user_name_real":"作者","uid":1004527,"ctime":1667959625,"ip_address":"北京","comment_id":361883,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"请问：内外网这种划分方法是通用的还是你们公司自己独有的？\n我读了一些专栏和书（数量不是很多），都没有提到内外网这种划分，所以对于本讲中提到的内外网非常不理解。请问，这种划分方法是互联网通用的方法吗？还是作者的培训公司自己的一种做法？\n","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593104,"discussion_content":"你好，peter，很高兴收到你的提问，内外网是通用的说法，基本对于内网api是没有鉴权可以随便调用的，只有大规模的互联网公司系统模块之间才会做鉴权隔离，外网是指对外给用户提供服务的入口，一般外网有统一入口，入口之外都是外网","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667959625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}