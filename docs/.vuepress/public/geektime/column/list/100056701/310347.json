{"id":310347,"title":"38 | 通信开销：限制Redis Cluster规模的关键因素","content":"<p>你好，我是蒋德钧。</p><p>Redis Cluster能保存的数据量以及支撑的吞吐量，跟集群的实例规模密切相关。Redis官方给出了Redis Cluster的规模上限，就是一个集群运行1000个实例。</p><p>那么，你可能会问，为什么要限定集群规模呢？其实，这里的一个关键因素就是，<strong>实例间的通信开销会随着实例规模增加而增大</strong>，在集群超过一定规模时（比如800节点），集群吞吐量反而会下降。所以，集群的实际规模会受到限制。</p><p>今天这节课，我们就来聊聊，集群实例间的通信开销是如何影响Redis Cluster规模的，以及如何降低实例间的通信开销。掌握了今天的内容，你就可以通过合理的配置来扩大Redis Cluster的规模，同时保持高吞吐量。</p><h2>实例通信方法和对集群规模的影响</h2><p>Redis Cluster在运行时，每个实例上都会保存Slot和实例的对应关系（也就是Slot映射表），以及自身的状态信息。</p><p>为了让集群中的每个实例都知道其它所有实例的状态信息，实例之间会按照一定的规则进行通信。这个规则就是Gossip协议。</p><p>Gossip协议的工作原理可以概括成两点。</p><p>一是，每个实例之间会按照一定的频率，从集群中随机挑选一些实例，把PING消息发送给挑选出来的实例，用来检测这些实例是否在线，并交换彼此的状态信息。PING消息中封装了发送消息的实例自身的状态信息、部分其它实例的状态信息，以及Slot映射表。</p><!-- [[[read_end]]] --><p>二是，一个实例在接收到PING消息后，会给发送PING消息的实例，发送一个PONG消息。PONG消息包含的内容和PING消息一样。</p><p>下图显示了两个实例间进行PING、PONG消息传递的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/86/5eacfc36c4233ae7c99f80b1511yyb86.jpg?wh=2435*890\" alt=\"\"></p><p>Gossip协议可以保证在一段时间后，集群中的每一个实例都能获得其它所有实例的状态信息。</p><p>这样一来，即使有新节点加入、节点故障、Slot变更等事件发生，实例间也可以通过PING、PONG消息的传递，完成集群状态在每个实例上的同步。</p><p>经过刚刚的分析，我们可以很直观地看到，实例间使用Gossip协议进行通信时，通信开销受到<strong>通信消息大小</strong>和<strong>通信频率</strong>这两方面的影响，</p><p>消息越大、频率越高，相应的通信开销也就越大。如果想要实现高效的通信，可以从这两方面入手去调优。接下来，我们就来具体分析下这两方面的实际情况。</p><p>首先，我们来看实例通信的消息大小。</p><h3>Gossip消息大小</h3><p>Redis实例发送的PING消息的消息体是由clusterMsgDataGossip结构体组成的，这个结构体的定义如下所示：</p><pre><code>typedef struct {\n    char nodename[CLUSTER_NAMELEN];  //40字节\n    uint32_t ping_sent; //4字节\n    uint32_t pong_received; //4字节\n    char ip[NET_IP_STR_LEN]; //46字节\n    uint16_t port;  //2字节\n    uint16_t cport;  //2字节\n    uint16_t flags;  //2字节\n    uint32_t notused1; //4字节\n} clusterMsgDataGossip;\n</code></pre><p>其中，CLUSTER_NAMELEN和NET_IP_STR_LEN的值分别是40和46，分别表示，nodename和ip这两个字节数组的长度是40字节和46字节，我们再把结构体中其它信息的大小加起来，就可以得到一个Gossip消息的大小了，即104字节。</p><p>每个实例在发送一个Gossip消息时，除了会传递自身的状态信息，默认还会传递集群十分之一实例的状态信息。</p><p>所以，对于一个包含了1000个实例的集群来说，每个实例发送一个PING消息时，会包含100个实例的状态信息，总的数据量是 10400字节，再加上发送实例自身的信息，一个Gossip消息大约是10KB。</p><p>此外，为了让Slot映射表能够在不同实例间传播，PING消息中还带有一个长度为 16,384 bit 的 Bitmap，这个Bitmap的每一位对应了一个Slot，如果某一位为1，就表示这个Slot属于当前实例。这个Bitmap大小换算成字节后，是2KB。我们把实例状态信息和Slot分配信息相加，就可以得到一个PING消息的大小了，大约是12KB。</p><p>PONG消息和PING消息的内容一样，所以，它的大小大约是12KB。每个实例发送了PING消息后，还会收到返回的PONG消息，两个消息加起来有24KB。</p><p>虽然从绝对值上来看，24KB并不算很大，但是，如果实例正常处理的单个请求只有几KB的话，那么，实例为了维护集群状态一致传输的PING/PONG消息，就要比单个业务请求大了。而且，每个实例都会给其它实例发送PING/PONG消息。随着集群规模增加，这些心跳消息的数量也会越多，会占据一部分集群的网络通信带宽，进而会降低集群服务正常客户端请求的吞吐量。</p><p>除了心跳消息大小会影响到通信开销，如果实例间通信非常频繁，也会导致集群网络带宽被频繁占用。那么，Redis Cluster中实例的通信频率是什么样的呢？</p><h3>实例间通信频率</h3><p>Redis Cluster的实例启动后，默认会每秒从本地的实例列表中随机选出5个实例，再从这5个实例中找出一个最久没有通信的实例，把PING消息发送给该实例。这是实例周期性发送PING消息的基本做法。</p><p>但是，这里有一个问题：实例选出来的这个最久没有通信的实例，毕竟是从随机选出的5个实例中挑选的，这并不能保证这个实例就一定是整个集群中最久没有通信的实例。</p><p>所以，这有可能会出现，<strong>有些实例一直没有被发送PING消息，导致它们维护的集群状态已经过期了</strong>。</p><p>为了避免这种情况，Redis Cluster的实例会按照每100ms一次的频率，扫描本地的实例列表，如果发现有实例最近一次接收 PONG消息的时间，已经大于配置项 cluster-node-timeout的一半了（cluster-node-timeout/2），就会立刻给该实例发送 PING消息，更新这个实例上的集群状态信息。</p><p>当集群规模扩大之后，因为网络拥塞或是不同服务器间的流量竞争，会导致实例间的网络通信延迟增加。如果有部分实例无法收到其它实例发送的PONG消息，就会引起实例之间频繁地发送PING消息，这又会对集群网络通信带来额外的开销了。</p><p>我们来总结下单实例每秒会发送的PING消息数量，如下所示：</p><blockquote>\n<p>PING消息发送数量 = 1 + 10 * 实例数（最近一次接收PONG消息的时间超出cluster-node-timeout/2）</p>\n</blockquote><p>其中，1是指单实例常规按照每1秒发送一个PING消息，10是指每1秒内实例会执行10次检查，每次检查后会给PONG消息超时的实例发送消息。</p><p>我来借助一个例子，带你分析一下在这种通信频率下，PING消息占用集群带宽的情况。</p><p>假设单个实例检测发现，每100毫秒有10个实例的PONG消息接收超时，那么，这个实例每秒就会发送101个PING消息，约占1.2MB/s带宽。如果集群中有30个实例按照这种频率发送消息，就会占用36MB/s带宽，这就会挤占集群中用于服务正常请求的带宽。</p><p>所以，我们要想办法降低实例间的通信开销，那该怎么做呢？</p><h2>如何降低实例间的通信开销？</h2><p>为了降低实例间的通信开销，从原理上说，我们可以减小实例传输的消息大小（PING/PONG消息、Slot分配信息），但是，因为集群实例依赖PING、PONG消息和Slot分配信息，来维持集群状态的统一，一旦减小了传递的消息大小，就会导致实例间的通信信息减少，不利于集群维护，所以，我们不能采用这种方式。</p><p>那么，我们能不能降低实例间发送消息的频率呢？我们先来分析一下。</p><p>经过刚才的学习，我们现在知道，实例间发送消息的频率有两个。</p><ul>\n<li>每个实例每1秒发送一条PING消息。这个频率不算高，如果再降低该频率的话，集群中各实例的状态可能就没办法及时传播了。</li>\n<li>每个实例每100毫秒会做一次检测，给PONG消息接收超过cluster-node-timeout/2的节点发送PING消息。实例按照每100毫秒进行检测的频率，是Redis实例默认的周期性检查任务的统一频率，我们一般不需要修改它。</li>\n</ul><p>那么，就只有cluster-node-timeout这个配置项可以修改了。</p><p>配置项cluster-node-timeout定义了集群实例被判断为故障的心跳超时时间，默认是15秒。如果cluster-node-timeout值比较小，那么，在大规模集群中，就会比较频繁地出现PONG消息接收超时的情况，从而导致实例每秒要执行10次“给PONG消息超时的实例发送PING消息”这个操作。</p><p>所以，为了避免过多的心跳消息挤占集群带宽，我们可以调大cluster-node-timeout值，比如说调大到20秒或25秒。这样一来， PONG消息接收超时的情况就会有所缓解，单实例也不用频繁地每秒执行10次心跳发送操作了。</p><p>当然，我们也不要把cluster-node-timeout调得太大，否则，如果实例真的发生了故障，我们就需要等待cluster-node-timeout时长后，才能检测出这个故障，这又会导致实际的故障恢复时间被延长，会影响到集群服务的正常使用。</p><p>为了验证调整cluster-node-timeout值后，是否能减少心跳消息占用的集群网络带宽，我给你提个小建议：<strong>你可以在调整cluster-node-timeout值的前后，使用tcpdump命令抓取实例发送心跳信息网络包的情况</strong>。</p><p>例如，执行下面的命令后，我们可以抓取到192.168.10.3机器上的实例从16379端口发送的心跳网络包，并把网络包的内容保存到r1.cap文件中：</p><pre><code>tcpdump host 192.168.10.3 port 16379 -i 网卡名 -w /tmp/r1.cap\n</code></pre><p>通过分析网络包的数量和大小，就可以判断调整cluster-node-timeout值前后，心跳消息占用的带宽情况了。</p><h2>小结</h2><p>这节课，我向你介绍了Redis Cluster实例间以Gossip协议进行通信的机制。Redis Cluster运行时，各实例间需要通过PING、PONG消息进行信息交换，这些心跳消息包含了当前实例和部分其它实例的状态信息，以及Slot分配信息。这种通信机制有助于Redis Cluster中的所有实例都拥有完整的集群状态信息。</p><p>但是，随着集群规模的增加，实例间的通信量也会增加。如果我们盲目地对Redis Cluster进行扩容，就可能会遇到集群性能变慢的情况。这是因为，集群中大规模的实例间心跳消息会挤占集群处理正常请求的带宽。而且，有些实例可能因为网络拥塞导致无法及时收到PONG消息，每个实例在运行时会周期性地（每秒10次）检测是否有这种情况发生，一旦发生，就会立即给这些PONG消息超时的实例发送心跳消息。集群规模越大，网络拥塞的概率就越高，相应的，PONG消息超时的发生概率就越高，这就会导致集群中有大量的心跳消息，影响集群服务正常请求。</p><p>最后，我也给你一个小建议，虽然我们可以通过调整cluster-node-timeout配置项减少心跳消息的占用带宽情况，但是，在实际应用中，如果不是特别需要大容量集群，我建议你把Redis Cluster 的规模控制在400~500个实例。</p><p>假设单个实例每秒能支撑8万请求操作（8万QPS），每个主实例配置1个从实例，那么，400~ 500个实例可支持 1600万~2000万QPS（200/250个主实例*8万QPS=1600/2000万QPS），这个吞吐量性能可以满足不少业务应用的需求。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题，如果我们采用跟Codis保存Slot分配信息相类似的方法，把集群实例状态信息和Slot分配信息保存在第三方的存储系统上（例如Zookeeper），这种方法会对集群规模产生什么影响吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","neighbors":{"left":{"article_title":"37 | 数据分布优化：如何应对数据倾斜？","id":308393},"right":{"article_title":"期中测试题 | 一套习题，测出你的掌握程度","id":292800}},"comments":[{"had_liked":false,"id":262686,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1605801960,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"585721354216","product_id":100056701,"comment_content":"如果采用类似 Codis 保存 Slot 信息的方法，把集群实例状态信息和 Slot 分配信息保存在第三方的存储系统上（例如Zookeeper），这种方法会对集群规模产生什么影响？<br><br>由于 Redis Cluster 每个实例需要保存集群完整的路由信息，所以每增加一个实例，都需要多一次与其他实例的通信开销，如果有 N 个实例，集群就要存储 N 份完整的路由信息。而如果像 Codis 那样，把 Slot 信息存储在第三方存储上，那么无论集群实例有多少，这些信息在第三方存储上只会存储一份，也就是说，集群内的通信开销，不会随着实例的增加而增长。当集群需要用到这些信息时，直接从第三方存储上获取即可。<br><br>Redis Cluster 把所有功能都集成在了 Redis 实例上，包括路由表的交换、实例健康检查、故障自动切换等等，这么做的好处是，部署和使用非常简单，只需要部署实例，然后让多个实例组成切片集群即可提供服务。但缺点也很明显，每个实例负责的工作比较重，如果看源码实现，也不太容易理解，而且如果其中一个功能出现 bug，只能升级整个 Redis Server 来解决。<br><br>而 Codis 把这些功能拆分成多个组件，每个组件负责的工作都非常纯粹，codis-proxy 负责转发请求，codis-dashboard 负责路由表的分发、数据迁移控制，codis-server 负责数据存储和数据迁移，哨兵负责故障自动切换，codis-fe 负责提供友好的运维界面，每个组件都可以单独升级，这些组件相互配合，完成整个集群的对外服务。但其缺点是组件比较多，部署和维护比较复杂。<br><br>在实际的业务场景下，我觉得应该尽量避免非常大的分片集群，太大的分片集群一方面存在通信开销大的问题，另一方面也会导致集群变得越来越难以维护。而且当集群出问题时，对业务的影响也比较集中。建议针对不同的业务线、业务模块，单独部署不同的分片集群，这样方便运维和管理的同时，出现问题也只会影响某一个业务模块。","like_count":137,"discussions":[{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329079,"discussion_content":"扯远一点: redis-cluster和codis这两种技术路线和服务发现中的客户端发现/服务端发现有点相似。\n只要codis中的codis-proxy和下游存储的redis实例之间是1:n的关系，总是存在单点问题，添加更加的codis-proxy只能缓解，无法彻底解决。服务端发现也有类似的问题，只要客户端和服务端不是直连，而是通过API Getway(如nginx)做了一次转发，那么API Getay 就是一个单点。解决方案也都是类似的，尽可能让这个做转发的代理的业务变的简单，而且无状态。\n\nredis-cluster中的各个redis节点随着节点数量的增加，通信开销会陡增。即便像维护心跳同步这样最基础的操作，都有可能形成&#34;网络风暴&#34;，解决方案就是每次选取部分节点做同步。客户端与服务端直连也会面临同样的问题，每个客户端节点都需要维护与服务端节点的连接，定时做心跳检测，一旦客户端节点变多，服务端压力也会变的很大。解决方案就是采用子集算法，客户端从服务端列表中选取一个子集来连接，从而减小服务端节点因连接过多造成的压力。在这个问题上，redis-cluster的问题更严重，因为redis-cluster是DB, 必须要保证数据的一致性，即便是最终一致性，所以心跳检测的周期不能太长，而且需要做额外的检查。","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1606308166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329092,"discussion_content":"分析的很好，redis cluster每个实例通信用的gossip协议，就是类似子集算法，作者考虑到这个问题了。当然，集群实例数量不建议太多，否则还是会对网络增加压力。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1606309834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329079,"ip_address":""},"score":329092,"extra":""},{"author":{"id":1879262,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ac/de/68f35320.jpg","nickname":"小来子","note":"","ucode":"4EDAF31E43B211","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350284,"discussion_content":"解决方案也都是类似的，尽可能让这个做转发的代理的业务变的简单，而且无状态。 请教下,这个怎么理解?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613799398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329079,"ip_address":""},"score":350284,"extra":""}]},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327609,"discussion_content":"另外，我的测试环境是ubuntu18.04，redis4.0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605873488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327605,"discussion_content":"课代表你好，请教个问题：\n我搭建一个Redis集群，3个分片，每个分片有一个从节点，共6个节点；\n然后建了一个哨兵集群，3个节点，监控分片1的主节点A。\n\n这时我把节点A下线，它的从节点A&#39;正常切换，没有问题；\n但当我下线另一个分片主节点B时，它的从节点B&#39;并不会上线。\n\n请问这是什么原因，能帮忙解答一下吗？谢谢了\n我猜测一个哨兵集群只能监控一个主节点，但感觉有点说不过去；去看哨兵的配置文件，也没找到相关参数，Goole也查到信息。实在没办法，只能求助大佬了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605872962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327654,"discussion_content":"Redis cluster内置了哨兵逻辑，不需要单独部署哨兵的。看你的情况大概率是配置的问题。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1605884509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327605,"ip_address":""},"score":327654,"extra":""},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327714,"discussion_content":"我是看官方文档整的啊，只不过官方文档里面，切片集群和哨兵集群是分开讲的，没有整合在一起。里面有提到要人工启动哨兵集群：\nredis-server /path/to/sentinel.conf --sentinel\n\n具体链接在这里：https://redis.io/topics/sentinel\n\n文档里面好像没有提到怎么整合切分集群和哨兵集群，它举的例子是哨兵集群监控一主多从架构集群。\n\n不过还是谢谢你了，我再找找看吧。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605925043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327654,"ip_address":""},"score":327714,"extra":""},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327733,"discussion_content":"我测试过了，的确是不用单独部署哨兵，多谢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605927985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327654,"ip_address":""},"score":327733,"extra":""}]}]},{"had_liked":false,"id":269285,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1608602241,"is_pvip":true,"replies":[{"id":"97736","content":"看到Gossip的八卦本质了 :)","user_name":"作者回复","comment_id":269285,"uid":"1609687","ip_address":"","utype":1,"ctime":1608684021,"user_name_real":"蒋德钧"}],"discussion_count":5,"race_medal":2,"score":"190587163265","product_id":100056701,"comment_content":"看到 Gossip 协议，第一时间想到了《人类简史》中说的：八卦是人类进步的动力，但是集群超过一定规模时，八卦的作用就十分有限了。","like_count":45,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512217,"discussion_content":"看到Gossip的八卦本质了 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608684021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2088137,"avatar":"","nickname":"Geek_0bba55","note":"","ucode":"3B647E1EB3C707","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573697,"discussion_content":"国粹都融入redis了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653614063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2870609,"avatar":"","nickname":"Geek_81fd93","note":"","ucode":"010A1ACF8E7F40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543024,"discussion_content":"哈哈 正在看人类简史","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640934547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053553,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/71/3762b089.jpg","nickname":"stevensafin","note":"","ucode":"CC692A740C5FD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377164,"discussion_content":"有营养","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622533932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1765097,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzCZibunMDooyZ86JRibGasxZFbq8HT4WzHAPQIiaBneWnwkb6CaSkesMwAvZpxFGib2ibVA9DVP9LbhQ/132","nickname":"Geek_b43b32","note":"","ucode":"5DD112591702BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371446,"discussion_content":"病毒传播","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619770757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266930,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1607528047,"is_pvip":false,"replies":[{"id":"97907","content":"这是一个方法。分布式系统的通信中，控制平面和数据平面通常会分开来。","user_name":"作者回复","comment_id":266930,"uid":"1609687","ip_address":"","utype":1,"ctime":1608975296,"user_name_real":"蒋德钧"}],"discussion_count":1,"race_medal":0,"score":"57442102895","product_id":100056701,"comment_content":"可以划分管理面和数据面，集群通信走单独的网络","like_count":14,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511449,"discussion_content":"这是一个方法。分布式系统的通信中，控制平面和数据平面通常会分开来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608975296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263778,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1606266421,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23081102901","product_id":100056701,"comment_content":"集群的规模应该是可以进一步扩大的。因为集群的信息保存在了第三方存储系统上，意味着redis cluster内部不用再沟通了，这将节省下大量的集群内部的沟通成本。当然就整个集群而言部署、维护也会更加复杂，毕竟引入了一个第三方组件来管理集群。","like_count":6},{"had_liked":false,"id":304778,"user_name":"璩雷","can_delete":false,"product_type":"c1","uid":1120703,"ip_address":"","ucode":"BBAC0933BB7C92","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/bf/415023b5.jpg","comment_is_top":false,"comment_ctime":1627611963,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14512513851","product_id":100056701,"comment_content":"约到后面，评论的人越少，看来坚持到最后的人不多啊~~","like_count":3,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387226,"discussion_content":"善始者众，善终者寡。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1628062493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390574,"discussion_content":"靡不有初，鲜克有终。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629899111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280367,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1614169993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10204104585","product_id":100056701,"comment_content":"用Gossip协议管理配置和Zookeeper统一存储配置信息各有利弊。<br>Gossip协议在节点间传递配置让系统简单，而且发生网络故障时自行恢复能力更强一些，但通讯效率随着网络节点的增加而降低；<br>Zookeeper统一管理配置，通讯效率无论节点多少都比较高，但让系统架构更复杂故障点增多，对抗网络故障时自行恢复能力差一些。<br>但其实无论哪种方式，节点太多了都会更加难以管理维护，出现问题影响面也更难以控制，不推荐。<br>但其实另一个极端，就是单个实例性能特别高，存储特别多数据也不推荐，同样也是更容易出问题，出现问题影响面太大，不推荐。","like_count":2},{"had_liked":false,"id":343969,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2649276,"ip_address":"","ucode":"CEBAD9CDCFC2A3","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","comment_is_top":false,"comment_ctime":1651148973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5946116269","product_id":100056701,"comment_content":"其实集群不要大，大了通讯是个问题同样后期维护也是个很大的麻烦；不同业务的redis集群区分开来，这样每个集群不至于太大，也不至于一个集群出问题影响到别的业务；","like_count":2},{"had_liked":false,"id":297429,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1623549184,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5918516480","product_id":100056701,"comment_content":"Gossip 协议还有很多有意思的东西，可以参照这篇：<br>病毒传播：全靠 Gossip 协议：<br>http:&#47;&#47;www.passjava.cn&#47;#&#47;92.%E5%88%86%E5%B8%83%E5%BC%8F&#47;08.Gossip%E5%8D%8F%E8%AE%AE","like_count":1},{"had_liked":false,"id":355529,"user_name":"弱水穿云天","can_delete":false,"product_type":"c1","uid":1190060,"ip_address":"上海","ucode":"80DC528A23ED7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/28/ac/37a2a265.jpg","comment_is_top":false,"comment_ctime":1661475812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661475812","product_id":100056701,"comment_content":"冒个泡，还在坚持。善始者众善终者寡","like_count":0},{"had_liked":false,"id":354720,"user_name":"飞龙","can_delete":false,"product_type":"c1","uid":2276763,"ip_address":"广东","ucode":"EC83FE73985491","user_header":"https://static001.geekbang.org/account/avatar/00/22/bd/9b/366bb87b.jpg","comment_is_top":false,"comment_ctime":1660717346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660717346","product_id":100056701,"comment_content":"没搞明白，如果一定数量的redis实例都部署在同一内网网络环境之内，实例之前通过内网相互PING Pong,怎么会占网络通信带宽呢","like_count":0},{"had_liked":false,"id":342474,"user_name":"没想法的岁月","can_delete":false,"product_type":"c1","uid":1466502,"ip_address":"","ucode":"40D6CFE95CC8E4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJN6ZnE6ECdJ2aW1WicDVyGwWjQgBWad8WNqHicajKaE4hkmVBJU8vuVEab2MicC4bdknMndjRspo4Hw/132","comment_is_top":false,"comment_ctime":1650282134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650282134","product_id":100056701,"comment_content":"每个实例在发送一个 Gossip 消息时，除了会传递自身的状态信息，默认还会传递集群十分之一实例的状态信息。---------ping的时候为什么要发送其他实例的信息","like_count":0},{"had_liked":false,"id":334859,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1645156804,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645156804","product_id":100056701,"comment_content":"master 故障的时候， 需要整个集群 master 参与选择 一个 slave 重新成为 master,  如果是 100 节点， 50 个master， 需要 49 个 master 参与这个类似raft 的算法， 效率也太低下了吧？","like_count":0},{"had_liked":false,"id":332373,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1202174,"ip_address":"","ucode":"A07ABF45D39089","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/fe/beab006d.jpg","comment_is_top":false,"comment_ctime":1643189517,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643189517","product_id":100056701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":310770,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1630898270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630898270","product_id":100056701,"comment_content":"好处在于,这样减少了每个实例的负担,保证了元信息的一致性<br>坏处是集群系统中需要额外维护第三方系统,增加了系统复杂度","like_count":0},{"had_liked":false,"id":308340,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1629545523,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1629545523","product_id":100056701,"comment_content":"我们也不要把 cluster-node-timeout 调得太大，否则，如果实例真的发生了故障，我们就需要等待 cluster-node-timeout 时长后，才能检测出这个故障，这又会导致实际的故障恢复时间被延长，会影响到集群服务的正常使用。 老师请问下这句话 不是因该是 发生故障 cluster-node-timeout &#47;2 就能检测出故障吗? 因为 pong 超过 cluster-node-timeout &#47;2 就会发送ping，为什么是cluster-node-timeout 之后才能检测出故障呢","like_count":0,"discussions":[{"author":{"id":1444748,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0b/8c/db1ee0a2.jpg","nickname":"walkingonair","note":"","ucode":"0C8BEE064ABF8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391478,"discussion_content":"cluster-node-timeout /2不是发现故障的时间，是判断需要发起ping消息的时间。真正的redis cluster使用比这里讲的更复杂。我另外查了资料，\n1> 主观下线（pfail）识别时间=cluster-node-timeout。\n2> 主观下线状态消息传播时间<=cluster-node-timeout/2。消息通信机制对超过cluster-node-timeout/2未通信节点会发起ping消息，消息体在选择包含哪些节点时会优先选取下线状态节点，所以通常这段时间内能够收集到半数以上主节点的pfail报告从而完成故障发现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630481329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300012,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1624955112,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1624955112","product_id":100056701,"comment_content":"我一直想问个问题，是每个redis实例配置到一台计算机上？还是每个计算机的物理核上绑定一个redis实例？","like_count":0,"discussions":[{"author":{"id":2037343,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/w5clq5iao6Drk2omjqdcJSVicHLffzwsJnqOdD7HATD4904UgXKr5LCfAa90bNLhr7uia0mjyxcF1HGibKQXzicSB7A/132","nickname":"Geek_7b634a","note":"","ucode":"F7E9652F667C39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389241,"discussion_content":"一般一台大内存的机器上会有多个redis实例，所以是每个redis实例以物理核为绑定单位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629188925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286680,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617495604,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617495604","product_id":100056701,"comment_content":"今天这个话题应该有点类似屠龙之技，菜鸟如我，什么时候才能有机会运维 100 个以上实例的 Redis Cluster。<br><br>Gossip 协议还挺有意思，名字也比较形象。如果翻译成中文，是叫“八卦协议”么？好像容易引起误解。“流言蜚语协议”、“风闻协议”？<br><br>一个 ping 消息大概是 104 字节，1000 个实例的 Redis 集群一个 Gossip 消息大概是 12KB，ping-pong 往返，24KB。再加上实例间的通信，那么集群中用于服务正常请求的带宽就会被占用。在这种情况下，是不是采用类似于 Codis 的集中式管理更合适？<br><br>将 cluster-node-timeout 从 15 秒调整到 20 或 25 秒，大概能减少 1&#47;3 到 2&#47;3 的实例间通信流量（不知道这个计算是否正确）<br><br>PING 消息发送数量 = 1 + 10 * 实例数（最近一次接收 PONG 消息的时间超出 cluster-node-timeout&#47;2）<br><br>估计最后还是要靠 tcpdump 来分析实例间的网络带宽变化情况，然后再找出合适的 cluster-node-timeout。但是业务流量经常会有变化，增加了调优的难度。<br><br>对于课后题，如果是 Codis 模式，将集群实例状态信息和 Slot 分配信息保存在 Zookeeper 上，那么实例太多之后，查询分配信息的时间也会比较长，另外实时保存实例状态信息也比较难。","like_count":0},{"had_liked":false,"id":286132,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1617163429,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617163429","product_id":100056701,"comment_content":"老师你好，有个疑惑，选择一个节点Ping，这个节点是主节点还是主从节点都可以？","like_count":0},{"had_liked":false,"id":267886,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1607966533,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1607966533","product_id":100056701,"comment_content":"找到了 PONG 消息接收超过 cluster-node-timeout&#47;2的节点之后,是其他所有的实例给它发消息?","like_count":0,"discussions":[{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340679,"discussion_content":"其中一台吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610096485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265673,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606977469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606977469","product_id":100056701,"comment_content":"集群的规模可以进一步扩大。<br>相当于前面套了一层proxy，proxy从zookeeper获取相关slot信息，然后做请求转发即可？","like_count":0},{"had_liked":false,"id":262755,"user_name":"向东是大海","can_delete":false,"product_type":"c1","uid":2046992,"ip_address":"","ucode":"A9FE1049D0D144","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/10/61efe672.jpg","comment_is_top":false,"comment_ctime":1605837889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605837889","product_id":100056701,"comment_content":"请教老师一个问题：Redis 哨兵模式中，默认情况下从实例是否接受读请求？哨兵模式中从实例的规模有没有限制？假设单个实例每秒能支撑 8 万 QPS，使用“一主二从三哨兵”方式部署，“一主二从”能支撑 8 万  QPS * 3 = 24 万 QPS 吗？","like_count":0},{"had_liked":false,"id":262728,"user_name":"东","can_delete":false,"product_type":"c1","uid":1043947,"ip_address":"","ucode":"0FF5018422CEA9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/eb/88cac7a5.jpg","comment_is_top":false,"comment_ctime":1605833758,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605833758","product_id":100056701,"comment_content":"“PING 消息中封装了发送消息的实例自身的状态信息、部分其它实例的状态信息，以及 Slot 映射表。” 如果两个实例中包含的“其他实例的状态信息” 不一致，实例2如何处理呢？是比较时间戳吗？","like_count":0,"discussions":[{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375393,"discussion_content":"有版本控制机制，时间戳是一种方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621604912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}