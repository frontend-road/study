{"id":97200,"title":"33 | iOS 系统内核 XNU：App 如何加载？","content":"<p>你好，我是戴铭。</p><p>在专栏的第2篇文章<a href=\"https://time.geekbang.org/column/article/85331\">《App 启动速度怎么做优化与监控？》</a>更新完之后，我看到很多同学对启动加载 App 的底层原理表示出了浓厚兴趣。所谓工欲善其事，必先利其器，相信有着好奇心的你，一定也会对支撑着 App 运行的操作系统有着各种各样的疑问。</p><p>我曾在专栏的第5篇文章<a href=\"https://time.geekbang.org/column/article/86840\">《链接器：符号是怎么绑定到地址上的？》</a>中，和你分享了链接器在编译时和程序启动时会做的事情。而今天这篇文章，我会重点与你说说加载动态链接器之前，系统是怎么加载 App 的。</p><p>所以，今天我会先跟你说说iOS系统的架构是怎样的，各部分的作用是什么，帮助你理解iOS系统的原理，进而更全面地理解它在 App 加载时做了哪些事情？</p><p>接下来，我就先跟你聊聊 iOS 的系统架构是怎样的。在理解iOS系统架构之前，你最好掌握一些操作系统原理的基础知识。</p><h2>iOS 系统架构</h2><p>iOS 系统是基于 ARM 架构的，大致可以分为四层：</p><ul>\n<li>最上层是用户体验层，主要是提供用户界面。这一层包含了 SpringBoard、Spotlight、Accessibility。</li>\n<li>第二层是应用框架层，是开发者会用到的。这一层包含了开发框架 Cocoa Touch。</li>\n<li>第三层是核心框架层，是系统核心功能的框架层。这一层包含了各种图形和媒体核心框架、Metal 等。</li>\n<li>第四层是 Darwin层，是操作系统的核心，属于操作系统的内核态。这一层包含了系统内核 XNU、驱动等。</li>\n</ul><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/6d/01/6d0c4526f448d03c232cfa0149a32d01.png?wh=1186*576\" alt=\"\"></p><center><span class=\"reference\">图1 iOS系统架构</span></center><p>其中，用户体验层、应用框架层和核心框架层，属于用户态，是上层 App 的活动空间。Darwin是用户态的下层支撑，是iOS系统的核心。</p><p>Darwin的内核是XNU，而XNU是在UNIX的基础上做了很多改进以及创新。了解XNU的内部是怎么样的，将有助于我们解决系统层面的问题。</p><p>所以接下来，我们就一起看看XNU的架构，看看它的内部到底都包含了些什么。</p><h2>XNU</h2><p>XNU 内部由 Mach、BSD、驱动 API IOKit 组成，这些都依赖于 libkern、libsa、Platform Expert。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/7b/0f51e4995ead8b5b4c0e8cd2a987917b.png?wh=1920*1080\" alt=\"\"></p><center><span class=\"reference\">图2 XNU系统架构</span></center><p>其中，<a href=\"https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/Mach/Mach.html\">Mach</a>是作为 UNIX 内核的替代，主要解决 UNIX一切皆文件导致抽象机制不足的问题，为现代操作系统做了进一步的抽象工作。 Mach 负责操作系统最基本的工作，包括进程和线程抽象、处理器调度、进程间通信、消息机制、虚拟内存管理、内存保护等。</p><p>进程对应到 Mach 是 Mach Task，Mach Task 可以看做是线程执行环境的抽象，包含虚拟地址空间、IPC 空间、处理器资源、调度控制、线程容器。</p><p>进程在 BSD 里是由 BSD Process 处理，BSD Process 扩展了 Mach Task，增加了进程 ID、信号信息等，BSD Process 里面包含了扩展 Mach Thread 结构的 Uthread。</p><p>Mach 的模块包括进程和线程都是对象，对象之间不能直接调用，只能通过 Mach Msg 进行通信，也就是 mach_msg() 函数。在用户态的那三层中，也就是在用户体验层、应用框架层和核心框架层中，你可以通过 mach_msg_trap() 函数触发陷阱，从而切至 Mach，由 Mach 里的 mach_msg() 函数完成实际通信，具体实现可以参看 NSHipster 的这篇文章“<a href=\"https://nshipster.com/inter-process-communication/\">Inter-Process Communication</a>”。</p><p>每个 Mach Thread 表示一个线程，是 Mach 里的最小执行单位。Mach Thread 有自己的状态，包括机器状态、线程栈、调度优先级（有128个，数字越大表示优先级越高）、调度策略、内核 Port、异常 Port。</p><p>Mach Thread 既可以由 Mach Task 处理，也可以扩展为 Uthread，通过 BSD Process 处理。这是因为 XNU 采用的是微内核 Mach 和 宏内核 BSD 的混合内核，具备微内核和宏内核的优点。</p><ul>\n<li>微内核可以提高系统的模块化程度，提供内存保护的消息传递机制；</li>\n<li>宏内核也可以叫单内核，在出现高负荷状态时依然能够让系统保持高效运作。</li>\n</ul><p>Mach 是微内核，可以将操作系统的核心独立在进程上运行，不过，内核层和用户态各层之间切换上下文和进程间消息传递都会降低性能。为了提高性能，苹果深度定制了 BSD 宏内核，使其和 Mach 混合使用。</p><p>宏内核 BSD 是对 Mach 封装，提供进程管理、安全、网络、驱动、内存、文件系统（HFS+）、网络文件系统（NFS）、虚拟文件系统（VFS）、POSIX（Portable Operating System Interface of UNIX，可移植操作系统接口）兼容。</p><p>早期的 BSD 是 UNIX 衍生出的操作系统，现在 BSD 是类 UNIX 操作系统的统称。XNU 的 BSD 来源于 FreeBSD 内核，经过深度定制而成。IEEE 为了保证软件可以在各个 UNIX 系统上运行而制定了 POSIX 标准，iOS 也是通过 BSD 对 POSIX 的兼容而成为了类 UNIX 系统。</p><p>BSD 提供了更现代、更易用的内核接口，以及 POSIX 的兼容，比如通过扩展 Mach Task 进程结构为 BSD Process。对于 Mach 使用 mach_msg_trap() 函数触发陷阱来处理异常消息，BSD 则在异常消息机制的基础上建立了信号处理机制，用户态产生的信号会先被 Mach 转换成异常，BSD 将异常再转换成信号。对于进程和线程，BSD 会构建 UNIX 进程模型，创建 POSIX 兼容的线程模型 pthread。</p><p>iOS 6后，为了增强系统安全，BSD 实行了ASLR（Address Space Layout Randomization，地址空间布局随机化）。随着 iPhone 硬件升级，为了更好地利用多核，BSD 加入了工作队列，以支持多核多线程处理，这也是 GCD 能更高效工作的基础。 BSD 还从 TrustdBSD 引入了 MAC 框架以增强权限 entitlement 机制的安全。</p><p>除了微内核 Mach 和宏内核 BSD 外，XNU 还有 IOKit。IOKit 是硬件驱动程序的运行环境，包含电源、内存、CPU等信息。IOKit 底层 libkern 使用 C++ 子集 Embedded C++ 编写了驱动程序基类，比如 OSObject、OSArray、OSString等，新驱动可以继承这些基类来写。</p><p>了解了 XNU 后，接下来，我再跟你聊聊 XNU 怎么加载 App 的？</p><h2>XNU 怎么加载 App？</h2><p>iOS 的可执行文件和动态库都是 Mach-O 格式，所以加载 APP 实际上就是加载 Mach-O 文件。</p><p>Mach-O header 信息结构代码如下：</p><pre><code>struct mach_header_64 {\n    uint32_t        magic;      // 64位还是32位\n    cpu_type_t      cputype;    // CPU 类型，比如 arm 或 X86\n    cpu_subtype_t   cpusubtype; // CPU 子类型，比如 armv8\n    uint32_t        filetype;   // 文件类型\n    uint32_t        ncmds;      // load commands 的数量\n    uint32_t        sizeofcmds; // load commands 大小\n    uint32_t        flags;      // 标签\n    uint32_t        reserved;   // 保留字段\n};\n</code></pre><p>如上面代码所示，包含了表示是64位还是32位的 magic、CPU 类型 cputype、CPU 子类型 cpusubtype、文件类型 filetype、描述文件在虚拟内存中逻辑结构和布局的 load commands 数量和大小等文件信息。</p><p>其中，文件类型 filetype 表示了当前 Mach-O 属于哪种类型。Mach-O 包括以下几种类型。</p><ul>\n<li>OBJECT，指的是 .o 文件或者 .a 文件；</li>\n<li>EXECUTE，指的是IPA 拆包后的文件；</li>\n<li>DYLIB，指的是 .dylib 或 .framework 文件；</li>\n<li>DYLINKER，指的是动态链接器；</li>\n<li>DSYM，指的是保存有符号信息用于分析闪退信息的文件。</li>\n</ul><p>加载 Mach-O 文件，内核会 fork 进程，并对进程进行一些基本设置，比如为进程分配虚拟内存、为进程创建主线程、代码签名等。用户态 dyld 会对 Mach-O 文件做库加载和符号解析。</p><p>苹果公司已经将 <a href=\"https://opensource.apple.com/\">XNU 开源</a>，并在 GitHub 上创建了<a href=\"https://github.com/apple/darwin-xnu\">镜像</a>。要想编译 XNU，你可以查看“<a href=\"https://0xcc.re/building-xnu-kernel-macosx-sierrra-10-12-x/\">Building the XNU kernel on Mac OS X Sierra (10.12.X)</a>”这篇文章；要想调试 XNU，可以查看“<a href=\"https://shadowfile.inode.link/blog/2018/10/source-level-debugging-the-xnu-kernel/\">Source Level Debugging the XNU Kernel</a>”这篇文章。</p><p>整个 fork 进程，加载解析 Mach-O文件的过程可以在 XNU 的源代码中查看，代码路径是darwin-xnu/bsd/kern/kern_exec.c，地址是<a href=\"https://github.com/apple/darwin-xnu/blob/master/bsd/kern/kern_exec.c\">https://github.com/apple/darwin-xnu/blob/master/bsd/kern/kern_exec.c</a>，相关代码在 __mac_execve 函数里，代码如下：</p><pre><code>int __mac_execve(proc_t p, struct __mac_execve_args *uap, int32_t *retval)\n{\n    // 字段设置\n    ...\n    int is_64 = IS_64BIT_PROCESS(p);\n    struct vfs_context context;\n    struct uthread  *uthread; // 线程\n    task_t new_task = NULL;   // Mach Task\n    ...\n    \n    context.vc_thread = current_thread();\n    context.vc_ucred = kauth_cred_proc_ref(p);\n    \n    // 分配大块内存，不用堆栈是因为 Mach-O 结构很大。\n    MALLOC(bufp, char *, (sizeof(*imgp) + sizeof(*vap) + sizeof(*origvap)), M_TEMP, M_WAITOK | M_ZERO);\n    imgp = (struct image_params *) bufp;\n    \n    // 初始化 imgp 结构里的公共数据\n    ...\n    \n    uthread = get_bsdthread_info(current_thread());\n    if (uthread-&gt;uu_flag &amp; UT_VFORK) {\n        imgp-&gt;ip_flags |= IMGPF_VFORK_EXEC;\n        in_vfexec = TRUE;\n    } else {\n        // 程序如果是启动态，就需要 fork 新进程\n        imgp-&gt;ip_flags |= IMGPF_EXEC;\n        // fork 进程\n        imgp-&gt;ip_new_thread = fork_create_child(current_task(),\n                    NULL, p, FALSE, p-&gt;p_flag &amp; P_LP64, TRUE);\n        // 异常处理\n        ...\n\n        new_task = get_threadtask(imgp-&gt;ip_new_thread);\n        context.vc_thread = imgp-&gt;ip_new_thread;\n    }\n    \n    // 加载解析 Mach-O\n    error = exec_activate_image(imgp);\n    \n    if (imgp-&gt;ip_new_thread != NULL) {\n        new_task = get_threadtask(imgp-&gt;ip_new_thread);\n    }\n\n    if (!error &amp;&amp; !in_vfexec) {\n        p = proc_exec_switch_task(p, current_task(), new_task, imgp-&gt;ip_new_thread);\n    \n        should_release_proc_ref = TRUE;\n    }\n\n    kauth_cred_unref(&amp;context.vc_ucred);\n    \n    if (!error) {\n        task_bank_init(get_threadtask(imgp-&gt;ip_new_thread));\n        proc_transend(p, 0);\n\n        thread_affinity_exec(current_thread());\n\n        // 继承进程处理\n        if (!in_vfexec) {\n            proc_inherit_task_role(get_threadtask(imgp-&gt;ip_new_thread), current_task());\n        }\n\n        // 设置进程的主线程\n        thread_t main_thread = imgp-&gt;ip_new_thread;\n        task_set_main_thread_qos(new_task, main_thread);\n    }\n    ...\n}\n</code></pre><p>可以看出，由于 Mach-O 文件很大， __mac_execve 函数会先为 Mach-O 分配一大块内存 imgp，接下来会初始化 imgp 里的公共数据。内存处理完，__mac_execve 函数就会通过 fork_create_child() 函数 fork 出一个新的进程。新进程 fork 后，会通过 exec_activate_image() 函数解析加载 Mach-O 文件到内存 imgp 里。最后，使用 task_set_main_thread_qos() 函数设置新 fork 出进程的主线程。</p><p>exec_activate_image() 函数会调用不同格式对应的加载函数，代码如下：</p><pre><code>struct execsw {\n    int (*ex_imgact)(struct image_params *);\n    const char *ex_name;\n} execsw[] = {\n    { exec_mach_imgact,     &quot;Mach-o Binary&quot; },\n    { exec_fat_imgact,      &quot;Fat Binary&quot; },\n    { exec_shell_imgact,        &quot;Interpreter Script&quot; },\n    { NULL, NULL}\n};\n</code></pre><p>可以看出，加载 Mach-O 文件的是 exec_mach_imgact() 函数。exec_mach_imgact() 会通过 load_machfile() 函数加载 Mach-O 文件，根据解析 Mach-O 后得到的 load command 信息，通过映射方式加载到内存中。还会使用 activate_exec_state() 函数处理解析加载 Mach-O 后的结构信息，设置执行 App 的入口点。</p><p>设置完入口点后会通过 load_dylinker() 函数来解析加载 dyld，然后将入口点地址改成 dyld 的入口地址。这一步完后，内核部分就完成了 Mach-O文件的加载。剩下的就是用户态层 dyld 加载 App 了。</p><p>Dyld 的入口函数是 __dyld_start，dyld 属于用户态进程，不在 XNU 里，__dyld_start 函数的实现代码在 dyld 仓库中的 <a href=\"https://github.com/opensource-apple/dyld/blob/master/src/dyldStartup.s\">dyldStartup.s 文件</a>里。__dyld_start 会加载 App 相关的动态库，处理完成后会返回 App 的入口地址，然后到 App 的 main 函数。</p><h2>小结</h2><p>今天我跟你介绍了 iOS 系统的内核 XNU，以及 XNU 是如何加载 App 的。总体来说，XNU 加载就是为 Mach-O 创建一个新进程，建立虚拟内存空间，解析Mach-O文件，最后映射到内存空间。流程可以概括为：</p><ol>\n<li>\n<p>fork 新进程；</p>\n</li>\n<li>\n<p>为 Mach-O 分配内存；</p>\n</li>\n<li>\n<p>解析 Mach-O；</p>\n</li>\n<li>\n<p>读取 Mach-O 头信息；</p>\n</li>\n<li>\n<p>遍历 load command 信息，将 Mach-O 映射到内存；</p>\n</li>\n<li>\n<p>启动 dyld。</p>\n</li>\n</ol><h2>课后作业</h2><p>在今天这篇文章中，我主要和你分享的是系统内核加载 App的流程，而关于用户态 dyld 加载过程没有展开说。如果你想了解 dyld 加载过程的话，可以看看 Mike Ash 的“<a href=\"https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html\">dyld: Dynamic Linking On OS X</a>”这篇文章。</p><p>相应地，今天的课后思考题，我希望你能够和我分享一下这篇文章的读后感。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"32 | 热点问题答疑（三）","id":96883},"right":{"article_title":"34 | iOS 黑魔法 Runtime Method Swizzling 背后的原理","id":97616}},"comments":[{"had_liked":false,"id":99248,"user_name":"bart","can_delete":false,"product_type":"c1","uid":1394152,"ip_address":"","ucode":"CDB3351F85A65D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoGRhUIWgJcgLOkpH6p4EfxVGvF0daA9r91CoEcJ0lRIAiad8FJFzf4WVHgJRh0OdicX5PZ2MpWCV0Q/132","comment_is_top":false,"comment_ctime":1559182182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"117523299174","product_id":100024501,"comment_content":"推荐大家回顾一下大学的《操作系统》，然后看一下《 深入解析Mac OSX &amp; IOS 操作系统》，这样听起来会畅快很多。","like_count":28},{"had_liked":false,"id":100306,"user_name":"毛成方","can_delete":false,"product_type":"c1","uid":1459289,"ip_address":"","ucode":"DFBF3D464D8D7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","comment_is_top":false,"comment_ctime":1559525484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35919263852","product_id":100024501,"comment_content":"Mike Ash文章最后总结说道大部分工程师不会去在意这些细节 但是当你在遇到动态链接等报错的时候 你讲更好去分析和解决它们。换句话说 我们要走出自己的舒适区 去研究新的技术 碰壁 总结 才能有更好的成长 去挑战更大的平台。","like_count":9},{"had_liked":false,"id":98904,"user_name":"赵国辉","can_delete":false,"product_type":"c1","uid":1166280,"ip_address":"","ucode":"390196BD3082B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/c8/ff9f3ffb.jpg","comment_is_top":false,"comment_ctime":1559115000,"is_pvip":false,"replies":[{"id":"38606","content":"可以看这篇 https:&#47;&#47;www.mikeash.com&#47;pyblog&#47;friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387936,"ip_address":"","comment_id":98904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14444016888","product_id":100024501,"comment_content":"老师，有没有计划讲解一下dyld的工作过程和原理，非常想学习一下","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451886,"discussion_content":"可以看这篇 https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99243,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1456901,"ip_address":"","ucode":"8C1AD026C1AC84","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/05/b2776d73.jpg","comment_is_top":false,"comment_ctime":1559181204,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10149115796","product_id":100024501,"comment_content":"读后感: 真的看不懂，iOS开发需要这么深入吗？","like_count":2,"discussions":[{"author":{"id":1019783,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/87/c290cbff.jpg","nickname":"饭小团","note":"","ucode":"46CAF2771EBDC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327589,"discussion_content":"不需要，能把基本的代码做好老板就谢谢你了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605868466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1483061,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a1/35/40a9f436.jpg","nickname":"燃ゆる命","note":"","ucode":"1981965D4BC317","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359306,"discussion_content":"其实大学的操作系统和计算机组成原理弄通，这个自然而然就理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616160422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1768310,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fb/76/37dccd3d.jpg","nickname":"徐炜","note":"","ucode":"701DAD17B7B253","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88378,"discussion_content":"为什么不需要，知其然知其所以然，才能写出让人放心的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576711977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139244,"user_name":"Bill","can_delete":false,"product_type":"c1","uid":1273035,"ip_address":"","ucode":"DAF34E50CF3434","user_header":"https://static001.geekbang.org/account/avatar/00/13/6c/cb/8a41f8ce.jpg","comment_is_top":false,"comment_ctime":1570591490,"is_pvip":false,"replies":[{"id":"54266","content":"https:&#47;&#47;zh.wikipedia.org&#47;zh&#47;BSD","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1570939827,"ip_address":"","comment_id":139244,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865558786","product_id":100024501,"comment_content":"多从提到了BSD BSD全称到底是啥","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469851,"discussion_content":"https://zh.wikipedia.org/zh/BSD","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570939827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99008,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1559129505,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5854096801","product_id":100024501,"comment_content":"读后感: 真的看不懂，iOS开发需要这么深入吗？","like_count":1,"discussions":[{"author":{"id":1018444,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/4c/d976b42c.jpg","nickname":"冯选刚","note":"","ucode":"A186F31A730F04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61276,"discussion_content":"任何开发都需要深入哦，不然就是api工程师","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574776724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97951,"user_name":"烩面","can_delete":false,"product_type":"c1","uid":1473148,"ip_address":"","ucode":"226C99988D3A58","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/7c/7bde009a.jpg","comment_is_top":false,"comment_ctime":1558851262,"is_pvip":false,"replies":[{"id":"35032","content":"fork 新进程之前内存并没有分配给新进程，是在 fork 新进程后再分配的，调用的函数是 exec_activate_image，这个函数会依据 execsw 加载二进制文件格式进行内存映射，对内存进行分配，对于 Mach-O 格式使用的是 exec_mach_imgact() 函数。文中已有说明。","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1558868694,"ip_address":"","comment_id":97951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853818558","product_id":100024501,"comment_content":"老师，是先 fork 出新进程，还是先分配内存呢？ 小结和上面对 __mac_execve 函数的分析上好像有点出入 。。。","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451486,"discussion_content":"fork 新进程之前内存并没有分配给新进程，是在 fork 新进程后再分配的，调用的函数是 exec_activate_image，这个函数会依据 execsw 加载二进制文件格式进行内存映射，对内存进行分配，对于 Mach-O 格式使用的是 exec_mach_imgact() 函数。文中已有说明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558868694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306640,"user_name":"D","can_delete":false,"product_type":"c1","uid":2681398,"ip_address":"","ucode":"4112DE94C80A5B","user_header":"https://static001.geekbang.org/account/avatar/00/28/ea/36/7d088c63.jpg","comment_is_top":false,"comment_ctime":1628654263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628654263","product_id":100024501,"comment_content":"所以App的Mach-O 文件到底是由XNU加载到内存的还是由dyld加载到内存的？以前一直认为是dyld 加载App的Mac-o 并解析加载load commands。现在越来越看不懂了...","like_count":0},{"had_liked":false,"id":266634,"user_name":"Wim","can_delete":false,"product_type":"c1","uid":2188198,"ip_address":"","ucode":"82CDA3F0F0CC51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/a6/5b5879e7.jpg","comment_is_top":false,"comment_ctime":1607421120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607421120","product_id":100024501,"comment_content":"大神能讲一下“点击appIcon到app启动”或者“被别的应用拉起的启动”具体的底层过程吗？","like_count":0},{"had_liked":false,"id":207861,"user_name":"Geek_9dbcb4","can_delete":false,"product_type":"c1","uid":1785940,"ip_address":"","ucode":"BB92D5E844A743","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","comment_is_top":false,"comment_ctime":1587198859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587198859","product_id":100024501,"comment_content":"文中“加载 Mach-O 文件，内核会 fork 进程，并对进程进行一些基本设置，比如为进程分配虚拟内存、为进程创建主线程、代码签名等”。<br>问题，这个地方的代码签名，不同于我们证书的私钥对APP的签名吧？也不同于苹果的私钥对APP的再次签名吧？","like_count":0},{"had_liked":false,"id":207849,"user_name":"Geek_9dbcb4","can_delete":false,"product_type":"c1","uid":1785940,"ip_address":"","ucode":"BB92D5E844A743","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","comment_is_top":false,"comment_ctime":1587197120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587197120","product_id":100024501,"comment_content":"文中“XNU 加载就是为 Mach-O 创建一个新进程，建立虚拟内存空间，解析 Mach-O 文件，最后映射到内存空间。”，最后这个虚拟内存空间就没有了吧？例如进程内所有的地址访问，都是真实内存地址了，是吧","like_count":0},{"had_liked":false,"id":97921,"user_name":"yujian","can_delete":false,"product_type":"c1","uid":1455331,"ip_address":"","ucode":"F58E6754A52C1D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eryWeGhypWhPlxbnPgx5o7iadtgBU9YkNFJfJfBu5dvosdTns8JELibOciaZx89MajzCRLOrrqwqgcPw/132","comment_is_top":false,"comment_ctime":1558841663,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1558841663","product_id":100024501,"comment_content":"请问：app被拒后，申诉仅解释一下，但是代码不动还用原来的ipa，想问是否还需要重新提交审核么","like_count":0,"discussions":[{"author":{"id":1018444,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/4c/d976b42c.jpg","nickname":"冯选刚","note":"","ucode":"A186F31A730F04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61268,"discussion_content":"不需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574776644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97877,"user_name":"凛冬一壶酒","can_delete":false,"product_type":"c1","uid":1471417,"ip_address":"","ucode":"4C9C596CCB645B","user_header":"https://static001.geekbang.org/account/avatar/00/16/73/b9/c4b5b7c6.jpg","comment_is_top":false,"comment_ctime":1558806819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558806819","product_id":100024501,"comment_content":"这个可以有 哈哈哈","like_count":0},{"had_liked":false,"id":97709,"user_name":"吹啊吹吹","can_delete":false,"product_type":"c1","uid":1455385,"ip_address":"","ucode":"FFB7D85C26145B","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/19/4f9dc4b5.jpg","comment_is_top":false,"comment_ctime":1558752428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558752428","product_id":100024501,"comment_content":"帅！看来得多听几遍了","like_count":0}]}