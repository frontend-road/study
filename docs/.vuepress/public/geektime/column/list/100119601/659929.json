{"id":659929,"title":"特别加餐｜用ChatGPT开发一个看板项目","content":"<p>你好，我是宋一玮，欢迎来到React应用开发专栏。</p><p>最近两三个月，以ChatGPT为代表的生成式AI技术突飞猛进，终于真正威胁到了前端工程师的地位（笑）。有不少同学希望了解AI，尤其是生成式AI对前端开发工作和前端工程师意味着什么，我个人也在关注相关领域的进展，正好趁着这次加餐的机会，跟你交流一下我的想法。</p><p>通过这次加餐，我们将主要交流以下三点。</p><ul>\n<li>了解如何利用ChatGPT生成一个基本可用的React看板项目。</li>\n<li>了解如何利用ChatGPT修改现有代码和编写单元测试。</li>\n<li>探讨ChatGPT对前端开发意味着什么。<br>\n在开始正式内容前，我假设你已经学习了本专栏的大部分或全部内容，或是对React应用开发有一定了解。当然，如果你已经有ChatGPT的使用经验就更好了。</li>\n</ul><h2>用ChatGPT从零开始生成一个React看板项目</h2><p>说是从零开始，其实我们还是会借助Create React App（CRA）这款脚手架工具来搭建项目。考虑到脚手架工具足够成熟足够自动化，用AI来代替它意义不大。</p><p>我选择的模型是GPT-4，首次使用的提示语（Prompt）如下。</p><blockquote>\n<p>我需要用React.js 18实现一个单页应用。<br>\n<br>这个应用总体是上中下三行布局，页头显示“我的看板”标题，页脚显示一行版权信息。中间的内容区域分成左中右三列，每列都是一个任务列表，从左到右依次是“待处理”、“进行中”、“已完成”列表。用户可以向“待处理”列表添加新的任务；“待处理”列中的每个任务都有一个“开始”按钮，点击这个按钮会把对应的任务移动到“进行中”列表中；“进行中”中的每个任务都有一个“完成”按钮，点击这个按钮会把对应的任务移动到“已完成”列表中。<br>\n<br>请提供对应的JSX和CSS代码。</p>\n</blockquote><!-- [[[read_end]]] --><p>以下是ChatGPT返回的结果：</p><blockquote>\n<p>创建这个React应用涉及到一些细节，包括如何处理状态和事件。下面是一个简单的示例，用React.js实现这个应用。<br>\n<br>首先，我们需要安装react.js，如果还没有安装，可以在命令行中运行以下代码：</p>\n</blockquote><pre><code class=\"language-bash\">npx create-react-app kanban-board\n</code></pre><blockquote>\n<p>然后进入创建的项目文件夹：</p>\n</blockquote><pre><code class=\"language-bash\">cd kanban-board\n</code></pre><blockquote>\n<p>然后在src文件夹中创建一个新的文件<code>KanbanBoard.js</code>，并且在这个文件中写下以下代码：</p>\n</blockquote><pre><code class=\"language-javascript\">import React, { useState } from 'react';\nimport './KanbanBoard.css';\n\nconst KanbanBoard = () =&gt; {\n  const [task, setTask] = useState('');\n  const [toDoList, setToDoList] = useState([]);\n  const [doingList, setDoingList] = useState([]);\n  const [doneList, setDoneList] = useState([]);\n\n  const addTask = () =&gt; {\n    setToDoList([...toDoList, task]);\n    setTask('');\n  };\n\n  const startTask = (index) =&gt; {\n    setDoingList([...doingList, toDoList[index]]);\n    setToDoList(toDoList.filter((_, i) =&gt; i !== index));\n  };\n\n  const completeTask = (index) =&gt; {\n    setDoneList([...doneList, doingList[index]]);\n    setDoingList(doingList.filter((_, i) =&gt; i !== index));\n  };\n\n  return (\n    &lt;div className=\"kanban\"&gt;\n      &lt;header&gt;\n        &lt;h1&gt;我的看板&lt;/h1&gt;\n      &lt;/header&gt;\n      &lt;div className=\"task-lists\"&gt;\n        &lt;div className=\"task-list\"&gt;\n          &lt;h2&gt;待处理&lt;/h2&gt;\n          {toDoList.map((task, index) =&gt; (\n            &lt;div key={index}&gt;\n              {task}\n              &lt;button onClick={() =&gt; startTask(index)}&gt;开始&lt;/button&gt;\n            &lt;/div&gt;\n          ))}\n          &lt;input\n            type=\"text\"\n            value={task}\n            onChange={(e) =&gt; setTask(e.target.value)}\n          /&gt;\n          &lt;button onClick={addTask}&gt;添加任务&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div className=\"task-list\"&gt;\n          &lt;h2&gt;进行中&lt;/h2&gt;\n          {doingList.map((task, index) =&gt; (\n            &lt;div key={index}&gt;\n              {task}\n              &lt;button onClick={() =&gt; completeTask(index)}&gt;完成&lt;/button&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n        &lt;div className=\"task-list\"&gt;\n          &lt;h2&gt;已完成&lt;/h2&gt;\n          {doneList.map((task, index) =&gt; (\n            &lt;div key={index}&gt;{task}&lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;footer&gt;\n        &lt;p&gt;版权信息&lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default KanbanBoard;\n</code></pre><blockquote>\n<p>然后在src文件夹中创建一个新的CSS文件<code>KanbanBoard.css</code>，并且在这个文件中写下以下代码：</p>\n</blockquote><p>在生成CSS代码时，内容超长被截断了。于是我在对话中输入了：</p><blockquote>\n<p>请继续。</p>\n</blockquote><p>ChatGPT继续输出：</p><blockquote>\n<p>对不起，CSS样式可能被意外地剪切。以下是完整的CSS样式。<br>\n<br>在<code>KanbanBoard.css</code>文件中：</p>\n</blockquote><pre><code class=\"language-css\">.kanban {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  height: 100vh;\n}\n\nheader, footer {\n  height: 10vh;\n  width: 100%;\n  background-color: #f0f0f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.task-lists {\n  display: flex;\n  justify-content: space-around;\n  flex-grow: 1;\n  width: 100%;\n  padding: 1em;\n  box-sizing: border-box;\n}\n\n.task-list {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  width: 30%;\n  padding: 1em;\n  box-sizing: border-box;\n}\n\n.task-list h2 {\n  margin-bottom: 1em;\n}\n\n.task-list div {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 0.5em;\n}\n\ninput, button {\n  margin-top: 1em;\n}\n</code></pre><blockquote>\n<p>然后在<code>src</code>文件夹的<code>App.js</code>文件中引入<code>KanbanBoard.js</code>：</p>\n</blockquote><pre><code class=\"language-javascript\">import React from 'react';\nimport KanbanBoard from './KanbanBoard';\nimport './App.css';\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;KanbanBoard /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><blockquote>\n<p>这就是一个基础的看板应用。你可以在此基础上继续进行优化，例如添加拖拽任务的功能，或者使用后端API来存储和获取任务等。</p>\n</blockquote><p>这时我就可以在我的本地开发环境中，尝试ChatGPT生成的代码了。按照前面提示的，用CRA创建React项目，用VSCode打开项目，在 <code>src</code> 目录添加前面的 <code>KanbanBoard.js</code> 和 <code>KanbanBoard.css</code> ，并修改 <code>src/App.js</code> ，然后在命令行中进入项目目录，运行  <code>npm start</code> ，浏览器会弹出如下页面。具体步骤你也可以参考专栏第3节课<a href=\"https://time.geekbang.org/column/article/553817\">《看板应用：从零开始快速搭建一个React项目》</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/2a/65bd899cb0aea477b0883d4672ba7c2a.png?wh=1920x1231\" alt=\"图片\"></p><p>经过简单试用，用户可以正常添加任务，也可以让任务在“待处理”“进行中”和“已完成”三列中流转。</p><p>单个任务的样式上还可以再做些美化。这时我在ChatGPT中继续对话。</p><blockquote>\n<p>请修改CSS，为任务列表中的每个任务都加上自己的边框。</p>\n</blockquote><p>ChatGPT回复：</p><blockquote>\n<p>当然，我们可以在CSS中添加一些样式来给任务列表中的每个任务加上边框。在<code>KanbanBoard.css</code>文件中，我们可以添加以下代码：</p>\n</blockquote><pre><code class=\"language-css\">.task-list div {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: 0.5em;\n  border: 1px solid #ddd; /* 添加边框 */\n  padding: 0.5em; /* 添加内边距 */\n  border-radius: 3px; /* 添加圆角 */\n}\n</code></pre><blockquote>\n<p>这个样式将给每个任务都添加一个边框，同时还有一些内边距和轻微的圆角。这样应该可以提供更好的视觉效果。</p>\n</blockquote><p>用这段代码替换CSS中对应的样式片段，保存文件并在浏览器里观察页面变化。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/ce/0af994a6cfdec12ce7c61b1f974daece.png?wh=1920x1231\" alt=\"图片\"></p><p>好的，到目前为止，ChatGPT已经基于仅仅描述了需求和交互的提示语，为我们生成了令人印象深刻的代码。这些代码虽然不多，但已经涵盖了专栏里一些重要的知识点，比如下面这些。</p><ul>\n<li>箭头函数组件和JSX语法，参考专栏第4节<a href=\"https://time.geekbang.org/column/article/559946\">《JSX：该怎样理解这种声明式语法糖》</a>。</li>\n<li>组件使用了Hooks  <code>useState</code> ，参考专栏第9节<a href=\"https://time.geekbang.org/column/article/566338\">《React Hooks（上）：为什么说在React中函数组件和Hooks是绝配？》</a>。</li>\n<li>添加任务的文本框被实现为受控组件，参考专栏第11节<a href=\"https://time.geekbang.org/column/article/568107\">《事件处理：React合成事件是什么？为什么不用原生DOM事件？》</a>。</li>\n<li>在更新state时，并没有去修改原始数组而是新建数组，参考专栏第15节<a href=\"https://time.geekbang.org/column/article/577223\">《不可变数据：为什么对React这么重要？》</a>。<br>\n有官方资料表明，ChatGPT训练数据里还是英文内容占了绝大多数，那么如果把提示语换成英文会有什么不一样呢？</li>\n</ul><blockquote>\n<p>I need to implement a SPA using React.js v18.x.<br>\n<br>The app has a header-main-footer layout, the header pane shows a title  “My Kanban”; and the footer is just a copyright line. The main pane has 3  columns, from left to right they are TODO, ONGOING, DONE, each of them  is basically a task list. User can add new task to TODO column, each  task in TODO column has a START button, clicking the button will move  this task to ONGOING column; each task in ONGOING column has a DONE  button, clicking the button will move the task to DONE column.<br>\n<br>Please provide JSX and CSS code.</p>\n</blockquote><p>ChatGPT生成的代码结构和质量与前面中文的版本基本相当，在本地跑起来效果如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/5d/420d1e9e3ae119335588e9834df06a5d.png?wh=1920x1231\" alt=\"图片\"></p><p>可以看到用英文写提示语时，默认生成的样式与中文生成的版本有一定区别，我推测这与训练模型时使用的中英文数据有关。</p><p>经过进一步测试，开发大中型React Web应用时会用到的一些技术如Redux、Immer、TypeScript等，ChatGPT都能应对。可以认为ChatGPT在训练模型时，这些技术栈都被加进了训练数据集。其实不止ChatGPT，ChatGPT的竞品大模型也会支持这些主流技术栈。</p><h2>用ChatGPT修改现有代码</h2><p>我们知道写代码可不是“一杆子买卖”，为了实现需求，我们经常需要反复修改代码。ChatGPT对话维持上下文的能力为修改已有代码提供了便利。</p><p>还是前面看板项目的例子，在同一ChatGPT对话中继续输入：</p><blockquote>\n<p>请为“已完成”列表中的每个任务都加上一个“删除”按钮，点击即可从列表中删除该任务。<br>\n<br>请以GNU patch命令可以识别的补丁格式提供所需的代码片段。</p>\n</blockquote><p>ChatGPT会基于前面生成的代码，返回一个补丁：</p><blockquote>\n<p>下面是一个GNU补丁格式的代码片段，用于向“已完成”列表中的每个任务添加一个“删除”按钮，并实现点击该按钮即可从列表中删除任务的功能。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/0b/42/0bae0428e5d1c57b22b36a5a5f231442.jpg?wh=732x702\" alt=\"\"></p><blockquote>\n<p>这个补丁会在“已完成”列表中的每个任务后面添加一个“删除”按钮，并为其添加一个<code>deleteTask</code>事件处理函数。当点击“删除”按钮时，任务将从已完成列表中删除。要应用这个补丁，请将上述代码保存到一个名为<code>kanban-delete-button.patch</code>的文件中，并在命令行中执行以下命令：</p>\n</blockquote><pre><code class=\"language-bash\">patch -p1 &lt; kanban-delete-button.patch\n</code></pre><blockquote>\n<p>这将更新<code>KanbanBoard.js</code>文件并添加删除功能。</p>\n</blockquote><p>需要多试几次，有时候ChatGPT会“记错”前面的代码，比如把 <code>&lt;div key={index}&gt;{task}&lt;/div&gt;</code> 记成了 <code>{task}</code> 。</p><p>看似这个patch已经很完整了，但它有bug（然而ChatGPT坚持认为没错）：</p><pre><code class=\"language-bash\">$ patch KanbanBoard.js kanban-delete-button.patch\npatching file KanbanBoard.js\npatch: **** malformed patch at line 14: @@ -42,6 +47,7 @@\n</code></pre><p>如果想让 <code>patch</code> 命令执行成功，就必须手工调整行数：</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/da/f6f94262715dcb65fdbce159e3045cda.jpg?wh=727x223\" alt=\"\"></p><p>这次勉强成功了：</p><pre><code class=\"language-bash\">$ patch KanbanBoard.js kanban-delete-button.patch\npatching file KanbanBoard.js\nHunk #1 succeeded at 22 (offset 5 lines).\nHunk #2 succeeded at 60 with fuzz 1 (offset 13 lines).\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/f8/51/f8b9d65da3bdbbe21af3495db73f2651.png?wh=1920x1231\" alt=\"图片\"></p><p>如果希望修改的代码并没有在ChatGPT对话中出现过，那就需要通过提示语让这部分代码成为上下文的一部分。最直接的方式是把这部分代码直接贴给ChatGPT：</p><blockquote>\n<p>我在项目中加入了一个React组件<code>MyButton</code>，代码如下：</p>\n</blockquote><pre><code>import React from 'react';\n\nconst MyButton = (props) =&gt; {\n  return &lt;button {...props}&gt;{props.children}&lt;/button&gt;;\n};\n\nexport default MyButton;\n</code></pre><blockquote>\n<p>请用这个组件替换所有<code>KanbanBoard .js</code>中的所有<code>&lt;button&gt;</code>。</p>\n</blockquote><p>ChatGPT返回：</p><blockquote>\n<p>好的，你可以通过导入<code>MyButton</code>组件并使用它替换<code>KanbanBoard.js</code>中的所有<code>&lt;button&gt;</code>标签来实现这个需求。以下是GNU补丁格式的代码片段：</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/4f/4b/4fd258b1dc7493f4a9ec9293e82f614b.jpg?wh=535x787\" alt=\"\"></p><blockquote>\n<p>这个补丁将<code>KanbanBoard.js</code>中的所有<code>&lt;button&gt;</code>标签替换为<code>&lt;MyButton&gt;</code>组件。要应用这个补丁，请将上述代码保存到一个名为<code>kanban-use-mybutton.patch</code>的文件中，并在命令行中执行以下命令：</p>\n</blockquote><pre><code class=\"language-bash\">patch -p1 &lt; kanban-use-mybutton.patch\n</code></pre><blockquote>\n<p>这将更新<code>KanbanBoard.js</code>文件并使用你的<code>MyButton</code>组件。</p>\n</blockquote><p>但要注意ChatGPT的token数限制。比如GPT-3.5模型的token上限是4K，GPT-4则是8K。在 <a href=\"https://platform.openai.com/tokenizer\">https://platform.openai.com/tokenizer</a> 工具中可以很方便地确定提示语的token数，以前面从零开始生成的提示语为例：</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/b4/fb8c3d846a1d38ccd33843c613c127b4.png?wh=1424x1562\" alt=\"图片\"></p><p>如果是英文版本的提示语，占的token数会少些：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/yy/b27f70f662ac919d1726cbaccd4ce3yy.png?wh=1434x1566\" alt=\"图片\"></p><p>目前业界已经有了多种方案来绕开token限制，而ChatGPT竞争对手之一的Claude更是直接推出了100K token的版本（参考<a href=\"https://www.anthropic.com/index/100k-context-windows\">https://www.anthropic.com/index/100k-context-windows</a>）。</p><p>在了解ChatGPT的能力和限制后，你可能会经常需要作出下面的决策。</p><ul>\n<li>用ChatGPT生成代码的范围。</li>\n<li>什么时候依赖ChatGPT修改代码，什么时候接手代码自己来改。</li>\n</ul><h2>用ChatGPT生成单元测试代码</h2><p>在同一个ChatGPT对话中继续输入提示语：</p><blockquote>\n<p>请仅用<code>jest</code> + <code>@testing-library/react</code>为<code>KanbanBoard.js</code>生成单元测试代码。</p>\n</blockquote><p>这个“仅”字作为提示词还是很有用的，如果不做这个限制，ChatGPT会放飞自我，引入诸如  <code>@testing-library/user-event</code> 、 <code>@testing-library/jest-dom</code> 这样的库，倒没有做错，只是对我们的项目而言没必要。</p><blockquote>\n<p>首先，我们需要确保已经安装了 <code>jest</code> 和 <code>@testing-library/react</code>。如果没有的话，可以通过以下命令进行安装：</p>\n</blockquote><pre><code class=\"language-bash\">npm install --save-dev jest @testing-library/react\n</code></pre><blockquote>\n<p>然后我们在<code>src</code>目录下创建<code>KanbanBoard.test.js</code>文件，用于写我们的单元测试。</p>\n</blockquote><pre><code class=\"language-javascript\">import React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport KanbanBoard from './KanbanBoard';\n\ntest('should allow tasks to be added, started, completed, and deleted', () =&gt; {\n  const { getByText, getByRole } = render(&lt;KanbanBoard /&gt;);\n\n  const addTaskInput = getByRole('textbox');\n  const addTaskButton = getByText('添加任务');\n\n  fireEvent.change(addTaskInput, { target: { value: 'New Task' } });\n  fireEvent.click(addTaskButton);\n\n  expect(getByText('New Task')).toBeInTheDocument();\n  expect(addTaskInput.value).toBe('');\n\n  const startButton = getByText('开始');\n  fireEvent.click(startButton);\n\n  expect(getByText('New Task')).toBeInTheDocument();\n  expect(() =&gt; getByText('开始')).toThrow();\n\n  const completeButton = getByText('完成');\n  fireEvent.click(completeButton);\n\n  expect(getByText('New Task')).toBeInTheDocument();\n  expect(() =&gt; getByText('完成')).toThrow();\n\n  const deleteButton = getByText('删除');\n  fireEvent.click(deleteButton);\n\n  expect(() =&gt; getByText('New Task')).toThrow();\n});\n</code></pre><blockquote>\n<p>这个单元测试会测试一个任务是否可以被添加到待处理列表、开始、完成，以及被删除。它首先通过<code>fireEvent.change</code>和<code>fireEvent.click</code>模拟用户输入和点击事件来添加一个新任务，然后检查这个任务是否显示在待处理列表中，且输入框已被清空。接着它会点击开始按钮，检查任务是否显示在进行中列表中，且开始按钮不再存在。然后它会点击完成按钮，检查任务是否显示在已完成列表中，且完成按钮不再存在。最后，它会点击删除按钮，检查任务是否已从已完成列表中被删除。<br>\n现在，你可以通过运行<code>npm test</code>命令来运行这个单元测试。</p>\n</blockquote><p>可以看到这个单元测试的代码里也涵盖了新加入的“删除”按钮。按提示把代码保存到本地，命令行运行成功。</p><pre><code class=\"language-bash\">$ npm test\nPASS&nbsp; src/KanbanBoard.test.js\n&nbsp; ✓ should allow tasks to be added, started, completed, and deleted (52 ms)\n\nTest Suites: 1 passed, 1 total\nTests:&nbsp; &nbsp; &nbsp; &nbsp;1 passed, 1 total\nSnapshots:&nbsp; &nbsp;0 total\nTime:&nbsp; &nbsp; &nbsp; &nbsp; 0.552 s, estimated 1 s\nRan all test suites related to changed files.\n</code></pre><h2>ChatGPT对前端开发意味着什么？</h2><p>从上面生成代码的过程来看，ChatGPT是一次激动人心的技术突破，不过这也会引起部分前端工程师的焦虑：“我要学完30节课才能写出来的React应用代码，AI只需要3秒，那我还有必要继续学前端技术吗？”</p><p>其实这样的焦虑为时过早，目前AI仍然是为人所用的工具。我们需要先思考一点：谁来使用AI？</p><ul>\n<li>如果是由产品经理、咨询顾问、销售这样的非技术人员来使用，那么AI生成的应用程序就是一个黑盒，它的功能将受限于AI模型的能力，以及提示语是否有效。</li>\n<li>如果是由软件工程师尤其是前端工程师来使用，那么AI生成的代码就是一个白盒，工程师除了可以调整优化提示语，更可以在任意时刻接手代码，根据需要直接修改代码实现。<br>\n同样是工具，AI在软件工程师手上更灵活、更具扩展性、可维护性。</li>\n</ul><p>在现阶段主要的软件开发工作流中，无论是手写的代码，还是工具生成的代码，都要有具体的owner（负责人）。owner需要理解代码的设计和实现，以应对后续的修bug、加功能和必要的重构。这就要求我们前端工程师仍然要学好前端技术知识，这样面对AI工具生成的前端代码，才能知其然知其所以然。</p><p>跟所有新技术和新工具一样，ChatGPT的问世也会造成短期的信息差。同样是前端工程师、非前端工程师以及技术管理者们，会对ChatGPT有不同的认识。假设你作为先行者，利用ChatGPT或其他AI工具提高了n%的开发效率，这一提升也许会成为你的优势。但当AI工具作为基础设施逐渐普及，成为主流前端开发流程的一部分时，总开发效率提升，而个人的这一优势将被抹平。所以我会建议你不要“all-in”。</p><h2>小结</h2><p>在这一次加餐中，我们以看板应用的产品需求作为提示语，用ChatGPT从零开始生成了一个React项目。紧接着我们展示了如何利用ChatGPT对话上下文修改生成的代码，为React组件生成了单元测试。</p><p>对前端工程师来说，ChatGPT这样的AI将作为工具，大幅提升我们的开发效率。我们在学习如何使用AI工具的同时，更需要学好前端技术知识，才能当好前端软件产品的owner。</p><h2>思考题</h2><p>你心目中的下一代前端开发流程是怎样的？</p><p>欢迎你在留言区与我交流讨论，我们留言区见！</p>","comments":[{"had_liked":false,"id":374949,"user_name":"ZENG","can_delete":false,"product_type":"c1","uid":1136797,"ip_address":"广东","ucode":"4F9A006DA78074","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/9d/91d795cf.jpg","comment_is_top":false,"comment_ctime":1684717445,"is_pvip":false,"replies":[{"id":137281,"content":"你好，coderHOW，我非常赞同你的观点，我也是在最近在ChatGPT的辅助下，使用自己之前并不熟悉的Python Notebooks技术做了不少数据分析的工作，这让我进一步确定，AI会成为我们今后研发工作中的得力助手。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1687085875,"ip_address":"北京","comment_id":374949,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"最近就是学习新的领域的时候，使用GPT可以很快的了解流程写出demo来，未来基础功能和配置相关的工作使用合适的prompt可以用AI生成符合的最基本产品了，我们就做更精细的工作来修改代码满足需求","like_count":2,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621297,"discussion_content":"你好，coderHOW，我非常赞同你的观点，我也是在最近在ChatGPT的辅助下，使用自己之前并不熟悉的Python Notebooks技术做了不少数据分析的工作，这让我进一步确定，AI会成为我们今后研发工作中的得力助手。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1687085875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378547,"user_name":"AI悦创","can_delete":false,"product_type":"c1","uid":1525309,"ip_address":"福建","ucode":"D1007711CB0A79","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/3d/55653953.jpg","comment_is_top":false,"comment_ctime":1690387173,"is_pvip":false,"replies":[{"id":139719,"content":"你好，AI悦创，抱歉我这么晚才回复。GenAI这个话题很大，且并不限于前端领域，这个专栏是涵盖不了的。极客时间上已经开设了很多GenAI相关的专栏，推荐你去看看，尤其是徐文浩老师的专栏《AI 大模型之美》https:&#47;&#47;time.geekbang.com&#47;column&#47;intro&#47;100541001 ，我自己也在学。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1699158357,"ip_address":"北京","comment_id":378547,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"能不能多更新这个系列？公司需要说基于 gpt ，结合公司知识库、数据库实现智能客服啥的。SOS。望作者回复","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630969,"discussion_content":"你好，AI悦创，抱歉我这么晚才回复。GenAI这个话题很大，且并不限于前端领域，这个专栏是涵盖不了的。极客时间上已经开设了很多GenAI相关的专栏，推荐你去看看，尤其是徐文浩老师的专栏《AI 大模型之美》https://time.geekbang.com/column/intro/100541001 ，我自己也在学。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699158357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}