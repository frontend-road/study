{"id":137286,"title":"16 | NFA和DFA：如何自己实现一个正则表达式工具？","content":"<p>回顾之前讲的内容，原理篇重在建立直观理解，帮你建立信心，这是第一轮的认知迭代。应用篇帮你涉足应用领域，在解决领域问题时发挥编译技术的威力，积累运用编译技术的一手经验，也启发你用编译技术去解决更多的领域问题，这是第二轮的认知迭代。而为时三节课的算法篇将你是第三轮的认知迭代。</p><p>在第三轮的认知迭代中，我会带你掌握前端技术中的核心算法。而本节课，我就借“怎样实现正则表达式工具？”这个问题，探讨第一组算法：<strong>与正则表达式处理有关的算法。</strong></p><p>在词法分析阶段，我们可以手工构造有限自动机（FSA，或FSM）实现词法解析，过程比较简单。现在我们不再手工构造词法分析器，而是直接用正则表达式解析词法。</p><p>你会发现，我们只要写一些规则，就能基于这些规则分析和处理文本。这种能够理解正则表达式的功能，除了能生成词法分析器，还有很多用途。比如Linux的三个超级命令，又称三剑客（grep、awk和sed），都是因为能够直接支持正则表达式，功能才变得强大的。</p><p>接下来，我就带你完成编写正则表达式工具的任务，与此同时，你就能用正则文法生成词法分析器了：</p><p><strong>首先，</strong>把正则表达式翻译成非确定的有限自动机（Nondeterministic Finite Automaton，NFA）。<br>\n<strong>其次，</strong>基于NFA处理字符串，看看它有什么特点。<br>\n<strong>然后，</strong>把非确定的有限自动机转换成确定的有限自动机（Deterministic Finite Automaton，DFA）<br>\n<strong>最后，</strong>运行DFA，看看它有什么特点。</p><!-- [[[read_end]]] --><p>强调一下，不要被非确定的有限自动机、确定的有限自动机这些概念吓倒，我肯定让你学明白。</p><h2>认识DFA和NFA</h2><p>在讲词法分析时，我提到有限自动机（FSA）有有限个状态。识别Token的过程，就是FSA状态迁移的过程。其中，FSA分为<strong>确定的有限自动机（DFA）<strong>和</strong>非确定的有限自动机（NFA）。</strong></p><p><strong>DFA的特点是，</strong>在任何一个状态，我们基于输入的字符串，都能做一个确定的转换，比如：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/35/15da400d09ede2ce6ac60fa6d5342835.jpg?wh=1142*726\" alt=\"\"></p><p><strong>NFA的特点是，</strong>它存在某些状态，针对某些输入，不能做一个确定的转换，这又细分成两种情况：</p><ul>\n<li>对于一个输入，它有两个状态可以转换。</li>\n<li>存在ε转换。也就是没有任何输入的情况下，也可以从一个状态迁移到另一个状态。</li>\n</ul><p>比如，“a[a-zA-Z0-9]*bc”这个正则表达式对字符串的要求是以a开头，以bc结尾，a和bc之间可以有任意多个字母或数字。在图中状态1的节点输入b时，这个状态是有两条路径可以选择的，所以这个有限自动机是一个NFA。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/e8/9bf26739958568453cceeb6f209da2e8.jpg?wh=1142*359\" alt=\"\"></p><p>这个NFA还有引入ε转换的画法，它们是等价的。实际上，第二个NFA可以用我们今天讲的算法，通过正则表达式自动生成出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/09/9bb22ee26309b3076db53fee34112009.jpg?wh=1142*298\" alt=\"\"></p><p>需要注意的是，无论是NFA还是DFA，都等价于正则表达式。也就是，所有的正则表达式都能转换成NFA或DFA，所有的NFA或DFA，也都能转换成正则表达式。</p><p>理解了NFA和DFA之后，来看看我们如何从正则表达式生成NFA。</p><h2>从正则表达式生成NFA</h2><p>我们需要把它分为两个子任务：</p><p><strong>第一个子任务，</strong>是把正则表达式解析成一个内部的数据结构，便于后续的程序使用。因为正则表达式也是个字符串，所以要先做一个小的编译器，去理解代表正则表达式的字符串。我们可以偷个懒，直接针对示例的正则表达式生成相应的数据结构，不需要做出这个编译器。</p><p>用来测试的正则表达式可以是int关键字、标识符，或者数字字面量：</p><pre><code>int | [a-zA-Z][a-zA-Z0-9]* | [0-9]+\n</code></pre><p>我用下面这段代码创建了一个树状的数据结构，来代表用来测试的正则表达式：</p><pre><code>private static GrammarNode sampleGrammar1() {\n    GrammarNode node = new GrammarNode(&quot;regex1&quot;,GrammarNodeType.Or);\n\n    //int关键字\n    GrammarNode intNode = node.createChild(GrammarNodeType.And);\n    intNode.createChild(new CharSet('i'));\n    intNode.createChild(new CharSet('n'));\n    intNode.createChild(new CharSet('t'));\n\n    //标识符\n    GrammarNode idNode = node.createChild(GrammarNodeType.And);\n    GrammarNode firstLetter = idNode.createChild(CharSet.letter);\n\n    GrammarNode letterOrDigit = idNode.createChild(CharSet.letterOrDigit);\n    letterOrDigit.setRepeatTimes(0, -1);\n\n\n    //数字字面量\n    GrammarNode literalNode = node.createChild(CharSet.digit);\n    literalNode.setRepeatTimes(1, -1);\n\n    return node;\n}\n</code></pre><p>打印输出的结果如下：</p><pre><code>RegExpression\n\tOr\n\t\tUnion\n\t\t\ti\n\t\t\tn\n\t\t\tt\n\t\tUnion\n\t\t\t[a-z]|[A-Z]\n\t\t\t[0-9]|[a-z]|[A-Z]*\n\t\t[0-9]+\n</code></pre><p>画成图会更直观一些：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/8e/a6af22cdcb96ba92fe9df35bf998768e.jpg?wh=1142*600\" alt=\"\"></p><p>测试数据生成之后，<strong>第二个子任务</strong>就是把表示正则表达式的数据结构，转换成一个NFA。这个过程比较简单，因为针对正则表达式中的每一个结构，我们都可以按照一个固定的规则做转换。</p><ul>\n<li>识别ε的NFA：</li>\n</ul><blockquote>\n<p>不接受任何输入，也能从一个状态迁移到另一个状态，状态图的边上标注ε。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/0d/ed/0d11ad629f809a94ff091199f27661ed.jpg?wh=1142*231\" alt=\"\"></p><ul>\n<li>识别i的NFA：</li>\n</ul><blockquote>\n<p>当接受字符i的时候，引发一个转换，状态图的边上标注i。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/fe/bc/fe3edc36b5bd69e88eebcd0d28aa4abc.jpg?wh=1142*249\" alt=\"\"></p><ul>\n<li>转换“s|t”这样的正则表达式：</li>\n</ul><blockquote>\n<p>它的意思是或者s，或者t，二者选一。s和t本身是两个子表达式，我们可以增加两个新的状态：<strong>开始状态和接受状态（最终状态）</strong>也就是图中带双线的状态，它意味着被检验的字符串此时是符合正则表达式的。然后用ε转换分别连接代表s和t的子图。它的含义也比较直观，要么走上面这条路径，那就是s，要么走下面这条路径，那就是t。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/19/95/197071ebe504889264cf8c955d112895.jpg?wh=1142*428\" alt=\"\"></p><ul>\n<li>转换“st”这样的正则表达式：</li>\n</ul><blockquote>\n<p>s之后接着出现t，转换规则是把s的开始状态变成st整体的开始状态，把t的结束状态变成st整体的结束状态，并且把s的结束状态和t的开始状态合二为一。这样就把两个子图接了起来，走完s接着走t。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/95/0b/9504b495df0de1cc59ef8d8357c49e0b.jpg?wh=1142*339\" alt=\"\"></p><ul>\n<li>对于“?”“*”和“+”这样的操作：</li>\n</ul><blockquote>\n<p>意思是可以重复0次、0到多次、1到多次，转换时要增加额外的状态和边。</p>\n</blockquote><p>以“s*”为例，做下面的转换：</p><p><img src=\"https://static001.geekbang.org/resource/image/40/c5/409d889a2c811221a0cfdd81f32df4c5.jpg?wh=1142*363\" alt=\"\"></p><p>你能看出，它可以从i直接到f，也就是对s匹配零次，也可以在s的起止节点上循环多次。</p><ul>\n<li>“s+”：</li>\n</ul><blockquote>\n<p>没有办法跳过s，s至少经过一次。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/a7/07/a753fb42e82341d381c3cbca0247b007.png?wh=782*226\" alt=\"\"></p><p>按照这些规则，我们可以编写程序进行转换。你可以参考示例代码<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Regex.java\">Regex.java</a>中的regexToNFA方法。转换完毕以后，将生成的NFA打印输出，列出了所有的状态，以及每个状态到其他状态的转换，比如“0\tε -&gt; 2”的意思是从状态0通过ε转换，到达状态2 ：</p><pre><code>NFA states:\n0\tε -&gt; 2\n\tε -&gt; 8\n\tε -&gt; 14\n2\ti -&gt; 3\n3\tn -&gt; 5\n5\tt -&gt; 7\n7\tε -&gt; 1\n1\t(end)\n\tacceptable\n8\t[a-z]|[A-Z] -&gt; 9\n9\tε -&gt; 10\n\tε -&gt; 13\n10\t[0-9]|[a-z]|[A-Z] -&gt; 11\n11\tε -&gt; 10\n\tε -&gt; 13\n13\tε -&gt; 1\n14\t[0-9] -&gt; 15\n15\tε -&gt; 14\n\tε -&gt; 1\n</code></pre><p>我用图片直观地展示了输出结果，图中分为上中下三条路径，你能清晰地看出解析int关键字、标识符和数字字面量的过程：</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/9b/3defa4a1d7ce789b6c6cfecdfbf8179b.jpg?wh=1142*528\" alt=\"\"></p><p>生成NFA之后，如何利用它识别某个字符串是否符合这个NFA代表的正则表达式呢？</p><p>以上图为例，当我们解析intA这个字符串时，首先选择最上面的路径去匹配，匹配完int这三个字符以后，来到状态7，若后面没有其他字符，就可以到达接受状态1，返回匹配成功的信息。可实际上，int后面是有A的，所以第一条路径匹配失败。</p><p>失败之后不能直接返回“匹配失败”的结果，因为还有其他路径，所以我们要回溯到状态0，去尝试第二条路径，在第二条路径中，尝试成功了。</p><p>运行Regex.java中的matchWithNFA()方法，你可以用NFA来做正则表达式的匹配：</p><pre><code>/**\n * 用NFA来匹配字符串\n * @param state 当前所在的状态\n * @param chars 要匹配的字符串，用数组表示\n * @param index1 当前匹配字符开始的位置。\n * @return 匹配后，新index的位置。指向匹配成功的字符的下一个字符。\n */\nprivate static int matchWithNFA(State state, char[] chars, int index1){\n    System.out.println(&quot;trying state : &quot; + state.name + &quot;, index =&quot; + index1);\n\n    int index2 = index1;\n    for (Transition transition : state.transitions()){\n        State nextState = state.getState(transition);\n        //epsilon转换\n        if (transition.isEpsilon()){\n            index2 = matchWithNFA(nextState, chars, index1);\n            if (index2 == chars.length){\n                break;\n            }\n        }\n        //消化掉一个字符，指针前移\n        else if (transition.match(chars[index1])){\n            index2 ++; //消耗掉一个字符\n\n            if (index2 &lt; chars.length) {\n                index2 = matchWithNFA(nextState, chars, index1 + 1);\n            }\n            //如果已经扫描完所有字符\n            //检查当前状态是否是接受状态，或者可以通过epsilon到达接受状态\n            //如果状态机还没有到达接受状态，本次匹配失败\n            else {\n                if (acceptable(nextState)) {\n                    break;\n                }\n                else{\n                    index2 = -1;\n                }\n            }\n        }\n    }\n\n    return index2;\n}\n</code></pre><p>其中，在匹配“intA”时，你会看到它的回溯过程：</p><pre><code>NFA matching: 'intA'\ntrying state : 0, index =0\ntrying state : 2, index =0    //先走第一条路径，即int关键字这个路径\ntrying state : 3, index =1\ntrying state : 5, index =2\ntrying state : 7, index =3\ntrying state : 1, index =3    //到了末尾了，发现还有字符'A'没有匹配上\ntrying state : 8, index =0    //回溯，尝试第二条路径，即标识符\ntrying state : 9, index =1\ntrying state : 10, index =1   //在10和11这里循环多次\ntrying state : 11, index =2\ntrying state : 10, index =2\ntrying state : 11, index =3\ntrying state : 10, index =3\ntrue\n</code></pre><p><strong>从中可以看到用NFA算法的特点：</strong>因为存在多条可能的路径，所以需要试探和回溯，在比较极端的情况下，回溯次数会非常多，性能会变得非常慢。特别是当处理类似s*这样的语句时，因为s可以重复0到无穷次，所以在匹配字符串时，可能需要尝试很多次。</p><p>注意，在我们生成的NFA中，如果一个状态有两条路径到其他状态，算法会依据一定的顺序来尝试不同的路径。</p><p>9和11两个状态都有两条向外走的线，其中红色的线是更优先的路径，也就是尝试让*号匹配尽量多的字符。这种算法策略叫做“贪婪（greedy）”策略。</p><p>在有的情况下，我们会希望让算法采用非贪婪策略，或者叫“忽略优先”策略，以便让效率更高。有的正则表达式工具会支持多加一个?，比如??、*?、+?，来表示非贪婪策略。</p><p>NFA的运行可能导致大量的回溯，所以能否将NFA转换成DFA，让字符串的匹配过程更简单呢？如果能的话，那整个过程都可以自动化，从正则表达式到NFA，再从NFA到DFA。</p><h2>把NFA转换成DFA</h2><p>的确有这样的算法，那就是<strong>子集构造法，</strong>它的思路如下。</p><p>首先NFA有一个初始状态（从状态0通过ε转换可以到达的所有状态，也就是说，在不接受任何输入的情况下，从状态0也可以到达的状态）。这个状态的集合叫做“状态0的ε闭包”，简单一点儿，我们称之为s0，s0包含0、2、8、14这几个状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/f7/9c35bf11efb869c5fa4a22e23de52ff7.jpg?wh=1142*551\" alt=\"\"></p><p>将字母i给到s0中的每一个状态，看它们能转换成什么状态，再把这些状态通过ε转换就能到达的状态也加入进来，形成一个包含“3、9、10、13、1”5个状态的集合s1。其中3和9是接受了字母i所迁移到的状态，10、13、1是在状态9的ε闭包中。</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/40/d2f3035a3492b680c56777b7fa375e40.jpg?wh=1142*496\" alt=\"\"></p><p>在s0和s1中间画条迁移线，标注上i，意思是s0接收到i的情况下，转换到s1：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/29/58388daf0627d0bc71efbf7b48401029.jpg?wh=1142*728\" alt=\"\"></p><p>在这里，我们把s0和s1分别看成一个状态。也就是说，要生成的DFA，它的每个状态，\b是原来的NFA的某些状态的集合。</p><p>在上面的推导过程中，我们有两个主要的计算：</p><p>1.ε-closure(s)，即集合s的ε闭包。也就是从集合s中的每个节点，加上从这个节点出发通过ε转换所能到达的所有状态。<br>\n2.move(s, ‘i’)，即从集合s接收一个字符i，所能到达的新状态的集合。<br>\n所以，s1 = ε-closure(move(s0,‘i’))</p><p>按照上面的思路继续推导，识别int关键字的识别路径也就推导出来了：</p><p><img src=\"https://static001.geekbang.org/resource/image/be/00/be1a150ce14e828e8e9993b419360e00.jpg?wh=1142*375\" alt=\"\"></p><p>我们把上面这种推导的思路写成算法，参见<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Regex.java\">Regex.java</a>中的NFA2DFA()方法。我写了一段伪代码，方便你阅读：</p><pre><code>计算s0，即状态0的ε闭包\n把s0压入待处理栈\n把s0加入所有状态集的集合S\n循环：待处理栈内还有未处理的状态集\n   循环：针对字母表中的每个字符c\n      循环：针对栈里的每个状态集合s(i)（未处理的状态集）\n          计算s(m) = move(s(i), c)（就是从s(i)出发，接收字符c能够\n                                   迁移到的新状态的集合）\n          计算s(m)的ε闭包，叫做s(j)\n          看看s(j)是不是个新的状态集，如果已经有这个状态集了，把它找出来\n                  否则，把s(j)加入全集S和待处理栈\n          建立s(i)到s(j)的连线，转换条件是c\n</code></pre><p>运行NFA2DFA()方法，然后打印输出生成的DFA。画成图，你就能很直观地看出迁移的路径了：</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/ea/b31b50f7b527de9915b81cb7a117c2ea.jpg?wh=1142*711\" alt=\"\"></p><p>从初始状态开始，如果输入是i，那就走int识别这条线，也就是按照19、21、22这条线依次迁移，如果中间发现不符合int模式，就跳转到20，也就是标识符状态。</p><p>注意，在上面的DFA中，只要包含接受状态1的，都是DFA的接受状态。进一步区分的话，22是int关键字的接受状态，因为它包含了int关键字原来的接受状态7。同理，17是数字字面量的接受状态，18、19、20、21都是标识符的接受状态。</p><p>而且，你会发现，算法生成的DFA跟手工构造DFA是很接近的！我们在第二讲手工构造了DFA识别int关键字和标识符，比本节课少识别一个数字字面量：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/3c/11cf7add8fb07db41f4eb067db4ac13c.jpg?wh=1142*678\" alt=\"\"></p><p>不过，光看对int关键字和标识符的识别，我们算法生成的DFA和手工构造的DFA，非常相似！手工构造的相当于把18和20两个状态合并了，所以，这个算法是非常有效的！你可以运行一下示例程序Regex.java中的matchWithDFA()的方法，看看效果：</p><pre><code>private static boolean matchWithDFA(DFAState state, char[] chars, int index){\n    System.out.println(&quot;trying DFAState : &quot; + state.name + &quot;, index =&quot; + index);\n    //根据字符，找到下一个状态\n    DFAState nextState = null;\n    for (Transition transition : state.transitions()){\n        if (transition.match(chars[index])){\n            nextState = (DFAState)state.getState(transition);\n            break;\n        }\n    }\n\n    if (nextState != null){\n        //继续匹配字符串\n        if (index &lt; chars.length-1){\n            return matchWithDFA(nextState,chars, index + 1);\n        }\n        else{\n            //字符串已经匹配完毕\n            //看看是否到达了接受状态\n            if(state.isAcceptable()){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    else{\n        return false;\n    }\n}\n</code></pre><p>运行时会打印输出匹配过程，而执行过程中不产生任何回溯。</p><p>现在，我们可以自动生成DFA了，可以根据DFA做更高效的计算。不过，有利就有弊，DFA也存在一些缺点。比如，DFA可能有很多个状态。</p><p>假设原来NFA的状态有n个，那么把它们组合成不同的集合，可能的集合总数是2的n次方个。针对我们示例的NFA，它有13个状态，所以最坏的情况下，形成的DFA可能有2的13次方，也就是8192个状态，会占据更多的内存空间。而且生成这个DFA本身也需要消耗一定的计算时间。</p><p>当然了，这种最坏的状态很少发生，我们示例的NFA生成DFA后，只有7个状态。</p><h2>课程小结</h2><p>本节课，我带你实现了一个正则表达式工具，或者说根据正则表达式自动做了词法分析，它们的主要原理是相同的。</p><p>首先，我们需要解析正则表达式，形成计算机内部的数据结构，然后要把这个正则表达式生成NFA。我们可以基于NFA进行字符串的匹配，或者把NFA转换成DFA，再进行字符串匹配。</p><p>NFA和DFA有各自的优缺点：NFA通常状态数量比较少，可以直接用来进行计算，但可能会涉及回溯，从而性能低下；DFA的状态数量可能很大，占用更多的空间，并且生成DFA本身也需要消耗计算资源。所以，我们根据实际需求选择采用NFA还是DFA就可以了。</p><p>不过，一般来说，正则表达式工具可以直接基于NFA。而词法分析器（如Lex），则是基于DFA。原因很简单，因为在生成词法分析工具时，只需要计算一次DFA，就可以基于这个DFA做很多次词法分析。</p><h2>一课一思</h2><p>本节课我们实现了一个简单的正则表达式工具。在你的日常编程任务中，有哪些需要进行正则处理的需求？用传统的正则表达式工具有没有性能问题？你有没有办法用本节课讲到的原理来优化这些工作？欢迎在留言区分享你的发现。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p>本节课的示例代码我放在了文末，供你参考。</p><ul>\n<li>lab/16-18（算法篇的示例代码）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/tree/master/lab/16-18\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/tree/master/lab/16-18\">GitHub</a></li>\n<li>Regex.java（正则表达式有关的算法）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Regex.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Regex.java\">GitHub</a></li>\n<li>Lexer.java（基于正则文法自动做词法解析）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Lexer.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/Lexer.java\">GitHub</a></li>\n<li>GrammarNode.java（用于表达正则文法）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/GrammarNode.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/GrammarNode.java\">GitHub</a></li>\n<li>State.java（自动机的状态）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/State.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/State.java\">GitHub</a></li>\n<li>DFAState.java（DFA的状态）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/DFAState.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/DFAState.java\">GitHub</a></li>\n</ul>","comments":[{"had_liked":false,"id":217347,"user_name":"刘桢","can_delete":false,"product_type":"c1","uid":1482815,"ip_address":"","ucode":"3BFAB1C9772EB4","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/3f/06b690ba.jpg","comment_is_top":false,"comment_ctime":1589467584,"is_pvip":false,"replies":[{"id":"80937","content":"我最近鼓励公司里的一个vue活跃分子学习编译原理，增加成长的后劲。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1589941283,"ip_address":"","comment_id":217347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35949205952","product_id":100034101,"comment_content":"尤雨溪:会编译原理真的可以为所欲为","like_count":9,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495117,"discussion_content":"我最近鼓励公司里的一个vue活跃分子学习编译原理，增加成长的后劲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589941283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135373,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1569141044,"is_pvip":true,"replies":[{"id":"52089","content":"加空转换不是为了扩展表达能力，而是为了能够通过一个简单标准的方法，把正则文法转换成NFA。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1569298510,"ip_address":"","comment_id":135373,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31633912116","product_id":100034101,"comment_content":"老师：为什么NFA要加空转换这样的操作呢，感觉对表达能力并没有扩展。","like_count":7,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468162,"discussion_content":"加空转换不是为了扩展表达能力，而是为了能够通过一个简单标准的方法，把正则文法转换成NFA。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569298510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1708105,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/10/49/01657245.jpg","nickname":"Entropy","note":"","ucode":"F44486B23A7B13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387307,"discussion_content":"我自己的理解是，应该是为了表示 regular expression 中的 *， 因为*可以匹配0个或者多个前一个字符. 欢迎指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628099669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218883,"user_name":"xindoo","can_delete":false,"product_type":"c1","uid":1101718,"ip_address":"","ucode":"AEAF3208E644BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/96/251c0cee.jpg","comment_is_top":false,"comment_ctime":1589892610,"is_pvip":true,"replies":[{"id":"80934","content":"看到了，很不错！期待你的博客！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1589941036,"ip_address":"","comment_id":218883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14474794498","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;xindoo&#47;regex  我用java写了个正则引擎，包含了老师这节讲的内容，readme中附了博客，欢迎各位查阅。","like_count":4,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495612,"discussion_content":"看到了，很不错！期待你的博客！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589941036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285896,"user_name":"漠北","can_delete":false,"product_type":"c1","uid":1296046,"ip_address":"","ucode":"298DB0781E0C05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4OvKiaF14CVnpTUEibC06vyicltuXrXWKB44K1UERgrzJgVShHiaoicBSvWdQFEGqYHEL0k53GeXRKwpCmiaYof4NMTQ/132","comment_is_top":false,"comment_ctime":1617067788,"is_pvip":false,"replies":[{"id":"105386","content":"你离散数学学得不错！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1619790338,"ip_address":"","comment_id":285896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10207002380","product_id":100034101,"comment_content":"感觉很像递归转成动态规划","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517818,"discussion_content":"你离散数学学得不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619790338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248665,"user_name":"VictorLee","can_delete":false,"product_type":"c1","uid":1905024,"ip_address":"","ucode":"FF7C211DA853CE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","comment_is_top":false,"comment_ctime":1600255786,"is_pvip":false,"replies":[{"id":"94665","content":"你是指kleene closure？<br>这两个闭包不是一回事。<br>前者是一个集合运算，也就是我们在正则表达式等场合下常用的*的来源。<br>后者仅仅指引用了本作用域之外的自由变量。至于是否可以用集合计算来解释，我相信可以。因为整个现代数学的公理化过程（至少是一个流派），都是基于集合理论的。<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1605085040,"ip_address":"","comment_id":248665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895223082","product_id":100034101,"comment_content":"这里的柯林闭包和js中的闭包有什么关系吗？mdn中的定义是函数及其环境的混合，我理解的是js中的闭包是对理算数学中柯林闭包的扩展，推到极致是可以用集合去解释的，不知道我理解的对不对","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505711,"discussion_content":"你是指kleene closure？\n这两个闭包不是一回事。\n前者是一个集合运算，也就是我们在正则表达式等场合下常用的*的来源。\n后者仅仅指引用了本作用域之外的自由变量。至于是否可以用集合计算来解释，我相信可以。因为整个现代数学的公理化过程（至少是一个流派），都是基于集合理论的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605085040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168684,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1578140136,"is_pvip":false,"replies":[{"id":"74260","content":"对。<br>这些算法有兴趣的话，还可以往细里去追究一下，比如深度优先vs宽度优先，时间复杂度，等等。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585190147,"ip_address":"","comment_id":168684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873107432","product_id":100034101,"comment_content":"讲的深入原理，收益匪浅，NFA转DFA可以用子集法","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480295,"discussion_content":"对。\n这些算法有兴趣的话，还可以往细里去追究一下，比如深度优先vs宽度优先，时间复杂度，等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585190147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135493,"user_name":"bucher","can_delete":false,"product_type":"c1","uid":1203973,"ip_address":"","ucode":"2A482BDBA2FD12","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/05/ca9ce3e9.jpg","comment_is_top":false,"comment_ctime":1569198001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864165297","product_id":100034101,"comment_content":"如果在dfa中加上通配符点号有什么好方法吗，我是在move里进行修改的，但是这样的话如果有大量正则表达式的时候，nfa转dfa很慢.","like_count":1},{"had_liked":false,"id":135319,"user_name":"醉雪飘痕","can_delete":false,"product_type":"c1","uid":1365678,"ip_address":"","ucode":"EBE3295010EA9D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/ae/46ae526f.jpg","comment_is_top":false,"comment_ctime":1569125069,"is_pvip":false,"replies":[{"id":"51923","content":"是用Mac自带的Keynote呐~😜","user_name":"编辑回复","user_name_real":"朱会","uid":"1564447","ctime":1569172274,"ip_address":"","comment_id":135319,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5864092365","product_id":100034101,"comment_content":"请问老师，您的图是用什么工具做得呀？","like_count":1,"discussions":[{"author":{"id":1564447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/1f/650a1d51.jpg","nickname":"小白兔奶糖","note":"","ucode":"AD0B858CFD1304","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468141,"discussion_content":"是用Mac自带的Keynote呐~😜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569172274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135304,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1569121633,"is_pvip":false,"replies":[{"id":"52095","content":"嗯，如果计算机有多余的算力的情况下。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1569300410,"ip_address":"","comment_id":135304,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864088929","product_id":100034101,"comment_content":"感觉NFA的匹配很适合并行啊，如果对于每个转换条件，开个线程并行匹配，这样就不需要回溯了，是不是能提升不少效率，虽然浪费了一些算力","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468135,"discussion_content":"嗯，如果计算机有多余的算力的情况下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569300410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1399673,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5b/79/d55044ac.jpg","nickname":"coder","note":"","ucode":"929E3FFD14EFC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218737,"discussion_content":"NFA的匹配过程也算是图计算里面的一个典型例子，确实有很多的并行相关的研究","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585676178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329688,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1641470064,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1641470064","product_id":100034101,"comment_content":"理解了一点","like_count":0},{"had_liked":false,"id":319418,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1635787672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635787672","product_id":100034101,"comment_content":"用Python实现了一版RE引擎：<br>https:&#47;&#47;github.com&#47;killua-killua&#47;RE-Engine<br><br>包含了这节课的内容 + 一个手写的 re parser","like_count":0},{"had_liked":false,"id":315264,"user_name":"ano","can_delete":false,"product_type":"c1","uid":1783342,"ip_address":"","ucode":"7DE64BDFA78550","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/2e/376a3551.jpg","comment_is_top":false,"comment_ctime":1633774068,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1633774068","product_id":100034101,"comment_content":"老师，这个 playScript 的前端，我想用 Go 把它实现出来，就当是把代码都练习一遍，你觉得会有什么问题么？","like_count":0,"discussions":[{"author":{"id":1045929,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/a9/27f758cc.jpg","nickname":"crossoverJie","note":"","ucode":"7A726155EC2B5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586624,"discussion_content":"我用go实现了一版 https://github.com/crossoverJie/gscript","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662380485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137435,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1349270,"ip_address":"","ucode":"72252157268A12","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/J3dqALgicfVklewMjVkpyLbTk9YiamnBf5QQZ3NPHGlMeVSdLDB5yHLicEZHKBbUets76KOFwbl9ju0xJw1VeGa1A/132","comment_is_top":false,"comment_ctime":1569740248,"is_pvip":false,"replies":[{"id":"53926","content":"我明天抽空检查一下代码库是否存在编译问题，再给你回复。最近有点忙，回复大家迟了点。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570714984,"ip_address":"","comment_id":137435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569740248","product_id":100034101,"comment_content":"老师NFA2DFA这个函数的这一行dfaState = findDFAState(dfaStates, nextStateSet);中的nextStateSet是不是应该是calculatedClosures这个？还有，这一节的代码怎么运行啊，一直编不过","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469091,"discussion_content":"我明天抽空检查一下代码库是否存在编译问题，再给你回复。最近有点忙，回复大家迟了点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570714984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137273,"user_name":"余晓飞","can_delete":false,"product_type":"c1","uid":1007370,"ip_address":"","ucode":"EEC632FF776327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/0a/7f9c476b.jpg","comment_is_top":false,"comment_ctime":1569674081,"is_pvip":false,"replies":[{"id":"53186","content":"get!是小编的问题，谢谢提醒，已更新。","user_name":"作者回复","user_name_real":"小白兔奶糖","uid":"1564447","ctime":1570121208,"ip_address":"","comment_id":137273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569674081","product_id":100034101,"comment_content":"文中代码块<br>int | [a-zA-Z][a-zA-Z0-9]* | [0-9]*<br>最后一个字符*应该是+<br>","like_count":0,"discussions":[{"author":{"id":1564447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/1f/650a1d51.jpg","nickname":"小白兔奶糖","note":"","ucode":"AD0B858CFD1304","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469012,"discussion_content":"get!是小编的问题，谢谢提醒，已更新。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570121208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136929,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1349270,"ip_address":"","ucode":"72252157268A12","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/J3dqALgicfVklewMjVkpyLbTk9YiamnBf5QQZ3NPHGlMeVSdLDB5yHLicEZHKBbUets76KOFwbl9ju0xJw1VeGa1A/132","comment_is_top":false,"comment_ctime":1569555382,"is_pvip":false,"replies":[{"id":"77225","content":"你再试一下。<br>我可能之前提交代码的时候，有些没有提交。现在已经把我开发环境的全都提交了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586928971,"ip_address":"","comment_id":136929,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1569555382","product_id":100034101,"comment_content":"老师，这一节的代码怎么运行，GrammarNodeType没有找到定义的地方","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468868,"discussion_content":"你再试一下。\n我可能之前提交代码的时候，有些没有提交。现在已经把我开发环境的全都提交了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586928971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5f/0a/7f9c476b.jpg","nickname":"余晓飞","note":"","ucode":"EEC632FF776327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23669,"discussion_content":"\n如果用vscode，File -> Open 选择16-18下的src文件夹，如果有提示需要安装Java插件则安装一下后再次打开src，再打开需要调试的带有main方法的Java文件，如双击打开Regex.java, Debug -> Start Debugging (F5)，此时会自动生成launch.json 文件，切换到Regex.java，再次F5，即可运行。重点是打开的folder不能错，切换到带有main方法的Java文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569852806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135109,"user_name":"Geek_dba6ea","can_delete":false,"product_type":"c1","uid":1265744,"ip_address":"","ucode":"D6C27BC681001B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLU70sUuWXN8aUViaIDMcuFT1uPvlKFk4dsceFNLNdNnUjQbNmHUZwFxDAnpm6dJHyOR0Q47Q2hpmw/132","comment_is_top":false,"comment_ctime":1569030160,"is_pvip":false,"replies":[{"id":"54561","content":"你是指，“知其所以然”了吗？ ：-）","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1571107402,"ip_address":"","comment_id":135109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569030160","product_id":100034101,"comment_content":"第一次从这个层面理解了贪心正则匹配","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468051,"discussion_content":"你是指，“知其所以然”了吗？ ：-）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571107402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}