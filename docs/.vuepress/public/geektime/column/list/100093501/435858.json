{"id":435858,"title":"10｜变量声明：静态语言有别于动态语言的重要特征","content":"<p>你好，我是Tony Bai。</p><p>今天我们将深入Go语法细节，学习静态语言有别于动态语言的一个重要特征：<strong>变量声明</strong>。那么变量声明究竟解决的是什么问题呢？我们先从变量这个概念说起。</p><p>在编程语言中，为了方便操作内存特定位置的数据，我们用一个特定的名字与位于特定位置的内存块绑定在一起，这个名字被称为<strong>变量</strong>。</p><p>但这并不代表我们可以通过变量随意引用或修改内存，<strong>变量所绑定的内存区域是要有一个明确的边界的</strong>。也就是说，通过这样一个变量，我们究竟可以操作4个字节内存还是8个字节内存，又或是256个字节内存，编程语言的编译器或解释器需要明确地知道。</p><p>那么，编程语言的编译器或解释器是如何知道一个变量所能引用的内存区域边界呢？</p><p>其实，动态语言和静态语言有不同的处理方式。动态语言（比如Python、Ruby等）的解释器可以在运行时通过对变量赋值的分析，自动确定变量的边界。并且在动态语言中，一个变量可以在运行时被赋予大小不同的边界。</p><p>而静态编程语言在这方面的“体验略差”。静态类型语言编译器必须明确知道一个变量的边界才允许使用这个变量，但静态语言编译器又没能力自动提供这个信息，这个边界信息必须由这门语言的使用者提供，于是就有了“<strong>变量声明</strong>”。通过变量声明，语言使用者可以显式告知编译器一个变量的边界信息。在具体实现层面呢，这个边界信息由变量的类型属性赋予。</p><!-- [[[read_end]]] --><p>作为身处静态编程语言阵营的Go语言，它沿袭了静态语言的这一要求：<strong>使用变量之前需要先进行变量声明</strong>。</p><p>首先，让我们先来看看Go语言的变量声明方法。</p><h2>Go语言的变量声明方法</h2><p>我们前面说过，Go是静态语言，所有变量在使用前必须先进行声明。声明的意义在于告诉编译器该变量可以操作的内存的边界信息，而这种边界通常又是由变量的类型信息提供的。</p><p>在Go语言中，有一个通用的变量声明方法是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/03/cf0a619528dd03893edbb83f3c4dd303.jpg?wh=1487x770\" alt=\"图片\"></p><p>这个变量声明分为四个部分：</p><ul>\n<li>var是修饰变量声明的关键字；</li>\n<li>a为变量名；</li>\n<li>int为该变量的类型；</li>\n<li>10是变量的初值。</li>\n</ul><p>你看啊，其实Go语言的变量声明形式与其他主流静态语言有一个显著的差异，那就是<strong>它将变量名放在了类型的前面</strong>。这样做有什么好处呢？我先不说，我想请你思考一下。这个类型为变量提供了边界信息，在Go语言中，无论什么类型的变量，都可以使用这种形式进行变量声明。</p><p>但是，如果你没有显式为变量赋予初值，Go编译器会为变量赋予这个类型的零值：</p><pre><code class=\"language-plain\">var a int // a的初值为int类型的零值：0\n</code></pre><p>什么是类型的零值呢？Go语言的每种原生类型都有它的默认值（这些原生类型我们后面再讲），这个默认值就是这个类型的零值。这里我给你写了Go规范定义的内置原生类型的默认值（即零值）：</p><p><img src=\"https://static001.geekbang.org/resource/image/92/23/92242134ff5ccdaed32854d01690ab23.jpg?wh=1920x687\" alt=\"图片\"></p><p>另外，像数组、结构体这样复合类型变量的零值就是它们组成元素都为零值时的结果。</p><p>除了单独声明每个变量外，Go语言还提供了变量声明块（block）的语法形式，可以用一个var关键字将多个变量声明放在一起，像下面代码这样：</p><pre><code class=\"language-plain\">var (\n    a int = 128\n    b int8 = 6\n    s string = \"hello\"\n    c rune = 'A'\n    t bool = true\n)\n</code></pre><p>你看在这个变量声明块中，我们通过一个var关键字声明了5个不同类型的变量。而且，Go语言还支持在一行变量声明中同时声明多个变量：</p><pre><code class=\"language-plain\">var a, b, c int = 5, 6, 7\n</code></pre><p>这样的多变量声明同样也可以用在变量声明块中，像下面这样：</p><pre><code class=\"language-plain\">var (\n    a, b, c int = 5, 6, 7\n    c, d, e rune = 'C', 'D', 'E'\n) \n</code></pre><p>当然了，虽然我们现在写的多变量声明都是在声明同一类型的变量，但是它也适用于声明不同类型的变量，这个我们等会儿会详细讲讲。</p><p>除了上面这种通用的变量声明形式，为了给开发者带来更好的使用体验，Go语言还提供了两种变量声明的“语法糖”，下面我们逐一来学习一下。</p><p><strong>1. 省略类型信息的声明：</strong></p><p>在通用的变量声明的基础上，Go编译器允许我们省略变量声明中的类型信息，它的标准范式是“<strong>var varName = initExpression</strong>”，比如下面就是一个省略了类型信息的变量声明：</p><pre><code class=\"language-plain\">var b = 13\n</code></pre><p>那么Go编译器在遇到这样的变量声明后是如何确定变量的类型信息呢？</p><p>其实很简单，Go编译器会根据右侧变量初值自动推导出变量的类型，并给这个变量赋予初值所对应的默认类型。比如，整型值的默认类型int，浮点值的默认类型为float64，复数值的默认类型为complex128。其他类型值的默认类型就更好分辨了，在Go语言中仅有唯一与之对应的类型，比如布尔值的默认类型只能是bool，字符值默认类型只能是rune，字符串值的默认类型只能是string等。</p><p>如果我们不接受默认类型，而是要显式地为变量指定类型，除了通用的声明形式，我们还可以通过显式类型转型达到我们的目的：</p><pre><code class=\"language-plain\">var b = int32(13)\n</code></pre><p>显然这种省略类型信息声明的“语法糖”仅<strong>适用于在变量声明的同时显式赋予变量初值的情况</strong>，下面这种没有初值的声明形式是不被允许的：</p><pre><code class=\"language-plain\">var b\n</code></pre><p>结合多变量声明，我们可以使用这种变量声明“语法糖”声明多个不同类型的变量：</p><pre><code class=\"language-plain\">var a, b, c = 12, 'A', \"hello\"\n</code></pre><p>在这个变量声明中，我们声明了三个变量a、b和c，但它们分别具有不同的类型，分别为int、rune和string。</p><p>在这种变量声明语法糖中，我们省去了变量类型信息，但Go编译器会为我们自动推导出类型信息。那是否还有更简化的变量声明形式呢？答案是有的。下面我们就来看看短变量声明。</p><p><strong>2. 短变量声明：</strong></p><p>其实，Go语言还为我们提供了最简化的变量声明形式：<strong>短变量声明</strong>。使用短变量声明时，我们甚至可以省去var关键字以及类型信息，它的标准范式是“varName := initExpression”。我这里也举了几个例子：</p><pre><code class=\"language-plain\">a := 12\nb := 'A'\nc := \"hello\"\n</code></pre><p>这里我们看到，短变量声明将通用变量声明中的四个部分省去了两个，但它并没有使用赋值操作符“=”，而是使用了短变量声明专用的“:=”。这个原理和上一种省略类型信息的声明语法糖一样，短变量声明中的变量类型也是由Go编译器自动推导出来的。</p><p>而且，短变量声明也支持一次声明多个变量，而且形式更为简洁，是这个样子的：</p><pre><code class=\"language-plain\">a, b, c := 12, 'A', \"hello\"\n</code></pre><p>不过呢，短变量声明的使用也是有约束的，并不是所有变量都能用短变量声明来声明的，这个你会在下面的讲解中了解到。</p><p>好了，现在我们已经学习了至少三种变量声明形式了。这时候你可能有些犯迷糊了：这些变量声明形式是否适合所有变量呢？我到底该使用哪一种呢？别急，在揭晓答案之前，我们需要学习点预备知识：<strong>Go语言的两类变量</strong>。</p><p>通常来说，Go语言的变量可以分为两类：一类称为<strong>包级变量(package varible)</strong>，也就是在包级别可见的变量。如果是导出变量（大写字母开头），那么这个包级变量也可以被视为全局变量；另一类则是<strong>局部变量(local varible)</strong>，也就是Go函数或方法体内声明的变量，仅在函数或方法体内可见。而我们声明的所有变量都逃不开这两种。</p><p>有了这个预备知识，接下来我们就来分别说明一下这两类变量在声明形式选择上的方法，以及一些最佳实践。</p><h2>包级变量的声明形式</h2><p>首先，我先下个结论：<strong>包级变量只能使用带有var关键字的变量声明形式，不能使用短变量声明形式，但在形式细节上可以有一定灵活度。</strong>具体这个灵活度怎么去考虑呢？我们可以从“变量声明时是否延迟初始化”这个角度，对包级变量的声明形式进行一次分类。</p><p><strong>第一类：声明并同时显式初始化。</strong></p><p>你先看看这个代码：</p><pre><code class=\"language-plain\">// $GOROOT/src/io/io.go\nvar ErrShortWrite = errors.New(\"short write\")\nvar ErrShortBuffer = errors.New(\"short buffer\")\nvar EOF = errors.New(\"EOF\")\n</code></pre><p>我们可以看到，这个代码块里声明的变量都是io包的包级变量。在Go标准库中，对于变量声明的同时进行显式初始化的这类包级变量，实践中多使用这种省略类型信息的“语法糖”格式：</p><pre><code class=\"language-plain\">var varName = initExpression\n</code></pre><p>就像我们前面说过的那样，Go编译器会自动根据等号右侧InitExpression结果值的类型，来确定左侧声明的变量的类型，这个类型会是结果值对应类型的默认类型。</p><p>当然，如果我们不接受默认类型，而是<strong>要显式地为包级变量指定类型</strong>，那么我们有两种方式，我这里给出了两种包级变量的声明形式的对比示例。</p><pre><code>//第一种：\nplain\nvar a = 13 // 使用默认类型\nvar b int32 = 17  // 显式指定类型\nvar f float32 = 3.14 // 显式指定类型\n\n//第二种：\nvar a = 13 // 使用默认类型\nvar b = int32(17) // 显式指定类型\nvar f = float32(3.14) // 显式指定类型\n</code></pre><p>虽然这两种方式都是可以使用的，但从声明一致性的角度出发，Go更推荐我们使用后者，这样能统一接受默认类型和显式指定类型这两种声明形式，尤其是在将这些变量放在一个var块中声明时，你会更明显地看到这一点。</p><p>所以我们更青睐下面这样的形式：</p><pre><code class=\"language-plain\">var (\n\ta = 13\n\tb = int32(17)\n\tf = float32(3.14)\n)\n</code></pre><p>而不是下面这种看起来不一致的声明形式：</p><pre><code class=\"language-plain\">var (\n\ta = 13\n\tb int32 = 17\n\tf float32 = 3.14\n)\n</code></pre><p><strong>第二类：声明但延迟初始化。</strong></p><p>对于声明时并不立即显式初始化的包级变量，我们可以使用下面这种通用变量声明形式：</p><pre><code class=\"language-plain\">var a int32\nvar f float64\n</code></pre><p>我们知道，虽然没有显式初始化，Go语言也会让这些变量拥有初始的“零值”。如果是自定义的类型，我也建议你尽量保证它的零值是可用的。</p><p><strong>这里还有一个注意事项，就是声明聚类与就近原则。</strong></p><p>正好，Go语言提供了<strong>变量声明块</strong>用来把多个的变量声明放在一起，并且在语法上也不会限制放置在var块中的声明类型，那我们就应该学会充分利用var变量声明块，让我们变量声明更规整，更具可读性，现在我们就来试试看。</p><p>通常，我们会将同一类的变量声明放在一个var变量声明块中，不同类的声明放在不同的var声明块中，比如下面就是我从标准库net包中摘取的两段变量声明代码：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/net.go\n\nvar (\n    netGo  bool \n    netCgo bool \n)\n\nvar (\n    aLongTimeAgo = time.Unix(1, 0)\n    noDeadline = time.Time{}\n    noCancel   = (chan struct{})(nil)\n)\n</code></pre><p>我们可以看到，上面这两个var声明块各自声明了一类特定用途的包级变量。那我就要问了，你还能从中看出什么包级变量声明的原则吗？</p><p>其实，我们可以将延迟初始化的变量声明放在一个var声明块(比如上面的第一个var声明块)，然后将声明且显式初始化的变量放在另一个var块中（比如上面的第二个var声明块），这里我称这种方式为<strong>“声明聚类”</strong>，声明聚类可以提升代码可读性。</p><p>到这里，你可能还会有一个问题：我们是否应该将包级变量的声明全部集中放在源文件头部呢？答案不能一概而论。</p><p>使用静态编程语言的开发人员都知道，变量声明最佳实践中还有一条：<strong>就近原则</strong>。也就是说我们尽可能在靠近第一次使用变量的位置声明这个变量。就近原则实际上也是对变量的作用域最小化的一种实现手段。在Go标准库中我们也很容易找到符合就近原则的变量声明的例子，比如下面这段标准库http包中的代码就是这样：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/request.go\n\nvar ErrNoCookie = errors.New(\"http: named cookie not present\")\nfunc (r *Request) Cookie(name string) (*Cookie, error) {\n    for _, c := range readCookies(r.Header, name) {\n        return c, nil\n    }\n    return nil, ErrNoCookie\n}\n</code></pre><p>在这个代码块里，ErrNoCookie这个变量在整个包中仅仅被用在了Cookie方法中，因此它被声明在紧邻Cookie方法定义的地方。当然了，如果一个包级变量在包内部被多处使用，那么这个变量还是放在源文件头部声明比较适合的。</p><p>接下来，我们再来看看另外一种变量：局部变量的声明形式。</p><h2>局部变量的声明形式</h2><p>有了包级变量做铺垫，我们再来讲解局部变量就容易很多了。和包级变量相比，局部变量又多了一种短变量声明形式，这是局部变量特有的一种变量声明形式，也是局部变量采用最多的一种声明形式。</p><p>这里我们也从“变量声明的时候是否延迟初始化”这个角度，对本地变量的声明形式进行分类说明。</p><p><strong>第一类：对于延迟初始化的局部变量声明，我们采用通用的变量声明形式</strong></p><p>其实，我们之前讲过的省略类型信息的声明和短变量声明这两种“语法糖”变量声明形式都不支持变量的延迟初始化，因此对于这类局部变量，和包级变量一样，我们只能采用通用的变量声明形式：</p><pre><code class=\"language-plain\">var err error\n</code></pre><p><strong>第二类：对于声明且显式初始化的局部变量，建议使用短变量声明形式</strong></p><p>短变量声明形式是局部变量最常用的声明形式，它遍布在Go标准库代码中。对于接受默认类型的变量，我们使用下面这种形式：</p><pre><code class=\"language-plain\">a := 17\nf := 3.14\ns := \"hello, gopher!\"\n</code></pre><p>对于不接受默认类型的变量，我们依然可以使用短变量声明形式，只是在\":=\"右侧要做一个显式转型，以保持声明的一致性：</p><pre><code class=\"language-plain\">a := int32(17)\nf := float32(3.14)\ns := []byte(\"hello, gopher!\")\n</code></pre><p><strong>这里我们还要注意：尽量在分支控制时使用短变量声明形式。</strong></p><p>分支控制应该是Go中短变量声明形式应用得最广泛的场景了。在编写Go代码时，我们很少单独声明用于分支控制语句中的变量，而是将它与if、for等控制语句通过短变量声明形式融合在一起，即在控制语句中直接声明用于控制语句代码块中的变量。</p><p>你看一下下面这个我摘自Go标准库中的代码，strings包的LastIndexAny方法为我们很好地诠释了如何将短变量声明形式与分支控制语句融合在一起使用：</p><pre><code class=\"language-plain\">// $GOROOT/src/strings/strings.go\nfunc LastIndexAny(s, chars string) int {\n    if chars == \"\" {\n        // Avoid scanning all of s.\n        return -1\n    }\n    if len(s) &gt; 8 {\n        // 作者注：在if条件控制语句中使用短变量声明形式声明了if代码块中要使用的变量as和isASCII\n        if as, isASCII := makeASCIISet(chars); isASCII { \n            for i := len(s) - 1; i &gt;= 0; i-- {\n                if as.contains(s[i]) {\n                    return i\n                }\n            }\n            return -1\n        }\n    }\n    for i := len(s); i &gt; 0; { \n        // 作者注：在for循环控制语句中使用短变量声明形式声明了for代码块中要使用的变量c\n        r, size := utf8.DecodeLastRuneInString(s[:i])\n        i -= size\n        for _, c := range chars {\n            if r == c {\n                return i\n            }\n        }\n    }\n    return -1\n}\n</code></pre><p>而且，短变量声明的这种融合的使用方式也体现出“就近”原则，让变量的作用域最小化。</p><p>另外，虽然良好的函数/方法设计都讲究“单一职责”，所以每个函数/方法规模都不大，很少需要应用var块来聚类声明局部变量，但是如果你在声明局部变量时遇到了适合聚类的应用场景，你也应该毫不犹豫地使用var声明块来声明多于一个的局部变量，具体写法你可以参考Go标准库net包中resolveAddrList方法：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/dial.go\nfunc (r *Resolver) resolveAddrList(ctx context.Context, op, network, \n                            addr string, hint Addr) (addrList, error) {\n    ... ...\n    var (\n        tcp      *TCPAddr\n        udp      *UDPAddr\n        ip       *IPAddr\n        wildcard bool\n    )\n   ... ...\n}\n</code></pre><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我们学习了多种Go变量声明的方法，还学习了不同类型Go变量可以采用的变量声明形式和惯用法，以及一些变量声明的最佳实践原则。</p><p>具体来说，Go语言提供了一种通用变量声明形式以及两种变量声明“语法糖”形式，而且Go包级变量和局部变量会根据具体情况选择不同的变量声明形式，这里我们用一幅图来做个形象化的小结：<br>\n<img src=\"https://static001.geekbang.org/resource/image/9c/77/9c663f2d88e2e53a8184669bf2338077.jpg?wh=1980x1080\" alt=\"\"><br>\n你可以看到，良好的变量声明实践需要我们考虑多方面因素，包括明确要声明的变量是包级变量还是局部变量、是否要延迟初始化、是否接受默认类型、是否是分支控制变量并结合聚类和就近原则等。</p><p>说起来，Go语言崇尚“做一件事只用一种方法”，但变量声明却似乎是一个例外。如果让Go语言的设计者重新来设计一次变量声明语法，我觉得他们很大可能不会给予开发们这么大的变量声明灵活性。作为开发者，我们要注意的是，在统一项目范围内，我们选择的变量声明的形式应该是一致的。</p><h2>思考题</h2><p>今天，我们的思考题是：与主流静态语言不同，在Go语言变量声明中，类型是放在变量名的后面的，你认为这样做有什么好处？欢迎在留言区给我留言。</p><p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go语言的类型声明感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","comments":[{"had_liked":false,"id":319709,"user_name":"珅珅君","can_delete":false,"product_type":"c1","uid":1069646,"ip_address":"","ucode":"3700048634C565","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/4e/5150a2ee.jpg","comment_is_top":false,"comment_ctime":1635918914,"is_pvip":false,"replies":[{"id":115879,"content":"正解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635930613,"ip_address":"","comment_id":319709,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"https:&#47;&#47;blog.go-zh.org&#47;gos-declaration-syntax  其实官方有给出解释，原因简单来说就是和C相比，在当参数是指针的复杂情况下，这种声明格式会相对好理解一点，链接里面有详细解释","like_count":37},{"had_liked":false,"id":319668,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1635905809,"is_pvip":false,"replies":[{"id":115887,"content":"✅。答案非常细致。刚开始学go时，也不适应，后来适应后，就像你说的，在一些复杂函数&#47;方法的声明中，类型在后面的方式更容易理解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635930980,"ip_address":"","comment_id":319668,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"我认为类型放在变量名的后面是为了提高代码可读性的，我个人认为golang的设计者在设计go语言的时候大概率参考了c语言的语法，针对存在大量变量需要声明的场景下，go的变量类型放在变量名的后面可读性会高很多，不容易引起类型定义的混乱。\n\n比如：\nc:\nint (*fp)(int a, int b);\nint (*fp)(int (*ff)(int x, int y), int b)\n\ngo:\nf func(func(int,int) int, int) int\nf func(func(int,int) int, int) func(int, int) int\n\n相比之下：go的清晰易懂！而c的层层嵌套，难以直接看出是什么类型的指针\n\n另外的一点我认为也是大多编程语言开发者的习惯，语法定义后紧接着就是变量名应该是很多编程者的开发习惯，如果var后面跟着int类型这样的语法会让人很别扭，至少对我来讲是这样。","like_count":28,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529734,"discussion_content":"正解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635930613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024197,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c5/9259d5ca.jpg","nickname":"daydaygo","note":"","ucode":"A2477F029C7C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593675,"discussion_content":"需要访问速度快的话, go.dev 和 golang.google.cn 速度都可以, go-cn.org 内容并不是最新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668431821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2809224,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/dd/88/92f8e582.jpg","nickname":"zz","note":"","ucode":"94E8990BF3E3C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411834,"discussion_content":"现在较新的主流语言都是这么干的吧，比如 Kotlin...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636015097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319645,"user_name":"hhzzer","can_delete":false,"product_type":"c1","uid":1004988,"ip_address":"","ucode":"3A6B085577913C","user_header":"","comment_is_top":false,"comment_ctime":1635900694,"is_pvip":false,"replies":[{"id":115893,"content":"1. 保留这么多变量声明方式的原因，Go语言设计者们并未在公开场合说明过。这个我也无不能不负责任的揣测^_^。\n2. rob pike只是说过，如果有机会从头设计go，他不会再提供这么多变量声明方式了。但没说要保留哪一种。如果是我设计，我可能会保留var a int以及短变量声明。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931878,"ip_address":"","comment_id":319645,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"想问一下老师，为啥go产生了这么多种变量声明方式？依照一个问题只用一种方法解决的原则，如果你重新设计，会选择保留哪一种申明方式呢？","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529715,"discussion_content":"✅。答案非常细致。刚开始学go时，也不适应，后来适应后，就像你说的，在一些复杂函数/方法的声明中，类型在后面的方式更容易理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635930980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320733,"user_name":"修文","can_delete":false,"product_type":"c1","uid":1154709,"ip_address":"","ucode":"E80AEB9E69B080","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/95/a9ca5bb8.jpg","comment_is_top":false,"comment_ctime":1636475060,"is_pvip":false,"replies":[{"id":116718,"content":"后面会降到，go的错误处理是基于值比较的。之所以将ErrNoCookie放在包级而不是函数&#47;方法内部，是因为需要将ErrNoCookie暴露给包的使用者。这样包的使用者才能通过ErrNoCookie与方法返回的错误值进行比较以判断是否是这个错误。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636901197,"ip_address":"","comment_id":320733,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"就近原则介绍的例子中提到，ErrNoCookie 只被用在了 Cookie 方法中。有一个疑问是，为什么 ErrNoCookie 不定义在方法中，而是定义在方法外呢？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529703,"discussion_content":"1. 保留这么多变量声明方式的原因，Go语言设计者们并未在公开场合说明过。这个我也无不能不负责任的揣测^_^。\n2. rob pike只是说过，如果有机会从头设计go，他不会再提供这么多变量声明方式了。但没说要保留哪一种。如果是我设计，我可能会保留var a int以及短变量声明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635931878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319694,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1635913604,"is_pvip":false,"replies":[{"id":115848,"content":"选Go就对了:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635917094,"ip_address":"","comment_id":319694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"就是既想要静态语言的严格，又想取动态语言的灵活的折中方案。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530093,"discussion_content":"后面会降到，go的错误处理是基于值比较的。之所以将ErrNoCookie放在包级而不是函数/方法内部，是因为需要将ErrNoCookie暴露给包的使用者。这样包的使用者才能通过ErrNoCookie与方法返回的错误值进行比较以判断是否是这个错误。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636901197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1270612,"avatar":"https://static001.geekbang.org/account/avatar/00/13/63/54/84e7c168.jpg","nickname":"g4","note":"","ucode":"EFA0709EFDF4DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":575653,"discussion_content":"既然要暴露给外部使用， 是不是统一放在头部比较好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655003997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530093,"ip_address":"","group_id":0},"score":575653,"extra":""}]},{"author":{"id":1133041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","nickname":"Ransang","note":"","ucode":"DB67566A627DF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414111,"discussion_content":"貌似源码中以err开头的变量都被定义为包级变量了，可能是一种约定或者默认行为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636646860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320400,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636295093,"is_pvip":false,"replies":[{"id":116231,"content":"赞👍","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636386402,"ip_address":"","comment_id":320400,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"学习总结笔记：\n\n1、静态类型语言编译器必须明确知道一个变量的边界，一般通过“变量声明”，由变量的类型属性显式地告知；\n\n2、var a int = 10，Go 声明变量的 4 个部分：var 表明这是一个“变量”，a 是“变量名”，int 是变量的类型，10 是变量的初始化值；\n1) var a int\t&#47;&#47; 声明变量 a，不指定初始化值（编译器会赋予其类型零值，int 默认零值是 0）\n2) var (\n       a int    = 128\n       s string = &quot;hello&quot;\n   )\t&#47;&#47; 变量声明块\n3) var a, b, c int = 5, 6, 7\t&#47;&#47; 在一行变量声明中同时声明多个变量（相同类型）\n4) var a, b, c = 3, &#39;b&#39;, &quot;ccc&quot;\t&#47;&#47; 在一行变量声明中同时声明多个变量（不同类型）\n5) var (\n       a, b, c int  = 1, 2, 3\n       d, e, f rune = &#39;D&#39;, &#39;E&#39;, &#39;F&#39;\n   )\t&#47;&#47; 变量声明块，在一行变量声明中同时声明多个变量\n6) var a = 123\t&#47;&#47; 编译器根据右侧变量初始化值自动推导出变量的类型为 int（整型值的默认类型）\n7) var b = int32(123)\t&#47;&#47; 不接受默认推导类型 int，显式地为变量指定类型为 int32\n8) c := 123\t&#47;&#47; 短变量声明（省掉 var 及类型信息，使用专用的“:=”）\n9) d, e, f := 123, &#39;A&#39;, &quot;bcd&quot;\t&#47;&#47; 短变量声明，在一行变量声明中同时声明多个变量\n\n3、Go 变量可以分为两类：\n1) 包级变量：包级别可见的变量，如果是导出变量（大写字母开头的），它也可被视为“全局变量”；\n2) 局部变量：仅在函数或方法体内可见。\n\n4、包级变量 - 只能使用带有 var 关键字的变量声明形式，不能使用短变量声明形式，但在形式细节上可以有一定灵活度：\n1) 声明并同时显式初始化：var EOF = errors.New(&quot;EOF&quot;)，注意“声明一致性”原则，即如既有 var a = 123 这种使用默认类型的形式，又有 var b int32 = 321 或 var b = int32(321) 这种显式指定类型的形式，Go 更推荐使用后者；\n2) 声明但延迟初始化：var a int32。\n\n5、提升代码可读性：\n1) 声明聚类：将同一类的变量声明放在一个 var 变量声明块中，不同类的声明放在不同的声明块中，如：\nvar (\n    netGo  bool \n    netCgo bool \n)\t&#47;&#47; 声明但延迟初始化\n\nvar (\n    aLongTimeAgo = time.Unix(1, 0)\n    noDeadline      = time.Time{}\n    noCancel         = (chan struct{})(nil)\n)\t&#47;&#47; 声明并同时显式初始化\n2) 就近原则：尽可能在靠近第一次使用变量的位置声明这个变量，实际上也是对变量的作用域最小化的一种实现手段，如果一个包级变量在包内部被多处使用，则还是放在源文件头部比较适合。\n\n6、局部变量 - 和包级变量相比，多了一种短变量声明形式，这是局部变量特有的一种变量声明形式，也是局部变量采用最多的一种声明形式：\n1) 对于延迟初始化的局部变量声明，我们采用通用的变量声明形式：var err error\n2) 对于声明且显式初始化的局部变量，建议使用短变量声明形式：a := 123，f := float32(3.14)\n3) 尽量在分支控制时使用短变量声明形式，这种融合的使用方式也体现出“就近”原则，让变量的作用域最小化；\n4) 如果在声明局部变量时遇到了适合聚类的应用场景，应该毫不犹豫地使用 var 声明块来声明多于一个的局部变量：\nfunc (r *Resolver) resolveAddrList(ctx context.Context, op, network, \n                            addr string, hint Addr) (addrList, error) {\n    ... ...\n    var (\n        tcp      *TCPAddr\n        udp      *UDPAddr\n        ip       *IPAddr\n        wildcard bool\n    )\n   ... ...\n}\n\n7、Go 语言变量声明中，类型是放在变量名的后面的，这样做的好处：https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529726,"discussion_content":"选Go就对了:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635917094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358340,"user_name":"CLMOOK🐾","can_delete":false,"product_type":"c1","uid":1321526,"ip_address":"北京","ucode":"F6C75A32A59A34","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/36/c5d1a120.jpg","comment_is_top":false,"comment_ctime":1664208281,"is_pvip":false,"replies":[{"id":130416,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664266363,"ip_address":"北京","comment_id":358340,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师好，按我的理解，显式指定变量类型，在编译器的执行效率上，是比不指定类型，或进行显式转换类型要高的，因为省略了编译器根据值去判断类型，或做类型转换的开销，但由于go程序都是编译后运行二进制文件，所以编译过程的开销就没那么重要或者说可以忽略，然后可以更多的考虑使用便利性和代码可读性。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529977,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636386402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8b/ef/87c18fb7.jpg","nickname":"庚辰","note":"","ucode":"8B8FE1460A2624","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553184,"discussion_content":"课代表呀^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645757672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330015,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1641732783,"is_pvip":false,"replies":[{"id":120491,"content":"同一代码块内先后放置上面两个语句，e不算声明两次。你可以输出e的地址证明这点。两个e的地址是相同的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642043378,"ip_address":"","comment_id":330015,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"a, e := a()   然后  b, e := b()    这里的 e 算不算声明两次？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588964,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664266363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319747,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1635927619,"is_pvip":false,"replies":[{"id":115933,"content":"大约是如此。可以看看官方解释：https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635947656,"ip_address":"","comment_id":319747,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"变量名放在前面应该是考虑代码的可读性才这样设计的吧","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545711,"discussion_content":"同一代码块内先后放置上面两个语句，e不算声明两次。你可以输出e的地址证明这点。两个e的地址是相同的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642043379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552878,"discussion_content":"验证\n\nfunc justtest(){\n\ta, e := &#34;william&#34;, &#34;ning&#34;\n\tprintln(a, e, &amp;e)\n\n\tb, e := &#34;william1&#34;, &#34;ning1&#34;\n\tprintln(a, e, b, &amp;e)\n}\n\n输出\n➜  hellomodule go run .\nwilliam ning 0xc0000c9e28\nwilliam ning1 william1 0xc0000c9e28\n➜  hellomodule \n\n可知：不算声明两次，后一次相当于赋值.\n另外，变量e的内存地址是相同的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1645621838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566743,"discussion_content":"给后面新学的同学备注下：如何取变量的内存地址。只需要使用到 &amp; 取地址符。\nfunc main() {\n\tvar a = 2\n\tfmt.Println(&#34;变量 a 的地址是:&#34;, &amp;a)\n}\n\n&gt;&gt; 变量 a 的地址是: 0xc000132008\n\n再提一嘴，内存地址不是固定的。看到输出这么一串十六进制的内容就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1650757960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319662,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1635904274,"is_pvip":false,"replies":[{"id":115891,"content":"其实官方早有正解，https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax 。我个人以前是C程序员，在读懂那些复杂函数的原型时，颇为费力。换做go之后，再未被这类问题困扰过:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931441,"ip_address":"","comment_id":319662,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"C 和 C++ 都是类型在前，变量名在后，记得非常清楚 CCMouse 老师在视频课上提到这才是正确的方法，但到现在其实我还没太明白原因。不过在 Rust 中采用了和 Go 相同的方式。所以希望老师解答一下原因","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529755,"discussion_content":"大约是如此。可以看看官方解释：https://go.dev/blog/declaration-syntax","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635947656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1819176,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c2/28/32fdc447.jpg","nickname":"newchaos","note":"","ucode":"EBC1909694A0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653564,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731198444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319709,"user_name":"珅珅君","can_delete":false,"product_type":"c1","uid":1069646,"ip_address":"","ucode":"3700048634C565","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/4e/5150a2ee.jpg","comment_is_top":false,"comment_ctime":1635918914,"is_pvip":false,"replies":[{"id":115879,"content":"正解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635930613,"ip_address":"","comment_id":319709,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"https:&#47;&#47;blog.go-zh.org&#47;gos-declaration-syntax  其实官方有给出解释，原因简单来说就是和C相比，在当参数是指针的复杂情况下，这种声明格式会相对好理解一点，链接里面有详细解释","like_count":37,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529734,"discussion_content":"正解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635930613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024197,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c5/9259d5ca.jpg","nickname":"daydaygo","note":"","ucode":"A2477F029C7C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593675,"discussion_content":"需要访问速度快的话, go.dev 和 golang.google.cn 速度都可以, go-cn.org 内容并不是最新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668431821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2809224,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/dd/88/92f8e582.jpg","nickname":"zz","note":"","ucode":"94E8990BF3E3C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411834,"discussion_content":"现在较新的主流语言都是这么干的吧，比如 Kotlin...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636015097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319668,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1635905809,"is_pvip":false,"replies":[{"id":115887,"content":"✅。答案非常细致。刚开始学go时，也不适应，后来适应后，就像你说的，在一些复杂函数&#47;方法的声明中，类型在后面的方式更容易理解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635930980,"ip_address":"","comment_id":319668,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"我认为类型放在变量名的后面是为了提高代码可读性的，我个人认为golang的设计者在设计go语言的时候大概率参考了c语言的语法，针对存在大量变量需要声明的场景下，go的变量类型放在变量名的后面可读性会高很多，不容易引起类型定义的混乱。\n\n比如：\nc:\nint (*fp)(int a, int b);\nint (*fp)(int (*ff)(int x, int y), int b)\n\ngo:\nf func(func(int,int) int, int) int\nf func(func(int,int) int, int) func(int, int) int\n\n相比之下：go的清晰易懂！而c的层层嵌套，难以直接看出是什么类型的指针\n\n另外的一点我认为也是大多编程语言开发者的习惯，语法定义后紧接着就是变量名应该是很多编程者的开发习惯，如果var后面跟着int类型这样的语法会让人很别扭，至少对我来讲是这样。","like_count":28,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529715,"discussion_content":"✅。答案非常细致。刚开始学go时，也不适应，后来适应后，就像你说的，在一些复杂函数/方法的声明中，类型在后面的方式更容易理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635930980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319645,"user_name":"hhzzer","can_delete":false,"product_type":"c1","uid":1004988,"ip_address":"","ucode":"3A6B085577913C","user_header":"","comment_is_top":false,"comment_ctime":1635900694,"is_pvip":false,"replies":[{"id":115893,"content":"1. 保留这么多变量声明方式的原因，Go语言设计者们并未在公开场合说明过。这个我也无不能不负责任的揣测^_^。\n2. rob pike只是说过，如果有机会从头设计go，他不会再提供这么多变量声明方式了。但没说要保留哪一种。如果是我设计，我可能会保留var a int以及短变量声明。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931878,"ip_address":"","comment_id":319645,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"想问一下老师，为啥go产生了这么多种变量声明方式？依照一个问题只用一种方法解决的原则，如果你重新设计，会选择保留哪一种申明方式呢？","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529703,"discussion_content":"1. 保留这么多变量声明方式的原因，Go语言设计者们并未在公开场合说明过。这个我也无不能不负责任的揣测^_^。\n2. rob pike只是说过，如果有机会从头设计go，他不会再提供这么多变量声明方式了。但没说要保留哪一种。如果是我设计，我可能会保留var a int以及短变量声明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635931878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320733,"user_name":"修文","can_delete":false,"product_type":"c1","uid":1154709,"ip_address":"","ucode":"E80AEB9E69B080","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/95/a9ca5bb8.jpg","comment_is_top":false,"comment_ctime":1636475060,"is_pvip":false,"replies":[{"id":116718,"content":"后面会降到，go的错误处理是基于值比较的。之所以将ErrNoCookie放在包级而不是函数&#47;方法内部，是因为需要将ErrNoCookie暴露给包的使用者。这样包的使用者才能通过ErrNoCookie与方法返回的错误值进行比较以判断是否是这个错误。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636901197,"ip_address":"","comment_id":320733,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"就近原则介绍的例子中提到，ErrNoCookie 只被用在了 Cookie 方法中。有一个疑问是，为什么 ErrNoCookie 不定义在方法中，而是定义在方法外呢？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530093,"discussion_content":"后面会降到，go的错误处理是基于值比较的。之所以将ErrNoCookie放在包级而不是函数/方法内部，是因为需要将ErrNoCookie暴露给包的使用者。这样包的使用者才能通过ErrNoCookie与方法返回的错误值进行比较以判断是否是这个错误。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636901197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1270612,"avatar":"https://static001.geekbang.org/account/avatar/00/13/63/54/84e7c168.jpg","nickname":"g4","note":"","ucode":"EFA0709EFDF4DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":575653,"discussion_content":"既然要暴露给外部使用， 是不是统一放在头部比较好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655003997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530093,"ip_address":"","group_id":0},"score":575653,"extra":""}]},{"author":{"id":1133041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","nickname":"Ransang","note":"","ucode":"DB67566A627DF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414111,"discussion_content":"貌似源码中以err开头的变量都被定义为包级变量了，可能是一种约定或者默认行为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636646860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319694,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1635913604,"is_pvip":false,"replies":[{"id":115848,"content":"选Go就对了:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635917094,"ip_address":"","comment_id":319694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"就是既想要静态语言的严格，又想取动态语言的灵活的折中方案。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529726,"discussion_content":"选Go就对了:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635917094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320400,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636295093,"is_pvip":false,"replies":[{"id":116231,"content":"赞👍","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636386402,"ip_address":"","comment_id":320400,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"学习总结笔记：\n\n1、静态类型语言编译器必须明确知道一个变量的边界，一般通过“变量声明”，由变量的类型属性显式地告知；\n\n2、var a int = 10，Go 声明变量的 4 个部分：var 表明这是一个“变量”，a 是“变量名”，int 是变量的类型，10 是变量的初始化值；\n1) var a int\t&#47;&#47; 声明变量 a，不指定初始化值（编译器会赋予其类型零值，int 默认零值是 0）\n2) var (\n       a int    = 128\n       s string = &quot;hello&quot;\n   )\t&#47;&#47; 变量声明块\n3) var a, b, c int = 5, 6, 7\t&#47;&#47; 在一行变量声明中同时声明多个变量（相同类型）\n4) var a, b, c = 3, &#39;b&#39;, &quot;ccc&quot;\t&#47;&#47; 在一行变量声明中同时声明多个变量（不同类型）\n5) var (\n       a, b, c int  = 1, 2, 3\n       d, e, f rune = &#39;D&#39;, &#39;E&#39;, &#39;F&#39;\n   )\t&#47;&#47; 变量声明块，在一行变量声明中同时声明多个变量\n6) var a = 123\t&#47;&#47; 编译器根据右侧变量初始化值自动推导出变量的类型为 int（整型值的默认类型）\n7) var b = int32(123)\t&#47;&#47; 不接受默认推导类型 int，显式地为变量指定类型为 int32\n8) c := 123\t&#47;&#47; 短变量声明（省掉 var 及类型信息，使用专用的“:=”）\n9) d, e, f := 123, &#39;A&#39;, &quot;bcd&quot;\t&#47;&#47; 短变量声明，在一行变量声明中同时声明多个变量\n\n3、Go 变量可以分为两类：\n1) 包级变量：包级别可见的变量，如果是导出变量（大写字母开头的），它也可被视为“全局变量”；\n2) 局部变量：仅在函数或方法体内可见。\n\n4、包级变量 - 只能使用带有 var 关键字的变量声明形式，不能使用短变量声明形式，但在形式细节上可以有一定灵活度：\n1) 声明并同时显式初始化：var EOF = errors.New(&quot;EOF&quot;)，注意“声明一致性”原则，即如既有 var a = 123 这种使用默认类型的形式，又有 var b int32 = 321 或 var b = int32(321) 这种显式指定类型的形式，Go 更推荐使用后者；\n2) 声明但延迟初始化：var a int32。\n\n5、提升代码可读性：\n1) 声明聚类：将同一类的变量声明放在一个 var 变量声明块中，不同类的声明放在不同的声明块中，如：\nvar (\n    netGo  bool \n    netCgo bool \n)\t&#47;&#47; 声明但延迟初始化\n\nvar (\n    aLongTimeAgo = time.Unix(1, 0)\n    noDeadline      = time.Time{}\n    noCancel         = (chan struct{})(nil)\n)\t&#47;&#47; 声明并同时显式初始化\n2) 就近原则：尽可能在靠近第一次使用变量的位置声明这个变量，实际上也是对变量的作用域最小化的一种实现手段，如果一个包级变量在包内部被多处使用，则还是放在源文件头部比较适合。\n\n6、局部变量 - 和包级变量相比，多了一种短变量声明形式，这是局部变量特有的一种变量声明形式，也是局部变量采用最多的一种声明形式：\n1) 对于延迟初始化的局部变量声明，我们采用通用的变量声明形式：var err error\n2) 对于声明且显式初始化的局部变量，建议使用短变量声明形式：a := 123，f := float32(3.14)\n3) 尽量在分支控制时使用短变量声明形式，这种融合的使用方式也体现出“就近”原则，让变量的作用域最小化；\n4) 如果在声明局部变量时遇到了适合聚类的应用场景，应该毫不犹豫地使用 var 声明块来声明多于一个的局部变量：\nfunc (r *Resolver) resolveAddrList(ctx context.Context, op, network, \n                            addr string, hint Addr) (addrList, error) {\n    ... ...\n    var (\n        tcp      *TCPAddr\n        udp      *UDPAddr\n        ip       *IPAddr\n        wildcard bool\n    )\n   ... ...\n}\n\n7、Go 语言变量声明中，类型是放在变量名的后面的，这样做的好处：https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529977,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636386402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8b/ef/87c18fb7.jpg","nickname":"庚辰","note":"","ucode":"8B8FE1460A2624","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553184,"discussion_content":"课代表呀^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645757672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358340,"user_name":"CLMOOK🐾","can_delete":false,"product_type":"c1","uid":1321526,"ip_address":"北京","ucode":"F6C75A32A59A34","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/36/c5d1a120.jpg","comment_is_top":false,"comment_ctime":1664208281,"is_pvip":false,"replies":[{"id":130416,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664266363,"ip_address":"北京","comment_id":358340,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师好，按我的理解，显式指定变量类型，在编译器的执行效率上，是比不指定类型，或进行显式转换类型要高的，因为省略了编译器根据值去判断类型，或做类型转换的开销，但由于go程序都是编译后运行二进制文件，所以编译过程的开销就没那么重要或者说可以忽略，然后可以更多的考虑使用便利性和代码可读性。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588964,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664266363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330015,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1641732783,"is_pvip":false,"replies":[{"id":120491,"content":"同一代码块内先后放置上面两个语句，e不算声明两次。你可以输出e的地址证明这点。两个e的地址是相同的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642043378,"ip_address":"","comment_id":330015,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"a, e := a()   然后  b, e := b()    这里的 e 算不算声明两次？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545711,"discussion_content":"同一代码块内先后放置上面两个语句，e不算声明两次。你可以输出e的地址证明这点。两个e的地址是相同的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642043379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552878,"discussion_content":"验证\n\nfunc justtest(){\n\ta, e := &#34;william&#34;, &#34;ning&#34;\n\tprintln(a, e, &amp;e)\n\n\tb, e := &#34;william1&#34;, &#34;ning1&#34;\n\tprintln(a, e, b, &amp;e)\n}\n\n输出\n➜  hellomodule go run .\nwilliam ning 0xc0000c9e28\nwilliam ning1 william1 0xc0000c9e28\n➜  hellomodule \n\n可知：不算声明两次，后一次相当于赋值.\n另外，变量e的内存地址是相同的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1645621838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566743,"discussion_content":"给后面新学的同学备注下：如何取变量的内存地址。只需要使用到 &amp; 取地址符。\nfunc main() {\n\tvar a = 2\n\tfmt.Println(&#34;变量 a 的地址是:&#34;, &amp;a)\n}\n\n&gt;&gt; 变量 a 的地址是: 0xc000132008\n\n再提一嘴，内存地址不是固定的。看到输出这么一串十六进制的内容就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1650757960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319747,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1635927619,"is_pvip":false,"replies":[{"id":115933,"content":"大约是如此。可以看看官方解释：https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635947656,"ip_address":"","comment_id":319747,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"变量名放在前面应该是考虑代码的可读性才这样设计的吧","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529755,"discussion_content":"大约是如此。可以看看官方解释：https://go.dev/blog/declaration-syntax","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635947656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1819176,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c2/28/32fdc447.jpg","nickname":"newchaos","note":"","ucode":"EBC1909694A0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653564,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731198444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319662,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1635904274,"is_pvip":false,"replies":[{"id":115891,"content":"其实官方早有正解，https:&#47;&#47;go.dev&#47;blog&#47;declaration-syntax 。我个人以前是C程序员，在读懂那些复杂函数的原型时，颇为费力。换做go之后，再未被这类问题困扰过:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931441,"ip_address":"","comment_id":319662,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"C 和 C++ 都是类型在前，变量名在后，记得非常清楚 CCMouse 老师在视频课上提到这才是正确的方法，但到现在其实我还没太明白原因。不过在 Rust 中采用了和 Go 相同的方式。所以希望老师解答一下原因","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529712,"discussion_content":"其实官方早有正解，https://go.dev/blog/declaration-syntax 。我个人以前是C程序员，在读懂那些复杂函数的原型时，颇为费力。换做go之后，再未被这类问题困扰过:)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635931441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362213,"user_name":"福杯满溢","can_delete":false,"product_type":"c1","uid":1070667,"ip_address":"北京","ucode":"1D079242840124","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4b/3d4c0424.jpg","comment_is_top":false,"comment_ctime":1668311036,"is_pvip":false,"replies":[{"id":131789,"content":"int在64位平台上就是64位的。\n\nfunc main() {\n\tvar a = 12342342342434424\n\tfmt.Printf(&quot;%T, %d\\n&quot;, a, a) &#47;&#47; int, 12342342342434424\n}\n\n类型还是int","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668406121,"ip_address":"北京","comment_id":362213,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师请教下，对于省略类型的变量声明，如var a = 12342342342434424，那么这个a变量的默认类型就不是int类型了吧？","like_count":2},{"had_liked":false,"id":357854,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1663685288,"is_pvip":false,"replies":[{"id":130247,"content":"即便只有fmt.Println，go编译出来的程序中还会包含go runtime的所有东西。go runtime是goroutine调度、内存分配、垃圾回收所必须的，因此一个helloworld的可执行程序size也会是1M多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663744691,"ip_address":"北京","comment_id":357854,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好，如果一个程序只有一行代码：fmt.Print(&quot;Hello World&quot;)，编译的时候的时候要引入fmt包所依赖的所有包的 包级变&#47;常量以及自身的包所有包级变&#47;常量吗，这是上面这这个程序编译后文件大小1M多的原因吗。另外 编译代码应该还包括这些包的init函数以及fmt包的Printh函数？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588402,"discussion_content":"即便只有fmt.Println，go编译出来的程序中还会包含go runtime的所有东西。go runtime是goroutine调度、内存分配、垃圾回收所必须的，因此一个helloworld的可执行程序size也会是1M多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663744691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354668,"user_name":"Ayasan","can_delete":false,"product_type":"c1","uid":1440407,"ip_address":"北京","ucode":"25546FB963AF35","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/97/3e29f581.jpg","comment_is_top":false,"comment_ctime":1660656092,"is_pvip":false,"replies":[{"id":129070,"content":"只有导出的包级变量才需要大写。这些只是偏重于讲解Go变量的声明形式。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1660789103,"ip_address":"北京","comment_id":354668,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最后那个图感觉不够严谨呀，包级变量的a应该是大写才对吧。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588402,"discussion_content":"即便只有fmt.Println，go编译出来的程序中还会包含go runtime的所有东西。go runtime是goroutine调度、内存分配、垃圾回收所必须的，因此一个helloworld的可执行程序size也会是1M多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663744691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350560,"user_name":"枫","can_delete":false,"product_type":"c1","uid":3043622,"ip_address":"","ucode":"2850902F61B46C","user_header":"https://static001.geekbang.org/account/avatar/00/2e/71/26/773e6dcb.jpg","comment_is_top":false,"comment_ctime":1657004734,"is_pvip":false,"replies":[{"id":127547,"content":"在函数内部声明的变量是局部变量(local variable)，它的作用域仅限于函数体内，还谈不上导出不导出。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091524,"ip_address":"","comment_id":350560,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，请问一下，如果一个函数的名字是大写开头，在函数里面同样声明了一个大写开头的变量，那这个函数中的变量是否是导出的","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578916,"discussion_content":"在函数内部声明的变量是局部变量(local variable)，它的作用域仅限于函数体内，还谈不上导出不导出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657091524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336191,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1645993444,"is_pvip":false,"replies":[{"id":122893,"content":"好眼力👍！图片中的语法错了。go只支持一种：int32(17)。我让编辑老师修改一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646042133,"ip_address":"","comment_id":336191,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，最后那张图里的例子是不是括号打错了，比如 a := (int32)17 是不是应该是 a := int32(17) ？\n\n(类型说明符)表达式 确实是某些静态语言（比如 C，Java）里的显示类型转换，go 里面是两种形式都支持吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578916,"discussion_content":"在函数内部声明的变量是局部变量(local variable)，它的作用域仅限于函数体内，还谈不上导出不导出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657091524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333539,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1644399362,"is_pvip":false,"replies":[{"id":121880,"content":"不搞前端，ts不熟悉，ts也是将类型放在变量名后面？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644456375,"ip_address":"","comment_id":333539,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"类型是放在变量名的后面是为了让 TypeScript 开发者入坑go 嘿嘿嘿","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553729,"discussion_content":"好眼力👍！图片中的语法错了。go只支持一种：int32(17)。我让编辑老师修改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646042133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332727,"user_name":"Goopand","can_delete":false,"product_type":"c1","uid":1952388,"ip_address":"","ucode":"640D506BADB4E5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/84/1aba91f4.jpg","comment_is_top":false,"comment_ctime":1643525291,"is_pvip":false,"replies":[{"id":121626,"content":"正确","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544660,"ip_address":"","comment_id":332727,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教：关于包级变量 (package varible)，只要被导入(import)过一次，这个变量就会一直常驻在内存中，直到main函数执行结束、退出，这样理解对吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550242,"discussion_content":"不搞前端，ts不熟悉，ts也是将类型放在变量名后面？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644456375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552875,"discussion_content":"ts的例子代码\n\nclass Student {\n    fullName: string;\n    constructor(public firstName, public middleInitial, public lastName) {\n        this.fullName = firstName + &#34; &#34; + middleInitial + &#34; &#34; + lastName;\n    }\n}\n\ninterface Person {\n    firstName: string;\n    lastName: string;\n}\n\nfunction greeter(person : Person) {\n    return &#34;Hello, &#34; + person.firstName + &#34; &#34; + person.lastName;\n}\n\nlet user = new Student(&#34;Jane&#34;, &#34;M.&#34;, &#34;User&#34;);\n\ndocument.body.innerHTML = greeter(user);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645621045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328772,"user_name":"步比天下","can_delete":false,"product_type":"c1","uid":2295138,"ip_address":"","ucode":"120CC75E183441","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibQLsjsrjiasFUaPdjib95Jk4y3ZMD6zXyEud7bCvibrjrPia3RCib0zTD7MahQJ41icOicIWXfbq8JpnGQ/132","comment_is_top":false,"comment_ctime":1640873289,"is_pvip":false,"replies":[{"id":120427,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997284,"ip_address":"","comment_id":328772,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最后的图真好~","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545586,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641997285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325994,"user_name":"陈衎","can_delete":false,"product_type":"c1","uid":1810649,"ip_address":"","ucode":"8A6535DDB4B611","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a0/d9/49578be1.jpg","comment_is_top":false,"comment_ctime":1639299365,"is_pvip":false,"replies":[{"id":119075,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050827,"ip_address":"","comment_id":325994,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"真的讲的好详细。没想到go的变量还能细分出这么多内容。从接触就知道使用块声明和短变量声明，尤其是短变量声明这种语法糖认为就是作者所推荐和提倡统一的，看完本课后真的受益良多。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545586,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641997285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319660,"user_name":"AlexWillBeGood","can_delete":false,"product_type":"c1","uid":1505492,"ip_address":"","ucode":"6D7BB91781E38C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/exfIUlVdCpicQPc7fOI6XezUuXd7rayRia7sB2GGHGP7IEBibI6TJbQS2R0bMNejzR1odAIDFP05cWjujrmbIzzwg/132","comment_is_top":false,"comment_ctime":1635904099,"is_pvip":false,"replies":[{"id":115892,"content":"我觉得与效率无关。静态语言的类型声明是静态语言的机制所要求的。静态语言原本运行效率就是要比动态语言要高的，因为它已经编译为机器码了，无需开销较大的解释过程就可以运行了。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931588,"ip_address":"","comment_id":319660,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师好，请问“静态语言明确声明类型”会在编译阶段或运行阶段提高效率吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540375,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362213,"user_name":"福杯满溢","can_delete":false,"product_type":"c1","uid":1070667,"ip_address":"北京","ucode":"1D079242840124","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4b/3d4c0424.jpg","comment_is_top":false,"comment_ctime":1668311036,"is_pvip":false,"replies":[{"id":131789,"content":"int在64位平台上就是64位的。\n\nfunc main() {\n\tvar a = 12342342342434424\n\tfmt.Printf(&quot;%T, %d\\n&quot;, a, a) &#47;&#47; int, 12342342342434424\n}\n\n类型还是int","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668406121,"ip_address":"北京","comment_id":362213,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师请教下，对于省略类型的变量声明，如var a = 12342342342434424，那么这个a变量的默认类型就不是int类型了吧？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593638,"discussion_content":"int在64位平台上就是64位的。\n\nfunc main() {\n\tvar a = 12342342342434424\n\tfmt.Printf(&#34;%T, %d\\n&#34;, a, a) // int, 12342342342434424\n}\n\n类型还是int","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668406121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357854,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1663685288,"is_pvip":false,"replies":[{"id":130247,"content":"即便只有fmt.Println，go编译出来的程序中还会包含go runtime的所有东西。go runtime是goroutine调度、内存分配、垃圾回收所必须的，因此一个helloworld的可执行程序size也会是1M多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663744691,"ip_address":"北京","comment_id":357854,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好，如果一个程序只有一行代码：fmt.Print(&quot;Hello World&quot;)，编译的时候的时候要引入fmt包所依赖的所有包的 包级变&#47;常量以及自身的包所有包级变&#47;常量吗，这是上面这这个程序编译后文件大小1M多的原因吗。另外 编译代码应该还包括这些包的init函数以及fmt包的Printh函数？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593638,"discussion_content":"int在64位平台上就是64位的。\n\nfunc main() {\n\tvar a = 12342342342434424\n\tfmt.Printf(&#34;%T, %d\\n&#34;, a, a) // int, 12342342342434424\n}\n\n类型还是int","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668406121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354668,"user_name":"Ayasan","can_delete":false,"product_type":"c1","uid":1440407,"ip_address":"北京","ucode":"25546FB963AF35","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/97/3e29f581.jpg","comment_is_top":false,"comment_ctime":1660656092,"is_pvip":false,"replies":[{"id":129070,"content":"只有导出的包级变量才需要大写。这些只是偏重于讲解Go变量的声明形式。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1660789103,"ip_address":"北京","comment_id":354668,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最后那个图感觉不够严谨呀，包级变量的a应该是大写才对吧。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584363,"discussion_content":"只有导出的包级变量才需要大写。这些只是偏重于讲解Go变量的声明形式。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1660789103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350560,"user_name":"枫","can_delete":false,"product_type":"c1","uid":3043622,"ip_address":"","ucode":"2850902F61B46C","user_header":"https://static001.geekbang.org/account/avatar/00/2e/71/26/773e6dcb.jpg","comment_is_top":false,"comment_ctime":1657004734,"is_pvip":false,"replies":[{"id":127547,"content":"在函数内部声明的变量是局部变量(local variable)，它的作用域仅限于函数体内，还谈不上导出不导出。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091524,"ip_address":"","comment_id":350560,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，请问一下，如果一个函数的名字是大写开头，在函数里面同样声明了一个大写开头的变量，那这个函数中的变量是否是导出的","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584363,"discussion_content":"只有导出的包级变量才需要大写。这些只是偏重于讲解Go变量的声明形式。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1660789103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336191,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1645993444,"is_pvip":false,"replies":[{"id":122893,"content":"好眼力👍！图片中的语法错了。go只支持一种：int32(17)。我让编辑老师修改一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646042133,"ip_address":"","comment_id":336191,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，最后那张图里的例子是不是括号打错了，比如 a := (int32)17 是不是应该是 a := int32(17) ？\n\n(类型说明符)表达式 确实是某些静态语言（比如 C，Java）里的显示类型转换，go 里面是两种形式都支持吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553729,"discussion_content":"好眼力👍！图片中的语法错了。go只支持一种：int32(17)。我让编辑老师修改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646042133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333539,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1644399362,"is_pvip":false,"replies":[{"id":121880,"content":"不搞前端，ts不熟悉，ts也是将类型放在变量名后面？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644456375,"ip_address":"","comment_id":333539,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"类型是放在变量名的后面是为了让 TypeScript 开发者入坑go 嘿嘿嘿","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550242,"discussion_content":"不搞前端，ts不熟悉，ts也是将类型放在变量名后面？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644456375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552875,"discussion_content":"ts的例子代码\n\nclass Student {\n    fullName: string;\n    constructor(public firstName, public middleInitial, public lastName) {\n        this.fullName = firstName + &#34; &#34; + middleInitial + &#34; &#34; + lastName;\n    }\n}\n\ninterface Person {\n    firstName: string;\n    lastName: string;\n}\n\nfunction greeter(person : Person) {\n    return &#34;Hello, &#34; + person.firstName + &#34; &#34; + person.lastName;\n}\n\nlet user = new Student(&#34;Jane&#34;, &#34;M.&#34;, &#34;User&#34;);\n\ndocument.body.innerHTML = greeter(user);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645621045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332727,"user_name":"Goopand","can_delete":false,"product_type":"c1","uid":1952388,"ip_address":"","ucode":"640D506BADB4E5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/84/1aba91f4.jpg","comment_is_top":false,"comment_ctime":1643525291,"is_pvip":false,"replies":[{"id":121626,"content":"正确","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544660,"ip_address":"","comment_id":332727,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教：关于包级变量 (package varible)，只要被导入(import)过一次，这个变量就会一直常驻在内存中，直到main函数执行结束、退出，这样理解对吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549090,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328772,"user_name":"步比天下","can_delete":false,"product_type":"c1","uid":2295138,"ip_address":"","ucode":"120CC75E183441","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibQLsjsrjiasFUaPdjib95Jk4y3ZMD6zXyEud7bCvibrjrPia3RCib0zTD7MahQJ41icOicIWXfbq8JpnGQ/132","comment_is_top":false,"comment_ctime":1640873289,"is_pvip":false,"replies":[{"id":120427,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997284,"ip_address":"","comment_id":328772,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最后的图真好~","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549090,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325994,"user_name":"陈衎","can_delete":false,"product_type":"c1","uid":1810649,"ip_address":"","ucode":"8A6535DDB4B611","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a0/d9/49578be1.jpg","comment_is_top":false,"comment_ctime":1639299365,"is_pvip":false,"replies":[{"id":119075,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050827,"ip_address":"","comment_id":325994,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"真的讲的好详细。没想到go的变量还能细分出这么多内容。从接触就知道使用块声明和短变量声明，尤其是短变量声明这种语法糖认为就是作者所推荐和提倡统一的，看完本课后真的受益良多。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540375,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319660,"user_name":"AlexWillBeGood","can_delete":false,"product_type":"c1","uid":1505492,"ip_address":"","ucode":"6D7BB91781E38C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/exfIUlVdCpicQPc7fOI6XezUuXd7rayRia7sB2GGHGP7IEBibI6TJbQS2R0bMNejzR1odAIDFP05cWjujrmbIzzwg/132","comment_is_top":false,"comment_ctime":1635904099,"is_pvip":false,"replies":[{"id":115892,"content":"我觉得与效率无关。静态语言的类型声明是静态语言的机制所要求的。静态语言原本运行效率就是要比动态语言要高的，因为它已经编译为机器码了，无需开销较大的解释过程就可以运行了。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635931588,"ip_address":"","comment_id":319660,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师好，请问“静态语言明确声明类型”会在编译阶段或运行阶段提高效率吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529711,"discussion_content":"我觉得与效率无关。静态语言的类型声明是静态语言的机制所要求的。静态语言原本运行效率就是要比动态语言要高的，因为它已经编译为机器码了，无需开销较大的解释过程就可以运行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635931588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379662,"user_name":"Geek_d560e0","can_delete":false,"product_type":"c1","uid":2344782,"ip_address":"四川","ucode":"064A1AE69F5BC5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkkzHH7lKmxHdJmZW4niaUNicmZwVr8usAxDp93RgicDSicoVpict2ezIexpnTEs5dZQibQdt1V0UMlCUg/132","comment_is_top":false,"comment_ctime":1692257343,"is_pvip":false,"replies":[{"id":138320,"content":"1. 是的. errors.New函数返回的是error类型，那么ErrNoCookie的类型就是error。\n2. as和isASCII这两个变量的类型对应的就是makeASCIISet这个函数的两个返回值的类型。\n分号是if语句的要求。形式如：if simple_stmt ; condition_expr { ... }。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692351487,"ip_address":"北京","comment_id":379662,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"\n老师，有几个问题询问下：\n1、var ErrNoCookie = errors.New(&quot;http: named cookie not present&quot;)\n这里的ErrNoCookie是什么类型呢？是errors.New()返回什么类型他就是什么类型么？\n2、 这段代码：\nif as, isASCII := makeASCIISet(chars); isASCII {\n for i := len(s) - 1; i &gt;= 0; i-- { \n if as.contains(s[i]) { \n\treturn i \n\t} \n }\n}\n是声明as和isASCII这两个变量么？那他们的类型又是什么呢？ 同一行里面声明多个变量直接不应该是逗号分隔么，为什么makeASCIISet(chars)后面是分号？\n之前只写过python，没写过其他语言， 麻烦老师解答下？","like_count":1},{"had_liked":false,"id":369143,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1677144214,"is_pvip":false,"replies":[{"id":134492,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677151249,"ip_address":"北京","comment_id":369143,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"读了这篇文章后学习了变量的使用规范，比如包级别的变量声明方式和局部变量的声明方式，也get到了物以类聚的思想，get到了变量使用就近原则，真的是大有收获","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625956,"discussion_content":"1. 是的. errors.New函数返回的是error类型，那么ErrNoCookie的类型就是error。\n2. as和isASCII这两个变量的类型对应的就是makeASCIISet这个函数的两个返回值的类型。\n分号是if语句的要求。形式如：if simple_stmt ; condition_expr { ... }。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692351487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367810,"user_name":"无咎","can_delete":false,"product_type":"c1","uid":1479120,"ip_address":"北京","ucode":"B9759B5646F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","comment_is_top":false,"comment_ctime":1675649584,"is_pvip":false,"replies":[{"id":134046,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675949391,"ip_address":"广东","comment_id":367810,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"1、利用赋值来推导出变量的类型，大部分情况可以省略类型，简化代码，比如Rust, Go以及动态语言Python；\n2、函数指针复杂类型要容易理解。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606480,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677151249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359016,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1665155121,"is_pvip":false,"replies":[{"id":130607,"content":"&quot;很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢&quot; -- 这个就是和目前go compiler的实现有关，不用太纠结。\n\ntype rune = int 这就是为int定义了一个别名rune，至于其作用要问定义者自己啊。是喜欢rune这个名字，还是为了重构，还是其他什么原因:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665298089,"ip_address":"北京","comment_id":359016,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师您好，看到 省略类型信息的声明 中的 字符值默认类型只能是rune，自己试了下以下代码\nvar a = &#39;中&#39;\nfmt.Printf(&quot;%T&quot;, a) &#47;&#47; int32\na = &#39;12&#39; &#47;&#47; more than one character in rune literal\n虽然知道type rune = int32，rune就是int32的别名，但是很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢\n\n另外\ntype x int &#47;&#47; 此处基于int定义一个新类型x的作用是x可以有自己的方法\ntype rune = int &#47;&#47; 但是rune这个int的别名的作用是什么呢","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589747,"discussion_content":"&#34;很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢&#34; -- 这个就是和目前go compiler的实现有关，不用太纠结。\n\ntype rune = int 这就是为int定义了一个别名rune，至于其作用要问定义者自己啊。是喜欢rune这个名字，还是为了重构，还是其他什么原因:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665298089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350470,"user_name":"WoodyYip鲜森","can_delete":false,"product_type":"c1","uid":1077809,"ip_address":"","ucode":"C9C02983E0A012","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/31/06f8ada8.jpg","comment_is_top":false,"comment_ctime":1656932342,"is_pvip":false,"replies":[{"id":127508,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656991009,"ip_address":"","comment_id":350470,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"作为一名小前端，其实还蛮适应类型放在变量名后面的，因为typescript也是这样，倍感亲切呀","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589747,"discussion_content":"&#34;很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢&#34; -- 这个就是和目前go compiler的实现有关，不用太纠结。\n\ntype rune = int 这就是为int定义了一个别名rune，至于其作用要问定义者自己啊。是喜欢rune这个名字，还是为了重构，还是其他什么原因:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665298089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350216,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1656664109,"is_pvip":false,"replies":[{"id":127436,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656845381,"ip_address":"","comment_id":350216,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"文章+评论认真学完了，入门go语言不怕了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578515,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656845381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346325,"user_name":"石天兰爱学习","can_delete":false,"product_type":"c1","uid":1451826,"ip_address":"","ucode":"0D95CDA7463516","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","comment_is_top":false,"comment_ctime":1653026591,"is_pvip":false,"replies":[{"id":126370,"content":"谢谢👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653056511,"ip_address":"","comment_id":346325,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"讲的灰常好，用习惯了C语言，第一遍看着好别扭，第二遍看着好多了，给老师打call","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578515,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656845381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332728,"user_name":"Goopand","can_delete":false,"product_type":"c1","uid":1952388,"ip_address":"","ucode":"640D506BADB4E5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/84/1aba91f4.jpg","comment_is_top":false,"comment_ctime":1643527945,"is_pvip":false,"replies":[{"id":121625,"content":"一旦包被import过，那么无论包级变量是否使用过，都会在内存中存在。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544649,"ip_address":"","comment_id":332728,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"另外请教下Bai老师，包级变量如果从未被导入(import)过，就不会出现在内存中。这样理解对吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572934,"discussion_content":"谢谢👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653056512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332432,"user_name":"Geek_bb6b26","can_delete":false,"product_type":"c1","uid":1155959,"ip_address":"","ucode":"E0E6BFBE20F470","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erKQPxg8ZVfEGFhxoicqaicuX4gHOgPag6e2KXfebm1IHQJDYewcjbicKTbkr5ibiaIgQodLS7XHZleg4Q/132","comment_is_top":false,"comment_ctime":1643249557,"is_pvip":false,"replies":[{"id":121621,"content":"每个大括号括起的代码块中都可以定义局部变量。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544209,"ip_address":"","comment_id":332432,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"局部变量特指仅在语句块(if,for)内定义使用的变量吗？还是仅在方法内定义使用的就是局部变量？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549089,"discussion_content":"一旦包被import过，那么无论包级变量是否使用过，都会在内存中存在。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332431,"user_name":"Geek_bb6b26","can_delete":false,"product_type":"c1","uid":1155959,"ip_address":"","ucode":"E0E6BFBE20F470","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erKQPxg8ZVfEGFhxoicqaicuX4gHOgPag6e2KXfebm1IHQJDYewcjbicKTbkr5ibiaIgQodLS7XHZleg4Q/132","comment_is_top":false,"comment_ctime":1643249044,"is_pvip":false,"replies":[{"id":121618,"content":"就是不想用默认类型，想自己指定特定类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643543548,"ip_address":"","comment_id":332431,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"不接受默认类型的变量是什么意思？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549083,"discussion_content":"每个大括号括起的代码块中都可以定义局部变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379662,"user_name":"Geek_d560e0","can_delete":false,"product_type":"c1","uid":2344782,"ip_address":"四川","ucode":"064A1AE69F5BC5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkkzHH7lKmxHdJmZW4niaUNicmZwVr8usAxDp93RgicDSicoVpict2ezIexpnTEs5dZQibQdt1V0UMlCUg/132","comment_is_top":false,"comment_ctime":1692257343,"is_pvip":false,"replies":[{"id":138320,"content":"1. 是的. errors.New函数返回的是error类型，那么ErrNoCookie的类型就是error。\n2. as和isASCII这两个变量的类型对应的就是makeASCIISet这个函数的两个返回值的类型。\n分号是if语句的要求。形式如：if simple_stmt ; condition_expr { ... }。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692351487,"ip_address":"北京","comment_id":379662,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"\n老师，有几个问题询问下：\n1、var ErrNoCookie = errors.New(&quot;http: named cookie not present&quot;)\n这里的ErrNoCookie是什么类型呢？是errors.New()返回什么类型他就是什么类型么？\n2、 这段代码：\nif as, isASCII := makeASCIISet(chars); isASCII {\n for i := len(s) - 1; i &gt;= 0; i-- { \n if as.contains(s[i]) { \n\treturn i \n\t} \n }\n}\n是声明as和isASCII这两个变量么？那他们的类型又是什么呢？ 同一行里面声明多个变量直接不应该是逗号分隔么，为什么makeASCIISet(chars)后面是分号？\n之前只写过python，没写过其他语言， 麻烦老师解答下？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625956,"discussion_content":"1. 是的. errors.New函数返回的是error类型，那么ErrNoCookie的类型就是error。\n2. as和isASCII这两个变量的类型对应的就是makeASCIISet这个函数的两个返回值的类型。\n分号是if语句的要求。形式如：if simple_stmt ; condition_expr { ... }。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692351487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369143,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1677144214,"is_pvip":false,"replies":[{"id":134492,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677151249,"ip_address":"北京","comment_id":369143,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"读了这篇文章后学习了变量的使用规范，比如包级别的变量声明方式和局部变量的声明方式，也get到了物以类聚的思想，get到了变量使用就近原则，真的是大有收获","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606480,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677151249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367810,"user_name":"无咎","can_delete":false,"product_type":"c1","uid":1479120,"ip_address":"北京","ucode":"B9759B5646F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","comment_is_top":false,"comment_ctime":1675649584,"is_pvip":false,"replies":[{"id":134046,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675949391,"ip_address":"广东","comment_id":367810,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"1、利用赋值来推导出变量的类型，大部分情况可以省略类型，简化代码，比如Rust, Go以及动态语言Python；\n2、函数指针复杂类型要容易理解。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603114,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675949392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359016,"user_name":"不说话装糕手","can_delete":false,"product_type":"c1","uid":2922271,"ip_address":"北京","ucode":"6465E83F4E6F58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/97/1f/2a68c980.jpg","comment_is_top":false,"comment_ctime":1665155121,"is_pvip":false,"replies":[{"id":130607,"content":"&quot;很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢&quot; -- 这个就是和目前go compiler的实现有关，不用太纠结。\n\ntype rune = int 这就是为int定义了一个别名rune，至于其作用要问定义者自己啊。是喜欢rune这个名字，还是为了重构，还是其他什么原因:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665298089,"ip_address":"北京","comment_id":359016,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师您好，看到 省略类型信息的声明 中的 字符值默认类型只能是rune，自己试了下以下代码\nvar a = &#39;中&#39;\nfmt.Printf(&quot;%T&quot;, a) &#47;&#47; int32\na = &#39;12&#39; &#47;&#47; more than one character in rune literal\n虽然知道type rune = int32，rune就是int32的别名，但是很疑惑为什么这里查看类型的时候显示int32，报错的时候提示rune呢\n\n另外\ntype x int &#47;&#47; 此处基于int定义一个新类型x的作用是x可以有自己的方法\ntype rune = int &#47;&#47; 但是rune这个int的别名的作用是什么呢","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603114,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675949392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350470,"user_name":"WoodyYip鲜森","can_delete":false,"product_type":"c1","uid":1077809,"ip_address":"","ucode":"C9C02983E0A012","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/31/06f8ada8.jpg","comment_is_top":false,"comment_ctime":1656932342,"is_pvip":false,"replies":[{"id":127508,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656991009,"ip_address":"","comment_id":350470,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"作为一名小前端，其实还蛮适应类型放在变量名后面的，因为typescript也是这样，倍感亲切呀","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578742,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656991009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350216,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1656664109,"is_pvip":false,"replies":[{"id":127436,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656845381,"ip_address":"","comment_id":350216,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"文章+评论认真学完了，入门go语言不怕了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578742,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656991009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346325,"user_name":"石天兰爱学习","can_delete":false,"product_type":"c1","uid":1451826,"ip_address":"","ucode":"0D95CDA7463516","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","comment_is_top":false,"comment_ctime":1653026591,"is_pvip":false,"replies":[{"id":126370,"content":"谢谢👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653056511,"ip_address":"","comment_id":346325,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"讲的灰常好，用习惯了C语言，第一遍看着好别扭，第二遍看着好多了，给老师打call","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572934,"discussion_content":"谢谢👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653056512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332728,"user_name":"Goopand","can_delete":false,"product_type":"c1","uid":1952388,"ip_address":"","ucode":"640D506BADB4E5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/84/1aba91f4.jpg","comment_is_top":false,"comment_ctime":1643527945,"is_pvip":false,"replies":[{"id":121625,"content":"一旦包被import过，那么无论包级变量是否使用过，都会在内存中存在。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544649,"ip_address":"","comment_id":332728,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"另外请教下Bai老师，包级变量如果从未被导入(import)过，就不会出现在内存中。这样理解对吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549089,"discussion_content":"一旦包被import过，那么无论包级变量是否使用过，都会在内存中存在。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332432,"user_name":"Geek_bb6b26","can_delete":false,"product_type":"c1","uid":1155959,"ip_address":"","ucode":"E0E6BFBE20F470","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erKQPxg8ZVfEGFhxoicqaicuX4gHOgPag6e2KXfebm1IHQJDYewcjbicKTbkr5ibiaIgQodLS7XHZleg4Q/132","comment_is_top":false,"comment_ctime":1643249557,"is_pvip":false,"replies":[{"id":121621,"content":"每个大括号括起的代码块中都可以定义局部变量。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544209,"ip_address":"","comment_id":332432,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"局部变量特指仅在语句块(if,for)内定义使用的变量吗？还是仅在方法内定义使用的就是局部变量？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549083,"discussion_content":"每个大括号括起的代码块中都可以定义局部变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332431,"user_name":"Geek_bb6b26","can_delete":false,"product_type":"c1","uid":1155959,"ip_address":"","ucode":"E0E6BFBE20F470","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erKQPxg8ZVfEGFhxoicqaicuX4gHOgPag6e2KXfebm1IHQJDYewcjbicKTbkr5ibiaIgQodLS7XHZleg4Q/132","comment_is_top":false,"comment_ctime":1643249044,"is_pvip":false,"replies":[{"id":121618,"content":"就是不想用默认类型，想自己指定特定类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643543548,"ip_address":"","comment_id":332431,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"不接受默认类型的变量是什么意思？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549079,"discussion_content":"就是不想用默认类型，想自己指定特定类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643543548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390446,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715356088,"is_pvip":false,"replies":[{"id":142039,"content":"关于思考题，自然语言与编程语言的确关注点有很大不同。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715418995,"ip_address":"北京","comment_id":390446,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"1. 变量声明，标准范式是 var {varName} {varType} = {varInitValue}，几种语法糖的关键是简写但是能让编译器推导类型，这样符合静态语言的要求：\na. 省略变量类型，本质是通过{varInitValue}的默认类型进行推导\nb. 短变量声明，本质是局部变量根据{varInitValue}的默认类型进行推导，只是忽略var关键字\nc. 延迟初始化，有且仅有一种声明法，就是必须指定类型，否则编译器无法推导类型\n\n2. 声明的规约，聚类通过var关键字，就近即声明离使用最近\n\n3. 思考题，为什么类型在变量名之后声明？\n目前还没碰到这个点，看了大家说的指针类型的问题，嗯，这个是否低频？从自然语言使用习惯上，一般是类型在前，名称在后会通顺些，比如狂徒张三，剑客独孤求败；英文也是，比如五星上将麦克阿瑟General MacArthur。","like_count":0},{"had_liked":false,"id":383164,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1698583195,"is_pvip":false,"replies":[{"id":139591,"content":"对，int是架构有关的数值类型，在 32 位系统中，int是4字节的，即32bit；在 64 位系统中， int是8字节的，即64bit。\n\n而int64这种就是架构无关的类型，无论32位系统，还是64位系统，int64都是64bit的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698678312,"ip_address":"辽宁","comment_id":383164,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，您回复 “福杯满溢” 同学时提到，“int在64位平台上就是64位的”\n\n但是我记得在 C 语言中，int 数据类型的大小和操作系统位数，与编译器实现有关，大多数情况下，无论是 32 位还是 64 位的操作系统，一个 int 类型的变量占用 32 位\n\n在 Go 语言中，int 数据类型和平台相关吗？在 32 位系统中，int == int32；在 64 位系统中， int == int64，是这样吗？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644677,"discussion_content":"关于思考题，自然语言与编程语言的确关注点有很大不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715418995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378791,"user_name":"谢小路","can_delete":false,"product_type":"c1","uid":1035064,"ip_address":"广东","ucode":"C9FE2EB10DC105","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","comment_is_top":false,"comment_ctime":1690793913,"is_pvip":false,"replies":[{"id":138034,"content":"能理解:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1690856936,"ip_address":"北京","comment_id":378791,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"像这些东西，知道的人就会参考着写， 不知道的人，就各种随意，面向功能开发，又不是不能用。\n\n知道的人和不知道的人打交道或者维护同一个服务，就巨痛苦。\n\n和他提出来，他还满脸问号，以为我挑他刺。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630586,"discussion_content":"对，int是架构有关的数值类型，在 32 位系统中，int是4字节的，即32bit；在 64 位系统中， int是8字节的，即64bit。\n\n而int64这种就是架构无关的类型，无论32位系统，还是64位系统，int64都是64bit的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698678312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375554,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685616815,"is_pvip":false,"replies":[{"id":137082,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685668441,"ip_address":"北京","comment_id":375554,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"类型是放在变量名的后面应该是为了便于理解，并且这个变量类型很多情况是可以省略的。\n","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624690,"discussion_content":"能理解:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690856936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349642,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656170956,"is_pvip":false,"replies":[{"id":127282,"content":"习惯了就好了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656309029,"ip_address":"","comment_id":349642,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"看起来弊大于利 刚开始学的时候这种声明方式也太变扭了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619964,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685668441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347233,"user_name":"nero","can_delete":false,"product_type":"c1","uid":1303781,"ip_address":"","ucode":"8A47300CF0F0EB","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/e5/02f12125.jpg","comment_is_top":false,"comment_ctime":1653832420,"is_pvip":false,"replies":[{"id":126636,"content":"嗯，0的浮点型表示形式就是0.0。它们的位模式是一致的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653897688,"ip_address":"","comment_id":347233,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，浮点类型的默认值是 0","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577715,"discussion_content":"习惯了就好了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656309029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341782,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1649831840,"is_pvip":true,"replies":[{"id":124908,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649914627,"ip_address":"","comment_id":341782,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"在 Go 语言变量声明中，类型是放在变量名的后面的，一方面符合人的思维习惯，通常是先想到什么变量，再考虑这个变量是什么类型；另一方面，应该是对于指针这些复杂类型便于理解。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574200,"discussion_content":"嗯，0的浮点型表示形式就是0.0。它们的位模式是一致的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653897688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335672,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1645621916,"is_pvip":false,"replies":[{"id":122714,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645715818,"ip_address":"","comment_id":335672,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"打卡，文章和评论看完。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562955,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649914628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319665,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1635905130,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"为了不一样而不一样？必要的写在最前面，不必要的可以省略的写在后面？","like_count":8},{"had_liked":false,"id":324312,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1959590,"ip_address":"","ucode":"66DCE50B651D9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLicmwbwabg3D7F6EzMqG2icjafTYjvyttclVowmiaZOFM7v6RHZua5icClXicc78LFSToQd8cN68xgytQ/132","comment_is_top":false,"comment_ctime":1638367257,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师最后还贴图了 太感动了","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553112,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645715818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390446,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715356088,"is_pvip":false,"replies":[{"id":142039,"content":"关于思考题，自然语言与编程语言的确关注点有很大不同。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715418995,"ip_address":"北京","comment_id":390446,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"1. 变量声明，标准范式是 var {varName} {varType} = {varInitValue}，几种语法糖的关键是简写但是能让编译器推导类型，这样符合静态语言的要求：\na. 省略变量类型，本质是通过{varInitValue}的默认类型进行推导\nb. 短变量声明，本质是局部变量根据{varInitValue}的默认类型进行推导，只是忽略var关键字\nc. 延迟初始化，有且仅有一种声明法，就是必须指定类型，否则编译器无法推导类型\n\n2. 声明的规约，聚类通过var关键字，就近即声明离使用最近\n\n3. 思考题，为什么类型在变量名之后声明？\n目前还没碰到这个点，看了大家说的指针类型的问题，嗯，这个是否低频？从自然语言使用习惯上，一般是类型在前，名称在后会通顺些，比如狂徒张三，剑客独孤求败；英文也是，比如五星上将麦克阿瑟General MacArthur。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644677,"discussion_content":"关于思考题，自然语言与编程语言的确关注点有很大不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715418995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383164,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1698583195,"is_pvip":false,"replies":[{"id":139591,"content":"对，int是架构有关的数值类型，在 32 位系统中，int是4字节的，即32bit；在 64 位系统中， int是8字节的，即64bit。\n\n而int64这种就是架构无关的类型，无论32位系统，还是64位系统，int64都是64bit的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698678312,"ip_address":"辽宁","comment_id":383164,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，您回复 “福杯满溢” 同学时提到，“int在64位平台上就是64位的”\n\n但是我记得在 C 语言中，int 数据类型的大小和操作系统位数，与编译器实现有关，大多数情况下，无论是 32 位还是 64 位的操作系统，一个 int 类型的变量占用 32 位\n\n在 Go 语言中，int 数据类型和平台相关吗？在 32 位系统中，int == int32；在 64 位系统中， int == int64，是这样吗？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630586,"discussion_content":"对，int是架构有关的数值类型，在 32 位系统中，int是4字节的，即32bit；在 64 位系统中， int是8字节的，即64bit。\n\n而int64这种就是架构无关的类型，无论32位系统，还是64位系统，int64都是64bit的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698678312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378791,"user_name":"谢小路","can_delete":false,"product_type":"c1","uid":1035064,"ip_address":"广东","ucode":"C9FE2EB10DC105","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","comment_is_top":false,"comment_ctime":1690793913,"is_pvip":false,"replies":[{"id":138034,"content":"能理解:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1690856936,"ip_address":"北京","comment_id":378791,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"像这些东西，知道的人就会参考着写， 不知道的人，就各种随意，面向功能开发，又不是不能用。\n\n知道的人和不知道的人打交道或者维护同一个服务，就巨痛苦。\n\n和他提出来，他还满脸问号，以为我挑他刺。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624690,"discussion_content":"能理解:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690856936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375554,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685616815,"is_pvip":false,"replies":[{"id":137082,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685668441,"ip_address":"北京","comment_id":375554,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"类型是放在变量名的后面应该是为了便于理解，并且这个变量类型很多情况是可以省略的。\n","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619964,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685668441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349642,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656170956,"is_pvip":false,"replies":[{"id":127282,"content":"习惯了就好了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656309029,"ip_address":"","comment_id":349642,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"看起来弊大于利 刚开始学的时候这种声明方式也太变扭了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577715,"discussion_content":"习惯了就好了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656309029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347233,"user_name":"nero","can_delete":false,"product_type":"c1","uid":1303781,"ip_address":"","ucode":"8A47300CF0F0EB","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/e5/02f12125.jpg","comment_is_top":false,"comment_ctime":1653832420,"is_pvip":false,"replies":[{"id":126636,"content":"嗯，0的浮点型表示形式就是0.0。它们的位模式是一致的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653897688,"ip_address":"","comment_id":347233,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，浮点类型的默认值是 0","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574200,"discussion_content":"嗯，0的浮点型表示形式就是0.0。它们的位模式是一致的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653897688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341782,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1649831840,"is_pvip":true,"replies":[{"id":124908,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649914627,"ip_address":"","comment_id":341782,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"在 Go 语言变量声明中，类型是放在变量名的后面的，一方面符合人的思维习惯，通常是先想到什么变量，再考虑这个变量是什么类型；另一方面，应该是对于指针这些复杂类型便于理解。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562955,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649914628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335672,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1645621916,"is_pvip":false,"replies":[{"id":122714,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645715818,"ip_address":"","comment_id":335672,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"打卡，文章和评论看完。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553112,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645715818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319665,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1635905130,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"为了不一样而不一样？必要的写在最前面，不必要的可以省略的写在后面？","like_count":8},{"had_liked":false,"id":324312,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1959590,"ip_address":"","ucode":"66DCE50B651D9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLicmwbwabg3D7F6EzMqG2icjafTYjvyttclVowmiaZOFM7v6RHZua5icClXicc78LFSToQd8cN68xgytQ/132","comment_is_top":false,"comment_ctime":1638367257,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师最后还贴图了 太感动了","like_count":4},{"had_liked":false,"id":319783,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635938886,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"短短的几行代码没看懂……","like_count":4},{"had_liked":false,"id":319786,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1635940267,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"从源头开始讲，这一讲很好，知所以然。","like_count":3},{"had_liked":false,"id":319716,"user_name":"大大～喜羊羊","can_delete":false,"product_type":"c1","uid":2447389,"ip_address":"","ucode":"D4042B0809E54A","user_header":"https://static001.geekbang.org/account/avatar/00/25/58/1d/a1bc441a.jpg","comment_is_top":false,"comment_ctime":1635920914,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"这么多声明语法确实有选择恐惧症了，就是不知道随心所欲地去声明变量后面会不会给自己挖坑","like_count":3},{"had_liked":false,"id":319639,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1635898259,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"好处就是省略方便","like_count":2},{"had_liked":false,"id":319828,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1635955518,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":6,"product_id":100093501,"comment_content":"go的变量声明，方式还是挺灵活的。\n把类型放在变量名后面，大概是更方便清晰的说明吧，毕竟前面已经有var关键字了~","like_count":1,"discussions":[{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411751,"discussion_content":"你得具体把没有看懂的代码贴出来，这样老师和同学们就有可能帮到你呀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635993681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319783,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635938886,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"短短的几行代码没看懂……","like_count":4,"discussions":[{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411751,"discussion_content":"你得具体把没有看懂的代码贴出来，这样老师和同学们就有可能帮到你呀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635993681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319786,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1635940267,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"从源头开始讲，这一讲很好，知所以然。","like_count":3},{"had_liked":false,"id":319716,"user_name":"大大～喜羊羊","can_delete":false,"product_type":"c1","uid":2447389,"ip_address":"","ucode":"D4042B0809E54A","user_header":"https://static001.geekbang.org/account/avatar/00/25/58/1d/a1bc441a.jpg","comment_is_top":false,"comment_ctime":1635920914,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"这么多声明语法确实有选择恐惧症了，就是不知道随心所欲地去声明变量后面会不会给自己挖坑","like_count":3},{"had_liked":false,"id":319639,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1635898259,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"好处就是省略方便","like_count":2},{"had_liked":false,"id":319828,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1635955518,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":6,"product_id":100093501,"comment_content":"go的变量声明，方式还是挺灵活的。\n把类型放在变量名后面，大概是更方便清晰的说明吧，毕竟前面已经有var关键字了~","like_count":1}]}