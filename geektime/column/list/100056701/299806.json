{"id":299806,"title":"29 | 无锁的原子操作：Redis如何应对并发访问？","content":"<p>你好，我是蒋德钧。</p><p>我们在使用Redis时，不可避免地会遇到并发访问的问题，比如说如果多个用户同时下单，就会对缓存在Redis中的商品库存并发更新。一旦有了并发写操作，数据就会被修改，如果我们没有对并发写请求做好控制，就可能导致数据被改错，影响到业务的正常使用（例如库存数据错误，导致下单异常）。</p><p>为了保证并发访问的正确性，Redis提供了两种方法，分别是加锁和原子操作。</p><p>加锁是一种常用的方法，在读取数据前，客户端需要先获得锁，否则就无法进行操作。当一个客户端获得锁后，就会一直持有这把锁，直到客户端完成数据更新，才释放这把锁。</p><p>看上去好像是一种很好的方案，但是，其实这里会有两个问题：一个是，如果加锁操作多，会降低系统的并发访问性能；第二个是，Redis客户端要加锁时，需要用到分布式锁，而分布式锁实现复杂，需要用额外的存储系统来提供加解锁操作，我会在下节课向你介绍。</p><p><strong>原子操作是另一种提供并发访问控制的方法</strong>。原子操作是指执行过程保持原子性的操作，而且原子操作执行时并不需要再加锁，实现了无锁操作。这样一来，既能保证并发控制，还能减少对系统并发性能的影响。</p><p>这节课，我就来和你聊聊Redis中的原子操作。原子操作的目标是实现并发访问控制，那么当有并发访问请求时，我们具体需要控制什么呢？接下来，我就先向你介绍下并发控制的内容。</p><!-- [[[read_end]]] --><h2>并发访问中需要对什么进行控制？</h2><p>我们说的并发访问控制，是指对多个客户端访问操作同一份数据的过程进行控制，以保证任何一个客户端发送的操作在Redis实例上执行时具有互斥性。例如，客户端A的访问操作在执行时，客户端B的操作不能执行，需要等到A的操作结束后，才能执行。</p><p>并发访问控制对应的操作主要是数据修改操作。当客户端需要修改数据时，基本流程分成两步：</p><ol>\n<li>客户端先把数据读取到本地，在本地进行修改；</li>\n<li>客户端修改完数据后，再写回Redis。</li>\n</ol><p>我们把这个流程叫做“读取-修改-写回”操作（Read-Modify-Write，简称为RMW操作）。当有多个客户端对同一份数据执行RMW操作的话，我们就需要让RMW操作涉及的代码以原子性方式执行。访问同一份数据的RMW操作代码，就叫做临界区代码。</p><p>不过，当有多个客户端并发执行临界区代码时，就会存在一些潜在问题，接下来，我用一个多客户端更新商品库存的例子来解释一下。</p><p>我们先看下临界区代码。假设客户端要对商品库存执行扣减1的操作，伪代码如下所示：</p><pre><code>current = GET(id)\ncurrent--\nSET(id, current)\n</code></pre><p>可以看到，客户端首先会根据商品id，从Redis中读取商品当前的库存值current（对应Read)，然后，客户端对库存值减1（对应Modify），再把库存值写回Redis（对应Write）。当有多个客户端执行这段代码时，这就是一份临界区代码。</p><p>如果我们对临界区代码的执行没有控制机制，就会出现数据更新错误。在刚才的例子中，假设现在有两个客户端A和B，同时执行刚才的临界区代码，就会出现错误，你可以看下下面这张图。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/5c/dce821cd00c1937b4aab1f130424335c.jpg?wh=2925*1801\" alt=\"\"></p><p>可以看到，客户端A在t1时读取库存值10并扣减1，在t2时，客户端A还没有把扣减后的库存值9写回Redis，而在此时，客户端B读到库存值10，也扣减了1，B记录的库存值也为9了。等到t3时，A往Redis写回了库存值9，而到t4时，B也写回了库存值9。</p><p>如果按正确的逻辑处理，客户端A和B对库存值各做了一次扣减，库存值应该为8。所以，这里的库存值明显更新错了。</p><p>出现这个现象的原因是，临界区代码中的客户端读取数据、更新数据、再写回数据涉及了三个操作，而这三个操作在执行时并不具有互斥性，多个客户端基于相同的初始值进行修改，而不是基于前一个客户端修改后的值再修改。</p><p>为了保证数据并发修改的正确性，我们可以用锁把并行操作变成串行操作，串行操作就具有互斥性。一个客户端持有锁后，其他客户端只能等到锁释放，才能拿锁再进行修改。</p><p>下面的伪代码显示了使用锁来控制临界区代码的执行情况，你可以看下。</p><pre><code>LOCK()\ncurrent = GET(id)\ncurrent--\nSET(id, current)\nUNLOCK()\n</code></pre><p>虽然加锁保证了互斥性，但是<strong>加锁也会导致系统并发性能降低</strong>。</p><p>如下图所示，当客户端A加锁执行操作时，客户端B、C就需要等待。A释放锁后，假设B拿到锁，那么C还需要继续等待，所以，t1时段内只有A能访问共享数据，t2时段内只有B能访问共享数据，系统的并发性能当然就下降了。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/25/845b4694700264482d64a3dbb7a36525.jpg?wh=2620*1414\" alt=\"\"></p><p>和加锁类似，原子操作也能实现并发控制，但是原子操作对系统并发性能的影响较小，接下来，我们就来了解下Redis中的原子操作。</p><h2>Redis的两种原子操作方法</h2><p>为了实现并发控制要求的临界区代码互斥执行，Redis的原子操作采用了两种方法：</p><ol>\n<li>把多个操作在Redis中实现成一个操作，也就是单命令操作；</li>\n<li>把多个操作写到一个Lua脚本中，以原子性方式执行单个Lua脚本。</li>\n</ol><p>我们先来看下Redis本身的单命令操作。</p><p>Redis是使用单线程来串行处理客户端的请求操作命令的，所以，当Redis执行某个命令操作时，其他命令是无法执行的，这相当于命令操作是互斥执行的。当然，Redis的快照生成、AOF重写这些操作，可以使用后台线程或者是子进程执行，也就是和主线程的操作并行执行。不过，这些操作只是读取数据，不会修改数据，所以，我们并不需要对它们做并发控制。</p><p>你可能也注意到了，虽然Redis的单个命令操作可以原子性地执行，但是在实际应用中，数据修改时可能包含多个操作，至少包括读数据、数据增减、写回数据三个操作，这显然就不是单个命令操作了，那该怎么办呢？</p><p>别担心，Redis提供了INCR/DECR命令，把这三个操作转变为一个原子操作了。INCR/DECR命令可以对数据进行<strong>增值/减值</strong>操作，而且它们本身就是单个命令操作，Redis在执行它们时，本身就具有互斥性。</p><p>比如说，在刚才的库存扣减例子中，客户端可以使用下面的代码，直接完成对商品id的库存值减1操作。即使有多个客户端执行下面的代码，也不用担心出现库存值扣减错误的问题。</p><pre><code>DECR id \n</code></pre><p>所以，如果我们执行的RMW操作是对数据进行增减值的话，Redis提供的原子操作INCR和DECR可以直接帮助我们进行并发控制。</p><p>但是，如果我们要执行的操作不是简单地增减数据，而是有更加复杂的判断逻辑或者是其他操作，那么，Redis的单命令操作已经无法保证多个操作的互斥执行了。所以，这个时候，我们需要使用第二个方法，也就是Lua脚本。</p><p>Redis会把整个Lua脚本作为一个整体执行，在执行的过程中不会被其他命令打断，从而保证了Lua脚本中操作的原子性。如果我们有多个操作要执行，但是又无法用INCR/DECR这种命令操作来实现，就可以把这些要执行的操作编写到一个Lua脚本中。然后，我们可以使用Redis的EVAL命令来执行脚本。这样一来，这些操作在执行时就具有了互斥性。</p><p>我再给你举个例子，来具体解释下Lua的使用。</p><p>当一个业务应用的访问用户增加时，我们有时需要限制某个客户端在一定时间范围内的访问次数，比如爆款商品的购买限流、社交网络中的每分钟点赞次数限制等。</p><p>那该怎么限制呢？我们可以把客户端IP作为key，把客户端的访问次数作为value，保存到Redis中。客户端每访问一次后，我们就用INCR增加访问次数。</p><p>不过，在这种场景下，客户端限流其实同时包含了对访问次数和时间范围的限制，例如每分钟的访问次数不能超过20。所以，我们可以在客户端第一次访问时，给对应键值对设置过期时间，例如设置为60s后过期。同时，在客户端每次访问时，我们读取客户端当前的访问次数，如果次数超过阈值，就报错，限制客户端再次访问。你可以看下下面的这段代码，它实现了对客户端每分钟访问次数不超过20次的限制。</p><pre><code>//获取ip对应的访问次数\ncurrent = GET(ip)\n//如果超过访问次数超过20次，则报错\nIF current != NULL AND current &gt; 20 THEN\n    ERROR &quot;exceed 20 accesses per second&quot;\nELSE\n    //如果访问次数不足20次，增加一次访问计数\n    value = INCR(ip)\n    //如果是第一次访问，将键值对的过期时间设置为60s后\n    IF value == 1 THEN\n        EXPIRE(ip,60)\n    END\n    //执行其他操作\n    DO THINGS\nEND\n</code></pre><p>可以看到，在这个例子中，我们已经使用了INCR来原子性地增加计数。但是，客户端限流的逻辑不只有计数，还包括<strong>访问次数判断和过期时间设置</strong>。</p><p>对于这些操作，我们同样需要保证它们的原子性。否则，如果客户端使用多线程访问，访问次数初始值为0，第一个线程执行了INCR(ip)操作后，第二个线程紧接着也执行了INCR(ip)，此时，ip对应的访问次数就被增加到了2，我们就无法再对这个ip设置过期时间了。这样就会导致，这个ip对应的客户端访问次数达到20次之后，就无法再进行访问了。即使过了60s，也不能再继续访问，显然不符合业务要求。</p><p>所以，这个例子中的操作无法用Redis单个命令来实现，此时，我们就可以使用Lua脚本来保证并发控制。我们可以把访问次数加1、判断访问次数是否为1，以及设置过期时间这三个操作写入一个Lua脚本，如下所示：</p><pre><code>local current\ncurrent = redis.call(&quot;incr&quot;,KEYS[1])\nif tonumber(current) == 1 then\n    redis.call(&quot;expire&quot;,KEYS[1],60)\nend\n</code></pre><p>假设我们编写的脚本名称为lua.script，我们接着就可以使用Redis客户端，带上eval选项，来执行该脚本。脚本所需的参数将通过以下命令中的keys和args进行传递。</p><pre><code>redis-cli  --eval lua.script  keys , args\n</code></pre><p>这样一来，访问次数加1、判断访问次数是否为1，以及设置过期时间这三个操作就可以原子性地执行了。即使客户端有多个线程同时执行这个脚本，Redis也会依次串行执行脚本代码，避免了并发操作带来的数据错误。</p><h2>小结</h2><p>在并发访问时，并发的RMW操作会导致数据错误，所以需要进行并发控制。所谓并发控制，就是要保证临界区代码的互斥执行。</p><p>Redis提供了两种原子操作的方法来实现并发控制，分别是单命令操作和Lua脚本。因为原子操作本身不会对太多的资源限制访问，可以维持较高的系统并发性能。</p><p>但是，单命令原子操作的适用范围较小，并不是所有的RMW操作都能转变成单命令的原子操作（例如INCR/DECR命令只能在读取数据后做原子增减），当我们需要对读取的数据做更多判断，或者是我们对数据的修改不是简单的增减时，单命令操作就不适用了。</p><p>而Redis的Lua脚本可以包含多个操作，这些操作都会以原子性的方式执行，绕开了单命令操作的限制。不过，如果把很多操作都放在Lua脚本中原子执行，会导致Redis执行脚本的时间增加，同样也会降低Redis的并发性能。所以，我给你一个小建议：<strong>在编写Lua脚本时，你要避免把不<strong><strong>需要</strong></strong>做并发控制的操作写入脚本中</strong>。</p><p>当然，加锁也能实现临界区代码的互斥执行，只是如果有多个客户端加锁时，就需要分布式锁的支持了。所以，下节课，我就来和你聊聊分布式锁的实现。</p><h2>每课一问</h2><p>按照惯例，我向你提个小问题，Redis在执行Lua脚本时，是可以保证原子性的，那么，在我举的Lua脚本例子（lua.script）中，你觉得是否需要把读取客户端ip的访问次数，也就是GET(ip)，以及判断访问次数是否超过20的判断逻辑，也加到Lua脚本中吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","comments":[{"had_liked":false,"id":256519,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1603646721,"is_pvip":true,"discussion_count":35,"race_medal":0,"score":"1234259260673","product_id":100056701,"comment_content":"是否需要把读取客户端 ip 的访问次数 GET(ip)，以及判断访问次数是否超过 20 的判断逻辑，也加到 Lua 脚本中？<br><br>我觉得不需要，理由主要有2个。<br><br>1、这2个逻辑都是读操作，不会对资源临界区产生修改，所以不需要做并发控制。<br><br>2、减少 lua 脚本中的命令，可以降低Redis执行脚本的时间，避免阻塞 Redis。<br><br>另外使用lua脚本时，还有一些注意点：<br><br>1、lua 脚本尽量只编写通用的逻辑代码，避免直接写死变量。变量通过外部调用方传递进来，这样 lua 脚本的可复用度更高。<br><br>2、建议先使用SCRIPT LOAD命令把 lua 脚本加载到 Redis 中，然后得到一个脚本唯一摘要值，再通过EVALSHA命令 + 脚本摘要值来执行脚本，这样可以避免每次发送脚本内容到 Redis，减少网络开销。","like_count":288,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318214,"discussion_content":"我可能描述的不是很准确，这里再详细说一下。\n\n文章中的限流问题，如果业务并发不是很大，可以不把读取客户端 ip 访问次数和判断次逻辑放在 lua 脚本中。如果客户端并发量很大，为了保证逻辑正确性，是需要把逻辑放到 lua 脚本中的。\n\n不把判断逻辑放到 lua 脚本中的处理流程如下：\n\n1、客户端先读取 ip 访问次数，然后判断次数是否过 20\n2、如果没超过 20，则执行lua脚本（增加次数、判断是否第一次访问、设置过期）\n3、如果超过 20，业务直接返回错误，不执行后续流程\n\n如果并发程度不高，当访问次数超过 20 时，基本都会走到步骤3。\n\n不过有一种情况会导致客户端访问次数超过 20，例如超过 20 个线程并发访问，都走到了步骤1，然后客户端都认为次数没有超过限制，之后都执行了步骤2，进入后续业务流程。在这种情况下，访问次数会超过 20，但下次再有线程请求进来时，会直接走到步骤3后返回。\n\n这种方案会存在少量请求没有限制住的情况，但是我们平时业务遇到这种持续性并发的场景并不多，所以采用这种方案对业务的影响不大。而且不把判断逻辑放在 lua 脚本中，这样做另外的好处是，可以减少脚本执行的时间，从而降低 Redis 阻塞时间。\n\n但是，如果发生了极端情况（例如恶意请求），并发量很大，并发数经常远超过 20，那么最好还是把读取次数和判断次数的逻辑放到 lua 脚本中，保证在服务端能够串行执行每个线程的操作。但这种方案的缺点是，会增加 Redis 阻塞时间，对系统性能有一定影响。","likes_number":37,"is_delete":false,"is_hidden":false,"ctime":1603680819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":11,"child_discussions":[{"author":{"id":1113937,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","nickname":"好运来","note":"","ucode":"F469ED6CEFEF30","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":320091,"discussion_content":"确实并发数超过20之后，存在超出预期少量请求没有限制住","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604239435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318214,"ip_address":""},"score":320091,"extra":""},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":324670,"discussion_content":"你这个描述还是有问题，并不需要20个线程并发访问，如果已经访问19次了，此时只要有2个并发就直接超了","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1605150366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318214,"ip_address":""},"score":324670,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":324677,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605151374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324670,"ip_address":""},"score":324677,"extra":""}]},{"author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318166,"discussion_content":"我觉得大于20应该要放入lua脚本吧。我知道读取数据不需要原子性控制，但是因为你在读取数据到客户端的时间里可能值就被修改了，对于一分钟20次访问的判断就有问题吧，这是我的想法，不知道哪里有问题。还有第二点注意点这个是要在服务器执行的吧，还是在客户端也可以操作？","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1603670875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1142526,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/fe/79955244.jpg","nickname":"LbbNiu","note":"","ucode":"AD0D05864C6913","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318182,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603673629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318166,"ip_address":""},"score":318182,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318216,"discussion_content":"你分析的有道理，我在评论里又详细分析了一下，可以看看。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603680871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318166,"ip_address":""},"score":318216,"extra":""},{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349168,"discussion_content":"先读再修改的话是会遇到访问量超了的情况，但先修改再读的话是不是就可以避免？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612946724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318166,"ip_address":""},"score":349168,"extra":""}]},{"author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318176,"discussion_content":"请教一下，lua脚本在数据分片集群使用有没有注意事项呢？比如访问的缓存数据不在一个分片上的情况会咋样？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603672838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":318219,"discussion_content":"不在一个分片上，会直接报错，这点也需要注意。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1603680976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318176,"ip_address":""},"score":318219,"extra":""},{"author":{"id":1253310,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/be/551454e0.jpg","nickname":"zxy","note":"","ucode":"FFAA3F6667305D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":572617,"discussion_content":"hash tag","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652871208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318176,"ip_address":""},"score":572617,"extra":""},{"author":{"id":2058852,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6a/64/3d4fccf8.jpg","nickname":"Z_Z","note":"","ucode":"654BE3F3C7DBA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253310,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/be/551454e0.jpg","nickname":"zxy","note":"","ucode":"FFAA3F6667305D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573078,"discussion_content":"好像有一章讲到在set key值中使用hash tag，比如{user:}就会把这类数据都放在同一个分片片区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653194739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572617,"ip_address":""},"score":573078,"extra":""}]},{"author":{"id":1434196,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e2/54/ccd36eda.jpg","nickname":"我爱学习","note":"","ucode":"8B850B794272C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341129,"discussion_content":"如果读操作就不需要原子性的话，那incr的设计目的是啥呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610324626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1822190,"avatar":"","nickname":"Geek_45f84a","note":"","ucode":"5CA117BDBE4FF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434196,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e2/54/ccd36eda.jpg","nickname":"我爱学习","note":"","ucode":"8B850B794272C5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377686,"discussion_content":"incr 还包括写，实质上是一个RMW操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622775670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341129,"ip_address":""},"score":377686,"extra":""}]},{"author":{"id":2063962,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/5a/da39f489.jpg","nickname":"Ethan New","note":"","ucode":"9CA2EF39E58030","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390353,"discussion_content":"“这2个逻辑都是读操作，不会对资源临界区产生修改，所以不需要做并发控制。”这句话不对，你不修改能管得了别人不修改？还是有并发问题的。只不过读取的值不精确，在这个场景中精确不精确没有什么问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629795076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2063962,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7e/5a/da39f489.jpg","nickname":"Ethan New","note":"","ucode":"9CA2EF39E58030","race_medal":4,"user_type":1,"is_pvip":true},"discussion":{"id":413628,"discussion_content":"是的，get(ip)操作即使读到别的线程修改后的值， 判断大于20返回了。 如果小于20， 则和其他线程互斥自增并设置过期时间。 这个例子应该是没问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636530074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390353,"ip_address":""},"score":413628,"extra":""},{"author":{"id":1749015,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","nickname":"加油！","note":"","ucode":"947E97762DB6EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540448,"discussion_content":"但是不能精确控制20次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640059351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":413628,"ip_address":""},"score":540448,"extra":""}]},{"author":{"id":2310617,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZGbq9QcsysWhYJvIXaZ0S9llXDVicF0Tvm2ibgGehHCPYWxHzZ2Z34SVOyIOKkH44qPFCANBbib2iawqrWU7azD3og/132","nickname":"Geek_750e24","note":"","ucode":"7C8D33FEEA47B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330260,"discussion_content":"有个疑问，INCR命令返回value不是原子操作么？ 就算两个线程执行了INCR命令，第一个线程的返回值难道不是1么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606551330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2310617,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZGbq9QcsysWhYJvIXaZ0S9llXDVicF0Tvm2ibgGehHCPYWxHzZ2Z34SVOyIOKkH44qPFCANBbib2iawqrWU7azD3og/132","nickname":"Geek_750e24","note":"","ucode":"7C8D33FEEA47B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330269,"discussion_content":"是的，用这种方式也是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606553327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330260,"ip_address":""},"score":330269,"extra":""},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2310617,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZGbq9QcsysWhYJvIXaZ0S9llXDVicF0Tvm2ibgGehHCPYWxHzZ2Z34SVOyIOKkH44qPFCANBbib2iawqrWU7azD3og/132","nickname":"Geek_750e24","note":"","ucode":"7C8D33FEEA47B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377067,"discussion_content":"感觉老师的示例，value 是全局变量，所以文章中的分析结论：expire 失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622476034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330260,"ip_address":""},"score":377067,"extra":""},{"author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2310617,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZGbq9QcsysWhYJvIXaZ0S9llXDVicF0Tvm2ibgGehHCPYWxHzZ2Z34SVOyIOKkH44qPFCANBbib2iawqrWU7azD3og/132","nickname":"Geek_750e24","note":"","ucode":"7C8D33FEEA47B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413019,"discussion_content":"value是全局变量的话，多线程操作的就是一块内存value值了，执行if之前就改成2.此时就不是1了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636361503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330260,"ip_address":""},"score":413019,"extra":""}]},{"author":{"id":1142526,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/fe/79955244.jpg","nickname":"LbbNiu","note":"","ucode":"AD0D05864C6913","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318183,"discussion_content":"如果不需要，怎么保证原子操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603673697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1142526,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/fe/79955244.jpg","nickname":"LbbNiu","note":"","ucode":"AD0D05864C6913","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":318217,"discussion_content":"我在评论下又详细分析了问题场景，可以看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603680905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318183,"ip_address":""},"score":318217,"extra":""}]}]},{"had_liked":false,"id":258532,"user_name":"Geek_fb6ea6","can_delete":false,"product_type":"c1","uid":2104979,"ip_address":"","ucode":"2B0FBBFD9E957A","user_header":"","comment_is_top":false,"comment_ctime":1604475971,"is_pvip":false,"replies":[{"id":"98023","content":"这里的并发是指有多个客户端同时访问Redis，而客户端执行的业务逻辑不只一个命令操作。假设客户端A要先从Redis读数据，然后做了修改把数据再写回Redis，此时，在读数据和写回数据的期间就可能有其他客户端的并发操作执行，所以仍然存在并发读写问题。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609082735,"ip_address":"","comment_id":258532,"utype":1}],"discussion_count":8,"race_medal":0,"score":"74618920003","product_id":100056701,"comment_content":"Redis不是单线程吗？怎么还会有并发读写的问题呢","like_count":17,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508683,"discussion_content":"这里的并发是指有多个客户端同时访问Redis，而客户端执行的业务逻辑不只一个命令操作。假设客户端A要先从Redis读数据，然后做了修改把数据再写回Redis，此时，在读数据和写回数据的期间就可能有其他客户端的并发操作执行，所以仍然存在并发读写问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609082735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1998387,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7e/33/b16f6c0a.jpg","nickname":"黄叶舞东风","note":"","ucode":"4E6F5C37819420","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542351,"discussion_content":"我上面说的A和B同时get不准确，由于是单进程的原因，应该是A和B先后GET，不过此时拿到的都是10，不影响后面的描述","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640738756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1998387,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7e/33/b16f6c0a.jpg","nickname":"黄叶舞东风","note":"","ucode":"4E6F5C37819420","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542349,"discussion_content":"比如现在有一组操作GET+SET, 这两个操作对应着两个到redis server的 TCP连接，请求A和B同时过来，A和B同时get，然后比如得到结果10，此时10是放到了调用方的内存里，然后A和B各调用一次SET(比如都+1)，此时A和B的操作都是set(key,11), A和B的SET的tcp连接到redis后，会被顺序执行(单进程)，也就被设置了两个11, 对于我们来说，应该是一个设置11，一个设置12才对。所以需要把这两个动作放到一个lua脚本里面，把整个脚本通过一个tcp连接发过去，由于redis单进程的特性，此时lua脚本就会被完整执行，在A的lua脚本中，先得到10，然后set成11，在B的脚本中，先得到11，然后set成12。对于我们来说，GET和SET就是原子的了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640738268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028954,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/9a/63dc81a2.jpg","nickname":"Geek1185","note":"","ucode":"47BEE492EF4C1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389551,"discussion_content":"单线程只保证了单操作的原子性。类似于volatile","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629336310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376681,"discussion_content":"客户端A读数据、修改数据、写数据，中间的步骤存在其他客户端并发修改，导致错误发生","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622276358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415241,"discussion_content":"即便中间步骤存在并发，对于Redis来说，仍然是在服务A结束后，才能服务 B。对于 Redis 来说，并不会存在并发问题。此处的错误指的是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637034212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376681,"ip_address":""},"score":415241,"extra":""},{"author":{"id":2924014,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/9d/ee/a58e330a.jpg","nickname":"刘越阳","note":"","ucode":"FC3EE6E01D8C92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":553072,"discussion_content":"A读数据，修改数据，写数据又不是一个事务，中间完全可能穿插其他客户端的请求呀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645706635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":415241,"ip_address":""},"score":553072,"extra":""}]},{"author":{"id":1297375,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cb/df/e72646dd.jpg","nickname":"多喝热水","note":"","ucode":"8DB7DB144B7E30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333309,"discussion_content":"可能是多个连接导致的并发问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607499257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258001,"user_name":"好运来","can_delete":false,"product_type":"c1","uid":1113937,"ip_address":"","ucode":"F469ED6CEFEF30","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","comment_is_top":false,"comment_ctime":1604239378,"is_pvip":true,"discussion_count":7,"race_medal":1,"score":"74618683410","product_id":100056701,"comment_content":"“对于这些操作，我们同样需要保证它们的原子性。否则，如果客户端使用多线程访问，访问次数初始值为 0，第一个线程执行了 INCR(ip) 操作后，第二个线程紧接着也执行了 INCR(ip)，此时，ip 对应的访问次数就被增加到了 2，我们就无法再对这个 ip 设置过期时间了。这样就会导致，这个 ip 对应的客户端访问次数达到 20 次之后，就无法再进行访问了。即使过了 60s，也不能再继续访问，显然不符合业务要求。&quot;<br><br>对于这段话我有疑惑，假如有两个线程A和线程B，初始ip计数是0，线程A和线程B并发执行，不管线程A和线程B谁先执行到 value = INCR(ip) ，获取到的value值总会有一个是1，而value作为线程的局部变量，也是可以继续执行下去，那不就是能够执行到 IF value == 1 THEN        EXPIRE(ip,60)    END 这个判断逻辑了吗，不明白为什么说不能设置先到的ip过期时间60s了?<br><br><br><br>","like_count":17,"discussions":[{"author":{"id":1229875,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c4/33/1ffdbf6c.jpg","nickname":"phoenix","note":"","ucode":"036F265771459D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323539,"discussion_content":"即使存在并发，总会有一个线程返回1的，这个例子有问题。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1604967176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135901,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/1d/01777aef.jpg","nickname":"康熙","note":"","ucode":"09D80813A37D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569707,"discussion_content":"Incr是原子操作，两个并发请求同时执行这一行代码后，再执行判断语句时，条件已经不满足了，原因是incr的key是ip而非局部变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651534901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1993942,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/6c/d6/22360bd3.jpg","nickname":"海阔天空","note":"","ucode":"003AB0764CA7A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555902,"discussion_content":" 单独的INCR是原子操作，但value = INCR(ip)不是；可能两个线程都执行了INCR操作后，客户端才获取到返回值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647096379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2345422,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c9/ce/6d059da3.jpg","nickname":"灵石（请勿乱吃）","note":"","ucode":"81467807211055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407308,"discussion_content":"同没看懂，希望作者给个解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634975940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343306,"discussion_content":"你们可以看下文章的注释看是否合理，愿多多交流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610993179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1784022,"avatar":"","nickname":"pippin","note":"","ucode":"F7619FCE24D481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332665,"discussion_content":"下一章的问答区有答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607302588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110944,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f3/a0/5979d4a4.jpg","nickname":"祝","note":"","ucode":"34563625CA1206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320334,"discussion_content":"对啊，redis 单线程，总有一个返回 1 吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604322288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259395,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1604717820,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"61734259964","product_id":100056701,"comment_content":"获取访问次数和判断访问是否大于20，<br>若放到lua脚本中，获取到的访问次数是准确的最新值，进行判断更准确；<br>当放到lua脚本外，并发访问时某线程获取到的访问次数可能旧(偏小)，当获取到访问次数为19时(实际可能已经达到20了)，该线程仍然会对访问次数执行+1，所以应该放到lua中。","like_count":14,"discussions":[{"author":{"id":1749015,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","nickname":"加油！","note":"","ucode":"947E97762DB6EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540450,"discussion_content":"俺也是\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640059425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099321,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/39/0b837f63.jpg","nickname":"不過勝負","note":"","ucode":"A1CB36404DB884","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329410,"discussion_content":"我理解也是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606381037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1099321,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/39/0b837f63.jpg","nickname":"不過勝負","note":"","ucode":"A1CB36404DB884","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332196,"discussion_content":"俺也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607091180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329410,"ip_address":""},"score":332196,"extra":""}]}]},{"had_liked":false,"id":261359,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1605285735,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35965024103","product_id":100056701,"comment_content":"是否需要把读取客户端 ip 的访问次数 GET(ip)，以及判断访问次数是否超过 20 的判断逻辑，也加到 Lua 脚本中？<br><br>我觉得需要分3步来优化：<br>1.在执行lua之前，get(ip)，进行判断，如果大于20，就直接报错了，这样也就减少了执行lua的开销；<br>2.在执行lua时，判断incr（ip）的返回值，这个值是加一之后的值，直接判断这个值是否大于20，返回错误。<br>3.如果并发量特别大的时候，可以在incr前再判断一次get（ip），减少incr的开销。","like_count":8,"discussions":[{"author":{"id":1749015,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","nickname":"加油！","note":"","ucode":"947E97762DB6EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540455,"discussion_content":"这个解决方案就比较好了，也省去了get(ip)的开销。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640059784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257450,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1082187,"ip_address":"","ucode":"FC323371453C97","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/4b/0e96fcae.jpg","comment_is_top":false,"comment_ctime":1603974827,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"35963713195","product_id":100056701,"comment_content":"对于这些操作，我们同样需要保证它们的原子性。否则，如果客户端使用多线程访问，访问次数初始值为 0，第一个线程执行了 INCR(ip) 操作后，第二个线程紧接着也执行了 INCR(ip)，此时，ip 对应的访问次数就被增加到了 2，我们就无法再对这个 ip 设置过期时间了。这样就会导致，这个 ip 对应的客户端访问次数达到 20 次之后，就无法再进行访问了。即使过了 60s，也不能再继续访问，显然不符合业务要求。<br><br><br>不太明白为何过了 60 秒，也不能继续访问呢","like_count":8,"discussions":[{"author":{"id":2017580,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c9/2c/9ed40921.jpg","nickname":"BOB","note":"","ucode":"E86596709EAB1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346976,"discussion_content":"我没仔细看文中代码块的时候也有这个疑问，你看文稿中的代码块，是不是有一个 IF value == 1 的判断？所以如果 value 变成 2 的话，就不会走到这里设置 EXPIRE 了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612111161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/dc/37dac825.jpg","nickname":"阿豪","note":"","ucode":"AF3CB1CE262CEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535483,"discussion_content":"如果 value = INCR(ip) 中的 value 是局部变量，就总会有个线程设置 EXPIRE","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638449237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327990,"discussion_content":"原因：代码的意图是通过设置过期时间60s，键自动淘汰，来实现客户端可以再次访问的功能。现在由于无法设置过期时间，导致键不会自动淘汰。因此在判断到 键的值在大于20后，拒绝了客户端的访问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606037417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326528,"discussion_content":"串行执行顺序下，想象一下任何一个操作都可能在并发场景中被其他线程打断。那么这个时候value的值就能不是①了，就无法执行设置超时这个操作，那么这个key就不会过期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605613090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2120877,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/ad/3934e3cc.jpg","nickname":"新年快乐啊","note":"","ucode":"50811438BFAFA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320337,"discussion_content":"同问，我也是有点不明白。我的理解是，总有一个线程是第一个执行INCR(ip)的吧，这第一个执行的线程INCR就返回1，应该可以设置过期时间才是呀，有理解错么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604322799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274321,"user_name":"永不止步","can_delete":false,"product_type":"c1","uid":1098221,"ip_address":"","ucode":"B5228B7EDF5921","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIY8df9yV6vQjOMxv5xym070hFT2GWYELpqBhxSicQoq5IqBx6teS1xJaomkOBeuzv4vkXRJfibqcMw/132","comment_is_top":false,"comment_ctime":1610964212,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"31675735284","product_id":100056701,"comment_content":"除了技术之外，我觉得那段代码的判断逻辑应该属于业务范畴，最好不要放lua中，因为业务是经常变化的，lua脚本最好与具体业务无关","like_count":7,"discussions":[{"author":{"id":1749015,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","nickname":"加油！","note":"","ucode":"947E97762DB6EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540454,"discussion_content":"那就需要业务代码做并发控制了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640059570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311122,"user_name":"郑印","can_delete":false,"product_type":"c1","uid":1005282,"ip_address":"","ucode":"181B0FDE5E1532","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/e2/2dcab30d.jpg","comment_is_top":false,"comment_ctime":1631081025,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18810950209","product_id":100056701,"comment_content":"感觉 “Redis 在执行 Lua 脚本时，是可以保证原子性的”  这句话有误导，当lua脚本中间有命令执行出错时，以执行的命令还是生效了的，这样不能完全称之为原子性。redis只是通过lua脚本让一组命令想一个命令一样执行在加上单线程的特性避免了并发产生的问题，而不能称之为原子性。","like_count":4,"discussions":[{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576398,"discussion_content":"这里的原子性指的是原子操作，并不是事务的原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655519134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413023,"discussion_content":"是的，这个描述是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636361927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292669,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIaaDFHiag4sFcO7JUn028Mtk1YvFpibIibLzcTE7Qak0icJklMpqh7k5dSK27dibicMuNgYMozgaibeYppA/132","nickname":"Bball","note":"","ucode":"E483CAFE50CB99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412681,"discussion_content":"同意，Lua是串行执行，不保证原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636253667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277072,"user_name":"huiye","can_delete":false,"product_type":"c1","uid":2225782,"ip_address":"","ucode":"8B57DE0F3C92E6","user_header":"https://static001.geekbang.org/account/avatar/00/21/f6/76/f7666f76.jpg","comment_is_top":false,"comment_ctime":1612253043,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14497154931","product_id":100056701,"comment_content":"除了把多个操作在 Redis 中实现成一个操作，和使用lua脚本，使用redis的事务，把多个命令放入队列里一起执行，是不是也能保证原子性呢","like_count":3,"discussions":[{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352622,"discussion_content":"原理是一样的，放在队列额外消耗性能，官网有提供pipeline,具体可以参考https://blog.csdn.net/u013870094/article/details/82461527","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614781732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257412,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1603962914,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"14488864802","product_id":100056701,"comment_content":"思考题<br>思考题：是否需要把读取客户端 ip 的访问次数，也就是 GET(ip)，以及判断访问次数是否超过 20 的判断逻辑，也加到 Lua 脚本中吗？<br>我觉得不需要将其添加到 Lua 脚本中，理由如下：<br>1.获取客户端 ip 的访问次数和判断访问次数是否超过 20 并没有进行 R-M-W 操作即这个代码没有操作临界区代码，所以不会有并发问题<br>2.因为如果把更多操作加到 Lua 脚本中，会导致 Redis 执行 Lua 脚本的时间增加，会降低 Redis 的并发性能，建议就是在编写 Lua 脚本中，要避免添加不需要做并发控制的代码<br><br>补充<br>上面的 Lua 脚本中有一个是判断次数是否为 1，按道理这个操作也是读操作，没有操作临界区的代码，为何要把它加到 Lua 脚本中呢？<br>这个是因为客户端 ip 的访问次数 +1 和 判断是否等于 1 ，和后面的设置过期时间，是一个最小的逻辑单元，这个判断会影响到后面过期时间的设，所以这个读操作要加入到 Lua 脚本中","like_count":3},{"had_liked":false,"id":256624,"user_name":"泠小墨","can_delete":false,"product_type":"c1","uid":1178634,"ip_address":"","ucode":"73D296D9F42911","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/0a/0c4b9170.jpg","comment_is_top":false,"comment_ctime":1603692520,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14488594408","product_id":100056701,"comment_content":"关于最后的问题，我觉得可以不判断访问次数，前提稍微修改下lua脚本，将current的值返回给客户端，这样客户端可以根据返回值进行处理；<br>local current <br>current = redis.call(&#39;incr&#39;,KEYS[1]) <br>if tonumber(current)==1 then redis.call(&#39;expire&#39;,KEYS[1],60) <br>end  <br>return current","like_count":3,"discussions":[{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318617,"discussion_content":"极端场景下还会有问题吧,多个线程同时拿到访问次数为20","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603791144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1622022,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia6zEsh2u119zJicmq7wApvnricZEKiawaZicice1cOzujWdFicFwPtavlHiaVpCNgCpxBtdl7ynd3y0wkQ/132","nickname":"james_xu","note":"","ucode":"12E50291F5BA89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362963,"discussion_content":"多个lua脚本会串行执行，不会有多个线程拿到20的吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617080707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318617,"ip_address":""},"score":362963,"extra":""},{"author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1622022,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia6zEsh2u119zJicmq7wApvnricZEKiawaZicice1cOzujWdFicFwPtavlHiaVpCNgCpxBtdl7ynd3y0wkQ/132","nickname":"james_xu","note":"","ucode":"12E50291F5BA89","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413022,"discussion_content":"Redis先执行的多个读，然后再执行写不就有问题了么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636361891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362963,"ip_address":""},"score":413022,"extra":""},{"author":{"id":2436755,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2e/93/81e3e4ca.jpg","nickname":"ฅSlekฅ","note":"","ucode":"B732C672B3D301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558797,"discussion_content":"多个线程读操作导致拿到的都是20也没事，因为最终都是串行地执行lua。执行lua的时候依旧会判断current值的大小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648469669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318617,"ip_address":""},"score":558797,"extra":""}]}]},{"had_liked":false,"id":320698,"user_name":"James_Shangguan","can_delete":false,"product_type":"c1","uid":1262808,"ip_address":"","ucode":"F5855BC008DDEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/d8/1a1761f9.jpg","comment_is_top":false,"comment_ctime":1636459335,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10226393927","product_id":100056701,"comment_content":"不需要加到Lua脚本里面。并发编程思想里面，降低锁的粒度，提高并发的性能。","like_count":2,"discussions":[{"author":{"id":2649276,"avatar":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","nickname":"Leo","note":"","ucode":"CEBAD9CDCFC2A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561280,"discussion_content":"需要的，如果不妨的话会超20次的访问限制；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649592671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277991,"user_name":"Geek_89e362","can_delete":false,"product_type":"c1","uid":2308075,"ip_address":"","ucode":"E596C2CFE1CFAF","user_header":"","comment_is_top":false,"comment_ctime":1612691620,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10202626212","product_id":100056701,"comment_content":"我感觉需要，比如当前 count 为19 ，但是并发上来三个请求，调用get获取的都是19，小于20，那么访问的次数可能就会超过20了。","like_count":2,"discussions":[{"author":{"id":1566642,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e7/b2/4cb8356a.jpg","nickname":"小甲鱼","note":"","ucode":"DDF8A3A4976681","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352389,"discussion_content":"是的，所以如果并发上来了，这个写到Lua中还是保险一点的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614699324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264623,"user_name":"Geek_750e24","can_delete":false,"product_type":"c1","uid":2310617,"ip_address":"","ucode":"7C8D33FEEA47B0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZGbq9QcsysWhYJvIXaZ0S9llXDVicF0Tvm2ibgGehHCPYWxHzZ2Z34SVOyIOKkH44qPFCANBbib2iawqrWU7azD3og/132","comment_is_top":false,"comment_ctime":1606551176,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10196485768","product_id":100056701,"comment_content":"  value = INCR(ip)    &#47;&#47;如果是第一次访问，将键值对的过期时间设置为60s后  <br>  IF value == 1 <br>  THEN       <br>  EXPIRE(ip,60)    <br>END<br>执行 INCR命令返回value不是原子操作么？就算两个线程执行了INCR，第一个线程返回的不是1么？","like_count":2,"discussions":[{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377069,"discussion_content":"老师应该将 value 考虑为全局变量了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622476339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256553,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1603676414,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10193611006","product_id":100056701,"comment_content":"我觉得get(ip)可以不需要，因为incr已经可以返回当前访问次数，current值大于20的时候，直接返回客户端加锁失败。但是判断是否超过20次逻辑，应该要加到lua脚本中，不然没法保证对控制次数的原子性","like_count":2},{"had_liked":false,"id":256538,"user_name":"冯传博","can_delete":false,"product_type":"c1","uid":1177787,"ip_address":"","ucode":"91B9A1EF0FF042","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/bb/8b2ba45d.jpg","comment_is_top":false,"comment_ctime":1603672866,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10193607458","product_id":100056701,"comment_content":"对于这些操作，我们同样需要保证它们的原子性。否则，如果客户端使用多线程访问，访问次数初始值为 0，第一个线程执行了 INCR(ip) 操作后，第二个线程紧接着也执行了 INCR(ip)，此时，ip 对应的访问次数就被增加到了 2，我们就无法再对这个 ip 设置过期时间了。这样就会导致，这个 ip 对应的客户端访问次数达到 20 次之后，就无法再进行访问了。即使过了 60s，也不能再继续访问，显然不符合业务要求。<br><br><br>如果第一个线程正常执行，是能够给ip设置过期时间的，也就能够满足业务。出现没有设置过期时间的情景，是线程一在设置过期时间之前退出了。<br><br>这段代码还有个问题是，在高并发的时候20次的访问限制可能会被击穿，也就是访问次数能够超过20次。<br><br>不知理解是否争取，请老师指教","like_count":2,"discussions":[{"author":{"id":1221628,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","nickname":"ly","note":"","ucode":"5E2B85252DABF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370599,"discussion_content":"incr是原子操作，多线程下每个线程的返回值都是不一样的，也就是有个线程肯定会得到1这个值，如果current是全局变量可能就有问题。  吐槽一下：这个专栏信息量还是很大，就是评论区的疑问老师都不出来回答，和mysql专栏比起来确实有相当的落差感。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619482857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098221,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIY8df9yV6vQjOMxv5xym070hFT2GWYELpqBhxSicQoq5IqBx6teS1xJaomkOBeuzv4vkXRJfibqcMw/132","nickname":"永不止步","note":"","ucode":"B5228B7EDF5921","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343176,"discussion_content":"这段代码就是个示例，作者要表达的是多操作的原子性，不必太过纠结这里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610962001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1774561,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/13/e1/5b02e391.jpg","nickname":"lafjkdlsfdk","note":"","ucode":"95C45C8ABB1485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321892,"discussion_content":"说的有道理，有些地方，这老师都讲的不清不楚的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604646221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290369,"user_name":"老大不小","can_delete":false,"product_type":"c1","uid":1295609,"ip_address":"","ucode":"35BCDD3CB13467","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","comment_is_top":false,"comment_ctime":1619516817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5914484113","product_id":100056701,"comment_content":"之前文章里不是有讲另外一种方式——MULTI和EXEC吗？这种是不是可以实现lua脚本一样的功能？","like_count":1},{"had_liked":false,"id":256864,"user_name":"郭嵩阳","can_delete":false,"product_type":"c1","uid":1080998,"ip_address":"","ucode":"9DC42C7B73F580","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/a6/188817b6.jpg","comment_is_top":false,"comment_ctime":1603767913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5898735209","product_id":100056701,"comment_content":"想问下老师,你们在开发项目中是否，经常使用lua脚本.或者是否建议经常去使用lua脚本,个人觉得lua脚本维护不是很方便，相听一下老师的意见","like_count":1},{"had_liked":false,"id":359473,"user_name":"beifengzhishen001","can_delete":false,"product_type":"c1","uid":2109853,"ip_address":"重庆","ucode":"77D42B7DD9E754","user_header":"","comment_is_top":false,"comment_ctime":1665563881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665563881","product_id":100056701,"comment_content":"multi&#47;exec执行的组合语句，假设所有语句都没有发生错误，算不算原子操作呢？考虑到redis执行客户端请求都是并行操作，看到第31节的内容后，回过头来看本节有了这个疑问。","like_count":0},{"had_liked":false,"id":341419,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2649276,"ip_address":"","ucode":"CEBAD9CDCFC2A3","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","comment_is_top":false,"comment_ctime":1649592151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649592151","product_id":100056701,"comment_content":"为什么不在一个lua脚本内可以做到如下几点：<br>1. 判断改ip是否第一次访问，是的话设置过期时间60秒，同时该ip访问次数+1;<br>2. 如果不是第一次，且访问次数小于20，那么则在当前次数上+1；<br>3.如果当前次数大于等于20直接返回错误，不进行后续逻辑；<br>这样所有操作都通过lua脚本实现原子性，更能保证准确及并发性；为什么文章中没有这种方式","like_count":0},{"had_liked":false,"id":341417,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2649276,"ip_address":"","ucode":"CEBAD9CDCFC2A3","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","comment_is_top":false,"comment_ctime":1649591505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649591505","product_id":100056701,"comment_content":"这种读取方式和塞入方式在高并发的情况下一定会超过20，因为读取和增加值这两个动作不是一个完整的原子性操作；那么必定会产生两个线程都读取次数为19，然后两个线程都加1超过20次的情况；","like_count":0},{"had_liked":false,"id":340052,"user_name":"张潇赟","can_delete":false,"product_type":"c1","uid":1132192,"ip_address":"","ucode":"1A45B57F9E0723","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","comment_is_top":false,"comment_ctime":1648555875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648555875","product_id":100056701,"comment_content":"老师说的场景是限流，所以我理解如果多几次访问应该是问题不大的。所以可以将get 和比较放在lua脚本外执行。这样尽可能的降低lua脚本的成本","like_count":0},{"had_liked":false,"id":336263,"user_name":"woJA1wCgAAhIGt04eEHVRfOeioAo1Eng","can_delete":false,"product_type":"c1","uid":2921031,"ip_address":"","ucode":"59FA0B04617F5C","user_header":"","comment_is_top":false,"comment_ctime":1646040240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646040240","product_id":100056701,"comment_content":"相当于把客户端多线程可能产生的并发交给redis单线程模型来解决，但是同时将redis短暂阻塞作为代价交换。不知道这个理解对不对","like_count":0},{"had_liked":false,"id":336256,"user_name":"woJA1wCgAAhIGt04eEHVRfOeioAo1Eng","can_delete":false,"product_type":"c1","uid":2921031,"ip_address":"","ucode":"59FA0B04617F5C","user_header":"","comment_is_top":false,"comment_ctime":1646039115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646039115","product_id":100056701,"comment_content":"感谢老师的这篇文章，读完才明白原子操作和lua脚本如何实现客户端对redis的并发访问。觉得如果对这点不太清楚的同学可以返回结合本片和redis的单线程模型那一篇看一下可能会更清晰。","like_count":0},{"had_liked":false,"id":331844,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1642825029,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642825029","product_id":100056701,"comment_content":"业务场景不要求特别精确的话，不需要原子并发<br>基本逻辑获取key，不存在设置下key及超时时间，存在就加下放回去","like_count":0},{"had_liked":false,"id":321230,"user_name":"adrian_xia","can_delete":false,"product_type":"c1","uid":1101454,"ip_address":"","ucode":"957C329EAFD31C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/8e/204736bb.jpg","comment_is_top":false,"comment_ctime":1636718394,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636718394","product_id":100056701,"comment_content":"可以增加双重的校验，首次先进行判断，若是小于20的话，则可以再lua脚本内再增加一次校验。","like_count":0},{"had_liked":false,"id":320470,"user_name":"瓜牛","can_delete":false,"product_type":"c1","uid":2273620,"ip_address":"","ucode":"5EB7D2F4400A70","user_header":"https://static001.geekbang.org/account/avatar/00/22/b1/54/6d663b95.jpg","comment_is_top":false,"comment_ctime":1636344974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636344974","product_id":100056701,"comment_content":"那段lua脚本里加过期时间是直接用的incr返回值==1进行判断的，incr是原子性的，为啥并发还会导致设置过期时间不成功？","like_count":0},{"had_liked":false,"id":308730,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1629773888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629773888","product_id":100056701,"comment_content":"上面已经说了,需要避免将不需要做并发控制的操作写入脚本中<br>所以不应该放进去<br>而且在上面incr的代码中,很明显,value是一个线程内的变量就行,设置为全局变量是一个编程上的纰漏","like_count":0},{"had_liked":false,"id":308597,"user_name":"意琦行","can_delete":false,"product_type":"c1","uid":1637619,"ip_address":"","ucode":"B940AA60B5CCEE","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/f3/28fe16cf.jpg","comment_is_top":false,"comment_ctime":1629695116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629695116","product_id":100056701,"comment_content":"在编写 Lua 脚本时，你要避免把不需要做并发控制的操作写入脚本中。Redis 不是串行在执行命令吗，同样的命令写在 Lua 脚本里和直接执行应该是一样的吧，是因为 Lua 脚本里的命令多了会导致执行时间变长，导致 Redis 阻塞吗？","like_count":0},{"had_liked":false,"id":302053,"user_name":"北风少年","can_delete":false,"product_type":"c1","uid":2462472,"ip_address":"","ucode":"35FADF0C69564B","user_header":"https://static001.geekbang.org/account/avatar/00/25/93/08/7fcf715d.jpg","comment_is_top":false,"comment_ctime":1626057092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626057092","product_id":100056701,"comment_content":"如果单纯是为了原子性执行多条Redis命令，java里面我倒是经常用Redisson，它最终也是执行的lua脚本，直接使用lua脚本，个人感觉调试起来不是特别便捷","like_count":0},{"had_liked":false,"id":296002,"user_name":"小鱼","can_delete":false,"product_type":"c1","uid":1248115,"ip_address":"","ucode":"022B6D5D69DB68","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/73/44fe2df9.jpg","comment_is_top":false,"comment_ctime":1622699944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622699944","product_id":100056701,"comment_content":"简单总结就是redis执行命令是原子操作的，但是有些操作不是一个命令可以搞定的就需要考虑并发。redis处理并发有两种方式：第一种加锁（分布式锁）；第二种lua脚本或者incr,decr 本质上还是把命令变成原子命令","like_count":0},{"had_liked":false,"id":295165,"user_name":"夜辉","can_delete":false,"product_type":"c1","uid":1886331,"ip_address":"","ucode":"9421385F51FF9E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","comment_is_top":false,"comment_ctime":1622277317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622277317","product_id":100056701,"comment_content":"问题：Redis 在执行 Lua 脚本时，是可以保证原子性的，那么， 在我举的 Lua 脚本例子（lua.script）中，你觉得是否需要把读取客户端 ip 的访问次数， 也就是 GET(ip)，以及判断访问次数是否超过 20 的判断逻辑，也加到 Lua 脚本中吗？<br><br>加入，降低执行并发量<br>不加入，准确限流功能存在问题","like_count":0},{"had_liked":false,"id":286283,"user_name":"三口一头猫","can_delete":false,"product_type":"c1","uid":1317496,"ip_address":"","ucode":"96261B6675E63B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/78/74275977.jpg","comment_is_top":false,"comment_ctime":1617239865,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1617239865","product_id":100056701,"comment_content":"请问老师 如果是做切片集群或者主从模式这种还适合使用lua吗","like_count":0,"discussions":[{"author":{"id":1299673,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d4/d9/c3296187.jpg","nickname":"airmy丶","note":"","ucode":"41959C9F5B4B65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367387,"discussion_content":"应该是要看lua脚本中需要操作多少个key，如果是单个key的话，集群模式下可以使用，但是如果多个key的话，通常是不能执行的，因为redis切片集群需要分配哈希槽，需要保证多个key在同一个slot上！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618329367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286068,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617149755,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617149755","product_id":100056701,"comment_content":"Redis 同样会遇到并发访问问题，为了保证并发访问，Redis 提供了加锁和原子操作两种方式。<br><br>其实原子操作听上去比较高端，但实际上就是让多个操作变成一步，和事务有点像。加一减一这种比较简单的，Redis 自身就提供了 INCR&#47;DECR 的命令；对于复杂多步骤的，可以编写 Lua 脚本，而 Redis 把 Lua 脚本当做“一条”命令来处理。<br><br>当然，如果 Lua 脚本内的操作过于复杂，耗时过长，Redis 的性能也会受到影响。<br><br>我觉的 Redis 从一出生，就是当做缓存来设计的，最好只做简单的读写操作（要是用作只读缓存就更合适了）。<br><br>对于课后题，读取客户端 ip 的访问次数，不需要添加到 Lua 脚本里面。假设有多个并发访问，获取到了当前的 ip 访问次数，假设不超过 20 且不为 NULL 值，那么每次（并发）访问，都给访问次数加一，这个没有问题。如果 value == 1，那么就设置过期时间，如果哪一个并发访问到了，都可以执行。<br><br>唯一可能有问题的地方，就是有超过 20 个并发同时访问到了 GET(ip)，并且得到的值小于 20，然后都执行了加一操作，那么就会超过 20 的访问次数限制。","like_count":0},{"had_liked":false,"id":286015,"user_name":"猫猫虫","can_delete":false,"product_type":"c1","uid":2507099,"ip_address":"","ucode":"3028263C7D44D8","user_header":"https://static001.geekbang.org/account/avatar/00/26/41/5b/23baaded.jpg","comment_is_top":false,"comment_ctime":1617105949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617105949","product_id":100056701,"comment_content":"无论是使用lua脚本还是业务加锁，本质上都是保证读并修改的原子性，读并修改未执行完成前都会阻塞其他请求，那为什么更推荐lua脚本呢，redis在执行过程中是如何实现读写锁的功能，并保证比业务加锁效率更高呢","like_count":0},{"had_liked":false,"id":277993,"user_name":"Geek_89e362","can_delete":false,"product_type":"c1","uid":2308075,"ip_address":"","ucode":"E596C2CFE1CFAF","user_header":"","comment_is_top":false,"comment_ctime":1612692443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612692443","product_id":100056701,"comment_content":"再次更正，我感觉是不需要：<br><br>&#47;&#47; 调用脚本 对方问次数加 1<br>current = EVAL lua.script ip<br>&#47;&#47;如果超过访问次数超过20次，则报错<br>IF current != NULL AND current &gt; 20 THEN<br>    ERROR &quot;exceed 20 accesses per second&quot;<br>ELSE<br>    &#47;&#47;执行其他操作<br>    DO THINGS<br>END<br><br>把执行代码改成这样是不是就可以了，直接把 get(ip) 去掉。直接去增加。如果返回的值 大于 20 那么就直接报错。","like_count":0},{"had_liked":false,"id":276164,"user_name":"sven🦖","can_delete":false,"product_type":"c1","uid":2144395,"ip_address":"","ucode":"D52C7F8B0A6E64","user_header":"https://static001.geekbang.org/account/avatar/00/20/b8/8b/524d7c8e.jpg","comment_is_top":false,"comment_ctime":1611818450,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611818450","product_id":100056701,"comment_content":"老师您好，<br>之前都是傻傻的加锁操作，想不到还可以愉快的使用lua脚本解决并行串行。 get！！<br>最后提出一个问题： lua 脚本中如果存在多个执行语句，执行过程中报错了，能否做到事务回滚？  ","like_count":0,"discussions":[{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352621,"discussion_content":"不能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614781633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271615,"user_name":"小超人","can_delete":false,"product_type":"c1","uid":1411096,"ip_address":"","ucode":"0D8A433F3E3737","user_header":"https://static001.geekbang.org/account/avatar/00/15/88/18/9744d5ec.jpg","comment_is_top":false,"comment_ctime":1609732973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609732973","product_id":100056701,"comment_content":"如果要限制某个 ip 在限定的时间内的访问次数不能超过 20 次 SET $ip 9223372036854775787 EX 60；<br>可以 $ip 指定的 ip 的键， 然后 设置值为 Long.MAX_VALUE - 20; 设置过期时间为 60s, 之后访问对应的 $ip时， 使用命令 INCR $ip。 如果 没有溢出表示访问正常， 如果溢出 表示访问的次数超过了 20 次了 ；<br>实操: <br>127.0.0.1:6379&gt; set access 9223372036854775787 EX 60<br>OK<br>127.0.0.1:6379&gt; INCR access<br>(integer) 9223372036854775788","like_count":0},{"had_liked":false,"id":265640,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606967408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606967408","product_id":100056701,"comment_content":"不需要。读操作不涉及临界资源区的修改。<br>减少lua的命令，减少redis执行的时间。","like_count":0},{"had_liked":false,"id":264211,"user_name":"不過勝負","can_delete":false,"product_type":"c1","uid":1099321,"ip_address":"","ucode":"A1CB36404DB884","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/39/0b837f63.jpg","comment_is_top":false,"comment_ctime":1606380993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606380993","product_id":100056701,"comment_content":"如果需要严格控制某个ip地址1分钟20内的访问均能够正常受理，就需要在lua脚本里查询并判断；<br>不然在某ip高并发访问时，应用请求redis用lua脚本全部执行成功，然后加到20以上，这时应用再去查结果会返回20+，极端情况下会导致某ip所有请求都拒绝掉。","like_count":0},{"had_liked":false,"id":264057,"user_name":"石小天","can_delete":false,"product_type":"c1","uid":1484861,"ip_address":"","ucode":"BB965629AD7BB3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzvM4MKTUJULLl6LESKLun90dPx33OZiaNJ3U5QvAicjDLib6akk52dMHgLwmRTBJ1VicSeKobSeopJA/132","comment_is_top":false,"comment_ctime":1606320871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606320871","product_id":100056701,"comment_content":"判断是否大于20逻辑和incr不是原子性的需要，否则次数会超出。","like_count":0},{"had_liked":false,"id":263465,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1606139892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606139892","product_id":100056701,"comment_content":"lua脚本强","like_count":0},{"had_liked":false,"id":263189,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1606037485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606037485","product_id":100056701,"comment_content":"不需要，并发控制是多线程写操作的顺序无法保证引起的；而读操作并不影响功能。","like_count":0},{"had_liked":false,"id":260096,"user_name":"刘大人","can_delete":false,"product_type":"c1","uid":1577210,"ip_address":"","ucode":"F66AE613E80398","user_header":"https://static001.geekbang.org/account/avatar/00/18/10/fa/d977627e.jpg","comment_is_top":false,"comment_ctime":1604923328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604923328","product_id":100056701,"comment_content":"Java需要  可以 操作lua脚本  调用redis吗 比如spring biot等","like_count":0},{"had_liked":false,"id":256808,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1603757744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603757744","product_id":100056701,"comment_content":"客户端执行原子操作失败后是等待？还是直接就失败了，如果直接失败了不需要，如果等待感觉需要","like_count":0},{"had_liked":false,"id":256668,"user_name":"snailshen","can_delete":false,"product_type":"c1","uid":1436839,"ip_address":"","ucode":"C4875C476649B1","user_header":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","comment_is_top":false,"comment_ctime":1603701026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603701026","product_id":100056701,"comment_content":"是否需要把读取客户端 ip 的访问次数 GET(ip)，以及判断访问次数是否超过 20 的判断逻辑，也加到 Lua 脚本中？<br>这个操作主要是保证incr为1时，expire操作，这两个命令保证原子性即可，所以我得出的结论是：<br>1、判断20的逻辑不用放在脚本中，可以通过lua脚本返回incr的访问次数<br>2、incr后的值，校验为1的逻辑和expire的操作要放到脚本中，这样严格保证了第一个时间段第一次访问时，设置的失效时间是准确的。<br>","like_count":0},{"had_liked":false,"id":256662,"user_name":"dieaway","can_delete":false,"product_type":"c1","uid":2113930,"ip_address":"","ucode":"E647D810F4BAD1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqSs32JeiaWYicZE3LZPLZgVXMcBjkd9SadOK8pxjwda6m9vMb0qIz5rha8pfubewic46jBiafejqGWXw/132","comment_is_top":false,"comment_ctime":1603700212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603700212","product_id":100056701,"comment_content":"请问老师 ，redis4.0之后引入了redis module扩展  ，这个redis module 也可以实现和lua脚本类似的功能， 优点是可以直接调用redis的底层命令。 想问一下redis module是原子性的吗   老师有了解过吗","like_count":0},{"had_liked":false,"id":256599,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1603689412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603689412","product_id":100056701,"comment_content":"课后题：不需要，因为这两个操作不会修改临界区资源，都是读操作。","like_count":0},{"had_liked":false,"id":256540,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1603672915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603672915","product_id":100056701,"comment_content":"请问老师，redis在生成快照和写AOF的时候没有做并发控制，那么对MULTI和Lua脚本这种多指令情况，会不会出现数据不一致的情况，譬如业务逻辑要求A，B，C三个数据同步原子修改保持逻辑一致，bgsave的时候会出现生成的快照中A被修改，而BC的修改被遗漏的情况么？","like_count":0}]}