{"id":10603,"title":"81 | 程序员练级攻略：分布式架构入门","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>学习分布式系统跟学习其它技术非常不一样，分布式系统涵盖的面非常广，具体来说涵盖如下几方面：</p><ul>\n<li>\n<p><strong>服务调度</strong>，涉及服务发现、配置管理、弹性伸缩、故障恢复等。</p>\n</li>\n<li>\n<p><strong>资源调度</strong>，涉及对底层资源的调度使用，如计算资源、网络资源和存储资源等。</p>\n</li>\n<li>\n<p><strong>流量调度</strong>，涉及路由、负载均衡、流控、熔断等。</p>\n</li>\n<li>\n<p><strong>数据调度</strong>，涉及数据复本、数据一致性、分布式事务、分库、分表等。</p>\n</li>\n<li>\n<p><strong>容错处理</strong>，涉及隔离、幂等、重试、业务补偿、异步、降级等。</p>\n</li>\n<li>\n<p><strong>自动化运维</strong>，涉及持续集成、持续部署、全栈监控、调用链跟踪等。</p>\n</li>\n</ul><p>所有这些形成了分布式架构的整体复杂度，也造就了分布式系统中的很多很多论文、图书以及很多很多的项目。要学好分布式系统及其架构，我们需要大量的时间和实践才能真正掌握这些技术。</p><p>这里有几点需要你注意一下。</p><ul>\n<li>\n<p><strong>分布式系统之所以复杂，就是因为它太容易出错了</strong>。这意味着，<strong>你要把处理错误的代码当成正常功能的代码来处理</strong>。</p>\n</li>\n<li>\n<p><strong>开发一个健壮的分布式系统的成本是单体系统的几百倍甚至几万倍</strong>。这意味着，<strong>我们要自己开发一个，需要能力很强的开发人员</strong>。</p>\n</li>\n<li>\n<p><strong>非常健壮的开源的分布式系统并不多，或者说基本没有</strong>。这意味着，<strong>如果你要用开源的，那么你需要hold得住其源码</strong>。</p>\n</li>\n<li>\n<p><strong>管理或是协调多个服务或机器是非常难的</strong>。这意味着，<strong>我们要去读很多很多的分布式系统的论文</strong>。</p>\n</li>\n<li>\n<p><strong>在分布式环境下，出了问题是很难debug的</strong>。这意味着，<strong>我们需要非常好的监控和跟踪系统，还需要经常做演练和测试</strong>。</p>\n</li>\n<li>\n<p><strong>在分布式环境下，你需要更科学地分析和统计</strong>。这意味着，<strong>我们要用P90这样的统计指标，而不是平均值，我们还需要做容量计划和评估</strong>。</p>\n</li>\n<li>\n<p><strong>在分布式环境下，需要应用服务化</strong>。这意味着，<strong>我们需要一个服务开发框架，比如SOA或微服务</strong>。</p>\n</li>\n<li>\n<p><strong>在分布式环境下，故障不可怕，可怕的是影响面过大，时间过长</strong>。这意味着，<strong>我们需要花时间来开发我们的自动化运维平台</strong>。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>总之，在分布式环境下，一切都变得非常复杂。要进入这个领域，你需要有足够多的耐性和足够强的心态来接受各式各样的失败。当拥有丰富的实践和经验后，你才会有所建树。这并不是一日之功，你可能要在这个领域花费数年甚至数十年的时间。</p><h1>分布式架构入门</h1><p>学习如何设计可扩展的架构将会有助于你成为一个更好的工程师。系统设计是一个很宽泛的话题。在互联网上，关于架构设计原则的资源也是多如牛毛。所以，你需要知道一些基本概念，对此，这里你先阅读下面两篇文章。</p><ul>\n<li>\n<p><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a> ，这篇文章会给你一个大概的分布式架构是怎么来解决系统扩展性问题的粗略方法。</p>\n</li>\n<li>\n<p><a href=\"http://www.slideshare.net/jboner/scalability-availability-stability-patterns\">Scalability, Availability &amp; Stability Patterns</a> ，这个PPT能在扩展性、可用性、稳定性等方面给你一个非常大的架构设计视野和思想，可以让你感受一下大概的全景图。</p>\n</li>\n</ul><p>然后，我更强烈推荐GitHub上的一篇文档 - <a href=\"https://github.com/donnemartin/system-design-primer\">System Design Primer</a> ，这个仓库主要组织收集分布式系统的一些与扩展性相关的资源，它可以帮助你学习如何构建可扩展的架构。</p><p>目前这个仓库收集到了好些系统架构和设计的基本方法。其中包括：CAP理论、一致性模型、可用性模式、DNS、CDN、负载均衡、反向代理、应用层的微服务和服务发现、关系型数据库和NoSQL、缓存、异步通讯、安全等。</p><p>我认为，上面这几篇文章基本足够可以让你入门了，因为其中基本涵盖了所有与系统架构相关的技术。这些技术，足够这世上90%以上的公司用了，只有超级巨型的公司才有可能使用更高层次的技术。</p><h1>分布式理论</h1><p>下面，我们来学习一下分布式方面的理论知识。</p><p>首先，你需要看一下 <a href=\"https://github.com/aphyr/distsys-class\">An introduction to distributed systems</a>。 这只是某个教学课程的提纲，我觉得还是很不错的，几乎涵盖了分布式系统方面的所有知识点，而且辅以简洁并切中要害的说明文字，非常适合初学者提纲挈领地了解知识全貌，快速与现有知识结合，形成知识体系。这也是一个分布式系统的知识图谱，可以让你看到分布式系统的整体全貌。你可以根据这个知识图Google下去，然后你会学会所有的东西。</p><p>然后，你需要了解一下拜占庭将军问题（<a href=\"https://en.wikipedia.org/wiki/Byzantine_fault_tolerance\">Byzantine Generals Problem</a>）。这个问题是莱斯利·兰波特（Leslie Lamport）于1982年提出用来解释一致性问题的一个虚构模型（<a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Byzantine-Generals-Problem.pdf\">论文地址</a>）。拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于将军中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。拜占庭问题即为在此情况下，如何让忠诚的将军们能达成行动的一致。</p><p>对于拜占庭问题来说，假如节点总数为 <code>N</code>，叛变将军数为 <code>F</code>，则当 <code>N &gt;= 3F + 1</code> 时，问题才有解，即拜占庭容错（Byzantine Fault Tolerant，BFT）算法。拜占庭容错算法解决的是，网络通信可靠但节点可能故障情况下一致性该如何达成的问题。</p><p>最早由卡斯特罗（Castro）和利斯科夫（Liskov）在1999年提出的实用拜占庭容错（Practical Byzantine Fault Tolerant，PBFT）算法，是第一个得到广泛应用的BFT算法。只要系统中有2/3的节点是正常工作的，则可以保证一致性。PBFT算法包括三个阶段来达成共识：预准备（Pre-Prepare）、准备（Prepare）和提交（Commit）。</p><p>这里有几篇和这个问题相关的文章，推荐阅读。</p><ul>\n<li>\n<p><a href=\"http://www.drdobbs.com/cpp/the-byzantine-generals-problem/206904396\">Dr.Dobb’s - The Byzantine Generals Problem</a></p>\n</li>\n<li>\n<p><a href=\"http://blog.jameslarisch.com/the-byzantine-generals-problem\">The Byzantine Generals Problem</a></p>\n</li>\n<li>\n<p><a href=\"http://pmg.csail.mit.edu/papers/osdi99.pdf\">Practicle Byzantine Fault Tolerance</a></p>\n</li>\n</ul><p>拜占庭容错系统研究中有三个重要理论：CAP、FLP和DLS。</p><ul>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP定理</a>，CAP理论相信你应该听说过不下N次了。CAP定理是分布式系统设计中最基础也是最为关键的理论。CAP定理指出，分布式数据存储不可能同时满足以下三个条件：一致性（Consistency）、可用性（Availability）和 分区容忍（Partition tolerance）。 “在网络发生阻断（partition）时，你只能选择数据的一致性（consistency）或可用性（availability），无法两者兼得”。</p>\n<p>论点比较直观：如果网络因阻断而分隔为二，在其中一边我送出一笔交易：“将我的十元给A”；在另一半我送出另一笔交易：“将我的十元给B”。此时系统要不是，a）无可用性，即这两笔交易至少会有一笔交易不会被接受；要不就是，b）无一致性，一半看到的是A多了十元而另一半则看到B多了十元。要注意的是，CAP理论和扩展性（scalability）是无关的，在分片（sharded）或非分片的系统皆适用。</p>\n</li>\n<li>\n<p><a href=\"http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/\">FLP impossibility</a>，在异步环境中，如果节点间的网络延迟没有上限，只要有一个恶意的节点存在，就没有算法能在有限的时间内达成共识。但值得注意的是， <a href=\"https://en.wikipedia.org/wiki/Las_Vegas_algorithm\">“Las Vegas” algorithms</a>（这个算法又叫撞大运算法，其保证结果正确，只是在运算时所用资源上进行赌博，一个简单的例子是随机快速排序，它的pivot是随机选的，但排序结果永远一致）在每一轮皆有一定机率达成共识，随着时间增加，机率会越趋近于1。而这也是许多成功的共识算法会采用的解决问题的办法。</p>\n</li>\n<li>\n<p>容错的上限，从<a href=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\">DLS论文</a> 中我们可以得到以下结论：</p>\n<ul>\n<li>\n<p>在部分同步（partially synchronous）的网络环境中（即网络延迟有一定的上限，但我们无法事先知道上限是多少），协议可以容忍最多1/3的拜占庭故障（Byzantine fault）。</p>\n</li>\n<li>\n<p>在异步（asynchronous）的网络环境中，具有确定性质的协议无法容忍任何错误，但这篇论文并没有提及 <a href=\"http://link.springer.com/chapter/10.1007%2F978-3-540-77444-0_7\">randomized algorithms</a>，在这种情况下可以容忍最多1/3的拜占庭故障。</p>\n</li>\n<li>\n<p>在同步（synchronous）网络环境中（即网络延迟有上限且上限是已知的），协议可以容忍100%的拜占庭故障，但当超过1/2的节点为恶意节点时，会有一些限制条件。要注意的是，我们考虑的是\"具有认证特性的拜占庭模型（authenticated Byzantine）“，而不是\"一般的拜占庭模型”；具有认证特性指的是将如今已经过大量研究且成本低廉的公私钥加密机制应用在我们的算法中。</p>\n</li>\n</ul>\n</li>\n</ul><p>当然，还有一个著名的“8条荒谬的分布式假设（<a href=\"http://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\">Fallacies of Distributed Computing</a>）”。</p><ol>\n<li>网络是稳定的。</li>\n<li>网络传输的延迟是零。</li>\n<li>网络的带宽是无穷大。</li>\n<li>网络是安全的。</li>\n<li>网络的拓扑不会改变。</li>\n<li>只有一个系统管理员。</li>\n<li>传输数据的成本为零。</li>\n<li>整个网络是同构的。</li>\n</ol><p>阿尔农·罗特姆-盖尔-奥兹（Arnon Rotem-Gal-Oz）写了一篇长文 <a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">Fallacies of Distributed Computing Explained</a> 来解释为什么这些观点是错误的。另外，<a href=\"https://shimo.im/docs/gYpKDyQv6CXGgHTr\">加勒思·威尔逊（Gareth Wilson）的文章</a> 则用日常生活中的例子，对这些点做了通俗的解释。为什么我们深刻地认识到这8个错误？是因为，这要我们清楚地认识到——在分布式系统中错误是不可能避免的，我们在分布式系统中，能做的不是避免错误，而是要把错误的处理当成功能写在代码中。</p><p>下面分享几篇一致性方面的论文。</p><ul>\n<li>\n<p>当然，关于经典的CAP理论，也存在一些误导的地方，这个问题在2012年有一篇论文 <a href=\"https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed\">CAP Twelve Years Later: How the Rules Have Changed</a> （<a href=\"http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed\">中译版</a>）中做了一些讨论，主要是说，在CAP中最大的问题就是分区，也就是P，在P发生的情况下，非常难以保证C和A。然而，这是强一致性的情况。</p>\n<p>其实，在很多时候，我们并不需要强一致性的系统，所以后来，人们争论关于数据一致性和可用性时，主要是集中在强一致性的ACID或最终一致性的BASE。当时，BASE还不怎么为世人所接受，主要是大家都觉得ACID是最完美的模型，大家很难接受不完美的BASE。在CAP理论中，大家总是觉得需要“三选二”，也就是说，P是必选项，那“三选二”的选择题不就变成数据一致性(consistency)、服务可用性(availability) 间的“二选一”？</p>\n<p>然而，现实却是，P很少遇到，而C和A这两个事，工程实践中一致性有不同程度，可用性也有不同等级，在保证分区容错性的前提下，放宽约束后可以兼顾一致性和可用性，两者不是非此即彼。其实，在一个时间可能允许的范围内是可以取舍并交替选择的。</p>\n</li>\n<li>\n<p><a href=\"https://pdfs.semanticscholar.org/5015/8bc1a8a67295ab7bce0550886a9859000dc2.pdf\">Harvest, Yield, and Scalable Tolerant Systems</a> ，这篇论文是基于上面那篇“CAP 12年后”的论文写的，它主要提出了Harvest和Yield概念，并把上面那篇论文中所讨论的东西讲得更为仔细了一些。</p>\n</li>\n<li>\n<p><a href=\"https://queue.acm.org/detail.cfm?id=1394128\">Base: An Acid Alternative</a> （<a href=\"http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html\">中译版</a>），本文是eBay的架构师在2008年发表给ACM的文章，是一篇解释BASE原则，或者说最终一致性的经典文章。文中讨论了BASE与ACID原则的基本差异, 以及如何设计大型网站以满足不断增长的可伸缩性需求，其中有如何对业务做调整和折中，以及一些具体的折中技术的介绍。一个比较经典的话是——“在对数据库进行分区后,为了可用性（Availability）牺牲部分一致性（Consistency）可以显著地提升系统的可伸缩性(Scalability)”。</p>\n</li>\n<li>\n<p><a href=\"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html\">Eventually Consistent</a> ，这篇文章是AWS的CTO维尔纳·沃格尔（Werner Vogels）在2008年发布在ACM Queue上的一篇数据库方面的重要文章，阐述了NoSQL数据库的理论基石——最终一致性，对传统的关系型数据库（ACID，Transaction）做了较好的补充。</p>\n</li>\n</ul><h1>小结</h1><p>好了，总结一下今天分享的内容。文章的开头，我给出了学习分布式架构需要注意的几个关键点，然后列出了入门学习的资源，基本涵盖了所有与系统架构相关的技术。随后讲述了拜占庭容错系统研究中有三个重要理论：CAP、FLP和DLS，以及8条荒谬的分布式假设，从理论和认知等角度让你更为清楚地理解分布式系统。最后分享了几篇一致性相关的论文，很实用很经典，推荐阅读。</p><p>下篇文章中，我将推荐一些分布式架构的经典图书和论文，并给出了导读文字，几乎涵盖了分布式系统架构方面的所有关键的理论知识。敬请期待。</p><p>下面是《程序员练级攻略》系列文章的目录。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/8136\">开篇词</a></li>\n<li>入门篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8216\">零基础启蒙</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8217\">正式入门</a></li>\n</ul>\n</li>\n<li>修养篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8700\">程序员修养</a></li>\n</ul>\n</li>\n<li>专业基础篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8701\">编程语言</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8887\">理论学科</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8888\">系统知识</a></li>\n</ul>\n</li>\n<li>软件设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9369\">软件设计</a></li>\n</ul>\n</li>\n<li>高手成长篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9759\">Linux系统、内存和网络（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/9851\">异步I/O模型和Lock-Free编程（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10216\">Java底层知识</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10301\">数据库</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10603\">分布式架构入门（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10604\">分布式架构经典图书和论文（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11232\">分布式架构工程设计(分布式架构)</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11116\">微服务</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11665\">容器化和自动化运维</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11669\">机器学习和人工智能</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12271\">前端基础和底层原理（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12389\">前端性能优化和框架（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12486\">UI/UX设计（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12561\">技术资源集散地</a></li>\n</ul>\n</li>\n</ul>","comments":[{"had_liked":false,"id":15555,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1531289747,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"211984687251","product_id":100002201,"comment_content":"皓哥，一直对你以前提到过的网络优化那个例子耿耿于怀。就是优化完了，给你20万的那个。一直看书，一直找答案，还是不明白，你优化是优化的哪一个层次上的数据包？你说保证在一个MTU中传完，这个应该是链路层最大能传输的帧大小，按理说应用层以下，应该不受我们控制了，更不用说链路层了。应用层顶多就是对socket读写数据流。在应用层，不管我们怎么传数据，都到了底层缓冲区里面了，然后就不受我们控制了，交给tcp了。到底是怎么做的？麻烦皓哥给几个关键字就行，剩下我自己学。此疑问让我茶饭不思，百受折磨。望皓哥指点一二啊","like_count":50,"discussions":[{"author":{"id":1199315,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4c/d3/365fe5a1.jpg","nickname":"yann [扬] :曹同学","note":"","ucode":"C449253263E796","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229734,"discussion_content":"之前有友商几十万赚的更神奇，oracle换mysql","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586687241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798759,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/72/67/47a07333.jpg","nickname":"可乐","note":"","ucode":"7C59065D9EEFDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330799,"discussion_content":"应该是多个小包组成一个大包，尽量填满 mtu ，之后再发送。应该是自己做的服务器框架。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606711154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027028,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erHaczgBsEF7zqCj8Hlq2vtYh0M6Jj3pia66ZW0O4fFvNldbkHYX6d8B0fBHwicxAcMMRmcNzPrJLMA/132","nickname":"Jianwen Ji","note":"","ucode":"20A8AC1AA8A8E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289096,"discussion_content":"应该是在应用层做的优化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593994322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542516,"discussion_content":"UDP 可以的。TCP 协议自己控制不超过 MTU，同时因为 Nagle 算法的缘故，会出现粘包拆包。另外链路的 Path MTU 是可以探测的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640771119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376353,"discussion_content":"哈哈。你收了甲方多少钱。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622091061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315133,"discussion_content":"这个问题答案值十万，哈哈哈😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603244089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126384,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/1ZDgicfA4gy15LzpcNnltibCBRbSeoxJ31CqDzye3cPXeQibm09J6uHP26KHZYGAkn5U1Wqd7fWMppedjdQKiatVPA/132","nickname":"hidoudou","note":"","ucode":"E446B28C4A888E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167531,"discussion_content":"同问，我也觉得很神奇，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581506797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15533,"user_name":"manx00","can_delete":false,"product_type":"c1","uid":1014356,"ip_address":"","ucode":"CA086E73F179E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/54/497b1764.jpg","comment_is_top":false,"comment_ctime":1531270169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61660812313","product_id":100002201,"comment_content":"这几天的练级攻略看得热血沸腾，感谢分享这么多系统的知识点并指出练级路线。我在开始订阅了这个专栏后，曾经一度放弃，不是因为里面的东西无用，而是太干了，干得我感觉面对的是一座大山，很无力。这几天看了练级攻略，看清楚了自己真实的水平，让自己的热血再次燃起来，接下来就是认鼓励一下自己认真学习起来，有大牛带路对我这种野路子奋斗的人简直是照出了一条阳光大道！","like_count":14},{"had_liked":false,"id":15482,"user_name":"无故","can_delete":false,"product_type":"c1","uid":1021659,"ip_address":"","ucode":"C063131843C330","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/db/bc5370e9.jpg","comment_is_top":false,"comment_ctime":1531214341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31595985413","product_id":100002201,"comment_content":"耗子哥，有大数据相关的吗？","like_count":7},{"had_liked":false,"id":58342,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1547041008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18726910192","product_id":100002201,"comment_content":"感觉自己是积极努力的，但水平一般般，一直觉得自己可能智力不行，今天看知乎上的相关话题，感觉多了些信心，智力即生命力，始于受精卵至于死亡，环境因素对人的影响也是巨大的，幸好自己爱学习，有好奇心，现在看专栏后感觉更有方向了。加油💪","like_count":5},{"had_liked":false,"id":15499,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1531234242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18711103426","product_id":100002201,"comment_content":"信息量太大了，感觉有点吃力。","like_count":4},{"had_liked":false,"id":15453,"user_name":"ruby","can_delete":false,"product_type":"c1","uid":1046310,"ip_address":"","ucode":"2B58F0B5056109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/26/3a10924a.jpg","comment_is_top":false,"comment_ctime":1531195520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18711064704","product_id":100002201,"comment_content":"干货满满，好好学习～","like_count":4},{"had_liked":false,"id":37305,"user_name":"saneryee","can_delete":false,"product_type":"c1","uid":1021548,"ip_address":"","ucode":"607A1BF09391ED","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/6c/1ed88ae9.jpg","comment_is_top":false,"comment_ctime":1541543498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14426445386","product_id":100002201,"comment_content":"修改后的加勒思·威尔逊链接还是不对，与 Fallacies of Distributed Computing Explained 重复了，两个链接是同一篇文章。","like_count":3},{"had_liked":false,"id":145904,"user_name":"libertys","can_delete":false,"product_type":"c1","uid":1221020,"ip_address":"","ucode":"361979FCBCEF5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/9c/eafa15c9.jpg","comment_is_top":false,"comment_ctime":1572400909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162335501","product_id":100002201,"comment_content":"我惊讶一个人怎么能掌握这么多的知识并且给出对一个知识点不同层次的建议，应该不是只有一个在出这个专栏吧，老师的后面应该有团队的力量吧","like_count":2},{"had_liked":false,"id":114663,"user_name":"hhh","can_delete":false,"product_type":"c1","uid":1063398,"ip_address":"","ucode":"711DCDC58209BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/e6/1effba61.jpg","comment_is_top":false,"comment_ctime":1563358887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153293479","product_id":100002201,"comment_content":"皓哥，http:&#47;&#47;www.slideshare.net&#47;jboner&#47;scalability-availability-stability-patterns，这个网站不能访问是需要跳墙吗？","like_count":2},{"had_liked":false,"id":15544,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1073400,"ip_address":"","ucode":"74279BE011BEA4","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/f8/3f0ba76d.jpg","comment_is_top":false,"comment_ctime":1531274800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121209392","product_id":100002201,"comment_content":"耗子叔，实在很👍，信息量好大，您是如何收集这么多知识的？","like_count":2},{"had_liked":false,"id":15540,"user_name":"山哥","can_delete":false,"product_type":"c1","uid":1172679,"ip_address":"","ucode":"7C8585B021CAC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/c7/7f8be879.jpg","comment_is_top":false,"comment_ctime":1531274118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121208710","product_id":100002201,"comment_content":"分布式涵盖技术太多，我觉得只要专注在一二个领悟就可以了，其他领悟作为广度研究，毕竟精力有限，你觉得呢？","like_count":2},{"had_liked":false,"id":15452,"user_name":"无扬","can_delete":false,"product_type":"c1","uid":1053013,"ip_address":"","ucode":"DA6FC9E479B2FE","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/55/531ee6ee.jpg","comment_is_top":false,"comment_ctime":1531194247,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10121128839","product_id":100002201,"comment_content":"皓叔，您好，有个问题想要咨询皓叔的意见。  <br>我刚毕业工作3个月，java后端。老板问我对Scala有没有兴趣，有个爬虫的项目是Scala做的问我想不想接手，我有点拿不定主意。我自己是想要朝着更高层次的技术去发展的，但是感觉目前的话java也还没有太扎实，又去研究Scala会不会两头都没有很深入了，想要咨询下皓叔的意见。","like_count":2,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319685,"discussion_content":"两年多时间过去了，想知道后续的进展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604101363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257723,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1604102020,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5899069316","product_id":100002201,"comment_content":"经常能够在网络留言上看到哭着喊着要“干货”的人，现在干货来了，但是看留言似乎不太多，难道是大家都在忙着看文中的链接资料么?<br><br>这几篇程序员练级攻略，应该差不多算是“有生之年”系列了，只看某一个方向，大概也得一年以上的时间，不过我觉得，如果真的看了，那么面试什么的就应该没有问题了。<br><br>虽然现在有很多系统都是分布式的，但是作为技术人员似乎不那么容易接触并且上手分布式，暂时只能作为知识储备，万一哪天用到了呢？<br><br>日拱一卒，功不唐捐","like_count":1},{"had_liked":false,"id":221996,"user_name":"free","can_delete":false,"product_type":"c1","uid":1612443,"ip_address":"","ucode":"905F851A8CF3D1","user_header":"","comment_is_top":false,"comment_ctime":1590652751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885620047","product_id":100002201,"comment_content":"您好像少写了扩展性，可扩展性对分布式架构也很重要","like_count":1},{"had_liked":false,"id":110594,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1562297622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857264918","product_id":100002201,"comment_content":"这篇文章质量很高给出了分布式架构基本理论还有一个ppt比较好涵盖分布式架构知识图谱，便于理解。<br>github那个也不错分布式架构知识体系梳理","like_count":1},{"had_liked":false,"id":16047,"user_name":"£","can_delete":false,"product_type":"c1","uid":1151866,"ip_address":"","ucode":"6D707D0A7B9666","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/7a/ee1cd0a0.jpg","comment_is_top":false,"comment_ctime":1531751485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826718781","product_id":100002201,"comment_content":"同求大数据相关，网上找的都是些零零散散的东西，希望耗子哥借着这两次的分布式说一下大数据","like_count":1},{"had_liked":false,"id":15410,"user_name":"Ivan Fan🐶","can_delete":false,"product_type":"c1","uid":1173093,"ip_address":"","ucode":"2BA0295D124D80","user_header":"https://static001.geekbang.org/account/avatar/00/11/e6/65/7c145535.jpg","comment_is_top":false,"comment_ctime":1531181655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826148951","product_id":100002201,"comment_content":"希望也能介绍一下c++和java low latency的学习路线","like_count":1},{"had_liked":false,"id":334215,"user_name":"丝竹乱耳","can_delete":false,"product_type":"c1","uid":1273920,"ip_address":"","ucode":"933A41A394B0E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/40/ce062d99.jpg","comment_is_top":false,"comment_ctime":1644818523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644818523","product_id":100002201,"comment_content":"个人觉得cap理论没有讲清楚，一半 给这个 A ,一半给B 两个结果分析，讲的不明白","like_count":0},{"had_liked":false,"id":333252,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1447283,"ip_address":"","ucode":"708042A35424DC","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","comment_is_top":false,"comment_ctime":1644232043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644232043","product_id":100002201,"comment_content":"技术就是一项强实践的知识，理论是基础，但是，我们更应该要多多思考，我们怎么将技术落地，怎么去解决现实世界的问题，怎么找到关键，哪些是必不可少的环节，哪些是可以暂时忽略的，当然，这不是一下子就能够炼成的，我也希望自己多多实践，多多练习，多多学习，多多总结，也要形成一套自己的知识体系，避免杂乱无章，毫无头绪，高手都是善于总结的，耗子哥就是这种典型代表，我要多多练习这项技能，加油，奥利给","like_count":0},{"had_liked":false,"id":324134,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1638320889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638320889","product_id":100002201,"comment_content":"最近在设计分布式对账服务，方便业务对账自己的数据是否有异常","like_count":0},{"had_liked":false,"id":298341,"user_name":"hzy","can_delete":false,"product_type":"c1","uid":1285568,"ip_address":"","ucode":"6DE192B7E8F1CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XSibEZ9YDvTslicIFMichialduuwibwm1dDNl0BsL565B9u2Zc65rMcwibluem3HazRYF9EkDu8n9w83Kd4iaJepQXOUg/132","comment_is_top":false,"comment_ctime":1624026338,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624026338","product_id":100002201,"comment_content":"ddia这本书很好","like_count":0},{"had_liked":false,"id":292807,"user_name":"Roc","can_delete":false,"product_type":"c1","uid":1630357,"ip_address":"","ucode":"A1C8A2CE78318B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUDO6GZGnOqYhaEUt06qiazKprjBgicxNvvxq8UBOM9ZjicRKhHLzmDhfLnmXh25ASKsEfShEcAKm9Q/132","comment_is_top":false,"comment_ctime":1620985838,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620985838","product_id":100002201,"comment_content":"耗子叔啥时候能把这些英文资料翻译出来就好了!","like_count":0,"discussions":[{"author":{"id":2708739,"avatar":"https://static001.geekbang.org/account/avatar/00/29/55/03/1092fb6a.jpg","nickname":"假于物","note":"","ucode":"2775796BFD4D20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388974,"discussion_content":"为啥你没想着自己能翻译出来呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629080591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125823,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1566262676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566262676","product_id":100002201,"comment_content":"分布式系统涉及到服务管理，资源调度，流量调度，数据调度，自动运维等各个方面，而分布式系统本身是非常容易出错的，我们必须把错误处理当作正常逻辑来写。在分布式系统这条路上，所学的路标在文章里列出，需要我等继续努力","like_count":0},{"had_liked":false,"id":16866,"user_name":"Yujs","can_delete":false,"product_type":"c1","uid":1172120,"ip_address":"","ucode":"15DB027393658A","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/98/4fe81334.jpg","comment_is_top":false,"comment_ctime":1532263557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532263557","product_id":100002201,"comment_content":"干活满满啊  感觉学会遥遥无期","like_count":0},{"had_liked":false,"id":15725,"user_name":"中山浪子","can_delete":false,"product_type":"c1","uid":1055296,"ip_address":"","ucode":"25D0F8462473D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","comment_is_top":false,"comment_ctime":1531437542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531437542","product_id":100002201,"comment_content":"耗叔这篇入门篇干货满满，入门+经典理论，后续会不会有些好的分布式开源系统方面的专题介绍？最好是新人友好地容易理解和掌握的开源小项目，便于练手实践","like_count":0}]}