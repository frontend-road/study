{"id":103717,"title":"28 | 异常和中断：程序出错了怎么办？","content":"<p>过去这么多讲，我们的程序都是自动运行且正常运行的。自动运行的意思是说，我们的程序和指令都是一条条顺序执行，你不需要通过键盘或者网络给这个程序任何输入。正常运行是说，我们的程序都是能够正常执行下去的，没有遇到计算溢出之类的程序错误。</p><p>不过，现实的软件世界可没有这么简单。一方面，程序不仅是简单的执行指令，更多的还需要和外部的输入输出打交道。另一方面，程序在执行过程中，还会遇到各种异常情况，比如除以0、溢出，甚至我们自己也可以让程序抛出异常。</p><p>那这一讲，我就带你来看看，如果遇到这些情况，计算机是怎么运转的，也就是说，计算机究竟是如何处理异常的。</p><h2>异常：硬件、系统和应用的组合拳</h2><p>一提到计算机当中的<strong>异常</strong>（Exception），可能你的第一反应就是C++或者Java中的Exception。不过我们今天讲的，并不是这些软件开发过程中遇到的“软件异常”，而是和硬件、系统相关的“硬件异常”。</p><p>当然，“软件异常”和“硬件异常”并不是实际业界使用的专有名词，只是我为了方便给你说明，和C++、Java中软件抛出的Exception进行的人为区分，你明白这个意思就好。</p><p>尽管，这里我把这些硬件和系统相关的异常，叫作“硬件异常”。但是，实际上，这些异常，既有来自硬件的，也有来自软件层面的。</p><!-- [[[read_end]]] --><p>比如，我们在硬件层面，当加法器进行两个数相加的时候，会遇到算术溢出；或者，你在玩游戏的时候，按下键盘发送了一个信号给到CPU，CPU要去执行一个现有流程之外的指令，这也是一个“异常”。</p><p>同样，来自软件层面的，比如我们的程序进行系统调用，发起一个读文件的请求。这样应用程序向系统调用发起请求的情况，一样是通过“异常”来实现的。</p><p><strong>关于异常，最有意思的一点就是，它其实是一个硬件和软件组合到一起的处理过程。异常的前半生，也就是异常的发生和捕捉，是在硬件层面完成的。但是异常的后半生，也就是说，异常的处理，其实是由软件来完成的。</strong></p><p>计算机会为每一种可能会发生的异常，分配一个异常代码（Exception Number）。有些教科书会把异常代码叫作中断向量（Interrupt Vector）。异常发生的时候，通常是CPU检测到了一个特殊的信号。比如，你按下键盘上的按键，输入设备就会给CPU发一个信号。或者，正在执行的指令发生了加法溢出，同样，我们可以有一个进位溢出的信号。这些信号呢，在组成原理里面，我们一般叫作发生了一个事件（Event）。CPU在检测到事件的时候，其实也就拿到了对应的异常代码。</p><p><strong>这些异常代码里，I/O发出的信号的异常代码，是由操作系统来分配的，也就是由软件来设定的。而像加法溢出这样的异常代码，则是由CPU预先分配好的，也就是由硬件来分配的。这又是另一个软件和硬件共同组合来处理异常的过程。</strong></p><p>拿到异常代码之后，CPU就会触发异常处理的流程。计算机在内存里，会保留一个异常表（Exception Table）。也有地方，把这个表叫作中断向量表（Interrupt Vector Table），好和上面的中断向量对应起来。这个异常表有点儿像我们在<a href=\"https://time.geekbang.org/column/article/95244\">第10讲</a>里讲的GOT表，存放的是不同的异常代码对应的异常处理程序（Exception Handler）所在的地址。</p><p>我们的CPU在拿到了异常码之后，会先把当前的程序执行的现场，保存到程序栈里面，然后根据异常码查询，找到对应的异常处理程序，最后把后续指令执行的指挥权，交给这个异常处理程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/d6/e8a49f09d1bb50e4d42fccd14d743ad6.jpeg?wh=2485*1054\" alt=\"\"></p><p>这样“检测异常，拿到异常码，再根据异常码进行查表处理”的模式，在日常开发的过程中是很常见的。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/f7/272b21cc50572c208b4db4b8ef8276f7.jpeg?wh=1666*946\" alt=\"\"></p><p>比如说，现在我们日常进行的Web或者App开发，通常都是前后端分离的。前端的应用，会向后端发起HTTP的请求。当后端遇到了异常，通常会给到前端一个对应的错误代码。前端的应用根据这个错误代码，在应用层面去进行错误处理。在不能处理的时候，它会根据错误代码向用户显示错误信息。</p><pre><code>public class LastChanceHandler implements Thread.UncaughtExceptionHandler {\n    @Override\n    public void uncaughtException(Thread t, Throwable e) {\n        // do something here - log to file and upload to    server/close resources/delete files...\n    }\n}\n\nThread.setDefaultUncaughtExceptionHandler(new LastChanceHandler());\n</code></pre><center><span class=\"reference\">Java里面，可以设定ExceptionHandler，来处理线程执行中的异常情况</span></center><p>再比如说，Java里面，我们使用一个线程池去运行调度任务的时候，可以指定一个异常处理程序。对于各个线程在执行任务出现的异常情况，我们是通过异常处理程序进行处理，而不是在实际的任务代码里处理。这样，我们就把业务处理代码就和异常处理代码的流程分开了。</p><h2>异常的分类：中断、陷阱、故障和中止</h2><p>我在前面说了，异常可以由硬件触发，也可以由软件触发。那我们平时会碰到哪些异常呢？下面我们就一起来看看。</p><p>第一种异常叫<strong>中断</strong>（Interrupt）。顾名思义，自然就是程序在执行到一半的时候，被打断了。这个打断执行的信号，来自于CPU外部的I/O设备。你在键盘上按下一个按键，就会对应触发一个相应的信号到达CPU里面。CPU里面某个开关的值发生了变化，也就触发了一个中断类型的异常。</p><p>第二种异常叫<strong>陷阱</strong>（Trap）。陷阱，其实是我们程序员“故意“主动触发的异常。就好像你在程序里面打了一个断点，这个断点就是设下的一个\"陷阱\"。当程序的指令执行到这个位置的时候，就掉到了这个陷阱当中。然后，对应的异常处理程序就会来处理这个\"陷阱\"当中的猎物。</p><p>最常见的一类陷阱，发生在我们的应用程序调用系统调用的时候，也就是从程序的用户态切换到内核态的时候。我们在<a href=\"https://time.geekbang.org/column/article/92215\">第3讲</a>讲CPU性能的时候说过，可以用Linux下的time指令，去查看一个程序运行实际花费的时间，里面有在用户态花费的时间（user time），也有在内核态发生的时间（system time）。</p><p>我们的应用程序通过系统调用去读取文件、创建进程，其实也是通过触发一次陷阱来进行的。这是因为，我们用户态的应用程序没有权限来做这些事情，需要把对应的流程转交给有权限的异常处理程序来进行。</p><p>第三种异常叫<strong>故障</strong>（Fault）。它和陷阱的区别在于，陷阱是我们开发程序的时候刻意触发的异常，而故障通常不是。比如，我们在程序执行的过程中，进行加法计算发生了溢出，其实就是故障类型的异常。这个异常不是我们在开发的时候计划内的，也一样需要有对应的异常处理程序去处理。</p><p>故障和陷阱、中断的一个重要区别是，故障在异常程序处理完成之后，仍然回来处理当前的指令，而不是去执行程序中的下一条指令。因为当前的指令因为故障的原因并没有成功执行完成。</p><p>最后一种异常叫<strong>中止</strong>（Abort）。与其说这是一种异常类型，不如说这是故障的一种特殊情况。当CPU遇到了故障，但是恢复不过来的时候，程序就不得不中止了。</p><p><img src=\"https://static001.geekbang.org/resource/image/da/a8/da0117e669ebd2bd06c19beaf12d0da8.jpeg?wh=1906*856\" alt=\"\"></p><p>在这四种异常里，中断异常的信号来自系统外部，而不是在程序自己执行的过程中，所以我们称之为“异步”类型的异常。而陷阱、故障以及中止类型的异常，是在程序执行的过程中发生的，所以我们称之为“同步“类型的异常。</p><p>在处理异常的过程当中，无论是异步的中断，还是同步的陷阱和故障，我们都是采用同一套处理流程，也就是上面所说的，“保存现场、异常代码查询、异常处理程序调用“。而中止类型的异常，其实是在故障类型异常的一种特殊情况。当故障发生，但是我们发现没有异常处理程序能够处理这种异常的情况下，程序就不得不进入中止状态，也就是最终会退出当前的程序执行。</p><h2>异常的处理：上下文切换</h2><p>在实际的异常处理程序执行之前，CPU需要去做一次“保存现场”的操作。这个保存现场的操作，和我在<a href=\"https://time.geekbang.org/column/article/94427\">第7讲</a>里讲解函数调用的过程非常相似。</p><p>因为切换到异常处理程序的时候，其实就好像是去调用一个异常处理函数。指令的控制权被切换到了另外一个\"函数\"里面，所以我们自然要把当前正在执行的指令去压栈。这样，我们才能在异常处理程序执行完成之后，重新回到当前的指令继续往下执行。</p><p>不过，切换到异常处理程序，比起函数调用，还是要更复杂一些。原因有下面几点。</p><p>第一点，因为异常情况往往发生在程序正常执行的预期之外，比如中断、故障发生的时候。所以，除了本来程序压栈要做的事情之外，我们还需要把CPU内当前运行程序用到的所有寄存器，都放到栈里面。最典型的就是条件码寄存器里面的内容。</p><p>第二点，像陷阱这样的异常，涉及程序指令在用户态和内核态之间的切换。对应压栈的时候，对应的数据是压到内核栈里，而不是程序栈里。</p><p>第三点，像故障这样的异常，在异常处理程序执行完成之后。从栈里返回出来，继续执行的不是顺序的下一条指令，而是故障发生的当前指令。因为当前指令因为故障没有正常执行成功，必须重新去执行一次。</p><p>所以，对于异常这样的处理流程，不像是顺序执行的指令间的函数调用关系。而是更像两个不同的独立进程之间在CPU层面的切换，所以这个过程我们称之为<strong>上下文切换</strong>（Context Switch）。</p><h2>总结延伸</h2><p>这一讲，我给你讲了计算机里的“异常”处理流程。这里的异常可以分成中断、陷阱、故障、中止这样四种情况。这四种异常，分别对应着I/O设备的输入、程序主动触发的状态切换、异常情况下的程序出错以及出错之后无可挽回的退出程序。</p><p>当CPU遭遇了异常的时候，计算机就需要有相应的应对措施。CPU会通过“查表法”来解决这个问题。在硬件层面和操作系统层面，各自定义了所有CPU可能会遇到的异常代码，并且通过这个异常代码，在异常表里面查询相应的异常处理程序。在捕捉异常的时候，我们的硬件CPU在进行相应的操作，而在处理异常层面，则是由作为软件的异常处理程序进行相应的操作。</p><p>而在实际处理异常之前，计算机需要先去做一个“保留现场”的操作。有了这个操作，我们才能在异常处理完成之后，重新回到之前执行的指令序列里面来。这个保留现场的操作，和我们之前讲解指令的函数调用很像。但是，因为“异常”和函数调用有一个很大的不同，那就是它的发生时间。函数调用的压栈操作我们在写程序的时候完全能够知道，而“异常”发生的时间却很不确定。所以，“异常”发生的时候，我们称之为发生了一次“上下文切换”（Context Switch）。这个时候，除了普通需要压栈的数据外，计算机还需要把所有寄存器信息都存储到栈里面去。</p><h2>推荐阅读</h2><p>关于异常和中断，《深入理解计算机系统》的第8章“异常控制流”部分，有非常深入和充分的讲解，推荐你认真阅读一下。</p><h2>课后思考</h2><p>很多教科书和网上的文章，会把中断分成软中断和硬中断。你能用自己的话说一说，什么是软中断，什么是硬中断吗？它们和我们今天说的中断、陷阱、故障以及中止又有什么关系呢？</p><p>欢迎留言和我分享你的疑惑和见解。你也可以把今天的内容，分享给你的朋友，和他一起学习和进步。</p><p></p>","neighbors":{"left":{"article_title":"27 | SIMD：如何加速矩阵乘法？","id":103433},"right":{"article_title":"29 | CISC和RISC：为什么手机芯片都是ARM？","id":104259}},"comments":[{"had_liked":false,"id":111209,"user_name":"Penn","can_delete":false,"product_type":"c1","uid":1044701,"ip_address":"","ucode":"C6A4AA2259068F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AkO5s3tJhibth9nelCNdU5qD4J3aEn8OpBhOHluicWgEj1SbcGC6e9rccK8DrfJtRibJT5g6iamfIibt5xX7ketDF6w/132","comment_is_top":false,"comment_ctime":1562511481,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"263555516537","product_id":100026001,"comment_content":"linux内核中有软中断和硬中断的说法。比如网卡收包时，硬中断对应的概念是中断，即网卡利用信号“告知”CPU有包到来，CPU执行中断向量对应的处理程序，即收到的包拷贝到计算机的内存，然后“通知”软中断有任务需要处理，中断处理程序返回；软中断是一个内核级别的进程（线程），没有对应到本次课程的概念，用于处理硬中断余下的工作，比如网卡收的包需要向上送给协议栈处理。","like_count":61,"discussions":[{"author":{"id":1067809,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4b/21/1a37607a.jpg","nickname":"後","note":"","ucode":"3A1B3140922923","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390822,"discussion_content":"说的这个应该是中断上半部和下半部","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1630058514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222236,"user_name":"逆舟","can_delete":false,"product_type":"c1","uid":1270780,"ip_address":"","ucode":"B303B4B8E10E0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8AdNibZHbZriaqLQZrNPcX8hVOpY91o0ELl7eOq7qy3aTibjia10ymIsKUKW6Ucs9SuXBDWlg6sjahw/132","comment_is_top":false,"comment_ctime":1590722758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96080003270","product_id":100026001,"comment_content":"网上搜到的思考题答案，分享给大家：<br>硬中断由与系统相连的外设(比如网卡、硬盘)自动产生的。主要是用来通知操作系统系统外设状态的变化。<br>软中断是一组静态定义的下半部分接口，可以在所有的处理器上同时执行，即使两个类型相同也可以。但是一个软中断不会抢占另外的一个软中断，唯一可以抢占软中断的硬中断。<br>为了满足实时系统的要求，中断处理应该越快越好。编写驱动程序的时候，一个中断产生之后，内核在中断处理函数中可能需要完成很多工作。但是中断处理函数的处理是关闭了中断的。也就是说在响应中断时，系统不能再次响应外部的其它中断。这样的后果会造成有可能丢失外部中断。于是，linux内核设计出了一种架构，中断函数需要处理的任务分为两部分，一部分在中断处理函数中执行，这时系统关闭中断。另外一部分在软件中断中执行，这个时候开启中断，系统可以响应外部中断。<br>Linux为了实现这个特点，当中断发生的时候硬中断处理那些短时间，就可以完成的工作，而将那些处理事件比较长的工作，放到中断之后来完成，也就是软中断(softirq)来完成。","like_count":22},{"had_liked":false,"id":110983,"user_name":"栋能","can_delete":false,"product_type":"c1","uid":1006849,"ip_address":"","ucode":"8BD9C939D3E8E1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/01/9cd84003.jpg","comment_is_top":false,"comment_ctime":1562409400,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"27332213176","product_id":100026001,"comment_content":"有点疑问，文中说“故障异常经异常处理程序处理之后会回到故障发生的指令位置，并再执行一次”，并还举例说加法溢出是故障异常，既然按这例子讲，难道再加一次就不会异常了吗？这可能会无限陷入故障异常的死胡同？","like_count":6,"discussions":[{"author":{"id":1068559,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4e/0f/c43745e7.jpg","nickname":"hola","note":"","ucode":"1872B1B3FCEAFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49962,"discussion_content":"故障：最典型的其实就是缺页故障（但是经常表达成缺页异常），当程序需要读取内存数据，而此时相应的数据并不在内存中的时候，会触发缺页故障。等缺页故障处理程序处理好的时候，此时重新回到故障发生的指令--即读取内存数据，此时内存中已经有这个数据啦，就不会再发生缺页故障了~","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1573653492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76964,"discussion_content":"应该是不同的异常处理程序的跳转逻辑不一样，比如缺页异常，就需要在执行一次当前指令（对错误的一种恢复机制），其他异常可能就需要执行下一条指令。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575874006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38838,"discussion_content":"说下我的理解，这种应该属于中止异常，故障异常文章列举的内存缺页是可以通过刷新内存来修复的吧……","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571840985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/fe/00ddeb81.jpg","nickname":"learn more","note":"","ucode":"0EF628B2E0F95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40176,"discussion_content":"同问，为什么会再执行一次呢？难道不是执行下一条指令或直接退出吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572098003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108361,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1561728360,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27331532136","product_id":100026001,"comment_content":"硬中断类似键鼠，网卡这些外接设备发出的中断请求，同比与上文的中断。<br>软中断类似程序内部IO的操作，由程序内部发出中断请求，同比上文的陷阱。","like_count":6,"discussions":[{"author":{"id":1484093,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/3d/e61fef0b.jpg","nickname":"曾义（Zack）","note":"","ucode":"C4CBF80D7515F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275598,"discussion_content":"这个说法不正确，Penn的说法是对的。硬中断是发生中断后立刻处理的部分，一般短小精悍不会占用很长时间，软中断是处理剩下的部分，实时性要求没那么高，处理过程会长一些，由内核线程处理。一般硬中断和软中断分别对应中断的top half和bottom half。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590736964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2303222,"avatar":"","nickname":"Geek_f7bc9b","note":"","ucode":"83EBA43585B2B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327903,"discussion_content":"下半部中断了解一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606014488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172367,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1579162000,"is_pvip":false,"replies":[{"id":"68098","content":"-_-_aaa同学，<br><br>你好，“上下文Context”并不是指具体的进程，而是可以理解为正在执行的进程所使用的各种“信息”，比如当时的寄存器，栈里面的各种数据和元数据。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580634586,"ip_address":"","comment_id":172367,"utype":1}],"discussion_count":1,"race_medal":1,"score":"18759031184","product_id":100026001,"comment_content":"文中“而是更像两个不同的独立进程之间在 CPU 层面的切换，所以这个过程我们称之为上下文切换（Context Switch）。”，那么，上下文就是运行在cpu层面的一个独立的进程？","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481712,"discussion_content":"-_-_aaa同学，\n\n你好，“上下文Context”并不是指具体的进程，而是可以理解为正在执行的进程所使用的各种“信息”，比如当时的寄存器，栈里面的各种数据和元数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580634586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247224,"user_name":"陈小狮","can_delete":false,"product_type":"c1","uid":1458026,"ip_address":"","ucode":"7679BA5775DC9C","user_header":"https://static001.geekbang.org/account/avatar/00/16/3f/6a/e68b9f23.jpg","comment_is_top":false,"comment_ctime":1599636409,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14484538297","product_id":100026001,"comment_content":"老师，请问java语言中的try..catch翻译成机器语言时是不是就是向异常表中注册了异常码？<br>另外，开发规范中说try..catch不要写在for循环里面，是不是因为以下两点？：<br>        1.for循环里try..catch会导致多次注册异常表？<br>        2.一旦for循环里面的代码发生异常，如果try..catch写在for循环里面，在执行catch异常处理前会发生[保存现场+上下文切换]，catch异常处理完成之后上下文切换回来，继续执行for循环里的代码通常情况下可能会再次引发异常处理。而如果放在for循环外层，一旦发生异常，异常处理完毕，则会继续执行后面的代码逻辑。<br>       望解答，谢谢老师！","like_count":3,"discussions":[{"author":{"id":1589362,"avatar":"https://static001.geekbang.org/account/avatar/00/18/40/72/2d97df54.jpg","nickname":"随风","note":"","ucode":"DB816239218E5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572806,"discussion_content":"不是的，异常表注册一般是操作系统在初始化的时候干的事，高级语言的try...catch一般是通过跳转指令来处理的，个人理解，处理的逻辑是一样的，但是层级和位置不一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1652967393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574122,"discussion_content":"想多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653837129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581375,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PXT6vnzzI60Pkgh6bTNr9Q3S0OoYvyUgYupqQTVPs8A5z7VEf0ea8ZvCCzBvj5U68PaF5DPLibfUSENfZt0jLPA/132","nickname":"Geek_jychen","note":"","ucode":"183409DA65485F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561916,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649745456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177540,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","nickname":"小文","note":"","ucode":"974071FAA5F173","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403798,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634140852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163808,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576805251,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10166739843","product_id":100026001,"comment_content":"软中断，顾名思义，就是程序在执行的过程中所发生的异常，对应的是异步<br>硬中断，顾名思义，就是程序的异常来自于外部的系统，而不是正在执行的程序，对应的是同步","like_count":2,"discussions":[{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539443,"discussion_content":"这样理解， 好像也对， 哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639719635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255917,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1603456219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898423515","product_id":100026001,"comment_content":"这一讲，我给你讲了计算机里的“异常”处理流程。这里的异常可以分成中断、陷阱、故障、中止这样四种情况。这四种异常，分别对应着 I&#47;O 设备的输入、程序主动触发的状态切换、异常情况下的程序出错以及出错之后无可挽回的退出程序。<br>当 CPU 遭遇了异常的时候，计算机就需要有相应的应对措施。CPU 会通过“查表法”来解决这个问题。在硬件层面和操作系统层面，各自定义了所有 CPU 可能会遇到的异常代码，并且通过这个异常代码，在异常表里面查询相应的异常处理程序。在捕捉异常的时候，我们的硬件 CPU 在进行相应的操作，而在处理异常层面，则是由作为软件的异常处理程序进行相应的操作。<br>而在实际处理异常之前，计算机需要先去做一个“保留现场”的操作。有了这个操作，我们才能在异常处理完成之后，重新回到之前执行的指令序列里面来。这个保留现场的操作，和我们之前讲解指令的函数调用很像。但是，因为“异常”和函数调用有一个很大的不同，那就是它的发生时间。函数调用的压栈操作我们在写程序的时候完全能够知道，而“异常”发生的时间却很不确定。所以，“异常”发生的时候，我们称之为发生了一次“上下文切换”（Context Switch）。这个时候，除了普通需要压栈的数据外，计算机还需要把所有寄存器信息都存储到栈里面去。","like_count":1},{"had_liked":false,"id":232014,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1593831561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888798857","product_id":100026001,"comment_content":"硬中断就是硬件向cpu发出的信号，包括时钟信号、触摸屏触摸信号等，软中断就是陷阱，是程序进入内核态的方法，用于切换cpu模式。","like_count":1},{"had_liked":false,"id":108341,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1561722816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856690112","product_id":100026001,"comment_content":"老师请问一下， 是不是无论哪种异常发生都会有一次上下文切换？","like_count":1},{"had_liked":false,"id":108313,"user_name":"chengzise","can_delete":false,"product_type":"c1","uid":1006070,"ip_address":"","ucode":"1C27D216359894","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/f6/ed66d1c1.jpg","comment_is_top":false,"comment_ctime":1561716285,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5856683581","product_id":100026001,"comment_content":"软件中断对应今天稳重的陷阱。<br>硬中断对应今天文中的中断，有的还会包含故障，也有的把故障单独归类为异常。","like_count":1,"discussions":[{"author":{"id":2303222,"avatar":"","nickname":"Geek_f7bc9b","note":"","ucode":"83EBA43585B2B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327905,"discussion_content":"你说的不对，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606014532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539444,"discussion_content":"我也就觉得你说的不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639719673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359280,"user_name":"温雅小公子","can_delete":false,"product_type":"c1","uid":2260390,"ip_address":"河北","ucode":"9EA63E36D7C85C","user_header":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","comment_is_top":false,"comment_ctime":1665391129,"is_pvip":true,"discussion_count":1,"race_medal":5,"score":"1665391129","product_id":100026001,"comment_content":"想必老师说的中断就是外中断，异常就是内中断。","like_count":0,"discussions":[{"author":{"id":3068994,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/d4/42/0cd866ed.jpg","nickname":"瓜扯","note":"","ucode":"2D32FB8A5F15DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592123,"discussion_content":"我也这么觉得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667132520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349889,"user_name":"一頭蠻牛","can_delete":false,"product_type":"c1","uid":1209653,"ip_address":"","ucode":"887E596A1DBF2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","comment_is_top":false,"comment_ctime":1656412500,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1656412500","product_id":100026001,"comment_content":"老师 您好 ，请问查表这个逻辑是记录在哪里的? ","like_count":0},{"had_liked":false,"id":332990,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1643944226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643944226","product_id":100026001,"comment_content":"加法溢出是故障？故障处理完毕后，继续执行同一条指令，那岂不是无限死循环？","like_count":0},{"had_liked":false,"id":256358,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1603608317,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1603608317","product_id":100026001,"comment_content":"上下文切换的时候为什么要“把 CPU 内当前运行程序用到的所有寄存器，都放到栈里面”?","like_count":0,"discussions":[{"author":{"id":1589208,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITcwicqBDYzXtLibUtian172tPs7rJpqG1Vab4oGjnguA9ziaYjDCILSGaS6qRiakvRdUEhdmSG0BGPKw/132","nickname":"大饶Raysir","note":"","ucode":"0AFA191420A30D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323225,"discussion_content":"恢复进程","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604902171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2873830,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/d9/e6/c5c3bd12.jpg","nickname":"志","note":"","ucode":"0FA13AD4AD6682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556111,"discussion_content":"中断发生的时候，指令周期甚至都没有完成。参考 ++i","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647221244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256355,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1603607451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603607451","product_id":100026001,"comment_content":"“I&#47;O 发出的信号的异常代码，是由操作系统来分配的，也就是由软件来设定的。而像加法溢出这样的异常代码，则是由 CPU 预先分配好的，也就是由硬件来分配的。”这句话该怎么理解 ？“异常代码”指的是什么 ？","like_count":0},{"had_liked":false,"id":256354,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1603607325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603607325","product_id":100026001,"comment_content":"CPU是怎样检测到“事件”的 ？","like_count":0},{"had_liked":false,"id":251976,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1602033417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602033417","product_id":100026001,"comment_content":"软中断：系统调用<br>硬中断：硬件中断","like_count":0},{"had_liked":false,"id":240206,"user_name":"Ethan","can_delete":false,"product_type":"c1","uid":1810189,"ip_address":"","ucode":"75F613D58909DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZHw73tgCqGKhvticUWGRz4icgicu4hFWfKtacoFJeItH7maNuNUmjnEgDTJvOibwUWgGV0p6guNPibMVWDV4BUmEmlA/132","comment_is_top":false,"comment_ctime":1596788012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596788012","product_id":100026001,"comment_content":"老师，Java中的多线程并发执行是不是属于【陷阱】？","like_count":0},{"had_liked":false,"id":208938,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1587467518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587467518","product_id":100026001,"comment_content":"异常和中断:<br>计算机会为每一种异常分配一个异常代码，遇到异常后得到这个代码，会在异常表中查到对应的处理程序的地址，然后执行相应的程序。<br>异常的类型:中断（来自外部的中断信号），陷阱（程序主动设计的异常，比如程序中time的调用），故障（意料之外的异常，处理完需回到原程序），中止（遇到故障，恢复不过来的情况）。<br>异常的处理比函数复杂:意料之外的情况，需要把当前CPU用到的寄存器都放到栈里，有时涉及到用户态和内核态的切换，有时需要重复执行指令。称为上下文切换","like_count":0},{"had_liked":false,"id":160121,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1575874661,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575874661","product_id":100026001,"comment_content":"软中断，是程序执行过程中产生的异常，对应同步异常，包含陷阱，故障，终止。硬中断，是硬件产生的中断，对应异步异常。","like_count":0,"discussions":[{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539445,"discussion_content":"不对， 同步异步反了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639719753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156593,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574919395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574919395","product_id":100026001,"comment_content":"1.异常分为软件异常 硬件异常<br>2. 异常的处理：关于异常，最有意思的一点就是，它其实是一个硬件和软件组合到一起的处理过程。异常的前半生，也就是异常的发生和捕捉，是在硬件层面完成的。但是异常的后半生，也就是说，异常的处理，其实是由软件来完成的。<br>3.异常代码的分配：这些异常代码里，I&#47;O 发出的信号的异常代码，是由操作系统来分配的，也就是由软件来设定的。而像加法溢出这样的异常代码，则是由 CPU 预先分配好的，也就是由硬件来分配的。这又是另一个软件和硬件共同组合来处理异常的过程。<br>4. 异常的分类：中断、陷阱、故障和中止","like_count":0},{"had_liked":false,"id":129995,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1567348338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567348338","product_id":100026001,"comment_content":"终于知道“中断、陷阱、故障和中止”的区别和共同点了<br><br>day28 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11425628.html","like_count":0},{"had_liked":false,"id":110936,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1562399128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562399128","product_id":100026001,"comment_content":"软中断是由软件来触发，它属于同步的中断。一般用来完成一些特定任务：int 3调试断点，以及之前Linux的int 80h系统调用<br><br>硬件中断是硬件组件触发的，可能是CPU内部异常，也可能是io外设的。外设的中断属于异步，它可能会在CPU指令执行期间触发。<br><br>不过，缺页异常我不太确定是不是CPU内部触发。","like_count":0},{"had_liked":false,"id":108368,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1561730146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561730146","product_id":100026001,"comment_content":"我理解的这一节讲的中断就应该属于硬中断，软中断一直不太理解，定时器、信号、网络收发都有归到软中断，貌似是中断分为及时响应部分上半部，推迟响应部分下半部，下半部是不是都归软中断呢？还请各位指正。","like_count":0},{"had_liked":false,"id":108330,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1561720558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561720558","product_id":100026001,"comment_content":"老师好有个问题IO阻塞，竞争同步锁都会设计到用户态和内核态的切换。这个切换是通过陷阱触发的么?","like_count":0},{"had_liked":false,"id":108253,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1561705579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561705579","product_id":100026001,"comment_content":"硬中断是由外部事件引起的因此具有随机性和突发性；<br>当中断发生的时候，硬中断处理那些短时间就可以完成的工作，而将那些处理事件比较长的工作，放到中断之后来完成","like_count":0},{"had_liked":false,"id":108215,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1561699648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561699648","product_id":100026001,"comment_content":"我们的应用程序通过系统调用去读取文件、创建进程，其实也是通过触发一次陷阱来进行的。这是因为，我们用户态的应用程序没有权限来做这些事情，需要把对应的流程转交给有权限的异常处理程序来进行。<br>老师好这句话可以理解为。所有的系统调用都是陷阱出发的么?用户态没法直接调用系统资源是么?","like_count":0}]}