{"id":461821,"title":"22｜函数：怎么结合多返回值进行错误处理？","content":"<p>你好，我是Tony Bai。</p><p>上一节课，我们开始了Go函数的学习，对Go语言中的函数已经有了基础的了解。那么，今天这节课，我们要再进一步，学习怎么做好函数设计。</p><p>在上节课的函数声明部分，我们提到，多返回值是Go语言函数，区别于其他主流静态编程语言中函数的一个重要特点。同时，它也是Go语言设计者建构Go语言错误处理机制的基础，而错误处理设计也是做函数设计的一个重要环节。</p><p>所以今天这节课，我们将会从Go语言的错误处理机制入手，围绕Go语言错误处理机制的原理、Go错误处理的常见策略，来学习一下如何结合函数的多返回值机制进行错误处理的设计。</p><p>这会让你建立起Go编码的统一错误处理思维，写出更健壮的、让你自己更有信心的Go代码。</p><p>要想做好错误处理设计，我们首先要先来了解Go语言错误设计的基本思路与原理。</p><h2>Go语言是如何进行错误处理的？</h2><p>采用什么错误处理方式，其实是一门编程语言在设计早期就要确定下来的基本机制，它在很大程度上影响着编程语言的语法形式、语言实现的难易程度，以及语言后续的演进方向。</p><p>我们前面已经多次提到，Go语言继承了“先祖”C语言的很多语法特性，在错误处理机制上也不例外，Go语言错误处理机制也是在C语言错误处理机制基础上的再创新。</p><!-- [[[read_end]]] --><p>那么这里，我们依然从源头讲起，先看看前辈C语言的错误处理机制。在C语言中，我们通常用一个类型为整型的函数返回值作为错误状态标识，函数调用者会基于值比较的方式，对这一代表错误状态的返回值进行检视。通常，这个返回值为0，就代表函数调用成功；如果这个返回值是其它值，那就代表函数调用出现错误。也就是说，函数调用者需要根据这个返回值代表的错误状态，来决定后续执行哪条错误处理路径上的代码。</p><p>C语言的这种简单的、<strong>基于错误值比较</strong>的错误处理机制有什么优点呢？</p><p>首先，它让每个开发人员必须显式地去关注和处理每个错误，经过显式错误处理的代码会更健壮，也会让开发人员对这些代码更有信心。</p><p>另外，你也可以发现，这些错误就是普通的值，所以我们不需要用额外的语言机制去处理它们，我们只需利用已有的语言机制，像处理其他普通类型值一样的去处理错误就可以了，这也让代码更容易调试，更容易针对每个错误处理的决策分支进行测试覆盖。C语言错误处理机制的这种简单与显式结合的特征，和Go语言设计哲学十分契合，于是Go语言设计者决定继承C语言这种错误处理机制。</p><p>不过C语言这种错误处理机制也有一些弊端。比如，由于C语言中的函数最多仅支持一个返回值，很多开发者会把这单一的返回值“一值多用”。什么意思呢？就是说，一个返回值，不仅要承载函数要返回给调用者的信息，又要承载函数调用的最终错误状态。比如C标准库中的<code>fprintf</code>函数的返回值就承载了两种含义。在正常情况下，它的返回值表示输出到FILE流中的字符数量，但如果出现错误，这个返回值就变成了一个负数，代表具体的错误值：</p><pre><code class=\"language-plain\">// stdio.h\nint fprintf(FILE * restrict stream, const char * restrict format, ...);\n</code></pre><p>特别是当返回值为其他类型，比如字符串的时候，我们还很难将它与错误状态融合到一起。这个时候，很多C开发人员要么使用输出参数，承载要返回给调用者的信息，要么自定义一个包含返回信息与错误状态的结构体，作为返回值类型。大家做法不一，就很难形成统一的错误处理策略。</p><p>为了避免这种情况，Go函数增加了<strong>多返回值机制</strong>，来支持错误状态与返回信息的分离，并建议开发者把要返回给调用者的信息和错误状态标识，分别放在不同的返回值中。</p><p>我们继续以上面C语言中的fprintf函数为例，Go标准库中有一个和功能等同的<code>fmt.Fprintf</code>的函数，这个函数就是使用一个独立的表示错误状态的返回值（如下面代码中的err），解决了fprintf函数中错误状态值与返回信息耦合在一起的问题：</p><pre><code class=\"language-go\">// fmt包\nfunc Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)\n</code></pre><p>我们看到，在fmt.Fprintf中，返回值n用来表示写入io.Writer中的字节个数，返回值err表示这个函数调用的最终状态，如果成功，err值就为nil，不成功就为特定的错误值。</p><p>另外我们还可以看到，fmt.Fprintf函数声明中代表错误状态的变量err的类型，并不是一个传统使用的整数类型，而是用了一个名为error的类型。</p><p>虽然，在Go语言中，我们依然可以像传统的C语言那样，用一个整型值来表示错误状态，但<strong>Go语言惯用法</strong>，是使用error这个接口类型表示错误，并且按惯例，我们通常将error类型返回值放在返回值列表的末尾，就像fmt.Fprintf函数声明中那样。</p><p>那么error接口类型究竟如何表示错误？我们又该如何构造一个满足error接口类型的错误值呢？我们继续向下看。</p><h2>error类型与错误值构造</h2><p>error接口是Go原生内置的类型，它的定义如下：</p><pre><code class=\"language-plain\">// $GOROOT/src/builtin/builtin.go\ntype error interface {\n    Error() string\n}\n</code></pre><p>任何实现了error的Error方法的类型的实例，都可以作为错误值赋值给error接口变量。那这里，问题就来了：<strong>难道为了构造一个错误值，我们还需要自定义一个新类型来实现error接口吗</strong>？</p><p>Go语言的设计者显然也想到了这一点，他们在标准库中提供了两种方便Go开发者构造错误值的方法： <code>errors.New</code> 和 <code>fmt.Errorf</code> 。使用这两种方法，我们可以轻松构造出一个满足error接口的错误值，就像下面代码这样：</p><pre><code class=\"language-plain\">err := errors.New(\"your first demo error\")\nerrWithCtx = fmt.Errorf(\"index %d is out of bounds\", i)\n</code></pre><p>这两种方法实际上返回的是同一个实现了error接口的类型的实例，这个未导出的类型就是 <code>errors.errorString</code>，它的定义是这样的：</p><pre><code class=\"language-plain\">// $GOROOT/src/errors/errors.go\n\ntype errorString struct {\n    s string\n}\n\nfunc (e *errorString) Error() string {\n    return e.s\n}\n</code></pre><p>大多数情况下，使用这两种方法构建的错误值就可以满足我们的需求了。但我们也要看到，虽然这两种构建错误值的方法很方便，但它们给错误处理者提供的错误上下文（Error Context）只限于以字符串形式呈现的信息，也就是Error方法返回的信息。</p><p>但在一些场景下，错误处理者需要从错误值中提取出更多信息，帮助他选择错误处理路径，显然这两种方法就不能满足了。这个时候，我们可以自定义错误类型来满足这一需求。比如：标准库中的net包就定义了一种携带额外错误上下文的错误类型：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/net.go\ntype OpError struct {\n    Op string\n    Net string\n    Source Addr\n    Addr Addr\n    Err error\n}\n</code></pre><p>这样，错误处理者就可以根据这个类型的错误值提供的额外上下文信息，比如Op、Net、Source等，做出错误处理路径的选择，比如下面标准库中的代码：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\nfunc isCommonNetReadError(err error) bool {\n    if err == io.EOF {\n        return true\n    }\n    if neterr, ok := err.(net.Error); ok &amp;&amp; neterr.Timeout() {\n        return true\n    }\n    if oe, ok := err.(*net.OpError); ok &amp;&amp; oe.Op == \"read\" {\n        return true\n    }\n    return false\n}\n</code></pre><p>我们看到，上面这段代码利用类型断言，判断error类型变量err的动态类型是否为 *net.OpError或 net.Error。如果err的动态类型是 *net.OpError，那么类型断言就会返回这个动态类型的值（存储在oe中），代码就可以通过判断它的Op字段是否为\"read\"来判断它是否为CommonNetRead类型的错误。</p><p>不过这里，你不用过多了解类型断言（Type Assertion）到底是什么，你只需要知道通过类型断言，我们可以判断接口类型的动态类型，以及获取它动态类型的值接可以了。后面我们在讲解接口类型的时候还会再细讲。</p><p>那么，使用error类型，而不是传统意义上的整型或其他类型作为错误类型，有什么好处呢？至少有这三点好处：</p><p><strong>第一点：统一了错误类型。</strong></p><p>如果不同开发者的代码、不同项目中的代码，甚至标准库中的代码，都统一以error接口变量的形式呈现错误类型，就能在提升代码可读性的同时，还更容易形成统一的错误处理策略。这个我们下面会细讲。</p><p><strong>第二点：错误是值。</strong></p><p>我们构造的错误都是值，也就是说，即便赋值给error这个接口类型变量，我们也可以像整型值那样对错误做“==”和“!=”的逻辑比较，函数调用者检视错误时的体验保持不变。</p><p><strong>第三点：易扩展，支持自定义错误上下文。</strong></p><p>虽然错误以error接口变量的形式统一呈现，但我们很容易通过自定义错误类型来扩展我们的错误上下文，就像前面的Go标准库的OpError类型那样。</p><p>error接口是错误值的提供者与错误值的检视者之间的契约。error接口的实现者负责提供错误上下文，供负责错误处理的代码使用。这种错误具体上下文与作为错误值类型的error接口类型的解耦，也体现了Go组合设计哲学中“正交”的理念。</p><p>到这里，我们已经基本了解了Go错误处理机制、统一的错误值类型，以及错误值构造方法。在这些基础上，我们可以再进一步，学习Go语言的几种错误处理的惯用策略，学习这些策略将有助于我们提升函数错误处理设计的能力。</p><h2>策略一：透明错误处理策略</h2><p>简单来说，Go语言中的错误处理，就是根据函数/方法返回的error类型变量中携带的错误值信息做决策，并选择后续代码执行路径的过程。</p><p>这样，最简单的错误策略莫过于完全不关心返回错误值携带的具体上下文信息，只要发生错误就进入唯一的错误处理执行路径，比如下面这段代码：</p><pre><code class=\"language-plain\">err := doSomething()\nif err != nil {\n    // 不关心err变量底层错误值所携带的具体上下文信息\n    // 执行简单错误处理逻辑并返回\n    ... ...\n    return err\n}\n</code></pre><p>这也是Go语言中<strong>最常见的错误处理策略</strong>，80%以上的Go错误处理情形都可以归类到这种策略下。在这种策略下，由于错误处理方并不关心错误值的上下文，所以错误值的构造方（如上面的函数 <code>doSomething</code>）可以直接使用Go标准库提供的两个基本错误值构造方法 <code>errors.New</code> 和<code> fmt.Errorf</code> 来构造错误值，就像下面这样：</p><pre><code class=\"language-plain\">func doSomething(...) error {\n    ... ...\n    return errors.New(\"some error occurred\")\n}\n</code></pre><p>这样构造出的错误值代表的上下文信息，对错误处理方是透明的，因此这种策略称为<strong>“透明错误处理策略”</strong>。在错误处理方不关心错误值上下文的前提下，透明错误处理策略能最大程度地减少错误处理方与错误值构造方之间的耦合关系。</p><h2>策略二：“哨兵”错误处理策略</h2><p>当错误处理方不能只根据“透明的错误值”就做出错误处理路径选取的情况下，错误处理方会尝试对返回的错误值进行检视，于是就有可能出现下面代码中的<strong>反模式</strong>：</p><pre><code class=\"language-plain\">data, err := b.Peek(1)\nif err != nil {\n    switch err.Error() {\n    case \"bufio: negative count\":\n        // ... ...\n        return\n    case \"bufio: buffer full\":\n        // ... ...\n        return\n    case \"bufio: invalid use of UnreadByte\":\n        // ... ...\n        return\n    default:\n        // ... ...\n        return\n    }\n}\n</code></pre><p>简单来说，反模式就是，错误处理方以透明错误值所能提供的唯一上下文信息（描述错误的字符串），作为错误处理路径选择的依据。但这种“反模式”会造成严重的<strong>隐式耦合</strong>。这也就意味着，错误值构造方不经意间的一次错误描述字符串的改动，都会造成错误处理方处理行为的变化，并且这种通过字符串比较的方式，对错误值进行检视的性能也很差。</p><p>那这有什么办法吗？Go标准库采用了定义导出的（Exported）“哨兵”错误值的方式，来辅助错误处理方检视（inspect）错误值并做出错误处理分支的决策，比如下面的bufio包中定义的“哨兵错误”：</p><pre><code class=\"language-plain\">// $GOROOT/src/bufio/bufio.go\nvar (\n    ErrInvalidUnreadByte = errors.New(\"bufio: invalid use of UnreadByte\")\n    ErrInvalidUnreadRune = errors.New(\"bufio: invalid use of UnreadRune\")\n    ErrBufferFull        = errors.New(\"bufio: buffer full\")\n    ErrNegativeCount     = errors.New(\"bufio: negative count\")\n)\n</code></pre><p>下面的代码片段利用了上面的哨兵错误，进行错误处理分支的决策：</p><pre><code class=\"language-plain\">data, err := b.Peek(1)\nif err != nil {\n    switch err {\n    case bufio.ErrNegativeCount:\n        // ... ...\n        return\n    case bufio.ErrBufferFull:\n        // ... ...\n        return\n    case bufio.ErrInvalidUnreadByte:\n        // ... ...\n        return\n    default:\n        // ... ...\n        return\n    }\n}\n</code></pre><p>你可以看到，一般“哨兵”错误值变量以ErrXXX格式命名。和透明错误策略相比，“哨兵”策略让错误处理方在有检视错误值的需求时候，可以“有的放矢”。</p><p>不过，对于API的开发者而言，暴露“哨兵”错误值也意味着这些错误值和包的公共函数/方法一起成为了API的一部分。一旦发布出去，开发者就要对它进行很好的维护。而“哨兵”错误值也让使用这些值的错误处理方对它产生了依赖。</p><p>从Go 1.13版本开始，标准库errors包提供了Is函数用于错误处理方对错误值的检视。Is函数类似于把一个error类型变量与“哨兵”错误值进行比较，比如下面代码：</p><pre><code class=\"language-plain\">// 类似 if err == ErrOutOfBounds{ … }\nif errors.Is(err, ErrOutOfBounds) {\n    // 越界的错误处理\n}\n</code></pre><p>不同的是，如果error类型变量的底层错误值是一个包装错误（Wrapped Error），errors.Is方法会沿着该包装错误所在错误链（Error Chain)，与链上所有被包装的错误（Wrapped Error）进行比较，直至找到一个匹配的错误为止。下面是Is函数应用的一个例子：</p><pre><code class=\"language-plain\">var ErrSentinel = errors.New(\"the underlying sentinel error\")\n\nfunc main() {\n\terr1 := fmt.Errorf(\"wrap sentinel: %w\", ErrSentinel)\n\terr2 := fmt.Errorf(\"wrap err1: %w\", err1)\n    println(err2 == ErrSentinel) //false\n\tif errors.Is(err2, ErrSentinel) {\n\t\tprintln(\"err2 is ErrSentinel\")\n\t\treturn\n\t}\n\n\tprintln(\"err2 is not ErrSentinel\")\n}\n</code></pre><p>在这个例子中，我们通过fmt.Errorf函数，并且使用%w创建包装错误变量err1和err2，其中err1实现了对ErrSentinel这个“哨兵错误值”的包装，而err2又对err1进行了包装，这样就形成了一条错误链。位于错误链最上层的是err2，位于最底层的是ErrSentinel。之后，我们再分别通过值比较和errors.Is这两种方法，判断err2与ErrSentinel的关系。运行上述代码，我们会看到如下结果：</p><pre><code class=\"language-plain\">false\nerr2 is ErrSentinel\n</code></pre><p>我们看到，通过比较操作符对err2与ErrSentinel进行比较后，我们发现这二者并不相同。而errors.Is函数则会沿着err2所在错误链，向下找到被包装到最底层的“哨兵”错误值<code>ErrSentinel</code>。</p><p>所以，如果你使用的是Go 1.13及后续版本，我建议你尽量使用<code>errors.Is</code>方法去检视某个错误值是否就是某个预期错误值，或者包装了某个特定的“哨兵”错误值。</p><h2>策略三：错误值类型检视策略</h2><p>上面我们看到，基于Go标准库提供的错误值构造方法构造的“哨兵”错误值，除了让错误处理方可以“有的放矢”的进行值比较之外，并没有提供其他有效的错误上下文信息。那如果遇到错误处理方需要错误值提供更多的“错误上下文”的情况，上面这些错误处理策略和错误值构造方式都无法满足。</p><p>这种情况下，我们需要通过自定义错误类型的构造错误值的方式，来提供更多的“错误上下文”信息。并且，由于错误值都通过error接口变量统一呈现，要得到底层错误类型携带的错误上下文信息，错误处理方需要使用Go提供的<strong>类型断言机制</strong>（Type Assertion）或<strong>类型选择机制</strong>（Type Switch），这种错误处理方式，我称之为<strong>错误值类型检视策略</strong>。</p><p>我们来看一个标准库中的例子加深下理解，这个json包中自定义了一个 <code>UnmarshalTypeError</code> 的错误类型：</p><pre><code class=\"language-plain\">// $GOROOT/src/encoding/json/decode.go\ntype UnmarshalTypeError struct {\n    Value  string       \n    Type   reflect.Type \n    Offset int64        \n    Struct string       \n    Field  string      \n}\n</code></pre><p>错误处理方可以通过错误类型检视策略，获得更多错误值的错误上下文信息，下面就是利用这一策略的json包的一个方法的实现：</p><pre><code class=\"language-plain\">// $GOROOT/src/encoding/json/decode.go\nfunc (d *decodeState) addErrorContext(err error) error {\n    if d.errorContext.Struct != nil || len(d.errorContext.FieldStack) &gt; 0 {\n        switch err := err.(type) {\n        case *UnmarshalTypeError:\n            err.Struct = d.errorContext.Struct.Name()\n            err.Field = strings.Join(d.errorContext.FieldStack, \".\")\n            return err\n        }\n    }\n    return err\n}\n</code></pre><p>我们看到，这段代码通过类型switch语句得到了err变量代表的动态类型和值，然后在匹配的case分支中利用错误上下文信息进行处理。</p><p>这里，一般自定义导出的错误类型以 <code>XXXError</code> 的形式命名。和“哨兵”错误处理策略一样，错误值类型检视策略，由于暴露了自定义的错误类型给错误处理方，因此这些错误类型也和包的公共函数/方法一起，成为了API的一部分。一旦发布出去，开发者就要对它们进行很好的维护。而它们也让使用这些类型进行检视的错误处理方对其产生了依赖。</p><p>从Go 1.13版本开始，标准库errors包提供了<code>As</code>函数给错误处理方检视错误值。<code>As</code>函数类似于通过类型断言判断一个error类型变量是否为特定的自定义错误类型，如下面代码所示：</p><pre><code class=\"language-plain\">// 类似 if e, ok := err.(*MyError); ok { … }\nvar e *MyError\nif errors.As(err, &amp;e) {\n    // 如果err类型为*MyError，变量e将被设置为对应的错误值\n}\n</code></pre><p>不同的是，如果error类型变量的动态错误值是一个包装错误，<code>errors.As</code>函数会沿着该包装错误所在错误链，与链上所有被包装的错误的类型进行比较，直至找到一个匹配的错误类型，就像errors.Is函数那样。下面是<code>As</code>函数应用的一个例子：</p><pre><code class=\"language-plain\">type MyError struct {\n    e string\n}\n\nfunc (e *MyError) Error() string {\n    return e.e\n}\n\nfunc main() {\n    var err = &amp;MyError{\"MyError error demo\"}\n    err1 := fmt.Errorf(\"wrap err: %w\", err)\n    err2 := fmt.Errorf(\"wrap err1: %w\", err1)\n    var e *MyError\n    if errors.As(err2, &amp;e) {\n        println(\"MyError is on the chain of err2\")\n        println(e == err)                  \n        return                             \n    }                                      \n    println(\"MyError is not on the chain of err2\")\n} \n</code></pre><p>运行上述代码会得到：</p><pre><code class=\"language-plain\">MyError is on the chain of err2\ntrue\n</code></pre><p>我们看到，<code>errors.As</code> 函数沿着err2所在错误链向下找到了被包装到最深处的错误值，并将err2与其类型<code> * MyError</code> 成功匹配。匹配成功后，errors.As会将匹配到的错误值存储到As函数的第二个参数中，这也是为什么 <code>println(e == err)</code>输出true的原因。</p><p>所以，如果你使用的是Go 1.13及后续版本，请尽量使用 <code>errors.As</code>方法去检视某个错误值是否是某自定义错误类型的实例。</p><h2>策略四：错误行为特征检视策略</h2><p>不知道你注意到没有，在前面我们已经讲过的三种策略中，其实只有第一种策略，也就是“透明错误处理策略”，有效降低了错误的构造方与错误处理方两者之间的耦合。虽然前面的策略二和策略三，都是我们实际编码中有效的错误处理策略，但其实使用这两种策略的代码，依然在错误的构造方与错误处理方两者之间建立了耦合。</p><p>那么除了“透明错误处理策略”外，我们是否还有手段可以降低错误处理方与错误值构造方的耦合呢？</p><p>在Go标准库中，我们发现了这样一种错误处理方式：<strong>将某个包中的错误类型归类，统一提取出一些公共的错误行为特征，并将这些错误行为特征放入一个公开的接口类型中</strong>。这种方式也被叫做错误行为特征检视策略。</p><p>以标准库中的<code>net包</code>为例，它将包内的所有错误类型的公共行为特征抽象并放入 <code>net.Error</code> 这个接口中，如下面代码：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/net.go\ntype Error interface {\n    error\n    Timeout() bool  \n    Temporary() bool\n}\n</code></pre><p>我们看到，net.Error接口包含两个用于判断错误行为特征的方法：Timeout用来判断是否是超时（Timeout）错误，Temporary用于判断是否是临时（Temporary）错误。</p><p>而错误处理方只需要依赖这个公共接口，就可以检视具体错误值的错误行为特征信息，并根据这些信息做出后续错误处理分支选择的决策。</p><p>这里，我们再看一个http包使用错误行为特征检视策略进行错误处理的例子，加深下理解：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/http/server.go\nfunc (srv *Server) Serve(l net.Listener) error {\n    ... ...\n    for {\n        rw, e := l.Accept()\n        if e != nil {\n            select {\n            case &lt;-srv.getDoneChan():\n                return ErrServerClosed\n            default:\n            }\n            if ne, ok := e.(net.Error); ok &amp;&amp; ne.Temporary() {\n                // 注：这里对临时性(temporary)错误进行处理\n                ... ...\n                time.Sleep(tempDelay)\n                continue\n            }\n            return e\n        }\n        ...\n    }\n    ... ...\n}\n</code></pre><p>在上面代码中，Accept方法实际上返回的错误类型为 <code>*OpError</code>，它是net包中的一个自定义错误类型，它实现了错误公共特征接口 <code>net.Error</code>，如下代码所示：</p><pre><code class=\"language-plain\">// $GOROOT/src/net/net.go\ntype OpError struct {\n    ... ...\n    // Err is the error that occurred during the operation.\n    Err error\n}\n\ntype temporary interface {\n    Temporary() bool\n}\n\nfunc (e *OpError) Temporary() bool {\n  if ne, ok := e.Err.(*os.SyscallError); ok {\n      t, ok := ne.Err.(temporary)\n      return ok &amp;&amp; t.Temporary()\n  }\n  t, ok := e.Err.(temporary)\n  return ok &amp;&amp; t.Temporary()\n}\n</code></pre><p>因此，OpError实例可以被错误处理方通过 <code>net.Error</code> 接口的方法，判断它的行为是否满足Temporary或Timeout特征。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了。在这一讲中，我们重点讲解了Go函数设计中的一个重要环节：<strong>错误处理设计</strong>，希望通过这节课的内容，能帮助你建立起代码设计的意识，提高函数设计的水平。</p><p>Go语言继承了C语言的基于值比较的错误处理机制，但又在C语言的基础上做出了优化，也就是说，Go函数通过支持多返回值，消除了C语言中将错误状态值与返回给函数调用者的信息耦合在一起的弊端。</p><p>Go语言还统一错误类型为error接口类型，并提供了多种快速构建可赋值给error类型的错误值的函数，包括errors.New、fmt.Errorf等，我们还讲解了使用统一error作为错误类型的优点，你要深刻理解这一点。</p><p>基于Go错误处理机制、统一的错误值类型以及错误值构造方法的基础上，Go语言形成了多种错误处理的惯用策略，包括透明错误处理策略、“哨兵”错误处理策略、错误值类型检视策略以及错误行为特征检视策略等。这些策略都有适用的场合，但<strong>没有某种单一的错误处理策略可以适合所有项目或所有场合</strong>。</p><p>在错误处理策略选择上，我有一些个人的建议，你可以参考一下：</p><ul>\n<li>请尽量使用“透明错误”处理策略，降低错误处理方与错误值构造方之间的耦合；</li>\n<li>如果可以从众多错误类型中提取公共的错误行为特征，那么请尽量使用“错误行为特征检视策略”;</li>\n<li>在上述两种策略无法实施的情况下，再使用“哨兵”策略和“错误值类型检视”策略；</li>\n<li>Go 1.13及后续版本中，尽量用 <code>errors.Is</code> 和 <code>errors.As</code> 函数替换原先的错误检视比较语句。</li>\n</ul><h2>思考题</h2><p>这节课，我们列出了一些惯用的错误处理策略，当然，Go社区关于错误处理策略的讨论可能不止这些，你还见过哪些比较实用的错误处理策略吗？不妨在留言区和我们探讨一下吧。</p><p>欢迎你把这节课分享给更多对Go语言的错误处理机制感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","comments":[{"had_liked":false,"id":333611,"user_name":"ROYIS","can_delete":false,"product_type":"c1","uid":1488654,"ip_address":"","ucode":"3596FAAF46D4D6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b7/0e/739fd98a.jpg","comment_is_top":false,"comment_ctime":1644423288,"is_pvip":false,"replies":[{"id":121972,"content":"21讲已经覆盖的函数的基本语法，这一讲延展到函数设计之错误处理","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644591248,"ip_address":"","comment_id":333611,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这节课瞬间看不懂了，是不是最好先讲接口等其他知识点再讲这个呢？好像这节课跟函数没什么关系呀","like_count":14},{"had_liked":false,"id":346271,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1652964709,"is_pvip":false,"replies":[{"id":126369,"content":"&quot;是因为它们是在最外层的宇宙代码块里面声明的吗&quot; - 是的。\n\n这些预定义的类型由编译器特殊处理。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653056492,"ip_address":"","comment_id":346271,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"为什么内置的类型，如int、error等，首字母都是小写的，可以不用遵从首字母大写导出规则，到处都可以使用。是因为它们是在最外层的宇宙代码块里面声明的吗，这在实际上怎么实现的？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572933,"discussion_content":"&#34;是因为它们是在最外层的宇宙代码块里面声明的吗&#34; - 是的。\n\n这些预定义的类型由编译器特殊处理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653056492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327721,"user_name":"郑印","can_delete":false,"product_type":"c1","uid":1005282,"ip_address":"","ucode":"181B0FDE5E1532","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/e2/2dcab30d.jpg","comment_is_top":false,"comment_ctime":1640250847,"is_pvip":false,"replies":[{"id":120344,"content":"目前真的没有。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641890556,"ip_address":"","comment_id":327721,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"如果函数调用太深，每次做返回值判断都需要写，if err != nil { return err; } 感觉会多出好多的模板代码，有什么好的解决办法吗？","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545268,"discussion_content":"目前真的没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641890556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603074,"discussion_content":"尝试从设计改进，减少调用层次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324471,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1638449377,"is_pvip":true,"replies":[{"id":117978,"content":"上生产的代码务必不要忽略错误。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829909,"ip_address":"","comment_id":324471,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"忽略错误算不算实用的策略呢\n","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536605,"discussion_content":"上生产的代码务必不要忽略错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324277,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1638354121,"is_pvip":false,"replies":[{"id":117973,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829131,"ip_address":"","comment_id":324277,"utype":1}],"discussion_count":10,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"if err != nil { return err; }\n\n看错误怎么能少得了这个 🐶","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536600,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584014,"discussion_content":"对错误有了新的认识，错误是值，既然是普通的值就可以用编程的方式去处理错误，可以很优雅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660559633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1979191,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/33/37/6088a9a2.jpg","nickname":"蜘蛛别过来","note":"","ucode":"D579C1F5AC8F09","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550396,"discussion_content":"看见了，满意了，下一节见😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644507113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535632,"discussion_content":"同学这里想表达的是什么呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638500591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537307,"discussion_content":"错误必须显示处理，如果不主动忽略你的代码里就充满了上面这句话","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639025346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535632,"ip_address":"","group_id":0},"score":537307,"extra":""},{"author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539415,"discussion_content":"不主动忽略？不太懂哎\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639710640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537307,"ip_address":"","group_id":0},"score":539415,"extra":""},{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540513,"discussion_content":"就是使用空白标识符","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640073567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539415,"ip_address":"","group_id":0},"score":540513,"extra":""}]}]},{"had_liked":false,"id":330185,"user_name":"🦉","can_delete":false,"product_type":"c1","uid":2075410,"ip_address":"","ucode":"0E247D85D2BFEC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ab/12/170e5c8a.jpg","comment_is_top":false,"comment_ctime":1641845703,"is_pvip":false,"replies":[{"id":120539,"content":"对，&amp;e是pointer e的地址。因为var err = &amp;MyError{&quot;MyError error demo&quot;}中，err是一个MyError类型的指针，Error方法是*MyError类型的。\n\nAs函数要求，第二个参数应该是实现了error接口的类型的指针。这里*MyError实现了error接口，于是As的第二个参数应该是**MyError类型。\n\n当然这个例子也可以改写一下：\n\npackage main\n\nimport (\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n)\n\ntype MyError struct {\n\te string\n}\n\nfunc (e MyError) Error() string {\n\treturn e.e\n}\n\nfunc main() {\n\tvar err = MyError{&quot;MyError error demo&quot;}\n\terr1 := fmt.Errorf(&quot;wrap err: %w&quot;, err)\n\terr2 := fmt.Errorf(&quot;wrap err1: %w&quot;, err1)\n\tvar e MyError\n\tif errors.As(err2, &amp;e) {\n\t\tprintln(&quot;MyError is on the chain of err2&quot;)\n\t\tprintln(e == err)\n\t\treturn\n\t}\n\tprintln(&quot;MyError is not on the chain of err2&quot;)\n}\n\n这样就不用传**MyError了，传*MyError了。因为新版中MyError也实现了error接口。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642049788,"ip_address":"","comment_id":330185,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请问文章这里\nvar e *MyError\nif errors.As(err, &amp;e) {\n    &#47;&#47; 如果err类型为*MyError，变量e将被设置为对应的错误值\n}\n&amp;e是pointer e的地址吗？如果是的话为什么这样处理呢？谢谢","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545777,"discussion_content":"对，&amp;e是pointer e的地址。因为var err = &amp;MyError{&#34;MyError error demo&#34;}中，err是一个MyError类型的指针，Error方法是*MyError类型的。\n\nAs函数要求，第二个参数应该是实现了error接口的类型的指针。这里*MyError实现了error接口，于是As的第二个参数应该是**MyError类型。\n\n当然这个例子也可以改写一下：\n\npackage main\n\nimport (\n\t&#34;errors&#34;\n\t&#34;fmt&#34;\n)\n\ntype MyError struct {\n\te string\n}\n\nfunc (e MyError) Error() string {\n\treturn e.e\n}\n\nfunc main() {\n\tvar err = MyError{&#34;MyError error demo&#34;}\n\terr1 := fmt.Errorf(&#34;wrap err: %w&#34;, err)\n\terr2 := fmt.Errorf(&#34;wrap err1: %w&#34;, err1)\n\tvar e MyError\n\tif errors.As(err2, &amp;e) {\n\t\tprintln(&#34;MyError is on the chain of err2&#34;)\n\t\tprintln(e == err)\n\t\treturn\n\t}\n\tprintln(&#34;MyError is not on the chain of err2&#34;)\n}\n\n这样就不用传**MyError了，传*MyError了。因为新版中MyError也实现了error接口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642049788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1218138,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/5a/45a56b3a.jpg","nickname":"WenjieXu","note":"","ucode":"E76EF8A64EABF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":614653,"discussion_content":"老师，这两种写法更推荐哪种？看很多是相关实现都是用指针的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681857945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545777,"ip_address":"上海","group_id":0},"score":614653,"extra":""}]}]},{"had_liked":false,"id":324173,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1638326239,"is_pvip":false,"replies":[{"id":117970,"content":"问题再具体一些:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828606,"ip_address":"","comment_id":324173,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"最后一部分的策略四的设计不是很懂  。。。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536597,"discussion_content":"问题再具体一些:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535520,"discussion_content":"计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。策略四将稀奇古怪的错误信息进行了抽象分类，将无限种可能转换成了有限种可能（将不可控转换成可控），遵循了开闭原则。\n\n《深入剖析 Java 新特性》04 | 封闭类：怎么刹住失控的扩展性？中提到的怎么判断一个图形是正方形的例子可以帮助理解：特殊的长方形、菱形、梯形、多边形等都是正方形\n\n\n// $GOROOT/src/net/net.go\ntype Error interface {\n    error\n    Timeout() bool  // 断网、断电、网络拥堵、丢包等都可以造成超时\n    Temporary() bool\n}","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1638457240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535631,"discussion_content":"同学说的很不错，就是不知道老师有何见解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638500441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535520,"ip_address":"","group_id":0},"score":535631,"extra":""}]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535406,"discussion_content":"老师应该讲一下“类型断言”，我看目录中没有这个的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1638429817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2175116,"avatar":"https://static001.geekbang.org/account/avatar/00/21/30/8c/6c86eaac.jpg","nickname":"LiWZ","note":"","ucode":"18406E7E3BA475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535857,"discussion_content":"策略四定义了一个错误接口，其他具体的错误类去实现这个接口。这样用户方只需要用接口形式获取错误，调用的方法是内部return的具体错误类的方法。其实就类似于C++或者java的多态。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638581454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603377,"discussion_content":"按照我的理解：\n\n在逻辑二逻辑三中，错误的处理者还得自己去进行错误判断，这里就相当于有耦合了\n\n在策略四中，把错误判断的逻辑提取到错误本体里，变成一个充血模型，这样处理者只需要调用错误的 IsTimeoutErr()方法，就能知道这个错误是属于哪个大类的了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676178879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567670,"discussion_content":"第四点，应该是为了整合规范自定义扩展的错误类型的一些行为。  这样错误的处理方在处理错误的时候， 无需关系错误的抛出方，实现解耦， 第四点应该是这个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650971595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2858915,"avatar":"","nickname":"Geek_1621b6","note":"","ucode":"55DFE13F04D336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535216,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638369502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324496,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638457427,"is_pvip":false,"replies":[{"id":117977,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829869,"ip_address":"","comment_id":324496,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"多值返回的错误处理很好用。知道了4种错误使用场景，变强了！","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536604,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360556,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"北京","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1666658272,"is_pvip":false,"replies":[{"id":131258,"content":"从机制上说：策略二是通过值比较进行判定，策略三是通过类型比较进行判定。\n\n从功能上说：“基于 Go 标准库提供的错误值构造方法构造的“哨兵”错误值，除了让错误处理方可以“有的放矢”的进行值比较之外，并没有提供其他有效的错误上下文信息。那如果遇到错误处理方需要错误值提供更多的“错误上下文”的情况，上面这些错误处理策略和错误值构造方式都无法满足。”","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666834986,"ip_address":"北京","comment_id":360556,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师我想请教一下错误处理的策略二和策略三的区别是error具体的实现不同吗？哨兵错误处理策略相当于用的还是errorString，而错误值类型检视策略是自定义的struct，可以包含更多上下文？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591808,"discussion_content":"从机制上说：策略二是通过值比较进行判定，策略三是通过类型比较进行判定。\n\n从功能上说：“基于 Go 标准库提供的错误值构造方法构造的“哨兵”错误值，除了让错误处理方可以“有的放矢”的进行值比较之外，并没有提供其他有效的错误上下文信息。那如果遇到错误处理方需要错误值提供更多的“错误上下文”的情况，上面这些错误处理策略和错误值构造方式都无法满足。”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666834986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357186,"user_name":"冯仁彬","can_delete":false,"product_type":"c1","uid":2960877,"ip_address":"辽宁","ucode":"6E5CA08BC6366B","user_header":"","comment_is_top":false,"comment_ctime":1663051698,"is_pvip":false,"replies":[{"id":130005,"content":"见仁见智:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663098767,"ip_address":"辽宁","comment_id":357186,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"感觉错误处理机制相对于Java没那么好用","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587490,"discussion_content":"见仁见智:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663098767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603075,"discussion_content":"参考：https://time.geekbang.org/column/article/675","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076212,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/f4/f169cf15.jpg","nickname":"兰天","note":"","ucode":"18B81F95D8E4FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589536,"discussion_content":"确实不能和 Java 比","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665066028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333611,"user_name":"ROYIS","can_delete":false,"product_type":"c1","uid":1488654,"ip_address":"","ucode":"3596FAAF46D4D6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b7/0e/739fd98a.jpg","comment_is_top":false,"comment_ctime":1644423288,"is_pvip":false,"replies":[{"id":121972,"content":"21讲已经覆盖的函数的基本语法，这一讲延展到函数设计之错误处理","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644591248,"ip_address":"","comment_id":333611,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这节课瞬间看不懂了，是不是最好先讲接口等其他知识点再讲这个呢？好像这节课跟函数没什么关系呀","like_count":14,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550568,"discussion_content":"21讲已经覆盖的函数的基本语法，这一讲延展到函数设计之错误处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644591248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","nickname":"Fan()","note":"","ucode":"FED79EC7D78E91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559258,"discussion_content":"感觉虽说叫go语言第一课，但并不是面向还没有语法基础的同学的，还好我看了语法基础，否则感觉会吃力..","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1648659403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297559,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/97/ae4d1400.jpg","nickname":"林枫","note":"","ucode":"38B9CBE7F42174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559216,"discussion_content":"你说的对，接口要先讲，否则看不懂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1648647719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346271,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1652964709,"is_pvip":false,"replies":[{"id":126369,"content":"&quot;是因为它们是在最外层的宇宙代码块里面声明的吗&quot; - 是的。\n\n这些预定义的类型由编译器特殊处理。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653056492,"ip_address":"","comment_id":346271,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"为什么内置的类型，如int、error等，首字母都是小写的，可以不用遵从首字母大写导出规则，到处都可以使用。是因为它们是在最外层的宇宙代码块里面声明的吗，这在实际上怎么实现的？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550568,"discussion_content":"21讲已经覆盖的函数的基本语法，这一讲延展到函数设计之错误处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644591248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","nickname":"Fan()","note":"","ucode":"FED79EC7D78E91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559258,"discussion_content":"感觉虽说叫go语言第一课，但并不是面向还没有语法基础的同学的，还好我看了语法基础，否则感觉会吃力..","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1648659403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297559,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/97/ae4d1400.jpg","nickname":"林枫","note":"","ucode":"38B9CBE7F42174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559216,"discussion_content":"你说的对，接口要先讲，否则看不懂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1648647719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327721,"user_name":"郑印","can_delete":false,"product_type":"c1","uid":1005282,"ip_address":"","ucode":"181B0FDE5E1532","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/e2/2dcab30d.jpg","comment_is_top":false,"comment_ctime":1640250847,"is_pvip":false,"replies":[{"id":120344,"content":"目前真的没有。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641890556,"ip_address":"","comment_id":327721,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"如果函数调用太深，每次做返回值判断都需要写，if err != nil { return err; } 感觉会多出好多的模板代码，有什么好的解决办法吗？","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572933,"discussion_content":"&#34;是因为它们是在最外层的宇宙代码块里面声明的吗&#34; - 是的。\n\n这些预定义的类型由编译器特殊处理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653056492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324471,"user_name":"Geralt","can_delete":false,"product_type":"c1","uid":1184102,"ip_address":"","ucode":"2F31ED777D06A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/66/ac631a36.jpg","comment_is_top":false,"comment_ctime":1638449377,"is_pvip":true,"replies":[{"id":117978,"content":"上生产的代码务必不要忽略错误。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829909,"ip_address":"","comment_id":324471,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"忽略错误算不算实用的策略呢\n","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545268,"discussion_content":"目前真的没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641890556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603074,"discussion_content":"尝试从设计改进，减少调用层次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324277,"user_name":"Witt","can_delete":false,"product_type":"c1","uid":1005864,"ip_address":"","ucode":"19C8BCA266130A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","comment_is_top":false,"comment_ctime":1638354121,"is_pvip":false,"replies":[{"id":117973,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829131,"ip_address":"","comment_id":324277,"utype":1}],"discussion_count":10,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"if err != nil { return err; }\n\n看错误怎么能少得了这个 🐶","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536605,"discussion_content":"上生产的代码务必不要忽略错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330185,"user_name":"🦉","can_delete":false,"product_type":"c1","uid":2075410,"ip_address":"","ucode":"0E247D85D2BFEC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ab/12/170e5c8a.jpg","comment_is_top":false,"comment_ctime":1641845703,"is_pvip":false,"replies":[{"id":120539,"content":"对，&amp;e是pointer e的地址。因为var err = &amp;MyError{&quot;MyError error demo&quot;}中，err是一个MyError类型的指针，Error方法是*MyError类型的。\n\nAs函数要求，第二个参数应该是实现了error接口的类型的指针。这里*MyError实现了error接口，于是As的第二个参数应该是**MyError类型。\n\n当然这个例子也可以改写一下：\n\npackage main\n\nimport (\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n)\n\ntype MyError struct {\n\te string\n}\n\nfunc (e MyError) Error() string {\n\treturn e.e\n}\n\nfunc main() {\n\tvar err = MyError{&quot;MyError error demo&quot;}\n\terr1 := fmt.Errorf(&quot;wrap err: %w&quot;, err)\n\terr2 := fmt.Errorf(&quot;wrap err1: %w&quot;, err1)\n\tvar e MyError\n\tif errors.As(err2, &amp;e) {\n\t\tprintln(&quot;MyError is on the chain of err2&quot;)\n\t\tprintln(e == err)\n\t\treturn\n\t}\n\tprintln(&quot;MyError is not on the chain of err2&quot;)\n}\n\n这样就不用传**MyError了，传*MyError了。因为新版中MyError也实现了error接口。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642049788,"ip_address":"","comment_id":330185,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"请问文章这里\nvar e *MyError\nif errors.As(err, &amp;e) {\n    &#47;&#47; 如果err类型为*MyError，变量e将被设置为对应的错误值\n}\n&amp;e是pointer e的地址吗？如果是的话为什么这样处理呢？谢谢","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536600,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584014,"discussion_content":"对错误有了新的认识，错误是值，既然是普通的值就可以用编程的方式去处理错误，可以很优雅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660559633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1979191,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/33/37/6088a9a2.jpg","nickname":"蜘蛛别过来","note":"","ucode":"D579C1F5AC8F09","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550396,"discussion_content":"看见了，满意了，下一节见😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644507113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535632,"discussion_content":"同学这里想表达的是什么呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638500591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537307,"discussion_content":"错误必须显示处理，如果不主动忽略你的代码里就充满了上面这句话","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639025346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535632,"ip_address":"","group_id":0},"score":537307,"extra":""},{"author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539415,"discussion_content":"不主动忽略？不太懂哎\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639710640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537307,"ip_address":"","group_id":0},"score":539415,"extra":""},{"author":{"id":1005864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/28/943709cb.jpg","nickname":"Witt","note":"","ucode":"19C8BCA266130A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2323716,"avatar":"https://static001.geekbang.org/account/avatar/00/23/75/04/d26cd437.jpg","nickname":"lemon","note":"","ucode":"47626025C55E5E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540513,"discussion_content":"就是使用空白标识符","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640073567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539415,"ip_address":"","group_id":0},"score":540513,"extra":""}]}]},{"had_liked":false,"id":324173,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1638326239,"is_pvip":false,"replies":[{"id":117970,"content":"问题再具体一些:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828606,"ip_address":"","comment_id":324173,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"最后一部分的策略四的设计不是很懂  。。。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545777,"discussion_content":"对，&amp;e是pointer e的地址。因为var err = &amp;MyError{&#34;MyError error demo&#34;}中，err是一个MyError类型的指针，Error方法是*MyError类型的。\n\nAs函数要求，第二个参数应该是实现了error接口的类型的指针。这里*MyError实现了error接口，于是As的第二个参数应该是**MyError类型。\n\n当然这个例子也可以改写一下：\n\npackage main\n\nimport (\n\t&#34;errors&#34;\n\t&#34;fmt&#34;\n)\n\ntype MyError struct {\n\te string\n}\n\nfunc (e MyError) Error() string {\n\treturn e.e\n}\n\nfunc main() {\n\tvar err = MyError{&#34;MyError error demo&#34;}\n\terr1 := fmt.Errorf(&#34;wrap err: %w&#34;, err)\n\terr2 := fmt.Errorf(&#34;wrap err1: %w&#34;, err1)\n\tvar e MyError\n\tif errors.As(err2, &amp;e) {\n\t\tprintln(&#34;MyError is on the chain of err2&#34;)\n\t\tprintln(e == err)\n\t\treturn\n\t}\n\tprintln(&#34;MyError is not on the chain of err2&#34;)\n}\n\n这样就不用传**MyError了，传*MyError了。因为新版中MyError也实现了error接口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642049788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1218138,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/5a/45a56b3a.jpg","nickname":"WenjieXu","note":"","ucode":"E76EF8A64EABF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":614653,"discussion_content":"老师，这两种写法更推荐哪种？看很多是相关实现都是用指针的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681857945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545777,"ip_address":"上海","group_id":0},"score":614653,"extra":""}]}]},{"had_liked":false,"id":324496,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638457427,"is_pvip":false,"replies":[{"id":117977,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829869,"ip_address":"","comment_id":324496,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"多值返回的错误处理很好用。知道了4种错误使用场景，变强了！","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536597,"discussion_content":"问题再具体一些:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535520,"discussion_content":"计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。策略四将稀奇古怪的错误信息进行了抽象分类，将无限种可能转换成了有限种可能（将不可控转换成可控），遵循了开闭原则。\n\n《深入剖析 Java 新特性》04 | 封闭类：怎么刹住失控的扩展性？中提到的怎么判断一个图形是正方形的例子可以帮助理解：特殊的长方形、菱形、梯形、多边形等都是正方形\n\n\n// $GOROOT/src/net/net.go\ntype Error interface {\n    error\n    Timeout() bool  // 断网、断电、网络拥堵、丢包等都可以造成超时\n    Temporary() bool\n}","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1638457240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535631,"discussion_content":"同学说的很不错，就是不知道老师有何见解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638500441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535520,"ip_address":"","group_id":0},"score":535631,"extra":""}]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535406,"discussion_content":"老师应该讲一下“类型断言”，我看目录中没有这个的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1638429817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2175116,"avatar":"https://static001.geekbang.org/account/avatar/00/21/30/8c/6c86eaac.jpg","nickname":"LiWZ","note":"","ucode":"18406E7E3BA475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535857,"discussion_content":"策略四定义了一个错误接口，其他具体的错误类去实现这个接口。这样用户方只需要用接口形式获取错误，调用的方法是内部return的具体错误类的方法。其实就类似于C++或者java的多态。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638581454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603377,"discussion_content":"按照我的理解：\n\n在逻辑二逻辑三中，错误的处理者还得自己去进行错误判断，这里就相当于有耦合了\n\n在策略四中，把错误判断的逻辑提取到错误本体里，变成一个充血模型，这样处理者只需要调用错误的 IsTimeoutErr()方法，就能知道这个错误是属于哪个大类的了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676178879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567670,"discussion_content":"第四点，应该是为了整合规范自定义扩展的错误类型的一些行为。  这样错误的处理方在处理错误的时候， 无需关系错误的抛出方，实现解耦， 第四点应该是这个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650971595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2858915,"avatar":"","nickname":"Geek_1621b6","note":"","ucode":"55DFE13F04D336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535216,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638369502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360556,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"北京","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1666658272,"is_pvip":false,"replies":[{"id":131258,"content":"从机制上说：策略二是通过值比较进行判定，策略三是通过类型比较进行判定。\n\n从功能上说：“基于 Go 标准库提供的错误值构造方法构造的“哨兵”错误值，除了让错误处理方可以“有的放矢”的进行值比较之外，并没有提供其他有效的错误上下文信息。那如果遇到错误处理方需要错误值提供更多的“错误上下文”的情况，上面这些错误处理策略和错误值构造方式都无法满足。”","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666834986,"ip_address":"北京","comment_id":360556,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师我想请教一下错误处理的策略二和策略三的区别是error具体的实现不同吗？哨兵错误处理策略相当于用的还是errorString，而错误值类型检视策略是自定义的struct，可以包含更多上下文？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536604,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357186,"user_name":"冯仁彬","can_delete":false,"product_type":"c1","uid":2960877,"ip_address":"辽宁","ucode":"6E5CA08BC6366B","user_header":"","comment_is_top":false,"comment_ctime":1663051698,"is_pvip":false,"replies":[{"id":130005,"content":"见仁见智:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663098767,"ip_address":"辽宁","comment_id":357186,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"感觉错误处理机制相对于Java没那么好用","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591808,"discussion_content":"从机制上说：策略二是通过值比较进行判定，策略三是通过类型比较进行判定。\n\n从功能上说：“基于 Go 标准库提供的错误值构造方法构造的“哨兵”错误值，除了让错误处理方可以“有的放矢”的进行值比较之外，并没有提供其他有效的错误上下文信息。那如果遇到错误处理方需要错误值提供更多的“错误上下文”的情况，上面这些错误处理策略和错误值构造方式都无法满足。”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666834986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339738,"user_name":"Thomas","can_delete":false,"product_type":"c1","uid":1009680,"ip_address":"","ucode":"C7BDD1F378E349","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/10/e7a3a167.jpg","comment_is_top":false,"comment_ctime":1648349774,"is_pvip":true,"replies":[{"id":124199,"content":"&#47;&#47; An Error represents a network error.\ntype Error interface {\n    error\n    Timeout() bool &#47;&#47; Is the error a timeout?\n\n    &#47;&#47; Deprecated: Temporary errors are not well-defined.\n    &#47;&#47; Most &quot;temporary&quot; errors are timeouts, and the few exceptions are surprising.\n    &#47;&#47; Do not use this method.\n    Temporary() bool\n}\n\nnet.Error是一个接口，要e.(net.Error)返回的OK，需要实现该接口的所有方法。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648430806,"ip_address":"","comment_id":339738,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“因此，OpError 实例可以被错误处理方通过net.Error接口的方法，判断它的行为是否满足 Temporary 或 Timeout 特征。”\n是否需要否满足 Temporary 或 Timeout 中任意一个特征，e.(net.Error)返回的OK就是true？","like_count":2},{"had_liked":false,"id":324132,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1638320667,"is_pvip":false,"replies":[{"id":117964,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827912,"ip_address":"","comment_id":324132,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"再读错误处理，依然收获满满。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558647,"discussion_content":"// An Error represents a network error.\ntype Error interface {\n    error\n    Timeout() bool // Is the error a timeout?\n\n    // Deprecated: Temporary errors are not well-defined.\n    // Most &#34;temporary&#34; errors are timeouts, and the few exceptions are surprising.\n    // Do not use this method.\n    Temporary() bool\n}\n\nnet.Error是一个接口，要e.(net.Error)返回的OK，需要实现该接口的所有方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648430806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390653,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715868324,"is_pvip":false,"replies":[{"id":142126,"content":"最后的对错误处理的理解很到位👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1716351986,"ip_address":"北京","comment_id":390653,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"本文讲解了Go语言函数多返回值进行错误处理的目的、使用方法、应用场景和注意事项\n1. 目的是继承C语言返回值处理函数流程的简易和可靠性，并且优化单返回值表义不清晰的问题。相比于JAVA的异常抛出机制更加可控，但也给多层函数嵌套的异常处理带来了困扰。\n2. 使用方法，返回一个error接口变量即可，可以通过error.new（string）或者fmt.Errorf（&quot;formatString&quot;）\n3. 可以返回一个error接口类型的实例，也可以返回一个包装后的error实例，比如通过fmt.Errorf（“xxx%w”，error），可以通过errors.Is（xxx，「innerError」）来判断\n4. 对于自定义的错误类型，可以通过errors.As（err,&amp;{structType})进行断言和赋值\n5. 错误处理最佳策略是透明处理（即只看是否有异常，并打印），其次是对错误进行聚类抽象成新的接口类型，然后是哨兵错误处理（即感知错误描述符），最后是错误值类型的检查，耦合程度依次提高\n\n思考题：错误处理的技巧\n个人认为，\n1.错误分为系统错误和业务错误，不论哪种错误，在错误源都应该能打印出有效筛选的关键字、关键参数信息（避免大对象无脑打印），能够快速定位代码行和错误逻辑。\n2.处理上所有的错误都应该有处理，不能直接吞掉；其次是系统异常应该中止流程；业务异常则视情况而定，一般也要中断流程。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645551,"discussion_content":"最后的对错误处理的理解很到位👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716351986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372221,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1680856408,"is_pvip":false,"replies":[{"id":135845,"content":"建议定期回顾以前的内容，多看即便。另外关于不懂的内容，可以提出有针对性的问题，我会在最短时间内予以解答💪。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1680906089,"ip_address":"辽宁","comment_id":372221,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"越到后面越有点看不懂...\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645551,"discussion_content":"最后的对错误处理的理解很到位👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716351986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368309,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"广东","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1676179433,"is_pvip":false,"replies":[{"id":134176,"content":"更多是为了取出来用吧，比如调用e.Error()获得error的内容之类的。当然你也可以不用，但作为标准库API的设计者，As函数的设计者肯定要考虑可能这个错误值会被使用的场景。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1676297360,"ip_address":"辽宁","comment_id":368309,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教下老师：\n\n&gt; 如果err类型为*MyError，变量e将被设置为对应的错误值\n\n这里为何要赋值回变量e呢，相当于判断了类型，并且还把原始的错误给提取出来了？\n后续这个e有什么实际的应用吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603800,"discussion_content":"更多是为了取出来用吧，比如调用e.Error()获得error的内容之类的。当然你也可以不用，但作为标准库API的设计者，As函数的设计者肯定要考虑可能这个错误值会被使用的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676297360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368043,"user_name":"Mike","can_delete":false,"product_type":"c1","uid":2535320,"ip_address":"上海","ucode":"3DBBE5332C1307","user_header":"https://static001.geekbang.org/account/avatar/00/26/af/98/5bdfb679.jpg","comment_is_top":false,"comment_ctime":1675841930,"is_pvip":false,"replies":[{"id":134048,"content":"这个是方法(method)，再往后学几讲就会遇到了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675949588,"ip_address":"广东","comment_id":368043,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"func (srv *Server) Serve(l net.Listener) error {    ... ...\n\n老师好！这是函数吗 func 后面的是什么，不应该跟的是函数名吗？不太明白","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603116,"discussion_content":"这个是方法(method)，再往后学几讲就会遇到了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675949588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364070,"user_name":"吃橘子的汤圆🐳","can_delete":false,"product_type":"c1","uid":2557346,"ip_address":"辽宁","ucode":"88DA7981062AB5","user_header":"https://static001.geekbang.org/account/avatar/00/27/05/a2/3fa5a070.jpg","comment_is_top":false,"comment_ctime":1670493993,"is_pvip":false,"replies":[{"id":132425,"content":" 是的。在net.go源文件中：\n\nfunc (e *OpError) Timeout() bool {\n    if ne, ok := e.Err.(*os.SyscallError); ok {\n        t, ok := ne.Err.(timeout)\n        return ok &amp;&amp; t.Timeout()\n    }   \n    t, ok := e.Err.(timeout)\n    return ok &amp;&amp; t.Timeout()\n}       \n            ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670854838,"ip_address":"辽宁","comment_id":364070,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好\nOpError 是也实现了    Timeout() 吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603116,"discussion_content":"这个是方法(method)，再往后学几讲就会遇到了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675949588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363774,"user_name":"一支小闲鱼","can_delete":false,"product_type":"c1","uid":1618640,"ip_address":"广东","ucode":"96C6D03E69A716","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJmCRpUZlm5jaNbpHAk50CWkZwymo599zaThKat1y45JIvV2VU4srpZWCWYttBUGcCDLwtiaodOntQ/132","comment_is_top":false,"comment_ctime":1670158524,"is_pvip":false,"replies":[{"id":132327,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670453529,"ip_address":"广东","comment_id":363774,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"定义接口让错误方实现这种方式确实好，可以解耦","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595890,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670453529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361611,"user_name":"Beng吓咔啦咔","can_delete":false,"product_type":"c1","uid":2981277,"ip_address":"北京","ucode":"9B1942EFFCB126","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7d/9d/ced762c5.jpg","comment_is_top":false,"comment_ctime":1667701980,"is_pvip":false,"replies":[{"id":131595,"content":"方法的receiver部分。看24讲。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667817693,"ip_address":"北京","comment_id":361611,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"&#47;&#47; $GOROOT&#47;src&#47;encoding&#47;json&#47;decode.go\nfunc (d *decodeState) addErrorContext(err error) error {\n    if d.errorContext.Struct != nil || len(d.errorContext.FieldStack) &gt; 0 {\n        switch err := err.(type) {\n        case *UnmarshalTypeError:\n            err.Struct = d.errorContext.Struct.Name()\n            err.Field = strings.Join(d.errorContext.FieldStack, &quot;.&quot;)\n            return err\n        }\n    }\n    return err\n}\n\n\n老师请问下，函数名称前面的括号代表什么？(d *decodeState)，前面函数的定义，只有函数名，参数列表，返回值，函数体","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595890,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670453529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347049,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653642107,"is_pvip":false,"replies":[{"id":126565,"content":"可以先看看加餐中关于指针的讲解，也许看完后，你就明白了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653745317,"ip_address":"","comment_id":347049,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"TODO \n\nerr == io.EOF。为什么能比较？io.EOF 是一个实现了接口的指针\n\n类似的，描述符明明有分配内存(能取地址)，但值却是 nil？\n\n错误大多都是指针类型实现的，有什么考虑？\n\n对指针取地址（不这样会抛错），这是什么操作？\nvar e *MyError\nif errors.As(err2, &amp;e) {\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573954,"discussion_content":"可以先看看加餐中关于指针的讲解，也许看完后，你就明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653745317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620868,"discussion_content":"好问题，也有同样的疑惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686632746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339738,"user_name":"Thomas","can_delete":false,"product_type":"c1","uid":1009680,"ip_address":"","ucode":"C7BDD1F378E349","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/10/e7a3a167.jpg","comment_is_top":false,"comment_ctime":1648349774,"is_pvip":true,"replies":[{"id":124199,"content":"&#47;&#47; An Error represents a network error.\ntype Error interface {\n    error\n    Timeout() bool &#47;&#47; Is the error a timeout?\n\n    &#47;&#47; Deprecated: Temporary errors are not well-defined.\n    &#47;&#47; Most &quot;temporary&quot; errors are timeouts, and the few exceptions are surprising.\n    &#47;&#47; Do not use this method.\n    Temporary() bool\n}\n\nnet.Error是一个接口，要e.(net.Error)返回的OK，需要实现该接口的所有方法。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648430806,"ip_address":"","comment_id":339738,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“因此，OpError 实例可以被错误处理方通过net.Error接口的方法，判断它的行为是否满足 Temporary 或 Timeout 特征。”\n是否需要否满足 Temporary 或 Timeout 中任意一个特征，e.(net.Error)返回的OK就是true？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558647,"discussion_content":"// An Error represents a network error.\ntype Error interface {\n    error\n    Timeout() bool // Is the error a timeout?\n\n    // Deprecated: Temporary errors are not well-defined.\n    // Most &#34;temporary&#34; errors are timeouts, and the few exceptions are surprising.\n    // Do not use this method.\n    Temporary() bool\n}\n\nnet.Error是一个接口，要e.(net.Error)返回的OK，需要实现该接口的所有方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648430806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324132,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1638320667,"is_pvip":false,"replies":[{"id":117964,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827912,"ip_address":"","comment_id":324132,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"再读错误处理，依然收获满满。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536590,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390653,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715868324,"is_pvip":false,"replies":[{"id":142126,"content":"最后的对错误处理的理解很到位👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1716351986,"ip_address":"北京","comment_id":390653,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"本文讲解了Go语言函数多返回值进行错误处理的目的、使用方法、应用场景和注意事项\n1. 目的是继承C语言返回值处理函数流程的简易和可靠性，并且优化单返回值表义不清晰的问题。相比于JAVA的异常抛出机制更加可控，但也给多层函数嵌套的异常处理带来了困扰。\n2. 使用方法，返回一个error接口变量即可，可以通过error.new（string）或者fmt.Errorf（&quot;formatString&quot;）\n3. 可以返回一个error接口类型的实例，也可以返回一个包装后的error实例，比如通过fmt.Errorf（“xxx%w”，error），可以通过errors.Is（xxx，「innerError」）来判断\n4. 对于自定义的错误类型，可以通过errors.As（err,&amp;{structType})进行断言和赋值\n5. 错误处理最佳策略是透明处理（即只看是否有异常，并打印），其次是对错误进行聚类抽象成新的接口类型，然后是哨兵错误处理（即感知错误描述符），最后是错误值类型的检查，耦合程度依次提高\n\n思考题：错误处理的技巧\n个人认为，\n1.错误分为系统错误和业务错误，不论哪种错误，在错误源都应该能打印出有效筛选的关键字、关键参数信息（避免大对象无脑打印），能够快速定位代码行和错误逻辑。\n2.处理上所有的错误都应该有处理，不能直接吞掉；其次是系统异常应该中止流程；业务异常则视情况而定，一般也要中断流程。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536590,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372221,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1680856408,"is_pvip":false,"replies":[{"id":135845,"content":"建议定期回顾以前的内容，多看即便。另外关于不懂的内容，可以提出有针对性的问题，我会在最短时间内予以解答💪。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1680906089,"ip_address":"辽宁","comment_id":372221,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"越到后面越有点看不懂...\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612757,"discussion_content":"建议定期回顾以前的内容，多看即便。另外关于不懂的内容，可以提出有针对性的问题，我会在最短时间内予以解答💪。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680906089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368309,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"广东","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1676179433,"is_pvip":false,"replies":[{"id":134176,"content":"更多是为了取出来用吧，比如调用e.Error()获得error的内容之类的。当然你也可以不用，但作为标准库API的设计者，As函数的设计者肯定要考虑可能这个错误值会被使用的场景。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1676297360,"ip_address":"辽宁","comment_id":368309,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教下老师：\n\n&gt; 如果err类型为*MyError，变量e将被设置为对应的错误值\n\n这里为何要赋值回变量e呢，相当于判断了类型，并且还把原始的错误给提取出来了？\n后续这个e有什么实际的应用吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612757,"discussion_content":"建议定期回顾以前的内容，多看即便。另外关于不懂的内容，可以提出有针对性的问题，我会在最短时间内予以解答💪。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680906089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368043,"user_name":"Mike","can_delete":false,"product_type":"c1","uid":2535320,"ip_address":"上海","ucode":"3DBBE5332C1307","user_header":"https://static001.geekbang.org/account/avatar/00/26/af/98/5bdfb679.jpg","comment_is_top":false,"comment_ctime":1675841930,"is_pvip":false,"replies":[{"id":134048,"content":"这个是方法(method)，再往后学几讲就会遇到了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675949588,"ip_address":"广东","comment_id":368043,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"func (srv *Server) Serve(l net.Listener) error {    ... ...\n\n老师好！这是函数吗 func 后面的是什么，不应该跟的是函数名吗？不太明白","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603800,"discussion_content":"更多是为了取出来用吧，比如调用e.Error()获得error的内容之类的。当然你也可以不用，但作为标准库API的设计者，As函数的设计者肯定要考虑可能这个错误值会被使用的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676297360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364070,"user_name":"吃橘子的汤圆🐳","can_delete":false,"product_type":"c1","uid":2557346,"ip_address":"辽宁","ucode":"88DA7981062AB5","user_header":"https://static001.geekbang.org/account/avatar/00/27/05/a2/3fa5a070.jpg","comment_is_top":false,"comment_ctime":1670493993,"is_pvip":false,"replies":[{"id":132425,"content":" 是的。在net.go源文件中：\n\nfunc (e *OpError) Timeout() bool {\n    if ne, ok := e.Err.(*os.SyscallError); ok {\n        t, ok := ne.Err.(timeout)\n        return ok &amp;&amp; t.Timeout()\n    }   \n    t, ok := e.Err.(timeout)\n    return ok &amp;&amp; t.Timeout()\n}       \n            ","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670854838,"ip_address":"辽宁","comment_id":364070,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好\nOpError 是也实现了    Timeout() 吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596288,"discussion_content":" 是的。在net.go源文件中：\n\nfunc (e *OpError) Timeout() bool {\n    if ne, ok := e.Err.(*os.SyscallError); ok {\n        t, ok := ne.Err.(timeout)\n        return ok &amp;&amp; t.Timeout()\n    }   \n    t, ok := e.Err.(timeout)\n    return ok &amp;&amp; t.Timeout()\n}       \n            ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670854838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2557346,"avatar":"https://static001.geekbang.org/account/avatar/00/27/05/a2/3fa5a070.jpg","nickname":"吃橘子的汤圆🐳","note":"","ucode":"88DA7981062AB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":596359,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670915602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":596288,"ip_address":"河南","group_id":0},"score":596359,"extra":""}]}]},{"had_liked":false,"id":363774,"user_name":"一支小闲鱼","can_delete":false,"product_type":"c1","uid":1618640,"ip_address":"广东","ucode":"96C6D03E69A716","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJmCRpUZlm5jaNbpHAk50CWkZwymo599zaThKat1y45JIvV2VU4srpZWCWYttBUGcCDLwtiaodOntQ/132","comment_is_top":false,"comment_ctime":1670158524,"is_pvip":false,"replies":[{"id":132327,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670453529,"ip_address":"广东","comment_id":363774,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"定义接口让错误方实现这种方式确实好，可以解耦","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596288,"discussion_content":" 是的。在net.go源文件中：\n\nfunc (e *OpError) Timeout() bool {\n    if ne, ok := e.Err.(*os.SyscallError); ok {\n        t, ok := ne.Err.(timeout)\n        return ok &amp;&amp; t.Timeout()\n    }   \n    t, ok := e.Err.(timeout)\n    return ok &amp;&amp; t.Timeout()\n}       \n            ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670854838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2557346,"avatar":"https://static001.geekbang.org/account/avatar/00/27/05/a2/3fa5a070.jpg","nickname":"吃橘子的汤圆🐳","note":"","ucode":"88DA7981062AB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":596359,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670915602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":596288,"ip_address":"河南","group_id":0},"score":596359,"extra":""}]}]},{"had_liked":false,"id":361611,"user_name":"Beng吓咔啦咔","can_delete":false,"product_type":"c1","uid":2981277,"ip_address":"北京","ucode":"9B1942EFFCB126","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7d/9d/ced762c5.jpg","comment_is_top":false,"comment_ctime":1667701980,"is_pvip":false,"replies":[{"id":131595,"content":"方法的receiver部分。看24讲。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667817693,"ip_address":"北京","comment_id":361611,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"&#47;&#47; $GOROOT&#47;src&#47;encoding&#47;json&#47;decode.go\nfunc (d *decodeState) addErrorContext(err error) error {\n    if d.errorContext.Struct != nil || len(d.errorContext.FieldStack) &gt; 0 {\n        switch err := err.(type) {\n        case *UnmarshalTypeError:\n            err.Struct = d.errorContext.Struct.Name()\n            err.Field = strings.Join(d.errorContext.FieldStack, &quot;.&quot;)\n            return err\n        }\n    }\n    return err\n}\n\n\n老师请问下，函数名称前面的括号代表什么？(d *decodeState)，前面函数的定义，只有函数名，参数列表，返回值，函数体","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592948,"discussion_content":"方法的receiver部分。看24讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667817693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347049,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653642107,"is_pvip":false,"replies":[{"id":126565,"content":"可以先看看加餐中关于指针的讲解，也许看完后，你就明白了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653745317,"ip_address":"","comment_id":347049,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"TODO \n\nerr == io.EOF。为什么能比较？io.EOF 是一个实现了接口的指针\n\n类似的，描述符明明有分配内存(能取地址)，但值却是 nil？\n\n错误大多都是指针类型实现的，有什么考虑？\n\n对指针取地址（不这样会抛错），这是什么操作？\nvar e *MyError\nif errors.As(err2, &amp;e) {\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592948,"discussion_content":"方法的receiver部分。看24讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667817693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324144,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1638322020,"is_pvip":true,"replies":[{"id":117968,"content":"这问题挺大。在后续讲解接口时会涉及相关内容。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828386,"ip_address":"","comment_id":324144,"utype":1}],"discussion_count":4,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，何时使用方法，何时使用函数，指点下呗","like_count":1},{"had_liked":false,"id":396499,"user_name":"吃两块云","can_delete":false,"product_type":"c1","uid":2383857,"ip_address":"上海","ucode":"A50874612046AF","user_header":"https://static001.geekbang.org/account/avatar/00/24/5f/f1/c66c8c51.jpg","comment_is_top":false,"comment_ctime":1734685741,"is_pvip":false,"replies":[{"id":143944,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1734852104,"ip_address":"辽宁","comment_id":396499,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"第一遍的时候完全看不懂，时隔一年，再看也只懂了百分之七八十，希望下次看能都明白。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536595,"discussion_content":"这问题挺大。在后续讲解接口时会涉及相关内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537963,"discussion_content":"老师好  我从java过来的，go中方法和函数到底是啥区别哈  我所接触的这两者貌似没什么区别？ 带接受者的是方法？不带的是函数？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639279984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":536595,"ip_address":"","group_id":0},"score":537963,"extra":""},{"author":{"id":1203078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/86/dba8214e.jpg","nickname":"星期三。","note":"","ucode":"EF3C461AB5399D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552488,"discussion_content":"方法本质上就是函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645495771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537963,"ip_address":"","group_id":0},"score":552488,"extra":""},{"author":{"id":2006360,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/7qic6zgDCSKs7GeOgQrtQ9rtPqryI8HDJvt2AHibiceK5UcpEoMiciabeZFnoun2p6ic1Jq1bg6Yaddsm7hE6dQ9BEYw/132","nickname":"Xavier","note":"","ucode":"474C5D97D0201F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569757,"discussion_content":"感觉可以类比java中的静态方法与实例方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651546002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537963,"ip_address":"","group_id":0},"score":569757,"extra":""}]}]},{"had_liked":false,"id":383532,"user_name":"治愈。","can_delete":false,"product_type":"c1","uid":1368713,"ip_address":"广东","ucode":"76F1C20C40452A","user_header":"https://static001.geekbang.org/account/avatar/00/14/e2/89/7632aad8.jpg","comment_is_top":false,"comment_ctime":1699234324,"is_pvip":false,"replies":[{"id":139783,"content":"Go的错误方法优点很明显：\n\n第一个：容易理解，借用额外的返回值(对C语言的改进)来专门承载错误。\n第二个：显式的错误处理。Go鼓励开发者在代码中显式地处理错误。这使得代码更可读，开发者可以更清楚地看到哪些地方可能会发生错误，以及如何处理这些错误。\n第三个：错误与异常(panic)泾渭分明，错误是错误，异常是异常，在类似java try-catch的结构化错误处理中，两者有时混在一起，导致代码难\n以理解和维护。\n\nGo错误方法的缺点也很明显，最被诟病的就是显式地检查函数的返回值来处理错误。这可能导致代码中存在大量的错误检查代码，使得代码变得&gt;冗长，看起来代码不那么优雅。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699322698,"ip_address":"北京","comment_id":383532,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"可以和Java的try catch做一个比较吗？通过这节课程对go语言的错误处理机制有所理解，但还是会很好奇不同的错误处理方式有什么样的优缺点。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631118,"discussion_content":"Go的错误方法优点很明显：\n\n第一个：容易理解，借用额外的返回值(对C语言的改进)来专门承载错误。\n第二个：显式的错误处理。Go鼓励开发者在代码中显式地处理错误。这使得代码更可读，开发者可以更清楚地看到哪些地方可能会发生错误，以及如何处理这些错误。\n第三个：错误与异常(panic)泾渭分明，错误是错误，异常是异常，在类似java try-catch的结构化错误处理中，两者有时混在一起，导致代码难\n以理解和维护。\n\nGo错误方法的缺点也很明显，最被诟病的就是显式地检查函数的返回值来处理错误。这可能导致代码中存在大量的错误检查代码，使得代码变得&gt;冗长，看起来代码不那么优雅。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699322698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379096,"user_name":"谢小路","can_delete":false,"product_type":"c1","uid":1035064,"ip_address":"广东","ucode":"C9FE2EB10DC105","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","comment_is_top":false,"comment_ctime":1691337194,"is_pvip":false,"replies":[{"id":138131,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1691396027,"ip_address":"北京","comment_id":379096,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"朋友们：\n\n补充几点：\n\n第一，如果一个函数有多个返回值，其中一个是 error 类型，请把它作为最后一个返回参数，类似这样func A() (a int, e error){}，请不要随心所欲；\n\n第二，多返回值，其中有一个是 error 类型，调用时，请不要忽视 error, 忽视 error ，导致调用对象时的空指针问题，是非常常见的一个新手犯的错，动不动线上 panic，遇到几次还不长进的话，差不多就是个简单的代码仔，没有意义。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625138,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691396027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376270,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1686632477,"is_pvip":false,"replies":[{"id":137235,"content":"1. 课程内容中只有*MyError实现了error接口。评论中代码做了修改，修改后，MyError也实现了error接口。\n2. 看go标准库源码呗:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686643566,"ip_address":"北京","comment_id":376270,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony Bai 老师，有两个问题：\n\n1. 文中 *MyError 实现了 error 接口，课程评论中举例说 “ 新版中 MyError 也实现了error接口”，意思是旧版本只能用 *MyError  实现 error 接口吗？不能用 MyError 实现 error接口。\n\n2. 文中说：“Accept 方法实际上返回的错误类型为 *OpError ”，这里错误类型为 *OpError  是怎么判断出来的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620885,"discussion_content":"1. 课程内容中只有*MyError实现了error接口。评论中代码做了修改，修改后，MyError也实现了error接口。\n2. 看go标准库源码呗:)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1686643566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351921,"user_name":"Z.","can_delete":false,"product_type":"c1","uid":1568589,"ip_address":"","ucode":"9C9C97C470D761","user_header":"https://static001.geekbang.org/account/avatar/00/17/ef/4d/83a56dad.jpg","comment_is_top":false,"comment_ctime":1658295718,"is_pvip":false,"replies":[{"id":127995,"content":"问题可以具体点，哪块把你看晕了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658366505,"ip_address":"","comment_id":351921,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这两节把我看晕了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620885,"discussion_content":"1. 课程内容中只有*MyError实现了error接口。评论中代码做了修改，修改后，MyError也实现了error接口。\n2. 看go标准库源码呗:)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1686643566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350924,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1657350953,"is_pvip":false,"replies":[{"id":127782,"content":"defer在23讲。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657696790,"ip_address":"","comment_id":350924,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"没有说defer","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579806,"discussion_content":"defer在23讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657696791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350262,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656732115,"is_pvip":false,"replies":[{"id":127490,"content":"耦合肯定有，只是接口方法签名变化的可能性很小。相对其他几种策略，耦合已经是最小的了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656940752,"ip_address":"","comment_id":350262,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看起来错误行为特征检视策略也有耦合 假如接口中的方法签名变化了 那么使用它来处理错误的一方也要改变签名","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578679,"discussion_content":"耦合肯定有，只是接口方法签名变化的可能性很小。相对其他几种策略，耦合已经是最小的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656940752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603078,"discussion_content":"耦合的东西就是接口的方法(签名)，想一下还能比这小么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348922,"user_name":"Geek_8de965","can_delete":false,"product_type":"c1","uid":2831170,"ip_address":"","ucode":"75880FD1790C37","user_header":"","comment_is_top":false,"comment_ctime":1655549415,"is_pvip":false,"replies":[{"id":127031,"content":"的确是表述不清，我让编辑老师改一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655704863,"ip_address":"","comment_id":348922,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"如果可以通过错误值类型的特征进行错误检视，那么请尽量使用“错误行为特征检视策略”  这句话是不是笔误了，老师","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576617,"discussion_content":"的确是表述不清，我让编辑老师改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655704863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340946,"user_name":"Persist","can_delete":false,"product_type":"c1","uid":1623575,"ip_address":"","ucode":"203596C835EAF2","user_header":"https://static001.geekbang.org/account/avatar/00/18/c6/17/651e8d72.jpg","comment_is_top":false,"comment_ctime":1649240705,"is_pvip":false,"replies":[{"id":124699,"content":"你提到的go异常是指go panic么？如果是go panic，当panic发生时，也是会print stack跟踪信息的啊。 注意java的exception与go panic不完全是一个东西。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649389049,"ip_address":"","comment_id":340946,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"java开发来学go，请问Java会打印异常整条链路，而go却不行，追踪异常的时候该如何追踪整个调用链呢","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576617,"discussion_content":"的确是表述不清，我让编辑老师改一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655704863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324144,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1638322020,"is_pvip":true,"replies":[{"id":117968,"content":"这问题挺大。在后续讲解接口时会涉及相关内容。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638828386,"ip_address":"","comment_id":324144,"utype":1}],"discussion_count":4,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，何时使用方法，何时使用函数，指点下呗","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536595,"discussion_content":"这问题挺大。在后续讲解接口时会涉及相关内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638828386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537963,"discussion_content":"老师好  我从java过来的，go中方法和函数到底是啥区别哈  我所接触的这两者貌似没什么区别？ 带接受者的是方法？不带的是函数？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639279984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":536595,"ip_address":"","group_id":0},"score":537963,"extra":""},{"author":{"id":1203078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/86/dba8214e.jpg","nickname":"星期三。","note":"","ucode":"EF3C461AB5399D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552488,"discussion_content":"方法本质上就是函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645495771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537963,"ip_address":"","group_id":0},"score":552488,"extra":""},{"author":{"id":2006360,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/7qic6zgDCSKs7GeOgQrtQ9rtPqryI8HDJvt2AHibiceK5UcpEoMiciabeZFnoun2p6ic1Jq1bg6Yaddsm7hE6dQ9BEYw/132","nickname":"Xavier","note":"","ucode":"474C5D97D0201F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2110716,"avatar":"https://static001.geekbang.org/account/avatar/00/20/34/fc/e160c958.jpg","nickname":"Gavino","note":"","ucode":"F9D509B5BE9A21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569757,"discussion_content":"感觉可以类比java中的静态方法与实例方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651546002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537963,"ip_address":"","group_id":0},"score":569757,"extra":""}]}]},{"had_liked":false,"id":396499,"user_name":"吃两块云","can_delete":false,"product_type":"c1","uid":2383857,"ip_address":"上海","ucode":"A50874612046AF","user_header":"https://static001.geekbang.org/account/avatar/00/24/5f/f1/c66c8c51.jpg","comment_is_top":false,"comment_ctime":1734685741,"is_pvip":false,"replies":[{"id":143944,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1734852104,"ip_address":"辽宁","comment_id":396499,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"第一遍的时候完全看不懂，时隔一年，再看也只懂了百分之七八十，希望下次看能都明白。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655403,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734852104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383532,"user_name":"治愈。","can_delete":false,"product_type":"c1","uid":1368713,"ip_address":"广东","ucode":"76F1C20C40452A","user_header":"https://static001.geekbang.org/account/avatar/00/14/e2/89/7632aad8.jpg","comment_is_top":false,"comment_ctime":1699234324,"is_pvip":false,"replies":[{"id":139783,"content":"Go的错误方法优点很明显：\n\n第一个：容易理解，借用额外的返回值(对C语言的改进)来专门承载错误。\n第二个：显式的错误处理。Go鼓励开发者在代码中显式地处理错误。这使得代码更可读，开发者可以更清楚地看到哪些地方可能会发生错误，以及如何处理这些错误。\n第三个：错误与异常(panic)泾渭分明，错误是错误，异常是异常，在类似java try-catch的结构化错误处理中，两者有时混在一起，导致代码难\n以理解和维护。\n\nGo错误方法的缺点也很明显，最被诟病的就是显式地检查函数的返回值来处理错误。这可能导致代码中存在大量的错误检查代码，使得代码变得&gt;冗长，看起来代码不那么优雅。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699322698,"ip_address":"北京","comment_id":383532,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"可以和Java的try catch做一个比较吗？通过这节课程对go语言的错误处理机制有所理解，但还是会很好奇不同的错误处理方式有什么样的优缺点。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655403,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734852104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379096,"user_name":"谢小路","can_delete":false,"product_type":"c1","uid":1035064,"ip_address":"广东","ucode":"C9FE2EB10DC105","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","comment_is_top":false,"comment_ctime":1691337194,"is_pvip":false,"replies":[{"id":138131,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1691396027,"ip_address":"北京","comment_id":379096,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"朋友们：\n\n补充几点：\n\n第一，如果一个函数有多个返回值，其中一个是 error 类型，请把它作为最后一个返回参数，类似这样func A() (a int, e error){}，请不要随心所欲；\n\n第二，多返回值，其中有一个是 error 类型，调用时，请不要忽视 error, 忽视 error ，导致调用对象时的空指针问题，是非常常见的一个新手犯的错，动不动线上 panic，遇到几次还不长进的话，差不多就是个简单的代码仔，没有意义。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631118,"discussion_content":"Go的错误方法优点很明显：\n\n第一个：容易理解，借用额外的返回值(对C语言的改进)来专门承载错误。\n第二个：显式的错误处理。Go鼓励开发者在代码中显式地处理错误。这使得代码更可读，开发者可以更清楚地看到哪些地方可能会发生错误，以及如何处理这些错误。\n第三个：错误与异常(panic)泾渭分明，错误是错误，异常是异常，在类似java try-catch的结构化错误处理中，两者有时混在一起，导致代码难\n以理解和维护。\n\nGo错误方法的缺点也很明显，最被诟病的就是显式地检查函数的返回值来处理错误。这可能导致代码中存在大量的错误检查代码，使得代码变得&gt;冗长，看起来代码不那么优雅。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699322698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376270,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1686632477,"is_pvip":false,"replies":[{"id":137235,"content":"1. 课程内容中只有*MyError实现了error接口。评论中代码做了修改，修改后，MyError也实现了error接口。\n2. 看go标准库源码呗:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686643566,"ip_address":"北京","comment_id":376270,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony Bai 老师，有两个问题：\n\n1. 文中 *MyError 实现了 error 接口，课程评论中举例说 “ 新版中 MyError 也实现了error接口”，意思是旧版本只能用 *MyError  实现 error 接口吗？不能用 MyError 实现 error接口。\n\n2. 文中说：“Accept 方法实际上返回的错误类型为 *OpError ”，这里错误类型为 *OpError  是怎么判断出来的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625138,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691396027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351921,"user_name":"Z.","can_delete":false,"product_type":"c1","uid":1568589,"ip_address":"","ucode":"9C9C97C470D761","user_header":"https://static001.geekbang.org/account/avatar/00/17/ef/4d/83a56dad.jpg","comment_is_top":false,"comment_ctime":1658295718,"is_pvip":false,"replies":[{"id":127995,"content":"问题可以具体点，哪块把你看晕了:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658366505,"ip_address":"","comment_id":351921,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这两节把我看晕了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580741,"discussion_content":"问题可以具体点，哪块把你看晕了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658366505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350924,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1657350953,"is_pvip":false,"replies":[{"id":127782,"content":"defer在23讲。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657696790,"ip_address":"","comment_id":350924,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"没有说defer","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580741,"discussion_content":"问题可以具体点，哪块把你看晕了:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658366505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350262,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656732115,"is_pvip":false,"replies":[{"id":127490,"content":"耦合肯定有，只是接口方法签名变化的可能性很小。相对其他几种策略，耦合已经是最小的了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656940752,"ip_address":"","comment_id":350262,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看起来错误行为特征检视策略也有耦合 假如接口中的方法签名变化了 那么使用它来处理错误的一方也要改变签名","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579806,"discussion_content":"defer在23讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657696791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348922,"user_name":"Geek_8de965","can_delete":false,"product_type":"c1","uid":2831170,"ip_address":"","ucode":"75880FD1790C37","user_header":"","comment_is_top":false,"comment_ctime":1655549415,"is_pvip":false,"replies":[{"id":127031,"content":"的确是表述不清，我让编辑老师改一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655704863,"ip_address":"","comment_id":348922,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"如果可以通过错误值类型的特征进行错误检视，那么请尽量使用“错误行为特征检视策略”  这句话是不是笔误了，老师","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578679,"discussion_content":"耦合肯定有，只是接口方法签名变化的可能性很小。相对其他几种策略，耦合已经是最小的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656940752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603078,"discussion_content":"耦合的东西就是接口的方法(签名)，想一下还能比这小么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340946,"user_name":"Persist","can_delete":false,"product_type":"c1","uid":1623575,"ip_address":"","ucode":"203596C835EAF2","user_header":"https://static001.geekbang.org/account/avatar/00/18/c6/17/651e8d72.jpg","comment_is_top":false,"comment_ctime":1649240705,"is_pvip":false,"replies":[{"id":124699,"content":"你提到的go异常是指go panic么？如果是go panic，当panic发生时，也是会print stack跟踪信息的啊。 注意java的exception与go panic不完全是一个东西。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649389049,"ip_address":"","comment_id":340946,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"java开发来学go，请问Java会打印异常整条链路，而go却不行，追踪异常的时候该如何追踪整个调用链呢","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560554,"discussion_content":"你提到的go异常是指go panic么？如果是go panic，当panic发生时，也是会print stack跟踪信息的啊。 注意java的exception与go panic不完全是一个东西。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649389049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324764,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638607308,"is_pvip":true,"replies":null,"discussion_count":4,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"errors.Wrap多好用","like_count":9},{"had_liked":false,"id":347116,"user_name":"WenjieXu","can_delete":false,"product_type":"c1","uid":1218138,"ip_address":"","ucode":"E76EF8A64EABF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/5a/45a56b3a.jpg","comment_is_top":false,"comment_ctime":1653725941,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"Go的错误处理机制能力还是太低层了，部分场景使用起来还是不方便。例如调用层级比较深的时候，每一层都需要显示处理。","like_count":1},{"had_liked":false,"id":361707,"user_name":"义务教育漏网之鱼","can_delete":false,"product_type":"c1","uid":3198641,"ip_address":"湖北","ucode":"DE23BC762FD57B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFEQibKmCdPwFMncjfPFficY97fdnZWFxFbu8uze8REXB5S6gMtxRsESWibBmEFibBsaaj0ZkKmWPtEA/132","comment_is_top":false,"comment_ctime":1667794686,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"越来越不适合新手看了。不是说好的 Go语言第一课嘛！跳跃性好大，总拿源码举例！","like_count":0,"discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638264,"discussion_content":"github.com/pkg/errors","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709445988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024197,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c5/9259d5ca.jpg","nickname":"daydaygo","note":"","ucode":"A2477F029C7C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593743,"discussion_content":"fmt.Errorf 和 errors.Wrap 等效?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668508021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579319,"discussion_content":"试了下没有这个方法，go版本1.18.3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657350886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1529474,"avatar":"https://static001.geekbang.org/account/avatar/00/17/56/82/cee545ab.jpg","nickname":"得芸娘足矣","note":"","ucode":"F49F658809FDA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579786,"discussion_content":"这是一个第三方包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657692656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":579319,"ip_address":"","group_id":0},"score":579786,"extra":""}]}]},{"had_liked":false,"id":324597,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1638514277,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"if err  !=  nil{\n\n\n}","like_count":0,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603076,"discussion_content":"需要interface的基础知识，先跳到28讲《接口即契约》，再继续。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601037,"discussion_content":"hhh，因为是go语言第一课，而不是编程第一课","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675001889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324764,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638607308,"is_pvip":true,"replies":null,"discussion_count":4,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"errors.Wrap多好用","like_count":9,"discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638264,"discussion_content":"github.com/pkg/errors","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709445988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024197,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c5/9259d5ca.jpg","nickname":"daydaygo","note":"","ucode":"A2477F029C7C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593743,"discussion_content":"fmt.Errorf 和 errors.Wrap 等效?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668508021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579319,"discussion_content":"试了下没有这个方法，go版本1.18.3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657350886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1529474,"avatar":"https://static001.geekbang.org/account/avatar/00/17/56/82/cee545ab.jpg","nickname":"得芸娘足矣","note":"","ucode":"F49F658809FDA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579786,"discussion_content":"这是一个第三方包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657692656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":579319,"ip_address":"","group_id":0},"score":579786,"extra":""}]}]},{"had_liked":false,"id":347116,"user_name":"WenjieXu","can_delete":false,"product_type":"c1","uid":1218138,"ip_address":"","ucode":"E76EF8A64EABF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/5a/45a56b3a.jpg","comment_is_top":false,"comment_ctime":1653725941,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"Go的错误处理机制能力还是太低层了，部分场景使用起来还是不方便。例如调用层级比较深的时候，每一层都需要显示处理。","like_count":1},{"had_liked":false,"id":361707,"user_name":"义务教育漏网之鱼","can_delete":false,"product_type":"c1","uid":3198641,"ip_address":"湖北","ucode":"DE23BC762FD57B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFEQibKmCdPwFMncjfPFficY97fdnZWFxFbu8uze8REXB5S6gMtxRsESWibBmEFibBsaaj0ZkKmWPtEA/132","comment_is_top":false,"comment_ctime":1667794686,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"越来越不适合新手看了。不是说好的 Go语言第一课嘛！跳跃性好大，总拿源码举例！","like_count":0,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603076,"discussion_content":"需要interface的基础知识，先跳到28讲《接口即契约》，再继续。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675931609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601037,"discussion_content":"hhh，因为是go语言第一课，而不是编程第一课","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675001889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324597,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1638514277,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"if err  !=  nil{\n\n\n}","like_count":0}]}