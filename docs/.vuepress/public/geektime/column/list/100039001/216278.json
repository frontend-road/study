{"id":216278,"title":"62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？","content":"<p>前几节课中，我们学习了模板模式、策略模式，今天，我们来学习职责链模式。这三种模式具有相同的作用：复用和扩展，在实际的项目开发中比较常用，特别是框架开发中，我们可以利用它们来提供框架的扩展点，能够让框架的使用者在不修改框架源码的情况下，基于扩展点定制化框架的功能。</p><p>今天，我们主要讲解职责链模式的原理和实现。除此之外，我还会利用职责链模式，带你实现一个可以灵活扩展算法的敏感词过滤框架。下一节课，我们会更加贴近实战，通过剖析Servlet Filter、Spring Interceptor来看，如何利用职责链模式实现框架中常用的过滤器、拦截器。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>职责链模式的原理和实现</h2><p>职责链模式的英文翻译是Chain Of Responsibility Design Pattern。在GoF的《设计模式》中，它是这么定义的：</p><blockquote>\n<p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p>\n</blockquote><!-- [[[read_end]]] --><p>翻译成中文就是：将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。</p><p>这么说比较抽象，我用更加容易理解的话来进一步解读一下。</p><p>在职责链模式中，多个处理器（也就是刚刚定义中说的“接收对象”）依次处理同一个请求。一个请求先经过A处理器处理，然后再把请求传递给B处理器，B处理器处理完后再传递给C处理器，以此类推，形成一个链条。链条上的每个处理器各自承担各自的处理职责，所以叫作职责链模式。</p><p>关于职责链模式，我们先来看看它的代码实现。结合代码实现，你会更容易理解它的定义。职责链模式有多种实现方式，我们这里介绍两种比较常用的。</p><p>第一种实现方式如下所示。其中，Handler是所有处理器类的抽象父类，handle()是抽象方法。每个具体的处理器类（HandlerA、HandlerB）的handle()函数的代码结构类似，如果它能处理该请求，就不继续往下传递；如果不能处理，则交由后面的处理器来处理（也就是调用successor.handle()）。HandlerChain是处理器链，从数据结构的角度来看，它就是一个记录了链头、链尾的链表。其中，记录链尾是为了方便添加处理器。</p><pre><code>public abstract class Handler {\n  protected Handler successor = null;\n\n  public void setSuccessor(Handler successor) {\n    this.successor = successor;\n  }\n\n  public abstract void handle();\n}\n\npublic class HandlerA extends Handler {\n  @Override\n  public void handle() {\n    boolean handled = false;\n    //...\n    if (!handled &amp;&amp; successor != null) {\n      successor.handle();\n    }\n  }\n}\n\npublic class HandlerB extends Handler {\n  @Override\n  public void handle() {\n    boolean handled = false;\n    //...\n    if (!handled &amp;&amp; successor != null) {\n      successor.handle();\n    } \n  }\n}\n\npublic class HandlerChain {\n  private Handler head = null;\n  private Handler tail = null;\n\n  public void addHandler(Handler handler) {\n    handler.setSuccessor(null);\n\n    if (head == null) {\n      head = handler;\n      tail = handler;\n      return;\n    }\n\n    tail.setSuccessor(handler);\n    tail = handler;\n  }\n\n  public void handle() {\n    if (head != null) {\n      head.handle();\n    }\n  }\n}\n\n// 使用举例\npublic class Application {\n  public static void main(String[] args) {\n    HandlerChain chain = new HandlerChain();\n    chain.addHandler(new HandlerA());\n    chain.addHandler(new HandlerB());\n    chain.handle();\n  }\n}\n</code></pre><p>实际上，上面的代码实现不够优雅。处理器类的handle()函数，不仅包含自己的业务逻辑，还包含对下一个处理器的调用，也就是代码中的successor.handle()。一个不熟悉这种代码结构的程序员，在添加新的处理器类的时候，很有可能忘记在handle()函数中调用successor.handle()，这就会导致代码出现bug。</p><p>针对这个问题，我们对代码进行重构，利用模板模式，将调用successor.handle()的逻辑从具体的处理器类中剥离出来，放到抽象父类中。这样具体的处理器类只需要实现自己的业务逻辑就可以了。重构之后的代码如下所示：</p><pre><code>public abstract class Handler {\n  protected Handler successor = null;\n\n  public void setSuccessor(Handler successor) {\n    this.successor = successor;\n  }\n\n  public final void handle() {\n    boolean handled = doHandle();\n    if (successor != null &amp;&amp; !handled) {\n      successor.handle();\n    }\n  }\n\n  protected abstract boolean doHandle();\n}\n\npublic class HandlerA extends Handler {\n  @Override\n  protected boolean doHandle() {\n    boolean handled = false;\n    //...\n    return handled;\n  }\n}\n\npublic class HandlerB extends Handler {\n  @Override\n  protected boolean doHandle() {\n    boolean handled = false;\n    //...\n    return handled;\n  }\n}\n\n// HandlerChain和Application代码不变\n</code></pre><p>我们再来看第二种实现方式，代码如下所示。这种实现方式更加简单。HandlerChain类用数组而非链表来保存所有的处理器，并且需要在HandlerChain的handle()函数中，依次调用每个处理器的handle()函数。</p><pre><code>public interface IHandler {\n  boolean handle();\n}\n\npublic class HandlerA implements IHandler {\n  @Override\n  public boolean handle() {\n    boolean handled = false;\n    //...\n    return handled;\n  }\n}\n\npublic class HandlerB implements IHandler {\n  @Override\n  public boolean handle() {\n    boolean handled = false;\n    //...\n    return handled;\n  }\n}\n\npublic class HandlerChain {\n  private List&lt;IHandler&gt; handlers = new ArrayList&lt;&gt;();\n\n  public void addHandler(IHandler handler) {\n    this.handlers.add(handler);\n  }\n\n  public void handle() {\n    for (IHandler handler : handlers) {\n      boolean handled = handler.handle();\n      if (handled) {\n        break;\n      }\n    }\n  }\n}\n\n// 使用举例\npublic class Application {\n  public static void main(String[] args) {\n    HandlerChain chain = new HandlerChain();\n    chain.addHandler(new HandlerA());\n    chain.addHandler(new HandlerB());\n    chain.handle();\n  }\n}\n</code></pre><p>在GoF给出的定义中，如果处理器链上的某个处理器能够处理这个请求，那就不会继续往下传递请求。实际上，职责链模式还有一种变体，那就是请求会被所有的处理器都处理一遍，不存在中途终止的情况。这种变体也有两种实现方式：用链表存储处理器和用数组存储处理器，跟上面的两种实现方式类似，只需要稍微修改即可。</p><p>我这里只给出其中一种实现方式，如下所示。另外一种实现方式你对照着上面的实现自行修改。</p><pre><code>public abstract class Handler {\n  protected Handler successor = null;\n\n  public void setSuccessor(Handler successor) {\n    this.successor = successor;\n  }\n\n  public final void handle() {\n    doHandle();\n    if (successor != null) {\n      successor.handle();\n    }\n  }\n\n  protected abstract void doHandle();\n}\n\npublic class HandlerA extends Handler {\n  @Override\n  protected void doHandle() {\n    //...\n  }\n}\n\npublic class HandlerB extends Handler {\n  @Override\n  protected void doHandle() {\n    //...\n  }\n}\n\npublic class HandlerChain {\n  private Handler head = null;\n  private Handler tail = null;\n\n  public void addHandler(Handler handler) {\n    handler.setSuccessor(null);\n\n    if (head == null) {\n      head = handler;\n      tail = handler;\n      return;\n    }\n\n    tail.setSuccessor(handler);\n    tail = handler;\n  }\n\n  public void handle() {\n    if (head != null) {\n      head.handle();\n    }\n  }\n}\n\n// 使用举例\npublic class Application {\n  public static void main(String[] args) {\n    HandlerChain chain = new HandlerChain();\n    chain.addHandler(new HandlerA());\n    chain.addHandler(new HandlerB());\n    chain.handle();\n  }\n}\n</code></pre><h2>职责链模式的应用场景举例</h2><p>职责链模式的原理和实现讲完了，我们再通过一个实际的例子，来学习一下职责链模式的应用场景。</p><p>对于支持UGC（User Generated Content，用户生成内容）的应用（比如论坛）来说，用户生成的内容（比如，在论坛中发表的帖子）可能会包含一些敏感词（比如涉黄、广告、反动等词汇）。针对这个应用场景，我们就可以利用职责链模式来过滤这些敏感词。</p><p>对于包含敏感词的内容，我们有两种处理方式，一种是直接禁止发布，另一种是给敏感词打马赛克（比如，用***替换敏感词）之后再发布。第一种处理方式符合GoF给出的职责链模式的定义，第二种处理方式是职责链模式的变体。</p><p>我们这里只给出第一种实现方式的代码示例，如下所示，并且，我们只给出了代码实现的骨架，具体的敏感词过滤算法并没有给出，你可以参看我的另一个专栏<a href=\"https://time.geekbang.org/column/intro/100017301\">《数据结构与算法之美》</a>中多模式字符串匹配的相关章节自行实现。</p><pre><code>public interface SensitiveWordFilter {\n  boolean doFilter(Content content);\n}\n\npublic class SexyWordFilter implements SensitiveWordFilter {\n  @Override\n  public boolean doFilter(Content content) {\n    boolean legal = true;\n    //...\n    return legal;\n  }\n}\n\n// PoliticalWordFilter、AdsWordFilter类代码结构与SexyWordFilter类似\n\npublic class SensitiveWordFilterChain {\n  private List&lt;SensitiveWordFilter&gt; filters = new ArrayList&lt;&gt;();\n\n  public void addFilter(SensitiveWordFilter filter) {\n    this.filters.add(filter);\n  }\n\n  // return true if content doesn't contain sensitive words.\n  public boolean filter(Content content) {\n    for (SensitiveWordFilter filter : filters) {\n      if (!filter.doFilter(content)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\npublic class ApplicationDemo {\n  public static void main(String[] args) {\n    SensitiveWordFilterChain filterChain = new SensitiveWordFilterChain();\n    filterChain.addFilter(new AdsWordFilter());\n    filterChain.addFilter(new SexyWordFilter());\n    filterChain.addFilter(new PoliticalWordFilter());\n\n    boolean legal = filterChain.filter(new Content());\n    if (!legal) {\n      // 不发表\n    } else {\n      // 发表\n    }\n  }\n}\n</code></pre><p>看了上面的实现，你可能会说，我像下面这样也可以实现敏感词过滤功能，而且代码更加简单，为什么非要使用职责链模式呢？这是不是过度设计呢？</p><pre><code>public class SensitiveWordFilter {\n  // return true if content doesn't contain sensitive words.\n  public boolean filter(Content content) {\n    if (!filterSexyWord(content)) {\n      return false;\n    }\n\n    if (!filterAdsWord(content)) {\n      return false;\n    }\n\n    if (!filterPoliticalWord(content)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private boolean filterSexyWord(Content content) {\n    //....\n  }\n\n  private boolean filterAdsWord(Content content) {\n    //...\n  }\n\n  private boolean filterPoliticalWord(Content content) {\n    //...\n  }\n}\n</code></pre><p>我们前面多次讲过，应用设计模式主要是为了应对代码的复杂性，让其满足开闭原则，提高代码的扩展性。这里应用职责链模式也不例外。实际上，我们在讲解<a href=\"https://time.geekbang.org/column/article/214014\">策略模式</a>的时候，也讲过类似的问题，比如，为什么要用策略模式？当时的给出的理由，与现在应用职责链模式的理由，几乎是一样的，你可以结合着当时的讲解一块来看下。</p><p><strong>首先，我们来看，职责链模式如何应对代码的复杂性。</strong></p><p>将大块代码逻辑拆分成函数，将大类拆分成小类，是应对代码复杂性的常用方法。应用职责链模式，我们把各个敏感词过滤函数继续拆分出来，设计成独立的类，进一步简化了SensitiveWordFilter类，让SensitiveWordFilter类的代码不会过多，过复杂。</p><p><strong>其次，我们再来看，职责链模式如何让代码满足开闭原则，提高代码的扩展性。</strong></p><p>当我们要扩展新的过滤算法的时候，比如，我们还需要过滤特殊符号，按照非职责链模式的代码实现方式，我们需要修改SensitiveWordFilter的代码，违反开闭原则。不过，这样的修改还算比较集中，也是可以接受的。而职责链模式的实现方式更加优雅，只需要新添加一个Filter类，并且通过addFilter()函数将它添加到FilterChain中即可，其他代码完全不需要修改。</p><p>不过，你可能会说，即便使用职责链模式来实现，当添加新的过滤算法的时候，还是要修改客户端代码（ApplicationDemo），这样做也没有完全符合开闭原则。</p><p>实际上，细化一下的话，我们可以把上面的代码分成两类：框架代码和客户端代码。其中，ApplicationDemo属于客户端代码，也就是使用框架的代码。除ApplicationDemo之外的代码属于敏感词过滤框架代码。</p><p>假设敏感词过滤框架并不是我们开发维护的，而是我们引入的一个第三方框架，我们要扩展一个新的过滤算法，不可能直接去修改框架的源码。这个时候，利用职责链模式就能达到开篇所说的，在不修改框架源码的情况下，基于职责链模式提供的扩展点，来扩展新的功能。换句话说，我们在框架这个代码范围内实现了开闭原则。</p><p>除此之外，利用职责链模式相对于不用职责链的实现方式，还有一个好处，那就是配置过滤算法更加灵活，可以只选择使用某几个过滤算法。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块儿总结回顾一下，你需要重点掌握的内容。</p><p>在职责链模式中，多个处理器依次处理同一个请求。一个请求先经过A处理器处理，然后再把请求传递给B处理器，B处理器处理完后再传递给C处理器，以此类推，形成一个链条。链条上的每个处理器各自承担各自的处理职责，所以叫作职责链模式。</p><p>在GoF的定义中，一旦某个处理器能处理这个请求，就不会继续将请求传递给后续的处理器了。当然，在实际的开发中，也存在对这个模式的变体，那就是请求不会中途终止传递，而是会被所有的处理器都处理一遍。</p><p>职责链模式有两种常用的实现。一种是使用链表来存储处理器，另一种是使用数组来存储处理器，后面一种实现方式更加简单。</p><h2>课堂讨论</h2><p>今天讲到利用职责链模式，我们可以让框架代码满足开闭原则。添加一个新的处理器，只需要修改客户端代码。如果我们希望客户端代码也满足开闭原则，不修改任何代码，你有什么办法可以做到呢？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":194705,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1585098819,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"439671763011","product_id":100039001,"comment_content":"之前在公司做的一个关于金融日历的需求，就用到了老师说的指责链模式，一个用户有各种金融日历提醒，每个提醒逻辑不一样，通过给各个提醒服务打上注解标记，通过spring ioc容器中动态获取提醒服务对象，再利用Java中的future，并行调用，最终得到的提醒汇聚成了一个提醒列表，再通过排序规则返给前端，之前这么做了，代码复合开闭原则了，但不知道是责任链模式，老师讲了，才恍然大悟，是责任链的变体，所有链条都执行一遍。","like_count":103,"discussions":[{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572017,"discussion_content":"你这个是不是好像更优雅一点 ？🌚🌚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652542540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385013,"discussion_content":"good\n job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626850102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194623,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1585092546,"is_pvip":false,"discussion_count":8,"race_medal":1,"score":"267873064898","product_id":100039001,"comment_content":"如果希望客户端代码也满足开闭原则，不修改任何代码，那么有个办法是不需要用户手动添加处理器，让框架代码能自动发现处理器，然后自动调用，要实现这个，就需要框架代码中自动发现接口实现类，可以通过注解和反射实现，然后将所有实现类都放到调用链中。这有个问题就是不够灵活，所有调用链可能都被执行，用户不能自由选择和组合处理器。","like_count":63,"discussions":[{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259817,"discussion_content":"你的思路还是比较容易实现的，将Filter接口实现类打上component，然后扫描所有Filter即可。\b如果要自由选择，可以Filter多定义一个钩子方法之类的，比如每个Filter定义一个status，List<Filter>走一个stream流，过一下predicate（比如剩下A、B、C三种status的Filter），就可以剩下你最终需要执行的filter集合了。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1588821394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1214649,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/b9/af5db174.jpg","nickname":"andi轩","note":"","ucode":"3AE241BE60A3E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":264599,"discussion_content":"spring的Condition注解可以实现不同条件下filter的自由组合","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589336211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":259817,"ip_address":""},"score":264599,"extra":""}]},{"author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312242,"discussion_content":"可以做到用户自由选择和组合。比如使用注解的话，我们可以通过一个boolean来控制是否加入到流程中，我们可以通过int值来控制顺序。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1602639051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022127,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/98/af/3945cea4.jpg","nickname":"一剑","note":"","ucode":"93ADD5B5215D4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226703,"discussion_content":"是的，可以增加类似ignore的特性（c#）或注解（java）就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586439651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574379,"discussion_content":"可以调整为自己加载，根据配置进行动态调整","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654009240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2683430,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f2/26/a8ac6b42.jpg","nickname":"听风有信","note":"","ucode":"2CCB467114FF5C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535615,"discussion_content":"可以在处理器中再添加一个isSupport方法，支持的话才执行handle方法，否则调用下一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638497138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1686527,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/ff/86ac9581.jpg","nickname":"zhaoxb","note":"","ucode":"A392B6A3DE98B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2683430,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f2/26/a8ac6b42.jpg","nickname":"听风有信","note":"","ucode":"2CCB467114FF5C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":571718,"discussion_content":"你让我想到了shiro的Realm接口，多Realm时它会先检查AuthenticationToken是否受其支持，支持才进行处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652363619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535615,"ip_address":""},"score":571718,"extra":""}]},{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218314,"discussion_content":"SensitiveWordFilterChain filterChain = new SensitiveWordFilterChain();    filterChain.addFilter(new AdsWordFilter());    \nfilterChain.addFilter(new SexyWordFilter());    \nfilterChain.addFilter(new PoliticalWordFilter());\n这里不是自由组合的地方吗?  \n至于自动发现, 类似 @component 注解, 自己搞个 @MyFilter 也可以解决\n这是你想要的吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585647027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194609,"user_name":"tingye","can_delete":false,"product_type":"c1","uid":1391463,"ip_address":"","ucode":"54F7A44066DF5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","comment_is_top":false,"comment_ctime":1585091928,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"164793849176","product_id":100039001,"comment_content":"通过配置文件配置需要的处理器，客户端代码也可以不改，通过反射动态加载","like_count":38,"discussions":[{"author":{"id":1255918,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/ee/fba11edf.jpg","nickname":"        ","note":"","ucode":"21028A49D81B06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240343,"discussion_content":"支持自定义配置，也解决客户端代码修改的问题，我也觉得配置是一个比较好的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587353894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194560,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1585067419,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"70304544155","product_id":100039001,"comment_content":"职责链模式和装饰器模式太像了...","like_count":16,"discussions":[{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214420,"discussion_content":"设计模式应该从解决问题的场景来看，不应该从代码结构来看。语法规则就那么几个，代码结构类似或者相同是大概率的。只有知道解决了什么问题，才能写出好的代码。","likes_number":26,"is_delete":false,"is_hidden":false,"ctime":1585191248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1240510,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UXCLpCDP4o2LFpLIrEup2arUOHzwhPY3X8nOoNSRwS6NgNiaQEduN8exnEDicc8goGCARIthOzwEpGATpiadzv3oQ/132","nickname":"formain","note":"","ucode":"D0B7816D6A40E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216571,"discussion_content":"说的非常好! 这也是老师一直强调的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585466442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214420,"ip_address":""},"score":216571,"extra":""},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344077,"discussion_content":"这应该是， 不用纠结用像与不像，看具体使用场景","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611284161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214420,"ip_address":""},"score":344077,"extra":""},{"author":{"id":2115036,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIG9v88CtuQfOnvECccTAJSGic6KhsdQKhNKPNPIEcickDicWGqtMMP38AEa8qFotOicojFiazHmAzEr4g/132","nickname":"InfoQ_4e26bd8b8e0a","note":"","ucode":"87BFCC8DBC0082","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574227,"discussion_content":"是的阿富大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653915123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":344077,"ip_address":""},"score":574227,"extra":""}]},{"author":{"id":1700607,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f2/ff/efea501e.jpg","nickname":"风不会停息 。","note":"","ucode":"A7806203EAC6A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289794,"discussion_content":"感觉代码设计角度也不是很像。装饰器模式，是对 对象做一个功能的增强，增强的功能通常是不太存在依赖关系，也就说没有先后顺序，责任链模式，单从 链 这个角度看，个人认为还是 有一定的 依赖关系 或者说是 顺序的存在的，并且 有 handled<Boolean>这个 状态存在，相比而言 比 装饰器模式的 耦合性也要大一些。个人观点。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1594213339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/43/84039ac0.jpg","nickname":"S.H.E.R","note":"","ucode":"A3CB07B814053F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213519,"discussion_content":"不像吧。。。装饰器是为了增强方法或者类的功能，职责链是为了多个相同功能的组合起来。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585101371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/43/84039ac0.jpg","nickname":"S.H.E.R","note":"","ucode":"A3CB07B814053F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213892,"discussion_content":"我觉得仅仅从代码实现上看，是很像的，不过从功能和使用场景上看的话，那就是两个东西了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585132293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213519,"ip_address":""},"score":213892,"extra":""}]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309334,"discussion_content":"记忆和区分设计模式，最主要的方法就是它的应用场景，所能实现的功能，无非都是一些java简单语法，肯定是很多重叠的地方。\n你说的2个模式 首先一个是结构型(粗略得解释类和对象间得结构)，一个是行为型（细化到如何实现对象间的调用），\n我觉得不用纠结太细。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1601260376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235583,"avatar":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","nickname":"ZX","note":"","ucode":"0D2622FE6D1774","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384500,"discussion_content":"没有吧。。。装饰器是增强，职责链是调用关系处理","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1626618405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309565,"discussion_content":"我倒觉得 基于数组的职责链模式，写起来和 \n作者之前写的同步的观察者模式，策略模式的遍历，桥接模式搭配策略模式 ，\n写起来有点像。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601348870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/e2/3df248b9.jpg","nickname":"zhs","note":"","ucode":"83F5BC121F6A91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307951,"discussion_content":"确实很像。很多人在说不能看代码实现，而是要看设计的目的以及要解决的问题，但是我觉得这两种模式解决的问题也有很多重叠。比如，同样是要实现一个支持多种优惠活动的电商系统的商品价格计算，有些人使用装饰器模式，有些人使用职责链模式，都能很好的达到预期效果，也都易于维护和扩展。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1600793460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213878,"discussion_content":"我也觉得不像，只看代码实现没啥意义啊，关键要看使用场景","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585130552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298286,"discussion_content":"哪里像了？？？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597236398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1463740,"avatar":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","nickname":"Yeyw","note":"","ucode":"C9D20DB91C3BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363365,"discussion_content":"都是功能增强吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617180886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298286,"ip_address":""},"score":363365,"extra":""}]},{"author":{"id":1315367,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","nickname":"大头","note":"","ucode":"C1FB2C8A0FB0C0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213730,"discussion_content":"通过接口实现的那一版，我感觉和观察者模式更像了。注入进去一组实现，依次调用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585116642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1315367,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","nickname":"大头","note":"","ucode":"C1FB2C8A0FB0C0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":243466,"discussion_content":"观察者时单向并且可以异步的的，职责链是双向并且只能同步吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587542991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213730,"ip_address":""},"score":243466,"extra":""}]},{"author":{"id":1620507,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epTx3WM1A1hxjOmtfQNa0QQ01QUlhaaSHrZ3OcnzYibY1gFeNFAcZ7yQpxZsbyk7D9m6JA9X5j44tA/132","nickname":"糖醋排骨","note":"","ucode":"00ED918A220077","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213561,"discussion_content":"从uml图看，这两货是挺像的，都是组合自己。但是功能是不一样的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585105719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531370,"discussion_content":"从哪个角度看着像的？ 完全不像啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637293990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2095026,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/b2/b9d2d7d8.jpg","nickname":"","note":"","ucode":"79DB151C0BFC63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389008,"discussion_content":"不像啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629088816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2314948,"avatar":"","nickname":"小白","note":"","ucode":"ED798245A9B0CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349045,"discussion_content":"确实是，再某些场景下这两个模式非常像，比如过滤一个数组，前提是职责链模式是那种请求不会中途终止传递的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612858369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216946,"user_name":"Zexho","can_delete":false,"product_type":"c1","uid":1430343,"ip_address":"","ucode":"ADEB6624E29893","user_header":"https://static001.geekbang.org/account/avatar/00/15/d3/47/25ec564c.jpg","comment_is_top":false,"comment_ctime":1589374505,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"61718916649","product_id":100039001,"comment_content":"职责链模式和策略模式我觉得很像，本质上都可以当做 if else 的解耦行为。两者的不同主要体现判断的条件下：策略模式在传入参数的时候就可以根据参数先进行判断，然后觉得使用哪一个策略；但是职责链模式的参数是无法提前判断的，先要由链路上的函数处理。就像敏感词汇，不经过一系列的判断，是无法提前知道的。","like_count":14,"discussions":[{"author":{"id":2286788,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e4/c4/065f8c0c.jpg","nickname":"Tom-TTC","note":"","ucode":"36AB0797D6FD3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355491,"discussion_content":"不是特别认同。抽象来看敏感词判断同样是一个个条件，是否包含黄词，是否包含反动词，跟上面说的策略模式可以根据条件判断没什么本质区别，强行做策略模式并不是不可以。个人觉得不是你说的这个区别，是应用场景就不同，看起来都不是一回事。策略模式是根据一个条件，匹配出一个策略进行处理，职责链更像是找兜底方案的过程（经典型）或是层层过滤，雨露均沾的过程（变体型）。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615442810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1266987,"avatar":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","nickname":"超超超超超帅耶🌴","note":"","ucode":"931E23DC0ACB04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2286788,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e4/c4/065f8c0c.jpg","nickname":"Tom-TTC","note":"","ucode":"36AB0797D6FD3A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362546,"discussion_content":"你找兜底不就是因为不能在调用前判断具体用哪一种吗？判断各个敏感词的方法是在每个子类里面的，你在外面怎么去一次判断出来具体属于哪一类呢？如果能在调用点就判断出是用哪一类，并且只有一类，那其实策略模式明显更适合的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616980771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":355491,"ip_address":""},"score":362546,"extra":""}]},{"author":{"id":1003149,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4e/8d/34e0f6f3.jpg","nickname":"江小田","note":"","ucode":"C5197BF856E8D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585314,"discussion_content":"策略模式是，提前选择好后期的执行策略对象。职责链则是执行逻辑，还依赖于每个节点的处理结果。一点也不像","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661480401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245130,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ff/ca/aeaa9558.jpg","nickname":"刘彦辉","note":"","ucode":"741E43E6410BA9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581978,"discussion_content":"是不是应该这样区分：责任链模式一般是要保证所有处理方案都要执行一遍的，而策略模式最多只能有一种方案来执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659096110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1393886,"avatar":"http://thirdwx.qlogo.cn/mmopen/DGaO1JGLPvzZ2mvdUia9sD5CMm1A4V0NdGwq8KMg78u0bZzuamDEW6t5Qb8sXbfRhibhBzVonNibEfYxIYY7G6ZCyA8gQmlaRDia/132","nickname":"13064079017","note":"","ucode":"46EFD93951EA6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297946,"discussion_content":"理解一致，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597116119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194588,"user_name":"徐同学呀","can_delete":false,"product_type":"c1","uid":1252813,"ip_address":"","ucode":"03383EE820514D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/cd/3819726f.jpg","comment_is_top":false,"comment_ctime":1585074489,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53124682041","product_id":100039001,"comment_content":"在项目开发中，无意用到过滤链思维，也就是老师说的职责链模式的变体。理解更深刻了。<br>收获总结：<br>标准的职责链模式，链上的处理器顺序执行，有一个处理器可以处理，就终止传递执行<br>变体的职责链模式，链上的处理器会顺序执行，不会终止。<br><br>职责链模式的两种实现方式：<br>1.链表，只记录head和tail，结合模板方法模式，显式调用下一个处理器，具体处理器只要实现自己的处理逻辑即可。<br>2.数组列表，将处理器放进一个list里，Java的arraylist底层就是一个数组，for循环调用所有的处理器","like_count":13},{"had_liked":false,"id":225780,"user_name":"Wangxi","can_delete":false,"product_type":"c1","uid":1211790,"ip_address":"","ucode":"C25A9A14179930","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","comment_is_top":false,"comment_ctime":1591855598,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"40246561262","product_id":100039001,"comment_content":"okhttp对于 request和response的处理过程，非常经典的职责链模式。","like_count":9},{"had_liked":false,"id":195039,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1585130258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40239835922","product_id":100039001,"comment_content":"通过配置文件，配置需要的过滤处理器，利用java的反射机制，动态的加载处理器类，创建处理器对象。","like_count":9},{"had_liked":false,"id":194679,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1585097285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27354901061","product_id":100039001,"comment_content":"1 工厂模式创建chain<br>2 使用配置文件或注解添加节点<br>3 反射自动装配chain","like_count":6},{"had_liked":false,"id":239585,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1596592002,"is_pvip":false,"replies":[{"id":"89230","content":"������ successor后继的意思，跟next感觉差不多呀","user_name":"作者回复","comment_id":239585,"uid":"1190123","ip_address":"","utype":1,"ctime":1597412277,"user_name_real":"王争"}],"discussion_count":8,"race_medal":0,"score":"23071428482","product_id":100039001,"comment_content":"Handler类的这个成员变量：<br>protected Handler successor = null;<br>是不是命名为next更好一些，看这块理解了半天","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503147,"discussion_content":"������ successor后继的意思，跟next感觉差不多呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597412277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053926,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e6/ab69e495.jpg","nickname":"Aze","note":"","ucode":"F2F5E10E2432DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328872,"discussion_content":"英语不好的人，容易误当作success理解","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1606265905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1002201,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","nickname":"Mew151","note":"","ucode":"D4793F5874F345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053926,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e6/ab69e495.jpg","nickname":"Aze","note":"","ucode":"F2F5E10E2432DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329444,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606386300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":328872,"ip_address":""},"score":329444,"extra":""},{"author":{"id":1133194,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4a/8a/c1069412.jpg","nickname":"makermade","note":"","ucode":"03386B90CB8F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053926,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e6/ab69e495.jpg","nickname":"Aze","note":"","ucode":"F2F5E10E2432DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399810,"discussion_content":"？？？后继的标准写法啊，Jdk里很多地方都是用的这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633067349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":328872,"ip_address":""},"score":399810,"extra":""}]},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568352,"discussion_content":"successor 接班人，后继者。只能说，国产英语根深蒂固的人，理解有些难度。我也是看了很困惑，然后决定查一下这个单词的意思。果然，是不一样的。因为Gof不会取无关的名字来解释，作者也不会随便写一个无关的词来举例。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651111747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3030292,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaRfY1RIhERplkicltsesgZiaEUJ1LcFn0KX3l69gDDRh5HqliboZpFpyxa2YwicjnNdxTocujsoXwjg/132","nickname":"Geek_b6a6dd","note":"","ucode":"3FB4CC6431244A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588385,"discussion_content":"不会java，会一点C++的表示看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663731444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"海南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1849536,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/38/c0/fd5268b7.jpg","nickname":"天空之城","note":"","ucode":"87261300B4F999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360997,"discussion_content":"代码里面没有显示的setsuccessor(),也容易产生误解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616576540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309337,"discussion_content":"作者是用 前驱者 和  后继者(继承者) 来区分   上一步 下一步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601260633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263528,"user_name":"Geek_78eadb","can_delete":false,"product_type":"c1","uid":1712955,"ip_address":"","ucode":"843C6C380D28FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OYQh8KlUgMx0sZ35felqqRlboXkcOFib0qGgRHuvFCNIMzxRzxN8SjZpwtDuS0PGV0L0Pneiak7yzcd043f2efbg/132","comment_is_top":false,"comment_ctime":1606172588,"is_pvip":false,"replies":[{"id":"96094","content":"是的，你说的没错","user_name":"作者回复","comment_id":263528,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700743,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"14491074476","product_id":100039001,"comment_content":"UGC 的职责链实现和观察者模式太像了（如果用观察者实现，我感觉是一样的，可能没学精吧），不知道大家有没有同感！","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510226,"discussion_content":"是的，你说的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2159460,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/dsZ5CFV7mCIKEn7YcVFJXksO201eeqsJXoT4EYNvcibAKNSWSQVZPbbRgPKraWqg6YnaaRlVoywic9MEsflicRDibQ/132","nickname":"潜龙勿用","note":"","ucode":"EEB8A6F3E4A1B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546268,"discussion_content":"观察者也可以实现一个请求可以被多个对象处理，不过观察者之间没有联系。不能配合完成一项任务","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642260786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414978,"discussion_content":"责任链的反模式和观察者最像。都要全部执行。但是前者还注重一个顺序性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636951748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194735,"user_name":"攻城拔寨","can_delete":false,"product_type":"c1","uid":1053934,"ip_address":"","ucode":"CBC37183DAB6B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/ee/d72a8222.jpg","comment_is_top":false,"comment_ctime":1585100752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470002640","product_id":100039001,"comment_content":"如果客户端全盘接受所有处理器，可以通过自动扫描注册的方式添加处理器。这样比较不灵活，客户端没法选处理器。<br>还有个方法就是用配置中心&#47;文件去做，客户端通过配置添加处理器。如果存在多个客户端代码需要添加不同处理器，可以用不同配置项去加载添加责任链。","like_count":3},{"had_liked":false,"id":194685,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1585097796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14469999684","product_id":100039001,"comment_content":"在静态初始化块里面定义好字符串常量与处理类的对应关系，用户使用的时候在配置文件里面配置好","like_count":3},{"had_liked":false,"id":231741,"user_name":"hj","can_delete":false,"product_type":"c1","uid":1264287,"ip_address":"","ucode":"6ED34286AC30FA","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","comment_is_top":false,"comment_ctime":1593762364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183696956","product_id":100039001,"comment_content":"类似  Java  SPI 的方式可以实现，客户端开闭原则","like_count":2},{"had_liked":false,"id":208755,"user_name":"泥鳅儿","can_delete":false,"product_type":"c1","uid":1323000,"ip_address":"","ucode":"26B47C8FC67615","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ojfRyNRvy1x3Mia0nssz6CNPHrHXwPPmibvds1URgoHQuKXrGiaxrEbsT6sAvuK4N4AOicySh8S9iaWcOLjteOl6Kgg/132","comment_is_top":false,"comment_ctime":1587432592,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10177367184","product_id":100039001,"comment_content":"争哥，有个地方不太明白，就是用链表来实现时，只定义了head和tail了，如果chain里add了三个以上的handler，那中间的handler能执行吗，是怎么执行的？","like_count":2,"discussions":[{"author":{"id":2875547,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/9b/21f6f607.jpg","nickname":"L","note":"","ucode":"46E1848E786751","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543667,"discussion_content":"能执行的，第一个的Successo 指向第二个，第二个的Successo 指向第三个，他们之间有个指针来指向下一个过滤器是谁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641264970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194768,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1585104234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175038826","product_id":100039001,"comment_content":"总结: <br><br>* Chain Of Responsibility Pattern通常应用在框架设计中, 为框架提供扩展点.<br>* COF Pattern 在我们日常使用的框架中经常见到: Okhttp的HttpRequestInterceptor, Rxjava的ObservableFilter等等.<br>* COF的底层实现方式通常分为两种: 数组实现和链表实现. 无论哪种实现, 都可以使用Iterator来遍历职责链.<br><br><br><br>课堂讨论:<br><br>​    今天讲到利用职责链模式，我们可以让框架代码满足开闭原则。添加一个新的处理器，只需要修改客户端代码。如果我们希望客户端代码也满足开闭原则，不修改任何代码，你有什么办法可以做到呢？<br><br><br><br>​    如果客户端代码满足开闭原则, 则需要从Chain的构造器着手, Chain构造完成后直接调用执行即可.<br><br>​    可以采用依赖注入的方式为Chain注入对象, 其底层原理通常是注解+反射.","like_count":2},{"had_liked":false,"id":194709,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1585099244,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10175033836","product_id":100039001,"comment_content":"课后题:在项目中遇到跟责任链模式很相像的内容,业务是将天线扫描到的电子标签分发到不同的类中,这些类都实现了一个接口,有同样的方法,项目中的做法是在对象中维护一个ArrayList容器,在对象与天线建立连接后开始回调,将数据发送给各个实现类<br>我们需要做的就是给某个接口添加一个实现类,然后将它存入对象的容器中,通过利用框架的依赖注入的方式,在类这个粒度上可以满足开闭原则","like_count":2},{"had_liked":false,"id":194660,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1585095613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175030205","product_id":100039001,"comment_content":"思考题，客户端组装过滤器时，从配置文件获取","like_count":2},{"had_liked":false,"id":252793,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1602489232,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5897456528","product_id":100039001,"comment_content":"职责链的意思我看懂了，第二种数组式的方式没问题，但是第一种方式的add handler 没看明白<br><br>public void addHandler(Handler handler) { <br>handler.setSuccessor(null); <br><br>if (head == null) { head = handler; tail = handler; return; }<br>tail.setSuccessor(handler); <br>tail = handler; <br>}<br><br>这段代码里没有看到为head指向继任者  如 head.setSuccessor(tail) ","like_count":1,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350060,"discussion_content":"首次进入方法，head为空，将head和tail都指向handler——注意此时它俩是同一个引用。第二次进入方法，为tail添加后继，就相当于为head添加后继。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1613695117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1354013,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","nickname":"大方方","note":"","ucode":"621AD8F1485753","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":354341,"discussion_content":"啊谢谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615277911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350060,"ip_address":""},"score":354341,"extra":""}]}]},{"had_liked":false,"id":239380,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1596517144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891484440","product_id":100039001,"comment_content":"责任链模式是将一个行为的处理动作用链式拦截，这样的好处是非常灵活，如果有新的处理只需要在链尾新加即可。","like_count":1,"discussions":[{"author":{"id":1068819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","nickname":"永旭","note":"","ucode":"C9C74BE32C8F46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270758,"discussion_content":"为什么你能总结的这么清晰而简洁 . 佩服","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1590048380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116862,"avatar":"","nickname":"leior","note":"","ucode":"82AEBD0D254362","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159041,"discussion_content":"既要考虑未来，又要考虑已有","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1580650009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632716,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/cc/1eb3120e.jpg","nickname":"至今未来","note":"","ucode":"ED6F557FDB0B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106256,"discussion_content":"同时 我觉得对扩展开放也是在提高代码的复用 ","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1577526112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2273754,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/da/5602cb4b.jpg","nickname":"king","note":"","ucode":"1E5BD0E2A789C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1632716,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/cc/1eb3120e.jpg","nickname":"至今未来","note":"","ucode":"ED6F557FDB0B5B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319119,"discussion_content":"牛批老哥，的确有这种意味","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603946431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106256,"ip_address":""},"score":319119,"extra":""}]},{"author":{"id":1269792,"avatar":"","nickname":"Geek_527ae1","note":"","ucode":"561DBD6D8A8EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318324,"discussion_content":"精辟","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603705170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241613,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/0d/d567a50a.jpg","nickname":"Bezier","note":"","ucode":"FDD57CB90E12C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218298,"discussion_content":"总结的简单粗暴，短小又精悍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585645816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1549661,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a5/5d/22829a03.jpg","nickname":"等等 女皇","note":"","ucode":"81423644144550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369839,"discussion_content":"扩展开放的的扩展并非指需求层面要扩展，而是指代码设计的易于扩展，好的扩展往往就是增加东西，而非修改已有的，这样被影响的代码的范围就少了，修改也就关闭了。而在这之前就要做好变化和不变化的隔离设计。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619170810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2555948,"avatar":"","nickname":"Geek_b76b97","note":"","ucode":"5968DEF6D0018B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1549661,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a5/5d/22829a03.jpg","nickname":"等等 女皇","note":"","ucode":"81423644144550","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375243,"discussion_content":"是需求方面需要扩展才引起的代码层面需要扩展吧，修改的关闭主要是为了系统的稳定性和可维护性","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1621527272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369839,"ip_address":""},"score":375243,"extra":""}]},{"author":{"id":1014534,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6LGLtCCNoIf8S09fxcvk1OrTicPibZgX3kf8aaowY5nD8mTicH9SZZ8SlxgJvppqPThK1cEibrlA7bw/132","nickname":"秦汉2022","note":"","ucode":"C99D56B44F79C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300062,"discussion_content":"一语中的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597924768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299377,"discussion_content":"短小精悍，给你个赞。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597668646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531725,"discussion_content":"短小精悍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637397294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4a/96/8756eaa2.jpg","nickname":"王也","note":"","ucode":"9EA69B51ECC99F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374828,"discussion_content":"概念都理解错了还弹性呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621384691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597071,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","nickname":"Geek_00e01b","note":"","ucode":"BC76A83B53D0EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328557,"discussion_content":"弹性，张力，搞不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606180351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1517556,"avatar":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","nickname":"一尾","note":"","ucode":"67D404036231D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304484,"discussion_content":"汉语博大精深....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599578348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738272,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/20/e71b5585.jpg","nickname":"蓝二哥哥我才是无羡啊👻","note":"","ucode":"E70EE4E08F16AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295395,"discussion_content":"说得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596181873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2058308,"avatar":"","nickname":"Geek_71cea9","note":"","ucode":"DE88271BA527DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289996,"discussion_content":"说的真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594296970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237894,"user_name":"托尼斯威特","can_delete":false,"product_type":"c1","uid":1729060,"ip_address":"","ucode":"98A1035527292E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","comment_is_top":false,"comment_ctime":1595998504,"is_pvip":false,"replies":[{"id":"88024","content":"这个顺序是怎么不小心改变的呢？想不到啊。如果有顺序要求的话，建议每个handler加个order权重属性，chain按照权重大小顺序执行","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1596109892,"ip_address":"","comment_id":237894,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5890965800","product_id":100039001,"comment_content":"handler 处理顺序有时候是有要求的. 可是责任链模式本身没有能力限制顺序. <br>比如chain中handler的顺序是 A -&gt; B -&gt; C, 这时候有人不小心修改成了 A-&gt; C-&gt; B , 就会造成bug.<br>如何防止这种bug呢? ","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502582,"discussion_content":"这个顺序是怎么不小心改变的呢？想不到啊。如果有顺序要求的话，建议每个handler加个order权重属性，chain按照权重大小顺序执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596109892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295262,"discussion_content":"对顺序有要求，比如优先选A，而C是最后failover handler.  当handler很多时，再添加新的handler就要思考放在第几个，甚至有可能调整原顺序。加权重是和个好想法呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596137490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219055,"user_name":"小小灬厮","can_delete":false,"product_type":"c1","uid":1445003,"ip_address":"","ucode":"F4197D2F73364B","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/8b/3f7e9e74.jpg","comment_is_top":false,"comment_ctime":1589937918,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5884905214","product_id":100039001,"comment_content":"看上去像状态机","like_count":1,"discussions":[{"author":{"id":2159460,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/dsZ5CFV7mCIKEn7YcVFJXksO201eeqsJXoT4EYNvcibAKNSWSQVZPbbRgPKraWqg6YnaaRlVoywic9MEsflicRDibQ/132","nickname":"潜龙勿用","note":"","ucode":"EEB8A6F3E4A1B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546271,"discussion_content":"状态机是图，职责链是线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642260938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214064,"user_name":"唯有学习不止","can_delete":false,"product_type":"c1","uid":1721251,"ip_address":"","ucode":"52DA78BBEC4D38","user_header":"https://static001.geekbang.org/account/avatar/00/1a/43/a3/53f7f1fe.jpg","comment_is_top":false,"comment_ctime":1588648908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883616204","product_id":100039001,"comment_content":"看了下公司的发布信息的功能，也有多重拦截判断，但是没有使用责任链模式。 要实现客户端也不做修改，我能想到的就只有用注解了，因为责任链应该是有序的，注解里需要加上权重来表明顺序","like_count":1},{"had_liked":false,"id":211152,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1587905906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882873202","product_id":100039001,"comment_content":"课后习题，使用配以文件，不就可以满足了吗？","like_count":1},{"had_liked":false,"id":206368,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1586849003,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5881816299","product_id":100039001,"comment_content":"添加一个新的处理器，不需要修改任何代码，可以根据只要实现Handler的接口或者抽象类，就加入到处理器存储链中，这样当新增一个处理器的时候，完全不用修改任何代码，只需要新处理器实现接口或者抽象类即可；在Spring中，有比较多这样的例子。","like_count":1},{"had_liked":false,"id":200036,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1585535376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880502672","product_id":100039001,"comment_content":"课后问题：<br>方法比较多，可以通过解析配置文件生成对应的链，那就不用改代码了。或者可以使用注解，框架通过注解识别到对应的处理器并且将其生成链。<br>---<br>责任链这个设计模式感觉是算比较实用的一个了，在工作时有几种场景用到：<br>1）过滤链的设计，一条数据要不要过滤，通过扩展不同的过滤器来决定和小争哥文章说的类似。由于我们的每个过滤器代码都比较复杂，而且优先级也不一样，所以通过这种设计模式很好的降低了复杂度、解耦。<br>2）数据加工处理，一条数据过来了，只有最基础的IP信息，我们需要对它做不同的加工处理，例如扩展出省份运营商（调用接口1）、扩充出其对应的服务器厂商（调用接口2）等等。而针对不同的业务可能不需要全部字段，例如假如这条数据如果是从公司自己的接口上报的要所有字段，如果是从友商接口上报的只要个别几个字段。通过责任链非常灵活的实现了扩展、定制化配置<br><br><br>","like_count":1},{"had_liked":false,"id":196308,"user_name":"平凡世界","can_delete":false,"product_type":"c1","uid":1449072,"ip_address":"","ucode":"7820CC3BD329A4","user_header":"https://static001.geekbang.org/account/avatar/00/16/1c/70/e4e02e84.jpg","comment_is_top":false,"comment_ctime":1585271462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880238758","product_id":100039001,"comment_content":"请求中间件，也算职责链的一种变体吧","like_count":1},{"had_liked":false,"id":195483,"user_name":"君哥聊技术","can_delete":false,"product_type":"c1","uid":1325816,"ip_address":"","ucode":"2C9A22BCE4C79E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","comment_is_top":false,"comment_ctime":1585191042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880158338","product_id":100039001,"comment_content":"使用注解方式，定义一个注解接口，里面定义2个参数，一个是处理器在职责链的顺序order，第二个是是否开启处理open，在所有的处理器类上面加上这个注解并且指定这2个参数。这样新增加一个处理器时，只需要加上注解，并且定义好这2个参数就行了。","like_count":1},{"had_liked":false,"id":194677,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1585097226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880064522","product_id":100039001,"comment_content":"配置文件+反射","like_count":1},{"had_liked":false,"id":194676,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1585097211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880064507","product_id":100039001,"comment_content":"可以使用自定义注解来添加责任链","like_count":1},{"had_liked":false,"id":355883,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"广东","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1661827549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661827549","product_id":100039001,"comment_content":"突然想到shiro这个关于认证校验这个就是责任链，就是多个校验过一个就可以。只要你在客户端定义一个realm就可以，以及其他的配置。","like_count":0},{"had_liked":false,"id":350206,"user_name":"掉进码坑","can_delete":false,"product_type":"c1","uid":2032818,"ip_address":"","ucode":"B8868B4315C3BA","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/b2/b3357015.jpg","comment_is_top":false,"comment_ctime":1656660234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656660234","product_id":100039001,"comment_content":"职责链的变型与观察者模式无异","like_count":0},{"had_liked":false,"id":347674,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1654301627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654301627","product_id":100039001,"comment_content":"可以在项目启动初始化的时候，对过滤器进行统一加载，方式有扫描所有的这个接口，或者对这样的需要扫描加入链式的类加上特定的注解。<br><br>客户端使用的时候就不需要显示的去将各个职责加入到链条中。只需要添加新的职责类即可。","like_count":0},{"had_liked":false,"id":346836,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1653467634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653467634","product_id":100039001,"comment_content":"第二种实现方式可以很好的契合Spring自动注入功能，前两年我写计算健康码颜色的功能就用到了","like_count":0},{"had_liked":false,"id":343882,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1651111489,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1651111489","product_id":100039001,"comment_content":"successor 是接班人、后来者的意思。我一直以为是success（成功），successor（成功者）。我说，GoF不可能取一个不相关的词来命名的呀。得多学习学习，见识不够呀。","like_count":0},{"had_liked":false,"id":343847,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1651076834,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1651076834","product_id":100039001,"comment_content":"“实际上，职责链模式还有一种变体，那就是请求会被所有的处理器都处理一遍，不存在中途终止的情况。这种变体也有两种实现方式：用链表存储处理器和用数组存储处理器，跟上面的两种实现方式类似，只需要稍微修改即可。”<br><br>这句话说的那个代码【链式实现的方式】，是如何让请求不断，每一个节点都走过的呀？作者省略了一些代码，压根看不懂呢。","like_count":0,"discussions":[{"author":{"id":2596393,"avatar":"https://static001.geekbang.org/account/avatar/00/27/9e/29/a55da673.jpg","nickname":"矿仔","note":"","ucode":"6F5D60D4F16250","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580385,"discussion_content":"我理解原有的职责链模式中，在这条链上的每一个处理器对于该请求都有一个返回状态的标志(handled)，对于是否要将请求向下传递会通过handled的值(true/false，也就是那个处理器有没有处理这个请求)来决定；而变体中实现的是请求不断，让每一个处理器都处理这个请求，此时不再需要这个状态标志handled，那这个链上的每个处理器都会处理这个请求，直到链上没有处理器了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658136362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343658,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1650970677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650970677","product_id":100039001,"comment_content":"如果我们希望客户端代码也满足开闭原则，不修改任何代码，你有什么办法可以做到呢？<br>用注解和反射去实现","like_count":0},{"had_liked":false,"id":340811,"user_name":"Geek_21b40e","can_delete":false,"product_type":"c1","uid":2786069,"ip_address":"","ucode":"4685CA6B6928B2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5pVvSKyMfFiadLD9gicicr4OGzicHPCBicTicAxOmRZBzibOj3vtJNadZqcxWrFiczPzEv9xPicLgeUWOXQI1DbvCDaR4FA/132","comment_is_top":false,"comment_ctime":1649154268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649154268","product_id":100039001,"comment_content":"请问大家，为什么数组实现时用了接口，链表实现时用了抽象类呀，有什么说道吗？","like_count":0},{"had_liked":false,"id":339935,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1648471146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648471146","product_id":100039001,"comment_content":"利用 spring 自动注入的功能可以实现。或者 使用反射机制自己实现","like_count":0},{"had_liked":false,"id":339186,"user_name":"肥low","can_delete":false,"product_type":"c1","uid":1043480,"ip_address":"","ucode":"A158AFAAB8C742","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","comment_is_top":false,"comment_ctime":1647960053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647960053","product_id":100039001,"comment_content":"就前几天用这个模式做埋点统计的功能，做完上线之后才知道原来这是用到了责任链模式啊😅<br>针对老师的问题，我觉得可以做成配置，配置可以是文件或者数据库，通过反射功能动态加载配置不就OK了嘛","like_count":0,"discussions":[{"author":{"id":1031309,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/8d/580ca194.jpg","nickname":"晓梦迷蝴蝶","note":"","ucode":"DC638290229B6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215394,"discussion_content":"Map 就没有oop概念了 更没有后面的重构 设计模式 我带团队这种是直接批评的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585320596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1264287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","nickname":"hj","note":"","ucode":"6ED34286AC30FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1031309,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/8d/580ca194.jpg","nickname":"晓梦迷蝴蝶","note":"","ucode":"DC638290229B6F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245061,"discussion_content":"会有哪些问题呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587648928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215394,"ip_address":""},"score":245061,"extra":""},{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","nickname":"hj","note":"","ucode":"6ED34286AC30FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278992,"discussion_content":"点儿不出来提示😃","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1591269149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245061,"ip_address":""},"score":278992,"extra":""},{"author":{"id":1624574,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/fe/874b172b.jpg","nickname":"benxiong","note":"","ucode":"F6498059D439D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282022,"discussion_content":"哈哈哈一语道破真谛","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591863017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278992,"ip_address":""},"score":282022,"extra":""}]},{"author":{"id":1005630,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/3e/77c9b529.jpg","nickname":"Sanhong","note":"","ucode":"0B68D6EE423CA8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328889,"discussion_content":"我司也是，来的时候，很吃惊，现在已被同化","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1606267615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036273,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cf/f1/bf63fef6.jpg","nickname":"洛子墟","note":"","ucode":"CFC500D00F0B9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209063,"discussion_content":"优点是接口改动小，缺点太多，槽点也太多了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584605338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1264287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","nickname":"hj","note":"","ucode":"6ED34286AC30FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1036273,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cf/f1/bf63fef6.jpg","nickname":"洛子墟","note":"","ucode":"CFC500D00F0B9B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245060,"discussion_content":"缺点和槽点能否列举一二","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587648904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209063,"ip_address":""},"score":245060,"extra":""},{"author":{"id":1139384,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","nickname":"Promise°","note":"","ucode":"0BFDBDAD852D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","nickname":"hj","note":"","ucode":"6ED34286AC30FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293382,"discussion_content":"个人见解:\n   1. 接口数据不明确,不通俗易懂 比如: chngeUserName(userid,userName) 入参为这两个参数 但如果为Map的话 可能就要具体到去撸实现才能知道需要传递什么参数 原则上接口是实体类的话,也会有这个问题 不过相对来说实际参数或对象会比map好一些 mp即使增加了参数也看不出来 \n   2. 实现类的校验逻辑及其数据转换需要处理 如果是map的话 尤其是多参数 基础数据类型和对象都存在 数据需要强转 并且实现类如果改了类型 调用方是无法察觉的 存在转换异常的情况","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1595516068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245060,"ip_address":""},"score":293382,"extra":""},{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/9f/b92a9139.jpg","nickname":"hj","note":"","ucode":"6ED34286AC30FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561189,"discussion_content":"一个方法还好，如果套娃一样都使用Map，请问 其他模块使用你的方法，如何知道接口的入参都有什么？ 如果你在其中改了一个Map的数据 其他地方是无法察觉的，直接GG","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649573809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245060,"ip_address":""},"score":561189,"extra":""}]},{"author":{"id":1328500,"avatar":"https://static001.geekbang.org/account/avatar/00/14/45/74/7a82eebb.jpg","nickname":"Ins","note":"","ucode":"A2509BAD9CB72C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577459,"discussion_content":"存在即合理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656128145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251242,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/aa/c00c0fdd.jpg","nickname":"七公里蔚蓝","note":"","ucode":"CD08CDEAEF2DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577311,"discussion_content":"写lua的表示传入参数是个表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656036117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2575050,"avatar":"https://static001.geekbang.org/account/avatar/00/27/4a/ca/3b941a89.jpg","nickname":"立冬","note":"","ucode":"6E83A56084DDEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551911,"discussion_content":"map方便热部署","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645172589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334583,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","nickname":"小苗晓雪","note":"","ucode":"B15FDF455853D2","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541906,"discussion_content":"牛哇~那对你们单位来说模型的概念完全没有 , 就算用模型也只为了点语法而已 , 那这么个写法是纯纯的贫血模型的写法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640599051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313365,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","nickname":"振振","note":"","ucode":"ECE08186230140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400576,"discussion_content":"如果你经常用map传参，可能你这一层没啥业务价值😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633335183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259156,"avatar":"https://static001.geekbang.org/account/avatar/00/13/36/94/0b969588.jpg","nickname":"青年祭司","note":"","ucode":"C88EDAE3FF09AE","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379325,"discussion_content":"我司也是，所以一定要把注释写清楚，不然读代码很费劲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623830381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261052,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/fc/f81d7847.jpg","nickname":"BATMAN","note":"","ucode":"414137A1074E62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352506,"discussion_content":"我刚工作时候也是这样，现在看到用map入参的想打人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614757648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2346442,"avatar":"","nickname":"Geek_8e5ba8","note":"","ucode":"0F8B4D869F4A9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336516,"discussion_content":"我们这是查询接口入参用map，更新用对象接参","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608613517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144171,"avatar":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","nickname":"lcf枫","note":"","ucode":"D51E8F68BD41CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199572,"discussion_content":"Python吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583594325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1744092,"avatar":"","nickname":"古杨","note":"","ucode":"8F52AA86B589C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144171,"avatar":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","nickname":"lcf枫","note":"","ucode":"D51E8F68BD41CA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200174,"discussion_content":"JAVA啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583664513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":199572,"ip_address":""},"score":200174,"extra":""}]}]},{"had_liked":false,"id":338178,"user_name":"清凉","can_delete":false,"product_type":"c1","uid":1343565,"ip_address":"","ucode":"15E52B44C857CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/80/4d/058e6b6d.jpg","comment_is_top":false,"comment_ctime":1647336117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647336117","product_id":100039001,"comment_content":"可以通过注解驱动，然后主动发现，利用反射关键对象","like_count":0},{"had_liked":false,"id":330899,"user_name":"潜龙勿用","can_delete":false,"product_type":"c1","uid":2159460,"ip_address":"","ucode":"EEB8A6F3E4A1B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dsZ5CFV7mCIKEn7YcVFJXksO201eeqsJXoT4EYNvcibAKNSWSQVZPbbRgPKraWqg6YnaaRlVoywic9MEsflicRDibQ/132","comment_is_top":false,"comment_ctime":1642260526,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642260526","product_id":100039001,"comment_content":"我遇到的还有一个变种，就是链里面的对象都处理请求，并且要决定终止不终止请求","like_count":0},{"had_liked":false,"id":322245,"user_name":"mqray","can_delete":false,"product_type":"c1","uid":1336634,"ip_address":"","ucode":"15664507AD7033","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","comment_is_top":false,"comment_ctime":1637261138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637261138","product_id":100039001,"comment_content":"最近有个课题，如果责任链上有不符合的 就不执行后续链上动作该如何处理呢？","like_count":0},{"had_liked":false,"id":322015,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1011656,"ip_address":"","ucode":"491583C0980A26","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6f/c8/4183a146.jpg","comment_is_top":false,"comment_ctime":1637138289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637138289","product_id":100039001,"comment_content":"这个专栏对Java程序员还是很友好啊<br>","like_count":0},{"had_liked":false,"id":322004,"user_name":"intomymind","can_delete":false,"product_type":"c1","uid":1105126,"ip_address":"","ucode":"B954C9BFEC8667","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/e6/cfb409ab.jpg","comment_is_top":false,"comment_ctime":1637134472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637134472","product_id":100039001,"comment_content":"1、通过主动向HandlerChain发起注册<br>2、自动发现，可以通过扫描注解或者通过spi机制","like_count":0},{"had_liked":false,"id":320562,"user_name":"fx","can_delete":false,"product_type":"c1","uid":2334235,"ip_address":"","ucode":"CA9066014707F3","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/1b/7abfa59f.jpg","comment_is_top":false,"comment_ctime":1636380740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636380740","product_id":100039001,"comment_content":"责任链和模板的区别能解释下吗","like_count":0},{"had_liked":false,"id":318799,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1635426380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635426380","product_id":100039001,"comment_content":"课后问题可以做成配置文件，客户端调用配置文件，每次修改就只需要修改配置文件就好了。","like_count":0},{"had_liked":false,"id":317945,"user_name":"Geek_32cca0","can_delete":false,"product_type":"c1","uid":2743957,"ip_address":"","ucode":"A24204F2C0485E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF8vUICSb6yEleDjtsTe8OrwqmpaoxlicHB7NutCwMMs5ZvsQrguEJ3VL0x5I85jS6xlbrWcMdWKA/132","comment_is_top":false,"comment_ctime":1635067152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635067152","product_id":100039001,"comment_content":"这种思想其实前面出现过，这里发现这种写法居然属于职责链。","like_count":0},{"had_liked":false,"id":314719,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1633346301,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1633346301","product_id":100039001,"comment_content":"spring自动注入处理器","like_count":0},{"had_liked":false,"id":305408,"user_name":"Geek_palmlan","can_delete":false,"product_type":"c1","uid":1345640,"ip_address":"","ucode":"B62A6372CB6376","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKubuofHB43wdIwvnWSIdL6YzfGZhic7abWu06ia8BwnMBDCbCFDIF1RQB4nN46Ldv6ALQf025E2mRA/132","comment_is_top":false,"comment_ctime":1627961905,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627961905","product_id":100039001,"comment_content":"说人话就是业务对象流水线传递处理模式。","like_count":0},{"had_liked":false,"id":300530,"user_name":"王先森","can_delete":false,"product_type":"c1","uid":1022267,"ip_address":"","ucode":"1AF1A395107479","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/3b/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1625208157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625208157","product_id":100039001,"comment_content":"非常像PHP的laravel框架Middleware","like_count":0},{"had_liked":false,"id":300285,"user_name":"了无痕","can_delete":false,"product_type":"c1","uid":1284279,"ip_address":"","ucode":"E066E72F0CB4B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/b7/2c725922.jpg","comment_is_top":false,"comment_ctime":1625097199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625097199","product_id":100039001,"comment_content":"nginx的head和body生成过程也是职责链模式，是使用链表来实现的","like_count":0},{"had_liked":false,"id":297910,"user_name":"omega","can_delete":false,"product_type":"c1","uid":2421889,"ip_address":"","ucode":"BAEFC62975DC53","user_header":"https://static001.geekbang.org/account/avatar/00/24/f4/81/7a3eaa9b.jpg","comment_is_top":false,"comment_ctime":1623840287,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623840287","product_id":100039001,"comment_content":"职责链中有状态对象除了用threadlocal解决还有没有更好的办法","like_count":0},{"had_liked":false,"id":293651,"user_name":"Time-sun","can_delete":false,"product_type":"c1","uid":1949865,"ip_address":"","ucode":"47D2EB4FD2F925","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/tiaEaUwoYl8z5FROHibq5XYjjcuTia840dHYT8zqwV4ibfWPNeQHw3ib20iba8bRRkVxwYUCz9ENkDGRsfnmSJQBAALA/132","comment_is_top":false,"comment_ctime":1621478794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621478794","product_id":100039001,"comment_content":"对一个请求，可能有不同的处理流程。职责链模式就是把未来可能出现的处理，开发了一个接口出来。","like_count":0},{"had_liked":false,"id":292609,"user_name":"员外","can_delete":false,"product_type":"c1","uid":2211971,"ip_address":"","ucode":"E77FE124BE2C4D","user_header":"","comment_is_top":false,"comment_ctime":1620894620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620894620","product_id":100039001,"comment_content":"从这个例子来看，完全没有考虑有参数的情况的传递，如果有参数，这个就灵了","like_count":0},{"had_liked":false,"id":289397,"user_name":"Geek_897ea4","can_delete":false,"product_type":"c1","uid":1708328,"ip_address":"","ucode":"864B05054D686A","user_header":"","comment_is_top":false,"comment_ctime":1618997325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618997325","product_id":100039001,"comment_content":"为什么感觉责任链模式用数组实现的例子，和观察者模式很像。","like_count":0},{"had_liked":false,"id":287922,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1618216827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618216827","product_id":100039001,"comment_content":"移动开发中的手势响应者链就是典型的职责链模式。","like_count":0},{"had_liked":false,"id":286185,"user_name":"Yeyw","can_delete":false,"product_type":"c1","uid":1463740,"ip_address":"","ucode":"C9D20DB91C3BE5","user_header":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","comment_is_top":false,"comment_ctime":1617180856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617180856","product_id":100039001,"comment_content":"思考题：配置文件或者注解实现","like_count":0},{"had_liked":false,"id":282851,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1615438822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615438822","product_id":100039001,"comment_content":"1.设计模式如何简化代码复杂性？<br>大类拆成小类，大函数拆成小函数，劲进而可以小函数设计成一个类。<br>2.开闭原则<br>开闭原则不一定是所有代码不作修改，我们可以追求局部范围内的代码不作修改。<br>比如，将代码划分为框架服务代码和客户端代码，让框架服务代码符合开闭原则，客户端代码尽可能少改动。<br>3.关于抽象父类的设计<br>将固定的属性和方法添加final关键字，尤其是固定的步骤，这样可以减少使用方出错。<br><br>今天的问答，瞬间想到答案，设计模式越来越有感觉了","like_count":0},{"had_liked":false,"id":282052,"user_name":"当你的世界里有风吹过","can_delete":false,"product_type":"c1","uid":2051946,"ip_address":"","ucode":"42712891366309","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","comment_is_top":false,"comment_ctime":1615036411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615036411","product_id":100039001,"comment_content":"个人觉得执行职责链中的处理器的时候，失败的时候是否需要继续往下执行，可以给每一个处理器添加状态，记录当前处理器是否要依赖之前的失败。而这个状态一直往下流动，这样更加的灵活。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477208,"discussion_content":"1. 是贫血模型\n2. 不好讲，拆分之后，类增加，维护成本高一些，但职责更单一，更加高内聚、低耦合，扩展性更好些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575896283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289362,"discussion_content":"或者继承统一父类ApiStateInfo ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594081741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560013,"discussion_content":"没有一次到位的代码吧，考虑太多 可能项目直接Delay了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649122865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534049,"discussion_content":"确实 整体来说还是要根据之后的业务发展慢慢来重构拆分 一次性想到这么后面反而不是一个好的做法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638079390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372542,"discussion_content":"是的，如果后边业务不断拓展就需要考虑针对ApiStateInfo的拆分的问题，那么通过哪种方式能将耦合拆分，使得改动最小呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620373519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276105,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1611795780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611795780","product_id":100039001,"comment_content":"作为一个CPP选手，我听闻Spring IOC可以满足客户端符合开闭原则的需求，cpp太难了","like_count":0},{"had_liked":false,"id":272232,"user_name":"gray","can_delete":false,"product_type":"c1","uid":1234604,"ip_address":"","ucode":"F4959C9D55A832","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/ac/dafb3a92.jpg","comment_is_top":false,"comment_ctime":1609999263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609999263","product_id":100039001,"comment_content":"职责链和模板比较像，父类定义好模板方法，子类实现方法；我理解就是多了个“后继者”","like_count":0},{"had_liked":false,"id":270825,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1609292673,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609292673","product_id":100039001,"comment_content":"拦截器实现类使用spring依赖注入可以避免增加拦截器修改客户端代码","like_count":0},{"had_liked":false,"id":270317,"user_name":"Winter","can_delete":false,"product_type":"c1","uid":1125606,"ip_address":"","ucode":"EC6A890003EFF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/e6/01788cca.jpg","comment_is_top":false,"comment_ctime":1609064799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609064799","product_id":100039001,"comment_content":"学到现在发现后面的各个模式，其实是一些应用场景的归纳，最终还是对设计原则的一个细化，所以各个模式多少有些共同之处，所以在理解模式的基础上，关键是如何去联想使用场景","like_count":0},{"had_liked":false,"id":268212,"user_name":"sta","can_delete":false,"product_type":"c1","uid":1032755,"ip_address":"","ucode":"D840070850EA5B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/33/ccbf2045.jpg","comment_is_top":false,"comment_ctime":1608101795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608101795","product_id":100039001,"comment_content":"可以通过 配置文件+反射 或 注解+反射 来实现","like_count":0},{"had_liked":false,"id":267778,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1607927237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607927237","product_id":100039001,"comment_content":"打卡：用Java实现了链式和数组两种职责链模式Demo。","like_count":0},{"had_liked":false,"id":253901,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1602940624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602940624","product_id":100039001,"comment_content":"我反倒觉得职责链模式和观察者模式很像，不过仔细想想还是有区别的<br>1、职责链模式是流程 拆分<br>2、观察者模式是结果 通知","like_count":0},{"had_liked":false,"id":251305,"user_name":"查理","can_delete":false,"product_type":"c1","uid":1111297,"ip_address":"","ucode":"A9FEA901E3A05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/01/5389295c.jpg","comment_is_top":false,"comment_ctime":1601456327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601456327","product_id":100039001,"comment_content":"客户端也不修改<br>客户端维护调用场景-职责链处理器关系表，调用时通过查表完成匹配调用。","like_count":0},{"had_liked":false,"id":239345,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1596508147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596508147","product_id":100039001,"comment_content":"1. 注解扫包可以实现无侵入式；<br>2.利用SPI","like_count":0},{"had_liked":false,"id":238303,"user_name":"Smile @ Life","can_delete":false,"product_type":"c1","uid":1293907,"ip_address":"","ucode":"320EDAD5A8BE56","user_header":"https://static001.geekbang.org/account/avatar/00/13/be/53/eda4b622.jpg","comment_is_top":false,"comment_ctime":1596116675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596116675","product_id":100039001,"comment_content":"Shiro框架通过ini配置文件的形式来配置url和filter之间的映射关系来达到不修改代码更新职责链","like_count":0},{"had_liked":false,"id":233128,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1594223670,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1594223670","product_id":100039001,"comment_content":"通过配置、注解方式都可以，框架代码只需扫描配置或注解即可","like_count":0},{"had_liked":false,"id":232091,"user_name":"SteelHuaSheng","can_delete":false,"product_type":"c1","uid":1396126,"ip_address":"","ucode":"BC8127FC5207FC","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/9e/04ec08bf.jpg","comment_is_top":false,"comment_ctime":1593853271,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593853271","product_id":100039001,"comment_content":"篇篇文章都是干货，硬核！<br>有时候都感觉这啃得。。<br>小争哥厉害！👍","like_count":0},{"had_liked":false,"id":227126,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1592293922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592293922","product_id":100039001,"comment_content":"iOS开发中，视图的事件响应链，用的就是职责链模式","like_count":0},{"had_liked":false,"id":224228,"user_name":"anders","can_delete":false,"product_type":"c1","uid":1153592,"ip_address":"","ucode":"610C80D742C331","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/38/118a890c.jpg","comment_is_top":false,"comment_ctime":1591319740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591319740","product_id":100039001,"comment_content":"nodejs 方面，express 和 koa 的「洋葱圈」实现，用的就是责任链","like_count":0},{"had_liked":false,"id":221679,"user_name":"worthto","can_delete":false,"product_type":"c1","uid":1387712,"ip_address":"","ucode":"41D7ABBBD2E7FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N6yjnrLnMW4XVSkBr3f0N3F962l35b5j0kib9VSlAqqbf6iaoCPicL1WnJ9KjgT4egQ7A2G0Zx3OayaK4yuoZrUVA/132","comment_is_top":false,"comment_ctime":1590564830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590564830","product_id":100039001,"comment_content":"记得前面讲适配器章节的时候，也提到过风控的一个需求，跟这个类似。针对不同的风控的场景，设定了适配的接口，统一了所有的实现，从而对外提供了良好的使用方法。  适配器的那个场景和责任链的特别像。","like_count":0},{"had_liked":false,"id":216744,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1589335079,"is_pvip":false,"replies":[{"id":"86629","content":"那只是代码示例而已。你看到我代码中的”...“了吗，这部分逻辑有可能会改变handled的值的，比如我这个handler处理完了业务逻辑，不需要继续往后继续传递了，就可以主动设置handled=true","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594785523,"ip_address":"","comment_id":216744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589335079","product_id":100039001,"comment_content":"第一段代码中的handled参数没用吧，没有赋值，然后if中一直为true，第二段才会通过doHandle来处理","like_count":0,"discussions":[{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319861,"discussion_content":"短短三年就开始搞源码了，佩服佩服。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604146540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":99755,"discussion_content":"多谢分享，另外丁雪峰的spring全家桶也讲了这个返回值处理器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577202620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216736,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1589334431,"is_pvip":false,"replies":[{"id":"86630","content":"没看懂你说的tail为啥保存B-&gt;C呢<br>","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594785629,"ip_address":"","comment_id":216736,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589334431","product_id":100039001,"comment_content":"职责链模式感觉好难理解，head 中保存A→B→C 然后tail 中保存 B→C 这个地方是怎么实现的呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494928,"discussion_content":"没看懂你说的tail为啥保存B-&amp;gt;C呢\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594785629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/56/db/b668f9f3.jpg","nickname":"三虎","note":"","ucode":"CA6B7993F0A014","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411308,"discussion_content":"他想表达的讲的第一种示例是两个处理器，如果三个怎么实现呢。如何B职责器执行完到C执行器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635900703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214881,"user_name":"永旭","can_delete":false,"product_type":"c1","uid":1068819,"ip_address":"","ucode":"C9C74BE32C8F46","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","comment_is_top":false,"comment_ctime":1588841318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588841318","product_id":100039001,"comment_content":"课后题: 如果不客户端代码<br>给予spring框架使用&lt;依赖查找&gt;, 具体实现方法是在List对象添加@Autowried注解.","like_count":0},{"had_liked":false,"id":211153,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1587906168,"is_pvip":false,"replies":[{"id":"78760","content":"从代码编写上也更简单啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588042409,"ip_address":"","comment_id":211153,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587906168","product_id":100039001,"comment_content":"为什么用数组来存贮处理器会更简单呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493207,"discussion_content":"从代码编写上也更简单啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588042409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208669,"user_name":"Uncle.Wang","can_delete":false,"product_type":"c1","uid":1456955,"ip_address":"","ucode":"9A4F646CFC237F","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/3b/b8c00291.jpg","comment_is_top":false,"comment_ctime":1587397638,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1587397638","product_id":100039001,"comment_content":"如何用职责链模式来处理异步操作？","like_count":0,"discussions":[{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259822,"discussion_content":"当然，如果非要用责任链的变种，也是可以的，无非就是所有的Filter返回值用CompleableFuture.runAsync()或者supplyAsync()包一下，然后List.foreach获取所有的Filter返回值，allOf.join();如果不需要结果，join都可以免了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588821934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259821,"discussion_content":"链一般可以定义顺序，比如OkHttp、RPC等过滤器依次执行，或者Spring环境下通过Order注解指定顺序。还有一些典型的场景，比如一些准入操作，准入条件是有优先级，比如先检查用户名不存在再检查密码不对（纯粹打个比方啊），这样可以减少不必要的操作，比如用户名不存在就没有必要继续查其它接口进一步判断了。异步就完全是通知了，如果是纯异步需求，用观察者模式更好。也就是EventBus、Spring Event、MQ等方式，发消息通知所有监听执行即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588821769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205830,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1586745069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586745069","product_id":100039001,"comment_content":"关于思考题 可以考虑 通过客户端配置的方式 比如  如果新增一个算法 我们先扩展这个算法的代码出来 再通过配置的方式 把新的算法添加进去 然后通过读配置的方式来扩展新的算法","like_count":0},{"had_liked":false,"id":203428,"user_name":"许路路","can_delete":false,"product_type":"c1","uid":1114824,"ip_address":"","ucode":"E869F5D2AA76FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/c8/a6a2a182.jpg","comment_is_top":false,"comment_ctime":1586188163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586188163","product_id":100039001,"comment_content":"SPI是不是可以解决课后的问题","like_count":0},{"had_liked":false,"id":203309,"user_name":"秋风画扇","can_delete":false,"product_type":"c1","uid":1132356,"ip_address":"","ucode":"5BCBC1422C51EC","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/44/964aa665.jpg","comment_is_top":false,"comment_ctime":1586169326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586169326","product_id":100039001,"comment_content":"反射可以实现客户端满足开闭原则。1.客户端通过反射实现处理器加载逻辑就好了、或者借助spring框架注册处理器也是可以的","like_count":0},{"had_liked":false,"id":202666,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1586050488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586050488","product_id":100039001,"comment_content":"Dj 的middleware gorm的注册函数都是这种模式","like_count":0},{"had_liked":false,"id":202544,"user_name":"弹簧人","can_delete":false,"product_type":"c1","uid":1697679,"ip_address":"","ucode":"BCB4A6FC76EA17","user_header":"https://static001.geekbang.org/account/avatar/00/19/e7/8f/56387f77.jpg","comment_is_top":false,"comment_ctime":1586005185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586005185","product_id":100039001,"comment_content":"添加一个新的处理器，只需要修改客户端代码。<br>------------------------------------------------------<br>将责任链的调用接口存入数据库中，客户端代码负责读取数据库，看看都有哪些操作。数据库动态配置","like_count":0},{"had_liked":false,"id":202249,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1585934174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585934174","product_id":100039001,"comment_content":"用HandlerChain类处理职责链的组装，也是职责分离；很多教程里都是addHandler方法返回当前参数hanlder，使用时类似builder的使用方式。","like_count":0},{"had_liked":false,"id":202051,"user_name":"云峰","can_delete":false,"product_type":"c1","uid":1149240,"ip_address":"","ucode":"97673EEEBC314E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLrEa19I3aQkQ0e5jRhavmgBV7abRKuw1nbMFr8uk30j7ogsH1yZXKZ9AT3yNX6XliaP4AicpXtuodA/132","comment_is_top":false,"comment_ctime":1585893835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585893835","product_id":100039001,"comment_content":"如果使用spring的话，可以根据接口类型获取所有的bean的集合，然后遍历add到数组&#47;链表中","like_count":0},{"had_liked":false,"id":201844,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1585844475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585844475","product_id":100039001,"comment_content":"客户端不修改任何代码的话，那么 <br>1.handler 本身就需要从配置文件中加载；<br>2.chain 中 handler 的顺序是由配置文件中配置的handler 的先后顺序决定的；<br>3.客户端要在启动的时候加载这个配置文件<br><br>我们项目中的主要几个流程都是用的这种形式，但是有个缺点，每个 handler 出入参耦合了特定场景的业务数据，那么这个 handler 在流程 A 中使用，就不能再流程 B 复用","like_count":0},{"had_liked":false,"id":201819,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1585840274,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585840274","product_id":100039001,"comment_content":"貌似java8里 stream 的聚合操作底层就是一种职责链模式 只有当调用结束操作的时候才会触发职责链调用stream的中间方法","like_count":0,"discussions":[{"author":{"id":1243753,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/69/352fb079.jpg","nickname":"乌木玉","note":"","ucode":"9B5220D073538C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555365,"discussion_content":"这个问题，如果类名和注释都能看到名称就知道意思，写清楚注释；再加上理解下设计思路，应改还好。\n不过看具体业务实际情况，如果不复杂，直接if-else，或者简单的重载，确实容易理解的多。\n如果业务很复杂，并不像例子中的每个handler类只是简单判断处理，这样拆开还是非常有必要的，修改bug追踪代码时，可以直接追到具体类，抛除其他逻辑干扰。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646882660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201522,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1585798828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585798828","product_id":100039001,"comment_content":"应该类似于spring boot 的spring.factoties 差不多的方法吧，写文件里，反射加载进去吧","like_count":0},{"had_liked":false,"id":201372,"user_name":"Hubbert伟涛","can_delete":false,"product_type":"c1","uid":1303556,"ip_address":"","ucode":"000C6A0BD4A102","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/04/05677b68.jpg","comment_is_top":false,"comment_ctime":1585757180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585757180","product_id":100039001,"comment_content":"不太理解第一种链表的写法。<br>chain添加完AHandler之后，AHandler.successor = null; head = AHandler; tail = AHandler;<br>chain添加完BHandler之后，BHandler.successor = null; AHandler.successor = BHandler; tail = BHandler;<br>这时再调用chain.handle();<br>head != null 通过，即AHandler != null; <br>然后调用head.handle(); =&gt; AHandler.successor.handle(); =&gt; BHanlder.handle();<br>Oh，我懂了，我以为AHandler.handle()没执行。是执行完AHandler.handler()如果结果不通过，再执行BHandler.handle()<br>写了这么多，留个纪念吧。","like_count":0},{"had_liked":false,"id":200062,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1585538700,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585538700","product_id":100039001,"comment_content":"感觉设计模式加反射和配置，简直无敌了。","like_count":0},{"had_liked":false,"id":199588,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1585491873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585491873","product_id":100039001,"comment_content":"设计模式_62:<br># 作业<br>客户端满足开闭原则：<br>- 新增Filter实现类<br>- 使用注解或者配置文件自动注册到链中。<br><br># 感想<br>今天内容看到一半，发出了很长的一个“哦~~~”<br>原来Android中事件传递机制(iOS也类似)就是一种职责链模式，而且还是第一种(被成功处理后，请求不在往下传递)，UI中会分很多层级，我们触摸手机屏幕后，触摸事件(请求)会一级一级地传递，直到某个UI单元消费了这个事件(处理了请求)，我以前叫它传递链。","like_count":0},{"had_liked":false,"id":197638,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1585389058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585389058","product_id":100039001,"comment_content":"客户端实现框架接口，框架执行的时候扫描所有继承了该接口的实现类，然后执行；模拟spring的后置处理器扩展","like_count":0},{"had_liked":false,"id":197049,"user_name":"徐旭","can_delete":false,"product_type":"c1","uid":1814806,"ip_address":"","ucode":"1D3091D15373E5","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b1/16/dd11930c.jpg","comment_is_top":false,"comment_ctime":1585353440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585353440","product_id":100039001,"comment_content":"受益匪浅。。","like_count":0},{"had_liked":false,"id":196667,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1585301312,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585301312","product_id":100039001,"comment_content":"思考题：<br>自定义注解，或者使用配置文件，动态的去加载配置的类","like_count":0},{"had_liked":false,"id":196504,"user_name":"八戒","can_delete":false,"product_type":"c1","uid":1113109,"ip_address":"","ucode":"15774D7D5F1E53","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/15/a1f83883.jpg","comment_is_top":false,"comment_ctime":1585287193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585287193","product_id":100039001,"comment_content":"如何做到客户端不修改代码:<br>1. 将filter配置到xml或者properties中，客户端每次读配置（简单）<br>2. 通过框架自动发现客户端存在的filter，看到有同学说这样不灵活，解决方案是在filter中加一个方法，判断该filter是否需要执行，类似zuul中的IZuulFilter#shouldFilter方法（复杂）","like_count":0},{"had_liked":false,"id":196417,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1585279815,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585279815","product_id":100039001,"comment_content":"看的越多越发现，原则&#47;思想才是核心<br>工作中有很多功能是需要一个或者多个复杂逻辑串起来或者组合来实现的，核心思想就是配置化，不管是通过数据库，还是配置文件、配置中心等等<br>这样框架代码可以随意扩展，客户端代码只要实现一套通用的组合逻辑就行","like_count":0},{"had_liked":false,"id":196388,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1585277926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585277926","product_id":100039001,"comment_content":"链表实现的添加处理器可以哨兵优化一下。。这个好像不是重点。。","like_count":0},{"had_liked":false,"id":196246,"user_name":"陈天柱","can_delete":false,"product_type":"c1","uid":1696225,"ip_address":"","ucode":"917BFDC845760D","user_header":"https://static001.geekbang.org/account/avatar/00/19/e1/e1/441df85d.jpg","comment_is_top":false,"comment_ctime":1585266643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585266643","product_id":100039001,"comment_content":"mybatis里的插件机制就用到了责任链模式，且是整个链条都加工处理一次，同时使用配置扩展点的方式让客户端可以动态扩展插件，结合反射和动态代理创建插件","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510519,"discussion_content":"这个要根据实际情况来定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195616,"user_name":"change","can_delete":false,"product_type":"c1","uid":1110876,"ip_address":"","ucode":"D78B4B3752B6FE","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/5c/8704e784.jpg","comment_is_top":false,"comment_ctime":1585205138,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1585205138","product_id":100039001,"comment_content":"职责链模式有两种形式<br>1、多个处理器依次处理请求，某个处理器处理完成后后续处理器不在处理请求；<br>2、多个处理器依次处理请求，直到调用链中所有请求处理完成；<br>职责链有两种存储处理器的方式<br>1、链表方式；<br>2、数组方式；<br>个人比较倾向于数据方式，实现起来比较简单，而且每个处理器的职责更加单一，无需存储后继处理器（易错点），用注解和反射的方式更容易实现处理器的自动加载","like_count":0},{"had_liked":false,"id":195236,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1585148452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585148452","product_id":100039001,"comment_content":"打卡 今日学习 职责链模式，收获如下：<br>将请求的发送和处理解耦合，使得多个处理器能够有机会依次处理请求。将这些处理器使用一个组件管理起来，使之在逻辑上形成一条链，请求在该链上依次被处理。职责链模式的变体有很多，比如Core J2ee Patern 中的 Intercepting Filter,Netty 中的Handler 处理器链 都可以看作是职责链的不同变体。GoF 中定义的职责链 与 Intercepting Filter在一定程度上是类似的，但也有所不同。 请求会经过Intercepting Filter 中的所有过滤器，最后到达目标组件，被目标组件进行处理，个人觉得这种从“过滤”角度来考虑。而职责链模式中，请求会经过链上的处理器，这里的处理器需要从“处理”角度来思考，此处的处理器从两个角度来考虑，其一是是否要处理这个请求，其二是是否要将这个请求传递给下一个处理器。在Netty中处理器这个领域稍有不同，在Netty中处理器的角色划分是细粒度的，比如处理器A是进站处理器（只负责进来的I&#47;O事件），处理器B是出站处理器（只负责出去的操作），处理器C既是进站处理器又是出站处理器。而在Servlet Filter请求和响应都要经过过滤器。Netty中这种划分方式体现了单一职责原则，将不同的事件回调拆分出来，减少复杂度。<br>对于思考题：可以使用自定义注解来标识过滤器，在客户端应用启动时，去扫描指定包下指定注解的类，拿到所有过滤器的Class对象，遍历这些Class对象，通过反射机制创建实例。当添加新的过滤器时，只需要开发新的过滤器，并打上自定义注解即可。","like_count":0},{"had_liked":false,"id":195093,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1585135907,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585135907","product_id":100039001,"comment_content":"之前面试被问到的问题：使用职责链设计模式和直接用for循环进行处理有什么不一样呢？<br>我现在觉得使用设计模式有很好的扩展性，单独的for循环难以应对变化。请问老师和同学们有什么看法呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510424,"discussion_content":"嗯呢 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2006342,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/9d/46/ce8f7a26.jpg","nickname":"I LOVE DM","note":"","ucode":"6EA297D5A0E4C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377743,"discussion_content":"怎么解读这句话？ “可扩展性差的代码同时封装性也会差，违背面向对象设计原则”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622803420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194908,"user_name":"Thinking","can_delete":false,"product_type":"c1","uid":1155754,"ip_address":"","ucode":"1AAD6AE9F6B678","user_header":"https://static001.geekbang.org/account/avatar/00/11/a2/aa/bf65e8be.jpg","comment_is_top":false,"comment_ctime":1585119302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585119302","product_id":100039001,"comment_content":"既然观察者模式也可以链式传递请求 责任链模式也可以广播请求 那他们有何区别？","like_count":0},{"had_liked":false,"id":194867,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1585112370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585112370","product_id":100039001,"comment_content":"1.客户端代码做了两件事。创建职责链实例和编排其执行顺序。所以要不改动客户端代码，就是说怎么把这两个职能从客户端代码抽离。<br><br>1.创建职责链实例，这个简单。用spi或则基于spring都可以自动创建实例。扩展也不用动客户端代码，添加配置即可。至于，使用这组自动创建的实例集，依赖注入想必无需赘述。<br><br>2.编排职责链执行顺序，这个也不难，但有点耦合。可以在入参数据中做文章。让入参数据带有 执行哪些责任链标识，并且呈现执行顺序即可。一个type数组字段即可。但这样业务代码逻辑就依赖了入参，这就感觉不是很友好，不知栏主有什么好方案吗？","like_count":0},{"had_liked":false,"id":194831,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1585108380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585108380","product_id":100039001,"comment_content":"个人见解是,利用注解来进行增加,加上注解后我们在项目启动时候可获取到对应的处理器类<br>当然还有着配置文件的方式去实现,但是不容易修改,维护性并不如注解好,<br>而且,责任链模式和策略模式很相似,但是项目常见的还是策略模式,一般不会去手动实现一个责任链模式,因为责任链模式将判断放在了每个处理器类中去处理,容易出现纰漏,一般使用责任链还是只有在拦 截器中","like_count":0}]}