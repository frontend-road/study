{"id":626296,"title":"23｜泛化建模（中）：可以不用泛化吗？","content":"<p>你好，我是钟敬。</p><p>上节课，我们学习了“泛化”，并用这个技术完成了“在子项目上报工时”的需求。如果你是第一次学的话，可能会觉得理解起来有一些难度吧。</p><p>今天，我们继续这个建模过程，首先考虑“在子项目上报工时”这个需求的更多细节，增加更多的灵活性。</p><p>然后，我们来考虑另一个需求——“为内部项目报工时”。我们会采用使用泛化和<strong>不</strong>使用泛化两种方式为这个需求建模，并且比较两者的异同，以便你更进一步理解泛化的思路。事实上，用不用泛化有时不是一个非黑即白的决定，而是一种权衡。</p><p>还是我当项目经理，你当架构师。</p><h2>增强灵活性</h2><p>我们先回顾一下上节课建立的模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/5e/087bcd7e7f7f6a1be8a20abc3f90a25e.jpg?wh=3359x2368\" alt=\"\"></p><p>到现在为止，我们的模型已经基本可以满足按<strong>项目</strong>、<strong>子项目</strong>和<strong>普通工时项</strong>来报工时的需求了。</p><p>我们简单复述一下目前的需求。</p><ul>\n<li>“零零后公司”只能按项目登记工时。</li>\n<li>“九零后公司”只能按子项目登记工时。</li>\n<li>“八零后公司”既可以按项目也可按子项目，还可以按普通工时项登记工时。</li>\n</ul><p>现在我开始向你提几个更深入的问题。</p><p><strong>第一个问题</strong>是：怎么控制“零零后公司”<strong>只能</strong>按项目，而不能按子项目报工时呢？反之，怎么控制“九零后公司”只能按子项目报工时呢？</p><p>为了解决这个问题，你决定为每个租户增加一个配置参数。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/f6/1aaff247659e9ee43ef44aeef6a87df6.jpg?wh=3359x2368\" alt=\"\"></p><p>所有租户级的参数，都在<strong>租户参数</strong>这个实体里。我们商量了一下，把新的参数命名为<strong>项目工时粒度</strong>，有三个选项，分别是：“项目”“子项目”和“两可”。对于“零零后公司”只要把这个参数设置成“项目”，就说明只能按<strong>项目</strong>来报工时。对于其他两个公司的需求，道理是一样的。</p><!-- [[[read_end]]] --><p>这样也解决了另一个问题，就是，万一“零零后公司”将来也想按子项目来报工时的话，我们只需要改一下这个参数的设置就可以了。</p><p>我的<strong>第二个问题</strong>是：对于多数公司，按<strong>普通工时项</strong>报工时应该是一个很普遍的需求。虽然“零零后公司”现在不需要这样报工时，但将来如果要，怎么办呢？</p><p>你告诉我：“<strong>普通工时项</strong>在数据库里会映射成一个表。对于“零零后公司”，这个表里没有记录，那么自然就只能按项目报工时。将来如果需要按普通工时来报，例如“学习时间”，那么只需要把“学习时间”这条记录插到表里就可以使用了。所以模型不需要任何修改。</p><p>这时候你又反问了我<strong>一个问题</strong>：“八零后公司”既可以按<strong>项目</strong>也可按<strong>子项目</strong>来报工时，也就是参数里的“两可”。但是“两可”的具体含义是什么呢？因为其实可以有两种不同的理解。</p><p><strong>第一种理解</strong>是，任何项目都“两可”。比如有一个项目A，那么每一个员工，既可以把工时报到项目A整体上，而不区分子项目，也可以把工时报到项目A的某个子项目上，完全取决于员工自己的选择。</p><p><strong>第二种理解</strong>是，对于某一个具体项目而言，只能在“按项目”和“按子项目”中选择一种。例如，项目A，只能按项目整体报工时；项目B，只能按子项目报工时。而对于整个公司而言，由于同时存在A和B两种情况，所以在整体上是“两可”。</p><p>我思考了一下，说：“确实有这两种细微的差别。但是如果在租户的参数上，再区分这两种情况的话，可能反而会把用户搞糊涂。”</p><p>事实上，之所以有“两可”这个选项，无非是想给项目自身一个灵活性，如果把这个选项放在项目级别，由项目经理来决定，似乎更合适。但是全局的参数仍然可以保留，作为默认值，具体项目可以修改默认值。基于这个思路，你尝试这样修改了模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/a0/5660c763b8aaeafa4663d9f2c7f1c5a0.jpg?wh=3359x2368\" alt=\"\"></p><p>你对模型做了三点改动。</p><p><strong>第一</strong>，把租户参数里原来的“项目工时粒度”，改成了“<strong>默认</strong>项目工时粒度”。也就是说，这个选项可以被具体的<strong>项目</strong>覆盖。</p><p><strong>第二</strong>，你用一个注解，明确了“两可”的含义，也就是你所说的第一种理解：“两可”指的是，对于一个项目，既可以把工时报在项目整体上，也可以报在它的子项目上，取决于员工自己的选择。</p><p><strong>第三</strong>，在<strong>项目</strong>实体上增加了一个<strong>工时粒度</strong>属性，它的可选项和租户参数里是一样的。这样就可以在<strong>项目</strong>中进行细粒度的配置了。</p><p>有了这几个改动，就可以在租户参数里设置最常用的选项作为默认值，然后让项目经理在项目级别决定是否要覆盖默认值。这样就能满足“八零后公司”的需求了。</p><p>但是这样的话，对于“零零后公司”，岂不是也可以由项目经理自行配置了？这显然不符合当前的需求。</p><p>于是你又增加了一个租户级别的参数。</p><p><img src=\"https://static001.geekbang.org/resource/image/37/bb/370c38054db7d0e0d00bbaa1315143bb.jpg?wh=3359x2368\" alt=\"\"></p><p>这个参数就是“是否可覆盖默认项目工时粒度”。对于“零零后公司”和“九零后公司”，把这个参数设为“否”，对于“八零后公司”设为“是”。这样一来，就可以同时满足这三个公司的不同需求了。</p><p>而且，不只是这三家公司，对于更多的公司的类似需求来说，上面的设计也足以满足了。当然，如果以后再遇到更“古怪”的需求，我们可以遵循类似的思路去增加系统的灵活性。</p><p>我们再思考一下，前面的做法算不算“过度设计”呢？</p><p>我的看法是这样的：如果是给某一家公司量身定做一个系统的话，本来不需要考虑这么多。但作为一个 SaaS 系统，要面对各种不同的用户，所以就要把系统设计得灵活一些了。假如局限于某个特定的公司，这样做可能有“过度设计”的嫌疑。但对于 SaaS 应用，这样的设计应该是恰当的。</p><h2>非客户项目的泛化</h2><p>现在，我们再来考虑“九零后公司”的另一个需求，并尝试用泛化来建模。</p><p>这个需求是这样的：九零后公司有一些公司内部的项目，比如说几个小伙伴一起搞一个内部开源的项目。和客户项目不同，这些内部项目没有合同，也不需要专门分配人力，而是谁有空，就可以随时参与。</p><p>于是你问我：“是不是可以说，客户项目和内部项目统称为项目，他们的共性是都可以报工时？”</p><p>我说：“可以这么理解。”</p><p>你紧跟着问：“这么说，内部项目岂不就是普通工时项？是不是可以直接用普通工时项实现这个需求呢？”</p><p>我想了一下，说：“内部项目和客户项目还有更多的共性，是普通工时项所不具备的，比如说，作为项目，内部项目也有项目经理，也有子项目，也有明确的起止时间，也有项目状态等等。”</p><p>你觉得言之有理，于是利用泛化的知识，画出了后面的模型图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/48/60/485fe00971e88002077bcd0004e83e60.jpg?wh=3359x2256\" alt=\"\"></p><p>从这个图里，我们看到，作为父类的<strong>项目</strong>实体，反映了<strong>客户项目</strong>和<strong>内部项目</strong>的共性，例如都有项目经理，都可以建立子项目等等；而<strong>客户项目</strong>体现了与<strong>内部项目</strong>的区别或者说个性，例如一个客户项目必须属于某个合同，并且需要分配项目成员，而内部项目则不具有这两个特征。所以，目前这个模型确实反映了需求中的领域知识。</p><h2>一定要泛化吗？</h2><p>我仔细看了这个模型，然后又问了一个问题：“我承认这个模型正确地反映了需求，但是泛化似乎让这个模型变得更复杂了，有没有可能画一个不用泛化的模型，看看效果怎么样呢？”</p><p>你说：“也可以，我们比较一下吧。”</p><p>于是，你又画出了后面这个等价的模型。<br>\n<img src=\"https://static001.geekbang.org/resource/image/41/2c/41137f8bb4ee320c700e45b6a80a022c.jpg?wh=3439x2256\" alt=\"\"></p><p>可以看到，这个模型也正确地反映了同样的需求。如果把这个模型和没有反映“客户项目和内部项目”需求的模型，也就是这节课的第一张图相对比，就会发现，这个模型只有三个主要变化。</p><p>第一，在项目与合同的关联上，合同一端的多重性由“1..1”变成了“0..1”。这是因为，原来，一个项目必须属于某个合同，而现在，内部项目没有合同，也就是说，有的项目可以对应“0”个合同。</p><p>第二，在项目实体中增加了一个“是否客户项目”的标志，这样就代替了原来泛化符号起到的区分两种项目的作用。</p><p>第三，增加了两个约束，用于说明客户项目和内部项目的区别。而在采用泛化的模型中，并不需要这两个约束，因为模型本身的结构已经说明了相同的知识。</p><p>这时候我说：“站在产品经理的角度，不用泛化的模型，比起之前没有这个新需求的模型（“增强灵活性”一节的最后一张图）来说，并没有增加或者减少任何关联，而且由于没有用泛化，更简单，更容易理解，你觉得呢？”</p><p>你说：“从架构师的角度，这个模型也更容易实现。既然这样，咱们还是不用泛化了吧。” 于是我们达成了一致。</p><h2>继续增强灵活性</h2><p>你又看了一下和“是否客户项目”有关的业务规则，然后问了我另一个问题：“‘是否客户项目’和‘是否要分配项目成员’，是同一个维度的问题吗？比如说，会不会内部项目也要分配成员呢？”</p><p>我想了想说：“你说得对。尽管九零后公司自己认为这是一回事，但如果把这个应用卖给其他用户，可能就会出现内部项目也要分配成员的情况。也就是说，现在的模型还缺乏通用性。所以，把这两者当做两个维度，分开设置比较好。”</p><p>于是你又修改了模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/54/1f503dc11e5cb16bb82874fc3a1e5454.jpg?wh=3439x2256\" alt=\"\"></p><p>在项目里增加了一个“是否要分配项目成员”的属性，和“是否客户项目”分开。然后，在原来关于“是否客户项目”的注释里，删除了有关分配项目成员的约束，因为“是否要分配项目成员”这个属性本身已经不言自明了。</p><p>这时候我问了你今天最后一个问题：“回过头来想一下，如果把‘是否客户项目’和‘是否要分配项目成员’都用泛化的方式表示，模型会变成什么样子呢？”</p><p>于是，你画出了后面的模型。<br>\n<img src=\"https://static001.geekbang.org/resource/image/d1/e8/d1d3cb07ca922d3881b760a2e23092e8.jpg?wh=3439x2256\" alt=\"\"></p><p>比起前面的图，这个模型更加复杂，理解起来更困难一些。所以，我们决定还是选择前面简单些的模型。</p><p>另外，这个模型实际上是按照两个不同的维度进行泛化的，称为“多重泛化”。我们在第三个迭代再来讨论这种复杂的情况。</p><h2>总结</h2><p>好，这节课的主要内容就讲到这，我们来总结一下。</p><p>今天，为了实现“为内部项目报工时”引发的需求，我们比较了使用泛化和不使用泛化两种方式。最后选择了从业务和技术视角都更加简单的，不使用泛化的方式。这说明，使用或者不使用泛化，是一个需要权衡的决策。在权衡过程中，需要结合业务和技术视角。</p><p>另外，通过为两个需求增加灵活性，我们也体会到，相比给特定企业定制的系统，SaaS系统往往需要考虑更多的灵活性。</p><p>不过，在使用还是不使用泛化这个问题上，你可能还是觉得，似乎现在是在凭“直觉”进行的判断。下节课，我们继续深入，聊聊权衡背后更多的思路和规律。</p><h2>思考题</h2><p>下面我给你留了两道思考题。</p><p>1.回顾上个迭代的需求，<strong>开发中心</strong>、<strong>直属部门</strong>和<strong>组织</strong>之间，是否应该用泛化来抽象呢？</p><p>2.领域建模里的泛化常常对应着面向对象编程里的继承，事实上，UML的符号都是相同的。而课程里说的多重泛化，在编程时则不能用继承直接实现，你能想到为什么吗？</p><p>好，今天的课程结束了，有什么问题欢迎在评论区留言，下节课，我们来讨论怎样权衡是否要使用泛化。</p>","comments":[{"had_liked":false,"id":367518,"user_name":"子衿","can_delete":false,"product_type":"c1","uid":1903229,"ip_address":"浙江","ucode":"E76CC673517290","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/7d/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1675300897,"is_pvip":false,"replies":[{"id":135190,"content":"1 总体思路没问题。关键看开发中心、直属部门等有没有自己特殊的属性或逻辑，如果有，才考虑使用泛化，否则就没有使用的理由了。\n2 C++支持而Java不支持的多继承，和这里说的“多重泛化”不是一个概念。等我找时间和大家讲讲吧。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678977916,"ip_address":"广东","comment_id":367518,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 结合我原来的知识，我理解是否要使用泛化，其实讨论的就是到底是使用继承，还是使用一个状态位来表达区别，那最终其实就是对面向过程还是面向对象的一个权衡，如果不用泛化，而是新增一个属性表示区别，如果该属性只影响这个类的一小部分行为还好，只需在这一小部分行为中加入if..else即可，但如果这个属性，影响了这个类的大部分行为，那就会产生一堆的if..else，此时不如使用泛化，让代码更面向对象，对于上一个迭代，我觉得开发中心、直属部门和组织之间的区别在于他们的性质，而性质这个属性对他们的行为影响不大，可以考虑不使用泛化实现\n2. 多重泛化不能使用继承是因为java中不支持多继承，如果非使用继承实现，就会造成类的泛滥，这其实就是设计模式中桥接模式解决的问题","like_count":16,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609455,"discussion_content":"1 总体思路没问题。关键看开发中心、直属部门等有没有自己特殊的属性或逻辑，如果有，才考虑使用泛化，否则就没有使用的理由了。\n2 C++支持而Java不支持的多继承，和这里说的“多重泛化”不是一个概念。等我找时间和大家讲讲吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678977917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606971,"discussion_content":"桥接模式：多重（多个纬度）可以独立的进行变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677511985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368624,"user_name":"赵晏龙","can_delete":false,"product_type":"c1","uid":2673605,"ip_address":"湖南","ucode":"F15730BCA97EE0","user_header":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","comment_is_top":false,"comment_ctime":1676510290,"is_pvip":false,"replies":[{"id":135166,"content":"1 没问题\n2 C++支持的“多继承”和建模里的“多重泛化”不是一个概念，我找时间再和大家讲讲。《分析模式》有讲。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678973672,"ip_address":"广东","comment_id":368624,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1 考虑泛化后增加模型复杂度，并且没有提供任何的必要性或者好处，我倾向于不使用泛化。\n\n2 java .net里不能有多个父类？那我CPP来！等等，我是不是泄漏了内存？为什么提示我地址非法？你们先设计模型，我解决完这些马上就来！","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609421,"discussion_content":"1 没问题\n2 C++支持的“多继承”和建模里的“多重泛化”不是一个概念，我找时间再和大家讲讲。《分析模式》有讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678973672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2673605,"avatar":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","nickname":"赵晏龙","note":"","ucode":"F15730BCA97EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":609521,"discussion_content":"愿闻其详","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679014149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":609421,"ip_address":"湖南","group_id":0},"score":609521,"extra":""}]}]},{"had_liked":false,"id":368738,"user_name":"邓西","can_delete":false,"product_type":"c1","uid":2977417,"ip_address":"四川","ucode":"DC84CD4CDF4021","user_header":"","comment_is_top":false,"comment_ctime":1676627216,"is_pvip":false,"replies":[{"id":134805,"content":"第一题没问题。第二题，多重泛化和多继承还不是一回事，等我找个时间讲讲。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677987716,"ip_address":"广东","comment_id":368738,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 个人理解，是否需要泛化的评判标准应该是各差异属性是否可以归类，用枚举等方式便可区分。如果是，那就没有必要泛化。\n2. 求解。语言特性决定？Java不支持多继承，但C++可以","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607585,"discussion_content":"第一题没问题。第二题，多重泛化和多继承还不是一回事，等我找个时间讲讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677987716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368551,"user_name":"特修斯之船","can_delete":false,"product_type":"c1","uid":1068192,"ip_address":"广东","ucode":"C041A289017D0C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/a0/6cfdefa6.jpg","comment_is_top":false,"comment_ctime":1676443147,"is_pvip":true,"replies":[{"id":134251,"content":"这里确实没有唯一正确，如果业务和开发都觉得泛化好理解，就可以用泛化。另外，后面还会提到，要考虑和实现的一致性。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1676508930,"ip_address":"广东","comment_id":368551,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"我怎么感觉泛化的图更好理解，不喜欢用注解","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604927,"discussion_content":"这里确实没有唯一正确，如果业务和开发都觉得泛化好理解，就可以用泛化。另外，后面还会提到，要考虑和实现的一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676508930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304009,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e5/c9/36fdec8e.jpg","nickname":"liuq","note":"","ucode":"88437D66C547C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655365,"discussion_content":"俺也觉得,表达精准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734688636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368031,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"浙江","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1675833937,"is_pvip":false,"replies":[{"id":135186,"content":"是的。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678976937,"ip_address":"广东","comment_id":368031,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"思考题，开发中心、直属部门和组织之间，主要区别体现在类型、上下级关系之间，只有属性的差异，不用泛化","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609451,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678976937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372441,"user_name":"NoSuchMethodError","can_delete":false,"product_type":"c1","uid":3326684,"ip_address":"江苏","ucode":"F227B98677E3C3","user_header":"https://static001.geekbang.org/account/avatar/00/32/c2/dc/78e809b7.jpg","comment_is_top":false,"comment_ctime":1681138485,"is_pvip":false,"replies":[{"id":136136,"content":"多数情况是这样。有时也考虑关联的差异。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1681633446,"ip_address":"广东","comment_id":372441,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"泛化不泛化取决于是否具有属性的差异","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":614018,"discussion_content":"多数情况是这样。有时也考虑关联的差异。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681633446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368867,"user_name":"6点无痛早起学习的和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"北京","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1676852322,"is_pvip":false,"replies":[{"id":134351,"content":"也算泛化，不过这是实现层面的，不是业务概念方面的。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1676883899,"ip_address":"广东","comment_id":368867,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"思考题，看了老师给别人的回复，想到了目前代码里实现的一个点，就采用了泛化类似的想法，感觉这也是一个泛化\n在代码里的领域层的对象，都继承了AuditableEntity，这个就是不同对象之间的共性，子类又有不同的个性（字段属性）\n\n不知道这样认为对不对","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606004,"discussion_content":"也算泛化，不过这是实现层面的，不是业务概念方面的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676883899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377632,"user_name":"颜如玉","can_delete":false,"product_type":"c1","uid":2856239,"ip_address":"上海","ucode":"C55FDAE3559054","user_header":"https://static001.geekbang.org/account/avatar/00/2b/95/2f/d88950a1.jpg","comment_is_top":false,"comment_ctime":1688896067,"is_pvip":false,"replies":[{"id":137722,"content":"嗯嗯，是这个意思。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1689501700,"ip_address":"","comment_id":377632,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"继承通常只能解决单维度的泛化问题，多重泛化有多个维度","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623454,"discussion_content":"嗯嗯，是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689501700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369624,"user_name":"zenk","can_delete":false,"product_type":"c1","uid":1013669,"ip_address":"上海","ucode":"B235D5EBCF49BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/a5/c5ae871d.jpg","comment_is_top":false,"comment_ctime":1677734259,"is_pvip":false,"replies":[{"id":134729,"content":"是的，这种组合爆炸，已经说明泛化用得不太恰当了。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677919541,"ip_address":"广东","comment_id":369624,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"JAVA 每个泛化一个方法，不同的实现对应不同的泛化，而且一一对应，只是子类比较多，是每种泛化种类的乘积","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607480,"discussion_content":"是的，这种组合爆炸，已经说明泛化用得不太恰当了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677919541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367768,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"北京","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1675578705,"is_pvip":false,"replies":[{"id":133951,"content":"如果不同种类的组织，有不同的属性、关联等等，可以考虑用泛化，否则就没必要了。多重泛化的问题，等找个时间再细聊一下。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1675642452,"ip_address":"广东","comment_id":367768,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"我觉得开发中心、直属部门和组织之间确实是泛化的关系，但是在这个项目里它们几乎是会存在的实体，为了明确，可以不用泛化实现。\n\n至于多重泛化，我觉得不像是继承，而像是C++模板中的“偏特化”，就是对于模板中的某个属性做特定的实例化。所以不适合用继承实现。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":602046,"discussion_content":"如果不同种类的组织，有不同的属性、关联等等，可以考虑用泛化，否则就没必要了。多重泛化的问题，等找个时间再细聊一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675642452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}