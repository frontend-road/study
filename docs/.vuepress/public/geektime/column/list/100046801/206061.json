{"id":206061,"title":"03 | 复杂而又重要的购物车系统，应该如何设计？","content":"<p>你好，我是李玥。</p><p>今天这节课我们来说一下购物车系统的存储该如何设计。</p><p>首先，我们来看购物车系统的主要功能是什么。就是在用户选购商品时，下单之前，暂存用户想要购买的商品。购物车对数据可靠性要求不高，性能也没有特别的要求，在整个电商系统中，看起来是相对比较容易设计和实现的一个子系统。</p><p>购物车系统的功能，主要的就三个：把商品加入购物车（后文称“加购”）、购物车列表页、发起结算下单，再加上一个在所有界面都要显示的购物车小图标。</p><p>支撑购物车的这几个功能，对应的存储模型应该怎么设计？很简单，只要一个“购物车”实体就够了。它的主要属性有什么？你打开京东的购物车页面，对着抄就设计出来了：SKUID（商品ID）、数量、加购时间和勾选状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/73/ac4dffc68c2aaf39a9f9d4003c50f773.png?wh=1010*900\" alt=\"\" title=\"备注：图片来源于网络，仅供本文介绍、评论及说明某问题，适当引用。\"></p><p>这个“勾选状态”属性，就是在购物车界面中，每件商品前面的那个小对号，表示在结算下单时，是不是要包含这件商品。至于商品价格和总价、商品介绍等等这些信息，都可以实时从其他系统中获取，不需要购物车系统来保存。</p><p>购物车的功能虽然很简单，但是在设计购物车系统的存储时，仍然有一些特殊的问题需要考虑。</p><h2>设计购物车存储时需要把握什么原则？</h2><p>比如下面这几个问题：</p><ol>\n<li>用户没登录，在浏览器中加购，关闭浏览器再打开，刚才加购的商品还在不在？</li>\n<li>用户没登录，在浏览器中加购，然后登录，刚才加购的商品还在不在？</li>\n<li>关闭浏览器再打开，上一步加购的商品在不在？</li>\n<li>再打开手机，用相同的用户登录，第二步加购的商品还在不在呢？</li>\n</ol><!-- [[[read_end]]] --><p>上面这几个问题是不是有点儿绕？没关系，我们先简单解释一下这四个问题：</p><ol>\n<li>如果用户没登录，加购的商品也会被保存在用户的电脑里，这样即使关闭浏览器再打开，购物车的商品仍然存在。</li>\n<li>如果用户先加购，再登录，登录前加购的商品就会被自动合并到用户名下，所以登录后购物车中仍然有登录前加购的商品。</li>\n<li>关闭浏览器再打开，这时又变为未登录状态，但是之前未登录时加购的商品已经被合并到刚刚登录的用户名下了，所以购物车是空的。</li>\n<li>使用手机登录相同的用户，看到的就是该用户的购物车，这时无论你在手机App、电脑还是微信中登录，只要是相同的用户，看到是同一个购物车，所以第二步加购的商品是存在的。</li>\n</ol><p>所以，上面这四个问题的答案依次是：存在、存在、不存在、存在。</p><p>如果你没有设计或者开发过购物车系统，你可能并不会想到购物车还有这么多弯弯绕。但是，作为一个开发者，如果你不仔细把这些问题考虑清楚，用户在使用购物车的时候，就会感觉你的购物车系统不好用，不是加购的商品莫名其妙地丢了，就是购物车莫名其妙地多出来一些商品。</p><p>要解决上面这些问题，其实只要在存储设计时，把握这几个原则就可以了：</p><ol>\n<li>如果未登录，需要临时暂存购物车的商品；</li>\n<li>用户登录时，把暂存购物车的商品合并到用户购物车中，并且清除暂存购物车；</li>\n<li>用户登陆后，购物车中的商品，需要在浏览器、手机APP和微信等等这些终端中都保持同步。</li>\n</ol><p>实际上，购物车系统需要保存两类购物车，<strong>一类是未登录情况下的“暂存购物车”，一类是登录后的“用户购物车”</strong>。</p><h2>如何设计“暂存购物车”的存储？</h2><p>我们先来看下暂存购物车的存储该怎么实现。暂存购物车应该存在客户端还是存在服务端？</p><p>如果保存在服务端，那每个暂存购物车都需要有一个全局唯一的标识，这个标识并不太容易设计，并且，存在服务端还要浪费服务端的资源。所以，肯定是保存在客户端好，既可以节约服务器的存储资源，也没有购物车标识的问题，因为每个客户端就保存它自己唯一一个购物车就可以了，不需要标识。</p><p>客户端的存储可以选择的不太多：Session、Cookie和LocalStorage，其中浏览器的LocalStorage和App的本地存储是类似的，我们都以LocalStorage来代表。</p><p>存在哪儿最合适？SESSION是不太合适的，原因是，SESSION的保留时间短，而且SESSION的数据实际上还是保存在服务端的。剩余的两种存储，Cookie和LocalStorage都可以用来保存购物车数据，选择哪种方式更好呢？各有优劣。</p><p>在我们这个场景中，使用Cookie和LocalStorage最关键的区别是，客户端和服务端的每次交互，都会自动带着Cookie数据往返，这样服务端可以读写客户端Cookie中的数据，而LocalStorage里的数据，只能由客户端来访问。</p><p>使用Cookie存储，实现起来比较简单，加减购物车、合并购物车的过程中，由于服务端可以读写Cookie，这样全部逻辑都可以在服务端实现，并且客户端和服务端请求的次数也相对少一些。</p><p>使用LocalStorage存储，实现相对就复杂一点儿，客户端和服务端都要实现一些业务逻辑，但LocalStorage的好处是，它的存储容量比Cookie的4KB上限要大得多，而且不用像Cookie那样，无论用不用，每次请求都要带着，可以节省带宽。</p><p>所以，选择Cookie或者是LocalStorage来存储暂存购物车都是没问题的，你可以根据它俩各自的优劣势来选择。比如你设计的是个小型电商，那用Cookie存储实现起来更简单。再比如，你的电商是面那种批发的行业用户，用户需要加购大量的商品，那Cookie可能容量不够用，选择LocalStorage就更合适。</p><p>不管选择哪种存储，暂存购物车保存的数据格式都是一样的，参照我们实体模型来设计就可以，我们可以直接用JSON表示：</p><pre><code>{\n    &quot;cart&quot;: [\n        {\n            &quot;SKUID&quot;: 8888,\n            &quot;timestamp&quot;: 1578721136,\n            &quot;count&quot;: 1,\n            &quot;selected&quot;: true\n        },\n        {\n            &quot;SKUID&quot;: 6666,\n            &quot;timestamp&quot;: 1578721138,\n            &quot;count&quot;: 2,\n            &quot;selected&quot;: false\n        }\n    ]\n}\n</code></pre><h2>如何设计“用户购物车”的存储？</h2><p>接下来，我们再来看下用户购物车的存储该怎么实现。因为用户购物车必须要保证多端的数据同步，所以数据必须保存在服务端。常规的思路是，设计一张购物车表，把数据存在MySQL中。这个表的结构同样可以参照刚刚讲的实体模型来设计：</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/cc/e8e7ae1638ec77c7bcc1ff949939b4cc.jpeg?wh=855*357\" alt=\"\"></p><p>注意，需要在user_id上建一个索引，因为查询购物车表时，都是以user_id作为查询条件来查询的。</p><p>你也可以选择更快的Redis来保存购物车数据，以用户ID作为Key，用一个Redis的HASH作为Value来保存购物车中的商品。比如：</p><pre><code>{\n    &quot;KEY&quot;: 6666,\n    &quot;VALUE&quot;: [\n        {\n            &quot;FIELD&quot;: 8888,\n            &quot;FIELD_VALUE&quot;: {\n                &quot;timestamp&quot;: 1578721136,\n                &quot;count&quot;: 1,\n                &quot;selected&quot;: true\n            }\n        },\n        {\n            &quot;FIELD&quot;: 6666,\n            &quot;FIELD_VALUE&quot;: {\n                &quot;timestamp&quot;: 1578721138,\n                &quot;count&quot;: 2,\n                &quot;selected&quot;: false\n            }\n        }\n    ]\n}\n</code></pre><p>这里为了便于你理解，我们用JSON来表示Redis中HASH的数据结构，其中KEY中的值6666是一个用户ID，FIELD里存放的是商品ID，FIELD_VALUE是一个JSON字符串，保存加购时间、商品数量和勾选状态。</p><p>大家都知道，从读写性能上来说，Redis是比MySQL快非常多的，那是不是用Redis就一定比用MySQL更好呢？我们来比较一下使用MySQL和Redis两种存储的优劣势：</p><ol>\n<li>显然使用Redis性能要比MySQL高出至少一个量级，响应时间更短，可以支撑更多的并发请求，“天下武功，唯快不破”，这一点Redis完胜。</li>\n<li>MySQL的数据可靠性是要好于Redis的，因为Redis是异步刷盘，如果出现服务器掉电等异常情况，Redis是有可能会丢数据的。但考虑到购物车里的数据，对可靠性要求也没那么苛刻，丢少量数据的后果也就是，个别用户的购物车少了几件商品，问题也不大。所以，在购物车这个场景下，Redis的数据可靠性不高这个缺点，并不是不能接受的。</li>\n<li>MySQL的另一个优势是，它支持丰富的查询方式和事务机制，这两个特性，对我们今天讨论的这几个购物车核心功能没什么用。但是，每一个电商系统都有它个性化的需求，如果需要以其他方式访问购物车的数据，比如说，统计一下今天加购的商品总数，这个时候，使用MySQL存储数据，就很容易实现，而使用Redis存储，查询起来就非常麻烦而且低效。</li>\n</ol><p>综合比较下来，考虑到需求总是不断变化，还是更推荐你使用MySQL来存储购物车数据。如果追求性能或者高并发，也可以选择使用Redis。</p><p>你可以感受到，我们设计存储架构的过程就是一个不断做选择题的过程。很多情况下，可供选择的方案不止一套，选择的时候需要考虑实现复杂度、性能、系统可用性、数据可靠性、可扩展性等等非常多的条件。需要强调的是，<strong>这些条件每一个都不是绝对不可以牺牲的，不要让一些“所谓的常识”禁锢了你的思维。</strong></p><p>比如，一般我们都认为数据是绝对不可以丢的，也就是说不能牺牲数据可靠性。但是，像刚刚讲到的用户购物车的存储，使用Redis替代MySQL，就是牺牲了数据可靠性换取高性能。我们仔细分析后得出，很低概率的情况下丢失少量数据，是可以接受的。性能提升带来的收益远大于丢失少量数据而付出的代价，这个选择就是划算的。</p><p>如果说不考虑需求变化这个因素，牺牲一点点数据可靠性，换取大幅性能提升，选择Redis才是最优解。</p><h2>小结</h2><p>今天我们讲了购物车系统的存储该如何设计。</p><p>购物车系统的主要功能包括：加购、购物车列表页和结算下单。核心的实体就只有一个“购物车”实体，它至少要包括：SKUID、数量、加购时间和勾选状态这几个属性。</p><p>在给购物车设计存储时，为了确保购物车内的数据在多端保持一致，以及用户登录前后购物车内商品能无缝衔接，除了每个用户的“用户购物车”之外还要实现一个“暂存购物车”保存用户未登录时加购的商品，并在用户登录后自动合并“暂存购物车”和“用户购物车”。</p><p>暂存购物车存储在客户端浏览器或者App中，可以选择存放到Cookie或者LocalStorage中。用户购物车保存在服务端，可以选择使用Redis或者是MySQL存储，使用Redis存储会有更高的性能，可以支撑更多的并发请求，使用MySQL是更常规通用的方式，便于应对变化，系统的扩展性更好。</p><h2>思考题</h2><p>课后请你思考一下，既然用户的购物车数据存放在MySQL或者是Redis中各有优劣势。那能不能把购物车数据存在MySQL中，并且用Redis来做缓存呢？这样不就可以兼顾两者的优势了么？这样做是不是可行？如果可行，如何来保证Redis中的数据和MySQL中的数据是一样的呢？</p><p>欢迎你在留言区与我讨论，如果你觉得今天学到的知识对你有帮助，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"02 | 流量大、数据多的商品详情页系统该如何设计？","id":204688},"right":{"article_title":"04 | 事务：账户余额总是对不上账，怎么办？","id":206544}},"comments":[{"had_liked":false,"id":183997,"user_name":"李玥","can_delete":false,"product_type":"c1","uid":1501046,"ip_address":"","ucode":"B19E91EE248591","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","comment_is_top":true,"comment_ctime":1583201211,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"9.2233727299277005e+18","product_id":100046801,"comment_content":"hi，我是李玥。<br><br>上节课我给你留了一道思考题，是这样的。如果说，用户下单这个时刻，正好赶上商品调价，就有可能出现这样的情况：我明明在商详页看到的价格是10块钱，下单后，怎么变成15块了？你的系统是不是偷偷在坑我？给用户的体验非常不好。你不要以为这是一个小概率事件，当你的系统用户足够多的时候，每时每刻都有人在下单，这几乎是个必然出现的事件。该怎么来解决这个问题？<br><br>关于这个问题，我是这样看的。<br><br>首先，商品系统需要保存包含价格的商品基本信息的历史数据，对每一次变更记录一个自增的版本号。在下单的请求中，不仅要带上SKUID，还要带上版本号。订单服务以请求中的商品版本对应的价格来创建订单，就可以避免“下单时突然变价”的问题了。<br><br>但是，这样改正之后会产生一个很严重的系统漏洞：黑客有可能会利用这个机制，以最便宜的历史价格来下单。所以，我们在下单之前需要增加一个检测逻辑：请求中的版本号只能是当前版本或者上一个版本，并且使用上一个版本要有一个时间限制，比如说调价5秒之后，就不再接受上一个版本的请求。这样就可以避免这个调价漏洞了。","like_count":162,"discussions":[{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283106,"discussion_content":"想起了之前在某东买促销的商品，其实已经售罄了，但是你们只做了前端的限制，于是我们在渲染完毕之前提前点击了下单，结果后端并没有验证，就成功刷单了","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1592185222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2296382,"avatar":"https://static001.geekbang.org/account/avatar/00/23/0a/3e/5b1b1b75.jpg","nickname":"流年","note":"","ucode":"8B579C6E466CB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322642,"discussion_content":"检验价格有变动就给出提示刷新重新下单嘛，没必要还去判断历史价格","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1604792246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1426827,"avatar":"https://static001.geekbang.org/account/avatar/00/15/c5/8b/0b8aaddc.jpg","nickname":"南田玉彦","note":"","ucode":"97ACC339EBC645","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2296382,"avatar":"https://static001.geekbang.org/account/avatar/00/23/0a/3e/5b1b1b75.jpg","nickname":"流年","note":"","ucode":"8B579C6E466CB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378027,"discussion_content":"赞同","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623024581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322642,"ip_address":""},"score":378027,"extra":""},{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2296382,"avatar":"https://static001.geekbang.org/account/avatar/00/23/0a/3e/5b1b1b75.jpg","nickname":"流年","note":"","ucode":"8B579C6E466CB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573340,"discussion_content":"不存历史版本怎么判断价格变动？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653363874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322642,"ip_address":""},"score":573340,"extra":""}]},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194337,"discussion_content":"加一个版本号，让数据拥有历史记忆功能，不再是无状态的。这个方法用处很广啊。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1583209209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/da/dd/1e5e7b0c.jpg","nickname":"image","note":"","ucode":"A45BFF284F8933","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211474,"discussion_content":"可以理解提供时间段n的价格保护，n可以根据实际情况设置，秒杀场景n可以设置为0","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1584854966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194441,"discussion_content":"请问5秒是一个经验得来的最佳数字么，还是仅仅为了说明思路编的？\n因为在我看来，一个用户浏览一个商品页之后下单的时间远远大于5秒，那修改价格这一动作落在5秒之外的概率就远远大于5秒以内，所以大概率还是用户发现价格变了。\n当然思路没问题，也许是30秒，60秒...","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583219366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194729,"discussion_content":"我也有类似的疑问，如果按这样理解的话，查看商品到下单岂止以秒计，几分钟都可能。但是，是不是可以这样理解？价格变动后会通过websocket之类的技术手段推送到前端或前端商品页定时刷新价格，总之这个页面获取到最新价格有时间滞后，这个5秒防的是这个滞后时间，而不是用户浏览这个页面的时间，希望李老师能再澄清下这个问题，谢谢。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1583240472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194441,"ip_address":""},"score":194729,"extra":""},{"author":{"id":1160644,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/c4/9148b40d.jpg","nickname":"SunshineBoy","note":"","ucode":"FC54CD1815CCBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273781,"discussion_content":"看在下单过程中哪一流程检测以及检测的规则，不能鸡蛋里挑骨头 无论数字是否准确 都是为了让读者明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590500290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194441,"ip_address":""},"score":273781,"extra":""}]},{"author":{"id":1465990,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/86/40877404.jpg","nickname":"星星滴蓝天","note":"","ucode":"2F2F56F93AD828","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197709,"discussion_content":"某东的价格保护功能感觉跟这个思路差不多","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1583424052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083184,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","nickname":"Fs","note":"","ucode":"0AD0EFB5544B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196106,"discussion_content":"这个解决方案不是很通用，比如限时特价。5s就很坑了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583330424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1301113,"avatar":"https://static001.geekbang.org/account/avatar/00/13/da/79/9b093890.jpg","nickname":"大秦皇朝","note":"","ucode":"0F72D0D2FAEAF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083184,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","nickname":"Fs","note":"","ucode":"0AD0EFB5544B9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196330,"discussion_content":"是呀5s能秒杀不少东西出去，比如说口罩。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583335152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196106,"ip_address":""},"score":196330,"extra":""},{"author":{"id":1351117,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2au3iaQvydOVeVY1vlSVeGia7SvrpWFVibdxdjKiafof3RhzFO9e8sxKIBxKXJQibRNpO9pCH2hmibkibsGv7YKF3yjEw/132","nickname":"秋一匹","note":"","ucode":"BEBDBF8C15C6BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083184,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","nickname":"Fs","note":"","ucode":"0AD0EFB5544B9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215429,"discussion_content":"限时特价价格应该是从活动系统出的，和这个不是一回事","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585322528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196106,"ip_address":""},"score":215429,"extra":""},{"author":{"id":1160644,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/c4/9148b40d.jpg","nickname":"SunshineBoy","note":"","ucode":"FC54CD1815CCBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083184,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","nickname":"Fs","note":"","ucode":"0AD0EFB5544B9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273784,"discussion_content":"不是一码事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590500550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196106,"ip_address":""},"score":273784,"extra":""}]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259040,"discussion_content":"秒懂，甚至感觉受益匪浅啊，原来解决一个问题之后可能还有另外一个坑，厉害厉害","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588754355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2275516,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b8/bc/d2d547c9.jpg","nickname":"成为优秀的程序员","note":"","ucode":"6D9080A2B225AE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554656,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646537957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283012,"discussion_content":"论时间窗的重要性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592143354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160644,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/c4/9148b40d.jpg","nickname":"SunshineBoy","note":"","ucode":"FC54CD1815CCBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273777,"discussion_content":"受益匪浅，下单和结算的时候都需要检测吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590500013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045062,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","nickname":"Garwen","note":"","ucode":"C76346E1734AB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219101,"discussion_content":"根据之前的幂等性启发，想到了版本号，没想到黑客的这种骚操作。老师真是有经验啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585735273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798979,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","nickname":"博","note":"","ucode":"F7CA69FF5D09BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194947,"discussion_content":"正常情况下价格发生变化事，服务端处理为价格信息一发生变化，请重新下单更好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583246367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184097,"user_name":"京京beaver","can_delete":false,"product_type":"c1","uid":1179056,"ip_address":"","ucode":"C21838D7CA7D6B","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","comment_is_top":false,"comment_ctime":1583221976,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"285051063512","product_id":100046801,"comment_content":"购物车一般建议放到MySQL中。一般电商购物车是不占库存的，但是某些特卖电商购物车是占库存的。在这种情况下，数据是不允许丢失的，不然客户体验会非常差。Redis做缓存没啥用，因为每个用户只访问自己的购物车，每次访问网站也不会打开很多次购物车，缓存数据的命中率太低，没有意义。","like_count":67,"discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268495,"discussion_content":"建立链接本身就是不小的开销。 就购物车而言mongodb更香","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1589790645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2032840,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","nickname":"Javatar","note":"","ucode":"E216645CDF632C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329367,"discussion_content":"老师的意思应该是此时就拿redis当作db来用了，正常情况都直接读写redis。然后加一个mysql用于保障数据不丢，但问题是如何做到redis和mysql数据一致","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606372649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106112,"avatar":"https://static001.geekbang.org/account/avatar/00/20/23/00/13cdefb2.jpg","nickname":"fy","note":"","ucode":"303D7AA49FD342","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304136,"discussion_content":"你可能没做过电商","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599478677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2960821,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mEvazQ8Duf6PbAttGZ2DJXyn9A772vb7qus0guzhdicA1eD6A94pPaNAHx6MJIo7eMzMV3T6Dd9ianwo8NhxUpWA/132","nickname":"Geek_c61efd","note":"","ucode":"1A34FB24646460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560115,"discussion_content":"我觉得应该放缓存，当然如果网站访问量不大，那怎么搞都没事。如果访问量大，那么考虑到购物车的增删改查都较为均衡，所以mysql可能无法承受这么大的并发量。因此，可以用redis存购物车，然后通过redis集群拷贝副本来保证高可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649203449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2838918,"avatar":"","nickname":"Geek_d393ca","note":"","ucode":"F89D597E42D1F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532454,"discussion_content":"说白了还是看体量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637599921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531402,"discussion_content":"如果网站的访问购物车并发量低于500 那么放购物车没有什么大问题。相反如果qps超过500 再加上数据库常规读写 此时数据库就无法扛住常规读写请求 就会被拖垮。\n\n所以购物车上缓存是一个最基本的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637304274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080208,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7b/90/71d953d4.jpg","nickname":"CyurioAsk","note":"","ucode":"B084090400E485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410802,"discussion_content":"看量级，日活百万，日活上亿，购物车设计要考虑到横向扩展，在大促的时候高并发读写MySQL 可能撑不住，redis 天然分布式系统，横向扩容很方便。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635778029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183990,"user_name":"黄海峰","can_delete":false,"product_type":"c1","uid":1275357,"ip_address":"","ucode":"E9340719BC96B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dd/9ead6e69.jpg","comment_is_top":false,"comment_ctime":1583197713,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"139022151185","product_id":100046801,"comment_content":"感觉购物车是写多于读，也就是经常变，用cache aside的方式保持一致性的话就经常删缓存，db压力减轻不了多少，还要多写一次缓存，没什么必要","like_count":33,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531405,"discussion_content":"购物车我们是用write through做的。因为购物车添加失败后 紧接着用户还是会停留在购物车页面 此时无脑的实现是客户端又请求了一次购物车查询接口，我们是在添加sku接口中返回谈价后的结果。\n这样就少了一次查询交互 但是如果是用cache aside 这里就会存在被刷的可能。所以我们使用write through方式 。添加库表同时再更新一下redis 更新redis可以用线程池或者mq来做，主线程直接返回。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1637304498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475340,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/0c/b9e39db4.jpg","nickname":"韩俊臣","note":"","ucode":"D6A15C025570D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317099,"discussion_content":"购物车并发量不大吧，MySQL做了分库分表这点并发还是可以扛住的，引入Redis系统复杂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603505229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106112,"avatar":"https://static001.geekbang.org/account/avatar/00/20/23/00/13cdefb2.jpg","nickname":"fy","note":"","ucode":"303D7AA49FD342","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303977,"discussion_content":"并发压力不大，但是在大促，压力会抖增，而购物车难以这个场景做降级，还是用缓存扛一波，甚至直接缓存做持久化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599441590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276102,"discussion_content":"购物车都是每个user访问自己的, 基本没有并发访问. 缓存的意义不大. 或者说, 会和浪费缓存. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590817516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1293835,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/0b/0a381067.jpg","nickname":"zz","note":"","ucode":"EFE0C8D60D0CAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280116,"discussion_content":"访问自己的为什么会并发不大？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591496749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":276102,"ip_address":""},"score":280116,"extra":""},{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1293835,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/0b/0a381067.jpg","nickname":"zz","note":"","ucode":"EFE0C8D60D0CAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282978,"discussion_content":"写多读少确实是一个主要原因。\n我补充了另一个角度，数据库里同一个key的并发访问不大。不是说服务器的并发访问。只要没有hotkey，数据库可以horizontal scale, 不加缓存也可以应对整体高并发。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592134019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280116,"ip_address":""},"score":282978,"extra":""}]}]},{"had_liked":false,"id":184204,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1583246671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"100367494479","product_id":100046801,"comment_content":"读多写少用缓存，写多读少用MQ。对于前者，前提是读场景频繁且能具备较高的命中率。用户购物车数据不符合该场景。<br>","like_count":24},{"had_liked":false,"id":184355,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1583297361,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83187675985","product_id":100046801,"comment_content":"1.能当然能。<br>2.能兼备mysql的可靠性和redis的读取性能。<br>3.这样做不可行，因为购物车写多读少，这样玩会频繁失效缓存，进而导致大部分读都要击穿到db并多做一步缓存的操作。实则弊大于利。<br>4.一旦修改购物车，redis的缓存直接失效。<br><br>个人见解：<br>1.感觉 未登录添加购物车。这功能可以弃了。填购必须注册登陆。<br>2.当下用户已经很习惯网购，对于注册登陆也是顺手之事，失去这个功能对用户体验的降低实属有限。<br>3.以往一个电商平台核心可能是推广加销售商品。但现在多了一个用户管理，而拉新成本高的当下，失去这一功能，变成强制注册不见得就是坏事，值得一试。<br><br>总结：加上未登陆添加购物车的功能。在当下，可能是牺牲部份可能发展成活跃用户的流动用户，来换取微末的用户体验。得不偿失。","like_count":20,"discussions":[{"author":{"id":1137133,"avatar":"https://static001.geekbang.org/account/avatar/00/11/59/ed/69b6f707.jpg","nickname":"永丰老王","note":"","ucode":"28B44DD2D4F26B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583344,"discussion_content":"目前主流电商也确实是这么搞得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660042947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283017,"discussion_content":"合理，尤其是目前互联网公司仍然重视注册用户数这个指标的情况下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592143624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184131,"user_name":"传志","can_delete":false,"product_type":"c1","uid":1097943,"ip_address":"","ucode":"2B0F67BCFCB3D5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJB6qS9nxicvToSX4fTrDNv7OVBtsrfr6VwLjPLcwZS8ibicczM15qVx473KgrYQg0TIFeibXD0RgK6WQ/132","comment_is_top":false,"comment_ctime":1583231749,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"66007741189","product_id":100046801,"comment_content":"购物车，同时使用redis+mysql觉得可行。以redis为主，增，查询，删除都走redis.添加加时使用mq保证最终一致性。统计等需求可以在mysql中做","like_count":15,"discussions":[{"author":{"id":1306032,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","nickname":"桂城老托尼","note":"","ucode":"139E4B8EE88B79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212040,"discussion_content":"赞同这种做法。相比上面几个高赞回答，一棒子捶死，我觉得给个更接地气。且利用了redis和mysql的优点。 缓存一致性这里我补充下，用版本控制缓存的刷和更新一致性比对。 思路参考git.","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584927466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184036,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1583209515,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40237915179","product_id":100046801,"comment_content":"今日得到：以前对浏览器存储的认识只停留在cookie上。以前认为只有服务端才有session数据。以前虽然听过localstorage这个词，但是思想上没有重视。刚查了下资料，浏览器存储还有indexeddb。学习还是要系统。<br><br>存储的本质是把数据暂时或永久保存下来，单从持久化这个目标来看，什么方式存储都是为所谓的。不过，存储的作用实际是为了将来的计算。既然从持久化角度没有差别，那当然要选择一种方便我们后续处理的存储设计了。所以对存储产品的选择与数据结构的设计需要结合具体的业务需求。存储的设计要考虑存储时间（临时或永久），可靠性要求，关键业务操作。需要梳理业务需求。可见需求分析是多么重要。<br><br>思考题：购物车从功能上说，就是一个临时存储的信息。为了准求性能，所以一般没必要存db，除了一些有统计业务功能的系统。购物车购物车信息的特性是一个树性的结构，使用关系模型不好设计，需要多表join。不过可以设计成json字符串类型，或者使用新的json类型。购物车写多读少，需要频繁刷db保证数据同步，为了追求一点点没多大用处的可靠性，得不偿失。<br><br><br>","like_count":9,"discussions":[{"author":{"id":1622022,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia6zEsh2u119zJicmq7wApvnricZEKiawaZicice1cOzujWdFicFwPtavlHiaVpCNgCpxBtdl7ynd3y0wkQ/132","nickname":"james_xu","note":"","ucode":"12E50291F5BA89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410249,"discussion_content":"【购物车信息的特性是一个树性的结构】 我觉得这句有点问题，购物车信息重要的字段就是skuID, timestamp, count 这些字段吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635643647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183965,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1583174907,"is_pvip":false,"replies":[{"id":"71223","content":"我个人的看法是，商品子系统存储商品快照更合理一些。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1583201682,"ip_address":"","comment_id":183965,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40237880571","product_id":100046801,"comment_content":"思考题是可行的，但是复杂，例如需要考虑：<br>1. Redis的容量可能远小于数据库容量，需要缓存策略缓存数据<br>2. 要处理老师提到的一致性问题<br>3. 性价比<br><br>另外请教老师一个问题：<br>在电商系统中，订单的“商品快照”（商品名称、数量、详情页所有信息）一般是怎么存储的？<br>例如：有订单、商品2个子系统，订单的商品快照一般是由哪个系统生成和保存？<br><br>","like_count":9,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485837,"discussion_content":"我个人的看法是，商品子系统存储商品快照更合理一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583201682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194331,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583207823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203944,"user_name":"睡浴缸的人","can_delete":false,"product_type":"c1","uid":1194395,"ip_address":"","ucode":"AAA7476707D82F","user_header":"https://static001.geekbang.org/account/avatar/00/12/39/9b/fc21f943.jpg","comment_is_top":false,"comment_ctime":1586309809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31651080881","product_id":100046801,"comment_content":"感受到了这种技术选择的纠结与权衡的魅力，很喜欢老师的这种讲述方式","like_count":7},{"had_liked":false,"id":183960,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1583170173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18763039357","product_id":100046801,"comment_content":"     这个问题的回答应当从两种数据库特性去说起吧：redis的特点是存储于内存，但是数据落地刷盘、、、mysql的特性是数据存储于硬盘。<br>    由于存于内存故而查询速度非常可观：购物车环节其实商品变革的频率蛮高的，此时如果直接每次增删商品都访问硬盘数据库，这个代价就、、、尤其是在高并发场景下，真正与金额直接产生的交互的环节是结算环节，即付款；我记得老师曾经在消息队列的期中考试中考过什么场景下数据会丢失<br>     故而今天课程的答案：我个人倾向在结算之前不落mysql数据库：购物车环节直接用redis以减少购物车频繁改动而带来大量的IO消耗。<br>     另外有一点我不太确定：LocalStorage的安全性如何？cookie的安全性问题一直颇受争议，此时在购物车环节去直接访问结算数据库，觉得欠妥。<br>    谢谢老师的分享：去年的课程受益匪浅，最近正在准备抽空过第二遍；希望这门课程同样能收获不一样的东西；谢谢。","like_count":4},{"had_liked":false,"id":241877,"user_name":"dingjiayi","can_delete":false,"product_type":"c1","uid":1485477,"ip_address":"","ucode":"DAE189F6FB1B55","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/a5/194613c1.jpg","comment_is_top":false,"comment_ctime":1597482987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14482384875","product_id":100046801,"comment_content":"我觉得这是一门被低估的课程(我认为订阅数目应该远大于当前数目4895)","like_count":3},{"had_liked":false,"id":183995,"user_name":"肥low","can_delete":false,"product_type":"c1","uid":1043480,"ip_address":"","ucode":"A158AFAAB8C742","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","comment_is_top":false,"comment_ctime":1583200409,"is_pvip":false,"replies":[{"id":"71224","content":"我会在下节课的评论区说一下我的理解，请关注。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1583202513,"ip_address":"","comment_id":183995,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14468102297","product_id":100046801,"comment_content":"我觉得完全可行 而且有时候比如MySQL主从架构下是有数据延迟更新问题的 用Redis我可以尽量避免这一点 不过有对用户加购的维护成本","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485846,"discussion_content":"我会在下节课的评论区说一下我的理解，请关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583202513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798979,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","nickname":"博","note":"","ucode":"F7CA69FF5D09BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195059,"discussion_content":"主从是个办法，可是增加了系统的复杂性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583248362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184545,"user_name":"大秦皇朝","can_delete":false,"product_type":"c1","uid":1301113,"ip_address":"","ucode":"0F72D0D2FAEAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/da/79/9b093890.jpg","comment_is_top":false,"comment_ctime":1583335052,"is_pvip":false,"replies":[{"id":"71372","content":"关于你的第一个问题：“为什么每次加完购物车都要跳转到一个中转界面上呢？”，虽然我也在京东工作，我还真不知道为什么这样设计，不过不知道也好，我们还可以尝试去猜一下它为什么这样设计，如果我知道的话，可能会涉及商业秘密，反而不能回答了。<br><br>作为局外人，我的猜测是这样的，加购之后，一般用户就不会想继续看这个商详页了，接下来它可能的二个路径是：<br><br>1.去购物车结算；<br>2.去看其它商品；<br><br>所以，增加一个中间页，可以放好多推荐商品，引导用户继续购物，算是商家的小聪明吧。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1583376153,"ip_address":"","comment_id":184545,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10173269644","product_id":100046801,"comment_content":"1、京东的浏览器端，为什么每次加完购物车都要跳转到一个中转界面上呢？这点我疑惑了很多年，从软件设计的逆向思维来考虑，我也想不出所以然来，还请李玥老师是否能给解答下呢？因为按照我们的日常使用习惯（如：阿里，京豆手机端等），都是点击加购物车，直接购物车数量加1提示就好了呀？为什么要多此一举影响用户体验呢？<br>2、李玥老师文稿中提到，用户的购物车偶发情况下丢失一些数据可以接受，但是站在消费者的角度来说，我感觉也没必要纠结是不是少了几样东西。但是会直接影响我对这个平台的感知度，我会认为这个平台能力不行，不注重用户体验等，会给产品（京东）带来很多负面影响呀，所以牺牲的可靠性的这个比例的平衡点是一定要重视的。<br>思考题：综上第2点所述，我觉得业务让必然需要这个方案可行把？写数据的时候MySQL写和Redis同时删，读的时候从Redis中读；如果没有读到再从MySQL中读取，同时写到Redis中。（现学现卖不知道对不对）<br>但是也有个问题，多端同时操作，或者网络不好的时候，么保证数据的准确性呢？完了完了，我又跳回第一讲了。。。","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486051,"discussion_content":"关于你的第一个问题：“为什么每次加完购物车都要跳转到一个中转界面上呢？”，虽然我也在京东工作，我还真不知道为什么这样设计，不过不知道也好，我们还可以尝试去猜一下它为什么这样设计，如果我知道的话，可能会涉及商业秘密，反而不能回答了。\n\n作为局外人，我的猜测是这样的，加购之后，一般用户就不会想继续看这个商详页了，接下来它可能的二个路径是：\n\n1.去购物车结算；\n2.去看其它商品；\n\n所以，增加一个中间页，可以放好多推荐商品，引导用户继续购物，算是商家的小聪明吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583376153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283018,"discussion_content":"经常遇到一种场景，业务人员需要通过新增中间页来提交营销业绩，但技术希望产品优化掉中间页改善用户体验，顺带着把技术复杂度降低，这时候就要考察每个人的产品sense了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592143901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008900,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/04/bf12d036.jpg","nickname":"一个程序员的成长","note":"","ucode":"168CDADD41B65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201004,"discussion_content":"感谢感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583750885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1301113,"avatar":"https://static001.geekbang.org/account/avatar/00/13/da/79/9b093890.jpg","nickname":"大秦皇朝","note":"","ucode":"0F72D0D2FAEAF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196916,"discussion_content":"感谢李sir","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583384363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183981,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1583196589,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10173131181","product_id":100046801,"comment_content":"不考虑复杂性和服务器成本的话，我认为是可行的。跟老师之前讲的方法一样，每次查询购物车先在 redis 里查，查不到再到 mysql 中查同时更新 redis 中数据。更新用户购物车数据时删除 redis 中数据。但我有一个问题是:用户本身购物车没数据的时候会导致 redis 和 mysql 查两遍……","like_count":2,"discussions":[{"author":{"id":1008900,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/04/bf12d036.jpg","nickname":"一个程序员的成长","note":"","ucode":"168CDADD41B65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200999,"discussion_content":"这应该是没办法避免的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583750661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273205,"user_name":"Geek_8c4282","can_delete":false,"product_type":"c1","uid":1562826,"ip_address":"","ucode":"09E13C2DDBA48D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3opKxGyQia0CQibZU8If7Qv6ia3j4XiaWIdCHxrK0T3uZ5RVUSgwf0IJVRVt0wVLibryycTqv4VnEzbw/132","comment_is_top":false,"comment_ctime":1610497896,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5905465192","product_id":100046801,"comment_content":"老师想问下库存在高并发下有没有方法解决超卖或少卖问题，看了下好多同学都问了，但是老师都不回答","like_count":2,"discussions":[{"author":{"id":2297346,"avatar":"https://static001.geekbang.org/account/avatar/00/23/0e/02/41099234.jpg","nickname":"Django...","note":"","ucode":"56693F8A886FF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367571,"discussion_content":"超卖mysql事务+乐观锁是一种解决方式；少买就不知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618394979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357636,"discussion_content":"redis lua脚本做一个原子性操作处理即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615824711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219854,"user_name":"五河士稻","can_delete":false,"product_type":"c1","uid":1095316,"ip_address":"","ucode":"CB1809F3B739A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/b6/94/190de8f4.jpg","comment_is_top":false,"comment_ctime":1590110800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885078096","product_id":100046801,"comment_content":"个人用法:只用 redis 存储购物车，现在 redis 可以保证数据长久存储，不丢失（比如:集群），其次设计一个记录表， 有购物车记录操作和变动时，可以根据用户id和sku id来作为记录主要标识，从而方便统计。","like_count":1},{"had_liked":false,"id":206635,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1586912417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881879713","product_id":100046801,"comment_content":"我觉得，如果电商没有分库，商品表和购物车表在一个库中，用mysql好些，redis存的SKUID，还是要落mysql查商品信息和价格，还不如一次性查回来；如果分库了，用Redis好些，根据id发异步请求就是。","like_count":1},{"had_liked":false,"id":202720,"user_name":"锐","can_delete":false,"product_type":"c1","uid":1110915,"ip_address":"","ucode":"A245BA96C9471F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/83/e2612d81.jpg","comment_is_top":false,"comment_ctime":1586057696,"is_pvip":false,"replies":[{"id":"76055","content":"这种情况真的识别不了……","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1586223311,"ip_address":"","comment_id":202720,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5881024992","product_id":100046801,"comment_content":"“用户没登录，在浏览器中加购，然后登录，刚才加购的商品还在不在？” 关于这一点，怎么判断没登录加车的用户 和 登录的用户是同一个呢？比如我没登录在购物车加了一堆东西，然后我朋友用我的电脑登录他的账户，这该如何解决","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490661,"discussion_content":"这种情况真的识别不了……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586223311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365835,"discussion_content":"不是我开的挂，是我朋友在我电脑上登我的账户玩的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617889769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484965,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a8/a5/27466113.jpg","nickname":"Jonathan","note":"","ucode":"031E0DC776E8A0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361413,"discussion_content":"对于此服务来说，识别的主体不是使用手机的人，而是在哪里使用，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616665408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330419,"discussion_content":"我觉得合不合并直接让用户选择算了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606620977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202382,"user_name":"狐狸糊涂","can_delete":false,"product_type":"c1","uid":1560828,"ip_address":"","ucode":"131C15B606326D","user_header":"https://static001.geekbang.org/account/avatar/00/17/d0/fc/f7a5e223.jpg","comment_is_top":false,"comment_ctime":1585980567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880947863","product_id":100046801,"comment_content":"老师，能讲解一下订单模块到物流的设计吗？<br>一个订单是按照什么来拆分子订单的？比如物品部分发货的情况，怎么来设计拆分订单更合理呢？","like_count":1},{"had_liked":false,"id":192230,"user_name":"四道杠的红领巾","can_delete":false,"product_type":"c1","uid":1213394,"ip_address":"","ucode":"F17257066F85EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/d2/1758ce61.jpg","comment_is_top":false,"comment_ctime":1584843761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879811057","product_id":100046801,"comment_content":"多一份存储介质，就要维护两个存储介质的数据一致性，然而两个介质的更新是很难做到同时的，总有个先后顺序","like_count":1},{"had_liked":false,"id":187173,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1584033020,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5879000316","product_id":100046801,"comment_content":"个人认为购物车数据还是不太适合缓存，写场景比较多，写后读又几乎不能有延迟，使用缓存的话，每次写就要先写db再写缓存。这样的代价对于提升的那些读时的性能似乎不太值得","like_count":1,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211742,"discussion_content":"是异步刷盘的，不用等db写好再能被查询到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584885795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249113,"discussion_content":"异步也不一定会立即执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":211742,"ip_address":""},"score":249113,"extra":""}]}]},{"had_liked":false,"id":184311,"user_name":"bin","can_delete":false,"product_type":"c1","uid":1307082,"ip_address":"","ucode":"EC4F4194082715","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/ca/9b9b8a7c.jpg","comment_is_top":false,"comment_ctime":1583287711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878255007","product_id":100046801,"comment_content":"存储mysql用redis做缓存这个方案不太合适，缓存的适用场景是“读多写少”的场景，因为存在两份数据经常写就会有数据不一致的风险。购物车并不适合这个场景。","like_count":1},{"had_liked":false,"id":348550,"user_name":"谭亮","can_delete":false,"product_type":"c1","uid":1142395,"ip_address":"","ucode":"8BE75B6409548C","user_header":"","comment_is_top":false,"comment_ctime":1655192817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655192817","product_id":100046801,"comment_content":"redis不是可以持久化吗？","like_count":0},{"had_liked":false,"id":340063,"user_name":"justfun823","can_delete":false,"product_type":"c1","uid":2920845,"ip_address":"","ucode":"F0EEB4E99CD7D5","user_header":"https://static001.geekbang.org/account/avatar/00/2c/91/8d/682b8d8b.jpg","comment_is_top":false,"comment_ctime":1648563189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648563189","product_id":100046801,"comment_content":"未登录情况下，购物车列表展示信息也挺复杂（商品信息、价格、甚至包含运费等），需要展示的时候再去服务端做一次计算吗，还是让前端完成","like_count":0},{"had_liked":false,"id":335638,"user_name":"Ky","can_delete":false,"product_type":"c1","uid":2033381,"ip_address":"","ucode":"EFE8635A82D78F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dqFNxRtTH5fNFN0eVc2fEftyWv0XPM565g54nVXHibVLMynn65yoQLDAt85MTEDU81gKeEvH6SQ1ibIzoxavryaQ/132","comment_is_top":false,"comment_ctime":1645609856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645609856","product_id":100046801,"comment_content":"个人觉得未登录不允许加购会合理一点,用户操作加购就是已经有购买意向,请求表明意向购买的身份也是合理的,如果允许未登录加购,也可能会出现一个场景:a未登录选择加购后未登录就离开,b使用时直接操作登录,那是否就把不是自己想买的产品都加购到自己账号了？而想买的a则被清空了操作?","like_count":0},{"had_liked":false,"id":304360,"user_name":"林铭铭","can_delete":false,"product_type":"c1","uid":1068499,"ip_address":"","ucode":"AB392BEE7CD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/d3/67bdcca9.jpg","comment_is_top":false,"comment_ctime":1627372309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627372309","product_id":100046801,"comment_content":"感觉可以弄个持久化的缓存来存购物车","like_count":0},{"had_liked":false,"id":293000,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1621150042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621150042","product_id":100046801,"comment_content":"思考题：<br>        用Redis做缓存，提升购物车的查询性能，用户看自己购物车时，由于Redis的key是用户的ID,所以直接从Redis中获取购物车信息，可以极大提升性能和并发性；<br>       用MySQL存贮购物车的结构化信息，对于复杂查询和数据统计功能，用MySQL的结构化表结构更容易实现；<br>       使用两种存储方式，就要保证数据一致性，类似于操作系统的缓存机制，查询购物车时，先在Redis缓存中做查询，如果找到，则直接取出购物车信息；否则先从MySQL表中取出购物车信息，再加载到Redis缓存中，另外，当用户加、减商品，以及把临时购物车合并到用户购物车时，都要同步刷新Redis中的购物车信息。<br>由于没有用过Redis，这方面没有太多经验，以上是我个人的一点浅薄理解，请老师指教。","like_count":0},{"had_liked":false,"id":269737,"user_name":"柯察金","can_delete":false,"product_type":"c1","uid":1115149,"ip_address":"","ucode":"F722BF8FCD2C47","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/0d/3dc5683a.jpg","comment_is_top":false,"comment_ctime":1608774396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608774396","product_id":100046801,"comment_content":"老师，商品历史数据也是存在商品表里面吗？","like_count":0},{"had_liked":false,"id":264177,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1606373172,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606373172","product_id":100046801,"comment_content":"关于思考题，其实是redis和mysql双写方案。直接拿redis当作db用，key不过期。日常读写都在redis。<br>但毕竟redis不可靠，所以增加一个mysql用作兜底，以防数据丢失。<br><br>对于mysql和redis数据如何做到一致性，我觉得可以通过消息来实现，具体如下：<br>增加&#47;删除时，写完redis后，发个表示增加&#47;删除的消息，然后mysql侧慢慢消费，即便遇到高峰期，最多可能会产生一些消息积压，但mysql也不至于挂，做到最终一致性。","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365838,"discussion_content":"感觉做备份更好\n冷备 + 热备","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617890126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261540,"user_name":"Geek_f98286","can_delete":false,"product_type":"c1","uid":2312851,"ip_address":"","ucode":"6D055ED1DD8EF1","user_header":"","comment_is_top":false,"comment_ctime":1605411047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605411047","product_id":100046801,"comment_content":"特意购买这个课程，不知道现在老师还会回复新问题不？我的问题是：<br>提交购物车下单后，是通过状态来表示数据还是删除用户的购物车记录？状态类似有：新建或已下单<br>删除可以用假删除。","like_count":0},{"had_liked":false,"id":259628,"user_name":"流年","can_delete":false,"product_type":"c1","uid":2296382,"ip_address":"","ucode":"8B579C6E466CB4","user_header":"https://static001.geekbang.org/account/avatar/00/23/0a/3e/5b1b1b75.jpg","comment_is_top":false,"comment_ctime":1604793225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604793225","product_id":100046801,"comment_content":"购物车会比较频繁的写入和更新的，用redis做缓存不合适，直接用mysql，一般做了分库分表，读写分离扛得住的","like_count":0},{"had_liked":false,"id":224820,"user_name":"王佳山","can_delete":false,"product_type":"c1","uid":1786944,"ip_address":"","ucode":"771D318F150F8C","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoxUFAanq6rz2MqHXtn7vAvyIe0ljoqCtX3gnqZujLk7x90llHedHqCpHCnbYJeZmPX06Y6OFlibpQ/132","comment_is_top":false,"comment_ctime":1591546031,"is_pvip":false,"replies":[{"id":"83102","content":"暂存购物车写到Cookie中，是不需要标识的，因为Cookie是存在浏览器中的，每个浏览器本身就是标识。<br><br>另外，Cookie也是可以设定有效期的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1591791146,"ip_address":"","comment_id":224820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591546031","product_id":100046801,"comment_content":"老师，这个暂存购物车怎么做还是没太明白！<br>比如用cookie，当用户没登录，第一次添加购物车的时候，服务端给cookie中添加标识吗，之后这个标识就代表一个未登录用户吗？还是前端给cookie添加标识，或者怎么样？<br><br><br>如果未登录用户加购之后，再也不访问网站，这个暂存购物车就会保存脏数据，是不是还要对数据定时检查维护？删除时间过长的数据，或者暂存就用redis做，设置有效期","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497617,"discussion_content":"暂存购物车写到Cookie中，是不需要标识的，因为Cookie是存在浏览器中的，每个浏览器本身就是标识。\n\n另外，Cookie也是可以设定有效期的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591791146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218146,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1589724450,"is_pvip":false,"replies":[{"id":"80844","content":"如果用Redis做购物车的唯一存储而不是缓存的话，不需要设置过期时间。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1589868256,"ip_address":"","comment_id":218146,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1589724450","product_id":100046801,"comment_content":"如果使用redis做购物车存储该如何设置商品过期时间呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495361,"discussion_content":"如果用Redis做购物车的唯一存储而不是缓存的话，不需要设置过期时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589868256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250029,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","nickname":"张学磊","note":"","ucode":"F545F384A6F1E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269138,"discussion_content":"那如果用户往购物车里面放好多商品而又不下单或删除，而且这样用户又很多的话，这些数据不就一直存在redis了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589870738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250029,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","nickname":"张学磊","note":"","ucode":"F545F384A6F1E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365842,"discussion_content":"对呀，这些都是用户数据\n举个极端的类比，难道没人买过的商品就要移除嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617890240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269138,"ip_address":""},"score":365842,"extra":""}]}]},{"had_liked":false,"id":210127,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1587688923,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1587688923","product_id":100046801,"comment_content":"谢谢老师，讲得很好~ <br>另外我想，购物车的表设计，其主键id是否可以用user_id+sku_id的拼接字符串，相对于老师的示例表结构，应该有如下优点：<br>1. 节省存储空间占用、加速写入：因为不需要为这个表以user_id建立二级索引了，这个表可以没有索引，省去了一些存储空间和写入消耗。<br>2. 加速读取：因为主键的前一部分是user_id，那么前缀相同每个user的购物车数据一定是存储在一起的，那么每次读取同一个user的购物车，都只需要一次顺序读，比起通过二级索引查到user_id的购物车数据，再回表随机读会更快。<br>这只是粗略的想法，不知道我这个想法中是不是有坑~","like_count":0,"discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249103,"discussion_content":"如果是拼接作为主键的话，主键肯定是字符串了，因为需要分隔符来避免歧义，字符串作为主键，插入时会索引会重新排序吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587910097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1174066,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","nickname":"真名不叫黄金","note":"","ucode":"FB611FC98F5BA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249656,"discussion_content":"对哦，提醒了我，之前忘记是MySQL是B+tree了。因为我们用的数据库是LSM Tree因此没有插入会导致页分裂的问题~所以没有考虑到，感谢提醒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587950943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249103,"ip_address":""},"score":249656,"extra":""}]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365843,"discussion_content":"一般用逻辑主键\n会建立user_id和sku_id的联合索引加快查询","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617890371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249079,"discussion_content":"联合主键吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587909655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1174066,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","nickname":"真名不叫黄金","note":"","ucode":"FB611FC98F5BA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249654,"discussion_content":"字符串","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587950859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249079,"ip_address":""},"score":249654,"extra":""}]}]},{"had_liked":false,"id":201964,"user_name":"王林","can_delete":false,"product_type":"c1","uid":1879026,"ip_address":"","ucode":"34D2D9FE4F786A","user_header":"","comment_is_top":false,"comment_ctime":1585882765,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585882765","product_id":100046801,"comment_content":"关于最后的思考题，我认为是可以这样做的，好处是获得了mysql的可靠性，可以用这种方式，但是思路要换一下，不能把redis作为从数据，而是要当作主数据，先维护redis，再维护mysql","like_count":0,"discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249107,"discussion_content":"Redis操作成功而MySQL执行失败该怎么办？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198942,"user_name":"鲁班大师","can_delete":false,"product_type":"c1","uid":1179156,"ip_address":"","ucode":"4F9615DF87B031","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/14/f1532dec.jpg","comment_is_top":false,"comment_ctime":1585474127,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585474127","product_id":100046801,"comment_content":"我觉得暂存购物车还是应该放在服务端，比如京东商城有多个端pc,app,h5,小程序，第三方推广渠道app。如果前端暂存，岂不是每个端都要开发一次","like_count":0,"discussions":[{"author":{"id":1175531,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbmQxAz3RgFgQWPxxLeZicmQJmB41srJAbNR0RQCYROaXxrh2OC8ZlGeG0nJIYHlEicrlkEo8vgBpw/132","nickname":"GUNDAMRX","note":"","ucode":"9EB899D69AD5B5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378071,"discussion_content":"我觉得不可行，在不登陆的情况下，如何将这多个设备关联到同一个用户？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623049394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193664,"user_name":"kamida","can_delete":false,"product_type":"c1","uid":1904150,"ip_address":"","ucode":"0C5075CEF829C0","user_header":"","comment_is_top":false,"comment_ctime":1584945720,"is_pvip":false,"replies":[{"id":"73875","content":"我们给出的方案支持多种商品的，你可以自行看一下文中的例子，就是2种商品。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1585014644,"ip_address":"","comment_id":193664,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1584945720","product_id":100046801,"comment_content":"老师 文中的购物车表一行只能存一种商品吧 但是一个购物车id应该可以有多种商品 请问这个该怎么解决呢","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488614,"discussion_content":"我们给出的方案支持多种商品的，你可以自行看一下文中的例子，就是2种商品。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585014644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365846,"discussion_content":"user_id不变，代表同一个用户（购物车）\nskuid变化，代表不同的商品，\nid逻辑主键自增","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617890529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1904150,"avatar":"","nickname":"kamida","note":"","ucode":"0C5075CEF829C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212886,"discussion_content":"老师 我说的是mysql的那个table schema，只有一列代表skuid","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585028754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1904150,"avatar":"","nickname":"kamida","note":"","ucode":"0C5075CEF829C0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286995,"discussion_content":"之间见老师回复过：不同尺寸的同种商品每个都有独立的ID","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593343339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212886,"ip_address":""},"score":286995,"extra":""}]}]},{"had_liked":false,"id":193166,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1584885416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584885416","product_id":100046801,"comment_content":"购物车的逻辑咋一看有点反直觉，但稍想下就意识到真的是这样","like_count":0},{"had_liked":false,"id":190909,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1584708285,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584708285","product_id":100046801,"comment_content":"这个购物车，未登录一般我们不给看购物车。话说这个价格版本这个确实挺有意思的，对于面向用户租户商户那种，频繁改价是跑不掉的。<br>关于Redis那个是这样的，就是涉及到修改，更新MySQL成功也要顺手把Redis更新了，要不然真的的坑。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211740,"discussion_content":"维护两份介质就一定有同步问题，如果是非事务性的同步，就一定有数据不一致的窗口期，虽然窗口期绝大多数可能非常短，短到不会出问题，但那少部分没那么短的就会出问题。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584885735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184380,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1583303529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583303529","product_id":100046801,"comment_content":"用户访问购物车的时候一般都是要操作它里面的商品了，这样看来加redis缓存避免读db意义不大。","like_count":0},{"had_liked":false,"id":184217,"user_name":"博","can_delete":false,"product_type":"c1","uid":1798979,"ip_address":"","ucode":"F7CA69FF5D09BA","user_header":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","comment_is_top":false,"comment_ctime":1583248297,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583248297","product_id":100046801,"comment_content":"策略，更新数据时删缓存，数据一致性虽然保证了，可是如果更新购物车频繁一样会给数据库带来很大压力，所以前提假设都会成功，<br>使用mq更新redis，查找也是redis；至于数据库中的更新虽然会慢些，但是不影响最终一致性，扩展也不耽误。","like_count":0,"discussions":[{"author":{"id":1798979,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","nickname":"博","note":"","ucode":"F7CA69FF5D09BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254169,"discussion_content":"11","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588299087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184102,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1583223321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583223321","product_id":100046801,"comment_content":"个人用购物车的感觉是，这是一个写跟读的比例差距不大的场景，不适合缓存模式，所以怀疑用redis+db这种模式的意义何在。<br>而且不管是cache aside，write back等等机制，理论上都有或大或小的不一致窗口时间。下单之后，后台会发现mysql 购物车中不存在的商品或者数量不一致，导致下单失败。这问题出现的几率，个人觉得比redis down掉要高，给用户带来的不良体验也比购物车变更丢失要大。<br>","like_count":0},{"had_liked":false,"id":184065,"user_name":"漏脚脖","can_delete":false,"product_type":"c1","uid":1615539,"ip_address":"","ucode":"214AE52EC201E6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI6LXcIqb5K48nia8d4zmdsD1M9AZeyXoGrLzX5xvqfN0fqXOsYKUWLbZvZ8TtJCXWmYbCkCXg93dQ/132","comment_is_top":false,"comment_ctime":1583217380,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583217380","product_id":100046801,"comment_content":"我觉得可以共用，而且一起用比较好<br><br>虽然写入的时候要先写mysql，再写redis，保证他们俩数据一致，这样多写一次redis<br><br>但是这样每次读就都读redis，效率会高，而且商品上有历史版本的话，加入购物车时候可以把价格等信息也放redis里，因为这些历史版本的信息不用跟着变，这样打开购物车页面的时候也避免了访问商品模块","like_count":0,"discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249133,"discussion_content":"价格信息可以放，但是还是要访问商品模块！因为商品价格存在改价的问题，为什么说价格信息可以放呢？是当你想实现“比加入购物车时降价/涨价了 xx 元”的需求时，可以通过实时获取商品信息的价格与购物车数据中加购时价格做对比，实现上述场景需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183987,"user_name":"刘楠","can_delete":false,"product_type":"c1","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1583197424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583197424","product_id":100046801,"comment_content":"可行，更新购物车的时候写mysql同时删除缓存，读的时候优先读redis，没有在打到db，同时cache一份到redis，这样应该可以保证一致性<br>同时，能不能每节课时把上节课的思考师解答下，谢谢","like_count":0},{"had_liked":false,"id":183977,"user_name":"Cranliu","can_delete":false,"product_type":"c1","uid":1304302,"ip_address":"","ucode":"DC2DE84B142FDA","user_header":"https://static001.geekbang.org/account/avatar/00/13/e6/ee/e3c4c9b3.jpg","comment_is_top":false,"comment_ctime":1583194084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583194084","product_id":100046801,"comment_content":"当然是可以的。一致性的问题采用主动更新缓存解决。","like_count":0},{"had_liked":false,"id":183955,"user_name":"Sephiroth","can_delete":false,"product_type":"c1","uid":1205786,"ip_address":"","ucode":"AE4C296C17AC46","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/1a/585a76ef.jpg","comment_is_top":false,"comment_ctime":1583168083,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1583168083","product_id":100046801,"comment_content":"应该可行，更新购物车的时候写mysql同时修改redis，读的时候优先读redis，没有在打到db，同时cache一份到redis，这样应该可以保证一致性","like_count":0,"discussions":[{"author":{"id":1179056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","nickname":"京京beaver","note":"","ucode":"C21838D7CA7D6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194462,"discussion_content":"购物车设置缓存没有意义，每个用户的数据是隔离的，只访问自己的数据，缓存命中率太低，完全没有达到缓存的目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583222066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1619792,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/50/233b2d12.jpg","nickname":"6 7 8 9 10","note":"","ucode":"D1A4C164D496BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","nickname":"京京beaver","note":"","ucode":"C21838D7CA7D6B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194673,"discussion_content":"可以换个思路考虑缓存命中率，hash 用户id,利用hash路由到redis节点中。对于访问率，使用缓存主动失效，跟淘汰机制\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583238574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194462,"ip_address":""},"score":194673,"extra":""},{"author":{"id":1179056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","nickname":"京京beaver","note":"","ucode":"C21838D7CA7D6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1619792,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/50/233b2d12.jpg","nickname":"6 7 8 9 10","note":"","ucode":"D1A4C164D496BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195007,"discussion_content":"不是的，每个人都购物车都是独立的商品组合，你说缓存什么呢？没有数据是可以共享的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583247578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194673,"ip_address":""},"score":195007,"extra":""},{"author":{"id":1036370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d0/52/014accaf.jpg","nickname":"划过天空阿忠","note":"","ucode":"9D9BEE73031E40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","nickname":"京京beaver","note":"","ucode":"C21838D7CA7D6B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210047,"discussion_content":"同意啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584704641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195007,"ip_address":""},"score":210047,"extra":""}]}]}]}