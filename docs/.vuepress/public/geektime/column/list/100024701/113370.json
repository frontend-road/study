{"id":113370,"title":"56 | 容器：大公司为保持创新，鼓励内部创业","content":"<p>上一章，我们讲了虚拟化的原理。从一台物理机虚拟化出很多的虚拟机这种方式，一定程度上实现了资源创建的灵活性。但是你同时会发现，虚拟化的方式还是非常复杂的。这有点儿像，你去成立子公司，虽然说公司小，但毕竟是一些独立的公司，麻雀虽小，五脏俱全，因而就像上一章我们看到的那样，CPU、内存、网络、硬盘全部需要虚拟化，一个都不能偷懒。</p><p>那有没有一种更加灵活的方式，既可以隔离出一部分资源，专门用于某个进程，又不需要费劲周折的虚拟化这么多的硬件呢？毕竟最终我只想跑一个程序，而不是要一整个Linux系统。这就像在一家大公司搞创新，如果每一个创新项目都要成立一家子公司的话，那简直太麻烦了。一般方式是在公司内部成立一个独立的组织，分配独立的资源和人力，先做一段时间的内部创业。如果真的做成功了，再成立子公司也不迟。</p><p>在Linux操作系统中，有一项新的技术，称为容器，它就可以做到这一点。</p><p>容器的英文叫Container，Container的另一个意思是“集装箱”。其实容器就像船上的不同的集装箱装着不同的货物，有一定的隔离，但是隔离性又没有那么好，仅仅做简单的封装。当然封装也带来了好处，一个是打包，二是标准。</p><p>在没有集装箱的时代，假设我们要将货物从A运到B，中间要经过三个码头、换三次船。那么每次都要将货物卸下船来，弄得乱七八糟，然后还要再搬上船重新摆好。因此在没有集装箱的时候，每次换船，船员们都要在岸上待几天才能干完活。</p><!-- [[[read_end]]] --><p>有了尺寸全部都一样的集装箱以后，我们可以把所有的货物都打包在一起。每次换船的时候，把整个集装箱搬过去就行了，几个小时就能完成。船员换船时间大大缩短了。这是集装箱的“打包”和“标准”两大特点在生活中的应用。</p><p>其实容器的思想就是要变成软件交付的集装箱。那么容器如何对应用打包呢？</p><p>我们先来学习一下集装箱的打包过程。首先，我们得有个封闭的环境，将货物封装起来，让货物之间互不干扰，互相隔离，这样装货卸货才方便。</p><p>容器实现封闭的环境主要要靠两种技术，一种是看起来是隔离的技术，称为<strong>namespace</strong>（命名空间）。在每个namespace中的应用看到的，都是不同的 IP地址、用户空间、进程ID等。另一种是用起来是隔离的技术，称为<strong>cgroup</strong>（网络资源限制），即明明整台机器有很多的 CPU、内存，但是一个应用只能用其中的一部分。</p><p>有了这两项技术，就相当于我们焊好了集装箱。接下来的问题就是，如何“将这些集装箱标准化”，在哪艘船上都能运输。这里就要用到镜像了。</p><p>所谓<strong>镜像</strong>（Image），就是在你焊好集装箱的那一刻，将集装箱的状态保存下来。就像孙悟空说：“定！”，集装箱里的状态就被“定”在了那一刻，然后这一刻的状态会被保存成一系列文件。无论在哪里运行这个镜像，都能完整地还原当时的情况。</p><p>当程序员根据产品设计开发完毕之后，可以将代码连同运行环境打包成一个容器镜像。这个时候集装箱就焊好了。接下来，无论是在开发环境、测试环境，还是生产环境运行代码，都可以使用相同的镜像。就好像集装箱在开发、测试、生产这三个码头非常顺利地整体迁移，这样产品的发布和上线速度就加快了。</p><p>下面，我们就来体验一下这个Linux上的容器技术！</p><p>首先，我们要安装一个目前最主流的容器技术的实现Docker。假设我们的操作系统是CentOS，你可以参考<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\">https://docs.docker.com/install/linux/docker-ce/centos/</a>这个官方文档，进行安装。</p><p>第一步，删除原有版本的Docker。</p><pre><code>yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n</code></pre><p>第二步，安装依赖的包。</p><pre><code>yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n</code></pre><p>第三步，安装Docker所属的库。</p><pre><code>yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n</code></pre><p>第四步，安装Docker。</p><pre><code>yum install docker-ce docker-ce-cli containerd.io\n</code></pre><p>第五步，启动Docker。</p><pre><code>systemctl start docker\n</code></pre><p>Docker安装好之后，接下来我们就来运行一个容器。</p><p>就像上面我们讲过的，容器的运行需要一个镜像，这是我们集装箱封装的那个环境，在<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a>上，你能找到你能想到的几乎所有环境。</p><p>最基础的环境就是操作系统。</p><p>咱们最初讲命令行的时候讲过，每种操作系统的命令行不太一样，就像黑话一样。有时候我们写一个脚本，需要基于某种类型的操作系统，例如，Ubuntu或者centOS。但是，Ubuntu或者centOS不同版本的命令也不一样，需要有一个环境尝试一下命令是否正确。</p><p>最常见的做法是有几种类型的操作系统，就弄几台物理机。当然这样一般人可玩不起，但是有了虚拟机就好一些了。你可以在你的笔记本电脑上创建多台虚拟机，但是这个时候又会有另一个苦恼，那就是，虚拟机往往需要比较大的内存，一般一台笔记本电脑上无法启动多台虚拟机，所以做起实验来要经常切换虚拟机，非常麻烦。现在有了容器，好了，我们可以在一台虚拟机上创建任意的操作系统环境了。</p><p>比方说，你可以在<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a>上搜索Ubuntu。点开之后，找到Tags。镜像都有Tag，这是镜像制作者自己任意指定的，多用于表示这个镜像的版本号。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/fb/160b839adb2bd7390c16c4591204befb.png?wh=1368*944\" alt=\"\"></p><p>如果仔细看这些Tags，我们会发现，哪怕非常老版本的Ubuntu，这里面都有，例如14.04。如果我们突然需要一个基于Ubuntu 14.04的命令，那就不需要费劲去寻找、安装一个这么老的虚拟机，只要根据命令下载这个镜像就可以了。</p><pre><code># docker pull ubuntu:14.04\n14.04: Pulling from library/ubuntu\na7344f52cb74: Pull complete \n515c9bb51536: Pull complete \ne1eabe0537eb: Pull complete \n4701f1215c13: Pull complete \nDigest: sha256:2f7c79927b346e436cc14c92bd4e5bd778c3bd7037f35bc639ac1589a7acfa90\nStatus: Downloaded newer image for ubuntu:14.04\n</code></pre><p>下载完毕之后，我们可以通过下面的命令查看镜像。</p><pre><code># docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              14.04               2c5e00d77a67        2 months ago        188MB\n</code></pre><p>有了镜像，我们就可以通过下面的启动一个容器啦。</p><p>启动一个容器需要一个叫entrypoint的东西，也就是入口。一个容器启动起来之后，会从这个指令开始运行，并且只有这个指令在运行，容器才启动着。如果这个指令退出，整个容器就退出了。</p><p>因为我们想尝试命令，所以这里entrypoint要设置为bash。通过cat /etc/lsb-release，我们可以看出，这里面已经是一个老的Ubuntu 14.04的环境。</p><pre><code># docker run -it --entrypoint bash ubuntu:14.04\nroot@0e35f3f1fbc5:/# cat /etc/lsb-release \nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=&quot;Ubuntu 14.04.6 LTS&quot;\n</code></pre><p>如果我们想尝试centOS 6，也是没问题的。</p><pre><code># docker pull centos:6\n6: Pulling from library/centos\nff50d722b382: Pull complete \nDigest: sha256:dec8f471302de43f4cfcf82f56d99a5227b5ea1aa6d02fa56344986e1f4610e7\nStatus: Downloaded newer image for centos:6\n\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              14.04               2c5e00d77a67        2 months ago        188MB\ncentos              6                   d0957ffdf8a2        4 months ago        194MB\n\n# docker run -it --entrypoint bash centos:6\n[root@af4c8d598bdf /]# cat /etc/redhat-release \nCentOS release 6.10 (Final)\n</code></pre><p>除了可以如此简单地创建一个操作系统环境，容器还有一个很酷的功能，就是镜像里面带应用。这样的话，应用就可以像集装箱一样，到处迁移，启动即可提供服务。而不用像虚拟机那样，要先有一个操作系统的环境，然后再在里面安装应用。</p><p>我们举一个最简单的应用的例子，也就是nginx。我们可以下载一个nginx的镜像，运行起来，里面就自带nginx了，并且直接可以访问了。</p><pre><code># docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nfc7181108d40: Pull complete \nd2e987ca2267: Pull complete \n0b760b431b11: Pull complete \nDigest: sha256:48cbeee0cb0a3b5e885e36222f969e0a2f41819a68e07aeb6631ca7cb356fed1\nStatus: Downloaded newer image for nginx:latest\n\n# docker run -d -p 8080:80 nginx\n73ff0c8bea6e169d1801afe807e909d4c84793962cba18dd022bfad9545ad488\n\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n73ff0c8bea6e        nginx               &quot;nginx -g 'daemon of…&quot;   2 minutes ago       Up 2 minutes        0.0.0.0:8080-&gt;80/tcp   modest_payne\n\n# curl http://localhost:8080\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n</code></pre><p>这次nginx镜像运行的方式和操作系统不太一样，一个是-d，因为它是一个应用，不需要像操作系统那样有交互命令行，而是以后台方式运行，-d就是daemon的意思。</p><p>另外一个就是端口-p 8080:80。容器这么容易启动，每台机器上可以启动N个nginx。大家都监听80端口，不就冲突了吗？所以我们要设置端口，冒号后面的80是容器内部环境监听的端口，冒号前面的8080是宿主机上监听的端口。</p><p>一旦容器启动起来之后，通过docker ps就可以查看都有哪些容器正在运行。</p><p>接下来，我们通过curl命令，访问本机的8080端口，可以打印出nginx的欢迎页面。</p><p>docker run一下，应用就启动起来了，是不是非常方便？nginx是已经有人打包好的容器镜像，放在公共的镜像仓库里面。如果是你自己开发的应用，应该如何打包成为镜像呢？</p><p>因为Java代码比较麻烦，我们这里举一个简单的例子。假设你自己写的HTML的文件就是代码。</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Welcome to nginx Test 7!&lt;/title&gt;\n    &lt;style&gt;\n      body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Test 7&lt;/h1&gt;\n    &lt;p&gt;If you see this page, the nginx web server is successfully installed and\n    working. Further configuration is required.&lt;/p&gt;\n    &lt;p&gt;For online documentation and support please refer to\n    &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\n    Commercial support is available at\n    &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n    &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>那我们如何将这些代码放到容器镜像里面呢？要通过Dockerfile，Dockerfile的格式应该包含下面的部分：</p><ul>\n<li>FROM 基础镜像</li>\n<li>RUN 运行过的所有命令</li>\n<li>COPY 拷贝到容器中的资源</li>\n<li>ENTRYPOINT 前台启动的命令或者脚本</li>\n</ul><p>按照上面说的格式，可以有下面的Dockerfile。</p><pre><code>FROM ubuntu:14.04\nRUN echo &quot;deb http://archive.ubuntu.com/ubuntu trusty main restricted universe multiverse&quot; &gt; /etc/apt/sources.list\nRUN echo &quot;deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list\nRUN apt-get -y update\nRUN apt-get -y install nginx\nCOPY test.html /usr/share/nginx/html/test.html\nENTRYPOINT nginx -g &quot;daemon off;&quot;\n</code></pre><p>将代码、Dockerfile、脚本，放在一个文件夹下，以上面的Dockerfile为例子。</p><pre><code>[nginx]# ls\nDockerfile  test.html\n</code></pre><p>现在我们编译这个Dockerfile。</p><pre><code>docker build -f Dockerfile -t testnginx:1 .\n</code></pre><p>编译过后，我们就有了一个新的镜像。</p><pre><code># docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntestnginx           1                   3b0e5da1a384        11 seconds ago      221MB\nnginx               latest              f68d6e55e065        13 days ago         109MB\nubuntu              14.04               2c5e00d77a67        2 months ago        188MB\ncentos              6                   d0957ffdf8a2        4 months ago        194MB\n</code></pre><p>接下来，我们就可以运行这个新的镜像。</p><pre><code># docker run -d -p 8081:80 testnginx:1\nf604f0e34bc263bc32ba683d97a1db2a65de42ab052da16df3c7811ad07f0dc3\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\nf604f0e34bc2        testnginx:1         &quot;/bin/sh -c 'nginx -…&quot;   2 seconds ago       Up 2 seconds        0.0.0.0:8081-&gt;80/tcp   youthful_torvalds\n73ff0c8bea6e        nginx               &quot;nginx -g 'daemon of…&quot;   33 minutes ago      Up 33 minutes       0.0.0.0:8080-&gt;80/tcp   modest_payne\n</code></pre><p>我们再来访问我们在nginx里面写的代码。</p><pre><code>[root@deployer nginx]# curl http://localhost:8081/test.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Welcome to nginx Test 7!&lt;/title&gt;\n</code></pre><p>看，我们的代码已经运行起来了。是不是很酷？</p><p>其实这种运行方式有更加酷的功能。</p><p>第一就是持续集成。</p><p>想象一下，你写了一个程序，然后把它打成了上面一样的镜像。你在本地一运行docker run就把他运行起来了。接下来，你交给测试的就不是一个“程序包+配置+手册”了，而是一个容器镜像了。测试小伙伴同样通过docker run也就运行起来了，不存在“你这里跑的起来，他那里跑不起来的情况”。测试完了再上生产，交给运维的小伙伴也是这样一个镜像，同样的运行同样的顺畅。这种模式使得软件的交付效率大大提高，可以一天发布多次。</p><p>第二就是弹性伸缩。</p><p>想象一下，你写了一个程序，平时用的人少，只需要10个副本就能够扛住了。突然有一天，要做促销，需要100个副本，另外90台机器创建出来相对比较容易，用任何一个云都可以做到，但是里面90个副本的应用如何部署呢？一个个上去手动部署吗？有了容器就方便多了，只要在每台机器上docker run一下就搞定了。</p><p>第三就是跨云迁移。</p><p>如果你不相信任何一个云，怕被一个云绑定，怕一个云挂了自己的应用也就挂了。那我们想一想，该怎么办呢？你只能手动在一个云上部署一份，在另外一个云上也部署一份。有了容器了之后，由于容器镜像对于云是中立的，你在这个云上docker run，就在这个云上提供服务，等哪天想用另一个云了，不用怕应用迁移不走，只要在另外一个云上docker run一下就解决了。</p><p>到现在，是不是能够感受到容器的集装箱功能了，这就是看起来隔离的作用。</p><p>你可能会问，多个容器运行在一台机器上，不会相互影响吗？如何限制CPU和内存的使用呢？</p><p>Docker本身提供了这样的功能。Docker可以限制对于CPU的使用，我们可以分几种的方式。</p><ul>\n<li>Docker允许用户为每个容器设置一个数字，代表容器的 CPU share，默认情况下每个容器的 share 是 1024。这个数值是相对的，本身并不能代表任何确定的意义。当主机上有多个容器运行时，每个容器占用的 CPU 时间比例为它的 share 在总额中的比例。Docker为容器设置CPU share 的参数是 -c --cpu-shares。</li>\n<li>Docker提供了 --cpus 参数可以限定容器能使用的 CPU 核数。</li>\n<li>Docker可以通过 --cpuset 参数让容器只运行在某些核上</li>\n</ul><p>Docker会限制容器内存使用量，下面是一些具体的参数。</p><ul>\n<li>-m --memory：容器能使用的最大内存大小。</li>\n<li>–memory-swap：容器能够使用的 swap 大小。</li>\n<li>–memory-swappiness：默认情况下，主机可以把容器使用的匿名页swap出来，你可以设置一个 0-100 之间的值，代表允许 swap 出来的比例。</li>\n<li>–memory-reservation：设置一个内存使用的 soft limit，如果 docker 发现主机内存不足，会执行 OOM (Out of Memory)操作。这个值必须小于 --memory 设置的值。</li>\n<li>–kernel-memory：容器能够使用的 kernel memory 大小。</li>\n<li>–oom-kill-disable：是否运行 OOM (Out of Memory)的时候杀死容器。只有设置了 -m，才可以把这个选项设置为 false，否则容器会耗尽主机内存，而且导致主机应用被杀死。</li>\n</ul><p>这就是用起来隔离的效果。</p><p>那这些看起来隔离和用起来隔离的技术，到内核里面是如何实现的呢？我们下一节仔细分析。</p><h2>总结时刻</h2><p>这里我们来总结一下这一节的内容。无论是容器，还是虚拟机，都依赖于内核中的技术，虚拟机依赖的是KVM，容器依赖的是namespace和cgroup对进程进行隔离。</p><p>为了运行Docker，有一个daemon进程Docker Daemon用于接收命令行。</p><p>为了描述Docker里面运行的环境和应用，有一个Dockerfile，通过build命令称为容器镜像。容器镜像可以上传到镜像仓库，也可以通过pull命令从镜像仓库中下载现成的容器镜像。</p><p>通过Docker run命令将容器镜像运行为容器，通过namespace和cgroup进行隔离，容器里面不包含内核，是共享宿主机的内核的。对比虚拟机，虚拟机在qemu进程里面是有客户机内核的，应用运行在客户机的用户态。</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/c5/5a499cb50a1b214a39ddf19cbb63dcc5.jpg?wh=1813*1783\" alt=\"\"></p><h2>课堂练习</h2><p>请你试着用Tomcat的容器镜像启动一个Java网站程序，并进行访问。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>","neighbors":{"left":{"article_title":"55 | 网络虚拟化：如何成立独立的合作部？","id":111686},"right":{"article_title":"57 | Namespace技术：内部创业公司应该独立运营","id":113692}},"comments":[{"had_liked":false,"id":207224,"user_name":"dwjwlxs","can_delete":false,"product_type":"c1","uid":1154932,"ip_address":"","ucode":"F0897B5AF9D5C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/74/d6a89648.jpg","comment_is_top":false,"comment_ctime":1587027444,"is_pvip":false,"replies":[{"id":"83918","content":"哈哈，那就多转发，还有分享费用","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1592458709,"ip_address":"","comment_id":207224,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35946765812","product_id":100024701,"comment_content":"这个课程卖99块真是太便宜了，应该卖999😂","like_count":8,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492050,"discussion_content":"哈哈，那就多转发，还有分享费用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592458709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120771,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564992554,"is_pvip":false,"replies":[{"id":"46360","content":"的确妙","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566297076,"ip_address":"","comment_id":120771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31629763626","product_id":100024701,"comment_content":"Docker使用宿主机的内核，通过cgroup和namespaces加上UnionFS来实现，真是的妙啊。","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461470,"discussion_content":"的确妙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124435,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1565883277,"is_pvip":false,"replies":[{"id":"46267","content":"对的，看来您对容器很熟悉，这里仅仅展示原理","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566280576,"ip_address":"","comment_id":124435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23040719757","product_id":100024701,"comment_content":"终于来一节不是那么深且比较熟悉的。弹性伸缩上 k8s 更好，顺带安利下张磊老师的 k8s 专栏，也是很不错的一个专栏。示例 dockerfile 的几行 RUN 命令好像用 &amp;&amp; 或 ；弄成一句更好，这样镜像的 UFS 可以少几层。","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463174,"discussion_content":"对的，看来您对容器很熟悉，这里仅仅展示原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180861,"user_name":"罗辑思维","can_delete":false,"product_type":"c1","uid":1318941,"ip_address":"","ucode":"D257A06EDE928E","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","comment_is_top":false,"comment_ctime":1582430857,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14467332745","product_id":100024701,"comment_content":"注：以下在ubuntu 18.04.4 LTS docke-ce:19.03.6操作成功<br>\t1.  docker pull tomcat #下载tomcat镜像<br>\t2. docker run -d -p 20000:8080 tomcat #运行tomcat镜像， 「-d 」是以后台方式运行；「-p  20000:8080」:20000是宿主机端口号，可以自定义；8080是tomcat服务端口号，默认是8080<br>如果用浏览访问宿主机IP，出现网页404，那么执行如下步骤3<br>\t3. docker exec -it 3cae48db60ee &#47;bin&#47;bash #3cae48db60ee是container id，用docker ps命令查询 <br>下面进到「tomcat container」操作<br>root@3cae48db60ee:&#47;usr&#47;local&#47;tomcat# rm -rf webapps<br>root@3cae48db60ee:&#47;usr&#47;local&#47;tomcat# mv webapps.dist webapps","like_count":3,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192887,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583109108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177768,"user_name":"小桌子","can_delete":false,"product_type":"c1","uid":1684581,"ip_address":"","ucode":"00E8CDEFBECBBF","user_header":"https://static001.geekbang.org/account/avatar/00/19/b4/65/71454201.jpg","comment_is_top":false,"comment_ctime":1581495548,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14466397436","product_id":100024701,"comment_content":"我一直想不通有了容器化之后，是不是可以完全替代虚拟化，他们的场景好像重叠，并且docker更有优势啊，虚拟化还有未来吗？","like_count":3,"discussions":[{"author":{"id":1155210,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/8a/69f4023c.jpg","nickname":"Dunbreak","note":"","ucode":"A64010733754BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345953,"discussion_content":"有，Docker做出来的容器化都是假隔离，容器内运行的程序看起来是隔离的，但是实际上是共享宿主机linux内核的，安全性堪忧。所以目前的使用方法都是轻量级虚拟机+容器的形式，比如阿里云的安全容器就是这样实现的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611822581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317416,"user_name":"GeekCoder","can_delete":false,"product_type":"c1","uid":1523315,"ip_address":"","ucode":"14BB73CBE28545","user_header":"","comment_is_top":false,"comment_ctime":1634789553,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5929756849","product_id":100024701,"comment_content":"docker中没有包含os部分，底层系统调用都是调用主机的，那比如我在linux最新版本制作了的一个镜像，用到了最新的系统调用A，而在旧版本LINUX中没有这个系统调用A，那么这个镜像可以在旧版本中可以运行吗？","like_count":1,"discussions":[{"author":{"id":1210029,"avatar":"https://static001.geekbang.org/account/avatar/00/12/76/ad/4c998423.jpg","nickname":"龙之魂","note":"","ucode":"D0C68901B3503B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572028,"discussion_content":"这也是我想问的，没想明白？假如容器中跑的是其他操作系统，比如Windows，相关的系统调用如何实现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652571726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130774,"user_name":"潘政宇","can_delete":false,"product_type":"c1","uid":1254758,"ip_address":"","ucode":"9A6658EE862D95","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/66/4835d92e.jpg","comment_is_top":false,"comment_ctime":1567533156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5862500452","product_id":100024701,"comment_content":"集装箱，20世纪最伟大的发明之一！！！","like_count":1},{"had_liked":false,"id":121980,"user_name":"卡斯瓦德","can_delete":false,"product_type":"c1","uid":1011332,"ip_address":"","ucode":"E944E5BC507D5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/84/45a909a6.jpg","comment_is_top":false,"comment_ctime":1565262154,"is_pvip":false,"replies":[{"id":"46337","content":"对的，不会讲这个了，内容太多，收不住了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566296092,"ip_address":"","comment_id":121980,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860229450","product_id":100024701,"comment_content":"貌似docker还有device-mapper技术吧，关于物理存储分配，这里会细讲吗？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462040,"discussion_content":"对的，不会讲这个了，内容太多，收不住了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566296092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354852,"user_name":"冬瓜蔡","can_delete":false,"product_type":"c1","uid":1117673,"ip_address":"浙江","ucode":"2F04A446D28201","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/e9/2f02a383.jpg","comment_is_top":false,"comment_ctime":1660821784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660821784","product_id":100024701,"comment_content":"文末这张图很赞","like_count":0},{"had_liked":false,"id":349518,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1656038118,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1656038118","product_id":100024701,"comment_content":"还有一个非常大的好处：统一应用的环境！避免运维手动操作导致某些中间件&#47;环境配置不一致！","like_count":0,"discussions":[{"author":{"id":1657276,"avatar":"https://static001.geekbang.org/account/avatar/00/19/49/bc/3ea23054.jpg","nickname":"胡淘尘","note":"","ucode":"8C8222F73C7B4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578424,"discussion_content":"活捉一只小鳄鱼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656731806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339503,"user_name":"herongwei","can_delete":false,"product_type":"c1","uid":1153928,"ip_address":"","ucode":"E4158BF7AD2E70","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/88/34c171f1.jpg","comment_is_top":false,"comment_ctime":1648137100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648137100","product_id":100024701,"comment_content":"老师讲的课非常认真，下了班回到家连看三节不知不觉已经深夜","like_count":0},{"had_liked":false,"id":232494,"user_name":"外国肉夹馍","can_delete":false,"product_type":"c1","uid":1131027,"ip_address":"","ucode":"00BADDCFEA92B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/13/860e176a.jpg","comment_is_top":false,"comment_ctime":1594018693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594018693","product_id":100024701,"comment_content":"思考题：<br>先pull一个tomcat镜像，这里选用8.5的：<br>docker pull tomcat:8.5<br>pull下来后，运行自己的war包有两种方式：<br>1.基于tomcat:8.5的镜像，写一个DockerFile，把war包拷贝进去，buildy一个专属镜像，运行<br>2.直接通过命令运行<br>我用的是第二种：<br>docker run -v &#47;xxx&#47;xxx.war:&#47;usr&#47;local&#47;tomcat&#47;webapps&#47;xxx.war -it -p 9090:8080 tomcat:8.5","like_count":0},{"had_liked":false,"id":232474,"user_name":"外国肉夹馍","can_delete":false,"product_type":"c1","uid":1131027,"ip_address":"","ucode":"00BADDCFEA92B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/13/860e176a.jpg","comment_is_top":false,"comment_ctime":1594014590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594014590","product_id":100024701,"comment_content":"老师我想问下如果是macos上跑docker，比如运行一个ubuntu的镜像，还是共享宿主机内核吗？感觉应该不是吧？是否也是用到了类似KVM的虚拟化技术？","like_count":0},{"had_liked":false,"id":214781,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1588818197,"is_pvip":false,"replies":[{"id":"83477","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1592186795,"ip_address":"","comment_id":214781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588818197","product_id":100024701,"comment_content":"docker run -d 中 官方文档的解释 是detach的short command， https:&#47;&#47;docs.docker.com&#47;engine&#47;reference&#47;run&#47;#detached--d","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494200,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199649,"user_name":"是Coding少女啊","can_delete":false,"product_type":"c1","uid":1915322,"ip_address":"","ucode":"BFBDCE002D0E86","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/ba/631a128a.jpg","comment_is_top":false,"comment_ctime":1585493181,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585493181","product_id":100024701,"comment_content":"“当程序员根据产品设计开发完毕之后，可以将代码连同运行环境打包成一个容器镜像。接下来，无论是在开发环境、测试环境，还是生产环境运行代码，都可以使用相同的镜像。”<br><br>我想问下，如果测试过程中发现问题，是需要开发工程师重新修改代码打包一个新的镜像吗？镜像可以只包括运行的环境而不包括测试的脚本吗，就是docker build好镜像，然后docker run -it进入到容器中，运行测试代码。这个时候如果代码有问题，是可以直接修改代码，不需要再重新打包一个镜像对吗？请老师指教～","like_count":0,"discussions":[{"author":{"id":2037522,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/YbUxEV3741vKZAiasOXggWucQbmicJwIjg3HDE58oyibYXbSop9QQFqZ7X6OhynDoo6rDHwzK8njSeJjN9hx3pJXg/132","nickname":"黄堃健","note":"","ucode":"B4AD5250A41B3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368132,"discussion_content":"需要重新打包 docker build","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618577025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128764,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1284205,"ip_address":"","ucode":"74AAAD6F84A1F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/6d/25823bf0.jpg","comment_is_top":false,"comment_ctime":1566959086,"is_pvip":false,"replies":[{"id":"48759","content":"调用底层都是通过统一的系统调用","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567494512,"ip_address":"","comment_id":128764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566959086","product_id":100024701,"comment_content":"大侠好，请问下 按照架构图，docker中没有OS这么一部分的么，但是为何任意的基础镜像中都有linux，还有就是docker是如何和系统共享内核的呀。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465093,"discussion_content":"调用底层都是通过统一的系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567494512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}