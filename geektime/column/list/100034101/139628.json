{"id":139628,"title":"18 | 移进和规约：用LR算法推演一个实例","content":"<p>到目前为止，我们所讨论的语法分析算法，都是自顶向下的。与之相对应的，是自底向上的算法，比如本节课要探讨的LR算法家族。</p><p>LR算法是一种自底向上的算法，它能够支持更多的语法，而且没有左递归的问题。第一个字母L，与LL算法的第一个L一样，代表从左向右读入程序。第二个字母R，指的是RightMost（最右推导），也就是在使用产生式的时候，是从右往左依次展开非终结符。例如，对于“add-&gt;add+mul”这样一个产生式，是优先把mul展开，然后再是add。在接下来的讲解过程中，你会看到这个过程。</p><p>自顶向下的算法，是递归地做模式匹配，从而逐步地构造出AST。那么自底向上的算法是如何构造出AST的呢？答案是用移进-规约的算法。</p><p>本节课，我就带你通过移进-规约方法，自底向上地构造AST，完成语法的解析。接下来，我们先通过一个例子看看自底向上语法分析的过程。</p><h2>通过实例了解自底向上语法分析的过程</h2><p>我们选择熟悉的语法规则：</p><pre><code>add -&gt; mul\nadd -&gt; add + mul\nmul -&gt; pri\nmul -&gt; mul * pri  \npri -&gt; Int | (add)\n</code></pre><p>然后来解析“2+3*5”这个表达式，AST如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/70/1ba6be3467aab986c181203f82dbb670.jpg?wh=1142*718\" alt=\"\"></p><p>我们分步骤看一下解析的具体过程。</p><p>第1步，看到第一个Token，是Int，2。我们把它作为AST的第一个节点，同时把它放到一个栈里（就是图中红线左边的部分）。这个栈代表着正在处理的一些AST节点，把Token移到栈里的动作叫做<strong>移进（Shift）。</strong></p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/00/2c/00a3c4a21899375d98869b6a8af5672c.jpg?wh=1142*381\" alt=\"\"></p><p>第2步，根据语法规则，Int是从pri推导出来的（pri-&gt;Int），那么它的上级AST肯定是pri，所以，我们给它加了一个父节点pri，同时，也把栈里的Int替换成了pri。这个过程是语法推导的逆过程，叫做<strong>规约（Reduce）。</strong></p><p>Reduce这个词你在学Map-Reduce时可能接触过，它相当于我们口语化的“倒推”。具体来讲，它是从工作区里倒着取出1到n个元素，根据某个产生式，组合出上一级的非终结符，也就是AST的上级节点，然后再放进工作区（也就是竖线的左边）。</p><p>这个时候，栈里可能有非终结符，也可能有终结符，它仿佛是我们组装AST的一个工作区。竖线的右边全都是Token（也就是终结符），它们在等待处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/64/c8/6499b8cfec0a4b6fdc5e18a47a9cc6c8.jpg?wh=1142*500\" alt=\"\"></p><p>第3步，与第2步一样，因为pri只能是mul推导出来的，产生式是“mul-&gt;pri”，所以我们又做了一次规约。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/c5/48db9c66da05591080355ce918af14c5.jpg?wh=1142*804\" alt=\"\"></p><p>第4步，我们根据“add-&gt;mul”产生式，将mul规约成add。至此，我们对第一个Token做了3次规约，已经到头了。这里为什么做规约，而不是停在mul上，移进+号，是有原因的。因为没有一个产生式，是mul后面跟+号，而add后面却可以跟+号。</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/05/fa907d7b0b0101253f59b5168c2e6e05.jpg?wh=1142*851\" alt=\"\"></p><p>第5步，移进+号。现在栈里有两个元素了，分别是add和+。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/e5/915a18c729b913a740b736c8f35f47e5.jpg?wh=1142*898\" alt=\"\"></p><p>第6步，移进Int，也就是数字3。栈里现在有3个元素。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/b5/68ce20f1aa631cf16c14abe5923594b5.jpg?wh=1142*793\" alt=\"\"></p><p>第7到第8步，Int规约到pri，再规约到mul。</p><p>到目前为止，我们做规约的方式都比较简单，就是对着栈顶的元素，把它反向推导回去。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/67/4699dbc9c29ca3a0914d3dc2fab19767.jpg?wh=1142*882\" alt=\"\"></p><p>第9步，我们面临3个选择，比较难。</p><p>第一个选择是继续把mul规约成add，第二个选择是把“add+mul”规约成add。这两个选择都是错误的，因为它们最终无法形成正确的AST。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/dd/068a542af8005f7ab6d0a30c6ad711dd.jpg?wh=1142*578\" alt=\"\"></p><p>第三个选择，也就是按照“mul-&gt;mul*pri”，继续移进 *号 ，而不是做规约。只有这样，才能形成正确的AST，就像图中的虚线。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/3b/819a522455602cf54818fc7a9c81b33b.jpg?wh=1142*946\" alt=\"\"></p><p>第10步，移进Int，也就是数字5。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/20/d1c83146b3bda9f13b14148eee0e5520.jpg?wh=1142*785\" alt=\"\"></p><p>第11步，Int规约成pri。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/77/818bd7df8fea9c91a4f67629822f3177.jpg?wh=1142*853\" alt=\"\"></p><p>第12步，mul*pri规约成mul。</p><p>注意，这里也有两个选择，比如把pri继续规约成mul。但它显然也是错误的选择。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/92/16dddb819a554e55e092388f0c649c92.jpg?wh=1142*900\" alt=\"\"></p><p>第13步，add+mul规约成add。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/54/9a64d2d45f860d727d69ce980b071a54.jpg?wh=1142*887\" alt=\"\"></p><p>至此，我们就构建完成了一棵正确的AST，并且，栈里也只剩下了一个元素，就是根节点。</p><p>整个语法解析过程，实质是<strong>反向最右推导（Reverse RightMost Derivation）。</strong>什么意思呢？如果把AST节点根据创建顺序编号，就是下面这张图呈现的样子，根节点编号最大是13：</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/59/f2f85727e7c4787d00f0c60d08c0d159.jpg?wh=1142*696\" alt=\"\"></p><p>但这是规约的过程，如果是从根节点开始的推导过程，顺序恰好是反过来的，先是13号，再是右子节点12号，再是12号的右子节点11号，以此类推。我们把这个最右推导过程写在下面：</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/3d/c46ca0a9766ee1ee87869fc2e92e313d.jpg?wh=1142*802\" alt=\"\"></p><p>在语法解析的时候，我们是从底下反推回去，所以叫做反向的最右推导过程。从这个意义上讲，LR算法中的R，带有反向（Reverse）和最右（Reightmost）这两层含义。</p><p>在最右推导过程中，我加了下划线的部分，叫做一个<strong>句柄（Handle）</strong>。句柄是一个产生式的右边部分，以及它在一个右句型（最右推导可以得到的句型）中的位置。以最底下一行为例，这个句柄“Int”是产生式“pri-&gt;Int”的右边部分，它的位置是句型“Int + Int * Int”的第一个位置。</p><p>简单来说，句柄，就是产生式是在这个位置上做推导的，如果需要做反向推导的话，也是从这个位置去做规约。</p><p>针对这个简单的例子，我们可以用肉眼进行判断，找到正确的句柄，做出正确的选择。不过，要把这种判断过程变成严密的算法，做到在每一步都采取正确的行动，知道该做移进还是规约，做规约的话，按照哪个产生式，这就是LR算法要解决的核心问题了。</p><p>那么，如何找到正确的句柄呢？</p><h2>找到正确的句柄</h2><p>我们知道，最右推导是从最开始的产生式出发，经过多步推导（多步推导记做-&gt;*），一步步形成当前的局面 （也就是左边栈里有一些非终结符和终结符，右边还可以预看1到k个Token）。</p><pre><code>add -&gt;* 栈 | Token\n</code></pre><p>我们要像侦探一样，根据手头掌握的信息，反向推导出这个多步推导的路径，从而获得正确的句柄。我们依据的是左边栈里的信息，以及右边的Token串。对于LR(0)算法来说，我们只依据左边的栈，就能找到正确的句柄，对于LR(1)算法来说，我们可以从右边预看一个Token。</p><p>我们的思路是根据语法规则，复现这条推导路径。以第8步为例，下图是它的推导过程，橙色的路径是唯一能够到达第8步的路径。知道了正向推导的路径，自然知道接下来该做什么，在第8步，我们正确的选择是做移进。</p><p><img src=\"https://static001.geekbang.org/resource/image/09/25/0958e017881e271edbc1362034425825.jpg?wh=1142*665\" alt=\"\"></p><p>为了展示这个推导过程，我引入了一个新概念：<strong>项目（Item）。</strong></p><p>Item代表带有“.”符号的产生式。比如“pri-&gt;(add)”可以产生4个Item，“.”分别在不同的位置。“.”可以看做是前面示意图中的竖线，左边的看做已经在栈里的部分，“.”右边的看做是期待获得的部分：</p><pre><code>pri-&gt;.(add)\npri-&gt;(.add)\npri-&gt;(add.)\npri-&gt;(add).\n</code></pre><p>上图其实是一个NFA，利用这个NFA，我们表达了所有可能的推导步骤。每个Item（或者状态），在接收到一个符号的时候，就迁移到下一个状态，比如“add-&gt;.add+mul”在接收到一个add的时候，就迁移到“add-&gt;add.+mul”，再接收到一个“+”，就迁移到“add-&gt;add+.mul”。</p><p>在这个状态图的左上角，我们用一个辅助性的产生式“start-&gt;add”，作为整个NFA的唯一入口。从这个入口出发，可以用这个NFA来匹配栈里内容，比如在第8步的时候，栈以及右边下一个Token的状态如下，其中竖线左边是栈的内容：</p><pre><code>add + mul | *\n</code></pre><p>在NFA中，我们从start开始遍历，基于栈里的内容，能找到图中橙色的多步推导路径。在这个状态迁移过程中，导致转换的符号分别是“ε、add、+、ε、mul”，忽略其中的ε，就是栈里的内容。</p><p>在NFA中，我们查找到的Item是“mul-&gt;mul.*pri”。这个时候“.”在Item的中间。因此下一个操作只能是一个Shift操作，也就是把下一个Token，*号，移进到栈里。</p><p>如果“.”在Item的最后，则对应一个规约操作，比如在第12步，栈里的内容是：</p><pre><code>add + mul | $    //$代表Token串的结尾\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/4d/62/4dc5366506b8884d7af97b62fbaade62.jpg?wh=1142*673\" alt=\"\"></p><p>这个时候的Item是“add-&gt;add+mul.”。对于所有点符号在最后面的Item，我们已经没有办法继续向下迁移了，这个时候需要做一个规约操作，也就是基于“add + mul”规约到add，也就是到“add-&gt;.add+mul”这个状态。对于任何的ε转换，其逆向操作也是规约，比如图中从“add-&gt;.add+mul”规约到“start-&gt;.add”。</p><p>但做规约操作之前，我们仍然需要检查后面跟着的Token，是不是在Follow(add)中。对于add来说，它的Follow集合包括{$ + ）}。如果是这些Token，那就做规约。否则，就报编译错误。</p><p>所以，现在清楚了，我们能通过这个有限自动机，跟踪计算出正确的推导过程。</p><p>当然了，在<a href=\"https://time.geekbang.org/column/article/137286\">16讲</a>里，我提到每个NFA都可以转换成一个DFA。所以，你可以直接在上面的NFA里去匹配，也可以把NFA转成DFA，避免NFA的回溯现象，让算法效率更高。转换完毕的DFA如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/f4/a7cc157aca99e16e50b62011848d0af4.jpg?wh=1142*890\" alt=\"\"></p><p>在这个DFA中，我同样标注了在第8步时的推导路径。</p><p>为了更清晰地理解LR算法的本质，我们基于这个DFA再把语法解析的过程推导一遍。</p><p>第1步，移进一个Int，从状态1迁移到9。Item是“pri-&gt;Int.”。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/b3/8d3595409dc45886c36368621ad549b3.jpg?wh=1142*305\" alt=\"\"></p><p>第2步，依据“pri-&gt;Int”做规约，从状态9回到状态1。因为现在栈里有个pri元素，所以又迁移进了状态8。</p><p><img src=\"https://static001.geekbang.org/resource/image/69/ed/69c24bc62939a114dc6bc922d63011ed.jpg?wh=1142*296\" alt=\"\"></p><p>第3步，依据“mul-&gt;pri”做规约，从状态8回到状态1，再根据栈里的mul元素进入状态7。<strong>注意，</strong>在状态7的时候，下一步的走向有两个可能的方向，分别是“add-&gt;mul.”和“mul-&gt;mul.*pri”这两个Item代表的方向。</p><p>基于“add-&gt;mul.”会做规约，而基于“mul-&gt;mul.*pri”会做移进，这就需要看看后面的Token了。如果后面的Token是 *号，那其实要选第二个方向。但现在后面是+号，所以意味着这里只能做规约。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/cf/9ea1bbad681f1b23d83b6c8bb65feecf.jpg?wh=1142*322\" alt=\"\"></p><p>第4步，依据“add-&gt;mul”做规约，从状态7回到状态1，再依据add元素进入状态2。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/4e/a618509b0c0c96f8705b6016f9aeb04e.jpg?wh=1142*270\" alt=\"\"></p><p>第5步，移进+号。这对应状态图上的两次迁移，首先根据栈里的第一个元素add，从1迁移到2。然后再根据“+”，从2到3。Item的变化是：</p><blockquote>\n<p>状态1：start-&gt;.add<br>\n状态1：add-&gt;.add+mul<br>\n状态2：add-&gt;add.+mul<br>\n状态3：add-&gt;add+.mul</p>\n</blockquote><p>你看，通过移进这个加号，我们实际上知道了这个表达式顶部必然有一个“add+mul”的结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/22/5237305c41a308914748b62a60829d22.jpg?wh=1142*304\" alt=\"\"></p><p>第6到第8步，移进Int，并一直规约到mul。状态变化是先从状态3到状态9，然后回到状态3，再进到状态4。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/e1/aa333e0cb2a6483f0850f37bb7c01fe1.jpg?wh=1142*305\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/92/bd/923202cc491e8958f5d38ae1a76af7bd.jpg?wh=1142*297\" alt=\"\"></p><p>第9步，移进一个*。根据栈里的元素，迁移路径是1-&gt;2-&gt;3-&gt;4-&gt;5。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/58/73d05c03c8d29f8c69b8e611696eec58.jpg?wh=1142*287\" alt=\"\"></p><p>第10步，移进Int，进入状态9。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/87/7f0b98204bf0a19341acad593cb28987.jpg?wh=1142*321\" alt=\"\"></p><p>第11步，根据“pri-&gt;Int”规约到pri，先退回到状态5，接着根据pri进入状态6。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/a9/f51998b10db36da51129a3a8332d7fa9.jpg?wh=1142*282\" alt=\"\"></p><p>第12步，根据“mul-&gt;mul*pri”规约到mul，从而退回到状态4。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/ea/b8275d44114195013807b3c9b3148dea.jpg?wh=1142*271\" alt=\"\"></p><p>第13步，根据“add-&gt;add+mul”规约到add，从而退回到状态2。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/35/8c65fdb023f39abcfe0311e76f722635.jpg?wh=1142*313\" alt=\"\"></p><p>从状态2再根据“start-&gt;add”再规约一步，就变成了start，回到状态1，解析完成。</p><p>现在我们已经对整个算法的整个执行过程建立了直觉认知。如果想深入掌握LR算法，我建议你把这种推导过程多做几遍，自然会了然于胸。建立了直觉认知以后，接下来，我们再把LR算法的类型和实现细节讨论一下。</p><h2>LR解析器的类型和实现</h2><p>LR算法根据能力的强弱和实现的复杂程度，可以分成多个级别，分别是LR(0)、SLR(k)（即简单LR）、LALR(k)（Look ahead LR）和LR(k)，其中k表示要在Token队列里预读k个Token。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/69/76bb2ef4002f8e207c229978931b2669.jpg?wh=1142*609\" alt=\"\"></p><p>我来讲解一下这四种类型算法的特点，便于你选择和使用。</p><p><strong>LR(0)不需要预看右边的Token，仅仅根据左边的栈就能准确进行反向推导。</strong>比如，前面DFA中的状态8只有一个Item：“mul-&gt;pri.”。如果处在这个状态，那接下来操作是规约。假设存在另一个状态，它也只有一个Item，点符号不在末尾，比如“mul-&gt;mul.*pri”，那接下来的操作就是移进，把下一个输入放到栈里。</p><p>但实际使用的语法规则很少有这么简单的。所以LR(0)的表达能力太弱，能处理的语法规则有限，不太有实用价值。就像在前面的例子中，如果我们不往下预读一个Token，仅仅利用左边工作区的信息，是找不到正确的句柄的。</p><p>比如，在状态7中，我们可以做两个操作：</p><ul>\n<li>对于第一个Item，“add-&gt;mul.”，需要做一个规约操作。</li>\n<li>对于第二个Item，“mul-&gt;mul.*pri”，实际上需要做一个移进操作。</li>\n</ul><p>这里发生的冲突，就叫做“移进/规约”冲突（Shift/Reduce Conflict）。意思是，又可以做移进，又可以做规约，到底做哪个？对于状态7来说，到底做哪个操作，实际上取决于右边的Token。</p><p><strong>SLR（Simple LR）是在LR(0)的基础上做了增强。</strong>对于状态7的这种情况，我们要加一个判断条件：右边下一个输入的Token，是不是在add的Follow集合中。因为只有这样，做规约才有意义。</p><p>在例子中，add的Follow集合是{+ ) $}。如果不在这个范围内，那么做规约肯定是不合法的。因为Follow集合的意思，就是哪些Token可以出现在某个非终结符后面。所以，如果在状态7中，下一个Token是*，它不在add的Follow集合中，那么我们就只剩了一个可行的选择，就是移进。这样就不存在两个选择，也不存在冲突。</p><p>实际上，就我们本讲所用的示例语法而言，SLR就足够了，但是对于另一些更复杂的语法，采用SLR仍然会产生冲突，比如：</p><pre><code>start -&gt; exp\nexp -&gt; lvalue = rvalue\nexp -&gt; rvalue\nlvalue -&gt; Id\nlvalue -&gt; *rvalue\nrvalue -&gt; lvalue\n</code></pre><p>这个语法说的是关于左值和右值的情况，我们曾在语义分析的时候说过。在这个语法里，右值只能出现在赋值符号右边。</p><p>在状态2，如果下一个输入是“=”，那么做移进和规约都是可以的。因为“=”在rvalue的Follow集合中。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/cd/0cf9a256a0fc6b4681de8381e4cdb9cd.jpg?wh=1142*427\" alt=\"\"></p><p>怎么来处理这种冲突呢？仅仅根据Follow集合来判断是否Reduce，不太严谨。因为在上图状态2的情况下，即使后面跟着的是“=”，我们仍然不能做规约。因为你一规约，就成了一个右值，但它在等号的左边，显然是跟我们的语法定义冲突的。</p><p>办法是Follow集合拆了，把它的每个成员都变成Item的一部分。这样我们就能做更细致的判断。如下图所示，这样细化以后，我们发现在状态2中，只有下一个输入是“$”的时候，才能做规约。这就是LR(1)算法的原理，它更加强大。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/cb/5baeddc5b854173b1ec2a4c5bdef33cb.jpg?wh=1142*730\" alt=\"\"></p><p>但LR(1)算法也有一个缺点，就是DFA可能会很大。在语法分析阶段，DFA的大小会随着语法规则的数量呈指数级上升，一个典型的语言的DFA状态可能达到上千个，这会使语法分析的性能很差，从而也丧失了实用性。</p><p><strong>LALR(k)是基于这个缺点做的改进。</strong>它用了一些技巧，能让状态数量变得比较少，但处理能力没有太大的损失。YACC和Bison这两个工具，就是基于LALR(1)算法的。</p><h2>课程小结</h2><p>今天，我们讲了自底向上的LR算法的原理，包括移进-规约，如何寻找正确的句柄，如果基于NFA和DFA决定如何做移进和规约。</p><p>LR算法是公认的比较难学的一个算法。好在我们已经在前两讲给它做了技术上的铺垫了，包括NFA和DFA，First和Follow集合。这节课我们重点在于建立直观理解，特别是如何依据栈里的信息做正确的反推。这个直觉认知很重要，建立这个直觉的最好办法，就是像本节课一样，根据实例来画图、推导。这样，在你真正动手写算法的时候，就胸有成竹了！</p><p>到今天为止，我们已经把前端技术中的关键算法都讲完了。<strong>不过我还是想强调一下，</strong>如果想真正掌握这些算法，必须动手实现一下才行，勤动手才是王道。</p><h2>一课一思</h2><p>在讲自顶向下的算法时，我提到，递归思维是重要的计算机科学思维方式。而自底向上的方法，也是另一种重要的思维方式。那么，请结合你的经验，思考一下在你的领域内，是否有一些问题，用自底向上的方法能更好地解决。LR算法的移进-规约思想，能否在解决其他自底向上的问题中发挥作用？欢迎在留言区分享你的经验和思考。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p>本节课的示例代码我放在了文末，供你参考。</p><ul>\n<li>lab/16-18（算法篇的示例代码）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/tree/master/lab/16-18\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/tree/master/lab/16-18\">GitHub</a></li>\n<li>LLParser.java（LL算法的语法解析器）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/LRParser.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/16-18/src/main/java/play/parser/LRParser.java\">GitHub</a></li>\n</ul><p></p>","comments":[{"had_liked":false,"id":215333,"user_name":"locke.wei","can_delete":false,"product_type":"c1","uid":1351535,"ip_address":"","ucode":"58C70AC52A0C84","user_header":"https://static001.geekbang.org/account/avatar/00/14/9f/6f/aee1732a.jpg","comment_is_top":false,"comment_ctime":1588954526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27358758302","product_id":100034101,"comment_content":"在状态 2，如果下一个输入是“=”，那么做移进和规约都是可以的。因为“=”在 rvalue 的 Follow 集合中。<br>这里我理解&quot;=&quot;应该是lvalue的follow集合？","like_count":6},{"had_liked":false,"id":136362,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1569415921,"is_pvip":false,"replies":[{"id":"53939","content":"LALR(1)比LR(1)的性能要高。实际上，它是LR家族中比较优秀的一个算法了，所以实用度已经比较高，这也是yacc和bison用它的原因。<br><br>我再看看文稿，是不是我有什么地方表达得不清楚，引起了你的误解。<br><br>另外，我补充几点：<br>1.就算是LR(1)算法，在处理现代语言的一些语法特征时（泛型、Lamda等），也会产生很多冲突（移进-规约冲突，规约-规约冲突）。所以，用yacc和bison，可以支持实现比较简单的语法，但到了更加复杂的语法，就不够了。<br>2.GLR是很多人关注的一个LR家族的算法，具有处理冲突的能力。<br>3.我们课程中讲的单一的算法，无论是LL的还是LR的，在处理复杂的语法时都不够。有语法处理能力的原因，也有处理错误信息方面的考虑。所以，生产环境中支持比较复杂语法的编译器，都不会这么的单线条。GCC之前用过LALR，现在改为纯手写的基于递归下降的（如果我没记错的话...）了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570718261,"ip_address":"","comment_id":136362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14454317809","product_id":100034101,"comment_content":"既然LALR(1)有性能低的缺点，那为什么yacc和bison还使用它呢？用yacc和bison生成的语法分析器性能差的话，为什么还有这么多人用？","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468591,"discussion_content":"LALR(1)比LR(1)的性能要高。实际上，它是LR家族中比较优秀的一个算法了，所以实用度已经比较高，这也是yacc和bison用它的原因。\n\n我再看看文稿，是不是我有什么地方表达得不清楚，引起了你的误解。\n\n另外，我补充几点：\n1.就算是LR(1)算法，在处理现代语言的一些语法特征时（泛型、Lamda等），也会产生很多冲突（移进-规约冲突，规约-规约冲突）。所以，用yacc和bison，可以支持实现比较简单的语法，但到了更加复杂的语法，就不够了。\n2.GLR是很多人关注的一个LR家族的算法，具有处理冲突的能力。\n3.我们课程中讲的单一的算法，无论是LL的还是LR的，在处理复杂的语法时都不够。有语法处理能力的原因，也有处理错误信息方面的考虑。所以，生产环境中支持比较复杂语法的编译器，都不会这么的单线条。GCC之前用过LALR，现在改为纯手写的基于递归下降的（如果我没记错的话...）了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570718261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294544,"user_name":"minghu6","can_delete":false,"product_type":"c1","uid":1050269,"ip_address":"","ucode":"F44058E21B14C9","user_header":"","comment_is_top":false,"comment_ctime":1621995105,"is_pvip":false,"replies":[{"id":"106914","content":"我的bitbucket账号不允许看你的页面。<br>“We can&#39;t let you see this page”...<br>奇怪！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1622031050,"ip_address":"","comment_id":294544,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10211929697","product_id":100034101,"comment_content":"用Rust写了一个完整demo: https:&#47;&#47;bitbucket.org&#47;minghu6code&#47;alg-parser&#47;src&#47;master&#47;","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520706,"discussion_content":"我的bitbucket账号不允许看你的页面。\n“We can&amp;#39;t let you see this page”...\n奇怪！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622031050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050269,"avatar":"","nickname":"minghu6","note":"","ucode":"F44058E21B14C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379233,"discussion_content":"还没法儿回复作者回复......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623763774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050269,"avatar":"","nickname":"minghu6","note":"","ucode":"F44058E21B14C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379232,"discussion_content":"我的问题, 仓库默认的private设置没有取消,现在好了.\n这个写的还挺有意思的,结合Rust宏和enum类型,对parser这块儿的算法都做了探索, 其中LL的还有一个解析PlayScript 语言的实例.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623763732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343947,"user_name":"！","can_delete":false,"product_type":"c1","uid":2916501,"ip_address":"","ucode":"9C90F33B43177C","user_header":"https://static001.geekbang.org/account/avatar/00/2c/80/95/00354621.jpg","comment_is_top":false,"comment_ctime":1651136234,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5946103530","product_id":100034101,"comment_content":"是不是我太菜了，算法开始就看不懂了","like_count":1,"discussions":[{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570063,"discussion_content":"我也看不懂= =，特别是总不能和之前的知识点结合起来，感觉就像空中楼阁一样，没法留下记忆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651652377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147041,"user_name":"余晓飞","can_delete":false,"product_type":"c1","uid":1007370,"ip_address":"","ucode":"EEC632FF776327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/0a/7f9c476b.jpg","comment_is_top":false,"comment_ctime":1572773553,"is_pvip":false,"replies":[{"id":"77081","content":"C语言。<br>左值，代表可以放在赋值符号左边的值，在编译器内部，要把它解析成一个地址，这样才能修改值。<br>右值，就是一般意义上的值，比如一个整形字面量。<br><br>&quot;a = 10 * 2;&quot;  这个表达式中，a是左值，编译器会把它编译成一个内存地址（或寄存器），而10、2、10*2都是右值。<br><br>lvalue -&gt; *rvalue : 是取某个右值的地址，也就是一个指针。通过这个指针，可以改变其值。<br>rvalue -&gt; lvalue：意思是左值是可以用在需要右值的地方（但反过来是不行的）。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586853897,"ip_address":"","comment_id":147041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867740849","product_id":100034101,"comment_content":"<br>start -&gt; exp<br>exp -&gt; lvalue = rvalue<br>exp -&gt; rvalue<br>lvalue -&gt; Id<br>lvalue -&gt; *rvalue<br>rvalue -&gt; lvalue<br><br>对这里最后两行的产生式不太理解，请问有对应哪种具体语言的语法吗？","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473110,"discussion_content":"C语言。\n左值，代表可以放在赋值符号左边的值，在编译器内部，要把它解析成一个地址，这样才能修改值。\n右值，就是一般意义上的值，比如一个整形字面量。\n\n&amp;quot;a = 10 * 2;&amp;quot;  这个表达式中，a是左值，编译器会把它编译成一个内存地址（或寄存器），而10、2、10*2都是右值。\n\nlvalue -&amp;gt; *rvalue : 是取某个右值的地址，也就是一个指针。通过这个指针，可以改变其值。\nrvalue -&amp;gt; lvalue：意思是左值是可以用在需要右值的地方（但反过来是不行的）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586853897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135561,"user_name":"ZYS","can_delete":false,"product_type":"c1","uid":1632751,"ip_address":"","ucode":"B91657BD8D8E60","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/ef/d4587970.jpg","comment_is_top":false,"comment_ctime":1569212907,"is_pvip":false,"replies":[{"id":"52073","content":"GCC用过LR，后来用手写的递归下降算法取代了。Clang也是用的手写的递归下降算法。<br>这说明，递归下降算法真的还是很有实用价值的:-)<br>用手写代码的好处，是随时可以Hack。就像我们在解决手写实现左结合的时候，就是在做hack。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1569295599,"ip_address":"","comment_id":135561,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864180203","product_id":100034101,"comment_content":"宫老师这个课件做的真棒👍，GCC语法分析用的是LR分析器么？Clang用的是什么语法分析器","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468247,"discussion_content":"GCC用过LR，后来用手写的递归下降算法取代了。Clang也是用的手写的递归下降算法。\n这说明，递归下降算法真的还是很有实用价值的:-)\n用手写代码的好处，是随时可以Hack。就像我们在解决手写实现左结合的时候，就是在做hack。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569295599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632751,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/ef/d4587970.jpg","nickname":"ZYS","note":"","ucode":"B91657BD8D8E60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22728,"discussion_content":"宫老师可以考虑开一门各大开源编译器源码剖析的课程，视频效果会好很多，要是能现场授课，比如周末开课讲也是最好，这类的培训感觉很少的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569676182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359307,"user_name":"温雅小公子","can_delete":false,"product_type":"c1","uid":2260390,"ip_address":"河北","ucode":"9EA63E36D7C85C","user_header":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","comment_is_top":false,"comment_ctime":1665403413,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1665403413","product_id":100034101,"comment_content":"把follow集合拆解是怎么做的？","like_count":0},{"had_liked":false,"id":311540,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1631275445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631275445","product_id":100034101,"comment_content":"动态规划就是自底向上逐级推导","like_count":0},{"had_liked":false,"id":305553,"user_name":"Amy","can_delete":false,"product_type":"c1","uid":1665945,"ip_address":"","ucode":"57FCCBA2C34B67","user_header":"https://static001.geekbang.org/account/avatar/00/19/6b/99/fbd95198.jpg","comment_is_top":false,"comment_ctime":1628044595,"is_pvip":false,"replies":[{"id":"111007","content":"收到！感谢！我让小编同学改一下！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628644653,"ip_address":"","comment_id":305553,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628044595","product_id":100034101,"comment_content":"一个小typo：<br>LR 算法中的 R，带有反向（Reverse）和最右（Reightmost）这两层含义。<br>s&#47;Reightmost&#47;Rightmost","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524428,"discussion_content":"收到！感谢！我让小编同学改一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628644653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258303,"user_name":"lion_fly","can_delete":false,"product_type":"c1","uid":1060242,"ip_address":"","ucode":"FCFD6B66C01B83","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","comment_is_top":false,"comment_ctime":1604377026,"is_pvip":false,"replies":[{"id":"94527","content":"算法部分会有点抽象。多用图形化的方法做实例的推演，有助于你深入理解编译器的运行机制。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1604999350,"ip_address":"","comment_id":258303,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1604377026","product_id":100034101,"comment_content":"mark一下，算法篇趟过去了","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508612,"discussion_content":"算法部分会有点抽象。多用图形化的方法做实例的推演，有助于你深入理解编译器的运行机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604999350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060242,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","nickname":"lion_fly","note":"","ucode":"FCFD6B66C01B83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325288,"discussion_content":"嗯嗯，非常感谢老师，这种方式让我对算法的知识理解的更深入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605262667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142159,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1349270,"ip_address":"","ucode":"72252157268A12","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/J3dqALgicfVklewMjVkpyLbTk9YiamnBf5QQZ3NPHGlMeVSdLDB5yHLicEZHKBbUets76KOFwbl9ju0xJw1VeGa1A/132","comment_is_top":false,"comment_ctime":1571301596,"is_pvip":false,"replies":[{"id":"57703","content":"用状态2中的第一个产生式：start-&gt;add.","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573447285,"ip_address":"","comment_id":142159,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571301596","product_id":100034101,"comment_content":"老师，不理解第 13 步，根据“add-&gt;add+mul”规约到 add<br>为什么会回到状态 2<br>状态2中“add-&gt;add.+mul”点号不是在中间吗，状态1的点号在开始","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471011,"discussion_content":"用状态2中的第一个产生式：start-&amp;gt;add.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573447285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136382,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1569419596,"is_pvip":false,"replies":[{"id":"53935","content":"那个NFA表达了在做正向推导的时候，可能采取的所有可能的推导路径。用了Item这种方式表达出来了而已。<br><br>你按照我这种说法看看，是不是那个NFA就代表了示例的语法的推导路径。<br><br>把这一关过了，转DFA的过程你肯定是理解的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570715855,"ip_address":"","comment_id":136382,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1569419596","product_id":100034101,"comment_content":"这一章看的有点困难，不理解那个NFA怎么来的","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468602,"discussion_content":"那个NFA表达了在做正向推导的时候，可能采取的所有可能的推导路径。用了Item这种方式表达出来了而已。\n\n你按照我这种说法看看，是不是那个NFA就代表了示例的语法的推导路径。\n\n把这一关过了，转DFA的过程你肯定是理解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570715855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1157508,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","nickname":"xiaobang","note":"","ucode":"1735BDCFD61655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28995,"discussion_content":"谢谢老师回复。正向推导是指从左往右推导吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570721660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22526,"discussion_content":"去看老师写的代码就容易理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569648267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}