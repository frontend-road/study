{"id":740774,"title":"第 11 章 快速 Diff 算法","content":"<p>本章我们将讨论第三种用于比较新旧两组子节点的方式：快速 Diff 算法。正如其名，该算法的实测速度非常快。该算法最早应用于 <code>ivi</code> 和 <code>inferno</code> 这两个框架，Vue.js 3 借鉴并扩展了它。图 11-1 比较了 <code>ivi</code>、<code>inferno</code> 以及 Vue.js 2 的性能。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00581.jpeg\" alt=\"\" width=\"50%\" style=\"width: 50%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-1　性能比较</strong></p>\n<p>图 11-1 来自 js-framework-benchmark，从中可以看出，在 DOM 操作的各个方面，<code>ivi</code> 和 <code>inferno</code> 所采用的快速 Diff 算法的性能都要稍优于 Vue.js 2 所采用的双端 Diff 算法。既然快速 Diff 算法如此高效，我们有必要了解它的思路。接下来，我们就着重讨论快速 Diff 算法的实现原理。</p>\n<h2 id=\"nav_point_104\">11.1　相同的前置元素和后置元素</h2>\n<p>不同于简单 Diff 算法和双端 Diff 算法，快速 Diff 算法包含预处理步骤，这其实是借鉴了纯文本 Diff 算法的思路。在纯文本 Diff 算法中，存在对两段文本进行预处理的过程。例如，在对两段文本进行 Diff 之前，可以先对它们进行全等比较：</p>\n<pre class=\"code-rows\"><code> if (text1 === text2) return\n</code></pre>\n<p>这也称为快捷路径。如果两段文本全等，那么就无须进入核心 Diff 算法的步骤了。除此之外，预处理过程还会处理两段文本相同的前缀和后缀。假设有如下两段文本：</p>\n<pre class=\"code-rows\"><code> TEXT1: I use vue for app development\n TEXT2: I use react for app development\n</code></pre>\n<p>通过肉眼可以很容易发现，这两段文本的头部和尾部分别有一段相同的内容，如图 11-2 所示。</p><!-- [[[read_end]]] -->\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00582.jpeg\" alt=\"\" width=\"40%\" style=\"width: 40%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-2　文本预处理</strong></p>\n<p>图 11-2 突出显示了 <code>TEXT1</code> 和 <code>TEXT2</code> 中相同的内容。对于内容相同的问题，是不需要进行核心 Diff 操作的。因此，对于 <code>TEXT1</code> 和  <code>TEXT2</code> 来说，真正需要进行 Diff 操作的部分是：</p>\n<pre class=\"code-rows\"><code> TEXT1: vue\n TEXT2: react\n</code></pre>\n<p>这实际上是简化问题的一种方式。这么做的好处是，在特定情况下我们能够轻松地判断文本的插入和删除，例如：</p>\n<pre class=\"code-rows\"><code> TEXT1: I like you\n TEXT2: I like you too\n</code></pre>\n<p>经过预处理，去掉这两段文本中相同的前缀内容和后缀内容之后，它将变成：</p>\n<pre class=\"code-rows\"><code> TEXT1:\n TEXT2: too\n</code></pre>\n<p>可以看到，经过预处理后，<code>TEXT1</code> 的内容为空。这说明 <code>TEXT2</code> 在 <code>TEXT1</code> 的基础上增加了字符串 <code>too</code>。相反，我们还可以将这两段文本的位置互换：</p>\n<pre class=\"code-rows\"><code> TEXT1: I like you too\n TEXT2: I like you\n</code></pre>\n<p>这两段文本经过预处理后将变成：</p>\n<pre class=\"code-rows\"><code> TEXT1: too\n TEXT2:\n</code></pre>\n<p>由此可知，<code>TEXT2</code> 是在 <code>TEXT1</code> 的基础上删除了字符串 <code>too</code>。</p>\n<p>快速 Diff 算法借鉴了纯文本 Diff 算法中预处理的步骤。以图 11-3 给出的两组子节点为例。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00583.jpeg\" alt=\"\" width=\"45%\" style=\"width: 45%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-3　新旧两组子节点</strong></p>\n<p>这两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>。</li>\n<li>新的一组子节点：<code>p-1</code>、<code>p-4</code>、<code>p-2</code>、<code>p-3</code>。</li>\n</ul>\n<p>通过观察可以发现，两组子节点具有相同的前置节点 <code>p-1</code>，以及相同的后置节点 <code>p-2</code> 和 <code>p-3</code>，如图 11-4 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00584.jpeg\" alt=\"\" width=\"40%\" style=\"width: 40%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-4　相同的前置节点和后置节点</strong></p>\n<p>对于相同的前置节点和后置节点，由于它们在新旧两组子节点中的相对位置不变，所以我们无须移动它们，但仍然需要在它们之间打补丁。</p>\n<p>对于前置节点，我们可以建立索引 <code>j</code>，其初始值为 <code>0</code>，用来指向两组子节点的开头，如图 11-5 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00585.jpeg\" alt=\"\" width=\"70%\" style=\"width: 70%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-5　建立索引 j，指向两组子节点的开头</strong></p>\n<p>然后开启一个 <code>while</code> 循环，让索引 <code>j</code> 递增，直到遇到不相同的节点为止，如下面 <code>patchKeyedChildren</code> 函数的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const newChildren = n2.children\n   const oldChildren = n1.children\n   // 处理相同的前置节点\n   // 索引 j 指向新旧两组子节点的开头\n   let j = 0\n   let oldVNode = oldChildren[j]\n   let newVNode = newChildren[j]\n   // while 循环向后遍历，直到遇到拥有不同 key 值的节点为止\n   while (oldVNode.key === newVNode.key) {\n     // 调用 patch 函数进行更新\n     patch(oldVNode, newVNode, container)\n     // 更新索引 j，让其递增\n     j++\n     oldVNode = oldChildren[j]\n     newVNode = newChildren[j]\n   }\n<p>}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们使用 <code>while</code> 循环查找所有相同的前置节点，并调用 <code>patch</code> 函数进行打补丁，直到遇到 <code>key</code> 值不同的节点为止。这样，我们就完成了对前置节点的更新。在这一步更新操作过后，新旧两组子节点的状态如图 11-6 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00586.jpeg\" alt=\"\" width=\"70%\" style=\"width: 70%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-6　处理完前置节点后的状态</strong></p>\n<p>这里需要注意的是，当 <code>while</code> 循环终止时，索引 <code>j</code> 的值为 <code>1</code>。接下来，我们需要处理相同的后置节点。由于新旧两组子节点的数量可能不同，所以我们需要两个索引 <code>newEnd</code> 和 <code>oldEnd</code>，分别指向新旧两组子节点中的最后一个节点，如图 11-7 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00587.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-7　建立索引，指向两组子节点的最后一个节点</strong></p>\n<p>然后，再开启一个 <code>while</code> 循环，并从后向前遍历这两组子节点，直到遇到 <code>key</code> 值不同的节点为止，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const newChildren = n2.children\n   const oldChildren = n1.children\n   // 更新相同的前置节点\n   let j = 0\n   let oldVNode = oldChildren[j]\n   let newVNode = newChildren[j]\n   while (oldVNode.key === newVNode.key) {\n     patch(oldVNode, newVNode, container)\n     j++\n     oldVNode = oldChildren[j]\n     newVNode = newChildren[j]\n   }\n<p>// 更新相同的后置节点<br />\n// 索引 oldEnd 指向旧的一组子节点的最后一个节点<br />\nlet oldEnd = oldChildren.length - 1<br />\n// 索引 newEnd 指向新的一组子节点的最后一个节点<br />\nlet newEnd = newChildren.length - 1</p>\n<p>oldVNode = oldChildren[oldEnd]<br />\nnewVNode = newChildren[newEnd]</p>\n<p>// while 循环从后向前遍历，直到遇到拥有不同 key 值的节点为止<br />\nwhile (oldVNode.key === newVNode.key) {<br />\n// 调用 patch 函数进行更新<br />\npatch(oldVNode, newVNode, container)<br />\n// 递减 oldEnd 和 nextEnd<br />\noldEnd–<br />\nnewEnd–<br />\noldVNode = oldChildren[oldEnd]<br />\nnewVNode = newChildren[newEnd]<br />\n}</p>\n<p>}<br />\n</code></pre></p>\n<p>与处理相同的前置节点一样，在 <code>while</code> 循环内，需要调用 <code>patch</code> 函数进行打补丁，然后递减两个索引 <code>oldEnd</code>、<code>newEnd</code> 的值。在这一步更新操作过后，新旧两组子节点的状态如图 11-8 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00588.jpeg\" alt=\"\" width=\"70%\" style=\"width: 70%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-8　处理完后置节点后的状态</strong></p>\n<p>由图 11-8 可知，当相同的前置节点和后置节点被处理完毕后，旧的一组子节点已经全部被处理了，而在新的一组子节点中，还遗留了一个未被处理的节点 <code>p-4</code>。其实不难发现，节点 <code>p-4</code> 是一个新增节点。那么，如何用程序得出“节点 <code>p-4</code> 是新增节点”这个结论呢？这需要我们观察三个索引 <code>j</code>、<code>newEnd</code> 和 <code>oldEnd</code> 之间的关系。</p>\n<ul>\n<li>条件一 <code>oldEnd &lt; j</code> 成立：说明在预处理过程中，所有旧子节点都处理完毕了。</li>\n<li>条件二 <code>newEnd &gt;= j</code> 成立：说明在预处理过后，在新的一组子节点中，仍然有未被处理的节点，而这些遗留的节点将被视作<strong>新增节点</strong>。</li>\n</ul>\n<p>如果条件一和条件二同时成立，说明在新的一组子节点中，存在遗留节点，且这些节点都是新增节点。因此我们需要将它们挂载到正确的位置，如图 11-9 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00589.jpeg\" alt=\"\" width=\"85%\" style=\"width: 85%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-9　新增节点的情况</strong></p>\n<p>在新的一组子节点中，索引值处于 <code>j</code> 和 <code>newEnd</code> 之间的任何节点都需要作为新的子节点进行挂载。那么，应该怎样将这些节点挂载到正确位置呢？这就要求我们必须找到正确的锚点元素。观察图 11-9 中新的一组子节点可知，新增节点应该挂载到节点 <code>p-2</code> 所对应的真实 DOM 前面。所以，节点 <code>p-2</code> 对应的真实 DOM 节点就是挂载操作的锚点元素。有了这些信息，我们就可以给出具体的代码实现了，如下所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const newChildren = n2.children\n   const oldChildren = n1.children\n   // 更新相同的前置节点\n   // 省略部分代码\n<p>// 更新相同的后置节点<br />\n// 省略部分代码</p>\n<p>// 预处理完毕后，如果满足如下条件，则说明从 j --&gt; newEnd 之间的节点应作为新节点插入<br />\nif (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {<br />\n// 锚点的索引<br />\nconst anchorIndex = newEnd + 1<br />\n// 锚点元素<br />\nconst anchor = anchorIndex &lt; newChildren.length ? newChildren[anchorIndex].el : null<br />\n// 采用 while 循环，调用 patch 函数逐个挂载新增节点<br />\nwhile (j &lt;= newEnd) {<br />\npatch(null, newChildren[j++], container, anchor)<br />\n}<br />\n}</p>\n<p>}<br />\n</code></pre></p>\n<p>在上面这段代码中，首先计算锚点的索引值（即 <code>anchorIndex</code>）为 <code>newEnd + 1</code>。如果小于新的一组子节点的数量，则说明锚点元素在新的一组子节点中，所以直接使用 <code>newChildren[anchorIndex].el</code> 作为锚点元素；否则说明索引 <code>newEnd</code> 对应的节点已经是尾部节点了，这时无须提供锚点元素。有了锚点元素之后，我们开启了一个 <code>while</code> 循环，用来遍历索引 <code>j</code> 和索引 <code>newEnd</code> 之间的节点，并调用 <code>patch</code> 函数挂载它们。</p>\n<p>上面的案例展示了新增节点的情况，我们再来看看删除节点的情况，如图 11-10 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00590.jpeg\" alt=\"\" width=\"55%\" style=\"width: 55%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-10　删除节点的情况</strong></p>\n<p>在这个例子中，新旧两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>。</li>\n<li>新的一组子节点：<code>p-1</code>、<code>p-3</code>。</li>\n</ul>\n<p>我们同样使用索引 <code>j</code>、<code>oldEnd</code> 和 <code>newEnd</code> 进行标记，如图 11-11 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00591.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-11　在删除节点的情况下，各个索引的关系</strong></p>\n<p>接着，对相同的前置节点进行预处理，处理后的状态如图 11-12 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00592.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-12　处理完前置节点后，各个索引的关系</strong></p>\n<p>然后，对相同的后置节点进行预处理，处理后的状态如图 11-13 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00593.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-13　处理完后置节点后，各个索引的关系</strong></p>\n<p>由图 11-13 可知，当相同的前置节点和后置节点全部被处理完毕后，新的一组子节点已经全部被处理完毕了，而旧的一组子节点中遗留了一个节点 <code>p-2</code>。这说明，应该卸载节点 <code>p-2</code>。实际上，遗留的节点可能有多个，如图 11-14 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00594.jpeg\" alt=\"\" width=\"86%\" style=\"width: 86%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-14　遗留的节点可能有多个</strong></p>\n<p>索引 <code>j</code> 和索引 <code>oldEnd</code> 之间的任何节点都应该被卸载，具体实现如下：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const newChildren = n2.children\n   const oldChildren = n1.children\n   // 更新相同的前置节点\n   // 省略部分代码\n<p>// 更新相同的后置节点<br />\n// 省略部分代码</p>\n<p>if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {<br />\n// 省略部分代码<br />\n} else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {<br />\n// j -&gt; oldEnd 之间的节点应该被卸载<br />\nwhile (j &lt;= oldEnd) {<br />\nunmount(oldChildren[j++])<br />\n}<br />\n}</p>\n<p>}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们新增了一个 <code>else...if</code> 分支。当满足条件 <code>j &gt; newEnd &amp;&amp; j &lt;= oldEnd</code> 时，则开启一个 <code>while</code> 循环，并调用 <code>unmount</code> 函数逐个卸载这些遗留节点。</p>\n<h2 id=\"nav_point_105\">11.2　判断是否需要进行 DOM 移动操作</h2>\n<p>在上一节中，我们讲解了快速 Diff 算法的预处理过程，即处理相同的前置节点和后置节点。但是，上一节给出的例子比较理想化，当处理完相同的前置节点或后置节点后，新旧两组子节点中总会有一组子节点全部被处理完毕。在这种情况下，只需要简单地挂载、卸载节点即可。但有时情况会比较复杂，如图 11-15 中给出的例子。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00595.jpeg\" alt=\"\" width=\"35%\" style=\"width: 35%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-15　复杂情况下的新旧两组子节点</strong></p>\n<p>在这个例子中，新旧两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>、<code>p-4</code>、<code>p-6</code>、<code>p-5</code>。</li>\n<li>新的一组子节点：<code>p-1</code>、<code>p-3</code>、<code>p-4</code>、<code>p-2</code>、<code>p-7</code>、<code>p-5</code>。</li>\n</ul>\n<p>可以看到，与旧的一组子节点相比，新的一组子节点多出了一个新节点 <code>p-7</code>，少了一个节点 <code>p-6</code>。这个例子并不像上一节给出的例子那样理想化，我们无法简单地通过预处理过程完成更新。在这个例子中，相同的前置节点只有 <code>p-1</code>，而相同的后置节点只有 <code>p-5</code>，如图 11-16 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00596.jpeg\" alt=\"\" width=\"38%\" style=\"width: 38%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-16　复杂情况下仅有少量相同的前置节点和后置节点</strong></p>\n<p>图 11-17 给出了经过预处理后两组子节点的状态。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00597.jpeg\" alt=\"\" width=\"73%\" style=\"width: 73%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-17　处理完前置节点和后置节点后的状态</strong></p>\n<p>可以看到，经过预处理后，无论是新的一组子节点，还是旧的一组子节点，都有部分节点未经处理。这时就需要我们进一步处理。怎么处理呢？其实无论是简单 Diff 算法，还是双端 Diff 算法，抑或本章介绍的快速 Diff 算法，它们都遵循同样的处理规则：</p>\n<ul>\n<li>判断是否有节点需要移动，以及应该如何移动；</li>\n<li>找出那些需要被添加或移除的节点。</li>\n</ul>\n<p>所以接下来我们的任务就是，判断哪些节点需要移动，以及应该如何移动。观察图 11-17 可知，在这种非理想的情况下，当相同的前置节点和后置节点被处理完毕后，索引 <code>j</code>、<code>newEnd</code> 和 <code>oldEnd</code> 不满足下面两个条件中的任何一个：</p>\n<ul>\n<li><code>j &gt; oldEnd &amp;&amp; j &lt;= newEnd</code></li>\n<li><code>j &gt; newEnd &amp;&amp; j &lt;= oldEnd</code></li>\n</ul>\n<p>因此，我们需要增加新的 <code>else</code> 分支来处理图 11-17 所示的情况，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const newChildren = n2.children\n   const oldChildren = n1.children\n   // 更新相同的前置节点\n   // 省略部分代码\n<p>// 更新相同的后置节点<br />\n// 省略部分代码</p>\n<p>if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {<br />\n// 省略部分代码<br />\n} else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {<br />\n// 省略部分代码<br />\n} else {<br />\n// 增加 else 分支来处理非理想情况<br />\n}</p>\n<p>}<br />\n</code></pre></p>\n<p>后续的处理逻辑将会编写在这个 <code>else</code> 分支内。知道了在哪里编写处理代码，接下来我们讲解具体的处理思路。首先，我们需要构造一个数组 <code>source</code>，它的长度等于新的一组子节点在经过预处理之后剩余未处理节点的数量，并且 <code>source</code> 中每个元素的初始值都是 <code>-1</code>，如图 11-18 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00598.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-18　构造 <code>source</code> 数组</strong></p>\n<p>我们可以通过下面的代码完成 <code>source</code> 数组的构造：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   // 构造 source 数组\n   // 新的一组子节点中剩余未处理节点的数量\n   const count = newEnd - j + 1\n   const source = new Array(count)\n   source.fill(-1)\n }\n</code></pre>\n<p>如上面的代码所示。首先，我们需要计算新的一组子节点中剩余未处理节点的数量，即 <code>newEnd - j + 1</code>，然后创建一个长度与之相同的数组 <code>source</code>，最后使用 <code>fill</code> 函数完成数组的填充。那么，数组 <code>source</code> 的作用是什么呢？观察图 11-18 可以发现，数组 <code>source</code> 中的每一个元素分别与新的一组子节点中剩余未处理节点对应。实际上，<code>source</code> 数组将用来存储<strong>新的一组子节点中的节点在旧的一组子节点中的位置索引，后面将会使用它计算出一个最长递增子序列，并用于辅助完成 DOM 移动的操作</strong>，如图 11-19 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00599.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-19　填充 <code>source</code> 数组</strong></p>\n<p>图 11-19 展示了填充 <code>source</code> 数组的过程。由于 <code>source</code> 数组存储的是新子节点在旧的一组子节点中的位置索引，所以有：</p>\n<ul>\n<li>新的一组子节点中的节点 <code>p-3</code> 在旧的一组子节点中的索引为 <code>2</code>，因此 <code>source</code> 数组的第一个元素值为 <code>2</code>；</li>\n<li>新的一组子节点中的节点 <code>p-4</code> 在旧的一组子节点中的索引为 <code>3</code>，因此 <code>source</code> 数组的第二个元素值为 <code>3</code>；</li>\n<li>新的一组子节点中的节点 <code>p-2</code> 在旧的一组子节点中的索引为 <code>1</code>，因此 <code>source</code> 数组的第三个元素值为 <code>1</code>；</li>\n<li>新的一组子节点中的节点 <code>p-7</code> 比较特殊，因为在旧的一组子节点中没有与其 <code>key</code> 值相等的节点，所以 <code>source</code> 数组的第四个元素值保留原来的 <code>-1</code>。</li>\n</ul>\n<p>我们可以通过两层 <code>for</code> 循环来完成 <code>source</code> 数组的填充工作，外层循环用于遍历旧的一组子节点，内层循环用于遍历新的一组子节点：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   const count = newEnd - j + 1\n   const source = new Array(count)\n   source.fill(-1)\n<p>// oldStart 和 newStart 分别为起始索引，即 j<br />\nconst oldStart = j<br />\nconst newStart = j<br />\n// 遍历旧的一组子节点<br />\nfor (let i = oldStart; i &lt;= oldEnd; i++) {<br />\nconst oldVNode = oldChildren[i]<br />\n// 遍历新的一组子节点<br />\nfor (let k = newStart; k &lt;= newEnd; k++) {<br />\nconst newVNode = newChildren[k]<br />\n// 找到拥有相同 key 值的可复用节点<br />\nif (oldVNode.key === newVNode.key) {<br />\n// 调用 patch 进行更新<br />\npatch(oldVNode, newVNode, container)<br />\n// 最后填充 source 数组<br />\nsource[k - newStart] = i<br />\n}<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>这里需要注意的是，由于数组 <code>source</code> 的索引是从 <code>0</code> 开始的，而未处理节点的索引未必从 <code>0</code> 开始，所以在填充数组时需要使用表达式 <code>k - newStart</code> 的值作为数组的索引值。外层循环的变量 <code>i</code> 就是当前节点在旧的一组子节点中的位置索引，因此直接将变量 <code>i</code> 的值赋给 <code>source[k - newStart]</code> 即可。</p>\n<p>现在，<code>source</code> 数组已经填充完毕，我们后面会用到它。不过在进一步讲解之前，我们需要回头思考一下上面那段用于填充 <code>source</code> 数组的代码存在怎样的问题。这段代码中我们采用了两层嵌套的循环，其时间复杂度为 <code>O(n1 * n2)</code>，其中 <code>n1</code> 和 <code>n2</code> 为新旧两组子节点的数量，我们也可以使用 <code>O(n^2)</code> 来表示。当新旧两组子节点的数量较多时，两层嵌套的循环会带来性能问题。出于优化的目的，我们可以为新的一组子节点构建一张<strong>索引表</strong>，用来存储节点的 <code>key</code> 和节点位置索引之间的映射，如图 11-20 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00600.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-20　使用索引表填充 <code>source</code> 数组</strong></p>\n<p>有了索引表，我们就可以利用它快速地填充 <code>source</code> 数组，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   const count = newEnd - j + 1\n   const source = new Array(count)\n   source.fill(-1)\n<p>// oldStart 和 newStart 分别为起始索引，即 j<br />\nconst oldStart = j<br />\nconst newStart = j<br />\n// 构建索引表<br />\nconst keyIndex = {}<br />\nfor(let i = newStart; i &lt;= newEnd; i++) {<br />\nkeyIndex[newChildren[i].key] = i<br />\n}<br />\n// 遍历旧的一组子节点中剩余未处理的节点<br />\nfor(let i = oldStart; i &lt;= oldEnd; i++) {<br />\noldVNode = oldChildren[i]<br />\n// 通过索引表快速找到新的一组子节点中具有相同 key 值的节点位置<br />\nconst k = keyIndex[oldVNode.key]</p>\n<pre><code> if (typeof k !== 'undefined') {\n   newVNode = newChildren[k]\n   // 调用 patch 函数完成更新\n   patch(oldVNode, newVNode, container)\n   // 填充 source 数组\n   source[k - newStart] = i\n } else {\n   // 没找到\n   unmount(oldVNode)\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，同样使用了两个 <code>for</code> 循环，不过它们不再是嵌套的关系，所以能够将代码的时间复杂度降至 <code>O(n)</code>。其中，第一个 <code>for</code> 循环用来构建索引表，索引表存储的是节点的 <code>key</code> 值与节点在新的一组子节点中位置索引之间的映射，第二个 <code>for</code> 循环用来遍历旧的一组子节点。可以看到，我们拿旧子节点的 <code>key</code> 值去索引表 <code>keyIndex</code> 中查找该节点在新的一组子节点中的位置，并将查找结果存储到变量 <code>k</code> 中。如果 <code>k</code> 存在，说明该节点是可复用的，所以我们调用 <code>patch</code> 函数进行打补丁，并填充 <code>source</code> 数组；否则说明该节点已经不存在于新的一组子节点中了，这时我们需要调用 <code>unmount</code> 函数卸载它。</p>\n<p>上述流程执行完毕后，<code>source</code> 数组已经填充完毕了。接下来我们应该思考的是，如何判断节点是否需要移动。实际上，快速 Diff 算法判断节点是否需要移动的方法与简单 Diff 算法类似，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   // 构造 source 数组\n   const count = newEnd - j + 1  // 新的一组子节点中剩余未处理节点的数量\n   const source = new Array(count)\n   source.fill(-1)\n<p>const oldStart = j<br />\nconst newStart = j<br />\n// 新增两个变量，moved 和 pos<br />\nlet moved = false<br />\nlet pos = 0</p>\n<p>const keyIndex = {}<br />\nfor(let i = newStart; i &lt;= newEnd; i++) {<br />\nkeyIndex[newChildren[i].key] = i<br />\n}<br />\nfor(let i = oldStart; i &lt;= oldEnd; i++) {<br />\noldVNode = oldChildren[i]<br />\nconst k = keyIndex[oldVNode.key]</p>\n<pre><code> if (typeof k !== 'undefined') {\n   newVNode = newChildren[k]\n   patch(oldVNode, newVNode, container)\n   source[k - newStart] = i\n   // 判断节点是否需要移动\n   if (k &amp;lt; pos) {\n     moved = true\n   } else {\n     pos = k\n   }\n } else {\n   unmount(oldVNode)\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们新增了两个变量 <code>moved</code> 和 <code>pos</code>。前者的初始值为 <code>false</code>，代表是否需要移动节点，后者的初始值为 <code>0</code>，代表遍历旧的一组子节点的过程中遇到的最大索引值 <code>k</code>。我们在讲解简单 Diff 算法时曾提到，如果在遍历过程中遇到的索引值呈现递增趋势，则说明不需要移动节点，反之则需要。所以在第二个 <code>for</code> 循环内，我们通过比较变量 <code>k</code> 与变量 <code>pos</code> 的值来判断是否需要移动节点。</p>\n<p>除此之外，我们还需要一个数量标识，代表<strong>已经更新过的节点数量</strong>。我们知道，<strong>已经更新过的节点数量</strong>应该小于新的一组子节点中需要更新的节点数量。一旦前者超过后者，则说明有多余的节点，我们应该将它们卸载，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   // 构造 source 数组\n   const count = newEnd - j + 1\n   const source = new Array(count)\n   source.fill(-1)\n<p>const oldStart = j<br />\nconst newStart = j<br />\nlet moved = false<br />\nlet pos = 0<br />\nconst keyIndex = {}<br />\nfor(let i = newStart; i &lt;= newEnd; i++) {<br />\nkeyIndex[newChildren[i].key] = i<br />\n}<br />\n// 新增 patched 变量，代表更新过的节点数量<br />\nlet patched = 0<br />\nfor(let i = oldStart; i &lt;= oldEnd; i++) {<br />\noldVNode = oldChildren[i]<br />\n// 如果更新过的节点数量小于等于需要更新的节点数量，则执行更新<br />\nif (patched &lt;= count) {<br />\nconst k = keyIndex[oldVNode.key]<br />\nif (typeof k !== ‘undefined’) {<br />\nnewVNode = newChildren[k]<br />\npatch(oldVNode, newVNode, container)<br />\n// 每更新一个节点，都将 patched 变量 +1<br />\npatched++<br />\nsource[k - newStart] = i<br />\nif (k &lt; pos) {<br />\nmoved = true<br />\n} else {<br />\npos = k<br />\n}<br />\n} else {<br />\n// 没找到<br />\nunmount(oldVNode)<br />\n}<br />\n} else {<br />\n// 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点<br />\nunmount(oldVNode)<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们增加了 <code>patched</code> 变量，其初始值为 <code>0</code>，代表更新过的节点数量。接着，在第二个 <code>for</code> 循环中增加了判断 <code>patched &lt;= count</code>，如果此条件成立，则正常执行更新，并且每次更新后都让变量 <code>patched</code> 自增；否则说明剩余的节点都是多余的，于是调用 <code>unmount</code> 函数将它们卸载。</p>\n<p>现在，我们通过判断变量 <code>moved</code> 的值，已经能够知道是否需要移动节点，同时也处理了很多边界条件。接下来我们讨论如何移动节点。</p>\n<h2 id=\"nav_point_106\">11.3　如何移动元素</h2>\n<p>在上一节中，我们实现了两个目标。</p>\n<ul>\n<li>判断是否需要进行 DOM 移动操作。我们创建了变量 <code>moved</code> 作为标识，当它的值为 <code>true</code> 时，说明需要进行 DOM 移动操作。</li>\n<li>构建 <code>source</code> 数组。该数组的长度等于新的一组子节点<strong>去掉</strong>相同的前置/后置节点后，剩余未处理节点的数量。<code>source</code> 数组中存储着新的一组子节点中的节点在旧的一组子节点中的位置，后面我们会根据 <code>source</code> 数组计算出一个<strong>最长递增子序列</strong>，用于 DOM 移动操作。</li>\n</ul>\n<p>接下来，我们讨论如何进行 DOM 移动操作，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (j &gt; oldEnd &amp;&amp; j &lt;= newEnd) {\n   // 省略部分代码\n } else if (j &gt; newEnd &amp;&amp; j &lt;= oldEnd) {\n   // 省略部分代码\n } else {\n   // 省略部分代码\n   for(let i = oldStart; i &lt;= oldEnd; i++) {\n     // 省略部分代码\n   }\n<p>if (moved) {<br />\n// 如果 moved 为真，则需要进行 DOM 移动操作<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们在 <code>for</code> 循环后增加了一个 <code>if</code> 判断分支。如果变量 <code>moved</code> 的值为 <code>true</code>，则说明需要进行 DOM 移动操作，所以用于 DOM 移动操作的逻辑将编写在该 <code>if</code> 语句块内。</p>\n<p>为了进行 DOM 移动操作，我们首先要根据 <code>source</code> 数组计算出它的最长递增子序列。<code>source</code> 数组仍然取用在 11.2 节中给出的例子，如图 11-21 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00601.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-21　用于计算 <code>source</code> 数组的递增子序列的例子</strong></p>\n<p>在这个例子中，我们计算出 <code>source</code> 数组为 <code>[2, 3, 1, -1]</code>。那么，该数组的最长递增子序列是什么呢？这就需要我们了解最长递增子序列的概念。为此，我们先要搞清楚什么是一个序列的递增子序列。简单来说，给定一个数值序列，找到它的一个子序列，并且该子序列中的值是递增的，子序列中的元素在原序列中不一定连续。一个序列可能有很多个递增子序列，其中最长的那一个就称为最长递增子序列。举个例子，假设给定数值序列 <code>[ 0, 8, 4, 12 ]</code>，那么它的最长递增子序列就是 <code>[0, 8, 12]</code>。当然，对于同一个数值序列来说，它的最长递增子序列可能有多个，例如 <code>[0, 4, 12]</code> 也是本例的答案之一。</p>\n<p>理解了什么是最长递增子序列，接下来我们就可以求解 <code>source</code> 数组的最长递增子序列了，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (moved) {\n   // 计算最长递增子序列\n   const seq = lis(sources) // [ 0, 1 ]\n }\n</code></pre>\n<p>在上面这段代码中，我们使用 <code>lis</code> 函数计算一个数组的最长递增子序列。<code>lis</code> 函数接收 <code>source</code> 数组作为参数，并返回 <code>source</code> 数组的最长递增子序列之一。在上例中，你可能疑惑为什么通过 <code>lis</code> 函数计算得到的是 <code>[0, 1]</code>？实际上，<code>source</code> 数组 <code>[2, 3, 1, -1]</code> 的最长递增子序列应该是 <code>[2, 3]</code>，但我们得到的结果是 <code>[0, 1]</code>，这是为什么呢？这是因为 <code>lis</code> 函数的返回结果是最长递增子序列中的元素在 <code>source</code> 数组中的位置索引，如图 11-22 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00602.jpeg\" alt=\"\" width=\"30%\" style=\"width: 30%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-22　递增子序列中存储的是 <code>source</code> 数组内元素的位置索引</strong></p>\n<p>因为 <code>source</code> 数组的最长递增子序列为 <code>[2, 3]</code>，其中元素 <code>2</code> 在该数组中的索引为 <code>0</code>，而数组 <code>3</code> 在该数组中的索引为 <code>1</code>，所以最终结果为 <code>[0, 1]</code>。</p>\n<p>有了最长递增子序列的索引信息后，下一步要重新对节点进行编号，如图 11-23 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00603.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-23　重新对节点进行编号后的状态</strong></p>\n<p>观察图 11-23，在编号时，我们忽略了经过预处理的节点 <code>p-1</code> 和 <code>p-5</code>。所以，索引为 <code>0</code> 的节点是 <code>p-2</code>，而索引为 <code>1</code> 节点是 <code>p-3</code>，以此类推。重新编号是为了让子序列 <code>seq</code> 与新的索引值产生对应关系。其实，最长递增子序列 <code>seq</code> 拥有一个非常重要的意义。以上例来说，子序列 <code>seq</code> 的值为 <code>[0, 1]</code>，它的含义是：<strong>在新的一组子节点中，重新编号后索引值为 <code>0</code> 和 <code>1</code> 的这两个节点在更新前后顺序没有发生变化</strong>。换句话说，重新编号后，索引值为 <code>0</code> 和 <code>1</code> 的节点不需要移动。在新的一组子节点中，节点 <code>p-3</code> 的索引为 <code>0</code>，节点 <code>p-4</code> 的索引为 <code>1</code>，所以节点 <code>p-3</code> 和 <code>p-4</code> 所对应的真实 DOM 不需要移动。换句话说，只有节点 <code>p-2</code> 和 <code>p-7</code> 可能需要移动。</p>\n<p>为了完成节点的移动，我们还需要创建两个索引值 <code>i</code> 和 <code>s</code>：</p>\n<ul>\n<li>用索引 <code>i</code> 指向新的一组子节点中的最后一个节点；</li>\n<li>用索引 <code>s</code> 指向最长递增子序列中的最后一个元素。</li>\n</ul>\n<p>如图 11-24 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00604.jpeg\" alt=\"\" width=\"90%\" style=\"width: 90%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-24　建立索引 <code>s</code> 和 <code>i</code>，分别指向子序列和索引的最后一个位置</strong></p>\n<p>观察图 11-24，为了简化图示，我们在去掉了旧的一组子节点以及无关的线条和变量。接下来，我们将开启一个 <code>for</code> 循环，让变量 <code>i</code> 和 <code>s</code> 按照图 11-24 中箭头的方向移动，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (moved) {\n   const seq = lis(sources)\n<p>// s 指向最长递增子序列的最后一个元素<br />\nlet s = seq.length - 1<br />\n// i 指向新的一组子节点的最后一个元素<br />\nlet i = count - 1<br />\n// for 循环使得 i 递减，即按照图 11-24 中箭头的方向移动<br />\nfor (i; i &gt;= 0; i–) {<br />\nif (i !== seq[s]) {<br />\n// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动<br />\n} else {<br />\n// 当 i === seq[s] 时，说明该位置的节点不需要移动<br />\n// 只需要让 s 指向下一个位置<br />\ns–<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>其中，<code>for</code> 循环的目的是让变量 <code>i</code> 按照图 11-24 中箭头的方向移动，以便能够逐个访问新的一组子节点中的节点，这里的变量 <code>i</code> 就是节点的索引。在 <code>for</code> 循环内，判断条件 <code>i !== seq[s]</code>，如果节点的索引 <code>i</code> 不等于 <code>seq[s]</code> 的值，则说明该节点对应的真实 DOM 需要移动，否则说明当前访问的节点不需要移动，但这时变量 <code>s</code> 需要按照图 11-24 中箭头的方向移动，即让变量 <code>s</code> 递减。</p>\n<p>接下来我们就按照上述思路执行更新。初始时索引 <code>i</code> 指向节点 <code>p-7</code>。由于节点 <code>p-7</code> 对应的 <code>source</code> 数组中相同位置的元素值为 <code>-1</code>，所以我们应该将节点 <code>p-7</code> 作为全新的节点进行挂载，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> if (moved) {\n   const seq = lis(sources)\n<p>// s 指向最长递增子序列的最后一个元素<br />\nlet s = seq.length - 1<br />\n// i 指向新的一组子节点的最后一个元素<br />\nlet i = count - 1<br />\n// for 循环使得 i 递减，即按照图 11-24 中箭头的方向移动<br />\nfor (i; i &gt;= 0; i–) {<br />\nif (source[i] === -1) {<br />\n// 说明索引为 i 的节点是全新的节点，应该将其挂载<br />\n// 该节点在新 children 中的真实位置索引<br />\nconst pos = i + newStart<br />\nconst newVNode = newChildren[pos]<br />\n// 该节点的下一个节点的位置索引<br />\nconst nextPos = pos + 1<br />\n// 锚点<br />\nconst anchor = nextPos &lt; newChildren.length<br />\n? newChildren[nextPos].el<br />\n: null<br />\n// 挂载<br />\npatch(null, newVNode, container, anchor)<br />\n} else if (i !== seq[s]) {<br />\n// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动<br />\n} else {<br />\n// 当 i === seq[s] 时，说明该位置的节点不需要移动<br />\n// 只需要让 s 指向下一个位置<br />\ns–<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>如果 <code>source[i]</code> 的值为 <code>-1</code>，则说明索引为 <code>i</code> 的节点是全新的节点，于是我们调用 <code>patch</code> 函数将其挂载到容器中。这里需要注意的是，由于索引 <code>i</code> 是重新编号后的，因此为了得到真实索引值，我们需要计算表达式 <code>i + newStart</code> 的值。</p>\n<p>新节点创建完毕后，<code>for</code> 循环已经执行了一次，此时索引 <code>i</code> 向上移动一步，指向了节点 <code>p-2</code>，如图 11-25 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00605.jpeg\" alt=\"\" width=\"80%\" style=\"width: 80%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-25　节点以及索引的当前状态</strong></p>\n<p>接着，进行下一轮 <code>for</code> 循环，步骤如下。</p>\n<ul>\n<li>第一步：<code>source[i]</code> 是否等于 <code>-1</code>？很明显，此时索引 <code>i</code> 的值为 <code>2</code>，<code>source[2]</code> 的值等于 <code>1</code>，因此节点 <code>p-2</code> 不是全新的节点，不需要挂载它，进行下一步的判断。</li>\n<li>第二步：<code>i !== seq[s]</code> 是否成立？此时索引 <code>i</code> 的值为 <code>2</code>，索引 <code>s</code> 的值为 <code>1</code>。因此 <code>2 !== seq[1]</code> 成立，节点 <code>p-2</code> 所对应的真实 DOM 需要移动。</li>\n</ul>\n<p>在第二步中，我们知道了节点 <code>p-2</code> 所对应的真实 DOM 应该移动。实现代码如下：</p>\n<pre class=\"code-rows\"><code> if (moved) {\n   const seq = lis(sources)\n<p>// s 指向最长递增子序列的最后一个元素<br />\nlet s = seq.length - 1<br />\nlet i = count - 1<br />\nfor (i; i &gt;= 0; i–) {<br />\nif (source[i] === -1) {<br />\n// 省略部分代码<br />\n} else if (i !== seq[s]) {<br />\n// 说明该节点需要移动<br />\n// 该节点在新的一组子节点中的真实位置索引<br />\nconst pos = i + newStart<br />\nconst newVNode = newChildren[pos]<br />\n// 该节点的下一个节点的位置索引<br />\nconst nextPos = pos + 1<br />\n// 锚点<br />\nconst anchor = nextPos &lt; newChildren.length<br />\n? newChildren[nextPos].el<br />\n: null<br />\n// 移动<br />\ninsert(newVNode.el, container, anchor)<br />\n} else {<br />\n// 当 i === seq[s] 时，说明该位置的节点不需要移动<br />\n// 并让 s 指向下一个位置<br />\ns–<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>可以看到，移动节点的实现思路类似于挂载全新的节点。不同点在于，移动节点是通过 <code>insert</code> 函数来完成的。</p>\n<p>接着，进行下一轮的循环。此时索引 <code>i</code> 指向节点 <code>p-4</code>，如图 11-26 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00606.jpeg\" alt=\"\" width=\"80%\" style=\"width: 80%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-26　节点以及索引的当前状态</strong></p>\n<p>更新过程仍然分为三个步骤。</p>\n<ul>\n<li>第一步：判断表达式 <code>source[i]</code> 的值是否等于 <code>-1</code>？很明显，此时索引 <code>i</code> 的值为 <code>1</code>，表达式 <code>source[1]</code> 的值等于 <code>3</code>，条件不成立。所以节点 <code>p-4</code> 不是全新的节点，不需要挂载它。接着进行下一步判断。</li>\n<li>第二步：判断表达式 <code>i !== seq[s]</code> 是否成立？此时索引 <code>i</code> 的值为 <code>1</code>，索引 <code>s</code> 的值为 <code>1</code>。这时表达式 <code>1 === seq[1]</code> 为真，所以条件 <code>i !== seq[s]</code> 也不成立。</li>\n<li>第三步：由于第一步和第二步中的条件都不成立，所以代码会执行最终的 <code>else</code> 分支。这意味着，节点 <code>p-4</code> 所对应的真实 DOM 不需要移动，但我们仍然需要让索引 <code>s</code> 的值递减，即 <code>s--</code>。</li>\n</ul>\n<p>经过三步判断之后，我们得出结论：节点 <code>p-4</code> 不需要移动。于是进行下一轮循环，此时的状态如图 11-27 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00607.jpeg\" alt=\"\" width=\"80%\" style=\"width: 80%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 11-27　节点以及索引的当前状态</strong></p>\n<p>由图 11-27 可知，此时索引 <code>i</code> 指向节点 <code>p-3</code>。我们继续进行三个步骤的判断。</p>\n<ul>\n<li>第一步：判断表达式 <code>source[i]</code> 的值是否等于 <code>-1</code>？很明显，此时索引 <code>i</code> 的值为 <code>0</code>，表达式 <code>source[0]</code> 的值等于 <code>2</code>，所以节点 <code>p-3</code> 不是全新的节点，不需要挂载它，接着进行下一步判断。</li>\n<li>第二步：判断表达式 <code>i !== seq[s]</code> 是否成立？此时索引 <code>i</code> 的值为 <code>0</code>，索引 <code>s</code> 的值也为 <code>0</code>。这时表达式 <code>0 === seq[0]</code> 为真，因此条件也不成立，最终将执行 <code>else</code> 分支的代码，也就是第三步。</li>\n<li>第三步：到了这里，意味着节点 <code>p-3</code> 所对应的真实 DOM 也不需要移动。</li>\n</ul>\n<p>在这一轮更新完成之后，循环将会停止，更新完成。</p>\n<p>需要强调的是，关于给定序列的递增子序列的求法不在本书的讲解范围内，网络上有大量文章讲解了这方面的内容，读者可以自行查阅。如下是用于求解给定序列的最长递增子序列的代码，取自 Vue.js 3：</p>\n<pre class=\"code-rows\"><code> function getSequence(arr) {\n   const p = arr.slice()\n   const result = [0]\n   let i, j, u, v, c\n   const len = arr.length\n   for (i = 0; i &lt; len; i++) {\n     const arrI = arr[i]\n     if (arrI !== 0) {\n       j = result[result.length - 1]\n       if (arr[j] &lt; arrI) {\n         p[i] = j\n         result.push(i)\n         continue\n       }\n       u = 0\n       v = result.length - 1\n       while (u &lt; v) {\n         c = ((u + v) / 2) | 0\n         if (arr[result[c]] &lt; arrI) {\n           u = c + 1\n         } else {\n           v = c\n         }\n       }\n       if (arrI &lt; arr[result[u]]) {\n         if (u &gt; 0) {\n           p[i] = result[u - 1]\n         }\n         result[u] = i\n       }\n     }\n   }\n   u = result.length\n   v = result[u - 1]\n   while (u-- &gt; 0) {\n     result[u] = v\n     v = p[v]\n   }\n   return result\n }\n</code></pre>\n<h2 id=\"nav_point_107\">11.4　总结</h2>\n<p>快速 Diff 算法在实测中性能最优。它借鉴了文本 Diff 中的预处理思路，先处理新旧两组子节点中相同的前置节点和相同的后置节点。当前置节点和后置节点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据节点的索引关系，构造出一个最长递增子序列。最长递增子序列所指向的节点即为不需要移动的节点。</p>\n<br style=\"page-break-after:always\" />","neighbors":{"left":{"article_title":"第 10 章 双端 Diff 算法","id":740773},"right":{"article_title":"第 12 章 组件的实现原理","id":740775}},"comments":[]}