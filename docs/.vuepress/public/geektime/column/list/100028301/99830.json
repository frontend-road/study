{"id":99830,"title":"07 | 带你快速上手 Lua","content":"<p>你好，我是温铭。</p><p>在大概了解 NGINX 的基础知识后，接下来，我们就要来进一步学习 Lua了。它是 OpenResty 中使用的编程语言，掌握它的基本语法还是很有必要的。</p><p>Lua 是一个小巧精妙的脚本语言，诞生于巴西的大学实验室，这个名字在葡萄牙语里的含义是“美丽的月亮”。从作者所在的国家来看，NGINX 诞生于俄罗斯，Lua 诞生于巴西，OpenResty 诞生于中国，这三门同样精巧的开源技术都出自金砖国家，而不是欧美，也是挺有趣的一件事。</p><p>回到Lua语言上。事实上，Lua 在设计之初，就把自己定位为一个简单、轻量、可嵌入的胶水语言，没有走大而全的路线。虽然你平常工作中可能没有直接编写 Lua 代码，但 Lua 的使用其实非常广泛。很多的网游，比如魔兽世界，都会采用 Lua 来编写插件；而键值数据库 Redis 则是内置了 Lua 来控制逻辑。</p><p>另一方面，虽然 Lua 自身的库比较简单，但它可以方便地调用 C 库，大量成熟的 C 代码都可以为其所用。比如在 OpenResty 中，很多时候都需要你调用 NGINX 和 OpenSSL 的 C 函数，而这都得益于 Lua 和 LuaJIT 这种方便调用 C 库的能力。</p><p>下面，我带你来快速熟悉下 Lua 的数据类型和语法，以便你后面更顺畅地学习 OpenResty。</p><!-- [[[read_end]]] --><h2>环境和 hello world</h2><p>我们不用专门去安装标准 Lua 5.1 之类的环境，因为 OpenResty 已经不再支持标准 Lua，而只支持 LuaJIT。这里我介绍的 Lua 语法，也是和 LuaJIT 兼容的部分，而不是基于最新的 Lua 5.3，这一点需要你特别注意。</p><p>在 OpenResty 的安装目录下，你可以找到 LuaJIT 的目录和可执行文件。我这里是 Mac 环境，使用 brew 安装 OpenResty，所以你本地的路径很可能和下面的不同：</p><pre><code>$ ll /usr/local/Cellar/openresty/1.13.6.2/luajit/bin/luajit\n lrwxr-xr-x  1 ming  admin    18B  4  2 14:54 /usr/local/Cellar/openresty/1.13.6.2/luajit/bin/luajit -&gt; luajit-2.1.0-beta3\n</code></pre><p>你也可以在系统的可执行文件目录中找到它：</p><pre><code>$ which luajit\n /usr/local/bin/luajit\n</code></pre><p>并查看 LuaJIT 的版本号：</p><pre><code>$ luajit -v\n LuaJIT 2.1.0-beta2 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/\n</code></pre><p>查清楚这些信息后，你可以新建一个 <code>1.lua</code> 文件，并用 luajit 来运行其中的 hello world 代码：</p><pre><code>$ cat 1.lua\nprint(&quot;hello world&quot;)\n\n$ luajit 1.lua\n hello world\n</code></pre><p>当然，你还可以使用 <code>resty</code> 来直接运行，要知道，它最终也是用 LuaJIT 来执行的：</p><pre><code>$ resty -e 'print(&quot;hello world&quot;)'\n hello world\n</code></pre><p>上述两种运行 hello world 的方式都是可行的。不顾对我来说，我更喜欢 <code>resty</code> 这种方式，因为后面很多 OpenResty 的代码，也都是通过 <code>resty</code> 来运行的。</p><h2>数据类型</h2><p>Lua 中的数据类型不多，你可以通过 <code>type</code> 函数来返回一个值的类型，比如下面这样的操作：</p><pre><code>$ resty -e 'print(type(&quot;hello world&quot;)) \n print(type(print)) \n print(type(true)) \n print(type(360.0))\n print(type({}))\n print(type(nil))\n '\n</code></pre><p>会打印出如下内容：</p><pre><code> string\n function\n boolean\n number\n table\n nil\n</code></pre><p>这几种就是 Lua 中的基本数据类型了。下面我们来简单介绍一下它们。</p><h3>字符串</h3><p>在 Lua 中，字符串是不可变的值，如果你要修改某个字符串，就等于创建了一个新的字符串。这种做法显然有利有弊：好处是即使同一个字符串出现了很多次，在内存中也只有一份；但劣势也很明显，如果你想修改、拼接字符串，会额外地创建很多不必要的字符串。</p><p>我们举一个例子，来说明这个弊端。下面这段代码，是把 1 到 10 这些数字当作字符串拼接起来。对了，在 Lua 中，我们使用两个点号来表示字符串的相加：</p><pre><code>$ resty -e 'local s  = &quot;&quot;\n for i = 1, 10 do\n     s = s .. tostring(i)\n end\n print(s)'\n</code></pre><p>这里我们循环了 10 次，但只有最后一次是我们想要的，而中间新建的 9 个字符串都是无用的。它们不仅占用了额外的空间，也消耗了不必要的 CPU 运算。</p><p>当然，在后面的性能优化章节，我们会有对应的方法来解决它。</p><p>另外，在 Lua 中，你有三种方式可以表达一个字符串：单引号、双引号，以及长括号（<code>[[]]</code>）。前面两种都比较好理解，别的语言一般也这么用，那么长括号有什么用处呢？</p><p>我们看一个具体的示例：</p><pre><code>$ resty -e 'print([[string has \\n and \\r]])'\n string has \\n and \\r\n</code></pre><p>你可以看到，长括号中的字符串不会做任何的转义处理。</p><p>你也许会问另外一个问题：如果上面那段字符串中包括了长括号本身，又该怎么处理呢？答案很简单，就是在长括号中间增加一个或者多个 <code>=</code> 符号：</p><pre><code>$ resty -e 'print([=[ string has a [[]]. ]=])'\n  string has a [[]].\n</code></pre><h3>布尔值</h3><p>这个很简单，true 和 false。但在 Lua 中，只有 nil 和 false 为假，其他都为真，包括 0 和空字符串也为真。我们可以用下面的代码印证一下：</p><pre><code>$ resty -e 'local a = 0\n if a then\n   print(&quot;true&quot;)\n end\n a = &quot;&quot;\n if a then\n   print(&quot;true&quot;)\n end'\n</code></pre><p>这种判断方式和很多常见的开发语言并不一致，所以，为了避免在这种问题上出错，你可以显式地写明比较的对象，比如下面这样：</p><pre><code>$ resty -e 'local a = 0\n if a == false then\n   print(&quot;true&quot;)\n end\n '\n\n</code></pre><h3>数字</h3><p>Lua 的 number 类型，是用双精度浮点数来实现的。值得一提的是，LuaJIT 支持 <code>dual-number</code>（双数）模式，也就是说， LuaJIT 会根据上下文来用整型来存储整数，而用双精度浮点数来存放浮点数。</p><p>此外，LuaJIT 还支持<code>长长整型</code>的大整数，比如下面的例子：</p><pre><code>$ resty -e 'print(9223372036854775807LL - 1)'\n9223372036854775806LL\n</code></pre><h3>函数</h3><p>函数在 Lua 中是一等公民，你可以把函数存放在一个变量中，也可以当作另外一个函数的入参和出参。</p><p>比如，下面两个函数的声明是完全等价的：</p><pre><code>function foo()\n end\n</code></pre><p>和</p><pre><code>foo = function ()\n end\n</code></pre><h3>table</h3><p>table 是 Lua 中唯一的数据结构，自然非常重要，所以后面我会用专门的章节来介绍它。我们可以先来看一个简单的示例代码：</p><pre><code>$ resty -e 'local color = {first = &quot;red&quot;}\nprint(color[&quot;first&quot;])'\n red\n</code></pre><h3>空值</h3><p>在 Lua 中，空值就是 nil。如果你定义了一个变量，但没有赋值，它的默认值就是 nil：</p><pre><code>$ resty -e 'local a\n print(type(a))'\n nil\n</code></pre><p>当你真正进入 OpenResty 体系中后，会发现很多种空值，比如 <code>ngx.null</code> 等等，我们后面再细聊。</p><p>Lua的数据类型，我主要就介绍这么多，先给你打个基础。一些需要重点掌握的内容，后面的文章中我们都会继续学习。在练习、使用中学习，永远是吸收新知识最便捷的方式。</p><h2>常用标准库</h2><p>很多时候，我们学习一门语言，其实就是在学习它的标准库。</p><p>Lua 比较小巧，内置的标准库并不多。而且，在 OpenResty 的环境中，Lua 标准库的优先级是很低的。对于同一个功能，我更推荐你优先使用 OpenResty 的 API 来解决，然后是 LuaJIT 的库函数，最后才是标准 Lua 的函数。</p><p><code>OpenResty的API &gt; LuaJIT的库函数 &gt; 标准Lua的函数</code>，这个优先级后面会被反复提及，它不仅关系到是否好用这一点，更会对性能产生非常大的影响。</p><p>不过，尽管如此，在实际的项目开发中，我们还是不可避免会用到一些 Lua 库。这里，我挑选了几个比较常用的标准库做下介绍，如果你想要了解更多内容，可以查阅 Lua 的官方文档。</p><h3>string 库</h3><p>字符串操作是我们最常用到的，也是坑最多的地方。有一个简单的原则，那就是如果涉及到正则表达式的，请一定要使用 OpenResty 提供的 <code>ngx.re.*</code> 来解决，不要用 Lua 的 <code>string.*</code> 处理。这是因为，Lua 的正则独树一帜，不符合 PCRE 的规范，我相信绝大部分工程师是玩不转的。</p><p>其中 <code>string.byte(s [, i [, j ]])</code>，是比较常用到的一个 string 库函数，它返回字符 s[i]、s[i + 1]、s[i + 2]、······、s[j] 所对应的 ASCII 码。i 的默认值为 1，即第一个字节，j 的默认值为 i。</p><p>下面我们来看一段示例代码：</p><pre><code>$ resty -e 'print(string.byte(&quot;abc&quot;, 1, 3))\n print(string.byte(&quot;abc&quot;, 3)) -- 缺少第三个参数，第三个参数默认与第二个相同，此时为 3\n print(string.byte(&quot;abc&quot;))    -- 缺少第二个和第三个参数，此时这两个参数都默认为 1\n '\n</code></pre><p>它的输出为：</p><pre><code> 979899\n 99\n 97\n</code></pre><h3>table 库</h3><p>在 OpenResty 的上下文中，对于Lua 自带的 table 库，除了 <code>table.concat</code> 、<code>table.sort</code> 等少数几个函数，大部分我都不推荐使用。至于它们的细节，我们留在 LuaJIT 章节中专门来讲。</p><p>这里我简单提一下<code>table.concat</code> 。<code>table.concat</code>一般用在字符串拼接的场景下，比如下面这个例子。它可以避免生成很多无用的字符串。</p><pre><code>$ resty -e 'local a = {&quot;A&quot;, &quot;b&quot;, &quot;C&quot;}\n print(table.concat(a))'\n</code></pre><h3>math 库</h3><p>Lua math 库由一组标准的数学函数构成。数学库的引入，既丰富了 Lua 编程语言的功能，同时也方便了程序的编写。</p><p>在 OpenResty 的实际项目中，我们很少用 Lua 去做数学方面的运算，不过其中和随机数相关的 <code>math.random()</code> 和 <code>math.randomseed()</code> 两个函数，倒是比较常用，比如下面的这段代码，它可以在指定的范围内，随机地生成两个数字。</p><pre><code>$ resty -e 'math.randomseed (os.time()) \nprint(math.random())\n print(math.random(100))'\n</code></pre><h2>虚变量</h2><p>了解了这些常见的标准库，接下来，我们再来学习一个新的概念——虚变量。</p><p>设想这么一个场景，当一个函数返回多个值的时候，有些返回值我们并不需要，这时候，应该怎么接收这些值呢？</p><p>不知道你是怎么看待这件事的，起码对我来说，要想法设法给这些用不到的变量，去赋予有意义的名字，着实是一件很折磨人的事情。</p><p>还好， Lua 中可以完美地解决这一点。Lua 提供了一个虚变量（dummy variable）的概念， 按照惯例以一个下划线来命名，用来表示丢弃不需要的数值，仅仅起到占位的作用。</p><p>下面我们以 <code>string.find</code> 这个标准库函数为例，来看虚变量的用法。这个标准库函数会返回两个值，分别代表开始和结束的下标。</p><p>如果我们只需要获取开始的下标，那么很简单，只声明一个变量来接收 <code>string.find</code> 的返回值即可：</p><pre><code>$ resty -e 'local start = string.find(&quot;hello&quot;, &quot;he&quot;)\n print(start)'\n 1\n</code></pre><p>但如果你只想获取结束的下标，那就必须使用虚变量了：</p><pre><code>$ resty -e 'local  _, end_pos = string.find(&quot;hello&quot;, &quot;he&quot;)\n print(end_pos)'\n 2\n</code></pre><p>除了在返回值里使用，虚变量还经常用于循环中，比如下面这个例子：</p><pre><code>$ resty -e 'for _, v in ipairs({4,5,6}) do\n     print(v)\n end'\n 4\n 5\n 6\n</code></pre><p>而当有多个返回值需要忽略时，你可以重复使用同一个虚变量。这里我就不举例子了，你可以试着自己写一个这样的示例代码吗？欢迎你把代码贴在留言区里和我分享、交流。</p><h2>写在最后</h2><p>今天，我们一起快速地学习了标准 Lua 的数据结构和语法，相信你对这门简单精巧的语言已经有了初步的了解。下节课，我会带你了解  Lua 和 LuaJIT 的关系，LuaJIT 更是 OpenResty 中的重头戏，值得我们深入挖掘。</p><p>最后，我想再为你留下一道思考题。</p><p>还记得这节课讲math库时，学过的这段代码吗？它可以在指定范围内，随机生成两个数字。</p><pre><code>$ resty -e 'math.randomseed (os.time()) \nprint(math.random())\n print(math.random(100))'\n</code></pre><p>不过，你可能注意到了，这段代码是用当前时间戳作为种子的，那么这种方法是否有问题呢？又该如何生成好的种子呢？要知道，很多时候我们生成的随机数其实并不随机，并且有很大的安全隐患。</p><p>欢迎在留言区来说说你的看法，也欢迎你把这篇文章转发给你的同事、朋友。我们一起交流、一起进步。</p><p></p>","neighbors":{"left":{"article_title":"06 | OpenResty 中用到的 NGINX 知识","id":99522},"right":{"article_title":"08 | LuaJIT分支和标准Lua有什么不同？","id":100402}},"comments":[{"had_liked":false,"id":102567,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1560253510,"is_pvip":true,"replies":[{"id":"37359","content":"很详细了。如果有加密的需求，从 &#47;dev&#47;random 和 &#47;dev&#47;urandom 读取会更安全，毕竟只是 init 的时候读取一次。","user_name":"作者回复","comment_id":102567,"uid":"1017955","ip_address":"","utype":1,"ctime":1560410758,"user_name_real":"温铭@OpenResty"}],"discussion_count":2,"race_medal":0,"score":"74574697542","product_id":100028301,"comment_content":"网上有种设置随机数种子的方法：<br>math.randomseed(tostring(os.time()):reverse():sub(1, 6))<br>即将时间值转换为字符串，然后将字符串倒序，然后取其前六位作为种子。之所以这样做的原因是因为当时间变化很小的时候，产生随机数的序列很相似。所以通过这种方法使得即使时间变化很小，由于reverse操作，时间的高位变成低位，低位变成高位，随机数种子的值变化会很大。<br><br>关于这种做法有以下两个问题：<br>1.当前执行os.time()打印的时间是1560251897，总共十位。认为函数中使用sub(1, 6)这里取前6位的中的6并不是一个固定的值，而且并没有什么意义，直接使用math.randomseed(tostring(os.time()):reverse())就能达到想要的效果。难道有其他我没有想到的原因？<br><br>2.这样的做法并不能阻止在同一秒内产生相同的随机数序列，如执行以下代码：<br>math.randomseed(tostring(os.time()):reverse():sub(1, 6)) <br>print(math.random()) <br>print(math.random())<br>math.randomseed(tostring(os.time()):reverse():sub(1, 6)) <br>print(math.random()) <br>print(math.random())<br>输出结果是：<br>0.49256881466135<br>0.0046852543018758<br>0.49256881466135<br>0.0046852543018758<br><br>另一种说法是对计算机的一些操作，如键盘、鼠标操作，会产生一些随机数，这些随机数叫熵。用户可以通过读取&#47;dev&#47;random和&#47;dev&#47;urandom文件来获取这些随机数。只不过读取&#47;dev&#47;random时，如果文件里的熵不足时会阻塞。读取&#47;dev&#47;urandom时，不会阻塞，但不能保证是合适的数据（熵不足时怎么处理未测试）。关于熵的还有其他相关知识，如通过操作鼠标、键盘等可以产生熵，通过cat &#47;proc&#47;sys&#47;kernel&#47;random&#47;entropy_avail操作可以查看有多少熵可以用等。<br>这样的话，通过读取&#47;dev&#47;urandom设置随机数种子，是一种方法，但觉得这种文件读取操作，效率太低。<br><br>另外看留言里有人说通过系统调用，利用芯片电磁噪声来生成随机数。没有搜到是哪个系统调用。<br>","like_count":17,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453482,"discussion_content":"很详细了。如果有加密的需求，从 /dev/random 和 /dev/urandom 读取会更安全，毕竟只是 init 的时候读取一次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560410758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561007350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102555,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1560251479,"is_pvip":true,"replies":[{"id":"37351","content":"👍","user_name":"作者回复","comment_id":102555,"uid":"1017955","ip_address":"","utype":1,"ctime":1560409765,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"23035087959","product_id":100028301,"comment_content":"返回三个变量，前两个变量重复使用同一个虚变量的例子：<br>resty -e &#39;local function sum(a, b) return a, b, a + b end local _, _, result = sum(1, 2) print(result)&#39;<br><br>os.time返回当前时间的秒数，如果在同一秒内设置当前时间秒数为种子，然后执行随机数生成函数，产生的随机数序列是一样的。如：<br>resty -e &#39;math.randomseed(os.time()) print(math.random()) print(math.random()) math.randomseed(os.time()) print(math.random()) print(math.random())&#39;<br>输出结果是：<br>0.71251659032569<br>0.36755092546457<br>0.71251659032569<br>0.36755092546457<br>可以看到两次产生的随机数序列相同。","like_count":5,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453476,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560409765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102043,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1560126259,"is_pvip":true,"replies":[{"id":"37362","content":"是的，没错","user_name":"作者回复","comment_id":102043,"uid":"1017955","ip_address":"","utype":1,"ctime":1560410786,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"23034962739","product_id":100028301,"comment_content":"明白了， os.time 是秒级别的，如果短时间运行多次会出现相同的随机数","like_count":5,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453232,"discussion_content":"是的，没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560410786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102010,"user_name":"叫我图图就可以了","can_delete":false,"product_type":"c1","uid":1179211,"ip_address":"","ucode":"78AD0A45E9E412","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4b/87219faf.jpg","comment_is_top":false,"comment_ctime":1560098141,"is_pvip":false,"replies":[{"id":"37367","content":"uuid 本身也是先有种子，然后通过随机数生成的。","user_name":"作者回复","comment_id":102010,"uid":"1017955","ip_address":"","utype":1,"ctime":1560411046,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"18739967325","product_id":100028301,"comment_content":"种子会出现相同的,简单的做法可以用GUID或者UUID之类的做种子吧.","like_count":4,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453218,"discussion_content":"uuid 本身也是先有种子，然后通过随机数生成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560411046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102436,"user_name":"John","can_delete":false,"product_type":"c1","uid":1458885,"ip_address":"","ucode":"ECACBE31D5D1A7","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/c5/7913cdb0.jpg","comment_is_top":false,"comment_ctime":1560220700,"is_pvip":false,"replies":[{"id":"37366","content":"不会提高性能，模块在单个 worker 中只会加载一次，和是否加了 local 无关。设置为全局变量，很容易出错，比如重名什么的。在OpenResty 中建议所有变量都 local。","user_name":"作者回复","comment_id":102436,"uid":"1017955","ip_address":"","utype":1,"ctime":1560410931,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"14445122588","product_id":100028301,"comment_content":"请问一下老师，如果我在init_by_lua 中引入某个模块，不加local，作为全局变量，是不是说这个模块就可以在以后rewrite,access 等阶段直接拿来使用？这样做相比较于在各个阶段自己引入模块，是否减少了require的次数，提高了性能？","like_count":3,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453424,"discussion_content":"不会提高性能，模块在单个 worker 中只会加载一次，和是否加了 local 无关。设置为全局变量，很容易出错，比如重名什么的。在OpenResty 中建议所有变量都 local。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560410931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102376,"user_name":"Rye","can_delete":false,"product_type":"c1","uid":1175100,"ip_address":"","ucode":"5BDC40ED641A6C","user_header":"https://static001.geekbang.org/account/avatar/00/11/ee/3c/a2b67971.jpg","comment_is_top":false,"comment_ctime":1560214420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14445116308","product_id":100028301,"comment_content":"机器名+进程ID+线程ID+毫秒时间戳做种子","like_count":3},{"had_liked":false,"id":102022,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1560120393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150054985","product_id":100028301,"comment_content":"请问一下老师我这边luajit -v 和  opm -v 都提示命令找不到, openresty的版本是openresty&#47;1.15.8.1, 想问下这种请情况是啥原因, 应该咋解决","like_count":2},{"had_liked":false,"id":102009,"user_name":"mz","can_delete":false,"product_type":"c1","uid":1003581,"ip_address":"","ucode":"1D714C23F78446","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MlmSR4YXUfrNlZdMv7bv1ic64HaxxVKcVtaxjzhXCvNC4XByICCmYUTprhOESzIV8p59N6DnSJ7HywfvGr5nicgA/132","comment_is_top":false,"comment_ctime":1560097405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150031997","product_id":100028301,"comment_content":"我怎么感觉 go 语言那个不需要的返回值的写法就是借鉴的 lua 虚变量","like_count":2},{"had_liked":false,"id":156906,"user_name":"nicknick","can_delete":false,"product_type":"c1","uid":1755306,"ip_address":"","ucode":"E5EA45655DA349","user_header":"","comment_is_top":false,"comment_ctime":1574994377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869961673","product_id":100028301,"comment_content":"所谓的虚变量就是一个普通的变量，没有任何特殊之处，只不过是不用它的值而已，单独拿出来做一个概念是否有必要","like_count":1},{"had_liked":false,"id":356177,"user_name":"JoyZ","can_delete":false,"product_type":"c1","uid":3169664,"ip_address":"湖北","ucode":"46472C7B9E34DB","user_header":"https://static001.geekbang.org/account/avatar/00/30/5d/80/139d3f02.jpg","comment_is_top":false,"comment_ctime":1662025841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662025841","product_id":100028301,"comment_content":"老师，请问下我通过openresty在lua代码里print(9223372036854775807LL - 1)这样为什么报错呢？<br>提示：<br>bad argument #1 to &#39;print&#39; (string, number, boolean, or nil expected, got cdata)<br>只有转tostring后这样print(tostring(9223372036854775807LL - 1))才能正确打印","like_count":0},{"had_liked":false,"id":324278,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2858431,"ip_address":"","ucode":"24D1E66E284411","user_header":"","comment_is_top":false,"comment_ctime":1638354312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638354312","product_id":100028301,"comment_content":"刚开始学lua脚本的时候，很不习惯，一个函数能同时返回多个变量，等后来发现挺方便的，易于扩展","like_count":0},{"had_liked":false,"id":209370,"user_name":"Surjur","can_delete":false,"product_type":"c1","uid":1771363,"ip_address":"","ucode":"D86AC620E59CB1","user_header":"https://static001.geekbang.org/account/avatar/00/1b/07/63/c54d40f4.jpg","comment_is_top":false,"comment_ctime":1587542393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587542393","product_id":100028301,"comment_content":"温老师，您好：我在看luajit和lua区别的时候有些疑问：<br>1. luajit编译生成的机器码是一直保存在内存里的吗？<br>2. 一般线上环境，提高性能，lua_code_cache是开启的，所以如果lua代码有改动，需要reload nginx，新的代码才能生效，那一旦reload了，之前编译好的机器码还存在吗？<br>3. luajit vm之所以相对lua vm高效，是因为一些热代码少了字节码转机器码的过程，因为已经有编译生成了机器码，直接执行机器码即可，是这样吗？","like_count":1},{"had_liked":false,"id":162317,"user_name":"红鲤鱼与绿鲤鱼与驴baci","can_delete":false,"product_type":"c1","uid":1199902,"ip_address":"","ucode":"CB7D8A522D665E","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/1e/cb8ddbe9.jpg","comment_is_top":false,"comment_ctime":1576499380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576499380","product_id":100028301,"comment_content":"老师您好，在 Lua 中，有三种方式可以表达一个字符串：单引号、双引号，以及长括号（[[]]），那单引号和双引号之前有什么区别呢","like_count":0},{"had_liked":false,"id":138549,"user_name":"刀斧手何在","can_delete":false,"product_type":"c1","uid":1202572,"ip_address":"","ucode":"B99D7ECC3EE954","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/8c/ba81a832.jpg","comment_is_top":false,"comment_ctime":1570331319,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1570331319","product_id":100028301,"comment_content":"老师，有个问题请教一下。我的代码大概是这样的。<br>```<br>ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body<br>local arg = ngx.req.get_post_args()<br>--ngx.say(type(arg))<br>ngx.print(arg)<br>```<br>然后ngx.say的时候arg是table类型。ngx.print我看文档是说支持打印table的https:&#47;&#47;github.com&#47;openresty&#47;lua-nginx-module#ngxprint。但是我 ngx.print(arg)就会报错。<br>error-log是这样的。<br>```<br>2019&#47;10&#47;06 10:57:27 [error] 42634#1017147: *50 lua entry thread aborted: runtime error: &#47;Users&#47;fang&#47;Code&#47;lua_test&#47;lua_script&#47;params.lua:9: bad argument #1 to &#39;print&#39; (non-array table found)<br>stack traceback:<br>coroutine 0:<br>\t[C]: in function &#39;print&#39;<br>\t&#47;Users&#47;fang&#47;Code&#47;lua_test&#47;lua_script&#47;params.lua:9: in main chunk, client: 127.0.0.1, server: localhost, request: &quot;POST &#47;print_params HTTP&#47;1.1&quot;, host: &quot;localhost&quot;<br>```<br>提示参数出错 no array or table found 。 那么这个 arg 到底是不是一个table","like_count":0,"discussions":[{"author":{"id":1325126,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dglMUGgevn9w5w3AGtTDibGhqGjf7G3GHwlOGXQl25xD7g2EsEktgxh2v4dgriaI2yLG2j45IhZCbhVg1eDrugOQ/132","nickname":"1024","note":"","ucode":"9DFAF1F44D469F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82936,"discussion_content":"ngx.print只支持数字索引的一维数组，如：{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576402506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113366,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1562984960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562984960","product_id":100028301,"comment_content":"思考题：使用系统时间戳作为种子 在分布式环境中机器的时间不一致 导致可能产生的种子是一样的 进而可能导致随机数不再随机。 解决的防止可以使用统一的时间机器 而非 各自机器的时间。 这个问题跟生产唯一性分布式ID有点关联","like_count":0},{"had_liked":false,"id":110030,"user_name":"夏天的风","can_delete":false,"product_type":"c1","uid":1102202,"ip_address":"","ucode":"8B545AD138C18B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/7a/ea521259.jpg","comment_is_top":false,"comment_ctime":1562153655,"is_pvip":false,"replies":[{"id":"40892","content":"推荐在 Linux 环境运行专栏的代码，Windows 上OpenResty 自己也是功能受限的。","user_name":"作者回复","comment_id":110030,"uid":"1017955","ip_address":"","utype":1,"ctime":1562736376,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"1562153655","product_id":100028301,"comment_content":"请问一下windows上怎么运行resty，我看用luajit a.lua是可以成功的，用luajit -e &#39;print(&quot;hello&quot;)&#39; 会报错，用resty -e &#39;print(&quot;hello&quot;)&#39; 也会报同样的错误。<br>D:\\lua&gt;luajit -e &#39;print(&quot;hello&quot;)&#39;<br>luajit: (command line):1: unexpected symbol near &#39;&#39;print(hello)&#39;&#39;<br> <br>D:\\lua&gt;luajit a.lua<br>hello world<br><br>","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456691,"discussion_content":"推荐在 Linux 环境运行专栏的代码，Windows 上OpenResty 自己也是功能受限的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562736376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104927,"user_name":"wusiration","can_delete":false,"product_type":"c1","uid":1104438,"ip_address":"","ucode":"A9403377054F1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","comment_is_top":false,"comment_ctime":1560872098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560872098","product_id":100028301,"comment_content":"秒级的os.time在短时间调用中，random函数会以相同的随机种子产生相同的随机数","like_count":0},{"had_liked":false,"id":104180,"user_name":"小飞哥 ‍超級會員","can_delete":false,"product_type":"c1","uid":1110049,"ip_address":"","ucode":"417F9563B3005B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/21/104b9565.jpg","comment_is_top":false,"comment_ctime":1560676475,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1560676475","product_id":100028301,"comment_content":"localhost: &#47;usr&#47;local&#47;opt&#47;openresty&gt; ll &#47;usr&#47;local&#47;Cellar&#47;openresty&#47;1.15.8.1&#47;luajit&#47;bin&#47;luajit<br>lrwxr-xr-x  1 yuesf  admin  18  6 12 07:04 &#47;usr&#47;local&#47;Cellar&#47;openresty&#47;1.15.8.1&#47;luajit&#47;bin&#47;luajit -&gt; luajit-2.1.0-beta3<br>localhost: &#47;usr&#47;local&#47;opt&#47;openresty&gt; luajit -v<br>-bash: luajit: command not found<br><br>luajit 是不是存在， 为什么 执行luajit 命令说不存在<br>","like_count":0,"discussions":[{"author":{"id":1950389,"avatar":"","nickname":"无关风月","note":"","ucode":"F5979EB048F7FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558760,"discussion_content":"我也是这样请问怎么解决的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648455858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1960712,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibXBFWREdicZXJYEqwzSK5LuHL3EqCo1oUx8KUhhz6SG5qJkicFbaUAq4RWR17ky5o5k3XdYY9YZqzBTdlOmDiatEQ/132","nickname":"范再军","note":"","ucode":"E058BCF3BD2E4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234940,"discussion_content":"用resty命令就行 resty hello.lua","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587006901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104179,"user_name":"小飞哥 ‍超級會員","can_delete":false,"product_type":"c1","uid":1110049,"ip_address":"","ucode":"417F9563B3005B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/21/104b9565.jpg","comment_is_top":false,"comment_ctime":1560676270,"is_pvip":false,"replies":[{"id":"37914","content":"luajit 在 &#47;usr&#47;local&#47;openresty&#47;luajit&#47; 目录中，避免污染系统的 luajit","user_name":"作者回复","comment_id":104179,"uid":"1017955","ip_address":"","utype":1,"ctime":1560840392,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"1560676270","product_id":100028301,"comment_content":"为什么我这里没有luajit？<br>localhost: ~&gt; whicht luajit<br>-bash: whicht: command not found<br>localhost: ~&gt; which luajit<br>localhost: ~&gt; luajit -v<br>-bash: luajit: command not found<br>localhost: ~&gt;<br><br>是否我安装有问题<br>localhost: &#47;usr&#47;local&#47;opt&#47;openresty&gt; pwd<br>&#47;usr&#47;local&#47;opt&#47;openresty<br>localhost: &#47;usr&#47;local&#47;opt&#47;openresty&gt; openresty -v<br>nginx version: openresty&#47;1.15.8.1<br>localhost: &#47;usr&#47;local&#47;opt&#47;openresty&gt;","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454161,"discussion_content":"luajit 在 /usr/local/openresty/luajit/ 目录中，避免污染系统的 luajit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560840392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102232,"user_name":"chengzise","can_delete":false,"product_type":"c1","uid":1006070,"ip_address":"","ucode":"1C27D216359894","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/f6/ed66d1c1.jpg","comment_is_top":false,"comment_ctime":1560165824,"is_pvip":false,"replies":[{"id":"37358","content":"就是要有足够的熵","user_name":"作者回复","comment_id":102232,"uid":"1017955","ip_address":"","utype":1,"ctime":1560410650,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"1560165824","product_id":100028301,"comment_content":"1. 用当前时间戳作为种子的，是通用做法没有什么大问题。这种方式利用的是随机数生成函数，随机数重复周期很长而已，不能算是完全随机。 大多数使用环境没什么问题。<br>2. 在要求严格随机数环境中，例如：加解密算法。可以使用系统提供的随机数接口，这种方式利用的是芯片电磁噪声来生成随机数。由于需要经过系统调用，理论上速度没有第一种方式快。<br>可以根据需要选择哪种方式。","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453303,"discussion_content":"就是要有足够的熵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560410650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102192,"user_name":"cylim","can_delete":false,"product_type":"c1","uid":1005082,"ip_address":"","ucode":"941310C208BDC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/1a/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1560158712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560158712","product_id":100028301,"comment_content":"brew install luajit 安装luajit。 opm没有-v参数，可是是可以用的。","like_count":0},{"had_liked":false,"id":102128,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1560144092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560144092","product_id":100028301,"comment_content":"luajit -v 和 opm -v 都提示命令找不到, 这肯定是PATH的设置不对。<br>lua 中pairs 和 ipairs区别可以参考下面的文章：<br>https:&#47;&#47;blog.csdn.net&#47;witch_soya&#47;article&#47;details&#47;7556595","like_count":0},{"had_liked":false,"id":102124,"user_name":"moshufenmo","can_delete":false,"product_type":"c1","uid":1291505,"ip_address":"","ucode":"75A9E237825AF6","user_header":"https://static001.geekbang.org/account/avatar/00/13/b4/f1/61cd0653.jpg","comment_is_top":false,"comment_ctime":1560142232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560142232","product_id":100028301,"comment_content":"代表key 没有实际意义","like_count":0},{"had_liked":false,"id":102042,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1560125681,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1560125681","product_id":100028301,"comment_content":"执行 resty -e &#39;print(math.random())&#39;<br>执行多次，为什么每次生成的随机数都一样呢？<br>","like_count":0,"discussions":[{"author":{"id":1305369,"avatar":"https://static001.geekbang.org/account/avatar/00/13/eb/19/0d990b03.jpg","nickname":"ZeroIce","note":"","ucode":"30133BA83CE349","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3798,"discussion_content":"你解决了？我也是这样子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564817743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102026,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1560123041,"is_pvip":false,"replies":[{"id":"37363","content":"代表的就是下标，也就是 key","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1560410810,"ip_address":"","comment_id":102026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560123041","product_id":100028301,"comment_content":"请问一下老师在for _, v in ipairs({4,5,6}) do ... 这段代码中的虚变量表示的是什么含义, 有点没太看懂.","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453222,"discussion_content":"代表的就是下标，也就是 key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560410810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}