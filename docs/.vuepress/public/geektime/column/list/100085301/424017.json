{"id":424017,"title":"20｜4 Steps ：如何更好地阅读Rust源码？","content":"<p>你好，我是陈天。</p><p>到目前为止，Rust 的基础知识我们就学得差不多了。这倒不是说已经像用筛子一样，把基础知识仔细筛了一遍，毕竟我只能给你提供学习Rust的思路，扫清入门障碍。老话说得好，师傅领进门修行靠个人，在 Rust 世界里打怪升级，还要靠你自己去探索、去努力。</p><p>虽然不能帮你打怪，但是打怪的基本技巧可以聊一聊。所以在开始阶段实操引入大量新第三方库之前，我们非常有必要先聊一下这个很重要的技巧：<strong>如何更好地阅读源码</strong>。</p><p>其实会读源码是个终生受益的开发技能，却往往被忽略。在我读过的绝大多数的编程书籍里，很少有讲如何阅读代码的，就像世间的书籍千千万万，“如何阅读一本书”这样的题材却凤毛麟角。</p><p>当然，在解决“如何”之前，我们要先搞明白“为什么”。</p><h2>为什么要阅读源码？</h2><p>如果课程的每一讲你都认真看过，会发现时刻都在引用标准库的源码，让我们在阅读的时候，不光学基础知识，还能围绕它的第一手资料也就是源代码展开讨论。</p><p>如果说他人总结的知识是果实，那源代码就是结出这果实的种子。只摘果子吃，就是等他人赏饭，非常被动，也不容易分清果子的好坏；如果靠朴素的源码种子结出了自己的果实，确实前期要耐得住寂寞施肥浇水，但收割的时刻，一切尽在自己的掌控之中。</p><!-- [[[read_end]]] --><p>作为开发者，我们每天都和代码打交道。经过数年的基础教育和职业培训，我们都会“写”代码，或者至少会抄代码和改代码。但是，会读代码的其实并不多，会读代码又真正能读懂一些大项目源码的，少之又少。</p><p>这种怪状，真要追究起来，就是因为<strong>前期我们所有的教育和培训都在强调怎么写代码</strong>，并没有教怎么读代码，而走入工作后，大多数场景也都是一个萝卜一个坑，<strong>我们只需要了解系统的一个局部就能开展工作，读和工作内容不相干的代码，似乎没什么用</strong>。</p><p>那没有读过大量代码究竟有什么问题，毕竟工作好像还是能正常开展？就拿跟写代码有很多相通之处的写作来对比。</p><p>小时候我们都经历过读课文、背课文、写作文的过程。除了学习语法和文法知识外，从小学开始，经年累月，阅读各种名家作品，经过各种写作训练，才累积出自己的写作能力。所以可以说，写作建立在大量阅读基础上。</p><p>而我们写代码的过程就很不同了，在学会基础的语法和试验了若干 example 后，跳过了大量阅读名家作品的阶段，直接坐火箭般蹿到自己开始写业务代码。</p><p>这样跳过了大量的代码阅读有三个问题：</p><p>首先没有足够积累，我们很容易<strong>养成 StackOverflow driven 的写代码习惯</strong>。</p><p>遇到不知如何写的代码，从网上找现成的答案，找个高票的复制粘贴，改一改凑活着用，先完成功能再说。写代码的过程中遇到问题，就开启调试模式，要么设置无数断点一步步跟踪，要么到处打印信息试图为满是窟窿的代码打上补丁，导致写代码的整个过程就是一部调代码的血泪史。</p><p>其次，<strong>因为平时基础不牢靠，我们靠边写边学的进步是最慢的</strong>。道理很简单，前辈们踩过坑总结的经验教训，都不得不亲自用最慢的法子一点点试着踩一遍。</p><p>最后还有一个非常容易被忽略的天花板问题，<strong>周围能触达的那个最强工程师开发水平的上限，就是我们的上限</strong>。</p><p>但是如果重视读源码平时积累，并且具备一定阅读技巧，这三个问题就能迎刃而解。就像写作文形容美女时，你立即能想到“肌肤胜雪、明眸善睐、齿如含贝、气若幽兰……”，而不是憋了半天就三字“哇美女”。为了让我们在写代码的时候，摆脱只会“哇美女”这样的初级阶段，多读源码非常关键。</p><h3>三大功用</h3><p>读源码的第一个好处是，<strong>知识的源头在你这里，你可以根据事实来分辨是非，而不是迷信权威</strong>。比如说之前讲 Rc 时（<a href=\"https://time.geekbang.org/column/article/416722\">第9讲</a>），我们通过源码引出 Box::leak ，回答了为啥 Rc 可以突破 Rust 单一所有权的桎梏；谈到 FnOnce 时（<a href=\"https://time.geekbang.org/column/article/424009\">第19讲</a>），通过源码一眼看透为啥 FnOnce 只能调用一次。</p><p>未来你在跟别人分享的时候，可以很自信地回答这些问题，而不必说因为《陈天的 Rust 第一课》里是这么说的，这也解决了刚才的第一个问题。</p><p>通过源码我们还学到了很多技巧。比如 Rc::clone() 如何使用内部可变性来保持 Clone trait 的不可变约束（<a href=\"https://time.geekbang.org/column/article/416722\">第9讲</a>）；Iterator 里的方法如何通过不断构造新的 Iterator 数据结构，来支持 lazy evaluation （<a href=\"https://time.geekbang.org/column/article/422975\">第16讲</a>）。</p><p>未来你在写代码时，这些技巧都可以使用，从“哇美女”的初级水平到可以试着使用“一笑倾城，再笑倾国”的地步。这是读源码的第二个好处，<strong>看别人的代码，积累了素材，开拓了思路，自己写代码时可以“文思如泉涌，下笔如有神”</strong>。</p><p>最后一个能解决的问题就是打破天花板了。累积素材是基础，被启发出来的思路将这些素材串成线，才形成了自己的知识。</p><p>优秀的代码读得越多，越能引发思考，从而引发更多的阅读，形成一个飞轮效应，让自己的知识变得越来越丰富。而知识的融会贯通，最终形成读代码的第三大功用：<strong>通过了解、吸收别人的思想，去芜存菁，最终形成自己的思想或者说智慧</strong>。</p><p>当然从素材、到知识、再到智慧，要长期积累，并非一朝一夕之功。搞明白“为什么”给到我们的三个学习方向，所以现在来进一步解决“如何”，分享一下我的方法论，为你的积累助助力。</p><h2>如何阅读源码呢？</h2><p>我们以第三方库 <a href=\"https://docs.rs/bytes/1.1.0/bytes/\">Bytes</a> 为例，来看看如何阅读源码。希望你跟着今天的节奏走，不管是否关心 bytes 的实现，都先以它为蓝本，把基本方法熟悉一遍，再扩展到更多代码的阅读，比如 <a href=\"https://github.com/hyperium/hyper\">hyper</a>、<a href=\"https://github.com/Geal/nom\">nom</a>、<a href=\"https://github.com/tokio-rs/tokio\">tokio</a>、<a href=\"https://github.com/hyperium/tonic\">tonic</a> 等。</p><p>Bytes 是 tokio 下一个高效处理网络数据的库，代码本身 3.5k LoC（不包括 2.1k LoC 注释），加上测试 5.3k。代码结构非常简单：</p><pre><code class=\"language-plain\">❯ tree src\nsrc\n├── buf\n│&nbsp;&nbsp; ├── buf_impl.rs\n│&nbsp;&nbsp; ├── buf_mut.rs\n│&nbsp;&nbsp; ├── chain.rs\n│&nbsp;&nbsp; ├── iter.rs\n│&nbsp;&nbsp; ├── limit.rs\n│&nbsp;&nbsp; ├── mod.rs\n│&nbsp;&nbsp; ├── reader.rs\n│&nbsp;&nbsp; ├── take.rs\n│&nbsp;&nbsp; ├── uninit_slice.rs\n│&nbsp;&nbsp; ├── vec_deque.rs\n│&nbsp;&nbsp; └── writer.rs\n├── bytes.rs\n├── bytes_mut.rs\n├── fmt\n│&nbsp;&nbsp; ├── debug.rs\n│&nbsp;&nbsp; ├── hex.rs\n│&nbsp;&nbsp; └── mod.rs\n├── lib.rs\n├── loom.rs\n└── serde.rs\n</code></pre><p>能看到，脉络很清晰，是很容易阅读的代码。</p><p>先简单讲一下读 Rust 代码的顺序：从 crate 的大纲开始，先了解目标代码能干什么、怎么用；然后学习核心 trait，看看它支持哪些功能；之后再掌握主要的数据结构，开始写一些示例代码；最后围绕自己感兴趣的情景深入阅读。</p><p>至于为什么这么读，我们边读边具体说明。</p><h3>step1：从大纲开始</h3><p>我们先从文档的大纲入手。Rust 的文档系统是所有编程语言中处在第一梯队的，即便不是最好的，也是最好之一。它的文档和代码结合地很紧密，可以来回跳转。</p><p>Rust 几乎所有库的文档都在 <a href=\"http://docs.rs\">docs.rs</a> 下，比如 Bytes 的文档可以通过 <a href=\"http://docs.rs/bytes\">docs.rs/bytes</a> 访问：<br>\n<img src=\"https://static001.geekbang.org/resource/image/90/0d/906b0aa11a124a1f57044180d2f4e30d.png?wh=2000x1623\" alt=\"\"></p><p>首先阅读 crate 的文档，这样可以快速了解这个 crate 是做什么的，就像阅读一本书的时候，可以从书的序和前言入手了解梗概。除此之外，我们还可以看一下源码根目录下的 <a href=\"https://github.com/tokio-rs/bytes\">README.md</a>，作为补充资料。</p><p>有了大致了解后，你就可以深入了解自己感兴趣的内容。我们就按照初学的顺序来看。</p><p>对于 Bytes，我们看到它有两个 trait Buf / BufMut 以及两个数据结构 Bytes/BytesMut，没有 crate 级别的函数。接下来就是深入阅读代码了。</p><p>我看的顺序一般是：trait → struct → 函数/方法。因为这和我们写代码的思考方式非常类似：</p><ul>\n<li>先从需求的流程中敲定系统的行为，需要定义什么接口 trait；</li>\n<li>再考虑系统有什么状态，定义了哪些数据结构struct；</li>\n<li>最后到实现细节，包括如何为数据结构实现 trait、数据结构自身有什么算法、如何把整个流程串起来等等。</li>\n</ul><h3>step2：熟悉核心 trait 的行为</h3><p>所以先看trait，我们以 Buf trait 为例。点进去看文档，主页面给了这个 trait 的定义和一个使用示例。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ed/6f/ed1233fce110cdfcdd1dceafa39c686f.png?wh=2000x1678\" alt=\"\"></p><p>注意左侧导航栏的 “required Methods” 和 “Provided Methods”，前者是实现这个 trait 需要实现的方法，后者是缺省方法。也就是说数据结构只要实现了这个 trait 的三个方法：advance()、chunk() 和 remaining()，就可以自动实现所有的缺省方法。当然，你也可以重载某个缺省方法。</p><p>导航栏继续往下拉，可以看到 bytes 为哪些 “foreign types” 实现了 Buf trait，以及当前模块有哪些 implementors。这些信息很重要，说明了这个 trait 的生态：<br>\n<img src=\"https://static001.geekbang.org/resource/image/fa/52/fa15aba380f6ef942cc6143c6a90cc52.png?wh=2000x1655\" alt=\"\"></p><p>对于其它数据类型（foreign type）：</p><ul>\n<li>切片 &amp;[u8]、VecDeque&lt;u8&gt; 都实现了 Buf trait；</li>\n<li>如果 T 满足 Buf trait，那么 &amp;mut T、Box&lt;T&gt; 也实现了 Buf trait；</li>\n<li>如果 T 实现了 AsRef&lt;[u8]&gt;，那 Cursor&lt;T&gt; 也实现了 Buf trait。</li>\n</ul><p>所以回过头来，上一幅图文档给到的示例，一个 &amp;[u8] 可以使用 Buf trait 里的方法就顺理成章了：</p><pre><code class=\"language-rust\">use bytes::Buf;\n\nlet mut buf = &amp;b\"hello world\"[..];\n\nassert_eq!(b'h', buf.get_u8());\nassert_eq!(b'e', buf.get_u8());\nassert_eq!(b'l', buf.get_u8());\n\nlet mut rest = [0; 8];\nbuf.copy_to_slice(&amp;mut rest);\n\nassert_eq!(&amp;rest[..], &amp;b\"lo world\"[..]);\n</code></pre><p>而且也知道了，如果未来为自己的数据结构 T 实现 Buf trait，那么我们无需为 Box&lt;T&gt;，&amp;mut T 实现 Buf trait，这省去了在各种场景下使用 T 的诸多麻烦。</p><p>看到这里，我们目前还没有深入源码，但已经可以学习到高手定义 trait 的一些思路：</p><ul>\n<li>定义好 trait 后，<strong>可以考虑一下标准库的数据结构</strong>，哪些可以实现这个 trait。</li>\n<li>如果未来别人的某个类型 T ，实现了你的 trait，<strong>那他的 &amp;T、&amp;mut T、Box&lt;T&gt; 等衍生类型，是否能够自动实现这个 trait</strong>。</li>\n</ul><p>好，接着看左侧导航栏中的 “implementors”，Bytes、BytesMut、Chain、Take 都实现了 Buf trait，这样我们知道了在这个 crate 里，哪些数据结构实现了这个 trait，之后遇到它们就知道都能用来做什么了。</p><p>现在，对 Buf trait 以及围绕着它的生态，我们已经有了一个基本的认识，后面你可以从几个方向深入学习：</p><ul>\n<li>Buf trait 某个缺省方法是如何实现的，比如 <a href=\"https://docs.rs/bytes/1.1.0/src/bytes/buf/buf_impl.rs.html#287-292\">get_u8()</a>。</li>\n<li>其它类型是如何实现 Buf trait 的，比如 <a href=\"https://docs.rs/bytes/1.1.0/src/bytes/buf/buf_impl.rs.html#1021-1036\">&amp;[u8]</a>。</li>\n</ul><p>你甚至不用 clone bytes 的源码，在 <a href=\"http://docs.rs\">docs.rs</a> 里就可以直接完成这些代码的阅读，非常方便。</p><h3>step3：掌握主要的struct</h3><p>扫完 trait 的基本功能后，我们再来看数据结构。以 Bytes 这个结构为例：<br>\n<img src=\"https://static001.geekbang.org/resource/image/bf/c5/bfcb8eb1288a30101bf4912dc52b1fc5.png?wh=2000x1580\" alt=\"\"></p><p>一般来说，好的文档会给出数据结构的介绍、用法、使用时的注意事项，以及一些代码示例。了解了数据结构的基本介绍后，继续看看它的内部结构：</p><pre><code class=\"language-rust\">/// ```text\n///\n///    Arc ptrs                   +---------+\n///    ________________________ / | Bytes 2 |\n///   /                           +---------+\n///  /          +-----------+     |         |\n/// |_________/ |  Bytes 1  |     |         |\n/// |           +-----------+     |         |\n/// |           |           | ___/ data     | tail\n/// |      data |      tail |/              |\n/// v           v           v               v\n/// +-----+---------------------------------+-----+\n/// | Arc |     |           |               |     |\n/// +-----+---------------------------------+-----+\n/// ```\npub struct Bytes {\n    ptr: *const u8,\n    len: usize,\n    // inlined \"trait object\"\n    data: AtomicPtr&lt;()&gt;,\n    vtable: &amp;'static Vtable,\n}\n\npub(crate) struct Vtable {\n    /// fn(data, ptr, len)\n    pub clone: unsafe fn(&amp;AtomicPtr&lt;()&gt;, *const u8, usize) -&gt; Bytes,\n    /// fn(data, ptr, len)\n    pub drop: unsafe fn(&amp;mut AtomicPtr&lt;()&gt;, *const u8, usize),\n}\n</code></pre><p>数据结构的代码往往会有一些注释，帮助你理解它的设计。对于 Bytes 来说，顺着代码往下看：</p><ul>\n<li>它内部使用了裸指针和长度，模拟一个切片，指向内存中的一片连续地址；</li>\n<li>同时，还使用了 AtomicPtr 和手工打造的 Vtable 来模拟了 trait object 的行为。</li>\n<li>看 Vtable 的样子，大概可以推断出 Bytes 的 clone() 和 drop() 的行为是动态的，这是个很有意思的发现。</li>\n</ul><p>不过先不忙继续探索它如何实现这个行为的，继续看文档。</p><p>和 trait 类似的，在左侧的导航栏，有一些值得关注的信息（上图+下图）：这个数据结构有哪些方法（Methods）、实现了哪些 trait（Trait implementations），以及 Auto trait / Blanket trait 的实现。<br>\n<img src=\"https://static001.geekbang.org/resource/image/1e/f7/1e296bc11a95d7d3b293a426a4f95af7.png?wh=2000x1579\" alt=\"\"></p><p>可以看到，Bytes 除了实现了刚才讲过的 Buf trait 外，还实现了很多标准 trait。</p><p>这也带给我们新的启发：<strong>我们自己的数据结构，也应该尽可能实现需要的标准 trait</strong>，包括但不限于：AsRef、Borrow、Clone、Debug、Default、Deref、Drop、PartialEq/Eq、From&lt;T&gt;、Hash、IntoIterator（如果是个集合类型）、PartialOrd/Ord 等。</p><p>注意，除了这些 trait 外，Bytes 还实现了 Send / Sync。如果看很多我们接触过的数据结构，比如 Vec&lt;T&gt;，<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Send\">Send / Sync 是自动实现的</a>，但 Bytes 需要手工实现：</p><pre><code class=\"language-rust\">unsafe impl Send for Bytes {}\nunsafe impl Sync for Bytes {}\n</code></pre><p>这是因为之前讲过，如果你的数据结构里使用了不支持 Send / Sync 的类型，编译器默认这个数据结构不能跨线程安全使用，不会自动添加 Send / Sync trait 的实现。但如果你能确保跨线程的安全性，可以手工通过 unsafe impl 实现它们。</p><p>了解一个数据结构实现了哪些 trait，非常有助于理解它如何使用。所以，<strong>标准库里的主要 trait 我们一定要好好学习，多多使用，最好能形成肌肉记忆</strong>。这样，学习别人的代码时，效率会很高。比如我看 Bytes 这个数据结构，扫一下它实现了哪些 trait，就基本能知道：</p><ul>\n<li>什么数据结构可以转化成 Bytes，也就是如何生成 Bytes 结构；</li>\n<li>Bytes 可以跟谁比较；</li>\n<li>Bytes 是否可以跨线程使用；</li>\n<li>在使用中，Bytes 的行为和谁比较像（看 Deref trait）。</li>\n</ul><p>这就是肌肉记忆的好处。你可以去 <a href=\"http://crates.io\">crates.io</a> 的 <a href=\"https://crates.io/categories/data-structures\">Data structures</a> 类别下多翻翻不同的库，比如 <a href=\"https://docs.rs/indexmap/1.7.0/indexmap/map/struct.IndexMap.html\">IndexMap</a>，看看它实现了哪些标准 trait，不了解的就看看那些 trait 的文档，也可以回顾<a href=\"https://time.geekbang.org/column/article/421324\">第 14 讲</a>（有哪些必须掌握的 trait）。</p><p>当你了解了数据结构的基本文档，知道它实现了哪些方法和哪些 trait 后，基本上，这个数据结构的使用就不在话下了。你也可以看源代码里的 examples 目录或者 tests 目录，看看数据结构对外是如何使用的，作为参考。</p><p>对于 bytes 库，它没有额外的 examples 目录，所以我们可以看 <a href=\"https://github.com/tokio-rs/bytes/blob/master/tests/test_bytes.rs\">tests/test_bytes.rs</a> 来理解 Bytes 类型可以如何使用。现在，你应该能比较从容地使用这个Bytes 库了，不妨尝试写一些自己的示例代码，感受它的能力。</p><h3>step4：深入研究实现逻辑</h3><p>当 trait 和数据结构都掌握好，我们已经可以从它的接口上学到很多开发上的思想和技巧，一些关键接口，也了解了足够多的实现细节。获得的知识对使用这个库来做一些事情已经绰绰有余。</p><p>大部分对源代码的学习，可以就此止步。因为对我们来说，没有太富余的时间把每个遇到的库都从头到尾研究一番，只要搞明白如何使用好 Rust 生态中可用的库来构建想构建的系统，就足够了。</p><p>但有些时候，我们希望能够更深入一步。</p><p>比如说想更好地使用这个库，希望进一步了解 Bytes 是如何做到在多线程中可以共享数据的，它跟 Arc&lt;Vec<u8>&gt; 有什么区别， Arc&lt;Vec<u8>&gt; 是不是可以完成 Bytes 的工作？又或者说，在实现某个系统时，我们也想像 Bytes 这样，实现数据结构自己的 vtable，让数据结构更灵活。</u8></u8></p><p>这时就要去深入按主题阅读代码了。这里我推荐<strong>“主题阅读”或者说“情境阅读”，就是围绕着一个特定的使用场景，以这个场景的主流程为脉络，搞明白实现原理</strong>。</p><p>这时，光靠 <a href=\"http://docs.rs\">docs.rs</a> 上的代码已经满足不了我们的需求，我们要把代码 clone 下来，用 VS Code 打开仔细研究。下图展示了本地 ~/projects/opensource/rust 目录下的代码，它们都是我在不同时期，为了不同的目的，在某些场景下阅读过的源代码：<br>\n<img src=\"https://static001.geekbang.org/resource/image/f4/72/f40b8b4661582f593781a9ab6c1d8e72.png?wh=2000x305\" alt=\"\"></p><p>我们就继续以 Bytes 如何实现自己的 vtable 为例，深入看 Bytes 是如何 clone 的？看 clone 的实现：</p><pre><code class=\"language-rust\">impl Clone for Bytes {\n    #[inline]\n    fn clone(&amp;self) -&gt; Bytes {\n        unsafe { (self.vtable.clone)(&amp;self.data, self.ptr, self.len) }\n    }\n}\n</code></pre><p>它用了 vtable 的 clone 方法，传入了 data ，指向数据的指针以及长度。根据这个信息，我们如果能找到 Bytes 定义的所有 vtable，以及每个 vtable 的 clone() 做了什么事，就足以了解 Bytes 是如何实现 vtable 的了。</p><p>因为这一讲并非讲解 Bytes 是如何实现的，就不详细一步步带读代码了。相信你很快从代码中能够找到 STATIC_VTABLE、PROMOTABLE_EVEN_VTABLE、PROMOTABLE_ODD_VTABLE 和 SHARED_VTABLE 这四张表。</p><p>后三张表是处理动态数据的，在使用时如果 Bytes 的来源是 Vec&lt;u8&gt;、Box&lt;[u8]&gt; 或者 String，它们统统被转换成 Box&lt;[u8]&gt;，并在第一次 clone() 时，生成类似 Arc&lt;T&gt; 的 Shared 结构，维护引用计数。</p><p>由于 Bytes 的 ptr 指向这个 Bytes 的起始地址，而 data 指向引用计数的地址，所以，你可以在这段内存上，生成任意多的、大小不同、起始位置不一样的 Bytes 结构，它们都</p><p>用同一个引用计数。这要比 Arc&lt;Vec<t>&gt; 要灵活得多。具体流程，你可以看下图：<br>\n<img src=\"https://static001.geekbang.org/resource/image/6f/56/6f951352fbff84e0c2b93e84cea53d56.jpg?wh=3225x2485\" alt=\"\"></t></p><p>在围绕着情景读代码时，<strong>建议你使用绘图工具，边读边记录</strong>（我用的excalidraw），非常有助于你理解代码脉络，不至于在无穷无尽的跳转中迷失了方向。</p><p>同时，善用 gdb 等工具来辅助阅读，就像第 17 讲我们剖析 HashMap 结构那样。一个场景理解完毕，这张脉络图也出来了，你可以对它稍作整理，使其成为自己知识库的一部分。</p><p>你也可以在团队内部的分享会上，对着图来分享代码，帮助团队更好地理解某些复杂的逻辑。所谓 learning by teaching，在分享的过程中，相当于又学了一遍，也许之前迷茫的地方会茅塞顿开，也许别人一个不经意的问题会让你思考之前没有想到的点。</p><h2>小结</h2><p>阅读别人的代码，尤其是优秀的代码，能帮助你快速地成长。</p><p>Rust 为了让代码和文档可读性更强，在工具链上做了巨大的努力，让我们在读源码或者别人代码的时候，很容易厘清代码的主要流程和使用方式。今天讲的阅读代码尤其是阅读 Rust 代码的很多技巧，少有人分享但又很重要，掌握好它，你就掌握了通向大牛之路的钥匙。</p><p>注意阅读的顺序：从大纲开始，先了解目标代码能干什么，怎么用；然后学习它的主要 trait；之后是数据结构，搞明白后再看看示例代码（examples）或者集成测试（tests），自己写一些示例代码；最后，围绕着自己感兴趣的情景深入阅读。并不是所有的代码都需要走到最后一步，你要根据自己的需要和精力量力而行。</p><h3>思考题</h3><p>1.我们一起大致分析了 Bytes 的 clone() 的使用的场景，你能用类似的方式研究一下 drop() 是怎么工作的么？</p><p>2.仔细看 Buf trait 里的方法，想想为什么它为 &amp;mut T 实现了 Buf trait，但没有为 &amp;T 实现 Buf trait 呢？如果你认为你找到了答案，再想想为什么它可以为 &amp;[u8] 实现 Buf trait 呢？</p><p>3.花点时间看看 BufMut trait 的文档。Vec<u8> 可以使用 BufMut 么？如果可以，试着写写代码在 Vec<u8> 上调用 BufMut 的各种接口，感受一下。</u8></u8></p><p>4.如果有余力，可以研究一下 BytesMut。重点看一下 split_off() 方法是如何实现的。</p><p>欢迎你在留言区分享自己读源码的一些故事，欢迎抢答思考题。感谢你的一路坚持，今天你完成了Rust学习的第20次打卡，我们下节课开始第一个阶段的实操，下节课见～</p><h2>参考资料</h2><p>如果在阅读 Bytes 的 clone() 场景时，对于 PROMOTABLE_EVEN_VTABLE、PROMOTABLE_ODD_VTABLE 这两张表比较迷惑，且不明白为什么会根据 ptr &amp; 0x1 是否等于 0 来提供不同的 vtable：</p><pre><code class=\"language-rust\">impl From&lt;Box&lt;[u8]&gt;&gt; for Bytes {\n    fn from(slice: Box&lt;[u8]&gt;) -&gt; Bytes {\n        // Box&lt;[u8]&gt; doesn't contain a heap allocation for empty slices,\n        // so the pointer isn't aligned enough for the KIND_VEC stashing to\n        // work.\n        if slice.is_empty() {\n            return Bytes::new();\n        }\n\n        let len = slice.len();\n        let ptr = Box::into_raw(slice) as *mut u8;\n\n        if ptr as usize &amp; 0x1 == 0 {\n            let data = ptr as usize | KIND_VEC;\n            Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(data as *mut _),\n                vtable: &amp;PROMOTABLE_EVEN_VTABLE,\n            }\n        } else {\n            Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(ptr as *mut _),\n                vtable: &amp;PROMOTABLE_ODD_VTABLE,\n            }\n        }\n    }\n}\n</code></pre><p>这是因为，Box&lt;[u8]&gt; 是 1 字节对齐，所以 Box&lt;[u8]&gt; 指向的堆地址可能末尾是 0 或者 1。而 data 这个 AtomicPtr 指针，在指向 Shared 结构时，这个结构的对齐是 2/4/8 字节（16/32/64 位 CPU 下），末尾一定为 0：</p><pre><code class=\"language-rust\">struct Shared {\n    // holds vec for drop, but otherwise doesnt access it\n    _vec: Vec&lt;u8&gt;,\n    ref_cnt: AtomicUsize,\n}\n</code></pre><p>所以这里用了一个小技巧，以 data 指针末尾是否为 0x1 来区别，当前的 Bytes 是升级成共享，类似于 Arc 的结构（KIND_ARC），还是依旧停留在非共享的，类似 Vec 的结构（KIND_VEC）。<br>\n这个复用指针最后几个 bit 记录一些 flag 的小技巧，在很多系统中都会使用。比如 Erlang VM，在存储 list 时，因为地址的对齐，最后两个 bit 不会被用到，所以当最后一个 bit 是 1 时，代表这是个指向 list 元素的地址。这种技巧，如果你不知道的话，看代码会很懵，一旦了解就没那么神秘了。</p><p>如果你觉得有收获，欢迎分享～</p>","neighbors":{"left":{"article_title":"19｜闭包：FnOnce、FnMut和Fn，为什么有这么多类型？","id":424009},"right":{"article_title":"21｜阶段实操（1）：构建一个简单的KV server-基本流程","id":425001}},"comments":[{"had_liked":false,"id":315962,"user_name":"Geek_1b6d74","can_delete":false,"product_type":"c1","uid":2420574,"ip_address":"","ucode":"A0847D91919B7F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Fr0y2ad4CLZNN0iaokfdyfAGwzMdttoIVfgzjBlwaCW2YB26mZta4v6pI2DV0OibCeC1OhME7NmrZo9OoRAfIhwQ/132","comment_is_top":false,"comment_ctime":1634088259,"is_pvip":false,"replies":[{"id":"115283","content":"过奖了！:)","user_name":"作者回复","comment_id":315962,"uid":"1079375","ip_address":"","utype":1,"ctime":1635132445,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"35993826627","product_id":100085301,"comment_content":"陈天大神太强了，学习他的课程不仅学习了一门新的语言，还弄明白了很多编程底层原理","like_count":9,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528216,"discussion_content":"过奖了！:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635132445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322476,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1637405892,"is_pvip":false,"replies":[{"id":"118905","content":":) 掌握好这一章就好了啊","user_name":"作者回复","comment_id":322476,"uid":"1079375","ip_address":"","utype":1,"ctime":1639851974,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"23112242372","product_id":100085301,"comment_content":"老师，专门开一期如何读开源项目源码吧，真的，这个比懂任何技巧都更有意义，目前也没有教这个的。","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539866,"discussion_content":":) 掌握好这一章就好了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639851974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319156,"user_name":"枸杞红茶","can_delete":false,"product_type":"c1","uid":2738941,"ip_address":"","ucode":"03D80953AF984E","user_header":"https://static001.geekbang.org/account/avatar/00/29/ca/fd/4e6dd31c.jpg","comment_is_top":false,"comment_ctime":1635645889,"is_pvip":false,"replies":[{"id":"116392","content":"哈哈，放下你泡好枸杞红茶的保温杯，一起死磕 Rust :)","user_name":"作者回复","comment_id":319156,"uid":"1079375","ip_address":"","utype":1,"ctime":1636556597,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"10225580481","product_id":100085301,"comment_content":"我原本准备去超市摸鱼，陈天老师给我渔船把我扔到了大海里","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529524,"discussion_content":"哈哈，放下你泡好枸杞红茶的保温杯，一起死磕 Rust :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636556597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320478,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1636348291,"is_pvip":false,"replies":[{"id":"116396","content":"👍","user_name":"作者回复","comment_id":320478,"uid":"1079375","ip_address":"","utype":1,"ctime":1636556969,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5931315587","product_id":100085301,"comment_content":"1. 我们一起大致分析了 Bytes 的 clone() 的使用的场景，你能用类似的方式研究一下 drop() 是怎么工作的么？<br><br>如果是Shared, 就像Arc那样decrease counter; 如果是KIND_VEC, with unique ownership, deallocate memory immediately.<br><br>    unsafe fn promotable_odd_drop(data: &amp;mut AtomicPtr&lt;()&gt;, ptr: *const u8, len: usize) {<br>        data.with_mut(|shared| {<br>            let shared = *shared;<br>            let kind = shared as usize &amp; KIND_MASK;<br>            if kind == KIND_ARC {<br>                release_shared(shared as *mut Shared);<br>            } else {<br>                debug_assert_eq!(kind, KIND_VEC);<br>                drop(rebuild_boxed_slice(shared as *mut u8, ptr, len));<br>            }<br>        });<br>    }<br><br>2. 仔细看 Buf trait 里的方法，想想为什么它为 &amp;mut T 实现了 Buf trait，但没有为 &amp;T 实现 Buf trait 呢？如果你认为你找到了答案，再想想为什么它可以为 &amp;[u8] 实现 Buf trait 呢？<br><br>因为advance method需要更改T内部状态<br><br>    fn advance(&amp;mut self, cnt: usize) {<br><br>3. 花点时间看看 BufMut trait 的文档。Vec 可以使用 BufMut 么？如果可以，试着写写代码在 Vec 上调用 BufMut 的各种接口，感受一下。<br><br>只能在`Vec&lt;u8&gt;` 上用; 跟着doc试了一下.<br><br>值得注意的是, `advance_mut`是 `unsafe`:<br><br>        #[inline]<br>        unsafe fn advance_mut(&amp;mut self, cnt: usize) {<br>            let len = self.len();<br>            let remaining = self.capacity() - len;<br>            assert!(<br>                cnt &lt;= remaining,<br>                &quot;cannot advance past `remaining_mut`: {:?} &lt;= {:?}&quot;,<br>                cnt,<br>                remaining<br>            );<br>            self.set_len(len + cnt);<br>        }<br><br>4. 如果有余力，可以研究一下 BytesMut。重点看一下 split_off() 方法是如何实现的。<br><br>`split_off` 也是根据kind来:<br><br>- 如果是KIND_VEC, 就变成两个Arc, 共享同一个buf pointer<br>- 如果是KIND_ARC, 就increase ref count, 设置不同的start, end<br><br>感觉真正困难的是 `reserve` 和 `resize`; 这两个method要求KIND_ARC; 这样, 所有outgoing的`BytesMut` 能view underlying Vec pointer change during reallocation","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530006,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636556969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320038,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1636048045,"is_pvip":true,"replies":[{"id":"116346","content":"对","user_name":"作者回复","comment_id":320038,"uid":"1079375","ip_address":"","utype":1,"ctime":1636526167,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5931015341","product_id":100085301,"comment_content":"看後面的解釋還是有點懵，我試著照自己的理解說明<br>最後一位是用來記錄是否是 shared<br>但是我們會需要知道升級成 shared 前最後一位是 odd 還是 event 所以用   PROMOTABLE_ODD_VTABLE PROMOTABLE_EVENT_VTABLE 來做不同的 clone 方式<br><br>```<br>unsafe fn promotable_even_clone(data: &amp;AtomicPtr&lt;()&gt;, ptr: *const u8, len: usize) -&gt; Bytes {<br>    let shared = data.load(Ordering::Acquire);<br>    let kind = shared as usize &amp; KIND_MASK;<br><br>    if kind == KIND_ARC {<br>        shallow_clone_arc(shared as _, ptr, len)<br>    } else {<br>        debug_assert_eq!(kind, KIND_VEC);<br>        let buf = (shared as usize &amp; !KIND_MASK) as *mut u8;<br>        shallow_clone_vec(data, shared, buf, ptr, len)<br>    }<br>}<br>```<br>promotable_event_clone 相比 promotable_odd_clone 多了下面這個操作<br>let buf = (shared as usize &amp; !KIND_MASK) as *mut u8;<br><br>先把最後一位還原成原本的樣子，再進行 clone<br>不知道這樣理解對不對","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529850,"discussion_content":"对","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636526167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315008,"user_name":"Geek2014","can_delete":false,"product_type":"c1","uid":2028957,"ip_address":"","ucode":"9EB356D8DF287E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","comment_is_top":false,"comment_ctime":1633657343,"is_pvip":false,"replies":[{"id":"114114","content":"啊，多谢发现！这里是笔误，应该是一定为 0。为 0 才可以借用最后一位设置是否是 shared 标志。这是上下文的逻辑。我让编辑更新一下。","user_name":"作者回复","comment_id":315008,"uid":"1079375","ip_address":"","utype":1,"ctime":1633709404,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5928624639","product_id":100085301,"comment_content":"而 data 这个 AtomicPtr 指针，在指向 Shared 结构时，这个结构的对齐是 2&#47;4&#47;8 字节（16&#47;32&#47;64 位 CPU 下），末尾一定不为 0：<br><br>老师，为啥对齐2&#47;4&#47;8字节，末尾一定不为0呢","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527855,"discussion_content":"啊，多谢发现！这里是笔误，应该是一定为 0。为 0 才可以借用最后一位设置是否是 shared 标志。这是上下文的逻辑。我让编辑更新一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633709404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358123,"user_name":"进击的Lancelot","can_delete":false,"product_type":"c1","uid":2620407,"ip_address":"广东","ucode":"3BCC355801DC61","user_header":"https://static001.geekbang.org/account/avatar/00/27/fb/f7/88ab6f83.jpg","comment_is_top":false,"comment_ctime":1663921267,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1663921267","product_id":100085301,"comment_content":"针对思考题：<br><br>1.来看一段 promotable_even_drop 的代码，它会先判断保存在 data(AtomicPtr) 中的数据是否是共享的，如果是，直接调用 release_shared 进行释放(shared_drop 直接执行这一步即可)；如果不是共享数据，则先消除 data 中数据最后一位的 flag，然后调用free_boxed_slice 进行释放<br>unsafe fn promotable_even_drop(data: &amp;mut AtomicPtr&lt;()&gt;, ptr: *const u8, len: usize) {<br>    data.with_mut(|shared| {<br>        let shared = *shared;<br>        let kind = shared as usize &amp; KIND_MASK;<br><br>        if kind == KIND_ARC {<br>            release_shared(shared.cast());<br>        } else {<br>            debug_assert_eq!(kind, KIND_VEC);<br>            let buf = ptr_map(shared.cast(), |addr| addr &amp; !KIND_MASK);<br>            free_boxed_slice(buf, ptr, len);<br>        }<br>    });<br>} <br>2. 因为 Buf Trait 中有 advance 这样的方法，其 reveiver type 是 &amp;mut self，如果为 T&amp; 实现了 Buf Trait，那么它无法调用 advance，会产生 immutable borrow cannot be borrowed as mutable 这样的错误。而之所以可以为 &amp;[u8] 实现 Buf Trait，是因为 advance 可以直接通过切片的方式对 *self 进行修改，即 advance(&amp;mut self, cnt) =&gt; *self= &amp;self[cnt..]<br>3. Vec 可以使用 BufMut，因为 Vec[u8] 实现了 BufMut Trait，文档中 BufMut 的第一个例子就是在 vec 上使用 BufMut<br>4. split_off 的核心在于 shallow_clone 函数，这个函数会先判断 self 的类型是否为共享，如果是，增加引用计数，如果不是，则先将其升级为共享数据，然后返回 BytesMut 对象。但这个方法本身是不安全的，需要调用者自己去保证返回的 BytesMut 和原来的 BytesMut 之间没有重叠的视图","like_count":0},{"had_liked":false,"id":353174,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"天津","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1659234715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659234715","product_id":100085301,"comment_content":"没想通为什么没为Vec&lt;u8&gt;实现Buf而只实现了BufMut","like_count":0},{"had_liked":false,"id":350860,"user_name":"25ma","can_delete":false,"product_type":"c1","uid":1303713,"ip_address":"","ucode":"AB5435B9DB52C9","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","comment_is_top":false,"comment_ctime":1657260797,"is_pvip":false,"replies":[{"id":"127651","content":"👍","user_name":"编辑回复","comment_id":350860,"uid":"2547771","ip_address":"","utype":2,"ctime":1657270753,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1657260797","product_id":100085301,"comment_content":"值得反复深度阅读，很有收获","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579261,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657270753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344619,"user_name":"鹅帮逮","can_delete":false,"product_type":"c1","uid":2755534,"ip_address":"","ucode":"A6DB1BEFDA5D9A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/0b/ce/f0c520d1.jpg","comment_is_top":false,"comment_ctime":1651674764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651674764","product_id":100085301,"comment_content":"mark,阅读源码对于我还是有点难度，后面会再来复习","like_count":0},{"had_liked":false,"id":331684,"user_name":"交流会","can_delete":false,"product_type":"c1","uid":2022072,"ip_address":"","ucode":"EA82C16C86FAEE","user_header":"https://static001.geekbang.org/account/avatar/00/1e/da/b8/3f80b8a5.jpg","comment_is_top":false,"comment_ctime":1642724417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642724417","product_id":100085301,"comment_content":"老师您好,请问match的源码实现从哪里找呢,希望能提供下查找的思路就可以,doc.rs的src里只有大堆的注释和说明,却没看到源码,找了很久也没找到...","like_count":0},{"had_liked":false,"id":327013,"user_name":"施泰博","can_delete":false,"product_type":"c1","uid":2718966,"ip_address":"","ucode":"E88E4E737398EF","user_header":"https://static001.geekbang.org/account/avatar/00/29/7c/f6/028f80a8.jpg","comment_is_top":false,"comment_ctime":1639838170,"is_pvip":false,"replies":[{"id":"120824","content":"👍","user_name":"作者回复","comment_id":327013,"uid":"1079375","ip_address":"","utype":1,"ctime":1642311531,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639838170","product_id":100085301,"comment_content":"看完我觉得值得，得反复看很多编了。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546469,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642311531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325750,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1639116579,"is_pvip":true,"replies":[{"id":"118820","content":"不支持，你需要先做 reverse  的操作","user_name":"作者回复","comment_id":325750,"uid":"1079375","ip_address":"","utype":1,"ctime":1639805255,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1639116579","product_id":100085301,"comment_content":"Bytes可以支持反序吗？我想要从结尾往开头操作。。。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539693,"discussion_content":"不支持，你需要先做 reverse  的操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639805255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2675695,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","nickname":"overheat","note":"","ucode":"DD82D9194C26D0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538261,"discussion_content":"研究下来，Bytes对&amp;&#39;static [u8]做了特殊的优化。并且，“切片 &amp;[u8]、VecDeque&lt;u8&gt; 都实现了 Buf trait；” 感觉我想要的reverse bytes可以先简化为reverse &amp;[u8]，实现看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639386204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2675695,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","nickname":"overheat","note":"","ucode":"DD82D9194C26D0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538230,"discussion_content":"我自己clone了bytes的源码，然后把Bytes.rs copy 一份为rBytes.rs，通过重写了Buf trait的advance方法，实现了反序操作。\n但是，如果我想写一个新的crate实现如上功能，该如何开始呢？因为rust没有继承，是不是我要把bytes的vtable等实现都在新的crate中再copy一遍？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639375465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321354,"user_name":"小康","can_delete":false,"product_type":"c1","uid":1485752,"ip_address":"","ucode":"2445F7BB91387C","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/b8/0a979678.jpg","comment_is_top":false,"comment_ctime":1636810050,"is_pvip":false,"replies":[{"id":"118930","content":"1. 目前是，以后基础软件会有越来越多的 Rust 职位<br>2. 不会","user_name":"作者回复","comment_id":321354,"uid":"1079375","ip_address":"","utype":1,"ctime":1639853775,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1636810050","product_id":100085301,"comment_content":"老师，目前中国rust岗位很多都是区块链相关的技术岗位呀？？？java转Rust跨度会不会太大？？？<br>","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539891,"discussion_content":"1. 目前是，以后基础软件会有越来越多的 Rust 职位\n2. 不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639853775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320485,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1636350162,"is_pvip":false,"replies":[{"id":"116575","content":"👍","user_name":"作者回复","comment_id":320485,"uid":"1079375","ip_address":"","utype":1,"ctime":1636641735,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1636350162","product_id":100085301,"comment_content":"按照老师个步骤, 一步一步来, 受益匪浅!<br><br>试了试resize:<br><br>```<br>    use bytes::BytesMut;<br>    <br>    fn main() {<br>        let mut buf = BytesMut::from(&amp;b&quot;hello world&quot;[..]);<br>        let cap_orig = buf.capacity();<br>        let other = buf.split_off(5);<br>        assert_eq!(buf, &amp;b&quot;hello&quot;[..]);<br>        assert_eq!(buf.as_ptr() as usize + 5, other.as_ptr() as usize);<br>    <br>        buf.resize(cap_orig + 10, b&#39;w&#39;);<br>        println!(&quot;{:?}&quot;, buf);<br>        println!(&quot;{:?}&quot;, other);<br>        assert_ne!(buf.as_ptr() as usize + 5, other.as_ptr() as usize);<br>    }<br>  ```  <br><br>output<br><br>```<br>b&quot;hellowwwwwwwwwwwwwwww&quot;<br>b&quot; world&quot;<br>```<br><br>本以为resize了第一个buf, 会覆盖掉other的部分, 毕竟他们之前共享一个storage...<br><br>结果第一个buf新开了memory, 和other就撇清关系了...<br><br>BytesMut真的太难了...不过bytes这个crate真的很适合精读...里面有各种底层技巧…","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530010,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636641735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317023,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634643089,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1634643089","product_id":100085301,"comment_content":"由于编译 proto 在 Windows 中文用户名称上出问题，我打算先阅读 prost-build 的源码","like_count":0}]}