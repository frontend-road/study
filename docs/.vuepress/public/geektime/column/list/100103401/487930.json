{"id":487930,"title":"16 | Job：协程也有生命周期吗？","content":"<p>你好，我是朱涛。今天我们来学习Kotlin协程的Job。</p><p>Job其实就是协程的句柄。从某种程度上讲，当我们用launch和async创建一个协程以后，同时也会创建一个对应的Job对象。另外，Job也是我们理解<strong>协程生命周期</strong>、<strong>结构化并发</strong>的关键知识点。通过Job暴露的API，我们还可以让不同的协程之间互相配合，从而实现更加复杂的功能。</p><p>虽然前面已经解释过，Job就是协程的句柄，但你可能还是不清楚它到底是什么，因为句柄本身就是一个比较“虚”的概念。所以在这节课中，我们会从使用的角度入手，来看看Job到底能干什么。在充分理解了Job的用法以后，我们再来结合它的源代码进一步分析，这样对Job也会有一个更加清晰的认知。</p><h2>Job生命周期</h2><p>在上节课我们学习launch、async的时候，我们知道它们两个返回值类型分别是Job和Deferred。</p><pre><code class=\"language-plain\">// 代码段1\n\npublic interface Deferred&lt;out T&gt; : Job {\n    public suspend fun await(): T\n}\n</code></pre><p>而如果你去看Deferred的源代码，你会发现，它其实也是继承自Job的。对应的，它只是多了一个泛型参数T，还多了一个返回类型为T的await()方法。所以，不管是launch还是async，<strong>它们本质上都会返回一个Job对象</strong>。</p><!-- [[[read_end]]] --><p>通过Job对象，我们主要可以做两件事情：</p><ul>\n<li>使用Job <strong>监测</strong>协程的生命周期状态；</li>\n<li>使用Job <strong>操控</strong>协程。</li>\n</ul><p>让我们来看一个具体的例子：</p><pre><code class=\"language-plain\">// 代码段2\n\nfun main() = runBlocking {\n    val job = launch {\n        delay(1000L)\n    }\n    job.log()       // ①\n    job.cancel()    // ②\n    job.log()       // ③\n    delay(1500L)\n}\n\n/**\n * 打印Job的状态信息\n */\nfun Job.log() {\n    logX(\"\"\"\n        isActive = $isActive\n        isCancelled = $isCancelled\n        isCompleted = $isCompleted\n    \"\"\".trimIndent())\n}\n\n/**\n * 控制台输出带协程信息的log\n */\nfun logX(any: Any?) {\n    println(\"\"\"\n================================\n$any\nThread:${Thread.currentThread().name}\n================================\"\"\".trimIndent())\n}\n\n\n/*\n输出结果：\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nisActive = false\nisCancelled = true\nisCompleted = false\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>在这段代码当中，我们定义了一个Job.log()扩展函数，它的作用就是打印Job的生命周期状态。通过调用这个函数，我们就可以知道对应的协程处于什么状态。</p><p>注释①处的调用结果，“isActive = true”，这代表了当前的协程处于活跃状态。注释②，我们调用了job.cancel()以后，协程任务就会被取消。因此，注释③处的调用结果就会变成“isCancelled = true”，这代表了协程任务处于取消状态。</p><p>所以从上面的代码中，我们可以看到：job.log()，其实就是在<strong>监测协程</strong>；job.cancel()，其实就是在<strong>操控协程</strong>。</p><p>而除了job.cancel()可以操控协程以外，我们还经常使用job.start()来启动协程任务，一般来说，它都是搭配“CoroutineStart.LAZY”来使用的。</p><pre><code class=\"language-plain\">// 代码段3\n\nfun main() = runBlocking {\n    //                  变化在这里\n    //                      ↓\n    val job = launch(start = CoroutineStart.LAZY) {\n        logX(\"Coroutine start!\")\n        delay(1000L)\n    }\n    delay(500L)     \n    job.log()       \n    job.start()     // 变化在这里\n    job.log()\n    delay(500L)\n    job.cancel()\n    delay(500L)\n    job.log()\n    delay(2000L)\n    logX(\"Process end!\")\n}\n\n/*\n输出结果：\n================================\nisActive = false\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nCoroutine start!\nThread:main @coroutine#2\n================================\n================================\nisActive = false\nisCancelled = true\nisCompleted = true\nThread:main @coroutine#1\n================================\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>根据以上代码的运行结果，可以发现，当我们使用CoroutineStart.LAZY作为启动模式的时候，协程任务被launch以后，并不会立即执行，即使我们在代码中delay了500毫秒，launch内部的<code>\"Coroutine start!\"</code>也仍然没有输出。这是典型的<strong>懒加载</strong>行为模式。</p><p>当我们在外部调用了job.start()以后，job的状态才变成了Active活跃。而当调用了cancel以后，job的状态才变成isCancelled、isCompleted。</p><p>到这里，我们基本上就可以想象出Job整个的生命周期了。请参考下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/52/c1d2515fcb7c3fa4130fcf85e9dd2852.jpg?wh=2000x846\" alt=\"\"></p><p>从图中，我们可以看到，对于协程的Job来说，它有两种初始状态，如果Job是以<strong>懒加载</strong>的方式创建的，那么它的初始状态将会是New；而如果一个协程是以<strong>非懒加载</strong>的方式创建的，那么它的初始状态就会是Active。</p><p>另外如果你仔细分析了上面代码的输出结果，你会发现，当调用cancel以后，会出现一个奇怪的现象：isCancelled = true、isCompleted = true。也就是说，当协程任务被取消以后，isCancelled和isCompleted同时都是true。但这跟上面的流程图并不一致啊！这是为什么呢？</p><p>这是因为，协程认为由于某种原因取消的协程，也仍然是一种“<strong>结束状态</strong>”，这其实也就对应了流程图中的“最终状态”。</p><p>换句话说，流程图当中的New、Active、Completing、Cancelling、Completed、Cancelled这些状态，都是Job内部私有的状态。而Job对外暴露出的isCompleted并不是与其一一对应的。Job内部私有的Completed、Cancelled状态，都会认为是外部的isCompleted状态。</p><p>测试了协程cancel()方法以后，我们再来看看协程正常执行完毕的情况：</p><pre><code class=\"language-plain\">// 代码段4\n\nfun main() = runBlocking {\n    val job = launch(start = CoroutineStart.LAZY) {\n        logX(\"Coroutine start!\")\n        delay(1000L)\n    }\n    delay(500L)\n    job.log()\n    job.start()\n    job.log()\n    delay(1100L)    // ①\n    job.log()\n    delay(2000L)    // ②\n    logX(\"Process end!\")\n}\n\n================================\nisActive = false\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nCoroutine start!\nThread:main @coroutine#2\n================================\n================================\nisActive = false\nisCancelled = false\nisCompleted = true\nThread:main @coroutine#1\n================================\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n</code></pre><p>在这段代码中，我们可以清晰地看到，协程的状态从Start到Active，最后到Completed，这很好理解。</p><p>不过，需要注意的是注释①处，为了等待job任务执行完毕，我们在外面等待了1100毫秒，这种方式其实并不好，因为大部分情况下，<strong>我们很难从外部判断协程需要多长的时间才能结束</strong>（比如网络请求任务、下载任务）。</p><p>另外，请留意上面的注释②处，我们使用delay(2000L)的方式，希望在job执行完毕以后输出“Process end!”，这样的代码，也是建立在“我们知道Job只需要1000毫秒就能执行完毕”的前提。如果协程内部的delay远大于外部的delay，以上的运行结果就会完全不一样：</p><pre><code class=\"language-plain\">// 代码段5\n\nfun main() = runBlocking {\n    val job = launch(start = CoroutineStart.LAZY) {\n        logX(\"Coroutine start!\")\n        delay(4000L) // 变化在这里\n    }\n    delay(500L)\n    job.log()\n    job.start()\n    job.log()\n    delay(1100L)    \n    job.log()\n    delay(2000L)    \n    logX(\"Process end!\")\n}\n\n/*\n输出结果：\n================================\nisActive = false\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nCoroutine start!\nThread:main @coroutine#2\n================================\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n到这里，job仍然还在delay，整个程序并没有完全退出。\n*/\n</code></pre><p>可以看到，当我们将job内部的delay改为4000毫秒以后，执行结果就完全不一样了，我们无法监测到isCompleted状态。</p><p>另外，如果你实际运行了上面的代码，你会发现“Process end!”输出以后，程序并没有立即结束，而是等待了大约900毫秒才结束，这是因为runBlocking会一直阻塞，等到job任务执行完毕以后才真正退出。</p><p>所以，为了更加灵活地<strong>等待和监听</strong>协程的结束事件，我们可以用job.join()以及 <code>invokeOnCompletion {}</code> 来优化上面的代码。</p><pre><code class=\"language-plain\">// 代码段6\n\nfun main() = runBlocking {\n    suspend fun download() {\n        // 模拟下载任务\n        val time = (Random.nextDouble() * 1000).toLong()\n        logX(\"Delay time: = $time\")\n        delay(time)\n    }\n    val job = launch(start = CoroutineStart.LAZY) {\n        logX(\"Coroutine start!\")\n        download()\n        logX(\"Coroutine end!\")\n    }\n    delay(500L)\n    job.log()\n    job.start()\n    job.log()\n    job.invokeOnCompletion {\n        job.log() // 协程结束以后就会调用这里的代码\n    }\n    job.join()      // 等待协程执行完毕\n    logX(\"Process end!\")\n}\n\n/*\n运行结果：\n================================\nisActive = false\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nisActive = true\nisCancelled = false\nisCompleted = false\nThread:main @coroutine#1\n================================\n================================\nCoroutine start!\nThread:main @coroutine#2\n================================\n================================\nDelay time: = 252\nThread:main @coroutine#2\n================================\n================================\nCoroutine end!\nThread:main @coroutine#2\n================================\n================================\nisActive = false\nisCancelled = false\nisCompleted = true\nThread:main @coroutine#2\n================================\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>这里我们可以看到，<code>invokeOnCompletion {}</code> 的作用，其实就是监听协程结束的事件。需要注意的是，它和前面的isCompleted类似，如果job被取消了，<code>invokeOnCompletion {}</code> 这个回调仍然会被调用。</p><p>而job.join()其实是一个“挂起函数”，它的作用就是：<strong>挂起当前的程序执行流程，等待job当中的协程任务执行完毕，然后再恢复当前的程序执行流程</strong>。可以看到，上节课学的“挂起函数”的概念再一次出现了，它对我们后续理解协程的API非常重要，如果你无法理解上面那句话的意思，一定要去重新回顾上节课的内容。</p><p>至此，我们就对Job的两种使用场景都已经有了充分认识了。我们来大概看看Job的源代码：</p><pre><code class=\"language-plain\">// 代码段7\n\npublic interface Job : CoroutineContext.Element {\n\n    // 省略部分代码\n\n    // ------------ 状态查询API ------------\n\n    public val isActive: Boolean\n\n    public val isCompleted: Boolean\n\n    public val isCancelled: Boolean\n\n    public fun getCancellationException(): CancellationException\n\n    // ------------ 操控状态API ------------\n\n    public fun start(): Boolean\n\n    public fun cancel(cause: CancellationException? = null)\n\n    public fun cancel(): Unit = cancel(null)\n\n    public fun cancel(cause: Throwable? = null): Boolean\n\n    // ------------ 等待状态API ------------\n\n    public suspend fun join()\n\n    public val onJoin: SelectClause0\n\n    // ------------ 完成状态回调API ------------\n\n    public fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle\n\n    public fun invokeOnCompletion(\n        onCancelling: Boolean = false,\n        invokeImmediately: Boolean = true,\n        handler: CompletionHandler): DisposableHandle\n\n}\n</code></pre><p>可见，Kotlin官方对Job的API做了更加详细的划分，但实际上来说都属于“<strong>监测状态</strong>”“<strong>操控状态</strong>”这两个大的范畴。</p><p>现在我们对Job也有了更加深入的认识了，不过到底该如何理解“<strong>Job是协程的句柄</strong>”这句话呢？</p><p>这里，我们还是可以从现实生活中找例子，来建立大致的思维模型。Job和协程的关系，就有点像“遥控器和空调的关系”。</p><ul>\n<li>空调遥控器可以<strong>监测</strong>空调的运行状态；Job也可以监测协程的运行状态；</li>\n<li>空调遥控器可以<strong>操控</strong>空调的运行状态，Job也可以简单操控协程的运行状态。</li>\n</ul><p>所以，从某种程度来讲，遥控器也是空调对外暴露的一个“句柄”。</p><p>好，充分理解了Job以后，我们来看看Deferred。</p><h2>Deferred</h2><p>前面我们介绍过Deferred其实就是继承自Job的一个接口，它并没有在Job的基础上扩展出很多其他功能，最重要的就是await()这个方法。让我们来看一个简单的例子：</p><pre><code class=\"language-plain\">// 代码段8\n\nfun main() = runBlocking {\n    val deferred = async {\n        logX(\"Coroutine start!\")\n        delay(1000L)\n        logX(\"Coroutine end!\")\n        \"Coroutine result!\"\n    }\n    val result = deferred.await()\n    println(\"Result = $result\")\n    logX(\"Process end!\")\n}\n\n/*\n输出结果：\n================================\nCoroutine start!\nThread:main @coroutine#2\n================================\n================================\nCoroutine end!\nThread:main @coroutine#2\n================================\nResult = Coroutine result!\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>从代码的执行结果中，我们可以发现，deferred.await()这个方法，不仅可以帮助我们获取协程的执行结果，它还会阻塞当前协程的执行流程，直到协程任务执行完毕。在这一点的行为上，await()和join()是类似的。</p><p>我们也来看看await()的函数签名：</p><pre><code class=\"language-plain\">// 代码段9\n\npublic interface Deferred&lt;out T&gt; : Job {\n//          注意这里\n//            ↓\n    public suspend fun await(): T\n}\n</code></pre><p>可以看到，await()这个方法其实是一个挂起函数，这也就意味着，这个方法拥有挂起和恢复的能力。如果当前的Deferred任务还没执行完毕，那么，await()就会挂起当前的协程执行流程，等待Deferred任务执行完毕，再恢复执行后面剩下的代码。</p><p>看到这里，也许你会觉得奇怪，<strong>挂起函数不是非阻塞的吗？怎么这里又出现了阻塞？</strong>注意，这里其实只是看起来像是阻塞了，但它实际上是将剩下的代码存了起来，留在后面才执行了。</p><p>为了让你更加透彻地理解await()挂起函数背后的细节，我进一步完善了之前<a href=\"https://time.geekbang.org/column/article/485632\">协程思维模型</a>的动图。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/37/e30c901b79682faaa00fd0d978521b37.gif?wh=1080x517\" alt=\"\"></p><p>所以，这里await()后面的代码，虽然看起来是阻塞了，但它只是执行流程被挂起和恢复的一种表现。而且如果你仔细思考的话，你会发现上面这个动图，同样也描述了之前job.join()的行为模式，在协程执行完毕之前，后面的协程代码都被暂时挂起了，等到协程执行完毕，才有机会继续执行。</p><p>所以，总的来说，Deferred只是比Job多了一个await()挂起函数而已，通过这个挂起函数，我们可以等待协程执行完毕的同时，还可以直接拿到协程的执行结果。</p><p>至此，我们就已经把Job和Deferred的生命周期讲清楚了。对于Job，我们了解了<strong>监测生命周期状态</strong>、<strong>操控生命周期状态</strong>；对于Deferred，我们也明白了如何拿到它的<strong>执行结果</strong>。</p><p>那么接下来，就只剩下一个话题了：<strong>结构化并发</strong>。</p><h2>Job与结构化并发</h2><p>也许你会经常看到类似这样的话：协程的优势在于结构化并发。在我看来，Kotlin协程的结构化并发，它的重要性，是仅次于“挂起函数”的。</p><p>也就是说，<strong>“结构化并发”是Kotlin协程的第二大优势</strong>。那么，到底什么是结构化并发呢？其实，这是一个非常大的话题，三言两语真的很难讲清楚。“结构化并发”会贯穿我们整个课程，随着课程的进展，你会发现，它跟很多其他协程概念都会发生牵连。</p><p>简单来说，“结构化并发”就是：<strong>带有结构和层级的并发</strong>。</p><p>说实话，在抽象的概念面前，语言和文字总会显得苍白无力。所以，我们还是来看一个具体的例子吧。</p><pre><code class=\"language-plain\">// 代码段10\n\nfun main() = runBlocking {\n    val parentJob: Job\n    var job1: Job? = null\n    var job2: Job? = null\n    var job3: Job? = null\n\n    parentJob = launch {\n        job1 = launch {\n            delay(1000L)\n        }\n\n        job2 = launch {\n            delay(3000L)\n        }\n\n        job3 = launch {\n            delay(5000L)\n        }\n    }\n\n    delay(500L)\n\n    parentJob.children.forEachIndexed { index, job -&gt;\n        when (index) {\n            0 -&gt; println(\"job1 === job is ${job1 === job}\")\n            1 -&gt; println(\"job2 === job is ${job2 === job}\")\n            2 -&gt; println(\"job3 === job is ${job3 === job}\")\n        }\n    }\n\n    parentJob.join() // 这里会挂起大约5秒钟\n    logX(\"Process end!\")\n}\n\n/*\n输出结果：\njob1 === job is true\njob2 === job is true\njob3 === job is true\n// 等待大约5秒钟\n================================\nProcess end!\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>在上面的代码中，我们一共定义了4个Job，parentJob是最外层的launch返回的对象，而在这个launch的内部，还额外嵌套了三个launch，它们的Job对象分别赋值给了job1、job2、job3。<br>\n接着，我们对“parentJob.children”进行了遍历，然后逐一对比了它们与job1、job2、job3的引用是否相等（“===”代表了引用相等，即是否是同一个对象）。</p><p>通过这样的方式，我们可以确定，job1、job2、job3其实就是parentJob的children。也就是说，我们使用launch创建出来的协程，是存在<strong>父子关系</strong>的。</p><p>如果你去看Job的源代码，你会发现它还有两个API是用来描述父子关系的。</p><pre><code class=\"language-plain\">// 代码段11\n\npublic interface Job : CoroutineContext.Element {\n    // 省略部分代码\n\n    // ------------ parent-child ------------\n\n    public val children: Sequence&lt;Job&gt;\n\n    @InternalCoroutinesApi\n    public fun attachChild(child: ChildJob): ChildHandle\n}\n</code></pre><p>可以看到，每个Job对象，都会有一个children属性，它的类型是Sequence，它是一个惰性的集合，我们可以对它进行遍历。而attachChild()则是一个协程内部的API，用于绑定ChildJob的，这个我们到源码篇的时候再深入了解。</p><p>所以，我们其实可以用一个简单的结构图来描述上面4个Job之间的关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/4c/b03c8e45f00bf7276c988e7038fcc44c.png?wh=1436x776\" alt=\"图片\"></p><p>那么，这样的父子关系到底意味着什么呢？如果你实际运行这里的代码，你就会注意到：“parentJob.join()”这行代码会被挂起大约5秒钟。</p><p>注意了，我们调用的是parentJob的join()方法，但是，它会等待其内部的job1、job2、job3全部执行完毕，才会恢复执行。换句话说，只有当job1、job2、job3全部执行完毕，parentJob才算是执行完毕了。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/a0/838728245b22e99c7900ba50968dcba0.gif?wh=1080x608\" alt=\"图片\"></p><p>所以到这里，也许你就已经可以理解前面的那句话了：<strong>结构化并发就是带有结构和层级的并发。</strong></p><p>实际上，协程不像我们之前学过的线程，线程之间是不存在父子关系的，但协程之间是会存在父子关系的。不过要命的是，协程的这种父子关系并不明显，如果我们不深入Job的源码，就无法意识到这一点。这也是很多人无法理解协程运行模式的原因所在。</p><p>毕竟，如果你将上面的4个launch都割裂来看，那么无论如何，你都无法理解上面代码的运行顺序，可是一旦你建立了协程Job父子关系的思维模型，你就可以轻而易举地理解以上的代码。</p><p>现在，我们将上面的代码做一些修改，我相信你也可以马上弄明白它的运行模式！</p><pre><code class=\"language-plain\">// 代码段12\n\nfun main() = runBlocking {\n    val parentJob: Job\n    var job1: Job? = null\n    var job2: Job? = null\n    var job3: Job? = null\n\n    parentJob = launch {\n        job1 = launch {\n            logX(\"Job1 start!\")\n            delay(1000L)\n            logX(\"Job1 done!\") // ①，不会执行\n        }\n\n        job2 = launch {\n            logX(\"Job2 start!\")\n            delay(3000L)\n            logX(\"Job2 done!\") // ②，不会执行\n        }\n\n        job3 = launch {\n            logX(\"Job3 start!\")\n            delay(5000L)\n            logX(\"Job3 done!\")// ③，不会执行\n        }\n    }\n\n    delay(500L)\n\n    parentJob.children.forEachIndexed { index, job -&gt;\n        when (index) {\n            0 -&gt; println(\"job1 === job is ${job1 === job}\")\n            1 -&gt; println(\"job2 === job is ${job2 === job}\")\n            2 -&gt; println(\"job3 === job is ${job3 === job}\")\n        }\n    }\n\n    parentJob.cancel() // 变化在这里\n    logX(\"Process end!\")\n}\n\n/*\n输出结果：\n================================\nJob1 start!\nThread:main @coroutine#3\n================================\n================================\nJob2 start!\nThread:main @coroutine#4\n================================\n================================\nJob3 start!\nThread:main @coroutine#5\n================================\njob1 === job is true\njob2 === job is true\njob3 === job is true\n================================\n// 这里不会等待5秒钟\nProcess end!\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>这段代码，最大的改变就在于我们将“parentJob.join”改为了“parentJob.cancel()”。从运行结果中我们可以看到，即使我们调用的只是parentJob的cancel()方法，并没有碰过job1、job2、job3，但是它们内部的协程任务也全都被取消了。</p><p>这里，我们也可以用一个简单的动图来描述它们之间的关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/26/7a/269a6130578ed243e436469ac75c4d7a.gif?wh=1080x484\" alt=\"图片\"></p><p>所以，当我们以<strong>结构化</strong>的方式构建协程以后，我们的join()、cancel()等操作，也会以结构化的模式来执行。</p><h2>思考与实战</h2><p>在学完Job和Deferred以后，也许你已经可以非常明确地判断出什么场景该用launch，什么场景该用async了。那么，这是不是就意味着你已经完成了学习的目标呢？</p><p>当然不是！理论学得再多，如果不能结合实际落地场景来分析，那终究都是一场空。接下来，我们来看一个常见的代码模式：</p><pre><code class=\"language-plain\">// 代码段13\n\nfun main() = runBlocking {\n    suspend fun getResult1(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result1\"\n    }\n\n    suspend fun getResult2(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result2\"\n    }\n\n    suspend fun getResult3(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result3\"\n    }\n\n    val results = mutableListOf&lt;String&gt;()\n\n    val time = measureTimeMillis {\n        results.add(getResult1())\n        results.add(getResult2())\n        results.add(getResult3())\n    }\n    println(\"Time: $time\")\n    println(results)\n}\n\n/*\n输出结果：\nTime: 3018\n[Result1, Result2, Result3]\n*/\n</code></pre><p>这段代码里，我们在内部定义了三个挂起函数getResult1()、getResult2()、getResult3()，它们各自都会耗时1000毫秒，而且它们之间的运行结果也互不相干。代码逻辑也很简单，也是我们平时在工作中会经常遇到的业务场景。</p><p>不过请问，你知道该如何优化上面的代码吗？</p><p>我们进一步来分析一下。当我们直接调用这三个挂起函数，并且拿到结果以后，整个过程大约需要消耗3000毫秒，也就是这几个函数耗时的总和。对于这样的情况，我们其实完全可以使用async来优化：</p><pre><code class=\"language-plain\">// 代码段14\n\nfun main() = runBlocking {\n    suspend fun getResult1(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result1\"\n    }\n\n    suspend fun getResult2(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result2\"\n    }\n\n    suspend fun getResult3(): String {\n        delay(1000L) // 模拟耗时操作\n        return \"Result3\"\n    }\n\n    val results: List&lt;String&gt;\n\n    val time = measureTimeMillis {\n        val result1 = async { getResult1() }\n        val result2 = async { getResult2() }\n        val result3 = async { getResult3() }\n\n        results = listOf(result1.await(), result2.await(), result3.await())\n    }\n\n    println(\"Time: $time\")\n    println(results)\n}\n\n/*\n输出结果：\nTime: 1032\n[Result1, Result2, Result3]\n*/\n</code></pre><p>所以，当我们总是拿launch和async来做对比的时候，就会不自觉地认为async是用来替代launch的。但实际上，async最常见的使用场景是：<strong>与挂起函数结合，优化并发</strong>。</p><p>请不要小看这个场景，在实际工作中，如果你仔细去分析嵌套的异步代码，你会发现，很多异步任务之间都是没有互相依赖的，这样的代码结合挂起函数后，再通过async并发来执行，是可以大大提升代码运行效率的。</p><p>换句话说，如果我们的任务是IO密集型的，代码运行效率是可以实现成倍提升的。一个简单的改造，能极大地提升运行效率，何乐而不为呢？</p><p>那么，万一我们的任务在某些场景下，并发反而会降低效率呢？这也很简单，我们也完全可以使用CoroutineStart来控制它的启动模式。所以，这种方式的<strong>扩展性和灵活性</strong>都很好。</p><h2>小结</h2><p>这节课，我们主要学习了Job、Deferred，通过对它们两者的学习，我们知道了，<strong>协程是有生命周期的</strong>，同时也发现，<strong>协程其实是结构化的</strong>。</p><p>具体来说，有以下几个要点我们需要好好掌握：</p><ul>\n<li>Job，相当于协程的句柄，Job与协程的关系，有点像“遥控器与空调的关系”。</li>\n<li>Job，在它的内部，维护了一系列的生命周期状态，它也对应着协程的生命周期状态。</li>\n<li>通过Job，我们可以<strong>监测</strong>协程的状态，比如isActive、isCancelled、isCompleted；另外，我们也可以一定程度地<strong>操控</strong>协程的状态，比如start()、cancel()。</li>\n<li>除此之外，我们还可以通过 <code>Job.invokeOnCompletion {}</code> 来监听协程执行完毕的事件；通过Job.join()这个挂起函数，我们可以<strong>挂起</strong>当前协程的执行流程，等到协程执行完毕以后，再<strong>恢复</strong>执行后面的代码。</li>\n<li>而对于Deferred.await()，它的行为模式和Job.join()类似，只是它还会返回协程的执行结果。</li>\n<li>另外，<strong>协程是结构化的并发</strong>，这是它的第二大优势。通过分析Job的源码，我们发现，一个Job可以拥有多个ChildJob；对应的，协程也可拥有多个“子协程”。</li>\n<li>那么结构化并发带来的最大优势就在于，我们可以实现只控制“父协程”，从而达到控制一堆子协程的目的。在前面的例子中，parentJob.join()不仅仅只会等待它自身执行完毕，还会等待它内部的job1、job2、job3执行完毕。parentJob.cancel()同理。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/5b/50/5bb335f24e87237067ed78a67ee2eb50.jpg?wh=2000x1240\" alt=\"\"></p><p>最后呢，我也想跟你分享一下我学习协程的一些方法论。</p><p>其实，人学习新知识最快的方式，就是<strong>与旧的知识建立关联</strong>。举个例子，第一门计算机语言往往是最难学的，因为这是一个无中生有的过程；但当你掌握C、C++以后，再去学习Java、Python就会简单很多，因为你可以用脑子里的旧知识与其建立关联。</p><p>所以，虽然我在学习协程的时候也走了很多弯路，但总的来说，我做对了以下几件事，这里我也把经验分享给你。</p><p>第一，<strong>横向对比</strong>。在初次学习Kotlin协程失败以后，我去粗略学习了其他语言的协程，在那个时候，C#之类的协程学习资源更加丰富。通过对比C#、Go等语言的协程后，<strong>我理解了“广义协程”的概念</strong>，并且也知道yield、async、await只是一种广泛存在的协程模式。而当我理解了广义协程这个旧的知识之后，我突然发现Kotlin的协程就不难理解了。</p><p>第二，<strong>建立思维模型</strong>。这是我的一个“习惯”，不管是计算机网络、操作系统、数据结构、设计模式，还是其他领域，比如说高中的电磁学、大学的线性代数，在学习抽象知识的时候，我都喜欢虚构一些思维模型，来模拟它们内部的运行机制。</p><p>协程，就是一门非常抽象的技术，我喜欢用协程API编写一些简单的Demo来分析它们的行为模式，同时为其建立思维模型。这样一来，我脑海里的知识既不容易遗忘，也更成体系。比如，launch就像射箭；async就像钓鱼，这既是思维模型，同时也是在<strong>用旧知识学新知识</strong>。</p><p>第三，<strong>纵向深入</strong>。当我通过建立思维模型，对协程有了全面认识之后，我开始深入研究协程的源码。这时候，我从源码当中找到了更多的细节，来完善、支撑我脑子里的思维模型，从此，它们就不再是我凭空编造出来的东西了，因为证据都在源码里。这是一个<strong>自顶向下、逐渐深入</strong>的过程，反之则行不通。</p><p>所以，现在回过头来看，其实最重要的，还是用旧知识学新知识<strong>。</strong>希望我的方法能对你有所启发。</p><h2>思考题</h2><p>请问下面这段代码的执行结果是什么？你能分析出原因吗？</p><pre><code class=\"language-plain\">// 代码段15\n\nfun main() = runBlocking {\n    val job = launch {\n        logX(\"First coroutine start!\")\n        delay(1000L)\n        logX(\"First coroutine end!\")\n    }\n\n    job.join()      \n    val job2 = launch(job) {\n        logX(\"Second coroutine start!\")\n        delay(1000L)\n        logX(\"Second coroutine end!\")\n    }\n    job2.join()\n    logX(\"Process end!\")\n}\n</code></pre><p>欢迎在留言区分享你的答案，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"15 | 挂起函数：Kotlin协程的核心","id":487085},"right":{"article_title":"17 | Context：万物皆为Context？","id":488571}},"comments":[{"had_liked":false,"id":334809,"user_name":"面无表情的生鱼片","can_delete":false,"product_type":"c1","uid":1110076,"ip_address":"","ucode":"C71B9DD25C9018","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/3c/d72b0d26.jpg","comment_is_top":false,"comment_ctime":1645145319,"is_pvip":false,"replies":[{"id":"122304","content":"很棒的分析！","user_name":"作者回复","comment_id":334809,"uid":"1180670","ip_address":"","utype":1,"ctime":1645151595,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"109019327719","product_id":100103401,"comment_content":"思考题：<br>代码的执行结果是：<br>&gt; First coroutine start!<br>&gt; First coroutine end!<br>&gt; Process end!<br>可见 job2 的代码块并没有被执行。<br><br>分析原因：<br>分别打印出 job2 在 job2.join() 前后的状态：<br><br>job2 before join: isActive === false<br>job2 before join: isCancelled === true<br>job2 before join: isCompleted === false<br>&#47;&#47; job2.join()<br>job2 after join: isActive === false<br>job2 after join: isCancelled === true<br>job2 after join: isCompleted === true<br><br>可见 job2 创建后并没有被激活。<br><br>val job2 = launch(job) {} 这一行代码指示 job2 将运行在 job 的 CoroutineContext 之下, 而之前的代码 job.join() 时 job 已经执行完毕了，根据协程结构化的特性，job2 在创建后不会被激活，并且标记为Cancelled，然后执行 job2 时，发现 job2 未被激活，并且已经被取消，则不会执行 job2 的代码块，但是会将 job2 标记为 Completed","like_count":26,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551843,"discussion_content":"很棒的分析！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645151595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338495,"user_name":"没名儿","can_delete":false,"product_type":"c1","uid":1723397,"ip_address":"","ucode":"65B48705171730","user_header":"https://static001.geekbang.org/account/avatar/00/1a/4c/05/4fe55808.jpg","comment_is_top":false,"comment_ctime":1647525719,"is_pvip":false,"replies":[{"id":"123739","content":"“如你所说，存在依赖关系的时候，我们就可以挂起函数与async结合了。”<br><br>这句话确实有歧义，这里的语境是：如果B任务依赖A的结果，C任务跟A、B没有关系，我们就可以这样做：<br><br>```<br>&#47;&#47; 伪代码<br><br>runBlocking {<br>    val resultB = async {<br>         val temp = taskA()<br>         taskB(temp)<br>    }<br>    <br>    val resultC = async { taskC() }<br>    <br>}<br>```<br><br>总结就是：如果存在依赖关系，就直接用挂起函数串联；如果没有依赖关系，就可以用async并联。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1647571259,"ip_address":"","comment_id":338495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27417329495","product_id":100103401,"comment_content":"看了大家的留言有个疑点<br>----很多异步任务之间都是没有互相依赖的，这样的代码结合挂起函数后，再通过 async 并发来执行，是可以大大提升代码运行效率的。----<br>----如你所说，存在依赖关系的时候，我们就可以挂起函数与async结合了。-----<br>到底是存在依赖关系用async还是不存在依赖关系用async呢？<br><br>","like_count":7,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556910,"discussion_content":"“如你所说，存在依赖关系的时候，我们就可以挂起函数与async结合了。”\n\n这句话确实有歧义，这里的语境是：如果B任务依赖A的结果，C任务跟A、B没有关系，我们就可以这样做：\n\n```\n// 伪代码\n\nrunBlocking {\n    val resultB = async {\n         val temp = taskA()\n         taskB(temp)\n    }\n    \n    val resultC = async { taskC() }\n    \n}\n```\n\n总结就是：如果存在依赖关系，就直接用挂起函数串联；如果没有依赖关系，就可以用async并联。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647571259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335686,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1645627343,"is_pvip":false,"replies":[{"id":"122726","content":"本质还是“生命周期”、“结构化并发”哈，当然，本质还是CoroutineContext，这不刚好引出下节课嘛~","user_name":"作者回复","comment_id":335686,"uid":"1180670","ip_address":"","utype":1,"ctime":1645747274,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14530529231","product_id":100103401,"comment_content":"思考题针对性不强。<br>因为思考题考察的知识点是 CoroutineContext 上下文，而这一部分是下一节课的内容。","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553133,"discussion_content":"本质还是“生命周期”、“结构化并发”哈，当然，本质还是CoroutineContext，这不刚好引出下节课嘛~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645747274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334812,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1645146569,"is_pvip":false,"replies":[{"id":"122305","content":"分析的不错。","user_name":"作者回复","comment_id":334812,"uid":"1180670","ip_address":"","utype":1,"ctime":1645151613,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14530048457","product_id":100103401,"comment_content":"思考题结果：<br>First coroutine start!<br>First coroutine end!<br>Process end!<br>没有执行job2的原因是，它的launch中传入了job 作为coroutinecontext，而它已经是complete 状态了，所以不会再执行job2的block 而是直接执行了job2的join ，然后结束。","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551845,"discussion_content":"分析的不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645151613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345710,"user_name":"原仲","can_delete":false,"product_type":"c1","uid":1329349,"ip_address":"","ucode":"AD746D292B728A","user_header":"https://static001.geekbang.org/account/avatar/00/14/48/c5/3ecc101f.jpg","comment_is_top":false,"comment_ctime":1652521085,"is_pvip":false,"replies":[{"id":"126603","content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1653819432,"ip_address":"","comment_id":345710,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5947488381","product_id":100103401,"comment_content":"代码片段14 中的执行流程<br>val result1 = async { getResult1() } <br>val result2 = async { getResult2() } <br>val result3 = async { getResult3() }<br>&#47;&#47;调用时机在这<br>results = listOf(result1.await(), result2.await(), result3.await())<br>用作者的思维模型，相当于三个钓鱼杆同时拉杆<br><br>val result1 = async { getResult1() } <br>&#47;&#47;调用时机<br>result1.await()<br>val result2 = async { getResult2() } <br>&#47;&#47;调用时机<br>result2.await()<br>val result3 = async { getResult3() }<br>&#47;&#47;调用时机<br>result3.await()<br>用作者的思维模型，相当于三个钓鱼杆依次拉杆<br>","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574072,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653819432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1296112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c6/f0/e5aec198.jpg","nickname":"echoliulin","note":"","ucode":"37585581244706","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584245,"discussion_content":"那这样呢？\nresults = listOf(getResult1(), getResult2(), getResult3())","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660704665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341810,"user_name":"20220106","can_delete":false,"product_type":"c1","uid":2884743,"ip_address":"","ucode":"DC9E91125B21C6","user_header":"","comment_is_top":false,"comment_ctime":1649839761,"is_pvip":false,"replies":[{"id":"124955","content":"它的作用是等待：job1&#47;2&#47;3对应的协程能够启动。","user_name":"作者回复","comment_id":341810,"uid":"1180670","ip_address":"","utype":1,"ctime":1649950853,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5944807057","product_id":100103401,"comment_content":"代码段10中【delay(500L)】这一句影响了什么呀？不加的话后边的日志就不打印了","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563211,"discussion_content":"它的作用是等待：job1/2/3对应的协程能够启动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649950853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2884743,"avatar":"","nickname":"20220106","note":"","ucode":"DC9E91125B21C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":564459,"discussion_content":"那可以理解为父级协程延迟后，便进入子级协程嘛。就是我上边那一大段里边括号中前提的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650249896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563211,"ip_address":""},"score":564459,"extra":""}]}]},{"had_liked":false,"id":340101,"user_name":"dawn","can_delete":false,"product_type":"c1","uid":1121701,"ip_address":"","ucode":"979CE356267183","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIpF5euTNx3GOkmf515HFh1ahAzogerLfIyLia2AspTIR9fkU6icGbo2ungo23cdM5s9dUjZGMno7ZA/132","comment_is_top":false,"comment_ctime":1648603007,"is_pvip":false,"replies":[{"id":"124480","content":"单纯只是因为Job的状态变更没那么及时而已。","user_name":"作者回复","comment_id":340101,"uid":"1180670","ip_address":"","utype":1,"ctime":1648814201,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5943570303","product_id":100103401,"comment_content":"fun main() = runBlocking {<br>    val job = launch {<br>        logX(&quot;Coroutine  start!&quot;)<br>        delay(1000L)<br>        logX(&quot;Coroutine  end!&quot;)<br>    }<br>    job.log()<br>    delay(500)<br>    job.cancel()<br>    job.log()<br>    delay(1) &#47;&#47;延时1ms<br>    job.log()<br>    delay(2000)<br>    logX(&quot;Process end!&quot;)<br>}<br>为什么取消后输出延时1ms输出job的isCompleted会有false变为true","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559553,"discussion_content":"单纯只是因为Job的状态变更没那么及时而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648814201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335611,"user_name":"Gavin","can_delete":false,"product_type":"c1","uid":2879648,"ip_address":"","ucode":"881EA1DE7A33B8","user_header":"https://static001.geekbang.org/account/avatar/00/2b/f0/a0/43168e73.jpg","comment_is_top":false,"comment_ctime":1645603951,"is_pvip":false,"replies":[{"id":"122724","content":"没错~","user_name":"作者回复","comment_id":335611,"uid":"1180670","ip_address":"","utype":1,"ctime":1645747145,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940571247","product_id":100103401,"comment_content":"&quot;First coroutine start!&quot;<br>&quot;First coroutine end!&quot;<br>&quot;Process end!&quot;<br>通过源码可知launch中传入的CoroutineContext会作为parentJob，而job2的parentJob为job，job协程已经处于completed状态，故不执行job2直接跳过","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553131,"discussion_content":"没错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645747145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351560,"user_name":"来日可期","can_delete":false,"product_type":"c1","uid":2698133,"ip_address":"","ucode":"CC6DD3EAF5AA3D","user_header":"https://static001.geekbang.org/account/avatar/00/29/2b/95/ef6b7672.jpg","comment_is_top":false,"comment_ctime":1657900916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657900916","product_id":100103401,"comment_content":"大佬，我有个疑惑，为什么lauch方法可以传入job参数呢，这个函数参数不是这三个吗<br>public fun CoroutineScope.launch(<br>    context: CoroutineContext = EmptyCoroutineContext,<br>    start: CoroutineStart = CoroutineStart.DEFAULT,<br>    block: suspend CoroutineScope.() -&gt; Unit<br>): Job {<br>    ...<br>}","like_count":1},{"had_liked":false,"id":343373,"user_name":"Luckykelan","can_delete":false,"product_type":"c1","uid":1057080,"ip_address":"","ucode":"BC36CD8E75E11D","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/38/aad89fe5.jpg","comment_is_top":false,"comment_ctime":1650804930,"is_pvip":false,"replies":[{"id":"125649","content":"这其实涉及到底层原理，是我以我自己的经验在讲述，当前课程中其实并没有相关知识点可以说明这个问题。等你学完源码篇，你也可以理解了。","user_name":"作者回复","comment_id":343373,"uid":"1180670","ip_address":"","utype":1,"ctime":1651247037,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1650804930","product_id":100103401,"comment_content":"老师你好，请问完善后的思维模型这个例子中，是怎么知道println(&quot;Result = $result&quot;)和logX(&quot;Process end!&quot;)这两段代码是和协程在同一个task 中并一同挂起的呢？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568903,"discussion_content":"这其实涉及到底层原理，是我以我自己的经验在讲述，当前课程中其实并没有相关知识点可以说明这个问题。等你学完源码篇，你也可以理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651247038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343073,"user_name":"张春亮","can_delete":false,"product_type":"c1","uid":1045303,"ip_address":"","ucode":"3921D2A256B2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/37/15baf151.jpg","comment_is_top":false,"comment_ctime":1650617690,"is_pvip":false,"replies":[{"id":"125374","content":"是的","user_name":"作者回复","comment_id":343073,"uid":"1180670","ip_address":"","utype":1,"ctime":1650812363,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1650617690","product_id":100103401,"comment_content":"Finishing[cancelling=true, completing=false, rootCause=kotlinx.coroutines.JobCancellationException: Parent job is Completed; job=&quot;coroutine#2&quot;:StandaloneCoroutine{Completed}@d6da883, exceptions=null, list=List{Active}[]]<br>上面cancelling的原因是父job已经被完结","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567018,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650812363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341897,"user_name":"20220106","can_delete":false,"product_type":"c1","uid":2884743,"ip_address":"","ucode":"DC9E91125B21C6","user_header":"","comment_is_top":false,"comment_ctime":1649906225,"is_pvip":false,"replies":[{"id":"124954","content":"是这个意思。","user_name":"作者回复","comment_id":341897,"uid":"1180670","ip_address":"","utype":1,"ctime":1649950813,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1649906225","product_id":100103401,"comment_content":"这里 await() 后面的代码，虽然看起来是阻塞了，但它只是执行流程被挂起和恢复的一种表现。而且如果你仔细思考的话，你会发现上面这个动图，同样也描述了之前 job.join() 的行为模式，在协程执行完毕之前，后面的协程代码都被暂时挂起了，等到协程执行完毕，才有机会继续执行。<br><br>——”在协程执行完毕之前“这里的协程指的父级协程，“后面的协程代码都被暂时挂起了“这里的协程代码指的子级协程代码部份。也就是说：如果子级自己有挂起操作，那么子级的代码会被暂时挂起，直到父级的协程代码执行完毕之后再继续执行子级协程代码（前提是父级没有挂起延迟之类的操作）。","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563208,"discussion_content":"是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649950813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341656,"user_name":"20220106","can_delete":false,"product_type":"c1","uid":2884743,"ip_address":"","ucode":"DC9E91125B21C6","user_header":"","comment_is_top":false,"comment_ctime":1649754189,"is_pvip":false,"replies":[{"id":"124964","content":"你是说的await()吗？要知道，它也是挂起函数呀~","user_name":"作者回复","comment_id":341656,"uid":"1180670","ip_address":"","utype":1,"ctime":1649953066,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1649754189","product_id":100103401,"comment_content":"这里的阻塞和之前的挂起不是一回事把","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563243,"discussion_content":"你是说的await()吗？要知道，它也是挂起函数呀~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649953066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340351,"user_name":"jim","can_delete":false,"product_type":"c1","uid":1491946,"ip_address":"","ucode":"C12DB0F2B570F6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Urc67zDC8R6dh9U1ZFTF36icXewM1seehvOUYUs4hyWSsFzS5WQc2RcrE1Mzs8qtgib5SM5wFrVh22QcQd0JUUBw/132","comment_is_top":false,"comment_ctime":1648776854,"is_pvip":false,"replies":[{"id":"124472","content":"当然了","user_name":"作者回复","comment_id":340351,"uid":"1180670","ip_address":"","utype":1,"ctime":1648813413,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1648776854","product_id":100103401,"comment_content":"思考题，job与job2存在父子协程关系吗？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559544,"discussion_content":"当然了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648813414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335103,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1645333701,"is_pvip":false,"replies":[{"id":"122398","content":"嗯，可以这么理解。","user_name":"作者回复","comment_id":335103,"uid":"1180670","ip_address":"","utype":1,"ctime":1645369686,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645333701","product_id":100103401,"comment_content":"    val job = launch {<br>        log(&quot;First coroutine start!&quot;)<br>        delay(1000L)<br>        log(&quot;First coroutine end!&quot;)<br>    }<br><br>    job.join()<br>    val job2 = launch(job) {<br>        log(&quot;Second coroutine start!&quot;)<br>        delay(1000L)<br>        log(&quot;Second coroutine end!&quot;)<br>    }<br>    log(&quot;job2: isActivate: ${job2.isActive}, isCompleted: ${job2.isCompleted}, isCancel: ${job2.isCancelled}&quot;)<br>    job2.join()<br>    log(&quot;Process end!&quot;)<br><br>在示例代码中，加了一个打印 job2 的状态，发现 job2 已经被取消了，是因为绑定了 job 后，运行时认为其已经被执行过了，所以直接将其取消了？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552257,"discussion_content":"嗯，可以这么理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335101,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1645331522,"is_pvip":false,"replies":[{"id":"122400","content":"哈哈，看到你另一个答案了。说实话，不实际运行的话，确实容易忽略一些细节。","user_name":"作者回复","comment_id":335101,"uid":"1180670","ip_address":"","utype":1,"ctime":1645369757,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1645331522","product_id":100103401,"comment_content":"执行的结果为：<br>First coroutine start!<br>First coroutine end!<br>Second coroutine start!<br>Second coroutine end!<br>Process end!<br><br>结果分析：<br>1. 第一个 job.join() 被调用后，当前通过 runBlocking 启动的协程会被挂起，等待当前 job 执行完成。<br>2. 当第一个 job 执行完成后，会恢复 runBlocking 对应的协程继续执行。<br>3. 当执行到 job2.join() 后，runBlocking 对应的协程又被挂起，并等待 job2 的执行。<br>4. 同样的道理，当 job2 执行完成后，会恢复 runBlocking 对应协程的继续执行。<br>5. 最终打印 “Porcess end!” 后，runBlocking 运行的协程，对应的线程以及进程会相即结束。<br><br><br>","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552259,"discussion_content":"哈哈，看到你另一个答案了。说实话，不实际运行的话，确实容易忽略一些细节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560512,"discussion_content":"我也是没注意到哪个 job 的参数。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649368047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335098,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1645331089,"is_pvip":false,"replies":[{"id":"122401","content":"是的","user_name":"作者回复","comment_id":335098,"uid":"1180670","ip_address":"","utype":1,"ctime":1645369762,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645331089","product_id":100103401,"comment_content":"执行的结果为：<br>First coroutine start<br>First coroutine end!","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552260,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334949,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1645195176,"is_pvip":false,"replies":[{"id":"122411","content":"加油哈~","user_name":"作者回复","comment_id":334949,"uid":"1180670","ip_address":"","utype":1,"ctime":1645370266,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645195176","product_id":100103401,"comment_content":"由浅入深。学习了~","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552270,"discussion_content":"加油哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645370266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334901,"user_name":"提醒圈圈去看书","can_delete":false,"product_type":"c1","uid":1329756,"ip_address":"","ucode":"86F5E3C4E2978A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4a/5c/a786deb5.jpg","comment_is_top":false,"comment_ctime":1645175384,"is_pvip":false,"replies":[{"id":"122405","content":"这其实取决于当前的上下文环境，你可以对比着看后面的CoroutineContext，应该就会明白了。","user_name":"作者回复","comment_id":334901,"uid":"1180670","ip_address":"","utype":1,"ctime":1645369910,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645175384","product_id":100103401,"comment_content":"挂起函数，挂起代码的范围是当前协程对咩？比如说在子协程里执行到了挂起函数，则接下来去执行父协程的代码？和线程会有关系吗？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552264,"discussion_content":"这其实取决于当前的上下文环境，你可以对比着看后面的CoroutineContext，应该就会明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334900,"user_name":"提醒圈圈去看书","can_delete":false,"product_type":"c1","uid":1329756,"ip_address":"","ucode":"86F5E3C4E2978A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4a/5c/a786deb5.jpg","comment_is_top":false,"comment_ctime":1645175156,"is_pvip":false,"replies":[{"id":"122404","content":"如你所说，存在依赖关系的时候，我们就可以挂起函数与async结合了。","user_name":"作者回复","comment_id":334900,"uid":"1180670","ip_address":"","utype":1,"ctime":1645369865,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645175156","product_id":100103401,"comment_content":"老师，想要请教一下这样的场景：3个异步请求A,B,C。1、B依赖A结果，C依赖B结果，这时是放一个协程里，依次执行三个挂起函数？2.ABC可以同时请求，则一个父协程，分别用async开启三个子协程来执行ABC？3.AB可以同时请求，C依赖AB的结果，则一个父协程，分别用async开启两个子协程执行AB，C为挂起函数放在父协程里面，在await之后再执行对咩。   ","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552263,"discussion_content":"如你所说，存在依赖关系的时候，我们就可以挂起函数与async结合了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334833,"user_name":"张国庆","can_delete":false,"product_type":"c1","uid":1121274,"ip_address":"","ucode":"7529A4AAB65D4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/1b/fa/44a3e48a.jpg","comment_is_top":false,"comment_ctime":1645150028,"is_pvip":false,"replies":[{"id":"122306","content":"你可以试着运行一下看看效果，不要忽略了“launch(job) {}”当中的job参数哦！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645151662,"ip_address":"","comment_id":334833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645150028","product_id":100103401,"comment_content":"最后问题应该是按顺序打印","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551846,"discussion_content":"你可以试着运行一下看看效果，不要忽略了“launch(job) {}”当中的job参数哦！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645151663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}