{"id":783348,"title":"08｜关于机器学习，你需要了解的基本概念（一）","content":"<p>你好，我是独行。</p><p>前面我们已经完整体验了大模型的相关技术，可以把大模型简单地运行起来辅助业务了。但是如果我们想要进行更复杂的使用，比如训练、全参数微调等，那以目前的技术和能力还是不够的，我们还需要进一步掌握一些内部的技术原理。</p><p>对比软件开发来说，目前我们仅仅是把一个开源的软件在自己的服务器环境里跑了起来，并且可以简单做一些配置和开发，如果想真正进行二次开发，或解决实际运行中遇到的问题，我们必须去了解软件的运行原理，甚至去阅读源代码。</p><p>从这一章开始，我会向你介绍大模型底层用到的一些技术和原理，虽然网上关于这类技术的教程和文章很多，但是我会以软件开发人员能够理解的方式去介绍，方便你理解，快速掌握。这节课我主要会讲解一下机器学习的基本概念和常用的一些算法。我们先来了解下什么是机器学习。</p><h2>机器学习</h2><p>通俗来讲，<strong>机器学习（Machine Learning，ML）就是让计算机利用数据来“学习”如何完成任务</strong>。和传统编程不同，你需要明确地告诉计算机每一步怎么做，机器学习允许计算机通过分析和学习数据来自我改进及作出决策。</p><p>我们先看一个简单的例子，假设我们想要预测一个地区的房价。在这个场景中，我们的数据集可能包含很多房屋的信息，比如面积、卧室数量、地理位置等，以及每个房屋的售价。在传统编程中，你可能需要根据经验编写复杂的规则和公式来估算价格。但在机器学习中，我们让模型自己去“学习”这些规则。</p><!-- [[[read_end]]] --><p>我们使用Python和一个流行的机器学习库，如scikit-learn，来实现这一目标，代码可能会是这样的：</p><pre><code class=\"language-python\">from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# 加载数据集\ndata = pd.read_csv(\"housing_data.csv\")&nbsp; # 假设这是我们的房屋数据\n\n# 准备数据\nX = data[['面积', '卧室数量', '地理位置']]&nbsp; # 特征\ny = data['售价']&nbsp; # 目标变量\n\n# 划分数据集\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 初始化模型\nmodel = LinearRegression()\n\n# 训练模型\nmodel.fit(X_train, y_train)\n\n# 使用模型进行预测\npredictions = model.predict(X_test)\n\n# 现在，`predictions`包含了我们模型预测的房价\n\n</code></pre><p>简单解释下，假设 housing_data.csv 的数据格式是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/91/ee/9172c53cdf294e3d9e410db689761eee.png?wh=1712x582\" alt=\"图片\"></p><p>特征 <strong>x</strong> 是一个二维数组，包含了面积、卧室数量和地理位置编码这三列。值为：</p><pre><code class=\"language-plain\">[[100, 2, 1],\n&nbsp;[150, 3, 2],\n&nbsp;[120, 2, 2],\n&nbsp;[80, 1, 1]]\n</code></pre><p>目标 <strong>y</strong> 是一个一维数组，包含了“售价”这一列。值为 <code>[300, 450, 350, 220]</code>。</p><p><strong>train_test_split</strong> 是一个非常实用的函数，来自于scikit-learn库。主要作用是将数据集分割成训练集和测试集两部分。训练集用于训练模型，而测试集用于评估模型的性能，以检查模型对于未见过的数据的泛化能力。</p><p>参数 <strong>test_size</strong> 表示测试集在整个数据集中所占的比例。例如，<strong>test_size=0.2</strong> 意味着20%的数据将被用作测试集，剩下的80%则作为训练集。参数 <strong>random_state</strong> 是一个整数，用于控制随机数生成器的状态，提供一个确切的值可以确保每次分割都是相同的。</p><p>这个例子展示了如何使用机器学习来从数据中学习规律，并应用这些规律来作出预测。在这个过程中，我们没有明确地告诉计算机如何计算房价；相反，计算机通过分析提供的数据自己学习了如何进行预测。机器学习的真正魅力在于它的广泛应用，从简单的任务（如预测房价）到复杂的任务（如自动驾驶汽车、语言翻译等），都有机器学习技术的身影。大语言模型实际是各种机器学习技术的叠加，其中比较重要的一项就是机器学习的重要分支：深度学习，也就是以神经网络为主要算法的学习技术。</p><h4>深度学习</h4><p>深度学习主要以深度神经网络（Deep Neural Networks, DNNs）为主，神经网络这种结构完全模拟人的大脑结构，由多层神经元组成。我们知道正常成年人的大脑有大约1000亿个神经元，每个神经元又和其他大约1000个神经元产生连接，每个连接就是我们说的突触，也就是说人的大脑大概有100万亿个突触。</p><p>我们平时所说的大模型的参数，其实就类似于突触，GPT-3有1750亿个参数，就是约1750亿个突触，除以1000的话，GPT-3大约有1.75亿个神经元，智商大约是正常成年人的0.175%，光从这些数据看，离人类智商还有一定差距。</p><p>不过据说OpenAI已经训练完成100万亿参数的GPT-x模型，这样的话，理论智商已经接近普通人，因为训练的效果，实际可能到不了人这么高，有人说和狗的智商差不多，对应IQ值大概在30～40，但是这仅仅是100万亿的参数，200万亿、300万亿呢？超过人类智商只是时间问题。</p><p><span class=\"reference\">注：以上数据都是大约取值，不是精确取数。</span></p><p>深度学习强大之处在于它的深度神经网络，一个多层的神经网络结构，每一层都可以学习不同级别的特征，我们举一个识别图片中是否有猫的例子。</p><ol>\n<li>准备数据：包含训练集和测试集。</li>\n<li>构建模型：在构建神经网络的时候，可以让前面的层学习边缘和纹理，更深的层则学习如何组合这些特征来识别更复杂的形状和对象，如猫的耳朵、鼻子等。</li>\n<li>训练模型：通过输入成千上万张猫的图片来训练网络，通过调整内部参数（权重）使预测错误最小化。</li>\n<li>评估和使用：训练完成后，可以用模型来对图片进行分类。</li>\n</ol><p>第二步和第三步会涉及多个层之间的信息处理，一般这些层被分为三种主要类型。</p><ul>\n<li>输入层：接收原始数据输入，例如图片的像素值。</li>\n<li>隐藏层：多个层级，每一层都通过数学函数转换数据，逐步提取和学习数据的特征。较低层可能学习简单特征，如边缘和角点，而更深层则学习复杂特征，如对象的部分和整体结构。</li>\n<li>输出层：根据学到的特征作出最终的预测或分类，例如判断图像中是猫还是狗。</li>\n</ul><p>在训练过程中，模型通过一种叫作反向传播的算法自动调整其内部参数（称为权重和偏差），来最小化模型的预测和实际结果之间的差异，整个过程通常需要大量的数据和计算资源。这是简单的介绍，后面我们会通过案例去不断深入理解和学习。</p><h2>机器学习过程</h2><p>了解了机器学习的基本概念后，我们来看看机器学习一般有哪些过程，从工程化角度，我梳理了10个步骤，从问题提出到模型上线及运维，算是比较全面的了。</p><h4>1. 定义问题</h4><p>明确你希望机器学习解决的问题。比如可能是一个分类问题（如区分图片中是猫还是狗），或者是一个回归问题（如预测房价），也有可能是一个聚类问题（如识别有相似需求的客户群体）。</p><h4>2. 收集数据</h4><p>数据是机器学习的基础。你需要收集足够多、质量好的数据，这些数据需要能够代表你试图解决的问题。数据可以通过各种方式获取，如公开数据集、公司内部数据、网络爬虫等。还记不记得我们前面讲过的GPT-3的训练数据集，大约45TB的公开数据，其中占比最大的一块是Common Crawl，大约占了60%，就是一个通过爬虫长期爬取的数据集。</p><h4>3. 数据预处理</h4><p>收集到的原始数据往往是杂乱无章的。数据预处理的目的是将这些数据转换成一种更适合机器学习算法处理的格式。这包括处理缺失值、异常值、数据标准化、特征选择等步骤。GPT-3的45TB的数据集，经过预处理，生成大概750GB的高质量数据。</p><h4>4. 分割数据</h4><p>将数据分为训练集和测试集（有时还有验证集）。训练集用于训练模型，测试集用于评估模型的性能。这样做的目的是检验模型对未知数据的泛化能力。我们上面讲的scikit-learn库的train_test_split函数，就是用来将数据集进行切割的函数，当然还有其他库的其他方法。</p><h4>5. 选择模型</h4><p>根据问题的类型和数据的特点选择合适的机器学习模型，下面列举一些常见的机器学习模型。<br>\n<img src=\"https://static001.geekbang.org/resource/image/1b/5c/1b46b09e16e38b9729ef8bd75a50de5c.jpg?wh=1800x1802\" alt=\"图片\"></p><p>你先不用着急去理解，后面我会挑几个去讲解，慢慢地等整个课程学习下来，我们深入研究几个模型，其他的即便课程中没有涉及，你自己去学习也是能学懂的。</p><h4>6. 训练模型</h4><p>训练就是使用训练集数据训练选定的模型。整个过程中，模型会尝试学习数据中的规律和关系，以便在遇到新数据时能够作出准确的预测或分类。有时模型也会自动调整参数（权重），自动进行测试，并调整权重使效果最好，这个过程非常耗费资源，GPT-3单次训练成本高达近500万美金，一般每3个月训练一次，一年如果训练4次的话，光训练成本就接近1亿人民币了。</p><h4>7. 评估模型</h4><p>使用测试集数据评估模型的性能。常用的评估指标包括准确率、召回率、F1 分数等。评估过程可能会揭示模型的不足之处，需要回到前面的步骤进行调整。当然，我们经常看到各种各样的模型性能评估基准，有MMLU、CEval、GSM8K等。我们也会看到各大厂商会去刷这些基准测试的榜单。比如：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/08/fd4979fd8ac7ce65eacaacbe1bb22408.png?wh=2414x1332\" alt=\"图片\" title=\"图片来源于网络https://github.com/CLUEbenchmark/SuperCLUE\"></p><h4>8. 参数调优和模型优化</h4><p>根据模型在测试集上的表现，调整模型的参数或进行其他优化，以提高模型的性能。这个过程可能会反复进行多次，包含在训练、微调过程中。</p><h4>9. 部署模型</h4><p>当模型的推理效果达到预期值时，比如准确度超过xx%，我们就可以认为模型的效果是OK的，可以将其部署到实际应用中。部署后，模型将开始对真实的数据进行推理。</p><h4>10. 监控和维护</h4><p>在模型部署后，需要持续监控其性能，并根据新收集的数据定期进行维护和更新。这是因为随着时间的推移，数据的分布可能会发生变化，这种现象被称为概念漂移，可能会导致模型性能下降。模型维护部分的数据，可以是模型的开发者主动进行收集，也可以在公开的产品内由用户进行反馈，比如现在的大模型产品，ChatGPT、ChatGLM都有实时的用户反馈，这一招其实非常厉害，广泛收集用户的反馈进行学习。</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/72/c6e477855345a114fcae3b2b77ec5672.png?wh=772x217\" alt=\"图片\"></p><h2>经典算法</h2><h4>线性回归</h4><p>线性回归是一种预测分析技术，用于研究两个或多个变量之间的关系。简单来说，它尝试用一条直线（在二维空间中）或一个平面（在三维空间中）等，尽可能地拟合这些变量间的数据点。这条直线或平面可以用来预测或估计一个变量基于另一个变量的值。</p><p>假设我们有一个因变量y和一个自变量x。线性回归会尝试找到一条直线y=ax+b，其中a是斜率，b是截距，以便这条直线尽可能地接近所有数据点。假设你想预测一个地区的房价。这里，房价是因变量y，而房屋的面积是自变量x。通过收集一些数据，我们可以用线性回归模型来预测房价。</p><p>下面是一个使用sklearn库进行线性回归的简单例子。假设我们有以下面积和价格的数据：</p><pre><code class=\"language-python\">面积（平方米）: [35, 45, 40, 60, 65]\n价格（万元）: [30, 40, 35, 60, 65]\n</code></pre><p>我们将使用这些数据来拟合一个线性回归模型，并预测面积为50平方米的房屋的价格。</p><pre><code class=\"language-python\">from sklearn.linear_model import LinearRegression\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 定义数据\nX = np.array([35, 45, 40, 60, 65]).reshape(-1, 1) # 面积\ny = np.array([30, 40, 35, 60, 65]) # 价格\n\n# 创建并拟合模型\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# 预测面积为50平方米的房屋价格\npredict_area = np.array([50]).reshape(-1, 1)\npredicted_price = model.predict(predict_area)\n\nprint(f\"预测的房价为：{predicted_price[0]:.2f}万美元\")\n\n# 绘制数据点和拟合直线\nplt.scatter(X, y, color='blue')\nplt.plot(X, model.predict(X), color='red')\nplt.title('房价预测')\nplt.xlabel('面积（平方米）')\nplt.ylabel('价格（万元）')\nplt.show()\n\n</code></pre><p>执行上面的代码，得到如下图像：</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/d1/e0431bb4558ff18da1773b7a957f35d1.png?wh=2436x1546\" alt=\"图片\"></p><pre><code class=\"language-python\">预测的房价为：47.20万美元\n</code></pre><p>图中蓝色的点代表用于训练模型的实际数据点，红色的线则展示了模型拟合的结果。可以看出，这条直线尝试穿过所有的数据点，以此来预测面积与价格之间的关系。通过这个简单的例子，你可以看到线性回归是如何帮助我们理解和预测变量之间的关系的。它是一种非常实用的工具，广泛应用于经济学、生物统计学、环境科学和许多其他领域。</p><h4>逻辑回归</h4><p>逻辑回归主要用于处理分类问题，尤其是二分类问题。它的目的是预测一个事件发生的概率，并将这个概率转换为二元结果：0或1、是或否等。逻辑回归通过使用逻辑函数（也称为Sigmoid函数）将线性回归模型的输出映射到0和1之间的概率值上。这个逻辑函数定义如下：</p><p>$$\\sigma（z）= \\frac{1}{1+e^{-z}}$$</p><p>其中 $z$ 是线性回归模型的输出，即 $z = \\beta_{0} + \\beta_{1}x_{1} + \\beta_{2}x_{2} + … +  \\beta_{n}x_{n}$。在这个表达式中，$x_1,x_2,…,x_n$是特征变量，$\\beta_0,\\beta_1,…,\\beta_n$ 是模型参数。</p><p>整体看这个公式，模型参数很关键，而取得模型参数的值就需要用到<strong>似然函数</strong>了。如何理解似然函数呢？一句话讲就是<strong>基于观测，通过结果反推模型参数</strong>。放到这个案例中，如果我们在某些特定场景下，得出了$\\sigma$，并且知道了 $x_1,x_2…x_n$ 的值，我们就可以推测出使$\\sigma$取得最大的$\\beta_1,\\beta_2…\\beta_n$的值，而这个值就可以当做模型参数来用，从而进行概率推导。我们举个简单的例子。</p><p>假设我们要预测学生是否会通过考试，基于他们的学习时间进行预测，最终有两个分类：通过（用1表示）和未通过（用0表示）。使用逻辑回归模型来预测给定学习时间下学生通过考试的概率。</p><pre><code class=\"language-python\"># 导入库\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\n# 准备数据\nX = np.array([[10], [20], [30], [40], [50]]) # 学习时间\ny = np.array([0, 0, 1, 1, 1]) # 通过考试与否\n# 创建逻辑回归模型并训练\nmodel = LogisticRegression()\nmodel.fit(X, y)\n# 预测学习时间为25小时的学生通过考试的概率\nprediction_probability = model.predict_proba([[25]])\nprediction = model.predict([[25]])\nprint(f\"通过考试的概率为：{prediction_probability[0][1]:.2f}\")\nprint(f\"预测分类：{'通过' if prediction[0] == 1 else '未通过'}\")\n\n</code></pre><p>代码执行结果如下：</p><pre><code class=\"language-python\">通过考试的概率为：0.50\n预测分类：通过\n</code></pre><p>这里逻辑稍微有点绕，涉及统计学的概念，如果你感兴趣，可以看一下相关的书籍，这样可以理解得更加深入一些。不过不看也没关系，这节课只是概念性的介绍，随着学习的深入，这些概念你都会慢慢熟悉起来，看得多了，慢慢就都懂了。我们下一节课会继续学习其他经典算法。</p><h2>小结</h2><p>从这节课开始难度慢慢大起来了，如果你没有数学、算法基础，学起来可能会稍微有点吃力，不过我讲的内容的特点就是希望在没有基础的情况下你也能理解机器学习，所以你不用着急，我会想办法，用开发工程师能看得懂的代码和讲解方式，让你更加轻松。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/bb/7108c70cb25777a37f566acf4f0410bb.png?wh=1764x1278\" alt=\"图片\"></p><p>下一节课我会继续讲解其他经典算法，比如决策树、随机森林、支持向量机、神经网络，你也可以抽空补补相关的数据和统计学知识。</p><h2>思考题</h2><p>这节课我没有给出各个算法的缺点，你可以思考一下，线性回归的局限是什么，逻辑回归的局限又是什么？欢迎你在评论区留言讨论，如果你觉得这节课的内容对你有帮助的话，也欢迎你分享给其他朋友，我们下节课再见。</p>","comments":[{"had_liked":false,"id":391620,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1718678706,"is_pvip":false,"replies":[{"id":142404,"content":"课代表！","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1718691946,"ip_address":"浙江","comment_id":391620,"utype":1}],"discussion_count":5,"race_medal":2,"score":2,"product_id":100770601,"comment_content":"第8讲打卡。老师专栏的结构和思路对开发工程师真的特别友好~\n思考题：线性回归和逻辑回归的局限性很明显，那就是对非线性关系的拟合效果比较差。实际生活中存在大量的非线性关系，例如一个国家的GDP作为因变量，影响它的自变量有很多，比如国家人口、面积、经济体制、产业布局、历史文化等等因素，这里面存在大量的非线性关系，很难通过线性回归或者逻辑回滚来预测。\n最后一个小补充：在机器学习领域，模型的“性能”，更多指的是准确率、召回率这些指标，并不完全等同于工程领域的程序性能，如响应时间、吞吐量等等。","like_count":13,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646763,"discussion_content":"课代表！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718691946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1182372,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","nickname":"张申傲","note":"","ucode":"22D46BC529BA8A","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":646765,"discussion_content":"谢谢老师的肯定！我跟老师的背景类似，之前都在大厂做Java开发，最近想转型LLM应用开发，希望能跟老师多多交流学习~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718692902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646763,"ip_address":"北京","group_id":0},"score":646765,"extra":""}]},{"author":{"id":2923965,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/9d/bd/aa37ee33.jpg","nickname":"Yutong Bao","note":"","ucode":"C79460C15590F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655345,"discussion_content":"总结的非常好，有收获！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1734655746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646751,"discussion_content":"哇好专业👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718681369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1182372,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","nickname":"张申傲","note":"","ucode":"22D46BC529BA8A","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":646754,"discussion_content":"过奖了，一起学习~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718682580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646751,"ip_address":"北京","group_id":0},"score":646754,"extra":""}]}]},{"had_liked":false,"id":392427,"user_name":"gesanri","can_delete":false,"product_type":"c1","uid":1121174,"ip_address":"湖北","ucode":"AE3B97DC3ED668","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELtOO0HKrj5SI5JSlmwiaCvaF6GLiaTmf5NX88OZaO3HymTAGTeIoicBUjqzmMF6sF5raPFjuqLFibrrw/132","comment_is_top":false,"comment_ctime":1720923778,"is_pvip":false,"replies":[{"id":142687,"content":"GPT是用大量的通用语料训练的，并且也不是什么都知道，如果涉及一些专业领域，不在他训练范围内的知识，他也是回答不上来的。我们课程中讲的是在特定领域进行微调，如果你用GPT做某个特定领域的知识生成，也需要进行微调","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1721380715,"ip_address":"浙江","comment_id":392427,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"有个疑问，这里举的例子都是针对某一个问题进行训练，而实际的问题是不可穷举的，gpt是怎么训练的呢？首先对所有可能的问题进行分类，完后对每个分类依次选择对应的算法进行训练，最后汇总？","like_count":1,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":648328,"discussion_content":"GPT是用大量的通用语料训练的，并且也不是什么都知道，如果涉及一些专业领域，不在他训练范围内的知识，他也是回答不上来的。我们课程中讲的是在特定领域进行微调，如果你用GPT做某个特定领域的知识生成，也需要进行微调","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1721380716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391847,"user_name":"阿斯蒂芬","can_delete":false,"product_type":"c1","uid":1024164,"ip_address":"广东","ucode":"61D5E3BDA4EBC5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","comment_is_top":false,"comment_ctime":1719275125,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"线性回归局限：数据越离散，线性效果越不好，而现实生活中很多数据的分布就是非线性分布，而且维度也远超线性模型能够覆盖。\n逻辑回归局限：对于N&gt;2的分类，简单的逻辑回归是远远不够的，另外就如文中图所展示，还有关于推荐、语义理解等这类有“推理”和“创造”特性的，逻辑回归应该也无法很好的cover？\n\n不过仔细想想，更“高级”的模型，是否也是基于线性和回归的思路壮大发展的？比如维度更多，也可以理解为更多的线性回归交叉织网一样，分类更多，就像递归进行二分类？","like_count":2},{"had_liked":false,"id":393765,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1724814923,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100770601,"comment_content":"我感觉这个关键还是数据，如果给出的数据与预测的值之间相关性低，得出的结果就必然差。","like_count":0}]}