{"id":268296,"title":"03 | 矩阵：为什么说矩阵是线性方程组的另一种表达？","content":"<p>你好，我是朱维刚。欢迎你继续跟我学习线性代数，今天我们要讲的内容是“矩阵”。</p><p>在开始学习之前，我想先问你个问题，你觉得，学习矩阵有什么用呢？你可以先自己想一想。之后我们讲任何一个知识的时候，你都可以从这个角度出发，自己先思考一下，这样有助于你对所学内容理解得更深刻。</p><p>对于刚才那个问题，我的答案很简单，就一句话，从我们程序员的角度去理解的话，<strong>矩阵可以极大地提高计算机的运算效率</strong>。怎么说呢？我给你举一个例子。在机器学习中（特别是深度学习，或者更具体一点，神经网络），并行计算是非常昂贵的。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/0d/a66474802f395e8e1a78147c7949150d.png?wh=1200*661\" alt=\"\"></p><p>上图是一个典型的神经网络架构，在这时候，矩阵就能发挥用武之地了，计算$H$隐藏层输出的公式是：$H = f( W.x + b )$，其中$W$是权重矩阵，$f$是激活函数，$b$是偏差，$x$是输入层矩阵。而这个计算过程就叫做<strong>向量化</strong>（Vectorization），这也是GPU在深度学习中非常重要的原因，因为GPU非常擅长做类似矩阵乘之类的运算。</p><!-- [[[read_end]]] --><p>$$<br>\nX=\\left|\\begin{array}{l}<br>\nx_{1} \\\\\\<br>\nx_{2}<br>\n\\end{array}\\right|<br>\n$$</p><p>$$<br>\nW=\\left|\\begin{array}{ll}<br>\nw_{1} &amp; w_{2} \\\\\\<br>\nw_{4} &amp; w_{5} \\\\\\<br>\nx_{3} &amp; w_{6}<br>\n\\end{array}\\right|<br>\n$$</p><p>$$<br>\nH=f\\left(\\left|\\begin{array}{ll}<br>\nw_{1} &amp; w_{2} \\\\\\<br>\nw_{4} &amp; w_{5} \\\\\\<br>\nx_{3} &amp; w_{6}<br>\n\\end{array}\\right|\\left|\\begin{array}{l}<br>\nx_{1} \\\\\\<br>\nx_{2}<br>\n\\end{array}\\right|+b\\right)<br>\n$$</p><p>不过，矩阵也不仅仅局限于神经网络的应用，同时它也可以用在计算机图形图像的应用中，比如，三维物体从取景到屏幕的显示，就需要经历一系列的空间变换，才能生成二维图像显示在显示器上。在这个计算过程中，我们都需要用到矩阵。</p><p>矩阵是非常实用的，但它正式作为数学中的研究对象出现，其实是在行列式的研究发展起来之后。英国数学家 Arthur Cayley 被公认为矩阵论的创立人，他提出的矩阵概念可能来自于行列式。但我相信另一种说法，提出矩阵是为了更简单地表达线性方程组，也就是说，<span class=\"orange\">矩阵是线性方程组的另一种表达。</span></p><h2>矩阵的基本概念</h2><p>线性方程组的概念很简单，上节我们已经简单提过。你在小学或中学肯定也学过二元一次方程和二元一次方程组。</p><p>$$ax+by=c$$</p><p>$$<br>\n\\left\\{\\begin{array}{l}<br>\na_{1} x+b_{1} y+C_{1}=0 \\\\\\<br>\na_{2} x+b_{2} y+C_{2}=0<br>\n\\end{array}\\right.<br>\n$$</p><p>在这样一个方程组中，$a1$、$a2$、$b1$、$b2$不能同时为0。当我们把二元一次方程组再扩展一下，变成多元一次方程组时，我们就能得到线性方程组的一般表达，即$AX=B$。</p><p>$$<br>\n\\left\\{\\begin{array}{l}<br>\na_{11} x_{1}+a_{12} x_{2}+\\cdots+a_{1 n} x_{n}=b_{1} \\\\\\<br>\na_{21} x_{1}+a_{22} x_{2}+\\cdots+a_{2 n} x_{n}=b_{2} \\\\\\<br>\n\\cdots \\cdots \\cdots \\cdots \\cdots \\cdots \\cdots \\cdots \\cdots \\cdots \\\\\\<br>\na_{m 1} x_{1}+a_{m 2} x_{2}+\\cdots+a_{m n} x_{n}=b_{m}<br>\n\\end{array}\\right.<br>\n$$</p><p>于是，这个线性方程组的所有系数就构成了一个$m×n$的$m$行$n$列矩阵：</p><p>$$<br>\nA=\\left[\\begin{array}{cccc}<br>\na_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1 n} \\\\\\<br>\na_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2 n} \\\\\\<br>\n\\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots \\\\\\<br>\na_{m 1} &amp; a_{m 2} &amp; \\ldots &amp; a_{m n}<br>\n\\end{array}\\right]<br>\n$$</p><p>我们把$A$称为该方程组的系数矩阵，而当我们把等式右边的常数$b$放入矩阵后，就是下面这样：</p><p>$$<br>\n\\widetilde{A}=\\left[\\begin{array}{ccccc}<br>\na_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1 n} &amp; b_{1} \\\\\\<br>\na_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2 n} &amp; b_{2} \\\\\\<br>\n\\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots \\\\\\<br>\na_{m 1} &amp; a_{m 2} &amp; \\ldots &amp; a_{m n} &amp; b_{m}<br>\n\\end{array}\\right]<br>\n$$</p><p>这样我们就得到了$A$矩阵的增广矩阵$\\widetilde{A}$ ，可以表示为$(A, B)$，这里的$B$表示的是方程组常数项所构成的列向量，也就是$m×1$的$m$行$1$列矩阵：</p><p>$$<br>\nB=\\left|\\begin{array}{l}<br>\nb_{1} \\\\\\<br>\nb_{2} \\\\\\<br>\n\\cdots \\\\\\<br>\nb_{m}<br>\n\\end{array}\\right|<br>\n$$</p><p>如果设$X$为$n×1$的$n$行$1$列矩阵：</p><p>$$<br>\nX=\\left|\\begin{array}{c}<br>\nx_{1} \\\\\\<br>\nx_{2} \\\\\\<br>\n\\cdots \\\\\\<br>\nx_{n}<br>\n\\end{array}\\right|<br>\n$$</p><p>那么线性方程组$A$，就可以表示为$AX=B$的矩阵形式。如果我们再换一种表示形式，设：$a_{1} ,a_{2},\\ldots, a_{n},\\beta$表示增广矩阵$\\widetilde{A}$ 的列向量，则线性方程组$A$又可表示为$a_{1} x_{1}+a_{2} x_{2}+\\cdots+a_{n} x_{n}=β$。</p><p>线性方程组的矩阵和向量形式都是线性方程组的其他表达形式。在工作中，你可以用它们来简化求解，甚至可以提升计算效率，就如之前提到的神经网络的隐藏层的输出计算、图形图像的三维空间变换。在数学中也是同样的，你可以经常运用它们来简化求解。具体线性方程组求解的内容比较多，我们下一节课再来详细讲解求解过程。</p><p>通过前面的讲解，我相信你对矩阵有了一定的了解，现在我们再回头来看看矩阵的定义吧。</p><p>矩阵的定义是：一个$(m, n)$矩阵$A$，是由$m×n$个元素组成，$m$和$n$是实数，其中元素$a_{i j}, \\mathrm{i}=1, \\ldots, \\mathrm{m}, \\mathrm{j}=1, \\ldots,  \\mathrm{n}$按$m$行$n$列的矩形排布方式后可以形成矩阵$A$：</p><p>$$<br>\nA=\\left[\\begin{array}{cccc}<br>\na_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1 n} \\\\\\<br>\na_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2 n} \\\\\\<br>\n\\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots \\\\\\<br>\na_{m 1} &amp; a_{m 2} &amp; \\ldots &amp; a_{m n}<br>\n\\end{array}\\right]<br>\n$$</p><p>其中$a_{i j}$属于实数或复数，在我们的场景中是实数$R$，按通常的惯例，$(1, n)$矩阵叫做行，$(m, 1)$矩阵叫做列，这些特殊的矩阵叫做行或列向量。</p><p>定义完矩阵后，我接着讲一个比较有趣的概念，矩阵转换（Matrix transformation）。矩阵转换经常被用在计算机图形图像的转换中，比如，一张彩色图片从RGB角度来说是三维的，如果要转换成灰度图片，也就是一维图片，那就要做矩阵转换。</p><p>我们来看一下矩阵转换的过程。设$\\mathrm{R}^{m \\times n}$是实数矩阵$(m, n)$的集合，$A \\in \\mathrm{R}^{m \\times n}$可以表示成另一种形式 $a \\in \\mathrm{R}^{mn}$ 。我们把矩阵的$n$列堆叠成一个长向量后完成转换。这个转换也叫做reshape，其实就是重新调整原矩阵的行数、列数和维数，但是元素个数不变。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/4a/a59fefec5c22effacb862e61e87c034a.png?wh=1920*1060\" alt=\"\"></p><h2>矩阵的运算</h2><p>了解了矩阵的基本定义后，我们才能进入矩阵的运算环节，就是矩阵的加和乘。</p><p>加运算很简单，两个矩阵$A \\in \\mathrm{R}^{m \\times n}$，$B \\in \\mathrm{R}^{m \\times n}$的加运算其实就是矩阵各自元素的加。</p><p>$$<br>\nA+B=\\left[\\begin{array}{ccc}<br>\na_{11}+b_{11} &amp; \\ldots &amp; a_{1 n}+b_{1 n} \\\\\\<br>\n\\cdot &amp; &amp; \\cdot \\\\\\<br>\n\\cdot &amp; &amp; \\cdot \\\\\\<br>\n\\cdot &amp; &amp; \\cdot \\\\\\<br>\na_{m 1}+b_{m 1} &amp; \\ldots &amp; a_{m n}+b_{m n}<br>\n\\end{array}\\right] \\in R^{m \\times n}<br>\n$$</p><p>我推荐你使用NumPy的einsum来高效地做这类运算，因为它在速度和内存效率方面通常可以超越我们常见的array函数。</p><pre><code>C= np.einsum('il, lj', A, B)\n</code></pre><p>接下来，我们一起来看看矩阵的乘。这里你需要注意，矩阵的乘和通常意义上“数之间的乘”不同，矩阵的乘有多种类型，这里我讲三种最普遍，也是在各领域里用得最多的矩阵乘。</p><h3>1.普通矩阵乘</h3><p>普通矩阵乘是应用最广泛的矩阵乘，两个矩阵$A \\in \\mathrm{R}^{m \\times n}$，$B \\in \\mathrm{R}^{n \\times k}$，普通矩阵则乘可以表示为$C=A B \\in R^{m \\times k}$，$C$中元素的计算规则是矩阵$A$、$B$对应两两元素乘积之和。</p><p>$$<br>\nc_{i j}=\\sum_{k=1}^{n} a_{i k} b_{k j}, i=1, \\ldots, m, j=1, \\ldots, l<br>\n$$</p><p>我们举例来说明。$C$的第一个元素$c_{11}=a_{11} \\times b_{11}+a_{12} \\times b_{21}+a_{13} \\times b_{31}=1 \\times 1+2 \\times 2+3 \\times 3$。</p><p>$$<br>\nC=A B=\\left[\\begin{array}{lll}<br>\n1 &amp; 2 &amp; 3 \\\\\\<br>\n4 &amp; 5 &amp; 6<br>\n\\end{array}\\right]\\left[\\begin{array}{ll}<br>\n1 &amp; 4 \\\\\\<br>\n2 &amp; 5 \\\\\\<br>\n3 &amp; 6<br>\n\\end{array}\\right]=\\left[\\begin{array}{lll}<br>\n1 \\times 1+2 \\times 2+3 \\times 3 &amp; 1 \\times 4+2 \\times 5+3 \\times 6 \\\\\\<br>\n4 \\times 1+5 \\times 2+6 \\times 3 &amp; 4 \\times 4+5 \\times 5+6 \\times 6<br>\n\\end{array}\\right]=\\left[\\begin{array}{cc}<br>\n14 &amp; 32 \\\\\\<br>\n32 &amp; 77<br>\n\\end{array}\\right]<br>\n$$</p><p>这里需要特别注意的是，只有相邻阶数匹配的矩阵才能相乘，例如，一个$n×k$矩阵$A$和一个$k×m$矩阵$B$相乘，最后得出$n×m$矩阵$C$，而这里的$k$就是相邻阶数。</p><p>$$AB=C$$</p><p>但反过来B和A相乘就不行了，因为相邻阶数$m$不等于$n$。</p><h3>2.哈达玛积</h3><p>哈达玛积理解起来就很简单了，就是矩阵各对应元素的乘积，$c_{i j}=a_{i j} × b_{i j}$ 。举个例子：</p><p>$$<br>\nC=A^{*} B=\\left[\\begin{array}{ll}<br>\n1 &amp; 2 \\\\\\<br>\n4 &amp; 5<br>\n\\end{array}\\right]\\left[\\begin{array}{ll}<br>\n1 &amp; 4 \\\\\\<br>\n2 &amp; 5<br>\n\\end{array}\\right]=\\left[\\begin{array}{cc}<br>\n1 * 1 &amp; 2 * 4 \\\\\\<br>\n4 * 2 &amp; 5 * 5<br>\n\\end{array}\\right]=\\left[\\begin{array}{cc}<br>\n1 &amp; 8 \\\\\\<br>\n8 &amp; 25<br>\n\\end{array}\\right]<br>\n$$</p><p>哈达玛积其实在数学中不常看到，不过，在编程中哈达玛积非常有用，因为它可以用来同时计算多组数据的乘积，计算效率很高。</p><h3>3.克罗内克积</h3><p>克罗内克积是以德国数学家利奥波德·克罗内克（Leopold Kronecker）的名字命名的。它可以应用在解线性矩阵方程和图像处理方面，当然从更时髦的角度说，它还能用在量子信息领域，我们也称之为直积或张量积。</p><p>和普通矩阵乘和哈达玛积不同的是，克罗内克积是两个任意大小矩阵间的运算，表示为$A×B$，如果$A$是一个$m × n$的矩阵，而$B$是一个$p×q$的矩阵，克罗内克积则是一个$mp×nq$的矩阵。</p><p>接下来我们需要定义一个<strong>在矩阵的乘法中起着特殊作用</strong>的矩阵，它就是<strong>单位矩阵</strong>。高等代数中，在求解相应的矩阵时，若添加单位矩阵，通过初等变换进行求解，往往可以使问题变得简单。按照百度百科的解释，单位矩阵如同数的乘法中的$1$，这种矩阵就被称为单位矩阵。它是个方阵，从左上角到右下角的对角线，也就是主对角线上的元素均为$1$，除此以外全都为$0$。</p><p>在线性代数中，大小为$n$的单位矩阵就是在主对角线上均为1，而其他地方都是$0$的$n×n$的方阵，它用$\\mathrm{I}_{n}$表示，表达时为了方便可以忽略阶数，直接用$\\mathrm{I}$来表示：</p><p>$$<br>\nI_{1}=[1], I_{2}=\\left[\\begin{array}{ll}<br>\n1 &amp; 0 \\\\\\<br>\n0 &amp; 1<br>\n\\end{array}\\right], I_{3}=\\left[\\begin{array}{lll}<br>\n1 &amp; 0 &amp; 0 \\\\\\<br>\n0 &amp; 1 &amp; 0 \\\\\\<br>\n0 &amp; 0 &amp; 1<br>\n\\end{array}\\right], …, I_{n}=\\left[\\begin{array}{cccc}<br>\n1 &amp; 0 &amp; … &amp; 0 \\\\\\<br>\n0 &amp; 1 &amp; … &amp; 0 \\\\\\<br>\n. &amp; . &amp; … &amp; . \\\\\\<br>\n. &amp; . &amp; . &amp; . \\\\\\<br>\n0 &amp; 0 &amp; … &amp; 1<br>\n\\end{array}\\right]<br>\n$$</p><h2>矩阵的性质</h2><p>在了解了矩阵加和乘，以及单位矩阵后，我们是时候来看一看矩阵的性质了。了解矩阵的性质是进行矩阵计算的前提，就像我们小时候学加减乘除四则运算法则时那样。所以，这块内容对你来说应该不难，你作为了解就好，重点是之后的运算。</p><h3>1.结合律</h3><p>任意实数$m×n$矩阵$A$，$n×p$矩阵$B$，$p×q$矩阵$C$之间相乘，满足结合律$(AB)C=A(BC)$。这个很好理解，我就不多说了。</p><p>$$\\forall A \\in R^{m \\times n}, B \\in R^{n \\times p}, C \\in R^{p \\times q}:(A B) C=A(B C)$$</p><h3>2.分配律</h3><p>任意实数$m×n$矩阵$A$和$B$，$n×p$矩阵$C$和$D$之间相乘满足分配律$(A+B)C=AC+BC$，$A(C+D)=AC+AD$。</p><p>$$<br>\n\\forall \\mathrm{A}, B \\in \\mathrm{R}^{m \\times n}, C, D \\in \\mathrm{R}^{n \\times p}:(A+B) C=A C+B C, A(C+D)=A C+A D<br>\n$$</p><h3>3.单位矩阵乘</h3><p>任意实数$m×n$矩阵A和单位矩阵之间的乘，等于它本身$A$。</p><p>$$<br>\n\\forall A \\in R^{m \\times n}: I_{m} A=A I_{n}=A<br>\n$$</p><p>注意，这里的行和列不同，$m \\neq n$意味着，根据矩阵乘，左乘和右乘单位矩阵也不同，也就是$I_{m} \\neq I_{n}$。</p><h2>逆矩阵与转置矩阵</h2><p>了解矩阵基本概念、运算，以及性质后，我来讲一讲矩阵应用中的两个核心内容——逆矩阵和转置矩阵。逆矩阵和转置矩阵在实际应用中大有用处，比如：坐标系中的图形变换运算。我们先来看下什么是逆矩阵。</p><h3>逆矩阵</h3><p>下面这个图你应该非常熟悉了，图中表现的是数字的倒数，$2$的倒数是$\\frac{1}{2}$，$\\frac{1}{2}$的倒数是$2$。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/d0/8db06d8746f6e615a1b2a110b9ef68d0.png?wh=1920*1078\" alt=\"\"></p><p>其实逆矩阵也有着类似的概念，只不过是写法不一样，我们会把逆矩阵写成$A^{-1}$。那为什么不是$\\frac{1}{A}$呢？那是因为数字1无法被矩阵除。</p><p><img src=\"https://static001.geekbang.org/resource/image/24/b7/245c9964790b8dyy4888ebdb87b5d5b7.png?wh=1920*1074\" alt=\"\"></p><p>我们知道，$2$乘以它的倒数$\\frac{1}{2}$等于$1$。同样的道理，$A$乘以它的逆矩阵$A^{-1}$就等于单位矩阵，即$\\mathrm{A} \\times A^{-1}=\\mathrm{I}$（$I$即单位矩阵），反过来也一样，$\\mathrm{A}^{-1} \\times A=\\mathrm{I}$。</p><p>为方便你理解，我用一个$2 \\times 2$矩阵$A$来解释一下逆矩阵的算法。首先，我们交换$a_{11}$和$a_{22}$的位置，然后在$a_{12}$和$a_{21}$前加上负号，最后除以行列式$a_{11} a_{22}-a_{12} a_{21}$。</p><p>$$<br>\nA^{-1}=\\left[\\begin{array}{ll}<br>\na_{11} &amp; a_{12} \\\\\\<br>\na_{21} &amp; a_{22}<br>\n\\end{array}\\right]^{-1}=\\frac{1}{a_{11} a_{22}-a_{12} a_{21}}\\left[\\begin{array}{cc}<br>\na_{22} &amp; -a_{12} \\\\\\<br>\n-a_{21} &amp; a_{11}<br>\n\\end{array}\\right]<br>\n$$</p><p>那我们该如何验证这是不是正解呢？</p><p>方法其实很简单，记得刚才的公式就行，$\\mathrm{A} \\times A^{-1}=\\mathrm{I}$。现在我们就代入公式来验证一下，$A$和它的逆矩阵相乘，通过刚才的算法最终得出的结果是单位矩阵。</p><p>$$<br>\nA \\times A^{-1}=\\left[\\begin{array}{llll}<br>\na_{11} &amp; a_{12} \\\\\\<br>\na_{21} &amp; a_{22}<br>\n\\end{array}\\right]\\left[\\begin{array}{ll}<br>\na_{11} &amp; a_{12} \\\\\\<br>\na_{21} &amp; a_{22}<br>\n\\end{array}\\right]^{-1}=\\left[\\begin{array}{ll}<br>\na_{11} &amp; a_{12} \\\\\\<br>\na_{21} &amp; a_{22}<br>\n\\end{array}\\right]\\left[\\begin{array}{lll}<br>\n\\frac{a_{22}}{a_{11} a_{22}-a_{12} a_{21}} &amp; \\frac{-a_{12}}{a_{11} a_{22}-a_{12} a_{21}} \\\\\\<br>\n\\frac{-a_{21}}{a_{11} a_{22}-a_{12} a_{21}} &amp; \\frac{a_{11}}{a_{11} a_{22}-a_{12} a_{21}}<br>\n\\end{array}\\right]=\\left[\\begin{array}{ll}<br>\n\\frac{a_{11} \\times a_{22}}{a_{11} a_{22}-a_{12} a_{21}}+\\frac{a_{12} ×(-a_{21})}{a_{11} a_{22}-a_{12} a_{21}} &amp; \\frac{a_{11} ×(-a_{12})}{a_{11} a_{22}-a_{12} a_{21}}+\\frac{a_{12} \\times a_{11}}{a_{11} a_{22}-a_{12} a_{21}} \\\\\\<br>\n\\frac{a_{21} \\times a_{22}}{a_{11} a_{22}-a_{12} a_{21}}+\\frac{a_{22} ×(-a_{21})}{a_{11} a_{22}-a_{12} a_{21}} &amp; \\frac{a_{21} ×(-a_{12})}{a_{11} a_{22}-a_{12} a_{21}}+\\frac{a_{22} × a_{11}}{a_{11} a_{22}-a_{12} a_{21}}<br>\n\\end{array}\\right]=\\left[\\begin{array}{lll}<br>\n1 &amp; 0 \\\\\\<br>\n0 &amp; 1<br>\n\\end{array}\\right]<br>\n$$</p><p>这里有一点需要特别说明，不是每一个矩阵都是可逆的。如果一个矩阵是可逆的，那这个矩阵我们叫做<strong>非奇异矩阵</strong>，如果一个矩阵是不可逆的，那这个矩阵我们就叫做<strong>奇异矩阵</strong>，而且如果一个矩阵可逆，那它的逆矩阵必然是唯一的。</p><p>还记得行列式$a_{11} a_{22}-a_{12} a_{21}$吗？如果我们要证明矩阵是可逆的，只要证明行列式不等于零就行。更高阶的逆矩阵的算法也是一样的原理。</p><p>最后，我想通过一个现实生活中的案例来让你更多地了解逆矩阵。</p><p>一个旅游团由孩子和大人组成，去程他们一起做大巴，每个孩子的票价$3$元，大人票价$3.2$元，总共花费$118.4$元。回程一起做火车，每个孩子的票价$3.5$元，大人票价$3.6$元，总共花费$135.2$元。请问旅游团里有多少小孩和大人？</p><p>首先，我们设置一些矩阵，组成线性方程$XA=B$。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/96/e291f7bd766d923f1b2a09a7c5765296.png?wh=2622*860\" alt=\"\"></p><p>要解$X$，我们就要先计算$A$的逆矩阵$A^{-1}$：</p><p>$$<br>\nA^{-1}=\\left[\\begin{array}{cc}<br>\n3 &amp; 3.5 \\\\\\<br>\n3.2 &amp; 3.6<br>\n\\end{array}\\right]^{-1}=\\frac{1}{3 \\times 3.6-3.5 \\times 3.2}\\left[\\begin{array}{cc}<br>\n3.6 &amp; -3.5 \\\\\\<br>\n-3.2 &amp; 3<br>\n\\end{array}\\right]=\\left[\\begin{array}{cc}<br>\n-9 &amp; 8.75 \\\\\\<br>\n8 &amp; -7.5<br>\n\\end{array}\\right]<br>\n$$</p><p>接下来再计算$X=B A^{-1}$：</p><p>$$<br>\n\\left[\\begin{array}{ll}<br>\nx_{1} &amp; x_{2}<br>\n\\end{array}\\right]=\\left[\\begin{array}{ll}<br>\n118.4 &amp; 135.2<br>\n\\end{array}\\right]\\left[\\begin{array}{cc}<br>\n-9 &amp; 8.75 \\\\\\<br>\n8 &amp; -7.5<br>\n\\end{array}\\right]=\\left[\\begin{array}{ll}<br>\n16 &amp; 22<br>\n\\end{array}\\right]<br>\n$$</p><p>最终，我们得出这个旅游团有16个小孩和22个大人。</p><p>这也是解线性方程组的一种方法，类似这样的计算被广泛应用在各领域中，比如建筑工程、游戏和动画的3D效果上。虽然现在有很多程序包封装了这类数学计算的底层实现，但如果你能很好地理解这些概念，就可以为编程或算法调优打下坚实的基础。</p><p>Last but not least，方程次序很重要，也就是说，$AX=B$和$XA=B$的结果是不同的，这个一定要牢记哦！</p><h3>转置矩阵</h3><p>一般伴随逆矩阵之后出现的就是转置矩阵。在计算机图形图像处理中，如果要对一个物体进行旋转、平移、缩放等操作，就要对描述这个物体的所有矩阵进行运算，矩阵转置就是这类运算之一，而矩阵的转置在三维空间中的解释就相当于“得到关于某个点对称的三维立体”。所以，转置矩阵的定义很简单。</p><p>将矩阵的行列互换，得到的新矩阵就叫做转置矩阵（transpose）。转置矩阵的行列式不变。我们把$m×n$矩阵$A$的行列互换，得到转置矩阵$A^{T}$。</p><p>$$<br>\nA=\\left[\\begin{array}{cccc}<br>\na_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1 n} \\\\\\<br>\na_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2 n} \\\\\\<br>\n\\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots \\\\\\<br>\na_{m 1} &amp; a_{m 2} &amp; \\ldots &amp; a_{m n}<br>\n\\end{array}\\right]<br>\n$$</p><p>$$<br>\nA^{T}=\\left[\\begin{array}{cccc}<br>\na_{11} &amp; a_{21} &amp; \\ldots &amp; a_{m 1} \\\\\\<br>\na_{12} &amp; a_{22} &amp; \\ldots &amp; a_{m 2} \\\\\\<br>\n\\ldots &amp; \\ldots &amp; \\ldots &amp; \\ldots \\\\\\<br>\na_{1 n} &amp; a_{2 n} &amp; \\ldots &amp; a_{m n}<br>\n\\end{array}\\right]<br>\n$$</p><p>最后，为了方便你理解，我们再总结一下逆矩阵和转置矩阵的性质。你不用死记硬背，重在理解。</p><ol>\n<li>矩阵和自身逆矩阵相乘得道单位矩阵，$A A^{-1}=I=A^{-1} A$；</li>\n<li>$A$$B$两矩阵相乘的逆，等于逆矩阵$B$和逆矩阵$A$相乘，这里强调一下乘的顺序很重要，$(A B)^{-1}=B^{-1} A^{-1}$；</li>\n<li>$AB$两矩阵相加后的逆矩阵，不等于各自逆矩阵的相加， $(A+B)^{-1} \\neq A^{-1}+B^{-1}$；</li>\n<li>矩阵转置的转置还是它本身，$\\left(A^{T}\\right)^{\\mathrm{T}}=A$；</li>\n<li>$AB$两矩阵相加后的转置矩阵，等于各自转置矩阵的相加，$(A+B)^{T}=A^{T}+B^{T}$；</li>\n<li>$AB$两矩阵相乘后的转置矩阵，等于转置矩阵B和转置矩阵A的相乘，这里再次强调乘的顺序很重要，$(A B)^{T}=B^{T} A^{T}$。</li>\n</ol><h2>本节小结</h2><p>好了，到这里矩阵这一讲就结束了，最后我再带你总结一下前面讲解的内容。</p><p>今天的知识，你只需要知道矩阵是线性方程组的另一种表达，了解和掌握矩阵的定义和性质就足够了。当然，矩阵还有很多内容，但我认为掌握了我讲的这些内容后，就为以后的一些矩阵应用场景打下了坚实的数学基础，也是下一讲的解线性方程组的前置知识。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/87/0f7f18bcde1b8e61a8658d390be91f87.png?wh=1200*1375\" alt=\"\"></p><h2>线性代数练习场</h2><p>对于10维列向量$x=\\left(x_{1}, \\ldots, x_{10}\\right)^{T}$， $v=\\left(v_{1}, \\ldots, v_{10}\\right)^{T}$，如果要计算$y=x x^{T}\\left(I+v v^{T}\\right) x$，其中$I$是10阶单位矩阵。你会怎么做？</p><p>友情提醒，这里有多种方式解题。你能不能找到一个最简单的方法来解这道题？虽然结果很重要，但我想说的是过程更重要，而且往往解题过程不同，从计算机角度来说，运算的效率会有极大的不同。</p><p>欢迎你在留言区晒出你的运算过程和结果。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"02 | 基本概念：线性代数研究的到底是什么问题？","id":265296},"right":{"article_title":"04 | 解线性方程组：为什么用矩阵求解的效率这么高？","id":269448}},"comments":[{"had_liked":false,"id":238982,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1596404599,"is_pvip":false,"replies":[{"id":"88355","content":"非常厉害，结果还是一个10维向量 :-)","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1596455371,"ip_address":"","comment_id":238982,"utype":1}],"discussion_count":6,"race_medal":0,"score":"35956142967","product_id":100056401,"comment_content":"x&#39; 表示 x向量的转置，v&#39;是v向量的的转置<br>x x&#39;x+ xx&#39;vv&#39;x= x(x.x) + x(x.v)(v.x) = x (||x||^2 + (x.v)^2)","like_count":8,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502921,"discussion_content":"非常厉害，结果还是一个10维向量 :-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596455371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003511,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/f7/771ab517.jpg","nickname":"Kevin Chen","note":"","ucode":"5F8CCFFAE9153B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297781,"discussion_content":"我想因该是x和v都是10维的列向量，所以x.x’=x.x，所以最终结果还是一个10维的向量。不知道我理解的对不对？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597054734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586709,"avatar":"https://static001.geekbang.org/account/avatar/00/18/36/15/937dee0a.jpg","nickname":"思致精研_益达","note":"","ucode":"9886B8F58E7635","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297458,"discussion_content":"丝毫没看明白⊙ω⊙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596943598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349029,"avatar":"https://static001.geekbang.org/account/avatar/00/14/95/a5/181581e6.jpg","nickname":"Rekii","note":"","ucode":"5AF3D54099333A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297228,"discussion_content":"没看懂啊，矩阵乘他的转置矩阵，得到了啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596815767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296811,"discussion_content":"xx&#39;x = x(x.x) 是什么意思啊，指点下呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596672732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1001569,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/61/83cddf89.jpg","nickname":"换宇","note":"","ucode":"F002F653C9B88F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322057,"discussion_content":"AB 两矩阵相乘后的转置矩阵，等于转置矩阵 B 和转置矩阵 A 的相乘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604668677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296811,"ip_address":""},"score":322057,"extra":""}]}]},{"had_liked":false,"id":239047,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1596422247,"is_pvip":false,"replies":[{"id":"88299","content":"你好，那时刻，这个就要涉及到CUDA了，在矩阵乘这块，对于GPU来说，每一次的乘就能开一个线程，而如果用CPU开线程的做法是无法想象的，即使线程比较轻也是耗资源的。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1596432555,"ip_address":"","comment_id":239047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31661193319","product_id":100056401,"comment_content":"请问老师，关于GPU更适合矩阵计算，文中的例子不是很理解，请您再详细说一下？","like_count":7,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502953,"discussion_content":"你好，那时刻，这个就要涉及到CUDA了，在矩阵乘这块，对于GPU来说，每一次的乘就能开一个线程，而如果用CPU开线程的做法是无法想象的，即使线程比较轻也是耗资源的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596432555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251306,"user_name":"ibasaw","can_delete":false,"product_type":"c1","uid":1361423,"ip_address":"","ucode":"3566BD60BAA191","user_header":"https://static001.geekbang.org/account/avatar/00/14/c6/0f/00037422.jpg","comment_is_top":false,"comment_ctime":1601456409,"is_pvip":false,"replies":[{"id":"92143","content":"是的，因为它是方阵，而且行列式不等于0.","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1602202429,"ip_address":"","comment_id":251306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10191391001","product_id":100056401,"comment_content":"老师，单位矩阵是非奇异矩阵吧？","like_count":2,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506445,"discussion_content":"是的，因为它是方阵，而且行列式不等于0.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602202429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241305,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1597242948,"is_pvip":false,"replies":[{"id":"89153","content":"你好，kylexy_0817，是第一个矩阵的列数=第二个矩阵的行数，比如：第一个是m*n，第二个是n*k，乘会得到m*k矩阵。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1597276571,"ip_address":"","comment_id":241305,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10187177540","product_id":100056401,"comment_content":"邻阶相等，通俗点说，就是第一个矩阵的行数=第二个矩阵的列数？","like_count":2,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503710,"discussion_content":"你好，kylexy_0817，是第一个矩阵的列数=第二个矩阵的行数，比如：第一个是m*n，第二个是n*k，乘会得到m*k矩阵。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597276571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239035,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1596419933,"is_pvip":true,"replies":[{"id":"88300","content":"你好，qinsi，谢谢你的指正，是结合律，我立即修改。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1596432862,"ip_address":"","comment_id":239035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186354525","product_id":100056401,"comment_content":"矩阵乘法满足 结合律，一般不满足 交换律","like_count":2,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502949,"discussion_content":"你好，qinsi，谢谢你的指正，是结合律，我立即修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596432862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291802,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1620495139,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5915462435","product_id":100056401,"comment_content":"最后的计算题，关键点是 x 转置 * x 等于一个一位矩阵，即 x 各元素的平方和","like_count":1},{"had_liked":false,"id":355498,"user_name":"独一无二的月关","can_delete":false,"product_type":"c1","uid":2204571,"ip_address":"广东","ucode":"18BFC2EBC55AC8","user_header":"https://static001.geekbang.org/account/avatar/00/21/a3/9b/60cdf083.jpg","comment_is_top":false,"comment_ctime":1661429138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661429138","product_id":100056401,"comment_content":"推导二阶逆矩阵的公式花了我一小时 ","like_count":0},{"had_liked":false,"id":292466,"user_name":"Geek1560","can_delete":false,"product_type":"c1","uid":2028949,"ip_address":"","ucode":"5F27A28B8002E6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","comment_is_top":false,"comment_ctime":1620831241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620831241","product_id":100056401,"comment_content":"老师，不理解3种矩阵乘， 各自的使用场景。 如何判断使用哪种呢？<br>","like_count":0},{"had_liked":false,"id":248902,"user_name":"张国旗","can_delete":false,"product_type":"c1","uid":1318243,"ip_address":"","ucode":"AF519777AB262E","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/63/62078f19.jpg","comment_is_top":false,"comment_ctime":1600351621,"is_pvip":false,"replies":[{"id":"91363","content":"你好，张国旗<br>这里只是为了说明隐藏层的计算，所以输入到输入层是2还是5不重要，虽然图片上画的是5个输入 :-)<br>","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1600388433,"ip_address":"","comment_id":248902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600351621","product_id":100056401,"comment_content":"X = (x1, x2) 但是我看老师你图里有5个x，请问x3, 4, 5为什么不要了？ ","like_count":0,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505770,"discussion_content":"你好，张国旗\n这里只是为了说明隐藏层的计算，所以输入到输入层是2还是5不重要，虽然图片上画的是5个输入 :-)\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600388433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244041,"user_name":"流殇忘情","can_delete":false,"product_type":"c1","uid":1119767,"ip_address":"","ucode":"7B6CF2F2B11C75","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/17/1d6ec0df.jpg","comment_is_top":false,"comment_ctime":1598365387,"is_pvip":false,"replies":[{"id":"89863","content":"你好，流殇忘情<br>谢谢你的指正，应该是实数或复数，在我们的场景是实数，我会修正一下表述。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1598401412,"ip_address":"","comment_id":244041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598365387","product_id":100056401,"comment_content":"其中 aij属于实数 R这句话不对吧，摘自维基百科数学上，一个m x n的矩阵是一个由m行（row）n列（column）元素排列成的矩形阵列。矩阵里的元素可以是数字、符号或数学式。","like_count":0,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504459,"discussion_content":"你好，流殇忘情\n谢谢你的指正，应该是实数或复数，在我们的场景是实数，我会修正一下表述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598401412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240465,"user_name":"思致精研_益达","can_delete":false,"product_type":"c1","uid":1586709,"ip_address":"","ucode":"9886B8F58E7635","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/15/937dee0a.jpg","comment_is_top":false,"comment_ctime":1596939916,"is_pvip":false,"replies":[{"id":"88762","content":"你好，思致精研_益达，公式里的推导不是x是乘，比如：a12*(-a21)，可能加个括号看起来更好，我让排版同学调整一下。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1596949565,"ip_address":"","comment_id":240465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596939916","product_id":100056401,"comment_content":"老师您好，我对这句话后面的公式推导有点疑惑，原文‘  方法其实很简单，记得刚才的公式就行，\\mathrm{A} \\times A^{-1}=\\mathrm{I}。现在我们就代入公式来验证一下，A 和它的逆矩阵相乘，通过刚才的算法最终得出的结果是单位矩阵。’         后面公式推倒里面有几处x, 想不出这x的作用，可以解释一下在这的作用吗，还是这部分是存在是笔误呢","like_count":0,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503454,"discussion_content":"你好，思致精研_益达，公式里的推导不是x是乘，比如：a12*(-a21)，可能加个括号看起来更好，我让排版同学调整一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596949565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240355,"user_name":"思致精研_益达","can_delete":false,"product_type":"c1","uid":1586709,"ip_address":"","ucode":"9886B8F58E7635","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/15/937dee0a.jpg","comment_is_top":false,"comment_ctime":1596875865,"is_pvip":false,"replies":[{"id":"88739","content":"你好，思致精研_益达，不好意思造成无解，文章中这部分X、W和H可能是排版问题，我让负责排版的同学修改一下，你就能看到正确的了，其实这里表达的都是矩阵。","user_name":"作者回复","user_name_real":"朱维刚","uid":"1512030","ctime":1596877213,"ip_address":"","comment_id":240355,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596875865","product_id":100056401,"comment_content":"老师这块我不理解。文章中说道：‘计算 H 隐藏层输出的公式是：H = f( W.x + b )，其中 W 是权重矩阵，f 是激活函数，b 是偏差，x 是输入层矩阵。’ 里面的W跟x代表的意思我知道，但是文字下解释说x=|x1x2|，以及W=|w1 w2w4 w5w3 w6|。这些x1及一直到w6代表的实际意思是什么，您老师可以介绍一下吗","like_count":0,"discussions":[{"author":{"id":1512030,"avatar":"https://static001.geekbang.org/account/avatar/00/17/12/5e/f85fcfb2.jpg","nickname":"朱维刚","note":"","ucode":"3032B6AAB578F3","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503413,"discussion_content":"你好，思致精研_益达，不好意思造成无解，文章中这部分X、W和H可能是排版问题，我让负责排版的同学修改一下，你就能看到正确的了，其实这里表达的都是矩阵。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596877213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}