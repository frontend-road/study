{"id":615018,"title":"63｜避坑指南：类的常见错误","content":"<p><strong>课后习题</strong><br>\n请你设计一款网络音乐播放器，并基于本讲学习的SOLID原则，试着将网络音乐播放器的各功能拆分成函数。</p><p>注：只需设计函数之间依赖关系，不需要实现函数功能。</p><p><strong>课程代码、课件及其他相关资料地址</strong><br>\n<a href=\"https://gitee.com/wilsonyin/zero-basics-python\">https://gitee.com/wilsonyin/zero-basics-python</a></p>","comments":[{"had_liked":false,"id":368750,"user_name":"yanyu-xin","can_delete":false,"product_type":"c3","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1676642818,"is_pvip":false,"replies":[{"id":134611,"content":"很详细，不错","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1677481877,"ip_address":"广东","comment_id":368750,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"class Music_play():\n    &#39;&#39;&#39;音乐播放&#39;&#39;&#39;\n    def decode():\n        &#39;&#39;&#39;音乐文件格式解释&#39;&#39;&#39;\n    def player():\n        &#39;&#39;&#39;播放器&#39;&#39;&#39;\n        def play_mpeg():\n            &#39;&#39;&#39;MPEG格式播放&#39;&#39;&#39;\n        def play_mp3():\n            &#39;&#39;&#39;MP3格式播放&#39;&#39;&#39;\n        def play_mpeg4():\n            &#39;&#39;&#39;MPEG4格式播放&#39;&#39;&#39;     \n        def play_midi():\n            &#39;&#39;&#39;Midi格式播放&#39;&#39;&#39;\n        def play_wma():\n            &#39;&#39;&#39;wma格式播放&#39;&#39;&#39;\n\nclass  Music_tone():\n    &#39;&#39;&#39;音质控制&#39;&#39;&#39;\n    def sound_vol():\n        &#39;&#39;&#39;音量控制&#39;&#39;&#39;\n    def sound_eff():\n        &#39;&#39;&#39;音效系统&#39;&#39;&#39;\n    def sound_env():\n        &#39;&#39;&#39;环境模拟&#39;&#39;&#39;\n    def sound_ear():\n        &#39;&#39;&#39;耳机状态&#39;&#39;&#39;\n\n\nclass File_mana():\n    &#39;&#39;&#39;音乐文件分析&#39;&#39;&#39;\n    def file_nanme():\n        &#39;&#39;&#39;提取曲目名称&#39;&#39;&#39;    \n    def file_time():\n        &#39;&#39;&#39;提取播放时间长度&#39;&#39;&#39;    \n    def file_bit():\n        &#39;&#39;&#39;提取比特率&#39;&#39;&#39;\n    def file_rate():\n        &#39;&#39;&#39;提取采样率&#39;&#39;&#39;\n    def fiel_word():\n        &#39;&#39;&#39;获得歌词文件&#39;&#39;&#39;\n    \n\nclass File_mana():\n    &#39;&#39;&#39;音乐文件管理&#39;&#39;&#39;\n    def File_ loca():\n        &#39;&#39;&#39;本地音乐文件管理&#39;&#39;&#39;\n    def File_loca_ser():\n        &#39;&#39;&#39;本地音乐文件搜索&#39;&#39;&#39; \n    def File_net():\n        &#39;&#39;&#39;网络音乐文件管理&#39;&#39;&#39;\n    def File_net_ser():\n        &#39;&#39;&#39;网络音乐文件搜索&#39;&#39;&#39;\n    def file_lyric():\n        &#39;&#39;&#39;歌词文件管理&#39;&#39;&#39;\n\n\n\nclass Interface_show():\n    &#39;&#39;&#39;播放器界面显示&#39;&#39;&#39;\n    def show_all():\n        &#39;&#39;&#39;整体界面显示&#39;&#39;&#39;\n    def show_music():\n        &#39;&#39;&#39;显示音乐信息&#39;&#39;&#39;\n    def Key_show():\n        &#39;&#39;&#39;按键显示&#39;&#39;&#39;\n    def show_lyric():\n        &#39;&#39;&#39;歌词显示&#39;&#39;&#39;\n    def music_show():\n        &#39;&#39;&#39;播放进度条&#39;&#39;&#39;\n\nclass Interface_con():\n    &#39;&#39;&#39;播放器控制&#39;&#39;&#39;\n    def key_press():\n        &#39;&#39;&#39;按键控制&#39;&#39;&#39;\n    def con_lyric():\n        &#39;&#39;&#39;歌词控制&#39;&#39;&#39;\n    def music_con():\n        &#39;&#39;&#39;播放进度条控制&#39;&#39;&#39;","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606906,"discussion_content":"很详细，不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677481877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113412,"avatar":"https://static001.geekbang.org/account/avatar/00/20/3f/84/47f7b661.jpg","nickname":"你好极客时间","note":"","ucode":"EC1AE9FD105234","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636124,"discussion_content":"感觉就是开发过这个功能的人写的，这么细致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705647539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2383299,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5d/c3/b8bb888c.jpg","nickname":"依托答辩","note":"","ucode":"4BE79E8A030813","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632659,"discussion_content":"这么全面。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701151343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393121,"user_name":"8000tank","can_delete":false,"product_type":"c3","uid":3838010,"ip_address":"北京","ucode":"C5DC98A0EB57CE","user_header":"","comment_is_top":false,"comment_ctime":1722923763,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"面向对象的一些通用设计模式（不限语言）：\n一、概念\n          CARP ——Composite&#47;Aggregate Reuse Principle，合成&#47;聚合复用 原则\n          DIP——Dependency Inversion Principle，依赖倒置 原则\n          ISP——Interface Segregation（隔离） Principle，接口隔离 原则\n          LoD&#47;LKP——Law of Demeter，迪米特法则 &#47; Least Knowledge Principle，知识最少 原则\n          LSP——Liskov（里氏） Substitution（替代） Principle，里氏替换 原则\n          OCP——Open Closed Principle，开闭 原则\n          SRP——Single Responsibility  Principle，单一职责 原则\n          IOC——Inverse of Control，控制反转 \n\n二、概念解释\n          CARP——要尽量使用合成和聚合，尽量不要使用继承。\n          DIP——依赖于抽象而不依赖于具体（要面向接口编程）。\n          ISP——建立单一接口，不要建立庞大臃肿的接口，接口中的方法尽量少（单一职责）。\n          LoD&#47;LKP——一个实体&#47;对象 应当尽可能少地与其他实体&#47;对象 发生相互作用。\n          LSP——子类型必须能够替换掉他们的父类型。限制变化影响的范围。\n          OCP——一个软件实体应当对扩展开放，对内修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。\n          SRP——每个类只担任一个职责。\n          IOC——控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系","like_count":0},{"had_liked":false,"id":385057,"user_name":"Geek_631607","can_delete":false,"product_type":"c3","uid":3789991,"ip_address":"广东","ucode":"EAF874838F0BE4","user_header":"","comment_is_top":false,"comment_ctime":1702002112,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"在设计网络音乐播放器时，我们可以根据 SOLID 原则将各个功能拆分为以下函数：\n\n1. `load_song(song_id: str) -&gt; Song`: 这个函数负责从网络加载指定 ID 的歌曲。它返回一个 `Song` 对象，这个对象包含了歌曲的所有信息，如歌名、歌手、专辑、歌词等。\n\n2. `play_song(song: Song) -&gt; None`: 这个函数接受一个 `Song` 对象，然后播放这首歌曲。\n\n3. `pause_song() -&gt; None`: 这个函数用于暂停当前正在播放的歌曲。\n\n4. `resume_song() -&gt; None`: 这个函数用于恢复暂停的歌曲。\n\n5. `stop_song() -&gt; None`: 这个函数用于停止当前正在播放的歌曲。\n\n6. `next_song() -&gt; None`: 这个函数用于播放下一首歌曲。\n\n7. `previous_song() -&gt; None`: 这个函数用于播放上一首歌曲。\n\n8. `adjust_volume(volume: int) -&gt; None`: 这个函数用于调整播放器的音量。它接受一个整数参数，表示新的音量级别。\n\n9. `search_song(keyword: str) -&gt; List[Song]`: 这个函数用于搜索歌曲。它接受一个关键词参数，然后返回一个包含所有匹配歌曲的列表。\n\n10. `create_playlist(name: str, songs: List[Song]) -&gt; Playlist`: 这个函数用于创建新的播放列表。它接受一个名字和一组歌曲，然后返回一个新的 `Playlist` 对象。\n\n每个函数都只有一个职责，符合单一职责原则。同时，这些函数都可以被其他函数重写或扩展，符合开放封闭原则。例如，我们可以创建一个 `PremiumMusicPlayer` 类，它继承自 `MusicPlayer` 类，但添加了一些额外的功能，如下载歌曲、无广告播放等。这就是依赖反转原则的应用。                                                                                                   .","like_count":0},{"had_liked":false,"id":378918,"user_name":"Geek_Mike","can_delete":false,"product_type":"c3","uid":3196376,"ip_address":"云南","ucode":"CFA942192C3B74","user_header":"https://static001.geekbang.org/account/avatar/00/30/c5/d8/c5509b9c.jpg","comment_is_top":false,"comment_ctime":1690971542,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"# 基于SOLID原则设计一款网络音乐播放器，将网络音乐播放器的各功能拆分成函数。只需设计函数之间依赖关系，不需要实现函数功能。\n\n# 负责读取音乐文件的模块\nclass MusicLibrary(): \n    def __init__(self, music_in):\n        self.music_in = music_in\n        self.music_path = []\n\n    def musicin(self):\n        pass # 读取音乐文件的路径，临时存放在 music_in 属性中\n    \n    def musicpath(self):\n        pass # 保存音乐文件的路径，保存在 music_path 属性中\n\n\n# 负责控制播放功能的模块\nclass PlayerController(MusicLibrary):\n    def __init__(self, music_play=0, music_pause=0, music_stop=0):\n        self.music_play = music_play\n        self.music_pause = music_pause\n        self.music_stop = music_stop\n\n    def musicplay(self):\n        pass # 控制播放器的播放功能，当 music_play 属性值为 1 时播放音乐\n\n    def musicpause(self);\n        pass # 控制播放器的暂停功能，当 music_pause 属性值为 1 时暂停音乐\n\n    def musicstop(self):\n        pass # 控制播放器的停止功能，当 music_stop 属性值为 1 时停止播放\n\n\n# 负责音乐分类、搜索、存放播放列表的模块\nclass PlayerAccessibility(MusicLibrary):\n    def __init__(self, music_catagory, music_search):\n        self.music_catagory = music_catagory\n        self.music_search = music_search\n        self.music_playlist = []\n\n    def musiccatagory(self):\n        pass # 使用 music_catagory 属性的值为音乐文件贴上分类标签。比如，一个分类一个列表，列表里存储多首歌曲名称\n\n    def musicsearch(self):\n        pass # 使用 music_search 属性的值，比如音乐名称，搜索音乐\n\n    def musciplaylist(self):\n        pass # 把不同的音乐名称存储在 music_playlist 属性里","like_count":0}]}