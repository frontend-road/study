{"id":378311,"title":"02｜理解 Hooks：React 为什么要发明 Hooks？","content":"<p>你好，我是王沛。</p><p>React 作为目前最为主流的前端框架，自2013年诞生至今已经有近8年的时间了。这8年来，在其他前端框架发生翻天覆地变化的同时，React 的 API 则非常稳定，几乎从来没有出现过重大的向后兼容的问题，而且每一次版本的升级也都非常顺滑。</p><p>这不仅说明React 在 API 的设计上经受住了考验，同时也可以看到 React 团队在稳定 API 上所做的努力。</p><p>但是即使在这样稳定的背景下，React 还是在两年前的 16.8 版本中推出了一套全新的 Hooks 机制。新版本的发布，在让人耳目一新的同时，也让广大早就恐惧于各种新轮子的前端同学心头一紧，产生本能的抗拒：这是什么东西？有什么用？难道现在的 API 不好吗？</p><p>如果你也有这样的疑问，那我要先给你吃一颗定心丸，这样的担忧是没有必要的。</p><p>其实对于 React 开发而言，这只是多了一个选择。因为<strong>原来的基于Class的组件完全可以继续使用</strong>，这意味着这两种开发方式可以并存，已有代码不需要做任何改动，而新的代码可以根据具体情况采用 Hooks 的方式来实现就行了。</p><p>那么，既然在追求极致向后兼容性的原则下，React 还是推出了新的 Hooks API，一定有其过人的一面。所以今天这节课，我就跟你一起探讨它的过人之处究竟是什么；为什么要发明 Hooks；以及它所解决的问题是什么。</p><!-- [[[read_end]]] --><h2>重新思考 React 组件的本质</h2><p>React 组件的模型其实很直观，就是从 Model 到 View 的映射，这里的 Model 对应到 React 中就是 state 和 props。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/5b/a29c89ffd7c2ce101183407fe7d90e5b.png?wh=766*304\" alt=\"\"></p><p>在过去，我们需要处理当 Model 变化时，DOM 节点应该如何变化的细节问题。而现在，我们只需要通过 JSX，根据 Model 的数据用声明的方式去描述 UI 的最终展现就可以了，因为React 会帮助你处理所有 DOM 变化的细节。而且，当 Model 中的状态发生变化时，UI 会自动变化，即<strong>所谓的数据绑定</strong>。</p><p>所以呢，我们可以把UI 的展现看成一个函数的执行过程。其中，Model 是输入参数，函数的执行结果是 DOM 树，也就是 View。而React 要保证的，就是每当 Model 发生变化时，函数会重新执行，并且生成新的 DOM 树，然后React 再把新的 DOM 树以最优的方式更新到浏览器。</p><p>既然如此，使用 Class 作为组件是否真的合适呢？Class 在作为 React 组件的载体时，是否用了它所有的功能呢？如果你仔细思考，会发现使用 Class 其实是有点牵强的，主要有两方面的原因。</p><p>一方面，React 组件之间是不会互相继承的。比如说，你不会创建一个 Button 组件，然后再创建一个 DropdownButton 来继承 Button。所以说，React 中其实是没有利用到 Class 的继承特性的。</p><p>另一方面，因为所有 UI 都是由状态驱动的，因此很少会在外部去调用一个类实例（即组件）的方法。要知道，组件的所有方法都是在内部调用，或者作为生命周期方法被自动调用的。</p><p>所以你看，这两个 Class 最重要的特性其实都没有用到。而在 React 出现之时，主流的方式还是基于对象去考虑问题。例如获得一个对话框的实例，然后通过 dialog.show(), dialog.hide() 这样的方式细粒度地去控制 UI 的变化。</p><p>而这在 React 中其实是没有必要的，因为所有的 UI 都是声明出来的，不用处理细节的变化过程。因此，通过函数去描述一个组件才是最为自然的方式。这也是为什么 React 很早就提供了函数组件的机制。</p><p>只是当时有一个局限是，函数组件无法存在内部状态，必须是纯函数，而且也无法提供完整的生命周期机制。这就极大限制了函数组件的大规模使用。</p><p>那么我们自然就知道了，Class 作为 React 组件的载体，也许并不是最适合，反而函数是更适合去描述 State =&gt; View 这样的一个映射，但是函数组件又没有 State ，也没有生命周期方法。以此来看，我们应该如何去改进呢？</p><h2>Hooks 是如何诞生的？</h2><p>其实顺着函数组件的思路继续思考，就会发现，如果我们想要让函数组件更有用，目标就是给函数组件加上状态。这看上去似乎并不是难事。</p><p>简单想一下，函数和对象不同，并没有一个实例的对象能够在多次执行之间保存状态，那势必需要一个函数之外的空间来保存这个状态，而且要能够检测其变化，从而能够触发函数组件的重新渲染。</p><p>再进一步想，那我们是不是就是需要这样一个机制，能够把一个外部的数据绑定到函数的执行。当数据变化时，函数能够自动重新执行。这样的话，任何会影响 UI 展现的外部数据，都可以通过这个机制绑定到 React 的函数组件。</p><p>在 React 中，这个机制就是 Hooks。</p><p>所以我们现在也能够理解这个机制为什么叫 Hooks了。顾名思义，Hook 就是“钩子”的意思。在 React 中，Hooks 就是<strong>把某个目标结果钩到某个可能会变化的数据源或者事件源上，那么当被钩到的数据或事件发生变化时，产生这个目标结果的代码会重新执行，产生更新后的结果</strong>。</p><p>对于函数组件，这个结果是最终的 DOM 树；对于 useCallback、useMemo 这样与缓存相关的组件，则是在依赖项发生变化时去更新缓存。所以 Hooks 的结构可以如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/1d/f764a904bba8836597e441884804b41d.png?wh=1110*552\" alt=\"\"></p><p>从图中可以看到，一个执行过程（Execution），例如是函数组件本身，可以绑定在（钩在）传统意义的 State，或者 URL，甚至可以是窗口的大小。这样当State、URL、窗口大小发生变化时，都会重新执行某个函数，产生更新后的结果。</p><p>当然，既然我们的初衷是为了实现 UI 组件的渲染，那么在 React 中，其实所有的 Hooks 的最终结果都是导致 UI 的变化。但是正如 React 官方曾经提到过的，<strong>Hooks 的思想其实不仅可以用在 React，在其它一些场景也可以被利用</strong>。</p><p>通过这样的思考，你应该能够理解 Hooks 诞生的来龙去脉了。比起 Class 组件，函数组件是更适合去表达 React 组件的执行的，因为它更符合 State =&gt; View 这样的一个逻辑关系。但是因为缺少状态、生命周期等机制，让它一直功能受限。而现在有了 Hooks，函数组件的力量终于能真正发挥出来了！</p><p>不过这里有一点需要特别注意，Hooks 中被钩的对象，不仅可以是某个独立的数据源，也可以是另一个 Hook 执行的结果，这就带来了 Hooks 的最大好处：<strong>逻辑的复用</strong>。</p><h2>Hooks 带来的最大好处：逻辑复用</h2><p>在之前的 React 使用中，有一点经常被大家诟病，就是非常难以实现逻辑的复用，必须借助于高阶组件等复杂的设计模式。但是高阶组件会产生冗余的组件节点，让调试变得困难。不过这些问题可以通过 Hooks 得到很好的解决。所以如果有人问你 Hooks 有什么好处，那么最关键的答案就是<strong>简化了逻辑复用</strong>。</p><p>就以刚才我们提到的绑定窗口大小的场景为例。如果有多个组件需要在用户调整浏览器窗口大小时，重新调整布局，那么我们需要把这样的逻辑提取成一个公共的模块供多个组件使用。以 React 思想，在 JSX 中我们会根据 Size 大小来渲染不同的组件，例如：</p><pre><code>function render() {\n  if (size === &quot;small&quot;) return &lt;SmallComponent /&gt;;\n  else return &lt;LargeComponent /&gt;;\n}\n</code></pre><p>这段代码看上去简单，但如果在过去的 Class 组件中，我们甚至需要一个比较复杂的设计模式来解决，这就是高阶组件。所以接下来我们不妨通过实际的代码来进行一下比较，如果之前没有用过 React 也没有关系，你只需根据字面含义进行大概的理解即可。</p><p>在 Class 组件的场景下，我们首先需要定义一个高阶组件，负责监听窗口大小变化，并将变化后的值作为 props 传给下一个组件。</p><pre><code>const withWindowSize = Component =&gt; {\n  // 产生一个高阶组件 WrappedComponent，只包含监听窗口大小的逻辑\n  class WrappedComponent extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        size: this.getSize()\n      };\n    }\n    componentDidMount() {\n      window.addEventListener(&quot;resize&quot;, this.handleResize); \n    }\n    componentWillUnmount() {\n      window.removeEventListener(&quot;resize&quot;, this.handleResize);\n    }\n    getSize() {\n      return window.innerWidth &gt; 1000 ? &quot;large&quot; ：&quot;small&quot;;\n    }\n    handleResize = ()=&gt; {\n      const currentSize = this.getSize();\n      this.setState({\n        size: this.getSize()\n      });\n    }\n    render() {\n      // 将窗口大小传递给真正的业务逻辑组件\n      return &lt;Component size={this.state.size} /&gt;;\n    }\n  }\n  return WrappedComponent;\n};\n</code></pre><p>这样，在你的自定义组件中可以调用 withWindowSize 这样的函数来产生一个新组件，并自带 size 属性，例如：</p><pre><code>class MyComponent extends React.Component{\n  render() {\n    const { size } = this.props;\n    if (size === &quot;small&quot;) return &lt;SmallComponent /&gt;;\n    else return &lt;LargeComponent /&gt;;\n  }\n}\n// 使用 withWindowSize 产生高阶组件，用于产生 size 属性传递给真正的业务组件\nexport default withWindowSize(MyComponent); \n</code></pre><p>在这里，我们可以看到，为了传递一个外部的状态，我们不得不定义一个没有UI 的外层组件，而这个组件只是为了封装一段可重用的逻辑。更为糟糕的是，高阶组件几乎是 Class 组件中实现代码逻辑复用的唯一方式，其缺点其实比较显然：</p><ol>\n<li>代码难理解，不直观，很多人甚至宁愿重复代码，也不愿用高阶组件；</li>\n<li>会增加很多额外的组件节点。每一个高阶组件都会多一层节点，这就会给调试带来很大的负担。</li>\n</ol><p>可以说，正因为这些缺点被抱怨已久，React 团队才终于提出了 Hooks 这样一个全新的方案。那么现在我们不妨看一下，同样的逻辑如果用 Hooks 和函数组件该如何实现。首先我们需要实现一个 Hooks：</p><pre><code>const getSize = () =&gt; {\n  return window.innerWidth &gt; 1000 ? &quot;large&quot; : &quot;small&quot;;\n}\nconst useWindowSize = () =&gt; {\n  const [size, setSize] = useState(getSize());\n  useEffect(() =&gt; {\n\tconst handler = () =&gt; {\n      setSize(getSize())\n    };\n    window.addEventListener('resize', handler);\n    return () =&gt; {\n      window.removeEventListener('resize', handler);\n    };\n  }, []);\n\t\n  return size;\n};\n</code></pre><p>这样，我们在组件中使用窗口大小就会非常简单：</p><pre><code>const Demo = () =&gt; {\n  const size = useWindowSize();\n  if (size === &quot;small&quot;) return &lt;SmallComponent /&gt;;\n  else return &lt;LargeComponent /&gt;;\n};\n</code></pre><p>可以看到，窗口大小是一个外部的一个数据状态，我们通过 Hooks 的方式对其进行了封装，从而将其变成一个可绑定的数据源。这样当窗口大小发生变化时，使用这个 Hook 的组件就都会重新渲染。而且代码也更加简洁和直观，不会产生额外的组件节点。</p><h2>Hooks 的另一大好处：有助于关注分离</h2><p>除了逻辑复用之外，Hooks 能够带来的另外一大好处就是<strong>有助于关注分离</strong>，意思是说Hooks 能够让针对同一个业务逻辑的代码尽可能聚合在一块儿。这是过去在 Class 组件中很难做到的。因为在 Class 组件中，你不得不把同一个业务逻辑的代码分散在类组件的不同生命周期的方法中。</p><p>所以通过 Hooks 的方式，把业务逻辑清晰地隔离开，能够让代码更加容易理解和维护。</p><p>仍然以上面监听浏览器窗口大小的变化为例，我们来看 Hooks 是如何做到关注分离的。在过去的 Class 组件中，我们需要在 componentDidMount 中监听事件，在 componentWillUnmount 中去解绑事件。而在函数组件中，我们可以把所有逻辑写在一起。</p><p>React 社区曾用一张图直观地展现了对比结果：<br>\n<img src=\"https://static001.geekbang.org/resource/image/f8/d5/f8a255ca1ec737a8ff5a40160e789fd5.png?wh=1236*950\" alt=\"\"><br>\n图的左侧是 Class 组件，右侧是函数组件结合 Hooks。蓝色和黄色代表不同的业务功能。可以看到，在 Class 组件中，代码是从技术角度组织在一起的，例如在 componentDidMount 中都去做一些初始化的事情。而在函数组件中，代码是从业务角度组织在一起的，相关代码能够出现在集中的地方，从而更容易理解和维护。</p><h2>小结</h2><p>Hooks 作为 React 自诞生以来最大的一个新功能，可以说得到了普遍好评，成为了 React 开发的主流方式。而它也在一定程度上<strong>更好地体现了 React 的开发思想，即从 State =&gt; View 的函数式映射</strong>。</p><p>此外， <strong>Hooks 也解决了 Class 组件存在的一些代码冗余、难以逻辑复用的问题</strong>。但是正如我在这节课开头提到的，两种方式在 React 开发中几乎是完全等价的，没有绝对的优劣。如果你决定开始使用 Hooks，那么对于已有的 Class 组件，其实是完全没必要进行立刻重构的。只要在新的功能上，再来使用函数组件和 Hooks 就可以了。</p><h2>思考题</h2><p>文中举了窗口大小作为 Hooks 的数据源的例子，你还能想到哪些可能需要绑定到 React 组件的数据源？</p><p>欢迎在评论区写下你的想法和思考，我们一起交流讨论。如果今天这节课让你有所收获的话，也欢迎你把课程分享给你的同事、朋友，我们一起共同进步。</p>","neighbors":{"left":{"article_title":"01｜认识 React：如何创建你的第一个 React 应用？","id":376532},"right":{"article_title":"03｜内置 Hooks（1）：如何保存组件状态和使用生命周期？","id":379299}},"comments":[[{"had_liked":false,"id":295246,"user_name":"开开之之","can_delete":false,"product_type":"c1","uid":1152069,"ip_address":"","ucode":"2B7FC13D6F32C4","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/45/7ea3dd47.jpg","comment_is_top":false,"comment_ctime":1622330261,"is_pvip":false,"replies":[{"id":"107181","content":"组合的话组件之间就仅仅需要通过 props 的方式来互相交互，依赖关系更加清楚，组件内聚性更好。继承会让两个组件紧密耦合到一起。继承也不是完全不能用，只是非常不推荐。在 React 中，继承要达到的目的用组合完全可以 cover。","user_name":"作者回复","comment_id":295246,"uid":"1018676","ip_address":"","utype":1,"ctime":1622360869,"user_name_real":"Nate"}],"discussion_count":10,"race_medal":0,"score":"96111610773","product_id":100079901,"comment_content":"老师，为什么说react组件不会相互继承？我之前做过一个项目，就是通过继承来实现代码复用的","like_count":23,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521006,"discussion_content":"组合的话组件之间就仅仅需要通过 props 的方式来互相交互，依赖关系更加清楚，组件内聚性更好。继承会让两个组件紧密耦合到一起。继承也不是完全不能用，只是非常不推荐。在 React 中，继承要达到的目的用组合完全可以 cover。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622360869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001556,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/54/710626c2.jpg","nickname":"Jinjing Wu","note":"","ucode":"0848B436C64D87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577555,"discussion_content":"一切需要通过继承来实现的，都请停下来想想是否通过组合的方式来解会更优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656177985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563090,"discussion_content":"功能复用后端现在也倾向于组合了，继承更多的是接口继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649939418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028704,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erdd1KOUnW6yErToiaN4iaU4qHPn9PtU0fspzkzSKLqEyGG5383MBgHu1SEgzuibnMEiaHHGR31seHvNA/132","nickname":"独钓寒江雪","note":"","ucode":"1B2E3A7B8D6627","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407901,"discussion_content":"组件继承很常见吧。比如一个默认的页面组件。因为几个业务，按钮实现不同，肯定就直接集成这个组件，重载下这个按钮的方法就好了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635147464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2728170,"avatar":"","nickname":"陈庆之","note":"","ucode":"0D8FB96037F475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387542,"discussion_content":"webpack中的Tabpable类，HOOK, asynchook，synchook 这些不都是用类继承去实现的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628237923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2000254,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/85/7e/dc5ee66c.jpg","nickname":"天天","note":"","ucode":"2B9414A72EB338","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2728170,"avatar":"","nickname":"陈庆之","note":"","ucode":"0D8FB96037F475","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406799,"discussion_content":"这里说的是类组件，不是类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634830701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387542,"ip_address":""},"score":406799,"extra":""}]},{"author":{"id":1334751,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/qzPPBIl5ydsxKfSEgrjo8FxO4sMYgxyxTlOiakNI4bDz2cgdsqYias3wAndrriahztr0TcVUqeJZ8asj9PA22ZXaA/132","nickname":"Lucas","note":"","ucode":"677EEA40E973B5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379321,"discussion_content":"我想知道如何继承的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623828648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1764429,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ec/4d/1551ed5f.jpg","nickname":"前端小猪","note":"","ucode":"DDC0F702986274","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376847,"discussion_content":"我也有相关的疑问，老师的回答太棒了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622379355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1707743,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","nickname":"Forest","note":"","ucode":"B75CB4919FF25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1764429,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ec/4d/1551ed5f.jpg","nickname":"前端小猪","note":"","ucode":"DDC0F702986274","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377593,"discussion_content":"我很好奇是在什么样的场景下会用到继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622721171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376847,"ip_address":""},"score":377593,"extra":""},{"author":{"id":1152069,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/45/7ea3dd47.jpg","nickname":"开开之之","note":"","ucode":"2B7FC13D6F32C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1707743,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","nickname":"Forest","note":"","ucode":"B75CB4919FF25A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377641,"discussion_content":"比如，一个a标签的链接点击后会发送google analysis, 一个按钮也会，然后就通过让按钮继承a标签去复用代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622736605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377593,"ip_address":""},"score":377641,"extra":""}]}]},{"had_liked":false,"id":295551,"user_name":"闲闲","can_delete":false,"product_type":"c1","uid":1637571,"ip_address":"","ucode":"B2099BDCFF6191","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/c3/0991edfc.jpg","comment_is_top":false,"comment_ctime":1622473168,"is_pvip":false,"replies":[{"id":"107318","content":"很好的问题。自定义 Hooks 触发组件更新的机制是调用 useState 这一类内置的，能触发组件更新的 Hooks。所以在窗口大小变化的例子中，在事件监听中通过 setSize 这个 useState 得到的方法去设置 size，从而组件就更新了。","user_name":"作者回复","comment_id":295551,"uid":"1018676","ip_address":"","utype":1,"ctime":1622475993,"user_name_real":"Nate"}],"discussion_count":4,"race_medal":0,"score":"61752015312","product_id":100079901,"comment_content":"老师我有个疑问，麻烦看到帮忙解答一下：<br><br>上面的例子里面说是窗口大小发生变化，组件就会更新，对于这一点我不太理解，class封装的还可以理解为，state发生改变了，导致重新render了，但是hook感觉这么理解不通顺，hook哪里写的就类似一个纯函数调用，是怎么驱动组件重新更新的呢？","like_count":15,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521125,"discussion_content":"很好的问题。自定义 Hooks 触发组件更新的机制是调用 useState 这一类内置的，能触发组件更新的 Hooks。所以在窗口大小变化的例子中，在事件监听中通过 setSize 这个 useState 得到的方法去设置 size，从而组件就更新了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622475993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563098,"discussion_content":"现在看来还是有些疑问的，自定义hook如果理解为子组件会特别别扭，感觉还是像被函数包了一层的usestate，但是内部也有自己的useeffect还是有点像子组件，子组件的state变化引起父组件重新render，似乎说的通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649939805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378417,"discussion_content":"useWindowSize 这个自定义hook 中的useState 可以理解为Demo中的useState？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623215087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1431110,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ1IdxyfYWRERClTxbYAqdE81VjsBe0lkKSLQ7wia2ibx9y7LgTX68CPGw7WJEGM0S5vkStxxwzUARQ/132","nickname":"微漾无痕","note":"","ucode":"05C6472A53DCD7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":582856,"discussion_content":"自定义hook中的useState与Demo的useState完全等价。因为react对所有内置包括自定义的hooks都是严格按照代码定义时的顺序“钩入”读取的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659709619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378417,"ip_address":"四川"},"score":582856,"extra":""}]}]},{"had_liked":false,"id":294778,"user_name":"凡凡","can_delete":false,"product_type":"c1","uid":1374266,"ip_address":"","ucode":"CAEA596A037D9A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/3a/dbf7bdee.jpg","comment_is_top":false,"comment_ctime":1622086852,"is_pvip":true,"replies":[{"id":"107045","content":"可以的，像 react router 就提供了这个 Hook，也有一些第三方 library 也提供了，比如：https:&#47;&#47;github.com&#47;streamich&#47;react-use&#47;blob&#47;master&#47;src&#47;useLocation.ts 就是一个实现。","user_name":"作者回复","comment_id":294778,"uid":"1018676","ip_address":"","utype":1,"ctime":1622118589,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"40276792516","product_id":100079901,"comment_content":"路由变化可以作为数据源吗","like_count":9},{"had_liked":false,"id":302167,"user_name":"Geek_d221bc","can_delete":false,"product_type":"c1","uid":2652102,"ip_address":"","ucode":"DB6B2581688624","user_header":"","comment_is_top":false,"comment_ctime":1626103144,"is_pvip":false,"replies":[{"id":"110079","content":"不需要读源码。Hooks 让组件刷新和传统 class 组件触发刷新的机制是完全一样的，都是由 state 或者 props 变化触发。Hooks 中的 useState 和 class 中的 setState，背后是同一套实现，理解这一点就可以了。","user_name":"作者回复","comment_id":302167,"uid":"1018676","ip_address":"","utype":1,"ctime":1627306555,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"23100939624","product_id":100079901,"comment_content":"王老师，你好，想请教hooks是如何让函数组件具备随状态变化触发组件重新执行返回更新的呢？这是要去读hooks相关源码？","like_count":5},{"had_liked":false,"id":294744,"user_name":"刘洋","can_delete":false,"product_type":"c1","uid":1366840,"ip_address":"","ucode":"909AE90A43E762","user_header":"https://static001.geekbang.org/account/avatar/00/14/db/38/9df8992e.jpg","comment_is_top":false,"comment_ctime":1622079919,"is_pvip":true,"replies":[{"id":"106987","content":"每周二四六更新，预计7月13日更新完毕","user_name":"编辑回复","comment_id":294744,"uid":"2189689","ip_address":"","utype":2,"ctime":1622085974,"user_name_real":"李辰洋"}],"discussion_count":1,"race_medal":0,"score":"18801949103","product_id":100079901,"comment_content":"多久更新完啊","like_count":4},{"had_liked":false,"id":294770,"user_name":"独白","can_delete":false,"product_type":"c1","uid":1700211,"ip_address":"","ucode":"EDC477BD20B032","user_header":"https://static001.geekbang.org/account/avatar/00/19/f1/73/6f7e3b35.jpg","comment_is_top":false,"comment_ctime":1622085661,"is_pvip":false,"replies":[{"id":"107044","content":"说的很好啊~ useReducer 是个比较通用的，类似于 useState 但是按照 Redux 的模式提供了一定的统一 state 管理机制。滚动条位置确实是个很好的例子，开发中也经常用到，在第6课就会讲到这个例子。","user_name":"作者回复","comment_id":294770,"uid":"1018676","ip_address":"","utype":1,"ctime":1622118543,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"14506987549","product_id":100079901,"comment_content":"思考题：首先想到的是官方的一个api  useReducer。还有的话，就是监听滚动条向上向下呀。<br>看了老师这节课，才弄清除hooks真正重要的东西是啥。","like_count":3},{"had_liked":false,"id":296398,"user_name":"Geek_9878c1","can_delete":false,"product_type":"c1","uid":1667697,"ip_address":"","ucode":"647183DE9376CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcOPgba5hadxiawicnLjSpRjlskQ22hnLEw1iayU5xibQ2YoqngJ2r6Sjp8RcoW6ODuLBr6dibiascz0vA/132","comment_is_top":false,"comment_ctime":1622954351,"is_pvip":false,"replies":[{"id":"107944","content":"确实如此~ 说明 API 经受住了考验，能满足不断发展的需求变化：-）","user_name":"作者回复","comment_id":296398,"uid":"1018676","ip_address":"","utype":1,"ctime":1623388016,"user_name_real":"Nate"}],"discussion_count":2,"race_medal":0,"score":"10212888943","product_id":100079901,"comment_content":"最喜欢的React地方就是  “在其他前端框架发生翻天覆地变化的同时，React 的 API 则非常稳定，几乎从来没有出现过重大的向后兼容的问题，而且每一次版本的升级也都非常顺滑。“ ， 隔多久都没有隔阂","like_count":2,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521426,"discussion_content":"确实如此~ 说明 API 经受住了考验，能满足不断发展的需求变化：-）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623388016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378411,"discussion_content":"还是有变化的,比如\n1. 组件的编写方式 React.createClass -> Class Component.\n2. 生命周期变化了3版.\n3. 逻辑重用方式也经历了minxin,HOC,renderProps,hooks等方式.\n其他暂时没想到.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623214117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295720,"user_name":"小馋猫","can_delete":false,"product_type":"c1","uid":1387206,"ip_address":"","ucode":"9A4AF648E9D60E","user_header":"https://static001.geekbang.org/account/avatar/00/15/2a/c6/fab94c55.jpg","comment_is_top":false,"comment_ctime":1622558035,"is_pvip":false,"replies":[{"id":"107452","content":"是的，还有 render props 模式，后面会有介绍~","user_name":"作者回复","comment_id":295720,"uid":"1018676","ip_address":"","utype":1,"ctime":1622727308,"user_name_real":"Nate"}],"discussion_count":2,"race_medal":0,"score":"10212492627","product_id":100079901,"comment_content":"hooks没有出现之前如果想实现逻辑复用只能通过高阶组件的方式来实现","like_count":2,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521192,"discussion_content":"是的，还有 render props 模式，后面会有介绍~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622727308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630502,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e1/26/a5bae6c3.jpg","nickname":"。丑","note":"","ucode":"F1006EBF13E95F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378282,"discussion_content":"我实习的时候，领导就建议我不要使用高阶组件， 能props的 就props","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623146285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320624,"user_name":"Geek_0b2691","can_delete":false,"product_type":"c1","uid":1146048,"ip_address":"","ucode":"5994F60D796E44","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/c0/09fd07c2.jpg","comment_is_top":false,"comment_ctime":1636426570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5931393866","product_id":100079901,"comment_content":"1.回答思考题： <br>异步获取的数据，可能有点显而易见，但很常见，数据一开始是没有的，但是获取之后，需要触发hooks去更新组件，再渲染一次。<br>还有就是交互产生的状态改变，比如点击按钮弹窗出来，弹窗原本是不出来的状态，点击一下按钮，更新一下弹窗的显示状态，弹窗组件收到状态改变，就进行重绘，就弹出来了。<br>2. 跟老师请教一个问题，就是刚接触hooks的时候，有两个场景表示很疑惑，<br>一个是用一个useEffect去管理一个函数A的执行，我把多个依赖状态都写在useEffect里面了，没有用useCallback包裹处理函数A，就会发现如果某个操作，导致依赖里面的多个状态发生了变化，这个函数就会执行多次，这正常吗? 那时我一直以为这种情况不应该等所有依赖项都稳定后再去触发一次函数执行吗？为啥会执行多次？这个问题当时也不知道该从哪里寻找答案，就姑且认为是，只要一个依赖发生变化就执行一次函数了，老师这样理解对吗？<br>另外一个场景是，我还是让useEffect帮我去执行函数B，让useEffect也依赖状态了，但依赖的状态不是函数B里面用到的所有状态，是其中某一个，当初设计的思想就是，不是依赖的状态，每一个变它都执行嘛，那我只依赖一个，那是不是只会在依赖的状态变化时才会执行，函数B里用到的其他状态发生变化时就不执行了，这样函数就会少重复执行多次了，是不是就能提效一些了呢？这样的确是只会因为依赖的状态变化而执行函数，现在看来带来的后果就是，函数B中用到的其他状态值，不是最新的，想问老师，这种设计思路是不是本身就是有问题的？我一开始就错了，那减少函数B执行次数的方案，用usaCallback包一下函数B，其实这样也会执行多次，有什么更好的解决方案吗？是不是不应该从这个角度去想提效的问题？函数的多次执行是避免不了的？","like_count":1},{"had_liked":false,"id":303621,"user_name":"哈哈哈[吃瓜]","can_delete":false,"product_type":"c1","uid":2709931,"ip_address":"","ucode":"B17298B22A200F","user_header":"https://static001.geekbang.org/account/avatar/00/29/59/ab/1f6d9ad8.jpg","comment_is_top":false,"comment_ctime":1626880241,"is_pvip":false,"replies":[{"id":"110077","content":"理解函数组件有点像理解显示器的工作原理，你可以认为函数组件的一次执行就是一次屏幕的刷新重绘。我们要控制的就是何时触发刷新。<br><br>useEffect 可以写多个，从而把多个业务逻辑分开来，每一个做自己的事情。<br><br>从 jq 转过来，主要就是把 UI 完全看成状态驱动。","user_name":"作者回复","comment_id":303621,"uid":"1018676","ip_address":"","utype":1,"ctime":1627306109,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"5921847537","product_id":100079901,"comment_content":"求教 我还是对hook的想法有一些疑问 主要是开发思想上 之前一直用jq 最近才看react 总是感觉有点别扭。<br><br>用hook的时候总是想 setState了之后 函数再运行一遍会有什么结果 总是在脑补函数组件内部的运行顺序 感觉一直在函数组件内部打转。<br><br>蓝黄对比那个图 useEffect为什么要写两个 <br><br>另外怎么能更好的从jq这种可以很细的去操作dmo的开发思想上转变到react上来呢？","like_count":1},{"had_liked":false,"id":301060,"user_name":"Levon","can_delete":false,"product_type":"c1","uid":1472097,"ip_address":"","ucode":"F112832F5FDC73","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/61/33d13087.jpg","comment_is_top":false,"comment_ctime":1625499319,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5920466615","product_id":100079901,"comment_content":"老师，react组件在页面切换时，如果页面实例已经销毁后，有请求返回去执行了setState，会报错，这个错误有最佳的实践解决吗","like_count":1,"discussions":[{"author":{"id":2728170,"avatar":"","nickname":"陈庆之","note":"","ucode":"0D8FB96037F475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387544,"discussion_content":"挂载时设置一个标识，卸载时改变这个标识，异步请求成功回调需要set时判断组件是否销毁。可以封装为自定义hook. useSafeState\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628238239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038558,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d8/de/712a2343.jpg","nickname":"一千年的汤","note":"","ucode":"930B4C9E435163","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384295,"discussion_content":"切换取消请求？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626488874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295719,"user_name":"小馋猫","can_delete":false,"product_type":"c1","uid":1387206,"ip_address":"","ucode":"9A4AF648E9D60E","user_header":"https://static001.geekbang.org/account/avatar/00/15/2a/c6/fab94c55.jpg","comment_is_top":false,"comment_ctime":1622557939,"is_pvip":false,"replies":[{"id":"107451","content":"👍🏻","user_name":"作者回复","comment_id":295719,"uid":"1018676","ip_address":"","utype":1,"ctime":1622727285,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"5917525235","product_id":100079901,"comment_content":"函数组件没有自己的state及生命周期方法，hooks使react在函数组件中可以使用state和生命周期方法称为可能，hooks的最大的优点是逻辑可复用，","like_count":1},{"had_liked":false,"id":351525,"user_name":"Andrew","can_delete":false,"product_type":"c1","uid":1856849,"ip_address":"","ucode":"B1598E1E447EC6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/55/51/c7bffc64.jpg","comment_is_top":false,"comment_ctime":1657865124,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657865124","product_id":100079901,"comment_content":"函数组件没有 State, 通过Hooks使得函数组件能够有State，其实是通过闭包的机制保留State吗？","like_count":0},{"had_liked":false,"id":351517,"user_name":"Andrew","can_delete":false,"product_type":"c1","uid":1856849,"ip_address":"","ucode":"B1598E1E447EC6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/55/51/c7bffc64.jpg","comment_is_top":false,"comment_ctime":1657861169,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657861169","product_id":100079901,"comment_content":"如果是复用的话，除了高阶组件外，是否还可以采用继承的方式? 这样在子类中也能够调用父类定义的size成员<br>MyComponent extends WindowSizeComponent extends React.component","like_count":0},{"had_liked":false,"id":348577,"user_name":"刘闯","can_delete":false,"product_type":"c1","uid":3008249,"ip_address":"","ucode":"8A3761294FEE7B","user_header":"","comment_is_top":false,"comment_ctime":1655206006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655206006","product_id":100079901,"comment_content":"useWindowSize是不是可以理解为一个utils函数呢？如果没有hooks，外部引入一个utils函数貌似也可以解决此逻辑复用的问题。","like_count":0},{"had_liked":false,"id":348257,"user_name":"JUST","can_delete":false,"product_type":"c1","uid":1039657,"ip_address":"","ucode":"F513793EBC0C06","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/29/d2b5af6c.jpg","comment_is_top":false,"comment_ctime":1654907062,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654907062","product_id":100079901,"comment_content":"还能想到的有：浏览器属性，PC还是移动端","like_count":0},{"had_liked":false,"id":339953,"user_name":"世界很大","can_delete":false,"product_type":"c1","uid":2598682,"ip_address":"","ucode":"FB18CBA94A89CE","user_header":"https://static001.geekbang.org/account/avatar/00/27/a7/1a/efb17bff.jpg","comment_is_top":false,"comment_ctime":1648483938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648483938","product_id":100079901,"comment_content":"请教 最近开始使用hooks，有时需要批量更新多个state后才触发某段逻辑，这用hooks 该怎么处理呢，类似setState 的callback？感谢～","like_count":0},{"had_liked":false,"id":333694,"user_name":"聂鹏","can_delete":false,"product_type":"c1","uid":1005479,"ip_address":"","ucode":"98AA4D9E9BF9F1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQLfPbnibuQwaXIgyr3hxUdVAuaZfsn4pjic3lDvUmlpfPqvMJ2aSfetI18lKpRyzLuIbYeY2K15ibg/132","comment_is_top":false,"comment_ctime":1644476366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644476366","product_id":100079901,"comment_content":"高阶组件加装饰器模式","like_count":0},{"had_liked":false,"id":333670,"user_name":"其实","can_delete":false,"product_type":"c1","uid":1540172,"ip_address":"","ucode":"E63B588D7609AD","user_header":"https://static001.geekbang.org/account/avatar/00/17/80/4c/4090e19d.jpg","comment_is_top":false,"comment_ctime":1644465427,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1644465427","product_id":100079901,"comment_content":"为什么说 函数组件无法存在内部状态呢，直接定义一个const state在函数组件中使用，和class的this.state有什么区别呢","like_count":0},{"had_liked":false,"id":331849,"user_name":"幼儿园园长","can_delete":false,"product_type":"c1","uid":2425048,"ip_address":"","ucode":"CB1731B3060D9A","user_header":"https://static001.geekbang.org/account/avatar/00/25/00/d8/e1132b1c.jpg","comment_is_top":false,"comment_ctime":1642833404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642833404","product_id":100079901,"comment_content":"严格意义上来说（）=&gt; {return Math.random()} 并不是一个纯函数，因为纯函数的结果是确定输入的情况下具有确定输出，但是这种用法在早期react中是被允许的","like_count":0},{"had_liked":false,"id":318130,"user_name":"ht","can_delete":false,"product_type":"c1","uid":2463655,"ip_address":"","ucode":"44A3103588D500","user_header":"https://static001.geekbang.org/account/avatar/00/25/97/a7/ee26b781.jpg","comment_is_top":false,"comment_ctime":1635158212,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1635158212","product_id":100079901,"comment_content":"老师，react hooks算是一个闭包吗？","like_count":0,"discussions":[{"author":{"id":1195144,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","nickname":"大神博士","note":"","ucode":"8C4318095949F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551189,"discussion_content":"Javascript 函数是闭包的，只是作为一般函数，我们不会去讨论而已，普通函数就是闭包了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644921271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922965,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/57/95/20812ff4.jpg","nickname":"iVan","note":"","ucode":"E5D363BF05B695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410691,"discussion_content":"算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635759603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314798,"user_name":"ggbdpq","can_delete":false,"product_type":"c1","uid":2585019,"ip_address":"","ucode":"70BCCBA6245B8D","user_header":"https://static001.geekbang.org/account/avatar/00/27/71/bb/d219f46b.jpg","comment_is_top":false,"comment_ctime":1633440813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633440813","product_id":100079901,"comment_content":"对于可以作为React组件的数据源，我就想到了两个。因为工作三个月只做了一个财务管理系统的实际项目，除了控制组件的显示与否（设置一个变量来接收默认的true或者flase，或者加载状态），还有就是发送异步请求，接收后台接口返回的数据，暂时想到了这两个。","like_count":0},{"had_liked":false,"id":313492,"user_name":"arronK","can_delete":false,"product_type":"c1","uid":1192961,"ip_address":"","ucode":"58DC6FBF2CF0C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/01/30ca98e6.jpg","comment_is_top":false,"comment_ctime":1632464032,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632464032","product_id":100079901,"comment_content":"原来 Hooks 的来龙去脉在这儿。class 组件的方式实际并不会应用到 class 真正的能力，React 组件的思想也并非 OOP 的思想，而是类似函数的思想 React(state) = UI 。<br><br>早期的问题在于纯函数并不能拥有自己的状态数据，所以选择 class，而 class 使用过程中也确实暴露了很多问题。而当 Hooks 的引入让函数拥有自己的状态后，用函数式编写 React 组件的方式就显得更加清晰了，且能更好的做逻辑复用和关注点的分离。确实是很优秀的设计。","like_count":0},{"had_liked":false,"id":297836,"user_name":"GK","can_delete":false,"product_type":"c1","uid":2293871,"ip_address":"","ucode":"A332094D6A7C99","user_header":"","comment_is_top":false,"comment_ctime":1623808070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623808070","product_id":100079901,"comment_content":"老师，请问「React 社区曾用一张图直观地展现了对比结果」这个图是来源哪里的？有个疑问第一个 useEffect 不写明依赖  name surname 么？","like_count":0},{"had_liked":false,"id":297208,"user_name":"Torres_07","can_delete":false,"product_type":"c1","uid":1086692,"ip_address":"","ucode":"737E002669834C","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/e4/528de862.jpg","comment_is_top":false,"comment_ctime":1623377261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623377261","product_id":100079901,"comment_content":"论文正在写的就是class到hooks的重构，重点放在了重构后的组件状态管理，最后的结果class合hooks组件数据对比上想来想去只有代码行数可以直观的进行对比，老师有什么想法吗？","like_count":0},{"had_liked":false,"id":296722,"user_name":"盼盼","can_delete":false,"product_type":"c1","uid":1517650,"ip_address":"","ucode":"BF3AABFFEB4F41","user_header":"https://static001.geekbang.org/account/avatar/00/17/28/52/cbe829cb.jpg","comment_is_top":false,"comment_ctime":1623131640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623131640","product_id":100079901,"comment_content":"之前用class封装高阶组件实现复用，一直让我觉得特别难理解，调试不方便，有了hooks之后用起来好舒服","like_count":0},{"had_liked":false,"id":296265,"user_name":"陶佳佳","can_delete":false,"product_type":"c1","uid":2649341,"ip_address":"","ucode":"650FA8DE051B1C","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/fd/0c5c254e.jpg","comment_is_top":false,"comment_ctime":1622868139,"is_pvip":false,"replies":[{"id":"107746","content":"简单来说，组合让组件交互方式更加简单，只有 props。而继承则比较复杂，因为存在父方法调用或者覆盖等场景。不过因为现在都是函数组件，所以就一定是组合的方式了~ ","user_name":"作者回复","comment_id":296265,"uid":"1018676","ip_address":"","utype":1,"ctime":1623081895,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622868139","product_id":100079901,"comment_content":"您好，老师，我想咨询一下，组合和继承的区别是什么？","like_count":0},{"had_liked":false,"id":296198,"user_name":"寇云","can_delete":false,"product_type":"c1","uid":1001332,"ip_address":"","ucode":"87181F16F83543","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/74/5e292ded.jpg","comment_is_top":false,"comment_ctime":1622800837,"is_pvip":false,"replies":[{"id":"107741","content":"👍🏻","user_name":"作者回复","comment_id":296198,"uid":"1018676","ip_address":"","utype":1,"ctime":1623081306,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622800837","product_id":100079901,"comment_content":"定时器，监听滚动，键盘事件，复用Fetch。","like_count":0},{"had_liked":false,"id":295834,"user_name":"Ada","can_delete":false,"product_type":"c1","uid":1565813,"ip_address":"","ucode":"C52BDD0DBF618D","user_header":"https://static001.geekbang.org/account/avatar/00/17/e4/75/57809f30.jpg","comment_is_top":false,"comment_ctime":1622615501,"is_pvip":false,"replies":[{"id":"107458","content":"是的，父组件传过来的就是 props。props 变了也会重新渲染。","user_name":"作者回复","comment_id":295834,"uid":"1018676","ip_address":"","utype":1,"ctime":1622727533,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622615501","product_id":100079901,"comment_content":"数据源，父组件传递下来的也是吧？","like_count":0},{"had_liked":false,"id":295534,"user_name":"帅气小熊猫","can_delete":false,"product_type":"c1","uid":1022199,"ip_address":"","ucode":"88FE6B57F55063","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/f7/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1622465758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622465758","product_id":100079901,"comment_content":"pathname  最近需求里就用到了","like_count":0},{"had_liked":false,"id":295224,"user_name":"L","can_delete":false,"product_type":"c1","uid":1228268,"ip_address":"","ucode":"26BB686671F7D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/ec/cc7abf0b.jpg","comment_is_top":false,"comment_ctime":1622304184,"is_pvip":true,"replies":[{"id":"107183","content":"是的，组合更适合 React 组件~","user_name":"作者回复","comment_id":295224,"uid":"1018676","ip_address":"","utype":1,"ctime":1622362401,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622304184","product_id":100079901,"comment_content":"组合大于继承，特别是对组件这种大部分都是组合而成的内容来说就更是这个样子了","like_count":0},{"had_liked":false,"id":294898,"user_name":"Forest","can_delete":false,"product_type":"c1","uid":1707743,"ip_address":"","ucode":"B75CB4919FF25A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","comment_is_top":false,"comment_ctime":1622125402,"is_pvip":false,"replies":[{"id":"107106","content":"没错！","user_name":"作者回复","comment_id":294898,"uid":"1018676","ip_address":"","utype":1,"ctime":1622189329,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622125402","product_id":100079901,"comment_content":"逻辑复用应该是hook的最大优点吧","like_count":0},{"had_liked":false,"id":294724,"user_name":"Geeker","can_delete":false,"product_type":"c1","uid":1032345,"ip_address":"","ucode":"9937127DE96D78","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/99/259a412f.jpg","comment_is_top":false,"comment_ctime":1622074110,"is_pvip":true,"replies":[{"id":"107046","content":"不错哈~","user_name":"作者回复","comment_id":294724,"uid":"1018676","ip_address":"","utype":1,"ctime":1622118600,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"1622074110","product_id":100079901,"comment_content":"加深了我对 hooks 的理解","like_count":0}]]}