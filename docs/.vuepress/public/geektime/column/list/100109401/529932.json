{"id":529932,"title":"45｜RESTful Web Services（9）：通过伦敦学派得到的测试风格是什么样的？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/2e/ed95e0629105b3fe661590be6ab4af2e.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/aa/56/aacdc2230e337d593308c0184b799956.jpg?wh=2284x1285\" alt=\"\"></p><p>任务列表为：</p><ul>\n<li>\n<p>ResourceServlet</p>\n<ul>\n<li>\n<p><s>将请求派分给对应的资源（Resource），并根据返回的状态、超媒体类型、内容，响应Http请求</s></p>\n<ul>\n<li><s>使用OutboundResponse的status作为Http Response的状态</s></li>\n<li><s>使用OutboundResponse的headers作为Http Response的Http Headers</s></li>\n<li><s>通过MessageBodyWriter将OutboundResponse的GenericEntity写回为Body</s></li>\n<li><s>如果找不到对应的MessageBodyWriter，则返回500族错误</s></li>\n<li><s>如果找不到对应的HeaderDelegate，则返回500族错误</s></li>\n<li><s>如果找不到对应的ExceptionMapper，则返回500族错误</s></li>\n<li><s>如果entity为空，则忽略body</s></li>\n</ul>\n</li>\n<li>\n<p><s>当资源方法抛出异常时，根据异常响应Http请求</s></p>\n<ul>\n<li><s>如果抛出WebApplicationException，且response不为null，则使用response响应Http</s></li>\n<li><s>如果抛出的不是WebApplicationException，则通过异常的具体类型查找ExceptionMapper，生产response响应Http请求</s></li>\n</ul>\n</li>\n<li>\n<p><s>当其他组件抛出异常时，根据异常响应Http请求</s></p>\n<ul>\n<li><s>调用ExceptionMapper时</s></li>\n<li><s>调用HeaderDelegate时</s></li>\n<li><s>调用MessageBodyWriter时</s></li>\n<li><s>通过Providers查找ExceptionMapper时</s></li>\n<li><s>通过Providers查找MessageBodyWriter时</s></li>\n<li><s>通过RuntimeDelegate查找HeaderDelegate时</s></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>RuntimeDelegate</p>\n<ul>\n<li>为MediaType提供HeaderDelegate</li>\n<li>为CacheControl提供HeaderDelegate</li>\n<li>为Cookie提供HeaderDelegates</li>\n<li>为EntityTag提供HeaderDelegate</li>\n<li>为Link提供HeaderDelegate</li>\n<li>为NewCookie提供HeaderDelegate</li>\n<li>为Date提供HeaderDelegate</li>\n<li>提供OutboundResponseBuilder</li>\n</ul>\n</li>\n<li>\n<p>OutboundResponseBuilder</p>\n</li>\n<li>\n<p>OutboundResponse</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>代码为：</p><pre><code>package geektime.tdd.rest;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.ws.rs.WebApplicationException;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.MultivaluedMap;\nimport jakarta.ws.rs.ext.ExceptionMapper;\nimport jakarta.ws.rs.ext.MessageBodyWriter;\nimport jakarta.ws.rs.ext.Providers;\nimport jakarta.ws.rs.ext.RuntimeDelegate;\nimport java.io.IOException;\nimport java.util.function.Supplier;\n\npublic class ResourceServlet extends HttpServlet {\n    private Runtime runtime;\n    private Providers providers;\n    \n    public ResourceServlet(Runtime runtime) {\n        this.runtime = runtime;\n        this.providers = runtime.getProviders();\n    }\n    \n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ResourceRouter router = runtime.getResourceRouter();\n        respond(resp, () -&gt; router.dispatch(req, runtime.createResourceContext(req, resp)));\n    }\n    \n    private void respond(HttpServletResponse resp, Supplier&lt;OutboundResponse&gt; supplier) {\n        try {\n            respond(resp, supplier.get());\n        } catch (WebApplicationException exception) {\n            respond(resp, () -&gt; (OutboundResponse) exception.getResponse());\n        } catch (Throwable throwable) {\n            respond(resp, () -&gt; from(throwable));\n        }\n    }\n    \n    private void respond(HttpServletResponse resp, OutboundResponse response) throws IOException {\n        resp.setStatus(response.getStatus());\n        MultivaluedMap&lt;String, Object&gt; headers = response.getHeaders();\n        for (String name : headers.keySet())\n            for (Object value : headers.get(name)) {\n                RuntimeDelegate.HeaderDelegate headerDelegate = RuntimeDelegate.getInstance().createHeaderDelegate(value.getClass());\n                resp.addHeader(name, headerDelegate.toString(value));\n            }\n        GenericEntity entity = response.getGenericEntity();\n        if (entity != null) {\n            MessageBodyWriter writer = providers.getMessageBodyWriter(entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType());\n            writer.writeTo(entity.getEntity(), entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType(),\n                    response.getHeaders(), resp.getOutputStream());\n        }\n    }\n    \n    private OutboundResponse from(Throwable throwable) {\n        ExceptionMapper mapper = providers.getExceptionMapper(throwable.getClass());\n        return (OutboundResponse) mapper.toResponse(throwable);\n    }\n}\n\n</code></pre><p>测试为：</p><pre><code>package geektime.tdd.rest;\nimport jakarta.servlet.Servlet;\nimport jakarta.ws.rs.WebApplicationException;\nimport jakarta.ws.rs.container.ResourceContext;\nimport jakarta.ws.rs.core.*;\nimport jakarta.ws.rs.ext.MessageBodyWriter;\nimport jakarta.ws.rs.ext.Providers;\nimport jakarta.ws.rs.ext.RuntimeDelegate;\nimport org.junit.jupiter.api.*;\nimport org.mockito.Mockito;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\nimport java.net.http.HttpResponse;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.when;\npublic class ResourceServletTest extends ServletTest {\n    private Runtime runtime;\n    private ResourceRouter router;\n    private ResourceContext resourceContext;\n    private Providers providers;\n    private RuntimeDelegate delegate;\n    @Override\n    protected Servlet getServlet() {\n        runtime = Mockito.mock(Runtime.class);\n        router = Mockito.mock(ResourceRouter.class);\n        resourceContext = Mockito.mock(ResourceContext.class);\n        providers = Mockito.mock(Providers.class);\n        when(runtime.getResourceRouter()).thenReturn(router);\n        when(runtime.createResourceContext(any(), any())).thenReturn(resourceContext);\n        when(runtime.getProviders()).thenReturn(providers);\n        return new ResourceServlet(runtime);\n    }\n    @BeforeEach\n    public void before() {\n        delegate = Mockito.mock(RuntimeDelegate.class);\n        RuntimeDelegate.setInstance(delegate);\n        when(delegate.createHeaderDelegate(eq(NewCookie.class))).thenReturn(new RuntimeDelegate.HeaderDelegate&lt;&gt;() {\n            @Override\n            public NewCookie fromString(String value) {\n                return null;\n            }\n            @Override\n            public String toString(NewCookie value) {\n                return value.getName() + &quot;=&quot; + value.getValue();\n            }\n        });\n    }\n    @Nested\n    class RespondForOutboundResponse {\n        @Test\n        public void should_use_http_headers_from_response() throws Exception {\n            response().headers(&quot;Set-Cookie&quot;, new NewCookie.Builder(&quot;SESSION_ID&quot;).value(&quot;session&quot;).build(),\n                    new NewCookie.Builder(&quot;USER_ID&quot;).value(&quot;user&quot;).build()).returnFrom(router);\n            HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n            assertArrayEquals(new String[]{&quot;SESSION_ID=session&quot;, &quot;USER_ID=user&quot;}, httpResponse.headers().allValues(&quot;Set-Cookie&quot;).toArray(String[]::new));\n        }\n        @Test\n        public void should_write_entity_to_http_response_using_message_body_writer() throws Exception {\n            response().entity(new GenericEntity&lt;&gt;(&quot;entity&quot;, String.class), new Annotation[0]).returnFrom(router);\n            HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n            assertEquals(&quot;entity&quot;, httpResponse.body());\n        }\n\n        @Test\n        public void should_not_call_message_body_writer_if_entity_is_null() throws Exception {\n            response().entity(null, new Annotation[0]).returnFrom(router);\n            HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n            assertEquals(Response.Status.OK.getStatusCode(), httpResponse.statusCode());\n            assertEquals(&quot;&quot;, httpResponse.body());\n        }\n        @Test\n        public void should_use_status_from_response() throws Exception {\n            response().status(Response.Status.NOT_MODIFIED).returnFrom(router);\n            HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n            assertEquals(Response.Status.NOT_MODIFIED.getStatusCode(), httpResponse.statusCode());\n        }\n    }\n    @TestFactory\n    public List&lt;DynamicTest&gt; RespondWhenExtensionMissing() {\n        List&lt;DynamicTest&gt; tests = new ArrayList&lt;&gt;();\n        Map&lt;String, org.junit.jupiter.api.function.Executable&gt; extensions =\n                Map.of(&quot;MessageBodyWriter&quot;, () -&gt; response().entity(new GenericEntity&lt;&gt;(1, Integer.class), new Annotation[0]).returnFrom(router),\n                        &quot;HeaderDelegate&quot;, () -&gt; response().headers(HttpHeaders.DATE, new Date()).returnFrom(router),\n                        &quot;ExceptionMapper&quot;, () -&gt; when(router.dispatch(any(), eq(resourceContext))).thenThrow(IllegalStateException.class));\n        for (String name : extensions.keySet())\n            tests.add(DynamicTest.dynamicTest(name + &quot; not found&quot;, () -&gt; {\n                extensions.get(name).execute();\n                when(providers.getExceptionMapper(eq(NullPointerException.class))).thenReturn(e -&gt; response().status(Response.Status.INTERNAL_SERVER_ERROR).build());\n                HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n                assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), httpResponse.statusCode());\n            }));\n        return tests;\n    }\n    @TestFactory\n    public List&lt;DynamicTest&gt; RespondForException() {\n        List&lt;DynamicTest&gt; tests = new ArrayList&lt;&gt;();\n        Map&lt;String, Consumer&lt;Consumer&lt;RuntimeException&gt;&gt;&gt; exceptions = Map.of(&quot;Other Exception&quot;, this::otherExceptionThrownFrom,\n                &quot;WebApplicationException&quot;, this::webApplicationExceptionThrownFrom);\n        for (Map.Entry&lt;String, Consumer&lt;RuntimeException&gt;&gt; caller : getCallers().entrySet())\n            for (Map.Entry&lt;String, Consumer&lt;Consumer&lt;RuntimeException&gt;&gt;&gt; exceptionThrownFrom : exceptions.entrySet())\n                tests.add(DynamicTest.dynamicTest(caller.getKey() + &quot; throws &quot; + exceptionThrownFrom.getKey(),\n                        () -&gt; exceptionThrownFrom.getValue().accept(caller.getValue())));\n        return tests;\n    }\n    private void webApplicationExceptionThrownFrom(Consumer&lt;RuntimeException&gt; caller) {\n        RuntimeException exception = new WebApplicationException(response().status(Response.Status.FORBIDDEN).build());\n        caller.accept(exception);\n        HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n        assertEquals(Response.Status.FORBIDDEN.getStatusCode(), httpResponse.statusCode());\n    }\n    private void otherExceptionThrownFrom(Consumer&lt;RuntimeException&gt; caller) {\n        RuntimeException exception = new IllegalArgumentException();\n        caller.accept(exception);\n        when(providers.getExceptionMapper(eq(IllegalArgumentException.class))).thenReturn(e -&gt; response().status(Response.Status.FORBIDDEN).build());\n        HttpResponse&lt;String&gt; httpResponse = get(&quot;/test&quot;);\n        assertEquals(Response.Status.FORBIDDEN.getStatusCode(), httpResponse.statusCode());\n    }\n    @Retention(RetentionPolicy.RUNTIME)\n    @interface ExceptionThrownFrom {\n    }\n    @ExceptionThrownFrom\n    private void providers_getExceptionMapper(RuntimeException exception) {\n        when(router.dispatch(any(), eq(resourceContext))).thenThrow(RuntimeException.class);\n        when(providers.getExceptionMapper(eq(RuntimeException.class))).thenThrow(exception);\n    }\n    @ExceptionThrownFrom\n    private void runtimeDelegate_createHeaderDelegate(RuntimeException exception) {\n        response().headers(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_TYPE).returnFrom(router);\n        when(delegate.createHeaderDelegate(eq(MediaType.class))).thenThrow(exception);\n    }\n    @ExceptionThrownFrom\n    private void exceptionMapper_toResponse(RuntimeException exception) {\n        when(router.dispatch(any(), eq(resourceContext))).thenThrow(RuntimeException.class);\n        when(providers.getExceptionMapper(eq(RuntimeException.class))).thenThrow(exception);\n    }\n    @ExceptionThrownFrom\n    private void headerDelegate_toString(RuntimeException exception) {\n        response().headers(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_PLAIN_TYPE).returnFrom(router);\n        when(delegate.createHeaderDelegate(eq(MediaType.class))).thenReturn(new RuntimeDelegate.HeaderDelegate&lt;MediaType&gt;() {\n            @Override\n            public MediaType fromString(String value) {\n                return null;\n            }\n            @Override\n            public String toString(MediaType value) {\n                throw exception;\n            }\n        });\n    }\n    @ExceptionThrownFrom\n    private void providers_getMessageBodyWriter(RuntimeException exception) {\n        response().entity(new GenericEntity&lt;&gt;(2.5, Double.class), new Annotation[0]).returnFrom(router);\n        when(providers.getMessageBodyWriter(eq(Double.class), eq(Double.class), eq(new Annotation[0]), eq(MediaType.TEXT_PLAIN_TYPE)))\n                .thenThrow(exception);\n    }\n    @ExceptionThrownFrom\n    private void messageBodyWriter_writeTo(RuntimeException exception) {\n        response().entity(new GenericEntity&lt;&gt;(2.5, Double.class), new Annotation[0]).returnFrom(router);\n        when(providers.getMessageBodyWriter(eq(Double.class), eq(Double.class), eq(new Annotation[0]), eq(MediaType.TEXT_PLAIN_TYPE)))\n                .thenReturn(new MessageBodyWriter&lt;Double&gt;() {\n                    @Override\n                    public boolean isWriteable(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n                        return false;\n                    }\n                    @Override\n                    public void writeTo(Double aDouble, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, Object&gt; httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException {\n                        throw exception;\n                    }\n                });\n    }\n    @ExceptionThrownFrom\n    public void resourceRouter_dispatch(RuntimeException exception) {\n        when(router.dispatch(any(), eq(resourceContext))).thenThrow(exception);\n    }\n    private Map&lt;String, Consumer&lt;RuntimeException&gt;&gt; getCallers() {\n        Map&lt;String, Consumer&lt;RuntimeException&gt;&gt; callers = new HashMap&lt;&gt;();\n        for (Method method : Arrays.stream(this.getClass().getDeclaredMethods()).filter(m -&gt; m.isAnnotationPresent(ExceptionThrownFrom.class)).toList()) {\n            String name = method.getName();\n            String callerName = name.substring(0, 1).toUpperCase() + name.substring(1).replace('_', '.');\n            callers.put(callerName, e -&gt; {\n                try {\n                    method.invoke(this, e);\n                } catch (Exception ex) {\n                    throw new RuntimeException(ex);\n                }\n            });\n        }\n        return callers;\n    }\n    private OutboundResponseBuilder response() {\n        return new OutboundResponseBuilder();\n    }\n    class OutboundResponseBuilder {\n        Response.Status status = Response.Status.OK;\n        MultivaluedMap&lt;String, Object&gt; headers = new MultivaluedHashMap&lt;&gt;();\n        GenericEntity&lt;Object&gt; entity = new GenericEntity&lt;&gt;(&quot;entity&quot;, String.class);\n        Annotation[] annotations = new Annotation[0];\n        MediaType mediaType = MediaType.TEXT_PLAIN_TYPE;\n        public OutboundResponseBuilder status(Response.Status status) {\n            this.status = status;\n            return this;\n        }\n        public OutboundResponseBuilder headers(String name, Object... values) {\n            headers.addAll(name, values);\n            return this;\n        }\n        public OutboundResponseBuilder entity(GenericEntity&lt;Object&gt; entity, Annotation[] annotations) {\n            this.entity = entity;\n            this.annotations = annotations;\n            return this;\n        }\n        void returnFrom(ResourceRouter router) {\n            build(response -&gt; when(router.dispatch(any(), eq(resourceContext))).thenReturn(response));\n        }\n        void build(Consumer&lt;OutboundResponse&gt; consumer) {\n            consumer.accept(build());\n        }\n        OutboundResponse build() {\n            OutboundResponse response = Mockito.mock(OutboundResponse.class);\n            when(response.getStatus()).thenReturn(status.getStatusCode());\n            when(response.getStatusInfo()).thenReturn(status);\n            when(response.getHeaders()).thenReturn(headers);\n            when(response.getGenericEntity()).thenReturn(entity);\n            when(response.getAnnotations()).thenReturn(annotations);\n            when(response.getMediaType()).thenReturn(mediaType);\n            stubMessageBodyWriter();\n            return response;\n        }\n        private void stubMessageBodyWriter() {\n            when(providers.getMessageBodyWriter(eq(String.class), eq(String.class), same(annotations), eq(mediaType)))\n                    .thenReturn(new MessageBodyWriter&lt;&gt;() {\n                        @Override\n                        public boolean isWriteable(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n                            return false;\n                        }\n                        @Override\n                        public void writeTo(String s, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, Object&gt; httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException {\n                            PrintWriter writer = new PrintWriter(entityStream);\n                            writer.write(s);\n                            writer.flush();\n                        }\n                    });\n        }\n    }\n}\n\n</code></pre><h2>目前的代码与测试</h2><p>下面让我们回顾一下目前的代码与测试：</p><p><video poster=\"https://media001.geekbang.org/f31d36380c95408fbe62a97732fd922d/snapshots/b83c6ec5516f4b719c19b82b5ec86782-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3d9aeded-1817f40b455-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/bc0e66044292438dbf0ec969ea6c5b7c/7a9ee8960fe14c75881ee04705269a56-038a64633083f294b160e3849c3c478f-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题。</p><ol>\n<li>伦敦学派与经典学派的差异是什么？</li>\n<li>伦敦学派与经典学派的这些差异，在编码过程中，对我们的思考方法带来了什么影响？</li>\n</ol><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"44｜RESTful Web Services（8）：如何在现有代码的基础上构造测试？","id":529910},"right":{"article_title":"46｜RESTful Web Services（10）：伦敦学派与经典学派的测试节奏有何不同？","id":529959}},"comments":[{"had_liked":false,"id":350063,"user_name":"枫中的刀剑","can_delete":false,"product_type":"c1","uid":1322387,"ip_address":"","ucode":"4B086F538184AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/93/0f1cbf44.jpg","comment_is_top":false,"comment_ctime":1656551945,"is_pvip":false,"replies":[{"id":"127386","content":"可以","user_name":"作者回复","user_name_real":"编辑","uid":"2537798","ctime":1656562542,"ip_address":"","comment_id":350063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1656551945","product_id":100109401,"comment_content":"exceptionMapper_toResponse的异常抛出这样写会不会好一些。<br>when(providers.getExceptionMapper(eq(RuntimeException.class))).thenReturn(ex -&gt; {<br>            throw exception;<br>        });<br>强调是在toResponse 里抛出的。<br>不然感觉和providers_getExceptionMapper没区别。","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578192,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656562542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}