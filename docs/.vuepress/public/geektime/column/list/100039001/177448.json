{"id":177448,"title":"20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","content":"<p>上几节课中，我们学习了经典的SOLID原则。今天，我们讲两个设计原则：KISS原则和YAGNI原则。其中，KISS原则比较经典，耳熟能详，但YAGNI你可能没怎么听过，不过它理解起来也不难。</p><p>理解这两个原则时候，经常会有一个共同的问题，那就是，看一眼就感觉懂了，但深究的话，又有很多细节问题不是很清楚。比如，怎么理解KISS原则中“简单”两个字？什么样的代码才算“简单”？怎样的代码才算“复杂”？如何才能写出“简单”的代码？YAGNI原则跟KISS原则说的是一回事吗？</p><p>如果你还不能非常清晰地回答出上面这几个问题，那恭喜你，又得到了一次进步提高的机会。等你听完这节课，我相信你很自然就能回答上来了。话不多说，让我们带着这些问题，正式开始今天的学习吧！</p><h2>如何理解“KISS原则”？</h2><p>KISS原则的英文描述有好几个版本，比如下面这几个。</p><ul>\n<li>Keep It Simple and Stupid.</li>\n<li>Keep It Short and Simple.</li>\n<li>Keep It Simple and Straightforward.</li>\n</ul><p>不过，仔细看你就会发现，它们要表达的意思其实差不多，翻译成中文就是：尽量保持简单。</p><p>KISS原则算是一个万金油类型的设计原则，可以应用在很多场景中。它不仅经常用来指导软件开发，还经常用来指导更加广泛的系统设计、产品设计等，比如，冰箱、建筑、iPhone手机的设计等等。不过，咱们的专栏是讲代码设计的，所以，接下来，我还是重点讲解如何在编码开发中应用这条原则。</p><!-- [[[read_end]]] --><p>我们知道，代码的可读性和可维护性是衡量代码质量非常重要的两个标准。而KISS原则就是保持代码可读和可维护的重要手段。代码足够简单，也就意味着很容易读懂，bug比较难隐藏。即便出现bug，修复起来也比较简单。</p><p>不过，这条原则只是告诉我们，要保持代码“Simple and Stupid”，但并没有讲到，什么样的代码才是“Simple and Stupid”的，更没有给出特别明确的方法论，来指导如何开发出“Simple and Stupid”的代码。所以，看着非常简单，但不能落地，这就有点像我们常说的“心灵鸡汤”。哦，咱们这里应该叫“技术鸡汤”。</p><p>所以，接下来，为了能让这条原则切实地落地，能够指导实际的项目开发，我就针对刚刚的这些问题来进一步讲讲我的理解。</p><h2>代码行数越少就越“简单”吗？</h2><p>我们先一起看一个例子。下面这三段代码可以实现同样一个功能：检查输入的字符串ipAddress是否是合法的IP地址。</p><p>一个合法的IP地址由四个数字组成，并且通过“.”来进行分割。每组数字的取值范围是0~255。第一组数字比较特殊，不允许为0。对比这三段代码，你觉得哪一段代码最符合KISS原则呢？如果让你来实现这个功能，你会选择用哪种实现方法呢？你可以先自己思考一下，然后再看我下面的讲解。</p><pre><code>// 第一种实现方式: 使用正则表达式\npublic boolean isValidIpAddressV1(String ipAddress) {\n  if (StringUtils.isBlank(ipAddress)) return false;\n  String regex = &quot;^(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|[1-9])\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)$&quot;;\n  return ipAddress.matches(regex);\n}\n\n// 第二种实现方式: 使用现成的工具类\npublic boolean isValidIpAddressV2(String ipAddress) {\n  if (StringUtils.isBlank(ipAddress)) return false;\n  String[] ipUnits = StringUtils.split(ipAddress, '.');\n  if (ipUnits.length != 4) {\n    return false;\n  }\n  for (int i = 0; i &lt; 4; ++i) {\n    int ipUnitIntValue;\n    try {\n      ipUnitIntValue = Integer.parseInt(ipUnits[i]);\n    } catch (NumberFormatException e) {\n      return false;\n    }\n    if (ipUnitIntValue &lt; 0 || ipUnitIntValue &gt; 255) {\n      return false;\n    }\n    if (i == 0 &amp;&amp; ipUnitIntValue == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 第三种实现方式: 不使用任何工具类\npublic boolean isValidIpAddressV3(String ipAddress) {\n  char[] ipChars = ipAddress.toCharArray();\n  int length = ipChars.length;\n  int ipUnitIntValue = -1;\n  boolean isFirstUnit = true;\n  int unitsCount = 0;\n  for (int i = 0; i &lt; length; ++i) {\n    char c = ipChars[i];\n    if (c == '.') {\n      if (ipUnitIntValue &lt; 0 || ipUnitIntValue &gt; 255) return false;\n      if (isFirstUnit &amp;&amp; ipUnitIntValue == 0) return false;\n      if (isFirstUnit) isFirstUnit = false;\n      ipUnitIntValue = -1;\n      unitsCount++;\n      continue;\n    }\n    if (c &lt; '0' || c &gt; '9') {\n      return false;\n    }\n    if (ipUnitIntValue == -1) ipUnitIntValue = 0;\n    ipUnitIntValue = ipUnitIntValue * 10 + (c - '0');\n  }\n  if (ipUnitIntValue &lt; 0 || ipUnitIntValue &gt; 255) return false;\n  if (unitsCount != 3) return false;\n  return true;\n}\n</code></pre><p>第一种实现方式利用的是正则表达式，只用三行代码就把这个问题搞定了。它的代码行数最少，那是不是就最符合KISS原则呢？答案是否定的。虽然代码行数最少，看似最简单，实际上却很复杂。这正是因为它使用了正则表达式。</p><p>一方面，正则表达式本身是比较复杂的，写出完全没有bug的正则表达本身就比较有挑战；另一方面，并不是每个程序员都精通正则表达式。对于不怎么懂正则表达式的同事来说，看懂并且维护这段正则表达式是比较困难的。这种实现方式会导致代码的可读性和可维护性变差，所以，从KISS原则的设计初衷上来讲，这种实现方式并不符合KISS原则。</p><p>讲完了第一种实现方式，我们再来看下其他两种实现方式。</p><p>第二种实现方式使用了StringUtils类、Integer类提供的一些现成的工具函数，来处理IP地址字符串。第三种实现方式，不使用任何工具函数，而是通过逐一处理IP地址中的字符，来判断是否合法。从代码行数上来说，这两种方式差不多。但是，第三种要比第二种更加有难度，更容易写出bug。从可读性上来说，第二种实现方式的代码逻辑更清晰、更好理解。所以，在这两种实现方式中，第二种实现方式更加“简单”，更加符合KISS原则。</p><p>不过，你可能会说，第三种实现方式虽然实现起来稍微有点复杂，但性能要比第二种实现方式高一些啊。从性能的角度来说，选择第三种实现方式是不是更好些呢？</p><p>在回答这个问题之前，我先解释一下，为什么说第三种实现方式性能会更高一些。一般来说，工具类的功能都比较通用和全面，所以，在代码实现上，需要考虑和处理更多的细节，执行效率就会有所影响。而第三种实现方式，完全是自己操作底层字符，只针对IP地址这一种格式的数据输入来做处理，没有太多多余的函数调用和其他不必要的处理逻辑，所以，在执行效率上，这种类似定制化的处理代码方式肯定比通用的工具类要高些。</p><p>不过，尽管第三种实现方式性能更高些，但我还是更倾向于选择第二种实现方法。那是因为第三种实现方式实际上是一种过度优化。除非isValidIpAddress()函数是影响系统性能的瓶颈代码，否则，这样优化的投入产出比并不高，增加了代码实现的难度、牺牲了代码的可读性，性能上的提升却并不明显。</p><h2>代码逻辑复杂就违背KISS原则吗？</h2><p>刚刚我们提到，并不是代码行数越少就越“简单”，还要考虑逻辑复杂度、实现难度、代码的可读性等。那如果一段代码的逻辑复杂、实现难度大、可读性也不太好，是不是就一定违背KISS原则呢？在回答这个问题之前，我们先来看下面这段代码：</p><pre><code>// KMP algorithm: a, b分别是主串和模式串；n, m分别是主串和模式串的长度。\npublic static int kmp(char[] a, int n, char[] b, int m) {\n  int[] next = getNexts(b, m);\n  int j = 0;\n  for (int i = 0; i &lt; n; ++i) {\n    while (j &gt; 0 &amp;&amp; a[i] != b[j]) { // 一直找到a[i]和b[j]\n      j = next[j - 1] + 1;\n    }\n    if (a[i] == b[j]) {\n      ++j;\n    }\n    if (j == m) { // 找到匹配模式串的了\n      return i - m + 1;\n    }\n  }\n  return -1;\n}\n\n// b表示模式串，m表示模式串的长度\nprivate static int[] getNexts(char[] b, int m) {\n  int[] next = new int[m];\n  next[0] = -1;\n  int k = -1;\n  for (int i = 1; i &lt; m; ++i) {\n    while (k != -1 &amp;&amp; b[k + 1] != b[i]) {\n      k = next[k];\n    }\n    if (b[k + 1] == b[i]) {\n      ++k;\n    }\n    next[i] = k;\n  }\n  return next;\n}\n</code></pre><p>这段代码来自我的另一个专栏《数据结构与算法之美》中<a href=\"https://time.geekbang.org/column/article/71845\">KMP字符串匹配算法</a>的代码实现。这段代码完全符合我们刚提到的逻辑复杂、实现难度大、可读性差的特点，但它并不违反KISS原则。为什么这么说呢？</p><p>KMP算法以快速高效著称。当我们需要处理长文本字符串匹配问题（几百MB大小文本内容的匹配），或者字符串匹配是某个产品的核心功能（比如Vim、Word等文本编辑器），又或者字符串匹配算法是系统性能瓶颈的时候，我们就应该选择尽可能高效的KMP算法。而KMP算法本身具有逻辑复杂、实现难度大、可读性差的特点。本身就复杂的问题，用复杂的方法解决，并不违背KISS原则。</p><p>不过，平时的项目开发中涉及的字符串匹配问题，大部分都是针对比较小的文本。在这种情况下，直接调用编程语言提供的现成的字符串匹配函数就足够了。如果非得用KMP算法、BM算法来实现字符串匹配，那就真的违背KISS原则了。也就是说，同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。</p><h2>如何写出满足KISS原则的代码？</h2><p>实际上，我们前面已经讲到了一些方法。这里我稍微总结一下。</p><ul>\n<li>不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。</li>\n<li>不要重复造轮子，要善于使用已经有的工具类库。经验证明，自己去实现这些类库，出bug的概率会更高，维护的成本也比较高。</li>\n<li>不要过度优化。不要过度使用一些奇技淫巧（比如，位运算代替算术运算、复杂的条件语句代替if-else、使用一些过于底层的函数等）来优化代码，牺牲代码的可读性。</li>\n</ul><p>实际上，代码是否足够简单是一个挺主观的评判。同样的代码，有的人觉得简单，有的人觉得不够简单。而往往自己编写的代码，自己都会觉得够简单。所以，评判代码是否简单，还有一个很有效的间接方法，那就是code review。如果在code review的时候，同事对你的代码有很多疑问，那就说明你的代码有可能不够“简单”，需要优化啦。</p><p>这里我还想多说两句，我们在做开发的时候，一定不要过度设计，不要觉得简单的东西就没有技术含量。实际上，越是能用简单的方法解决复杂的问题，越能体现一个人的能力。</p><h2>YAGNI跟KISS说的是一回事吗？</h2><p>YAGNI原则的英文全称是：You Ain’t Gonna Need It。直译就是：你不会需要它。这条原则也算是万金油了。当用在软件开发中的时候，它的意思是：不要去设计当前用不到的功能；不要去编写当前用不到的代码。实际上，这条原则的核心思想就是：不要做过度设计。</p><p>比如，我们的系统暂时只用Redis存储配置信息，以后可能会用到ZooKeeper。根据YAGNI原则，在未用到ZooKeeper之前，我们没必要提前编写这部分代码。当然，这并不是说我们就不需要考虑代码的扩展性。我们还是要预留好扩展点，等到需要的时候，再去实现ZooKeeper存储配置信息这部分代码。</p><p>再比如，我们不要在项目中提前引入不需要依赖的开发包。对于Java程序员来说，我们经常使用Maven或者Gradle来管理依赖的类库（library）。我发现，有些同事为了避免开发中library包缺失而频繁地修改Maven或者Gradle配置文件，提前往项目里引入大量常用的library包。实际上，这样的做法也是违背YAGNI原则的。</p><p>从刚刚的分析我们可以看出，YAGNI原则跟KISS原则并非一回事儿。KISS原则讲的是“如何做”的问题（尽量保持简单），而YAGNI原则说的是“要不要做”的问题（当前不需要的就不要做）。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们现在来总结回顾一下，你需要掌握的重点内容。</p><p>KISS原则是保持代码可读和可维护的重要手段。KISS原则中的“简单”并不是以代码行数来考量的。代码行数越少并不代表代码越简单，我们还要考虑逻辑复杂度、实现难度、代码的可读性等。而且，本身就复杂的问题，用复杂的方法解决，并不违背KISS原则。除此之外，同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。</p><p>对于如何写出满足KISS原则的代码，我还总结了下面几条指导原则：</p><ul>\n<li>不要使用同事可能不懂的技术来实现代码；</li>\n<li>不要重复造轮子，要善于使用已经有的工具类库；</li>\n<li>不要过度优化。</li>\n</ul><h2>课堂讨论</h2><p>你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？</p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":162849,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1576621689,"is_pvip":true,"discussion_count":17,"race_medal":0,"score":"1307246679673","product_id":100039001,"comment_content":"很好奇这三个方法运行效率的高低。测了一下争哥给的代码的执行效率，结果正如争哥文章说，第三个是最快的。<br>方法一（正则）&lt; 方法二 &lt; 方法三<br><br>正则就真的这么不堪么？效率如此之低？其实不然。<br><br>Java中正则的最佳实践是：<br>用于校验和匹配的正则表达式使用时需要预先compile，在类中写做静态变量（经常会重用），这样可以提高效率。Pattern.compile(IP_REGEXP)<br><br>优化正则后的效率如何呢？<br>方法一（正则）&lt; 方法二 &lt; 方法一（正则改进后）&lt; 方法三<br><br>测试参数设置：每个方法执行100万次。<br>实验结果：<br>方法一：2.057s<br>方法一优化：0.296s 提前编译正则<br>方法二：0.622s<br>方法三：0.019s<br>有兴趣的小伙伴看看代码，欢迎一起讨论！https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;blob&#47;master&#47;designpattern&#47;u20&#47;TestPerformance.java<br><br>参考：<br>https:&#47;&#47;stackoverflow.com&#47;questions&#47;1720191&#47;java-util-regex-importance-of-pattern-compile","like_count":305,"discussions":[{"author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90786,"discussion_content":"小意见：这个性能测试的结果怕是不够精确。\n\n源码用的是 System.currentTimeMillis()(https://github.com/gdhucoder/Algorithms4/blob/91be7c63fcb0c0ccb917017bb77ae15c69031050/Ch_1_4/_Stopwatch.java#L16)，但是 currentTimeMillis 会有 15ms 左右的误差。https://stackoverflow.com/a/180179，参见第一条评论。\n\n一般来说，基于 JMH 的测试结果，才会被大家认可。\n","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1576778513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90812,"discussion_content":"棒！多谢指出！我看一下JMH","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576797156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":90812,"extra":""},{"author":{"id":1137481,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5b/49/ab0aa354.jpg","nickname":"TengYeh","note":"","ucode":"03D86E198BE8E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281331,"discussion_content":"感谢，认识了JMH","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591712836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":281331,"extra":""},{"author":{"id":1333040,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGXndj5N66z9fEbAetic0c0apELF9Xyj2cEFbuVeUhXW7iazxDbF3iaKq2xVorVN1swMfIVHne3tURA/132","nickname":"华夏明天","note":"","ucode":"813671834896E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406373,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634742803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90786,"ip_address":""},"score":406373,"extra":""}]},{"author":{"id":1533352,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","nickname":"Kang","note":"","ucode":"6FD3642D6455AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305423,"discussion_content":"正则用起来确实很有难度，之前因为一个正则表达式贪婪回溯导致cpu100%，现在挺惧怕开发人员写正则的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1599919010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303585,"discussion_content":"正则不是说它不好， 他的匹配是可以优化， 但是说真的，在公司里面 大部分人知道正则这么个玩意，但是 一堆正则摆在那不加注释，读起来真的费劲， 也非常没必要","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599307449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347955,"avatar":"https://static001.geekbang.org/account/avatar/00/14/91/73/c50fb3e8.jpg","nickname":"Jawn Weak","note":"","ucode":"15E4117A0C775D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104454,"discussion_content":"每篇都在看你的评论和你的github, 感谢","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1577435399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1347955,"avatar":"https://static001.geekbang.org/account/avatar/00/14/91/73/c50fb3e8.jpg","nickname":"Jawn Weak","note":"","ucode":"15E4117A0C775D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104953,"discussion_content":"受宠若惊，一起加油💪！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577455460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":104454,"ip_address":""},"score":104953,"extra":""}]},{"author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204360,"discussion_content":"大佬的专研精神确实值得学习，这个Pattern的作用以前真没注意过","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584160900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204458,"discussion_content":"show me the code😄","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584175448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204360,"ip_address":""},"score":204458,"extra":""}]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376369,"discussion_content":"正则怎么说呢。站在个人开发的立场是没错的，在整个软件设计那就存在一定问题，还是结合实际开发做取舍，没有对错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622098296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240510,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UXCLpCDP4o2LFpLIrEup2arUOHzwhPY3X8nOoNSRwS6NgNiaQEduN8exnEDicc8goGCARIthOzwEpGATpiadzv3oQ/132","nickname":"formain","note":"","ucode":"D0B7816D6A40E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88420,"discussion_content":"知行合一，赞👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576714251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1607649,"avatar":"https://static001.geekbang.org/account/avatar/00/18/87/e1/7620e1b9.jpg","nickname":"小小光头","note":"","ucode":"D897582E93A6AA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87559,"discussion_content":"能和这样的大神一起学习真是太好辣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576673309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1607649,"avatar":"https://static001.geekbang.org/account/avatar/00/18/87/e1/7620e1b9.jpg","nickname":"小小光头","note":"","ucode":"D897582E93A6AA","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":87769,"discussion_content":"谬赞啦！我不是大神，但确实很辣🤩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576678526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":87559,"ip_address":""},"score":87769,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86927,"discussion_content":"正则是个好选择，主要是需要掌握正则对有些同学来说有一定的难度，所以呢，就针对“不要使用同事可能不懂的技术来实现代码”这个指导原则来看，正则还是需要斟酌下。\n\n但是，我们还是可以去验证和学会，比如你去研究的效率，就很赞呀，嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576632759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":86971,"discussion_content":"是的，正则掌握起来的确有点难度。尤其是一些写的很weird的正则，根本就看不懂😂。我记得有些常用的校验应该是有写好校验库可以直接使用。　","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576634911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86927,"ip_address":""},"score":86971,"extra":""}]}]},{"had_liked":false,"id":162852,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1576624711,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"903519756871","product_id":100039001,"comment_content":"开发中的重复造轮子，这东西怎么说呢。我认为这句话是对公司来说的，但是对自己来说，重复造轮子是有必要的。就好比之前的数据结构和算法，那也是所有轮子都有啊，为什么还要自己写响应代码。这个问题在另一个专栏都说烂了，这里也不再赘述了。<br><br>光说不练假把式，轮子用不用的好，自己了解的深入才知道。我们读书的时候，用数学定理去解题，也是在一些已知条件下才能用这个定理。不能上来就套定理，而是要分析是否满足使用情况。只有吃透定义和原理，才能更好的使用轮子。<br><br>开发中也一样，我们要排查各种各样的问题，如果轮子内部出了问题，对轮子原理实现都不了解的，怎么排查问题。怎么知道用那种轮子是最好的呢。而且还会存在改造轮子的情况，轮子不满足我们特定的需求，那也是吃透了才能改的动。<br><br>总之，轮子这东西，对公司来说，不要重复，对自己来说，要多去理解，多动手。总不希望自己就是个调包侠吧","like_count":211,"discussions":[{"author":{"id":1222578,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a7/b2/274a4192.jpg","nickname":"漂泊的小飘","note":"","ucode":"25C0CA4887D8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236210,"discussion_content":"个人认为自己写了练手 放到自己的开源项目里面。重复的轮子不要直接提到公司项目的代码库比较好。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1587082556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1773278,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/0e/de/58e87ee4.jpg","nickname":"德鲁大叔","note":"","ucode":"DEF7B044BB756A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340421,"discussion_content":"我们不造轮子，但要懂造轮子的原理，必要时可以自己造","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609999234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1466995,"avatar":"https://static001.geekbang.org/account/avatar/00/16/62/73/a471b058.jpg","nickname":"刘博","note":"","ucode":"B7707E935533C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331924,"discussion_content":"只能说看问题的角度不一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607006199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287578,"discussion_content":"API调用师，哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593485244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380085,"discussion_content":"在完成工作的时候一定不要忘记自我提升。顶。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624335495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124989,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/7d/6fa73e96.jpg","nickname":"cheppin","note":"","ucode":"2111C9C5FB6636","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355839,"discussion_content":"造轮子的目地是了解轮子，更好使用轮子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615478860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1059944,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","nickname":"天敌","note":"","ucode":"CD29A622197197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300639,"discussion_content":"个人认为有时间并且希望提升自己可以自己造轮子试试，没有时间调调API不香吗。而且各个轮子的实现难度也很有差异=。=","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598198850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289629,"discussion_content":"造轮子是个人修养，如果有一天轮子无法满足使用场景，可不是要顶上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594168699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277663,"discussion_content":"调包侠。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591088509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91011,"discussion_content":"言之有理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576805732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162923,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1576631427,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"220619963523","product_id":100039001,"comment_content":"设计模式_19<br>今天的内容有一些哲学味道，让我联想到奥卡姆剃刀原理：<br>如无必要，勿增实体。<br><br>用同事不懂的技术，增加了整个团队的理解成本；重复造轮子和过度优化，大多数情况下带来的便利小于增加的成本；<br>不要写炫技的代码，就像杜峰(CBA广东队教练)说的：“如果没有目的，就不要运球。(因为运球就可能丢球)”，降低出错的概率是一个数学问题，它能够真实得提高软件质量。<br><br>回到作业，同上：<br>只有必须造轮子时，才要造轮子。<br>那什么又是必须呢？<br>- Vim如果不用KMP，恐怕就没有人用了。<br>- MySql的性能(即将)已经不能满足阿里的业务量<br>- 微信作为国民应用，需要解决各种弱网络下尽可能收发消息。<br>...","like_count":52,"discussions":[{"author":{"id":1732780,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","nickname":"面向百度编程","note":"","ucode":"8FE04A019D71D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218244,"discussion_content":"所有知识到最后都是哲学问题么","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585636345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205586,"discussion_content":"如果没有目的，就不要运球。赞","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584324018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123103,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/1f/6452b2e8.jpg","nickname":"刘清斌","note":"","ucode":"775B053AF87B53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87602,"discussion_content":"奥卡姆剃刀原则，简单就是最有效","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576674742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238221,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","nickname":"Rain","note":"","ucode":"6A270D922A3B9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93262,"discussion_content":"赞一下杜锋那段","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576917470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162903,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576630217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"126130681801","product_id":100039001,"comment_content":"你怎么看待在开发中重复造轮子这件事情？<br>轮子:供上层业务应用使用的基础组件.<br>造轮子:设计并实现基础组件.<br>重复造轮子:重新设计实现一套新的组件.<br>开发中重复造轮子:<br>对于个人可以有深度度地提升对业务与技术认知的理解,还可以提升设计与动手能力,由于掌握了更多细节的知识,以后对于这类问题的排查定位及处理是有益处的.<br>对于技术团队,重复造出的轮子多了日后就需要有更多的人手和精力维护各个轮子,使轮子的维护成本变高;在使用方面,团队的每个成员为了能够正确的使用轮子就需要花费精力去熟悉各个轮子的特征.<br>什么时候要重复造轮子？<br>新的业务场景中原来的轮子不再合用,并且改造的成本高于重新建造的成本.比如原有业务量不大对于性能要求一般时,旧轮子足够满足;但随着业务的迅猛增长,对于性能提出明确苛刻的要求,就可以考虑重新建造新轮子了.<br>什么时候应该使用现成的工具类库、开源框架？<br>业务发展的初中期阶段时应该使用.这个阶段业务需求一般比较通用且对性能要求也不高,这时的业务与技术的特点就是要快,快速响应业务占领市场.<br>但发展到一定规模,性能成为了制约业务发展的瓶颈,拿来主义已经不能满足业务的更高要求了,就必须要动手建造适合自身业务需求的特定轮子.","like_count":29},{"had_liked":false,"id":163224,"user_name":"小毅","can_delete":false,"product_type":"c1","uid":1016799,"ip_address":"","ucode":"5651C740D68038","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/hg9Tsg2iaBeG6Q5mxiczjw1ph0OvhKziblEIiaOxg4gwQ0Dgia7Fw7pDQ0mM8AL5SJAm2Yavk1RmBJrFd9jKPBQRkOw/132","comment_is_top":false,"comment_ctime":1576672853,"is_pvip":false,"replies":[{"id":"62269","content":"嗯嗯 我的意思不能为了用新技术而引入新技术 不过也没那么绝对 设计问题本来就没有绝对的对重庆更多的是弄明白道理之后 根据实际场景自己去权衡","user_name":"作者回复","comment_id":163224,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797331,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"108950855253","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术来实现代码”这一条我觉得是可以值得商榷的~ 比如在项目中引入新技术就可能会违反这一条，我觉得关键点在于这个新技术是否值得引入？新技术是否可以在团队中得到推广？ <br><br>有时候，在code review看到不理解的新技术时，其实刚好也是可以触发讨论和学习，如果只是单纯的不去使用，很容易造成整个技术团队停滞不前。","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478304,"discussion_content":"嗯嗯 我的意思不能为了用新技术而引入新技术 不过也没那么绝对 设计问题本来就没有绝对的对重庆更多的是弄明白道理之后 根据实际场景自己去权衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366355,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hjusice0zQC87lFvFOZmThoQhSBbFSouafmTIvaCUEV7EPcoxJeic6jfohQ668ricDspE4F8hHmORWhAsle5jbCw/132","nickname":"学习学习再学习","note":"","ucode":"D72EE19D148B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572019,"discussion_content":"我认为也即是，不要炫技，单纯为了用新技术而用新技术。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652544490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2706250,"avatar":"https://static001.geekbang.org/account/avatar/00/29/4b/4a/31e564f9.jpg","nickname":"袁志林 上午专注工作不微信","note":"","ucode":"E7534D13A40B8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555963,"discussion_content":"我觉得，不要引入偏门或者即将落伍的技术。如果基础技术，或者更好的技术 值得尝试。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647145097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2789067,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/8e/cb/1efcaf20.jpg","nickname":"Justway","note":"","ucode":"75966B5533C872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585205,"discussion_content":"应该是用之前要和团队沟通好，我要用XXX新技术了，大家都同意之后再使用。不要自己默默就用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661395447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176036,"user_name":"程序袁帅","can_delete":false,"product_type":"c1","uid":1017181,"ip_address":"","ucode":"C281CA64EC91A7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/5d/ec94b66d.jpg","comment_is_top":false,"comment_ctime":1580916539,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"91775229755","product_id":100039001,"comment_content":"可能大家会说KISS、YAGNI这些原则听起来容易，做起来难。其实我认为不是做起来难，而是难在为什么要做和为什么不做。回到写代码这份职业来说，我觉出三个不同的问题：<br>1. 你为什么要写可用代码代码？ -- 赢得公司的信任，让自己能够活下来<br>2. 你为什么要写简洁可用的代码？   --  解放自己的生产力，创造更多价值，升职加薪<br>3. 你为什么要写简洁可用，并影响其他人？ -- 赢得别人尊重，获得职业成就感<br><br>我觉得程序员首先要思考上面三个事情为什么要做，而且要回答上这些问题，需要自己持续精进，比如提升编码Sense、设计思维、提升系统思考能力。<br><br><br>在探索上面三个问题的道路上，很多开发人员可能有如下内心小九九：<br><br>1. “我要用炫酷的方式Show技能。看，正则，你看得懂吗，哈哈。小样”<br>2. “我要用最少的代码写出这个而功能。看，我的代码就是比你少”<br>3. “我要用极致的性能来写这个功能。来，测一测，谁的用时最短，我开始用了快速排序法的”<br>4. “我要用上5个设计模式。你瞧瞧，这里有5个设计模式的精髓，健壮无比的代码”<br>5. ....<br><br><br>以上这些内心小九九是我们要去尽量克制的，尽量少做、甚至不做，而为什么不做这些事情，去思考这个问题的答案更重要。<br><br><br>道理可能都懂，缺的是刻意练习，推荐一些实操落的方法论和实践：<br>1. 简单设计（4原则和优先级）<br>2. 测试驱动开发（Tasking + TDD）<br>3. 重构（作者后面会提到）","like_count":21,"discussions":[{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572136,"discussion_content":"深有体会。想起当初只工作一年多的自己，就特别喜欢套各种设计模式，写各种性能高的算法。甚至舍去了很多代码可读性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652617512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393162,"discussion_content":"赞👍 做减法比做加法更难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631273046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2096765,"avatar":"","nickname":"Geek_cde7db","note":"","ucode":"D8A7F8EA700009","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296493,"discussion_content":"如果领导说给它弄复杂点，好让需求方加钱，你怎么办嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596554437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1017181,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/5d/ec94b66d.jpg","nickname":"程序袁帅","note":"","ucode":"C281CA64EC91A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2096765,"avatar":"","nickname":"Geek_cde7db","note":"","ucode":"D8A7F8EA700009","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317511,"discussion_content":"怼回去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603554523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296493,"ip_address":""},"score":317511,"extra":""}]}]},{"had_liked":false,"id":162961,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1576635226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61706177370","product_id":100039001,"comment_content":"一.什么时候要重复造轮子？<br>1. 想学习轮子原理(有轮子但是不意味着你不要了解其原理)<br>2. 现有轮子不满足性能需求(轮子一般会考虑大而全的容错处理和前置判断，这些对性能都有损耗)<br>3. 小而简的场景(比如设计一个sdk,最好不宜过大，里面轮子太多不易三方集成)<br>4.定制化需求<br><br>二.什么时候应该使用现成的工具类库、开源框架？<br>1.第一条中提到的反面情况<br>2. 敏捷开发，快速迭代，需求急的场景<br>3. 轮子比自己写的好，BUG少，设计好<br>4. KISS原则","like_count":14},{"had_liked":false,"id":162910,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576630534,"is_pvip":false,"replies":[{"id":"62277","content":"你说的没错 要有大牛 不然code review就流于形式 大眼瞪小眼","user_name":"作者回复","comment_id":162910,"uid":"1190123","ip_address":"","utype":1,"ctime":1576802643,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"61706172678","product_id":100039001,"comment_content":"提个疑问:<br>文中&quot;所以，评判代码是否简单，还有一个很有效的间接方法，那就是 code review。&quot;,这里的code review有个前提该是团队成员的技术要有一定的水平,如果全是些初级人员,不按照面条式写代码就看起来费劲,这种代码评审就没意义了,所以前提是评审必须要有一定的内功修为.","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478175,"discussion_content":"你说的没错 要有大牛 不然code review就流于形式 大眼瞪小眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576802643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247922,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599918896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44549591856","product_id":100039001,"comment_content":"曾经有个外包同学，为了体现自己的技术能力，所有的数学计算都是写的位运算，气的我把血吐了他一脸，让他改！！！","like_count":10,"discussions":[{"author":{"id":2736925,"avatar":"","nickname":"Geek_fa0102","note":"","ucode":"55A578CB6F0E85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388899,"discussion_content":"记着看医生,吐血可能不是好现象","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629032429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163400,"user_name":"拖鞋党副长","can_delete":false,"product_type":"c1","uid":1404098,"ip_address":"","ucode":"B569F22636F975","user_header":"https://static001.geekbang.org/account/avatar/00/15/6c/c2/5a8b7468.jpg","comment_is_top":false,"comment_ctime":1576717404,"is_pvip":false,"replies":[{"id":"62265","content":"比如一些函数式编程语法 有人就不了解","user_name":"作者回复","comment_id":163400,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796972,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"35936455772","product_id":100039001,"comment_content":"老师，以java为例，什么样的写法可以被称为不建议使用的过于高级的语法呢","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478381,"discussion_content":"比如一些函数式编程语法 有人就不了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336748,"discussion_content":"新技术的出现，是为了淘汰不学习的人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608692051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572137,"discussion_content":"我感觉现在很多3年之内的开发都喜欢使用函数式编程。说实话，自己不常用函数式编程的话，真的看得不是很懂。可读性真不算高。如果只是使用简单的函数式编程：filter，map，forEach等这些还好，复杂函数真的不好看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652617650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585891,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/e3/074a1ea8.jpg","nickname":"。。。。。。","note":"","ucode":"8A7A8F25CB3F21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381185,"discussion_content":"那函数式编程出现的意义是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624942851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1301286,"avatar":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","nickname":"靠人品去赢","note":"","ucode":"7A20F9EBE847E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320193,"discussion_content":"函数式编程，很多不习惯行为作为参数的同学，在面对一些不熟悉的写法，真的不如值作为参数，一行一行的容易理解，没错说的就是我。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604287858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351075,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a3/79fc9017.jpg","nickname":"minsky","note":"","ucode":"7296ECA064E89B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245638,"discussion_content":"个人就经历过一个月内线上出现好几次莫名其妙的BUG，究其原因就是有同事用到了自己都不了解的技术，尤其是lambda表达式。调用API不说要把api的源码看了，至少API的入参返参相关的描述和特殊情况要梳理出来吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587689981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241993,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1597555011,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23072391491","product_id":100039001,"comment_content":"重复造轮子是加深理解的最好方式","like_count":5},{"had_liked":false,"id":163375,"user_name":"盒子","can_delete":false,"product_type":"c1","uid":1188891,"ip_address":"","ucode":"2A95F1121109B1","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/1b/7aa4d93d.jpg","comment_is_top":false,"comment_ctime":1576715287,"is_pvip":false,"replies":[{"id":"62267","content":"应该暂时放弃 等团队慢慢学习接受","user_name":"作者回复","comment_id":163375,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797136,"user_name_real":"王争"}],"discussion_count":9,"race_medal":0,"score":"23051551767","product_id":100039001,"comment_content":"争哥好，想请问一个问题，文中说到不要写同事可能不懂的技术实现，这该如何权衡呢；<br>对于 Java 8 的 lambda 表达式，我认为这样的代码会更为直观；可是由于同事都习惯使用存储过程，Java 7 的语法糖；<br><br>是否因为团队大部分人都不使用 lambda，就应该在项目中放弃使用呢？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478370,"discussion_content":"应该暂时放弃 等团队慢慢学习接受","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239171,"discussion_content":"其实团队是个伪命题，大多数情况是一个人杀出一条血路，其他人跟着你的脚步走。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1587280938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128423,"discussion_content":"这点不同意争哥的说法！好的生产力一定要上！😄","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1578638403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1097416,"avatar":"https://static001.geekbang.org/account/avatar/00/10/be/c8/7c5f324f.jpg","nickname":"港岛妹夫","note":"","ucode":"9F6AAA29B60D8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282733,"discussion_content":"同意. 而且这东西没有那么难. 周末抽个一天,使用上就差不多了. 我原来一直都是Java7, 换了新公司用Java8一天上手. 上手了, 后面才能体会到精髓, 新的语法糖的好处, 新的写代码思路.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592059947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128423,"ip_address":""},"score":282733,"extra":""}]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138049,"discussion_content":"不同意，不能等。你可以做技术分享和布道，主动push新技术的落地","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579223086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216284,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","nickname":"皮卡皮卡","note":"","ucode":"D440EEC7301C76","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88980,"discussion_content":"lambda语法其实没有那么难，可读性反而会更好。这样的情况往往可以推广开","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576744100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","nickname":"柴柴777","note":"","ucode":"5208B935ECB6F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119031,"discussion_content":"我觉得应该推广,比如我们现在的代码里用kotlin,我开始我也不会硬着头皮看一段时间现在大概基础的部分,基础的业务用kotlin写也没什么问题了,高阶语法就慢慢去学习去用就好了,这种促进学习的推广起来应该是好事","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578210393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336832,"discussion_content":"lambda 用顺手了反而以前的写法有点看不下去了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608711942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277665,"discussion_content":"首先jdk要先上，固守某个jdk，其他语法糖就用不上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591089199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296152,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622778417,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"18802647601","product_id":100039001,"comment_content":"我可以不造，但是不能不会。","like_count":4},{"had_liked":false,"id":163378,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1576715393,"is_pvip":false,"replies":[{"id":"62266","content":"当然不是 简单的正则表达式 大部分人都能看懂 就可以用 别整那种极端难看懂的就行 凡事都有个度 合理把握","user_name":"作者回复","comment_id":163378,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797085,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18756584577","product_id":100039001,"comment_content":"那请问像正则表达式这样的东西是不是就没有用武之地？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478372,"discussion_content":"当然不是 简单的正则表达式 大部分人都能看懂 就可以用 别整那种极端难看懂的就行 凡事都有个度 合理把握","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162894,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1576629519,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18756498703","product_id":100039001,"comment_content":"很早就知道 kiss 原则了，以前的理解是代码行数少，逻辑简单，不要过度设计这样就符合 kiss 原则。虽然知道这个原则，但是却没有好好在实践中注意到，导致写的代码有时候晦涩难懂，有时候层层调用，跟踪起来很繁琐。看完今天的文章，理解更深了，代码不仅是给自己看的，也是给同事看的，并且尽量不自己造轮子，使用大家普遍知道的技术或方法会比炫技好很多。<br>至于另一个原则，你不需要它这个实际上做的还是不错的。","like_count":4,"discussions":[{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285351,"discussion_content":"好的酒神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592813687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196405,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1585278685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470180573","product_id":100039001,"comment_content":"1、你怎么看待在开发中重复造轮子这件事情？<br>答：公司其实不会重复造轮子的，但是某些组件还是会自己定制的，主要考虑的是维护性。但是开源的框架还是可以看看和学习一下优秀的设计。如果什么都引入开源框架，万一有人不懂这个框架，维护起来就很困难了。通过自己定制一些框架，企业还可以培养一批优秀的人才。<br>2、什么时候要重复造轮子？<br>有特殊的应用场景的时候，应该考虑重复造轮子。这个轮子可大可小。也可以说是自己某个模块抽出来的工具类之类的。有时候造一些小轮子是为了避免引入更多的依赖框架。<br>3、什么时候应该使用现成的工具类库、开源框架？<br>通用的场景就应该使用成熟的框架和工具类。比如，做web开发，spring或spring boot肯定会用的，自己造这个轮子就太浪费时间和人力了。还有就是看企业规模，小公司没能力还是用成熟的框架更快的开发吧。毕竟生存下去才是第一位的。","like_count":3},{"had_liked":false,"id":168022,"user_name":"无所从来","can_delete":false,"product_type":"c1","uid":1325996,"ip_address":"","ucode":"E7AD394BC16A73","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/ac/40807e85.jpg","comment_is_top":false,"comment_ctime":1577978785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462880673","product_id":100039001,"comment_content":"KISS用于设计之初的理念，是规划；YAGNI用于设计之后的优化，是减法。","like_count":3},{"had_liked":false,"id":164113,"user_name":"看山","can_delete":false,"product_type":"c1","uid":1014260,"ip_address":"","ucode":"F030DD58D0BDC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/f4/d85e7e58.jpg","comment_is_top":false,"comment_ctime":1576886787,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14461788675","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。”<br>针对这条建议，不是很赞同。正则表达式是每个开发应该掌握的，对于初级来说比较有难度，但这种好用的就该主动去学；在jdk8刚出来的时候，lambda表达式是高级用法，到这个语法在很多其他语言中已经成熟，那就该在编码过程中实践，否则就会被甩在车轮后面。<br>我认为我们要保持代码的简洁高效、通俗易懂，但也要充分利用语言特性。","like_count":3,"discussions":[{"author":{"id":2418674,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e7/f2/9883115a.jpg","nickname":"魅影","note":"","ucode":"6CAA41A86C137E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343595,"discussion_content":"请问lambda要怎么调试代码呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611106772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1014260,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/79/f4/d85e7e58.jpg","nickname":"看山","note":"","ucode":"F030DD58D0BDC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2418674,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e7/f2/9883115a.jpg","nickname":"魅影","note":"","ucode":"6CAA41A86C137E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343607,"discussion_content":"断点不香吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611110243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":343595,"ip_address":""},"score":343607,"extra":""}]},{"author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300978,"discussion_content":"有道理！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598351442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163912,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1576825120,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14461727008","product_id":100039001,"comment_content":"哈哈，联想到英雄联盟这个游戏，kiss就像盖伦的大宝剑，专制一切花里胡哨，用最简单的操作解决问题，而与之相反就是就是花里胡哨，一顿乱秀猛如虎，一看战绩0-5","like_count":3,"discussions":[{"author":{"id":1253530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","nickname":"八百","note":"","ucode":"79F1F79ADF5A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271902,"discussion_content":"大宝剑可以的，打不过就跑，简单明了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590215657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163506,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1576734550,"is_pvip":false,"replies":[{"id":"62263","content":"是的 这是重复造轮子吗一个比较重要的理由","user_name":"作者回复","comment_id":163506,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796770,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"14461636438","product_id":100039001,"comment_content":"打卡～<br>我觉得做项目中是不需要去重复造轮子的，但如果一个轮子特别大，但我只需要这个轮子很小的一部分内容，那是不是考虑借鉴它的思想去造个轮子呢？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478422,"discussion_content":"是的 这是重复造轮子吗一个比较重要的理由","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102420,"discussion_content":"老师 这个回复 有趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577345104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162913,"user_name":"ca01ei","can_delete":false,"product_type":"c1","uid":1001944,"ip_address":"","ucode":"5319718B43FE18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/d8/71860550.jpg","comment_is_top":false,"comment_ctime":1576630843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14461532731","product_id":100039001,"comment_content":"要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用0.9.6版的Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼）。￼<br>——Tim Peters 传奇的核心开发者，“Python之禅”作者","like_count":3},{"had_liked":false,"id":162833,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1576599395,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14461501283","product_id":100039001,"comment_content":"我觉得如果开源类库完全能满足需求的话，那完全没必要造轮子，如果对性能有要求，比如类库太复杂，想要简单高效的，那可以造个轮子，比如我认为shiro也是spring security的轮子，他简化了很多东西，小巧灵活。还有就是觉得类库能满足需求但是相对于当前需求来讲不够可扩展，那也可以采取类库思想造一个全新的轮子来用。","like_count":3,"discussions":[{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86816,"discussion_content":"什么时候应该使用现成的工具类库、开源框架？\n\n一.什么时候要重复造轮子？\n1. 想学习轮子原理(有轮子但是不意味着你不要了解其原理)\n2. 现有轮子不满足性能需求(轮子一般会考虑大而全的容错处理和前置判断，这些对性能都有损耗)\n3. 小而简的场景(比如设计一个sdk,最好不宜过大，里面轮子太多不易三方集成)\n4.定制化需求\n\n二.什么时候应该使用现成的工具类库、开源框架？\n1.第一条中提到的反面情况\n2. 敏捷开发，快速迭代，需求急的场景\n3. 轮子比自己写的好，BUG少，设计好\n4. KISS原则\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576627925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87470,"discussion_content":"思路清晰，比我总结的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576670023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86816,"ip_address":""},"score":87470,"extra":""}]},{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87740,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576678090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162881,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1576628415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166563007","product_id":100039001,"comment_content":"对工作上重复造轮子，没有必要，因为讲究效率问题，别人不会管你实现的功能是复制粘贴的，还是自己实现的，能正常使用就ok，对于自己来说也没必要盲目造轮子，不要造大轮子，除非你觉得你造的轮子可以碾压现有的，造一些小轮子，使用别的轮子的思想和设计还是有些用处的。","like_count":2},{"had_liked":false,"id":162855,"user_name":"Boogie 捷","can_delete":false,"product_type":"c1","uid":1541552,"ip_address":"","ucode":"9F54EF69CC0106","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/b0/496ae224.jpg","comment_is_top":false,"comment_ctime":1576625251,"is_pvip":false,"replies":[{"id":"62280","content":"简单的正则表达式可以用的 不要太极端就好","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576803265,"ip_address":"","comment_id":162855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166559843","product_id":100039001,"comment_content":"想请问一下老师对于使用正则匹配的看法，因为在平时的工作中还是会时不时看见，而且感觉确实可以省掉一些代码。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478166,"discussion_content":"简单的正则表达式可以用的 不要太极端就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576803265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291969,"user_name":"吕成 Zero","can_delete":false,"product_type":"c1","uid":2410746,"ip_address":"","ucode":"5665769CC41329","user_header":"https://static001.geekbang.org/account/avatar/00/24/c8/fa/baf9847c.jpg","comment_is_top":false,"comment_ctime":1620629402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915596698","product_id":100039001,"comment_content":"如果有人重复造轮子，我觉得有两种可能：<br>1. 重复造轮子的人不知道已经有轮子了，他可能对当前正在开发的环境或项目不够理解。<br>2.重复造轮子的人知道已经有轮子了，但是他发现当前的轮子不好用，所以想重新造一个自己认为更好用的轮子。<br>当发现已经存在的轮子不满足某些设计原则（如单一职责原则、KISS原则），或存在性能瓶颈时，可以重新造一个轮子用于替代。<br>","like_count":1},{"had_liked":false,"id":253096,"user_name":"Ryn","can_delete":false,"product_type":"c1","uid":1111903,"ip_address":"","ucode":"C81A18608BB69F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/5f/e4d58f7b.jpg","comment_is_top":false,"comment_ctime":1602596607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897563903","product_id":100039001,"comment_content":"和简单设计四原则有异曲同工之效，简单二字的关键点要看逻辑的复杂性，代码可读性以及实现的难易程度来定，对于不同的人，简单的定位也不一样。另一方面，不要过度设计，诸如在立项开始就引一个大而全的库，反而没什么必要，但也不是完全不考虑，可以对即将发生的需求有一定的预估性，留好扩展点","like_count":1},{"had_liked":false,"id":241357,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1597278325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892245621","product_id":100039001,"comment_content":"造轮子大多数情况是认为lib比较臃肿，使用不方便，或者是想一展所长，但是造轮子的代价是bug率比较高，需要实战中不停的打磨才能成型，大家其实都有造轮子的心 毕竟想通过实践验证自己的成果，但是使用上还需谨慎","like_count":1},{"had_liked":false,"id":163807,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1576805215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871772511","product_id":100039001,"comment_content":"Ken Thompson :拿不准，用穷举","like_count":1},{"had_liked":false,"id":359269,"user_name":"Geek_dc3cf1","can_delete":false,"product_type":"c1","uid":3188383,"ip_address":"北京","ucode":"1E8299B55535C1","user_header":"","comment_is_top":false,"comment_ctime":1665386921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665386921","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术 ”：同事不懂不是因为她们菜吗","like_count":0},{"had_liked":false,"id":356058,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"北京","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1661940046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661940046","product_id":100039001,"comment_content":"kiss：保持简单<br>YAGNI：不要过度设计","like_count":0},{"had_liked":false,"id":353195,"user_name":"王政","can_delete":false,"product_type":"c1","uid":2297381,"ip_address":"湖南","ucode":"A7DCA909FC8A38","user_header":"https://static001.geekbang.org/account/avatar/00/23/0e/25/aad87c07.jpg","comment_is_top":false,"comment_ctime":1659253654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659253654","product_id":100039001,"comment_content":"如果一个版本能够满足当前的逻辑需求，并且没有诸如环境、性能等方面的风险，那么所有用工作时间造轮子对团队和个人都是不可取的。我们的目标是用尽可能少的成本开发尽可能稳定的代码，这里面需要做充分的取舍，同时取舍的依据来自经验和一些内化的理论指导。<br>当一个人是基于兴趣和为了证明自己的时候而不使用现成的工具类和框架的时候，那么大概率他是做了不合时宜的事情。","like_count":0},{"had_liked":false,"id":349898,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656416033,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656416033","product_id":100039001,"comment_content":"我觉得技术这东西就是用了多了才有感悟，没有说别人不懂我就不能用","like_count":0},{"had_liked":false,"id":347536,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654136518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654136518","product_id":100039001,"comment_content":"造轮子好处<br>(1)个人深入业务和练习技术<br>(2)简历加分<br>(3)轮子需要维护, 轮子被广泛使用后, 增加个人的不可替代性<br>轮子的坏处<br>(1)不稳定,相对于公识的实现<br>(2)公司成本增加<br>(3)消耗个人时间和精力<br><br>个人感觉在开发中, 要审核技术设计, 不是所有的轮子都是可以造轮子的, 大部分轮子是不能造轮子的<br><br>所以要: 合适的场景时机 + 你觉得好处大于坏处 \\<br>才能造轮子","like_count":0},{"had_liked":false,"id":345772,"user_name":"寒光","can_delete":false,"product_type":"c1","uid":1206187,"ip_address":"","ucode":"061BE413595F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","comment_is_top":false,"comment_ctime":1652586212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652586212","product_id":100039001,"comment_content":"YAGNI，应该是这样吧？You aren&#39;t gonna need it","like_count":0},{"had_liked":false,"id":329836,"user_name":"coco","can_delete":false,"product_type":"c1","uid":1052821,"ip_address":"","ucode":"7BC3AB84E8434E","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/95/17a9a042.jpg","comment_is_top":false,"comment_ctime":1641562243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641562243","product_id":100039001,"comment_content":"根据需要开源无法满足时就自己造","like_count":0},{"had_liked":false,"id":327018,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1639841190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639841190","product_id":100039001,"comment_content":"思考题：<br>重复造轮子，就是在开发过程中不利用现有的框架、组件、函数、类来实现功能，而自己重写代码来实现相同的功能；当现有的框架或组件无法满足业务需求或者现有的轮子在某一方面表现不佳，需要做特殊的优化，这时就要重复造轮子。如果现有工具类库、开源框架基本能满足需求，且之前类似的功能一直都是用这些工具类库、开源框架实现，这种情况下可以使用现成的工具类库、开源框架","like_count":0},{"had_liked":false,"id":322978,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1637677964,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637677964","product_id":100039001,"comment_content":"满足不了业务需求的时候  要重复造轮子。尽量的还是使用开源常见的技术栈，出了问题也好找到解决办法。","like_count":0},{"had_liked":false,"id":322529,"user_name":"探雪","can_delete":false,"product_type":"c1","uid":2833619,"ip_address":"","ucode":"2332650D9C8D54","user_header":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","comment_is_top":false,"comment_ctime":1637467692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637467692","product_id":100039001,"comment_content":"* 是否要重复造轮子要看实际的业务场景<br>* 当已有的轮子性能或者适配不满足需求或当前的时候，需要重新造轮子<br>* 现成的工具类库，开源框架可以实现目前代码中需要的功能，并且性能也ok的时候，不需要重新造轮子","like_count":0},{"had_liked":false,"id":318536,"user_name":"everdmx","can_delete":false,"product_type":"c1","uid":2636498,"ip_address":"","ucode":"B4E641E8551806","user_header":"https://static001.geekbang.org/account/avatar/00/28/3a/d2/3b034726.jpg","comment_is_top":false,"comment_ctime":1635326068,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635326068","product_id":100039001,"comment_content":"首先要有造轮子的能力，其次要有不造轮子的觉悟","like_count":0},{"had_liked":false,"id":314888,"user_name":"fx","can_delete":false,"product_type":"c1","uid":2334235,"ip_address":"","ucode":"CA9066014707F3","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/1b/7abfa59f.jpg","comment_is_top":false,"comment_ctime":1633528309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633528309","product_id":100039001,"comment_content":"以学习为目的的情况下可以重复造轮子。业务开发中用现有框架与类库","like_count":0},{"had_liked":false,"id":313263,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632357714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632357714","product_id":100039001,"comment_content":"Kiss 尽量用简单的代码解决当前业余场景问题<br>Yagni 不要去做现在用不到的事情。<br>简而言之，结合业余场景，代码趋简单编写，现在没有未来可能有的场景要留扩展，但没必要有实现","like_count":0},{"had_liked":false,"id":307397,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1629082144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629082144","product_id":100039001,"comment_content":"造轮子，可以不重复造，但是得会","like_count":0},{"had_liked":false,"id":306764,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628693105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628693105","product_id":100039001,"comment_content":"你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br>答：多数的功能已经有很好的开源代码，可以借鉴过来使用。但是有时候自己有一些特殊的需求，比如对某些功能需要改动，追求特定场景的极致性能，这时候可以需要自己再修改，可能需要涉及自己写比较多的代码，但是也可以借鉴现成的开源代码","like_count":0},{"had_liked":false,"id":296369,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1622943925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622943925","product_id":100039001,"comment_content":"当现有的工具能满足你的需求的时候，就不要重复造轮子。反之，可以造轮子","like_count":0},{"had_liked":false,"id":295139,"user_name":"cosz3","can_delete":false,"product_type":"c1","uid":1218665,"ip_address":"","ucode":"B9023D4A088CF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/69/5a1c6620.jpg","comment_is_top":false,"comment_ctime":1622264126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622264126","product_id":100039001,"comment_content":"怎么样才算是重复造轮子，如果我改写了一个类中的方法，让它看起来更简单，直接一些。但是之前的的类使用的是一个比较奇怪的方式实现，这样算是在重复造轮子么？<br>如果重复造轮子和 KISS 原则有冲突，我们该如何取舍呢？","like_count":0},{"had_liked":false,"id":293226,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1621297400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621297400","product_id":100039001,"comment_content":"已经有好的轮子，尽量不造。除非轮子不满足业务要求，才需要自己来造<br>","like_count":0},{"had_liked":false,"id":285606,"user_name":"余生是你丿","can_delete":false,"product_type":"c1","uid":1671988,"ip_address":"","ucode":"A78FD91F62BFD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLPVZOVdgYW3UibldgrFZiaOxAxbAe2QuiaKICVMrjiaaSm76kH0evooDXiaNtBhLSEiaFRlHzwQZcxH8pA/132","comment_is_top":false,"comment_ctime":1616917773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616917773","product_id":100039001,"comment_content":"基于我目前所在项目的情况，我觉得是否重复造轮子的原因有两个：一是受限于自己的技术知识的广度，实现的内容可能可以通过工具类或框架可以实现，但技术本人不了解，就只能自己造轮子；二是项目开发中可复用性差，不同开发者在开发时没有可复用的思想，都是各写各的，这样就导致在相同场景，由于不同开发者实现而重复造轮子的现象。","like_count":0},{"had_liked":false,"id":285556,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1616895123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616895123","product_id":100039001,"comment_content":"尽可能去复用已有的框架，来解决自己的需求。  如果现有的框架覆盖不到你的需求，再去自己想办法实现。","like_count":0},{"had_liked":false,"id":280922,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1614484269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614484269","product_id":100039001,"comment_content":"团队成员不熟悉的技术我理解不是不要用，而是不能随便用。比如用模版渲染（smarty）的方式写前端 和 vue前后端分离，后者学习成本高，可能团队懂的人也少，但如果坚持用就会看到收效，但前提是要说服领导去推动团队去学习和使用。","like_count":0},{"had_liked":false,"id":280305,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614155905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614155905","product_id":100039001,"comment_content":"开发中重复造轮子是在所难免的，比如一个项目分多个模块，每个模块都单独写一个工具类比较好，避免过度引入依赖。<br>KISS原则：尽量简单的写代码。<br>YAGIN原则：写有用的代码。","like_count":0},{"had_liked":false,"id":279766,"user_name":"Geek_78eadb","can_delete":false,"product_type":"c1","uid":1712955,"ip_address":"","ucode":"843C6C380D28FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OYQh8KlUgMx0sZ35felqqRlboXkcOFib0qGgRHuvFCNIMzxRzxN8SjZpwtDuS0PGV0L0Pneiak7yzcd043f2efbg/132","comment_is_top":false,"comment_ctime":1613959766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613959766","product_id":100039001,"comment_content":"重复造轮子可以存在。<br>- 当已有的模块糟糕到无法重构时，我们可以重写这个模块。<br>- 当已有模块无法更改，效率无法满足需求时，也可以重写。","like_count":0},{"had_liked":false,"id":276149,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1611814179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611814179","product_id":100039001,"comment_content":"对于公司的项目来说尽量不要重复的去造轮子，因为自己写的bug确实很多，但是我们需要去读懂轮子背后的实现原理，可以快速的发现问题和解决问题，知其然知其所以突然，做到心中有数，比如我们平时在使用框架的时候，很有必要去熟悉框架的源代码，站在一个更加的高度看待问题。<br>KIss (keep it stupid and simple):<br>1、不用使用同事不懂的技术去开发，比如编写复杂的正则，读起来确实很费劲 <br>2、不要重复发明轮子，多看看有没有现成的包 <br>3、不要过度优化","like_count":0},{"had_liked":false,"id":269624,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1608718707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608718707","product_id":100039001,"comment_content":"如果面对模块是的系统性能的瓶颈，现有的工具类不能满足性能需求，就可以重复造轮子来大大提供系统性能。","like_count":0},{"had_liked":false,"id":267051,"user_name":"崔光伟","can_delete":false,"product_type":"c1","uid":1875245,"ip_address":"","ucode":"603FCACC5CFC1C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZMLfqpOHFbYF6Q31xgbKJ0FaO2ibFSqzyjV9gRlIYsnvGUcxYaG1eABJ5UupxVeda0yV0B3sBqDA/132","comment_is_top":false,"comment_ctime":1607583389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607583389","product_id":100039001,"comment_content":"KiSS原则是尽可能简单，YAGNI 原则只做当前要做的","like_count":0},{"had_liked":false,"id":260903,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1605149717,"is_pvip":false,"replies":[{"id":"96157","content":"������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701567,"ip_address":"","comment_id":260903,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605149717","product_id":100039001,"comment_content":"KISS就是杀鸡别用牛刀，<br>YAGNI就是要少而美。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509320,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122150,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","nickname":"万历十五年","note":"","ucode":"3D8CF5DF847AE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330843,"discussion_content":"抽象了😂\nKISS 代码保持简单，易于理解，设计和实现时别硬往“复杂”的模式和技术上套，这就是“杀鸡别用牛刀”；\nYAGNI 不要过度设计，在功能实现的基础上，代码“能少则少”，此为“少而美”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606721390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258079,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604287598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604287598","product_id":100039001,"comment_content":"使用已有的工具类，不要自己造轮子，实际上项目中确实会出现。甚至有的时候业务中也会有一些信息处理逻辑也是类似的，可以单独出来类似工具类一样支持类，有用到的话直接使用，这样以后业务逻辑修改也方便，不至于同样的修改，在好几处都要做。","like_count":0},{"had_liked":false,"id":256424,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603621246,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603621246","product_id":100039001,"comment_content":"肯定自己造的的轮子最‘香’，但造不造轮子看有没有需求，；用已有的轮子要理解原理，懂得使用场景以及轮子弊端，还要了解市场上更多的轮子。","like_count":0},{"had_liked":false,"id":253824,"user_name":"当你的世界里有风吹过","can_delete":false,"product_type":"c1","uid":2051946,"ip_address":"","ucode":"42712891366309","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","comment_is_top":false,"comment_ctime":1602907245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602907245","product_id":100039001,"comment_content":"是否要重复造轮子，要看此项目的紧急程度和开发功能的人员对已有的轮子的熟悉程度来决定！没有绝对的对错！如果是0到1项目，选择自己熟悉的方式。","like_count":0},{"had_liked":false,"id":250833,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1601256869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601256869","product_id":100039001,"comment_content":"造轮子的两个经典场景：复用现有工具成本大；晋级需要。","like_count":1},{"had_liked":false,"id":248773,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1600307604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600307604","product_id":100039001,"comment_content":"项目开发中因为要考虑到时间成本，因此不需要重复造轮子；但是，从个人成长角度看，业余时间专门琢磨怎么造轮子，即使是一个迷你版的轮子，也是非常有必要的。","like_count":0},{"had_liked":false,"id":247603,"user_name":"Harlan","can_delete":false,"product_type":"c1","uid":2134882,"ip_address":"","ucode":"F43595A0A00B19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","comment_is_top":false,"comment_ctime":1599754125,"is_pvip":false,"replies":[{"id":"91488","content":"这个只能意会不能言传了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1600671029,"ip_address":"","comment_id":247603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599754125","product_id":100039001,"comment_content":"KISS ：简单做   YAGNI：需要才做  <br>但大多数设计模式都是超前设计，也许项目初期根本用不到，那是否违背这两个原则，等需要用到的时候再重构？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505448,"discussion_content":"这个只能意会不能言传了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600671029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246872,"user_name":"Hua100","can_delete":false,"product_type":"c1","uid":1723325,"ip_address":"","ucode":"4E7A749C343E90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLeKVmTFdR2hQsCaNxxTK8wvnXXBayKLLoITqnbW9yjloAZWU99mOGaf1DkWqM6dol77aER9ickibA/132","comment_is_top":false,"comment_ctime":1599498083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599498083","product_id":100039001,"comment_content":"我觉得对于一个大公司而言，尤其是即将走向大公司或者有大公司格局的公司，应该造轮子，因为过度依赖其他公司，总是不好的事。尤其是根据现在的教训，一旦轮子的制造者不允许其他的公司用自己的开源库，则会措手不及。所以应该一遍用轮子，一遍造轮子，以备不测。","like_count":0},{"had_liked":false,"id":246394,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599307361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599307361","product_id":100039001,"comment_content":"说真的， 实际开发中，大部分时候都应该直接使用现成工具， 因为这些工具的稳定版本经过了大量的验证， 考虑过非常多的细节，   如果实在是因为定制化，或者处于对执行效率，和空间利用率敏感的时候， 那么不妨就自己造轮子吧， 毕竟通用的东西这时候就不满足需要了","like_count":0},{"had_liked":false,"id":246134,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599187192,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599187192","product_id":100039001,"comment_content":"1、重复造轮子，往往是因为团队内部沟通不及时造成<br>2、有定制化特殊要求，比如性能，比如数据的特征<br>3、通用的功能时，直接用现成的类库","like_count":0},{"had_liked":false,"id":245875,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599099727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599099727","product_id":100039001,"comment_content":"KISS原则，不是要一边亲嘴儿一边写代码，大多数程序员也没有这样的条件。KISS原则是“Keep It Simple and Stupid”的缩写，说人话就是不要炫技，写同事可能读不懂的代码。<br>别人不蠢，如果你总是觉得别人蠢，很大可能是因为你蠢<br>YAGNI原则是“You Ain’t Gonna Need It”的缩写，说人话就是不要过度设计，集中资源解决当前的问题。<br>YAGNI决定要不要做，KISS决定怎么做，核心思想都是为了保持代码的简洁。","like_count":0},{"had_liked":false,"id":238980,"user_name":"写代码的","can_delete":false,"product_type":"c1","uid":2085090,"ip_address":"","ucode":"F58186409A3D65","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","comment_is_top":false,"comment_ctime":1596396225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596396225","product_id":100039001,"comment_content":"我觉得主要考虑这几点吧：现有的轮子是否满足需求，现有的轮子质量如何，造出的新轮子是否会优于现有的轮子。<br>我们平常说的不要重复造轮子应该更多的指的是多人协作的实际项目，如果仅仅是为了练手自己去造一些重复的轮子，就自己用用，并不打算给别人用的那无所谓。","like_count":0},{"had_liked":false,"id":238261,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1596105008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596105008","product_id":100039001,"comment_content":"重复造轮子是不可避免的，开源框架往往大而全，有时候只需要一小部分功能却不得不引入整个框架包，这时候不如自己造轮子来得实在。","like_count":0},{"had_liked":false,"id":238007,"user_name":"阿狸爱JAVA","can_delete":false,"product_type":"c1","uid":1033566,"ip_address":"","ucode":"597971781B1500","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","comment_is_top":false,"comment_ctime":1596026016,"is_pvip":false,"replies":[{"id":"88018","content":"kmp算法，可以去看下数据结构和算法之美专栏","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1596108828,"ip_address":"","comment_id":238007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596026016","product_id":100039001,"comment_content":"@Test<br>    public void getNextsTest(){<br>        String s = &quot;helloWorld&quot;;<br>        char[] chars = s.toCharArray();<br>        int[] nexts = getNexts(chars, 10);<br>        System.out.println(nexts);<br>    }<br><br><br>    &#47;&#47; b表示模式串，m表示模式串的长度<br>    private static int[] getNexts(char[] b, int m) {<br>        int[] next = new int[m];<br>        next[0] = -1;<br>        int k = -1;<br>        for (int i = 1; i &lt; m; ++i) {<br>            while (k != -1 &amp;&amp; b[k + 1] != b[i]) {<br>                k = next[k];<br>            }<br>            if (b[k + 1] == b[i]) {<br>                ++k;<br>            }<br>            next[i] = k;<br>        }<br>        return next;<br>    }<br>这个函数的意义是啥，为啥最后输出的结果是{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502612,"discussion_content":"kmp算法，可以去看下数据结构和算法之美专栏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596108828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235009,"user_name":"whyly","can_delete":false,"product_type":"c1","uid":1798882,"ip_address":"","ucode":"D34D6B7164C982","user_header":"https://static001.geekbang.org/account/avatar/00/1b/72/e2/95b0543c.jpg","comment_is_top":false,"comment_ctime":1594868835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594868835","product_id":100039001,"comment_content":"尽量不要自己造轮子，原因如下：<br>1.自己造轮子出bug的概率高，已有轮子一般都经过了长时间的验证，可靠稳定<br>2.降低了代码的可维护性，你造的轮子，你自己维护还可以，但是同事可能不明白你的设计思想，估计很难维护你的代码<br>3.对于项目周期紧张的项目，影响项目进度<br><br>需要造轮子的情况：<br><br><br>总结：<br>其实造轮子对于我来说，主要是用于帮我理解一些基础知识和设计思想，在实际项目开发中基本不会自己造轮子。","like_count":0},{"had_liked":false,"id":232400,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1593994375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593994375","product_id":100039001,"comment_content":"我保持开放的心态，基于“如无必要，切勿造轮子”的原则；如争哥所言，只有某些场景下，对性能&#47;速度要求甚高时，此时只能通过造轮子来解决；一般情况下，借用通用的类库来实现代码；","like_count":0},{"had_liked":false,"id":230488,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1593398950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593398950","product_id":100039001,"comment_content":"当你需要了解轮子原理和优化轮子,对轮子进行增强可以考虑重复造轮子。 现成的工具类库、开源框架都是经过大家验证可以放心使用的，当我们需要这个功能 ，自己造的时候成本大，就可以用它","like_count":0},{"had_liked":false,"id":229916,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1593187150,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593187150","product_id":100039001,"comment_content":"不用重复造轮子。但是得知道造轮子的方法去，这样才能更好的使用轮子","like_count":0},{"had_liked":false,"id":224649,"user_name":"未知数据","can_delete":false,"product_type":"c1","uid":1017545,"ip_address":"","ucode":"98CB28CCD5C2F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/c9/1be91547.jpg","comment_is_top":false,"comment_ctime":1591497043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591497043","product_id":100039001,"comment_content":"三种方法中，第二种更符合KISS原则。<br><br>就像所有原则都是正确的，但都需要在具体场景下做出取舍。我倒更偏向于第一种正则表达式的写法。<br><br>1. 正则表达式作为一种更加通用的编程工具，在大部分语言中都是支持的，对正则表达式的掌握应该是基础的，即使不那么精通。所以，顾虑有其他团队成员不了解的顾虑，应该很少。<br>2. 越简单的代码越容易维护，第一种方法中最核心的就是一行正则表达式。相比其他两种方法，大多数的程序员更容易理解其中的含义。<br>3. IP地址的合法性判断，这种代码几乎是一次写成，不会更改需求的。第一种方法可读性差的原因，可能是因为正则表达式，但对于不会怎么更改的代码，我倒觉得不是问题。<br><br>总之，对于IP地址判断这个需求，个人意见是，首选第一种方法，第三种方法确实有点过于优化，第二种使用现成的工具类，适合实现更容易发生变更的需求，更容易读懂更容易维护。","like_count":0},{"had_liked":false,"id":223441,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1591089370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591089370","product_id":100039001,"comment_content":"其实老师想表达的是 很多轮子已经历经多个商业和组织验证可靠可行，所以其他个人和组织没必要再次发次发明，除非组织和个人觉得现有的轮子完全不符合公司落地","like_count":0},{"had_liked":false,"id":220381,"user_name":"晓刚学代码","can_delete":false,"product_type":"c1","uid":1024743,"ip_address":"","ucode":"1E77DB86DB82BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/e7/3d96ea93.jpg","comment_is_top":false,"comment_ctime":1590230187,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590230187","product_id":100039001,"comment_content":"如果只是把现有类库的功能拷贝一边的轮子，我觉得还是没有必要。前段时间经常犯这个问题，有现成的类库不去使用，而非要自己造轮子。好像造出来了对自己的就会有很大的提高，现在想想如果造出来的并没有什么创造性的东西，只是代码堆叠和重复，那么不如使用现成的类库。","like_count":0},{"had_liked":false,"id":217745,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1589601260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589601260","product_id":100039001,"comment_content":"kiss原则感觉就是不要把简单的问题复杂化，但是简单和复杂的评判标准是主观的，需要多在工作中磨合才能掌握好这个度。","like_count":0},{"had_liked":false,"id":203067,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1586135448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586135448","product_id":100039001,"comment_content":"需不需要重复造轮子，主要是决定于轮子的使用频次和效率要求。如果对性能要求很高或使用频次很高（通常同时满足），比如日活过亿的电商购物平台的后台，每个轮子都要不断优化。但如果开发一个仅百余用户的定制化oa系统，应该尽量用现有轮子实现敏捷开发和快速迭代。","like_count":0},{"had_liked":false,"id":202747,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586062048,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586062048","product_id":100039001,"comment_content":"关于这个章节的学习，有了一个新的感悟：凡事都要有个度。这个度，在实际开发过程中是不容易把控的，在某些条件下，是OK的，在某些条件下，又是有问题的。这样的事情，在生活中也会经常出现，有点哲学的味道。对于在开发中的话，一切设计模式、设计原则或者代码架构，都应该结合具体业务，从而选择合适的方式进行开发。合适，不是一个容易的事情，但是通过大量经验和数据的学习，是可以把控的。这个就像机器学习一样，通过大量的数据训练，从而拥有智能的思维方式。","like_count":0},{"had_liked":false,"id":202153,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1585911544,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585911544","product_id":100039001,"comment_content":"【设计模式笔记21】20200403<br>YAGNI说的是要不要做，KISS是如何做，代码要尽量简单。这两个原则在实际的开发的指导意义在于，提前思考变化点然后预留出扩展点，以不变应万变。提前设计得好处是应对短期的变化提高代码得可扩展性和可维护性。KISS原则可能更具有指导意义，小到一个方法一个类，大到一个模块一个项目要做的事情都应该尽可能简单，简单的好处是不容易出问题，出了问题也好维护。从如何写出KISS的代码来讲，有三个维度：逻辑简单、可读性、可扩展性，逻辑简单指的一个方法只做一件事，逻辑不想干的方法拆分出去。可读性和可扩展性因人而异，但是有一点可以借鉴，能快速适应变化的代码","like_count":0},{"had_liked":false,"id":201928,"user_name":"banxiaobu","can_delete":false,"product_type":"c1","uid":1922242,"ip_address":"","ucode":"0FC00E5E90ACB8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","comment_is_top":false,"comment_ctime":1585878295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585878295","product_id":100039001,"comment_content":"轮子造不造，个人感觉首要的是你想清楚为什么要造，要怎么造？如果这俩问题都没想清楚，为了造而造，除去带来的bug之外，随着时间的推移，肯定是会被遗弃","like_count":0},{"had_liked":false,"id":201345,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1585753933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585753933","product_id":100039001,"comment_content":"重复造轮子这件事情，我觉得是这样的，如果你纯粹是为了想锻炼自己，想秀一秀肌肉，那么就去造吧，比较它确实可以让你有所提高，但前提是你不是在做项目的时候去重复造轮子，否则你的PM可能会把工期的延误降罪于你，而且你的这个轮子是不是好使，还需要经过一段时间的验证，如果把你这个轮子一起上了线而发现bug，那可能还会带来不可预测的风险或经济上的损失。。。","like_count":0},{"had_liked":false,"id":200740,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585645020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585645020","product_id":100039001,"comment_content":"1.重复造轮子更有可能是没有注意到现有代码已经实现过了。2自己需要理解原理的时候，最好自己造一个，不然看半天也是不懂。3项目中用到的技术，如果有现成的框架，还是不要自己造轮子，因为自己写的出错的概率更大<br><br>kiss 原则：Keep it sample and stupid 。总之不要搞得花里胡哨，不要炫技。<br><br>YANGNI 原则：你不需要这个东西。不要过度，提前引用框架，js，样式等等。","like_count":0},{"had_liked":false,"id":198308,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585443899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585443899","product_id":100039001,"comment_content":"KISS确实不好把握。","like_count":0},{"had_liked":false,"id":195504,"user_name":"黑客时间","can_delete":false,"product_type":"c1","uid":1831324,"ip_address":"","ucode":"7E22D76EECAC4D","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f1/9c/cd12361d.jpg","comment_is_top":false,"comment_ctime":1585191802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585191802","product_id":100039001,"comment_content":"在进行软件开发的时候，大部分情况下我们都是用别人已经造好的轮子，可以很方便，快捷的完成功能项目功能开发，不用关系底层的实现。一个优秀的程序员要知其然知其所以然。假如程序出现bug，在进行排查的时候，如果不了底层的实现原理，那么很快的修复bug就会变得很难。而重复早轮子可以让我们更清楚的了解所使用的框架的底层实现原理和流程，用起来更得心应手。程序出现问题，也可以快速定位问题点","like_count":0},{"had_liked":false,"id":194987,"user_name":"unlock","can_delete":false,"product_type":"c1","uid":1335403,"ip_address":"","ucode":"9B1F899B960A20","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/6b/907a9557.jpg","comment_is_top":false,"comment_ctime":1585125508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585125508","product_id":100039001,"comment_content":"我还记得有个盆友说过：如果不重复造轮子，怎么能会造轮子。","like_count":0},{"had_liked":false,"id":194463,"user_name":"白杨","can_delete":false,"product_type":"c1","uid":1743868,"ip_address":"","ucode":"B56DD94706F80B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9b/fc/a3abbe53.jpg","comment_is_top":false,"comment_ctime":1585060721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585060721","product_id":100039001,"comment_content":"写出机器编译执行通过的代码容易，写出让人容易理解看懂的代码不容易","like_count":0},{"had_liked":false,"id":188139,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584323875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584323875","product_id":100039001,"comment_content":"如果已有的轮子hold 不住，并且是系统非常核心的东西。可以重复造轮子","like_count":0},{"had_liked":false,"id":184149,"user_name":"rxliuli","can_delete":false,"product_type":"c1","uid":1813775,"ip_address":"","ucode":"557481BFA3F7B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JicGWj4ujfKW2BibbV2BIdiaRVv1SLMCjnriaHjhiaP9Ey751wBp8rwUxJI4Y7eZZb3eHTHbyLXUa8m3a4Dy0QIANTA/132","comment_is_top":false,"comment_ctime":1583238601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583238601","product_id":100039001,"comment_content":"其实不同语言实现起来也不一定需要库，下面是 ts 版本。。。<br><br>```ts<br>function checkIpV4(str: string) {<br>  const arr = str.split(&#39;.&#39;)<br>  if (arr.length !== 4) {<br>    return false<br>  }<br>  const res = arr.some((str, i) =&gt; {<br>    if (str.length &gt; 1 &amp;&amp; str.startsWith(&#39;0&#39;)) {<br>      return true<br>    }<br>    const v = Number.parseInt(str)<br>    if (i === 0 &amp;&amp; v === 0) {<br>      return true<br>    }<br>    return isNaN(v) || v &lt; 0 || v &gt; 225<br>  })<br>  return !res<br>}<br><br>console.log(checkIpV4(&#39;127.0.0.1&#39;))<br>console.log(checkIpV4(&#39;0.0.0.1&#39;))<br>console.log(checkIpV4(&#39;abc&#39;))<br>```","like_count":0},{"had_liked":false,"id":181424,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582538316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582538316","product_id":100039001,"comment_content":"在实际开发中,我也做过一些重复造轮子的事情,有的时候是没发现得心应手的工具类,有的时候是不知道有啥工具类可以用<br>我举一个我在开发中造轮子的经历,有一个业务,需要运维人员在外部配置文件设置资源存储目录,并且支持..&#47; .&#47;这类的动态地址,原本我想着可以直接用Java提供的URL类或者File类来直接做到解析地址,但是发现Java并不支持动态地址的解析,于是进一步,我考虑使用Spring提供的Resource接口来进行获取并存储资源,发现也不能进行动态解析,于是迫不得已,写了一个动态解析的配置类,并且在需要注入的类中的构造函数注入这个配置类,完成动态解析","like_count":0},{"had_liked":false,"id":181214,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582519926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582519926","product_id":100039001,"comment_content":"是否决定造轮子，仍然要基于项目去考虑。没有一段代码是适合任何运行环境的，当项目条件变得苛刻，例如文档规定必须在20ms内完成业务，可能就需要放弃现有轮子，根据业务特定重新设计，以求达到更好的性能。<br><br>当我们需要快速实现业务，优先采取成熟的框架，随着业务发展，框架开始不能满足需求，则需要额外针对业务特点，造轮子去，优化和重构。","like_count":0},{"had_liked":false,"id":177536,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1581412425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581412425","product_id":100039001,"comment_content":"代码评审时，其实KISS原则很好判断，就是代码是在解决问题还是在炫技。KMP解决底层性能瓶颈就是在解决问题，如果是在解决输入框匹配，就是在炫技。","like_count":0},{"had_liked":false,"id":176504,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1581073616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581073616","product_id":100039001,"comment_content":"关于重复造轮子这件事，我觉得当一段逻辑或者业务趋于稳定后才能考虑讲一些逻辑抽象成轮子供以后得代码使用，一开始就想着造轮子使用，有点过度设计了，可能还会违背KISS和YAGNI原则","like_count":0},{"had_liked":false,"id":176034,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1580916087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580916087","product_id":100039001,"comment_content":"工作中对于能满足需求的轮子就直接使用不要重复造了，平常工作中尽可能的使用社区活跃，开源的，并且大部分同事都会的工具类、开源框架比较好。<br>工作外的话，毕竟你重复造任何轮子都是可以提升自己的技术，每个人的精力都是有限的，既然如此选择造自己感兴趣或者能给自己面试带来帮助的轮子最合适。","like_count":0},{"had_liked":false,"id":174931,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1440599,"ip_address":"","ucode":"15E7715ADDABE3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/57/258a7ff6.jpg","comment_is_top":false,"comment_ctime":1580464005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580464005","product_id":100039001,"comment_content":"主要看轮子是否满足当前需求吧<br>","like_count":0},{"had_liked":false,"id":172604,"user_name":"www","can_delete":false,"product_type":"c1","uid":1275203,"ip_address":"","ucode":"951B364F2CB211","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/43/c6058200.jpg","comment_is_top":false,"comment_ctime":1579231625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579231625","product_id":100039001,"comment_content":"业务的核心功能部分如果遇到了性能瓶颈可以考虑重复造轮子，定制一个适合业务的轮子","like_count":0},{"had_liked":false,"id":170581,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1578638261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578638261","product_id":100039001,"comment_content":"都说重复造轮子不好，前提是你具备这个能力～","like_count":0},{"had_liked":false,"id":170395,"user_name":"刘学习来学习","can_delete":false,"product_type":"c1","uid":1464013,"ip_address":"","ucode":"5078B1EC8D8A66","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/cd/0add8290.jpg","comment_is_top":false,"comment_ctime":1578584821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578584821","product_id":100039001,"comment_content":"留好扩展点,感觉需要经验","like_count":0},{"had_liked":false,"id":169725,"user_name":"evalcony","can_delete":false,"product_type":"c1","uid":1401098,"ip_address":"","ucode":"D8CE3E832A7A10","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/0a/1e98cc81.jpg","comment_is_top":false,"comment_ctime":1578416479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578416479","product_id":100039001,"comment_content":"KISS其实是说，Keep It Easy Understand.<br>目的不在代码简洁，而在代码容易理解。<br>当从这个角度来理解时，效率、代码长度等等，根本不构成问题。我们只需要看一个做法是否牺牲了理解性。<br>而这也是为什么不要过度设计的真实原因，因为它牺牲了理解性，让代码更复杂。","like_count":0},{"had_liked":false,"id":169108,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578275235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578275235","product_id":100039001,"comment_content":"一、如何理解KISS原则<br>1.KISS原则意思就是：尽量保持简单，简单并不是以代码行数来考量的。代码行数越少并不代表代码越简单，还要考虑逻辑复杂度、实现难度、代码的可读性等。<br>2.本身就复杂的问题用复杂的方法解决，并不违背KISS原则。比如字符串匹配是某个产品的核心功能（比如Vim、Word等文本编辑器）又或者字符串匹配算法是系统性能瓶颈的时候，我们就应该选择尽可能高效的 KMP 算法。<br>3.同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。比如在日常开发中比较小的文本字符串匹配直接调用编程语言提供的字符串匹配函数就足够了，如果非得用KMP算法就不满足KISS原则了。<br><br>二、如何写出满足KISS原则的代码？<br>1.不要使用同事可能不懂的技术来实现代码。<br>2.不要重复造轮子，要善于使用已经有的工具类库。<br>3.不要过度优化。<br>同样的代码，有人觉得简单，有人觉得不够简单，但是自己编写的代码都会觉得简单。评判代码是否简单在code review的时候，如果同事对你的代码有很多疑问，那就说明你的代码可能还不够简单，需要优化。<br><br>三、YAGNI跟KISS说的是一回事吗？<br>1.概念：不要去设计当前用不到的概念；不要去编写当前用不到的代码。核心思想就是不要做过度设计。<br>2.YAGNI原则并不是说我们就不需要考虑代码的扩展性。<br>3.KISS原则讲的是如何做的问题（尽量保持简单），而YAGNI原则说的是要不要做的问题（当前不需要的就不要做）。<br><br>四、课堂讨论<br>日常开发中要看具体的情况来决定是否重复造轮子，比如使用Integer.paser(&quot;1&quot;)就能做到转换成Integer，这时候不需要去重复造轮子操作底层字符来转换了。如果项目中有个地方性能要达到极致，已有的轮子满足不了需求，这时候就需要自己去定制轮子了。从另一方面来说轮子用的好不好，还要要看自己了解的深入程度，所以还是要多去理解底层原理的。","like_count":0},{"had_liked":false,"id":168907,"user_name":"程晓擘","can_delete":false,"product_type":"c1","uid":1328354,"ip_address":"","ucode":"96986D5AE2B96C","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","comment_is_top":false,"comment_ctime":1578213857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578213857","product_id":100039001,"comment_content":"使用有名的开源库","like_count":0},{"had_liked":false,"id":168622,"user_name":"yin","can_delete":false,"product_type":"c1","uid":1711450,"ip_address":"","ucode":"9F3D55A1D435A2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1d/5a/937f0d4c.jpg","comment_is_top":false,"comment_ctime":1578125002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578125002","product_id":100039001,"comment_content":"只有造了轮子，才能知道自己的轮子有多烂","like_count":0},{"had_liked":false,"id":167583,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1577868308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577868308","product_id":100039001,"comment_content":"很棒 简洁明了<br>","like_count":0},{"had_liked":false,"id":166394,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1577441048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577441048","product_id":100039001,"comment_content":"什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br>回复：当轮子不满足你跑的时候，就需要换轮子了。尽量使用大家都熟悉和知道的工具类库和框架。","like_count":0},{"had_liked":false,"id":165982,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1442334,"ip_address":"","ucode":"756FB230C53F9A","user_header":"https://static001.geekbang.org/account/avatar/00/16/02/1e/2816c98e.jpg","comment_is_top":false,"comment_ctime":1577356608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577356608","product_id":100039001,"comment_content":"不要重复造轮子，但是要知道这个轮子是怎么造出来的","like_count":0},{"had_liked":false,"id":165882,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1577339798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577339798","product_id":100039001,"comment_content":"&#47;&#47; b表示模式串，m表示模式串的长度private static int[] getNexts(char[] b, int m) { int[] next = new int[m]; next[0] = -1; int k = -1; for (int i = 1; i &lt; m; ++i) { while (k != -1 &amp;&amp; b[k + 1] != b[i]) { k = next[k]; } if (b[k + 1] == b[i]) { ++k; } next[i] = k; } return next;} 为什么要写这一步","like_count":0},{"had_liked":false,"id":165817,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1577326110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577326110","product_id":100039001,"comment_content":"这个 原则听起来很对，但是站在程序员的角度是不是不太友好。<br>日常开发，尤其是业务逻辑的开发，如果本着简单的原则来，基本上用不上什么高大上的技术，依赖什么组件基本上有单独的基础架构部门提供好了，那么我们怎么去联系技术，怎么提升技术呢","like_count":0},{"had_liked":false,"id":164916,"user_name":"AaronChun","can_delete":false,"product_type":"c1","uid":1027352,"ip_address":"","ucode":"0D4A4CBD676A3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/18/41831eae.jpg","comment_is_top":false,"comment_ctime":1577111275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577111275","product_id":100039001,"comment_content":"对于重复造轮子这事，结合实际工作来讲，当需求不能被当下现有的技术架构所满足，“逼不得已”时去造个适应新业务的轮子。基于这点造出的轮子，才能真正的落地，有计划有目的有场景，个人觉得这几点缺一不可，不然就是纸上谈兵，为了造轮子而造轮子。在造轮子的过程中，也不要特立独行彰显个性，要以用时短、运行稳定为前提，吸收或者运用现有的成熟技术组件去满足自己的需求，将造轮子这件事情模块化，成本就会大大降低，维护性也会好很多。","like_count":0},{"had_liked":false,"id":164664,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1577068352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577068352","product_id":100039001,"comment_content":"有空自己做编码提升的时候, 重复早轮子这个最合适了. 比如我最近有空开发的一个图表框架, 就是一个很好的轮子, 而且我觉得造得比很多人的轮子都好. 大家喜欢的可以start一下😂. 地址: https:&#47;&#47;github.com&#47;cocos543&#47;CCTrendCharts","like_count":0},{"had_liked":false,"id":164290,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1576926229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576926229","product_id":100039001,"comment_content":"我觉得除非已有的工具或者类实在不满足功能需求才造轮子，否则还是用现成的吧，毕竟自己写的没有经过大量的，全面的，系统的测试，可能会有很多bug造成不必要的麻烦","like_count":0},{"had_liked":false,"id":163903,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1576823147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576823147","product_id":100039001,"comment_content":"重复造轮子：<br>1.对现有的各种轮子研究清楚了吗，有哪些优缺点，是否可以满足你的需求。<br>2.如果不可以满足你的需求，是否可以稍加定制，就可以满足你的需求。<br>3.如果还不可以你的需求，经过研究和分析，你去造就行了。<br>造轮子是为了解决切实的需要，不是为了炫技，当然不排除政治需要。","like_count":0},{"had_liked":false,"id":163778,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1576802462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576802462","product_id":100039001,"comment_content":"老师是典型的思从深而行从简，属于精致的工笔画派，<br>而我猜好多人一定和我一样喜欢写意的豪放派（当然不喜欢别人豪放，而是自己喜欢汪洋自肆，O(∩_∩)O哈哈~）<br>前者便于一群人同行，走的更远（修的是大乘佛法）<br>后者适于一人独行，短期走的很快（往往死也得快）","like_count":0},{"had_liked":false,"id":163759,"user_name":"居培波","can_delete":false,"product_type":"c1","uid":1437396,"ip_address":"","ucode":"27A5A8D9D4682B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/d4/204d0c6d.jpg","comment_is_top":false,"comment_ctime":1576800932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800932","product_id":100039001,"comment_content":"如何在设计时考虑扩展这点不好把握。轮子不能满足当下业务应用场景就要造了。","like_count":0},{"had_liked":false,"id":163622,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1576756596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576756596","product_id":100039001,"comment_content":"打卡<br>KISS原则：尽量保持简单（Keep It Simple and Stupid）。<br>1、 不是代码少就符合kiss原则，也不是逻辑复杂就不符合kiss原则，需要根据使用场景来做相应的选择；<br>2、在实际开发中要注意：\t<br>   1）尽量不要使用同事可能不懂的技术来实现代码。如：正则表达式、高级的语法等<br>   2）不要重复造轮子，尽可能使用已有的类库和工具；<br>   3）不要过度的优化，牺牲代码的可读性；<br><br>YAGNI 原则：不要做过度的设计（You Ain’t Gonna Need It）<br>不要去设计当前用不到的功能；不要去编写当前用不到的代码<br>","like_count":0},{"had_liked":false,"id":163424,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1576719962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576719962","product_id":100039001,"comment_content":"觉得大厂才有人力来重复造轮子，但也要符合业务场景。在小公司需求都做不完的情况下重复造轮子就是浪费资源。最后，最好的造轮子情景应该是自己瞎折腾吧哈哈哈","like_count":0},{"had_liked":false,"id":163398,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1576717223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576717223","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163388,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1576716333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576716333","product_id":100039001,"comment_content":"轮子不能满足需求的时候。能满足需求的时候不需要重复造轮子，拿字符串判空来说，我们有需要每个项目都自己写一个？个人觉得没有太大必要","like_count":0},{"had_liked":false,"id":163382,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1576715537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576715537","product_id":100039001,"comment_content":"如果简单的拓展无法很好满足需求，可能还是自己参考轮子的设计思想，自己重复造一个比较好。<br><br>基本上还是开发效率上的考量","like_count":0},{"had_liked":false,"id":163252,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1576675918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576675918","product_id":100039001,"comment_content":"争哥的判断 IPV4 地址是否合法，不适用工具类的方法判断这种 IP 地址：172.16.254.01 为 true，实际上应该是 false。我做了一点改动：<br> public boolean isValidAddressV3(String address) {<br>        char[] ipChars = address.toCharArray();<br>        int unitsCount = 0;<br>        int ipUnitInitValue = -1;<br>        boolean isUnitFirst = true;<br><br>        for(int i = 0; i &lt; ipChars.length; i++) {<br>            char c = ipChars[i];<br>            if(c == &#39;0&#39; &amp;&amp; i == 0) return false;<br><br>            if(c == &#39;.&#39;) {<br>                if(ipUnitInitValue &lt; 0 || ipUnitInitValue &gt; 255) return false;<br>                &#47;*if(isUnitFirst &amp;&amp; ipUnitInitValue == 0  ) return false;<br>                if(isUnitFirst) isUnitFirst = false;*&#47;<br>                ipUnitInitValue = -1;<br>                unitsCount++;<br>                continue;<br>            }<br>            if(c &lt; &#39;0&#39; || c &gt; &#39;9&#39;) return false;<br>            if(c == &#39;0&#39; &amp;&amp; i+1 &lt; ipChars.length &amp;&amp; ipChars[i+1] &gt;= &#39;0&#39; &amp;&amp; ipChars[i+1] &lt;= &#39;9&#39;) return false;<br>            &#47;&#47; 如果以 0 开头后面的数字不能跟上 0 -9 之内的数字。<br>            if(ipUnitInitValue == -1) ipUnitInitValue = 0;<br>            ipUnitInitValue = ipUnitInitValue * 10 + (c - &#39;0&#39;);<br>        }<br>        if(ipUnitInitValue &lt; 0 || ipUnitInitValue &gt; 255) return false;<br>        if(unitsCount != 3) return false;<br>        return true;<br><br>    }<br>另外送上 leetcode 上判断 IP 地址题目一道：https:&#47;&#47;leetcode.com&#47;problems&#47;validate-ip-address&#47;","like_count":0},{"had_liked":false,"id":163050,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1576647832,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576647832","product_id":100039001,"comment_content":"如果是满足业务需求的话，可以用已有的轮子，不要轻易去重复造轮子，如果已有轮子不满足需求时，是需要重复造轮子的。","like_count":0},{"had_liked":false,"id":163029,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1576643360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576643360","product_id":100039001,"comment_content":"一切从实际出发，很多时候编码的过程中会发现，复杂的东西越少越复杂，而简单的东西呢，越敲越简单。很多项目中简单的复杂业务问题，都是问题没想透彻，最后会发现出bug最多的，也是那部分。","like_count":0},{"had_liked":false,"id":163019,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1576640740,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576640740","product_id":100039001,"comment_content":"对这俩原则的理解和应用总是觉得差点意思，现在清楚了！","like_count":0},{"had_liked":false,"id":163000,"user_name":"ismind","can_delete":false,"product_type":"c1","uid":1138710,"ip_address":"","ucode":"7AADD673ED3BC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/16/d1dd4972.jpg","comment_is_top":false,"comment_ctime":1576638744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576638744","product_id":100039001,"comment_content":"一、如何看待开发中重复造轮子？<br>1，如果自己造轮子的成本很高，那是没有必要的<br>比如数组的排序，你非要自己去写个排序函数，而不去使用Arrays.sort，<br>这就没有必要了。<br>2，如果逻辑简单，那都可以呀，比如返回二者中的最大值<br>用Math.max，或者return a &gt;= b ? a : b,都是可以的。<br><br>二、什么时候要重复造轮子？<br>不好意思，自己的开发经验的确少，这个我答不上来，<br>但是我想了一下，既然要重复造轮子，说明别人的轮子就不适合目前的需要，<br>所以要重复造，而且对应的需求即使反复用同一个轮子，也还是需要做一些修改，<br>那么还不如自己造轮子。至于是什么具体情况，那么我真的答不上来了。<br><br>三、什么时候应该使用现成的工具类库、开源框架？<br>1，这个就很好回答了，比如数组的排序，判空。<br>2，还有对数据库的操作，你就需要用MyBatis了，或者其他，<br>不然，你自己去弄一大堆的配置以及其他操作，而且还有错，还不如框架弄的简单又准确。","like_count":0},{"had_liked":false,"id":162999,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1576638737,"is_pvip":false,"replies":[{"id":"62271","content":"这个要根据团队具体来看 还要根据新技术的渗透情况来决定 一个新技术开始可能是奇技淫巧 等过两年都接受了 可能就算不上了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576797884,"ip_address":"","comment_id":162999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576638737","product_id":100039001,"comment_content":"奇技淫巧，问一下  Lambda，和Stream  以及  int ... a; 这些  哪个算是尽量别用的奇技淫巧呢？ 为什么团队里，有的人把Stream+Lambda 一行写完的代码，分了五六行去写。谁是对的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478207,"discussion_content":"这个要根据团队具体来看 还要根据新技术的渗透情况来决定 一个新技术开始可能是奇技淫巧 等过两年都接受了 可能就算不上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162984,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1576637495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576637495","product_id":100039001,"comment_content":"关于重复造轮子这个问题，1.浪费时间 2.出bug的几率高。什么时候适合造轮子？使用的这个东西是性能瓶颈的时候，也没有好的替代品，此时考虑自研","like_count":0},{"had_liked":false,"id":162963,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1576635316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576635316","product_id":100039001,"comment_content":"重要且简单，当不是人人都能做到的原则，我就不懂他们怎么想的。","like_count":0},{"had_liked":false,"id":162952,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1576634050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576634050","product_id":100039001,"comment_content":"当轮子不能满足当前需求，可以自己造轮子。或者公司需要定制，也可以。","like_count":0},{"had_liked":false,"id":162948,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1576633773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576633773","product_id":100039001,"comment_content":"课堂讨论：你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br><br>Answer：<br>在实际项目的开发中，我赞同“不要重复造轮子”这种看法。重复造轮子会导致bug风险，项目解构臃肿，维护成本增加等问题。<br><br>什么时候要重复造轮子，我认为当现有轮子无法满足业务需求，或现有轮子存在不可挽回问题的情况下，参考YAGNI原则，确定真的需要时，再做造轮子的决定。<br><br>另本次课程的验证ip方法的例子我有不同看法：<br>我认为使用正则表达式实现的方式优于其他两种方法。首先业务需求是确定的：验证ip地址合法。而正则表达式就是做模式匹配的，虽然语法晦涩，但通过单测后就再也不需要动它了。而且根据KISS原则，正则实现拥有行数少，逻辑复杂度低，实现难度容易的优点。<br>","like_count":0},{"had_liked":false,"id":162945,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1576633268,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576633268","product_id":100039001,"comment_content":"我觉得重复造轮子有时候还是无法避免的。我们为什么会有那么多需要重复造轮子的地方呢？因为所有好的代码都不是写出来的，而是通过不断修改完善优化出来的。正常情况下写代码的时间占比在 40%，修改完善代码的时间占 60 % 。很多需求，并不是跟着自己的思想走，所以很多时候，有复用的功能，但是复用的细节又是不同的，这时候，就存在重复造轮子了，也就需要设计模式的思想来做优化。<br><br>工具类确实是个好东西，但是也得适当的使用。就像文中老师说的，“我发现，有些同事为了避免开发中 library 包缺失而频繁地修改 Maven 或者 Gradle 配置文件”，有时候可能就是为了实现某个功能而引入了工具库，但是大部分又是不需要的，那还不如自己深挖源码，把需要的功能实现出来更好，有效防止过度无效的包引入，无形之中增加包的大小。<br><br>开源框架亦是如此。如果用到，还是先搞清楚框架的功能，和业务的匹配程度再进行考量。如果是网络请求框架这类，那是提倡加入，把当前所有请求都用框架实现，会省去一些工作；这里我自己做的也不好，所以也只能聊这么多啦。","like_count":0},{"had_liked":false,"id":162937,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1576632415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576632415","product_id":100039001,"comment_content":"重复造轮子——有时候是业务之间的相互倾轧导致的，不同的部门为了相同的利益，不得不这么做。","like_count":0},{"had_liked":false,"id":162921,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1576631258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576631258","product_id":100039001,"comment_content":"对于文中的思考题，个人觉得学习某个类库或者框架的时候可以适当的重复造轮子，这样可以提高对框架的理解，这样在实际的开发中可以知道这个“轮子”哪里好，哪里不好。有时候很多类库和框架在某些业务场景下是不满足自己的业务需求的，这时候可能需要自己扩展。","like_count":0},{"had_liked":false,"id":162915,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1576631035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576631035","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":162887,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1576628889,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1576628889","product_id":100039001,"comment_content":"个人认为应该先从自己遇到的问题并结合问题所在的场景来考虑是自己实现还是使用现有的工具框架，比如如果现有的工具框架在解决问题时完全不能满足性能要求，并且这个问题没那么紧急，那么可以自己做个轮子，反之就应该考虑是否可以使用现有工具类库来解决问题。在使用现成的工具类库和开源框架时也要了解清楚其缺陷，这些缺陷是否会产生巨大影响，比如如果开源工具有重大安全漏洞，那还是不要用得好。","like_count":0},{"had_liked":false,"id":162880,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1576628089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576628089","product_id":100039001,"comment_content":"学习过程、软件项目管理也是如此。简化，剪枝（取舍），两者都要具体问题具体分析。","like_count":0},{"had_liked":false,"id":162878,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1576628009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576628009","product_id":100039001,"comment_content":"过度的造轮子会过而不及，现成的能满足需求的，自然是用现成的比较好，但对于我们个体而言，想要技术提高，也不能只用现成的轮子，应该是模仿轮子，学习吸收它的精华，自己学会造轮子，当然对于公司而言，为了项目的稳定和快速的盈利，自然是用现有的稳定的轮子更合适","like_count":0},{"had_liked":false,"id":162877,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1576627928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576627928","product_id":100039001,"comment_content":"除非是为了学习，否则没有重复造轮子的必要性，因为都说了是“重复”😂","like_count":0},{"had_liked":false,"id":162871,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1576627355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576627355","product_id":100039001,"comment_content":"如果工具类和开原类库里有大量无用的方法的时候就没必要使用，不能就用一两个引入一百个。","like_count":0},{"had_liked":false,"id":162865,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1576626653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576626653","product_id":100039001,"comment_content":"1.如果需要的功能，已经有现成的东西，并且接入成本低，后期可能自定义也不多，那就不要造轮子了。<br>2.但是如果需要的功能，现在的只能满足一半，或者本身自定义的需求就比较高，那还是要造一下轮子，否则迟早不满足业务。<br>对于正则表达式有点疑问，看到项目里面其实用的还挺多，但是没那么复杂。","like_count":0},{"had_liked":false,"id":162862,"user_name":"王钰淇","can_delete":false,"product_type":"c1","uid":1061163,"ip_address":"","ucode":"3160E0F04909E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/2b/d2b4336e.jpg","comment_is_top":false,"comment_ctime":1576626445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576626445","product_id":100039001,"comment_content":"需要重复造轮子的场景:<br>1.轮子处为性能瓶颈，需要进行性能优化。<br>2.轮子太大太复杂，依赖太重，而也许场景只需要其很少一部分功能，单独实现情况下可读性可维护性更好。<br>3.考虑到特定轮子的可测试性和可扩展性，单独实现易于测试分层和功能扩展。","like_count":0},{"had_liked":false,"id":162857,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1576625314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576625314","product_id":100039001,"comment_content":"可以说《unix编程艺术》整本书都是在阐述kiss这一设计原则。不过像老师说的，看完依然不知道什么样的代码叫简单。如书中所说，unix编程艺术更多是一种文化。文化？可能是我文化程度低吧。<br><br>这种抽象的原则最难把握了。","like_count":0},{"had_liked":false,"id":162856,"user_name":"樵牧","can_delete":false,"product_type":"c1","uid":1066878,"ip_address":"","ucode":"1F6DE42617C6EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/7e/b47946cd.jpg","comment_is_top":false,"comment_ctime":1576625313,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1576625313","product_id":100039001,"comment_content":"Kiss还是比较容易一起争论。特别是过度设计这一点。昨天就跟同事吵起来了。我说，这里需要有个扩展点，而且这个扩展点不会让代码复杂太多。他说，这样子就不够清爽了。","like_count":0,"discussions":[{"author":{"id":1100703,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","nickname":"阿玛铭","note":"","ucode":"DBF948D82ACBE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86827,"discussion_content":"根本原因是双方的信任没有完全建立。资源有限，在这里还有一个原因是人都有惰性，软件开发的成本和质量（效率）需要权衡。你们的沟通没有具体，注重形象互动，用对他产生启发价值的方式说明问题，具体到让他信服。这点老师做的就很好。把复杂的问题讲简单，把两单的问题讲具体。说白了就是你的说服人的能力有所不足。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576628385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162849,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1576621689,"is_pvip":true,"discussion_count":17,"race_medal":0,"score":"1307246679673","product_id":100039001,"comment_content":"很好奇这三个方法运行效率的高低。测了一下争哥给的代码的执行效率，结果正如争哥文章说，第三个是最快的。<br>方法一（正则）&lt; 方法二 &lt; 方法三<br><br>正则就真的这么不堪么？效率如此之低？其实不然。<br><br>Java中正则的最佳实践是：<br>用于校验和匹配的正则表达式使用时需要预先compile，在类中写做静态变量（经常会重用），这样可以提高效率。Pattern.compile(IP_REGEXP)<br><br>优化正则后的效率如何呢？<br>方法一（正则）&lt; 方法二 &lt; 方法一（正则改进后）&lt; 方法三<br><br>测试参数设置：每个方法执行100万次。<br>实验结果：<br>方法一：2.057s<br>方法一优化：0.296s 提前编译正则<br>方法二：0.622s<br>方法三：0.019s<br>有兴趣的小伙伴看看代码，欢迎一起讨论！https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;blob&#47;master&#47;designpattern&#47;u20&#47;TestPerformance.java<br><br>参考：<br>https:&#47;&#47;stackoverflow.com&#47;questions&#47;1720191&#47;java-util-regex-importance-of-pattern-compile","like_count":305,"discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567855,"discussion_content":"这个分享很好 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651019568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162852,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1576624711,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"903519756871","product_id":100039001,"comment_content":"开发中的重复造轮子，这东西怎么说呢。我认为这句话是对公司来说的，但是对自己来说，重复造轮子是有必要的。就好比之前的数据结构和算法，那也是所有轮子都有啊，为什么还要自己写响应代码。这个问题在另一个专栏都说烂了，这里也不再赘述了。<br><br>光说不练假把式，轮子用不用的好，自己了解的深入才知道。我们读书的时候，用数学定理去解题，也是在一些已知条件下才能用这个定理。不能上来就套定理，而是要分析是否满足使用情况。只有吃透定义和原理，才能更好的使用轮子。<br><br>开发中也一样，我们要排查各种各样的问题，如果轮子内部出了问题，对轮子原理实现都不了解的，怎么排查问题。怎么知道用那种轮子是最好的呢。而且还会存在改造轮子的情况，轮子不满足我们特定的需求，那也是吃透了才能改的动。<br><br>总之，轮子这东西，对公司来说，不要重复，对自己来说，要多去理解，多动手。总不希望自己就是个调包侠吧","like_count":211,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491688,"discussion_content":"嗯嗯，多谢！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594904553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302597,"discussion_content":"这么认真！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598967087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232792,"discussion_content":"// 节约内存版\npublic class InputTextEasy {\n    private StringBuilder text = new StringBuilder();\n    public String getText() {\n        return text.toString();\n    }\n    public int getTextLength() {\n        return text.toString().length();\n    }\n    public void append(String input) {\n        text.append(input);\n    }\n    public SnapshotEasy createSnapshot() {\n        return new SnapshotEasy(this.text.length());\n    }\n    public void restoreSnapshot(SnapshotEasy snapshot) {\n        this.text.delete(snapshot.getLength(), this.text.length());\n    }\n}\n//---\npublic class SnapshotEasy {\n    private int length;\n    public SnapshotEasy(int length) {\n        this.length = length;\n    }\n    public int getLength() {\n        return length;\n    }\n}\n//---\n@Slf4j\npublic class SnapshotEasyHolder {\n    private Stack<SnapshotEasy> snapshots = new Stack<>();\n    public SnapshotEasy popSnapshot() {\n        if (snapshots.isEmpty()) {\n            log.warn(&#34;snapshots is empty, cannot pop...&#34;);\n            return null;\n        }\n        return snapshots.pop();\n    }\n    public void pushSnapshot(SnapshotEasy snapshot) {\n        log.debug(&#34;push val: [&#34; + snapshot.getLength() + &#34;]&#34;);\n        snapshots.push(snapshot);\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586876993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162923,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1576631427,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"220619963523","product_id":100039001,"comment_content":"设计模式_19<br>今天的内容有一些哲学味道，让我联想到奥卡姆剃刀原理：<br>如无必要，勿增实体。<br><br>用同事不懂的技术，增加了整个团队的理解成本；重复造轮子和过度优化，大多数情况下带来的便利小于增加的成本；<br>不要写炫技的代码，就像杜峰(CBA广东队教练)说的：“如果没有目的，就不要运球。(因为运球就可能丢球)”，降低出错的概率是一个数学问题，它能够真实得提高软件质量。<br><br>回到作业，同上：<br>只有必须造轮子时，才要造轮子。<br>那什么又是必须呢？<br>- Vim如果不用KMP，恐怕就没有人用了。<br>- MySql的性能(即将)已经不能满足阿里的业务量<br>- 微信作为国民应用，需要解决各种弱网络下尽可能收发消息。<br>...","like_count":52,"discussions":[{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574609,"discussion_content":"你一说，我又忘记关电脑了= =","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654176470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384097,"discussion_content":"mac确实不需要关机","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626359891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2068684,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","nickname":"taku","note":"","ucode":"B22DA9A4A9DC91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383080,"discussion_content":"你电脑几顿呀？有埃尼阿克重吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625884011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1300285,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d7/3d/a076faf1.jpg","nickname":"蜗牛","note":"","ucode":"A99C9C890F95E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326897,"discussion_content":"不死机吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605695705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302598,"discussion_content":"不更新系统吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598967104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162903,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576630217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"126130681801","product_id":100039001,"comment_content":"你怎么看待在开发中重复造轮子这件事情？<br>轮子:供上层业务应用使用的基础组件.<br>造轮子:设计并实现基础组件.<br>重复造轮子:重新设计实现一套新的组件.<br>开发中重复造轮子:<br>对于个人可以有深度度地提升对业务与技术认知的理解,还可以提升设计与动手能力,由于掌握了更多细节的知识,以后对于这类问题的排查定位及处理是有益处的.<br>对于技术团队,重复造出的轮子多了日后就需要有更多的人手和精力维护各个轮子,使轮子的维护成本变高;在使用方面,团队的每个成员为了能够正确的使用轮子就需要花费精力去熟悉各个轮子的特征.<br>什么时候要重复造轮子？<br>新的业务场景中原来的轮子不再合用,并且改造的成本高于重新建造的成本.比如原有业务量不大对于性能要求一般时,旧轮子足够满足;但随着业务的迅猛增长,对于性能提出明确苛刻的要求,就可以考虑重新建造新轮子了.<br>什么时候应该使用现成的工具类库、开源框架？<br>业务发展的初中期阶段时应该使用.这个阶段业务需求一般比较通用且对性能要求也不高,这时的业务与技术的特点就是要快,快速响应业务占领市场.<br>但发展到一定规模,性能成为了制约业务发展的瓶颈,拿来主义已经不能满足业务的更高要求了,就必须要动手建造适合自身业务需求的特定轮子.","like_count":29},{"had_liked":false,"id":163224,"user_name":"小毅","can_delete":false,"product_type":"c1","uid":1016799,"ip_address":"","ucode":"5651C740D68038","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/hg9Tsg2iaBeG6Q5mxiczjw1ph0OvhKziblEIiaOxg4gwQ0Dgia7Fw7pDQ0mM8AL5SJAm2Yavk1RmBJrFd9jKPBQRkOw/132","comment_is_top":false,"comment_ctime":1576672853,"is_pvip":false,"replies":[{"id":"62269","content":"嗯嗯 我的意思不能为了用新技术而引入新技术 不过也没那么绝对 设计问题本来就没有绝对的对重庆更多的是弄明白道理之后 根据实际场景自己去权衡","user_name":"作者回复","comment_id":163224,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797331,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"108950855253","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术来实现代码”这一条我觉得是可以值得商榷的~ 比如在项目中引入新技术就可能会违反这一条，我觉得关键点在于这个新技术是否值得引入？新技术是否可以在团队中得到推广？ <br><br>有时候，在code review看到不理解的新技术时，其实刚好也是可以触发讨论和学习，如果只是单纯的不去使用，很容易造成整个技术团队停滞不前。","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498782,"discussion_content":"优化内存和时间这一部分的方法确实有点类似prototype的设计思路。不过，备忘录本身并不是为了优化内存和时间，你可以看看文章的前半段解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592525286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176036,"user_name":"程序袁帅","can_delete":false,"product_type":"c1","uid":1017181,"ip_address":"","ucode":"C281CA64EC91A7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/5d/ec94b66d.jpg","comment_is_top":false,"comment_ctime":1580916539,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"91775229755","product_id":100039001,"comment_content":"可能大家会说KISS、YAGNI这些原则听起来容易，做起来难。其实我认为不是做起来难，而是难在为什么要做和为什么不做。回到写代码这份职业来说，我觉出三个不同的问题：<br>1. 你为什么要写可用代码代码？ -- 赢得公司的信任，让自己能够活下来<br>2. 你为什么要写简洁可用的代码？   --  解放自己的生产力，创造更多价值，升职加薪<br>3. 你为什么要写简洁可用，并影响其他人？ -- 赢得别人尊重，获得职业成就感<br><br>我觉得程序员首先要思考上面三个事情为什么要做，而且要回答上这些问题，需要自己持续精进，比如提升编码Sense、设计思维、提升系统思考能力。<br><br><br>在探索上面三个问题的道路上，很多开发人员可能有如下内心小九九：<br><br>1. “我要用炫酷的方式Show技能。看，正则，你看得懂吗，哈哈。小样”<br>2. “我要用最少的代码写出这个而功能。看，我的代码就是比你少”<br>3. “我要用极致的性能来写这个功能。来，测一测，谁的用时最短，我开始用了快速排序法的”<br>4. “我要用上5个设计模式。你瞧瞧，这里有5个设计模式的精髓，健壮无比的代码”<br>5. ....<br><br><br>以上这些内心小九九是我们要去尽量克制的，尽量少做、甚至不做，而为什么不做这些事情，去思考这个问题的答案更重要。<br><br><br>道理可能都懂，缺的是刻意练习，推荐一些实操落的方法论和实践：<br>1. 简单设计（4原则和优先级）<br>2. 测试驱动开发（Tasking + TDD）<br>3. 重构（作者后面会提到）","like_count":21,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264945,"discussion_content":"编辑器","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589360602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272022,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590239112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264945,"ip_address":""},"score":272022,"extra":""}]}]},{"had_liked":false,"id":162961,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1576635226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61706177370","product_id":100039001,"comment_content":"一.什么时候要重复造轮子？<br>1. 想学习轮子原理(有轮子但是不意味着你不要了解其原理)<br>2. 现有轮子不满足性能需求(轮子一般会考虑大而全的容错处理和前置判断，这些对性能都有损耗)<br>3. 小而简的场景(比如设计一个sdk,最好不宜过大，里面轮子太多不易三方集成)<br>4.定制化需求<br><br>二.什么时候应该使用现成的工具类库、开源框架？<br>1.第一条中提到的反面情况<br>2. 敏捷开发，快速迭代，需求急的场景<br>3. 轮子比自己写的好，BUG少，设计好<br>4. KISS原则","like_count":14},{"had_liked":false,"id":162910,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576630534,"is_pvip":false,"replies":[{"id":"62277","content":"你说的没错 要有大牛 不然code review就流于形式 大眼瞪小眼","user_name":"作者回复","comment_id":162910,"uid":"1190123","ip_address":"","utype":1,"ctime":1576802643,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"61706172678","product_id":100039001,"comment_content":"提个疑问:<br>文中&quot;所以，评判代码是否简单，还有一个很有效的间接方法，那就是 code review。&quot;,这里的code review有个前提该是团队成员的技术要有一定的水平,如果全是些初级人员,不按照面条式写代码就看起来费劲,这种代码评审就没意义了,所以前提是评审必须要有一定的内功修为.","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478175,"discussion_content":"你说的没错 要有大牛 不然code review就流于形式 大眼瞪小眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576802643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247922,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599918896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44549591856","product_id":100039001,"comment_content":"曾经有个外包同学，为了体现自己的技术能力，所有的数学计算都是写的位运算，气的我把血吐了他一脸，让他改！！！","like_count":10,"discussions":[{"author":{"id":2736925,"avatar":"","nickname":"Geek_fa0102","note":"","ucode":"55A578CB6F0E85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388899,"discussion_content":"记着看医生,吐血可能不是好现象","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629032429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163400,"user_name":"拖鞋党副长","can_delete":false,"product_type":"c1","uid":1404098,"ip_address":"","ucode":"B569F22636F975","user_header":"https://static001.geekbang.org/account/avatar/00/15/6c/c2/5a8b7468.jpg","comment_is_top":false,"comment_ctime":1576717404,"is_pvip":false,"replies":[{"id":"62265","content":"比如一些函数式编程语法 有人就不了解","user_name":"作者回复","comment_id":163400,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796972,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"35936455772","product_id":100039001,"comment_content":"老师，以java为例，什么样的写法可以被称为不建议使用的过于高级的语法呢","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478381,"discussion_content":"比如一些函数式编程语法 有人就不了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336748,"discussion_content":"新技术的出现，是为了淘汰不学习的人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608692051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572137,"discussion_content":"我感觉现在很多3年之内的开发都喜欢使用函数式编程。说实话，自己不常用函数式编程的话，真的看得不是很懂。可读性真不算高。如果只是使用简单的函数式编程：filter，map，forEach等这些还好，复杂函数真的不好看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652617650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585891,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/e3/074a1ea8.jpg","nickname":"。。。。。。","note":"","ucode":"8A7A8F25CB3F21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381185,"discussion_content":"那函数式编程出现的意义是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624942851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1301286,"avatar":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","nickname":"靠人品去赢","note":"","ucode":"7A20F9EBE847E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320193,"discussion_content":"函数式编程，很多不习惯行为作为参数的同学，在面对一些不熟悉的写法，真的不如值作为参数，一行一行的容易理解，没错说的就是我。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604287858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351075,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a3/79fc9017.jpg","nickname":"minsky","note":"","ucode":"7296ECA064E89B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245638,"discussion_content":"个人就经历过一个月内线上出现好几次莫名其妙的BUG，究其原因就是有同事用到了自己都不了解的技术，尤其是lambda表达式。调用API不说要把api的源码看了，至少API的入参返参相关的描述和特殊情况要梳理出来吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587689981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241993,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1597555011,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23072391491","product_id":100039001,"comment_content":"重复造轮子是加深理解的最好方式","like_count":5},{"had_liked":false,"id":163375,"user_name":"盒子","can_delete":false,"product_type":"c1","uid":1188891,"ip_address":"","ucode":"2A95F1121109B1","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/1b/7aa4d93d.jpg","comment_is_top":false,"comment_ctime":1576715287,"is_pvip":false,"replies":[{"id":"62267","content":"应该暂时放弃 等团队慢慢学习接受","user_name":"作者回复","comment_id":163375,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797136,"user_name_real":"王争"}],"discussion_count":9,"race_medal":0,"score":"23051551767","product_id":100039001,"comment_content":"争哥好，想请问一个问题，文中说到不要写同事可能不懂的技术实现，这该如何权衡呢；<br>对于 Java 8 的 lambda 表达式，我认为这样的代码会更为直观；可是由于同事都习惯使用存储过程，Java 7 的语法糖；<br><br>是否因为团队大部分人都不使用 lambda，就应该在项目中放弃使用呢？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478370,"discussion_content":"应该暂时放弃 等团队慢慢学习接受","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239171,"discussion_content":"其实团队是个伪命题，大多数情况是一个人杀出一条血路，其他人跟着你的脚步走。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1587280938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128423,"discussion_content":"这点不同意争哥的说法！好的生产力一定要上！😄","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1578638403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1097416,"avatar":"https://static001.geekbang.org/account/avatar/00/10/be/c8/7c5f324f.jpg","nickname":"港岛妹夫","note":"","ucode":"9F6AAA29B60D8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282733,"discussion_content":"同意. 而且这东西没有那么难. 周末抽个一天,使用上就差不多了. 我原来一直都是Java7, 换了新公司用Java8一天上手. 上手了, 后面才能体会到精髓, 新的语法糖的好处, 新的写代码思路.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592059947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128423,"ip_address":""},"score":282733,"extra":""}]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138049,"discussion_content":"不同意，不能等。你可以做技术分享和布道，主动push新技术的落地","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579223086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216284,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","nickname":"皮卡皮卡","note":"","ucode":"D440EEC7301C76","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88980,"discussion_content":"lambda语法其实没有那么难，可读性反而会更好。这样的情况往往可以推广开","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576744100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","nickname":"柴柴777","note":"","ucode":"5208B935ECB6F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119031,"discussion_content":"我觉得应该推广,比如我们现在的代码里用kotlin,我开始我也不会硬着头皮看一段时间现在大概基础的部分,基础的业务用kotlin写也没什么问题了,高阶语法就慢慢去学习去用就好了,这种促进学习的推广起来应该是好事","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578210393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336832,"discussion_content":"lambda 用顺手了反而以前的写法有点看不下去了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608711942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277665,"discussion_content":"首先jdk要先上，固守某个jdk，其他语法糖就用不上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591089199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296152,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622778417,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"18802647601","product_id":100039001,"comment_content":"我可以不造，但是不能不会。","like_count":4},{"had_liked":false,"id":163378,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1576715393,"is_pvip":false,"replies":[{"id":"62266","content":"当然不是 简单的正则表达式 大部分人都能看懂 就可以用 别整那种极端难看懂的就行 凡事都有个度 合理把握","user_name":"作者回复","comment_id":163378,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797085,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18756584577","product_id":100039001,"comment_content":"那请问像正则表达式这样的东西是不是就没有用武之地？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478372,"discussion_content":"当然不是 简单的正则表达式 大部分人都能看懂 就可以用 别整那种极端难看懂的就行 凡事都有个度 合理把握","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162894,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1576629519,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18756498703","product_id":100039001,"comment_content":"很早就知道 kiss 原则了，以前的理解是代码行数少，逻辑简单，不要过度设计这样就符合 kiss 原则。虽然知道这个原则，但是却没有好好在实践中注意到，导致写的代码有时候晦涩难懂，有时候层层调用，跟踪起来很繁琐。看完今天的文章，理解更深了，代码不仅是给自己看的，也是给同事看的，并且尽量不自己造轮子，使用大家普遍知道的技术或方法会比炫技好很多。<br>至于另一个原则，你不需要它这个实际上做的还是不错的。","like_count":4},{"had_liked":false,"id":196405,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1585278685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470180573","product_id":100039001,"comment_content":"1、你怎么看待在开发中重复造轮子这件事情？<br>答：公司其实不会重复造轮子的，但是某些组件还是会自己定制的，主要考虑的是维护性。但是开源的框架还是可以看看和学习一下优秀的设计。如果什么都引入开源框架，万一有人不懂这个框架，维护起来就很困难了。通过自己定制一些框架，企业还可以培养一批优秀的人才。<br>2、什么时候要重复造轮子？<br>有特殊的应用场景的时候，应该考虑重复造轮子。这个轮子可大可小。也可以说是自己某个模块抽出来的工具类之类的。有时候造一些小轮子是为了避免引入更多的依赖框架。<br>3、什么时候应该使用现成的工具类库、开源框架？<br>通用的场景就应该使用成熟的框架和工具类。比如，做web开发，spring或spring boot肯定会用的，自己造这个轮子就太浪费时间和人力了。还有就是看企业规模，小公司没能力还是用成熟的框架更快的开发吧。毕竟生存下去才是第一位的。","like_count":3},{"had_liked":false,"id":168022,"user_name":"无所从来","can_delete":false,"product_type":"c1","uid":1325996,"ip_address":"","ucode":"E7AD394BC16A73","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/ac/40807e85.jpg","comment_is_top":false,"comment_ctime":1577978785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462880673","product_id":100039001,"comment_content":"KISS用于设计之初的理念，是规划；YAGNI用于设计之后的优化，是减法。","like_count":3},{"had_liked":false,"id":164113,"user_name":"看山","can_delete":false,"product_type":"c1","uid":1014260,"ip_address":"","ucode":"F030DD58D0BDC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/f4/d85e7e58.jpg","comment_is_top":false,"comment_ctime":1576886787,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14461788675","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术来实现代码。比如前面例子中的正则表达式，还有一些编程语言中过于高级的语法等。”<br>针对这条建议，不是很赞同。正则表达式是每个开发应该掌握的，对于初级来说比较有难度，但这种好用的就该主动去学；在jdk8刚出来的时候，lambda表达式是高级用法，到这个语法在很多其他语言中已经成熟，那就该在编码过程中实践，否则就会被甩在车轮后面。<br>我认为我们要保持代码的简洁高效、通俗易懂，但也要充分利用语言特性。","like_count":3,"discussions":[{"author":{"id":1423418,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b8/3a/2d3c9b70.jpg","nickname":"魔术师","note":"","ucode":"A37871DE3EF338","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298449,"discussion_content":"我觉得在数据层面操作的粒度更小，可选择性的备份需要备份的数据；操作上可控性更好，在备份时可以有逻辑操作，可以有多种定制化的数据格式；而且备份后的内容是有封装需求的，不应该被修改，不知道说的对不对。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597301290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1423418,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b8/3a/2d3c9b70.jpg","nickname":"魔术师","note":"","ucode":"A37871DE3EF338","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340466,"discussion_content":"说得很好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610011203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298449,"ip_address":""},"score":340466,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302600,"discussion_content":"1. 游戏保存进度\n2. 文本编辑器撤销功能\n3. 分布式事务通过保存快照实现回滚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598967237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163912,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1576825120,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14461727008","product_id":100039001,"comment_content":"哈哈，联想到英雄联盟这个游戏，kiss就像盖伦的大宝剑，专制一切花里胡哨，用最简单的操作解决问题，而与之相反就是就是花里胡哨，一顿乱秀猛如虎，一看战绩0-5","like_count":3,"discussions":[{"author":{"id":1253530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","nickname":"八百","note":"","ucode":"79F1F79ADF5A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271902,"discussion_content":"大宝剑可以的，打不过就跑，简单明了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590215657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163506,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1576734550,"is_pvip":false,"replies":[{"id":"62263","content":"是的 这是重复造轮子吗一个比较重要的理由","user_name":"作者回复","comment_id":163506,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796770,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"14461636438","product_id":100039001,"comment_content":"打卡～<br>我觉得做项目中是不需要去重复造轮子的，但如果一个轮子特别大，但我只需要这个轮子很小的一部分内容，那是不是考虑借鉴它的思想去造个轮子呢？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478422,"discussion_content":"是的 这是重复造轮子吗一个比较重要的理由","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102420,"discussion_content":"老师 这个回复 有趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577345104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162913,"user_name":"ca01ei","can_delete":false,"product_type":"c1","uid":1001944,"ip_address":"","ucode":"5319718B43FE18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/d8/71860550.jpg","comment_is_top":false,"comment_ctime":1576630843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14461532731","product_id":100039001,"comment_content":"要不这样吧，如果编程语言里有个地方你弄不明白，而正好又有个人用了这个功能，那就开枪把他打死。这比学习新特性要容易些，然后过不了多久，那些活下来的程序员就会开始用0.9.6版的Python，而且他们只需要使用这个版本中易于理解的那一小部分就好了（眨眼）。￼<br>——Tim Peters 传奇的核心开发者，“Python之禅”作者","like_count":3},{"had_liked":false,"id":162833,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1576599395,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14461501283","product_id":100039001,"comment_content":"我觉得如果开源类库完全能满足需求的话，那完全没必要造轮子，如果对性能有要求，比如类库太复杂，想要简单高效的，那可以造个轮子，比如我认为shiro也是spring security的轮子，他简化了很多东西，小巧灵活。还有就是觉得类库能满足需求但是相对于当前需求来讲不够可扩展，那也可以采取类库思想造一个全新的轮子来用。","like_count":3,"discussions":[{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86816,"discussion_content":"什么时候应该使用现成的工具类库、开源框架？\n\n一.什么时候要重复造轮子？\n1. 想学习轮子原理(有轮子但是不意味着你不要了解其原理)\n2. 现有轮子不满足性能需求(轮子一般会考虑大而全的容错处理和前置判断，这些对性能都有损耗)\n3. 小而简的场景(比如设计一个sdk,最好不宜过大，里面轮子太多不易三方集成)\n4.定制化需求\n\n二.什么时候应该使用现成的工具类库、开源框架？\n1.第一条中提到的反面情况\n2. 敏捷开发，快速迭代，需求急的场景\n3. 轮子比自己写的好，BUG少，设计好\n4. KISS原则\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576627925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87470,"discussion_content":"思路清晰，比我总结的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576670023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":86816,"ip_address":""},"score":87470,"extra":""}]},{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87740,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576678090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162881,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1576628415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166563007","product_id":100039001,"comment_content":"对工作上重复造轮子，没有必要，因为讲究效率问题，别人不会管你实现的功能是复制粘贴的，还是自己实现的，能正常使用就ok，对于自己来说也没必要盲目造轮子，不要造大轮子，除非你觉得你造的轮子可以碾压现有的，造一些小轮子，使用别的轮子的思想和设计还是有些用处的。","like_count":2},{"had_liked":false,"id":162855,"user_name":"Boogie 捷","can_delete":false,"product_type":"c1","uid":1541552,"ip_address":"","ucode":"9F54EF69CC0106","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/b0/496ae224.jpg","comment_is_top":false,"comment_ctime":1576625251,"is_pvip":false,"replies":[{"id":"62280","content":"简单的正则表达式可以用的 不要太极端就好","user_name":"作者回复","comment_id":162855,"uid":"1190123","ip_address":"","utype":1,"ctime":1576803265,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10166559843","product_id":100039001,"comment_content":"想请问一下老师对于使用正则匹配的看法，因为在平时的工作中还是会时不时看见，而且感觉确实可以省掉一些代码。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478166,"discussion_content":"简单的正则表达式可以用的 不要太极端就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576803265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291969,"user_name":"吕成 Zero","can_delete":false,"product_type":"c1","uid":2410746,"ip_address":"","ucode":"5665769CC41329","user_header":"https://static001.geekbang.org/account/avatar/00/24/c8/fa/baf9847c.jpg","comment_is_top":false,"comment_ctime":1620629402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915596698","product_id":100039001,"comment_content":"如果有人重复造轮子，我觉得有两种可能：<br>1. 重复造轮子的人不知道已经有轮子了，他可能对当前正在开发的环境或项目不够理解。<br>2.重复造轮子的人知道已经有轮子了，但是他发现当前的轮子不好用，所以想重新造一个自己认为更好用的轮子。<br>当发现已经存在的轮子不满足某些设计原则（如单一职责原则、KISS原则），或存在性能瓶颈时，可以重新造一个轮子用于替代。<br>","like_count":1},{"had_liked":false,"id":253096,"user_name":"Ryn","can_delete":false,"product_type":"c1","uid":1111903,"ip_address":"","ucode":"C81A18608BB69F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/5f/e4d58f7b.jpg","comment_is_top":false,"comment_ctime":1602596607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897563903","product_id":100039001,"comment_content":"和简单设计四原则有异曲同工之效，简单二字的关键点要看逻辑的复杂性，代码可读性以及实现的难易程度来定，对于不同的人，简单的定位也不一样。另一方面，不要过度设计，诸如在立项开始就引一个大而全的库，反而没什么必要，但也不是完全不考虑，可以对即将发生的需求有一定的预估性，留好扩展点","like_count":1},{"had_liked":false,"id":241357,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1597278325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892245621","product_id":100039001,"comment_content":"造轮子大多数情况是认为lib比较臃肿，使用不方便，或者是想一展所长，但是造轮子的代价是bug率比较高，需要实战中不停的打磨才能成型，大家其实都有造轮子的心 毕竟想通过实践验证自己的成果，但是使用上还需谨慎","like_count":1},{"had_liked":false,"id":163807,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1576805215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871772511","product_id":100039001,"comment_content":"Ken Thompson :拿不准，用穷举","like_count":1},{"had_liked":false,"id":359269,"user_name":"Geek_dc3cf1","can_delete":false,"product_type":"c1","uid":3188383,"ip_address":"北京","ucode":"1E8299B55535C1","user_header":"","comment_is_top":false,"comment_ctime":1665386921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665386921","product_id":100039001,"comment_content":"“不要使用同事可能不懂的技术 ”：同事不懂不是因为她们菜吗","like_count":0},{"had_liked":false,"id":356058,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"北京","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1661940046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661940046","product_id":100039001,"comment_content":"kiss：保持简单<br>YAGNI：不要过度设计","like_count":0},{"had_liked":false,"id":353195,"user_name":"王政","can_delete":false,"product_type":"c1","uid":2297381,"ip_address":"湖南","ucode":"A7DCA909FC8A38","user_header":"https://static001.geekbang.org/account/avatar/00/23/0e/25/aad87c07.jpg","comment_is_top":false,"comment_ctime":1659253654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659253654","product_id":100039001,"comment_content":"如果一个版本能够满足当前的逻辑需求，并且没有诸如环境、性能等方面的风险，那么所有用工作时间造轮子对团队和个人都是不可取的。我们的目标是用尽可能少的成本开发尽可能稳定的代码，这里面需要做充分的取舍，同时取舍的依据来自经验和一些内化的理论指导。<br>当一个人是基于兴趣和为了证明自己的时候而不使用现成的工具类和框架的时候，那么大概率他是做了不合时宜的事情。","like_count":0},{"had_liked":false,"id":349898,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656416033,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656416033","product_id":100039001,"comment_content":"我觉得技术这东西就是用了多了才有感悟，没有说别人不懂我就不能用","like_count":0},{"had_liked":false,"id":347536,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654136518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654136518","product_id":100039001,"comment_content":"造轮子好处<br>(1)个人深入业务和练习技术<br>(2)简历加分<br>(3)轮子需要维护, 轮子被广泛使用后, 增加个人的不可替代性<br>轮子的坏处<br>(1)不稳定,相对于公识的实现<br>(2)公司成本增加<br>(3)消耗个人时间和精力<br><br>个人感觉在开发中, 要审核技术设计, 不是所有的轮子都是可以造轮子的, 大部分轮子是不能造轮子的<br><br>所以要: 合适的场景时机 + 你觉得好处大于坏处 \\<br>才能造轮子","like_count":0},{"had_liked":false,"id":345772,"user_name":"寒光","can_delete":false,"product_type":"c1","uid":1206187,"ip_address":"","ucode":"061BE413595F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","comment_is_top":false,"comment_ctime":1652586212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652586212","product_id":100039001,"comment_content":"YAGNI，应该是这样吧？You aren&#39;t gonna need it","like_count":0},{"had_liked":false,"id":329836,"user_name":"coco","can_delete":false,"product_type":"c1","uid":1052821,"ip_address":"","ucode":"7BC3AB84E8434E","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/95/17a9a042.jpg","comment_is_top":false,"comment_ctime":1641562243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641562243","product_id":100039001,"comment_content":"根据需要开源无法满足时就自己造","like_count":0},{"had_liked":false,"id":327018,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1639841190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639841190","product_id":100039001,"comment_content":"思考题：<br>重复造轮子，就是在开发过程中不利用现有的框架、组件、函数、类来实现功能，而自己重写代码来实现相同的功能；当现有的框架或组件无法满足业务需求或者现有的轮子在某一方面表现不佳，需要做特殊的优化，这时就要重复造轮子。如果现有工具类库、开源框架基本能满足需求，且之前类似的功能一直都是用这些工具类库、开源框架实现，这种情况下可以使用现成的工具类库、开源框架","like_count":0},{"had_liked":false,"id":322978,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1637677964,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637677964","product_id":100039001,"comment_content":"满足不了业务需求的时候  要重复造轮子。尽量的还是使用开源常见的技术栈，出了问题也好找到解决办法。","like_count":0},{"had_liked":false,"id":322529,"user_name":"探雪","can_delete":false,"product_type":"c1","uid":2833619,"ip_address":"","ucode":"2332650D9C8D54","user_header":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","comment_is_top":false,"comment_ctime":1637467692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637467692","product_id":100039001,"comment_content":"* 是否要重复造轮子要看实际的业务场景<br>* 当已有的轮子性能或者适配不满足需求或当前的时候，需要重新造轮子<br>* 现成的工具类库，开源框架可以实现目前代码中需要的功能，并且性能也ok的时候，不需要重新造轮子","like_count":0},{"had_liked":false,"id":318536,"user_name":"everdmx","can_delete":false,"product_type":"c1","uid":2636498,"ip_address":"","ucode":"B4E641E8551806","user_header":"https://static001.geekbang.org/account/avatar/00/28/3a/d2/3b034726.jpg","comment_is_top":false,"comment_ctime":1635326068,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635326068","product_id":100039001,"comment_content":"首先要有造轮子的能力，其次要有不造轮子的觉悟","like_count":0},{"had_liked":false,"id":314888,"user_name":"fx","can_delete":false,"product_type":"c1","uid":2334235,"ip_address":"","ucode":"CA9066014707F3","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/1b/7abfa59f.jpg","comment_is_top":false,"comment_ctime":1633528309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633528309","product_id":100039001,"comment_content":"以学习为目的的情况下可以重复造轮子。业务开发中用现有框架与类库","like_count":0},{"had_liked":false,"id":313263,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632357714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632357714","product_id":100039001,"comment_content":"Kiss 尽量用简单的代码解决当前业余场景问题<br>Yagni 不要去做现在用不到的事情。<br>简而言之，结合业余场景，代码趋简单编写，现在没有未来可能有的场景要留扩展，但没必要有实现","like_count":0},{"had_liked":false,"id":307397,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1629082144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629082144","product_id":100039001,"comment_content":"造轮子，可以不重复造，但是得会","like_count":0},{"had_liked":false,"id":306764,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628693105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628693105","product_id":100039001,"comment_content":"你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br>答：多数的功能已经有很好的开源代码，可以借鉴过来使用。但是有时候自己有一些特殊的需求，比如对某些功能需要改动，追求特定场景的极致性能，这时候可以需要自己再修改，可能需要涉及自己写比较多的代码，但是也可以借鉴现成的开源代码","like_count":0},{"had_liked":false,"id":296369,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1622943925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622943925","product_id":100039001,"comment_content":"当现有的工具能满足你的需求的时候，就不要重复造轮子。反之，可以造轮子","like_count":0},{"had_liked":false,"id":295139,"user_name":"cosz3","can_delete":false,"product_type":"c1","uid":1218665,"ip_address":"","ucode":"B9023D4A088CF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/69/5a1c6620.jpg","comment_is_top":false,"comment_ctime":1622264126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622264126","product_id":100039001,"comment_content":"怎么样才算是重复造轮子，如果我改写了一个类中的方法，让它看起来更简单，直接一些。但是之前的的类使用的是一个比较奇怪的方式实现，这样算是在重复造轮子么？<br>如果重复造轮子和 KISS 原则有冲突，我们该如何取舍呢？","like_count":0},{"had_liked":false,"id":293226,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1621297400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621297400","product_id":100039001,"comment_content":"已经有好的轮子，尽量不造。除非轮子不满足业务要求，才需要自己来造<br>","like_count":0},{"had_liked":false,"id":285606,"user_name":"余生是你丿","can_delete":false,"product_type":"c1","uid":1671988,"ip_address":"","ucode":"A78FD91F62BFD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLPVZOVdgYW3UibldgrFZiaOxAxbAe2QuiaKICVMrjiaaSm76kH0evooDXiaNtBhLSEiaFRlHzwQZcxH8pA/132","comment_is_top":false,"comment_ctime":1616917773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616917773","product_id":100039001,"comment_content":"基于我目前所在项目的情况，我觉得是否重复造轮子的原因有两个：一是受限于自己的技术知识的广度，实现的内容可能可以通过工具类或框架可以实现，但技术本人不了解，就只能自己造轮子；二是项目开发中可复用性差，不同开发者在开发时没有可复用的思想，都是各写各的，这样就导致在相同场景，由于不同开发者实现而重复造轮子的现象。","like_count":0},{"had_liked":false,"id":285556,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1616895123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616895123","product_id":100039001,"comment_content":"尽可能去复用已有的框架，来解决自己的需求。  如果现有的框架覆盖不到你的需求，再去自己想办法实现。","like_count":0},{"had_liked":false,"id":280922,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1614484269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614484269","product_id":100039001,"comment_content":"团队成员不熟悉的技术我理解不是不要用，而是不能随便用。比如用模版渲染（smarty）的方式写前端 和 vue前后端分离，后者学习成本高，可能团队懂的人也少，但如果坚持用就会看到收效，但前提是要说服领导去推动团队去学习和使用。","like_count":0},{"had_liked":false,"id":280305,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614155905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614155905","product_id":100039001,"comment_content":"开发中重复造轮子是在所难免的，比如一个项目分多个模块，每个模块都单独写一个工具类比较好，避免过度引入依赖。<br>KISS原则：尽量简单的写代码。<br>YAGIN原则：写有用的代码。","like_count":0},{"had_liked":false,"id":279766,"user_name":"Geek_78eadb","can_delete":false,"product_type":"c1","uid":1712955,"ip_address":"","ucode":"843C6C380D28FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OYQh8KlUgMx0sZ35felqqRlboXkcOFib0qGgRHuvFCNIMzxRzxN8SjZpwtDuS0PGV0L0Pneiak7yzcd043f2efbg/132","comment_is_top":false,"comment_ctime":1613959766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613959766","product_id":100039001,"comment_content":"重复造轮子可以存在。<br>- 当已有的模块糟糕到无法重构时，我们可以重写这个模块。<br>- 当已有模块无法更改，效率无法满足需求时，也可以重写。","like_count":0},{"had_liked":false,"id":276149,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1611814179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611814179","product_id":100039001,"comment_content":"对于公司的项目来说尽量不要重复的去造轮子，因为自己写的bug确实很多，但是我们需要去读懂轮子背后的实现原理，可以快速的发现问题和解决问题，知其然知其所以突然，做到心中有数，比如我们平时在使用框架的时候，很有必要去熟悉框架的源代码，站在一个更加的高度看待问题。<br>KIss (keep it stupid and simple):<br>1、不用使用同事不懂的技术去开发，比如编写复杂的正则，读起来确实很费劲 <br>2、不要重复发明轮子，多看看有没有现成的包 <br>3、不要过度优化","like_count":0},{"had_liked":false,"id":269624,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1608718707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608718707","product_id":100039001,"comment_content":"如果面对模块是的系统性能的瓶颈，现有的工具类不能满足性能需求，就可以重复造轮子来大大提供系统性能。","like_count":0},{"had_liked":false,"id":267051,"user_name":"崔光伟","can_delete":false,"product_type":"c1","uid":1875245,"ip_address":"","ucode":"603FCACC5CFC1C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZMLfqpOHFbYF6Q31xgbKJ0FaO2ibFSqzyjV9gRlIYsnvGUcxYaG1eABJ5UupxVeda0yV0B3sBqDA/132","comment_is_top":false,"comment_ctime":1607583389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607583389","product_id":100039001,"comment_content":"KiSS原则是尽可能简单，YAGNI 原则只做当前要做的","like_count":0},{"had_liked":false,"id":260903,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1605149717,"is_pvip":false,"replies":[{"id":"96157","content":"������","user_name":"作者回复","comment_id":260903,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701567,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1605149717","product_id":100039001,"comment_content":"KISS就是杀鸡别用牛刀，<br>YAGNI就是要少而美。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509320,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122150,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","nickname":"万历十五年","note":"","ucode":"3D8CF5DF847AE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330843,"discussion_content":"抽象了😂\nKISS 代码保持简单，易于理解，设计和实现时别硬往“复杂”的模式和技术上套，这就是“杀鸡别用牛刀”；\nYAGNI 不要过度设计，在功能实现的基础上，代码“能少则少”，此为“少而美”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606721390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258079,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604287598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604287598","product_id":100039001,"comment_content":"使用已有的工具类，不要自己造轮子，实际上项目中确实会出现。甚至有的时候业务中也会有一些信息处理逻辑也是类似的，可以单独出来类似工具类一样支持类，有用到的话直接使用，这样以后业务逻辑修改也方便，不至于同样的修改，在好几处都要做。","like_count":0},{"had_liked":false,"id":256424,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603621246,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603621246","product_id":100039001,"comment_content":"肯定自己造的的轮子最‘香’，但造不造轮子看有没有需求，；用已有的轮子要理解原理，懂得使用场景以及轮子弊端，还要了解市场上更多的轮子。","like_count":0},{"had_liked":false,"id":253824,"user_name":"当你的世界里有风吹过","can_delete":false,"product_type":"c1","uid":2051946,"ip_address":"","ucode":"42712891366309","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","comment_is_top":false,"comment_ctime":1602907245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602907245","product_id":100039001,"comment_content":"是否要重复造轮子，要看此项目的紧急程度和开发功能的人员对已有的轮子的熟悉程度来决定！没有绝对的对错！如果是0到1项目，选择自己熟悉的方式。","like_count":0},{"had_liked":false,"id":250833,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1601256869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601256869","product_id":100039001,"comment_content":"造轮子的两个经典场景：复用现有工具成本大；晋级需要。","like_count":1},{"had_liked":false,"id":248773,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1600307604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600307604","product_id":100039001,"comment_content":"项目开发中因为要考虑到时间成本，因此不需要重复造轮子；但是，从个人成长角度看，业余时间专门琢磨怎么造轮子，即使是一个迷你版的轮子，也是非常有必要的。","like_count":0},{"had_liked":false,"id":247603,"user_name":"Harlan","can_delete":false,"product_type":"c1","uid":2134882,"ip_address":"","ucode":"F43595A0A00B19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","comment_is_top":false,"comment_ctime":1599754125,"is_pvip":false,"replies":[{"id":"91488","content":"这个只能意会不能言传了","user_name":"作者回复","comment_id":247603,"uid":"1190123","ip_address":"","utype":1,"ctime":1600671029,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1599754125","product_id":100039001,"comment_content":"KISS ：简单做   YAGNI：需要才做  <br>但大多数设计模式都是超前设计，也许项目初期根本用不到，那是否违背这两个原则，等需要用到的时候再重构？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505448,"discussion_content":"这个只能意会不能言传了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600671029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246872,"user_name":"Hua100","can_delete":false,"product_type":"c1","uid":1723325,"ip_address":"","ucode":"4E7A749C343E90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLeKVmTFdR2hQsCaNxxTK8wvnXXBayKLLoITqnbW9yjloAZWU99mOGaf1DkWqM6dol77aER9ickibA/132","comment_is_top":false,"comment_ctime":1599498083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599498083","product_id":100039001,"comment_content":"我觉得对于一个大公司而言，尤其是即将走向大公司或者有大公司格局的公司，应该造轮子，因为过度依赖其他公司，总是不好的事。尤其是根据现在的教训，一旦轮子的制造者不允许其他的公司用自己的开源库，则会措手不及。所以应该一遍用轮子，一遍造轮子，以备不测。","like_count":0},{"had_liked":false,"id":246394,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599307361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599307361","product_id":100039001,"comment_content":"说真的， 实际开发中，大部分时候都应该直接使用现成工具， 因为这些工具的稳定版本经过了大量的验证， 考虑过非常多的细节，   如果实在是因为定制化，或者处于对执行效率，和空间利用率敏感的时候， 那么不妨就自己造轮子吧， 毕竟通用的东西这时候就不满足需要了","like_count":0},{"had_liked":false,"id":246134,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599187192,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599187192","product_id":100039001,"comment_content":"1、重复造轮子，往往是因为团队内部沟通不及时造成<br>2、有定制化特殊要求，比如性能，比如数据的特征<br>3、通用的功能时，直接用现成的类库","like_count":0},{"had_liked":false,"id":245875,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599099727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599099727","product_id":100039001,"comment_content":"KISS原则，不是要一边亲嘴儿一边写代码，大多数程序员也没有这样的条件。KISS原则是“Keep It Simple and Stupid”的缩写，说人话就是不要炫技，写同事可能读不懂的代码。<br>别人不蠢，如果你总是觉得别人蠢，很大可能是因为你蠢<br>YAGNI原则是“You Ain’t Gonna Need It”的缩写，说人话就是不要过度设计，集中资源解决当前的问题。<br>YAGNI决定要不要做，KISS决定怎么做，核心思想都是为了保持代码的简洁。","like_count":0},{"had_liked":false,"id":238980,"user_name":"写代码的","can_delete":false,"product_type":"c1","uid":2085090,"ip_address":"","ucode":"F58186409A3D65","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","comment_is_top":false,"comment_ctime":1596396225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596396225","product_id":100039001,"comment_content":"我觉得主要考虑这几点吧：现有的轮子是否满足需求，现有的轮子质量如何，造出的新轮子是否会优于现有的轮子。<br>我们平常说的不要重复造轮子应该更多的指的是多人协作的实际项目，如果仅仅是为了练手自己去造一些重复的轮子，就自己用用，并不打算给别人用的那无所谓。","like_count":0},{"had_liked":false,"id":238261,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1596105008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596105008","product_id":100039001,"comment_content":"重复造轮子是不可避免的，开源框架往往大而全，有时候只需要一小部分功能却不得不引入整个框架包，这时候不如自己造轮子来得实在。","like_count":0},{"had_liked":false,"id":238007,"user_name":"阿狸爱JAVA","can_delete":false,"product_type":"c1","uid":1033566,"ip_address":"","ucode":"597971781B1500","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","comment_is_top":false,"comment_ctime":1596026016,"is_pvip":false,"replies":[{"id":"88018","content":"kmp算法，可以去看下数据结构和算法之美专栏","user_name":"作者回复","comment_id":238007,"uid":"1190123","ip_address":"","utype":1,"ctime":1596108828,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1596026016","product_id":100039001,"comment_content":"@Test<br>    public void getNextsTest(){<br>        String s = &quot;helloWorld&quot;;<br>        char[] chars = s.toCharArray();<br>        int[] nexts = getNexts(chars, 10);<br>        System.out.println(nexts);<br>    }<br><br><br>    &#47;&#47; b表示模式串，m表示模式串的长度<br>    private static int[] getNexts(char[] b, int m) {<br>        int[] next = new int[m];<br>        next[0] = -1;<br>        int k = -1;<br>        for (int i = 1; i &lt; m; ++i) {<br>            while (k != -1 &amp;&amp; b[k + 1] != b[i]) {<br>                k = next[k];<br>            }<br>            if (b[k + 1] == b[i]) {<br>                ++k;<br>            }<br>            next[i] = k;<br>        }<br>        return next;<br>    }<br>这个函数的意义是啥，为啥最后输出的结果是{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502612,"discussion_content":"kmp算法，可以去看下数据结构和算法之美专栏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596108828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235009,"user_name":"whyly","can_delete":false,"product_type":"c1","uid":1798882,"ip_address":"","ucode":"D34D6B7164C982","user_header":"https://static001.geekbang.org/account/avatar/00/1b/72/e2/95b0543c.jpg","comment_is_top":false,"comment_ctime":1594868835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594868835","product_id":100039001,"comment_content":"尽量不要自己造轮子，原因如下：<br>1.自己造轮子出bug的概率高，已有轮子一般都经过了长时间的验证，可靠稳定<br>2.降低了代码的可维护性，你造的轮子，你自己维护还可以，但是同事可能不明白你的设计思想，估计很难维护你的代码<br>3.对于项目周期紧张的项目，影响项目进度<br><br>需要造轮子的情况：<br><br><br>总结：<br>其实造轮子对于我来说，主要是用于帮我理解一些基础知识和设计思想，在实际项目开发中基本不会自己造轮子。","like_count":0},{"had_liked":false,"id":232400,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1593994375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593994375","product_id":100039001,"comment_content":"我保持开放的心态，基于“如无必要，切勿造轮子”的原则；如争哥所言，只有某些场景下，对性能&#47;速度要求甚高时，此时只能通过造轮子来解决；一般情况下，借用通用的类库来实现代码；","like_count":0},{"had_liked":false,"id":230488,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1593398950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593398950","product_id":100039001,"comment_content":"当你需要了解轮子原理和优化轮子,对轮子进行增强可以考虑重复造轮子。 现成的工具类库、开源框架都是经过大家验证可以放心使用的，当我们需要这个功能 ，自己造的时候成本大，就可以用它","like_count":0},{"had_liked":false,"id":229916,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1593187150,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593187150","product_id":100039001,"comment_content":"不用重复造轮子。但是得知道造轮子的方法去，这样才能更好的使用轮子","like_count":0},{"had_liked":false,"id":224649,"user_name":"未知数据","can_delete":false,"product_type":"c1","uid":1017545,"ip_address":"","ucode":"98CB28CCD5C2F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/c9/1be91547.jpg","comment_is_top":false,"comment_ctime":1591497043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591497043","product_id":100039001,"comment_content":"三种方法中，第二种更符合KISS原则。<br><br>就像所有原则都是正确的，但都需要在具体场景下做出取舍。我倒更偏向于第一种正则表达式的写法。<br><br>1. 正则表达式作为一种更加通用的编程工具，在大部分语言中都是支持的，对正则表达式的掌握应该是基础的，即使不那么精通。所以，顾虑有其他团队成员不了解的顾虑，应该很少。<br>2. 越简单的代码越容易维护，第一种方法中最核心的就是一行正则表达式。相比其他两种方法，大多数的程序员更容易理解其中的含义。<br>3. IP地址的合法性判断，这种代码几乎是一次写成，不会更改需求的。第一种方法可读性差的原因，可能是因为正则表达式，但对于不会怎么更改的代码，我倒觉得不是问题。<br><br>总之，对于IP地址判断这个需求，个人意见是，首选第一种方法，第三种方法确实有点过于优化，第二种使用现成的工具类，适合实现更容易发生变更的需求，更容易读懂更容易维护。","like_count":0},{"had_liked":false,"id":223441,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1591089370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591089370","product_id":100039001,"comment_content":"其实老师想表达的是 很多轮子已经历经多个商业和组织验证可靠可行，所以其他个人和组织没必要再次发次发明，除非组织和个人觉得现有的轮子完全不符合公司落地","like_count":0},{"had_liked":false,"id":220381,"user_name":"晓刚学代码","can_delete":false,"product_type":"c1","uid":1024743,"ip_address":"","ucode":"1E77DB86DB82BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/e7/3d96ea93.jpg","comment_is_top":false,"comment_ctime":1590230187,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590230187","product_id":100039001,"comment_content":"如果只是把现有类库的功能拷贝一边的轮子，我觉得还是没有必要。前段时间经常犯这个问题，有现成的类库不去使用，而非要自己造轮子。好像造出来了对自己的就会有很大的提高，现在想想如果造出来的并没有什么创造性的东西，只是代码堆叠和重复，那么不如使用现成的类库。","like_count":0},{"had_liked":false,"id":217745,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1589601260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589601260","product_id":100039001,"comment_content":"kiss原则感觉就是不要把简单的问题复杂化，但是简单和复杂的评判标准是主观的，需要多在工作中磨合才能掌握好这个度。","like_count":0},{"had_liked":false,"id":203067,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1586135448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586135448","product_id":100039001,"comment_content":"需不需要重复造轮子，主要是决定于轮子的使用频次和效率要求。如果对性能要求很高或使用频次很高（通常同时满足），比如日活过亿的电商购物平台的后台，每个轮子都要不断优化。但如果开发一个仅百余用户的定制化oa系统，应该尽量用现有轮子实现敏捷开发和快速迭代。","like_count":0},{"had_liked":false,"id":202747,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586062048,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586062048","product_id":100039001,"comment_content":"关于这个章节的学习，有了一个新的感悟：凡事都要有个度。这个度，在实际开发过程中是不容易把控的，在某些条件下，是OK的，在某些条件下，又是有问题的。这样的事情，在生活中也会经常出现，有点哲学的味道。对于在开发中的话，一切设计模式、设计原则或者代码架构，都应该结合具体业务，从而选择合适的方式进行开发。合适，不是一个容易的事情，但是通过大量经验和数据的学习，是可以把控的。这个就像机器学习一样，通过大量的数据训练，从而拥有智能的思维方式。","like_count":0},{"had_liked":false,"id":202153,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1585911544,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585911544","product_id":100039001,"comment_content":"【设计模式笔记21】20200403<br>YAGNI说的是要不要做，KISS是如何做，代码要尽量简单。这两个原则在实际的开发的指导意义在于，提前思考变化点然后预留出扩展点，以不变应万变。提前设计得好处是应对短期的变化提高代码得可扩展性和可维护性。KISS原则可能更具有指导意义，小到一个方法一个类，大到一个模块一个项目要做的事情都应该尽可能简单，简单的好处是不容易出问题，出了问题也好维护。从如何写出KISS的代码来讲，有三个维度：逻辑简单、可读性、可扩展性，逻辑简单指的一个方法只做一件事，逻辑不想干的方法拆分出去。可读性和可扩展性因人而异，但是有一点可以借鉴，能快速适应变化的代码","like_count":0},{"had_liked":false,"id":201928,"user_name":"banxiaobu","can_delete":false,"product_type":"c1","uid":1922242,"ip_address":"","ucode":"0FC00E5E90ACB8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","comment_is_top":false,"comment_ctime":1585878295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585878295","product_id":100039001,"comment_content":"轮子造不造，个人感觉首要的是你想清楚为什么要造，要怎么造？如果这俩问题都没想清楚，为了造而造，除去带来的bug之外，随着时间的推移，肯定是会被遗弃","like_count":0},{"had_liked":false,"id":201345,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1585753933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585753933","product_id":100039001,"comment_content":"重复造轮子这件事情，我觉得是这样的，如果你纯粹是为了想锻炼自己，想秀一秀肌肉，那么就去造吧，比较它确实可以让你有所提高，但前提是你不是在做项目的时候去重复造轮子，否则你的PM可能会把工期的延误降罪于你，而且你的这个轮子是不是好使，还需要经过一段时间的验证，如果把你这个轮子一起上了线而发现bug，那可能还会带来不可预测的风险或经济上的损失。。。","like_count":0},{"had_liked":false,"id":200740,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585645020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585645020","product_id":100039001,"comment_content":"1.重复造轮子更有可能是没有注意到现有代码已经实现过了。2自己需要理解原理的时候，最好自己造一个，不然看半天也是不懂。3项目中用到的技术，如果有现成的框架，还是不要自己造轮子，因为自己写的出错的概率更大<br><br>kiss 原则：Keep it sample and stupid 。总之不要搞得花里胡哨，不要炫技。<br><br>YANGNI 原则：你不需要这个东西。不要过度，提前引用框架，js，样式等等。","like_count":0},{"had_liked":false,"id":198308,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585443899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585443899","product_id":100039001,"comment_content":"KISS确实不好把握。","like_count":0},{"had_liked":false,"id":195504,"user_name":"黑客时间","can_delete":false,"product_type":"c1","uid":1831324,"ip_address":"","ucode":"7E22D76EECAC4D","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f1/9c/cd12361d.jpg","comment_is_top":false,"comment_ctime":1585191802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585191802","product_id":100039001,"comment_content":"在进行软件开发的时候，大部分情况下我们都是用别人已经造好的轮子，可以很方便，快捷的完成功能项目功能开发，不用关系底层的实现。一个优秀的程序员要知其然知其所以然。假如程序出现bug，在进行排查的时候，如果不了底层的实现原理，那么很快的修复bug就会变得很难。而重复早轮子可以让我们更清楚的了解所使用的框架的底层实现原理和流程，用起来更得心应手。程序出现问题，也可以快速定位问题点","like_count":0},{"had_liked":false,"id":194987,"user_name":"unlock","can_delete":false,"product_type":"c1","uid":1335403,"ip_address":"","ucode":"9B1F899B960A20","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/6b/907a9557.jpg","comment_is_top":false,"comment_ctime":1585125508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585125508","product_id":100039001,"comment_content":"我还记得有个盆友说过：如果不重复造轮子，怎么能会造轮子。","like_count":0},{"had_liked":false,"id":194463,"user_name":"白杨","can_delete":false,"product_type":"c1","uid":1743868,"ip_address":"","ucode":"B56DD94706F80B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9b/fc/a3abbe53.jpg","comment_is_top":false,"comment_ctime":1585060721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585060721","product_id":100039001,"comment_content":"写出机器编译执行通过的代码容易，写出让人容易理解看懂的代码不容易","like_count":0},{"had_liked":false,"id":188139,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584323875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584323875","product_id":100039001,"comment_content":"如果已有的轮子hold 不住，并且是系统非常核心的东西。可以重复造轮子","like_count":0},{"had_liked":false,"id":184149,"user_name":"rxliuli","can_delete":false,"product_type":"c1","uid":1813775,"ip_address":"","ucode":"557481BFA3F7B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JicGWj4ujfKW2BibbV2BIdiaRVv1SLMCjnriaHjhiaP9Ey751wBp8rwUxJI4Y7eZZb3eHTHbyLXUa8m3a4Dy0QIANTA/132","comment_is_top":false,"comment_ctime":1583238601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583238601","product_id":100039001,"comment_content":"其实不同语言实现起来也不一定需要库，下面是 ts 版本。。。<br><br>```ts<br>function checkIpV4(str: string) {<br>  const arr = str.split(&#39;.&#39;)<br>  if (arr.length !== 4) {<br>    return false<br>  }<br>  const res = arr.some((str, i) =&gt; {<br>    if (str.length &gt; 1 &amp;&amp; str.startsWith(&#39;0&#39;)) {<br>      return true<br>    }<br>    const v = Number.parseInt(str)<br>    if (i === 0 &amp;&amp; v === 0) {<br>      return true<br>    }<br>    return isNaN(v) || v &lt; 0 || v &gt; 225<br>  })<br>  return !res<br>}<br><br>console.log(checkIpV4(&#39;127.0.0.1&#39;))<br>console.log(checkIpV4(&#39;0.0.0.1&#39;))<br>console.log(checkIpV4(&#39;abc&#39;))<br>```","like_count":0},{"had_liked":false,"id":181424,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582538316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582538316","product_id":100039001,"comment_content":"在实际开发中,我也做过一些重复造轮子的事情,有的时候是没发现得心应手的工具类,有的时候是不知道有啥工具类可以用<br>我举一个我在开发中造轮子的经历,有一个业务,需要运维人员在外部配置文件设置资源存储目录,并且支持..&#47; .&#47;这类的动态地址,原本我想着可以直接用Java提供的URL类或者File类来直接做到解析地址,但是发现Java并不支持动态地址的解析,于是进一步,我考虑使用Spring提供的Resource接口来进行获取并存储资源,发现也不能进行动态解析,于是迫不得已,写了一个动态解析的配置类,并且在需要注入的类中的构造函数注入这个配置类,完成动态解析","like_count":0},{"had_liked":false,"id":181214,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582519926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582519926","product_id":100039001,"comment_content":"是否决定造轮子，仍然要基于项目去考虑。没有一段代码是适合任何运行环境的，当项目条件变得苛刻，例如文档规定必须在20ms内完成业务，可能就需要放弃现有轮子，根据业务特定重新设计，以求达到更好的性能。<br><br>当我们需要快速实现业务，优先采取成熟的框架，随着业务发展，框架开始不能满足需求，则需要额外针对业务特点，造轮子去，优化和重构。","like_count":0},{"had_liked":false,"id":177536,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1581412425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581412425","product_id":100039001,"comment_content":"代码评审时，其实KISS原则很好判断，就是代码是在解决问题还是在炫技。KMP解决底层性能瓶颈就是在解决问题，如果是在解决输入框匹配，就是在炫技。","like_count":0},{"had_liked":false,"id":176504,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1581073616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581073616","product_id":100039001,"comment_content":"关于重复造轮子这件事，我觉得当一段逻辑或者业务趋于稳定后才能考虑讲一些逻辑抽象成轮子供以后得代码使用，一开始就想着造轮子使用，有点过度设计了，可能还会违背KISS和YAGNI原则","like_count":0},{"had_liked":false,"id":176034,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1580916087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580916087","product_id":100039001,"comment_content":"工作中对于能满足需求的轮子就直接使用不要重复造了，平常工作中尽可能的使用社区活跃，开源的，并且大部分同事都会的工具类、开源框架比较好。<br>工作外的话，毕竟你重复造任何轮子都是可以提升自己的技术，每个人的精力都是有限的，既然如此选择造自己感兴趣或者能给自己面试带来帮助的轮子最合适。","like_count":0},{"had_liked":false,"id":174931,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1440599,"ip_address":"","ucode":"15E7715ADDABE3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/57/258a7ff6.jpg","comment_is_top":false,"comment_ctime":1580464005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580464005","product_id":100039001,"comment_content":"主要看轮子是否满足当前需求吧<br>","like_count":0},{"had_liked":false,"id":172604,"user_name":"www","can_delete":false,"product_type":"c1","uid":1275203,"ip_address":"","ucode":"951B364F2CB211","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/43/c6058200.jpg","comment_is_top":false,"comment_ctime":1579231625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579231625","product_id":100039001,"comment_content":"业务的核心功能部分如果遇到了性能瓶颈可以考虑重复造轮子，定制一个适合业务的轮子","like_count":0},{"had_liked":false,"id":170581,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1578638261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578638261","product_id":100039001,"comment_content":"都说重复造轮子不好，前提是你具备这个能力～","like_count":0},{"had_liked":false,"id":170395,"user_name":"刘学习来学习","can_delete":false,"product_type":"c1","uid":1464013,"ip_address":"","ucode":"5078B1EC8D8A66","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/cd/0add8290.jpg","comment_is_top":false,"comment_ctime":1578584821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578584821","product_id":100039001,"comment_content":"留好扩展点,感觉需要经验","like_count":0},{"had_liked":false,"id":169725,"user_name":"evalcony","can_delete":false,"product_type":"c1","uid":1401098,"ip_address":"","ucode":"D8CE3E832A7A10","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/0a/1e98cc81.jpg","comment_is_top":false,"comment_ctime":1578416479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578416479","product_id":100039001,"comment_content":"KISS其实是说，Keep It Easy Understand.<br>目的不在代码简洁，而在代码容易理解。<br>当从这个角度来理解时，效率、代码长度等等，根本不构成问题。我们只需要看一个做法是否牺牲了理解性。<br>而这也是为什么不要过度设计的真实原因，因为它牺牲了理解性，让代码更复杂。","like_count":0},{"had_liked":false,"id":169108,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578275235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578275235","product_id":100039001,"comment_content":"一、如何理解KISS原则<br>1.KISS原则意思就是：尽量保持简单，简单并不是以代码行数来考量的。代码行数越少并不代表代码越简单，还要考虑逻辑复杂度、实现难度、代码的可读性等。<br>2.本身就复杂的问题用复杂的方法解决，并不违背KISS原则。比如字符串匹配是某个产品的核心功能（比如Vim、Word等文本编辑器）又或者字符串匹配算法是系统性能瓶颈的时候，我们就应该选择尽可能高效的 KMP 算法。<br>3.同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。比如在日常开发中比较小的文本字符串匹配直接调用编程语言提供的字符串匹配函数就足够了，如果非得用KMP算法就不满足KISS原则了。<br><br>二、如何写出满足KISS原则的代码？<br>1.不要使用同事可能不懂的技术来实现代码。<br>2.不要重复造轮子，要善于使用已经有的工具类库。<br>3.不要过度优化。<br>同样的代码，有人觉得简单，有人觉得不够简单，但是自己编写的代码都会觉得简单。评判代码是否简单在code review的时候，如果同事对你的代码有很多疑问，那就说明你的代码可能还不够简单，需要优化。<br><br>三、YAGNI跟KISS说的是一回事吗？<br>1.概念：不要去设计当前用不到的概念；不要去编写当前用不到的代码。核心思想就是不要做过度设计。<br>2.YAGNI原则并不是说我们就不需要考虑代码的扩展性。<br>3.KISS原则讲的是如何做的问题（尽量保持简单），而YAGNI原则说的是要不要做的问题（当前不需要的就不要做）。<br><br>四、课堂讨论<br>日常开发中要看具体的情况来决定是否重复造轮子，比如使用Integer.paser(&quot;1&quot;)就能做到转换成Integer，这时候不需要去重复造轮子操作底层字符来转换了。如果项目中有个地方性能要达到极致，已有的轮子满足不了需求，这时候就需要自己去定制轮子了。从另一方面来说轮子用的好不好，还要要看自己了解的深入程度，所以还是要多去理解底层原理的。","like_count":0},{"had_liked":false,"id":168907,"user_name":"程晓擘","can_delete":false,"product_type":"c1","uid":1328354,"ip_address":"","ucode":"96986D5AE2B96C","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","comment_is_top":false,"comment_ctime":1578213857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578213857","product_id":100039001,"comment_content":"使用有名的开源库","like_count":0},{"had_liked":false,"id":168622,"user_name":"yin","can_delete":false,"product_type":"c1","uid":1711450,"ip_address":"","ucode":"9F3D55A1D435A2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1d/5a/937f0d4c.jpg","comment_is_top":false,"comment_ctime":1578125002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578125002","product_id":100039001,"comment_content":"只有造了轮子，才能知道自己的轮子有多烂","like_count":0},{"had_liked":false,"id":167583,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1577868308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577868308","product_id":100039001,"comment_content":"很棒 简洁明了<br>","like_count":0},{"had_liked":false,"id":166394,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1577441048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577441048","product_id":100039001,"comment_content":"什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br>回复：当轮子不满足你跑的时候，就需要换轮子了。尽量使用大家都熟悉和知道的工具类库和框架。","like_count":0},{"had_liked":false,"id":165982,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1442334,"ip_address":"","ucode":"756FB230C53F9A","user_header":"https://static001.geekbang.org/account/avatar/00/16/02/1e/2816c98e.jpg","comment_is_top":false,"comment_ctime":1577356608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577356608","product_id":100039001,"comment_content":"不要重复造轮子，但是要知道这个轮子是怎么造出来的","like_count":0},{"had_liked":false,"id":165882,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1577339798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577339798","product_id":100039001,"comment_content":"&#47;&#47; b表示模式串，m表示模式串的长度private static int[] getNexts(char[] b, int m) { int[] next = new int[m]; next[0] = -1; int k = -1; for (int i = 1; i &lt; m; ++i) { while (k != -1 &amp;&amp; b[k + 1] != b[i]) { k = next[k]; } if (b[k + 1] == b[i]) { ++k; } next[i] = k; } return next;} 为什么要写这一步","like_count":0},{"had_liked":false,"id":165817,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1577326110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577326110","product_id":100039001,"comment_content":"这个 原则听起来很对，但是站在程序员的角度是不是不太友好。<br>日常开发，尤其是业务逻辑的开发，如果本着简单的原则来，基本上用不上什么高大上的技术，依赖什么组件基本上有单独的基础架构部门提供好了，那么我们怎么去联系技术，怎么提升技术呢","like_count":0},{"had_liked":false,"id":164916,"user_name":"AaronChun","can_delete":false,"product_type":"c1","uid":1027352,"ip_address":"","ucode":"0D4A4CBD676A3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/18/41831eae.jpg","comment_is_top":false,"comment_ctime":1577111275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577111275","product_id":100039001,"comment_content":"对于重复造轮子这事，结合实际工作来讲，当需求不能被当下现有的技术架构所满足，“逼不得已”时去造个适应新业务的轮子。基于这点造出的轮子，才能真正的落地，有计划有目的有场景，个人觉得这几点缺一不可，不然就是纸上谈兵，为了造轮子而造轮子。在造轮子的过程中，也不要特立独行彰显个性，要以用时短、运行稳定为前提，吸收或者运用现有的成熟技术组件去满足自己的需求，将造轮子这件事情模块化，成本就会大大降低，维护性也会好很多。","like_count":0},{"had_liked":false,"id":164664,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1577068352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577068352","product_id":100039001,"comment_content":"有空自己做编码提升的时候, 重复早轮子这个最合适了. 比如我最近有空开发的一个图表框架, 就是一个很好的轮子, 而且我觉得造得比很多人的轮子都好. 大家喜欢的可以start一下😂. 地址: https:&#47;&#47;github.com&#47;cocos543&#47;CCTrendCharts","like_count":0},{"had_liked":false,"id":164290,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1576926229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576926229","product_id":100039001,"comment_content":"我觉得除非已有的工具或者类实在不满足功能需求才造轮子，否则还是用现成的吧，毕竟自己写的没有经过大量的，全面的，系统的测试，可能会有很多bug造成不必要的麻烦","like_count":0},{"had_liked":false,"id":163903,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1576823147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576823147","product_id":100039001,"comment_content":"重复造轮子：<br>1.对现有的各种轮子研究清楚了吗，有哪些优缺点，是否可以满足你的需求。<br>2.如果不可以满足你的需求，是否可以稍加定制，就可以满足你的需求。<br>3.如果还不可以你的需求，经过研究和分析，你去造就行了。<br>造轮子是为了解决切实的需要，不是为了炫技，当然不排除政治需要。","like_count":0},{"had_liked":false,"id":163778,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1576802462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576802462","product_id":100039001,"comment_content":"老师是典型的思从深而行从简，属于精致的工笔画派，<br>而我猜好多人一定和我一样喜欢写意的豪放派（当然不喜欢别人豪放，而是自己喜欢汪洋自肆，O(∩_∩)O哈哈~）<br>前者便于一群人同行，走的更远（修的是大乘佛法）<br>后者适于一人独行，短期走的很快（往往死也得快）","like_count":0},{"had_liked":false,"id":163759,"user_name":"居培波","can_delete":false,"product_type":"c1","uid":1437396,"ip_address":"","ucode":"27A5A8D9D4682B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/d4/204d0c6d.jpg","comment_is_top":false,"comment_ctime":1576800932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800932","product_id":100039001,"comment_content":"如何在设计时考虑扩展这点不好把握。轮子不能满足当下业务应用场景就要造了。","like_count":0},{"had_liked":false,"id":163622,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1576756596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576756596","product_id":100039001,"comment_content":"打卡<br>KISS原则：尽量保持简单（Keep It Simple and Stupid）。<br>1、 不是代码少就符合kiss原则，也不是逻辑复杂就不符合kiss原则，需要根据使用场景来做相应的选择；<br>2、在实际开发中要注意：\t<br>   1）尽量不要使用同事可能不懂的技术来实现代码。如：正则表达式、高级的语法等<br>   2）不要重复造轮子，尽可能使用已有的类库和工具；<br>   3）不要过度的优化，牺牲代码的可读性；<br><br>YAGNI 原则：不要做过度的设计（You Ain’t Gonna Need It）<br>不要去设计当前用不到的功能；不要去编写当前用不到的代码<br>","like_count":0},{"had_liked":false,"id":163424,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1576719962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576719962","product_id":100039001,"comment_content":"觉得大厂才有人力来重复造轮子，但也要符合业务场景。在小公司需求都做不完的情况下重复造轮子就是浪费资源。最后，最好的造轮子情景应该是自己瞎折腾吧哈哈哈","like_count":0},{"had_liked":false,"id":163398,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1576717223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576717223","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163388,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1576716333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576716333","product_id":100039001,"comment_content":"轮子不能满足需求的时候。能满足需求的时候不需要重复造轮子，拿字符串判空来说，我们有需要每个项目都自己写一个？个人觉得没有太大必要","like_count":0},{"had_liked":false,"id":163382,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1576715537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576715537","product_id":100039001,"comment_content":"如果简单的拓展无法很好满足需求，可能还是自己参考轮子的设计思想，自己重复造一个比较好。<br><br>基本上还是开发效率上的考量","like_count":0},{"had_liked":false,"id":163252,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1576675918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576675918","product_id":100039001,"comment_content":"争哥的判断 IPV4 地址是否合法，不适用工具类的方法判断这种 IP 地址：172.16.254.01 为 true，实际上应该是 false。我做了一点改动：<br> public boolean isValidAddressV3(String address) {<br>        char[] ipChars = address.toCharArray();<br>        int unitsCount = 0;<br>        int ipUnitInitValue = -1;<br>        boolean isUnitFirst = true;<br><br>        for(int i = 0; i &lt; ipChars.length; i++) {<br>            char c = ipChars[i];<br>            if(c == &#39;0&#39; &amp;&amp; i == 0) return false;<br><br>            if(c == &#39;.&#39;) {<br>                if(ipUnitInitValue &lt; 0 || ipUnitInitValue &gt; 255) return false;<br>                &#47;*if(isUnitFirst &amp;&amp; ipUnitInitValue == 0  ) return false;<br>                if(isUnitFirst) isUnitFirst = false;*&#47;<br>                ipUnitInitValue = -1;<br>                unitsCount++;<br>                continue;<br>            }<br>            if(c &lt; &#39;0&#39; || c &gt; &#39;9&#39;) return false;<br>            if(c == &#39;0&#39; &amp;&amp; i+1 &lt; ipChars.length &amp;&amp; ipChars[i+1] &gt;= &#39;0&#39; &amp;&amp; ipChars[i+1] &lt;= &#39;9&#39;) return false;<br>            &#47;&#47; 如果以 0 开头后面的数字不能跟上 0 -9 之内的数字。<br>            if(ipUnitInitValue == -1) ipUnitInitValue = 0;<br>            ipUnitInitValue = ipUnitInitValue * 10 + (c - &#39;0&#39;);<br>        }<br>        if(ipUnitInitValue &lt; 0 || ipUnitInitValue &gt; 255) return false;<br>        if(unitsCount != 3) return false;<br>        return true;<br><br>    }<br>另外送上 leetcode 上判断 IP 地址题目一道：https:&#47;&#47;leetcode.com&#47;problems&#47;validate-ip-address&#47;","like_count":0},{"had_liked":false,"id":163050,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1576647832,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576647832","product_id":100039001,"comment_content":"如果是满足业务需求的话，可以用已有的轮子，不要轻易去重复造轮子，如果已有轮子不满足需求时，是需要重复造轮子的。","like_count":0},{"had_liked":false,"id":163029,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1576643360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576643360","product_id":100039001,"comment_content":"一切从实际出发，很多时候编码的过程中会发现，复杂的东西越少越复杂，而简单的东西呢，越敲越简单。很多项目中简单的复杂业务问题，都是问题没想透彻，最后会发现出bug最多的，也是那部分。","like_count":0,"discussions":[{"author":{"id":2856239,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/95/2f/d88950a1.jpg","nickname":"颜如玉","note":"","ucode":"C55FDAE3559054","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590949,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666184664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1666025,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","nickname":"雨落～紫竹","note":"","ucode":"33CED2F34E708F","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583883,"discussion_content":"Mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660463843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1843734,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/22/16/a94ea4da.jpg","nickname":"预测师","note":"","ucode":"6EA12E34ECCF32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580229,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658026169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562420,"discussion_content":"看了你的评论突然理解了桥接模式，这么说前后端分离也是一种桥接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649821309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2513538,"avatar":"https://static001.geekbang.org/account/avatar/00/26/5a/82/e7645e78.jpg","nickname":"树上的妖怪","note":"","ucode":"D961931BDE65D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554441,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646381330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2719989,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJFPECFrx6sL90QB3SVeKjMOZibic4Wp09qcH4G8hK9uuGomGU8ElTrOprs7KuMVUUYRcP4fjze8o2w/132","nickname":"黄钰宸","note":"","ucode":"A79A37F1DC6040","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539763,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639834677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134567,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/e7/7e51052a.jpg","nickname":"fumeck.com🍋🌴summer sky","note":"","ucode":"6349BF32257990","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534121,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638102948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2475056,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c4/30/711b03e5.jpg","nickname":"Geek_Candice","note":"","ucode":"0F2CBCF624F905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403102,"discussion_content":"插眼🚩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634007556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399744,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633051748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379155,"discussion_content":"大拇指","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623730129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050018,"avatar":"https://static001.geekbang.org/account/avatar/00/10/05/a2/721ae4c6.jpg","nickname":"Jervis","note":"","ucode":"86C02C483449CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377471,"discussion_content":"学习了👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622680593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294125,"discussion_content":"服务提供者框架的定义，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595800696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290503,"discussion_content":"争哥：课代表就是你了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594516669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253350,"discussion_content":"总结很到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588228738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163019,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1576640740,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576640740","product_id":100039001,"comment_content":"对这俩原则的理解和应用总是觉得差点意思，现在清楚了！","like_count":0},{"had_liked":false,"id":163000,"user_name":"ismind","can_delete":false,"product_type":"c1","uid":1138710,"ip_address":"","ucode":"7AADD673ED3BC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/16/d1dd4972.jpg","comment_is_top":false,"comment_ctime":1576638744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576638744","product_id":100039001,"comment_content":"一、如何看待开发中重复造轮子？<br>1，如果自己造轮子的成本很高，那是没有必要的<br>比如数组的排序，你非要自己去写个排序函数，而不去使用Arrays.sort，<br>这就没有必要了。<br>2，如果逻辑简单，那都可以呀，比如返回二者中的最大值<br>用Math.max，或者return a &gt;= b ? a : b,都是可以的。<br><br>二、什么时候要重复造轮子？<br>不好意思，自己的开发经验的确少，这个我答不上来，<br>但是我想了一下，既然要重复造轮子，说明别人的轮子就不适合目前的需要，<br>所以要重复造，而且对应的需求即使反复用同一个轮子，也还是需要做一些修改，<br>那么还不如自己造轮子。至于是什么具体情况，那么我真的答不上来了。<br><br>三、什么时候应该使用现成的工具类库、开源框架？<br>1，这个就很好回答了，比如数组的排序，判空。<br>2，还有对数据库的操作，你就需要用MyBatis了，或者其他，<br>不然，你自己去弄一大堆的配置以及其他操作，而且还有错，还不如框架弄的简单又准确。","like_count":0},{"had_liked":false,"id":162999,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1576638737,"is_pvip":false,"replies":[{"id":"62271","content":"这个要根据团队具体来看 还要根据新技术的渗透情况来决定 一个新技术开始可能是奇技淫巧 等过两年都接受了 可能就算不上了","user_name":"作者回复","comment_id":162999,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797884,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1576638737","product_id":100039001,"comment_content":"奇技淫巧，问一下  Lambda，和Stream  以及  int ... a; 这些  哪个算是尽量别用的奇技淫巧呢？ 为什么团队里，有的人把Stream+Lambda 一行写完的代码，分了五六行去写。谁是对的？","like_count":0,"discussions":[{"author":{"id":1206229,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","nickname":"Gopher","note":"","ucode":"3C1F9012BB486D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313237,"discussion_content":"观察者模式不在乎 执行者的顺序，而责任链的执行可能是有顺序上的要求的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603009781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162984,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1576637495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576637495","product_id":100039001,"comment_content":"关于重复造轮子这个问题，1.浪费时间 2.出bug的几率高。什么时候适合造轮子？使用的这个东西是性能瓶颈的时候，也没有好的替代品，此时考虑自研","like_count":0},{"had_liked":false,"id":162963,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1576635316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576635316","product_id":100039001,"comment_content":"重要且简单，当不是人人都能做到的原则，我就不懂他们怎么想的。","like_count":0},{"had_liked":false,"id":162952,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1576634050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576634050","product_id":100039001,"comment_content":"当轮子不能满足当前需求，可以自己造轮子。或者公司需要定制，也可以。","like_count":0},{"had_liked":false,"id":162948,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1576633773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576633773","product_id":100039001,"comment_content":"课堂讨论：你怎么看待在开发中重复造轮子这件事情？什么时候要重复造轮子？什么时候应该使用现成的工具类库、开源框架？<br><br>Answer：<br>在实际项目的开发中，我赞同“不要重复造轮子”这种看法。重复造轮子会导致bug风险，项目解构臃肿，维护成本增加等问题。<br><br>什么时候要重复造轮子，我认为当现有轮子无法满足业务需求，或现有轮子存在不可挽回问题的情况下，参考YAGNI原则，确定真的需要时，再做造轮子的决定。<br><br>另本次课程的验证ip方法的例子我有不同看法：<br>我认为使用正则表达式实现的方式优于其他两种方法。首先业务需求是确定的：验证ip地址合法。而正则表达式就是做模式匹配的，虽然语法晦涩，但通过单测后就再也不需要动它了。而且根据KISS原则，正则实现拥有行数少，逻辑复杂度低，实现难度容易的优点。<br>","like_count":0},{"had_liked":false,"id":162945,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1576633268,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576633268","product_id":100039001,"comment_content":"我觉得重复造轮子有时候还是无法避免的。我们为什么会有那么多需要重复造轮子的地方呢？因为所有好的代码都不是写出来的，而是通过不断修改完善优化出来的。正常情况下写代码的时间占比在 40%，修改完善代码的时间占 60 % 。很多需求，并不是跟着自己的思想走，所以很多时候，有复用的功能，但是复用的细节又是不同的，这时候，就存在重复造轮子了，也就需要设计模式的思想来做优化。<br><br>工具类确实是个好东西，但是也得适当的使用。就像文中老师说的，“我发现，有些同事为了避免开发中 library 包缺失而频繁地修改 Maven 或者 Gradle 配置文件”，有时候可能就是为了实现某个功能而引入了工具库，但是大部分又是不需要的，那还不如自己深挖源码，把需要的功能实现出来更好，有效防止过度无效的包引入，无形之中增加包的大小。<br><br>开源框架亦是如此。如果用到，还是先搞清楚框架的功能，和业务的匹配程度再进行考量。如果是网络请求框架这类，那是提倡加入，把当前所有请求都用框架实现，会省去一些工作；这里我自己做的也不好，所以也只能聊这么多啦。","like_count":0},{"had_liked":false,"id":162937,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1576632415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576632415","product_id":100039001,"comment_content":"重复造轮子——有时候是业务之间的相互倾轧导致的，不同的部门为了相同的利益，不得不这么做。","like_count":0},{"had_liked":false,"id":162921,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1576631258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576631258","product_id":100039001,"comment_content":"对于文中的思考题，个人觉得学习某个类库或者框架的时候可以适当的重复造轮子，这样可以提高对框架的理解，这样在实际的开发中可以知道这个“轮子”哪里好，哪里不好。有时候很多类库和框架在某些业务场景下是不满足自己的业务需求的，这时候可能需要自己扩展。","like_count":0},{"had_liked":false,"id":162915,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1576631035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576631035","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":162887,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1576628889,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1576628889","product_id":100039001,"comment_content":"个人认为应该先从自己遇到的问题并结合问题所在的场景来考虑是自己实现还是使用现有的工具框架，比如如果现有的工具框架在解决问题时完全不能满足性能要求，并且这个问题没那么紧急，那么可以自己做个轮子，反之就应该考虑是否可以使用现有工具类库来解决问题。在使用现成的工具类库和开源框架时也要了解清楚其缺陷，这些缺陷是否会产生巨大影响，比如如果开源工具有重大安全漏洞，那还是不要用得好。","like_count":0},{"had_liked":false,"id":162880,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1576628089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576628089","product_id":100039001,"comment_content":"学习过程、软件项目管理也是如此。简化，剪枝（取舍），两者都要具体问题具体分析。","like_count":0},{"had_liked":false,"id":162878,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1576628009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576628009","product_id":100039001,"comment_content":"过度的造轮子会过而不及，现成的能满足需求的，自然是用现成的比较好，但对于我们个体而言，想要技术提高，也不能只用现成的轮子，应该是模仿轮子，学习吸收它的精华，自己学会造轮子，当然对于公司而言，为了项目的稳定和快速的盈利，自然是用现有的稳定的轮子更合适","like_count":0},{"had_liked":false,"id":162877,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1576627928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576627928","product_id":100039001,"comment_content":"除非是为了学习，否则没有重复造轮子的必要性，因为都说了是“重复”😂","like_count":0},{"had_liked":false,"id":162871,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1576627355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576627355","product_id":100039001,"comment_content":"如果工具类和开原类库里有大量无用的方法的时候就没必要使用，不能就用一两个引入一百个。","like_count":0},{"had_liked":false,"id":162865,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1576626653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576626653","product_id":100039001,"comment_content":"1.如果需要的功能，已经有现成的东西，并且接入成本低，后期可能自定义也不多，那就不要造轮子了。<br>2.但是如果需要的功能，现在的只能满足一半，或者本身自定义的需求就比较高，那还是要造一下轮子，否则迟早不满足业务。<br>对于正则表达式有点疑问，看到项目里面其实用的还挺多，但是没那么复杂。","like_count":0},{"had_liked":false,"id":162862,"user_name":"王钰淇","can_delete":false,"product_type":"c1","uid":1061163,"ip_address":"","ucode":"3160E0F04909E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/2b/d2b4336e.jpg","comment_is_top":false,"comment_ctime":1576626445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576626445","product_id":100039001,"comment_content":"需要重复造轮子的场景:<br>1.轮子处为性能瓶颈，需要进行性能优化。<br>2.轮子太大太复杂，依赖太重，而也许场景只需要其很少一部分功能，单独实现情况下可读性可维护性更好。<br>3.考虑到特定轮子的可测试性和可扩展性，单独实现易于测试分层和功能扩展。","like_count":0},{"had_liked":false,"id":162857,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1576625314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576625314","product_id":100039001,"comment_content":"可以说《unix编程艺术》整本书都是在阐述kiss这一设计原则。不过像老师说的，看完依然不知道什么样的代码叫简单。如书中所说，unix编程艺术更多是一种文化。文化？可能是我文化程度低吧。<br><br>这种抽象的原则最难把握了。","like_count":0},{"had_liked":false,"id":162856,"user_name":"樵牧","can_delete":false,"product_type":"c1","uid":1066878,"ip_address":"","ucode":"1F6DE42617C6EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/7e/b47946cd.jpg","comment_is_top":false,"comment_ctime":1576625313,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1576625313","product_id":100039001,"comment_content":"Kiss还是比较容易一起争论。特别是过度设计这一点。昨天就跟同事吵起来了。我说，这里需要有个扩展点，而且这个扩展点不会让代码复杂太多。他说，这样子就不够清爽了。","like_count":0,"discussions":[{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312837,"discussion_content":"我ri 看不懂 这是我看到现在第一个 完全不知道有什么存在价值的模式。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602830087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028924,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b3/3c/81a3a00c.jpg","nickname":"Saber","note":"","ucode":"CAB1C0314BAAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257878,"discussion_content":"这是高手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588607681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}