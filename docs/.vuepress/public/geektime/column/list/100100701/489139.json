{"id":489139,"title":"26｜进程是如何使用操作系统内存的？","content":"<p>你好，我是于航。</p><p>对于计算机软件的正常运作，内存（Main Memory）所发挥作用的重要性不言而喻。无论是处在“幕后”的操作系统，还是位于“台前”的用户应用程序，它们在运行时都会将所需数据从磁盘等外部存储器转移至内存。实际上，内存和 CPU 芯片上的 L1、L2 等高速缓存，一同构成了计算机中用于支撑程序高效运行的缓存系统。</p><p>今天，我们会先从整体的视角看看内存在计算机系统中的作用，然后再一起探究进程是如何在操作系统的控制下与计算机内存交互的。</p><h2>计算机内部的缓存系统</h2><p>通常，文件会被存放在容量较大的磁盘中。但磁盘作为一种提供数据持久化存储的设备，采用了机械式的数据寻址方式，这就使得它<strong>无法匹配 CPU 在完成相关操作时，所需数据在访问速度上的要求</strong>。而内存则以快于磁盘几万甚至十几万倍的读写效率，承担起了与 CPU 直接交互的重任。</p><p>但随着摩尔定律的不断应验，CPU 与内存两者在数据访问效率的“供需关系”上又出现了问题。因此，现代计算机通过在这两者之间引入更多读写速度更快，容量却更小的高速缓存层，并基于局部性原理，让 CPU 经常使用到的数据可以被更快地再次访问。通过这种方式，<strong>由 L1、L2 等片上高速缓存</strong><strong>，</strong><strong>以及内存组成的缓存系统，便成为了计算机中用于承载应用运行时数据的主要部件</strong>。</p><!-- [[[read_end]]] --><p>网上有一个十分形象的例子，描述了内存在整个计算机系统中的“地位”：假设你作为负责人，每天都在一间专属办公室里处理各种事务。办公室内有一个硕大的档案柜，里面存放着你有权限接触的所有办公材料。当每一次需要处理某个具体事务时，你都会首先将需要的相关材料一次性地从档案柜中全部拣选出来，并将它们陈列在书桌上，然后再继续进行处理。而随着时间的推移，那些经常被翻阅的、相关性较强的材料会被摆放在距离你手边较近的位置，而相关性较弱的材料则会被放在较远的位置。</p><p>将这个例子类比到计算机，你会发现两者之间有着类似的行为模式。每一个程序的机器代码（事务）在可以被 CPU（负责人）正常执行前，操作系统都需要先将它们从磁盘（档案柜）“搬移”到内存（书桌）中。而随着程序的不断运行，那些被经常访问的数据便会被存放到较高级别的缓存（较近位置）中。相反，不常用的数据则会被存放在较低级别的缓存（较远位置），甚至驻留在内存中。</p><p>但是，对计算机而言，程序与内存之间的交互细节远比“办公室日常”要复杂得多。现代操作系统会同时执行十几个甚至几十个程序。因此，如何从有限的内存中合理地为它们分配所需资源，并同时兼顾安全性、高效性，便成为需要考虑的首要问题。</p><p>现代计算机通过名为“虚拟内存”的机制，做到了这一点。下面，我们来进一步看看这个机制的具体工作原理。</p><h2>虚拟内存机制</h2><p>顾名思义，虚拟内存（Virtual Memroy）对应于物理内存（Physical Memory）。其中，前者是由操作系统抽象出来的一个概念，它在后者的基础之上进行了一层抽象，以帮助运行于其上的应用程序合理地分配内存，并管理内存使用。</p><p>因此，如下面的代码所示，我们在应用程序中打印出的各种指针值，它们实际上都对应于虚拟内存中的某个地址，而非实际的物理内存地址（Physical Address，PA）。这些地址被称为“虚拟地址（Virtual Address，VA）”。所有程序可以使用的虚拟地址则构成了虚拟地址空间（VAS）。</p><pre><code class=\"language-bash\">#include &lt;stdio.h&gt;\nint main(void) {\n  int x = 10;\n&nbsp; printf(\"%p\", &amp;x);&nbsp; // 0x7fff32cf54fc.\n&nbsp; getchar();\n&nbsp; return 0;\n}\n</code></pre><p>CPU 在访问内存中的数据时，会借助其芯片上名为“内存管理单元（MMU）”的硬件，首先将虚拟地址动态翻译为对应的物理地址，然后再进行实际的数据获取。你可以通过下图来直观地理解这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/33/95352d3362a6569133153c1ace5b1833.jpg?wh=1920x571\" alt=\"图片\"></p><p>虚拟内存机制的一个最重要特征，就是<strong>为每一个应用程序进程都抽象出了独立于物理内存的虚拟地址空间</strong>。这意味着，从进程的角度来看，它可以独享整个计算机上的所有内存。现代操作系统通常采用 32 或 64 位地址空间，两者分别拥有 $2^{32} $ 与$2^{64}$个地址。通过这种方式，编译器在构建应用时，便不需要考虑各二进制数据段应该被实际加载到内存中的何处，所有应用均可使用统一的静态文件结构。</p><p>比如，在 64 位 Linux 系统中，与应用代码相关的 Segment 会从 VAS 的固定地址 0x400000 处开始加载。而其他 Section 内容将在满足一定对齐要求的情况下，按顺序被连续加载到高地址方向的虚拟内存中。这样，无论是程序在二进制文件内的静态视图，还是被加载到 VAS 后的运行时视图，它们都可以在虚拟内存的隔离下，在表现层有着稳定一致的布局。</p><p>而通过下面这行命令，我们便可以查看某个运行进程的 VAS 布局情况。注意，其中的 “<pid>” 需要被替换为进程对应的 ID。</pid></p><pre><code class=\"language-bash\">cat /proc/&lt;pid&gt;/maps\n</code></pre><p>这里，我们尝试将本小节开头处的那个 C 程序的 ID 替换到上述命令中。在运行该命令后，可以得到如下图所示的输出结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/64/f5626dd486fed604c418d8a3a1554164.png?wh=1406x712\" alt=\"图片\"></p><p>这里，命令按照地址由低到高的顺序打印出了进程 VAS 内，每一块已经被占用的连续虚拟内存地址，对应的映射信息。如最右侧一列所示，这些内存中的内容或是来自于某个具体文件（/www/workspace/main），或被用作其他用途（[heap]）。</p><h3>VAS 中的数据布局</h3><p>将上图中的信息进行归类，我们可以得到如下图所示的 Linux 进程在 VAS 内的统一数据布局结构。这里我根据类别，将不同的数据用不同的颜色进行了标注。并且，为了方便你找到这两个图之间的内存段对应关系，我将上图中的一些关键性地址信息也选择性地标注在了下图中。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/0e/7b63dce096e20e31731c354dc6d2e70e.jpg?wh=1920x2125\" alt=\"图片\"></p><p>总的来看，Linux 进程 VAS 中的数据，按照地址由低到高的顺序，可以被分为下面这几个主要部分。</p><ul>\n<li><strong>LOAD Segments</strong>：这部分数据被加载到从地址 0x400000 开始的虚拟内存中。其主要内容为应用程序 ELF 二进制文件内定义的各种 LOAD Segment 结构。按照顺序，与代码相关的 Text Segment（包含 .text、.rodata 等多个 Section）位于最低地址处，紧接着为包含有已初始化和未初始化数据的 Data Segment（包含 .data，.bss 等多个 Section）。</li>\n<li><strong>堆（Heap）</strong>：关于堆内存，我已经在 <a href=\"https://time.geekbang.org/column/article/471937\">08 讲</a> 中介绍过。随着动态数据的不断产生，它将向 VAS 的高地址方向不断增长。</li>\n<li><strong>共享库数据</strong>：这部分内存中包含有与各类 .so 共享库相关的数据，程序会在运行时通过动态链接器来完成对它们的加载和处理。我会在第 29 讲再为你详细介绍。</li>\n<li><strong>栈（Stack）</strong>：关于栈内存，我已经在 <a href=\"https://time.geekbang.org/column/article/468171\">05 讲</a> 中介绍过。随着各种局部变量的不断产生，它将向 VAS 的低地址方向不断增长。</li>\n<li><strong>用于系统调用加速的内核数据</strong>：接下来的三个虚拟内存区域 [vvar]、[vdso]，以及 [vsyscall] 中包含有操作系统内核的代码和数据结构，它们主要提供了用户进程可以直接与内核进行交互的接口。其中，[vvar] 中包含有只读的内核数据。而另外的 [vdso] 与 [vsyscall] 则包含有用于辅助操作系统，加速用户进程执行某些系统调用过程的信息。</li>\n<li><strong>其他内核数据</strong>：除此之外，在进程 VAS 的高地址处，还可能包含有与当前进程相关的各种数据结构。甚至，该区域内的某段虚拟内存页还会被直接映射到某段被所有进程共享的物理内存页上（比如用于 MMIO）。</li>\n</ul><p>可以看到，得益于虚拟内存机制的抽象，进程可以使用完全统一、独立的内存数据布局，而不用考虑这些数据在真实物理内存中的具体存储细节。那么，虚拟内存机制究竟是如何对物理内存进行管理的呢？接下来我们具体看看。</p><h3>使用页表维护虚拟页状态</h3><p>为了保证效率，操作系统通常会以“页”为单位，来在磁盘与内存之间传递数据。而实际上，它也正是通过为每一个进程提供独立的“页表”结构，来维护 VAS 中的虚拟页在对应物理内存中的映射状态的。</p><p>页表本身被维护在物理内存中，其内部由众多的“页表项（Page Table Entry，PTE）”组成。进程 VAS 中的每个虚拟页都对应于页表中的某个 PTE，而 PTE 中则包含有用于描述该虚拟页状态的众多字段。每一次 MMU 需要将一个虚拟地址翻译为物理地址时，它都会首先读取页表，以查询相关的 PTE 信息。然后，再根据虚拟地址内隐含的偏移信息，找到对应页中的目标位置。</p><p>在简化的实现中，PTE 可能由一个“有效位”字段与一个“地址”字段组成。其中，有效位用于表明该虚拟页是否已被缓存在物理内存中。若该位置位，则地址字段中存放有该页在物理内存中的起始位置。而在该位复位的情况下，若地址字段为空，则表明该虚拟页还未被分配。否则，地址字段中便保存有虚拟页内容在磁盘上的起始位置。</p><p>当 CPU 需要访问某个虚拟地址上的数据时，通常会发生以下两种情况：</p><ul>\n<li>MMU 查找进程页表，发现目标数据已被缓存，进而直接通过 PTE 中的物理地址获取并返回所需要的数据；</li>\n<li>MMU 查找进程页表，发现目标数据未被缓存，此时它会触发一个“缺页异常”。</li>\n</ul><p>在第二种情况中，缺页异常将会调用内核中特定的异常处理程序，该程序会在物理内存中选择一个页，以用来承载当前虚拟地址所对应的物理数据。其中，对于空闲页，内核会直接将虚拟页对应的内容从磁盘拷贝到该物理页中；而对于非空闲页，若该页已经被修改，则内核会首先将它的内容换出，即更新到磁盘。然后，再将磁盘上的内容拷贝至这块物理页中。</p><p>这里你可以先暂缓脚步，通过下图来直观地理解 CPU、MMU、页表、物理内存，以及磁盘五者之间的协作关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/1b/e5c86f61aefdfb4121034c0060ab921b.jpg?wh=1920x770\" alt=\"图片\"></p><p>页表隔离了进程的 VAS 与物理内存，使得两者之间的映射关系变得更加自由。而在这种方式下，当不同进程使用不同页表维护其各自 VAS 中虚拟页的映射时，多个进程之间便可做到真正的数据共享。而我将在 29 讲中介绍的“动态链接”技术便以此为基础。不仅如此，独立的 VAS 与页表也使得进程之间的私有内存不会被相互访问。</p><p>另外，通过在 PTE 中增加用于访问控制的相关字段（如可读、可写、可执行），CPU 可以在程序尝试非法访问某块内存数据时做出异常响应。</p><h3>使用多级页表压缩页表体积</h3><p>但是，上面介绍的一级页表有时却可能无法满足需求。试想，以目前常用的 64 位地址空间为例，假设页大小为已知最大的 2MiB，为保证完整映射，每个 PTE 大小为 8 字节。而为了能够在单一页表内维护进程整个 64 位 VAS 中所有虚拟页的信息，那么便需要为其匹配一个大小为 65535 GiB 的页表，而这显然是不现实的。因此，现代计算机通常会采用“多级页表”的方式，来优化页表的大小。</p><p>多级页表的思路很简单。以二级页表为例，假设在一个 32 位地址空间中，页大小为 4KiB，每个页表的大小也为 4KiB，且其中的每个 PTE 大小为 4 字节。此时，MMU 在进行物理地址查询时，首先会根据虚拟地址中隐含的虚拟页号信息来查找一级页表内的目标 PTE，而一级页表中的每个 PTE，此时实际上负责映射 VAS 中的一个 4MiB 的片。</p><p>按照树的形式展开，每个一级页表也都对应着一个独立的二级页表，二级页表中的每一个 PTE 则负责映射当前一级页表的 4MiB 的片中的某个 4KiB 的块。当一级页表查询完毕后，MMU 便可得到指向目标二级页表的地址。通过该地址，再联合虚拟地址中的另一部分虚拟页号信息，它便可找到目标数据所在物理内存的具体页。最后，结合虚拟地址中的页偏移信息，目标数据的最终物理地址便可被成功地“转换”出来。你可以通过下图来进一步理解上述流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/32/bb2903b5463fbb211e7390ee48817432.jpg?wh=1920x1182\" alt=\"图片\"></p><p>多级页表可以节省内存空间的两个最重要因素是：</p><ul>\n<li>当一级页表中的某个 PTE 没有实际映射时，其对应的二级页表便不会被创建；</li>\n<li>只有一级页表才需要常驻内存，二级页表可以仅在需要时再创建，或从磁盘调入。</li>\n</ul><p>实际上，上述二级页表的使用形式可以被推广到任意的 N 级。但总体来看，页表的级数并非越多越好，因为更多的页表级数也就意味着更长的物理地址查询时间。目前常见的多级页表为 4 级，而在 Ice Lake 等处理器中，也出现过 5 级页表。</p><h3>使用 TLB 加速 PTE 查询</h3><p>多级页表虽然可以压缩页表占用的内存量，但用 MMU 进行页表的逐级查询，这个过程也并不是毫无成本的。现实情况中，计算机通常会结合使用名为“翻译后备缓冲器（Translation Lookaside Buffer，TLB）”的硬件设备来加速这一流程。</p><p>TLB 属于 MMU 的一部分，它可以加快 MMU 根据虚拟地址查询 PTE 的过程。你可以将 TLB 理解为一个简单的具有 N 行 M 列的矩阵，MMU 会从对应虚拟地址中提取出用于查询表项的 TLB 索引与 TLB 标记。这两个值可以联合起来使用，并定位到 TLB 中的一个具体单元格。而此时，若该单元格内有值，则 MMU 可以直接使用该值，来与虚拟地址中的其他信息一起组成最终的物理地址。否则，MMU 仍然需要通过逐级查询页表的方式来获取目标页的物理地址。</p><h3>再谈共享对象与私有对象</h3><p>上面，我曾在“使用页表维护虚拟页状态”一节的最后提到，借助虚拟内存机制，不同进程之间可以共享物理内存上的同一段数据。</p><p>这些数据在物理内存中实际存放时，可能并不是连续的。而借助于页表实现的“虚拟页与物理页映射关系分离”，我们可以确保 CPU 能够按照连续的方式来使用这些数据。</p><p>而当某个共享进程试图对这些共享数据进行修改时，操作系统便会通过“写时复制（Copy-on-write）”的方式，来将被变更数据所在的物理页进行复制，并通过修改页表，来让修改进程可以私有化这部分数据。</p><h2>总结</h2><p>这一讲，我主要为你介绍了进程是如何在操作系统的控制下使用内存资源的。</p><p>在现代计算机中，内存和 CPU 芯片上的高速缓存一起构成了用于承载应用运行时数据的缓存系统。而这个缓存系统，在名为“虚拟内存”机制的帮助下，能够以一种更加优雅的方式运作。</p><p>虚拟内存机制为每一个进程都抽象出了独立且私有的虚拟地址空间（VAS）。VAS 中使用虚拟地址进行寻址，当 CPU 需要通过该地址访问内存中的某个数据时，芯片上的内存管理单元（MMU）会将该地址转换为对应的物理地址。不同的操作系统都会在 VAS 中为进程使用相对统一的数据布局方式，这样，编译器便可简化其构建应用的流程。</p><p>操作系统使用名为“页表”的数据结构来维护 VAS 中虚拟页与物理页之间的映射关系。通过查询页表项（PTE）的状态，操作系统可以直接获得目标数据所在页的物理地址，或是通过触发缺页异常，来让操作系统内核将目标数据从磁盘加载到物理内存中，然后再重新获取该地址。在这个过程中，内核可能会将物理内存中，某个已修改的非空闲页的内容换出到磁盘。</p><p>为了减小分配给每个进程的页表大小，现代计算机通常采用多级页表的方式来管理虚拟页与物理页的映射关系。而在这种方式下，由于需要查询的表项过多，计算机还会采用名为 TLB 的硬件设备，来缓存之前的表项查询结果，并加速下一次相同虚拟页的查询过程。</p><p>最后，虚拟内存机制使得多个进程可以同时共享物理内存中的某段数据，而无需将数据拷贝多份。但当某个进程试图修改这些共享数据时，操作系统会通过“写时复制”的方式来将被修改数据进行拷贝，并使其对修改进程私有化。</p><h2>思考题</h2><p>试着查阅资料来了解一下，为什么 Linux 进程 VAS 从地址 0x0 开始，直到 0x400000 的低地址段，没有存放任何数据？欢迎在评论区告诉我你的发现。</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","neighbors":{"left":{"article_title":"25｜可执行二进制文件里有什么？","id":487944},"right":{"article_title":"27｜编译器在链接程序时发生了什么？","id":489879}},"comments":[{"had_liked":false,"id":336144,"user_name":"⁶₆⁶₆⁶₆","can_delete":false,"product_type":"c1","uid":1940453,"ip_address":"","ucode":"25AE3F77318541","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9b/e5/bd0be5c3.jpg","comment_is_top":false,"comment_ctime":1645953482,"is_pvip":true,"replies":[{"id":"122838","content":"回答的很赞！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645962807,"ip_address":"","comment_id":336144,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27415757258","product_id":100100701,"comment_content":"为保证空指针可以触发访问缺失页的异常SIGSEGV，空出位于虚拟地址空间的最低部分，空出的虚拟地址部分不访问，就可以省下一个页大小的空间，原本空出的空间为4KB(0x0~0x1000)即可，考虑到大页机制时最小页为4MB，因此就空出4MB的空间(0x0~0x00400000),所以VAS的真实使用地址从0x400000开始","like_count":6,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553548,"discussion_content":"回答的很赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645962807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571180,"discussion_content":"关于数字我有疑问，4KB和4MB是如何计算出对应的16进制为0x1000和0x00400000的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652102865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1216016,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","nickname":"Luke","note":"","ucode":"C34D4C44DBCE03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":589363,"discussion_content":"内存都是字节为单位的，地址的增减指向不同的字节位置；\n4KB等于4*1024 bytes＝2^12，也就是从0开始到0x1000的位置。\n同理，4MB。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664767253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":571180,"ip_address":"江苏"},"score":589363,"extra":""}]}]},{"had_liked":false,"id":336011,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1645846316,"is_pvip":false,"replies":[{"id":"122858","content":"TLB 缓存的直接是物理页号，也就是经过所有页表查询后得到的结果。这个结果再配合虚拟地址中的页偏移信息，就可以的到目标数据的物理地址。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645978156,"ip_address":"","comment_id":336011,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10235780908","product_id":100100701,"comment_content":"老师，TLB中缓存的是几级页表？如果是一级的话，那对应的二级页表是不是就要到物理内存里查的？这样的话，如果是4级页表，即使第一级被TLB命中，其他3级也得到物理内存里找，好像TLB也没带来多大的性能提升……希望老师指点下，这块我一直有点不清楚","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553611,"discussion_content":"TLB 缓存的直接是物理页号，也就是经过所有页表查询后得到的结果。这个结果再配合虚拟地址中的页偏移信息，就可以的到目标数据的物理地址。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645978156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553649,"discussion_content":"好的，谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646014524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350051,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1656529999,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5951497295","product_id":100100701,"comment_content":"页面置换，请求调页","like_count":1},{"had_liked":false,"id":335677,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1645622763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5940590059","product_id":100100701,"comment_content":"位于虚拟地址空间的最低部分，未赋予物理地址。任何对它的引用都是非法的，用于捕捉使用空指针和小整型值指针引用内存的异常情况。","like_count":1},{"had_liked":false,"id":358754,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"江苏","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1664696908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664696908","product_id":100100701,"comment_content":"老师，一级页表那块2^16GB不应该是65536GB吗？怎么是65535GB。","like_count":0},{"had_liked":false,"id":349375,"user_name":"猪小擎","can_delete":false,"product_type":"c1","uid":1370959,"ip_address":"","ucode":"D9552746AE3327","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","comment_is_top":false,"comment_ctime":1655915209,"is_pvip":true,"replies":[{"id":"127241","content":"这块内容也可以参考 CSAPP 等书籍哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1656222602,"ip_address":"","comment_id":349375,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1655915209","product_id":100100701,"comment_content":"这一讲好难，知识的原文从哪本书里能看到","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577593,"discussion_content":"这块内容也可以参考 CSAPP 等书籍哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656222602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1370959,"avatar":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","nickname":"猪小擎","note":"","ucode":"D9552746AE3327","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":577601,"discussion_content":"有没有arm版本的csapp哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656224853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577593,"ip_address":""},"score":577601,"extra":""}]}]},{"had_liked":false,"id":346143,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1652855497,"is_pvip":true,"replies":[{"id":"127254","content":"是的，VAS 实际上是就是由页表维护的一个“虚拟”的地址空间。页表的数据本身会被存放在磁盘上，随着页面的查询而不断从磁盘载入到内存中。申请内存时通常会让虚拟内存区域映射到“匿名文件”这种类型的对象上，同时更新页表标记某几个页是驻留在内存中的，从而不会产生磁盘与内存之间的实际数据交换过程。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1656230813,"ip_address":"","comment_id":346143,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652855497","product_id":100100701,"comment_content":"虚拟地址与物理地址根据页表映射起来的，虚拟地址空间是存在哪里的呢，二进制可执行文件吗？是磁盘里吗？根据用到时一点点加载到内存里吗？那申请内存时（brk和mmap），会跳转到内核里，不分配物理内存，分配后的地址要写到可执行的二进制文件里吗？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577612,"discussion_content":"是的，VAS 实际上是就是由页表维护的一个“虚拟”的地址空间。页表的数据本身会被存放在磁盘上，随着页面的查询而不断从磁盘载入到内存中。申请内存时通常会让虚拟内存区域映射到“匿名文件”这种类型的对象上，同时更新页表标记某几个页是驻留在内存中的，从而不会产生磁盘与内存之间的实际数据交换过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656230813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345080,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1652005640,"is_pvip":false,"replies":[{"id":"126185","content":"这是个好问题，实际上这里我们有一个隐含条件就是页表的大小为 4KiB，PTE 大小为 4 字节，即拥有 1024 个表项。这样每个 PTE 就负责映射 2^32 &#47; 1024，即 4MiB 的大小。我来修改一下文章。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1652595281,"ip_address":"","comment_id":345080,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652005640","product_id":100100701,"comment_content":"假设在一个 32 位地址空间中，页大小为 4KiB，每个 PTE 大小为 4 字节。此时，MMU 在进行物理地址查询时，首先会根据虚拟地址中隐含的虚拟页号信息来查找一级页表内的目标 PTE，而一级页表中的每个 PTE，此时实际上负责映射 VAS 中的一个 4MiB 的片。<br><br>这个 4MiB 是怎么算出来的呢？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572085,"discussion_content":"这是个好问题，实际上这里我们有一个隐含条件就是页表的大小为 4KiB，PTE 大小为 4 字节，即拥有 1024 个表项。这样每个 PTE 就负责映射 2^32 / 1024，即 4MiB 的大小。我来修改一下文章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652595281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345079,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1652004483,"is_pvip":false,"replies":[{"id":"126183","content":"这里的“虚拟页内容”指的是虚拟页中存放的数据内容，实际上就是程序使用到的数据。当然，与页表自身相关的数据结构，也是被维护在内存中的，这部分属于操作系统内核数据。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1652591038,"ip_address":"","comment_id":345079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652004483","product_id":100100701,"comment_content":"则地址字段中存放有该页在物理内存中的起始位置。而在该位复位的情况下，若地址字段为空，则表明该虚拟页还未被分配。否则，地址字段中便保存有 “虚拟页内容在磁盘上的起始位置。”<br><br>这个 虚拟页内容 不是程序的数据吧，是指虚拟页自身的一些结构数据？？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572078,"discussion_content":"这里的“虚拟页内容”指的是虚拟页中存放的数据内容，实际上就是程序使用到的数据。当然，与页表自身相关的数据结构，也是被维护在内存中的，这部分属于操作系统内核数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652591038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335774,"user_name":"Simon","can_delete":false,"product_type":"c1","uid":1914504,"ip_address":"","ucode":"A8A2E3E57BD029","user_header":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","comment_is_top":false,"comment_ctime":1645685165,"is_pvip":true,"replies":[{"id":"122710","content":"没错，对于大多数体系比如 x86-64 和 ARMv8 来说是这样的，但也有支持完整 64 位虚拟地址的体系，比如 Oracle SPARC 的某些型号。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645713488,"ip_address":"","comment_id":335774,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1645685165","product_id":100100701,"comment_content":"64位系统的地址空间只有 2^48，高十六位都是0，共256T。","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553096,"discussion_content":"没错，对于大多数体系比如 x86-64 和 ARMv8 来说是这样的，但也有支持完整 64 位虚拟地址的体系，比如 Oracle SPARC 的某些型号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645713488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570955,"discussion_content":"64 位系统的地址空间只有 2^48，这个意思是每一个地址对应物理内存的上的一个字节？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652005857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1216016,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","nickname":"Luke","note":"","ucode":"C34D4C44DBCE03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589380,"discussion_content":"你的结论是对的，每个地址对应一个字节的位置。不过，这个跟你写的原因没关系。\n64位CPU只用48位纯粹是为了节省晶体管减少CPU复杂度，目前厂商觉得256TB足够了，x86指令集是完整支持64位的，未来需要更大内存时候，只需要CPU的地址线完整支持64位即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664785058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":570955,"ip_address":"江苏"},"score":589380,"extra":""}]}]}]}