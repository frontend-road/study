{"id":105356,"title":"22 | 桌面程序的架构建议","content":"<p>你好，我是七牛云许式伟。</p><p>上一讲我们介绍了图形界面程序的框架。站在操作系统交互子系统的角度来看，我们桌面应用程序的结构是下面这样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/af/ea2f8918fd742bba48ba2897267c1daf.png?wh=1440*810\" alt=\"\"></p><p>今天我们换一个角度，站在应用架构的角度，来聊聊如何设计一个桌面应用程序。</p><h2>从 MVC 说起</h2><p>关于桌面程序，我想你听得最多的莫过于 MVC 这个架构范式。MVC 全称是 “模型(Model)-视图(View)-控制器(Controller)”。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/cb/32c7df68c3f5d11a0a32f80d7c3a42cb.png?wh=1440*810\" alt=\"\"><br>\n怎么理解 MVC 呢？一种理解是，Model 是 Input，View 是 Output，Controller 是 Process，认为 MVC 与计算机的 Input-Process-Ouput 这个基础模型暗合。</p><p>但更准确的解释是：Model 是数据，View 是数据的显示结果，同时也接受用户的交互动作，也就是事件。从这个意义来说，说 Model 是 Input 并不严谨，View 接受的用户交互，也是 Input 的一部分。</p><p>Controller 负责 Process（处理），它接受 “Model + 由 View 转发的事件” 作为 Input，处理的结果（Output）仍然是 Model，它更新了 Model 的数据。</p><p>View 之所以被理解为 Output，是因为 Model 的数据更新后，会发送 DataChanged（数据更新）事件，View 会在监听并收到 DataChanged 事件后，更新 View。所以把 View 理解为 Output 也并不算错，它从数据角度看其实是 Model 的镜像。</p><!-- [[[read_end]]] --><p>对 MVC 模式做些细微的调整，就会产生一些变种。比如，Model 的数据更新发出 DataChanged 事件后，由 Controller 负责监听并 Update View，这样就变成了 MVP 架构。MVP 全称是 “模型(Model)-视图(View)-表现(Presenter)”。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/b3/017f2f7974febde6f4ddd917481ba1b3.png?wh=1440*810\" alt=\"\"></p><p>那么，我们究竟应该选择哪一种架构范式比较好？</p><p>要想判断我们写的程序架构是否优良，那么我们心中就要有架构优劣的评判标准。比较知名且重要的一些基本原则如下。</p><ul>\n<li>最低耦合原则：不同子系统（或模块）之间有最少的交互频率，最简洁且自然的接口。</li>\n<li>单一职责原则：不要让一个子系统（或模块）干多件事情，也不要让它不干事情。</li>\n</ul><p>如果在我们心中以遵循架构法则为导向，回过头再来看 MVC，又会有不同的理解。</p><h2>理解 Model 层</h2><p>我们先看 Model。如果你真正理解 Model 层的价值，那么可以认为你的架构水平已经达到了较高层次的水准。因为 Model 层太重要了。</p><p>我上面说 Model 层是数据，这其实还不是太准确。更准确来说，Model 层是承载业务逻辑的 DOM，即 “文档对象模型（Document Object Model）”。直白理解，DOM 是 “面向对象” 意义上的数据。它不只是有数据结构，也有访问接口。</p><p>为了便于理解，假设我们基于数据库来实现 Model 层。<strong>这种情况下会有两种常见的架构误区。</strong></p><p>一种是直接让 Controller 层直接操作数据库，也就是拿数据库的读写接口作为 Model 层的接口。</p><p>另一种看起来高级一些，用所谓的 ORM 技术来实现 Model 层，让 Controller 直接操作 ORM。</p><p>为什么我们说这两种做法都有问题呢？原因就在于对 Model 层的价值不明。Model 层的使用接口最重要的是要自然体现业务的需求。</p><p>只有这样，Model 层的边界才是稳定的，与你基于的技术无关。是用了 MySQL，还是用了 NoSQL？是直接裸写 SQL 语句，还是基于 ORM？这都没关系，未来喜欢了还可以改。</p><p>另外，从界面编程角度看，Model 层越厚越好。为什么这么说？因为这是和操作系统的界面程序框架最为无关的部分，是最容易测试的部分，也同时是跨平台最容易的部分。</p><p>我们把逻辑更多向 Model 层倾斜，那么 Controller 层就简洁很多，这对跨平台开发将极其有利。</p><p>这样来看，直接让 Controller 层直接操作数据库，或者基于 ORM 操作数据库，都是让 Model 层啥事不干，这非常非常浪费，同样也违背了 “单一职责原则”。</p><p>我们需要强调，单一职责不只是要求不要让一个子系统（或模块）干多件事情，同时也要求不要让它不干事情。</p><p>如果我们用一句话来描述 Model 层的职责，那么应该是 “负责业务需求的内核逻辑”，我们以前经常叫它 “DataCore”。</p><p>那么 Model 层为何要发出 DataChanged 事件？</p><p>这是从 Model 层的独立性考虑。Model 层作为架构的最底层，它不需要知道其他层的存在，不需要知道到底是 MVC 还是 MVP，或者是其他的架构范式。</p><p>有了 DataChanged 事件，上层就能够感知到 Model 层的变化，从而作出自己的反应。</p><p>如果还记得第一章我们反复强调的稳定点与变化点，那么显然，DataChanged 事件就是 Model 层面对需求变化点的对策。大部分 Model 层的接口会自然体现业务需求，这是核心价值点，是稳定的。</p><p>但是业务的用户交互可能会变化多端，与 PC 还是手机，与屏幕尺寸，甚至可能与地区人文都有关系，是多变的。</p><p>用事件回调来解决需求的变化点，这一点 CPU 干过，操作系统也干过，今天你做业务架构也这么干，这就很赞。</p><h2>理解 View 层</h2><p>View 层首要的责任，是负责界面呈现。界面呈现只有两个选择，要么自己直接调用 GDI 接口自己画，要么创建子 View 让别人画。</p><p>View 层另一个责任是被自然带来的，那就是：它是响应用户交互事件的入口，这是操作系统的界面编程框架决定的。比较理想的情况下，View 应该把自己所有的事件都委托（delegate）出去，不要自己干。</p><p>但在 View 的设计细节中，也有很多问题需要考虑。</p><p><strong>其一，View 层不一定会负责生成所有用户看到的 View。</strong>有的 View 是 Controller 在做某个逻辑的过程中临时生成的，那么这样的 View 就应该是 Controller 的一部分，而不应该是 MVC 里面的 View 层的一部分。</p><p><strong>其二，View 层可能需要非常友好的委托（delegate）机制的支持。</strong>例如，支持一组界面元素的交互事件共同做委托（delegate）。</p><p><strong>其三，负责界面呈现，意味着 View 层和 Model 层的关系非常紧密，紧密到需要知道数据结构的细节，这可能会导致 Model 层要为 View 层提供一些专享的只读访问接口。</strong>这合乎情理，只是要确保这些访问接口不要扩散使用。</p><p><strong>其四，负责界面呈现，看似只是根据数据绘制界面，似乎很简单，但实则不简单。</strong>原因在于：为了效率，我们往往需要做局部更新的优化。如果我们收到 onPaint 消息，永远是不管三七二十一，直接重新绘制，那么事情就很好办。但是在大部分情况下，只要业务稍微复杂一点，这样的做法都会遇到性能挑战。</p><p>在局部更新这个优化足够复杂时，我们往往不得不在 Model 和 View 之间，再额外引入一层 ViewModel 层来做这个事情。</p><p>ViewModel 层顾名思义，是为 View 的界面呈现而设计的 Model 层，它的数据组织更接近于 View 的表达，和 View 自身的数据呈一一对应关系（Bidi-data-binding）。<br>\n<img src=\"https://static001.geekbang.org/resource/image/37/43/37c573bc05f071fe7e4ac3a2c986c843.png?wh=1440*810\" alt=\"\"><br>\n一个极端但又很典型的例子是 Word。它是数据流式的文档，但是界面显示人们用得最多的却是页面视图，内容是分页显示的。</p><p>这种情况下就需要有一个 ViewModel 层是按分页显示的结构来组织数据。其中负责维持 Model 与 ViewModel 层的数据一致性的模块，我们叫排版引擎。</p><p>从理解上来讲，我个人会倾向于认为 ViewModel 是 View 层的一部分，只不过是 View 层太复杂而进行了再次拆分的结果。也就是说，我并不倾向于认为存在所谓的 “Model-View-ViewModel” 这样的模式。</p><h2>理解 Controller 层</h2><p>Controller 层是负责用户交互的。可以有很多个 Controller，分别负责不同的用户交互需求。</p><p>这和 Model 层、View 层不太一样。我们会倾向于认为 Model 层是一个整体。虽然这一个层会有很多类，但是它们共同构成了一个完整的逻辑：DOM。而 View 层也是如此，它是 DOM 的界面呈现，是 DOM 的镜像，同样是一个整体。</p><p>但负责用户交互的 Controller 层，是可以被正交分解的，而且应该作正交分解，彼此完全没有耦合关系。</p><p>一个 Controller 模块，可能包含一些属于自己的辅助 View，也会接受 View 层委托的一些事件，由事件驱动自己状态，并最终通过调用 Model 层的使用接口来完成一项业务。</p><p>Controller 模块的辅助 View 可能是持续可见的，比如菜单和工具条；也可能是一些临时性的，比如 Office 软件中旋转图形的控制点。</p><p>对于后者，如果存在 ViewModel 层的话，也有可能会被归到 ViewModel + View 来解决，因为 ViewModel 层可以有 Selection 这样的东西来表示 View 里面被选中的对象。</p><p>Controller 层最应该思考的问题是代码的内聚性。哪些代码是相关的，是应该放在一起的，需要一一理清。这也是我上面说的正交分解的含义。</p><p>如果我们做得恰当，Controller 之间应该是完全无关的。而且要干掉某一个交互特别容易，都不需要删除该 Controller 本身相关的代码，只需要把创建该 Controller 的一行代码注释掉就可以了。</p><p>从分层角度，我们会倾向于认为 <strong>Model 层在最底层；View 层在中间，</strong>它持有 Model 层的 DOM 指针；<strong>Controller 层在最上方</strong>，它知道 Model 和 View 层，它通过 DOM 接口操作 Model 层，但它并不操作 View 去改变数据，而只是监听自己感兴趣的事件。</p><p>如果 View 层提供了抽象得当的事件绑定接口，你会发现，其实 Controller 层大部分的逻辑都与操作系统提供的界面编程框架无关（除了少量辅助 View），是跨平台的。</p><p><strong>谁负责把 MVC 各个模块串起来呢？当然是应用程序（Application）了。</strong>在应用开始的时候，它就把 Model 层、View 层，我们感兴趣的若干 Controller 模块都创建好，建立了彼此的关联，一切就如我们期望的那样工作起来了。</p><h2>兼顾 API 与交互</h2><p>MVC 是很好的模型来支持用户交互。但这不是桌面程序面临的全部。另一个很重要的需求是提供应用程序的二次开发接口（API，全称为 Application Programming Interface）。</p><p>提供了 API 的应用程序，意味着它身处一个应用生态之中，可以与其他应用程序完美协作。</p><p>通过哪一层提供  API 接口？我个人会倾向于认为最佳的选择是在 ViewModel 层。Model 层也很容易提供 API，但是它可能会缺少一些重要的东西，比如 Selection。</p><h2>结语</h2><p>这一讲我们探讨了一个桌面应用程序的业务架构设计。我们探讨了大家耳熟能详的 MVC 架构范式。一千个人眼中有一千个哈姆雷特，虽然都在谈 MVC，但是大家眼中的 MVC 各有不同。</p><p>我们站在什么样的架构是好架构的角度，剖析了 MVC 的每一层应该怎样去正确理解与设计，有哪些切实的问题需要去面对。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们将聊聊基于浏览器的开发。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":110869,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1562381678,"is_pvip":false,"replies":[{"id":"40333","content":"挺好的补充","user_name":"作者回复","comment_id":110869,"uid":"1228022","ip_address":"","utype":1,"ctime":1562408863,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":4,"race_medal":0,"score":"237785582958","product_id":100025201,"comment_content":"这几种模式中，对 MVVM 理解是最多样化的，很大一部分原因是取决于原来是如何使用 MVC 的，可以分为三种流派：<br><br>1、在 Controller 中处理所有的业务逻辑，包括监听 View 事件， IO 请求数据，格式化 Model 数据供 View 展示等。该流派认为 ViewModel 是 Controller 的瘦身。<br><br>2、在 Model 中处理大部分的业务逻辑，也就是所谓的“胖 Model”，Model 提供格式化的数据给 View，Model 就需要关心 View 的细节，导致 Model 的复用性变差。将格式化 Model 的数据转移到 ViewModel 中，认为 ViewModel 是胖 Model 的瘦身。<br><br>3、最后一种，是老师文中说的，ViewModel 属于 View 的一部分，辅助 View 局部更新，我还是第一次听到这种说法。在我看来局部化更新由 Controller 来触发，ViewModel 只负责提供数据，完全跟 View 扯不上关系。但从 Word 的例子来看，这么说也有道理。不过老师也解释了，该模式并不算 MVVM。<br><br>要理解一个名词真正的概念，需要追溯它的源头，MVVM 最早是由微软工程师 John Grossman 于 2005 年提出的。ViewModel 作为 View 的数据抽象层，持有 View 的状态和行为。<br><br>ViewModel 和 View 不应该有引用关系，而是由中间者，将它们绑定。ViewModel 改变后自动的触发对应 View 的更新，View 的触发事件后，ViewModel 接收并做处理。在实现层面这种绑定关系最适合由响应式框架来做，从而实现 ViewModel 和 View 的双向绑定。","like_count":56,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457101,"discussion_content":"挺好的补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562408863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038992,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/da/90/0b74748f.jpg","nickname":"裴海港","note":"","ucode":"2A17A0B4816BED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3304,"discussion_content":"WPF就是典型的MVVM，通过binding将viewmodel中的数据绑定到view上，可以实现数据双向更新","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1564385284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","nickname":"瓜瓜","note":"","ucode":"F90A5135A9BB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112575,"discussion_content":"要理解一个名词真正的概念，需要追溯它的源头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577872565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503506,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","nickname":"你为啥那么牛","note":"","ucode":"1ABC604A54A8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25213,"discussion_content":"view触发事件，应该由controller来进行业务处理，重新刷新model、viewmodel。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570454364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110672,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1562312364,"is_pvip":false,"replies":[{"id":"40266","content":"你说的service，应该就是我说的model层。一些说法是把model层分为service和DAO层，但是实际上DAO根本算不上一层。","user_name":"作者回复","comment_id":110672,"uid":"1228022","ip_address":"","utype":1,"ctime":1562339058,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"78871723692","product_id":100025201,"comment_content":"许老师好！<br>    工作中也经常用到MVC模式开发，经常用个Mode层就是一个和数据库映射的实体，然后再View层和Controller层传输数据，不知道老师文中所指的Mode层应该是“负责需求的内核逻辑”应该如何理解？难道需求的逻辑不是应该放到Controller里的Services里去实现吗？","like_count":18,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456998,"discussion_content":"你说的service，应该就是我说的model层。一些说法是把model层分为service和DAO层，但是实际上DAO根本算不上一层。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562339058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503506,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","nickname":"你为啥那么牛","note":"","ucode":"1ABC604A54A8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25215,"discussion_content":"按我的理解,dal层只做一些基础数据的存取,比如一个完整业务对象的某一维度的处理,service层会组合调用这些接口完整业务层的数据整合,或许从不同角度来看，同一个业务对象要展现不同的数据，就写两个service接口就好了。controller完全瘦身，只用过权限控制、日志处理就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570454892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110487,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1562287259,"is_pvip":false,"replies":[{"id":"40171","content":"后面会考虑讲一个例子","user_name":"作者回复","comment_id":110487,"uid":"1228022","ip_address":"","utype":1,"ctime":1562290812,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"74576731291","product_id":100025201,"comment_content":"比较抽象，许老师，有没有比较好的实例程序推荐，通过程序来理解应用架构的具体细节？","like_count":17,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456906,"discussion_content":"后面会考虑讲一个例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562290812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113078,"user_name":"Lrwin","can_delete":false,"product_type":"c1","uid":1180503,"ip_address":"","ucode":"5E394E36419C56","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/57/31595f22.jpg","comment_is_top":false,"comment_ctime":1562893671,"is_pvip":false,"replies":[{"id":"41182","content":"👍，挺好的补充","user_name":"作者回复","comment_id":113078,"uid":"1228022","ip_address":"","utype":1,"ctime":1562907278,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"70282370407","product_id":100025201,"comment_content":"不同视角看待架构的最终方向都是一致的: 稳定点和扩展点分离，分而治之的思想<br><br><br><br>《clean code》书中的架构设计，最核心的是领域Model，它是稳定的。<br><br>《实现领域驱动设计》中的战略设计是分之思想，将核心问题域与其他问题域进行分离，划分出核心域，支撑域，通用域，最终的目的是将架构的核心需求进行确定。<br><br>架构设计中，clean code架构、四层架构、六边形架构、微服务架构无一例外。<br><br><br><br>许老师讲Model的时候，我想起了领域驱动设计中的领域模型，真是不谋而合呀。","like_count":16,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458045,"discussion_content":"👍，挺好的补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562907278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683896,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b1/b8/9ff50118.jpg","nickname":"sswrock","note":"","ucode":"9D8DA794D7378D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74780,"discussion_content":"同楼上，看到model部分，第一想到的是DDD的领域层","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575686701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112057,"user_name":"黄强","can_delete":false,"product_type":"c1","uid":1086093,"ip_address":"","ucode":"20231AC29CFD53","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/8d/ab469ad5.jpg","comment_is_top":false,"comment_ctime":1562661737,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65987171177","product_id":100025201,"comment_content":"留言中有些人提到在controller层和model层增加一个service层，我是这样理解的：service（业务逻辑处理）+repository（DAO数据访问）+model（贫血模型）= Model层（数据层+业务逻辑）；MVC只是一个架构的分层思想，在MVC各层同样可以用MVC分层的思想根据实际的需要再分层处理。","like_count":15,"discussions":[{"author":{"id":1008065,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/61/c1/9ad88d67.jpg","nickname":"Mr_杨","note":"","ucode":"AD31C2320DF6A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1764,"discussion_content":"我和你的理解一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562898427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110867,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1562381464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44512054424","product_id":100025201,"comment_content":"关于文中 MVC、MVP 的理解，跟我原先理解的不太一样，查了一些英文资料，大概是这样：<br><br>1、标准的 MVC，View 和 Model 是不能通信的，是由 Controller 监听 Model 的 DataChanged，然后去更新 View，而不像文中说的 View 直接监听 DataChanged。<br><br>2、MVP 中 (UI)Controller 和 View 属于 V，P 接管了原先 MVC 中 Controller 处理协调 Model 和 View 的逻辑。","like_count":10},{"had_liked":false,"id":110479,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1562286357,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"40216992021","product_id":100025201,"comment_content":"唯一每天12点等更新的专栏","like_count":9},{"had_liked":false,"id":110675,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1562312828,"is_pvip":true,"replies":[{"id":"40213","content":"这个是一个惯例，一般对象模型是一颗树，树根叫Document，所以叫DOM（文档对象模型）。xml的根对象就是Document是同样的道理。","user_name":"作者回复","comment_id":110675,"uid":"1228022","ip_address":"","utype":1,"ctime":1562316864,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"31627083900","product_id":100025201,"comment_content":"“文档对象模型”中的“文档”应该如何理解？是因为linux中“一切皆文件”，所以这里一切皆文档么？<br><br>我目前只能理解“对象”和“模型”，对象指数据+操作，数据对应了结构体（数据结构），操作对应了方法（方法的集合可以封装成接口）；模型本质上指的是抽象。<br><br>那“文档”该如何理解？","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457001,"discussion_content":"这个是一个惯例，一般对象模型是一颗树，树根叫Document，所以叫DOM（文档对象模型）。xml的根对象就是Document是同样的道理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562316864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111021,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1562424098,"is_pvip":false,"replies":[{"id":"40377","content":"是的，这本书因为内容高度浓缩，需要反复看。这是练内功与练外功的区别。练外功可能有学完的那天，内功没法学完，甚至可能你会发现比书上更好的体悟。","user_name":"作者回复","comment_id":111021,"uid":"1228022","ip_address":"","utype":1,"ctime":1562448527,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"27332227874","product_id":100025201,"comment_content":"开始不理解了，需要多经历，然后再回头来看","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457181,"discussion_content":"是的，这本书因为内容高度浓缩，需要反复看。这是练内功与练外功的区别。练外功可能有学完的那天，内功没法学完，甚至可能你会发现比书上更好的体悟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562448527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110549,"user_name":"诗泽","can_delete":false,"product_type":"c1","uid":1031865,"ip_address":"","ucode":"F28BE01C3FD12F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/b9/f2481c2c.jpg","comment_is_top":false,"comment_ctime":1562292513,"is_pvip":false,"replies":[{"id":"40196","content":"假设总代码量不变，那其实就是尽可能把view和controller代码尽可能转model层","user_name":"作者回复","comment_id":110549,"uid":"1228022","ip_address":"","utype":1,"ctime":1562303579,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"27332096289","product_id":100025201,"comment_content":"许老师可否展开讲一下如何把model 层做厚，感觉这一部分挺重要的","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456938,"discussion_content":"假设总代码量不变，那其实就是尽可能把view和controller代码尽可能转model层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562303579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110659,"user_name":"请叫我eleven","can_delete":false,"product_type":"c1","uid":1098454,"ip_address":"","ucode":"73C0D5306A9AB0","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/d6/dcb2a69f.jpg","comment_is_top":false,"comment_ctime":1562311458,"is_pvip":false,"replies":[{"id":"40265","content":"DDD 强调的就是 Model 的使用接口要自然体现业务，不要被框架绑架。","user_name":"作者回复","comment_id":110659,"uid":"1228022","ip_address":"","utype":1,"ctime":1562336216,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"23037147938","product_id":100025201,"comment_content":"期待老许谈谈对DDD领域驱动设计的看法。","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456992,"discussion_content":"DDD 强调的就是 Model 的使用接口要自然体现业务，不要被框架绑架。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562336216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102813,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/dd/f1359931.jpg","nickname":"翰皇技术","note":"","ucode":"D8F0400C8F37A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1453,"discussion_content":"老师 一阵见血","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562637994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110442,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1562264953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18742134137","product_id":100025201,"comment_content":"经过许老师一番分析，对MVC的理解更深刻了，明天到公司把ViewModel重新捋捋。","like_count":5},{"had_liked":false,"id":110664,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1562311794,"is_pvip":false,"replies":[{"id":"40211","content":"嗯，我这一讲还是单机软件，后面会谈b&#47;s和c&#47;s结构下的架构。","user_name":"作者回复","comment_id":110664,"uid":"1228022","ip_address":"","utype":1,"ctime":1562316298,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"14447213682","product_id":100025201,"comment_content":"老师讲到了MVC和MVVM构架，我理解的前后端分离是一个趋势，model不单单是数据model，同样view也不单单只是用来展示。实际上要把control这个拆开，view也需要control，他可以是有向后台发送请求的，他同样也可以是只是简单的视图交互比如说弹一个对话框。model也是需要control，他可以接受前台请求进行逻辑判断处理数据返回结果，他同样就是跑一个任务，主动去推送不同的数据给用户。","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456995,"discussion_content":"嗯，我这一讲还是单机软件，后面会谈b/s和c/s结构下的架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562316298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110519,"user_name":"xwhsky","can_delete":false,"product_type":"c1","uid":1009828,"ip_address":"","ucode":"EB2B7F78815FD8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/a4/8cc88b35.jpg","comment_is_top":false,"comment_ctime":1562289299,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14447191187","product_id":100025201,"comment_content":"光这节课就值回所有票价！","like_count":3,"discussions":[{"author":{"id":1378201,"avatar":"https://static001.geekbang.org/account/avatar/00/15/07/99/2c12c56c.jpg","nickname":"浩然","note":"","ucode":"FC771E92869796","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296589,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596595861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055919,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/af/a4ed26e9.jpg","nickname":"@㍿社长","note":"","ucode":"AE497C7251C0E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62487,"discussion_content":"宣老师···","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574847148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1009828,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/68/a4/8cc88b35.jpg","nickname":"xwhsky","note":"","ucode":"EB2B7F78815FD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1055919,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/af/a4ed26e9.jpg","nickname":"@㍿社长","note":"","ucode":"AE497C7251C0E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164895,"discussion_content":"这…2333","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581232222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62487,"ip_address":""},"score":164895,"extra":""}]}]},{"had_liked":false,"id":111853,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1003308,"ip_address":"","ucode":"79117738B2B26E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/2c/a17b23f7.jpg","comment_is_top":false,"comment_ctime":1562631749,"is_pvip":false,"replies":[{"id":"40702","content":"分层其实不是越多越好","user_name":"作者回复","comment_id":111853,"uid":"1228022","ip_address":"","utype":1,"ctime":1562639559,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"10152566341","product_id":100025201,"comment_content":"我习惯在model层和controller层中间加一层service层。主要的数据处理都放在service层","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457471,"discussion_content":"分层其实不是越多越好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562639559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295476,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c4/74/27cf551a.jpg","nickname":"WilliamX","note":"","ucode":"E915091A891873","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1619,"discussion_content":"我的使用习惯，是把Model当成数据库对象，也就是DO，再往上是DAL或者是DAO，这个对象负责对DO进行CRUD，再上面的Service 负责对DAO进行事务管理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562741711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110944,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1562400341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152334933","product_id":100025201,"comment_content":"质量挺好","like_count":2},{"had_liked":false,"id":110795,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1562336366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152270958","product_id":100025201,"comment_content":"打卡22 从来没有站在老师这样的高度看模型","like_count":2},{"had_liked":false,"id":110556,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1562294234,"is_pvip":false,"replies":[{"id":"40193","content":"后面会谈到b&#47;s或c&#47;s之后导致的变化","user_name":"作者回复","comment_id":110556,"uid":"1228022","ip_address":"","utype":1,"ctime":1562302843,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":5,"race_medal":0,"score":"10152228826","product_id":100025201,"comment_content":"我是一个经历过MFC时代桌面程序的后端，今天文章提到一点，让我有所感触，就是前端的Model层尽量要厚重，按我的理解，这似乎有个专用名词称呼叫“充血模型”。这一点似乎和后端流行的想法是不太一样的，后端这10年，主要逻辑都集中到Controller和Service层了，Model层用的都是贫血模型。而这10年恰恰是后端去View化兴起的时代——只输出json，不输出页面。我有种奇怪的感觉，Model之所以要厚是因为要承载逻辑。从这个角度看，后端的Model不像Model，倒是Controller和Service承担了Model的职能，不知道各位怎么看这个问题","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456940,"discussion_content":"后面会谈到b/s或c/s之后导致的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562302843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574230,"discussion_content":"同感+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653916246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083184,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","nickname":"Fs","note":"","ucode":"0AD0EFB5544B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34301,"discussion_content":"后端的Model进行了很多的演化，分成了传输数据的DTO，面向领域充血模型的domain object.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571191244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1460520,"avatar":"https://static001.geekbang.org/account/avatar/00/16/49/28/a51b6d75.jpg","nickname":"太极冰","note":"","ucode":"2D510FE7E5E95D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22466,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569642452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7290,"discussion_content":"这个评论让我受益不浅啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567475636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110498,"user_name":"Geek_e55641","can_delete":false,"product_type":"c1","uid":1081875,"ip_address":"","ucode":"63201F64CC5FC2","user_header":"","comment_is_top":false,"comment_ctime":1562288139,"is_pvip":false,"replies":[{"id":"40169","content":"还是要有controller的，只是没画出来","user_name":"作者回复","comment_id":110498,"uid":"1228022","ip_address":"","utype":1,"ctime":1562290564,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"10152222731","product_id":100025201,"comment_content":"按许老师的说法，mvc 跟mvvm 并不是一个可以互相替换的模型，vm 只是view 的一个部分的话，mvvm 模型里面怎么体现contoller 的逻辑呢？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456910,"discussion_content":"还是要有controller的，只是没画出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562290564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287195,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1617812265,"is_pvip":false,"replies":[{"id":"104280","content":"其实是有次序的，准确的理解应该是 Model -&gt; View -&gt; Controllers。但是有些人会误解为 Model -&gt; Controller -&gt; View。","user_name":"作者回复","comment_id":287195,"uid":"1228022","ip_address":"","utype":1,"ctime":1617842431,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"5912779561","product_id":100025201,"comment_content":"分层思想让我想到了网络通讯，同样的职责分离，同样的数据传输，不同的应用场景。<br><br>但是我想不明白，前面介绍的架构，都有个特点，就是，都有很明显的顺序，如从a到b从b到c，但mvc架构思想上好像并没有固定的顺序","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518228,"discussion_content":"其实是有次序的，准确的理解应该是 Model -&amp;gt; View -&amp;gt; Controllers。但是有些人会误解为 Model -&amp;gt; Controller -&amp;gt; View。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617842431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262761,"user_name":"nativertc","can_delete":false,"product_type":"c1","uid":1453183,"ip_address":"","ucode":"A54B560C8526AA","user_header":"","comment_is_top":false,"comment_ctime":1605838491,"is_pvip":false,"replies":[{"id":"95378","content":"两种，代理是模块B接管了A的业务，让别人把自己当作A，这叫代理。委托是A有件事情自己不擅长，把它明确标准后交给B干，这叫委托。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1605899276,"ip_address":"","comment_id":262761,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5900805787","product_id":100025201,"comment_content":"代理和委托到底是一种模式还是两种模式？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509963,"discussion_content":"两种，代理是模块B接管了A的业务，让别人把自己当作A，这叫代理。委托是A有件事情自己不擅长，把它明确标准后交给B干，这叫委托。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605899276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2038718,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1b/be/525e05ae.jpg","nickname":"NiceBlueChai","note":"","ucode":"2043333890C448","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367422,"discussion_content":"怎么感觉是一个意思，只是主宾颠倒了一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618361256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138166,"user_name":"Demon","can_delete":false,"product_type":"c1","uid":1390641,"ip_address":"","ucode":"58CD838717F36D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUdfNDQs3eLoIjfIXDm77W66udicLfqh6NA8QX4QuZNO48UlRTfDo2Fm2jGX0z3hjnbARib8wSbxcg/132","comment_is_top":false,"comment_ctime":1570073606,"is_pvip":false,"replies":[{"id":"53226","content":"我觉得你的理解是正确的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1570250851,"ip_address":"","comment_id":138166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865040902","product_id":100025201,"comment_content":"MVVM和MVP从结构上说很相似啊。viewModel和presenter向上都会更新view响应事件，向下则都能操作数据，响应dataChange。我觉得区别应该是职责上的。viewModel的职责是优化更新view的效率，所以更侧重与更新view，对于事件响应来说应该是直接委托（透传）给了业务逻辑（model）。就像React和VUE的vDOM一样。而presenter感觉会包含事件处理分发的逻辑。没用过mvp架构，不知道这么理解对不对？求老师解答。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469419,"discussion_content":"我觉得你的理解是正确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570250851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116513,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1563861397,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5858828693","product_id":100025201,"comment_content":"刷新了我对MVC的认识，虽然我天天用的是Spring MVC，但原理都是相通的，老师的课程真的要反复读，用思考的方式去记忆！","like_count":1},{"had_liked":false,"id":110852,"user_name":"Eason","can_delete":false,"product_type":"c1","uid":1018519,"ip_address":"","ucode":"69C0ADAC7C5475","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/97/6c1e90f1.jpg","comment_is_top":false,"comment_ctime":1562377573,"is_pvip":false,"replies":[{"id":"40338","content":"会谈到一些","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562409256,"ip_address":"","comment_id":110852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857344869","product_id":100025201,"comment_content":"许老师的MVC，依我理解，Facebook 的React＋Redux体现了不少。是不是以后章节也会谈到这些？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457092,"discussion_content":"会谈到一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562409256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110848,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1562376060,"is_pvip":false,"replies":[{"id":"40335","content":"从架构的层次，不是用户响应业务流程","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562409038,"ip_address":"","comment_id":110848,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5857343356","product_id":100025201,"comment_content":"从分层角度，我们会倾向于认为 Model 层在最底层；View 层在中间，它持有 Model 层的 DOM 指针；Controller 层在最上方。这个分层方式有点不太理解，按我的想法view接收用户的输入它应该在最上方。麻烦许老师详细解释一下。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457089,"discussion_content":"从架构的层次，不是用户响应业务流程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562409038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1515149,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1e/8d/5b242931.jpg","nickname":"Fish","note":"","ucode":"C20719F8B0F7C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384038,"discussion_content":"还是没明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626342375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110804,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1562339219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857306515","product_id":100025201,"comment_content":"我以前一直觉得ORM跟Model是两码事儿，但是别人都不这么认为，ORM仅仅是提供了操作数据库的一种方式，把Model做厚还是做薄是跟实际系统是有关系的，每个系统的稳定点和变化点是不同的，范式是别人实践的总结提炼，而我们是需要根据自己遇到的问题去调整范式的。","like_count":1},{"had_liked":false,"id":110663,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1562311639,"is_pvip":true,"replies":[{"id":"40212","content":"核心是接口是什么，不是实现","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562316445,"ip_address":"","comment_id":110663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857278935","product_id":100025201,"comment_content":"那基于数据库来实现Model层，正确的架构是什么呢？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456994,"discussion_content":"核心是接口是什么，不是实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562316445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110497,"user_name":"SugarZh","can_delete":false,"product_type":"c1","uid":1198302,"ip_address":"","ucode":"5312F3B5DB671A","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/de/bebd1bf6.jpg","comment_is_top":false,"comment_ctime":1562288131,"is_pvip":false,"replies":[{"id":"40195","content":"看了一下，貌似 mvvc 就是 mvvm 的别名","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562303097,"ip_address":"","comment_id":110497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857255427","product_id":100025201,"comment_content":"现在大部分公司都实行前后端分离，对于mvc中的v又被单独剥离出来，而现在前端又提出mvvc的模式(Vue)。许老师对此是如何理解这样的现状","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456909,"discussion_content":"看了一下，貌似 mvvc 就是 mvvm 的别名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562303097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331286,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":1140080,"ip_address":"","ucode":"DFE3078B632026","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/70/7e137498.jpg","comment_is_top":false,"comment_ctime":1642517093,"is_pvip":false,"replies":[{"id":"121101","content":"从B&#47;S架构的B来看，桌面是单机的，是否有S只是数据来源的变化","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1642602984,"ip_address":"","comment_id":331286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642517093","product_id":100025201,"comment_content":"读完评论后，得到的理解——本章内容的视角是，从单机软件和架构出发的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547277,"discussion_content":"从B/S架构的B来看，桌面是单机的，是否有S只是数据来源的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642602984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325691,"user_name":"Ronnie","can_delete":false,"product_type":"c1","uid":1266726,"ip_address":"","ucode":"DD24A2981E59F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/54/26/d3997877.jpg","comment_is_top":false,"comment_ctime":1639099299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639099299","product_id":100025201,"comment_content":"“也就是说，我并不倾向于认为存在所谓的 “Model-View-ViewModel” 这样的模式。”<br>我更倾向于认为给它一个不同名字以区别其他（MVC，MVP）从而更方便向人传递这样的设计思想。<br>","like_count":0},{"had_liked":false,"id":325688,"user_name":"Ronnie","can_delete":false,"product_type":"c1","uid":1266726,"ip_address":"","ucode":"DD24A2981E59F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/54/26/d3997877.jpg","comment_is_top":false,"comment_ctime":1639098827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639098827","product_id":100025201,"comment_content":"“在局部更新这个优化足够复杂时，我们往往不得不在 Model 和 View 之间，再额外引入一层 ViewModel 层来做这个事情。”<br>引入view model会带来这样的结果，从早期一些文章介绍vm来看，vm引入是解决ui测试和fat controller的问题<br>，不知道老师你怎么看？<br>","like_count":0},{"had_liked":false,"id":293418,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1621386983,"is_pvip":false,"replies":[{"id":"106427","content":"该做，但是不容易做得好","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1621553437,"ip_address":"","comment_id":293418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621386983","product_id":100025201,"comment_content":"许老师可以谈谈你对桌面界面单元测试的看法吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520205,"discussion_content":"该做，但是不容易做得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621553437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293360,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1621350561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621350561","product_id":100025201,"comment_content":"时隔1年再看，收获很大，谢谢","like_count":0},{"had_liked":false,"id":211130,"user_name":"Geek_93f973","can_delete":false,"product_type":"c1","uid":1969245,"ip_address":"","ucode":"93FE88391A0289","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIfianCzWMIsBxp2r6ETwicVp0icnqHVK1TGoMI0Dapzcczaft2c8RrgYwImOubGKrnfzhKQxJRRUVvQ/132","comment_is_top":false,"comment_ctime":1587899512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587899512","product_id":100025201,"comment_content":"“通过哪一层提供 API 接口？我个人会倾向于认为最佳的选择是在 ViewModel 层。Model 层也很容易提供 API，但是它可能会缺少一些重要的东西，比如 Selection。”<br>许老师，我认为提供的API也是一种事件驱动，也是一种交互（只是可能不是人机交互，是程序间的交互），是否放在controller层更合适？","like_count":0},{"had_liked":false,"id":200537,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1585617006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585617006","product_id":100025201,"comment_content":"看了看写的代码，<br>1.所有的业务逻辑与数据接口调用都推在了 ViewModel 里<br>2.Model 就是定义了一些 业务对象<br>3.View 就是一些界面布局与交互的实现<br><br>","like_count":0},{"had_liked":false,"id":195706,"user_name":"z","can_delete":false,"product_type":"c1","uid":1107666,"ip_address":"","ucode":"CDB0BE8562ECB6","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","comment_is_top":false,"comment_ctime":1585213553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585213553","product_id":100025201,"comment_content":"跟领域驱动的理念一样啊","like_count":0},{"had_liked":false,"id":190845,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1584698653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584698653","product_id":100025201,"comment_content":"感觉和 我理解的 安卓的 mvc - mvp -mvvm 还是有点区别的。。<br>mvc是演变了许多次的，最终演变成了 mvp，m和v隔离，由p打通，p可以复用；<br>至于 mvvm 感觉更像是 google 针对于 安卓这种 客户端交互 而强推的一种架构，由vm打通，弱化了p的管理定义和职能，没实际用过。。可能理解不对","like_count":0},{"had_liked":false,"id":180022,"user_name":"向往而行","can_delete":false,"product_type":"c1","uid":1141676,"ip_address":"","ucode":"AE01D637B946C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/ac/cc187d8d.jpg","comment_is_top":false,"comment_ctime":1582167302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582167302","product_id":100025201,"comment_content":"理解Model 一节讲得好像是 充血模型","like_count":0},{"had_liked":false,"id":170080,"user_name":"沫沫（美丽人生）","can_delete":false,"product_type":"c1","uid":1051023,"ip_address":"","ucode":"FC73BF0D79E3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","comment_is_top":false,"comment_ctime":1578517738,"is_pvip":false,"replies":[{"id":"66004","content":"并没有太本质的区别，我个人会倾向于 MVC 一点。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1578539896,"ip_address":"","comment_id":170080,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578517738","product_id":100025201,"comment_content":"老师，应该站到什么角度来理解MVC和MVP的区别呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480832,"discussion_content":"并没有太本质的区别，我个人会倾向于 MVC 一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578539896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145133,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572222640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572222640","product_id":100025201,"comment_content":"好的观点往往一致，yii 最佳实践说了同样的内容。<br>我们把逻辑更多向 Model 层倾斜，那么 Controller 层就简洁很多，这对跨平台开发将极其有利。","like_count":0},{"had_liked":false,"id":139401,"user_name":"小风","can_delete":false,"product_type":"c1","uid":1181942,"ip_address":"","ucode":"03D2FF9A81AC98","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/f6/76285598.jpg","comment_is_top":false,"comment_ctime":1570627180,"is_pvip":false,"replies":[{"id":"54161","content":"model层数据不完整，它只能提供api的一部分。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1570833177,"ip_address":"","comment_id":139401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570627180","product_id":100025201,"comment_content":"“提供api最佳是在ViewModel层，Model层可能缺少一些重要的东西，如selection。”许老师，这个不太理解，能否更详细讲一下。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469928,"discussion_content":"model层数据不完整，它只能提供api的一部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570833177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126863,"user_name":"zKerry","can_delete":false,"product_type":"c1","uid":1497740,"ip_address":"","ucode":"9FB006D1A38D3F","user_header":"","comment_is_top":false,"comment_ctime":1566496288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566496288","product_id":100025201,"comment_content":"这章有意思","like_count":0},{"had_liked":false,"id":116827,"user_name":"宋荣凯","can_delete":false,"product_type":"c1","uid":1500763,"ip_address":"","ucode":"CE39E34CE51B53","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/5b/68691a25.jpg","comment_is_top":false,"comment_ctime":1563930131,"is_pvip":false,"replies":[{"id":"42971","content":"我说的是单机软件，没有网络请求。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564030691,"ip_address":"","comment_id":116827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563930131","product_id":100025201,"comment_content":"老师，model使用DataChanged 事件不太理解。能讲讲它怎么用的吗? 一般不是接受http一个请求然后处理吗？ 不太理解怎么是用事件响应的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459698,"discussion_content":"我说的是单机软件，没有网络请求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564030691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112792,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1562827780,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1562827780","product_id":100025201,"comment_content":"MVC，MVP，MVVM，这算是一个演化的过程吗？刚开始做Android应用的时候，学习的都是MVC的方式，后来有人推荐了MVP，再后来又推荐了MVVM，这是我开发Android使用的演进方式。","like_count":0},{"had_liked":false,"id":110860,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1562380313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562380313","product_id":100025201,"comment_content":"最近正好在维护一个winform系统，model层的描述太棒了！<br>采用dom描述，主要是惯例还有业务数据一般是结构化的，个人理解","like_count":0}]}