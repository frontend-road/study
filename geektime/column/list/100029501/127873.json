{"id":127873,"title":"34丨答疑篇：关于索引以及缓冲池的一些解惑","content":"<p>这篇文章是进阶篇的最后一篇，在这一模块中，我主要针对SQL运行的底层原理进行了讲解，其中还有很多问题没有回答，我总结了进阶篇中常见的一些问题，希望能对你有所帮助。下面的内容主要包括了索引原则、自适应Hash、缓冲池机制和存储引擎等。</p><h2>关于索引（B+树索引和Hash索引，以及索引原则）</h2><h3>什么是自适应 Hash 索引？</h3><p>在回答这个问题前，让我们先回顾下B+树索引和Hash索引：</p><p>因为B+树可以使用到范围查找，同时是按照顺序的方式对数据进行存储，因此很容易对数据进行排序操作，在联合索引中也可以利用部分索引键进行查询。这些情况下，我们都没法使用Hash索引，因为Hash索引仅能满足（=）（&lt;&gt;）和IN查询，不能使用范围查询。此外，Hash索引还有一个缺陷，数据的存储是没有顺序的，在ORDER BY的情况下，使用Hash索引还需要对数据重新排序。而对于联合索引的情况，Hash值是将联合索引键合并后一起来计算的，无法对单独的一个键或者几个索引键进行查询。</p><p>MySQL默认使用B+树作为索引，因为B+树有着Hash索引没有的优点，那么为什么还需要自适应Hash索引呢？这是因为Hash索引在进行数据检索的时候效率非常高，通常只需要O(1)的复杂度，也就是一次就可以完成数据的检索。虽然Hash索引的使用场景有很多限制，但是优点也很明显，所以MySQL提供了一个自适应Hash索引的功能（Adaptive Hash Index）。注意，这里的自适应指的是不需要人工来制定，系统会根据情况自动完成。</p><!-- [[[read_end]]] --><p>什么情况下才会使用自适应Hash索引呢？如果某个数据经常被访问，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。</p><p>需要说明的是自适应Hash索引只保存热数据（经常被使用到的数据），并非全表数据。因此数据量并不会很大，因此自适应Hash也是存放到缓冲池中，这样也进一步提升了查找效率。</p><p>InnoDB中的自适应Hash相当于“索引的索引”，采用Hash索引存储的是B+树索引中的页面的地址。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/e0/692193e1df655561619cb464201ba3e0.jpg?wh=757*574\" alt=\"\"><br>\n你能看到，采用自适应Hash索引目的是方便根据SQL的查询条件加速定位到叶子节点，特别是当B+树比较深的时候，通过自适应Hash索引可以明显提高数据的检索效率。</p><p>我们来看下自适应Hash索引的原理。</p><p>自适应Hash采用Hash函数映射到一个Hash表中，如下图所示，查找字典类型的数据非常方便。</p><p>Hash表是数组+链表的形式。通过Hash函数可以计算索引键值所对应的bucket（桶）的位置，如果产生Hash冲突，就需要遍历链表来解决。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/ae/a6d510f8ca80feef8cb21b5fe55ef0ae.jpg?wh=1030*575\" alt=\"\"><br>\n我们可以通过<code>innodb_adaptive_hash_index</code>变量来查看是否开启了自适应Hash，比如：</p><pre><code>mysql&gt; show variables like '%adaptive_hash_index';\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/70/99/70e9907a16ec51f03cb99295fafd0899.png?wh=1286*392\" alt=\"\"><br>\n我来总结一下，InnoDB本身不支持Hash索引，但是提供自适应Hash索引，不需要用户来操作，存储引擎会自动完成。自适应Hash是InnoDB三大关键特性之一，另外两个分别是插入缓冲和二次写。</p><h3>什么是联合索引的最左原则？</h3><p>关于联合索引的最左原则，读者@老毕 给出了一个非常形象的解释：</p><p>假设我们有x、y、z三个字段，创建联合索引（x, y, z）之后，我们可以把x、y、z分别类比成“百分位”、“十分位”和“个位”。</p><p>查询“x=9 AND y=8 AND z=7”的过程，就是在一个由小到大排列的数值序列中寻找“987”，可以很快找到。</p><p>查询“y=8 AND z=7”，就用不上索引了，因为可能存在187、287、387、487………这样就必须扫描所有数值。</p><p>我在这个基础上再补充说明一下。</p><p>查询“z=7 AND y=8 AND x=9”的时候，如果三个字段x、y、z在条件查询的时候是乱序的，但采用的是等值查询（=）或者是IN查询，那么MySQL的优化器可以自动帮我们调整为可以使用联合索引的形式。</p><p>当我们查询“x=9 AND y&gt;8 AND z=7”的时候，如果建立了(x,y,z)顺序的索引，这时候z是用不上索引的。这是因为MySQL在匹配联合索引最左前缀的时候，如果遇到了范围查询，比如（&lt;）（&gt;）和between等，就会停止匹配。索引列最多作用于一个范围列，对于后面的Z来说，就没法使用到索引了。</p><p>通过这个我们也可以知道，联合索引的最左前缀匹配原则针对的是创建的联合索引中的顺序，如果创建了联合索引（x,y,z），那么这个索引的使用顺序就很重要了。如果在条件语句中只有y和z，那么就用不上联合索引。</p><p>此外，SQL条件语句中的字段顺序并不重要，因为在逻辑查询优化阶段会自动进行查询重写。</p><p>最后你需要记住，如果我们遇到了范围条件查询，比如（&lt;）（&lt;=）（&gt;）（&gt;=）和between等，那么范围列后的列就无法使用到索引了。</p><h3>Hash索引与B+树索引是在建索引的时候手动指定的吗？</h3><p>如果使用的是MySQL的话，我们需要了解MySQL的存储引擎都支持哪些索引结构，如下图所示（参考来源 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-index.html\">https://dev.mysql.com/doc/refman/8.0/en/create-index.html</a>）。如果是其他的DBMS，可以参考相关的DBMS文档。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/38/f7706327f9ebc7488653d69b4cd5f438.png?wh=1729*518\" alt=\"\"><br>\n你能看到，针对InnoDB和MyISAM存储引擎，都会默认采用B+树索引，无法使用Hash索引。InnoDB提供的自适应Hash是不需要手动指定的。如果是Memory/Heap和NDB存储引擎，是可以进行选择Hash索引的。</p><h2>关于缓冲池</h2><h3>缓冲池和查询缓存是一个东西吗？</h3><p>首先我们需要了解在InnoDB存储引擎中，缓冲池都包括了哪些。</p><p>在InnoDB存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/dc/0eb57c0d0ea7611b16ac6efa76771bdc.jpg?wh=742*334\" alt=\"\"><br>\n从图中，你能看到InnoDB缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应Hash和数据字典信息等。</p><p>我们之前讲过使用缓冲池技术的原因。这里重新回顾一下。InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能弥补这两者之间I/O效率的差值，我们就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁盘I/O。</p><p>“频次*位置”这个原则，可以帮我们对I/O访问效率进行优化。</p><p>首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p><p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有200G，但是内存只有16G，缓冲池大小只有1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会优先对使用频次高的热数据进行加载。</p><p>了解了缓冲池的作用之后，我们还需要了解缓冲池的另一个特性：预读。</p><p>缓冲池的作用就是提升I/O效率，而我们进行读取数据的时候存在一个“局部性原理”，也就是说我们使用了一些数据，大概率还会使用它周围的一些数据，因此采用“预读”的机制提前加载，可以减少未来可能的磁盘I/O操作。</p><p>那么什么是查询缓存呢？</p><p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的鲁棒性大大降低，只有相同的查询操作才会命中查询缓存。因此MySQL的查询缓存命中率不高，在MySQL8.0版本中已经弃用了查询缓存功能。</p><p>查看是否使用了查询缓存，使用命令：</p><pre><code>show variables like '%query_cache%';\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/cb/c7/cb590bd0aac9751401943487534360c7.png?wh=1091*378\" alt=\"\"><br>\n缓冲池并不等于查询缓存，它们的共同点都是通过缓存的机制来提升效率。但缓冲池服务于数据库整体的I/O操作，而查询缓存服务于SQL查询和查询结果集的，因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。</p><h2>其他</h2><p>很多人对InnoDB和MyISAM的取舍存在疑问，到底选择哪个比较好呢？</p><p>我们需要先了解InnoDB和MyISAM各自的特点。InnoDB支持事务和行级锁，是MySQL默认的存储引擎；MyISAM只支持表级锁，不支持事务，更适合读取数据库的情况。</p><p>如果是小型的应用，需要大量的SELECT查询，可以考虑MyISAM；如果是事务处理应用，需要选择InnoDB。</p><p>这两种引擎各有特点，当然你也可以在MySQL中，针对不同的数据表，可以选择不同的存储引擎。</p><p>最后给大家提供一下专栏中学习资料的下载。</p><p>如果你想导入文章中的“product_comment”表结构和数据，点击<a href=\"https://github.com/cystanford/product_comment\">这里</a>即可。你也可以在<a href=\"https://pan.baidu.com/s/1LBEAm50DDP9AjErLtGplLg\">网盘</a>里下载，提取码为32ep。</p><p>关于文章中涉及到的思维导图，点击<a href=\"https://github.com/cystanford/SQL-XMind\">这里</a>下载即可。</p><p>最后留一道思考题，供你消化今天答疑篇里的内容。</p><p>假设我们有x、y、z三个字段，创建联合索引（x, y, z）。数据表中的数据量比较大，那么对下面语句进行SQL查询的时候，哪个会使用联合索引？如果使用了联合索引，分别使用到了联合索引的哪些部分？</p><p>A</p><pre><code>SELECT x, y, z FROM table WHERE y=2 AND x&gt;1 AND z=3\n\n</code></pre><p>B</p><pre><code>SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z&gt;3\n</code></pre><p>C</p><pre><code>SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z=3\n</code></pre><p>D</p><pre><code>SELECT x, y, z FROM table WHERE y&gt;2 AND x=1 AND z=3\n\n</code></pre><p>欢迎你在评论区写下你的答案，我会和你一起交流，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p><p></p>","comments":[{"had_liked":false,"id":129170,"user_name":"DZ","can_delete":false,"product_type":"c1","uid":1132240,"ip_address":"","ucode":"452555FA0F9E0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","comment_is_top":false,"comment_ctime":1567056358,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"173365748198","product_id":100029501,"comment_content":"ABCD四条语句都会使用索引。<br><br>A: WHERE y=2 AND x&gt;1 AND z=3  -- 使用索引(x,y,z)的x列。<br><br>x是范围列，索引列最多作用于一个范围列，范围列之后的y列和z列无法使用索引。<br><br>B: WHERE y=2 AND x=1 AND z&gt;3  -- 完整使用索引(x,y,z)。<br><br>C: WHERE y=2 AND x=1 AND z=3  -- 完整使用索引(x,y,z)。<br><br>z是范围列，索引可以被使用。<br><br>D: WHERE y&gt;2 AND x=1 AND z=3 -- 使用索引(x,y,z)的x列和y列。<br><br>y是范围列，索引列最多作用于一个范围列，范围列之后的z列无法使用索引。<br><br><br>感谢老师指正，纠正了我之前的错误理解。","like_count":41,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588413,"discussion_content":"清晰！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663748172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621959,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJBG6cXQGiayJlFxTeN3IPOichoX5NjdhqTt8rmyiaJDfd5VytLSrjwrufDAOdpoxFuROOLiawFh0mnBg/132","nickname":"study～","note":"","ucode":"6EFD4E284CD22F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14082,"discussion_content":"请教一下 D中 为什么会是 x y？第一个y>2不就是范围索引么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568726126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132240,"avatar":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","nickname":"DZ","note":"","ucode":"452555FA0F9E0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1621959,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJBG6cXQGiayJlFxTeN3IPOichoX5NjdhqTt8rmyiaJDfd5VytLSrjwrufDAOdpoxFuROOLiawFh0mnBg/132","nickname":"study～","note":"","ucode":"6EFD4E284CD22F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14091,"discussion_content":"因为索引如何被创建影响索引如何被使用，题中索引的创建规则是X-Y-Z，所以使用起来也是按此顺序。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1568727046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":14082,"ip_address":""},"score":14091,"extra":""}]}]},{"had_liked":false,"id":129844,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1567301044,"is_pvip":true,"replies":[{"id":"62734","content":"分析的不错","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577087406,"ip_address":"","comment_id":129844,"utype":1}],"discussion_count":6,"race_medal":1,"score":"61696843188","product_id":100029501,"comment_content":"利用老师的 hexo 表做了一个实现：<br>按照这个顺序 在 `hp_max`, `hp_growth`, `mp_max`  这3个字段上建立联合索引<br>上面的 A 情况：<br>explain select * from heros where hp_max &gt; 5000 and hp_growth = 181.6 and mp_max = 200;<br>是全部扫描，不走索引 type 为 all<br>上面的 B 情况：<br>explain select * from heros where hp_max = 5000 and hp_growth = 181.6 and mp_max &gt; 200;<br>走联合索引， type 为 range<br>上面的 C 情况：<br>explain select * from heros where hp_max = 5000 and hp_growth = 181.6 and mp_max = 200;<br>走联合索引， type 为 ref<br>上面的 D 情况：<br>explain select * from heros where hp_max = 5000 and hp_growth &gt; 181.6 and mp_max = 200;<br>走联合索引， type 为 range","like_count":15,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465675,"discussion_content":"分析的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577087406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201192,"discussion_content":"mysql> explain select * from heros where hp_max > 5000 and hp_growth = 288.8 and mp_max = 1746;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | heros | NULL       | ALL  | xyz           | NULL | NULL    | NULL |   69 |     1.45 | Using where |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\nmysql> explain select * from heros ;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+\n|  1 | SIMPLE      | heros | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   69 |   100.00 | NULL  |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+\n1 row in set, 1 warning (0.00 sec)\n表里一共就69行数据，x>5000这个过滤条件过滤度为100%，所以才是type all的，换成大于7000就是range了","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1583764976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201188,"discussion_content":"A你的条件>5000有问题吧，数据表里就没有小于5000的这个字段，所以type才是all，但explain 结果的key里是有联合索引的\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                 |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n|  1 | SIMPLE      | heros | NULL       | range | xyz           | xyz  | 5       | NULL |   22 |     1.45 | Using index condition |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n1 row in set, 1 warning (0.00 sec)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583764729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96841,"discussion_content":"* 需要回表的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577096039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201189,"discussion_content":"mysql> explain select * from heros where hp_max > 7000 and hp_growth = 288.8 and mp_max = 1746;\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                 |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n|  1 | SIMPLE      | heros | NULL       | range | xyz           | xyz  | 5       | NULL |   22 |     1.45 | Using index condition |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n1 row in set, 1 warning (0.00 sec)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583764748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1532231,"avatar":"https://static001.geekbang.org/account/avatar/00/17/61/47/0a6e9729.jpg","nickname":"竹影","note":"","ucode":"40386DFA60F899","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96816,"discussion_content":"select * from heros where hp_max > 5000 and hp_growth = 181.6 and mp_max = 200；\nselect hp_max,hp_growth,mp_max from heros where hp_max > 5000 and hp_growth = 181.6 and mp_max = 200\n为一个type=ALL，第二个type=index？* 查匹配行的所有列，type=ALL是全表扫描，这两互有影响？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577095007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128724,"user_name":"Hanqiu_Tan","can_delete":false,"product_type":"c1","uid":1524000,"ip_address":"","ucode":"2F5BEF36FBC797","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1r98FrLibt2JkibgLGPuLxxyn2etGbDeo7pEByourpvvZL580RFmA4S1bwPgGOkIqtsmFfFCktgLEzC2UnH9DqMQ/132","comment_is_top":false,"comment_ctime":1566954729,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27336758505","product_id":100029501,"comment_content":"首先在数据量比较大的前提下，A中x是范围查询最可能做的是全表扫描利用多块读方式，这样效果很好点。B和C应该利用了联合索引（x,y,z）中所有列。D根据最左原则应该利用了联合索引中的x,y列，执行步骤应该是，通过x,y找到rowid,回表，在通过判断z是否等于3，得到结果","like_count":7,"discussions":[{"author":{"id":2815900,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/f7/9c/69c5c5dc.jpg","nickname":"越锋利","note":"","ucode":"63E9E3F3C7D53D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532758,"discussion_content":"没懂啊，D 的情况，联合索引里已经有 z 的值了，为啥还要回表，在 y 上转几圈不行吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637678562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190842,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1584698051,"is_pvip":true,"discussion_count":2,"race_medal":2,"score":"14469599939","product_id":100029501,"comment_content":"老师这里说的：查询“z=7 AND y=8 AND x=9”的时候，如果三个字段 x、y、z 在条件查询的时候是乱序的，但采用的是等值查询（=）或者是 IN 查询，那么 MySQL 的优化器可以自动帮我们调整为可以使用联合索引的形式。<br><br>我的理解是有点问题的，看下面同学的回答也确实误导了一些同学。有的同学可能过于看重“但采用的是等值查询（=）或者是 IN 查询” 这句话了。<br><br>这里贴上测试方案，有兴趣的可以试试：<br><br>建表语句：<br>CREATE TABLE `test` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `x` int(11) DEFAULT NULL,<br>  `y` int(11) DEFAULT NULL,<br>  `z` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `test` (`x`,`y`,`z`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br><br>存储过程：<br>DELIMITER &#47;&#47;<br>CREATE PROCEDURE testInsert(cnt int)<br>  BEGIN <br>    DECLARE i int DEFAULT 0;<br>    START TRANSACTION;<br>    WHILE i&lt;cnt<br>      DO <br>          INSERT INTO test(x,y,z) VALUES(i,i,i);<br>      set i=i+1;<br>      end WHILE;<br>    COMMIT;<br>    end &#47;&#47;<br>DELIMITER;<br><br>CALL testInsert(1000000);<br><br>分析方法：<br>explain SELECT x, y, z FROM test WHERE y=2 AND x&gt;1 AND z=3;<br><br><br>explain SELECT x, y, z FROM test WHERE y=2 AND x=1 AND z&gt;3;<br><br><br>explain SELECT x, y, z FROM test WHERE y=2 AND x=1 AND z=3;<br><br><br>explain SELECT x, y, z FROM test WHERE y&gt;2 AND x=1 AND z=3;","like_count":4,"discussions":[{"author":{"id":2815900,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/f7/9c/69c5c5dc.jpg","nickname":"越锋利","note":"","ucode":"63E9E3F3C7D53D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532759,"discussion_content":"有解题方法，但是没有答案？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637678640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269090,"discussion_content":"看了那么多评论 还是你的靠谱点 但是哥们你上面的存储过程有个语法写错了。。。\n在CALL这行上面的 DELIMITER 这里要恢复正常的MySQL分隔符语法还少了一个空格，应该是这样：&#34;\nDELIMITER //\nCREATE PROCEDURE testInsert(cnt int)\n  BEGIN\n    DECLARE i int DEFAULT 0;\n    START TRANSACTION;\n    WHILE i<cnt\n      DO\n          INSERT INTO test(x,y,z) VALUES(i,i,i);\n      set i=i+1;\n      end WHILE;\n    COMMIT;\n    end //\nDELIMITER ;\n&#34;\n才是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589865876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183542,"user_name":"四喜","can_delete":false,"product_type":"c1","uid":1071389,"ip_address":"","ucode":"C5EBED19C0F332","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","comment_is_top":false,"comment_ctime":1583062561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14467964449","product_id":100029501,"comment_content":"A-&gt; (x)<br>B-&gt; (x, y)<br>C-&gt; (x,y,z)<br>D-&gt; (x,y)","like_count":3},{"had_liked":false,"id":165322,"user_name":"爬行的蜗牛","can_delete":false,"product_type":"c1","uid":1033956,"ip_address":"","ucode":"6623B62DE63CE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","comment_is_top":false,"comment_ctime":1577200322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462102210","product_id":100029501,"comment_content":"A.  SELECT x, y, z FROM table WHERE y=2 AND x&gt;1 AND z=3 .  <br>用到联合索引的x 字段； 因为x 是最左边的； <br><br>B. SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z&gt;3 <br>只是用到联合索引的x,y,z  字段； <br><br>C. SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z=3<br>用到联合索引， x,y,z 字段都用到； <br><br>D. SELECT x, y, z FROM table WHERE y&gt;2 AND x=1 AND z=3<br>使用到 x，y字段的索引；  <br>","like_count":3},{"had_liked":false,"id":128713,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1566953902,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14451855790","product_id":100029501,"comment_content":"A -&gt; y<br>B -&gt; y,x<br>C -&gt; y,x,z<br>D -&gt; None","like_count":3,"discussions":[]},{"had_liked":false,"id":170264,"user_name":"rike","can_delete":false,"product_type":"c1","uid":1583833,"ip_address":"","ucode":"920AAD0BD9245C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","comment_is_top":false,"comment_ctime":1578558400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168492992","product_id":100029501,"comment_content":"按照heros表加了联合索引后的执行结果，如果范围查询是联合索引的第一列，就无法走索引了？","like_count":2},{"had_liked":false,"id":170183,"user_name":"rike","can_delete":false,"product_type":"c1","uid":1583833,"ip_address":"","ucode":"920AAD0BD9245C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","comment_is_top":false,"comment_ctime":1578544930,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10168479522","product_id":100029501,"comment_content":"创建完表后查看表的ddl，发现PRIMARY KEY (`comment_id`) USING BTREE,这里的BTREE是指b树还是b+树？","like_count":2,"discussions":[{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126960,"discussion_content":"麻烦作者倒是回复一下啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578553618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269086,"discussion_content":"我查过官方文档，在对B-tree（https://dev.mysql.com/doc/refman/8.0/en/glossary.html）的解释下面有这么一句话：“B-tree structures used by MySQL storage engines may be regarded as variants due to sophistications not present in a classic B-tree design. ”\n翻译过来就是“MySQL存储引擎使用B-tree这个数据结构也许是因为它没有传统B-tree设计的复杂性，即视作传统B-tree的变体。”\n\n简单来讲 这里的USING BTREE就是指的B+树，你可以翻回24节《索引的原理》那里再看看B 树和 B+树的区别。 \n\n个人理解，仅供参考。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589865304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":126960,"ip_address":""},"score":269086,"extra":""}]}]},{"had_liked":false,"id":128986,"user_name":"渴望飞的哺乳类","can_delete":false,"product_type":"c1","uid":1193958,"ip_address":"","ucode":"D16372552A2415","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/e6/71bcbc93.jpg","comment_is_top":false,"comment_ctime":1567001495,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10156936087","product_id":100029501,"comment_content":"思考题：<br>A：全表扫描<br>B：使用联合索引（x，y，z）<br>C：使用联合索引（x，y，z）<br>D：使用联合索引（x，y）","like_count":2},{"had_liked":false,"id":274700,"user_name":"zxjiao","can_delete":false,"product_type":"c1","uid":1242725,"ip_address":"","ucode":"01AD348ECAE76C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/65/e4e04d15.jpg","comment_is_top":false,"comment_ctime":1611130957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906098253","product_id":100029501,"comment_content":"A：全表扫描；<br>B：因为z的时候有范围判断，停止匹配，所以使用了联合索引的（x,y）部分；<br>C：使用了联合索引（x,y,z）<br>D：因为y的时候有范围判断，停止匹配，所以使用了联合索引的（x）部分；","like_count":1},{"had_liked":false,"id":265889,"user_name":"🌞🇨🇳👦","can_delete":false,"product_type":"c1","uid":1168085,"ip_address":"","ucode":"6BB08F05546D06","user_header":"https://static001.geekbang.org/account/avatar/00/11/d2/d5/ed93f2fa.jpg","comment_is_top":false,"comment_ctime":1607062722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902030018","product_id":100029501,"comment_content":"老师好，想问一下怎么禁止本地mysql的一切缓存，想测试sql语句变化&#47;索引变化效果，但是有缓存不好看出来","like_count":1},{"had_liked":false,"id":225750,"user_name":"Devo","can_delete":false,"product_type":"c1","uid":1325667,"ip_address":"","ucode":"79583A5F52FFA9","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/63/a94f339e.jpg","comment_is_top":false,"comment_ctime":1591846042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886813338","product_id":100029501,"comment_content":"老师，请问下“这是因为 MySQL 在匹配联合索引最左前缀的时候，如果遇到了范围查询，比如（&lt;）（&gt;）和 between 等，就会停止匹配。索引列最多作用于一个范围列，对于后面的 Z 来说，就没法使用到索引了。”，这句话中，为什么联合索引遇到范围查询会停止后面的匹配？从索引树的物理结构来讲该如何理解这句话呢？","like_count":1},{"had_liked":false,"id":195149,"user_name":"博弈","can_delete":false,"product_type":"c1","uid":1433344,"ip_address":"","ucode":"B1A69837E41972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EcYNib1bnDf5dz6JcrE8AoyZYMdqic2VNmbBtCcVZTO9EoDZZxqlQDEqQKo6klCCmklOtN9m0dTd2AOXqSneJYLw/132","comment_is_top":false,"comment_ctime":1585141124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880108420","product_id":100029501,"comment_content":"ABC会使用是索引，D不会使用索引。","like_count":1},{"had_liked":false,"id":185132,"user_name":"Echo","can_delete":false,"product_type":"c1","uid":1409357,"ip_address":"","ucode":"F04C6BC4E288A7","user_header":"https://static001.geekbang.org/account/avatar/00/15/81/4d/5f892de2.jpg","comment_is_top":false,"comment_ctime":1583492142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878459438","product_id":100029501,"comment_content":"老师您好：请问，InnoDB 三大关键特性之一‘二次写’是指什么？","like_count":1},{"had_liked":false,"id":170741,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1578701860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873669156","product_id":100029501,"comment_content":"为什么不说maraiadb","like_count":1},{"had_liked":false,"id":165310,"user_name":"爬行的蜗牛","can_delete":false,"product_type":"c1","uid":1033956,"ip_address":"","ucode":"6623B62DE63CE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","comment_is_top":false,"comment_ctime":1577198480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872165776","product_id":100029501,"comment_content":"B. SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z&gt;3 <br>只是用到联合索引的x,y 的字段； <br><br>C. SELECT x, y, z FROM table WHERE y=2 AND x=1 AND z=3<br>用到联合索引， x,y,z 字段都用到； ","like_count":1},{"had_liked":false,"id":162741,"user_name":"壶中无酒","can_delete":false,"product_type":"c1","uid":1339379,"ip_address":"","ucode":"9A4C59E6141F8F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/f3/6cdf7f06.jpg","comment_is_top":false,"comment_ctime":1576583271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871550567","product_id":100029501,"comment_content":"答题：<br>X<br>XYZ<br>XYZ<br>XY","like_count":1},{"had_liked":false,"id":154484,"user_name":"冲","can_delete":false,"product_type":"c1","uid":1149914,"ip_address":"","ucode":"4191C8A4DF3840","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIk46cor5XVFTPZbPOnb7pViabgy450pobo46hRHFQz5nR5ocYRKIzC8vShic36vwa553H4Vj50x5wA/132","comment_is_top":false,"comment_ctime":1574441563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869408859","product_id":100029501,"comment_content":"只有C用了索引，其他的因为条件不是采用=或者in不会进行排序","like_count":1},{"had_liked":false,"id":144670,"user_name":"Coool","can_delete":false,"product_type":"c1","uid":1701702,"ip_address":"","ucode":"1D1AB3270B02B9","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/46/209ca424.jpg","comment_is_top":false,"comment_ctime":1571993120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866960416","product_id":100029501,"comment_content":"以heros表为例，进行查询：<br>A：explain select * from heros where hp_max &gt; 5000 and hp_growth = 329 and mp_max = 100; -- All<br><br>B：explain select * from heros where hp_max = 5000 and hp_growth = 329 and mp_max &gt; 100; -- range<br><br>C：explain select * from heros where hp_max = 5000 and hp_growth = 329 and mp_max = 100; -- ref<br><br>D：explain select * from heros where hp_max = 5000 and hp_growth &gt; 329 and mp_max = 100; -- range","like_count":1},{"had_liked":false,"id":131568,"user_name":"NO.9","can_delete":false,"product_type":"c1","uid":1336970,"ip_address":"","ucode":"B92F14B493406F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fUDCLLob6DFS8kZcMUfxOc4qQHeQfW4rIMK5Ty2u2AqLemcdhVRw7byx85HrVicSvy5AiabE0YGMj5gVt8ibgrusA/132","comment_is_top":false,"comment_ctime":1567815138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862782434","product_id":100029501,"comment_content":"A:x<br>B:xyz<br>C:xyz<br>D:xy","like_count":1},{"had_liked":false,"id":130169,"user_name":"niemo","can_delete":false,"product_type":"c1","uid":1100142,"ip_address":"","ucode":"71364762238367","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/6e/1ac1c955.jpg","comment_is_top":false,"comment_ctime":1567395771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862363067","product_id":100029501,"comment_content":"联合索引这里是不是要讲下各种数据库之间的where后条件执行的顺序啊？mysql是从左到右，从上到下，oracle是从右到左，从上到下，对吧？<br>","like_count":1},{"had_liked":false,"id":129675,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1567215526,"is_pvip":false,"replies":[{"id":"62736","content":"除了myisam只支持表级锁以外，myisam不是事务安全的，而且不支持外键。你可以理解myisam更简化轻量级","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577087625,"ip_address":"","comment_id":129675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862182822","product_id":100029501,"comment_content":"对于读操作，为什么选择myisam比innobd效率要高？是因为锁的粒度吗？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465595,"discussion_content":"除了myisam只支持表级锁以外，myisam不是事务安全的，而且不支持外键。你可以理解myisam更简化轻量级","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577087625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129672,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1567215019,"is_pvip":false,"replies":[{"id":"53407","content":"也是使用的B+树","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570434287,"ip_address":"","comment_id":129672,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5862182315","product_id":100029501,"comment_content":"Myisam使用的好像是b- 树吧？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465594,"discussion_content":"也是使用的B+树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570434287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7033,"discussion_content":"都是 B+ 树，只不过实现的方式不一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567300100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","nickname":"asdf100","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":7051,"discussion_content":"你说的对的，我记错了，基础不牢固呀！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567324197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7033,"ip_address":""},"score":7051,"extra":""}]}]},{"had_liked":false,"id":316098,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1634132802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634132802","product_id":100029501,"comment_content":"CREATE TABLE `employees` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(24) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,<br>  `age` int(11) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,<br>  `position` varchar(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;职位&#39;,<br>  `hire_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;入职时间&#39;,<br>  PRIMARY KEY (`id`),<br>  KEY `idx_name_age_position` (`name`,`age`,`position`) USING BTREE<br>) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT=&#39;员工记录表&#39;;<br><br>语句1：<br>EXPLAIN SELECT * FROM employees WHERE name= &#39;LiLei&#39; AND age &gt; 22 AND position =&#39;manager&#39;;<br>语句2：<br>explain  select *<br>from employees<br>where name=&#39;LiLei&#39;<br>and age &gt;=22<br>and position = &#39;dev&#39;;<br><br><br>语句1的结果：<br>1\tSIMPLE\temployees\t\trange\tidx_name_age_position\tidx_name_age_position\t78\t\t1\t33.33\tUsing index condition<br><br><br>语句2的结果<br>1\tSIMPLE\temployees\t\trange\tidx_name_age_position\tidx_name_age_position\t140\t\t1\t33.33\tUsing index condition<br><br><br>我的疑问是如果按照范围列只能匹配一次的话，为什么第二句的keylen是140，这个明显是三个字段都用上了","like_count":0},{"had_liked":false,"id":128834,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566970788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566970788","product_id":100029501,"comment_content":"思考题：<br>A.使用联合索引的x部分<br>B.使用联合索引的x,y,z部分<br>C.使用联合索引的x,y,z部分<br>使用联合索引的x,y部分","like_count":0},{"had_liked":false,"id":128810,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1566966899,"is_pvip":false,"discussion_count":3,"race_medal":1,"score":"1566966899","product_id":100029501,"comment_content":"所以，我的问题是: 查询缓存的数据是不是来自缓存池？我理解是的。","like_count":1,"discussions":[{"author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6612,"discussion_content":"不是的，查询缓存是如果你现在查一张表的数据，如果是第一次查询，mysql会把数据放到缓存中（一般是按照key-value存储，key就是你的查询语句），如果下次你再执行同样的语句，mysql就不会去引擎层去查了，直接拿缓存中的数据返回给你，但是查询缓存有一个弊端就是你的数据没更新一次，缓存中的数据就会失效，下次再查的话还会再去引擎层取数据然后放到查询缓存中，mysql在8.0后版本已经把这个干掉了，因为弊端太大；而缓冲池是存的热点数据，你可以理解为存的是一页一页的数据，这部分的数据的特点你即使是更新也是更新缓存（前提是不是唯一索引），持久话也就是指的这mysql的刷脏页。详细的可以找一下资料，我这里说个大概","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566991651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6805,"discussion_content":"谢谢解答，我还以为查询缓存的数据也放在缓存池所在的那块内存空间里呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567127170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6612,"ip_address":""},"score":6805,"extra":""},{"author":{"id":1021638,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/c6/ac69caa9.jpg","nickname":"今晚吃啥","note":"","ucode":"960608C402BA87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":21619,"discussion_content":"我的理解：这里讲的缓冲池，是由存储引擎负责的；查询缓存是数据库查询器分析SQL语句时，如果这条刚查过，读取相应的缓存，也是属于“缓存”，但和这个缓冲池不是一起，不是由存储引擎负责的。查询缓存的缺点其他人讲很多了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569504958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6805,"ip_address":""},"score":21619,"extra":""}]}]},{"had_liked":false,"id":128762,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1566958377,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566958377","product_id":100029501,"comment_content":"A: x<br>B: x,y,z<br>C: x,y,z<br>D: x,y","like_count":0,"discussions":[{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6550,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566966463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}