{"id":84953,"title":"46 | 案例篇：为什么应用容器化后，启动慢了很多？","content":"<p>你好，我是倪朋飞。</p><p>不知不觉，我们已经学完了整个专栏的四大基础模块，即 CPU、内存、文件系统和磁盘 I/O、以及网络的性能分析和优化。相信你已经掌握了这些基础模块的基本分析、定位思路，并熟悉了相关的优化方法。</p><p>接下来，我们将进入最后一个重要模块—— 综合实战篇。这部分实战内容，也将是我们对前面所学知识的复习和深化。</p><p>我们都知道，随着 Kubernetes、Docker 等技术的普及，越来越多的企业，都已经走上了应用程序容器化的道路。我相信，你在了解学习这些技术的同时，一定也听说过不少，基于 Docker 的微服务架构带来的各种优势，比如：</p><ul>\n<li>\n<p>使用 Docker ，把应用程序以及相关依赖打包到镜像中后，部署和升级更快捷；</p>\n</li>\n<li>\n<p>把传统的单体应用拆分成多个更小的微服务应用后，每个微服务的功能都更简单，并且可以单独管理和维护；</p>\n</li>\n<li>\n<p>每个微服务都可以根据需求横向扩展。即使发生故障，也只是局部服务不可用，而不像以前那样，导致整个服务不可用。</p>\n</li>\n</ul><p>不过，任何技术都不是银弹。这些新技术，在带来诸多便捷功能之外，也带来了更高的复杂性，比如性能降低、架构复杂、排错困难等等。</p><p>今天，我就通过一个 Tomcat 案例，带你一起学习，如何分析应用程序容器化后的性能问题。</p><!-- [[[read_end]]] --><h2>案例准备</h2><p>今天的案例，我们只需要一台虚拟机。还是基于 Ubuntu 18.04，同样适用于其他的 Linux 系统。我使用的案例环境如下所示：</p><ul>\n<li>\n<p>机器配置：2 CPU，8GB 内存。</p>\n</li>\n<li>\n<p>预先安装 docker、curl、jq、pidstat 等工具，如 apt install docker.io curl jq sysstat。</p>\n</li>\n</ul><p>其中，jq 工具专门用来在命令行中处理 json。为了更好的展示 json 数据，我们用这个工具，来格式化 json 输出。</p><p>你需要打开两个终端，登录到同一台虚拟机中，并安装上述工具。</p><p>注意，以下所有命令都默认以 root 用户运行，如果你用普通用户身份登陆系统，请运行 sudo su root 命令切换到 root 用户。</p><blockquote>\n<p>如果安装过程有问题，你可以先上网搜索解决，实在解决不了的，记得在留言区向我提问。</p>\n</blockquote><p>到这里，准备工作就完成了。接下来，我们正式进入操作环节。</p><h2>案例分析</h2><p>我们今天要分析的案例，是一个 Tomcat 应用。Tomcat 是 Apache 基金会旗下，Jakarta 项目开发的轻量级应用服务器，它基于 Java 语言开发。Docker 社区也维护着 Tomcat 的<a href=\"https://hub.docker.com/_/tomcat\">官方镜像</a>，你可以直接使用这个镜像，来启动一个 Tomcat 应用。</p><p>我们的案例，也基于 Tomcat 的官方镜像构建，其核心逻辑很简单，就是分配一点儿内存，并输出 “Hello, world!”。</p><pre><code>&lt;%\nbyte data[] = new byte[256*1024*1024];\nout.println(&quot;Hello, wolrd!&quot;);\n%&gt;\n</code></pre><p>为了方便你运行，我已经将它打包成了一个 <a href=\"https://github.com/feiskyer/linux-perf-examples/tree/master/tomcat\">Docker 镜像</a> feisky/tomcat:8，并推送到了 Docker Hub 中。你可以直接按照下面的步骤来运行它。</p><p>在终端一中，执行下面的命令，启动 Tomcat 应用，并监听 8080端口。如果一切正常，你应该可以看到如下的输出：</p><pre><code># -m表示设置内存为512MB\n$ docker run --name tomcat --cpus 0.1 -m 512M -p 8080:8080 -itd feisky/tomcat:8\nUnable to find image 'feisky/tomcat:8' locally\n8: Pulling from feisky/tomcat\n741437d97401: Pull complete\n...\n22cd96a25579: Pull complete\nDigest: sha256:71871cff17b9043842c2ec99f370cc9f1de7bc121cd2c02d8e2092c6e268f7e2\nStatus: Downloaded newer image for feisky/tomcat:8\nWARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\n2df259b752db334d96da26f19166d662a82283057411f6332f3cbdbcab452249\n</code></pre><p>从输出中，你可以看到，docker run 命令，会自动拉取镜像并启动容器。</p><p>这里顺便提一下，之前很多同学留言问，到底要怎么下载 Docker 镜像。其实，上面的 docker run，就是自动下载镜像到本地后，才开始运行的。</p><p>由于 Docker 镜像分多层管理，所以在下载时，你会看到每层的下载进度。除了像docker run 这样自动下载镜像外，你也可以分两步走，先下载镜像，然后再运行容器。</p><p>比如，你可以先运行下面的 docker pull 命令，下载镜像：</p><pre><code>$ docker pull feisky/tomcat:8\n8: Pulling from feisky/tomcat\nDigest: sha256:71871cff17b9043842c2ec99f370cc9f1de7bc121cd2c02d8e2092c6e268f7e2\nStatus: Image is up to date for feisky/tomcat:8\n</code></pre><p>显然，在我的机器中，镜像已存在，所以就不需要再次下载，直接返回成功就可以了。</p><p>接着，在终端二中使用 curl，访问 Tomcat 监听的 8080 端口，确认案例已经正常启动：</p><pre><code>$ curl localhost:8080\ncurl: (56) Recv failure: Connection reset by peer\n</code></pre><p>不过，很不幸，curl 返回了 “Connection reset by peer” 的错误，说明 Tomcat 服务，并不能正常响应客户端请求。</p><p>是不是 Tomcat 启动出问题了呢？我们切换到终端一中，执行 docker logs 命令，查看容器的日志。这里注意，需要加上 -f 参数，表示跟踪容器的最新日志输出：</p><pre><code>$ docker logs -f tomcat\nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /docker-java-home/jre\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n</code></pre><p>从这儿你可以看到，Tomcat 容器只打印了环境变量，还没有应用程序初始化的日志。也就是说，Tomcat 还在启动过程中，这时候去访问它，当然没有响应。</p><p>为了观察 Tomcat 的启动过程，我们在终端一中，继续保留 docker logs -f 命令，并在终端二中执行下面的命令，多次尝试访问 Tomcat：</p><pre><code>$ for ((i=0;i&lt;30;i++)); do curl localhost:8080; sleep 1; done\ncurl: (56) Recv failure: Connection reset by peer\ncurl: (56) Recv failure: Connection reset by peer\n# 这儿会阻塞一会\nHello, wolrd!\ncurl: (52) Empty reply from server\ncurl: (7) Failed to connect to localhost port 8080: Connection refused\ncurl: (7) Failed to connect to localhost port 8080: Connection refused\n</code></pre><p>观察一会儿，可以看到，一段时间后，curl 终于给出了我们想要的结果 “Hello, wolrd!”。但是，随后又出现了 “Empty reply from server” ，和一直持续的 “Connection refused” 错误。换句话说，Tomcat 响应一次请求后，就再也不响应了。</p><p>这是怎么回事呢？我们回到终端一中，观察 Tomcat 的日志，看看能不能找到什么线索。</p><p>从终端一中，你应该可以看到下面的输出：</p><pre><code>18-Feb-2019 12:43:32.719 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]\n18-Feb-2019 12:43:33.725 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished in [1,006] ms\n18-Feb-2019 12:43:33.726 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]\n18-Feb-2019 12:43:34.521 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished in [795] ms\n18-Feb-2019 12:43:34.722 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]\n18-Feb-2019 12:43:35.319 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-nio-8009&quot;]\n18-Feb-2019 12:43:35.821 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 24096 ms\nroot@ubuntu:~#\n</code></pre><p>从内容上可以看到，Tomcat 在启动 24s 后完成初始化，并且正常启动。从日志上来看，没有什么问题。</p><p>不过，细心的你肯定注意到了最后一行，明显是回到了 Linux 的 SHELL 终端中，而没有继续等待 Docker 输出的容器日志。</p><p>输出重新回到 SHELL 终端，通常表示上一个命令已经结束。而我们的上一个命令，是 docker logs -f 命令。那么，它的退出就只有两种可能了，要么是容器退出了，要么就是 dockerd 进程退出了。</p><p>究竟是哪种情况呢？这就需要我们进一步确认了。我们可以在终端一中，执行下面的命令，查看容器的状态：</p><pre><code>$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                            PORTS               NAMES\n0f2b3fcdd257        feisky/tomcat:8     &quot;catalina.sh run&quot;   2 minutes ago       Exited (137) About a minute ago                       tomcat\n</code></pre><p>你会看到，容器处于 Exited 状态，说明是第一种情况，容器已经退出。不过为什么会这样呢？显然，在前面容器的日志里，我们并没有发现线索，那就只能从 Docker 本身入手了。</p><p>我们可以调用 Docker 的 API，查询容器的状态、退出码以及错误信息，然后确定容器退出的原因。这些可以通过 docker inspect 命令来完成，比如，你可以继续执行下面的命令，通过 -f 选项设置只输出容器的状态：</p><pre><code># 显示容器状态，jq用来格式化json输出\n$ docker inspect tomcat -f '{{json .State}}' | jq\n{\n  &quot;Status&quot;: &quot;exited&quot;,\n  &quot;Running&quot;: false,\n  &quot;Paused&quot;: false,\n  &quot;Restarting&quot;: false,\n  &quot;OOMKilled&quot;: true,\n  &quot;Dead&quot;: false,\n  &quot;Pid&quot;: 0,\n  &quot;ExitCode&quot;: 137,\n  &quot;Error&quot;: &quot;&quot;,\n  ...\n}\n</code></pre><p>这次你可以看到，容器已经处于 exited 状态，OOMKilled 是 true，ExitCode 是 137。这其中，OOMKilled 表示容器被 OOM 杀死了。</p><p>我们前面提到过，OOM 表示内存不足时，某些应用会被系统杀死。可是，为什么内存会不足呢？我们的应用分配了 256 MB 的内存，而容器启动时，明明通过 -m 选项，设置了 512 MB 的内存，按说应该是足够的。</p><p>到这里，我估计你应该还记得，当 OOM 发生时，系统会把相关的 OOM 信息，记录到日志中。所以，接下来，我们可以在终端中执行 dmesg 命令，查看系统日志，并定位 OOM 相关的日志：</p><pre><code>$ dmesg\n[193038.106393] java invoked oom-killer: gfp_mask=0x14000c0(GFP_KERNEL), nodemask=(null), order=0, oom_score_adj=0\n[193038.106396] java cpuset=0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53 mems_allowed=0\n[193038.106402] CPU: 0 PID: 27424 Comm: java Tainted: G  OE    4.15.0-1037 #39-Ubuntu\n[193038.106404] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS 090007  06/02/2017\n[193038.106405] Call Trace:\n[193038.106414]  dump_stack+0x63/0x89\n[193038.106419]  dump_header+0x71/0x285\n[193038.106422]  oom_kill_process+0x220/0x440\n[193038.106424]  out_of_memory+0x2d1/0x4f0\n[193038.106429]  mem_cgroup_out_of_memory+0x4b/0x80\n[193038.106432]  mem_cgroup_oom_synchronize+0x2e8/0x320\n[193038.106435]  ? mem_cgroup_css_online+0x40/0x40\n[193038.106437]  pagefault_out_of_memory+0x36/0x7b\n[193038.106443]  mm_fault_error+0x90/0x180\n[193038.106445]  __do_page_fault+0x4a5/0x4d0\n[193038.106448]  do_page_fault+0x2e/0xe0\n[193038.106454]  ? page_fault+0x2f/0x50\n[193038.106456]  page_fault+0x45/0x50\n[193038.106459] RIP: 0033:0x7fa053e5a20d\n[193038.106460] RSP: 002b:00007fa0060159e8 EFLAGS: 00010206\n[193038.106462] RAX: 0000000000000000 RBX: 00007fa04c4b3000 RCX: 0000000009187440\n[193038.106463] RDX: 00000000943aa440 RSI: 0000000000000000 RDI: 000000009b223000\n[193038.106464] RBP: 00007fa006015a60 R08: 0000000002000002 R09: 00007fa053d0a8a1\n[193038.106465] R10: 00007fa04c018b80 R11: 0000000000000206 R12: 0000000100000768\n[193038.106466] R13: 00007fa04c4b3000 R14: 0000000100000768 R15: 0000000010000000\n[193038.106468] Task in /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53 killed as a result of limit of /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53\n[193038.106478] memory: usage 524288kB, limit 524288kB, failcnt 77\n[193038.106480] memory+swap: usage 0kB, limit 9007199254740988kB, failcnt 0\n[193038.106481] kmem: usage 3708kB, limit 9007199254740988kB, failcnt 0\n[193038.106481] Memory cgroup stats for /docker/0f2b3fcdd2578165ea77266cdc7b1ad43e75877b0ac1889ecda30a78cb78bd53: cache:0KB rss:520580KB rss_huge:450560KB shmem:0KB mapped_file:0KB dirty:0KB writeback:0KB inactive_anon:0KB active_anon:520580KB inactive_file:0KB active_file:0KB unevictable:0KB\n[193038.106494] [ pid ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name\n[193038.106571] [27281]     0 27281  1153302   134371  1466368        0             0 java\n[193038.106574] Memory cgroup out of memory: Kill process 27281 (java) score 1027 or sacrifice child\n[193038.148334] Killed process 27281 (java) total-vm:4613208kB, anon-rss:517316kB, file-rss:20168kB, shmem-rss:0kB\n[193039.607503] oom_reaper: reaped process 27281 (java), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB\n</code></pre><p>从 dmesg 的输出，你就可以看到很详细的 OOM 记录了。你应该可以看到下面几个关键点。</p><ul>\n<li>\n<p>第一，被杀死的是一个 java 进程。从内核调用栈上的 mem_cgroup_out_of_memory 可以看出，它是因为超过 cgroup 的内存限制，而被 OOM 杀死的。</p>\n</li>\n<li>\n<p>第二，java 进程是在容器内运行的，而容器内存的使用量和限制都是 512M（524288kB）。目前使用量已经达到了限制，所以会导致 OOM。</p>\n</li>\n<li>\n<p>第三，被杀死的进程，PID 为 27281，虚拟内存为 4.3G（total-vm:4613208kB），匿名内存为 505M（anon-rss:517316kB），页内存为 19M（20168kB）。换句话说，匿名内存是主要的内存占用。而且，匿名内存加上页内存，总共是 524M，已经超过了  512M 的限制。</p>\n</li>\n</ul><p>综合这几点，可以看出，Tomcat 容器的内存主要用在了匿名内存中，而匿名内存，其实就是主动申请分配的堆内存。</p><p>不过，为什么 Tomcat 会申请这么多的堆内存呢？要知道，Tomcat 是基于 Java 开发的，所以应该不难想到，这很可能是 JVM 堆内存配置的问题。</p><p>我们知道，JVM 根据系统的内存总量，来自动管理堆内存，不明确配置的话，堆内存的默认限制是物理内存的四分之一。不过，前面我们已经限制了容器内存为 512 M，java 的堆内存到底是多少呢？</p><p>我们继续在终端中，执行下面的命令，重新启动 tomcat 容器，并调用 java 命令行来查看堆内存大小：</p><pre><code># 重新启动容器\n$ docker rm -f tomcat\n$ docker run --name tomcat --cpus 0.1 -m 512M -p 8080:8080 -itd feisky/tomcat:8\n\n# 查看堆内存，注意单位是字节\n$ docker exec tomcat java -XX:+PrintFlagsFinal -version | grep HeapSize\n    uintx ErgoHeapSizeLimit                         = 0                                   {product}\n    uintx HeapSizePerGCThread                       = 87241520                            {product}\n    uintx InitialHeapSize                          := 132120576                           {product}\n    uintx LargePageHeapSizeThreshold                = 134217728                           {product}\n    uintx MaxHeapSize                              := 2092957696                          {product}\n</code></pre><p>你可以看到，初始堆内存的大小（InitialHeapSize）是 126MB，而最大堆内存则是 1.95GB，这可比容器限制的 512 MB 大多了。</p><p>之所以会这么大，其实是因为，容器内部看不到 Docker 为它设置的内存限制。虽然在启动容器时，我们通过 -m 512M 选项，给容器设置了 512M 的内存限制。但实际上，从容器内部看到的限制，却并不是 512M。</p><p>我们在终端中，继续执行下面的命令：</p><pre><code>$ docker exec tomcat free -m\n              total        used        free      shared  buff/cache   available\nMem:           7977         521        1941           0        5514        7148\nSwap:             0           0           0\n</code></pre><p>果然，容器内部看到的内存，仍是主机内存。</p><p>知道了问题根源，解决方法就很简单了，给 JVM 正确配置内存限制为 512M 就可以了。</p><p>比如，你可以执行下面的命令，通过环境变量 JAVA_OPTS=’-Xmx512m -Xms512m’ ，把JVM 的初始内存和最大内存都设为 512MB：</p><pre><code># 删除问题容器\n$ docker rm -f tomcat\n# 运行新的容器\n$ docker run --name tomcat --cpus 0.1 -m 512M -e JAVA_OPTS='-Xmx512m -Xms512m' -p 8080:8080 -itd feisky/tomcat:8\n</code></pre><p>接着，再切换到终端二中，重新在循环中执行 curl 命令，查看 Tomcat 的响应：</p><pre><code>$ for ((i=0;i&lt;30;i++)); do curl localhost:8080; sleep 1; done\ncurl: (56) Recv failure: Connection reset by peer\ncurl: (56) Recv failure: Connection reset by peer\nHello, wolrd!\n\nHello, wolrd!\n\nHello, wolrd!\n</code></pre><p>可以看到，刚开始时，显示的还是 “Connection reset by peer” 错误。不过，稍等一会儿后，就是连续的 “Hello, wolrd!” 输出了。这说明， Tomcat 已经正常启动。</p><p>这时，我们切换回终端一，执行 docker logs 命令，查看 Tomcat 容器的日志：</p><pre><code>$ docker logs -f tomcat\n...\n18-Feb-2019 12:52:00.823 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]\n18-Feb-2019 12:52:01.422 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished in [598] ms\n18-Feb-2019 12:52:01.920 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]\n18-Feb-2019 12:52:02.323 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-nio-8009&quot;]\n18-Feb-2019 12:52:02.523 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 22798 ms\n\n</code></pre><p>这次，Tomcat 也正常启动了。不过，最后一行的启动时间，似乎比较刺眼。启动过程，居然需要 22 秒，这也太慢了吧。</p><p>由于这个时间是花在容器启动上的，要排查这个问题，我们就要重启容器，并借助性能分析工具来分析容器进程。至于工具的选用，回顾一下我们前面的案例，我觉得可以先用 top 看看。</p><p>我们切换到终端二中，运行 top 命令；然后再切换到终端一，执行下面的命令，重启容器：</p><pre><code># 删除旧容器\n$ docker rm -f tomcat\n# 运行新容器\n$ docker run --name tomcat --cpus 0.1 -m 512M -e JAVA_OPTS='-Xmx512m -Xms512m' -p 8080:8080 -itd feisky/tomcat:8\n</code></pre><p>接着，再切换到终端二，观察 top 的输出：</p><pre><code>$ top\ntop - 12:57:18 up 2 days,  5:50,  2 users,  load average: 0.00, 0.02, 0.00\nTasks: 131 total,   1 running,  74 sleeping,   0 stopped,   0 zombie\n%Cpu0  :  3.0 us,  0.3 sy,  0.0 ni, 96.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\n%Cpu1  :  5.7 us,  0.3 sy,  0.0 ni, 94.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  8169304 total,  2465984 free,   500812 used,  5202508 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  7353652 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n29457 root      20   0 2791736  73704  19164 S  10.0  0.9   0:01.61 java                         27349 root      20   0 1121372  96760  39340 S   0.3  1.2   4:20.82 dockerd\n27376 root      20   0 1031760  43768  21680 S   0.3  0.5   2:44.47 docker-containe              29430 root      20   0    7376   3604   3128 S   0.3  0.0   0:00.01 docker-containe\n    1 root      20   0   78132   9332   6744 S   0.0  0.1   0:16.12 systemd\n</code></pre><p>从 top 的输出，我们可以发现，</p><ul>\n<li>\n<p>从系统整体来看，两个 CPU 的使用率分别是 3% 和 5.7% ，都不算高，大部分还是空闲的；可用内存还有 7GB（7353652 avail Mem），也非常充足。</p>\n</li>\n<li>\n<p>具体到进程上，java 进程的 CPU 使用率为 10%，内存使用 0.9%，其他进程就都很低了。</p>\n</li>\n</ul><p>这些指标都不算高，看起来都没啥问题。不过，事实究竟如何呢？我们还得继续找下去。由于 java 进程的 CPU 使用率最高，所以要把它当成重点，继续分析其性能情况。</p><p>说到进程的性能分析工具，你一定也想起了 pidstat。接下来，我们就用 pidstat  再来分析一下。我们回到终端一中，执行 pidstat 命令：</p><pre><code># -t表示显示线程，-p指定进程号\n$ pidstat -t -p 29457 1\n12:59:59      UID      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command\n13:00:00        0     29457         -    0.00    0.00    0.00    0.00    0.00     0  java\n13:00:00        0         -     29457    0.00    0.00    0.00    0.00    0.00     0  |__java\n13:00:00        0         -     29458    0.00    0.00    0.00    0.00    0.00     1  |__java\n...\n13:00:00        0         -     29491    0.00    0.00    0.00    0.00    0.00     0  |__java\n</code></pre><p>结果中，各种CPU使用率全是0，看起来不对呀。再想想，我们有没有漏掉什么线索呢？对了，这时候容器启动已经结束了，在没有客户端请求的情况下，Tomcat 本身啥也不用做，CPU 使用率当然是 0。</p><p>为了分析启动过程中的问题，我们需要再次重启容器。继续在终端一，按下 Ctrl+C 停止 pidstat 命令；然后执行下面的命令，重启容器。成功重启后，拿到新的 PID，再重新运行 pidstat 命令：</p><pre><code># 删除旧容器\n$ docker rm -f tomcat\n# 运行新容器\n$ docker run --name tomcat --cpus 0.1 -m 512M -e JAVA_OPTS='-Xmx512m -Xms512m' -p 8080:8080 -itd feisky/tomcat:8\n# 查询新容器中进程的Pid\n$ PID=$(docker inspect tomcat -f '{{.State.Pid}}')\n# 执行 pidstat\n$ pidstat -t -p $PID 1\n12:59:28      UID      TGID       TID    %usr %system  %guest   %wait    %CPU   CPU  Command\n12:59:29        0     29850         -   10.00    0.00    0.00    0.00   10.00     0  java\n12:59:29        0         -     29850    0.00    0.00    0.00    0.00    0.00     0  |__java\n12:59:29        0         -     29897    5.00    1.00    0.00   86.00    6.00     1  |__java\n...\n12:59:29        0         -     29905    3.00    0.00    0.00   97.00    3.00     0  |__java\n12:59:29        0         -     29906    2.00    0.00    0.00   49.00    2.00     1  |__java\n12:59:29        0         -     29908    0.00    0.00    0.00   45.00    0.00     0  |__java\n</code></pre><p>仔细观察这次的输出，你会发现，虽然 CPU 使用率（%CPU）很低，但等待运行的使用率（%wait）却非常高，最高甚至已经达到了 97%。这说明，这些线程大部分时间都在等待调度，而不是真正的运行。</p><blockquote>\n<p>注：如果你看不到 %wait 指标，请先升级 sysstat 后再试试。</p>\n</blockquote><p>为什么CPU 使用率这么低，线程的大部分时间还要等待 CPU 呢？由于这个现象因 Docker 而起，自然的，你应该想到，这可能是因为 Docker 为容器设置了限制。</p><p>再回顾一下，案例开始时容器的启动命令。我们用 --cpus 0.1 ，为容器设置了 0.1 个 CPU 的限制，也就是 10% 的 CPU。这里也就可以解释，为什么 java 进程只有 10% 的 CPU 使用率，也会大部分时间都在等待了。</p><p>找出原因，最后的优化也就简单了，把 CPU 限制增大就可以了。比如，你可以执行下面的命令，将 CPU 限制增大到 1 ；然后再重启，并观察启动日志：</p><pre><code># 删除旧容器\n$ docker rm -f tomcat\n# 运行新容器\n$ docker run --name tomcat --cpus 1 -m 512M -e JAVA_OPTS='-Xmx512m -Xms512m' -p 8080:8080 -itd feisky/tomcat:8\n# 查看容器日志\n$ docker logs -f tomcat\n...\n18-Feb-2019 12:54:02.139 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 2001 ms\n</code></pre><p>现在可以看到，Tomcat 的启动过程，只需要 2 秒就完成了，果然比前面的 22 秒快多了。</p><p>虽然我们通过增大 CPU 的限制，解决了这个问题。不过再碰到类似问题，你可能会觉得这种方法太麻烦了。因为要设置容器的资源限制，还需要我们预先评估应用程序的性能。显然还有更简单的方法，比如说直接去掉限制，让容器跑就是了。</p><p>不过，这种简单方法，却很可能带来更严重的问题。没有资源限制，就意味着容器可以占用整个系统的资源。这样，一旦任何应用程序发生异常，都有可能拖垮整台机器。</p><p>实际上，这也是在各大容器平台上最常见的一个问题。一开始图省事不设限，但当容器数量增长上来的时候，就会经常出现各种异常问题。最终查下来，可能就是因为某个应用资源使用过高，导致整台机器短期内无法响应。只有设置了资源限制，才能确保杜绝类似问题。</p><h2>小结</h2><p>今天，我带你学习了，如何分析容器化后应用程序性能下降的问题。</p><p>如果你在 Docker 容器中运行 Java 应用，一定要确保，在设置容器资源限制的同时，配置好 JVM 的资源选项（比如堆内存等）。当然，如果你可以升级 Java 版本，那么升级到 Java 10 ，就可以自动解决类似问题了。</p><p>当碰到容器化的应用程序性能时，你依然可以使用，我们前面讲过的各种方法来分析和定位。只不过要记得，容器化后的性能分析，跟前面内容稍微有些区别，比如下面这几点。</p><ul>\n<li>\n<p>容器本身通过 cgroups 进行资源隔离，所以，在分析时要考虑 cgroups 对应用程序的影响。</p>\n</li>\n<li>\n<p>容器的文件系统、网络协议栈等跟主机隔离。虽然在容器外面，我们也可以分析容器的行为，不过有时候，进入容器的命名空间内部，可能更为方便。</p>\n</li>\n<li>\n<p>容器的运行可能还会依赖于其他组件，比如各种网络插件（比如 CNI）、存储插件（比如 CSI）、设备插件（比如 GPU）等，让容器的性能分析更加复杂。如果你需要分析容器性能，别忘了考虑它们对性能的影响。</p>\n</li>\n</ul><h2>思考</h2><p>最后，我想邀请你一起来聊聊，你碰到过的容器性能问题。你是怎么分析它们的？又是怎么解决根源问题的？你可以结合我的讲解，总结自己的思路。</p><p>欢迎在留言区和我讨论，也欢迎把这篇文章分享给你的同事、朋友。我们一起在实战中演练，在交流中进步。</p><p></p>","neighbors":{"left":{"article_title":"45 | 答疑（五）：网络收发过程中，缓冲区位置在哪里？","id":84529},"right":{"article_title":"47 | 案例篇：服务器总是时不时丢包，我该怎么办？（上）","id":85201}},"comments":[{"had_liked":false,"id":74615,"user_name":"Adam","can_delete":false,"product_type":"c1","uid":1305633,"ip_address":"","ucode":"338BA720880E4F","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/21/b0fe1bfd.jpg","comment_is_top":false,"comment_ctime":1552267796,"is_pvip":false,"replies":[{"id":"27335","content":"嗯嗯，正解！","user_name":"作者回复","comment_id":74615,"uid":"1001282","ip_address":"","utype":1,"ctime":1552349663,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"100336515604","product_id":100020901,"comment_content":"这个问题应该是&#47;proc 文件系统并不知道用户通过 Cgroups 给这个容器做了限制导致的。<br>","like_count":24,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442620,"discussion_content":"嗯嗯，正解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552349663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211178,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/2a/7d8b5943.jpg","nickname":"LH","note":"","ucode":"819B9B2409E834","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291976,"discussion_content":"可以通过配置rootfs让容器内看到的资源和cgroup限制的一样吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595037969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135329,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1569128433,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"40223834097","product_id":100020901,"comment_content":"有个疑问，增加的 JVM 堆内存限制也是 512M 和 容器内存限制 512M 的一样，那还有非堆内存和其他的运行内存呢，这个可能还会有 OOM 吧？","like_count":10,"discussions":[{"author":{"id":1651384,"avatar":"https://static001.geekbang.org/account/avatar/00/19/32/b8/6e58cd47.jpg","nickname":"风云决2014","note":"","ucode":"0F406A76EBF30C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300051,"discussion_content":"有可能还会有 OOM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597918902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044266,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ef/2a/e9c5c163.jpg","nickname":"小江哥哥","note":"","ucode":"E5B3725FC9E366","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228775,"discussion_content":"同问 那么对容器的资源限制和tomcat堆内存的限制遵循什么比例好呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586575994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1651384,"avatar":"https://static001.geekbang.org/account/avatar/00/19/32/b8/6e58cd47.jpg","nickname":"风云决2014","note":"","ucode":"0F406A76EBF30C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1044266,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ef/2a/e9c5c163.jpg","nickname":"小江哥哥","note":"","ucode":"E5B3725FC9E366","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300053,"discussion_content":"内存按给容器的最大比例设置 ，比如-XX:InitialRAMPercentage=60.0 -XX:MaxRAMPercentage=80.0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597919165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228775,"ip_address":""},"score":300053,"extra":""},{"author":{"id":1200299,"avatar":"https://static001.geekbang.org/account/avatar/00/12/50/ab/6584e520.jpg","nickname":"陈顺吉","note":"","ucode":"315732AEA35CD1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1044266,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ef/2a/e9c5c163.jpg","nickname":"小江哥哥","note":"","ucode":"E5B3725FC9E366","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353102,"discussion_content":"这个要看你的应用类型，比如像 es 这种狂吃操作系统 buffer 的（node 节点），就需要给它更宽松的限制，比如堆 4G，那么容器的限制就应该是 8G，另外的 4G 就是堆外的；如果你的应用只是使用堆内存，那么 5G 限制就可以了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1615005480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228775,"ip_address":""},"score":353102,"extra":""}]}]},{"had_liked":false,"id":101960,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1560074368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034910848","product_id":100020901,"comment_content":"打卡，学习linux性能调优，顺带学习docker的基础知识，这案例太赞了","like_count":6},{"had_liked":false,"id":75439,"user_name":"腾达","can_delete":false,"product_type":"c1","uid":1079876,"ip_address":"","ucode":"72F9CFBA44FDEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL9hlAIKQ1sGDu16oWLOHyCSicr18XibygQSMLMjuDvKk73deDlH9aMphFsj41WYJh121aniaqBLiaMNg/132","comment_is_top":false,"comment_ctime":1552398085,"is_pvip":false,"replies":[{"id":"28038","content":"Java的问题请参考https:&#47;&#47;github.com&#47;jvm-profiling-tools&#47;perf-map-agent","user_name":"作者回复","comment_id":75439,"uid":"1001282","ip_address":"","utype":1,"ctime":1552748710,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"23027234565","product_id":100020901,"comment_content":"这里看java进程cpu的时候，使用了之前学到的perf record方法，但看docker内部函数名称的时候，还是遇到了问题，我的步骤如下：<br>$ mkdir dockermap<br>$ PID=$(docker inspect --format {{.State.Pid}} tomcat)<br>$ sudo bindfs &#47;proc&#47;$PID&#47;root dockermap<br>$ sudo perf record -g -p $PID<br>$ sudo perf report --symfs dockermap<br><br>-   99.95%     0.00%  java     libjvm.so           [.] 0x00000000008bf292                                                             <br>   - 0x8bf292                                                                                                                         <br>      - 67.44% 0xa79ff1                                                                                                               <br>           0xa79af6                                                                                                                   <br>           0xa78677                                                                                                                   <br>           0xa7afc7                                                                                                                   <br>           0xa75d62                                                                                                                   <br>         + 0x8e6853 ","like_count":5,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442894,"discussion_content":"Java的问题请参考https://github.com/jvm-profiling-tools/perf-map-agent","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552748710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75239,"user_name":"Tony","can_delete":false,"product_type":"c1","uid":1447315,"ip_address":"","ucode":"5F14505DFCDE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/93/cc3a1320.jpg","comment_is_top":false,"comment_ctime":1552369164,"is_pvip":false,"replies":[{"id":"27484","content":"cold start话题太大了，涉及的不止是单机内的问题。你如果有具体的问题，可以分享出来，大家一起讨论","user_name":"作者回复","comment_id":75239,"uid":"1001282","ip_address":"","utype":1,"ctime":1552399567,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"14437271052","product_id":100020901,"comment_content":"这个例子对稍微有点docker和jvm的基础的人还是太简单了。应该上点serverless冷启动的分析。cold start是FaaS一个很大的问题，不知道你怎么用前面的知识分析一下？谢谢","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442833,"discussion_content":"cold start话题太大了，涉及的不止是单机内的问题。你如果有具体的问题，可以分享出来，大家一起讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552399567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152990,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1574134698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164069290","product_id":100020901,"comment_content":"vm 开启了swap 导致 docker 容器的内存使用超过512m后还继续执行，没有被oom-kill。<br>","like_count":2},{"had_liked":false,"id":74950,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1552320296,"is_pvip":false,"replies":[{"id":"27341","content":"嗯嗯 是这样的","user_name":"作者回复","comment_id":74950,"uid":"1001282","ip_address":"","utype":1,"ctime":1552350148,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10142254888","product_id":100020901,"comment_content":"和虚拟机内存设置也有关系，老师的是8G 30%就很大，我的2G 所以不大，也不会引起OOM，当我调成8G 的时候就出现了和老师一样的现象了OOM","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442753,"discussion_content":"嗯嗯 是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552350148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74718,"user_name":"且听风吟","can_delete":false,"product_type":"c1","uid":1024045,"ip_address":"","ucode":"BB49580519D117","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/2d/2fee2d83.jpg","comment_is_top":false,"comment_ctime":1552286331,"is_pvip":false,"replies":[{"id":"27339","content":"主机内存多大？重启后可以看看系统日志，一般会有上次为啥死机的线索","user_name":"作者回复","comment_id":74718,"uid":"1001282","ip_address":"","utype":1,"ctime":1552349991,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10142220923","product_id":100020901,"comment_content":"启动容器几分钟后，直接把宿主机跑死了，没法继续进行，这是怎么回事呢？","like_count":3,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442660,"discussion_content":"主机内存多大？重启后可以看看系统日志，一般会有上次为啥死机的线索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552349991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74714,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1552285408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5847252704","product_id":100020901,"comment_content":"[D46打卡]<br>看来真是有必要对容器做资源限制.<br>刚开始分配的资源可以不要计算得那么精准,只要别把机器拖垮即可.<br><br>实战篇还是很有意思,根据症状去找各种程序及系统日志和各项配置参数.<br><br>如果不做特殊处理,容器内部看到的系统cpu&#47;memory配置确实都是主机的.程序默认根据这个来做策略调整确实会受到误导.<br><br>目前工作中还没使用容器,暂时还没法在容器中实战.😁","like_count":1},{"had_liked":false,"id":74584,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1552263270,"is_pvip":false,"replies":[{"id":"27336","content":"👍 谢谢分享","user_name":"作者回复","comment_id":74584,"uid":"1001282","ip_address":"","utype":1,"ctime":1552349695,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"5847230566","product_id":100020901,"comment_content":"打卡day49<br>前两天在我们线下环境一台docker宿主机上，一直无法create容器，后来看日志，发现有两个可疑之处:<br>第一:docker日志显示socket文件损坏，但是当时运行其他docker管理命令能正常返回结果<br>第二:宿主机上有个kworker&#47;u80进程cpu利用率一直100%，最终是通过重启宿主机解决的～","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442605,"discussion_content":"👍 谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552349695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1720144,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3f/50/bf9e9e92.jpg","nickname":"马宏伟","note":"","ucode":"D72048FB04D550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41217,"discussion_content":"被挖坑了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572364618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306825,"user_name":"Li~","can_delete":false,"product_type":"c1","uid":1870306,"ip_address":"","ucode":"5FBA30D0D7DA31","user_header":"https://static001.geekbang.org/account/avatar/00/1c/89/e2/4d314444.jpg","comment_is_top":false,"comment_ctime":1628735409,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628735409","product_id":100020901,"comment_content":"请教老师，通过环境变量 JAVA_OPTS=’-Xmx512m -Xms512m’ ，把 JVM 的初始内存和最大内存都设为 512MB后，为什么执行docker exec tomcat free -m还是看到的主机内存，不是512MB 呢？","like_count":1,"discussions":[{"author":{"id":1453001,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqT9A3iaTfERufLictBib6nvmVvfFlEyZRSHiaGfz4yNmBK0hibZUiciahMOJdE8QZV65GxDJ1DlXWkePllw/132","nickname":"xiaotuanyu","note":"","ucode":"CE254B914AE921","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537727,"discussion_content":"你通过参数限制的是jvm的内存限制，跟你看主机的内存就是两码事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639150141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273854,"user_name":"大大林","can_delete":false,"product_type":"c1","uid":2356257,"ip_address":"","ucode":"AC0F6231884830","user_header":"https://static001.geekbang.org/account/avatar/00/23/f4/21/b6c0d237.jpg","comment_is_top":false,"comment_ctime":1610697091,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610697091","product_id":100020901,"comment_content":"我这不行啊 按照老师的镜像直接启动 没oom<br>CONTAINER ID        NAME                CPU %               MEM USAGE &#47; LIMIT   MEM %               NET I&#47;O             BLOCK I&#47;O           PIDS<br>9438a69a9630        tomcat              0.63%               343.7MiB &#47; 512MiB   67.14%              3.96kB &#47; 6.53kB     0B &#47; 0B  ","like_count":0,"discussions":[{"author":{"id":1527882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erGficovWwKUXiahEBR0VgOs1xWjq3HOBSVWmyb6TonFyzTwib7ic9icbFebO9eRWy5tvleemKjRzXaNqg/132","nickname":"Guofire","note":"","ucode":"C8609EB8EE24E5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375787,"discussion_content":"需要关闭swap的，否则不会OOM的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621849833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260189,"user_name":"Geek_cef97c","can_delete":false,"product_type":"c1","uid":2114292,"ip_address":"","ucode":"2AC8F17EF1BE88","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WqfmrOyWdB3icW3WOfZqUGaepQujRsRSNXMnRaiczK0icO4qgCWqpVIr1NPmF7icVP6Qnt4JW8HYwhInlrIy8p1fIg/132","comment_is_top":false,"comment_ctime":1604936479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604936479","product_id":100020901,"comment_content":"你好，我们做docker的性能验证测试，通过unixbench跑数据，发现默认的seccomp设置对性能有较大影响，通过设置--security-opt seccomp:unconfined参数能和宿主机性能相当，而默认seccomp大约有16%左右损耗。<br>这种情况的性能损耗怎么定位呢？","like_count":0},{"had_liked":false,"id":246240,"user_name":"Geek_8c2731","can_delete":false,"product_type":"c1","uid":1928194,"ip_address":"","ucode":"A87F938209D65A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkGGBK46EQpqE6zWCncMs14Jw95s191Y6pk3x3gQpNrvSc2YWoFEgUxmJWicibGp7XsFFKaZxuTSnA/132","comment_is_top":false,"comment_ctime":1599217792,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599217792","product_id":100020901,"comment_content":"在这章我就有东西可讲了，我研究docker至今，开始设置的资源限制太小，导致nodejs应用容器OOM，生成大量文件，占满了整个硬盘，导致其他系统应用不可用。再者就是Java异步行为过程不做限制会消耗大量内存，做完限制后就算OOM也只是它自身","like_count":1},{"had_liked":false,"id":225285,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1591705358,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1591705358","product_id":100020901,"comment_content":"老师，请问 PID=$(docker inspect tomcat -f &#39;{{.State.Pid}}&#39;)  这个pid  是怎么取出来的，前面的课程里好像也有这个吧？不熟悉shell","like_count":0,"discussions":[{"author":{"id":1964381,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WCcouXsOEyIJjAHDOdiaQLGqaNJibKiazAj7FopZJDdF6rJAR43TbqvVr6f1jn4mLTv6iblibhCGx7JAf1363ibcuEicw/132","nickname":"Geek_d5e66a","note":"","ucode":"E00F024E9D1905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310356,"discussion_content":"你可以試著查看 `docker inspect tomcat` 的結果，然後看 `docker inspect` 的參數，應該就能理解了。`$()` 代表取得該 shell command 的輸出結果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601795005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1527882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erGficovWwKUXiahEBR0VgOs1xWjq3HOBSVWmyb6TonFyzTwib7ic9icbFebO9eRWy5tvleemKjRzXaNqg/132","nickname":"Guofire","note":"","ucode":"C8609EB8EE24E5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1964381,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WCcouXsOEyIJjAHDOdiaQLGqaNJibKiazAj7FopZJDdF6rJAR43TbqvVr6f1jn4mLTv6iblibhCGx7JAf1363ibcuEicw/132","nickname":"Geek_d5e66a","note":"","ucode":"E00F024E9D1905","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375788,"discussion_content":"``和 $() 这是两种用法，这两个是等效的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621849941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310356,"ip_address":""},"score":375788,"extra":""}]}]},{"had_liked":false,"id":214598,"user_name":"杉松壁","can_delete":false,"product_type":"c1","uid":1080578,"ip_address":"","ucode":"ED904CE27CD3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/02/4862f849.jpg","comment_is_top":false,"comment_ctime":1588770710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588770710","product_id":100020901,"comment_content":"有2个问题：<br>1. 容器和jvm都设置了内存，但是不知道为什么容器有的时候还是会OOM<br>2. 既要限制容器的资源，又不好设置JVM资源的时候，有更方便的方法吗","like_count":0},{"had_liked":false,"id":211697,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1587996323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587996323","product_id":100020901,"comment_content":"之前遇到过k8s里面跑的容器，cgroup限制的内存过小，开发人员错写为1MB，restartPolicy又设置成了always, 结果这个container一直被oom kill，dmesg全是oom信息，cenos7上还造成了memory allocate dead lock 物理机直接挂了。。。","like_count":0},{"had_liked":false,"id":87131,"user_name":"z.l","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","comment_is_top":false,"comment_ctime":1555515148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555515148","product_id":100020901,"comment_content":"初学docker时解决的第一个问题就是没设置jvm的-Xmx导致oom的问题，前面的同事想当然的以为限制了容器内存也可以传递给jvm。","like_count":0},{"had_liked":false,"id":85089,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1554976306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554976306","product_id":100020901,"comment_content":"DAY46，打卡<br>","like_count":0},{"had_liked":false,"id":80976,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1553767641,"is_pvip":false,"replies":[{"id":"29588","content":"可以的","user_name":"作者回复","comment_id":80976,"uid":"1001282","ip_address":"","utype":1,"ctime":1554003541,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"1553767641","product_id":100020901,"comment_content":"测试应用软件的性能（比如用LoadRunner 或JMter）可以在容器中进行吗？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445034,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554003541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75435,"user_name":"腾达","can_delete":false,"product_type":"c1","uid":1079876,"ip_address":"","ucode":"72F9CFBA44FDEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL9hlAIKQ1sGDu16oWLOHyCSicr18XibygQSMLMjuDvKk73deDlH9aMphFsj41WYJh121aniaqBLiaMNg/132","comment_is_top":false,"comment_ctime":1552397350,"is_pvip":false,"replies":[{"id":"28037","content":"执行 docker exec tomcat java -XX:+PrintFlagsFinal -version | grep HeapSize 确认一下容器中java的堆内存？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1552748551,"ip_address":"","comment_id":75435,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1552397350","product_id":100020901,"comment_content":"我的tomcat为什么不能实现oom？dmesg显示没有oom，进程也没有被杀死。我看有其他网友留言说要虚拟机内存设为8G，我的是设置为8G了。","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442892,"discussion_content":"执行 docker exec tomcat java -XX:+PrintFlagsFinal -version | grep HeapSize 确认一下容器中java的堆内存？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552748551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617171,"avatar":"","nickname":"也曾少年","note":"","ucode":"62A8C26B689198","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334397,"discussion_content":"你是不是启用了swap分区 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607838218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74816,"user_name":"ttxser","can_delete":false,"product_type":"c1","uid":1022694,"ip_address":"","ucode":"47C3FCB59F8027","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/e6/e8439f9a.jpg","comment_is_top":false,"comment_ctime":1552300652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552300652","product_id":100020901,"comment_content":"值了","like_count":0},{"had_liked":false,"id":74798,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1552299249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552299249","product_id":100020901,"comment_content":"很受启发，最近也在钻研docker 和k8s","like_count":0},{"had_liked":false,"id":74779,"user_name":"rock04","can_delete":false,"product_type":"c1","uid":1316129,"ip_address":"","ucode":"7E104151852AB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XC10ibnwF0jtwgksFoSuUCMtgfK0Ndk5Wib3Xyr5Yyz9xiaCrKibNicPksVmicpZEatWgPPLfMXz3jCGMMiclHHQlku4Q/132","comment_is_top":false,"comment_ctime":1552296755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552296755","product_id":100020901,"comment_content":"老师，今天工作做遇到一个平均负载的问题。8C的虚拟机。只有一个java进程，但是平均负载很高超过8.甚至达到12。查看CPU IO都很低  这个应该怎么排查","like_count":0}]}