{"id":129097,"title":"37 | 键值存储与数据库","content":"<p>你好，我是七牛云许式伟。</p><p>上一讲我们介绍了存储中间件的由来。今天我们就聊一下应用最为广泛的存储中间件：数据库。</p><h2>数据库的种类</h2><p>从使用界面（接口）的角度来说，通常我们接触的数据库有以下这些。</p><p>使用最为广泛的，是关系型数据库（Relational Database），以 MySQL、Oracle、SQLSever 为代表。</p><p>这类数据库把数据每个条目（row）的数据分成多个项目（column），如果某个项目比较复杂，从数据结构角度来说是一个结构体，那么就搞一个新的表（table）来存储它，在主表只存储一个 ID 来引用。</p><p>这类数据库的特点是强 schema，每个项目（column）有明确的数据类型。从业务状态的角度看，可以把一个表（table）理解为一个结构体，当遇到结构体里面套结构体，那么就定义一个子表。</p><p>第二类是文档型数据库（Document Database），以 MongoDB 为代表。这类数据库把数据每个条目（row）称为文档（document），每个文档用 JSON或其他文档描述格式表示。</p><p>当前文档型数据库大部分是无 schema 的，也就是在插入文档时并不对文档的数据格式的有效性进行检查。</p><p>这有好有坏。好处是使用门槛低，升级数据格式方便。不好之处在于，质量保障体系弱化，数据可能被弄脏而不自知。可以预见的是，未来也会诞生强 schema 的文档型数据库。</p><!-- [[[read_end]]] --><p>第三类是键值存储（KV Storage），以 Cassandra 为代表。</p><p>键值存储从使用的角度来说，可以认为是数据库的特例。数据库往往是允许设定多个索引字段的，而键值存储明确只有唯一索引。</p><p>从实现角度来说，键值存储是数据库的基础。每一组数据库的索引，往往背后就是一组键值存储。</p><h2>事务</h2><p>无论是何种数据库，都面临一个重大选择：是否支持事务。这是一个艰难选择。从需求角度来说，事务功能非常强大，没道理不去支持。从实现角度来说，事务支持带来极大的负担，尤其是在分布式数据库的场景。</p><p>什么是事务？简单来说，事务就是把一系列数据库操作变成原子操作的能力。展开来说，事务的特性我们往往简称为 ACID，详细如下。</p><ul>\n<li>原子性（Atomicity）：在整个事务中的所有操作，要么全部完成，要么全部不做，没有中间状态。对于事务在执行中发生错误，所有的操作都会被回滚，整个事务就像从没被执行过一样。</li>\n<li>一致性（Consistency）：事务的执行必须保证系统的一致性。这一点拿转账为例最容易理解。假设 A 有 500 元，B 有 300 元，如果在一个事务里 A 成功转给 B 50元，那么不管并行发生了其他什么事，A 账户一定得是 450 元，B 账户一定得是 350 元。</li>\n<li>隔离性（Isolation）：事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。</li>\n<li>持久性（Durability）：一旦事务完成了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。</li>\n</ul><p>如果我们忽略性能要求，事务是很好实现的，只需要用一把能够 Lock/Unlock 整个数据库的大锁就够了。</p><p>但这显然不现实，一把大锁下来，整个数据库就废了。从 IOPS（IO 吞吐能力）角度来说，为什么分布式数据库很讨厌事务是很容易理解的：如果没有事务，一次数据库操作很容易根据数据的分区特征快速将操作落到某个分区实例，剩下来的事情就纯粹是一个单机数据库的操作了。</p><p>一种常见的事务实现方式是乐观锁。</p><p>什么是乐观锁？</p><p>常规的锁是先互斥，再修改数据。不管是不是发生了冲突，我们都会先做互斥。</p><p>但乐观锁不同，它是先计算出所有修改的数据，然后最后一步统一提交修改。提交时会进行冲突检查，如果没有冲突，也就是说，在我之前没有人提交过新版本，或者虽然有人提交过新版本，但是修改的数据和我所依赖的数据并不相关，那么提交会成功。否则就是发生了冲突，会放弃本次修改。</p><p>这意味着，每个数据有可能有多个值。如下：</p><ul>\n<li>KEY<sub>i</sub> -&gt; [(VER<sub>0</sub>, VAL<sub>0</sub>), (VER<sub>1</sub>, VAL<sub>1</sub>), ...]</li>\n</ul><p>其中，VER<sub>0</sub> 对应当前已经提交的值 VAL<sub>0</sub>，VER<sub>1</sub> 对应事务<sub>1</sub> 中修改后的值 VAL<sub>1</sub>，以此类推。</p><p>除了修改后的值外，每个事务还需要记录自己读过哪些数据。不幸的是，它并不是记录读过的 KEY 列表那么简单，而是要记录所有的读条件。</p><p>例如，对于 SELECT name, age, address WHERE age<code>&gt;</code>17 这样一个查询，我们不是要记录读过哪些 name、age、address，而是认为我们读过所有 age<code>&gt;</code>17 的条目（row）。</p><p>在事务提交的时候，锁住整个数据库（前面修改过程事务间不冲突，所以不需要锁数据库），检查所有记录的读条件，如果这些读条件对应的条目（row）的已提交版本都<code>&lt;=</code>基版本（VER<sub>0</sub>），那么说明不冲突，于是提交该事务所有的修改并释放锁。</p><p>如果事务提交的时候发现和其他已提交事务冲突，则放弃该事务，对所有修改进行回滚（其实是删除该事务产生的版本修改记录）。</p><p>到这里我们就可以理解为什么要用乐观锁了：至少它让锁数据库的粒度降到最低，判断冲突的逻辑也都是可预期的行为，这就避免了出现死锁的可能。</p><p>我们很容易可以推理得知，在所有并行执行的事务中，必然有一个事务的提交会成功。这样就避免了饥饿（永远都没人可以成功）。</p><h2>主从结构</h2><p>一旦我们考虑数据库的业务可用性和数据持久性，我们就需要考虑多副本存储数据。可用性（Availability）关注的是业务是否正常工作，而持久性（Durability）关注的是数据是否会被异常丢失。</p><p>当我们数据存在多个副本时，就有数据一致性的问题。因为不同副本的数据可能值不一样，我们到底应该听谁的。</p><p>我们的服务同时存在很多并发的请求，这就可能存在客户端 A 希望值是 VAL<sub>a</sub> ，客户端 B 希望值是 VAL<sub>b</sub> 的情况。</p><p>解决这个问题的方法之一是采用主从（Master-Slave）结构。主从结构采用的是一主多从模式，所有写操作都发往主（Master），所有从（Slave）都从主这边同步数据修改的操作。</p><p>这样，从（Slave）的数据版本只可能因为同步还没有完成，导致版本会比较旧，而不会出现比主（Master）还新的情况。</p><p>从（Slave）可以帮主（Master）分担一定的读压力。但是不是所有的读操作都可以被分担。大部分场景的读操作必须要读到最新的数据，否则就可能会出现逻辑错乱。只有那些纯粹用于界面呈现用途，而不是用于逻辑计算的场景，非敏感场景（比如财务场景是敏感场景）下能够接受读的旧版本数据，可以从从节点读。</p><p>从（Slave）最重要的是和主（Master）形成了互备关系。在主挂掉的时候，某个从节点可以替代成为新的主节点。这会发生一次选举行为，系统中超过一半的节点需要同意某个节点成为主，那么选举就会通过。</p><p>考虑选举的话，意味着集群的节点数为奇数比较好。比如，假设集群有 2 个节点，只有一主一从，那么在主挂掉后，因为只剩下一个节点参与选举，没有超过半数，选举不出新的主节点。</p><p>选择谁成为新的主是有讲究的，因为从的数据有可能不是最新的。一旦我们选择没有最新数据的从作为新的主节点，就意味着版本回退，也就意味着发生了数据丢失。</p><p>这是不能接受的事情。为了避免版本回退，写操作应该确保至少有一个从节点收到了最新的数据。这样在主挂掉后才可以确保能够选到一个拥有最新数据的节点成为新的主节点。</p><h2>分布式</h2><p>多副本让数据库的可用性和持久性有了保障，但是仍然有这样一些问题需要解决：</p><ul>\n<li>数据规模大到一定程度后，单个物理节点存放不了那么大的数据量；</li>\n<li>主承受的读写压力太大，单台主节点承受不了这样高的 IOPS（吞吐能力）。</li>\n</ul><p>从目前存储技术的发展看，单台设备的存储量已经可以非常高，所以上面的第二种情况也会很常见。</p><p>怎么解决？</p><p>分布式。简单说，就是把数据分片存储到多台设备上的分片服务器一起构成一个单副本的数据库。分片的方式常见的有两种：</p><ul>\n<li>哈希分片（Hash based sharding）；</li>\n<li>范围分片（Range based sharding）。</li>\n</ul><p>无论哪个分片方式，都会面临因为扩容缩容导致的重新分片过程。重新分片意味着需要做数据的搬迁。</p><p>数据迁移阶段对数据访问的持续有不低的挑战，因为这时候对正在迁移的分片来说，有一部分数据在源节点，一部分数据在目标节点。</p><p>在分布式存储领域，有一个著名（CAP）理论。其中，C、A、P 分别代表一个我们要追求的目标。</p><ul>\n<li>数据一致性(Consistency)：如果系统对一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据。</li>\n<li>服务可用性(Availability)：所有读写请求在一定时间内得到响应，可终止、不会一直等待。</li>\n<li>分区容错性(Partition-tolerance)：在网络分区的情况下，被分隔的节点仍能正常对外服务。</li>\n</ul><p>那么 CAP 理论说的是什么？简单说，就是 C、A、P 三个目标不能兼得，我们只能取其二。</p><p>假设我们不会放弃服务的可用性，那么我们决策一个分布式存储基本上在数据一致性（C）和分区容错性（P）之间权衡。</p><p>数据一致性（C）的选择基本上是业务特性决定的，业务要求是强一致，我们就不可能用最终一致性模型，相应的，我们只能在分区容错性（P）上去取舍。</p><h2>结语</h2><p>今天我们概要讨论了数据库相关的核心话题。我们第一关心的，当然还是使用界面（接口）。从使用界面角度，我们要考虑选择关系型数据库还是文档型数据库，以及是否需要事务特性。</p><p>确定了我们要使用什么样的数据库后，接着我们从实现角度，考虑主从结构和分布式方面的特性。</p><p>数据库是非常专业并且复杂的领域，限于篇幅我们这里不能展开太多，你如果有兴趣可以参考相关的资料。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们将聊聊对象存储。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":129369,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1567100058,"is_pvip":false,"replies":[{"id":"48207","content":"多谢补充。我目前的确没有把redis归类到数据库，而是归类的类似memcache的内存缓存。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567131971,"ip_address":"","comment_id":129369,"utype":1}],"discussion_count":2,"race_medal":0,"score":"160480890010","product_id":100025201,"comment_content":"       老师的结语中其实有一点有误：&quot;从使用界面角度，我们要考虑关系型数据库还是文档型数据库，以及是否需要事务特性&quot;，文档型数据库其实只是非关系型数据库中的一种，而不是一类，键值存储redis同样是非关系型数据库，早期的memcache；其实它们有个共同的名称-内存数据库。<br>        关系型数据库和非关系数据库的关系不是相互取代而是相互补充：MYSQL 8.0已经引入了非关系数据库的部分特性补充和强化自己；其实随着内存数据库的崛起，已经从数据库+数据仓库的模式改变成内存库+数据库的模式，数据仓库在内存库的彻底崛起后彻底基本退出了舞台；之前实时数据存储在数据库中，数据定期存到数据仓库中；现在大多数就存放在内存库中定期落地，数据落地就可能造成延时。这个就像20年前数据库每天都会做全备，可是现在数据库的备份可能都是只有重大升级才会做，完全靠增量备份+日志。<br>        消息队列的出现又是为了一定程度减轻内存库的压力，多重类型并存；如何合理利用各种工具，让数据库发挥自己的特性扬长避短一直是从业多年致力研究的事情-其中就包括关系型和非关系数据库；由于消息队列的特性为了合理发挥RDBMS+NOSQL+MQ的最大效率，在强化自己的操作系统和计算机组成原理，力争做到组件的负载均衡；以上算是个人近10载DBA兼系统运维或系统运维兼DBA的一点薄见。<br>","like_count":37,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465424,"discussion_content":"多谢补充。我目前的确没有把redis归类到数据库，而是归类的类似memcache的内存缓存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335972,"discussion_content":"主要是我们遇到的问题变化了，解决方案也在变化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608435550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149724,"user_name":"不动声色满心澎湃","can_delete":false,"product_type":"c1","uid":1621658,"ip_address":"","ucode":"80D8F9E49AF7C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","comment_is_top":false,"comment_ctime":1573354706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96062635218","product_id":100025201,"comment_content":"、这些话题公司都有在说，然后这边也是一笔带过，目前为止，对我没什么帮助。","like_count":22},{"had_liked":false,"id":129927,"user_name":"CrazyAirhead","can_delete":false,"product_type":"c1","uid":1055979,"ip_address":"","ucode":"14E56E018164DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/eb/4c8d5710.jpg","comment_is_top":false,"comment_ctime":1567328337,"is_pvip":false,"replies":[{"id":"48463","content":"多谢推荐","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567338717,"ip_address":"","comment_id":129927,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40222034001","product_id":100025201,"comment_content":"https:&#47;&#47;pingcap.com&#47;blog-cn&#47;tidb-internal-1&#47;<br><br>https:&#47;&#47;pingcap.com&#47;blog-cn&#47;pessimistic-transaction-the-new-features-of-tidb&#47;<br>一起看看这两篇效果更佳。<br>","like_count":9,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465720,"discussion_content":"多谢推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567338717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349540,"discussion_content":"多谢推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613297708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129835,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1567297859,"is_pvip":false,"replies":[{"id":"48443","content":"P简单来说，就是网络出现分区（变成两个相互独立的集群）时，是不是还可以正常提供服务。如果可以正常服务，说明分区容忍度高。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567322882,"ip_address":"","comment_id":129835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31632068931","product_id":100025201,"comment_content":"老师，CAP中的P，这个概念有点不太懂，百度了一下好多不一致的说法，老师能解释一下吗","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465671,"discussion_content":"P简单来说，就是网络出现分区（变成两个相互独立的集群）时，是不是还可以正常提供服务。如果可以正常服务，说明分区容忍度高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567322882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135252,"user_name":"Rainman","can_delete":false,"product_type":"c1","uid":1025931,"ip_address":"","ucode":"6FD00E587EA4CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/8b/208d9e2c.jpg","comment_is_top":false,"comment_ctime":1569085480,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23043921960","product_id":100025201,"comment_content":"“P简单来说，就是网络出现分区（变成两个相互独立的集群）时，是不是还可以正常提供服务。如果可以正常服务，说明分区容忍度高。” 这里借用下老师的解释。<br>因为网络本身无法做到100%可靠，有可能出故障，所以分区是一个必然现象。如果我们选择了CA，放弃了P，那么当发生分区现象的时候（就是两个独立的集群，相互通信不了），该如何保障这两个集群的数据一致性呢（我们假设这两个集群是主从关系，主的数据同步给从，网络分区后，他们俩就通信不了）？<br>","like_count":5,"discussions":[{"author":{"id":1311772,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","nickname":"zhj","note":"","ucode":"65B9E222D6E075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204501,"discussion_content":"我理解是放弃了p，就是分区出错时都不对外提供服务，既然每个分区都不单独提供服务，本身就是保证了整个集群数据的一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584183509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1077598,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/5e/5393a76d.jpg","nickname":"Peter Yu","note":"","ucode":"D56786A6E85321","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":1311772,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","nickname":"zhj","note":"","ucode":"65B9E222D6E075","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556784,"discussion_content":"如果不对外提供服务，这样A就没法保证了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647511380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204501,"ip_address":""},"score":556784,"extra":""}]}]},{"had_liked":false,"id":130095,"user_name":"兢","can_delete":false,"product_type":"c1","uid":1070683,"ip_address":"","ucode":"878EAA03E02C1C","user_header":"","comment_is_top":false,"comment_ctime":1567385960,"is_pvip":false,"replies":[{"id":"48553","content":"这个具体就仁者见仁智者见智了，方法总比困难多😁","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567394950,"ip_address":"","comment_id":130095,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18747255144","product_id":100025201,"comment_content":"文中提到”为了避免版本回退，写操作应该确保至少有一个从节点收到了最新的数据。”<br>请问是如何确保至少有一个从节点收到了最新的数据，是每个写操作后都去验证一遍从库是否同步数据成功吗？如若是这样的话那如何去平衡效率问题？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465801,"discussion_content":"这个具体就仁者见仁智者见智了，方法总比困难多😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567394950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1289318,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ac/66/a256008b.jpg","nickname":"SuperDai","note":"","ucode":"0CA86D253754CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10098,"discussion_content":"是不是类似raft协议中的commit阶段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568264642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129591,"user_name":"Dean","can_delete":false,"product_type":"c1","uid":1178744,"ip_address":"","ucode":"23B6BE5CAEE11C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/78/ef1cb09c.jpg","comment_is_top":false,"comment_ctime":1567161865,"is_pvip":false,"replies":[{"id":"48336","content":"mongodb 就可以选择不同的一致性模型，可以选择强一致性。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567176657,"ip_address":"","comment_id":129591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18747031049","product_id":100025201,"comment_content":"老师谈到CAP理论，目前感觉绝大多数系统都需要P，只能在C和A之间做取舍，对于A其实大部分场景也不能放弃，所以最后只能在C上退让。在出现网络分区后，仍然尽量处理请求，但各分区之间会有数据不一致的情况。老师可以说说哪些系统是绝对支持C的吗？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465556,"discussion_content":"mongodb 就可以选择不同的一致性模型，可以选择强一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567176657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143971,"user_name":"Subfire","can_delete":false,"product_type":"c1","uid":1051622,"ip_address":"","ucode":"339A4EA20EBCEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/e6/99183c8d.jpg","comment_is_top":false,"comment_ctime":1571818521,"is_pvip":false,"replies":[{"id":"55580","content":"主从一致是好保证的，只需要写操作只由主执行，从同步主的结果就好。这样数据就可以做到最终一致。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1571840115,"ip_address":"","comment_id":143971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14456720409","product_id":100025201,"comment_content":"老师, 实践中一般用什么方法保证主从一致呢?","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471765,"discussion_content":"主从一致是好保证的，只需要写操作只由主执行，从同步主的结果就好。这样数据就可以做到最终一致。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571840115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287393,"user_name":"程序员Artist","can_delete":false,"product_type":"c1","uid":1063635,"ip_address":"","ucode":"F6AEC69AE77DC0","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/d3/c273ee50.jpg","comment_is_top":false,"comment_ctime":1617930404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10207864996","product_id":100025201,"comment_content":"大佬讲的就是透彻，一种顶层设计的视角。我也认为，大的技术视角很重要，容易产生创新，相反具体的实现细节并不是很重要，且往往都很多解决方案，所以细节点到有意思的点就够了，不用列出来浪费时间。","like_count":2},{"had_liked":false,"id":129493,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1567139458,"is_pvip":false,"replies":[{"id":"48237","content":"理论上读写分离是可行的，因为写的时候需要保证应该一主一从写成功，那么如果能够确认某个slave总是最新的话，可以分担读。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567140089,"ip_address":"","comment_id":129493,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10157074050","product_id":100025201,"comment_content":"这个主从关系，我理解就是我们说的读写分离，可以分担一些压力，但有的时候确实需要最新的数据，比如提交订单了，显示余额，要最新的肯定是主库查。那问题来了什么时候主库什么时候分库呢？如果是浏览商品可以salve查余额，金额变化了就要查master主库，单纯的从业务上来判断吗？是不是做不到真正的读写分离？<br>","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465505,"discussion_content":"理论上读写分离是可行的，因为写的时候需要保证应该一主一从写成功，那么如果能够确认某个slave总是最新的话，可以分担读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567140089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129174,"discussion_content":"所以关键就是怎么确认从是最新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578671043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152709,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574067780,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5869035076","product_id":100025201,"comment_content":"最近几个月项目原因，没能继续，现在重新回来跟着老师学习了。希望能慢慢赶上老师的节奏","like_count":1},{"had_liked":false,"id":129798,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1001410,"ip_address":"","ucode":"32646D78CC0389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/c2/e9fa4cf6.jpg","comment_is_top":false,"comment_ctime":1567257427,"is_pvip":false,"replies":[{"id":"48651","content":"MYSQL 并不会自动做主从切换，更没有自动选举方式来切换。从这个意义来说，MYSQL 并不是“现代”数据库。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567452627,"ip_address":"","comment_id":129798,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862224723","product_id":100025201,"comment_content":"老师说的，主从结构，主挂掉的情况下，两个以上从选举行为MySQL中是自动完成的吗？主恢复的时候，还需要额外做什么操作才能恢复原来的主吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465656,"discussion_content":"MYSQL 并不会自动做主从切换，更没有自动选举方式来切换。从这个意义来说，MYSQL 并不是“现代”数据库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567452627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129540,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1567151717,"is_pvip":false,"replies":[{"id":"48295","content":"InnoDB 的确不是用乐观锁。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567153287,"ip_address":"","comment_id":129540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862119013","product_id":100025201,"comment_content":"如果事务提交的时候发现和其他已提交事务冲突，则放弃该事务，对所有修改进行回滚（其实是删除该事务产生的版本修改记录）。<br>Mysql的InnoDB会有这种情况出现吗？我理解的InnoDB应该是在事务更新时会加行锁或者间隙锁，如果另外一个事务也对锁范围内的行做更新的话，会一直阻塞直到前一个事务执行完毕释放锁或者超时吧。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465530,"discussion_content":"InnoDB 的确不是用乐观锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567153287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129494,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1567139573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862106869","product_id":100025201,"comment_content":"打卡 37","like_count":1},{"had_liked":false,"id":129393,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1567125488,"is_pvip":false,"replies":[{"id":"48233","content":"的确算误用。缓存和存储是两码事。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567133794,"ip_address":"","comment_id":129393,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862092784","product_id":100025201,"comment_content":"老师，一直不太明白，文档型数据库什么情况下应用会比较合适了？公司项目都是把他当临时缓存在用，把一些调用频繁的json格式的数据存上面。我不太理解，用redis不也可以了吗，还轻量级一些。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465438,"discussion_content":"的确算误用。缓存和存储是两码事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567133794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360772,"user_name":"邢永胜","can_delete":false,"product_type":"c1","uid":1567397,"ip_address":"浙江","ucode":"B64AB17046B42E","user_header":"https://static001.geekbang.org/account/avatar/00/17/ea/a5/1b4a65ba.jpg","comment_is_top":false,"comment_ctime":1666840934,"is_pvip":true,"replies":[{"id":"131264","content":"强schema一般约定字段数据类型，mongodb默认不会去约束，但是的确可以通过 validate 和 $type 配置出来类强 schema 的效果","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1666863755,"ip_address":"浙江","comment_id":360772,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666840934","product_id":100025201,"comment_content":"MongoDB 数据字段可以配置，诸如强制规定某些字段必须有之类的，即所谓 强 schema","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591852,"discussion_content":"强schema一般约定字段数据类型，mongodb默认不会去约束，但是的确可以通过 validate 和 $type 配置出来类强 schema 的效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666863755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289632,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1619103620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619103620","product_id":100025201,"comment_content":"有启发<br><br>市面上的数据库从存储结构上来分可以分为三大类，分别是关系型存储、键值对存储和文档型存储。之前一直认为键值对存储就是文档型存储。<br><br>接着事务的出现是为了解决数据一致性问题。<br><br>主从结构数据库的出现，保证了数据的可用性和安全性，当出现服务器异常挂掉，可以继续使用从数据库的数据，保证服务的可用性，当遇到硬盘老化或者是自然灾害，导致存储服务器损坏，别的地方还有备份的数据，我的理解是主从数据库实际上是对数据的多次备份。<br><br>分布式数据库存储的出现主要解决了数据单台服务器吞吐能力极限，理论上只要有足够多的存储节点，它的吞吐能力就能无限延伸。<br><br>这些存储解决方案其实都是为业务服务，选择适合自己业务的存储方案才是最好的。","like_count":0},{"had_liked":false,"id":182094,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1582707935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582707935","product_id":100025201,"comment_content":"关于mysql的主从机制，我了解的不是很多，就只知道它内置提供主从功能。<br>我有如下问题：<br>1. 如果按照老师后面说的，mysql是没有选举机制的，那么是不是只能从代码层去解决了？<br>比如在主库+从库1插入最新数据，并把最新的数据的从库放到另一个内存库中（比如redis）<br>然后插入在build connectionstring 的地方实现选举功能吗？","like_count":0},{"had_liked":false,"id":149736,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1573360159,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573360159","product_id":100025201,"comment_content":"分布式数据库会是未来的主角吗?老师讲的分布式场景下,数据库的瓶颈是整个系统的最大瓶颈,如果分布式数据库能做到数据动态伸缩节点,且能保证数据的可靠性和低延时,那么分布式数据库就能大面积替换MYSQL 和Oracle了,","like_count":0,"discussions":[{"author":{"id":1030928,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/10/f01eafe4.jpg","nickname":"ricktian","note":"","ucode":"06F90004164C64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65640,"discussion_content":"tidb算是你说的这种替换方案吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575017896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129601,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1567169181,"is_pvip":false,"replies":[{"id":"48334","content":"我们大部分基础平台或基础软件相关的内容是以需求分析和平台的关键点解剖为主，并不是以内容深浅为准则。很难保证每一篇都有高深的东西。上一篇关于存储中间件的通用话题讨论完了，这一篇基本上就只能谈很具体的数据库相关的领域需求了。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567176564,"ip_address":"","comment_id":129601,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1567169181","product_id":100025201,"comment_content":"大佬的课，至今没有一篇能一遍看懂的，除了这篇。所以说这篇讲得太浅，无论是具体的技术，还是之上的思想都太浅。这有失大佬水准。之前的文章能力有限留言不了，这篇却是没什么点可以留言的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465560,"discussion_content":"我们大部分基础平台或基础软件相关的内容是以需求分析和平台的关键点解剖为主，并不是以内容深浅为准则。很难保证每一篇都有高深的东西。上一篇关于存储中间件的通用话题讨论完了，这一篇基本上就只能谈很具体的数据库相关的领域需求了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567176564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114772,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","nickname":"Numbpad1","note":"","ucode":"2F075AC7E3847D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540289,"discussion_content":"我也是看的迷迷糊糊的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640009669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1497753,"avatar":"https://static001.geekbang.org/account/avatar/00/16/da/99/80222c2a.jpg","nickname":"立耳","note":"","ucode":"99C8E4DC67ED01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23860,"discussion_content":"仁者见仁，这节课看的我是很有感触，老师的出发点是宏观的阐述数据库到分布式系统中的CAP理论，很多点单拿出来都能说很多的，但至少让我把大的视图画出来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569927716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6985,"discussion_content":"这是第37讲，难得有那么一篇给你喘息的机会了。😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567240993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129577,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567157385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567157385","product_id":100025201,"comment_content":"跟着老师一起精进。","like_count":0},{"had_liked":false,"id":129400,"user_name":"大糖果","can_delete":false,"product_type":"c1","uid":1509861,"ip_address":"","ucode":"80B7A530F181DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK9Ijx19rLDhOrF9TicDeaq1lUr2vyTiajWIQiaNoWs9JLQqtiacyx0ffuib4qvaVdvk7WLvLib1oqRfAlA/132","comment_is_top":false,"comment_ctime":1567125907,"is_pvip":false,"replies":[{"id":"48216","content":"后面这一章的总结篇会给一些参考","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1567132926,"ip_address":"","comment_id":129400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567125907","product_id":100025201,"comment_content":"老师好，看完文章对数据库有了一个整体概念，老师说如果有兴趣可以参考相关的资料。那么这个相关的资料有什么推荐吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465444,"discussion_content":"后面这一章的总结篇会给一些参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}