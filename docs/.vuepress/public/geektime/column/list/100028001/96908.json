{"id":96908,"title":"02 | 如何制定性能调优策略？","content":"<p>你好，我是刘超。</p><p>上一讲，我在介绍性能调优重要性的时候，提到了性能测试。面对日渐复杂的系统，制定合理的性能测试，可以提前发现性能瓶颈，然后有针对性地制定调优策略。<span class=\"orange\">总结一下就是“测试-分析-调优”三步走。</span></p><p>今天，我们就在这个基础上，好好聊一聊“如何制定系统的性能调优策略”。</p><h2>性能测试攻略</h2><p>性能测试是提前发现性能瓶颈，保障系统性能稳定的必要措施。下面我先给你介绍两种常用的测试方法，帮助你从点到面地测试系统性能。</p><h3><strong>1.微基准性能测试</strong></h3><p>微基准性能测试可以精准定位到某个模块或者某个方法的性能问题，特别适合做一个功能模块或者一个方法在不同实现方式下的性能对比。例如，对比一个方法使用同步实现和非同步实现的性能。</p><h3><strong>2.宏基准性能测试</strong></h3><p>宏基准性能测试是一个综合测试，需要考虑到测试环境、测试场景和测试目标。</p><p>首先看测试环境，我们需要模拟线上的真实环境。</p><p>然后看测试场景。我们需要确定在测试某个接口时，是否有其他业务接口同时也在平行运行，造成干扰。如果有，请重视，因为你一旦忽视了这种干扰，测试结果就会出现偏差。</p><p>最后看测试目标。我们的性能测试是要有目标的，这里可以通过吞吐量以及响应时间来衡量系统是否达标。不达标，就进行优化；达标，就继续加大测试的并发数，探底接口的 TPS（最大每秒事务处理量），这样做，可以深入了解到接口的性能。除了测试接口的吞吐量和响应时间以外，我们还需要循环测试可能导致性能问题的接口，观察各个服务器的  CPU、内存以及  I/O  使用率的变化。</p><!-- [[[read_end]]] --><p>以上就是两种测试方法的详解。其中值得注意的是，性能测试存在干扰因子，会使测试结果不准确。所以，<strong>我们在做性能测试时，还要注意一些问题。</strong></p><h3><strong>1.热身问题</strong></h3><p>当我们做性能测试时，我们的系统会运行得越来越快，后面的访问速度要比我们第一次访问的速度快上几倍。这是怎么回事呢？</p><p>在  Java  编程语言和环境中，.java  文件编译成为  .class  文件后，机器还是无法直接运行  .class  文件中的字节码，需要通过解释器将字节码转换成本地机器码才能运行。为了节约内存和执行效率，代码最初被执行时，解释器会率先解释执行这段代码。</p><p>随着代码被执行的次数增多，当虚拟机发现某个方法或代码块运行得特别频繁时，就会把这些代码认定为热点代码（Hot Spot Code）。为了提高热点代码的执行效率，在运行时，虚拟机将会通过即时编译器（JIT compiler，just-in-time compiler）把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，然后存储在内存中，之后每次运行代码时，直接从内存中获取即可。</p><p>所以在刚开始运行的阶段，虚拟机会花费很长的时间来全面优化代码，后面就能以最高性能执行了。</p><p>这就是热身过程，如果在进行性能测试时，热身时间过长，就会导致第一次访问速度过慢，你就可以考虑先优化，再进行测试。</p><h3><strong>2.性能测试结果不稳定</strong></h3><p>我们在做性能测试时发现，每次测试处理的数据集都是一样的，但测试结果却有差异。这是因为测试时，伴随着很多不稳定因素，比如机器其他进程的影响、网络波动以及每个阶段 JVM 垃圾回收的不同等等。</p><p>我们可以通过多次测试，将测试结果求平均，或者统计一个曲线图，只要保证我们的平均值是在合理范围之内，而且波动不是很大，这种情况下，性能测试就是通过的。</p><h3><strong>3.多JVM情况下的影响</strong></h3><p>如果我们的服务器有多个  Java  应用服务，部署在不同的 Tomcat  下，这就意味着我们的服务器会有多个  JVM。任意一个  JVM 都拥有整个系统的资源使用权。如果一台机器上只部署单独的一个  JVM，在做性能测试时，测试结果很好，或者你调优的效果很好，但在一台机器多个  JVM  的情况下就不一定了。所以我们应该尽量避免线上环境中一台机器部署多个  JVM  的情况。</p><h2>合理分析结果，制定调优策略</h2><p>这里我将“三步走”中的分析和调优结合在一起讲。</p><p>我们在完成性能测试之后，需要输出一份性能测试报告，帮我们分析系统性能测试的情况。其中测试结果需要包含测试接口的平均、最大和最小吞吐量，响应时间，服务器的  CPU、内存、I/O、网络  IO  使用率，JVM  的  GC  频率等。</p><p>通过观察这些调优标准，可以发现性能瓶颈，我们再通过自下而上的方式分析查找问题。首先从操作系统层面，查看系统的  CPU、内存、I/O、网络的使用率是否存在异常，再通过命令查找异常日志，最后通过分析日志，找到导致瓶颈的原因；还可以从  Java  应用的  JVM  层面，查看  JVM  的垃圾回收频率以及内存分配情况是否存在异常，分析日志，找到导致瓶颈的原因。</p><p>如果系统和  JVM  层面都没有出现异常情况，我们可以查看应用服务业务层是否存在性能瓶颈，例如  Java  编程的问题、读写数据瓶颈等等。</p><p>分析查找问题是一个复杂而又细致的过程，某个性能问题可能是一个原因导致的，也可能是几个原因共同导致的结果。我们分析查找问题可以采用自下而上的方式，而我们解决系统性能问题，则可以采用自上而下的方式逐级优化。下面我来介绍下从应用层到操作系统层的几种调优策略。</p><h3><strong>1.优化代码</strong></h3><p>应用层的问题代码往往会因为耗尽系统资源而暴露出来。例如，我们某段代码导致内存溢出，往往是将  JVM 中的内存用完了，这个时候系统的内存资源消耗殆尽了，同时也会引发  JVM  频繁地发生垃圾回收，导致  CPU  100%  以上居高不下，这个时候又消耗了系统的  CPU  资源。</p><p>还有一些是非问题代码导致的性能问题，这种往往是比较难发现的，需要依靠我们的经验来优化。例如，我们经常使用的  LinkedList  集合，如果使用  for  循环遍历该容器，将大大降低读的效率，但这种效率的降低很难导致系统性能参数异常。</p><p>这时有经验的同学，就会改用 Iterator （迭代器）迭代循环该集合，这是因为  LinkedList  是链表实现的，如果使用  for  循环获取元素，在每次循环获取元素时，都会去遍历一次  List，这样会降低读的效率。</p><h3><strong>2.优化设计</strong></h3><p>面向对象有很多设计模式，可以帮助我们优化业务层以及中间件层的代码设计。优化后，不仅可以精简代码，还能提高整体性能。例如，单例模式在频繁调用创建对象的场景中，可以共享一个创建对象，这样可以减少频繁地创建和销毁对象所带来的性能消耗。</p><h3><strong>3.优化算法</strong></h3><p>好的算法可以帮助我们大大地提升系统性能。例如，在不同的场景中，使用合适的查找算法可以降低时间复杂度。</p><h3><strong>4.时间换空间</strong></h3><p>有时候系统对查询时的速度并没有很高的要求，反而对存储空间要求苛刻，这个时候我们可以考虑用时间来换取空间。</p><p>例如，我在 03 讲就会详解的用  String  对象的  intern  方法，可以将重复率比较高的数据集存储在常量池，重复使用一个相同的对象，这样可以大大节省内存存储空间。但由于常量池使用的是HashMap数据结构类型，如果我们存储数据过多，查询的性能就会下降。所以在这种对存储容量要求比较苛刻，而对查询速度不作要求的场景，我们就可以考虑用时间换空间。</p><h3><strong>5.空间换时间</strong></h3><p>这种方法是使用存储空间来提升访问速度。现在很多系统都是使用的 MySQL 数据库，较为常见的分表分库是典型的使用空间换时间的案例。</p><p>因为 MySQL 单表在存储千万数据以上时，读写性能会明显下降，这个时候我们需要将表数据通过某个字段 Hash  值或者其他方式分拆，系统查询数据时，会根据条件的 Hash  值判断找到对应的表，因为表数据量减小了，查询性能也就提升了。</p><h3><strong>6.参数调优</strong></h3><p>以上都是业务层代码的优化，除此之外，JVM、Web  容器以及操作系统的优化也是非常关键的。</p><p>根据自己的业务场景，合理地设置  JVM  的内存空间以及垃圾回收算法可以提升系统性能。例如，如果我们业务中会创建大量的大对象，我们可以通过设置，将这些大对象直接放进老年代。这样可以减少年轻代频繁发生小的垃圾回收（Minor GC），减少  CPU  占用时间，提升系统性能。</p><p>Web  容器线程池的设置以及 Linux  操作系统的内核参数设置不合理也有可能导致系统性能瓶颈，根据自己的业务场景优化这两部分，可以提升系统性能。</p><h2>兜底策略，确保系统稳定性</h2><p>上边讲到的所有的性能调优策略，都是提高系统性能的手段，但在互联网飞速发展的时代，产品的用户量是瞬息万变的，无论我们的系统优化得有多好，还是会存在承受极限，所以为了保证系统的稳定性，我们还需要采用一些兜底策略。</p><h3><strong>什么是兜底策略？</strong></h3><p>第一，限流，对系统的入口设置最大访问限制。这里可以参考性能测试中探底接口的 TPS 。同时采取熔断措施，友好地返回没有成功的请求。</p><p>第二，实现智能化横向扩容。智能化横向扩容可以保证当访问量超过某一个阈值时，系统可以根据需求自动横向新增服务。</p><p>第三，提前扩容。这种方法通常应用于高并发系统，例如，瞬时抢购业务系统。这是因为横向扩容无法满足大量发生在瞬间的请求，即使成功了，抢购也结束了。</p><p>目前很多公司使用 Docker  容器来部署应用服务。这是因为 Docker  容器是使用 Kubernetes  作为容器管理系统，而 Kubernetes  可以实现智能化横向扩容和提前扩容 Docker  服务。</p><h2>总结</h2><p>学完这讲，你应该对性能测试以及性能调优有所认识了。我们再通过一张图来回顾下今天的内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/b8/f8460bb16b56e8c8897c7cf4c9f99eb8.jpg?wh=1074*957\" alt=\"\"></p><p>我们将性能测试分为微基准性能测试和宏基准性能测试，前者可以精准地调优小单元的业务功能，后者可以结合内外因素，综合模拟线上环境来测试系统性能。两种方法结合，可以更立体地测试系统性能。</p><p>测试结果可以帮助我们制定性能调优策略，调优方法很多，这里就不一一赘述了。但有一个共同点就是，调优策略千变万化，但思路和核心都是一样的，都是从业务调优到编程调优，再到系统调优。</p><p>最后，给你提个醒，任何调优都需要结合场景明确已知问题和性能目标，不能为了调优而调优，以免引入新的Bug，带来风险和弊端。</p><h2>思考题</h2><p>假设你现在负责一个电商系统，马上就有新品上线了，还要有抢购活动，那么你会将哪些功能做微基准性能测试，哪些功能做宏基准性能测试呢？</p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p></p>","neighbors":{"left":{"article_title":"01 | 如何制定性能调优标准？","id":96277},"right":{"article_title":"03 | 字符串性能优化不容小觑，百M内存轻松存储几十G数据","id":97215}},"comments":[{"had_liked":false,"id":97292,"user_name":"何何何何何少侠","can_delete":false,"product_type":"c1","uid":1125973,"ip_address":"","ucode":"455179D476BF45","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/55/dd2b5083.jpg","comment_is_top":false,"comment_ctime":1558630960,"is_pvip":false,"replies":[{"id":"34789","content":"回答的很全面，赞一个","user_name":"作者回复","comment_id":97292,"uid":"1228576","ip_address":"","utype":1,"ctime":1558659801,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"465415098928","product_id":100028001,"comment_content":"1. 新品上线需要对系统基础功能、尤其是上线涉及改动、有耦合的业务做宏基准测试，如：用户服务、商品服务、订单服务、支付服务、优惠券服务等。从而保证支撑抢购活动的服务正常运行<br><br>2. 针对抢购活动，如：秒杀 团购等促销。需要做微基准测试以验证服务是否达到预期。测试过程中需要留意诸如 qps、内存、cpu、网络带宽、线程堆栈等指标是否达标。不仅考虑单机性能，更要拓展到集群时性能的阈值能达到多少从而给出更加准确的性能测试评估报告<br><br>3. 多说一句：此外还要考虑服务的质量，要测试出抢购活动的瓶颈在哪儿从而应对即将到来的大促活动，以方便开发、运维团队制定更好的如服务限流、降级、动态伸缩等方案。<br><br><br>","like_count":109,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451214,"discussion_content":"回答的很全面，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558659801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97020,"user_name":"木偶笨笨","can_delete":false,"product_type":"c1","uid":1013117,"ip_address":"","ucode":"E5BD6088712AFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/7d/96fcbf51.jpg","comment_is_top":false,"comment_ctime":1558573251,"is_pvip":false,"replies":[{"id":"34696","content":"感谢你的建议。我相信很多同学跟你有一样的想法，那就是赶紧学会使用性能排查工具，性能如何监测分析，如何解决性能问题。<br><br>由于不同的性能问题，性能排查以及调优都是不固定的，所以在后面的一些章节中，会有一些结合实际场景来进行性能排查的实战。<br><br>在大家了解一些理论性的知识点以及基础之后，也有专门一讲来讲述性能监测工具、调优工具的使用，所以大家保持耐心，切记心急吃不了热豆腐。<br><br>在这里我们强调了即使我们性能测试做的再好，兜底策略是一定要做的，兜底也是性能调优的一部分。试想下，我们的性能调优做的再好，系统同样存在极限，当系统达到极限，系统肯定出现性能瓶颈。<br><br>在学习成长的过程中，我们切忌将知识点局限于某个层级，或者将自己局限于某一种语言。例如线程池的大小设置，其实也是一种限流的方式，所以限流熔断并不只是局限于架构这块的内容。<br><br>我们要做性能调优最重要的目的是什么？在我看来就是为了避免发生线上事故，如果发生线上事故，也是要避免线上大面积事故。所以性能调优做的再好，系统也是存在极限的，兜底策略是系统的保护伞，特别在高并发的系统中，降级&#47;熔断&#47;限流成为保证系统性能稳定性的重要环节。","user_name":"作者回复","comment_id":97020,"uid":"1228576","ip_address":"","utype":1,"ctime":1558578060,"user_name_real":"刘超"}],"discussion_count":4,"race_medal":0,"score":"203422036163","product_id":100028001,"comment_content":"感觉论题有一点过于发散，讲到限流熔断这些内容了，我理解限流熔断实际是架构师的事情，是不是另开一课再讲。这门课focus在调优方法、工具、技巧，以及相关理论比如jvm、多线程原理是不是会更合适。","like_count":48,"discussions":[{"author":{"id":1206388,"avatar":"https://static001.geekbang.org/account/avatar/00/12/68/74/461b202d.jpg","nickname":"睁眼看世界","note":"","ucode":"F94CF34BC5B2AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37378,"discussion_content":"个人觉得有了兜底策略才是完整的调优，调优不是局限于某个点，而是确保整个服务或者整体项目平台的稳定性！","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571587251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f7/b7/a2b4c9b9.jpg","nickname":"benjamindora","note":"","ucode":"66C29727AE47C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189216,"discussion_content":"同意老师的观点","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582859152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176783,"discussion_content":"我非常认可老师的回答","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582040868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451100,"discussion_content":"感谢你的建议。我相信很多同学跟你有一样的想法，那就是赶紧学会使用性能排查工具，性能如何监测分析，如何解决性能问题。\n\n由于不同的性能问题，性能排查以及调优都是不固定的，所以在后面的一些章节中，会有一些结合实际场景来进行性能排查的实战。\n\n在大家了解一些理论性的知识点以及基础之后，也有专门一讲来讲述性能监测工具、调优工具的使用，所以大家保持耐心，切记心急吃不了热豆腐。\n\n在这里我们强调了即使我们性能测试做的再好，兜底策略是一定要做的，兜底也是性能调优的一部分。试想下，我们的性能调优做的再好，系统同样存在极限，当系统达到极限，系统肯定出现性能瓶颈。\n\n在学习成长的过程中，我们切忌将知识点局限于某个层级，或者将自己局限于某一种语言。例如线程池的大小设置，其实也是一种限流的方式，所以限流熔断并不只是局限于架构这块的内容。\n\n我们要做性能调优最重要的目的是什么？在我看来就是为了避免发生线上事故，如果发生线上事故，也是要避免线上大面积事故。所以性能调优做的再好，系统也是存在极限的，兜底策略是系统的保护伞，特别在高并发的系统中，降级/熔断/限流成为保证系统性能稳定性的重要环节。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558578060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97456,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1558674807,"is_pvip":false,"replies":[{"id":"34876","content":"你好 陆离，你有没有通过命令提前打开JVM内存异常日志呢，可以在启动tomcat时，配置参数-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&#47;path&#47;heap&#47;dump，如果遇到内存异常，则会生成dump文件。<br><br>504是响应超时，有很多种可能。我建议你先排查应用服务内存是否存在异常，在504时，登录服务器使用top命令查看内存、cpu使用情况，同时查看应用日志是否存在异常日志，排除应用服务的问题;<br><br>也有可能是nginx的问题，我们可以查看nginx的日志是否存在异常，如果存在异常，应该调优nginx;<br><br>我们可以通过netstat命令查看linux服务器的连接状态，是否存在大量time wait状态的连接。 如果有，需要排除linux服务器的socket最大连接数是否设置合适，太小也容易造成504。","user_name":"作者回复","comment_id":97456,"uid":"1228576","ip_address":"","utype":1,"ctime":1558698620,"user_name_real":"刘超"}],"discussion_count":2,"race_medal":0,"score":"108932857207","product_id":100028001,"comment_content":"老师你好，最近我司app也是上线运行一段时间之后就一直504了，需要重启一下才能恢复正常。线上的情况比较特殊，获取不到dump信息，local端测试没有发现问题。老师有什么排查方向可以指点一下吗？","like_count":26,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451285,"discussion_content":"你好 陆离，你有没有通过命令提前打开JVM内存异常日志呢，可以在启动tomcat时，配置参数-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/heap/dump，如果遇到内存异常，则会生成dump文件。\n\n504是响应超时，有很多种可能。我建议你先排查应用服务内存是否存在异常，在504时，登录服务器使用top命令查看内存、cpu使用情况，同时查看应用日志是否存在异常日志，排除应用服务的问题;\n\n也有可能是nginx的问题，我们可以查看nginx的日志是否存在异常，如果存在异常，应该调优nginx;\n\n我们可以通过netstat命令查看linux服务器的连接状态，是否存在大量time wait状态的连接。 如果有，需要排除linux服务器的socket最大连接数是否设置合适，太小也容易造成504。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558698620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055554,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","nickname":"keep_it_real","note":"","ucode":"F5057CAF752FF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571693,"discussion_content":"我觉得大概率是有oom了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652349678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105883,"user_name":"Hammy","can_delete":false,"product_type":"c1","uid":1256838,"ip_address":"","ucode":"9FF68F2D9BE174","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/86/ffc4d749.jpg","comment_is_top":false,"comment_ctime":1561098676,"is_pvip":false,"replies":[{"id":"51664","content":"理解的没错，这里用数据冗余来做案例更恰当","user_name":"作者回复","comment_id":105883,"uid":"1228576","ip_address":"","utype":1,"ctime":1568897937,"user_name_real":"刘超"}],"discussion_count":3,"race_medal":0,"score":"53100706228","product_id":100028001,"comment_content":"老师你好，听了你的课受益匪浅。但是我有一个问题，您在将空间换时间的举例中使用了数据库分表这种当做案例，我个人觉得数据库分表本质上不属于空间换时间的样例。因为单表和多表存储数据的总量本质上是恒定的，之所以能提高性能是因为分表以后，b+tree索引维护的数据量会降低，从而可以减少查询数据的总量以及索引的维护成本。我个人觉得分表这种样例是属于将数据结构进行拆分，减少单个数据结构存储的数据总量从而提升性能，但本质上并没有增加额外的空间。如果自己的理解有问题，希望可以指出。","like_count":12,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454849,"discussion_content":"理解的没错，这里用数据冗余来做案例更恰当","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568897937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072350,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5c/de/16695891.jpg","nickname":"小太阳","note":"","ucode":"84FF032FE78B11","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66895,"discussion_content":"说的对！用读写分离的主从库这样的数据冗余，才算是用空间换时间。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575115056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370057,"discussion_content":"使用缓存是空间换时间的一种方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619270215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100151,"user_name":"Geek_ebda96","can_delete":false,"product_type":"c1","uid":1134862,"ip_address":"","ucode":"02912E6D95A5A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoRiaKX0ulEibbbwM4xhjyMeza0Pyp7KO1mqvfJceiaM6ZNtGpXJibI6P2qHGwBP9GKwOt9LgHicHflBXw/132","comment_is_top":false,"comment_ctime":1559461508,"is_pvip":false,"replies":[{"id":"36210","content":"可以通过设置CompileThreshold参数降低执行方法次数阈值来提前预热代码，也可以通过调用WarmUpContextListener.invoke方法指定需要预热的方法，当然也可以在启动时提前写个循环或多线程调用该方法。<br><br>我们还可以使用一些工具来预热，例如之前有同学提到的JMH。","user_name":"作者回复","comment_id":100151,"uid":"1228576","ip_address":"","utype":1,"ctime":1559569677,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"53099069060","product_id":100028001,"comment_content":"老师，这句话<br>这就是热身过程，如果在进行性能测试时，热身时间过长，就会导致第一次访问速度过慢，你就可以考虑先优化，再进行测试。<br>指的优化是优化JVM的一些参数，还是指优化代码呢？如果是优化代码，热身时间过长，有没有例子能够说明一些，第一次查询数据先放入缓存这个算吗？","like_count":12,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452429,"discussion_content":"可以通过设置CompileThreshold参数降低执行方法次数阈值来提前预热代码，也可以通过调用WarmUpContextListener.invoke方法指定需要预热的方法，当然也可以在启动时提前写个循环或多线程调用该方法。\n\n我们还可以使用一些工具来预热，例如之前有同学提到的JMH。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559569677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97062,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1558579048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40213284712","product_id":100028001,"comment_content":"总结的很好，期待后面的实战内容！！！","like_count":9},{"had_liked":false,"id":101710,"user_name":"SlamDunk","can_delete":false,"product_type":"c1","uid":1103460,"ip_address":"","ucode":"ED55AB509B4059","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/64/75f772dc.jpg","comment_is_top":false,"comment_ctime":1559921725,"is_pvip":false,"replies":[{"id":"53051","content":"一个Tomcat进程代表一个JVM","user_name":"作者回复","comment_id":101710,"uid":"1228576","ip_address":"","utype":1,"ctime":1569978345,"user_name_real":"刘超"}],"discussion_count":3,"race_medal":0,"score":"35919660093","product_id":100028001,"comment_content":"如果我们的服务器有多个 Java 应用服务，部署在不同的 Tomcat 下，这就意味着我们的服务器会有多个 JVM。<br>不同tomcat也可以使用同一个jrm下的同一个jvm呀，为什么这里要说会有多个jvm呢？","like_count":8,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453081,"discussion_content":"一个Tomcat进程代表一个JVM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569978345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108970,"avatar":"https://static001.geekbang.org/account/avatar/00/10/eb/ea/7d00f657.jpg","nickname":"liyghting","note":"","ucode":"439794ECEEFD26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21049,"discussion_content":"多个应用同时启动的话，就有多个jvm在运行了。哪怕启动的时候用的同一个jre ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569417894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176801,"discussion_content":"你的意思是在一个Tomcat里部署多个应用吗？一个Tomcat的线程池比较有限，那样每个应用的性能天花板会很低的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582040988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96980,"user_name":"etdick","can_delete":false,"product_type":"c1","uid":1487506,"ip_address":"","ucode":"E43D68000E92CA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaiaQYkUHByDARl4ULduH8Y4hicOpMxGjzPZmJkXK9RYd1oVMICd0icCfarxI4Yvmiap2a8t3Eae3LMg/132","comment_is_top":false,"comment_ctime":1558569444,"is_pvip":false,"replies":[{"id":"34689","content":"你好 etdick。<br><br>首先，在做性能测试时，我们应该单独部署测试每个微服务的性能，尽量排除服务之间的干扰，先完成单个服务的性能调优;<br><br>其次，模拟线上环境下多个服务部署，根据实际业务来模拟多个服务的高峰值的性能测试，如果服务与服务之间存在性能上的互相干扰，且属于不同的业务，我们应该考虑实际生产环境中，两个业务场景是不是存在相同的峰值期，若是，则需考虑分开不同服务器部署或根据需求进行服务降级。<br><br>除此之外，我们还可以设置JVM参数来调优各个JVM的内存分配以及垃圾回收。我们知道两个JVM会互相产生影响的主要原因是对CPU的使用情况，而垃圾回收频率是抢占CPU的主要因素。我们可以调优内存分配降低垃圾回收频率，或设置合适的垃圾回收器。由于不同场景具体的分配调优方式不同，我们将会在之后的内容中讲解到。<br>","user_name":"作者回复","comment_id":96980,"uid":"1228576","ip_address":"","utype":1,"ctime":1558575179,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"35918307812","product_id":100028001,"comment_content":"老师，现在的微服务架构，一台物理机部署了多个微服务。每个服务相当于一个JVM。如何调优？","like_count":8,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451088,"discussion_content":"你好 etdick。\n\n首先，在做性能测试时，我们应该单独部署测试每个微服务的性能，尽量排除服务之间的干扰，先完成单个服务的性能调优;\n\n其次，模拟线上环境下多个服务部署，根据实际业务来模拟多个服务的高峰值的性能测试，如果服务与服务之间存在性能上的互相干扰，且属于不同的业务，我们应该考虑实际生产环境中，两个业务场景是不是存在相同的峰值期，若是，则需考虑分开不同服务器部署或根据需求进行服务降级。\n\n除此之外，我们还可以设置JVM参数来调优各个JVM的内存分配以及垃圾回收。我们知道两个JVM会互相产生影响的主要原因是对CPU的使用情况，而垃圾回收频率是抢占CPU的主要因素。我们可以调优内存分配降低垃圾回收频率，或设置合适的垃圾回收器。由于不同场景具体的分配调优方式不同，我们将会在之后的内容中讲解到。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558575179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97320,"user_name":"建国","can_delete":false,"product_type":"c1","uid":1242847,"ip_address":"","ucode":"A077B3AFB307A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/df/a576bfce.jpg","comment_is_top":false,"comment_ctime":1558656331,"is_pvip":false,"replies":[{"id":"34800","content":"你好 建国，欢迎多提问。我先回答你的第一个问题，前面两讲中，一方面，是让你对性能调优有一个全面的认识: 调优的目的是什么，有没有指标可衡量，如何发现性能问题，发现后，我们有什么策略可以调优; 另一方面，我多次强调了基础知识以及调优的思维方式的重要性。所以接下来我将从基础讲起，再到高级篇，学会高性能编程的同时，总结出一惯的调优思维方式。从中很多章节中会有结合实际场景使用到一些测试工具以及性能调优工具。除了这些，我还会在最后用实战的方式来为你讲解实际业务场景下的调优。<br><br>从这个专栏的目录来看，没有专题专门讲nginx的调优，nginx如果只是作为转发，由于nginx是基于事件驱动模型实现的web请求转发，使用异步处理方式来避免阻塞，对性能损耗应该不大。如果用lua脚本做了一些逻辑判断，或者限流等等，这个是有损的，会带来很大的损耗。","user_name":"作者回复","comment_id":97320,"uid":"1228576","ip_address":"","utype":1,"ctime":1558662295,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"31623427403","product_id":100028001,"comment_content":"老师我又来了，两个问题，1.您在这节中介绍的那么多的知识点在后面的课程中都会逐个讲解到吧 2.有没有nginx调优呢，因为我们给客户部署时发现，用阿里云的SLB和自己搭建的nginx，某个接口响应时间差10+倍","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451225,"discussion_content":"你好 建国，欢迎多提问。我先回答你的第一个问题，前面两讲中，一方面，是让你对性能调优有一个全面的认识: 调优的目的是什么，有没有指标可衡量，如何发现性能问题，发现后，我们有什么策略可以调优; 另一方面，我多次强调了基础知识以及调优的思维方式的重要性。所以接下来我将从基础讲起，再到高级篇，学会高性能编程的同时，总结出一惯的调优思维方式。从中很多章节中会有结合实际场景使用到一些测试工具以及性能调优工具。除了这些，我还会在最后用实战的方式来为你讲解实际业务场景下的调优。\n\n从这个专栏的目录来看，没有专题专门讲nginx的调优，nginx如果只是作为转发，由于nginx是基于事件驱动模型实现的web请求转发，使用异步处理方式来避免阻塞，对性能损耗应该不大。如果用lua脚本做了一些逻辑判断，或者限流等等，这个是有损的，会带来很大的损耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558662295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96984,"user_name":"昨夜星辰","can_delete":false,"product_type":"c1","uid":1070110,"ip_address":"","ucode":"88BEBA27AF9FDE","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/1e/8d09c58c.jpg","comment_is_top":false,"comment_ctime":1558569837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31623340909","product_id":100028001,"comment_content":"新上线的系统作宏基础测试，抢购活动作微基本测试","like_count":7},{"had_liked":false,"id":97356,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1558659998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27328463774","product_id":100028001,"comment_content":"抢购秒杀，感觉架构层面的优化比较多吧，尽量缩短链路，缩短响应时间，没有依赖的服务串行优化为并行。或者本地持久化后保证最终一致性。查询商品详情，下单支付这些接口宏观测试，内部的比较占用系统资源的关键代码(占用IO资源，逻辑复杂消耗CPU资源等)做微测试。还有就是需要做限流兜底，读服务采用合理的缓存策略等。","like_count":6},{"had_liked":false,"id":100817,"user_name":"阿厚","can_delete":false,"product_type":"c1","uid":1480571,"ip_address":"","ucode":"F5AF6C1A202227","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6PbKL8YRE2wzqdoxcS5E88Wvot8Vv0Kuo92BUKPlWISPfGjSXCmK7vD12aBdibwY6q11gbkPxK4Weje2xCcCdEw/132","comment_is_top":false,"comment_ctime":1559645953,"is_pvip":false,"replies":[{"id":"36414","content":"如果能用排除法去解决问题，是一个比较好的方式。不过很多线上事故，在线下是无法重现的，这个方式就比较难派上用场了。","user_name":"作者回复","comment_id":100817,"uid":"1228576","ip_address":"","utype":1,"ctime":1559699220,"user_name_real":"刘超"}],"discussion_count":3,"race_medal":0,"score":"23034482433","product_id":100028001,"comment_content":"多少别人一天没有解决的问题，被我用一部分一部分注释代码，半小时解决了。","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452689,"discussion_content":"如果能用排除法去解决问题，是一个比较好的方式。不过很多线上事故，在线下是无法重现的，这个方式就比较难派上用场了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559699220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037282,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYAcOqrNNxmMuKsd6Dh69BzxiaXjJRh6IMnQlxOqBFiae1EMic32Wv6aFESWytliaL7uniaZ4DgNUwxg/132","nickname":"黄序","note":"","ucode":"C8C2749E2DE72B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533949,"discussion_content":"在高并发情况下，很多问题在线下很难复现，所以，你的这种方式比较适合单线程或者问题比较容易复现的场景，并不存在一招鲜吃遍天的可能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638026858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176812,"discussion_content":"可以一部分一部分的打log","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582041129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97878,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1237471,"ip_address":"","ucode":"5F6D82F118C6F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/df/6e6a4c6b.jpg","comment_is_top":false,"comment_ctime":1558809246,"is_pvip":false,"replies":[{"id":"34997","content":"你好kevin，可以将for(:)换成for(;;)试试看效果是不是不一样","user_name":"作者回复","comment_id":97878,"uid":"1228576","ip_address":"","utype":1,"ctime":1558834790,"user_name_real":"刘超"}],"discussion_count":2,"race_medal":0,"score":"23033645726","product_id":100028001,"comment_content":"使用for遍历LinkedList并不会使性能降低，编译器会编译成使用Iterator;<br>###java代码###<br>public void forLinkedList() {<br>        LinkedList&lt;String&gt; list = new LinkedList();<br><br>        for (String item : list) {<br>        }<br><br>        Iterator&lt;String&gt; iterable = list.iterator();<br>        while (iterable.hasNext()) {<br>            String item = iterable.next();<br>        }<br>    }<br><br>###javap -c xx.class的结果###<br> Code:<br>       0: new           #2                  &#47;&#47; class java&#47;util&#47;LinkedList<br>       3: dup<br>       4: invokespecial #3                  &#47;&#47; Method java&#47;util&#47;LinkedList.&quot;&lt;init&gt;&quot;:()V<br>       7: astore_1<br>       8: aload_1<br>       9: invokevirtual #4                  &#47;&#47; Method java&#47;util&#47;LinkedList.iterator:()Ljava&#47;util&#47;Iterator;<br>      12: astore_2<br>      13: aload_2<br>      14: invokeinterface #5,  1            &#47;&#47; InterfaceMethod java&#47;util&#47;Iterator.hasNext:()Z<br>      19: ifeq          35<br>      22: aload_2<br>      23: invokeinterface #6,  1            &#47;&#47; InterfaceMethod java&#47;util&#47;Iterator.next:()Ljava&#47;lang&#47;Object;<br>      28: checkcast     #7                  &#47;&#47; class java&#47;lang&#47;String<br>      31: astore_3<br>      32: goto          13<br>      35: aload_1<br>      36: invokevirtual #4                  &#47;&#47; Method java&#47;util&#47;LinkedList.iterator:()Ljava&#47;util&#47;Iterator;<br>      39: astore_2<br>      40: aload_2<br>      41: invokeinterface #5,  1            &#47;&#47; InterfaceMethod java&#47;util&#47;Iterator.hasNext:()Z<br>      46: ifeq          62<br>      49: aload_2<br>      50: invokeinterface #6,  1            &#47;&#47; InterfaceMethod java&#47;util&#47;Iterator.next:()Ljava&#47;lang&#47;Object;<br>      55: checkcast     #7                  &#47;&#47; class java&#47;lang&#47;String<br>      58: astore_3<br>      59: goto          40<br>      62: return<br>","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451458,"discussion_content":"你好kevin，可以将for(:)换成for(;;)试试看效果是不是不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558834790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255574,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqgVXa8DyW0YsrdYtPNMOdGH6hfdwfjwyBPRyoc9yuS4Ml18l0kApOoOKwYkF6NlDPYpX1bVEWomw/132","nickname":"最摇摆的鱼","note":"","ucode":"DA19F4C4224719","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536384,"discussion_content":"for(:) 就是iterator","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638775701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97267,"user_name":"Mr.J","can_delete":false,"product_type":"c1","uid":1267172,"ip_address":"","ucode":"372D8C614F6C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/e4/7061abd5.jpg","comment_is_top":false,"comment_ctime":1558623737,"is_pvip":false,"replies":[{"id":"34880","content":"这位同学，你理解的很好。微基准测试我在这里纠正一点，包括进入抢购页面、提交订单、支付调起，再细一些包括排队等待功能、库存扣减的分布式锁功能、幂等性校验等。","user_name":"作者回复","comment_id":97267,"uid":"1228576","ip_address":"","utype":1,"ctime":1558699788,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"23033460217","product_id":100028001,"comment_content":"老师您好，思考题中，新产品中的抢购活动，针对抢购的商品数量、支付等内容进行微基性能测试，对于商品数量、支付这些比较关键的代码，多线程高并发下商品数量的读写，数据同步，支付的安全等需要精准的测试，而宏基准性能测试更是偏向于整体的业务逻辑，针对整个新产品的整体功能，例如秒杀活动的从开始抢购到成功支付，或者开始抢购到未抢购到商品等流程进行宏基准性能测试，我这样理解对嘛老师","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451202,"discussion_content":"这位同学，你理解的很好。微基准测试我在这里纠正一点，包括进入抢购页面、提交订单、支付调起，再细一些包括排队等待功能、库存扣减的分布式锁功能、幂等性校验等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558699788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97105,"user_name":"ANYI","can_delete":false,"product_type":"c1","uid":1084773,"ip_address":"","ucode":"B010B0FB10E0C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/65/633a7478.jpg","comment_is_top":false,"comment_ctime":1558589828,"is_pvip":false,"replies":[{"id":"34745","content":"你好 ANYI，建议可以先对一个一个小模块进行性能测试和调优。先对一些代码性问题进行优化，例如之前有同学提到的，合并多次请求，减少多次数据库操作，优化sql（优化join以及索引），优化Java基础代码（集合的合理使用，序列化的优化）等等，先完成这些基础性优化。<br><br>在这基础之上，我们再去针对一些业务进行优化，例如业务存在高耦合，我们可以解耦业务，使用一些好的设计方法。通过这种方式逐步了解整个系统的业务以及架构。<br><br>代码层级优化之后，我们可以考虑调优JVM、容器以及操作系统，我相信代码层的优化可以满足大部分的性能优化需求，其他的性能调优则是满足一些特殊的场景下的高性能需求。<br><br><br>","user_name":"作者回复","comment_id":97105,"uid":"1228576","ip_address":"","utype":1,"ctime":1558616141,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"23033426308","product_id":100028001,"comment_content":"hi，老师，入职新公司，直接派去客户现场调优，有一份压测报工，知道是哪些场景性能有问题，但对于业务不熟，只有一堆代码；该如何快速进入；","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451138,"discussion_content":"你好 ANYI，建议可以先对一个一个小模块进行性能测试和调优。先对一些代码性问题进行优化，例如之前有同学提到的，合并多次请求，减少多次数据库操作，优化sql（优化join以及索引），优化Java基础代码（集合的合理使用，序列化的优化）等等，先完成这些基础性优化。\n\n在这基础之上，我们再去针对一些业务进行优化，例如业务存在高耦合，我们可以解耦业务，使用一些好的设计方法。通过这种方式逐步了解整个系统的业务以及架构。\n\n代码层级优化之后，我们可以考虑调优JVM、容器以及操作系统，我相信代码层的优化可以满足大部分的性能优化需求，其他的性能调优则是满足一些特殊的场景下的高性能需求。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558616141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97346,"user_name":"zhangtnty","can_delete":false,"product_type":"c1","uid":1180553,"ip_address":"","ucode":"3C9A14BD7CF432","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/89/e1621a01.jpg","comment_is_top":false,"comment_ctime":1558659303,"is_pvip":false,"replies":[{"id":"34843","content":"同学你好，你理解的很到位，兜底就是保命，但高于保命，我们不仅仅需要保证系统不挂掉，还要保证流量范围内的请求是正常的。微基准性能测试可以理解为对某块代码进行测试，包括对不同实现方式的性能测试比较。<br><br>后面我会在实战中讲到限流、降级的实现和使用，由于这个属于优化的辅助功能，不做具体实现方式的讲解。如果对相关知识感兴趣，可以留言保持沟通。","user_name":"作者回复","comment_id":97346,"uid":"1228576","ip_address":"","utype":1,"ctime":1558671622,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"18738528487","product_id":100028001,"comment_content":"老师好, 我理解文中题目中抢购的不同实现方式是微观调优，综合考虑上线后流量峰值等可为宏观调优。<br>老师在文中提到的降级和限流是日常关键的一环，老师把它说成兜底，我常理解为&quot;保命&quot; 。也希望老师对于降级和限流可以展开分享一篇。各种调优最终都会有极限。","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451240,"discussion_content":"同学你好，你理解的很到位，兜底就是保命，但高于保命，我们不仅仅需要保证系统不挂掉，还要保证流量范围内的请求是正常的。微基准性能测试可以理解为对某块代码进行测试，包括对不同实现方式的性能测试比较。\n\n后面我会在实战中讲到限流、降级的实现和使用，由于这个属于优化的辅助功能，不做具体实现方式的讲解。如果对相关知识感兴趣，可以留言保持沟通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558671622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97212,"user_name":"CharlesCai","can_delete":false,"product_type":"c1","uid":1319824,"ip_address":"","ucode":"582F067ED7EB4F","user_header":"https://static001.geekbang.org/account/avatar/00/14/23/90/4c63a7d9.jpg","comment_is_top":false,"comment_ctime":1558612045,"is_pvip":false,"replies":[{"id":"34768","content":"接收成功！谢谢你的建议。","user_name":"编辑回复","comment_id":97212,"uid":"1356014","ip_address":"","utype":2,"ctime":1558628770,"user_name_real":"王冬青"}],"discussion_count":1,"race_medal":0,"score":"18738481229","product_id":100028001,"comment_content":"期待作者的新内容！朗读者的声音好听又专业！提一个小功能，网页版能不能实现一下标记或做笔记的功能。","like_count":4,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451181,"discussion_content":"接收成功！谢谢你的建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558628770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112916,"user_name":"zengxiangcai","can_delete":false,"product_type":"c1","uid":1363685,"ip_address":"","ucode":"7D0C1F79F1AD4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/e5/86695701.jpg","comment_is_top":false,"comment_ctime":1562844027,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14447745915","product_id":100028001,"comment_content":"老师，你好，关于测试我有几个问题<br>1、一般测试环境服务器个线上服务器配置等可能不大一样，想测试环境搭建和线上一个配置一样代价也有点高，这种情况一般该怎么做呢？<br><br>2、测试的数据测试环境个线上可能量级不大一样，这样也必然影响测试结果的吧？<br><br>3、像jmeter这种在一台机器模拟多线程去访问服务进行测试，会不会测试机无法模拟那么多线程影响测试效果","like_count":3,"discussions":[{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64676,"discussion_content":"第三条完全有可能。前两条也是开发会遇到的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574952556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98072,"user_name":"Eddie","can_delete":false,"product_type":"c1","uid":1219354,"ip_address":"","ucode":"01EB2A6CCEE697","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/1a/b979aa71.jpg","comment_is_top":false,"comment_ctime":1558889894,"is_pvip":false,"replies":[{"id":"35125","content":"你好 Eddie，我理解的是，在运行时创建的字符串对象都会在堆中创建，且不会在常量池中创建了，常量池中只是在编译加载类时构造，当然在调用intern方法时也会在常量池中创建对象。<br><br>如果传入的是int char等类型的，只会在虚拟机栈中存储，而对象类型的，需要在堆中创建，栈中存储的是引用。<br><br>第二个问题，常量池在1.6时很容易发生内存溢出异常，移到堆中之后，常量池大小增加了，也能更好的使用常量池来优化字符串对象。","user_name":"作者回复","comment_id":98072,"uid":"1228576","ip_address":"","utype":1,"ctime":1558924839,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"10148824486","product_id":100028001,"comment_content":"老师您好，提两个小问题<br>1，在对象中，对象的属性在controller层接收，传入对象中，或构造方法传入，这时候字符串是在普通堆区还是在堆区字符串常量池<br>2，还有1.8之后常量池位置从方法区转移到堆String常量池了，这样做的好处是什么呢","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451546,"discussion_content":"你好 Eddie，我理解的是，在运行时创建的字符串对象都会在堆中创建，且不会在常量池中创建了，常量池中只是在编译加载类时构造，当然在调用intern方法时也会在常量池中创建对象。\n\n如果传入的是int char等类型的，只会在虚拟机栈中存储，而对象类型的，需要在堆中创建，栈中存储的是引用。\n\n第二个问题，常量池在1.6时很容易发生内存溢出异常，移到堆中之后，常量池大小增加了，也能更好的使用常量池来优化字符串对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558924839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97171,"user_name":"进步慢是一种罪","can_delete":false,"product_type":"c1","uid":1031419,"ip_address":"","ucode":"5AD7F0172C64C1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/fb/dccdeb2b.jpg","comment_is_top":false,"comment_ctime":1558601800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148536392","product_id":100028001,"comment_content":"抢购活动（秒杀）作为微基准测试，商品详情页浏览，支付，支付后的通知等做宏基准测试。","like_count":2},{"had_liked":false,"id":226486,"user_name":"wkq2786130","can_delete":false,"product_type":"c1","uid":1256821,"ip_address":"","ucode":"0F3A9DF9928C67","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/75/e7c29de4.jpg","comment_is_top":false,"comment_ctime":1592119882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887087178","product_id":100028001,"comment_content":"   和电商黄金流程相关的都要做 宏基准测试。比如 登陆服务、用户服务、首页服务、搜索服务、商品详情页服务、购物车服务、优惠券服务、订单服务、支付服务、地址服务 以及 反爬服务 风控服务 短信服务 <br>   秒杀 团购 优惠券 验证码 短信 的要做 微基准性能测试 ","like_count":1},{"had_liked":false,"id":116327,"user_name":"博弈","can_delete":false,"product_type":"c1","uid":1433344,"ip_address":"","ucode":"B1A69837E41972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EcYNib1bnDf5dz6JcrE8AoyZYMdqic2VNmbBtCcVZTO9EoDZZxqlQDEqQKo6klCCmklOtN9m0dTd2AOXqSneJYLw/132","comment_is_top":false,"comment_ctime":1563841647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858808943","product_id":100028001,"comment_content":"期待老师更精彩的表演","like_count":1},{"had_liked":false,"id":115065,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1135159,"ip_address":"","ucode":"CD8B84A57A6A0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/37/13b4c8aa.jpg","comment_is_top":false,"comment_ctime":1563464844,"is_pvip":false,"replies":[{"id":"42358","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1563760734,"ip_address":"","comment_id":115065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858432140","product_id":100028001,"comment_content":"微基准测试：抢购接口，新产品主页接口，系统现有接口。维基准测试保证每个接口的功能完备性，接口性能符合要求。<br>宏基准测试：抢购接口，涉及促销类活动，抢购接口设计较多关联接口，比如账号，账号，折扣接口，业务相关联方较多需要综合测试。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458952,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563760734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352459,"user_name":"Geek_1b5ccb","can_delete":false,"product_type":"c1","uid":2987469,"ip_address":"","ucode":"B7DED135291AA4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BdJf1ofrOMt1C7UmUGfVibfR9BXLz4y3icc6MUanfLd0uMQ2SV7QnJtRuMolfN5c7HdLrDPrLhJYeSnbsVFQM0icQ/132","comment_is_top":false,"comment_ctime":1658710311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658710311","product_id":100028001,"comment_content":"给课程点赞","like_count":0},{"had_liked":false,"id":323622,"user_name":"黄序","can_delete":false,"product_type":"c1","uid":2037282,"ip_address":"","ucode":"C8C2749E2DE72B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYAcOqrNNxmMuKsd6Dh69BzxiaXjJRh6IMnQlxOqBFiae1EMic32Wv6aFESWytliaL7uniaZ4DgNUwxg/132","comment_is_top":false,"comment_ctime":1638027082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638027082","product_id":100028001,"comment_content":"根据自己的经验，如果是简单或者容易复现的问题，可能比较简单的方式就是把线上出现问题的场景在线下进行模拟复现，但是这个过程非常考验一位工程师的知识广度和深度，一方面是如何快速定位问题进行复现；另一方面是如何模拟线上的场景。如果是高并发场景下才能出现的问题，这种问题就需要借助各种工具和现有的信息进行逐步分析，大胆猜测小心求证来不断的排查法以及缩小验证范围。","like_count":0},{"had_liked":false,"id":284182,"user_name":"郝希军","can_delete":false,"product_type":"c1","uid":2390479,"ip_address":"","ucode":"38CCE6B9BAF529","user_header":"https://static001.geekbang.org/account/avatar/00/24/79/cf/211f0208.jpg","comment_is_top":false,"comment_ctime":1616116408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616116408","product_id":100028001,"comment_content":"电商场景，<br>微基准测试首页接口、搜索引擎或搜索接口、页面详情接口、购物车模块、下单接口、支付接口<br>宏基准测试单实例场景TPS、QPS、io平均值、最大最小值、cpu使用率、内存使用率、网络io情况，再做集群压力测试，检测系统是否满足预估流量要求，进一步探底检测系统极限","like_count":0},{"had_liked":false,"id":282651,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1615350977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615350977","product_id":100028001,"comment_content":"来了<br>听完了<br>项目也上了一个版本了","like_count":0},{"had_liked":false,"id":267659,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1667145,"ip_address":"","ucode":"F2D758A748DAA7","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/49/f3d5e455.jpg","comment_is_top":false,"comment_ctime":1607862668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607862668","product_id":100028001,"comment_content":"可以这样理解吗，微基准测试就是单接口负载测试，宏基准测试是模拟用户操作一系列接口做的混合测试？","like_count":0},{"had_liked":false,"id":243355,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1598071149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598071149","product_id":100028001,"comment_content":"老师 问一下您说的宏基准测试得到的指标 最小吞吐量 这个是怎么衡量的","like_count":0},{"had_liked":false,"id":188592,"user_name":".","can_delete":false,"product_type":"c1","uid":1083502,"ip_address":"","ucode":"83F583994F4F72","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/6e/3bd860d3.jpg","comment_is_top":false,"comment_ctime":1584372699,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584372699","product_id":100028001,"comment_content":"从业务调优到编程调优，再到系统调优","like_count":0},{"had_liked":false,"id":179623,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1582040771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582040771","product_id":100028001,"comment_content":"思考题：<br>对于新主推产品上线，预期订单会增加，产品查询会增加，围绕订单和产品的相关服务都最好做下微基准性能测试，如订单生成&#47;取消接口、支付接口、库存查询&#47;修改接口、产品查询接口(缓存)等。当然，最好是先做宏基准测试，出现性能问题了再调优，毕竟一个完整的服务链才能完成产品订购，而每个接口都ok不代表集成后的整体也ok。<br>关于秒杀，高并发量是预期，而大量请求都是放到消息队列中的，故应着重测试消息中间件接口的性能。其次，网关要受理大量请求，故网关接口也要做性能测试，设置限流阈值，避免冲击消息中间件。而秒杀的数量一般比较少，不会有大量的订单预期，故只需要订单服务、支付服务等保持稳定和正常性能即可。","like_count":0},{"had_liked":false,"id":178065,"user_name":"Michael 🛡YZY","can_delete":false,"product_type":"c1","uid":1186115,"ip_address":"","ucode":"F1D2BF8489A7D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/19/43/226ca347.jpg","comment_is_top":false,"comment_ctime":1581581408,"is_pvip":false,"replies":[{"id":"70525","content":"好的，由于这里贴不上，后面让主编转发给你","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1582722448,"ip_address":"","comment_id":178065,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1581581408","product_id":100028001,"comment_content":"老师可否给一个大致全面的性能报告模板作为工作中的参考？这个Comment可能有点晚， 在我二刷的时候。 多谢。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483652,"discussion_content":"好的，由于这里贴不上，后面让主编转发给你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582722448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570002,"discussion_content":"老师我也想要一份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651633476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232984,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/58/ac40120f.jpg","nickname":"biubiubiu","note":"","ucode":"3310E95533D22B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280666,"discussion_content":"+1，老师我也想要一份性能报告模版","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591589216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228452,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/a4/32866c50.jpg","nickname":"Avril","note":"","ucode":"E6E60A26B72076","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259771,"discussion_content":"比较晚，可以也给发一份吗？想了解实际系统的性能报告需要包括哪些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588816131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170744,"user_name":"voro","can_delete":false,"product_type":"c1","uid":1203377,"ip_address":"","ucode":"A1544F2B6B60F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/5c/b1/d5897a1f.jpg","comment_is_top":false,"comment_ctime":1578702989,"is_pvip":false,"replies":[{"id":"67204","content":"可以学习docker和k8s的相关专栏和书籍","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579520989,"ip_address":"","comment_id":170744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578702989","product_id":100028001,"comment_content":"老师，请问第2节说的docker的横向智能扩容与提前扩容，哪里可以学习这个方案知识呢？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481093,"discussion_content":"可以学习docker和k8s的相关专栏和书籍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579520989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148903,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1573106877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573106877","product_id":100028001,"comment_content":"性能调优三步走：测试、分析、调优","like_count":0},{"had_liked":false,"id":138959,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1570518300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570518300","product_id":100028001,"comment_content":"2019.10.8 打卡","like_count":0},{"had_liked":false,"id":136722,"user_name":"陈泽昊","can_delete":false,"product_type":"c1","uid":1301427,"ip_address":"","ucode":"D6C0FE0D7D6A64","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/b3/13b54391.jpg","comment_is_top":false,"comment_ctime":1569497953,"is_pvip":false,"replies":[{"id":"53061","content":"都会有方法去模拟真实的场景去做压力测试的，如果是视频流，自己写工具上传或下载视频，一样可以实现系统性能测试。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1569979842,"ip_address":"","comment_id":136722,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569497953","product_id":100028001,"comment_content":"老师，我想问一个问题，如果是那种没有办法模拟等我测试，我该如何进行压测呢？比如 直播的视频，还有一些视频的录制 ，这个要保证真实的视频流是存在的才可以，针对这个问题如何性能测试呢？望回复，谢谢","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468773,"discussion_content":"都会有方法去模拟真实的场景去做压力测试的，如果是视频流，自己写工具上传或下载视频，一样可以实现系统性能测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569979842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131634,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567828366,"is_pvip":false,"replies":[{"id":"50383","content":"对的，需要有调优的目标","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567944681,"ip_address":"","comment_id":131634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567828366","product_id":100028001,"comment_content":"如何制定性能调优策略？<br>读完感觉和正文不是很切合，我的理解制定性能调优策略，是假设已经发现了性能问题，针对这个问题可能有若干种应对策略，我们需要权衡一下那个最佳怎么实施。<br>正文给我的信息是，优化性能大概有几种思路，如果把一次服务的过程比喻为两个水管，一个水管发送请求的信息，一个水管回流响应的信息，在一发一收之间感觉慢了，清楚的知道水管有几节？每一节有多粗？水流的慢就是那根最细的水管导致的也可能有若干个细的，定位出最细的那个是最关键的，如果能定位到，处理解决应该比较容易的，感觉老师讲的就是从水管的一节一节的优化，每根水管如果细啦😄该怎么扩大点。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466550,"discussion_content":"对的，需要有调优的目标","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567944681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107126,"user_name":"风书声","can_delete":false,"product_type":"c1","uid":1519661,"ip_address":"","ucode":"03019B9E9064DF","user_header":"https://static001.geekbang.org/account/avatar/00/17/30/2d/2a25c053.jpg","comment_is_top":false,"comment_ctime":1561463535,"is_pvip":false,"replies":[{"id":"38852","content":"用户并发数的大小反应了系统的并发能力，这个并发数也是一个指标。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1561519746,"ip_address":"","comment_id":107126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561463535","product_id":100028001,"comment_content":"老师，你好！<br>压测时，关注的主要指标是响应时间和系统吞吐量，那么用户并发数的大小反应的是什么呢？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455377,"discussion_content":"用户并发数的大小反应了系统的并发能力，这个并发数也是一个指标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561519746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100362,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1559537294,"is_pvip":false,"replies":[{"id":"36212","content":"是的，但这种打印日志的字符串一般很少被长时间引用，打完日志对象很快会被回收。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559569860,"ip_address":"","comment_id":100362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559537294","product_id":100028001,"comment_content":"请教大佬个问题。函数内部打印日志，日志的文本为中文长篇描述。是不是每次调用该函数都会有new这个日志文本的开销。毕竟从字节码来看，方法内部的字符串不会被纳入常量池。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452517,"discussion_content":"是的，但这种打印日志的字符串一般很少被长时间引用，打完日志对象很快会被回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559569860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99936,"user_name":"Maxwell","can_delete":false,"product_type":"c1","uid":1211320,"ip_address":"","ucode":"D28CC11C99F0CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/b8/6f47ba1b.jpg","comment_is_top":false,"comment_ctime":1559361321,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1559361321","product_id":100028001,"comment_content":"老师，最近段时间经常报端口被大量CLOSE_WAIT，重启后过半天又重现，以前未出现过，一般有哪些排查方式","like_count":0,"discussions":[{"author":{"id":1615818,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a7/ca/f0c90475.jpg","nickname":"争分夺秒","note":"","ucode":"A29E3BC69F196F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286617,"discussion_content":"我就解决过window上的tcp耗尽，也是大量的close_wait.修改了window 的注册编辑表，修改tcp 的连接参数，最多存活多少秒。就没报过tcp耗尽了。不过当时我负责的内网通讯集群也就只有10台。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593246423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1615818,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a7/ca/f0c90475.jpg","nickname":"争分夺秒","note":"","ucode":"A29E3BC69F196F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286616,"discussion_content":"排查方式，有tcpDump，你百度那些tcp端口占用的工具，window 有一款，linux 就不记得了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593246269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1615818,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a7/ca/f0c90475.jpg","nickname":"争分夺秒","note":"","ucode":"A29E3BC69F196F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286615,"discussion_content":"Close_Wait等待关闭，其实就是已经通讯玩了，但是还在等在有人关他，不关他他还是占用着tcp端口的。所以首先检查自己的Http工具是否close, redis 是否close，netty是否close。总之存在网络传输的工具，你自己写的就先检查代码是否资源没有释放.然后除此之外还有tcp 长连接，tcp连接生命时间这些都是可以在linux ,window 端进行调优的，根据你的需求，设定tcp 在多久后自动释放。如果你是tcp长连接的业务需求，那你就要注意是否存在资源泄露，建立了大量tcp长连接，导致tcp 来不及释放全部处在占用状态","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593246123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99153,"user_name":"Geek_ca1254","can_delete":false,"product_type":"c1","uid":1557712,"ip_address":"","ucode":"74BE6D386D4F7B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dtialaRnvDQBJb8B73WtDOTzPUzzv1QziczIkTjZ9eib4fFaae5y2NySMvPDMicgwAm5oTmlFH46vWboXGH7HVo0ibQ/132","comment_is_top":false,"comment_ctime":1559172379,"is_pvip":false,"replies":[{"id":"35740","content":"你好，这个很难去衡量这个比例，内存可以，但cpu的性能未必是正比。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559226863,"ip_address":"","comment_id":99153,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559172379","product_id":100028001,"comment_content":"有一个问题，老司机，现在大部分的应该是没法保证测试环境的机器和线上环境的机器配置是一致的。从而测试做出的性能测试报告其实是不准确的。是不是可以有一个什么内存与性能存在一个平衡点的比例公式去衡量？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451993,"discussion_content":"你好，这个很难去衡量这个比例，内存可以，但cpu的性能未必是正比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559226863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072350,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5c/de/16695891.jpg","nickname":"小太阳","note":"","ucode":"84FF032FE78B11","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66901,"discussion_content":"这个也是我想问的问题，不知道有没有通用的做法？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575115167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98857,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1559107491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559107491","product_id":100028001,"comment_content":"javap -c 的输出如下:<br><br>Compiled from &quot;HelloWorld.java&quot;<br>public class HelloWorld {<br>  public HelloWorld();<br>    Code:<br>       0: aload_0<br>       1: invokespecial #1                  &#47;&#47; Method java&#47;lang&#47;Object.&quot;&lt;init&gt;&quot;:()V<br>       4: return<br><br>  public static void main(java.lang.String[]);<br>    Code:<br>       0: new           #2                  &#47;&#47; class java&#47;util&#47;LinkedList<br>       3: dup<br>       4: invokespecial #3                  &#47;&#47; Method java&#47;util&#47;LinkedList.&quot;&lt;init&gt;&quot;:()V<br>       7: astore_1<br>       8: aload_1<br>       &#47;&#47; ... 省略add方法的字节码<br>      85: iconst_0<br>      86: istore_2<br>      87: iload_2<br>      88: aload_1<br>      89: invokevirtual #16                 &#47;&#47; Method java&#47;util&#47;LinkedList.size:()I<br>      92: if_icmpge     117<br>      95: aload_1<br>      96: iload_2<br>      97: invokevirtual #17                 &#47;&#47; Method java&#47;util&#47;LinkedList.get:(I)Ljava&#47;lang&#47;Object;<br>     100: checkcast     #18                 &#47;&#47; class java&#47;lang&#47;String<br>     103: astore_3<br>     104: getstatic     #19                 &#47;&#47; Field java&#47;lang&#47;System.out:Ljava&#47;io&#47;PrintStream;<br>     107: aload_3<br>     108: invokevirtual #20                 &#47;&#47; Method java&#47;io&#47;PrintStream.println:(Ljava&#47;lang&#47;String;)V<br>     111: iinc          2, 1<br>     114: goto          87<br>     117: getstatic     #19                 &#47;&#47; Field java&#47;lang&#47;System.out:Ljava&#47;io&#47;PrintStream;<br>     120: ldc           #21                 &#47;&#47; String ok<br>     122: invokevirtual #20                 &#47;&#47; Method java&#47;io&#47;PrintStream.println:(Ljava&#47;lang&#47;String;)V<br>     125: return<br>}","like_count":0},{"had_liked":false,"id":98856,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1559107440,"is_pvip":false,"replies":[{"id":"35564","content":"你好，明天的第五讲中，会详细讲到，请留意一下","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559135927,"ip_address":"","comment_id":98856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559107440","product_id":100028001,"comment_content":"老师你好，我看了kevin的例子，自己也去写了一下，没明白使用for(;;)循环是怎么每次都遍历了的呢？<br><br>代码如下:<br>import java.util.*;<br>public class HelloWorld {<br>  public static void main(String[] args) {<br>  \t\tLinkedList&lt;String&gt; list = new LinkedList();<br>  \t\tlist.add(&quot;1&quot;);<br>  \t\tlist.add(&quot;2&quot;);<br>  \t\tlist.add(&quot;3&quot;);<br>  \t\tlist.add(&quot;4&quot;);<br>  \t\tlist.add(&quot;5&quot;);<br>  \t\tlist.add(&quot;6&quot;);<br>  \t\tlist.add(&quot;7&quot;);<br>  \t\tlist.add(&quot;8&quot;);<br>  \t\tlist.add(&quot;9&quot;);<br>  \t\tlist.add(&quot;10&quot;);<br>  \t\tlist.add(&quot;11&quot;);<br>  \t\tfor (int i=0;i&lt;list.size();i++ ) {<br>  \t\t\tString item=list.get(i);<br>  \t\t\tSystem.out.println(item);<br>  \t\t}<br><br>        <br>        System.out.println(&quot;ok&quot;);<br>  }<br>}<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451866,"discussion_content":"你好，明天的第五讲中，会详细讲到，请留意一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559135927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98340,"user_name":"胖妞","can_delete":false,"product_type":"c1","uid":1543769,"ip_address":"","ucode":"AC82AF2B912575","user_header":"","comment_is_top":false,"comment_ctime":1558962678,"is_pvip":false,"replies":[{"id":"35194","content":"传统ERP项目可能对系统的性能追求没有这么极致，但同样需要做好性能调优。这类项目我觉得有一个共同的性质，那就是业务复杂度非常高，操作sql的复杂度也比互联网对C端的复杂度高。所以传统ERP系统需要重点测试复杂的业务场景以及数据库操作。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559001326,"ip_address":"","comment_id":98340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558962678","product_id":100028001,"comment_content":"可能我做的是传统的ERP项目！对于你们这种高并发的情况出现的不多！不知道老师能否给这种传统行业一些测试方面的推荐！？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451649,"discussion_content":"传统ERP项目可能对系统的性能追求没有这么极致，但同样需要做好性能调优。这类项目我觉得有一个共同的性质，那就是业务复杂度非常高，操作sql的复杂度也比互联网对C端的复杂度高。所以传统ERP系统需要重点测试复杂的业务场景以及数据库操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559001326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97807,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1558781754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558781754","product_id":100028001,"comment_content":"可以对商品涉及到的服务进行宏基准测试，比如用户服务，订单服务，商品服务，支付服务等<br>对抢购涉及的接口进行微基准测试","like_count":0},{"had_liked":false,"id":97633,"user_name":"后端学长","can_delete":false,"product_type":"c1","uid":1178011,"ip_address":"","ucode":"7E82F2B5930CD5","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/9b/dc074a7e.jpg","comment_is_top":false,"comment_ctime":1558721631,"is_pvip":false,"replies":[{"id":"34905","content":"这位同学你好，在这讲中，主要是讲解调优的大方向，后面会讲到具体的监控和调优。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558744274,"ip_address":"","comment_id":97633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558721631","product_id":100028001,"comment_content":"老师您好 在讲解性能优化的时候 是不是随便讲一下具体用什么软件监控 如何优化会更好一点？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451352,"discussion_content":"这位同学你好，在这讲中，主要是讲解调优的大方向，后面会讲到具体的监控和调优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558744274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97336,"user_name":"一路看风景","can_delete":false,"product_type":"c1","uid":1044061,"ip_address":"","ucode":"70F4D74720A0F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/5d/c1105c12.jpg","comment_is_top":false,"comment_ctime":1558657636,"is_pvip":false,"replies":[{"id":"34815","content":"你好，由于性能测试需要结合具体的业务场景以及需求来制定，所以不像安全漏洞检查多样化，而且很多安全漏洞检查固定可遵循，可以标准化一套库。所以性能测试方法是可遵循的，不需要标准库。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558663399,"ip_address":"","comment_id":97336,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558657636","product_id":100028001,"comment_content":"老师，您的，请问性能测试领域有类似于安全领域漏洞库那样的性能问题库么？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451233,"discussion_content":"你好，由于性能测试需要结合具体的业务场景以及需求来制定，所以不像安全漏洞检查多样化，而且很多安全漏洞检查固定可遵循，可以标准化一套库。所以性能测试方法是可遵循的，不需要标准库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558663399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97294,"user_name":"Fever","can_delete":false,"product_type":"c1","uid":1263997,"ip_address":"","ucode":"2595F13BC3ECAB","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/7d/7b9fd831.jpg","comment_is_top":false,"comment_ctime":1558632845,"is_pvip":false,"replies":[{"id":"34882","content":"你好 fever，你说到的这几点很重要，很多公司利用redis的队列作为抢购的排队队列，同时也有一份商品的库存信息也存在redis中，所以redis的性能很重要。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558700294,"ip_address":"","comment_id":97294,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558632845","product_id":100028001,"comment_content":"因为是抢购的功能，所以会有在短时间内并发特别高的情况。因此微基准测试要对redis吞吐量、应用服务器进行压力测试。宏观基准测试要对整个项目以生产环境的标准，模拟高并发情况进行压测，防止JVM或者操作系统出现瓶颈。出现瓶颈要对网络进行流量削峰或者降级等策略。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451216,"discussion_content":"你好 fever，你说到的这几点很重要，很多公司利用redis的队列作为抢购的排队队列，同时也有一份商品的库存信息也存在redis中，所以redis的性能很重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558700294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97075,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1558581254,"is_pvip":false,"replies":[{"id":"34750","content":"小辉辉 很高兴再次看的你的提问，接下来的文章中，会讲到如何使用性能测试工具进行常规的性能压测以及如何分析性能报告，我们掌握了这两点，我们再分微基准和宏基准进行测试就不那么难了。我也会在一些文章中讲到一些具体的微基准测试案例和宏基准测试案例，把这些放在一些章节中，结合场景与具体调优的方式来讲解，效果会更佳。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558616852,"ip_address":"","comment_id":97075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558581254","product_id":100028001,"comment_content":"感觉做性能测试才是难点，老师后面有这部分会有介绍吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451126,"discussion_content":"小辉辉 很高兴再次看的你的提问，接下来的文章中，会讲到如何使用性能测试工具进行常规的性能压测以及如何分析性能报告，我们掌握了这两点，我们再分微基准和宏基准进行测试就不那么难了。我也会在一些文章中讲到一些具体的微基准测试案例和宏基准测试案例，把这些放在一些章节中，结合场景与具体调优的方式来讲解，效果会更佳。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558616852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}