{"id":120949,"title":"14 | 内存管理：如何避免内存溢出和频繁的垃圾回收？","content":"<p>你好，我是李玥。今天，我们来聊一聊内存管理的问题。</p><p>不知道你有没有发现，在高并发、高吞吐量的极限情况下，简单的事情就会变得没有那么简单了。一个业务逻辑非常简单的微服务，日常情况下都能稳定运行，为什么一到大促就卡死甚至进程挂掉？再比如，一个做数据汇总的应用，按照小时、天这样的粒度进行数据汇总都没问题，到年底需要汇总全年数据的时候，没等数据汇总出来，程序就死掉了。</p><p>之所以出现这些情况，大部分的原因是，程序在设计的时候，没有针对高并发高吞吐量的情况做好内存管理。要想解决这类问题，首先你要了解内存管理机制。</p><p>现代的编程语言，像Java、Go语言等，采用的都是自动内存管理机制。我们在编写代码的时候，不需要显式去申请和释放内存。当我们创建一个新对象的时候，系统会自动分配一块内存用于存放新创建的对象，对象使用完毕后，系统会自动择机收回这块内存，完全不需要开发者干预。</p><p>对于开发者来说，这种自动内存管理的机制，显然是非常方便的，不仅极大降低了开发难度，提升了开发效率，更重要的是，它完美地解决了内存泄漏的问题。是不是很厉害？当年，Java语言能够迅速普及和流行，超越C和C++，自动内存管理机制是非常重要的一个因素。但是它也会带来一些问题，什么问题呢？这就要从它的实现原理中来分析。</p><!-- [[[read_end]]] --><h2>自动内存管理机制的实现原理</h2><p>做内存管理，主要需要考虑申请内存和内存回收这两个部分。</p><p>申请内存的逻辑非常简单：</p><ol>\n<li>计算要创建对象所需要占用的内存大小；</li>\n<li>在内存中找一块儿连续并且是空闲的内存空间，标记为已占用；</li>\n<li>把申请的内存地址绑定到对象的引用上，这时候对象就可以使用了。</li>\n</ol><p>内存回收的过程就非常复杂了，总体上，内存回收需要做这样两件事儿：先是要找出所有可以回收的对象，将对应的内存标记为空闲，然后，还需要整理内存碎片。</p><p>如何找出可以回收的对象呢？现代的GC算法大多采用的是“标记-清除”算法或是它的变种算法，这种算法分为标记和清除两个阶段：</p><ul>\n<li>标记阶段：从GC Root开始，你可以简单地把GC Root理解为程序入口的那个对象，标记所有可达的对象，因为程序中所有在用的对象一定都会被这个GC Root对象直接或者间接引用。</li>\n<li>清除阶段：遍历所有对象，找出所有没有标记的对象。这些没有标记的对象都是可以被回收的，清除这些对象，释放对应的内存即可。</li>\n</ul><p>这个算法有一个最大问题就是，在执行标记和清除过程中，必须把进程暂停，否则计算的结果就是不准确的。这也就是为什么发生垃圾回收的时候，我们的程序会卡死的原因。后续产生了许多变种的算法，这些算法更加复杂，可以减少一些进程暂停的时间，但都不能完全避免暂停进程。</p><p>完成对象回收后，还需要整理内存碎片。什么是内存碎片呢？我举个例子你就明白了。</p><p>假设，我们的内存只有10个字节，一开始这10个字节都是空闲的。我们初始化了5个Short类型的对象，每个Short占2个字节，正好占满10个字节的内存空间。程序运行一段时间后，其中的2个Short对象用完并被回收了。这时候，如果我需要创建一个占4个字节的Int对象，是否可以创建成功呢？</p><p>答案是，不一定。我们刚刚回收了2个Short，正好是4个字节，但是，创建一个Int对象需要连续4个字节的内存空间，2段2个字节的内存，并不一定就等于一段连续的4字节内存。如果这两段2字节的空闲内存不连续，我们就无法创建Int对象，这就是内存碎片问题。</p><p>所以，<strong>垃圾回收完成后，还需要进行内存碎片整理，将不连续的空闲内存移动到一起，以便空出足够的连续内存空间供后续使用。</strong>和垃圾回收算法一样，内存碎片整理也有很多非常复杂的实现方法，但由于整理过程中需要移动内存中的数据，也都不可避免地需要暂停进程。</p><p>虽然自动内存管理机制有效地解决了内存泄漏问题，带来的代价是执行垃圾回收时会暂停进程，如果暂停的时间过长，程序看起来就像“卡死了”一样。</p><h2>为什么在高并发下程序会卡死？</h2><p>在理解了自动内存管理的基本原理后，我再带你分析一下，为什么在高并发场景下，这种自动内存管理的机制会更容易触发进程暂停。</p><p>一般来说，我们的微服务在收到一个请求后，执行一段业务逻辑，然后返回响应。这个过程中，会创建一些对象，比如说请求对象、响应对象和处理中间业务逻辑中需要使用的一些对象等等。随着这个请求响应的处理流程结束，我们创建的这些对象也就都没有用了，它们将会在下一次垃圾回收过程中被释放。</p><p>你需要注意的是，直到下一次垃圾回收之前，这些已经没有用的对象会一直占用内存。</p><p>那么，虚拟机是如何决定什么时候来执行垃圾回收呢？这里面的策略非常复杂，也有很多不同的实现，我们不展开来讲，但是无论是什么策略，如果内存不够用了，那肯定要执行一次垃圾回收的，否则程序就没法继续运行了。</p><p>在低并发情况下，单位时间内需要处理的请求不多，创建的对象数量不会很多，自动垃圾回收机制可以很好地发挥作用，它可以选择在系统不太忙的时候来执行垃圾回收，每次垃圾回收的对象数量也不多，相应的，程序暂停的时间非常短，短到我们都无法感知到这个暂停。这是一个良性的循环。</p><p>在高并发的情况下，一切都变得不一样了。</p><p>我们的程序会非常繁忙，短时间内就会创建大量的对象，这些对象将会迅速占满内存，这时候，由于没有内存可以使用了，垃圾回收被迫开始启动，并且，这次被迫执行的垃圾回收面临的是占满整个内存的海量对象，它执行的时间也会比较长，相应的，这个回收过程会导致进程长时间暂停。</p><p>进程长时间暂停，又会导致大量的请求积压等待处理，垃圾回收刚刚结束，更多的请求立刻涌进来，迅速占满内存，再次被迫执行垃圾回收，进入了一个恶性循环。如果垃圾回收的速度跟不上创建对象的速度，还可能会产生内存溢出的现象。</p><p>于是，就出现了我在这节课开始提到的那个情况：一到大促，大量请求过来，我们的服务就卡死了。</p><h2>高并发下的内存管理技巧</h2><p>对于开发者来说，垃圾回收是不可控的，而且是无法避免的。但是，我们还是可以通过一些方法来降低垃圾回收的频率，减少进程暂停的时长。</p><p>我们知道，只有使用过被丢弃的对象才是垃圾回收的目标，所以，我们需要想办法在处理大量请求的同时，尽量少的产生这种一次性对象。</p><p>最有效的方法就是，优化你的代码中处理请求的业务逻辑，尽量少的创建一次性对象，特别是占用内存较大的对象。比如说，我们可以把收到请求的Request对象在业务流程中一直传递下去，而不是每执行一个步骤，就创建一个内容和Request对象差不多的新对象。这里面没有多少通用的优化方法，你需要根据我告诉你的这个原则，针对你的业务逻辑来想办法进行优化。</p><p>对于需要频繁使用，占用内存较大的一次性对象，我们可以考虑自行回收并重用这些对象。实现的方法是这样的：我们可以为这些对象建立一个对象池。收到请求后，在对象池内申请一个对象，使用完后再放回到对象池中，这样就可以反复地重用这些对象，非常有效地避免频繁触发垃圾回收。</p><p>如果可能的话，使用更大内存的服务器，也可以非常有效地缓解这个问题。</p><p>以上这些方法，都可以在一定程度上缓解由于垃圾回收导致的进程暂停，如果你优化的好，是可以达到一个还不错的效果的。</p><p>当然，要从根本上来解决这个问题，办法只有一个，那就是绕开自动垃圾回收机制，自己来实现内存管理。但是，自行管理内存将会带来非常多的问题，比如说极大增加了程序的复杂度，可能会引起内存泄漏等等。</p><p>流计算平台Flink，就是自行实现了一套内存管理机制，一定程度上缓解了处理大量数据时垃圾回收的问题，但是也带来了一些问题和Bug，总体看来，效果并不是特别好。因此，一般情况下我并不推荐你这样做，具体还是要根据你的应用情况，综合权衡做出一个相对最优的选择。</p><h2>小结</h2><p>现代的编程语言，大多采用自动内存管理机制，虚拟机会不定期执行垃圾回收，自动释放我们不再使用的内存，但是执行垃圾回收的过程会导致进程暂停。</p><p>在高并发的场景下，会产生大量的待回收的对象，需要频繁地执行垃圾回收，导致程序长时间暂停，我们的程序看起来就像卡死了一样。为了缓解这个问题，我们需要尽量少地使用一次性对象，对于需要频繁使用，占用内存较大的一次性对象，我们可以考虑自行回收并重用这些对象，来减轻垃圾回收的压力。</p><h2>思考题</h2><p>如果我们的微服务的需求是处理大量的文本，比如说，每次请求会传入一个10KB左右的文本，在高并发的情况下，你会如何来优化这个程序，来尽量避免由于垃圾回收导致的进程卡死问题？欢迎你在留言区与我分享讨论。</p><p>感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":126704,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1566453647,"is_pvip":false,"replies":[{"id":46925,"content":"思路非常清晰，赞👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566522022,"ip_address":"","comment_id":126704,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"尝试回答下课后习题，老师有空帮忙看下哦\n如果有一个微服务是处理大量的文本，感觉这种一般不会要求时延，大部分都会进行异步处理，更加注重服务的吞吐率，服务可以在更大的内存服务器进行部署，然后把新生代的eden设置的更大些，因为这些文本处理完不会再拿来复用，朝生夕灭，可以在新生代Minor GC，防止对象晋升到老年代，防止频繁的Major GC，如果晋升的对象过多大于老年代的连续内存空间也会有触发Full Gc，然后在这些处理文本的业务流程中，防止频繁的创建一次性的大对象，把文本对象做为业务流程直接传递下去，如果这些文本需要复用可以将他保存起来，防止频繁的创建。也为了保证服务的高可用，也需对服务做限流、负载、兜底的一些策略。","like_count":115},{"had_liked":false,"id":126557,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1566419271,"is_pvip":false,"replies":[{"id":46824,"content":"我希望更给大家的，既能有鱼，先填饱肚子解决手上的问题，然后还能有渔，学到捕鱼的技能，受用终生。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436349,"ip_address":"","comment_id":126557,"utype":1}],"discussion_count":0,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"       一路跟着老师学到现在我大致明白了老师想阐述什么或者说上次回答我的困惑时的答案了；其实老师是想传授：为何要用消息队列、如何使用、何种场景下使用其涉及什么知识我们应当如何把握它的使用。\n        老师上次的回答提到程序不用太深：不过其实程序、网络还有今天的课程提及的内存管理-其实是计算机组成原理的东西，如何合理的去结合这些知识才是消息队列把握好的关键；就像老师今天留的题目其实就是需要程序的垃圾回收机制的知识和组成原理的内存管理的知识结合才能给出相应的正确答案，不知道是否可以这样理解老师今天的题目？\n       同时在跟几位老师的课一起学习知识并梳理自己从业多年的知识体系：至少让我觉得之前对于课程的选择是正确的，至少从大的方面去理解了；老师其实是在授之与渔，而非简单的授之与鱼。\n      期待老师的下节课：希望老师解答一下我对于问题方向上的理解是否正确，谢谢。","like_count":36},{"had_liked":false,"id":127154,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566570499,"is_pvip":false,"replies":[{"id":47071,"content":"A1： 标记阶段需要暂停，清除阶段一般是不需要的。\n\nA2：这个问题有点复杂，你可以参考一下：https:&#47;&#47;stackoverflow.com&#47;questions&#47;16558746&#47;what-mechanism-jvm-use-to-block-threads-during-stop-the-world-pause\n\nA3：对于GC来说只有一个房间，你是没有办法分成多个完全独立的小房间的。 像java中的young gc就是为了缓解这个问题，而产生的变种算法，它可以减少FullGC的次数，但没有办法完全避免FullGC。\n\nA4：内存是按页为单位管理的，也就是一块一块的，对于JVM来说，它有一套复杂的数据结构来记录它管理的所有页面与对象引用之间的关系。所谓清除和移动对象，就是修改这个记录关系的数据结构。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566610769,"ip_address":"","comment_id":127154,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"课后思考及问题\n1：这个算法有一个最大问题就是，在执行标记和清除过程中，必须把进程暂停，否则计算的结果就是不准确的。这也就是为什么发生垃圾回收的时候，我们的程序会卡死的原因。后续产生了许多变种的算法，这些算法更加复杂，可以减少一些进程暂停的时间，但都不能完全避免暂停进程。\n对于这段有几个问题？\n1-1：进程必须暂停，是在标记阶段还是在清除阶段？还是两者都会？\n1-2：进程暂停这个实现过程是怎样的？暂停后需要再启动，这个又是一个怎样的过程？\n1-3：后面解释进程必须暂停的原因是为了使计算结果更加准确，我觉得好比打扫卫生，我一个房间一个房间来，也不耽误其他房间的事，是不是暂停是不必须的，其实 young gc 几乎不停的在发生，只有发生full gc 的时候性能才会大大降低？\n1-4：内存清除这个动作具体是怎么实现的？是电平复位？还是打上可以继续使用的标位？如果打标位这个该怎么打呢？一位一位的打？还是一个字节一个字节的打？更或者是一块一块的打？","like_count":19,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464345,"discussion_content":"A1： 标记阶段需要暂停，清除阶段一般是不需要的。\n\nA2：这个问题有点复杂，你可以参考一下：https://stackoverflow.com/questions/16558746/what-mechanism-jvm-use-to-block-threads-during-stop-the-world-pause\n\nA3：对于GC来说只有一个房间，你是没有办法分成多个完全独立的小房间的。 像java中的young gc就是为了缓解这个问题，而产生的变种算法，它可以减少FullGC的次数，但没有办法完全避免FullGC。\n\nA4：内存是按页为单位管理的，也就是一块一块的，对于JVM来说，它有一套复杂的数据结构来记录它管理的所有页面与对象引用之间的关系。所谓清除和移动对象，就是修改这个记录关系的数据结构。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566610769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6363,"discussion_content":"G1会好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566870648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6021,"discussion_content":"好的，非常感谢老师的答复，我再查查进程停止和启动是怎能实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566616321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215551,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1589015168,"is_pvip":false,"replies":[{"id":79942,"content":"👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589171040,"ip_address":"","comment_id":215551,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"高并发和避免gc，尽可能少的系统调用次数，让用户态的应用程序可以快速接受tcp传过来的数据（增大接收套接字的buffer缓冲区大小，可以降低用户态和内核态的内存拷贝频次，降低上下文切换开销）。\n全业务处理流程考虑用指针传递，避免内存拷贝或者堆上内存开销（栈上开销os自行回收），降低被gc可回收的变量基数。\n考虑业务处理线程或协程去复用一些申请的内存区域，比如go中的buffer pool，以及通过buffer reset在处理完业务时候自动释放，可以复用申请的内存区域。\n通过pprof，runtime去监控和观察内存和、gc的实际情况做对照，了解应用程序实际内存的使用情况。\n暂时想到这么多。\n","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464128,"discussion_content":"思路非常清晰，赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566522022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153644,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1450822,"ip_address":"","ucode":"1F14391D73E972","user_header":"https://static001.geekbang.org/account/avatar/00/16/23/46/db5212bc.jpg","comment_is_top":false,"comment_ctime":1574293164,"is_pvip":false,"replies":[{"id":59493,"content":"这个问题比较复杂，没有统一的答案，在不同的编程语言中处理都不太一样。\n\n一般面向对象的语言，比如Java这种，对象的属性如果是基本类型，它的内存空间会随着对象的创建就占用上了。如果属性也是一个对象，什么时候真正去申请内存，取决于你的代码中是在什么时候new出这个属性对象的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1574643020,"ip_address":"","comment_id":153644,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，假如我有一个对象，这个对象作为接口的入参，但是前端在传值的时候，只传了部分字段，那么在申请内存空间的时候，这个对象是只申请传值了的这些对象所以占用的空间，还是所有属性占用的空间","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464345,"discussion_content":"A1： 标记阶段需要暂停，清除阶段一般是不需要的。\n\nA2：这个问题有点复杂，你可以参考一下：https://stackoverflow.com/questions/16558746/what-mechanism-jvm-use-to-block-threads-during-stop-the-world-pause\n\nA3：对于GC来说只有一个房间，你是没有办法分成多个完全独立的小房间的。 像java中的young gc就是为了缓解这个问题，而产生的变种算法，它可以减少FullGC的次数，但没有办法完全避免FullGC。\n\nA4：内存是按页为单位管理的，也就是一块一块的，对于JVM来说，它有一套复杂的数据结构来记录它管理的所有页面与对象引用之间的关系。所谓清除和移动对象，就是修改这个记录关系的数据结构。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566610769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6363,"discussion_content":"G1会好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566870648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6021,"discussion_content":"好的，非常感谢老师的答复，我再查查进程停止和启动是怎能实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566616321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126599,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1566434685,"is_pvip":false,"replies":[{"id":46923,"content":"是这样的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566521771,"ip_address":"","comment_id":126599,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"占用内存差不多的，是不是比较适合池化？","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475236,"discussion_content":"这个问题比较复杂，没有统一的答案，在不同的编程语言中处理都不太一样。\n\n一般面向对象的语言，比如Java这种，对象的属性如果是基本类型，它的内存空间会随着对象的创建就占用上了。如果属性也是一个对象，什么时候真正去申请内存，取决于你的代码中是在什么时候new出这个属性对象的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574643020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126575,"user_name":"木小柒","can_delete":false,"product_type":"c1","uid":1000802,"ip_address":"","ucode":"947439CDD0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/62/3c6041e7.jpg","comment_is_top":false,"comment_ctime":1566431419,"is_pvip":false,"replies":[{"id":46827,"content":"那能否用本节课中学到的一些内存管理的方法来解决呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436468,"ip_address":"","comment_id":126575,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"接上一条，点击空白留言出去了，这个功能好尴尬。可以先看机器能给到的内存量和cpu消耗，看大约一秒钟可以处理多少文件。然后限流，可以把文件存本地，也可以存消息队列中，看资源来定。控制文件数量，虽然处理排队慢了，但不至于挂掉。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464076,"discussion_content":"是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566521771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126570,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1566430417,"is_pvip":false,"replies":[{"id":46826,"content":"是的，要解决的问题是一样的，解决的思路也是差不多的，具体的实现上会有很多细节上的不同。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436393,"ip_address":"","comment_id":126570,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"其他语言的内存管理 也存在类似的现象吗 也是这么处理吗 老师","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464065,"discussion_content":"那能否用本节课中学到的一些内存管理的方法来解决呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215521,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1589010540,"is_pvip":false,"replies":[{"id":79943,"content":"它们之间的思想是类似的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589171102,"ip_address":"","comment_id":215521,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"对于需要频繁使用，占用内存较大的一次性对象，我们可以考虑自行回收并重用这些对象。实现的方法是这样的：我们可以为这些对象建立一个对象池。\n---》这个是不是就是设计模式中的享元模式的实际应用","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464062,"discussion_content":"是的，要解决的问题是一样的，解决的思路也是差不多的，具体的实现上会有很多细节上的不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145302,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572247580,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"简单整理下jvm的一些概念，帮大家回忆回忆这些理论哈哈\n垃圾回收算法：\n标记清除：效率较低，会产生内存碎片\n复制算法：将内存一分为二，通过不断将活着的对象移动到内存另一面，再清除这面，解决了效率低、内存碎片的问题，引来新的问题：内存一分为二代价太高\n标记-整理算法：先标记（过程跟标记清除一样）再将存活对象都向一端移动，清理掉端边界以外的内存。适用于老年代\n分代收集算法：将内存划分为几块，新生代采用复制算法，老年代采用标记-整理算法\n垃圾收集器：\nSerial收集器：新生代采用复制算法，会stop the world；老年代采用标记-整理算法，也会stop the world\nParNew收集器：Serial收集器的多线程版本，其他一模一样\nParallel Scavenge收集器：特点：可控制的吞吐量\nCMS收集器：特点：重视服务响应速度，降低GC停顿时间\n大致分为4个步骤\n初始标记\n并发标记\n重新标记\n并发清除\n会在初始标记和重新标记这两步stop the world\nG1收集器：特点：可预测的停顿，可以明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒\nG1的运作大致分为以下几步：\n初始标记\n并发标记\n最终标记\n筛选回收\n会在初始标记、最终标记、筛选回收时stop the world\n","like_count":37,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494465,"discussion_content":"它们之间的思想是类似的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589171102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126704,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1566453647,"is_pvip":false,"replies":[{"id":46925,"content":"思路非常清晰，赞👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566522022,"ip_address":"","comment_id":126704,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"尝试回答下课后习题，老师有空帮忙看下哦\n如果有一个微服务是处理大量的文本，感觉这种一般不会要求时延，大部分都会进行异步处理，更加注重服务的吞吐率，服务可以在更大的内存服务器进行部署，然后把新生代的eden设置的更大些，因为这些文本处理完不会再拿来复用，朝生夕灭，可以在新生代Minor GC，防止对象晋升到老年代，防止频繁的Major GC，如果晋升的对象过多大于老年代的连续内存空间也会有触发Full Gc，然后在这些处理文本的业务流程中，防止频繁的创建一次性的大对象，把文本对象做为业务流程直接传递下去，如果这些文本需要复用可以将他保存起来，防止频繁的创建。也为了保证服务的高可用，也需对服务做限流、负载、兜底的一些策略。","like_count":115,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464128,"discussion_content":"思路非常清晰，赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566522022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126557,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1566419271,"is_pvip":false,"replies":[{"id":46824,"content":"我希望更给大家的，既能有鱼，先填饱肚子解决手上的问题，然后还能有渔，学到捕鱼的技能，受用终生。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436349,"ip_address":"","comment_id":126557,"utype":1}],"discussion_count":0,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"       一路跟着老师学到现在我大致明白了老师想阐述什么或者说上次回答我的困惑时的答案了；其实老师是想传授：为何要用消息队列、如何使用、何种场景下使用其涉及什么知识我们应当如何把握它的使用。\n        老师上次的回答提到程序不用太深：不过其实程序、网络还有今天的课程提及的内存管理-其实是计算机组成原理的东西，如何合理的去结合这些知识才是消息队列把握好的关键；就像老师今天留的题目其实就是需要程序的垃圾回收机制的知识和组成原理的内存管理的知识结合才能给出相应的正确答案，不知道是否可以这样理解老师今天的题目？\n       同时在跟几位老师的课一起学习知识并梳理自己从业多年的知识体系：至少让我觉得之前对于课程的选择是正确的，至少从大的方面去理解了；老师其实是在授之与渔，而非简单的授之与鱼。\n      期待老师的下节课：希望老师解答一下我对于问题方向上的理解是否正确，谢谢。","like_count":36},{"had_liked":false,"id":127154,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566570499,"is_pvip":false,"replies":[{"id":47071,"content":"A1： 标记阶段需要暂停，清除阶段一般是不需要的。\n\nA2：这个问题有点复杂，你可以参考一下：https:&#47;&#47;stackoverflow.com&#47;questions&#47;16558746&#47;what-mechanism-jvm-use-to-block-threads-during-stop-the-world-pause\n\nA3：对于GC来说只有一个房间，你是没有办法分成多个完全独立的小房间的。 像java中的young gc就是为了缓解这个问题，而产生的变种算法，它可以减少FullGC的次数，但没有办法完全避免FullGC。\n\nA4：内存是按页为单位管理的，也就是一块一块的，对于JVM来说，它有一套复杂的数据结构来记录它管理的所有页面与对象引用之间的关系。所谓清除和移动对象，就是修改这个记录关系的数据结构。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566610769,"ip_address":"","comment_id":127154,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"课后思考及问题\n1：这个算法有一个最大问题就是，在执行标记和清除过程中，必须把进程暂停，否则计算的结果就是不准确的。这也就是为什么发生垃圾回收的时候，我们的程序会卡死的原因。后续产生了许多变种的算法，这些算法更加复杂，可以减少一些进程暂停的时间，但都不能完全避免暂停进程。\n对于这段有几个问题？\n1-1：进程必须暂停，是在标记阶段还是在清除阶段？还是两者都会？\n1-2：进程暂停这个实现过程是怎样的？暂停后需要再启动，这个又是一个怎样的过程？\n1-3：后面解释进程必须暂停的原因是为了使计算结果更加准确，我觉得好比打扫卫生，我一个房间一个房间来，也不耽误其他房间的事，是不是暂停是不必须的，其实 young gc 几乎不停的在发生，只有发生full gc 的时候性能才会大大降低？\n1-4：内存清除这个动作具体是怎么实现的？是电平复位？还是打上可以继续使用的标位？如果打标位这个该怎么打呢？一位一位的打？还是一个字节一个字节的打？更或者是一块一块的打？","like_count":19,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494473,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589171040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215551,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1589015168,"is_pvip":false,"replies":[{"id":79942,"content":"👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589171040,"ip_address":"","comment_id":215551,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"高并发和避免gc，尽可能少的系统调用次数，让用户态的应用程序可以快速接受tcp传过来的数据（增大接收套接字的buffer缓冲区大小，可以降低用户态和内核态的内存拷贝频次，降低上下文切换开销）。\n全业务处理流程考虑用指针传递，避免内存拷贝或者堆上内存开销（栈上开销os自行回收），降低被gc可回收的变量基数。\n考虑业务处理线程或协程去复用一些申请的内存区域，比如go中的buffer pool，以及通过buffer reset在处理完业务时候自动释放，可以复用申请的内存区域。\n通过pprof，runtime去监控和观察内存和、gc的实际情况做对照，了解应用程序实际内存的使用情况。\n暂时想到这么多。\n","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494473,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589171040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153644,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1450822,"ip_address":"","ucode":"1F14391D73E972","user_header":"https://static001.geekbang.org/account/avatar/00/16/23/46/db5212bc.jpg","comment_is_top":false,"comment_ctime":1574293164,"is_pvip":false,"replies":[{"id":59493,"content":"这个问题比较复杂，没有统一的答案，在不同的编程语言中处理都不太一样。\n\n一般面向对象的语言，比如Java这种，对象的属性如果是基本类型，它的内存空间会随着对象的创建就占用上了。如果属性也是一个对象，什么时候真正去申请内存，取决于你的代码中是在什么时候new出这个属性对象的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1574643020,"ip_address":"","comment_id":153644,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，假如我有一个对象，这个对象作为接口的入参，但是前端在传值的时候，只传了部分字段，那么在申请内存空间的时候，这个对象是只申请传值了的这些对象所以占用的空间，还是所有属性占用的空间","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475236,"discussion_content":"这个问题比较复杂，没有统一的答案，在不同的编程语言中处理都不太一样。\n\n一般面向对象的语言，比如Java这种，对象的属性如果是基本类型，它的内存空间会随着对象的创建就占用上了。如果属性也是一个对象，什么时候真正去申请内存，取决于你的代码中是在什么时候new出这个属性对象的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574643020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126599,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1566434685,"is_pvip":false,"replies":[{"id":46923,"content":"是这样的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566521771,"ip_address":"","comment_id":126599,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"占用内存差不多的，是不是比较适合池化？","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464076,"discussion_content":"是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566521771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126575,"user_name":"木小柒","can_delete":false,"product_type":"c1","uid":1000802,"ip_address":"","ucode":"947439CDD0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/62/3c6041e7.jpg","comment_is_top":false,"comment_ctime":1566431419,"is_pvip":false,"replies":[{"id":46827,"content":"那能否用本节课中学到的一些内存管理的方法来解决呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436468,"ip_address":"","comment_id":126575,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"接上一条，点击空白留言出去了，这个功能好尴尬。可以先看机器能给到的内存量和cpu消耗，看大约一秒钟可以处理多少文件。然后限流，可以把文件存本地，也可以存消息队列中，看资源来定。控制文件数量，虽然处理排队慢了，但不至于挂掉。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464065,"discussion_content":"那能否用本节课中学到的一些内存管理的方法来解决呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126570,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1566430417,"is_pvip":false,"replies":[{"id":46826,"content":"是的，要解决的问题是一样的，解决的思路也是差不多的，具体的实现上会有很多细节上的不同。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566436393,"ip_address":"","comment_id":126570,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"其他语言的内存管理 也存在类似的现象吗 也是这么处理吗 老师","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464062,"discussion_content":"是的，要解决的问题是一样的，解决的思路也是差不多的，具体的实现上会有很多细节上的不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215521,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1589010540,"is_pvip":false,"replies":[{"id":79943,"content":"它们之间的思想是类似的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589171102,"ip_address":"","comment_id":215521,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"对于需要频繁使用，占用内存较大的一次性对象，我们可以考虑自行回收并重用这些对象。实现的方法是这样的：我们可以为这些对象建立一个对象池。\n---》这个是不是就是设计模式中的享元模式的实际应用","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494465,"discussion_content":"它们之间的思想是类似的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589171102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145302,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572247580,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"简单整理下jvm的一些概念，帮大家回忆回忆这些理论哈哈\n垃圾回收算法：\n标记清除：效率较低，会产生内存碎片\n复制算法：将内存一分为二，通过不断将活着的对象移动到内存另一面，再清除这面，解决了效率低、内存碎片的问题，引来新的问题：内存一分为二代价太高\n标记-整理算法：先标记（过程跟标记清除一样）再将存活对象都向一端移动，清理掉端边界以外的内存。适用于老年代\n分代收集算法：将内存划分为几块，新生代采用复制算法，老年代采用标记-整理算法\n垃圾收集器：\nSerial收集器：新生代采用复制算法，会stop the world；老年代采用标记-整理算法，也会stop the world\nParNew收集器：Serial收集器的多线程版本，其他一模一样\nParallel Scavenge收集器：特点：可控制的吞吐量\nCMS收集器：特点：重视服务响应速度，降低GC停顿时间\n大致分为4个步骤\n初始标记\n并发标记\n重新标记\n并发清除\n会在初始标记和重新标记这两步stop the world\nG1收集器：特点：可预测的停顿，可以明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒\nG1的运作大致分为以下几步：\n初始标记\n并发标记\n最终标记\n筛选回收\n会在初始标记、最终标记、筛选回收时stop the world\n","like_count":37},{"had_liked":false,"id":129039,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1567015150,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"需求：\n1.处理10kb的文本（文本存储和业务处理）\n2.进程不卡死（高响应服务不中断）\n\n\n分析：\n1.请求不可丢失，响应要快，允许业务处理有一定滞后性。\n2.发挥单机性能极限，但不越限导致卡顿或中断。\n\n方案：\n1.采用生产消费模式，接受到数据直接持久化，异步消费。为了实现数据积压，不丢失，可以走跨进程的实现，比如mq。\n2.压测文本落盘和文本业务处理两个进程的负载能力，调整其接入层线程池线程数，找到最高单机并发上限，设置令牌桶做限流。通过水平扩提高总请求负载力。落盘和业务处理两块根据并发负载力调整相对集群的节点比例。\n\n\n注：除非业务真有性能需求，不然千万别一个对象传到底。架设防腐层，业务解耦，对系统的扩展力很是重要。对于高速发展的项目（变化大且快），其价值远大于这么点性能提升。（先往易于演变的架构走，前期堆机器。真到业务量足够庞大，需要调优时再调优）","like_count":18},{"had_liked":false,"id":126734,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1566460087,"is_pvip":false,"replies":null,"discussion_count":5,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"通过一个对象池，池子里的对象大小是10k，每次请求申请对象，结束请求归还对象。另外提个意见，老师能在每次新课的时候讲述一下上一课提的问题的答案吗？","like_count":18,"discussions":[{"author":{"id":1369447,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e5/67/16322a5d.jpg","nickname":"cky.宇","note":"","ucode":"93A3EAD9D50A5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310261,"discussion_content":"同意，一个对象传到底不利于业务解耦，创建合适的业务对象可以极大提高代码可读性与可维护性。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601719508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126551,"user_name":"a、","can_delete":false,"product_type":"c1","uid":1532404,"ip_address":"","ucode":"590FE8DB111492","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","comment_is_top":false,"comment_ctime":1566409138,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"通过jstat 观察gc情况和分析gc日志，来合理分配堆内存，年轻代，年老代大小，尽量让对象在minor gc就能被回收，而不需要执行full gc。因为full gc执行速度慢，程序暂停时间就长","like_count":10},{"had_liked":false,"id":126771,"user_name":"渔村蓝","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1566469745,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"拿到文本，异步写入硬盘，给队列一个路径，另一个线程监控队列，一个个路径拿出来加载到内存一个个处理。","like_count":3},{"had_liked":false,"id":126727,"user_name":"vi","can_delete":false,"product_type":"c1","uid":1504664,"ip_address":"","ucode":"943CADFE6C1A6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIBabuBHlohpGYRDt4mwWghVDztHyRnC9SfyYnENUZNbCe8m05qQn0cHdiazU4eKmMtSQ0bHicwLLQ/132","comment_is_top":false,"comment_ctime":1566459309,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"1. 使用对象池，重复使用对象，每次处理文件中的行数据，更新到利用的对象中\n2. 把对象外迁，使用中间件缓存对象，不被GC扫描到","like_count":3,"discussions":[{"author":{"id":1802337,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/61/ae3bb67c.jpg","nickname":"毛毛虫大帝","note":"","ucode":"1EBB026121C060","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160846,"discussion_content":"我比较赞同你的想法 自己管理内存 可以做到内存的及时释放 如果内存分页在4k的话 10kb差不多占用3个分页12kb的大小 如果缓冲区内存申请120mb就是1000个字符串 在大并发和吞吐量的情况下应该很好的在这个缓冲区里维护申请和释放的工作 前提就是复杂性升高了 但效率肯定也提升了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580829826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6653,"discussion_content":"字符串类型，接收就是10kb对象，你把它的值赋值给对象池中的对象，依旧解决不了该对象需要销毁回收的问题，甚至在该对象销毁前还多站了一份内存。真，脱裤子放屁了。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567013647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20167,"discussion_content":"使用内存拷贝可以吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569286548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6653,"ip_address":"","group_id":0},"score":20167,"extra":""}]},{"author":{"id":1611886,"avatar":"https://static001.geekbang.org/account/avatar/00/18/98/6e/38b4a4ce.jpg","nickname":"渊鱼","note":"","ucode":"EC52C7F6863FA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352807,"discussion_content":"字符串对象本身还是会占用内存，需要对字符串处理过程中的工具对象进行统一管理，防止频繁创建。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614856763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6611,"discussion_content":"并发量比较大的时候怎么办","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566991016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126594,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1566434458,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"除了方法论，还想要一个结合方法论的demo实现！","like_count":3,"discussions":[{"author":{"id":1099750,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","nickname":"川杰","note":"","ucode":"815211E1D698E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5720,"discussion_content":"github上找找，应该有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566444897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126680,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566446226,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"我会考虑使用享元模式，预先分配10KB 左右的对象池，当请求进来时，从对象池中拿一个来使用，用完后，自己释放，以此来自己回收，复用这些对象，减少对象的创建，从而减少垃圾回收。","like_count":2},{"had_liked":false,"id":349176,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1655782770,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"关于问题：\n1.增大硬件\n2.当请求达到一定数目时，直接返回请求超时，就是不到后台，在网关处就返回\n","like_count":1},{"had_liked":false,"id":196398,"user_name":"石佩","can_delete":false,"product_type":"c1","uid":1881512,"ip_address":"","ucode":"8A7BDD7B5A4906","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b5/a8/427a7b6d.jpg","comment_is_top":false,"comment_ctime":1585278335,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"目前这些知识点对于消息队列来说都是必须的，每一点甚至最后在消息队列中都有单独的模块进行实现，文末留的问题就是消息队列实际面对的问题，Broker会接收各种消息进行文本处理 然后存储","like_count":1},{"had_liked":false,"id":195881,"user_name":"九黎曦","can_delete":false,"product_type":"c1","uid":1064393,"ip_address":"","ucode":"7F8A8F650AC4EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/3d/c9/9ea5b6b5.jpg","comment_is_top":false,"comment_ctime":1585220809,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"内存管理这一块比较烦旳是，对象移动问题，因为对象需要移动，所以对象所有的引用都要修改，而这个过程中需要暂停，而且有些对象不支持移动，例如系统的对象等，所以内存管理的最佳策略是分析服务的对象周期制定内存区分配方案，如果参差不齐可以考虑拆分，这也是拆分微服务的策略之一","like_count":1,"discussions":[{"author":{"id":1207622,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6d/46/e16291f8.jpg","nickname":"丁小明","note":"","ucode":"CC23857B8D75D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254689,"discussion_content":"是否可以考虑类似java间接引用的方式，这样需要变更的引用地址会少一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588340261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064393,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3d/c9/9ea5b6b5.jpg","nickname":"九黎曦","note":"","ucode":"7F8A8F650AC4EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214638,"discussion_content":"移动是为了解决内存碎片问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585220890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129039,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1567015150,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"需求：\n1.处理10kb的文本（文本存储和业务处理）\n2.进程不卡死（高响应服务不中断）\n\n\n分析：\n1.请求不可丢失，响应要快，允许业务处理有一定滞后性。\n2.发挥单机性能极限，但不越限导致卡顿或中断。\n\n方案：\n1.采用生产消费模式，接受到数据直接持久化，异步消费。为了实现数据积压，不丢失，可以走跨进程的实现，比如mq。\n2.压测文本落盘和文本业务处理两个进程的负载能力，调整其接入层线程池线程数，找到最高单机并发上限，设置令牌桶做限流。通过水平扩提高总请求负载力。落盘和业务处理两块根据并发负载力调整相对集群的节点比例。\n\n\n注：除非业务真有性能需求，不然千万别一个对象传到底。架设防腐层，业务解耦，对系统的扩展力很是重要。对于高速发展的项目（变化大且快），其价值远大于这么点性能提升。（先往易于演变的架构走，前期堆机器。真到业务量足够庞大，需要调优时再调优）","like_count":18,"discussions":[{"author":{"id":1369447,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e5/67/16322a5d.jpg","nickname":"cky.宇","note":"","ucode":"93A3EAD9D50A5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310261,"discussion_content":"同意，一个对象传到底不利于业务解耦，创建合适的业务对象可以极大提高代码可读性与可维护性。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601719508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126734,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1566460087,"is_pvip":false,"replies":null,"discussion_count":5,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"通过一个对象池，池子里的对象大小是10k，每次请求申请对象，结束请求归还对象。另外提个意见，老师能在每次新课的时候讲述一下上一课提的问题的答案吗？","like_count":18,"discussions":[{"author":{"id":1802337,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/61/ae3bb67c.jpg","nickname":"毛毛虫大帝","note":"","ucode":"1EBB026121C060","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160846,"discussion_content":"我比较赞同你的想法 自己管理内存 可以做到内存的及时释放 如果内存分页在4k的话 10kb差不多占用3个分页12kb的大小 如果缓冲区内存申请120mb就是1000个字符串 在大并发和吞吐量的情况下应该很好的在这个缓冲区里维护申请和释放的工作 前提就是复杂性升高了 但效率肯定也提升了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580829826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6653,"discussion_content":"字符串类型，接收就是10kb对象，你把它的值赋值给对象池中的对象，依旧解决不了该对象需要销毁回收的问题，甚至在该对象销毁前还多站了一份内存。真，脱裤子放屁了。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567013647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20167,"discussion_content":"使用内存拷贝可以吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569286548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6653,"ip_address":"","group_id":0},"score":20167,"extra":""}]},{"author":{"id":1611886,"avatar":"https://static001.geekbang.org/account/avatar/00/18/98/6e/38b4a4ce.jpg","nickname":"渊鱼","note":"","ucode":"EC52C7F6863FA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352807,"discussion_content":"字符串对象本身还是会占用内存，需要对字符串处理过程中的工具对象进行统一管理，防止频繁创建。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614856763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6611,"discussion_content":"并发量比较大的时候怎么办","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566991016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126551,"user_name":"a、","can_delete":false,"product_type":"c1","uid":1532404,"ip_address":"","ucode":"590FE8DB111492","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","comment_is_top":false,"comment_ctime":1566409138,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"通过jstat 观察gc情况和分析gc日志，来合理分配堆内存，年轻代，年老代大小，尽量让对象在minor gc就能被回收，而不需要执行full gc。因为full gc执行速度慢，程序暂停时间就长","like_count":10},{"had_liked":false,"id":126771,"user_name":"渔村蓝","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1566469745,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"拿到文本，异步写入硬盘，给队列一个路径，另一个线程监控队列，一个个路径拿出来加载到内存一个个处理。","like_count":3},{"had_liked":false,"id":126727,"user_name":"vi","can_delete":false,"product_type":"c1","uid":1504664,"ip_address":"","ucode":"943CADFE6C1A6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIBabuBHlohpGYRDt4mwWghVDztHyRnC9SfyYnENUZNbCe8m05qQn0cHdiazU4eKmMtSQ0bHicwLLQ/132","comment_is_top":false,"comment_ctime":1566459309,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"1. 使用对象池，重复使用对象，每次处理文件中的行数据，更新到利用的对象中\n2. 把对象外迁，使用中间件缓存对象，不被GC扫描到","like_count":3,"discussions":[{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5846,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566480951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126594,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1566434458,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"除了方法论，还想要一个结合方法论的demo实现！","like_count":3,"discussions":[{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5846,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566480951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126680,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566446226,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"我会考虑使用享元模式，预先分配10KB 左右的对象池，当请求进来时，从对象池中拿一个来使用，用完后，自己释放，以此来自己回收，复用这些对象，减少对象的创建，从而减少垃圾回收。","like_count":2},{"had_liked":false,"id":349176,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1655782770,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"关于问题：\n1.增大硬件\n2.当请求达到一定数目时，直接返回请求超时，就是不到后台，在网关处就返回\n","like_count":1},{"had_liked":false,"id":196398,"user_name":"石佩","can_delete":false,"product_type":"c1","uid":1881512,"ip_address":"","ucode":"8A7BDD7B5A4906","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b5/a8/427a7b6d.jpg","comment_is_top":false,"comment_ctime":1585278335,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"目前这些知识点对于消息队列来说都是必须的，每一点甚至最后在消息队列中都有单独的模块进行实现，文末留的问题就是消息队列实际面对的问题，Broker会接收各种消息进行文本处理 然后存储","like_count":1},{"had_liked":false,"id":195881,"user_name":"九黎曦","can_delete":false,"product_type":"c1","uid":1064393,"ip_address":"","ucode":"7F8A8F650AC4EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/3d/c9/9ea5b6b5.jpg","comment_is_top":false,"comment_ctime":1585220809,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"内存管理这一块比较烦旳是，对象移动问题，因为对象需要移动，所以对象所有的引用都要修改，而这个过程中需要暂停，而且有些对象不支持移动，例如系统的对象等，所以内存管理的最佳策略是分析服务的对象周期制定内存区分配方案，如果参差不齐可以考虑拆分，这也是拆分微服务的策略之一","like_count":1,"discussions":[{"author":{"id":1099750,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","nickname":"川杰","note":"","ucode":"815211E1D698E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5720,"discussion_content":"github上找找，应该有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566444897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134596,"user_name":"成都小郭","can_delete":false,"product_type":"c1","uid":1493899,"ip_address":"","ucode":"4399AA8C64DF21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hWjwsc6FgZfNkKiacOSUZicscNGFgdqvoo08QFQlfrg39srZJlZicbBP9zsLcDnKAkBfia2lZoKJ8h7QwTYiboiaRT6g/132","comment_is_top":false,"comment_ctime":1568876063,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"disruptor,一个高性能队列,也有这样对对象的优化处理..初始化队列长度之后,就会创建那么多个对象,新消息进来就给对象赋值,减少了很多对象创建和销毁的时间","like_count":1},{"had_liked":false,"id":126955,"user_name":"笑傲流云","can_delete":false,"product_type":"c1","uid":1012594,"ip_address":"","ucode":"40DF87D569C530","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblia3zNpKJ3hEegicBFZqzZBS7l0oSENZicnqw340TnHVQsfNL33OtGyxEVQuS8DmqhPDQ/132","comment_is_top":false,"comment_ctime":1566525571,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，说下我的思路：1，jvm对字符串有优化，字符串是不可变对象，通过字符串常量池，可以复用一些字符串；2，文本10kb过大，是否可以拆分？建议分割文本，形成小对象直接在年轻代被垃圾回收，避免大对象直接进入老年代，引发频繁的full gc；3，Kafka底层存储机制大量使用了page cache，把子节码缓存在磁盘，避免大量对象引发gc问题。","like_count":1},{"had_liked":false,"id":126573,"user_name":"佳佳大魔王","can_delete":false,"product_type":"c1","uid":1235320,"ip_address":"","ucode":"D5214903D85A0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","comment_is_top":false,"comment_ctime":1566431049,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"创建一个静态类型的字符串来存放这个文本，这样每次改变字符串的内容就好了，而不用gc他","like_count":1},{"had_liked":false,"id":373996,"user_name":"廖子博","can_delete":false,"product_type":"c1","uid":1685586,"ip_address":"广东","ucode":"D4A468D8D2F08D","user_header":"https://static001.geekbang.org/account/avatar/00/19/b8/52/5ab04f5d.jpg","comment_is_top":false,"comment_ctime":1683461119,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"为什么高并发下程序容易卡死？\n1.垃圾回收和内存碎片整理需要暂停进程。\n2.高并发垃圾回收和碎片整理更加频繁，而且暂停还会导致请求积压，进一步恶性循环。\n\n如何解决？\n1.减少一次性对象创建。特别是大对象。\n2.使用对象池，实现对象服用。\n3.自行实现内存管理（不推荐）\n4.限流。比如，排队、降级、拒接访问等。","like_count":0},{"had_liked":false,"id":369521,"user_name":"小红帽","can_delete":false,"product_type":"c1","uid":1135290,"ip_address":"广东","ucode":"876000FB67C980","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/ba/440c0157.jpg","comment_is_top":false,"comment_ctime":1677635385,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"从java语言角度来看，要提高接口吞吐量，提高响应时间，减少系统卡顿，至少要考虑以下几个问题：\n1、如何减少fullgc次数？我们可以通过提高硬件资源加大内存，然后调大新生代的大小。然后再业务使用过程中该对象最好引用传递一直到结束，不要频繁的创建对象；\n2、因为吞吐量和响应时间是矛盾的，所以如果要提高吞吐量，我们可以同步改异步，先刷盘，再异步处理；\n如果要提高响应时间，那只能降低吞吐量，压力测试后限流；\n","like_count":0},{"had_liked":false,"id":357811,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"上海","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1663659581,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"增加机器可以缓解这种一次性对象大量创建的问题吗？原来一台机器是每分钟创建10万，平分5台机器就是每分钟俩万。","like_count":0},{"had_liked":false,"id":349175,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1655782723,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"如何避免内存溢出和频繁的垃圾回收，正常并发小的时候，高级语言的自动内存gc不存在问题，都是在空闲的时候进行垃圾回收，垃圾回收导致的程序中断，用户不会有感知。但是在并发量大的时候，进行的垃圾回收，对程序的中断，让用户体验到程序确实是中断了，而且垃圾回收刚刚结束，立马这个又有并发请求进来，不断的gc，让用户感觉程序在不断的中断。\n\n","like_count":0},{"had_liked":false,"id":340987,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649255771,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"申请内存：\n1，计算对象的大小\n2，找出对应大小的连续内存\n3，将内存地址绑定到对象的引用上。\n内存回收使用标记-清除的方法，难点在于内存碎片的整理及 执行内存回收时，程序处于短暂的不可用状态。\n内存回收的时机:\n1，系统定时执行自动回收。\n2，内存不足时触发内存回收。\n高并发系统需要注意，尽量少创建一次性的大对象，尽量传递对象应用，让对象可以重复利用。无法避免大的一次性对象，可以用对象池优化。","like_count":0},{"had_liked":false,"id":322897,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1637649478,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师的问题很好 这里我再加一点假设 因为问题里是10KB的纯文本 这种请求一般在前台是很少见得。\n假设按QPS1000计 那么固定带宽是 10KB * 1000 = 10MB 故这里还要注意千兆网卡是否能同时撑住上下行带宽。当然考虑到10KB文本的场景 个人感觉请求量不会再大了 且对时延可以适当放宽。\n\n以下说下我的思路：\n1. 增大Eden区 以PS G1这类针对前台应用的GC来说 。尽可能能地让朝生夕死的大对象在eden区消亡是最好的。故10MB 以 4:1:1的来反推 最后eden区最少需要： 10MB *2 * 4 * 10 = 800MB\n\n简单说下这里的系数：\n1）2为动态年龄判断的最小阈值，故此处要乘以2\n2）4为eden区与from区默认配比\n3）10这里为放大系数 此处为我个人的经验值\n\n2.如果请求允许时延 或者说不是立即给出返回结果。那么通常为了增大吞吐量 此处会使用异步模式，或者扔到站点的线程池里或者扔到db里。\n这里讨论下为什么不适合扔到db里。因为innodb是以16KB为一页 而这个10k的纯文本显然极具挤压行记录 造成innodb的页迅速占满。反而使得业内行记录极具减少 且考虑到10KB的随机IO写入 应该使用顺序IO下推的方式。所以我会使用MQ来推到下游服务来实现异步。","like_count":0},{"had_liked":false,"id":312234,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1631696922,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"问题：如果我们的微服务的需求是处理大量的文本，比如说，每次请求会传入一个 10KB 左右的文本，在高并发的情况下，你会如何来优化这个程序，来尽量避免由于垃圾回收导致的进程卡死问题？\n回答：申请一个全局10k空间，专门存放文本，请求完成不释放，后续再次使用。","like_count":0,"discussions":[{"author":{"id":1485489,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/b1/c834aab5.jpg","nickname":"张小勋","note":"","ucode":"8C5E434EF53BF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37651,"discussion_content":"按照这个思想 你是设置一个全局的静态对象   高并发多线程的情况下  大家一起去修改这个值  不断的去更新  你程序还怎么使用  然道去加锁? 这个更加不现实应该    貌似就像评论里面说的一样  使用 对象池的 方式比较合适  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571652176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27407,"discussion_content":"字符串是不可变对象啊，改变其实是新增一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570638912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336441,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","nickname":"努力奋斗的Pisces","note":"","ucode":"AD4F8909CF190A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5674,"discussion_content":"😂😂😂你什么逻辑啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566433836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1235320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","nickname":"佳佳大魔王","note":"","ucode":"D5214903D85A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336441,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","nickname":"努力奋斗的Pisces","note":"","ucode":"AD4F8909CF190A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5728,"discussion_content":"静态的不是可以作为根节点，进永久代，每次都用他就不会被gc了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566448077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5674,"ip_address":"","group_id":0},"score":5728,"extra":""}]}]},{"had_liked":false,"id":134596,"user_name":"成都小郭","can_delete":false,"product_type":"c1","uid":1493899,"ip_address":"","ucode":"4399AA8C64DF21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hWjwsc6FgZfNkKiacOSUZicscNGFgdqvoo08QFQlfrg39srZJlZicbBP9zsLcDnKAkBfia2lZoKJ8h7QwTYiboiaRT6g/132","comment_is_top":false,"comment_ctime":1568876063,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"disruptor,一个高性能队列,也有这样对对象的优化处理..初始化队列长度之后,就会创建那么多个对象,新消息进来就给对象赋值,减少了很多对象创建和销毁的时间","like_count":1},{"had_liked":false,"id":126955,"user_name":"笑傲流云","can_delete":false,"product_type":"c1","uid":1012594,"ip_address":"","ucode":"40DF87D569C530","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblia3zNpKJ3hEegicBFZqzZBS7l0oSENZicnqw340TnHVQsfNL33OtGyxEVQuS8DmqhPDQ/132","comment_is_top":false,"comment_ctime":1566525571,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，说下我的思路：1，jvm对字符串有优化，字符串是不可变对象，通过字符串常量池，可以复用一些字符串；2，文本10kb过大，是否可以拆分？建议分割文本，形成小对象直接在年轻代被垃圾回收，避免大对象直接进入老年代，引发频繁的full gc；3，Kafka底层存储机制大量使用了page cache，把子节码缓存在磁盘，避免大量对象引发gc问题。","like_count":1},{"had_liked":false,"id":126573,"user_name":"佳佳大魔王","can_delete":false,"product_type":"c1","uid":1235320,"ip_address":"","ucode":"D5214903D85A0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","comment_is_top":false,"comment_ctime":1566431049,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"创建一个静态类型的字符串来存放这个文本，这样每次改变字符串的内容就好了，而不用gc他","like_count":1,"discussions":[{"author":{"id":1485489,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/b1/c834aab5.jpg","nickname":"张小勋","note":"","ucode":"8C5E434EF53BF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37651,"discussion_content":"按照这个思想 你是设置一个全局的静态对象   高并发多线程的情况下  大家一起去修改这个值  不断的去更新  你程序还怎么使用  然道去加锁? 这个更加不现实应该    貌似就像评论里面说的一样  使用 对象池的 方式比较合适  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571652176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27407,"discussion_content":"字符串是不可变对象啊，改变其实是新增一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570638912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336441,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","nickname":"努力奋斗的Pisces","note":"","ucode":"AD4F8909CF190A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5674,"discussion_content":"😂😂😂你什么逻辑啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566433836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1235320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","nickname":"佳佳大魔王","note":"","ucode":"D5214903D85A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336441,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","nickname":"努力奋斗的Pisces","note":"","ucode":"AD4F8909CF190A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5728,"discussion_content":"静态的不是可以作为根节点，进永久代，每次都用他就不会被gc了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566448077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5674,"ip_address":"","group_id":0},"score":5728,"extra":""}]}]},{"had_liked":false,"id":373996,"user_name":"廖子博","can_delete":false,"product_type":"c1","uid":1685586,"ip_address":"广东","ucode":"D4A468D8D2F08D","user_header":"https://static001.geekbang.org/account/avatar/00/19/b8/52/5ab04f5d.jpg","comment_is_top":false,"comment_ctime":1683461119,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"为什么高并发下程序容易卡死？\n1.垃圾回收和内存碎片整理需要暂停进程。\n2.高并发垃圾回收和碎片整理更加频繁，而且暂停还会导致请求积压，进一步恶性循环。\n\n如何解决？\n1.减少一次性对象创建。特别是大对象。\n2.使用对象池，实现对象服用。\n3.自行实现内存管理（不推荐）\n4.限流。比如，排队、降级、拒接访问等。","like_count":0},{"had_liked":false,"id":369521,"user_name":"小红帽","can_delete":false,"product_type":"c1","uid":1135290,"ip_address":"广东","ucode":"876000FB67C980","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/ba/440c0157.jpg","comment_is_top":false,"comment_ctime":1677635385,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"从java语言角度来看，要提高接口吞吐量，提高响应时间，减少系统卡顿，至少要考虑以下几个问题：\n1、如何减少fullgc次数？我们可以通过提高硬件资源加大内存，然后调大新生代的大小。然后再业务使用过程中该对象最好引用传递一直到结束，不要频繁的创建对象；\n2、因为吞吐量和响应时间是矛盾的，所以如果要提高吞吐量，我们可以同步改异步，先刷盘，再异步处理；\n如果要提高响应时间，那只能降低吞吐量，压力测试后限流；\n","like_count":0},{"had_liked":false,"id":357811,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"上海","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1663659581,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"增加机器可以缓解这种一次性对象大量创建的问题吗？原来一台机器是每分钟创建10万，平分5台机器就是每分钟俩万。","like_count":0},{"had_liked":false,"id":349175,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1655782723,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"如何避免内存溢出和频繁的垃圾回收，正常并发小的时候，高级语言的自动内存gc不存在问题，都是在空闲的时候进行垃圾回收，垃圾回收导致的程序中断，用户不会有感知。但是在并发量大的时候，进行的垃圾回收，对程序的中断，让用户体验到程序确实是中断了，而且垃圾回收刚刚结束，立马这个又有并发请求进来，不断的gc，让用户感觉程序在不断的中断。\n\n","like_count":0},{"had_liked":false,"id":340987,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649255771,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"申请内存：\n1，计算对象的大小\n2，找出对应大小的连续内存\n3，将内存地址绑定到对象的引用上。\n内存回收使用标记-清除的方法，难点在于内存碎片的整理及 执行内存回收时，程序处于短暂的不可用状态。\n内存回收的时机:\n1，系统定时执行自动回收。\n2，内存不足时触发内存回收。\n高并发系统需要注意，尽量少创建一次性的大对象，尽量传递对象应用，让对象可以重复利用。无法避免大的一次性对象，可以用对象池优化。","like_count":0},{"had_liked":false,"id":322897,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1637649478,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师的问题很好 这里我再加一点假设 因为问题里是10KB的纯文本 这种请求一般在前台是很少见得。\n假设按QPS1000计 那么固定带宽是 10KB * 1000 = 10MB 故这里还要注意千兆网卡是否能同时撑住上下行带宽。当然考虑到10KB文本的场景 个人感觉请求量不会再大了 且对时延可以适当放宽。\n\n以下说下我的思路：\n1. 增大Eden区 以PS G1这类针对前台应用的GC来说 。尽可能能地让朝生夕死的大对象在eden区消亡是最好的。故10MB 以 4:1:1的来反推 最后eden区最少需要： 10MB *2 * 4 * 10 = 800MB\n\n简单说下这里的系数：\n1）2为动态年龄判断的最小阈值，故此处要乘以2\n2）4为eden区与from区默认配比\n3）10这里为放大系数 此处为我个人的经验值\n\n2.如果请求允许时延 或者说不是立即给出返回结果。那么通常为了增大吞吐量 此处会使用异步模式，或者扔到站点的线程池里或者扔到db里。\n这里讨论下为什么不适合扔到db里。因为innodb是以16KB为一页 而这个10k的纯文本显然极具挤压行记录 造成innodb的页迅速占满。反而使得业内行记录极具减少 且考虑到10KB的随机IO写入 应该使用顺序IO下推的方式。所以我会使用MQ来推到下游服务来实现异步。","like_count":0},{"had_liked":false,"id":312234,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1631696922,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"问题：如果我们的微服务的需求是处理大量的文本，比如说，每次请求会传入一个 10KB 左右的文本，在高并发的情况下，你会如何来优化这个程序，来尽量避免由于垃圾回收导致的进程卡死问题？\n回答：申请一个全局10k空间，专门存放文本，请求完成不释放，后续再次使用。","like_count":0},{"had_liked":false,"id":273420,"user_name":"haijian.yang","can_delete":false,"product_type":"c1","uid":1162081,"ip_address":"","ucode":"E3D13ABA2CA347","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/61/2c2f5024.jpg","comment_is_top":false,"comment_ctime":1610593126,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"Go 的 sync.pool 类似","like_count":0},{"had_liked":false,"id":268356,"user_name":"Taunton","can_delete":false,"product_type":"c1","uid":1225146,"ip_address":"","ucode":"90E49FAD93C08F","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/ba/4815b028.jpg","comment_is_top":false,"comment_ctime":1608167233,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1.使用堆外内存，这样内存不处于jvm管理下，不会频繁发生垃圾回收导致进程停顿\n2.使用如netty中提供的池化ByteBuf去接收数据","like_count":0},{"had_liked":false,"id":147906,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1572918452,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"看评论也学习不少东西，jvm 差不多忘光了（泪","like_count":0},{"had_liked":false,"id":146132,"user_name":"张新国","can_delete":false,"product_type":"c1","uid":1154363,"ip_address":"","ucode":"75E8710FB31CC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/3b/5b5b3ec9.jpg","comment_is_top":false,"comment_ctime":1572438729,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"如果是有大量的临时对象，我觉得有两种办法:1增大新生代内存占比 2是不是可以开启逃逸分析 随线程退出从栈内存中直接回收","like_count":0},{"had_liked":false,"id":134016,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1568721463,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"10kb还是挺大的，会扔到mq队列中，然后通过固定线程池来一一处理每个文本。整体思路还是使用异步处理的机制。","like_count":0},{"had_liked":false,"id":128949,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1566991377,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"并发量较大 可考虑部署多个微服务 ，然后限流 + 池化","like_count":0},{"had_liked":false,"id":126821,"user_name":"我已经设置了昵称","can_delete":false,"product_type":"c1","uid":1364034,"ip_address":"","ucode":"ED672C5EBDBDC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/42/6fd01fb9.jpg","comment_is_top":false,"comment_ctime":1566483487,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"改用String对象池，而不是每次新new 一个String","like_count":0},{"had_liked":false,"id":126710,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1566455440,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1、使用对象池；\n2、加内存；\n3、微服务扩容分流","like_count":0},{"had_liked":false,"id":126673,"user_name":"A9","can_delete":false,"product_type":"c1","uid":1053211,"ip_address":"","ucode":"76D07F8EBE8DD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/1b/f62722ca.jpg","comment_is_top":false,"comment_ctime":1566445288,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"首先，需要看网络带宽和请求数据的流量是否匹配，如果带宽不足，需要增加带宽\n其次，看数据流量和业务逻辑的处理速度。如果处理速度跟不上，应该让数据发送到消息队列上，让多个消费者一起处理\n对于微服务本身，根据部署的环境及代码逻辑，确认出自己能并行的最大线程数（暂时只知道通过压力测试，不知道老师还没有什么好方法），同时在代码中创建与最大线程数对应的StringBuffer用来存储文本\n暂时想到了这么多","like_count":0},{"had_liked":false,"id":126644,"user_name":"void","can_delete":false,"product_type":"c1","uid":1101905,"ip_address":"","ucode":"A415DECDE9A56F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/51/e2d79ec5.jpg","comment_is_top":false,"comment_ctime":1566440380,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1.业务中一直传递request对象\n2.建立对象池\n3.扩大内存","like_count":0},{"had_liked":false,"id":273420,"user_name":"haijian.yang","can_delete":false,"product_type":"c1","uid":1162081,"ip_address":"","ucode":"E3D13ABA2CA347","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/61/2c2f5024.jpg","comment_is_top":false,"comment_ctime":1610593126,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"Go 的 sync.pool 类似","like_count":0},{"had_liked":false,"id":268356,"user_name":"Taunton","can_delete":false,"product_type":"c1","uid":1225146,"ip_address":"","ucode":"90E49FAD93C08F","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/ba/4815b028.jpg","comment_is_top":false,"comment_ctime":1608167233,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1.使用堆外内存，这样内存不处于jvm管理下，不会频繁发生垃圾回收导致进程停顿\n2.使用如netty中提供的池化ByteBuf去接收数据","like_count":0},{"had_liked":false,"id":147906,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1572918452,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"看评论也学习不少东西，jvm 差不多忘光了（泪","like_count":0},{"had_liked":false,"id":146132,"user_name":"张新国","can_delete":false,"product_type":"c1","uid":1154363,"ip_address":"","ucode":"75E8710FB31CC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/3b/5b5b3ec9.jpg","comment_is_top":false,"comment_ctime":1572438729,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"如果是有大量的临时对象，我觉得有两种办法:1增大新生代内存占比 2是不是可以开启逃逸分析 随线程退出从栈内存中直接回收","like_count":0},{"had_liked":false,"id":134016,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1568721463,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"10kb还是挺大的，会扔到mq队列中，然后通过固定线程池来一一处理每个文本。整体思路还是使用异步处理的机制。","like_count":0},{"had_liked":false,"id":128949,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1566991377,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"并发量较大 可考虑部署多个微服务 ，然后限流 + 池化","like_count":0},{"had_liked":false,"id":126821,"user_name":"我已经设置了昵称","can_delete":false,"product_type":"c1","uid":1364034,"ip_address":"","ucode":"ED672C5EBDBDC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/42/6fd01fb9.jpg","comment_is_top":false,"comment_ctime":1566483487,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"改用String对象池，而不是每次新new 一个String","like_count":0},{"had_liked":false,"id":126710,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1566455440,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1、使用对象池；\n2、加内存；\n3、微服务扩容分流","like_count":0},{"had_liked":false,"id":126673,"user_name":"A9","can_delete":false,"product_type":"c1","uid":1053211,"ip_address":"","ucode":"76D07F8EBE8DD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/1b/f62722ca.jpg","comment_is_top":false,"comment_ctime":1566445288,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"首先，需要看网络带宽和请求数据的流量是否匹配，如果带宽不足，需要增加带宽\n其次，看数据流量和业务逻辑的处理速度。如果处理速度跟不上，应该让数据发送到消息队列上，让多个消费者一起处理\n对于微服务本身，根据部署的环境及代码逻辑，确认出自己能并行的最大线程数（暂时只知道通过压力测试，不知道老师还没有什么好方法），同时在代码中创建与最大线程数对应的StringBuffer用来存储文本\n暂时想到了这么多","like_count":0},{"had_liked":false,"id":126644,"user_name":"void","can_delete":false,"product_type":"c1","uid":1101905,"ip_address":"","ucode":"A415DECDE9A56F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/51/e2d79ec5.jpg","comment_is_top":false,"comment_ctime":1566440380,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1.业务中一直传递request对象\n2.建立对象池\n3.扩大内存","like_count":0},{"had_liked":false,"id":126588,"user_name":"胖头小C","can_delete":false,"product_type":"c1","uid":1499881,"ip_address":"","ucode":"1C6A67FCDED740","user_header":"https://static001.geekbang.org/account/avatar/00/16/e2/e9/5be2a24c.jpg","comment_is_top":false,"comment_ctime":1566433787,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"创建一定数量的静态数组，对于每次传过来的数据，取出一个空数组保存，处理完以后，清空数组内容","like_count":0},{"had_liked":false,"id":126588,"user_name":"胖头小C","can_delete":false,"product_type":"c1","uid":1499881,"ip_address":"","ucode":"1C6A67FCDED740","user_header":"https://static001.geekbang.org/account/avatar/00/16/e2/e9/5be2a24c.jpg","comment_is_top":false,"comment_ctime":1566433787,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"创建一定数量的静态数组，对于每次传过来的数据，取出一个空数组保存，处理完以后，清空数组内容","like_count":0}]}