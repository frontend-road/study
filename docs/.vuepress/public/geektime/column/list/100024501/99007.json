{"id":99007,"title":"37 | 如何编写 Clang 插件？","content":"<p>你好，我是戴铭。今天，我和你分享的主题是，如何编写 Clang 插件。</p><p>Clang 使用的是模块化设计，可以将自身功能以库的方式来供上层应用来调用。比如，编码规范检查、IDE 中的语法高亮、语法检查等上层应用，都是使用 Clang 库的接口开发出来的。Clang 库对接上层应用有三个接口库，分别是 LibClang、Clang 插件、LibTooling。关于这三个接口库的介绍，我已经在<a href=\"https://time.geekbang.org/column/article/87844\">第8篇文章</a>中和你详细分享过。</p><p>其中，LibClang 为了兼容更多 Clang 版本，相比Clang少了很多功能；Clang 插件和 LibTooling 具备Clang 的全量能力。Clang 插件编写代码的方式，和 LibTooling 几乎一样，不同的是 Clang 插件还能够控制编译过程，可以加 warning，或者直接中断编译提示错误。另外，编写好的 LibTooling 还能够非常方便地转成 Clang 插件。</p><p>所以说，Clang 插件在功能上是最全的。今天这篇文章，我们就一起来看看怎样编写和运行 Clang 插件。</p><p>Clang 插件代码编写后进行编译的前置条件是编译 Clang。要想编译 Clang ，你就需要先安装 <a href=\"https://cmake.org/\">CMake 工具</a>，来解决跨平台编译规范问题。</p><p>我们可以先通过 CMakeList.txt 文件，来定制CMake编译流程，再根据 CMakeList.txt 文件生成目标平台所需的编译文件。这个编译文件，在类UNIX平台就是 Makefile，在 Windows 平台就是 Visual Studio 工程，macOS 里还可以生成 Xcode 工程。所以，你可以使用熟悉的 Xcode 来编译 Clang。</p><!-- [[[read_end]]] --><p>接下来，我就和你说说怎么拉 Clang 的代码，以及编译 Clang 的过程是什么样的。</p><h2>在 macOS 平台上编译 Clang</h2><p>接下来的内容，我会以macOS 平台编译 Clang 为例。如果你想在其他平台编译，可以参看<a href=\"https://llvm.org/docs/CMake.html\">官方说明</a>。</p><p>首先，从 GitHub 上拉下 Clang 的代码，命令如下：</p><pre><code>git clone https://github.com/llvm/llvm-project.git\n</code></pre><p>然后，执行以下命令，来创建构建所需要的目录：</p><pre><code>cd llvm-project\nmkdir build (in-tree build is not supported)\ncd build\n</code></pre><p>目录结构如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/06/d0/06b2c299d4bd37d809d2e5b03a6d6ad0.png?wh=754*670\" alt=\"\"><br>\n其中，clang 目录就是类 C 语言编译器的代码目录；llvm 目录的代码包含两部分，一部分是对源码进行平台无关优化的优化器代码，另一部分是生成平台相关汇编代码的生成器代码；lldb 目录里是调试器的代码；lld 里是链接器代码。</p><p>macOS 属于类UNIX平台，因此既可以生成 Makefile 文件来编译，也可以生成 Xcode 工程来编译。生成 Makefile 文件，你可以使用如下命令：</p><pre><code>cmake -DLLVM_ENABLE_PROJECTS=clang -G &quot;Unix Makefiles&quot; ../llvm\nmake\n</code></pre><p>生成 Xcode 工程，你可以使用这个命令：</p><pre><code>cmake -G Xcode -DLLVM_ENABLE_PROJECTS=clang ../llvm\n</code></pre><p>执行完后，会在 build 目录下生成 Xcode 工程，路径如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/50/79629c88bce6942278ee42356df9fa50.png?wh=1292*766\" alt=\"\"><br>\n执行 cmake 命令时，你可能会遇到下面的提示：</p><pre><code>-- The C compiler identification is unknown\n-- The CXX compiler identification is unknown\nCMake Error at CMakeLists.txt:39 (project):\n  No CMAKE_C_COMPILER could be found.\n\nCMake Error at CMakeLists.txt:39 (project):\n  No CMAKE_CXX_COMPILER could be found.\n</code></pre><p>这表示 cmake 没有找到代码编译器的命令行工具。这包括两种情况：</p><ul>\n<li>一是，如果你没有安装 Xcode Commandline Tools的话，可以执行如下命令安装：</li>\n</ul><pre><code>xcode-select --install\n</code></pre><ul>\n<li>二是，如果你已经安装了Xcode Commandline Tools的话，直接reset 即可，命令如下：</li>\n</ul><pre><code>sudo xcode-select --reset\n</code></pre><p>生成 Xcode 工程后，打开生成的 LLVM.xcodeproj文件，选择 Automatically Create Schemes。编译完后生成的库文件，就在 llvm-project⁩/build⁩/⁨Debug/⁩⁨lib/ 目录下。</p><p>有了可以编写编译插件的 Xcode 工程，接下来你就可以着手编写 Clang 插件了。</p><h2>准备编写 Clang 插件</h2><p>编写之前，先在 llvm-project/clang/tools/ 目录下创建Clang 插件的目录，添加 YourPlugin.cpp 文件和 CMakeLists.txt 文件。其中，CMake 编译需要通过 CMakeLists.txt 文件来指导编译，cpp 是源文件。</p><p>接下来，我们可以使用如下代码编写 CMakeLists.txt 文件，来定制编译流程：</p><pre><code>add_llvm_library(YourPlugin MODULE YourPlugin.cpp PLUGIN_TOOL clang)\n</code></pre><p>这段代码是指，要将Clang 插件代码集成到 LLVM 的 Xcode 工程中，并作为一个模块进行编写调试。</p><p>想要更多地了解 CMake 的语法和功能，你可以查看<a href=\"https://cmake.org/documentation/\">官方文档</a>。添加了 Clang 插件的目录和文件后，再次用 cmake 命令生成 Xcode 工程，里面就能够集成 YourPlugin.cpp 文件。</p><p>到这里，我们已经准备好了Clang 插件开发环境。接下来，我们就能够在Xcode编译器里开发Clang插件了。</p><p>编写 Clang 插件代码，入口就是 FrontActions。接下来，我们就一起看看FrontActions 是什么？</p><h2>FrontAction 是什么？</h2><p>FrontActions 是编写 Clang 插件的入口，也是一个接口，是基于ASTFrontendAction 的抽象基类。其实，FrontActions 并没干什么实际的事情，只是为接下来基于 AST 操作的函数提供了一个入口和工作环境。</p><p>通过这个接口，你可以编写你要在编译过程中自定义的操作，具体方式是：通过 ASTFrontendAction 在 AST 上自定义操作，重载 CreateASTConsumer 函数返回你自己的 Consumer，以获取 AST 上的 ASTConsumer 单元。</p><p>代码示例如下所示：</p><pre><code>class FindNamedClassAction : public clang::ASTFrontendAction {\npublic:\n  // 实现 CreateASTConsumer 方法\n  virtual std::unique_ptr&lt;clang::ASTConsumer&gt; CreateASTConsumer(\n    clang::CompilerInstance &amp;Compiler, llvm::StringRef InFile) {\n    // 返回 ASTConsumer 单元\n    return std::unique_ptr&lt;clang::ASTConsumer&gt;(\n        new FindNamedClassConsumer);\n  }\n};\n</code></pre><p>ASTConsumer 可以提供很多入口，是一个可以访问 AST 的抽象基类，可以重载 HandleTopLevelDecl() 和 HandleTranslationUnit() 两个函数，以接收访问 AST 时的回调。其中，HandleTopLevelDecl() 函数是在访问到全局变量、函数定义这样最上层声明时进行回调，HandleTranslationUnit() 函数会在接收每个节点访问时的回调。</p><p>下面有一个示例，会重载 HandleTranslationUnit() 函数，使用 ASTContext 为单元调用，通过 RecursiveASTVisitor 来遍历 decl 单元。具体代码如下：</p><pre><code>class FindNamedClassConsumer : public clang::ASTConsumer {\npublic:\n  virtual void HandleTranslationUnit(clang::ASTContext &amp;Context) {\n    // 通过 RecursiveASTVisitor 来遍历 decl 单元。会访问所有 AST 里的节点。\n    Visitor.TraverseDecl(Context.getTranslationUnitDecl());\n  }\nprivate:\n  // 一个 RecursiveASTVisitor 的实现\n  FindNamedClassVisitor Visitor;\n};\n</code></pre><p>上面代码可以看出，接收 AST 节点回调的 TranslationUnitDecl 函数通过重载已经准备就绪，为接下来 RecursiveASTVisitor 访问 AST 节点做好准备工作。</p><p>RecursiveASTVisitor 使用深度优先的方式访问 AST 的所有节点。RecursiveASTVisitor 使用的是访问者模式，支持前序遍历和后序遍历来访问 AST 节点。RecursiveASTVisitor 会遍历 AST 的每个节点，遍历节点的同时会回溯，回溯节点类型的基类，再调用节点对应的 Visit 函数。如果重写了节点对应的 Visit 函数，就会调用重写后的 Visit 函数。可以看出真正在干活的是 RecursiveASTVistor，它基本完成了编写 Clang 插件里最多、最重的活儿。</p><p>接下来，我就跟你说说怎么用 RecursiveASTVisitor 来查找指定名称的 CXXRecordDecl 类型的 AST 节点。也就是说，你需要通过 RecursiveASTVisitor 实现从 AST 里面提取所需要内容。</p><p>CXXRecordDecl 类型，表示 C++ struct/union/class。更多的节点类型，你可以参看<a href=\"http://clang.llvm.org/docs/LibASTMatchersReference.html\">官方文档</a>。</p><h2>使用 RecursiveASTVisitor</h2><p>RecursiveASTVisitor，可以为大多数的AST 节点提供布尔类型的 VisitNodeType(Nodetype *)。VisitNodeType 返回的布尔值可以控制 RecursiveASTVisitor 的访问，决定对 AST 节点的访问是否要继续下去。</p><p>下面，我们来重写一个访问所有 CXXRecordDecl 的 RecursiveASTVisitor。</p><pre><code>class FindNamedClassVisitor\n  : public RecursiveASTVisitor&lt;FindNamedClassVisitor&gt; {\npublic:\n  bool VisitCXXRecordDecl(CXXRecordDecl *Declaration) {\n    // dump 出已经访问的 AST 的声明节点。\n    Declaration-&gt;dump();\n\n    // 返回 true 表示继续遍历 AST，false 表示停止遍历 AST。\n    return true;\n  }\n};\n</code></pre><p>在 RecursiveASTVisitor 的方法里，可以使用 Clang AST 的全部功能获取想要的内容。比如，通过重写 VisitCXXRecordDecl 函数，找到指定名称的所有类声明。示例代码如下：</p><pre><code>bool VisitCXXRecordDecl(CXXRecordDecl *Declaration) {\n  if (Declaration-&gt;getQualifiedNameAsString() == &quot;n::m::C&quot;)\n    Declaration-&gt;dump();\n  return true;\n}\n</code></pre><p>将代码保存成文件 FindClassDecls.cpp，并创建 CMakeLists.txt 文件来进行链接。CMakeLists.txt 的内容如下：</p><pre><code>add_clang_executable(find-class-decls FindClassDecls.cpp)\ntarget_link_libraries(find-class-decls clangTooling)\n</code></pre><p>使用这个工具能够找到 n :: m :: C 的所有声明，然后输出如下信息：</p><pre><code>$ ./bin/find-class-decls &quot;namespace n { namespace m { class C {}; } }&quot;\n</code></pre><h2>编写 PluginASTAction 代码</h2><p>由于 Clang 插件是没有 main 函数的，入口是 PluginASTAction 的 ParseArgs 函数。所以，编写 Clang 插件还要实现ParseArgs来处理入口参数。代码如下所示：</p><pre><code>bool ParseArgs(const CompilerInstance &amp;CI,\n               const std::vector&lt;std::string&gt;&amp; args) {\n  for (unsigned i = 0, e = args.size(); i != e; ++i) {\n    if (args[i] == &quot;-some-arg&quot;) {\n      // 处理命令行参数\n    }\n  }\n  return true;\n}\n</code></pre><h2>注册 Clang 插件</h2><p>最后，还需要在 Clang 插件源码中编写注册代码。编译器会在编译过程中从动态库加载 Clang 插件。使用 FrontendPluginRegistry::Add&lt;&gt; 在库中注册插件。注册 Clang 插件的代码如下：</p><pre><code>static FrontendPluginRegistry::Add&lt;MyPlugin&gt; X(&quot;my-plugin-name&quot;, &quot;my plugin description&quot;);\n</code></pre><p>在 Clang 插件代码的最下面，定义的 my-plugin-name 字符串是命令行字符串，供以后调用时使用，my plugin description 是对 Clang 插件的描述。</p><p>现在，我们已经编写完了 Clang 插件，我来和你汇总下编写过程：</p><p>第一步，编写 FrontAction 入口。</p><p>第二步，通过 RecursiveASTVisitor 访问所有 AST 节点，获取想要的内容。</p><p>第三步，编写 PluginASTAction 代码处理入口参数。</p><p>第四步，注册 Clang 插件，提供外部使用。</p><p>接下来，我们再看看如何使用编写好的Clang插件吧。</p><h2>使用 Clang 插件</h2><p>LLVM 官方有一个完整可用的 Clang 插件示例，可以帮我们打印出最上层函数的名字，你可以点击<a href=\"https://github.com/llvm/llvm-project/blob/master/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp\">这个链接</a>查看这个示例。</p><p>接下来，通过这个插件示例，看看如何使用 Clang 插件。</p><p>使用 Clang 插件可以通过 -load 命令行选项加载包含插件注册表的动态库，-load 命令行会加载已经注册了的所有 Clang 插件。使用 -plugin 选项选择要运行的 Clang 插件。Clang 插件的其他参数通过 -plugin-arg-<plugin-name> 来传递。</plugin-name></p><p>cc1 进程类似一种预处理，这种预处理会发生在编译之前。cc1 和 Clang driver 是两个单独的实体，cc1 负责前端预处理，Clang driver则主要负责管理编译任务调度，每个编译任务都会接受 cc1 前端预处理的参数，然后进行调整。</p><p>有两个方法可以让 -load 和 -plugin 等选项到 Clang 的 cc1 进程中：</p><ul>\n<li>一种是，直接使用 -cc1 选项，缺点是要在命令行上指定完整的系统路径配置；</li>\n<li>另一种是，使用 -Xclang 来为 cc1 进程添加这些选项。-Xclang 参数只运行预处理器，直接将后面参数传递给 cc1 进程，而不影响 clang driver 的工作。</li>\n</ul><p>下面是一个编译 Clang 插件，然后使用 -Xclang 加载使用 Clang 插件的例子：</p><pre><code>$ export BD=/path/to/build/directory\n$ (cd $BD &amp;&amp; make PrintFunctionNames )\n$ clang++ -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS \\\n          -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D_GNU_SOURCE \\\n          -I$BD/tools/clang/include -Itools/clang/include -I$BD/include -Iinclude \\\n          tools/clang/tools/clang-check/ClangCheck.cpp -fsyntax-only \\\n          -Xclang -load -Xclang $BD/lib/PrintFunctionNames.so -Xclang \\\n          -plugin -Xclang print-fns\n</code></pre><p>上面命令中，先设置构建的路径，再通过 make 命令进行编译生成 PrintFunctionNames.so，最后使用 clang 命令配合 -Xclang 参数加载使用 Clang 插件。</p><p>你也可以直接使用 -cc1 参数，但是就需要按照下面的方式来指定完整的文件路径：</p><pre><code>$ clang -cc1 -load ../../Debug+Asserts/lib/libPrintFunctionNames.dylib -plugin print-fns some-input-file.c\n</code></pre><h2>小结</h2><p>今天这篇文章，我主要和你解决的问题是，如何编写 Clang 插件。</p><p>Clang 作为编译前端，已经具有很强大的类 C 语言代码解析能力，利用 Clang 的分析能力，你可以在它对代码Clang AST 分析过程中，获取到 AST 各个节点的信息。</p><p>Clang AST 节点都是派生自 Type、Decl、Stmt。Clang AST 中最基本的两个节点就是语句 Stmt 和 声明 Decl，表达式 Expr 也是 Stmt。官方有份完整的 Clang AST 节点说明，你可以<a href=\"http://clang.llvm.org/docs/LibASTMatchersReference.html\">点击链接</a>查看使用。</p><p>获取到源码全量信息后，就可以更加精准的分析源码，然后统计出不满足编码规范的地方。同时，访问 SourceManager 和 ASTContext，还能够获取到节点所在源代码中的位置信息。这样的话，我们就可以直接通过Clang插件，在问题节点原地修改不规范的代码。</p><p>我们可以在 CreateASTConsumer 期间从 CompilerInstance 中获取ASTContext，进而使用其中的 SourceManager 里的 getFullLoc 方法，来获取 AST 节点所在源码的位置。</p><p>我们可以把获得的位置信息，分成行和列两个部分，据此就能够确定代码具体位置了。获取源码中位置方法如下面代码所示：</p><pre><code>// 使用 ASTContext 的 SourceManager 里的 getFullLoc 方法来获取到 AST 节点所在源码中的位置。\nFullSourceLoc FullLocation = Context-&gt;getFullLoc(Declaration-&gt;getBeginLoc());\nif (FullLocation.isValid())\n  // 按行和列输出\n  llvm::outs() &lt;&lt; &quot;Found declaration at &quot;\n               &lt;&lt; FullLocation.getSpellingLineNumber() &lt;&lt; &quot;:&quot;\n               &lt;&lt; FullLocation.getSpellingColumnNumber() &lt;&lt; &quot;\\n&quot;;\n</code></pre><h2>课后作业</h2><p>Clang 插件本身的编写和使用并不复杂，关键是如何更好地应用到工作中，通过 Clang 插件不光能够检查代码规范，还能够进行无用代码分析、自动埋点打桩、线下测试分析、方法名混淆等。</p><p>结合现在的工作，你还能够想到 Clang 插件的其他应用场景吗？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"36 | iOS 是怎么管理内存的？","id":98560},"right":{"article_title":"38 | 热点问题答疑（四）","id":99267}},"comments":[{"had_liked":false,"id":100697,"user_name":"FR","can_delete":false,"product_type":"c1","uid":1389632,"ip_address":"","ucode":"6892FCB222B465","user_header":"https://static001.geekbang.org/account/avatar/00/15/34/40/a84b6612.jpg","comment_is_top":false,"comment_ctime":1559618274,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"44509291234","product_id":100024501,"comment_content":"同问，苹果新推出swiftUI还有意义吗","like_count":10,"discussions":[{"author":{"id":2031202,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKSibXL7TtUX026icqrU5MVjTGkUZRRgtytADThXA9wcfibu0jgzdjPV1l8ZicibOCicp24r7hjlcdd1aMA/132","nickname":"互动教程网","note":"","ucode":"2D17703B153563","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358243,"discussion_content":"苹果深入研究市面上的优秀的布局框架，再根据自身的发展规划，推出了SwiftUI布局框架，意图成为iOS、watchOS、macOS、tvOS四个平台上的app开发的优先UI布局框架~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615951554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238171,"discussion_content":"没有想明白，你为什么这么问？和本篇的关系，请说一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587213730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1243460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/44/1a5e5992.jpg","nickname":"Tracy.li","note":"","ucode":"0338DEC133CC9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340232,"discussion_content":"SwitchUI","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609932085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":238171,"ip_address":""},"score":340232,"extra":""}]}]},{"had_liked":false,"id":100614,"user_name":"Ankhetsin","can_delete":false,"product_type":"c1","uid":1028469,"ip_address":"","ucode":"3CA233D08D4A72","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/75/60a71bbd.jpg","comment_is_top":false,"comment_ctime":1559606546,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27329410322","product_id":100024501,"comment_content":"如何评价苹果新出的SwiftUI","like_count":6,"discussions":[{"author":{"id":2031202,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKSibXL7TtUX026icqrU5MVjTGkUZRRgtytADThXA9wcfibu0jgzdjPV1l8ZicibOCicp24r7hjlcdd1aMA/132","nickname":"互动教程网","note":"","ucode":"2D17703B153563","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358196,"discussion_content":"苹果深入研究市面上的优秀的布局框架，再根据自身的发展规划，推出了SwiftUI布局框架，意图成为iOS、watchOS、macOS、tvOS四个平台上的app开发的优先UI布局框架~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615944842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102487,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1560234500,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14445136388","product_id":100024501,"comment_content":"老师，请假个问题，热更新的很多方案都被苹果封了，其中有一个没开源的，据说手机 QQ ，他们通过 clang 把 OC 代码编译成自己定制的字节码动态下发，然后开发一个虚拟机去执行（惊呆了），同样实现了原生开发，动态运行。<br><br>我自己试了一下，runtime可以动态生成类、属性、方法，但是怎么动态生成方法的实现（IMP）呢？","like_count":3,"discussions":[{"author":{"id":1169500,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/5c/d3ac7279.jpg","nickname":"吴海峰","note":"","ucode":"4ACF2950A47707","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263554,"discussion_content":"mar","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589211425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1768310,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fb/76/37dccd3d.jpg","nickname":"徐炜","note":"","ucode":"701DAD17B7B253","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124508,"discussion_content":"我也想知道，下一步安全的热更新方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578442546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115342,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1237382,"ip_address":"","ucode":"C2F9C01CFEA032","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/86/c9e17412.jpg","comment_is_top":false,"comment_ctime":1563538039,"is_pvip":false,"replies":[{"id":"42873","content":"c可以使用 LibClang 这个库来开发 Clang 工具","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1563983710,"ip_address":"","comment_id":115342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858505335","product_id":100024501,"comment_content":"只会 c 可以进行插件开发吗？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459063,"discussion_content":"c可以使用 LibClang 这个库来开发 Clang 工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563983710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103624,"user_name":"Chauncey","can_delete":false,"product_type":"c1","uid":1358168,"ip_address":"","ucode":"15E84757D5FF46","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/58/c6c74278.jpg","comment_is_top":false,"comment_ctime":1560478490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855445786","product_id":100024501,"comment_content":"macOS不能说是类unix好吧，是真正的unix分支啊","like_count":1},{"had_liked":false,"id":328299,"user_name":"Geek_ac42dc","can_delete":false,"product_type":"c1","uid":2749761,"ip_address":"","ucode":"5773313648735F","user_header":"","comment_is_top":false,"comment_ctime":1640657987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640657987","product_id":100024501,"comment_content":"这个可以使用ninja 编译 ，Xcode 编译速度有点慢啊","like_count":0},{"had_liked":false,"id":310563,"user_name":"...","can_delete":false,"product_type":"c1","uid":1020427,"ip_address":"","ucode":"35C881D8AA1C5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/0b/2ccf7908.jpg","comment_is_top":false,"comment_ctime":1630745822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630745822","product_id":100024501,"comment_content":"方法名混淆后审核会有影响吗","like_count":0},{"had_liked":false,"id":213958,"user_name":"Master","can_delete":false,"product_type":"c1","uid":1454833,"ip_address":"","ucode":"642F865923C98A","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/f1/54575096.jpg","comment_is_top":false,"comment_ctime":1588600039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588600039","product_id":100024501,"comment_content":"老师，您好！<br>cmake -G Xcode -DLLVM_ENABLE_PROJECTS=clang ..&#47;llvm<br>我使用上面这个命令来构建 xcode project，scheme 和 文件目录下一个 clang 相关的内容都没有，这是为何？我的 Xcode 版本是 11。<br>网上找了其他人相关教程，与您讲的步骤不完全一样，试着他们的做法，也还是一样。求助","like_count":0},{"had_liked":false,"id":126732,"user_name":"CyrusCao","can_delete":false,"product_type":"c1","uid":1056183,"ip_address":"","ucode":"69F110BE91EA24","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhnpfwPf4r7R5Ts9AkWs40ZWjHEkzy39uibB8yXEHsAM6Jd50HgycEONqUVvEaGHucv5BKuIywFzw/132","comment_is_top":false,"comment_ctime":1566459723,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566459723","product_id":100024501,"comment_content":"没有写如何将 .cpp 生成 .dylib 吧","like_count":0,"discussions":[{"author":{"id":1314877,"avatar":"https://static001.geekbang.org/account/avatar/00/14/10/3d/b3991de7.jpg","nickname":"dulp","note":"","ucode":"4CFC3CB87A6640","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351982,"discussion_content":"直接在llvm当中编译，可以在build目录下的debug/lib下面找到你编译的dylib文件","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614557196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104423,"user_name":"Geek__f56783130103","can_delete":false,"product_type":"c1","uid":1458933,"ip_address":"","ucode":"640F9AEA75E352","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJC2enzAlVibSfsP03Pk1ueNHzbDUn9JQrwAK9OwJkLRjpR2jffanXqf8nMwkl4SqERBCiadqMr85CA/132","comment_is_top":false,"comment_ctime":1560751325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560751325","product_id":100024501,"comment_content":"[ 72%] Built target clangCrossTU<br>make[2]: *** No rule to make target `ClangOpenCLBuiltinsImpl&#39;, needed by `tools&#47;clang&#47;lib&#47;Sema&#47;CMakeFiles&#47;obj.clangSema.dir&#47;SemaLookup.cpp.o&#39;.  Stop.<br>make[1]: *** [tools&#47;clang&#47;lib&#47;Sema&#47;CMakeFiles&#47;obj.clangSema.dir&#47;all] Error 2<br>make: *** [all] Error 2","like_count":0},{"had_liked":false,"id":100641,"user_name":"云无心","can_delete":false,"product_type":"c1","uid":1238592,"ip_address":"","ucode":"7F9D9EF9C90633","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/40/c3c00fe2.jpg","comment_is_top":false,"comment_ctime":1559609960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559609960","product_id":100024501,"comment_content":"学习了","like_count":0}]}