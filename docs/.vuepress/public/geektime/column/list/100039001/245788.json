{"id":245788,"title":"94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）","content":"<p>上一节课，我们介绍了幂等框架的一个重要需求场景，接口超时重试。为了避免同一业务被多次重复执行，接口需要支持幂等特性。同时，我们还对功能性需求和非功能性需求做了梳理。今天，我们来讲解幂等框架的设计思路。</p><p>跟限流框架类似，幂等框架的功能性需求也比较简单，但要考虑处理的异常情况有很多，比如业务代码异常、业务系统宕机、幂等框架异常。今天，我们重点讲解如何应对这些异常情况，设计一个高度容错的幂等框架。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>幂等处理正常流程</h2><p>调用方从发起接口请求到接收到响应，一般要经过三个阶段。第一个阶段是调用方发送请求并被实现方接收，第二个阶段是执行接口对应的业务逻辑，第三个阶段是将执行结果返回给调用方。为了实现接口幂等，我们需要将幂等相关的逻辑，添加在这三个阶段中。</p><p>正常情况下，幂等号随着请求传递到接口实现方之后，接口实现方将幂等号解析出来，传递给幂等框架。幂等框架先去数据库（比如Redis）中查找这个幂等号是否已经存在。如果存在，说明业务逻辑已经或者正在执行，就不要重复执行了。如果幂等号不存在，就将幂等号存储在数据库中，然后再执行相应的业务逻辑。</p><p>正常情况下，幂等处理流程是非常简单的，难点在于如何应对异常情况。在这三个阶段中，如果第一个阶段出现异常，比如发送请求失败或者超时，幂等号还没有记录下来，重试请求会被执行，符合我们的预期。如果第三个阶段出现异常，业务逻辑执行完成了，只是在发送结果给调用方的时候，失败或者超时了，这个时候，幂等号已经记录下来，重试请求不会被执行，也符合我们的预期。也就是说，第一、第三阶段出现异常，上述的幂等处理逻辑都可以正确应对。</p><!-- [[[read_end]]] --><p>但是，如果第二个阶段业务执行的过程出现异常，处理起来就复杂多了。接下来，我们就看下幂等框架该如何应对这一阶段的各种异常。我分了三类异常来讲解，它们分别是业务代码异常、业务系统宕机、幂等框架异常。</p><h2>业务代码异常处理</h2><p>当业务代码在执行过程中抛出异常的时候，我们是否应该认定为业务处理失败，然后将已经记录的幂等号删除，允许重新执行业务逻辑呢？</p><p>对于这个问题，我们要分业务异常和系统异常来区分对待。那什么是业务异常？什么是系统异常呢？我举个例子解释一下。比如，A用户发送消息给B用户，但是查询B用户不存在，抛出UserNotExisting异常，我们把这种业务上不符合预期叫做业务异常。因为数据库挂掉了，业务代码访问数据库时，就会报告数据库异常，我们把这种非业务层面的、系统级的异常，叫做系统异常。</p><p>遇到业务异常（比如UserNotExisting异常），我们不删除已经记录的幂等号，不允许重新执行同样的业务逻辑，因为再次重新执行也是徒劳的，还是会报告异常。相反，遇到系统异常（比如数据库访问异常），我们将已经记录的幂等号删除，允许重新执行这段业务逻辑。因为在系统级问题修复之后（比如数据库恢复了），重新执行之前失败的业务逻辑，就有可能会成功。</p><p>实际上，为了让幂等框架尽可能的灵活，低侵入业务逻辑，发生异常（不管是业务异常还是系统异常），是否允许再重试执行业务逻辑，交给开发这块业务的工程师来决定是最合适的了，毕竟他最清楚针对每个异常该如何处理。而幂等框架本身不参与这个决定，它只需要提供删除幂等号的接口，由业务工程师来决定遇到异常的时候，是否需要调用这个删除接口，删除已经记录的幂等号。</p><h2>业务系统宕机处理</h2><p>刚刚分析的是代码异常，我们再来看下，如果在业务处理的过程中，业务系统宕机了（你可以简单理解为部署了业务系统的机器宕机了），幂等框架是否还能正确工作呢？</p><p>如果幂等号已经记录下了，但是因为机器宕机，业务还没来得及执行，按照刚刚的幂等框架的处理流程，即便机器重启，业务也不会再被触发执行了，这个时候该怎么办呢？除此之外，如果记录幂等号成功了，但是在捕获到系统异常之后，要删除幂等号之前，机器宕机了，这个时候又该怎么办？</p><p>如果希望幂等号的记录和业务的执行完全一致，我们就要把它们放到一个事务中。执行成功，必然会记录幂等号；执行失败，幂等号记录也会被自动回滚。因为幂等框架和业务系统各自使用独立的数据库来记录数据，所以，这里涉及的事务属于分布式事务。如果为了解决这个问题，引入分布式事务，那幂等框架的开发难度提高了很多，并且框架使用起来也复杂了很多，性能也会有所损失。</p><p>针对这个问题，我们还有另外一种解决方案。那就是，在存储业务数据的业务数据库（ 比如MySQL）中，建一张表来记录幂等号。幂等号先存储到业务数据库中，然后再同步给幂等框架的Redis数据库。这样做的好处是，我们不需要引入分布式事务框架，直接利用业务数据库本身的事务属性，保证业务数据和幂等号的写入操作，要么都成功，要么都失败。不过，这个解决方案会导致幂等逻辑，跟业务逻辑没有完全解耦，不符合我们之前讲到的低侵入、松耦合的设计思想。</p><p>实际上，做工程不是做理论。对于这种极少发生的异常，在工程中，我们能够做到，在出错时能及时发现问题、能够根据记录的信息人工修复就可以了。虽然看起来解决方案不优雅，不够智能，不够自动化，但是，这比编写一大坨复杂的代码逻辑来解决，要好使得多。所以，我们建议业务系统记录SQL的执行日志，在日志中附加上幂等号。这样我们就能在机器宕机时，根据日志来判断业务执行情况和幂等号的记录是否一致。</p><h2>幂等框架异常处理</h2><p>我们前面提到，限流框架本身的异常，不能导致接口响应异常。那对于幂等框架来说，是否也适用这条设计原则呢？</p><p>对于限流来说，限流框架执行异常（比如，Redis访问超时或者访问失败），我们可以触发服务降级，让限流功能暂时不起作用，接口还能正常执行。如果大量的限流接口调用异常，在具有完善监控的情况下，这些异常很快就会被运维发现并且修复，所以，短暂的限流失效，也不会对业务系统产生太多影响。毕竟限流只是一个针对突发情况的保护机制，平时并不起作用。如果偶尔的极个别的限流接口调用异常，本不应该被放过的几个接口请求，因为限流的暂时失效被放过了，对于这种情况，绝大部分业务场景都是可以接受的。毕竟限流不可能做到非常精确，多放过一两个接口请求几乎没影响。</p><p>对于幂等来说，尽管它应对的也是超时重试等特殊场景，但是，如果本不应该重新执行的业务逻辑，因为幂等功能的暂时失效，被重复执行了，就会导致业务出错（比如，多次执行转账，钱多转了）。对于这种情况，绝大部分业务场景都是无法接受的。所以，在幂等逻辑执行异常时，我们选择让接口请求也失败，相应的业务逻辑就不会被重复执行了。毕竟接口请求失败（比如转钱没转成功），比业务执行出错（比如多转了钱），修复的成本要低很多。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>今天，我们讲解了幂等框架的设计思路。在正常情况下，幂等框架的处理流程是比较简单的，调用方生成幂等号，传递给实现方，实现方记录幂等号或者用幂等号判重。但是，幂等框架要处理的异常情况很多，这也是设计的复杂之处和难点之处。</p><p>我们针对三种不同类型的异常，讲解了幂等框架的应对思路。</p><p>对于业务代码异常，为了让幂等框架尽可能的灵活，低侵入业务逻辑，发生异常（不管是业务异常还是系统异常），是否允许再重试执行业务逻辑，交给开发这块业务的工程师来决定。</p><p>对于业务系统宕机，对于这种极少发生的异常，在工程中，我们能够做到，在出错时能及时发现问题、能够根据记录的信息人工修复，就可以了。所以，我们建议业务系统记录SQL的执行日志，在日志中附加上幂等号。这样我们就能在机器宕机时，根据日志来判断业务执行情况和幂等号的记录是否一致。</p><p>对于幂等框架异常，跟限流框架异常处理对策不同，在幂等逻辑执行异常时，我们选择让接口请求也失败，相应的业务逻辑就不会被重复执行了，业务就不会出错。毕竟接口请求失败，比业务执行出错，修复的成本要低很多。</p><p>虽然幂等框架要处理的异常很多，但考虑到开发成本以及简单易用性，我们对某些异常的处理在工程上做了妥协，交由业务系统或者人工介入处理。这样就大大简化了幂等框架开发的复杂度和难度。</p><h2>课堂讨论</h2><p>我常说，异常情况考虑是否全面，处理是否得当，很能体现一个程序员的逻辑思维能力、工程能力。除了我们今天讲到的异常，在幂等框架中，你还能想到有哪些其他异常情况会发生？又该如何应对呢？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）","id":245022},"right":{"article_title":"95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）","id":246379}},"comments":[{"had_liked":false,"id":224850,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1591575982,"is_pvip":false,"replies":[{"id":"84002","content":"是的，跟限流正好相反！","user_name":"作者回复","comment_id":224850,"uid":"1190123","ip_address":"","utype":1,"ctime":1592526823,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"263584581038","product_id":100039001,"comment_content":"幂等框架是宁可错杀，不可放过，放过了（多执行）修复难度太大，错杀了无非是再执行一次","like_count":62,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497628,"discussion_content":"是的，跟限流正好相反！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592526823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280871,"discussion_content":"所以一般我们设置为不允许重试！根据业务看如何补偿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591623249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224924,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1591593946,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"91785907162","product_id":100039001,"comment_content":"1.这教的不止是设计模式。还包含了设计过程中的权衡取舍。看栏主的专栏，就像个小迷弟一样，每篇都是666打call。<br><br>2.针对今天的专栏延伸一个问题。我们知道rpc接口一般都是result返回的模式。然后系统的异常可以分为业务异常和技术异常，业务异常一般重试解决不了，需要主动告警人工介入，技术异常则往往需要重试，自动化解决。这就导致result中的code往往有多个值，用于区分业务异常和技术异常走相应的逻辑。<br><br>但是我觉得这很难受，我希望result的code只有0和1，仅用于表示是否发生了技术异常，甚至我希望没有result这种返回模式（rpc框架层面处理技术异常），毕竟rpc技术就是让开发者像调用本地接口一样调用远程接口。但是如果code只表示技术异常，那么属于业务异常的标记和异常消息就只能放在data中，这又让接口返回数据和业务异常耦合了。当然，我们也可以不捕捉业务异常，让它在调用侧抛出，这更贴合像调用本地方法一样调用远程方法的理念，但这样站在服务方的角度，最外层的接口都没有处理异常，又显得不合适了。<br><br>所以，请问栏主和各位同学，rpc接口的返回应该怎么设计合理，你们又是怎么实践的？<br><br>3.回答课后题。比如某个策略依赖配置表，由于配置信息缓存延迟，发生了业务异常。这时候异常是业务异常，但引起异常的原因是缓存延迟这个技术问题。重试可以走通流程，但需要人工介入刷新缓存，或则等待缓存刷新。","like_count":22,"discussions":[{"author":{"id":1031683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/03/404edf37.jpg","nickname":"小动物","note":"","ucode":"BCC35CE768EB99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290027,"discussion_content":"关于code，同样十分纠结。尝试过多种思路。最近比较顺手的思路是：业务错误码调用方真的关心么？调用接口无非就是想执行某项业务（查询接口一般不会纠结code值），执行业务无非就是三种结果，成功、失败、不确定。至于为什么失败，绝大部分场景给一个message就已经够用。若三种结果不够用，那是否可以重新考虑设计，为什么需要返回更多的信息，这个信息真正想让调用方知道什么，做什么。明确的含义视乎对调用方更加友好。\n若还是保留原code值的方式，调用方将会很累，在提供方增加错误场景时需要跟进进行适配。但若抛弃code值，直接告诉调用方应该做什么，视乎会轻松很多","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594305967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1031683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/03/404edf37.jpg","nickname":"小动物","note":"","ucode":"BCC35CE768EB99","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290032,"discussion_content":"code的问题我也纠结。事实上应该是，返回成功，放回业务（失败重试也无效），返回系统失败（重试可成功）。这三种。根据使用场景不一定都要用到。拿读的场景，如果是web展示，代码自己重试还不如让用户刷新，毕竟小概率事件。而如果是提供给开放平台，外部拉数据的，那么业务异常报错，终止拉单，系统异常重试解决。这就有意义了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594307383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290027,"ip_address":""},"score":290032,"extra":""}]},{"author":{"id":1357950,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/7e/a5b44325.jpg","nickname":"Howard Chow","note":"","ucode":"554D6A268D3C28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336732,"discussion_content":"返回code区分具体的失败原因，对于做业务系统而言很有用啊，调用方可以根据需要做不同的应对措施。比如在分布式的场景，根据code判断是马上重试，还是延时重试，延时延多久，还是说不等了转派任务给其他节点执行等等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608689831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058688,"avatar":"https://static001.geekbang.org/account/avatar/00/10/27/80/03c407f6.jpg","nickname":"木子上清","note":"","ucode":"D6C13218CED0A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302356,"discussion_content":"外面包一层通用的请求状态（对业务请求透明），里面一层返回业务状态，分开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598885232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299119,"discussion_content":"rpc接口我们没有包result，而是像调用本地方法一样，return DTO。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597569048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299138,"discussion_content":"看看google和阿里的编码规范。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597573818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299119,"ip_address":""},"score":299138,"extra":""}]},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283501,"discussion_content":"result这种模式不是只在rpc接口里用，每个接口都可以有自己的result  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592284268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283514,"discussion_content":"内部接口搞这个，徒增负担。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592287223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":283501,"ip_address":""},"score":283514,"extra":""},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283645,"discussion_content":"我不是说一定要这样做，是说result这种不是非要规定在rpc中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592318634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":283514,"ip_address":""},"score":283645,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283667,"discussion_content":"这得看你拿result来做什么，在我眼里result是用来对调用方屏蔽系统异常详细信息，且能告知调用方发生了系统的玩意。所以才有这样的认知，当然这很可能也是错的。\n\n至于你说的内部接口result。我现在接手的项目就是。整个项目所有内部接口，包括私有方法，全部返回result模式。这让我很抓狂很懵逼。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592322401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":283645,"ip_address":""},"score":283667,"extra":""}]}]},{"had_liked":false,"id":225757,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1591847352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44541520312","product_id":100039001,"comment_content":"一路跟着栏主，坚持到现在，一篇篇啃下来，不知不觉的，如今跟人聊起设计，突然也讲得头头是道。刷完这一波，再重读第二遍","like_count":11},{"had_liked":false,"id":225102,"user_name":"tingye","can_delete":false,"product_type":"c1","uid":1391463,"ip_address":"","ucode":"54F7A44066DF5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","comment_is_top":false,"comment_ctime":1591658402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35951396770","product_id":100039001,"comment_content":"二八原则这里看起来也适用，20%正常处理代码，80%异常处理代码。<br>业务异常可能有更复杂的情况，比如第一次业务操作失败原因可能是依赖的业务条件未达成（B用户不存在），但延迟一段时间就满足了（B用户创建好了），这种可能需要支持延迟重试策略，而重试也要给个上限，避免死循环","like_count":9},{"had_liked":false,"id":236582,"user_name":"qwerboo","can_delete":false,"product_type":"c1","uid":1005025,"ip_address":"","ucode":"0FD78F765A4861","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e1/8c223e95.jpg","comment_is_top":false,"comment_ctime":1595471882,"is_pvip":false,"replies":[{"id":"87551","content":"事务回滚的话 不会同步到redis的，只有事务完全执行完了，才会写redis","user_name":"作者回复","comment_id":236582,"uid":"1190123","ip_address":"","utype":1,"ctime":1595593750,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"27365275658","product_id":100039001,"comment_content":"那如果事务回滚，同步到redis中的值怎么处理呢？不删除的话下次请求不就会被拒绝吗？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502131,"discussion_content":"事务回滚的话 不会同步到redis的，只有事务完全执行完了，才会写redis","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595593750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540690,"discussion_content":"那还有必要记录操作日志吗？直接业务数据表根据幂等号做唯一约束就可以了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640138725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":502131,"ip_address":""},"score":540690,"extra":""},{"author":{"id":1105744,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/50/b9955f61.jpg","nickname":"皮聪","note":"","ucode":"75D9E182BC00E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561208,"discussion_content":"那不是又将幂等功能跟业务耦合了吗，目的是为了解藕将幂等的一些操作抽取出去做成公用的呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649576942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540690,"ip_address":""},"score":561208,"extra":""}]},{"author":{"id":2631573,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","nickname":"溜溜球","note":"","ucode":"BBA5E4405D9902","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377476,"discussion_content":"不是在业务逻辑开始时同步redis吗 ？如果执行完才同步 那在事务执行的时候 又发了同一个请求 这不就破坏了幂等吗","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1622681910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2631573,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","nickname":"溜溜球","note":"","ucode":"BBA5E4405D9902","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":390531,"discussion_content":"这里应该是指redis是从数据库那边同步过去的吧，应该不是指在业务代码中直接写入redis","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629879531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377476,"ip_address":""},"score":390531,"extra":""},{"author":{"id":1580185,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/99/5e1a2118.jpg","nickname":"mylife","note":"","ucode":"D802160BFB29FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2631573,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","nickname":"溜溜球","note":"","ucode":"BBA5E4405D9902","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":591037,"discussion_content":"我理解：在事务执行过程中，是先将幂等号插入到数据库中，然后处理业务；因而在这个过程中如果又发生了同一个请求，由于数据库事务锁会阻塞或者触发数据库唯一值异常，因此不会破坏。当事务执行完后，才同步到redis；后续的请求就可以直接在redis里面去判断了，如果redis没再会通过数据库存储的来处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666237225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377476,"ip_address":"广东"},"score":591037,"extra":""}]}]},{"had_liked":false,"id":229575,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1593062677,"is_pvip":false,"replies":[{"id":"84971","content":"嗯嗯 多谢指出，我改下","user_name":"作者回复","comment_id":229575,"uid":"1190123","ip_address":"","utype":1,"ctime":1593310069,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"18772931861","product_id":100039001,"comment_content":"争哥，文中关于[业务系统宕机处理]那节的第二段，<br>&quot; 如果幂等号已经记录下了，但是因为机器宕机，业务还来得及执行，按照刚刚的幂等框架的处理流程，即便机器重启，业务也不会再被触发执行了，这个时候该怎么办呢？除此之外，如果记录幂等号成功了，但是在捕获到系统异常之后，要删除幂等号之前，机器宕机了，这个时候又该怎么办？ &quot;<br><br>应该是业务还‘没‘来得及执行吧？<br>吹毛求疵般地执行文章评审，手动狗头。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499543,"discussion_content":"嗯嗯 多谢指出，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593310069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122034,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/f2/453d5f88.jpg","nickname":"seker","note":"","ucode":"9B705F91355873","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328736,"discussion_content":"挺好的，我们看到的这些错漏提出，也是帮助文章质量更进一步，减少其他后来读者的误解。争哥的系列文章看作是一本书的话，也是需要编辑审查内容的。书再版会有较高的成本，专栏文章改起来则很方便。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606220670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253160,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1602638817,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14487540705","product_id":100039001,"comment_content":"那这个幂等框架每次都要依赖开启数据库事务，不然无法保障业务数据和幂等框架插入的数据同时成功或者同时失败。而开事务本身是业务方根据自己的业务场景决定，如果业务本身不需要开事务，而引入幂等框架需要强开事务，这种耦合性本身也是比较高的。<br>我的想法是，可以在幂等框架中幂等键引入中间状态。成功状态。失败状态。三种。<br>在 中间状态和成功状态 都可以幂等住。<br>失败状态（对应文中的删除）。<br>文中说的极端情况，可以引入异步任务，去更新。","like_count":4,"discussions":[{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543240,"discussion_content":"我们就是这么做的，根据接口级别设置超时时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641022029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225087,"user_name":"Jian","can_delete":false,"product_type":"c1","uid":1107305,"ip_address":"","ucode":"17ED4919F22DEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/69/719ec5d0.jpg","comment_is_top":false,"comment_ctime":1591635372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10181569964","product_id":100039001,"comment_content":"每天下班回家看一讲，快尾声了","like_count":2},{"had_liked":false,"id":224896,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1591585713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10181520305","product_id":100039001,"comment_content":"框架本身在设计的时候,尽可能的考虑到相关的异常问题,一般都够触发项目的异常的,还是启动时候因为配置文件设置错误导致的异常问题,这就需要对配置文件的正确性进行校验<br>而且,对于幂等号,我们是否可以设置过期时间,来方便项目组件宕机后重启,直接使用,不用手动删除幂等号了","like_count":2},{"had_liked":false,"id":246780,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1599476856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894444152","product_id":100039001,"comment_content":"查询redis，或者写redis的时候，如果失败，这种异常情况也需要考虑","like_count":1},{"had_liked":false,"id":233459,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1594339345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889306641","product_id":100039001,"comment_content":"如果业务方记录了幂等号，就不用回写到redis了吧，个人偏向于数据库记录幂等号，可以一个微服务数据库对应一张幂等号的表，但幂等号要全局唯一，这个是需要业务发起方来保证的。","like_count":1},{"had_liked":false,"id":325848,"user_name":"delicate","can_delete":false,"product_type":"c1","uid":1187083,"ip_address":"","ucode":"AE262751C50CDD","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/0b/5f353b88.jpg","comment_is_top":false,"comment_ctime":1639193604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639193604","product_id":100039001,"comment_content":"分布式系统下还需要考虑幂等号全局唯一，不可重复，或许可以参照雪花算法实现","like_count":0},{"had_liked":false,"id":313180,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1632302870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632302870","product_id":100039001,"comment_content":"本章突出一个解决问题的灵活性","like_count":0},{"had_liked":false,"id":302393,"user_name":"taku","can_delete":false,"product_type":"c1","uid":2068684,"ip_address":"","ucode":"B22DA9A4A9DC91","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","comment_is_top":false,"comment_ctime":1626188621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626188621","product_id":100039001,"comment_content":"如果是多数据源的事务，幂等号保存位置还是要依赖分布式事务吧","like_count":0},{"had_liked":false,"id":300395,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1625138661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625138661","product_id":100039001,"comment_content":"我被问到这样一个问题：在数据同步的场景下，比如说两个数据库a和b，数据从a流向b，准实时，因为是异步，a把数据推给b，b返回a 消息说OK，然后在入库，实际上b入库可能会错了，b自己也可能不知道，那么如何确保a和b的数据版本始终保持一致的？","like_count":0},{"had_liked":false,"id":298267,"user_name":"承诺如手中沙","can_delete":false,"product_type":"c1","uid":2661447,"ip_address":"","ucode":"632FB58BD94D78","user_header":"https://static001.geekbang.org/account/avatar/00/28/9c/47/f4e36efb.jpg","comment_is_top":false,"comment_ctime":1623987959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623987959","product_id":100039001,"comment_content":"‘’幂等号先存储到业务数据库中，然后再同步给幂等框架的 Redis 数据库，同步给redis存在延时问题，怎么解决","like_count":0},{"had_liked":false,"id":297982,"user_name":"勿更改任何信息","can_delete":false,"product_type":"c1","uid":2028956,"ip_address":"","ucode":"575185C69C05A3","user_header":"","comment_is_top":false,"comment_ctime":1623859022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623859022","product_id":100039001,"comment_content":"其他可能的异常<br>记录幂等号可能超时，记录了立即去查询可能由于延迟查询不到","like_count":0},{"had_liked":false,"id":287599,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1618045736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618045736","product_id":100039001,"comment_content":"一些异常处理可以有配置来决定，由业务开发人员来确认，是允许重试，还是直接报错。<br>可以给默认值，约定由于配置，在特别的地方特殊处理一下就好了。","like_count":0},{"had_liked":false,"id":279269,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1613701627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613701627","product_id":100039001,"comment_content":"现在都是微服务架构，服务实例的量太多了，幂等框架作为低等框架，让每一个微服务都在建立一个存储幂等号的表是否有点代价太大了","like_count":1},{"had_liked":false,"id":254697,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1603171089,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603171089","product_id":100039001,"comment_content":"数据库事务处理完了再操作redis，如果redis还出错，那就需要手动把数据库回滚回去吗?","like_count":0},{"had_liked":false,"id":241740,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1597405951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597405951","product_id":100039001,"comment_content":"并发请求下，执行多次<br>","like_count":0},{"had_liked":false,"id":241275,"user_name":"Jeff","can_delete":false,"product_type":"c1","uid":1028501,"ip_address":"","ucode":"49E7F2244BC481","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/95/57bb9624.jpg","comment_is_top":false,"comment_ctime":1597234231,"is_pvip":false,"replies":[{"id":"89221","content":"也可以的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597411430,"ip_address":"","comment_id":241275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597234231","product_id":100039001,"comment_content":"业务写执行日志到DB，性能问题怎么解决？不如写本地日志，虽然系统异常时日志可能丢失，但是不影响性能，最后只要选好日志框架问题不会太大","like_count":1},{"had_liked":false,"id":228724,"user_name":"KLOOOP","can_delete":false,"product_type":"c1","uid":1220981,"ip_address":"","ucode":"1BBF897219786F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erkQ49YqAySHOlynF8fC7Z65ic0icmWYKVJFicAiam4RFcyzZK5IqWI9KYaicaEqw3B24ibaKSicqTOdwDzQ/132","comment_is_top":false,"comment_ctime":1592795097,"is_pvip":false,"replies":[{"id":"86612","content":"只需要1+2在一个事务中就可以，这样就可以依赖数据库事务来解决，不需要分布式事务。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594781780,"ip_address":"","comment_id":228724,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1592795097","product_id":100039001,"comment_content":"&quot;针对这个问题，我们还有另外一种解决方案。那就是，在存储业务数据的业务数据库（ 比如 MySQL）中，建一张表来记录幂等号。幂等号先存储到业务数据库中，然后再同步给幂等框架的 Redis 数据库。&quot;--- 1.记录幂等号；2.执行业务逻辑；3.同步给幂等框架的reidis；4.以上都成功，提交事务。这样理解对么？","like_count":1,"discussions":[{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410941,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635816644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386897,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/91/4b09222c.jpg","nickname":"pb","note":"","ucode":"180EC2A00EDCBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365107,"discussion_content":"同意1.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617710613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293308,"discussion_content":"摸摸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595501644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293307,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595501327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}